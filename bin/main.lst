
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	79 0c 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     y...............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 a1 08 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c009bf0 	.word	0x0c009bf0
 800024c:	20000000 	.word	0x20000000
 8000250:	000009e0 	.word	0x000009e0
 8000254:	0c00a5d0 	.word	0x0c00a5d0
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c009bf0 	.word	0x0c009bf0
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c009bf0 	.word	0x0c009bf0
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200009e0 	.word	0x200009e0
 800027c:	000000a8 	.word	0x000000a8
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000294:	08001a35 	.word	0x08001a35
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	080026c1 	.word	0x080026c1
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08001715 	.word	0x08001715

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <initMEMSsensor>:
#include "lis3dh_library.h"

uint8_t initMEMSsensor()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
	uint8_t error = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	71fb      	strb	r3, [r7, #7]

    //set ODR (turn ON device)
    if(LIS3DH_SetODR(LIS3DH_ODR_100Hz) == 1)
 80002be:	2005      	movs	r0, #5
 80002c0:	f000 feea 	bl	8001098 <LIS3DH_SetODR>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d103      	bne.n	80002d2 <initMEMSsensor+0x1e>
    {
        printf("LIS3DH_SetODR done...\n");
 80002ca:	4828      	ldr	r0, [pc, #160]	; (800036c <initMEMSsensor+0xb8>)
 80002cc:	f002 fb50 	bl	8002970 <puts>
 80002d0:	e008      	b.n	80002e4 <initMEMSsensor+0x30>
    }
	else
	{
		error++;
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	3301      	adds	r3, #1
 80002d6:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80002d8:	4b25      	ldr	r3, [pc, #148]	; (8000370 <initMEMSsensor+0xbc>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	3301      	adds	r3, #1
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	4b23      	ldr	r3, [pc, #140]	; (8000370 <initMEMSsensor+0xbc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	}

    //set PowerMode
    if(LIS3DH_SetMode(LIS3DH_NORMAL) == 1)
 80002e4:	2002      	movs	r0, #2
 80002e6:	f000 ff85 	bl	80011f4 <LIS3DH_SetMode>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d103      	bne.n	80002f8 <initMEMSsensor+0x44>
    {

        printf("LIS3DH_SetMode done...\n");
 80002f0:	4820      	ldr	r0, [pc, #128]	; (8000374 <initMEMSsensor+0xc0>)
 80002f2:	f002 fb3d 	bl	8002970 <puts>
 80002f6:	e008      	b.n	800030a <initMEMSsensor+0x56>
    }
	else
	{
		error++;
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	3301      	adds	r3, #1
 80002fc:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80002fe:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <initMEMSsensor+0xbc>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	3301      	adds	r3, #1
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <initMEMSsensor+0xbc>)
 8000308:	701a      	strb	r2, [r3, #0]
	}

    //set Fullscale
    if(LIS3DH_SetFullScale(LIS3DH_FULLSCALE_2) == 1)
 800030a:	2000      	movs	r0, #0
 800030c:	f001 f81c 	bl	8001348 <LIS3DH_SetFullScale>
 8000310:	4603      	mov	r3, r0
 8000312:	2b01      	cmp	r3, #1
 8000314:	d103      	bne.n	800031e <initMEMSsensor+0x6a>
    {

        printf("LIS3DH_SetFullScale done...\n");
 8000316:	4818      	ldr	r0, [pc, #96]	; (8000378 <initMEMSsensor+0xc4>)
 8000318:	f002 fb2a 	bl	8002970 <puts>
 800031c:	e008      	b.n	8000330 <initMEMSsensor+0x7c>
    }
	else
	{
		error++;
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	3301      	adds	r3, #1
 8000322:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <initMEMSsensor+0xbc>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	3301      	adds	r3, #1
 800032a:	b2da      	uxtb	r2, r3
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <initMEMSsensor+0xbc>)
 800032e:	701a      	strb	r2, [r3, #0]
	}

    //set axis Enable
    response = LIS3DH_SetAxis(LIS3DH_X_ENABLE | LIS3DH_Y_ENABLE | LIS3DH_Z_ENABLE);
 8000330:	2007      	movs	r0, #7
 8000332:	f000 ffdd 	bl	80012f0 <LIS3DH_SetAxis>
 8000336:	4603      	mov	r3, r0
 8000338:	461a      	mov	r2, r3
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <initMEMSsensor+0xc8>)
 800033c:	701a      	strb	r2, [r3, #0]
    if(response == 1)
 800033e:	4b0f      	ldr	r3, [pc, #60]	; (800037c <initMEMSsensor+0xc8>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d103      	bne.n	800034e <initMEMSsensor+0x9a>
    {
        printf("LIS3DH_SetAxis done...\n");
 8000346:	480e      	ldr	r0, [pc, #56]	; (8000380 <initMEMSsensor+0xcc>)
 8000348:	f002 fb12 	bl	8002970 <puts>
 800034c:	e008      	b.n	8000360 <initMEMSsensor+0xac>
    }
	else
	{
		error++;
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	3301      	adds	r3, #1
 8000352:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <initMEMSsensor+0xbc>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b04      	ldr	r3, [pc, #16]	; (8000370 <initMEMSsensor+0xbc>)
 800035e:	701a      	strb	r2, [r3, #0]
	}

	return error;
 8000360:	79fb      	ldrb	r3, [r7, #7]
}
 8000362:	4618      	mov	r0, r3
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	0800971c 	.word	0x0800971c
 8000370:	20000a7a 	.word	0x20000a7a
 8000374:	08009734 	.word	0x08009734
 8000378:	0800974c 	.word	0x0800974c
 800037c:	20000a79 	.word	0x20000a79
 8000380:	08009768 	.word	0x08009768

08000384 <configMEMSsensor>:

uint8_t configMEMSsensor()
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
	uint8_t error = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	71fb      	strb	r3, [r7, #7]

	//set Interrupt Threshold 
	if(LIS3DH_SetInt1Threshold(20) == 1)
 800038e:	2014      	movs	r0, #20
 8000390:	f001 f908 	bl	80015a4 <LIS3DH_SetInt1Threshold>
 8000394:	4603      	mov	r3, r0
 8000396:	2b01      	cmp	r3, #1
 8000398:	d103      	bne.n	80003a2 <configMEMSsensor+0x1e>
	{
    	printf("LIS3DH_SetInt1Thershold done...\n");
 800039a:	483b      	ldr	r0, [pc, #236]	; (8000488 <configMEMSsensor+0x104>)
 800039c:	f002 fae8 	bl	8002970 <puts>
 80003a0:	e008      	b.n	80003b4 <configMEMSsensor+0x30>
	}
	else
	{
		error++;
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	3301      	adds	r3, #1
 80003a6:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80003a8:	4b38      	ldr	r3, [pc, #224]	; (800048c <configMEMSsensor+0x108>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	3301      	adds	r3, #1
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	4b36      	ldr	r3, [pc, #216]	; (800048c <configMEMSsensor+0x108>)
 80003b2:	701a      	strb	r2, [r3, #0]
	}
	
	//set Interrupt configuration (all enabled)
	response = LIS3DH_SetIntConfiguration(LIS3DH_INT1_ZHIE_ENABLE | LIS3DH_INT1_ZLIE_ENABLE |
 80003b4:	203f      	movs	r0, #63	; 0x3f
 80003b6:	f001 f823 	bl	8001400 <LIS3DH_SetIntConfiguration>
 80003ba:	4603      	mov	r3, r0
 80003bc:	461a      	mov	r2, r3
 80003be:	4b34      	ldr	r3, [pc, #208]	; (8000490 <configMEMSsensor+0x10c>)
 80003c0:	701a      	strb	r2, [r3, #0]
			   LIS3DH_INT1_YHIE_ENABLE | LIS3DH_INT1_YLIE_ENABLE |
			   LIS3DH_INT1_XHIE_ENABLE | LIS3DH_INT1_XLIE_ENABLE ); 
	if(response == 1)
 80003c2:	4b33      	ldr	r3, [pc, #204]	; (8000490 <configMEMSsensor+0x10c>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d103      	bne.n	80003d2 <configMEMSsensor+0x4e>
	{
		printf("LIS3DH_SetIntConfiguration done...\n");
 80003ca:	4832      	ldr	r0, [pc, #200]	; (8000494 <configMEMSsensor+0x110>)
 80003cc:	f002 fad0 	bl	8002970 <puts>
 80003d0:	e008      	b.n	80003e4 <configMEMSsensor+0x60>
  	}
	else
	{
		error++;
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	3301      	adds	r3, #1
 80003d6:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80003d8:	4b2c      	ldr	r3, [pc, #176]	; (800048c <configMEMSsensor+0x108>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	3301      	adds	r3, #1
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b2a      	ldr	r3, [pc, #168]	; (800048c <configMEMSsensor+0x108>)
 80003e2:	701a      	strb	r2, [r3, #0]
	}

	 //set Interrupt Mode
	if(LIS3DH_SetIntMode(LIS3DH_INT_MODE_6D_POSITION) == 1)
 80003e4:	2003      	movs	r0, #3
 80003e6:	f001 f835 	bl	8001454 <LIS3DH_SetIntMode>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d103      	bne.n	80003f8 <configMEMSsensor+0x74>
	{
		printf("LIS3DH_SetIntMode done...\n");
 80003f0:	4829      	ldr	r0, [pc, #164]	; (8000498 <configMEMSsensor+0x114>)
 80003f2:	f002 fabd 	bl	8002970 <puts>
 80003f6:	e008      	b.n	800040a <configMEMSsensor+0x86>
    }
	else
	{
		error++;
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	3301      	adds	r3, #1
 80003fc:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80003fe:	4b23      	ldr	r3, [pc, #140]	; (800048c <configMEMSsensor+0x108>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	3301      	adds	r3, #1
 8000404:	b2da      	uxtb	r2, r3
 8000406:	4b21      	ldr	r3, [pc, #132]	; (800048c <configMEMSsensor+0x108>)
 8000408:	701a      	strb	r2, [r3, #0]
	}

	// internal temperature sensor
	if (LIS3DH_SetADCAux(MEMS_ENABLE) == 1)
 800040a:	2001      	movs	r0, #1
 800040c:	f000 fea0 	bl	8001150 <LIS3DH_SetADCAux>
 8000410:	4603      	mov	r3, r0
 8000412:	2b01      	cmp	r3, #1
 8000414:	d103      	bne.n	800041e <configMEMSsensor+0x9a>
	{
		printf("LIS3DH_SetADCAux done...");
 8000416:	4821      	ldr	r0, [pc, #132]	; (800049c <configMEMSsensor+0x118>)
 8000418:	f002 fa62 	bl	80028e0 <printf>
 800041c:	e008      	b.n	8000430 <configMEMSsensor+0xac>
	}
	else
	{
		error++;
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	3301      	adds	r3, #1
 8000422:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 8000424:	4b19      	ldr	r3, [pc, #100]	; (800048c <configMEMSsensor+0x108>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	3301      	adds	r3, #1
 800042a:	b2da      	uxtb	r2, r3
 800042c:	4b17      	ldr	r3, [pc, #92]	; (800048c <configMEMSsensor+0x108>)
 800042e:	701a      	strb	r2, [r3, #0]
	}

	if (LIS3DH_SetBDU(MEMS_ENABLE) == 1)
 8000430:	2001      	movs	r0, #1
 8000432:	f000 ffb7 	bl	80013a4 <LIS3DH_SetBDU>
 8000436:	4603      	mov	r3, r0
 8000438:	2b01      	cmp	r3, #1
 800043a:	d103      	bne.n	8000444 <configMEMSsensor+0xc0>
	{
		printf("LIS3DH_SetBDU done...\n");
 800043c:	4818      	ldr	r0, [pc, #96]	; (80004a0 <configMEMSsensor+0x11c>)
 800043e:	f002 fa97 	bl	8002970 <puts>
 8000442:	e008      	b.n	8000456 <configMEMSsensor+0xd2>
	}
	else
	{
		error++;
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	3301      	adds	r3, #1
 8000448:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <configMEMSsensor+0x108>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	3301      	adds	r3, #1
 8000450:	b2da      	uxtb	r2, r3
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <configMEMSsensor+0x108>)
 8000454:	701a      	strb	r2, [r3, #0]
	}

	if (LIS3DH_SetTemperature(MEMS_ENABLE) == 1)
 8000456:	2001      	movs	r0, #1
 8000458:	f000 fe4c 	bl	80010f4 <LIS3DH_SetTemperature>
 800045c:	4603      	mov	r3, r0
 800045e:	2b01      	cmp	r3, #1
 8000460:	d103      	bne.n	800046a <configMEMSsensor+0xe6>
	{
		printf("LIS3DH_SetTemperature done...\n");
 8000462:	4810      	ldr	r0, [pc, #64]	; (80004a4 <configMEMSsensor+0x120>)
 8000464:	f002 fa84 	bl	8002970 <puts>
 8000468:	e008      	b.n	800047c <configMEMSsensor+0xf8>
	}
	else
	{
		error++;
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	3301      	adds	r3, #1
 800046e:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <configMEMSsensor+0x108>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	b2da      	uxtb	r2, r3
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <configMEMSsensor+0x108>)
 800047a:	701a      	strb	r2, [r3, #0]
	}
	
	return error;
 800047c:	79fb      	ldrb	r3, [r7, #7]
}
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	08009780 	.word	0x08009780
 800048c:	20000a7a 	.word	0x20000a7a
 8000490:	20000a79 	.word	0x20000a79
 8000494:	080097a0 	.word	0x080097a0
 8000498:	080097c4 	.word	0x080097c4
 800049c:	080097e0 	.word	0x080097e0
 80004a0:	080097fc 	.word	0x080097fc
 80004a4:	08009814 	.word	0x08009814

080004a8 <getTemperature>:

uint8_t getTemperature()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
	int8_t temperature = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	71fb      	strb	r3, [r7, #7]

	if (LIS3DH_GetTempRaw(&temperature) != 1)
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	4618      	mov	r0, r3
 80004b6:	f000 fe79 	bl	80011ac <LIS3DH_GetTempRaw>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d005      	beq.n	80004cc <getTemperature+0x24>
	{
		errorcount++;
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <getTemperature+0x34>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	3301      	adds	r3, #1
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <getTemperature+0x34>)
 80004ca:	701a      	strb	r2, [r3, #0]
	}

	return temperature;
 80004cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d0:	b2db      	uxtb	r3, r3
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000a7a 	.word	0x20000a7a

080004e0 <get6Dposition>:

uint8_t get6Dposition()
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
	uint8_t response = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	71fb      	strb	r3, [r7, #7]

	response = LIS3DH_Get6DPosition(&position);
 80004ea:	4846      	ldr	r0, [pc, #280]	; (8000604 <get6Dposition+0x124>)
 80004ec:	f000 ffe0 	bl	80014b0 <LIS3DH_Get6DPosition>
 80004f0:	4603      	mov	r3, r0
 80004f2:	71fb      	strb	r3, [r7, #7]

	if((response == 1) && (old_position != position))
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d171      	bne.n	80005de <get6Dposition+0xfe>
 80004fa:	4b43      	ldr	r3, [pc, #268]	; (8000608 <get6Dposition+0x128>)
 80004fc:	781a      	ldrb	r2, [r3, #0]
 80004fe:	4b41      	ldr	r3, [pc, #260]	; (8000604 <get6Dposition+0x124>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	429a      	cmp	r2, r3
 8000504:	d06b      	beq.n	80005de <get6Dposition+0xfe>
	{
		switch (position)
 8000506:	4b3f      	ldr	r3, [pc, #252]	; (8000604 <get6Dposition+0x124>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	3b41      	subs	r3, #65	; 0x41
 800050c:	2b1f      	cmp	r3, #31
 800050e:	d85b      	bhi.n	80005c8 <get6Dposition+0xe8>
 8000510:	a201      	add	r2, pc, #4	; (adr r2, 8000518 <get6Dposition+0x38>)
 8000512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000516:	bf00      	nop
 8000518:	080005a9 	.word	0x080005a9
 800051c:	080005a1 	.word	0x080005a1
 8000520:	080005c9 	.word	0x080005c9
 8000524:	08000599 	.word	0x08000599
 8000528:	080005c9 	.word	0x080005c9
 800052c:	080005c9 	.word	0x080005c9
 8000530:	080005c9 	.word	0x080005c9
 8000534:	080005b1 	.word	0x080005b1
 8000538:	080005c9 	.word	0x080005c9
 800053c:	080005c9 	.word	0x080005c9
 8000540:	080005c9 	.word	0x080005c9
 8000544:	080005c9 	.word	0x080005c9
 8000548:	080005c9 	.word	0x080005c9
 800054c:	080005c9 	.word	0x080005c9
 8000550:	080005c9 	.word	0x080005c9
 8000554:	080005c1 	.word	0x080005c1
 8000558:	080005c9 	.word	0x080005c9
 800055c:	080005c9 	.word	0x080005c9
 8000560:	080005c9 	.word	0x080005c9
 8000564:	080005c9 	.word	0x080005c9
 8000568:	080005c9 	.word	0x080005c9
 800056c:	080005c9 	.word	0x080005c9
 8000570:	080005c9 	.word	0x080005c9
 8000574:	080005c9 	.word	0x080005c9
 8000578:	080005c9 	.word	0x080005c9
 800057c:	080005c9 	.word	0x080005c9
 8000580:	080005c9 	.word	0x080005c9
 8000584:	080005c9 	.word	0x080005c9
 8000588:	080005c9 	.word	0x080005c9
 800058c:	080005c9 	.word	0x080005c9
 8000590:	080005c9 	.word	0x080005c9
 8000594:	080005b9 	.word	0x080005b9
		{
			case LIS3DH_UP_SX:
			{
				direction = 0;
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <get6Dposition+0x12c>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
				break;
 800059e:	e01d      	b.n	80005dc <get6Dposition+0xfc>
			}
			case LIS3DH_UP_DX:
			{
				direction = 1;
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <get6Dposition+0x12c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
				break;
 80005a6:	e019      	b.n	80005dc <get6Dposition+0xfc>
			}
			case LIS3DH_DW_SX:
			{
				direction = 2;
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <get6Dposition+0x12c>)
 80005aa:	2202      	movs	r2, #2
 80005ac:	701a      	strb	r2, [r3, #0]
				break;
 80005ae:	e015      	b.n	80005dc <get6Dposition+0xfc>
			}
			case LIS3DH_DW_DX:
			{
				direction = 3;
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <get6Dposition+0x12c>)
 80005b2:	2203      	movs	r2, #3
 80005b4:	701a      	strb	r2, [r3, #0]
				break; 
 80005b6:	e011      	b.n	80005dc <get6Dposition+0xfc>
			}
			case LIS3DH_TOP:    
			{
				direction = 4;
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <get6Dposition+0x12c>)
 80005ba:	2204      	movs	r2, #4
 80005bc:	701a      	strb	r2, [r3, #0]
				break; 
 80005be:	e00d      	b.n	80005dc <get6Dposition+0xfc>
			}
			case LIS3DH_BOTTOM: 
			{
				direction = 5;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <get6Dposition+0x12c>)
 80005c2:	2205      	movs	r2, #5
 80005c4:	701a      	strb	r2, [r3, #0]
				break; 
 80005c6:	e009      	b.n	80005dc <get6Dposition+0xfc>
			}
			default:
			{
				direction = 6;
 80005c8:	4b10      	ldr	r3, [pc, #64]	; (800060c <get6Dposition+0x12c>)
 80005ca:	2206      	movs	r2, #6
 80005cc:	701a      	strb	r2, [r3, #0]
				errorcount++;
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <get6Dposition+0x130>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <get6Dposition+0x130>)
 80005d8:	701a      	strb	r2, [r3, #0]
				break;
 80005da:	bf00      	nop
			}
		}
	}
 80005dc:	e008      	b.n	80005f0 <get6Dposition+0x110>
	else if(response != 1)
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d005      	beq.n	80005f0 <get6Dposition+0x110>
	{
		errorcount++;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <get6Dposition+0x130>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <get6Dposition+0x130>)
 80005ee:	701a      	strb	r2, [r3, #0]
	}
	old_position = position;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <get6Dposition+0x124>)
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <get6Dposition+0x128>)
 80005f6:	701a      	strb	r2, [r3, #0]

	return direction;
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <get6Dposition+0x12c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000a7b 	.word	0x20000a7b
 8000608:	20000a81 	.word	0x20000a81
 800060c:	20000a80 	.word	0x20000a80
 8000610:	20000a7a 	.word	0x20000a7a

08000614 <getAxesRawData>:

AXESRAWDATA getAxesRawData()
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint8_t response = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	75fb      	strb	r3, [r7, #23]
	AxesRaw_t data;
	AXESRAWDATA dataOut;

	response = LIS3DH_GetAccAxesRaw(&data);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4618      	mov	r0, r3
 8000626:	f000 ffd7 	bl	80015d8 <LIS3DH_GetAccAxesRaw>
 800062a:	4603      	mov	r3, r0
 800062c:	75fb      	strb	r3, [r7, #23]

	if(response != 1)
 800062e:	7dfb      	ldrb	r3, [r7, #23]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d005      	beq.n	8000640 <getAxesRawData+0x2c>
	{
		errorcount++;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <getAxesRawData+0x5c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <getAxesRawData+0x5c>)
 800063e:	701a      	strb	r2, [r3, #0]
	}

	dataOut.axisX = data.AXIS_X;
 8000640:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000644:	b29b      	uxth	r3, r3
 8000646:	813b      	strh	r3, [r7, #8]
	dataOut.axisY = data.AXIS_Y;
 8000648:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800064c:	b29b      	uxth	r3, r3
 800064e:	817b      	strh	r3, [r7, #10]
	dataOut.axisZ = data.AXIS_Z;
 8000650:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000654:	b29b      	uxth	r3, r3
 8000656:	81bb      	strh	r3, [r7, #12]

	return dataOut;	
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	461a      	mov	r2, r3
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	6010      	str	r0, [r2, #0]
 8000664:	889b      	ldrh	r3, [r3, #4]
 8000666:	8093      	strh	r3, [r2, #4]
}
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000a7a 	.word	0x20000a7a

08000674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	2b00      	cmp	r3, #0
 8000684:	db0b      	blt.n	800069e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000686:	4909      	ldr	r1, [pc, #36]	; (80006ac <__NVIC_EnableIRQ+0x38>)
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	095b      	lsrs	r3, r3, #5
 800068e:	79fa      	ldrb	r2, [r7, #7]
 8000690:	f002 021f 	and.w	r2, r2, #31
 8000694:	2001      	movs	r0, #1
 8000696:	fa00 f202 	lsl.w	r2, r0, r2
 800069a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000e100 	.word	0xe000e100

080006b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	6039      	str	r1, [r7, #0]
 80006ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	db0a      	blt.n	80006da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	490d      	ldr	r1, [pc, #52]	; (80006fc <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	0092      	lsls	r2, r2, #2
 80006d0:	b2d2      	uxtb	r2, r2
 80006d2:	440b      	add	r3, r1
 80006d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d8:	e00a      	b.n	80006f0 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	4909      	ldr	r1, [pc, #36]	; (8000700 <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	683a      	ldr	r2, [r7, #0]
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	0092      	lsls	r2, r2, #2
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	440b      	add	r3, r1
 80006ee:	761a      	strb	r2, [r3, #24]
  }
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
 8000710:	4613      	mov	r3, r2
 8000712:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000714:	78f8      	ldrb	r0, [r7, #3]
 8000716:	78fb      	ldrb	r3, [r7, #3]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	3306      	adds	r3, #6
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000726:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000728:	431a      	orrs	r2, r3
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	1d83      	adds	r3, r0, #6
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	440b      	add	r3, r1
 8000732:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000752:	b2db      	uxtb	r3, r3
}
 8000754:	4618      	mov	r0, r3
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	431a      	orrs	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop

08000788 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	2b00      	cmp	r3, #0
 800079c:	bf14      	ite	ne
 800079e:	2301      	movne	r3, #1
 80007a0:	2300      	moveq	r3, #0
 80007a2:	b2db      	uxtb	r3, r3
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f023 030f 	bic.w	r3, r3, #15
 80007c0:	f043 0202 	orr.w	r2, r3, #2
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
 80007e0:	4613      	mov	r3, r2
 80007e2:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
 80007e4:	78f8      	ldrb	r0, [r7, #3]
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	3306      	adds	r3, #6
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f023 0250 	bic.w	r2, r3, #80	; 0x50
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	1d83      	adds	r3, r0, #6
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	440b      	add	r3, r1
 80007fe:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000800:	78ba      	ldrb	r2, [r7, #2]
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	4619      	mov	r1, r3
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ff7c 	bl	8000704 <XMC_USIC_CH_SetInputSource>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <_init_uart0_ch0>:
    .stop_bits = 1U,
    .baudrate = 115200U
};
/****************************************************************** FUNCTIONS */
void _init_uart0_ch0()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    /* USIC channels initialization */
    XMC_UART_CH_Init (XMC_UART0_CH0, &uart_config);
 8000818:	491c      	ldr	r1, [pc, #112]	; (800088c <_init_uart0_ch0+0x78>)
 800081a:	481d      	ldr	r0, [pc, #116]	; (8000890 <_init_uart0_ch0+0x7c>)
 800081c:	f001 fb8c 	bl	8001f38 <XMC_UART_CH_Init>

    XMC_UART_CH_SetInputSource (XMC_UART0_CH0, XMC_UART_CH_INPUT_RXD,
 8000820:	2201      	movs	r2, #1
 8000822:	2100      	movs	r1, #0
 8000824:	481a      	ldr	r0, [pc, #104]	; (8000890 <_init_uart0_ch0+0x7c>)
 8000826:	f7ff ffd5 	bl	80007d4 <XMC_UART_CH_SetInputSource>
    /* FIFOs initialization for both channels:
     *  8 entries for TxFIFO from point 0, LIMIT=1
     *  8 entries for RxFIFO from point 8, LIMIT=7 (SRBI is set if all 8*data have
     *                                              been received)
     *  */
    XMC_USIC_CH_TXFIFO_Configure (XMC_UART0_CH0, 0, XMC_USIC_CH_FIFO_SIZE_8WORDS, TX_FIFO_INITIAL_LIMIT);
 800082a:	2301      	movs	r3, #1
 800082c:	2203      	movs	r2, #3
 800082e:	2100      	movs	r1, #0
 8000830:	4817      	ldr	r0, [pc, #92]	; (8000890 <_init_uart0_ch0+0x7c>)
 8000832:	f001 feab 	bl	800258c <XMC_USIC_CH_TXFIFO_Configure>
    XMC_USIC_CH_RXFIFO_Configure (XMC_UART0_CH0, 8, XMC_USIC_CH_FIFO_SIZE_8WORDS, RX_FIFO_INITIAL_LIMIT);
 8000836:	2301      	movs	r3, #1
 8000838:	2203      	movs	r2, #3
 800083a:	2108      	movs	r1, #8
 800083c:	4814      	ldr	r0, [pc, #80]	; (8000890 <_init_uart0_ch0+0x7c>)
 800083e:	f001 fecd 	bl	80025dc <XMC_USIC_CH_RXFIFO_Configure>

    /* Enabling events for TX FIFO and RX FIFO */
    XMC_USIC_CH_RXFIFO_EnableEvent (XMC_UART0_CH0,
 8000842:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <_init_uart0_ch0+0x7c>)
 8000848:	f7ff ff8a 	bl	8000760 <XMC_USIC_CH_RXFIFO_EnableEvent>
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE);

    /* Connecting the previously enabled events to a Service Request line number */
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2110      	movs	r1, #16
 8000850:	480f      	ldr	r0, [pc, #60]	; (8000890 <_init_uart0_ch0+0x7c>)
 8000852:	f001 feed 	bl	8002630 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2113      	movs	r1, #19
 800085a:	480d      	ldr	r0, [pc, #52]	; (8000890 <_init_uart0_ch0+0x7c>)
 800085c:	f001 fee8 	bl	8002630 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>

    /* Start USIC operation as UART */
    XMC_UART_CH_Start (XMC_UART0_CH0);
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <_init_uart0_ch0+0x7c>)
 8000862:	f7ff ffa5 	bl	80007b0 <XMC_UART_CH_Start>

    /*Initialization of the necessary ports*/
    XMC_GPIO_Init (UART_TX, &uart_tx);
 8000866:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <_init_uart0_ch0+0x80>)
 8000868:	2105      	movs	r1, #5
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <_init_uart0_ch0+0x84>)
 800086c:	f001 faa4 	bl	8001db8 <XMC_GPIO_Init>
    XMC_GPIO_Init (UART_RX, &uart_rx);
 8000870:	4a0a      	ldr	r2, [pc, #40]	; (800089c <_init_uart0_ch0+0x88>)
 8000872:	2104      	movs	r1, #4
 8000874:	4808      	ldr	r0, [pc, #32]	; (8000898 <_init_uart0_ch0+0x84>)
 8000876:	f001 fa9f 	bl	8001db8 <XMC_GPIO_Init>

    /* Configuring priority and enabling NVIC IRQ for the defined service request
    line number */
    NVIC_SetPriority (USIC0_0_IRQn, 63U);
 800087a:	213f      	movs	r1, #63	; 0x3f
 800087c:	2054      	movs	r0, #84	; 0x54
 800087e:	f7ff ff17 	bl	80006b0 <__NVIC_SetPriority>
    NVIC_EnableIRQ (USIC0_0_IRQn);
 8000882:	2054      	movs	r0, #84	; 0x54
 8000884:	f7ff fef6 	bl	8000674 <__NVIC_EnableIRQ>

    return;
 8000888:	bf00      	nop
}
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000000c 	.word	0x2000000c
 8000890:	40030000 	.word	0x40030000
 8000894:	20000000 	.word	0x20000000
 8000898:	48028100 	.word	0x48028100
 800089c:	20000a24 	.word	0x20000a24

080008a0 <USIC0_0_IRQHandler>:

void USIC0_0_IRQHandler (void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	71fb      	strb	r3, [r7, #7]

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 80008aa:	e01f      	b.n	80008ec <USIC0_0_IRQHandler+0x4c>
        rx_tmp = XMC_UART_CH_GetReceivedData (XMC_UART0_CH0);
 80008ac:	4816      	ldr	r0, [pc, #88]	; (8000908 <USIC0_0_IRQHandler+0x68>)
 80008ae:	f001 fbc1 	bl	8002034 <XMC_UART_CH_GetReceivedData>
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]

        if ( (rx_tmp != STRING_CR) && (!str_available)) {
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b0d      	cmp	r3, #13
 80008ba:	d011      	beq.n	80008e0 <USIC0_0_IRQHandler+0x40>
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <USIC0_0_IRQHandler+0x6c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	f083 0301 	eor.w	r3, r3, #1
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00a      	beq.n	80008e0 <USIC0_0_IRQHandler+0x40>
            rx_buffer[rx_ctr++] = rx_tmp;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <USIC0_0_IRQHandler+0x70>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	1c5a      	adds	r2, r3, #1
 80008d0:	b2d1      	uxtb	r1, r2
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <USIC0_0_IRQHandler+0x70>)
 80008d4:	7011      	strb	r1, [r2, #0]
 80008d6:	4619      	mov	r1, r3
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <USIC0_0_IRQHandler+0x74>)
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	5453      	strb	r3, [r2, r1]
 80008de:	e005      	b.n	80008ec <USIC0_0_IRQHandler+0x4c>
        } else {
            rx_ctr = 0;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <USIC0_0_IRQHandler+0x70>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
            str_available = true;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <USIC0_0_IRQHandler+0x6c>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
{
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 80008ec:	4806      	ldr	r0, [pc, #24]	; (8000908 <USIC0_0_IRQHandler+0x68>)
 80008ee:	f7ff ff4b 	bl	8000788 <XMC_USIC_CH_RXFIFO_IsEmpty>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f083 0301 	eor.w	r3, r3, #1
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1d6      	bne.n	80008ac <USIC0_0_IRQHandler+0xc>
        } else {
            rx_ctr = 0;
            str_available = true;
        }
    }
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40030000 	.word	0x40030000
 800090c:	200009e0 	.word	0x200009e0
 8000910:	20000a30 	.word	0x20000a30
 8000914:	200009e4 	.word	0x200009e4

08000918 <_uart_printf>:

    return 0;
}

uint8_t _uart_printf (char *fmt, ...)
{
 8000918:	b40f      	push	{r0, r1, r2, r3}
 800091a:	b580      	push	{r7, lr}
 800091c:	b0c2      	sub	sp, #264	; 0x108
 800091e:	af00      	add	r7, sp, #0
    va_list arg_ptr;
    char buffer[BUFFER_SIZE_PRINTF];

    if (fmt == NULL)  {
 8000920:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000924:	2b00      	cmp	r3, #0
 8000926:	d101      	bne.n	800092c <_uart_printf+0x14>
        return ERR_OUT_OF_MEMORY;
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	e010      	b.n	800094e <_uart_printf+0x36>
    }

    va_start (arg_ptr, fmt);
 800092c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000930:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    vsprintf (buffer, fmt, arg_ptr);
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800093a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800093e:	4618      	mov	r0, r3
 8000940:	f005 f886 	bl	8005a50 <vsprintf>
    va_end (arg_ptr);

    _uart_send_string (buffer);
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f80a 	bl	8000960 <_uart_send_string>
    return 0;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000954:	46bd      	mov	sp, r7
 8000956:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800095a:	b004      	add	sp, #16
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <_uart_send_string>:

uint8_t _uart_send_string (char *str)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <_uart_send_string+0x12>
        return ERR_OUT_OF_MEMORY;
 800096e:	2364      	movs	r3, #100	; 0x64
 8000970:	e01d      	b.n	80009ae <_uart_send_string+0x4e>
    }

    for (int i = 0; i < strlen (str); i++) {
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	e012      	b.n	800099e <_uart_send_string+0x3e>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 8000978:	bf00      	nop
 800097a:	480f      	ldr	r0, [pc, #60]	; (80009b8 <_uart_send_string+0x58>)
 800097c:	f7ff fee0 	bl	8000740 <XMC_USIC_CH_GetTransmitBufferStatus>
 8000980:	4603      	mov	r3, r0
 8000982:	2b80      	cmp	r3, #128	; 0x80
 8000984:	d0f9      	beq.n	800097a <_uart_send_string+0x1a>
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b29b      	uxth	r3, r3
 8000990:	4619      	mov	r1, r3
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <_uart_send_string+0x58>)
 8000994:	f001 fb28 	bl	8001fe8 <XMC_UART_CH_Transmit>
{
    if (str == NULL) {
        return ERR_OUT_OF_MEMORY;
    }

    for (int i = 0; i < strlen (str); i++) {
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3301      	adds	r3, #1
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f002 f82e 	bl	8002a00 <strlen>
 80009a4:	4602      	mov	r2, r0
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8e5      	bhi.n	8000978 <_uart_send_string+0x18>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
    }
    return 0;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40030000 	.word	0x40030000

080009bc <_uart_get_string>:

uint8_t _uart_get_string (char *str)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d101      	bne.n	80009ce <_uart_get_string+0x12>
        return ERR_OUT_OF_MEMORY;
 80009ca:	2364      	movs	r3, #100	; 0x64
 80009cc:	e019      	b.n	8000a02 <_uart_get_string+0x46>
    }

    while (!str_available);
 80009ce:	bf00      	nop
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <_uart_get_string+0x50>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	f083 0301 	eor.w	r3, r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1f8      	bne.n	80009d0 <_uart_get_string+0x14>
    memcpy (str, &rx_buffer, strlen (rx_buffer));
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <_uart_get_string+0x54>)
 80009e0:	f002 f80e 	bl	8002a00 <strlen>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	4909      	ldr	r1, [pc, #36]	; (8000a10 <_uart_get_string+0x54>)
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f001 fe90 	bl	8002710 <memcpy>
    memset (&rx_buffer, 0x00, BUFFER_SIZE_RX);
 80009f0:	2240      	movs	r2, #64	; 0x40
 80009f2:	2100      	movs	r1, #0
 80009f4:	4806      	ldr	r0, [pc, #24]	; (8000a10 <_uart_get_string+0x54>)
 80009f6:	f001 ff25 	bl	8002844 <memset>

    str_available = false;
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <_uart_get_string+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
    return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200009e0 	.word	0x200009e0
 8000a10:	200009e4 	.word	0x200009e4

08000a14 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000a20:	78fb      	ldrb	r3, [r7, #3]
 8000a22:	2201      	movs	r2, #1
 8000a24:	409a      	lsls	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	605a      	str	r2, [r3, #4]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8000a44:	78fb      	ldrb	r3, [r7, #3]
 8000a46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a4a:	409a      	lsls	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	605a      	str	r2, [r3, #4]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000a6e:	409a      	lsls	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	605a      	str	r2, [r3, #4]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <protocolComplete>:
#include "3Daccel_out_library.h"

void protocolComplete(int16_t position6D, int16_t positionX, int16_t positionY, int16_t positionZ, uint8_t temperature)
{
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	b0a5      	sub	sp, #148	; 0x94
 8000a84:	af06      	add	r7, sp, #24
 8000a86:	4604      	mov	r4, r0
 8000a88:	4608      	mov	r0, r1
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4623      	mov	r3, r4
 8000a90:	80fb      	strh	r3, [r7, #6]
 8000a92:	4603      	mov	r3, r0
 8000a94:	80bb      	strh	r3, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	807b      	strh	r3, [r7, #2]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	803b      	strh	r3, [r7, #0]
	char string6D[8][6] = {"#USX,", "#UDX,", "#DSX,", "#DDX,", "#TOP,", "#BOT,", "#XXX,", "#FAL,"};
 8000a9e:	4b41      	ldr	r3, [pc, #260]	; (8000ba4 <protocolComplete+0x124>)
 8000aa0:	461c      	mov	r4, r3
 8000aa2:	f107 0648 	add.w	r6, r7, #72	; 0x48
 8000aa6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000aaa:	4635      	mov	r5, r6
 8000aac:	4623      	mov	r3, r4
 8000aae:	6818      	ldr	r0, [r3, #0]
 8000ab0:	6859      	ldr	r1, [r3, #4]
 8000ab2:	689a      	ldr	r2, [r3, #8]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab8:	3410      	adds	r4, #16
 8000aba:	3610      	adds	r6, #16
 8000abc:	4574      	cmp	r4, lr
 8000abe:	d1f4      	bne.n	8000aaa <protocolComplete+0x2a>
	char send[RX_BUFFER_SIZE];

	memset (&send, 0, sizeof (send));
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	2240      	movs	r2, #64	; 0x40
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 febb 	bl	8002844 <memset>
	
	if (statisticSend == 10)
 8000ace:	4b36      	ldr	r3, [pc, #216]	; (8000ba8 <protocolComplete+0x128>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b0a      	cmp	r3, #10
 8000ad4:	d125      	bne.n	8000b22 <protocolComplete+0xa2>
	{
		if (sprintf(send, "#STA,%10lu,%3d$\n", packagesSent, errorcount) < 0)
 8000ad6:	4b35      	ldr	r3, [pc, #212]	; (8000bac <protocolComplete+0x12c>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <protocolComplete+0x130>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	f107 0008 	add.w	r0, r7, #8
 8000ae2:	4934      	ldr	r1, [pc, #208]	; (8000bb4 <protocolComplete+0x134>)
 8000ae4:	f001 ff4c 	bl	8002980 <sprintf>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	da06      	bge.n	8000afc <protocolComplete+0x7c>
		{
			errorcount++;
 8000aee:	4b30      	ldr	r3, [pc, #192]	; (8000bb0 <protocolComplete+0x130>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b2e      	ldr	r3, [pc, #184]	; (8000bb0 <protocolComplete+0x130>)
 8000af8:	701a      	strb	r2, [r3, #0]
			_uart_printf("%s", send);
			ledSetting(0, 3);
			packagesSent++;
		}
	}
}
 8000afa:	e04e      	b.n	8000b9a <protocolComplete+0x11a>
		{
			errorcount++;
		}
		else
		{
			_uart_printf("%s", send);
 8000afc:	f107 0308 	add.w	r3, r7, #8
 8000b00:	4619      	mov	r1, r3
 8000b02:	482d      	ldr	r0, [pc, #180]	; (8000bb8 <protocolComplete+0x138>)
 8000b04:	f7ff ff08 	bl	8000918 <_uart_printf>
			ledSetting(1, 3);
 8000b08:	2103      	movs	r1, #3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f000 f876 	bl	8000bfc <ledSetting>
			packagesSent++;
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <protocolComplete+0x12c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	4a25      	ldr	r2, [pc, #148]	; (8000bac <protocolComplete+0x12c>)
 8000b18:	6013      	str	r3, [r2, #0]
			statisticSend = 0;
 8000b1a:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <protocolComplete+0x128>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
			_uart_printf("%s", send);
			ledSetting(0, 3);
			packagesSent++;
		}
	}
}
 8000b20:	e03b      	b.n	8000b9a <protocolComplete+0x11a>
			statisticSend = 0;
		}
	}
	else
	{
		if (sprintf(send, "%s%7d%s%7d%s%7d%s%02d$\n", string6D[position6D], positionX, ",", positionY, ",", positionZ, ",", temperature* 2 + 6) < 0)
 8000b22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b26:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	4413      	add	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	18cc      	adds	r4, r1, r3
 8000b34:	f9b7 5004 	ldrsh.w	r5, [r7, #4]
 8000b38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b3c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b40:	f897 1090 	ldrb.w	r1, [r7, #144]	; 0x90
 8000b44:	3103      	adds	r1, #3
 8000b46:	0049      	lsls	r1, r1, #1
 8000b48:	f107 0008 	add.w	r0, r7, #8
 8000b4c:	9105      	str	r1, [sp, #20]
 8000b4e:	491b      	ldr	r1, [pc, #108]	; (8000bbc <protocolComplete+0x13c>)
 8000b50:	9104      	str	r1, [sp, #16]
 8000b52:	9203      	str	r2, [sp, #12]
 8000b54:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <protocolComplete+0x13c>)
 8000b56:	9202      	str	r2, [sp, #8]
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <protocolComplete+0x13c>)
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	462b      	mov	r3, r5
 8000b60:	4622      	mov	r2, r4
 8000b62:	4917      	ldr	r1, [pc, #92]	; (8000bc0 <protocolComplete+0x140>)
 8000b64:	f001 ff0c 	bl	8002980 <sprintf>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	da06      	bge.n	8000b7c <protocolComplete+0xfc>
		{
			errorcount++;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <protocolComplete+0x130>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <protocolComplete+0x130>)
 8000b78:	701a      	strb	r2, [r3, #0]
			_uart_printf("%s", send);
			ledSetting(0, 3);
			packagesSent++;
		}
	}
}
 8000b7a:	e00e      	b.n	8000b9a <protocolComplete+0x11a>
		{
			errorcount++;
		}
		else
		{
			_uart_printf("%s", send);
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	4619      	mov	r1, r3
 8000b82:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <protocolComplete+0x138>)
 8000b84:	f7ff fec8 	bl	8000918 <_uart_printf>
			ledSetting(0, 3);
 8000b88:	2103      	movs	r1, #3
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 f836 	bl	8000bfc <ledSetting>
			packagesSent++;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <protocolComplete+0x12c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <protocolComplete+0x12c>)
 8000b98:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	377c      	adds	r7, #124	; 0x7c
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	08009868 	.word	0x08009868
 8000ba8:	20000a78 	.word	0x20000a78
 8000bac:	20000a7c 	.word	0x20000a7c
 8000bb0:	20000a7a 	.word	0x20000a7a
 8000bb4:	08009834 	.word	0x08009834
 8000bb8:	08009848 	.word	0x08009848
 8000bbc:	08009864 	.word	0x08009864
 8000bc0:	0800984c 	.word	0x0800984c

08000bc4 <outputInit>:

void outputInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
    XMC_GPIO_CONFIG_t config_out;
    config_out.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	713b      	strb	r3, [r7, #4]
    config_out.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 8000bce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd2:	60bb      	str	r3, [r7, #8]
    config_out.output_strength = XMC_GPIO_OUTPUT_STRENGTH_WEAK;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	733b      	strb	r3, [r7, #12]
    XMC_GPIO_Init(LED1, &config_out);
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	461a      	mov	r2, r3
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <outputInit+0x34>)
 8000be0:	f001 f8ea 	bl	8001db8 <XMC_GPIO_Init>
    XMC_GPIO_Init(LED2, &config_out);
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	461a      	mov	r2, r3
 8000be8:	2101      	movs	r1, #1
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <outputInit+0x34>)
 8000bec:	f001 f8e4 	bl	8001db8 <XMC_GPIO_Init>
}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	48028100 	.word	0x48028100

08000bfc <ledSetting>:

void ledSetting(uint8_t ledID, uint8_t ledState)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	460a      	mov	r2, r1
 8000c06:	71fb      	strb	r3, [r7, #7]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	71bb      	strb	r3, [r7, #6]
	switch (ledID)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <ledSetting+0x1c>
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d015      	beq.n	8000c42 <ledSetting+0x46>
			}
			break;
		}
		default:
		{
			break;
 8000c16:	e029      	b.n	8000c6c <ledSetting+0x70>
{
	switch (ledID)
	{
		case 0:
		{
			if (ledState == 0)
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d104      	bne.n	8000c28 <ledSetting+0x2c>
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4814      	ldr	r0, [pc, #80]	; (8000c74 <ledSetting+0x78>)
 8000c22:	f7ff ff09 	bl	8000a38 <XMC_GPIO_SetOutputLow>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED1);
			}
			break;
 8000c26:	e021      	b.n	8000c6c <ledSetting+0x70>
		{
			if (ledState == 0)
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
			}
			else if (ledState == 1)
 8000c28:	79bb      	ldrb	r3, [r7, #6]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d104      	bne.n	8000c38 <ledSetting+0x3c>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4810      	ldr	r0, [pc, #64]	; (8000c74 <ledSetting+0x78>)
 8000c32:	f7ff feef 	bl	8000a14 <XMC_GPIO_SetOutputHigh>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED1);
			}
			break;
 8000c36:	e019      	b.n	8000c6c <ledSetting+0x70>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED1);
 8000c38:	2100      	movs	r1, #0
 8000c3a:	480e      	ldr	r0, [pc, #56]	; (8000c74 <ledSetting+0x78>)
 8000c3c:	f7ff ff0e 	bl	8000a5c <XMC_GPIO_ToggleOutput>
			}
			break;
 8000c40:	e014      	b.n	8000c6c <ledSetting+0x70>
		}
		case 1:
		{
			if (ledState == 0)
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d104      	bne.n	8000c52 <ledSetting+0x56>
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 1);
 8000c48:	2101      	movs	r1, #1
 8000c4a:	480a      	ldr	r0, [pc, #40]	; (8000c74 <ledSetting+0x78>)
 8000c4c:	f7ff fef4 	bl	8000a38 <XMC_GPIO_SetOutputLow>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED2);
			}
			break;
 8000c50:	e00b      	b.n	8000c6a <ledSetting+0x6e>
		{
			if (ledState == 0)
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 1);
			}
			else if (ledState == 1)
 8000c52:	79bb      	ldrb	r3, [r7, #6]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d104      	bne.n	8000c62 <ledSetting+0x66>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 1);
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <ledSetting+0x78>)
 8000c5c:	f7ff feda 	bl	8000a14 <XMC_GPIO_SetOutputHigh>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED2);
			}
			break;
 8000c60:	e003      	b.n	8000c6a <ledSetting+0x6e>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 1);
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED2);
 8000c62:	2101      	movs	r1, #1
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <ledSetting+0x78>)
 8000c66:	f7ff fef9 	bl	8000a5c <XMC_GPIO_ToggleOutput>
			}
			break;
 8000c6a:	bf00      	nop
		default:
		{
			break;
		}
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	48028100 	.word	0x48028100

08000c78 <SysTick_Handler>:

void SysTick_Handler (void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
    static uint32_t ticks = 0;

    ticks++;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <SysTick_Handler+0x28>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <SysTick_Handler+0x28>)
 8000c84:	6013      	str	r3, [r2, #0]
    if (ticks == TICKS_WAIT)
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SysTick_Handler+0x28>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b64      	cmp	r3, #100	; 0x64
 8000c8c:	d102      	bne.n	8000c94 <SysTick_Handler+0x1c>
    {
        ticks = 0;
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Handler+0x28>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
    }
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000a34 	.word	0x20000a34

08000ca4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cb0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d013      	beq.n	8000ce4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cc0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000cc4:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d00b      	beq.n	8000ce4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ccc:	e000      	b.n	8000cd0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000cce:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000cd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f9      	beq.n	8000cce <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000cda:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
    // P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
    // PORT2->HWSEL ... clear bits [3:2]
    PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 8000cf8:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <initRetargetSwo+0x7c>)
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <initRetargetSwo+0x7c>)
 8000cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cfe:	f023 030c 	bic.w	r3, r3, #12
 8000d02:	6753      	str	r3, [r2, #116]	; 0x74
    // PORT2->HWSEL ... set bit [2] -> HWO0
    PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 8000d04:	4a1a      	ldr	r2, [pc, #104]	; (8000d70 <initRetargetSwo+0x7c>)
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <initRetargetSwo+0x7c>)
 8000d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6753      	str	r3, [r2, #116]	; 0x74

    // Enable trace systems
    // Source: ARMv7-M Architecture Reference Manual
    // DEMCR = Debug Exception and Monitor Control Register
    //         TRCENA ... global enable for DWT and ITM blocks
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000d10:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <initRetargetSwo+0x80>)
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <initRetargetSwo+0x80>)
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d1a:	60d3      	str	r3, [r2, #12]
    // SWO baud rate prescaler value
    // ACPR = Asynchronous Clock Prescaler Register
    //        fSWO = fCPU / (SWOSCALAR + 1)
    //        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
    //        fCPU = 120MHz
    TPI->ACPR = 119UL;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <initRetargetSwo+0x84>)
 8000d1e:	2277      	movs	r2, #119	; 0x77
 8000d20:	611a      	str	r2, [r3, #16]
    // Source: ARMv7-M Architecture Reference Manual
    // SPPR = Selected Pin Control Register
    //        0x0 ... Synchronous Trace Port Mode
    //        0x1 ... Asynchronous Serial Wire Output (Manchester)
    //        0x2 ... Asynchronous Serial Wire Output (NRZ)
    TPI->SPPR = 0x2UL;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <initRetargetSwo+0x84>)
 8000d24:	2202      	movs	r2, #2
 8000d26:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    // Source: ARM Cortex-M4 Processor Technical Reference Manual
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    // FFCR = Formatter and Flash Control Register
    //        0x0 ... continuous formatting disabled
    //        0x1 ... continuous formatting enabled
    TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 8000d2a:	4a13      	ldr	r2, [pc, #76]	; (8000d78 <initRetargetSwo+0x84>)
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <initRetargetSwo+0x84>)
 8000d2e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8000d32:	f023 0302 	bic.w	r3, r3, #2
 8000d36:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

    // Unlock ITM
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    ITM->LAR = 0xC5ACCE55;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <initRetargetSwo+0x88>)
 8000d40:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TCR = Trace Control Register
    //       ITMENA ... enable ITM
    ITM->TCR |= ITM_TCR_ITMENA_Msk;
 8000d44:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000d48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d4c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TER = Trace Enable Register
    //       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
    ITM->TER = 0xFFFFFFFF;
 8000d58:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	48028200 	.word	0x48028200
 8000d74:	e000edf0 	.word	0xe000edf0
 8000d78:	e0040000 	.word	0xe0040000
 8000d7c:	c5acce55 	.word	0xc5acce55

08000d80 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
    int i;

    for (i = 0; i < nbytes; i++) {
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	e009      	b.n	8000da6 <_write+0x26>
        ITM_SendChar ( (*buf++));
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1c5a      	adds	r2, r3, #1
 8000d96:	60ba      	str	r2, [r7, #8]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff82 	bl	8000ca4 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
    int i;

    for (i = 0; i < nbytes; i++) {
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3301      	adds	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	dbf1      	blt.n	8000d92 <_write+0x12>
        ITM_SendChar ( (*buf++));
    }
    return nbytes;
 8000dae:	687b      	ldr	r3, [r7, #4]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000dc8:	78f8      	ldrb	r0, [r7, #3]
 8000dca:	78fb      	ldrb	r3, [r7, #3]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	3306      	adds	r3, #6
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000dda:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	1d83      	adds	r3, r0, #6
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	440b      	add	r3, r1
 8000de6:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e00:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f023 020f 	bic.w	r2, r3, #15
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	431a      	orrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8000e40:	2104      	movs	r1, #4
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffe4 	bl	8000e10 <XMC_USIC_CH_SetMode>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <XMC_I2C_CH_SetInputSource>:
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 *
 */
__STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT_t input, const uint8_t source)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX0CR_DSEN_Msk;
 8000e60:	78f8      	ldrb	r0, [r7, #3]
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	3306      	adds	r3, #6
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8000e72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	1d83      	adds	r3, r0, #6
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000e80:	78ba      	ldrb	r2, [r7, #2]
 8000e82:	78fb      	ldrb	r3, [r7, #3]
 8000e84:	4619      	mov	r1, r3
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ff96 	bl	8000db8 <XMC_USIC_CH_SetInputSource>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <_init_i2c1_ch0>:
 *         P0_5 & P0_11
 *  @param none
 *  @return on success this function returns 0
 */
uint8_t _init_i2c1_ch0 (void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
    XMC_I2C_CH_Init (XMC_I2C1_CH0, &i2c_cfg);
 8000ed4:	490e      	ldr	r1, [pc, #56]	; (8000f10 <_init_i2c1_ch0+0x40>)
 8000ed6:	480f      	ldr	r0, [pc, #60]	; (8000f14 <_init_i2c1_ch0+0x44>)
 8000ed8:	f001 f8e8 	bl	80020ac <XMC_I2C_CH_Init>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SDA, USIC1_C0_DX0_P0_5);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2100      	movs	r1, #0
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <_init_i2c1_ch0+0x44>)
 8000ee2:	f7ff ffb5 	bl	8000e50 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SCL, USIC1_C0_DX1_SCLKOUT);
 8000ee6:	2206      	movs	r2, #6
 8000ee8:	2101      	movs	r1, #1
 8000eea:	480a      	ldr	r0, [pc, #40]	; (8000f14 <_init_i2c1_ch0+0x44>)
 8000eec:	f7ff ffb0 	bl	8000e50 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_Start (XMC_I2C1_CH0);
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <_init_i2c1_ch0+0x44>)
 8000ef2:	f7ff ffa1 	bl	8000e38 <XMC_I2C_CH_Start>

    XMC_GPIO_Init (P0_11, &i2c_scl);
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <_init_i2c1_ch0+0x48>)
 8000ef8:	210b      	movs	r1, #11
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <_init_i2c1_ch0+0x4c>)
 8000efc:	f000 ff5c 	bl	8001db8 <XMC_GPIO_Init>
    XMC_GPIO_Init (P0_5, &i2c_sda);
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <_init_i2c1_ch0+0x50>)
 8000f02:	2105      	movs	r1, #5
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <_init_i2c1_ch0+0x4c>)
 8000f06:	f000 ff57 	bl	8001db8 <XMC_GPIO_Init>

    return 0;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000030 	.word	0x20000030
 8000f14:	48020000 	.word	0x48020000
 8000f18:	20000024 	.word	0x20000024
 8000f1c:	48028000 	.word	0x48028000
 8000f20:	20000018 	.word	0x20000018

08000f24 <_i2c_xfer>:
 *         rd_wr    ... I2C Read/Write direction
 *  @return read-value on a I2C read request or return write-value on I2C write
 *          request
 */
uint8_t _i2c_xfer (uint8_t id, uint8_t reg_addr, uint8_t i2c_data, _Bool rd_wr)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	4608      	mov	r0, r1
 8000f2e:	4611      	mov	r1, r2
 8000f30:	461a      	mov	r2, r3
 8000f32:	4623      	mov	r3, r4
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	4603      	mov	r3, r0
 8000f38:	71bb      	strb	r3, [r7, #6]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	717b      	strb	r3, [r7, #5]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	713b      	strb	r3, [r7, #4]
    XMC_USIC_CH_t *channel;
    char _tmp_i2c_recv_ = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
    uint8_t id_tmp = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73bb      	strb	r3, [r7, #14]

    channel = XMC_I2C1_CH0;
 8000f4a:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <_i2c_xfer+0x11c>)
 8000f4c:	60bb      	str	r3, [r7, #8]

    id_tmp = LIS3DH_RD_ADR;
 8000f4e:	2330      	movs	r3, #48	; 0x30
 8000f50:	73bb      	strb	r3, [r7, #14]

    XMC_I2C_CH_MasterStart (channel, id_tmp, XMC_I2C_CH_CMD_WRITE);
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	2200      	movs	r2, #0
 8000f58:	4619      	mov	r1, r3
 8000f5a:	68b8      	ldr	r0, [r7, #8]
 8000f5c:	f001 f92a 	bl	80021b4 <XMC_I2C_CH_MasterStart>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8000f60:	bf00      	nop
 8000f62:	68b8      	ldr	r0, [r7, #8]
 8000f64:	f7ff ff96 	bl	8000e94 <XMC_I2C_CH_GetStatusFlag>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f7      	beq.n	8000f62 <_i2c_xfer+0x3e>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000f72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f76:	68b8      	ldr	r0, [r7, #8]
 8000f78:	f7ff ff98 	bl	8000eac <XMC_I2C_CH_ClearStatusFlag>

    XMC_I2C_CH_MasterTransmit (channel, reg_addr);
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68b8      	ldr	r0, [r7, #8]
 8000f82:	f001 f9a5 	bl	80022d0 <XMC_I2C_CH_MasterTransmit>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8000f86:	bf00      	nop
 8000f88:	68b8      	ldr	r0, [r7, #8]
 8000f8a:	f7ff ff83 	bl	8000e94 <XMC_I2C_CH_GetStatusFlag>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0f7      	beq.n	8000f88 <_i2c_xfer+0x64>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000f98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9c:	68b8      	ldr	r0, [r7, #8]
 8000f9e:	f7ff ff85 	bl	8000eac <XMC_I2C_CH_ClearStatusFlag>

    if (rd_wr) {
 8000fa2:	793b      	ldrb	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d030      	beq.n	800100a <_i2c_xfer+0xe6>
        /* Read from REG */
        XMC_I2C_CH_MasterRepeatedStart (channel, id_tmp, XMC_I2C_CH_CMD_READ);
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	2201      	movs	r2, #1
 8000fae:	4619      	mov	r1, r3
 8000fb0:	68b8      	ldr	r0, [r7, #8]
 8000fb2:	f001 f933 	bl	800221c <XMC_I2C_CH_MasterRepeatedStart>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8000fb6:	bf00      	nop
 8000fb8:	68b8      	ldr	r0, [r7, #8]
 8000fba:	f7ff ff6b 	bl	8000e94 <XMC_I2C_CH_GetStatusFlag>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f7      	beq.n	8000fb8 <_i2c_xfer+0x94>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000fc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fcc:	68b8      	ldr	r0, [r7, #8]
 8000fce:	f7ff ff6d 	bl	8000eac <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterReceiveNack (channel);
 8000fd2:	68b8      	ldr	r0, [r7, #8]
 8000fd4:	f001 f9a2 	bl	800231c <XMC_I2C_CH_MasterReceiveNack>

        while ( (XMC_USIC_CH_GetReceiveBufferStatus (channel) !=
 8000fd8:	bf00      	nop
 8000fda:	68b8      	ldr	r0, [r7, #8]
 8000fdc:	f7ff ff0a 	bl	8000df4 <XMC_USIC_CH_GetReceiveBufferStatus>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fe6:	d006      	beq.n	8000ff6 <_i2c_xfer+0xd2>
                 (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) && ( (uint32_t) XMC_USIC_CH_GetReceiveBufferStatus (channel)
 8000fe8:	68b8      	ldr	r0, [r7, #8]
 8000fea:	f7ff ff03 	bl	8000df4 <XMC_USIC_CH_GetReceiveBufferStatus>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ff4:	d1f1      	bne.n	8000fda <_i2c_xfer+0xb6>
                         != (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID0));

        _tmp_i2c_recv_ = XMC_I2C_CH_GetReceivedData (channel);
 8000ff6:	68b8      	ldr	r0, [r7, #8]
 8000ff8:	f001 f9b6 	bl	8002368 <XMC_I2C_CH_GetReceivedData>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	73fb      	strb	r3, [r7, #15]

        XMC_I2C_CH_MasterStop (channel);
 8001000:	68b8      	ldr	r0, [r7, #8]
 8001002:	f001 f93f 	bl	8002284 <XMC_I2C_CH_MasterStop>

        return _tmp_i2c_recv_;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	e016      	b.n	8001038 <_i2c_xfer+0x114>
    } else {
        /* Write to REG */
        XMC_I2C_CH_MasterTransmit (channel, i2c_data);
 800100a:	797b      	ldrb	r3, [r7, #5]
 800100c:	4619      	mov	r1, r3
 800100e:	68b8      	ldr	r0, [r7, #8]
 8001010:	f001 f95e 	bl	80022d0 <XMC_I2C_CH_MasterTransmit>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8001014:	bf00      	nop
 8001016:	68b8      	ldr	r0, [r7, #8]
 8001018:	f7ff ff3c 	bl	8000e94 <XMC_I2C_CH_GetStatusFlag>
 800101c:	4603      	mov	r3, r0
 800101e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f7      	beq.n	8001016 <_i2c_xfer+0xf2>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8001026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102a:	68b8      	ldr	r0, [r7, #8]
 800102c:	f7ff ff3e 	bl	8000eac <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterStop (channel);
 8001030:	68b8      	ldr	r0, [r7, #8]
 8001032:	f001 f927 	bl	8002284 <XMC_I2C_CH_MasterStop>

        return i2c_data;
 8001036:	797b      	ldrb	r3, [r7, #5]
    }
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	48020000 	.word	0x48020000

08001044 <LIS3DH_ReadReg>:
*			: I2C or SPI reading functions
* Input			: Register Address
* Output		: Data REad
* Return		: None
*******************************************************************************/
u8_t LIS3DH_ReadReg(u8_t Reg, u8_t* Data) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]

    //To be completed with either I2c or SPI reading function
    //i.e. *Data = SPI_Mems_Read_Reg( Reg );

    *Data = _i2c_xfer (0, Reg, 0, 1);
 8001050:	79f9      	ldrb	r1, [r7, #7]
 8001052:	2301      	movs	r3, #1
 8001054:	2200      	movs	r2, #0
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff ff64 	bl	8000f24 <_i2c_xfer>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	701a      	strb	r2, [r3, #0]

    return 1;
 8001064:	2301      	movs	r3, #1
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop

08001070 <LIS3DH_WriteReg>:
*			: I2C or SPI writing function
* Input			: Register Address, Data to be written
* Output		: None
* Return		: None
*******************************************************************************/
u8_t LIS3DH_WriteReg(u8_t WriteAddr, u8_t Data) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	460a      	mov	r2, r1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]

    //To be completed with either I2c or SPI writing function
    //i.e. SPI_Mems_Write_Reg(WriteAddr, Data);

    _i2c_xfer (0, WriteAddr, Data, 0);
 8001080:	79ba      	ldrb	r2, [r7, #6]
 8001082:	79f9      	ldrb	r1, [r7, #7]
 8001084:	2300      	movs	r3, #0
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff ff4c 	bl	8000f24 <_i2c_xfer>

    return 1;
 800108c:	2301      	movs	r3, #1
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop

08001098 <LIS3DH_SetODR>:
* Description    : Sets LIS3DH Output Data Rate
* Input          : Output Data Rate
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetODR(LIS3DH_ODR_t ov) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 80010a2:	f107 030f 	add.w	r3, r7, #15
 80010a6:	4619      	mov	r1, r3
 80010a8:	2020      	movs	r0, #32
 80010aa:	f7ff ffcb 	bl	8001044 <LIS3DH_ReadReg>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <LIS3DH_SetODR+0x20>
        return MEMS_ERROR;
 80010b4:	2300      	movs	r3, #0
 80010b6:	e018      	b.n	80010ea <LIS3DH_SetODR+0x52>

    value &= 0x0f;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	73fb      	strb	r3, [r7, #15]
    value |= ov<<LIS3DH_ODR_BIT;
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	4619      	mov	r1, r3
 80010d8:	2020      	movs	r0, #32
 80010da:	f7ff ffc9 	bl	8001070 <LIS3DH_WriteReg>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <LIS3DH_SetODR+0x50>
        return MEMS_ERROR;
 80010e4:	2300      	movs	r3, #0
 80010e6:	e000      	b.n	80010ea <LIS3DH_SetODR+0x52>

    return MEMS_SUCCESS;
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop

080010f4 <LIS3DH_SetTemperature>:
* Output         : None
* Note           : For Read Temperature by LIS3DH_OUT_AUX_3, LIS3DH_SetADCAux and LIS3DH_SetBDU
				   functions must be ENABLE
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetTemperature(State_t state) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
 80010fe:	f107 030f 	add.w	r3, r7, #15
 8001102:	4619      	mov	r1, r3
 8001104:	201f      	movs	r0, #31
 8001106:	f7ff ff9d 	bl	8001044 <LIS3DH_ReadReg>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <LIS3DH_SetTemperature+0x20>
        return MEMS_ERROR;
 8001110:	2300      	movs	r3, #0
 8001112:	e018      	b.n	8001146 <LIS3DH_SetTemperature+0x52>

    value &= 0xBF;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800111a:	b2db      	uxtb	r3, r3
 800111c:	73fb      	strb	r3, [r7, #15]
    value |= state<<LIS3DH_TEMP_EN;
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	019b      	lsls	r3, r3, #6
 8001122:	b25a      	sxtb	r2, r3
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	b25b      	sxtb	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b25b      	sxtb	r3, r3
 800112c:	b2db      	uxtb	r3, r3
 800112e:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	4619      	mov	r1, r3
 8001134:	201f      	movs	r0, #31
 8001136:	f7ff ff9b 	bl	8001070 <LIS3DH_WriteReg>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <LIS3DH_SetTemperature+0x50>
        return MEMS_ERROR;
 8001140:	2300      	movs	r3, #0
 8001142:	e000      	b.n	8001146 <LIS3DH_SetTemperature+0x52>

    return MEMS_SUCCESS;
 8001144:	2301      	movs	r3, #1
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop

08001150 <LIS3DH_SetADCAux>:
* Description    : Sets LIS3DH Output ADC
* Input          : MEMS_ENABLE, MEMS_DISABLE
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetADCAux(State_t state) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
 800115a:	f107 030f 	add.w	r3, r7, #15
 800115e:	4619      	mov	r1, r3
 8001160:	201f      	movs	r0, #31
 8001162:	f7ff ff6f 	bl	8001044 <LIS3DH_ReadReg>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <LIS3DH_SetADCAux+0x20>
        return MEMS_ERROR;
 800116c:	2300      	movs	r3, #0
 800116e:	e018      	b.n	80011a2 <LIS3DH_SetADCAux+0x52>

    value &= 0x7F;
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001176:	b2db      	uxtb	r3, r3
 8001178:	73fb      	strb	r3, [r7, #15]
    value |= state<<LIS3DH_ADC_PD;
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	01db      	lsls	r3, r3, #7
 800117e:	b25a      	sxtb	r2, r3
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	b25b      	sxtb	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b25b      	sxtb	r3, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	4619      	mov	r1, r3
 8001190:	201f      	movs	r0, #31
 8001192:	f7ff ff6d 	bl	8001070 <LIS3DH_WriteReg>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <LIS3DH_SetADCAux+0x50>
        return MEMS_ERROR;
 800119c:	2300      	movs	r3, #0
 800119e:	e000      	b.n	80011a2 <LIS3DH_SetADCAux+0x52>

    return MEMS_SUCCESS;
 80011a0:	2301      	movs	r3, #1
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop

080011ac <LIS3DH_GetTempRaw>:
* Description    : Read the Temperature Values by AUX Output Registers OUT_3_H
* Input          : Buffer to empty
* Output         : Temperature Values Registers buffer
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_GetTempRaw(i8_t* buff) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    u8_t valueL;
    u8_t valueH;

    if( !LIS3DH_ReadReg(LIS3DH_OUT_3_L, &valueL) )
 80011b4:	f107 030f 	add.w	r3, r7, #15
 80011b8:	4619      	mov	r1, r3
 80011ba:	200c      	movs	r0, #12
 80011bc:	f7ff ff42 	bl	8001044 <LIS3DH_ReadReg>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <LIS3DH_GetTempRaw+0x1e>
        return MEMS_ERROR;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e00f      	b.n	80011ea <LIS3DH_GetTempRaw+0x3e>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_3_H, &valueH) )
 80011ca:	f107 030e 	add.w	r3, r7, #14
 80011ce:	4619      	mov	r1, r3
 80011d0:	200d      	movs	r0, #13
 80011d2:	f7ff ff37 	bl	8001044 <LIS3DH_ReadReg>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <LIS3DH_GetTempRaw+0x34>
        return MEMS_ERROR;
 80011dc:	2300      	movs	r3, #0
 80011de:	e004      	b.n	80011ea <LIS3DH_GetTempRaw+0x3e>

    *buff = (i8_t)( valueH );
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	b25a      	sxtb	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	701a      	strb	r2, [r3, #0]

    return MEMS_SUCCESS;
 80011e8:	2301      	movs	r3, #1
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop

080011f4 <LIS3DH_SetMode>:
* Description    : Sets LIS3DH Operating Mode
* Input          : Modality (LIS3DH_NORMAL, LIS3DH_LOW_POWER, LIS3DH_POWER_DOWN)
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetMode(LIS3DH_Mode_t md) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
    u8_t value;
    u8_t value2;
    static   u8_t ODR_old_value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 80011fe:	f107 030f 	add.w	r3, r7, #15
 8001202:	4619      	mov	r1, r3
 8001204:	2020      	movs	r0, #32
 8001206:	f7ff ff1d 	bl	8001044 <LIS3DH_ReadReg>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <LIS3DH_SetMode+0x20>
        return MEMS_ERROR;
 8001210:	2300      	movs	r3, #0
 8001212:	e066      	b.n	80012e2 <LIS3DH_SetMode+0xee>

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value2) )
 8001214:	f107 030e 	add.w	r3, r7, #14
 8001218:	4619      	mov	r1, r3
 800121a:	2023      	movs	r0, #35	; 0x23
 800121c:	f7ff ff12 	bl	8001044 <LIS3DH_ReadReg>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <LIS3DH_SetMode+0x36>
        return MEMS_ERROR;
 8001226:	2300      	movs	r3, #0
 8001228:	e05b      	b.n	80012e2 <LIS3DH_SetMode+0xee>

    if((value & 0xF0)==0)
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10b      	bne.n	800124c <LIS3DH_SetMode+0x58>
        value = value | (ODR_old_value & 0xF0); //if it comes from POWERDOWN
 8001234:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <LIS3DH_SetMode+0xf8>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b25b      	sxtb	r3, r3
 800123a:	f023 030f 	bic.w	r3, r3, #15
 800123e:	b25a      	sxtb	r2, r3
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	b25b      	sxtb	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b25b      	sxtb	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	73fb      	strb	r3, [r7, #15]

    switch(md) {
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d01e      	beq.n	8001290 <LIS3DH_SetMode+0x9c>
 8001252:	2b02      	cmp	r3, #2
 8001254:	d00a      	beq.n	800126c <LIS3DH_SetMode+0x78>
 8001256:	2b00      	cmp	r3, #0
 8001258:	d12c      	bne.n	80012b4 <LIS3DH_SetMode+0xc0>

    case LIS3DH_POWER_DOWN:
        ODR_old_value = value;
 800125a:	7bfa      	ldrb	r2, [r7, #15]
 800125c:	4b23      	ldr	r3, [pc, #140]	; (80012ec <LIS3DH_SetMode+0xf8>)
 800125e:	701a      	strb	r2, [r3, #0]
        value &= 0x0F;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	b2db      	uxtb	r3, r3
 8001268:	73fb      	strb	r3, [r7, #15]
        break;
 800126a:	e025      	b.n	80012b8 <LIS3DH_SetMode+0xc4>

    case LIS3DH_NORMAL:
        value &= 0xF7;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	f023 0308 	bic.w	r3, r3, #8
 8001272:	b2db      	uxtb	r3, r3
 8001274:	73fb      	strb	r3, [r7, #15]
        value |= (MEMS_RESET<<LIS3DH_LPEN);
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 800127a:	7bbb      	ldrb	r3, [r7, #14]
 800127c:	f023 0308 	bic.w	r3, r3, #8
 8001280:	b2db      	uxtb	r3, r3
 8001282:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_SET<<LIS3DH_HR);   //set HighResolution_BIT
 8001284:	7bbb      	ldrb	r3, [r7, #14]
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	b2db      	uxtb	r3, r3
 800128c:	73bb      	strb	r3, [r7, #14]
        break;
 800128e:	e013      	b.n	80012b8 <LIS3DH_SetMode+0xc4>

    case LIS3DH_LOW_POWER:
        value &= 0xF7;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	f023 0308 	bic.w	r3, r3, #8
 8001296:	b2db      	uxtb	r3, r3
 8001298:	73fb      	strb	r3, [r7, #15]
        value |=  (MEMS_SET<<LIS3DH_LPEN);
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 80012a4:	7bbb      	ldrb	r3, [r7, #14]
 80012a6:	f023 0308 	bic.w	r3, r3, #8
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_RESET<<LIS3DH_HR); //reset HighResolution_BIT
 80012ae:	7bbb      	ldrb	r3, [r7, #14]
 80012b0:	73bb      	strb	r3, [r7, #14]
        break;
 80012b2:	e001      	b.n	80012b8 <LIS3DH_SetMode+0xc4>

    default:
        return MEMS_ERROR;
 80012b4:	2300      	movs	r3, #0
 80012b6:	e014      	b.n	80012e2 <LIS3DH_SetMode+0xee>
    }

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	4619      	mov	r1, r3
 80012bc:	2020      	movs	r0, #32
 80012be:	f7ff fed7 	bl	8001070 <LIS3DH_WriteReg>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <LIS3DH_SetMode+0xd8>
        return MEMS_ERROR;
 80012c8:	2300      	movs	r3, #0
 80012ca:	e00a      	b.n	80012e2 <LIS3DH_SetMode+0xee>

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value2) )
 80012cc:	7bbb      	ldrb	r3, [r7, #14]
 80012ce:	4619      	mov	r1, r3
 80012d0:	2023      	movs	r0, #35	; 0x23
 80012d2:	f7ff fecd 	bl	8001070 <LIS3DH_WriteReg>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <LIS3DH_SetMode+0xec>
        return MEMS_ERROR;
 80012dc:	2300      	movs	r3, #0
 80012de:	e000      	b.n	80012e2 <LIS3DH_SetMode+0xee>

    return MEMS_SUCCESS;
 80012e0:	2301      	movs	r3, #1
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000a38 	.word	0x20000a38

080012f0 <LIS3DH_SetAxis>:
* Input          : LIS3DH_X_ENABLE/DISABLE | LIS3DH_Y_ENABLE/DISABLE | LIS3DH_Z_ENABLE/DISABLE
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetAxis(LIS3DH_Axis_t axis) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 80012fa:	f107 030f 	add.w	r3, r7, #15
 80012fe:	4619      	mov	r1, r3
 8001300:	2020      	movs	r0, #32
 8001302:	f7ff fe9f 	bl	8001044 <LIS3DH_ReadReg>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <LIS3DH_SetAxis+0x20>
        return MEMS_ERROR;
 800130c:	2300      	movs	r3, #0
 800130e:	e017      	b.n	8001340 <LIS3DH_SetAxis+0x50>
    value &= 0xF8;
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	f023 0307 	bic.w	r3, r3, #7
 8001316:	b2db      	uxtb	r3, r3
 8001318:	73fb      	strb	r3, [r7, #15]
    value |= (0x07 & axis);
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	b2da      	uxtb	r2, r3
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	4313      	orrs	r3, r2
 8001326:	b2db      	uxtb	r3, r3
 8001328:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	4619      	mov	r1, r3
 800132e:	2020      	movs	r0, #32
 8001330:	f7ff fe9e 	bl	8001070 <LIS3DH_WriteReg>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <LIS3DH_SetAxis+0x4e>
        return MEMS_ERROR;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <LIS3DH_SetAxis+0x50>

    return MEMS_SUCCESS;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <LIS3DH_SetFullScale>:
* Description    : Sets the LIS3DH FullScale
* Input          : LIS3DH_FULLSCALE_2/LIS3DH_FULLSCALE_4/LIS3DH_FULLSCALE_8/LIS3DH_FULLSCALE_16
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetFullScale(LIS3DH_Fullscale_t fs) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 8001352:	f107 030f 	add.w	r3, r7, #15
 8001356:	4619      	mov	r1, r3
 8001358:	2023      	movs	r0, #35	; 0x23
 800135a:	f7ff fe73 	bl	8001044 <LIS3DH_ReadReg>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <LIS3DH_SetFullScale+0x20>
        return MEMS_ERROR;
 8001364:	2300      	movs	r3, #0
 8001366:	e018      	b.n	800139a <LIS3DH_SetFullScale+0x52>

    value &= 0xCF;
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800136e:	b2db      	uxtb	r3, r3
 8001370:	73fb      	strb	r3, [r7, #15]
    value |= (fs<<LIS3DH_FS);
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	b25a      	sxtb	r2, r3
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	b25b      	sxtb	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b25b      	sxtb	r3, r3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	4619      	mov	r1, r3
 8001388:	2023      	movs	r0, #35	; 0x23
 800138a:	f7ff fe71 	bl	8001070 <LIS3DH_WriteReg>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <LIS3DH_SetFullScale+0x50>
        return MEMS_ERROR;
 8001394:	2300      	movs	r3, #0
 8001396:	e000      	b.n	800139a <LIS3DH_SetFullScale+0x52>

    return MEMS_SUCCESS;
 8001398:	2301      	movs	r3, #1
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop

080013a4 <LIS3DH_SetBDU>:
* Description    : Enable/Disable Block Data Update Functionality
* Input          : ENABLE/DISABLE
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetBDU(State_t bdu) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 80013ae:	f107 030f 	add.w	r3, r7, #15
 80013b2:	4619      	mov	r1, r3
 80013b4:	2023      	movs	r0, #35	; 0x23
 80013b6:	f7ff fe45 	bl	8001044 <LIS3DH_ReadReg>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <LIS3DH_SetBDU+0x20>
        return MEMS_ERROR;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e018      	b.n	80013f6 <LIS3DH_SetBDU+0x52>

    value &= 0x7F;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	73fb      	strb	r3, [r7, #15]
    value |= (bdu<<LIS3DH_BDU);
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	01db      	lsls	r3, r3, #7
 80013d2:	b25a      	sxtb	r2, r3
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	4619      	mov	r1, r3
 80013e4:	2023      	movs	r0, #35	; 0x23
 80013e6:	f7ff fe43 	bl	8001070 <LIS3DH_WriteReg>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <LIS3DH_SetBDU+0x50>
        return MEMS_ERROR;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e000      	b.n	80013f6 <LIS3DH_SetBDU+0x52>

    return MEMS_SUCCESS;
 80013f4:	2301      	movs	r3, #1
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop

08001400 <LIS3DH_SetIntConfiguration>:
* Input          : LIS3DH_INT1_AND/OR | LIS3DH_INT1_ZHIE_ENABLE/DISABLE | LIS3DH_INT1_ZLIE_ENABLE/DISABLE...
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntConfiguration(LIS3DH_Int1Conf_t ic) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 800140a:	f107 030f 	add.w	r3, r7, #15
 800140e:	4619      	mov	r1, r3
 8001410:	2030      	movs	r0, #48	; 0x30
 8001412:	f7ff fe17 	bl	8001044 <LIS3DH_ReadReg>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <LIS3DH_SetIntConfiguration+0x20>
        return MEMS_ERROR;
 800141c:	2300      	movs	r3, #0
 800141e:	e014      	b.n	800144a <LIS3DH_SetIntConfiguration+0x4a>

    value &= 0x40;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001426:	b2db      	uxtb	r3, r3
 8001428:	73fb      	strb	r3, [r7, #15]
    value |= ic;
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	4313      	orrs	r3, r2
 8001430:	b2db      	uxtb	r3, r3
 8001432:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	4619      	mov	r1, r3
 8001438:	2030      	movs	r0, #48	; 0x30
 800143a:	f7ff fe19 	bl	8001070 <LIS3DH_WriteReg>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <LIS3DH_SetIntConfiguration+0x48>
        return MEMS_ERROR;
 8001444:	2300      	movs	r3, #0
 8001446:	e000      	b.n	800144a <LIS3DH_SetIntConfiguration+0x4a>

    return MEMS_SUCCESS;
 8001448:	2301      	movs	r3, #1
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop

08001454 <LIS3DH_SetIntMode>:
* Input          : LIS3DH_INT_MODE_OR, LIS3DH_INT_MODE_6D_MOVEMENT, LIS3DH_INT_MODE_AND,
				   LIS3DH_INT_MODE_6D_POSITION
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntMode(LIS3DH_Int1Mode_t int_mode) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 800145e:	f107 030f 	add.w	r3, r7, #15
 8001462:	4619      	mov	r1, r3
 8001464:	2030      	movs	r0, #48	; 0x30
 8001466:	f7ff fded 	bl	8001044 <LIS3DH_ReadReg>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <LIS3DH_SetIntMode+0x20>
        return MEMS_ERROR;
 8001470:	2300      	movs	r3, #0
 8001472:	e018      	b.n	80014a6 <LIS3DH_SetIntMode+0x52>

    value &= 0x3F;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800147a:	b2db      	uxtb	r3, r3
 800147c:	73fb      	strb	r3, [r7, #15]
    value |= (int_mode<<LIS3DH_INT_6D);
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	019b      	lsls	r3, r3, #6
 8001482:	b25a      	sxtb	r2, r3
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	b25b      	sxtb	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b25b      	sxtb	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	4619      	mov	r1, r3
 8001494:	2030      	movs	r0, #48	; 0x30
 8001496:	f7ff fdeb 	bl	8001070 <LIS3DH_WriteReg>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <LIS3DH_SetIntMode+0x50>
        return MEMS_ERROR;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e000      	b.n	80014a6 <LIS3DH_SetIntMode+0x52>

    return MEMS_SUCCESS;
 80014a4:	2301      	movs	r3, #1
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop

080014b0 <LIS3DH_Get6DPosition>:
* Description    : 6D, 4D Interrupt Position Detect
* Input          : Byte to empty by POSITION_6D_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_Get6DPosition(u8_t* val) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_SRC, &value) )
 80014b8:	f107 030f 	add.w	r3, r7, #15
 80014bc:	4619      	mov	r1, r3
 80014be:	2031      	movs	r0, #49	; 0x31
 80014c0:	f7ff fdc0 	bl	8001044 <LIS3DH_ReadReg>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <LIS3DH_Get6DPosition+0x1e>
        return MEMS_ERROR;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e065      	b.n	800159a <LIS3DH_Get6DPosition+0xea>

    value &= 0x7F;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	73fb      	strb	r3, [r7, #15]

    switch (value) {
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	3b41      	subs	r3, #65	; 0x41
 80014dc:	2b1f      	cmp	r3, #31
 80014de:	d85b      	bhi.n	8001598 <LIS3DH_Get6DPosition+0xe8>
 80014e0:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <LIS3DH_Get6DPosition+0x38>)
 80014e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e6:	bf00      	nop
 80014e8:	08001579 	.word	0x08001579
 80014ec:	08001571 	.word	0x08001571
 80014f0:	08001599 	.word	0x08001599
 80014f4:	08001569 	.word	0x08001569
 80014f8:	08001599 	.word	0x08001599
 80014fc:	08001599 	.word	0x08001599
 8001500:	08001599 	.word	0x08001599
 8001504:	08001581 	.word	0x08001581
 8001508:	08001599 	.word	0x08001599
 800150c:	08001599 	.word	0x08001599
 8001510:	08001599 	.word	0x08001599
 8001514:	08001599 	.word	0x08001599
 8001518:	08001599 	.word	0x08001599
 800151c:	08001599 	.word	0x08001599
 8001520:	08001599 	.word	0x08001599
 8001524:	08001591 	.word	0x08001591
 8001528:	08001599 	.word	0x08001599
 800152c:	08001599 	.word	0x08001599
 8001530:	08001599 	.word	0x08001599
 8001534:	08001599 	.word	0x08001599
 8001538:	08001599 	.word	0x08001599
 800153c:	08001599 	.word	0x08001599
 8001540:	08001599 	.word	0x08001599
 8001544:	08001599 	.word	0x08001599
 8001548:	08001599 	.word	0x08001599
 800154c:	08001599 	.word	0x08001599
 8001550:	08001599 	.word	0x08001599
 8001554:	08001599 	.word	0x08001599
 8001558:	08001599 	.word	0x08001599
 800155c:	08001599 	.word	0x08001599
 8001560:	08001599 	.word	0x08001599
 8001564:	08001589 	.word	0x08001589
    case LIS3DH_UP_SX:
        *val = LIS3DH_UP_SX;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2244      	movs	r2, #68	; 0x44
 800156c:	701a      	strb	r2, [r3, #0]
        break;
 800156e:	e013      	b.n	8001598 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_UP_DX:
        *val = LIS3DH_UP_DX;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2242      	movs	r2, #66	; 0x42
 8001574:	701a      	strb	r2, [r3, #0]
        break;
 8001576:	e00f      	b.n	8001598 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_SX:
        *val = LIS3DH_DW_SX;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2241      	movs	r2, #65	; 0x41
 800157c:	701a      	strb	r2, [r3, #0]
        break;
 800157e:	e00b      	b.n	8001598 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_DX:
        *val = LIS3DH_DW_DX;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2248      	movs	r2, #72	; 0x48
 8001584:	701a      	strb	r2, [r3, #0]
        break;
 8001586:	e007      	b.n	8001598 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_TOP:
        *val = LIS3DH_TOP;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2260      	movs	r2, #96	; 0x60
 800158c:	701a      	strb	r2, [r3, #0]
        break;
 800158e:	e003      	b.n	8001598 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_BOTTOM:
        *val = LIS3DH_BOTTOM;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2250      	movs	r2, #80	; 0x50
 8001594:	701a      	strb	r2, [r3, #0]
        break;
 8001596:	bf00      	nop
    }

    return MEMS_SUCCESS;
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop

080015a4 <LIS3DH_SetInt1Threshold>:
* Description    : Sets Interrupt 1 Threshold
* Input          : Threshold = [0,31]
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetInt1Threshold(u8_t ths) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
    if (ths > 127)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da01      	bge.n	80015ba <LIS3DH_SetInt1Threshold+0x16>
        return MEMS_ERROR;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e00a      	b.n	80015d0 <LIS3DH_SetInt1Threshold+0x2c>

    if( !LIS3DH_WriteReg(LIS3DH_INT1_THS, ths) )
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4619      	mov	r1, r3
 80015be:	2032      	movs	r0, #50	; 0x32
 80015c0:	f7ff fd56 	bl	8001070 <LIS3DH_WriteReg>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <LIS3DH_SetInt1Threshold+0x2a>
        return MEMS_ERROR;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <LIS3DH_SetInt1Threshold+0x2c>

    return MEMS_SUCCESS;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <LIS3DH_GetAccAxesRaw>:
* Description    : Read the Acceleration Values Output Registers
* Input          : buffer to empity by AxesRaw_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_GetAccAxesRaw(AxesRaw_t* buff) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
    i16_t value;
    u8_t *valueL = (u8_t *)(&value);
 80015e0:	f107 030e 	add.w	r3, r7, #14
 80015e4:	617b      	str	r3, [r7, #20]
    u8_t *valueH = ((u8_t *)(&value)+1);
 80015e6:	f107 030e 	add.w	r3, r7, #14
 80015ea:	3301      	adds	r3, #1
 80015ec:	613b      	str	r3, [r7, #16]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_L, valueL) )
 80015ee:	6979      	ldr	r1, [r7, #20]
 80015f0:	2028      	movs	r0, #40	; 0x28
 80015f2:	f7ff fd27 	bl	8001044 <LIS3DH_ReadReg>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <LIS3DH_GetAccAxesRaw+0x28>
        return MEMS_ERROR;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e039      	b.n	8001674 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_H, valueH) )
 8001600:	6939      	ldr	r1, [r7, #16]
 8001602:	2029      	movs	r0, #41	; 0x29
 8001604:	f7ff fd1e 	bl	8001044 <LIS3DH_ReadReg>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <LIS3DH_GetAccAxesRaw+0x3a>
        return MEMS_ERROR;
 800160e:	2300      	movs	r3, #0
 8001610:	e030      	b.n	8001674 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_X = value;
 8001612:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	801a      	strh	r2, [r3, #0]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_L, valueL) )
 800161a:	6979      	ldr	r1, [r7, #20]
 800161c:	202a      	movs	r0, #42	; 0x2a
 800161e:	f7ff fd11 	bl	8001044 <LIS3DH_ReadReg>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <LIS3DH_GetAccAxesRaw+0x54>
        return MEMS_ERROR;
 8001628:	2300      	movs	r3, #0
 800162a:	e023      	b.n	8001674 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_H, valueH) )
 800162c:	6939      	ldr	r1, [r7, #16]
 800162e:	202b      	movs	r0, #43	; 0x2b
 8001630:	f7ff fd08 	bl	8001044 <LIS3DH_ReadReg>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <LIS3DH_GetAccAxesRaw+0x66>
        return MEMS_ERROR;
 800163a:	2300      	movs	r3, #0
 800163c:	e01a      	b.n	8001674 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Y = value;
 800163e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	805a      	strh	r2, [r3, #2]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_L, valueL) )
 8001646:	6979      	ldr	r1, [r7, #20]
 8001648:	202c      	movs	r0, #44	; 0x2c
 800164a:	f7ff fcfb 	bl	8001044 <LIS3DH_ReadReg>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <LIS3DH_GetAccAxesRaw+0x80>
        return MEMS_ERROR;
 8001654:	2300      	movs	r3, #0
 8001656:	e00d      	b.n	8001674 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_H, valueH) )
 8001658:	6939      	ldr	r1, [r7, #16]
 800165a:	202d      	movs	r0, #45	; 0x2d
 800165c:	f7ff fcf2 	bl	8001044 <LIS3DH_ReadReg>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <LIS3DH_GetAccAxesRaw+0x92>
        return MEMS_ERROR;
 8001666:	2300      	movs	r3, #0
 8001668:	e004      	b.n	8001674 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Z = value;
 800166a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	809a      	strh	r2, [r3, #4]

    return MEMS_SUCCESS;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	490d      	ldr	r1, [pc, #52]	; (80016c8 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	0092      	lsls	r2, r2, #2
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	4909      	ldr	r1, [pc, #36]	; (80016cc <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
  }
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e0:	d301      	bcc.n	80016e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00f      	b.n	8001706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <SysTick_Config+0x40>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ee:	213f      	movs	r1, #63	; 0x3f
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f7ff ffc2 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x40>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <main>:
#include "3Daccel_app.h"
#include "3Daccel_out_library.h"
#include "lis3dh_library.h"

int main (void)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b097      	sub	sp, #92	; 0x5c
 8001718:	af02      	add	r7, sp, #8
	uint8_t direction = 6;
 800171a:	2306      	movs	r3, #6
 800171c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	int8_t temperature = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	char rx_buff[RX_BUFFER_SIZE] = {0};
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	2240      	movs	r2, #64	; 0x40
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f001 f888 	bl	8002844 <memset>
	AXESRAWDATA readAxes;
	
	errorcount = 0, packagesSent = 0, position = 0, old_position = 0;
 8001734:	4b61      	ldr	r3, [pc, #388]	; (80018bc <main+0x1a8>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	4b61      	ldr	r3, [pc, #388]	; (80018c0 <main+0x1ac>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	4b60      	ldr	r3, [pc, #384]	; (80018c4 <main+0x1b0>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	4b60      	ldr	r3, [pc, #384]	; (80018c8 <main+0x1b4>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
	readAxes.axisX = 0, readAxes.axisY = 0, readAxes.axisZ = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	80bb      	strh	r3, [r7, #4]
 8001750:	2300      	movs	r3, #0
 8001752:	80fb      	strh	r3, [r7, #6]
 8001754:	2300      	movs	r3, #0
 8001756:	813b      	strh	r3, [r7, #8]
	statisticSend = 0;
 8001758:	4b5c      	ldr	r3, [pc, #368]	; (80018cc <main+0x1b8>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]

	// init DEBUG, UART, I2C
    initRetargetSwo();
 800175e:	f7ff fac9 	bl	8000cf4 <initRetargetSwo>
    _init_uart0_ch0();
 8001762:	f7ff f857 	bl	8000814 <_init_uart0_ch0>
    _init_i2c1_ch0();
 8001766:	f7ff fbb3 	bl	8000ed0 <_init_i2c1_ch0>
    printf("DEBUG+I2C+UART init done...\n");
 800176a:	4859      	ldr	r0, [pc, #356]	; (80018d0 <main+0x1bc>)
 800176c:	f001 f900 	bl	8002970 <puts>

	// init LED output
	outputInit();
 8001770:	f7ff fa28 	bl	8000bc4 <outputInit>

	// set up SysTick
    SysTick_Config (SystemCoreClock / TICKS_PER_SECOND);
 8001774:	4b57      	ldr	r3, [pc, #348]	; (80018d4 <main+0x1c0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a57      	ldr	r2, [pc, #348]	; (80018d8 <main+0x1c4>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	099b      	lsrs	r3, r3, #6
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ffa5 	bl	80016d0 <SysTick_Config>

    // init MEMS
	while (1)
	{
		if (initMEMSsensor() == 0)
 8001786:	f7fe fd95 	bl	80002b4 <initMEMSsensor>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d103      	bne.n	8001798 <main+0x84>
		{
			printf("MEMS init done...\n");
 8001790:	4852      	ldr	r0, [pc, #328]	; (80018dc <main+0x1c8>)
 8001792:	f001 f8ed 	bl	8002970 <puts>
			break;
 8001796:	e007      	b.n	80017a8 <main+0x94>
		}
		else
		{
			printf("Error MEMS init, retry...\n");
 8001798:	4851      	ldr	r0, [pc, #324]	; (80018e0 <main+0x1cc>)
 800179a:	f001 f8e9 	bl	8002970 <puts>
			ledSetting(0, 1);
 800179e:	2101      	movs	r1, #1
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff fa2b 	bl	8000bfc <ledSetting>
		}
	}
 80017a6:	e7ee      	b.n	8001786 <main+0x72>

	// config MEMS
	while (1)
	{
		if (configMEMSsensor() == 0)
 80017a8:	f7fe fdec 	bl	8000384 <configMEMSsensor>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d103      	bne.n	80017ba <main+0xa6>
		{
			printf("MEMS config done...\n");
 80017b2:	484c      	ldr	r0, [pc, #304]	; (80018e4 <main+0x1d0>)
 80017b4:	f001 f8dc 	bl	8002970 <puts>
			break;
 80017b8:	e007      	b.n	80017ca <main+0xb6>
		}
		else
		{
			printf("Error MEMS config, retry...\n");
 80017ba:	484b      	ldr	r0, [pc, #300]	; (80018e8 <main+0x1d4>)
 80017bc:	f001 f8d8 	bl	8002970 <puts>
			ledSetting(0, 1);
 80017c0:	2101      	movs	r1, #1
 80017c2:	2000      	movs	r0, #0
 80017c4:	f7ff fa1a 	bl	8000bfc <ledSetting>
		}
	}
 80017c8:	e7ee      	b.n	80017a8 <main+0x94>

	// main loop
	while(1)
	{
		// clear buffer and receie incoming data
		memset (&rx_buff, 0, sizeof (rx_buff));
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	2240      	movs	r2, #64	; 0x40
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f001 f836 	bl	8002844 <memset>
		_uart_get_string (rx_buff);
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff f8ed 	bl	80009bc <_uart_get_string>
		printf("received %s\n", rx_buff);
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	4619      	mov	r1, r3
 80017e8:	4840      	ldr	r0, [pc, #256]	; (80018ec <main+0x1d8>)
 80017ea:	f001 f879 	bl	80028e0 <printf>

        if (strncmp(rx_buff, "#REQ,", strlen(rx_buff)) == 0)
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 f904 	bl	8002a00 <strlen>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	493c      	ldr	r1, [pc, #240]	; (80018f0 <main+0x1dc>)
 8001800:	4618      	mov	r0, r3
 8001802:	f001 f96b 	bl	8002adc <strncmp>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d122      	bne.n	8001852 <main+0x13e>
        {
			// get temperature
			temperature = getTemperature(&temperature);
 800180c:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe49 	bl	80004a8 <getTemperature>
 8001816:	4603      	mov	r3, r0
 8001818:	b25b      	sxtb	r3, r3
 800181a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

			// get 6D Position
	  		direction = get6Dposition();
 800181e:	f7fe fe5f 	bl	80004e0 <get6Dposition>
 8001822:	4603      	mov	r3, r0
 8001824:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

			// get raw data
			readAxes = getAxesRawData();
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fef2 	bl	8000614 <getAxesRawData>

			protocolComplete(direction, readAxes.axisX, readAxes.axisY, readAxes.axisZ, temperature);
 8001830:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001834:	b218      	sxth	r0, r3
 8001836:	88bb      	ldrh	r3, [r7, #4]
 8001838:	b219      	sxth	r1, r3
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	b21a      	sxth	r2, r3
 800183e:	893b      	ldrh	r3, [r7, #8]
 8001840:	b21c      	sxth	r4, r3
 8001842:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001846:	b2db      	uxtb	r3, r3
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	4623      	mov	r3, r4
 800184c:	f7ff f918 	bl	8000a80 <protocolComplete>
 8001850:	e02a      	b.n	80018a8 <main+0x194>
		}
		else if (strncmp(rx_buff, "#END,", strlen(rx_buff)) == 0)
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	4618      	mov	r0, r3
 8001858:	f001 f8d2 	bl	8002a00 <strlen>
 800185c:	4602      	mov	r2, r0
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	4924      	ldr	r1, [pc, #144]	; (80018f4 <main+0x1e0>)
 8001864:	4618      	mov	r0, r3
 8001866:	f001 f939 	bl	8002adc <strncmp>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d108      	bne.n	8001882 <main+0x16e>
		{
			ledSetting(0, 0);
 8001870:	2100      	movs	r1, #0
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff f9c2 	bl	8000bfc <ledSetting>
			ledSetting(1, 0);
 8001878:	2100      	movs	r1, #0
 800187a:	2001      	movs	r0, #1
 800187c:	f7ff f9be 	bl	8000bfc <ledSetting>
 8001880:	e012      	b.n	80018a8 <main+0x194>
		}
		else if (strncmp(rx_buff, "#CON,", strlen(rx_buff)) == 0)
 8001882:	f107 030c 	add.w	r3, r7, #12
 8001886:	4618      	mov	r0, r3
 8001888:	f001 f8ba 	bl	8002a00 <strlen>
 800188c:	4602      	mov	r2, r0
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	4919      	ldr	r1, [pc, #100]	; (80018f8 <main+0x1e4>)
 8001894:	4618      	mov	r0, r3
 8001896:	f001 f921 	bl	8002adc <strncmp>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10a      	bne.n	80018b6 <main+0x1a2>
		{
			ledSetting(0, 1);
 80018a0:	2101      	movs	r1, #1
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7ff f9aa 	bl	8000bfc <ledSetting>
		}
		else
		{
			continue;
		}
		statisticSend++;
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <main+0x1b8>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <main+0x1b8>)
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	e789      	b.n	80017ca <main+0xb6>
		{
			ledSetting(0, 1);
		}
		else
		{
			continue;
 80018b6:	bf00      	nop
		}
		statisticSend++;
	}
 80018b8:	e787      	b.n	80017ca <main+0xb6>
 80018ba:	bf00      	nop
 80018bc:	20000a7a 	.word	0x20000a7a
 80018c0:	20000a7c 	.word	0x20000a7c
 80018c4:	20000a7b 	.word	0x20000a7b
 80018c8:	20000a81 	.word	0x20000a81
 80018cc:	20000a78 	.word	0x20000a78
 80018d0:	08009898 	.word	0x08009898
 80018d4:	2000ffc0 	.word	0x2000ffc0
 80018d8:	10624dd3 	.word	0x10624dd3
 80018dc:	080098b4 	.word	0x080098b4
 80018e0:	080098c8 	.word	0x080098c8
 80018e4:	080098e4 	.word	0x080098e4
 80018e8:	080098f8 	.word	0x080098f8
 80018ec:	08009914 	.word	0x08009914
 80018f0:	08009924 	.word	0x08009924
 80018f4:	0800992c 	.word	0x0800992c
 80018f8:	08009934 	.word	0x08009934

080018fc <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop

08001934 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
 return -1;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop

08001948 <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <_fstat+0x16>
  return -1;
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
 800195c:	e001      	b.n	8001962 <_fstat+0x1a>
 else
  return -2;
 800195e:	f06f 0301 	mvn.w	r3, #1
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop

08001970 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <_sbrk+0x60>)
 800197a:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d108      	bne.n	8001996 <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <_sbrk+0x64>)
 8001986:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <_sbrk+0x68>)
 8001988:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	4413      	add	r3, r2
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <_sbrk+0x6c>)
 8001994:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <_sbrk+0x64>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 80019a8:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 80019ac:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <_sbrk+0x6c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d301      	bcc.n	80019bc <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 80019b8:	2300      	movs	r3, #0
 80019ba:	e003      	b.n	80019c4 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 80019bc:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <_sbrk+0x64>)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 80019c2:	693b      	ldr	r3, [r7, #16]
 }
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	371c      	adds	r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	0000f538 	.word	0x0000f538
 80019d4:	20000a3c 	.word	0x20000a3c
 80019d8:	20000a88 	.word	0x20000a88
 80019dc:	20000a40 	.word	0x20000a40

080019e0 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop

080019f0 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e003      	b.n	8001a1e <delay+0x16>
  {
    __NOP();
 8001a16:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d3f7      	bcc.n	8001a16 <delay+0xe>
  {
    __NOP();
  }
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop

08001a34 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8001a34:	b598      	push	{r3, r4, r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <SystemInit+0x20>)
 8001a3a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a3e:	4614      	mov	r4, r2
 8001a40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8001a46:	f000 f807 	bl	8001a58 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8001a4a:	f000 f83d 	bl	8001ac8 <SystemCoreClockSetup>
}
 8001a4e:	bf00      	nop
 8001a50:	bd98      	pop	{r3, r4, r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000ffc4 	.word	0x2000ffc4

08001a58 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5e:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <SystemCoreSetup+0x64>)
 8001a62:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <SystemCoreSetup+0x68>)
 8001a64:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a66:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001a6a:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001a6c:	4a13      	ldr	r2, [pc, #76]	; (8001abc <SystemCoreSetup+0x64>)
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <SystemCoreSetup+0x64>)
 8001a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8001a7c:	4a0f      	ldr	r2, [pc, #60]	; (8001abc <SystemCoreSetup+0x64>)
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <SystemCoreSetup+0x64>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f023 0308 	bic.w	r3, r3, #8
 8001a86:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <SystemCoreSetup+0x6c>)
 8001a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8e:	3314      	adds	r3, #20
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f023 030f 	bic.w	r3, r3, #15
 8001a9a:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f043 0303 	orr.w	r3, r3, #3
 8001aa2:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <SystemCoreSetup+0x6c>)
 8001aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aaa:	3314      	adds	r3, #20
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	601a      	str	r2, [r3, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00
 8001ac0:	08000000 	.word	0x08000000
 8001ac4:	58001000 	.word	0x58001000

08001ac8 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8001acc:	4b75      	ldr	r3, [pc, #468]	; (8001ca4 <SystemCoreClockSetup+0x1dc>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10c      	bne.n	8001af2 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8001ad8:	4a72      	ldr	r2, [pc, #456]	; (8001ca4 <SystemCoreClockSetup+0x1dc>)
 8001ada:	4b72      	ldr	r3, [pc, #456]	; (8001ca4 <SystemCoreClockSetup+0x1dc>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8001ae4:	bf00      	nop
 8001ae6:	4b6f      	ldr	r3, [pc, #444]	; (8001ca4 <SystemCoreClockSetup+0x1dc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f9      	beq.n	8001ae6 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8001af2:	4b6d      	ldr	r3, [pc, #436]	; (8001ca8 <SystemCoreClockSetup+0x1e0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d009      	beq.n	8001b12 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8001afe:	4a6a      	ldr	r2, [pc, #424]	; (8001ca8 <SystemCoreClockSetup+0x1e0>)
 8001b00:	4b69      	ldr	r3, [pc, #420]	; (8001ca8 <SystemCoreClockSetup+0x1e0>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b08:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8001b0a:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8001b0e:	f7ff ff7b 	bl	8001a08 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8001b12:	4a66      	ldr	r2, [pc, #408]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001b14:	4b65      	ldr	r3, [pc, #404]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b1c:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8001b1e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001b22:	f7ff ff71 	bl	8001a08 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8001b26:	4a61      	ldr	r2, [pc, #388]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001b28:	4b60      	ldr	r3, [pc, #384]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b30:	f023 0302 	bic.w	r3, r3, #2
 8001b34:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8001b36:	4b5e      	ldr	r3, [pc, #376]	; (8001cb0 <SystemCoreClockSetup+0x1e8>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d029      	beq.n	8001b96 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8001b42:	4a5b      	ldr	r2, [pc, #364]	; (8001cb0 <SystemCoreClockSetup+0x1e8>)
 8001b44:	4b5a      	ldr	r3, [pc, #360]	; (8001cb0 <SystemCoreClockSetup+0x1e8>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001b4c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b50:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8001b52:	f000 f927 	bl	8001da4 <OSCHP_GetFrequency>
 8001b56:	4602      	mov	r2, r0
 8001b58:	4b56      	ldr	r3, [pc, #344]	; (8001cb4 <SystemCoreClockSetup+0x1ec>)
 8001b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8001b5e:	0d1b      	lsrs	r3, r3, #20
 8001b60:	3b01      	subs	r3, #1
 8001b62:	041b      	lsls	r3, r3, #16
 8001b64:	4952      	ldr	r1, [pc, #328]	; (8001cb0 <SystemCoreClockSetup+0x1e8>)
 8001b66:	4a52      	ldr	r2, [pc, #328]	; (8001cb0 <SystemCoreClockSetup+0x1e8>)
 8001b68:	6852      	ldr	r2, [r2, #4]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8001b6e:	4a4f      	ldr	r2, [pc, #316]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001b70:	4b4e      	ldr	r3, [pc, #312]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8001b7a:	4a4c      	ldr	r2, [pc, #304]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001b7c:	4b4b      	ldr	r3, [pc, #300]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b84:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8001b86:	bf00      	nop
 8001b88:	4b48      	ldr	r3, [pc, #288]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001b90:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8001b94:	d1f8      	bne.n	8001b88 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001b96:	4a45      	ldr	r2, [pc, #276]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001b98:	4b44      	ldr	r3, [pc, #272]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8001ba2:	4a42      	ldr	r2, [pc, #264]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001ba4:	4b41      	ldr	r3, [pc, #260]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f043 0310 	orr.w	r3, r3, #16
 8001bac:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001bae:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001bb0:	4a41      	ldr	r2, [pc, #260]	; (8001cb8 <SystemCoreClockSetup+0x1f0>)
 8001bb2:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001bb4:	4a3d      	ldr	r2, [pc, #244]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bbe:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8001bc0:	4a3a      	ldr	r2, [pc, #232]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001bc2:	4b3a      	ldr	r3, [pc, #232]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f023 0310 	bic.w	r3, r3, #16
 8001bca:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8001bcc:	4a37      	ldr	r2, [pc, #220]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001bce:	4b37      	ldr	r3, [pc, #220]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd6:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001bd8:	bf00      	nop
 8001bda:	4b34      	ldr	r3, [pc, #208]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f9      	beq.n	8001bda <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001be6:	4a31      	ldr	r2, [pc, #196]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8001bf2:	bf00      	nop
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f9      	bne.n	8001bf4 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8001c00:	4a2e      	ldr	r2, [pc, #184]	; (8001cbc <SystemCoreClockSetup+0x1f4>)
 8001c02:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <SystemCoreClockSetup+0x1f4>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0a:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <SystemCoreClockSetup+0x1f4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <SystemCoreClockSetup+0x1f4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8001c18:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <SystemCoreClockSetup+0x1f4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8001c1e:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <SystemCoreClockSetup+0x1f4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <SystemCoreClockSetup+0x1f4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <SystemCoreClockSetup+0x1f4>)
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001c30:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c3a:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001c3e:	4a20      	ldr	r2, [pc, #128]	; (8001cc0 <SystemCoreClockSetup+0x1f8>)
 8001c40:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8001c42:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c46:	f7ff fedf 	bl	8001a08 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001c4a:	bf00      	nop
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f9      	beq.n	8001c4c <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001c5a:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <SystemCoreClockSetup+0x1fc>)
 8001c5c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8001c5e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001c62:	f7ff fed1 	bl	8001a08 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001c66:	bf00      	nop
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f9      	beq.n	8001c68 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001c76:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <SystemCoreClockSetup+0x200>)
 8001c78:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8001c7a:	f241 7070 	movw	r0, #6000	; 0x1770
 8001c7e:	f7ff fec3 	bl	8001a08 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001c82:	bf00      	nop
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <SystemCoreClockSetup+0x1e4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f9      	beq.n	8001c84 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <SystemCoreClockSetup+0x204>)
 8001c92:	2205      	movs	r2, #5
 8001c94:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <SystemCoreClockSetup+0x1f4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8001c9c:	f000 f818 	bl	8001cd0 <SystemCoreClockUpdate>
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	50004200 	.word	0x50004200
 8001ca8:	50004400 	.word	0x50004400
 8001cac:	50004710 	.word	0x50004710
 8001cb0:	50004700 	.word	0x50004700
 8001cb4:	6b5fca6b 	.word	0x6b5fca6b
 8001cb8:	01134f00 	.word	0x01134f00
 8001cbc:	50004600 	.word	0x50004600
 8001cc0:	01074f00 	.word	0x01074f00
 8001cc4:	01044f00 	.word	0x01044f00
 8001cc8:	01034f00 	.word	0x01034f00
 8001ccc:	50004160 	.word	0x50004160

08001cd0 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <SystemCoreClockUpdate+0xc4>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d03e      	beq.n	8001d60 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <SystemCoreClockUpdate+0xc8>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8001cee:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <SystemCoreClockUpdate+0xcc>)
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	e002      	b.n	8001cfa <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8001cf4:	f000 f856 	bl	8001da4 <OSCHP_GetFrequency>
 8001cf8:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8001cfa:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <SystemCoreClockUpdate+0xc8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d020      	beq.n	8001d48 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8001d06:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <SystemCoreClockUpdate+0xc8>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001d0e:	0e1b      	lsrs	r3, r3, #24
 8001d10:	3301      	adds	r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8001d14:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <SystemCoreClockUpdate+0xc8>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	3301      	adds	r3, #1
 8001d20:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8001d22:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <SystemCoreClockUpdate+0xc8>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d2a:	0c1b      	lsrs	r3, r3, #16
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	e00d      	b.n	8001d64 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <SystemCoreClockUpdate+0xc8>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d50:	3301      	adds	r3, #1
 8001d52:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	e001      	b.n	8001d64 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <SystemCoreClockUpdate+0xcc>)
 8001d62:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <SystemCoreClockUpdate+0xc4>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d72:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <SystemCoreClockUpdate+0xc4>)
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8001d86:	4a06      	ldr	r2, [pc, #24]	; (8001da0 <SystemCoreClockUpdate+0xd0>)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6013      	str	r3, [r2, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	50004600 	.word	0x50004600
 8001d98:	50004710 	.word	0x50004710
 8001d9c:	016e3600 	.word	0x016e3600
 8001da0:	2000ffc0 	.word	0x2000ffc0

08001da4 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8001da8:	4b02      	ldr	r3, [pc, #8]	; (8001db4 <OSCHP_GetFrequency+0x10>)
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	00b71b00 	.word	0x00b71b00

08001db8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8001dc6:	7afb      	ldrb	r3, [r7, #11]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	7afb      	ldrb	r3, [r7, #11]
 8001dd0:	089b      	lsrs	r3, r3, #2
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	3204      	adds	r2, #4
 8001dda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001dde:	7afb      	ldrb	r3, [r7, #11]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	21f8      	movs	r1, #248	; 0xf8
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	ea02 0103 	and.w	r1, r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1d02      	adds	r2, r0, #4
 8001df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2103      	movs	r1, #3
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4a38      	ldr	r2, [pc, #224]	; (8001ef4 <XMC_GPIO_Init+0x13c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d003      	beq.n	8001e20 <XMC_GPIO_Init+0x68>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a37      	ldr	r2, [pc, #220]	; (8001ef8 <XMC_GPIO_Init+0x140>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d10a      	bne.n	8001e36 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e24:	7afb      	ldrb	r3, [r7, #11]
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	401a      	ands	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	661a      	str	r2, [r3, #96]	; 0x60
 8001e34:	e03c      	b.n	8001eb0 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	7afb      	ldrb	r3, [r7, #11]
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8001e42:	7afb      	ldrb	r3, [r7, #11]
 8001e44:	08db      	lsrs	r3, r3, #3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	4618      	mov	r0, r3
 8001e4a:	7afb      	ldrb	r3, [r7, #11]
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3210      	adds	r2, #16
 8001e56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e5a:	7afb      	ldrb	r3, [r7, #11]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	2107      	movs	r1, #7
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	ea02 0103 	and.w	r1, r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f100 0210 	add.w	r2, r0, #16
 8001e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8001e78:	7afb      	ldrb	r3, [r7, #11]
 8001e7a:	08db      	lsrs	r3, r3, #3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	08db      	lsrs	r3, r3, #3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3210      	adds	r2, #16
 8001e8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7a1b      	ldrb	r3, [r3, #8]
 8001e94:	4619      	mov	r1, r3
 8001e96:	7afb      	ldrb	r3, [r7, #11]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	ea42 0103 	orr.w	r1, r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f100 0210 	add.w	r2, r0, #16
 8001eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8001eb0:	7afb      	ldrb	r3, [r7, #11]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	7afb      	ldrb	r3, [r7, #11]
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3204      	adds	r2, #4
 8001ec4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	7afb      	ldrb	r3, [r7, #11]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	ea42 0103 	orr.w	r1, r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1d02      	adds	r2, r0, #4
 8001ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	48028e00 	.word	0x48028e00
 8001ef8:	48028f00 	.word	0x48028f00

08001efc <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001f0e:	b2db      	uxtb	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8001f42:	2310      	movs	r3, #16
 8001f44:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fa62 	bl	8002410 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	79db      	ldrb	r3, [r3, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	79db      	ldrb	r3, [r3, #7]
 8001f58:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4619      	mov	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 faa2 	bl	80024ac <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	799b      	ldrb	r3, [r3, #6]
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	085b      	lsrs	r3, r3, #1
 8001f74:	3301      	adds	r3, #1
 8001f76:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	791b      	ldrb	r3, [r3, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	061b      	lsls	r3, r3, #24
 8001f8e:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	795b      	ldrb	r3, [r3, #5]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	795b      	ldrb	r3, [r3, #5]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	041b      	lsls	r3, r3, #16
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	635a      	str	r2, [r3, #52]	; 0x34
 8001fb0:	e008      	b.n	8001fc4 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	791b      	ldrb	r3, [r3, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	041b      	lsls	r3, r3, #16
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001fca:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	891b      	ldrh	r3, [r3, #8]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop

08001fe8 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ffa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d110      	bne.n	8002024 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002002:	bf00      	nop
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff79 	bl	8001efc <XMC_USIC_CH_GetTransmitBufferStatus>
 800200a:	4603      	mov	r3, r0
 800200c:	2b80      	cmp	r3, #128	; 0x80
 800200e:	d0f9      	beq.n	8002004 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002010:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff81 	bl	8001f1c <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 8002022:	e003      	b.n	800202c <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 8002024:	887a      	ldrh	r2, [r7, #2]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002042:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d103      	bne.n	8002052 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	81fb      	strh	r3, [r7, #14]
 8002050:	e003      	b.n	800205a <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002058:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800205a:	89fb      	ldrh	r3, [r7, #14]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800207a:	b2db      	uxtb	r3, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop

080020ac <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f9aa 	bl	8002410 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <XMC_I2C_CH_Init+0x4c>)
 80020c0:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	889b      	ldrh	r3, [r3, #4]
 80020c6:	4619      	mov	r1, r3
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f817 	bl	80020fc <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4619      	mov	r1, r3
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f831 	bl	800213c <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f04f 32ff 	mov.w	r2, #4294967295
 80020e8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	073f0303 	.word	0x073f0303

080020fc <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 800210e:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8002112:	d109      	bne.n	8002128 <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 8002114:	887b      	ldrh	r3, [r7, #2]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8002126:	e003      	b.n	8002130 <XMC_I2C_CH_SetSlaveAddress+0x34>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8002128:	887b      	ldrh	r3, [r7, #2]
 800212a:	021a      	lsls	r2, r3, #8
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	4a17      	ldr	r2, [pc, #92]	; (80021ac <XMC_I2C_CH_SetBaudrate+0x70>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d810      	bhi.n	8002174 <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002156:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 800215e:	220a      	movs	r2, #10
 8002160:	6839      	ldr	r1, [r7, #0]
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f9a2 	bl	80024ac <XMC_USIC_CH_SetBaudrate>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d119      	bne.n	80021a2 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	73fb      	strb	r3, [r7, #15]
 8002172:	e016      	b.n	80021a2 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4a0e      	ldr	r2, [pc, #56]	; (80021b0 <XMC_I2C_CH_SetBaudrate+0x74>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d810      	bhi.n	800219e <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002180:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8002188:	2219      	movs	r2, #25
 800218a:	6839      	ldr	r1, [r7, #0]
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f98d 	bl	80024ac <XMC_USIC_CH_SetBaudrate>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d104      	bne.n	80021a2 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e001      	b.n	80021a2 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	000186a0 	.word	0x000186a0
 80021b0:	00061a80 	.word	0x00061a80

080021b4 <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
 80021c0:	4613      	mov	r3, r2
 80021c2:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 80021ce:	787b      	ldrb	r3, [r7, #1]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d103      	bne.n	80021dc <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021e2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d110      	bne.n	800220c <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80021ea:	bf00      	nop
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff3b 	bl	8002068 <XMC_USIC_CH_GetTransmitBufferStatus>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b80      	cmp	r3, #128	; 0x80
 80021f6:	d0f9      	beq.n	80021ec <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80021f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff43 	bl	8002088 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = temp;
  }
}
 800220a:	e003      	b.n	8002214 <XMC_I2C_CH_MasterStart+0x60>

    channel->TBUF[0] = temp;
  }
  else
  {
    channel->IN[0U] = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
 8002228:	4613      	mov	r3, r2
 800222a:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 800222c:	887b      	ldrh	r3, [r7, #2]
 800222e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002232:	b29b      	uxth	r3, r3
 8002234:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8002236:	787b      	ldrb	r3, [r7, #1]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d103      	bne.n	8002244 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800224a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d110      	bne.n	8002274 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002252:	bf00      	nop
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff07 	bl	8002068 <XMC_USIC_CH_GetTransmitBufferStatus>
 800225a:	4603      	mov	r3, r0
 800225c:	2b80      	cmp	r3, #128	; 0x80
 800225e:	d0f9      	beq.n	8002254 <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff0f 	bl	8002088 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = tmp;
  }
}
 8002272:	e003      	b.n	800227c <XMC_I2C_CH_MasterRepeatedStart+0x60>

    channel->TBUF[0] = tmp;
  }
  else
  {
    channel->IN[0U] = tmp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800227c:	bf00      	nop
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002292:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d111      	bne.n	80022be <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800229a:	bf00      	nop
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fee3 	bl	8002068 <XMC_USIC_CH_GetTransmitBufferStatus>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b80      	cmp	r3, #128	; 0x80
 80022a6:	d0f9      	beq.n	800229c <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80022a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff feeb 	bl	8002088 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80022b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
}
 80022bc:	e004      	b.n	80022c8 <XMC_I2C_CH_MasterStop+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80022c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022e2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d110      	bne.n	800230c <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80022ea:	bf00      	nop
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff febb 	bl	8002068 <XMC_USIC_CH_GetTransmitBufferStatus>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b80      	cmp	r3, #128	; 0x80
 80022f6:	d0f9      	beq.n	80022ec <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80022f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff fec3 	bl	8002088 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
}
 800230a:	e003      	b.n	8002314 <XMC_I2C_CH_MasterTransmit+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <XMC_I2C_CH_MasterReceiveNack>:
  }
}

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800232a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d111      	bne.n	8002356 <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002332:	bf00      	nop
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff fe97 	bl	8002068 <XMC_USIC_CH_GetTransmitBufferStatus>
 800233a:	4603      	mov	r3, r0
 800233c:	2b80      	cmp	r3, #128	; 0x80
 800233e:	d0f9      	beq.n	8002334 <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff fe9f 	bl	8002088 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
}
 8002354:	e004      	b.n	8002360 <XMC_I2C_CH_MasterReceiveNack+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f44f 7240 	mov.w	r2, #768	; 0x300
 800235c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002376:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002382:	73fb      	strb	r3, [r7, #15]
 8002384:	e003      	b.n	800238e <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800238c:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	2000ffc0 	.word	0x2000ffc0

080023b4 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	0f1b      	lsrs	r3, r3, #28
 80023c0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80023c8:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 80023d8:	4413      	add	r3, r2
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	601a      	str	r2, [r3, #0]
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	50004414 	.word	0x50004414

080023f0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80023f4:	f7ff ffd2 	bl	800239c <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80023f8:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80023fa:	4b04      	ldr	r3, [pc, #16]	; (800240c <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8002402:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8002406:	4618      	mov	r0, r3
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	50004600 	.word	0x50004600

08002410 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a1b      	ldr	r2, [pc, #108]	; (8002488 <XMC_USIC_CH_Enable+0x78>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d003      	beq.n	8002428 <XMC_USIC_CH_Enable+0x18>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a1a      	ldr	r2, [pc, #104]	; (800248c <XMC_USIC_CH_Enable+0x7c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d103      	bne.n	8002430 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8002428:	4819      	ldr	r0, [pc, #100]	; (8002490 <XMC_USIC_CH_Enable+0x80>)
 800242a:	f000 f91f 	bl	800266c <XMC_USIC_Enable>
 800242e:	e016      	b.n	800245e <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a18      	ldr	r2, [pc, #96]	; (8002494 <XMC_USIC_CH_Enable+0x84>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d003      	beq.n	8002440 <XMC_USIC_CH_Enable+0x30>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a17      	ldr	r2, [pc, #92]	; (8002498 <XMC_USIC_CH_Enable+0x88>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d103      	bne.n	8002448 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8002440:	4816      	ldr	r0, [pc, #88]	; (800249c <XMC_USIC_CH_Enable+0x8c>)
 8002442:	f000 f913 	bl	800266c <XMC_USIC_Enable>
 8002446:	e00a      	b.n	800245e <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a15      	ldr	r2, [pc, #84]	; (80024a0 <XMC_USIC_CH_Enable+0x90>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d003      	beq.n	8002458 <XMC_USIC_CH_Enable+0x48>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <XMC_USIC_CH_Enable+0x94>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d102      	bne.n	800245e <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8002458:	4813      	ldr	r0, [pc, #76]	; (80024a8 <XMC_USIC_CH_Enable+0x98>)
 800245a:	f000 f907 	bl	800266c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2203      	movs	r2, #3
 8002462:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8002464:	bf00      	nop
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f9      	beq.n	8002466 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f023 020f 	bic.w	r2, r3, #15
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40030000 	.word	0x40030000
 800248c:	40030200 	.word	0x40030200
 8002490:	40030008 	.word	0x40030008
 8002494:	48020000 	.word	0x48020000
 8002498:	48020200 	.word	0x48020200
 800249c:	48020008 	.word	0x48020008
 80024a0:	48024000 	.word	0x48024000
 80024a4:	48024200 	.word	0x48024200
 80024a8:	48024008 	.word	0x48024008

080024ac <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08e      	sub	sp, #56	; 0x38
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b63      	cmp	r3, #99	; 0x63
 80024bc:	d958      	bls.n	8002570 <XMC_USIC_CH_SetBaudrate+0xc4>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d055      	beq.n	8002570 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80024c4:	f7ff ff94 	bl	80023f0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80024cc:	fba3 2302 	umull	r2, r3, r3, r2
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4a2b      	ldr	r2, [pc, #172]	; (8002584 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 80024e0:	2301      	movs	r3, #1
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80024e4:	2301      	movs	r3, #1
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80024e8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80024ee:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80024f2:	633b      	str	r3, [r7, #48]	; 0x30
 80024f4:	e022      	b.n	800253c <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024fa:	fb02 f203 	mul.w	r2, r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	0a9b      	lsrs	r3, r3, #10
 8002510:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002518:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002520:	d209      	bcs.n	8002536 <XMC_USIC_CH_SetBaudrate+0x8a>
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	429a      	cmp	r2, r3
 8002528:	d205      	bcs.n	8002536 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	3b01      	subs	r3, #1
 800253a:	633b      	str	r3, [r7, #48]	; 0x30
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1d9      	bne.n	80024f6 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8002552:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	3a01      	subs	r2, #1
 8002558:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800255a:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	3b01      	subs	r3, #1
 8002560:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002562:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800256e:	e002      	b.n	8002576 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8002576:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800257a:	4618      	mov	r0, r3
 800257c:	3738      	adds	r7, #56	; 0x38
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	51eb851f 	.word	0x51eb851f
 8002588:	fc0080ef 	.word	0xfc0080ef

0800258c <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	4613      	mov	r3, r2
 800259a:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025a2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 80025b4:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	0211      	lsls	r1, r2, #8
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 80025be:	79fa      	ldrb	r2, [r7, #7]
 80025c0:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80025c2:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 80025c4:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	f8ffc0c0 	.word	0xf8ffc0c0

080025dc <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	4613      	mov	r3, r2
 80025ea:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80025f2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002602:	4b0a      	ldr	r3, [pc, #40]	; (800262c <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8002604:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	0211      	lsls	r1, r2, #8
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 800260e:	79fa      	ldrb	r2, [r7, #7]
 8002610:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8002612:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8002614:	4313      	orrs	r3, r2
 8002616:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	efffc0c0 	.word	0xefffc0c0

08002630 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	460b      	mov	r3, r1
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002644:	7afb      	ldrb	r3, [r7, #11]
 8002646:	2107      	movs	r1, #7
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8002650:	7afb      	ldrb	r3, [r7, #11]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8002658:	431a      	orrs	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <XMC_USIC_Enable+0x40>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d104      	bne.n	8002686 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 800267c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002680:	f7ff fe98 	bl	80023b4 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8002684:	e00e      	b.n	80026a4 <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a09      	ldr	r2, [pc, #36]	; (80026b0 <XMC_USIC_Enable+0x44>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d103      	bne.n	8002696 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800268e:	4809      	ldr	r0, [pc, #36]	; (80026b4 <XMC_USIC_Enable+0x48>)
 8002690:	f7ff fe90 	bl	80023b4 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8002694:	e006      	b.n	80026a4 <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <XMC_USIC_Enable+0x4c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d102      	bne.n	80026a4 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 800269e:	4807      	ldr	r0, [pc, #28]	; (80026bc <XMC_USIC_Enable+0x50>)
 80026a0:	f7ff fe88 	bl	80023b4 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40030008 	.word	0x40030008
 80026b0:	48020008 	.word	0x48020008
 80026b4:	10000080 	.word	0x10000080
 80026b8:	48024008 	.word	0x48024008
 80026bc:	10000100 	.word	0x10000100

080026c0 <__libc_init_array>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	4e0f      	ldr	r6, [pc, #60]	; (8002700 <__libc_init_array+0x40>)
 80026c4:	4d0f      	ldr	r5, [pc, #60]	; (8002704 <__libc_init_array+0x44>)
 80026c6:	1b76      	subs	r6, r6, r5
 80026c8:	10b6      	asrs	r6, r6, #2
 80026ca:	bf18      	it	ne
 80026cc:	2400      	movne	r4, #0
 80026ce:	d005      	beq.n	80026dc <__libc_init_array+0x1c>
 80026d0:	3401      	adds	r4, #1
 80026d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d6:	4798      	blx	r3
 80026d8:	42a6      	cmp	r6, r4
 80026da:	d1f9      	bne.n	80026d0 <__libc_init_array+0x10>
 80026dc:	4e0a      	ldr	r6, [pc, #40]	; (8002708 <__libc_init_array+0x48>)
 80026de:	4d0b      	ldr	r5, [pc, #44]	; (800270c <__libc_init_array+0x4c>)
 80026e0:	1b76      	subs	r6, r6, r5
 80026e2:	f7ff f97d 	bl	80019e0 <_init>
 80026e6:	10b6      	asrs	r6, r6, #2
 80026e8:	bf18      	it	ne
 80026ea:	2400      	movne	r4, #0
 80026ec:	d006      	beq.n	80026fc <__libc_init_array+0x3c>
 80026ee:	3401      	adds	r4, #1
 80026f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f4:	4798      	blx	r3
 80026f6:	42a6      	cmp	r6, r4
 80026f8:	d1f9      	bne.n	80026ee <__libc_init_array+0x2e>
 80026fa:	bd70      	pop	{r4, r5, r6, pc}
 80026fc:	bd70      	pop	{r4, r5, r6, pc}
 80026fe:	bf00      	nop
 8002700:	200009e0 	.word	0x200009e0
 8002704:	200009e0 	.word	0x200009e0
 8002708:	200009e0 	.word	0x200009e0
 800270c:	200009e0 	.word	0x200009e0

08002710 <memcpy>:
 8002710:	4684      	mov	ip, r0
 8002712:	ea41 0300 	orr.w	r3, r1, r0
 8002716:	f013 0303 	ands.w	r3, r3, #3
 800271a:	d16d      	bne.n	80027f8 <memcpy+0xe8>
 800271c:	3a40      	subs	r2, #64	; 0x40
 800271e:	d341      	bcc.n	80027a4 <memcpy+0x94>
 8002720:	f851 3b04 	ldr.w	r3, [r1], #4
 8002724:	f840 3b04 	str.w	r3, [r0], #4
 8002728:	f851 3b04 	ldr.w	r3, [r1], #4
 800272c:	f840 3b04 	str.w	r3, [r0], #4
 8002730:	f851 3b04 	ldr.w	r3, [r1], #4
 8002734:	f840 3b04 	str.w	r3, [r0], #4
 8002738:	f851 3b04 	ldr.w	r3, [r1], #4
 800273c:	f840 3b04 	str.w	r3, [r0], #4
 8002740:	f851 3b04 	ldr.w	r3, [r1], #4
 8002744:	f840 3b04 	str.w	r3, [r0], #4
 8002748:	f851 3b04 	ldr.w	r3, [r1], #4
 800274c:	f840 3b04 	str.w	r3, [r0], #4
 8002750:	f851 3b04 	ldr.w	r3, [r1], #4
 8002754:	f840 3b04 	str.w	r3, [r0], #4
 8002758:	f851 3b04 	ldr.w	r3, [r1], #4
 800275c:	f840 3b04 	str.w	r3, [r0], #4
 8002760:	f851 3b04 	ldr.w	r3, [r1], #4
 8002764:	f840 3b04 	str.w	r3, [r0], #4
 8002768:	f851 3b04 	ldr.w	r3, [r1], #4
 800276c:	f840 3b04 	str.w	r3, [r0], #4
 8002770:	f851 3b04 	ldr.w	r3, [r1], #4
 8002774:	f840 3b04 	str.w	r3, [r0], #4
 8002778:	f851 3b04 	ldr.w	r3, [r1], #4
 800277c:	f840 3b04 	str.w	r3, [r0], #4
 8002780:	f851 3b04 	ldr.w	r3, [r1], #4
 8002784:	f840 3b04 	str.w	r3, [r0], #4
 8002788:	f851 3b04 	ldr.w	r3, [r1], #4
 800278c:	f840 3b04 	str.w	r3, [r0], #4
 8002790:	f851 3b04 	ldr.w	r3, [r1], #4
 8002794:	f840 3b04 	str.w	r3, [r0], #4
 8002798:	f851 3b04 	ldr.w	r3, [r1], #4
 800279c:	f840 3b04 	str.w	r3, [r0], #4
 80027a0:	3a40      	subs	r2, #64	; 0x40
 80027a2:	d2bd      	bcs.n	8002720 <memcpy+0x10>
 80027a4:	3230      	adds	r2, #48	; 0x30
 80027a6:	d311      	bcc.n	80027cc <memcpy+0xbc>
 80027a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80027ac:	f840 3b04 	str.w	r3, [r0], #4
 80027b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80027b4:	f840 3b04 	str.w	r3, [r0], #4
 80027b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80027bc:	f840 3b04 	str.w	r3, [r0], #4
 80027c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80027c4:	f840 3b04 	str.w	r3, [r0], #4
 80027c8:	3a10      	subs	r2, #16
 80027ca:	d2ed      	bcs.n	80027a8 <memcpy+0x98>
 80027cc:	320c      	adds	r2, #12
 80027ce:	d305      	bcc.n	80027dc <memcpy+0xcc>
 80027d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80027d4:	f840 3b04 	str.w	r3, [r0], #4
 80027d8:	3a04      	subs	r2, #4
 80027da:	d2f9      	bcs.n	80027d0 <memcpy+0xc0>
 80027dc:	3204      	adds	r2, #4
 80027de:	d008      	beq.n	80027f2 <memcpy+0xe2>
 80027e0:	07d2      	lsls	r2, r2, #31
 80027e2:	bf1c      	itt	ne
 80027e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80027e8:	f800 3b01 	strbne.w	r3, [r0], #1
 80027ec:	d301      	bcc.n	80027f2 <memcpy+0xe2>
 80027ee:	880b      	ldrh	r3, [r1, #0]
 80027f0:	8003      	strh	r3, [r0, #0]
 80027f2:	4660      	mov	r0, ip
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	2a08      	cmp	r2, #8
 80027fa:	d313      	bcc.n	8002824 <memcpy+0x114>
 80027fc:	078b      	lsls	r3, r1, #30
 80027fe:	d08d      	beq.n	800271c <memcpy+0xc>
 8002800:	f010 0303 	ands.w	r3, r0, #3
 8002804:	d08a      	beq.n	800271c <memcpy+0xc>
 8002806:	f1c3 0304 	rsb	r3, r3, #4
 800280a:	1ad2      	subs	r2, r2, r3
 800280c:	07db      	lsls	r3, r3, #31
 800280e:	bf1c      	itt	ne
 8002810:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002814:	f800 3b01 	strbne.w	r3, [r0], #1
 8002818:	d380      	bcc.n	800271c <memcpy+0xc>
 800281a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800281e:	f820 3b02 	strh.w	r3, [r0], #2
 8002822:	e77b      	b.n	800271c <memcpy+0xc>
 8002824:	3a04      	subs	r2, #4
 8002826:	d3d9      	bcc.n	80027dc <memcpy+0xcc>
 8002828:	3a01      	subs	r2, #1
 800282a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800282e:	f800 3b01 	strb.w	r3, [r0], #1
 8002832:	d2f9      	bcs.n	8002828 <memcpy+0x118>
 8002834:	780b      	ldrb	r3, [r1, #0]
 8002836:	7003      	strb	r3, [r0, #0]
 8002838:	784b      	ldrb	r3, [r1, #1]
 800283a:	7043      	strb	r3, [r0, #1]
 800283c:	788b      	ldrb	r3, [r1, #2]
 800283e:	7083      	strb	r3, [r0, #2]
 8002840:	4660      	mov	r0, ip
 8002842:	4770      	bx	lr

08002844 <memset>:
 8002844:	b470      	push	{r4, r5, r6}
 8002846:	0784      	lsls	r4, r0, #30
 8002848:	d046      	beq.n	80028d8 <memset+0x94>
 800284a:	1e54      	subs	r4, r2, #1
 800284c:	2a00      	cmp	r2, #0
 800284e:	d041      	beq.n	80028d4 <memset+0x90>
 8002850:	b2cd      	uxtb	r5, r1
 8002852:	4603      	mov	r3, r0
 8002854:	e002      	b.n	800285c <memset+0x18>
 8002856:	1e62      	subs	r2, r4, #1
 8002858:	b3e4      	cbz	r4, 80028d4 <memset+0x90>
 800285a:	4614      	mov	r4, r2
 800285c:	f803 5b01 	strb.w	r5, [r3], #1
 8002860:	079a      	lsls	r2, r3, #30
 8002862:	d1f8      	bne.n	8002856 <memset+0x12>
 8002864:	2c03      	cmp	r4, #3
 8002866:	d92e      	bls.n	80028c6 <memset+0x82>
 8002868:	b2cd      	uxtb	r5, r1
 800286a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800286e:	2c0f      	cmp	r4, #15
 8002870:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8002874:	d919      	bls.n	80028aa <memset+0x66>
 8002876:	f103 0210 	add.w	r2, r3, #16
 800287a:	4626      	mov	r6, r4
 800287c:	3e10      	subs	r6, #16
 800287e:	2e0f      	cmp	r6, #15
 8002880:	f842 5c10 	str.w	r5, [r2, #-16]
 8002884:	f842 5c0c 	str.w	r5, [r2, #-12]
 8002888:	f842 5c08 	str.w	r5, [r2, #-8]
 800288c:	f842 5c04 	str.w	r5, [r2, #-4]
 8002890:	f102 0210 	add.w	r2, r2, #16
 8002894:	d8f2      	bhi.n	800287c <memset+0x38>
 8002896:	f1a4 0210 	sub.w	r2, r4, #16
 800289a:	f022 020f 	bic.w	r2, r2, #15
 800289e:	f004 040f 	and.w	r4, r4, #15
 80028a2:	3210      	adds	r2, #16
 80028a4:	2c03      	cmp	r4, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	d90d      	bls.n	80028c6 <memset+0x82>
 80028aa:	461e      	mov	r6, r3
 80028ac:	4622      	mov	r2, r4
 80028ae:	3a04      	subs	r2, #4
 80028b0:	2a03      	cmp	r2, #3
 80028b2:	f846 5b04 	str.w	r5, [r6], #4
 80028b6:	d8fa      	bhi.n	80028ae <memset+0x6a>
 80028b8:	1f22      	subs	r2, r4, #4
 80028ba:	f022 0203 	bic.w	r2, r2, #3
 80028be:	3204      	adds	r2, #4
 80028c0:	4413      	add	r3, r2
 80028c2:	f004 0403 	and.w	r4, r4, #3
 80028c6:	b12c      	cbz	r4, 80028d4 <memset+0x90>
 80028c8:	b2c9      	uxtb	r1, r1
 80028ca:	441c      	add	r4, r3
 80028cc:	f803 1b01 	strb.w	r1, [r3], #1
 80028d0:	42a3      	cmp	r3, r4
 80028d2:	d1fb      	bne.n	80028cc <memset+0x88>
 80028d4:	bc70      	pop	{r4, r5, r6}
 80028d6:	4770      	bx	lr
 80028d8:	4614      	mov	r4, r2
 80028da:	4603      	mov	r3, r0
 80028dc:	e7c2      	b.n	8002864 <memset+0x20>
 80028de:	bf00      	nop

080028e0 <printf>:
 80028e0:	b40f      	push	{r0, r1, r2, r3}
 80028e2:	b500      	push	{lr}
 80028e4:	4907      	ldr	r1, [pc, #28]	; (8002904 <printf+0x24>)
 80028e6:	b083      	sub	sp, #12
 80028e8:	ab04      	add	r3, sp, #16
 80028ea:	6808      	ldr	r0, [r1, #0]
 80028ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80028f0:	6881      	ldr	r1, [r0, #8]
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	f001 fcc0 	bl	8004278 <_vfprintf_r>
 80028f8:	b003      	add	sp, #12
 80028fa:	f85d eb04 	ldr.w	lr, [sp], #4
 80028fe:	b004      	add	sp, #16
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20000460 	.word	0x20000460

08002908 <_puts_r>:
 8002908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800290a:	4605      	mov	r5, r0
 800290c:	b089      	sub	sp, #36	; 0x24
 800290e:	4608      	mov	r0, r1
 8002910:	460c      	mov	r4, r1
 8002912:	f000 f875 	bl	8002a00 <strlen>
 8002916:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002918:	4f14      	ldr	r7, [pc, #80]	; (800296c <_puts_r+0x64>)
 800291a:	9404      	str	r4, [sp, #16]
 800291c:	2601      	movs	r6, #1
 800291e:	1c44      	adds	r4, r0, #1
 8002920:	a904      	add	r1, sp, #16
 8002922:	2202      	movs	r2, #2
 8002924:	9403      	str	r4, [sp, #12]
 8002926:	9005      	str	r0, [sp, #20]
 8002928:	68ac      	ldr	r4, [r5, #8]
 800292a:	9706      	str	r7, [sp, #24]
 800292c:	9607      	str	r6, [sp, #28]
 800292e:	9101      	str	r1, [sp, #4]
 8002930:	9202      	str	r2, [sp, #8]
 8002932:	b1b3      	cbz	r3, 8002962 <_puts_r+0x5a>
 8002934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002938:	049a      	lsls	r2, r3, #18
 800293a:	d406      	bmi.n	800294a <_puts_r+0x42>
 800293c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800293e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002946:	81a3      	strh	r3, [r4, #12]
 8002948:	6662      	str	r2, [r4, #100]	; 0x64
 800294a:	4621      	mov	r1, r4
 800294c:	4628      	mov	r0, r5
 800294e:	aa01      	add	r2, sp, #4
 8002950:	f004 fb10 	bl	8006f74 <__sfvwrite_r>
 8002954:	2800      	cmp	r0, #0
 8002956:	bf14      	ite	ne
 8002958:	f04f 30ff 	movne.w	r0, #4294967295
 800295c:	200a      	moveq	r0, #10
 800295e:	b009      	add	sp, #36	; 0x24
 8002960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002962:	4628      	mov	r0, r5
 8002964:	f004 f9c6 	bl	8006cf4 <__sinit>
 8002968:	e7e4      	b.n	8002934 <_puts_r+0x2c>
 800296a:	bf00      	nop
 800296c:	0800993c 	.word	0x0800993c

08002970 <puts>:
 8002970:	4b02      	ldr	r3, [pc, #8]	; (800297c <puts+0xc>)
 8002972:	4601      	mov	r1, r0
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	f7ff bfc7 	b.w	8002908 <_puts_r>
 800297a:	bf00      	nop
 800297c:	20000460 	.word	0x20000460

08002980 <sprintf>:
 8002980:	b40e      	push	{r1, r2, r3}
 8002982:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002984:	b09c      	sub	sp, #112	; 0x70
 8002986:	ab21      	add	r3, sp, #132	; 0x84
 8002988:	490f      	ldr	r1, [pc, #60]	; (80029c8 <sprintf+0x48>)
 800298a:	f853 2b04 	ldr.w	r2, [r3], #4
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	4605      	mov	r5, r0
 8002992:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8002996:	6808      	ldr	r0, [r1, #0]
 8002998:	9502      	str	r5, [sp, #8]
 800299a:	f44f 7702 	mov.w	r7, #520	; 0x208
 800299e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80029a2:	a902      	add	r1, sp, #8
 80029a4:	9506      	str	r5, [sp, #24]
 80029a6:	f8ad 7014 	strh.w	r7, [sp, #20]
 80029aa:	9404      	str	r4, [sp, #16]
 80029ac:	9407      	str	r4, [sp, #28]
 80029ae:	f8ad 6016 	strh.w	r6, [sp, #22]
 80029b2:	f000 f8e5 	bl	8002b80 <_svfprintf_r>
 80029b6:	9b02      	ldr	r3, [sp, #8]
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	b01c      	add	sp, #112	; 0x70
 80029be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80029c2:	b003      	add	sp, #12
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000460 	.word	0x20000460
	...

08002a00 <strlen>:
 8002a00:	f890 f000 	pld	[r0]
 8002a04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8002a08:	f020 0107 	bic.w	r1, r0, #7
 8002a0c:	f06f 0c00 	mvn.w	ip, #0
 8002a10:	f010 0407 	ands.w	r4, r0, #7
 8002a14:	f891 f020 	pld	[r1, #32]
 8002a18:	f040 8049 	bne.w	8002aae <strlen+0xae>
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	f06f 0007 	mvn.w	r0, #7
 8002a24:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002a28:	f891 f040 	pld	[r1, #64]	; 0x40
 8002a2c:	f100 0008 	add.w	r0, r0, #8
 8002a30:	fa82 f24c 	uadd8	r2, r2, ip
 8002a34:	faa4 f28c 	sel	r2, r4, ip
 8002a38:	fa83 f34c 	uadd8	r3, r3, ip
 8002a3c:	faa2 f38c 	sel	r3, r2, ip
 8002a40:	bb4b      	cbnz	r3, 8002a96 <strlen+0x96>
 8002a42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8002a46:	fa82 f24c 	uadd8	r2, r2, ip
 8002a4a:	f100 0008 	add.w	r0, r0, #8
 8002a4e:	faa4 f28c 	sel	r2, r4, ip
 8002a52:	fa83 f34c 	uadd8	r3, r3, ip
 8002a56:	faa2 f38c 	sel	r3, r2, ip
 8002a5a:	b9e3      	cbnz	r3, 8002a96 <strlen+0x96>
 8002a5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8002a60:	fa82 f24c 	uadd8	r2, r2, ip
 8002a64:	f100 0008 	add.w	r0, r0, #8
 8002a68:	faa4 f28c 	sel	r2, r4, ip
 8002a6c:	fa83 f34c 	uadd8	r3, r3, ip
 8002a70:	faa2 f38c 	sel	r3, r2, ip
 8002a74:	b97b      	cbnz	r3, 8002a96 <strlen+0x96>
 8002a76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8002a7a:	f101 0120 	add.w	r1, r1, #32
 8002a7e:	fa82 f24c 	uadd8	r2, r2, ip
 8002a82:	f100 0008 	add.w	r0, r0, #8
 8002a86:	faa4 f28c 	sel	r2, r4, ip
 8002a8a:	fa83 f34c 	uadd8	r3, r3, ip
 8002a8e:	faa2 f38c 	sel	r3, r2, ip
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0c6      	beq.n	8002a24 <strlen+0x24>
 8002a96:	2a00      	cmp	r2, #0
 8002a98:	bf04      	itt	eq
 8002a9a:	3004      	addeq	r0, #4
 8002a9c:	461a      	moveq	r2, r3
 8002a9e:	ba12      	rev	r2, r2
 8002aa0:	fab2 f282 	clz	r2, r2
 8002aa4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8002aa8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8002aac:	4770      	bx	lr
 8002aae:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002ab2:	f004 0503 	and.w	r5, r4, #3
 8002ab6:	f1c4 0000 	rsb	r0, r4, #0
 8002aba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8002abe:	f014 0f04 	tst.w	r4, #4
 8002ac2:	f891 f040 	pld	[r1, #64]	; 0x40
 8002ac6:	fa0c f505 	lsl.w	r5, ip, r5
 8002aca:	ea62 0205 	orn	r2, r2, r5
 8002ace:	bf1c      	itt	ne
 8002ad0:	ea63 0305 	ornne	r3, r3, r5
 8002ad4:	4662      	movne	r2, ip
 8002ad6:	f04f 0400 	mov.w	r4, #0
 8002ada:	e7a9      	b.n	8002a30 <strlen+0x30>

08002adc <strncmp>:
 8002adc:	2a00      	cmp	r2, #0
 8002ade:	d041      	beq.n	8002b64 <strncmp+0x88>
 8002ae0:	ea40 0301 	orr.w	r3, r0, r1
 8002ae4:	f013 0303 	ands.w	r3, r3, #3
 8002ae8:	b4f0      	push	{r4, r5, r6, r7}
 8002aea:	d125      	bne.n	8002b38 <strncmp+0x5c>
 8002aec:	2a03      	cmp	r2, #3
 8002aee:	d923      	bls.n	8002b38 <strncmp+0x5c>
 8002af0:	6804      	ldr	r4, [r0, #0]
 8002af2:	680d      	ldr	r5, [r1, #0]
 8002af4:	42ac      	cmp	r4, r5
 8002af6:	d11f      	bne.n	8002b38 <strncmp+0x5c>
 8002af8:	3a04      	subs	r2, #4
 8002afa:	d035      	beq.n	8002b68 <strncmp+0x8c>
 8002afc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8002b00:	ea25 0404 	bic.w	r4, r5, r4
 8002b04:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8002b08:	d131      	bne.n	8002b6e <strncmp+0x92>
 8002b0a:	1d07      	adds	r7, r0, #4
 8002b0c:	1d0d      	adds	r5, r1, #4
 8002b0e:	e00d      	b.n	8002b2c <strncmp+0x50>
 8002b10:	f857 3b04 	ldr.w	r3, [r7], #4
 8002b14:	680e      	ldr	r6, [r1, #0]
 8002b16:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 8002b1a:	42b3      	cmp	r3, r6
 8002b1c:	ea24 0403 	bic.w	r4, r4, r3
 8002b20:	d10a      	bne.n	8002b38 <strncmp+0x5c>
 8002b22:	3a04      	subs	r2, #4
 8002b24:	d020      	beq.n	8002b68 <strncmp+0x8c>
 8002b26:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8002b2a:	d123      	bne.n	8002b74 <strncmp+0x98>
 8002b2c:	2a03      	cmp	r2, #3
 8002b2e:	4629      	mov	r1, r5
 8002b30:	4638      	mov	r0, r7
 8002b32:	f105 0504 	add.w	r5, r5, #4
 8002b36:	d8eb      	bhi.n	8002b10 <strncmp+0x34>
 8002b38:	7803      	ldrb	r3, [r0, #0]
 8002b3a:	780c      	ldrb	r4, [r1, #0]
 8002b3c:	429c      	cmp	r4, r3
 8002b3e:	f102 32ff 	add.w	r2, r2, #4294967295
 8002b42:	d10c      	bne.n	8002b5e <strncmp+0x82>
 8002b44:	b182      	cbz	r2, 8002b68 <strncmp+0x8c>
 8002b46:	b914      	cbnz	r4, 8002b4e <strncmp+0x72>
 8002b48:	e016      	b.n	8002b78 <strncmp+0x9c>
 8002b4a:	b16a      	cbz	r2, 8002b68 <strncmp+0x8c>
 8002b4c:	b17b      	cbz	r3, 8002b6e <strncmp+0x92>
 8002b4e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002b52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002b56:	42a3      	cmp	r3, r4
 8002b58:	f102 32ff 	add.w	r2, r2, #4294967295
 8002b5c:	d0f5      	beq.n	8002b4a <strncmp+0x6e>
 8002b5e:	1b18      	subs	r0, r3, r4
 8002b60:	bcf0      	pop	{r4, r5, r6, r7}
 8002b62:	4770      	bx	lr
 8002b64:	4610      	mov	r0, r2
 8002b66:	4770      	bx	lr
 8002b68:	4610      	mov	r0, r2
 8002b6a:	bcf0      	pop	{r4, r5, r6, r7}
 8002b6c:	4770      	bx	lr
 8002b6e:	4618      	mov	r0, r3
 8002b70:	bcf0      	pop	{r4, r5, r6, r7}
 8002b72:	4770      	bx	lr
 8002b74:	2000      	movs	r0, #0
 8002b76:	e7f3      	b.n	8002b60 <strncmp+0x84>
 8002b78:	4620      	mov	r0, r4
 8002b7a:	e7f1      	b.n	8002b60 <strncmp+0x84>
 8002b7c:	0000      	movs	r0, r0
	...

08002b80 <_svfprintf_r>:
 8002b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b84:	b0c5      	sub	sp, #276	; 0x114
 8002b86:	460c      	mov	r4, r1
 8002b88:	9109      	str	r1, [sp, #36]	; 0x24
 8002b8a:	4615      	mov	r5, r2
 8002b8c:	930e      	str	r3, [sp, #56]	; 0x38
 8002b8e:	900a      	str	r0, [sp, #40]	; 0x28
 8002b90:	f004 fb9c 	bl	80072cc <_localeconv_r>
 8002b94:	6803      	ldr	r3, [r0, #0]
 8002b96:	9317      	str	r3, [sp, #92]	; 0x5c
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff31 	bl	8002a00 <strlen>
 8002b9e:	89a3      	ldrh	r3, [r4, #12]
 8002ba0:	9016      	str	r0, [sp, #88]	; 0x58
 8002ba2:	061e      	lsls	r6, r3, #24
 8002ba4:	d503      	bpl.n	8002bae <_svfprintf_r+0x2e>
 8002ba6:	6923      	ldr	r3, [r4, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f001 8133 	beq.w	8003e14 <_svfprintf_r+0x1294>
 8002bae:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8002e48 <_svfprintf_r+0x2c8>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002bb8:	9312      	str	r3, [sp, #72]	; 0x48
 8002bba:	9329      	str	r3, [sp, #164]	; 0xa4
 8002bbc:	9328      	str	r3, [sp, #160]	; 0xa0
 8002bbe:	9319      	str	r3, [sp, #100]	; 0x64
 8002bc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002bc2:	f8df a290 	ldr.w	sl, [pc, #656]	; 8002e54 <_svfprintf_r+0x2d4>
 8002bc6:	ab34      	add	r3, sp, #208	; 0xd0
 8002bc8:	9327      	str	r3, [sp, #156]	; 0x9c
 8002bca:	4699      	mov	r9, r3
 8002bcc:	46a8      	mov	r8, r5
 8002bce:	f898 3000 	ldrb.w	r3, [r8]
 8002bd2:	4644      	mov	r4, r8
 8002bd4:	b1eb      	cbz	r3, 8002c12 <_svfprintf_r+0x92>
 8002bd6:	2b25      	cmp	r3, #37	; 0x25
 8002bd8:	d102      	bne.n	8002be0 <_svfprintf_r+0x60>
 8002bda:	e01a      	b.n	8002c12 <_svfprintf_r+0x92>
 8002bdc:	2b25      	cmp	r3, #37	; 0x25
 8002bde:	d003      	beq.n	8002be8 <_svfprintf_r+0x68>
 8002be0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f9      	bne.n	8002bdc <_svfprintf_r+0x5c>
 8002be8:	ebc8 0504 	rsb	r5, r8, r4
 8002bec:	b18d      	cbz	r5, 8002c12 <_svfprintf_r+0x92>
 8002bee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002bf0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002bf2:	f8c9 8000 	str.w	r8, [r9]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	442a      	add	r2, r5
 8002bfa:	2b07      	cmp	r3, #7
 8002bfc:	f8c9 5004 	str.w	r5, [r9, #4]
 8002c00:	9229      	str	r2, [sp, #164]	; 0xa4
 8002c02:	9328      	str	r3, [sp, #160]	; 0xa0
 8002c04:	f300 80a6 	bgt.w	8002d54 <_svfprintf_r+0x1d4>
 8002c08:	f109 0908 	add.w	r9, r9, #8
 8002c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c0e:	442b      	add	r3, r5
 8002c10:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c12:	7823      	ldrb	r3, [r4, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80a6 	beq.w	8002d66 <_svfprintf_r+0x1e6>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002c22:	4619      	mov	r1, r3
 8002c24:	930c      	str	r3, [sp, #48]	; 0x30
 8002c26:	9307      	str	r3, [sp, #28]
 8002c28:	f04f 3bff 	mov.w	fp, #4294967295
 8002c2c:	7863      	ldrb	r3, [r4, #1]
 8002c2e:	f104 0801 	add.w	r8, r4, #1
 8002c32:	465d      	mov	r5, fp
 8002c34:	f108 0801 	add.w	r8, r8, #1
 8002c38:	f1a3 0020 	sub.w	r0, r3, #32
 8002c3c:	2858      	cmp	r0, #88	; 0x58
 8002c3e:	f200 8434 	bhi.w	80034aa <_svfprintf_r+0x92a>
 8002c42:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002c46:	03a0      	.short	0x03a0
 8002c48:	04320432 	.word	0x04320432
 8002c4c:	043203a8 	.word	0x043203a8
 8002c50:	04320432 	.word	0x04320432
 8002c54:	04320432 	.word	0x04320432
 8002c58:	03af0432 	.word	0x03af0432
 8002c5c:	043203bd 	.word	0x043203bd
 8002c60:	00e2005d 	.word	0x00e2005d
 8002c64:	01090432 	.word	0x01090432
 8002c68:	01100110 	.word	0x01100110
 8002c6c:	01100110 	.word	0x01100110
 8002c70:	01100110 	.word	0x01100110
 8002c74:	01100110 	.word	0x01100110
 8002c78:	04320110 	.word	0x04320110
 8002c7c:	04320432 	.word	0x04320432
 8002c80:	04320432 	.word	0x04320432
 8002c84:	04320432 	.word	0x04320432
 8002c88:	04320432 	.word	0x04320432
 8002c8c:	01200432 	.word	0x01200432
 8002c90:	04320286 	.word	0x04320286
 8002c94:	04320286 	.word	0x04320286
 8002c98:	04320432 	.word	0x04320432
 8002c9c:	02d40432 	.word	0x02d40432
 8002ca0:	04320432 	.word	0x04320432
 8002ca4:	043202e5 	.word	0x043202e5
 8002ca8:	04320432 	.word	0x04320432
 8002cac:	04320432 	.word	0x04320432
 8002cb0:	0432030f 	.word	0x0432030f
 8002cb4:	033d0432 	.word	0x033d0432
 8002cb8:	04320432 	.word	0x04320432
 8002cbc:	04320432 	.word	0x04320432
 8002cc0:	04320432 	.word	0x04320432
 8002cc4:	04320432 	.word	0x04320432
 8002cc8:	04320432 	.word	0x04320432
 8002ccc:	0391037e 	.word	0x0391037e
 8002cd0:	02860286 	.word	0x02860286
 8002cd4:	03990286 	.word	0x03990286
 8002cd8:	04320391 	.word	0x04320391
 8002cdc:	04070432 	.word	0x04070432
 8002ce0:	04120432 	.word	0x04120432
 8002ce4:	006400a3 	.word	0x006400a3
 8002ce8:	043203c2 	.word	0x043203c2
 8002cec:	043203c9 	.word	0x043203c9
 8002cf0:	043203ea 	.word	0x043203ea
 8002cf4:	03f20432 	.word	0x03f20432
 8002cf8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002cfa:	930e      	str	r3, [sp, #56]	; 0x38
 8002cfc:	4240      	negs	r0, r0
 8002cfe:	900c      	str	r0, [sp, #48]	; 0x30
 8002d00:	9b07      	ldr	r3, [sp, #28]
 8002d02:	f043 0304 	orr.w	r3, r3, #4
 8002d06:	9307      	str	r3, [sp, #28]
 8002d08:	f898 3000 	ldrb.w	r3, [r8]
 8002d0c:	e792      	b.n	8002c34 <_svfprintf_r+0xb4>
 8002d0e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002d10:	46ab      	mov	fp, r5
 8002d12:	2100      	movs	r1, #0
 8002d14:	6804      	ldr	r4, [r0, #0]
 8002d16:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8002d1a:	1d07      	adds	r7, r0, #4
 8002d1c:	9807      	ldr	r0, [sp, #28]
 8002d1e:	2330      	movs	r3, #48	; 0x30
 8002d20:	2278      	movs	r2, #120	; 0x78
 8002d22:	458b      	cmp	fp, r1
 8002d24:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8002d28:	f04f 0500 	mov.w	r5, #0
 8002d2c:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8002d30:	f040 0302 	orr.w	r3, r0, #2
 8002d34:	f2c0 83d6 	blt.w	80034e4 <_svfprintf_r+0x964>
 8002d38:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8002d3c:	f043 0302 	orr.w	r3, r3, #2
 8002d40:	9307      	str	r3, [sp, #28]
 8002d42:	ea54 0305 	orrs.w	r3, r4, r5
 8002d46:	970e      	str	r7, [sp, #56]	; 0x38
 8002d48:	f000 83a2 	beq.w	8003490 <_svfprintf_r+0x910>
 8002d4c:	460f      	mov	r7, r1
 8002d4e:	9211      	str	r2, [sp, #68]	; 0x44
 8002d50:	483f      	ldr	r0, [pc, #252]	; (8002e50 <_svfprintf_r+0x2d0>)
 8002d52:	e2e6      	b.n	8003322 <_svfprintf_r+0x7a2>
 8002d54:	aa27      	add	r2, sp, #156	; 0x9c
 8002d56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d5a:	f005 fbff 	bl	800855c <__ssprint_r>
 8002d5e:	b948      	cbnz	r0, 8002d74 <_svfprintf_r+0x1f4>
 8002d60:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002d64:	e752      	b.n	8002c0c <_svfprintf_r+0x8c>
 8002d66:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002d68:	b123      	cbz	r3, 8002d74 <_svfprintf_r+0x1f4>
 8002d6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002d6e:	aa27      	add	r2, sp, #156	; 0x9c
 8002d70:	f005 fbf4 	bl	800855c <__ssprint_r>
 8002d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d76:	899b      	ldrh	r3, [r3, #12]
 8002d78:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d7e:	bf18      	it	ne
 8002d80:	f04f 33ff 	movne.w	r3, #4294967295
 8002d84:	4618      	mov	r0, r3
 8002d86:	b045      	add	sp, #276	; 0x114
 8002d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d8c:	9311      	str	r3, [sp, #68]	; 0x44
 8002d8e:	46ab      	mov	fp, r5
 8002d90:	2a00      	cmp	r2, #0
 8002d92:	f041 823b 	bne.w	800420c <_svfprintf_r+0x168c>
 8002d96:	9a07      	ldr	r2, [sp, #28]
 8002d98:	f012 0320 	ands.w	r3, r2, #32
 8002d9c:	f000 8246 	beq.w	800322c <_svfprintf_r+0x6ac>
 8002da0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002da2:	3707      	adds	r7, #7
 8002da4:	f027 0307 	bic.w	r3, r7, #7
 8002da8:	2700      	movs	r7, #0
 8002daa:	f103 0108 	add.w	r1, r3, #8
 8002dae:	45bb      	cmp	fp, r7
 8002db0:	910e      	str	r1, [sp, #56]	; 0x38
 8002db2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002db6:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8002dba:	f2c0 8764 	blt.w	8003c86 <_svfprintf_r+0x1106>
 8002dbe:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8002dc2:	9307      	str	r3, [sp, #28]
 8002dc4:	ea54 0305 	orrs.w	r3, r4, r5
 8002dc8:	f000 8384 	beq.w	80034d4 <_svfprintf_r+0x954>
 8002dcc:	ae34      	add	r6, sp, #208	; 0xd0
 8002dce:	08e2      	lsrs	r2, r4, #3
 8002dd0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8002dd4:	08e9      	lsrs	r1, r5, #3
 8002dd6:	f004 0307 	and.w	r3, r4, #7
 8002dda:	460d      	mov	r5, r1
 8002ddc:	4614      	mov	r4, r2
 8002dde:	3330      	adds	r3, #48	; 0x30
 8002de0:	ea54 0205 	orrs.w	r2, r4, r5
 8002de4:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8002de8:	d1f1      	bne.n	8002dce <_svfprintf_r+0x24e>
 8002dea:	9a07      	ldr	r2, [sp, #28]
 8002dec:	07d1      	lsls	r1, r2, #31
 8002dee:	f140 808f 	bpl.w	8002f10 <_svfprintf_r+0x390>
 8002df2:	2b30      	cmp	r3, #48	; 0x30
 8002df4:	f000 808c 	beq.w	8002f10 <_svfprintf_r+0x390>
 8002df8:	2230      	movs	r2, #48	; 0x30
 8002dfa:	1e73      	subs	r3, r6, #1
 8002dfc:	f806 2c01 	strb.w	r2, [r6, #-1]
 8002e00:	aa34      	add	r2, sp, #208	; 0xd0
 8002e02:	1ad2      	subs	r2, r2, r3
 8002e04:	920d      	str	r2, [sp, #52]	; 0x34
 8002e06:	461e      	mov	r6, r3
 8002e08:	e085      	b.n	8002f16 <_svfprintf_r+0x396>
 8002e0a:	f898 3000 	ldrb.w	r3, [r8]
 8002e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e10:	f108 0401 	add.w	r4, r8, #1
 8002e14:	f001 81ec 	beq.w	80041f0 <_svfprintf_r+0x1670>
 8002e18:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002e1c:	2809      	cmp	r0, #9
 8002e1e:	bf98      	it	ls
 8002e20:	2500      	movls	r5, #0
 8002e22:	f201 818e 	bhi.w	8004142 <_svfprintf_r+0x15c2>
 8002e26:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002e2a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002e2e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8002e32:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002e36:	2809      	cmp	r0, #9
 8002e38:	d9f5      	bls.n	8002e26 <_svfprintf_r+0x2a6>
 8002e3a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8002e3e:	46a0      	mov	r8, r4
 8002e40:	e6fa      	b.n	8002c38 <_svfprintf_r+0xb8>
 8002e42:	bf00      	nop
 8002e44:	f3af 8000 	nop.w
	...
 8002e50:	08009974 	.word	0x08009974
 8002e54:	08009940 	.word	0x08009940
 8002e58:	9b07      	ldr	r3, [sp, #28]
 8002e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5e:	9307      	str	r3, [sp, #28]
 8002e60:	f898 3000 	ldrb.w	r3, [r8]
 8002e64:	e6e6      	b.n	8002c34 <_svfprintf_r+0xb4>
 8002e66:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	461c      	mov	r4, r3
 8002e6e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8002e72:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002e76:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8002e7a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002e7e:	2809      	cmp	r0, #9
 8002e80:	d9f5      	bls.n	8002e6e <_svfprintf_r+0x2ee>
 8002e82:	940c      	str	r4, [sp, #48]	; 0x30
 8002e84:	e6d8      	b.n	8002c38 <_svfprintf_r+0xb8>
 8002e86:	9311      	str	r3, [sp, #68]	; 0x44
 8002e88:	46ab      	mov	fp, r5
 8002e8a:	2a00      	cmp	r2, #0
 8002e8c:	f041 81cc 	bne.w	8004228 <_svfprintf_r+0x16a8>
 8002e90:	9b07      	ldr	r3, [sp, #28]
 8002e92:	f043 0310 	orr.w	r3, r3, #16
 8002e96:	9307      	str	r3, [sp, #28]
 8002e98:	9b07      	ldr	r3, [sp, #28]
 8002e9a:	069c      	lsls	r4, r3, #26
 8002e9c:	f140 8537 	bpl.w	800390e <_svfprintf_r+0xd8e>
 8002ea0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002ea2:	3707      	adds	r7, #7
 8002ea4:	f027 0707 	bic.w	r7, r7, #7
 8002ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eac:	f107 0108 	add.w	r1, r7, #8
 8002eb0:	910e      	str	r1, [sp, #56]	; 0x38
 8002eb2:	4614      	mov	r4, r2
 8002eb4:	461d      	mov	r5, r3
 8002eb6:	2a00      	cmp	r2, #0
 8002eb8:	f173 0300 	sbcs.w	r3, r3, #0
 8002ebc:	f2c0 8562 	blt.w	8003984 <_svfprintf_r+0xe04>
 8002ec0:	f1bb 0f00 	cmp.w	fp, #0
 8002ec4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8002ec8:	f2c0 853f 	blt.w	800394a <_svfprintf_r+0xdca>
 8002ecc:	9b07      	ldr	r3, [sp, #28]
 8002ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed2:	9307      	str	r3, [sp, #28]
 8002ed4:	ea54 0305 	orrs.w	r3, r4, r5
 8002ed8:	f000 81e8 	beq.w	80032ac <_svfprintf_r+0x72c>
 8002edc:	2d00      	cmp	r5, #0
 8002ede:	bf08      	it	eq
 8002ee0:	2c0a      	cmpeq	r4, #10
 8002ee2:	f0c0 81e8 	bcc.w	80032b6 <_svfprintf_r+0x736>
 8002ee6:	ae34      	add	r6, sp, #208	; 0xd0
 8002ee8:	4620      	mov	r0, r4
 8002eea:	4629      	mov	r1, r5
 8002eec:	220a      	movs	r2, #10
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f006 fa88 	bl	8009404 <__aeabi_uldivmod>
 8002ef4:	3230      	adds	r2, #48	; 0x30
 8002ef6:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8002efa:	4620      	mov	r0, r4
 8002efc:	4629      	mov	r1, r5
 8002efe:	2300      	movs	r3, #0
 8002f00:	220a      	movs	r2, #10
 8002f02:	f006 fa7f 	bl	8009404 <__aeabi_uldivmod>
 8002f06:	4604      	mov	r4, r0
 8002f08:	460d      	mov	r5, r1
 8002f0a:	ea54 0305 	orrs.w	r3, r4, r5
 8002f0e:	d1eb      	bne.n	8002ee8 <_svfprintf_r+0x368>
 8002f10:	ab34      	add	r3, sp, #208	; 0xd0
 8002f12:	1b9b      	subs	r3, r3, r6
 8002f14:	930d      	str	r3, [sp, #52]	; 0x34
 8002f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f18:	455b      	cmp	r3, fp
 8002f1a:	bfb8      	it	lt
 8002f1c:	465b      	movlt	r3, fp
 8002f1e:	9308      	str	r3, [sp, #32]
 8002f20:	2300      	movs	r3, #0
 8002f22:	9313      	str	r3, [sp, #76]	; 0x4c
 8002f24:	b117      	cbz	r7, 8002f2c <_svfprintf_r+0x3ac>
 8002f26:	9b08      	ldr	r3, [sp, #32]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	9308      	str	r3, [sp, #32]
 8002f2c:	9b07      	ldr	r3, [sp, #28]
 8002f2e:	f013 0302 	ands.w	r3, r3, #2
 8002f32:	930f      	str	r3, [sp, #60]	; 0x3c
 8002f34:	d002      	beq.n	8002f3c <_svfprintf_r+0x3bc>
 8002f36:	9b08      	ldr	r3, [sp, #32]
 8002f38:	3302      	adds	r3, #2
 8002f3a:	9308      	str	r3, [sp, #32]
 8002f3c:	9b07      	ldr	r3, [sp, #28]
 8002f3e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8002f42:	9310      	str	r3, [sp, #64]	; 0x40
 8002f44:	f040 82db 	bne.w	80034fe <_svfprintf_r+0x97e>
 8002f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f4a:	9a08      	ldr	r2, [sp, #32]
 8002f4c:	1a9d      	subs	r5, r3, r2
 8002f4e:	2d00      	cmp	r5, #0
 8002f50:	f340 82d5 	ble.w	80034fe <_svfprintf_r+0x97e>
 8002f54:	2d10      	cmp	r5, #16
 8002f56:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8002f58:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002f5a:	4fa8      	ldr	r7, [pc, #672]	; (80031fc <_svfprintf_r+0x67c>)
 8002f5c:	dd27      	ble.n	8002fae <_svfprintf_r+0x42e>
 8002f5e:	9618      	str	r6, [sp, #96]	; 0x60
 8002f60:	4648      	mov	r0, r9
 8002f62:	2410      	movs	r4, #16
 8002f64:	46b9      	mov	r9, r7
 8002f66:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002f68:	462f      	mov	r7, r5
 8002f6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002f6c:	e004      	b.n	8002f78 <_svfprintf_r+0x3f8>
 8002f6e:	3f10      	subs	r7, #16
 8002f70:	2f10      	cmp	r7, #16
 8002f72:	f100 0008 	add.w	r0, r0, #8
 8002f76:	dd16      	ble.n	8002fa6 <_svfprintf_r+0x426>
 8002f78:	3201      	adds	r2, #1
 8002f7a:	4ba0      	ldr	r3, [pc, #640]	; (80031fc <_svfprintf_r+0x67c>)
 8002f7c:	9228      	str	r2, [sp, #160]	; 0xa0
 8002f7e:	3110      	adds	r1, #16
 8002f80:	2a07      	cmp	r2, #7
 8002f82:	9129      	str	r1, [sp, #164]	; 0xa4
 8002f84:	e880 0018 	stmia.w	r0, {r3, r4}
 8002f88:	ddf1      	ble.n	8002f6e <_svfprintf_r+0x3ee>
 8002f8a:	aa27      	add	r2, sp, #156	; 0x9c
 8002f8c:	4631      	mov	r1, r6
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f005 fae4 	bl	800855c <__ssprint_r>
 8002f94:	2800      	cmp	r0, #0
 8002f96:	f47f aeed 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8002f9a:	3f10      	subs	r7, #16
 8002f9c:	2f10      	cmp	r7, #16
 8002f9e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8002fa0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002fa2:	a834      	add	r0, sp, #208	; 0xd0
 8002fa4:	dce8      	bgt.n	8002f78 <_svfprintf_r+0x3f8>
 8002fa6:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8002fa8:	463d      	mov	r5, r7
 8002faa:	464f      	mov	r7, r9
 8002fac:	4681      	mov	r9, r0
 8002fae:	3201      	adds	r2, #1
 8002fb0:	186c      	adds	r4, r5, r1
 8002fb2:	2a07      	cmp	r2, #7
 8002fb4:	9429      	str	r4, [sp, #164]	; 0xa4
 8002fb6:	9228      	str	r2, [sp, #160]	; 0xa0
 8002fb8:	f8c9 7000 	str.w	r7, [r9]
 8002fbc:	f8c9 5004 	str.w	r5, [r9, #4]
 8002fc0:	f300 842d 	bgt.w	800381e <_svfprintf_r+0xc9e>
 8002fc4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8002fc8:	f109 0908 	add.w	r9, r9, #8
 8002fcc:	b177      	cbz	r7, 8002fec <_svfprintf_r+0x46c>
 8002fce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	3401      	adds	r4, #1
 8002fd4:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8002fd8:	2201      	movs	r2, #1
 8002fda:	2b07      	cmp	r3, #7
 8002fdc:	9429      	str	r4, [sp, #164]	; 0xa4
 8002fde:	9328      	str	r3, [sp, #160]	; 0xa0
 8002fe0:	e889 0006 	stmia.w	r9, {r1, r2}
 8002fe4:	f300 83a5 	bgt.w	8003732 <_svfprintf_r+0xbb2>
 8002fe8:	f109 0908 	add.w	r9, r9, #8
 8002fec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002fee:	b16b      	cbz	r3, 800300c <_svfprintf_r+0x48c>
 8002ff0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	3402      	adds	r4, #2
 8002ff6:	a920      	add	r1, sp, #128	; 0x80
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	2b07      	cmp	r3, #7
 8002ffc:	9429      	str	r4, [sp, #164]	; 0xa4
 8002ffe:	9328      	str	r3, [sp, #160]	; 0xa0
 8003000:	e889 0006 	stmia.w	r9, {r1, r2}
 8003004:	f300 83a1 	bgt.w	800374a <_svfprintf_r+0xbca>
 8003008:	f109 0908 	add.w	r9, r9, #8
 800300c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800300e:	2b80      	cmp	r3, #128	; 0x80
 8003010:	f000 82e1 	beq.w	80035d6 <_svfprintf_r+0xa56>
 8003014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003016:	ebc3 070b 	rsb	r7, r3, fp
 800301a:	2f00      	cmp	r7, #0
 800301c:	dd33      	ble.n	8003086 <_svfprintf_r+0x506>
 800301e:	4a78      	ldr	r2, [pc, #480]	; (8003200 <_svfprintf_r+0x680>)
 8003020:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003022:	920f      	str	r2, [sp, #60]	; 0x3c
 8003024:	2f10      	cmp	r7, #16
 8003026:	dd22      	ble.n	800306e <_svfprintf_r+0x4ee>
 8003028:	4622      	mov	r2, r4
 800302a:	f04f 0b10 	mov.w	fp, #16
 800302e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003030:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003032:	e004      	b.n	800303e <_svfprintf_r+0x4be>
 8003034:	3f10      	subs	r7, #16
 8003036:	2f10      	cmp	r7, #16
 8003038:	f109 0908 	add.w	r9, r9, #8
 800303c:	dd16      	ble.n	800306c <_svfprintf_r+0x4ec>
 800303e:	3301      	adds	r3, #1
 8003040:	3210      	adds	r2, #16
 8003042:	2b07      	cmp	r3, #7
 8003044:	9229      	str	r2, [sp, #164]	; 0xa4
 8003046:	9328      	str	r3, [sp, #160]	; 0xa0
 8003048:	e889 0c00 	stmia.w	r9, {sl, fp}
 800304c:	ddf2      	ble.n	8003034 <_svfprintf_r+0x4b4>
 800304e:	aa27      	add	r2, sp, #156	; 0x9c
 8003050:	4621      	mov	r1, r4
 8003052:	4628      	mov	r0, r5
 8003054:	f005 fa82 	bl	800855c <__ssprint_r>
 8003058:	2800      	cmp	r0, #0
 800305a:	f47f ae8b 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 800305e:	3f10      	subs	r7, #16
 8003060:	2f10      	cmp	r7, #16
 8003062:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003064:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003066:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800306a:	dce8      	bgt.n	800303e <_svfprintf_r+0x4be>
 800306c:	4614      	mov	r4, r2
 800306e:	3301      	adds	r3, #1
 8003070:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003072:	9328      	str	r3, [sp, #160]	; 0xa0
 8003074:	443c      	add	r4, r7
 8003076:	2b07      	cmp	r3, #7
 8003078:	9429      	str	r4, [sp, #164]	; 0xa4
 800307a:	e889 0084 	stmia.w	r9, {r2, r7}
 800307e:	f300 834c 	bgt.w	800371a <_svfprintf_r+0xb9a>
 8003082:	f109 0908 	add.w	r9, r9, #8
 8003086:	9b07      	ldr	r3, [sp, #28]
 8003088:	05da      	lsls	r2, r3, #23
 800308a:	f100 823a 	bmi.w	8003502 <_svfprintf_r+0x982>
 800308e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003090:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003092:	f8c9 6000 	str.w	r6, [r9]
 8003096:	3301      	adds	r3, #1
 8003098:	440c      	add	r4, r1
 800309a:	2b07      	cmp	r3, #7
 800309c:	9429      	str	r4, [sp, #164]	; 0xa4
 800309e:	f8c9 1004 	str.w	r1, [r9, #4]
 80030a2:	9328      	str	r3, [sp, #160]	; 0xa0
 80030a4:	f300 8323 	bgt.w	80036ee <_svfprintf_r+0xb6e>
 80030a8:	f109 0908 	add.w	r9, r9, #8
 80030ac:	9b07      	ldr	r3, [sp, #28]
 80030ae:	0759      	lsls	r1, r3, #29
 80030b0:	d53f      	bpl.n	8003132 <_svfprintf_r+0x5b2>
 80030b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030b4:	9a08      	ldr	r2, [sp, #32]
 80030b6:	1a9d      	subs	r5, r3, r2
 80030b8:	2d00      	cmp	r5, #0
 80030ba:	dd3a      	ble.n	8003132 <_svfprintf_r+0x5b2>
 80030bc:	2d10      	cmp	r5, #16
 80030be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80030c0:	4f4e      	ldr	r7, [pc, #312]	; (80031fc <_svfprintf_r+0x67c>)
 80030c2:	dd23      	ble.n	800310c <_svfprintf_r+0x58c>
 80030c4:	4622      	mov	r2, r4
 80030c6:	2610      	movs	r6, #16
 80030c8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80030cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80030ce:	e004      	b.n	80030da <_svfprintf_r+0x55a>
 80030d0:	3d10      	subs	r5, #16
 80030d2:	2d10      	cmp	r5, #16
 80030d4:	f109 0908 	add.w	r9, r9, #8
 80030d8:	dd17      	ble.n	800310a <_svfprintf_r+0x58a>
 80030da:	3301      	adds	r3, #1
 80030dc:	4947      	ldr	r1, [pc, #284]	; (80031fc <_svfprintf_r+0x67c>)
 80030de:	9328      	str	r3, [sp, #160]	; 0xa0
 80030e0:	3210      	adds	r2, #16
 80030e2:	2b07      	cmp	r3, #7
 80030e4:	9229      	str	r2, [sp, #164]	; 0xa4
 80030e6:	e889 0042 	stmia.w	r9, {r1, r6}
 80030ea:	ddf1      	ble.n	80030d0 <_svfprintf_r+0x550>
 80030ec:	aa27      	add	r2, sp, #156	; 0x9c
 80030ee:	4621      	mov	r1, r4
 80030f0:	4658      	mov	r0, fp
 80030f2:	f005 fa33 	bl	800855c <__ssprint_r>
 80030f6:	2800      	cmp	r0, #0
 80030f8:	f47f ae3c 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 80030fc:	3d10      	subs	r5, #16
 80030fe:	2d10      	cmp	r5, #16
 8003100:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003102:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003104:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003108:	dce7      	bgt.n	80030da <_svfprintf_r+0x55a>
 800310a:	4614      	mov	r4, r2
 800310c:	3301      	adds	r3, #1
 800310e:	442c      	add	r4, r5
 8003110:	2b07      	cmp	r3, #7
 8003112:	9429      	str	r4, [sp, #164]	; 0xa4
 8003114:	9328      	str	r3, [sp, #160]	; 0xa0
 8003116:	f8c9 7000 	str.w	r7, [r9]
 800311a:	f8c9 5004 	str.w	r5, [r9, #4]
 800311e:	dd08      	ble.n	8003132 <_svfprintf_r+0x5b2>
 8003120:	aa27      	add	r2, sp, #156	; 0x9c
 8003122:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003124:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003126:	f005 fa19 	bl	800855c <__ssprint_r>
 800312a:	2800      	cmp	r0, #0
 800312c:	f47f ae22 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8003130:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003134:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003136:	9908      	ldr	r1, [sp, #32]
 8003138:	428a      	cmp	r2, r1
 800313a:	bfac      	ite	ge
 800313c:	189b      	addge	r3, r3, r2
 800313e:	185b      	addlt	r3, r3, r1
 8003140:	930b      	str	r3, [sp, #44]	; 0x2c
 8003142:	2c00      	cmp	r4, #0
 8003144:	f040 82df 	bne.w	8003706 <_svfprintf_r+0xb86>
 8003148:	2300      	movs	r3, #0
 800314a:	9328      	str	r3, [sp, #160]	; 0xa0
 800314c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003150:	e53d      	b.n	8002bce <_svfprintf_r+0x4e>
 8003152:	9311      	str	r3, [sp, #68]	; 0x44
 8003154:	46ab      	mov	fp, r5
 8003156:	2a00      	cmp	r2, #0
 8003158:	f041 806a 	bne.w	8004230 <_svfprintf_r+0x16b0>
 800315c:	9b07      	ldr	r3, [sp, #28]
 800315e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8003160:	071a      	lsls	r2, r3, #28
 8003162:	f107 0707 	add.w	r7, r7, #7
 8003166:	f140 8576 	bpl.w	8003c56 <_svfprintf_r+0x10d6>
 800316a:	f027 0307 	bic.w	r3, r7, #7
 800316e:	ed93 7b00 	vldr	d7, [r3]
 8003172:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003176:	f103 0208 	add.w	r2, r3, #8
 800317a:	920e      	str	r2, [sp, #56]	; 0x38
 800317c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8003180:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8003184:	911a      	str	r1, [sp, #104]	; 0x68
 8003186:	931b      	str	r3, [sp, #108]	; 0x6c
 8003188:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 800318c:	f04f 32ff 	mov.w	r2, #4294967295
 8003190:	4620      	mov	r0, r4
 8003192:	4629      	mov	r1, r5
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <_svfprintf_r+0x684>)
 8003196:	f006 f8f7 	bl	8009388 <__aeabi_dcmpun>
 800319a:	2800      	cmp	r0, #0
 800319c:	f040 84da 	bne.w	8003b54 <_svfprintf_r+0xfd4>
 80031a0:	f04f 32ff 	mov.w	r2, #4294967295
 80031a4:	4b17      	ldr	r3, [pc, #92]	; (8003204 <_svfprintf_r+0x684>)
 80031a6:	4620      	mov	r0, r4
 80031a8:	4629      	mov	r1, r5
 80031aa:	f006 f8cf 	bl	800934c <__aeabi_dcmple>
 80031ae:	2800      	cmp	r0, #0
 80031b0:	f040 84d0 	bne.w	8003b54 <_svfprintf_r+0xfd4>
 80031b4:	2200      	movs	r2, #0
 80031b6:	2300      	movs	r3, #0
 80031b8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80031bc:	f006 f8bc 	bl	8009338 <__aeabi_dcmplt>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	f040 875a 	bne.w	800407a <_svfprintf_r+0x14fa>
 80031c6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80031ca:	4e0f      	ldr	r6, [pc, #60]	; (8003208 <_svfprintf_r+0x688>)
 80031cc:	4b0f      	ldr	r3, [pc, #60]	; (800320c <_svfprintf_r+0x68c>)
 80031ce:	9907      	ldr	r1, [sp, #28]
 80031d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80031d4:	9107      	str	r1, [sp, #28]
 80031d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80031d8:	2203      	movs	r2, #3
 80031da:	f04f 0b00 	mov.w	fp, #0
 80031de:	9208      	str	r2, [sp, #32]
 80031e0:	2947      	cmp	r1, #71	; 0x47
 80031e2:	bfd8      	it	le
 80031e4:	461e      	movle	r6, r3
 80031e6:	920d      	str	r2, [sp, #52]	; 0x34
 80031e8:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 80031ec:	e69a      	b.n	8002f24 <_svfprintf_r+0x3a4>
 80031ee:	9b07      	ldr	r3, [sp, #28]
 80031f0:	f043 0308 	orr.w	r3, r3, #8
 80031f4:	9307      	str	r3, [sp, #28]
 80031f6:	f898 3000 	ldrb.w	r3, [r8]
 80031fa:	e51b      	b.n	8002c34 <_svfprintf_r+0xb4>
 80031fc:	08009994 	.word	0x08009994
 8003200:	08009940 	.word	0x08009940
 8003204:	7fefffff 	.word	0x7fefffff
 8003208:	08009954 	.word	0x08009954
 800320c:	08009950 	.word	0x08009950
 8003210:	9311      	str	r3, [sp, #68]	; 0x44
 8003212:	46ab      	mov	fp, r5
 8003214:	2a00      	cmp	r2, #0
 8003216:	f041 8017 	bne.w	8004248 <_svfprintf_r+0x16c8>
 800321a:	9b07      	ldr	r3, [sp, #28]
 800321c:	f043 0310 	orr.w	r3, r3, #16
 8003220:	9307      	str	r3, [sp, #28]
 8003222:	9a07      	ldr	r2, [sp, #28]
 8003224:	f012 0320 	ands.w	r3, r2, #32
 8003228:	f47f adba 	bne.w	8002da0 <_svfprintf_r+0x220>
 800322c:	9907      	ldr	r1, [sp, #28]
 800322e:	f011 0210 	ands.w	r2, r1, #16
 8003232:	f000 845b 	beq.w	8003aec <_svfprintf_r+0xf6c>
 8003236:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003238:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800323c:	f1bb 0f00 	cmp.w	fp, #0
 8003240:	6804      	ldr	r4, [r0, #0]
 8003242:	f100 0704 	add.w	r7, r0, #4
 8003246:	f04f 0500 	mov.w	r5, #0
 800324a:	f2c0 851b 	blt.w	8003c84 <_svfprintf_r+0x1104>
 800324e:	460a      	mov	r2, r1
 8003250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003254:	9207      	str	r2, [sp, #28]
 8003256:	ea54 0205 	orrs.w	r2, r4, r5
 800325a:	970e      	str	r7, [sp, #56]	; 0x38
 800325c:	f000 813a 	beq.w	80034d4 <_svfprintf_r+0x954>
 8003260:	461f      	mov	r7, r3
 8003262:	e5b3      	b.n	8002dcc <_svfprintf_r+0x24c>
 8003264:	9311      	str	r3, [sp, #68]	; 0x44
 8003266:	46ab      	mov	fp, r5
 8003268:	2a00      	cmp	r2, #0
 800326a:	f040 87e9 	bne.w	8004240 <_svfprintf_r+0x16c0>
 800326e:	9b07      	ldr	r3, [sp, #28]
 8003270:	f043 0310 	orr.w	r3, r3, #16
 8003274:	9307      	str	r3, [sp, #28]
 8003276:	9a07      	ldr	r2, [sp, #28]
 8003278:	f012 0320 	ands.w	r3, r2, #32
 800327c:	f000 832c 	beq.w	80038d8 <_svfprintf_r+0xd58>
 8003280:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8003282:	3707      	adds	r7, #7
 8003284:	f027 0307 	bic.w	r3, r7, #7
 8003288:	2700      	movs	r7, #0
 800328a:	f103 0108 	add.w	r1, r3, #8
 800328e:	45bb      	cmp	fp, r7
 8003290:	910e      	str	r1, [sp, #56]	; 0x38
 8003292:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003296:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800329a:	f2c0 8356 	blt.w	800394a <_svfprintf_r+0xdca>
 800329e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80032a2:	9307      	str	r3, [sp, #28]
 80032a4:	ea54 0305 	orrs.w	r3, r4, r5
 80032a8:	f47f ae18 	bne.w	8002edc <_svfprintf_r+0x35c>
 80032ac:	f1bb 0f00 	cmp.w	fp, #0
 80032b0:	f000 80f5 	beq.w	800349e <_svfprintf_r+0x91e>
 80032b4:	2400      	movs	r4, #0
 80032b6:	ae44      	add	r6, sp, #272	; 0x110
 80032b8:	3430      	adds	r4, #48	; 0x30
 80032ba:	f806 4d41 	strb.w	r4, [r6, #-65]!
 80032be:	e627      	b.n	8002f10 <_svfprintf_r+0x390>
 80032c0:	9311      	str	r3, [sp, #68]	; 0x44
 80032c2:	46ab      	mov	fp, r5
 80032c4:	2a00      	cmp	r2, #0
 80032c6:	f040 87b7 	bne.w	8004238 <_svfprintf_r+0x16b8>
 80032ca:	9b07      	ldr	r3, [sp, #28]
 80032cc:	48af      	ldr	r0, [pc, #700]	; (800358c <_svfprintf_r+0xa0c>)
 80032ce:	069d      	lsls	r5, r3, #26
 80032d0:	f140 80b5 	bpl.w	800343e <_svfprintf_r+0x8be>
 80032d4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80032d6:	3707      	adds	r7, #7
 80032d8:	f027 0307 	bic.w	r3, r7, #7
 80032dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80032e0:	f103 0208 	add.w	r2, r3, #8
 80032e4:	920e      	str	r2, [sp, #56]	; 0x38
 80032e6:	9a07      	ldr	r2, [sp, #28]
 80032e8:	f012 0701 	ands.w	r7, r2, #1
 80032ec:	f000 8239 	beq.w	8003762 <_svfprintf_r+0xbe2>
 80032f0:	ea54 0305 	orrs.w	r3, r4, r5
 80032f4:	f000 8504 	beq.w	8003d00 <_svfprintf_r+0x1180>
 80032f8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80032fc:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8003300:	2700      	movs	r7, #0
 8003302:	9a07      	ldr	r2, [sp, #28]
 8003304:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8003308:	2330      	movs	r3, #48	; 0x30
 800330a:	45bb      	cmp	fp, r7
 800330c:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8003310:	f042 0302 	orr.w	r3, r2, #2
 8003314:	f2c0 86b6 	blt.w	8004084 <_svfprintf_r+0x1504>
 8003318:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	9307      	str	r3, [sp, #28]
 8003322:	ae34      	add	r6, sp, #208	; 0xd0
 8003324:	0923      	lsrs	r3, r4, #4
 8003326:	f004 010f 	and.w	r1, r4, #15
 800332a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800332e:	092a      	lsrs	r2, r5, #4
 8003330:	461c      	mov	r4, r3
 8003332:	4615      	mov	r5, r2
 8003334:	5c43      	ldrb	r3, [r0, r1]
 8003336:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800333a:	ea54 0305 	orrs.w	r3, r4, r5
 800333e:	d1f1      	bne.n	8003324 <_svfprintf_r+0x7a4>
 8003340:	e5e6      	b.n	8002f10 <_svfprintf_r+0x390>
 8003342:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003344:	9311      	str	r3, [sp, #68]	; 0x44
 8003346:	680a      	ldr	r2, [r1, #0]
 8003348:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800334c:	2300      	movs	r3, #0
 800334e:	460a      	mov	r2, r1
 8003350:	461f      	mov	r7, r3
 8003352:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8003356:	3204      	adds	r2, #4
 8003358:	2301      	movs	r3, #1
 800335a:	9308      	str	r3, [sp, #32]
 800335c:	46bb      	mov	fp, r7
 800335e:	9713      	str	r7, [sp, #76]	; 0x4c
 8003360:	920e      	str	r2, [sp, #56]	; 0x38
 8003362:	930d      	str	r3, [sp, #52]	; 0x34
 8003364:	ae2a      	add	r6, sp, #168	; 0xa8
 8003366:	e5e1      	b.n	8002f2c <_svfprintf_r+0x3ac>
 8003368:	9311      	str	r3, [sp, #68]	; 0x44
 800336a:	46ab      	mov	fp, r5
 800336c:	2a00      	cmp	r2, #0
 800336e:	f43f ad93 	beq.w	8002e98 <_svfprintf_r+0x318>
 8003372:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003376:	e58f      	b.n	8002e98 <_svfprintf_r+0x318>
 8003378:	9b07      	ldr	r3, [sp, #28]
 800337a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800337e:	9307      	str	r3, [sp, #28]
 8003380:	f898 3000 	ldrb.w	r3, [r8]
 8003384:	e456      	b.n	8002c34 <_svfprintf_r+0xb4>
 8003386:	f898 3000 	ldrb.w	r3, [r8]
 800338a:	2900      	cmp	r1, #0
 800338c:	f47f ac52 	bne.w	8002c34 <_svfprintf_r+0xb4>
 8003390:	2201      	movs	r2, #1
 8003392:	2120      	movs	r1, #32
 8003394:	e44e      	b.n	8002c34 <_svfprintf_r+0xb4>
 8003396:	9b07      	ldr	r3, [sp, #28]
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	9307      	str	r3, [sp, #28]
 800339e:	f898 3000 	ldrb.w	r3, [r8]
 80033a2:	e447      	b.n	8002c34 <_svfprintf_r+0xb4>
 80033a4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	930c      	str	r3, [sp, #48]	; 0x30
 80033aa:	4618      	mov	r0, r3
 80033ac:	2800      	cmp	r0, #0
 80033ae:	4623      	mov	r3, r4
 80033b0:	f103 0304 	add.w	r3, r3, #4
 80033b4:	f6ff aca0 	blt.w	8002cf8 <_svfprintf_r+0x178>
 80033b8:	930e      	str	r3, [sp, #56]	; 0x38
 80033ba:	f898 3000 	ldrb.w	r3, [r8]
 80033be:	e439      	b.n	8002c34 <_svfprintf_r+0xb4>
 80033c0:	f898 3000 	ldrb.w	r3, [r8]
 80033c4:	2201      	movs	r2, #1
 80033c6:	212b      	movs	r1, #43	; 0x2b
 80033c8:	e434      	b.n	8002c34 <_svfprintf_r+0xb4>
 80033ca:	9b07      	ldr	r3, [sp, #28]
 80033cc:	f043 0320 	orr.w	r3, r3, #32
 80033d0:	9307      	str	r3, [sp, #28]
 80033d2:	f898 3000 	ldrb.w	r3, [r8]
 80033d6:	e42d      	b.n	8002c34 <_svfprintf_r+0xb4>
 80033d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033da:	9311      	str	r3, [sp, #68]	; 0x44
 80033dc:	6816      	ldr	r6, [r2, #0]
 80033de:	2400      	movs	r4, #0
 80033e0:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 80033e4:	1d17      	adds	r7, r2, #4
 80033e6:	2e00      	cmp	r6, #0
 80033e8:	f000 8621 	beq.w	800402e <_svfprintf_r+0x14ae>
 80033ec:	2d00      	cmp	r5, #0
 80033ee:	f2c0 8566 	blt.w	8003ebe <_svfprintf_r+0x133e>
 80033f2:	462a      	mov	r2, r5
 80033f4:	4621      	mov	r1, r4
 80033f6:	4630      	mov	r0, r6
 80033f8:	f004 faa2 	bl	8007940 <memchr>
 80033fc:	2800      	cmp	r0, #0
 80033fe:	f000 866b 	beq.w	80040d8 <_svfprintf_r+0x1558>
 8003402:	1b83      	subs	r3, r0, r6
 8003404:	930d      	str	r3, [sp, #52]	; 0x34
 8003406:	46a3      	mov	fp, r4
 8003408:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800340c:	970e      	str	r7, [sp, #56]	; 0x38
 800340e:	9308      	str	r3, [sp, #32]
 8003410:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8003414:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8003418:	e584      	b.n	8002f24 <_svfprintf_r+0x3a4>
 800341a:	9311      	str	r3, [sp, #68]	; 0x44
 800341c:	46ab      	mov	fp, r5
 800341e:	2a00      	cmp	r2, #0
 8003420:	f43f af29 	beq.w	8003276 <_svfprintf_r+0x6f6>
 8003424:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003428:	e725      	b.n	8003276 <_svfprintf_r+0x6f6>
 800342a:	9311      	str	r3, [sp, #68]	; 0x44
 800342c:	46ab      	mov	fp, r5
 800342e:	2a00      	cmp	r2, #0
 8003430:	f040 8716 	bne.w	8004260 <_svfprintf_r+0x16e0>
 8003434:	9b07      	ldr	r3, [sp, #28]
 8003436:	4856      	ldr	r0, [pc, #344]	; (8003590 <_svfprintf_r+0xa10>)
 8003438:	069d      	lsls	r5, r3, #26
 800343a:	f53f af4b 	bmi.w	80032d4 <_svfprintf_r+0x754>
 800343e:	9b07      	ldr	r3, [sp, #28]
 8003440:	06dc      	lsls	r4, r3, #27
 8003442:	f140 8440 	bpl.w	8003cc6 <_svfprintf_r+0x1146>
 8003446:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003448:	4613      	mov	r3, r2
 800344a:	3304      	adds	r3, #4
 800344c:	6814      	ldr	r4, [r2, #0]
 800344e:	930e      	str	r3, [sp, #56]	; 0x38
 8003450:	2500      	movs	r5, #0
 8003452:	e748      	b.n	80032e6 <_svfprintf_r+0x766>
 8003454:	f898 3000 	ldrb.w	r3, [r8]
 8003458:	2b6c      	cmp	r3, #108	; 0x6c
 800345a:	f000 84c4 	beq.w	8003de6 <_svfprintf_r+0x1266>
 800345e:	9807      	ldr	r0, [sp, #28]
 8003460:	f040 0010 	orr.w	r0, r0, #16
 8003464:	9007      	str	r0, [sp, #28]
 8003466:	f7ff bbe5 	b.w	8002c34 <_svfprintf_r+0xb4>
 800346a:	2a00      	cmp	r2, #0
 800346c:	f040 86f4 	bne.w	8004258 <_svfprintf_r+0x16d8>
 8003470:	9b07      	ldr	r3, [sp, #28]
 8003472:	069b      	lsls	r3, r3, #26
 8003474:	f140 8357 	bpl.w	8003b26 <_svfprintf_r+0xfa6>
 8003478:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800347a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800347c:	6813      	ldr	r3, [r2, #0]
 800347e:	17cd      	asrs	r5, r1, #31
 8003480:	4608      	mov	r0, r1
 8003482:	3204      	adds	r2, #4
 8003484:	4629      	mov	r1, r5
 8003486:	920e      	str	r2, [sp, #56]	; 0x38
 8003488:	e9c3 0100 	strd	r0, r1, [r3]
 800348c:	f7ff bb9f 	b.w	8002bce <_svfprintf_r+0x4e>
 8003490:	483f      	ldr	r0, [pc, #252]	; (8003590 <_svfprintf_r+0xa10>)
 8003492:	9211      	str	r2, [sp, #68]	; 0x44
 8003494:	f1bb 0f00 	cmp.w	fp, #0
 8003498:	f040 8174 	bne.w	8003784 <_svfprintf_r+0xc04>
 800349c:	465f      	mov	r7, fp
 800349e:	f04f 0b00 	mov.w	fp, #0
 80034a2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80034a6:	ae34      	add	r6, sp, #208	; 0xd0
 80034a8:	e535      	b.n	8002f16 <_svfprintf_r+0x396>
 80034aa:	9311      	str	r3, [sp, #68]	; 0x44
 80034ac:	2a00      	cmp	r2, #0
 80034ae:	f040 86cf 	bne.w	8004250 <_svfprintf_r+0x16d0>
 80034b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80034b4:	2a00      	cmp	r2, #0
 80034b6:	f43f ac56 	beq.w	8002d66 <_svfprintf_r+0x1e6>
 80034ba:	2300      	movs	r3, #0
 80034bc:	2101      	movs	r1, #1
 80034be:	461f      	mov	r7, r3
 80034c0:	9108      	str	r1, [sp, #32]
 80034c2:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 80034c6:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80034ca:	469b      	mov	fp, r3
 80034cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80034ce:	910d      	str	r1, [sp, #52]	; 0x34
 80034d0:	ae2a      	add	r6, sp, #168	; 0xa8
 80034d2:	e52b      	b.n	8002f2c <_svfprintf_r+0x3ac>
 80034d4:	f1bb 0f00 	cmp.w	fp, #0
 80034d8:	f000 8616 	beq.w	8004108 <_svfprintf_r+0x1588>
 80034dc:	2700      	movs	r7, #0
 80034de:	2400      	movs	r4, #0
 80034e0:	2500      	movs	r5, #0
 80034e2:	e473      	b.n	8002dcc <_svfprintf_r+0x24c>
 80034e4:	482a      	ldr	r0, [pc, #168]	; (8003590 <_svfprintf_r+0xa10>)
 80034e6:	9307      	str	r3, [sp, #28]
 80034e8:	9211      	str	r2, [sp, #68]	; 0x44
 80034ea:	ea54 0305 	orrs.w	r3, r4, r5
 80034ee:	970e      	str	r7, [sp, #56]	; 0x38
 80034f0:	f04f 0700 	mov.w	r7, #0
 80034f4:	f47f af15 	bne.w	8003322 <_svfprintf_r+0x7a2>
 80034f8:	2400      	movs	r4, #0
 80034fa:	2500      	movs	r5, #0
 80034fc:	e711      	b.n	8003322 <_svfprintf_r+0x7a2>
 80034fe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003500:	e564      	b.n	8002fcc <_svfprintf_r+0x44c>
 8003502:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003504:	2b65      	cmp	r3, #101	; 0x65
 8003506:	f340 80aa 	ble.w	800365e <_svfprintf_r+0xade>
 800350a:	2200      	movs	r2, #0
 800350c:	2300      	movs	r3, #0
 800350e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8003512:	f005 ff07 	bl	8009324 <__aeabi_dcmpeq>
 8003516:	2800      	cmp	r0, #0
 8003518:	f000 8136 	beq.w	8003788 <_svfprintf_r+0xc08>
 800351c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800351e:	4a1d      	ldr	r2, [pc, #116]	; (8003594 <_svfprintf_r+0xa14>)
 8003520:	f8c9 2000 	str.w	r2, [r9]
 8003524:	3301      	adds	r3, #1
 8003526:	3401      	adds	r4, #1
 8003528:	2201      	movs	r2, #1
 800352a:	2b07      	cmp	r3, #7
 800352c:	9429      	str	r4, [sp, #164]	; 0xa4
 800352e:	9328      	str	r3, [sp, #160]	; 0xa0
 8003530:	f8c9 2004 	str.w	r2, [r9, #4]
 8003534:	f300 83f0 	bgt.w	8003d18 <_svfprintf_r+0x1198>
 8003538:	f109 0908 	add.w	r9, r9, #8
 800353c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800353e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003540:	4293      	cmp	r3, r2
 8003542:	db03      	blt.n	800354c <_svfprintf_r+0x9cc>
 8003544:	9b07      	ldr	r3, [sp, #28]
 8003546:	07db      	lsls	r3, r3, #31
 8003548:	f57f adb0 	bpl.w	80030ac <_svfprintf_r+0x52c>
 800354c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800354e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003550:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003552:	f8c9 2000 	str.w	r2, [r9]
 8003556:	3301      	adds	r3, #1
 8003558:	440c      	add	r4, r1
 800355a:	2b07      	cmp	r3, #7
 800355c:	9429      	str	r4, [sp, #164]	; 0xa4
 800355e:	f8c9 1004 	str.w	r1, [r9, #4]
 8003562:	9328      	str	r3, [sp, #160]	; 0xa0
 8003564:	f300 8449 	bgt.w	8003dfa <_svfprintf_r+0x127a>
 8003568:	f109 0908 	add.w	r9, r9, #8
 800356c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800356e:	1e5d      	subs	r5, r3, #1
 8003570:	2d00      	cmp	r5, #0
 8003572:	f77f ad9b 	ble.w	80030ac <_svfprintf_r+0x52c>
 8003576:	4a08      	ldr	r2, [pc, #32]	; (8003598 <_svfprintf_r+0xa18>)
 8003578:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800357a:	920f      	str	r2, [sp, #60]	; 0x3c
 800357c:	2d10      	cmp	r5, #16
 800357e:	f340 81e9 	ble.w	8003954 <_svfprintf_r+0xdd4>
 8003582:	2610      	movs	r6, #16
 8003584:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003586:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800358a:	e00d      	b.n	80035a8 <_svfprintf_r+0xa28>
 800358c:	08009960 	.word	0x08009960
 8003590:	08009974 	.word	0x08009974
 8003594:	08009990 	.word	0x08009990
 8003598:	08009940 	.word	0x08009940
 800359c:	f109 0908 	add.w	r9, r9, #8
 80035a0:	3d10      	subs	r5, #16
 80035a2:	2d10      	cmp	r5, #16
 80035a4:	f340 81d6 	ble.w	8003954 <_svfprintf_r+0xdd4>
 80035a8:	3301      	adds	r3, #1
 80035aa:	3410      	adds	r4, #16
 80035ac:	2b07      	cmp	r3, #7
 80035ae:	9429      	str	r4, [sp, #164]	; 0xa4
 80035b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80035b2:	f8c9 a000 	str.w	sl, [r9]
 80035b6:	f8c9 6004 	str.w	r6, [r9, #4]
 80035ba:	ddef      	ble.n	800359c <_svfprintf_r+0xa1c>
 80035bc:	aa27      	add	r2, sp, #156	; 0x9c
 80035be:	4659      	mov	r1, fp
 80035c0:	4638      	mov	r0, r7
 80035c2:	f004 ffcb 	bl	800855c <__ssprint_r>
 80035c6:	2800      	cmp	r0, #0
 80035c8:	f47f abd4 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 80035cc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80035ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80035d0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80035d4:	e7e4      	b.n	80035a0 <_svfprintf_r+0xa20>
 80035d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80035d8:	9a08      	ldr	r2, [sp, #32]
 80035da:	1a9f      	subs	r7, r3, r2
 80035dc:	2f00      	cmp	r7, #0
 80035de:	f77f ad19 	ble.w	8003014 <_svfprintf_r+0x494>
 80035e2:	4abc      	ldr	r2, [pc, #752]	; (80038d4 <_svfprintf_r+0xd54>)
 80035e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80035e6:	920f      	str	r2, [sp, #60]	; 0x3c
 80035e8:	2f10      	cmp	r7, #16
 80035ea:	dd2b      	ble.n	8003644 <_svfprintf_r+0xac4>
 80035ec:	464a      	mov	r2, r9
 80035ee:	4621      	mov	r1, r4
 80035f0:	46b9      	mov	r9, r7
 80035f2:	2510      	movs	r5, #16
 80035f4:	4637      	mov	r7, r6
 80035f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80035f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80035fa:	e006      	b.n	800360a <_svfprintf_r+0xa8a>
 80035fc:	f1a9 0910 	sub.w	r9, r9, #16
 8003600:	f1b9 0f10 	cmp.w	r9, #16
 8003604:	f102 0208 	add.w	r2, r2, #8
 8003608:	dd18      	ble.n	800363c <_svfprintf_r+0xabc>
 800360a:	3301      	adds	r3, #1
 800360c:	3110      	adds	r1, #16
 800360e:	2b07      	cmp	r3, #7
 8003610:	9129      	str	r1, [sp, #164]	; 0xa4
 8003612:	9328      	str	r3, [sp, #160]	; 0xa0
 8003614:	f8c2 a000 	str.w	sl, [r2]
 8003618:	6055      	str	r5, [r2, #4]
 800361a:	ddef      	ble.n	80035fc <_svfprintf_r+0xa7c>
 800361c:	aa27      	add	r2, sp, #156	; 0x9c
 800361e:	4631      	mov	r1, r6
 8003620:	4620      	mov	r0, r4
 8003622:	f004 ff9b 	bl	800855c <__ssprint_r>
 8003626:	2800      	cmp	r0, #0
 8003628:	f47f aba4 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 800362c:	f1a9 0910 	sub.w	r9, r9, #16
 8003630:	f1b9 0f10 	cmp.w	r9, #16
 8003634:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8003636:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003638:	aa34      	add	r2, sp, #208	; 0xd0
 800363a:	dce6      	bgt.n	800360a <_svfprintf_r+0xa8a>
 800363c:	463e      	mov	r6, r7
 800363e:	460c      	mov	r4, r1
 8003640:	464f      	mov	r7, r9
 8003642:	4691      	mov	r9, r2
 8003644:	3301      	adds	r3, #1
 8003646:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003648:	9328      	str	r3, [sp, #160]	; 0xa0
 800364a:	443c      	add	r4, r7
 800364c:	2b07      	cmp	r3, #7
 800364e:	9429      	str	r4, [sp, #164]	; 0xa4
 8003650:	e889 0084 	stmia.w	r9, {r2, r7}
 8003654:	f300 823d 	bgt.w	8003ad2 <_svfprintf_r+0xf52>
 8003658:	f109 0908 	add.w	r9, r9, #8
 800365c:	e4da      	b.n	8003014 <_svfprintf_r+0x494>
 800365e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003660:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8003662:	2b01      	cmp	r3, #1
 8003664:	f340 820a 	ble.w	8003a7c <_svfprintf_r+0xefc>
 8003668:	3501      	adds	r5, #1
 800366a:	3401      	adds	r4, #1
 800366c:	2301      	movs	r3, #1
 800366e:	2d07      	cmp	r5, #7
 8003670:	9429      	str	r4, [sp, #164]	; 0xa4
 8003672:	9528      	str	r5, [sp, #160]	; 0xa0
 8003674:	f8c9 6000 	str.w	r6, [r9]
 8003678:	f8c9 3004 	str.w	r3, [r9, #4]
 800367c:	f300 820f 	bgt.w	8003a9e <_svfprintf_r+0xf1e>
 8003680:	f109 0908 	add.w	r9, r9, #8
 8003684:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003686:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003688:	f8c9 3000 	str.w	r3, [r9]
 800368c:	3501      	adds	r5, #1
 800368e:	4414      	add	r4, r2
 8003690:	2d07      	cmp	r5, #7
 8003692:	9429      	str	r4, [sp, #164]	; 0xa4
 8003694:	9528      	str	r5, [sp, #160]	; 0xa0
 8003696:	f8c9 2004 	str.w	r2, [r9, #4]
 800369a:	f300 820d 	bgt.w	8003ab8 <_svfprintf_r+0xf38>
 800369e:	f109 0908 	add.w	r9, r9, #8
 80036a2:	2300      	movs	r3, #0
 80036a4:	2200      	movs	r2, #0
 80036a6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80036aa:	f005 fe3b 	bl	8009324 <__aeabi_dcmpeq>
 80036ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036b0:	2800      	cmp	r0, #0
 80036b2:	f040 80c3 	bne.w	800383c <_svfprintf_r+0xcbc>
 80036b6:	3b01      	subs	r3, #1
 80036b8:	3501      	adds	r5, #1
 80036ba:	3601      	adds	r6, #1
 80036bc:	441c      	add	r4, r3
 80036be:	2d07      	cmp	r5, #7
 80036c0:	9528      	str	r5, [sp, #160]	; 0xa0
 80036c2:	9429      	str	r4, [sp, #164]	; 0xa4
 80036c4:	f8c9 6000 	str.w	r6, [r9]
 80036c8:	f8c9 3004 	str.w	r3, [r9, #4]
 80036cc:	f300 80f5 	bgt.w	80038ba <_svfprintf_r+0xd3a>
 80036d0:	f109 0908 	add.w	r9, r9, #8
 80036d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80036d6:	f8c9 2004 	str.w	r2, [r9, #4]
 80036da:	3501      	adds	r5, #1
 80036dc:	4414      	add	r4, r2
 80036de:	ab23      	add	r3, sp, #140	; 0x8c
 80036e0:	2d07      	cmp	r5, #7
 80036e2:	9429      	str	r4, [sp, #164]	; 0xa4
 80036e4:	9528      	str	r5, [sp, #160]	; 0xa0
 80036e6:	f8c9 3000 	str.w	r3, [r9]
 80036ea:	f77f acdd 	ble.w	80030a8 <_svfprintf_r+0x528>
 80036ee:	aa27      	add	r2, sp, #156	; 0x9c
 80036f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80036f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80036f4:	f004 ff32 	bl	800855c <__ssprint_r>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	f47f ab3b 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 80036fe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003700:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003704:	e4d2      	b.n	80030ac <_svfprintf_r+0x52c>
 8003706:	aa27      	add	r2, sp, #156	; 0x9c
 8003708:	9909      	ldr	r1, [sp, #36]	; 0x24
 800370a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800370c:	f004 ff26 	bl	800855c <__ssprint_r>
 8003710:	2800      	cmp	r0, #0
 8003712:	f43f ad19 	beq.w	8003148 <_svfprintf_r+0x5c8>
 8003716:	f7ff bb2d 	b.w	8002d74 <_svfprintf_r+0x1f4>
 800371a:	aa27      	add	r2, sp, #156	; 0x9c
 800371c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800371e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003720:	f004 ff1c 	bl	800855c <__ssprint_r>
 8003724:	2800      	cmp	r0, #0
 8003726:	f47f ab25 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 800372a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800372c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003730:	e4a9      	b.n	8003086 <_svfprintf_r+0x506>
 8003732:	aa27      	add	r2, sp, #156	; 0x9c
 8003734:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003736:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003738:	f004 ff10 	bl	800855c <__ssprint_r>
 800373c:	2800      	cmp	r0, #0
 800373e:	f47f ab19 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8003742:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003744:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003748:	e450      	b.n	8002fec <_svfprintf_r+0x46c>
 800374a:	aa27      	add	r2, sp, #156	; 0x9c
 800374c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800374e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003750:	f004 ff04 	bl	800855c <__ssprint_r>
 8003754:	2800      	cmp	r0, #0
 8003756:	f47f ab0d 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 800375a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800375c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003760:	e454      	b.n	800300c <_svfprintf_r+0x48c>
 8003762:	f1bb 0f00 	cmp.w	fp, #0
 8003766:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800376a:	f2c0 82e1 	blt.w	8003d30 <_svfprintf_r+0x11b0>
 800376e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8003772:	9307      	str	r3, [sp, #28]
 8003774:	ea54 0305 	orrs.w	r3, r4, r5
 8003778:	f47f add3 	bne.w	8003322 <_svfprintf_r+0x7a2>
 800377c:	f1bb 0f00 	cmp.w	fp, #0
 8003780:	f43f ae8c 	beq.w	800349c <_svfprintf_r+0x91c>
 8003784:	2700      	movs	r7, #0
 8003786:	e6b7      	b.n	80034f8 <_svfprintf_r+0x978>
 8003788:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800378a:	2d00      	cmp	r5, #0
 800378c:	f340 82d3 	ble.w	8003d36 <_svfprintf_r+0x11b6>
 8003790:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003792:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003794:	4293      	cmp	r3, r2
 8003796:	bfa8      	it	ge
 8003798:	4613      	movge	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	461d      	mov	r5, r3
 800379e:	dd0d      	ble.n	80037bc <_svfprintf_r+0xc3c>
 80037a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80037a2:	f8c9 6000 	str.w	r6, [r9]
 80037a6:	3301      	adds	r3, #1
 80037a8:	442c      	add	r4, r5
 80037aa:	2b07      	cmp	r3, #7
 80037ac:	9429      	str	r4, [sp, #164]	; 0xa4
 80037ae:	f8c9 5004 	str.w	r5, [r9, #4]
 80037b2:	9328      	str	r3, [sp, #160]	; 0xa0
 80037b4:	f300 83ae 	bgt.w	8003f14 <_svfprintf_r+0x1394>
 80037b8:	f109 0908 	add.w	r9, r9, #8
 80037bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80037be:	2d00      	cmp	r5, #0
 80037c0:	bfa8      	it	ge
 80037c2:	1b5b      	subge	r3, r3, r5
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	461d      	mov	r5, r3
 80037c8:	f340 80f8 	ble.w	80039bc <_svfprintf_r+0xe3c>
 80037cc:	4a41      	ldr	r2, [pc, #260]	; (80038d4 <_svfprintf_r+0xd54>)
 80037ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80037d0:	920f      	str	r2, [sp, #60]	; 0x3c
 80037d2:	2d10      	cmp	r5, #16
 80037d4:	f340 8285 	ble.w	8003ce2 <_svfprintf_r+0x1162>
 80037d8:	4622      	mov	r2, r4
 80037da:	2710      	movs	r7, #16
 80037dc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80037e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80037e2:	e005      	b.n	80037f0 <_svfprintf_r+0xc70>
 80037e4:	f109 0908 	add.w	r9, r9, #8
 80037e8:	3d10      	subs	r5, #16
 80037ea:	2d10      	cmp	r5, #16
 80037ec:	f340 8278 	ble.w	8003ce0 <_svfprintf_r+0x1160>
 80037f0:	3301      	adds	r3, #1
 80037f2:	3210      	adds	r2, #16
 80037f4:	2b07      	cmp	r3, #7
 80037f6:	9229      	str	r2, [sp, #164]	; 0xa4
 80037f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80037fa:	f8c9 a000 	str.w	sl, [r9]
 80037fe:	f8c9 7004 	str.w	r7, [r9, #4]
 8003802:	ddef      	ble.n	80037e4 <_svfprintf_r+0xc64>
 8003804:	aa27      	add	r2, sp, #156	; 0x9c
 8003806:	4621      	mov	r1, r4
 8003808:	4658      	mov	r0, fp
 800380a:	f004 fea7 	bl	800855c <__ssprint_r>
 800380e:	2800      	cmp	r0, #0
 8003810:	f47f aab0 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8003814:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003816:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003818:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800381c:	e7e4      	b.n	80037e8 <_svfprintf_r+0xc68>
 800381e:	aa27      	add	r2, sp, #156	; 0x9c
 8003820:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003822:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003824:	f004 fe9a 	bl	800855c <__ssprint_r>
 8003828:	2800      	cmp	r0, #0
 800382a:	f47f aaa3 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 800382e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8003832:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003834:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003838:	f7ff bbc8 	b.w	8002fcc <_svfprintf_r+0x44c>
 800383c:	1e5e      	subs	r6, r3, #1
 800383e:	2e00      	cmp	r6, #0
 8003840:	f77f af48 	ble.w	80036d4 <_svfprintf_r+0xb54>
 8003844:	4b23      	ldr	r3, [pc, #140]	; (80038d4 <_svfprintf_r+0xd54>)
 8003846:	930f      	str	r3, [sp, #60]	; 0x3c
 8003848:	2e10      	cmp	r6, #16
 800384a:	dd2c      	ble.n	80038a6 <_svfprintf_r+0xd26>
 800384c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8003850:	2710      	movs	r7, #16
 8003852:	46b0      	mov	r8, r6
 8003854:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8003858:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800385a:	e006      	b.n	800386a <_svfprintf_r+0xcea>
 800385c:	f1a8 0810 	sub.w	r8, r8, #16
 8003860:	f1b8 0f10 	cmp.w	r8, #16
 8003864:	f109 0908 	add.w	r9, r9, #8
 8003868:	dd1a      	ble.n	80038a0 <_svfprintf_r+0xd20>
 800386a:	3501      	adds	r5, #1
 800386c:	3410      	adds	r4, #16
 800386e:	2d07      	cmp	r5, #7
 8003870:	9429      	str	r4, [sp, #164]	; 0xa4
 8003872:	9528      	str	r5, [sp, #160]	; 0xa0
 8003874:	f8c9 a000 	str.w	sl, [r9]
 8003878:	f8c9 7004 	str.w	r7, [r9, #4]
 800387c:	ddee      	ble.n	800385c <_svfprintf_r+0xcdc>
 800387e:	aa27      	add	r2, sp, #156	; 0x9c
 8003880:	4631      	mov	r1, r6
 8003882:	4658      	mov	r0, fp
 8003884:	f004 fe6a 	bl	800855c <__ssprint_r>
 8003888:	2800      	cmp	r0, #0
 800388a:	f47f aa73 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 800388e:	f1a8 0810 	sub.w	r8, r8, #16
 8003892:	f1b8 0f10 	cmp.w	r8, #16
 8003896:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003898:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800389a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800389e:	dce4      	bgt.n	800386a <_svfprintf_r+0xcea>
 80038a0:	4646      	mov	r6, r8
 80038a2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80038a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038a8:	3501      	adds	r5, #1
 80038aa:	4434      	add	r4, r6
 80038ac:	2d07      	cmp	r5, #7
 80038ae:	9429      	str	r4, [sp, #164]	; 0xa4
 80038b0:	9528      	str	r5, [sp, #160]	; 0xa0
 80038b2:	e889 0048 	stmia.w	r9, {r3, r6}
 80038b6:	f77f af0b 	ble.w	80036d0 <_svfprintf_r+0xb50>
 80038ba:	aa27      	add	r2, sp, #156	; 0x9c
 80038bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80038c0:	f004 fe4c 	bl	800855c <__ssprint_r>
 80038c4:	2800      	cmp	r0, #0
 80038c6:	f47f aa55 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 80038ca:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80038cc:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80038ce:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80038d2:	e6ff      	b.n	80036d4 <_svfprintf_r+0xb54>
 80038d4:	08009940 	.word	0x08009940
 80038d8:	9907      	ldr	r1, [sp, #28]
 80038da:	f011 0210 	ands.w	r2, r1, #16
 80038de:	f000 81d5 	beq.w	8003c8c <_svfprintf_r+0x110c>
 80038e2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80038e4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80038e8:	f1bb 0f00 	cmp.w	fp, #0
 80038ec:	6804      	ldr	r4, [r0, #0]
 80038ee:	f100 0704 	add.w	r7, r0, #4
 80038f2:	f04f 0500 	mov.w	r5, #0
 80038f6:	db26      	blt.n	8003946 <_svfprintf_r+0xdc6>
 80038f8:	460a      	mov	r2, r1
 80038fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038fe:	9207      	str	r2, [sp, #28]
 8003900:	ea54 0205 	orrs.w	r2, r4, r5
 8003904:	970e      	str	r7, [sp, #56]	; 0x38
 8003906:	461f      	mov	r7, r3
 8003908:	f47f aae8 	bne.w	8002edc <_svfprintf_r+0x35c>
 800390c:	e4ce      	b.n	80032ac <_svfprintf_r+0x72c>
 800390e:	9b07      	ldr	r3, [sp, #28]
 8003910:	06d8      	lsls	r0, r3, #27
 8003912:	d42a      	bmi.n	800396a <_svfprintf_r+0xdea>
 8003914:	9b07      	ldr	r3, [sp, #28]
 8003916:	0659      	lsls	r1, r3, #25
 8003918:	d527      	bpl.n	800396a <_svfprintf_r+0xdea>
 800391a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800391c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8003920:	3104      	adds	r1, #4
 8003922:	17e5      	asrs	r5, r4, #31
 8003924:	4622      	mov	r2, r4
 8003926:	462b      	mov	r3, r5
 8003928:	910e      	str	r1, [sp, #56]	; 0x38
 800392a:	f7ff bac4 	b.w	8002eb6 <_svfprintf_r+0x336>
 800392e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003930:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8003934:	f1bb 0f00 	cmp.w	fp, #0
 8003938:	680c      	ldr	r4, [r1, #0]
 800393a:	f101 0704 	add.w	r7, r1, #4
 800393e:	f04f 0500 	mov.w	r5, #0
 8003942:	f280 824e 	bge.w	8003de2 <_svfprintf_r+0x1262>
 8003946:	970e      	str	r7, [sp, #56]	; 0x38
 8003948:	461f      	mov	r7, r3
 800394a:	ea54 0305 	orrs.w	r3, r4, r5
 800394e:	f47f aac5 	bne.w	8002edc <_svfprintf_r+0x35c>
 8003952:	e4b0      	b.n	80032b6 <_svfprintf_r+0x736>
 8003954:	3301      	adds	r3, #1
 8003956:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003958:	9328      	str	r3, [sp, #160]	; 0xa0
 800395a:	442c      	add	r4, r5
 800395c:	2b07      	cmp	r3, #7
 800395e:	9429      	str	r4, [sp, #164]	; 0xa4
 8003960:	e889 0024 	stmia.w	r9, {r2, r5}
 8003964:	f77f aba0 	ble.w	80030a8 <_svfprintf_r+0x528>
 8003968:	e6c1      	b.n	80036ee <_svfprintf_r+0xb6e>
 800396a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800396c:	6814      	ldr	r4, [r2, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	3304      	adds	r3, #4
 8003972:	17e5      	asrs	r5, r4, #31
 8003974:	4622      	mov	r2, r4
 8003976:	930e      	str	r3, [sp, #56]	; 0x38
 8003978:	2a00      	cmp	r2, #0
 800397a:	462b      	mov	r3, r5
 800397c:	f173 0300 	sbcs.w	r3, r3, #0
 8003980:	f6bf aa9e 	bge.w	8002ec0 <_svfprintf_r+0x340>
 8003984:	4264      	negs	r4, r4
 8003986:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800398a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800398e:	f1bb 0f00 	cmp.w	fp, #0
 8003992:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8003996:	f6ff aaa1 	blt.w	8002edc <_svfprintf_r+0x35c>
 800399a:	9b07      	ldr	r3, [sp, #28]
 800399c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a0:	9307      	str	r3, [sp, #28]
 80039a2:	f7ff ba9b 	b.w	8002edc <_svfprintf_r+0x35c>
 80039a6:	aa27      	add	r2, sp, #156	; 0x9c
 80039a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80039aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80039ac:	f004 fdd6 	bl	800855c <__ssprint_r>
 80039b0:	2800      	cmp	r0, #0
 80039b2:	f47f a9df 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 80039b6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80039b8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80039bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80039be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039c0:	4432      	add	r2, r6
 80039c2:	4617      	mov	r7, r2
 80039c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80039c6:	4293      	cmp	r3, r2
 80039c8:	db47      	blt.n	8003a5a <_svfprintf_r+0xeda>
 80039ca:	9a07      	ldr	r2, [sp, #28]
 80039cc:	07d5      	lsls	r5, r2, #31
 80039ce:	d444      	bmi.n	8003a5a <_svfprintf_r+0xeda>
 80039d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80039d2:	440e      	add	r6, r1
 80039d4:	1bf5      	subs	r5, r6, r7
 80039d6:	1acb      	subs	r3, r1, r3
 80039d8:	429d      	cmp	r5, r3
 80039da:	bfa8      	it	ge
 80039dc:	461d      	movge	r5, r3
 80039de:	2d00      	cmp	r5, #0
 80039e0:	462e      	mov	r6, r5
 80039e2:	dd0d      	ble.n	8003a00 <_svfprintf_r+0xe80>
 80039e4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80039e6:	f8c9 7000 	str.w	r7, [r9]
 80039ea:	3201      	adds	r2, #1
 80039ec:	442c      	add	r4, r5
 80039ee:	2a07      	cmp	r2, #7
 80039f0:	9429      	str	r4, [sp, #164]	; 0xa4
 80039f2:	f8c9 5004 	str.w	r5, [r9, #4]
 80039f6:	9228      	str	r2, [sp, #160]	; 0xa0
 80039f8:	f300 830a 	bgt.w	8004010 <_svfprintf_r+0x1490>
 80039fc:	f109 0908 	add.w	r9, r9, #8
 8003a00:	2e00      	cmp	r6, #0
 8003a02:	bfac      	ite	ge
 8003a04:	1b9d      	subge	r5, r3, r6
 8003a06:	461d      	movlt	r5, r3
 8003a08:	2d00      	cmp	r5, #0
 8003a0a:	f77f ab4f 	ble.w	80030ac <_svfprintf_r+0x52c>
 8003a0e:	4abb      	ldr	r2, [pc, #748]	; (8003cfc <_svfprintf_r+0x117c>)
 8003a10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003a12:	920f      	str	r2, [sp, #60]	; 0x3c
 8003a14:	2d10      	cmp	r5, #16
 8003a16:	dd9d      	ble.n	8003954 <_svfprintf_r+0xdd4>
 8003a18:	2610      	movs	r6, #16
 8003a1a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003a1c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8003a20:	e004      	b.n	8003a2c <_svfprintf_r+0xeac>
 8003a22:	f109 0908 	add.w	r9, r9, #8
 8003a26:	3d10      	subs	r5, #16
 8003a28:	2d10      	cmp	r5, #16
 8003a2a:	dd93      	ble.n	8003954 <_svfprintf_r+0xdd4>
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	3410      	adds	r4, #16
 8003a30:	2b07      	cmp	r3, #7
 8003a32:	9429      	str	r4, [sp, #164]	; 0xa4
 8003a34:	9328      	str	r3, [sp, #160]	; 0xa0
 8003a36:	f8c9 a000 	str.w	sl, [r9]
 8003a3a:	f8c9 6004 	str.w	r6, [r9, #4]
 8003a3e:	ddf0      	ble.n	8003a22 <_svfprintf_r+0xea2>
 8003a40:	aa27      	add	r2, sp, #156	; 0x9c
 8003a42:	4659      	mov	r1, fp
 8003a44:	4638      	mov	r0, r7
 8003a46:	f004 fd89 	bl	800855c <__ssprint_r>
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	f47f a992 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8003a50:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003a52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003a54:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003a58:	e7e5      	b.n	8003a26 <_svfprintf_r+0xea6>
 8003a5a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8003a5c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8003a5e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003a60:	f8c9 1000 	str.w	r1, [r9]
 8003a64:	3201      	adds	r2, #1
 8003a66:	4404      	add	r4, r0
 8003a68:	2a07      	cmp	r2, #7
 8003a6a:	9429      	str	r4, [sp, #164]	; 0xa4
 8003a6c:	f8c9 0004 	str.w	r0, [r9, #4]
 8003a70:	9228      	str	r2, [sp, #160]	; 0xa0
 8003a72:	f300 82b9 	bgt.w	8003fe8 <_svfprintf_r+0x1468>
 8003a76:	f109 0908 	add.w	r9, r9, #8
 8003a7a:	e7a9      	b.n	80039d0 <_svfprintf_r+0xe50>
 8003a7c:	9b07      	ldr	r3, [sp, #28]
 8003a7e:	07d8      	lsls	r0, r3, #31
 8003a80:	f53f adf2 	bmi.w	8003668 <_svfprintf_r+0xae8>
 8003a84:	3501      	adds	r5, #1
 8003a86:	3401      	adds	r4, #1
 8003a88:	2301      	movs	r3, #1
 8003a8a:	2d07      	cmp	r5, #7
 8003a8c:	9429      	str	r4, [sp, #164]	; 0xa4
 8003a8e:	9528      	str	r5, [sp, #160]	; 0xa0
 8003a90:	f8c9 6000 	str.w	r6, [r9]
 8003a94:	f8c9 3004 	str.w	r3, [r9, #4]
 8003a98:	f77f ae1a 	ble.w	80036d0 <_svfprintf_r+0xb50>
 8003a9c:	e70d      	b.n	80038ba <_svfprintf_r+0xd3a>
 8003a9e:	aa27      	add	r2, sp, #156	; 0x9c
 8003aa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003aa2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003aa4:	f004 fd5a 	bl	800855c <__ssprint_r>
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	f47f a963 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8003aae:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003ab0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8003ab2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003ab6:	e5e5      	b.n	8003684 <_svfprintf_r+0xb04>
 8003ab8:	aa27      	add	r2, sp, #156	; 0x9c
 8003aba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003abc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003abe:	f004 fd4d 	bl	800855c <__ssprint_r>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	f47f a956 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8003ac8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003aca:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8003acc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003ad0:	e5e7      	b.n	80036a2 <_svfprintf_r+0xb22>
 8003ad2:	aa27      	add	r2, sp, #156	; 0x9c
 8003ad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ad6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003ad8:	f004 fd40 	bl	800855c <__ssprint_r>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	f47f a949 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8003ae2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003ae4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003ae8:	f7ff ba94 	b.w	8003014 <_svfprintf_r+0x494>
 8003aec:	9907      	ldr	r1, [sp, #28]
 8003aee:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8003af2:	f000 80bb 	beq.w	8003c6c <_svfprintf_r+0x10ec>
 8003af6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003af8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8003afc:	4603      	mov	r3, r0
 8003afe:	f1bb 0f00 	cmp.w	fp, #0
 8003b02:	f103 0304 	add.w	r3, r3, #4
 8003b06:	8804      	ldrh	r4, [r0, #0]
 8003b08:	f04f 0500 	mov.w	r5, #0
 8003b0c:	f2c0 81c5 	blt.w	8003e9a <_svfprintf_r+0x131a>
 8003b10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003b14:	9107      	str	r1, [sp, #28]
 8003b16:	ea54 0105 	orrs.w	r1, r4, r5
 8003b1a:	930e      	str	r3, [sp, #56]	; 0x38
 8003b1c:	f43f acda 	beq.w	80034d4 <_svfprintf_r+0x954>
 8003b20:	4617      	mov	r7, r2
 8003b22:	f7ff b953 	b.w	8002dcc <_svfprintf_r+0x24c>
 8003b26:	9b07      	ldr	r3, [sp, #28]
 8003b28:	06df      	lsls	r7, r3, #27
 8003b2a:	d40b      	bmi.n	8003b44 <_svfprintf_r+0xfc4>
 8003b2c:	9b07      	ldr	r3, [sp, #28]
 8003b2e:	065e      	lsls	r6, r3, #25
 8003b30:	d508      	bpl.n	8003b44 <_svfprintf_r+0xfc4>
 8003b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b34:	6813      	ldr	r3, [r2, #0]
 8003b36:	3204      	adds	r2, #4
 8003b38:	920e      	str	r2, [sp, #56]	; 0x38
 8003b3a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	f7ff b845 	b.w	8002bce <_svfprintf_r+0x4e>
 8003b44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	3204      	adds	r2, #4
 8003b4a:	920e      	str	r2, [sp, #56]	; 0x38
 8003b4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f7ff b83d 	b.w	8002bce <_svfprintf_r+0x4e>
 8003b54:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	f005 fc14 	bl	8009388 <__aeabi_dcmpun>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	f040 8305 	bne.w	8004170 <_svfprintf_r+0x15f0>
 8003b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b68:	f1bb 3fff 	cmp.w	fp, #4294967295
 8003b6c:	f023 0720 	bic.w	r7, r3, #32
 8003b70:	f000 826c 	beq.w	800404c <_svfprintf_r+0x14cc>
 8003b74:	2f47      	cmp	r7, #71	; 0x47
 8003b76:	f000 8187 	beq.w	8003e88 <_svfprintf_r+0x1308>
 8003b7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003b7c:	9a07      	ldr	r2, [sp, #28]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b84:	920f      	str	r2, [sp, #60]	; 0x3c
 8003b86:	f2c0 8280 	blt.w	800408a <_svfprintf_r+0x150a>
 8003b8a:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8003b8e:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8003b92:	2300      	movs	r3, #0
 8003b94:	9308      	str	r3, [sp, #32]
 8003b96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b98:	2b66      	cmp	r3, #102	; 0x66
 8003b9a:	f000 825a 	beq.w	8004052 <_svfprintf_r+0x14d2>
 8003b9e:	2b46      	cmp	r3, #70	; 0x46
 8003ba0:	f000 8147 	beq.w	8003e32 <_svfprintf_r+0x12b2>
 8003ba4:	2f45      	cmp	r7, #69	; 0x45
 8003ba6:	bf0c      	ite	eq
 8003ba8:	f10b 0501 	addeq.w	r5, fp, #1
 8003bac:	465d      	movne	r5, fp
 8003bae:	a825      	add	r0, sp, #148	; 0x94
 8003bb0:	a922      	add	r1, sp, #136	; 0x88
 8003bb2:	aa21      	add	r2, sp, #132	; 0x84
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	9004      	str	r0, [sp, #16]
 8003bb8:	9202      	str	r2, [sp, #8]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	9501      	str	r5, [sp, #4]
 8003bbe:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8003bc2:	9103      	str	r1, [sp, #12]
 8003bc4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003bc6:	f002 f847 	bl	8005c58 <_dtoa_r>
 8003bca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003bcc:	2b67      	cmp	r3, #103	; 0x67
 8003bce:	4606      	mov	r6, r0
 8003bd0:	f040 8271 	bne.w	80040b6 <_svfprintf_r+0x1536>
 8003bd4:	9b07      	ldr	r3, [sp, #28]
 8003bd6:	07da      	lsls	r2, r3, #31
 8003bd8:	f140 82bf 	bpl.w	800415a <_svfprintf_r+0x15da>
 8003bdc:	1974      	adds	r4, r6, r5
 8003bde:	2200      	movs	r2, #0
 8003be0:	2300      	movs	r3, #0
 8003be2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8003be6:	f005 fb9d 	bl	8009324 <__aeabi_dcmpeq>
 8003bea:	2800      	cmp	r0, #0
 8003bec:	f040 8190 	bne.w	8003f10 <_svfprintf_r+0x1390>
 8003bf0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003bf2:	429c      	cmp	r4, r3
 8003bf4:	d906      	bls.n	8003c04 <_svfprintf_r+0x1084>
 8003bf6:	2130      	movs	r1, #48	; 0x30
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	9225      	str	r2, [sp, #148]	; 0x94
 8003bfc:	7019      	strb	r1, [r3, #0]
 8003bfe:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003c00:	429c      	cmp	r4, r3
 8003c02:	d8f9      	bhi.n	8003bf8 <_svfprintf_r+0x1078>
 8003c04:	1b9b      	subs	r3, r3, r6
 8003c06:	2f47      	cmp	r7, #71	; 0x47
 8003c08:	9312      	str	r3, [sp, #72]	; 0x48
 8003c0a:	f000 817a 	beq.w	8003f02 <_svfprintf_r+0x1382>
 8003c0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c10:	2b65      	cmp	r3, #101	; 0x65
 8003c12:	f340 825f 	ble.w	80040d4 <_svfprintf_r+0x1554>
 8003c16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c18:	2b66      	cmp	r3, #102	; 0x66
 8003c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8003c1e:	f000 8266 	beq.w	80040ee <_svfprintf_r+0x156e>
 8003c22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003c24:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003c26:	428a      	cmp	r2, r1
 8003c28:	f2c0 8238 	blt.w	800409c <_svfprintf_r+0x151c>
 8003c2c:	9b07      	ldr	r3, [sp, #28]
 8003c2e:	07d9      	lsls	r1, r3, #31
 8003c30:	f100 8295 	bmi.w	800415e <_svfprintf_r+0x15de>
 8003c34:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003c38:	920d      	str	r2, [sp, #52]	; 0x34
 8003c3a:	2267      	movs	r2, #103	; 0x67
 8003c3c:	9211      	str	r2, [sp, #68]	; 0x44
 8003c3e:	9a08      	ldr	r2, [sp, #32]
 8003c40:	2a00      	cmp	r2, #0
 8003c42:	f040 8132 	bne.w	8003eaa <_svfprintf_r+0x132a>
 8003c46:	9308      	str	r3, [sp, #32]
 8003c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c4a:	9307      	str	r3, [sp, #28]
 8003c4c:	4693      	mov	fp, r2
 8003c4e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8003c52:	f7ff b967 	b.w	8002f24 <_svfprintf_r+0x3a4>
 8003c56:	f027 0707 	bic.w	r7, r7, #7
 8003c5a:	ed97 7b00 	vldr	d7, [r7]
 8003c5e:	f107 0308 	add.w	r3, r7, #8
 8003c62:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003c66:	930e      	str	r3, [sp, #56]	; 0x38
 8003c68:	f7ff ba88 	b.w	800317c <_svfprintf_r+0x5fc>
 8003c6c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003c6e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8003c72:	f1bb 0f00 	cmp.w	fp, #0
 8003c76:	680c      	ldr	r4, [r1, #0]
 8003c78:	f101 0704 	add.w	r7, r1, #4
 8003c7c:	f04f 0500 	mov.w	r5, #0
 8003c80:	f280 80ac 	bge.w	8003ddc <_svfprintf_r+0x125c>
 8003c84:	970e      	str	r7, [sp, #56]	; 0x38
 8003c86:	2700      	movs	r7, #0
 8003c88:	f7ff b8a0 	b.w	8002dcc <_svfprintf_r+0x24c>
 8003c8c:	9907      	ldr	r1, [sp, #28]
 8003c8e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8003c92:	f43f ae4c 	beq.w	800392e <_svfprintf_r+0xdae>
 8003c96:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003c98:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f1bb 0f00 	cmp.w	fp, #0
 8003ca2:	f103 0304 	add.w	r3, r3, #4
 8003ca6:	8804      	ldrh	r4, [r0, #0]
 8003ca8:	f04f 0500 	mov.w	r5, #0
 8003cac:	f2c0 80f2 	blt.w	8003e94 <_svfprintf_r+0x1314>
 8003cb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003cb4:	9107      	str	r1, [sp, #28]
 8003cb6:	ea54 0105 	orrs.w	r1, r4, r5
 8003cba:	930e      	str	r3, [sp, #56]	; 0x38
 8003cbc:	4617      	mov	r7, r2
 8003cbe:	f47f a90d 	bne.w	8002edc <_svfprintf_r+0x35c>
 8003cc2:	f7ff baf3 	b.w	80032ac <_svfprintf_r+0x72c>
 8003cc6:	9b07      	ldr	r3, [sp, #28]
 8003cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cca:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003cce:	4613      	mov	r3, r2
 8003cd0:	f000 80e5 	beq.w	8003e9e <_svfprintf_r+0x131e>
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	8814      	ldrh	r4, [r2, #0]
 8003cd8:	930e      	str	r3, [sp, #56]	; 0x38
 8003cda:	2500      	movs	r5, #0
 8003cdc:	f7ff bb03 	b.w	80032e6 <_svfprintf_r+0x766>
 8003ce0:	4614      	mov	r4, r2
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003ce6:	9328      	str	r3, [sp, #160]	; 0xa0
 8003ce8:	442c      	add	r4, r5
 8003cea:	2b07      	cmp	r3, #7
 8003cec:	9429      	str	r4, [sp, #164]	; 0xa4
 8003cee:	e889 0024 	stmia.w	r9, {r2, r5}
 8003cf2:	f73f ae58 	bgt.w	80039a6 <_svfprintf_r+0xe26>
 8003cf6:	f109 0908 	add.w	r9, r9, #8
 8003cfa:	e65f      	b.n	80039bc <_svfprintf_r+0xe3c>
 8003cfc:	08009940 	.word	0x08009940
 8003d00:	2700      	movs	r7, #0
 8003d02:	45bb      	cmp	fp, r7
 8003d04:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8003d08:	f6ff abf6 	blt.w	80034f8 <_svfprintf_r+0x978>
 8003d0c:	9b07      	ldr	r3, [sp, #28]
 8003d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d12:	9307      	str	r3, [sp, #28]
 8003d14:	f7ff bbbe 	b.w	8003494 <_svfprintf_r+0x914>
 8003d18:	aa27      	add	r2, sp, #156	; 0x9c
 8003d1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003d1e:	f004 fc1d 	bl	800855c <__ssprint_r>
 8003d22:	2800      	cmp	r0, #0
 8003d24:	f47f a826 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8003d28:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003d2a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003d2e:	e405      	b.n	800353c <_svfprintf_r+0x9bc>
 8003d30:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8003d32:	f7ff bbda 	b.w	80034ea <_svfprintf_r+0x96a>
 8003d36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003d38:	4ab2      	ldr	r2, [pc, #712]	; (8004004 <_svfprintf_r+0x1484>)
 8003d3a:	f8c9 2000 	str.w	r2, [r9]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	3401      	adds	r4, #1
 8003d42:	2201      	movs	r2, #1
 8003d44:	2b07      	cmp	r3, #7
 8003d46:	9429      	str	r4, [sp, #164]	; 0xa4
 8003d48:	9328      	str	r3, [sp, #160]	; 0xa0
 8003d4a:	f8c9 2004 	str.w	r2, [r9, #4]
 8003d4e:	f300 808e 	bgt.w	8003e6e <_svfprintf_r+0x12ee>
 8003d52:	f109 0908 	add.w	r9, r9, #8
 8003d56:	b92d      	cbnz	r5, 8003d64 <_svfprintf_r+0x11e4>
 8003d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d5a:	b91b      	cbnz	r3, 8003d64 <_svfprintf_r+0x11e4>
 8003d5c:	9b07      	ldr	r3, [sp, #28]
 8003d5e:	07df      	lsls	r7, r3, #31
 8003d60:	f57f a9a4 	bpl.w	80030ac <_svfprintf_r+0x52c>
 8003d64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003d66:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003d68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003d6a:	f8c9 2000 	str.w	r2, [r9]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	440c      	add	r4, r1
 8003d72:	2b07      	cmp	r3, #7
 8003d74:	9429      	str	r4, [sp, #164]	; 0xa4
 8003d76:	f8c9 1004 	str.w	r1, [r9, #4]
 8003d7a:	9328      	str	r3, [sp, #160]	; 0xa0
 8003d7c:	f300 81d3 	bgt.w	8004126 <_svfprintf_r+0x15a6>
 8003d80:	f109 0908 	add.w	r9, r9, #8
 8003d84:	426d      	negs	r5, r5
 8003d86:	2d00      	cmp	r5, #0
 8003d88:	f340 80ad 	ble.w	8003ee6 <_svfprintf_r+0x1366>
 8003d8c:	4a9e      	ldr	r2, [pc, #632]	; (8004008 <_svfprintf_r+0x1488>)
 8003d8e:	920f      	str	r2, [sp, #60]	; 0x3c
 8003d90:	2d10      	cmp	r5, #16
 8003d92:	f340 80cc 	ble.w	8003f2e <_svfprintf_r+0x13ae>
 8003d96:	4622      	mov	r2, r4
 8003d98:	2710      	movs	r7, #16
 8003d9a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8003d9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003da0:	e005      	b.n	8003dae <_svfprintf_r+0x122e>
 8003da2:	f109 0908 	add.w	r9, r9, #8
 8003da6:	3d10      	subs	r5, #16
 8003da8:	2d10      	cmp	r5, #16
 8003daa:	f340 80bf 	ble.w	8003f2c <_svfprintf_r+0x13ac>
 8003dae:	3301      	adds	r3, #1
 8003db0:	3210      	adds	r2, #16
 8003db2:	2b07      	cmp	r3, #7
 8003db4:	9229      	str	r2, [sp, #164]	; 0xa4
 8003db6:	9328      	str	r3, [sp, #160]	; 0xa0
 8003db8:	f8c9 a000 	str.w	sl, [r9]
 8003dbc:	f8c9 7004 	str.w	r7, [r9, #4]
 8003dc0:	ddef      	ble.n	8003da2 <_svfprintf_r+0x1222>
 8003dc2:	aa27      	add	r2, sp, #156	; 0x9c
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	4658      	mov	r0, fp
 8003dc8:	f004 fbc8 	bl	800855c <__ssprint_r>
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	f47e afd1 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8003dd2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003dd4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003dd6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003dda:	e7e4      	b.n	8003da6 <_svfprintf_r+0x1226>
 8003ddc:	9a07      	ldr	r2, [sp, #28]
 8003dde:	f7ff ba37 	b.w	8003250 <_svfprintf_r+0x6d0>
 8003de2:	9a07      	ldr	r2, [sp, #28]
 8003de4:	e589      	b.n	80038fa <_svfprintf_r+0xd7a>
 8003de6:	9b07      	ldr	r3, [sp, #28]
 8003de8:	f043 0320 	orr.w	r3, r3, #32
 8003dec:	9307      	str	r3, [sp, #28]
 8003dee:	f108 0801 	add.w	r8, r8, #1
 8003df2:	f898 3000 	ldrb.w	r3, [r8]
 8003df6:	f7fe bf1d 	b.w	8002c34 <_svfprintf_r+0xb4>
 8003dfa:	aa27      	add	r2, sp, #156	; 0x9c
 8003dfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dfe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003e00:	f004 fbac 	bl	800855c <__ssprint_r>
 8003e04:	2800      	cmp	r0, #0
 8003e06:	f47e afb5 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8003e0a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003e0c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003e10:	f7ff bbac 	b.w	800356c <_svfprintf_r+0x9ec>
 8003e14:	2140      	movs	r1, #64	; 0x40
 8003e16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003e18:	f003 fada 	bl	80073d0 <_malloc_r>
 8003e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e1e:	6010      	str	r0, [r2, #0]
 8003e20:	6110      	str	r0, [r2, #16]
 8003e22:	2800      	cmp	r0, #0
 8003e24:	f000 81f9 	beq.w	800421a <_svfprintf_r+0x169a>
 8003e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e2a:	2340      	movs	r3, #64	; 0x40
 8003e2c:	6153      	str	r3, [r2, #20]
 8003e2e:	f7fe bebe 	b.w	8002bae <_svfprintf_r+0x2e>
 8003e32:	a825      	add	r0, sp, #148	; 0x94
 8003e34:	a922      	add	r1, sp, #136	; 0x88
 8003e36:	aa21      	add	r2, sp, #132	; 0x84
 8003e38:	2303      	movs	r3, #3
 8003e3a:	9004      	str	r0, [sp, #16]
 8003e3c:	9202      	str	r2, [sp, #8]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	f8cd b004 	str.w	fp, [sp, #4]
 8003e44:	9103      	str	r1, [sp, #12]
 8003e46:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8003e4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003e4c:	f001 ff04 	bl	8005c58 <_dtoa_r>
 8003e50:	465d      	mov	r5, fp
 8003e52:	4606      	mov	r6, r0
 8003e54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e56:	2b46      	cmp	r3, #70	; 0x46
 8003e58:	eb06 0405 	add.w	r4, r6, r5
 8003e5c:	f47f aebf 	bne.w	8003bde <_svfprintf_r+0x105e>
 8003e60:	7833      	ldrb	r3, [r6, #0]
 8003e62:	2b30      	cmp	r3, #48	; 0x30
 8003e64:	f000 818a 	beq.w	800417c <_svfprintf_r+0x15fc>
 8003e68:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003e6a:	442c      	add	r4, r5
 8003e6c:	e6b7      	b.n	8003bde <_svfprintf_r+0x105e>
 8003e6e:	aa27      	add	r2, sp, #156	; 0x9c
 8003e70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003e74:	f004 fb72 	bl	800855c <__ssprint_r>
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	f47e af7b 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8003e7e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003e80:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003e82:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003e86:	e766      	b.n	8003d56 <_svfprintf_r+0x11d6>
 8003e88:	f1bb 0f00 	cmp.w	fp, #0
 8003e8c:	bf08      	it	eq
 8003e8e:	f04f 0b01 	moveq.w	fp, #1
 8003e92:	e672      	b.n	8003b7a <_svfprintf_r+0xffa>
 8003e94:	930e      	str	r3, [sp, #56]	; 0x38
 8003e96:	4617      	mov	r7, r2
 8003e98:	e557      	b.n	800394a <_svfprintf_r+0xdca>
 8003e9a:	930e      	str	r3, [sp, #56]	; 0x38
 8003e9c:	e6f3      	b.n	8003c86 <_svfprintf_r+0x1106>
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	6814      	ldr	r4, [r2, #0]
 8003ea2:	930e      	str	r3, [sp, #56]	; 0x38
 8003ea4:	2500      	movs	r5, #0
 8003ea6:	f7ff ba1e 	b.w	80032e6 <_svfprintf_r+0x766>
 8003eaa:	272d      	movs	r7, #45	; 0x2d
 8003eac:	9308      	str	r3, [sp, #32]
 8003eae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003eb0:	9307      	str	r3, [sp, #28]
 8003eb2:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8003eb6:	f04f 0b00 	mov.w	fp, #0
 8003eba:	f7ff b834 	b.w	8002f26 <_svfprintf_r+0x3a6>
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	f7fe fd9e 	bl	8002a00 <strlen>
 8003ec4:	46a3      	mov	fp, r4
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	900d      	str	r0, [sp, #52]	; 0x34
 8003eca:	f7ff ba9d 	b.w	8003408 <_svfprintf_r+0x888>
 8003ece:	aa27      	add	r2, sp, #156	; 0x9c
 8003ed0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ed2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003ed4:	f004 fb42 	bl	800855c <__ssprint_r>
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	f47e af4b 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8003ede:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003ee0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003ee2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003ee6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003ee8:	f8c9 6000 	str.w	r6, [r9]
 8003eec:	3301      	adds	r3, #1
 8003eee:	440c      	add	r4, r1
 8003ef0:	2b07      	cmp	r3, #7
 8003ef2:	9429      	str	r4, [sp, #164]	; 0xa4
 8003ef4:	9328      	str	r3, [sp, #160]	; 0xa0
 8003ef6:	f8c9 1004 	str.w	r1, [r9, #4]
 8003efa:	f77f a8d5 	ble.w	80030a8 <_svfprintf_r+0x528>
 8003efe:	f7ff bbf6 	b.w	80036ee <_svfprintf_r+0xb6e>
 8003f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f04:	1cdd      	adds	r5, r3, #3
 8003f06:	db1e      	blt.n	8003f46 <_svfprintf_r+0x13c6>
 8003f08:	459b      	cmp	fp, r3
 8003f0a:	db1c      	blt.n	8003f46 <_svfprintf_r+0x13c6>
 8003f0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8003f0e:	e688      	b.n	8003c22 <_svfprintf_r+0x10a2>
 8003f10:	4623      	mov	r3, r4
 8003f12:	e677      	b.n	8003c04 <_svfprintf_r+0x1084>
 8003f14:	aa27      	add	r2, sp, #156	; 0x9c
 8003f16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003f1a:	f004 fb1f 	bl	800855c <__ssprint_r>
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	f47e af28 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8003f24:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003f26:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003f2a:	e447      	b.n	80037bc <_svfprintf_r+0xc3c>
 8003f2c:	4614      	mov	r4, r2
 8003f2e:	3301      	adds	r3, #1
 8003f30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003f32:	9328      	str	r3, [sp, #160]	; 0xa0
 8003f34:	442c      	add	r4, r5
 8003f36:	2b07      	cmp	r3, #7
 8003f38:	9429      	str	r4, [sp, #164]	; 0xa4
 8003f3a:	e889 0024 	stmia.w	r9, {r2, r5}
 8003f3e:	dcc6      	bgt.n	8003ece <_svfprintf_r+0x134e>
 8003f40:	f109 0908 	add.w	r9, r9, #8
 8003f44:	e7cf      	b.n	8003ee6 <_svfprintf_r+0x1366>
 8003f46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003f48:	3a02      	subs	r2, #2
 8003f4a:	9211      	str	r2, [sp, #68]	; 0x44
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8003f54:	9321      	str	r3, [sp, #132]	; 0x84
 8003f56:	bfb8      	it	lt
 8003f58:	425b      	neglt	r3, r3
 8003f5a:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8003f5e:	bfb4      	ite	lt
 8003f60:	222d      	movlt	r2, #45	; 0x2d
 8003f62:	222b      	movge	r2, #43	; 0x2b
 8003f64:	2b09      	cmp	r3, #9
 8003f66:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8003f6a:	f340 80ee 	ble.w	800414a <_svfprintf_r+0x15ca>
 8003f6e:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 8003f72:	4604      	mov	r4, r0
 8003f74:	4a25      	ldr	r2, [pc, #148]	; (800400c <_svfprintf_r+0x148c>)
 8003f76:	fb82 2103 	smull	r2, r1, r2, r3
 8003f7a:	17da      	asrs	r2, r3, #31
 8003f7c:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8003f80:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003f84:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8003f88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003f8c:	2a09      	cmp	r2, #9
 8003f8e:	4613      	mov	r3, r2
 8003f90:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8003f94:	dcee      	bgt.n	8003f74 <_svfprintf_r+0x13f4>
 8003f96:	4621      	mov	r1, r4
 8003f98:	3330      	adds	r3, #48	; 0x30
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8003fa0:	4288      	cmp	r0, r1
 8003fa2:	f240 8137 	bls.w	8004214 <_svfprintf_r+0x1694>
 8003fa6:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8003faa:	4623      	mov	r3, r4
 8003fac:	e001      	b.n	8003fb2 <_svfprintf_r+0x1432>
 8003fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fb2:	f801 2b01 	strb.w	r2, [r1], #1
 8003fb6:	4298      	cmp	r0, r3
 8003fb8:	d1f9      	bne.n	8003fae <_svfprintf_r+0x142e>
 8003fba:	1c43      	adds	r3, r0, #1
 8003fbc:	1b1b      	subs	r3, r3, r4
 8003fbe:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 8003fc2:	4413      	add	r3, r2
 8003fc4:	aa23      	add	r2, sp, #140	; 0x8c
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003fca:	9319      	str	r3, [sp, #100]	; 0x64
 8003fcc:	2a01      	cmp	r2, #1
 8003fce:	4413      	add	r3, r2
 8003fd0:	930d      	str	r3, [sp, #52]	; 0x34
 8003fd2:	f340 80ea 	ble.w	80041aa <_svfprintf_r+0x162a>
 8003fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fd8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003fda:	4413      	add	r3, r2
 8003fdc:	2200      	movs	r2, #0
 8003fde:	930d      	str	r3, [sp, #52]	; 0x34
 8003fe0:	9213      	str	r2, [sp, #76]	; 0x4c
 8003fe2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003fe6:	e62a      	b.n	8003c3e <_svfprintf_r+0x10be>
 8003fe8:	aa27      	add	r2, sp, #156	; 0x9c
 8003fea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003fee:	f004 fab5 	bl	800855c <__ssprint_r>
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	f47e aebe 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8003ff8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ffa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003ffc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004000:	e4e6      	b.n	80039d0 <_svfprintf_r+0xe50>
 8004002:	bf00      	nop
 8004004:	08009990 	.word	0x08009990
 8004008:	08009940 	.word	0x08009940
 800400c:	66666667 	.word	0x66666667
 8004010:	aa27      	add	r2, sp, #156	; 0x9c
 8004012:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004014:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004016:	f004 faa1 	bl	800855c <__ssprint_r>
 800401a:	2800      	cmp	r0, #0
 800401c:	f47e aeaa 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8004020:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004022:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004024:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800402c:	e4e8      	b.n	8003a00 <_svfprintf_r+0xe80>
 800402e:	2d06      	cmp	r5, #6
 8004030:	462b      	mov	r3, r5
 8004032:	bf28      	it	cs
 8004034:	2306      	movcs	r3, #6
 8004036:	930d      	str	r3, [sp, #52]	; 0x34
 8004038:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800403c:	46b3      	mov	fp, r6
 800403e:	970e      	str	r7, [sp, #56]	; 0x38
 8004040:	9613      	str	r6, [sp, #76]	; 0x4c
 8004042:	4637      	mov	r7, r6
 8004044:	9308      	str	r3, [sp, #32]
 8004046:	4e88      	ldr	r6, [pc, #544]	; (8004268 <_svfprintf_r+0x16e8>)
 8004048:	f7fe bf6c 	b.w	8002f24 <_svfprintf_r+0x3a4>
 800404c:	f04f 0b06 	mov.w	fp, #6
 8004050:	e593      	b.n	8003b7a <_svfprintf_r+0xffa>
 8004052:	a825      	add	r0, sp, #148	; 0x94
 8004054:	a922      	add	r1, sp, #136	; 0x88
 8004056:	aa21      	add	r2, sp, #132	; 0x84
 8004058:	2303      	movs	r3, #3
 800405a:	9004      	str	r0, [sp, #16]
 800405c:	9202      	str	r2, [sp, #8]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	f8cd b004 	str.w	fp, [sp, #4]
 8004064:	9103      	str	r1, [sp, #12]
 8004066:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800406a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800406c:	f001 fdf4 	bl	8005c58 <_dtoa_r>
 8004070:	465d      	mov	r5, fp
 8004072:	4606      	mov	r6, r0
 8004074:	eb00 040b 	add.w	r4, r0, fp
 8004078:	e6f2      	b.n	8003e60 <_svfprintf_r+0x12e0>
 800407a:	272d      	movs	r7, #45	; 0x2d
 800407c:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004080:	f7ff b8a3 	b.w	80031ca <_svfprintf_r+0x64a>
 8004084:	9307      	str	r3, [sp, #28]
 8004086:	f7ff b94c 	b.w	8003322 <_svfprintf_r+0x7a2>
 800408a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800408e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8004092:	931d      	str	r3, [sp, #116]	; 0x74
 8004094:	232d      	movs	r3, #45	; 0x2d
 8004096:	911c      	str	r1, [sp, #112]	; 0x70
 8004098:	9308      	str	r3, [sp, #32]
 800409a:	e57c      	b.n	8003b96 <_svfprintf_r+0x1016>
 800409c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800409e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80040a0:	4413      	add	r3, r2
 80040a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80040a4:	930d      	str	r3, [sp, #52]	; 0x34
 80040a6:	2a00      	cmp	r2, #0
 80040a8:	f340 8089 	ble.w	80041be <_svfprintf_r+0x163e>
 80040ac:	2267      	movs	r2, #103	; 0x67
 80040ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80040b2:	9211      	str	r2, [sp, #68]	; 0x44
 80040b4:	e5c3      	b.n	8003c3e <_svfprintf_r+0x10be>
 80040b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040b8:	2b47      	cmp	r3, #71	; 0x47
 80040ba:	f47f ad8f 	bne.w	8003bdc <_svfprintf_r+0x105c>
 80040be:	9b07      	ldr	r3, [sp, #28]
 80040c0:	07db      	lsls	r3, r3, #31
 80040c2:	f53f aec7 	bmi.w	8003e54 <_svfprintf_r+0x12d4>
 80040c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80040c8:	2f47      	cmp	r7, #71	; 0x47
 80040ca:	eba3 0306 	sub.w	r3, r3, r6
 80040ce:	9312      	str	r3, [sp, #72]	; 0x48
 80040d0:	f43f af17 	beq.w	8003f02 <_svfprintf_r+0x1382>
 80040d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040d6:	e739      	b.n	8003f4c <_svfprintf_r+0x13cc>
 80040d8:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 80040dc:	970e      	str	r7, [sp, #56]	; 0x38
 80040de:	9308      	str	r3, [sp, #32]
 80040e0:	950d      	str	r5, [sp, #52]	; 0x34
 80040e2:	4683      	mov	fp, r0
 80040e4:	9013      	str	r0, [sp, #76]	; 0x4c
 80040e6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80040ea:	f7fe bf1b 	b.w	8002f24 <_svfprintf_r+0x3a4>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	dd6d      	ble.n	80041ce <_svfprintf_r+0x164e>
 80040f2:	f1bb 0f00 	cmp.w	fp, #0
 80040f6:	d14f      	bne.n	8004198 <_svfprintf_r+0x1618>
 80040f8:	9a07      	ldr	r2, [sp, #28]
 80040fa:	07d4      	lsls	r4, r2, #31
 80040fc:	d44c      	bmi.n	8004198 <_svfprintf_r+0x1618>
 80040fe:	461a      	mov	r2, r3
 8004100:	920d      	str	r2, [sp, #52]	; 0x34
 8004102:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004106:	e59a      	b.n	8003c3e <_svfprintf_r+0x10be>
 8004108:	9b07      	ldr	r3, [sp, #28]
 800410a:	07db      	lsls	r3, r3, #31
 800410c:	465f      	mov	r7, fp
 800410e:	d505      	bpl.n	800411c <_svfprintf_r+0x159c>
 8004110:	ae44      	add	r6, sp, #272	; 0x110
 8004112:	2330      	movs	r3, #48	; 0x30
 8004114:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8004118:	f7fe befa 	b.w	8002f10 <_svfprintf_r+0x390>
 800411c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8004120:	ae34      	add	r6, sp, #208	; 0xd0
 8004122:	f7fe bef8 	b.w	8002f16 <_svfprintf_r+0x396>
 8004126:	aa27      	add	r2, sp, #156	; 0x9c
 8004128:	9909      	ldr	r1, [sp, #36]	; 0x24
 800412a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800412c:	f004 fa16 	bl	800855c <__ssprint_r>
 8004130:	2800      	cmp	r0, #0
 8004132:	f47e ae1f 	bne.w	8002d74 <_svfprintf_r+0x1f4>
 8004136:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8004138:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800413a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800413c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004140:	e620      	b.n	8003d84 <_svfprintf_r+0x1204>
 8004142:	46a0      	mov	r8, r4
 8004144:	2500      	movs	r5, #0
 8004146:	f7fe bd77 	b.w	8002c38 <_svfprintf_r+0xb8>
 800414a:	3330      	adds	r3, #48	; 0x30
 800414c:	2230      	movs	r2, #48	; 0x30
 800414e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8004152:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8004156:	ab24      	add	r3, sp, #144	; 0x90
 8004158:	e734      	b.n	8003fc4 <_svfprintf_r+0x1444>
 800415a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800415c:	e552      	b.n	8003c04 <_svfprintf_r+0x1084>
 800415e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004160:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004162:	4413      	add	r3, r2
 8004164:	2267      	movs	r2, #103	; 0x67
 8004166:	930d      	str	r3, [sp, #52]	; 0x34
 8004168:	9211      	str	r2, [sp, #68]	; 0x44
 800416a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800416e:	e566      	b.n	8003c3e <_svfprintf_r+0x10be>
 8004170:	4e3e      	ldr	r6, [pc, #248]	; (800426c <_svfprintf_r+0x16ec>)
 8004172:	4b3f      	ldr	r3, [pc, #252]	; (8004270 <_svfprintf_r+0x16f0>)
 8004174:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004178:	f7ff b829 	b.w	80031ce <_svfprintf_r+0x64e>
 800417c:	2200      	movs	r2, #0
 800417e:	2300      	movs	r3, #0
 8004180:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8004184:	f005 f8ce 	bl	8009324 <__aeabi_dcmpeq>
 8004188:	2800      	cmp	r0, #0
 800418a:	f47f ae6d 	bne.w	8003e68 <_svfprintf_r+0x12e8>
 800418e:	f1c5 0501 	rsb	r5, r5, #1
 8004192:	9521      	str	r5, [sp, #132]	; 0x84
 8004194:	442c      	add	r4, r5
 8004196:	e522      	b.n	8003bde <_svfprintf_r+0x105e>
 8004198:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800419a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800419c:	189d      	adds	r5, r3, r2
 800419e:	eb05 030b 	add.w	r3, r5, fp
 80041a2:	930d      	str	r3, [sp, #52]	; 0x34
 80041a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80041a8:	e549      	b.n	8003c3e <_svfprintf_r+0x10be>
 80041aa:	9b07      	ldr	r3, [sp, #28]
 80041ac:	f013 0301 	ands.w	r3, r3, #1
 80041b0:	f47f af11 	bne.w	8003fd6 <_svfprintf_r+0x1456>
 80041b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80041b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80041bc:	e53f      	b.n	8003c3e <_svfprintf_r+0x10be>
 80041be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80041c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80041c2:	f1c3 0301 	rsb	r3, r3, #1
 80041c6:	441a      	add	r2, r3
 80041c8:	4613      	mov	r3, r2
 80041ca:	920d      	str	r2, [sp, #52]	; 0x34
 80041cc:	e76e      	b.n	80040ac <_svfprintf_r+0x152c>
 80041ce:	f1bb 0f00 	cmp.w	fp, #0
 80041d2:	d102      	bne.n	80041da <_svfprintf_r+0x165a>
 80041d4:	9b07      	ldr	r3, [sp, #28]
 80041d6:	07d8      	lsls	r0, r3, #31
 80041d8:	d507      	bpl.n	80041ea <_svfprintf_r+0x166a>
 80041da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80041dc:	1c5d      	adds	r5, r3, #1
 80041de:	eb05 030b 	add.w	r3, r5, fp
 80041e2:	930d      	str	r3, [sp, #52]	; 0x34
 80041e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80041e8:	e529      	b.n	8003c3e <_svfprintf_r+0x10be>
 80041ea:	2301      	movs	r3, #1
 80041ec:	930d      	str	r3, [sp, #52]	; 0x34
 80041ee:	e526      	b.n	8003c3e <_svfprintf_r+0x10be>
 80041f0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80041f2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80041f6:	6805      	ldr	r5, [r0, #0]
 80041f8:	3004      	adds	r0, #4
 80041fa:	2d00      	cmp	r5, #0
 80041fc:	900e      	str	r0, [sp, #56]	; 0x38
 80041fe:	46a0      	mov	r8, r4
 8004200:	f6be ad18 	bge.w	8002c34 <_svfprintf_r+0xb4>
 8004204:	f04f 35ff 	mov.w	r5, #4294967295
 8004208:	f7fe bd14 	b.w	8002c34 <_svfprintf_r+0xb4>
 800420c:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004210:	f7fe bdc1 	b.w	8002d96 <_svfprintf_r+0x216>
 8004214:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8004218:	e6d4      	b.n	8003fc4 <_svfprintf_r+0x1444>
 800421a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800421c:	230c      	movs	r3, #12
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	f7fe bdaf 	b.w	8002d86 <_svfprintf_r+0x206>
 8004228:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800422c:	f7fe be30 	b.w	8002e90 <_svfprintf_r+0x310>
 8004230:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004234:	f7fe bf92 	b.w	800315c <_svfprintf_r+0x5dc>
 8004238:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800423c:	f7ff b845 	b.w	80032ca <_svfprintf_r+0x74a>
 8004240:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004244:	f7ff b813 	b.w	800326e <_svfprintf_r+0x6ee>
 8004248:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800424c:	f7fe bfe5 	b.w	800321a <_svfprintf_r+0x69a>
 8004250:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004254:	f7ff b92d 	b.w	80034b2 <_svfprintf_r+0x932>
 8004258:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800425c:	f7ff b908 	b.w	8003470 <_svfprintf_r+0x8f0>
 8004260:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004264:	f7ff b8e6 	b.w	8003434 <_svfprintf_r+0x8b4>
 8004268:	08009988 	.word	0x08009988
 800426c:	0800995c 	.word	0x0800995c
 8004270:	08009958 	.word	0x08009958
 8004274:	00000000 	.word	0x00000000

08004278 <_vfprintf_r>:
 8004278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427c:	b0c5      	sub	sp, #276	; 0x114
 800427e:	461c      	mov	r4, r3
 8004280:	9108      	str	r1, [sp, #32]
 8004282:	4616      	mov	r6, r2
 8004284:	4605      	mov	r5, r0
 8004286:	900a      	str	r0, [sp, #40]	; 0x28
 8004288:	f003 f820 	bl	80072cc <_localeconv_r>
 800428c:	6803      	ldr	r3, [r0, #0]
 800428e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004290:	4618      	mov	r0, r3
 8004292:	f7fe fbb5 	bl	8002a00 <strlen>
 8004296:	940e      	str	r4, [sp, #56]	; 0x38
 8004298:	9016      	str	r0, [sp, #88]	; 0x58
 800429a:	b11d      	cbz	r5, 80042a4 <_vfprintf_r+0x2c>
 800429c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8123 	beq.w	80044ea <_vfprintf_r+0x272>
 80042a4:	9808      	ldr	r0, [sp, #32]
 80042a6:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 80042aa:	b293      	uxth	r3, r2
 80042ac:	0499      	lsls	r1, r3, #18
 80042ae:	d407      	bmi.n	80042c0 <_vfprintf_r+0x48>
 80042b0:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80042b2:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 80042b6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80042ba:	8183      	strh	r3, [r0, #12]
 80042bc:	6641      	str	r1, [r0, #100]	; 0x64
 80042be:	b29b      	uxth	r3, r3
 80042c0:	071a      	lsls	r2, r3, #28
 80042c2:	f140 80dd 	bpl.w	8004480 <_vfprintf_r+0x208>
 80042c6:	9a08      	ldr	r2, [sp, #32]
 80042c8:	6912      	ldr	r2, [r2, #16]
 80042ca:	2a00      	cmp	r2, #0
 80042cc:	f000 80d8 	beq.w	8004480 <_vfprintf_r+0x208>
 80042d0:	f003 031a 	and.w	r3, r3, #26
 80042d4:	2b0a      	cmp	r3, #10
 80042d6:	f000 80e1 	beq.w	800449c <_vfprintf_r+0x224>
 80042da:	ed9f 7b87 	vldr	d7, [pc, #540]	; 80044f8 <_vfprintf_r+0x280>
 80042de:	2300      	movs	r3, #0
 80042e0:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80042e4:	9312      	str	r3, [sp, #72]	; 0x48
 80042e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80042e8:	9328      	str	r3, [sp, #160]	; 0xa0
 80042ea:	9319      	str	r3, [sp, #100]	; 0x64
 80042ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80042ee:	f8df a214 	ldr.w	sl, [pc, #532]	; 8004504 <_vfprintf_r+0x28c>
 80042f2:	ab34      	add	r3, sp, #208	; 0xd0
 80042f4:	9327      	str	r3, [sp, #156]	; 0x9c
 80042f6:	4699      	mov	r9, r3
 80042f8:	46b0      	mov	r8, r6
 80042fa:	f898 3000 	ldrb.w	r3, [r8]
 80042fe:	4644      	mov	r4, r8
 8004300:	b1eb      	cbz	r3, 800433e <_vfprintf_r+0xc6>
 8004302:	2b25      	cmp	r3, #37	; 0x25
 8004304:	d102      	bne.n	800430c <_vfprintf_r+0x94>
 8004306:	e01a      	b.n	800433e <_vfprintf_r+0xc6>
 8004308:	2b25      	cmp	r3, #37	; 0x25
 800430a:	d003      	beq.n	8004314 <_vfprintf_r+0x9c>
 800430c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f9      	bne.n	8004308 <_vfprintf_r+0x90>
 8004314:	ebc8 0504 	rsb	r5, r8, r4
 8004318:	b18d      	cbz	r5, 800433e <_vfprintf_r+0xc6>
 800431a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800431c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800431e:	f8c9 8000 	str.w	r8, [r9]
 8004322:	3301      	adds	r3, #1
 8004324:	442a      	add	r2, r5
 8004326:	2b07      	cmp	r3, #7
 8004328:	f8c9 5004 	str.w	r5, [r9, #4]
 800432c:	9229      	str	r2, [sp, #164]	; 0xa4
 800432e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004330:	f300 80c2 	bgt.w	80044b8 <_vfprintf_r+0x240>
 8004334:	f109 0908 	add.w	r9, r9, #8
 8004338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800433a:	442b      	add	r3, r5
 800433c:	930b      	str	r3, [sp, #44]	; 0x2c
 800433e:	7823      	ldrb	r3, [r4, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80c2 	beq.w	80044ca <_vfprintf_r+0x252>
 8004346:	2300      	movs	r3, #0
 8004348:	461a      	mov	r2, r3
 800434a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800434e:	4619      	mov	r1, r3
 8004350:	930c      	str	r3, [sp, #48]	; 0x30
 8004352:	9307      	str	r3, [sp, #28]
 8004354:	f04f 3bff 	mov.w	fp, #4294967295
 8004358:	7863      	ldrb	r3, [r4, #1]
 800435a:	f104 0801 	add.w	r8, r4, #1
 800435e:	465d      	mov	r5, fp
 8004360:	f108 0801 	add.w	r8, r8, #1
 8004364:	f1a3 0020 	sub.w	r0, r3, #32
 8004368:	2858      	cmp	r0, #88	; 0x58
 800436a:	f200 8459 	bhi.w	8004c20 <_vfprintf_r+0x9a8>
 800436e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004372:	040f      	.short	0x040f
 8004374:	04570457 	.word	0x04570457
 8004378:	04570418 	.word	0x04570418
 800437c:	04570457 	.word	0x04570457
 8004380:	04570457 	.word	0x04570457
 8004384:	03620457 	.word	0x03620457
 8004388:	04570449 	.word	0x04570449
 800438c:	0109005d 	.word	0x0109005d
 8004390:	01250457 	.word	0x01250457
 8004394:	03700370 	.word	0x03700370
 8004398:	03700370 	.word	0x03700370
 800439c:	03700370 	.word	0x03700370
 80043a0:	03700370 	.word	0x03700370
 80043a4:	04570370 	.word	0x04570370
 80043a8:	04570457 	.word	0x04570457
 80043ac:	04570457 	.word	0x04570457
 80043b0:	04570457 	.word	0x04570457
 80043b4:	04570457 	.word	0x04570457
 80043b8:	03800457 	.word	0x03800457
 80043bc:	0457039d 	.word	0x0457039d
 80043c0:	0457039d 	.word	0x0457039d
 80043c4:	04570457 	.word	0x04570457
 80043c8:	03eb0457 	.word	0x03eb0457
 80043cc:	04570457 	.word	0x04570457
 80043d0:	0457012c 	.word	0x0457012c
 80043d4:	04570457 	.word	0x04570457
 80043d8:	04570457 	.word	0x04570457
 80043dc:	04570155 	.word	0x04570155
 80043e0:	02b40457 	.word	0x02b40457
 80043e4:	04570457 	.word	0x04570457
 80043e8:	04570457 	.word	0x04570457
 80043ec:	04570457 	.word	0x04570457
 80043f0:	04570457 	.word	0x04570457
 80043f4:	04570457 	.word	0x04570457
 80043f8:	030f02f5 	.word	0x030f02f5
 80043fc:	039d039d 	.word	0x039d039d
 8004400:	033f039d 	.word	0x033f039d
 8004404:	0457030f 	.word	0x0457030f
 8004408:	03460457 	.word	0x03460457
 800440c:	03500457 	.word	0x03500457
 8004410:	006400cb 	.word	0x006400cb
 8004414:	04570420 	.word	0x04570420
 8004418:	04570428 	.word	0x04570428
 800441c:	045703f2 	.word	0x045703f2
 8004420:	03fa0457 	.word	0x03fa0457
 8004424:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004426:	930e      	str	r3, [sp, #56]	; 0x38
 8004428:	4240      	negs	r0, r0
 800442a:	900c      	str	r0, [sp, #48]	; 0x30
 800442c:	9b07      	ldr	r3, [sp, #28]
 800442e:	f043 0304 	orr.w	r3, r3, #4
 8004432:	9307      	str	r3, [sp, #28]
 8004434:	f898 3000 	ldrb.w	r3, [r8]
 8004438:	e792      	b.n	8004360 <_vfprintf_r+0xe8>
 800443a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800443c:	46ab      	mov	fp, r5
 800443e:	2100      	movs	r1, #0
 8004440:	6804      	ldr	r4, [r0, #0]
 8004442:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004446:	1d07      	adds	r7, r0, #4
 8004448:	9807      	ldr	r0, [sp, #28]
 800444a:	2330      	movs	r3, #48	; 0x30
 800444c:	2278      	movs	r2, #120	; 0x78
 800444e:	458b      	cmp	fp, r1
 8004450:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8004454:	f04f 0500 	mov.w	r5, #0
 8004458:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 800445c:	f040 0302 	orr.w	r3, r0, #2
 8004460:	f2c0 83fb 	blt.w	8004c5a <_vfprintf_r+0x9e2>
 8004464:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8004468:	f043 0302 	orr.w	r3, r3, #2
 800446c:	9307      	str	r3, [sp, #28]
 800446e:	ea54 0305 	orrs.w	r3, r4, r5
 8004472:	970e      	str	r7, [sp, #56]	; 0x38
 8004474:	f000 83cc 	beq.w	8004c10 <_vfprintf_r+0x998>
 8004478:	460f      	mov	r7, r1
 800447a:	9211      	str	r2, [sp, #68]	; 0x44
 800447c:	4820      	ldr	r0, [pc, #128]	; (8004500 <_vfprintf_r+0x288>)
 800447e:	e25d      	b.n	800493c <_vfprintf_r+0x6c4>
 8004480:	9908      	ldr	r1, [sp, #32]
 8004482:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004484:	f001 faf0 	bl	8005a68 <__swsetup_r>
 8004488:	2800      	cmp	r0, #0
 800448a:	f041 803f 	bne.w	800550c <_vfprintf_r+0x1294>
 800448e:	9b08      	ldr	r3, [sp, #32]
 8004490:	899b      	ldrh	r3, [r3, #12]
 8004492:	f003 031a 	and.w	r3, r3, #26
 8004496:	2b0a      	cmp	r3, #10
 8004498:	f47f af1f 	bne.w	80042da <_vfprintf_r+0x62>
 800449c:	9908      	ldr	r1, [sp, #32]
 800449e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f6ff af19 	blt.w	80042da <_vfprintf_r+0x62>
 80044a8:	4623      	mov	r3, r4
 80044aa:	4632      	mov	r2, r6
 80044ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80044ae:	f001 fa7f 	bl	80059b0 <__sbprintf>
 80044b2:	b045      	add	sp, #276	; 0x114
 80044b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b8:	aa27      	add	r2, sp, #156	; 0x9c
 80044ba:	9908      	ldr	r1, [sp, #32]
 80044bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80044be:	f004 f909 	bl	80086d4 <__sprint_r>
 80044c2:	b948      	cbnz	r0, 80044d8 <_vfprintf_r+0x260>
 80044c4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80044c8:	e736      	b.n	8004338 <_vfprintf_r+0xc0>
 80044ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80044cc:	b123      	cbz	r3, 80044d8 <_vfprintf_r+0x260>
 80044ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80044d0:	9908      	ldr	r1, [sp, #32]
 80044d2:	aa27      	add	r2, sp, #156	; 0x9c
 80044d4:	f004 f8fe 	bl	80086d4 <__sprint_r>
 80044d8:	9b08      	ldr	r3, [sp, #32]
 80044da:	899b      	ldrh	r3, [r3, #12]
 80044dc:	0659      	lsls	r1, r3, #25
 80044de:	f101 8015 	bmi.w	800550c <_vfprintf_r+0x1294>
 80044e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80044e4:	b045      	add	sp, #276	; 0x114
 80044e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80044ec:	f002 fc02 	bl	8006cf4 <__sinit>
 80044f0:	e6d8      	b.n	80042a4 <_vfprintf_r+0x2c>
 80044f2:	bf00      	nop
 80044f4:	f3af 8000 	nop.w
	...
 8004500:	08009974 	.word	0x08009974
 8004504:	080099a4 	.word	0x080099a4
 8004508:	9311      	str	r3, [sp, #68]	; 0x44
 800450a:	46ab      	mov	fp, r5
 800450c:	2a00      	cmp	r2, #0
 800450e:	f041 8232 	bne.w	8005976 <_vfprintf_r+0x16fe>
 8004512:	9a07      	ldr	r2, [sp, #28]
 8004514:	f012 0320 	ands.w	r3, r2, #32
 8004518:	d064      	beq.n	80045e4 <_vfprintf_r+0x36c>
 800451a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800451c:	3707      	adds	r7, #7
 800451e:	f027 0307 	bic.w	r3, r7, #7
 8004522:	2700      	movs	r7, #0
 8004524:	f103 0108 	add.w	r1, r3, #8
 8004528:	45bb      	cmp	fp, r7
 800452a:	910e      	str	r1, [sp, #56]	; 0x38
 800452c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004530:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004534:	f2c0 86ba 	blt.w	80052ac <_vfprintf_r+0x1034>
 8004538:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800453c:	9307      	str	r3, [sp, #28]
 800453e:	ea54 0305 	orrs.w	r3, r4, r5
 8004542:	f000 8382 	beq.w	8004c4a <_vfprintf_r+0x9d2>
 8004546:	ae34      	add	r6, sp, #208	; 0xd0
 8004548:	08e2      	lsrs	r2, r4, #3
 800454a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800454e:	08e9      	lsrs	r1, r5, #3
 8004550:	f004 0307 	and.w	r3, r4, #7
 8004554:	460d      	mov	r5, r1
 8004556:	4614      	mov	r4, r2
 8004558:	3330      	adds	r3, #48	; 0x30
 800455a:	ea54 0205 	orrs.w	r2, r4, r5
 800455e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8004562:	d1f1      	bne.n	8004548 <_vfprintf_r+0x2d0>
 8004564:	9a07      	ldr	r2, [sp, #28]
 8004566:	07d2      	lsls	r2, r2, #31
 8004568:	f140 8096 	bpl.w	8004698 <_vfprintf_r+0x420>
 800456c:	2b30      	cmp	r3, #48	; 0x30
 800456e:	f000 8093 	beq.w	8004698 <_vfprintf_r+0x420>
 8004572:	2230      	movs	r2, #48	; 0x30
 8004574:	1e73      	subs	r3, r6, #1
 8004576:	f806 2c01 	strb.w	r2, [r6, #-1]
 800457a:	aa34      	add	r2, sp, #208	; 0xd0
 800457c:	1ad2      	subs	r2, r2, r3
 800457e:	920d      	str	r2, [sp, #52]	; 0x34
 8004580:	461e      	mov	r6, r3
 8004582:	e08c      	b.n	800469e <_vfprintf_r+0x426>
 8004584:	f898 3000 	ldrb.w	r3, [r8]
 8004588:	2b2a      	cmp	r3, #42	; 0x2a
 800458a:	f108 0401 	add.w	r4, r8, #1
 800458e:	f001 81d0 	beq.w	8005932 <_vfprintf_r+0x16ba>
 8004592:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004596:	2809      	cmp	r0, #9
 8004598:	bf98      	it	ls
 800459a:	2500      	movls	r5, #0
 800459c:	f201 816c 	bhi.w	8005878 <_vfprintf_r+0x1600>
 80045a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80045a4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80045a8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80045ac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80045b0:	2809      	cmp	r0, #9
 80045b2:	d9f5      	bls.n	80045a0 <_vfprintf_r+0x328>
 80045b4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80045b8:	46a0      	mov	r8, r4
 80045ba:	e6d3      	b.n	8004364 <_vfprintf_r+0xec>
 80045bc:	9b07      	ldr	r3, [sp, #28]
 80045be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c2:	9307      	str	r3, [sp, #28]
 80045c4:	f898 3000 	ldrb.w	r3, [r8]
 80045c8:	e6ca      	b.n	8004360 <_vfprintf_r+0xe8>
 80045ca:	9311      	str	r3, [sp, #68]	; 0x44
 80045cc:	46ab      	mov	fp, r5
 80045ce:	2a00      	cmp	r2, #0
 80045d0:	f041 81d9 	bne.w	8005986 <_vfprintf_r+0x170e>
 80045d4:	9b07      	ldr	r3, [sp, #28]
 80045d6:	f043 0310 	orr.w	r3, r3, #16
 80045da:	9307      	str	r3, [sp, #28]
 80045dc:	9a07      	ldr	r2, [sp, #28]
 80045de:	f012 0320 	ands.w	r3, r2, #32
 80045e2:	d19a      	bne.n	800451a <_vfprintf_r+0x2a2>
 80045e4:	9907      	ldr	r1, [sp, #28]
 80045e6:	f011 0210 	ands.w	r2, r1, #16
 80045ea:	f000 8634 	beq.w	8005256 <_vfprintf_r+0xfde>
 80045ee:	980e      	ldr	r0, [sp, #56]	; 0x38
 80045f0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80045f4:	f1bb 0f00 	cmp.w	fp, #0
 80045f8:	6804      	ldr	r4, [r0, #0]
 80045fa:	f100 0704 	add.w	r7, r0, #4
 80045fe:	f04f 0500 	mov.w	r5, #0
 8004602:	f2c0 8652 	blt.w	80052aa <_vfprintf_r+0x1032>
 8004606:	460a      	mov	r2, r1
 8004608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800460c:	9207      	str	r2, [sp, #28]
 800460e:	ea54 0205 	orrs.w	r2, r4, r5
 8004612:	970e      	str	r7, [sp, #56]	; 0x38
 8004614:	f000 8319 	beq.w	8004c4a <_vfprintf_r+0x9d2>
 8004618:	461f      	mov	r7, r3
 800461a:	e794      	b.n	8004546 <_vfprintf_r+0x2ce>
 800461c:	9311      	str	r3, [sp, #68]	; 0x44
 800461e:	46ab      	mov	fp, r5
 8004620:	2a00      	cmp	r2, #0
 8004622:	f041 81a0 	bne.w	8005966 <_vfprintf_r+0x16ee>
 8004626:	9b07      	ldr	r3, [sp, #28]
 8004628:	f043 0310 	orr.w	r3, r3, #16
 800462c:	9307      	str	r3, [sp, #28]
 800462e:	9a07      	ldr	r2, [sp, #28]
 8004630:	f012 0320 	ands.w	r3, r2, #32
 8004634:	f000 84fa 	beq.w	800502c <_vfprintf_r+0xdb4>
 8004638:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800463a:	3707      	adds	r7, #7
 800463c:	f027 0307 	bic.w	r3, r7, #7
 8004640:	2700      	movs	r7, #0
 8004642:	f103 0108 	add.w	r1, r3, #8
 8004646:	45bb      	cmp	fp, r7
 8004648:	910e      	str	r1, [sp, #56]	; 0x38
 800464a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800464e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004652:	f2c0 8523 	blt.w	800509c <_vfprintf_r+0xe24>
 8004656:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800465a:	9307      	str	r3, [sp, #28]
 800465c:	ea54 0305 	orrs.w	r3, r4, r5
 8004660:	f000 81bc 	beq.w	80049dc <_vfprintf_r+0x764>
 8004664:	2d00      	cmp	r5, #0
 8004666:	bf08      	it	eq
 8004668:	2c0a      	cmpeq	r4, #10
 800466a:	f0c0 851b 	bcc.w	80050a4 <_vfprintf_r+0xe2c>
 800466e:	ae34      	add	r6, sp, #208	; 0xd0
 8004670:	4620      	mov	r0, r4
 8004672:	4629      	mov	r1, r5
 8004674:	220a      	movs	r2, #10
 8004676:	2300      	movs	r3, #0
 8004678:	f004 fec4 	bl	8009404 <__aeabi_uldivmod>
 800467c:	3230      	adds	r2, #48	; 0x30
 800467e:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8004682:	4620      	mov	r0, r4
 8004684:	4629      	mov	r1, r5
 8004686:	2300      	movs	r3, #0
 8004688:	220a      	movs	r2, #10
 800468a:	f004 febb 	bl	8009404 <__aeabi_uldivmod>
 800468e:	4604      	mov	r4, r0
 8004690:	460d      	mov	r5, r1
 8004692:	ea54 0305 	orrs.w	r3, r4, r5
 8004696:	d1eb      	bne.n	8004670 <_vfprintf_r+0x3f8>
 8004698:	ab34      	add	r3, sp, #208	; 0xd0
 800469a:	1b9b      	subs	r3, r3, r6
 800469c:	930d      	str	r3, [sp, #52]	; 0x34
 800469e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046a0:	455b      	cmp	r3, fp
 80046a2:	bfb8      	it	lt
 80046a4:	465b      	movlt	r3, fp
 80046a6:	9309      	str	r3, [sp, #36]	; 0x24
 80046a8:	2300      	movs	r3, #0
 80046aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80046ac:	b117      	cbz	r7, 80046b4 <_vfprintf_r+0x43c>
 80046ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046b0:	3301      	adds	r3, #1
 80046b2:	9309      	str	r3, [sp, #36]	; 0x24
 80046b4:	9b07      	ldr	r3, [sp, #28]
 80046b6:	f013 0302 	ands.w	r3, r3, #2
 80046ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80046bc:	d002      	beq.n	80046c4 <_vfprintf_r+0x44c>
 80046be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046c0:	3302      	adds	r3, #2
 80046c2:	9309      	str	r3, [sp, #36]	; 0x24
 80046c4:	9b07      	ldr	r3, [sp, #28]
 80046c6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80046ca:	9310      	str	r3, [sp, #64]	; 0x40
 80046cc:	f040 82d2 	bne.w	8004c74 <_vfprintf_r+0x9fc>
 80046d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046d4:	1a9d      	subs	r5, r3, r2
 80046d6:	2d00      	cmp	r5, #0
 80046d8:	f340 82cc 	ble.w	8004c74 <_vfprintf_r+0x9fc>
 80046dc:	2d10      	cmp	r5, #16
 80046de:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80046e0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80046e2:	4fa8      	ldr	r7, [pc, #672]	; (8004984 <_vfprintf_r+0x70c>)
 80046e4:	dd27      	ble.n	8004736 <_vfprintf_r+0x4be>
 80046e6:	9618      	str	r6, [sp, #96]	; 0x60
 80046e8:	4648      	mov	r0, r9
 80046ea:	2410      	movs	r4, #16
 80046ec:	46b9      	mov	r9, r7
 80046ee:	9e08      	ldr	r6, [sp, #32]
 80046f0:	462f      	mov	r7, r5
 80046f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80046f4:	e004      	b.n	8004700 <_vfprintf_r+0x488>
 80046f6:	3f10      	subs	r7, #16
 80046f8:	2f10      	cmp	r7, #16
 80046fa:	f100 0008 	add.w	r0, r0, #8
 80046fe:	dd16      	ble.n	800472e <_vfprintf_r+0x4b6>
 8004700:	3201      	adds	r2, #1
 8004702:	4ba0      	ldr	r3, [pc, #640]	; (8004984 <_vfprintf_r+0x70c>)
 8004704:	9228      	str	r2, [sp, #160]	; 0xa0
 8004706:	3110      	adds	r1, #16
 8004708:	2a07      	cmp	r2, #7
 800470a:	9129      	str	r1, [sp, #164]	; 0xa4
 800470c:	e880 0018 	stmia.w	r0, {r3, r4}
 8004710:	ddf1      	ble.n	80046f6 <_vfprintf_r+0x47e>
 8004712:	aa27      	add	r2, sp, #156	; 0x9c
 8004714:	4631      	mov	r1, r6
 8004716:	4628      	mov	r0, r5
 8004718:	f003 ffdc 	bl	80086d4 <__sprint_r>
 800471c:	2800      	cmp	r0, #0
 800471e:	f47f aedb 	bne.w	80044d8 <_vfprintf_r+0x260>
 8004722:	3f10      	subs	r7, #16
 8004724:	2f10      	cmp	r7, #16
 8004726:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004728:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800472a:	a834      	add	r0, sp, #208	; 0xd0
 800472c:	dce8      	bgt.n	8004700 <_vfprintf_r+0x488>
 800472e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8004730:	463d      	mov	r5, r7
 8004732:	464f      	mov	r7, r9
 8004734:	4681      	mov	r9, r0
 8004736:	3201      	adds	r2, #1
 8004738:	186c      	adds	r4, r5, r1
 800473a:	2a07      	cmp	r2, #7
 800473c:	9429      	str	r4, [sp, #164]	; 0xa4
 800473e:	9228      	str	r2, [sp, #160]	; 0xa0
 8004740:	f8c9 7000 	str.w	r7, [r9]
 8004744:	f8c9 5004 	str.w	r5, [r9, #4]
 8004748:	f300 8428 	bgt.w	8004f9c <_vfprintf_r+0xd24>
 800474c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004750:	f109 0908 	add.w	r9, r9, #8
 8004754:	b177      	cbz	r7, 8004774 <_vfprintf_r+0x4fc>
 8004756:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004758:	3301      	adds	r3, #1
 800475a:	3401      	adds	r4, #1
 800475c:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8004760:	2201      	movs	r2, #1
 8004762:	2b07      	cmp	r3, #7
 8004764:	9429      	str	r4, [sp, #164]	; 0xa4
 8004766:	9328      	str	r3, [sp, #160]	; 0xa0
 8004768:	e889 0006 	stmia.w	r9, {r1, r2}
 800476c:	f300 83a0 	bgt.w	8004eb0 <_vfprintf_r+0xc38>
 8004770:	f109 0908 	add.w	r9, r9, #8
 8004774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004776:	b16b      	cbz	r3, 8004794 <_vfprintf_r+0x51c>
 8004778:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800477a:	3301      	adds	r3, #1
 800477c:	3402      	adds	r4, #2
 800477e:	a920      	add	r1, sp, #128	; 0x80
 8004780:	2202      	movs	r2, #2
 8004782:	2b07      	cmp	r3, #7
 8004784:	9429      	str	r4, [sp, #164]	; 0xa4
 8004786:	9328      	str	r3, [sp, #160]	; 0xa0
 8004788:	e889 0006 	stmia.w	r9, {r1, r2}
 800478c:	f300 839c 	bgt.w	8004ec8 <_vfprintf_r+0xc50>
 8004790:	f109 0908 	add.w	r9, r9, #8
 8004794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004796:	2b80      	cmp	r3, #128	; 0x80
 8004798:	f000 82d0 	beq.w	8004d3c <_vfprintf_r+0xac4>
 800479c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800479e:	ebc3 070b 	rsb	r7, r3, fp
 80047a2:	2f00      	cmp	r7, #0
 80047a4:	dd33      	ble.n	800480e <_vfprintf_r+0x596>
 80047a6:	4a78      	ldr	r2, [pc, #480]	; (8004988 <_vfprintf_r+0x710>)
 80047a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80047aa:	920f      	str	r2, [sp, #60]	; 0x3c
 80047ac:	2f10      	cmp	r7, #16
 80047ae:	dd22      	ble.n	80047f6 <_vfprintf_r+0x57e>
 80047b0:	4622      	mov	r2, r4
 80047b2:	f04f 0b10 	mov.w	fp, #16
 80047b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80047b8:	9c08      	ldr	r4, [sp, #32]
 80047ba:	e004      	b.n	80047c6 <_vfprintf_r+0x54e>
 80047bc:	3f10      	subs	r7, #16
 80047be:	2f10      	cmp	r7, #16
 80047c0:	f109 0908 	add.w	r9, r9, #8
 80047c4:	dd16      	ble.n	80047f4 <_vfprintf_r+0x57c>
 80047c6:	3301      	adds	r3, #1
 80047c8:	3210      	adds	r2, #16
 80047ca:	2b07      	cmp	r3, #7
 80047cc:	9229      	str	r2, [sp, #164]	; 0xa4
 80047ce:	9328      	str	r3, [sp, #160]	; 0xa0
 80047d0:	e889 0c00 	stmia.w	r9, {sl, fp}
 80047d4:	ddf2      	ble.n	80047bc <_vfprintf_r+0x544>
 80047d6:	aa27      	add	r2, sp, #156	; 0x9c
 80047d8:	4621      	mov	r1, r4
 80047da:	4628      	mov	r0, r5
 80047dc:	f003 ff7a 	bl	80086d4 <__sprint_r>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	f47f ae79 	bne.w	80044d8 <_vfprintf_r+0x260>
 80047e6:	3f10      	subs	r7, #16
 80047e8:	2f10      	cmp	r7, #16
 80047ea:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80047ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80047ee:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80047f2:	dce8      	bgt.n	80047c6 <_vfprintf_r+0x54e>
 80047f4:	4614      	mov	r4, r2
 80047f6:	3301      	adds	r3, #1
 80047f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80047fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80047fc:	443c      	add	r4, r7
 80047fe:	2b07      	cmp	r3, #7
 8004800:	9429      	str	r4, [sp, #164]	; 0xa4
 8004802:	e889 0084 	stmia.w	r9, {r2, r7}
 8004806:	f300 8347 	bgt.w	8004e98 <_vfprintf_r+0xc20>
 800480a:	f109 0908 	add.w	r9, r9, #8
 800480e:	9b07      	ldr	r3, [sp, #28]
 8004810:	05dd      	lsls	r5, r3, #23
 8004812:	f100 8231 	bmi.w	8004c78 <_vfprintf_r+0xa00>
 8004816:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004818:	990d      	ldr	r1, [sp, #52]	; 0x34
 800481a:	f8c9 6000 	str.w	r6, [r9]
 800481e:	3301      	adds	r3, #1
 8004820:	440c      	add	r4, r1
 8004822:	2b07      	cmp	r3, #7
 8004824:	9429      	str	r4, [sp, #164]	; 0xa4
 8004826:	f8c9 1004 	str.w	r1, [r9, #4]
 800482a:	9328      	str	r3, [sp, #160]	; 0xa0
 800482c:	f300 831e 	bgt.w	8004e6c <_vfprintf_r+0xbf4>
 8004830:	f109 0908 	add.w	r9, r9, #8
 8004834:	9b07      	ldr	r3, [sp, #28]
 8004836:	0758      	lsls	r0, r3, #29
 8004838:	d53f      	bpl.n	80048ba <_vfprintf_r+0x642>
 800483a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800483c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800483e:	1a9d      	subs	r5, r3, r2
 8004840:	2d00      	cmp	r5, #0
 8004842:	dd3a      	ble.n	80048ba <_vfprintf_r+0x642>
 8004844:	2d10      	cmp	r5, #16
 8004846:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004848:	4f4e      	ldr	r7, [pc, #312]	; (8004984 <_vfprintf_r+0x70c>)
 800484a:	dd23      	ble.n	8004894 <_vfprintf_r+0x61c>
 800484c:	4622      	mov	r2, r4
 800484e:	2610      	movs	r6, #16
 8004850:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004854:	9c08      	ldr	r4, [sp, #32]
 8004856:	e004      	b.n	8004862 <_vfprintf_r+0x5ea>
 8004858:	3d10      	subs	r5, #16
 800485a:	2d10      	cmp	r5, #16
 800485c:	f109 0908 	add.w	r9, r9, #8
 8004860:	dd17      	ble.n	8004892 <_vfprintf_r+0x61a>
 8004862:	3301      	adds	r3, #1
 8004864:	4947      	ldr	r1, [pc, #284]	; (8004984 <_vfprintf_r+0x70c>)
 8004866:	9328      	str	r3, [sp, #160]	; 0xa0
 8004868:	3210      	adds	r2, #16
 800486a:	2b07      	cmp	r3, #7
 800486c:	9229      	str	r2, [sp, #164]	; 0xa4
 800486e:	e889 0042 	stmia.w	r9, {r1, r6}
 8004872:	ddf1      	ble.n	8004858 <_vfprintf_r+0x5e0>
 8004874:	aa27      	add	r2, sp, #156	; 0x9c
 8004876:	4621      	mov	r1, r4
 8004878:	4658      	mov	r0, fp
 800487a:	f003 ff2b 	bl	80086d4 <__sprint_r>
 800487e:	2800      	cmp	r0, #0
 8004880:	f47f ae2a 	bne.w	80044d8 <_vfprintf_r+0x260>
 8004884:	3d10      	subs	r5, #16
 8004886:	2d10      	cmp	r5, #16
 8004888:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800488a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800488c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004890:	dce7      	bgt.n	8004862 <_vfprintf_r+0x5ea>
 8004892:	4614      	mov	r4, r2
 8004894:	3301      	adds	r3, #1
 8004896:	442c      	add	r4, r5
 8004898:	2b07      	cmp	r3, #7
 800489a:	9429      	str	r4, [sp, #164]	; 0xa4
 800489c:	9328      	str	r3, [sp, #160]	; 0xa0
 800489e:	f8c9 7000 	str.w	r7, [r9]
 80048a2:	f8c9 5004 	str.w	r5, [r9, #4]
 80048a6:	dd08      	ble.n	80048ba <_vfprintf_r+0x642>
 80048a8:	aa27      	add	r2, sp, #156	; 0x9c
 80048aa:	9908      	ldr	r1, [sp, #32]
 80048ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80048ae:	f003 ff11 	bl	80086d4 <__sprint_r>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	f47f ae10 	bne.w	80044d8 <_vfprintf_r+0x260>
 80048b8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80048ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048c0:	428a      	cmp	r2, r1
 80048c2:	bfac      	ite	ge
 80048c4:	189b      	addge	r3, r3, r2
 80048c6:	185b      	addlt	r3, r3, r1
 80048c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80048ca:	2c00      	cmp	r4, #0
 80048cc:	f040 82da 	bne.w	8004e84 <_vfprintf_r+0xc0c>
 80048d0:	2300      	movs	r3, #0
 80048d2:	9328      	str	r3, [sp, #160]	; 0xa0
 80048d4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80048d8:	e50f      	b.n	80042fa <_vfprintf_r+0x82>
 80048da:	9311      	str	r3, [sp, #68]	; 0x44
 80048dc:	46ab      	mov	fp, r5
 80048de:	2a00      	cmp	r2, #0
 80048e0:	f041 803d 	bne.w	800595e <_vfprintf_r+0x16e6>
 80048e4:	9b07      	ldr	r3, [sp, #28]
 80048e6:	4829      	ldr	r0, [pc, #164]	; (800498c <_vfprintf_r+0x714>)
 80048e8:	069c      	lsls	r4, r3, #26
 80048ea:	f140 8146 	bpl.w	8004b7a <_vfprintf_r+0x902>
 80048ee:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80048f0:	3707      	adds	r7, #7
 80048f2:	f027 0307 	bic.w	r3, r7, #7
 80048f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80048fa:	f103 0208 	add.w	r2, r3, #8
 80048fe:	920e      	str	r2, [sp, #56]	; 0x38
 8004900:	9a07      	ldr	r2, [sp, #28]
 8004902:	f012 0701 	ands.w	r7, r2, #1
 8004906:	f000 82eb 	beq.w	8004ee0 <_vfprintf_r+0xc68>
 800490a:	ea54 0305 	orrs.w	r3, r4, r5
 800490e:	f000 8582 	beq.w	8005416 <_vfprintf_r+0x119e>
 8004912:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8004916:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 800491a:	2700      	movs	r7, #0
 800491c:	9a07      	ldr	r2, [sp, #28]
 800491e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004922:	2330      	movs	r3, #48	; 0x30
 8004924:	45bb      	cmp	fp, r7
 8004926:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 800492a:	f042 0302 	orr.w	r3, r2, #2
 800492e:	f2c0 873b 	blt.w	80057a8 <_vfprintf_r+0x1530>
 8004932:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004936:	f043 0302 	orr.w	r3, r3, #2
 800493a:	9307      	str	r3, [sp, #28]
 800493c:	ae34      	add	r6, sp, #208	; 0xd0
 800493e:	0923      	lsrs	r3, r4, #4
 8004940:	f004 010f 	and.w	r1, r4, #15
 8004944:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8004948:	092a      	lsrs	r2, r5, #4
 800494a:	461c      	mov	r4, r3
 800494c:	4615      	mov	r5, r2
 800494e:	5c43      	ldrb	r3, [r0, r1]
 8004950:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8004954:	ea54 0305 	orrs.w	r3, r4, r5
 8004958:	d1f1      	bne.n	800493e <_vfprintf_r+0x6c6>
 800495a:	e69d      	b.n	8004698 <_vfprintf_r+0x420>
 800495c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800495e:	9311      	str	r3, [sp, #68]	; 0x44
 8004960:	680a      	ldr	r2, [r1, #0]
 8004962:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8004966:	2300      	movs	r3, #0
 8004968:	460a      	mov	r2, r1
 800496a:	461f      	mov	r7, r3
 800496c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004970:	3204      	adds	r2, #4
 8004972:	2301      	movs	r3, #1
 8004974:	9309      	str	r3, [sp, #36]	; 0x24
 8004976:	46bb      	mov	fp, r7
 8004978:	9713      	str	r7, [sp, #76]	; 0x4c
 800497a:	920e      	str	r2, [sp, #56]	; 0x38
 800497c:	930d      	str	r3, [sp, #52]	; 0x34
 800497e:	ae2a      	add	r6, sp, #168	; 0xa8
 8004980:	e698      	b.n	80046b4 <_vfprintf_r+0x43c>
 8004982:	bf00      	nop
 8004984:	080099b4 	.word	0x080099b4
 8004988:	080099a4 	.word	0x080099a4
 800498c:	08009960 	.word	0x08009960
 8004990:	9311      	str	r3, [sp, #68]	; 0x44
 8004992:	46ab      	mov	fp, r5
 8004994:	2a00      	cmp	r2, #0
 8004996:	f040 87ea 	bne.w	800596e <_vfprintf_r+0x16f6>
 800499a:	9b07      	ldr	r3, [sp, #28]
 800499c:	069b      	lsls	r3, r3, #26
 800499e:	d574      	bpl.n	8004a8a <_vfprintf_r+0x812>
 80049a0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80049a2:	3707      	adds	r7, #7
 80049a4:	f027 0707 	bic.w	r7, r7, #7
 80049a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049ac:	f107 0108 	add.w	r1, r7, #8
 80049b0:	910e      	str	r1, [sp, #56]	; 0x38
 80049b2:	4614      	mov	r4, r2
 80049b4:	461d      	mov	r5, r3
 80049b6:	2a00      	cmp	r2, #0
 80049b8:	f173 0300 	sbcs.w	r3, r3, #0
 80049bc:	f2c0 843a 	blt.w	8005234 <_vfprintf_r+0xfbc>
 80049c0:	f1bb 0f00 	cmp.w	fp, #0
 80049c4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80049c8:	f2c0 8368 	blt.w	800509c <_vfprintf_r+0xe24>
 80049cc:	9b07      	ldr	r3, [sp, #28]
 80049ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d2:	9307      	str	r3, [sp, #28]
 80049d4:	ea54 0305 	orrs.w	r3, r4, r5
 80049d8:	f47f ae44 	bne.w	8004664 <_vfprintf_r+0x3ec>
 80049dc:	f1bb 0f00 	cmp.w	fp, #0
 80049e0:	f040 8408 	bne.w	80051f4 <_vfprintf_r+0xf7c>
 80049e4:	f04f 0b00 	mov.w	fp, #0
 80049e8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80049ec:	ae34      	add	r6, sp, #208	; 0xd0
 80049ee:	e656      	b.n	800469e <_vfprintf_r+0x426>
 80049f0:	9b07      	ldr	r3, [sp, #28]
 80049f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049f6:	9307      	str	r3, [sp, #28]
 80049f8:	f898 3000 	ldrb.w	r3, [r8]
 80049fc:	e4b0      	b.n	8004360 <_vfprintf_r+0xe8>
 80049fe:	f898 3000 	ldrb.w	r3, [r8]
 8004a02:	2b6c      	cmp	r3, #108	; 0x6c
 8004a04:	f000 85d5 	beq.w	80055b2 <_vfprintf_r+0x133a>
 8004a08:	9807      	ldr	r0, [sp, #28]
 8004a0a:	f040 0010 	orr.w	r0, r0, #16
 8004a0e:	9007      	str	r0, [sp, #28]
 8004a10:	e4a6      	b.n	8004360 <_vfprintf_r+0xe8>
 8004a12:	2a00      	cmp	r2, #0
 8004a14:	f040 879f 	bne.w	8005956 <_vfprintf_r+0x16de>
 8004a18:	9b07      	ldr	r3, [sp, #28]
 8004a1a:	069f      	lsls	r7, r3, #26
 8004a1c:	f140 84e4 	bpl.w	80053e8 <_vfprintf_r+0x1170>
 8004a20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a24:	6813      	ldr	r3, [r2, #0]
 8004a26:	17cd      	asrs	r5, r1, #31
 8004a28:	4608      	mov	r0, r1
 8004a2a:	3204      	adds	r2, #4
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	920e      	str	r2, [sp, #56]	; 0x38
 8004a30:	e9c3 0100 	strd	r0, r1, [r3]
 8004a34:	e461      	b.n	80042fa <_vfprintf_r+0x82>
 8004a36:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	930c      	str	r3, [sp, #48]	; 0x30
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	4623      	mov	r3, r4
 8004a42:	f103 0304 	add.w	r3, r3, #4
 8004a46:	f6ff aced 	blt.w	8004424 <_vfprintf_r+0x1ac>
 8004a4a:	930e      	str	r3, [sp, #56]	; 0x38
 8004a4c:	f898 3000 	ldrb.w	r3, [r8]
 8004a50:	e486      	b.n	8004360 <_vfprintf_r+0xe8>
 8004a52:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004a56:	2300      	movs	r3, #0
 8004a58:	461c      	mov	r4, r3
 8004a5a:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004a5e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004a62:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8004a66:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004a6a:	2809      	cmp	r0, #9
 8004a6c:	d9f5      	bls.n	8004a5a <_vfprintf_r+0x7e2>
 8004a6e:	940c      	str	r4, [sp, #48]	; 0x30
 8004a70:	e478      	b.n	8004364 <_vfprintf_r+0xec>
 8004a72:	9311      	str	r3, [sp, #68]	; 0x44
 8004a74:	46ab      	mov	fp, r5
 8004a76:	2a00      	cmp	r2, #0
 8004a78:	f040 8769 	bne.w	800594e <_vfprintf_r+0x16d6>
 8004a7c:	9b07      	ldr	r3, [sp, #28]
 8004a7e:	f043 0310 	orr.w	r3, r3, #16
 8004a82:	9307      	str	r3, [sp, #28]
 8004a84:	9b07      	ldr	r3, [sp, #28]
 8004a86:	069b      	lsls	r3, r3, #26
 8004a88:	d48a      	bmi.n	80049a0 <_vfprintf_r+0x728>
 8004a8a:	9b07      	ldr	r3, [sp, #28]
 8004a8c:	06df      	lsls	r7, r3, #27
 8004a8e:	f100 8294 	bmi.w	8004fba <_vfprintf_r+0xd42>
 8004a92:	9b07      	ldr	r3, [sp, #28]
 8004a94:	065e      	lsls	r6, r3, #25
 8004a96:	f140 8290 	bpl.w	8004fba <_vfprintf_r+0xd42>
 8004a9a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004a9c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8004aa0:	3104      	adds	r1, #4
 8004aa2:	17e5      	asrs	r5, r4, #31
 8004aa4:	4622      	mov	r2, r4
 8004aa6:	462b      	mov	r3, r5
 8004aa8:	910e      	str	r1, [sp, #56]	; 0x38
 8004aaa:	e784      	b.n	80049b6 <_vfprintf_r+0x73e>
 8004aac:	9311      	str	r3, [sp, #68]	; 0x44
 8004aae:	46ab      	mov	fp, r5
 8004ab0:	2a00      	cmp	r2, #0
 8004ab2:	f040 8770 	bne.w	8005996 <_vfprintf_r+0x171e>
 8004ab6:	9b07      	ldr	r3, [sp, #28]
 8004ab8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004aba:	071d      	lsls	r5, r3, #28
 8004abc:	f107 0707 	add.w	r7, r7, #7
 8004ac0:	f140 8487 	bpl.w	80053d2 <_vfprintf_r+0x115a>
 8004ac4:	f027 0307 	bic.w	r3, r7, #7
 8004ac8:	ed93 7b00 	vldr	d7, [r3]
 8004acc:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004ad0:	f103 0208 	add.w	r2, r3, #8
 8004ad4:	920e      	str	r2, [sp, #56]	; 0x38
 8004ad6:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8004ada:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8004ade:	911a      	str	r1, [sp, #104]	; 0x68
 8004ae0:	931b      	str	r3, [sp, #108]	; 0x6c
 8004ae2:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8004ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aea:	4620      	mov	r0, r4
 8004aec:	4629      	mov	r1, r5
 8004aee:	4bb5      	ldr	r3, [pc, #724]	; (8004dc4 <_vfprintf_r+0xb4c>)
 8004af0:	f004 fc4a 	bl	8009388 <__aeabi_dcmpun>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	f040 83eb 	bne.w	80052d0 <_vfprintf_r+0x1058>
 8004afa:	f04f 32ff 	mov.w	r2, #4294967295
 8004afe:	4bb1      	ldr	r3, [pc, #708]	; (8004dc4 <_vfprintf_r+0xb4c>)
 8004b00:	4620      	mov	r0, r4
 8004b02:	4629      	mov	r1, r5
 8004b04:	f004 fc22 	bl	800934c <__aeabi_dcmple>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	f040 83e1 	bne.w	80052d0 <_vfprintf_r+0x1058>
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2300      	movs	r3, #0
 8004b12:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004b16:	f004 fc0f 	bl	8009338 <__aeabi_dcmplt>
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	f040 864a 	bne.w	80057b4 <_vfprintf_r+0x153c>
 8004b20:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004b24:	4ea8      	ldr	r6, [pc, #672]	; (8004dc8 <_vfprintf_r+0xb50>)
 8004b26:	4ba9      	ldr	r3, [pc, #676]	; (8004dcc <_vfprintf_r+0xb54>)
 8004b28:	9907      	ldr	r1, [sp, #28]
 8004b2a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004b2e:	9107      	str	r1, [sp, #28]
 8004b30:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004b32:	2203      	movs	r2, #3
 8004b34:	f04f 0b00 	mov.w	fp, #0
 8004b38:	9209      	str	r2, [sp, #36]	; 0x24
 8004b3a:	2947      	cmp	r1, #71	; 0x47
 8004b3c:	bfd8      	it	le
 8004b3e:	461e      	movle	r6, r3
 8004b40:	920d      	str	r2, [sp, #52]	; 0x34
 8004b42:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8004b46:	e5b1      	b.n	80046ac <_vfprintf_r+0x434>
 8004b48:	9b07      	ldr	r3, [sp, #28]
 8004b4a:	f043 0308 	orr.w	r3, r3, #8
 8004b4e:	9307      	str	r3, [sp, #28]
 8004b50:	f898 3000 	ldrb.w	r3, [r8]
 8004b54:	e404      	b.n	8004360 <_vfprintf_r+0xe8>
 8004b56:	9311      	str	r3, [sp, #68]	; 0x44
 8004b58:	46ab      	mov	fp, r5
 8004b5a:	2a00      	cmp	r2, #0
 8004b5c:	f43f ad67 	beq.w	800462e <_vfprintf_r+0x3b6>
 8004b60:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004b64:	e563      	b.n	800462e <_vfprintf_r+0x3b6>
 8004b66:	9311      	str	r3, [sp, #68]	; 0x44
 8004b68:	46ab      	mov	fp, r5
 8004b6a:	2a00      	cmp	r2, #0
 8004b6c:	f040 870f 	bne.w	800598e <_vfprintf_r+0x1716>
 8004b70:	9b07      	ldr	r3, [sp, #28]
 8004b72:	4897      	ldr	r0, [pc, #604]	; (8004dd0 <_vfprintf_r+0xb58>)
 8004b74:	069c      	lsls	r4, r3, #26
 8004b76:	f53f aeba 	bmi.w	80048ee <_vfprintf_r+0x676>
 8004b7a:	9b07      	ldr	r3, [sp, #28]
 8004b7c:	06d9      	lsls	r1, r3, #27
 8004b7e:	f140 8398 	bpl.w	80052b2 <_vfprintf_r+0x103a>
 8004b82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b84:	4613      	mov	r3, r2
 8004b86:	3304      	adds	r3, #4
 8004b88:	6814      	ldr	r4, [r2, #0]
 8004b8a:	930e      	str	r3, [sp, #56]	; 0x38
 8004b8c:	2500      	movs	r5, #0
 8004b8e:	e6b7      	b.n	8004900 <_vfprintf_r+0x688>
 8004b90:	f898 3000 	ldrb.w	r3, [r8]
 8004b94:	2900      	cmp	r1, #0
 8004b96:	f47f abe3 	bne.w	8004360 <_vfprintf_r+0xe8>
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	2120      	movs	r1, #32
 8004b9e:	f7ff bbdf 	b.w	8004360 <_vfprintf_r+0xe8>
 8004ba2:	9b07      	ldr	r3, [sp, #28]
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	9307      	str	r3, [sp, #28]
 8004baa:	f898 3000 	ldrb.w	r3, [r8]
 8004bae:	f7ff bbd7 	b.w	8004360 <_vfprintf_r+0xe8>
 8004bb2:	9b07      	ldr	r3, [sp, #28]
 8004bb4:	f043 0320 	orr.w	r3, r3, #32
 8004bb8:	9307      	str	r3, [sp, #28]
 8004bba:	f898 3000 	ldrb.w	r3, [r8]
 8004bbe:	f7ff bbcf 	b.w	8004360 <_vfprintf_r+0xe8>
 8004bc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bc4:	9311      	str	r3, [sp, #68]	; 0x44
 8004bc6:	6816      	ldr	r6, [r2, #0]
 8004bc8:	2400      	movs	r4, #0
 8004bca:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 8004bce:	1d17      	adds	r7, r2, #4
 8004bd0:	2e00      	cmp	r6, #0
 8004bd2:	f000 85b7 	beq.w	8005744 <_vfprintf_r+0x14cc>
 8004bd6:	2d00      	cmp	r5, #0
 8004bd8:	f2c0 8502 	blt.w	80055e0 <_vfprintf_r+0x1368>
 8004bdc:	462a      	mov	r2, r5
 8004bde:	4621      	mov	r1, r4
 8004be0:	4630      	mov	r0, r6
 8004be2:	f002 fead 	bl	8007940 <memchr>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	f000 861c 	beq.w	8005824 <_vfprintf_r+0x15ac>
 8004bec:	1b83      	subs	r3, r0, r6
 8004bee:	930d      	str	r3, [sp, #52]	; 0x34
 8004bf0:	46a3      	mov	fp, r4
 8004bf2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004bf6:	970e      	str	r7, [sp, #56]	; 0x38
 8004bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8004bfa:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8004bfe:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004c02:	e553      	b.n	80046ac <_vfprintf_r+0x434>
 8004c04:	f898 3000 	ldrb.w	r3, [r8]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	212b      	movs	r1, #43	; 0x2b
 8004c0c:	f7ff bba8 	b.w	8004360 <_vfprintf_r+0xe8>
 8004c10:	486f      	ldr	r0, [pc, #444]	; (8004dd0 <_vfprintf_r+0xb58>)
 8004c12:	9211      	str	r2, [sp, #68]	; 0x44
 8004c14:	f1bb 0f00 	cmp.w	fp, #0
 8004c18:	f040 8173 	bne.w	8004f02 <_vfprintf_r+0xc8a>
 8004c1c:	465f      	mov	r7, fp
 8004c1e:	e6e1      	b.n	80049e4 <_vfprintf_r+0x76c>
 8004c20:	9311      	str	r3, [sp, #68]	; 0x44
 8004c22:	2a00      	cmp	r2, #0
 8004c24:	f040 86ab 	bne.w	800597e <_vfprintf_r+0x1706>
 8004c28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004c2a:	2a00      	cmp	r2, #0
 8004c2c:	f43f ac4d 	beq.w	80044ca <_vfprintf_r+0x252>
 8004c30:	2300      	movs	r3, #0
 8004c32:	2101      	movs	r1, #1
 8004c34:	461f      	mov	r7, r3
 8004c36:	9109      	str	r1, [sp, #36]	; 0x24
 8004c38:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8004c3c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004c40:	469b      	mov	fp, r3
 8004c42:	9313      	str	r3, [sp, #76]	; 0x4c
 8004c44:	910d      	str	r1, [sp, #52]	; 0x34
 8004c46:	ae2a      	add	r6, sp, #168	; 0xa8
 8004c48:	e534      	b.n	80046b4 <_vfprintf_r+0x43c>
 8004c4a:	f1bb 0f00 	cmp.w	fp, #0
 8004c4e:	f000 85da 	beq.w	8005806 <_vfprintf_r+0x158e>
 8004c52:	2700      	movs	r7, #0
 8004c54:	2400      	movs	r4, #0
 8004c56:	2500      	movs	r5, #0
 8004c58:	e475      	b.n	8004546 <_vfprintf_r+0x2ce>
 8004c5a:	485d      	ldr	r0, [pc, #372]	; (8004dd0 <_vfprintf_r+0xb58>)
 8004c5c:	9307      	str	r3, [sp, #28]
 8004c5e:	9211      	str	r2, [sp, #68]	; 0x44
 8004c60:	ea54 0305 	orrs.w	r3, r4, r5
 8004c64:	970e      	str	r7, [sp, #56]	; 0x38
 8004c66:	f04f 0700 	mov.w	r7, #0
 8004c6a:	f47f ae67 	bne.w	800493c <_vfprintf_r+0x6c4>
 8004c6e:	2400      	movs	r4, #0
 8004c70:	2500      	movs	r5, #0
 8004c72:	e663      	b.n	800493c <_vfprintf_r+0x6c4>
 8004c74:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004c76:	e56d      	b.n	8004754 <_vfprintf_r+0x4dc>
 8004c78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c7a:	2b65      	cmp	r3, #101	; 0x65
 8004c7c:	f340 80ae 	ble.w	8004ddc <_vfprintf_r+0xb64>
 8004c80:	2200      	movs	r2, #0
 8004c82:	2300      	movs	r3, #0
 8004c84:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004c88:	f004 fb4c 	bl	8009324 <__aeabi_dcmpeq>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	f000 813a 	beq.w	8004f06 <_vfprintf_r+0xc8e>
 8004c92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004c94:	4a4f      	ldr	r2, [pc, #316]	; (8004dd4 <_vfprintf_r+0xb5c>)
 8004c96:	f8c9 2000 	str.w	r2, [r9]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	3401      	adds	r4, #1
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	2b07      	cmp	r3, #7
 8004ca2:	9429      	str	r4, [sp, #164]	; 0xa4
 8004ca4:	9328      	str	r3, [sp, #160]	; 0xa0
 8004ca6:	f8c9 2004 	str.w	r2, [r9, #4]
 8004caa:	f300 83ce 	bgt.w	800544a <_vfprintf_r+0x11d2>
 8004cae:	f109 0908 	add.w	r9, r9, #8
 8004cb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	db03      	blt.n	8004cc2 <_vfprintf_r+0xa4a>
 8004cba:	9b07      	ldr	r3, [sp, #28]
 8004cbc:	07d8      	lsls	r0, r3, #31
 8004cbe:	f57f adb9 	bpl.w	8004834 <_vfprintf_r+0x5bc>
 8004cc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004cc4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004cc6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004cc8:	f8c9 2000 	str.w	r2, [r9]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	440c      	add	r4, r1
 8004cd0:	2b07      	cmp	r3, #7
 8004cd2:	9429      	str	r4, [sp, #164]	; 0xa4
 8004cd4:	f8c9 1004 	str.w	r1, [r9, #4]
 8004cd8:	9328      	str	r3, [sp, #160]	; 0xa0
 8004cda:	f300 8474 	bgt.w	80055c6 <_vfprintf_r+0x134e>
 8004cde:	f109 0908 	add.w	r9, r9, #8
 8004ce2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ce4:	1e5d      	subs	r5, r3, #1
 8004ce6:	2d00      	cmp	r5, #0
 8004ce8:	f77f ada4 	ble.w	8004834 <_vfprintf_r+0x5bc>
 8004cec:	4a3a      	ldr	r2, [pc, #232]	; (8004dd8 <_vfprintf_r+0xb60>)
 8004cee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004cf0:	920f      	str	r2, [sp, #60]	; 0x3c
 8004cf2:	2d10      	cmp	r5, #16
 8004cf4:	f340 81b4 	ble.w	8005060 <_vfprintf_r+0xde8>
 8004cf8:	2610      	movs	r6, #16
 8004cfa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004cfc:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004d00:	e005      	b.n	8004d0e <_vfprintf_r+0xa96>
 8004d02:	f109 0908 	add.w	r9, r9, #8
 8004d06:	3d10      	subs	r5, #16
 8004d08:	2d10      	cmp	r5, #16
 8004d0a:	f340 81a9 	ble.w	8005060 <_vfprintf_r+0xde8>
 8004d0e:	3301      	adds	r3, #1
 8004d10:	3410      	adds	r4, #16
 8004d12:	2b07      	cmp	r3, #7
 8004d14:	9429      	str	r4, [sp, #164]	; 0xa4
 8004d16:	9328      	str	r3, [sp, #160]	; 0xa0
 8004d18:	f8c9 a000 	str.w	sl, [r9]
 8004d1c:	f8c9 6004 	str.w	r6, [r9, #4]
 8004d20:	ddef      	ble.n	8004d02 <_vfprintf_r+0xa8a>
 8004d22:	aa27      	add	r2, sp, #156	; 0x9c
 8004d24:	4659      	mov	r1, fp
 8004d26:	4638      	mov	r0, r7
 8004d28:	f003 fcd4 	bl	80086d4 <__sprint_r>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	f47f abd3 	bne.w	80044d8 <_vfprintf_r+0x260>
 8004d32:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004d34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004d36:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004d3a:	e7e4      	b.n	8004d06 <_vfprintf_r+0xa8e>
 8004d3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d40:	1a9f      	subs	r7, r3, r2
 8004d42:	2f00      	cmp	r7, #0
 8004d44:	f77f ad2a 	ble.w	800479c <_vfprintf_r+0x524>
 8004d48:	4a23      	ldr	r2, [pc, #140]	; (8004dd8 <_vfprintf_r+0xb60>)
 8004d4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004d4c:	920f      	str	r2, [sp, #60]	; 0x3c
 8004d4e:	2f10      	cmp	r7, #16
 8004d50:	dd2b      	ble.n	8004daa <_vfprintf_r+0xb32>
 8004d52:	464a      	mov	r2, r9
 8004d54:	4621      	mov	r1, r4
 8004d56:	46b9      	mov	r9, r7
 8004d58:	2510      	movs	r5, #16
 8004d5a:	4637      	mov	r7, r6
 8004d5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004d5e:	9e08      	ldr	r6, [sp, #32]
 8004d60:	e006      	b.n	8004d70 <_vfprintf_r+0xaf8>
 8004d62:	f1a9 0910 	sub.w	r9, r9, #16
 8004d66:	f1b9 0f10 	cmp.w	r9, #16
 8004d6a:	f102 0208 	add.w	r2, r2, #8
 8004d6e:	dd18      	ble.n	8004da2 <_vfprintf_r+0xb2a>
 8004d70:	3301      	adds	r3, #1
 8004d72:	3110      	adds	r1, #16
 8004d74:	2b07      	cmp	r3, #7
 8004d76:	9129      	str	r1, [sp, #164]	; 0xa4
 8004d78:	9328      	str	r3, [sp, #160]	; 0xa0
 8004d7a:	f8c2 a000 	str.w	sl, [r2]
 8004d7e:	6055      	str	r5, [r2, #4]
 8004d80:	ddef      	ble.n	8004d62 <_vfprintf_r+0xaea>
 8004d82:	aa27      	add	r2, sp, #156	; 0x9c
 8004d84:	4631      	mov	r1, r6
 8004d86:	4620      	mov	r0, r4
 8004d88:	f003 fca4 	bl	80086d4 <__sprint_r>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	f47f aba3 	bne.w	80044d8 <_vfprintf_r+0x260>
 8004d92:	f1a9 0910 	sub.w	r9, r9, #16
 8004d96:	f1b9 0f10 	cmp.w	r9, #16
 8004d9a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004d9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004d9e:	aa34      	add	r2, sp, #208	; 0xd0
 8004da0:	dce6      	bgt.n	8004d70 <_vfprintf_r+0xaf8>
 8004da2:	463e      	mov	r6, r7
 8004da4:	460c      	mov	r4, r1
 8004da6:	464f      	mov	r7, r9
 8004da8:	4691      	mov	r9, r2
 8004daa:	3301      	adds	r3, #1
 8004dac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004dae:	9328      	str	r3, [sp, #160]	; 0xa0
 8004db0:	443c      	add	r4, r7
 8004db2:	2b07      	cmp	r3, #7
 8004db4:	9429      	str	r4, [sp, #164]	; 0xa4
 8004db6:	e889 0084 	stmia.w	r9, {r2, r7}
 8004dba:	f300 822b 	bgt.w	8005214 <_vfprintf_r+0xf9c>
 8004dbe:	f109 0908 	add.w	r9, r9, #8
 8004dc2:	e4eb      	b.n	800479c <_vfprintf_r+0x524>
 8004dc4:	7fefffff 	.word	0x7fefffff
 8004dc8:	08009954 	.word	0x08009954
 8004dcc:	08009950 	.word	0x08009950
 8004dd0:	08009974 	.word	0x08009974
 8004dd4:	08009990 	.word	0x08009990
 8004dd8:	080099a4 	.word	0x080099a4
 8004ddc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004dde:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	f340 81d0 	ble.w	8005186 <_vfprintf_r+0xf0e>
 8004de6:	3501      	adds	r5, #1
 8004de8:	3401      	adds	r4, #1
 8004dea:	2301      	movs	r3, #1
 8004dec:	2d07      	cmp	r5, #7
 8004dee:	9429      	str	r4, [sp, #164]	; 0xa4
 8004df0:	9528      	str	r5, [sp, #160]	; 0xa0
 8004df2:	f8c9 6000 	str.w	r6, [r9]
 8004df6:	f8c9 3004 	str.w	r3, [r9, #4]
 8004dfa:	f300 81e1 	bgt.w	80051c0 <_vfprintf_r+0xf48>
 8004dfe:	f109 0908 	add.w	r9, r9, #8
 8004e02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004e04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e06:	f8c9 3000 	str.w	r3, [r9]
 8004e0a:	3501      	adds	r5, #1
 8004e0c:	4414      	add	r4, r2
 8004e0e:	2d07      	cmp	r5, #7
 8004e10:	9429      	str	r4, [sp, #164]	; 0xa4
 8004e12:	9528      	str	r5, [sp, #160]	; 0xa0
 8004e14:	f8c9 2004 	str.w	r2, [r9, #4]
 8004e18:	f300 81df 	bgt.w	80051da <_vfprintf_r+0xf62>
 8004e1c:	f109 0908 	add.w	r9, r9, #8
 8004e20:	2300      	movs	r3, #0
 8004e22:	2200      	movs	r2, #0
 8004e24:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004e28:	f004 fa7c 	bl	8009324 <__aeabi_dcmpeq>
 8004e2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	f040 80cc 	bne.w	8004fcc <_vfprintf_r+0xd54>
 8004e34:	3b01      	subs	r3, #1
 8004e36:	3501      	adds	r5, #1
 8004e38:	3601      	adds	r6, #1
 8004e3a:	441c      	add	r4, r3
 8004e3c:	2d07      	cmp	r5, #7
 8004e3e:	9528      	str	r5, [sp, #160]	; 0xa0
 8004e40:	9429      	str	r4, [sp, #164]	; 0xa4
 8004e42:	f8c9 6000 	str.w	r6, [r9]
 8004e46:	f8c9 3004 	str.w	r3, [r9, #4]
 8004e4a:	f300 81ac 	bgt.w	80051a6 <_vfprintf_r+0xf2e>
 8004e4e:	f109 0908 	add.w	r9, r9, #8
 8004e52:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004e54:	f8c9 2004 	str.w	r2, [r9, #4]
 8004e58:	3501      	adds	r5, #1
 8004e5a:	4414      	add	r4, r2
 8004e5c:	ab23      	add	r3, sp, #140	; 0x8c
 8004e5e:	2d07      	cmp	r5, #7
 8004e60:	9429      	str	r4, [sp, #164]	; 0xa4
 8004e62:	9528      	str	r5, [sp, #160]	; 0xa0
 8004e64:	f8c9 3000 	str.w	r3, [r9]
 8004e68:	f77f ace2 	ble.w	8004830 <_vfprintf_r+0x5b8>
 8004e6c:	aa27      	add	r2, sp, #156	; 0x9c
 8004e6e:	9908      	ldr	r1, [sp, #32]
 8004e70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004e72:	f003 fc2f 	bl	80086d4 <__sprint_r>
 8004e76:	2800      	cmp	r0, #0
 8004e78:	f47f ab2e 	bne.w	80044d8 <_vfprintf_r+0x260>
 8004e7c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004e7e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004e82:	e4d7      	b.n	8004834 <_vfprintf_r+0x5bc>
 8004e84:	aa27      	add	r2, sp, #156	; 0x9c
 8004e86:	9908      	ldr	r1, [sp, #32]
 8004e88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004e8a:	f003 fc23 	bl	80086d4 <__sprint_r>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	f43f ad1e 	beq.w	80048d0 <_vfprintf_r+0x658>
 8004e94:	f7ff bb20 	b.w	80044d8 <_vfprintf_r+0x260>
 8004e98:	aa27      	add	r2, sp, #156	; 0x9c
 8004e9a:	9908      	ldr	r1, [sp, #32]
 8004e9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004e9e:	f003 fc19 	bl	80086d4 <__sprint_r>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	f47f ab18 	bne.w	80044d8 <_vfprintf_r+0x260>
 8004ea8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004eaa:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004eae:	e4ae      	b.n	800480e <_vfprintf_r+0x596>
 8004eb0:	aa27      	add	r2, sp, #156	; 0x9c
 8004eb2:	9908      	ldr	r1, [sp, #32]
 8004eb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004eb6:	f003 fc0d 	bl	80086d4 <__sprint_r>
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	f47f ab0c 	bne.w	80044d8 <_vfprintf_r+0x260>
 8004ec0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004ec2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004ec6:	e455      	b.n	8004774 <_vfprintf_r+0x4fc>
 8004ec8:	aa27      	add	r2, sp, #156	; 0x9c
 8004eca:	9908      	ldr	r1, [sp, #32]
 8004ecc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004ece:	f003 fc01 	bl	80086d4 <__sprint_r>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	f47f ab00 	bne.w	80044d8 <_vfprintf_r+0x260>
 8004ed8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004eda:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004ede:	e459      	b.n	8004794 <_vfprintf_r+0x51c>
 8004ee0:	f1bb 0f00 	cmp.w	fp, #0
 8004ee4:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004ee8:	f2c0 830d 	blt.w	8005506 <_vfprintf_r+0x128e>
 8004eec:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004ef0:	9307      	str	r3, [sp, #28]
 8004ef2:	ea54 0305 	orrs.w	r3, r4, r5
 8004ef6:	f47f ad21 	bne.w	800493c <_vfprintf_r+0x6c4>
 8004efa:	f1bb 0f00 	cmp.w	fp, #0
 8004efe:	f43f ae8d 	beq.w	8004c1c <_vfprintf_r+0x9a4>
 8004f02:	2700      	movs	r7, #0
 8004f04:	e6b3      	b.n	8004c6e <_vfprintf_r+0x9f6>
 8004f06:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	f340 82aa 	ble.w	8005462 <_vfprintf_r+0x11ea>
 8004f0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f12:	4293      	cmp	r3, r2
 8004f14:	bfa8      	it	ge
 8004f16:	4613      	movge	r3, r2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	461d      	mov	r5, r3
 8004f1c:	dd0d      	ble.n	8004f3a <_vfprintf_r+0xcc2>
 8004f1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004f20:	f8c9 6000 	str.w	r6, [r9]
 8004f24:	3301      	adds	r3, #1
 8004f26:	442c      	add	r4, r5
 8004f28:	2b07      	cmp	r3, #7
 8004f2a:	9429      	str	r4, [sp, #164]	; 0xa4
 8004f2c:	f8c9 5004 	str.w	r5, [r9, #4]
 8004f30:	9328      	str	r3, [sp, #160]	; 0xa0
 8004f32:	f300 8387 	bgt.w	8005644 <_vfprintf_r+0x13cc>
 8004f36:	f109 0908 	add.w	r9, r9, #8
 8004f3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f3c:	2d00      	cmp	r5, #0
 8004f3e:	bfa8      	it	ge
 8004f40:	1b5b      	subge	r3, r3, r5
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	461d      	mov	r5, r3
 8004f46:	f340 80be 	ble.w	80050c6 <_vfprintf_r+0xe4e>
 8004f4a:	4ab9      	ldr	r2, [pc, #740]	; (8005230 <_vfprintf_r+0xfb8>)
 8004f4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004f4e:	920f      	str	r2, [sp, #60]	; 0x3c
 8004f50:	2d10      	cmp	r5, #16
 8004f52:	f340 826d 	ble.w	8005430 <_vfprintf_r+0x11b8>
 8004f56:	4622      	mov	r2, r4
 8004f58:	2710      	movs	r7, #16
 8004f5a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004f5e:	9c08      	ldr	r4, [sp, #32]
 8004f60:	e005      	b.n	8004f6e <_vfprintf_r+0xcf6>
 8004f62:	f109 0908 	add.w	r9, r9, #8
 8004f66:	3d10      	subs	r5, #16
 8004f68:	2d10      	cmp	r5, #16
 8004f6a:	f340 8260 	ble.w	800542e <_vfprintf_r+0x11b6>
 8004f6e:	3301      	adds	r3, #1
 8004f70:	3210      	adds	r2, #16
 8004f72:	2b07      	cmp	r3, #7
 8004f74:	9229      	str	r2, [sp, #164]	; 0xa4
 8004f76:	9328      	str	r3, [sp, #160]	; 0xa0
 8004f78:	f8c9 a000 	str.w	sl, [r9]
 8004f7c:	f8c9 7004 	str.w	r7, [r9, #4]
 8004f80:	ddef      	ble.n	8004f62 <_vfprintf_r+0xcea>
 8004f82:	aa27      	add	r2, sp, #156	; 0x9c
 8004f84:	4621      	mov	r1, r4
 8004f86:	4658      	mov	r0, fp
 8004f88:	f003 fba4 	bl	80086d4 <__sprint_r>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	f47f aaa3 	bne.w	80044d8 <_vfprintf_r+0x260>
 8004f92:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004f94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004f96:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004f9a:	e7e4      	b.n	8004f66 <_vfprintf_r+0xcee>
 8004f9c:	aa27      	add	r2, sp, #156	; 0x9c
 8004f9e:	9908      	ldr	r1, [sp, #32]
 8004fa0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004fa2:	f003 fb97 	bl	80086d4 <__sprint_r>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	f47f aa96 	bne.w	80044d8 <_vfprintf_r+0x260>
 8004fac:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004fb0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004fb2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004fb6:	f7ff bbcd 	b.w	8004754 <_vfprintf_r+0x4dc>
 8004fba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fbc:	6814      	ldr	r4, [r2, #0]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	17e5      	asrs	r5, r4, #31
 8004fc4:	930e      	str	r3, [sp, #56]	; 0x38
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	462b      	mov	r3, r5
 8004fca:	e4f4      	b.n	80049b6 <_vfprintf_r+0x73e>
 8004fcc:	1e5e      	subs	r6, r3, #1
 8004fce:	2e00      	cmp	r6, #0
 8004fd0:	f77f af3f 	ble.w	8004e52 <_vfprintf_r+0xbda>
 8004fd4:	4b96      	ldr	r3, [pc, #600]	; (8005230 <_vfprintf_r+0xfb8>)
 8004fd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fd8:	2e10      	cmp	r6, #16
 8004fda:	f340 8110 	ble.w	80051fe <_vfprintf_r+0xf86>
 8004fde:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8004fe2:	2710      	movs	r7, #16
 8004fe4:	46b0      	mov	r8, r6
 8004fe6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004fea:	9e08      	ldr	r6, [sp, #32]
 8004fec:	e007      	b.n	8004ffe <_vfprintf_r+0xd86>
 8004fee:	f109 0908 	add.w	r9, r9, #8
 8004ff2:	f1a8 0810 	sub.w	r8, r8, #16
 8004ff6:	f1b8 0f10 	cmp.w	r8, #16
 8004ffa:	f340 80fd 	ble.w	80051f8 <_vfprintf_r+0xf80>
 8004ffe:	3501      	adds	r5, #1
 8005000:	3410      	adds	r4, #16
 8005002:	2d07      	cmp	r5, #7
 8005004:	9429      	str	r4, [sp, #164]	; 0xa4
 8005006:	9528      	str	r5, [sp, #160]	; 0xa0
 8005008:	f8c9 a000 	str.w	sl, [r9]
 800500c:	f8c9 7004 	str.w	r7, [r9, #4]
 8005010:	dded      	ble.n	8004fee <_vfprintf_r+0xd76>
 8005012:	aa27      	add	r2, sp, #156	; 0x9c
 8005014:	4631      	mov	r1, r6
 8005016:	4658      	mov	r0, fp
 8005018:	f003 fb5c 	bl	80086d4 <__sprint_r>
 800501c:	2800      	cmp	r0, #0
 800501e:	f47f aa5b 	bne.w	80044d8 <_vfprintf_r+0x260>
 8005022:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005024:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8005026:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800502a:	e7e2      	b.n	8004ff2 <_vfprintf_r+0xd7a>
 800502c:	9907      	ldr	r1, [sp, #28]
 800502e:	f011 0210 	ands.w	r2, r1, #16
 8005032:	d020      	beq.n	8005076 <_vfprintf_r+0xdfe>
 8005034:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005036:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800503a:	f1bb 0f00 	cmp.w	fp, #0
 800503e:	6804      	ldr	r4, [r0, #0]
 8005040:	f100 0704 	add.w	r7, r0, #4
 8005044:	f04f 0500 	mov.w	r5, #0
 8005048:	db26      	blt.n	8005098 <_vfprintf_r+0xe20>
 800504a:	460a      	mov	r2, r1
 800504c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005050:	9207      	str	r2, [sp, #28]
 8005052:	ea54 0205 	orrs.w	r2, r4, r5
 8005056:	970e      	str	r7, [sp, #56]	; 0x38
 8005058:	461f      	mov	r7, r3
 800505a:	f47f ab03 	bne.w	8004664 <_vfprintf_r+0x3ec>
 800505e:	e4bd      	b.n	80049dc <_vfprintf_r+0x764>
 8005060:	3301      	adds	r3, #1
 8005062:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005064:	9328      	str	r3, [sp, #160]	; 0xa0
 8005066:	442c      	add	r4, r5
 8005068:	2b07      	cmp	r3, #7
 800506a:	9429      	str	r4, [sp, #164]	; 0xa4
 800506c:	e889 0024 	stmia.w	r9, {r2, r5}
 8005070:	f77f abde 	ble.w	8004830 <_vfprintf_r+0x5b8>
 8005074:	e6fa      	b.n	8004e6c <_vfprintf_r+0xbf4>
 8005076:	9907      	ldr	r1, [sp, #28]
 8005078:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800507c:	f040 824a 	bne.w	8005514 <_vfprintf_r+0x129c>
 8005080:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005082:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005086:	f1bb 0f00 	cmp.w	fp, #0
 800508a:	680c      	ldr	r4, [r1, #0]
 800508c:	f101 0704 	add.w	r7, r1, #4
 8005090:	f04f 0500 	mov.w	r5, #0
 8005094:	f280 811a 	bge.w	80052cc <_vfprintf_r+0x1054>
 8005098:	970e      	str	r7, [sp, #56]	; 0x38
 800509a:	461f      	mov	r7, r3
 800509c:	ea54 0305 	orrs.w	r3, r4, r5
 80050a0:	f47f aae0 	bne.w	8004664 <_vfprintf_r+0x3ec>
 80050a4:	ae44      	add	r6, sp, #272	; 0x110
 80050a6:	3430      	adds	r4, #48	; 0x30
 80050a8:	f806 4d41 	strb.w	r4, [r6, #-65]!
 80050ac:	f7ff baf4 	b.w	8004698 <_vfprintf_r+0x420>
 80050b0:	aa27      	add	r2, sp, #156	; 0x9c
 80050b2:	9908      	ldr	r1, [sp, #32]
 80050b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80050b6:	f003 fb0d 	bl	80086d4 <__sprint_r>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	f47f aa0c 	bne.w	80044d8 <_vfprintf_r+0x260>
 80050c0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80050c2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80050c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80050c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050ca:	4432      	add	r2, r6
 80050cc:	4617      	mov	r7, r2
 80050ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80050d0:	4293      	cmp	r3, r2
 80050d2:	db47      	blt.n	8005164 <_vfprintf_r+0xeec>
 80050d4:	9a07      	ldr	r2, [sp, #28]
 80050d6:	07d2      	lsls	r2, r2, #31
 80050d8:	d444      	bmi.n	8005164 <_vfprintf_r+0xeec>
 80050da:	9912      	ldr	r1, [sp, #72]	; 0x48
 80050dc:	440e      	add	r6, r1
 80050de:	1bf5      	subs	r5, r6, r7
 80050e0:	1acb      	subs	r3, r1, r3
 80050e2:	429d      	cmp	r5, r3
 80050e4:	bfa8      	it	ge
 80050e6:	461d      	movge	r5, r3
 80050e8:	2d00      	cmp	r5, #0
 80050ea:	462e      	mov	r6, r5
 80050ec:	dd0d      	ble.n	800510a <_vfprintf_r+0xe92>
 80050ee:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80050f0:	f8c9 7000 	str.w	r7, [r9]
 80050f4:	3201      	adds	r2, #1
 80050f6:	442c      	add	r4, r5
 80050f8:	2a07      	cmp	r2, #7
 80050fa:	9429      	str	r4, [sp, #164]	; 0xa4
 80050fc:	f8c9 5004 	str.w	r5, [r9, #4]
 8005100:	9228      	str	r2, [sp, #160]	; 0xa0
 8005102:	f300 832e 	bgt.w	8005762 <_vfprintf_r+0x14ea>
 8005106:	f109 0908 	add.w	r9, r9, #8
 800510a:	2e00      	cmp	r6, #0
 800510c:	bfac      	ite	ge
 800510e:	1b9d      	subge	r5, r3, r6
 8005110:	461d      	movlt	r5, r3
 8005112:	2d00      	cmp	r5, #0
 8005114:	f77f ab8e 	ble.w	8004834 <_vfprintf_r+0x5bc>
 8005118:	4a45      	ldr	r2, [pc, #276]	; (8005230 <_vfprintf_r+0xfb8>)
 800511a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800511c:	920f      	str	r2, [sp, #60]	; 0x3c
 800511e:	2d10      	cmp	r5, #16
 8005120:	dd9e      	ble.n	8005060 <_vfprintf_r+0xde8>
 8005122:	2610      	movs	r6, #16
 8005124:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005126:	f8dd b020 	ldr.w	fp, [sp, #32]
 800512a:	e004      	b.n	8005136 <_vfprintf_r+0xebe>
 800512c:	f109 0908 	add.w	r9, r9, #8
 8005130:	3d10      	subs	r5, #16
 8005132:	2d10      	cmp	r5, #16
 8005134:	dd94      	ble.n	8005060 <_vfprintf_r+0xde8>
 8005136:	3301      	adds	r3, #1
 8005138:	3410      	adds	r4, #16
 800513a:	2b07      	cmp	r3, #7
 800513c:	9429      	str	r4, [sp, #164]	; 0xa4
 800513e:	9328      	str	r3, [sp, #160]	; 0xa0
 8005140:	f8c9 a000 	str.w	sl, [r9]
 8005144:	f8c9 6004 	str.w	r6, [r9, #4]
 8005148:	ddf0      	ble.n	800512c <_vfprintf_r+0xeb4>
 800514a:	aa27      	add	r2, sp, #156	; 0x9c
 800514c:	4659      	mov	r1, fp
 800514e:	4638      	mov	r0, r7
 8005150:	f003 fac0 	bl	80086d4 <__sprint_r>
 8005154:	2800      	cmp	r0, #0
 8005156:	f47f a9bf 	bne.w	80044d8 <_vfprintf_r+0x260>
 800515a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800515c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800515e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005162:	e7e5      	b.n	8005130 <_vfprintf_r+0xeb8>
 8005164:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8005166:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005168:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800516a:	f8c9 1000 	str.w	r1, [r9]
 800516e:	3201      	adds	r2, #1
 8005170:	4404      	add	r4, r0
 8005172:	2a07      	cmp	r2, #7
 8005174:	9429      	str	r4, [sp, #164]	; 0xa4
 8005176:	f8c9 0004 	str.w	r0, [r9, #4]
 800517a:	9228      	str	r2, [sp, #160]	; 0xa0
 800517c:	f300 82cf 	bgt.w	800571e <_vfprintf_r+0x14a6>
 8005180:	f109 0908 	add.w	r9, r9, #8
 8005184:	e7a9      	b.n	80050da <_vfprintf_r+0xe62>
 8005186:	9b07      	ldr	r3, [sp, #28]
 8005188:	07df      	lsls	r7, r3, #31
 800518a:	f53f ae2c 	bmi.w	8004de6 <_vfprintf_r+0xb6e>
 800518e:	3501      	adds	r5, #1
 8005190:	3401      	adds	r4, #1
 8005192:	2301      	movs	r3, #1
 8005194:	2d07      	cmp	r5, #7
 8005196:	9429      	str	r4, [sp, #164]	; 0xa4
 8005198:	9528      	str	r5, [sp, #160]	; 0xa0
 800519a:	f8c9 6000 	str.w	r6, [r9]
 800519e:	f8c9 3004 	str.w	r3, [r9, #4]
 80051a2:	f77f ae54 	ble.w	8004e4e <_vfprintf_r+0xbd6>
 80051a6:	aa27      	add	r2, sp, #156	; 0x9c
 80051a8:	9908      	ldr	r1, [sp, #32]
 80051aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051ac:	f003 fa92 	bl	80086d4 <__sprint_r>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	f47f a991 	bne.w	80044d8 <_vfprintf_r+0x260>
 80051b6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80051b8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80051ba:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80051be:	e648      	b.n	8004e52 <_vfprintf_r+0xbda>
 80051c0:	aa27      	add	r2, sp, #156	; 0x9c
 80051c2:	9908      	ldr	r1, [sp, #32]
 80051c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051c6:	f003 fa85 	bl	80086d4 <__sprint_r>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	f47f a984 	bne.w	80044d8 <_vfprintf_r+0x260>
 80051d0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80051d2:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80051d4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80051d8:	e613      	b.n	8004e02 <_vfprintf_r+0xb8a>
 80051da:	aa27      	add	r2, sp, #156	; 0x9c
 80051dc:	9908      	ldr	r1, [sp, #32]
 80051de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051e0:	f003 fa78 	bl	80086d4 <__sprint_r>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	f47f a977 	bne.w	80044d8 <_vfprintf_r+0x260>
 80051ea:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80051ec:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80051ee:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80051f2:	e615      	b.n	8004e20 <_vfprintf_r+0xba8>
 80051f4:	2400      	movs	r4, #0
 80051f6:	e755      	b.n	80050a4 <_vfprintf_r+0xe2c>
 80051f8:	4646      	mov	r6, r8
 80051fa:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80051fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005200:	3501      	adds	r5, #1
 8005202:	4434      	add	r4, r6
 8005204:	2d07      	cmp	r5, #7
 8005206:	9429      	str	r4, [sp, #164]	; 0xa4
 8005208:	9528      	str	r5, [sp, #160]	; 0xa0
 800520a:	e889 0048 	stmia.w	r9, {r3, r6}
 800520e:	f77f ae1e 	ble.w	8004e4e <_vfprintf_r+0xbd6>
 8005212:	e7c8      	b.n	80051a6 <_vfprintf_r+0xf2e>
 8005214:	aa27      	add	r2, sp, #156	; 0x9c
 8005216:	9908      	ldr	r1, [sp, #32]
 8005218:	980a      	ldr	r0, [sp, #40]	; 0x28
 800521a:	f003 fa5b 	bl	80086d4 <__sprint_r>
 800521e:	2800      	cmp	r0, #0
 8005220:	f47f a95a 	bne.w	80044d8 <_vfprintf_r+0x260>
 8005224:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005226:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800522a:	f7ff bab7 	b.w	800479c <_vfprintf_r+0x524>
 800522e:	bf00      	nop
 8005230:	080099a4 	.word	0x080099a4
 8005234:	4264      	negs	r4, r4
 8005236:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800523a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800523e:	f1bb 0f00 	cmp.w	fp, #0
 8005242:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005246:	f6ff aa0d 	blt.w	8004664 <_vfprintf_r+0x3ec>
 800524a:	9b07      	ldr	r3, [sp, #28]
 800524c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005250:	9307      	str	r3, [sp, #28]
 8005252:	f7ff ba07 	b.w	8004664 <_vfprintf_r+0x3ec>
 8005256:	9907      	ldr	r1, [sp, #28]
 8005258:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800525c:	d017      	beq.n	800528e <_vfprintf_r+0x1016>
 800525e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005260:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8005264:	4603      	mov	r3, r0
 8005266:	f1bb 0f00 	cmp.w	fp, #0
 800526a:	f103 0304 	add.w	r3, r3, #4
 800526e:	8804      	ldrh	r4, [r0, #0]
 8005270:	f04f 0500 	mov.w	r5, #0
 8005274:	f2c0 831b 	blt.w	80058ae <_vfprintf_r+0x1636>
 8005278:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800527c:	9107      	str	r1, [sp, #28]
 800527e:	ea54 0105 	orrs.w	r1, r4, r5
 8005282:	930e      	str	r3, [sp, #56]	; 0x38
 8005284:	f43f ace1 	beq.w	8004c4a <_vfprintf_r+0x9d2>
 8005288:	4617      	mov	r7, r2
 800528a:	f7ff b95c 	b.w	8004546 <_vfprintf_r+0x2ce>
 800528e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005290:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005294:	f1bb 0f00 	cmp.w	fp, #0
 8005298:	680c      	ldr	r4, [r1, #0]
 800529a:	f101 0704 	add.w	r7, r1, #4
 800529e:	f04f 0500 	mov.w	r5, #0
 80052a2:	db02      	blt.n	80052aa <_vfprintf_r+0x1032>
 80052a4:	9a07      	ldr	r2, [sp, #28]
 80052a6:	f7ff b9af 	b.w	8004608 <_vfprintf_r+0x390>
 80052aa:	970e      	str	r7, [sp, #56]	; 0x38
 80052ac:	2700      	movs	r7, #0
 80052ae:	f7ff b94a 	b.w	8004546 <_vfprintf_r+0x2ce>
 80052b2:	9b07      	ldr	r3, [sp, #28]
 80052b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80052ba:	4613      	mov	r3, r2
 80052bc:	f000 8142 	beq.w	8005544 <_vfprintf_r+0x12cc>
 80052c0:	3304      	adds	r3, #4
 80052c2:	8814      	ldrh	r4, [r2, #0]
 80052c4:	930e      	str	r3, [sp, #56]	; 0x38
 80052c6:	2500      	movs	r5, #0
 80052c8:	f7ff bb1a 	b.w	8004900 <_vfprintf_r+0x688>
 80052cc:	9a07      	ldr	r2, [sp, #28]
 80052ce:	e6bd      	b.n	800504c <_vfprintf_r+0xdd4>
 80052d0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	f004 f856 	bl	8009388 <__aeabi_dcmpun>
 80052dc:	2800      	cmp	r0, #0
 80052de:	f040 82e8 	bne.w	80058b2 <_vfprintf_r+0x163a>
 80052e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052e4:	f1bb 3fff 	cmp.w	fp, #4294967295
 80052e8:	f023 0720 	bic.w	r7, r3, #32
 80052ec:	f000 825f 	beq.w	80057ae <_vfprintf_r+0x1536>
 80052f0:	2f47      	cmp	r7, #71	; 0x47
 80052f2:	f000 8158 	beq.w	80055a6 <_vfprintf_r+0x132e>
 80052f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052f8:	9a07      	ldr	r2, [sp, #28]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005300:	920f      	str	r2, [sp, #60]	; 0x3c
 8005302:	f2c0 825c 	blt.w	80057be <_vfprintf_r+0x1546>
 8005306:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 800530a:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800530e:	2300      	movs	r3, #0
 8005310:	9309      	str	r3, [sp, #36]	; 0x24
 8005312:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005314:	2b66      	cmp	r3, #102	; 0x66
 8005316:	f000 8233 	beq.w	8005780 <_vfprintf_r+0x1508>
 800531a:	2b46      	cmp	r3, #70	; 0x46
 800531c:	f000 8125 	beq.w	800556a <_vfprintf_r+0x12f2>
 8005320:	2f45      	cmp	r7, #69	; 0x45
 8005322:	bf0c      	ite	eq
 8005324:	f10b 0501 	addeq.w	r5, fp, #1
 8005328:	465d      	movne	r5, fp
 800532a:	a825      	add	r0, sp, #148	; 0x94
 800532c:	a922      	add	r1, sp, #136	; 0x88
 800532e:	aa21      	add	r2, sp, #132	; 0x84
 8005330:	2302      	movs	r3, #2
 8005332:	9004      	str	r0, [sp, #16]
 8005334:	9202      	str	r2, [sp, #8]
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	9501      	str	r5, [sp, #4]
 800533a:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800533e:	9103      	str	r1, [sp, #12]
 8005340:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005342:	f000 fc89 	bl	8005c58 <_dtoa_r>
 8005346:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005348:	2b67      	cmp	r3, #103	; 0x67
 800534a:	4606      	mov	r6, r0
 800534c:	f040 8275 	bne.w	800583a <_vfprintf_r+0x15c2>
 8005350:	9b07      	ldr	r3, [sp, #28]
 8005352:	07da      	lsls	r2, r3, #31
 8005354:	f140 8294 	bpl.w	8005880 <_vfprintf_r+0x1608>
 8005358:	1974      	adds	r4, r6, r5
 800535a:	2200      	movs	r2, #0
 800535c:	2300      	movs	r3, #0
 800535e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8005362:	f003 ffdf 	bl	8009324 <__aeabi_dcmpeq>
 8005366:	2800      	cmp	r0, #0
 8005368:	f040 8178 	bne.w	800565c <_vfprintf_r+0x13e4>
 800536c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800536e:	429c      	cmp	r4, r3
 8005370:	d906      	bls.n	8005380 <_vfprintf_r+0x1108>
 8005372:	2130      	movs	r1, #48	; 0x30
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	9225      	str	r2, [sp, #148]	; 0x94
 8005378:	7019      	strb	r1, [r3, #0]
 800537a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800537c:	429c      	cmp	r4, r3
 800537e:	d8f9      	bhi.n	8005374 <_vfprintf_r+0x10fc>
 8005380:	1b9b      	subs	r3, r3, r6
 8005382:	2f47      	cmp	r7, #71	; 0x47
 8005384:	9312      	str	r3, [sp, #72]	; 0x48
 8005386:	f000 8156 	beq.w	8005636 <_vfprintf_r+0x13be>
 800538a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800538c:	2b65      	cmp	r3, #101	; 0x65
 800538e:	f340 8263 	ble.w	8005858 <_vfprintf_r+0x15e0>
 8005392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005394:	2b66      	cmp	r3, #102	; 0x66
 8005396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005398:	9313      	str	r3, [sp, #76]	; 0x4c
 800539a:	f000 8226 	beq.w	80057ea <_vfprintf_r+0x1572>
 800539e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80053a2:	428a      	cmp	r2, r1
 80053a4:	f2c0 8214 	blt.w	80057d0 <_vfprintf_r+0x1558>
 80053a8:	9b07      	ldr	r3, [sp, #28]
 80053aa:	07db      	lsls	r3, r3, #31
 80053ac:	f100 826a 	bmi.w	8005884 <_vfprintf_r+0x160c>
 80053b0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80053b4:	920d      	str	r2, [sp, #52]	; 0x34
 80053b6:	2267      	movs	r2, #103	; 0x67
 80053b8:	9211      	str	r2, [sp, #68]	; 0x44
 80053ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053bc:	2a00      	cmp	r2, #0
 80053be:	f040 8117 	bne.w	80055f0 <_vfprintf_r+0x1378>
 80053c2:	9309      	str	r3, [sp, #36]	; 0x24
 80053c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053c6:	9307      	str	r3, [sp, #28]
 80053c8:	4693      	mov	fp, r2
 80053ca:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80053ce:	f7ff b96d 	b.w	80046ac <_vfprintf_r+0x434>
 80053d2:	f027 0707 	bic.w	r7, r7, #7
 80053d6:	ed97 7b00 	vldr	d7, [r7]
 80053da:	f107 0308 	add.w	r3, r7, #8
 80053de:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80053e2:	930e      	str	r3, [sp, #56]	; 0x38
 80053e4:	f7ff bb77 	b.w	8004ad6 <_vfprintf_r+0x85e>
 80053e8:	9b07      	ldr	r3, [sp, #28]
 80053ea:	06de      	lsls	r6, r3, #27
 80053ec:	d40b      	bmi.n	8005406 <_vfprintf_r+0x118e>
 80053ee:	9b07      	ldr	r3, [sp, #28]
 80053f0:	065d      	lsls	r5, r3, #25
 80053f2:	d508      	bpl.n	8005406 <_vfprintf_r+0x118e>
 80053f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053f6:	6813      	ldr	r3, [r2, #0]
 80053f8:	3204      	adds	r2, #4
 80053fa:	920e      	str	r2, [sp, #56]	; 0x38
 80053fc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8005400:	801a      	strh	r2, [r3, #0]
 8005402:	f7fe bf7a 	b.w	80042fa <_vfprintf_r+0x82>
 8005406:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005408:	6813      	ldr	r3, [r2, #0]
 800540a:	3204      	adds	r2, #4
 800540c:	920e      	str	r2, [sp, #56]	; 0x38
 800540e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	f7fe bf72 	b.w	80042fa <_vfprintf_r+0x82>
 8005416:	2700      	movs	r7, #0
 8005418:	45bb      	cmp	fp, r7
 800541a:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800541e:	f6ff ac26 	blt.w	8004c6e <_vfprintf_r+0x9f6>
 8005422:	9b07      	ldr	r3, [sp, #28]
 8005424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005428:	9307      	str	r3, [sp, #28]
 800542a:	f7ff bbf3 	b.w	8004c14 <_vfprintf_r+0x99c>
 800542e:	4614      	mov	r4, r2
 8005430:	3301      	adds	r3, #1
 8005432:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005434:	9328      	str	r3, [sp, #160]	; 0xa0
 8005436:	442c      	add	r4, r5
 8005438:	2b07      	cmp	r3, #7
 800543a:	9429      	str	r4, [sp, #164]	; 0xa4
 800543c:	e889 0024 	stmia.w	r9, {r2, r5}
 8005440:	f73f ae36 	bgt.w	80050b0 <_vfprintf_r+0xe38>
 8005444:	f109 0908 	add.w	r9, r9, #8
 8005448:	e63d      	b.n	80050c6 <_vfprintf_r+0xe4e>
 800544a:	aa27      	add	r2, sp, #156	; 0x9c
 800544c:	9908      	ldr	r1, [sp, #32]
 800544e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005450:	f003 f940 	bl	80086d4 <__sprint_r>
 8005454:	2800      	cmp	r0, #0
 8005456:	f47f a83f 	bne.w	80044d8 <_vfprintf_r+0x260>
 800545a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800545c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005460:	e427      	b.n	8004cb2 <_vfprintf_r+0xa3a>
 8005462:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005464:	4ab4      	ldr	r2, [pc, #720]	; (8005738 <_vfprintf_r+0x14c0>)
 8005466:	f8c9 2000 	str.w	r2, [r9]
 800546a:	3301      	adds	r3, #1
 800546c:	3401      	adds	r4, #1
 800546e:	2201      	movs	r2, #1
 8005470:	2b07      	cmp	r3, #7
 8005472:	9429      	str	r4, [sp, #164]	; 0xa4
 8005474:	9328      	str	r3, [sp, #160]	; 0xa0
 8005476:	f8c9 2004 	str.w	r2, [r9, #4]
 800547a:	dc69      	bgt.n	8005550 <_vfprintf_r+0x12d8>
 800547c:	f109 0908 	add.w	r9, r9, #8
 8005480:	b92d      	cbnz	r5, 800548e <_vfprintf_r+0x1216>
 8005482:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005484:	b91b      	cbnz	r3, 800548e <_vfprintf_r+0x1216>
 8005486:	9b07      	ldr	r3, [sp, #28]
 8005488:	07d9      	lsls	r1, r3, #31
 800548a:	f57f a9d3 	bpl.w	8004834 <_vfprintf_r+0x5bc>
 800548e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005490:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005492:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005494:	f8c9 2000 	str.w	r2, [r9]
 8005498:	3301      	adds	r3, #1
 800549a:	440c      	add	r4, r1
 800549c:	2b07      	cmp	r3, #7
 800549e:	9429      	str	r4, [sp, #164]	; 0xa4
 80054a0:	f8c9 1004 	str.w	r1, [r9, #4]
 80054a4:	9328      	str	r3, [sp, #160]	; 0xa0
 80054a6:	f300 81d9 	bgt.w	800585c <_vfprintf_r+0x15e4>
 80054aa:	f109 0908 	add.w	r9, r9, #8
 80054ae:	426d      	negs	r5, r5
 80054b0:	2d00      	cmp	r5, #0
 80054b2:	f340 80b3 	ble.w	800561c <_vfprintf_r+0x13a4>
 80054b6:	4aa1      	ldr	r2, [pc, #644]	; (800573c <_vfprintf_r+0x14c4>)
 80054b8:	920f      	str	r2, [sp, #60]	; 0x3c
 80054ba:	2d10      	cmp	r5, #16
 80054bc:	f340 8122 	ble.w	8005704 <_vfprintf_r+0x148c>
 80054c0:	4622      	mov	r2, r4
 80054c2:	2710      	movs	r7, #16
 80054c4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80054c8:	9c08      	ldr	r4, [sp, #32]
 80054ca:	e005      	b.n	80054d8 <_vfprintf_r+0x1260>
 80054cc:	f109 0908 	add.w	r9, r9, #8
 80054d0:	3d10      	subs	r5, #16
 80054d2:	2d10      	cmp	r5, #16
 80054d4:	f340 8115 	ble.w	8005702 <_vfprintf_r+0x148a>
 80054d8:	3301      	adds	r3, #1
 80054da:	3210      	adds	r2, #16
 80054dc:	2b07      	cmp	r3, #7
 80054de:	9229      	str	r2, [sp, #164]	; 0xa4
 80054e0:	9328      	str	r3, [sp, #160]	; 0xa0
 80054e2:	f8c9 a000 	str.w	sl, [r9]
 80054e6:	f8c9 7004 	str.w	r7, [r9, #4]
 80054ea:	ddef      	ble.n	80054cc <_vfprintf_r+0x1254>
 80054ec:	aa27      	add	r2, sp, #156	; 0x9c
 80054ee:	4621      	mov	r1, r4
 80054f0:	4658      	mov	r0, fp
 80054f2:	f003 f8ef 	bl	80086d4 <__sprint_r>
 80054f6:	2800      	cmp	r0, #0
 80054f8:	f47e afee 	bne.w	80044d8 <_vfprintf_r+0x260>
 80054fc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80054fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005500:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005504:	e7e4      	b.n	80054d0 <_vfprintf_r+0x1258>
 8005506:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005508:	f7ff bbaa 	b.w	8004c60 <_vfprintf_r+0x9e8>
 800550c:	f04f 30ff 	mov.w	r0, #4294967295
 8005510:	f7fe bfe8 	b.w	80044e4 <_vfprintf_r+0x26c>
 8005514:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005516:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800551a:	4603      	mov	r3, r0
 800551c:	f1bb 0f00 	cmp.w	fp, #0
 8005520:	f103 0304 	add.w	r3, r3, #4
 8005524:	8804      	ldrh	r4, [r0, #0]
 8005526:	f04f 0500 	mov.w	r5, #0
 800552a:	f2c0 81b4 	blt.w	8005896 <_vfprintf_r+0x161e>
 800552e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005532:	9107      	str	r1, [sp, #28]
 8005534:	ea54 0105 	orrs.w	r1, r4, r5
 8005538:	930e      	str	r3, [sp, #56]	; 0x38
 800553a:	4617      	mov	r7, r2
 800553c:	f47f a892 	bne.w	8004664 <_vfprintf_r+0x3ec>
 8005540:	f7ff ba4c 	b.w	80049dc <_vfprintf_r+0x764>
 8005544:	3304      	adds	r3, #4
 8005546:	6814      	ldr	r4, [r2, #0]
 8005548:	930e      	str	r3, [sp, #56]	; 0x38
 800554a:	2500      	movs	r5, #0
 800554c:	f7ff b9d8 	b.w	8004900 <_vfprintf_r+0x688>
 8005550:	aa27      	add	r2, sp, #156	; 0x9c
 8005552:	9908      	ldr	r1, [sp, #32]
 8005554:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005556:	f003 f8bd 	bl	80086d4 <__sprint_r>
 800555a:	2800      	cmp	r0, #0
 800555c:	f47e afbc 	bne.w	80044d8 <_vfprintf_r+0x260>
 8005560:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005562:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005564:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005568:	e78a      	b.n	8005480 <_vfprintf_r+0x1208>
 800556a:	a825      	add	r0, sp, #148	; 0x94
 800556c:	a922      	add	r1, sp, #136	; 0x88
 800556e:	aa21      	add	r2, sp, #132	; 0x84
 8005570:	2303      	movs	r3, #3
 8005572:	9004      	str	r0, [sp, #16]
 8005574:	9202      	str	r2, [sp, #8]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	f8cd b004 	str.w	fp, [sp, #4]
 800557c:	9103      	str	r1, [sp, #12]
 800557e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005582:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005584:	f000 fb68 	bl	8005c58 <_dtoa_r>
 8005588:	465d      	mov	r5, fp
 800558a:	4606      	mov	r6, r0
 800558c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800558e:	2b46      	cmp	r3, #70	; 0x46
 8005590:	eb06 0405 	add.w	r4, r6, r5
 8005594:	f47f aee1 	bne.w	800535a <_vfprintf_r+0x10e2>
 8005598:	7833      	ldrb	r3, [r6, #0]
 800559a:	2b30      	cmp	r3, #48	; 0x30
 800559c:	f000 8198 	beq.w	80058d0 <_vfprintf_r+0x1658>
 80055a0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80055a2:	442c      	add	r4, r5
 80055a4:	e6d9      	b.n	800535a <_vfprintf_r+0x10e2>
 80055a6:	f1bb 0f00 	cmp.w	fp, #0
 80055aa:	bf08      	it	eq
 80055ac:	f04f 0b01 	moveq.w	fp, #1
 80055b0:	e6a1      	b.n	80052f6 <_vfprintf_r+0x107e>
 80055b2:	9b07      	ldr	r3, [sp, #28]
 80055b4:	f043 0320 	orr.w	r3, r3, #32
 80055b8:	9307      	str	r3, [sp, #28]
 80055ba:	f108 0801 	add.w	r8, r8, #1
 80055be:	f898 3000 	ldrb.w	r3, [r8]
 80055c2:	f7fe becd 	b.w	8004360 <_vfprintf_r+0xe8>
 80055c6:	aa27      	add	r2, sp, #156	; 0x9c
 80055c8:	9908      	ldr	r1, [sp, #32]
 80055ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80055cc:	f003 f882 	bl	80086d4 <__sprint_r>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	f47e af81 	bne.w	80044d8 <_vfprintf_r+0x260>
 80055d6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80055d8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80055dc:	f7ff bb81 	b.w	8004ce2 <_vfprintf_r+0xa6a>
 80055e0:	4630      	mov	r0, r6
 80055e2:	f7fd fa0d 	bl	8002a00 <strlen>
 80055e6:	46a3      	mov	fp, r4
 80055e8:	4603      	mov	r3, r0
 80055ea:	900d      	str	r0, [sp, #52]	; 0x34
 80055ec:	f7ff bb01 	b.w	8004bf2 <_vfprintf_r+0x97a>
 80055f0:	272d      	movs	r7, #45	; 0x2d
 80055f2:	9309      	str	r3, [sp, #36]	; 0x24
 80055f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055f6:	9307      	str	r3, [sp, #28]
 80055f8:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80055fc:	f04f 0b00 	mov.w	fp, #0
 8005600:	f7ff b855 	b.w	80046ae <_vfprintf_r+0x436>
 8005604:	aa27      	add	r2, sp, #156	; 0x9c
 8005606:	9908      	ldr	r1, [sp, #32]
 8005608:	980a      	ldr	r0, [sp, #40]	; 0x28
 800560a:	f003 f863 	bl	80086d4 <__sprint_r>
 800560e:	2800      	cmp	r0, #0
 8005610:	f47e af62 	bne.w	80044d8 <_vfprintf_r+0x260>
 8005614:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005616:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005618:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800561c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800561e:	f8c9 6000 	str.w	r6, [r9]
 8005622:	3301      	adds	r3, #1
 8005624:	440c      	add	r4, r1
 8005626:	2b07      	cmp	r3, #7
 8005628:	9429      	str	r4, [sp, #164]	; 0xa4
 800562a:	9328      	str	r3, [sp, #160]	; 0xa0
 800562c:	f8c9 1004 	str.w	r1, [r9, #4]
 8005630:	f77f a8fe 	ble.w	8004830 <_vfprintf_r+0x5b8>
 8005634:	e41a      	b.n	8004e6c <_vfprintf_r+0xbf4>
 8005636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005638:	1cd8      	adds	r0, r3, #3
 800563a:	db11      	blt.n	8005660 <_vfprintf_r+0x13e8>
 800563c:	459b      	cmp	fp, r3
 800563e:	db0f      	blt.n	8005660 <_vfprintf_r+0x13e8>
 8005640:	9313      	str	r3, [sp, #76]	; 0x4c
 8005642:	e6ac      	b.n	800539e <_vfprintf_r+0x1126>
 8005644:	aa27      	add	r2, sp, #156	; 0x9c
 8005646:	9908      	ldr	r1, [sp, #32]
 8005648:	980a      	ldr	r0, [sp, #40]	; 0x28
 800564a:	f003 f843 	bl	80086d4 <__sprint_r>
 800564e:	2800      	cmp	r0, #0
 8005650:	f47e af42 	bne.w	80044d8 <_vfprintf_r+0x260>
 8005654:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005656:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800565a:	e46e      	b.n	8004f3a <_vfprintf_r+0xcc2>
 800565c:	4623      	mov	r3, r4
 800565e:	e68f      	b.n	8005380 <_vfprintf_r+0x1108>
 8005660:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005662:	3a02      	subs	r2, #2
 8005664:	9211      	str	r2, [sp, #68]	; 0x44
 8005666:	3b01      	subs	r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800566e:	9321      	str	r3, [sp, #132]	; 0x84
 8005670:	bfb8      	it	lt
 8005672:	425b      	neglt	r3, r3
 8005674:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8005678:	bfb4      	ite	lt
 800567a:	222d      	movlt	r2, #45	; 0x2d
 800567c:	222b      	movge	r2, #43	; 0x2b
 800567e:	2b09      	cmp	r3, #9
 8005680:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8005684:	f340 810b 	ble.w	800589e <_vfprintf_r+0x1626>
 8005688:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 800568c:	4604      	mov	r4, r0
 800568e:	4a2c      	ldr	r2, [pc, #176]	; (8005740 <_vfprintf_r+0x14c8>)
 8005690:	fb82 2103 	smull	r2, r1, r2, r3
 8005694:	17da      	asrs	r2, r3, #31
 8005696:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800569a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800569e:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80056a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80056a6:	2a09      	cmp	r2, #9
 80056a8:	4613      	mov	r3, r2
 80056aa:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80056ae:	dcee      	bgt.n	800568e <_vfprintf_r+0x1416>
 80056b0:	4621      	mov	r1, r4
 80056b2:	3330      	adds	r3, #48	; 0x30
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	f801 2d01 	strb.w	r2, [r1, #-1]!
 80056ba:	4288      	cmp	r0, r1
 80056bc:	f240 816f 	bls.w	800599e <_vfprintf_r+0x1726>
 80056c0:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 80056c4:	4623      	mov	r3, r4
 80056c6:	e001      	b.n	80056cc <_vfprintf_r+0x1454>
 80056c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056cc:	f801 2b01 	strb.w	r2, [r1], #1
 80056d0:	4298      	cmp	r0, r3
 80056d2:	d1f9      	bne.n	80056c8 <_vfprintf_r+0x1450>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	1b1b      	subs	r3, r3, r4
 80056d8:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 80056dc:	4413      	add	r3, r2
 80056de:	aa23      	add	r2, sp, #140	; 0x8c
 80056e0:	1a9b      	subs	r3, r3, r2
 80056e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056e4:	9319      	str	r3, [sp, #100]	; 0x64
 80056e6:	2a01      	cmp	r2, #1
 80056e8:	4413      	add	r3, r2
 80056ea:	930d      	str	r3, [sp, #52]	; 0x34
 80056ec:	f340 80fe 	ble.w	80058ec <_vfprintf_r+0x1674>
 80056f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80056f4:	4413      	add	r3, r2
 80056f6:	2200      	movs	r2, #0
 80056f8:	930d      	str	r3, [sp, #52]	; 0x34
 80056fa:	9213      	str	r2, [sp, #76]	; 0x4c
 80056fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005700:	e65b      	b.n	80053ba <_vfprintf_r+0x1142>
 8005702:	4614      	mov	r4, r2
 8005704:	3301      	adds	r3, #1
 8005706:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005708:	9328      	str	r3, [sp, #160]	; 0xa0
 800570a:	442c      	add	r4, r5
 800570c:	2b07      	cmp	r3, #7
 800570e:	9429      	str	r4, [sp, #164]	; 0xa4
 8005710:	e889 0024 	stmia.w	r9, {r2, r5}
 8005714:	f73f af76 	bgt.w	8005604 <_vfprintf_r+0x138c>
 8005718:	f109 0908 	add.w	r9, r9, #8
 800571c:	e77e      	b.n	800561c <_vfprintf_r+0x13a4>
 800571e:	aa27      	add	r2, sp, #156	; 0x9c
 8005720:	9908      	ldr	r1, [sp, #32]
 8005722:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005724:	f002 ffd6 	bl	80086d4 <__sprint_r>
 8005728:	2800      	cmp	r0, #0
 800572a:	f47e aed5 	bne.w	80044d8 <_vfprintf_r+0x260>
 800572e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005730:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005732:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005736:	e4d0      	b.n	80050da <_vfprintf_r+0xe62>
 8005738:	08009990 	.word	0x08009990
 800573c:	080099a4 	.word	0x080099a4
 8005740:	66666667 	.word	0x66666667
 8005744:	2d06      	cmp	r5, #6
 8005746:	462b      	mov	r3, r5
 8005748:	bf28      	it	cs
 800574a:	2306      	movcs	r3, #6
 800574c:	930d      	str	r3, [sp, #52]	; 0x34
 800574e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005752:	46b3      	mov	fp, r6
 8005754:	970e      	str	r7, [sp, #56]	; 0x38
 8005756:	9613      	str	r6, [sp, #76]	; 0x4c
 8005758:	4637      	mov	r7, r6
 800575a:	9309      	str	r3, [sp, #36]	; 0x24
 800575c:	4e91      	ldr	r6, [pc, #580]	; (80059a4 <_vfprintf_r+0x172c>)
 800575e:	f7fe bfa5 	b.w	80046ac <_vfprintf_r+0x434>
 8005762:	aa27      	add	r2, sp, #156	; 0x9c
 8005764:	9908      	ldr	r1, [sp, #32]
 8005766:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005768:	f002 ffb4 	bl	80086d4 <__sprint_r>
 800576c:	2800      	cmp	r0, #0
 800576e:	f47e aeb3 	bne.w	80044d8 <_vfprintf_r+0x260>
 8005772:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005774:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005776:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800577e:	e4c4      	b.n	800510a <_vfprintf_r+0xe92>
 8005780:	a825      	add	r0, sp, #148	; 0x94
 8005782:	a922      	add	r1, sp, #136	; 0x88
 8005784:	aa21      	add	r2, sp, #132	; 0x84
 8005786:	2303      	movs	r3, #3
 8005788:	9004      	str	r0, [sp, #16]
 800578a:	9202      	str	r2, [sp, #8]
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	f8cd b004 	str.w	fp, [sp, #4]
 8005792:	9103      	str	r1, [sp, #12]
 8005794:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005798:	980a      	ldr	r0, [sp, #40]	; 0x28
 800579a:	f000 fa5d 	bl	8005c58 <_dtoa_r>
 800579e:	465d      	mov	r5, fp
 80057a0:	4606      	mov	r6, r0
 80057a2:	eb00 040b 	add.w	r4, r0, fp
 80057a6:	e6f7      	b.n	8005598 <_vfprintf_r+0x1320>
 80057a8:	9307      	str	r3, [sp, #28]
 80057aa:	f7ff b8c7 	b.w	800493c <_vfprintf_r+0x6c4>
 80057ae:	f04f 0b06 	mov.w	fp, #6
 80057b2:	e5a0      	b.n	80052f6 <_vfprintf_r+0x107e>
 80057b4:	272d      	movs	r7, #45	; 0x2d
 80057b6:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80057ba:	f7ff b9b3 	b.w	8004b24 <_vfprintf_r+0x8ac>
 80057be:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 80057c2:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 80057c6:	931d      	str	r3, [sp, #116]	; 0x74
 80057c8:	232d      	movs	r3, #45	; 0x2d
 80057ca:	911c      	str	r1, [sp, #112]	; 0x70
 80057cc:	9309      	str	r3, [sp, #36]	; 0x24
 80057ce:	e5a0      	b.n	8005312 <_vfprintf_r+0x109a>
 80057d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80057d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057d4:	4413      	add	r3, r2
 80057d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057d8:	930d      	str	r3, [sp, #52]	; 0x34
 80057da:	2a00      	cmp	r2, #0
 80057dc:	f340 8090 	ble.w	8005900 <_vfprintf_r+0x1688>
 80057e0:	2267      	movs	r2, #103	; 0x67
 80057e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80057e6:	9211      	str	r2, [sp, #68]	; 0x44
 80057e8:	e5e7      	b.n	80053ba <_vfprintf_r+0x1142>
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f340 8090 	ble.w	8005910 <_vfprintf_r+0x1698>
 80057f0:	f1bb 0f00 	cmp.w	fp, #0
 80057f4:	d163      	bne.n	80058be <_vfprintf_r+0x1646>
 80057f6:	9a07      	ldr	r2, [sp, #28]
 80057f8:	07d1      	lsls	r1, r2, #31
 80057fa:	d460      	bmi.n	80058be <_vfprintf_r+0x1646>
 80057fc:	461a      	mov	r2, r3
 80057fe:	920d      	str	r2, [sp, #52]	; 0x34
 8005800:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005804:	e5d9      	b.n	80053ba <_vfprintf_r+0x1142>
 8005806:	9b07      	ldr	r3, [sp, #28]
 8005808:	07db      	lsls	r3, r3, #31
 800580a:	465f      	mov	r7, fp
 800580c:	d505      	bpl.n	800581a <_vfprintf_r+0x15a2>
 800580e:	ae44      	add	r6, sp, #272	; 0x110
 8005810:	2330      	movs	r3, #48	; 0x30
 8005812:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8005816:	f7fe bf3f 	b.w	8004698 <_vfprintf_r+0x420>
 800581a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800581e:	ae34      	add	r6, sp, #208	; 0xd0
 8005820:	f7fe bf3d 	b.w	800469e <_vfprintf_r+0x426>
 8005824:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8005828:	970e      	str	r7, [sp, #56]	; 0x38
 800582a:	9309      	str	r3, [sp, #36]	; 0x24
 800582c:	950d      	str	r5, [sp, #52]	; 0x34
 800582e:	4683      	mov	fp, r0
 8005830:	9013      	str	r0, [sp, #76]	; 0x4c
 8005832:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005836:	f7fe bf39 	b.w	80046ac <_vfprintf_r+0x434>
 800583a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800583c:	2b47      	cmp	r3, #71	; 0x47
 800583e:	f47f ad8b 	bne.w	8005358 <_vfprintf_r+0x10e0>
 8005842:	9b07      	ldr	r3, [sp, #28]
 8005844:	07dc      	lsls	r4, r3, #31
 8005846:	f53f aea1 	bmi.w	800558c <_vfprintf_r+0x1314>
 800584a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800584c:	2f47      	cmp	r7, #71	; 0x47
 800584e:	eba3 0306 	sub.w	r3, r3, r6
 8005852:	9312      	str	r3, [sp, #72]	; 0x48
 8005854:	f43f aeef 	beq.w	8005636 <_vfprintf_r+0x13be>
 8005858:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800585a:	e704      	b.n	8005666 <_vfprintf_r+0x13ee>
 800585c:	aa27      	add	r2, sp, #156	; 0x9c
 800585e:	9908      	ldr	r1, [sp, #32]
 8005860:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005862:	f002 ff37 	bl	80086d4 <__sprint_r>
 8005866:	2800      	cmp	r0, #0
 8005868:	f47e ae36 	bne.w	80044d8 <_vfprintf_r+0x260>
 800586c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800586e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005870:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005872:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005876:	e61a      	b.n	80054ae <_vfprintf_r+0x1236>
 8005878:	46a0      	mov	r8, r4
 800587a:	2500      	movs	r5, #0
 800587c:	f7fe bd72 	b.w	8004364 <_vfprintf_r+0xec>
 8005880:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005882:	e57d      	b.n	8005380 <_vfprintf_r+0x1108>
 8005884:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005886:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005888:	4413      	add	r3, r2
 800588a:	2267      	movs	r2, #103	; 0x67
 800588c:	930d      	str	r3, [sp, #52]	; 0x34
 800588e:	9211      	str	r2, [sp, #68]	; 0x44
 8005890:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005894:	e591      	b.n	80053ba <_vfprintf_r+0x1142>
 8005896:	930e      	str	r3, [sp, #56]	; 0x38
 8005898:	4617      	mov	r7, r2
 800589a:	f7ff bbff 	b.w	800509c <_vfprintf_r+0xe24>
 800589e:	3330      	adds	r3, #48	; 0x30
 80058a0:	2230      	movs	r2, #48	; 0x30
 80058a2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 80058a6:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 80058aa:	ab24      	add	r3, sp, #144	; 0x90
 80058ac:	e717      	b.n	80056de <_vfprintf_r+0x1466>
 80058ae:	930e      	str	r3, [sp, #56]	; 0x38
 80058b0:	e4fc      	b.n	80052ac <_vfprintf_r+0x1034>
 80058b2:	4e3d      	ldr	r6, [pc, #244]	; (80059a8 <_vfprintf_r+0x1730>)
 80058b4:	4b3d      	ldr	r3, [pc, #244]	; (80059ac <_vfprintf_r+0x1734>)
 80058b6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80058ba:	f7ff b935 	b.w	8004b28 <_vfprintf_r+0x8b0>
 80058be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80058c2:	189d      	adds	r5, r3, r2
 80058c4:	eb05 030b 	add.w	r3, r5, fp
 80058c8:	930d      	str	r3, [sp, #52]	; 0x34
 80058ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80058ce:	e574      	b.n	80053ba <_vfprintf_r+0x1142>
 80058d0:	2200      	movs	r2, #0
 80058d2:	2300      	movs	r3, #0
 80058d4:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80058d8:	f003 fd24 	bl	8009324 <__aeabi_dcmpeq>
 80058dc:	2800      	cmp	r0, #0
 80058de:	f47f ae5f 	bne.w	80055a0 <_vfprintf_r+0x1328>
 80058e2:	f1c5 0501 	rsb	r5, r5, #1
 80058e6:	9521      	str	r5, [sp, #132]	; 0x84
 80058e8:	442c      	add	r4, r5
 80058ea:	e536      	b.n	800535a <_vfprintf_r+0x10e2>
 80058ec:	9b07      	ldr	r3, [sp, #28]
 80058ee:	f013 0301 	ands.w	r3, r3, #1
 80058f2:	f47f aefd 	bne.w	80056f0 <_vfprintf_r+0x1478>
 80058f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80058f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80058fe:	e55c      	b.n	80053ba <_vfprintf_r+0x1142>
 8005900:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005902:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005904:	f1c3 0301 	rsb	r3, r3, #1
 8005908:	441a      	add	r2, r3
 800590a:	4613      	mov	r3, r2
 800590c:	920d      	str	r2, [sp, #52]	; 0x34
 800590e:	e767      	b.n	80057e0 <_vfprintf_r+0x1568>
 8005910:	f1bb 0f00 	cmp.w	fp, #0
 8005914:	d102      	bne.n	800591c <_vfprintf_r+0x16a4>
 8005916:	9b07      	ldr	r3, [sp, #28]
 8005918:	07da      	lsls	r2, r3, #31
 800591a:	d507      	bpl.n	800592c <_vfprintf_r+0x16b4>
 800591c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800591e:	1c5d      	adds	r5, r3, #1
 8005920:	eb05 030b 	add.w	r3, r5, fp
 8005924:	930d      	str	r3, [sp, #52]	; 0x34
 8005926:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800592a:	e546      	b.n	80053ba <_vfprintf_r+0x1142>
 800592c:	2301      	movs	r3, #1
 800592e:	930d      	str	r3, [sp, #52]	; 0x34
 8005930:	e543      	b.n	80053ba <_vfprintf_r+0x1142>
 8005932:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005934:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005938:	6805      	ldr	r5, [r0, #0]
 800593a:	3004      	adds	r0, #4
 800593c:	2d00      	cmp	r5, #0
 800593e:	900e      	str	r0, [sp, #56]	; 0x38
 8005940:	46a0      	mov	r8, r4
 8005942:	f6be ad0d 	bge.w	8004360 <_vfprintf_r+0xe8>
 8005946:	f04f 35ff 	mov.w	r5, #4294967295
 800594a:	f7fe bd09 	b.w	8004360 <_vfprintf_r+0xe8>
 800594e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005952:	f7ff b893 	b.w	8004a7c <_vfprintf_r+0x804>
 8005956:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800595a:	f7ff b85d 	b.w	8004a18 <_vfprintf_r+0x7a0>
 800595e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005962:	f7fe bfbf 	b.w	80048e4 <_vfprintf_r+0x66c>
 8005966:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800596a:	f7fe be5c 	b.w	8004626 <_vfprintf_r+0x3ae>
 800596e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005972:	f7ff b812 	b.w	800499a <_vfprintf_r+0x722>
 8005976:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800597a:	f7fe bdca 	b.w	8004512 <_vfprintf_r+0x29a>
 800597e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005982:	f7ff b951 	b.w	8004c28 <_vfprintf_r+0x9b0>
 8005986:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800598a:	f7fe be23 	b.w	80045d4 <_vfprintf_r+0x35c>
 800598e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005992:	f7ff b8ed 	b.w	8004b70 <_vfprintf_r+0x8f8>
 8005996:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800599a:	f7ff b88c 	b.w	8004ab6 <_vfprintf_r+0x83e>
 800599e:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 80059a2:	e69c      	b.n	80056de <_vfprintf_r+0x1466>
 80059a4:	08009988 	.word	0x08009988
 80059a8:	0800995c 	.word	0x0800995c
 80059ac:	08009958 	.word	0x08009958

080059b0 <__sbprintf>:
 80059b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059b2:	460c      	mov	r4, r1
 80059b4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80059b8:	8989      	ldrh	r1, [r1, #12]
 80059ba:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80059bc:	89e5      	ldrh	r5, [r4, #14]
 80059be:	9619      	str	r6, [sp, #100]	; 0x64
 80059c0:	f021 0102 	bic.w	r1, r1, #2
 80059c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059c6:	f8ad 500e 	strh.w	r5, [sp, #14]
 80059ca:	2500      	movs	r5, #0
 80059cc:	69e7      	ldr	r7, [r4, #28]
 80059ce:	f8ad 100c 	strh.w	r1, [sp, #12]
 80059d2:	9609      	str	r6, [sp, #36]	; 0x24
 80059d4:	9506      	str	r5, [sp, #24]
 80059d6:	ae1a      	add	r6, sp, #104	; 0x68
 80059d8:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80059dc:	4669      	mov	r1, sp
 80059de:	9600      	str	r6, [sp, #0]
 80059e0:	9604      	str	r6, [sp, #16]
 80059e2:	9502      	str	r5, [sp, #8]
 80059e4:	9505      	str	r5, [sp, #20]
 80059e6:	9707      	str	r7, [sp, #28]
 80059e8:	4606      	mov	r6, r0
 80059ea:	f7fe fc45 	bl	8004278 <_vfprintf_r>
 80059ee:	1e05      	subs	r5, r0, #0
 80059f0:	db07      	blt.n	8005a02 <__sbprintf+0x52>
 80059f2:	4630      	mov	r0, r6
 80059f4:	4669      	mov	r1, sp
 80059f6:	f001 f8e9 	bl	8006bcc <_fflush_r>
 80059fa:	2800      	cmp	r0, #0
 80059fc:	bf18      	it	ne
 80059fe:	f04f 35ff 	movne.w	r5, #4294967295
 8005a02:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005a06:	065b      	lsls	r3, r3, #25
 8005a08:	d503      	bpl.n	8005a12 <__sbprintf+0x62>
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a10:	81a3      	strh	r3, [r4, #12]
 8005a12:	4628      	mov	r0, r5
 8005a14:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8005a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a1a:	bf00      	nop

08005a1c <_vsprintf_r>:
 8005a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a1e:	b09b      	sub	sp, #108	; 0x6c
 8005a20:	460d      	mov	r5, r1
 8005a22:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8005a26:	f44f 7702 	mov.w	r7, #520	; 0x208
 8005a2a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8005a2e:	4669      	mov	r1, sp
 8005a30:	9500      	str	r5, [sp, #0]
 8005a32:	9504      	str	r5, [sp, #16]
 8005a34:	f8ad 700c 	strh.w	r7, [sp, #12]
 8005a38:	9402      	str	r4, [sp, #8]
 8005a3a:	9405      	str	r4, [sp, #20]
 8005a3c:	f8ad 600e 	strh.w	r6, [sp, #14]
 8005a40:	f7fd f89e 	bl	8002b80 <_svfprintf_r>
 8005a44:	9b00      	ldr	r3, [sp, #0]
 8005a46:	2200      	movs	r2, #0
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	b01b      	add	sp, #108	; 0x6c
 8005a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a4e:	bf00      	nop

08005a50 <vsprintf>:
 8005a50:	b410      	push	{r4}
 8005a52:	4c04      	ldr	r4, [pc, #16]	; (8005a64 <vsprintf+0x14>)
 8005a54:	4613      	mov	r3, r2
 8005a56:	460a      	mov	r2, r1
 8005a58:	4601      	mov	r1, r0
 8005a5a:	6820      	ldr	r0, [r4, #0]
 8005a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a60:	f7ff bfdc 	b.w	8005a1c <_vsprintf_r>
 8005a64:	20000460 	.word	0x20000460

08005a68 <__swsetup_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4b30      	ldr	r3, [pc, #192]	; (8005b2c <__swsetup_r+0xc4>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4605      	mov	r5, r0
 8005a70:	460c      	mov	r4, r1
 8005a72:	b113      	cbz	r3, 8005a7a <__swsetup_r+0x12>
 8005a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a76:	2a00      	cmp	r2, #0
 8005a78:	d038      	beq.n	8005aec <__swsetup_r+0x84>
 8005a7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a7e:	b293      	uxth	r3, r2
 8005a80:	0718      	lsls	r0, r3, #28
 8005a82:	d50c      	bpl.n	8005a9e <__swsetup_r+0x36>
 8005a84:	6920      	ldr	r0, [r4, #16]
 8005a86:	b1a8      	cbz	r0, 8005ab4 <__swsetup_r+0x4c>
 8005a88:	f013 0201 	ands.w	r2, r3, #1
 8005a8c:	d01e      	beq.n	8005acc <__swsetup_r+0x64>
 8005a8e:	6963      	ldr	r3, [r4, #20]
 8005a90:	2200      	movs	r2, #0
 8005a92:	425b      	negs	r3, r3
 8005a94:	61a3      	str	r3, [r4, #24]
 8005a96:	60a2      	str	r2, [r4, #8]
 8005a98:	b1f0      	cbz	r0, 8005ad8 <__swsetup_r+0x70>
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	bd38      	pop	{r3, r4, r5, pc}
 8005a9e:	06d9      	lsls	r1, r3, #27
 8005aa0:	d53c      	bpl.n	8005b1c <__swsetup_r+0xb4>
 8005aa2:	0758      	lsls	r0, r3, #29
 8005aa4:	d426      	bmi.n	8005af4 <__swsetup_r+0x8c>
 8005aa6:	6920      	ldr	r0, [r4, #16]
 8005aa8:	f042 0308 	orr.w	r3, r2, #8
 8005aac:	81a3      	strh	r3, [r4, #12]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d1e9      	bne.n	8005a88 <__swsetup_r+0x20>
 8005ab4:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8005ab8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005abc:	d0e4      	beq.n	8005a88 <__swsetup_r+0x20>
 8005abe:	4628      	mov	r0, r5
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	f001 fc41 	bl	8007348 <__smakebuf_r>
 8005ac6:	89a3      	ldrh	r3, [r4, #12]
 8005ac8:	6920      	ldr	r0, [r4, #16]
 8005aca:	e7dd      	b.n	8005a88 <__swsetup_r+0x20>
 8005acc:	0799      	lsls	r1, r3, #30
 8005ace:	bf58      	it	pl
 8005ad0:	6962      	ldrpl	r2, [r4, #20]
 8005ad2:	60a2      	str	r2, [r4, #8]
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d1e0      	bne.n	8005a9a <__swsetup_r+0x32>
 8005ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005adc:	061a      	lsls	r2, r3, #24
 8005ade:	d5dd      	bpl.n	8005a9c <__swsetup_r+0x34>
 8005ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae4:	81a3      	strh	r3, [r4, #12]
 8005ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 f901 	bl	8006cf4 <__sinit>
 8005af2:	e7c2      	b.n	8005a7a <__swsetup_r+0x12>
 8005af4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005af6:	b151      	cbz	r1, 8005b0e <__swsetup_r+0xa6>
 8005af8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8005afc:	4299      	cmp	r1, r3
 8005afe:	d004      	beq.n	8005b0a <__swsetup_r+0xa2>
 8005b00:	4628      	mov	r0, r5
 8005b02:	f001 f94f 	bl	8006da4 <_free_r>
 8005b06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6323      	str	r3, [r4, #48]	; 0x30
 8005b0e:	2300      	movs	r3, #0
 8005b10:	6920      	ldr	r0, [r4, #16]
 8005b12:	6063      	str	r3, [r4, #4]
 8005b14:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8005b18:	6020      	str	r0, [r4, #0]
 8005b1a:	e7c5      	b.n	8005aa8 <__swsetup_r+0x40>
 8005b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b20:	2309      	movs	r3, #9
 8005b22:	602b      	str	r3, [r5, #0]
 8005b24:	f04f 30ff 	mov.w	r0, #4294967295
 8005b28:	81a2      	strh	r2, [r4, #12]
 8005b2a:	bd38      	pop	{r3, r4, r5, pc}
 8005b2c:	20000460 	.word	0x20000460

08005b30 <quorem>:
 8005b30:	6902      	ldr	r2, [r0, #16]
 8005b32:	690b      	ldr	r3, [r1, #16]
 8005b34:	4293      	cmp	r3, r2
 8005b36:	f300 808d 	bgt.w	8005c54 <quorem+0x124>
 8005b3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3e:	f103 38ff 	add.w	r8, r3, #4294967295
 8005b42:	f101 0714 	add.w	r7, r1, #20
 8005b46:	f100 0b14 	add.w	fp, r0, #20
 8005b4a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8005b4e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8005b52:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8005b56:	b083      	sub	sp, #12
 8005b58:	3201      	adds	r2, #1
 8005b5a:	fbb3 f9f2 	udiv	r9, r3, r2
 8005b5e:	eb0b 0304 	add.w	r3, fp, r4
 8005b62:	9400      	str	r4, [sp, #0]
 8005b64:	eb07 0a04 	add.w	sl, r7, r4
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	f1b9 0f00 	cmp.w	r9, #0
 8005b6e:	d039      	beq.n	8005be4 <quorem+0xb4>
 8005b70:	2500      	movs	r5, #0
 8005b72:	46bc      	mov	ip, r7
 8005b74:	46de      	mov	lr, fp
 8005b76:	462b      	mov	r3, r5
 8005b78:	f85c 6b04 	ldr.w	r6, [ip], #4
 8005b7c:	f8de 2000 	ldr.w	r2, [lr]
 8005b80:	b2b4      	uxth	r4, r6
 8005b82:	fb09 5504 	mla	r5, r9, r4, r5
 8005b86:	0c36      	lsrs	r6, r6, #16
 8005b88:	0c2c      	lsrs	r4, r5, #16
 8005b8a:	fb09 4406 	mla	r4, r9, r6, r4
 8005b8e:	b2ad      	uxth	r5, r5
 8005b90:	1b5b      	subs	r3, r3, r5
 8005b92:	b2a6      	uxth	r6, r4
 8005b94:	fa13 f382 	uxtah	r3, r3, r2
 8005b98:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 8005b9c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005ba6:	45e2      	cmp	sl, ip
 8005ba8:	f84e 3b04 	str.w	r3, [lr], #4
 8005bac:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8005bb0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8005bb4:	d2e0      	bcs.n	8005b78 <quorem+0x48>
 8005bb6:	9b00      	ldr	r3, [sp, #0]
 8005bb8:	f85b 3003 	ldr.w	r3, [fp, r3]
 8005bbc:	b993      	cbnz	r3, 8005be4 <quorem+0xb4>
 8005bbe:	9c01      	ldr	r4, [sp, #4]
 8005bc0:	1f23      	subs	r3, r4, #4
 8005bc2:	459b      	cmp	fp, r3
 8005bc4:	d20c      	bcs.n	8005be0 <quorem+0xb0>
 8005bc6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005bca:	b94b      	cbnz	r3, 8005be0 <quorem+0xb0>
 8005bcc:	f1a4 0308 	sub.w	r3, r4, #8
 8005bd0:	e002      	b.n	8005bd8 <quorem+0xa8>
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	3b04      	subs	r3, #4
 8005bd6:	b91a      	cbnz	r2, 8005be0 <quorem+0xb0>
 8005bd8:	459b      	cmp	fp, r3
 8005bda:	f108 38ff 	add.w	r8, r8, #4294967295
 8005bde:	d3f8      	bcc.n	8005bd2 <quorem+0xa2>
 8005be0:	f8c0 8010 	str.w	r8, [r0, #16]
 8005be4:	4604      	mov	r4, r0
 8005be6:	f002 f96b 	bl	8007ec0 <__mcmp>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	db2e      	blt.n	8005c4c <quorem+0x11c>
 8005bee:	f109 0901 	add.w	r9, r9, #1
 8005bf2:	465d      	mov	r5, fp
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f857 1b04 	ldr.w	r1, [r7], #4
 8005bfa:	6828      	ldr	r0, [r5, #0]
 8005bfc:	b28a      	uxth	r2, r1
 8005bfe:	1a9a      	subs	r2, r3, r2
 8005c00:	0c09      	lsrs	r1, r1, #16
 8005c02:	fa12 f280 	uxtah	r2, r2, r0
 8005c06:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8005c0a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8005c0e:	b291      	uxth	r1, r2
 8005c10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005c14:	45ba      	cmp	sl, r7
 8005c16:	f845 1b04 	str.w	r1, [r5], #4
 8005c1a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8005c1e:	d2ea      	bcs.n	8005bf6 <quorem+0xc6>
 8005c20:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8005c24:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8005c28:	b982      	cbnz	r2, 8005c4c <quorem+0x11c>
 8005c2a:	1f1a      	subs	r2, r3, #4
 8005c2c:	4593      	cmp	fp, r2
 8005c2e:	d20b      	bcs.n	8005c48 <quorem+0x118>
 8005c30:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8005c34:	b942      	cbnz	r2, 8005c48 <quorem+0x118>
 8005c36:	3b08      	subs	r3, #8
 8005c38:	e002      	b.n	8005c40 <quorem+0x110>
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	3b04      	subs	r3, #4
 8005c3e:	b91a      	cbnz	r2, 8005c48 <quorem+0x118>
 8005c40:	459b      	cmp	fp, r3
 8005c42:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c46:	d3f8      	bcc.n	8005c3a <quorem+0x10a>
 8005c48:	f8c4 8010 	str.w	r8, [r4, #16]
 8005c4c:	4648      	mov	r0, r9
 8005c4e:	b003      	add	sp, #12
 8005c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c54:	2000      	movs	r0, #0
 8005c56:	4770      	bx	lr

08005c58 <_dtoa_r>:
 8005c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005c5e:	b099      	sub	sp, #100	; 0x64
 8005c60:	4681      	mov	r9, r0
 8005c62:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8005c64:	4692      	mov	sl, r2
 8005c66:	469b      	mov	fp, r3
 8005c68:	b149      	cbz	r1, 8005c7e <_dtoa_r+0x26>
 8005c6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c6c:	604a      	str	r2, [r1, #4]
 8005c6e:	2301      	movs	r3, #1
 8005c70:	4093      	lsls	r3, r2
 8005c72:	608b      	str	r3, [r1, #8]
 8005c74:	f001 ff42 	bl	8007afc <_Bfree>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8005c7e:	f1bb 0f00 	cmp.w	fp, #0
 8005c82:	46d8      	mov	r8, fp
 8005c84:	db33      	blt.n	8005cee <_dtoa_r+0x96>
 8005c86:	2300      	movs	r3, #0
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	4ba3      	ldr	r3, [pc, #652]	; (8005f18 <_dtoa_r+0x2c0>)
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	ea08 0303 	and.w	r3, r8, r3
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d014      	beq.n	8005cc0 <_dtoa_r+0x68>
 8005c96:	2200      	movs	r2, #0
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4650      	mov	r0, sl
 8005c9c:	4659      	mov	r1, fp
 8005c9e:	f003 fb41 	bl	8009324 <__aeabi_dcmpeq>
 8005ca2:	4605      	mov	r5, r0
 8005ca4:	b348      	cbz	r0, 8005cfa <_dtoa_r+0xa2>
 8005ca6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ca8:	2301      	movs	r3, #1
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 80c2 	beq.w	8005e38 <_dtoa_r+0x1e0>
 8005cb4:	4899      	ldr	r0, [pc, #612]	; (8005f1c <_dtoa_r+0x2c4>)
 8005cb6:	6018      	str	r0, [r3, #0]
 8005cb8:	3801      	subs	r0, #1
 8005cba:	b019      	add	sp, #100	; 0x64
 8005cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005cc2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	f1ba 0f00 	cmp.w	sl, #0
 8005ccc:	f000 809f 	beq.w	8005e0e <_dtoa_r+0x1b6>
 8005cd0:	4893      	ldr	r0, [pc, #588]	; (8005f20 <_dtoa_r+0x2c8>)
 8005cd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0f0      	beq.n	8005cba <_dtoa_r+0x62>
 8005cd8:	78c3      	ldrb	r3, [r0, #3]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 80ae 	beq.w	8005e3c <_dtoa_r+0x1e4>
 8005ce0:	f100 0308 	add.w	r3, r0, #8
 8005ce4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	b019      	add	sp, #100	; 0x64
 8005cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	46c3      	mov	fp, r8
 8005cf8:	e7c7      	b.n	8005c8a <_dtoa_r+0x32>
 8005cfa:	aa16      	add	r2, sp, #88	; 0x58
 8005cfc:	ab17      	add	r3, sp, #92	; 0x5c
 8005cfe:	9201      	str	r2, [sp, #4]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	4652      	mov	r2, sl
 8005d04:	465b      	mov	r3, fp
 8005d06:	4648      	mov	r0, r9
 8005d08:	f002 f986 	bl	8008018 <__d2b>
 8005d0c:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8005d10:	9008      	str	r0, [sp, #32]
 8005d12:	f040 8085 	bne.w	8005e20 <_dtoa_r+0x1c8>
 8005d16:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8005d18:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005d1a:	442c      	add	r4, r5
 8005d1c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	f340 8289 	ble.w	8006238 <_dtoa_r+0x5e0>
 8005d26:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005d2a:	f204 4012 	addw	r0, r4, #1042	; 0x412
 8005d2e:	fa08 f803 	lsl.w	r8, r8, r3
 8005d32:	fa2a f000 	lsr.w	r0, sl, r0
 8005d36:	ea40 0008 	orr.w	r0, r0, r8
 8005d3a:	f003 f815 	bl	8008d68 <__aeabi_ui2d>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	3c01      	subs	r4, #1
 8005d42:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005d46:	930d      	str	r3, [sp, #52]	; 0x34
 8005d48:	2200      	movs	r2, #0
 8005d4a:	4b76      	ldr	r3, [pc, #472]	; (8005f24 <_dtoa_r+0x2cc>)
 8005d4c:	f002 fece 	bl	8008aec <__aeabi_dsub>
 8005d50:	a36b      	add	r3, pc, #428	; (adr r3, 8005f00 <_dtoa_r+0x2a8>)
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	f003 f87d 	bl	8008e54 <__aeabi_dmul>
 8005d5a:	a36b      	add	r3, pc, #428	; (adr r3, 8005f08 <_dtoa_r+0x2b0>)
 8005d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d60:	f002 fec6 	bl	8008af0 <__adddf3>
 8005d64:	4606      	mov	r6, r0
 8005d66:	4620      	mov	r0, r4
 8005d68:	460f      	mov	r7, r1
 8005d6a:	f003 f80d 	bl	8008d88 <__aeabi_i2d>
 8005d6e:	a368      	add	r3, pc, #416	; (adr r3, 8005f10 <_dtoa_r+0x2b8>)
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	f003 f86e 	bl	8008e54 <__aeabi_dmul>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	4639      	mov	r1, r7
 8005d80:	f002 feb6 	bl	8008af0 <__adddf3>
 8005d84:	4606      	mov	r6, r0
 8005d86:	460f      	mov	r7, r1
 8005d88:	f003 fb14 	bl	80093b4 <__aeabi_d2iz>
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	9004      	str	r0, [sp, #16]
 8005d90:	2300      	movs	r3, #0
 8005d92:	4630      	mov	r0, r6
 8005d94:	4639      	mov	r1, r7
 8005d96:	f003 facf 	bl	8009338 <__aeabi_dcmplt>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	f040 8227 	bne.w	80061ee <_dtoa_r+0x596>
 8005da0:	9e04      	ldr	r6, [sp, #16]
 8005da2:	2e16      	cmp	r6, #22
 8005da4:	f200 8220 	bhi.w	80061e8 <_dtoa_r+0x590>
 8005da8:	4b5f      	ldr	r3, [pc, #380]	; (8005f28 <_dtoa_r+0x2d0>)
 8005daa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005dae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005db2:	4652      	mov	r2, sl
 8005db4:	465b      	mov	r3, fp
 8005db6:	f003 fadd 	bl	8009374 <__aeabi_dcmpgt>
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	f000 8241 	beq.w	8006242 <_dtoa_r+0x5ea>
 8005dc0:	1e73      	subs	r3, r6, #1
 8005dc2:	9304      	str	r3, [sp, #16]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dc8:	1b2c      	subs	r4, r5, r4
 8005dca:	f1b4 0801 	subs.w	r8, r4, #1
 8005dce:	f100 8229 	bmi.w	8006224 <_dtoa_r+0x5cc>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9305      	str	r3, [sp, #20]
 8005dd6:	9b04      	ldr	r3, [sp, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f2c0 821a 	blt.w	8006212 <_dtoa_r+0x5ba>
 8005dde:	4498      	add	r8, r3
 8005de0:	930a      	str	r3, [sp, #40]	; 0x28
 8005de2:	2300      	movs	r3, #0
 8005de4:	9302      	str	r3, [sp, #8]
 8005de6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005de8:	2b09      	cmp	r3, #9
 8005dea:	d829      	bhi.n	8005e40 <_dtoa_r+0x1e8>
 8005dec:	2b05      	cmp	r3, #5
 8005dee:	f340 8643 	ble.w	8006a78 <_dtoa_r+0xe20>
 8005df2:	3b04      	subs	r3, #4
 8005df4:	9322      	str	r3, [sp, #136]	; 0x88
 8005df6:	2500      	movs	r5, #0
 8005df8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dfa:	3b02      	subs	r3, #2
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	f200 8622 	bhi.w	8006a46 <_dtoa_r+0xdee>
 8005e02:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005e06:	032a      	.short	0x032a
 8005e08:	03350223 	.word	0x03350223
 8005e0c:	044f      	.short	0x044f
 8005e0e:	4b44      	ldr	r3, [pc, #272]	; (8005f20 <_dtoa_r+0x2c8>)
 8005e10:	4a46      	ldr	r2, [pc, #280]	; (8005f2c <_dtoa_r+0x2d4>)
 8005e12:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005e16:	2800      	cmp	r0, #0
 8005e18:	bf14      	ite	ne
 8005e1a:	4618      	movne	r0, r3
 8005e1c:	4610      	moveq	r0, r2
 8005e1e:	e758      	b.n	8005cd2 <_dtoa_r+0x7a>
 8005e20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e24:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005e28:	950d      	str	r5, [sp, #52]	; 0x34
 8005e2a:	4650      	mov	r0, sl
 8005e2c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005e30:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005e34:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8005e36:	e787      	b.n	8005d48 <_dtoa_r+0xf0>
 8005e38:	483d      	ldr	r0, [pc, #244]	; (8005f30 <_dtoa_r+0x2d8>)
 8005e3a:	e73e      	b.n	8005cba <_dtoa_r+0x62>
 8005e3c:	1cc3      	adds	r3, r0, #3
 8005e3e:	e751      	b.n	8005ce4 <_dtoa_r+0x8c>
 8005e40:	2100      	movs	r1, #0
 8005e42:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8005e46:	4648      	mov	r0, r9
 8005e48:	9122      	str	r1, [sp, #136]	; 0x88
 8005e4a:	f001 fe31 	bl	8007ab0 <_Balloc>
 8005e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e52:	9306      	str	r3, [sp, #24]
 8005e54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005e56:	930c      	str	r3, [sp, #48]	; 0x30
 8005e58:	2301      	movs	r3, #1
 8005e5a:	9007      	str	r0, [sp, #28]
 8005e5c:	9223      	str	r2, [sp, #140]	; 0x8c
 8005e5e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8005e62:	9309      	str	r3, [sp, #36]	; 0x24
 8005e64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f2c0 80d0 	blt.w	800600c <_dtoa_r+0x3b4>
 8005e6c:	9a04      	ldr	r2, [sp, #16]
 8005e6e:	2a0e      	cmp	r2, #14
 8005e70:	f300 80cc 	bgt.w	800600c <_dtoa_r+0x3b4>
 8005e74:	4b2c      	ldr	r3, [pc, #176]	; (8005f28 <_dtoa_r+0x2d0>)
 8005e76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e7a:	ed93 7b00 	vldr	d7, [r3]
 8005e7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005e86:	f2c0 82fe 	blt.w	8006486 <_dtoa_r+0x82e>
 8005e8a:	4656      	mov	r6, sl
 8005e8c:	465f      	mov	r7, fp
 8005e8e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8005e92:	4630      	mov	r0, r6
 8005e94:	4652      	mov	r2, sl
 8005e96:	465b      	mov	r3, fp
 8005e98:	4639      	mov	r1, r7
 8005e9a:	f003 f905 	bl	80090a8 <__aeabi_ddiv>
 8005e9e:	f003 fa89 	bl	80093b4 <__aeabi_d2iz>
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	f002 ff70 	bl	8008d88 <__aeabi_i2d>
 8005ea8:	4652      	mov	r2, sl
 8005eaa:	465b      	mov	r3, fp
 8005eac:	f002 ffd2 	bl	8008e54 <__aeabi_dmul>
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	4639      	mov	r1, r7
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f002 fe18 	bl	8008aec <__aeabi_dsub>
 8005ebc:	9d07      	ldr	r5, [sp, #28]
 8005ebe:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8005ec2:	702b      	strb	r3, [r5, #0]
 8005ec4:	9b06      	ldr	r3, [sp, #24]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	4606      	mov	r6, r0
 8005eca:	460f      	mov	r7, r1
 8005ecc:	f105 0501 	add.w	r5, r5, #1
 8005ed0:	d061      	beq.n	8005f96 <_dtoa_r+0x33e>
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	4b17      	ldr	r3, [pc, #92]	; (8005f34 <_dtoa_r+0x2dc>)
 8005ed6:	f002 ffbd 	bl	8008e54 <__aeabi_dmul>
 8005eda:	2200      	movs	r2, #0
 8005edc:	2300      	movs	r3, #0
 8005ede:	4606      	mov	r6, r0
 8005ee0:	460f      	mov	r7, r1
 8005ee2:	f003 fa1f 	bl	8009324 <__aeabi_dcmpeq>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d17d      	bne.n	8005fe6 <_dtoa_r+0x38e>
 8005eea:	f8cd 9014 	str.w	r9, [sp, #20]
 8005eee:	f8dd a018 	ldr.w	sl, [sp, #24]
 8005ef2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8005ef6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005efa:	e028      	b.n	8005f4e <_dtoa_r+0x2f6>
 8005efc:	f3af 8000 	nop.w
 8005f00:	636f4361 	.word	0x636f4361
 8005f04:	3fd287a7 	.word	0x3fd287a7
 8005f08:	8b60c8b3 	.word	0x8b60c8b3
 8005f0c:	3fc68a28 	.word	0x3fc68a28
 8005f10:	509f79fb 	.word	0x509f79fb
 8005f14:	3fd34413 	.word	0x3fd34413
 8005f18:	7ff00000 	.word	0x7ff00000
 8005f1c:	08009991 	.word	0x08009991
 8005f20:	080099d0 	.word	0x080099d0
 8005f24:	3ff80000 	.word	0x3ff80000
 8005f28:	080099d8 	.word	0x080099d8
 8005f2c:	080099c4 	.word	0x080099c4
 8005f30:	08009990 	.word	0x08009990
 8005f34:	40240000 	.word	0x40240000
 8005f38:	f002 ff8c 	bl	8008e54 <__aeabi_dmul>
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2300      	movs	r3, #0
 8005f40:	4606      	mov	r6, r0
 8005f42:	460f      	mov	r7, r1
 8005f44:	f003 f9ee 	bl	8009324 <__aeabi_dcmpeq>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	f040 83ae 	bne.w	80066aa <_dtoa_r+0xa52>
 8005f4e:	4642      	mov	r2, r8
 8005f50:	464b      	mov	r3, r9
 8005f52:	4630      	mov	r0, r6
 8005f54:	4639      	mov	r1, r7
 8005f56:	f003 f8a7 	bl	80090a8 <__aeabi_ddiv>
 8005f5a:	f003 fa2b 	bl	80093b4 <__aeabi_d2iz>
 8005f5e:	4604      	mov	r4, r0
 8005f60:	f002 ff12 	bl	8008d88 <__aeabi_i2d>
 8005f64:	4642      	mov	r2, r8
 8005f66:	464b      	mov	r3, r9
 8005f68:	f002 ff74 	bl	8008e54 <__aeabi_dmul>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4630      	mov	r0, r6
 8005f72:	4639      	mov	r1, r7
 8005f74:	f002 fdba 	bl	8008aec <__aeabi_dsub>
 8005f78:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005f7c:	f805 eb01 	strb.w	lr, [r5], #1
 8005f80:	ebcb 0e05 	rsb	lr, fp, r5
 8005f84:	45d6      	cmp	lr, sl
 8005f86:	4606      	mov	r6, r0
 8005f88:	460f      	mov	r7, r1
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	4bae      	ldr	r3, [pc, #696]	; (8006248 <_dtoa_r+0x5f0>)
 8005f90:	d1d2      	bne.n	8005f38 <_dtoa_r+0x2e0>
 8005f92:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005f96:	4632      	mov	r2, r6
 8005f98:	463b      	mov	r3, r7
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	4639      	mov	r1, r7
 8005f9e:	f002 fda7 	bl	8008af0 <__adddf3>
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	460f      	mov	r7, r1
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fae:	f003 f9c3 	bl	8009338 <__aeabi_dcmplt>
 8005fb2:	b940      	cbnz	r0, 8005fc6 <_dtoa_r+0x36e>
 8005fb4:	4632      	mov	r2, r6
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fbc:	f003 f9b2 	bl	8009324 <__aeabi_dcmpeq>
 8005fc0:	b188      	cbz	r0, 8005fe6 <_dtoa_r+0x38e>
 8005fc2:	07e3      	lsls	r3, r4, #31
 8005fc4:	d50f      	bpl.n	8005fe6 <_dtoa_r+0x38e>
 8005fc6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8005fca:	9a07      	ldr	r2, [sp, #28]
 8005fcc:	1e6b      	subs	r3, r5, #1
 8005fce:	e004      	b.n	8005fda <_dtoa_r+0x382>
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	f000 83fc 	beq.w	80067ce <_dtoa_r+0xb76>
 8005fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fda:	2c39      	cmp	r4, #57	; 0x39
 8005fdc:	f103 0501 	add.w	r5, r3, #1
 8005fe0:	d0f6      	beq.n	8005fd0 <_dtoa_r+0x378>
 8005fe2:	3401      	adds	r4, #1
 8005fe4:	701c      	strb	r4, [r3, #0]
 8005fe6:	9908      	ldr	r1, [sp, #32]
 8005fe8:	4648      	mov	r0, r9
 8005fea:	f001 fd87 	bl	8007afc <_Bfree>
 8005fee:	2200      	movs	r2, #0
 8005ff0:	9b04      	ldr	r3, [sp, #16]
 8005ff2:	702a      	strb	r2, [r5, #0]
 8005ff4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 839b 	beq.w	8006738 <_dtoa_r+0xae0>
 8006002:	9807      	ldr	r0, [sp, #28]
 8006004:	601d      	str	r5, [r3, #0]
 8006006:	b019      	add	sp, #100	; 0x64
 8006008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800600e:	2a00      	cmp	r2, #0
 8006010:	f000 810e 	beq.w	8006230 <_dtoa_r+0x5d8>
 8006014:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006016:	2a01      	cmp	r2, #1
 8006018:	f340 8257 	ble.w	80064ca <_dtoa_r+0x872>
 800601c:	9b06      	ldr	r3, [sp, #24]
 800601e:	9a02      	ldr	r2, [sp, #8]
 8006020:	1e5f      	subs	r7, r3, #1
 8006022:	42ba      	cmp	r2, r7
 8006024:	f2c0 838b 	blt.w	800673e <_dtoa_r+0xae6>
 8006028:	1bd7      	subs	r7, r2, r7
 800602a:	9b06      	ldr	r3, [sp, #24]
 800602c:	2b00      	cmp	r3, #0
 800602e:	f2c0 8480 	blt.w	8006932 <_dtoa_r+0xcda>
 8006032:	9d05      	ldr	r5, [sp, #20]
 8006034:	9b06      	ldr	r3, [sp, #24]
 8006036:	9a05      	ldr	r2, [sp, #20]
 8006038:	2101      	movs	r1, #1
 800603a:	441a      	add	r2, r3
 800603c:	4648      	mov	r0, r9
 800603e:	9205      	str	r2, [sp, #20]
 8006040:	4498      	add	r8, r3
 8006042:	f001 fdf3 	bl	8007c2c <__i2b>
 8006046:	4606      	mov	r6, r0
 8006048:	b165      	cbz	r5, 8006064 <_dtoa_r+0x40c>
 800604a:	f1b8 0f00 	cmp.w	r8, #0
 800604e:	dd09      	ble.n	8006064 <_dtoa_r+0x40c>
 8006050:	4545      	cmp	r5, r8
 8006052:	9a05      	ldr	r2, [sp, #20]
 8006054:	462b      	mov	r3, r5
 8006056:	bfa8      	it	ge
 8006058:	4643      	movge	r3, r8
 800605a:	1ad2      	subs	r2, r2, r3
 800605c:	9205      	str	r2, [sp, #20]
 800605e:	1aed      	subs	r5, r5, r3
 8006060:	ebc3 0808 	rsb	r8, r3, r8
 8006064:	9b02      	ldr	r3, [sp, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	f340 82f5 	ble.w	8006656 <_dtoa_r+0x9fe>
 800606c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800606e:	2a00      	cmp	r2, #0
 8006070:	f000 8202 	beq.w	8006478 <_dtoa_r+0x820>
 8006074:	2f00      	cmp	r7, #0
 8006076:	f000 81ff 	beq.w	8006478 <_dtoa_r+0x820>
 800607a:	4631      	mov	r1, r6
 800607c:	463a      	mov	r2, r7
 800607e:	4648      	mov	r0, r9
 8006080:	f001 fe76 	bl	8007d70 <__pow5mult>
 8006084:	9a08      	ldr	r2, [sp, #32]
 8006086:	4601      	mov	r1, r0
 8006088:	4606      	mov	r6, r0
 800608a:	4648      	mov	r0, r9
 800608c:	f001 fdd8 	bl	8007c40 <__multiply>
 8006090:	9908      	ldr	r1, [sp, #32]
 8006092:	4604      	mov	r4, r0
 8006094:	4648      	mov	r0, r9
 8006096:	f001 fd31 	bl	8007afc <_Bfree>
 800609a:	9b02      	ldr	r3, [sp, #8]
 800609c:	1bdb      	subs	r3, r3, r7
 800609e:	9302      	str	r3, [sp, #8]
 80060a0:	f040 81e9 	bne.w	8006476 <_dtoa_r+0x81e>
 80060a4:	2101      	movs	r1, #1
 80060a6:	4648      	mov	r0, r9
 80060a8:	f001 fdc0 	bl	8007c2c <__i2b>
 80060ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ae:	9002      	str	r0, [sp, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8215 	beq.w	80064e0 <_dtoa_r+0x888>
 80060b6:	4601      	mov	r1, r0
 80060b8:	461a      	mov	r2, r3
 80060ba:	4648      	mov	r0, r9
 80060bc:	f001 fe58 	bl	8007d70 <__pow5mult>
 80060c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060c2:	9002      	str	r0, [sp, #8]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	f340 82f3 	ble.w	80066b0 <_dtoa_r+0xa58>
 80060ca:	2700      	movs	r7, #0
 80060cc:	9a02      	ldr	r2, [sp, #8]
 80060ce:	6913      	ldr	r3, [r2, #16]
 80060d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80060d4:	6918      	ldr	r0, [r3, #16]
 80060d6:	f001 fd5b 	bl	8007b90 <__hi0bits>
 80060da:	f1c0 0020 	rsb	r0, r0, #32
 80060de:	4440      	add	r0, r8
 80060e0:	f010 001f 	ands.w	r0, r0, #31
 80060e4:	f000 81fa 	beq.w	80064dc <_dtoa_r+0x884>
 80060e8:	f1c0 0320 	rsb	r3, r0, #32
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	f340 84bd 	ble.w	8006a6c <_dtoa_r+0xe14>
 80060f2:	f1c0 001c 	rsb	r0, r0, #28
 80060f6:	9b05      	ldr	r3, [sp, #20]
 80060f8:	4403      	add	r3, r0
 80060fa:	9305      	str	r3, [sp, #20]
 80060fc:	4405      	add	r5, r0
 80060fe:	4480      	add	r8, r0
 8006100:	9b05      	ldr	r3, [sp, #20]
 8006102:	2b00      	cmp	r3, #0
 8006104:	dd05      	ble.n	8006112 <_dtoa_r+0x4ba>
 8006106:	4621      	mov	r1, r4
 8006108:	461a      	mov	r2, r3
 800610a:	4648      	mov	r0, r9
 800610c:	f001 fe80 	bl	8007e10 <__lshift>
 8006110:	4604      	mov	r4, r0
 8006112:	f1b8 0f00 	cmp.w	r8, #0
 8006116:	dd05      	ble.n	8006124 <_dtoa_r+0x4cc>
 8006118:	4642      	mov	r2, r8
 800611a:	9902      	ldr	r1, [sp, #8]
 800611c:	4648      	mov	r0, r9
 800611e:	f001 fe77 	bl	8007e10 <__lshift>
 8006122:	9002      	str	r0, [sp, #8]
 8006124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006126:	2b00      	cmp	r3, #0
 8006128:	f040 827a 	bne.w	8006620 <_dtoa_r+0x9c8>
 800612c:	9b06      	ldr	r3, [sp, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	f340 8293 	ble.w	800665a <_dtoa_r+0xa02>
 8006134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006136:	2b00      	cmp	r3, #0
 8006138:	f040 81f4 	bne.w	8006524 <_dtoa_r+0x8cc>
 800613c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8006140:	9f06      	ldr	r7, [sp, #24]
 8006142:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006146:	465d      	mov	r5, fp
 8006148:	e002      	b.n	8006150 <_dtoa_r+0x4f8>
 800614a:	f001 fce1 	bl	8007b10 <__multadd>
 800614e:	4604      	mov	r4, r0
 8006150:	4641      	mov	r1, r8
 8006152:	4620      	mov	r0, r4
 8006154:	f7ff fcec 	bl	8005b30 <quorem>
 8006158:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800615c:	f805 ab01 	strb.w	sl, [r5], #1
 8006160:	ebcb 0305 	rsb	r3, fp, r5
 8006164:	42bb      	cmp	r3, r7
 8006166:	f04f 020a 	mov.w	r2, #10
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	4621      	mov	r1, r4
 8006170:	4648      	mov	r0, r9
 8006172:	dbea      	blt.n	800614a <_dtoa_r+0x4f2>
 8006174:	9b07      	ldr	r3, [sp, #28]
 8006176:	9a06      	ldr	r2, [sp, #24]
 8006178:	2a01      	cmp	r2, #1
 800617a:	bfac      	ite	ge
 800617c:	189b      	addge	r3, r3, r2
 800617e:	3301      	addlt	r3, #1
 8006180:	461d      	mov	r5, r3
 8006182:	f04f 0b00 	mov.w	fp, #0
 8006186:	4621      	mov	r1, r4
 8006188:	2201      	movs	r2, #1
 800618a:	4648      	mov	r0, r9
 800618c:	f001 fe40 	bl	8007e10 <__lshift>
 8006190:	9902      	ldr	r1, [sp, #8]
 8006192:	9008      	str	r0, [sp, #32]
 8006194:	f001 fe94 	bl	8007ec0 <__mcmp>
 8006198:	2800      	cmp	r0, #0
 800619a:	f340 8305 	ble.w	80067a8 <_dtoa_r+0xb50>
 800619e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80061a2:	9907      	ldr	r1, [sp, #28]
 80061a4:	1e6b      	subs	r3, r5, #1
 80061a6:	e004      	b.n	80061b2 <_dtoa_r+0x55a>
 80061a8:	428b      	cmp	r3, r1
 80061aa:	f000 8274 	beq.w	8006696 <_dtoa_r+0xa3e>
 80061ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061b2:	2a39      	cmp	r2, #57	; 0x39
 80061b4:	f103 0501 	add.w	r5, r3, #1
 80061b8:	d0f6      	beq.n	80061a8 <_dtoa_r+0x550>
 80061ba:	3201      	adds	r2, #1
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	9902      	ldr	r1, [sp, #8]
 80061c0:	4648      	mov	r0, r9
 80061c2:	f001 fc9b 	bl	8007afc <_Bfree>
 80061c6:	2e00      	cmp	r6, #0
 80061c8:	f43f af0d 	beq.w	8005fe6 <_dtoa_r+0x38e>
 80061cc:	f1bb 0f00 	cmp.w	fp, #0
 80061d0:	d005      	beq.n	80061de <_dtoa_r+0x586>
 80061d2:	45b3      	cmp	fp, r6
 80061d4:	d003      	beq.n	80061de <_dtoa_r+0x586>
 80061d6:	4659      	mov	r1, fp
 80061d8:	4648      	mov	r0, r9
 80061da:	f001 fc8f 	bl	8007afc <_Bfree>
 80061de:	4631      	mov	r1, r6
 80061e0:	4648      	mov	r0, r9
 80061e2:	f001 fc8b 	bl	8007afc <_Bfree>
 80061e6:	e6fe      	b.n	8005fe6 <_dtoa_r+0x38e>
 80061e8:	2301      	movs	r3, #1
 80061ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80061ec:	e5ec      	b.n	8005dc8 <_dtoa_r+0x170>
 80061ee:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80061f2:	4640      	mov	r0, r8
 80061f4:	f002 fdc8 	bl	8008d88 <__aeabi_i2d>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4630      	mov	r0, r6
 80061fe:	4639      	mov	r1, r7
 8006200:	f003 f890 	bl	8009324 <__aeabi_dcmpeq>
 8006204:	2800      	cmp	r0, #0
 8006206:	f47f adcb 	bne.w	8005da0 <_dtoa_r+0x148>
 800620a:	f108 33ff 	add.w	r3, r8, #4294967295
 800620e:	9304      	str	r3, [sp, #16]
 8006210:	e5c6      	b.n	8005da0 <_dtoa_r+0x148>
 8006212:	9a05      	ldr	r2, [sp, #20]
 8006214:	9b04      	ldr	r3, [sp, #16]
 8006216:	1ad2      	subs	r2, r2, r3
 8006218:	425b      	negs	r3, r3
 800621a:	9302      	str	r3, [sp, #8]
 800621c:	2300      	movs	r3, #0
 800621e:	9205      	str	r2, [sp, #20]
 8006220:	930a      	str	r3, [sp, #40]	; 0x28
 8006222:	e5e0      	b.n	8005de6 <_dtoa_r+0x18e>
 8006224:	f1c8 0300 	rsb	r3, r8, #0
 8006228:	9305      	str	r3, [sp, #20]
 800622a:	f04f 0800 	mov.w	r8, #0
 800622e:	e5d2      	b.n	8005dd6 <_dtoa_r+0x17e>
 8006230:	9f02      	ldr	r7, [sp, #8]
 8006232:	9d05      	ldr	r5, [sp, #20]
 8006234:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006236:	e707      	b.n	8006048 <_dtoa_r+0x3f0>
 8006238:	f1c3 0820 	rsb	r8, r3, #32
 800623c:	fa0a f008 	lsl.w	r0, sl, r8
 8006240:	e57b      	b.n	8005d3a <_dtoa_r+0xe2>
 8006242:	900b      	str	r0, [sp, #44]	; 0x2c
 8006244:	e5c0      	b.n	8005dc8 <_dtoa_r+0x170>
 8006246:	bf00      	nop
 8006248:	40240000 	.word	0x40240000
 800624c:	2300      	movs	r3, #0
 800624e:	9309      	str	r3, [sp, #36]	; 0x24
 8006250:	9b04      	ldr	r3, [sp, #16]
 8006252:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006254:	4413      	add	r3, r2
 8006256:	930c      	str	r3, [sp, #48]	; 0x30
 8006258:	3301      	adds	r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	9306      	str	r3, [sp, #24]
 800625e:	f340 827d 	ble.w	800675c <_dtoa_r+0xb04>
 8006262:	9c06      	ldr	r4, [sp, #24]
 8006264:	4626      	mov	r6, r4
 8006266:	2100      	movs	r1, #0
 8006268:	2e17      	cmp	r6, #23
 800626a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800626e:	d90b      	bls.n	8006288 <_dtoa_r+0x630>
 8006270:	2201      	movs	r2, #1
 8006272:	2304      	movs	r3, #4
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	f103 0014 	add.w	r0, r3, #20
 800627a:	42b0      	cmp	r0, r6
 800627c:	4611      	mov	r1, r2
 800627e:	f102 0201 	add.w	r2, r2, #1
 8006282:	d9f7      	bls.n	8006274 <_dtoa_r+0x61c>
 8006284:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8006288:	4648      	mov	r0, r9
 800628a:	f001 fc11 	bl	8007ab0 <_Balloc>
 800628e:	2c0e      	cmp	r4, #14
 8006290:	9007      	str	r0, [sp, #28]
 8006292:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8006296:	f63f ade5 	bhi.w	8005e64 <_dtoa_r+0x20c>
 800629a:	2d00      	cmp	r5, #0
 800629c:	f43f ade2 	beq.w	8005e64 <_dtoa_r+0x20c>
 80062a0:	9904      	ldr	r1, [sp, #16]
 80062a2:	2900      	cmp	r1, #0
 80062a4:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 80062a8:	f340 829a 	ble.w	80067e0 <_dtoa_r+0xb88>
 80062ac:	4b90      	ldr	r3, [pc, #576]	; (80064f0 <_dtoa_r+0x898>)
 80062ae:	f001 020f 	and.w	r2, r1, #15
 80062b2:	110e      	asrs	r6, r1, #4
 80062b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062b8:	06f0      	lsls	r0, r6, #27
 80062ba:	e9d3 4500 	ldrd	r4, r5, [r3]
 80062be:	f140 8246 	bpl.w	800674e <_dtoa_r+0xaf6>
 80062c2:	4b8c      	ldr	r3, [pc, #560]	; (80064f4 <_dtoa_r+0x89c>)
 80062c4:	4650      	mov	r0, sl
 80062c6:	4659      	mov	r1, fp
 80062c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062cc:	f002 feec 	bl	80090a8 <__aeabi_ddiv>
 80062d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062d4:	f006 060f 	and.w	r6, r6, #15
 80062d8:	f04f 0a03 	mov.w	sl, #3
 80062dc:	b186      	cbz	r6, 8006300 <_dtoa_r+0x6a8>
 80062de:	4f85      	ldr	r7, [pc, #532]	; (80064f4 <_dtoa_r+0x89c>)
 80062e0:	07f1      	lsls	r1, r6, #31
 80062e2:	d509      	bpl.n	80062f8 <_dtoa_r+0x6a0>
 80062e4:	4620      	mov	r0, r4
 80062e6:	4629      	mov	r1, r5
 80062e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062ec:	f002 fdb2 	bl	8008e54 <__aeabi_dmul>
 80062f0:	f10a 0a01 	add.w	sl, sl, #1
 80062f4:	4604      	mov	r4, r0
 80062f6:	460d      	mov	r5, r1
 80062f8:	1076      	asrs	r6, r6, #1
 80062fa:	f107 0708 	add.w	r7, r7, #8
 80062fe:	d1ef      	bne.n	80062e0 <_dtoa_r+0x688>
 8006300:	4622      	mov	r2, r4
 8006302:	462b      	mov	r3, r5
 8006304:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006308:	f002 fece 	bl	80090a8 <__aeabi_ddiv>
 800630c:	4606      	mov	r6, r0
 800630e:	460f      	mov	r7, r1
 8006310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006312:	b143      	cbz	r3, 8006326 <_dtoa_r+0x6ce>
 8006314:	2200      	movs	r2, #0
 8006316:	4b78      	ldr	r3, [pc, #480]	; (80064f8 <_dtoa_r+0x8a0>)
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	f003 f80c 	bl	8009338 <__aeabi_dcmplt>
 8006320:	2800      	cmp	r0, #0
 8006322:	f040 831a 	bne.w	800695a <_dtoa_r+0xd02>
 8006326:	4650      	mov	r0, sl
 8006328:	f002 fd2e 	bl	8008d88 <__aeabi_i2d>
 800632c:	4632      	mov	r2, r6
 800632e:	463b      	mov	r3, r7
 8006330:	f002 fd90 	bl	8008e54 <__aeabi_dmul>
 8006334:	4b71      	ldr	r3, [pc, #452]	; (80064fc <_dtoa_r+0x8a4>)
 8006336:	2200      	movs	r2, #0
 8006338:	f002 fbda 	bl	8008af0 <__adddf3>
 800633c:	9b06      	ldr	r3, [sp, #24]
 800633e:	4604      	mov	r4, r0
 8006340:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 81db 	beq.w	8006700 <_dtoa_r+0xaa8>
 800634a:	9b04      	ldr	r3, [sp, #16]
 800634c:	9314      	str	r3, [sp, #80]	; 0x50
 800634e:	9b06      	ldr	r3, [sp, #24]
 8006350:	9310      	str	r3, [sp, #64]	; 0x40
 8006352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 8294 	beq.w	8006882 <_dtoa_r+0xc2a>
 800635a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800635c:	4b64      	ldr	r3, [pc, #400]	; (80064f0 <_dtoa_r+0x898>)
 800635e:	4968      	ldr	r1, [pc, #416]	; (8006500 <_dtoa_r+0x8a8>)
 8006360:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006364:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006368:	2000      	movs	r0, #0
 800636a:	f002 fe9d 	bl	80090a8 <__aeabi_ddiv>
 800636e:	4622      	mov	r2, r4
 8006370:	462b      	mov	r3, r5
 8006372:	f002 fbbb 	bl	8008aec <__aeabi_dsub>
 8006376:	4682      	mov	sl, r0
 8006378:	468b      	mov	fp, r1
 800637a:	4630      	mov	r0, r6
 800637c:	4639      	mov	r1, r7
 800637e:	f003 f819 	bl	80093b4 <__aeabi_d2iz>
 8006382:	4604      	mov	r4, r0
 8006384:	f002 fd00 	bl	8008d88 <__aeabi_i2d>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	4630      	mov	r0, r6
 800638e:	4639      	mov	r1, r7
 8006390:	f002 fbac 	bl	8008aec <__aeabi_dsub>
 8006394:	3430      	adds	r4, #48	; 0x30
 8006396:	9d07      	ldr	r5, [sp, #28]
 8006398:	b2e4      	uxtb	r4, r4
 800639a:	4606      	mov	r6, r0
 800639c:	460f      	mov	r7, r1
 800639e:	702c      	strb	r4, [r5, #0]
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4650      	mov	r0, sl
 80063a6:	4659      	mov	r1, fp
 80063a8:	3501      	adds	r5, #1
 80063aa:	f002 ffe3 	bl	8009374 <__aeabi_dcmpgt>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d150      	bne.n	8006454 <_dtoa_r+0x7fc>
 80063b2:	4632      	mov	r2, r6
 80063b4:	463b      	mov	r3, r7
 80063b6:	2000      	movs	r0, #0
 80063b8:	494f      	ldr	r1, [pc, #316]	; (80064f8 <_dtoa_r+0x8a0>)
 80063ba:	f002 fb97 	bl	8008aec <__aeabi_dsub>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4650      	mov	r0, sl
 80063c4:	4659      	mov	r1, fp
 80063c6:	f002 ffd5 	bl	8009374 <__aeabi_dcmpgt>
 80063ca:	2800      	cmp	r0, #0
 80063cc:	f040 8308 	bne.w	80069e0 <_dtoa_r+0xd88>
 80063d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063d2:	2a01      	cmp	r2, #1
 80063d4:	f340 81f7 	ble.w	80067c6 <_dtoa_r+0xb6e>
 80063d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063da:	9a07      	ldr	r2, [sp, #28]
 80063dc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80063e0:	4413      	add	r3, r2
 80063e2:	4698      	mov	r8, r3
 80063e4:	e00d      	b.n	8006402 <_dtoa_r+0x7aa>
 80063e6:	2000      	movs	r0, #0
 80063e8:	4943      	ldr	r1, [pc, #268]	; (80064f8 <_dtoa_r+0x8a0>)
 80063ea:	f002 fb7f 	bl	8008aec <__aeabi_dsub>
 80063ee:	4652      	mov	r2, sl
 80063f0:	465b      	mov	r3, fp
 80063f2:	f002 ffa1 	bl	8009338 <__aeabi_dcmplt>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	f040 82f2 	bne.w	80069e0 <_dtoa_r+0xd88>
 80063fc:	4545      	cmp	r5, r8
 80063fe:	f000 81e0 	beq.w	80067c2 <_dtoa_r+0xb6a>
 8006402:	4650      	mov	r0, sl
 8006404:	4659      	mov	r1, fp
 8006406:	2200      	movs	r2, #0
 8006408:	4b3e      	ldr	r3, [pc, #248]	; (8006504 <_dtoa_r+0x8ac>)
 800640a:	f002 fd23 	bl	8008e54 <__aeabi_dmul>
 800640e:	2200      	movs	r2, #0
 8006410:	4b3c      	ldr	r3, [pc, #240]	; (8006504 <_dtoa_r+0x8ac>)
 8006412:	4682      	mov	sl, r0
 8006414:	468b      	mov	fp, r1
 8006416:	4630      	mov	r0, r6
 8006418:	4639      	mov	r1, r7
 800641a:	f002 fd1b 	bl	8008e54 <__aeabi_dmul>
 800641e:	460f      	mov	r7, r1
 8006420:	4606      	mov	r6, r0
 8006422:	f002 ffc7 	bl	80093b4 <__aeabi_d2iz>
 8006426:	4604      	mov	r4, r0
 8006428:	f002 fcae 	bl	8008d88 <__aeabi_i2d>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4630      	mov	r0, r6
 8006432:	4639      	mov	r1, r7
 8006434:	f002 fb5a 	bl	8008aec <__aeabi_dsub>
 8006438:	3430      	adds	r4, #48	; 0x30
 800643a:	b2e4      	uxtb	r4, r4
 800643c:	4652      	mov	r2, sl
 800643e:	465b      	mov	r3, fp
 8006440:	f805 4b01 	strb.w	r4, [r5], #1
 8006444:	4606      	mov	r6, r0
 8006446:	460f      	mov	r7, r1
 8006448:	f002 ff76 	bl	8009338 <__aeabi_dcmplt>
 800644c:	4632      	mov	r2, r6
 800644e:	463b      	mov	r3, r7
 8006450:	2800      	cmp	r0, #0
 8006452:	d0c8      	beq.n	80063e6 <_dtoa_r+0x78e>
 8006454:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006456:	9304      	str	r3, [sp, #16]
 8006458:	e5c5      	b.n	8005fe6 <_dtoa_r+0x38e>
 800645a:	2300      	movs	r3, #0
 800645c:	9309      	str	r3, [sp, #36]	; 0x24
 800645e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006460:	2b00      	cmp	r3, #0
 8006462:	f340 8180 	ble.w	8006766 <_dtoa_r+0xb0e>
 8006466:	461e      	mov	r6, r3
 8006468:	461c      	mov	r4, r3
 800646a:	930c      	str	r3, [sp, #48]	; 0x30
 800646c:	9306      	str	r3, [sp, #24]
 800646e:	e6fa      	b.n	8006266 <_dtoa_r+0x60e>
 8006470:	2301      	movs	r3, #1
 8006472:	9309      	str	r3, [sp, #36]	; 0x24
 8006474:	e7f3      	b.n	800645e <_dtoa_r+0x806>
 8006476:	9408      	str	r4, [sp, #32]
 8006478:	9a02      	ldr	r2, [sp, #8]
 800647a:	9908      	ldr	r1, [sp, #32]
 800647c:	4648      	mov	r0, r9
 800647e:	f001 fc77 	bl	8007d70 <__pow5mult>
 8006482:	4604      	mov	r4, r0
 8006484:	e60e      	b.n	80060a4 <_dtoa_r+0x44c>
 8006486:	9b06      	ldr	r3, [sp, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f73f acfe 	bgt.w	8005e8a <_dtoa_r+0x232>
 800648e:	f040 814f 	bne.w	8006730 <_dtoa_r+0xad8>
 8006492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006496:	2200      	movs	r2, #0
 8006498:	4b1b      	ldr	r3, [pc, #108]	; (8006508 <_dtoa_r+0x8b0>)
 800649a:	f002 fcdb 	bl	8008e54 <__aeabi_dmul>
 800649e:	465b      	mov	r3, fp
 80064a0:	4652      	mov	r2, sl
 80064a2:	f002 ff5d 	bl	8009360 <__aeabi_dcmpge>
 80064a6:	9b06      	ldr	r3, [sp, #24]
 80064a8:	9302      	str	r3, [sp, #8]
 80064aa:	461e      	mov	r6, r3
 80064ac:	2800      	cmp	r0, #0
 80064ae:	f000 80ea 	beq.w	8006686 <_dtoa_r+0xa2e>
 80064b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064b4:	9d07      	ldr	r5, [sp, #28]
 80064b6:	43db      	mvns	r3, r3
 80064b8:	9304      	str	r3, [sp, #16]
 80064ba:	9902      	ldr	r1, [sp, #8]
 80064bc:	4648      	mov	r0, r9
 80064be:	f001 fb1d 	bl	8007afc <_Bfree>
 80064c2:	2e00      	cmp	r6, #0
 80064c4:	f43f ad8f 	beq.w	8005fe6 <_dtoa_r+0x38e>
 80064c8:	e689      	b.n	80061de <_dtoa_r+0x586>
 80064ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064cc:	2a00      	cmp	r2, #0
 80064ce:	f000 8238 	beq.w	8006942 <_dtoa_r+0xcea>
 80064d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064d6:	9f02      	ldr	r7, [sp, #8]
 80064d8:	9d05      	ldr	r5, [sp, #20]
 80064da:	e5ac      	b.n	8006036 <_dtoa_r+0x3de>
 80064dc:	201c      	movs	r0, #28
 80064de:	e60a      	b.n	80060f6 <_dtoa_r+0x49e>
 80064e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	f340 8280 	ble.w	80069e8 <_dtoa_r+0xd90>
 80064e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80064ea:	2001      	movs	r0, #1
 80064ec:	e5f7      	b.n	80060de <_dtoa_r+0x486>
 80064ee:	bf00      	nop
 80064f0:	080099d8 	.word	0x080099d8
 80064f4:	08009aa0 	.word	0x08009aa0
 80064f8:	3ff00000 	.word	0x3ff00000
 80064fc:	401c0000 	.word	0x401c0000
 8006500:	3fe00000 	.word	0x3fe00000
 8006504:	40240000 	.word	0x40240000
 8006508:	40140000 	.word	0x40140000
 800650c:	4631      	mov	r1, r6
 800650e:	2300      	movs	r3, #0
 8006510:	220a      	movs	r2, #10
 8006512:	4648      	mov	r0, r9
 8006514:	f001 fafc 	bl	8007b10 <__multadd>
 8006518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800651a:	2b00      	cmp	r3, #0
 800651c:	4606      	mov	r6, r0
 800651e:	f340 828d 	ble.w	8006a3c <_dtoa_r+0xde4>
 8006522:	9306      	str	r3, [sp, #24]
 8006524:	2d00      	cmp	r5, #0
 8006526:	dd05      	ble.n	8006534 <_dtoa_r+0x8dc>
 8006528:	4631      	mov	r1, r6
 800652a:	462a      	mov	r2, r5
 800652c:	4648      	mov	r0, r9
 800652e:	f001 fc6f 	bl	8007e10 <__lshift>
 8006532:	4606      	mov	r6, r0
 8006534:	2f00      	cmp	r7, #0
 8006536:	f040 817c 	bne.w	8006832 <_dtoa_r+0xbda>
 800653a:	46b0      	mov	r8, r6
 800653c:	9b06      	ldr	r3, [sp, #24]
 800653e:	9a07      	ldr	r2, [sp, #28]
 8006540:	3b01      	subs	r3, #1
 8006542:	18d3      	adds	r3, r2, r3
 8006544:	9308      	str	r3, [sp, #32]
 8006546:	f00a 0301 	and.w	r3, sl, #1
 800654a:	9309      	str	r3, [sp, #36]	; 0x24
 800654c:	4617      	mov	r7, r2
 800654e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006552:	4620      	mov	r0, r4
 8006554:	4659      	mov	r1, fp
 8006556:	f7ff faeb 	bl	8005b30 <quorem>
 800655a:	4631      	mov	r1, r6
 800655c:	4605      	mov	r5, r0
 800655e:	4620      	mov	r0, r4
 8006560:	f001 fcae 	bl	8007ec0 <__mcmp>
 8006564:	4642      	mov	r2, r8
 8006566:	4659      	mov	r1, fp
 8006568:	4682      	mov	sl, r0
 800656a:	4648      	mov	r0, r9
 800656c:	f001 fcca 	bl	8007f04 <__mdiff>
 8006570:	68c2      	ldr	r2, [r0, #12]
 8006572:	4683      	mov	fp, r0
 8006574:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8006578:	2a00      	cmp	r2, #0
 800657a:	d149      	bne.n	8006610 <_dtoa_r+0x9b8>
 800657c:	4601      	mov	r1, r0
 800657e:	4620      	mov	r0, r4
 8006580:	9306      	str	r3, [sp, #24]
 8006582:	f001 fc9d 	bl	8007ec0 <__mcmp>
 8006586:	4659      	mov	r1, fp
 8006588:	9005      	str	r0, [sp, #20]
 800658a:	4648      	mov	r0, r9
 800658c:	f001 fab6 	bl	8007afc <_Bfree>
 8006590:	9a05      	ldr	r2, [sp, #20]
 8006592:	9b06      	ldr	r3, [sp, #24]
 8006594:	b92a      	cbnz	r2, 80065a2 <_dtoa_r+0x94a>
 8006596:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006598:	b919      	cbnz	r1, 80065a2 <_dtoa_r+0x94a>
 800659a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800659c:	2900      	cmp	r1, #0
 800659e:	f000 8235 	beq.w	8006a0c <_dtoa_r+0xdb4>
 80065a2:	f1ba 0f00 	cmp.w	sl, #0
 80065a6:	f2c0 80e3 	blt.w	8006770 <_dtoa_r+0xb18>
 80065aa:	d105      	bne.n	80065b8 <_dtoa_r+0x960>
 80065ac:	9922      	ldr	r1, [sp, #136]	; 0x88
 80065ae:	b919      	cbnz	r1, 80065b8 <_dtoa_r+0x960>
 80065b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065b2:	2900      	cmp	r1, #0
 80065b4:	f000 80dc 	beq.w	8006770 <_dtoa_r+0xb18>
 80065b8:	2a00      	cmp	r2, #0
 80065ba:	f300 814e 	bgt.w	800685a <_dtoa_r+0xc02>
 80065be:	9a08      	ldr	r2, [sp, #32]
 80065c0:	703b      	strb	r3, [r7, #0]
 80065c2:	f107 0a01 	add.w	sl, r7, #1
 80065c6:	4297      	cmp	r7, r2
 80065c8:	4655      	mov	r5, sl
 80065ca:	f000 8152 	beq.w	8006872 <_dtoa_r+0xc1a>
 80065ce:	4621      	mov	r1, r4
 80065d0:	2300      	movs	r3, #0
 80065d2:	220a      	movs	r2, #10
 80065d4:	4648      	mov	r0, r9
 80065d6:	f001 fa9b 	bl	8007b10 <__multadd>
 80065da:	4546      	cmp	r6, r8
 80065dc:	4604      	mov	r4, r0
 80065de:	4631      	mov	r1, r6
 80065e0:	f04f 0300 	mov.w	r3, #0
 80065e4:	f04f 020a 	mov.w	r2, #10
 80065e8:	4648      	mov	r0, r9
 80065ea:	d00b      	beq.n	8006604 <_dtoa_r+0x9ac>
 80065ec:	f001 fa90 	bl	8007b10 <__multadd>
 80065f0:	4641      	mov	r1, r8
 80065f2:	4606      	mov	r6, r0
 80065f4:	2300      	movs	r3, #0
 80065f6:	220a      	movs	r2, #10
 80065f8:	4648      	mov	r0, r9
 80065fa:	f001 fa89 	bl	8007b10 <__multadd>
 80065fe:	4657      	mov	r7, sl
 8006600:	4680      	mov	r8, r0
 8006602:	e7a4      	b.n	800654e <_dtoa_r+0x8f6>
 8006604:	f001 fa84 	bl	8007b10 <__multadd>
 8006608:	4657      	mov	r7, sl
 800660a:	4606      	mov	r6, r0
 800660c:	4680      	mov	r8, r0
 800660e:	e79e      	b.n	800654e <_dtoa_r+0x8f6>
 8006610:	4601      	mov	r1, r0
 8006612:	4648      	mov	r0, r9
 8006614:	9305      	str	r3, [sp, #20]
 8006616:	f001 fa71 	bl	8007afc <_Bfree>
 800661a:	2201      	movs	r2, #1
 800661c:	9b05      	ldr	r3, [sp, #20]
 800661e:	e7c0      	b.n	80065a2 <_dtoa_r+0x94a>
 8006620:	9902      	ldr	r1, [sp, #8]
 8006622:	4620      	mov	r0, r4
 8006624:	f001 fc4c 	bl	8007ec0 <__mcmp>
 8006628:	2800      	cmp	r0, #0
 800662a:	f6bf ad7f 	bge.w	800612c <_dtoa_r+0x4d4>
 800662e:	4621      	mov	r1, r4
 8006630:	9c04      	ldr	r4, [sp, #16]
 8006632:	2300      	movs	r3, #0
 8006634:	3c01      	subs	r4, #1
 8006636:	220a      	movs	r2, #10
 8006638:	4648      	mov	r0, r9
 800663a:	9404      	str	r4, [sp, #16]
 800663c:	f001 fa68 	bl	8007b10 <__multadd>
 8006640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006642:	4604      	mov	r4, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	f47f af61 	bne.w	800650c <_dtoa_r+0x8b4>
 800664a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800664c:	2b00      	cmp	r3, #0
 800664e:	f340 81ed 	ble.w	8006a2c <_dtoa_r+0xdd4>
 8006652:	9306      	str	r3, [sp, #24]
 8006654:	e572      	b.n	800613c <_dtoa_r+0x4e4>
 8006656:	9c08      	ldr	r4, [sp, #32]
 8006658:	e524      	b.n	80060a4 <_dtoa_r+0x44c>
 800665a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800665c:	2b02      	cmp	r3, #2
 800665e:	f77f ad69 	ble.w	8006134 <_dtoa_r+0x4dc>
 8006662:	9b06      	ldr	r3, [sp, #24]
 8006664:	2b00      	cmp	r3, #0
 8006666:	f040 819d 	bne.w	80069a4 <_dtoa_r+0xd4c>
 800666a:	9902      	ldr	r1, [sp, #8]
 800666c:	2205      	movs	r2, #5
 800666e:	4648      	mov	r0, r9
 8006670:	f001 fa4e 	bl	8007b10 <__multadd>
 8006674:	4601      	mov	r1, r0
 8006676:	9002      	str	r0, [sp, #8]
 8006678:	4620      	mov	r0, r4
 800667a:	f001 fc21 	bl	8007ec0 <__mcmp>
 800667e:	2800      	cmp	r0, #0
 8006680:	9408      	str	r4, [sp, #32]
 8006682:	f77f af16 	ble.w	80064b2 <_dtoa_r+0x85a>
 8006686:	9a04      	ldr	r2, [sp, #16]
 8006688:	9907      	ldr	r1, [sp, #28]
 800668a:	2331      	movs	r3, #49	; 0x31
 800668c:	3201      	adds	r2, #1
 800668e:	9204      	str	r2, [sp, #16]
 8006690:	700b      	strb	r3, [r1, #0]
 8006692:	1c4d      	adds	r5, r1, #1
 8006694:	e711      	b.n	80064ba <_dtoa_r+0x862>
 8006696:	9a04      	ldr	r2, [sp, #16]
 8006698:	3201      	adds	r2, #1
 800669a:	9204      	str	r2, [sp, #16]
 800669c:	9a07      	ldr	r2, [sp, #28]
 800669e:	2331      	movs	r3, #49	; 0x31
 80066a0:	7013      	strb	r3, [r2, #0]
 80066a2:	e58c      	b.n	80061be <_dtoa_r+0x566>
 80066a4:	2301      	movs	r3, #1
 80066a6:	9309      	str	r3, [sp, #36]	; 0x24
 80066a8:	e5d2      	b.n	8006250 <_dtoa_r+0x5f8>
 80066aa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80066ae:	e49a      	b.n	8005fe6 <_dtoa_r+0x38e>
 80066b0:	f1ba 0f00 	cmp.w	sl, #0
 80066b4:	f47f ad09 	bne.w	80060ca <_dtoa_r+0x472>
 80066b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f040 813e 	bne.w	800693e <_dtoa_r+0xce6>
 80066c2:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80066c6:	0d3f      	lsrs	r7, r7, #20
 80066c8:	053f      	lsls	r7, r7, #20
 80066ca:	b12f      	cbz	r7, 80066d8 <_dtoa_r+0xa80>
 80066cc:	9b05      	ldr	r3, [sp, #20]
 80066ce:	3301      	adds	r3, #1
 80066d0:	9305      	str	r3, [sp, #20]
 80066d2:	f108 0801 	add.w	r8, r8, #1
 80066d6:	2701      	movs	r7, #1
 80066d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066da:	2001      	movs	r0, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f43f acfe 	beq.w	80060de <_dtoa_r+0x486>
 80066e2:	e4f3      	b.n	80060cc <_dtoa_r+0x474>
 80066e4:	4650      	mov	r0, sl
 80066e6:	f002 fb4f 	bl	8008d88 <__aeabi_i2d>
 80066ea:	4632      	mov	r2, r6
 80066ec:	463b      	mov	r3, r7
 80066ee:	f002 fbb1 	bl	8008e54 <__aeabi_dmul>
 80066f2:	2200      	movs	r2, #0
 80066f4:	4bbf      	ldr	r3, [pc, #764]	; (80069f4 <_dtoa_r+0xd9c>)
 80066f6:	f002 f9fb 	bl	8008af0 <__adddf3>
 80066fa:	4604      	mov	r4, r0
 80066fc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006700:	4630      	mov	r0, r6
 8006702:	4639      	mov	r1, r7
 8006704:	2200      	movs	r2, #0
 8006706:	4bbc      	ldr	r3, [pc, #752]	; (80069f8 <_dtoa_r+0xda0>)
 8006708:	f002 f9f0 	bl	8008aec <__aeabi_dsub>
 800670c:	4622      	mov	r2, r4
 800670e:	462b      	mov	r3, r5
 8006710:	4606      	mov	r6, r0
 8006712:	460f      	mov	r7, r1
 8006714:	f002 fe2e 	bl	8009374 <__aeabi_dcmpgt>
 8006718:	2800      	cmp	r0, #0
 800671a:	f040 80ae 	bne.w	800687a <_dtoa_r+0xc22>
 800671e:	4622      	mov	r2, r4
 8006720:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006724:	4630      	mov	r0, r6
 8006726:	4639      	mov	r1, r7
 8006728:	f002 fe06 	bl	8009338 <__aeabi_dcmplt>
 800672c:	2800      	cmp	r0, #0
 800672e:	d04a      	beq.n	80067c6 <_dtoa_r+0xb6e>
 8006730:	2300      	movs	r3, #0
 8006732:	9302      	str	r3, [sp, #8]
 8006734:	461e      	mov	r6, r3
 8006736:	e6bc      	b.n	80064b2 <_dtoa_r+0x85a>
 8006738:	9807      	ldr	r0, [sp, #28]
 800673a:	f7ff babe 	b.w	8005cba <_dtoa_r+0x62>
 800673e:	9b02      	ldr	r3, [sp, #8]
 8006740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006742:	9702      	str	r7, [sp, #8]
 8006744:	1afb      	subs	r3, r7, r3
 8006746:	441a      	add	r2, r3
 8006748:	920a      	str	r2, [sp, #40]	; 0x28
 800674a:	2700      	movs	r7, #0
 800674c:	e46d      	b.n	800602a <_dtoa_r+0x3d2>
 800674e:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8006752:	f04f 0a02 	mov.w	sl, #2
 8006756:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800675a:	e5bf      	b.n	80062dc <_dtoa_r+0x684>
 800675c:	461c      	mov	r4, r3
 800675e:	2100      	movs	r1, #0
 8006760:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8006764:	e590      	b.n	8006288 <_dtoa_r+0x630>
 8006766:	2401      	movs	r4, #1
 8006768:	9423      	str	r4, [sp, #140]	; 0x8c
 800676a:	940c      	str	r4, [sp, #48]	; 0x30
 800676c:	9406      	str	r4, [sp, #24]
 800676e:	e7f6      	b.n	800675e <_dtoa_r+0xb06>
 8006770:	2a00      	cmp	r2, #0
 8006772:	469a      	mov	sl, r3
 8006774:	dd11      	ble.n	800679a <_dtoa_r+0xb42>
 8006776:	4621      	mov	r1, r4
 8006778:	2201      	movs	r2, #1
 800677a:	4648      	mov	r0, r9
 800677c:	f001 fb48 	bl	8007e10 <__lshift>
 8006780:	9902      	ldr	r1, [sp, #8]
 8006782:	4604      	mov	r4, r0
 8006784:	f001 fb9c 	bl	8007ec0 <__mcmp>
 8006788:	2800      	cmp	r0, #0
 800678a:	f340 8148 	ble.w	8006a1e <_dtoa_r+0xdc6>
 800678e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006792:	f000 8109 	beq.w	80069a8 <_dtoa_r+0xd50>
 8006796:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 800679a:	46b3      	mov	fp, r6
 800679c:	f887 a000 	strb.w	sl, [r7]
 80067a0:	1c7d      	adds	r5, r7, #1
 80067a2:	4646      	mov	r6, r8
 80067a4:	9408      	str	r4, [sp, #32]
 80067a6:	e50a      	b.n	80061be <_dtoa_r+0x566>
 80067a8:	d104      	bne.n	80067b4 <_dtoa_r+0xb5c>
 80067aa:	f01a 0f01 	tst.w	sl, #1
 80067ae:	d001      	beq.n	80067b4 <_dtoa_r+0xb5c>
 80067b0:	e4f5      	b.n	800619e <_dtoa_r+0x546>
 80067b2:	4615      	mov	r5, r2
 80067b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067b8:	2b30      	cmp	r3, #48	; 0x30
 80067ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80067be:	d0f8      	beq.n	80067b2 <_dtoa_r+0xb5a>
 80067c0:	e4fd      	b.n	80061be <_dtoa_r+0x566>
 80067c2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80067c6:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 80067ca:	f7ff bb4b 	b.w	8005e64 <_dtoa_r+0x20c>
 80067ce:	9907      	ldr	r1, [sp, #28]
 80067d0:	2230      	movs	r2, #48	; 0x30
 80067d2:	700a      	strb	r2, [r1, #0]
 80067d4:	9a04      	ldr	r2, [sp, #16]
 80067d6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 80067da:	3201      	adds	r2, #1
 80067dc:	9204      	str	r2, [sp, #16]
 80067de:	e400      	b.n	8005fe2 <_dtoa_r+0x38a>
 80067e0:	9b04      	ldr	r3, [sp, #16]
 80067e2:	425c      	negs	r4, r3
 80067e4:	2c00      	cmp	r4, #0
 80067e6:	f000 80b3 	beq.w	8006950 <_dtoa_r+0xcf8>
 80067ea:	4b84      	ldr	r3, [pc, #528]	; (80069fc <_dtoa_r+0xda4>)
 80067ec:	f004 020f 	and.w	r2, r4, #15
 80067f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80067fc:	f002 fb2a 	bl	8008e54 <__aeabi_dmul>
 8006800:	1124      	asrs	r4, r4, #4
 8006802:	4606      	mov	r6, r0
 8006804:	460f      	mov	r7, r1
 8006806:	f000 8116 	beq.w	8006a36 <_dtoa_r+0xdde>
 800680a:	4d7d      	ldr	r5, [pc, #500]	; (8006a00 <_dtoa_r+0xda8>)
 800680c:	f04f 0a02 	mov.w	sl, #2
 8006810:	07e2      	lsls	r2, r4, #31
 8006812:	d509      	bpl.n	8006828 <_dtoa_r+0xbd0>
 8006814:	4630      	mov	r0, r6
 8006816:	4639      	mov	r1, r7
 8006818:	e9d5 2300 	ldrd	r2, r3, [r5]
 800681c:	f002 fb1a 	bl	8008e54 <__aeabi_dmul>
 8006820:	f10a 0a01 	add.w	sl, sl, #1
 8006824:	4606      	mov	r6, r0
 8006826:	460f      	mov	r7, r1
 8006828:	1064      	asrs	r4, r4, #1
 800682a:	f105 0508 	add.w	r5, r5, #8
 800682e:	d1ef      	bne.n	8006810 <_dtoa_r+0xbb8>
 8006830:	e56e      	b.n	8006310 <_dtoa_r+0x6b8>
 8006832:	6871      	ldr	r1, [r6, #4]
 8006834:	4648      	mov	r0, r9
 8006836:	f001 f93b 	bl	8007ab0 <_Balloc>
 800683a:	6933      	ldr	r3, [r6, #16]
 800683c:	1c9a      	adds	r2, r3, #2
 800683e:	4605      	mov	r5, r0
 8006840:	0092      	lsls	r2, r2, #2
 8006842:	f106 010c 	add.w	r1, r6, #12
 8006846:	300c      	adds	r0, #12
 8006848:	f7fb ff62 	bl	8002710 <memcpy>
 800684c:	4629      	mov	r1, r5
 800684e:	2201      	movs	r2, #1
 8006850:	4648      	mov	r0, r9
 8006852:	f001 fadd 	bl	8007e10 <__lshift>
 8006856:	4680      	mov	r8, r0
 8006858:	e670      	b.n	800653c <_dtoa_r+0x8e4>
 800685a:	2b39      	cmp	r3, #57	; 0x39
 800685c:	f000 80a4 	beq.w	80069a8 <_dtoa_r+0xd50>
 8006860:	f103 0a01 	add.w	sl, r3, #1
 8006864:	46b3      	mov	fp, r6
 8006866:	f887 a000 	strb.w	sl, [r7]
 800686a:	1c7d      	adds	r5, r7, #1
 800686c:	4646      	mov	r6, r8
 800686e:	9408      	str	r4, [sp, #32]
 8006870:	e4a5      	b.n	80061be <_dtoa_r+0x566>
 8006872:	46b3      	mov	fp, r6
 8006874:	469a      	mov	sl, r3
 8006876:	4646      	mov	r6, r8
 8006878:	e485      	b.n	8006186 <_dtoa_r+0x52e>
 800687a:	2300      	movs	r3, #0
 800687c:	9302      	str	r3, [sp, #8]
 800687e:	461e      	mov	r6, r3
 8006880:	e701      	b.n	8006686 <_dtoa_r+0xa2e>
 8006882:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006884:	495d      	ldr	r1, [pc, #372]	; (80069fc <_dtoa_r+0xda4>)
 8006886:	1e5a      	subs	r2, r3, #1
 8006888:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800688c:	462b      	mov	r3, r5
 800688e:	9215      	str	r2, [sp, #84]	; 0x54
 8006890:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006894:	4622      	mov	r2, r4
 8006896:	f002 fadd 	bl	8008e54 <__aeabi_dmul>
 800689a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800689e:	4639      	mov	r1, r7
 80068a0:	4630      	mov	r0, r6
 80068a2:	f002 fd87 	bl	80093b4 <__aeabi_d2iz>
 80068a6:	4604      	mov	r4, r0
 80068a8:	f002 fa6e 	bl	8008d88 <__aeabi_i2d>
 80068ac:	460b      	mov	r3, r1
 80068ae:	4602      	mov	r2, r0
 80068b0:	4639      	mov	r1, r7
 80068b2:	4630      	mov	r0, r6
 80068b4:	f002 f91a 	bl	8008aec <__aeabi_dsub>
 80068b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068ba:	460f      	mov	r7, r1
 80068bc:	9907      	ldr	r1, [sp, #28]
 80068be:	3430      	adds	r4, #48	; 0x30
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	4606      	mov	r6, r0
 80068c4:	700c      	strb	r4, [r1, #0]
 80068c6:	f101 0501 	add.w	r5, r1, #1
 80068ca:	d020      	beq.n	800690e <_dtoa_r+0xcb6>
 80068cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068ce:	9a07      	ldr	r2, [sp, #28]
 80068d0:	4413      	add	r3, r2
 80068d2:	469a      	mov	sl, r3
 80068d4:	46ab      	mov	fp, r5
 80068d6:	2200      	movs	r2, #0
 80068d8:	4b4a      	ldr	r3, [pc, #296]	; (8006a04 <_dtoa_r+0xdac>)
 80068da:	4630      	mov	r0, r6
 80068dc:	4639      	mov	r1, r7
 80068de:	f002 fab9 	bl	8008e54 <__aeabi_dmul>
 80068e2:	460f      	mov	r7, r1
 80068e4:	4606      	mov	r6, r0
 80068e6:	f002 fd65 	bl	80093b4 <__aeabi_d2iz>
 80068ea:	4604      	mov	r4, r0
 80068ec:	f002 fa4c 	bl	8008d88 <__aeabi_i2d>
 80068f0:	3430      	adds	r4, #48	; 0x30
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4630      	mov	r0, r6
 80068f8:	4639      	mov	r1, r7
 80068fa:	f002 f8f7 	bl	8008aec <__aeabi_dsub>
 80068fe:	f80b 4b01 	strb.w	r4, [fp], #1
 8006902:	45da      	cmp	sl, fp
 8006904:	4606      	mov	r6, r0
 8006906:	460f      	mov	r7, r1
 8006908:	d1e5      	bne.n	80068d6 <_dtoa_r+0xc7e>
 800690a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800690c:	441d      	add	r5, r3
 800690e:	2200      	movs	r2, #0
 8006910:	4b3d      	ldr	r3, [pc, #244]	; (8006a08 <_dtoa_r+0xdb0>)
 8006912:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8006916:	f002 f8eb 	bl	8008af0 <__adddf3>
 800691a:	4632      	mov	r2, r6
 800691c:	463b      	mov	r3, r7
 800691e:	f002 fd0b 	bl	8009338 <__aeabi_dcmplt>
 8006922:	2800      	cmp	r0, #0
 8006924:	d048      	beq.n	80069b8 <_dtoa_r+0xd60>
 8006926:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006928:	9304      	str	r3, [sp, #16]
 800692a:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800692e:	f7ff bb4c 	b.w	8005fca <_dtoa_r+0x372>
 8006932:	9b05      	ldr	r3, [sp, #20]
 8006934:	9a06      	ldr	r2, [sp, #24]
 8006936:	1a9d      	subs	r5, r3, r2
 8006938:	2300      	movs	r3, #0
 800693a:	f7ff bb7c 	b.w	8006036 <_dtoa_r+0x3de>
 800693e:	2700      	movs	r7, #0
 8006940:	e6ca      	b.n	80066d8 <_dtoa_r+0xa80>
 8006942:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006944:	9f02      	ldr	r7, [sp, #8]
 8006946:	9d05      	ldr	r5, [sp, #20]
 8006948:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800694c:	f7ff bb73 	b.w	8006036 <_dtoa_r+0x3de>
 8006950:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8006954:	f04f 0a02 	mov.w	sl, #2
 8006958:	e4da      	b.n	8006310 <_dtoa_r+0x6b8>
 800695a:	9b06      	ldr	r3, [sp, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	f43f aec1 	beq.w	80066e4 <_dtoa_r+0xa8c>
 8006962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006964:	2b00      	cmp	r3, #0
 8006966:	f77f af2e 	ble.w	80067c6 <_dtoa_r+0xb6e>
 800696a:	2200      	movs	r2, #0
 800696c:	4b25      	ldr	r3, [pc, #148]	; (8006a04 <_dtoa_r+0xdac>)
 800696e:	4630      	mov	r0, r6
 8006970:	4639      	mov	r1, r7
 8006972:	f002 fa6f 	bl	8008e54 <__aeabi_dmul>
 8006976:	4606      	mov	r6, r0
 8006978:	460f      	mov	r7, r1
 800697a:	f10a 0001 	add.w	r0, sl, #1
 800697e:	f002 fa03 	bl	8008d88 <__aeabi_i2d>
 8006982:	4632      	mov	r2, r6
 8006984:	463b      	mov	r3, r7
 8006986:	f002 fa65 	bl	8008e54 <__aeabi_dmul>
 800698a:	2200      	movs	r2, #0
 800698c:	4b19      	ldr	r3, [pc, #100]	; (80069f4 <_dtoa_r+0xd9c>)
 800698e:	f002 f8af 	bl	8008af0 <__adddf3>
 8006992:	9a04      	ldr	r2, [sp, #16]
 8006994:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006996:	9310      	str	r3, [sp, #64]	; 0x40
 8006998:	3a01      	subs	r2, #1
 800699a:	4604      	mov	r4, r0
 800699c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80069a0:	9214      	str	r2, [sp, #80]	; 0x50
 80069a2:	e4d6      	b.n	8006352 <_dtoa_r+0x6fa>
 80069a4:	9408      	str	r4, [sp, #32]
 80069a6:	e584      	b.n	80064b2 <_dtoa_r+0x85a>
 80069a8:	2239      	movs	r2, #57	; 0x39
 80069aa:	46b3      	mov	fp, r6
 80069ac:	9408      	str	r4, [sp, #32]
 80069ae:	4646      	mov	r6, r8
 80069b0:	703a      	strb	r2, [r7, #0]
 80069b2:	1c7d      	adds	r5, r7, #1
 80069b4:	f7ff bbf5 	b.w	80061a2 <_dtoa_r+0x54a>
 80069b8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80069bc:	2000      	movs	r0, #0
 80069be:	4912      	ldr	r1, [pc, #72]	; (8006a08 <_dtoa_r+0xdb0>)
 80069c0:	f002 f894 	bl	8008aec <__aeabi_dsub>
 80069c4:	4632      	mov	r2, r6
 80069c6:	463b      	mov	r3, r7
 80069c8:	f002 fcd4 	bl	8009374 <__aeabi_dcmpgt>
 80069cc:	b908      	cbnz	r0, 80069d2 <_dtoa_r+0xd7a>
 80069ce:	e6fa      	b.n	80067c6 <_dtoa_r+0xb6e>
 80069d0:	4615      	mov	r5, r2
 80069d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069d6:	2b30      	cmp	r3, #48	; 0x30
 80069d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80069dc:	d0f8      	beq.n	80069d0 <_dtoa_r+0xd78>
 80069de:	e539      	b.n	8006454 <_dtoa_r+0x7fc>
 80069e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069e2:	9304      	str	r3, [sp, #16]
 80069e4:	f7ff baf1 	b.w	8005fca <_dtoa_r+0x372>
 80069e8:	f1ba 0f00 	cmp.w	sl, #0
 80069ec:	f47f ad7c 	bne.w	80064e8 <_dtoa_r+0x890>
 80069f0:	e662      	b.n	80066b8 <_dtoa_r+0xa60>
 80069f2:	bf00      	nop
 80069f4:	401c0000 	.word	0x401c0000
 80069f8:	40140000 	.word	0x40140000
 80069fc:	080099d8 	.word	0x080099d8
 8006a00:	08009aa0 	.word	0x08009aa0
 8006a04:	40240000 	.word	0x40240000
 8006a08:	3fe00000 	.word	0x3fe00000
 8006a0c:	2b39      	cmp	r3, #57	; 0x39
 8006a0e:	46d3      	mov	fp, sl
 8006a10:	469a      	mov	sl, r3
 8006a12:	d0c9      	beq.n	80069a8 <_dtoa_r+0xd50>
 8006a14:	f1bb 0f00 	cmp.w	fp, #0
 8006a18:	f73f aebd 	bgt.w	8006796 <_dtoa_r+0xb3e>
 8006a1c:	e6bd      	b.n	800679a <_dtoa_r+0xb42>
 8006a1e:	f47f aebc 	bne.w	800679a <_dtoa_r+0xb42>
 8006a22:	f01a 0f01 	tst.w	sl, #1
 8006a26:	f43f aeb8 	beq.w	800679a <_dtoa_r+0xb42>
 8006a2a:	e6b0      	b.n	800678e <_dtoa_r+0xb36>
 8006a2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	dc25      	bgt.n	8006a7e <_dtoa_r+0xe26>
 8006a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a34:	e60d      	b.n	8006652 <_dtoa_r+0x9fa>
 8006a36:	f04f 0a02 	mov.w	sl, #2
 8006a3a:	e469      	b.n	8006310 <_dtoa_r+0x6b8>
 8006a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	dc1d      	bgt.n	8006a7e <_dtoa_r+0xe26>
 8006a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a44:	e56d      	b.n	8006522 <_dtoa_r+0x8ca>
 8006a46:	2400      	movs	r4, #0
 8006a48:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	4648      	mov	r0, r9
 8006a50:	f001 f82e 	bl	8007ab0 <_Balloc>
 8006a54:	f04f 33ff 	mov.w	r3, #4294967295
 8006a58:	9306      	str	r3, [sp, #24]
 8006a5a:	930c      	str	r3, [sp, #48]	; 0x30
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	9007      	str	r0, [sp, #28]
 8006a60:	9423      	str	r4, [sp, #140]	; 0x8c
 8006a62:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8006a66:	9309      	str	r3, [sp, #36]	; 0x24
 8006a68:	f7ff b9fc 	b.w	8005e64 <_dtoa_r+0x20c>
 8006a6c:	f43f ab48 	beq.w	8006100 <_dtoa_r+0x4a8>
 8006a70:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8006a74:	f7ff bb3f 	b.w	80060f6 <_dtoa_r+0x49e>
 8006a78:	2501      	movs	r5, #1
 8006a7a:	f7ff b9bd 	b.w	8005df8 <_dtoa_r+0x1a0>
 8006a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a80:	9306      	str	r3, [sp, #24]
 8006a82:	e5ee      	b.n	8006662 <_dtoa_r+0xa0a>

08006a84 <__sflush_r>:
 8006a84:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a8e:	460d      	mov	r5, r1
 8006a90:	0711      	lsls	r1, r2, #28
 8006a92:	4680      	mov	r8, r0
 8006a94:	d43c      	bmi.n	8006b10 <__sflush_r+0x8c>
 8006a96:	686a      	ldr	r2, [r5, #4]
 8006a98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a9c:	2a00      	cmp	r2, #0
 8006a9e:	81ab      	strh	r3, [r5, #12]
 8006aa0:	dd73      	ble.n	8006b8a <__sflush_r+0x106>
 8006aa2:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8006aa4:	2c00      	cmp	r4, #0
 8006aa6:	d04b      	beq.n	8006b40 <__sflush_r+0xbc>
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006aae:	2100      	movs	r1, #0
 8006ab0:	b292      	uxth	r2, r2
 8006ab2:	f8d8 6000 	ldr.w	r6, [r8]
 8006ab6:	f8c8 1000 	str.w	r1, [r8]
 8006aba:	2a00      	cmp	r2, #0
 8006abc:	d069      	beq.n	8006b92 <__sflush_r+0x10e>
 8006abe:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8006ac0:	075f      	lsls	r7, r3, #29
 8006ac2:	d505      	bpl.n	8006ad0 <__sflush_r+0x4c>
 8006ac4:	6869      	ldr	r1, [r5, #4]
 8006ac6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006ac8:	1a52      	subs	r2, r2, r1
 8006aca:	b10b      	cbz	r3, 8006ad0 <__sflush_r+0x4c>
 8006acc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	69e9      	ldr	r1, [r5, #28]
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	47a0      	blx	r4
 8006ad8:	1c44      	adds	r4, r0, #1
 8006ada:	d03c      	beq.n	8006b56 <__sflush_r+0xd2>
 8006adc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8006ae0:	692a      	ldr	r2, [r5, #16]
 8006ae2:	602a      	str	r2, [r5, #0]
 8006ae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ae8:	2200      	movs	r2, #0
 8006aea:	81ab      	strh	r3, [r5, #12]
 8006aec:	04db      	lsls	r3, r3, #19
 8006aee:	606a      	str	r2, [r5, #4]
 8006af0:	d449      	bmi.n	8006b86 <__sflush_r+0x102>
 8006af2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8006af4:	f8c8 6000 	str.w	r6, [r8]
 8006af8:	b311      	cbz	r1, 8006b40 <__sflush_r+0xbc>
 8006afa:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8006afe:	4299      	cmp	r1, r3
 8006b00:	d002      	beq.n	8006b08 <__sflush_r+0x84>
 8006b02:	4640      	mov	r0, r8
 8006b04:	f000 f94e 	bl	8006da4 <_free_r>
 8006b08:	2000      	movs	r0, #0
 8006b0a:	6328      	str	r0, [r5, #48]	; 0x30
 8006b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b10:	692e      	ldr	r6, [r5, #16]
 8006b12:	b1ae      	cbz	r6, 8006b40 <__sflush_r+0xbc>
 8006b14:	682c      	ldr	r4, [r5, #0]
 8006b16:	602e      	str	r6, [r5, #0]
 8006b18:	0790      	lsls	r0, r2, #30
 8006b1a:	bf0c      	ite	eq
 8006b1c:	696b      	ldreq	r3, [r5, #20]
 8006b1e:	2300      	movne	r3, #0
 8006b20:	1ba4      	subs	r4, r4, r6
 8006b22:	60ab      	str	r3, [r5, #8]
 8006b24:	e00a      	b.n	8006b3c <__sflush_r+0xb8>
 8006b26:	4623      	mov	r3, r4
 8006b28:	4632      	mov	r2, r6
 8006b2a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8006b2c:	69e9      	ldr	r1, [r5, #28]
 8006b2e:	4640      	mov	r0, r8
 8006b30:	47b8      	blx	r7
 8006b32:	2800      	cmp	r0, #0
 8006b34:	eba4 0400 	sub.w	r4, r4, r0
 8006b38:	4406      	add	r6, r0
 8006b3a:	dd04      	ble.n	8006b46 <__sflush_r+0xc2>
 8006b3c:	2c00      	cmp	r4, #0
 8006b3e:	dcf2      	bgt.n	8006b26 <__sflush_r+0xa2>
 8006b40:	2000      	movs	r0, #0
 8006b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b46:	89ab      	ldrh	r3, [r5, #12]
 8006b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b4c:	81ab      	strh	r3, [r5, #12]
 8006b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b56:	f8d8 2000 	ldr.w	r2, [r8]
 8006b5a:	2a1d      	cmp	r2, #29
 8006b5c:	d8f3      	bhi.n	8006b46 <__sflush_r+0xc2>
 8006b5e:	4b1a      	ldr	r3, [pc, #104]	; (8006bc8 <__sflush_r+0x144>)
 8006b60:	40d3      	lsrs	r3, r2
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	f083 0401 	eor.w	r4, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0eb      	beq.n	8006b46 <__sflush_r+0xc2>
 8006b6e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8006b72:	6929      	ldr	r1, [r5, #16]
 8006b74:	6029      	str	r1, [r5, #0]
 8006b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b7a:	04d9      	lsls	r1, r3, #19
 8006b7c:	606c      	str	r4, [r5, #4]
 8006b7e:	81ab      	strh	r3, [r5, #12]
 8006b80:	d5b7      	bpl.n	8006af2 <__sflush_r+0x6e>
 8006b82:	2a00      	cmp	r2, #0
 8006b84:	d1b5      	bne.n	8006af2 <__sflush_r+0x6e>
 8006b86:	6528      	str	r0, [r5, #80]	; 0x50
 8006b88:	e7b3      	b.n	8006af2 <__sflush_r+0x6e>
 8006b8a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8006b8c:	2a00      	cmp	r2, #0
 8006b8e:	dc88      	bgt.n	8006aa2 <__sflush_r+0x1e>
 8006b90:	e7d6      	b.n	8006b40 <__sflush_r+0xbc>
 8006b92:	2301      	movs	r3, #1
 8006b94:	69e9      	ldr	r1, [r5, #28]
 8006b96:	4640      	mov	r0, r8
 8006b98:	47a0      	blx	r4
 8006b9a:	1c43      	adds	r3, r0, #1
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	d002      	beq.n	8006ba6 <__sflush_r+0x122>
 8006ba0:	89ab      	ldrh	r3, [r5, #12]
 8006ba2:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8006ba4:	e78c      	b.n	8006ac0 <__sflush_r+0x3c>
 8006ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0f8      	beq.n	8006ba0 <__sflush_r+0x11c>
 8006bae:	2b1d      	cmp	r3, #29
 8006bb0:	d001      	beq.n	8006bb6 <__sflush_r+0x132>
 8006bb2:	2b16      	cmp	r3, #22
 8006bb4:	d102      	bne.n	8006bbc <__sflush_r+0x138>
 8006bb6:	f8c8 6000 	str.w	r6, [r8]
 8006bba:	e7c1      	b.n	8006b40 <__sflush_r+0xbc>
 8006bbc:	89ab      	ldrh	r3, [r5, #12]
 8006bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bc2:	81ab      	strh	r3, [r5, #12]
 8006bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bc8:	20400001 	.word	0x20400001

08006bcc <_fflush_r>:
 8006bcc:	b510      	push	{r4, lr}
 8006bce:	4604      	mov	r4, r0
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	b108      	cbz	r0, 8006bd8 <_fflush_r+0xc>
 8006bd4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006bd6:	b153      	cbz	r3, 8006bee <_fflush_r+0x22>
 8006bd8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8006bdc:	b908      	cbnz	r0, 8006be2 <_fflush_r+0x16>
 8006bde:	b002      	add	sp, #8
 8006be0:	bd10      	pop	{r4, pc}
 8006be2:	4620      	mov	r0, r4
 8006be4:	b002      	add	sp, #8
 8006be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bea:	f7ff bf4b 	b.w	8006a84 <__sflush_r>
 8006bee:	9101      	str	r1, [sp, #4]
 8006bf0:	f000 f880 	bl	8006cf4 <__sinit>
 8006bf4:	9901      	ldr	r1, [sp, #4]
 8006bf6:	e7ef      	b.n	8006bd8 <_fflush_r+0xc>

08006bf8 <_cleanup_r>:
 8006bf8:	4901      	ldr	r1, [pc, #4]	; (8006c00 <_cleanup_r+0x8>)
 8006bfa:	f000 bb3d 	b.w	8007278 <_fwalk_reent>
 8006bfe:	bf00      	nop
 8006c00:	08008799 	.word	0x08008799

08006c04 <__sinit.part.1>:
 8006c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c08:	4b35      	ldr	r3, [pc, #212]	; (8006ce0 <__sinit.part.1+0xdc>)
 8006c0a:	6845      	ldr	r5, [r0, #4]
 8006c0c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8006c0e:	2400      	movs	r4, #0
 8006c10:	4607      	mov	r7, r0
 8006c12:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8006c16:	2304      	movs	r3, #4
 8006c18:	2103      	movs	r1, #3
 8006c1a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8006c1e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8006c22:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8006c26:	b083      	sub	sp, #12
 8006c28:	602c      	str	r4, [r5, #0]
 8006c2a:	606c      	str	r4, [r5, #4]
 8006c2c:	60ac      	str	r4, [r5, #8]
 8006c2e:	666c      	str	r4, [r5, #100]	; 0x64
 8006c30:	81ec      	strh	r4, [r5, #14]
 8006c32:	612c      	str	r4, [r5, #16]
 8006c34:	616c      	str	r4, [r5, #20]
 8006c36:	61ac      	str	r4, [r5, #24]
 8006c38:	81ab      	strh	r3, [r5, #12]
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8006c40:	2208      	movs	r2, #8
 8006c42:	f7fb fdff 	bl	8002844 <memset>
 8006c46:	68be      	ldr	r6, [r7, #8]
 8006c48:	f8df b098 	ldr.w	fp, [pc, #152]	; 8006ce4 <__sinit.part.1+0xe0>
 8006c4c:	f8df a098 	ldr.w	sl, [pc, #152]	; 8006ce8 <__sinit.part.1+0xe4>
 8006c50:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8006cec <__sinit.part.1+0xe8>
 8006c54:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006cf0 <__sinit.part.1+0xec>
 8006c58:	f8c5 b020 	str.w	fp, [r5, #32]
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	2209      	movs	r2, #9
 8006c60:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8006c64:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8006c68:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8006c6c:	61ed      	str	r5, [r5, #28]
 8006c6e:	4621      	mov	r1, r4
 8006c70:	81f3      	strh	r3, [r6, #14]
 8006c72:	81b2      	strh	r2, [r6, #12]
 8006c74:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8006c78:	6034      	str	r4, [r6, #0]
 8006c7a:	6074      	str	r4, [r6, #4]
 8006c7c:	60b4      	str	r4, [r6, #8]
 8006c7e:	6674      	str	r4, [r6, #100]	; 0x64
 8006c80:	6134      	str	r4, [r6, #16]
 8006c82:	6174      	str	r4, [r6, #20]
 8006c84:	61b4      	str	r4, [r6, #24]
 8006c86:	2208      	movs	r2, #8
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	f7fb fddb 	bl	8002844 <memset>
 8006c8e:	68fd      	ldr	r5, [r7, #12]
 8006c90:	61f6      	str	r6, [r6, #28]
 8006c92:	2012      	movs	r0, #18
 8006c94:	2202      	movs	r2, #2
 8006c96:	f8c6 b020 	str.w	fp, [r6, #32]
 8006c9a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8006c9e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8006ca2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	81a8      	strh	r0, [r5, #12]
 8006caa:	81ea      	strh	r2, [r5, #14]
 8006cac:	602c      	str	r4, [r5, #0]
 8006cae:	606c      	str	r4, [r5, #4]
 8006cb0:	60ac      	str	r4, [r5, #8]
 8006cb2:	666c      	str	r4, [r5, #100]	; 0x64
 8006cb4:	612c      	str	r4, [r5, #16]
 8006cb6:	616c      	str	r4, [r5, #20]
 8006cb8:	61ac      	str	r4, [r5, #24]
 8006cba:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8006cbe:	2208      	movs	r2, #8
 8006cc0:	f7fb fdc0 	bl	8002844 <memset>
 8006cc4:	9b01      	ldr	r3, [sp, #4]
 8006cc6:	61ed      	str	r5, [r5, #28]
 8006cc8:	f8c5 b020 	str.w	fp, [r5, #32]
 8006ccc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8006cd0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8006cd4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8006cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cda:	b003      	add	sp, #12
 8006cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce0:	08006bf9 	.word	0x08006bf9
 8006ce4:	080084d5 	.word	0x080084d5
 8006ce8:	080084f9 	.word	0x080084f9
 8006cec:	08008535 	.word	0x08008535
 8006cf0:	08008555 	.word	0x08008555

08006cf4 <__sinit>:
 8006cf4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006cf6:	b103      	cbz	r3, 8006cfa <__sinit+0x6>
 8006cf8:	4770      	bx	lr
 8006cfa:	f7ff bf83 	b.w	8006c04 <__sinit.part.1>
 8006cfe:	bf00      	nop

08006d00 <__sfp_lock_acquire>:
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop

08006d04 <__sfp_lock_release>:
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop

08006d08 <_malloc_trim_r>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	4f23      	ldr	r7, [pc, #140]	; (8006d98 <_malloc_trim_r+0x90>)
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	4606      	mov	r6, r0
 8006d10:	f000 feca 	bl	8007aa8 <__malloc_lock>
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	685d      	ldr	r5, [r3, #4]
 8006d18:	f025 0503 	bic.w	r5, r5, #3
 8006d1c:	1b29      	subs	r1, r5, r4
 8006d1e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8006d22:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8006d26:	f021 010f 	bic.w	r1, r1, #15
 8006d2a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8006d2e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8006d32:	db07      	blt.n	8006d44 <_malloc_trim_r+0x3c>
 8006d34:	2100      	movs	r1, #0
 8006d36:	4630      	mov	r0, r6
 8006d38:	f001 fbba 	bl	80084b0 <_sbrk_r>
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	442b      	add	r3, r5
 8006d40:	4298      	cmp	r0, r3
 8006d42:	d004      	beq.n	8006d4e <_malloc_trim_r+0x46>
 8006d44:	4630      	mov	r0, r6
 8006d46:	f000 feb1 	bl	8007aac <__malloc_unlock>
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d4e:	4261      	negs	r1, r4
 8006d50:	4630      	mov	r0, r6
 8006d52:	f001 fbad 	bl	80084b0 <_sbrk_r>
 8006d56:	3001      	adds	r0, #1
 8006d58:	d00d      	beq.n	8006d76 <_malloc_trim_r+0x6e>
 8006d5a:	4b10      	ldr	r3, [pc, #64]	; (8006d9c <_malloc_trim_r+0x94>)
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	6819      	ldr	r1, [r3, #0]
 8006d60:	1b2d      	subs	r5, r5, r4
 8006d62:	f045 0501 	orr.w	r5, r5, #1
 8006d66:	4630      	mov	r0, r6
 8006d68:	1b09      	subs	r1, r1, r4
 8006d6a:	6055      	str	r5, [r2, #4]
 8006d6c:	6019      	str	r1, [r3, #0]
 8006d6e:	f000 fe9d 	bl	8007aac <__malloc_unlock>
 8006d72:	2001      	movs	r0, #1
 8006d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d76:	2100      	movs	r1, #0
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f001 fb99 	bl	80084b0 <_sbrk_r>
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	1a83      	subs	r3, r0, r2
 8006d82:	2b0f      	cmp	r3, #15
 8006d84:	ddde      	ble.n	8006d44 <_malloc_trim_r+0x3c>
 8006d86:	4c06      	ldr	r4, [pc, #24]	; (8006da0 <_malloc_trim_r+0x98>)
 8006d88:	4904      	ldr	r1, [pc, #16]	; (8006d9c <_malloc_trim_r+0x94>)
 8006d8a:	6824      	ldr	r4, [r4, #0]
 8006d8c:	f043 0301 	orr.w	r3, r3, #1
 8006d90:	1b00      	subs	r0, r0, r4
 8006d92:	6053      	str	r3, [r2, #4]
 8006d94:	6008      	str	r0, [r1, #0]
 8006d96:	e7d5      	b.n	8006d44 <_malloc_trim_r+0x3c>
 8006d98:	20000464 	.word	0x20000464
 8006d9c:	20000a50 	.word	0x20000a50
 8006da0:	20000870 	.word	0x20000870

08006da4 <_free_r>:
 8006da4:	2900      	cmp	r1, #0
 8006da6:	d045      	beq.n	8006e34 <_free_r+0x90>
 8006da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dac:	460d      	mov	r5, r1
 8006dae:	4680      	mov	r8, r0
 8006db0:	f000 fe7a 	bl	8007aa8 <__malloc_lock>
 8006db4:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8006db8:	496a      	ldr	r1, [pc, #424]	; (8006f64 <_free_r+0x1c0>)
 8006dba:	f027 0301 	bic.w	r3, r7, #1
 8006dbe:	f1a5 0408 	sub.w	r4, r5, #8
 8006dc2:	18e2      	adds	r2, r4, r3
 8006dc4:	688e      	ldr	r6, [r1, #8]
 8006dc6:	6850      	ldr	r0, [r2, #4]
 8006dc8:	42b2      	cmp	r2, r6
 8006dca:	f020 0003 	bic.w	r0, r0, #3
 8006dce:	d062      	beq.n	8006e96 <_free_r+0xf2>
 8006dd0:	07fe      	lsls	r6, r7, #31
 8006dd2:	6050      	str	r0, [r2, #4]
 8006dd4:	d40b      	bmi.n	8006dee <_free_r+0x4a>
 8006dd6:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8006dda:	1be4      	subs	r4, r4, r7
 8006ddc:	f101 0e08 	add.w	lr, r1, #8
 8006de0:	68a5      	ldr	r5, [r4, #8]
 8006de2:	4575      	cmp	r5, lr
 8006de4:	443b      	add	r3, r7
 8006de6:	d06f      	beq.n	8006ec8 <_free_r+0x124>
 8006de8:	68e7      	ldr	r7, [r4, #12]
 8006dea:	60ef      	str	r7, [r5, #12]
 8006dec:	60bd      	str	r5, [r7, #8]
 8006dee:	1815      	adds	r5, r2, r0
 8006df0:	686d      	ldr	r5, [r5, #4]
 8006df2:	07ed      	lsls	r5, r5, #31
 8006df4:	d542      	bpl.n	8006e7c <_free_r+0xd8>
 8006df6:	f043 0201 	orr.w	r2, r3, #1
 8006dfa:	6062      	str	r2, [r4, #4]
 8006dfc:	50e3      	str	r3, [r4, r3]
 8006dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e02:	d218      	bcs.n	8006e36 <_free_r+0x92>
 8006e04:	08db      	lsrs	r3, r3, #3
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	684d      	ldr	r5, [r1, #4]
 8006e0a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 8006e0e:	60a7      	str	r7, [r4, #8]
 8006e10:	2001      	movs	r0, #1
 8006e12:	109b      	asrs	r3, r3, #2
 8006e14:	fa00 f303 	lsl.w	r3, r0, r3
 8006e18:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 8006e1c:	431d      	orrs	r5, r3
 8006e1e:	3808      	subs	r0, #8
 8006e20:	60e0      	str	r0, [r4, #12]
 8006e22:	604d      	str	r5, [r1, #4]
 8006e24:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 8006e28:	60fc      	str	r4, [r7, #12]
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e30:	f000 be3c 	b.w	8007aac <__malloc_unlock>
 8006e34:	4770      	bx	lr
 8006e36:	0a5a      	lsrs	r2, r3, #9
 8006e38:	2a04      	cmp	r2, #4
 8006e3a:	d853      	bhi.n	8006ee4 <_free_r+0x140>
 8006e3c:	099a      	lsrs	r2, r3, #6
 8006e3e:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8006e42:	007f      	lsls	r7, r7, #1
 8006e44:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8006e48:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8006e4c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8006e50:	4944      	ldr	r1, [pc, #272]	; (8006f64 <_free_r+0x1c0>)
 8006e52:	3808      	subs	r0, #8
 8006e54:	4290      	cmp	r0, r2
 8006e56:	d04d      	beq.n	8006ef4 <_free_r+0x150>
 8006e58:	6851      	ldr	r1, [r2, #4]
 8006e5a:	f021 0103 	bic.w	r1, r1, #3
 8006e5e:	428b      	cmp	r3, r1
 8006e60:	d202      	bcs.n	8006e68 <_free_r+0xc4>
 8006e62:	6892      	ldr	r2, [r2, #8]
 8006e64:	4290      	cmp	r0, r2
 8006e66:	d1f7      	bne.n	8006e58 <_free_r+0xb4>
 8006e68:	68d0      	ldr	r0, [r2, #12]
 8006e6a:	60e0      	str	r0, [r4, #12]
 8006e6c:	60a2      	str	r2, [r4, #8]
 8006e6e:	6084      	str	r4, [r0, #8]
 8006e70:	60d4      	str	r4, [r2, #12]
 8006e72:	4640      	mov	r0, r8
 8006e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e78:	f000 be18 	b.w	8007aac <__malloc_unlock>
 8006e7c:	6895      	ldr	r5, [r2, #8]
 8006e7e:	4f3a      	ldr	r7, [pc, #232]	; (8006f68 <_free_r+0x1c4>)
 8006e80:	42bd      	cmp	r5, r7
 8006e82:	4403      	add	r3, r0
 8006e84:	d03f      	beq.n	8006f06 <_free_r+0x162>
 8006e86:	68d0      	ldr	r0, [r2, #12]
 8006e88:	60e8      	str	r0, [r5, #12]
 8006e8a:	f043 0201 	orr.w	r2, r3, #1
 8006e8e:	6085      	str	r5, [r0, #8]
 8006e90:	6062      	str	r2, [r4, #4]
 8006e92:	50e3      	str	r3, [r4, r3]
 8006e94:	e7b3      	b.n	8006dfe <_free_r+0x5a>
 8006e96:	07ff      	lsls	r7, r7, #31
 8006e98:	4403      	add	r3, r0
 8006e9a:	d407      	bmi.n	8006eac <_free_r+0x108>
 8006e9c:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8006ea0:	1aa4      	subs	r4, r4, r2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	68a0      	ldr	r0, [r4, #8]
 8006ea6:	68e2      	ldr	r2, [r4, #12]
 8006ea8:	60c2      	str	r2, [r0, #12]
 8006eaa:	6090      	str	r0, [r2, #8]
 8006eac:	4a2f      	ldr	r2, [pc, #188]	; (8006f6c <_free_r+0x1c8>)
 8006eae:	6812      	ldr	r2, [r2, #0]
 8006eb0:	f043 0001 	orr.w	r0, r3, #1
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	6060      	str	r0, [r4, #4]
 8006eb8:	608c      	str	r4, [r1, #8]
 8006eba:	d3b6      	bcc.n	8006e2a <_free_r+0x86>
 8006ebc:	4b2c      	ldr	r3, [pc, #176]	; (8006f70 <_free_r+0x1cc>)
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	6819      	ldr	r1, [r3, #0]
 8006ec2:	f7ff ff21 	bl	8006d08 <_malloc_trim_r>
 8006ec6:	e7b0      	b.n	8006e2a <_free_r+0x86>
 8006ec8:	1811      	adds	r1, r2, r0
 8006eca:	6849      	ldr	r1, [r1, #4]
 8006ecc:	07c9      	lsls	r1, r1, #31
 8006ece:	d444      	bmi.n	8006f5a <_free_r+0x1b6>
 8006ed0:	6891      	ldr	r1, [r2, #8]
 8006ed2:	68d2      	ldr	r2, [r2, #12]
 8006ed4:	60ca      	str	r2, [r1, #12]
 8006ed6:	4403      	add	r3, r0
 8006ed8:	f043 0001 	orr.w	r0, r3, #1
 8006edc:	6091      	str	r1, [r2, #8]
 8006ede:	6060      	str	r0, [r4, #4]
 8006ee0:	50e3      	str	r3, [r4, r3]
 8006ee2:	e7a2      	b.n	8006e2a <_free_r+0x86>
 8006ee4:	2a14      	cmp	r2, #20
 8006ee6:	d817      	bhi.n	8006f18 <_free_r+0x174>
 8006ee8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 8006eec:	007f      	lsls	r7, r7, #1
 8006eee:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8006ef2:	e7a9      	b.n	8006e48 <_free_r+0xa4>
 8006ef4:	10aa      	asrs	r2, r5, #2
 8006ef6:	684b      	ldr	r3, [r1, #4]
 8006ef8:	2501      	movs	r5, #1
 8006efa:	fa05 f202 	lsl.w	r2, r5, r2
 8006efe:	4313      	orrs	r3, r2
 8006f00:	604b      	str	r3, [r1, #4]
 8006f02:	4602      	mov	r2, r0
 8006f04:	e7b1      	b.n	8006e6a <_free_r+0xc6>
 8006f06:	f043 0201 	orr.w	r2, r3, #1
 8006f0a:	614c      	str	r4, [r1, #20]
 8006f0c:	610c      	str	r4, [r1, #16]
 8006f0e:	60e5      	str	r5, [r4, #12]
 8006f10:	60a5      	str	r5, [r4, #8]
 8006f12:	6062      	str	r2, [r4, #4]
 8006f14:	50e3      	str	r3, [r4, r3]
 8006f16:	e788      	b.n	8006e2a <_free_r+0x86>
 8006f18:	2a54      	cmp	r2, #84	; 0x54
 8006f1a:	d806      	bhi.n	8006f2a <_free_r+0x186>
 8006f1c:	0b1a      	lsrs	r2, r3, #12
 8006f1e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8006f22:	007f      	lsls	r7, r7, #1
 8006f24:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 8006f28:	e78e      	b.n	8006e48 <_free_r+0xa4>
 8006f2a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006f2e:	d806      	bhi.n	8006f3e <_free_r+0x19a>
 8006f30:	0bda      	lsrs	r2, r3, #15
 8006f32:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8006f36:	007f      	lsls	r7, r7, #1
 8006f38:	f102 0577 	add.w	r5, r2, #119	; 0x77
 8006f3c:	e784      	b.n	8006e48 <_free_r+0xa4>
 8006f3e:	f240 5054 	movw	r0, #1364	; 0x554
 8006f42:	4282      	cmp	r2, r0
 8006f44:	d806      	bhi.n	8006f54 <_free_r+0x1b0>
 8006f46:	0c9a      	lsrs	r2, r3, #18
 8006f48:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8006f4c:	007f      	lsls	r7, r7, #1
 8006f4e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 8006f52:	e779      	b.n	8006e48 <_free_r+0xa4>
 8006f54:	27fe      	movs	r7, #254	; 0xfe
 8006f56:	257e      	movs	r5, #126	; 0x7e
 8006f58:	e776      	b.n	8006e48 <_free_r+0xa4>
 8006f5a:	f043 0201 	orr.w	r2, r3, #1
 8006f5e:	6062      	str	r2, [r4, #4]
 8006f60:	50e3      	str	r3, [r4, r3]
 8006f62:	e762      	b.n	8006e2a <_free_r+0x86>
 8006f64:	20000464 	.word	0x20000464
 8006f68:	2000046c 	.word	0x2000046c
 8006f6c:	2000086c 	.word	0x2000086c
 8006f70:	20000a4c 	.word	0x20000a4c

08006f74 <__sfvwrite_r>:
 8006f74:	6893      	ldr	r3, [r2, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d076      	beq.n	8007068 <__sfvwrite_r+0xf4>
 8006f7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7e:	898b      	ldrh	r3, [r1, #12]
 8006f80:	b085      	sub	sp, #20
 8006f82:	460c      	mov	r4, r1
 8006f84:	0719      	lsls	r1, r3, #28
 8006f86:	9001      	str	r0, [sp, #4]
 8006f88:	4616      	mov	r6, r2
 8006f8a:	d529      	bpl.n	8006fe0 <__sfvwrite_r+0x6c>
 8006f8c:	6922      	ldr	r2, [r4, #16]
 8006f8e:	b33a      	cbz	r2, 8006fe0 <__sfvwrite_r+0x6c>
 8006f90:	f003 0802 	and.w	r8, r3, #2
 8006f94:	fa1f f088 	uxth.w	r0, r8
 8006f98:	6835      	ldr	r5, [r6, #0]
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d02f      	beq.n	8006ffe <__sfvwrite_r+0x8a>
 8006f9e:	f04f 0900 	mov.w	r9, #0
 8006fa2:	4fb4      	ldr	r7, [pc, #720]	; (8007274 <__sfvwrite_r+0x300>)
 8006fa4:	46c8      	mov	r8, r9
 8006fa6:	46b2      	mov	sl, r6
 8006fa8:	45b8      	cmp	r8, r7
 8006faa:	4643      	mov	r3, r8
 8006fac:	464a      	mov	r2, r9
 8006fae:	bf28      	it	cs
 8006fb0:	463b      	movcs	r3, r7
 8006fb2:	9801      	ldr	r0, [sp, #4]
 8006fb4:	f1b8 0f00 	cmp.w	r8, #0
 8006fb8:	d050      	beq.n	800705c <__sfvwrite_r+0xe8>
 8006fba:	69e1      	ldr	r1, [r4, #28]
 8006fbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006fbe:	47b0      	blx	r6
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	dd71      	ble.n	80070a8 <__sfvwrite_r+0x134>
 8006fc4:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006fc8:	1a1b      	subs	r3, r3, r0
 8006fca:	4481      	add	r9, r0
 8006fcc:	ebc0 0808 	rsb	r8, r0, r8
 8006fd0:	f8ca 3008 	str.w	r3, [sl, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1e7      	bne.n	8006fa8 <__sfvwrite_r+0x34>
 8006fd8:	2000      	movs	r0, #0
 8006fda:	b005      	add	sp, #20
 8006fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	9801      	ldr	r0, [sp, #4]
 8006fe4:	f7fe fd40 	bl	8005a68 <__swsetup_r>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	f040 813a 	bne.w	8007262 <__sfvwrite_r+0x2ee>
 8006fee:	89a3      	ldrh	r3, [r4, #12]
 8006ff0:	6835      	ldr	r5, [r6, #0]
 8006ff2:	f003 0802 	and.w	r8, r3, #2
 8006ff6:	fa1f f088 	uxth.w	r0, r8
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	d1cf      	bne.n	8006f9e <__sfvwrite_r+0x2a>
 8006ffe:	f013 0901 	ands.w	r9, r3, #1
 8007002:	d15b      	bne.n	80070bc <__sfvwrite_r+0x148>
 8007004:	464f      	mov	r7, r9
 8007006:	9602      	str	r6, [sp, #8]
 8007008:	b31f      	cbz	r7, 8007052 <__sfvwrite_r+0xde>
 800700a:	059a      	lsls	r2, r3, #22
 800700c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8007010:	d52c      	bpl.n	800706c <__sfvwrite_r+0xf8>
 8007012:	4547      	cmp	r7, r8
 8007014:	46c2      	mov	sl, r8
 8007016:	f0c0 80a4 	bcc.w	8007162 <__sfvwrite_r+0x1ee>
 800701a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800701e:	f040 80b1 	bne.w	8007184 <__sfvwrite_r+0x210>
 8007022:	6820      	ldr	r0, [r4, #0]
 8007024:	4652      	mov	r2, sl
 8007026:	4649      	mov	r1, r9
 8007028:	f000 fcda 	bl	80079e0 <memmove>
 800702c:	68a0      	ldr	r0, [r4, #8]
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	ebc8 0000 	rsb	r0, r8, r0
 8007034:	4453      	add	r3, sl
 8007036:	60a0      	str	r0, [r4, #8]
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	4638      	mov	r0, r7
 800703c:	9a02      	ldr	r2, [sp, #8]
 800703e:	6893      	ldr	r3, [r2, #8]
 8007040:	1a1b      	subs	r3, r3, r0
 8007042:	4481      	add	r9, r0
 8007044:	1a3f      	subs	r7, r7, r0
 8007046:	6093      	str	r3, [r2, #8]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0c5      	beq.n	8006fd8 <__sfvwrite_r+0x64>
 800704c:	89a3      	ldrh	r3, [r4, #12]
 800704e:	2f00      	cmp	r7, #0
 8007050:	d1db      	bne.n	800700a <__sfvwrite_r+0x96>
 8007052:	f8d5 9000 	ldr.w	r9, [r5]
 8007056:	686f      	ldr	r7, [r5, #4]
 8007058:	3508      	adds	r5, #8
 800705a:	e7d5      	b.n	8007008 <__sfvwrite_r+0x94>
 800705c:	f8d5 9000 	ldr.w	r9, [r5]
 8007060:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8007064:	3508      	adds	r5, #8
 8007066:	e79f      	b.n	8006fa8 <__sfvwrite_r+0x34>
 8007068:	2000      	movs	r0, #0
 800706a:	4770      	bx	lr
 800706c:	6820      	ldr	r0, [r4, #0]
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	4298      	cmp	r0, r3
 8007072:	d803      	bhi.n	800707c <__sfvwrite_r+0x108>
 8007074:	6961      	ldr	r1, [r4, #20]
 8007076:	428f      	cmp	r7, r1
 8007078:	f080 80b7 	bcs.w	80071ea <__sfvwrite_r+0x276>
 800707c:	45b8      	cmp	r8, r7
 800707e:	bf28      	it	cs
 8007080:	46b8      	movcs	r8, r7
 8007082:	4642      	mov	r2, r8
 8007084:	4649      	mov	r1, r9
 8007086:	f000 fcab 	bl	80079e0 <memmove>
 800708a:	68a3      	ldr	r3, [r4, #8]
 800708c:	6822      	ldr	r2, [r4, #0]
 800708e:	ebc8 0303 	rsb	r3, r8, r3
 8007092:	4442      	add	r2, r8
 8007094:	60a3      	str	r3, [r4, #8]
 8007096:	6022      	str	r2, [r4, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d149      	bne.n	8007130 <__sfvwrite_r+0x1bc>
 800709c:	4621      	mov	r1, r4
 800709e:	9801      	ldr	r0, [sp, #4]
 80070a0:	f7ff fd94 	bl	8006bcc <_fflush_r>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	d043      	beq.n	8007130 <__sfvwrite_r+0x1bc>
 80070a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295
 80070b4:	81a3      	strh	r3, [r4, #12]
 80070b6:	b005      	add	sp, #20
 80070b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070bc:	4680      	mov	r8, r0
 80070be:	9002      	str	r0, [sp, #8]
 80070c0:	4682      	mov	sl, r0
 80070c2:	4681      	mov	r9, r0
 80070c4:	f1b9 0f00 	cmp.w	r9, #0
 80070c8:	d02a      	beq.n	8007120 <__sfvwrite_r+0x1ac>
 80070ca:	9b02      	ldr	r3, [sp, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d04c      	beq.n	800716a <__sfvwrite_r+0x1f6>
 80070d0:	6820      	ldr	r0, [r4, #0]
 80070d2:	6923      	ldr	r3, [r4, #16]
 80070d4:	6962      	ldr	r2, [r4, #20]
 80070d6:	45c8      	cmp	r8, r9
 80070d8:	46c3      	mov	fp, r8
 80070da:	bf28      	it	cs
 80070dc:	46cb      	movcs	fp, r9
 80070de:	4298      	cmp	r0, r3
 80070e0:	465f      	mov	r7, fp
 80070e2:	d904      	bls.n	80070ee <__sfvwrite_r+0x17a>
 80070e4:	68a3      	ldr	r3, [r4, #8]
 80070e6:	4413      	add	r3, r2
 80070e8:	459b      	cmp	fp, r3
 80070ea:	f300 8090 	bgt.w	800720e <__sfvwrite_r+0x29a>
 80070ee:	4593      	cmp	fp, r2
 80070f0:	db20      	blt.n	8007134 <__sfvwrite_r+0x1c0>
 80070f2:	4613      	mov	r3, r2
 80070f4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80070f6:	69e1      	ldr	r1, [r4, #28]
 80070f8:	9801      	ldr	r0, [sp, #4]
 80070fa:	4652      	mov	r2, sl
 80070fc:	47b8      	blx	r7
 80070fe:	1e07      	subs	r7, r0, #0
 8007100:	ddd2      	ble.n	80070a8 <__sfvwrite_r+0x134>
 8007102:	ebb8 0807 	subs.w	r8, r8, r7
 8007106:	d023      	beq.n	8007150 <__sfvwrite_r+0x1dc>
 8007108:	68b3      	ldr	r3, [r6, #8]
 800710a:	1bdb      	subs	r3, r3, r7
 800710c:	44ba      	add	sl, r7
 800710e:	ebc7 0909 	rsb	r9, r7, r9
 8007112:	60b3      	str	r3, [r6, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	f43f af5f 	beq.w	8006fd8 <__sfvwrite_r+0x64>
 800711a:	f1b9 0f00 	cmp.w	r9, #0
 800711e:	d1d4      	bne.n	80070ca <__sfvwrite_r+0x156>
 8007120:	2300      	movs	r3, #0
 8007122:	f8d5 a000 	ldr.w	sl, [r5]
 8007126:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800712a:	9302      	str	r3, [sp, #8]
 800712c:	3508      	adds	r5, #8
 800712e:	e7c9      	b.n	80070c4 <__sfvwrite_r+0x150>
 8007130:	4640      	mov	r0, r8
 8007132:	e783      	b.n	800703c <__sfvwrite_r+0xc8>
 8007134:	465a      	mov	r2, fp
 8007136:	4651      	mov	r1, sl
 8007138:	f000 fc52 	bl	80079e0 <memmove>
 800713c:	68a2      	ldr	r2, [r4, #8]
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	ebcb 0202 	rsb	r2, fp, r2
 8007144:	445b      	add	r3, fp
 8007146:	ebb8 0807 	subs.w	r8, r8, r7
 800714a:	60a2      	str	r2, [r4, #8]
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	d1db      	bne.n	8007108 <__sfvwrite_r+0x194>
 8007150:	4621      	mov	r1, r4
 8007152:	9801      	ldr	r0, [sp, #4]
 8007154:	f7ff fd3a 	bl	8006bcc <_fflush_r>
 8007158:	2800      	cmp	r0, #0
 800715a:	d1a5      	bne.n	80070a8 <__sfvwrite_r+0x134>
 800715c:	f8cd 8008 	str.w	r8, [sp, #8]
 8007160:	e7d2      	b.n	8007108 <__sfvwrite_r+0x194>
 8007162:	6820      	ldr	r0, [r4, #0]
 8007164:	46b8      	mov	r8, r7
 8007166:	46ba      	mov	sl, r7
 8007168:	e75c      	b.n	8007024 <__sfvwrite_r+0xb0>
 800716a:	464a      	mov	r2, r9
 800716c:	210a      	movs	r1, #10
 800716e:	4650      	mov	r0, sl
 8007170:	f000 fbe6 	bl	8007940 <memchr>
 8007174:	2800      	cmp	r0, #0
 8007176:	d06f      	beq.n	8007258 <__sfvwrite_r+0x2e4>
 8007178:	3001      	adds	r0, #1
 800717a:	2301      	movs	r3, #1
 800717c:	ebca 0800 	rsb	r8, sl, r0
 8007180:	9302      	str	r3, [sp, #8]
 8007182:	e7a5      	b.n	80070d0 <__sfvwrite_r+0x15c>
 8007184:	6962      	ldr	r2, [r4, #20]
 8007186:	6820      	ldr	r0, [r4, #0]
 8007188:	6921      	ldr	r1, [r4, #16]
 800718a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 800718e:	ebc1 0a00 	rsb	sl, r1, r0
 8007192:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8007196:	f10a 0001 	add.w	r0, sl, #1
 800719a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800719e:	4438      	add	r0, r7
 80071a0:	4540      	cmp	r0, r8
 80071a2:	4642      	mov	r2, r8
 80071a4:	bf84      	itt	hi
 80071a6:	4680      	movhi	r8, r0
 80071a8:	4642      	movhi	r2, r8
 80071aa:	055b      	lsls	r3, r3, #21
 80071ac:	d542      	bpl.n	8007234 <__sfvwrite_r+0x2c0>
 80071ae:	4611      	mov	r1, r2
 80071b0:	9801      	ldr	r0, [sp, #4]
 80071b2:	f000 f90d 	bl	80073d0 <_malloc_r>
 80071b6:	4683      	mov	fp, r0
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d055      	beq.n	8007268 <__sfvwrite_r+0x2f4>
 80071bc:	4652      	mov	r2, sl
 80071be:	6921      	ldr	r1, [r4, #16]
 80071c0:	f7fb faa6 	bl	8002710 <memcpy>
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ce:	81a3      	strh	r3, [r4, #12]
 80071d0:	ebca 0308 	rsb	r3, sl, r8
 80071d4:	eb0b 000a 	add.w	r0, fp, sl
 80071d8:	f8c4 8014 	str.w	r8, [r4, #20]
 80071dc:	f8c4 b010 	str.w	fp, [r4, #16]
 80071e0:	6020      	str	r0, [r4, #0]
 80071e2:	60a3      	str	r3, [r4, #8]
 80071e4:	46b8      	mov	r8, r7
 80071e6:	46ba      	mov	sl, r7
 80071e8:	e71c      	b.n	8007024 <__sfvwrite_r+0xb0>
 80071ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80071ee:	42bb      	cmp	r3, r7
 80071f0:	bf28      	it	cs
 80071f2:	463b      	movcs	r3, r7
 80071f4:	464a      	mov	r2, r9
 80071f6:	fb93 f3f1 	sdiv	r3, r3, r1
 80071fa:	9801      	ldr	r0, [sp, #4]
 80071fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071fe:	fb01 f303 	mul.w	r3, r1, r3
 8007202:	69e1      	ldr	r1, [r4, #28]
 8007204:	47b0      	blx	r6
 8007206:	2800      	cmp	r0, #0
 8007208:	f73f af18 	bgt.w	800703c <__sfvwrite_r+0xc8>
 800720c:	e74c      	b.n	80070a8 <__sfvwrite_r+0x134>
 800720e:	461a      	mov	r2, r3
 8007210:	4651      	mov	r1, sl
 8007212:	9303      	str	r3, [sp, #12]
 8007214:	f000 fbe4 	bl	80079e0 <memmove>
 8007218:	6822      	ldr	r2, [r4, #0]
 800721a:	9b03      	ldr	r3, [sp, #12]
 800721c:	9801      	ldr	r0, [sp, #4]
 800721e:	441a      	add	r2, r3
 8007220:	6022      	str	r2, [r4, #0]
 8007222:	4621      	mov	r1, r4
 8007224:	f7ff fcd2 	bl	8006bcc <_fflush_r>
 8007228:	9b03      	ldr	r3, [sp, #12]
 800722a:	2800      	cmp	r0, #0
 800722c:	f47f af3c 	bne.w	80070a8 <__sfvwrite_r+0x134>
 8007230:	461f      	mov	r7, r3
 8007232:	e766      	b.n	8007102 <__sfvwrite_r+0x18e>
 8007234:	9801      	ldr	r0, [sp, #4]
 8007236:	f000 ff4b 	bl	80080d0 <_realloc_r>
 800723a:	4683      	mov	fp, r0
 800723c:	2800      	cmp	r0, #0
 800723e:	d1c7      	bne.n	80071d0 <__sfvwrite_r+0x25c>
 8007240:	9d01      	ldr	r5, [sp, #4]
 8007242:	6921      	ldr	r1, [r4, #16]
 8007244:	4628      	mov	r0, r5
 8007246:	f7ff fdad 	bl	8006da4 <_free_r>
 800724a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800724e:	220c      	movs	r2, #12
 8007250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007254:	602a      	str	r2, [r5, #0]
 8007256:	e729      	b.n	80070ac <__sfvwrite_r+0x138>
 8007258:	2301      	movs	r3, #1
 800725a:	f109 0801 	add.w	r8, r9, #1
 800725e:	9302      	str	r3, [sp, #8]
 8007260:	e736      	b.n	80070d0 <__sfvwrite_r+0x15c>
 8007262:	f04f 30ff 	mov.w	r0, #4294967295
 8007266:	e6b8      	b.n	8006fda <__sfvwrite_r+0x66>
 8007268:	9a01      	ldr	r2, [sp, #4]
 800726a:	230c      	movs	r3, #12
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007272:	e71b      	b.n	80070ac <__sfvwrite_r+0x138>
 8007274:	7ffffc00 	.word	0x7ffffc00

08007278 <_fwalk_reent>:
 8007278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800727c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8007280:	d01f      	beq.n	80072c2 <_fwalk_reent+0x4a>
 8007282:	4688      	mov	r8, r1
 8007284:	4606      	mov	r6, r0
 8007286:	f04f 0900 	mov.w	r9, #0
 800728a:	687d      	ldr	r5, [r7, #4]
 800728c:	68bc      	ldr	r4, [r7, #8]
 800728e:	3d01      	subs	r5, #1
 8007290:	d411      	bmi.n	80072b6 <_fwalk_reent+0x3e>
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	2b01      	cmp	r3, #1
 8007296:	f105 35ff 	add.w	r5, r5, #4294967295
 800729a:	d908      	bls.n	80072ae <_fwalk_reent+0x36>
 800729c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80072a0:	3301      	adds	r3, #1
 80072a2:	4621      	mov	r1, r4
 80072a4:	4630      	mov	r0, r6
 80072a6:	d002      	beq.n	80072ae <_fwalk_reent+0x36>
 80072a8:	47c0      	blx	r8
 80072aa:	ea49 0900 	orr.w	r9, r9, r0
 80072ae:	1c6b      	adds	r3, r5, #1
 80072b0:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80072b4:	d1ed      	bne.n	8007292 <_fwalk_reent+0x1a>
 80072b6:	683f      	ldr	r7, [r7, #0]
 80072b8:	2f00      	cmp	r7, #0
 80072ba:	d1e6      	bne.n	800728a <_fwalk_reent+0x12>
 80072bc:	4648      	mov	r0, r9
 80072be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072c2:	46b9      	mov	r9, r7
 80072c4:	4648      	mov	r0, r9
 80072c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ca:	bf00      	nop

080072cc <_localeconv_r>:
 80072cc:	4a04      	ldr	r2, [pc, #16]	; (80072e0 <_localeconv_r+0x14>)
 80072ce:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <_localeconv_r+0x18>)
 80072d0:	6812      	ldr	r2, [r2, #0]
 80072d2:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80072d4:	2800      	cmp	r0, #0
 80072d6:	bf08      	it	eq
 80072d8:	4618      	moveq	r0, r3
 80072da:	30f0      	adds	r0, #240	; 0xf0
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	20000460 	.word	0x20000460
 80072e4:	20000874 	.word	0x20000874

080072e8 <__swhatbuf_r>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	460d      	mov	r5, r1
 80072ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f0:	2900      	cmp	r1, #0
 80072f2:	b090      	sub	sp, #64	; 0x40
 80072f4:	4614      	mov	r4, r2
 80072f6:	461e      	mov	r6, r3
 80072f8:	db14      	blt.n	8007324 <__swhatbuf_r+0x3c>
 80072fa:	aa01      	add	r2, sp, #4
 80072fc:	f001 faee 	bl	80088dc <_fstat_r>
 8007300:	2800      	cmp	r0, #0
 8007302:	db0f      	blt.n	8007324 <__swhatbuf_r+0x3c>
 8007304:	9a02      	ldr	r2, [sp, #8]
 8007306:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800730a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 800730e:	fab2 f282 	clz	r2, r2
 8007312:	0952      	lsrs	r2, r2, #5
 8007314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007318:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800731c:	6032      	str	r2, [r6, #0]
 800731e:	6023      	str	r3, [r4, #0]
 8007320:	b010      	add	sp, #64	; 0x40
 8007322:	bd70      	pop	{r4, r5, r6, pc}
 8007324:	89a8      	ldrh	r0, [r5, #12]
 8007326:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800732a:	b282      	uxth	r2, r0
 800732c:	2000      	movs	r0, #0
 800732e:	6030      	str	r0, [r6, #0]
 8007330:	b11a      	cbz	r2, 800733a <__swhatbuf_r+0x52>
 8007332:	2340      	movs	r3, #64	; 0x40
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	b010      	add	sp, #64	; 0x40
 8007338:	bd70      	pop	{r4, r5, r6, pc}
 800733a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800733e:	4610      	mov	r0, r2
 8007340:	6023      	str	r3, [r4, #0]
 8007342:	b010      	add	sp, #64	; 0x40
 8007344:	bd70      	pop	{r4, r5, r6, pc}
 8007346:	bf00      	nop

08007348 <__smakebuf_r>:
 8007348:	898a      	ldrh	r2, [r1, #12]
 800734a:	0792      	lsls	r2, r2, #30
 800734c:	460b      	mov	r3, r1
 800734e:	d506      	bpl.n	800735e <__smakebuf_r+0x16>
 8007350:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007354:	2101      	movs	r1, #1
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	611a      	str	r2, [r3, #16]
 800735a:	6159      	str	r1, [r3, #20]
 800735c:	4770      	bx	lr
 800735e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007360:	b083      	sub	sp, #12
 8007362:	ab01      	add	r3, sp, #4
 8007364:	466a      	mov	r2, sp
 8007366:	460c      	mov	r4, r1
 8007368:	4605      	mov	r5, r0
 800736a:	f7ff ffbd 	bl	80072e8 <__swhatbuf_r>
 800736e:	9900      	ldr	r1, [sp, #0]
 8007370:	4606      	mov	r6, r0
 8007372:	4628      	mov	r0, r5
 8007374:	f000 f82c 	bl	80073d0 <_malloc_r>
 8007378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800737c:	b1d0      	cbz	r0, 80073b4 <__smakebuf_r+0x6c>
 800737e:	9a01      	ldr	r2, [sp, #4]
 8007380:	4f12      	ldr	r7, [pc, #72]	; (80073cc <__smakebuf_r+0x84>)
 8007382:	9900      	ldr	r1, [sp, #0]
 8007384:	63ef      	str	r7, [r5, #60]	; 0x3c
 8007386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800738a:	81a3      	strh	r3, [r4, #12]
 800738c:	6020      	str	r0, [r4, #0]
 800738e:	6120      	str	r0, [r4, #16]
 8007390:	6161      	str	r1, [r4, #20]
 8007392:	b91a      	cbnz	r2, 800739c <__smakebuf_r+0x54>
 8007394:	4333      	orrs	r3, r6
 8007396:	81a3      	strh	r3, [r4, #12]
 8007398:	b003      	add	sp, #12
 800739a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800739c:	4628      	mov	r0, r5
 800739e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073a2:	f001 faaf 	bl	8008904 <_isatty_r>
 80073a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d0f2      	beq.n	8007394 <__smakebuf_r+0x4c>
 80073ae:	f043 0301 	orr.w	r3, r3, #1
 80073b2:	e7ef      	b.n	8007394 <__smakebuf_r+0x4c>
 80073b4:	059a      	lsls	r2, r3, #22
 80073b6:	d4ef      	bmi.n	8007398 <__smakebuf_r+0x50>
 80073b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073bc:	f043 0302 	orr.w	r3, r3, #2
 80073c0:	2101      	movs	r1, #1
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	6022      	str	r2, [r4, #0]
 80073c6:	6122      	str	r2, [r4, #16]
 80073c8:	6161      	str	r1, [r4, #20]
 80073ca:	e7e5      	b.n	8007398 <__smakebuf_r+0x50>
 80073cc:	08006bf9 	.word	0x08006bf9

080073d0 <_malloc_r>:
 80073d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	f101 050b 	add.w	r5, r1, #11
 80073d8:	2d16      	cmp	r5, #22
 80073da:	b083      	sub	sp, #12
 80073dc:	4606      	mov	r6, r0
 80073de:	f240 809f 	bls.w	8007520 <_malloc_r+0x150>
 80073e2:	f035 0507 	bics.w	r5, r5, #7
 80073e6:	f100 80bf 	bmi.w	8007568 <_malloc_r+0x198>
 80073ea:	42a9      	cmp	r1, r5
 80073ec:	f200 80bc 	bhi.w	8007568 <_malloc_r+0x198>
 80073f0:	f000 fb5a 	bl	8007aa8 <__malloc_lock>
 80073f4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80073f8:	f0c0 829c 	bcc.w	8007934 <_malloc_r+0x564>
 80073fc:	0a6b      	lsrs	r3, r5, #9
 80073fe:	f000 80ba 	beq.w	8007576 <_malloc_r+0x1a6>
 8007402:	2b04      	cmp	r3, #4
 8007404:	f200 8183 	bhi.w	800770e <_malloc_r+0x33e>
 8007408:	09a8      	lsrs	r0, r5, #6
 800740a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 800740e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8007412:	3038      	adds	r0, #56	; 0x38
 8007414:	4fc4      	ldr	r7, [pc, #784]	; (8007728 <_malloc_r+0x358>)
 8007416:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800741a:	f1a3 0108 	sub.w	r1, r3, #8
 800741e:	685c      	ldr	r4, [r3, #4]
 8007420:	42a1      	cmp	r1, r4
 8007422:	d107      	bne.n	8007434 <_malloc_r+0x64>
 8007424:	e0ac      	b.n	8007580 <_malloc_r+0x1b0>
 8007426:	2a00      	cmp	r2, #0
 8007428:	f280 80ac 	bge.w	8007584 <_malloc_r+0x1b4>
 800742c:	68e4      	ldr	r4, [r4, #12]
 800742e:	42a1      	cmp	r1, r4
 8007430:	f000 80a6 	beq.w	8007580 <_malloc_r+0x1b0>
 8007434:	6863      	ldr	r3, [r4, #4]
 8007436:	f023 0303 	bic.w	r3, r3, #3
 800743a:	1b5a      	subs	r2, r3, r5
 800743c:	2a0f      	cmp	r2, #15
 800743e:	ddf2      	ble.n	8007426 <_malloc_r+0x56>
 8007440:	49b9      	ldr	r1, [pc, #740]	; (8007728 <_malloc_r+0x358>)
 8007442:	693c      	ldr	r4, [r7, #16]
 8007444:	f101 0e08 	add.w	lr, r1, #8
 8007448:	4574      	cmp	r4, lr
 800744a:	f000 81b3 	beq.w	80077b4 <_malloc_r+0x3e4>
 800744e:	6863      	ldr	r3, [r4, #4]
 8007450:	f023 0303 	bic.w	r3, r3, #3
 8007454:	1b5a      	subs	r2, r3, r5
 8007456:	2a0f      	cmp	r2, #15
 8007458:	f300 8199 	bgt.w	800778e <_malloc_r+0x3be>
 800745c:	2a00      	cmp	r2, #0
 800745e:	f8c1 e014 	str.w	lr, [r1, #20]
 8007462:	f8c1 e010 	str.w	lr, [r1, #16]
 8007466:	f280 809e 	bge.w	80075a6 <_malloc_r+0x1d6>
 800746a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800746e:	f080 8167 	bcs.w	8007740 <_malloc_r+0x370>
 8007472:	08db      	lsrs	r3, r3, #3
 8007474:	f103 0c01 	add.w	ip, r3, #1
 8007478:	2201      	movs	r2, #1
 800747a:	109b      	asrs	r3, r3, #2
 800747c:	fa02 f303 	lsl.w	r3, r2, r3
 8007480:	684a      	ldr	r2, [r1, #4]
 8007482:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 8007486:	f8c4 8008 	str.w	r8, [r4, #8]
 800748a:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 800748e:	431a      	orrs	r2, r3
 8007490:	f1a9 0308 	sub.w	r3, r9, #8
 8007494:	60e3      	str	r3, [r4, #12]
 8007496:	604a      	str	r2, [r1, #4]
 8007498:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 800749c:	f8c8 400c 	str.w	r4, [r8, #12]
 80074a0:	1083      	asrs	r3, r0, #2
 80074a2:	2401      	movs	r4, #1
 80074a4:	409c      	lsls	r4, r3
 80074a6:	4294      	cmp	r4, r2
 80074a8:	f200 808a 	bhi.w	80075c0 <_malloc_r+0x1f0>
 80074ac:	4214      	tst	r4, r2
 80074ae:	d106      	bne.n	80074be <_malloc_r+0xee>
 80074b0:	f020 0003 	bic.w	r0, r0, #3
 80074b4:	0064      	lsls	r4, r4, #1
 80074b6:	4214      	tst	r4, r2
 80074b8:	f100 0004 	add.w	r0, r0, #4
 80074bc:	d0fa      	beq.n	80074b4 <_malloc_r+0xe4>
 80074be:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 80074c2:	46cc      	mov	ip, r9
 80074c4:	4680      	mov	r8, r0
 80074c6:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80074ca:	458c      	cmp	ip, r1
 80074cc:	d107      	bne.n	80074de <_malloc_r+0x10e>
 80074ce:	e173      	b.n	80077b8 <_malloc_r+0x3e8>
 80074d0:	2a00      	cmp	r2, #0
 80074d2:	f280 8181 	bge.w	80077d8 <_malloc_r+0x408>
 80074d6:	68c9      	ldr	r1, [r1, #12]
 80074d8:	458c      	cmp	ip, r1
 80074da:	f000 816d 	beq.w	80077b8 <_malloc_r+0x3e8>
 80074de:	684b      	ldr	r3, [r1, #4]
 80074e0:	f023 0303 	bic.w	r3, r3, #3
 80074e4:	1b5a      	subs	r2, r3, r5
 80074e6:	2a0f      	cmp	r2, #15
 80074e8:	ddf2      	ble.n	80074d0 <_malloc_r+0x100>
 80074ea:	460c      	mov	r4, r1
 80074ec:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80074f0:	f854 8f08 	ldr.w	r8, [r4, #8]!
 80074f4:	194b      	adds	r3, r1, r5
 80074f6:	f045 0501 	orr.w	r5, r5, #1
 80074fa:	604d      	str	r5, [r1, #4]
 80074fc:	f042 0101 	orr.w	r1, r2, #1
 8007500:	f8c8 c00c 	str.w	ip, [r8, #12]
 8007504:	4630      	mov	r0, r6
 8007506:	f8cc 8008 	str.w	r8, [ip, #8]
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	613b      	str	r3, [r7, #16]
 800750e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8007512:	f8c3 e008 	str.w	lr, [r3, #8]
 8007516:	6059      	str	r1, [r3, #4]
 8007518:	509a      	str	r2, [r3, r2]
 800751a:	f000 fac7 	bl	8007aac <__malloc_unlock>
 800751e:	e01f      	b.n	8007560 <_malloc_r+0x190>
 8007520:	2910      	cmp	r1, #16
 8007522:	d821      	bhi.n	8007568 <_malloc_r+0x198>
 8007524:	f000 fac0 	bl	8007aa8 <__malloc_lock>
 8007528:	2510      	movs	r5, #16
 800752a:	2306      	movs	r3, #6
 800752c:	2002      	movs	r0, #2
 800752e:	4f7e      	ldr	r7, [pc, #504]	; (8007728 <_malloc_r+0x358>)
 8007530:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007534:	f1a3 0208 	sub.w	r2, r3, #8
 8007538:	685c      	ldr	r4, [r3, #4]
 800753a:	4294      	cmp	r4, r2
 800753c:	f000 8145 	beq.w	80077ca <_malloc_r+0x3fa>
 8007540:	6863      	ldr	r3, [r4, #4]
 8007542:	68e1      	ldr	r1, [r4, #12]
 8007544:	68a5      	ldr	r5, [r4, #8]
 8007546:	f023 0303 	bic.w	r3, r3, #3
 800754a:	4423      	add	r3, r4
 800754c:	4630      	mov	r0, r6
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	60e9      	str	r1, [r5, #12]
 8007552:	f042 0201 	orr.w	r2, r2, #1
 8007556:	608d      	str	r5, [r1, #8]
 8007558:	605a      	str	r2, [r3, #4]
 800755a:	f000 faa7 	bl	8007aac <__malloc_unlock>
 800755e:	3408      	adds	r4, #8
 8007560:	4620      	mov	r0, r4
 8007562:	b003      	add	sp, #12
 8007564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007568:	2400      	movs	r4, #0
 800756a:	230c      	movs	r3, #12
 800756c:	4620      	mov	r0, r4
 800756e:	6033      	str	r3, [r6, #0]
 8007570:	b003      	add	sp, #12
 8007572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007576:	2380      	movs	r3, #128	; 0x80
 8007578:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800757c:	203f      	movs	r0, #63	; 0x3f
 800757e:	e749      	b.n	8007414 <_malloc_r+0x44>
 8007580:	4670      	mov	r0, lr
 8007582:	e75d      	b.n	8007440 <_malloc_r+0x70>
 8007584:	4423      	add	r3, r4
 8007586:	68e1      	ldr	r1, [r4, #12]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	68a5      	ldr	r5, [r4, #8]
 800758c:	f042 0201 	orr.w	r2, r2, #1
 8007590:	60e9      	str	r1, [r5, #12]
 8007592:	4630      	mov	r0, r6
 8007594:	608d      	str	r5, [r1, #8]
 8007596:	605a      	str	r2, [r3, #4]
 8007598:	f000 fa88 	bl	8007aac <__malloc_unlock>
 800759c:	3408      	adds	r4, #8
 800759e:	4620      	mov	r0, r4
 80075a0:	b003      	add	sp, #12
 80075a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a6:	4423      	add	r3, r4
 80075a8:	4630      	mov	r0, r6
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	f042 0201 	orr.w	r2, r2, #1
 80075b0:	605a      	str	r2, [r3, #4]
 80075b2:	f000 fa7b 	bl	8007aac <__malloc_unlock>
 80075b6:	3408      	adds	r4, #8
 80075b8:	4620      	mov	r0, r4
 80075ba:	b003      	add	sp, #12
 80075bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c0:	68bc      	ldr	r4, [r7, #8]
 80075c2:	6863      	ldr	r3, [r4, #4]
 80075c4:	f023 0803 	bic.w	r8, r3, #3
 80075c8:	45a8      	cmp	r8, r5
 80075ca:	d304      	bcc.n	80075d6 <_malloc_r+0x206>
 80075cc:	ebc5 0308 	rsb	r3, r5, r8
 80075d0:	2b0f      	cmp	r3, #15
 80075d2:	f300 808c 	bgt.w	80076ee <_malloc_r+0x31e>
 80075d6:	4b55      	ldr	r3, [pc, #340]	; (800772c <_malloc_r+0x35c>)
 80075d8:	f8df 9160 	ldr.w	r9, [pc, #352]	; 800773c <_malloc_r+0x36c>
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	f8d9 3000 	ldr.w	r3, [r9]
 80075e2:	3301      	adds	r3, #1
 80075e4:	442a      	add	r2, r5
 80075e6:	eb04 0a08 	add.w	sl, r4, r8
 80075ea:	f000 8160 	beq.w	80078ae <_malloc_r+0x4de>
 80075ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80075f2:	320f      	adds	r2, #15
 80075f4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80075f8:	f022 020f 	bic.w	r2, r2, #15
 80075fc:	4611      	mov	r1, r2
 80075fe:	4630      	mov	r0, r6
 8007600:	9201      	str	r2, [sp, #4]
 8007602:	f000 ff55 	bl	80084b0 <_sbrk_r>
 8007606:	f1b0 3fff 	cmp.w	r0, #4294967295
 800760a:	4683      	mov	fp, r0
 800760c:	9a01      	ldr	r2, [sp, #4]
 800760e:	f000 8158 	beq.w	80078c2 <_malloc_r+0x4f2>
 8007612:	4582      	cmp	sl, r0
 8007614:	f200 80fc 	bhi.w	8007810 <_malloc_r+0x440>
 8007618:	4b45      	ldr	r3, [pc, #276]	; (8007730 <_malloc_r+0x360>)
 800761a:	6819      	ldr	r1, [r3, #0]
 800761c:	45da      	cmp	sl, fp
 800761e:	4411      	add	r1, r2
 8007620:	6019      	str	r1, [r3, #0]
 8007622:	f000 8153 	beq.w	80078cc <_malloc_r+0x4fc>
 8007626:	f8d9 0000 	ldr.w	r0, [r9]
 800762a:	f8df e110 	ldr.w	lr, [pc, #272]	; 800773c <_malloc_r+0x36c>
 800762e:	3001      	adds	r0, #1
 8007630:	bf1b      	ittet	ne
 8007632:	ebca 0a0b 	rsbne	sl, sl, fp
 8007636:	4451      	addne	r1, sl
 8007638:	f8ce b000 	streq.w	fp, [lr]
 800763c:	6019      	strne	r1, [r3, #0]
 800763e:	f01b 0107 	ands.w	r1, fp, #7
 8007642:	f000 8117 	beq.w	8007874 <_malloc_r+0x4a4>
 8007646:	f1c1 0008 	rsb	r0, r1, #8
 800764a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800764e:	4483      	add	fp, r0
 8007650:	3108      	adds	r1, #8
 8007652:	445a      	add	r2, fp
 8007654:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007658:	ebc2 0901 	rsb	r9, r2, r1
 800765c:	4649      	mov	r1, r9
 800765e:	4630      	mov	r0, r6
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	f000 ff25 	bl	80084b0 <_sbrk_r>
 8007666:	1c43      	adds	r3, r0, #1
 8007668:	9b01      	ldr	r3, [sp, #4]
 800766a:	f000 813f 	beq.w	80078ec <_malloc_r+0x51c>
 800766e:	ebcb 0200 	rsb	r2, fp, r0
 8007672:	444a      	add	r2, r9
 8007674:	f042 0201 	orr.w	r2, r2, #1
 8007678:	6819      	ldr	r1, [r3, #0]
 800767a:	f8c7 b008 	str.w	fp, [r7, #8]
 800767e:	4449      	add	r1, r9
 8007680:	42bc      	cmp	r4, r7
 8007682:	f8cb 2004 	str.w	r2, [fp, #4]
 8007686:	6019      	str	r1, [r3, #0]
 8007688:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8007730 <_malloc_r+0x360>
 800768c:	d016      	beq.n	80076bc <_malloc_r+0x2ec>
 800768e:	f1b8 0f0f 	cmp.w	r8, #15
 8007692:	f240 80fd 	bls.w	8007890 <_malloc_r+0x4c0>
 8007696:	6862      	ldr	r2, [r4, #4]
 8007698:	f1a8 030c 	sub.w	r3, r8, #12
 800769c:	f023 0307 	bic.w	r3, r3, #7
 80076a0:	18e0      	adds	r0, r4, r3
 80076a2:	f002 0201 	and.w	r2, r2, #1
 80076a6:	f04f 0e05 	mov.w	lr, #5
 80076aa:	431a      	orrs	r2, r3
 80076ac:	2b0f      	cmp	r3, #15
 80076ae:	6062      	str	r2, [r4, #4]
 80076b0:	f8c0 e004 	str.w	lr, [r0, #4]
 80076b4:	f8c0 e008 	str.w	lr, [r0, #8]
 80076b8:	f200 811c 	bhi.w	80078f4 <_malloc_r+0x524>
 80076bc:	4b1d      	ldr	r3, [pc, #116]	; (8007734 <_malloc_r+0x364>)
 80076be:	68bc      	ldr	r4, [r7, #8]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	4291      	cmp	r1, r2
 80076c4:	bf88      	it	hi
 80076c6:	6019      	strhi	r1, [r3, #0]
 80076c8:	4b1b      	ldr	r3, [pc, #108]	; (8007738 <_malloc_r+0x368>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	4291      	cmp	r1, r2
 80076ce:	6862      	ldr	r2, [r4, #4]
 80076d0:	bf88      	it	hi
 80076d2:	6019      	strhi	r1, [r3, #0]
 80076d4:	f022 0203 	bic.w	r2, r2, #3
 80076d8:	4295      	cmp	r5, r2
 80076da:	eba2 0305 	sub.w	r3, r2, r5
 80076de:	d801      	bhi.n	80076e4 <_malloc_r+0x314>
 80076e0:	2b0f      	cmp	r3, #15
 80076e2:	dc04      	bgt.n	80076ee <_malloc_r+0x31e>
 80076e4:	4630      	mov	r0, r6
 80076e6:	f000 f9e1 	bl	8007aac <__malloc_unlock>
 80076ea:	2400      	movs	r4, #0
 80076ec:	e738      	b.n	8007560 <_malloc_r+0x190>
 80076ee:	1962      	adds	r2, r4, r5
 80076f0:	f043 0301 	orr.w	r3, r3, #1
 80076f4:	f045 0501 	orr.w	r5, r5, #1
 80076f8:	6065      	str	r5, [r4, #4]
 80076fa:	4630      	mov	r0, r6
 80076fc:	60ba      	str	r2, [r7, #8]
 80076fe:	6053      	str	r3, [r2, #4]
 8007700:	f000 f9d4 	bl	8007aac <__malloc_unlock>
 8007704:	3408      	adds	r4, #8
 8007706:	4620      	mov	r0, r4
 8007708:	b003      	add	sp, #12
 800770a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770e:	2b14      	cmp	r3, #20
 8007710:	d971      	bls.n	80077f6 <_malloc_r+0x426>
 8007712:	2b54      	cmp	r3, #84	; 0x54
 8007714:	f200 80a4 	bhi.w	8007860 <_malloc_r+0x490>
 8007718:	0b28      	lsrs	r0, r5, #12
 800771a:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 800771e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8007722:	306e      	adds	r0, #110	; 0x6e
 8007724:	e676      	b.n	8007414 <_malloc_r+0x44>
 8007726:	bf00      	nop
 8007728:	20000464 	.word	0x20000464
 800772c:	20000a4c 	.word	0x20000a4c
 8007730:	20000a50 	.word	0x20000a50
 8007734:	20000a48 	.word	0x20000a48
 8007738:	20000a44 	.word	0x20000a44
 800773c:	20000870 	.word	0x20000870
 8007740:	0a5a      	lsrs	r2, r3, #9
 8007742:	2a04      	cmp	r2, #4
 8007744:	d95e      	bls.n	8007804 <_malloc_r+0x434>
 8007746:	2a14      	cmp	r2, #20
 8007748:	f200 80b3 	bhi.w	80078b2 <_malloc_r+0x4e2>
 800774c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8007750:	0049      	lsls	r1, r1, #1
 8007752:	325b      	adds	r2, #91	; 0x5b
 8007754:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 8007758:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800775c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800793c <_malloc_r+0x56c>
 8007760:	f1ac 0c08 	sub.w	ip, ip, #8
 8007764:	458c      	cmp	ip, r1
 8007766:	f000 8088 	beq.w	800787a <_malloc_r+0x4aa>
 800776a:	684a      	ldr	r2, [r1, #4]
 800776c:	f022 0203 	bic.w	r2, r2, #3
 8007770:	4293      	cmp	r3, r2
 8007772:	d202      	bcs.n	800777a <_malloc_r+0x3aa>
 8007774:	6889      	ldr	r1, [r1, #8]
 8007776:	458c      	cmp	ip, r1
 8007778:	d1f7      	bne.n	800776a <_malloc_r+0x39a>
 800777a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	f8c4 c00c 	str.w	ip, [r4, #12]
 8007784:	60a1      	str	r1, [r4, #8]
 8007786:	f8cc 4008 	str.w	r4, [ip, #8]
 800778a:	60cc      	str	r4, [r1, #12]
 800778c:	e688      	b.n	80074a0 <_malloc_r+0xd0>
 800778e:	1963      	adds	r3, r4, r5
 8007790:	f042 0701 	orr.w	r7, r2, #1
 8007794:	f045 0501 	orr.w	r5, r5, #1
 8007798:	6065      	str	r5, [r4, #4]
 800779a:	4630      	mov	r0, r6
 800779c:	614b      	str	r3, [r1, #20]
 800779e:	610b      	str	r3, [r1, #16]
 80077a0:	f8c3 e00c 	str.w	lr, [r3, #12]
 80077a4:	f8c3 e008 	str.w	lr, [r3, #8]
 80077a8:	605f      	str	r7, [r3, #4]
 80077aa:	509a      	str	r2, [r3, r2]
 80077ac:	3408      	adds	r4, #8
 80077ae:	f000 f97d 	bl	8007aac <__malloc_unlock>
 80077b2:	e6d5      	b.n	8007560 <_malloc_r+0x190>
 80077b4:	684a      	ldr	r2, [r1, #4]
 80077b6:	e673      	b.n	80074a0 <_malloc_r+0xd0>
 80077b8:	f108 0801 	add.w	r8, r8, #1
 80077bc:	f018 0f03 	tst.w	r8, #3
 80077c0:	f10c 0c08 	add.w	ip, ip, #8
 80077c4:	f47f ae7f 	bne.w	80074c6 <_malloc_r+0xf6>
 80077c8:	e030      	b.n	800782c <_malloc_r+0x45c>
 80077ca:	68dc      	ldr	r4, [r3, #12]
 80077cc:	42a3      	cmp	r3, r4
 80077ce:	bf08      	it	eq
 80077d0:	3002      	addeq	r0, #2
 80077d2:	f43f ae35 	beq.w	8007440 <_malloc_r+0x70>
 80077d6:	e6b3      	b.n	8007540 <_malloc_r+0x170>
 80077d8:	440b      	add	r3, r1
 80077da:	460c      	mov	r4, r1
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	68c9      	ldr	r1, [r1, #12]
 80077e0:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80077e4:	f042 0201 	orr.w	r2, r2, #1
 80077e8:	605a      	str	r2, [r3, #4]
 80077ea:	4630      	mov	r0, r6
 80077ec:	60e9      	str	r1, [r5, #12]
 80077ee:	608d      	str	r5, [r1, #8]
 80077f0:	f000 f95c 	bl	8007aac <__malloc_unlock>
 80077f4:	e6b4      	b.n	8007560 <_malloc_r+0x190>
 80077f6:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 80077fa:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 80077fe:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8007802:	e607      	b.n	8007414 <_malloc_r+0x44>
 8007804:	099a      	lsrs	r2, r3, #6
 8007806:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800780a:	0049      	lsls	r1, r1, #1
 800780c:	3238      	adds	r2, #56	; 0x38
 800780e:	e7a1      	b.n	8007754 <_malloc_r+0x384>
 8007810:	42bc      	cmp	r4, r7
 8007812:	4b4a      	ldr	r3, [pc, #296]	; (800793c <_malloc_r+0x56c>)
 8007814:	f43f af00 	beq.w	8007618 <_malloc_r+0x248>
 8007818:	689c      	ldr	r4, [r3, #8]
 800781a:	6862      	ldr	r2, [r4, #4]
 800781c:	f022 0203 	bic.w	r2, r2, #3
 8007820:	e75a      	b.n	80076d8 <_malloc_r+0x308>
 8007822:	f859 3908 	ldr.w	r3, [r9], #-8
 8007826:	4599      	cmp	r9, r3
 8007828:	f040 8082 	bne.w	8007930 <_malloc_r+0x560>
 800782c:	f010 0f03 	tst.w	r0, #3
 8007830:	f100 30ff 	add.w	r0, r0, #4294967295
 8007834:	d1f5      	bne.n	8007822 <_malloc_r+0x452>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	ea23 0304 	bic.w	r3, r3, r4
 800783c:	607b      	str	r3, [r7, #4]
 800783e:	0064      	lsls	r4, r4, #1
 8007840:	429c      	cmp	r4, r3
 8007842:	f63f aebd 	bhi.w	80075c0 <_malloc_r+0x1f0>
 8007846:	2c00      	cmp	r4, #0
 8007848:	f43f aeba 	beq.w	80075c0 <_malloc_r+0x1f0>
 800784c:	421c      	tst	r4, r3
 800784e:	4640      	mov	r0, r8
 8007850:	f47f ae35 	bne.w	80074be <_malloc_r+0xee>
 8007854:	0064      	lsls	r4, r4, #1
 8007856:	421c      	tst	r4, r3
 8007858:	f100 0004 	add.w	r0, r0, #4
 800785c:	d0fa      	beq.n	8007854 <_malloc_r+0x484>
 800785e:	e62e      	b.n	80074be <_malloc_r+0xee>
 8007860:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007864:	d818      	bhi.n	8007898 <_malloc_r+0x4c8>
 8007866:	0be8      	lsrs	r0, r5, #15
 8007868:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 800786c:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8007870:	3077      	adds	r0, #119	; 0x77
 8007872:	e5cf      	b.n	8007414 <_malloc_r+0x44>
 8007874:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007878:	e6eb      	b.n	8007652 <_malloc_r+0x282>
 800787a:	2101      	movs	r1, #1
 800787c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007880:	1092      	asrs	r2, r2, #2
 8007882:	fa01 f202 	lsl.w	r2, r1, r2
 8007886:	431a      	orrs	r2, r3
 8007888:	f8c8 2004 	str.w	r2, [r8, #4]
 800788c:	4661      	mov	r1, ip
 800788e:	e777      	b.n	8007780 <_malloc_r+0x3b0>
 8007890:	2301      	movs	r3, #1
 8007892:	f8cb 3004 	str.w	r3, [fp, #4]
 8007896:	e725      	b.n	80076e4 <_malloc_r+0x314>
 8007898:	f240 5254 	movw	r2, #1364	; 0x554
 800789c:	4293      	cmp	r3, r2
 800789e:	d820      	bhi.n	80078e2 <_malloc_r+0x512>
 80078a0:	0ca8      	lsrs	r0, r5, #18
 80078a2:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 80078a6:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80078aa:	307c      	adds	r0, #124	; 0x7c
 80078ac:	e5b2      	b.n	8007414 <_malloc_r+0x44>
 80078ae:	3210      	adds	r2, #16
 80078b0:	e6a4      	b.n	80075fc <_malloc_r+0x22c>
 80078b2:	2a54      	cmp	r2, #84	; 0x54
 80078b4:	d826      	bhi.n	8007904 <_malloc_r+0x534>
 80078b6:	0b1a      	lsrs	r2, r3, #12
 80078b8:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 80078bc:	0049      	lsls	r1, r1, #1
 80078be:	326e      	adds	r2, #110	; 0x6e
 80078c0:	e748      	b.n	8007754 <_malloc_r+0x384>
 80078c2:	68bc      	ldr	r4, [r7, #8]
 80078c4:	6862      	ldr	r2, [r4, #4]
 80078c6:	f022 0203 	bic.w	r2, r2, #3
 80078ca:	e705      	b.n	80076d8 <_malloc_r+0x308>
 80078cc:	f3ca 000b 	ubfx	r0, sl, #0, #12
 80078d0:	2800      	cmp	r0, #0
 80078d2:	f47f aea8 	bne.w	8007626 <_malloc_r+0x256>
 80078d6:	4442      	add	r2, r8
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	f042 0201 	orr.w	r2, r2, #1
 80078de:	605a      	str	r2, [r3, #4]
 80078e0:	e6ec      	b.n	80076bc <_malloc_r+0x2ec>
 80078e2:	23fe      	movs	r3, #254	; 0xfe
 80078e4:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 80078e8:	207e      	movs	r0, #126	; 0x7e
 80078ea:	e593      	b.n	8007414 <_malloc_r+0x44>
 80078ec:	2201      	movs	r2, #1
 80078ee:	f04f 0900 	mov.w	r9, #0
 80078f2:	e6c1      	b.n	8007678 <_malloc_r+0x2a8>
 80078f4:	f104 0108 	add.w	r1, r4, #8
 80078f8:	4630      	mov	r0, r6
 80078fa:	f7ff fa53 	bl	8006da4 <_free_r>
 80078fe:	f8d9 1000 	ldr.w	r1, [r9]
 8007902:	e6db      	b.n	80076bc <_malloc_r+0x2ec>
 8007904:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007908:	d805      	bhi.n	8007916 <_malloc_r+0x546>
 800790a:	0bda      	lsrs	r2, r3, #15
 800790c:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8007910:	0049      	lsls	r1, r1, #1
 8007912:	3277      	adds	r2, #119	; 0x77
 8007914:	e71e      	b.n	8007754 <_malloc_r+0x384>
 8007916:	f240 5154 	movw	r1, #1364	; 0x554
 800791a:	428a      	cmp	r2, r1
 800791c:	d805      	bhi.n	800792a <_malloc_r+0x55a>
 800791e:	0c9a      	lsrs	r2, r3, #18
 8007920:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8007924:	0049      	lsls	r1, r1, #1
 8007926:	327c      	adds	r2, #124	; 0x7c
 8007928:	e714      	b.n	8007754 <_malloc_r+0x384>
 800792a:	21fe      	movs	r1, #254	; 0xfe
 800792c:	227e      	movs	r2, #126	; 0x7e
 800792e:	e711      	b.n	8007754 <_malloc_r+0x384>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	e784      	b.n	800783e <_malloc_r+0x46e>
 8007934:	08e8      	lsrs	r0, r5, #3
 8007936:	1c43      	adds	r3, r0, #1
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	e5f8      	b.n	800752e <_malloc_r+0x15e>
 800793c:	20000464 	.word	0x20000464

08007940 <memchr>:
 8007940:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8007944:	2a10      	cmp	r2, #16
 8007946:	db2b      	blt.n	80079a0 <memchr+0x60>
 8007948:	f010 0f07 	tst.w	r0, #7
 800794c:	d008      	beq.n	8007960 <memchr+0x20>
 800794e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007952:	3a01      	subs	r2, #1
 8007954:	428b      	cmp	r3, r1
 8007956:	d02d      	beq.n	80079b4 <memchr+0x74>
 8007958:	f010 0f07 	tst.w	r0, #7
 800795c:	b342      	cbz	r2, 80079b0 <memchr+0x70>
 800795e:	d1f6      	bne.n	800794e <memchr+0xe>
 8007960:	b4f0      	push	{r4, r5, r6, r7}
 8007962:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8007966:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800796a:	f022 0407 	bic.w	r4, r2, #7
 800796e:	f07f 0700 	mvns.w	r7, #0
 8007972:	2300      	movs	r3, #0
 8007974:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8007978:	3c08      	subs	r4, #8
 800797a:	ea85 0501 	eor.w	r5, r5, r1
 800797e:	ea86 0601 	eor.w	r6, r6, r1
 8007982:	fa85 f547 	uadd8	r5, r5, r7
 8007986:	faa3 f587 	sel	r5, r3, r7
 800798a:	fa86 f647 	uadd8	r6, r6, r7
 800798e:	faa5 f687 	sel	r6, r5, r7
 8007992:	b98e      	cbnz	r6, 80079b8 <memchr+0x78>
 8007994:	d1ee      	bne.n	8007974 <memchr+0x34>
 8007996:	bcf0      	pop	{r4, r5, r6, r7}
 8007998:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800799c:	f002 0207 	and.w	r2, r2, #7
 80079a0:	b132      	cbz	r2, 80079b0 <memchr+0x70>
 80079a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80079a6:	3a01      	subs	r2, #1
 80079a8:	ea83 0301 	eor.w	r3, r3, r1
 80079ac:	b113      	cbz	r3, 80079b4 <memchr+0x74>
 80079ae:	d1f8      	bne.n	80079a2 <memchr+0x62>
 80079b0:	2000      	movs	r0, #0
 80079b2:	4770      	bx	lr
 80079b4:	3801      	subs	r0, #1
 80079b6:	4770      	bx	lr
 80079b8:	2d00      	cmp	r5, #0
 80079ba:	bf06      	itte	eq
 80079bc:	4635      	moveq	r5, r6
 80079be:	3803      	subeq	r0, #3
 80079c0:	3807      	subne	r0, #7
 80079c2:	f015 0f01 	tst.w	r5, #1
 80079c6:	d107      	bne.n	80079d8 <memchr+0x98>
 80079c8:	3001      	adds	r0, #1
 80079ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80079ce:	bf02      	ittt	eq
 80079d0:	3001      	addeq	r0, #1
 80079d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80079d6:	3001      	addeq	r0, #1
 80079d8:	bcf0      	pop	{r4, r5, r6, r7}
 80079da:	3801      	subs	r0, #1
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop

080079e0 <memmove>:
 80079e0:	4288      	cmp	r0, r1
 80079e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e4:	d90d      	bls.n	8007a02 <memmove+0x22>
 80079e6:	188b      	adds	r3, r1, r2
 80079e8:	4298      	cmp	r0, r3
 80079ea:	d20a      	bcs.n	8007a02 <memmove+0x22>
 80079ec:	1881      	adds	r1, r0, r2
 80079ee:	2a00      	cmp	r2, #0
 80079f0:	d051      	beq.n	8007a96 <memmove+0xb6>
 80079f2:	1a9a      	subs	r2, r3, r2
 80079f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d1f9      	bne.n	80079f4 <memmove+0x14>
 8007a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a02:	2a0f      	cmp	r2, #15
 8007a04:	d948      	bls.n	8007a98 <memmove+0xb8>
 8007a06:	ea41 0300 	orr.w	r3, r1, r0
 8007a0a:	079b      	lsls	r3, r3, #30
 8007a0c:	d146      	bne.n	8007a9c <memmove+0xbc>
 8007a0e:	f100 0410 	add.w	r4, r0, #16
 8007a12:	f101 0310 	add.w	r3, r1, #16
 8007a16:	4615      	mov	r5, r2
 8007a18:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8007a1c:	f844 6c10 	str.w	r6, [r4, #-16]
 8007a20:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8007a24:	f844 6c0c 	str.w	r6, [r4, #-12]
 8007a28:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8007a2c:	f844 6c08 	str.w	r6, [r4, #-8]
 8007a30:	3d10      	subs	r5, #16
 8007a32:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8007a36:	f844 6c04 	str.w	r6, [r4, #-4]
 8007a3a:	2d0f      	cmp	r5, #15
 8007a3c:	f103 0310 	add.w	r3, r3, #16
 8007a40:	f104 0410 	add.w	r4, r4, #16
 8007a44:	d8e8      	bhi.n	8007a18 <memmove+0x38>
 8007a46:	f1a2 0310 	sub.w	r3, r2, #16
 8007a4a:	f023 030f 	bic.w	r3, r3, #15
 8007a4e:	f002 0e0f 	and.w	lr, r2, #15
 8007a52:	3310      	adds	r3, #16
 8007a54:	f1be 0f03 	cmp.w	lr, #3
 8007a58:	4419      	add	r1, r3
 8007a5a:	4403      	add	r3, r0
 8007a5c:	d921      	bls.n	8007aa2 <memmove+0xc2>
 8007a5e:	1f1e      	subs	r6, r3, #4
 8007a60:	460d      	mov	r5, r1
 8007a62:	4674      	mov	r4, lr
 8007a64:	3c04      	subs	r4, #4
 8007a66:	f855 7b04 	ldr.w	r7, [r5], #4
 8007a6a:	f846 7f04 	str.w	r7, [r6, #4]!
 8007a6e:	2c03      	cmp	r4, #3
 8007a70:	d8f8      	bhi.n	8007a64 <memmove+0x84>
 8007a72:	f1ae 0404 	sub.w	r4, lr, #4
 8007a76:	f024 0403 	bic.w	r4, r4, #3
 8007a7a:	3404      	adds	r4, #4
 8007a7c:	4423      	add	r3, r4
 8007a7e:	4421      	add	r1, r4
 8007a80:	f002 0203 	and.w	r2, r2, #3
 8007a84:	b162      	cbz	r2, 8007aa0 <memmove+0xc0>
 8007a86:	3b01      	subs	r3, #1
 8007a88:	440a      	add	r2, r1
 8007a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a92:	428a      	cmp	r2, r1
 8007a94:	d1f9      	bne.n	8007a8a <memmove+0xaa>
 8007a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a98:	4603      	mov	r3, r0
 8007a9a:	e7f3      	b.n	8007a84 <memmove+0xa4>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	e7f2      	b.n	8007a86 <memmove+0xa6>
 8007aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa2:	4672      	mov	r2, lr
 8007aa4:	e7ee      	b.n	8007a84 <memmove+0xa4>
 8007aa6:	bf00      	nop

08007aa8 <__malloc_lock>:
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop

08007aac <__malloc_unlock>:
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop

08007ab0 <_Balloc>:
 8007ab0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007ab2:	b570      	push	{r4, r5, r6, lr}
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	b14b      	cbz	r3, 8007ace <_Balloc+0x1e>
 8007aba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007abe:	b180      	cbz	r0, 8007ae2 <_Balloc+0x32>
 8007ac0:	6802      	ldr	r2, [r0, #0]
 8007ac2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	6103      	str	r3, [r0, #16]
 8007aca:	60c3      	str	r3, [r0, #12]
 8007acc:	bd70      	pop	{r4, r5, r6, pc}
 8007ace:	2221      	movs	r2, #33	; 0x21
 8007ad0:	2104      	movs	r1, #4
 8007ad2:	f000 fe1f 	bl	8008714 <_calloc_r>
 8007ad6:	64e8      	str	r0, [r5, #76]	; 0x4c
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2800      	cmp	r0, #0
 8007adc:	d1ed      	bne.n	8007aba <_Balloc+0xa>
 8007ade:	2000      	movs	r0, #0
 8007ae0:	bd70      	pop	{r4, r5, r6, pc}
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	fa01 f604 	lsl.w	r6, r1, r4
 8007ae8:	1d72      	adds	r2, r6, #5
 8007aea:	4628      	mov	r0, r5
 8007aec:	0092      	lsls	r2, r2, #2
 8007aee:	f000 fe11 	bl	8008714 <_calloc_r>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d0f3      	beq.n	8007ade <_Balloc+0x2e>
 8007af6:	6044      	str	r4, [r0, #4]
 8007af8:	6086      	str	r6, [r0, #8]
 8007afa:	e7e4      	b.n	8007ac6 <_Balloc+0x16>

08007afc <_Bfree>:
 8007afc:	b131      	cbz	r1, 8007b0c <_Bfree+0x10>
 8007afe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007b00:	684a      	ldr	r2, [r1, #4]
 8007b02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007b06:	6008      	str	r0, [r1, #0]
 8007b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop

08007b10 <__multadd>:
 8007b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b12:	690c      	ldr	r4, [r1, #16]
 8007b14:	b083      	sub	sp, #12
 8007b16:	460d      	mov	r5, r1
 8007b18:	4606      	mov	r6, r0
 8007b1a:	f101 0e14 	add.w	lr, r1, #20
 8007b1e:	2700      	movs	r7, #0
 8007b20:	f8de 0000 	ldr.w	r0, [lr]
 8007b24:	b281      	uxth	r1, r0
 8007b26:	fb02 3101 	mla	r1, r2, r1, r3
 8007b2a:	0c0b      	lsrs	r3, r1, #16
 8007b2c:	0c00      	lsrs	r0, r0, #16
 8007b2e:	fb02 3300 	mla	r3, r2, r0, r3
 8007b32:	b289      	uxth	r1, r1
 8007b34:	3701      	adds	r7, #1
 8007b36:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b3a:	42bc      	cmp	r4, r7
 8007b3c:	f84e 1b04 	str.w	r1, [lr], #4
 8007b40:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8007b44:	dcec      	bgt.n	8007b20 <__multadd+0x10>
 8007b46:	b13b      	cbz	r3, 8007b58 <__multadd+0x48>
 8007b48:	68aa      	ldr	r2, [r5, #8]
 8007b4a:	4294      	cmp	r4, r2
 8007b4c:	da07      	bge.n	8007b5e <__multadd+0x4e>
 8007b4e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8007b52:	3401      	adds	r4, #1
 8007b54:	6153      	str	r3, [r2, #20]
 8007b56:	612c      	str	r4, [r5, #16]
 8007b58:	4628      	mov	r0, r5
 8007b5a:	b003      	add	sp, #12
 8007b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b5e:	6869      	ldr	r1, [r5, #4]
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	3101      	adds	r1, #1
 8007b64:	4630      	mov	r0, r6
 8007b66:	f7ff ffa3 	bl	8007ab0 <_Balloc>
 8007b6a:	692a      	ldr	r2, [r5, #16]
 8007b6c:	3202      	adds	r2, #2
 8007b6e:	f105 010c 	add.w	r1, r5, #12
 8007b72:	4607      	mov	r7, r0
 8007b74:	0092      	lsls	r2, r2, #2
 8007b76:	300c      	adds	r0, #12
 8007b78:	f7fa fdca 	bl	8002710 <memcpy>
 8007b7c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8007b7e:	6869      	ldr	r1, [r5, #4]
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8007b86:	6028      	str	r0, [r5, #0]
 8007b88:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8007b8c:	463d      	mov	r5, r7
 8007b8e:	e7de      	b.n	8007b4e <__multadd+0x3e>

08007b90 <__hi0bits>:
 8007b90:	0c03      	lsrs	r3, r0, #16
 8007b92:	041b      	lsls	r3, r3, #16
 8007b94:	b9b3      	cbnz	r3, 8007bc4 <__hi0bits+0x34>
 8007b96:	0400      	lsls	r0, r0, #16
 8007b98:	2310      	movs	r3, #16
 8007b9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b9e:	bf04      	itt	eq
 8007ba0:	0200      	lsleq	r0, r0, #8
 8007ba2:	3308      	addeq	r3, #8
 8007ba4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ba8:	bf04      	itt	eq
 8007baa:	0100      	lsleq	r0, r0, #4
 8007bac:	3304      	addeq	r3, #4
 8007bae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007bb2:	bf04      	itt	eq
 8007bb4:	0080      	lsleq	r0, r0, #2
 8007bb6:	3302      	addeq	r3, #2
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	db07      	blt.n	8007bcc <__hi0bits+0x3c>
 8007bbc:	0042      	lsls	r2, r0, #1
 8007bbe:	d403      	bmi.n	8007bc8 <__hi0bits+0x38>
 8007bc0:	2020      	movs	r0, #32
 8007bc2:	4770      	bx	lr
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	e7e8      	b.n	8007b9a <__hi0bits+0xa>
 8007bc8:	1c58      	adds	r0, r3, #1
 8007bca:	4770      	bx	lr
 8007bcc:	4618      	mov	r0, r3
 8007bce:	4770      	bx	lr

08007bd0 <__lo0bits>:
 8007bd0:	6803      	ldr	r3, [r0, #0]
 8007bd2:	f013 0207 	ands.w	r2, r3, #7
 8007bd6:	d007      	beq.n	8007be8 <__lo0bits+0x18>
 8007bd8:	07d9      	lsls	r1, r3, #31
 8007bda:	d420      	bmi.n	8007c1e <__lo0bits+0x4e>
 8007bdc:	079a      	lsls	r2, r3, #30
 8007bde:	d420      	bmi.n	8007c22 <__lo0bits+0x52>
 8007be0:	089b      	lsrs	r3, r3, #2
 8007be2:	6003      	str	r3, [r0, #0]
 8007be4:	2002      	movs	r0, #2
 8007be6:	4770      	bx	lr
 8007be8:	b299      	uxth	r1, r3
 8007bea:	b909      	cbnz	r1, 8007bf0 <__lo0bits+0x20>
 8007bec:	0c1b      	lsrs	r3, r3, #16
 8007bee:	2210      	movs	r2, #16
 8007bf0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007bf4:	bf04      	itt	eq
 8007bf6:	0a1b      	lsreq	r3, r3, #8
 8007bf8:	3208      	addeq	r2, #8
 8007bfa:	0719      	lsls	r1, r3, #28
 8007bfc:	bf04      	itt	eq
 8007bfe:	091b      	lsreq	r3, r3, #4
 8007c00:	3204      	addeq	r2, #4
 8007c02:	0799      	lsls	r1, r3, #30
 8007c04:	bf04      	itt	eq
 8007c06:	089b      	lsreq	r3, r3, #2
 8007c08:	3202      	addeq	r2, #2
 8007c0a:	07d9      	lsls	r1, r3, #31
 8007c0c:	d404      	bmi.n	8007c18 <__lo0bits+0x48>
 8007c0e:	085b      	lsrs	r3, r3, #1
 8007c10:	d101      	bne.n	8007c16 <__lo0bits+0x46>
 8007c12:	2020      	movs	r0, #32
 8007c14:	4770      	bx	lr
 8007c16:	3201      	adds	r2, #1
 8007c18:	6003      	str	r3, [r0, #0]
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	4770      	bx	lr
 8007c1e:	2000      	movs	r0, #0
 8007c20:	4770      	bx	lr
 8007c22:	085b      	lsrs	r3, r3, #1
 8007c24:	6003      	str	r3, [r0, #0]
 8007c26:	2001      	movs	r0, #1
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop

08007c2c <__i2b>:
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	460c      	mov	r4, r1
 8007c30:	2101      	movs	r1, #1
 8007c32:	f7ff ff3d 	bl	8007ab0 <_Balloc>
 8007c36:	2201      	movs	r2, #1
 8007c38:	6144      	str	r4, [r0, #20]
 8007c3a:	6102      	str	r2, [r0, #16]
 8007c3c:	bd10      	pop	{r4, pc}
 8007c3e:	bf00      	nop

08007c40 <__multiply>:
 8007c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c44:	690d      	ldr	r5, [r1, #16]
 8007c46:	6917      	ldr	r7, [r2, #16]
 8007c48:	42bd      	cmp	r5, r7
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	4616      	mov	r6, r2
 8007c50:	da04      	bge.n	8007c5c <__multiply+0x1c>
 8007c52:	462a      	mov	r2, r5
 8007c54:	4634      	mov	r4, r6
 8007c56:	463d      	mov	r5, r7
 8007c58:	460e      	mov	r6, r1
 8007c5a:	4617      	mov	r7, r2
 8007c5c:	68a3      	ldr	r3, [r4, #8]
 8007c5e:	6861      	ldr	r1, [r4, #4]
 8007c60:	eb05 0807 	add.w	r8, r5, r7
 8007c64:	4598      	cmp	r8, r3
 8007c66:	bfc8      	it	gt
 8007c68:	3101      	addgt	r1, #1
 8007c6a:	f7ff ff21 	bl	8007ab0 <_Balloc>
 8007c6e:	f100 0c14 	add.w	ip, r0, #20
 8007c72:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8007c76:	45cc      	cmp	ip, r9
 8007c78:	9000      	str	r0, [sp, #0]
 8007c7a:	d205      	bcs.n	8007c88 <__multiply+0x48>
 8007c7c:	4663      	mov	r3, ip
 8007c7e:	2100      	movs	r1, #0
 8007c80:	f843 1b04 	str.w	r1, [r3], #4
 8007c84:	4599      	cmp	r9, r3
 8007c86:	d8fb      	bhi.n	8007c80 <__multiply+0x40>
 8007c88:	f106 0214 	add.w	r2, r6, #20
 8007c8c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8007c90:	f104 0314 	add.w	r3, r4, #20
 8007c94:	4552      	cmp	r2, sl
 8007c96:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 8007c9a:	d254      	bcs.n	8007d46 <__multiply+0x106>
 8007c9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ca0:	4699      	mov	r9, r3
 8007ca2:	f852 3b04 	ldr.w	r3, [r2], #4
 8007ca6:	fa1f fb83 	uxth.w	fp, r3
 8007caa:	f1bb 0f00 	cmp.w	fp, #0
 8007cae:	d020      	beq.n	8007cf2 <__multiply+0xb2>
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	464f      	mov	r7, r9
 8007cb4:	4666      	mov	r6, ip
 8007cb6:	4605      	mov	r5, r0
 8007cb8:	e000      	b.n	8007cbc <__multiply+0x7c>
 8007cba:	461e      	mov	r6, r3
 8007cbc:	f857 4b04 	ldr.w	r4, [r7], #4
 8007cc0:	6830      	ldr	r0, [r6, #0]
 8007cc2:	b2a1      	uxth	r1, r4
 8007cc4:	b283      	uxth	r3, r0
 8007cc6:	fb0b 3101 	mla	r1, fp, r1, r3
 8007cca:	0c24      	lsrs	r4, r4, #16
 8007ccc:	0c00      	lsrs	r0, r0, #16
 8007cce:	194b      	adds	r3, r1, r5
 8007cd0:	fb0b 0004 	mla	r0, fp, r4, r0
 8007cd4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8007cd8:	b299      	uxth	r1, r3
 8007cda:	4633      	mov	r3, r6
 8007cdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ce0:	45be      	cmp	lr, r7
 8007ce2:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8007ce6:	f843 1b04 	str.w	r1, [r3], #4
 8007cea:	d8e6      	bhi.n	8007cba <__multiply+0x7a>
 8007cec:	6075      	str	r5, [r6, #4]
 8007cee:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8007cf2:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8007cf6:	d020      	beq.n	8007d3a <__multiply+0xfa>
 8007cf8:	f8dc 3000 	ldr.w	r3, [ip]
 8007cfc:	4667      	mov	r7, ip
 8007cfe:	4618      	mov	r0, r3
 8007d00:	464d      	mov	r5, r9
 8007d02:	2100      	movs	r1, #0
 8007d04:	e000      	b.n	8007d08 <__multiply+0xc8>
 8007d06:	4637      	mov	r7, r6
 8007d08:	882c      	ldrh	r4, [r5, #0]
 8007d0a:	0c00      	lsrs	r0, r0, #16
 8007d0c:	fb0b 0004 	mla	r0, fp, r4, r0
 8007d10:	4401      	add	r1, r0
 8007d12:	b29c      	uxth	r4, r3
 8007d14:	463e      	mov	r6, r7
 8007d16:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8007d1a:	f846 3b04 	str.w	r3, [r6], #4
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f855 4b04 	ldr.w	r4, [r5], #4
 8007d24:	b283      	uxth	r3, r0
 8007d26:	0c24      	lsrs	r4, r4, #16
 8007d28:	fb0b 3404 	mla	r4, fp, r4, r3
 8007d2c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8007d30:	45ae      	cmp	lr, r5
 8007d32:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8007d36:	d8e6      	bhi.n	8007d06 <__multiply+0xc6>
 8007d38:	607b      	str	r3, [r7, #4]
 8007d3a:	4592      	cmp	sl, r2
 8007d3c:	f10c 0c04 	add.w	ip, ip, #4
 8007d40:	d8af      	bhi.n	8007ca2 <__multiply+0x62>
 8007d42:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007d46:	f1b8 0f00 	cmp.w	r8, #0
 8007d4a:	dd0b      	ble.n	8007d64 <__multiply+0x124>
 8007d4c:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8007d50:	f1a9 0904 	sub.w	r9, r9, #4
 8007d54:	b11b      	cbz	r3, 8007d5e <__multiply+0x11e>
 8007d56:	e005      	b.n	8007d64 <__multiply+0x124>
 8007d58:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8007d5c:	b913      	cbnz	r3, 8007d64 <__multiply+0x124>
 8007d5e:	f1b8 0801 	subs.w	r8, r8, #1
 8007d62:	d1f9      	bne.n	8007d58 <__multiply+0x118>
 8007d64:	9800      	ldr	r0, [sp, #0]
 8007d66:	f8c0 8010 	str.w	r8, [r0, #16]
 8007d6a:	b003      	add	sp, #12
 8007d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d70 <__pow5mult>:
 8007d70:	f012 0303 	ands.w	r3, r2, #3
 8007d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d78:	4614      	mov	r4, r2
 8007d7a:	4607      	mov	r7, r0
 8007d7c:	d12e      	bne.n	8007ddc <__pow5mult+0x6c>
 8007d7e:	460e      	mov	r6, r1
 8007d80:	10a4      	asrs	r4, r4, #2
 8007d82:	d01c      	beq.n	8007dbe <__pow5mult+0x4e>
 8007d84:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8007d86:	b395      	cbz	r5, 8007dee <__pow5mult+0x7e>
 8007d88:	07e3      	lsls	r3, r4, #31
 8007d8a:	f04f 0800 	mov.w	r8, #0
 8007d8e:	d406      	bmi.n	8007d9e <__pow5mult+0x2e>
 8007d90:	1064      	asrs	r4, r4, #1
 8007d92:	d014      	beq.n	8007dbe <__pow5mult+0x4e>
 8007d94:	6828      	ldr	r0, [r5, #0]
 8007d96:	b1a8      	cbz	r0, 8007dc4 <__pow5mult+0x54>
 8007d98:	4605      	mov	r5, r0
 8007d9a:	07e3      	lsls	r3, r4, #31
 8007d9c:	d5f8      	bpl.n	8007d90 <__pow5mult+0x20>
 8007d9e:	462a      	mov	r2, r5
 8007da0:	4631      	mov	r1, r6
 8007da2:	4638      	mov	r0, r7
 8007da4:	f7ff ff4c 	bl	8007c40 <__multiply>
 8007da8:	b1b6      	cbz	r6, 8007dd8 <__pow5mult+0x68>
 8007daa:	6872      	ldr	r2, [r6, #4]
 8007dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dae:	1064      	asrs	r4, r4, #1
 8007db0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007db4:	6031      	str	r1, [r6, #0]
 8007db6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8007dba:	4606      	mov	r6, r0
 8007dbc:	d1ea      	bne.n	8007d94 <__pow5mult+0x24>
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc4:	462a      	mov	r2, r5
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	4638      	mov	r0, r7
 8007dca:	f7ff ff39 	bl	8007c40 <__multiply>
 8007dce:	6028      	str	r0, [r5, #0]
 8007dd0:	f8c0 8000 	str.w	r8, [r0]
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	e7e0      	b.n	8007d9a <__pow5mult+0x2a>
 8007dd8:	4606      	mov	r6, r0
 8007dda:	e7d9      	b.n	8007d90 <__pow5mult+0x20>
 8007ddc:	1e5a      	subs	r2, r3, #1
 8007dde:	4d0b      	ldr	r5, [pc, #44]	; (8007e0c <__pow5mult+0x9c>)
 8007de0:	2300      	movs	r3, #0
 8007de2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8007de6:	f7ff fe93 	bl	8007b10 <__multadd>
 8007dea:	4606      	mov	r6, r0
 8007dec:	e7c8      	b.n	8007d80 <__pow5mult+0x10>
 8007dee:	2101      	movs	r1, #1
 8007df0:	4638      	mov	r0, r7
 8007df2:	f7ff fe5d 	bl	8007ab0 <_Balloc>
 8007df6:	f240 2171 	movw	r1, #625	; 0x271
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	6141      	str	r1, [r0, #20]
 8007e00:	6102      	str	r2, [r0, #16]
 8007e02:	4605      	mov	r5, r0
 8007e04:	64b8      	str	r0, [r7, #72]	; 0x48
 8007e06:	6003      	str	r3, [r0, #0]
 8007e08:	e7be      	b.n	8007d88 <__pow5mult+0x18>
 8007e0a:	bf00      	nop
 8007e0c:	08009ac8 	.word	0x08009ac8

08007e10 <__lshift>:
 8007e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e14:	4691      	mov	r9, r2
 8007e16:	690a      	ldr	r2, [r1, #16]
 8007e18:	688b      	ldr	r3, [r1, #8]
 8007e1a:	ea4f 1469 	mov.w	r4, r9, asr #5
 8007e1e:	eb04 0802 	add.w	r8, r4, r2
 8007e22:	f108 0501 	add.w	r5, r8, #1
 8007e26:	429d      	cmp	r5, r3
 8007e28:	460e      	mov	r6, r1
 8007e2a:	4682      	mov	sl, r0
 8007e2c:	6849      	ldr	r1, [r1, #4]
 8007e2e:	dd04      	ble.n	8007e3a <__lshift+0x2a>
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	429d      	cmp	r5, r3
 8007e34:	f101 0101 	add.w	r1, r1, #1
 8007e38:	dcfa      	bgt.n	8007e30 <__lshift+0x20>
 8007e3a:	4650      	mov	r0, sl
 8007e3c:	f7ff fe38 	bl	8007ab0 <_Balloc>
 8007e40:	2c00      	cmp	r4, #0
 8007e42:	f100 0214 	add.w	r2, r0, #20
 8007e46:	dd38      	ble.n	8007eba <__lshift+0xaa>
 8007e48:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	f842 1b04 	str.w	r1, [r2], #4
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d1fb      	bne.n	8007e4e <__lshift+0x3e>
 8007e56:	6934      	ldr	r4, [r6, #16]
 8007e58:	f106 0114 	add.w	r1, r6, #20
 8007e5c:	f019 091f 	ands.w	r9, r9, #31
 8007e60:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8007e64:	d021      	beq.n	8007eaa <__lshift+0x9a>
 8007e66:	f1c9 0220 	rsb	r2, r9, #32
 8007e6a:	2400      	movs	r4, #0
 8007e6c:	680f      	ldr	r7, [r1, #0]
 8007e6e:	fa07 fc09 	lsl.w	ip, r7, r9
 8007e72:	ea4c 0404 	orr.w	r4, ip, r4
 8007e76:	469c      	mov	ip, r3
 8007e78:	f843 4b04 	str.w	r4, [r3], #4
 8007e7c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007e80:	458e      	cmp	lr, r1
 8007e82:	fa24 f402 	lsr.w	r4, r4, r2
 8007e86:	d8f1      	bhi.n	8007e6c <__lshift+0x5c>
 8007e88:	f8cc 4004 	str.w	r4, [ip, #4]
 8007e8c:	b10c      	cbz	r4, 8007e92 <__lshift+0x82>
 8007e8e:	f108 0502 	add.w	r5, r8, #2
 8007e92:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8007e96:	6872      	ldr	r2, [r6, #4]
 8007e98:	3d01      	subs	r5, #1
 8007e9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e9e:	6105      	str	r5, [r0, #16]
 8007ea0:	6031      	str	r1, [r6, #0]
 8007ea2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8007ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eaa:	3b04      	subs	r3, #4
 8007eac:	f851 2b04 	ldr.w	r2, [r1], #4
 8007eb0:	f843 2f04 	str.w	r2, [r3, #4]!
 8007eb4:	458e      	cmp	lr, r1
 8007eb6:	d8f9      	bhi.n	8007eac <__lshift+0x9c>
 8007eb8:	e7eb      	b.n	8007e92 <__lshift+0x82>
 8007eba:	4613      	mov	r3, r2
 8007ebc:	e7cb      	b.n	8007e56 <__lshift+0x46>
 8007ebe:	bf00      	nop

08007ec0 <__mcmp>:
 8007ec0:	6902      	ldr	r2, [r0, #16]
 8007ec2:	690b      	ldr	r3, [r1, #16]
 8007ec4:	1ad2      	subs	r2, r2, r3
 8007ec6:	d113      	bne.n	8007ef0 <__mcmp+0x30>
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	3014      	adds	r0, #20
 8007ecc:	3114      	adds	r1, #20
 8007ece:	4419      	add	r1, r3
 8007ed0:	b410      	push	{r4}
 8007ed2:	4403      	add	r3, r0
 8007ed4:	e001      	b.n	8007eda <__mcmp+0x1a>
 8007ed6:	4298      	cmp	r0, r3
 8007ed8:	d20c      	bcs.n	8007ef4 <__mcmp+0x34>
 8007eda:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007ede:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ee2:	4294      	cmp	r4, r2
 8007ee4:	d0f7      	beq.n	8007ed6 <__mcmp+0x16>
 8007ee6:	d309      	bcc.n	8007efc <__mcmp+0x3c>
 8007ee8:	2001      	movs	r0, #1
 8007eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4770      	bx	lr
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	f04f 30ff 	mov.w	r0, #4294967295
 8007f00:	e7f3      	b.n	8007eea <__mcmp+0x2a>
 8007f02:	bf00      	nop

08007f04 <__mdiff>:
 8007f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f08:	690b      	ldr	r3, [r1, #16]
 8007f0a:	460f      	mov	r7, r1
 8007f0c:	6911      	ldr	r1, [r2, #16]
 8007f0e:	1a5b      	subs	r3, r3, r1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	4690      	mov	r8, r2
 8007f14:	d117      	bne.n	8007f46 <__mdiff+0x42>
 8007f16:	0089      	lsls	r1, r1, #2
 8007f18:	f107 0214 	add.w	r2, r7, #20
 8007f1c:	f108 0514 	add.w	r5, r8, #20
 8007f20:	1853      	adds	r3, r2, r1
 8007f22:	4429      	add	r1, r5
 8007f24:	e001      	b.n	8007f2a <__mdiff+0x26>
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d25e      	bcs.n	8007fe8 <__mdiff+0xe4>
 8007f2a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 8007f2e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f32:	42a6      	cmp	r6, r4
 8007f34:	d0f7      	beq.n	8007f26 <__mdiff+0x22>
 8007f36:	d260      	bcs.n	8007ffa <__mdiff+0xf6>
 8007f38:	463b      	mov	r3, r7
 8007f3a:	4614      	mov	r4, r2
 8007f3c:	4647      	mov	r7, r8
 8007f3e:	f04f 0901 	mov.w	r9, #1
 8007f42:	4698      	mov	r8, r3
 8007f44:	e006      	b.n	8007f54 <__mdiff+0x50>
 8007f46:	db5d      	blt.n	8008004 <__mdiff+0x100>
 8007f48:	f107 0514 	add.w	r5, r7, #20
 8007f4c:	f102 0414 	add.w	r4, r2, #20
 8007f50:	f04f 0900 	mov.w	r9, #0
 8007f54:	6879      	ldr	r1, [r7, #4]
 8007f56:	f7ff fdab 	bl	8007ab0 <_Balloc>
 8007f5a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007f5e:	693e      	ldr	r6, [r7, #16]
 8007f60:	f8c0 900c 	str.w	r9, [r0, #12]
 8007f64:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8007f68:	46a6      	mov	lr, r4
 8007f6a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8007f6e:	f100 0414 	add.w	r4, r0, #20
 8007f72:	2300      	movs	r3, #0
 8007f74:	f85e 1b04 	ldr.w	r1, [lr], #4
 8007f78:	f855 8b04 	ldr.w	r8, [r5], #4
 8007f7c:	b28a      	uxth	r2, r1
 8007f7e:	fa13 f388 	uxtah	r3, r3, r8
 8007f82:	0c09      	lsrs	r1, r1, #16
 8007f84:	1a9a      	subs	r2, r3, r2
 8007f86:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 8007f8a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8007f8e:	b292      	uxth	r2, r2
 8007f90:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007f94:	45f4      	cmp	ip, lr
 8007f96:	f844 2b04 	str.w	r2, [r4], #4
 8007f9a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8007f9e:	d8e9      	bhi.n	8007f74 <__mdiff+0x70>
 8007fa0:	42af      	cmp	r7, r5
 8007fa2:	d917      	bls.n	8007fd4 <__mdiff+0xd0>
 8007fa4:	46a4      	mov	ip, r4
 8007fa6:	4629      	mov	r1, r5
 8007fa8:	f851 eb04 	ldr.w	lr, [r1], #4
 8007fac:	fa13 f28e 	uxtah	r2, r3, lr
 8007fb0:	1413      	asrs	r3, r2, #16
 8007fb2:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 8007fb6:	b292      	uxth	r2, r2
 8007fb8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007fbc:	428f      	cmp	r7, r1
 8007fbe:	f84c 2b04 	str.w	r2, [ip], #4
 8007fc2:	ea4f 4323 	mov.w	r3, r3, asr #16
 8007fc6:	d8ef      	bhi.n	8007fa8 <__mdiff+0xa4>
 8007fc8:	43ed      	mvns	r5, r5
 8007fca:	443d      	add	r5, r7
 8007fcc:	f025 0503 	bic.w	r5, r5, #3
 8007fd0:	3504      	adds	r5, #4
 8007fd2:	442c      	add	r4, r5
 8007fd4:	3c04      	subs	r4, #4
 8007fd6:	b922      	cbnz	r2, 8007fe2 <__mdiff+0xde>
 8007fd8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8007fdc:	3e01      	subs	r6, #1
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0fa      	beq.n	8007fd8 <__mdiff+0xd4>
 8007fe2:	6106      	str	r6, [r0, #16]
 8007fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fe8:	2100      	movs	r1, #0
 8007fea:	f7ff fd61 	bl	8007ab0 <_Balloc>
 8007fee:	2201      	movs	r2, #1
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	6102      	str	r2, [r0, #16]
 8007ff4:	6143      	str	r3, [r0, #20]
 8007ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffa:	462c      	mov	r4, r5
 8007ffc:	f04f 0900 	mov.w	r9, #0
 8008000:	4615      	mov	r5, r2
 8008002:	e7a7      	b.n	8007f54 <__mdiff+0x50>
 8008004:	463b      	mov	r3, r7
 8008006:	f107 0414 	add.w	r4, r7, #20
 800800a:	f108 0514 	add.w	r5, r8, #20
 800800e:	4647      	mov	r7, r8
 8008010:	f04f 0901 	mov.w	r9, #1
 8008014:	4698      	mov	r8, r3
 8008016:	e79d      	b.n	8007f54 <__mdiff+0x50>

08008018 <__d2b>:
 8008018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800801c:	b083      	sub	sp, #12
 800801e:	2101      	movs	r1, #1
 8008020:	461c      	mov	r4, r3
 8008022:	f3c3 550a 	ubfx	r5, r3, #20, #11
 8008026:	4617      	mov	r7, r2
 8008028:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800802a:	f7ff fd41 	bl	8007ab0 <_Balloc>
 800802e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008032:	4681      	mov	r9, r0
 8008034:	b10d      	cbz	r5, 800803a <__d2b+0x22>
 8008036:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800803a:	9401      	str	r4, [sp, #4]
 800803c:	b31f      	cbz	r7, 8008086 <__d2b+0x6e>
 800803e:	a802      	add	r0, sp, #8
 8008040:	f840 7d08 	str.w	r7, [r0, #-8]!
 8008044:	f7ff fdc4 	bl	8007bd0 <__lo0bits>
 8008048:	2800      	cmp	r0, #0
 800804a:	d135      	bne.n	80080b8 <__d2b+0xa0>
 800804c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8008050:	f8c9 2014 	str.w	r2, [r9, #20]
 8008054:	2b00      	cmp	r3, #0
 8008056:	bf0c      	ite	eq
 8008058:	2101      	moveq	r1, #1
 800805a:	2102      	movne	r1, #2
 800805c:	f8c9 3018 	str.w	r3, [r9, #24]
 8008060:	f8c9 1010 	str.w	r1, [r9, #16]
 8008064:	b9dd      	cbnz	r5, 800809e <__d2b+0x86>
 8008066:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 800806a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800806e:	6030      	str	r0, [r6, #0]
 8008070:	6918      	ldr	r0, [r3, #16]
 8008072:	f7ff fd8d 	bl	8007b90 <__hi0bits>
 8008076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008078:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800807c:	6018      	str	r0, [r3, #0]
 800807e:	4648      	mov	r0, r9
 8008080:	b003      	add	sp, #12
 8008082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008086:	a801      	add	r0, sp, #4
 8008088:	f7ff fda2 	bl	8007bd0 <__lo0bits>
 800808c:	9b01      	ldr	r3, [sp, #4]
 800808e:	f8c9 3014 	str.w	r3, [r9, #20]
 8008092:	2101      	movs	r1, #1
 8008094:	3020      	adds	r0, #32
 8008096:	f8c9 1010 	str.w	r1, [r9, #16]
 800809a:	2d00      	cmp	r5, #0
 800809c:	d0e3      	beq.n	8008066 <__d2b+0x4e>
 800809e:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 80080a2:	eb08 0300 	add.w	r3, r8, r0
 80080a6:	6033      	str	r3, [r6, #0]
 80080a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080ae:	6018      	str	r0, [r3, #0]
 80080b0:	4648      	mov	r0, r9
 80080b2:	b003      	add	sp, #12
 80080b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080b8:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80080bc:	f1c0 0120 	rsb	r1, r0, #32
 80080c0:	fa03 f101 	lsl.w	r1, r3, r1
 80080c4:	430a      	orrs	r2, r1
 80080c6:	40c3      	lsrs	r3, r0
 80080c8:	9301      	str	r3, [sp, #4]
 80080ca:	f8c9 2014 	str.w	r2, [r9, #20]
 80080ce:	e7c1      	b.n	8008054 <__d2b+0x3c>

080080d0 <_realloc_r>:
 80080d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	4617      	mov	r7, r2
 80080d6:	b083      	sub	sp, #12
 80080d8:	2900      	cmp	r1, #0
 80080da:	f000 80c1 	beq.w	8008260 <_realloc_r+0x190>
 80080de:	460e      	mov	r6, r1
 80080e0:	4681      	mov	r9, r0
 80080e2:	f107 050b 	add.w	r5, r7, #11
 80080e6:	f7ff fcdf 	bl	8007aa8 <__malloc_lock>
 80080ea:	f856 ec04 	ldr.w	lr, [r6, #-4]
 80080ee:	2d16      	cmp	r5, #22
 80080f0:	f02e 0403 	bic.w	r4, lr, #3
 80080f4:	f1a6 0808 	sub.w	r8, r6, #8
 80080f8:	d840      	bhi.n	800817c <_realloc_r+0xac>
 80080fa:	2210      	movs	r2, #16
 80080fc:	4615      	mov	r5, r2
 80080fe:	42af      	cmp	r7, r5
 8008100:	d841      	bhi.n	8008186 <_realloc_r+0xb6>
 8008102:	4294      	cmp	r4, r2
 8008104:	da75      	bge.n	80081f2 <_realloc_r+0x122>
 8008106:	4bc9      	ldr	r3, [pc, #804]	; (800842c <_realloc_r+0x35c>)
 8008108:	6899      	ldr	r1, [r3, #8]
 800810a:	eb08 0004 	add.w	r0, r8, r4
 800810e:	4288      	cmp	r0, r1
 8008110:	6841      	ldr	r1, [r0, #4]
 8008112:	f000 80d9 	beq.w	80082c8 <_realloc_r+0x1f8>
 8008116:	f021 0301 	bic.w	r3, r1, #1
 800811a:	4403      	add	r3, r0
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	07db      	lsls	r3, r3, #31
 8008120:	d57d      	bpl.n	800821e <_realloc_r+0x14e>
 8008122:	f01e 0f01 	tst.w	lr, #1
 8008126:	d035      	beq.n	8008194 <_realloc_r+0xc4>
 8008128:	4639      	mov	r1, r7
 800812a:	4648      	mov	r0, r9
 800812c:	f7ff f950 	bl	80073d0 <_malloc_r>
 8008130:	4607      	mov	r7, r0
 8008132:	b1e0      	cbz	r0, 800816e <_realloc_r+0x9e>
 8008134:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008138:	f023 0301 	bic.w	r3, r3, #1
 800813c:	4443      	add	r3, r8
 800813e:	f1a0 0208 	sub.w	r2, r0, #8
 8008142:	429a      	cmp	r2, r3
 8008144:	f000 8144 	beq.w	80083d0 <_realloc_r+0x300>
 8008148:	1f22      	subs	r2, r4, #4
 800814a:	2a24      	cmp	r2, #36	; 0x24
 800814c:	f200 8131 	bhi.w	80083b2 <_realloc_r+0x2e2>
 8008150:	2a13      	cmp	r2, #19
 8008152:	f200 8104 	bhi.w	800835e <_realloc_r+0x28e>
 8008156:	4603      	mov	r3, r0
 8008158:	4632      	mov	r2, r6
 800815a:	6811      	ldr	r1, [r2, #0]
 800815c:	6019      	str	r1, [r3, #0]
 800815e:	6851      	ldr	r1, [r2, #4]
 8008160:	6059      	str	r1, [r3, #4]
 8008162:	6892      	ldr	r2, [r2, #8]
 8008164:	609a      	str	r2, [r3, #8]
 8008166:	4631      	mov	r1, r6
 8008168:	4648      	mov	r0, r9
 800816a:	f7fe fe1b 	bl	8006da4 <_free_r>
 800816e:	4648      	mov	r0, r9
 8008170:	f7ff fc9c 	bl	8007aac <__malloc_unlock>
 8008174:	4638      	mov	r0, r7
 8008176:	b003      	add	sp, #12
 8008178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817c:	f025 0507 	bic.w	r5, r5, #7
 8008180:	2d00      	cmp	r5, #0
 8008182:	462a      	mov	r2, r5
 8008184:	dabb      	bge.n	80080fe <_realloc_r+0x2e>
 8008186:	230c      	movs	r3, #12
 8008188:	2000      	movs	r0, #0
 800818a:	f8c9 3000 	str.w	r3, [r9]
 800818e:	b003      	add	sp, #12
 8008190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008194:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8008198:	ebc3 0a08 	rsb	sl, r3, r8
 800819c:	f8da 3004 	ldr.w	r3, [sl, #4]
 80081a0:	f023 0c03 	bic.w	ip, r3, #3
 80081a4:	eb04 030c 	add.w	r3, r4, ip
 80081a8:	4293      	cmp	r3, r2
 80081aa:	dbbd      	blt.n	8008128 <_realloc_r+0x58>
 80081ac:	4657      	mov	r7, sl
 80081ae:	f8da 100c 	ldr.w	r1, [sl, #12]
 80081b2:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80081b6:	1f22      	subs	r2, r4, #4
 80081b8:	2a24      	cmp	r2, #36	; 0x24
 80081ba:	60c1      	str	r1, [r0, #12]
 80081bc:	6088      	str	r0, [r1, #8]
 80081be:	f200 8117 	bhi.w	80083f0 <_realloc_r+0x320>
 80081c2:	2a13      	cmp	r2, #19
 80081c4:	f240 8112 	bls.w	80083ec <_realloc_r+0x31c>
 80081c8:	6831      	ldr	r1, [r6, #0]
 80081ca:	f8ca 1008 	str.w	r1, [sl, #8]
 80081ce:	6871      	ldr	r1, [r6, #4]
 80081d0:	f8ca 100c 	str.w	r1, [sl, #12]
 80081d4:	2a1b      	cmp	r2, #27
 80081d6:	f200 812b 	bhi.w	8008430 <_realloc_r+0x360>
 80081da:	3608      	adds	r6, #8
 80081dc:	f10a 0210 	add.w	r2, sl, #16
 80081e0:	6831      	ldr	r1, [r6, #0]
 80081e2:	6011      	str	r1, [r2, #0]
 80081e4:	6871      	ldr	r1, [r6, #4]
 80081e6:	6051      	str	r1, [r2, #4]
 80081e8:	68b1      	ldr	r1, [r6, #8]
 80081ea:	6091      	str	r1, [r2, #8]
 80081ec:	463e      	mov	r6, r7
 80081ee:	461c      	mov	r4, r3
 80081f0:	46d0      	mov	r8, sl
 80081f2:	1b63      	subs	r3, r4, r5
 80081f4:	2b0f      	cmp	r3, #15
 80081f6:	d81d      	bhi.n	8008234 <_realloc_r+0x164>
 80081f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	4323      	orrs	r3, r4
 8008202:	4444      	add	r4, r8
 8008204:	f8c8 3004 	str.w	r3, [r8, #4]
 8008208:	6863      	ldr	r3, [r4, #4]
 800820a:	f043 0301 	orr.w	r3, r3, #1
 800820e:	6063      	str	r3, [r4, #4]
 8008210:	4648      	mov	r0, r9
 8008212:	f7ff fc4b 	bl	8007aac <__malloc_unlock>
 8008216:	4630      	mov	r0, r6
 8008218:	b003      	add	sp, #12
 800821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821e:	f021 0103 	bic.w	r1, r1, #3
 8008222:	4421      	add	r1, r4
 8008224:	4291      	cmp	r1, r2
 8008226:	db21      	blt.n	800826c <_realloc_r+0x19c>
 8008228:	68c3      	ldr	r3, [r0, #12]
 800822a:	6882      	ldr	r2, [r0, #8]
 800822c:	460c      	mov	r4, r1
 800822e:	60d3      	str	r3, [r2, #12]
 8008230:	609a      	str	r2, [r3, #8]
 8008232:	e7de      	b.n	80081f2 <_realloc_r+0x122>
 8008234:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008238:	eb08 0105 	add.w	r1, r8, r5
 800823c:	f002 0201 	and.w	r2, r2, #1
 8008240:	4315      	orrs	r5, r2
 8008242:	f043 0201 	orr.w	r2, r3, #1
 8008246:	440b      	add	r3, r1
 8008248:	f8c8 5004 	str.w	r5, [r8, #4]
 800824c:	604a      	str	r2, [r1, #4]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	f042 0201 	orr.w	r2, r2, #1
 8008254:	3108      	adds	r1, #8
 8008256:	605a      	str	r2, [r3, #4]
 8008258:	4648      	mov	r0, r9
 800825a:	f7fe fda3 	bl	8006da4 <_free_r>
 800825e:	e7d7      	b.n	8008210 <_realloc_r+0x140>
 8008260:	4611      	mov	r1, r2
 8008262:	b003      	add	sp, #12
 8008264:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	f7ff b8b2 	b.w	80073d0 <_malloc_r>
 800826c:	f01e 0f01 	tst.w	lr, #1
 8008270:	f47f af5a 	bne.w	8008128 <_realloc_r+0x58>
 8008274:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8008278:	ebc3 0a08 	rsb	sl, r3, r8
 800827c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008280:	f023 0c03 	bic.w	ip, r3, #3
 8008284:	eb01 0e0c 	add.w	lr, r1, ip
 8008288:	4596      	cmp	lr, r2
 800828a:	db8b      	blt.n	80081a4 <_realloc_r+0xd4>
 800828c:	68c3      	ldr	r3, [r0, #12]
 800828e:	6882      	ldr	r2, [r0, #8]
 8008290:	4657      	mov	r7, sl
 8008292:	60d3      	str	r3, [r2, #12]
 8008294:	609a      	str	r2, [r3, #8]
 8008296:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800829a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800829e:	60cb      	str	r3, [r1, #12]
 80082a0:	1f22      	subs	r2, r4, #4
 80082a2:	2a24      	cmp	r2, #36	; 0x24
 80082a4:	6099      	str	r1, [r3, #8]
 80082a6:	f200 8099 	bhi.w	80083dc <_realloc_r+0x30c>
 80082aa:	2a13      	cmp	r2, #19
 80082ac:	d962      	bls.n	8008374 <_realloc_r+0x2a4>
 80082ae:	6833      	ldr	r3, [r6, #0]
 80082b0:	f8ca 3008 	str.w	r3, [sl, #8]
 80082b4:	6873      	ldr	r3, [r6, #4]
 80082b6:	f8ca 300c 	str.w	r3, [sl, #12]
 80082ba:	2a1b      	cmp	r2, #27
 80082bc:	f200 80a0 	bhi.w	8008400 <_realloc_r+0x330>
 80082c0:	3608      	adds	r6, #8
 80082c2:	f10a 0310 	add.w	r3, sl, #16
 80082c6:	e056      	b.n	8008376 <_realloc_r+0x2a6>
 80082c8:	f021 0b03 	bic.w	fp, r1, #3
 80082cc:	44a3      	add	fp, r4
 80082ce:	f105 0010 	add.w	r0, r5, #16
 80082d2:	4583      	cmp	fp, r0
 80082d4:	da59      	bge.n	800838a <_realloc_r+0x2ba>
 80082d6:	f01e 0f01 	tst.w	lr, #1
 80082da:	f47f af25 	bne.w	8008128 <_realloc_r+0x58>
 80082de:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80082e2:	ebc1 0a08 	rsb	sl, r1, r8
 80082e6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80082ea:	f021 0c03 	bic.w	ip, r1, #3
 80082ee:	44e3      	add	fp, ip
 80082f0:	4558      	cmp	r0, fp
 80082f2:	f73f af57 	bgt.w	80081a4 <_realloc_r+0xd4>
 80082f6:	4657      	mov	r7, sl
 80082f8:	f8da 100c 	ldr.w	r1, [sl, #12]
 80082fc:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8008300:	1f22      	subs	r2, r4, #4
 8008302:	2a24      	cmp	r2, #36	; 0x24
 8008304:	60c1      	str	r1, [r0, #12]
 8008306:	6088      	str	r0, [r1, #8]
 8008308:	f200 80b4 	bhi.w	8008474 <_realloc_r+0x3a4>
 800830c:	2a13      	cmp	r2, #19
 800830e:	f240 80a5 	bls.w	800845c <_realloc_r+0x38c>
 8008312:	6831      	ldr	r1, [r6, #0]
 8008314:	f8ca 1008 	str.w	r1, [sl, #8]
 8008318:	6871      	ldr	r1, [r6, #4]
 800831a:	f8ca 100c 	str.w	r1, [sl, #12]
 800831e:	2a1b      	cmp	r2, #27
 8008320:	f200 80af 	bhi.w	8008482 <_realloc_r+0x3b2>
 8008324:	3608      	adds	r6, #8
 8008326:	f10a 0210 	add.w	r2, sl, #16
 800832a:	6831      	ldr	r1, [r6, #0]
 800832c:	6011      	str	r1, [r2, #0]
 800832e:	6871      	ldr	r1, [r6, #4]
 8008330:	6051      	str	r1, [r2, #4]
 8008332:	68b1      	ldr	r1, [r6, #8]
 8008334:	6091      	str	r1, [r2, #8]
 8008336:	eb0a 0105 	add.w	r1, sl, r5
 800833a:	ebc5 020b 	rsb	r2, r5, fp
 800833e:	f042 0201 	orr.w	r2, r2, #1
 8008342:	6099      	str	r1, [r3, #8]
 8008344:	604a      	str	r2, [r1, #4]
 8008346:	f8da 3004 	ldr.w	r3, [sl, #4]
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	431d      	orrs	r5, r3
 8008350:	4648      	mov	r0, r9
 8008352:	f8ca 5004 	str.w	r5, [sl, #4]
 8008356:	f7ff fba9 	bl	8007aac <__malloc_unlock>
 800835a:	4638      	mov	r0, r7
 800835c:	e75c      	b.n	8008218 <_realloc_r+0x148>
 800835e:	6833      	ldr	r3, [r6, #0]
 8008360:	6003      	str	r3, [r0, #0]
 8008362:	6873      	ldr	r3, [r6, #4]
 8008364:	6043      	str	r3, [r0, #4]
 8008366:	2a1b      	cmp	r2, #27
 8008368:	d827      	bhi.n	80083ba <_realloc_r+0x2ea>
 800836a:	f100 0308 	add.w	r3, r0, #8
 800836e:	f106 0208 	add.w	r2, r6, #8
 8008372:	e6f2      	b.n	800815a <_realloc_r+0x8a>
 8008374:	463b      	mov	r3, r7
 8008376:	6832      	ldr	r2, [r6, #0]
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	6872      	ldr	r2, [r6, #4]
 800837c:	605a      	str	r2, [r3, #4]
 800837e:	68b2      	ldr	r2, [r6, #8]
 8008380:	609a      	str	r2, [r3, #8]
 8008382:	463e      	mov	r6, r7
 8008384:	4674      	mov	r4, lr
 8008386:	46d0      	mov	r8, sl
 8008388:	e733      	b.n	80081f2 <_realloc_r+0x122>
 800838a:	eb08 0105 	add.w	r1, r8, r5
 800838e:	ebc5 0b0b 	rsb	fp, r5, fp
 8008392:	f04b 0201 	orr.w	r2, fp, #1
 8008396:	6099      	str	r1, [r3, #8]
 8008398:	604a      	str	r2, [r1, #4]
 800839a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	431d      	orrs	r5, r3
 80083a4:	4648      	mov	r0, r9
 80083a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80083aa:	f7ff fb7f 	bl	8007aac <__malloc_unlock>
 80083ae:	4630      	mov	r0, r6
 80083b0:	e732      	b.n	8008218 <_realloc_r+0x148>
 80083b2:	4631      	mov	r1, r6
 80083b4:	f7ff fb14 	bl	80079e0 <memmove>
 80083b8:	e6d5      	b.n	8008166 <_realloc_r+0x96>
 80083ba:	68b3      	ldr	r3, [r6, #8]
 80083bc:	6083      	str	r3, [r0, #8]
 80083be:	68f3      	ldr	r3, [r6, #12]
 80083c0:	60c3      	str	r3, [r0, #12]
 80083c2:	2a24      	cmp	r2, #36	; 0x24
 80083c4:	d028      	beq.n	8008418 <_realloc_r+0x348>
 80083c6:	f100 0310 	add.w	r3, r0, #16
 80083ca:	f106 0210 	add.w	r2, r6, #16
 80083ce:	e6c4      	b.n	800815a <_realloc_r+0x8a>
 80083d0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80083d4:	f023 0303 	bic.w	r3, r3, #3
 80083d8:	441c      	add	r4, r3
 80083da:	e70a      	b.n	80081f2 <_realloc_r+0x122>
 80083dc:	4631      	mov	r1, r6
 80083de:	4638      	mov	r0, r7
 80083e0:	4674      	mov	r4, lr
 80083e2:	46d0      	mov	r8, sl
 80083e4:	f7ff fafc 	bl	80079e0 <memmove>
 80083e8:	463e      	mov	r6, r7
 80083ea:	e702      	b.n	80081f2 <_realloc_r+0x122>
 80083ec:	463a      	mov	r2, r7
 80083ee:	e6f7      	b.n	80081e0 <_realloc_r+0x110>
 80083f0:	4631      	mov	r1, r6
 80083f2:	4638      	mov	r0, r7
 80083f4:	461c      	mov	r4, r3
 80083f6:	46d0      	mov	r8, sl
 80083f8:	f7ff faf2 	bl	80079e0 <memmove>
 80083fc:	463e      	mov	r6, r7
 80083fe:	e6f8      	b.n	80081f2 <_realloc_r+0x122>
 8008400:	68b3      	ldr	r3, [r6, #8]
 8008402:	f8ca 3010 	str.w	r3, [sl, #16]
 8008406:	68f3      	ldr	r3, [r6, #12]
 8008408:	f8ca 3014 	str.w	r3, [sl, #20]
 800840c:	2a24      	cmp	r2, #36	; 0x24
 800840e:	d01b      	beq.n	8008448 <_realloc_r+0x378>
 8008410:	3610      	adds	r6, #16
 8008412:	f10a 0318 	add.w	r3, sl, #24
 8008416:	e7ae      	b.n	8008376 <_realloc_r+0x2a6>
 8008418:	6933      	ldr	r3, [r6, #16]
 800841a:	6103      	str	r3, [r0, #16]
 800841c:	6973      	ldr	r3, [r6, #20]
 800841e:	6143      	str	r3, [r0, #20]
 8008420:	f106 0218 	add.w	r2, r6, #24
 8008424:	f100 0318 	add.w	r3, r0, #24
 8008428:	e697      	b.n	800815a <_realloc_r+0x8a>
 800842a:	bf00      	nop
 800842c:	20000464 	.word	0x20000464
 8008430:	68b1      	ldr	r1, [r6, #8]
 8008432:	f8ca 1010 	str.w	r1, [sl, #16]
 8008436:	68f1      	ldr	r1, [r6, #12]
 8008438:	f8ca 1014 	str.w	r1, [sl, #20]
 800843c:	2a24      	cmp	r2, #36	; 0x24
 800843e:	d00f      	beq.n	8008460 <_realloc_r+0x390>
 8008440:	3610      	adds	r6, #16
 8008442:	f10a 0218 	add.w	r2, sl, #24
 8008446:	e6cb      	b.n	80081e0 <_realloc_r+0x110>
 8008448:	6933      	ldr	r3, [r6, #16]
 800844a:	f8ca 3018 	str.w	r3, [sl, #24]
 800844e:	6973      	ldr	r3, [r6, #20]
 8008450:	f8ca 301c 	str.w	r3, [sl, #28]
 8008454:	3618      	adds	r6, #24
 8008456:	f10a 0320 	add.w	r3, sl, #32
 800845a:	e78c      	b.n	8008376 <_realloc_r+0x2a6>
 800845c:	463a      	mov	r2, r7
 800845e:	e764      	b.n	800832a <_realloc_r+0x25a>
 8008460:	6932      	ldr	r2, [r6, #16]
 8008462:	f8ca 2018 	str.w	r2, [sl, #24]
 8008466:	6972      	ldr	r2, [r6, #20]
 8008468:	f8ca 201c 	str.w	r2, [sl, #28]
 800846c:	3618      	adds	r6, #24
 800846e:	f10a 0220 	add.w	r2, sl, #32
 8008472:	e6b5      	b.n	80081e0 <_realloc_r+0x110>
 8008474:	4631      	mov	r1, r6
 8008476:	4638      	mov	r0, r7
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	f7ff fab1 	bl	80079e0 <memmove>
 800847e:	9b01      	ldr	r3, [sp, #4]
 8008480:	e759      	b.n	8008336 <_realloc_r+0x266>
 8008482:	68b1      	ldr	r1, [r6, #8]
 8008484:	f8ca 1010 	str.w	r1, [sl, #16]
 8008488:	68f1      	ldr	r1, [r6, #12]
 800848a:	f8ca 1014 	str.w	r1, [sl, #20]
 800848e:	2a24      	cmp	r2, #36	; 0x24
 8008490:	d003      	beq.n	800849a <_realloc_r+0x3ca>
 8008492:	3610      	adds	r6, #16
 8008494:	f10a 0218 	add.w	r2, sl, #24
 8008498:	e747      	b.n	800832a <_realloc_r+0x25a>
 800849a:	6932      	ldr	r2, [r6, #16]
 800849c:	f8ca 2018 	str.w	r2, [sl, #24]
 80084a0:	6972      	ldr	r2, [r6, #20]
 80084a2:	f8ca 201c 	str.w	r2, [sl, #28]
 80084a6:	3618      	adds	r6, #24
 80084a8:	f10a 0220 	add.w	r2, sl, #32
 80084ac:	e73d      	b.n	800832a <_realloc_r+0x25a>
 80084ae:	bf00      	nop

080084b0 <_sbrk_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4c07      	ldr	r4, [pc, #28]	; (80084d0 <_sbrk_r+0x20>)
 80084b4:	2300      	movs	r3, #0
 80084b6:	4605      	mov	r5, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	6023      	str	r3, [r4, #0]
 80084bc:	f7f9 fa58 	bl	8001970 <_sbrk>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d000      	beq.n	80084c6 <_sbrk_r+0x16>
 80084c4:	bd38      	pop	{r3, r4, r5, pc}
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d0fb      	beq.n	80084c4 <_sbrk_r+0x14>
 80084cc:	602b      	str	r3, [r5, #0]
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
 80084d0:	20000a84 	.word	0x20000a84

080084d4 <__sread>:
 80084d4:	b510      	push	{r4, lr}
 80084d6:	460c      	mov	r4, r1
 80084d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084dc:	f000 fa5e 	bl	800899c <_read_r>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	db03      	blt.n	80084ec <__sread+0x18>
 80084e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80084e6:	4403      	add	r3, r0
 80084e8:	6523      	str	r3, [r4, #80]	; 0x50
 80084ea:	bd10      	pop	{r4, pc}
 80084ec:	89a3      	ldrh	r3, [r4, #12]
 80084ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084f2:	81a3      	strh	r3, [r4, #12]
 80084f4:	bd10      	pop	{r4, pc}
 80084f6:	bf00      	nop

080084f8 <__swrite>:
 80084f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084fc:	4616      	mov	r6, r2
 80084fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008502:	461f      	mov	r7, r3
 8008504:	05d3      	lsls	r3, r2, #23
 8008506:	460c      	mov	r4, r1
 8008508:	4605      	mov	r5, r0
 800850a:	d507      	bpl.n	800851c <__swrite+0x24>
 800850c:	2200      	movs	r2, #0
 800850e:	2302      	movs	r3, #2
 8008510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008514:	f000 fa16 	bl	8008944 <_lseek_r>
 8008518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800851c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008520:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008524:	81a2      	strh	r2, [r4, #12]
 8008526:	463b      	mov	r3, r7
 8008528:	4632      	mov	r2, r6
 800852a:	4628      	mov	r0, r5
 800852c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008530:	f000 b8da 	b.w	80086e8 <_write_r>

08008534 <__sseek>:
 8008534:	b510      	push	{r4, lr}
 8008536:	460c      	mov	r4, r1
 8008538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800853c:	f000 fa02 	bl	8008944 <_lseek_r>
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	1c42      	adds	r2, r0, #1
 8008544:	bf0e      	itee	eq
 8008546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800854a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800854e:	6520      	strne	r0, [r4, #80]	; 0x50
 8008550:	81a3      	strh	r3, [r4, #12]
 8008552:	bd10      	pop	{r4, pc}

08008554 <__sclose>:
 8008554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008558:	f000 b90c 	b.w	8008774 <_close_r>

0800855c <__ssprint_r>:
 800855c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008560:	6893      	ldr	r3, [r2, #8]
 8008562:	b083      	sub	sp, #12
 8008564:	4690      	mov	r8, r2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d072      	beq.n	8008650 <__ssprint_r+0xf4>
 800856a:	4683      	mov	fp, r0
 800856c:	f04f 0900 	mov.w	r9, #0
 8008570:	6816      	ldr	r6, [r2, #0]
 8008572:	6808      	ldr	r0, [r1, #0]
 8008574:	688b      	ldr	r3, [r1, #8]
 8008576:	460d      	mov	r5, r1
 8008578:	464c      	mov	r4, r9
 800857a:	2c00      	cmp	r4, #0
 800857c:	d045      	beq.n	800860a <__ssprint_r+0xae>
 800857e:	429c      	cmp	r4, r3
 8008580:	461f      	mov	r7, r3
 8008582:	469a      	mov	sl, r3
 8008584:	d346      	bcc.n	8008614 <__ssprint_r+0xb8>
 8008586:	89ab      	ldrh	r3, [r5, #12]
 8008588:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800858c:	d02d      	beq.n	80085ea <__ssprint_r+0x8e>
 800858e:	696f      	ldr	r7, [r5, #20]
 8008590:	6929      	ldr	r1, [r5, #16]
 8008592:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8008596:	ebc1 0a00 	rsb	sl, r1, r0
 800859a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800859e:	1c60      	adds	r0, r4, #1
 80085a0:	107f      	asrs	r7, r7, #1
 80085a2:	4450      	add	r0, sl
 80085a4:	42b8      	cmp	r0, r7
 80085a6:	463a      	mov	r2, r7
 80085a8:	bf84      	itt	hi
 80085aa:	4607      	movhi	r7, r0
 80085ac:	463a      	movhi	r2, r7
 80085ae:	055b      	lsls	r3, r3, #21
 80085b0:	d533      	bpl.n	800861a <__ssprint_r+0xbe>
 80085b2:	4611      	mov	r1, r2
 80085b4:	4658      	mov	r0, fp
 80085b6:	f7fe ff0b 	bl	80073d0 <_malloc_r>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d037      	beq.n	800862e <__ssprint_r+0xd2>
 80085be:	4652      	mov	r2, sl
 80085c0:	6929      	ldr	r1, [r5, #16]
 80085c2:	9001      	str	r0, [sp, #4]
 80085c4:	f7fa f8a4 	bl	8002710 <memcpy>
 80085c8:	89aa      	ldrh	r2, [r5, #12]
 80085ca:	9b01      	ldr	r3, [sp, #4]
 80085cc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80085d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085d4:	81aa      	strh	r2, [r5, #12]
 80085d6:	ebca 0207 	rsb	r2, sl, r7
 80085da:	eb03 000a 	add.w	r0, r3, sl
 80085de:	616f      	str	r7, [r5, #20]
 80085e0:	612b      	str	r3, [r5, #16]
 80085e2:	6028      	str	r0, [r5, #0]
 80085e4:	60aa      	str	r2, [r5, #8]
 80085e6:	4627      	mov	r7, r4
 80085e8:	46a2      	mov	sl, r4
 80085ea:	4652      	mov	r2, sl
 80085ec:	4649      	mov	r1, r9
 80085ee:	f7ff f9f7 	bl	80079e0 <memmove>
 80085f2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80085f6:	68ab      	ldr	r3, [r5, #8]
 80085f8:	6828      	ldr	r0, [r5, #0]
 80085fa:	1bdb      	subs	r3, r3, r7
 80085fc:	4450      	add	r0, sl
 80085fe:	1b14      	subs	r4, r2, r4
 8008600:	60ab      	str	r3, [r5, #8]
 8008602:	6028      	str	r0, [r5, #0]
 8008604:	f8c8 4008 	str.w	r4, [r8, #8]
 8008608:	b314      	cbz	r4, 8008650 <__ssprint_r+0xf4>
 800860a:	f8d6 9000 	ldr.w	r9, [r6]
 800860e:	6874      	ldr	r4, [r6, #4]
 8008610:	3608      	adds	r6, #8
 8008612:	e7b2      	b.n	800857a <__ssprint_r+0x1e>
 8008614:	4627      	mov	r7, r4
 8008616:	46a2      	mov	sl, r4
 8008618:	e7e7      	b.n	80085ea <__ssprint_r+0x8e>
 800861a:	4658      	mov	r0, fp
 800861c:	f7ff fd58 	bl	80080d0 <_realloc_r>
 8008620:	4603      	mov	r3, r0
 8008622:	2800      	cmp	r0, #0
 8008624:	d1d7      	bne.n	80085d6 <__ssprint_r+0x7a>
 8008626:	6929      	ldr	r1, [r5, #16]
 8008628:	4658      	mov	r0, fp
 800862a:	f7fe fbbb 	bl	8006da4 <_free_r>
 800862e:	230c      	movs	r3, #12
 8008630:	f8cb 3000 	str.w	r3, [fp]
 8008634:	89ab      	ldrh	r3, [r5, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800863c:	f04f 30ff 	mov.w	r0, #4294967295
 8008640:	81ab      	strh	r3, [r5, #12]
 8008642:	f8c8 2008 	str.w	r2, [r8, #8]
 8008646:	f8c8 2004 	str.w	r2, [r8, #4]
 800864a:	b003      	add	sp, #12
 800864c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008650:	2000      	movs	r0, #0
 8008652:	f8c8 0004 	str.w	r0, [r8, #4]
 8008656:	b003      	add	sp, #12
 8008658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800865c <__sprint_r.part.0>:
 800865c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800865e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008662:	049c      	lsls	r4, r3, #18
 8008664:	4692      	mov	sl, r2
 8008666:	d52c      	bpl.n	80086c2 <__sprint_r.part.0+0x66>
 8008668:	6893      	ldr	r3, [r2, #8]
 800866a:	6812      	ldr	r2, [r2, #0]
 800866c:	b33b      	cbz	r3, 80086be <__sprint_r.part.0+0x62>
 800866e:	460f      	mov	r7, r1
 8008670:	4680      	mov	r8, r0
 8008672:	f102 0908 	add.w	r9, r2, #8
 8008676:	e919 0060 	ldmdb	r9, {r5, r6}
 800867a:	08b6      	lsrs	r6, r6, #2
 800867c:	d017      	beq.n	80086ae <__sprint_r.part.0+0x52>
 800867e:	3d04      	subs	r5, #4
 8008680:	2400      	movs	r4, #0
 8008682:	e001      	b.n	8008688 <__sprint_r.part.0+0x2c>
 8008684:	42a6      	cmp	r6, r4
 8008686:	d010      	beq.n	80086aa <__sprint_r.part.0+0x4e>
 8008688:	463a      	mov	r2, r7
 800868a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800868e:	4640      	mov	r0, r8
 8008690:	f000 f910 	bl	80088b4 <_fputwc_r>
 8008694:	1c43      	adds	r3, r0, #1
 8008696:	f104 0401 	add.w	r4, r4, #1
 800869a:	d1f3      	bne.n	8008684 <__sprint_r.part.0+0x28>
 800869c:	2300      	movs	r3, #0
 800869e:	f8ca 3008 	str.w	r3, [sl, #8]
 80086a2:	f8ca 3004 	str.w	r3, [sl, #4]
 80086a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086aa:	f8da 3008 	ldr.w	r3, [sl, #8]
 80086ae:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 80086b2:	f8ca 3008 	str.w	r3, [sl, #8]
 80086b6:	f109 0908 	add.w	r9, r9, #8
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1db      	bne.n	8008676 <__sprint_r.part.0+0x1a>
 80086be:	2000      	movs	r0, #0
 80086c0:	e7ec      	b.n	800869c <__sprint_r.part.0+0x40>
 80086c2:	f7fe fc57 	bl	8006f74 <__sfvwrite_r>
 80086c6:	2300      	movs	r3, #0
 80086c8:	f8ca 3008 	str.w	r3, [sl, #8]
 80086cc:	f8ca 3004 	str.w	r3, [sl, #4]
 80086d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080086d4 <__sprint_r>:
 80086d4:	6893      	ldr	r3, [r2, #8]
 80086d6:	b10b      	cbz	r3, 80086dc <__sprint_r+0x8>
 80086d8:	f7ff bfc0 	b.w	800865c <__sprint_r.part.0>
 80086dc:	b410      	push	{r4}
 80086de:	4618      	mov	r0, r3
 80086e0:	6053      	str	r3, [r2, #4]
 80086e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <_write_r>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	460d      	mov	r5, r1
 80086ec:	4c08      	ldr	r4, [pc, #32]	; (8008710 <_write_r+0x28>)
 80086ee:	4611      	mov	r1, r2
 80086f0:	4606      	mov	r6, r0
 80086f2:	461a      	mov	r2, r3
 80086f4:	4628      	mov	r0, r5
 80086f6:	2300      	movs	r3, #0
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	f7f8 fb41 	bl	8000d80 <_write>
 80086fe:	1c43      	adds	r3, r0, #1
 8008700:	d000      	beq.n	8008704 <_write_r+0x1c>
 8008702:	bd70      	pop	{r4, r5, r6, pc}
 8008704:	6823      	ldr	r3, [r4, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d0fb      	beq.n	8008702 <_write_r+0x1a>
 800870a:	6033      	str	r3, [r6, #0]
 800870c:	bd70      	pop	{r4, r5, r6, pc}
 800870e:	bf00      	nop
 8008710:	20000a84 	.word	0x20000a84

08008714 <_calloc_r>:
 8008714:	b510      	push	{r4, lr}
 8008716:	fb02 f101 	mul.w	r1, r2, r1
 800871a:	f7fe fe59 	bl	80073d0 <_malloc_r>
 800871e:	4604      	mov	r4, r0
 8008720:	b1d8      	cbz	r0, 800875a <_calloc_r+0x46>
 8008722:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008726:	f022 0203 	bic.w	r2, r2, #3
 800872a:	3a04      	subs	r2, #4
 800872c:	2a24      	cmp	r2, #36	; 0x24
 800872e:	d818      	bhi.n	8008762 <_calloc_r+0x4e>
 8008730:	2a13      	cmp	r2, #19
 8008732:	d914      	bls.n	800875e <_calloc_r+0x4a>
 8008734:	2300      	movs	r3, #0
 8008736:	2a1b      	cmp	r2, #27
 8008738:	6003      	str	r3, [r0, #0]
 800873a:	6043      	str	r3, [r0, #4]
 800873c:	d916      	bls.n	800876c <_calloc_r+0x58>
 800873e:	2a24      	cmp	r2, #36	; 0x24
 8008740:	6083      	str	r3, [r0, #8]
 8008742:	60c3      	str	r3, [r0, #12]
 8008744:	bf11      	iteee	ne
 8008746:	f100 0210 	addne.w	r2, r0, #16
 800874a:	6103      	streq	r3, [r0, #16]
 800874c:	6143      	streq	r3, [r0, #20]
 800874e:	f100 0218 	addeq.w	r2, r0, #24
 8008752:	2300      	movs	r3, #0
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	6053      	str	r3, [r2, #4]
 8008758:	6093      	str	r3, [r2, #8]
 800875a:	4620      	mov	r0, r4
 800875c:	bd10      	pop	{r4, pc}
 800875e:	4602      	mov	r2, r0
 8008760:	e7f7      	b.n	8008752 <_calloc_r+0x3e>
 8008762:	2100      	movs	r1, #0
 8008764:	f7fa f86e 	bl	8002844 <memset>
 8008768:	4620      	mov	r0, r4
 800876a:	bd10      	pop	{r4, pc}
 800876c:	f100 0208 	add.w	r2, r0, #8
 8008770:	e7ef      	b.n	8008752 <_calloc_r+0x3e>
 8008772:	bf00      	nop

08008774 <_close_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4c07      	ldr	r4, [pc, #28]	; (8008794 <_close_r+0x20>)
 8008778:	2300      	movs	r3, #0
 800877a:	4605      	mov	r5, r0
 800877c:	4608      	mov	r0, r1
 800877e:	6023      	str	r3, [r4, #0]
 8008780:	f7f9 f8d8 	bl	8001934 <_close>
 8008784:	1c43      	adds	r3, r0, #1
 8008786:	d000      	beq.n	800878a <_close_r+0x16>
 8008788:	bd38      	pop	{r3, r4, r5, pc}
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d0fb      	beq.n	8008788 <_close_r+0x14>
 8008790:	602b      	str	r3, [r5, #0]
 8008792:	bd38      	pop	{r3, r4, r5, pc}
 8008794:	20000a84 	.word	0x20000a84

08008798 <_fclose_r>:
 8008798:	2900      	cmp	r1, #0
 800879a:	d03d      	beq.n	8008818 <_fclose_r+0x80>
 800879c:	b570      	push	{r4, r5, r6, lr}
 800879e:	4605      	mov	r5, r0
 80087a0:	460c      	mov	r4, r1
 80087a2:	b108      	cbz	r0, 80087a8 <_fclose_r+0x10>
 80087a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80087a6:	b37b      	cbz	r3, 8008808 <_fclose_r+0x70>
 80087a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ac:	b90b      	cbnz	r3, 80087b2 <_fclose_r+0x1a>
 80087ae:	2000      	movs	r0, #0
 80087b0:	bd70      	pop	{r4, r5, r6, pc}
 80087b2:	4621      	mov	r1, r4
 80087b4:	4628      	mov	r0, r5
 80087b6:	f7fe f965 	bl	8006a84 <__sflush_r>
 80087ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80087bc:	4606      	mov	r6, r0
 80087be:	b133      	cbz	r3, 80087ce <_fclose_r+0x36>
 80087c0:	69e1      	ldr	r1, [r4, #28]
 80087c2:	4628      	mov	r0, r5
 80087c4:	4798      	blx	r3
 80087c6:	2800      	cmp	r0, #0
 80087c8:	bfb8      	it	lt
 80087ca:	f04f 36ff 	movlt.w	r6, #4294967295
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	061b      	lsls	r3, r3, #24
 80087d2:	d41c      	bmi.n	800880e <_fclose_r+0x76>
 80087d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80087d6:	b141      	cbz	r1, 80087ea <_fclose_r+0x52>
 80087d8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80087dc:	4299      	cmp	r1, r3
 80087de:	d002      	beq.n	80087e6 <_fclose_r+0x4e>
 80087e0:	4628      	mov	r0, r5
 80087e2:	f7fe fadf 	bl	8006da4 <_free_r>
 80087e6:	2300      	movs	r3, #0
 80087e8:	6323      	str	r3, [r4, #48]	; 0x30
 80087ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80087ec:	b121      	cbz	r1, 80087f8 <_fclose_r+0x60>
 80087ee:	4628      	mov	r0, r5
 80087f0:	f7fe fad8 	bl	8006da4 <_free_r>
 80087f4:	2300      	movs	r3, #0
 80087f6:	6463      	str	r3, [r4, #68]	; 0x44
 80087f8:	f7fe fa82 	bl	8006d00 <__sfp_lock_acquire>
 80087fc:	2300      	movs	r3, #0
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	f7fe fa80 	bl	8006d04 <__sfp_lock_release>
 8008804:	4630      	mov	r0, r6
 8008806:	bd70      	pop	{r4, r5, r6, pc}
 8008808:	f7fe fa74 	bl	8006cf4 <__sinit>
 800880c:	e7cc      	b.n	80087a8 <_fclose_r+0x10>
 800880e:	6921      	ldr	r1, [r4, #16]
 8008810:	4628      	mov	r0, r5
 8008812:	f7fe fac7 	bl	8006da4 <_free_r>
 8008816:	e7dd      	b.n	80087d4 <_fclose_r+0x3c>
 8008818:	2000      	movs	r0, #0
 800881a:	4770      	bx	lr

0800881c <__fputwc>:
 800881c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008820:	b082      	sub	sp, #8
 8008822:	4680      	mov	r8, r0
 8008824:	4689      	mov	r9, r1
 8008826:	4614      	mov	r4, r2
 8008828:	f000 f87e 	bl	8008928 <__locale_mb_cur_max>
 800882c:	2801      	cmp	r0, #1
 800882e:	d033      	beq.n	8008898 <__fputwc+0x7c>
 8008830:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8008834:	464a      	mov	r2, r9
 8008836:	a901      	add	r1, sp, #4
 8008838:	4640      	mov	r0, r8
 800883a:	f000 f91b 	bl	8008a74 <_wcrtomb_r>
 800883e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008842:	4682      	mov	sl, r0
 8008844:	d021      	beq.n	800888a <__fputwc+0x6e>
 8008846:	b388      	cbz	r0, 80088ac <__fputwc+0x90>
 8008848:	f89d 6004 	ldrb.w	r6, [sp, #4]
 800884c:	2500      	movs	r5, #0
 800884e:	e008      	b.n	8008862 <__fputwc+0x46>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	1c5a      	adds	r2, r3, #1
 8008854:	6022      	str	r2, [r4, #0]
 8008856:	701e      	strb	r6, [r3, #0]
 8008858:	3501      	adds	r5, #1
 800885a:	4555      	cmp	r5, sl
 800885c:	d226      	bcs.n	80088ac <__fputwc+0x90>
 800885e:	ab01      	add	r3, sp, #4
 8008860:	5d5e      	ldrb	r6, [r3, r5]
 8008862:	68a3      	ldr	r3, [r4, #8]
 8008864:	3b01      	subs	r3, #1
 8008866:	2b00      	cmp	r3, #0
 8008868:	60a3      	str	r3, [r4, #8]
 800886a:	daf1      	bge.n	8008850 <__fputwc+0x34>
 800886c:	69a7      	ldr	r7, [r4, #24]
 800886e:	42bb      	cmp	r3, r7
 8008870:	4631      	mov	r1, r6
 8008872:	4622      	mov	r2, r4
 8008874:	4640      	mov	r0, r8
 8008876:	db01      	blt.n	800887c <__fputwc+0x60>
 8008878:	2e0a      	cmp	r6, #10
 800887a:	d1e9      	bne.n	8008850 <__fputwc+0x34>
 800887c:	f000 f8a4 	bl	80089c8 <__swbuf_r>
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	d1e9      	bne.n	8008858 <__fputwc+0x3c>
 8008884:	b002      	add	sp, #8
 8008886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008890:	81a3      	strh	r3, [r4, #12]
 8008892:	b002      	add	sp, #8
 8008894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008898:	f109 33ff 	add.w	r3, r9, #4294967295
 800889c:	2bfe      	cmp	r3, #254	; 0xfe
 800889e:	d8c7      	bhi.n	8008830 <__fputwc+0x14>
 80088a0:	fa5f f689 	uxtb.w	r6, r9
 80088a4:	4682      	mov	sl, r0
 80088a6:	f88d 6004 	strb.w	r6, [sp, #4]
 80088aa:	e7cf      	b.n	800884c <__fputwc+0x30>
 80088ac:	4648      	mov	r0, r9
 80088ae:	b002      	add	sp, #8
 80088b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080088b4 <_fputwc_r>:
 80088b4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80088b8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80088bc:	d10b      	bne.n	80088d6 <_fputwc_r+0x22>
 80088be:	b410      	push	{r4}
 80088c0:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80088c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80088c6:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80088ca:	6654      	str	r4, [r2, #100]	; 0x64
 80088cc:	8193      	strh	r3, [r2, #12]
 80088ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088d2:	f7ff bfa3 	b.w	800881c <__fputwc>
 80088d6:	f7ff bfa1 	b.w	800881c <__fputwc>
 80088da:	bf00      	nop

080088dc <_fstat_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	460b      	mov	r3, r1
 80088e0:	4c07      	ldr	r4, [pc, #28]	; (8008900 <_fstat_r+0x24>)
 80088e2:	4605      	mov	r5, r0
 80088e4:	4611      	mov	r1, r2
 80088e6:	4618      	mov	r0, r3
 80088e8:	2300      	movs	r3, #0
 80088ea:	6023      	str	r3, [r4, #0]
 80088ec:	f7f9 f82c 	bl	8001948 <_fstat>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d000      	beq.n	80088f6 <_fstat_r+0x1a>
 80088f4:	bd38      	pop	{r3, r4, r5, pc}
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d0fb      	beq.n	80088f4 <_fstat_r+0x18>
 80088fc:	602b      	str	r3, [r5, #0]
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	20000a84 	.word	0x20000a84

08008904 <_isatty_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4c07      	ldr	r4, [pc, #28]	; (8008924 <_isatty_r+0x20>)
 8008908:	2300      	movs	r3, #0
 800890a:	4605      	mov	r5, r0
 800890c:	4608      	mov	r0, r1
 800890e:	6023      	str	r3, [r4, #0]
 8008910:	f7f9 f86e 	bl	80019f0 <_isatty>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d000      	beq.n	800891a <_isatty_r+0x16>
 8008918:	bd38      	pop	{r3, r4, r5, pc}
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0fb      	beq.n	8008918 <_isatty_r+0x14>
 8008920:	602b      	str	r3, [r5, #0]
 8008922:	bd38      	pop	{r3, r4, r5, pc}
 8008924:	20000a84 	.word	0x20000a84

08008928 <__locale_mb_cur_max>:
 8008928:	4b04      	ldr	r3, [pc, #16]	; (800893c <__locale_mb_cur_max+0x14>)
 800892a:	4a05      	ldr	r2, [pc, #20]	; (8008940 <__locale_mb_cur_max+0x18>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008930:	2b00      	cmp	r3, #0
 8008932:	bf08      	it	eq
 8008934:	4613      	moveq	r3, r2
 8008936:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800893a:	4770      	bx	lr
 800893c:	20000460 	.word	0x20000460
 8008940:	20000874 	.word	0x20000874

08008944 <_lseek_r>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	460d      	mov	r5, r1
 8008948:	4c08      	ldr	r4, [pc, #32]	; (800896c <_lseek_r+0x28>)
 800894a:	4611      	mov	r1, r2
 800894c:	4606      	mov	r6, r0
 800894e:	461a      	mov	r2, r3
 8008950:	4628      	mov	r0, r5
 8008952:	2300      	movs	r3, #0
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	f7f8 ffd1 	bl	80018fc <_lseek>
 800895a:	1c43      	adds	r3, r0, #1
 800895c:	d000      	beq.n	8008960 <_lseek_r+0x1c>
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d0fb      	beq.n	800895e <_lseek_r+0x1a>
 8008966:	6033      	str	r3, [r6, #0]
 8008968:	bd70      	pop	{r4, r5, r6, pc}
 800896a:	bf00      	nop
 800896c:	20000a84 	.word	0x20000a84

08008970 <__ascii_mbtowc>:
 8008970:	b082      	sub	sp, #8
 8008972:	b149      	cbz	r1, 8008988 <__ascii_mbtowc+0x18>
 8008974:	b15a      	cbz	r2, 800898e <__ascii_mbtowc+0x1e>
 8008976:	b16b      	cbz	r3, 8008994 <__ascii_mbtowc+0x24>
 8008978:	7813      	ldrb	r3, [r2, #0]
 800897a:	600b      	str	r3, [r1, #0]
 800897c:	7812      	ldrb	r2, [r2, #0]
 800897e:	1c10      	adds	r0, r2, #0
 8008980:	bf18      	it	ne
 8008982:	2001      	movne	r0, #1
 8008984:	b002      	add	sp, #8
 8008986:	4770      	bx	lr
 8008988:	a901      	add	r1, sp, #4
 800898a:	2a00      	cmp	r2, #0
 800898c:	d1f3      	bne.n	8008976 <__ascii_mbtowc+0x6>
 800898e:	4610      	mov	r0, r2
 8008990:	b002      	add	sp, #8
 8008992:	4770      	bx	lr
 8008994:	f06f 0001 	mvn.w	r0, #1
 8008998:	e7f4      	b.n	8008984 <__ascii_mbtowc+0x14>
 800899a:	bf00      	nop

0800899c <_read_r>:
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	460d      	mov	r5, r1
 80089a0:	4c08      	ldr	r4, [pc, #32]	; (80089c4 <_read_r+0x28>)
 80089a2:	4611      	mov	r1, r2
 80089a4:	4606      	mov	r6, r0
 80089a6:	461a      	mov	r2, r3
 80089a8:	4628      	mov	r0, r5
 80089aa:	2300      	movs	r3, #0
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	f7f8 ffb3 	bl	8001918 <_read>
 80089b2:	1c43      	adds	r3, r0, #1
 80089b4:	d000      	beq.n	80089b8 <_read_r+0x1c>
 80089b6:	bd70      	pop	{r4, r5, r6, pc}
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0fb      	beq.n	80089b6 <_read_r+0x1a>
 80089be:	6033      	str	r3, [r6, #0]
 80089c0:	bd70      	pop	{r4, r5, r6, pc}
 80089c2:	bf00      	nop
 80089c4:	20000a84 	.word	0x20000a84

080089c8 <__swbuf_r>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	460d      	mov	r5, r1
 80089cc:	4614      	mov	r4, r2
 80089ce:	4606      	mov	r6, r0
 80089d0:	b110      	cbz	r0, 80089d8 <__swbuf_r+0x10>
 80089d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d04a      	beq.n	8008a6e <__swbuf_r+0xa6>
 80089d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089dc:	69a3      	ldr	r3, [r4, #24]
 80089de:	60a3      	str	r3, [r4, #8]
 80089e0:	b291      	uxth	r1, r2
 80089e2:	0708      	lsls	r0, r1, #28
 80089e4:	d538      	bpl.n	8008a58 <__swbuf_r+0x90>
 80089e6:	6923      	ldr	r3, [r4, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d035      	beq.n	8008a58 <__swbuf_r+0x90>
 80089ec:	0489      	lsls	r1, r1, #18
 80089ee:	b2ef      	uxtb	r7, r5
 80089f0:	d515      	bpl.n	8008a1e <__swbuf_r+0x56>
 80089f2:	6822      	ldr	r2, [r4, #0]
 80089f4:	6961      	ldr	r1, [r4, #20]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	428b      	cmp	r3, r1
 80089fa:	da1c      	bge.n	8008a36 <__swbuf_r+0x6e>
 80089fc:	3301      	adds	r3, #1
 80089fe:	68a1      	ldr	r1, [r4, #8]
 8008a00:	1c50      	adds	r0, r2, #1
 8008a02:	3901      	subs	r1, #1
 8008a04:	60a1      	str	r1, [r4, #8]
 8008a06:	6020      	str	r0, [r4, #0]
 8008a08:	7015      	strb	r5, [r2, #0]
 8008a0a:	6962      	ldr	r2, [r4, #20]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d01a      	beq.n	8008a46 <__swbuf_r+0x7e>
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	07db      	lsls	r3, r3, #31
 8008a14:	d501      	bpl.n	8008a1a <__swbuf_r+0x52>
 8008a16:	2f0a      	cmp	r7, #10
 8008a18:	d015      	beq.n	8008a46 <__swbuf_r+0x7e>
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a1e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a24:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8008a28:	81a2      	strh	r2, [r4, #12]
 8008a2a:	6822      	ldr	r2, [r4, #0]
 8008a2c:	6661      	str	r1, [r4, #100]	; 0x64
 8008a2e:	6961      	ldr	r1, [r4, #20]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	428b      	cmp	r3, r1
 8008a34:	dbe2      	blt.n	80089fc <__swbuf_r+0x34>
 8008a36:	4621      	mov	r1, r4
 8008a38:	4630      	mov	r0, r6
 8008a3a:	f7fe f8c7 	bl	8006bcc <_fflush_r>
 8008a3e:	b940      	cbnz	r0, 8008a52 <__swbuf_r+0x8a>
 8008a40:	6822      	ldr	r2, [r4, #0]
 8008a42:	2301      	movs	r3, #1
 8008a44:	e7db      	b.n	80089fe <__swbuf_r+0x36>
 8008a46:	4621      	mov	r1, r4
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f7fe f8bf 	bl	8006bcc <_fflush_r>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d0e3      	beq.n	8008a1a <__swbuf_r+0x52>
 8008a52:	f04f 37ff 	mov.w	r7, #4294967295
 8008a56:	e7e0      	b.n	8008a1a <__swbuf_r+0x52>
 8008a58:	4621      	mov	r1, r4
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f7fd f804 	bl	8005a68 <__swsetup_r>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d1f6      	bne.n	8008a52 <__swbuf_r+0x8a>
 8008a64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a68:	6923      	ldr	r3, [r4, #16]
 8008a6a:	b291      	uxth	r1, r2
 8008a6c:	e7be      	b.n	80089ec <__swbuf_r+0x24>
 8008a6e:	f7fe f941 	bl	8006cf4 <__sinit>
 8008a72:	e7b1      	b.n	80089d8 <__swbuf_r+0x10>

08008a74 <_wcrtomb_r>:
 8008a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a76:	4606      	mov	r6, r0
 8008a78:	b085      	sub	sp, #20
 8008a7a:	461f      	mov	r7, r3
 8008a7c:	b189      	cbz	r1, 8008aa2 <_wcrtomb_r+0x2e>
 8008a7e:	4c10      	ldr	r4, [pc, #64]	; (8008ac0 <_wcrtomb_r+0x4c>)
 8008a80:	4d10      	ldr	r5, [pc, #64]	; (8008ac4 <_wcrtomb_r+0x50>)
 8008a82:	6824      	ldr	r4, [r4, #0]
 8008a84:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8008a86:	2c00      	cmp	r4, #0
 8008a88:	bf08      	it	eq
 8008a8a:	462c      	moveq	r4, r5
 8008a8c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8008a90:	47a0      	blx	r4
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	d103      	bne.n	8008a9e <_wcrtomb_r+0x2a>
 8008a96:	2200      	movs	r2, #0
 8008a98:	238a      	movs	r3, #138	; 0x8a
 8008a9a:	603a      	str	r2, [r7, #0]
 8008a9c:	6033      	str	r3, [r6, #0]
 8008a9e:	b005      	add	sp, #20
 8008aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	4906      	ldr	r1, [pc, #24]	; (8008ac0 <_wcrtomb_r+0x4c>)
 8008aa6:	4a07      	ldr	r2, [pc, #28]	; (8008ac4 <_wcrtomb_r+0x50>)
 8008aa8:	6809      	ldr	r1, [r1, #0]
 8008aaa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008aac:	2900      	cmp	r1, #0
 8008aae:	bf08      	it	eq
 8008ab0:	4611      	moveq	r1, r2
 8008ab2:	4622      	mov	r2, r4
 8008ab4:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 8008ab8:	a901      	add	r1, sp, #4
 8008aba:	47a0      	blx	r4
 8008abc:	e7e9      	b.n	8008a92 <_wcrtomb_r+0x1e>
 8008abe:	bf00      	nop
 8008ac0:	20000460 	.word	0x20000460
 8008ac4:	20000874 	.word	0x20000874

08008ac8 <__ascii_wctomb>:
 8008ac8:	b121      	cbz	r1, 8008ad4 <__ascii_wctomb+0xc>
 8008aca:	2aff      	cmp	r2, #255	; 0xff
 8008acc:	d804      	bhi.n	8008ad8 <__ascii_wctomb+0x10>
 8008ace:	700a      	strb	r2, [r1, #0]
 8008ad0:	2001      	movs	r0, #1
 8008ad2:	4770      	bx	lr
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	4770      	bx	lr
 8008ad8:	238a      	movs	r3, #138	; 0x8a
 8008ada:	6003      	str	r3, [r0, #0]
 8008adc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop

08008ae4 <__aeabi_drsub>:
 8008ae4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008ae8:	e002      	b.n	8008af0 <__adddf3>
 8008aea:	bf00      	nop

08008aec <__aeabi_dsub>:
 8008aec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008af0 <__adddf3>:
 8008af0:	b530      	push	{r4, r5, lr}
 8008af2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008af6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008afa:	ea94 0f05 	teq	r4, r5
 8008afe:	bf08      	it	eq
 8008b00:	ea90 0f02 	teqeq	r0, r2
 8008b04:	bf1f      	itttt	ne
 8008b06:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008b0a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008b0e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008b12:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008b16:	f000 80e2 	beq.w	8008cde <__adddf3+0x1ee>
 8008b1a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008b1e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008b22:	bfb8      	it	lt
 8008b24:	426d      	neglt	r5, r5
 8008b26:	dd0c      	ble.n	8008b42 <__adddf3+0x52>
 8008b28:	442c      	add	r4, r5
 8008b2a:	ea80 0202 	eor.w	r2, r0, r2
 8008b2e:	ea81 0303 	eor.w	r3, r1, r3
 8008b32:	ea82 0000 	eor.w	r0, r2, r0
 8008b36:	ea83 0101 	eor.w	r1, r3, r1
 8008b3a:	ea80 0202 	eor.w	r2, r0, r2
 8008b3e:	ea81 0303 	eor.w	r3, r1, r3
 8008b42:	2d36      	cmp	r5, #54	; 0x36
 8008b44:	bf88      	it	hi
 8008b46:	bd30      	pophi	{r4, r5, pc}
 8008b48:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008b4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008b50:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008b54:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008b58:	d002      	beq.n	8008b60 <__adddf3+0x70>
 8008b5a:	4240      	negs	r0, r0
 8008b5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008b60:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008b64:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008b68:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008b6c:	d002      	beq.n	8008b74 <__adddf3+0x84>
 8008b6e:	4252      	negs	r2, r2
 8008b70:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008b74:	ea94 0f05 	teq	r4, r5
 8008b78:	f000 80a7 	beq.w	8008cca <__adddf3+0x1da>
 8008b7c:	f1a4 0401 	sub.w	r4, r4, #1
 8008b80:	f1d5 0e20 	rsbs	lr, r5, #32
 8008b84:	db0d      	blt.n	8008ba2 <__adddf3+0xb2>
 8008b86:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008b8a:	fa22 f205 	lsr.w	r2, r2, r5
 8008b8e:	1880      	adds	r0, r0, r2
 8008b90:	f141 0100 	adc.w	r1, r1, #0
 8008b94:	fa03 f20e 	lsl.w	r2, r3, lr
 8008b98:	1880      	adds	r0, r0, r2
 8008b9a:	fa43 f305 	asr.w	r3, r3, r5
 8008b9e:	4159      	adcs	r1, r3
 8008ba0:	e00e      	b.n	8008bc0 <__adddf3+0xd0>
 8008ba2:	f1a5 0520 	sub.w	r5, r5, #32
 8008ba6:	f10e 0e20 	add.w	lr, lr, #32
 8008baa:	2a01      	cmp	r2, #1
 8008bac:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008bb0:	bf28      	it	cs
 8008bb2:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008bb6:	fa43 f305 	asr.w	r3, r3, r5
 8008bba:	18c0      	adds	r0, r0, r3
 8008bbc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008bc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008bc4:	d507      	bpl.n	8008bd6 <__adddf3+0xe6>
 8008bc6:	f04f 0e00 	mov.w	lr, #0
 8008bca:	f1dc 0c00 	rsbs	ip, ip, #0
 8008bce:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008bd2:	eb6e 0101 	sbc.w	r1, lr, r1
 8008bd6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008bda:	d31b      	bcc.n	8008c14 <__adddf3+0x124>
 8008bdc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008be0:	d30c      	bcc.n	8008bfc <__adddf3+0x10c>
 8008be2:	0849      	lsrs	r1, r1, #1
 8008be4:	ea5f 0030 	movs.w	r0, r0, rrx
 8008be8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008bec:	f104 0401 	add.w	r4, r4, #1
 8008bf0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008bf4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008bf8:	f080 809a 	bcs.w	8008d30 <__adddf3+0x240>
 8008bfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008c00:	bf08      	it	eq
 8008c02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008c06:	f150 0000 	adcs.w	r0, r0, #0
 8008c0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008c0e:	ea41 0105 	orr.w	r1, r1, r5
 8008c12:	bd30      	pop	{r4, r5, pc}
 8008c14:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008c18:	4140      	adcs	r0, r0
 8008c1a:	eb41 0101 	adc.w	r1, r1, r1
 8008c1e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008c22:	f1a4 0401 	sub.w	r4, r4, #1
 8008c26:	d1e9      	bne.n	8008bfc <__adddf3+0x10c>
 8008c28:	f091 0f00 	teq	r1, #0
 8008c2c:	bf04      	itt	eq
 8008c2e:	4601      	moveq	r1, r0
 8008c30:	2000      	moveq	r0, #0
 8008c32:	fab1 f381 	clz	r3, r1
 8008c36:	bf08      	it	eq
 8008c38:	3320      	addeq	r3, #32
 8008c3a:	f1a3 030b 	sub.w	r3, r3, #11
 8008c3e:	f1b3 0220 	subs.w	r2, r3, #32
 8008c42:	da0c      	bge.n	8008c5e <__adddf3+0x16e>
 8008c44:	320c      	adds	r2, #12
 8008c46:	dd08      	ble.n	8008c5a <__adddf3+0x16a>
 8008c48:	f102 0c14 	add.w	ip, r2, #20
 8008c4c:	f1c2 020c 	rsb	r2, r2, #12
 8008c50:	fa01 f00c 	lsl.w	r0, r1, ip
 8008c54:	fa21 f102 	lsr.w	r1, r1, r2
 8008c58:	e00c      	b.n	8008c74 <__adddf3+0x184>
 8008c5a:	f102 0214 	add.w	r2, r2, #20
 8008c5e:	bfd8      	it	le
 8008c60:	f1c2 0c20 	rsble	ip, r2, #32
 8008c64:	fa01 f102 	lsl.w	r1, r1, r2
 8008c68:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008c6c:	bfdc      	itt	le
 8008c6e:	ea41 010c 	orrle.w	r1, r1, ip
 8008c72:	4090      	lslle	r0, r2
 8008c74:	1ae4      	subs	r4, r4, r3
 8008c76:	bfa2      	ittt	ge
 8008c78:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008c7c:	4329      	orrge	r1, r5
 8008c7e:	bd30      	popge	{r4, r5, pc}
 8008c80:	ea6f 0404 	mvn.w	r4, r4
 8008c84:	3c1f      	subs	r4, #31
 8008c86:	da1c      	bge.n	8008cc2 <__adddf3+0x1d2>
 8008c88:	340c      	adds	r4, #12
 8008c8a:	dc0e      	bgt.n	8008caa <__adddf3+0x1ba>
 8008c8c:	f104 0414 	add.w	r4, r4, #20
 8008c90:	f1c4 0220 	rsb	r2, r4, #32
 8008c94:	fa20 f004 	lsr.w	r0, r0, r4
 8008c98:	fa01 f302 	lsl.w	r3, r1, r2
 8008c9c:	ea40 0003 	orr.w	r0, r0, r3
 8008ca0:	fa21 f304 	lsr.w	r3, r1, r4
 8008ca4:	ea45 0103 	orr.w	r1, r5, r3
 8008ca8:	bd30      	pop	{r4, r5, pc}
 8008caa:	f1c4 040c 	rsb	r4, r4, #12
 8008cae:	f1c4 0220 	rsb	r2, r4, #32
 8008cb2:	fa20 f002 	lsr.w	r0, r0, r2
 8008cb6:	fa01 f304 	lsl.w	r3, r1, r4
 8008cba:	ea40 0003 	orr.w	r0, r0, r3
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	bd30      	pop	{r4, r5, pc}
 8008cc2:	fa21 f004 	lsr.w	r0, r1, r4
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	bd30      	pop	{r4, r5, pc}
 8008cca:	f094 0f00 	teq	r4, #0
 8008cce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008cd2:	bf06      	itte	eq
 8008cd4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008cd8:	3401      	addeq	r4, #1
 8008cda:	3d01      	subne	r5, #1
 8008cdc:	e74e      	b.n	8008b7c <__adddf3+0x8c>
 8008cde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008ce2:	bf18      	it	ne
 8008ce4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008ce8:	d029      	beq.n	8008d3e <__adddf3+0x24e>
 8008cea:	ea94 0f05 	teq	r4, r5
 8008cee:	bf08      	it	eq
 8008cf0:	ea90 0f02 	teqeq	r0, r2
 8008cf4:	d005      	beq.n	8008d02 <__adddf3+0x212>
 8008cf6:	ea54 0c00 	orrs.w	ip, r4, r0
 8008cfa:	bf04      	itt	eq
 8008cfc:	4619      	moveq	r1, r3
 8008cfe:	4610      	moveq	r0, r2
 8008d00:	bd30      	pop	{r4, r5, pc}
 8008d02:	ea91 0f03 	teq	r1, r3
 8008d06:	bf1e      	ittt	ne
 8008d08:	2100      	movne	r1, #0
 8008d0a:	2000      	movne	r0, #0
 8008d0c:	bd30      	popne	{r4, r5, pc}
 8008d0e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8008d12:	d105      	bne.n	8008d20 <__adddf3+0x230>
 8008d14:	0040      	lsls	r0, r0, #1
 8008d16:	4149      	adcs	r1, r1
 8008d18:	bf28      	it	cs
 8008d1a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008d1e:	bd30      	pop	{r4, r5, pc}
 8008d20:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008d24:	bf3c      	itt	cc
 8008d26:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008d2a:	bd30      	popcc	{r4, r5, pc}
 8008d2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008d30:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008d34:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d38:	f04f 0000 	mov.w	r0, #0
 8008d3c:	bd30      	pop	{r4, r5, pc}
 8008d3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008d42:	bf1a      	itte	ne
 8008d44:	4619      	movne	r1, r3
 8008d46:	4610      	movne	r0, r2
 8008d48:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008d4c:	bf1c      	itt	ne
 8008d4e:	460b      	movne	r3, r1
 8008d50:	4602      	movne	r2, r0
 8008d52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008d56:	bf06      	itte	eq
 8008d58:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008d5c:	ea91 0f03 	teqeq	r1, r3
 8008d60:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008d64:	bd30      	pop	{r4, r5, pc}
 8008d66:	bf00      	nop

08008d68 <__aeabi_ui2d>:
 8008d68:	f090 0f00 	teq	r0, #0
 8008d6c:	bf04      	itt	eq
 8008d6e:	2100      	moveq	r1, #0
 8008d70:	4770      	bxeq	lr
 8008d72:	b530      	push	{r4, r5, lr}
 8008d74:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008d78:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008d7c:	f04f 0500 	mov.w	r5, #0
 8008d80:	f04f 0100 	mov.w	r1, #0
 8008d84:	e750      	b.n	8008c28 <__adddf3+0x138>
 8008d86:	bf00      	nop

08008d88 <__aeabi_i2d>:
 8008d88:	f090 0f00 	teq	r0, #0
 8008d8c:	bf04      	itt	eq
 8008d8e:	2100      	moveq	r1, #0
 8008d90:	4770      	bxeq	lr
 8008d92:	b530      	push	{r4, r5, lr}
 8008d94:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008d98:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008d9c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008da0:	bf48      	it	mi
 8008da2:	4240      	negmi	r0, r0
 8008da4:	f04f 0100 	mov.w	r1, #0
 8008da8:	e73e      	b.n	8008c28 <__adddf3+0x138>
 8008daa:	bf00      	nop

08008dac <__aeabi_f2d>:
 8008dac:	0042      	lsls	r2, r0, #1
 8008dae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008db2:	ea4f 0131 	mov.w	r1, r1, rrx
 8008db6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008dba:	bf1f      	itttt	ne
 8008dbc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008dc0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008dc4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008dc8:	4770      	bxne	lr
 8008dca:	f092 0f00 	teq	r2, #0
 8008dce:	bf14      	ite	ne
 8008dd0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008dd4:	4770      	bxeq	lr
 8008dd6:	b530      	push	{r4, r5, lr}
 8008dd8:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008ddc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008de0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008de4:	e720      	b.n	8008c28 <__adddf3+0x138>
 8008de6:	bf00      	nop

08008de8 <__aeabi_ul2d>:
 8008de8:	ea50 0201 	orrs.w	r2, r0, r1
 8008dec:	bf08      	it	eq
 8008dee:	4770      	bxeq	lr
 8008df0:	b530      	push	{r4, r5, lr}
 8008df2:	f04f 0500 	mov.w	r5, #0
 8008df6:	e00a      	b.n	8008e0e <__aeabi_l2d+0x16>

08008df8 <__aeabi_l2d>:
 8008df8:	ea50 0201 	orrs.w	r2, r0, r1
 8008dfc:	bf08      	it	eq
 8008dfe:	4770      	bxeq	lr
 8008e00:	b530      	push	{r4, r5, lr}
 8008e02:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008e06:	d502      	bpl.n	8008e0e <__aeabi_l2d+0x16>
 8008e08:	4240      	negs	r0, r0
 8008e0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008e0e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008e12:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008e16:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8008e1a:	f43f aedc 	beq.w	8008bd6 <__adddf3+0xe6>
 8008e1e:	f04f 0203 	mov.w	r2, #3
 8008e22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008e26:	bf18      	it	ne
 8008e28:	3203      	addne	r2, #3
 8008e2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008e2e:	bf18      	it	ne
 8008e30:	3203      	addne	r2, #3
 8008e32:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008e36:	f1c2 0320 	rsb	r3, r2, #32
 8008e3a:	fa00 fc03 	lsl.w	ip, r0, r3
 8008e3e:	fa20 f002 	lsr.w	r0, r0, r2
 8008e42:	fa01 fe03 	lsl.w	lr, r1, r3
 8008e46:	ea40 000e 	orr.w	r0, r0, lr
 8008e4a:	fa21 f102 	lsr.w	r1, r1, r2
 8008e4e:	4414      	add	r4, r2
 8008e50:	e6c1      	b.n	8008bd6 <__adddf3+0xe6>
 8008e52:	bf00      	nop

08008e54 <__aeabi_dmul>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008e5a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008e5e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008e62:	bf1d      	ittte	ne
 8008e64:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008e68:	ea94 0f0c 	teqne	r4, ip
 8008e6c:	ea95 0f0c 	teqne	r5, ip
 8008e70:	f000 f8de 	bleq	8009030 <__aeabi_dmul+0x1dc>
 8008e74:	442c      	add	r4, r5
 8008e76:	ea81 0603 	eor.w	r6, r1, r3
 8008e7a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008e7e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008e82:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008e86:	bf18      	it	ne
 8008e88:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008e8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e94:	d038      	beq.n	8008f08 <__aeabi_dmul+0xb4>
 8008e96:	fba0 ce02 	umull	ip, lr, r0, r2
 8008e9a:	f04f 0500 	mov.w	r5, #0
 8008e9e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008ea2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008ea6:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008eaa:	f04f 0600 	mov.w	r6, #0
 8008eae:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008eb2:	f09c 0f00 	teq	ip, #0
 8008eb6:	bf18      	it	ne
 8008eb8:	f04e 0e01 	orrne.w	lr, lr, #1
 8008ebc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008ec0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008ec4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008ec8:	d204      	bcs.n	8008ed4 <__aeabi_dmul+0x80>
 8008eca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008ece:	416d      	adcs	r5, r5
 8008ed0:	eb46 0606 	adc.w	r6, r6, r6
 8008ed4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008ed8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008edc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008ee0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008ee4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008ee8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008eec:	bf88      	it	hi
 8008eee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008ef2:	d81e      	bhi.n	8008f32 <__aeabi_dmul+0xde>
 8008ef4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008ef8:	bf08      	it	eq
 8008efa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008efe:	f150 0000 	adcs.w	r0, r0, #0
 8008f02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008f06:	bd70      	pop	{r4, r5, r6, pc}
 8008f08:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008f0c:	ea46 0101 	orr.w	r1, r6, r1
 8008f10:	ea40 0002 	orr.w	r0, r0, r2
 8008f14:	ea81 0103 	eor.w	r1, r1, r3
 8008f18:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008f1c:	bfc2      	ittt	gt
 8008f1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008f22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008f26:	bd70      	popgt	{r4, r5, r6, pc}
 8008f28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008f2c:	f04f 0e00 	mov.w	lr, #0
 8008f30:	3c01      	subs	r4, #1
 8008f32:	f300 80ab 	bgt.w	800908c <__aeabi_dmul+0x238>
 8008f36:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008f3a:	bfde      	ittt	le
 8008f3c:	2000      	movle	r0, #0
 8008f3e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008f42:	bd70      	pople	{r4, r5, r6, pc}
 8008f44:	f1c4 0400 	rsb	r4, r4, #0
 8008f48:	3c20      	subs	r4, #32
 8008f4a:	da35      	bge.n	8008fb8 <__aeabi_dmul+0x164>
 8008f4c:	340c      	adds	r4, #12
 8008f4e:	dc1b      	bgt.n	8008f88 <__aeabi_dmul+0x134>
 8008f50:	f104 0414 	add.w	r4, r4, #20
 8008f54:	f1c4 0520 	rsb	r5, r4, #32
 8008f58:	fa00 f305 	lsl.w	r3, r0, r5
 8008f5c:	fa20 f004 	lsr.w	r0, r0, r4
 8008f60:	fa01 f205 	lsl.w	r2, r1, r5
 8008f64:	ea40 0002 	orr.w	r0, r0, r2
 8008f68:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008f6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008f70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008f74:	fa21 f604 	lsr.w	r6, r1, r4
 8008f78:	eb42 0106 	adc.w	r1, r2, r6
 8008f7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008f80:	bf08      	it	eq
 8008f82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008f86:	bd70      	pop	{r4, r5, r6, pc}
 8008f88:	f1c4 040c 	rsb	r4, r4, #12
 8008f8c:	f1c4 0520 	rsb	r5, r4, #32
 8008f90:	fa00 f304 	lsl.w	r3, r0, r4
 8008f94:	fa20 f005 	lsr.w	r0, r0, r5
 8008f98:	fa01 f204 	lsl.w	r2, r1, r4
 8008f9c:	ea40 0002 	orr.w	r0, r0, r2
 8008fa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008fa4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008fa8:	f141 0100 	adc.w	r1, r1, #0
 8008fac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008fb0:	bf08      	it	eq
 8008fb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008fb6:	bd70      	pop	{r4, r5, r6, pc}
 8008fb8:	f1c4 0520 	rsb	r5, r4, #32
 8008fbc:	fa00 f205 	lsl.w	r2, r0, r5
 8008fc0:	ea4e 0e02 	orr.w	lr, lr, r2
 8008fc4:	fa20 f304 	lsr.w	r3, r0, r4
 8008fc8:	fa01 f205 	lsl.w	r2, r1, r5
 8008fcc:	ea43 0302 	orr.w	r3, r3, r2
 8008fd0:	fa21 f004 	lsr.w	r0, r1, r4
 8008fd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008fd8:	fa21 f204 	lsr.w	r2, r1, r4
 8008fdc:	ea20 0002 	bic.w	r0, r0, r2
 8008fe0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008fe4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008fe8:	bf08      	it	eq
 8008fea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008fee:	bd70      	pop	{r4, r5, r6, pc}
 8008ff0:	f094 0f00 	teq	r4, #0
 8008ff4:	d10f      	bne.n	8009016 <__aeabi_dmul+0x1c2>
 8008ff6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008ffa:	0040      	lsls	r0, r0, #1
 8008ffc:	eb41 0101 	adc.w	r1, r1, r1
 8009000:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009004:	bf08      	it	eq
 8009006:	3c01      	subeq	r4, #1
 8009008:	d0f7      	beq.n	8008ffa <__aeabi_dmul+0x1a6>
 800900a:	ea41 0106 	orr.w	r1, r1, r6
 800900e:	f095 0f00 	teq	r5, #0
 8009012:	bf18      	it	ne
 8009014:	4770      	bxne	lr
 8009016:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800901a:	0052      	lsls	r2, r2, #1
 800901c:	eb43 0303 	adc.w	r3, r3, r3
 8009020:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009024:	bf08      	it	eq
 8009026:	3d01      	subeq	r5, #1
 8009028:	d0f7      	beq.n	800901a <__aeabi_dmul+0x1c6>
 800902a:	ea43 0306 	orr.w	r3, r3, r6
 800902e:	4770      	bx	lr
 8009030:	ea94 0f0c 	teq	r4, ip
 8009034:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8009038:	bf18      	it	ne
 800903a:	ea95 0f0c 	teqne	r5, ip
 800903e:	d00c      	beq.n	800905a <__aeabi_dmul+0x206>
 8009040:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009044:	bf18      	it	ne
 8009046:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800904a:	d1d1      	bne.n	8008ff0 <__aeabi_dmul+0x19c>
 800904c:	ea81 0103 	eor.w	r1, r1, r3
 8009050:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009054:	f04f 0000 	mov.w	r0, #0
 8009058:	bd70      	pop	{r4, r5, r6, pc}
 800905a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800905e:	bf06      	itte	eq
 8009060:	4610      	moveq	r0, r2
 8009062:	4619      	moveq	r1, r3
 8009064:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009068:	d019      	beq.n	800909e <__aeabi_dmul+0x24a>
 800906a:	ea94 0f0c 	teq	r4, ip
 800906e:	d102      	bne.n	8009076 <__aeabi_dmul+0x222>
 8009070:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8009074:	d113      	bne.n	800909e <__aeabi_dmul+0x24a>
 8009076:	ea95 0f0c 	teq	r5, ip
 800907a:	d105      	bne.n	8009088 <__aeabi_dmul+0x234>
 800907c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8009080:	bf1c      	itt	ne
 8009082:	4610      	movne	r0, r2
 8009084:	4619      	movne	r1, r3
 8009086:	d10a      	bne.n	800909e <__aeabi_dmul+0x24a>
 8009088:	ea81 0103 	eor.w	r1, r1, r3
 800908c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009090:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8009094:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009098:	f04f 0000 	mov.w	r0, #0
 800909c:	bd70      	pop	{r4, r5, r6, pc}
 800909e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80090a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80090a6:	bd70      	pop	{r4, r5, r6, pc}

080090a8 <__aeabi_ddiv>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80090ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80090b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80090b6:	bf1d      	ittte	ne
 80090b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80090bc:	ea94 0f0c 	teqne	r4, ip
 80090c0:	ea95 0f0c 	teqne	r5, ip
 80090c4:	f000 f8a7 	bleq	8009216 <__aeabi_ddiv+0x16e>
 80090c8:	eba4 0405 	sub.w	r4, r4, r5
 80090cc:	ea81 0e03 	eor.w	lr, r1, r3
 80090d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80090d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80090d8:	f000 8088 	beq.w	80091ec <__aeabi_ddiv+0x144>
 80090dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80090e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80090e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80090e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80090ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80090f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80090f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80090f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80090fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8009100:	429d      	cmp	r5, r3
 8009102:	bf08      	it	eq
 8009104:	4296      	cmpeq	r6, r2
 8009106:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800910a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800910e:	d202      	bcs.n	8009116 <__aeabi_ddiv+0x6e>
 8009110:	085b      	lsrs	r3, r3, #1
 8009112:	ea4f 0232 	mov.w	r2, r2, rrx
 8009116:	1ab6      	subs	r6, r6, r2
 8009118:	eb65 0503 	sbc.w	r5, r5, r3
 800911c:	085b      	lsrs	r3, r3, #1
 800911e:	ea4f 0232 	mov.w	r2, r2, rrx
 8009122:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009126:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800912a:	ebb6 0e02 	subs.w	lr, r6, r2
 800912e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009132:	bf22      	ittt	cs
 8009134:	1ab6      	subcs	r6, r6, r2
 8009136:	4675      	movcs	r5, lr
 8009138:	ea40 000c 	orrcs.w	r0, r0, ip
 800913c:	085b      	lsrs	r3, r3, #1
 800913e:	ea4f 0232 	mov.w	r2, r2, rrx
 8009142:	ebb6 0e02 	subs.w	lr, r6, r2
 8009146:	eb75 0e03 	sbcs.w	lr, r5, r3
 800914a:	bf22      	ittt	cs
 800914c:	1ab6      	subcs	r6, r6, r2
 800914e:	4675      	movcs	r5, lr
 8009150:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8009154:	085b      	lsrs	r3, r3, #1
 8009156:	ea4f 0232 	mov.w	r2, r2, rrx
 800915a:	ebb6 0e02 	subs.w	lr, r6, r2
 800915e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009162:	bf22      	ittt	cs
 8009164:	1ab6      	subcs	r6, r6, r2
 8009166:	4675      	movcs	r5, lr
 8009168:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800916c:	085b      	lsrs	r3, r3, #1
 800916e:	ea4f 0232 	mov.w	r2, r2, rrx
 8009172:	ebb6 0e02 	subs.w	lr, r6, r2
 8009176:	eb75 0e03 	sbcs.w	lr, r5, r3
 800917a:	bf22      	ittt	cs
 800917c:	1ab6      	subcs	r6, r6, r2
 800917e:	4675      	movcs	r5, lr
 8009180:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8009184:	ea55 0e06 	orrs.w	lr, r5, r6
 8009188:	d018      	beq.n	80091bc <__aeabi_ddiv+0x114>
 800918a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800918e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8009192:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8009196:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800919a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800919e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80091a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80091a6:	d1c0      	bne.n	800912a <__aeabi_ddiv+0x82>
 80091a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80091ac:	d10b      	bne.n	80091c6 <__aeabi_ddiv+0x11e>
 80091ae:	ea41 0100 	orr.w	r1, r1, r0
 80091b2:	f04f 0000 	mov.w	r0, #0
 80091b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80091ba:	e7b6      	b.n	800912a <__aeabi_ddiv+0x82>
 80091bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80091c0:	bf04      	itt	eq
 80091c2:	4301      	orreq	r1, r0
 80091c4:	2000      	moveq	r0, #0
 80091c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80091ca:	bf88      	it	hi
 80091cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80091d0:	f63f aeaf 	bhi.w	8008f32 <__aeabi_dmul+0xde>
 80091d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80091d8:	bf04      	itt	eq
 80091da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80091de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80091e2:	f150 0000 	adcs.w	r0, r0, #0
 80091e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80091ea:	bd70      	pop	{r4, r5, r6, pc}
 80091ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80091f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80091f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80091f8:	bfc2      	ittt	gt
 80091fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80091fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8009202:	bd70      	popgt	{r4, r5, r6, pc}
 8009204:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009208:	f04f 0e00 	mov.w	lr, #0
 800920c:	3c01      	subs	r4, #1
 800920e:	e690      	b.n	8008f32 <__aeabi_dmul+0xde>
 8009210:	ea45 0e06 	orr.w	lr, r5, r6
 8009214:	e68d      	b.n	8008f32 <__aeabi_dmul+0xde>
 8009216:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800921a:	ea94 0f0c 	teq	r4, ip
 800921e:	bf08      	it	eq
 8009220:	ea95 0f0c 	teqeq	r5, ip
 8009224:	f43f af3b 	beq.w	800909e <__aeabi_dmul+0x24a>
 8009228:	ea94 0f0c 	teq	r4, ip
 800922c:	d10a      	bne.n	8009244 <__aeabi_ddiv+0x19c>
 800922e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8009232:	f47f af34 	bne.w	800909e <__aeabi_dmul+0x24a>
 8009236:	ea95 0f0c 	teq	r5, ip
 800923a:	f47f af25 	bne.w	8009088 <__aeabi_dmul+0x234>
 800923e:	4610      	mov	r0, r2
 8009240:	4619      	mov	r1, r3
 8009242:	e72c      	b.n	800909e <__aeabi_dmul+0x24a>
 8009244:	ea95 0f0c 	teq	r5, ip
 8009248:	d106      	bne.n	8009258 <__aeabi_ddiv+0x1b0>
 800924a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800924e:	f43f aefd 	beq.w	800904c <__aeabi_dmul+0x1f8>
 8009252:	4610      	mov	r0, r2
 8009254:	4619      	mov	r1, r3
 8009256:	e722      	b.n	800909e <__aeabi_dmul+0x24a>
 8009258:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800925c:	bf18      	it	ne
 800925e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009262:	f47f aec5 	bne.w	8008ff0 <__aeabi_dmul+0x19c>
 8009266:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800926a:	f47f af0d 	bne.w	8009088 <__aeabi_dmul+0x234>
 800926e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8009272:	f47f aeeb 	bne.w	800904c <__aeabi_dmul+0x1f8>
 8009276:	e712      	b.n	800909e <__aeabi_dmul+0x24a>

08009278 <__gedf2>:
 8009278:	f04f 3cff 	mov.w	ip, #4294967295
 800927c:	e006      	b.n	800928c <__cmpdf2+0x4>
 800927e:	bf00      	nop

08009280 <__ledf2>:
 8009280:	f04f 0c01 	mov.w	ip, #1
 8009284:	e002      	b.n	800928c <__cmpdf2+0x4>
 8009286:	bf00      	nop

08009288 <__cmpdf2>:
 8009288:	f04f 0c01 	mov.w	ip, #1
 800928c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8009290:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8009294:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009298:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800929c:	bf18      	it	ne
 800929e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80092a2:	d01b      	beq.n	80092dc <__cmpdf2+0x54>
 80092a4:	b001      	add	sp, #4
 80092a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80092aa:	bf0c      	ite	eq
 80092ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80092b0:	ea91 0f03 	teqne	r1, r3
 80092b4:	bf02      	ittt	eq
 80092b6:	ea90 0f02 	teqeq	r0, r2
 80092ba:	2000      	moveq	r0, #0
 80092bc:	4770      	bxeq	lr
 80092be:	f110 0f00 	cmn.w	r0, #0
 80092c2:	ea91 0f03 	teq	r1, r3
 80092c6:	bf58      	it	pl
 80092c8:	4299      	cmppl	r1, r3
 80092ca:	bf08      	it	eq
 80092cc:	4290      	cmpeq	r0, r2
 80092ce:	bf2c      	ite	cs
 80092d0:	17d8      	asrcs	r0, r3, #31
 80092d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80092d6:	f040 0001 	orr.w	r0, r0, #1
 80092da:	4770      	bx	lr
 80092dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80092e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80092e4:	d102      	bne.n	80092ec <__cmpdf2+0x64>
 80092e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80092ea:	d107      	bne.n	80092fc <__cmpdf2+0x74>
 80092ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80092f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80092f4:	d1d6      	bne.n	80092a4 <__cmpdf2+0x1c>
 80092f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80092fa:	d0d3      	beq.n	80092a4 <__cmpdf2+0x1c>
 80092fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop

08009304 <__aeabi_cdrcmple>:
 8009304:	4684      	mov	ip, r0
 8009306:	4610      	mov	r0, r2
 8009308:	4662      	mov	r2, ip
 800930a:	468c      	mov	ip, r1
 800930c:	4619      	mov	r1, r3
 800930e:	4663      	mov	r3, ip
 8009310:	e000      	b.n	8009314 <__aeabi_cdcmpeq>
 8009312:	bf00      	nop

08009314 <__aeabi_cdcmpeq>:
 8009314:	b501      	push	{r0, lr}
 8009316:	f7ff ffb7 	bl	8009288 <__cmpdf2>
 800931a:	2800      	cmp	r0, #0
 800931c:	bf48      	it	mi
 800931e:	f110 0f00 	cmnmi.w	r0, #0
 8009322:	bd01      	pop	{r0, pc}

08009324 <__aeabi_dcmpeq>:
 8009324:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009328:	f7ff fff4 	bl	8009314 <__aeabi_cdcmpeq>
 800932c:	bf0c      	ite	eq
 800932e:	2001      	moveq	r0, #1
 8009330:	2000      	movne	r0, #0
 8009332:	f85d fb08 	ldr.w	pc, [sp], #8
 8009336:	bf00      	nop

08009338 <__aeabi_dcmplt>:
 8009338:	f84d ed08 	str.w	lr, [sp, #-8]!
 800933c:	f7ff ffea 	bl	8009314 <__aeabi_cdcmpeq>
 8009340:	bf34      	ite	cc
 8009342:	2001      	movcc	r0, #1
 8009344:	2000      	movcs	r0, #0
 8009346:	f85d fb08 	ldr.w	pc, [sp], #8
 800934a:	bf00      	nop

0800934c <__aeabi_dcmple>:
 800934c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009350:	f7ff ffe0 	bl	8009314 <__aeabi_cdcmpeq>
 8009354:	bf94      	ite	ls
 8009356:	2001      	movls	r0, #1
 8009358:	2000      	movhi	r0, #0
 800935a:	f85d fb08 	ldr.w	pc, [sp], #8
 800935e:	bf00      	nop

08009360 <__aeabi_dcmpge>:
 8009360:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009364:	f7ff ffce 	bl	8009304 <__aeabi_cdrcmple>
 8009368:	bf94      	ite	ls
 800936a:	2001      	movls	r0, #1
 800936c:	2000      	movhi	r0, #0
 800936e:	f85d fb08 	ldr.w	pc, [sp], #8
 8009372:	bf00      	nop

08009374 <__aeabi_dcmpgt>:
 8009374:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009378:	f7ff ffc4 	bl	8009304 <__aeabi_cdrcmple>
 800937c:	bf34      	ite	cc
 800937e:	2001      	movcc	r0, #1
 8009380:	2000      	movcs	r0, #0
 8009382:	f85d fb08 	ldr.w	pc, [sp], #8
 8009386:	bf00      	nop

08009388 <__aeabi_dcmpun>:
 8009388:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800938c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009390:	d102      	bne.n	8009398 <__aeabi_dcmpun+0x10>
 8009392:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8009396:	d10a      	bne.n	80093ae <__aeabi_dcmpun+0x26>
 8009398:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800939c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80093a0:	d102      	bne.n	80093a8 <__aeabi_dcmpun+0x20>
 80093a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80093a6:	d102      	bne.n	80093ae <__aeabi_dcmpun+0x26>
 80093a8:	f04f 0000 	mov.w	r0, #0
 80093ac:	4770      	bx	lr
 80093ae:	f04f 0001 	mov.w	r0, #1
 80093b2:	4770      	bx	lr

080093b4 <__aeabi_d2iz>:
 80093b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80093b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80093bc:	d215      	bcs.n	80093ea <__aeabi_d2iz+0x36>
 80093be:	d511      	bpl.n	80093e4 <__aeabi_d2iz+0x30>
 80093c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80093c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80093c8:	d912      	bls.n	80093f0 <__aeabi_d2iz+0x3c>
 80093ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80093ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80093d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80093da:	fa23 f002 	lsr.w	r0, r3, r2
 80093de:	bf18      	it	ne
 80093e0:	4240      	negne	r0, r0
 80093e2:	4770      	bx	lr
 80093e4:	f04f 0000 	mov.w	r0, #0
 80093e8:	4770      	bx	lr
 80093ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80093ee:	d105      	bne.n	80093fc <__aeabi_d2iz+0x48>
 80093f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80093f4:	bf08      	it	eq
 80093f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80093fa:	4770      	bx	lr
 80093fc:	f04f 0000 	mov.w	r0, #0
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop

08009404 <__aeabi_uldivmod>:
 8009404:	b953      	cbnz	r3, 800941c <__aeabi_uldivmod+0x18>
 8009406:	b94a      	cbnz	r2, 800941c <__aeabi_uldivmod+0x18>
 8009408:	2900      	cmp	r1, #0
 800940a:	bf08      	it	eq
 800940c:	2800      	cmpeq	r0, #0
 800940e:	bf1c      	itt	ne
 8009410:	f04f 31ff 	movne.w	r1, #4294967295
 8009414:	f04f 30ff 	movne.w	r0, #4294967295
 8009418:	f000 b97e 	b.w	8009718 <__aeabi_idiv0>
 800941c:	f1ad 0c08 	sub.w	ip, sp, #8
 8009420:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8009424:	f000 f806 	bl	8009434 <__udivmoddi4>
 8009428:	f8dd e004 	ldr.w	lr, [sp, #4]
 800942c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009430:	b004      	add	sp, #16
 8009432:	4770      	bx	lr

08009434 <__udivmoddi4>:
 8009434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009438:	468c      	mov	ip, r1
 800943a:	460e      	mov	r6, r1
 800943c:	4604      	mov	r4, r0
 800943e:	9d08      	ldr	r5, [sp, #32]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d150      	bne.n	80094e6 <__udivmoddi4+0xb2>
 8009444:	428a      	cmp	r2, r1
 8009446:	4617      	mov	r7, r2
 8009448:	d96c      	bls.n	8009524 <__udivmoddi4+0xf0>
 800944a:	fab2 fe82 	clz	lr, r2
 800944e:	f1be 0f00 	cmp.w	lr, #0
 8009452:	d00b      	beq.n	800946c <__udivmoddi4+0x38>
 8009454:	f1ce 0420 	rsb	r4, lr, #32
 8009458:	fa20 f404 	lsr.w	r4, r0, r4
 800945c:	fa01 f60e 	lsl.w	r6, r1, lr
 8009460:	ea44 0c06 	orr.w	ip, r4, r6
 8009464:	fa02 f70e 	lsl.w	r7, r2, lr
 8009468:	fa00 f40e 	lsl.w	r4, r0, lr
 800946c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8009470:	0c22      	lsrs	r2, r4, #16
 8009472:	fbbc f0f9 	udiv	r0, ip, r9
 8009476:	fa1f f887 	uxth.w	r8, r7
 800947a:	fb09 c610 	mls	r6, r9, r0, ip
 800947e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8009482:	fb00 f308 	mul.w	r3, r0, r8
 8009486:	42b3      	cmp	r3, r6
 8009488:	d909      	bls.n	800949e <__udivmoddi4+0x6a>
 800948a:	19f6      	adds	r6, r6, r7
 800948c:	f100 32ff 	add.w	r2, r0, #4294967295
 8009490:	f080 8122 	bcs.w	80096d8 <__udivmoddi4+0x2a4>
 8009494:	42b3      	cmp	r3, r6
 8009496:	f240 811f 	bls.w	80096d8 <__udivmoddi4+0x2a4>
 800949a:	3802      	subs	r0, #2
 800949c:	443e      	add	r6, r7
 800949e:	1af6      	subs	r6, r6, r3
 80094a0:	b2a2      	uxth	r2, r4
 80094a2:	fbb6 f3f9 	udiv	r3, r6, r9
 80094a6:	fb09 6613 	mls	r6, r9, r3, r6
 80094aa:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 80094ae:	fb03 f808 	mul.w	r8, r3, r8
 80094b2:	45a0      	cmp	r8, r4
 80094b4:	d909      	bls.n	80094ca <__udivmoddi4+0x96>
 80094b6:	19e4      	adds	r4, r4, r7
 80094b8:	f103 32ff 	add.w	r2, r3, #4294967295
 80094bc:	f080 810a 	bcs.w	80096d4 <__udivmoddi4+0x2a0>
 80094c0:	45a0      	cmp	r8, r4
 80094c2:	f240 8107 	bls.w	80096d4 <__udivmoddi4+0x2a0>
 80094c6:	3b02      	subs	r3, #2
 80094c8:	443c      	add	r4, r7
 80094ca:	ebc8 0404 	rsb	r4, r8, r4
 80094ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80094d2:	2100      	movs	r1, #0
 80094d4:	2d00      	cmp	r5, #0
 80094d6:	d062      	beq.n	800959e <__udivmoddi4+0x16a>
 80094d8:	fa24 f40e 	lsr.w	r4, r4, lr
 80094dc:	2300      	movs	r3, #0
 80094de:	602c      	str	r4, [r5, #0]
 80094e0:	606b      	str	r3, [r5, #4]
 80094e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e6:	428b      	cmp	r3, r1
 80094e8:	d907      	bls.n	80094fa <__udivmoddi4+0xc6>
 80094ea:	2d00      	cmp	r5, #0
 80094ec:	d055      	beq.n	800959a <__udivmoddi4+0x166>
 80094ee:	2100      	movs	r1, #0
 80094f0:	e885 0041 	stmia.w	r5, {r0, r6}
 80094f4:	4608      	mov	r0, r1
 80094f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094fa:	fab3 f183 	clz	r1, r3
 80094fe:	2900      	cmp	r1, #0
 8009500:	f040 8090 	bne.w	8009624 <__udivmoddi4+0x1f0>
 8009504:	42b3      	cmp	r3, r6
 8009506:	d302      	bcc.n	800950e <__udivmoddi4+0xda>
 8009508:	4282      	cmp	r2, r0
 800950a:	f200 80f8 	bhi.w	80096fe <__udivmoddi4+0x2ca>
 800950e:	1a84      	subs	r4, r0, r2
 8009510:	eb66 0603 	sbc.w	r6, r6, r3
 8009514:	2001      	movs	r0, #1
 8009516:	46b4      	mov	ip, r6
 8009518:	2d00      	cmp	r5, #0
 800951a:	d040      	beq.n	800959e <__udivmoddi4+0x16a>
 800951c:	e885 1010 	stmia.w	r5, {r4, ip}
 8009520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009524:	b912      	cbnz	r2, 800952c <__udivmoddi4+0xf8>
 8009526:	2701      	movs	r7, #1
 8009528:	fbb7 f7f2 	udiv	r7, r7, r2
 800952c:	fab7 fe87 	clz	lr, r7
 8009530:	f1be 0f00 	cmp.w	lr, #0
 8009534:	d135      	bne.n	80095a2 <__udivmoddi4+0x16e>
 8009536:	1bf3      	subs	r3, r6, r7
 8009538:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800953c:	fa1f fc87 	uxth.w	ip, r7
 8009540:	2101      	movs	r1, #1
 8009542:	fbb3 f0f8 	udiv	r0, r3, r8
 8009546:	0c22      	lsrs	r2, r4, #16
 8009548:	fb08 3610 	mls	r6, r8, r0, r3
 800954c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8009550:	fb0c f300 	mul.w	r3, ip, r0
 8009554:	42b3      	cmp	r3, r6
 8009556:	d907      	bls.n	8009568 <__udivmoddi4+0x134>
 8009558:	19f6      	adds	r6, r6, r7
 800955a:	f100 32ff 	add.w	r2, r0, #4294967295
 800955e:	d202      	bcs.n	8009566 <__udivmoddi4+0x132>
 8009560:	42b3      	cmp	r3, r6
 8009562:	f200 80ce 	bhi.w	8009702 <__udivmoddi4+0x2ce>
 8009566:	4610      	mov	r0, r2
 8009568:	1af6      	subs	r6, r6, r3
 800956a:	b2a2      	uxth	r2, r4
 800956c:	fbb6 f3f8 	udiv	r3, r6, r8
 8009570:	fb08 6613 	mls	r6, r8, r3, r6
 8009574:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8009578:	fb0c fc03 	mul.w	ip, ip, r3
 800957c:	45a4      	cmp	ip, r4
 800957e:	d907      	bls.n	8009590 <__udivmoddi4+0x15c>
 8009580:	19e4      	adds	r4, r4, r7
 8009582:	f103 32ff 	add.w	r2, r3, #4294967295
 8009586:	d202      	bcs.n	800958e <__udivmoddi4+0x15a>
 8009588:	45a4      	cmp	ip, r4
 800958a:	f200 80b5 	bhi.w	80096f8 <__udivmoddi4+0x2c4>
 800958e:	4613      	mov	r3, r2
 8009590:	ebcc 0404 	rsb	r4, ip, r4
 8009594:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009598:	e79c      	b.n	80094d4 <__udivmoddi4+0xa0>
 800959a:	4629      	mov	r1, r5
 800959c:	4628      	mov	r0, r5
 800959e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a2:	f1ce 0120 	rsb	r1, lr, #32
 80095a6:	fa06 f30e 	lsl.w	r3, r6, lr
 80095aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80095ae:	fa20 f901 	lsr.w	r9, r0, r1
 80095b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80095b6:	40ce      	lsrs	r6, r1
 80095b8:	ea49 0903 	orr.w	r9, r9, r3
 80095bc:	fbb6 faf8 	udiv	sl, r6, r8
 80095c0:	ea4f 4419 	mov.w	r4, r9, lsr #16
 80095c4:	fb08 661a 	mls	r6, r8, sl, r6
 80095c8:	fa1f fc87 	uxth.w	ip, r7
 80095cc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 80095d0:	fb0a f20c 	mul.w	r2, sl, ip
 80095d4:	429a      	cmp	r2, r3
 80095d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80095da:	d90a      	bls.n	80095f2 <__udivmoddi4+0x1be>
 80095dc:	19db      	adds	r3, r3, r7
 80095de:	f10a 31ff 	add.w	r1, sl, #4294967295
 80095e2:	f080 8087 	bcs.w	80096f4 <__udivmoddi4+0x2c0>
 80095e6:	429a      	cmp	r2, r3
 80095e8:	f240 8084 	bls.w	80096f4 <__udivmoddi4+0x2c0>
 80095ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80095f0:	443b      	add	r3, r7
 80095f2:	1a9b      	subs	r3, r3, r2
 80095f4:	fa1f f989 	uxth.w	r9, r9
 80095f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80095fc:	fb08 3311 	mls	r3, r8, r1, r3
 8009600:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8009604:	fb01 f60c 	mul.w	r6, r1, ip
 8009608:	429e      	cmp	r6, r3
 800960a:	d907      	bls.n	800961c <__udivmoddi4+0x1e8>
 800960c:	19db      	adds	r3, r3, r7
 800960e:	f101 32ff 	add.w	r2, r1, #4294967295
 8009612:	d26b      	bcs.n	80096ec <__udivmoddi4+0x2b8>
 8009614:	429e      	cmp	r6, r3
 8009616:	d969      	bls.n	80096ec <__udivmoddi4+0x2b8>
 8009618:	3902      	subs	r1, #2
 800961a:	443b      	add	r3, r7
 800961c:	1b9b      	subs	r3, r3, r6
 800961e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009622:	e78e      	b.n	8009542 <__udivmoddi4+0x10e>
 8009624:	f1c1 0e20 	rsb	lr, r1, #32
 8009628:	fa22 f40e 	lsr.w	r4, r2, lr
 800962c:	408b      	lsls	r3, r1
 800962e:	4323      	orrs	r3, r4
 8009630:	fa20 f70e 	lsr.w	r7, r0, lr
 8009634:	fa06 f401 	lsl.w	r4, r6, r1
 8009638:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800963c:	fa26 f60e 	lsr.w	r6, r6, lr
 8009640:	433c      	orrs	r4, r7
 8009642:	fbb6 f9fc 	udiv	r9, r6, ip
 8009646:	0c27      	lsrs	r7, r4, #16
 8009648:	fb0c 6619 	mls	r6, ip, r9, r6
 800964c:	fa1f f883 	uxth.w	r8, r3
 8009650:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8009654:	fb09 f708 	mul.w	r7, r9, r8
 8009658:	42b7      	cmp	r7, r6
 800965a:	fa02 f201 	lsl.w	r2, r2, r1
 800965e:	fa00 fa01 	lsl.w	sl, r0, r1
 8009662:	d908      	bls.n	8009676 <__udivmoddi4+0x242>
 8009664:	18f6      	adds	r6, r6, r3
 8009666:	f109 30ff 	add.w	r0, r9, #4294967295
 800966a:	d241      	bcs.n	80096f0 <__udivmoddi4+0x2bc>
 800966c:	42b7      	cmp	r7, r6
 800966e:	d93f      	bls.n	80096f0 <__udivmoddi4+0x2bc>
 8009670:	f1a9 0902 	sub.w	r9, r9, #2
 8009674:	441e      	add	r6, r3
 8009676:	1bf6      	subs	r6, r6, r7
 8009678:	b2a0      	uxth	r0, r4
 800967a:	fbb6 f4fc 	udiv	r4, r6, ip
 800967e:	fb0c 6614 	mls	r6, ip, r4, r6
 8009682:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8009686:	fb04 f808 	mul.w	r8, r4, r8
 800968a:	45b8      	cmp	r8, r7
 800968c:	d907      	bls.n	800969e <__udivmoddi4+0x26a>
 800968e:	18ff      	adds	r7, r7, r3
 8009690:	f104 30ff 	add.w	r0, r4, #4294967295
 8009694:	d228      	bcs.n	80096e8 <__udivmoddi4+0x2b4>
 8009696:	45b8      	cmp	r8, r7
 8009698:	d926      	bls.n	80096e8 <__udivmoddi4+0x2b4>
 800969a:	3c02      	subs	r4, #2
 800969c:	441f      	add	r7, r3
 800969e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 80096a2:	ebc8 0707 	rsb	r7, r8, r7
 80096a6:	fba0 8902 	umull	r8, r9, r0, r2
 80096aa:	454f      	cmp	r7, r9
 80096ac:	4644      	mov	r4, r8
 80096ae:	464e      	mov	r6, r9
 80096b0:	d314      	bcc.n	80096dc <__udivmoddi4+0x2a8>
 80096b2:	d029      	beq.n	8009708 <__udivmoddi4+0x2d4>
 80096b4:	b365      	cbz	r5, 8009710 <__udivmoddi4+0x2dc>
 80096b6:	ebba 0304 	subs.w	r3, sl, r4
 80096ba:	eb67 0706 	sbc.w	r7, r7, r6
 80096be:	fa07 fe0e 	lsl.w	lr, r7, lr
 80096c2:	40cb      	lsrs	r3, r1
 80096c4:	40cf      	lsrs	r7, r1
 80096c6:	ea4e 0303 	orr.w	r3, lr, r3
 80096ca:	e885 0088 	stmia.w	r5, {r3, r7}
 80096ce:	2100      	movs	r1, #0
 80096d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d4:	4613      	mov	r3, r2
 80096d6:	e6f8      	b.n	80094ca <__udivmoddi4+0x96>
 80096d8:	4610      	mov	r0, r2
 80096da:	e6e0      	b.n	800949e <__udivmoddi4+0x6a>
 80096dc:	ebb8 0402 	subs.w	r4, r8, r2
 80096e0:	eb69 0603 	sbc.w	r6, r9, r3
 80096e4:	3801      	subs	r0, #1
 80096e6:	e7e5      	b.n	80096b4 <__udivmoddi4+0x280>
 80096e8:	4604      	mov	r4, r0
 80096ea:	e7d8      	b.n	800969e <__udivmoddi4+0x26a>
 80096ec:	4611      	mov	r1, r2
 80096ee:	e795      	b.n	800961c <__udivmoddi4+0x1e8>
 80096f0:	4681      	mov	r9, r0
 80096f2:	e7c0      	b.n	8009676 <__udivmoddi4+0x242>
 80096f4:	468a      	mov	sl, r1
 80096f6:	e77c      	b.n	80095f2 <__udivmoddi4+0x1be>
 80096f8:	3b02      	subs	r3, #2
 80096fa:	443c      	add	r4, r7
 80096fc:	e748      	b.n	8009590 <__udivmoddi4+0x15c>
 80096fe:	4608      	mov	r0, r1
 8009700:	e70a      	b.n	8009518 <__udivmoddi4+0xe4>
 8009702:	3802      	subs	r0, #2
 8009704:	443e      	add	r6, r7
 8009706:	e72f      	b.n	8009568 <__udivmoddi4+0x134>
 8009708:	45c2      	cmp	sl, r8
 800970a:	d3e7      	bcc.n	80096dc <__udivmoddi4+0x2a8>
 800970c:	463e      	mov	r6, r7
 800970e:	e7d1      	b.n	80096b4 <__udivmoddi4+0x280>
 8009710:	4629      	mov	r1, r5
 8009712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009716:	bf00      	nop

08009718 <__aeabi_idiv0>:
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	3353494c 	.word	0x3353494c
 8009720:	535f4844 	.word	0x535f4844
 8009724:	444f7465 	.word	0x444f7465
 8009728:	6f642052 	.word	0x6f642052
 800972c:	2e2e656e 	.word	0x2e2e656e
 8009730:	0000002e 	.word	0x0000002e
 8009734:	3353494c 	.word	0x3353494c
 8009738:	535f4844 	.word	0x535f4844
 800973c:	6f4d7465 	.word	0x6f4d7465
 8009740:	64206564 	.word	0x64206564
 8009744:	2e656e6f 	.word	0x2e656e6f
 8009748:	00002e2e 	.word	0x00002e2e
 800974c:	3353494c 	.word	0x3353494c
 8009750:	535f4844 	.word	0x535f4844
 8009754:	75467465 	.word	0x75467465
 8009758:	63536c6c 	.word	0x63536c6c
 800975c:	20656c61 	.word	0x20656c61
 8009760:	656e6f64 	.word	0x656e6f64
 8009764:	002e2e2e 	.word	0x002e2e2e
 8009768:	3353494c 	.word	0x3353494c
 800976c:	535f4844 	.word	0x535f4844
 8009770:	78417465 	.word	0x78417465
 8009774:	64207369 	.word	0x64207369
 8009778:	2e656e6f 	.word	0x2e656e6f
 800977c:	00002e2e 	.word	0x00002e2e
 8009780:	3353494c 	.word	0x3353494c
 8009784:	535f4844 	.word	0x535f4844
 8009788:	6e497465 	.word	0x6e497465
 800978c:	68543174 	.word	0x68543174
 8009790:	68737265 	.word	0x68737265
 8009794:	20646c6f 	.word	0x20646c6f
 8009798:	656e6f64 	.word	0x656e6f64
 800979c:	002e2e2e 	.word	0x002e2e2e
 80097a0:	3353494c 	.word	0x3353494c
 80097a4:	535f4844 	.word	0x535f4844
 80097a8:	6e497465 	.word	0x6e497465
 80097ac:	6e6f4374 	.word	0x6e6f4374
 80097b0:	75676966 	.word	0x75676966
 80097b4:	69746172 	.word	0x69746172
 80097b8:	64206e6f 	.word	0x64206e6f
 80097bc:	2e656e6f 	.word	0x2e656e6f
 80097c0:	00002e2e 	.word	0x00002e2e
 80097c4:	3353494c 	.word	0x3353494c
 80097c8:	535f4844 	.word	0x535f4844
 80097cc:	6e497465 	.word	0x6e497465
 80097d0:	646f4d74 	.word	0x646f4d74
 80097d4:	6f642065 	.word	0x6f642065
 80097d8:	2e2e656e 	.word	0x2e2e656e
 80097dc:	0000002e 	.word	0x0000002e
 80097e0:	3353494c 	.word	0x3353494c
 80097e4:	535f4844 	.word	0x535f4844
 80097e8:	44417465 	.word	0x44417465
 80097ec:	78754143 	.word	0x78754143
 80097f0:	6e6f6420 	.word	0x6e6f6420
 80097f4:	2e2e2e65 	.word	0x2e2e2e65
 80097f8:	00000000 	.word	0x00000000
 80097fc:	3353494c 	.word	0x3353494c
 8009800:	535f4844 	.word	0x535f4844
 8009804:	44427465 	.word	0x44427465
 8009808:	6f642055 	.word	0x6f642055
 800980c:	2e2e656e 	.word	0x2e2e656e
 8009810:	0000002e 	.word	0x0000002e
 8009814:	3353494c 	.word	0x3353494c
 8009818:	535f4844 	.word	0x535f4844
 800981c:	65547465 	.word	0x65547465
 8009820:	7265706d 	.word	0x7265706d
 8009824:	72757461 	.word	0x72757461
 8009828:	6f642065 	.word	0x6f642065
 800982c:	2e2e656e 	.word	0x2e2e656e
 8009830:	0000002e 	.word	0x0000002e
 8009834:	41545323 	.word	0x41545323
 8009838:	3031252c 	.word	0x3031252c
 800983c:	252c756c 	.word	0x252c756c
 8009840:	0a246433 	.word	0x0a246433
 8009844:	00000000 	.word	0x00000000
 8009848:	00007325 	.word	0x00007325
 800984c:	37257325 	.word	0x37257325
 8009850:	25732564 	.word	0x25732564
 8009854:	73256437 	.word	0x73256437
 8009858:	25643725 	.word	0x25643725
 800985c:	32302573 	.word	0x32302573
 8009860:	000a2464 	.word	0x000a2464
 8009864:	0000002c 	.word	0x0000002c
 8009868:	58535523 	.word	0x58535523
 800986c:	5523002c 	.word	0x5523002c
 8009870:	002c5844 	.word	0x002c5844
 8009874:	58534423 	.word	0x58534423
 8009878:	4423002c 	.word	0x4423002c
 800987c:	002c5844 	.word	0x002c5844
 8009880:	504f5423 	.word	0x504f5423
 8009884:	4223002c 	.word	0x4223002c
 8009888:	002c544f 	.word	0x002c544f
 800988c:	58585823 	.word	0x58585823
 8009890:	4623002c 	.word	0x4623002c
 8009894:	002c4c41 	.word	0x002c4c41
 8009898:	55424544 	.word	0x55424544
 800989c:	32492b47 	.word	0x32492b47
 80098a0:	41552b43 	.word	0x41552b43
 80098a4:	69205452 	.word	0x69205452
 80098a8:	2074696e 	.word	0x2074696e
 80098ac:	656e6f64 	.word	0x656e6f64
 80098b0:	002e2e2e 	.word	0x002e2e2e
 80098b4:	534d454d 	.word	0x534d454d
 80098b8:	696e6920 	.word	0x696e6920
 80098bc:	6f642074 	.word	0x6f642074
 80098c0:	2e2e656e 	.word	0x2e2e656e
 80098c4:	0000002e 	.word	0x0000002e
 80098c8:	6f727245 	.word	0x6f727245
 80098cc:	454d2072 	.word	0x454d2072
 80098d0:	6920534d 	.word	0x6920534d
 80098d4:	2c74696e 	.word	0x2c74696e
 80098d8:	74657220 	.word	0x74657220
 80098dc:	2e2e7972 	.word	0x2e2e7972
 80098e0:	0000002e 	.word	0x0000002e
 80098e4:	534d454d 	.word	0x534d454d
 80098e8:	6e6f6320 	.word	0x6e6f6320
 80098ec:	20676966 	.word	0x20676966
 80098f0:	656e6f64 	.word	0x656e6f64
 80098f4:	002e2e2e 	.word	0x002e2e2e
 80098f8:	6f727245 	.word	0x6f727245
 80098fc:	454d2072 	.word	0x454d2072
 8009900:	6320534d 	.word	0x6320534d
 8009904:	69666e6f 	.word	0x69666e6f
 8009908:	72202c67 	.word	0x72202c67
 800990c:	79727465 	.word	0x79727465
 8009910:	002e2e2e 	.word	0x002e2e2e
 8009914:	65636572 	.word	0x65636572
 8009918:	64657669 	.word	0x64657669
 800991c:	0a732520 	.word	0x0a732520
 8009920:	00000000 	.word	0x00000000
 8009924:	51455223 	.word	0x51455223
 8009928:	0000002c 	.word	0x0000002c
 800992c:	444e4523 	.word	0x444e4523
 8009930:	0000002c 	.word	0x0000002c
 8009934:	4e4f4323 	.word	0x4e4f4323
 8009938:	0000002c 	.word	0x0000002c
 800993c:	0000000a 	.word	0x0000000a

08009940 <zeroes.7258>:
 8009940:	30303030 30303030 30303030 30303030     0000000000000000
 8009950:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8009960:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8009970:	00000000 33323130 37363534 62613938     ....0123456789ab
 8009980:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8009990:	00000030                                0...

08009994 <blanks.7257>:
 8009994:	20202020 20202020 20202020 20202020                     

080099a4 <zeroes.7273>:
 80099a4:	30303030 30303030 30303030 30303030     0000000000000000

080099b4 <blanks.7272>:
 80099b4:	20202020 20202020 20202020 20202020                     
 80099c4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 80099d4:	00000000                                ....

080099d8 <__mprec_tens>:
 80099d8:	00000000 3ff00000 00000000 40240000     .......?......$@
 80099e8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 80099f8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8009a08:	00000000 412e8480 00000000 416312d0     .......A......cA
 8009a18:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8009a28:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8009a38:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8009a48:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8009a58:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8009a68:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8009a78:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8009a88:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8009a98:	79d99db4 44ea7843                       ...yCx.D

08009aa0 <__mprec_bigtens>:
 8009aa0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8009ab0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8009ac0:	7f73bf3c 75154fdd                       <.s..O.u

08009ac8 <p05.6087>:
 8009ac8:	00000005 00000019 0000007d 00000043     ........}...C...
 8009ad8:	49534f50 00000058 0000002e              POSIX.......

08009ae4 <_ctype_>:
 8009ae4:	20202000 20202020 28282020 20282828     .         ((((( 
 8009af4:	20202020 20202020 20202020 20202020                     
 8009b04:	10108820 10101010 10101010 10101010      ...............
 8009b14:	04040410 04040404 10040404 10101010     ................
 8009b24:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8009b34:	01010101 01010101 01010101 10101010     ................
 8009b44:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8009b54:	02020202 02020202 02020202 10101010     ................
 8009b64:	00000020 00000000 00000000 00000000      ...............
	...
