
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	51 0f 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     Q...............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 e1 04 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00ae28 	.word	0x0c00ae28
 800024c:	20000000 	.word	0x20000000
 8000250:	000009e8 	.word	0x000009e8
 8000254:	0c00b810 	.word	0x0c00b810
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00ae28 	.word	0x0c00ae28
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00ae28 	.word	0x0c00ae28
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200009e8 	.word	0x200009e8
 800027c:	000000e4 	.word	0x000000e4
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000294:	0800260d 	.word	0x0800260d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800418d 	.word	0x0800418d
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	0800224d 	.word	0x0800224d

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	db0b      	blt.n	80002de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c6:	4909      	ldr	r1, [pc, #36]	; (80002ec <__NVIC_EnableIRQ+0x38>)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	095b      	lsrs	r3, r3, #5
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	f002 021f 	and.w	r2, r2, #31
 80002d4:	2001      	movs	r0, #1
 80002d6:	fa00 f202 	lsl.w	r2, r0, r2
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	490d      	ldr	r1, [pc, #52]	; (800033c <__NVIC_SetPriority+0x4c>)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	0092      	lsls	r2, r2, #2
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	4909      	ldr	r1, [pc, #36]	; (8000340 <__NVIC_SetPriority+0x50>)
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f003 030f 	and.w	r3, r3, #15
 8000322:	3b04      	subs	r3, #4
 8000324:	683a      	ldr	r2, [r7, #0]
 8000326:	b2d2      	uxtb	r2, r2
 8000328:	0092      	lsls	r2, r2, #2
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
  }
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
 8000350:	4613      	mov	r3, r2
 8000352:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000354:	78f8      	ldrb	r0, [r7, #3]
 8000356:	78fb      	ldrb	r3, [r7, #3]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	3306      	adds	r3, #6
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	4413      	add	r3, r2
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000366:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000368:	431a      	orrs	r2, r3
 800036a:	6879      	ldr	r1, [r7, #4]
 800036c:	1d83      	adds	r3, r0, #6
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	440b      	add	r3, r1
 8000372:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800038c:	b2db      	uxtb	r3, r3
 800038e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000392:	b2db      	uxtb	r3, r3
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	431a      	orrs	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop

080003c8 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80003d6:	f003 0308 	and.w	r3, r3, #8
 80003da:	2b00      	cmp	r3, #0
 80003dc:	bf14      	ite	ne
 80003de:	2301      	movne	r3, #1
 80003e0:	2300      	moveq	r3, #0
 80003e2:	b2db      	uxtb	r3, r3
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003fc:	f023 030f 	bic.w	r3, r3, #15
 8000400:	f043 0202 	orr.w	r2, r3, #2
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	460b      	mov	r3, r1
 800041e:	70fb      	strb	r3, [r7, #3]
 8000420:	4613      	mov	r3, r2
 8000422:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
 8000424:	78f8      	ldrb	r0, [r7, #3]
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	3306      	adds	r3, #6
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	4413      	add	r3, r2
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	f023 0250 	bic.w	r2, r3, #80	; 0x50
 8000436:	6879      	ldr	r1, [r7, #4]
 8000438:	1d83      	adds	r3, r0, #6
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	440b      	add	r3, r1
 800043e:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000440:	78ba      	ldrb	r2, [r7, #2]
 8000442:	78fb      	ldrb	r3, [r7, #3]
 8000444:	4619      	mov	r1, r3
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f7ff ff7c 	bl	8000344 <XMC_USIC_CH_SetInputSource>
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <_init_uart0_ch0>:
    .stop_bits = 1U,
    .baudrate = 115200U
};
/****************************************************************** FUNCTIONS */
void _init_uart0_ch0()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
    /* USIC channels initialization */
    XMC_UART_CH_Init (XMC_UART0_CH0, &uart_config);
 8000458:	491c      	ldr	r1, [pc, #112]	; (80004cc <_init_uart0_ch0+0x78>)
 800045a:	481d      	ldr	r0, [pc, #116]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800045c:	f002 fb58 	bl	8002b10 <XMC_UART_CH_Init>

    XMC_UART_CH_SetInputSource (XMC_UART0_CH0, XMC_UART_CH_INPUT_RXD,
 8000460:	2201      	movs	r2, #1
 8000462:	2100      	movs	r1, #0
 8000464:	481a      	ldr	r0, [pc, #104]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000466:	f7ff ffd5 	bl	8000414 <XMC_UART_CH_SetInputSource>
    /* FIFOs initialization for both channels:
     *  8 entries for TxFIFO from point 0, LIMIT=1
     *  8 entries for RxFIFO from point 8, LIMIT=7 (SRBI is set if all 8*data have
     *                                              been received)
     *  */
    XMC_USIC_CH_TXFIFO_Configure (XMC_UART0_CH0, 0, XMC_USIC_CH_FIFO_SIZE_8WORDS, TX_FIFO_INITIAL_LIMIT);
 800046a:	2300      	movs	r3, #0
 800046c:	2203      	movs	r2, #3
 800046e:	2100      	movs	r1, #0
 8000470:	4817      	ldr	r0, [pc, #92]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000472:	f002 fe77 	bl	8003164 <XMC_USIC_CH_TXFIFO_Configure>
    XMC_USIC_CH_RXFIFO_Configure (XMC_UART0_CH0, 8, XMC_USIC_CH_FIFO_SIZE_8WORDS, RX_FIFO_INITIAL_LIMIT);
 8000476:	2300      	movs	r3, #0
 8000478:	2203      	movs	r2, #3
 800047a:	2108      	movs	r1, #8
 800047c:	4814      	ldr	r0, [pc, #80]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800047e:	f002 fe99 	bl	80031b4 <XMC_USIC_CH_RXFIFO_Configure>

    /* Enabling events for TX FIFO and RX FIFO */
    XMC_USIC_CH_RXFIFO_EnableEvent (XMC_UART0_CH0,
 8000482:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8000486:	4812      	ldr	r0, [pc, #72]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000488:	f7ff ff8a 	bl	80003a0 <XMC_USIC_CH_RXFIFO_EnableEvent>
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE);

    /* Connecting the previously enabled events to a Service Request line number */
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	2110      	movs	r1, #16
 8000490:	480f      	ldr	r0, [pc, #60]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000492:	f002 feb9 	bl	8003208 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2113      	movs	r1, #19
 800049a:	480d      	ldr	r0, [pc, #52]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800049c:	f002 feb4 	bl	8003208 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>

    /* Start USIC operation as UART */
    XMC_UART_CH_Start (XMC_UART0_CH0);
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <_init_uart0_ch0+0x7c>)
 80004a2:	f7ff ffa5 	bl	80003f0 <XMC_UART_CH_Start>

    /*Initialization of the necessary ports*/
    XMC_GPIO_Init (UART_TX, &uart_tx);
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <_init_uart0_ch0+0x80>)
 80004a8:	2105      	movs	r1, #5
 80004aa:	480b      	ldr	r0, [pc, #44]	; (80004d8 <_init_uart0_ch0+0x84>)
 80004ac:	f002 fa70 	bl	8002990 <XMC_GPIO_Init>
    XMC_GPIO_Init (UART_RX, &uart_rx);
 80004b0:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <_init_uart0_ch0+0x88>)
 80004b2:	2104      	movs	r1, #4
 80004b4:	4808      	ldr	r0, [pc, #32]	; (80004d8 <_init_uart0_ch0+0x84>)
 80004b6:	f002 fa6b 	bl	8002990 <XMC_GPIO_Init>

    /* Configuring priority and enabling NVIC IRQ for the defined service request
    line number */
    NVIC_SetPriority (USIC0_0_IRQn, 63U);
 80004ba:	213f      	movs	r1, #63	; 0x3f
 80004bc:	2054      	movs	r0, #84	; 0x54
 80004be:	f7ff ff17 	bl	80002f0 <__NVIC_SetPriority>
    NVIC_EnableIRQ (USIC0_0_IRQn);
 80004c2:	2054      	movs	r0, #84	; 0x54
 80004c4:	f7ff fef6 	bl	80002b4 <__NVIC_EnableIRQ>

    return;
 80004c8:	bf00      	nop
}
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000000c 	.word	0x2000000c
 80004d0:	40030000 	.word	0x40030000
 80004d4:	20000000 	.word	0x20000000
 80004d8:	48028100 	.word	0x48028100
 80004dc:	20000a2c 	.word	0x20000a2c

080004e0 <USIC0_0_IRQHandler>:

void USIC0_0_IRQHandler (void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	71fb      	strb	r3, [r7, #7]

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 80004ea:	e01f      	b.n	800052c <USIC0_0_IRQHandler+0x4c>
        rx_tmp = XMC_UART_CH_GetReceivedData (XMC_UART0_CH0);
 80004ec:	4816      	ldr	r0, [pc, #88]	; (8000548 <USIC0_0_IRQHandler+0x68>)
 80004ee:	f002 fb8d 	bl	8002c0c <XMC_UART_CH_GetReceivedData>
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]

        if ( (rx_tmp != STRING_CR) && (!str_available)) {
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b0d      	cmp	r3, #13
 80004fa:	d011      	beq.n	8000520 <USIC0_0_IRQHandler+0x40>
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <USIC0_0_IRQHandler+0x6c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	f083 0301 	eor.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d00a      	beq.n	8000520 <USIC0_0_IRQHandler+0x40>
            rx_buffer[rx_ctr++] = rx_tmp;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	b2d1      	uxtb	r1, r2
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 8000514:	7011      	strb	r1, [r2, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <USIC0_0_IRQHandler+0x74>)
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	5453      	strb	r3, [r2, r1]
 800051e:	e005      	b.n	800052c <USIC0_0_IRQHandler+0x4c>
        } else {
            rx_ctr = 0;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
            str_available = true;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <USIC0_0_IRQHandler+0x6c>)
 8000528:	2201      	movs	r2, #1
 800052a:	701a      	strb	r2, [r3, #0]
{
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 800052c:	4806      	ldr	r0, [pc, #24]	; (8000548 <USIC0_0_IRQHandler+0x68>)
 800052e:	f7ff ff4b 	bl	80003c8 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8000532:	4603      	mov	r3, r0
 8000534:	f083 0301 	eor.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1d6      	bne.n	80004ec <USIC0_0_IRQHandler+0xc>
        } else {
            rx_ctr = 0;
            str_available = true;
        }
    }
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40030000 	.word	0x40030000
 800054c:	200009e8 	.word	0x200009e8
 8000550:	20000a38 	.word	0x20000a38
 8000554:	200009ec 	.word	0x200009ec

08000558 <_uart_printf>:

    return 0;
}

uint8_t _uart_printf (char *fmt, ...)
{
 8000558:	b40f      	push	{r0, r1, r2, r3}
 800055a:	b580      	push	{r7, lr}
 800055c:	b0c2      	sub	sp, #264	; 0x108
 800055e:	af00      	add	r7, sp, #0
    va_list arg_ptr;
    char buffer[BUFFER_SIZE_PRINTF];

    if (fmt == NULL)  {
 8000560:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000564:	2b00      	cmp	r3, #0
 8000566:	d101      	bne.n	800056c <_uart_printf+0x14>
        return ERR_OUT_OF_MEMORY;
 8000568:	2364      	movs	r3, #100	; 0x64
 800056a:	e010      	b.n	800058e <_uart_printf+0x36>
    }

    va_start (arg_ptr, fmt);
 800056c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    vsprintf (buffer, fmt, arg_ptr);
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800057a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800057e:	4618      	mov	r0, r3
 8000580:	f006 ffc6 	bl	8007510 <vsprintf>
    va_end (arg_ptr);

    _uart_send_string (buffer);
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f80a 	bl	80005a0 <_uart_send_string>
    return 0;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000594:	46bd      	mov	sp, r7
 8000596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800059a:	b004      	add	sp, #16
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <_uart_send_string>:

uint8_t _uart_send_string (char *str)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <_uart_send_string+0x12>
        return ERR_OUT_OF_MEMORY;
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	e01d      	b.n	80005ee <_uart_send_string+0x4e>
    }

    for (int i = 0; i < strlen (str); i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e012      	b.n	80005de <_uart_send_string+0x3e>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 80005b8:	bf00      	nop
 80005ba:	480f      	ldr	r0, [pc, #60]	; (80005f8 <_uart_send_string+0x58>)
 80005bc:	f7ff fee0 	bl	8000380 <XMC_USIC_CH_GetTransmitBufferStatus>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b80      	cmp	r3, #128	; 0x80
 80005c4:	d0f9      	beq.n	80005ba <_uart_send_string+0x1a>
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	4619      	mov	r1, r3
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <_uart_send_string+0x58>)
 80005d4:	f002 faf4 	bl	8002bc0 <XMC_UART_CH_Transmit>
{
    if (str == NULL) {
        return ERR_OUT_OF_MEMORY;
    }

    for (int i = 0; i < strlen (str); i++) {
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f003 ff6e 	bl	80044c0 <strlen>
 80005e4:	4602      	mov	r2, r0
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8e5      	bhi.n	80005b8 <_uart_send_string+0x18>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
    }
    return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40030000 	.word	0x40030000

080005fc <_uart_get_string>:

uint8_t _uart_get_string (char *str)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <_uart_get_string+0x12>
        return ERR_OUT_OF_MEMORY;
 800060a:	2364      	movs	r3, #100	; 0x64
 800060c:	e019      	b.n	8000642 <_uart_get_string+0x46>
    }

    while (!str_available);
 800060e:	bf00      	nop
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <_uart_get_string+0x50>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f083 0301 	eor.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f8      	bne.n	8000610 <_uart_get_string+0x14>
    memcpy (str, &rx_buffer, strlen (rx_buffer));
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <_uart_get_string+0x54>)
 8000620:	f003 ff4e 	bl	80044c0 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4909      	ldr	r1, [pc, #36]	; (8000650 <_uart_get_string+0x54>)
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f003 fdd6 	bl	80041dc <memcpy>
    memset (&rx_buffer, 0x00, BUFFER_SIZE_RX);
 8000630:	2240      	movs	r2, #64	; 0x40
 8000632:	2100      	movs	r1, #0
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <_uart_get_string+0x54>)
 8000636:	f003 fe6b 	bl	8004310 <memset>

    str_available = false;
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <_uart_get_string+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
    return 0;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200009e8 	.word	0x200009e8
 8000650:	200009ec 	.word	0x200009ec

08000654 <pwm>:
#include "servo_library.h"

void pwm(double dutycycle, uint8_t out)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800065e:	4613      	mov	r3, r2
 8000660:	71fb      	strb	r3, [r7, #7]
	if (out == 0)
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d105      	bne.n	8000674 <pwm+0x20>
	{
		pwmXMC(dutycycle, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800066e:	f000 f913 	bl	8000898 <pwmXMC>
	}
	else
	{
		pwmXMC(dutycycle, 1);
	}
}
 8000672:	e004      	b.n	800067e <pwm+0x2a>
	{
		pwmXMC(dutycycle, 0);
	}
	else
	{
		pwmXMC(dutycycle, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800067a:	f000 f90d 	bl	8000898 <pwmXMC>
	}
}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop

08000688 <initServoPWM>:

void initServoPWM()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	initServoPWMXMC();
 800068c:	f000 f886 	bl	800079c <initServoPWMXMC>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}

08000694 <P1_1_set_mode>:

__STATIC_INLINE uint32_t P1_0_read(void){
    return(PORT1->IN & 0x00000001UL);
}

__STATIC_INLINE void P1_1_set_mode(uint8_t mode){
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
    PORT1->IOCR0 &= ~0x0000f800UL;
 800069e:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <P1_1_set_mode+0x30>)
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <P1_1_set_mode+0x30>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80006a8:	6113      	str	r3, [r2, #16]
    PORT1->IOCR0 |= mode << 8;
 80006aa:	4906      	ldr	r1, [pc, #24]	; (80006c4 <P1_1_set_mode+0x30>)
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <P1_1_set_mode+0x30>)
 80006ae:	691b      	ldr	r3, [r3, #16]
 80006b0:	79fa      	ldrb	r2, [r7, #7]
 80006b2:	0212      	lsls	r2, r2, #8
 80006b4:	4313      	orrs	r3, r2
 80006b6:	610b      	str	r3, [r1, #16]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	48028100 	.word	0x48028100

080006c8 <P1_1_set_driver_strength>:

__STATIC_INLINE void P1_1_set_driver_strength(uint8_t strength){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
    PORT1->PDR0 &= ~0x00000070UL;
 80006d2:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <P1_1_set_driver_strength+0x30>)
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <P1_1_set_driver_strength+0x30>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006dc:	6413      	str	r3, [r2, #64]	; 0x40
    PORT1->PDR0 |= strength << 4;
 80006de:	4906      	ldr	r1, [pc, #24]	; (80006f8 <P1_1_set_driver_strength+0x30>)
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <P1_1_set_driver_strength+0x30>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	79fa      	ldrb	r2, [r7, #7]
 80006e6:	0112      	lsls	r2, r2, #4
 80006e8:	4313      	orrs	r3, r2
 80006ea:	640b      	str	r3, [r1, #64]	; 0x40
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	48028100 	.word	0x48028100

080006fc <P1_1_reset>:

__STATIC_INLINE void P1_1_set(void){
    PORT1->OMR = 0x00000002UL;
}

__STATIC_INLINE void P1_1_reset(void){
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
    PORT1->OMR = 0x00020000UL;
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <P1_1_reset+0x18>)
 8000702:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000706:	605a      	str	r2, [r3, #4]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	48028100 	.word	0x48028100

08000718 <P1_2_set_mode>:

__STATIC_INLINE uint32_t P1_1_read(void){
    return(PORT1->IN & 0x00000002UL);
}

__STATIC_INLINE void P1_2_set_mode(uint8_t mode){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
    PORT1->IOCR0 &= ~0x00f80000UL;
 8000722:	4a09      	ldr	r2, [pc, #36]	; (8000748 <P1_2_set_mode+0x30>)
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <P1_2_set_mode+0x30>)
 8000726:	691b      	ldr	r3, [r3, #16]
 8000728:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 800072c:	6113      	str	r3, [r2, #16]
    PORT1->IOCR0 |= mode << 16;
 800072e:	4906      	ldr	r1, [pc, #24]	; (8000748 <P1_2_set_mode+0x30>)
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <P1_2_set_mode+0x30>)
 8000732:	691b      	ldr	r3, [r3, #16]
 8000734:	79fa      	ldrb	r2, [r7, #7]
 8000736:	0412      	lsls	r2, r2, #16
 8000738:	4313      	orrs	r3, r2
 800073a:	610b      	str	r3, [r1, #16]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	48028100 	.word	0x48028100

0800074c <P1_2_set_driver_strength>:

__STATIC_INLINE void P1_2_set_driver_strength(uint8_t strength){
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
    PORT1->PDR0 &= ~0x00000700UL;
 8000756:	4a09      	ldr	r2, [pc, #36]	; (800077c <P1_2_set_driver_strength+0x30>)
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <P1_2_set_driver_strength+0x30>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000760:	6413      	str	r3, [r2, #64]	; 0x40
    PORT1->PDR0 |= strength << 8;
 8000762:	4906      	ldr	r1, [pc, #24]	; (800077c <P1_2_set_driver_strength+0x30>)
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <P1_2_set_driver_strength+0x30>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	0212      	lsls	r2, r2, #8
 800076c:	4313      	orrs	r3, r2
 800076e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	48028100 	.word	0x48028100

08000780 <P1_2_reset>:

__STATIC_INLINE void P1_2_set(void){
    PORT1->OMR = 0x00000004UL;
}

__STATIC_INLINE void P1_2_reset(void){
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
    PORT1->OMR = 0x00040000UL;
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <P1_2_reset+0x18>)
 8000786:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800078a:	605a      	str	r2, [r3, #4]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	48028100 	.word	0x48028100

0800079c <initServoPWMXMC>:
#include "servo_driver.h"
#include "servo_library.h"

void initServoPWMXMC()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    // onboard alternate function 3 at CCU40 slice 2 = CCU40.OUT2 = CCU40.CC42
    // onboard alternate function 3 at CCU40 slice 1 = CCU40.OUT1 = CCU40.CC41
    P1_1_set_mode(OUTPUT_PP_AF3);
 80007a0:	2098      	movs	r0, #152	; 0x98
 80007a2:	f7ff ff77 	bl	8000694 <P1_1_set_mode>
    P1_1_set_driver_strength(STRONG);
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff ff8e 	bl	80006c8 <P1_1_set_driver_strength>
    P1_1_reset();
 80007ac:	f7ff ffa6 	bl	80006fc <P1_1_reset>

    P1_2_set_mode(OUTPUT_PP_AF3);
 80007b0:	2098      	movs	r0, #152	; 0x98
 80007b2:	f7ff ffb1 	bl	8000718 <P1_2_set_mode>
    P1_2_set_driver_strength(STRONG);
 80007b6:	2002      	movs	r0, #2
 80007b8:	f7ff ffc8 	bl	800074c <P1_2_set_driver_strength>
    P1_2_reset();
 80007bc:	f7ff ffe0 	bl	8000780 <P1_2_reset>

    // setup CC40 unit with shadow transfer
    SCU_RESET->PRSET0 |= (1 << SCU_RESET_PRSET0_CCU40RS_Pos);		// peripheral 0 reset set - CCU40RS - CCU40 timer
 80007c0:	4a2e      	ldr	r2, [pc, #184]	; (800087c <initServoPWMXMC+0xe0>)
 80007c2:	4b2e      	ldr	r3, [pc, #184]	; (800087c <initServoPWMXMC+0xe0>)
 80007c4:	691b      	ldr	r3, [r3, #16]
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6113      	str	r3, [r2, #16]
    SCU_RESET->PRCLR0 |= (1 << SCU_RESET_PRCLR0_CCU40RS_Pos);		// peripheral 0 reset clear - CCU40RS - CCU40 timer
 80007cc:	4a2b      	ldr	r2, [pc, #172]	; (800087c <initServoPWMXMC+0xe0>)
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <initServoPWMXMC+0xe0>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	6153      	str	r3, [r2, #20]
    SCU_CLK->CLKSET = (1 << SCU_CLK_CLKSET_CCUCEN_Pos); 			// clock enable register CCUCEN - CCU clock enabled
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <initServoPWMXMC+0xe4>)
 80007da:	2210      	movs	r2, #16
 80007dc:	605a      	str	r2, [r3, #4]
    CCU40->GIDLC |= (1 << CCU4_GIDLC_SPRB_Pos); 					// global idle clear - SPRB - prescaler run bit set
 80007de:	4a29      	ldr	r2, [pc, #164]	; (8000884 <initServoPWMXMC+0xe8>)
 80007e0:	4b28      	ldr	r3, [pc, #160]	; (8000884 <initServoPWMXMC+0xe8>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e8:	60d3      	str	r3, [r2, #12]

    CCU40_CC42->PSC = 6; 											// prescaler control - 0 - CCU40.OUT2
 80007ea:	4b27      	ldr	r3, [pc, #156]	; (8000888 <initServoPWMXMC+0xec>)
 80007ec:	2206      	movs	r2, #6
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
    CCU40_CC41->PSC = 6;
 80007f0:	4b26      	ldr	r3, [pc, #152]	; (800088c <initServoPWMXMC+0xf0>)
 80007f2:	2206      	movs	r2, #6
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24

    CCU40_CC42->TC |= (1 << CCU4_CC4_TC_CLST_Pos); 					// slice timer control - CLST - shadow transfer on clear - CCU40.OUT2
 80007f6:	4a24      	ldr	r2, [pc, #144]	; (8000888 <initServoPWMXMC+0xec>)
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <initServoPWMXMC+0xec>)
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6153      	str	r3, [r2, #20]
    CCU40_CC41->TC |= (1 << CCU4_CC4_TC_CLST_Pos);
 8000802:	4a22      	ldr	r2, [pc, #136]	; (800088c <initServoPWMXMC+0xf0>)
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <initServoPWMXMC+0xf0>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6153      	str	r3, [r2, #20]

    CCU40->GIDLC |= (1 << CCU4_GIDLC_CS2I_Pos); 					// global idle clear - C2SI - CC43 idle mode clear - CCU40.OUT2
 800080e:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <initServoPWMXMC+0xe8>)
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <initServoPWMXMC+0xe8>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	60d3      	str	r3, [r2, #12]
    CCU40->GIDLC |= (1 << CCU4_GIDLC_CS1I_Pos);
 800081a:	4a1a      	ldr	r2, [pc, #104]	; (8000884 <initServoPWMXMC+0xe8>)
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <initServoPWMXMC+0xe8>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	60d3      	str	r3, [r2, #12]

    SCU_GENERAL->CCUCON |= (1 << SCU_GENERAL_CCUCON_GSC40_Pos);		// CCU control register - GSC40 - global start control CCU40
 8000826:	4a1a      	ldr	r2, [pc, #104]	; (8000890 <initServoPWMXMC+0xf4>)
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <initServoPWMXMC+0xf4>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c

    CCU40_CC42->PRS = 37500; 										// period register - timer shadow period value - CCU40.OUT2
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <initServoPWMXMC+0xec>)
 8000834:	f249 227c 	movw	r2, #37500	; 0x927c
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
    CCU40_CC41->PRS = 37500;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <initServoPWMXMC+0xf0>)
 800083c:	f249 227c 	movw	r2, #37500	; 0x927c
 8000840:	635a      	str	r2, [r3, #52]	; 0x34

    CCU40_CC42->TCSET = 1;											// slice timer run set - CCU40.OUT2
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <initServoPWMXMC+0xec>)
 8000844:	2201      	movs	r2, #1
 8000846:	60da      	str	r2, [r3, #12]
    CCU40_CC41->TCSET = 1;
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <initServoPWMXMC+0xf0>)
 800084a:	2201      	movs	r2, #1
 800084c:	60da      	str	r2, [r3, #12]

    // initial output values
    CCU40_CC42->CRS = 37500;										// compare register - timer shadow compare value - CCU40.OUT2
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <initServoPWMXMC+0xec>)
 8000850:	f249 227c 	movw	r2, #37500	; 0x927c
 8000854:	63da      	str	r2, [r3, #60]	; 0x3c
    CCU40_CC41->CRS = 37500;
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <initServoPWMXMC+0xf0>)
 8000858:	f249 227c 	movw	r2, #37500	; 0x927c
 800085c:	63da      	str	r2, [r3, #60]	; 0x3c

    CCU40->GCSS |= (1 << CCU4_GCSS_S2SE_Pos); 						// global channel set - S3SE slice 2 shadow transfer set enable
 800085e:	4a09      	ldr	r2, [pc, #36]	; (8000884 <initServoPWMXMC+0xe8>)
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <initServoPWMXMC+0xe8>)
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000868:	6113      	str	r3, [r2, #16]
    CCU40->GCSS |= (1 << CCU4_GCSS_S1SE_Pos);
 800086a:	4a06      	ldr	r2, [pc, #24]	; (8000884 <initServoPWMXMC+0xe8>)
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <initServoPWMXMC+0xe8>)
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	f043 0310 	orr.w	r3, r3, #16
 8000874:	6113      	str	r3, [r2, #16]
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	50004400 	.word	0x50004400
 8000880:	50004600 	.word	0x50004600
 8000884:	4000c000 	.word	0x4000c000
 8000888:	4000c300 	.word	0x4000c300
 800088c:	4000c200 	.word	0x4000c200
 8000890:	50004000 	.word	0x50004000
 8000894:	00000000 	.word	0x00000000

08000898 <pwmXMC>:

uint8_t pwmXMC(double dutycycle, uint8_t out)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80008a2:	4613      	mov	r3, r2
 80008a4:	71fb      	strb	r3, [r7, #7]
    double dcCalc = 0;
 80008a6:	f04f 0300 	mov.w	r3, #0
 80008aa:	f04f 0400 	mov.w	r4, #0
 80008ae:	e9c7 3406 	strd	r3, r4, [r7, #24]
    uint32_t intdcCalc = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]

    if (dutycycle < 0 || dutycycle > 100)
 80008b6:	f04f 0200 	mov.w	r2, #0
 80008ba:	f04f 0300 	mov.w	r3, #0
 80008be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80008c2:	f003 fbd7 	bl	8004074 <__aeabi_dcmplt>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d109      	bne.n	80008e0 <pwmXMC+0x48>
 80008cc:	f04f 0200 	mov.w	r2, #0
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <pwmXMC+0xe0>)
 80008d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80008d6:	f003 fbeb 	bl	80040b0 <__aeabi_dcmpgt>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <pwmXMC+0x4c>
    {
        return 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	e03a      	b.n	800095a <pwmXMC+0xc2>
    }

    dcCalc = 37500 - (37500 * dutycycle * 0.01);
 80008e4:	a320      	add	r3, pc, #128	; (adr r3, 8000968 <pwmXMC+0xd0>)
 80008e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80008ee:	f003 f94f 	bl	8003b90 <__aeabi_dmul>
 80008f2:	4603      	mov	r3, r0
 80008f4:	460c      	mov	r4, r1
 80008f6:	4618      	mov	r0, r3
 80008f8:	4621      	mov	r1, r4
 80008fa:	a31d      	add	r3, pc, #116	; (adr r3, 8000970 <pwmXMC+0xd8>)
 80008fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000900:	f003 f946 	bl	8003b90 <__aeabi_dmul>
 8000904:	4603      	mov	r3, r0
 8000906:	460c      	mov	r4, r1
 8000908:	461a      	mov	r2, r3
 800090a:	4623      	mov	r3, r4
 800090c:	a116      	add	r1, pc, #88	; (adr r1, 8000968 <pwmXMC+0xd0>)
 800090e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000912:	f002 ff89 	bl	8003828 <__aeabi_dsub>
 8000916:	4603      	mov	r3, r0
 8000918:	460c      	mov	r4, r1
 800091a:	e9c7 3406 	strd	r3, r4, [r7, #24]
    intdcCalc = (uint32_t)dcCalc;
 800091e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000922:	f003 fc0d 	bl	8004140 <__aeabi_d2uiz>
 8000926:	4603      	mov	r3, r0
 8000928:	617b      	str	r3, [r7, #20]

	if (out == 0)
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d10a      	bne.n	8000946 <pwmXMC+0xae>
	{
	    CCU40_CC42->CRS = intdcCalc;									// compare register . timer shadow compare value - CCU40.OUT2
 8000930:	4a12      	ldr	r2, [pc, #72]	; (800097c <pwmXMC+0xe4>)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	63d3      	str	r3, [r2, #60]	; 0x3c
	    CCU40->GCSS |= (1<<CCU4_GCSS_S2SE_Pos); 						// global channel set - S2SE slice 2 shadow transfer set enable
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <pwmXMC+0xe8>)
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <pwmXMC+0xe8>)
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000940:	6113      	str	r3, [r2, #16]
		return 0;
 8000942:	2300      	movs	r3, #0
 8000944:	e009      	b.n	800095a <pwmXMC+0xc2>
	}
	else
	{
	    CCU40_CC41->CRS = intdcCalc;
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <pwmXMC+0xec>)
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	63d3      	str	r3, [r2, #60]	; 0x3c
	    CCU40->GCSS |= (1<<CCU4_GCSS_S1SE_Pos);
 800094c:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <pwmXMC+0xe8>)
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <pwmXMC+0xe8>)
 8000950:	691b      	ldr	r3, [r3, #16]
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6113      	str	r3, [r2, #16]
		return 0;
 8000958:	2300      	movs	r3, #0
	}
}
 800095a:	4618      	mov	r0, r3
 800095c:	3724      	adds	r7, #36	; 0x24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd90      	pop	{r4, r7, pc}
 8000962:	bf00      	nop
 8000964:	f3af 8000 	nop.w
 8000968:	00000000 	.word	0x00000000
 800096c:	40e24f80 	.word	0x40e24f80
 8000970:	47ae147b 	.word	0x47ae147b
 8000974:	3f847ae1 	.word	0x3f847ae1
 8000978:	40590000 	.word	0x40590000
 800097c:	4000c300 	.word	0x4000c300
 8000980:	4000c000 	.word	0x4000c000
 8000984:	4000c200 	.word	0x4000c200

08000988 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	2201      	movs	r2, #1
 8000998:	409a      	lsls	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	605a      	str	r2, [r3, #4]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009be:	409a      	lsls	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	605a      	str	r2, [r3, #4]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80009e2:	409a      	lsls	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	605a      	str	r2, [r3, #4]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a04:	78fb      	ldrb	r3, [r7, #3]
 8000a06:	fa22 f303 	lsr.w	r3, r2, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <protocolComplete>:
#include "3Daccel_out_library.h"

void protocolComplete(int16_t position6D, int16_t positionX, int16_t positionY, int16_t positionZ, uint8_t temperature)
{
 8000a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1e:	b0a5      	sub	sp, #148	; 0x94
 8000a20:	af06      	add	r7, sp, #24
 8000a22:	4604      	mov	r4, r0
 8000a24:	4608      	mov	r0, r1
 8000a26:	4611      	mov	r1, r2
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4623      	mov	r3, r4
 8000a2c:	80fb      	strh	r3, [r7, #6]
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80bb      	strh	r3, [r7, #4]
 8000a32:	460b      	mov	r3, r1
 8000a34:	807b      	strh	r3, [r7, #2]
 8000a36:	4613      	mov	r3, r2
 8000a38:	803b      	strh	r3, [r7, #0]
	char string6D[8][6] = {"#USX,", "#UDX,", "#DSX,", "#DDX,", "#TOP,", "#BOT,", "#XXX,", "#FAL,"};
 8000a3a:	4b61      	ldr	r3, [pc, #388]	; (8000bc0 <protocolComplete+0x1a4>)
 8000a3c:	461c      	mov	r4, r3
 8000a3e:	f107 0648 	add.w	r6, r7, #72	; 0x48
 8000a42:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000a46:	4635      	mov	r5, r6
 8000a48:	4623      	mov	r3, r4
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	6859      	ldr	r1, [r3, #4]
 8000a4e:	689a      	ldr	r2, [r3, #8]
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a54:	3410      	adds	r4, #16
 8000a56:	3610      	adds	r6, #16
 8000a58:	4574      	cmp	r4, lr
 8000a5a:	d1f4      	bne.n	8000a46 <protocolComplete+0x2a>
	char send[RX_BUFFER_SIZE];

	memset (&send, 0, sizeof (send));
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	2240      	movs	r2, #64	; 0x40
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 fc53 	bl	8004310 <memset>

	if (statisticSend == 1)
 8000a6a:	4b56      	ldr	r3, [pc, #344]	; (8000bc4 <protocolComplete+0x1a8>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d121      	bne.n	8000ab6 <protocolComplete+0x9a>
	{
		if (sprintf(send, "#STA,%10lu,%3d$\n", packagesSent, errorcount) < 0)
 8000a72:	4b55      	ldr	r3, [pc, #340]	; (8000bc8 <protocolComplete+0x1ac>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b55      	ldr	r3, [pc, #340]	; (8000bcc <protocolComplete+0x1b0>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	f107 0008 	add.w	r0, r7, #8
 8000a7e:	4954      	ldr	r1, [pc, #336]	; (8000bd0 <protocolComplete+0x1b4>)
 8000a80:	f003 fce4 	bl	800444c <sprintf>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	da06      	bge.n	8000a98 <protocolComplete+0x7c>
		{
			errorcount++;
 8000a8a:	4b50      	ldr	r3, [pc, #320]	; (8000bcc <protocolComplete+0x1b0>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <protocolComplete+0x1b0>)
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	e00a      	b.n	8000aae <protocolComplete+0x92>
		else
		{
#if DEBUGO
			printf("send %s", send);
#endif
			_uart_printf("%s", send);
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	484d      	ldr	r0, [pc, #308]	; (8000bd4 <protocolComplete+0x1b8>)
 8000aa0:	f7ff fd5a 	bl	8000558 <_uart_printf>
			packagesSent++;
 8000aa4:	4b48      	ldr	r3, [pc, #288]	; (8000bc8 <protocolComplete+0x1ac>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a47      	ldr	r2, [pc, #284]	; (8000bc8 <protocolComplete+0x1ac>)
 8000aac:	6013      	str	r3, [r2, #0]
		}
		statisticSend = 0;
 8000aae:	4b45      	ldr	r3, [pc, #276]	; (8000bc4 <protocolComplete+0x1a8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
		return;
 8000ab4:	e081      	b.n	8000bba <protocolComplete+0x19e>
	}
	else if (buttonSend == 1)
 8000ab6:	4b48      	ldr	r3, [pc, #288]	; (8000bd8 <protocolComplete+0x1bc>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d11e      	bne.n	8000afc <protocolComplete+0xe0>
	{
		if (sprintf(send, "#BUT,1$\n") < 0)
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	4a46      	ldr	r2, [pc, #280]	; (8000bdc <protocolComplete+0x1c0>)
 8000ac4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ac6:	c303      	stmia	r3!, {r0, r1}
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	2308      	movs	r3, #8
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	da06      	bge.n	8000ade <protocolComplete+0xc2>
		{
			errorcount++;
 8000ad0:	4b3e      	ldr	r3, [pc, #248]	; (8000bcc <protocolComplete+0x1b0>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b3c      	ldr	r3, [pc, #240]	; (8000bcc <protocolComplete+0x1b0>)
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	e00a      	b.n	8000af4 <protocolComplete+0xd8>
		else
		{
#if DEBUGO
			printf("send %s", send);
#endif
			_uart_printf("%s", send);
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	483b      	ldr	r0, [pc, #236]	; (8000bd4 <protocolComplete+0x1b8>)
 8000ae6:	f7ff fd37 	bl	8000558 <_uart_printf>
			packagesSent++;
 8000aea:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <protocolComplete+0x1ac>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	4a35      	ldr	r2, [pc, #212]	; (8000bc8 <protocolComplete+0x1ac>)
 8000af2:	6013      	str	r3, [r2, #0]
		}
		buttonSend = 0;
 8000af4:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <protocolComplete+0x1bc>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
		return;
 8000afa:	e05e      	b.n	8000bba <protocolComplete+0x19e>
	}
	else if (buttonSend == 2)
 8000afc:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <protocolComplete+0x1bc>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d11e      	bne.n	8000b42 <protocolComplete+0x126>
	{
		if (sprintf(send, "#BUT,2$\n") < 0)
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	4a35      	ldr	r2, [pc, #212]	; (8000be0 <protocolComplete+0x1c4>)
 8000b0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b0c:	c303      	stmia	r3!, {r0, r1}
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	2308      	movs	r3, #8
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	da06      	bge.n	8000b24 <protocolComplete+0x108>
		{
			errorcount++;
 8000b16:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <protocolComplete+0x1b0>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <protocolComplete+0x1b0>)
 8000b20:	701a      	strb	r2, [r3, #0]
 8000b22:	e00a      	b.n	8000b3a <protocolComplete+0x11e>
		else
		{
#if DEBUGO
			printf("send %s", send);
#endif
			_uart_printf("%s", send);
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	4619      	mov	r1, r3
 8000b2a:	482a      	ldr	r0, [pc, #168]	; (8000bd4 <protocolComplete+0x1b8>)
 8000b2c:	f7ff fd14 	bl	8000558 <_uart_printf>
			packagesSent++;
 8000b30:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <protocolComplete+0x1ac>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	3301      	adds	r3, #1
 8000b36:	4a24      	ldr	r2, [pc, #144]	; (8000bc8 <protocolComplete+0x1ac>)
 8000b38:	6013      	str	r3, [r2, #0]
		}
		buttonSend = 0;
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <protocolComplete+0x1bc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
		return;
 8000b40:	e03b      	b.n	8000bba <protocolComplete+0x19e>
	}
	else
	{	
		if (sprintf(send, "%s%7d%s%7d%s%7d%s%02d$\n", string6D[position6D], positionX, ",", positionY, ",", positionZ, ",", temperature* 2 + 6) < 0)
 8000b42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b46:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	18cc      	adds	r4, r1, r3
 8000b54:	f9b7 5004 	ldrsh.w	r5, [r7, #4]
 8000b58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b5c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b60:	f897 1090 	ldrb.w	r1, [r7, #144]	; 0x90
 8000b64:	3103      	adds	r1, #3
 8000b66:	0049      	lsls	r1, r1, #1
 8000b68:	f107 0008 	add.w	r0, r7, #8
 8000b6c:	9105      	str	r1, [sp, #20]
 8000b6e:	491d      	ldr	r1, [pc, #116]	; (8000be4 <protocolComplete+0x1c8>)
 8000b70:	9104      	str	r1, [sp, #16]
 8000b72:	9203      	str	r2, [sp, #12]
 8000b74:	4a1b      	ldr	r2, [pc, #108]	; (8000be4 <protocolComplete+0x1c8>)
 8000b76:	9202      	str	r2, [sp, #8]
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <protocolComplete+0x1c8>)
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	462b      	mov	r3, r5
 8000b80:	4622      	mov	r2, r4
 8000b82:	4919      	ldr	r1, [pc, #100]	; (8000be8 <protocolComplete+0x1cc>)
 8000b84:	f003 fc62 	bl	800444c <sprintf>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	da06      	bge.n	8000b9c <protocolComplete+0x180>
		{
			errorcount++;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <protocolComplete+0x1b0>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	3301      	adds	r3, #1
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <protocolComplete+0x1b0>)
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	e00e      	b.n	8000bba <protocolComplete+0x19e>
		else
		{
#if DEBUGO
			printf("send %s", send);
#endif
			_uart_printf("%s", send);
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <protocolComplete+0x1b8>)
 8000ba4:	f7ff fcd8 	bl	8000558 <_uart_printf>
			ledSetting(0, 3);
 8000ba8:	2103      	movs	r1, #3
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 f834 	bl	8000c18 <ledSetting>
			packagesSent++;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <protocolComplete+0x1ac>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <protocolComplete+0x1ac>)
 8000bb8:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000bba:	377c      	adds	r7, #124	; 0x7c
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc0:	0800a910 	.word	0x0800a910
 8000bc4:	20000a80 	.word	0x20000a80
 8000bc8:	20000a88 	.word	0x20000a88
 8000bcc:	20000a82 	.word	0x20000a82
 8000bd0:	0800a8c4 	.word	0x0800a8c4
 8000bd4:	0800a8d8 	.word	0x0800a8d8
 8000bd8:	20000ac3 	.word	0x20000ac3
 8000bdc:	0800a8dc 	.word	0x0800a8dc
 8000be0:	0800a8e8 	.word	0x0800a8e8
 8000be4:	0800a90c 	.word	0x0800a90c
 8000be8:	0800a8f4 	.word	0x0800a8f4

08000bec <outputInit>:
        *numDouble = (double)number;
    }
}

void outputInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
    XMC_GPIO_CONFIG_t config_out;
    config_out.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	713b      	strb	r3, [r7, #4]
    config_out.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 8000bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfa:	60bb      	str	r3, [r7, #8]
    config_out.output_strength = XMC_GPIO_OUTPUT_STRENGTH_WEAK;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	733b      	strb	r3, [r7, #12]
    XMC_GPIO_Init(LED1, &config_out);
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	461a      	mov	r2, r3
 8000c04:	2100      	movs	r1, #0
 8000c06:	4803      	ldr	r0, [pc, #12]	; (8000c14 <outputInit+0x28>)
 8000c08:	f001 fec2 	bl	8002990 <XMC_GPIO_Init>
/*    XMC_GPIO_Init(LED2, &config_out);*/
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	48028100 	.word	0x48028100

08000c18 <ledSetting>:

void ledSetting(uint8_t ledID, uint8_t ledState)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	460a      	mov	r2, r1
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	4613      	mov	r3, r2
 8000c26:	71bb      	strb	r3, [r7, #6]
	switch (ledID)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <ledSetting+0x1c>
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d015      	beq.n	8000c5e <ledSetting+0x46>
			}
			break;
		}
		default:
		{
			break;
 8000c32:	e029      	b.n	8000c88 <ledSetting+0x70>
{
	switch (ledID)
	{
		case 0:
		{
			if (ledState == 0)
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d104      	bne.n	8000c44 <ledSetting+0x2c>
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4814      	ldr	r0, [pc, #80]	; (8000c90 <ledSetting+0x78>)
 8000c3e:	f7ff feb5 	bl	80009ac <XMC_GPIO_SetOutputLow>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED1);
			}
			break;
 8000c42:	e021      	b.n	8000c88 <ledSetting+0x70>
		{
			if (ledState == 0)
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
			}
			else if (ledState == 1)
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d104      	bne.n	8000c54 <ledSetting+0x3c>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4810      	ldr	r0, [pc, #64]	; (8000c90 <ledSetting+0x78>)
 8000c4e:	f7ff fe9b 	bl	8000988 <XMC_GPIO_SetOutputHigh>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED1);
			}
			break;
 8000c52:	e019      	b.n	8000c88 <ledSetting+0x70>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED1);
 8000c54:	2100      	movs	r1, #0
 8000c56:	480e      	ldr	r0, [pc, #56]	; (8000c90 <ledSetting+0x78>)
 8000c58:	f7ff feba 	bl	80009d0 <XMC_GPIO_ToggleOutput>
			}
			break;
 8000c5c:	e014      	b.n	8000c88 <ledSetting+0x70>
		}
		case 1:
		{
			if (ledState == 0)
 8000c5e:	79bb      	ldrb	r3, [r7, #6]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d104      	bne.n	8000c6e <ledSetting+0x56>
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 1);
 8000c64:	2101      	movs	r1, #1
 8000c66:	480a      	ldr	r0, [pc, #40]	; (8000c90 <ledSetting+0x78>)
 8000c68:	f7ff fea0 	bl	80009ac <XMC_GPIO_SetOutputLow>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED2);
			}
			break;
 8000c6c:	e00b      	b.n	8000c86 <ledSetting+0x6e>
		{
			if (ledState == 0)
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 1);
			}
			else if (ledState == 1)
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d104      	bne.n	8000c7e <ledSetting+0x66>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 1);
 8000c74:	2101      	movs	r1, #1
 8000c76:	4806      	ldr	r0, [pc, #24]	; (8000c90 <ledSetting+0x78>)
 8000c78:	f7ff fe86 	bl	8000988 <XMC_GPIO_SetOutputHigh>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED2);
			}
			break;
 8000c7c:	e003      	b.n	8000c86 <ledSetting+0x6e>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 1);
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED2);
 8000c7e:	2101      	movs	r1, #1
 8000c80:	4803      	ldr	r0, [pc, #12]	; (8000c90 <ledSetting+0x78>)
 8000c82:	f7ff fea5 	bl	80009d0 <XMC_GPIO_ToggleOutput>
			}
			break;
 8000c86:	bf00      	nop
		default:
		{
			break;
		}
	}
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	48028100 	.word	0x48028100
 8000c94:	00000000 	.word	0x00000000

08000c98 <pwmAngleCalc>:

void pwmAngleCalc(int16_t positionX, int16_t positionY, int16_t positionZ)
{
 8000c98:	b5b0      	push	{r4, r5, r7, lr}
 8000c9a:	b090      	sub	sp, #64	; 0x40
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	80bb      	strh	r3, [r7, #4]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	807b      	strh	r3, [r7, #2]
	double roll, pitch;
	double pi = 3.141592654;
 8000caa:	a4a5      	add	r4, pc, #660	; (adr r4, 8000f40 <pwmAngleCalc+0x2a8>)
 8000cac:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000cb0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	double divider = 8190.0;
 8000cb4:	a4a4      	add	r4, pc, #656	; (adr r4, 8000f48 <pwmAngleCalc+0x2b0>)
 8000cb6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000cba:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	double gX, gY, gZ;

	gX = positionX/divider;
 8000cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fefe 	bl	8003ac4 <__aeabi_i2d>
 8000cc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ccc:	f003 f88a 	bl	8003de4 <__aeabi_ddiv>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	460c      	mov	r4, r1
 8000cd4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	gY = positionY/divider;
 8000cd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f002 fef1 	bl	8003ac4 <__aeabi_i2d>
 8000ce2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ce6:	f003 f87d 	bl	8003de4 <__aeabi_ddiv>
 8000cea:	4603      	mov	r3, r0
 8000cec:	460c      	mov	r4, r1
 8000cee:	e9c7 3408 	strd	r3, r4, [r7, #32]
	gZ = positionZ/divider;
 8000cf2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 fee4 	bl	8003ac4 <__aeabi_i2d>
 8000cfc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000d00:	f003 f870 	bl	8003de4 <__aeabi_ddiv>
 8000d04:	4603      	mov	r3, r0
 8000d06:	460c      	mov	r4, r1
 8000d08:	e9c7 3406 	strd	r3, r4, [r7, #24]

	roll = atan(gY/(sqrt((gX*gX)+(gZ*gZ)))) * 180 / pi;
 8000d0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000d10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000d14:	f002 ff3c 	bl	8003b90 <__aeabi_dmul>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	460c      	mov	r4, r1
 8000d1c:	4625      	mov	r5, r4
 8000d1e:	461c      	mov	r4, r3
 8000d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d28:	f002 ff32 	bl	8003b90 <__aeabi_dmul>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	460b      	mov	r3, r1
 8000d30:	4620      	mov	r0, r4
 8000d32:	4629      	mov	r1, r5
 8000d34:	f002 fd7a 	bl	800382c <__adddf3>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	4621      	mov	r1, r4
 8000d40:	f002 fc4e 	bl	80035e0 <sqrt>
 8000d44:	4603      	mov	r3, r0
 8000d46:	460c      	mov	r4, r1
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000d50:	f003 f848 	bl	8003de4 <__aeabi_ddiv>
 8000d54:	4603      	mov	r3, r0
 8000d56:	460c      	mov	r4, r1
 8000d58:	4618      	mov	r0, r3
 8000d5a:	4621      	mov	r1, r4
 8000d5c:	f002 fa9c 	bl	8003298 <atan>
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	4b70      	ldr	r3, [pc, #448]	; (8000f28 <pwmAngleCalc+0x290>)
 8000d66:	f002 ff13 	bl	8003b90 <__aeabi_dmul>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	460c      	mov	r4, r1
 8000d6e:	4618      	mov	r0, r3
 8000d70:	4621      	mov	r1, r4
 8000d72:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000d76:	f003 f835 	bl	8003de4 <__aeabi_ddiv>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	460c      	mov	r4, r1
 8000d7e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	pitch = atan(gX/(sqrt((gY*gY)+(gZ*gZ)))) * 180 / pi;
 8000d82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d86:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000d8a:	f002 ff01 	bl	8003b90 <__aeabi_dmul>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	460c      	mov	r4, r1
 8000d92:	4625      	mov	r5, r4
 8000d94:	461c      	mov	r4, r3
 8000d96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d9e:	f002 fef7 	bl	8003b90 <__aeabi_dmul>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4620      	mov	r0, r4
 8000da8:	4629      	mov	r1, r5
 8000daa:	f002 fd3f 	bl	800382c <__adddf3>
 8000dae:	4603      	mov	r3, r0
 8000db0:	460c      	mov	r4, r1
 8000db2:	4618      	mov	r0, r3
 8000db4:	4621      	mov	r1, r4
 8000db6:	f002 fc13 	bl	80035e0 <sqrt>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460c      	mov	r4, r1
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4623      	mov	r3, r4
 8000dc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000dc6:	f003 f80d 	bl	8003de4 <__aeabi_ddiv>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	460c      	mov	r4, r1
 8000dce:	4618      	mov	r0, r3
 8000dd0:	4621      	mov	r1, r4
 8000dd2:	f002 fa61 	bl	8003298 <atan>
 8000dd6:	f04f 0200 	mov.w	r2, #0
 8000dda:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <pwmAngleCalc+0x290>)
 8000ddc:	f002 fed8 	bl	8003b90 <__aeabi_dmul>
 8000de0:	4603      	mov	r3, r0
 8000de2:	460c      	mov	r4, r1
 8000de4:	4618      	mov	r0, r3
 8000de6:	4621      	mov	r1, r4
 8000de8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000dec:	f002 fffa 	bl	8003de4 <__aeabi_ddiv>
 8000df0:	4603      	mov	r3, r0
 8000df2:	460c      	mov	r4, r1
 8000df4:	e9c7 3402 	strd	r3, r4, [r7, #8]

	signal1 = (90.00+roll) * 0.045 + 3.00;
 8000df8:	f04f 0200 	mov.w	r2, #0
 8000dfc:	4b4b      	ldr	r3, [pc, #300]	; (8000f2c <pwmAngleCalc+0x294>)
 8000dfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e02:	f002 fd13 	bl	800382c <__adddf3>
 8000e06:	4603      	mov	r3, r0
 8000e08:	460c      	mov	r4, r1
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	a340      	add	r3, pc, #256	; (adr r3, 8000f10 <pwmAngleCalc+0x278>)
 8000e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e14:	f002 febc 	bl	8003b90 <__aeabi_dmul>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	460c      	mov	r4, r1
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	4621      	mov	r1, r4
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	4b42      	ldr	r3, [pc, #264]	; (8000f30 <pwmAngleCalc+0x298>)
 8000e26:	f002 fd01 	bl	800382c <__adddf3>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	460c      	mov	r4, r1
 8000e2e:	4a41      	ldr	r2, [pc, #260]	; (8000f34 <pwmAngleCalc+0x29c>)
 8000e30:	e9c2 3400 	strd	r3, r4, [r2]
	signal2 = (90.00+pitch) * 0.045 + 3.05;
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	4b3c      	ldr	r3, [pc, #240]	; (8000f2c <pwmAngleCalc+0x294>)
 8000e3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e3e:	f002 fcf5 	bl	800382c <__adddf3>
 8000e42:	4603      	mov	r3, r0
 8000e44:	460c      	mov	r4, r1
 8000e46:	4618      	mov	r0, r3
 8000e48:	4621      	mov	r1, r4
 8000e4a:	a331      	add	r3, pc, #196	; (adr r3, 8000f10 <pwmAngleCalc+0x278>)
 8000e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e50:	f002 fe9e 	bl	8003b90 <__aeabi_dmul>
 8000e54:	4603      	mov	r3, r0
 8000e56:	460c      	mov	r4, r1
 8000e58:	4618      	mov	r0, r3
 8000e5a:	4621      	mov	r1, r4
 8000e5c:	a32e      	add	r3, pc, #184	; (adr r3, 8000f18 <pwmAngleCalc+0x280>)
 8000e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e62:	f002 fce3 	bl	800382c <__adddf3>
 8000e66:	4603      	mov	r3, r0
 8000e68:	460c      	mov	r4, r1
 8000e6a:	4a33      	ldr	r2, [pc, #204]	; (8000f38 <pwmAngleCalc+0x2a0>)
 8000e6c:	e9c2 3400 	strd	r3, r4, [r2]

	signal1 = (int)(signal1 * 10000 + 0.5) / 10000.0;
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <pwmAngleCalc+0x29c>)
 8000e72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e76:	a32a      	add	r3, pc, #168	; (adr r3, 8000f20 <pwmAngleCalc+0x288>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f002 fe88 	bl	8003b90 <__aeabi_dmul>
 8000e80:	4603      	mov	r3, r0
 8000e82:	460c      	mov	r4, r1
 8000e84:	4618      	mov	r0, r3
 8000e86:	4621      	mov	r1, r4
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <pwmAngleCalc+0x2a4>)
 8000e8e:	f002 fccd 	bl	800382c <__adddf3>
 8000e92:	4603      	mov	r3, r0
 8000e94:	460c      	mov	r4, r1
 8000e96:	4618      	mov	r0, r3
 8000e98:	4621      	mov	r1, r4
 8000e9a:	f003 f929 	bl	80040f0 <__aeabi_d2iz>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f002 fe0f 	bl	8003ac4 <__aeabi_i2d>
 8000ea6:	a31e      	add	r3, pc, #120	; (adr r3, 8000f20 <pwmAngleCalc+0x288>)
 8000ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eac:	f002 ff9a 	bl	8003de4 <__aeabi_ddiv>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	460c      	mov	r4, r1
 8000eb4:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <pwmAngleCalc+0x29c>)
 8000eb6:	e9c2 3400 	strd	r3, r4, [r2]
	signal2 = (int)(signal2 * 10000 + 0.5) / 10000.0;
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <pwmAngleCalc+0x2a0>)
 8000ebc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ec0:	a317      	add	r3, pc, #92	; (adr r3, 8000f20 <pwmAngleCalc+0x288>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	f002 fe63 	bl	8003b90 <__aeabi_dmul>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460c      	mov	r4, r1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <pwmAngleCalc+0x2a4>)
 8000ed8:	f002 fca8 	bl	800382c <__adddf3>
 8000edc:	4603      	mov	r3, r0
 8000ede:	460c      	mov	r4, r1
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	4621      	mov	r1, r4
 8000ee4:	f003 f904 	bl	80040f0 <__aeabi_d2iz>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 fdea 	bl	8003ac4 <__aeabi_i2d>
 8000ef0:	a30b      	add	r3, pc, #44	; (adr r3, 8000f20 <pwmAngleCalc+0x288>)
 8000ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef6:	f002 ff75 	bl	8003de4 <__aeabi_ddiv>
 8000efa:	4603      	mov	r3, r0
 8000efc:	460c      	mov	r4, r1
 8000efe:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <pwmAngleCalc+0x2a0>)
 8000f00:	e9c2 3400 	strd	r3, r4, [r2]
}
 8000f04:	bf00      	nop
 8000f06:	3740      	adds	r7, #64	; 0x40
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f0c:	f3af 8000 	nop.w
 8000f10:	70a3d70a 	.word	0x70a3d70a
 8000f14:	3fa70a3d 	.word	0x3fa70a3d
 8000f18:	66666666 	.word	0x66666666
 8000f1c:	40086666 	.word	0x40086666
 8000f20:	00000000 	.word	0x00000000
 8000f24:	40c38800 	.word	0x40c38800
 8000f28:	40668000 	.word	0x40668000
 8000f2c:	40568000 	.word	0x40568000
 8000f30:	40080000 	.word	0x40080000
 8000f34:	20000aa8 	.word	0x20000aa8
 8000f38:	20000a90 	.word	0x20000a90
 8000f3c:	3fe00000 	.word	0x3fe00000
 8000f40:	54524550 	.word	0x54524550
 8000f44:	400921fb 	.word	0x400921fb
 8000f48:	00000000 	.word	0x00000000
 8000f4c:	40bffe00 	.word	0x40bffe00

08000f50 <SysTick_Handler>:

void SysTick_Handler (void)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
    static uint32_t ticks = 0, howMuchTicks = 5;
	static uint8_t buttonIDpressed;

	readButtonDebounce();
 8000f56:	f000 f891 	bl	800107c <readButtonDebounce>

	if (circularGet(&buttonIDpressed))
 8000f5a:	483b      	ldr	r0, [pc, #236]	; (8001048 <SysTick_Handler+0xf8>)
 8000f5c:	f000 f982 	bl	8001264 <circularGet>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d018      	beq.n	8000f98 <SysTick_Handler+0x48>
    {
		switch (buttonIDpressed)
 8000f66:	4b38      	ldr	r3, [pc, #224]	; (8001048 <SysTick_Handler+0xf8>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b0e      	cmp	r3, #14
 8000f6c:	d002      	beq.n	8000f74 <SysTick_Handler+0x24>
 8000f6e:	2b0f      	cmp	r3, #15
 8000f70:	d007      	beq.n	8000f82 <SysTick_Handler+0x32>
 8000f72:	e00d      	b.n	8000f90 <SysTick_Handler+0x40>
		{
			case BUTTON1INT:
			{
				printf("button 1\n");
 8000f74:	4835      	ldr	r0, [pc, #212]	; (800104c <SysTick_Handler+0xfc>)
 8000f76:	f003 fa61 	bl	800443c <puts>
				buttonSend = 1;
 8000f7a:	4b35      	ldr	r3, [pc, #212]	; (8001050 <SysTick_Handler+0x100>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
				break;
 8000f80:	e00a      	b.n	8000f98 <SysTick_Handler+0x48>
			}
			case BUTTON2INT:
			{
				printf("button 2\n");
 8000f82:	4834      	ldr	r0, [pc, #208]	; (8001054 <SysTick_Handler+0x104>)
 8000f84:	f003 fa5a 	bl	800443c <puts>
				buttonSend = 2;
 8000f88:	4b31      	ldr	r3, [pc, #196]	; (8001050 <SysTick_Handler+0x100>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	701a      	strb	r2, [r3, #0]
	            break;
 8000f8e:	e003      	b.n	8000f98 <SysTick_Handler+0x48>
			}
			default:
			{
				buttonSend = 0;
 8000f90:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <SysTick_Handler+0x100>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
				break;
 8000f96:	bf00      	nop
			}
		}
	}

	ticks++;
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <SysTick_Handler+0x108>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	4a2e      	ldr	r2, [pc, #184]	; (8001058 <SysTick_Handler+0x108>)
 8000fa0:	6013      	str	r3, [r2, #0]
	if(ticks == howMuchTicks)
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <SysTick_Handler+0x108>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <SysTick_Handler+0x10c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d126      	bne.n	8000ffc <SysTick_Handler+0xac>
	{
		// get temperature
		temperature = getTemperature(&temperature);
 8000fae:	482c      	ldr	r0, [pc, #176]	; (8001060 <SysTick_Handler+0x110>)
 8000fb0:	f000 fc64 	bl	800187c <getTemperature>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b25a      	sxtb	r2, r3
 8000fb8:	4b29      	ldr	r3, [pc, #164]	; (8001060 <SysTick_Handler+0x110>)
 8000fba:	701a      	strb	r2, [r3, #0]
		// get 6D Position
		direction = get6Dposition();
 8000fbc:	f000 fc7a 	bl	80018b4 <get6Dposition>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <SysTick_Handler+0x114>)
 8000fc6:	701a      	strb	r2, [r3, #0]
		// get raw data
		readAxes = getAxesRawData();
 8000fc8:	4c27      	ldr	r4, [pc, #156]	; (8001068 <SysTick_Handler+0x118>)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fd0b 	bl	80019e8 <getAxesRawData>
 8000fd2:	4622      	mov	r2, r4
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	6819      	ldr	r1, [r3, #0]
 8000fd8:	6011      	str	r1, [r2, #0]
 8000fda:	889b      	ldrh	r3, [r3, #4]
 8000fdc:	8093      	strh	r3, [r2, #4]
		// calculate angle for servo output
		pwmAngleCalc(readAxes.axisX, readAxes.axisY, readAxes.axisZ);
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <SysTick_Handler+0x118>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	b218      	sxth	r0, r3
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <SysTick_Handler+0x118>)
 8000fe6:	885b      	ldrh	r3, [r3, #2]
 8000fe8:	b219      	sxth	r1, r3
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <SysTick_Handler+0x118>)
 8000fec:	889b      	ldrh	r3, [r3, #4]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f7ff fe51 	bl	8000c98 <pwmAngleCalc>
/*		getFREEfall();*/
		ticks = 0;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <SysTick_Handler+0x108>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
	}

	if (servoEnable == 1)
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <SysTick_Handler+0x11c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d110      	bne.n	8001026 <SysTick_Handler+0xd6>
	{
		// set servo
		pwm(signal1, 0);
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <SysTick_Handler+0x120>)
 8001006:	e9d3 3400 	ldrd	r3, r4, [r3]
 800100a:	2200      	movs	r2, #0
 800100c:	4618      	mov	r0, r3
 800100e:	4621      	mov	r1, r4
 8001010:	f7ff fb20 	bl	8000654 <pwm>
		pwm(signal2, 1);
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <SysTick_Handler+0x124>)
 8001016:	e9d3 3400 	ldrd	r3, r4, [r3]
 800101a:	2201      	movs	r2, #1
 800101c:	4618      	mov	r0, r3
 800101e:	4621      	mov	r1, r4
 8001020:	f7ff fb18 	bl	8000654 <pwm>
	else
	{
		pwm(7.00, 0);
		pwm(7.00, 1);
	}
}
 8001024:	e00b      	b.n	800103e <SysTick_Handler+0xee>
		pwm(signal1, 0);
		pwm(signal2, 1);
	}
	else
	{
		pwm(7.00, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	f04f 0000 	mov.w	r0, #0
 800102c:	4912      	ldr	r1, [pc, #72]	; (8001078 <SysTick_Handler+0x128>)
 800102e:	f7ff fb11 	bl	8000654 <pwm>
		pwm(7.00, 1);
 8001032:	2201      	movs	r2, #1
 8001034:	f04f 0000 	mov.w	r0, #0
 8001038:	490f      	ldr	r1, [pc, #60]	; (8001078 <SysTick_Handler+0x128>)
 800103a:	f7ff fb0b 	bl	8000654 <pwm>
	}
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bd90      	pop	{r4, r7, pc}
 8001046:	bf00      	nop
 8001048:	20000a39 	.word	0x20000a39
 800104c:	0800a940 	.word	0x0800a940
 8001050:	20000ac3 	.word	0x20000ac3
 8001054:	0800a94c 	.word	0x0800a94c
 8001058:	20000a3c 	.word	0x20000a3c
 800105c:	20000018 	.word	0x20000018
 8001060:	20000a84 	.word	0x20000a84
 8001064:	20000a98 	.word	0x20000a98
 8001068:	20000a9c 	.word	0x20000a9c
 800106c:	20000a99 	.word	0x20000a99
 8001070:	20000aa8 	.word	0x20000aa8
 8001074:	20000a90 	.word	0x20000a90
 8001078:	401c0000 	.word	0x401c0000

0800107c <readButtonDebounce>:

/**
 * @brief read buttons debounce from Mr. Horauer
 */
void readButtonDebounce()
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    if ((XMC_GPIO_GetInput(BUTTON1) == 0) && (button1pressed == 0))
 8001080:	210e      	movs	r1, #14
 8001082:	4830      	ldr	r0, [pc, #192]	; (8001144 <readButtonDebounce+0xc8>)
 8001084:	f7ff fcb6 	bl	80009f4 <XMC_GPIO_GetInput>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d106      	bne.n	800109c <readButtonDebounce+0x20>
 800108e:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <readButtonDebounce+0xcc>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <readButtonDebounce+0x20>
    {
        button1pressed = 1;
 8001096:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <readButtonDebounce+0xcc>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON1) == 0) && (button1pressed == 1))
 800109c:	210e      	movs	r1, #14
 800109e:	4829      	ldr	r0, [pc, #164]	; (8001144 <readButtonDebounce+0xc8>)
 80010a0:	f7ff fca8 	bl	80009f4 <XMC_GPIO_GetInput>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d106      	bne.n	80010b8 <readButtonDebounce+0x3c>
 80010aa:	4b27      	ldr	r3, [pc, #156]	; (8001148 <readButtonDebounce+0xcc>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d102      	bne.n	80010b8 <readButtonDebounce+0x3c>
    {
        button1pressed = 2;
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <readButtonDebounce+0xcc>)
 80010b4:	2202      	movs	r2, #2
 80010b6:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON1) == 1) && (button1pressed == 2))
 80010b8:	210e      	movs	r1, #14
 80010ba:	4822      	ldr	r0, [pc, #136]	; (8001144 <readButtonDebounce+0xc8>)
 80010bc:	f7ff fc9a 	bl	80009f4 <XMC_GPIO_GetInput>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d10c      	bne.n	80010e0 <readButtonDebounce+0x64>
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <readButtonDebounce+0xcc>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d108      	bne.n	80010e0 <readButtonDebounce+0x64>
    {
        if (circularAdd(BUTTON1INT) == 1)
 80010ce:	200e      	movs	r0, #14
 80010d0:	f000 f886 	bl	80011e0 <circularAdd>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d102      	bne.n	80010e0 <readButtonDebounce+0x64>
        {
            button1pressed = 0;
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <readButtonDebounce+0xcc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
        }
    }

    if ((XMC_GPIO_GetInput(BUTTON2) == 0) && (button2pressed == 0))
 80010e0:	210f      	movs	r1, #15
 80010e2:	4818      	ldr	r0, [pc, #96]	; (8001144 <readButtonDebounce+0xc8>)
 80010e4:	f7ff fc86 	bl	80009f4 <XMC_GPIO_GetInput>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d106      	bne.n	80010fc <readButtonDebounce+0x80>
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <readButtonDebounce+0xd0>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <readButtonDebounce+0x80>
    {
        button2pressed = 1;
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <readButtonDebounce+0xd0>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON2) == 0) && (button2pressed == 1))
 80010fc:	210f      	movs	r1, #15
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <readButtonDebounce+0xc8>)
 8001100:	f7ff fc78 	bl	80009f4 <XMC_GPIO_GetInput>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d106      	bne.n	8001118 <readButtonDebounce+0x9c>
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <readButtonDebounce+0xd0>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d102      	bne.n	8001118 <readButtonDebounce+0x9c>
    {
        button2pressed = 2;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <readButtonDebounce+0xd0>)
 8001114:	2202      	movs	r2, #2
 8001116:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON2) == 1) && (button2pressed == 2))
 8001118:	210f      	movs	r1, #15
 800111a:	480a      	ldr	r0, [pc, #40]	; (8001144 <readButtonDebounce+0xc8>)
 800111c:	f7ff fc6a 	bl	80009f4 <XMC_GPIO_GetInput>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10c      	bne.n	8001140 <readButtonDebounce+0xc4>
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <readButtonDebounce+0xd0>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d108      	bne.n	8001140 <readButtonDebounce+0xc4>
    {
        if (circularAdd(BUTTON2INT) == 1)
 800112e:	200f      	movs	r0, #15
 8001130:	f000 f856 	bl	80011e0 <circularAdd>
 8001134:	4603      	mov	r3, r0
 8001136:	2b01      	cmp	r3, #1
 8001138:	d102      	bne.n	8001140 <readButtonDebounce+0xc4>
        {
            button2pressed = 0;
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <readButtonDebounce+0xd0>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	48028100 	.word	0x48028100
 8001148:	20000ac1 	.word	0x20000ac1
 800114c:	20000ac0 	.word	0x20000ac0

08001150 <circularInit>:

/**
 * @brief start values for circular buffer
 */
void circularInit()
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
    inix = 0;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <circularInit+0x28>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]
    outix = 0;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <circularInit+0x2c>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
    full = 0;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <circularInit+0x30>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
    empty = 1;
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <circularInit+0x34>)
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000ac2 	.word	0x20000ac2
 800117c:	20000ab0 	.word	0x20000ab0
 8001180:	20000ab1 	.word	0x20000ab1
 8001184:	20000ac4 	.word	0x20000ac4

08001188 <inputInit>:

/**
 * @brief initialize input GPIOs
 */
void inputInit()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
    XMC_GPIO_CONFIG_t config_in;
    config_in.mode = XMC_GPIO_MODE_INPUT_INVERTED_PULL_UP;
 800118e:	2330      	movs	r3, #48	; 0x30
 8001190:	713b      	strb	r3, [r7, #4]
    XMC_GPIO_Init(BUTTON1, &config_in);
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	461a      	mov	r2, r3
 8001196:	210e      	movs	r1, #14
 8001198:	480c      	ldr	r0, [pc, #48]	; (80011cc <inputInit+0x44>)
 800119a:	f001 fbf9 	bl	8002990 <XMC_GPIO_Init>
    XMC_GPIO_Init(BUTTON2, &config_in);
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	461a      	mov	r2, r3
 80011a2:	210f      	movs	r1, #15
 80011a4:	4809      	ldr	r0, [pc, #36]	; (80011cc <inputInit+0x44>)
 80011a6:	f001 fbf3 	bl	8002990 <XMC_GPIO_Init>

    // initialize global variables
    button1pressed = 0;
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <inputInit+0x48>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
    button2pressed = 0;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <inputInit+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
    button1state = 0;
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <inputInit+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
    button2state = 0;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <inputInit+0x54>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	48028100 	.word	0x48028100
 80011d0:	20000ac1 	.word	0x20000ac1
 80011d4:	20000ac0 	.word	0x20000ac0
 80011d8:	20000abe 	.word	0x20000abe
 80011dc:	20000abf 	.word	0x20000abf

080011e0 <circularAdd>:
 * @brief  add element to circular buffer
 * @param  8 bit value for buffer
 * @return 1 if OK, 0 if KO
 */
uint8_t circularAdd (uint8_t item)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
    if (full)
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <circularAdd+0x6c>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <circularAdd+0x16>
    {
        return 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e023      	b.n	800123e <circularAdd+0x5e>
    }
    inix = (inix + 1) % CBSIZE;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <circularAdd+0x70>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <circularAdd+0x74>)
 80011fe:	fb83 1302 	smull	r1, r3, r3, r2
 8001202:	1099      	asrs	r1, r3, #2
 8001204:	17d3      	asrs	r3, r2, #31
 8001206:	1ac9      	subs	r1, r1, r3
 8001208:	460b      	mov	r3, r1
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	1ad1      	subs	r1, r2, r3
 8001212:	b2ca      	uxtb	r2, r1
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <circularAdd+0x70>)
 8001216:	701a      	strb	r2, [r3, #0]
    cb[inix] = item;
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <circularAdd+0x70>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <circularAdd+0x78>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	5453      	strb	r3, [r2, r1]
    if (inix == outix)
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <circularAdd+0x70>)
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <circularAdd+0x7c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d102      	bne.n	8001236 <circularAdd+0x56>
    {
        full = 1;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <circularAdd+0x6c>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
    }
    empty = 0;
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <circularAdd+0x80>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
    return 1;
 800123c:	2301      	movs	r3, #1
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000ab1 	.word	0x20000ab1
 8001250:	20000ac2 	.word	0x20000ac2
 8001254:	66666667 	.word	0x66666667
 8001258:	20000ab4 	.word	0x20000ab4
 800125c:	20000ab0 	.word	0x20000ab0
 8001260:	20000ac4 	.word	0x20000ac4

08001264 <circularGet>:
 * @brief read element from circular buffer
 * @param pointer to the 8-bit value
 * @return 1 if OK, 0 if KO
 */
uint8_t circularGet (uint8_t *pItem)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    if (empty)
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <circularGet+0x6c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <circularGet+0x14>
    {
        return 0;
 8001274:	2300      	movs	r3, #0
 8001276:	e024      	b.n	80012c2 <circularGet+0x5e>
    }
    outix = (outix + 1) % CBSIZE;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <circularGet+0x70>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <circularGet+0x74>)
 8001280:	fb83 1302 	smull	r1, r3, r3, r2
 8001284:	1099      	asrs	r1, r3, #2
 8001286:	17d3      	asrs	r3, r2, #31
 8001288:	1ac9      	subs	r1, r1, r3
 800128a:	460b      	mov	r3, r1
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	440b      	add	r3, r1
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	1ad1      	subs	r1, r2, r3
 8001294:	b2ca      	uxtb	r2, r1
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <circularGet+0x70>)
 8001298:	701a      	strb	r2, [r3, #0]
    *pItem = cb[outix];
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <circularGet+0x70>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <circularGet+0x78>)
 80012a2:	5c9a      	ldrb	r2, [r3, r2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	701a      	strb	r2, [r3, #0]
    if (outix == inix)
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <circularGet+0x70>)
 80012aa:	781a      	ldrb	r2, [r3, #0]
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <circularGet+0x7c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d102      	bne.n	80012ba <circularGet+0x56>
    {
        empty = 1;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <circularGet+0x6c>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
    }
    full = 0;
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <circularGet+0x80>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
    return 1;
 80012c0:	2301      	movs	r3, #1
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000ac4 	.word	0x20000ac4
 80012d4:	20000ab0 	.word	0x20000ab0
 80012d8:	66666667 	.word	0x66666667
 80012dc:	20000ab4 	.word	0x20000ab4
 80012e0:	20000ac2 	.word	0x20000ac2
 80012e4:	20000ab1 	.word	0x20000ab1

080012e8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80012f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80012f4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d013      	beq.n	8001328 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001300:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001304:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001308:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00b      	beq.n	8001328 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001310:	e000      	b.n	8001314 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001312:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001314:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f9      	beq.n	8001312 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800131e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001328:	687b      	ldr	r3, [r7, #4]
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop

08001338 <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
    // P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
    // PORT2->HWSEL ... clear bits [3:2]
    PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 800133c:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <initRetargetSwo+0x7c>)
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <initRetargetSwo+0x7c>)
 8001340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001342:	f023 030c 	bic.w	r3, r3, #12
 8001346:	6753      	str	r3, [r2, #116]	; 0x74
    // PORT2->HWSEL ... set bit [2] -> HWO0
    PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 8001348:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <initRetargetSwo+0x7c>)
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <initRetargetSwo+0x7c>)
 800134c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	6753      	str	r3, [r2, #116]	; 0x74

    // Enable trace systems
    // Source: ARMv7-M Architecture Reference Manual
    // DEMCR = Debug Exception and Monitor Control Register
    //         TRCENA ... global enable for DWT and ITM blocks
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001354:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <initRetargetSwo+0x80>)
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <initRetargetSwo+0x80>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800135e:	60d3      	str	r3, [r2, #12]
    // SWO baud rate prescaler value
    // ACPR = Asynchronous Clock Prescaler Register
    //        fSWO = fCPU / (SWOSCALAR + 1)
    //        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
    //        fCPU = 120MHz
    TPI->ACPR = 119UL;
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <initRetargetSwo+0x84>)
 8001362:	2277      	movs	r2, #119	; 0x77
 8001364:	611a      	str	r2, [r3, #16]
    // Source: ARMv7-M Architecture Reference Manual
    // SPPR = Selected Pin Control Register
    //        0x0 ... Synchronous Trace Port Mode
    //        0x1 ... Asynchronous Serial Wire Output (Manchester)
    //        0x2 ... Asynchronous Serial Wire Output (NRZ)
    TPI->SPPR = 0x2UL;
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <initRetargetSwo+0x84>)
 8001368:	2202      	movs	r2, #2
 800136a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    // Source: ARM Cortex-M4 Processor Technical Reference Manual
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    // FFCR = Formatter and Flash Control Register
    //        0x0 ... continuous formatting disabled
    //        0x1 ... continuous formatting enabled
    TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <initRetargetSwo+0x84>)
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <initRetargetSwo+0x84>)
 8001372:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8001376:	f023 0302 	bic.w	r3, r3, #2
 800137a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

    // Unlock ITM
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    ITM->LAR = 0xC5ACCE55;
 800137e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <initRetargetSwo+0x88>)
 8001384:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TCR = Trace Control Register
    //       ITMENA ... enable ITM
    ITM->TCR |= ITM_TCR_ITMENA_Msk;
 8001388:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800138c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001390:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TER = Trace Enable Register
    //       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
    ITM->TER = 0xFFFFFFFF;
 800139c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	48028200 	.word	0x48028200
 80013b8:	e000edf0 	.word	0xe000edf0
 80013bc:	e0040000 	.word	0xe0040000
 80013c0:	c5acce55 	.word	0xc5acce55

080013c4 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
    int i;

    for (i = 0; i < nbytes; i++) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	e009      	b.n	80013ea <_write+0x26>
        ITM_SendChar ( (*buf++));
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	60ba      	str	r2, [r7, #8]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff82 	bl	80012e8 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
    int i;

    for (i = 0; i < nbytes; i++) {
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dbf1      	blt.n	80013d6 <_write+0x12>
        ITM_SendChar ( (*buf++));
    }
    return nbytes;
 80013f2:	687b      	ldr	r3, [r7, #4]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	70fb      	strb	r3, [r7, #3]
 8001408:	4613      	mov	r3, r2
 800140a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800140c:	78f8      	ldrb	r0, [r7, #3]
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	3306      	adds	r3, #6
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800141e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001420:	431a      	orrs	r2, r3
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	1d83      	adds	r3, r0, #6
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001444:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f023 020f 	bic.w	r2, r3, #15
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8001484:	2104      	movs	r1, #4
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffe4 	bl	8001454 <XMC_USIC_CH_SetMode>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <XMC_I2C_CH_SetInputSource>:
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 *
 */
__STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT_t input, const uint8_t source)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]
 80014a0:	4613      	mov	r3, r2
 80014a2:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX0CR_DSEN_Msk;
 80014a4:	78f8      	ldrb	r0, [r7, #3]
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	3306      	adds	r3, #6
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80014b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	1d83      	adds	r3, r0, #6
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 80014c4:	78ba      	ldrb	r2, [r7, #2]
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	4619      	mov	r1, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ff96 	bl	80013fc <XMC_USIC_CH_SetInputSource>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <_init_i2c1_ch0>:
 *         P0_5 & P0_11
 *  @param none
 *  @return on success this function returns 0
 */
uint8_t _init_i2c1_ch0 (void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
    XMC_I2C_CH_Init (XMC_I2C1_CH0, &i2c_cfg);
 8001518:	490e      	ldr	r1, [pc, #56]	; (8001554 <_init_i2c1_ch0+0x40>)
 800151a:	480f      	ldr	r0, [pc, #60]	; (8001558 <_init_i2c1_ch0+0x44>)
 800151c:	f001 fbb2 	bl	8002c84 <XMC_I2C_CH_Init>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SDA, USIC1_C0_DX0_P0_5);
 8001520:	2201      	movs	r2, #1
 8001522:	2100      	movs	r1, #0
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <_init_i2c1_ch0+0x44>)
 8001526:	f7ff ffb5 	bl	8001494 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SCL, USIC1_C0_DX1_SCLKOUT);
 800152a:	2206      	movs	r2, #6
 800152c:	2101      	movs	r1, #1
 800152e:	480a      	ldr	r0, [pc, #40]	; (8001558 <_init_i2c1_ch0+0x44>)
 8001530:	f7ff ffb0 	bl	8001494 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_Start (XMC_I2C1_CH0);
 8001534:	4808      	ldr	r0, [pc, #32]	; (8001558 <_init_i2c1_ch0+0x44>)
 8001536:	f7ff ffa1 	bl	800147c <XMC_I2C_CH_Start>

    XMC_GPIO_Init (P0_11, &i2c_scl);
 800153a:	4a08      	ldr	r2, [pc, #32]	; (800155c <_init_i2c1_ch0+0x48>)
 800153c:	210b      	movs	r1, #11
 800153e:	4808      	ldr	r0, [pc, #32]	; (8001560 <_init_i2c1_ch0+0x4c>)
 8001540:	f001 fa26 	bl	8002990 <XMC_GPIO_Init>
    XMC_GPIO_Init (P0_5, &i2c_sda);
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <_init_i2c1_ch0+0x50>)
 8001546:	2105      	movs	r1, #5
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <_init_i2c1_ch0+0x4c>)
 800154a:	f001 fa21 	bl	8002990 <XMC_GPIO_Init>

    return 0;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000034 	.word	0x20000034
 8001558:	48020000 	.word	0x48020000
 800155c:	20000028 	.word	0x20000028
 8001560:	48028000 	.word	0x48028000
 8001564:	2000001c 	.word	0x2000001c

08001568 <_i2c_xfer>:
 *         rd_wr    ... I2C Read/Write direction
 *  @return read-value on a I2C read request or return write-value on I2C write
 *          request
 */
uint8_t _i2c_xfer (uint8_t id, uint8_t reg_addr, uint8_t i2c_data, _Bool rd_wr)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	4604      	mov	r4, r0
 8001570:	4608      	mov	r0, r1
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	4623      	mov	r3, r4
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	4603      	mov	r3, r0
 800157c:	71bb      	strb	r3, [r7, #6]
 800157e:	460b      	mov	r3, r1
 8001580:	717b      	strb	r3, [r7, #5]
 8001582:	4613      	mov	r3, r2
 8001584:	713b      	strb	r3, [r7, #4]
    XMC_USIC_CH_t *channel;
    char _tmp_i2c_recv_ = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
    uint8_t id_tmp = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	73bb      	strb	r3, [r7, #14]

    channel = XMC_I2C1_CH0;
 800158e:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <_i2c_xfer+0x11c>)
 8001590:	60bb      	str	r3, [r7, #8]

    id_tmp = LIS3DH_RD_ADR;
 8001592:	2330      	movs	r3, #48	; 0x30
 8001594:	73bb      	strb	r3, [r7, #14]

    XMC_I2C_CH_MasterStart (channel, id_tmp, XMC_I2C_CH_CMD_WRITE);
 8001596:	7bbb      	ldrb	r3, [r7, #14]
 8001598:	b29b      	uxth	r3, r3
 800159a:	2200      	movs	r2, #0
 800159c:	4619      	mov	r1, r3
 800159e:	68b8      	ldr	r0, [r7, #8]
 80015a0:	f001 fbf4 	bl	8002d8c <XMC_I2C_CH_MasterStart>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 80015a4:	bf00      	nop
 80015a6:	68b8      	ldr	r0, [r7, #8]
 80015a8:	f7ff ff96 	bl	80014d8 <XMC_I2C_CH_GetStatusFlag>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f7      	beq.n	80015a6 <_i2c_xfer+0x3e>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80015b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ba:	68b8      	ldr	r0, [r7, #8]
 80015bc:	f7ff ff98 	bl	80014f0 <XMC_I2C_CH_ClearStatusFlag>

    XMC_I2C_CH_MasterTransmit (channel, reg_addr);
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	4619      	mov	r1, r3
 80015c4:	68b8      	ldr	r0, [r7, #8]
 80015c6:	f001 fc6f 	bl	8002ea8 <XMC_I2C_CH_MasterTransmit>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 80015ca:	bf00      	nop
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	f7ff ff83 	bl	80014d8 <XMC_I2C_CH_GetStatusFlag>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f7      	beq.n	80015cc <_i2c_xfer+0x64>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80015dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015e0:	68b8      	ldr	r0, [r7, #8]
 80015e2:	f7ff ff85 	bl	80014f0 <XMC_I2C_CH_ClearStatusFlag>

    if (rd_wr) {
 80015e6:	793b      	ldrb	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d030      	beq.n	800164e <_i2c_xfer+0xe6>
        /* Read from REG */
        XMC_I2C_CH_MasterRepeatedStart (channel, id_tmp, XMC_I2C_CH_CMD_READ);
 80015ec:	7bbb      	ldrb	r3, [r7, #14]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	2201      	movs	r2, #1
 80015f2:	4619      	mov	r1, r3
 80015f4:	68b8      	ldr	r0, [r7, #8]
 80015f6:	f001 fbfd 	bl	8002df4 <XMC_I2C_CH_MasterRepeatedStart>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 80015fa:	bf00      	nop
 80015fc:	68b8      	ldr	r0, [r7, #8]
 80015fe:	f7ff ff6b 	bl	80014d8 <XMC_I2C_CH_GetStatusFlag>
 8001602:	4603      	mov	r3, r0
 8001604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f7      	beq.n	80015fc <_i2c_xfer+0x94>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 800160c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001610:	68b8      	ldr	r0, [r7, #8]
 8001612:	f7ff ff6d 	bl	80014f0 <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterReceiveNack (channel);
 8001616:	68b8      	ldr	r0, [r7, #8]
 8001618:	f001 fc6c 	bl	8002ef4 <XMC_I2C_CH_MasterReceiveNack>

        while ( (XMC_USIC_CH_GetReceiveBufferStatus (channel) !=
 800161c:	bf00      	nop
 800161e:	68b8      	ldr	r0, [r7, #8]
 8001620:	f7ff ff0a 	bl	8001438 <XMC_USIC_CH_GetReceiveBufferStatus>
 8001624:	4603      	mov	r3, r0
 8001626:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800162a:	d006      	beq.n	800163a <_i2c_xfer+0xd2>
                 (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) && ( (uint32_t) XMC_USIC_CH_GetReceiveBufferStatus (channel)
 800162c:	68b8      	ldr	r0, [r7, #8]
 800162e:	f7ff ff03 	bl	8001438 <XMC_USIC_CH_GetReceiveBufferStatus>
 8001632:	4603      	mov	r3, r0
 8001634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001638:	d1f1      	bne.n	800161e <_i2c_xfer+0xb6>
                         != (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID0));

        _tmp_i2c_recv_ = XMC_I2C_CH_GetReceivedData (channel);
 800163a:	68b8      	ldr	r0, [r7, #8]
 800163c:	f001 fc80 	bl	8002f40 <XMC_I2C_CH_GetReceivedData>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]

        XMC_I2C_CH_MasterStop (channel);
 8001644:	68b8      	ldr	r0, [r7, #8]
 8001646:	f001 fc09 	bl	8002e5c <XMC_I2C_CH_MasterStop>

        return _tmp_i2c_recv_;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	e016      	b.n	800167c <_i2c_xfer+0x114>
    } else {
        /* Write to REG */
        XMC_I2C_CH_MasterTransmit (channel, i2c_data);
 800164e:	797b      	ldrb	r3, [r7, #5]
 8001650:	4619      	mov	r1, r3
 8001652:	68b8      	ldr	r0, [r7, #8]
 8001654:	f001 fc28 	bl	8002ea8 <XMC_I2C_CH_MasterTransmit>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8001658:	bf00      	nop
 800165a:	68b8      	ldr	r0, [r7, #8]
 800165c:	f7ff ff3c 	bl	80014d8 <XMC_I2C_CH_GetStatusFlag>
 8001660:	4603      	mov	r3, r0
 8001662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f7      	beq.n	800165a <_i2c_xfer+0xf2>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 800166a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166e:	68b8      	ldr	r0, [r7, #8]
 8001670:	f7ff ff3e 	bl	80014f0 <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterStop (channel);
 8001674:	68b8      	ldr	r0, [r7, #8]
 8001676:	f001 fbf1 	bl	8002e5c <XMC_I2C_CH_MasterStop>

        return i2c_data;
 800167a:	797b      	ldrb	r3, [r7, #5]
    }
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bd90      	pop	{r4, r7, pc}
 8001684:	48020000 	.word	0x48020000

08001688 <initMEMSsensor>:
#include "lis3dh_library.h"

uint8_t initMEMSsensor()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
	uint8_t error = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	71fb      	strb	r3, [r7, #7]

    //set ODR (turn ON device)
    if(LIS3DH_SetODR(LIS3DH_ODR_100Hz) == 1)
 8001692:	2005      	movs	r0, #5
 8001694:	f000 fa9c 	bl	8001bd0 <LIS3DH_SetODR>
 8001698:	4603      	mov	r3, r0
 800169a:	2b01      	cmp	r3, #1
 800169c:	d103      	bne.n	80016a6 <initMEMSsensor+0x1e>
    {
        printf("LIS3DH_SetODR done...\n");
 800169e:	4828      	ldr	r0, [pc, #160]	; (8001740 <initMEMSsensor+0xb8>)
 80016a0:	f002 fecc 	bl	800443c <puts>
 80016a4:	e008      	b.n	80016b8 <initMEMSsensor+0x30>
    }
	else
	{
		error++;
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	3301      	adds	r3, #1
 80016aa:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80016ac:	4b25      	ldr	r3, [pc, #148]	; (8001744 <initMEMSsensor+0xbc>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b23      	ldr	r3, [pc, #140]	; (8001744 <initMEMSsensor+0xbc>)
 80016b6:	701a      	strb	r2, [r3, #0]
	}

    //set PowerMode
    if(LIS3DH_SetMode(LIS3DH_NORMAL) == 1)
 80016b8:	2002      	movs	r0, #2
 80016ba:	f000 fb37 	bl	8001d2c <LIS3DH_SetMode>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d103      	bne.n	80016cc <initMEMSsensor+0x44>
    {

        printf("LIS3DH_SetMode done...\n");
 80016c4:	4820      	ldr	r0, [pc, #128]	; (8001748 <initMEMSsensor+0xc0>)
 80016c6:	f002 feb9 	bl	800443c <puts>
 80016ca:	e008      	b.n	80016de <initMEMSsensor+0x56>
    }
	else
	{
		error++;
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	3301      	adds	r3, #1
 80016d0:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <initMEMSsensor+0xbc>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <initMEMSsensor+0xbc>)
 80016dc:	701a      	strb	r2, [r3, #0]
	}

    //set Fullscale
    if(LIS3DH_SetFullScale(LIS3DH_FULLSCALE_4) == 1)
 80016de:	2001      	movs	r0, #1
 80016e0:	f000 fbce 	bl	8001e80 <LIS3DH_SetFullScale>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d103      	bne.n	80016f2 <initMEMSsensor+0x6a>
    {

        printf("LIS3DH_SetFullScale done...\n");
 80016ea:	4818      	ldr	r0, [pc, #96]	; (800174c <initMEMSsensor+0xc4>)
 80016ec:	f002 fea6 	bl	800443c <puts>
 80016f0:	e008      	b.n	8001704 <initMEMSsensor+0x7c>
    }
	else
	{
		error++;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	3301      	adds	r3, #1
 80016f6:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <initMEMSsensor+0xbc>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <initMEMSsensor+0xbc>)
 8001702:	701a      	strb	r2, [r3, #0]
	}

    //set axis Enable
    response = LIS3DH_SetAxis(LIS3DH_X_ENABLE | LIS3DH_Y_ENABLE | LIS3DH_Z_ENABLE);
 8001704:	2007      	movs	r0, #7
 8001706:	f000 fb8f 	bl	8001e28 <LIS3DH_SetAxis>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <initMEMSsensor+0xc8>)
 8001710:	701a      	strb	r2, [r3, #0]
    if(response == 1)
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <initMEMSsensor+0xc8>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d103      	bne.n	8001722 <initMEMSsensor+0x9a>
    {
        printf("LIS3DH_SetAxis done...\n");
 800171a:	480e      	ldr	r0, [pc, #56]	; (8001754 <initMEMSsensor+0xcc>)
 800171c:	f002 fe8e 	bl	800443c <puts>
 8001720:	e008      	b.n	8001734 <initMEMSsensor+0xac>
    }
	else
	{
		error++;
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	3301      	adds	r3, #1
 8001726:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <initMEMSsensor+0xbc>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	b2da      	uxtb	r2, r3
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <initMEMSsensor+0xbc>)
 8001732:	701a      	strb	r2, [r3, #0]
	}

	return error;
 8001734:	79fb      	ldrb	r3, [r7, #7]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	0800a958 	.word	0x0800a958
 8001744:	20000a82 	.word	0x20000a82
 8001748:	0800a970 	.word	0x0800a970
 800174c:	0800a988 	.word	0x0800a988
 8001750:	20000a81 	.word	0x20000a81
 8001754:	0800a9a4 	.word	0x0800a9a4

08001758 <configMEMSsensor>:
/*	}*/

/*}*/

uint8_t configMEMSsensor()
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
	uint8_t error = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	71fb      	strb	r3, [r7, #7]

	//set Interrupt Threshold 
	if(LIS3DH_SetInt1Threshold(20) == 1)
 8001762:	2014      	movs	r0, #20
 8001764:	f000 fcba 	bl	80020dc <LIS3DH_SetInt1Threshold>
 8001768:	4603      	mov	r3, r0
 800176a:	2b01      	cmp	r3, #1
 800176c:	d103      	bne.n	8001776 <configMEMSsensor+0x1e>
	{
    	printf("LIS3DH_SetInt1Thershold done...\n");
 800176e:	483b      	ldr	r0, [pc, #236]	; (800185c <configMEMSsensor+0x104>)
 8001770:	f002 fe64 	bl	800443c <puts>
 8001774:	e008      	b.n	8001788 <configMEMSsensor+0x30>
	}
	else
	{
		error++;
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	3301      	adds	r3, #1
 800177a:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 800177c:	4b38      	ldr	r3, [pc, #224]	; (8001860 <configMEMSsensor+0x108>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	b2da      	uxtb	r2, r3
 8001784:	4b36      	ldr	r3, [pc, #216]	; (8001860 <configMEMSsensor+0x108>)
 8001786:	701a      	strb	r2, [r3, #0]
	}
	
	//set Interrupt configuration (all enabled)
	response = LIS3DH_SetIntConfiguration(LIS3DH_INT1_ZHIE_ENABLE | LIS3DH_INT1_ZLIE_ENABLE |
 8001788:	203f      	movs	r0, #63	; 0x3f
 800178a:	f000 fbd5 	bl	8001f38 <LIS3DH_SetIntConfiguration>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <configMEMSsensor+0x10c>)
 8001794:	701a      	strb	r2, [r3, #0]
			   LIS3DH_INT1_YHIE_ENABLE | LIS3DH_INT1_YLIE_ENABLE |
			   LIS3DH_INT1_XHIE_ENABLE | LIS3DH_INT1_XLIE_ENABLE ); 
	if(response == 1)
 8001796:	4b33      	ldr	r3, [pc, #204]	; (8001864 <configMEMSsensor+0x10c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d103      	bne.n	80017a6 <configMEMSsensor+0x4e>
	{
		printf("LIS3DH_SetIntConfiguration done...\n");
 800179e:	4832      	ldr	r0, [pc, #200]	; (8001868 <configMEMSsensor+0x110>)
 80017a0:	f002 fe4c 	bl	800443c <puts>
 80017a4:	e008      	b.n	80017b8 <configMEMSsensor+0x60>
  	}
	else
	{
		error++;
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	3301      	adds	r3, #1
 80017aa:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80017ac:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <configMEMSsensor+0x108>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <configMEMSsensor+0x108>)
 80017b6:	701a      	strb	r2, [r3, #0]
	}

	 //set Interrupt Mode
	if(LIS3DH_SetIntMode(LIS3DH_INT_MODE_6D_POSITION) == 1)
 80017b8:	2003      	movs	r0, #3
 80017ba:	f000 fbe7 	bl	8001f8c <LIS3DH_SetIntMode>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d103      	bne.n	80017cc <configMEMSsensor+0x74>
	{
		printf("LIS3DH_SetIntMode done...\n");
 80017c4:	4829      	ldr	r0, [pc, #164]	; (800186c <configMEMSsensor+0x114>)
 80017c6:	f002 fe39 	bl	800443c <puts>
 80017ca:	e008      	b.n	80017de <configMEMSsensor+0x86>
    }
	else
	{
		error++;
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	3301      	adds	r3, #1
 80017d0:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <configMEMSsensor+0x108>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <configMEMSsensor+0x108>)
 80017dc:	701a      	strb	r2, [r3, #0]
	}

	// internal temperature sensor
	if (LIS3DH_SetADCAux(MEMS_ENABLE) == 1)
 80017de:	2001      	movs	r0, #1
 80017e0:	f000 fa52 	bl	8001c88 <LIS3DH_SetADCAux>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d103      	bne.n	80017f2 <configMEMSsensor+0x9a>
	{
		printf("LIS3DH_SetADCAux done...");
 80017ea:	4821      	ldr	r0, [pc, #132]	; (8001870 <configMEMSsensor+0x118>)
 80017ec:	f002 fdde 	bl	80043ac <printf>
 80017f0:	e008      	b.n	8001804 <configMEMSsensor+0xac>
	}
	else
	{
		error++;
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	3301      	adds	r3, #1
 80017f6:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <configMEMSsensor+0x108>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <configMEMSsensor+0x108>)
 8001802:	701a      	strb	r2, [r3, #0]
	}

	if (LIS3DH_SetBDU(MEMS_ENABLE) == 1)
 8001804:	2001      	movs	r0, #1
 8001806:	f000 fb69 	bl	8001edc <LIS3DH_SetBDU>
 800180a:	4603      	mov	r3, r0
 800180c:	2b01      	cmp	r3, #1
 800180e:	d103      	bne.n	8001818 <configMEMSsensor+0xc0>
	{
		printf("LIS3DH_SetBDU done...\n");
 8001810:	4818      	ldr	r0, [pc, #96]	; (8001874 <configMEMSsensor+0x11c>)
 8001812:	f002 fe13 	bl	800443c <puts>
 8001816:	e008      	b.n	800182a <configMEMSsensor+0xd2>
	}
	else
	{
		error++;
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	3301      	adds	r3, #1
 800181c:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <configMEMSsensor+0x108>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <configMEMSsensor+0x108>)
 8001828:	701a      	strb	r2, [r3, #0]
	}

	if (LIS3DH_SetTemperature(MEMS_ENABLE) == 1)
 800182a:	2001      	movs	r0, #1
 800182c:	f000 f9fe 	bl	8001c2c <LIS3DH_SetTemperature>
 8001830:	4603      	mov	r3, r0
 8001832:	2b01      	cmp	r3, #1
 8001834:	d103      	bne.n	800183e <configMEMSsensor+0xe6>
	{
		printf("LIS3DH_SetTemperature done...\n");
 8001836:	4810      	ldr	r0, [pc, #64]	; (8001878 <configMEMSsensor+0x120>)
 8001838:	f002 fe00 	bl	800443c <puts>
 800183c:	e008      	b.n	8001850 <configMEMSsensor+0xf8>
	}
	else
	{
		error++;
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	3301      	adds	r3, #1
 8001842:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <configMEMSsensor+0x108>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	3301      	adds	r3, #1
 800184a:	b2da      	uxtb	r2, r3
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <configMEMSsensor+0x108>)
 800184e:	701a      	strb	r2, [r3, #0]
	}
	
	return error;
 8001850:	79fb      	ldrb	r3, [r7, #7]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	0800a9bc 	.word	0x0800a9bc
 8001860:	20000a82 	.word	0x20000a82
 8001864:	20000a81 	.word	0x20000a81
 8001868:	0800a9dc 	.word	0x0800a9dc
 800186c:	0800aa00 	.word	0x0800aa00
 8001870:	0800aa1c 	.word	0x0800aa1c
 8001874:	0800aa38 	.word	0x0800aa38
 8001878:	0800aa50 	.word	0x0800aa50

0800187c <getTemperature>:

uint8_t getTemperature()
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
	int8_t temperature = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	71fb      	strb	r3, [r7, #7]

	if (LIS3DH_GetTempRaw(&temperature) != 1)
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	4618      	mov	r0, r3
 800188a:	f000 fa2b 	bl	8001ce4 <LIS3DH_GetTempRaw>
 800188e:	4603      	mov	r3, r0
 8001890:	2b01      	cmp	r3, #1
 8001892:	d005      	beq.n	80018a0 <getTemperature+0x24>
	{
		errorcount++;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <getTemperature+0x34>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <getTemperature+0x34>)
 800189e:	701a      	strb	r2, [r3, #0]
	}

	return temperature;
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	b2db      	uxtb	r3, r3
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000a82 	.word	0x20000a82

080018b4 <get6Dposition>:

uint8_t get6Dposition()
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
	uint8_t response = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	71fb      	strb	r3, [r7, #7]

	response = LIS3DH_Get6DPosition(&position);
 80018be:	4846      	ldr	r0, [pc, #280]	; (80019d8 <get6Dposition+0x124>)
 80018c0:	f000 fb92 	bl	8001fe8 <LIS3DH_Get6DPosition>
 80018c4:	4603      	mov	r3, r0
 80018c6:	71fb      	strb	r3, [r7, #7]

	if((response == 1) && (old_position != position))
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d171      	bne.n	80019b2 <get6Dposition+0xfe>
 80018ce:	4b43      	ldr	r3, [pc, #268]	; (80019dc <get6Dposition+0x128>)
 80018d0:	781a      	ldrb	r2, [r3, #0]
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <get6Dposition+0x124>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d06b      	beq.n	80019b2 <get6Dposition+0xfe>
	{
		switch (position)
 80018da:	4b3f      	ldr	r3, [pc, #252]	; (80019d8 <get6Dposition+0x124>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	3b41      	subs	r3, #65	; 0x41
 80018e0:	2b1f      	cmp	r3, #31
 80018e2:	d85b      	bhi.n	800199c <get6Dposition+0xe8>
 80018e4:	a201      	add	r2, pc, #4	; (adr r2, 80018ec <get6Dposition+0x38>)
 80018e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ea:	bf00      	nop
 80018ec:	0800197d 	.word	0x0800197d
 80018f0:	08001975 	.word	0x08001975
 80018f4:	0800199d 	.word	0x0800199d
 80018f8:	0800196d 	.word	0x0800196d
 80018fc:	0800199d 	.word	0x0800199d
 8001900:	0800199d 	.word	0x0800199d
 8001904:	0800199d 	.word	0x0800199d
 8001908:	08001985 	.word	0x08001985
 800190c:	0800199d 	.word	0x0800199d
 8001910:	0800199d 	.word	0x0800199d
 8001914:	0800199d 	.word	0x0800199d
 8001918:	0800199d 	.word	0x0800199d
 800191c:	0800199d 	.word	0x0800199d
 8001920:	0800199d 	.word	0x0800199d
 8001924:	0800199d 	.word	0x0800199d
 8001928:	08001995 	.word	0x08001995
 800192c:	0800199d 	.word	0x0800199d
 8001930:	0800199d 	.word	0x0800199d
 8001934:	0800199d 	.word	0x0800199d
 8001938:	0800199d 	.word	0x0800199d
 800193c:	0800199d 	.word	0x0800199d
 8001940:	0800199d 	.word	0x0800199d
 8001944:	0800199d 	.word	0x0800199d
 8001948:	0800199d 	.word	0x0800199d
 800194c:	0800199d 	.word	0x0800199d
 8001950:	0800199d 	.word	0x0800199d
 8001954:	0800199d 	.word	0x0800199d
 8001958:	0800199d 	.word	0x0800199d
 800195c:	0800199d 	.word	0x0800199d
 8001960:	0800199d 	.word	0x0800199d
 8001964:	0800199d 	.word	0x0800199d
 8001968:	0800198d 	.word	0x0800198d
		{
			case LIS3DH_UP_SX:
			{
				direction = 0;
 800196c:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <get6Dposition+0x12c>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
				break;
 8001972:	e01d      	b.n	80019b0 <get6Dposition+0xfc>
			}
			case LIS3DH_UP_DX:
			{
				direction = 1;
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <get6Dposition+0x12c>)
 8001976:	2201      	movs	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
				break;
 800197a:	e019      	b.n	80019b0 <get6Dposition+0xfc>
			}
			case LIS3DH_DW_SX:
			{
				direction = 2;
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <get6Dposition+0x12c>)
 800197e:	2202      	movs	r2, #2
 8001980:	701a      	strb	r2, [r3, #0]
				break;
 8001982:	e015      	b.n	80019b0 <get6Dposition+0xfc>
			}
			case LIS3DH_DW_DX:
			{
				direction = 3;
 8001984:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <get6Dposition+0x12c>)
 8001986:	2203      	movs	r2, #3
 8001988:	701a      	strb	r2, [r3, #0]
				break; 
 800198a:	e011      	b.n	80019b0 <get6Dposition+0xfc>
			}
			case LIS3DH_TOP:    
			{
				direction = 4;
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <get6Dposition+0x12c>)
 800198e:	2204      	movs	r2, #4
 8001990:	701a      	strb	r2, [r3, #0]
				break; 
 8001992:	e00d      	b.n	80019b0 <get6Dposition+0xfc>
			}
			case LIS3DH_BOTTOM: 
			{
				direction = 5;
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <get6Dposition+0x12c>)
 8001996:	2205      	movs	r2, #5
 8001998:	701a      	strb	r2, [r3, #0]
				break; 
 800199a:	e009      	b.n	80019b0 <get6Dposition+0xfc>
			}
			default:
			{
				direction = 6;
 800199c:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <get6Dposition+0x12c>)
 800199e:	2206      	movs	r2, #6
 80019a0:	701a      	strb	r2, [r3, #0]
				errorcount++;
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <get6Dposition+0x130>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	3301      	adds	r3, #1
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <get6Dposition+0x130>)
 80019ac:	701a      	strb	r2, [r3, #0]
				break;
 80019ae:	bf00      	nop
			}
		}
	}
 80019b0:	e008      	b.n	80019c4 <get6Dposition+0x110>
	else if(response != 1)
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d005      	beq.n	80019c4 <get6Dposition+0x110>
	{
		errorcount++;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <get6Dposition+0x130>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <get6Dposition+0x130>)
 80019c2:	701a      	strb	r2, [r3, #0]
	}
	old_position = position;
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <get6Dposition+0x124>)
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <get6Dposition+0x128>)
 80019ca:	701a      	strb	r2, [r3, #0]

	return direction;
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <get6Dposition+0x12c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000a83 	.word	0x20000a83
 80019dc:	20000a9a 	.word	0x20000a9a
 80019e0:	20000a98 	.word	0x20000a98
 80019e4:	20000a82 	.word	0x20000a82

080019e8 <getAxesRawData>:

AXESRAWDATA getAxesRawData()
{
 80019e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019ec:	b088      	sub	sp, #32
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	466b      	mov	r3, sp
 80019f4:	469a      	mov	sl, r3
	uint8_t response = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	77bb      	strb	r3, [r7, #30]
	uint8_t m = 1;
 80019fa:	2301      	movs	r3, #1
 80019fc:	777b      	strb	r3, [r7, #29]
	uint8_t i = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	77fb      	strb	r3, [r7, #31]
	AxesRaw_t data[m];
 8001a02:	7f78      	ldrb	r0, [r7, #29]
 8001a04:	4603      	mov	r3, r0
 8001a06:	3b01      	subs	r3, #1
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	fa5f f880 	uxtb.w	r8, r0
 8001a0e:	f04f 0900 	mov.w	r9, #0
 8001a12:	4643      	mov	r3, r8
 8001a14:	464c      	mov	r4, r9
 8001a16:	18db      	adds	r3, r3, r3
 8001a18:	eb44 0404 	adc.w	r4, r4, r4
 8001a1c:	eb13 0308 	adds.w	r3, r3, r8
 8001a20:	eb44 0409 	adc.w	r4, r4, r9
 8001a24:	0126      	lsls	r6, r4, #4
 8001a26:	ea46 7613 	orr.w	r6, r6, r3, lsr #28
 8001a2a:	011d      	lsls	r5, r3, #4
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	4634      	mov	r4, r6
 8001a30:	4604      	mov	r4, r0
 8001a32:	4623      	mov	r3, r4
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4423      	add	r3, r4
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	b2c5      	uxtb	r5, r0
 8001a3c:	f04f 0600 	mov.w	r6, #0
 8001a40:	462b      	mov	r3, r5
 8001a42:	4634      	mov	r4, r6
 8001a44:	18db      	adds	r3, r3, r3
 8001a46:	eb44 0404 	adc.w	r4, r4, r4
 8001a4a:	195b      	adds	r3, r3, r5
 8001a4c:	eb44 0406 	adc.w	r4, r4, r6
 8001a50:	0122      	lsls	r2, r4, #4
 8001a52:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
 8001a56:	0119      	lsls	r1, r3, #4
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4614      	mov	r4, r2
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	3301      	adds	r3, #1
 8001a68:	3307      	adds	r3, #7
 8001a6a:	08db      	lsrs	r3, r3, #3
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	ebad 0d03 	sub.w	sp, sp, r3
 8001a72:	466b      	mov	r3, sp
 8001a74:	3301      	adds	r3, #1
 8001a76:	085b      	lsrs	r3, r3, #1
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
	AXESRAWDATA dataOut;
	dataOut.axisX = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	81bb      	strh	r3, [r7, #12]
	dataOut.axisY = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	81fb      	strh	r3, [r7, #14]
	dataOut.axisZ = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	823b      	strh	r3, [r7, #16]

	for (i = 0; i <= m; i++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	77fb      	strb	r3, [r7, #31]
 8001a8c:	e017      	b.n	8001abe <getAxesRawData+0xd6>
	{
		response = LIS3DH_GetAccAxesRaw(&data[i]);
 8001a8e:	7ffa      	ldrb	r2, [r7, #31]
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fb37 	bl	8002110 <LIS3DH_GetAccAxesRaw>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	77bb      	strb	r3, [r7, #30]
		if(response != 1)
 8001aa6:	7fbb      	ldrb	r3, [r7, #30]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d005      	beq.n	8001ab8 <getAxesRawData+0xd0>
		{
			errorcount++;
 8001aac:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <getAxesRawData+0x190>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <getAxesRawData+0x190>)
 8001ab6:	701a      	strb	r2, [r3, #0]
	AXESRAWDATA dataOut;
	dataOut.axisX = 0;
	dataOut.axisY = 0;
	dataOut.axisZ = 0;

	for (i = 0; i <= m; i++)
 8001ab8:	7ffb      	ldrb	r3, [r7, #31]
 8001aba:	3301      	adds	r3, #1
 8001abc:	77fb      	strb	r3, [r7, #31]
 8001abe:	7ffa      	ldrb	r2, [r7, #31]
 8001ac0:	7f7b      	ldrb	r3, [r7, #29]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d9e3      	bls.n	8001a8e <getAxesRawData+0xa6>
		{
			errorcount++;
		}
	}

	for (i = 0; i <= m; i++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	77fb      	strb	r3, [r7, #31]
 8001aca:	e02e      	b.n	8001b2a <getAxesRawData+0x142>
	{
		dataOut.axisX += data[i].AXIS_X;
 8001acc:	89b9      	ldrh	r1, [r7, #12]
 8001ace:	7ffa      	ldrb	r2, [r7, #31]
 8001ad0:	6978      	ldr	r0, [r7, #20]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4403      	add	r3, r0
 8001adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	440b      	add	r3, r1
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	81bb      	strh	r3, [r7, #12]
		dataOut.axisY += data[i].AXIS_Y;
 8001ae8:	89f9      	ldrh	r1, [r7, #14]
 8001aea:	7ffa      	ldrb	r2, [r7, #31]
 8001aec:	6978      	ldr	r0, [r7, #20]
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4403      	add	r3, r0
 8001af8:	3302      	adds	r3, #2
 8001afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	440b      	add	r3, r1
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	81fb      	strh	r3, [r7, #14]
		dataOut.axisZ += data[i].AXIS_Z;
 8001b06:	8a39      	ldrh	r1, [r7, #16]
 8001b08:	7ffa      	ldrb	r2, [r7, #31]
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4403      	add	r3, r0
 8001b16:	3304      	adds	r3, #4
 8001b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	440b      	add	r3, r1
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	823b      	strh	r3, [r7, #16]
		{
			errorcount++;
		}
	}

	for (i = 0; i <= m; i++)
 8001b24:	7ffb      	ldrb	r3, [r7, #31]
 8001b26:	3301      	adds	r3, #1
 8001b28:	77fb      	strb	r3, [r7, #31]
 8001b2a:	7ffa      	ldrb	r2, [r7, #31]
 8001b2c:	7f7b      	ldrb	r3, [r7, #29]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d9cc      	bls.n	8001acc <getAxesRawData+0xe4>
		dataOut.axisX += data[i].AXIS_X;
		dataOut.axisY += data[i].AXIS_Y;
		dataOut.axisZ += data[i].AXIS_Z;
	}

	dataOut.axisX /= m;
 8001b32:	89bb      	ldrh	r3, [r7, #12]
 8001b34:	461a      	mov	r2, r3
 8001b36:	7f7b      	ldrb	r3, [r7, #29]
 8001b38:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	81bb      	strh	r3, [r7, #12]
	dataOut.axisY /= m;
 8001b40:	89fb      	ldrh	r3, [r7, #14]
 8001b42:	461a      	mov	r2, r3
 8001b44:	7f7b      	ldrb	r3, [r7, #29]
 8001b46:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	81fb      	strh	r3, [r7, #14]
	dataOut.axisZ /= m;
 8001b4e:	8a3b      	ldrh	r3, [r7, #16]
 8001b50:	461a      	mov	r2, r3
 8001b52:	7f7b      	ldrb	r3, [r7, #29]
 8001b54:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	823b      	strh	r3, [r7, #16]

	return dataOut;	
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	6010      	str	r0, [r2, #0]
 8001b68:	889b      	ldrh	r3, [r3, #4]
 8001b6a:	8093      	strh	r3, [r2, #4]
 8001b6c:	46d5      	mov	sp, sl
}
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	3720      	adds	r7, #32
 8001b72:	46bd      	mov	sp, r7
 8001b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b78:	20000a82 	.word	0x20000a82

08001b7c <LIS3DH_ReadReg>:
*			: I2C or SPI reading functions
* Input			: Register Address
* Output		: Data REad
* Return		: None
*******************************************************************************/
u8_t LIS3DH_ReadReg(u8_t Reg, u8_t* Data) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]

    //To be completed with either I2c or SPI reading function
    //i.e. *Data = SPI_Mems_Read_Reg( Reg );

    *Data = _i2c_xfer (0, Reg, 0, 1);
 8001b88:	79f9      	ldrb	r1, [r7, #7]
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f7ff fcea 	bl	8001568 <_i2c_xfer>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	701a      	strb	r2, [r3, #0]

    return 1;
 8001b9c:	2301      	movs	r3, #1
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop

08001ba8 <LIS3DH_WriteReg>:
*			: I2C or SPI writing function
* Input			: Register Address, Data to be written
* Output		: None
* Return		: None
*******************************************************************************/
u8_t LIS3DH_WriteReg(u8_t WriteAddr, u8_t Data) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	71fb      	strb	r3, [r7, #7]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	71bb      	strb	r3, [r7, #6]

    //To be completed with either I2c or SPI writing function
    //i.e. SPI_Mems_Write_Reg(WriteAddr, Data);

    _i2c_xfer (0, WriteAddr, Data, 0);
 8001bb8:	79ba      	ldrb	r2, [r7, #6]
 8001bba:	79f9      	ldrb	r1, [r7, #7]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff fcd2 	bl	8001568 <_i2c_xfer>

    return 1;
 8001bc4:	2301      	movs	r3, #1
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop

08001bd0 <LIS3DH_SetODR>:
* Description    : Sets LIS3DH Output Data Rate
* Input          : Output Data Rate
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetODR(LIS3DH_ODR_t ov) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001bda:	f107 030f 	add.w	r3, r7, #15
 8001bde:	4619      	mov	r1, r3
 8001be0:	2020      	movs	r0, #32
 8001be2:	f7ff ffcb 	bl	8001b7c <LIS3DH_ReadReg>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <LIS3DH_SetODR+0x20>
        return MEMS_ERROR;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e018      	b.n	8001c22 <LIS3DH_SetODR+0x52>

    value &= 0x0f;
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	73fb      	strb	r3, [r7, #15]
    value |= ov<<LIS3DH_ODR_BIT;
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	b25a      	sxtb	r2, r3
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	b25b      	sxtb	r3, r3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b25b      	sxtb	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	2020      	movs	r0, #32
 8001c12:	f7ff ffc9 	bl	8001ba8 <LIS3DH_WriteReg>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <LIS3DH_SetODR+0x50>
        return MEMS_ERROR;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e000      	b.n	8001c22 <LIS3DH_SetODR+0x52>

    return MEMS_SUCCESS;
 8001c20:	2301      	movs	r3, #1
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop

08001c2c <LIS3DH_SetTemperature>:
* Output         : None
* Note           : For Read Temperature by LIS3DH_OUT_AUX_3, LIS3DH_SetADCAux and LIS3DH_SetBDU
				   functions must be ENABLE
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetTemperature(State_t state) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
 8001c36:	f107 030f 	add.w	r3, r7, #15
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	201f      	movs	r0, #31
 8001c3e:	f7ff ff9d 	bl	8001b7c <LIS3DH_ReadReg>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <LIS3DH_SetTemperature+0x20>
        return MEMS_ERROR;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e018      	b.n	8001c7e <LIS3DH_SetTemperature+0x52>

    value &= 0xBF;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	73fb      	strb	r3, [r7, #15]
    value |= state<<LIS3DH_TEMP_EN;
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	019b      	lsls	r3, r3, #6
 8001c5a:	b25a      	sxtb	r2, r3
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	b25b      	sxtb	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	201f      	movs	r0, #31
 8001c6e:	f7ff ff9b 	bl	8001ba8 <LIS3DH_WriteReg>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <LIS3DH_SetTemperature+0x50>
        return MEMS_ERROR;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e000      	b.n	8001c7e <LIS3DH_SetTemperature+0x52>

    return MEMS_SUCCESS;
 8001c7c:	2301      	movs	r3, #1
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop

08001c88 <LIS3DH_SetADCAux>:
* Description    : Sets LIS3DH Output ADC
* Input          : MEMS_ENABLE, MEMS_DISABLE
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetADCAux(State_t state) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
 8001c92:	f107 030f 	add.w	r3, r7, #15
 8001c96:	4619      	mov	r1, r3
 8001c98:	201f      	movs	r0, #31
 8001c9a:	f7ff ff6f 	bl	8001b7c <LIS3DH_ReadReg>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <LIS3DH_SetADCAux+0x20>
        return MEMS_ERROR;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e018      	b.n	8001cda <LIS3DH_SetADCAux+0x52>

    value &= 0x7F;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	73fb      	strb	r3, [r7, #15]
    value |= state<<LIS3DH_ADC_PD;
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	01db      	lsls	r3, r3, #7
 8001cb6:	b25a      	sxtb	r2, r3
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	201f      	movs	r0, #31
 8001cca:	f7ff ff6d 	bl	8001ba8 <LIS3DH_WriteReg>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <LIS3DH_SetADCAux+0x50>
        return MEMS_ERROR;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e000      	b.n	8001cda <LIS3DH_SetADCAux+0x52>

    return MEMS_SUCCESS;
 8001cd8:	2301      	movs	r3, #1
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop

08001ce4 <LIS3DH_GetTempRaw>:
* Description    : Read the Temperature Values by AUX Output Registers OUT_3_H
* Input          : Buffer to empty
* Output         : Temperature Values Registers buffer
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_GetTempRaw(i8_t* buff) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
    u8_t valueL;
    u8_t valueH;

    if( !LIS3DH_ReadReg(LIS3DH_OUT_3_L, &valueL) )
 8001cec:	f107 030f 	add.w	r3, r7, #15
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	200c      	movs	r0, #12
 8001cf4:	f7ff ff42 	bl	8001b7c <LIS3DH_ReadReg>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <LIS3DH_GetTempRaw+0x1e>
        return MEMS_ERROR;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e00f      	b.n	8001d22 <LIS3DH_GetTempRaw+0x3e>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_3_H, &valueH) )
 8001d02:	f107 030e 	add.w	r3, r7, #14
 8001d06:	4619      	mov	r1, r3
 8001d08:	200d      	movs	r0, #13
 8001d0a:	f7ff ff37 	bl	8001b7c <LIS3DH_ReadReg>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <LIS3DH_GetTempRaw+0x34>
        return MEMS_ERROR;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e004      	b.n	8001d22 <LIS3DH_GetTempRaw+0x3e>

    *buff = (i8_t)( valueH );
 8001d18:	7bbb      	ldrb	r3, [r7, #14]
 8001d1a:	b25a      	sxtb	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	701a      	strb	r2, [r3, #0]

    return MEMS_SUCCESS;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop

08001d2c <LIS3DH_SetMode>:
* Description    : Sets LIS3DH Operating Mode
* Input          : Modality (LIS3DH_NORMAL, LIS3DH_LOW_POWER, LIS3DH_POWER_DOWN)
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetMode(LIS3DH_Mode_t md) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
    u8_t value;
    u8_t value2;
    static   u8_t ODR_old_value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001d36:	f107 030f 	add.w	r3, r7, #15
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	2020      	movs	r0, #32
 8001d3e:	f7ff ff1d 	bl	8001b7c <LIS3DH_ReadReg>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <LIS3DH_SetMode+0x20>
        return MEMS_ERROR;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e066      	b.n	8001e1a <LIS3DH_SetMode+0xee>

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value2) )
 8001d4c:	f107 030e 	add.w	r3, r7, #14
 8001d50:	4619      	mov	r1, r3
 8001d52:	2023      	movs	r0, #35	; 0x23
 8001d54:	f7ff ff12 	bl	8001b7c <LIS3DH_ReadReg>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <LIS3DH_SetMode+0x36>
        return MEMS_ERROR;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e05b      	b.n	8001e1a <LIS3DH_SetMode+0xee>

    if((value & 0xF0)==0)
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10b      	bne.n	8001d84 <LIS3DH_SetMode+0x58>
        value = value | (ODR_old_value & 0xF0); //if it comes from POWERDOWN
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <LIS3DH_SetMode+0xf8>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	f023 030f 	bic.w	r3, r3, #15
 8001d76:	b25a      	sxtb	r2, r3
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	b25b      	sxtb	r3, r3
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b25b      	sxtb	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	73fb      	strb	r3, [r7, #15]

    switch(md) {
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d01e      	beq.n	8001dc8 <LIS3DH_SetMode+0x9c>
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d00a      	beq.n	8001da4 <LIS3DH_SetMode+0x78>
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d12c      	bne.n	8001dec <LIS3DH_SetMode+0xc0>

    case LIS3DH_POWER_DOWN:
        ODR_old_value = value;
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <LIS3DH_SetMode+0xf8>)
 8001d96:	701a      	strb	r2, [r3, #0]
        value &= 0x0F;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	73fb      	strb	r3, [r7, #15]
        break;
 8001da2:	e025      	b.n	8001df0 <LIS3DH_SetMode+0xc4>

    case LIS3DH_NORMAL:
        value &= 0xF7;
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	f023 0308 	bic.w	r3, r3, #8
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	73fb      	strb	r3, [r7, #15]
        value |= (MEMS_RESET<<LIS3DH_LPEN);
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 8001db2:	7bbb      	ldrb	r3, [r7, #14]
 8001db4:	f023 0308 	bic.w	r3, r3, #8
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_SET<<LIS3DH_HR);   //set HighResolution_BIT
 8001dbc:	7bbb      	ldrb	r3, [r7, #14]
 8001dbe:	f043 0308 	orr.w	r3, r3, #8
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	73bb      	strb	r3, [r7, #14]
        break;
 8001dc6:	e013      	b.n	8001df0 <LIS3DH_SetMode+0xc4>

    case LIS3DH_LOW_POWER:
        value &= 0xF7;
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	f023 0308 	bic.w	r3, r3, #8
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	73fb      	strb	r3, [r7, #15]
        value |=  (MEMS_SET<<LIS3DH_LPEN);
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 8001ddc:	7bbb      	ldrb	r3, [r7, #14]
 8001dde:	f023 0308 	bic.w	r3, r3, #8
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_RESET<<LIS3DH_HR); //reset HighResolution_BIT
 8001de6:	7bbb      	ldrb	r3, [r7, #14]
 8001de8:	73bb      	strb	r3, [r7, #14]
        break;
 8001dea:	e001      	b.n	8001df0 <LIS3DH_SetMode+0xc4>

    default:
        return MEMS_ERROR;
 8001dec:	2300      	movs	r3, #0
 8001dee:	e014      	b.n	8001e1a <LIS3DH_SetMode+0xee>
    }

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	4619      	mov	r1, r3
 8001df4:	2020      	movs	r0, #32
 8001df6:	f7ff fed7 	bl	8001ba8 <LIS3DH_WriteReg>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <LIS3DH_SetMode+0xd8>
        return MEMS_ERROR;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e00a      	b.n	8001e1a <LIS3DH_SetMode+0xee>

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value2) )
 8001e04:	7bbb      	ldrb	r3, [r7, #14]
 8001e06:	4619      	mov	r1, r3
 8001e08:	2023      	movs	r0, #35	; 0x23
 8001e0a:	f7ff fecd 	bl	8001ba8 <LIS3DH_WriteReg>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <LIS3DH_SetMode+0xec>
        return MEMS_ERROR;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e000      	b.n	8001e1a <LIS3DH_SetMode+0xee>

    return MEMS_SUCCESS;
 8001e18:	2301      	movs	r3, #1
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000a40 	.word	0x20000a40

08001e28 <LIS3DH_SetAxis>:
* Input          : LIS3DH_X_ENABLE/DISABLE | LIS3DH_Y_ENABLE/DISABLE | LIS3DH_Z_ENABLE/DISABLE
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetAxis(LIS3DH_Axis_t axis) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001e32:	f107 030f 	add.w	r3, r7, #15
 8001e36:	4619      	mov	r1, r3
 8001e38:	2020      	movs	r0, #32
 8001e3a:	f7ff fe9f 	bl	8001b7c <LIS3DH_ReadReg>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <LIS3DH_SetAxis+0x20>
        return MEMS_ERROR;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e017      	b.n	8001e78 <LIS3DH_SetAxis+0x50>
    value &= 0xF8;
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	f023 0307 	bic.w	r3, r3, #7
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	73fb      	strb	r3, [r7, #15]
    value |= (0x07 & axis);
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	4619      	mov	r1, r3
 8001e66:	2020      	movs	r0, #32
 8001e68:	f7ff fe9e 	bl	8001ba8 <LIS3DH_WriteReg>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <LIS3DH_SetAxis+0x4e>
        return MEMS_ERROR;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e000      	b.n	8001e78 <LIS3DH_SetAxis+0x50>

    return MEMS_SUCCESS;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <LIS3DH_SetFullScale>:
* Description    : Sets the LIS3DH FullScale
* Input          : LIS3DH_FULLSCALE_2/LIS3DH_FULLSCALE_4/LIS3DH_FULLSCALE_8/LIS3DH_FULLSCALE_16
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetFullScale(LIS3DH_Fullscale_t fs) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 8001e8a:	f107 030f 	add.w	r3, r7, #15
 8001e8e:	4619      	mov	r1, r3
 8001e90:	2023      	movs	r0, #35	; 0x23
 8001e92:	f7ff fe73 	bl	8001b7c <LIS3DH_ReadReg>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <LIS3DH_SetFullScale+0x20>
        return MEMS_ERROR;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	e018      	b.n	8001ed2 <LIS3DH_SetFullScale+0x52>

    value &= 0xCF;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	73fb      	strb	r3, [r7, #15]
    value |= (fs<<LIS3DH_FS);
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	b25a      	sxtb	r2, r3
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	b25b      	sxtb	r3, r3
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	b25b      	sxtb	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	2023      	movs	r0, #35	; 0x23
 8001ec2:	f7ff fe71 	bl	8001ba8 <LIS3DH_WriteReg>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <LIS3DH_SetFullScale+0x50>
        return MEMS_ERROR;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e000      	b.n	8001ed2 <LIS3DH_SetFullScale+0x52>

    return MEMS_SUCCESS;
 8001ed0:	2301      	movs	r3, #1
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop

08001edc <LIS3DH_SetBDU>:
* Description    : Enable/Disable Block Data Update Functionality
* Input          : ENABLE/DISABLE
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetBDU(State_t bdu) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 8001ee6:	f107 030f 	add.w	r3, r7, #15
 8001eea:	4619      	mov	r1, r3
 8001eec:	2023      	movs	r0, #35	; 0x23
 8001eee:	f7ff fe45 	bl	8001b7c <LIS3DH_ReadReg>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <LIS3DH_SetBDU+0x20>
        return MEMS_ERROR;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e018      	b.n	8001f2e <LIS3DH_SetBDU+0x52>

    value &= 0x7F;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	73fb      	strb	r3, [r7, #15]
    value |= (bdu<<LIS3DH_BDU);
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	01db      	lsls	r3, r3, #7
 8001f0a:	b25a      	sxtb	r2, r3
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	b25b      	sxtb	r3, r3
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b25b      	sxtb	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	2023      	movs	r0, #35	; 0x23
 8001f1e:	f7ff fe43 	bl	8001ba8 <LIS3DH_WriteReg>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <LIS3DH_SetBDU+0x50>
        return MEMS_ERROR;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e000      	b.n	8001f2e <LIS3DH_SetBDU+0x52>

    return MEMS_SUCCESS;
 8001f2c:	2301      	movs	r3, #1
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop

08001f38 <LIS3DH_SetIntConfiguration>:
* Input          : LIS3DH_INT1_AND/OR | LIS3DH_INT1_ZHIE_ENABLE/DISABLE | LIS3DH_INT1_ZLIE_ENABLE/DISABLE...
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntConfiguration(LIS3DH_Int1Conf_t ic) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 8001f42:	f107 030f 	add.w	r3, r7, #15
 8001f46:	4619      	mov	r1, r3
 8001f48:	2030      	movs	r0, #48	; 0x30
 8001f4a:	f7ff fe17 	bl	8001b7c <LIS3DH_ReadReg>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <LIS3DH_SetIntConfiguration+0x20>
        return MEMS_ERROR;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e014      	b.n	8001f82 <LIS3DH_SetIntConfiguration+0x4a>

    value &= 0x40;
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	73fb      	strb	r3, [r7, #15]
    value |= ic;
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	4619      	mov	r1, r3
 8001f70:	2030      	movs	r0, #48	; 0x30
 8001f72:	f7ff fe19 	bl	8001ba8 <LIS3DH_WriteReg>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <LIS3DH_SetIntConfiguration+0x48>
        return MEMS_ERROR;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e000      	b.n	8001f82 <LIS3DH_SetIntConfiguration+0x4a>

    return MEMS_SUCCESS;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop

08001f8c <LIS3DH_SetIntMode>:
* Input          : LIS3DH_INT_MODE_OR, LIS3DH_INT_MODE_6D_MOVEMENT, LIS3DH_INT_MODE_AND,
				   LIS3DH_INT_MODE_6D_POSITION
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntMode(LIS3DH_Int1Mode_t int_mode) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 8001f96:	f107 030f 	add.w	r3, r7, #15
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	2030      	movs	r0, #48	; 0x30
 8001f9e:	f7ff fded 	bl	8001b7c <LIS3DH_ReadReg>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <LIS3DH_SetIntMode+0x20>
        return MEMS_ERROR;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e018      	b.n	8001fde <LIS3DH_SetIntMode+0x52>

    value &= 0x3F;
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	73fb      	strb	r3, [r7, #15]
    value |= (int_mode<<LIS3DH_INT_6D);
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	019b      	lsls	r3, r3, #6
 8001fba:	b25a      	sxtb	r2, r3
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	b25b      	sxtb	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	2030      	movs	r0, #48	; 0x30
 8001fce:	f7ff fdeb 	bl	8001ba8 <LIS3DH_WriteReg>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <LIS3DH_SetIntMode+0x50>
        return MEMS_ERROR;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e000      	b.n	8001fde <LIS3DH_SetIntMode+0x52>

    return MEMS_SUCCESS;
 8001fdc:	2301      	movs	r3, #1
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop

08001fe8 <LIS3DH_Get6DPosition>:
* Description    : 6D, 4D Interrupt Position Detect
* Input          : Byte to empty by POSITION_6D_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_Get6DPosition(u8_t* val) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_SRC, &value) )
 8001ff0:	f107 030f 	add.w	r3, r7, #15
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	2031      	movs	r0, #49	; 0x31
 8001ff8:	f7ff fdc0 	bl	8001b7c <LIS3DH_ReadReg>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <LIS3DH_Get6DPosition+0x1e>
        return MEMS_ERROR;
 8002002:	2300      	movs	r3, #0
 8002004:	e065      	b.n	80020d2 <LIS3DH_Get6DPosition+0xea>

    value &= 0x7F;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800200c:	b2db      	uxtb	r3, r3
 800200e:	73fb      	strb	r3, [r7, #15]

    switch (value) {
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	3b41      	subs	r3, #65	; 0x41
 8002014:	2b1f      	cmp	r3, #31
 8002016:	d85b      	bhi.n	80020d0 <LIS3DH_Get6DPosition+0xe8>
 8002018:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <LIS3DH_Get6DPosition+0x38>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	080020b1 	.word	0x080020b1
 8002024:	080020a9 	.word	0x080020a9
 8002028:	080020d1 	.word	0x080020d1
 800202c:	080020a1 	.word	0x080020a1
 8002030:	080020d1 	.word	0x080020d1
 8002034:	080020d1 	.word	0x080020d1
 8002038:	080020d1 	.word	0x080020d1
 800203c:	080020b9 	.word	0x080020b9
 8002040:	080020d1 	.word	0x080020d1
 8002044:	080020d1 	.word	0x080020d1
 8002048:	080020d1 	.word	0x080020d1
 800204c:	080020d1 	.word	0x080020d1
 8002050:	080020d1 	.word	0x080020d1
 8002054:	080020d1 	.word	0x080020d1
 8002058:	080020d1 	.word	0x080020d1
 800205c:	080020c9 	.word	0x080020c9
 8002060:	080020d1 	.word	0x080020d1
 8002064:	080020d1 	.word	0x080020d1
 8002068:	080020d1 	.word	0x080020d1
 800206c:	080020d1 	.word	0x080020d1
 8002070:	080020d1 	.word	0x080020d1
 8002074:	080020d1 	.word	0x080020d1
 8002078:	080020d1 	.word	0x080020d1
 800207c:	080020d1 	.word	0x080020d1
 8002080:	080020d1 	.word	0x080020d1
 8002084:	080020d1 	.word	0x080020d1
 8002088:	080020d1 	.word	0x080020d1
 800208c:	080020d1 	.word	0x080020d1
 8002090:	080020d1 	.word	0x080020d1
 8002094:	080020d1 	.word	0x080020d1
 8002098:	080020d1 	.word	0x080020d1
 800209c:	080020c1 	.word	0x080020c1
    case LIS3DH_UP_SX:
        *val = LIS3DH_UP_SX;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2244      	movs	r2, #68	; 0x44
 80020a4:	701a      	strb	r2, [r3, #0]
        break;
 80020a6:	e013      	b.n	80020d0 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_UP_DX:
        *val = LIS3DH_UP_DX;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2242      	movs	r2, #66	; 0x42
 80020ac:	701a      	strb	r2, [r3, #0]
        break;
 80020ae:	e00f      	b.n	80020d0 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_SX:
        *val = LIS3DH_DW_SX;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2241      	movs	r2, #65	; 0x41
 80020b4:	701a      	strb	r2, [r3, #0]
        break;
 80020b6:	e00b      	b.n	80020d0 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_DX:
        *val = LIS3DH_DW_DX;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2248      	movs	r2, #72	; 0x48
 80020bc:	701a      	strb	r2, [r3, #0]
        break;
 80020be:	e007      	b.n	80020d0 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_TOP:
        *val = LIS3DH_TOP;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2260      	movs	r2, #96	; 0x60
 80020c4:	701a      	strb	r2, [r3, #0]
        break;
 80020c6:	e003      	b.n	80020d0 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_BOTTOM:
        *val = LIS3DH_BOTTOM;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2250      	movs	r2, #80	; 0x50
 80020cc:	701a      	strb	r2, [r3, #0]
        break;
 80020ce:	bf00      	nop
    }

    return MEMS_SUCCESS;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop

080020dc <LIS3DH_SetInt1Threshold>:
* Description    : Sets Interrupt 1 Threshold
* Input          : Threshold = [0,31]
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetInt1Threshold(u8_t ths) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
    if (ths > 127)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	da01      	bge.n	80020f2 <LIS3DH_SetInt1Threshold+0x16>
        return MEMS_ERROR;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e00a      	b.n	8002108 <LIS3DH_SetInt1Threshold+0x2c>

    if( !LIS3DH_WriteReg(LIS3DH_INT1_THS, ths) )
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	4619      	mov	r1, r3
 80020f6:	2032      	movs	r0, #50	; 0x32
 80020f8:	f7ff fd56 	bl	8001ba8 <LIS3DH_WriteReg>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <LIS3DH_SetInt1Threshold+0x2a>
        return MEMS_ERROR;
 8002102:	2300      	movs	r3, #0
 8002104:	e000      	b.n	8002108 <LIS3DH_SetInt1Threshold+0x2c>

    return MEMS_SUCCESS;
 8002106:	2301      	movs	r3, #1
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <LIS3DH_GetAccAxesRaw>:
* Description    : Read the Acceleration Values Output Registers
* Input          : buffer to empity by AxesRaw_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_GetAccAxesRaw(AxesRaw_t* buff) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    i16_t value;
    u8_t *valueL = (u8_t *)(&value);
 8002118:	f107 030e 	add.w	r3, r7, #14
 800211c:	617b      	str	r3, [r7, #20]
    u8_t *valueH = ((u8_t *)(&value)+1);
 800211e:	f107 030e 	add.w	r3, r7, #14
 8002122:	3301      	adds	r3, #1
 8002124:	613b      	str	r3, [r7, #16]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_L, valueL) )
 8002126:	6979      	ldr	r1, [r7, #20]
 8002128:	2028      	movs	r0, #40	; 0x28
 800212a:	f7ff fd27 	bl	8001b7c <LIS3DH_ReadReg>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <LIS3DH_GetAccAxesRaw+0x28>
        return MEMS_ERROR;
 8002134:	2300      	movs	r3, #0
 8002136:	e039      	b.n	80021ac <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_H, valueH) )
 8002138:	6939      	ldr	r1, [r7, #16]
 800213a:	2029      	movs	r0, #41	; 0x29
 800213c:	f7ff fd1e 	bl	8001b7c <LIS3DH_ReadReg>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <LIS3DH_GetAccAxesRaw+0x3a>
        return MEMS_ERROR;
 8002146:	2300      	movs	r3, #0
 8002148:	e030      	b.n	80021ac <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_X = value;
 800214a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	801a      	strh	r2, [r3, #0]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_L, valueL) )
 8002152:	6979      	ldr	r1, [r7, #20]
 8002154:	202a      	movs	r0, #42	; 0x2a
 8002156:	f7ff fd11 	bl	8001b7c <LIS3DH_ReadReg>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <LIS3DH_GetAccAxesRaw+0x54>
        return MEMS_ERROR;
 8002160:	2300      	movs	r3, #0
 8002162:	e023      	b.n	80021ac <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_H, valueH) )
 8002164:	6939      	ldr	r1, [r7, #16]
 8002166:	202b      	movs	r0, #43	; 0x2b
 8002168:	f7ff fd08 	bl	8001b7c <LIS3DH_ReadReg>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <LIS3DH_GetAccAxesRaw+0x66>
        return MEMS_ERROR;
 8002172:	2300      	movs	r3, #0
 8002174:	e01a      	b.n	80021ac <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Y = value;
 8002176:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	805a      	strh	r2, [r3, #2]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_L, valueL) )
 800217e:	6979      	ldr	r1, [r7, #20]
 8002180:	202c      	movs	r0, #44	; 0x2c
 8002182:	f7ff fcfb 	bl	8001b7c <LIS3DH_ReadReg>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <LIS3DH_GetAccAxesRaw+0x80>
        return MEMS_ERROR;
 800218c:	2300      	movs	r3, #0
 800218e:	e00d      	b.n	80021ac <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_H, valueH) )
 8002190:	6939      	ldr	r1, [r7, #16]
 8002192:	202d      	movs	r0, #45	; 0x2d
 8002194:	f7ff fcf2 	bl	8001b7c <LIS3DH_ReadReg>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <LIS3DH_GetAccAxesRaw+0x92>
        return MEMS_ERROR;
 800219e:	2300      	movs	r3, #0
 80021a0:	e004      	b.n	80021ac <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Z = value;
 80021a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	809a      	strh	r2, [r3, #4]

    return MEMS_SUCCESS;
 80021aa:	2301      	movs	r3, #1
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	490d      	ldr	r1, [pc, #52]	; (8002200 <__NVIC_SetPriority+0x4c>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	0092      	lsls	r2, r2, #2
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	4909      	ldr	r1, [pc, #36]	; (8002204 <__NVIC_SetPriority+0x50>)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	3b04      	subs	r3, #4
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	0092      	lsls	r2, r2, #2
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
  }
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002218:	d301      	bcc.n	800221e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221a:	2301      	movs	r3, #1
 800221c:	e00f      	b.n	800223e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <SysTick_Config+0x40>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002226:	213f      	movs	r1, #63	; 0x3f
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f7ff ffc2 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <SysTick_Config+0x40>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002236:	4b04      	ldr	r3, [pc, #16]	; (8002248 <SysTick_Config+0x40>)
 8002238:	2207      	movs	r2, #7
 800223a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	e000e010 	.word	0xe000e010

0800224c <main>:
#include "3Daccel_app.h"
#include "3Daccel_out_library.h"
#include "lis3dh_library.h"

int main (void)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b093      	sub	sp, #76	; 0x4c
 8002250:	af02      	add	r7, sp, #8
	char rx_buff[RX_BUFFER_SIZE];
	
	memset (&rx_buff, 0, sizeof (rx_buff));
 8002252:	463b      	mov	r3, r7
 8002254:	2240      	movs	r2, #64	; 0x40
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f002 f859 	bl	8004310 <memset>

	direction = 6;
 800225e:	4b82      	ldr	r3, [pc, #520]	; (8002468 <main+0x21c>)
 8002260:	2206      	movs	r2, #6
 8002262:	701a      	strb	r2, [r3, #0]
	temperature = 0;
 8002264:	4b81      	ldr	r3, [pc, #516]	; (800246c <main+0x220>)
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
	errorcount = 0;
 800226a:	4b81      	ldr	r3, [pc, #516]	; (8002470 <main+0x224>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
	packagesSent = 0;
 8002270:	4b80      	ldr	r3, [pc, #512]	; (8002474 <main+0x228>)
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
	position = 0;
 8002276:	4b80      	ldr	r3, [pc, #512]	; (8002478 <main+0x22c>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
	old_position = 0;
 800227c:	4b7f      	ldr	r3, [pc, #508]	; (800247c <main+0x230>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
	readAxes.axisX = 0;
 8002282:	4b7f      	ldr	r3, [pc, #508]	; (8002480 <main+0x234>)
 8002284:	2200      	movs	r2, #0
 8002286:	801a      	strh	r2, [r3, #0]
	readAxes.axisY = 0;
 8002288:	4b7d      	ldr	r3, [pc, #500]	; (8002480 <main+0x234>)
 800228a:	2200      	movs	r2, #0
 800228c:	805a      	strh	r2, [r3, #2]
	readAxes.axisZ = 0;
 800228e:	4b7c      	ldr	r3, [pc, #496]	; (8002480 <main+0x234>)
 8002290:	2200      	movs	r2, #0
 8002292:	809a      	strh	r2, [r3, #4]
	statisticSend = 0;
 8002294:	4b7b      	ldr	r3, [pc, #492]	; (8002484 <main+0x238>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
	signal1 = 0.00;
 800229a:	4a7b      	ldr	r2, [pc, #492]	; (8002488 <main+0x23c>)
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	f04f 0400 	mov.w	r4, #0
 80022a4:	e9c2 3400 	strd	r3, r4, [r2]
	signal2 = 0.00;
 80022a8:	4a78      	ldr	r2, [pc, #480]	; (800248c <main+0x240>)
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	f04f 0400 	mov.w	r4, #0
 80022b2:	e9c2 3400 	strd	r3, r4, [r2]
	servoEnable = 0;
 80022b6:	4b76      	ldr	r3, [pc, #472]	; (8002490 <main+0x244>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
	buttonSend = 0;
 80022bc:	4b75      	ldr	r3, [pc, #468]	; (8002494 <main+0x248>)
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]

	// init DEBUG, UART, I2C
    initRetargetSwo();
 80022c2:	f7ff f839 	bl	8001338 <initRetargetSwo>
    _init_uart0_ch0();
 80022c6:	f7fe f8c5 	bl	8000454 <_init_uart0_ch0>
    _init_i2c1_ch0();
 80022ca:	f7ff f923 	bl	8001514 <_init_i2c1_ch0>
	initServoPWM();
 80022ce:	f7fe f9db 	bl	8000688 <initServoPWM>
	pwm(7, 0);
 80022d2:	2200      	movs	r2, #0
 80022d4:	f04f 0000 	mov.w	r0, #0
 80022d8:	496f      	ldr	r1, [pc, #444]	; (8002498 <main+0x24c>)
 80022da:	f7fe f9bb 	bl	8000654 <pwm>
	pwm(7, 1);
 80022de:	2201      	movs	r2, #1
 80022e0:	f04f 0000 	mov.w	r0, #0
 80022e4:	496c      	ldr	r1, [pc, #432]	; (8002498 <main+0x24c>)
 80022e6:	f7fe f9b5 	bl	8000654 <pwm>

#if DEBUG
    printf("DEBUG+I2C+UART init done...\n");
 80022ea:	486c      	ldr	r0, [pc, #432]	; (800249c <main+0x250>)
 80022ec:	f002 f8a6 	bl	800443c <puts>
#endif

	// init LED output
	outputInit();
 80022f0:	f7fe fc7c 	bl	8000bec <outputInit>

	// init BUTTON input
	inputInit();
 80022f4:	f7fe ff48 	bl	8001188 <inputInit>
	circularInit();
 80022f8:	f7fe ff2a 	bl	8001150 <circularInit>

    // init MEMS
	while (1)
	{
		if (initMEMSsensor() == 0)
 80022fc:	f7ff f9c4 	bl	8001688 <initMEMSsensor>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <main+0xc2>
		{
#if DEBUG
			printf("MEMS init done...\n");
 8002306:	4866      	ldr	r0, [pc, #408]	; (80024a0 <main+0x254>)
 8002308:	f002 f898 	bl	800443c <puts>
#endif
			break;
 800230c:	e007      	b.n	800231e <main+0xd2>
		}
		else
		{
#if DEBUG
			printf("Error MEMS init, retry...\n");
 800230e:	4865      	ldr	r0, [pc, #404]	; (80024a4 <main+0x258>)
 8002310:	f002 f894 	bl	800443c <puts>
#endif
			ledSetting(0, 1);
 8002314:	2101      	movs	r1, #1
 8002316:	2000      	movs	r0, #0
 8002318:	f7fe fc7e 	bl	8000c18 <ledSetting>
		}
	}
 800231c:	e7ee      	b.n	80022fc <main+0xb0>

	// config MEMS
	while (1)
	{
		if (configMEMSsensor() == 0)
 800231e:	f7ff fa1b 	bl	8001758 <configMEMSsensor>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10d      	bne.n	8002344 <main+0xf8>
		{
#if DEBUG
			printf("MEMS config done...\n");
 8002328:	485f      	ldr	r0, [pc, #380]	; (80024a8 <main+0x25c>)
 800232a:	f002 f887 	bl	800443c <puts>
#endif
			break;
 800232e:	bf00      	nop
	}

/*	configFREEfall();*/

	// set up SysTick
    SysTick_Config (SystemCoreClock / 1000);
 8002330:	4b5e      	ldr	r3, [pc, #376]	; (80024ac <main+0x260>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a5e      	ldr	r2, [pc, #376]	; (80024b0 <main+0x264>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	099b      	lsrs	r3, r3, #6
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff63 	bl	8002208 <SysTick_Config>
 8002342:	e007      	b.n	8002354 <main+0x108>
			break;
		}
		else
		{
#if DEBUG
			printf("Error MEMS config, retry...\n");
 8002344:	485b      	ldr	r0, [pc, #364]	; (80024b4 <main+0x268>)
 8002346:	f002 f879 	bl	800443c <puts>
#endif
			ledSetting(0, 1);
 800234a:	2101      	movs	r1, #1
 800234c:	2000      	movs	r0, #0
 800234e:	f7fe fc63 	bl	8000c18 <ledSetting>
		}
	}
 8002352:	e7e4      	b.n	800231e <main+0xd2>

	// main loop
	while(1)
	{
		// clear buffer and receie incoming data
		memset (&rx_buff, 0, sizeof (rx_buff));
 8002354:	463b      	mov	r3, r7
 8002356:	2240      	movs	r2, #64	; 0x40
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f001 ffd8 	bl	8004310 <memset>
		_uart_get_string (rx_buff);
 8002360:	463b      	mov	r3, r7
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe f94a 	bl	80005fc <_uart_get_string>
#if DEBUGI
		printf("received %s\n", rx_buff);
 8002368:	463b      	mov	r3, r7
 800236a:	4619      	mov	r1, r3
 800236c:	4852      	ldr	r0, [pc, #328]	; (80024b8 <main+0x26c>)
 800236e:	f002 f81d 	bl	80043ac <printf>
#endif

        if (strncmp(rx_buff, "#REQ,", strlen(rx_buff)) == 0)
 8002372:	463b      	mov	r3, r7
 8002374:	4618      	mov	r0, r3
 8002376:	f002 f8a3 	bl	80044c0 <strlen>
 800237a:	4602      	mov	r2, r0
 800237c:	463b      	mov	r3, r7
 800237e:	494f      	ldr	r1, [pc, #316]	; (80024bc <main+0x270>)
 8002380:	4618      	mov	r0, r3
 8002382:	f002 f90b 	bl	800459c <strncmp>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d114      	bne.n	80023b6 <main+0x16a>
        {
			// send data over UART
			protocolComplete(direction, readAxes.axisX, readAxes.axisY, readAxes.axisZ, temperature);
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <main+0x21c>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	b218      	sxth	r0, r3
 8002392:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <main+0x234>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	b219      	sxth	r1, r3
 8002398:	4b39      	ldr	r3, [pc, #228]	; (8002480 <main+0x234>)
 800239a:	885b      	ldrh	r3, [r3, #2]
 800239c:	b21a      	sxth	r2, r3
 800239e:	4b38      	ldr	r3, [pc, #224]	; (8002480 <main+0x234>)
 80023a0:	889b      	ldrh	r3, [r3, #4]
 80023a2:	b21c      	sxth	r4, r3
 80023a4:	4b31      	ldr	r3, [pc, #196]	; (800246c <main+0x220>)
 80023a6:	f993 3000 	ldrsb.w	r3, [r3]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	4623      	mov	r3, r4
 80023b0:	f7fe fb34 	bl	8000a1c <protocolComplete>
 80023b4:	e7ce      	b.n	8002354 <main+0x108>
		}
		else if (strncmp(rx_buff, "#END,", strlen(rx_buff)) == 0)
 80023b6:	463b      	mov	r3, r7
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 f881 	bl	80044c0 <strlen>
 80023be:	4602      	mov	r2, r0
 80023c0:	463b      	mov	r3, r7
 80023c2:	493f      	ldr	r1, [pc, #252]	; (80024c0 <main+0x274>)
 80023c4:	4618      	mov	r0, r3
 80023c6:	f002 f8e9 	bl	800459c <strncmp>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d104      	bne.n	80023da <main+0x18e>
		{
			ledSetting(0, 0);
 80023d0:	2100      	movs	r1, #0
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7fe fc20 	bl	8000c18 <ledSetting>
 80023d8:	e7bc      	b.n	8002354 <main+0x108>
		}
		else if (strncmp(rx_buff, "#CON,", strlen(rx_buff)) == 0)
 80023da:	463b      	mov	r3, r7
 80023dc:	4618      	mov	r0, r3
 80023de:	f002 f86f 	bl	80044c0 <strlen>
 80023e2:	4602      	mov	r2, r0
 80023e4:	463b      	mov	r3, r7
 80023e6:	4937      	ldr	r1, [pc, #220]	; (80024c4 <main+0x278>)
 80023e8:	4618      	mov	r0, r3
 80023ea:	f002 f8d7 	bl	800459c <strncmp>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d104      	bne.n	80023fe <main+0x1b2>
		{
			ledSetting(0, 1);
 80023f4:	2101      	movs	r1, #1
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7fe fc0e 	bl	8000c18 <ledSetting>
 80023fc:	e7aa      	b.n	8002354 <main+0x108>
		}
		else if (strncmp(rx_buff, "#SER,f", strlen(rx_buff)) == 0)
 80023fe:	463b      	mov	r3, r7
 8002400:	4618      	mov	r0, r3
 8002402:	f002 f85d 	bl	80044c0 <strlen>
 8002406:	4602      	mov	r2, r0
 8002408:	463b      	mov	r3, r7
 800240a:	492f      	ldr	r1, [pc, #188]	; (80024c8 <main+0x27c>)
 800240c:	4618      	mov	r0, r3
 800240e:	f002 f8c5 	bl	800459c <strncmp>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d103      	bne.n	8002420 <main+0x1d4>
		{
			servoEnable = 0;
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <main+0x244>)
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
 800241e:	e799      	b.n	8002354 <main+0x108>
		}
		else if (strncmp(rx_buff, "#SER,n", strlen(rx_buff)) == 0)
 8002420:	463b      	mov	r3, r7
 8002422:	4618      	mov	r0, r3
 8002424:	f002 f84c 	bl	80044c0 <strlen>
 8002428:	4602      	mov	r2, r0
 800242a:	463b      	mov	r3, r7
 800242c:	4927      	ldr	r1, [pc, #156]	; (80024cc <main+0x280>)
 800242e:	4618      	mov	r0, r3
 8002430:	f002 f8b4 	bl	800459c <strncmp>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <main+0x1f6>
		{
			servoEnable = 1;
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <main+0x244>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	e788      	b.n	8002354 <main+0x108>
		}
		else if (strncmp(rx_buff, "#STA,", strlen(rx_buff)) == 0)
 8002442:	463b      	mov	r3, r7
 8002444:	4618      	mov	r0, r3
 8002446:	f002 f83b 	bl	80044c0 <strlen>
 800244a:	4602      	mov	r2, r0
 800244c:	463b      	mov	r3, r7
 800244e:	4920      	ldr	r1, [pc, #128]	; (80024d0 <main+0x284>)
 8002450:	4618      	mov	r0, r3
 8002452:	f002 f8a3 	bl	800459c <strncmp>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d103      	bne.n	8002464 <main+0x218>
		{
			statisticSend = 1;
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <main+0x238>)
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]
 8002462:	e777      	b.n	8002354 <main+0x108>
		}
		else
		{
			continue;
 8002464:	bf00      	nop
		}
	}
 8002466:	e775      	b.n	8002354 <main+0x108>
 8002468:	20000a98 	.word	0x20000a98
 800246c:	20000a84 	.word	0x20000a84
 8002470:	20000a82 	.word	0x20000a82
 8002474:	20000a88 	.word	0x20000a88
 8002478:	20000a83 	.word	0x20000a83
 800247c:	20000a9a 	.word	0x20000a9a
 8002480:	20000a9c 	.word	0x20000a9c
 8002484:	20000a80 	.word	0x20000a80
 8002488:	20000aa8 	.word	0x20000aa8
 800248c:	20000a90 	.word	0x20000a90
 8002490:	20000a99 	.word	0x20000a99
 8002494:	20000ac3 	.word	0x20000ac3
 8002498:	401c0000 	.word	0x401c0000
 800249c:	0800aa70 	.word	0x0800aa70
 80024a0:	0800aa8c 	.word	0x0800aa8c
 80024a4:	0800aaa0 	.word	0x0800aaa0
 80024a8:	0800aabc 	.word	0x0800aabc
 80024ac:	2000ffc0 	.word	0x2000ffc0
 80024b0:	10624dd3 	.word	0x10624dd3
 80024b4:	0800aad0 	.word	0x0800aad0
 80024b8:	0800aaec 	.word	0x0800aaec
 80024bc:	0800aafc 	.word	0x0800aafc
 80024c0:	0800ab04 	.word	0x0800ab04
 80024c4:	0800ab0c 	.word	0x0800ab0c
 80024c8:	0800ab14 	.word	0x0800ab14
 80024cc:	0800ab1c 	.word	0x0800ab1c
 80024d0:	0800ab24 	.word	0x0800ab24

080024d4 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 80024e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop

0800250c <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
 return -1;
 8002510:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop

08002520 <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <_fstat+0x16>
  return -1;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
 8002534:	e001      	b.n	800253a <_fstat+0x1a>
 else
  return -2;
 8002536:	f06f 0301 	mvn.w	r3, #1
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop

08002548 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <_sbrk+0x60>)
 8002552:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <_sbrk+0x64>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d108      	bne.n	800256e <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <_sbrk+0x64>)
 800255e:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <_sbrk+0x68>)
 8002560:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 8002562:	4b12      	ldr	r3, [pc, #72]	; (80025ac <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	4413      	add	r3, r2
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <_sbrk+0x6c>)
 800256c:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <_sbrk+0x64>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8002574:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <_sbrk+0x64>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 8002580:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8002584:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <_sbrk+0x6c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	429a      	cmp	r2, r3
 800258e:	d301      	bcc.n	8002594 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 8002590:	2300      	movs	r3, #0
 8002592:	e003      	b.n	800259c <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 8002594:	4a05      	ldr	r2, [pc, #20]	; (80025ac <_sbrk+0x64>)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 800259a:	693b      	ldr	r3, [r7, #16]
 }
}
 800259c:	4618      	mov	r0, r3
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	0000f4f0 	.word	0x0000f4f0
 80025ac:	20000a44 	.word	0x20000a44
 80025b0:	20000ad0 	.word	0x20000ad0
 80025b4:	20000a48 	.word	0x20000a48

080025b8 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop

080025c8 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	e003      	b.n	80025f6 <delay+0x16>
  {
    __NOP();
 80025ee:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3301      	adds	r3, #1
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d3f7      	bcc.n	80025ee <delay+0xe>
  {
    __NOP();
  }
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop

0800260c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800260c:	b598      	push	{r3, r4, r7, lr}
 800260e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8002610:	4a06      	ldr	r2, [pc, #24]	; (800262c <SystemInit+0x20>)
 8002612:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002616:	4614      	mov	r4, r2
 8002618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800261a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 800261e:	f000 f807 	bl	8002630 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8002622:	f000 f83d 	bl	80026a0 <SystemCoreClockSetup>
}
 8002626:	bf00      	nop
 8002628:	bd98      	pop	{r3, r4, r7, pc}
 800262a:	bf00      	nop
 800262c:	2000ffc4 	.word	0x2000ffc4

08002630 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002636:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <SystemCoreSetup+0x64>)
 800263a:	4a17      	ldr	r2, [pc, #92]	; (8002698 <SystemCoreSetup+0x68>)
 800263c:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800263e:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002642:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8002644:	4a13      	ldr	r2, [pc, #76]	; (8002694 <SystemCoreSetup+0x64>)
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <SystemCoreSetup+0x64>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8002654:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <SystemCoreSetup+0x64>)
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <SystemCoreSetup+0x64>)
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f023 0308 	bic.w	r3, r3, #8
 800265e:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <SystemCoreSetup+0x6c>)
 8002662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002666:	3314      	adds	r3, #20
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f023 030f 	bic.w	r3, r3, #15
 8002672:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f043 0303 	orr.w	r3, r3, #3
 800267a:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <SystemCoreSetup+0x6c>)
 800267e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002682:	3314      	adds	r3, #20
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	601a      	str	r2, [r3, #0]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00
 8002698:	08000000 	.word	0x08000000
 800269c:	58001000 	.word	0x58001000

080026a0 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80026a4:	4b75      	ldr	r3, [pc, #468]	; (800287c <SystemCoreClockSetup+0x1dc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10c      	bne.n	80026ca <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 80026b0:	4a72      	ldr	r2, [pc, #456]	; (800287c <SystemCoreClockSetup+0x1dc>)
 80026b2:	4b72      	ldr	r3, [pc, #456]	; (800287c <SystemCoreClockSetup+0x1dc>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80026bc:	bf00      	nop
 80026be:	4b6f      	ldr	r3, [pc, #444]	; (800287c <SystemCoreClockSetup+0x1dc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f9      	beq.n	80026be <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80026ca:	4b6d      	ldr	r3, [pc, #436]	; (8002880 <SystemCoreClockSetup+0x1e0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80026d6:	4a6a      	ldr	r2, [pc, #424]	; (8002880 <SystemCoreClockSetup+0x1e0>)
 80026d8:	4b69      	ldr	r3, [pc, #420]	; (8002880 <SystemCoreClockSetup+0x1e0>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e0:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80026e2:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80026e6:	f7ff ff7b 	bl	80025e0 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80026ea:	4a66      	ldr	r2, [pc, #408]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 80026ec:	4b65      	ldr	r3, [pc, #404]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026f4:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80026f6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80026fa:	f7ff ff71 	bl	80025e0 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80026fe:	4a61      	ldr	r2, [pc, #388]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 8002700:	4b60      	ldr	r3, [pc, #384]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002708:	f023 0302 	bic.w	r3, r3, #2
 800270c:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 800270e:	4b5e      	ldr	r3, [pc, #376]	; (8002888 <SystemCoreClockSetup+0x1e8>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002716:	2b00      	cmp	r3, #0
 8002718:	d029      	beq.n	800276e <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800271a:	4a5b      	ldr	r2, [pc, #364]	; (8002888 <SystemCoreClockSetup+0x1e8>)
 800271c:	4b5a      	ldr	r3, [pc, #360]	; (8002888 <SystemCoreClockSetup+0x1e8>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002724:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002728:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800272a:	f000 f927 	bl	800297c <OSCHP_GetFrequency>
 800272e:	4602      	mov	r2, r0
 8002730:	4b56      	ldr	r3, [pc, #344]	; (800288c <SystemCoreClockSetup+0x1ec>)
 8002732:	fba3 2302 	umull	r2, r3, r3, r2
 8002736:	0d1b      	lsrs	r3, r3, #20
 8002738:	3b01      	subs	r3, #1
 800273a:	041b      	lsls	r3, r3, #16
 800273c:	4952      	ldr	r1, [pc, #328]	; (8002888 <SystemCoreClockSetup+0x1e8>)
 800273e:	4a52      	ldr	r2, [pc, #328]	; (8002888 <SystemCoreClockSetup+0x1e8>)
 8002740:	6852      	ldr	r2, [r2, #4]
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8002746:	4a4f      	ldr	r2, [pc, #316]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 8002748:	4b4e      	ldr	r3, [pc, #312]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002752:	4a4c      	ldr	r2, [pc, #304]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 8002754:	4b4b      	ldr	r3, [pc, #300]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800275c:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 800275e:	bf00      	nop
 8002760:	4b48      	ldr	r3, [pc, #288]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002768:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800276c:	d1f8      	bne.n	8002760 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 800276e:	4a45      	ldr	r2, [pc, #276]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 8002770:	4b44      	ldr	r3, [pc, #272]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800277a:	4a42      	ldr	r2, [pc, #264]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 800277c:	4b41      	ldr	r3, [pc, #260]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f043 0310 	orr.w	r3, r3, #16
 8002784:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002786:	4b3f      	ldr	r3, [pc, #252]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 8002788:	4a41      	ldr	r2, [pc, #260]	; (8002890 <SystemCoreClockSetup+0x1f0>)
 800278a:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 800278c:	4a3d      	ldr	r2, [pc, #244]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002796:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8002798:	4a3a      	ldr	r2, [pc, #232]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 800279a:	4b3a      	ldr	r3, [pc, #232]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f023 0310 	bic.w	r3, r3, #16
 80027a2:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 80027a4:	4a37      	ldr	r2, [pc, #220]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 80027a6:	4b37      	ldr	r3, [pc, #220]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ae:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80027b0:	bf00      	nop
 80027b2:	4b34      	ldr	r3, [pc, #208]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f9      	beq.n	80027b2 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80027be:	4a31      	ldr	r2, [pc, #196]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 80027c0:	4b30      	ldr	r3, [pc, #192]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80027ca:	bf00      	nop
 80027cc:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f9      	bne.n	80027cc <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80027d8:	4a2e      	ldr	r2, [pc, #184]	; (8002894 <SystemCoreClockSetup+0x1f4>)
 80027da:	4b2e      	ldr	r3, [pc, #184]	; (8002894 <SystemCoreClockSetup+0x1f4>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e2:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80027e4:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <SystemCoreClockSetup+0x1f4>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80027ea:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <SystemCoreClockSetup+0x1f4>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80027f0:	4b28      	ldr	r3, [pc, #160]	; (8002894 <SystemCoreClockSetup+0x1f4>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80027f6:	4b27      	ldr	r3, [pc, #156]	; (8002894 <SystemCoreClockSetup+0x1f4>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 80027fc:	4b25      	ldr	r3, [pc, #148]	; (8002894 <SystemCoreClockSetup+0x1f4>)
 80027fe:	2200      	movs	r2, #0
 8002800:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <SystemCoreClockSetup+0x1f4>)
 8002804:	2203      	movs	r2, #3
 8002806:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002808:	4a1e      	ldr	r2, [pc, #120]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 800280a:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002812:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 8002816:	4a20      	ldr	r2, [pc, #128]	; (8002898 <SystemCoreClockSetup+0x1f8>)
 8002818:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 800281a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800281e:	f7ff fedf 	bl	80025e0 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002822:	bf00      	nop
 8002824:	4b17      	ldr	r3, [pc, #92]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f9      	beq.n	8002824 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 8002832:	4a1a      	ldr	r2, [pc, #104]	; (800289c <SystemCoreClockSetup+0x1fc>)
 8002834:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8002836:	f241 1094 	movw	r0, #4500	; 0x1194
 800283a:	f7ff fed1 	bl	80025e0 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800283e:	bf00      	nop
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f9      	beq.n	8002840 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800284c:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 800284e:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <SystemCoreClockSetup+0x200>)
 8002850:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8002852:	f241 7070 	movw	r0, #6000	; 0x1770
 8002856:	f7ff fec3 	bl	80025e0 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800285a:	bf00      	nop
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <SystemCoreClockSetup+0x1e4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f9      	beq.n	800285c <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8002868:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <SystemCoreClockSetup+0x204>)
 800286a:	2205      	movs	r2, #5
 800286c:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <SystemCoreClockSetup+0x1f4>)
 8002870:	2200      	movs	r2, #0
 8002872:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8002874:	f000 f818 	bl	80028a8 <SystemCoreClockUpdate>
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}
 800287c:	50004200 	.word	0x50004200
 8002880:	50004400 	.word	0x50004400
 8002884:	50004710 	.word	0x50004710
 8002888:	50004700 	.word	0x50004700
 800288c:	6b5fca6b 	.word	0x6b5fca6b
 8002890:	01134f00 	.word	0x01134f00
 8002894:	50004600 	.word	0x50004600
 8002898:	01074f00 	.word	0x01074f00
 800289c:	01044f00 	.word	0x01044f00
 80028a0:	01034f00 	.word	0x01034f00
 80028a4:	50004160 	.word	0x50004160

080028a8 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80028ae:	4b2f      	ldr	r3, [pc, #188]	; (800296c <SystemCoreClockUpdate+0xc4>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d03e      	beq.n	8002938 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80028ba:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <SystemCoreClockUpdate+0xc8>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80028c6:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <SystemCoreClockUpdate+0xcc>)
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	e002      	b.n	80028d2 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80028cc:	f000 f856 	bl	800297c <OSCHP_GetFrequency>
 80028d0:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80028d2:	4b27      	ldr	r3, [pc, #156]	; (8002970 <SystemCoreClockUpdate+0xc8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d020      	beq.n	8002920 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80028de:	4b24      	ldr	r3, [pc, #144]	; (8002970 <SystemCoreClockUpdate+0xc8>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80028e6:	0e1b      	lsrs	r3, r3, #24
 80028e8:	3301      	adds	r3, #1
 80028ea:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80028ec:	4b20      	ldr	r3, [pc, #128]	; (8002970 <SystemCoreClockUpdate+0xc8>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	3301      	adds	r3, #1
 80028f8:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80028fa:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <SystemCoreClockUpdate+0xc8>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	3301      	adds	r3, #1
 8002906:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	fb02 f303 	mul.w	r3, r2, r3
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e00d      	b.n	800293c <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8002920:	4b13      	ldr	r3, [pc, #76]	; (8002970 <SystemCoreClockUpdate+0xc8>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002928:	3301      	adds	r3, #1
 800292a:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	e001      	b.n	800293c <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <SystemCoreClockUpdate+0xcc>)
 800293a:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <SystemCoreClockUpdate+0xc4>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	3301      	adds	r3, #1
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 800294c:	4b07      	ldr	r3, [pc, #28]	; (800296c <SystemCoreClockUpdate+0xc4>)
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	3301      	adds	r3, #1
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800295e:	4a06      	ldr	r2, [pc, #24]	; (8002978 <SystemCoreClockUpdate+0xd0>)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6013      	str	r3, [r2, #0]
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	50004600 	.word	0x50004600
 8002970:	50004710 	.word	0x50004710
 8002974:	016e3600 	.word	0x016e3600
 8002978:	2000ffc0 	.word	0x2000ffc0

0800297c <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8002980:	4b02      	ldr	r3, [pc, #8]	; (800298c <OSCHP_GetFrequency+0x10>)
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	00b71b00 	.word	0x00b71b00

08002990 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	460b      	mov	r3, r1
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4618      	mov	r0, r3
 80029a6:	7afb      	ldrb	r3, [r7, #11]
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	3204      	adds	r2, #4
 80029b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80029b6:	7afb      	ldrb	r3, [r7, #11]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	21f8      	movs	r1, #248	; 0xf8
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	ea02 0103 	and.w	r1, r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1d02      	adds	r2, r0, #4
 80029ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80029d6:	7afb      	ldrb	r3, [r7, #11]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	2103      	movs	r1, #3
 80029dc:	fa01 f303 	lsl.w	r3, r1, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	401a      	ands	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a38      	ldr	r2, [pc, #224]	; (8002acc <XMC_GPIO_Init+0x13c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d003      	beq.n	80029f8 <XMC_GPIO_Init+0x68>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a37      	ldr	r2, [pc, #220]	; (8002ad0 <XMC_GPIO_Init+0x140>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d10a      	bne.n	8002a0e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029fc:	7afb      	ldrb	r3, [r7, #11]
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	401a      	ands	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	661a      	str	r2, [r3, #96]	; 0x60
 8002a0c:	e03c      	b.n	8002a88 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	7afb      	ldrb	r3, [r7, #11]
 8002a14:	409a      	lsls	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8002a1a:	7afb      	ldrb	r3, [r7, #11]
 8002a1c:	08db      	lsrs	r3, r3, #3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	4618      	mov	r0, r3
 8002a22:	7afb      	ldrb	r3, [r7, #11]
 8002a24:	08db      	lsrs	r3, r3, #3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3210      	adds	r2, #16
 8002a2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a32:	7afb      	ldrb	r3, [r7, #11]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	2107      	movs	r1, #7
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	ea02 0103 	and.w	r1, r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f100 0210 	add.w	r2, r0, #16
 8002a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8002a50:	7afb      	ldrb	r3, [r7, #11]
 8002a52:	08db      	lsrs	r3, r3, #3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	7afb      	ldrb	r3, [r7, #11]
 8002a5a:	08db      	lsrs	r3, r3, #3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3210      	adds	r2, #16
 8002a64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7a1b      	ldrb	r3, [r3, #8]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	7afb      	ldrb	r3, [r7, #11]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	ea42 0103 	orr.w	r1, r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f100 0210 	add.w	r2, r0, #16
 8002a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8002a88:	7afb      	ldrb	r3, [r7, #11]
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	4618      	mov	r0, r3
 8002a90:	7afb      	ldrb	r3, [r7, #11]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3204      	adds	r2, #4
 8002a9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	ea42 0103 	orr.w	r1, r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1d02      	adds	r2, r0, #4
 8002aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	48028e00 	.word	0x48028e00
 8002ad0:	48028f00 	.word	0x48028f00

08002ad4 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002ae6:	b2db      	uxtb	r3, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8002b1a:	2310      	movs	r3, #16
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fa62 	bl	8002fe8 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	79db      	ldrb	r3, [r3, #7]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	79db      	ldrb	r3, [r3, #7]
 8002b30:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 faa2 	bl	8003084 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	799b      	ldrb	r3, [r3, #6]
 8002b44:	3b01      	subs	r3, #1
 8002b46:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	791b      	ldrb	r3, [r3, #4]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	061b      	lsls	r3, r3, #24
 8002b66:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	795b      	ldrb	r3, [r3, #5]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d009      	beq.n	8002b8a <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	795b      	ldrb	r3, [r3, #5]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	635a      	str	r2, [r3, #52]	; 0x34
 8002b88:	e008      	b.n	8002b9c <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	791b      	ldrb	r3, [r3, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	041b      	lsls	r3, r3, #16
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8002baa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	891b      	ldrh	r3, [r3, #8]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop

08002bc0 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002bd2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d110      	bne.n	8002bfc <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002bda:	bf00      	nop
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ff79 	bl	8002ad4 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b80      	cmp	r3, #128	; 0x80
 8002be6:	d0f9      	beq.n	8002bdc <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002be8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ff81 	bl	8002af4 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 8002bfa:	e003      	b.n	8002c04 <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 8002bfc:	887a      	ldrh	r2, [r7, #2]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002c1a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d103      	bne.n	8002c2a <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	81fb      	strh	r3, [r7, #14]
 8002c28:	e003      	b.n	8002c32 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002c30:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8002c32:	89fb      	ldrh	r3, [r7, #14]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c52:	b2db      	uxtb	r3, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop

08002c84 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f9aa 	bl	8002fe8 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <XMC_I2C_CH_Init+0x4c>)
 8002c98:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	889b      	ldrh	r3, [r3, #4]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f817 	bl	8002cd4 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4619      	mov	r1, r3
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f831 	bl	8002d14 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	073f0303 	.word	0x073f0303

08002cd4 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8002ce6:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8002cea:	d109      	bne.n	8002d00 <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 8002cec:	887b      	ldrh	r3, [r7, #2]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	887b      	ldrh	r3, [r7, #2]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8002cfe:	e003      	b.n	8002d08 <XMC_I2C_CH_SetSlaveAddress+0x34>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8002d00:	887b      	ldrh	r3, [r7, #2]
 8002d02:	021a      	lsls	r2, r3, #8
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <XMC_I2C_CH_SetBaudrate+0x70>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d810      	bhi.n	8002d4c <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 8002d36:	220a      	movs	r2, #10
 8002d38:	6839      	ldr	r1, [r7, #0]
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f9a2 	bl	8003084 <XMC_USIC_CH_SetBaudrate>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d119      	bne.n	8002d7a <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
 8002d4a:	e016      	b.n	8002d7a <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4a0e      	ldr	r2, [pc, #56]	; (8002d88 <XMC_I2C_CH_SetBaudrate+0x74>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d810      	bhi.n	8002d76 <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8002d60:	2219      	movs	r2, #25
 8002d62:	6839      	ldr	r1, [r7, #0]
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f98d 	bl	8003084 <XMC_USIC_CH_SetBaudrate>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d104      	bne.n	8002d7a <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	73fb      	strb	r3, [r7, #15]
 8002d74:	e001      	b.n	8002d7a <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	000186a0 	.word	0x000186a0
 8002d88:	00061a80 	.word	0x00061a80

08002d8c <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	807b      	strh	r3, [r7, #2]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8002d9c:	887b      	ldrh	r3, [r7, #2]
 8002d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8002da6:	787b      	ldrb	r3, [r7, #1]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d103      	bne.n	8002db4 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002dba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d110      	bne.n	8002de4 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002dc2:	bf00      	nop
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ff3b 	bl	8002c40 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d0f9      	beq.n	8002dc4 <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff43 	bl	8002c60 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = temp;
  }
}
 8002de2:	e003      	b.n	8002dec <XMC_I2C_CH_MasterStart+0x60>

    channel->TBUF[0] = temp;
  }
  else
  {
    channel->IN[0U] = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
 8002e00:	4613      	mov	r3, r2
 8002e02:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8002e04:	887b      	ldrh	r3, [r7, #2]
 8002e06:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8002e0e:	787b      	ldrb	r3, [r7, #1]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d103      	bne.n	8002e1c <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e22:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d110      	bne.n	8002e4c <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002e2a:	bf00      	nop
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ff07 	bl	8002c40 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b80      	cmp	r3, #128	; 0x80
 8002e36:	d0f9      	beq.n	8002e2c <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002e38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ff0f 	bl	8002c60 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = tmp;
  }
}
 8002e4a:	e003      	b.n	8002e54 <XMC_I2C_CH_MasterRepeatedStart+0x60>

    channel->TBUF[0] = tmp;
  }
  else
  {
    channel->IN[0U] = tmp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e6a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d111      	bne.n	8002e96 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002e72:	bf00      	nop
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff fee3 	bl	8002c40 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b80      	cmp	r3, #128	; 0x80
 8002e7e:	d0f9      	beq.n	8002e74 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002e80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff feeb 	bl	8002c60 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
}
 8002e94:	e004      	b.n	8002ea0 <XMC_I2C_CH_MasterStop+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002e9c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002eba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d110      	bne.n	8002ee4 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002ec2:	bf00      	nop
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff febb 	bl	8002c40 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b80      	cmp	r3, #128	; 0x80
 8002ece:	d0f9      	beq.n	8002ec4 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002ed0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff fec3 	bl	8002c60 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
}
 8002ee2:	e003      	b.n	8002eec <XMC_I2C_CH_MasterTransmit+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <XMC_I2C_CH_MasterReceiveNack>:
  }
}

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f02:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d111      	bne.n	8002f2e <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002f0a:	bf00      	nop
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff fe97 	bl	8002c40 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b80      	cmp	r3, #128	; 0x80
 8002f16:	d0f9      	beq.n	8002f0c <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff fe9f 	bl	8002c60 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
}
 8002f2c:	e004      	b.n	8002f38 <XMC_I2C_CH_MasterReceiveNack+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002f34:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002f4e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5a:	73fb      	strb	r3, [r7, #15]
 8002f5c:	e003      	b.n	8002f66 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002f64:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	2000ffc0 	.word	0x2000ffc0

08002f8c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	0f1b      	lsrs	r3, r3, #28
 8002f98:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002fa0:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8002fb0:	4413      	add	r3, r2
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	601a      	str	r2, [r3, #0]
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	50004414 	.word	0x50004414

08002fc8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8002fcc:	f7ff ffd2 	bl	8002f74 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8002fd0:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8002fd2:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8002fda:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	50004600 	.word	0x50004600

08002fe8 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a1b      	ldr	r2, [pc, #108]	; (8003060 <XMC_USIC_CH_Enable+0x78>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <XMC_USIC_CH_Enable+0x18>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a1a      	ldr	r2, [pc, #104]	; (8003064 <XMC_USIC_CH_Enable+0x7c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d103      	bne.n	8003008 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8003000:	4819      	ldr	r0, [pc, #100]	; (8003068 <XMC_USIC_CH_Enable+0x80>)
 8003002:	f000 f91f 	bl	8003244 <XMC_USIC_Enable>
 8003006:	e016      	b.n	8003036 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a18      	ldr	r2, [pc, #96]	; (800306c <XMC_USIC_CH_Enable+0x84>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <XMC_USIC_CH_Enable+0x30>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a17      	ldr	r2, [pc, #92]	; (8003070 <XMC_USIC_CH_Enable+0x88>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d103      	bne.n	8003020 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8003018:	4816      	ldr	r0, [pc, #88]	; (8003074 <XMC_USIC_CH_Enable+0x8c>)
 800301a:	f000 f913 	bl	8003244 <XMC_USIC_Enable>
 800301e:	e00a      	b.n	8003036 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a15      	ldr	r2, [pc, #84]	; (8003078 <XMC_USIC_CH_Enable+0x90>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d003      	beq.n	8003030 <XMC_USIC_CH_Enable+0x48>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a14      	ldr	r2, [pc, #80]	; (800307c <XMC_USIC_CH_Enable+0x94>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d102      	bne.n	8003036 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8003030:	4813      	ldr	r0, [pc, #76]	; (8003080 <XMC_USIC_CH_Enable+0x98>)
 8003032:	f000 f907 	bl	8003244 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2203      	movs	r2, #3
 800303a:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 800303c:	bf00      	nop
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f9      	beq.n	800303e <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f023 020f 	bic.w	r2, r3, #15
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40030000 	.word	0x40030000
 8003064:	40030200 	.word	0x40030200
 8003068:	40030008 	.word	0x40030008
 800306c:	48020000 	.word	0x48020000
 8003070:	48020200 	.word	0x48020200
 8003074:	48020008 	.word	0x48020008
 8003078:	48024000 	.word	0x48024000
 800307c:	48024200 	.word	0x48024200
 8003080:	48024008 	.word	0x48024008

08003084 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08e      	sub	sp, #56	; 0x38
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b63      	cmp	r3, #99	; 0x63
 8003094:	d958      	bls.n	8003148 <XMC_USIC_CH_SetBaudrate+0xc4>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d055      	beq.n	8003148 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 800309c:	f7ff ff94 	bl	8002fc8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b2e      	ldr	r3, [pc, #184]	; (800315c <XMC_USIC_CH_SetBaudrate+0xd8>)
 80030a4:	fba3 2302 	umull	r2, r3, r3, r2
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4a2b      	ldr	r2, [pc, #172]	; (800315c <XMC_USIC_CH_SetBaudrate+0xd8>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 80030b8:	2301      	movs	r3, #1
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80030bc:	2301      	movs	r3, #1
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80030c0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80030c6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80030ca:	633b      	str	r3, [r7, #48]	; 0x30
 80030cc:	e022      	b.n	8003114 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d2:	fb02 f203 	mul.w	r2, r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	0a9b      	lsrs	r3, r3, #10
 80030e8:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f0:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f8:	d209      	bcs.n	800310e <XMC_USIC_CH_SetBaudrate+0x8a>
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	429a      	cmp	r2, r3
 8003100:	d205      	bcs.n	800310e <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003110:	3b01      	subs	r3, #1
 8003112:	633b      	str	r3, [r7, #48]	; 0x30
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1d9      	bne.n	80030ce <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <XMC_USIC_CH_SetBaudrate+0xdc>)
 800312a:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	3a01      	subs	r2, #1
 8003130:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8003132:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	3b01      	subs	r3, #1
 8003138:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800313a:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003146:	e002      	b.n	800314e <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 800314e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8003152:	4618      	mov	r0, r3
 8003154:	3738      	adds	r7, #56	; 0x38
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	51eb851f 	.word	0x51eb851f
 8003160:	fc0080ef 	.word	0xfc0080ef

08003164 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800317a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 800318c:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	0211      	lsls	r1, r2, #8
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8003196:	79fa      	ldrb	r2, [r7, #7]
 8003198:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800319a:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 800319c:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 80031a4:	bf00      	nop
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	f8ffc0c0 	.word	0xf8ffc0c0

080031b4 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80031ca:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 80031dc:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	0211      	lsls	r1, r2, #8
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 80031e6:	79fa      	ldrb	r2, [r7, #7]
 80031e8:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 80031ea:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 80031f8:	bf00      	nop
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	efffc0c0 	.word	0xefffc0c0

08003208 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	460b      	mov	r3, r1
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800321c:	7afb      	ldrb	r3, [r7, #11]
 800321e:	2107      	movs	r1, #7
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8003228:	7afb      	ldrb	r3, [r7, #11]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8003230:	431a      	orrs	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <XMC_USIC_Enable+0x40>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d104      	bne.n	800325e <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8003254:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003258:	f7ff fe98 	bl	8002f8c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 800325c:	e00e      	b.n	800327c <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a09      	ldr	r2, [pc, #36]	; (8003288 <XMC_USIC_Enable+0x44>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d103      	bne.n	800326e <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8003266:	4809      	ldr	r0, [pc, #36]	; (800328c <XMC_USIC_Enable+0x48>)
 8003268:	f7ff fe90 	bl	8002f8c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 800326c:	e006      	b.n	800327c <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a07      	ldr	r2, [pc, #28]	; (8003290 <XMC_USIC_Enable+0x4c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d102      	bne.n	800327c <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8003276:	4807      	ldr	r0, [pc, #28]	; (8003294 <XMC_USIC_Enable+0x50>)
 8003278:	f7ff fe88 	bl	8002f8c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40030008 	.word	0x40030008
 8003288:	48020008 	.word	0x48020008
 800328c:	10000080 	.word	0x10000080
 8003290:	48024008 	.word	0x48024008
 8003294:	10000100 	.word	0x10000100

08003298 <atan>:
 8003298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329c:	4bc4      	ldr	r3, [pc, #784]	; (80035b0 <atan+0x318>)
 800329e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80032a2:	429e      	cmp	r6, r3
 80032a4:	4604      	mov	r4, r0
 80032a6:	460d      	mov	r5, r1
 80032a8:	468b      	mov	fp, r1
 80032aa:	dd0e      	ble.n	80032ca <atan+0x32>
 80032ac:	4bc1      	ldr	r3, [pc, #772]	; (80035b4 <atan+0x31c>)
 80032ae:	429e      	cmp	r6, r3
 80032b0:	f300 80ac 	bgt.w	800340c <atan+0x174>
 80032b4:	f000 80a7 	beq.w	8003406 <atan+0x16e>
 80032b8:	f1bb 0f00 	cmp.w	fp, #0
 80032bc:	f340 80e9 	ble.w	8003492 <atan+0x1fa>
 80032c0:	a19f      	add	r1, pc, #636	; (adr r1, 8003540 <atan+0x2a8>)
 80032c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032ca:	4bbb      	ldr	r3, [pc, #748]	; (80035b8 <atan+0x320>)
 80032cc:	429e      	cmp	r6, r3
 80032ce:	f300 80b5 	bgt.w	800343c <atan+0x1a4>
 80032d2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80032d6:	429e      	cmp	r6, r3
 80032d8:	f340 80a0 	ble.w	800341c <atan+0x184>
 80032dc:	f04f 3aff 	mov.w	sl, #4294967295
 80032e0:	4622      	mov	r2, r4
 80032e2:	462b      	mov	r3, r5
 80032e4:	4620      	mov	r0, r4
 80032e6:	4629      	mov	r1, r5
 80032e8:	f000 fc52 	bl	8003b90 <__aeabi_dmul>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4680      	mov	r8, r0
 80032f2:	4689      	mov	r9, r1
 80032f4:	f000 fc4c 	bl	8003b90 <__aeabi_dmul>
 80032f8:	a393      	add	r3, pc, #588	; (adr r3, 8003548 <atan+0x2b0>)
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	4606      	mov	r6, r0
 8003300:	460f      	mov	r7, r1
 8003302:	f000 fc45 	bl	8003b90 <__aeabi_dmul>
 8003306:	a392      	add	r3, pc, #584	; (adr r3, 8003550 <atan+0x2b8>)
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f000 fa8e 	bl	800382c <__adddf3>
 8003310:	4632      	mov	r2, r6
 8003312:	463b      	mov	r3, r7
 8003314:	f000 fc3c 	bl	8003b90 <__aeabi_dmul>
 8003318:	a38f      	add	r3, pc, #572	; (adr r3, 8003558 <atan+0x2c0>)
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f000 fa85 	bl	800382c <__adddf3>
 8003322:	4632      	mov	r2, r6
 8003324:	463b      	mov	r3, r7
 8003326:	f000 fc33 	bl	8003b90 <__aeabi_dmul>
 800332a:	a38d      	add	r3, pc, #564	; (adr r3, 8003560 <atan+0x2c8>)
 800332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003330:	f000 fa7c 	bl	800382c <__adddf3>
 8003334:	4632      	mov	r2, r6
 8003336:	463b      	mov	r3, r7
 8003338:	f000 fc2a 	bl	8003b90 <__aeabi_dmul>
 800333c:	a38a      	add	r3, pc, #552	; (adr r3, 8003568 <atan+0x2d0>)
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	f000 fa73 	bl	800382c <__adddf3>
 8003346:	4632      	mov	r2, r6
 8003348:	463b      	mov	r3, r7
 800334a:	f000 fc21 	bl	8003b90 <__aeabi_dmul>
 800334e:	a388      	add	r3, pc, #544	; (adr r3, 8003570 <atan+0x2d8>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f000 fa6a 	bl	800382c <__adddf3>
 8003358:	4642      	mov	r2, r8
 800335a:	464b      	mov	r3, r9
 800335c:	f000 fc18 	bl	8003b90 <__aeabi_dmul>
 8003360:	a385      	add	r3, pc, #532	; (adr r3, 8003578 <atan+0x2e0>)
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	4680      	mov	r8, r0
 8003368:	4689      	mov	r9, r1
 800336a:	4630      	mov	r0, r6
 800336c:	4639      	mov	r1, r7
 800336e:	f000 fc0f 	bl	8003b90 <__aeabi_dmul>
 8003372:	a383      	add	r3, pc, #524	; (adr r3, 8003580 <atan+0x2e8>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f000 fa56 	bl	8003828 <__aeabi_dsub>
 800337c:	4632      	mov	r2, r6
 800337e:	463b      	mov	r3, r7
 8003380:	f000 fc06 	bl	8003b90 <__aeabi_dmul>
 8003384:	a380      	add	r3, pc, #512	; (adr r3, 8003588 <atan+0x2f0>)
 8003386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338a:	f000 fa4d 	bl	8003828 <__aeabi_dsub>
 800338e:	4632      	mov	r2, r6
 8003390:	463b      	mov	r3, r7
 8003392:	f000 fbfd 	bl	8003b90 <__aeabi_dmul>
 8003396:	a37e      	add	r3, pc, #504	; (adr r3, 8003590 <atan+0x2f8>)
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	f000 fa44 	bl	8003828 <__aeabi_dsub>
 80033a0:	4632      	mov	r2, r6
 80033a2:	463b      	mov	r3, r7
 80033a4:	f000 fbf4 	bl	8003b90 <__aeabi_dmul>
 80033a8:	a37b      	add	r3, pc, #492	; (adr r3, 8003598 <atan+0x300>)
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f000 fa3b 	bl	8003828 <__aeabi_dsub>
 80033b2:	4632      	mov	r2, r6
 80033b4:	463b      	mov	r3, r7
 80033b6:	f000 fbeb 	bl	8003b90 <__aeabi_dmul>
 80033ba:	f1ba 3fff 	cmp.w	sl, #4294967295
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	d06b      	beq.n	800349c <atan+0x204>
 80033c4:	4640      	mov	r0, r8
 80033c6:	4649      	mov	r1, r9
 80033c8:	f000 fa30 	bl	800382c <__adddf3>
 80033cc:	4622      	mov	r2, r4
 80033ce:	462b      	mov	r3, r5
 80033d0:	f000 fbde 	bl	8003b90 <__aeabi_dmul>
 80033d4:	4e79      	ldr	r6, [pc, #484]	; (80035bc <atan+0x324>)
 80033d6:	4b7a      	ldr	r3, [pc, #488]	; (80035c0 <atan+0x328>)
 80033d8:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80033dc:	4456      	add	r6, sl
 80033de:	449a      	add	sl, r3
 80033e0:	e9da 2300 	ldrd	r2, r3, [sl]
 80033e4:	f000 fa20 	bl	8003828 <__aeabi_dsub>
 80033e8:	4622      	mov	r2, r4
 80033ea:	462b      	mov	r3, r5
 80033ec:	f000 fa1c 	bl	8003828 <__aeabi_dsub>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	e9d6 0100 	ldrd	r0, r1, [r6]
 80033f8:	f000 fa16 	bl	8003828 <__aeabi_dsub>
 80033fc:	f1bb 0f00 	cmp.w	fp, #0
 8003400:	db43      	blt.n	800348a <atan+0x1f2>
 8003402:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003406:	2800      	cmp	r0, #0
 8003408:	f43f af56 	beq.w	80032b8 <atan+0x20>
 800340c:	4622      	mov	r2, r4
 800340e:	462b      	mov	r3, r5
 8003410:	4620      	mov	r0, r4
 8003412:	4629      	mov	r1, r5
 8003414:	f000 fa0a 	bl	800382c <__adddf3>
 8003418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800341c:	a360      	add	r3, pc, #384	; (adr r3, 80035a0 <atan+0x308>)
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f000 fa03 	bl	800382c <__adddf3>
 8003426:	2200      	movs	r2, #0
 8003428:	4b66      	ldr	r3, [pc, #408]	; (80035c4 <atan+0x32c>)
 800342a:	f000 fe41 	bl	80040b0 <__aeabi_dcmpgt>
 800342e:	2800      	cmp	r0, #0
 8003430:	f43f af54 	beq.w	80032dc <atan+0x44>
 8003434:	4620      	mov	r0, r4
 8003436:	4629      	mov	r1, r5
 8003438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800343c:	f000 f8cc 	bl	80035d8 <fabs>
 8003440:	4b61      	ldr	r3, [pc, #388]	; (80035c8 <atan+0x330>)
 8003442:	429e      	cmp	r6, r3
 8003444:	4604      	mov	r4, r0
 8003446:	460d      	mov	r5, r1
 8003448:	dc38      	bgt.n	80034bc <atan+0x224>
 800344a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800344e:	429e      	cmp	r6, r3
 8003450:	dc5d      	bgt.n	800350e <atan+0x276>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	f000 f9e9 	bl	800382c <__adddf3>
 800345a:	2200      	movs	r2, #0
 800345c:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <atan+0x32c>)
 800345e:	f000 f9e3 	bl	8003828 <__aeabi_dsub>
 8003462:	2200      	movs	r2, #0
 8003464:	4606      	mov	r6, r0
 8003466:	460f      	mov	r7, r1
 8003468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800346c:	4620      	mov	r0, r4
 800346e:	4629      	mov	r1, r5
 8003470:	f000 f9dc 	bl	800382c <__adddf3>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4630      	mov	r0, r6
 800347a:	4639      	mov	r1, r7
 800347c:	f000 fcb2 	bl	8003de4 <__aeabi_ddiv>
 8003480:	f04f 0a00 	mov.w	sl, #0
 8003484:	4604      	mov	r4, r0
 8003486:	460d      	mov	r5, r1
 8003488:	e72a      	b.n	80032e0 <atan+0x48>
 800348a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800348e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003492:	a145      	add	r1, pc, #276	; (adr r1, 80035a8 <atan+0x310>)
 8003494:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800349c:	4640      	mov	r0, r8
 800349e:	4649      	mov	r1, r9
 80034a0:	f000 f9c4 	bl	800382c <__adddf3>
 80034a4:	4622      	mov	r2, r4
 80034a6:	462b      	mov	r3, r5
 80034a8:	f000 fb72 	bl	8003b90 <__aeabi_dmul>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4620      	mov	r0, r4
 80034b2:	4629      	mov	r1, r5
 80034b4:	f000 f9b8 	bl	8003828 <__aeabi_dsub>
 80034b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034bc:	4b43      	ldr	r3, [pc, #268]	; (80035cc <atan+0x334>)
 80034be:	429e      	cmp	r6, r3
 80034c0:	dc1a      	bgt.n	80034f8 <atan+0x260>
 80034c2:	2200      	movs	r2, #0
 80034c4:	4b42      	ldr	r3, [pc, #264]	; (80035d0 <atan+0x338>)
 80034c6:	f000 f9af 	bl	8003828 <__aeabi_dsub>
 80034ca:	2200      	movs	r2, #0
 80034cc:	4606      	mov	r6, r0
 80034ce:	460f      	mov	r7, r1
 80034d0:	4b3f      	ldr	r3, [pc, #252]	; (80035d0 <atan+0x338>)
 80034d2:	4620      	mov	r0, r4
 80034d4:	4629      	mov	r1, r5
 80034d6:	f000 fb5b 	bl	8003b90 <__aeabi_dmul>
 80034da:	2200      	movs	r2, #0
 80034dc:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <atan+0x32c>)
 80034de:	f000 f9a5 	bl	800382c <__adddf3>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4630      	mov	r0, r6
 80034e8:	4639      	mov	r1, r7
 80034ea:	f000 fc7b 	bl	8003de4 <__aeabi_ddiv>
 80034ee:	f04f 0a02 	mov.w	sl, #2
 80034f2:	4604      	mov	r4, r0
 80034f4:	460d      	mov	r5, r1
 80034f6:	e6f3      	b.n	80032e0 <atan+0x48>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	2000      	movs	r0, #0
 80034fe:	4935      	ldr	r1, [pc, #212]	; (80035d4 <atan+0x33c>)
 8003500:	f000 fc70 	bl	8003de4 <__aeabi_ddiv>
 8003504:	f04f 0a03 	mov.w	sl, #3
 8003508:	4604      	mov	r4, r0
 800350a:	460d      	mov	r5, r1
 800350c:	e6e8      	b.n	80032e0 <atan+0x48>
 800350e:	2200      	movs	r2, #0
 8003510:	4b2c      	ldr	r3, [pc, #176]	; (80035c4 <atan+0x32c>)
 8003512:	f000 f989 	bl	8003828 <__aeabi_dsub>
 8003516:	2200      	movs	r2, #0
 8003518:	4606      	mov	r6, r0
 800351a:	460f      	mov	r7, r1
 800351c:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <atan+0x32c>)
 800351e:	4620      	mov	r0, r4
 8003520:	4629      	mov	r1, r5
 8003522:	f000 f983 	bl	800382c <__adddf3>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4630      	mov	r0, r6
 800352c:	4639      	mov	r1, r7
 800352e:	f000 fc59 	bl	8003de4 <__aeabi_ddiv>
 8003532:	f04f 0a01 	mov.w	sl, #1
 8003536:	4604      	mov	r4, r0
 8003538:	460d      	mov	r5, r1
 800353a:	e6d1      	b.n	80032e0 <atan+0x48>
 800353c:	f3af 8000 	nop.w
 8003540:	54442d18 	.word	0x54442d18
 8003544:	3ff921fb 	.word	0x3ff921fb
 8003548:	e322da11 	.word	0xe322da11
 800354c:	3f90ad3a 	.word	0x3f90ad3a
 8003550:	24760deb 	.word	0x24760deb
 8003554:	3fa97b4b 	.word	0x3fa97b4b
 8003558:	a0d03d51 	.word	0xa0d03d51
 800355c:	3fb10d66 	.word	0x3fb10d66
 8003560:	c54c206e 	.word	0xc54c206e
 8003564:	3fb745cd 	.word	0x3fb745cd
 8003568:	920083ff 	.word	0x920083ff
 800356c:	3fc24924 	.word	0x3fc24924
 8003570:	5555550d 	.word	0x5555550d
 8003574:	3fd55555 	.word	0x3fd55555
 8003578:	2c6a6c2f 	.word	0x2c6a6c2f
 800357c:	bfa2b444 	.word	0xbfa2b444
 8003580:	52defd9a 	.word	0x52defd9a
 8003584:	3fadde2d 	.word	0x3fadde2d
 8003588:	af749a6d 	.word	0xaf749a6d
 800358c:	3fb3b0f2 	.word	0x3fb3b0f2
 8003590:	fe231671 	.word	0xfe231671
 8003594:	3fbc71c6 	.word	0x3fbc71c6
 8003598:	9998ebc4 	.word	0x9998ebc4
 800359c:	3fc99999 	.word	0x3fc99999
 80035a0:	8800759c 	.word	0x8800759c
 80035a4:	7e37e43c 	.word	0x7e37e43c
 80035a8:	54442d18 	.word	0x54442d18
 80035ac:	bff921fb 	.word	0xbff921fb
 80035b0:	440fffff 	.word	0x440fffff
 80035b4:	7ff00000 	.word	0x7ff00000
 80035b8:	3fdbffff 	.word	0x3fdbffff
 80035bc:	0800ab50 	.word	0x0800ab50
 80035c0:	0800ab30 	.word	0x0800ab30
 80035c4:	3ff00000 	.word	0x3ff00000
 80035c8:	3ff2ffff 	.word	0x3ff2ffff
 80035cc:	40037fff 	.word	0x40037fff
 80035d0:	3ff80000 	.word	0x3ff80000
 80035d4:	bff00000 	.word	0xbff00000

080035d8 <fabs>:
 80035d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop

080035e0 <sqrt>:
 80035e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e4:	b08b      	sub	sp, #44	; 0x2c
 80035e6:	4604      	mov	r4, r0
 80035e8:	460d      	mov	r5, r1
 80035ea:	f000 f855 	bl	8003698 <__ieee754_sqrt>
 80035ee:	4b28      	ldr	r3, [pc, #160]	; (8003690 <sqrt+0xb0>)
 80035f0:	f993 a000 	ldrsb.w	sl, [r3]
 80035f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80035f8:	4606      	mov	r6, r0
 80035fa:	460f      	mov	r7, r1
 80035fc:	d012      	beq.n	8003624 <sqrt+0x44>
 80035fe:	4622      	mov	r2, r4
 8003600:	462b      	mov	r3, r5
 8003602:	4620      	mov	r0, r4
 8003604:	4629      	mov	r1, r5
 8003606:	f000 fd5d 	bl	80040c4 <__aeabi_dcmpun>
 800360a:	4683      	mov	fp, r0
 800360c:	b950      	cbnz	r0, 8003624 <sqrt+0x44>
 800360e:	f04f 0800 	mov.w	r8, #0
 8003612:	f04f 0900 	mov.w	r9, #0
 8003616:	4620      	mov	r0, r4
 8003618:	4629      	mov	r1, r5
 800361a:	4642      	mov	r2, r8
 800361c:	464b      	mov	r3, r9
 800361e:	f000 fd29 	bl	8004074 <__aeabi_dcmplt>
 8003622:	b920      	cbnz	r0, 800362e <sqrt+0x4e>
 8003624:	4630      	mov	r0, r6
 8003626:	4639      	mov	r1, r7
 8003628:	b00b      	add	sp, #44	; 0x2c
 800362a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800362e:	4b19      	ldr	r3, [pc, #100]	; (8003694 <sqrt+0xb4>)
 8003630:	f8cd b020 	str.w	fp, [sp, #32]
 8003634:	2201      	movs	r2, #1
 8003636:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800363a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800363e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003642:	f1ba 0f00 	cmp.w	sl, #0
 8003646:	d015      	beq.n	8003674 <sqrt+0x94>
 8003648:	4642      	mov	r2, r8
 800364a:	464b      	mov	r3, r9
 800364c:	4640      	mov	r0, r8
 800364e:	4649      	mov	r1, r9
 8003650:	f000 fbc8 	bl	8003de4 <__aeabi_ddiv>
 8003654:	f1ba 0f02 	cmp.w	sl, #2
 8003658:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800365c:	d10c      	bne.n	8003678 <sqrt+0x98>
 800365e:	f000 fd8f 	bl	8004180 <__errno>
 8003662:	2321      	movs	r3, #33	; 0x21
 8003664:	6003      	str	r3, [r0, #0]
 8003666:	9b08      	ldr	r3, [sp, #32]
 8003668:	b963      	cbnz	r3, 8003684 <sqrt+0xa4>
 800366a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800366e:	b00b      	add	sp, #44	; 0x2c
 8003670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003674:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003678:	4668      	mov	r0, sp
 800367a:	f000 f8cf 	bl	800381c <matherr>
 800367e:	2800      	cmp	r0, #0
 8003680:	d1f1      	bne.n	8003666 <sqrt+0x86>
 8003682:	e7ec      	b.n	800365e <sqrt+0x7e>
 8003684:	f000 fd7c 	bl	8004180 <__errno>
 8003688:	9b08      	ldr	r3, [sp, #32]
 800368a:	6003      	str	r3, [r0, #0]
 800368c:	e7ed      	b.n	800366a <sqrt+0x8a>
 800368e:	bf00      	nop
 8003690:	2000003c 	.word	0x2000003c
 8003694:	0800ab70 	.word	0x0800ab70

08003698 <__ieee754_sqrt>:
 8003698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800369c:	4e5e      	ldr	r6, [pc, #376]	; (8003818 <__ieee754_sqrt+0x180>)
 800369e:	46b6      	mov	lr, r6
 80036a0:	400e      	ands	r6, r1
 80036a2:	4576      	cmp	r6, lr
 80036a4:	4604      	mov	r4, r0
 80036a6:	460d      	mov	r5, r1
 80036a8:	f000 8094 	beq.w	80037d4 <__ieee754_sqrt+0x13c>
 80036ac:	2900      	cmp	r1, #0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4602      	mov	r2, r0
 80036b2:	dd72      	ble.n	800379a <__ieee754_sqrt+0x102>
 80036b4:	150f      	asrs	r7, r1, #20
 80036b6:	d07d      	beq.n	80037b4 <__ieee754_sqrt+0x11c>
 80036b8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 80036bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036c0:	07f8      	lsls	r0, r7, #31
 80036c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036c6:	d463      	bmi.n	8003790 <__ieee754_sqrt+0xf8>
 80036c8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80036cc:	2600      	movs	r6, #0
 80036ce:	440b      	add	r3, r1
 80036d0:	107f      	asrs	r7, r7, #1
 80036d2:	0052      	lsls	r2, r2, #1
 80036d4:	46b6      	mov	lr, r6
 80036d6:	2016      	movs	r0, #22
 80036d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036dc:	eb0e 0401 	add.w	r4, lr, r1
 80036e0:	429c      	cmp	r4, r3
 80036e2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80036e6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80036ea:	dc03      	bgt.n	80036f4 <__ieee754_sqrt+0x5c>
 80036ec:	1b1b      	subs	r3, r3, r4
 80036ee:	eb04 0e01 	add.w	lr, r4, r1
 80036f2:	440e      	add	r6, r1
 80036f4:	3801      	subs	r0, #1
 80036f6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80036fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80036fe:	d1ed      	bne.n	80036dc <__ieee754_sqrt+0x44>
 8003700:	4684      	mov	ip, r0
 8003702:	2420      	movs	r4, #32
 8003704:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003708:	e009      	b.n	800371e <__ieee754_sqrt+0x86>
 800370a:	d020      	beq.n	800374e <__ieee754_sqrt+0xb6>
 800370c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 8003710:	3c01      	subs	r4, #1
 8003712:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003716:	442b      	add	r3, r5
 8003718:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800371c:	d020      	beq.n	8003760 <__ieee754_sqrt+0xc8>
 800371e:	459e      	cmp	lr, r3
 8003720:	eb01 050c 	add.w	r5, r1, ip
 8003724:	daf1      	bge.n	800370a <__ieee754_sqrt+0x72>
 8003726:	2d00      	cmp	r5, #0
 8003728:	eb05 0c01 	add.w	ip, r5, r1
 800372c:	db09      	blt.n	8003742 <__ieee754_sqrt+0xaa>
 800372e:	46f0      	mov	r8, lr
 8003730:	4295      	cmp	r5, r2
 8003732:	ebce 0303 	rsb	r3, lr, r3
 8003736:	d900      	bls.n	800373a <__ieee754_sqrt+0xa2>
 8003738:	3b01      	subs	r3, #1
 800373a:	1b52      	subs	r2, r2, r5
 800373c:	4408      	add	r0, r1
 800373e:	46c6      	mov	lr, r8
 8003740:	e7e4      	b.n	800370c <__ieee754_sqrt+0x74>
 8003742:	f1bc 0f00 	cmp.w	ip, #0
 8003746:	dbf2      	blt.n	800372e <__ieee754_sqrt+0x96>
 8003748:	f10e 0801 	add.w	r8, lr, #1
 800374c:	e7f0      	b.n	8003730 <__ieee754_sqrt+0x98>
 800374e:	4295      	cmp	r5, r2
 8003750:	d81c      	bhi.n	800378c <__ieee754_sqrt+0xf4>
 8003752:	2d00      	cmp	r5, #0
 8003754:	eb05 0c01 	add.w	ip, r5, r1
 8003758:	db48      	blt.n	80037ec <__ieee754_sqrt+0x154>
 800375a:	4698      	mov	r8, r3
 800375c:	2300      	movs	r3, #0
 800375e:	e7ec      	b.n	800373a <__ieee754_sqrt+0xa2>
 8003760:	4313      	orrs	r3, r2
 8003762:	d004      	beq.n	800376e <__ieee754_sqrt+0xd6>
 8003764:	1c41      	adds	r1, r0, #1
 8003766:	d045      	beq.n	80037f4 <__ieee754_sqrt+0x15c>
 8003768:	f000 0401 	and.w	r4, r0, #1
 800376c:	4420      	add	r0, r4
 800376e:	0844      	lsrs	r4, r0, #1
 8003770:	1073      	asrs	r3, r6, #1
 8003772:	07f2      	lsls	r2, r6, #31
 8003774:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003778:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800377c:	bf48      	it	mi
 800377e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8003782:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8003786:	4620      	mov	r0, r4
 8003788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800378c:	4673      	mov	r3, lr
 800378e:	e7bd      	b.n	800370c <__ieee754_sqrt+0x74>
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003796:	0052      	lsls	r2, r2, #1
 8003798:	e796      	b.n	80036c8 <__ieee754_sqrt+0x30>
 800379a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800379e:	4306      	orrs	r6, r0
 80037a0:	d022      	beq.n	80037e8 <__ieee754_sqrt+0x150>
 80037a2:	bb71      	cbnz	r1, 8003802 <__ieee754_sqrt+0x16a>
 80037a4:	460f      	mov	r7, r1
 80037a6:	0ad3      	lsrs	r3, r2, #11
 80037a8:	3f15      	subs	r7, #21
 80037aa:	0552      	lsls	r2, r2, #21
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0fa      	beq.n	80037a6 <__ieee754_sqrt+0x10e>
 80037b0:	02dd      	lsls	r5, r3, #11
 80037b2:	d421      	bmi.n	80037f8 <__ieee754_sqrt+0x160>
 80037b4:	2100      	movs	r1, #0
 80037b6:	e000      	b.n	80037ba <__ieee754_sqrt+0x122>
 80037b8:	4601      	mov	r1, r0
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	02dc      	lsls	r4, r3, #11
 80037be:	f101 0001 	add.w	r0, r1, #1
 80037c2:	d5f9      	bpl.n	80037b8 <__ieee754_sqrt+0x120>
 80037c4:	f1c0 0420 	rsb	r4, r0, #32
 80037c8:	fa22 f404 	lsr.w	r4, r2, r4
 80037cc:	4323      	orrs	r3, r4
 80037ce:	1a7f      	subs	r7, r7, r1
 80037d0:	4082      	lsls	r2, r0
 80037d2:	e771      	b.n	80036b8 <__ieee754_sqrt+0x20>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	f000 f9da 	bl	8003b90 <__aeabi_dmul>
 80037dc:	4622      	mov	r2, r4
 80037de:	462b      	mov	r3, r5
 80037e0:	f000 f824 	bl	800382c <__adddf3>
 80037e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037ec:	f1bc 0f00 	cmp.w	ip, #0
 80037f0:	daaa      	bge.n	8003748 <__ieee754_sqrt+0xb0>
 80037f2:	e7b2      	b.n	800375a <__ieee754_sqrt+0xc2>
 80037f4:	3601      	adds	r6, #1
 80037f6:	e7bb      	b.n	8003770 <__ieee754_sqrt+0xd8>
 80037f8:	2420      	movs	r4, #32
 80037fa:	f04f 31ff 	mov.w	r1, #4294967295
 80037fe:	2000      	movs	r0, #0
 8003800:	e7e2      	b.n	80037c8 <__ieee754_sqrt+0x130>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	f000 f80f 	bl	8003828 <__aeabi_dsub>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	f000 fae9 	bl	8003de4 <__aeabi_ddiv>
 8003812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003816:	bf00      	nop
 8003818:	7ff00000 	.word	0x7ff00000

0800381c <matherr>:
 800381c:	2000      	movs	r0, #0
 800381e:	4770      	bx	lr

08003820 <__aeabi_drsub>:
 8003820:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003824:	e002      	b.n	800382c <__adddf3>
 8003826:	bf00      	nop

08003828 <__aeabi_dsub>:
 8003828:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800382c <__adddf3>:
 800382c:	b530      	push	{r4, r5, lr}
 800382e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003832:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003836:	ea94 0f05 	teq	r4, r5
 800383a:	bf08      	it	eq
 800383c:	ea90 0f02 	teqeq	r0, r2
 8003840:	bf1f      	itttt	ne
 8003842:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003846:	ea55 0c02 	orrsne.w	ip, r5, r2
 800384a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800384e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003852:	f000 80e2 	beq.w	8003a1a <__adddf3+0x1ee>
 8003856:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800385a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800385e:	bfb8      	it	lt
 8003860:	426d      	neglt	r5, r5
 8003862:	dd0c      	ble.n	800387e <__adddf3+0x52>
 8003864:	442c      	add	r4, r5
 8003866:	ea80 0202 	eor.w	r2, r0, r2
 800386a:	ea81 0303 	eor.w	r3, r1, r3
 800386e:	ea82 0000 	eor.w	r0, r2, r0
 8003872:	ea83 0101 	eor.w	r1, r3, r1
 8003876:	ea80 0202 	eor.w	r2, r0, r2
 800387a:	ea81 0303 	eor.w	r3, r1, r3
 800387e:	2d36      	cmp	r5, #54	; 0x36
 8003880:	bf88      	it	hi
 8003882:	bd30      	pophi	{r4, r5, pc}
 8003884:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800388c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003890:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003894:	d002      	beq.n	800389c <__adddf3+0x70>
 8003896:	4240      	negs	r0, r0
 8003898:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800389c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80038a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80038a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80038a8:	d002      	beq.n	80038b0 <__adddf3+0x84>
 80038aa:	4252      	negs	r2, r2
 80038ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80038b0:	ea94 0f05 	teq	r4, r5
 80038b4:	f000 80a7 	beq.w	8003a06 <__adddf3+0x1da>
 80038b8:	f1a4 0401 	sub.w	r4, r4, #1
 80038bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80038c0:	db0d      	blt.n	80038de <__adddf3+0xb2>
 80038c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80038c6:	fa22 f205 	lsr.w	r2, r2, r5
 80038ca:	1880      	adds	r0, r0, r2
 80038cc:	f141 0100 	adc.w	r1, r1, #0
 80038d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80038d4:	1880      	adds	r0, r0, r2
 80038d6:	fa43 f305 	asr.w	r3, r3, r5
 80038da:	4159      	adcs	r1, r3
 80038dc:	e00e      	b.n	80038fc <__adddf3+0xd0>
 80038de:	f1a5 0520 	sub.w	r5, r5, #32
 80038e2:	f10e 0e20 	add.w	lr, lr, #32
 80038e6:	2a01      	cmp	r2, #1
 80038e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80038ec:	bf28      	it	cs
 80038ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80038f2:	fa43 f305 	asr.w	r3, r3, r5
 80038f6:	18c0      	adds	r0, r0, r3
 80038f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80038fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003900:	d507      	bpl.n	8003912 <__adddf3+0xe6>
 8003902:	f04f 0e00 	mov.w	lr, #0
 8003906:	f1dc 0c00 	rsbs	ip, ip, #0
 800390a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800390e:	eb6e 0101 	sbc.w	r1, lr, r1
 8003912:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003916:	d31b      	bcc.n	8003950 <__adddf3+0x124>
 8003918:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800391c:	d30c      	bcc.n	8003938 <__adddf3+0x10c>
 800391e:	0849      	lsrs	r1, r1, #1
 8003920:	ea5f 0030 	movs.w	r0, r0, rrx
 8003924:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003928:	f104 0401 	add.w	r4, r4, #1
 800392c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003930:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003934:	f080 809a 	bcs.w	8003a6c <__adddf3+0x240>
 8003938:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800393c:	bf08      	it	eq
 800393e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003942:	f150 0000 	adcs.w	r0, r0, #0
 8003946:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800394a:	ea41 0105 	orr.w	r1, r1, r5
 800394e:	bd30      	pop	{r4, r5, pc}
 8003950:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003954:	4140      	adcs	r0, r0
 8003956:	eb41 0101 	adc.w	r1, r1, r1
 800395a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800395e:	f1a4 0401 	sub.w	r4, r4, #1
 8003962:	d1e9      	bne.n	8003938 <__adddf3+0x10c>
 8003964:	f091 0f00 	teq	r1, #0
 8003968:	bf04      	itt	eq
 800396a:	4601      	moveq	r1, r0
 800396c:	2000      	moveq	r0, #0
 800396e:	fab1 f381 	clz	r3, r1
 8003972:	bf08      	it	eq
 8003974:	3320      	addeq	r3, #32
 8003976:	f1a3 030b 	sub.w	r3, r3, #11
 800397a:	f1b3 0220 	subs.w	r2, r3, #32
 800397e:	da0c      	bge.n	800399a <__adddf3+0x16e>
 8003980:	320c      	adds	r2, #12
 8003982:	dd08      	ble.n	8003996 <__adddf3+0x16a>
 8003984:	f102 0c14 	add.w	ip, r2, #20
 8003988:	f1c2 020c 	rsb	r2, r2, #12
 800398c:	fa01 f00c 	lsl.w	r0, r1, ip
 8003990:	fa21 f102 	lsr.w	r1, r1, r2
 8003994:	e00c      	b.n	80039b0 <__adddf3+0x184>
 8003996:	f102 0214 	add.w	r2, r2, #20
 800399a:	bfd8      	it	le
 800399c:	f1c2 0c20 	rsble	ip, r2, #32
 80039a0:	fa01 f102 	lsl.w	r1, r1, r2
 80039a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80039a8:	bfdc      	itt	le
 80039aa:	ea41 010c 	orrle.w	r1, r1, ip
 80039ae:	4090      	lslle	r0, r2
 80039b0:	1ae4      	subs	r4, r4, r3
 80039b2:	bfa2      	ittt	ge
 80039b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80039b8:	4329      	orrge	r1, r5
 80039ba:	bd30      	popge	{r4, r5, pc}
 80039bc:	ea6f 0404 	mvn.w	r4, r4
 80039c0:	3c1f      	subs	r4, #31
 80039c2:	da1c      	bge.n	80039fe <__adddf3+0x1d2>
 80039c4:	340c      	adds	r4, #12
 80039c6:	dc0e      	bgt.n	80039e6 <__adddf3+0x1ba>
 80039c8:	f104 0414 	add.w	r4, r4, #20
 80039cc:	f1c4 0220 	rsb	r2, r4, #32
 80039d0:	fa20 f004 	lsr.w	r0, r0, r4
 80039d4:	fa01 f302 	lsl.w	r3, r1, r2
 80039d8:	ea40 0003 	orr.w	r0, r0, r3
 80039dc:	fa21 f304 	lsr.w	r3, r1, r4
 80039e0:	ea45 0103 	orr.w	r1, r5, r3
 80039e4:	bd30      	pop	{r4, r5, pc}
 80039e6:	f1c4 040c 	rsb	r4, r4, #12
 80039ea:	f1c4 0220 	rsb	r2, r4, #32
 80039ee:	fa20 f002 	lsr.w	r0, r0, r2
 80039f2:	fa01 f304 	lsl.w	r3, r1, r4
 80039f6:	ea40 0003 	orr.w	r0, r0, r3
 80039fa:	4629      	mov	r1, r5
 80039fc:	bd30      	pop	{r4, r5, pc}
 80039fe:	fa21 f004 	lsr.w	r0, r1, r4
 8003a02:	4629      	mov	r1, r5
 8003a04:	bd30      	pop	{r4, r5, pc}
 8003a06:	f094 0f00 	teq	r4, #0
 8003a0a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003a0e:	bf06      	itte	eq
 8003a10:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003a14:	3401      	addeq	r4, #1
 8003a16:	3d01      	subne	r5, #1
 8003a18:	e74e      	b.n	80038b8 <__adddf3+0x8c>
 8003a1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003a1e:	bf18      	it	ne
 8003a20:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003a24:	d029      	beq.n	8003a7a <__adddf3+0x24e>
 8003a26:	ea94 0f05 	teq	r4, r5
 8003a2a:	bf08      	it	eq
 8003a2c:	ea90 0f02 	teqeq	r0, r2
 8003a30:	d005      	beq.n	8003a3e <__adddf3+0x212>
 8003a32:	ea54 0c00 	orrs.w	ip, r4, r0
 8003a36:	bf04      	itt	eq
 8003a38:	4619      	moveq	r1, r3
 8003a3a:	4610      	moveq	r0, r2
 8003a3c:	bd30      	pop	{r4, r5, pc}
 8003a3e:	ea91 0f03 	teq	r1, r3
 8003a42:	bf1e      	ittt	ne
 8003a44:	2100      	movne	r1, #0
 8003a46:	2000      	movne	r0, #0
 8003a48:	bd30      	popne	{r4, r5, pc}
 8003a4a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003a4e:	d105      	bne.n	8003a5c <__adddf3+0x230>
 8003a50:	0040      	lsls	r0, r0, #1
 8003a52:	4149      	adcs	r1, r1
 8003a54:	bf28      	it	cs
 8003a56:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003a5a:	bd30      	pop	{r4, r5, pc}
 8003a5c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003a60:	bf3c      	itt	cc
 8003a62:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003a66:	bd30      	popcc	{r4, r5, pc}
 8003a68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003a6c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003a70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a74:	f04f 0000 	mov.w	r0, #0
 8003a78:	bd30      	pop	{r4, r5, pc}
 8003a7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003a7e:	bf1a      	itte	ne
 8003a80:	4619      	movne	r1, r3
 8003a82:	4610      	movne	r0, r2
 8003a84:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003a88:	bf1c      	itt	ne
 8003a8a:	460b      	movne	r3, r1
 8003a8c:	4602      	movne	r2, r0
 8003a8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003a92:	bf06      	itte	eq
 8003a94:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003a98:	ea91 0f03 	teqeq	r1, r3
 8003a9c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003aa0:	bd30      	pop	{r4, r5, pc}
 8003aa2:	bf00      	nop

08003aa4 <__aeabi_ui2d>:
 8003aa4:	f090 0f00 	teq	r0, #0
 8003aa8:	bf04      	itt	eq
 8003aaa:	2100      	moveq	r1, #0
 8003aac:	4770      	bxeq	lr
 8003aae:	b530      	push	{r4, r5, lr}
 8003ab0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003ab4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003ab8:	f04f 0500 	mov.w	r5, #0
 8003abc:	f04f 0100 	mov.w	r1, #0
 8003ac0:	e750      	b.n	8003964 <__adddf3+0x138>
 8003ac2:	bf00      	nop

08003ac4 <__aeabi_i2d>:
 8003ac4:	f090 0f00 	teq	r0, #0
 8003ac8:	bf04      	itt	eq
 8003aca:	2100      	moveq	r1, #0
 8003acc:	4770      	bxeq	lr
 8003ace:	b530      	push	{r4, r5, lr}
 8003ad0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003ad4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003ad8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003adc:	bf48      	it	mi
 8003ade:	4240      	negmi	r0, r0
 8003ae0:	f04f 0100 	mov.w	r1, #0
 8003ae4:	e73e      	b.n	8003964 <__adddf3+0x138>
 8003ae6:	bf00      	nop

08003ae8 <__aeabi_f2d>:
 8003ae8:	0042      	lsls	r2, r0, #1
 8003aea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003aee:	ea4f 0131 	mov.w	r1, r1, rrx
 8003af2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003af6:	bf1f      	itttt	ne
 8003af8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003afc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003b00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003b04:	4770      	bxne	lr
 8003b06:	f092 0f00 	teq	r2, #0
 8003b0a:	bf14      	ite	ne
 8003b0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003b10:	4770      	bxeq	lr
 8003b12:	b530      	push	{r4, r5, lr}
 8003b14:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003b18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003b1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003b20:	e720      	b.n	8003964 <__adddf3+0x138>
 8003b22:	bf00      	nop

08003b24 <__aeabi_ul2d>:
 8003b24:	ea50 0201 	orrs.w	r2, r0, r1
 8003b28:	bf08      	it	eq
 8003b2a:	4770      	bxeq	lr
 8003b2c:	b530      	push	{r4, r5, lr}
 8003b2e:	f04f 0500 	mov.w	r5, #0
 8003b32:	e00a      	b.n	8003b4a <__aeabi_l2d+0x16>

08003b34 <__aeabi_l2d>:
 8003b34:	ea50 0201 	orrs.w	r2, r0, r1
 8003b38:	bf08      	it	eq
 8003b3a:	4770      	bxeq	lr
 8003b3c:	b530      	push	{r4, r5, lr}
 8003b3e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003b42:	d502      	bpl.n	8003b4a <__aeabi_l2d+0x16>
 8003b44:	4240      	negs	r0, r0
 8003b46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003b4a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003b4e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003b52:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003b56:	f43f aedc 	beq.w	8003912 <__adddf3+0xe6>
 8003b5a:	f04f 0203 	mov.w	r2, #3
 8003b5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003b62:	bf18      	it	ne
 8003b64:	3203      	addne	r2, #3
 8003b66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003b6a:	bf18      	it	ne
 8003b6c:	3203      	addne	r2, #3
 8003b6e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003b72:	f1c2 0320 	rsb	r3, r2, #32
 8003b76:	fa00 fc03 	lsl.w	ip, r0, r3
 8003b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8003b7e:	fa01 fe03 	lsl.w	lr, r1, r3
 8003b82:	ea40 000e 	orr.w	r0, r0, lr
 8003b86:	fa21 f102 	lsr.w	r1, r1, r2
 8003b8a:	4414      	add	r4, r2
 8003b8c:	e6c1      	b.n	8003912 <__adddf3+0xe6>
 8003b8e:	bf00      	nop

08003b90 <__aeabi_dmul>:
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003b96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003b9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003b9e:	bf1d      	ittte	ne
 8003ba0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003ba4:	ea94 0f0c 	teqne	r4, ip
 8003ba8:	ea95 0f0c 	teqne	r5, ip
 8003bac:	f000 f8de 	bleq	8003d6c <__aeabi_dmul+0x1dc>
 8003bb0:	442c      	add	r4, r5
 8003bb2:	ea81 0603 	eor.w	r6, r1, r3
 8003bb6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003bba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003bbe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003bc2:	bf18      	it	ne
 8003bc4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003bc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd0:	d038      	beq.n	8003c44 <__aeabi_dmul+0xb4>
 8003bd2:	fba0 ce02 	umull	ip, lr, r0, r2
 8003bd6:	f04f 0500 	mov.w	r5, #0
 8003bda:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003bde:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003be2:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003be6:	f04f 0600 	mov.w	r6, #0
 8003bea:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003bee:	f09c 0f00 	teq	ip, #0
 8003bf2:	bf18      	it	ne
 8003bf4:	f04e 0e01 	orrne.w	lr, lr, #1
 8003bf8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003bfc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003c00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003c04:	d204      	bcs.n	8003c10 <__aeabi_dmul+0x80>
 8003c06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003c0a:	416d      	adcs	r5, r5
 8003c0c:	eb46 0606 	adc.w	r6, r6, r6
 8003c10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003c14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003c18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003c1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003c20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003c24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003c28:	bf88      	it	hi
 8003c2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003c2e:	d81e      	bhi.n	8003c6e <__aeabi_dmul+0xde>
 8003c30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003c34:	bf08      	it	eq
 8003c36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003c3a:	f150 0000 	adcs.w	r0, r0, #0
 8003c3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003c42:	bd70      	pop	{r4, r5, r6, pc}
 8003c44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003c48:	ea46 0101 	orr.w	r1, r6, r1
 8003c4c:	ea40 0002 	orr.w	r0, r0, r2
 8003c50:	ea81 0103 	eor.w	r1, r1, r3
 8003c54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003c58:	bfc2      	ittt	gt
 8003c5a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003c5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003c62:	bd70      	popgt	{r4, r5, r6, pc}
 8003c64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003c68:	f04f 0e00 	mov.w	lr, #0
 8003c6c:	3c01      	subs	r4, #1
 8003c6e:	f300 80ab 	bgt.w	8003dc8 <__aeabi_dmul+0x238>
 8003c72:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003c76:	bfde      	ittt	le
 8003c78:	2000      	movle	r0, #0
 8003c7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003c7e:	bd70      	pople	{r4, r5, r6, pc}
 8003c80:	f1c4 0400 	rsb	r4, r4, #0
 8003c84:	3c20      	subs	r4, #32
 8003c86:	da35      	bge.n	8003cf4 <__aeabi_dmul+0x164>
 8003c88:	340c      	adds	r4, #12
 8003c8a:	dc1b      	bgt.n	8003cc4 <__aeabi_dmul+0x134>
 8003c8c:	f104 0414 	add.w	r4, r4, #20
 8003c90:	f1c4 0520 	rsb	r5, r4, #32
 8003c94:	fa00 f305 	lsl.w	r3, r0, r5
 8003c98:	fa20 f004 	lsr.w	r0, r0, r4
 8003c9c:	fa01 f205 	lsl.w	r2, r1, r5
 8003ca0:	ea40 0002 	orr.w	r0, r0, r2
 8003ca4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8003ca8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003cac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003cb0:	fa21 f604 	lsr.w	r6, r1, r4
 8003cb4:	eb42 0106 	adc.w	r1, r2, r6
 8003cb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003cbc:	bf08      	it	eq
 8003cbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	f1c4 040c 	rsb	r4, r4, #12
 8003cc8:	f1c4 0520 	rsb	r5, r4, #32
 8003ccc:	fa00 f304 	lsl.w	r3, r0, r4
 8003cd0:	fa20 f005 	lsr.w	r0, r0, r5
 8003cd4:	fa01 f204 	lsl.w	r2, r1, r4
 8003cd8:	ea40 0002 	orr.w	r0, r0, r2
 8003cdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003ce0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003ce4:	f141 0100 	adc.w	r1, r1, #0
 8003ce8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003cec:	bf08      	it	eq
 8003cee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	f1c4 0520 	rsb	r5, r4, #32
 8003cf8:	fa00 f205 	lsl.w	r2, r0, r5
 8003cfc:	ea4e 0e02 	orr.w	lr, lr, r2
 8003d00:	fa20 f304 	lsr.w	r3, r0, r4
 8003d04:	fa01 f205 	lsl.w	r2, r1, r5
 8003d08:	ea43 0302 	orr.w	r3, r3, r2
 8003d0c:	fa21 f004 	lsr.w	r0, r1, r4
 8003d10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003d14:	fa21 f204 	lsr.w	r2, r1, r4
 8003d18:	ea20 0002 	bic.w	r0, r0, r2
 8003d1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003d20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003d24:	bf08      	it	eq
 8003d26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	f094 0f00 	teq	r4, #0
 8003d30:	d10f      	bne.n	8003d52 <__aeabi_dmul+0x1c2>
 8003d32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003d36:	0040      	lsls	r0, r0, #1
 8003d38:	eb41 0101 	adc.w	r1, r1, r1
 8003d3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003d40:	bf08      	it	eq
 8003d42:	3c01      	subeq	r4, #1
 8003d44:	d0f7      	beq.n	8003d36 <__aeabi_dmul+0x1a6>
 8003d46:	ea41 0106 	orr.w	r1, r1, r6
 8003d4a:	f095 0f00 	teq	r5, #0
 8003d4e:	bf18      	it	ne
 8003d50:	4770      	bxne	lr
 8003d52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003d56:	0052      	lsls	r2, r2, #1
 8003d58:	eb43 0303 	adc.w	r3, r3, r3
 8003d5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003d60:	bf08      	it	eq
 8003d62:	3d01      	subeq	r5, #1
 8003d64:	d0f7      	beq.n	8003d56 <__aeabi_dmul+0x1c6>
 8003d66:	ea43 0306 	orr.w	r3, r3, r6
 8003d6a:	4770      	bx	lr
 8003d6c:	ea94 0f0c 	teq	r4, ip
 8003d70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003d74:	bf18      	it	ne
 8003d76:	ea95 0f0c 	teqne	r5, ip
 8003d7a:	d00c      	beq.n	8003d96 <__aeabi_dmul+0x206>
 8003d7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003d80:	bf18      	it	ne
 8003d82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003d86:	d1d1      	bne.n	8003d2c <__aeabi_dmul+0x19c>
 8003d88:	ea81 0103 	eor.w	r1, r1, r3
 8003d8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003d90:	f04f 0000 	mov.w	r0, #0
 8003d94:	bd70      	pop	{r4, r5, r6, pc}
 8003d96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003d9a:	bf06      	itte	eq
 8003d9c:	4610      	moveq	r0, r2
 8003d9e:	4619      	moveq	r1, r3
 8003da0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003da4:	d019      	beq.n	8003dda <__aeabi_dmul+0x24a>
 8003da6:	ea94 0f0c 	teq	r4, ip
 8003daa:	d102      	bne.n	8003db2 <__aeabi_dmul+0x222>
 8003dac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003db0:	d113      	bne.n	8003dda <__aeabi_dmul+0x24a>
 8003db2:	ea95 0f0c 	teq	r5, ip
 8003db6:	d105      	bne.n	8003dc4 <__aeabi_dmul+0x234>
 8003db8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8003dbc:	bf1c      	itt	ne
 8003dbe:	4610      	movne	r0, r2
 8003dc0:	4619      	movne	r1, r3
 8003dc2:	d10a      	bne.n	8003dda <__aeabi_dmul+0x24a>
 8003dc4:	ea81 0103 	eor.w	r1, r1, r3
 8003dc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003dcc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003dd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003dd4:	f04f 0000 	mov.w	r0, #0
 8003dd8:	bd70      	pop	{r4, r5, r6, pc}
 8003dda:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003dde:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003de2:	bd70      	pop	{r4, r5, r6, pc}

08003de4 <__aeabi_ddiv>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003dea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003dee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003df2:	bf1d      	ittte	ne
 8003df4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003df8:	ea94 0f0c 	teqne	r4, ip
 8003dfc:	ea95 0f0c 	teqne	r5, ip
 8003e00:	f000 f8a7 	bleq	8003f52 <__aeabi_ddiv+0x16e>
 8003e04:	eba4 0405 	sub.w	r4, r4, r5
 8003e08:	ea81 0e03 	eor.w	lr, r1, r3
 8003e0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003e10:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003e14:	f000 8088 	beq.w	8003f28 <__aeabi_ddiv+0x144>
 8003e18:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003e1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003e20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003e24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003e28:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003e2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003e30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003e34:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003e38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003e3c:	429d      	cmp	r5, r3
 8003e3e:	bf08      	it	eq
 8003e40:	4296      	cmpeq	r6, r2
 8003e42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8003e46:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003e4a:	d202      	bcs.n	8003e52 <__aeabi_ddiv+0x6e>
 8003e4c:	085b      	lsrs	r3, r3, #1
 8003e4e:	ea4f 0232 	mov.w	r2, r2, rrx
 8003e52:	1ab6      	subs	r6, r6, r2
 8003e54:	eb65 0503 	sbc.w	r5, r5, r3
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8003e5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003e62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8003e66:	ebb6 0e02 	subs.w	lr, r6, r2
 8003e6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003e6e:	bf22      	ittt	cs
 8003e70:	1ab6      	subcs	r6, r6, r2
 8003e72:	4675      	movcs	r5, lr
 8003e74:	ea40 000c 	orrcs.w	r0, r0, ip
 8003e78:	085b      	lsrs	r3, r3, #1
 8003e7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8003e7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003e82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003e86:	bf22      	ittt	cs
 8003e88:	1ab6      	subcs	r6, r6, r2
 8003e8a:	4675      	movcs	r5, lr
 8003e8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	ea4f 0232 	mov.w	r2, r2, rrx
 8003e96:	ebb6 0e02 	subs.w	lr, r6, r2
 8003e9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003e9e:	bf22      	ittt	cs
 8003ea0:	1ab6      	subcs	r6, r6, r2
 8003ea2:	4675      	movcs	r5, lr
 8003ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	ea4f 0232 	mov.w	r2, r2, rrx
 8003eae:	ebb6 0e02 	subs.w	lr, r6, r2
 8003eb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003eb6:	bf22      	ittt	cs
 8003eb8:	1ab6      	subcs	r6, r6, r2
 8003eba:	4675      	movcs	r5, lr
 8003ebc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003ec0:	ea55 0e06 	orrs.w	lr, r5, r6
 8003ec4:	d018      	beq.n	8003ef8 <__aeabi_ddiv+0x114>
 8003ec6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8003eca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003ece:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003ed2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003ed6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8003eda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003ede:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003ee2:	d1c0      	bne.n	8003e66 <__aeabi_ddiv+0x82>
 8003ee4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003ee8:	d10b      	bne.n	8003f02 <__aeabi_ddiv+0x11e>
 8003eea:	ea41 0100 	orr.w	r1, r1, r0
 8003eee:	f04f 0000 	mov.w	r0, #0
 8003ef2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003ef6:	e7b6      	b.n	8003e66 <__aeabi_ddiv+0x82>
 8003ef8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003efc:	bf04      	itt	eq
 8003efe:	4301      	orreq	r1, r0
 8003f00:	2000      	moveq	r0, #0
 8003f02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003f06:	bf88      	it	hi
 8003f08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003f0c:	f63f aeaf 	bhi.w	8003c6e <__aeabi_dmul+0xde>
 8003f10:	ebb5 0c03 	subs.w	ip, r5, r3
 8003f14:	bf04      	itt	eq
 8003f16:	ebb6 0c02 	subseq.w	ip, r6, r2
 8003f1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003f1e:	f150 0000 	adcs.w	r0, r0, #0
 8003f22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003f26:	bd70      	pop	{r4, r5, r6, pc}
 8003f28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003f2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003f30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003f34:	bfc2      	ittt	gt
 8003f36:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003f3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003f3e:	bd70      	popgt	{r4, r5, r6, pc}
 8003f40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003f44:	f04f 0e00 	mov.w	lr, #0
 8003f48:	3c01      	subs	r4, #1
 8003f4a:	e690      	b.n	8003c6e <__aeabi_dmul+0xde>
 8003f4c:	ea45 0e06 	orr.w	lr, r5, r6
 8003f50:	e68d      	b.n	8003c6e <__aeabi_dmul+0xde>
 8003f52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003f56:	ea94 0f0c 	teq	r4, ip
 8003f5a:	bf08      	it	eq
 8003f5c:	ea95 0f0c 	teqeq	r5, ip
 8003f60:	f43f af3b 	beq.w	8003dda <__aeabi_dmul+0x24a>
 8003f64:	ea94 0f0c 	teq	r4, ip
 8003f68:	d10a      	bne.n	8003f80 <__aeabi_ddiv+0x19c>
 8003f6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003f6e:	f47f af34 	bne.w	8003dda <__aeabi_dmul+0x24a>
 8003f72:	ea95 0f0c 	teq	r5, ip
 8003f76:	f47f af25 	bne.w	8003dc4 <__aeabi_dmul+0x234>
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	e72c      	b.n	8003dda <__aeabi_dmul+0x24a>
 8003f80:	ea95 0f0c 	teq	r5, ip
 8003f84:	d106      	bne.n	8003f94 <__aeabi_ddiv+0x1b0>
 8003f86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003f8a:	f43f aefd 	beq.w	8003d88 <__aeabi_dmul+0x1f8>
 8003f8e:	4610      	mov	r0, r2
 8003f90:	4619      	mov	r1, r3
 8003f92:	e722      	b.n	8003dda <__aeabi_dmul+0x24a>
 8003f94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003f98:	bf18      	it	ne
 8003f9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003f9e:	f47f aec5 	bne.w	8003d2c <__aeabi_dmul+0x19c>
 8003fa2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8003fa6:	f47f af0d 	bne.w	8003dc4 <__aeabi_dmul+0x234>
 8003faa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8003fae:	f47f aeeb 	bne.w	8003d88 <__aeabi_dmul+0x1f8>
 8003fb2:	e712      	b.n	8003dda <__aeabi_dmul+0x24a>

08003fb4 <__gedf2>:
 8003fb4:	f04f 3cff 	mov.w	ip, #4294967295
 8003fb8:	e006      	b.n	8003fc8 <__cmpdf2+0x4>
 8003fba:	bf00      	nop

08003fbc <__ledf2>:
 8003fbc:	f04f 0c01 	mov.w	ip, #1
 8003fc0:	e002      	b.n	8003fc8 <__cmpdf2+0x4>
 8003fc2:	bf00      	nop

08003fc4 <__cmpdf2>:
 8003fc4:	f04f 0c01 	mov.w	ip, #1
 8003fc8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8003fcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003fd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003fd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003fd8:	bf18      	it	ne
 8003fda:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8003fde:	d01b      	beq.n	8004018 <__cmpdf2+0x54>
 8003fe0:	b001      	add	sp, #4
 8003fe2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8003fe6:	bf0c      	ite	eq
 8003fe8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8003fec:	ea91 0f03 	teqne	r1, r3
 8003ff0:	bf02      	ittt	eq
 8003ff2:	ea90 0f02 	teqeq	r0, r2
 8003ff6:	2000      	moveq	r0, #0
 8003ff8:	4770      	bxeq	lr
 8003ffa:	f110 0f00 	cmn.w	r0, #0
 8003ffe:	ea91 0f03 	teq	r1, r3
 8004002:	bf58      	it	pl
 8004004:	4299      	cmppl	r1, r3
 8004006:	bf08      	it	eq
 8004008:	4290      	cmpeq	r0, r2
 800400a:	bf2c      	ite	cs
 800400c:	17d8      	asrcs	r0, r3, #31
 800400e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004012:	f040 0001 	orr.w	r0, r0, #1
 8004016:	4770      	bx	lr
 8004018:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800401c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004020:	d102      	bne.n	8004028 <__cmpdf2+0x64>
 8004022:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004026:	d107      	bne.n	8004038 <__cmpdf2+0x74>
 8004028:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800402c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004030:	d1d6      	bne.n	8003fe0 <__cmpdf2+0x1c>
 8004032:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004036:	d0d3      	beq.n	8003fe0 <__cmpdf2+0x1c>
 8004038:	f85d 0b04 	ldr.w	r0, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop

08004040 <__aeabi_cdrcmple>:
 8004040:	4684      	mov	ip, r0
 8004042:	4610      	mov	r0, r2
 8004044:	4662      	mov	r2, ip
 8004046:	468c      	mov	ip, r1
 8004048:	4619      	mov	r1, r3
 800404a:	4663      	mov	r3, ip
 800404c:	e000      	b.n	8004050 <__aeabi_cdcmpeq>
 800404e:	bf00      	nop

08004050 <__aeabi_cdcmpeq>:
 8004050:	b501      	push	{r0, lr}
 8004052:	f7ff ffb7 	bl	8003fc4 <__cmpdf2>
 8004056:	2800      	cmp	r0, #0
 8004058:	bf48      	it	mi
 800405a:	f110 0f00 	cmnmi.w	r0, #0
 800405e:	bd01      	pop	{r0, pc}

08004060 <__aeabi_dcmpeq>:
 8004060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004064:	f7ff fff4 	bl	8004050 <__aeabi_cdcmpeq>
 8004068:	bf0c      	ite	eq
 800406a:	2001      	moveq	r0, #1
 800406c:	2000      	movne	r0, #0
 800406e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004072:	bf00      	nop

08004074 <__aeabi_dcmplt>:
 8004074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004078:	f7ff ffea 	bl	8004050 <__aeabi_cdcmpeq>
 800407c:	bf34      	ite	cc
 800407e:	2001      	movcc	r0, #1
 8004080:	2000      	movcs	r0, #0
 8004082:	f85d fb08 	ldr.w	pc, [sp], #8
 8004086:	bf00      	nop

08004088 <__aeabi_dcmple>:
 8004088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800408c:	f7ff ffe0 	bl	8004050 <__aeabi_cdcmpeq>
 8004090:	bf94      	ite	ls
 8004092:	2001      	movls	r0, #1
 8004094:	2000      	movhi	r0, #0
 8004096:	f85d fb08 	ldr.w	pc, [sp], #8
 800409a:	bf00      	nop

0800409c <__aeabi_dcmpge>:
 800409c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80040a0:	f7ff ffce 	bl	8004040 <__aeabi_cdrcmple>
 80040a4:	bf94      	ite	ls
 80040a6:	2001      	movls	r0, #1
 80040a8:	2000      	movhi	r0, #0
 80040aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80040ae:	bf00      	nop

080040b0 <__aeabi_dcmpgt>:
 80040b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80040b4:	f7ff ffc4 	bl	8004040 <__aeabi_cdrcmple>
 80040b8:	bf34      	ite	cc
 80040ba:	2001      	movcc	r0, #1
 80040bc:	2000      	movcs	r0, #0
 80040be:	f85d fb08 	ldr.w	pc, [sp], #8
 80040c2:	bf00      	nop

080040c4 <__aeabi_dcmpun>:
 80040c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80040c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80040cc:	d102      	bne.n	80040d4 <__aeabi_dcmpun+0x10>
 80040ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80040d2:	d10a      	bne.n	80040ea <__aeabi_dcmpun+0x26>
 80040d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80040d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80040dc:	d102      	bne.n	80040e4 <__aeabi_dcmpun+0x20>
 80040de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80040e2:	d102      	bne.n	80040ea <__aeabi_dcmpun+0x26>
 80040e4:	f04f 0000 	mov.w	r0, #0
 80040e8:	4770      	bx	lr
 80040ea:	f04f 0001 	mov.w	r0, #1
 80040ee:	4770      	bx	lr

080040f0 <__aeabi_d2iz>:
 80040f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80040f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80040f8:	d215      	bcs.n	8004126 <__aeabi_d2iz+0x36>
 80040fa:	d511      	bpl.n	8004120 <__aeabi_d2iz+0x30>
 80040fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004100:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004104:	d912      	bls.n	800412c <__aeabi_d2iz+0x3c>
 8004106:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800410a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800410e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004112:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004116:	fa23 f002 	lsr.w	r0, r3, r2
 800411a:	bf18      	it	ne
 800411c:	4240      	negne	r0, r0
 800411e:	4770      	bx	lr
 8004120:	f04f 0000 	mov.w	r0, #0
 8004124:	4770      	bx	lr
 8004126:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800412a:	d105      	bne.n	8004138 <__aeabi_d2iz+0x48>
 800412c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004130:	bf08      	it	eq
 8004132:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004136:	4770      	bx	lr
 8004138:	f04f 0000 	mov.w	r0, #0
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop

08004140 <__aeabi_d2uiz>:
 8004140:	004a      	lsls	r2, r1, #1
 8004142:	d211      	bcs.n	8004168 <__aeabi_d2uiz+0x28>
 8004144:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004148:	d211      	bcs.n	800416e <__aeabi_d2uiz+0x2e>
 800414a:	d50d      	bpl.n	8004168 <__aeabi_d2uiz+0x28>
 800414c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004150:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004154:	d40e      	bmi.n	8004174 <__aeabi_d2uiz+0x34>
 8004156:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800415a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800415e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004162:	fa23 f002 	lsr.w	r0, r3, r2
 8004166:	4770      	bx	lr
 8004168:	f04f 0000 	mov.w	r0, #0
 800416c:	4770      	bx	lr
 800416e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004172:	d102      	bne.n	800417a <__aeabi_d2uiz+0x3a>
 8004174:	f04f 30ff 	mov.w	r0, #4294967295
 8004178:	4770      	bx	lr
 800417a:	f04f 0000 	mov.w	r0, #0
 800417e:	4770      	bx	lr

08004180 <__errno>:
 8004180:	4b01      	ldr	r3, [pc, #4]	; (8004188 <__errno+0x8>)
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	20000468 	.word	0x20000468

0800418c <__libc_init_array>:
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	4e0f      	ldr	r6, [pc, #60]	; (80041cc <__libc_init_array+0x40>)
 8004190:	4d0f      	ldr	r5, [pc, #60]	; (80041d0 <__libc_init_array+0x44>)
 8004192:	1b76      	subs	r6, r6, r5
 8004194:	10b6      	asrs	r6, r6, #2
 8004196:	bf18      	it	ne
 8004198:	2400      	movne	r4, #0
 800419a:	d005      	beq.n	80041a8 <__libc_init_array+0x1c>
 800419c:	3401      	adds	r4, #1
 800419e:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a2:	4798      	blx	r3
 80041a4:	42a6      	cmp	r6, r4
 80041a6:	d1f9      	bne.n	800419c <__libc_init_array+0x10>
 80041a8:	4e0a      	ldr	r6, [pc, #40]	; (80041d4 <__libc_init_array+0x48>)
 80041aa:	4d0b      	ldr	r5, [pc, #44]	; (80041d8 <__libc_init_array+0x4c>)
 80041ac:	1b76      	subs	r6, r6, r5
 80041ae:	f7fe fa03 	bl	80025b8 <_init>
 80041b2:	10b6      	asrs	r6, r6, #2
 80041b4:	bf18      	it	ne
 80041b6:	2400      	movne	r4, #0
 80041b8:	d006      	beq.n	80041c8 <__libc_init_array+0x3c>
 80041ba:	3401      	adds	r4, #1
 80041bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c0:	4798      	blx	r3
 80041c2:	42a6      	cmp	r6, r4
 80041c4:	d1f9      	bne.n	80041ba <__libc_init_array+0x2e>
 80041c6:	bd70      	pop	{r4, r5, r6, pc}
 80041c8:	bd70      	pop	{r4, r5, r6, pc}
 80041ca:	bf00      	nop
 80041cc:	200009e8 	.word	0x200009e8
 80041d0:	200009e8 	.word	0x200009e8
 80041d4:	200009e8 	.word	0x200009e8
 80041d8:	200009e8 	.word	0x200009e8

080041dc <memcpy>:
 80041dc:	4684      	mov	ip, r0
 80041de:	ea41 0300 	orr.w	r3, r1, r0
 80041e2:	f013 0303 	ands.w	r3, r3, #3
 80041e6:	d16d      	bne.n	80042c4 <memcpy+0xe8>
 80041e8:	3a40      	subs	r2, #64	; 0x40
 80041ea:	d341      	bcc.n	8004270 <memcpy+0x94>
 80041ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80041f0:	f840 3b04 	str.w	r3, [r0], #4
 80041f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80041f8:	f840 3b04 	str.w	r3, [r0], #4
 80041fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8004200:	f840 3b04 	str.w	r3, [r0], #4
 8004204:	f851 3b04 	ldr.w	r3, [r1], #4
 8004208:	f840 3b04 	str.w	r3, [r0], #4
 800420c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004210:	f840 3b04 	str.w	r3, [r0], #4
 8004214:	f851 3b04 	ldr.w	r3, [r1], #4
 8004218:	f840 3b04 	str.w	r3, [r0], #4
 800421c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004220:	f840 3b04 	str.w	r3, [r0], #4
 8004224:	f851 3b04 	ldr.w	r3, [r1], #4
 8004228:	f840 3b04 	str.w	r3, [r0], #4
 800422c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004230:	f840 3b04 	str.w	r3, [r0], #4
 8004234:	f851 3b04 	ldr.w	r3, [r1], #4
 8004238:	f840 3b04 	str.w	r3, [r0], #4
 800423c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004240:	f840 3b04 	str.w	r3, [r0], #4
 8004244:	f851 3b04 	ldr.w	r3, [r1], #4
 8004248:	f840 3b04 	str.w	r3, [r0], #4
 800424c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004250:	f840 3b04 	str.w	r3, [r0], #4
 8004254:	f851 3b04 	ldr.w	r3, [r1], #4
 8004258:	f840 3b04 	str.w	r3, [r0], #4
 800425c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004260:	f840 3b04 	str.w	r3, [r0], #4
 8004264:	f851 3b04 	ldr.w	r3, [r1], #4
 8004268:	f840 3b04 	str.w	r3, [r0], #4
 800426c:	3a40      	subs	r2, #64	; 0x40
 800426e:	d2bd      	bcs.n	80041ec <memcpy+0x10>
 8004270:	3230      	adds	r2, #48	; 0x30
 8004272:	d311      	bcc.n	8004298 <memcpy+0xbc>
 8004274:	f851 3b04 	ldr.w	r3, [r1], #4
 8004278:	f840 3b04 	str.w	r3, [r0], #4
 800427c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004280:	f840 3b04 	str.w	r3, [r0], #4
 8004284:	f851 3b04 	ldr.w	r3, [r1], #4
 8004288:	f840 3b04 	str.w	r3, [r0], #4
 800428c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004290:	f840 3b04 	str.w	r3, [r0], #4
 8004294:	3a10      	subs	r2, #16
 8004296:	d2ed      	bcs.n	8004274 <memcpy+0x98>
 8004298:	320c      	adds	r2, #12
 800429a:	d305      	bcc.n	80042a8 <memcpy+0xcc>
 800429c:	f851 3b04 	ldr.w	r3, [r1], #4
 80042a0:	f840 3b04 	str.w	r3, [r0], #4
 80042a4:	3a04      	subs	r2, #4
 80042a6:	d2f9      	bcs.n	800429c <memcpy+0xc0>
 80042a8:	3204      	adds	r2, #4
 80042aa:	d008      	beq.n	80042be <memcpy+0xe2>
 80042ac:	07d2      	lsls	r2, r2, #31
 80042ae:	bf1c      	itt	ne
 80042b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80042b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80042b8:	d301      	bcc.n	80042be <memcpy+0xe2>
 80042ba:	880b      	ldrh	r3, [r1, #0]
 80042bc:	8003      	strh	r3, [r0, #0]
 80042be:	4660      	mov	r0, ip
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	2a08      	cmp	r2, #8
 80042c6:	d313      	bcc.n	80042f0 <memcpy+0x114>
 80042c8:	078b      	lsls	r3, r1, #30
 80042ca:	d08d      	beq.n	80041e8 <memcpy+0xc>
 80042cc:	f010 0303 	ands.w	r3, r0, #3
 80042d0:	d08a      	beq.n	80041e8 <memcpy+0xc>
 80042d2:	f1c3 0304 	rsb	r3, r3, #4
 80042d6:	1ad2      	subs	r2, r2, r3
 80042d8:	07db      	lsls	r3, r3, #31
 80042da:	bf1c      	itt	ne
 80042dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80042e0:	f800 3b01 	strbne.w	r3, [r0], #1
 80042e4:	d380      	bcc.n	80041e8 <memcpy+0xc>
 80042e6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80042ea:	f820 3b02 	strh.w	r3, [r0], #2
 80042ee:	e77b      	b.n	80041e8 <memcpy+0xc>
 80042f0:	3a04      	subs	r2, #4
 80042f2:	d3d9      	bcc.n	80042a8 <memcpy+0xcc>
 80042f4:	3a01      	subs	r2, #1
 80042f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042fa:	f800 3b01 	strb.w	r3, [r0], #1
 80042fe:	d2f9      	bcs.n	80042f4 <memcpy+0x118>
 8004300:	780b      	ldrb	r3, [r1, #0]
 8004302:	7003      	strb	r3, [r0, #0]
 8004304:	784b      	ldrb	r3, [r1, #1]
 8004306:	7043      	strb	r3, [r0, #1]
 8004308:	788b      	ldrb	r3, [r1, #2]
 800430a:	7083      	strb	r3, [r0, #2]
 800430c:	4660      	mov	r0, ip
 800430e:	4770      	bx	lr

08004310 <memset>:
 8004310:	b470      	push	{r4, r5, r6}
 8004312:	0784      	lsls	r4, r0, #30
 8004314:	d046      	beq.n	80043a4 <memset+0x94>
 8004316:	1e54      	subs	r4, r2, #1
 8004318:	2a00      	cmp	r2, #0
 800431a:	d041      	beq.n	80043a0 <memset+0x90>
 800431c:	b2cd      	uxtb	r5, r1
 800431e:	4603      	mov	r3, r0
 8004320:	e002      	b.n	8004328 <memset+0x18>
 8004322:	1e62      	subs	r2, r4, #1
 8004324:	b3e4      	cbz	r4, 80043a0 <memset+0x90>
 8004326:	4614      	mov	r4, r2
 8004328:	f803 5b01 	strb.w	r5, [r3], #1
 800432c:	079a      	lsls	r2, r3, #30
 800432e:	d1f8      	bne.n	8004322 <memset+0x12>
 8004330:	2c03      	cmp	r4, #3
 8004332:	d92e      	bls.n	8004392 <memset+0x82>
 8004334:	b2cd      	uxtb	r5, r1
 8004336:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800433a:	2c0f      	cmp	r4, #15
 800433c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004340:	d919      	bls.n	8004376 <memset+0x66>
 8004342:	f103 0210 	add.w	r2, r3, #16
 8004346:	4626      	mov	r6, r4
 8004348:	3e10      	subs	r6, #16
 800434a:	2e0f      	cmp	r6, #15
 800434c:	f842 5c10 	str.w	r5, [r2, #-16]
 8004350:	f842 5c0c 	str.w	r5, [r2, #-12]
 8004354:	f842 5c08 	str.w	r5, [r2, #-8]
 8004358:	f842 5c04 	str.w	r5, [r2, #-4]
 800435c:	f102 0210 	add.w	r2, r2, #16
 8004360:	d8f2      	bhi.n	8004348 <memset+0x38>
 8004362:	f1a4 0210 	sub.w	r2, r4, #16
 8004366:	f022 020f 	bic.w	r2, r2, #15
 800436a:	f004 040f 	and.w	r4, r4, #15
 800436e:	3210      	adds	r2, #16
 8004370:	2c03      	cmp	r4, #3
 8004372:	4413      	add	r3, r2
 8004374:	d90d      	bls.n	8004392 <memset+0x82>
 8004376:	461e      	mov	r6, r3
 8004378:	4622      	mov	r2, r4
 800437a:	3a04      	subs	r2, #4
 800437c:	2a03      	cmp	r2, #3
 800437e:	f846 5b04 	str.w	r5, [r6], #4
 8004382:	d8fa      	bhi.n	800437a <memset+0x6a>
 8004384:	1f22      	subs	r2, r4, #4
 8004386:	f022 0203 	bic.w	r2, r2, #3
 800438a:	3204      	adds	r2, #4
 800438c:	4413      	add	r3, r2
 800438e:	f004 0403 	and.w	r4, r4, #3
 8004392:	b12c      	cbz	r4, 80043a0 <memset+0x90>
 8004394:	b2c9      	uxtb	r1, r1
 8004396:	441c      	add	r4, r3
 8004398:	f803 1b01 	strb.w	r1, [r3], #1
 800439c:	42a3      	cmp	r3, r4
 800439e:	d1fb      	bne.n	8004398 <memset+0x88>
 80043a0:	bc70      	pop	{r4, r5, r6}
 80043a2:	4770      	bx	lr
 80043a4:	4614      	mov	r4, r2
 80043a6:	4603      	mov	r3, r0
 80043a8:	e7c2      	b.n	8004330 <memset+0x20>
 80043aa:	bf00      	nop

080043ac <printf>:
 80043ac:	b40f      	push	{r0, r1, r2, r3}
 80043ae:	b500      	push	{lr}
 80043b0:	4907      	ldr	r1, [pc, #28]	; (80043d0 <printf+0x24>)
 80043b2:	b083      	sub	sp, #12
 80043b4:	ab04      	add	r3, sp, #16
 80043b6:	6808      	ldr	r0, [r1, #0]
 80043b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80043bc:	6881      	ldr	r1, [r0, #8]
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	f001 fcba 	bl	8005d38 <_vfprintf_r>
 80043c4:	b003      	add	sp, #12
 80043c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80043ca:	b004      	add	sp, #16
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000468 	.word	0x20000468

080043d4 <_puts_r>:
 80043d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d6:	4605      	mov	r5, r0
 80043d8:	b089      	sub	sp, #36	; 0x24
 80043da:	4608      	mov	r0, r1
 80043dc:	460c      	mov	r4, r1
 80043de:	f000 f86f 	bl	80044c0 <strlen>
 80043e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80043e4:	4f14      	ldr	r7, [pc, #80]	; (8004438 <_puts_r+0x64>)
 80043e6:	9404      	str	r4, [sp, #16]
 80043e8:	2601      	movs	r6, #1
 80043ea:	1c44      	adds	r4, r0, #1
 80043ec:	a904      	add	r1, sp, #16
 80043ee:	2202      	movs	r2, #2
 80043f0:	9403      	str	r4, [sp, #12]
 80043f2:	9005      	str	r0, [sp, #20]
 80043f4:	68ac      	ldr	r4, [r5, #8]
 80043f6:	9706      	str	r7, [sp, #24]
 80043f8:	9607      	str	r6, [sp, #28]
 80043fa:	9101      	str	r1, [sp, #4]
 80043fc:	9202      	str	r2, [sp, #8]
 80043fe:	b1b3      	cbz	r3, 800442e <_puts_r+0x5a>
 8004400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004404:	049a      	lsls	r2, r3, #18
 8004406:	d406      	bmi.n	8004416 <_puts_r+0x42>
 8004408:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800440a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800440e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004412:	81a3      	strh	r3, [r4, #12]
 8004414:	6662      	str	r2, [r4, #100]	; 0x64
 8004416:	4621      	mov	r1, r4
 8004418:	4628      	mov	r0, r5
 800441a:	aa01      	add	r2, sp, #4
 800441c:	f004 fb0a 	bl	8008a34 <__sfvwrite_r>
 8004420:	2800      	cmp	r0, #0
 8004422:	bf14      	ite	ne
 8004424:	f04f 30ff 	movne.w	r0, #4294967295
 8004428:	200a      	moveq	r0, #10
 800442a:	b009      	add	sp, #36	; 0x24
 800442c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800442e:	4628      	mov	r0, r5
 8004430:	f004 f9c0 	bl	80087b4 <__sinit>
 8004434:	e7e4      	b.n	8004400 <_puts_r+0x2c>
 8004436:	bf00      	nop
 8004438:	0800ab78 	.word	0x0800ab78

0800443c <puts>:
 800443c:	4b02      	ldr	r3, [pc, #8]	; (8004448 <puts+0xc>)
 800443e:	4601      	mov	r1, r0
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	f7ff bfc7 	b.w	80043d4 <_puts_r>
 8004446:	bf00      	nop
 8004448:	20000468 	.word	0x20000468

0800444c <sprintf>:
 800444c:	b40e      	push	{r1, r2, r3}
 800444e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004450:	b09c      	sub	sp, #112	; 0x70
 8004452:	ab21      	add	r3, sp, #132	; 0x84
 8004454:	490f      	ldr	r1, [pc, #60]	; (8004494 <sprintf+0x48>)
 8004456:	f853 2b04 	ldr.w	r2, [r3], #4
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	4605      	mov	r5, r0
 800445e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8004462:	6808      	ldr	r0, [r1, #0]
 8004464:	9502      	str	r5, [sp, #8]
 8004466:	f44f 7702 	mov.w	r7, #520	; 0x208
 800446a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800446e:	a902      	add	r1, sp, #8
 8004470:	9506      	str	r5, [sp, #24]
 8004472:	f8ad 7014 	strh.w	r7, [sp, #20]
 8004476:	9404      	str	r4, [sp, #16]
 8004478:	9407      	str	r4, [sp, #28]
 800447a:	f8ad 6016 	strh.w	r6, [sp, #22]
 800447e:	f000 f8df 	bl	8004640 <_svfprintf_r>
 8004482:	9b02      	ldr	r3, [sp, #8]
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]
 8004488:	b01c      	add	sp, #112	; 0x70
 800448a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800448e:	b003      	add	sp, #12
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000468 	.word	0x20000468
	...

080044c0 <strlen>:
 80044c0:	f890 f000 	pld	[r0]
 80044c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 80044c8:	f020 0107 	bic.w	r1, r0, #7
 80044cc:	f06f 0c00 	mvn.w	ip, #0
 80044d0:	f010 0407 	ands.w	r4, r0, #7
 80044d4:	f891 f020 	pld	[r1, #32]
 80044d8:	f040 8049 	bne.w	800456e <strlen+0xae>
 80044dc:	f04f 0400 	mov.w	r4, #0
 80044e0:	f06f 0007 	mvn.w	r0, #7
 80044e4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80044e8:	f891 f040 	pld	[r1, #64]	; 0x40
 80044ec:	f100 0008 	add.w	r0, r0, #8
 80044f0:	fa82 f24c 	uadd8	r2, r2, ip
 80044f4:	faa4 f28c 	sel	r2, r4, ip
 80044f8:	fa83 f34c 	uadd8	r3, r3, ip
 80044fc:	faa2 f38c 	sel	r3, r2, ip
 8004500:	bb4b      	cbnz	r3, 8004556 <strlen+0x96>
 8004502:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8004506:	fa82 f24c 	uadd8	r2, r2, ip
 800450a:	f100 0008 	add.w	r0, r0, #8
 800450e:	faa4 f28c 	sel	r2, r4, ip
 8004512:	fa83 f34c 	uadd8	r3, r3, ip
 8004516:	faa2 f38c 	sel	r3, r2, ip
 800451a:	b9e3      	cbnz	r3, 8004556 <strlen+0x96>
 800451c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8004520:	fa82 f24c 	uadd8	r2, r2, ip
 8004524:	f100 0008 	add.w	r0, r0, #8
 8004528:	faa4 f28c 	sel	r2, r4, ip
 800452c:	fa83 f34c 	uadd8	r3, r3, ip
 8004530:	faa2 f38c 	sel	r3, r2, ip
 8004534:	b97b      	cbnz	r3, 8004556 <strlen+0x96>
 8004536:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800453a:	f101 0120 	add.w	r1, r1, #32
 800453e:	fa82 f24c 	uadd8	r2, r2, ip
 8004542:	f100 0008 	add.w	r0, r0, #8
 8004546:	faa4 f28c 	sel	r2, r4, ip
 800454a:	fa83 f34c 	uadd8	r3, r3, ip
 800454e:	faa2 f38c 	sel	r3, r2, ip
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0c6      	beq.n	80044e4 <strlen+0x24>
 8004556:	2a00      	cmp	r2, #0
 8004558:	bf04      	itt	eq
 800455a:	3004      	addeq	r0, #4
 800455c:	461a      	moveq	r2, r3
 800455e:	ba12      	rev	r2, r2
 8004560:	fab2 f282 	clz	r2, r2
 8004564:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8004568:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800456c:	4770      	bx	lr
 800456e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004572:	f004 0503 	and.w	r5, r4, #3
 8004576:	f1c4 0000 	rsb	r0, r4, #0
 800457a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800457e:	f014 0f04 	tst.w	r4, #4
 8004582:	f891 f040 	pld	[r1, #64]	; 0x40
 8004586:	fa0c f505 	lsl.w	r5, ip, r5
 800458a:	ea62 0205 	orn	r2, r2, r5
 800458e:	bf1c      	itt	ne
 8004590:	ea63 0305 	ornne	r3, r3, r5
 8004594:	4662      	movne	r2, ip
 8004596:	f04f 0400 	mov.w	r4, #0
 800459a:	e7a9      	b.n	80044f0 <strlen+0x30>

0800459c <strncmp>:
 800459c:	2a00      	cmp	r2, #0
 800459e:	d041      	beq.n	8004624 <strncmp+0x88>
 80045a0:	ea40 0301 	orr.w	r3, r0, r1
 80045a4:	f013 0303 	ands.w	r3, r3, #3
 80045a8:	b4f0      	push	{r4, r5, r6, r7}
 80045aa:	d125      	bne.n	80045f8 <strncmp+0x5c>
 80045ac:	2a03      	cmp	r2, #3
 80045ae:	d923      	bls.n	80045f8 <strncmp+0x5c>
 80045b0:	6804      	ldr	r4, [r0, #0]
 80045b2:	680d      	ldr	r5, [r1, #0]
 80045b4:	42ac      	cmp	r4, r5
 80045b6:	d11f      	bne.n	80045f8 <strncmp+0x5c>
 80045b8:	3a04      	subs	r2, #4
 80045ba:	d035      	beq.n	8004628 <strncmp+0x8c>
 80045bc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 80045c0:	ea25 0404 	bic.w	r4, r5, r4
 80045c4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80045c8:	d131      	bne.n	800462e <strncmp+0x92>
 80045ca:	1d07      	adds	r7, r0, #4
 80045cc:	1d0d      	adds	r5, r1, #4
 80045ce:	e00d      	b.n	80045ec <strncmp+0x50>
 80045d0:	f857 3b04 	ldr.w	r3, [r7], #4
 80045d4:	680e      	ldr	r6, [r1, #0]
 80045d6:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 80045da:	42b3      	cmp	r3, r6
 80045dc:	ea24 0403 	bic.w	r4, r4, r3
 80045e0:	d10a      	bne.n	80045f8 <strncmp+0x5c>
 80045e2:	3a04      	subs	r2, #4
 80045e4:	d020      	beq.n	8004628 <strncmp+0x8c>
 80045e6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80045ea:	d123      	bne.n	8004634 <strncmp+0x98>
 80045ec:	2a03      	cmp	r2, #3
 80045ee:	4629      	mov	r1, r5
 80045f0:	4638      	mov	r0, r7
 80045f2:	f105 0504 	add.w	r5, r5, #4
 80045f6:	d8eb      	bhi.n	80045d0 <strncmp+0x34>
 80045f8:	7803      	ldrb	r3, [r0, #0]
 80045fa:	780c      	ldrb	r4, [r1, #0]
 80045fc:	429c      	cmp	r4, r3
 80045fe:	f102 32ff 	add.w	r2, r2, #4294967295
 8004602:	d10c      	bne.n	800461e <strncmp+0x82>
 8004604:	b182      	cbz	r2, 8004628 <strncmp+0x8c>
 8004606:	b914      	cbnz	r4, 800460e <strncmp+0x72>
 8004608:	e016      	b.n	8004638 <strncmp+0x9c>
 800460a:	b16a      	cbz	r2, 8004628 <strncmp+0x8c>
 800460c:	b17b      	cbz	r3, 800462e <strncmp+0x92>
 800460e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004612:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004616:	42a3      	cmp	r3, r4
 8004618:	f102 32ff 	add.w	r2, r2, #4294967295
 800461c:	d0f5      	beq.n	800460a <strncmp+0x6e>
 800461e:	1b18      	subs	r0, r3, r4
 8004620:	bcf0      	pop	{r4, r5, r6, r7}
 8004622:	4770      	bx	lr
 8004624:	4610      	mov	r0, r2
 8004626:	4770      	bx	lr
 8004628:	4610      	mov	r0, r2
 800462a:	bcf0      	pop	{r4, r5, r6, r7}
 800462c:	4770      	bx	lr
 800462e:	4618      	mov	r0, r3
 8004630:	bcf0      	pop	{r4, r5, r6, r7}
 8004632:	4770      	bx	lr
 8004634:	2000      	movs	r0, #0
 8004636:	e7f3      	b.n	8004620 <strncmp+0x84>
 8004638:	4620      	mov	r0, r4
 800463a:	e7f1      	b.n	8004620 <strncmp+0x84>
 800463c:	0000      	movs	r0, r0
	...

08004640 <_svfprintf_r>:
 8004640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004644:	b0c5      	sub	sp, #276	; 0x114
 8004646:	460c      	mov	r4, r1
 8004648:	9109      	str	r1, [sp, #36]	; 0x24
 800464a:	4615      	mov	r5, r2
 800464c:	930e      	str	r3, [sp, #56]	; 0x38
 800464e:	900a      	str	r0, [sp, #40]	; 0x28
 8004650:	f004 fbaa 	bl	8008da8 <_localeconv_r>
 8004654:	6803      	ldr	r3, [r0, #0]
 8004656:	9317      	str	r3, [sp, #92]	; 0x5c
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff ff31 	bl	80044c0 <strlen>
 800465e:	89a3      	ldrh	r3, [r4, #12]
 8004660:	9016      	str	r0, [sp, #88]	; 0x58
 8004662:	061e      	lsls	r6, r3, #24
 8004664:	d503      	bpl.n	800466e <_svfprintf_r+0x2e>
 8004666:	6923      	ldr	r3, [r4, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f001 8133 	beq.w	80058d4 <_svfprintf_r+0x1294>
 800466e:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004908 <_svfprintf_r+0x2c8>
 8004672:	2300      	movs	r3, #0
 8004674:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004678:	9312      	str	r3, [sp, #72]	; 0x48
 800467a:	9329      	str	r3, [sp, #164]	; 0xa4
 800467c:	9328      	str	r3, [sp, #160]	; 0xa0
 800467e:	9319      	str	r3, [sp, #100]	; 0x64
 8004680:	930b      	str	r3, [sp, #44]	; 0x2c
 8004682:	f8df a290 	ldr.w	sl, [pc, #656]	; 8004914 <_svfprintf_r+0x2d4>
 8004686:	ab34      	add	r3, sp, #208	; 0xd0
 8004688:	9327      	str	r3, [sp, #156]	; 0x9c
 800468a:	4699      	mov	r9, r3
 800468c:	46a8      	mov	r8, r5
 800468e:	f898 3000 	ldrb.w	r3, [r8]
 8004692:	4644      	mov	r4, r8
 8004694:	b1eb      	cbz	r3, 80046d2 <_svfprintf_r+0x92>
 8004696:	2b25      	cmp	r3, #37	; 0x25
 8004698:	d102      	bne.n	80046a0 <_svfprintf_r+0x60>
 800469a:	e01a      	b.n	80046d2 <_svfprintf_r+0x92>
 800469c:	2b25      	cmp	r3, #37	; 0x25
 800469e:	d003      	beq.n	80046a8 <_svfprintf_r+0x68>
 80046a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f9      	bne.n	800469c <_svfprintf_r+0x5c>
 80046a8:	ebc8 0504 	rsb	r5, r8, r4
 80046ac:	b18d      	cbz	r5, 80046d2 <_svfprintf_r+0x92>
 80046ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80046b0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80046b2:	f8c9 8000 	str.w	r8, [r9]
 80046b6:	3301      	adds	r3, #1
 80046b8:	442a      	add	r2, r5
 80046ba:	2b07      	cmp	r3, #7
 80046bc:	f8c9 5004 	str.w	r5, [r9, #4]
 80046c0:	9229      	str	r2, [sp, #164]	; 0xa4
 80046c2:	9328      	str	r3, [sp, #160]	; 0xa0
 80046c4:	f300 80a6 	bgt.w	8004814 <_svfprintf_r+0x1d4>
 80046c8:	f109 0908 	add.w	r9, r9, #8
 80046cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046ce:	442b      	add	r3, r5
 80046d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80046d2:	7823      	ldrb	r3, [r4, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80a6 	beq.w	8004826 <_svfprintf_r+0x1e6>
 80046da:	2300      	movs	r3, #0
 80046dc:	461a      	mov	r2, r3
 80046de:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80046e2:	4619      	mov	r1, r3
 80046e4:	930c      	str	r3, [sp, #48]	; 0x30
 80046e6:	9307      	str	r3, [sp, #28]
 80046e8:	f04f 3bff 	mov.w	fp, #4294967295
 80046ec:	7863      	ldrb	r3, [r4, #1]
 80046ee:	f104 0801 	add.w	r8, r4, #1
 80046f2:	465d      	mov	r5, fp
 80046f4:	f108 0801 	add.w	r8, r8, #1
 80046f8:	f1a3 0020 	sub.w	r0, r3, #32
 80046fc:	2858      	cmp	r0, #88	; 0x58
 80046fe:	f200 8434 	bhi.w	8004f6a <_svfprintf_r+0x92a>
 8004702:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004706:	03a0      	.short	0x03a0
 8004708:	04320432 	.word	0x04320432
 800470c:	043203a8 	.word	0x043203a8
 8004710:	04320432 	.word	0x04320432
 8004714:	04320432 	.word	0x04320432
 8004718:	03af0432 	.word	0x03af0432
 800471c:	043203bd 	.word	0x043203bd
 8004720:	00e2005d 	.word	0x00e2005d
 8004724:	01090432 	.word	0x01090432
 8004728:	01100110 	.word	0x01100110
 800472c:	01100110 	.word	0x01100110
 8004730:	01100110 	.word	0x01100110
 8004734:	01100110 	.word	0x01100110
 8004738:	04320110 	.word	0x04320110
 800473c:	04320432 	.word	0x04320432
 8004740:	04320432 	.word	0x04320432
 8004744:	04320432 	.word	0x04320432
 8004748:	04320432 	.word	0x04320432
 800474c:	01200432 	.word	0x01200432
 8004750:	04320286 	.word	0x04320286
 8004754:	04320286 	.word	0x04320286
 8004758:	04320432 	.word	0x04320432
 800475c:	02d40432 	.word	0x02d40432
 8004760:	04320432 	.word	0x04320432
 8004764:	043202e5 	.word	0x043202e5
 8004768:	04320432 	.word	0x04320432
 800476c:	04320432 	.word	0x04320432
 8004770:	0432030f 	.word	0x0432030f
 8004774:	033d0432 	.word	0x033d0432
 8004778:	04320432 	.word	0x04320432
 800477c:	04320432 	.word	0x04320432
 8004780:	04320432 	.word	0x04320432
 8004784:	04320432 	.word	0x04320432
 8004788:	04320432 	.word	0x04320432
 800478c:	0391037e 	.word	0x0391037e
 8004790:	02860286 	.word	0x02860286
 8004794:	03990286 	.word	0x03990286
 8004798:	04320391 	.word	0x04320391
 800479c:	04070432 	.word	0x04070432
 80047a0:	04120432 	.word	0x04120432
 80047a4:	006400a3 	.word	0x006400a3
 80047a8:	043203c2 	.word	0x043203c2
 80047ac:	043203c9 	.word	0x043203c9
 80047b0:	043203ea 	.word	0x043203ea
 80047b4:	03f20432 	.word	0x03f20432
 80047b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80047ba:	930e      	str	r3, [sp, #56]	; 0x38
 80047bc:	4240      	negs	r0, r0
 80047be:	900c      	str	r0, [sp, #48]	; 0x30
 80047c0:	9b07      	ldr	r3, [sp, #28]
 80047c2:	f043 0304 	orr.w	r3, r3, #4
 80047c6:	9307      	str	r3, [sp, #28]
 80047c8:	f898 3000 	ldrb.w	r3, [r8]
 80047cc:	e792      	b.n	80046f4 <_svfprintf_r+0xb4>
 80047ce:	980e      	ldr	r0, [sp, #56]	; 0x38
 80047d0:	46ab      	mov	fp, r5
 80047d2:	2100      	movs	r1, #0
 80047d4:	6804      	ldr	r4, [r0, #0]
 80047d6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80047da:	1d07      	adds	r7, r0, #4
 80047dc:	9807      	ldr	r0, [sp, #28]
 80047de:	2330      	movs	r3, #48	; 0x30
 80047e0:	2278      	movs	r2, #120	; 0x78
 80047e2:	458b      	cmp	fp, r1
 80047e4:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 80047e8:	f04f 0500 	mov.w	r5, #0
 80047ec:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 80047f0:	f040 0302 	orr.w	r3, r0, #2
 80047f4:	f2c0 83d6 	blt.w	8004fa4 <_svfprintf_r+0x964>
 80047f8:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 80047fc:	f043 0302 	orr.w	r3, r3, #2
 8004800:	9307      	str	r3, [sp, #28]
 8004802:	ea54 0305 	orrs.w	r3, r4, r5
 8004806:	970e      	str	r7, [sp, #56]	; 0x38
 8004808:	f000 83a2 	beq.w	8004f50 <_svfprintf_r+0x910>
 800480c:	460f      	mov	r7, r1
 800480e:	9211      	str	r2, [sp, #68]	; 0x44
 8004810:	483f      	ldr	r0, [pc, #252]	; (8004910 <_svfprintf_r+0x2d0>)
 8004812:	e2e6      	b.n	8004de2 <_svfprintf_r+0x7a2>
 8004814:	aa27      	add	r2, sp, #156	; 0x9c
 8004816:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004818:	980a      	ldr	r0, [sp, #40]	; 0x28
 800481a:	f005 fc27 	bl	800a06c <__ssprint_r>
 800481e:	b948      	cbnz	r0, 8004834 <_svfprintf_r+0x1f4>
 8004820:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004824:	e752      	b.n	80046cc <_svfprintf_r+0x8c>
 8004826:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004828:	b123      	cbz	r3, 8004834 <_svfprintf_r+0x1f4>
 800482a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800482c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800482e:	aa27      	add	r2, sp, #156	; 0x9c
 8004830:	f005 fc1c 	bl	800a06c <__ssprint_r>
 8004834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004836:	899b      	ldrh	r3, [r3, #12]
 8004838:	f013 0f40 	tst.w	r3, #64	; 0x40
 800483c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800483e:	bf18      	it	ne
 8004840:	f04f 33ff 	movne.w	r3, #4294967295
 8004844:	4618      	mov	r0, r3
 8004846:	b045      	add	sp, #276	; 0x114
 8004848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800484c:	9311      	str	r3, [sp, #68]	; 0x44
 800484e:	46ab      	mov	fp, r5
 8004850:	2a00      	cmp	r2, #0
 8004852:	f041 823b 	bne.w	8005ccc <_svfprintf_r+0x168c>
 8004856:	9a07      	ldr	r2, [sp, #28]
 8004858:	f012 0320 	ands.w	r3, r2, #32
 800485c:	f000 8246 	beq.w	8004cec <_svfprintf_r+0x6ac>
 8004860:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004862:	3707      	adds	r7, #7
 8004864:	f027 0307 	bic.w	r3, r7, #7
 8004868:	2700      	movs	r7, #0
 800486a:	f103 0108 	add.w	r1, r3, #8
 800486e:	45bb      	cmp	fp, r7
 8004870:	910e      	str	r1, [sp, #56]	; 0x38
 8004872:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004876:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800487a:	f2c0 8764 	blt.w	8005746 <_svfprintf_r+0x1106>
 800487e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004882:	9307      	str	r3, [sp, #28]
 8004884:	ea54 0305 	orrs.w	r3, r4, r5
 8004888:	f000 8384 	beq.w	8004f94 <_svfprintf_r+0x954>
 800488c:	ae34      	add	r6, sp, #208	; 0xd0
 800488e:	08e2      	lsrs	r2, r4, #3
 8004890:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8004894:	08e9      	lsrs	r1, r5, #3
 8004896:	f004 0307 	and.w	r3, r4, #7
 800489a:	460d      	mov	r5, r1
 800489c:	4614      	mov	r4, r2
 800489e:	3330      	adds	r3, #48	; 0x30
 80048a0:	ea54 0205 	orrs.w	r2, r4, r5
 80048a4:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80048a8:	d1f1      	bne.n	800488e <_svfprintf_r+0x24e>
 80048aa:	9a07      	ldr	r2, [sp, #28]
 80048ac:	07d1      	lsls	r1, r2, #31
 80048ae:	f140 808f 	bpl.w	80049d0 <_svfprintf_r+0x390>
 80048b2:	2b30      	cmp	r3, #48	; 0x30
 80048b4:	f000 808c 	beq.w	80049d0 <_svfprintf_r+0x390>
 80048b8:	2230      	movs	r2, #48	; 0x30
 80048ba:	1e73      	subs	r3, r6, #1
 80048bc:	f806 2c01 	strb.w	r2, [r6, #-1]
 80048c0:	aa34      	add	r2, sp, #208	; 0xd0
 80048c2:	1ad2      	subs	r2, r2, r3
 80048c4:	920d      	str	r2, [sp, #52]	; 0x34
 80048c6:	461e      	mov	r6, r3
 80048c8:	e085      	b.n	80049d6 <_svfprintf_r+0x396>
 80048ca:	f898 3000 	ldrb.w	r3, [r8]
 80048ce:	2b2a      	cmp	r3, #42	; 0x2a
 80048d0:	f108 0401 	add.w	r4, r8, #1
 80048d4:	f001 81ec 	beq.w	8005cb0 <_svfprintf_r+0x1670>
 80048d8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80048dc:	2809      	cmp	r0, #9
 80048de:	bf98      	it	ls
 80048e0:	2500      	movls	r5, #0
 80048e2:	f201 818e 	bhi.w	8005c02 <_svfprintf_r+0x15c2>
 80048e6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80048ea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80048ee:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80048f2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80048f6:	2809      	cmp	r0, #9
 80048f8:	d9f5      	bls.n	80048e6 <_svfprintf_r+0x2a6>
 80048fa:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80048fe:	46a0      	mov	r8, r4
 8004900:	e6fa      	b.n	80046f8 <_svfprintf_r+0xb8>
 8004902:	bf00      	nop
 8004904:	f3af 8000 	nop.w
	...
 8004910:	0800abb0 	.word	0x0800abb0
 8004914:	0800ab7c 	.word	0x0800ab7c
 8004918:	9b07      	ldr	r3, [sp, #28]
 800491a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491e:	9307      	str	r3, [sp, #28]
 8004920:	f898 3000 	ldrb.w	r3, [r8]
 8004924:	e6e6      	b.n	80046f4 <_svfprintf_r+0xb4>
 8004926:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800492a:	2300      	movs	r3, #0
 800492c:	461c      	mov	r4, r3
 800492e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004932:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004936:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800493a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800493e:	2809      	cmp	r0, #9
 8004940:	d9f5      	bls.n	800492e <_svfprintf_r+0x2ee>
 8004942:	940c      	str	r4, [sp, #48]	; 0x30
 8004944:	e6d8      	b.n	80046f8 <_svfprintf_r+0xb8>
 8004946:	9311      	str	r3, [sp, #68]	; 0x44
 8004948:	46ab      	mov	fp, r5
 800494a:	2a00      	cmp	r2, #0
 800494c:	f041 81cc 	bne.w	8005ce8 <_svfprintf_r+0x16a8>
 8004950:	9b07      	ldr	r3, [sp, #28]
 8004952:	f043 0310 	orr.w	r3, r3, #16
 8004956:	9307      	str	r3, [sp, #28]
 8004958:	9b07      	ldr	r3, [sp, #28]
 800495a:	069c      	lsls	r4, r3, #26
 800495c:	f140 8537 	bpl.w	80053ce <_svfprintf_r+0xd8e>
 8004960:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004962:	3707      	adds	r7, #7
 8004964:	f027 0707 	bic.w	r7, r7, #7
 8004968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800496c:	f107 0108 	add.w	r1, r7, #8
 8004970:	910e      	str	r1, [sp, #56]	; 0x38
 8004972:	4614      	mov	r4, r2
 8004974:	461d      	mov	r5, r3
 8004976:	2a00      	cmp	r2, #0
 8004978:	f173 0300 	sbcs.w	r3, r3, #0
 800497c:	f2c0 8562 	blt.w	8005444 <_svfprintf_r+0xe04>
 8004980:	f1bb 0f00 	cmp.w	fp, #0
 8004984:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004988:	f2c0 853f 	blt.w	800540a <_svfprintf_r+0xdca>
 800498c:	9b07      	ldr	r3, [sp, #28]
 800498e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004992:	9307      	str	r3, [sp, #28]
 8004994:	ea54 0305 	orrs.w	r3, r4, r5
 8004998:	f000 81e8 	beq.w	8004d6c <_svfprintf_r+0x72c>
 800499c:	2d00      	cmp	r5, #0
 800499e:	bf08      	it	eq
 80049a0:	2c0a      	cmpeq	r4, #10
 80049a2:	f0c0 81e8 	bcc.w	8004d76 <_svfprintf_r+0x736>
 80049a6:	ae34      	add	r6, sp, #208	; 0xd0
 80049a8:	4620      	mov	r0, r4
 80049aa:	4629      	mov	r1, r5
 80049ac:	220a      	movs	r2, #10
 80049ae:	2300      	movs	r3, #0
 80049b0:	f005 fdfc 	bl	800a5ac <__aeabi_uldivmod>
 80049b4:	3230      	adds	r2, #48	; 0x30
 80049b6:	f806 2d01 	strb.w	r2, [r6, #-1]!
 80049ba:	4620      	mov	r0, r4
 80049bc:	4629      	mov	r1, r5
 80049be:	2300      	movs	r3, #0
 80049c0:	220a      	movs	r2, #10
 80049c2:	f005 fdf3 	bl	800a5ac <__aeabi_uldivmod>
 80049c6:	4604      	mov	r4, r0
 80049c8:	460d      	mov	r5, r1
 80049ca:	ea54 0305 	orrs.w	r3, r4, r5
 80049ce:	d1eb      	bne.n	80049a8 <_svfprintf_r+0x368>
 80049d0:	ab34      	add	r3, sp, #208	; 0xd0
 80049d2:	1b9b      	subs	r3, r3, r6
 80049d4:	930d      	str	r3, [sp, #52]	; 0x34
 80049d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049d8:	455b      	cmp	r3, fp
 80049da:	bfb8      	it	lt
 80049dc:	465b      	movlt	r3, fp
 80049de:	9308      	str	r3, [sp, #32]
 80049e0:	2300      	movs	r3, #0
 80049e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80049e4:	b117      	cbz	r7, 80049ec <_svfprintf_r+0x3ac>
 80049e6:	9b08      	ldr	r3, [sp, #32]
 80049e8:	3301      	adds	r3, #1
 80049ea:	9308      	str	r3, [sp, #32]
 80049ec:	9b07      	ldr	r3, [sp, #28]
 80049ee:	f013 0302 	ands.w	r3, r3, #2
 80049f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80049f4:	d002      	beq.n	80049fc <_svfprintf_r+0x3bc>
 80049f6:	9b08      	ldr	r3, [sp, #32]
 80049f8:	3302      	adds	r3, #2
 80049fa:	9308      	str	r3, [sp, #32]
 80049fc:	9b07      	ldr	r3, [sp, #28]
 80049fe:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8004a02:	9310      	str	r3, [sp, #64]	; 0x40
 8004a04:	f040 82db 	bne.w	8004fbe <_svfprintf_r+0x97e>
 8004a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a0a:	9a08      	ldr	r2, [sp, #32]
 8004a0c:	1a9d      	subs	r5, r3, r2
 8004a0e:	2d00      	cmp	r5, #0
 8004a10:	f340 82d5 	ble.w	8004fbe <_svfprintf_r+0x97e>
 8004a14:	2d10      	cmp	r5, #16
 8004a16:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004a18:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004a1a:	4fa8      	ldr	r7, [pc, #672]	; (8004cbc <_svfprintf_r+0x67c>)
 8004a1c:	dd27      	ble.n	8004a6e <_svfprintf_r+0x42e>
 8004a1e:	9618      	str	r6, [sp, #96]	; 0x60
 8004a20:	4648      	mov	r0, r9
 8004a22:	2410      	movs	r4, #16
 8004a24:	46b9      	mov	r9, r7
 8004a26:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004a28:	462f      	mov	r7, r5
 8004a2a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004a2c:	e004      	b.n	8004a38 <_svfprintf_r+0x3f8>
 8004a2e:	3f10      	subs	r7, #16
 8004a30:	2f10      	cmp	r7, #16
 8004a32:	f100 0008 	add.w	r0, r0, #8
 8004a36:	dd16      	ble.n	8004a66 <_svfprintf_r+0x426>
 8004a38:	3201      	adds	r2, #1
 8004a3a:	4ba0      	ldr	r3, [pc, #640]	; (8004cbc <_svfprintf_r+0x67c>)
 8004a3c:	9228      	str	r2, [sp, #160]	; 0xa0
 8004a3e:	3110      	adds	r1, #16
 8004a40:	2a07      	cmp	r2, #7
 8004a42:	9129      	str	r1, [sp, #164]	; 0xa4
 8004a44:	e880 0018 	stmia.w	r0, {r3, r4}
 8004a48:	ddf1      	ble.n	8004a2e <_svfprintf_r+0x3ee>
 8004a4a:	aa27      	add	r2, sp, #156	; 0x9c
 8004a4c:	4631      	mov	r1, r6
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f005 fb0c 	bl	800a06c <__ssprint_r>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	f47f aeed 	bne.w	8004834 <_svfprintf_r+0x1f4>
 8004a5a:	3f10      	subs	r7, #16
 8004a5c:	2f10      	cmp	r7, #16
 8004a5e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004a60:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004a62:	a834      	add	r0, sp, #208	; 0xd0
 8004a64:	dce8      	bgt.n	8004a38 <_svfprintf_r+0x3f8>
 8004a66:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8004a68:	463d      	mov	r5, r7
 8004a6a:	464f      	mov	r7, r9
 8004a6c:	4681      	mov	r9, r0
 8004a6e:	3201      	adds	r2, #1
 8004a70:	186c      	adds	r4, r5, r1
 8004a72:	2a07      	cmp	r2, #7
 8004a74:	9429      	str	r4, [sp, #164]	; 0xa4
 8004a76:	9228      	str	r2, [sp, #160]	; 0xa0
 8004a78:	f8c9 7000 	str.w	r7, [r9]
 8004a7c:	f8c9 5004 	str.w	r5, [r9, #4]
 8004a80:	f300 842d 	bgt.w	80052de <_svfprintf_r+0xc9e>
 8004a84:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004a88:	f109 0908 	add.w	r9, r9, #8
 8004a8c:	b177      	cbz	r7, 8004aac <_svfprintf_r+0x46c>
 8004a8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004a90:	3301      	adds	r3, #1
 8004a92:	3401      	adds	r4, #1
 8004a94:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8004a98:	2201      	movs	r2, #1
 8004a9a:	2b07      	cmp	r3, #7
 8004a9c:	9429      	str	r4, [sp, #164]	; 0xa4
 8004a9e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004aa0:	e889 0006 	stmia.w	r9, {r1, r2}
 8004aa4:	f300 83a5 	bgt.w	80051f2 <_svfprintf_r+0xbb2>
 8004aa8:	f109 0908 	add.w	r9, r9, #8
 8004aac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004aae:	b16b      	cbz	r3, 8004acc <_svfprintf_r+0x48c>
 8004ab0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	3402      	adds	r4, #2
 8004ab6:	a920      	add	r1, sp, #128	; 0x80
 8004ab8:	2202      	movs	r2, #2
 8004aba:	2b07      	cmp	r3, #7
 8004abc:	9429      	str	r4, [sp, #164]	; 0xa4
 8004abe:	9328      	str	r3, [sp, #160]	; 0xa0
 8004ac0:	e889 0006 	stmia.w	r9, {r1, r2}
 8004ac4:	f300 83a1 	bgt.w	800520a <_svfprintf_r+0xbca>
 8004ac8:	f109 0908 	add.w	r9, r9, #8
 8004acc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ace:	2b80      	cmp	r3, #128	; 0x80
 8004ad0:	f000 82e1 	beq.w	8005096 <_svfprintf_r+0xa56>
 8004ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ad6:	ebc3 070b 	rsb	r7, r3, fp
 8004ada:	2f00      	cmp	r7, #0
 8004adc:	dd33      	ble.n	8004b46 <_svfprintf_r+0x506>
 8004ade:	4a78      	ldr	r2, [pc, #480]	; (8004cc0 <_svfprintf_r+0x680>)
 8004ae0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004ae2:	920f      	str	r2, [sp, #60]	; 0x3c
 8004ae4:	2f10      	cmp	r7, #16
 8004ae6:	dd22      	ble.n	8004b2e <_svfprintf_r+0x4ee>
 8004ae8:	4622      	mov	r2, r4
 8004aea:	f04f 0b10 	mov.w	fp, #16
 8004aee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004af0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004af2:	e004      	b.n	8004afe <_svfprintf_r+0x4be>
 8004af4:	3f10      	subs	r7, #16
 8004af6:	2f10      	cmp	r7, #16
 8004af8:	f109 0908 	add.w	r9, r9, #8
 8004afc:	dd16      	ble.n	8004b2c <_svfprintf_r+0x4ec>
 8004afe:	3301      	adds	r3, #1
 8004b00:	3210      	adds	r2, #16
 8004b02:	2b07      	cmp	r3, #7
 8004b04:	9229      	str	r2, [sp, #164]	; 0xa4
 8004b06:	9328      	str	r3, [sp, #160]	; 0xa0
 8004b08:	e889 0c00 	stmia.w	r9, {sl, fp}
 8004b0c:	ddf2      	ble.n	8004af4 <_svfprintf_r+0x4b4>
 8004b0e:	aa27      	add	r2, sp, #156	; 0x9c
 8004b10:	4621      	mov	r1, r4
 8004b12:	4628      	mov	r0, r5
 8004b14:	f005 faaa 	bl	800a06c <__ssprint_r>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	f47f ae8b 	bne.w	8004834 <_svfprintf_r+0x1f4>
 8004b1e:	3f10      	subs	r7, #16
 8004b20:	2f10      	cmp	r7, #16
 8004b22:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004b24:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004b26:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004b2a:	dce8      	bgt.n	8004afe <_svfprintf_r+0x4be>
 8004b2c:	4614      	mov	r4, r2
 8004b2e:	3301      	adds	r3, #1
 8004b30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b32:	9328      	str	r3, [sp, #160]	; 0xa0
 8004b34:	443c      	add	r4, r7
 8004b36:	2b07      	cmp	r3, #7
 8004b38:	9429      	str	r4, [sp, #164]	; 0xa4
 8004b3a:	e889 0084 	stmia.w	r9, {r2, r7}
 8004b3e:	f300 834c 	bgt.w	80051da <_svfprintf_r+0xb9a>
 8004b42:	f109 0908 	add.w	r9, r9, #8
 8004b46:	9b07      	ldr	r3, [sp, #28]
 8004b48:	05da      	lsls	r2, r3, #23
 8004b4a:	f100 823a 	bmi.w	8004fc2 <_svfprintf_r+0x982>
 8004b4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004b50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b52:	f8c9 6000 	str.w	r6, [r9]
 8004b56:	3301      	adds	r3, #1
 8004b58:	440c      	add	r4, r1
 8004b5a:	2b07      	cmp	r3, #7
 8004b5c:	9429      	str	r4, [sp, #164]	; 0xa4
 8004b5e:	f8c9 1004 	str.w	r1, [r9, #4]
 8004b62:	9328      	str	r3, [sp, #160]	; 0xa0
 8004b64:	f300 8323 	bgt.w	80051ae <_svfprintf_r+0xb6e>
 8004b68:	f109 0908 	add.w	r9, r9, #8
 8004b6c:	9b07      	ldr	r3, [sp, #28]
 8004b6e:	0759      	lsls	r1, r3, #29
 8004b70:	d53f      	bpl.n	8004bf2 <_svfprintf_r+0x5b2>
 8004b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b74:	9a08      	ldr	r2, [sp, #32]
 8004b76:	1a9d      	subs	r5, r3, r2
 8004b78:	2d00      	cmp	r5, #0
 8004b7a:	dd3a      	ble.n	8004bf2 <_svfprintf_r+0x5b2>
 8004b7c:	2d10      	cmp	r5, #16
 8004b7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004b80:	4f4e      	ldr	r7, [pc, #312]	; (8004cbc <_svfprintf_r+0x67c>)
 8004b82:	dd23      	ble.n	8004bcc <_svfprintf_r+0x58c>
 8004b84:	4622      	mov	r2, r4
 8004b86:	2610      	movs	r6, #16
 8004b88:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004b8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004b8e:	e004      	b.n	8004b9a <_svfprintf_r+0x55a>
 8004b90:	3d10      	subs	r5, #16
 8004b92:	2d10      	cmp	r5, #16
 8004b94:	f109 0908 	add.w	r9, r9, #8
 8004b98:	dd17      	ble.n	8004bca <_svfprintf_r+0x58a>
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	4947      	ldr	r1, [pc, #284]	; (8004cbc <_svfprintf_r+0x67c>)
 8004b9e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004ba0:	3210      	adds	r2, #16
 8004ba2:	2b07      	cmp	r3, #7
 8004ba4:	9229      	str	r2, [sp, #164]	; 0xa4
 8004ba6:	e889 0042 	stmia.w	r9, {r1, r6}
 8004baa:	ddf1      	ble.n	8004b90 <_svfprintf_r+0x550>
 8004bac:	aa27      	add	r2, sp, #156	; 0x9c
 8004bae:	4621      	mov	r1, r4
 8004bb0:	4658      	mov	r0, fp
 8004bb2:	f005 fa5b 	bl	800a06c <__ssprint_r>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	f47f ae3c 	bne.w	8004834 <_svfprintf_r+0x1f4>
 8004bbc:	3d10      	subs	r5, #16
 8004bbe:	2d10      	cmp	r5, #16
 8004bc0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004bc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004bc4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004bc8:	dce7      	bgt.n	8004b9a <_svfprintf_r+0x55a>
 8004bca:	4614      	mov	r4, r2
 8004bcc:	3301      	adds	r3, #1
 8004bce:	442c      	add	r4, r5
 8004bd0:	2b07      	cmp	r3, #7
 8004bd2:	9429      	str	r4, [sp, #164]	; 0xa4
 8004bd4:	9328      	str	r3, [sp, #160]	; 0xa0
 8004bd6:	f8c9 7000 	str.w	r7, [r9]
 8004bda:	f8c9 5004 	str.w	r5, [r9, #4]
 8004bde:	dd08      	ble.n	8004bf2 <_svfprintf_r+0x5b2>
 8004be0:	aa27      	add	r2, sp, #156	; 0x9c
 8004be2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004be4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004be6:	f005 fa41 	bl	800a06c <__ssprint_r>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	f47f ae22 	bne.w	8004834 <_svfprintf_r+0x1f4>
 8004bf0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bf6:	9908      	ldr	r1, [sp, #32]
 8004bf8:	428a      	cmp	r2, r1
 8004bfa:	bfac      	ite	ge
 8004bfc:	189b      	addge	r3, r3, r2
 8004bfe:	185b      	addlt	r3, r3, r1
 8004c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c02:	2c00      	cmp	r4, #0
 8004c04:	f040 82df 	bne.w	80051c6 <_svfprintf_r+0xb86>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	9328      	str	r3, [sp, #160]	; 0xa0
 8004c0c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004c10:	e53d      	b.n	800468e <_svfprintf_r+0x4e>
 8004c12:	9311      	str	r3, [sp, #68]	; 0x44
 8004c14:	46ab      	mov	fp, r5
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	f041 806a 	bne.w	8005cf0 <_svfprintf_r+0x16b0>
 8004c1c:	9b07      	ldr	r3, [sp, #28]
 8004c1e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004c20:	071a      	lsls	r2, r3, #28
 8004c22:	f107 0707 	add.w	r7, r7, #7
 8004c26:	f140 8576 	bpl.w	8005716 <_svfprintf_r+0x10d6>
 8004c2a:	f027 0307 	bic.w	r3, r7, #7
 8004c2e:	ed93 7b00 	vldr	d7, [r3]
 8004c32:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004c36:	f103 0208 	add.w	r2, r3, #8
 8004c3a:	920e      	str	r2, [sp, #56]	; 0x38
 8004c3c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8004c40:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8004c44:	911a      	str	r1, [sp, #104]	; 0x68
 8004c46:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c48:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8004c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c50:	4620      	mov	r0, r4
 8004c52:	4629      	mov	r1, r5
 8004c54:	4b1b      	ldr	r3, [pc, #108]	; (8004cc4 <_svfprintf_r+0x684>)
 8004c56:	f7ff fa35 	bl	80040c4 <__aeabi_dcmpun>
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	f040 84da 	bne.w	8005614 <_svfprintf_r+0xfd4>
 8004c60:	f04f 32ff 	mov.w	r2, #4294967295
 8004c64:	4b17      	ldr	r3, [pc, #92]	; (8004cc4 <_svfprintf_r+0x684>)
 8004c66:	4620      	mov	r0, r4
 8004c68:	4629      	mov	r1, r5
 8004c6a:	f7ff fa0d 	bl	8004088 <__aeabi_dcmple>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	f040 84d0 	bne.w	8005614 <_svfprintf_r+0xfd4>
 8004c74:	2200      	movs	r2, #0
 8004c76:	2300      	movs	r3, #0
 8004c78:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004c7c:	f7ff f9fa 	bl	8004074 <__aeabi_dcmplt>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	f040 875a 	bne.w	8005b3a <_svfprintf_r+0x14fa>
 8004c86:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004c8a:	4e0f      	ldr	r6, [pc, #60]	; (8004cc8 <_svfprintf_r+0x688>)
 8004c8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <_svfprintf_r+0x68c>)
 8004c8e:	9907      	ldr	r1, [sp, #28]
 8004c90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004c94:	9107      	str	r1, [sp, #28]
 8004c96:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004c98:	2203      	movs	r2, #3
 8004c9a:	f04f 0b00 	mov.w	fp, #0
 8004c9e:	9208      	str	r2, [sp, #32]
 8004ca0:	2947      	cmp	r1, #71	; 0x47
 8004ca2:	bfd8      	it	le
 8004ca4:	461e      	movle	r6, r3
 8004ca6:	920d      	str	r2, [sp, #52]	; 0x34
 8004ca8:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8004cac:	e69a      	b.n	80049e4 <_svfprintf_r+0x3a4>
 8004cae:	9b07      	ldr	r3, [sp, #28]
 8004cb0:	f043 0308 	orr.w	r3, r3, #8
 8004cb4:	9307      	str	r3, [sp, #28]
 8004cb6:	f898 3000 	ldrb.w	r3, [r8]
 8004cba:	e51b      	b.n	80046f4 <_svfprintf_r+0xb4>
 8004cbc:	0800abd0 	.word	0x0800abd0
 8004cc0:	0800ab7c 	.word	0x0800ab7c
 8004cc4:	7fefffff 	.word	0x7fefffff
 8004cc8:	0800ab90 	.word	0x0800ab90
 8004ccc:	0800ab8c 	.word	0x0800ab8c
 8004cd0:	9311      	str	r3, [sp, #68]	; 0x44
 8004cd2:	46ab      	mov	fp, r5
 8004cd4:	2a00      	cmp	r2, #0
 8004cd6:	f041 8017 	bne.w	8005d08 <_svfprintf_r+0x16c8>
 8004cda:	9b07      	ldr	r3, [sp, #28]
 8004cdc:	f043 0310 	orr.w	r3, r3, #16
 8004ce0:	9307      	str	r3, [sp, #28]
 8004ce2:	9a07      	ldr	r2, [sp, #28]
 8004ce4:	f012 0320 	ands.w	r3, r2, #32
 8004ce8:	f47f adba 	bne.w	8004860 <_svfprintf_r+0x220>
 8004cec:	9907      	ldr	r1, [sp, #28]
 8004cee:	f011 0210 	ands.w	r2, r1, #16
 8004cf2:	f000 845b 	beq.w	80055ac <_svfprintf_r+0xf6c>
 8004cf6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004cf8:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004cfc:	f1bb 0f00 	cmp.w	fp, #0
 8004d00:	6804      	ldr	r4, [r0, #0]
 8004d02:	f100 0704 	add.w	r7, r0, #4
 8004d06:	f04f 0500 	mov.w	r5, #0
 8004d0a:	f2c0 851b 	blt.w	8005744 <_svfprintf_r+0x1104>
 8004d0e:	460a      	mov	r2, r1
 8004d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d14:	9207      	str	r2, [sp, #28]
 8004d16:	ea54 0205 	orrs.w	r2, r4, r5
 8004d1a:	970e      	str	r7, [sp, #56]	; 0x38
 8004d1c:	f000 813a 	beq.w	8004f94 <_svfprintf_r+0x954>
 8004d20:	461f      	mov	r7, r3
 8004d22:	e5b3      	b.n	800488c <_svfprintf_r+0x24c>
 8004d24:	9311      	str	r3, [sp, #68]	; 0x44
 8004d26:	46ab      	mov	fp, r5
 8004d28:	2a00      	cmp	r2, #0
 8004d2a:	f040 87e9 	bne.w	8005d00 <_svfprintf_r+0x16c0>
 8004d2e:	9b07      	ldr	r3, [sp, #28]
 8004d30:	f043 0310 	orr.w	r3, r3, #16
 8004d34:	9307      	str	r3, [sp, #28]
 8004d36:	9a07      	ldr	r2, [sp, #28]
 8004d38:	f012 0320 	ands.w	r3, r2, #32
 8004d3c:	f000 832c 	beq.w	8005398 <_svfprintf_r+0xd58>
 8004d40:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004d42:	3707      	adds	r7, #7
 8004d44:	f027 0307 	bic.w	r3, r7, #7
 8004d48:	2700      	movs	r7, #0
 8004d4a:	f103 0108 	add.w	r1, r3, #8
 8004d4e:	45bb      	cmp	fp, r7
 8004d50:	910e      	str	r1, [sp, #56]	; 0x38
 8004d52:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004d56:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004d5a:	f2c0 8356 	blt.w	800540a <_svfprintf_r+0xdca>
 8004d5e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004d62:	9307      	str	r3, [sp, #28]
 8004d64:	ea54 0305 	orrs.w	r3, r4, r5
 8004d68:	f47f ae18 	bne.w	800499c <_svfprintf_r+0x35c>
 8004d6c:	f1bb 0f00 	cmp.w	fp, #0
 8004d70:	f000 80f5 	beq.w	8004f5e <_svfprintf_r+0x91e>
 8004d74:	2400      	movs	r4, #0
 8004d76:	ae44      	add	r6, sp, #272	; 0x110
 8004d78:	3430      	adds	r4, #48	; 0x30
 8004d7a:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8004d7e:	e627      	b.n	80049d0 <_svfprintf_r+0x390>
 8004d80:	9311      	str	r3, [sp, #68]	; 0x44
 8004d82:	46ab      	mov	fp, r5
 8004d84:	2a00      	cmp	r2, #0
 8004d86:	f040 87b7 	bne.w	8005cf8 <_svfprintf_r+0x16b8>
 8004d8a:	9b07      	ldr	r3, [sp, #28]
 8004d8c:	48af      	ldr	r0, [pc, #700]	; (800504c <_svfprintf_r+0xa0c>)
 8004d8e:	069d      	lsls	r5, r3, #26
 8004d90:	f140 80b5 	bpl.w	8004efe <_svfprintf_r+0x8be>
 8004d94:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004d96:	3707      	adds	r7, #7
 8004d98:	f027 0307 	bic.w	r3, r7, #7
 8004d9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004da0:	f103 0208 	add.w	r2, r3, #8
 8004da4:	920e      	str	r2, [sp, #56]	; 0x38
 8004da6:	9a07      	ldr	r2, [sp, #28]
 8004da8:	f012 0701 	ands.w	r7, r2, #1
 8004dac:	f000 8239 	beq.w	8005222 <_svfprintf_r+0xbe2>
 8004db0:	ea54 0305 	orrs.w	r3, r4, r5
 8004db4:	f000 8504 	beq.w	80057c0 <_svfprintf_r+0x1180>
 8004db8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8004dbc:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8004dc0:	2700      	movs	r7, #0
 8004dc2:	9a07      	ldr	r2, [sp, #28]
 8004dc4:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004dc8:	2330      	movs	r3, #48	; 0x30
 8004dca:	45bb      	cmp	fp, r7
 8004dcc:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8004dd0:	f042 0302 	orr.w	r3, r2, #2
 8004dd4:	f2c0 86b6 	blt.w	8005b44 <_svfprintf_r+0x1504>
 8004dd8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004ddc:	f043 0302 	orr.w	r3, r3, #2
 8004de0:	9307      	str	r3, [sp, #28]
 8004de2:	ae34      	add	r6, sp, #208	; 0xd0
 8004de4:	0923      	lsrs	r3, r4, #4
 8004de6:	f004 010f 	and.w	r1, r4, #15
 8004dea:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8004dee:	092a      	lsrs	r2, r5, #4
 8004df0:	461c      	mov	r4, r3
 8004df2:	4615      	mov	r5, r2
 8004df4:	5c43      	ldrb	r3, [r0, r1]
 8004df6:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8004dfa:	ea54 0305 	orrs.w	r3, r4, r5
 8004dfe:	d1f1      	bne.n	8004de4 <_svfprintf_r+0x7a4>
 8004e00:	e5e6      	b.n	80049d0 <_svfprintf_r+0x390>
 8004e02:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004e04:	9311      	str	r3, [sp, #68]	; 0x44
 8004e06:	680a      	ldr	r2, [r1, #0]
 8004e08:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	460a      	mov	r2, r1
 8004e10:	461f      	mov	r7, r3
 8004e12:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004e16:	3204      	adds	r2, #4
 8004e18:	2301      	movs	r3, #1
 8004e1a:	9308      	str	r3, [sp, #32]
 8004e1c:	46bb      	mov	fp, r7
 8004e1e:	9713      	str	r7, [sp, #76]	; 0x4c
 8004e20:	920e      	str	r2, [sp, #56]	; 0x38
 8004e22:	930d      	str	r3, [sp, #52]	; 0x34
 8004e24:	ae2a      	add	r6, sp, #168	; 0xa8
 8004e26:	e5e1      	b.n	80049ec <_svfprintf_r+0x3ac>
 8004e28:	9311      	str	r3, [sp, #68]	; 0x44
 8004e2a:	46ab      	mov	fp, r5
 8004e2c:	2a00      	cmp	r2, #0
 8004e2e:	f43f ad93 	beq.w	8004958 <_svfprintf_r+0x318>
 8004e32:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004e36:	e58f      	b.n	8004958 <_svfprintf_r+0x318>
 8004e38:	9b07      	ldr	r3, [sp, #28]
 8004e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e3e:	9307      	str	r3, [sp, #28]
 8004e40:	f898 3000 	ldrb.w	r3, [r8]
 8004e44:	e456      	b.n	80046f4 <_svfprintf_r+0xb4>
 8004e46:	f898 3000 	ldrb.w	r3, [r8]
 8004e4a:	2900      	cmp	r1, #0
 8004e4c:	f47f ac52 	bne.w	80046f4 <_svfprintf_r+0xb4>
 8004e50:	2201      	movs	r2, #1
 8004e52:	2120      	movs	r1, #32
 8004e54:	e44e      	b.n	80046f4 <_svfprintf_r+0xb4>
 8004e56:	9b07      	ldr	r3, [sp, #28]
 8004e58:	f043 0301 	orr.w	r3, r3, #1
 8004e5c:	9307      	str	r3, [sp, #28]
 8004e5e:	f898 3000 	ldrb.w	r3, [r8]
 8004e62:	e447      	b.n	80046f4 <_svfprintf_r+0xb4>
 8004e64:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	930c      	str	r3, [sp, #48]	; 0x30
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	4623      	mov	r3, r4
 8004e70:	f103 0304 	add.w	r3, r3, #4
 8004e74:	f6ff aca0 	blt.w	80047b8 <_svfprintf_r+0x178>
 8004e78:	930e      	str	r3, [sp, #56]	; 0x38
 8004e7a:	f898 3000 	ldrb.w	r3, [r8]
 8004e7e:	e439      	b.n	80046f4 <_svfprintf_r+0xb4>
 8004e80:	f898 3000 	ldrb.w	r3, [r8]
 8004e84:	2201      	movs	r2, #1
 8004e86:	212b      	movs	r1, #43	; 0x2b
 8004e88:	e434      	b.n	80046f4 <_svfprintf_r+0xb4>
 8004e8a:	9b07      	ldr	r3, [sp, #28]
 8004e8c:	f043 0320 	orr.w	r3, r3, #32
 8004e90:	9307      	str	r3, [sp, #28]
 8004e92:	f898 3000 	ldrb.w	r3, [r8]
 8004e96:	e42d      	b.n	80046f4 <_svfprintf_r+0xb4>
 8004e98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e9a:	9311      	str	r3, [sp, #68]	; 0x44
 8004e9c:	6816      	ldr	r6, [r2, #0]
 8004e9e:	2400      	movs	r4, #0
 8004ea0:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 8004ea4:	1d17      	adds	r7, r2, #4
 8004ea6:	2e00      	cmp	r6, #0
 8004ea8:	f000 8621 	beq.w	8005aee <_svfprintf_r+0x14ae>
 8004eac:	2d00      	cmp	r5, #0
 8004eae:	f2c0 8566 	blt.w	800597e <_svfprintf_r+0x133e>
 8004eb2:	462a      	mov	r2, r5
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	f004 faca 	bl	8009450 <memchr>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	f000 866b 	beq.w	8005b98 <_svfprintf_r+0x1558>
 8004ec2:	1b83      	subs	r3, r0, r6
 8004ec4:	930d      	str	r3, [sp, #52]	; 0x34
 8004ec6:	46a3      	mov	fp, r4
 8004ec8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004ecc:	970e      	str	r7, [sp, #56]	; 0x38
 8004ece:	9308      	str	r3, [sp, #32]
 8004ed0:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8004ed4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004ed8:	e584      	b.n	80049e4 <_svfprintf_r+0x3a4>
 8004eda:	9311      	str	r3, [sp, #68]	; 0x44
 8004edc:	46ab      	mov	fp, r5
 8004ede:	2a00      	cmp	r2, #0
 8004ee0:	f43f af29 	beq.w	8004d36 <_svfprintf_r+0x6f6>
 8004ee4:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004ee8:	e725      	b.n	8004d36 <_svfprintf_r+0x6f6>
 8004eea:	9311      	str	r3, [sp, #68]	; 0x44
 8004eec:	46ab      	mov	fp, r5
 8004eee:	2a00      	cmp	r2, #0
 8004ef0:	f040 8716 	bne.w	8005d20 <_svfprintf_r+0x16e0>
 8004ef4:	9b07      	ldr	r3, [sp, #28]
 8004ef6:	4856      	ldr	r0, [pc, #344]	; (8005050 <_svfprintf_r+0xa10>)
 8004ef8:	069d      	lsls	r5, r3, #26
 8004efa:	f53f af4b 	bmi.w	8004d94 <_svfprintf_r+0x754>
 8004efe:	9b07      	ldr	r3, [sp, #28]
 8004f00:	06dc      	lsls	r4, r3, #27
 8004f02:	f140 8440 	bpl.w	8005786 <_svfprintf_r+0x1146>
 8004f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f08:	4613      	mov	r3, r2
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	6814      	ldr	r4, [r2, #0]
 8004f0e:	930e      	str	r3, [sp, #56]	; 0x38
 8004f10:	2500      	movs	r5, #0
 8004f12:	e748      	b.n	8004da6 <_svfprintf_r+0x766>
 8004f14:	f898 3000 	ldrb.w	r3, [r8]
 8004f18:	2b6c      	cmp	r3, #108	; 0x6c
 8004f1a:	f000 84c4 	beq.w	80058a6 <_svfprintf_r+0x1266>
 8004f1e:	9807      	ldr	r0, [sp, #28]
 8004f20:	f040 0010 	orr.w	r0, r0, #16
 8004f24:	9007      	str	r0, [sp, #28]
 8004f26:	f7ff bbe5 	b.w	80046f4 <_svfprintf_r+0xb4>
 8004f2a:	2a00      	cmp	r2, #0
 8004f2c:	f040 86f4 	bne.w	8005d18 <_svfprintf_r+0x16d8>
 8004f30:	9b07      	ldr	r3, [sp, #28]
 8004f32:	069b      	lsls	r3, r3, #26
 8004f34:	f140 8357 	bpl.w	80055e6 <_svfprintf_r+0xfa6>
 8004f38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f3c:	6813      	ldr	r3, [r2, #0]
 8004f3e:	17cd      	asrs	r5, r1, #31
 8004f40:	4608      	mov	r0, r1
 8004f42:	3204      	adds	r2, #4
 8004f44:	4629      	mov	r1, r5
 8004f46:	920e      	str	r2, [sp, #56]	; 0x38
 8004f48:	e9c3 0100 	strd	r0, r1, [r3]
 8004f4c:	f7ff bb9f 	b.w	800468e <_svfprintf_r+0x4e>
 8004f50:	483f      	ldr	r0, [pc, #252]	; (8005050 <_svfprintf_r+0xa10>)
 8004f52:	9211      	str	r2, [sp, #68]	; 0x44
 8004f54:	f1bb 0f00 	cmp.w	fp, #0
 8004f58:	f040 8174 	bne.w	8005244 <_svfprintf_r+0xc04>
 8004f5c:	465f      	mov	r7, fp
 8004f5e:	f04f 0b00 	mov.w	fp, #0
 8004f62:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8004f66:	ae34      	add	r6, sp, #208	; 0xd0
 8004f68:	e535      	b.n	80049d6 <_svfprintf_r+0x396>
 8004f6a:	9311      	str	r3, [sp, #68]	; 0x44
 8004f6c:	2a00      	cmp	r2, #0
 8004f6e:	f040 86cf 	bne.w	8005d10 <_svfprintf_r+0x16d0>
 8004f72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004f74:	2a00      	cmp	r2, #0
 8004f76:	f43f ac56 	beq.w	8004826 <_svfprintf_r+0x1e6>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	461f      	mov	r7, r3
 8004f80:	9108      	str	r1, [sp, #32]
 8004f82:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8004f86:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004f8a:	469b      	mov	fp, r3
 8004f8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f8e:	910d      	str	r1, [sp, #52]	; 0x34
 8004f90:	ae2a      	add	r6, sp, #168	; 0xa8
 8004f92:	e52b      	b.n	80049ec <_svfprintf_r+0x3ac>
 8004f94:	f1bb 0f00 	cmp.w	fp, #0
 8004f98:	f000 8616 	beq.w	8005bc8 <_svfprintf_r+0x1588>
 8004f9c:	2700      	movs	r7, #0
 8004f9e:	2400      	movs	r4, #0
 8004fa0:	2500      	movs	r5, #0
 8004fa2:	e473      	b.n	800488c <_svfprintf_r+0x24c>
 8004fa4:	482a      	ldr	r0, [pc, #168]	; (8005050 <_svfprintf_r+0xa10>)
 8004fa6:	9307      	str	r3, [sp, #28]
 8004fa8:	9211      	str	r2, [sp, #68]	; 0x44
 8004faa:	ea54 0305 	orrs.w	r3, r4, r5
 8004fae:	970e      	str	r7, [sp, #56]	; 0x38
 8004fb0:	f04f 0700 	mov.w	r7, #0
 8004fb4:	f47f af15 	bne.w	8004de2 <_svfprintf_r+0x7a2>
 8004fb8:	2400      	movs	r4, #0
 8004fba:	2500      	movs	r5, #0
 8004fbc:	e711      	b.n	8004de2 <_svfprintf_r+0x7a2>
 8004fbe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004fc0:	e564      	b.n	8004a8c <_svfprintf_r+0x44c>
 8004fc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fc4:	2b65      	cmp	r3, #101	; 0x65
 8004fc6:	f340 80aa 	ble.w	800511e <_svfprintf_r+0xade>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004fd2:	f7ff f845 	bl	8004060 <__aeabi_dcmpeq>
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	f000 8136 	beq.w	8005248 <_svfprintf_r+0xc08>
 8004fdc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004fde:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <_svfprintf_r+0xa14>)
 8004fe0:	f8c9 2000 	str.w	r2, [r9]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	3401      	adds	r4, #1
 8004fe8:	2201      	movs	r2, #1
 8004fea:	2b07      	cmp	r3, #7
 8004fec:	9429      	str	r4, [sp, #164]	; 0xa4
 8004fee:	9328      	str	r3, [sp, #160]	; 0xa0
 8004ff0:	f8c9 2004 	str.w	r2, [r9, #4]
 8004ff4:	f300 83f0 	bgt.w	80057d8 <_svfprintf_r+0x1198>
 8004ff8:	f109 0908 	add.w	r9, r9, #8
 8004ffc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ffe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005000:	4293      	cmp	r3, r2
 8005002:	db03      	blt.n	800500c <_svfprintf_r+0x9cc>
 8005004:	9b07      	ldr	r3, [sp, #28]
 8005006:	07db      	lsls	r3, r3, #31
 8005008:	f57f adb0 	bpl.w	8004b6c <_svfprintf_r+0x52c>
 800500c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800500e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005010:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005012:	f8c9 2000 	str.w	r2, [r9]
 8005016:	3301      	adds	r3, #1
 8005018:	440c      	add	r4, r1
 800501a:	2b07      	cmp	r3, #7
 800501c:	9429      	str	r4, [sp, #164]	; 0xa4
 800501e:	f8c9 1004 	str.w	r1, [r9, #4]
 8005022:	9328      	str	r3, [sp, #160]	; 0xa0
 8005024:	f300 8449 	bgt.w	80058ba <_svfprintf_r+0x127a>
 8005028:	f109 0908 	add.w	r9, r9, #8
 800502c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800502e:	1e5d      	subs	r5, r3, #1
 8005030:	2d00      	cmp	r5, #0
 8005032:	f77f ad9b 	ble.w	8004b6c <_svfprintf_r+0x52c>
 8005036:	4a08      	ldr	r2, [pc, #32]	; (8005058 <_svfprintf_r+0xa18>)
 8005038:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800503a:	920f      	str	r2, [sp, #60]	; 0x3c
 800503c:	2d10      	cmp	r5, #16
 800503e:	f340 81e9 	ble.w	8005414 <_svfprintf_r+0xdd4>
 8005042:	2610      	movs	r6, #16
 8005044:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005046:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800504a:	e00d      	b.n	8005068 <_svfprintf_r+0xa28>
 800504c:	0800ab9c 	.word	0x0800ab9c
 8005050:	0800abb0 	.word	0x0800abb0
 8005054:	0800abcc 	.word	0x0800abcc
 8005058:	0800ab7c 	.word	0x0800ab7c
 800505c:	f109 0908 	add.w	r9, r9, #8
 8005060:	3d10      	subs	r5, #16
 8005062:	2d10      	cmp	r5, #16
 8005064:	f340 81d6 	ble.w	8005414 <_svfprintf_r+0xdd4>
 8005068:	3301      	adds	r3, #1
 800506a:	3410      	adds	r4, #16
 800506c:	2b07      	cmp	r3, #7
 800506e:	9429      	str	r4, [sp, #164]	; 0xa4
 8005070:	9328      	str	r3, [sp, #160]	; 0xa0
 8005072:	f8c9 a000 	str.w	sl, [r9]
 8005076:	f8c9 6004 	str.w	r6, [r9, #4]
 800507a:	ddef      	ble.n	800505c <_svfprintf_r+0xa1c>
 800507c:	aa27      	add	r2, sp, #156	; 0x9c
 800507e:	4659      	mov	r1, fp
 8005080:	4638      	mov	r0, r7
 8005082:	f004 fff3 	bl	800a06c <__ssprint_r>
 8005086:	2800      	cmp	r0, #0
 8005088:	f47f abd4 	bne.w	8004834 <_svfprintf_r+0x1f4>
 800508c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800508e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005090:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005094:	e7e4      	b.n	8005060 <_svfprintf_r+0xa20>
 8005096:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005098:	9a08      	ldr	r2, [sp, #32]
 800509a:	1a9f      	subs	r7, r3, r2
 800509c:	2f00      	cmp	r7, #0
 800509e:	f77f ad19 	ble.w	8004ad4 <_svfprintf_r+0x494>
 80050a2:	4abc      	ldr	r2, [pc, #752]	; (8005394 <_svfprintf_r+0xd54>)
 80050a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80050a6:	920f      	str	r2, [sp, #60]	; 0x3c
 80050a8:	2f10      	cmp	r7, #16
 80050aa:	dd2b      	ble.n	8005104 <_svfprintf_r+0xac4>
 80050ac:	464a      	mov	r2, r9
 80050ae:	4621      	mov	r1, r4
 80050b0:	46b9      	mov	r9, r7
 80050b2:	2510      	movs	r5, #16
 80050b4:	4637      	mov	r7, r6
 80050b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80050b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80050ba:	e006      	b.n	80050ca <_svfprintf_r+0xa8a>
 80050bc:	f1a9 0910 	sub.w	r9, r9, #16
 80050c0:	f1b9 0f10 	cmp.w	r9, #16
 80050c4:	f102 0208 	add.w	r2, r2, #8
 80050c8:	dd18      	ble.n	80050fc <_svfprintf_r+0xabc>
 80050ca:	3301      	adds	r3, #1
 80050cc:	3110      	adds	r1, #16
 80050ce:	2b07      	cmp	r3, #7
 80050d0:	9129      	str	r1, [sp, #164]	; 0xa4
 80050d2:	9328      	str	r3, [sp, #160]	; 0xa0
 80050d4:	f8c2 a000 	str.w	sl, [r2]
 80050d8:	6055      	str	r5, [r2, #4]
 80050da:	ddef      	ble.n	80050bc <_svfprintf_r+0xa7c>
 80050dc:	aa27      	add	r2, sp, #156	; 0x9c
 80050de:	4631      	mov	r1, r6
 80050e0:	4620      	mov	r0, r4
 80050e2:	f004 ffc3 	bl	800a06c <__ssprint_r>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	f47f aba4 	bne.w	8004834 <_svfprintf_r+0x1f4>
 80050ec:	f1a9 0910 	sub.w	r9, r9, #16
 80050f0:	f1b9 0f10 	cmp.w	r9, #16
 80050f4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80050f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80050f8:	aa34      	add	r2, sp, #208	; 0xd0
 80050fa:	dce6      	bgt.n	80050ca <_svfprintf_r+0xa8a>
 80050fc:	463e      	mov	r6, r7
 80050fe:	460c      	mov	r4, r1
 8005100:	464f      	mov	r7, r9
 8005102:	4691      	mov	r9, r2
 8005104:	3301      	adds	r3, #1
 8005106:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005108:	9328      	str	r3, [sp, #160]	; 0xa0
 800510a:	443c      	add	r4, r7
 800510c:	2b07      	cmp	r3, #7
 800510e:	9429      	str	r4, [sp, #164]	; 0xa4
 8005110:	e889 0084 	stmia.w	r9, {r2, r7}
 8005114:	f300 823d 	bgt.w	8005592 <_svfprintf_r+0xf52>
 8005118:	f109 0908 	add.w	r9, r9, #8
 800511c:	e4da      	b.n	8004ad4 <_svfprintf_r+0x494>
 800511e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005120:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8005122:	2b01      	cmp	r3, #1
 8005124:	f340 820a 	ble.w	800553c <_svfprintf_r+0xefc>
 8005128:	3501      	adds	r5, #1
 800512a:	3401      	adds	r4, #1
 800512c:	2301      	movs	r3, #1
 800512e:	2d07      	cmp	r5, #7
 8005130:	9429      	str	r4, [sp, #164]	; 0xa4
 8005132:	9528      	str	r5, [sp, #160]	; 0xa0
 8005134:	f8c9 6000 	str.w	r6, [r9]
 8005138:	f8c9 3004 	str.w	r3, [r9, #4]
 800513c:	f300 820f 	bgt.w	800555e <_svfprintf_r+0xf1e>
 8005140:	f109 0908 	add.w	r9, r9, #8
 8005144:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005146:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005148:	f8c9 3000 	str.w	r3, [r9]
 800514c:	3501      	adds	r5, #1
 800514e:	4414      	add	r4, r2
 8005150:	2d07      	cmp	r5, #7
 8005152:	9429      	str	r4, [sp, #164]	; 0xa4
 8005154:	9528      	str	r5, [sp, #160]	; 0xa0
 8005156:	f8c9 2004 	str.w	r2, [r9, #4]
 800515a:	f300 820d 	bgt.w	8005578 <_svfprintf_r+0xf38>
 800515e:	f109 0908 	add.w	r9, r9, #8
 8005162:	2300      	movs	r3, #0
 8005164:	2200      	movs	r2, #0
 8005166:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800516a:	f7fe ff79 	bl	8004060 <__aeabi_dcmpeq>
 800516e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005170:	2800      	cmp	r0, #0
 8005172:	f040 80c3 	bne.w	80052fc <_svfprintf_r+0xcbc>
 8005176:	3b01      	subs	r3, #1
 8005178:	3501      	adds	r5, #1
 800517a:	3601      	adds	r6, #1
 800517c:	441c      	add	r4, r3
 800517e:	2d07      	cmp	r5, #7
 8005180:	9528      	str	r5, [sp, #160]	; 0xa0
 8005182:	9429      	str	r4, [sp, #164]	; 0xa4
 8005184:	f8c9 6000 	str.w	r6, [r9]
 8005188:	f8c9 3004 	str.w	r3, [r9, #4]
 800518c:	f300 80f5 	bgt.w	800537a <_svfprintf_r+0xd3a>
 8005190:	f109 0908 	add.w	r9, r9, #8
 8005194:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005196:	f8c9 2004 	str.w	r2, [r9, #4]
 800519a:	3501      	adds	r5, #1
 800519c:	4414      	add	r4, r2
 800519e:	ab23      	add	r3, sp, #140	; 0x8c
 80051a0:	2d07      	cmp	r5, #7
 80051a2:	9429      	str	r4, [sp, #164]	; 0xa4
 80051a4:	9528      	str	r5, [sp, #160]	; 0xa0
 80051a6:	f8c9 3000 	str.w	r3, [r9]
 80051aa:	f77f acdd 	ble.w	8004b68 <_svfprintf_r+0x528>
 80051ae:	aa27      	add	r2, sp, #156	; 0x9c
 80051b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051b4:	f004 ff5a 	bl	800a06c <__ssprint_r>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	f47f ab3b 	bne.w	8004834 <_svfprintf_r+0x1f4>
 80051be:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80051c0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80051c4:	e4d2      	b.n	8004b6c <_svfprintf_r+0x52c>
 80051c6:	aa27      	add	r2, sp, #156	; 0x9c
 80051c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051cc:	f004 ff4e 	bl	800a06c <__ssprint_r>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	f43f ad19 	beq.w	8004c08 <_svfprintf_r+0x5c8>
 80051d6:	f7ff bb2d 	b.w	8004834 <_svfprintf_r+0x1f4>
 80051da:	aa27      	add	r2, sp, #156	; 0x9c
 80051dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051e0:	f004 ff44 	bl	800a06c <__ssprint_r>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	f47f ab25 	bne.w	8004834 <_svfprintf_r+0x1f4>
 80051ea:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80051ec:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80051f0:	e4a9      	b.n	8004b46 <_svfprintf_r+0x506>
 80051f2:	aa27      	add	r2, sp, #156	; 0x9c
 80051f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051f8:	f004 ff38 	bl	800a06c <__ssprint_r>
 80051fc:	2800      	cmp	r0, #0
 80051fe:	f47f ab19 	bne.w	8004834 <_svfprintf_r+0x1f4>
 8005202:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005204:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005208:	e450      	b.n	8004aac <_svfprintf_r+0x46c>
 800520a:	aa27      	add	r2, sp, #156	; 0x9c
 800520c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800520e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005210:	f004 ff2c 	bl	800a06c <__ssprint_r>
 8005214:	2800      	cmp	r0, #0
 8005216:	f47f ab0d 	bne.w	8004834 <_svfprintf_r+0x1f4>
 800521a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800521c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005220:	e454      	b.n	8004acc <_svfprintf_r+0x48c>
 8005222:	f1bb 0f00 	cmp.w	fp, #0
 8005226:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800522a:	f2c0 82e1 	blt.w	80057f0 <_svfprintf_r+0x11b0>
 800522e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8005232:	9307      	str	r3, [sp, #28]
 8005234:	ea54 0305 	orrs.w	r3, r4, r5
 8005238:	f47f add3 	bne.w	8004de2 <_svfprintf_r+0x7a2>
 800523c:	f1bb 0f00 	cmp.w	fp, #0
 8005240:	f43f ae8c 	beq.w	8004f5c <_svfprintf_r+0x91c>
 8005244:	2700      	movs	r7, #0
 8005246:	e6b7      	b.n	8004fb8 <_svfprintf_r+0x978>
 8005248:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800524a:	2d00      	cmp	r5, #0
 800524c:	f340 82d3 	ble.w	80057f6 <_svfprintf_r+0x11b6>
 8005250:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005252:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005254:	4293      	cmp	r3, r2
 8005256:	bfa8      	it	ge
 8005258:	4613      	movge	r3, r2
 800525a:	2b00      	cmp	r3, #0
 800525c:	461d      	mov	r5, r3
 800525e:	dd0d      	ble.n	800527c <_svfprintf_r+0xc3c>
 8005260:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005262:	f8c9 6000 	str.w	r6, [r9]
 8005266:	3301      	adds	r3, #1
 8005268:	442c      	add	r4, r5
 800526a:	2b07      	cmp	r3, #7
 800526c:	9429      	str	r4, [sp, #164]	; 0xa4
 800526e:	f8c9 5004 	str.w	r5, [r9, #4]
 8005272:	9328      	str	r3, [sp, #160]	; 0xa0
 8005274:	f300 83ae 	bgt.w	80059d4 <_svfprintf_r+0x1394>
 8005278:	f109 0908 	add.w	r9, r9, #8
 800527c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800527e:	2d00      	cmp	r5, #0
 8005280:	bfa8      	it	ge
 8005282:	1b5b      	subge	r3, r3, r5
 8005284:	2b00      	cmp	r3, #0
 8005286:	461d      	mov	r5, r3
 8005288:	f340 80f8 	ble.w	800547c <_svfprintf_r+0xe3c>
 800528c:	4a41      	ldr	r2, [pc, #260]	; (8005394 <_svfprintf_r+0xd54>)
 800528e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005290:	920f      	str	r2, [sp, #60]	; 0x3c
 8005292:	2d10      	cmp	r5, #16
 8005294:	f340 8285 	ble.w	80057a2 <_svfprintf_r+0x1162>
 8005298:	4622      	mov	r2, r4
 800529a:	2710      	movs	r7, #16
 800529c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80052a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80052a2:	e005      	b.n	80052b0 <_svfprintf_r+0xc70>
 80052a4:	f109 0908 	add.w	r9, r9, #8
 80052a8:	3d10      	subs	r5, #16
 80052aa:	2d10      	cmp	r5, #16
 80052ac:	f340 8278 	ble.w	80057a0 <_svfprintf_r+0x1160>
 80052b0:	3301      	adds	r3, #1
 80052b2:	3210      	adds	r2, #16
 80052b4:	2b07      	cmp	r3, #7
 80052b6:	9229      	str	r2, [sp, #164]	; 0xa4
 80052b8:	9328      	str	r3, [sp, #160]	; 0xa0
 80052ba:	f8c9 a000 	str.w	sl, [r9]
 80052be:	f8c9 7004 	str.w	r7, [r9, #4]
 80052c2:	ddef      	ble.n	80052a4 <_svfprintf_r+0xc64>
 80052c4:	aa27      	add	r2, sp, #156	; 0x9c
 80052c6:	4621      	mov	r1, r4
 80052c8:	4658      	mov	r0, fp
 80052ca:	f004 fecf 	bl	800a06c <__ssprint_r>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	f47f aab0 	bne.w	8004834 <_svfprintf_r+0x1f4>
 80052d4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80052d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80052d8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80052dc:	e7e4      	b.n	80052a8 <_svfprintf_r+0xc68>
 80052de:	aa27      	add	r2, sp, #156	; 0x9c
 80052e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80052e4:	f004 fec2 	bl	800a06c <__ssprint_r>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	f47f aaa3 	bne.w	8004834 <_svfprintf_r+0x1f4>
 80052ee:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80052f2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80052f4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80052f8:	f7ff bbc8 	b.w	8004a8c <_svfprintf_r+0x44c>
 80052fc:	1e5e      	subs	r6, r3, #1
 80052fe:	2e00      	cmp	r6, #0
 8005300:	f77f af48 	ble.w	8005194 <_svfprintf_r+0xb54>
 8005304:	4b23      	ldr	r3, [pc, #140]	; (8005394 <_svfprintf_r+0xd54>)
 8005306:	930f      	str	r3, [sp, #60]	; 0x3c
 8005308:	2e10      	cmp	r6, #16
 800530a:	dd2c      	ble.n	8005366 <_svfprintf_r+0xd26>
 800530c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8005310:	2710      	movs	r7, #16
 8005312:	46b0      	mov	r8, r6
 8005314:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005318:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800531a:	e006      	b.n	800532a <_svfprintf_r+0xcea>
 800531c:	f1a8 0810 	sub.w	r8, r8, #16
 8005320:	f1b8 0f10 	cmp.w	r8, #16
 8005324:	f109 0908 	add.w	r9, r9, #8
 8005328:	dd1a      	ble.n	8005360 <_svfprintf_r+0xd20>
 800532a:	3501      	adds	r5, #1
 800532c:	3410      	adds	r4, #16
 800532e:	2d07      	cmp	r5, #7
 8005330:	9429      	str	r4, [sp, #164]	; 0xa4
 8005332:	9528      	str	r5, [sp, #160]	; 0xa0
 8005334:	f8c9 a000 	str.w	sl, [r9]
 8005338:	f8c9 7004 	str.w	r7, [r9, #4]
 800533c:	ddee      	ble.n	800531c <_svfprintf_r+0xcdc>
 800533e:	aa27      	add	r2, sp, #156	; 0x9c
 8005340:	4631      	mov	r1, r6
 8005342:	4658      	mov	r0, fp
 8005344:	f004 fe92 	bl	800a06c <__ssprint_r>
 8005348:	2800      	cmp	r0, #0
 800534a:	f47f aa73 	bne.w	8004834 <_svfprintf_r+0x1f4>
 800534e:	f1a8 0810 	sub.w	r8, r8, #16
 8005352:	f1b8 0f10 	cmp.w	r8, #16
 8005356:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005358:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800535a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800535e:	dce4      	bgt.n	800532a <_svfprintf_r+0xcea>
 8005360:	4646      	mov	r6, r8
 8005362:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8005366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005368:	3501      	adds	r5, #1
 800536a:	4434      	add	r4, r6
 800536c:	2d07      	cmp	r5, #7
 800536e:	9429      	str	r4, [sp, #164]	; 0xa4
 8005370:	9528      	str	r5, [sp, #160]	; 0xa0
 8005372:	e889 0048 	stmia.w	r9, {r3, r6}
 8005376:	f77f af0b 	ble.w	8005190 <_svfprintf_r+0xb50>
 800537a:	aa27      	add	r2, sp, #156	; 0x9c
 800537c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800537e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005380:	f004 fe74 	bl	800a06c <__ssprint_r>
 8005384:	2800      	cmp	r0, #0
 8005386:	f47f aa55 	bne.w	8004834 <_svfprintf_r+0x1f4>
 800538a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800538c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800538e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005392:	e6ff      	b.n	8005194 <_svfprintf_r+0xb54>
 8005394:	0800ab7c 	.word	0x0800ab7c
 8005398:	9907      	ldr	r1, [sp, #28]
 800539a:	f011 0210 	ands.w	r2, r1, #16
 800539e:	f000 81d5 	beq.w	800574c <_svfprintf_r+0x110c>
 80053a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80053a4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80053a8:	f1bb 0f00 	cmp.w	fp, #0
 80053ac:	6804      	ldr	r4, [r0, #0]
 80053ae:	f100 0704 	add.w	r7, r0, #4
 80053b2:	f04f 0500 	mov.w	r5, #0
 80053b6:	db26      	blt.n	8005406 <_svfprintf_r+0xdc6>
 80053b8:	460a      	mov	r2, r1
 80053ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053be:	9207      	str	r2, [sp, #28]
 80053c0:	ea54 0205 	orrs.w	r2, r4, r5
 80053c4:	970e      	str	r7, [sp, #56]	; 0x38
 80053c6:	461f      	mov	r7, r3
 80053c8:	f47f aae8 	bne.w	800499c <_svfprintf_r+0x35c>
 80053cc:	e4ce      	b.n	8004d6c <_svfprintf_r+0x72c>
 80053ce:	9b07      	ldr	r3, [sp, #28]
 80053d0:	06d8      	lsls	r0, r3, #27
 80053d2:	d42a      	bmi.n	800542a <_svfprintf_r+0xdea>
 80053d4:	9b07      	ldr	r3, [sp, #28]
 80053d6:	0659      	lsls	r1, r3, #25
 80053d8:	d527      	bpl.n	800542a <_svfprintf_r+0xdea>
 80053da:	990e      	ldr	r1, [sp, #56]	; 0x38
 80053dc:	f9b1 4000 	ldrsh.w	r4, [r1]
 80053e0:	3104      	adds	r1, #4
 80053e2:	17e5      	asrs	r5, r4, #31
 80053e4:	4622      	mov	r2, r4
 80053e6:	462b      	mov	r3, r5
 80053e8:	910e      	str	r1, [sp, #56]	; 0x38
 80053ea:	f7ff bac4 	b.w	8004976 <_svfprintf_r+0x336>
 80053ee:	990e      	ldr	r1, [sp, #56]	; 0x38
 80053f0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80053f4:	f1bb 0f00 	cmp.w	fp, #0
 80053f8:	680c      	ldr	r4, [r1, #0]
 80053fa:	f101 0704 	add.w	r7, r1, #4
 80053fe:	f04f 0500 	mov.w	r5, #0
 8005402:	f280 824e 	bge.w	80058a2 <_svfprintf_r+0x1262>
 8005406:	970e      	str	r7, [sp, #56]	; 0x38
 8005408:	461f      	mov	r7, r3
 800540a:	ea54 0305 	orrs.w	r3, r4, r5
 800540e:	f47f aac5 	bne.w	800499c <_svfprintf_r+0x35c>
 8005412:	e4b0      	b.n	8004d76 <_svfprintf_r+0x736>
 8005414:	3301      	adds	r3, #1
 8005416:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005418:	9328      	str	r3, [sp, #160]	; 0xa0
 800541a:	442c      	add	r4, r5
 800541c:	2b07      	cmp	r3, #7
 800541e:	9429      	str	r4, [sp, #164]	; 0xa4
 8005420:	e889 0024 	stmia.w	r9, {r2, r5}
 8005424:	f77f aba0 	ble.w	8004b68 <_svfprintf_r+0x528>
 8005428:	e6c1      	b.n	80051ae <_svfprintf_r+0xb6e>
 800542a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800542c:	6814      	ldr	r4, [r2, #0]
 800542e:	4613      	mov	r3, r2
 8005430:	3304      	adds	r3, #4
 8005432:	17e5      	asrs	r5, r4, #31
 8005434:	4622      	mov	r2, r4
 8005436:	930e      	str	r3, [sp, #56]	; 0x38
 8005438:	2a00      	cmp	r2, #0
 800543a:	462b      	mov	r3, r5
 800543c:	f173 0300 	sbcs.w	r3, r3, #0
 8005440:	f6bf aa9e 	bge.w	8004980 <_svfprintf_r+0x340>
 8005444:	4264      	negs	r4, r4
 8005446:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800544a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800544e:	f1bb 0f00 	cmp.w	fp, #0
 8005452:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005456:	f6ff aaa1 	blt.w	800499c <_svfprintf_r+0x35c>
 800545a:	9b07      	ldr	r3, [sp, #28]
 800545c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005460:	9307      	str	r3, [sp, #28]
 8005462:	f7ff ba9b 	b.w	800499c <_svfprintf_r+0x35c>
 8005466:	aa27      	add	r2, sp, #156	; 0x9c
 8005468:	9909      	ldr	r1, [sp, #36]	; 0x24
 800546a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800546c:	f004 fdfe 	bl	800a06c <__ssprint_r>
 8005470:	2800      	cmp	r0, #0
 8005472:	f47f a9df 	bne.w	8004834 <_svfprintf_r+0x1f4>
 8005476:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005478:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800547c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800547e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005480:	4432      	add	r2, r6
 8005482:	4617      	mov	r7, r2
 8005484:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005486:	4293      	cmp	r3, r2
 8005488:	db47      	blt.n	800551a <_svfprintf_r+0xeda>
 800548a:	9a07      	ldr	r2, [sp, #28]
 800548c:	07d5      	lsls	r5, r2, #31
 800548e:	d444      	bmi.n	800551a <_svfprintf_r+0xeda>
 8005490:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005492:	440e      	add	r6, r1
 8005494:	1bf5      	subs	r5, r6, r7
 8005496:	1acb      	subs	r3, r1, r3
 8005498:	429d      	cmp	r5, r3
 800549a:	bfa8      	it	ge
 800549c:	461d      	movge	r5, r3
 800549e:	2d00      	cmp	r5, #0
 80054a0:	462e      	mov	r6, r5
 80054a2:	dd0d      	ble.n	80054c0 <_svfprintf_r+0xe80>
 80054a4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80054a6:	f8c9 7000 	str.w	r7, [r9]
 80054aa:	3201      	adds	r2, #1
 80054ac:	442c      	add	r4, r5
 80054ae:	2a07      	cmp	r2, #7
 80054b0:	9429      	str	r4, [sp, #164]	; 0xa4
 80054b2:	f8c9 5004 	str.w	r5, [r9, #4]
 80054b6:	9228      	str	r2, [sp, #160]	; 0xa0
 80054b8:	f300 830a 	bgt.w	8005ad0 <_svfprintf_r+0x1490>
 80054bc:	f109 0908 	add.w	r9, r9, #8
 80054c0:	2e00      	cmp	r6, #0
 80054c2:	bfac      	ite	ge
 80054c4:	1b9d      	subge	r5, r3, r6
 80054c6:	461d      	movlt	r5, r3
 80054c8:	2d00      	cmp	r5, #0
 80054ca:	f77f ab4f 	ble.w	8004b6c <_svfprintf_r+0x52c>
 80054ce:	4abb      	ldr	r2, [pc, #748]	; (80057bc <_svfprintf_r+0x117c>)
 80054d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80054d2:	920f      	str	r2, [sp, #60]	; 0x3c
 80054d4:	2d10      	cmp	r5, #16
 80054d6:	dd9d      	ble.n	8005414 <_svfprintf_r+0xdd4>
 80054d8:	2610      	movs	r6, #16
 80054da:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80054dc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80054e0:	e004      	b.n	80054ec <_svfprintf_r+0xeac>
 80054e2:	f109 0908 	add.w	r9, r9, #8
 80054e6:	3d10      	subs	r5, #16
 80054e8:	2d10      	cmp	r5, #16
 80054ea:	dd93      	ble.n	8005414 <_svfprintf_r+0xdd4>
 80054ec:	3301      	adds	r3, #1
 80054ee:	3410      	adds	r4, #16
 80054f0:	2b07      	cmp	r3, #7
 80054f2:	9429      	str	r4, [sp, #164]	; 0xa4
 80054f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80054f6:	f8c9 a000 	str.w	sl, [r9]
 80054fa:	f8c9 6004 	str.w	r6, [r9, #4]
 80054fe:	ddf0      	ble.n	80054e2 <_svfprintf_r+0xea2>
 8005500:	aa27      	add	r2, sp, #156	; 0x9c
 8005502:	4659      	mov	r1, fp
 8005504:	4638      	mov	r0, r7
 8005506:	f004 fdb1 	bl	800a06c <__ssprint_r>
 800550a:	2800      	cmp	r0, #0
 800550c:	f47f a992 	bne.w	8004834 <_svfprintf_r+0x1f4>
 8005510:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005512:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005514:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005518:	e7e5      	b.n	80054e6 <_svfprintf_r+0xea6>
 800551a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800551c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800551e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005520:	f8c9 1000 	str.w	r1, [r9]
 8005524:	3201      	adds	r2, #1
 8005526:	4404      	add	r4, r0
 8005528:	2a07      	cmp	r2, #7
 800552a:	9429      	str	r4, [sp, #164]	; 0xa4
 800552c:	f8c9 0004 	str.w	r0, [r9, #4]
 8005530:	9228      	str	r2, [sp, #160]	; 0xa0
 8005532:	f300 82b9 	bgt.w	8005aa8 <_svfprintf_r+0x1468>
 8005536:	f109 0908 	add.w	r9, r9, #8
 800553a:	e7a9      	b.n	8005490 <_svfprintf_r+0xe50>
 800553c:	9b07      	ldr	r3, [sp, #28]
 800553e:	07d8      	lsls	r0, r3, #31
 8005540:	f53f adf2 	bmi.w	8005128 <_svfprintf_r+0xae8>
 8005544:	3501      	adds	r5, #1
 8005546:	3401      	adds	r4, #1
 8005548:	2301      	movs	r3, #1
 800554a:	2d07      	cmp	r5, #7
 800554c:	9429      	str	r4, [sp, #164]	; 0xa4
 800554e:	9528      	str	r5, [sp, #160]	; 0xa0
 8005550:	f8c9 6000 	str.w	r6, [r9]
 8005554:	f8c9 3004 	str.w	r3, [r9, #4]
 8005558:	f77f ae1a 	ble.w	8005190 <_svfprintf_r+0xb50>
 800555c:	e70d      	b.n	800537a <_svfprintf_r+0xd3a>
 800555e:	aa27      	add	r2, sp, #156	; 0x9c
 8005560:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005562:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005564:	f004 fd82 	bl	800a06c <__ssprint_r>
 8005568:	2800      	cmp	r0, #0
 800556a:	f47f a963 	bne.w	8004834 <_svfprintf_r+0x1f4>
 800556e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005570:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8005572:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005576:	e5e5      	b.n	8005144 <_svfprintf_r+0xb04>
 8005578:	aa27      	add	r2, sp, #156	; 0x9c
 800557a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800557c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800557e:	f004 fd75 	bl	800a06c <__ssprint_r>
 8005582:	2800      	cmp	r0, #0
 8005584:	f47f a956 	bne.w	8004834 <_svfprintf_r+0x1f4>
 8005588:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800558a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800558c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005590:	e5e7      	b.n	8005162 <_svfprintf_r+0xb22>
 8005592:	aa27      	add	r2, sp, #156	; 0x9c
 8005594:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005596:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005598:	f004 fd68 	bl	800a06c <__ssprint_r>
 800559c:	2800      	cmp	r0, #0
 800559e:	f47f a949 	bne.w	8004834 <_svfprintf_r+0x1f4>
 80055a2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80055a4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80055a8:	f7ff ba94 	b.w	8004ad4 <_svfprintf_r+0x494>
 80055ac:	9907      	ldr	r1, [sp, #28]
 80055ae:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80055b2:	f000 80bb 	beq.w	800572c <_svfprintf_r+0x10ec>
 80055b6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80055b8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80055bc:	4603      	mov	r3, r0
 80055be:	f1bb 0f00 	cmp.w	fp, #0
 80055c2:	f103 0304 	add.w	r3, r3, #4
 80055c6:	8804      	ldrh	r4, [r0, #0]
 80055c8:	f04f 0500 	mov.w	r5, #0
 80055cc:	f2c0 81c5 	blt.w	800595a <_svfprintf_r+0x131a>
 80055d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80055d4:	9107      	str	r1, [sp, #28]
 80055d6:	ea54 0105 	orrs.w	r1, r4, r5
 80055da:	930e      	str	r3, [sp, #56]	; 0x38
 80055dc:	f43f acda 	beq.w	8004f94 <_svfprintf_r+0x954>
 80055e0:	4617      	mov	r7, r2
 80055e2:	f7ff b953 	b.w	800488c <_svfprintf_r+0x24c>
 80055e6:	9b07      	ldr	r3, [sp, #28]
 80055e8:	06df      	lsls	r7, r3, #27
 80055ea:	d40b      	bmi.n	8005604 <_svfprintf_r+0xfc4>
 80055ec:	9b07      	ldr	r3, [sp, #28]
 80055ee:	065e      	lsls	r6, r3, #25
 80055f0:	d508      	bpl.n	8005604 <_svfprintf_r+0xfc4>
 80055f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055f4:	6813      	ldr	r3, [r2, #0]
 80055f6:	3204      	adds	r2, #4
 80055f8:	920e      	str	r2, [sp, #56]	; 0x38
 80055fa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80055fe:	801a      	strh	r2, [r3, #0]
 8005600:	f7ff b845 	b.w	800468e <_svfprintf_r+0x4e>
 8005604:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005606:	6813      	ldr	r3, [r2, #0]
 8005608:	3204      	adds	r2, #4
 800560a:	920e      	str	r2, [sp, #56]	; 0x38
 800560c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	f7ff b83d 	b.w	800468e <_svfprintf_r+0x4e>
 8005614:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	f7fe fd52 	bl	80040c4 <__aeabi_dcmpun>
 8005620:	2800      	cmp	r0, #0
 8005622:	f040 8305 	bne.w	8005c30 <_svfprintf_r+0x15f0>
 8005626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005628:	f1bb 3fff 	cmp.w	fp, #4294967295
 800562c:	f023 0720 	bic.w	r7, r3, #32
 8005630:	f000 826c 	beq.w	8005b0c <_svfprintf_r+0x14cc>
 8005634:	2f47      	cmp	r7, #71	; 0x47
 8005636:	f000 8187 	beq.w	8005948 <_svfprintf_r+0x1308>
 800563a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800563c:	9a07      	ldr	r2, [sp, #28]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005644:	920f      	str	r2, [sp, #60]	; 0x3c
 8005646:	f2c0 8280 	blt.w	8005b4a <_svfprintf_r+0x150a>
 800564a:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 800564e:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8005652:	2300      	movs	r3, #0
 8005654:	9308      	str	r3, [sp, #32]
 8005656:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005658:	2b66      	cmp	r3, #102	; 0x66
 800565a:	f000 825a 	beq.w	8005b12 <_svfprintf_r+0x14d2>
 800565e:	2b46      	cmp	r3, #70	; 0x46
 8005660:	f000 8147 	beq.w	80058f2 <_svfprintf_r+0x12b2>
 8005664:	2f45      	cmp	r7, #69	; 0x45
 8005666:	bf0c      	ite	eq
 8005668:	f10b 0501 	addeq.w	r5, fp, #1
 800566c:	465d      	movne	r5, fp
 800566e:	a825      	add	r0, sp, #148	; 0x94
 8005670:	a922      	add	r1, sp, #136	; 0x88
 8005672:	aa21      	add	r2, sp, #132	; 0x84
 8005674:	2302      	movs	r3, #2
 8005676:	9004      	str	r0, [sp, #16]
 8005678:	9202      	str	r2, [sp, #8]
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	9501      	str	r5, [sp, #4]
 800567e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005682:	9103      	str	r1, [sp, #12]
 8005684:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005686:	f002 f847 	bl	8007718 <_dtoa_r>
 800568a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800568c:	2b67      	cmp	r3, #103	; 0x67
 800568e:	4606      	mov	r6, r0
 8005690:	f040 8271 	bne.w	8005b76 <_svfprintf_r+0x1536>
 8005694:	9b07      	ldr	r3, [sp, #28]
 8005696:	07da      	lsls	r2, r3, #31
 8005698:	f140 82bf 	bpl.w	8005c1a <_svfprintf_r+0x15da>
 800569c:	1974      	adds	r4, r6, r5
 800569e:	2200      	movs	r2, #0
 80056a0:	2300      	movs	r3, #0
 80056a2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80056a6:	f7fe fcdb 	bl	8004060 <__aeabi_dcmpeq>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	f040 8190 	bne.w	80059d0 <_svfprintf_r+0x1390>
 80056b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80056b2:	429c      	cmp	r4, r3
 80056b4:	d906      	bls.n	80056c4 <_svfprintf_r+0x1084>
 80056b6:	2130      	movs	r1, #48	; 0x30
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	9225      	str	r2, [sp, #148]	; 0x94
 80056bc:	7019      	strb	r1, [r3, #0]
 80056be:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80056c0:	429c      	cmp	r4, r3
 80056c2:	d8f9      	bhi.n	80056b8 <_svfprintf_r+0x1078>
 80056c4:	1b9b      	subs	r3, r3, r6
 80056c6:	2f47      	cmp	r7, #71	; 0x47
 80056c8:	9312      	str	r3, [sp, #72]	; 0x48
 80056ca:	f000 817a 	beq.w	80059c2 <_svfprintf_r+0x1382>
 80056ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056d0:	2b65      	cmp	r3, #101	; 0x65
 80056d2:	f340 825f 	ble.w	8005b94 <_svfprintf_r+0x1554>
 80056d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056d8:	2b66      	cmp	r3, #102	; 0x66
 80056da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80056de:	f000 8266 	beq.w	8005bae <_svfprintf_r+0x156e>
 80056e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80056e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80056e6:	428a      	cmp	r2, r1
 80056e8:	f2c0 8238 	blt.w	8005b5c <_svfprintf_r+0x151c>
 80056ec:	9b07      	ldr	r3, [sp, #28]
 80056ee:	07d9      	lsls	r1, r3, #31
 80056f0:	f100 8295 	bmi.w	8005c1e <_svfprintf_r+0x15de>
 80056f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80056f8:	920d      	str	r2, [sp, #52]	; 0x34
 80056fa:	2267      	movs	r2, #103	; 0x67
 80056fc:	9211      	str	r2, [sp, #68]	; 0x44
 80056fe:	9a08      	ldr	r2, [sp, #32]
 8005700:	2a00      	cmp	r2, #0
 8005702:	f040 8132 	bne.w	800596a <_svfprintf_r+0x132a>
 8005706:	9308      	str	r3, [sp, #32]
 8005708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800570a:	9307      	str	r3, [sp, #28]
 800570c:	4693      	mov	fp, r2
 800570e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005712:	f7ff b967 	b.w	80049e4 <_svfprintf_r+0x3a4>
 8005716:	f027 0707 	bic.w	r7, r7, #7
 800571a:	ed97 7b00 	vldr	d7, [r7]
 800571e:	f107 0308 	add.w	r3, r7, #8
 8005722:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005726:	930e      	str	r3, [sp, #56]	; 0x38
 8005728:	f7ff ba88 	b.w	8004c3c <_svfprintf_r+0x5fc>
 800572c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800572e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005732:	f1bb 0f00 	cmp.w	fp, #0
 8005736:	680c      	ldr	r4, [r1, #0]
 8005738:	f101 0704 	add.w	r7, r1, #4
 800573c:	f04f 0500 	mov.w	r5, #0
 8005740:	f280 80ac 	bge.w	800589c <_svfprintf_r+0x125c>
 8005744:	970e      	str	r7, [sp, #56]	; 0x38
 8005746:	2700      	movs	r7, #0
 8005748:	f7ff b8a0 	b.w	800488c <_svfprintf_r+0x24c>
 800574c:	9907      	ldr	r1, [sp, #28]
 800574e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8005752:	f43f ae4c 	beq.w	80053ee <_svfprintf_r+0xdae>
 8005756:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005758:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800575c:	4603      	mov	r3, r0
 800575e:	f1bb 0f00 	cmp.w	fp, #0
 8005762:	f103 0304 	add.w	r3, r3, #4
 8005766:	8804      	ldrh	r4, [r0, #0]
 8005768:	f04f 0500 	mov.w	r5, #0
 800576c:	f2c0 80f2 	blt.w	8005954 <_svfprintf_r+0x1314>
 8005770:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005774:	9107      	str	r1, [sp, #28]
 8005776:	ea54 0105 	orrs.w	r1, r4, r5
 800577a:	930e      	str	r3, [sp, #56]	; 0x38
 800577c:	4617      	mov	r7, r2
 800577e:	f47f a90d 	bne.w	800499c <_svfprintf_r+0x35c>
 8005782:	f7ff baf3 	b.w	8004d6c <_svfprintf_r+0x72c>
 8005786:	9b07      	ldr	r3, [sp, #28]
 8005788:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800578a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800578e:	4613      	mov	r3, r2
 8005790:	f000 80e5 	beq.w	800595e <_svfprintf_r+0x131e>
 8005794:	3304      	adds	r3, #4
 8005796:	8814      	ldrh	r4, [r2, #0]
 8005798:	930e      	str	r3, [sp, #56]	; 0x38
 800579a:	2500      	movs	r5, #0
 800579c:	f7ff bb03 	b.w	8004da6 <_svfprintf_r+0x766>
 80057a0:	4614      	mov	r4, r2
 80057a2:	3301      	adds	r3, #1
 80057a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057a6:	9328      	str	r3, [sp, #160]	; 0xa0
 80057a8:	442c      	add	r4, r5
 80057aa:	2b07      	cmp	r3, #7
 80057ac:	9429      	str	r4, [sp, #164]	; 0xa4
 80057ae:	e889 0024 	stmia.w	r9, {r2, r5}
 80057b2:	f73f ae58 	bgt.w	8005466 <_svfprintf_r+0xe26>
 80057b6:	f109 0908 	add.w	r9, r9, #8
 80057ba:	e65f      	b.n	800547c <_svfprintf_r+0xe3c>
 80057bc:	0800ab7c 	.word	0x0800ab7c
 80057c0:	2700      	movs	r7, #0
 80057c2:	45bb      	cmp	fp, r7
 80057c4:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80057c8:	f6ff abf6 	blt.w	8004fb8 <_svfprintf_r+0x978>
 80057cc:	9b07      	ldr	r3, [sp, #28]
 80057ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d2:	9307      	str	r3, [sp, #28]
 80057d4:	f7ff bbbe 	b.w	8004f54 <_svfprintf_r+0x914>
 80057d8:	aa27      	add	r2, sp, #156	; 0x9c
 80057da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80057de:	f004 fc45 	bl	800a06c <__ssprint_r>
 80057e2:	2800      	cmp	r0, #0
 80057e4:	f47f a826 	bne.w	8004834 <_svfprintf_r+0x1f4>
 80057e8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80057ea:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80057ee:	e405      	b.n	8004ffc <_svfprintf_r+0x9bc>
 80057f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80057f2:	f7ff bbda 	b.w	8004faa <_svfprintf_r+0x96a>
 80057f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80057f8:	4ab2      	ldr	r2, [pc, #712]	; (8005ac4 <_svfprintf_r+0x1484>)
 80057fa:	f8c9 2000 	str.w	r2, [r9]
 80057fe:	3301      	adds	r3, #1
 8005800:	3401      	adds	r4, #1
 8005802:	2201      	movs	r2, #1
 8005804:	2b07      	cmp	r3, #7
 8005806:	9429      	str	r4, [sp, #164]	; 0xa4
 8005808:	9328      	str	r3, [sp, #160]	; 0xa0
 800580a:	f8c9 2004 	str.w	r2, [r9, #4]
 800580e:	f300 808e 	bgt.w	800592e <_svfprintf_r+0x12ee>
 8005812:	f109 0908 	add.w	r9, r9, #8
 8005816:	b92d      	cbnz	r5, 8005824 <_svfprintf_r+0x11e4>
 8005818:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800581a:	b91b      	cbnz	r3, 8005824 <_svfprintf_r+0x11e4>
 800581c:	9b07      	ldr	r3, [sp, #28]
 800581e:	07df      	lsls	r7, r3, #31
 8005820:	f57f a9a4 	bpl.w	8004b6c <_svfprintf_r+0x52c>
 8005824:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005826:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005828:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800582a:	f8c9 2000 	str.w	r2, [r9]
 800582e:	3301      	adds	r3, #1
 8005830:	440c      	add	r4, r1
 8005832:	2b07      	cmp	r3, #7
 8005834:	9429      	str	r4, [sp, #164]	; 0xa4
 8005836:	f8c9 1004 	str.w	r1, [r9, #4]
 800583a:	9328      	str	r3, [sp, #160]	; 0xa0
 800583c:	f300 81d3 	bgt.w	8005be6 <_svfprintf_r+0x15a6>
 8005840:	f109 0908 	add.w	r9, r9, #8
 8005844:	426d      	negs	r5, r5
 8005846:	2d00      	cmp	r5, #0
 8005848:	f340 80ad 	ble.w	80059a6 <_svfprintf_r+0x1366>
 800584c:	4a9e      	ldr	r2, [pc, #632]	; (8005ac8 <_svfprintf_r+0x1488>)
 800584e:	920f      	str	r2, [sp, #60]	; 0x3c
 8005850:	2d10      	cmp	r5, #16
 8005852:	f340 80cc 	ble.w	80059ee <_svfprintf_r+0x13ae>
 8005856:	4622      	mov	r2, r4
 8005858:	2710      	movs	r7, #16
 800585a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800585e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005860:	e005      	b.n	800586e <_svfprintf_r+0x122e>
 8005862:	f109 0908 	add.w	r9, r9, #8
 8005866:	3d10      	subs	r5, #16
 8005868:	2d10      	cmp	r5, #16
 800586a:	f340 80bf 	ble.w	80059ec <_svfprintf_r+0x13ac>
 800586e:	3301      	adds	r3, #1
 8005870:	3210      	adds	r2, #16
 8005872:	2b07      	cmp	r3, #7
 8005874:	9229      	str	r2, [sp, #164]	; 0xa4
 8005876:	9328      	str	r3, [sp, #160]	; 0xa0
 8005878:	f8c9 a000 	str.w	sl, [r9]
 800587c:	f8c9 7004 	str.w	r7, [r9, #4]
 8005880:	ddef      	ble.n	8005862 <_svfprintf_r+0x1222>
 8005882:	aa27      	add	r2, sp, #156	; 0x9c
 8005884:	4621      	mov	r1, r4
 8005886:	4658      	mov	r0, fp
 8005888:	f004 fbf0 	bl	800a06c <__ssprint_r>
 800588c:	2800      	cmp	r0, #0
 800588e:	f47e afd1 	bne.w	8004834 <_svfprintf_r+0x1f4>
 8005892:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005894:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005896:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800589a:	e7e4      	b.n	8005866 <_svfprintf_r+0x1226>
 800589c:	9a07      	ldr	r2, [sp, #28]
 800589e:	f7ff ba37 	b.w	8004d10 <_svfprintf_r+0x6d0>
 80058a2:	9a07      	ldr	r2, [sp, #28]
 80058a4:	e589      	b.n	80053ba <_svfprintf_r+0xd7a>
 80058a6:	9b07      	ldr	r3, [sp, #28]
 80058a8:	f043 0320 	orr.w	r3, r3, #32
 80058ac:	9307      	str	r3, [sp, #28]
 80058ae:	f108 0801 	add.w	r8, r8, #1
 80058b2:	f898 3000 	ldrb.w	r3, [r8]
 80058b6:	f7fe bf1d 	b.w	80046f4 <_svfprintf_r+0xb4>
 80058ba:	aa27      	add	r2, sp, #156	; 0x9c
 80058bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80058c0:	f004 fbd4 	bl	800a06c <__ssprint_r>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	f47e afb5 	bne.w	8004834 <_svfprintf_r+0x1f4>
 80058ca:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80058cc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80058d0:	f7ff bbac 	b.w	800502c <_svfprintf_r+0x9ec>
 80058d4:	2140      	movs	r1, #64	; 0x40
 80058d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80058d8:	f003 fae8 	bl	8008eac <_malloc_r>
 80058dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058de:	6010      	str	r0, [r2, #0]
 80058e0:	6110      	str	r0, [r2, #16]
 80058e2:	2800      	cmp	r0, #0
 80058e4:	f000 81f9 	beq.w	8005cda <_svfprintf_r+0x169a>
 80058e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058ea:	2340      	movs	r3, #64	; 0x40
 80058ec:	6153      	str	r3, [r2, #20]
 80058ee:	f7fe bebe 	b.w	800466e <_svfprintf_r+0x2e>
 80058f2:	a825      	add	r0, sp, #148	; 0x94
 80058f4:	a922      	add	r1, sp, #136	; 0x88
 80058f6:	aa21      	add	r2, sp, #132	; 0x84
 80058f8:	2303      	movs	r3, #3
 80058fa:	9004      	str	r0, [sp, #16]
 80058fc:	9202      	str	r2, [sp, #8]
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	f8cd b004 	str.w	fp, [sp, #4]
 8005904:	9103      	str	r1, [sp, #12]
 8005906:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800590a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800590c:	f001 ff04 	bl	8007718 <_dtoa_r>
 8005910:	465d      	mov	r5, fp
 8005912:	4606      	mov	r6, r0
 8005914:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005916:	2b46      	cmp	r3, #70	; 0x46
 8005918:	eb06 0405 	add.w	r4, r6, r5
 800591c:	f47f aebf 	bne.w	800569e <_svfprintf_r+0x105e>
 8005920:	7833      	ldrb	r3, [r6, #0]
 8005922:	2b30      	cmp	r3, #48	; 0x30
 8005924:	f000 818a 	beq.w	8005c3c <_svfprintf_r+0x15fc>
 8005928:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800592a:	442c      	add	r4, r5
 800592c:	e6b7      	b.n	800569e <_svfprintf_r+0x105e>
 800592e:	aa27      	add	r2, sp, #156	; 0x9c
 8005930:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005932:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005934:	f004 fb9a 	bl	800a06c <__ssprint_r>
 8005938:	2800      	cmp	r0, #0
 800593a:	f47e af7b 	bne.w	8004834 <_svfprintf_r+0x1f4>
 800593e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005940:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005942:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005946:	e766      	b.n	8005816 <_svfprintf_r+0x11d6>
 8005948:	f1bb 0f00 	cmp.w	fp, #0
 800594c:	bf08      	it	eq
 800594e:	f04f 0b01 	moveq.w	fp, #1
 8005952:	e672      	b.n	800563a <_svfprintf_r+0xffa>
 8005954:	930e      	str	r3, [sp, #56]	; 0x38
 8005956:	4617      	mov	r7, r2
 8005958:	e557      	b.n	800540a <_svfprintf_r+0xdca>
 800595a:	930e      	str	r3, [sp, #56]	; 0x38
 800595c:	e6f3      	b.n	8005746 <_svfprintf_r+0x1106>
 800595e:	3304      	adds	r3, #4
 8005960:	6814      	ldr	r4, [r2, #0]
 8005962:	930e      	str	r3, [sp, #56]	; 0x38
 8005964:	2500      	movs	r5, #0
 8005966:	f7ff ba1e 	b.w	8004da6 <_svfprintf_r+0x766>
 800596a:	272d      	movs	r7, #45	; 0x2d
 800596c:	9308      	str	r3, [sp, #32]
 800596e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005970:	9307      	str	r3, [sp, #28]
 8005972:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005976:	f04f 0b00 	mov.w	fp, #0
 800597a:	f7ff b834 	b.w	80049e6 <_svfprintf_r+0x3a6>
 800597e:	4630      	mov	r0, r6
 8005980:	f7fe fd9e 	bl	80044c0 <strlen>
 8005984:	46a3      	mov	fp, r4
 8005986:	4603      	mov	r3, r0
 8005988:	900d      	str	r0, [sp, #52]	; 0x34
 800598a:	f7ff ba9d 	b.w	8004ec8 <_svfprintf_r+0x888>
 800598e:	aa27      	add	r2, sp, #156	; 0x9c
 8005990:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005992:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005994:	f004 fb6a 	bl	800a06c <__ssprint_r>
 8005998:	2800      	cmp	r0, #0
 800599a:	f47e af4b 	bne.w	8004834 <_svfprintf_r+0x1f4>
 800599e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80059a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80059a2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80059a6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80059a8:	f8c9 6000 	str.w	r6, [r9]
 80059ac:	3301      	adds	r3, #1
 80059ae:	440c      	add	r4, r1
 80059b0:	2b07      	cmp	r3, #7
 80059b2:	9429      	str	r4, [sp, #164]	; 0xa4
 80059b4:	9328      	str	r3, [sp, #160]	; 0xa0
 80059b6:	f8c9 1004 	str.w	r1, [r9, #4]
 80059ba:	f77f a8d5 	ble.w	8004b68 <_svfprintf_r+0x528>
 80059be:	f7ff bbf6 	b.w	80051ae <_svfprintf_r+0xb6e>
 80059c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059c4:	1cdd      	adds	r5, r3, #3
 80059c6:	db1e      	blt.n	8005a06 <_svfprintf_r+0x13c6>
 80059c8:	459b      	cmp	fp, r3
 80059ca:	db1c      	blt.n	8005a06 <_svfprintf_r+0x13c6>
 80059cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80059ce:	e688      	b.n	80056e2 <_svfprintf_r+0x10a2>
 80059d0:	4623      	mov	r3, r4
 80059d2:	e677      	b.n	80056c4 <_svfprintf_r+0x1084>
 80059d4:	aa27      	add	r2, sp, #156	; 0x9c
 80059d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80059da:	f004 fb47 	bl	800a06c <__ssprint_r>
 80059de:	2800      	cmp	r0, #0
 80059e0:	f47e af28 	bne.w	8004834 <_svfprintf_r+0x1f4>
 80059e4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80059e6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80059ea:	e447      	b.n	800527c <_svfprintf_r+0xc3c>
 80059ec:	4614      	mov	r4, r2
 80059ee:	3301      	adds	r3, #1
 80059f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059f2:	9328      	str	r3, [sp, #160]	; 0xa0
 80059f4:	442c      	add	r4, r5
 80059f6:	2b07      	cmp	r3, #7
 80059f8:	9429      	str	r4, [sp, #164]	; 0xa4
 80059fa:	e889 0024 	stmia.w	r9, {r2, r5}
 80059fe:	dcc6      	bgt.n	800598e <_svfprintf_r+0x134e>
 8005a00:	f109 0908 	add.w	r9, r9, #8
 8005a04:	e7cf      	b.n	80059a6 <_svfprintf_r+0x1366>
 8005a06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005a08:	3a02      	subs	r2, #2
 8005a0a:	9211      	str	r2, [sp, #68]	; 0x44
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8005a14:	9321      	str	r3, [sp, #132]	; 0x84
 8005a16:	bfb8      	it	lt
 8005a18:	425b      	neglt	r3, r3
 8005a1a:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8005a1e:	bfb4      	ite	lt
 8005a20:	222d      	movlt	r2, #45	; 0x2d
 8005a22:	222b      	movge	r2, #43	; 0x2b
 8005a24:	2b09      	cmp	r3, #9
 8005a26:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8005a2a:	f340 80ee 	ble.w	8005c0a <_svfprintf_r+0x15ca>
 8005a2e:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 8005a32:	4604      	mov	r4, r0
 8005a34:	4a25      	ldr	r2, [pc, #148]	; (8005acc <_svfprintf_r+0x148c>)
 8005a36:	fb82 2103 	smull	r2, r1, r2, r3
 8005a3a:	17da      	asrs	r2, r3, #31
 8005a3c:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8005a40:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005a44:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8005a48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a4c:	2a09      	cmp	r2, #9
 8005a4e:	4613      	mov	r3, r2
 8005a50:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8005a54:	dcee      	bgt.n	8005a34 <_svfprintf_r+0x13f4>
 8005a56:	4621      	mov	r1, r4
 8005a58:	3330      	adds	r3, #48	; 0x30
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8005a60:	4288      	cmp	r0, r1
 8005a62:	f240 8137 	bls.w	8005cd4 <_svfprintf_r+0x1694>
 8005a66:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8005a6a:	4623      	mov	r3, r4
 8005a6c:	e001      	b.n	8005a72 <_svfprintf_r+0x1432>
 8005a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a72:	f801 2b01 	strb.w	r2, [r1], #1
 8005a76:	4298      	cmp	r0, r3
 8005a78:	d1f9      	bne.n	8005a6e <_svfprintf_r+0x142e>
 8005a7a:	1c43      	adds	r3, r0, #1
 8005a7c:	1b1b      	subs	r3, r3, r4
 8005a7e:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 8005a82:	4413      	add	r3, r2
 8005a84:	aa23      	add	r2, sp, #140	; 0x8c
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a8a:	9319      	str	r3, [sp, #100]	; 0x64
 8005a8c:	2a01      	cmp	r2, #1
 8005a8e:	4413      	add	r3, r2
 8005a90:	930d      	str	r3, [sp, #52]	; 0x34
 8005a92:	f340 80ea 	ble.w	8005c6a <_svfprintf_r+0x162a>
 8005a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a98:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005a9a:	4413      	add	r3, r2
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	930d      	str	r3, [sp, #52]	; 0x34
 8005aa0:	9213      	str	r2, [sp, #76]	; 0x4c
 8005aa2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005aa6:	e62a      	b.n	80056fe <_svfprintf_r+0x10be>
 8005aa8:	aa27      	add	r2, sp, #156	; 0x9c
 8005aaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005aac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005aae:	f004 fadd 	bl	800a06c <__ssprint_r>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	f47e aebe 	bne.w	8004834 <_svfprintf_r+0x1f4>
 8005ab8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005aba:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005abc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005ac0:	e4e6      	b.n	8005490 <_svfprintf_r+0xe50>
 8005ac2:	bf00      	nop
 8005ac4:	0800abcc 	.word	0x0800abcc
 8005ac8:	0800ab7c 	.word	0x0800ab7c
 8005acc:	66666667 	.word	0x66666667
 8005ad0:	aa27      	add	r2, sp, #156	; 0x9c
 8005ad2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ad4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005ad6:	f004 fac9 	bl	800a06c <__ssprint_r>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	f47e aeaa 	bne.w	8004834 <_svfprintf_r+0x1f4>
 8005ae0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ae2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ae4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005aec:	e4e8      	b.n	80054c0 <_svfprintf_r+0xe80>
 8005aee:	2d06      	cmp	r5, #6
 8005af0:	462b      	mov	r3, r5
 8005af2:	bf28      	it	cs
 8005af4:	2306      	movcs	r3, #6
 8005af6:	930d      	str	r3, [sp, #52]	; 0x34
 8005af8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005afc:	46b3      	mov	fp, r6
 8005afe:	970e      	str	r7, [sp, #56]	; 0x38
 8005b00:	9613      	str	r6, [sp, #76]	; 0x4c
 8005b02:	4637      	mov	r7, r6
 8005b04:	9308      	str	r3, [sp, #32]
 8005b06:	4e88      	ldr	r6, [pc, #544]	; (8005d28 <_svfprintf_r+0x16e8>)
 8005b08:	f7fe bf6c 	b.w	80049e4 <_svfprintf_r+0x3a4>
 8005b0c:	f04f 0b06 	mov.w	fp, #6
 8005b10:	e593      	b.n	800563a <_svfprintf_r+0xffa>
 8005b12:	a825      	add	r0, sp, #148	; 0x94
 8005b14:	a922      	add	r1, sp, #136	; 0x88
 8005b16:	aa21      	add	r2, sp, #132	; 0x84
 8005b18:	2303      	movs	r3, #3
 8005b1a:	9004      	str	r0, [sp, #16]
 8005b1c:	9202      	str	r2, [sp, #8]
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	f8cd b004 	str.w	fp, [sp, #4]
 8005b24:	9103      	str	r1, [sp, #12]
 8005b26:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005b2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005b2c:	f001 fdf4 	bl	8007718 <_dtoa_r>
 8005b30:	465d      	mov	r5, fp
 8005b32:	4606      	mov	r6, r0
 8005b34:	eb00 040b 	add.w	r4, r0, fp
 8005b38:	e6f2      	b.n	8005920 <_svfprintf_r+0x12e0>
 8005b3a:	272d      	movs	r7, #45	; 0x2d
 8005b3c:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005b40:	f7ff b8a3 	b.w	8004c8a <_svfprintf_r+0x64a>
 8005b44:	9307      	str	r3, [sp, #28]
 8005b46:	f7ff b94c 	b.w	8004de2 <_svfprintf_r+0x7a2>
 8005b4a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8005b4e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8005b52:	931d      	str	r3, [sp, #116]	; 0x74
 8005b54:	232d      	movs	r3, #45	; 0x2d
 8005b56:	911c      	str	r1, [sp, #112]	; 0x70
 8005b58:	9308      	str	r3, [sp, #32]
 8005b5a:	e57c      	b.n	8005656 <_svfprintf_r+0x1016>
 8005b5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005b5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b60:	4413      	add	r3, r2
 8005b62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b64:	930d      	str	r3, [sp, #52]	; 0x34
 8005b66:	2a00      	cmp	r2, #0
 8005b68:	f340 8089 	ble.w	8005c7e <_svfprintf_r+0x163e>
 8005b6c:	2267      	movs	r2, #103	; 0x67
 8005b6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005b72:	9211      	str	r2, [sp, #68]	; 0x44
 8005b74:	e5c3      	b.n	80056fe <_svfprintf_r+0x10be>
 8005b76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b78:	2b47      	cmp	r3, #71	; 0x47
 8005b7a:	f47f ad8f 	bne.w	800569c <_svfprintf_r+0x105c>
 8005b7e:	9b07      	ldr	r3, [sp, #28]
 8005b80:	07db      	lsls	r3, r3, #31
 8005b82:	f53f aec7 	bmi.w	8005914 <_svfprintf_r+0x12d4>
 8005b86:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005b88:	2f47      	cmp	r7, #71	; 0x47
 8005b8a:	eba3 0306 	sub.w	r3, r3, r6
 8005b8e:	9312      	str	r3, [sp, #72]	; 0x48
 8005b90:	f43f af17 	beq.w	80059c2 <_svfprintf_r+0x1382>
 8005b94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b96:	e739      	b.n	8005a0c <_svfprintf_r+0x13cc>
 8005b98:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8005b9c:	970e      	str	r7, [sp, #56]	; 0x38
 8005b9e:	9308      	str	r3, [sp, #32]
 8005ba0:	950d      	str	r5, [sp, #52]	; 0x34
 8005ba2:	4683      	mov	fp, r0
 8005ba4:	9013      	str	r0, [sp, #76]	; 0x4c
 8005ba6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005baa:	f7fe bf1b 	b.w	80049e4 <_svfprintf_r+0x3a4>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	dd6d      	ble.n	8005c8e <_svfprintf_r+0x164e>
 8005bb2:	f1bb 0f00 	cmp.w	fp, #0
 8005bb6:	d14f      	bne.n	8005c58 <_svfprintf_r+0x1618>
 8005bb8:	9a07      	ldr	r2, [sp, #28]
 8005bba:	07d4      	lsls	r4, r2, #31
 8005bbc:	d44c      	bmi.n	8005c58 <_svfprintf_r+0x1618>
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	920d      	str	r2, [sp, #52]	; 0x34
 8005bc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005bc6:	e59a      	b.n	80056fe <_svfprintf_r+0x10be>
 8005bc8:	9b07      	ldr	r3, [sp, #28]
 8005bca:	07db      	lsls	r3, r3, #31
 8005bcc:	465f      	mov	r7, fp
 8005bce:	d505      	bpl.n	8005bdc <_svfprintf_r+0x159c>
 8005bd0:	ae44      	add	r6, sp, #272	; 0x110
 8005bd2:	2330      	movs	r3, #48	; 0x30
 8005bd4:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8005bd8:	f7fe befa 	b.w	80049d0 <_svfprintf_r+0x390>
 8005bdc:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8005be0:	ae34      	add	r6, sp, #208	; 0xd0
 8005be2:	f7fe bef8 	b.w	80049d6 <_svfprintf_r+0x396>
 8005be6:	aa27      	add	r2, sp, #156	; 0x9c
 8005be8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005bec:	f004 fa3e 	bl	800a06c <__ssprint_r>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	f47e ae1f 	bne.w	8004834 <_svfprintf_r+0x1f4>
 8005bf6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005bf8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005bfa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005bfc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005c00:	e620      	b.n	8005844 <_svfprintf_r+0x1204>
 8005c02:	46a0      	mov	r8, r4
 8005c04:	2500      	movs	r5, #0
 8005c06:	f7fe bd77 	b.w	80046f8 <_svfprintf_r+0xb8>
 8005c0a:	3330      	adds	r3, #48	; 0x30
 8005c0c:	2230      	movs	r2, #48	; 0x30
 8005c0e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8005c12:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8005c16:	ab24      	add	r3, sp, #144	; 0x90
 8005c18:	e734      	b.n	8005a84 <_svfprintf_r+0x1444>
 8005c1a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005c1c:	e552      	b.n	80056c4 <_svfprintf_r+0x1084>
 8005c1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005c20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c22:	4413      	add	r3, r2
 8005c24:	2267      	movs	r2, #103	; 0x67
 8005c26:	930d      	str	r3, [sp, #52]	; 0x34
 8005c28:	9211      	str	r2, [sp, #68]	; 0x44
 8005c2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c2e:	e566      	b.n	80056fe <_svfprintf_r+0x10be>
 8005c30:	4e3e      	ldr	r6, [pc, #248]	; (8005d2c <_svfprintf_r+0x16ec>)
 8005c32:	4b3f      	ldr	r3, [pc, #252]	; (8005d30 <_svfprintf_r+0x16f0>)
 8005c34:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005c38:	f7ff b829 	b.w	8004c8e <_svfprintf_r+0x64e>
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8005c44:	f7fe fa0c 	bl	8004060 <__aeabi_dcmpeq>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	f47f ae6d 	bne.w	8005928 <_svfprintf_r+0x12e8>
 8005c4e:	f1c5 0501 	rsb	r5, r5, #1
 8005c52:	9521      	str	r5, [sp, #132]	; 0x84
 8005c54:	442c      	add	r4, r5
 8005c56:	e522      	b.n	800569e <_svfprintf_r+0x105e>
 8005c58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005c5c:	189d      	adds	r5, r3, r2
 8005c5e:	eb05 030b 	add.w	r3, r5, fp
 8005c62:	930d      	str	r3, [sp, #52]	; 0x34
 8005c64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c68:	e549      	b.n	80056fe <_svfprintf_r+0x10be>
 8005c6a:	9b07      	ldr	r3, [sp, #28]
 8005c6c:	f013 0301 	ands.w	r3, r3, #1
 8005c70:	f47f af11 	bne.w	8005a96 <_svfprintf_r+0x1456>
 8005c74:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c7c:	e53f      	b.n	80056fe <_svfprintf_r+0x10be>
 8005c7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c82:	f1c3 0301 	rsb	r3, r3, #1
 8005c86:	441a      	add	r2, r3
 8005c88:	4613      	mov	r3, r2
 8005c8a:	920d      	str	r2, [sp, #52]	; 0x34
 8005c8c:	e76e      	b.n	8005b6c <_svfprintf_r+0x152c>
 8005c8e:	f1bb 0f00 	cmp.w	fp, #0
 8005c92:	d102      	bne.n	8005c9a <_svfprintf_r+0x165a>
 8005c94:	9b07      	ldr	r3, [sp, #28]
 8005c96:	07d8      	lsls	r0, r3, #31
 8005c98:	d507      	bpl.n	8005caa <_svfprintf_r+0x166a>
 8005c9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c9c:	1c5d      	adds	r5, r3, #1
 8005c9e:	eb05 030b 	add.w	r3, r5, fp
 8005ca2:	930d      	str	r3, [sp, #52]	; 0x34
 8005ca4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005ca8:	e529      	b.n	80056fe <_svfprintf_r+0x10be>
 8005caa:	2301      	movs	r3, #1
 8005cac:	930d      	str	r3, [sp, #52]	; 0x34
 8005cae:	e526      	b.n	80056fe <_svfprintf_r+0x10be>
 8005cb0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005cb2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005cb6:	6805      	ldr	r5, [r0, #0]
 8005cb8:	3004      	adds	r0, #4
 8005cba:	2d00      	cmp	r5, #0
 8005cbc:	900e      	str	r0, [sp, #56]	; 0x38
 8005cbe:	46a0      	mov	r8, r4
 8005cc0:	f6be ad18 	bge.w	80046f4 <_svfprintf_r+0xb4>
 8005cc4:	f04f 35ff 	mov.w	r5, #4294967295
 8005cc8:	f7fe bd14 	b.w	80046f4 <_svfprintf_r+0xb4>
 8005ccc:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005cd0:	f7fe bdc1 	b.w	8004856 <_svfprintf_r+0x216>
 8005cd4:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8005cd8:	e6d4      	b.n	8005a84 <_svfprintf_r+0x1444>
 8005cda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cdc:	230c      	movs	r3, #12
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce4:	f7fe bdaf 	b.w	8004846 <_svfprintf_r+0x206>
 8005ce8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005cec:	f7fe be30 	b.w	8004950 <_svfprintf_r+0x310>
 8005cf0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005cf4:	f7fe bf92 	b.w	8004c1c <_svfprintf_r+0x5dc>
 8005cf8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005cfc:	f7ff b845 	b.w	8004d8a <_svfprintf_r+0x74a>
 8005d00:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005d04:	f7ff b813 	b.w	8004d2e <_svfprintf_r+0x6ee>
 8005d08:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005d0c:	f7fe bfe5 	b.w	8004cda <_svfprintf_r+0x69a>
 8005d10:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005d14:	f7ff b92d 	b.w	8004f72 <_svfprintf_r+0x932>
 8005d18:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005d1c:	f7ff b908 	b.w	8004f30 <_svfprintf_r+0x8f0>
 8005d20:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005d24:	f7ff b8e6 	b.w	8004ef4 <_svfprintf_r+0x8b4>
 8005d28:	0800abc4 	.word	0x0800abc4
 8005d2c:	0800ab98 	.word	0x0800ab98
 8005d30:	0800ab94 	.word	0x0800ab94
 8005d34:	00000000 	.word	0x00000000

08005d38 <_vfprintf_r>:
 8005d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3c:	b0c5      	sub	sp, #276	; 0x114
 8005d3e:	461c      	mov	r4, r3
 8005d40:	9108      	str	r1, [sp, #32]
 8005d42:	4616      	mov	r6, r2
 8005d44:	4605      	mov	r5, r0
 8005d46:	900a      	str	r0, [sp, #40]	; 0x28
 8005d48:	f003 f82e 	bl	8008da8 <_localeconv_r>
 8005d4c:	6803      	ldr	r3, [r0, #0]
 8005d4e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fe fbb5 	bl	80044c0 <strlen>
 8005d56:	940e      	str	r4, [sp, #56]	; 0x38
 8005d58:	9016      	str	r0, [sp, #88]	; 0x58
 8005d5a:	b11d      	cbz	r5, 8005d64 <_vfprintf_r+0x2c>
 8005d5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 8123 	beq.w	8005faa <_vfprintf_r+0x272>
 8005d64:	9808      	ldr	r0, [sp, #32]
 8005d66:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8005d6a:	b293      	uxth	r3, r2
 8005d6c:	0499      	lsls	r1, r3, #18
 8005d6e:	d407      	bmi.n	8005d80 <_vfprintf_r+0x48>
 8005d70:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8005d72:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8005d76:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8005d7a:	8183      	strh	r3, [r0, #12]
 8005d7c:	6641      	str	r1, [r0, #100]	; 0x64
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	071a      	lsls	r2, r3, #28
 8005d82:	f140 80dd 	bpl.w	8005f40 <_vfprintf_r+0x208>
 8005d86:	9a08      	ldr	r2, [sp, #32]
 8005d88:	6912      	ldr	r2, [r2, #16]
 8005d8a:	2a00      	cmp	r2, #0
 8005d8c:	f000 80d8 	beq.w	8005f40 <_vfprintf_r+0x208>
 8005d90:	f003 031a 	and.w	r3, r3, #26
 8005d94:	2b0a      	cmp	r3, #10
 8005d96:	f000 80e1 	beq.w	8005f5c <_vfprintf_r+0x224>
 8005d9a:	ed9f 7b87 	vldr	d7, [pc, #540]	; 8005fb8 <_vfprintf_r+0x280>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005da4:	9312      	str	r3, [sp, #72]	; 0x48
 8005da6:	9329      	str	r3, [sp, #164]	; 0xa4
 8005da8:	9328      	str	r3, [sp, #160]	; 0xa0
 8005daa:	9319      	str	r3, [sp, #100]	; 0x64
 8005dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dae:	f8df a214 	ldr.w	sl, [pc, #532]	; 8005fc4 <_vfprintf_r+0x28c>
 8005db2:	ab34      	add	r3, sp, #208	; 0xd0
 8005db4:	9327      	str	r3, [sp, #156]	; 0x9c
 8005db6:	4699      	mov	r9, r3
 8005db8:	46b0      	mov	r8, r6
 8005dba:	f898 3000 	ldrb.w	r3, [r8]
 8005dbe:	4644      	mov	r4, r8
 8005dc0:	b1eb      	cbz	r3, 8005dfe <_vfprintf_r+0xc6>
 8005dc2:	2b25      	cmp	r3, #37	; 0x25
 8005dc4:	d102      	bne.n	8005dcc <_vfprintf_r+0x94>
 8005dc6:	e01a      	b.n	8005dfe <_vfprintf_r+0xc6>
 8005dc8:	2b25      	cmp	r3, #37	; 0x25
 8005dca:	d003      	beq.n	8005dd4 <_vfprintf_r+0x9c>
 8005dcc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1f9      	bne.n	8005dc8 <_vfprintf_r+0x90>
 8005dd4:	ebc8 0504 	rsb	r5, r8, r4
 8005dd8:	b18d      	cbz	r5, 8005dfe <_vfprintf_r+0xc6>
 8005dda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005ddc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005dde:	f8c9 8000 	str.w	r8, [r9]
 8005de2:	3301      	adds	r3, #1
 8005de4:	442a      	add	r2, r5
 8005de6:	2b07      	cmp	r3, #7
 8005de8:	f8c9 5004 	str.w	r5, [r9, #4]
 8005dec:	9229      	str	r2, [sp, #164]	; 0xa4
 8005dee:	9328      	str	r3, [sp, #160]	; 0xa0
 8005df0:	f300 80c2 	bgt.w	8005f78 <_vfprintf_r+0x240>
 8005df4:	f109 0908 	add.w	r9, r9, #8
 8005df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dfa:	442b      	add	r3, r5
 8005dfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dfe:	7823      	ldrb	r3, [r4, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 80c2 	beq.w	8005f8a <_vfprintf_r+0x252>
 8005e06:	2300      	movs	r3, #0
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005e0e:	4619      	mov	r1, r3
 8005e10:	930c      	str	r3, [sp, #48]	; 0x30
 8005e12:	9307      	str	r3, [sp, #28]
 8005e14:	f04f 3bff 	mov.w	fp, #4294967295
 8005e18:	7863      	ldrb	r3, [r4, #1]
 8005e1a:	f104 0801 	add.w	r8, r4, #1
 8005e1e:	465d      	mov	r5, fp
 8005e20:	f108 0801 	add.w	r8, r8, #1
 8005e24:	f1a3 0020 	sub.w	r0, r3, #32
 8005e28:	2858      	cmp	r0, #88	; 0x58
 8005e2a:	f200 8459 	bhi.w	80066e0 <_vfprintf_r+0x9a8>
 8005e2e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8005e32:	040f      	.short	0x040f
 8005e34:	04570457 	.word	0x04570457
 8005e38:	04570418 	.word	0x04570418
 8005e3c:	04570457 	.word	0x04570457
 8005e40:	04570457 	.word	0x04570457
 8005e44:	03620457 	.word	0x03620457
 8005e48:	04570449 	.word	0x04570449
 8005e4c:	0109005d 	.word	0x0109005d
 8005e50:	01250457 	.word	0x01250457
 8005e54:	03700370 	.word	0x03700370
 8005e58:	03700370 	.word	0x03700370
 8005e5c:	03700370 	.word	0x03700370
 8005e60:	03700370 	.word	0x03700370
 8005e64:	04570370 	.word	0x04570370
 8005e68:	04570457 	.word	0x04570457
 8005e6c:	04570457 	.word	0x04570457
 8005e70:	04570457 	.word	0x04570457
 8005e74:	04570457 	.word	0x04570457
 8005e78:	03800457 	.word	0x03800457
 8005e7c:	0457039d 	.word	0x0457039d
 8005e80:	0457039d 	.word	0x0457039d
 8005e84:	04570457 	.word	0x04570457
 8005e88:	03eb0457 	.word	0x03eb0457
 8005e8c:	04570457 	.word	0x04570457
 8005e90:	0457012c 	.word	0x0457012c
 8005e94:	04570457 	.word	0x04570457
 8005e98:	04570457 	.word	0x04570457
 8005e9c:	04570155 	.word	0x04570155
 8005ea0:	02b40457 	.word	0x02b40457
 8005ea4:	04570457 	.word	0x04570457
 8005ea8:	04570457 	.word	0x04570457
 8005eac:	04570457 	.word	0x04570457
 8005eb0:	04570457 	.word	0x04570457
 8005eb4:	04570457 	.word	0x04570457
 8005eb8:	030f02f5 	.word	0x030f02f5
 8005ebc:	039d039d 	.word	0x039d039d
 8005ec0:	033f039d 	.word	0x033f039d
 8005ec4:	0457030f 	.word	0x0457030f
 8005ec8:	03460457 	.word	0x03460457
 8005ecc:	03500457 	.word	0x03500457
 8005ed0:	006400cb 	.word	0x006400cb
 8005ed4:	04570420 	.word	0x04570420
 8005ed8:	04570428 	.word	0x04570428
 8005edc:	045703f2 	.word	0x045703f2
 8005ee0:	03fa0457 	.word	0x03fa0457
 8005ee4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005ee6:	930e      	str	r3, [sp, #56]	; 0x38
 8005ee8:	4240      	negs	r0, r0
 8005eea:	900c      	str	r0, [sp, #48]	; 0x30
 8005eec:	9b07      	ldr	r3, [sp, #28]
 8005eee:	f043 0304 	orr.w	r3, r3, #4
 8005ef2:	9307      	str	r3, [sp, #28]
 8005ef4:	f898 3000 	ldrb.w	r3, [r8]
 8005ef8:	e792      	b.n	8005e20 <_vfprintf_r+0xe8>
 8005efa:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005efc:	46ab      	mov	fp, r5
 8005efe:	2100      	movs	r1, #0
 8005f00:	6804      	ldr	r4, [r0, #0]
 8005f02:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005f06:	1d07      	adds	r7, r0, #4
 8005f08:	9807      	ldr	r0, [sp, #28]
 8005f0a:	2330      	movs	r3, #48	; 0x30
 8005f0c:	2278      	movs	r2, #120	; 0x78
 8005f0e:	458b      	cmp	fp, r1
 8005f10:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8005f14:	f04f 0500 	mov.w	r5, #0
 8005f18:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8005f1c:	f040 0302 	orr.w	r3, r0, #2
 8005f20:	f2c0 83fb 	blt.w	800671a <_vfprintf_r+0x9e2>
 8005f24:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8005f28:	f043 0302 	orr.w	r3, r3, #2
 8005f2c:	9307      	str	r3, [sp, #28]
 8005f2e:	ea54 0305 	orrs.w	r3, r4, r5
 8005f32:	970e      	str	r7, [sp, #56]	; 0x38
 8005f34:	f000 83cc 	beq.w	80066d0 <_vfprintf_r+0x998>
 8005f38:	460f      	mov	r7, r1
 8005f3a:	9211      	str	r2, [sp, #68]	; 0x44
 8005f3c:	4820      	ldr	r0, [pc, #128]	; (8005fc0 <_vfprintf_r+0x288>)
 8005f3e:	e25d      	b.n	80063fc <_vfprintf_r+0x6c4>
 8005f40:	9908      	ldr	r1, [sp, #32]
 8005f42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005f44:	f001 faf0 	bl	8007528 <__swsetup_r>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	f041 803f 	bne.w	8006fcc <_vfprintf_r+0x1294>
 8005f4e:	9b08      	ldr	r3, [sp, #32]
 8005f50:	899b      	ldrh	r3, [r3, #12]
 8005f52:	f003 031a 	and.w	r3, r3, #26
 8005f56:	2b0a      	cmp	r3, #10
 8005f58:	f47f af1f 	bne.w	8005d9a <_vfprintf_r+0x62>
 8005f5c:	9908      	ldr	r1, [sp, #32]
 8005f5e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f6ff af19 	blt.w	8005d9a <_vfprintf_r+0x62>
 8005f68:	4623      	mov	r3, r4
 8005f6a:	4632      	mov	r2, r6
 8005f6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005f6e:	f001 fa7f 	bl	8007470 <__sbprintf>
 8005f72:	b045      	add	sp, #276	; 0x114
 8005f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f78:	aa27      	add	r2, sp, #156	; 0x9c
 8005f7a:	9908      	ldr	r1, [sp, #32]
 8005f7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005f7e:	f004 f931 	bl	800a1e4 <__sprint_r>
 8005f82:	b948      	cbnz	r0, 8005f98 <_vfprintf_r+0x260>
 8005f84:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005f88:	e736      	b.n	8005df8 <_vfprintf_r+0xc0>
 8005f8a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005f8c:	b123      	cbz	r3, 8005f98 <_vfprintf_r+0x260>
 8005f8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005f90:	9908      	ldr	r1, [sp, #32]
 8005f92:	aa27      	add	r2, sp, #156	; 0x9c
 8005f94:	f004 f926 	bl	800a1e4 <__sprint_r>
 8005f98:	9b08      	ldr	r3, [sp, #32]
 8005f9a:	899b      	ldrh	r3, [r3, #12]
 8005f9c:	0659      	lsls	r1, r3, #25
 8005f9e:	f101 8015 	bmi.w	8006fcc <_vfprintf_r+0x1294>
 8005fa2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005fa4:	b045      	add	sp, #276	; 0x114
 8005fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005faa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005fac:	f002 fc02 	bl	80087b4 <__sinit>
 8005fb0:	e6d8      	b.n	8005d64 <_vfprintf_r+0x2c>
 8005fb2:	bf00      	nop
 8005fb4:	f3af 8000 	nop.w
	...
 8005fc0:	0800abb0 	.word	0x0800abb0
 8005fc4:	0800abe0 	.word	0x0800abe0
 8005fc8:	9311      	str	r3, [sp, #68]	; 0x44
 8005fca:	46ab      	mov	fp, r5
 8005fcc:	2a00      	cmp	r2, #0
 8005fce:	f041 8232 	bne.w	8007436 <_vfprintf_r+0x16fe>
 8005fd2:	9a07      	ldr	r2, [sp, #28]
 8005fd4:	f012 0320 	ands.w	r3, r2, #32
 8005fd8:	d064      	beq.n	80060a4 <_vfprintf_r+0x36c>
 8005fda:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005fdc:	3707      	adds	r7, #7
 8005fde:	f027 0307 	bic.w	r3, r7, #7
 8005fe2:	2700      	movs	r7, #0
 8005fe4:	f103 0108 	add.w	r1, r3, #8
 8005fe8:	45bb      	cmp	fp, r7
 8005fea:	910e      	str	r1, [sp, #56]	; 0x38
 8005fec:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005ff0:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005ff4:	f2c0 86ba 	blt.w	8006d6c <_vfprintf_r+0x1034>
 8005ff8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8005ffc:	9307      	str	r3, [sp, #28]
 8005ffe:	ea54 0305 	orrs.w	r3, r4, r5
 8006002:	f000 8382 	beq.w	800670a <_vfprintf_r+0x9d2>
 8006006:	ae34      	add	r6, sp, #208	; 0xd0
 8006008:	08e2      	lsrs	r2, r4, #3
 800600a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800600e:	08e9      	lsrs	r1, r5, #3
 8006010:	f004 0307 	and.w	r3, r4, #7
 8006014:	460d      	mov	r5, r1
 8006016:	4614      	mov	r4, r2
 8006018:	3330      	adds	r3, #48	; 0x30
 800601a:	ea54 0205 	orrs.w	r2, r4, r5
 800601e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8006022:	d1f1      	bne.n	8006008 <_vfprintf_r+0x2d0>
 8006024:	9a07      	ldr	r2, [sp, #28]
 8006026:	07d2      	lsls	r2, r2, #31
 8006028:	f140 8096 	bpl.w	8006158 <_vfprintf_r+0x420>
 800602c:	2b30      	cmp	r3, #48	; 0x30
 800602e:	f000 8093 	beq.w	8006158 <_vfprintf_r+0x420>
 8006032:	2230      	movs	r2, #48	; 0x30
 8006034:	1e73      	subs	r3, r6, #1
 8006036:	f806 2c01 	strb.w	r2, [r6, #-1]
 800603a:	aa34      	add	r2, sp, #208	; 0xd0
 800603c:	1ad2      	subs	r2, r2, r3
 800603e:	920d      	str	r2, [sp, #52]	; 0x34
 8006040:	461e      	mov	r6, r3
 8006042:	e08c      	b.n	800615e <_vfprintf_r+0x426>
 8006044:	f898 3000 	ldrb.w	r3, [r8]
 8006048:	2b2a      	cmp	r3, #42	; 0x2a
 800604a:	f108 0401 	add.w	r4, r8, #1
 800604e:	f001 81d0 	beq.w	80073f2 <_vfprintf_r+0x16ba>
 8006052:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006056:	2809      	cmp	r0, #9
 8006058:	bf98      	it	ls
 800605a:	2500      	movls	r5, #0
 800605c:	f201 816c 	bhi.w	8007338 <_vfprintf_r+0x1600>
 8006060:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006064:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006068:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800606c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006070:	2809      	cmp	r0, #9
 8006072:	d9f5      	bls.n	8006060 <_vfprintf_r+0x328>
 8006074:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8006078:	46a0      	mov	r8, r4
 800607a:	e6d3      	b.n	8005e24 <_vfprintf_r+0xec>
 800607c:	9b07      	ldr	r3, [sp, #28]
 800607e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006082:	9307      	str	r3, [sp, #28]
 8006084:	f898 3000 	ldrb.w	r3, [r8]
 8006088:	e6ca      	b.n	8005e20 <_vfprintf_r+0xe8>
 800608a:	9311      	str	r3, [sp, #68]	; 0x44
 800608c:	46ab      	mov	fp, r5
 800608e:	2a00      	cmp	r2, #0
 8006090:	f041 81d9 	bne.w	8007446 <_vfprintf_r+0x170e>
 8006094:	9b07      	ldr	r3, [sp, #28]
 8006096:	f043 0310 	orr.w	r3, r3, #16
 800609a:	9307      	str	r3, [sp, #28]
 800609c:	9a07      	ldr	r2, [sp, #28]
 800609e:	f012 0320 	ands.w	r3, r2, #32
 80060a2:	d19a      	bne.n	8005fda <_vfprintf_r+0x2a2>
 80060a4:	9907      	ldr	r1, [sp, #28]
 80060a6:	f011 0210 	ands.w	r2, r1, #16
 80060aa:	f000 8634 	beq.w	8006d16 <_vfprintf_r+0xfde>
 80060ae:	980e      	ldr	r0, [sp, #56]	; 0x38
 80060b0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80060b4:	f1bb 0f00 	cmp.w	fp, #0
 80060b8:	6804      	ldr	r4, [r0, #0]
 80060ba:	f100 0704 	add.w	r7, r0, #4
 80060be:	f04f 0500 	mov.w	r5, #0
 80060c2:	f2c0 8652 	blt.w	8006d6a <_vfprintf_r+0x1032>
 80060c6:	460a      	mov	r2, r1
 80060c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060cc:	9207      	str	r2, [sp, #28]
 80060ce:	ea54 0205 	orrs.w	r2, r4, r5
 80060d2:	970e      	str	r7, [sp, #56]	; 0x38
 80060d4:	f000 8319 	beq.w	800670a <_vfprintf_r+0x9d2>
 80060d8:	461f      	mov	r7, r3
 80060da:	e794      	b.n	8006006 <_vfprintf_r+0x2ce>
 80060dc:	9311      	str	r3, [sp, #68]	; 0x44
 80060de:	46ab      	mov	fp, r5
 80060e0:	2a00      	cmp	r2, #0
 80060e2:	f041 81a0 	bne.w	8007426 <_vfprintf_r+0x16ee>
 80060e6:	9b07      	ldr	r3, [sp, #28]
 80060e8:	f043 0310 	orr.w	r3, r3, #16
 80060ec:	9307      	str	r3, [sp, #28]
 80060ee:	9a07      	ldr	r2, [sp, #28]
 80060f0:	f012 0320 	ands.w	r3, r2, #32
 80060f4:	f000 84fa 	beq.w	8006aec <_vfprintf_r+0xdb4>
 80060f8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80060fa:	3707      	adds	r7, #7
 80060fc:	f027 0307 	bic.w	r3, r7, #7
 8006100:	2700      	movs	r7, #0
 8006102:	f103 0108 	add.w	r1, r3, #8
 8006106:	45bb      	cmp	fp, r7
 8006108:	910e      	str	r1, [sp, #56]	; 0x38
 800610a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800610e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006112:	f2c0 8523 	blt.w	8006b5c <_vfprintf_r+0xe24>
 8006116:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800611a:	9307      	str	r3, [sp, #28]
 800611c:	ea54 0305 	orrs.w	r3, r4, r5
 8006120:	f000 81bc 	beq.w	800649c <_vfprintf_r+0x764>
 8006124:	2d00      	cmp	r5, #0
 8006126:	bf08      	it	eq
 8006128:	2c0a      	cmpeq	r4, #10
 800612a:	f0c0 851b 	bcc.w	8006b64 <_vfprintf_r+0xe2c>
 800612e:	ae34      	add	r6, sp, #208	; 0xd0
 8006130:	4620      	mov	r0, r4
 8006132:	4629      	mov	r1, r5
 8006134:	220a      	movs	r2, #10
 8006136:	2300      	movs	r3, #0
 8006138:	f004 fa38 	bl	800a5ac <__aeabi_uldivmod>
 800613c:	3230      	adds	r2, #48	; 0x30
 800613e:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8006142:	4620      	mov	r0, r4
 8006144:	4629      	mov	r1, r5
 8006146:	2300      	movs	r3, #0
 8006148:	220a      	movs	r2, #10
 800614a:	f004 fa2f 	bl	800a5ac <__aeabi_uldivmod>
 800614e:	4604      	mov	r4, r0
 8006150:	460d      	mov	r5, r1
 8006152:	ea54 0305 	orrs.w	r3, r4, r5
 8006156:	d1eb      	bne.n	8006130 <_vfprintf_r+0x3f8>
 8006158:	ab34      	add	r3, sp, #208	; 0xd0
 800615a:	1b9b      	subs	r3, r3, r6
 800615c:	930d      	str	r3, [sp, #52]	; 0x34
 800615e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006160:	455b      	cmp	r3, fp
 8006162:	bfb8      	it	lt
 8006164:	465b      	movlt	r3, fp
 8006166:	9309      	str	r3, [sp, #36]	; 0x24
 8006168:	2300      	movs	r3, #0
 800616a:	9313      	str	r3, [sp, #76]	; 0x4c
 800616c:	b117      	cbz	r7, 8006174 <_vfprintf_r+0x43c>
 800616e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006170:	3301      	adds	r3, #1
 8006172:	9309      	str	r3, [sp, #36]	; 0x24
 8006174:	9b07      	ldr	r3, [sp, #28]
 8006176:	f013 0302 	ands.w	r3, r3, #2
 800617a:	930f      	str	r3, [sp, #60]	; 0x3c
 800617c:	d002      	beq.n	8006184 <_vfprintf_r+0x44c>
 800617e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006180:	3302      	adds	r3, #2
 8006182:	9309      	str	r3, [sp, #36]	; 0x24
 8006184:	9b07      	ldr	r3, [sp, #28]
 8006186:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800618a:	9310      	str	r3, [sp, #64]	; 0x40
 800618c:	f040 82d2 	bne.w	8006734 <_vfprintf_r+0x9fc>
 8006190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006194:	1a9d      	subs	r5, r3, r2
 8006196:	2d00      	cmp	r5, #0
 8006198:	f340 82cc 	ble.w	8006734 <_vfprintf_r+0x9fc>
 800619c:	2d10      	cmp	r5, #16
 800619e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80061a0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80061a2:	4fa8      	ldr	r7, [pc, #672]	; (8006444 <_vfprintf_r+0x70c>)
 80061a4:	dd27      	ble.n	80061f6 <_vfprintf_r+0x4be>
 80061a6:	9618      	str	r6, [sp, #96]	; 0x60
 80061a8:	4648      	mov	r0, r9
 80061aa:	2410      	movs	r4, #16
 80061ac:	46b9      	mov	r9, r7
 80061ae:	9e08      	ldr	r6, [sp, #32]
 80061b0:	462f      	mov	r7, r5
 80061b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80061b4:	e004      	b.n	80061c0 <_vfprintf_r+0x488>
 80061b6:	3f10      	subs	r7, #16
 80061b8:	2f10      	cmp	r7, #16
 80061ba:	f100 0008 	add.w	r0, r0, #8
 80061be:	dd16      	ble.n	80061ee <_vfprintf_r+0x4b6>
 80061c0:	3201      	adds	r2, #1
 80061c2:	4ba0      	ldr	r3, [pc, #640]	; (8006444 <_vfprintf_r+0x70c>)
 80061c4:	9228      	str	r2, [sp, #160]	; 0xa0
 80061c6:	3110      	adds	r1, #16
 80061c8:	2a07      	cmp	r2, #7
 80061ca:	9129      	str	r1, [sp, #164]	; 0xa4
 80061cc:	e880 0018 	stmia.w	r0, {r3, r4}
 80061d0:	ddf1      	ble.n	80061b6 <_vfprintf_r+0x47e>
 80061d2:	aa27      	add	r2, sp, #156	; 0x9c
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	f004 f804 	bl	800a1e4 <__sprint_r>
 80061dc:	2800      	cmp	r0, #0
 80061de:	f47f aedb 	bne.w	8005f98 <_vfprintf_r+0x260>
 80061e2:	3f10      	subs	r7, #16
 80061e4:	2f10      	cmp	r7, #16
 80061e6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80061e8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80061ea:	a834      	add	r0, sp, #208	; 0xd0
 80061ec:	dce8      	bgt.n	80061c0 <_vfprintf_r+0x488>
 80061ee:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80061f0:	463d      	mov	r5, r7
 80061f2:	464f      	mov	r7, r9
 80061f4:	4681      	mov	r9, r0
 80061f6:	3201      	adds	r2, #1
 80061f8:	186c      	adds	r4, r5, r1
 80061fa:	2a07      	cmp	r2, #7
 80061fc:	9429      	str	r4, [sp, #164]	; 0xa4
 80061fe:	9228      	str	r2, [sp, #160]	; 0xa0
 8006200:	f8c9 7000 	str.w	r7, [r9]
 8006204:	f8c9 5004 	str.w	r5, [r9, #4]
 8006208:	f300 8428 	bgt.w	8006a5c <_vfprintf_r+0xd24>
 800620c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006210:	f109 0908 	add.w	r9, r9, #8
 8006214:	b177      	cbz	r7, 8006234 <_vfprintf_r+0x4fc>
 8006216:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006218:	3301      	adds	r3, #1
 800621a:	3401      	adds	r4, #1
 800621c:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8006220:	2201      	movs	r2, #1
 8006222:	2b07      	cmp	r3, #7
 8006224:	9429      	str	r4, [sp, #164]	; 0xa4
 8006226:	9328      	str	r3, [sp, #160]	; 0xa0
 8006228:	e889 0006 	stmia.w	r9, {r1, r2}
 800622c:	f300 83a0 	bgt.w	8006970 <_vfprintf_r+0xc38>
 8006230:	f109 0908 	add.w	r9, r9, #8
 8006234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006236:	b16b      	cbz	r3, 8006254 <_vfprintf_r+0x51c>
 8006238:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800623a:	3301      	adds	r3, #1
 800623c:	3402      	adds	r4, #2
 800623e:	a920      	add	r1, sp, #128	; 0x80
 8006240:	2202      	movs	r2, #2
 8006242:	2b07      	cmp	r3, #7
 8006244:	9429      	str	r4, [sp, #164]	; 0xa4
 8006246:	9328      	str	r3, [sp, #160]	; 0xa0
 8006248:	e889 0006 	stmia.w	r9, {r1, r2}
 800624c:	f300 839c 	bgt.w	8006988 <_vfprintf_r+0xc50>
 8006250:	f109 0908 	add.w	r9, r9, #8
 8006254:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006256:	2b80      	cmp	r3, #128	; 0x80
 8006258:	f000 82d0 	beq.w	80067fc <_vfprintf_r+0xac4>
 800625c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800625e:	ebc3 070b 	rsb	r7, r3, fp
 8006262:	2f00      	cmp	r7, #0
 8006264:	dd33      	ble.n	80062ce <_vfprintf_r+0x596>
 8006266:	4a78      	ldr	r2, [pc, #480]	; (8006448 <_vfprintf_r+0x710>)
 8006268:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800626a:	920f      	str	r2, [sp, #60]	; 0x3c
 800626c:	2f10      	cmp	r7, #16
 800626e:	dd22      	ble.n	80062b6 <_vfprintf_r+0x57e>
 8006270:	4622      	mov	r2, r4
 8006272:	f04f 0b10 	mov.w	fp, #16
 8006276:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006278:	9c08      	ldr	r4, [sp, #32]
 800627a:	e004      	b.n	8006286 <_vfprintf_r+0x54e>
 800627c:	3f10      	subs	r7, #16
 800627e:	2f10      	cmp	r7, #16
 8006280:	f109 0908 	add.w	r9, r9, #8
 8006284:	dd16      	ble.n	80062b4 <_vfprintf_r+0x57c>
 8006286:	3301      	adds	r3, #1
 8006288:	3210      	adds	r2, #16
 800628a:	2b07      	cmp	r3, #7
 800628c:	9229      	str	r2, [sp, #164]	; 0xa4
 800628e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006290:	e889 0c00 	stmia.w	r9, {sl, fp}
 8006294:	ddf2      	ble.n	800627c <_vfprintf_r+0x544>
 8006296:	aa27      	add	r2, sp, #156	; 0x9c
 8006298:	4621      	mov	r1, r4
 800629a:	4628      	mov	r0, r5
 800629c:	f003 ffa2 	bl	800a1e4 <__sprint_r>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	f47f ae79 	bne.w	8005f98 <_vfprintf_r+0x260>
 80062a6:	3f10      	subs	r7, #16
 80062a8:	2f10      	cmp	r7, #16
 80062aa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80062ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80062ae:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80062b2:	dce8      	bgt.n	8006286 <_vfprintf_r+0x54e>
 80062b4:	4614      	mov	r4, r2
 80062b6:	3301      	adds	r3, #1
 80062b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062ba:	9328      	str	r3, [sp, #160]	; 0xa0
 80062bc:	443c      	add	r4, r7
 80062be:	2b07      	cmp	r3, #7
 80062c0:	9429      	str	r4, [sp, #164]	; 0xa4
 80062c2:	e889 0084 	stmia.w	r9, {r2, r7}
 80062c6:	f300 8347 	bgt.w	8006958 <_vfprintf_r+0xc20>
 80062ca:	f109 0908 	add.w	r9, r9, #8
 80062ce:	9b07      	ldr	r3, [sp, #28]
 80062d0:	05dd      	lsls	r5, r3, #23
 80062d2:	f100 8231 	bmi.w	8006738 <_vfprintf_r+0xa00>
 80062d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80062d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062da:	f8c9 6000 	str.w	r6, [r9]
 80062de:	3301      	adds	r3, #1
 80062e0:	440c      	add	r4, r1
 80062e2:	2b07      	cmp	r3, #7
 80062e4:	9429      	str	r4, [sp, #164]	; 0xa4
 80062e6:	f8c9 1004 	str.w	r1, [r9, #4]
 80062ea:	9328      	str	r3, [sp, #160]	; 0xa0
 80062ec:	f300 831e 	bgt.w	800692c <_vfprintf_r+0xbf4>
 80062f0:	f109 0908 	add.w	r9, r9, #8
 80062f4:	9b07      	ldr	r3, [sp, #28]
 80062f6:	0758      	lsls	r0, r3, #29
 80062f8:	d53f      	bpl.n	800637a <_vfprintf_r+0x642>
 80062fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062fe:	1a9d      	subs	r5, r3, r2
 8006300:	2d00      	cmp	r5, #0
 8006302:	dd3a      	ble.n	800637a <_vfprintf_r+0x642>
 8006304:	2d10      	cmp	r5, #16
 8006306:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006308:	4f4e      	ldr	r7, [pc, #312]	; (8006444 <_vfprintf_r+0x70c>)
 800630a:	dd23      	ble.n	8006354 <_vfprintf_r+0x61c>
 800630c:	4622      	mov	r2, r4
 800630e:	2610      	movs	r6, #16
 8006310:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006314:	9c08      	ldr	r4, [sp, #32]
 8006316:	e004      	b.n	8006322 <_vfprintf_r+0x5ea>
 8006318:	3d10      	subs	r5, #16
 800631a:	2d10      	cmp	r5, #16
 800631c:	f109 0908 	add.w	r9, r9, #8
 8006320:	dd17      	ble.n	8006352 <_vfprintf_r+0x61a>
 8006322:	3301      	adds	r3, #1
 8006324:	4947      	ldr	r1, [pc, #284]	; (8006444 <_vfprintf_r+0x70c>)
 8006326:	9328      	str	r3, [sp, #160]	; 0xa0
 8006328:	3210      	adds	r2, #16
 800632a:	2b07      	cmp	r3, #7
 800632c:	9229      	str	r2, [sp, #164]	; 0xa4
 800632e:	e889 0042 	stmia.w	r9, {r1, r6}
 8006332:	ddf1      	ble.n	8006318 <_vfprintf_r+0x5e0>
 8006334:	aa27      	add	r2, sp, #156	; 0x9c
 8006336:	4621      	mov	r1, r4
 8006338:	4658      	mov	r0, fp
 800633a:	f003 ff53 	bl	800a1e4 <__sprint_r>
 800633e:	2800      	cmp	r0, #0
 8006340:	f47f ae2a 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006344:	3d10      	subs	r5, #16
 8006346:	2d10      	cmp	r5, #16
 8006348:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800634a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800634c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006350:	dce7      	bgt.n	8006322 <_vfprintf_r+0x5ea>
 8006352:	4614      	mov	r4, r2
 8006354:	3301      	adds	r3, #1
 8006356:	442c      	add	r4, r5
 8006358:	2b07      	cmp	r3, #7
 800635a:	9429      	str	r4, [sp, #164]	; 0xa4
 800635c:	9328      	str	r3, [sp, #160]	; 0xa0
 800635e:	f8c9 7000 	str.w	r7, [r9]
 8006362:	f8c9 5004 	str.w	r5, [r9, #4]
 8006366:	dd08      	ble.n	800637a <_vfprintf_r+0x642>
 8006368:	aa27      	add	r2, sp, #156	; 0x9c
 800636a:	9908      	ldr	r1, [sp, #32]
 800636c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800636e:	f003 ff39 	bl	800a1e4 <__sprint_r>
 8006372:	2800      	cmp	r0, #0
 8006374:	f47f ae10 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006378:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800637a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800637c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800637e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006380:	428a      	cmp	r2, r1
 8006382:	bfac      	ite	ge
 8006384:	189b      	addge	r3, r3, r2
 8006386:	185b      	addlt	r3, r3, r1
 8006388:	930b      	str	r3, [sp, #44]	; 0x2c
 800638a:	2c00      	cmp	r4, #0
 800638c:	f040 82da 	bne.w	8006944 <_vfprintf_r+0xc0c>
 8006390:	2300      	movs	r3, #0
 8006392:	9328      	str	r3, [sp, #160]	; 0xa0
 8006394:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006398:	e50f      	b.n	8005dba <_vfprintf_r+0x82>
 800639a:	9311      	str	r3, [sp, #68]	; 0x44
 800639c:	46ab      	mov	fp, r5
 800639e:	2a00      	cmp	r2, #0
 80063a0:	f041 803d 	bne.w	800741e <_vfprintf_r+0x16e6>
 80063a4:	9b07      	ldr	r3, [sp, #28]
 80063a6:	4829      	ldr	r0, [pc, #164]	; (800644c <_vfprintf_r+0x714>)
 80063a8:	069c      	lsls	r4, r3, #26
 80063aa:	f140 8146 	bpl.w	800663a <_vfprintf_r+0x902>
 80063ae:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80063b0:	3707      	adds	r7, #7
 80063b2:	f027 0307 	bic.w	r3, r7, #7
 80063b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80063ba:	f103 0208 	add.w	r2, r3, #8
 80063be:	920e      	str	r2, [sp, #56]	; 0x38
 80063c0:	9a07      	ldr	r2, [sp, #28]
 80063c2:	f012 0701 	ands.w	r7, r2, #1
 80063c6:	f000 82eb 	beq.w	80069a0 <_vfprintf_r+0xc68>
 80063ca:	ea54 0305 	orrs.w	r3, r4, r5
 80063ce:	f000 8582 	beq.w	8006ed6 <_vfprintf_r+0x119e>
 80063d2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80063d6:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 80063da:	2700      	movs	r7, #0
 80063dc:	9a07      	ldr	r2, [sp, #28]
 80063de:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80063e2:	2330      	movs	r3, #48	; 0x30
 80063e4:	45bb      	cmp	fp, r7
 80063e6:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 80063ea:	f042 0302 	orr.w	r3, r2, #2
 80063ee:	f2c0 873b 	blt.w	8007268 <_vfprintf_r+0x1530>
 80063f2:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80063f6:	f043 0302 	orr.w	r3, r3, #2
 80063fa:	9307      	str	r3, [sp, #28]
 80063fc:	ae34      	add	r6, sp, #208	; 0xd0
 80063fe:	0923      	lsrs	r3, r4, #4
 8006400:	f004 010f 	and.w	r1, r4, #15
 8006404:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006408:	092a      	lsrs	r2, r5, #4
 800640a:	461c      	mov	r4, r3
 800640c:	4615      	mov	r5, r2
 800640e:	5c43      	ldrb	r3, [r0, r1]
 8006410:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8006414:	ea54 0305 	orrs.w	r3, r4, r5
 8006418:	d1f1      	bne.n	80063fe <_vfprintf_r+0x6c6>
 800641a:	e69d      	b.n	8006158 <_vfprintf_r+0x420>
 800641c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800641e:	9311      	str	r3, [sp, #68]	; 0x44
 8006420:	680a      	ldr	r2, [r1, #0]
 8006422:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8006426:	2300      	movs	r3, #0
 8006428:	460a      	mov	r2, r1
 800642a:	461f      	mov	r7, r3
 800642c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006430:	3204      	adds	r2, #4
 8006432:	2301      	movs	r3, #1
 8006434:	9309      	str	r3, [sp, #36]	; 0x24
 8006436:	46bb      	mov	fp, r7
 8006438:	9713      	str	r7, [sp, #76]	; 0x4c
 800643a:	920e      	str	r2, [sp, #56]	; 0x38
 800643c:	930d      	str	r3, [sp, #52]	; 0x34
 800643e:	ae2a      	add	r6, sp, #168	; 0xa8
 8006440:	e698      	b.n	8006174 <_vfprintf_r+0x43c>
 8006442:	bf00      	nop
 8006444:	0800abf0 	.word	0x0800abf0
 8006448:	0800abe0 	.word	0x0800abe0
 800644c:	0800ab9c 	.word	0x0800ab9c
 8006450:	9311      	str	r3, [sp, #68]	; 0x44
 8006452:	46ab      	mov	fp, r5
 8006454:	2a00      	cmp	r2, #0
 8006456:	f040 87ea 	bne.w	800742e <_vfprintf_r+0x16f6>
 800645a:	9b07      	ldr	r3, [sp, #28]
 800645c:	069b      	lsls	r3, r3, #26
 800645e:	d574      	bpl.n	800654a <_vfprintf_r+0x812>
 8006460:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006462:	3707      	adds	r7, #7
 8006464:	f027 0707 	bic.w	r7, r7, #7
 8006468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800646c:	f107 0108 	add.w	r1, r7, #8
 8006470:	910e      	str	r1, [sp, #56]	; 0x38
 8006472:	4614      	mov	r4, r2
 8006474:	461d      	mov	r5, r3
 8006476:	2a00      	cmp	r2, #0
 8006478:	f173 0300 	sbcs.w	r3, r3, #0
 800647c:	f2c0 843a 	blt.w	8006cf4 <_vfprintf_r+0xfbc>
 8006480:	f1bb 0f00 	cmp.w	fp, #0
 8006484:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006488:	f2c0 8368 	blt.w	8006b5c <_vfprintf_r+0xe24>
 800648c:	9b07      	ldr	r3, [sp, #28]
 800648e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006492:	9307      	str	r3, [sp, #28]
 8006494:	ea54 0305 	orrs.w	r3, r4, r5
 8006498:	f47f ae44 	bne.w	8006124 <_vfprintf_r+0x3ec>
 800649c:	f1bb 0f00 	cmp.w	fp, #0
 80064a0:	f040 8408 	bne.w	8006cb4 <_vfprintf_r+0xf7c>
 80064a4:	f04f 0b00 	mov.w	fp, #0
 80064a8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80064ac:	ae34      	add	r6, sp, #208	; 0xd0
 80064ae:	e656      	b.n	800615e <_vfprintf_r+0x426>
 80064b0:	9b07      	ldr	r3, [sp, #28]
 80064b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064b6:	9307      	str	r3, [sp, #28]
 80064b8:	f898 3000 	ldrb.w	r3, [r8]
 80064bc:	e4b0      	b.n	8005e20 <_vfprintf_r+0xe8>
 80064be:	f898 3000 	ldrb.w	r3, [r8]
 80064c2:	2b6c      	cmp	r3, #108	; 0x6c
 80064c4:	f000 85d5 	beq.w	8007072 <_vfprintf_r+0x133a>
 80064c8:	9807      	ldr	r0, [sp, #28]
 80064ca:	f040 0010 	orr.w	r0, r0, #16
 80064ce:	9007      	str	r0, [sp, #28]
 80064d0:	e4a6      	b.n	8005e20 <_vfprintf_r+0xe8>
 80064d2:	2a00      	cmp	r2, #0
 80064d4:	f040 879f 	bne.w	8007416 <_vfprintf_r+0x16de>
 80064d8:	9b07      	ldr	r3, [sp, #28]
 80064da:	069f      	lsls	r7, r3, #26
 80064dc:	f140 84e4 	bpl.w	8006ea8 <_vfprintf_r+0x1170>
 80064e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064e4:	6813      	ldr	r3, [r2, #0]
 80064e6:	17cd      	asrs	r5, r1, #31
 80064e8:	4608      	mov	r0, r1
 80064ea:	3204      	adds	r2, #4
 80064ec:	4629      	mov	r1, r5
 80064ee:	920e      	str	r2, [sp, #56]	; 0x38
 80064f0:	e9c3 0100 	strd	r0, r1, [r3]
 80064f4:	e461      	b.n	8005dba <_vfprintf_r+0x82>
 80064f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	930c      	str	r3, [sp, #48]	; 0x30
 80064fc:	4618      	mov	r0, r3
 80064fe:	2800      	cmp	r0, #0
 8006500:	4623      	mov	r3, r4
 8006502:	f103 0304 	add.w	r3, r3, #4
 8006506:	f6ff aced 	blt.w	8005ee4 <_vfprintf_r+0x1ac>
 800650a:	930e      	str	r3, [sp, #56]	; 0x38
 800650c:	f898 3000 	ldrb.w	r3, [r8]
 8006510:	e486      	b.n	8005e20 <_vfprintf_r+0xe8>
 8006512:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006516:	2300      	movs	r3, #0
 8006518:	461c      	mov	r4, r3
 800651a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800651e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006522:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8006526:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800652a:	2809      	cmp	r0, #9
 800652c:	d9f5      	bls.n	800651a <_vfprintf_r+0x7e2>
 800652e:	940c      	str	r4, [sp, #48]	; 0x30
 8006530:	e478      	b.n	8005e24 <_vfprintf_r+0xec>
 8006532:	9311      	str	r3, [sp, #68]	; 0x44
 8006534:	46ab      	mov	fp, r5
 8006536:	2a00      	cmp	r2, #0
 8006538:	f040 8769 	bne.w	800740e <_vfprintf_r+0x16d6>
 800653c:	9b07      	ldr	r3, [sp, #28]
 800653e:	f043 0310 	orr.w	r3, r3, #16
 8006542:	9307      	str	r3, [sp, #28]
 8006544:	9b07      	ldr	r3, [sp, #28]
 8006546:	069b      	lsls	r3, r3, #26
 8006548:	d48a      	bmi.n	8006460 <_vfprintf_r+0x728>
 800654a:	9b07      	ldr	r3, [sp, #28]
 800654c:	06df      	lsls	r7, r3, #27
 800654e:	f100 8294 	bmi.w	8006a7a <_vfprintf_r+0xd42>
 8006552:	9b07      	ldr	r3, [sp, #28]
 8006554:	065e      	lsls	r6, r3, #25
 8006556:	f140 8290 	bpl.w	8006a7a <_vfprintf_r+0xd42>
 800655a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800655c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8006560:	3104      	adds	r1, #4
 8006562:	17e5      	asrs	r5, r4, #31
 8006564:	4622      	mov	r2, r4
 8006566:	462b      	mov	r3, r5
 8006568:	910e      	str	r1, [sp, #56]	; 0x38
 800656a:	e784      	b.n	8006476 <_vfprintf_r+0x73e>
 800656c:	9311      	str	r3, [sp, #68]	; 0x44
 800656e:	46ab      	mov	fp, r5
 8006570:	2a00      	cmp	r2, #0
 8006572:	f040 8770 	bne.w	8007456 <_vfprintf_r+0x171e>
 8006576:	9b07      	ldr	r3, [sp, #28]
 8006578:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800657a:	071d      	lsls	r5, r3, #28
 800657c:	f107 0707 	add.w	r7, r7, #7
 8006580:	f140 8487 	bpl.w	8006e92 <_vfprintf_r+0x115a>
 8006584:	f027 0307 	bic.w	r3, r7, #7
 8006588:	ed93 7b00 	vldr	d7, [r3]
 800658c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006590:	f103 0208 	add.w	r2, r3, #8
 8006594:	920e      	str	r2, [sp, #56]	; 0x38
 8006596:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800659a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800659e:	911a      	str	r1, [sp, #104]	; 0x68
 80065a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80065a2:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 80065a6:	f04f 32ff 	mov.w	r2, #4294967295
 80065aa:	4620      	mov	r0, r4
 80065ac:	4629      	mov	r1, r5
 80065ae:	4bb5      	ldr	r3, [pc, #724]	; (8006884 <_vfprintf_r+0xb4c>)
 80065b0:	f7fd fd88 	bl	80040c4 <__aeabi_dcmpun>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	f040 83eb 	bne.w	8006d90 <_vfprintf_r+0x1058>
 80065ba:	f04f 32ff 	mov.w	r2, #4294967295
 80065be:	4bb1      	ldr	r3, [pc, #708]	; (8006884 <_vfprintf_r+0xb4c>)
 80065c0:	4620      	mov	r0, r4
 80065c2:	4629      	mov	r1, r5
 80065c4:	f7fd fd60 	bl	8004088 <__aeabi_dcmple>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	f040 83e1 	bne.w	8006d90 <_vfprintf_r+0x1058>
 80065ce:	2200      	movs	r2, #0
 80065d0:	2300      	movs	r3, #0
 80065d2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80065d6:	f7fd fd4d 	bl	8004074 <__aeabi_dcmplt>
 80065da:	2800      	cmp	r0, #0
 80065dc:	f040 864a 	bne.w	8007274 <_vfprintf_r+0x153c>
 80065e0:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80065e4:	4ea8      	ldr	r6, [pc, #672]	; (8006888 <_vfprintf_r+0xb50>)
 80065e6:	4ba9      	ldr	r3, [pc, #676]	; (800688c <_vfprintf_r+0xb54>)
 80065e8:	9907      	ldr	r1, [sp, #28]
 80065ea:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80065ee:	9107      	str	r1, [sp, #28]
 80065f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80065f2:	2203      	movs	r2, #3
 80065f4:	f04f 0b00 	mov.w	fp, #0
 80065f8:	9209      	str	r2, [sp, #36]	; 0x24
 80065fa:	2947      	cmp	r1, #71	; 0x47
 80065fc:	bfd8      	it	le
 80065fe:	461e      	movle	r6, r3
 8006600:	920d      	str	r2, [sp, #52]	; 0x34
 8006602:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8006606:	e5b1      	b.n	800616c <_vfprintf_r+0x434>
 8006608:	9b07      	ldr	r3, [sp, #28]
 800660a:	f043 0308 	orr.w	r3, r3, #8
 800660e:	9307      	str	r3, [sp, #28]
 8006610:	f898 3000 	ldrb.w	r3, [r8]
 8006614:	e404      	b.n	8005e20 <_vfprintf_r+0xe8>
 8006616:	9311      	str	r3, [sp, #68]	; 0x44
 8006618:	46ab      	mov	fp, r5
 800661a:	2a00      	cmp	r2, #0
 800661c:	f43f ad67 	beq.w	80060ee <_vfprintf_r+0x3b6>
 8006620:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006624:	e563      	b.n	80060ee <_vfprintf_r+0x3b6>
 8006626:	9311      	str	r3, [sp, #68]	; 0x44
 8006628:	46ab      	mov	fp, r5
 800662a:	2a00      	cmp	r2, #0
 800662c:	f040 870f 	bne.w	800744e <_vfprintf_r+0x1716>
 8006630:	9b07      	ldr	r3, [sp, #28]
 8006632:	4897      	ldr	r0, [pc, #604]	; (8006890 <_vfprintf_r+0xb58>)
 8006634:	069c      	lsls	r4, r3, #26
 8006636:	f53f aeba 	bmi.w	80063ae <_vfprintf_r+0x676>
 800663a:	9b07      	ldr	r3, [sp, #28]
 800663c:	06d9      	lsls	r1, r3, #27
 800663e:	f140 8398 	bpl.w	8006d72 <_vfprintf_r+0x103a>
 8006642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006644:	4613      	mov	r3, r2
 8006646:	3304      	adds	r3, #4
 8006648:	6814      	ldr	r4, [r2, #0]
 800664a:	930e      	str	r3, [sp, #56]	; 0x38
 800664c:	2500      	movs	r5, #0
 800664e:	e6b7      	b.n	80063c0 <_vfprintf_r+0x688>
 8006650:	f898 3000 	ldrb.w	r3, [r8]
 8006654:	2900      	cmp	r1, #0
 8006656:	f47f abe3 	bne.w	8005e20 <_vfprintf_r+0xe8>
 800665a:	2201      	movs	r2, #1
 800665c:	2120      	movs	r1, #32
 800665e:	f7ff bbdf 	b.w	8005e20 <_vfprintf_r+0xe8>
 8006662:	9b07      	ldr	r3, [sp, #28]
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	9307      	str	r3, [sp, #28]
 800666a:	f898 3000 	ldrb.w	r3, [r8]
 800666e:	f7ff bbd7 	b.w	8005e20 <_vfprintf_r+0xe8>
 8006672:	9b07      	ldr	r3, [sp, #28]
 8006674:	f043 0320 	orr.w	r3, r3, #32
 8006678:	9307      	str	r3, [sp, #28]
 800667a:	f898 3000 	ldrb.w	r3, [r8]
 800667e:	f7ff bbcf 	b.w	8005e20 <_vfprintf_r+0xe8>
 8006682:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006684:	9311      	str	r3, [sp, #68]	; 0x44
 8006686:	6816      	ldr	r6, [r2, #0]
 8006688:	2400      	movs	r4, #0
 800668a:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 800668e:	1d17      	adds	r7, r2, #4
 8006690:	2e00      	cmp	r6, #0
 8006692:	f000 85b7 	beq.w	8007204 <_vfprintf_r+0x14cc>
 8006696:	2d00      	cmp	r5, #0
 8006698:	f2c0 8502 	blt.w	80070a0 <_vfprintf_r+0x1368>
 800669c:	462a      	mov	r2, r5
 800669e:	4621      	mov	r1, r4
 80066a0:	4630      	mov	r0, r6
 80066a2:	f002 fed5 	bl	8009450 <memchr>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	f000 861c 	beq.w	80072e4 <_vfprintf_r+0x15ac>
 80066ac:	1b83      	subs	r3, r0, r6
 80066ae:	930d      	str	r3, [sp, #52]	; 0x34
 80066b0:	46a3      	mov	fp, r4
 80066b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80066b6:	970e      	str	r7, [sp, #56]	; 0x38
 80066b8:	9309      	str	r3, [sp, #36]	; 0x24
 80066ba:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 80066be:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80066c2:	e553      	b.n	800616c <_vfprintf_r+0x434>
 80066c4:	f898 3000 	ldrb.w	r3, [r8]
 80066c8:	2201      	movs	r2, #1
 80066ca:	212b      	movs	r1, #43	; 0x2b
 80066cc:	f7ff bba8 	b.w	8005e20 <_vfprintf_r+0xe8>
 80066d0:	486f      	ldr	r0, [pc, #444]	; (8006890 <_vfprintf_r+0xb58>)
 80066d2:	9211      	str	r2, [sp, #68]	; 0x44
 80066d4:	f1bb 0f00 	cmp.w	fp, #0
 80066d8:	f040 8173 	bne.w	80069c2 <_vfprintf_r+0xc8a>
 80066dc:	465f      	mov	r7, fp
 80066de:	e6e1      	b.n	80064a4 <_vfprintf_r+0x76c>
 80066e0:	9311      	str	r3, [sp, #68]	; 0x44
 80066e2:	2a00      	cmp	r2, #0
 80066e4:	f040 86ab 	bne.w	800743e <_vfprintf_r+0x1706>
 80066e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80066ea:	2a00      	cmp	r2, #0
 80066ec:	f43f ac4d 	beq.w	8005f8a <_vfprintf_r+0x252>
 80066f0:	2300      	movs	r3, #0
 80066f2:	2101      	movs	r1, #1
 80066f4:	461f      	mov	r7, r3
 80066f6:	9109      	str	r1, [sp, #36]	; 0x24
 80066f8:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 80066fc:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006700:	469b      	mov	fp, r3
 8006702:	9313      	str	r3, [sp, #76]	; 0x4c
 8006704:	910d      	str	r1, [sp, #52]	; 0x34
 8006706:	ae2a      	add	r6, sp, #168	; 0xa8
 8006708:	e534      	b.n	8006174 <_vfprintf_r+0x43c>
 800670a:	f1bb 0f00 	cmp.w	fp, #0
 800670e:	f000 85da 	beq.w	80072c6 <_vfprintf_r+0x158e>
 8006712:	2700      	movs	r7, #0
 8006714:	2400      	movs	r4, #0
 8006716:	2500      	movs	r5, #0
 8006718:	e475      	b.n	8006006 <_vfprintf_r+0x2ce>
 800671a:	485d      	ldr	r0, [pc, #372]	; (8006890 <_vfprintf_r+0xb58>)
 800671c:	9307      	str	r3, [sp, #28]
 800671e:	9211      	str	r2, [sp, #68]	; 0x44
 8006720:	ea54 0305 	orrs.w	r3, r4, r5
 8006724:	970e      	str	r7, [sp, #56]	; 0x38
 8006726:	f04f 0700 	mov.w	r7, #0
 800672a:	f47f ae67 	bne.w	80063fc <_vfprintf_r+0x6c4>
 800672e:	2400      	movs	r4, #0
 8006730:	2500      	movs	r5, #0
 8006732:	e663      	b.n	80063fc <_vfprintf_r+0x6c4>
 8006734:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006736:	e56d      	b.n	8006214 <_vfprintf_r+0x4dc>
 8006738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800673a:	2b65      	cmp	r3, #101	; 0x65
 800673c:	f340 80ae 	ble.w	800689c <_vfprintf_r+0xb64>
 8006740:	2200      	movs	r2, #0
 8006742:	2300      	movs	r3, #0
 8006744:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006748:	f7fd fc8a 	bl	8004060 <__aeabi_dcmpeq>
 800674c:	2800      	cmp	r0, #0
 800674e:	f000 813a 	beq.w	80069c6 <_vfprintf_r+0xc8e>
 8006752:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006754:	4a4f      	ldr	r2, [pc, #316]	; (8006894 <_vfprintf_r+0xb5c>)
 8006756:	f8c9 2000 	str.w	r2, [r9]
 800675a:	3301      	adds	r3, #1
 800675c:	3401      	adds	r4, #1
 800675e:	2201      	movs	r2, #1
 8006760:	2b07      	cmp	r3, #7
 8006762:	9429      	str	r4, [sp, #164]	; 0xa4
 8006764:	9328      	str	r3, [sp, #160]	; 0xa0
 8006766:	f8c9 2004 	str.w	r2, [r9, #4]
 800676a:	f300 83ce 	bgt.w	8006f0a <_vfprintf_r+0x11d2>
 800676e:	f109 0908 	add.w	r9, r9, #8
 8006772:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006774:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006776:	4293      	cmp	r3, r2
 8006778:	db03      	blt.n	8006782 <_vfprintf_r+0xa4a>
 800677a:	9b07      	ldr	r3, [sp, #28]
 800677c:	07d8      	lsls	r0, r3, #31
 800677e:	f57f adb9 	bpl.w	80062f4 <_vfprintf_r+0x5bc>
 8006782:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006784:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006786:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006788:	f8c9 2000 	str.w	r2, [r9]
 800678c:	3301      	adds	r3, #1
 800678e:	440c      	add	r4, r1
 8006790:	2b07      	cmp	r3, #7
 8006792:	9429      	str	r4, [sp, #164]	; 0xa4
 8006794:	f8c9 1004 	str.w	r1, [r9, #4]
 8006798:	9328      	str	r3, [sp, #160]	; 0xa0
 800679a:	f300 8474 	bgt.w	8007086 <_vfprintf_r+0x134e>
 800679e:	f109 0908 	add.w	r9, r9, #8
 80067a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067a4:	1e5d      	subs	r5, r3, #1
 80067a6:	2d00      	cmp	r5, #0
 80067a8:	f77f ada4 	ble.w	80062f4 <_vfprintf_r+0x5bc>
 80067ac:	4a3a      	ldr	r2, [pc, #232]	; (8006898 <_vfprintf_r+0xb60>)
 80067ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80067b0:	920f      	str	r2, [sp, #60]	; 0x3c
 80067b2:	2d10      	cmp	r5, #16
 80067b4:	f340 81b4 	ble.w	8006b20 <_vfprintf_r+0xde8>
 80067b8:	2610      	movs	r6, #16
 80067ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80067bc:	f8dd b020 	ldr.w	fp, [sp, #32]
 80067c0:	e005      	b.n	80067ce <_vfprintf_r+0xa96>
 80067c2:	f109 0908 	add.w	r9, r9, #8
 80067c6:	3d10      	subs	r5, #16
 80067c8:	2d10      	cmp	r5, #16
 80067ca:	f340 81a9 	ble.w	8006b20 <_vfprintf_r+0xde8>
 80067ce:	3301      	adds	r3, #1
 80067d0:	3410      	adds	r4, #16
 80067d2:	2b07      	cmp	r3, #7
 80067d4:	9429      	str	r4, [sp, #164]	; 0xa4
 80067d6:	9328      	str	r3, [sp, #160]	; 0xa0
 80067d8:	f8c9 a000 	str.w	sl, [r9]
 80067dc:	f8c9 6004 	str.w	r6, [r9, #4]
 80067e0:	ddef      	ble.n	80067c2 <_vfprintf_r+0xa8a>
 80067e2:	aa27      	add	r2, sp, #156	; 0x9c
 80067e4:	4659      	mov	r1, fp
 80067e6:	4638      	mov	r0, r7
 80067e8:	f003 fcfc 	bl	800a1e4 <__sprint_r>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	f47f abd3 	bne.w	8005f98 <_vfprintf_r+0x260>
 80067f2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80067f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80067f6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80067fa:	e7e4      	b.n	80067c6 <_vfprintf_r+0xa8e>
 80067fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006800:	1a9f      	subs	r7, r3, r2
 8006802:	2f00      	cmp	r7, #0
 8006804:	f77f ad2a 	ble.w	800625c <_vfprintf_r+0x524>
 8006808:	4a23      	ldr	r2, [pc, #140]	; (8006898 <_vfprintf_r+0xb60>)
 800680a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800680c:	920f      	str	r2, [sp, #60]	; 0x3c
 800680e:	2f10      	cmp	r7, #16
 8006810:	dd2b      	ble.n	800686a <_vfprintf_r+0xb32>
 8006812:	464a      	mov	r2, r9
 8006814:	4621      	mov	r1, r4
 8006816:	46b9      	mov	r9, r7
 8006818:	2510      	movs	r5, #16
 800681a:	4637      	mov	r7, r6
 800681c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800681e:	9e08      	ldr	r6, [sp, #32]
 8006820:	e006      	b.n	8006830 <_vfprintf_r+0xaf8>
 8006822:	f1a9 0910 	sub.w	r9, r9, #16
 8006826:	f1b9 0f10 	cmp.w	r9, #16
 800682a:	f102 0208 	add.w	r2, r2, #8
 800682e:	dd18      	ble.n	8006862 <_vfprintf_r+0xb2a>
 8006830:	3301      	adds	r3, #1
 8006832:	3110      	adds	r1, #16
 8006834:	2b07      	cmp	r3, #7
 8006836:	9129      	str	r1, [sp, #164]	; 0xa4
 8006838:	9328      	str	r3, [sp, #160]	; 0xa0
 800683a:	f8c2 a000 	str.w	sl, [r2]
 800683e:	6055      	str	r5, [r2, #4]
 8006840:	ddef      	ble.n	8006822 <_vfprintf_r+0xaea>
 8006842:	aa27      	add	r2, sp, #156	; 0x9c
 8006844:	4631      	mov	r1, r6
 8006846:	4620      	mov	r0, r4
 8006848:	f003 fccc 	bl	800a1e4 <__sprint_r>
 800684c:	2800      	cmp	r0, #0
 800684e:	f47f aba3 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006852:	f1a9 0910 	sub.w	r9, r9, #16
 8006856:	f1b9 0f10 	cmp.w	r9, #16
 800685a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800685c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800685e:	aa34      	add	r2, sp, #208	; 0xd0
 8006860:	dce6      	bgt.n	8006830 <_vfprintf_r+0xaf8>
 8006862:	463e      	mov	r6, r7
 8006864:	460c      	mov	r4, r1
 8006866:	464f      	mov	r7, r9
 8006868:	4691      	mov	r9, r2
 800686a:	3301      	adds	r3, #1
 800686c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800686e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006870:	443c      	add	r4, r7
 8006872:	2b07      	cmp	r3, #7
 8006874:	9429      	str	r4, [sp, #164]	; 0xa4
 8006876:	e889 0084 	stmia.w	r9, {r2, r7}
 800687a:	f300 822b 	bgt.w	8006cd4 <_vfprintf_r+0xf9c>
 800687e:	f109 0908 	add.w	r9, r9, #8
 8006882:	e4eb      	b.n	800625c <_vfprintf_r+0x524>
 8006884:	7fefffff 	.word	0x7fefffff
 8006888:	0800ab90 	.word	0x0800ab90
 800688c:	0800ab8c 	.word	0x0800ab8c
 8006890:	0800abb0 	.word	0x0800abb0
 8006894:	0800abcc 	.word	0x0800abcc
 8006898:	0800abe0 	.word	0x0800abe0
 800689c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800689e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	f340 81d0 	ble.w	8006c46 <_vfprintf_r+0xf0e>
 80068a6:	3501      	adds	r5, #1
 80068a8:	3401      	adds	r4, #1
 80068aa:	2301      	movs	r3, #1
 80068ac:	2d07      	cmp	r5, #7
 80068ae:	9429      	str	r4, [sp, #164]	; 0xa4
 80068b0:	9528      	str	r5, [sp, #160]	; 0xa0
 80068b2:	f8c9 6000 	str.w	r6, [r9]
 80068b6:	f8c9 3004 	str.w	r3, [r9, #4]
 80068ba:	f300 81e1 	bgt.w	8006c80 <_vfprintf_r+0xf48>
 80068be:	f109 0908 	add.w	r9, r9, #8
 80068c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80068c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068c6:	f8c9 3000 	str.w	r3, [r9]
 80068ca:	3501      	adds	r5, #1
 80068cc:	4414      	add	r4, r2
 80068ce:	2d07      	cmp	r5, #7
 80068d0:	9429      	str	r4, [sp, #164]	; 0xa4
 80068d2:	9528      	str	r5, [sp, #160]	; 0xa0
 80068d4:	f8c9 2004 	str.w	r2, [r9, #4]
 80068d8:	f300 81df 	bgt.w	8006c9a <_vfprintf_r+0xf62>
 80068dc:	f109 0908 	add.w	r9, r9, #8
 80068e0:	2300      	movs	r3, #0
 80068e2:	2200      	movs	r2, #0
 80068e4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80068e8:	f7fd fbba 	bl	8004060 <__aeabi_dcmpeq>
 80068ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068ee:	2800      	cmp	r0, #0
 80068f0:	f040 80cc 	bne.w	8006a8c <_vfprintf_r+0xd54>
 80068f4:	3b01      	subs	r3, #1
 80068f6:	3501      	adds	r5, #1
 80068f8:	3601      	adds	r6, #1
 80068fa:	441c      	add	r4, r3
 80068fc:	2d07      	cmp	r5, #7
 80068fe:	9528      	str	r5, [sp, #160]	; 0xa0
 8006900:	9429      	str	r4, [sp, #164]	; 0xa4
 8006902:	f8c9 6000 	str.w	r6, [r9]
 8006906:	f8c9 3004 	str.w	r3, [r9, #4]
 800690a:	f300 81ac 	bgt.w	8006c66 <_vfprintf_r+0xf2e>
 800690e:	f109 0908 	add.w	r9, r9, #8
 8006912:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006914:	f8c9 2004 	str.w	r2, [r9, #4]
 8006918:	3501      	adds	r5, #1
 800691a:	4414      	add	r4, r2
 800691c:	ab23      	add	r3, sp, #140	; 0x8c
 800691e:	2d07      	cmp	r5, #7
 8006920:	9429      	str	r4, [sp, #164]	; 0xa4
 8006922:	9528      	str	r5, [sp, #160]	; 0xa0
 8006924:	f8c9 3000 	str.w	r3, [r9]
 8006928:	f77f ace2 	ble.w	80062f0 <_vfprintf_r+0x5b8>
 800692c:	aa27      	add	r2, sp, #156	; 0x9c
 800692e:	9908      	ldr	r1, [sp, #32]
 8006930:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006932:	f003 fc57 	bl	800a1e4 <__sprint_r>
 8006936:	2800      	cmp	r0, #0
 8006938:	f47f ab2e 	bne.w	8005f98 <_vfprintf_r+0x260>
 800693c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800693e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006942:	e4d7      	b.n	80062f4 <_vfprintf_r+0x5bc>
 8006944:	aa27      	add	r2, sp, #156	; 0x9c
 8006946:	9908      	ldr	r1, [sp, #32]
 8006948:	980a      	ldr	r0, [sp, #40]	; 0x28
 800694a:	f003 fc4b 	bl	800a1e4 <__sprint_r>
 800694e:	2800      	cmp	r0, #0
 8006950:	f43f ad1e 	beq.w	8006390 <_vfprintf_r+0x658>
 8006954:	f7ff bb20 	b.w	8005f98 <_vfprintf_r+0x260>
 8006958:	aa27      	add	r2, sp, #156	; 0x9c
 800695a:	9908      	ldr	r1, [sp, #32]
 800695c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800695e:	f003 fc41 	bl	800a1e4 <__sprint_r>
 8006962:	2800      	cmp	r0, #0
 8006964:	f47f ab18 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006968:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800696a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800696e:	e4ae      	b.n	80062ce <_vfprintf_r+0x596>
 8006970:	aa27      	add	r2, sp, #156	; 0x9c
 8006972:	9908      	ldr	r1, [sp, #32]
 8006974:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006976:	f003 fc35 	bl	800a1e4 <__sprint_r>
 800697a:	2800      	cmp	r0, #0
 800697c:	f47f ab0c 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006980:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006982:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006986:	e455      	b.n	8006234 <_vfprintf_r+0x4fc>
 8006988:	aa27      	add	r2, sp, #156	; 0x9c
 800698a:	9908      	ldr	r1, [sp, #32]
 800698c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800698e:	f003 fc29 	bl	800a1e4 <__sprint_r>
 8006992:	2800      	cmp	r0, #0
 8006994:	f47f ab00 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006998:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800699a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800699e:	e459      	b.n	8006254 <_vfprintf_r+0x51c>
 80069a0:	f1bb 0f00 	cmp.w	fp, #0
 80069a4:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80069a8:	f2c0 830d 	blt.w	8006fc6 <_vfprintf_r+0x128e>
 80069ac:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80069b0:	9307      	str	r3, [sp, #28]
 80069b2:	ea54 0305 	orrs.w	r3, r4, r5
 80069b6:	f47f ad21 	bne.w	80063fc <_vfprintf_r+0x6c4>
 80069ba:	f1bb 0f00 	cmp.w	fp, #0
 80069be:	f43f ae8d 	beq.w	80066dc <_vfprintf_r+0x9a4>
 80069c2:	2700      	movs	r7, #0
 80069c4:	e6b3      	b.n	800672e <_vfprintf_r+0x9f6>
 80069c6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80069c8:	2d00      	cmp	r5, #0
 80069ca:	f340 82aa 	ble.w	8006f22 <_vfprintf_r+0x11ea>
 80069ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069d2:	4293      	cmp	r3, r2
 80069d4:	bfa8      	it	ge
 80069d6:	4613      	movge	r3, r2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	461d      	mov	r5, r3
 80069dc:	dd0d      	ble.n	80069fa <_vfprintf_r+0xcc2>
 80069de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80069e0:	f8c9 6000 	str.w	r6, [r9]
 80069e4:	3301      	adds	r3, #1
 80069e6:	442c      	add	r4, r5
 80069e8:	2b07      	cmp	r3, #7
 80069ea:	9429      	str	r4, [sp, #164]	; 0xa4
 80069ec:	f8c9 5004 	str.w	r5, [r9, #4]
 80069f0:	9328      	str	r3, [sp, #160]	; 0xa0
 80069f2:	f300 8387 	bgt.w	8007104 <_vfprintf_r+0x13cc>
 80069f6:	f109 0908 	add.w	r9, r9, #8
 80069fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069fc:	2d00      	cmp	r5, #0
 80069fe:	bfa8      	it	ge
 8006a00:	1b5b      	subge	r3, r3, r5
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	461d      	mov	r5, r3
 8006a06:	f340 80be 	ble.w	8006b86 <_vfprintf_r+0xe4e>
 8006a0a:	4ab9      	ldr	r2, [pc, #740]	; (8006cf0 <_vfprintf_r+0xfb8>)
 8006a0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006a0e:	920f      	str	r2, [sp, #60]	; 0x3c
 8006a10:	2d10      	cmp	r5, #16
 8006a12:	f340 826d 	ble.w	8006ef0 <_vfprintf_r+0x11b8>
 8006a16:	4622      	mov	r2, r4
 8006a18:	2710      	movs	r7, #16
 8006a1a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006a1e:	9c08      	ldr	r4, [sp, #32]
 8006a20:	e005      	b.n	8006a2e <_vfprintf_r+0xcf6>
 8006a22:	f109 0908 	add.w	r9, r9, #8
 8006a26:	3d10      	subs	r5, #16
 8006a28:	2d10      	cmp	r5, #16
 8006a2a:	f340 8260 	ble.w	8006eee <_vfprintf_r+0x11b6>
 8006a2e:	3301      	adds	r3, #1
 8006a30:	3210      	adds	r2, #16
 8006a32:	2b07      	cmp	r3, #7
 8006a34:	9229      	str	r2, [sp, #164]	; 0xa4
 8006a36:	9328      	str	r3, [sp, #160]	; 0xa0
 8006a38:	f8c9 a000 	str.w	sl, [r9]
 8006a3c:	f8c9 7004 	str.w	r7, [r9, #4]
 8006a40:	ddef      	ble.n	8006a22 <_vfprintf_r+0xcea>
 8006a42:	aa27      	add	r2, sp, #156	; 0x9c
 8006a44:	4621      	mov	r1, r4
 8006a46:	4658      	mov	r0, fp
 8006a48:	f003 fbcc 	bl	800a1e4 <__sprint_r>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	f47f aaa3 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006a52:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006a54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006a56:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006a5a:	e7e4      	b.n	8006a26 <_vfprintf_r+0xcee>
 8006a5c:	aa27      	add	r2, sp, #156	; 0x9c
 8006a5e:	9908      	ldr	r1, [sp, #32]
 8006a60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a62:	f003 fbbf 	bl	800a1e4 <__sprint_r>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	f47f aa96 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006a6c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006a70:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006a72:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006a76:	f7ff bbcd 	b.w	8006214 <_vfprintf_r+0x4dc>
 8006a7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a7c:	6814      	ldr	r4, [r2, #0]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	3304      	adds	r3, #4
 8006a82:	17e5      	asrs	r5, r4, #31
 8006a84:	930e      	str	r3, [sp, #56]	; 0x38
 8006a86:	4622      	mov	r2, r4
 8006a88:	462b      	mov	r3, r5
 8006a8a:	e4f4      	b.n	8006476 <_vfprintf_r+0x73e>
 8006a8c:	1e5e      	subs	r6, r3, #1
 8006a8e:	2e00      	cmp	r6, #0
 8006a90:	f77f af3f 	ble.w	8006912 <_vfprintf_r+0xbda>
 8006a94:	4b96      	ldr	r3, [pc, #600]	; (8006cf0 <_vfprintf_r+0xfb8>)
 8006a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a98:	2e10      	cmp	r6, #16
 8006a9a:	f340 8110 	ble.w	8006cbe <_vfprintf_r+0xf86>
 8006a9e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8006aa2:	2710      	movs	r7, #16
 8006aa4:	46b0      	mov	r8, r6
 8006aa6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006aaa:	9e08      	ldr	r6, [sp, #32]
 8006aac:	e007      	b.n	8006abe <_vfprintf_r+0xd86>
 8006aae:	f109 0908 	add.w	r9, r9, #8
 8006ab2:	f1a8 0810 	sub.w	r8, r8, #16
 8006ab6:	f1b8 0f10 	cmp.w	r8, #16
 8006aba:	f340 80fd 	ble.w	8006cb8 <_vfprintf_r+0xf80>
 8006abe:	3501      	adds	r5, #1
 8006ac0:	3410      	adds	r4, #16
 8006ac2:	2d07      	cmp	r5, #7
 8006ac4:	9429      	str	r4, [sp, #164]	; 0xa4
 8006ac6:	9528      	str	r5, [sp, #160]	; 0xa0
 8006ac8:	f8c9 a000 	str.w	sl, [r9]
 8006acc:	f8c9 7004 	str.w	r7, [r9, #4]
 8006ad0:	dded      	ble.n	8006aae <_vfprintf_r+0xd76>
 8006ad2:	aa27      	add	r2, sp, #156	; 0x9c
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4658      	mov	r0, fp
 8006ad8:	f003 fb84 	bl	800a1e4 <__sprint_r>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	f47f aa5b 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006ae2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006ae4:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006ae6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006aea:	e7e2      	b.n	8006ab2 <_vfprintf_r+0xd7a>
 8006aec:	9907      	ldr	r1, [sp, #28]
 8006aee:	f011 0210 	ands.w	r2, r1, #16
 8006af2:	d020      	beq.n	8006b36 <_vfprintf_r+0xdfe>
 8006af4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006af6:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006afa:	f1bb 0f00 	cmp.w	fp, #0
 8006afe:	6804      	ldr	r4, [r0, #0]
 8006b00:	f100 0704 	add.w	r7, r0, #4
 8006b04:	f04f 0500 	mov.w	r5, #0
 8006b08:	db26      	blt.n	8006b58 <_vfprintf_r+0xe20>
 8006b0a:	460a      	mov	r2, r1
 8006b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b10:	9207      	str	r2, [sp, #28]
 8006b12:	ea54 0205 	orrs.w	r2, r4, r5
 8006b16:	970e      	str	r7, [sp, #56]	; 0x38
 8006b18:	461f      	mov	r7, r3
 8006b1a:	f47f ab03 	bne.w	8006124 <_vfprintf_r+0x3ec>
 8006b1e:	e4bd      	b.n	800649c <_vfprintf_r+0x764>
 8006b20:	3301      	adds	r3, #1
 8006b22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b24:	9328      	str	r3, [sp, #160]	; 0xa0
 8006b26:	442c      	add	r4, r5
 8006b28:	2b07      	cmp	r3, #7
 8006b2a:	9429      	str	r4, [sp, #164]	; 0xa4
 8006b2c:	e889 0024 	stmia.w	r9, {r2, r5}
 8006b30:	f77f abde 	ble.w	80062f0 <_vfprintf_r+0x5b8>
 8006b34:	e6fa      	b.n	800692c <_vfprintf_r+0xbf4>
 8006b36:	9907      	ldr	r1, [sp, #28]
 8006b38:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8006b3c:	f040 824a 	bne.w	8006fd4 <_vfprintf_r+0x129c>
 8006b40:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006b42:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006b46:	f1bb 0f00 	cmp.w	fp, #0
 8006b4a:	680c      	ldr	r4, [r1, #0]
 8006b4c:	f101 0704 	add.w	r7, r1, #4
 8006b50:	f04f 0500 	mov.w	r5, #0
 8006b54:	f280 811a 	bge.w	8006d8c <_vfprintf_r+0x1054>
 8006b58:	970e      	str	r7, [sp, #56]	; 0x38
 8006b5a:	461f      	mov	r7, r3
 8006b5c:	ea54 0305 	orrs.w	r3, r4, r5
 8006b60:	f47f aae0 	bne.w	8006124 <_vfprintf_r+0x3ec>
 8006b64:	ae44      	add	r6, sp, #272	; 0x110
 8006b66:	3430      	adds	r4, #48	; 0x30
 8006b68:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8006b6c:	f7ff baf4 	b.w	8006158 <_vfprintf_r+0x420>
 8006b70:	aa27      	add	r2, sp, #156	; 0x9c
 8006b72:	9908      	ldr	r1, [sp, #32]
 8006b74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b76:	f003 fb35 	bl	800a1e4 <__sprint_r>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	f47f aa0c 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006b80:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006b82:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006b86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b8a:	4432      	add	r2, r6
 8006b8c:	4617      	mov	r7, r2
 8006b8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b90:	4293      	cmp	r3, r2
 8006b92:	db47      	blt.n	8006c24 <_vfprintf_r+0xeec>
 8006b94:	9a07      	ldr	r2, [sp, #28]
 8006b96:	07d2      	lsls	r2, r2, #31
 8006b98:	d444      	bmi.n	8006c24 <_vfprintf_r+0xeec>
 8006b9a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006b9c:	440e      	add	r6, r1
 8006b9e:	1bf5      	subs	r5, r6, r7
 8006ba0:	1acb      	subs	r3, r1, r3
 8006ba2:	429d      	cmp	r5, r3
 8006ba4:	bfa8      	it	ge
 8006ba6:	461d      	movge	r5, r3
 8006ba8:	2d00      	cmp	r5, #0
 8006baa:	462e      	mov	r6, r5
 8006bac:	dd0d      	ble.n	8006bca <_vfprintf_r+0xe92>
 8006bae:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8006bb0:	f8c9 7000 	str.w	r7, [r9]
 8006bb4:	3201      	adds	r2, #1
 8006bb6:	442c      	add	r4, r5
 8006bb8:	2a07      	cmp	r2, #7
 8006bba:	9429      	str	r4, [sp, #164]	; 0xa4
 8006bbc:	f8c9 5004 	str.w	r5, [r9, #4]
 8006bc0:	9228      	str	r2, [sp, #160]	; 0xa0
 8006bc2:	f300 832e 	bgt.w	8007222 <_vfprintf_r+0x14ea>
 8006bc6:	f109 0908 	add.w	r9, r9, #8
 8006bca:	2e00      	cmp	r6, #0
 8006bcc:	bfac      	ite	ge
 8006bce:	1b9d      	subge	r5, r3, r6
 8006bd0:	461d      	movlt	r5, r3
 8006bd2:	2d00      	cmp	r5, #0
 8006bd4:	f77f ab8e 	ble.w	80062f4 <_vfprintf_r+0x5bc>
 8006bd8:	4a45      	ldr	r2, [pc, #276]	; (8006cf0 <_vfprintf_r+0xfb8>)
 8006bda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006bdc:	920f      	str	r2, [sp, #60]	; 0x3c
 8006bde:	2d10      	cmp	r5, #16
 8006be0:	dd9e      	ble.n	8006b20 <_vfprintf_r+0xde8>
 8006be2:	2610      	movs	r6, #16
 8006be4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006be6:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006bea:	e004      	b.n	8006bf6 <_vfprintf_r+0xebe>
 8006bec:	f109 0908 	add.w	r9, r9, #8
 8006bf0:	3d10      	subs	r5, #16
 8006bf2:	2d10      	cmp	r5, #16
 8006bf4:	dd94      	ble.n	8006b20 <_vfprintf_r+0xde8>
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	3410      	adds	r4, #16
 8006bfa:	2b07      	cmp	r3, #7
 8006bfc:	9429      	str	r4, [sp, #164]	; 0xa4
 8006bfe:	9328      	str	r3, [sp, #160]	; 0xa0
 8006c00:	f8c9 a000 	str.w	sl, [r9]
 8006c04:	f8c9 6004 	str.w	r6, [r9, #4]
 8006c08:	ddf0      	ble.n	8006bec <_vfprintf_r+0xeb4>
 8006c0a:	aa27      	add	r2, sp, #156	; 0x9c
 8006c0c:	4659      	mov	r1, fp
 8006c0e:	4638      	mov	r0, r7
 8006c10:	f003 fae8 	bl	800a1e4 <__sprint_r>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	f47f a9bf 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006c1a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006c1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006c1e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006c22:	e7e5      	b.n	8006bf0 <_vfprintf_r+0xeb8>
 8006c24:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8006c26:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006c28:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006c2a:	f8c9 1000 	str.w	r1, [r9]
 8006c2e:	3201      	adds	r2, #1
 8006c30:	4404      	add	r4, r0
 8006c32:	2a07      	cmp	r2, #7
 8006c34:	9429      	str	r4, [sp, #164]	; 0xa4
 8006c36:	f8c9 0004 	str.w	r0, [r9, #4]
 8006c3a:	9228      	str	r2, [sp, #160]	; 0xa0
 8006c3c:	f300 82cf 	bgt.w	80071de <_vfprintf_r+0x14a6>
 8006c40:	f109 0908 	add.w	r9, r9, #8
 8006c44:	e7a9      	b.n	8006b9a <_vfprintf_r+0xe62>
 8006c46:	9b07      	ldr	r3, [sp, #28]
 8006c48:	07df      	lsls	r7, r3, #31
 8006c4a:	f53f ae2c 	bmi.w	80068a6 <_vfprintf_r+0xb6e>
 8006c4e:	3501      	adds	r5, #1
 8006c50:	3401      	adds	r4, #1
 8006c52:	2301      	movs	r3, #1
 8006c54:	2d07      	cmp	r5, #7
 8006c56:	9429      	str	r4, [sp, #164]	; 0xa4
 8006c58:	9528      	str	r5, [sp, #160]	; 0xa0
 8006c5a:	f8c9 6000 	str.w	r6, [r9]
 8006c5e:	f8c9 3004 	str.w	r3, [r9, #4]
 8006c62:	f77f ae54 	ble.w	800690e <_vfprintf_r+0xbd6>
 8006c66:	aa27      	add	r2, sp, #156	; 0x9c
 8006c68:	9908      	ldr	r1, [sp, #32]
 8006c6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006c6c:	f003 faba 	bl	800a1e4 <__sprint_r>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	f47f a991 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006c76:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006c78:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006c7a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006c7e:	e648      	b.n	8006912 <_vfprintf_r+0xbda>
 8006c80:	aa27      	add	r2, sp, #156	; 0x9c
 8006c82:	9908      	ldr	r1, [sp, #32]
 8006c84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006c86:	f003 faad 	bl	800a1e4 <__sprint_r>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	f47f a984 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006c90:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006c92:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006c94:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006c98:	e613      	b.n	80068c2 <_vfprintf_r+0xb8a>
 8006c9a:	aa27      	add	r2, sp, #156	; 0x9c
 8006c9c:	9908      	ldr	r1, [sp, #32]
 8006c9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ca0:	f003 faa0 	bl	800a1e4 <__sprint_r>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	f47f a977 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006caa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006cac:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006cae:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006cb2:	e615      	b.n	80068e0 <_vfprintf_r+0xba8>
 8006cb4:	2400      	movs	r4, #0
 8006cb6:	e755      	b.n	8006b64 <_vfprintf_r+0xe2c>
 8006cb8:	4646      	mov	r6, r8
 8006cba:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8006cbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cc0:	3501      	adds	r5, #1
 8006cc2:	4434      	add	r4, r6
 8006cc4:	2d07      	cmp	r5, #7
 8006cc6:	9429      	str	r4, [sp, #164]	; 0xa4
 8006cc8:	9528      	str	r5, [sp, #160]	; 0xa0
 8006cca:	e889 0048 	stmia.w	r9, {r3, r6}
 8006cce:	f77f ae1e 	ble.w	800690e <_vfprintf_r+0xbd6>
 8006cd2:	e7c8      	b.n	8006c66 <_vfprintf_r+0xf2e>
 8006cd4:	aa27      	add	r2, sp, #156	; 0x9c
 8006cd6:	9908      	ldr	r1, [sp, #32]
 8006cd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006cda:	f003 fa83 	bl	800a1e4 <__sprint_r>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	f47f a95a 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006ce4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006ce6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006cea:	f7ff bab7 	b.w	800625c <_vfprintf_r+0x524>
 8006cee:	bf00      	nop
 8006cf0:	0800abe0 	.word	0x0800abe0
 8006cf4:	4264      	negs	r4, r4
 8006cf6:	f04f 072d 	mov.w	r7, #45	; 0x2d
 8006cfa:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8006cfe:	f1bb 0f00 	cmp.w	fp, #0
 8006d02:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006d06:	f6ff aa0d 	blt.w	8006124 <_vfprintf_r+0x3ec>
 8006d0a:	9b07      	ldr	r3, [sp, #28]
 8006d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d10:	9307      	str	r3, [sp, #28]
 8006d12:	f7ff ba07 	b.w	8006124 <_vfprintf_r+0x3ec>
 8006d16:	9907      	ldr	r1, [sp, #28]
 8006d18:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8006d1c:	d017      	beq.n	8006d4e <_vfprintf_r+0x1016>
 8006d1e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006d20:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8006d24:	4603      	mov	r3, r0
 8006d26:	f1bb 0f00 	cmp.w	fp, #0
 8006d2a:	f103 0304 	add.w	r3, r3, #4
 8006d2e:	8804      	ldrh	r4, [r0, #0]
 8006d30:	f04f 0500 	mov.w	r5, #0
 8006d34:	f2c0 831b 	blt.w	800736e <_vfprintf_r+0x1636>
 8006d38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006d3c:	9107      	str	r1, [sp, #28]
 8006d3e:	ea54 0105 	orrs.w	r1, r4, r5
 8006d42:	930e      	str	r3, [sp, #56]	; 0x38
 8006d44:	f43f ace1 	beq.w	800670a <_vfprintf_r+0x9d2>
 8006d48:	4617      	mov	r7, r2
 8006d4a:	f7ff b95c 	b.w	8006006 <_vfprintf_r+0x2ce>
 8006d4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006d50:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006d54:	f1bb 0f00 	cmp.w	fp, #0
 8006d58:	680c      	ldr	r4, [r1, #0]
 8006d5a:	f101 0704 	add.w	r7, r1, #4
 8006d5e:	f04f 0500 	mov.w	r5, #0
 8006d62:	db02      	blt.n	8006d6a <_vfprintf_r+0x1032>
 8006d64:	9a07      	ldr	r2, [sp, #28]
 8006d66:	f7ff b9af 	b.w	80060c8 <_vfprintf_r+0x390>
 8006d6a:	970e      	str	r7, [sp, #56]	; 0x38
 8006d6c:	2700      	movs	r7, #0
 8006d6e:	f7ff b94a 	b.w	8006006 <_vfprintf_r+0x2ce>
 8006d72:	9b07      	ldr	r3, [sp, #28]
 8006d74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d76:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	f000 8142 	beq.w	8007004 <_vfprintf_r+0x12cc>
 8006d80:	3304      	adds	r3, #4
 8006d82:	8814      	ldrh	r4, [r2, #0]
 8006d84:	930e      	str	r3, [sp, #56]	; 0x38
 8006d86:	2500      	movs	r5, #0
 8006d88:	f7ff bb1a 	b.w	80063c0 <_vfprintf_r+0x688>
 8006d8c:	9a07      	ldr	r2, [sp, #28]
 8006d8e:	e6bd      	b.n	8006b0c <_vfprintf_r+0xdd4>
 8006d90:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	f7fd f994 	bl	80040c4 <__aeabi_dcmpun>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	f040 82e8 	bne.w	8007372 <_vfprintf_r+0x163a>
 8006da2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006da4:	f1bb 3fff 	cmp.w	fp, #4294967295
 8006da8:	f023 0720 	bic.w	r7, r3, #32
 8006dac:	f000 825f 	beq.w	800726e <_vfprintf_r+0x1536>
 8006db0:	2f47      	cmp	r7, #71	; 0x47
 8006db2:	f000 8158 	beq.w	8007066 <_vfprintf_r+0x132e>
 8006db6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006db8:	9a07      	ldr	r2, [sp, #28]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dc0:	920f      	str	r2, [sp, #60]	; 0x3c
 8006dc2:	f2c0 825c 	blt.w	800727e <_vfprintf_r+0x1546>
 8006dc6:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8006dca:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8006dce:	2300      	movs	r3, #0
 8006dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dd4:	2b66      	cmp	r3, #102	; 0x66
 8006dd6:	f000 8233 	beq.w	8007240 <_vfprintf_r+0x1508>
 8006dda:	2b46      	cmp	r3, #70	; 0x46
 8006ddc:	f000 8125 	beq.w	800702a <_vfprintf_r+0x12f2>
 8006de0:	2f45      	cmp	r7, #69	; 0x45
 8006de2:	bf0c      	ite	eq
 8006de4:	f10b 0501 	addeq.w	r5, fp, #1
 8006de8:	465d      	movne	r5, fp
 8006dea:	a825      	add	r0, sp, #148	; 0x94
 8006dec:	a922      	add	r1, sp, #136	; 0x88
 8006dee:	aa21      	add	r2, sp, #132	; 0x84
 8006df0:	2302      	movs	r3, #2
 8006df2:	9004      	str	r0, [sp, #16]
 8006df4:	9202      	str	r2, [sp, #8]
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	9501      	str	r5, [sp, #4]
 8006dfa:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8006dfe:	9103      	str	r1, [sp, #12]
 8006e00:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006e02:	f000 fc89 	bl	8007718 <_dtoa_r>
 8006e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e08:	2b67      	cmp	r3, #103	; 0x67
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	f040 8275 	bne.w	80072fa <_vfprintf_r+0x15c2>
 8006e10:	9b07      	ldr	r3, [sp, #28]
 8006e12:	07da      	lsls	r2, r3, #31
 8006e14:	f140 8294 	bpl.w	8007340 <_vfprintf_r+0x1608>
 8006e18:	1974      	adds	r4, r6, r5
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8006e22:	f7fd f91d 	bl	8004060 <__aeabi_dcmpeq>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	f040 8178 	bne.w	800711c <_vfprintf_r+0x13e4>
 8006e2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006e2e:	429c      	cmp	r4, r3
 8006e30:	d906      	bls.n	8006e40 <_vfprintf_r+0x1108>
 8006e32:	2130      	movs	r1, #48	; 0x30
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	9225      	str	r2, [sp, #148]	; 0x94
 8006e38:	7019      	strb	r1, [r3, #0]
 8006e3a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	d8f9      	bhi.n	8006e34 <_vfprintf_r+0x10fc>
 8006e40:	1b9b      	subs	r3, r3, r6
 8006e42:	2f47      	cmp	r7, #71	; 0x47
 8006e44:	9312      	str	r3, [sp, #72]	; 0x48
 8006e46:	f000 8156 	beq.w	80070f6 <_vfprintf_r+0x13be>
 8006e4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e4c:	2b65      	cmp	r3, #101	; 0x65
 8006e4e:	f340 8263 	ble.w	8007318 <_vfprintf_r+0x15e0>
 8006e52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e54:	2b66      	cmp	r3, #102	; 0x66
 8006e56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e58:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e5a:	f000 8226 	beq.w	80072aa <_vfprintf_r+0x1572>
 8006e5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e60:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006e62:	428a      	cmp	r2, r1
 8006e64:	f2c0 8214 	blt.w	8007290 <_vfprintf_r+0x1558>
 8006e68:	9b07      	ldr	r3, [sp, #28]
 8006e6a:	07db      	lsls	r3, r3, #31
 8006e6c:	f100 826a 	bmi.w	8007344 <_vfprintf_r+0x160c>
 8006e70:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006e74:	920d      	str	r2, [sp, #52]	; 0x34
 8006e76:	2267      	movs	r2, #103	; 0x67
 8006e78:	9211      	str	r2, [sp, #68]	; 0x44
 8006e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e7c:	2a00      	cmp	r2, #0
 8006e7e:	f040 8117 	bne.w	80070b0 <_vfprintf_r+0x1378>
 8006e82:	9309      	str	r3, [sp, #36]	; 0x24
 8006e84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e86:	9307      	str	r3, [sp, #28]
 8006e88:	4693      	mov	fp, r2
 8006e8a:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006e8e:	f7ff b96d 	b.w	800616c <_vfprintf_r+0x434>
 8006e92:	f027 0707 	bic.w	r7, r7, #7
 8006e96:	ed97 7b00 	vldr	d7, [r7]
 8006e9a:	f107 0308 	add.w	r3, r7, #8
 8006e9e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006ea2:	930e      	str	r3, [sp, #56]	; 0x38
 8006ea4:	f7ff bb77 	b.w	8006596 <_vfprintf_r+0x85e>
 8006ea8:	9b07      	ldr	r3, [sp, #28]
 8006eaa:	06de      	lsls	r6, r3, #27
 8006eac:	d40b      	bmi.n	8006ec6 <_vfprintf_r+0x118e>
 8006eae:	9b07      	ldr	r3, [sp, #28]
 8006eb0:	065d      	lsls	r5, r3, #25
 8006eb2:	d508      	bpl.n	8006ec6 <_vfprintf_r+0x118e>
 8006eb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006eb6:	6813      	ldr	r3, [r2, #0]
 8006eb8:	3204      	adds	r2, #4
 8006eba:	920e      	str	r2, [sp, #56]	; 0x38
 8006ebc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8006ec0:	801a      	strh	r2, [r3, #0]
 8006ec2:	f7fe bf7a 	b.w	8005dba <_vfprintf_r+0x82>
 8006ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ec8:	6813      	ldr	r3, [r2, #0]
 8006eca:	3204      	adds	r2, #4
 8006ecc:	920e      	str	r2, [sp, #56]	; 0x38
 8006ece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	f7fe bf72 	b.w	8005dba <_vfprintf_r+0x82>
 8006ed6:	2700      	movs	r7, #0
 8006ed8:	45bb      	cmp	fp, r7
 8006eda:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006ede:	f6ff ac26 	blt.w	800672e <_vfprintf_r+0x9f6>
 8006ee2:	9b07      	ldr	r3, [sp, #28]
 8006ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ee8:	9307      	str	r3, [sp, #28]
 8006eea:	f7ff bbf3 	b.w	80066d4 <_vfprintf_r+0x99c>
 8006eee:	4614      	mov	r4, r2
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ef4:	9328      	str	r3, [sp, #160]	; 0xa0
 8006ef6:	442c      	add	r4, r5
 8006ef8:	2b07      	cmp	r3, #7
 8006efa:	9429      	str	r4, [sp, #164]	; 0xa4
 8006efc:	e889 0024 	stmia.w	r9, {r2, r5}
 8006f00:	f73f ae36 	bgt.w	8006b70 <_vfprintf_r+0xe38>
 8006f04:	f109 0908 	add.w	r9, r9, #8
 8006f08:	e63d      	b.n	8006b86 <_vfprintf_r+0xe4e>
 8006f0a:	aa27      	add	r2, sp, #156	; 0x9c
 8006f0c:	9908      	ldr	r1, [sp, #32]
 8006f0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f10:	f003 f968 	bl	800a1e4 <__sprint_r>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	f47f a83f 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006f1a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006f1c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006f20:	e427      	b.n	8006772 <_vfprintf_r+0xa3a>
 8006f22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006f24:	4ab4      	ldr	r2, [pc, #720]	; (80071f8 <_vfprintf_r+0x14c0>)
 8006f26:	f8c9 2000 	str.w	r2, [r9]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	3401      	adds	r4, #1
 8006f2e:	2201      	movs	r2, #1
 8006f30:	2b07      	cmp	r3, #7
 8006f32:	9429      	str	r4, [sp, #164]	; 0xa4
 8006f34:	9328      	str	r3, [sp, #160]	; 0xa0
 8006f36:	f8c9 2004 	str.w	r2, [r9, #4]
 8006f3a:	dc69      	bgt.n	8007010 <_vfprintf_r+0x12d8>
 8006f3c:	f109 0908 	add.w	r9, r9, #8
 8006f40:	b92d      	cbnz	r5, 8006f4e <_vfprintf_r+0x1216>
 8006f42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f44:	b91b      	cbnz	r3, 8006f4e <_vfprintf_r+0x1216>
 8006f46:	9b07      	ldr	r3, [sp, #28]
 8006f48:	07d9      	lsls	r1, r3, #31
 8006f4a:	f57f a9d3 	bpl.w	80062f4 <_vfprintf_r+0x5bc>
 8006f4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006f50:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006f52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f54:	f8c9 2000 	str.w	r2, [r9]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	440c      	add	r4, r1
 8006f5c:	2b07      	cmp	r3, #7
 8006f5e:	9429      	str	r4, [sp, #164]	; 0xa4
 8006f60:	f8c9 1004 	str.w	r1, [r9, #4]
 8006f64:	9328      	str	r3, [sp, #160]	; 0xa0
 8006f66:	f300 81d9 	bgt.w	800731c <_vfprintf_r+0x15e4>
 8006f6a:	f109 0908 	add.w	r9, r9, #8
 8006f6e:	426d      	negs	r5, r5
 8006f70:	2d00      	cmp	r5, #0
 8006f72:	f340 80b3 	ble.w	80070dc <_vfprintf_r+0x13a4>
 8006f76:	4aa1      	ldr	r2, [pc, #644]	; (80071fc <_vfprintf_r+0x14c4>)
 8006f78:	920f      	str	r2, [sp, #60]	; 0x3c
 8006f7a:	2d10      	cmp	r5, #16
 8006f7c:	f340 8122 	ble.w	80071c4 <_vfprintf_r+0x148c>
 8006f80:	4622      	mov	r2, r4
 8006f82:	2710      	movs	r7, #16
 8006f84:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006f88:	9c08      	ldr	r4, [sp, #32]
 8006f8a:	e005      	b.n	8006f98 <_vfprintf_r+0x1260>
 8006f8c:	f109 0908 	add.w	r9, r9, #8
 8006f90:	3d10      	subs	r5, #16
 8006f92:	2d10      	cmp	r5, #16
 8006f94:	f340 8115 	ble.w	80071c2 <_vfprintf_r+0x148a>
 8006f98:	3301      	adds	r3, #1
 8006f9a:	3210      	adds	r2, #16
 8006f9c:	2b07      	cmp	r3, #7
 8006f9e:	9229      	str	r2, [sp, #164]	; 0xa4
 8006fa0:	9328      	str	r3, [sp, #160]	; 0xa0
 8006fa2:	f8c9 a000 	str.w	sl, [r9]
 8006fa6:	f8c9 7004 	str.w	r7, [r9, #4]
 8006faa:	ddef      	ble.n	8006f8c <_vfprintf_r+0x1254>
 8006fac:	aa27      	add	r2, sp, #156	; 0x9c
 8006fae:	4621      	mov	r1, r4
 8006fb0:	4658      	mov	r0, fp
 8006fb2:	f003 f917 	bl	800a1e4 <__sprint_r>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	f47e afee 	bne.w	8005f98 <_vfprintf_r+0x260>
 8006fbc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006fbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006fc0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006fc4:	e7e4      	b.n	8006f90 <_vfprintf_r+0x1258>
 8006fc6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006fc8:	f7ff bbaa 	b.w	8006720 <_vfprintf_r+0x9e8>
 8006fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd0:	f7fe bfe8 	b.w	8005fa4 <_vfprintf_r+0x26c>
 8006fd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006fd6:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f1bb 0f00 	cmp.w	fp, #0
 8006fe0:	f103 0304 	add.w	r3, r3, #4
 8006fe4:	8804      	ldrh	r4, [r0, #0]
 8006fe6:	f04f 0500 	mov.w	r5, #0
 8006fea:	f2c0 81b4 	blt.w	8007356 <_vfprintf_r+0x161e>
 8006fee:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ff2:	9107      	str	r1, [sp, #28]
 8006ff4:	ea54 0105 	orrs.w	r1, r4, r5
 8006ff8:	930e      	str	r3, [sp, #56]	; 0x38
 8006ffa:	4617      	mov	r7, r2
 8006ffc:	f47f a892 	bne.w	8006124 <_vfprintf_r+0x3ec>
 8007000:	f7ff ba4c 	b.w	800649c <_vfprintf_r+0x764>
 8007004:	3304      	adds	r3, #4
 8007006:	6814      	ldr	r4, [r2, #0]
 8007008:	930e      	str	r3, [sp, #56]	; 0x38
 800700a:	2500      	movs	r5, #0
 800700c:	f7ff b9d8 	b.w	80063c0 <_vfprintf_r+0x688>
 8007010:	aa27      	add	r2, sp, #156	; 0x9c
 8007012:	9908      	ldr	r1, [sp, #32]
 8007014:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007016:	f003 f8e5 	bl	800a1e4 <__sprint_r>
 800701a:	2800      	cmp	r0, #0
 800701c:	f47e afbc 	bne.w	8005f98 <_vfprintf_r+0x260>
 8007020:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8007022:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007024:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007028:	e78a      	b.n	8006f40 <_vfprintf_r+0x1208>
 800702a:	a825      	add	r0, sp, #148	; 0x94
 800702c:	a922      	add	r1, sp, #136	; 0x88
 800702e:	aa21      	add	r2, sp, #132	; 0x84
 8007030:	2303      	movs	r3, #3
 8007032:	9004      	str	r0, [sp, #16]
 8007034:	9202      	str	r2, [sp, #8]
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	f8cd b004 	str.w	fp, [sp, #4]
 800703c:	9103      	str	r1, [sp, #12]
 800703e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8007042:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007044:	f000 fb68 	bl	8007718 <_dtoa_r>
 8007048:	465d      	mov	r5, fp
 800704a:	4606      	mov	r6, r0
 800704c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800704e:	2b46      	cmp	r3, #70	; 0x46
 8007050:	eb06 0405 	add.w	r4, r6, r5
 8007054:	f47f aee1 	bne.w	8006e1a <_vfprintf_r+0x10e2>
 8007058:	7833      	ldrb	r3, [r6, #0]
 800705a:	2b30      	cmp	r3, #48	; 0x30
 800705c:	f000 8198 	beq.w	8007390 <_vfprintf_r+0x1658>
 8007060:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8007062:	442c      	add	r4, r5
 8007064:	e6d9      	b.n	8006e1a <_vfprintf_r+0x10e2>
 8007066:	f1bb 0f00 	cmp.w	fp, #0
 800706a:	bf08      	it	eq
 800706c:	f04f 0b01 	moveq.w	fp, #1
 8007070:	e6a1      	b.n	8006db6 <_vfprintf_r+0x107e>
 8007072:	9b07      	ldr	r3, [sp, #28]
 8007074:	f043 0320 	orr.w	r3, r3, #32
 8007078:	9307      	str	r3, [sp, #28]
 800707a:	f108 0801 	add.w	r8, r8, #1
 800707e:	f898 3000 	ldrb.w	r3, [r8]
 8007082:	f7fe becd 	b.w	8005e20 <_vfprintf_r+0xe8>
 8007086:	aa27      	add	r2, sp, #156	; 0x9c
 8007088:	9908      	ldr	r1, [sp, #32]
 800708a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800708c:	f003 f8aa 	bl	800a1e4 <__sprint_r>
 8007090:	2800      	cmp	r0, #0
 8007092:	f47e af81 	bne.w	8005f98 <_vfprintf_r+0x260>
 8007096:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007098:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800709c:	f7ff bb81 	b.w	80067a2 <_vfprintf_r+0xa6a>
 80070a0:	4630      	mov	r0, r6
 80070a2:	f7fd fa0d 	bl	80044c0 <strlen>
 80070a6:	46a3      	mov	fp, r4
 80070a8:	4603      	mov	r3, r0
 80070aa:	900d      	str	r0, [sp, #52]	; 0x34
 80070ac:	f7ff bb01 	b.w	80066b2 <_vfprintf_r+0x97a>
 80070b0:	272d      	movs	r7, #45	; 0x2d
 80070b2:	9309      	str	r3, [sp, #36]	; 0x24
 80070b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070b6:	9307      	str	r3, [sp, #28]
 80070b8:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80070bc:	f04f 0b00 	mov.w	fp, #0
 80070c0:	f7ff b855 	b.w	800616e <_vfprintf_r+0x436>
 80070c4:	aa27      	add	r2, sp, #156	; 0x9c
 80070c6:	9908      	ldr	r1, [sp, #32]
 80070c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070ca:	f003 f88b 	bl	800a1e4 <__sprint_r>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	f47e af62 	bne.w	8005f98 <_vfprintf_r+0x260>
 80070d4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80070d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80070d8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80070dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80070de:	f8c9 6000 	str.w	r6, [r9]
 80070e2:	3301      	adds	r3, #1
 80070e4:	440c      	add	r4, r1
 80070e6:	2b07      	cmp	r3, #7
 80070e8:	9429      	str	r4, [sp, #164]	; 0xa4
 80070ea:	9328      	str	r3, [sp, #160]	; 0xa0
 80070ec:	f8c9 1004 	str.w	r1, [r9, #4]
 80070f0:	f77f a8fe 	ble.w	80062f0 <_vfprintf_r+0x5b8>
 80070f4:	e41a      	b.n	800692c <_vfprintf_r+0xbf4>
 80070f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070f8:	1cd8      	adds	r0, r3, #3
 80070fa:	db11      	blt.n	8007120 <_vfprintf_r+0x13e8>
 80070fc:	459b      	cmp	fp, r3
 80070fe:	db0f      	blt.n	8007120 <_vfprintf_r+0x13e8>
 8007100:	9313      	str	r3, [sp, #76]	; 0x4c
 8007102:	e6ac      	b.n	8006e5e <_vfprintf_r+0x1126>
 8007104:	aa27      	add	r2, sp, #156	; 0x9c
 8007106:	9908      	ldr	r1, [sp, #32]
 8007108:	980a      	ldr	r0, [sp, #40]	; 0x28
 800710a:	f003 f86b 	bl	800a1e4 <__sprint_r>
 800710e:	2800      	cmp	r0, #0
 8007110:	f47e af42 	bne.w	8005f98 <_vfprintf_r+0x260>
 8007114:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007116:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800711a:	e46e      	b.n	80069fa <_vfprintf_r+0xcc2>
 800711c:	4623      	mov	r3, r4
 800711e:	e68f      	b.n	8006e40 <_vfprintf_r+0x1108>
 8007120:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007122:	3a02      	subs	r2, #2
 8007124:	9211      	str	r2, [sp, #68]	; 0x44
 8007126:	3b01      	subs	r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800712e:	9321      	str	r3, [sp, #132]	; 0x84
 8007130:	bfb8      	it	lt
 8007132:	425b      	neglt	r3, r3
 8007134:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8007138:	bfb4      	ite	lt
 800713a:	222d      	movlt	r2, #45	; 0x2d
 800713c:	222b      	movge	r2, #43	; 0x2b
 800713e:	2b09      	cmp	r3, #9
 8007140:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8007144:	f340 810b 	ble.w	800735e <_vfprintf_r+0x1626>
 8007148:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 800714c:	4604      	mov	r4, r0
 800714e:	4a2c      	ldr	r2, [pc, #176]	; (8007200 <_vfprintf_r+0x14c8>)
 8007150:	fb82 2103 	smull	r2, r1, r2, r3
 8007154:	17da      	asrs	r2, r3, #31
 8007156:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800715a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800715e:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8007162:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007166:	2a09      	cmp	r2, #9
 8007168:	4613      	mov	r3, r2
 800716a:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800716e:	dcee      	bgt.n	800714e <_vfprintf_r+0x1416>
 8007170:	4621      	mov	r1, r4
 8007172:	3330      	adds	r3, #48	; 0x30
 8007174:	b2da      	uxtb	r2, r3
 8007176:	f801 2d01 	strb.w	r2, [r1, #-1]!
 800717a:	4288      	cmp	r0, r1
 800717c:	f240 816f 	bls.w	800745e <_vfprintf_r+0x1726>
 8007180:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8007184:	4623      	mov	r3, r4
 8007186:	e001      	b.n	800718c <_vfprintf_r+0x1454>
 8007188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800718c:	f801 2b01 	strb.w	r2, [r1], #1
 8007190:	4298      	cmp	r0, r3
 8007192:	d1f9      	bne.n	8007188 <_vfprintf_r+0x1450>
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	1b1b      	subs	r3, r3, r4
 8007198:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 800719c:	4413      	add	r3, r2
 800719e:	aa23      	add	r2, sp, #140	; 0x8c
 80071a0:	1a9b      	subs	r3, r3, r2
 80071a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071a4:	9319      	str	r3, [sp, #100]	; 0x64
 80071a6:	2a01      	cmp	r2, #1
 80071a8:	4413      	add	r3, r2
 80071aa:	930d      	str	r3, [sp, #52]	; 0x34
 80071ac:	f340 80fe 	ble.w	80073ac <_vfprintf_r+0x1674>
 80071b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80071b4:	4413      	add	r3, r2
 80071b6:	2200      	movs	r2, #0
 80071b8:	930d      	str	r3, [sp, #52]	; 0x34
 80071ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80071bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80071c0:	e65b      	b.n	8006e7a <_vfprintf_r+0x1142>
 80071c2:	4614      	mov	r4, r2
 80071c4:	3301      	adds	r3, #1
 80071c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80071c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80071ca:	442c      	add	r4, r5
 80071cc:	2b07      	cmp	r3, #7
 80071ce:	9429      	str	r4, [sp, #164]	; 0xa4
 80071d0:	e889 0024 	stmia.w	r9, {r2, r5}
 80071d4:	f73f af76 	bgt.w	80070c4 <_vfprintf_r+0x138c>
 80071d8:	f109 0908 	add.w	r9, r9, #8
 80071dc:	e77e      	b.n	80070dc <_vfprintf_r+0x13a4>
 80071de:	aa27      	add	r2, sp, #156	; 0x9c
 80071e0:	9908      	ldr	r1, [sp, #32]
 80071e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80071e4:	f002 fffe 	bl	800a1e4 <__sprint_r>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	f47e aed5 	bne.w	8005f98 <_vfprintf_r+0x260>
 80071ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071f0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80071f2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80071f6:	e4d0      	b.n	8006b9a <_vfprintf_r+0xe62>
 80071f8:	0800abcc 	.word	0x0800abcc
 80071fc:	0800abe0 	.word	0x0800abe0
 8007200:	66666667 	.word	0x66666667
 8007204:	2d06      	cmp	r5, #6
 8007206:	462b      	mov	r3, r5
 8007208:	bf28      	it	cs
 800720a:	2306      	movcs	r3, #6
 800720c:	930d      	str	r3, [sp, #52]	; 0x34
 800720e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007212:	46b3      	mov	fp, r6
 8007214:	970e      	str	r7, [sp, #56]	; 0x38
 8007216:	9613      	str	r6, [sp, #76]	; 0x4c
 8007218:	4637      	mov	r7, r6
 800721a:	9309      	str	r3, [sp, #36]	; 0x24
 800721c:	4e91      	ldr	r6, [pc, #580]	; (8007464 <_vfprintf_r+0x172c>)
 800721e:	f7fe bfa5 	b.w	800616c <_vfprintf_r+0x434>
 8007222:	aa27      	add	r2, sp, #156	; 0x9c
 8007224:	9908      	ldr	r1, [sp, #32]
 8007226:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007228:	f002 ffdc 	bl	800a1e4 <__sprint_r>
 800722c:	2800      	cmp	r0, #0
 800722e:	f47e aeb3 	bne.w	8005f98 <_vfprintf_r+0x260>
 8007232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007236:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800723e:	e4c4      	b.n	8006bca <_vfprintf_r+0xe92>
 8007240:	a825      	add	r0, sp, #148	; 0x94
 8007242:	a922      	add	r1, sp, #136	; 0x88
 8007244:	aa21      	add	r2, sp, #132	; 0x84
 8007246:	2303      	movs	r3, #3
 8007248:	9004      	str	r0, [sp, #16]
 800724a:	9202      	str	r2, [sp, #8]
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	f8cd b004 	str.w	fp, [sp, #4]
 8007252:	9103      	str	r1, [sp, #12]
 8007254:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8007258:	980a      	ldr	r0, [sp, #40]	; 0x28
 800725a:	f000 fa5d 	bl	8007718 <_dtoa_r>
 800725e:	465d      	mov	r5, fp
 8007260:	4606      	mov	r6, r0
 8007262:	eb00 040b 	add.w	r4, r0, fp
 8007266:	e6f7      	b.n	8007058 <_vfprintf_r+0x1320>
 8007268:	9307      	str	r3, [sp, #28]
 800726a:	f7ff b8c7 	b.w	80063fc <_vfprintf_r+0x6c4>
 800726e:	f04f 0b06 	mov.w	fp, #6
 8007272:	e5a0      	b.n	8006db6 <_vfprintf_r+0x107e>
 8007274:	272d      	movs	r7, #45	; 0x2d
 8007276:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800727a:	f7ff b9b3 	b.w	80065e4 <_vfprintf_r+0x8ac>
 800727e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8007282:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8007286:	931d      	str	r3, [sp, #116]	; 0x74
 8007288:	232d      	movs	r3, #45	; 0x2d
 800728a:	911c      	str	r1, [sp, #112]	; 0x70
 800728c:	9309      	str	r3, [sp, #36]	; 0x24
 800728e:	e5a0      	b.n	8006dd2 <_vfprintf_r+0x109a>
 8007290:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007292:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007294:	4413      	add	r3, r2
 8007296:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007298:	930d      	str	r3, [sp, #52]	; 0x34
 800729a:	2a00      	cmp	r2, #0
 800729c:	f340 8090 	ble.w	80073c0 <_vfprintf_r+0x1688>
 80072a0:	2267      	movs	r2, #103	; 0x67
 80072a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80072a6:	9211      	str	r2, [sp, #68]	; 0x44
 80072a8:	e5e7      	b.n	8006e7a <_vfprintf_r+0x1142>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f340 8090 	ble.w	80073d0 <_vfprintf_r+0x1698>
 80072b0:	f1bb 0f00 	cmp.w	fp, #0
 80072b4:	d163      	bne.n	800737e <_vfprintf_r+0x1646>
 80072b6:	9a07      	ldr	r2, [sp, #28]
 80072b8:	07d1      	lsls	r1, r2, #31
 80072ba:	d460      	bmi.n	800737e <_vfprintf_r+0x1646>
 80072bc:	461a      	mov	r2, r3
 80072be:	920d      	str	r2, [sp, #52]	; 0x34
 80072c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80072c4:	e5d9      	b.n	8006e7a <_vfprintf_r+0x1142>
 80072c6:	9b07      	ldr	r3, [sp, #28]
 80072c8:	07db      	lsls	r3, r3, #31
 80072ca:	465f      	mov	r7, fp
 80072cc:	d505      	bpl.n	80072da <_vfprintf_r+0x15a2>
 80072ce:	ae44      	add	r6, sp, #272	; 0x110
 80072d0:	2330      	movs	r3, #48	; 0x30
 80072d2:	f806 3d41 	strb.w	r3, [r6, #-65]!
 80072d6:	f7fe bf3f 	b.w	8006158 <_vfprintf_r+0x420>
 80072da:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80072de:	ae34      	add	r6, sp, #208	; 0xd0
 80072e0:	f7fe bf3d 	b.w	800615e <_vfprintf_r+0x426>
 80072e4:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 80072e8:	970e      	str	r7, [sp, #56]	; 0x38
 80072ea:	9309      	str	r3, [sp, #36]	; 0x24
 80072ec:	950d      	str	r5, [sp, #52]	; 0x34
 80072ee:	4683      	mov	fp, r0
 80072f0:	9013      	str	r0, [sp, #76]	; 0x4c
 80072f2:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80072f6:	f7fe bf39 	b.w	800616c <_vfprintf_r+0x434>
 80072fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072fc:	2b47      	cmp	r3, #71	; 0x47
 80072fe:	f47f ad8b 	bne.w	8006e18 <_vfprintf_r+0x10e0>
 8007302:	9b07      	ldr	r3, [sp, #28]
 8007304:	07dc      	lsls	r4, r3, #31
 8007306:	f53f aea1 	bmi.w	800704c <_vfprintf_r+0x1314>
 800730a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800730c:	2f47      	cmp	r7, #71	; 0x47
 800730e:	eba3 0306 	sub.w	r3, r3, r6
 8007312:	9312      	str	r3, [sp, #72]	; 0x48
 8007314:	f43f aeef 	beq.w	80070f6 <_vfprintf_r+0x13be>
 8007318:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800731a:	e704      	b.n	8007126 <_vfprintf_r+0x13ee>
 800731c:	aa27      	add	r2, sp, #156	; 0x9c
 800731e:	9908      	ldr	r1, [sp, #32]
 8007320:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007322:	f002 ff5f 	bl	800a1e4 <__sprint_r>
 8007326:	2800      	cmp	r0, #0
 8007328:	f47e ae36 	bne.w	8005f98 <_vfprintf_r+0x260>
 800732c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800732e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007330:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007332:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007336:	e61a      	b.n	8006f6e <_vfprintf_r+0x1236>
 8007338:	46a0      	mov	r8, r4
 800733a:	2500      	movs	r5, #0
 800733c:	f7fe bd72 	b.w	8005e24 <_vfprintf_r+0xec>
 8007340:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007342:	e57d      	b.n	8006e40 <_vfprintf_r+0x1108>
 8007344:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007346:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007348:	4413      	add	r3, r2
 800734a:	2267      	movs	r2, #103	; 0x67
 800734c:	930d      	str	r3, [sp, #52]	; 0x34
 800734e:	9211      	str	r2, [sp, #68]	; 0x44
 8007350:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007354:	e591      	b.n	8006e7a <_vfprintf_r+0x1142>
 8007356:	930e      	str	r3, [sp, #56]	; 0x38
 8007358:	4617      	mov	r7, r2
 800735a:	f7ff bbff 	b.w	8006b5c <_vfprintf_r+0xe24>
 800735e:	3330      	adds	r3, #48	; 0x30
 8007360:	2230      	movs	r2, #48	; 0x30
 8007362:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8007366:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 800736a:	ab24      	add	r3, sp, #144	; 0x90
 800736c:	e717      	b.n	800719e <_vfprintf_r+0x1466>
 800736e:	930e      	str	r3, [sp, #56]	; 0x38
 8007370:	e4fc      	b.n	8006d6c <_vfprintf_r+0x1034>
 8007372:	4e3d      	ldr	r6, [pc, #244]	; (8007468 <_vfprintf_r+0x1730>)
 8007374:	4b3d      	ldr	r3, [pc, #244]	; (800746c <_vfprintf_r+0x1734>)
 8007376:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800737a:	f7ff b935 	b.w	80065e8 <_vfprintf_r+0x8b0>
 800737e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007380:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007382:	189d      	adds	r5, r3, r2
 8007384:	eb05 030b 	add.w	r3, r5, fp
 8007388:	930d      	str	r3, [sp, #52]	; 0x34
 800738a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800738e:	e574      	b.n	8006e7a <_vfprintf_r+0x1142>
 8007390:	2200      	movs	r2, #0
 8007392:	2300      	movs	r3, #0
 8007394:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8007398:	f7fc fe62 	bl	8004060 <__aeabi_dcmpeq>
 800739c:	2800      	cmp	r0, #0
 800739e:	f47f ae5f 	bne.w	8007060 <_vfprintf_r+0x1328>
 80073a2:	f1c5 0501 	rsb	r5, r5, #1
 80073a6:	9521      	str	r5, [sp, #132]	; 0x84
 80073a8:	442c      	add	r4, r5
 80073aa:	e536      	b.n	8006e1a <_vfprintf_r+0x10e2>
 80073ac:	9b07      	ldr	r3, [sp, #28]
 80073ae:	f013 0301 	ands.w	r3, r3, #1
 80073b2:	f47f aefd 	bne.w	80071b0 <_vfprintf_r+0x1478>
 80073b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80073b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073be:	e55c      	b.n	8006e7a <_vfprintf_r+0x1142>
 80073c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073c4:	f1c3 0301 	rsb	r3, r3, #1
 80073c8:	441a      	add	r2, r3
 80073ca:	4613      	mov	r3, r2
 80073cc:	920d      	str	r2, [sp, #52]	; 0x34
 80073ce:	e767      	b.n	80072a0 <_vfprintf_r+0x1568>
 80073d0:	f1bb 0f00 	cmp.w	fp, #0
 80073d4:	d102      	bne.n	80073dc <_vfprintf_r+0x16a4>
 80073d6:	9b07      	ldr	r3, [sp, #28]
 80073d8:	07da      	lsls	r2, r3, #31
 80073da:	d507      	bpl.n	80073ec <_vfprintf_r+0x16b4>
 80073dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80073de:	1c5d      	adds	r5, r3, #1
 80073e0:	eb05 030b 	add.w	r3, r5, fp
 80073e4:	930d      	str	r3, [sp, #52]	; 0x34
 80073e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073ea:	e546      	b.n	8006e7a <_vfprintf_r+0x1142>
 80073ec:	2301      	movs	r3, #1
 80073ee:	930d      	str	r3, [sp, #52]	; 0x34
 80073f0:	e543      	b.n	8006e7a <_vfprintf_r+0x1142>
 80073f2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80073f4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80073f8:	6805      	ldr	r5, [r0, #0]
 80073fa:	3004      	adds	r0, #4
 80073fc:	2d00      	cmp	r5, #0
 80073fe:	900e      	str	r0, [sp, #56]	; 0x38
 8007400:	46a0      	mov	r8, r4
 8007402:	f6be ad0d 	bge.w	8005e20 <_vfprintf_r+0xe8>
 8007406:	f04f 35ff 	mov.w	r5, #4294967295
 800740a:	f7fe bd09 	b.w	8005e20 <_vfprintf_r+0xe8>
 800740e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007412:	f7ff b893 	b.w	800653c <_vfprintf_r+0x804>
 8007416:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800741a:	f7ff b85d 	b.w	80064d8 <_vfprintf_r+0x7a0>
 800741e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007422:	f7fe bfbf 	b.w	80063a4 <_vfprintf_r+0x66c>
 8007426:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800742a:	f7fe be5c 	b.w	80060e6 <_vfprintf_r+0x3ae>
 800742e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007432:	f7ff b812 	b.w	800645a <_vfprintf_r+0x722>
 8007436:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800743a:	f7fe bdca 	b.w	8005fd2 <_vfprintf_r+0x29a>
 800743e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007442:	f7ff b951 	b.w	80066e8 <_vfprintf_r+0x9b0>
 8007446:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800744a:	f7fe be23 	b.w	8006094 <_vfprintf_r+0x35c>
 800744e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007452:	f7ff b8ed 	b.w	8006630 <_vfprintf_r+0x8f8>
 8007456:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800745a:	f7ff b88c 	b.w	8006576 <_vfprintf_r+0x83e>
 800745e:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8007462:	e69c      	b.n	800719e <_vfprintf_r+0x1466>
 8007464:	0800abc4 	.word	0x0800abc4
 8007468:	0800ab98 	.word	0x0800ab98
 800746c:	0800ab94 	.word	0x0800ab94

08007470 <__sbprintf>:
 8007470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007472:	460c      	mov	r4, r1
 8007474:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8007478:	8989      	ldrh	r1, [r1, #12]
 800747a:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800747c:	89e5      	ldrh	r5, [r4, #14]
 800747e:	9619      	str	r6, [sp, #100]	; 0x64
 8007480:	f021 0102 	bic.w	r1, r1, #2
 8007484:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007486:	f8ad 500e 	strh.w	r5, [sp, #14]
 800748a:	2500      	movs	r5, #0
 800748c:	69e7      	ldr	r7, [r4, #28]
 800748e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8007492:	9609      	str	r6, [sp, #36]	; 0x24
 8007494:	9506      	str	r5, [sp, #24]
 8007496:	ae1a      	add	r6, sp, #104	; 0x68
 8007498:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800749c:	4669      	mov	r1, sp
 800749e:	9600      	str	r6, [sp, #0]
 80074a0:	9604      	str	r6, [sp, #16]
 80074a2:	9502      	str	r5, [sp, #8]
 80074a4:	9505      	str	r5, [sp, #20]
 80074a6:	9707      	str	r7, [sp, #28]
 80074a8:	4606      	mov	r6, r0
 80074aa:	f7fe fc45 	bl	8005d38 <_vfprintf_r>
 80074ae:	1e05      	subs	r5, r0, #0
 80074b0:	db07      	blt.n	80074c2 <__sbprintf+0x52>
 80074b2:	4630      	mov	r0, r6
 80074b4:	4669      	mov	r1, sp
 80074b6:	f001 f8e9 	bl	800868c <_fflush_r>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	bf18      	it	ne
 80074be:	f04f 35ff 	movne.w	r5, #4294967295
 80074c2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80074c6:	065b      	lsls	r3, r3, #25
 80074c8:	d503      	bpl.n	80074d2 <__sbprintf+0x62>
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d0:	81a3      	strh	r3, [r4, #12]
 80074d2:	4628      	mov	r0, r5
 80074d4:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80074d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074da:	bf00      	nop

080074dc <_vsprintf_r>:
 80074dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074de:	b09b      	sub	sp, #108	; 0x6c
 80074e0:	460d      	mov	r5, r1
 80074e2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80074e6:	f44f 7702 	mov.w	r7, #520	; 0x208
 80074ea:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80074ee:	4669      	mov	r1, sp
 80074f0:	9500      	str	r5, [sp, #0]
 80074f2:	9504      	str	r5, [sp, #16]
 80074f4:	f8ad 700c 	strh.w	r7, [sp, #12]
 80074f8:	9402      	str	r4, [sp, #8]
 80074fa:	9405      	str	r4, [sp, #20]
 80074fc:	f8ad 600e 	strh.w	r6, [sp, #14]
 8007500:	f7fd f89e 	bl	8004640 <_svfprintf_r>
 8007504:	9b00      	ldr	r3, [sp, #0]
 8007506:	2200      	movs	r2, #0
 8007508:	701a      	strb	r2, [r3, #0]
 800750a:	b01b      	add	sp, #108	; 0x6c
 800750c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800750e:	bf00      	nop

08007510 <vsprintf>:
 8007510:	b410      	push	{r4}
 8007512:	4c04      	ldr	r4, [pc, #16]	; (8007524 <vsprintf+0x14>)
 8007514:	4613      	mov	r3, r2
 8007516:	460a      	mov	r2, r1
 8007518:	4601      	mov	r1, r0
 800751a:	6820      	ldr	r0, [r4, #0]
 800751c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007520:	f7ff bfdc 	b.w	80074dc <_vsprintf_r>
 8007524:	20000468 	.word	0x20000468

08007528 <__swsetup_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4b30      	ldr	r3, [pc, #192]	; (80075ec <__swsetup_r+0xc4>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4605      	mov	r5, r0
 8007530:	460c      	mov	r4, r1
 8007532:	b113      	cbz	r3, 800753a <__swsetup_r+0x12>
 8007534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007536:	2a00      	cmp	r2, #0
 8007538:	d038      	beq.n	80075ac <__swsetup_r+0x84>
 800753a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800753e:	b293      	uxth	r3, r2
 8007540:	0718      	lsls	r0, r3, #28
 8007542:	d50c      	bpl.n	800755e <__swsetup_r+0x36>
 8007544:	6920      	ldr	r0, [r4, #16]
 8007546:	b1a8      	cbz	r0, 8007574 <__swsetup_r+0x4c>
 8007548:	f013 0201 	ands.w	r2, r3, #1
 800754c:	d01e      	beq.n	800758c <__swsetup_r+0x64>
 800754e:	6963      	ldr	r3, [r4, #20]
 8007550:	2200      	movs	r2, #0
 8007552:	425b      	negs	r3, r3
 8007554:	61a3      	str	r3, [r4, #24]
 8007556:	60a2      	str	r2, [r4, #8]
 8007558:	b1f0      	cbz	r0, 8007598 <__swsetup_r+0x70>
 800755a:	2000      	movs	r0, #0
 800755c:	bd38      	pop	{r3, r4, r5, pc}
 800755e:	06d9      	lsls	r1, r3, #27
 8007560:	d53c      	bpl.n	80075dc <__swsetup_r+0xb4>
 8007562:	0758      	lsls	r0, r3, #29
 8007564:	d426      	bmi.n	80075b4 <__swsetup_r+0x8c>
 8007566:	6920      	ldr	r0, [r4, #16]
 8007568:	f042 0308 	orr.w	r3, r2, #8
 800756c:	81a3      	strh	r3, [r4, #12]
 800756e:	b29b      	uxth	r3, r3
 8007570:	2800      	cmp	r0, #0
 8007572:	d1e9      	bne.n	8007548 <__swsetup_r+0x20>
 8007574:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8007578:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800757c:	d0e4      	beq.n	8007548 <__swsetup_r+0x20>
 800757e:	4628      	mov	r0, r5
 8007580:	4621      	mov	r1, r4
 8007582:	f001 fc4f 	bl	8008e24 <__smakebuf_r>
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	6920      	ldr	r0, [r4, #16]
 800758a:	e7dd      	b.n	8007548 <__swsetup_r+0x20>
 800758c:	0799      	lsls	r1, r3, #30
 800758e:	bf58      	it	pl
 8007590:	6962      	ldrpl	r2, [r4, #20]
 8007592:	60a2      	str	r2, [r4, #8]
 8007594:	2800      	cmp	r0, #0
 8007596:	d1e0      	bne.n	800755a <__swsetup_r+0x32>
 8007598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800759c:	061a      	lsls	r2, r3, #24
 800759e:	d5dd      	bpl.n	800755c <__swsetup_r+0x34>
 80075a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075a4:	81a3      	strh	r3, [r4, #12]
 80075a6:	f04f 30ff 	mov.w	r0, #4294967295
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	4618      	mov	r0, r3
 80075ae:	f001 f901 	bl	80087b4 <__sinit>
 80075b2:	e7c2      	b.n	800753a <__swsetup_r+0x12>
 80075b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80075b6:	b151      	cbz	r1, 80075ce <__swsetup_r+0xa6>
 80075b8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80075bc:	4299      	cmp	r1, r3
 80075be:	d004      	beq.n	80075ca <__swsetup_r+0xa2>
 80075c0:	4628      	mov	r0, r5
 80075c2:	f001 f94f 	bl	8008864 <_free_r>
 80075c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075ca:	2300      	movs	r3, #0
 80075cc:	6323      	str	r3, [r4, #48]	; 0x30
 80075ce:	2300      	movs	r3, #0
 80075d0:	6920      	ldr	r0, [r4, #16]
 80075d2:	6063      	str	r3, [r4, #4]
 80075d4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80075d8:	6020      	str	r0, [r4, #0]
 80075da:	e7c5      	b.n	8007568 <__swsetup_r+0x40>
 80075dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075e0:	2309      	movs	r3, #9
 80075e2:	602b      	str	r3, [r5, #0]
 80075e4:	f04f 30ff 	mov.w	r0, #4294967295
 80075e8:	81a2      	strh	r2, [r4, #12]
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	20000468 	.word	0x20000468

080075f0 <quorem>:
 80075f0:	6902      	ldr	r2, [r0, #16]
 80075f2:	690b      	ldr	r3, [r1, #16]
 80075f4:	4293      	cmp	r3, r2
 80075f6:	f300 808d 	bgt.w	8007714 <quorem+0x124>
 80075fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8007602:	f101 0714 	add.w	r7, r1, #20
 8007606:	f100 0b14 	add.w	fp, r0, #20
 800760a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800760e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8007612:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8007616:	b083      	sub	sp, #12
 8007618:	3201      	adds	r2, #1
 800761a:	fbb3 f9f2 	udiv	r9, r3, r2
 800761e:	eb0b 0304 	add.w	r3, fp, r4
 8007622:	9400      	str	r4, [sp, #0]
 8007624:	eb07 0a04 	add.w	sl, r7, r4
 8007628:	9301      	str	r3, [sp, #4]
 800762a:	f1b9 0f00 	cmp.w	r9, #0
 800762e:	d039      	beq.n	80076a4 <quorem+0xb4>
 8007630:	2500      	movs	r5, #0
 8007632:	46bc      	mov	ip, r7
 8007634:	46de      	mov	lr, fp
 8007636:	462b      	mov	r3, r5
 8007638:	f85c 6b04 	ldr.w	r6, [ip], #4
 800763c:	f8de 2000 	ldr.w	r2, [lr]
 8007640:	b2b4      	uxth	r4, r6
 8007642:	fb09 5504 	mla	r5, r9, r4, r5
 8007646:	0c36      	lsrs	r6, r6, #16
 8007648:	0c2c      	lsrs	r4, r5, #16
 800764a:	fb09 4406 	mla	r4, r9, r6, r4
 800764e:	b2ad      	uxth	r5, r5
 8007650:	1b5b      	subs	r3, r3, r5
 8007652:	b2a6      	uxth	r6, r4
 8007654:	fa13 f382 	uxtah	r3, r3, r2
 8007658:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 800765c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8007660:	b29b      	uxth	r3, r3
 8007662:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007666:	45e2      	cmp	sl, ip
 8007668:	f84e 3b04 	str.w	r3, [lr], #4
 800766c:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8007670:	ea4f 4326 	mov.w	r3, r6, asr #16
 8007674:	d2e0      	bcs.n	8007638 <quorem+0x48>
 8007676:	9b00      	ldr	r3, [sp, #0]
 8007678:	f85b 3003 	ldr.w	r3, [fp, r3]
 800767c:	b993      	cbnz	r3, 80076a4 <quorem+0xb4>
 800767e:	9c01      	ldr	r4, [sp, #4]
 8007680:	1f23      	subs	r3, r4, #4
 8007682:	459b      	cmp	fp, r3
 8007684:	d20c      	bcs.n	80076a0 <quorem+0xb0>
 8007686:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800768a:	b94b      	cbnz	r3, 80076a0 <quorem+0xb0>
 800768c:	f1a4 0308 	sub.w	r3, r4, #8
 8007690:	e002      	b.n	8007698 <quorem+0xa8>
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	3b04      	subs	r3, #4
 8007696:	b91a      	cbnz	r2, 80076a0 <quorem+0xb0>
 8007698:	459b      	cmp	fp, r3
 800769a:	f108 38ff 	add.w	r8, r8, #4294967295
 800769e:	d3f8      	bcc.n	8007692 <quorem+0xa2>
 80076a0:	f8c0 8010 	str.w	r8, [r0, #16]
 80076a4:	4604      	mov	r4, r0
 80076a6:	f002 f993 	bl	80099d0 <__mcmp>
 80076aa:	2800      	cmp	r0, #0
 80076ac:	db2e      	blt.n	800770c <quorem+0x11c>
 80076ae:	f109 0901 	add.w	r9, r9, #1
 80076b2:	465d      	mov	r5, fp
 80076b4:	2300      	movs	r3, #0
 80076b6:	f857 1b04 	ldr.w	r1, [r7], #4
 80076ba:	6828      	ldr	r0, [r5, #0]
 80076bc:	b28a      	uxth	r2, r1
 80076be:	1a9a      	subs	r2, r3, r2
 80076c0:	0c09      	lsrs	r1, r1, #16
 80076c2:	fa12 f280 	uxtah	r2, r2, r0
 80076c6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 80076ca:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80076ce:	b291      	uxth	r1, r2
 80076d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80076d4:	45ba      	cmp	sl, r7
 80076d6:	f845 1b04 	str.w	r1, [r5], #4
 80076da:	ea4f 4323 	mov.w	r3, r3, asr #16
 80076de:	d2ea      	bcs.n	80076b6 <quorem+0xc6>
 80076e0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80076e4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80076e8:	b982      	cbnz	r2, 800770c <quorem+0x11c>
 80076ea:	1f1a      	subs	r2, r3, #4
 80076ec:	4593      	cmp	fp, r2
 80076ee:	d20b      	bcs.n	8007708 <quorem+0x118>
 80076f0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80076f4:	b942      	cbnz	r2, 8007708 <quorem+0x118>
 80076f6:	3b08      	subs	r3, #8
 80076f8:	e002      	b.n	8007700 <quorem+0x110>
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	3b04      	subs	r3, #4
 80076fe:	b91a      	cbnz	r2, 8007708 <quorem+0x118>
 8007700:	459b      	cmp	fp, r3
 8007702:	f108 38ff 	add.w	r8, r8, #4294967295
 8007706:	d3f8      	bcc.n	80076fa <quorem+0x10a>
 8007708:	f8c4 8010 	str.w	r8, [r4, #16]
 800770c:	4648      	mov	r0, r9
 800770e:	b003      	add	sp, #12
 8007710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007714:	2000      	movs	r0, #0
 8007716:	4770      	bx	lr

08007718 <_dtoa_r>:
 8007718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800771e:	b099      	sub	sp, #100	; 0x64
 8007720:	4681      	mov	r9, r0
 8007722:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8007724:	4692      	mov	sl, r2
 8007726:	469b      	mov	fp, r3
 8007728:	b149      	cbz	r1, 800773e <_dtoa_r+0x26>
 800772a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800772c:	604a      	str	r2, [r1, #4]
 800772e:	2301      	movs	r3, #1
 8007730:	4093      	lsls	r3, r2
 8007732:	608b      	str	r3, [r1, #8]
 8007734:	f001 ff6a 	bl	800960c <_Bfree>
 8007738:	2300      	movs	r3, #0
 800773a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800773e:	f1bb 0f00 	cmp.w	fp, #0
 8007742:	46d8      	mov	r8, fp
 8007744:	db33      	blt.n	80077ae <_dtoa_r+0x96>
 8007746:	2300      	movs	r3, #0
 8007748:	6023      	str	r3, [r4, #0]
 800774a:	4ba3      	ldr	r3, [pc, #652]	; (80079d8 <_dtoa_r+0x2c0>)
 800774c:	461a      	mov	r2, r3
 800774e:	ea08 0303 	and.w	r3, r8, r3
 8007752:	4293      	cmp	r3, r2
 8007754:	d014      	beq.n	8007780 <_dtoa_r+0x68>
 8007756:	2200      	movs	r2, #0
 8007758:	2300      	movs	r3, #0
 800775a:	4650      	mov	r0, sl
 800775c:	4659      	mov	r1, fp
 800775e:	f7fc fc7f 	bl	8004060 <__aeabi_dcmpeq>
 8007762:	4605      	mov	r5, r0
 8007764:	b348      	cbz	r0, 80077ba <_dtoa_r+0xa2>
 8007766:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007768:	2301      	movs	r3, #1
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 80c2 	beq.w	80078f8 <_dtoa_r+0x1e0>
 8007774:	4899      	ldr	r0, [pc, #612]	; (80079dc <_dtoa_r+0x2c4>)
 8007776:	6018      	str	r0, [r3, #0]
 8007778:	3801      	subs	r0, #1
 800777a:	b019      	add	sp, #100	; 0x64
 800777c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007780:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007782:	f242 730f 	movw	r3, #9999	; 0x270f
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	f1ba 0f00 	cmp.w	sl, #0
 800778c:	f000 809f 	beq.w	80078ce <_dtoa_r+0x1b6>
 8007790:	4893      	ldr	r0, [pc, #588]	; (80079e0 <_dtoa_r+0x2c8>)
 8007792:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0f0      	beq.n	800777a <_dtoa_r+0x62>
 8007798:	78c3      	ldrb	r3, [r0, #3]
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 80ae 	beq.w	80078fc <_dtoa_r+0x1e4>
 80077a0:	f100 0308 	add.w	r3, r0, #8
 80077a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	b019      	add	sp, #100	; 0x64
 80077aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ae:	2301      	movs	r3, #1
 80077b0:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	46c3      	mov	fp, r8
 80077b8:	e7c7      	b.n	800774a <_dtoa_r+0x32>
 80077ba:	aa16      	add	r2, sp, #88	; 0x58
 80077bc:	ab17      	add	r3, sp, #92	; 0x5c
 80077be:	9201      	str	r2, [sp, #4]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	4652      	mov	r2, sl
 80077c4:	465b      	mov	r3, fp
 80077c6:	4648      	mov	r0, r9
 80077c8:	f002 f9ae 	bl	8009b28 <__d2b>
 80077cc:	ea5f 5418 	movs.w	r4, r8, lsr #20
 80077d0:	9008      	str	r0, [sp, #32]
 80077d2:	f040 8085 	bne.w	80078e0 <_dtoa_r+0x1c8>
 80077d6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80077d8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80077da:	442c      	add	r4, r5
 80077dc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80077e0:	2b20      	cmp	r3, #32
 80077e2:	f340 8289 	ble.w	8007cf8 <_dtoa_r+0x5e0>
 80077e6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80077ea:	f204 4012 	addw	r0, r4, #1042	; 0x412
 80077ee:	fa08 f803 	lsl.w	r8, r8, r3
 80077f2:	fa2a f000 	lsr.w	r0, sl, r0
 80077f6:	ea40 0008 	orr.w	r0, r0, r8
 80077fa:	f7fc f953 	bl	8003aa4 <__aeabi_ui2d>
 80077fe:	2301      	movs	r3, #1
 8007800:	3c01      	subs	r4, #1
 8007802:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007806:	930d      	str	r3, [sp, #52]	; 0x34
 8007808:	2200      	movs	r2, #0
 800780a:	4b76      	ldr	r3, [pc, #472]	; (80079e4 <_dtoa_r+0x2cc>)
 800780c:	f7fc f80c 	bl	8003828 <__aeabi_dsub>
 8007810:	a36b      	add	r3, pc, #428	; (adr r3, 80079c0 <_dtoa_r+0x2a8>)
 8007812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007816:	f7fc f9bb 	bl	8003b90 <__aeabi_dmul>
 800781a:	a36b      	add	r3, pc, #428	; (adr r3, 80079c8 <_dtoa_r+0x2b0>)
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	f7fc f804 	bl	800382c <__adddf3>
 8007824:	4606      	mov	r6, r0
 8007826:	4620      	mov	r0, r4
 8007828:	460f      	mov	r7, r1
 800782a:	f7fc f94b 	bl	8003ac4 <__aeabi_i2d>
 800782e:	a368      	add	r3, pc, #416	; (adr r3, 80079d0 <_dtoa_r+0x2b8>)
 8007830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007834:	f7fc f9ac 	bl	8003b90 <__aeabi_dmul>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4630      	mov	r0, r6
 800783e:	4639      	mov	r1, r7
 8007840:	f7fb fff4 	bl	800382c <__adddf3>
 8007844:	4606      	mov	r6, r0
 8007846:	460f      	mov	r7, r1
 8007848:	f7fc fc52 	bl	80040f0 <__aeabi_d2iz>
 800784c:	2200      	movs	r2, #0
 800784e:	9004      	str	r0, [sp, #16]
 8007850:	2300      	movs	r3, #0
 8007852:	4630      	mov	r0, r6
 8007854:	4639      	mov	r1, r7
 8007856:	f7fc fc0d 	bl	8004074 <__aeabi_dcmplt>
 800785a:	2800      	cmp	r0, #0
 800785c:	f040 8227 	bne.w	8007cae <_dtoa_r+0x596>
 8007860:	9e04      	ldr	r6, [sp, #16]
 8007862:	2e16      	cmp	r6, #22
 8007864:	f200 8220 	bhi.w	8007ca8 <_dtoa_r+0x590>
 8007868:	4b5f      	ldr	r3, [pc, #380]	; (80079e8 <_dtoa_r+0x2d0>)
 800786a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800786e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007872:	4652      	mov	r2, sl
 8007874:	465b      	mov	r3, fp
 8007876:	f7fc fc1b 	bl	80040b0 <__aeabi_dcmpgt>
 800787a:	2800      	cmp	r0, #0
 800787c:	f000 8241 	beq.w	8007d02 <_dtoa_r+0x5ea>
 8007880:	1e73      	subs	r3, r6, #1
 8007882:	9304      	str	r3, [sp, #16]
 8007884:	2300      	movs	r3, #0
 8007886:	930b      	str	r3, [sp, #44]	; 0x2c
 8007888:	1b2c      	subs	r4, r5, r4
 800788a:	f1b4 0801 	subs.w	r8, r4, #1
 800788e:	f100 8229 	bmi.w	8007ce4 <_dtoa_r+0x5cc>
 8007892:	2300      	movs	r3, #0
 8007894:	9305      	str	r3, [sp, #20]
 8007896:	9b04      	ldr	r3, [sp, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	f2c0 821a 	blt.w	8007cd2 <_dtoa_r+0x5ba>
 800789e:	4498      	add	r8, r3
 80078a0:	930a      	str	r3, [sp, #40]	; 0x28
 80078a2:	2300      	movs	r3, #0
 80078a4:	9302      	str	r3, [sp, #8]
 80078a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078a8:	2b09      	cmp	r3, #9
 80078aa:	d829      	bhi.n	8007900 <_dtoa_r+0x1e8>
 80078ac:	2b05      	cmp	r3, #5
 80078ae:	f340 8643 	ble.w	8008538 <_dtoa_r+0xe20>
 80078b2:	3b04      	subs	r3, #4
 80078b4:	9322      	str	r3, [sp, #136]	; 0x88
 80078b6:	2500      	movs	r5, #0
 80078b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078ba:	3b02      	subs	r3, #2
 80078bc:	2b03      	cmp	r3, #3
 80078be:	f200 8622 	bhi.w	8008506 <_dtoa_r+0xdee>
 80078c2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80078c6:	032a      	.short	0x032a
 80078c8:	03350223 	.word	0x03350223
 80078cc:	044f      	.short	0x044f
 80078ce:	4b44      	ldr	r3, [pc, #272]	; (80079e0 <_dtoa_r+0x2c8>)
 80078d0:	4a46      	ldr	r2, [pc, #280]	; (80079ec <_dtoa_r+0x2d4>)
 80078d2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80078d6:	2800      	cmp	r0, #0
 80078d8:	bf14      	ite	ne
 80078da:	4618      	movne	r0, r3
 80078dc:	4610      	moveq	r0, r2
 80078de:	e758      	b.n	8007792 <_dtoa_r+0x7a>
 80078e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078e4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80078e8:	950d      	str	r5, [sp, #52]	; 0x34
 80078ea:	4650      	mov	r0, sl
 80078ec:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80078f0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80078f4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80078f6:	e787      	b.n	8007808 <_dtoa_r+0xf0>
 80078f8:	483d      	ldr	r0, [pc, #244]	; (80079f0 <_dtoa_r+0x2d8>)
 80078fa:	e73e      	b.n	800777a <_dtoa_r+0x62>
 80078fc:	1cc3      	adds	r3, r0, #3
 80078fe:	e751      	b.n	80077a4 <_dtoa_r+0x8c>
 8007900:	2100      	movs	r1, #0
 8007902:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007906:	4648      	mov	r0, r9
 8007908:	9122      	str	r1, [sp, #136]	; 0x88
 800790a:	f001 fe59 	bl	80095c0 <_Balloc>
 800790e:	f04f 33ff 	mov.w	r3, #4294967295
 8007912:	9306      	str	r3, [sp, #24]
 8007914:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007916:	930c      	str	r3, [sp, #48]	; 0x30
 8007918:	2301      	movs	r3, #1
 800791a:	9007      	str	r0, [sp, #28]
 800791c:	9223      	str	r2, [sp, #140]	; 0x8c
 800791e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8007922:	9309      	str	r3, [sp, #36]	; 0x24
 8007924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007926:	2b00      	cmp	r3, #0
 8007928:	f2c0 80d0 	blt.w	8007acc <_dtoa_r+0x3b4>
 800792c:	9a04      	ldr	r2, [sp, #16]
 800792e:	2a0e      	cmp	r2, #14
 8007930:	f300 80cc 	bgt.w	8007acc <_dtoa_r+0x3b4>
 8007934:	4b2c      	ldr	r3, [pc, #176]	; (80079e8 <_dtoa_r+0x2d0>)
 8007936:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800793a:	ed93 7b00 	vldr	d7, [r3]
 800793e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007940:	2b00      	cmp	r3, #0
 8007942:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007946:	f2c0 82fe 	blt.w	8007f46 <_dtoa_r+0x82e>
 800794a:	4656      	mov	r6, sl
 800794c:	465f      	mov	r7, fp
 800794e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8007952:	4630      	mov	r0, r6
 8007954:	4652      	mov	r2, sl
 8007956:	465b      	mov	r3, fp
 8007958:	4639      	mov	r1, r7
 800795a:	f7fc fa43 	bl	8003de4 <__aeabi_ddiv>
 800795e:	f7fc fbc7 	bl	80040f0 <__aeabi_d2iz>
 8007962:	4604      	mov	r4, r0
 8007964:	f7fc f8ae 	bl	8003ac4 <__aeabi_i2d>
 8007968:	4652      	mov	r2, sl
 800796a:	465b      	mov	r3, fp
 800796c:	f7fc f910 	bl	8003b90 <__aeabi_dmul>
 8007970:	460b      	mov	r3, r1
 8007972:	4602      	mov	r2, r0
 8007974:	4639      	mov	r1, r7
 8007976:	4630      	mov	r0, r6
 8007978:	f7fb ff56 	bl	8003828 <__aeabi_dsub>
 800797c:	9d07      	ldr	r5, [sp, #28]
 800797e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8007982:	702b      	strb	r3, [r5, #0]
 8007984:	9b06      	ldr	r3, [sp, #24]
 8007986:	2b01      	cmp	r3, #1
 8007988:	4606      	mov	r6, r0
 800798a:	460f      	mov	r7, r1
 800798c:	f105 0501 	add.w	r5, r5, #1
 8007990:	d061      	beq.n	8007a56 <_dtoa_r+0x33e>
 8007992:	2200      	movs	r2, #0
 8007994:	4b17      	ldr	r3, [pc, #92]	; (80079f4 <_dtoa_r+0x2dc>)
 8007996:	f7fc f8fb 	bl	8003b90 <__aeabi_dmul>
 800799a:	2200      	movs	r2, #0
 800799c:	2300      	movs	r3, #0
 800799e:	4606      	mov	r6, r0
 80079a0:	460f      	mov	r7, r1
 80079a2:	f7fc fb5d 	bl	8004060 <__aeabi_dcmpeq>
 80079a6:	2800      	cmp	r0, #0
 80079a8:	d17d      	bne.n	8007aa6 <_dtoa_r+0x38e>
 80079aa:	f8cd 9014 	str.w	r9, [sp, #20]
 80079ae:	f8dd a018 	ldr.w	sl, [sp, #24]
 80079b2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80079b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80079ba:	e028      	b.n	8007a0e <_dtoa_r+0x2f6>
 80079bc:	f3af 8000 	nop.w
 80079c0:	636f4361 	.word	0x636f4361
 80079c4:	3fd287a7 	.word	0x3fd287a7
 80079c8:	8b60c8b3 	.word	0x8b60c8b3
 80079cc:	3fc68a28 	.word	0x3fc68a28
 80079d0:	509f79fb 	.word	0x509f79fb
 80079d4:	3fd34413 	.word	0x3fd34413
 80079d8:	7ff00000 	.word	0x7ff00000
 80079dc:	0800abcd 	.word	0x0800abcd
 80079e0:	0800ac0c 	.word	0x0800ac0c
 80079e4:	3ff80000 	.word	0x3ff80000
 80079e8:	0800ac20 	.word	0x0800ac20
 80079ec:	0800ac00 	.word	0x0800ac00
 80079f0:	0800abcc 	.word	0x0800abcc
 80079f4:	40240000 	.word	0x40240000
 80079f8:	f7fc f8ca 	bl	8003b90 <__aeabi_dmul>
 80079fc:	2200      	movs	r2, #0
 80079fe:	2300      	movs	r3, #0
 8007a00:	4606      	mov	r6, r0
 8007a02:	460f      	mov	r7, r1
 8007a04:	f7fc fb2c 	bl	8004060 <__aeabi_dcmpeq>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	f040 83ae 	bne.w	800816a <_dtoa_r+0xa52>
 8007a0e:	4642      	mov	r2, r8
 8007a10:	464b      	mov	r3, r9
 8007a12:	4630      	mov	r0, r6
 8007a14:	4639      	mov	r1, r7
 8007a16:	f7fc f9e5 	bl	8003de4 <__aeabi_ddiv>
 8007a1a:	f7fc fb69 	bl	80040f0 <__aeabi_d2iz>
 8007a1e:	4604      	mov	r4, r0
 8007a20:	f7fc f850 	bl	8003ac4 <__aeabi_i2d>
 8007a24:	4642      	mov	r2, r8
 8007a26:	464b      	mov	r3, r9
 8007a28:	f7fc f8b2 	bl	8003b90 <__aeabi_dmul>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4630      	mov	r0, r6
 8007a32:	4639      	mov	r1, r7
 8007a34:	f7fb fef8 	bl	8003828 <__aeabi_dsub>
 8007a38:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8007a3c:	f805 eb01 	strb.w	lr, [r5], #1
 8007a40:	ebcb 0e05 	rsb	lr, fp, r5
 8007a44:	45d6      	cmp	lr, sl
 8007a46:	4606      	mov	r6, r0
 8007a48:	460f      	mov	r7, r1
 8007a4a:	f04f 0200 	mov.w	r2, #0
 8007a4e:	4bae      	ldr	r3, [pc, #696]	; (8007d08 <_dtoa_r+0x5f0>)
 8007a50:	d1d2      	bne.n	80079f8 <_dtoa_r+0x2e0>
 8007a52:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007a56:	4632      	mov	r2, r6
 8007a58:	463b      	mov	r3, r7
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	4639      	mov	r1, r7
 8007a5e:	f7fb fee5 	bl	800382c <__adddf3>
 8007a62:	4606      	mov	r6, r0
 8007a64:	460f      	mov	r7, r1
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a6e:	f7fc fb01 	bl	8004074 <__aeabi_dcmplt>
 8007a72:	b940      	cbnz	r0, 8007a86 <_dtoa_r+0x36e>
 8007a74:	4632      	mov	r2, r6
 8007a76:	463b      	mov	r3, r7
 8007a78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a7c:	f7fc faf0 	bl	8004060 <__aeabi_dcmpeq>
 8007a80:	b188      	cbz	r0, 8007aa6 <_dtoa_r+0x38e>
 8007a82:	07e3      	lsls	r3, r4, #31
 8007a84:	d50f      	bpl.n	8007aa6 <_dtoa_r+0x38e>
 8007a86:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8007a8a:	9a07      	ldr	r2, [sp, #28]
 8007a8c:	1e6b      	subs	r3, r5, #1
 8007a8e:	e004      	b.n	8007a9a <_dtoa_r+0x382>
 8007a90:	429a      	cmp	r2, r3
 8007a92:	f000 83fc 	beq.w	800828e <_dtoa_r+0xb76>
 8007a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a9a:	2c39      	cmp	r4, #57	; 0x39
 8007a9c:	f103 0501 	add.w	r5, r3, #1
 8007aa0:	d0f6      	beq.n	8007a90 <_dtoa_r+0x378>
 8007aa2:	3401      	adds	r4, #1
 8007aa4:	701c      	strb	r4, [r3, #0]
 8007aa6:	9908      	ldr	r1, [sp, #32]
 8007aa8:	4648      	mov	r0, r9
 8007aaa:	f001 fdaf 	bl	800960c <_Bfree>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	9b04      	ldr	r3, [sp, #16]
 8007ab2:	702a      	strb	r2, [r5, #0]
 8007ab4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	6013      	str	r3, [r2, #0]
 8007aba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 839b 	beq.w	80081f8 <_dtoa_r+0xae0>
 8007ac2:	9807      	ldr	r0, [sp, #28]
 8007ac4:	601d      	str	r5, [r3, #0]
 8007ac6:	b019      	add	sp, #100	; 0x64
 8007ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007acc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	f000 810e 	beq.w	8007cf0 <_dtoa_r+0x5d8>
 8007ad4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007ad6:	2a01      	cmp	r2, #1
 8007ad8:	f340 8257 	ble.w	8007f8a <_dtoa_r+0x872>
 8007adc:	9b06      	ldr	r3, [sp, #24]
 8007ade:	9a02      	ldr	r2, [sp, #8]
 8007ae0:	1e5f      	subs	r7, r3, #1
 8007ae2:	42ba      	cmp	r2, r7
 8007ae4:	f2c0 838b 	blt.w	80081fe <_dtoa_r+0xae6>
 8007ae8:	1bd7      	subs	r7, r2, r7
 8007aea:	9b06      	ldr	r3, [sp, #24]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f2c0 8480 	blt.w	80083f2 <_dtoa_r+0xcda>
 8007af2:	9d05      	ldr	r5, [sp, #20]
 8007af4:	9b06      	ldr	r3, [sp, #24]
 8007af6:	9a05      	ldr	r2, [sp, #20]
 8007af8:	2101      	movs	r1, #1
 8007afa:	441a      	add	r2, r3
 8007afc:	4648      	mov	r0, r9
 8007afe:	9205      	str	r2, [sp, #20]
 8007b00:	4498      	add	r8, r3
 8007b02:	f001 fe1b 	bl	800973c <__i2b>
 8007b06:	4606      	mov	r6, r0
 8007b08:	b165      	cbz	r5, 8007b24 <_dtoa_r+0x40c>
 8007b0a:	f1b8 0f00 	cmp.w	r8, #0
 8007b0e:	dd09      	ble.n	8007b24 <_dtoa_r+0x40c>
 8007b10:	4545      	cmp	r5, r8
 8007b12:	9a05      	ldr	r2, [sp, #20]
 8007b14:	462b      	mov	r3, r5
 8007b16:	bfa8      	it	ge
 8007b18:	4643      	movge	r3, r8
 8007b1a:	1ad2      	subs	r2, r2, r3
 8007b1c:	9205      	str	r2, [sp, #20]
 8007b1e:	1aed      	subs	r5, r5, r3
 8007b20:	ebc3 0808 	rsb	r8, r3, r8
 8007b24:	9b02      	ldr	r3, [sp, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f340 82f5 	ble.w	8008116 <_dtoa_r+0x9fe>
 8007b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b2e:	2a00      	cmp	r2, #0
 8007b30:	f000 8202 	beq.w	8007f38 <_dtoa_r+0x820>
 8007b34:	2f00      	cmp	r7, #0
 8007b36:	f000 81ff 	beq.w	8007f38 <_dtoa_r+0x820>
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	463a      	mov	r2, r7
 8007b3e:	4648      	mov	r0, r9
 8007b40:	f001 fe9e 	bl	8009880 <__pow5mult>
 8007b44:	9a08      	ldr	r2, [sp, #32]
 8007b46:	4601      	mov	r1, r0
 8007b48:	4606      	mov	r6, r0
 8007b4a:	4648      	mov	r0, r9
 8007b4c:	f001 fe00 	bl	8009750 <__multiply>
 8007b50:	9908      	ldr	r1, [sp, #32]
 8007b52:	4604      	mov	r4, r0
 8007b54:	4648      	mov	r0, r9
 8007b56:	f001 fd59 	bl	800960c <_Bfree>
 8007b5a:	9b02      	ldr	r3, [sp, #8]
 8007b5c:	1bdb      	subs	r3, r3, r7
 8007b5e:	9302      	str	r3, [sp, #8]
 8007b60:	f040 81e9 	bne.w	8007f36 <_dtoa_r+0x81e>
 8007b64:	2101      	movs	r1, #1
 8007b66:	4648      	mov	r0, r9
 8007b68:	f001 fde8 	bl	800973c <__i2b>
 8007b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b6e:	9002      	str	r0, [sp, #8]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 8215 	beq.w	8007fa0 <_dtoa_r+0x888>
 8007b76:	4601      	mov	r1, r0
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4648      	mov	r0, r9
 8007b7c:	f001 fe80 	bl	8009880 <__pow5mult>
 8007b80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b82:	9002      	str	r0, [sp, #8]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	f340 82f3 	ble.w	8008170 <_dtoa_r+0xa58>
 8007b8a:	2700      	movs	r7, #0
 8007b8c:	9a02      	ldr	r2, [sp, #8]
 8007b8e:	6913      	ldr	r3, [r2, #16]
 8007b90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b94:	6918      	ldr	r0, [r3, #16]
 8007b96:	f001 fd83 	bl	80096a0 <__hi0bits>
 8007b9a:	f1c0 0020 	rsb	r0, r0, #32
 8007b9e:	4440      	add	r0, r8
 8007ba0:	f010 001f 	ands.w	r0, r0, #31
 8007ba4:	f000 81fa 	beq.w	8007f9c <_dtoa_r+0x884>
 8007ba8:	f1c0 0320 	rsb	r3, r0, #32
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	f340 84bd 	ble.w	800852c <_dtoa_r+0xe14>
 8007bb2:	f1c0 001c 	rsb	r0, r0, #28
 8007bb6:	9b05      	ldr	r3, [sp, #20]
 8007bb8:	4403      	add	r3, r0
 8007bba:	9305      	str	r3, [sp, #20]
 8007bbc:	4405      	add	r5, r0
 8007bbe:	4480      	add	r8, r0
 8007bc0:	9b05      	ldr	r3, [sp, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dd05      	ble.n	8007bd2 <_dtoa_r+0x4ba>
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	461a      	mov	r2, r3
 8007bca:	4648      	mov	r0, r9
 8007bcc:	f001 fea8 	bl	8009920 <__lshift>
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	f1b8 0f00 	cmp.w	r8, #0
 8007bd6:	dd05      	ble.n	8007be4 <_dtoa_r+0x4cc>
 8007bd8:	4642      	mov	r2, r8
 8007bda:	9902      	ldr	r1, [sp, #8]
 8007bdc:	4648      	mov	r0, r9
 8007bde:	f001 fe9f 	bl	8009920 <__lshift>
 8007be2:	9002      	str	r0, [sp, #8]
 8007be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f040 827a 	bne.w	80080e0 <_dtoa_r+0x9c8>
 8007bec:	9b06      	ldr	r3, [sp, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f340 8293 	ble.w	800811a <_dtoa_r+0xa02>
 8007bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f040 81f4 	bne.w	8007fe4 <_dtoa_r+0x8cc>
 8007bfc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8007c00:	9f06      	ldr	r7, [sp, #24]
 8007c02:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007c06:	465d      	mov	r5, fp
 8007c08:	e002      	b.n	8007c10 <_dtoa_r+0x4f8>
 8007c0a:	f001 fd09 	bl	8009620 <__multadd>
 8007c0e:	4604      	mov	r4, r0
 8007c10:	4641      	mov	r1, r8
 8007c12:	4620      	mov	r0, r4
 8007c14:	f7ff fcec 	bl	80075f0 <quorem>
 8007c18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c1c:	f805 ab01 	strb.w	sl, [r5], #1
 8007c20:	ebcb 0305 	rsb	r3, fp, r5
 8007c24:	42bb      	cmp	r3, r7
 8007c26:	f04f 020a 	mov.w	r2, #10
 8007c2a:	f04f 0300 	mov.w	r3, #0
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4648      	mov	r0, r9
 8007c32:	dbea      	blt.n	8007c0a <_dtoa_r+0x4f2>
 8007c34:	9b07      	ldr	r3, [sp, #28]
 8007c36:	9a06      	ldr	r2, [sp, #24]
 8007c38:	2a01      	cmp	r2, #1
 8007c3a:	bfac      	ite	ge
 8007c3c:	189b      	addge	r3, r3, r2
 8007c3e:	3301      	addlt	r3, #1
 8007c40:	461d      	mov	r5, r3
 8007c42:	f04f 0b00 	mov.w	fp, #0
 8007c46:	4621      	mov	r1, r4
 8007c48:	2201      	movs	r2, #1
 8007c4a:	4648      	mov	r0, r9
 8007c4c:	f001 fe68 	bl	8009920 <__lshift>
 8007c50:	9902      	ldr	r1, [sp, #8]
 8007c52:	9008      	str	r0, [sp, #32]
 8007c54:	f001 febc 	bl	80099d0 <__mcmp>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	f340 8305 	ble.w	8008268 <_dtoa_r+0xb50>
 8007c5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c62:	9907      	ldr	r1, [sp, #28]
 8007c64:	1e6b      	subs	r3, r5, #1
 8007c66:	e004      	b.n	8007c72 <_dtoa_r+0x55a>
 8007c68:	428b      	cmp	r3, r1
 8007c6a:	f000 8274 	beq.w	8008156 <_dtoa_r+0xa3e>
 8007c6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c72:	2a39      	cmp	r2, #57	; 0x39
 8007c74:	f103 0501 	add.w	r5, r3, #1
 8007c78:	d0f6      	beq.n	8007c68 <_dtoa_r+0x550>
 8007c7a:	3201      	adds	r2, #1
 8007c7c:	701a      	strb	r2, [r3, #0]
 8007c7e:	9902      	ldr	r1, [sp, #8]
 8007c80:	4648      	mov	r0, r9
 8007c82:	f001 fcc3 	bl	800960c <_Bfree>
 8007c86:	2e00      	cmp	r6, #0
 8007c88:	f43f af0d 	beq.w	8007aa6 <_dtoa_r+0x38e>
 8007c8c:	f1bb 0f00 	cmp.w	fp, #0
 8007c90:	d005      	beq.n	8007c9e <_dtoa_r+0x586>
 8007c92:	45b3      	cmp	fp, r6
 8007c94:	d003      	beq.n	8007c9e <_dtoa_r+0x586>
 8007c96:	4659      	mov	r1, fp
 8007c98:	4648      	mov	r0, r9
 8007c9a:	f001 fcb7 	bl	800960c <_Bfree>
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4648      	mov	r0, r9
 8007ca2:	f001 fcb3 	bl	800960c <_Bfree>
 8007ca6:	e6fe      	b.n	8007aa6 <_dtoa_r+0x38e>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cac:	e5ec      	b.n	8007888 <_dtoa_r+0x170>
 8007cae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007cb2:	4640      	mov	r0, r8
 8007cb4:	f7fb ff06 	bl	8003ac4 <__aeabi_i2d>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	f7fc f9ce 	bl	8004060 <__aeabi_dcmpeq>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	f47f adcb 	bne.w	8007860 <_dtoa_r+0x148>
 8007cca:	f108 33ff 	add.w	r3, r8, #4294967295
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	e5c6      	b.n	8007860 <_dtoa_r+0x148>
 8007cd2:	9a05      	ldr	r2, [sp, #20]
 8007cd4:	9b04      	ldr	r3, [sp, #16]
 8007cd6:	1ad2      	subs	r2, r2, r3
 8007cd8:	425b      	negs	r3, r3
 8007cda:	9302      	str	r3, [sp, #8]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	9205      	str	r2, [sp, #20]
 8007ce0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ce2:	e5e0      	b.n	80078a6 <_dtoa_r+0x18e>
 8007ce4:	f1c8 0300 	rsb	r3, r8, #0
 8007ce8:	9305      	str	r3, [sp, #20]
 8007cea:	f04f 0800 	mov.w	r8, #0
 8007cee:	e5d2      	b.n	8007896 <_dtoa_r+0x17e>
 8007cf0:	9f02      	ldr	r7, [sp, #8]
 8007cf2:	9d05      	ldr	r5, [sp, #20]
 8007cf4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007cf6:	e707      	b.n	8007b08 <_dtoa_r+0x3f0>
 8007cf8:	f1c3 0820 	rsb	r8, r3, #32
 8007cfc:	fa0a f008 	lsl.w	r0, sl, r8
 8007d00:	e57b      	b.n	80077fa <_dtoa_r+0xe2>
 8007d02:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d04:	e5c0      	b.n	8007888 <_dtoa_r+0x170>
 8007d06:	bf00      	nop
 8007d08:	40240000 	.word	0x40240000
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d10:	9b04      	ldr	r3, [sp, #16]
 8007d12:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007d14:	4413      	add	r3, r2
 8007d16:	930c      	str	r3, [sp, #48]	; 0x30
 8007d18:	3301      	adds	r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	9306      	str	r3, [sp, #24]
 8007d1e:	f340 827d 	ble.w	800821c <_dtoa_r+0xb04>
 8007d22:	9c06      	ldr	r4, [sp, #24]
 8007d24:	4626      	mov	r6, r4
 8007d26:	2100      	movs	r1, #0
 8007d28:	2e17      	cmp	r6, #23
 8007d2a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007d2e:	d90b      	bls.n	8007d48 <_dtoa_r+0x630>
 8007d30:	2201      	movs	r2, #1
 8007d32:	2304      	movs	r3, #4
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	f103 0014 	add.w	r0, r3, #20
 8007d3a:	42b0      	cmp	r0, r6
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	f102 0201 	add.w	r2, r2, #1
 8007d42:	d9f7      	bls.n	8007d34 <_dtoa_r+0x61c>
 8007d44:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007d48:	4648      	mov	r0, r9
 8007d4a:	f001 fc39 	bl	80095c0 <_Balloc>
 8007d4e:	2c0e      	cmp	r4, #14
 8007d50:	9007      	str	r0, [sp, #28]
 8007d52:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8007d56:	f63f ade5 	bhi.w	8007924 <_dtoa_r+0x20c>
 8007d5a:	2d00      	cmp	r5, #0
 8007d5c:	f43f ade2 	beq.w	8007924 <_dtoa_r+0x20c>
 8007d60:	9904      	ldr	r1, [sp, #16]
 8007d62:	2900      	cmp	r1, #0
 8007d64:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8007d68:	f340 829a 	ble.w	80082a0 <_dtoa_r+0xb88>
 8007d6c:	4b90      	ldr	r3, [pc, #576]	; (8007fb0 <_dtoa_r+0x898>)
 8007d6e:	f001 020f 	and.w	r2, r1, #15
 8007d72:	110e      	asrs	r6, r1, #4
 8007d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d78:	06f0      	lsls	r0, r6, #27
 8007d7a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007d7e:	f140 8246 	bpl.w	800820e <_dtoa_r+0xaf6>
 8007d82:	4b8c      	ldr	r3, [pc, #560]	; (8007fb4 <_dtoa_r+0x89c>)
 8007d84:	4650      	mov	r0, sl
 8007d86:	4659      	mov	r1, fp
 8007d88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d8c:	f7fc f82a 	bl	8003de4 <__aeabi_ddiv>
 8007d90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007d94:	f006 060f 	and.w	r6, r6, #15
 8007d98:	f04f 0a03 	mov.w	sl, #3
 8007d9c:	b186      	cbz	r6, 8007dc0 <_dtoa_r+0x6a8>
 8007d9e:	4f85      	ldr	r7, [pc, #532]	; (8007fb4 <_dtoa_r+0x89c>)
 8007da0:	07f1      	lsls	r1, r6, #31
 8007da2:	d509      	bpl.n	8007db8 <_dtoa_r+0x6a0>
 8007da4:	4620      	mov	r0, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dac:	f7fb fef0 	bl	8003b90 <__aeabi_dmul>
 8007db0:	f10a 0a01 	add.w	sl, sl, #1
 8007db4:	4604      	mov	r4, r0
 8007db6:	460d      	mov	r5, r1
 8007db8:	1076      	asrs	r6, r6, #1
 8007dba:	f107 0708 	add.w	r7, r7, #8
 8007dbe:	d1ef      	bne.n	8007da0 <_dtoa_r+0x688>
 8007dc0:	4622      	mov	r2, r4
 8007dc2:	462b      	mov	r3, r5
 8007dc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dc8:	f7fc f80c 	bl	8003de4 <__aeabi_ddiv>
 8007dcc:	4606      	mov	r6, r0
 8007dce:	460f      	mov	r7, r1
 8007dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd2:	b143      	cbz	r3, 8007de6 <_dtoa_r+0x6ce>
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	4b78      	ldr	r3, [pc, #480]	; (8007fb8 <_dtoa_r+0x8a0>)
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4639      	mov	r1, r7
 8007ddc:	f7fc f94a 	bl	8004074 <__aeabi_dcmplt>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	f040 831a 	bne.w	800841a <_dtoa_r+0xd02>
 8007de6:	4650      	mov	r0, sl
 8007de8:	f7fb fe6c 	bl	8003ac4 <__aeabi_i2d>
 8007dec:	4632      	mov	r2, r6
 8007dee:	463b      	mov	r3, r7
 8007df0:	f7fb fece 	bl	8003b90 <__aeabi_dmul>
 8007df4:	4b71      	ldr	r3, [pc, #452]	; (8007fbc <_dtoa_r+0x8a4>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	f7fb fd18 	bl	800382c <__adddf3>
 8007dfc:	9b06      	ldr	r3, [sp, #24]
 8007dfe:	4604      	mov	r4, r0
 8007e00:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 81db 	beq.w	80081c0 <_dtoa_r+0xaa8>
 8007e0a:	9b04      	ldr	r3, [sp, #16]
 8007e0c:	9314      	str	r3, [sp, #80]	; 0x50
 8007e0e:	9b06      	ldr	r3, [sp, #24]
 8007e10:	9310      	str	r3, [sp, #64]	; 0x40
 8007e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 8294 	beq.w	8008342 <_dtoa_r+0xc2a>
 8007e1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e1c:	4b64      	ldr	r3, [pc, #400]	; (8007fb0 <_dtoa_r+0x898>)
 8007e1e:	4968      	ldr	r1, [pc, #416]	; (8007fc0 <_dtoa_r+0x8a8>)
 8007e20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e24:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e28:	2000      	movs	r0, #0
 8007e2a:	f7fb ffdb 	bl	8003de4 <__aeabi_ddiv>
 8007e2e:	4622      	mov	r2, r4
 8007e30:	462b      	mov	r3, r5
 8007e32:	f7fb fcf9 	bl	8003828 <__aeabi_dsub>
 8007e36:	4682      	mov	sl, r0
 8007e38:	468b      	mov	fp, r1
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	f7fc f957 	bl	80040f0 <__aeabi_d2iz>
 8007e42:	4604      	mov	r4, r0
 8007e44:	f7fb fe3e 	bl	8003ac4 <__aeabi_i2d>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	4639      	mov	r1, r7
 8007e50:	f7fb fcea 	bl	8003828 <__aeabi_dsub>
 8007e54:	3430      	adds	r4, #48	; 0x30
 8007e56:	9d07      	ldr	r5, [sp, #28]
 8007e58:	b2e4      	uxtb	r4, r4
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	460f      	mov	r7, r1
 8007e5e:	702c      	strb	r4, [r5, #0]
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4650      	mov	r0, sl
 8007e66:	4659      	mov	r1, fp
 8007e68:	3501      	adds	r5, #1
 8007e6a:	f7fc f921 	bl	80040b0 <__aeabi_dcmpgt>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d150      	bne.n	8007f14 <_dtoa_r+0x7fc>
 8007e72:	4632      	mov	r2, r6
 8007e74:	463b      	mov	r3, r7
 8007e76:	2000      	movs	r0, #0
 8007e78:	494f      	ldr	r1, [pc, #316]	; (8007fb8 <_dtoa_r+0x8a0>)
 8007e7a:	f7fb fcd5 	bl	8003828 <__aeabi_dsub>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4650      	mov	r0, sl
 8007e84:	4659      	mov	r1, fp
 8007e86:	f7fc f913 	bl	80040b0 <__aeabi_dcmpgt>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	f040 8308 	bne.w	80084a0 <_dtoa_r+0xd88>
 8007e90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e92:	2a01      	cmp	r2, #1
 8007e94:	f340 81f7 	ble.w	8008286 <_dtoa_r+0xb6e>
 8007e98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e9a:	9a07      	ldr	r2, [sp, #28]
 8007e9c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007ea0:	4413      	add	r3, r2
 8007ea2:	4698      	mov	r8, r3
 8007ea4:	e00d      	b.n	8007ec2 <_dtoa_r+0x7aa>
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	4943      	ldr	r1, [pc, #268]	; (8007fb8 <_dtoa_r+0x8a0>)
 8007eaa:	f7fb fcbd 	bl	8003828 <__aeabi_dsub>
 8007eae:	4652      	mov	r2, sl
 8007eb0:	465b      	mov	r3, fp
 8007eb2:	f7fc f8df 	bl	8004074 <__aeabi_dcmplt>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f040 82f2 	bne.w	80084a0 <_dtoa_r+0xd88>
 8007ebc:	4545      	cmp	r5, r8
 8007ebe:	f000 81e0 	beq.w	8008282 <_dtoa_r+0xb6a>
 8007ec2:	4650      	mov	r0, sl
 8007ec4:	4659      	mov	r1, fp
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	4b3e      	ldr	r3, [pc, #248]	; (8007fc4 <_dtoa_r+0x8ac>)
 8007eca:	f7fb fe61 	bl	8003b90 <__aeabi_dmul>
 8007ece:	2200      	movs	r2, #0
 8007ed0:	4b3c      	ldr	r3, [pc, #240]	; (8007fc4 <_dtoa_r+0x8ac>)
 8007ed2:	4682      	mov	sl, r0
 8007ed4:	468b      	mov	fp, r1
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	4639      	mov	r1, r7
 8007eda:	f7fb fe59 	bl	8003b90 <__aeabi_dmul>
 8007ede:	460f      	mov	r7, r1
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	f7fc f905 	bl	80040f0 <__aeabi_d2iz>
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	f7fb fdec 	bl	8003ac4 <__aeabi_i2d>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	f7fb fc98 	bl	8003828 <__aeabi_dsub>
 8007ef8:	3430      	adds	r4, #48	; 0x30
 8007efa:	b2e4      	uxtb	r4, r4
 8007efc:	4652      	mov	r2, sl
 8007efe:	465b      	mov	r3, fp
 8007f00:	f805 4b01 	strb.w	r4, [r5], #1
 8007f04:	4606      	mov	r6, r0
 8007f06:	460f      	mov	r7, r1
 8007f08:	f7fc f8b4 	bl	8004074 <__aeabi_dcmplt>
 8007f0c:	4632      	mov	r2, r6
 8007f0e:	463b      	mov	r3, r7
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d0c8      	beq.n	8007ea6 <_dtoa_r+0x78e>
 8007f14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f16:	9304      	str	r3, [sp, #16]
 8007f18:	e5c5      	b.n	8007aa6 <_dtoa_r+0x38e>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f340 8180 	ble.w	8008226 <_dtoa_r+0xb0e>
 8007f26:	461e      	mov	r6, r3
 8007f28:	461c      	mov	r4, r3
 8007f2a:	930c      	str	r3, [sp, #48]	; 0x30
 8007f2c:	9306      	str	r3, [sp, #24]
 8007f2e:	e6fa      	b.n	8007d26 <_dtoa_r+0x60e>
 8007f30:	2301      	movs	r3, #1
 8007f32:	9309      	str	r3, [sp, #36]	; 0x24
 8007f34:	e7f3      	b.n	8007f1e <_dtoa_r+0x806>
 8007f36:	9408      	str	r4, [sp, #32]
 8007f38:	9a02      	ldr	r2, [sp, #8]
 8007f3a:	9908      	ldr	r1, [sp, #32]
 8007f3c:	4648      	mov	r0, r9
 8007f3e:	f001 fc9f 	bl	8009880 <__pow5mult>
 8007f42:	4604      	mov	r4, r0
 8007f44:	e60e      	b.n	8007b64 <_dtoa_r+0x44c>
 8007f46:	9b06      	ldr	r3, [sp, #24]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f73f acfe 	bgt.w	800794a <_dtoa_r+0x232>
 8007f4e:	f040 814f 	bne.w	80081f0 <_dtoa_r+0xad8>
 8007f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f56:	2200      	movs	r2, #0
 8007f58:	4b1b      	ldr	r3, [pc, #108]	; (8007fc8 <_dtoa_r+0x8b0>)
 8007f5a:	f7fb fe19 	bl	8003b90 <__aeabi_dmul>
 8007f5e:	465b      	mov	r3, fp
 8007f60:	4652      	mov	r2, sl
 8007f62:	f7fc f89b 	bl	800409c <__aeabi_dcmpge>
 8007f66:	9b06      	ldr	r3, [sp, #24]
 8007f68:	9302      	str	r3, [sp, #8]
 8007f6a:	461e      	mov	r6, r3
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	f000 80ea 	beq.w	8008146 <_dtoa_r+0xa2e>
 8007f72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f74:	9d07      	ldr	r5, [sp, #28]
 8007f76:	43db      	mvns	r3, r3
 8007f78:	9304      	str	r3, [sp, #16]
 8007f7a:	9902      	ldr	r1, [sp, #8]
 8007f7c:	4648      	mov	r0, r9
 8007f7e:	f001 fb45 	bl	800960c <_Bfree>
 8007f82:	2e00      	cmp	r6, #0
 8007f84:	f43f ad8f 	beq.w	8007aa6 <_dtoa_r+0x38e>
 8007f88:	e689      	b.n	8007c9e <_dtoa_r+0x586>
 8007f8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f8c:	2a00      	cmp	r2, #0
 8007f8e:	f000 8238 	beq.w	8008402 <_dtoa_r+0xcea>
 8007f92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f96:	9f02      	ldr	r7, [sp, #8]
 8007f98:	9d05      	ldr	r5, [sp, #20]
 8007f9a:	e5ac      	b.n	8007af6 <_dtoa_r+0x3de>
 8007f9c:	201c      	movs	r0, #28
 8007f9e:	e60a      	b.n	8007bb6 <_dtoa_r+0x49e>
 8007fa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	f340 8280 	ble.w	80084a8 <_dtoa_r+0xd90>
 8007fa8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007faa:	2001      	movs	r0, #1
 8007fac:	e5f7      	b.n	8007b9e <_dtoa_r+0x486>
 8007fae:	bf00      	nop
 8007fb0:	0800ac20 	.word	0x0800ac20
 8007fb4:	0800ace8 	.word	0x0800ace8
 8007fb8:	3ff00000 	.word	0x3ff00000
 8007fbc:	401c0000 	.word	0x401c0000
 8007fc0:	3fe00000 	.word	0x3fe00000
 8007fc4:	40240000 	.word	0x40240000
 8007fc8:	40140000 	.word	0x40140000
 8007fcc:	4631      	mov	r1, r6
 8007fce:	2300      	movs	r3, #0
 8007fd0:	220a      	movs	r2, #10
 8007fd2:	4648      	mov	r0, r9
 8007fd4:	f001 fb24 	bl	8009620 <__multadd>
 8007fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	4606      	mov	r6, r0
 8007fde:	f340 828d 	ble.w	80084fc <_dtoa_r+0xde4>
 8007fe2:	9306      	str	r3, [sp, #24]
 8007fe4:	2d00      	cmp	r5, #0
 8007fe6:	dd05      	ble.n	8007ff4 <_dtoa_r+0x8dc>
 8007fe8:	4631      	mov	r1, r6
 8007fea:	462a      	mov	r2, r5
 8007fec:	4648      	mov	r0, r9
 8007fee:	f001 fc97 	bl	8009920 <__lshift>
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	2f00      	cmp	r7, #0
 8007ff6:	f040 817c 	bne.w	80082f2 <_dtoa_r+0xbda>
 8007ffa:	46b0      	mov	r8, r6
 8007ffc:	9b06      	ldr	r3, [sp, #24]
 8007ffe:	9a07      	ldr	r2, [sp, #28]
 8008000:	3b01      	subs	r3, #1
 8008002:	18d3      	adds	r3, r2, r3
 8008004:	9308      	str	r3, [sp, #32]
 8008006:	f00a 0301 	and.w	r3, sl, #1
 800800a:	9309      	str	r3, [sp, #36]	; 0x24
 800800c:	4617      	mov	r7, r2
 800800e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008012:	4620      	mov	r0, r4
 8008014:	4659      	mov	r1, fp
 8008016:	f7ff faeb 	bl	80075f0 <quorem>
 800801a:	4631      	mov	r1, r6
 800801c:	4605      	mov	r5, r0
 800801e:	4620      	mov	r0, r4
 8008020:	f001 fcd6 	bl	80099d0 <__mcmp>
 8008024:	4642      	mov	r2, r8
 8008026:	4659      	mov	r1, fp
 8008028:	4682      	mov	sl, r0
 800802a:	4648      	mov	r0, r9
 800802c:	f001 fcf2 	bl	8009a14 <__mdiff>
 8008030:	68c2      	ldr	r2, [r0, #12]
 8008032:	4683      	mov	fp, r0
 8008034:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8008038:	2a00      	cmp	r2, #0
 800803a:	d149      	bne.n	80080d0 <_dtoa_r+0x9b8>
 800803c:	4601      	mov	r1, r0
 800803e:	4620      	mov	r0, r4
 8008040:	9306      	str	r3, [sp, #24]
 8008042:	f001 fcc5 	bl	80099d0 <__mcmp>
 8008046:	4659      	mov	r1, fp
 8008048:	9005      	str	r0, [sp, #20]
 800804a:	4648      	mov	r0, r9
 800804c:	f001 fade 	bl	800960c <_Bfree>
 8008050:	9a05      	ldr	r2, [sp, #20]
 8008052:	9b06      	ldr	r3, [sp, #24]
 8008054:	b92a      	cbnz	r2, 8008062 <_dtoa_r+0x94a>
 8008056:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008058:	b919      	cbnz	r1, 8008062 <_dtoa_r+0x94a>
 800805a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800805c:	2900      	cmp	r1, #0
 800805e:	f000 8235 	beq.w	80084cc <_dtoa_r+0xdb4>
 8008062:	f1ba 0f00 	cmp.w	sl, #0
 8008066:	f2c0 80e3 	blt.w	8008230 <_dtoa_r+0xb18>
 800806a:	d105      	bne.n	8008078 <_dtoa_r+0x960>
 800806c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800806e:	b919      	cbnz	r1, 8008078 <_dtoa_r+0x960>
 8008070:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008072:	2900      	cmp	r1, #0
 8008074:	f000 80dc 	beq.w	8008230 <_dtoa_r+0xb18>
 8008078:	2a00      	cmp	r2, #0
 800807a:	f300 814e 	bgt.w	800831a <_dtoa_r+0xc02>
 800807e:	9a08      	ldr	r2, [sp, #32]
 8008080:	703b      	strb	r3, [r7, #0]
 8008082:	f107 0a01 	add.w	sl, r7, #1
 8008086:	4297      	cmp	r7, r2
 8008088:	4655      	mov	r5, sl
 800808a:	f000 8152 	beq.w	8008332 <_dtoa_r+0xc1a>
 800808e:	4621      	mov	r1, r4
 8008090:	2300      	movs	r3, #0
 8008092:	220a      	movs	r2, #10
 8008094:	4648      	mov	r0, r9
 8008096:	f001 fac3 	bl	8009620 <__multadd>
 800809a:	4546      	cmp	r6, r8
 800809c:	4604      	mov	r4, r0
 800809e:	4631      	mov	r1, r6
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	f04f 020a 	mov.w	r2, #10
 80080a8:	4648      	mov	r0, r9
 80080aa:	d00b      	beq.n	80080c4 <_dtoa_r+0x9ac>
 80080ac:	f001 fab8 	bl	8009620 <__multadd>
 80080b0:	4641      	mov	r1, r8
 80080b2:	4606      	mov	r6, r0
 80080b4:	2300      	movs	r3, #0
 80080b6:	220a      	movs	r2, #10
 80080b8:	4648      	mov	r0, r9
 80080ba:	f001 fab1 	bl	8009620 <__multadd>
 80080be:	4657      	mov	r7, sl
 80080c0:	4680      	mov	r8, r0
 80080c2:	e7a4      	b.n	800800e <_dtoa_r+0x8f6>
 80080c4:	f001 faac 	bl	8009620 <__multadd>
 80080c8:	4657      	mov	r7, sl
 80080ca:	4606      	mov	r6, r0
 80080cc:	4680      	mov	r8, r0
 80080ce:	e79e      	b.n	800800e <_dtoa_r+0x8f6>
 80080d0:	4601      	mov	r1, r0
 80080d2:	4648      	mov	r0, r9
 80080d4:	9305      	str	r3, [sp, #20]
 80080d6:	f001 fa99 	bl	800960c <_Bfree>
 80080da:	2201      	movs	r2, #1
 80080dc:	9b05      	ldr	r3, [sp, #20]
 80080de:	e7c0      	b.n	8008062 <_dtoa_r+0x94a>
 80080e0:	9902      	ldr	r1, [sp, #8]
 80080e2:	4620      	mov	r0, r4
 80080e4:	f001 fc74 	bl	80099d0 <__mcmp>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	f6bf ad7f 	bge.w	8007bec <_dtoa_r+0x4d4>
 80080ee:	4621      	mov	r1, r4
 80080f0:	9c04      	ldr	r4, [sp, #16]
 80080f2:	2300      	movs	r3, #0
 80080f4:	3c01      	subs	r4, #1
 80080f6:	220a      	movs	r2, #10
 80080f8:	4648      	mov	r0, r9
 80080fa:	9404      	str	r4, [sp, #16]
 80080fc:	f001 fa90 	bl	8009620 <__multadd>
 8008100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008102:	4604      	mov	r4, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	f47f af61 	bne.w	8007fcc <_dtoa_r+0x8b4>
 800810a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800810c:	2b00      	cmp	r3, #0
 800810e:	f340 81ed 	ble.w	80084ec <_dtoa_r+0xdd4>
 8008112:	9306      	str	r3, [sp, #24]
 8008114:	e572      	b.n	8007bfc <_dtoa_r+0x4e4>
 8008116:	9c08      	ldr	r4, [sp, #32]
 8008118:	e524      	b.n	8007b64 <_dtoa_r+0x44c>
 800811a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800811c:	2b02      	cmp	r3, #2
 800811e:	f77f ad69 	ble.w	8007bf4 <_dtoa_r+0x4dc>
 8008122:	9b06      	ldr	r3, [sp, #24]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f040 819d 	bne.w	8008464 <_dtoa_r+0xd4c>
 800812a:	9902      	ldr	r1, [sp, #8]
 800812c:	2205      	movs	r2, #5
 800812e:	4648      	mov	r0, r9
 8008130:	f001 fa76 	bl	8009620 <__multadd>
 8008134:	4601      	mov	r1, r0
 8008136:	9002      	str	r0, [sp, #8]
 8008138:	4620      	mov	r0, r4
 800813a:	f001 fc49 	bl	80099d0 <__mcmp>
 800813e:	2800      	cmp	r0, #0
 8008140:	9408      	str	r4, [sp, #32]
 8008142:	f77f af16 	ble.w	8007f72 <_dtoa_r+0x85a>
 8008146:	9a04      	ldr	r2, [sp, #16]
 8008148:	9907      	ldr	r1, [sp, #28]
 800814a:	2331      	movs	r3, #49	; 0x31
 800814c:	3201      	adds	r2, #1
 800814e:	9204      	str	r2, [sp, #16]
 8008150:	700b      	strb	r3, [r1, #0]
 8008152:	1c4d      	adds	r5, r1, #1
 8008154:	e711      	b.n	8007f7a <_dtoa_r+0x862>
 8008156:	9a04      	ldr	r2, [sp, #16]
 8008158:	3201      	adds	r2, #1
 800815a:	9204      	str	r2, [sp, #16]
 800815c:	9a07      	ldr	r2, [sp, #28]
 800815e:	2331      	movs	r3, #49	; 0x31
 8008160:	7013      	strb	r3, [r2, #0]
 8008162:	e58c      	b.n	8007c7e <_dtoa_r+0x566>
 8008164:	2301      	movs	r3, #1
 8008166:	9309      	str	r3, [sp, #36]	; 0x24
 8008168:	e5d2      	b.n	8007d10 <_dtoa_r+0x5f8>
 800816a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800816e:	e49a      	b.n	8007aa6 <_dtoa_r+0x38e>
 8008170:	f1ba 0f00 	cmp.w	sl, #0
 8008174:	f47f ad09 	bne.w	8007b8a <_dtoa_r+0x472>
 8008178:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800817c:	2b00      	cmp	r3, #0
 800817e:	f040 813e 	bne.w	80083fe <_dtoa_r+0xce6>
 8008182:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8008186:	0d3f      	lsrs	r7, r7, #20
 8008188:	053f      	lsls	r7, r7, #20
 800818a:	b12f      	cbz	r7, 8008198 <_dtoa_r+0xa80>
 800818c:	9b05      	ldr	r3, [sp, #20]
 800818e:	3301      	adds	r3, #1
 8008190:	9305      	str	r3, [sp, #20]
 8008192:	f108 0801 	add.w	r8, r8, #1
 8008196:	2701      	movs	r7, #1
 8008198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800819a:	2001      	movs	r0, #1
 800819c:	2b00      	cmp	r3, #0
 800819e:	f43f acfe 	beq.w	8007b9e <_dtoa_r+0x486>
 80081a2:	e4f3      	b.n	8007b8c <_dtoa_r+0x474>
 80081a4:	4650      	mov	r0, sl
 80081a6:	f7fb fc8d 	bl	8003ac4 <__aeabi_i2d>
 80081aa:	4632      	mov	r2, r6
 80081ac:	463b      	mov	r3, r7
 80081ae:	f7fb fcef 	bl	8003b90 <__aeabi_dmul>
 80081b2:	2200      	movs	r2, #0
 80081b4:	4bbf      	ldr	r3, [pc, #764]	; (80084b4 <_dtoa_r+0xd9c>)
 80081b6:	f7fb fb39 	bl	800382c <__adddf3>
 80081ba:	4604      	mov	r4, r0
 80081bc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80081c0:	4630      	mov	r0, r6
 80081c2:	4639      	mov	r1, r7
 80081c4:	2200      	movs	r2, #0
 80081c6:	4bbc      	ldr	r3, [pc, #752]	; (80084b8 <_dtoa_r+0xda0>)
 80081c8:	f7fb fb2e 	bl	8003828 <__aeabi_dsub>
 80081cc:	4622      	mov	r2, r4
 80081ce:	462b      	mov	r3, r5
 80081d0:	4606      	mov	r6, r0
 80081d2:	460f      	mov	r7, r1
 80081d4:	f7fb ff6c 	bl	80040b0 <__aeabi_dcmpgt>
 80081d8:	2800      	cmp	r0, #0
 80081da:	f040 80ae 	bne.w	800833a <_dtoa_r+0xc22>
 80081de:	4622      	mov	r2, r4
 80081e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80081e4:	4630      	mov	r0, r6
 80081e6:	4639      	mov	r1, r7
 80081e8:	f7fb ff44 	bl	8004074 <__aeabi_dcmplt>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d04a      	beq.n	8008286 <_dtoa_r+0xb6e>
 80081f0:	2300      	movs	r3, #0
 80081f2:	9302      	str	r3, [sp, #8]
 80081f4:	461e      	mov	r6, r3
 80081f6:	e6bc      	b.n	8007f72 <_dtoa_r+0x85a>
 80081f8:	9807      	ldr	r0, [sp, #28]
 80081fa:	f7ff babe 	b.w	800777a <_dtoa_r+0x62>
 80081fe:	9b02      	ldr	r3, [sp, #8]
 8008200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008202:	9702      	str	r7, [sp, #8]
 8008204:	1afb      	subs	r3, r7, r3
 8008206:	441a      	add	r2, r3
 8008208:	920a      	str	r2, [sp, #40]	; 0x28
 800820a:	2700      	movs	r7, #0
 800820c:	e46d      	b.n	8007aea <_dtoa_r+0x3d2>
 800820e:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8008212:	f04f 0a02 	mov.w	sl, #2
 8008216:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800821a:	e5bf      	b.n	8007d9c <_dtoa_r+0x684>
 800821c:	461c      	mov	r4, r3
 800821e:	2100      	movs	r1, #0
 8008220:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8008224:	e590      	b.n	8007d48 <_dtoa_r+0x630>
 8008226:	2401      	movs	r4, #1
 8008228:	9423      	str	r4, [sp, #140]	; 0x8c
 800822a:	940c      	str	r4, [sp, #48]	; 0x30
 800822c:	9406      	str	r4, [sp, #24]
 800822e:	e7f6      	b.n	800821e <_dtoa_r+0xb06>
 8008230:	2a00      	cmp	r2, #0
 8008232:	469a      	mov	sl, r3
 8008234:	dd11      	ble.n	800825a <_dtoa_r+0xb42>
 8008236:	4621      	mov	r1, r4
 8008238:	2201      	movs	r2, #1
 800823a:	4648      	mov	r0, r9
 800823c:	f001 fb70 	bl	8009920 <__lshift>
 8008240:	9902      	ldr	r1, [sp, #8]
 8008242:	4604      	mov	r4, r0
 8008244:	f001 fbc4 	bl	80099d0 <__mcmp>
 8008248:	2800      	cmp	r0, #0
 800824a:	f340 8148 	ble.w	80084de <_dtoa_r+0xdc6>
 800824e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008252:	f000 8109 	beq.w	8008468 <_dtoa_r+0xd50>
 8008256:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 800825a:	46b3      	mov	fp, r6
 800825c:	f887 a000 	strb.w	sl, [r7]
 8008260:	1c7d      	adds	r5, r7, #1
 8008262:	4646      	mov	r6, r8
 8008264:	9408      	str	r4, [sp, #32]
 8008266:	e50a      	b.n	8007c7e <_dtoa_r+0x566>
 8008268:	d104      	bne.n	8008274 <_dtoa_r+0xb5c>
 800826a:	f01a 0f01 	tst.w	sl, #1
 800826e:	d001      	beq.n	8008274 <_dtoa_r+0xb5c>
 8008270:	e4f5      	b.n	8007c5e <_dtoa_r+0x546>
 8008272:	4615      	mov	r5, r2
 8008274:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008278:	2b30      	cmp	r3, #48	; 0x30
 800827a:	f105 32ff 	add.w	r2, r5, #4294967295
 800827e:	d0f8      	beq.n	8008272 <_dtoa_r+0xb5a>
 8008280:	e4fd      	b.n	8007c7e <_dtoa_r+0x566>
 8008282:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008286:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 800828a:	f7ff bb4b 	b.w	8007924 <_dtoa_r+0x20c>
 800828e:	9907      	ldr	r1, [sp, #28]
 8008290:	2230      	movs	r2, #48	; 0x30
 8008292:	700a      	strb	r2, [r1, #0]
 8008294:	9a04      	ldr	r2, [sp, #16]
 8008296:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800829a:	3201      	adds	r2, #1
 800829c:	9204      	str	r2, [sp, #16]
 800829e:	e400      	b.n	8007aa2 <_dtoa_r+0x38a>
 80082a0:	9b04      	ldr	r3, [sp, #16]
 80082a2:	425c      	negs	r4, r3
 80082a4:	2c00      	cmp	r4, #0
 80082a6:	f000 80b3 	beq.w	8008410 <_dtoa_r+0xcf8>
 80082aa:	4b84      	ldr	r3, [pc, #528]	; (80084bc <_dtoa_r+0xda4>)
 80082ac:	f004 020f 	and.w	r2, r4, #15
 80082b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80082bc:	f7fb fc68 	bl	8003b90 <__aeabi_dmul>
 80082c0:	1124      	asrs	r4, r4, #4
 80082c2:	4606      	mov	r6, r0
 80082c4:	460f      	mov	r7, r1
 80082c6:	f000 8116 	beq.w	80084f6 <_dtoa_r+0xdde>
 80082ca:	4d7d      	ldr	r5, [pc, #500]	; (80084c0 <_dtoa_r+0xda8>)
 80082cc:	f04f 0a02 	mov.w	sl, #2
 80082d0:	07e2      	lsls	r2, r4, #31
 80082d2:	d509      	bpl.n	80082e8 <_dtoa_r+0xbd0>
 80082d4:	4630      	mov	r0, r6
 80082d6:	4639      	mov	r1, r7
 80082d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082dc:	f7fb fc58 	bl	8003b90 <__aeabi_dmul>
 80082e0:	f10a 0a01 	add.w	sl, sl, #1
 80082e4:	4606      	mov	r6, r0
 80082e6:	460f      	mov	r7, r1
 80082e8:	1064      	asrs	r4, r4, #1
 80082ea:	f105 0508 	add.w	r5, r5, #8
 80082ee:	d1ef      	bne.n	80082d0 <_dtoa_r+0xbb8>
 80082f0:	e56e      	b.n	8007dd0 <_dtoa_r+0x6b8>
 80082f2:	6871      	ldr	r1, [r6, #4]
 80082f4:	4648      	mov	r0, r9
 80082f6:	f001 f963 	bl	80095c0 <_Balloc>
 80082fa:	6933      	ldr	r3, [r6, #16]
 80082fc:	1c9a      	adds	r2, r3, #2
 80082fe:	4605      	mov	r5, r0
 8008300:	0092      	lsls	r2, r2, #2
 8008302:	f106 010c 	add.w	r1, r6, #12
 8008306:	300c      	adds	r0, #12
 8008308:	f7fb ff68 	bl	80041dc <memcpy>
 800830c:	4629      	mov	r1, r5
 800830e:	2201      	movs	r2, #1
 8008310:	4648      	mov	r0, r9
 8008312:	f001 fb05 	bl	8009920 <__lshift>
 8008316:	4680      	mov	r8, r0
 8008318:	e670      	b.n	8007ffc <_dtoa_r+0x8e4>
 800831a:	2b39      	cmp	r3, #57	; 0x39
 800831c:	f000 80a4 	beq.w	8008468 <_dtoa_r+0xd50>
 8008320:	f103 0a01 	add.w	sl, r3, #1
 8008324:	46b3      	mov	fp, r6
 8008326:	f887 a000 	strb.w	sl, [r7]
 800832a:	1c7d      	adds	r5, r7, #1
 800832c:	4646      	mov	r6, r8
 800832e:	9408      	str	r4, [sp, #32]
 8008330:	e4a5      	b.n	8007c7e <_dtoa_r+0x566>
 8008332:	46b3      	mov	fp, r6
 8008334:	469a      	mov	sl, r3
 8008336:	4646      	mov	r6, r8
 8008338:	e485      	b.n	8007c46 <_dtoa_r+0x52e>
 800833a:	2300      	movs	r3, #0
 800833c:	9302      	str	r3, [sp, #8]
 800833e:	461e      	mov	r6, r3
 8008340:	e701      	b.n	8008146 <_dtoa_r+0xa2e>
 8008342:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008344:	495d      	ldr	r1, [pc, #372]	; (80084bc <_dtoa_r+0xda4>)
 8008346:	1e5a      	subs	r2, r3, #1
 8008348:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800834c:	462b      	mov	r3, r5
 800834e:	9215      	str	r2, [sp, #84]	; 0x54
 8008350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008354:	4622      	mov	r2, r4
 8008356:	f7fb fc1b 	bl	8003b90 <__aeabi_dmul>
 800835a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800835e:	4639      	mov	r1, r7
 8008360:	4630      	mov	r0, r6
 8008362:	f7fb fec5 	bl	80040f0 <__aeabi_d2iz>
 8008366:	4604      	mov	r4, r0
 8008368:	f7fb fbac 	bl	8003ac4 <__aeabi_i2d>
 800836c:	460b      	mov	r3, r1
 800836e:	4602      	mov	r2, r0
 8008370:	4639      	mov	r1, r7
 8008372:	4630      	mov	r0, r6
 8008374:	f7fb fa58 	bl	8003828 <__aeabi_dsub>
 8008378:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800837a:	460f      	mov	r7, r1
 800837c:	9907      	ldr	r1, [sp, #28]
 800837e:	3430      	adds	r4, #48	; 0x30
 8008380:	2b01      	cmp	r3, #1
 8008382:	4606      	mov	r6, r0
 8008384:	700c      	strb	r4, [r1, #0]
 8008386:	f101 0501 	add.w	r5, r1, #1
 800838a:	d020      	beq.n	80083ce <_dtoa_r+0xcb6>
 800838c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800838e:	9a07      	ldr	r2, [sp, #28]
 8008390:	4413      	add	r3, r2
 8008392:	469a      	mov	sl, r3
 8008394:	46ab      	mov	fp, r5
 8008396:	2200      	movs	r2, #0
 8008398:	4b4a      	ldr	r3, [pc, #296]	; (80084c4 <_dtoa_r+0xdac>)
 800839a:	4630      	mov	r0, r6
 800839c:	4639      	mov	r1, r7
 800839e:	f7fb fbf7 	bl	8003b90 <__aeabi_dmul>
 80083a2:	460f      	mov	r7, r1
 80083a4:	4606      	mov	r6, r0
 80083a6:	f7fb fea3 	bl	80040f0 <__aeabi_d2iz>
 80083aa:	4604      	mov	r4, r0
 80083ac:	f7fb fb8a 	bl	8003ac4 <__aeabi_i2d>
 80083b0:	3430      	adds	r4, #48	; 0x30
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	4630      	mov	r0, r6
 80083b8:	4639      	mov	r1, r7
 80083ba:	f7fb fa35 	bl	8003828 <__aeabi_dsub>
 80083be:	f80b 4b01 	strb.w	r4, [fp], #1
 80083c2:	45da      	cmp	sl, fp
 80083c4:	4606      	mov	r6, r0
 80083c6:	460f      	mov	r7, r1
 80083c8:	d1e5      	bne.n	8008396 <_dtoa_r+0xc7e>
 80083ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083cc:	441d      	add	r5, r3
 80083ce:	2200      	movs	r2, #0
 80083d0:	4b3d      	ldr	r3, [pc, #244]	; (80084c8 <_dtoa_r+0xdb0>)
 80083d2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80083d6:	f7fb fa29 	bl	800382c <__adddf3>
 80083da:	4632      	mov	r2, r6
 80083dc:	463b      	mov	r3, r7
 80083de:	f7fb fe49 	bl	8004074 <__aeabi_dcmplt>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d048      	beq.n	8008478 <_dtoa_r+0xd60>
 80083e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80083e8:	9304      	str	r3, [sp, #16]
 80083ea:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 80083ee:	f7ff bb4c 	b.w	8007a8a <_dtoa_r+0x372>
 80083f2:	9b05      	ldr	r3, [sp, #20]
 80083f4:	9a06      	ldr	r2, [sp, #24]
 80083f6:	1a9d      	subs	r5, r3, r2
 80083f8:	2300      	movs	r3, #0
 80083fa:	f7ff bb7c 	b.w	8007af6 <_dtoa_r+0x3de>
 80083fe:	2700      	movs	r7, #0
 8008400:	e6ca      	b.n	8008198 <_dtoa_r+0xa80>
 8008402:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008404:	9f02      	ldr	r7, [sp, #8]
 8008406:	9d05      	ldr	r5, [sp, #20]
 8008408:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800840c:	f7ff bb73 	b.w	8007af6 <_dtoa_r+0x3de>
 8008410:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8008414:	f04f 0a02 	mov.w	sl, #2
 8008418:	e4da      	b.n	8007dd0 <_dtoa_r+0x6b8>
 800841a:	9b06      	ldr	r3, [sp, #24]
 800841c:	2b00      	cmp	r3, #0
 800841e:	f43f aec1 	beq.w	80081a4 <_dtoa_r+0xa8c>
 8008422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008424:	2b00      	cmp	r3, #0
 8008426:	f77f af2e 	ble.w	8008286 <_dtoa_r+0xb6e>
 800842a:	2200      	movs	r2, #0
 800842c:	4b25      	ldr	r3, [pc, #148]	; (80084c4 <_dtoa_r+0xdac>)
 800842e:	4630      	mov	r0, r6
 8008430:	4639      	mov	r1, r7
 8008432:	f7fb fbad 	bl	8003b90 <__aeabi_dmul>
 8008436:	4606      	mov	r6, r0
 8008438:	460f      	mov	r7, r1
 800843a:	f10a 0001 	add.w	r0, sl, #1
 800843e:	f7fb fb41 	bl	8003ac4 <__aeabi_i2d>
 8008442:	4632      	mov	r2, r6
 8008444:	463b      	mov	r3, r7
 8008446:	f7fb fba3 	bl	8003b90 <__aeabi_dmul>
 800844a:	2200      	movs	r2, #0
 800844c:	4b19      	ldr	r3, [pc, #100]	; (80084b4 <_dtoa_r+0xd9c>)
 800844e:	f7fb f9ed 	bl	800382c <__adddf3>
 8008452:	9a04      	ldr	r2, [sp, #16]
 8008454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008456:	9310      	str	r3, [sp, #64]	; 0x40
 8008458:	3a01      	subs	r2, #1
 800845a:	4604      	mov	r4, r0
 800845c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008460:	9214      	str	r2, [sp, #80]	; 0x50
 8008462:	e4d6      	b.n	8007e12 <_dtoa_r+0x6fa>
 8008464:	9408      	str	r4, [sp, #32]
 8008466:	e584      	b.n	8007f72 <_dtoa_r+0x85a>
 8008468:	2239      	movs	r2, #57	; 0x39
 800846a:	46b3      	mov	fp, r6
 800846c:	9408      	str	r4, [sp, #32]
 800846e:	4646      	mov	r6, r8
 8008470:	703a      	strb	r2, [r7, #0]
 8008472:	1c7d      	adds	r5, r7, #1
 8008474:	f7ff bbf5 	b.w	8007c62 <_dtoa_r+0x54a>
 8008478:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800847c:	2000      	movs	r0, #0
 800847e:	4912      	ldr	r1, [pc, #72]	; (80084c8 <_dtoa_r+0xdb0>)
 8008480:	f7fb f9d2 	bl	8003828 <__aeabi_dsub>
 8008484:	4632      	mov	r2, r6
 8008486:	463b      	mov	r3, r7
 8008488:	f7fb fe12 	bl	80040b0 <__aeabi_dcmpgt>
 800848c:	b908      	cbnz	r0, 8008492 <_dtoa_r+0xd7a>
 800848e:	e6fa      	b.n	8008286 <_dtoa_r+0xb6e>
 8008490:	4615      	mov	r5, r2
 8008492:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008496:	2b30      	cmp	r3, #48	; 0x30
 8008498:	f105 32ff 	add.w	r2, r5, #4294967295
 800849c:	d0f8      	beq.n	8008490 <_dtoa_r+0xd78>
 800849e:	e539      	b.n	8007f14 <_dtoa_r+0x7fc>
 80084a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084a2:	9304      	str	r3, [sp, #16]
 80084a4:	f7ff baf1 	b.w	8007a8a <_dtoa_r+0x372>
 80084a8:	f1ba 0f00 	cmp.w	sl, #0
 80084ac:	f47f ad7c 	bne.w	8007fa8 <_dtoa_r+0x890>
 80084b0:	e662      	b.n	8008178 <_dtoa_r+0xa60>
 80084b2:	bf00      	nop
 80084b4:	401c0000 	.word	0x401c0000
 80084b8:	40140000 	.word	0x40140000
 80084bc:	0800ac20 	.word	0x0800ac20
 80084c0:	0800ace8 	.word	0x0800ace8
 80084c4:	40240000 	.word	0x40240000
 80084c8:	3fe00000 	.word	0x3fe00000
 80084cc:	2b39      	cmp	r3, #57	; 0x39
 80084ce:	46d3      	mov	fp, sl
 80084d0:	469a      	mov	sl, r3
 80084d2:	d0c9      	beq.n	8008468 <_dtoa_r+0xd50>
 80084d4:	f1bb 0f00 	cmp.w	fp, #0
 80084d8:	f73f aebd 	bgt.w	8008256 <_dtoa_r+0xb3e>
 80084dc:	e6bd      	b.n	800825a <_dtoa_r+0xb42>
 80084de:	f47f aebc 	bne.w	800825a <_dtoa_r+0xb42>
 80084e2:	f01a 0f01 	tst.w	sl, #1
 80084e6:	f43f aeb8 	beq.w	800825a <_dtoa_r+0xb42>
 80084ea:	e6b0      	b.n	800824e <_dtoa_r+0xb36>
 80084ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	dc25      	bgt.n	800853e <_dtoa_r+0xe26>
 80084f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084f4:	e60d      	b.n	8008112 <_dtoa_r+0x9fa>
 80084f6:	f04f 0a02 	mov.w	sl, #2
 80084fa:	e469      	b.n	8007dd0 <_dtoa_r+0x6b8>
 80084fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084fe:	2b02      	cmp	r3, #2
 8008500:	dc1d      	bgt.n	800853e <_dtoa_r+0xe26>
 8008502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008504:	e56d      	b.n	8007fe2 <_dtoa_r+0x8ca>
 8008506:	2400      	movs	r4, #0
 8008508:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800850c:	4621      	mov	r1, r4
 800850e:	4648      	mov	r0, r9
 8008510:	f001 f856 	bl	80095c0 <_Balloc>
 8008514:	f04f 33ff 	mov.w	r3, #4294967295
 8008518:	9306      	str	r3, [sp, #24]
 800851a:	930c      	str	r3, [sp, #48]	; 0x30
 800851c:	2301      	movs	r3, #1
 800851e:	9007      	str	r0, [sp, #28]
 8008520:	9423      	str	r4, [sp, #140]	; 0x8c
 8008522:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8008526:	9309      	str	r3, [sp, #36]	; 0x24
 8008528:	f7ff b9fc 	b.w	8007924 <_dtoa_r+0x20c>
 800852c:	f43f ab48 	beq.w	8007bc0 <_dtoa_r+0x4a8>
 8008530:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8008534:	f7ff bb3f 	b.w	8007bb6 <_dtoa_r+0x49e>
 8008538:	2501      	movs	r5, #1
 800853a:	f7ff b9bd 	b.w	80078b8 <_dtoa_r+0x1a0>
 800853e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008540:	9306      	str	r3, [sp, #24]
 8008542:	e5ee      	b.n	8008122 <_dtoa_r+0xa0a>

08008544 <__sflush_r>:
 8008544:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8008548:	b29a      	uxth	r2, r3
 800854a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800854e:	460d      	mov	r5, r1
 8008550:	0711      	lsls	r1, r2, #28
 8008552:	4680      	mov	r8, r0
 8008554:	d43c      	bmi.n	80085d0 <__sflush_r+0x8c>
 8008556:	686a      	ldr	r2, [r5, #4]
 8008558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800855c:	2a00      	cmp	r2, #0
 800855e:	81ab      	strh	r3, [r5, #12]
 8008560:	dd73      	ble.n	800864a <__sflush_r+0x106>
 8008562:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8008564:	2c00      	cmp	r4, #0
 8008566:	d04b      	beq.n	8008600 <__sflush_r+0xbc>
 8008568:	b29b      	uxth	r3, r3
 800856a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800856e:	2100      	movs	r1, #0
 8008570:	b292      	uxth	r2, r2
 8008572:	f8d8 6000 	ldr.w	r6, [r8]
 8008576:	f8c8 1000 	str.w	r1, [r8]
 800857a:	2a00      	cmp	r2, #0
 800857c:	d069      	beq.n	8008652 <__sflush_r+0x10e>
 800857e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8008580:	075f      	lsls	r7, r3, #29
 8008582:	d505      	bpl.n	8008590 <__sflush_r+0x4c>
 8008584:	6869      	ldr	r1, [r5, #4]
 8008586:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008588:	1a52      	subs	r2, r2, r1
 800858a:	b10b      	cbz	r3, 8008590 <__sflush_r+0x4c>
 800858c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800858e:	1ad2      	subs	r2, r2, r3
 8008590:	2300      	movs	r3, #0
 8008592:	69e9      	ldr	r1, [r5, #28]
 8008594:	4640      	mov	r0, r8
 8008596:	47a0      	blx	r4
 8008598:	1c44      	adds	r4, r0, #1
 800859a:	d03c      	beq.n	8008616 <__sflush_r+0xd2>
 800859c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80085a0:	692a      	ldr	r2, [r5, #16]
 80085a2:	602a      	str	r2, [r5, #0]
 80085a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085a8:	2200      	movs	r2, #0
 80085aa:	81ab      	strh	r3, [r5, #12]
 80085ac:	04db      	lsls	r3, r3, #19
 80085ae:	606a      	str	r2, [r5, #4]
 80085b0:	d449      	bmi.n	8008646 <__sflush_r+0x102>
 80085b2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80085b4:	f8c8 6000 	str.w	r6, [r8]
 80085b8:	b311      	cbz	r1, 8008600 <__sflush_r+0xbc>
 80085ba:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80085be:	4299      	cmp	r1, r3
 80085c0:	d002      	beq.n	80085c8 <__sflush_r+0x84>
 80085c2:	4640      	mov	r0, r8
 80085c4:	f000 f94e 	bl	8008864 <_free_r>
 80085c8:	2000      	movs	r0, #0
 80085ca:	6328      	str	r0, [r5, #48]	; 0x30
 80085cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085d0:	692e      	ldr	r6, [r5, #16]
 80085d2:	b1ae      	cbz	r6, 8008600 <__sflush_r+0xbc>
 80085d4:	682c      	ldr	r4, [r5, #0]
 80085d6:	602e      	str	r6, [r5, #0]
 80085d8:	0790      	lsls	r0, r2, #30
 80085da:	bf0c      	ite	eq
 80085dc:	696b      	ldreq	r3, [r5, #20]
 80085de:	2300      	movne	r3, #0
 80085e0:	1ba4      	subs	r4, r4, r6
 80085e2:	60ab      	str	r3, [r5, #8]
 80085e4:	e00a      	b.n	80085fc <__sflush_r+0xb8>
 80085e6:	4623      	mov	r3, r4
 80085e8:	4632      	mov	r2, r6
 80085ea:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80085ec:	69e9      	ldr	r1, [r5, #28]
 80085ee:	4640      	mov	r0, r8
 80085f0:	47b8      	blx	r7
 80085f2:	2800      	cmp	r0, #0
 80085f4:	eba4 0400 	sub.w	r4, r4, r0
 80085f8:	4406      	add	r6, r0
 80085fa:	dd04      	ble.n	8008606 <__sflush_r+0xc2>
 80085fc:	2c00      	cmp	r4, #0
 80085fe:	dcf2      	bgt.n	80085e6 <__sflush_r+0xa2>
 8008600:	2000      	movs	r0, #0
 8008602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008606:	89ab      	ldrh	r3, [r5, #12]
 8008608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800860c:	81ab      	strh	r3, [r5, #12]
 800860e:	f04f 30ff 	mov.w	r0, #4294967295
 8008612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008616:	f8d8 2000 	ldr.w	r2, [r8]
 800861a:	2a1d      	cmp	r2, #29
 800861c:	d8f3      	bhi.n	8008606 <__sflush_r+0xc2>
 800861e:	4b1a      	ldr	r3, [pc, #104]	; (8008688 <__sflush_r+0x144>)
 8008620:	40d3      	lsrs	r3, r2
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	f083 0401 	eor.w	r4, r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	d0eb      	beq.n	8008606 <__sflush_r+0xc2>
 800862e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8008632:	6929      	ldr	r1, [r5, #16]
 8008634:	6029      	str	r1, [r5, #0]
 8008636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800863a:	04d9      	lsls	r1, r3, #19
 800863c:	606c      	str	r4, [r5, #4]
 800863e:	81ab      	strh	r3, [r5, #12]
 8008640:	d5b7      	bpl.n	80085b2 <__sflush_r+0x6e>
 8008642:	2a00      	cmp	r2, #0
 8008644:	d1b5      	bne.n	80085b2 <__sflush_r+0x6e>
 8008646:	6528      	str	r0, [r5, #80]	; 0x50
 8008648:	e7b3      	b.n	80085b2 <__sflush_r+0x6e>
 800864a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800864c:	2a00      	cmp	r2, #0
 800864e:	dc88      	bgt.n	8008562 <__sflush_r+0x1e>
 8008650:	e7d6      	b.n	8008600 <__sflush_r+0xbc>
 8008652:	2301      	movs	r3, #1
 8008654:	69e9      	ldr	r1, [r5, #28]
 8008656:	4640      	mov	r0, r8
 8008658:	47a0      	blx	r4
 800865a:	1c43      	adds	r3, r0, #1
 800865c:	4602      	mov	r2, r0
 800865e:	d002      	beq.n	8008666 <__sflush_r+0x122>
 8008660:	89ab      	ldrh	r3, [r5, #12]
 8008662:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8008664:	e78c      	b.n	8008580 <__sflush_r+0x3c>
 8008666:	f8d8 3000 	ldr.w	r3, [r8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0f8      	beq.n	8008660 <__sflush_r+0x11c>
 800866e:	2b1d      	cmp	r3, #29
 8008670:	d001      	beq.n	8008676 <__sflush_r+0x132>
 8008672:	2b16      	cmp	r3, #22
 8008674:	d102      	bne.n	800867c <__sflush_r+0x138>
 8008676:	f8c8 6000 	str.w	r6, [r8]
 800867a:	e7c1      	b.n	8008600 <__sflush_r+0xbc>
 800867c:	89ab      	ldrh	r3, [r5, #12]
 800867e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008682:	81ab      	strh	r3, [r5, #12]
 8008684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008688:	20400001 	.word	0x20400001

0800868c <_fflush_r>:
 800868c:	b510      	push	{r4, lr}
 800868e:	4604      	mov	r4, r0
 8008690:	b082      	sub	sp, #8
 8008692:	b108      	cbz	r0, 8008698 <_fflush_r+0xc>
 8008694:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008696:	b153      	cbz	r3, 80086ae <_fflush_r+0x22>
 8008698:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800869c:	b908      	cbnz	r0, 80086a2 <_fflush_r+0x16>
 800869e:	b002      	add	sp, #8
 80086a0:	bd10      	pop	{r4, pc}
 80086a2:	4620      	mov	r0, r4
 80086a4:	b002      	add	sp, #8
 80086a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086aa:	f7ff bf4b 	b.w	8008544 <__sflush_r>
 80086ae:	9101      	str	r1, [sp, #4]
 80086b0:	f000 f880 	bl	80087b4 <__sinit>
 80086b4:	9901      	ldr	r1, [sp, #4]
 80086b6:	e7ef      	b.n	8008698 <_fflush_r+0xc>

080086b8 <_cleanup_r>:
 80086b8:	4901      	ldr	r1, [pc, #4]	; (80086c0 <_cleanup_r+0x8>)
 80086ba:	f000 bb3d 	b.w	8008d38 <_fwalk_reent>
 80086be:	bf00      	nop
 80086c0:	0800a2c5 	.word	0x0800a2c5

080086c4 <__sinit.part.1>:
 80086c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c8:	4b35      	ldr	r3, [pc, #212]	; (80087a0 <__sinit.part.1+0xdc>)
 80086ca:	6845      	ldr	r5, [r0, #4]
 80086cc:	63c3      	str	r3, [r0, #60]	; 0x3c
 80086ce:	2400      	movs	r4, #0
 80086d0:	4607      	mov	r7, r0
 80086d2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 80086d6:	2304      	movs	r3, #4
 80086d8:	2103      	movs	r1, #3
 80086da:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 80086de:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 80086e2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 80086e6:	b083      	sub	sp, #12
 80086e8:	602c      	str	r4, [r5, #0]
 80086ea:	606c      	str	r4, [r5, #4]
 80086ec:	60ac      	str	r4, [r5, #8]
 80086ee:	666c      	str	r4, [r5, #100]	; 0x64
 80086f0:	81ec      	strh	r4, [r5, #14]
 80086f2:	612c      	str	r4, [r5, #16]
 80086f4:	616c      	str	r4, [r5, #20]
 80086f6:	61ac      	str	r4, [r5, #24]
 80086f8:	81ab      	strh	r3, [r5, #12]
 80086fa:	4621      	mov	r1, r4
 80086fc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8008700:	2208      	movs	r2, #8
 8008702:	f7fb fe05 	bl	8004310 <memset>
 8008706:	68be      	ldr	r6, [r7, #8]
 8008708:	f8df b098 	ldr.w	fp, [pc, #152]	; 80087a4 <__sinit.part.1+0xe0>
 800870c:	f8df a098 	ldr.w	sl, [pc, #152]	; 80087a8 <__sinit.part.1+0xe4>
 8008710:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80087ac <__sinit.part.1+0xe8>
 8008714:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80087b0 <__sinit.part.1+0xec>
 8008718:	f8c5 b020 	str.w	fp, [r5, #32]
 800871c:	2301      	movs	r3, #1
 800871e:	2209      	movs	r2, #9
 8008720:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8008724:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8008728:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800872c:	61ed      	str	r5, [r5, #28]
 800872e:	4621      	mov	r1, r4
 8008730:	81f3      	strh	r3, [r6, #14]
 8008732:	81b2      	strh	r2, [r6, #12]
 8008734:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8008738:	6034      	str	r4, [r6, #0]
 800873a:	6074      	str	r4, [r6, #4]
 800873c:	60b4      	str	r4, [r6, #8]
 800873e:	6674      	str	r4, [r6, #100]	; 0x64
 8008740:	6134      	str	r4, [r6, #16]
 8008742:	6174      	str	r4, [r6, #20]
 8008744:	61b4      	str	r4, [r6, #24]
 8008746:	2208      	movs	r2, #8
 8008748:	9301      	str	r3, [sp, #4]
 800874a:	f7fb fde1 	bl	8004310 <memset>
 800874e:	68fd      	ldr	r5, [r7, #12]
 8008750:	61f6      	str	r6, [r6, #28]
 8008752:	2012      	movs	r0, #18
 8008754:	2202      	movs	r2, #2
 8008756:	f8c6 b020 	str.w	fp, [r6, #32]
 800875a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800875e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8008762:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8008766:	4621      	mov	r1, r4
 8008768:	81a8      	strh	r0, [r5, #12]
 800876a:	81ea      	strh	r2, [r5, #14]
 800876c:	602c      	str	r4, [r5, #0]
 800876e:	606c      	str	r4, [r5, #4]
 8008770:	60ac      	str	r4, [r5, #8]
 8008772:	666c      	str	r4, [r5, #100]	; 0x64
 8008774:	612c      	str	r4, [r5, #16]
 8008776:	616c      	str	r4, [r5, #20]
 8008778:	61ac      	str	r4, [r5, #24]
 800877a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800877e:	2208      	movs	r2, #8
 8008780:	f7fb fdc6 	bl	8004310 <memset>
 8008784:	9b01      	ldr	r3, [sp, #4]
 8008786:	61ed      	str	r5, [r5, #28]
 8008788:	f8c5 b020 	str.w	fp, [r5, #32]
 800878c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8008790:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8008794:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8008798:	63bb      	str	r3, [r7, #56]	; 0x38
 800879a:	b003      	add	sp, #12
 800879c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a0:	080086b9 	.word	0x080086b9
 80087a4:	08009fe5 	.word	0x08009fe5
 80087a8:	0800a009 	.word	0x0800a009
 80087ac:	0800a045 	.word	0x0800a045
 80087b0:	0800a065 	.word	0x0800a065

080087b4 <__sinit>:
 80087b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80087b6:	b103      	cbz	r3, 80087ba <__sinit+0x6>
 80087b8:	4770      	bx	lr
 80087ba:	f7ff bf83 	b.w	80086c4 <__sinit.part.1>
 80087be:	bf00      	nop

080087c0 <__sfp_lock_acquire>:
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop

080087c4 <__sfp_lock_release>:
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop

080087c8 <_malloc_trim_r>:
 80087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ca:	4f23      	ldr	r7, [pc, #140]	; (8008858 <_malloc_trim_r+0x90>)
 80087cc:	460c      	mov	r4, r1
 80087ce:	4606      	mov	r6, r0
 80087d0:	f000 fef2 	bl	80095b8 <__malloc_lock>
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	685d      	ldr	r5, [r3, #4]
 80087d8:	f025 0503 	bic.w	r5, r5, #3
 80087dc:	1b29      	subs	r1, r5, r4
 80087de:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 80087e2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80087e6:	f021 010f 	bic.w	r1, r1, #15
 80087ea:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80087ee:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80087f2:	db07      	blt.n	8008804 <_malloc_trim_r+0x3c>
 80087f4:	2100      	movs	r1, #0
 80087f6:	4630      	mov	r0, r6
 80087f8:	f001 fbe2 	bl	8009fc0 <_sbrk_r>
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	442b      	add	r3, r5
 8008800:	4298      	cmp	r0, r3
 8008802:	d004      	beq.n	800880e <_malloc_trim_r+0x46>
 8008804:	4630      	mov	r0, r6
 8008806:	f000 fed9 	bl	80095bc <__malloc_unlock>
 800880a:	2000      	movs	r0, #0
 800880c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800880e:	4261      	negs	r1, r4
 8008810:	4630      	mov	r0, r6
 8008812:	f001 fbd5 	bl	8009fc0 <_sbrk_r>
 8008816:	3001      	adds	r0, #1
 8008818:	d00d      	beq.n	8008836 <_malloc_trim_r+0x6e>
 800881a:	4b10      	ldr	r3, [pc, #64]	; (800885c <_malloc_trim_r+0x94>)
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	6819      	ldr	r1, [r3, #0]
 8008820:	1b2d      	subs	r5, r5, r4
 8008822:	f045 0501 	orr.w	r5, r5, #1
 8008826:	4630      	mov	r0, r6
 8008828:	1b09      	subs	r1, r1, r4
 800882a:	6055      	str	r5, [r2, #4]
 800882c:	6019      	str	r1, [r3, #0]
 800882e:	f000 fec5 	bl	80095bc <__malloc_unlock>
 8008832:	2001      	movs	r0, #1
 8008834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008836:	2100      	movs	r1, #0
 8008838:	4630      	mov	r0, r6
 800883a:	f001 fbc1 	bl	8009fc0 <_sbrk_r>
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	1a83      	subs	r3, r0, r2
 8008842:	2b0f      	cmp	r3, #15
 8008844:	ddde      	ble.n	8008804 <_malloc_trim_r+0x3c>
 8008846:	4c06      	ldr	r4, [pc, #24]	; (8008860 <_malloc_trim_r+0x98>)
 8008848:	4904      	ldr	r1, [pc, #16]	; (800885c <_malloc_trim_r+0x94>)
 800884a:	6824      	ldr	r4, [r4, #0]
 800884c:	f043 0301 	orr.w	r3, r3, #1
 8008850:	1b00      	subs	r0, r0, r4
 8008852:	6053      	str	r3, [r2, #4]
 8008854:	6008      	str	r0, [r1, #0]
 8008856:	e7d5      	b.n	8008804 <_malloc_trim_r+0x3c>
 8008858:	200005d8 	.word	0x200005d8
 800885c:	20000a58 	.word	0x20000a58
 8008860:	200009e4 	.word	0x200009e4

08008864 <_free_r>:
 8008864:	2900      	cmp	r1, #0
 8008866:	d045      	beq.n	80088f4 <_free_r+0x90>
 8008868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800886c:	460d      	mov	r5, r1
 800886e:	4680      	mov	r8, r0
 8008870:	f000 fea2 	bl	80095b8 <__malloc_lock>
 8008874:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8008878:	496a      	ldr	r1, [pc, #424]	; (8008a24 <_free_r+0x1c0>)
 800887a:	f027 0301 	bic.w	r3, r7, #1
 800887e:	f1a5 0408 	sub.w	r4, r5, #8
 8008882:	18e2      	adds	r2, r4, r3
 8008884:	688e      	ldr	r6, [r1, #8]
 8008886:	6850      	ldr	r0, [r2, #4]
 8008888:	42b2      	cmp	r2, r6
 800888a:	f020 0003 	bic.w	r0, r0, #3
 800888e:	d062      	beq.n	8008956 <_free_r+0xf2>
 8008890:	07fe      	lsls	r6, r7, #31
 8008892:	6050      	str	r0, [r2, #4]
 8008894:	d40b      	bmi.n	80088ae <_free_r+0x4a>
 8008896:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800889a:	1be4      	subs	r4, r4, r7
 800889c:	f101 0e08 	add.w	lr, r1, #8
 80088a0:	68a5      	ldr	r5, [r4, #8]
 80088a2:	4575      	cmp	r5, lr
 80088a4:	443b      	add	r3, r7
 80088a6:	d06f      	beq.n	8008988 <_free_r+0x124>
 80088a8:	68e7      	ldr	r7, [r4, #12]
 80088aa:	60ef      	str	r7, [r5, #12]
 80088ac:	60bd      	str	r5, [r7, #8]
 80088ae:	1815      	adds	r5, r2, r0
 80088b0:	686d      	ldr	r5, [r5, #4]
 80088b2:	07ed      	lsls	r5, r5, #31
 80088b4:	d542      	bpl.n	800893c <_free_r+0xd8>
 80088b6:	f043 0201 	orr.w	r2, r3, #1
 80088ba:	6062      	str	r2, [r4, #4]
 80088bc:	50e3      	str	r3, [r4, r3]
 80088be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088c2:	d218      	bcs.n	80088f6 <_free_r+0x92>
 80088c4:	08db      	lsrs	r3, r3, #3
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	684d      	ldr	r5, [r1, #4]
 80088ca:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 80088ce:	60a7      	str	r7, [r4, #8]
 80088d0:	2001      	movs	r0, #1
 80088d2:	109b      	asrs	r3, r3, #2
 80088d4:	fa00 f303 	lsl.w	r3, r0, r3
 80088d8:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 80088dc:	431d      	orrs	r5, r3
 80088de:	3808      	subs	r0, #8
 80088e0:	60e0      	str	r0, [r4, #12]
 80088e2:	604d      	str	r5, [r1, #4]
 80088e4:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 80088e8:	60fc      	str	r4, [r7, #12]
 80088ea:	4640      	mov	r0, r8
 80088ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088f0:	f000 be64 	b.w	80095bc <__malloc_unlock>
 80088f4:	4770      	bx	lr
 80088f6:	0a5a      	lsrs	r2, r3, #9
 80088f8:	2a04      	cmp	r2, #4
 80088fa:	d853      	bhi.n	80089a4 <_free_r+0x140>
 80088fc:	099a      	lsrs	r2, r3, #6
 80088fe:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8008902:	007f      	lsls	r7, r7, #1
 8008904:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8008908:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 800890c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8008910:	4944      	ldr	r1, [pc, #272]	; (8008a24 <_free_r+0x1c0>)
 8008912:	3808      	subs	r0, #8
 8008914:	4290      	cmp	r0, r2
 8008916:	d04d      	beq.n	80089b4 <_free_r+0x150>
 8008918:	6851      	ldr	r1, [r2, #4]
 800891a:	f021 0103 	bic.w	r1, r1, #3
 800891e:	428b      	cmp	r3, r1
 8008920:	d202      	bcs.n	8008928 <_free_r+0xc4>
 8008922:	6892      	ldr	r2, [r2, #8]
 8008924:	4290      	cmp	r0, r2
 8008926:	d1f7      	bne.n	8008918 <_free_r+0xb4>
 8008928:	68d0      	ldr	r0, [r2, #12]
 800892a:	60e0      	str	r0, [r4, #12]
 800892c:	60a2      	str	r2, [r4, #8]
 800892e:	6084      	str	r4, [r0, #8]
 8008930:	60d4      	str	r4, [r2, #12]
 8008932:	4640      	mov	r0, r8
 8008934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008938:	f000 be40 	b.w	80095bc <__malloc_unlock>
 800893c:	6895      	ldr	r5, [r2, #8]
 800893e:	4f3a      	ldr	r7, [pc, #232]	; (8008a28 <_free_r+0x1c4>)
 8008940:	42bd      	cmp	r5, r7
 8008942:	4403      	add	r3, r0
 8008944:	d03f      	beq.n	80089c6 <_free_r+0x162>
 8008946:	68d0      	ldr	r0, [r2, #12]
 8008948:	60e8      	str	r0, [r5, #12]
 800894a:	f043 0201 	orr.w	r2, r3, #1
 800894e:	6085      	str	r5, [r0, #8]
 8008950:	6062      	str	r2, [r4, #4]
 8008952:	50e3      	str	r3, [r4, r3]
 8008954:	e7b3      	b.n	80088be <_free_r+0x5a>
 8008956:	07ff      	lsls	r7, r7, #31
 8008958:	4403      	add	r3, r0
 800895a:	d407      	bmi.n	800896c <_free_r+0x108>
 800895c:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8008960:	1aa4      	subs	r4, r4, r2
 8008962:	4413      	add	r3, r2
 8008964:	68a0      	ldr	r0, [r4, #8]
 8008966:	68e2      	ldr	r2, [r4, #12]
 8008968:	60c2      	str	r2, [r0, #12]
 800896a:	6090      	str	r0, [r2, #8]
 800896c:	4a2f      	ldr	r2, [pc, #188]	; (8008a2c <_free_r+0x1c8>)
 800896e:	6812      	ldr	r2, [r2, #0]
 8008970:	f043 0001 	orr.w	r0, r3, #1
 8008974:	4293      	cmp	r3, r2
 8008976:	6060      	str	r0, [r4, #4]
 8008978:	608c      	str	r4, [r1, #8]
 800897a:	d3b6      	bcc.n	80088ea <_free_r+0x86>
 800897c:	4b2c      	ldr	r3, [pc, #176]	; (8008a30 <_free_r+0x1cc>)
 800897e:	4640      	mov	r0, r8
 8008980:	6819      	ldr	r1, [r3, #0]
 8008982:	f7ff ff21 	bl	80087c8 <_malloc_trim_r>
 8008986:	e7b0      	b.n	80088ea <_free_r+0x86>
 8008988:	1811      	adds	r1, r2, r0
 800898a:	6849      	ldr	r1, [r1, #4]
 800898c:	07c9      	lsls	r1, r1, #31
 800898e:	d444      	bmi.n	8008a1a <_free_r+0x1b6>
 8008990:	6891      	ldr	r1, [r2, #8]
 8008992:	68d2      	ldr	r2, [r2, #12]
 8008994:	60ca      	str	r2, [r1, #12]
 8008996:	4403      	add	r3, r0
 8008998:	f043 0001 	orr.w	r0, r3, #1
 800899c:	6091      	str	r1, [r2, #8]
 800899e:	6060      	str	r0, [r4, #4]
 80089a0:	50e3      	str	r3, [r4, r3]
 80089a2:	e7a2      	b.n	80088ea <_free_r+0x86>
 80089a4:	2a14      	cmp	r2, #20
 80089a6:	d817      	bhi.n	80089d8 <_free_r+0x174>
 80089a8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 80089ac:	007f      	lsls	r7, r7, #1
 80089ae:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 80089b2:	e7a9      	b.n	8008908 <_free_r+0xa4>
 80089b4:	10aa      	asrs	r2, r5, #2
 80089b6:	684b      	ldr	r3, [r1, #4]
 80089b8:	2501      	movs	r5, #1
 80089ba:	fa05 f202 	lsl.w	r2, r5, r2
 80089be:	4313      	orrs	r3, r2
 80089c0:	604b      	str	r3, [r1, #4]
 80089c2:	4602      	mov	r2, r0
 80089c4:	e7b1      	b.n	800892a <_free_r+0xc6>
 80089c6:	f043 0201 	orr.w	r2, r3, #1
 80089ca:	614c      	str	r4, [r1, #20]
 80089cc:	610c      	str	r4, [r1, #16]
 80089ce:	60e5      	str	r5, [r4, #12]
 80089d0:	60a5      	str	r5, [r4, #8]
 80089d2:	6062      	str	r2, [r4, #4]
 80089d4:	50e3      	str	r3, [r4, r3]
 80089d6:	e788      	b.n	80088ea <_free_r+0x86>
 80089d8:	2a54      	cmp	r2, #84	; 0x54
 80089da:	d806      	bhi.n	80089ea <_free_r+0x186>
 80089dc:	0b1a      	lsrs	r2, r3, #12
 80089de:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 80089e2:	007f      	lsls	r7, r7, #1
 80089e4:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 80089e8:	e78e      	b.n	8008908 <_free_r+0xa4>
 80089ea:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80089ee:	d806      	bhi.n	80089fe <_free_r+0x19a>
 80089f0:	0bda      	lsrs	r2, r3, #15
 80089f2:	f102 0778 	add.w	r7, r2, #120	; 0x78
 80089f6:	007f      	lsls	r7, r7, #1
 80089f8:	f102 0577 	add.w	r5, r2, #119	; 0x77
 80089fc:	e784      	b.n	8008908 <_free_r+0xa4>
 80089fe:	f240 5054 	movw	r0, #1364	; 0x554
 8008a02:	4282      	cmp	r2, r0
 8008a04:	d806      	bhi.n	8008a14 <_free_r+0x1b0>
 8008a06:	0c9a      	lsrs	r2, r3, #18
 8008a08:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8008a0c:	007f      	lsls	r7, r7, #1
 8008a0e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 8008a12:	e779      	b.n	8008908 <_free_r+0xa4>
 8008a14:	27fe      	movs	r7, #254	; 0xfe
 8008a16:	257e      	movs	r5, #126	; 0x7e
 8008a18:	e776      	b.n	8008908 <_free_r+0xa4>
 8008a1a:	f043 0201 	orr.w	r2, r3, #1
 8008a1e:	6062      	str	r2, [r4, #4]
 8008a20:	50e3      	str	r3, [r4, r3]
 8008a22:	e762      	b.n	80088ea <_free_r+0x86>
 8008a24:	200005d8 	.word	0x200005d8
 8008a28:	200005e0 	.word	0x200005e0
 8008a2c:	200009e0 	.word	0x200009e0
 8008a30:	20000a54 	.word	0x20000a54

08008a34 <__sfvwrite_r>:
 8008a34:	6893      	ldr	r3, [r2, #8]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d076      	beq.n	8008b28 <__sfvwrite_r+0xf4>
 8008a3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3e:	898b      	ldrh	r3, [r1, #12]
 8008a40:	b085      	sub	sp, #20
 8008a42:	460c      	mov	r4, r1
 8008a44:	0719      	lsls	r1, r3, #28
 8008a46:	9001      	str	r0, [sp, #4]
 8008a48:	4616      	mov	r6, r2
 8008a4a:	d529      	bpl.n	8008aa0 <__sfvwrite_r+0x6c>
 8008a4c:	6922      	ldr	r2, [r4, #16]
 8008a4e:	b33a      	cbz	r2, 8008aa0 <__sfvwrite_r+0x6c>
 8008a50:	f003 0802 	and.w	r8, r3, #2
 8008a54:	fa1f f088 	uxth.w	r0, r8
 8008a58:	6835      	ldr	r5, [r6, #0]
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d02f      	beq.n	8008abe <__sfvwrite_r+0x8a>
 8008a5e:	f04f 0900 	mov.w	r9, #0
 8008a62:	4fb4      	ldr	r7, [pc, #720]	; (8008d34 <__sfvwrite_r+0x300>)
 8008a64:	46c8      	mov	r8, r9
 8008a66:	46b2      	mov	sl, r6
 8008a68:	45b8      	cmp	r8, r7
 8008a6a:	4643      	mov	r3, r8
 8008a6c:	464a      	mov	r2, r9
 8008a6e:	bf28      	it	cs
 8008a70:	463b      	movcs	r3, r7
 8008a72:	9801      	ldr	r0, [sp, #4]
 8008a74:	f1b8 0f00 	cmp.w	r8, #0
 8008a78:	d050      	beq.n	8008b1c <__sfvwrite_r+0xe8>
 8008a7a:	69e1      	ldr	r1, [r4, #28]
 8008a7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a7e:	47b0      	blx	r6
 8008a80:	2800      	cmp	r0, #0
 8008a82:	dd71      	ble.n	8008b68 <__sfvwrite_r+0x134>
 8008a84:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008a88:	1a1b      	subs	r3, r3, r0
 8008a8a:	4481      	add	r9, r0
 8008a8c:	ebc0 0808 	rsb	r8, r0, r8
 8008a90:	f8ca 3008 	str.w	r3, [sl, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1e7      	bne.n	8008a68 <__sfvwrite_r+0x34>
 8008a98:	2000      	movs	r0, #0
 8008a9a:	b005      	add	sp, #20
 8008a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	9801      	ldr	r0, [sp, #4]
 8008aa4:	f7fe fd40 	bl	8007528 <__swsetup_r>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	f040 813a 	bne.w	8008d22 <__sfvwrite_r+0x2ee>
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	6835      	ldr	r5, [r6, #0]
 8008ab2:	f003 0802 	and.w	r8, r3, #2
 8008ab6:	fa1f f088 	uxth.w	r0, r8
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d1cf      	bne.n	8008a5e <__sfvwrite_r+0x2a>
 8008abe:	f013 0901 	ands.w	r9, r3, #1
 8008ac2:	d15b      	bne.n	8008b7c <__sfvwrite_r+0x148>
 8008ac4:	464f      	mov	r7, r9
 8008ac6:	9602      	str	r6, [sp, #8]
 8008ac8:	b31f      	cbz	r7, 8008b12 <__sfvwrite_r+0xde>
 8008aca:	059a      	lsls	r2, r3, #22
 8008acc:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8008ad0:	d52c      	bpl.n	8008b2c <__sfvwrite_r+0xf8>
 8008ad2:	4547      	cmp	r7, r8
 8008ad4:	46c2      	mov	sl, r8
 8008ad6:	f0c0 80a4 	bcc.w	8008c22 <__sfvwrite_r+0x1ee>
 8008ada:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8008ade:	f040 80b1 	bne.w	8008c44 <__sfvwrite_r+0x210>
 8008ae2:	6820      	ldr	r0, [r4, #0]
 8008ae4:	4652      	mov	r2, sl
 8008ae6:	4649      	mov	r1, r9
 8008ae8:	f000 fd02 	bl	80094f0 <memmove>
 8008aec:	68a0      	ldr	r0, [r4, #8]
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	ebc8 0000 	rsb	r0, r8, r0
 8008af4:	4453      	add	r3, sl
 8008af6:	60a0      	str	r0, [r4, #8]
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	4638      	mov	r0, r7
 8008afc:	9a02      	ldr	r2, [sp, #8]
 8008afe:	6893      	ldr	r3, [r2, #8]
 8008b00:	1a1b      	subs	r3, r3, r0
 8008b02:	4481      	add	r9, r0
 8008b04:	1a3f      	subs	r7, r7, r0
 8008b06:	6093      	str	r3, [r2, #8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d0c5      	beq.n	8008a98 <__sfvwrite_r+0x64>
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	2f00      	cmp	r7, #0
 8008b10:	d1db      	bne.n	8008aca <__sfvwrite_r+0x96>
 8008b12:	f8d5 9000 	ldr.w	r9, [r5]
 8008b16:	686f      	ldr	r7, [r5, #4]
 8008b18:	3508      	adds	r5, #8
 8008b1a:	e7d5      	b.n	8008ac8 <__sfvwrite_r+0x94>
 8008b1c:	f8d5 9000 	ldr.w	r9, [r5]
 8008b20:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8008b24:	3508      	adds	r5, #8
 8008b26:	e79f      	b.n	8008a68 <__sfvwrite_r+0x34>
 8008b28:	2000      	movs	r0, #0
 8008b2a:	4770      	bx	lr
 8008b2c:	6820      	ldr	r0, [r4, #0]
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	4298      	cmp	r0, r3
 8008b32:	d803      	bhi.n	8008b3c <__sfvwrite_r+0x108>
 8008b34:	6961      	ldr	r1, [r4, #20]
 8008b36:	428f      	cmp	r7, r1
 8008b38:	f080 80b7 	bcs.w	8008caa <__sfvwrite_r+0x276>
 8008b3c:	45b8      	cmp	r8, r7
 8008b3e:	bf28      	it	cs
 8008b40:	46b8      	movcs	r8, r7
 8008b42:	4642      	mov	r2, r8
 8008b44:	4649      	mov	r1, r9
 8008b46:	f000 fcd3 	bl	80094f0 <memmove>
 8008b4a:	68a3      	ldr	r3, [r4, #8]
 8008b4c:	6822      	ldr	r2, [r4, #0]
 8008b4e:	ebc8 0303 	rsb	r3, r8, r3
 8008b52:	4442      	add	r2, r8
 8008b54:	60a3      	str	r3, [r4, #8]
 8008b56:	6022      	str	r2, [r4, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d149      	bne.n	8008bf0 <__sfvwrite_r+0x1bc>
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	9801      	ldr	r0, [sp, #4]
 8008b60:	f7ff fd94 	bl	800868c <_fflush_r>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d043      	beq.n	8008bf0 <__sfvwrite_r+0x1bc>
 8008b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b70:	f04f 30ff 	mov.w	r0, #4294967295
 8008b74:	81a3      	strh	r3, [r4, #12]
 8008b76:	b005      	add	sp, #20
 8008b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7c:	4680      	mov	r8, r0
 8008b7e:	9002      	str	r0, [sp, #8]
 8008b80:	4682      	mov	sl, r0
 8008b82:	4681      	mov	r9, r0
 8008b84:	f1b9 0f00 	cmp.w	r9, #0
 8008b88:	d02a      	beq.n	8008be0 <__sfvwrite_r+0x1ac>
 8008b8a:	9b02      	ldr	r3, [sp, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d04c      	beq.n	8008c2a <__sfvwrite_r+0x1f6>
 8008b90:	6820      	ldr	r0, [r4, #0]
 8008b92:	6923      	ldr	r3, [r4, #16]
 8008b94:	6962      	ldr	r2, [r4, #20]
 8008b96:	45c8      	cmp	r8, r9
 8008b98:	46c3      	mov	fp, r8
 8008b9a:	bf28      	it	cs
 8008b9c:	46cb      	movcs	fp, r9
 8008b9e:	4298      	cmp	r0, r3
 8008ba0:	465f      	mov	r7, fp
 8008ba2:	d904      	bls.n	8008bae <__sfvwrite_r+0x17a>
 8008ba4:	68a3      	ldr	r3, [r4, #8]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	459b      	cmp	fp, r3
 8008baa:	f300 8090 	bgt.w	8008cce <__sfvwrite_r+0x29a>
 8008bae:	4593      	cmp	fp, r2
 8008bb0:	db20      	blt.n	8008bf4 <__sfvwrite_r+0x1c0>
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008bb6:	69e1      	ldr	r1, [r4, #28]
 8008bb8:	9801      	ldr	r0, [sp, #4]
 8008bba:	4652      	mov	r2, sl
 8008bbc:	47b8      	blx	r7
 8008bbe:	1e07      	subs	r7, r0, #0
 8008bc0:	ddd2      	ble.n	8008b68 <__sfvwrite_r+0x134>
 8008bc2:	ebb8 0807 	subs.w	r8, r8, r7
 8008bc6:	d023      	beq.n	8008c10 <__sfvwrite_r+0x1dc>
 8008bc8:	68b3      	ldr	r3, [r6, #8]
 8008bca:	1bdb      	subs	r3, r3, r7
 8008bcc:	44ba      	add	sl, r7
 8008bce:	ebc7 0909 	rsb	r9, r7, r9
 8008bd2:	60b3      	str	r3, [r6, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f43f af5f 	beq.w	8008a98 <__sfvwrite_r+0x64>
 8008bda:	f1b9 0f00 	cmp.w	r9, #0
 8008bde:	d1d4      	bne.n	8008b8a <__sfvwrite_r+0x156>
 8008be0:	2300      	movs	r3, #0
 8008be2:	f8d5 a000 	ldr.w	sl, [r5]
 8008be6:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8008bea:	9302      	str	r3, [sp, #8]
 8008bec:	3508      	adds	r5, #8
 8008bee:	e7c9      	b.n	8008b84 <__sfvwrite_r+0x150>
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	e783      	b.n	8008afc <__sfvwrite_r+0xc8>
 8008bf4:	465a      	mov	r2, fp
 8008bf6:	4651      	mov	r1, sl
 8008bf8:	f000 fc7a 	bl	80094f0 <memmove>
 8008bfc:	68a2      	ldr	r2, [r4, #8]
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	ebcb 0202 	rsb	r2, fp, r2
 8008c04:	445b      	add	r3, fp
 8008c06:	ebb8 0807 	subs.w	r8, r8, r7
 8008c0a:	60a2      	str	r2, [r4, #8]
 8008c0c:	6023      	str	r3, [r4, #0]
 8008c0e:	d1db      	bne.n	8008bc8 <__sfvwrite_r+0x194>
 8008c10:	4621      	mov	r1, r4
 8008c12:	9801      	ldr	r0, [sp, #4]
 8008c14:	f7ff fd3a 	bl	800868c <_fflush_r>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d1a5      	bne.n	8008b68 <__sfvwrite_r+0x134>
 8008c1c:	f8cd 8008 	str.w	r8, [sp, #8]
 8008c20:	e7d2      	b.n	8008bc8 <__sfvwrite_r+0x194>
 8008c22:	6820      	ldr	r0, [r4, #0]
 8008c24:	46b8      	mov	r8, r7
 8008c26:	46ba      	mov	sl, r7
 8008c28:	e75c      	b.n	8008ae4 <__sfvwrite_r+0xb0>
 8008c2a:	464a      	mov	r2, r9
 8008c2c:	210a      	movs	r1, #10
 8008c2e:	4650      	mov	r0, sl
 8008c30:	f000 fc0e 	bl	8009450 <memchr>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d06f      	beq.n	8008d18 <__sfvwrite_r+0x2e4>
 8008c38:	3001      	adds	r0, #1
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	ebca 0800 	rsb	r8, sl, r0
 8008c40:	9302      	str	r3, [sp, #8]
 8008c42:	e7a5      	b.n	8008b90 <__sfvwrite_r+0x15c>
 8008c44:	6962      	ldr	r2, [r4, #20]
 8008c46:	6820      	ldr	r0, [r4, #0]
 8008c48:	6921      	ldr	r1, [r4, #16]
 8008c4a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 8008c4e:	ebc1 0a00 	rsb	sl, r1, r0
 8008c52:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8008c56:	f10a 0001 	add.w	r0, sl, #1
 8008c5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c5e:	4438      	add	r0, r7
 8008c60:	4540      	cmp	r0, r8
 8008c62:	4642      	mov	r2, r8
 8008c64:	bf84      	itt	hi
 8008c66:	4680      	movhi	r8, r0
 8008c68:	4642      	movhi	r2, r8
 8008c6a:	055b      	lsls	r3, r3, #21
 8008c6c:	d542      	bpl.n	8008cf4 <__sfvwrite_r+0x2c0>
 8008c6e:	4611      	mov	r1, r2
 8008c70:	9801      	ldr	r0, [sp, #4]
 8008c72:	f000 f91b 	bl	8008eac <_malloc_r>
 8008c76:	4683      	mov	fp, r0
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d055      	beq.n	8008d28 <__sfvwrite_r+0x2f4>
 8008c7c:	4652      	mov	r2, sl
 8008c7e:	6921      	ldr	r1, [r4, #16]
 8008c80:	f7fb faac 	bl	80041dc <memcpy>
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c8e:	81a3      	strh	r3, [r4, #12]
 8008c90:	ebca 0308 	rsb	r3, sl, r8
 8008c94:	eb0b 000a 	add.w	r0, fp, sl
 8008c98:	f8c4 8014 	str.w	r8, [r4, #20]
 8008c9c:	f8c4 b010 	str.w	fp, [r4, #16]
 8008ca0:	6020      	str	r0, [r4, #0]
 8008ca2:	60a3      	str	r3, [r4, #8]
 8008ca4:	46b8      	mov	r8, r7
 8008ca6:	46ba      	mov	sl, r7
 8008ca8:	e71c      	b.n	8008ae4 <__sfvwrite_r+0xb0>
 8008caa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008cae:	42bb      	cmp	r3, r7
 8008cb0:	bf28      	it	cs
 8008cb2:	463b      	movcs	r3, r7
 8008cb4:	464a      	mov	r2, r9
 8008cb6:	fb93 f3f1 	sdiv	r3, r3, r1
 8008cba:	9801      	ldr	r0, [sp, #4]
 8008cbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008cbe:	fb01 f303 	mul.w	r3, r1, r3
 8008cc2:	69e1      	ldr	r1, [r4, #28]
 8008cc4:	47b0      	blx	r6
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	f73f af18 	bgt.w	8008afc <__sfvwrite_r+0xc8>
 8008ccc:	e74c      	b.n	8008b68 <__sfvwrite_r+0x134>
 8008cce:	461a      	mov	r2, r3
 8008cd0:	4651      	mov	r1, sl
 8008cd2:	9303      	str	r3, [sp, #12]
 8008cd4:	f000 fc0c 	bl	80094f0 <memmove>
 8008cd8:	6822      	ldr	r2, [r4, #0]
 8008cda:	9b03      	ldr	r3, [sp, #12]
 8008cdc:	9801      	ldr	r0, [sp, #4]
 8008cde:	441a      	add	r2, r3
 8008ce0:	6022      	str	r2, [r4, #0]
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	f7ff fcd2 	bl	800868c <_fflush_r>
 8008ce8:	9b03      	ldr	r3, [sp, #12]
 8008cea:	2800      	cmp	r0, #0
 8008cec:	f47f af3c 	bne.w	8008b68 <__sfvwrite_r+0x134>
 8008cf0:	461f      	mov	r7, r3
 8008cf2:	e766      	b.n	8008bc2 <__sfvwrite_r+0x18e>
 8008cf4:	9801      	ldr	r0, [sp, #4]
 8008cf6:	f000 ff73 	bl	8009be0 <_realloc_r>
 8008cfa:	4683      	mov	fp, r0
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d1c7      	bne.n	8008c90 <__sfvwrite_r+0x25c>
 8008d00:	9d01      	ldr	r5, [sp, #4]
 8008d02:	6921      	ldr	r1, [r4, #16]
 8008d04:	4628      	mov	r0, r5
 8008d06:	f7ff fdad 	bl	8008864 <_free_r>
 8008d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d0e:	220c      	movs	r2, #12
 8008d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d14:	602a      	str	r2, [r5, #0]
 8008d16:	e729      	b.n	8008b6c <__sfvwrite_r+0x138>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	f109 0801 	add.w	r8, r9, #1
 8008d1e:	9302      	str	r3, [sp, #8]
 8008d20:	e736      	b.n	8008b90 <__sfvwrite_r+0x15c>
 8008d22:	f04f 30ff 	mov.w	r0, #4294967295
 8008d26:	e6b8      	b.n	8008a9a <__sfvwrite_r+0x66>
 8008d28:	9a01      	ldr	r2, [sp, #4]
 8008d2a:	230c      	movs	r3, #12
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d32:	e71b      	b.n	8008b6c <__sfvwrite_r+0x138>
 8008d34:	7ffffc00 	.word	0x7ffffc00

08008d38 <_fwalk_reent>:
 8008d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d3c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8008d40:	d01f      	beq.n	8008d82 <_fwalk_reent+0x4a>
 8008d42:	4688      	mov	r8, r1
 8008d44:	4606      	mov	r6, r0
 8008d46:	f04f 0900 	mov.w	r9, #0
 8008d4a:	687d      	ldr	r5, [r7, #4]
 8008d4c:	68bc      	ldr	r4, [r7, #8]
 8008d4e:	3d01      	subs	r5, #1
 8008d50:	d411      	bmi.n	8008d76 <_fwalk_reent+0x3e>
 8008d52:	89a3      	ldrh	r3, [r4, #12]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	f105 35ff 	add.w	r5, r5, #4294967295
 8008d5a:	d908      	bls.n	8008d6e <_fwalk_reent+0x36>
 8008d5c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8008d60:	3301      	adds	r3, #1
 8008d62:	4621      	mov	r1, r4
 8008d64:	4630      	mov	r0, r6
 8008d66:	d002      	beq.n	8008d6e <_fwalk_reent+0x36>
 8008d68:	47c0      	blx	r8
 8008d6a:	ea49 0900 	orr.w	r9, r9, r0
 8008d6e:	1c6b      	adds	r3, r5, #1
 8008d70:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8008d74:	d1ed      	bne.n	8008d52 <_fwalk_reent+0x1a>
 8008d76:	683f      	ldr	r7, [r7, #0]
 8008d78:	2f00      	cmp	r7, #0
 8008d7a:	d1e6      	bne.n	8008d4a <_fwalk_reent+0x12>
 8008d7c:	4648      	mov	r0, r9
 8008d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d82:	46b9      	mov	r9, r7
 8008d84:	4648      	mov	r0, r9
 8008d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d8a:	bf00      	nop

08008d8c <__locale_mb_cur_max>:
 8008d8c:	4b04      	ldr	r3, [pc, #16]	; (8008da0 <__locale_mb_cur_max+0x14>)
 8008d8e:	4a05      	ldr	r2, [pc, #20]	; (8008da4 <__locale_mb_cur_max+0x18>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	bf08      	it	eq
 8008d98:	4613      	moveq	r3, r2
 8008d9a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8008d9e:	4770      	bx	lr
 8008da0:	20000468 	.word	0x20000468
 8008da4:	2000046c 	.word	0x2000046c

08008da8 <_localeconv_r>:
 8008da8:	4a04      	ldr	r2, [pc, #16]	; (8008dbc <_localeconv_r+0x14>)
 8008daa:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <_localeconv_r+0x18>)
 8008dac:	6812      	ldr	r2, [r2, #0]
 8008dae:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8008db0:	2800      	cmp	r0, #0
 8008db2:	bf08      	it	eq
 8008db4:	4618      	moveq	r0, r3
 8008db6:	30f0      	adds	r0, #240	; 0xf0
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	20000468 	.word	0x20000468
 8008dc0:	2000046c 	.word	0x2000046c

08008dc4 <__swhatbuf_r>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	460d      	mov	r5, r1
 8008dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dcc:	2900      	cmp	r1, #0
 8008dce:	b090      	sub	sp, #64	; 0x40
 8008dd0:	4614      	mov	r4, r2
 8008dd2:	461e      	mov	r6, r3
 8008dd4:	db14      	blt.n	8008e00 <__swhatbuf_r+0x3c>
 8008dd6:	aa01      	add	r2, sp, #4
 8008dd8:	f001 fb16 	bl	800a408 <_fstat_r>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	db0f      	blt.n	8008e00 <__swhatbuf_r+0x3c>
 8008de0:	9a02      	ldr	r2, [sp, #8]
 8008de2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008de6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8008dea:	fab2 f282 	clz	r2, r2
 8008dee:	0952      	lsrs	r2, r2, #5
 8008df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008df4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008df8:	6032      	str	r2, [r6, #0]
 8008dfa:	6023      	str	r3, [r4, #0]
 8008dfc:	b010      	add	sp, #64	; 0x40
 8008dfe:	bd70      	pop	{r4, r5, r6, pc}
 8008e00:	89a8      	ldrh	r0, [r5, #12]
 8008e02:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8008e06:	b282      	uxth	r2, r0
 8008e08:	2000      	movs	r0, #0
 8008e0a:	6030      	str	r0, [r6, #0]
 8008e0c:	b11a      	cbz	r2, 8008e16 <__swhatbuf_r+0x52>
 8008e0e:	2340      	movs	r3, #64	; 0x40
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	b010      	add	sp, #64	; 0x40
 8008e14:	bd70      	pop	{r4, r5, r6, pc}
 8008e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	b010      	add	sp, #64	; 0x40
 8008e20:	bd70      	pop	{r4, r5, r6, pc}
 8008e22:	bf00      	nop

08008e24 <__smakebuf_r>:
 8008e24:	898a      	ldrh	r2, [r1, #12]
 8008e26:	0792      	lsls	r2, r2, #30
 8008e28:	460b      	mov	r3, r1
 8008e2a:	d506      	bpl.n	8008e3a <__smakebuf_r+0x16>
 8008e2c:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e30:	2101      	movs	r1, #1
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	611a      	str	r2, [r3, #16]
 8008e36:	6159      	str	r1, [r3, #20]
 8008e38:	4770      	bx	lr
 8008e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e3c:	b083      	sub	sp, #12
 8008e3e:	ab01      	add	r3, sp, #4
 8008e40:	466a      	mov	r2, sp
 8008e42:	460c      	mov	r4, r1
 8008e44:	4605      	mov	r5, r0
 8008e46:	f7ff ffbd 	bl	8008dc4 <__swhatbuf_r>
 8008e4a:	9900      	ldr	r1, [sp, #0]
 8008e4c:	4606      	mov	r6, r0
 8008e4e:	4628      	mov	r0, r5
 8008e50:	f000 f82c 	bl	8008eac <_malloc_r>
 8008e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e58:	b1d0      	cbz	r0, 8008e90 <__smakebuf_r+0x6c>
 8008e5a:	9a01      	ldr	r2, [sp, #4]
 8008e5c:	4f12      	ldr	r7, [pc, #72]	; (8008ea8 <__smakebuf_r+0x84>)
 8008e5e:	9900      	ldr	r1, [sp, #0]
 8008e60:	63ef      	str	r7, [r5, #60]	; 0x3c
 8008e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e66:	81a3      	strh	r3, [r4, #12]
 8008e68:	6020      	str	r0, [r4, #0]
 8008e6a:	6120      	str	r0, [r4, #16]
 8008e6c:	6161      	str	r1, [r4, #20]
 8008e6e:	b91a      	cbnz	r2, 8008e78 <__smakebuf_r+0x54>
 8008e70:	4333      	orrs	r3, r6
 8008e72:	81a3      	strh	r3, [r4, #12]
 8008e74:	b003      	add	sp, #12
 8008e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e7e:	f001 fad7 	bl	800a430 <_isatty_r>
 8008e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d0f2      	beq.n	8008e70 <__smakebuf_r+0x4c>
 8008e8a:	f043 0301 	orr.w	r3, r3, #1
 8008e8e:	e7ef      	b.n	8008e70 <__smakebuf_r+0x4c>
 8008e90:	059a      	lsls	r2, r3, #22
 8008e92:	d4ef      	bmi.n	8008e74 <__smakebuf_r+0x50>
 8008e94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e98:	f043 0302 	orr.w	r3, r3, #2
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	81a3      	strh	r3, [r4, #12]
 8008ea0:	6022      	str	r2, [r4, #0]
 8008ea2:	6122      	str	r2, [r4, #16]
 8008ea4:	6161      	str	r1, [r4, #20]
 8008ea6:	e7e5      	b.n	8008e74 <__smakebuf_r+0x50>
 8008ea8:	080086b9 	.word	0x080086b9

08008eac <_malloc_r>:
 8008eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb0:	f101 050b 	add.w	r5, r1, #11
 8008eb4:	2d16      	cmp	r5, #22
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	4606      	mov	r6, r0
 8008eba:	f240 809f 	bls.w	8008ffc <_malloc_r+0x150>
 8008ebe:	f035 0507 	bics.w	r5, r5, #7
 8008ec2:	f100 80bf 	bmi.w	8009044 <_malloc_r+0x198>
 8008ec6:	42a9      	cmp	r1, r5
 8008ec8:	f200 80bc 	bhi.w	8009044 <_malloc_r+0x198>
 8008ecc:	f000 fb74 	bl	80095b8 <__malloc_lock>
 8008ed0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8008ed4:	f0c0 829c 	bcc.w	8009410 <_malloc_r+0x564>
 8008ed8:	0a6b      	lsrs	r3, r5, #9
 8008eda:	f000 80ba 	beq.w	8009052 <_malloc_r+0x1a6>
 8008ede:	2b04      	cmp	r3, #4
 8008ee0:	f200 8183 	bhi.w	80091ea <_malloc_r+0x33e>
 8008ee4:	09a8      	lsrs	r0, r5, #6
 8008ee6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 8008eea:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8008eee:	3038      	adds	r0, #56	; 0x38
 8008ef0:	4fc4      	ldr	r7, [pc, #784]	; (8009204 <_malloc_r+0x358>)
 8008ef2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008ef6:	f1a3 0108 	sub.w	r1, r3, #8
 8008efa:	685c      	ldr	r4, [r3, #4]
 8008efc:	42a1      	cmp	r1, r4
 8008efe:	d107      	bne.n	8008f10 <_malloc_r+0x64>
 8008f00:	e0ac      	b.n	800905c <_malloc_r+0x1b0>
 8008f02:	2a00      	cmp	r2, #0
 8008f04:	f280 80ac 	bge.w	8009060 <_malloc_r+0x1b4>
 8008f08:	68e4      	ldr	r4, [r4, #12]
 8008f0a:	42a1      	cmp	r1, r4
 8008f0c:	f000 80a6 	beq.w	800905c <_malloc_r+0x1b0>
 8008f10:	6863      	ldr	r3, [r4, #4]
 8008f12:	f023 0303 	bic.w	r3, r3, #3
 8008f16:	1b5a      	subs	r2, r3, r5
 8008f18:	2a0f      	cmp	r2, #15
 8008f1a:	ddf2      	ble.n	8008f02 <_malloc_r+0x56>
 8008f1c:	49b9      	ldr	r1, [pc, #740]	; (8009204 <_malloc_r+0x358>)
 8008f1e:	693c      	ldr	r4, [r7, #16]
 8008f20:	f101 0e08 	add.w	lr, r1, #8
 8008f24:	4574      	cmp	r4, lr
 8008f26:	f000 81b3 	beq.w	8009290 <_malloc_r+0x3e4>
 8008f2a:	6863      	ldr	r3, [r4, #4]
 8008f2c:	f023 0303 	bic.w	r3, r3, #3
 8008f30:	1b5a      	subs	r2, r3, r5
 8008f32:	2a0f      	cmp	r2, #15
 8008f34:	f300 8199 	bgt.w	800926a <_malloc_r+0x3be>
 8008f38:	2a00      	cmp	r2, #0
 8008f3a:	f8c1 e014 	str.w	lr, [r1, #20]
 8008f3e:	f8c1 e010 	str.w	lr, [r1, #16]
 8008f42:	f280 809e 	bge.w	8009082 <_malloc_r+0x1d6>
 8008f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f4a:	f080 8167 	bcs.w	800921c <_malloc_r+0x370>
 8008f4e:	08db      	lsrs	r3, r3, #3
 8008f50:	f103 0c01 	add.w	ip, r3, #1
 8008f54:	2201      	movs	r2, #1
 8008f56:	109b      	asrs	r3, r3, #2
 8008f58:	fa02 f303 	lsl.w	r3, r2, r3
 8008f5c:	684a      	ldr	r2, [r1, #4]
 8008f5e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 8008f62:	f8c4 8008 	str.w	r8, [r4, #8]
 8008f66:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	f1a9 0308 	sub.w	r3, r9, #8
 8008f70:	60e3      	str	r3, [r4, #12]
 8008f72:	604a      	str	r2, [r1, #4]
 8008f74:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8008f78:	f8c8 400c 	str.w	r4, [r8, #12]
 8008f7c:	1083      	asrs	r3, r0, #2
 8008f7e:	2401      	movs	r4, #1
 8008f80:	409c      	lsls	r4, r3
 8008f82:	4294      	cmp	r4, r2
 8008f84:	f200 808a 	bhi.w	800909c <_malloc_r+0x1f0>
 8008f88:	4214      	tst	r4, r2
 8008f8a:	d106      	bne.n	8008f9a <_malloc_r+0xee>
 8008f8c:	f020 0003 	bic.w	r0, r0, #3
 8008f90:	0064      	lsls	r4, r4, #1
 8008f92:	4214      	tst	r4, r2
 8008f94:	f100 0004 	add.w	r0, r0, #4
 8008f98:	d0fa      	beq.n	8008f90 <_malloc_r+0xe4>
 8008f9a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8008f9e:	46cc      	mov	ip, r9
 8008fa0:	4680      	mov	r8, r0
 8008fa2:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8008fa6:	458c      	cmp	ip, r1
 8008fa8:	d107      	bne.n	8008fba <_malloc_r+0x10e>
 8008faa:	e173      	b.n	8009294 <_malloc_r+0x3e8>
 8008fac:	2a00      	cmp	r2, #0
 8008fae:	f280 8181 	bge.w	80092b4 <_malloc_r+0x408>
 8008fb2:	68c9      	ldr	r1, [r1, #12]
 8008fb4:	458c      	cmp	ip, r1
 8008fb6:	f000 816d 	beq.w	8009294 <_malloc_r+0x3e8>
 8008fba:	684b      	ldr	r3, [r1, #4]
 8008fbc:	f023 0303 	bic.w	r3, r3, #3
 8008fc0:	1b5a      	subs	r2, r3, r5
 8008fc2:	2a0f      	cmp	r2, #15
 8008fc4:	ddf2      	ble.n	8008fac <_malloc_r+0x100>
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8008fcc:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8008fd0:	194b      	adds	r3, r1, r5
 8008fd2:	f045 0501 	orr.w	r5, r5, #1
 8008fd6:	604d      	str	r5, [r1, #4]
 8008fd8:	f042 0101 	orr.w	r1, r2, #1
 8008fdc:	f8c8 c00c 	str.w	ip, [r8, #12]
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f8cc 8008 	str.w	r8, [ip, #8]
 8008fe6:	617b      	str	r3, [r7, #20]
 8008fe8:	613b      	str	r3, [r7, #16]
 8008fea:	f8c3 e00c 	str.w	lr, [r3, #12]
 8008fee:	f8c3 e008 	str.w	lr, [r3, #8]
 8008ff2:	6059      	str	r1, [r3, #4]
 8008ff4:	509a      	str	r2, [r3, r2]
 8008ff6:	f000 fae1 	bl	80095bc <__malloc_unlock>
 8008ffa:	e01f      	b.n	800903c <_malloc_r+0x190>
 8008ffc:	2910      	cmp	r1, #16
 8008ffe:	d821      	bhi.n	8009044 <_malloc_r+0x198>
 8009000:	f000 fada 	bl	80095b8 <__malloc_lock>
 8009004:	2510      	movs	r5, #16
 8009006:	2306      	movs	r3, #6
 8009008:	2002      	movs	r0, #2
 800900a:	4f7e      	ldr	r7, [pc, #504]	; (8009204 <_malloc_r+0x358>)
 800900c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009010:	f1a3 0208 	sub.w	r2, r3, #8
 8009014:	685c      	ldr	r4, [r3, #4]
 8009016:	4294      	cmp	r4, r2
 8009018:	f000 8145 	beq.w	80092a6 <_malloc_r+0x3fa>
 800901c:	6863      	ldr	r3, [r4, #4]
 800901e:	68e1      	ldr	r1, [r4, #12]
 8009020:	68a5      	ldr	r5, [r4, #8]
 8009022:	f023 0303 	bic.w	r3, r3, #3
 8009026:	4423      	add	r3, r4
 8009028:	4630      	mov	r0, r6
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	60e9      	str	r1, [r5, #12]
 800902e:	f042 0201 	orr.w	r2, r2, #1
 8009032:	608d      	str	r5, [r1, #8]
 8009034:	605a      	str	r2, [r3, #4]
 8009036:	f000 fac1 	bl	80095bc <__malloc_unlock>
 800903a:	3408      	adds	r4, #8
 800903c:	4620      	mov	r0, r4
 800903e:	b003      	add	sp, #12
 8009040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009044:	2400      	movs	r4, #0
 8009046:	230c      	movs	r3, #12
 8009048:	4620      	mov	r0, r4
 800904a:	6033      	str	r3, [r6, #0]
 800904c:	b003      	add	sp, #12
 800904e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009052:	2380      	movs	r3, #128	; 0x80
 8009054:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8009058:	203f      	movs	r0, #63	; 0x3f
 800905a:	e749      	b.n	8008ef0 <_malloc_r+0x44>
 800905c:	4670      	mov	r0, lr
 800905e:	e75d      	b.n	8008f1c <_malloc_r+0x70>
 8009060:	4423      	add	r3, r4
 8009062:	68e1      	ldr	r1, [r4, #12]
 8009064:	685a      	ldr	r2, [r3, #4]
 8009066:	68a5      	ldr	r5, [r4, #8]
 8009068:	f042 0201 	orr.w	r2, r2, #1
 800906c:	60e9      	str	r1, [r5, #12]
 800906e:	4630      	mov	r0, r6
 8009070:	608d      	str	r5, [r1, #8]
 8009072:	605a      	str	r2, [r3, #4]
 8009074:	f000 faa2 	bl	80095bc <__malloc_unlock>
 8009078:	3408      	adds	r4, #8
 800907a:	4620      	mov	r0, r4
 800907c:	b003      	add	sp, #12
 800907e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009082:	4423      	add	r3, r4
 8009084:	4630      	mov	r0, r6
 8009086:	685a      	ldr	r2, [r3, #4]
 8009088:	f042 0201 	orr.w	r2, r2, #1
 800908c:	605a      	str	r2, [r3, #4]
 800908e:	f000 fa95 	bl	80095bc <__malloc_unlock>
 8009092:	3408      	adds	r4, #8
 8009094:	4620      	mov	r0, r4
 8009096:	b003      	add	sp, #12
 8009098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909c:	68bc      	ldr	r4, [r7, #8]
 800909e:	6863      	ldr	r3, [r4, #4]
 80090a0:	f023 0803 	bic.w	r8, r3, #3
 80090a4:	45a8      	cmp	r8, r5
 80090a6:	d304      	bcc.n	80090b2 <_malloc_r+0x206>
 80090a8:	ebc5 0308 	rsb	r3, r5, r8
 80090ac:	2b0f      	cmp	r3, #15
 80090ae:	f300 808c 	bgt.w	80091ca <_malloc_r+0x31e>
 80090b2:	4b55      	ldr	r3, [pc, #340]	; (8009208 <_malloc_r+0x35c>)
 80090b4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8009218 <_malloc_r+0x36c>
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	f8d9 3000 	ldr.w	r3, [r9]
 80090be:	3301      	adds	r3, #1
 80090c0:	442a      	add	r2, r5
 80090c2:	eb04 0a08 	add.w	sl, r4, r8
 80090c6:	f000 8160 	beq.w	800938a <_malloc_r+0x4de>
 80090ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80090ce:	320f      	adds	r2, #15
 80090d0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80090d4:	f022 020f 	bic.w	r2, r2, #15
 80090d8:	4611      	mov	r1, r2
 80090da:	4630      	mov	r0, r6
 80090dc:	9201      	str	r2, [sp, #4]
 80090de:	f000 ff6f 	bl	8009fc0 <_sbrk_r>
 80090e2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80090e6:	4683      	mov	fp, r0
 80090e8:	9a01      	ldr	r2, [sp, #4]
 80090ea:	f000 8158 	beq.w	800939e <_malloc_r+0x4f2>
 80090ee:	4582      	cmp	sl, r0
 80090f0:	f200 80fc 	bhi.w	80092ec <_malloc_r+0x440>
 80090f4:	4b45      	ldr	r3, [pc, #276]	; (800920c <_malloc_r+0x360>)
 80090f6:	6819      	ldr	r1, [r3, #0]
 80090f8:	45da      	cmp	sl, fp
 80090fa:	4411      	add	r1, r2
 80090fc:	6019      	str	r1, [r3, #0]
 80090fe:	f000 8153 	beq.w	80093a8 <_malloc_r+0x4fc>
 8009102:	f8d9 0000 	ldr.w	r0, [r9]
 8009106:	f8df e110 	ldr.w	lr, [pc, #272]	; 8009218 <_malloc_r+0x36c>
 800910a:	3001      	adds	r0, #1
 800910c:	bf1b      	ittet	ne
 800910e:	ebca 0a0b 	rsbne	sl, sl, fp
 8009112:	4451      	addne	r1, sl
 8009114:	f8ce b000 	streq.w	fp, [lr]
 8009118:	6019      	strne	r1, [r3, #0]
 800911a:	f01b 0107 	ands.w	r1, fp, #7
 800911e:	f000 8117 	beq.w	8009350 <_malloc_r+0x4a4>
 8009122:	f1c1 0008 	rsb	r0, r1, #8
 8009126:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800912a:	4483      	add	fp, r0
 800912c:	3108      	adds	r1, #8
 800912e:	445a      	add	r2, fp
 8009130:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8009134:	ebc2 0901 	rsb	r9, r2, r1
 8009138:	4649      	mov	r1, r9
 800913a:	4630      	mov	r0, r6
 800913c:	9301      	str	r3, [sp, #4]
 800913e:	f000 ff3f 	bl	8009fc0 <_sbrk_r>
 8009142:	1c43      	adds	r3, r0, #1
 8009144:	9b01      	ldr	r3, [sp, #4]
 8009146:	f000 813f 	beq.w	80093c8 <_malloc_r+0x51c>
 800914a:	ebcb 0200 	rsb	r2, fp, r0
 800914e:	444a      	add	r2, r9
 8009150:	f042 0201 	orr.w	r2, r2, #1
 8009154:	6819      	ldr	r1, [r3, #0]
 8009156:	f8c7 b008 	str.w	fp, [r7, #8]
 800915a:	4449      	add	r1, r9
 800915c:	42bc      	cmp	r4, r7
 800915e:	f8cb 2004 	str.w	r2, [fp, #4]
 8009162:	6019      	str	r1, [r3, #0]
 8009164:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800920c <_malloc_r+0x360>
 8009168:	d016      	beq.n	8009198 <_malloc_r+0x2ec>
 800916a:	f1b8 0f0f 	cmp.w	r8, #15
 800916e:	f240 80fd 	bls.w	800936c <_malloc_r+0x4c0>
 8009172:	6862      	ldr	r2, [r4, #4]
 8009174:	f1a8 030c 	sub.w	r3, r8, #12
 8009178:	f023 0307 	bic.w	r3, r3, #7
 800917c:	18e0      	adds	r0, r4, r3
 800917e:	f002 0201 	and.w	r2, r2, #1
 8009182:	f04f 0e05 	mov.w	lr, #5
 8009186:	431a      	orrs	r2, r3
 8009188:	2b0f      	cmp	r3, #15
 800918a:	6062      	str	r2, [r4, #4]
 800918c:	f8c0 e004 	str.w	lr, [r0, #4]
 8009190:	f8c0 e008 	str.w	lr, [r0, #8]
 8009194:	f200 811c 	bhi.w	80093d0 <_malloc_r+0x524>
 8009198:	4b1d      	ldr	r3, [pc, #116]	; (8009210 <_malloc_r+0x364>)
 800919a:	68bc      	ldr	r4, [r7, #8]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	4291      	cmp	r1, r2
 80091a0:	bf88      	it	hi
 80091a2:	6019      	strhi	r1, [r3, #0]
 80091a4:	4b1b      	ldr	r3, [pc, #108]	; (8009214 <_malloc_r+0x368>)
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	4291      	cmp	r1, r2
 80091aa:	6862      	ldr	r2, [r4, #4]
 80091ac:	bf88      	it	hi
 80091ae:	6019      	strhi	r1, [r3, #0]
 80091b0:	f022 0203 	bic.w	r2, r2, #3
 80091b4:	4295      	cmp	r5, r2
 80091b6:	eba2 0305 	sub.w	r3, r2, r5
 80091ba:	d801      	bhi.n	80091c0 <_malloc_r+0x314>
 80091bc:	2b0f      	cmp	r3, #15
 80091be:	dc04      	bgt.n	80091ca <_malloc_r+0x31e>
 80091c0:	4630      	mov	r0, r6
 80091c2:	f000 f9fb 	bl	80095bc <__malloc_unlock>
 80091c6:	2400      	movs	r4, #0
 80091c8:	e738      	b.n	800903c <_malloc_r+0x190>
 80091ca:	1962      	adds	r2, r4, r5
 80091cc:	f043 0301 	orr.w	r3, r3, #1
 80091d0:	f045 0501 	orr.w	r5, r5, #1
 80091d4:	6065      	str	r5, [r4, #4]
 80091d6:	4630      	mov	r0, r6
 80091d8:	60ba      	str	r2, [r7, #8]
 80091da:	6053      	str	r3, [r2, #4]
 80091dc:	f000 f9ee 	bl	80095bc <__malloc_unlock>
 80091e0:	3408      	adds	r4, #8
 80091e2:	4620      	mov	r0, r4
 80091e4:	b003      	add	sp, #12
 80091e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ea:	2b14      	cmp	r3, #20
 80091ec:	d971      	bls.n	80092d2 <_malloc_r+0x426>
 80091ee:	2b54      	cmp	r3, #84	; 0x54
 80091f0:	f200 80a4 	bhi.w	800933c <_malloc_r+0x490>
 80091f4:	0b28      	lsrs	r0, r5, #12
 80091f6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 80091fa:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80091fe:	306e      	adds	r0, #110	; 0x6e
 8009200:	e676      	b.n	8008ef0 <_malloc_r+0x44>
 8009202:	bf00      	nop
 8009204:	200005d8 	.word	0x200005d8
 8009208:	20000a54 	.word	0x20000a54
 800920c:	20000a58 	.word	0x20000a58
 8009210:	20000a50 	.word	0x20000a50
 8009214:	20000a4c 	.word	0x20000a4c
 8009218:	200009e4 	.word	0x200009e4
 800921c:	0a5a      	lsrs	r2, r3, #9
 800921e:	2a04      	cmp	r2, #4
 8009220:	d95e      	bls.n	80092e0 <_malloc_r+0x434>
 8009222:	2a14      	cmp	r2, #20
 8009224:	f200 80b3 	bhi.w	800938e <_malloc_r+0x4e2>
 8009228:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800922c:	0049      	lsls	r1, r1, #1
 800922e:	325b      	adds	r2, #91	; 0x5b
 8009230:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 8009234:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8009238:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8009418 <_malloc_r+0x56c>
 800923c:	f1ac 0c08 	sub.w	ip, ip, #8
 8009240:	458c      	cmp	ip, r1
 8009242:	f000 8088 	beq.w	8009356 <_malloc_r+0x4aa>
 8009246:	684a      	ldr	r2, [r1, #4]
 8009248:	f022 0203 	bic.w	r2, r2, #3
 800924c:	4293      	cmp	r3, r2
 800924e:	d202      	bcs.n	8009256 <_malloc_r+0x3aa>
 8009250:	6889      	ldr	r1, [r1, #8]
 8009252:	458c      	cmp	ip, r1
 8009254:	d1f7      	bne.n	8009246 <_malloc_r+0x39a>
 8009256:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8009260:	60a1      	str	r1, [r4, #8]
 8009262:	f8cc 4008 	str.w	r4, [ip, #8]
 8009266:	60cc      	str	r4, [r1, #12]
 8009268:	e688      	b.n	8008f7c <_malloc_r+0xd0>
 800926a:	1963      	adds	r3, r4, r5
 800926c:	f042 0701 	orr.w	r7, r2, #1
 8009270:	f045 0501 	orr.w	r5, r5, #1
 8009274:	6065      	str	r5, [r4, #4]
 8009276:	4630      	mov	r0, r6
 8009278:	614b      	str	r3, [r1, #20]
 800927a:	610b      	str	r3, [r1, #16]
 800927c:	f8c3 e00c 	str.w	lr, [r3, #12]
 8009280:	f8c3 e008 	str.w	lr, [r3, #8]
 8009284:	605f      	str	r7, [r3, #4]
 8009286:	509a      	str	r2, [r3, r2]
 8009288:	3408      	adds	r4, #8
 800928a:	f000 f997 	bl	80095bc <__malloc_unlock>
 800928e:	e6d5      	b.n	800903c <_malloc_r+0x190>
 8009290:	684a      	ldr	r2, [r1, #4]
 8009292:	e673      	b.n	8008f7c <_malloc_r+0xd0>
 8009294:	f108 0801 	add.w	r8, r8, #1
 8009298:	f018 0f03 	tst.w	r8, #3
 800929c:	f10c 0c08 	add.w	ip, ip, #8
 80092a0:	f47f ae7f 	bne.w	8008fa2 <_malloc_r+0xf6>
 80092a4:	e030      	b.n	8009308 <_malloc_r+0x45c>
 80092a6:	68dc      	ldr	r4, [r3, #12]
 80092a8:	42a3      	cmp	r3, r4
 80092aa:	bf08      	it	eq
 80092ac:	3002      	addeq	r0, #2
 80092ae:	f43f ae35 	beq.w	8008f1c <_malloc_r+0x70>
 80092b2:	e6b3      	b.n	800901c <_malloc_r+0x170>
 80092b4:	440b      	add	r3, r1
 80092b6:	460c      	mov	r4, r1
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	68c9      	ldr	r1, [r1, #12]
 80092bc:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80092c0:	f042 0201 	orr.w	r2, r2, #1
 80092c4:	605a      	str	r2, [r3, #4]
 80092c6:	4630      	mov	r0, r6
 80092c8:	60e9      	str	r1, [r5, #12]
 80092ca:	608d      	str	r5, [r1, #8]
 80092cc:	f000 f976 	bl	80095bc <__malloc_unlock>
 80092d0:	e6b4      	b.n	800903c <_malloc_r+0x190>
 80092d2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 80092d6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 80092da:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80092de:	e607      	b.n	8008ef0 <_malloc_r+0x44>
 80092e0:	099a      	lsrs	r2, r3, #6
 80092e2:	f102 0139 	add.w	r1, r2, #57	; 0x39
 80092e6:	0049      	lsls	r1, r1, #1
 80092e8:	3238      	adds	r2, #56	; 0x38
 80092ea:	e7a1      	b.n	8009230 <_malloc_r+0x384>
 80092ec:	42bc      	cmp	r4, r7
 80092ee:	4b4a      	ldr	r3, [pc, #296]	; (8009418 <_malloc_r+0x56c>)
 80092f0:	f43f af00 	beq.w	80090f4 <_malloc_r+0x248>
 80092f4:	689c      	ldr	r4, [r3, #8]
 80092f6:	6862      	ldr	r2, [r4, #4]
 80092f8:	f022 0203 	bic.w	r2, r2, #3
 80092fc:	e75a      	b.n	80091b4 <_malloc_r+0x308>
 80092fe:	f859 3908 	ldr.w	r3, [r9], #-8
 8009302:	4599      	cmp	r9, r3
 8009304:	f040 8082 	bne.w	800940c <_malloc_r+0x560>
 8009308:	f010 0f03 	tst.w	r0, #3
 800930c:	f100 30ff 	add.w	r0, r0, #4294967295
 8009310:	d1f5      	bne.n	80092fe <_malloc_r+0x452>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	ea23 0304 	bic.w	r3, r3, r4
 8009318:	607b      	str	r3, [r7, #4]
 800931a:	0064      	lsls	r4, r4, #1
 800931c:	429c      	cmp	r4, r3
 800931e:	f63f aebd 	bhi.w	800909c <_malloc_r+0x1f0>
 8009322:	2c00      	cmp	r4, #0
 8009324:	f43f aeba 	beq.w	800909c <_malloc_r+0x1f0>
 8009328:	421c      	tst	r4, r3
 800932a:	4640      	mov	r0, r8
 800932c:	f47f ae35 	bne.w	8008f9a <_malloc_r+0xee>
 8009330:	0064      	lsls	r4, r4, #1
 8009332:	421c      	tst	r4, r3
 8009334:	f100 0004 	add.w	r0, r0, #4
 8009338:	d0fa      	beq.n	8009330 <_malloc_r+0x484>
 800933a:	e62e      	b.n	8008f9a <_malloc_r+0xee>
 800933c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009340:	d818      	bhi.n	8009374 <_malloc_r+0x4c8>
 8009342:	0be8      	lsrs	r0, r5, #15
 8009344:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 8009348:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800934c:	3077      	adds	r0, #119	; 0x77
 800934e:	e5cf      	b.n	8008ef0 <_malloc_r+0x44>
 8009350:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009354:	e6eb      	b.n	800912e <_malloc_r+0x282>
 8009356:	2101      	movs	r1, #1
 8009358:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800935c:	1092      	asrs	r2, r2, #2
 800935e:	fa01 f202 	lsl.w	r2, r1, r2
 8009362:	431a      	orrs	r2, r3
 8009364:	f8c8 2004 	str.w	r2, [r8, #4]
 8009368:	4661      	mov	r1, ip
 800936a:	e777      	b.n	800925c <_malloc_r+0x3b0>
 800936c:	2301      	movs	r3, #1
 800936e:	f8cb 3004 	str.w	r3, [fp, #4]
 8009372:	e725      	b.n	80091c0 <_malloc_r+0x314>
 8009374:	f240 5254 	movw	r2, #1364	; 0x554
 8009378:	4293      	cmp	r3, r2
 800937a:	d820      	bhi.n	80093be <_malloc_r+0x512>
 800937c:	0ca8      	lsrs	r0, r5, #18
 800937e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 8009382:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8009386:	307c      	adds	r0, #124	; 0x7c
 8009388:	e5b2      	b.n	8008ef0 <_malloc_r+0x44>
 800938a:	3210      	adds	r2, #16
 800938c:	e6a4      	b.n	80090d8 <_malloc_r+0x22c>
 800938e:	2a54      	cmp	r2, #84	; 0x54
 8009390:	d826      	bhi.n	80093e0 <_malloc_r+0x534>
 8009392:	0b1a      	lsrs	r2, r3, #12
 8009394:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8009398:	0049      	lsls	r1, r1, #1
 800939a:	326e      	adds	r2, #110	; 0x6e
 800939c:	e748      	b.n	8009230 <_malloc_r+0x384>
 800939e:	68bc      	ldr	r4, [r7, #8]
 80093a0:	6862      	ldr	r2, [r4, #4]
 80093a2:	f022 0203 	bic.w	r2, r2, #3
 80093a6:	e705      	b.n	80091b4 <_malloc_r+0x308>
 80093a8:	f3ca 000b 	ubfx	r0, sl, #0, #12
 80093ac:	2800      	cmp	r0, #0
 80093ae:	f47f aea8 	bne.w	8009102 <_malloc_r+0x256>
 80093b2:	4442      	add	r2, r8
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	f042 0201 	orr.w	r2, r2, #1
 80093ba:	605a      	str	r2, [r3, #4]
 80093bc:	e6ec      	b.n	8009198 <_malloc_r+0x2ec>
 80093be:	23fe      	movs	r3, #254	; 0xfe
 80093c0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 80093c4:	207e      	movs	r0, #126	; 0x7e
 80093c6:	e593      	b.n	8008ef0 <_malloc_r+0x44>
 80093c8:	2201      	movs	r2, #1
 80093ca:	f04f 0900 	mov.w	r9, #0
 80093ce:	e6c1      	b.n	8009154 <_malloc_r+0x2a8>
 80093d0:	f104 0108 	add.w	r1, r4, #8
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7ff fa45 	bl	8008864 <_free_r>
 80093da:	f8d9 1000 	ldr.w	r1, [r9]
 80093de:	e6db      	b.n	8009198 <_malloc_r+0x2ec>
 80093e0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80093e4:	d805      	bhi.n	80093f2 <_malloc_r+0x546>
 80093e6:	0bda      	lsrs	r2, r3, #15
 80093e8:	f102 0178 	add.w	r1, r2, #120	; 0x78
 80093ec:	0049      	lsls	r1, r1, #1
 80093ee:	3277      	adds	r2, #119	; 0x77
 80093f0:	e71e      	b.n	8009230 <_malloc_r+0x384>
 80093f2:	f240 5154 	movw	r1, #1364	; 0x554
 80093f6:	428a      	cmp	r2, r1
 80093f8:	d805      	bhi.n	8009406 <_malloc_r+0x55a>
 80093fa:	0c9a      	lsrs	r2, r3, #18
 80093fc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8009400:	0049      	lsls	r1, r1, #1
 8009402:	327c      	adds	r2, #124	; 0x7c
 8009404:	e714      	b.n	8009230 <_malloc_r+0x384>
 8009406:	21fe      	movs	r1, #254	; 0xfe
 8009408:	227e      	movs	r2, #126	; 0x7e
 800940a:	e711      	b.n	8009230 <_malloc_r+0x384>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	e784      	b.n	800931a <_malloc_r+0x46e>
 8009410:	08e8      	lsrs	r0, r5, #3
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	005b      	lsls	r3, r3, #1
 8009416:	e5f8      	b.n	800900a <_malloc_r+0x15e>
 8009418:	200005d8 	.word	0x200005d8

0800941c <__ascii_mbtowc>:
 800941c:	b082      	sub	sp, #8
 800941e:	b149      	cbz	r1, 8009434 <__ascii_mbtowc+0x18>
 8009420:	b15a      	cbz	r2, 800943a <__ascii_mbtowc+0x1e>
 8009422:	b16b      	cbz	r3, 8009440 <__ascii_mbtowc+0x24>
 8009424:	7813      	ldrb	r3, [r2, #0]
 8009426:	600b      	str	r3, [r1, #0]
 8009428:	7812      	ldrb	r2, [r2, #0]
 800942a:	1c10      	adds	r0, r2, #0
 800942c:	bf18      	it	ne
 800942e:	2001      	movne	r0, #1
 8009430:	b002      	add	sp, #8
 8009432:	4770      	bx	lr
 8009434:	a901      	add	r1, sp, #4
 8009436:	2a00      	cmp	r2, #0
 8009438:	d1f3      	bne.n	8009422 <__ascii_mbtowc+0x6>
 800943a:	4610      	mov	r0, r2
 800943c:	b002      	add	sp, #8
 800943e:	4770      	bx	lr
 8009440:	f06f 0001 	mvn.w	r0, #1
 8009444:	e7f4      	b.n	8009430 <__ascii_mbtowc+0x14>
 8009446:	bf00      	nop
	...

08009450 <memchr>:
 8009450:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8009454:	2a10      	cmp	r2, #16
 8009456:	db2b      	blt.n	80094b0 <memchr+0x60>
 8009458:	f010 0f07 	tst.w	r0, #7
 800945c:	d008      	beq.n	8009470 <memchr+0x20>
 800945e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009462:	3a01      	subs	r2, #1
 8009464:	428b      	cmp	r3, r1
 8009466:	d02d      	beq.n	80094c4 <memchr+0x74>
 8009468:	f010 0f07 	tst.w	r0, #7
 800946c:	b342      	cbz	r2, 80094c0 <memchr+0x70>
 800946e:	d1f6      	bne.n	800945e <memchr+0xe>
 8009470:	b4f0      	push	{r4, r5, r6, r7}
 8009472:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8009476:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800947a:	f022 0407 	bic.w	r4, r2, #7
 800947e:	f07f 0700 	mvns.w	r7, #0
 8009482:	2300      	movs	r3, #0
 8009484:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8009488:	3c08      	subs	r4, #8
 800948a:	ea85 0501 	eor.w	r5, r5, r1
 800948e:	ea86 0601 	eor.w	r6, r6, r1
 8009492:	fa85 f547 	uadd8	r5, r5, r7
 8009496:	faa3 f587 	sel	r5, r3, r7
 800949a:	fa86 f647 	uadd8	r6, r6, r7
 800949e:	faa5 f687 	sel	r6, r5, r7
 80094a2:	b98e      	cbnz	r6, 80094c8 <memchr+0x78>
 80094a4:	d1ee      	bne.n	8009484 <memchr+0x34>
 80094a6:	bcf0      	pop	{r4, r5, r6, r7}
 80094a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80094ac:	f002 0207 	and.w	r2, r2, #7
 80094b0:	b132      	cbz	r2, 80094c0 <memchr+0x70>
 80094b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80094b6:	3a01      	subs	r2, #1
 80094b8:	ea83 0301 	eor.w	r3, r3, r1
 80094bc:	b113      	cbz	r3, 80094c4 <memchr+0x74>
 80094be:	d1f8      	bne.n	80094b2 <memchr+0x62>
 80094c0:	2000      	movs	r0, #0
 80094c2:	4770      	bx	lr
 80094c4:	3801      	subs	r0, #1
 80094c6:	4770      	bx	lr
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	bf06      	itte	eq
 80094cc:	4635      	moveq	r5, r6
 80094ce:	3803      	subeq	r0, #3
 80094d0:	3807      	subne	r0, #7
 80094d2:	f015 0f01 	tst.w	r5, #1
 80094d6:	d107      	bne.n	80094e8 <memchr+0x98>
 80094d8:	3001      	adds	r0, #1
 80094da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80094de:	bf02      	ittt	eq
 80094e0:	3001      	addeq	r0, #1
 80094e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80094e6:	3001      	addeq	r0, #1
 80094e8:	bcf0      	pop	{r4, r5, r6, r7}
 80094ea:	3801      	subs	r0, #1
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop

080094f0 <memmove>:
 80094f0:	4288      	cmp	r0, r1
 80094f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094f4:	d90d      	bls.n	8009512 <memmove+0x22>
 80094f6:	188b      	adds	r3, r1, r2
 80094f8:	4298      	cmp	r0, r3
 80094fa:	d20a      	bcs.n	8009512 <memmove+0x22>
 80094fc:	1881      	adds	r1, r0, r2
 80094fe:	2a00      	cmp	r2, #0
 8009500:	d051      	beq.n	80095a6 <memmove+0xb6>
 8009502:	1a9a      	subs	r2, r3, r2
 8009504:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009508:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800950c:	4293      	cmp	r3, r2
 800950e:	d1f9      	bne.n	8009504 <memmove+0x14>
 8009510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009512:	2a0f      	cmp	r2, #15
 8009514:	d948      	bls.n	80095a8 <memmove+0xb8>
 8009516:	ea41 0300 	orr.w	r3, r1, r0
 800951a:	079b      	lsls	r3, r3, #30
 800951c:	d146      	bne.n	80095ac <memmove+0xbc>
 800951e:	f100 0410 	add.w	r4, r0, #16
 8009522:	f101 0310 	add.w	r3, r1, #16
 8009526:	4615      	mov	r5, r2
 8009528:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800952c:	f844 6c10 	str.w	r6, [r4, #-16]
 8009530:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8009534:	f844 6c0c 	str.w	r6, [r4, #-12]
 8009538:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800953c:	f844 6c08 	str.w	r6, [r4, #-8]
 8009540:	3d10      	subs	r5, #16
 8009542:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8009546:	f844 6c04 	str.w	r6, [r4, #-4]
 800954a:	2d0f      	cmp	r5, #15
 800954c:	f103 0310 	add.w	r3, r3, #16
 8009550:	f104 0410 	add.w	r4, r4, #16
 8009554:	d8e8      	bhi.n	8009528 <memmove+0x38>
 8009556:	f1a2 0310 	sub.w	r3, r2, #16
 800955a:	f023 030f 	bic.w	r3, r3, #15
 800955e:	f002 0e0f 	and.w	lr, r2, #15
 8009562:	3310      	adds	r3, #16
 8009564:	f1be 0f03 	cmp.w	lr, #3
 8009568:	4419      	add	r1, r3
 800956a:	4403      	add	r3, r0
 800956c:	d921      	bls.n	80095b2 <memmove+0xc2>
 800956e:	1f1e      	subs	r6, r3, #4
 8009570:	460d      	mov	r5, r1
 8009572:	4674      	mov	r4, lr
 8009574:	3c04      	subs	r4, #4
 8009576:	f855 7b04 	ldr.w	r7, [r5], #4
 800957a:	f846 7f04 	str.w	r7, [r6, #4]!
 800957e:	2c03      	cmp	r4, #3
 8009580:	d8f8      	bhi.n	8009574 <memmove+0x84>
 8009582:	f1ae 0404 	sub.w	r4, lr, #4
 8009586:	f024 0403 	bic.w	r4, r4, #3
 800958a:	3404      	adds	r4, #4
 800958c:	4423      	add	r3, r4
 800958e:	4421      	add	r1, r4
 8009590:	f002 0203 	and.w	r2, r2, #3
 8009594:	b162      	cbz	r2, 80095b0 <memmove+0xc0>
 8009596:	3b01      	subs	r3, #1
 8009598:	440a      	add	r2, r1
 800959a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800959e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095a2:	428a      	cmp	r2, r1
 80095a4:	d1f9      	bne.n	800959a <memmove+0xaa>
 80095a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095a8:	4603      	mov	r3, r0
 80095aa:	e7f3      	b.n	8009594 <memmove+0xa4>
 80095ac:	4603      	mov	r3, r0
 80095ae:	e7f2      	b.n	8009596 <memmove+0xa6>
 80095b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b2:	4672      	mov	r2, lr
 80095b4:	e7ee      	b.n	8009594 <memmove+0xa4>
 80095b6:	bf00      	nop

080095b8 <__malloc_lock>:
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop

080095bc <__malloc_unlock>:
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop

080095c0 <_Balloc>:
 80095c0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80095c2:	b570      	push	{r4, r5, r6, lr}
 80095c4:	4605      	mov	r5, r0
 80095c6:	460c      	mov	r4, r1
 80095c8:	b14b      	cbz	r3, 80095de <_Balloc+0x1e>
 80095ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80095ce:	b180      	cbz	r0, 80095f2 <_Balloc+0x32>
 80095d0:	6802      	ldr	r2, [r0, #0]
 80095d2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80095d6:	2300      	movs	r3, #0
 80095d8:	6103      	str	r3, [r0, #16]
 80095da:	60c3      	str	r3, [r0, #12]
 80095dc:	bd70      	pop	{r4, r5, r6, pc}
 80095de:	2221      	movs	r2, #33	; 0x21
 80095e0:	2104      	movs	r1, #4
 80095e2:	f000 fe2d 	bl	800a240 <_calloc_r>
 80095e6:	64e8      	str	r0, [r5, #76]	; 0x4c
 80095e8:	4603      	mov	r3, r0
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d1ed      	bne.n	80095ca <_Balloc+0xa>
 80095ee:	2000      	movs	r0, #0
 80095f0:	bd70      	pop	{r4, r5, r6, pc}
 80095f2:	2101      	movs	r1, #1
 80095f4:	fa01 f604 	lsl.w	r6, r1, r4
 80095f8:	1d72      	adds	r2, r6, #5
 80095fa:	4628      	mov	r0, r5
 80095fc:	0092      	lsls	r2, r2, #2
 80095fe:	f000 fe1f 	bl	800a240 <_calloc_r>
 8009602:	2800      	cmp	r0, #0
 8009604:	d0f3      	beq.n	80095ee <_Balloc+0x2e>
 8009606:	6044      	str	r4, [r0, #4]
 8009608:	6086      	str	r6, [r0, #8]
 800960a:	e7e4      	b.n	80095d6 <_Balloc+0x16>

0800960c <_Bfree>:
 800960c:	b131      	cbz	r1, 800961c <_Bfree+0x10>
 800960e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009610:	684a      	ldr	r2, [r1, #4]
 8009612:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009616:	6008      	str	r0, [r1, #0]
 8009618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop

08009620 <__multadd>:
 8009620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009622:	690c      	ldr	r4, [r1, #16]
 8009624:	b083      	sub	sp, #12
 8009626:	460d      	mov	r5, r1
 8009628:	4606      	mov	r6, r0
 800962a:	f101 0e14 	add.w	lr, r1, #20
 800962e:	2700      	movs	r7, #0
 8009630:	f8de 0000 	ldr.w	r0, [lr]
 8009634:	b281      	uxth	r1, r0
 8009636:	fb02 3101 	mla	r1, r2, r1, r3
 800963a:	0c0b      	lsrs	r3, r1, #16
 800963c:	0c00      	lsrs	r0, r0, #16
 800963e:	fb02 3300 	mla	r3, r2, r0, r3
 8009642:	b289      	uxth	r1, r1
 8009644:	3701      	adds	r7, #1
 8009646:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800964a:	42bc      	cmp	r4, r7
 800964c:	f84e 1b04 	str.w	r1, [lr], #4
 8009650:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009654:	dcec      	bgt.n	8009630 <__multadd+0x10>
 8009656:	b13b      	cbz	r3, 8009668 <__multadd+0x48>
 8009658:	68aa      	ldr	r2, [r5, #8]
 800965a:	4294      	cmp	r4, r2
 800965c:	da07      	bge.n	800966e <__multadd+0x4e>
 800965e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8009662:	3401      	adds	r4, #1
 8009664:	6153      	str	r3, [r2, #20]
 8009666:	612c      	str	r4, [r5, #16]
 8009668:	4628      	mov	r0, r5
 800966a:	b003      	add	sp, #12
 800966c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800966e:	6869      	ldr	r1, [r5, #4]
 8009670:	9301      	str	r3, [sp, #4]
 8009672:	3101      	adds	r1, #1
 8009674:	4630      	mov	r0, r6
 8009676:	f7ff ffa3 	bl	80095c0 <_Balloc>
 800967a:	692a      	ldr	r2, [r5, #16]
 800967c:	3202      	adds	r2, #2
 800967e:	f105 010c 	add.w	r1, r5, #12
 8009682:	4607      	mov	r7, r0
 8009684:	0092      	lsls	r2, r2, #2
 8009686:	300c      	adds	r0, #12
 8009688:	f7fa fda8 	bl	80041dc <memcpy>
 800968c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800968e:	6869      	ldr	r1, [r5, #4]
 8009690:	9b01      	ldr	r3, [sp, #4]
 8009692:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8009696:	6028      	str	r0, [r5, #0]
 8009698:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800969c:	463d      	mov	r5, r7
 800969e:	e7de      	b.n	800965e <__multadd+0x3e>

080096a0 <__hi0bits>:
 80096a0:	0c03      	lsrs	r3, r0, #16
 80096a2:	041b      	lsls	r3, r3, #16
 80096a4:	b9b3      	cbnz	r3, 80096d4 <__hi0bits+0x34>
 80096a6:	0400      	lsls	r0, r0, #16
 80096a8:	2310      	movs	r3, #16
 80096aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80096ae:	bf04      	itt	eq
 80096b0:	0200      	lsleq	r0, r0, #8
 80096b2:	3308      	addeq	r3, #8
 80096b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80096b8:	bf04      	itt	eq
 80096ba:	0100      	lsleq	r0, r0, #4
 80096bc:	3304      	addeq	r3, #4
 80096be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80096c2:	bf04      	itt	eq
 80096c4:	0080      	lsleq	r0, r0, #2
 80096c6:	3302      	addeq	r3, #2
 80096c8:	2800      	cmp	r0, #0
 80096ca:	db07      	blt.n	80096dc <__hi0bits+0x3c>
 80096cc:	0042      	lsls	r2, r0, #1
 80096ce:	d403      	bmi.n	80096d8 <__hi0bits+0x38>
 80096d0:	2020      	movs	r0, #32
 80096d2:	4770      	bx	lr
 80096d4:	2300      	movs	r3, #0
 80096d6:	e7e8      	b.n	80096aa <__hi0bits+0xa>
 80096d8:	1c58      	adds	r0, r3, #1
 80096da:	4770      	bx	lr
 80096dc:	4618      	mov	r0, r3
 80096de:	4770      	bx	lr

080096e0 <__lo0bits>:
 80096e0:	6803      	ldr	r3, [r0, #0]
 80096e2:	f013 0207 	ands.w	r2, r3, #7
 80096e6:	d007      	beq.n	80096f8 <__lo0bits+0x18>
 80096e8:	07d9      	lsls	r1, r3, #31
 80096ea:	d420      	bmi.n	800972e <__lo0bits+0x4e>
 80096ec:	079a      	lsls	r2, r3, #30
 80096ee:	d420      	bmi.n	8009732 <__lo0bits+0x52>
 80096f0:	089b      	lsrs	r3, r3, #2
 80096f2:	6003      	str	r3, [r0, #0]
 80096f4:	2002      	movs	r0, #2
 80096f6:	4770      	bx	lr
 80096f8:	b299      	uxth	r1, r3
 80096fa:	b909      	cbnz	r1, 8009700 <__lo0bits+0x20>
 80096fc:	0c1b      	lsrs	r3, r3, #16
 80096fe:	2210      	movs	r2, #16
 8009700:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009704:	bf04      	itt	eq
 8009706:	0a1b      	lsreq	r3, r3, #8
 8009708:	3208      	addeq	r2, #8
 800970a:	0719      	lsls	r1, r3, #28
 800970c:	bf04      	itt	eq
 800970e:	091b      	lsreq	r3, r3, #4
 8009710:	3204      	addeq	r2, #4
 8009712:	0799      	lsls	r1, r3, #30
 8009714:	bf04      	itt	eq
 8009716:	089b      	lsreq	r3, r3, #2
 8009718:	3202      	addeq	r2, #2
 800971a:	07d9      	lsls	r1, r3, #31
 800971c:	d404      	bmi.n	8009728 <__lo0bits+0x48>
 800971e:	085b      	lsrs	r3, r3, #1
 8009720:	d101      	bne.n	8009726 <__lo0bits+0x46>
 8009722:	2020      	movs	r0, #32
 8009724:	4770      	bx	lr
 8009726:	3201      	adds	r2, #1
 8009728:	6003      	str	r3, [r0, #0]
 800972a:	4610      	mov	r0, r2
 800972c:	4770      	bx	lr
 800972e:	2000      	movs	r0, #0
 8009730:	4770      	bx	lr
 8009732:	085b      	lsrs	r3, r3, #1
 8009734:	6003      	str	r3, [r0, #0]
 8009736:	2001      	movs	r0, #1
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop

0800973c <__i2b>:
 800973c:	b510      	push	{r4, lr}
 800973e:	460c      	mov	r4, r1
 8009740:	2101      	movs	r1, #1
 8009742:	f7ff ff3d 	bl	80095c0 <_Balloc>
 8009746:	2201      	movs	r2, #1
 8009748:	6144      	str	r4, [r0, #20]
 800974a:	6102      	str	r2, [r0, #16]
 800974c:	bd10      	pop	{r4, pc}
 800974e:	bf00      	nop

08009750 <__multiply>:
 8009750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	690d      	ldr	r5, [r1, #16]
 8009756:	6917      	ldr	r7, [r2, #16]
 8009758:	42bd      	cmp	r5, r7
 800975a:	b083      	sub	sp, #12
 800975c:	460c      	mov	r4, r1
 800975e:	4616      	mov	r6, r2
 8009760:	da04      	bge.n	800976c <__multiply+0x1c>
 8009762:	462a      	mov	r2, r5
 8009764:	4634      	mov	r4, r6
 8009766:	463d      	mov	r5, r7
 8009768:	460e      	mov	r6, r1
 800976a:	4617      	mov	r7, r2
 800976c:	68a3      	ldr	r3, [r4, #8]
 800976e:	6861      	ldr	r1, [r4, #4]
 8009770:	eb05 0807 	add.w	r8, r5, r7
 8009774:	4598      	cmp	r8, r3
 8009776:	bfc8      	it	gt
 8009778:	3101      	addgt	r1, #1
 800977a:	f7ff ff21 	bl	80095c0 <_Balloc>
 800977e:	f100 0c14 	add.w	ip, r0, #20
 8009782:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8009786:	45cc      	cmp	ip, r9
 8009788:	9000      	str	r0, [sp, #0]
 800978a:	d205      	bcs.n	8009798 <__multiply+0x48>
 800978c:	4663      	mov	r3, ip
 800978e:	2100      	movs	r1, #0
 8009790:	f843 1b04 	str.w	r1, [r3], #4
 8009794:	4599      	cmp	r9, r3
 8009796:	d8fb      	bhi.n	8009790 <__multiply+0x40>
 8009798:	f106 0214 	add.w	r2, r6, #20
 800979c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80097a0:	f104 0314 	add.w	r3, r4, #20
 80097a4:	4552      	cmp	r2, sl
 80097a6:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 80097aa:	d254      	bcs.n	8009856 <__multiply+0x106>
 80097ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80097b0:	4699      	mov	r9, r3
 80097b2:	f852 3b04 	ldr.w	r3, [r2], #4
 80097b6:	fa1f fb83 	uxth.w	fp, r3
 80097ba:	f1bb 0f00 	cmp.w	fp, #0
 80097be:	d020      	beq.n	8009802 <__multiply+0xb2>
 80097c0:	2000      	movs	r0, #0
 80097c2:	464f      	mov	r7, r9
 80097c4:	4666      	mov	r6, ip
 80097c6:	4605      	mov	r5, r0
 80097c8:	e000      	b.n	80097cc <__multiply+0x7c>
 80097ca:	461e      	mov	r6, r3
 80097cc:	f857 4b04 	ldr.w	r4, [r7], #4
 80097d0:	6830      	ldr	r0, [r6, #0]
 80097d2:	b2a1      	uxth	r1, r4
 80097d4:	b283      	uxth	r3, r0
 80097d6:	fb0b 3101 	mla	r1, fp, r1, r3
 80097da:	0c24      	lsrs	r4, r4, #16
 80097dc:	0c00      	lsrs	r0, r0, #16
 80097de:	194b      	adds	r3, r1, r5
 80097e0:	fb0b 0004 	mla	r0, fp, r4, r0
 80097e4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 80097e8:	b299      	uxth	r1, r3
 80097ea:	4633      	mov	r3, r6
 80097ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80097f0:	45be      	cmp	lr, r7
 80097f2:	ea4f 4510 	mov.w	r5, r0, lsr #16
 80097f6:	f843 1b04 	str.w	r1, [r3], #4
 80097fa:	d8e6      	bhi.n	80097ca <__multiply+0x7a>
 80097fc:	6075      	str	r5, [r6, #4]
 80097fe:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8009802:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8009806:	d020      	beq.n	800984a <__multiply+0xfa>
 8009808:	f8dc 3000 	ldr.w	r3, [ip]
 800980c:	4667      	mov	r7, ip
 800980e:	4618      	mov	r0, r3
 8009810:	464d      	mov	r5, r9
 8009812:	2100      	movs	r1, #0
 8009814:	e000      	b.n	8009818 <__multiply+0xc8>
 8009816:	4637      	mov	r7, r6
 8009818:	882c      	ldrh	r4, [r5, #0]
 800981a:	0c00      	lsrs	r0, r0, #16
 800981c:	fb0b 0004 	mla	r0, fp, r4, r0
 8009820:	4401      	add	r1, r0
 8009822:	b29c      	uxth	r4, r3
 8009824:	463e      	mov	r6, r7
 8009826:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800982a:	f846 3b04 	str.w	r3, [r6], #4
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f855 4b04 	ldr.w	r4, [r5], #4
 8009834:	b283      	uxth	r3, r0
 8009836:	0c24      	lsrs	r4, r4, #16
 8009838:	fb0b 3404 	mla	r4, fp, r4, r3
 800983c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8009840:	45ae      	cmp	lr, r5
 8009842:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8009846:	d8e6      	bhi.n	8009816 <__multiply+0xc6>
 8009848:	607b      	str	r3, [r7, #4]
 800984a:	4592      	cmp	sl, r2
 800984c:	f10c 0c04 	add.w	ip, ip, #4
 8009850:	d8af      	bhi.n	80097b2 <__multiply+0x62>
 8009852:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009856:	f1b8 0f00 	cmp.w	r8, #0
 800985a:	dd0b      	ble.n	8009874 <__multiply+0x124>
 800985c:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8009860:	f1a9 0904 	sub.w	r9, r9, #4
 8009864:	b11b      	cbz	r3, 800986e <__multiply+0x11e>
 8009866:	e005      	b.n	8009874 <__multiply+0x124>
 8009868:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 800986c:	b913      	cbnz	r3, 8009874 <__multiply+0x124>
 800986e:	f1b8 0801 	subs.w	r8, r8, #1
 8009872:	d1f9      	bne.n	8009868 <__multiply+0x118>
 8009874:	9800      	ldr	r0, [sp, #0]
 8009876:	f8c0 8010 	str.w	r8, [r0, #16]
 800987a:	b003      	add	sp, #12
 800987c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009880 <__pow5mult>:
 8009880:	f012 0303 	ands.w	r3, r2, #3
 8009884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009888:	4614      	mov	r4, r2
 800988a:	4607      	mov	r7, r0
 800988c:	d12e      	bne.n	80098ec <__pow5mult+0x6c>
 800988e:	460e      	mov	r6, r1
 8009890:	10a4      	asrs	r4, r4, #2
 8009892:	d01c      	beq.n	80098ce <__pow5mult+0x4e>
 8009894:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8009896:	b395      	cbz	r5, 80098fe <__pow5mult+0x7e>
 8009898:	07e3      	lsls	r3, r4, #31
 800989a:	f04f 0800 	mov.w	r8, #0
 800989e:	d406      	bmi.n	80098ae <__pow5mult+0x2e>
 80098a0:	1064      	asrs	r4, r4, #1
 80098a2:	d014      	beq.n	80098ce <__pow5mult+0x4e>
 80098a4:	6828      	ldr	r0, [r5, #0]
 80098a6:	b1a8      	cbz	r0, 80098d4 <__pow5mult+0x54>
 80098a8:	4605      	mov	r5, r0
 80098aa:	07e3      	lsls	r3, r4, #31
 80098ac:	d5f8      	bpl.n	80098a0 <__pow5mult+0x20>
 80098ae:	462a      	mov	r2, r5
 80098b0:	4631      	mov	r1, r6
 80098b2:	4638      	mov	r0, r7
 80098b4:	f7ff ff4c 	bl	8009750 <__multiply>
 80098b8:	b1b6      	cbz	r6, 80098e8 <__pow5mult+0x68>
 80098ba:	6872      	ldr	r2, [r6, #4]
 80098bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098be:	1064      	asrs	r4, r4, #1
 80098c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098c4:	6031      	str	r1, [r6, #0]
 80098c6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80098ca:	4606      	mov	r6, r0
 80098cc:	d1ea      	bne.n	80098a4 <__pow5mult+0x24>
 80098ce:	4630      	mov	r0, r6
 80098d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d4:	462a      	mov	r2, r5
 80098d6:	4629      	mov	r1, r5
 80098d8:	4638      	mov	r0, r7
 80098da:	f7ff ff39 	bl	8009750 <__multiply>
 80098de:	6028      	str	r0, [r5, #0]
 80098e0:	f8c0 8000 	str.w	r8, [r0]
 80098e4:	4605      	mov	r5, r0
 80098e6:	e7e0      	b.n	80098aa <__pow5mult+0x2a>
 80098e8:	4606      	mov	r6, r0
 80098ea:	e7d9      	b.n	80098a0 <__pow5mult+0x20>
 80098ec:	1e5a      	subs	r2, r3, #1
 80098ee:	4d0b      	ldr	r5, [pc, #44]	; (800991c <__pow5mult+0x9c>)
 80098f0:	2300      	movs	r3, #0
 80098f2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80098f6:	f7ff fe93 	bl	8009620 <__multadd>
 80098fa:	4606      	mov	r6, r0
 80098fc:	e7c8      	b.n	8009890 <__pow5mult+0x10>
 80098fe:	2101      	movs	r1, #1
 8009900:	4638      	mov	r0, r7
 8009902:	f7ff fe5d 	bl	80095c0 <_Balloc>
 8009906:	f240 2171 	movw	r1, #625	; 0x271
 800990a:	2201      	movs	r2, #1
 800990c:	2300      	movs	r3, #0
 800990e:	6141      	str	r1, [r0, #20]
 8009910:	6102      	str	r2, [r0, #16]
 8009912:	4605      	mov	r5, r0
 8009914:	64b8      	str	r0, [r7, #72]	; 0x48
 8009916:	6003      	str	r3, [r0, #0]
 8009918:	e7be      	b.n	8009898 <__pow5mult+0x18>
 800991a:	bf00      	nop
 800991c:	0800ad10 	.word	0x0800ad10

08009920 <__lshift>:
 8009920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009924:	4691      	mov	r9, r2
 8009926:	690a      	ldr	r2, [r1, #16]
 8009928:	688b      	ldr	r3, [r1, #8]
 800992a:	ea4f 1469 	mov.w	r4, r9, asr #5
 800992e:	eb04 0802 	add.w	r8, r4, r2
 8009932:	f108 0501 	add.w	r5, r8, #1
 8009936:	429d      	cmp	r5, r3
 8009938:	460e      	mov	r6, r1
 800993a:	4682      	mov	sl, r0
 800993c:	6849      	ldr	r1, [r1, #4]
 800993e:	dd04      	ble.n	800994a <__lshift+0x2a>
 8009940:	005b      	lsls	r3, r3, #1
 8009942:	429d      	cmp	r5, r3
 8009944:	f101 0101 	add.w	r1, r1, #1
 8009948:	dcfa      	bgt.n	8009940 <__lshift+0x20>
 800994a:	4650      	mov	r0, sl
 800994c:	f7ff fe38 	bl	80095c0 <_Balloc>
 8009950:	2c00      	cmp	r4, #0
 8009952:	f100 0214 	add.w	r2, r0, #20
 8009956:	dd38      	ble.n	80099ca <__lshift+0xaa>
 8009958:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 800995c:	2100      	movs	r1, #0
 800995e:	f842 1b04 	str.w	r1, [r2], #4
 8009962:	4293      	cmp	r3, r2
 8009964:	d1fb      	bne.n	800995e <__lshift+0x3e>
 8009966:	6934      	ldr	r4, [r6, #16]
 8009968:	f106 0114 	add.w	r1, r6, #20
 800996c:	f019 091f 	ands.w	r9, r9, #31
 8009970:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8009974:	d021      	beq.n	80099ba <__lshift+0x9a>
 8009976:	f1c9 0220 	rsb	r2, r9, #32
 800997a:	2400      	movs	r4, #0
 800997c:	680f      	ldr	r7, [r1, #0]
 800997e:	fa07 fc09 	lsl.w	ip, r7, r9
 8009982:	ea4c 0404 	orr.w	r4, ip, r4
 8009986:	469c      	mov	ip, r3
 8009988:	f843 4b04 	str.w	r4, [r3], #4
 800998c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009990:	458e      	cmp	lr, r1
 8009992:	fa24 f402 	lsr.w	r4, r4, r2
 8009996:	d8f1      	bhi.n	800997c <__lshift+0x5c>
 8009998:	f8cc 4004 	str.w	r4, [ip, #4]
 800999c:	b10c      	cbz	r4, 80099a2 <__lshift+0x82>
 800999e:	f108 0502 	add.w	r5, r8, #2
 80099a2:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80099a6:	6872      	ldr	r2, [r6, #4]
 80099a8:	3d01      	subs	r5, #1
 80099aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099ae:	6105      	str	r5, [r0, #16]
 80099b0:	6031      	str	r1, [r6, #0]
 80099b2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80099b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ba:	3b04      	subs	r3, #4
 80099bc:	f851 2b04 	ldr.w	r2, [r1], #4
 80099c0:	f843 2f04 	str.w	r2, [r3, #4]!
 80099c4:	458e      	cmp	lr, r1
 80099c6:	d8f9      	bhi.n	80099bc <__lshift+0x9c>
 80099c8:	e7eb      	b.n	80099a2 <__lshift+0x82>
 80099ca:	4613      	mov	r3, r2
 80099cc:	e7cb      	b.n	8009966 <__lshift+0x46>
 80099ce:	bf00      	nop

080099d0 <__mcmp>:
 80099d0:	6902      	ldr	r2, [r0, #16]
 80099d2:	690b      	ldr	r3, [r1, #16]
 80099d4:	1ad2      	subs	r2, r2, r3
 80099d6:	d113      	bne.n	8009a00 <__mcmp+0x30>
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	3014      	adds	r0, #20
 80099dc:	3114      	adds	r1, #20
 80099de:	4419      	add	r1, r3
 80099e0:	b410      	push	{r4}
 80099e2:	4403      	add	r3, r0
 80099e4:	e001      	b.n	80099ea <__mcmp+0x1a>
 80099e6:	4298      	cmp	r0, r3
 80099e8:	d20c      	bcs.n	8009a04 <__mcmp+0x34>
 80099ea:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80099ee:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099f2:	4294      	cmp	r4, r2
 80099f4:	d0f7      	beq.n	80099e6 <__mcmp+0x16>
 80099f6:	d309      	bcc.n	8009a0c <__mcmp+0x3c>
 80099f8:	2001      	movs	r0, #1
 80099fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	4610      	mov	r0, r2
 8009a02:	4770      	bx	lr
 8009a04:	2000      	movs	r0, #0
 8009a06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a10:	e7f3      	b.n	80099fa <__mcmp+0x2a>
 8009a12:	bf00      	nop

08009a14 <__mdiff>:
 8009a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a18:	690b      	ldr	r3, [r1, #16]
 8009a1a:	460f      	mov	r7, r1
 8009a1c:	6911      	ldr	r1, [r2, #16]
 8009a1e:	1a5b      	subs	r3, r3, r1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	4690      	mov	r8, r2
 8009a24:	d117      	bne.n	8009a56 <__mdiff+0x42>
 8009a26:	0089      	lsls	r1, r1, #2
 8009a28:	f107 0214 	add.w	r2, r7, #20
 8009a2c:	f108 0514 	add.w	r5, r8, #20
 8009a30:	1853      	adds	r3, r2, r1
 8009a32:	4429      	add	r1, r5
 8009a34:	e001      	b.n	8009a3a <__mdiff+0x26>
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d25e      	bcs.n	8009af8 <__mdiff+0xe4>
 8009a3a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 8009a3e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009a42:	42a6      	cmp	r6, r4
 8009a44:	d0f7      	beq.n	8009a36 <__mdiff+0x22>
 8009a46:	d260      	bcs.n	8009b0a <__mdiff+0xf6>
 8009a48:	463b      	mov	r3, r7
 8009a4a:	4614      	mov	r4, r2
 8009a4c:	4647      	mov	r7, r8
 8009a4e:	f04f 0901 	mov.w	r9, #1
 8009a52:	4698      	mov	r8, r3
 8009a54:	e006      	b.n	8009a64 <__mdiff+0x50>
 8009a56:	db5d      	blt.n	8009b14 <__mdiff+0x100>
 8009a58:	f107 0514 	add.w	r5, r7, #20
 8009a5c:	f102 0414 	add.w	r4, r2, #20
 8009a60:	f04f 0900 	mov.w	r9, #0
 8009a64:	6879      	ldr	r1, [r7, #4]
 8009a66:	f7ff fdab 	bl	80095c0 <_Balloc>
 8009a6a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009a6e:	693e      	ldr	r6, [r7, #16]
 8009a70:	f8c0 900c 	str.w	r9, [r0, #12]
 8009a74:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8009a78:	46a6      	mov	lr, r4
 8009a7a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8009a7e:	f100 0414 	add.w	r4, r0, #20
 8009a82:	2300      	movs	r3, #0
 8009a84:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009a88:	f855 8b04 	ldr.w	r8, [r5], #4
 8009a8c:	b28a      	uxth	r2, r1
 8009a8e:	fa13 f388 	uxtah	r3, r3, r8
 8009a92:	0c09      	lsrs	r1, r1, #16
 8009a94:	1a9a      	subs	r2, r3, r2
 8009a96:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 8009a9a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8009a9e:	b292      	uxth	r2, r2
 8009aa0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009aa4:	45f4      	cmp	ip, lr
 8009aa6:	f844 2b04 	str.w	r2, [r4], #4
 8009aaa:	ea4f 4323 	mov.w	r3, r3, asr #16
 8009aae:	d8e9      	bhi.n	8009a84 <__mdiff+0x70>
 8009ab0:	42af      	cmp	r7, r5
 8009ab2:	d917      	bls.n	8009ae4 <__mdiff+0xd0>
 8009ab4:	46a4      	mov	ip, r4
 8009ab6:	4629      	mov	r1, r5
 8009ab8:	f851 eb04 	ldr.w	lr, [r1], #4
 8009abc:	fa13 f28e 	uxtah	r2, r3, lr
 8009ac0:	1413      	asrs	r3, r2, #16
 8009ac2:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 8009ac6:	b292      	uxth	r2, r2
 8009ac8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009acc:	428f      	cmp	r7, r1
 8009ace:	f84c 2b04 	str.w	r2, [ip], #4
 8009ad2:	ea4f 4323 	mov.w	r3, r3, asr #16
 8009ad6:	d8ef      	bhi.n	8009ab8 <__mdiff+0xa4>
 8009ad8:	43ed      	mvns	r5, r5
 8009ada:	443d      	add	r5, r7
 8009adc:	f025 0503 	bic.w	r5, r5, #3
 8009ae0:	3504      	adds	r5, #4
 8009ae2:	442c      	add	r4, r5
 8009ae4:	3c04      	subs	r4, #4
 8009ae6:	b922      	cbnz	r2, 8009af2 <__mdiff+0xde>
 8009ae8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8009aec:	3e01      	subs	r6, #1
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d0fa      	beq.n	8009ae8 <__mdiff+0xd4>
 8009af2:	6106      	str	r6, [r0, #16]
 8009af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009af8:	2100      	movs	r1, #0
 8009afa:	f7ff fd61 	bl	80095c0 <_Balloc>
 8009afe:	2201      	movs	r2, #1
 8009b00:	2300      	movs	r3, #0
 8009b02:	6102      	str	r2, [r0, #16]
 8009b04:	6143      	str	r3, [r0, #20]
 8009b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b0a:	462c      	mov	r4, r5
 8009b0c:	f04f 0900 	mov.w	r9, #0
 8009b10:	4615      	mov	r5, r2
 8009b12:	e7a7      	b.n	8009a64 <__mdiff+0x50>
 8009b14:	463b      	mov	r3, r7
 8009b16:	f107 0414 	add.w	r4, r7, #20
 8009b1a:	f108 0514 	add.w	r5, r8, #20
 8009b1e:	4647      	mov	r7, r8
 8009b20:	f04f 0901 	mov.w	r9, #1
 8009b24:	4698      	mov	r8, r3
 8009b26:	e79d      	b.n	8009a64 <__mdiff+0x50>

08009b28 <__d2b>:
 8009b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b2c:	b083      	sub	sp, #12
 8009b2e:	2101      	movs	r1, #1
 8009b30:	461c      	mov	r4, r3
 8009b32:	f3c3 550a 	ubfx	r5, r3, #20, #11
 8009b36:	4617      	mov	r7, r2
 8009b38:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009b3a:	f7ff fd41 	bl	80095c0 <_Balloc>
 8009b3e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009b42:	4681      	mov	r9, r0
 8009b44:	b10d      	cbz	r5, 8009b4a <__d2b+0x22>
 8009b46:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009b4a:	9401      	str	r4, [sp, #4]
 8009b4c:	b31f      	cbz	r7, 8009b96 <__d2b+0x6e>
 8009b4e:	a802      	add	r0, sp, #8
 8009b50:	f840 7d08 	str.w	r7, [r0, #-8]!
 8009b54:	f7ff fdc4 	bl	80096e0 <__lo0bits>
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d135      	bne.n	8009bc8 <__d2b+0xa0>
 8009b5c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009b60:	f8c9 2014 	str.w	r2, [r9, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	bf0c      	ite	eq
 8009b68:	2101      	moveq	r1, #1
 8009b6a:	2102      	movne	r1, #2
 8009b6c:	f8c9 3018 	str.w	r3, [r9, #24]
 8009b70:	f8c9 1010 	str.w	r1, [r9, #16]
 8009b74:	b9dd      	cbnz	r5, 8009bae <__d2b+0x86>
 8009b76:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 8009b7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b7e:	6030      	str	r0, [r6, #0]
 8009b80:	6918      	ldr	r0, [r3, #16]
 8009b82:	f7ff fd8d 	bl	80096a0 <__hi0bits>
 8009b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b88:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009b8c:	6018      	str	r0, [r3, #0]
 8009b8e:	4648      	mov	r0, r9
 8009b90:	b003      	add	sp, #12
 8009b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b96:	a801      	add	r0, sp, #4
 8009b98:	f7ff fda2 	bl	80096e0 <__lo0bits>
 8009b9c:	9b01      	ldr	r3, [sp, #4]
 8009b9e:	f8c9 3014 	str.w	r3, [r9, #20]
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	3020      	adds	r0, #32
 8009ba6:	f8c9 1010 	str.w	r1, [r9, #16]
 8009baa:	2d00      	cmp	r5, #0
 8009bac:	d0e3      	beq.n	8009b76 <__d2b+0x4e>
 8009bae:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 8009bb2:	eb08 0300 	add.w	r3, r8, r0
 8009bb6:	6033      	str	r3, [r6, #0]
 8009bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009bbe:	6018      	str	r0, [r3, #0]
 8009bc0:	4648      	mov	r0, r9
 8009bc2:	b003      	add	sp, #12
 8009bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bc8:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009bcc:	f1c0 0120 	rsb	r1, r0, #32
 8009bd0:	fa03 f101 	lsl.w	r1, r3, r1
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	40c3      	lsrs	r3, r0
 8009bd8:	9301      	str	r3, [sp, #4]
 8009bda:	f8c9 2014 	str.w	r2, [r9, #20]
 8009bde:	e7c1      	b.n	8009b64 <__d2b+0x3c>

08009be0 <_realloc_r>:
 8009be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	4617      	mov	r7, r2
 8009be6:	b083      	sub	sp, #12
 8009be8:	2900      	cmp	r1, #0
 8009bea:	f000 80c1 	beq.w	8009d70 <_realloc_r+0x190>
 8009bee:	460e      	mov	r6, r1
 8009bf0:	4681      	mov	r9, r0
 8009bf2:	f107 050b 	add.w	r5, r7, #11
 8009bf6:	f7ff fcdf 	bl	80095b8 <__malloc_lock>
 8009bfa:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8009bfe:	2d16      	cmp	r5, #22
 8009c00:	f02e 0403 	bic.w	r4, lr, #3
 8009c04:	f1a6 0808 	sub.w	r8, r6, #8
 8009c08:	d840      	bhi.n	8009c8c <_realloc_r+0xac>
 8009c0a:	2210      	movs	r2, #16
 8009c0c:	4615      	mov	r5, r2
 8009c0e:	42af      	cmp	r7, r5
 8009c10:	d841      	bhi.n	8009c96 <_realloc_r+0xb6>
 8009c12:	4294      	cmp	r4, r2
 8009c14:	da75      	bge.n	8009d02 <_realloc_r+0x122>
 8009c16:	4bc9      	ldr	r3, [pc, #804]	; (8009f3c <_realloc_r+0x35c>)
 8009c18:	6899      	ldr	r1, [r3, #8]
 8009c1a:	eb08 0004 	add.w	r0, r8, r4
 8009c1e:	4288      	cmp	r0, r1
 8009c20:	6841      	ldr	r1, [r0, #4]
 8009c22:	f000 80d9 	beq.w	8009dd8 <_realloc_r+0x1f8>
 8009c26:	f021 0301 	bic.w	r3, r1, #1
 8009c2a:	4403      	add	r3, r0
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	07db      	lsls	r3, r3, #31
 8009c30:	d57d      	bpl.n	8009d2e <_realloc_r+0x14e>
 8009c32:	f01e 0f01 	tst.w	lr, #1
 8009c36:	d035      	beq.n	8009ca4 <_realloc_r+0xc4>
 8009c38:	4639      	mov	r1, r7
 8009c3a:	4648      	mov	r0, r9
 8009c3c:	f7ff f936 	bl	8008eac <_malloc_r>
 8009c40:	4607      	mov	r7, r0
 8009c42:	b1e0      	cbz	r0, 8009c7e <_realloc_r+0x9e>
 8009c44:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c48:	f023 0301 	bic.w	r3, r3, #1
 8009c4c:	4443      	add	r3, r8
 8009c4e:	f1a0 0208 	sub.w	r2, r0, #8
 8009c52:	429a      	cmp	r2, r3
 8009c54:	f000 8144 	beq.w	8009ee0 <_realloc_r+0x300>
 8009c58:	1f22      	subs	r2, r4, #4
 8009c5a:	2a24      	cmp	r2, #36	; 0x24
 8009c5c:	f200 8131 	bhi.w	8009ec2 <_realloc_r+0x2e2>
 8009c60:	2a13      	cmp	r2, #19
 8009c62:	f200 8104 	bhi.w	8009e6e <_realloc_r+0x28e>
 8009c66:	4603      	mov	r3, r0
 8009c68:	4632      	mov	r2, r6
 8009c6a:	6811      	ldr	r1, [r2, #0]
 8009c6c:	6019      	str	r1, [r3, #0]
 8009c6e:	6851      	ldr	r1, [r2, #4]
 8009c70:	6059      	str	r1, [r3, #4]
 8009c72:	6892      	ldr	r2, [r2, #8]
 8009c74:	609a      	str	r2, [r3, #8]
 8009c76:	4631      	mov	r1, r6
 8009c78:	4648      	mov	r0, r9
 8009c7a:	f7fe fdf3 	bl	8008864 <_free_r>
 8009c7e:	4648      	mov	r0, r9
 8009c80:	f7ff fc9c 	bl	80095bc <__malloc_unlock>
 8009c84:	4638      	mov	r0, r7
 8009c86:	b003      	add	sp, #12
 8009c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8c:	f025 0507 	bic.w	r5, r5, #7
 8009c90:	2d00      	cmp	r5, #0
 8009c92:	462a      	mov	r2, r5
 8009c94:	dabb      	bge.n	8009c0e <_realloc_r+0x2e>
 8009c96:	230c      	movs	r3, #12
 8009c98:	2000      	movs	r0, #0
 8009c9a:	f8c9 3000 	str.w	r3, [r9]
 8009c9e:	b003      	add	sp, #12
 8009ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009ca8:	ebc3 0a08 	rsb	sl, r3, r8
 8009cac:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009cb0:	f023 0c03 	bic.w	ip, r3, #3
 8009cb4:	eb04 030c 	add.w	r3, r4, ip
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	dbbd      	blt.n	8009c38 <_realloc_r+0x58>
 8009cbc:	4657      	mov	r7, sl
 8009cbe:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009cc2:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009cc6:	1f22      	subs	r2, r4, #4
 8009cc8:	2a24      	cmp	r2, #36	; 0x24
 8009cca:	60c1      	str	r1, [r0, #12]
 8009ccc:	6088      	str	r0, [r1, #8]
 8009cce:	f200 8117 	bhi.w	8009f00 <_realloc_r+0x320>
 8009cd2:	2a13      	cmp	r2, #19
 8009cd4:	f240 8112 	bls.w	8009efc <_realloc_r+0x31c>
 8009cd8:	6831      	ldr	r1, [r6, #0]
 8009cda:	f8ca 1008 	str.w	r1, [sl, #8]
 8009cde:	6871      	ldr	r1, [r6, #4]
 8009ce0:	f8ca 100c 	str.w	r1, [sl, #12]
 8009ce4:	2a1b      	cmp	r2, #27
 8009ce6:	f200 812b 	bhi.w	8009f40 <_realloc_r+0x360>
 8009cea:	3608      	adds	r6, #8
 8009cec:	f10a 0210 	add.w	r2, sl, #16
 8009cf0:	6831      	ldr	r1, [r6, #0]
 8009cf2:	6011      	str	r1, [r2, #0]
 8009cf4:	6871      	ldr	r1, [r6, #4]
 8009cf6:	6051      	str	r1, [r2, #4]
 8009cf8:	68b1      	ldr	r1, [r6, #8]
 8009cfa:	6091      	str	r1, [r2, #8]
 8009cfc:	463e      	mov	r6, r7
 8009cfe:	461c      	mov	r4, r3
 8009d00:	46d0      	mov	r8, sl
 8009d02:	1b63      	subs	r3, r4, r5
 8009d04:	2b0f      	cmp	r3, #15
 8009d06:	d81d      	bhi.n	8009d44 <_realloc_r+0x164>
 8009d08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	4323      	orrs	r3, r4
 8009d12:	4444      	add	r4, r8
 8009d14:	f8c8 3004 	str.w	r3, [r8, #4]
 8009d18:	6863      	ldr	r3, [r4, #4]
 8009d1a:	f043 0301 	orr.w	r3, r3, #1
 8009d1e:	6063      	str	r3, [r4, #4]
 8009d20:	4648      	mov	r0, r9
 8009d22:	f7ff fc4b 	bl	80095bc <__malloc_unlock>
 8009d26:	4630      	mov	r0, r6
 8009d28:	b003      	add	sp, #12
 8009d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d2e:	f021 0103 	bic.w	r1, r1, #3
 8009d32:	4421      	add	r1, r4
 8009d34:	4291      	cmp	r1, r2
 8009d36:	db21      	blt.n	8009d7c <_realloc_r+0x19c>
 8009d38:	68c3      	ldr	r3, [r0, #12]
 8009d3a:	6882      	ldr	r2, [r0, #8]
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	60d3      	str	r3, [r2, #12]
 8009d40:	609a      	str	r2, [r3, #8]
 8009d42:	e7de      	b.n	8009d02 <_realloc_r+0x122>
 8009d44:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009d48:	eb08 0105 	add.w	r1, r8, r5
 8009d4c:	f002 0201 	and.w	r2, r2, #1
 8009d50:	4315      	orrs	r5, r2
 8009d52:	f043 0201 	orr.w	r2, r3, #1
 8009d56:	440b      	add	r3, r1
 8009d58:	f8c8 5004 	str.w	r5, [r8, #4]
 8009d5c:	604a      	str	r2, [r1, #4]
 8009d5e:	685a      	ldr	r2, [r3, #4]
 8009d60:	f042 0201 	orr.w	r2, r2, #1
 8009d64:	3108      	adds	r1, #8
 8009d66:	605a      	str	r2, [r3, #4]
 8009d68:	4648      	mov	r0, r9
 8009d6a:	f7fe fd7b 	bl	8008864 <_free_r>
 8009d6e:	e7d7      	b.n	8009d20 <_realloc_r+0x140>
 8009d70:	4611      	mov	r1, r2
 8009d72:	b003      	add	sp, #12
 8009d74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d78:	f7ff b898 	b.w	8008eac <_malloc_r>
 8009d7c:	f01e 0f01 	tst.w	lr, #1
 8009d80:	f47f af5a 	bne.w	8009c38 <_realloc_r+0x58>
 8009d84:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009d88:	ebc3 0a08 	rsb	sl, r3, r8
 8009d8c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009d90:	f023 0c03 	bic.w	ip, r3, #3
 8009d94:	eb01 0e0c 	add.w	lr, r1, ip
 8009d98:	4596      	cmp	lr, r2
 8009d9a:	db8b      	blt.n	8009cb4 <_realloc_r+0xd4>
 8009d9c:	68c3      	ldr	r3, [r0, #12]
 8009d9e:	6882      	ldr	r2, [r0, #8]
 8009da0:	4657      	mov	r7, sl
 8009da2:	60d3      	str	r3, [r2, #12]
 8009da4:	609a      	str	r2, [r3, #8]
 8009da6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009daa:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009dae:	60cb      	str	r3, [r1, #12]
 8009db0:	1f22      	subs	r2, r4, #4
 8009db2:	2a24      	cmp	r2, #36	; 0x24
 8009db4:	6099      	str	r1, [r3, #8]
 8009db6:	f200 8099 	bhi.w	8009eec <_realloc_r+0x30c>
 8009dba:	2a13      	cmp	r2, #19
 8009dbc:	d962      	bls.n	8009e84 <_realloc_r+0x2a4>
 8009dbe:	6833      	ldr	r3, [r6, #0]
 8009dc0:	f8ca 3008 	str.w	r3, [sl, #8]
 8009dc4:	6873      	ldr	r3, [r6, #4]
 8009dc6:	f8ca 300c 	str.w	r3, [sl, #12]
 8009dca:	2a1b      	cmp	r2, #27
 8009dcc:	f200 80a0 	bhi.w	8009f10 <_realloc_r+0x330>
 8009dd0:	3608      	adds	r6, #8
 8009dd2:	f10a 0310 	add.w	r3, sl, #16
 8009dd6:	e056      	b.n	8009e86 <_realloc_r+0x2a6>
 8009dd8:	f021 0b03 	bic.w	fp, r1, #3
 8009ddc:	44a3      	add	fp, r4
 8009dde:	f105 0010 	add.w	r0, r5, #16
 8009de2:	4583      	cmp	fp, r0
 8009de4:	da59      	bge.n	8009e9a <_realloc_r+0x2ba>
 8009de6:	f01e 0f01 	tst.w	lr, #1
 8009dea:	f47f af25 	bne.w	8009c38 <_realloc_r+0x58>
 8009dee:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8009df2:	ebc1 0a08 	rsb	sl, r1, r8
 8009df6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009dfa:	f021 0c03 	bic.w	ip, r1, #3
 8009dfe:	44e3      	add	fp, ip
 8009e00:	4558      	cmp	r0, fp
 8009e02:	f73f af57 	bgt.w	8009cb4 <_realloc_r+0xd4>
 8009e06:	4657      	mov	r7, sl
 8009e08:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009e0c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009e10:	1f22      	subs	r2, r4, #4
 8009e12:	2a24      	cmp	r2, #36	; 0x24
 8009e14:	60c1      	str	r1, [r0, #12]
 8009e16:	6088      	str	r0, [r1, #8]
 8009e18:	f200 80b4 	bhi.w	8009f84 <_realloc_r+0x3a4>
 8009e1c:	2a13      	cmp	r2, #19
 8009e1e:	f240 80a5 	bls.w	8009f6c <_realloc_r+0x38c>
 8009e22:	6831      	ldr	r1, [r6, #0]
 8009e24:	f8ca 1008 	str.w	r1, [sl, #8]
 8009e28:	6871      	ldr	r1, [r6, #4]
 8009e2a:	f8ca 100c 	str.w	r1, [sl, #12]
 8009e2e:	2a1b      	cmp	r2, #27
 8009e30:	f200 80af 	bhi.w	8009f92 <_realloc_r+0x3b2>
 8009e34:	3608      	adds	r6, #8
 8009e36:	f10a 0210 	add.w	r2, sl, #16
 8009e3a:	6831      	ldr	r1, [r6, #0]
 8009e3c:	6011      	str	r1, [r2, #0]
 8009e3e:	6871      	ldr	r1, [r6, #4]
 8009e40:	6051      	str	r1, [r2, #4]
 8009e42:	68b1      	ldr	r1, [r6, #8]
 8009e44:	6091      	str	r1, [r2, #8]
 8009e46:	eb0a 0105 	add.w	r1, sl, r5
 8009e4a:	ebc5 020b 	rsb	r2, r5, fp
 8009e4e:	f042 0201 	orr.w	r2, r2, #1
 8009e52:	6099      	str	r1, [r3, #8]
 8009e54:	604a      	str	r2, [r1, #4]
 8009e56:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009e5a:	f003 0301 	and.w	r3, r3, #1
 8009e5e:	431d      	orrs	r5, r3
 8009e60:	4648      	mov	r0, r9
 8009e62:	f8ca 5004 	str.w	r5, [sl, #4]
 8009e66:	f7ff fba9 	bl	80095bc <__malloc_unlock>
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	e75c      	b.n	8009d28 <_realloc_r+0x148>
 8009e6e:	6833      	ldr	r3, [r6, #0]
 8009e70:	6003      	str	r3, [r0, #0]
 8009e72:	6873      	ldr	r3, [r6, #4]
 8009e74:	6043      	str	r3, [r0, #4]
 8009e76:	2a1b      	cmp	r2, #27
 8009e78:	d827      	bhi.n	8009eca <_realloc_r+0x2ea>
 8009e7a:	f100 0308 	add.w	r3, r0, #8
 8009e7e:	f106 0208 	add.w	r2, r6, #8
 8009e82:	e6f2      	b.n	8009c6a <_realloc_r+0x8a>
 8009e84:	463b      	mov	r3, r7
 8009e86:	6832      	ldr	r2, [r6, #0]
 8009e88:	601a      	str	r2, [r3, #0]
 8009e8a:	6872      	ldr	r2, [r6, #4]
 8009e8c:	605a      	str	r2, [r3, #4]
 8009e8e:	68b2      	ldr	r2, [r6, #8]
 8009e90:	609a      	str	r2, [r3, #8]
 8009e92:	463e      	mov	r6, r7
 8009e94:	4674      	mov	r4, lr
 8009e96:	46d0      	mov	r8, sl
 8009e98:	e733      	b.n	8009d02 <_realloc_r+0x122>
 8009e9a:	eb08 0105 	add.w	r1, r8, r5
 8009e9e:	ebc5 0b0b 	rsb	fp, r5, fp
 8009ea2:	f04b 0201 	orr.w	r2, fp, #1
 8009ea6:	6099      	str	r1, [r3, #8]
 8009ea8:	604a      	str	r2, [r1, #4]
 8009eaa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	431d      	orrs	r5, r3
 8009eb4:	4648      	mov	r0, r9
 8009eb6:	f846 5c04 	str.w	r5, [r6, #-4]
 8009eba:	f7ff fb7f 	bl	80095bc <__malloc_unlock>
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	e732      	b.n	8009d28 <_realloc_r+0x148>
 8009ec2:	4631      	mov	r1, r6
 8009ec4:	f7ff fb14 	bl	80094f0 <memmove>
 8009ec8:	e6d5      	b.n	8009c76 <_realloc_r+0x96>
 8009eca:	68b3      	ldr	r3, [r6, #8]
 8009ecc:	6083      	str	r3, [r0, #8]
 8009ece:	68f3      	ldr	r3, [r6, #12]
 8009ed0:	60c3      	str	r3, [r0, #12]
 8009ed2:	2a24      	cmp	r2, #36	; 0x24
 8009ed4:	d028      	beq.n	8009f28 <_realloc_r+0x348>
 8009ed6:	f100 0310 	add.w	r3, r0, #16
 8009eda:	f106 0210 	add.w	r2, r6, #16
 8009ede:	e6c4      	b.n	8009c6a <_realloc_r+0x8a>
 8009ee0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009ee4:	f023 0303 	bic.w	r3, r3, #3
 8009ee8:	441c      	add	r4, r3
 8009eea:	e70a      	b.n	8009d02 <_realloc_r+0x122>
 8009eec:	4631      	mov	r1, r6
 8009eee:	4638      	mov	r0, r7
 8009ef0:	4674      	mov	r4, lr
 8009ef2:	46d0      	mov	r8, sl
 8009ef4:	f7ff fafc 	bl	80094f0 <memmove>
 8009ef8:	463e      	mov	r6, r7
 8009efa:	e702      	b.n	8009d02 <_realloc_r+0x122>
 8009efc:	463a      	mov	r2, r7
 8009efe:	e6f7      	b.n	8009cf0 <_realloc_r+0x110>
 8009f00:	4631      	mov	r1, r6
 8009f02:	4638      	mov	r0, r7
 8009f04:	461c      	mov	r4, r3
 8009f06:	46d0      	mov	r8, sl
 8009f08:	f7ff faf2 	bl	80094f0 <memmove>
 8009f0c:	463e      	mov	r6, r7
 8009f0e:	e6f8      	b.n	8009d02 <_realloc_r+0x122>
 8009f10:	68b3      	ldr	r3, [r6, #8]
 8009f12:	f8ca 3010 	str.w	r3, [sl, #16]
 8009f16:	68f3      	ldr	r3, [r6, #12]
 8009f18:	f8ca 3014 	str.w	r3, [sl, #20]
 8009f1c:	2a24      	cmp	r2, #36	; 0x24
 8009f1e:	d01b      	beq.n	8009f58 <_realloc_r+0x378>
 8009f20:	3610      	adds	r6, #16
 8009f22:	f10a 0318 	add.w	r3, sl, #24
 8009f26:	e7ae      	b.n	8009e86 <_realloc_r+0x2a6>
 8009f28:	6933      	ldr	r3, [r6, #16]
 8009f2a:	6103      	str	r3, [r0, #16]
 8009f2c:	6973      	ldr	r3, [r6, #20]
 8009f2e:	6143      	str	r3, [r0, #20]
 8009f30:	f106 0218 	add.w	r2, r6, #24
 8009f34:	f100 0318 	add.w	r3, r0, #24
 8009f38:	e697      	b.n	8009c6a <_realloc_r+0x8a>
 8009f3a:	bf00      	nop
 8009f3c:	200005d8 	.word	0x200005d8
 8009f40:	68b1      	ldr	r1, [r6, #8]
 8009f42:	f8ca 1010 	str.w	r1, [sl, #16]
 8009f46:	68f1      	ldr	r1, [r6, #12]
 8009f48:	f8ca 1014 	str.w	r1, [sl, #20]
 8009f4c:	2a24      	cmp	r2, #36	; 0x24
 8009f4e:	d00f      	beq.n	8009f70 <_realloc_r+0x390>
 8009f50:	3610      	adds	r6, #16
 8009f52:	f10a 0218 	add.w	r2, sl, #24
 8009f56:	e6cb      	b.n	8009cf0 <_realloc_r+0x110>
 8009f58:	6933      	ldr	r3, [r6, #16]
 8009f5a:	f8ca 3018 	str.w	r3, [sl, #24]
 8009f5e:	6973      	ldr	r3, [r6, #20]
 8009f60:	f8ca 301c 	str.w	r3, [sl, #28]
 8009f64:	3618      	adds	r6, #24
 8009f66:	f10a 0320 	add.w	r3, sl, #32
 8009f6a:	e78c      	b.n	8009e86 <_realloc_r+0x2a6>
 8009f6c:	463a      	mov	r2, r7
 8009f6e:	e764      	b.n	8009e3a <_realloc_r+0x25a>
 8009f70:	6932      	ldr	r2, [r6, #16]
 8009f72:	f8ca 2018 	str.w	r2, [sl, #24]
 8009f76:	6972      	ldr	r2, [r6, #20]
 8009f78:	f8ca 201c 	str.w	r2, [sl, #28]
 8009f7c:	3618      	adds	r6, #24
 8009f7e:	f10a 0220 	add.w	r2, sl, #32
 8009f82:	e6b5      	b.n	8009cf0 <_realloc_r+0x110>
 8009f84:	4631      	mov	r1, r6
 8009f86:	4638      	mov	r0, r7
 8009f88:	9301      	str	r3, [sp, #4]
 8009f8a:	f7ff fab1 	bl	80094f0 <memmove>
 8009f8e:	9b01      	ldr	r3, [sp, #4]
 8009f90:	e759      	b.n	8009e46 <_realloc_r+0x266>
 8009f92:	68b1      	ldr	r1, [r6, #8]
 8009f94:	f8ca 1010 	str.w	r1, [sl, #16]
 8009f98:	68f1      	ldr	r1, [r6, #12]
 8009f9a:	f8ca 1014 	str.w	r1, [sl, #20]
 8009f9e:	2a24      	cmp	r2, #36	; 0x24
 8009fa0:	d003      	beq.n	8009faa <_realloc_r+0x3ca>
 8009fa2:	3610      	adds	r6, #16
 8009fa4:	f10a 0218 	add.w	r2, sl, #24
 8009fa8:	e747      	b.n	8009e3a <_realloc_r+0x25a>
 8009faa:	6932      	ldr	r2, [r6, #16]
 8009fac:	f8ca 2018 	str.w	r2, [sl, #24]
 8009fb0:	6972      	ldr	r2, [r6, #20]
 8009fb2:	f8ca 201c 	str.w	r2, [sl, #28]
 8009fb6:	3618      	adds	r6, #24
 8009fb8:	f10a 0220 	add.w	r2, sl, #32
 8009fbc:	e73d      	b.n	8009e3a <_realloc_r+0x25a>
 8009fbe:	bf00      	nop

08009fc0 <_sbrk_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4c07      	ldr	r4, [pc, #28]	; (8009fe0 <_sbrk_r+0x20>)
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	4608      	mov	r0, r1
 8009fca:	6023      	str	r3, [r4, #0]
 8009fcc:	f7f8 fabc 	bl	8002548 <_sbrk>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d000      	beq.n	8009fd6 <_sbrk_r+0x16>
 8009fd4:	bd38      	pop	{r3, r4, r5, pc}
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d0fb      	beq.n	8009fd4 <_sbrk_r+0x14>
 8009fdc:	602b      	str	r3, [r5, #0]
 8009fde:	bd38      	pop	{r3, r4, r5, pc}
 8009fe0:	20000ac8 	.word	0x20000ac8

08009fe4 <__sread>:
 8009fe4:	b510      	push	{r4, lr}
 8009fe6:	460c      	mov	r4, r1
 8009fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fec:	f000 fa48 	bl	800a480 <_read_r>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	db03      	blt.n	8009ffc <__sread+0x18>
 8009ff4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009ff6:	4403      	add	r3, r0
 8009ff8:	6523      	str	r3, [r4, #80]	; 0x50
 8009ffa:	bd10      	pop	{r4, pc}
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a002:	81a3      	strh	r3, [r4, #12]
 800a004:	bd10      	pop	{r4, pc}
 800a006:	bf00      	nop

0800a008 <__swrite>:
 800a008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a00c:	4616      	mov	r6, r2
 800a00e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a012:	461f      	mov	r7, r3
 800a014:	05d3      	lsls	r3, r2, #23
 800a016:	460c      	mov	r4, r1
 800a018:	4605      	mov	r5, r0
 800a01a:	d507      	bpl.n	800a02c <__swrite+0x24>
 800a01c:	2200      	movs	r2, #0
 800a01e:	2302      	movs	r3, #2
 800a020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a024:	f000 fa16 	bl	800a454 <_lseek_r>
 800a028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a02c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a030:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a034:	81a2      	strh	r2, [r4, #12]
 800a036:	463b      	mov	r3, r7
 800a038:	4632      	mov	r2, r6
 800a03a:	4628      	mov	r0, r5
 800a03c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a040:	f000 b8e8 	b.w	800a214 <_write_r>

0800a044 <__sseek>:
 800a044:	b510      	push	{r4, lr}
 800a046:	460c      	mov	r4, r1
 800a048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a04c:	f000 fa02 	bl	800a454 <_lseek_r>
 800a050:	89a3      	ldrh	r3, [r4, #12]
 800a052:	1c42      	adds	r2, r0, #1
 800a054:	bf0e      	itee	eq
 800a056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a05a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a05e:	6520      	strne	r0, [r4, #80]	; 0x50
 800a060:	81a3      	strh	r3, [r4, #12]
 800a062:	bd10      	pop	{r4, pc}

0800a064 <__sclose>:
 800a064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a068:	f000 b91a 	b.w	800a2a0 <_close_r>

0800a06c <__ssprint_r>:
 800a06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a070:	6893      	ldr	r3, [r2, #8]
 800a072:	b083      	sub	sp, #12
 800a074:	4690      	mov	r8, r2
 800a076:	2b00      	cmp	r3, #0
 800a078:	d072      	beq.n	800a160 <__ssprint_r+0xf4>
 800a07a:	4683      	mov	fp, r0
 800a07c:	f04f 0900 	mov.w	r9, #0
 800a080:	6816      	ldr	r6, [r2, #0]
 800a082:	6808      	ldr	r0, [r1, #0]
 800a084:	688b      	ldr	r3, [r1, #8]
 800a086:	460d      	mov	r5, r1
 800a088:	464c      	mov	r4, r9
 800a08a:	2c00      	cmp	r4, #0
 800a08c:	d045      	beq.n	800a11a <__ssprint_r+0xae>
 800a08e:	429c      	cmp	r4, r3
 800a090:	461f      	mov	r7, r3
 800a092:	469a      	mov	sl, r3
 800a094:	d346      	bcc.n	800a124 <__ssprint_r+0xb8>
 800a096:	89ab      	ldrh	r3, [r5, #12]
 800a098:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800a09c:	d02d      	beq.n	800a0fa <__ssprint_r+0x8e>
 800a09e:	696f      	ldr	r7, [r5, #20]
 800a0a0:	6929      	ldr	r1, [r5, #16]
 800a0a2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800a0a6:	ebc1 0a00 	rsb	sl, r1, r0
 800a0aa:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800a0ae:	1c60      	adds	r0, r4, #1
 800a0b0:	107f      	asrs	r7, r7, #1
 800a0b2:	4450      	add	r0, sl
 800a0b4:	42b8      	cmp	r0, r7
 800a0b6:	463a      	mov	r2, r7
 800a0b8:	bf84      	itt	hi
 800a0ba:	4607      	movhi	r7, r0
 800a0bc:	463a      	movhi	r2, r7
 800a0be:	055b      	lsls	r3, r3, #21
 800a0c0:	d533      	bpl.n	800a12a <__ssprint_r+0xbe>
 800a0c2:	4611      	mov	r1, r2
 800a0c4:	4658      	mov	r0, fp
 800a0c6:	f7fe fef1 	bl	8008eac <_malloc_r>
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d037      	beq.n	800a13e <__ssprint_r+0xd2>
 800a0ce:	4652      	mov	r2, sl
 800a0d0:	6929      	ldr	r1, [r5, #16]
 800a0d2:	9001      	str	r0, [sp, #4]
 800a0d4:	f7fa f882 	bl	80041dc <memcpy>
 800a0d8:	89aa      	ldrh	r2, [r5, #12]
 800a0da:	9b01      	ldr	r3, [sp, #4]
 800a0dc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a0e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a0e4:	81aa      	strh	r2, [r5, #12]
 800a0e6:	ebca 0207 	rsb	r2, sl, r7
 800a0ea:	eb03 000a 	add.w	r0, r3, sl
 800a0ee:	616f      	str	r7, [r5, #20]
 800a0f0:	612b      	str	r3, [r5, #16]
 800a0f2:	6028      	str	r0, [r5, #0]
 800a0f4:	60aa      	str	r2, [r5, #8]
 800a0f6:	4627      	mov	r7, r4
 800a0f8:	46a2      	mov	sl, r4
 800a0fa:	4652      	mov	r2, sl
 800a0fc:	4649      	mov	r1, r9
 800a0fe:	f7ff f9f7 	bl	80094f0 <memmove>
 800a102:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800a106:	68ab      	ldr	r3, [r5, #8]
 800a108:	6828      	ldr	r0, [r5, #0]
 800a10a:	1bdb      	subs	r3, r3, r7
 800a10c:	4450      	add	r0, sl
 800a10e:	1b14      	subs	r4, r2, r4
 800a110:	60ab      	str	r3, [r5, #8]
 800a112:	6028      	str	r0, [r5, #0]
 800a114:	f8c8 4008 	str.w	r4, [r8, #8]
 800a118:	b314      	cbz	r4, 800a160 <__ssprint_r+0xf4>
 800a11a:	f8d6 9000 	ldr.w	r9, [r6]
 800a11e:	6874      	ldr	r4, [r6, #4]
 800a120:	3608      	adds	r6, #8
 800a122:	e7b2      	b.n	800a08a <__ssprint_r+0x1e>
 800a124:	4627      	mov	r7, r4
 800a126:	46a2      	mov	sl, r4
 800a128:	e7e7      	b.n	800a0fa <__ssprint_r+0x8e>
 800a12a:	4658      	mov	r0, fp
 800a12c:	f7ff fd58 	bl	8009be0 <_realloc_r>
 800a130:	4603      	mov	r3, r0
 800a132:	2800      	cmp	r0, #0
 800a134:	d1d7      	bne.n	800a0e6 <__ssprint_r+0x7a>
 800a136:	6929      	ldr	r1, [r5, #16]
 800a138:	4658      	mov	r0, fp
 800a13a:	f7fe fb93 	bl	8008864 <_free_r>
 800a13e:	230c      	movs	r3, #12
 800a140:	f8cb 3000 	str.w	r3, [fp]
 800a144:	89ab      	ldrh	r3, [r5, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a14c:	f04f 30ff 	mov.w	r0, #4294967295
 800a150:	81ab      	strh	r3, [r5, #12]
 800a152:	f8c8 2008 	str.w	r2, [r8, #8]
 800a156:	f8c8 2004 	str.w	r2, [r8, #4]
 800a15a:	b003      	add	sp, #12
 800a15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a160:	2000      	movs	r0, #0
 800a162:	f8c8 0004 	str.w	r0, [r8, #4]
 800a166:	b003      	add	sp, #12
 800a168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a16c <__sprint_r.part.0>:
 800a16c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a16e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a172:	049c      	lsls	r4, r3, #18
 800a174:	4692      	mov	sl, r2
 800a176:	d52c      	bpl.n	800a1d2 <__sprint_r.part.0+0x66>
 800a178:	6893      	ldr	r3, [r2, #8]
 800a17a:	6812      	ldr	r2, [r2, #0]
 800a17c:	b33b      	cbz	r3, 800a1ce <__sprint_r.part.0+0x62>
 800a17e:	460f      	mov	r7, r1
 800a180:	4680      	mov	r8, r0
 800a182:	f102 0908 	add.w	r9, r2, #8
 800a186:	e919 0060 	ldmdb	r9, {r5, r6}
 800a18a:	08b6      	lsrs	r6, r6, #2
 800a18c:	d017      	beq.n	800a1be <__sprint_r.part.0+0x52>
 800a18e:	3d04      	subs	r5, #4
 800a190:	2400      	movs	r4, #0
 800a192:	e001      	b.n	800a198 <__sprint_r.part.0+0x2c>
 800a194:	42a6      	cmp	r6, r4
 800a196:	d010      	beq.n	800a1ba <__sprint_r.part.0+0x4e>
 800a198:	463a      	mov	r2, r7
 800a19a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800a19e:	4640      	mov	r0, r8
 800a1a0:	f000 f91e 	bl	800a3e0 <_fputwc_r>
 800a1a4:	1c43      	adds	r3, r0, #1
 800a1a6:	f104 0401 	add.w	r4, r4, #1
 800a1aa:	d1f3      	bne.n	800a194 <__sprint_r.part.0+0x28>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f8ca 3008 	str.w	r3, [sl, #8]
 800a1b2:	f8ca 3004 	str.w	r3, [sl, #4]
 800a1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ba:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a1be:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800a1c2:	f8ca 3008 	str.w	r3, [sl, #8]
 800a1c6:	f109 0908 	add.w	r9, r9, #8
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1db      	bne.n	800a186 <__sprint_r.part.0+0x1a>
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	e7ec      	b.n	800a1ac <__sprint_r.part.0+0x40>
 800a1d2:	f7fe fc2f 	bl	8008a34 <__sfvwrite_r>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f8ca 3008 	str.w	r3, [sl, #8]
 800a1dc:	f8ca 3004 	str.w	r3, [sl, #4]
 800a1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a1e4 <__sprint_r>:
 800a1e4:	6893      	ldr	r3, [r2, #8]
 800a1e6:	b10b      	cbz	r3, 800a1ec <__sprint_r+0x8>
 800a1e8:	f7ff bfc0 	b.w	800a16c <__sprint_r.part.0>
 800a1ec:	b410      	push	{r4}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	6053      	str	r3, [r2, #4]
 800a1f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <__ascii_wctomb>:
 800a1f8:	b121      	cbz	r1, 800a204 <__ascii_wctomb+0xc>
 800a1fa:	2aff      	cmp	r2, #255	; 0xff
 800a1fc:	d804      	bhi.n	800a208 <__ascii_wctomb+0x10>
 800a1fe:	700a      	strb	r2, [r1, #0]
 800a200:	2001      	movs	r0, #1
 800a202:	4770      	bx	lr
 800a204:	4608      	mov	r0, r1
 800a206:	4770      	bx	lr
 800a208:	238a      	movs	r3, #138	; 0x8a
 800a20a:	6003      	str	r3, [r0, #0]
 800a20c:	f04f 30ff 	mov.w	r0, #4294967295
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop

0800a214 <_write_r>:
 800a214:	b570      	push	{r4, r5, r6, lr}
 800a216:	460d      	mov	r5, r1
 800a218:	4c08      	ldr	r4, [pc, #32]	; (800a23c <_write_r+0x28>)
 800a21a:	4611      	mov	r1, r2
 800a21c:	4606      	mov	r6, r0
 800a21e:	461a      	mov	r2, r3
 800a220:	4628      	mov	r0, r5
 800a222:	2300      	movs	r3, #0
 800a224:	6023      	str	r3, [r4, #0]
 800a226:	f7f7 f8cd 	bl	80013c4 <_write>
 800a22a:	1c43      	adds	r3, r0, #1
 800a22c:	d000      	beq.n	800a230 <_write_r+0x1c>
 800a22e:	bd70      	pop	{r4, r5, r6, pc}
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d0fb      	beq.n	800a22e <_write_r+0x1a>
 800a236:	6033      	str	r3, [r6, #0]
 800a238:	bd70      	pop	{r4, r5, r6, pc}
 800a23a:	bf00      	nop
 800a23c:	20000ac8 	.word	0x20000ac8

0800a240 <_calloc_r>:
 800a240:	b510      	push	{r4, lr}
 800a242:	fb02 f101 	mul.w	r1, r2, r1
 800a246:	f7fe fe31 	bl	8008eac <_malloc_r>
 800a24a:	4604      	mov	r4, r0
 800a24c:	b1d8      	cbz	r0, 800a286 <_calloc_r+0x46>
 800a24e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a252:	f022 0203 	bic.w	r2, r2, #3
 800a256:	3a04      	subs	r2, #4
 800a258:	2a24      	cmp	r2, #36	; 0x24
 800a25a:	d818      	bhi.n	800a28e <_calloc_r+0x4e>
 800a25c:	2a13      	cmp	r2, #19
 800a25e:	d914      	bls.n	800a28a <_calloc_r+0x4a>
 800a260:	2300      	movs	r3, #0
 800a262:	2a1b      	cmp	r2, #27
 800a264:	6003      	str	r3, [r0, #0]
 800a266:	6043      	str	r3, [r0, #4]
 800a268:	d916      	bls.n	800a298 <_calloc_r+0x58>
 800a26a:	2a24      	cmp	r2, #36	; 0x24
 800a26c:	6083      	str	r3, [r0, #8]
 800a26e:	60c3      	str	r3, [r0, #12]
 800a270:	bf11      	iteee	ne
 800a272:	f100 0210 	addne.w	r2, r0, #16
 800a276:	6103      	streq	r3, [r0, #16]
 800a278:	6143      	streq	r3, [r0, #20]
 800a27a:	f100 0218 	addeq.w	r2, r0, #24
 800a27e:	2300      	movs	r3, #0
 800a280:	6013      	str	r3, [r2, #0]
 800a282:	6053      	str	r3, [r2, #4]
 800a284:	6093      	str	r3, [r2, #8]
 800a286:	4620      	mov	r0, r4
 800a288:	bd10      	pop	{r4, pc}
 800a28a:	4602      	mov	r2, r0
 800a28c:	e7f7      	b.n	800a27e <_calloc_r+0x3e>
 800a28e:	2100      	movs	r1, #0
 800a290:	f7fa f83e 	bl	8004310 <memset>
 800a294:	4620      	mov	r0, r4
 800a296:	bd10      	pop	{r4, pc}
 800a298:	f100 0208 	add.w	r2, r0, #8
 800a29c:	e7ef      	b.n	800a27e <_calloc_r+0x3e>
 800a29e:	bf00      	nop

0800a2a0 <_close_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	4c07      	ldr	r4, [pc, #28]	; (800a2c0 <_close_r+0x20>)
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	4608      	mov	r0, r1
 800a2aa:	6023      	str	r3, [r4, #0]
 800a2ac:	f7f8 f92e 	bl	800250c <_close>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d000      	beq.n	800a2b6 <_close_r+0x16>
 800a2b4:	bd38      	pop	{r3, r4, r5, pc}
 800a2b6:	6823      	ldr	r3, [r4, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d0fb      	beq.n	800a2b4 <_close_r+0x14>
 800a2bc:	602b      	str	r3, [r5, #0]
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	20000ac8 	.word	0x20000ac8

0800a2c4 <_fclose_r>:
 800a2c4:	2900      	cmp	r1, #0
 800a2c6:	d03d      	beq.n	800a344 <_fclose_r+0x80>
 800a2c8:	b570      	push	{r4, r5, r6, lr}
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	460c      	mov	r4, r1
 800a2ce:	b108      	cbz	r0, 800a2d4 <_fclose_r+0x10>
 800a2d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a2d2:	b37b      	cbz	r3, 800a334 <_fclose_r+0x70>
 800a2d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2d8:	b90b      	cbnz	r3, 800a2de <_fclose_r+0x1a>
 800a2da:	2000      	movs	r0, #0
 800a2dc:	bd70      	pop	{r4, r5, r6, pc}
 800a2de:	4621      	mov	r1, r4
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	f7fe f92f 	bl	8008544 <__sflush_r>
 800a2e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a2e8:	4606      	mov	r6, r0
 800a2ea:	b133      	cbz	r3, 800a2fa <_fclose_r+0x36>
 800a2ec:	69e1      	ldr	r1, [r4, #28]
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	4798      	blx	r3
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	bfb8      	it	lt
 800a2f6:	f04f 36ff 	movlt.w	r6, #4294967295
 800a2fa:	89a3      	ldrh	r3, [r4, #12]
 800a2fc:	061b      	lsls	r3, r3, #24
 800a2fe:	d41c      	bmi.n	800a33a <_fclose_r+0x76>
 800a300:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a302:	b141      	cbz	r1, 800a316 <_fclose_r+0x52>
 800a304:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a308:	4299      	cmp	r1, r3
 800a30a:	d002      	beq.n	800a312 <_fclose_r+0x4e>
 800a30c:	4628      	mov	r0, r5
 800a30e:	f7fe faa9 	bl	8008864 <_free_r>
 800a312:	2300      	movs	r3, #0
 800a314:	6323      	str	r3, [r4, #48]	; 0x30
 800a316:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a318:	b121      	cbz	r1, 800a324 <_fclose_r+0x60>
 800a31a:	4628      	mov	r0, r5
 800a31c:	f7fe faa2 	bl	8008864 <_free_r>
 800a320:	2300      	movs	r3, #0
 800a322:	6463      	str	r3, [r4, #68]	; 0x44
 800a324:	f7fe fa4c 	bl	80087c0 <__sfp_lock_acquire>
 800a328:	2300      	movs	r3, #0
 800a32a:	81a3      	strh	r3, [r4, #12]
 800a32c:	f7fe fa4a 	bl	80087c4 <__sfp_lock_release>
 800a330:	4630      	mov	r0, r6
 800a332:	bd70      	pop	{r4, r5, r6, pc}
 800a334:	f7fe fa3e 	bl	80087b4 <__sinit>
 800a338:	e7cc      	b.n	800a2d4 <_fclose_r+0x10>
 800a33a:	6921      	ldr	r1, [r4, #16]
 800a33c:	4628      	mov	r0, r5
 800a33e:	f7fe fa91 	bl	8008864 <_free_r>
 800a342:	e7dd      	b.n	800a300 <_fclose_r+0x3c>
 800a344:	2000      	movs	r0, #0
 800a346:	4770      	bx	lr

0800a348 <__fputwc>:
 800a348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	4680      	mov	r8, r0
 800a350:	4689      	mov	r9, r1
 800a352:	4614      	mov	r4, r2
 800a354:	f7fe fd1a 	bl	8008d8c <__locale_mb_cur_max>
 800a358:	2801      	cmp	r0, #1
 800a35a:	d033      	beq.n	800a3c4 <__fputwc+0x7c>
 800a35c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800a360:	464a      	mov	r2, r9
 800a362:	a901      	add	r1, sp, #4
 800a364:	4640      	mov	r0, r8
 800a366:	f000 f8f7 	bl	800a558 <_wcrtomb_r>
 800a36a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a36e:	4682      	mov	sl, r0
 800a370:	d021      	beq.n	800a3b6 <__fputwc+0x6e>
 800a372:	b388      	cbz	r0, 800a3d8 <__fputwc+0x90>
 800a374:	f89d 6004 	ldrb.w	r6, [sp, #4]
 800a378:	2500      	movs	r5, #0
 800a37a:	e008      	b.n	800a38e <__fputwc+0x46>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	6022      	str	r2, [r4, #0]
 800a382:	701e      	strb	r6, [r3, #0]
 800a384:	3501      	adds	r5, #1
 800a386:	4555      	cmp	r5, sl
 800a388:	d226      	bcs.n	800a3d8 <__fputwc+0x90>
 800a38a:	ab01      	add	r3, sp, #4
 800a38c:	5d5e      	ldrb	r6, [r3, r5]
 800a38e:	68a3      	ldr	r3, [r4, #8]
 800a390:	3b01      	subs	r3, #1
 800a392:	2b00      	cmp	r3, #0
 800a394:	60a3      	str	r3, [r4, #8]
 800a396:	daf1      	bge.n	800a37c <__fputwc+0x34>
 800a398:	69a7      	ldr	r7, [r4, #24]
 800a39a:	42bb      	cmp	r3, r7
 800a39c:	4631      	mov	r1, r6
 800a39e:	4622      	mov	r2, r4
 800a3a0:	4640      	mov	r0, r8
 800a3a2:	db01      	blt.n	800a3a8 <__fputwc+0x60>
 800a3a4:	2e0a      	cmp	r6, #10
 800a3a6:	d1e9      	bne.n	800a37c <__fputwc+0x34>
 800a3a8:	f000 f880 	bl	800a4ac <__swbuf_r>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d1e9      	bne.n	800a384 <__fputwc+0x3c>
 800a3b0:	b002      	add	sp, #8
 800a3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3bc:	81a3      	strh	r3, [r4, #12]
 800a3be:	b002      	add	sp, #8
 800a3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c4:	f109 33ff 	add.w	r3, r9, #4294967295
 800a3c8:	2bfe      	cmp	r3, #254	; 0xfe
 800a3ca:	d8c7      	bhi.n	800a35c <__fputwc+0x14>
 800a3cc:	fa5f f689 	uxtb.w	r6, r9
 800a3d0:	4682      	mov	sl, r0
 800a3d2:	f88d 6004 	strb.w	r6, [sp, #4]
 800a3d6:	e7cf      	b.n	800a378 <__fputwc+0x30>
 800a3d8:	4648      	mov	r0, r9
 800a3da:	b002      	add	sp, #8
 800a3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a3e0 <_fputwc_r>:
 800a3e0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800a3e4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800a3e8:	d10b      	bne.n	800a402 <_fputwc_r+0x22>
 800a3ea:	b410      	push	{r4}
 800a3ec:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800a3ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a3f2:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800a3f6:	6654      	str	r4, [r2, #100]	; 0x64
 800a3f8:	8193      	strh	r3, [r2, #12]
 800a3fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3fe:	f7ff bfa3 	b.w	800a348 <__fputwc>
 800a402:	f7ff bfa1 	b.w	800a348 <__fputwc>
 800a406:	bf00      	nop

0800a408 <_fstat_r>:
 800a408:	b538      	push	{r3, r4, r5, lr}
 800a40a:	460b      	mov	r3, r1
 800a40c:	4c07      	ldr	r4, [pc, #28]	; (800a42c <_fstat_r+0x24>)
 800a40e:	4605      	mov	r5, r0
 800a410:	4611      	mov	r1, r2
 800a412:	4618      	mov	r0, r3
 800a414:	2300      	movs	r3, #0
 800a416:	6023      	str	r3, [r4, #0]
 800a418:	f7f8 f882 	bl	8002520 <_fstat>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	d000      	beq.n	800a422 <_fstat_r+0x1a>
 800a420:	bd38      	pop	{r3, r4, r5, pc}
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d0fb      	beq.n	800a420 <_fstat_r+0x18>
 800a428:	602b      	str	r3, [r5, #0]
 800a42a:	bd38      	pop	{r3, r4, r5, pc}
 800a42c:	20000ac8 	.word	0x20000ac8

0800a430 <_isatty_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	4c07      	ldr	r4, [pc, #28]	; (800a450 <_isatty_r+0x20>)
 800a434:	2300      	movs	r3, #0
 800a436:	4605      	mov	r5, r0
 800a438:	4608      	mov	r0, r1
 800a43a:	6023      	str	r3, [r4, #0]
 800a43c:	f7f8 f8c4 	bl	80025c8 <_isatty>
 800a440:	1c43      	adds	r3, r0, #1
 800a442:	d000      	beq.n	800a446 <_isatty_r+0x16>
 800a444:	bd38      	pop	{r3, r4, r5, pc}
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d0fb      	beq.n	800a444 <_isatty_r+0x14>
 800a44c:	602b      	str	r3, [r5, #0]
 800a44e:	bd38      	pop	{r3, r4, r5, pc}
 800a450:	20000ac8 	.word	0x20000ac8

0800a454 <_lseek_r>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	460d      	mov	r5, r1
 800a458:	4c08      	ldr	r4, [pc, #32]	; (800a47c <_lseek_r+0x28>)
 800a45a:	4611      	mov	r1, r2
 800a45c:	4606      	mov	r6, r0
 800a45e:	461a      	mov	r2, r3
 800a460:	4628      	mov	r0, r5
 800a462:	2300      	movs	r3, #0
 800a464:	6023      	str	r3, [r4, #0]
 800a466:	f7f8 f835 	bl	80024d4 <_lseek>
 800a46a:	1c43      	adds	r3, r0, #1
 800a46c:	d000      	beq.n	800a470 <_lseek_r+0x1c>
 800a46e:	bd70      	pop	{r4, r5, r6, pc}
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d0fb      	beq.n	800a46e <_lseek_r+0x1a>
 800a476:	6033      	str	r3, [r6, #0]
 800a478:	bd70      	pop	{r4, r5, r6, pc}
 800a47a:	bf00      	nop
 800a47c:	20000ac8 	.word	0x20000ac8

0800a480 <_read_r>:
 800a480:	b570      	push	{r4, r5, r6, lr}
 800a482:	460d      	mov	r5, r1
 800a484:	4c08      	ldr	r4, [pc, #32]	; (800a4a8 <_read_r+0x28>)
 800a486:	4611      	mov	r1, r2
 800a488:	4606      	mov	r6, r0
 800a48a:	461a      	mov	r2, r3
 800a48c:	4628      	mov	r0, r5
 800a48e:	2300      	movs	r3, #0
 800a490:	6023      	str	r3, [r4, #0]
 800a492:	f7f8 f82d 	bl	80024f0 <_read>
 800a496:	1c43      	adds	r3, r0, #1
 800a498:	d000      	beq.n	800a49c <_read_r+0x1c>
 800a49a:	bd70      	pop	{r4, r5, r6, pc}
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d0fb      	beq.n	800a49a <_read_r+0x1a>
 800a4a2:	6033      	str	r3, [r6, #0]
 800a4a4:	bd70      	pop	{r4, r5, r6, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20000ac8 	.word	0x20000ac8

0800a4ac <__swbuf_r>:
 800a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ae:	460d      	mov	r5, r1
 800a4b0:	4614      	mov	r4, r2
 800a4b2:	4606      	mov	r6, r0
 800a4b4:	b110      	cbz	r0, 800a4bc <__swbuf_r+0x10>
 800a4b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d04a      	beq.n	800a552 <__swbuf_r+0xa6>
 800a4bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4c0:	69a3      	ldr	r3, [r4, #24]
 800a4c2:	60a3      	str	r3, [r4, #8]
 800a4c4:	b291      	uxth	r1, r2
 800a4c6:	0708      	lsls	r0, r1, #28
 800a4c8:	d538      	bpl.n	800a53c <__swbuf_r+0x90>
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d035      	beq.n	800a53c <__swbuf_r+0x90>
 800a4d0:	0489      	lsls	r1, r1, #18
 800a4d2:	b2ef      	uxtb	r7, r5
 800a4d4:	d515      	bpl.n	800a502 <__swbuf_r+0x56>
 800a4d6:	6822      	ldr	r2, [r4, #0]
 800a4d8:	6961      	ldr	r1, [r4, #20]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	428b      	cmp	r3, r1
 800a4de:	da1c      	bge.n	800a51a <__swbuf_r+0x6e>
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	68a1      	ldr	r1, [r4, #8]
 800a4e4:	1c50      	adds	r0, r2, #1
 800a4e6:	3901      	subs	r1, #1
 800a4e8:	60a1      	str	r1, [r4, #8]
 800a4ea:	6020      	str	r0, [r4, #0]
 800a4ec:	7015      	strb	r5, [r2, #0]
 800a4ee:	6962      	ldr	r2, [r4, #20]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d01a      	beq.n	800a52a <__swbuf_r+0x7e>
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	07db      	lsls	r3, r3, #31
 800a4f8:	d501      	bpl.n	800a4fe <__swbuf_r+0x52>
 800a4fa:	2f0a      	cmp	r7, #10
 800a4fc:	d015      	beq.n	800a52a <__swbuf_r+0x7e>
 800a4fe:	4638      	mov	r0, r7
 800a500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a502:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a508:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800a50c:	81a2      	strh	r2, [r4, #12]
 800a50e:	6822      	ldr	r2, [r4, #0]
 800a510:	6661      	str	r1, [r4, #100]	; 0x64
 800a512:	6961      	ldr	r1, [r4, #20]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	428b      	cmp	r3, r1
 800a518:	dbe2      	blt.n	800a4e0 <__swbuf_r+0x34>
 800a51a:	4621      	mov	r1, r4
 800a51c:	4630      	mov	r0, r6
 800a51e:	f7fe f8b5 	bl	800868c <_fflush_r>
 800a522:	b940      	cbnz	r0, 800a536 <__swbuf_r+0x8a>
 800a524:	6822      	ldr	r2, [r4, #0]
 800a526:	2301      	movs	r3, #1
 800a528:	e7db      	b.n	800a4e2 <__swbuf_r+0x36>
 800a52a:	4621      	mov	r1, r4
 800a52c:	4630      	mov	r0, r6
 800a52e:	f7fe f8ad 	bl	800868c <_fflush_r>
 800a532:	2800      	cmp	r0, #0
 800a534:	d0e3      	beq.n	800a4fe <__swbuf_r+0x52>
 800a536:	f04f 37ff 	mov.w	r7, #4294967295
 800a53a:	e7e0      	b.n	800a4fe <__swbuf_r+0x52>
 800a53c:	4621      	mov	r1, r4
 800a53e:	4630      	mov	r0, r6
 800a540:	f7fc fff2 	bl	8007528 <__swsetup_r>
 800a544:	2800      	cmp	r0, #0
 800a546:	d1f6      	bne.n	800a536 <__swbuf_r+0x8a>
 800a548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a54c:	6923      	ldr	r3, [r4, #16]
 800a54e:	b291      	uxth	r1, r2
 800a550:	e7be      	b.n	800a4d0 <__swbuf_r+0x24>
 800a552:	f7fe f92f 	bl	80087b4 <__sinit>
 800a556:	e7b1      	b.n	800a4bc <__swbuf_r+0x10>

0800a558 <_wcrtomb_r>:
 800a558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a55a:	4606      	mov	r6, r0
 800a55c:	b085      	sub	sp, #20
 800a55e:	461f      	mov	r7, r3
 800a560:	b189      	cbz	r1, 800a586 <_wcrtomb_r+0x2e>
 800a562:	4c10      	ldr	r4, [pc, #64]	; (800a5a4 <_wcrtomb_r+0x4c>)
 800a564:	4d10      	ldr	r5, [pc, #64]	; (800a5a8 <_wcrtomb_r+0x50>)
 800a566:	6824      	ldr	r4, [r4, #0]
 800a568:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800a56a:	2c00      	cmp	r4, #0
 800a56c:	bf08      	it	eq
 800a56e:	462c      	moveq	r4, r5
 800a570:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800a574:	47a0      	blx	r4
 800a576:	1c43      	adds	r3, r0, #1
 800a578:	d103      	bne.n	800a582 <_wcrtomb_r+0x2a>
 800a57a:	2200      	movs	r2, #0
 800a57c:	238a      	movs	r3, #138	; 0x8a
 800a57e:	603a      	str	r2, [r7, #0]
 800a580:	6033      	str	r3, [r6, #0]
 800a582:	b005      	add	sp, #20
 800a584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a586:	460c      	mov	r4, r1
 800a588:	4906      	ldr	r1, [pc, #24]	; (800a5a4 <_wcrtomb_r+0x4c>)
 800a58a:	4a07      	ldr	r2, [pc, #28]	; (800a5a8 <_wcrtomb_r+0x50>)
 800a58c:	6809      	ldr	r1, [r1, #0]
 800a58e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a590:	2900      	cmp	r1, #0
 800a592:	bf08      	it	eq
 800a594:	4611      	moveq	r1, r2
 800a596:	4622      	mov	r2, r4
 800a598:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 800a59c:	a901      	add	r1, sp, #4
 800a59e:	47a0      	blx	r4
 800a5a0:	e7e9      	b.n	800a576 <_wcrtomb_r+0x1e>
 800a5a2:	bf00      	nop
 800a5a4:	20000468 	.word	0x20000468
 800a5a8:	2000046c 	.word	0x2000046c

0800a5ac <__aeabi_uldivmod>:
 800a5ac:	b953      	cbnz	r3, 800a5c4 <__aeabi_uldivmod+0x18>
 800a5ae:	b94a      	cbnz	r2, 800a5c4 <__aeabi_uldivmod+0x18>
 800a5b0:	2900      	cmp	r1, #0
 800a5b2:	bf08      	it	eq
 800a5b4:	2800      	cmpeq	r0, #0
 800a5b6:	bf1c      	itt	ne
 800a5b8:	f04f 31ff 	movne.w	r1, #4294967295
 800a5bc:	f04f 30ff 	movne.w	r0, #4294967295
 800a5c0:	f000 b97e 	b.w	800a8c0 <__aeabi_idiv0>
 800a5c4:	f1ad 0c08 	sub.w	ip, sp, #8
 800a5c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800a5cc:	f000 f806 	bl	800a5dc <__udivmoddi4>
 800a5d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a5d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5d8:	b004      	add	sp, #16
 800a5da:	4770      	bx	lr

0800a5dc <__udivmoddi4>:
 800a5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e0:	468c      	mov	ip, r1
 800a5e2:	460e      	mov	r6, r1
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	9d08      	ldr	r5, [sp, #32]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d150      	bne.n	800a68e <__udivmoddi4+0xb2>
 800a5ec:	428a      	cmp	r2, r1
 800a5ee:	4617      	mov	r7, r2
 800a5f0:	d96c      	bls.n	800a6cc <__udivmoddi4+0xf0>
 800a5f2:	fab2 fe82 	clz	lr, r2
 800a5f6:	f1be 0f00 	cmp.w	lr, #0
 800a5fa:	d00b      	beq.n	800a614 <__udivmoddi4+0x38>
 800a5fc:	f1ce 0420 	rsb	r4, lr, #32
 800a600:	fa20 f404 	lsr.w	r4, r0, r4
 800a604:	fa01 f60e 	lsl.w	r6, r1, lr
 800a608:	ea44 0c06 	orr.w	ip, r4, r6
 800a60c:	fa02 f70e 	lsl.w	r7, r2, lr
 800a610:	fa00 f40e 	lsl.w	r4, r0, lr
 800a614:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800a618:	0c22      	lsrs	r2, r4, #16
 800a61a:	fbbc f0f9 	udiv	r0, ip, r9
 800a61e:	fa1f f887 	uxth.w	r8, r7
 800a622:	fb09 c610 	mls	r6, r9, r0, ip
 800a626:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a62a:	fb00 f308 	mul.w	r3, r0, r8
 800a62e:	42b3      	cmp	r3, r6
 800a630:	d909      	bls.n	800a646 <__udivmoddi4+0x6a>
 800a632:	19f6      	adds	r6, r6, r7
 800a634:	f100 32ff 	add.w	r2, r0, #4294967295
 800a638:	f080 8122 	bcs.w	800a880 <__udivmoddi4+0x2a4>
 800a63c:	42b3      	cmp	r3, r6
 800a63e:	f240 811f 	bls.w	800a880 <__udivmoddi4+0x2a4>
 800a642:	3802      	subs	r0, #2
 800a644:	443e      	add	r6, r7
 800a646:	1af6      	subs	r6, r6, r3
 800a648:	b2a2      	uxth	r2, r4
 800a64a:	fbb6 f3f9 	udiv	r3, r6, r9
 800a64e:	fb09 6613 	mls	r6, r9, r3, r6
 800a652:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800a656:	fb03 f808 	mul.w	r8, r3, r8
 800a65a:	45a0      	cmp	r8, r4
 800a65c:	d909      	bls.n	800a672 <__udivmoddi4+0x96>
 800a65e:	19e4      	adds	r4, r4, r7
 800a660:	f103 32ff 	add.w	r2, r3, #4294967295
 800a664:	f080 810a 	bcs.w	800a87c <__udivmoddi4+0x2a0>
 800a668:	45a0      	cmp	r8, r4
 800a66a:	f240 8107 	bls.w	800a87c <__udivmoddi4+0x2a0>
 800a66e:	3b02      	subs	r3, #2
 800a670:	443c      	add	r4, r7
 800a672:	ebc8 0404 	rsb	r4, r8, r4
 800a676:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a67a:	2100      	movs	r1, #0
 800a67c:	2d00      	cmp	r5, #0
 800a67e:	d062      	beq.n	800a746 <__udivmoddi4+0x16a>
 800a680:	fa24 f40e 	lsr.w	r4, r4, lr
 800a684:	2300      	movs	r3, #0
 800a686:	602c      	str	r4, [r5, #0]
 800a688:	606b      	str	r3, [r5, #4]
 800a68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a68e:	428b      	cmp	r3, r1
 800a690:	d907      	bls.n	800a6a2 <__udivmoddi4+0xc6>
 800a692:	2d00      	cmp	r5, #0
 800a694:	d055      	beq.n	800a742 <__udivmoddi4+0x166>
 800a696:	2100      	movs	r1, #0
 800a698:	e885 0041 	stmia.w	r5, {r0, r6}
 800a69c:	4608      	mov	r0, r1
 800a69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a2:	fab3 f183 	clz	r1, r3
 800a6a6:	2900      	cmp	r1, #0
 800a6a8:	f040 8090 	bne.w	800a7cc <__udivmoddi4+0x1f0>
 800a6ac:	42b3      	cmp	r3, r6
 800a6ae:	d302      	bcc.n	800a6b6 <__udivmoddi4+0xda>
 800a6b0:	4282      	cmp	r2, r0
 800a6b2:	f200 80f8 	bhi.w	800a8a6 <__udivmoddi4+0x2ca>
 800a6b6:	1a84      	subs	r4, r0, r2
 800a6b8:	eb66 0603 	sbc.w	r6, r6, r3
 800a6bc:	2001      	movs	r0, #1
 800a6be:	46b4      	mov	ip, r6
 800a6c0:	2d00      	cmp	r5, #0
 800a6c2:	d040      	beq.n	800a746 <__udivmoddi4+0x16a>
 800a6c4:	e885 1010 	stmia.w	r5, {r4, ip}
 800a6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6cc:	b912      	cbnz	r2, 800a6d4 <__udivmoddi4+0xf8>
 800a6ce:	2701      	movs	r7, #1
 800a6d0:	fbb7 f7f2 	udiv	r7, r7, r2
 800a6d4:	fab7 fe87 	clz	lr, r7
 800a6d8:	f1be 0f00 	cmp.w	lr, #0
 800a6dc:	d135      	bne.n	800a74a <__udivmoddi4+0x16e>
 800a6de:	1bf3      	subs	r3, r6, r7
 800a6e0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800a6e4:	fa1f fc87 	uxth.w	ip, r7
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	fbb3 f0f8 	udiv	r0, r3, r8
 800a6ee:	0c22      	lsrs	r2, r4, #16
 800a6f0:	fb08 3610 	mls	r6, r8, r0, r3
 800a6f4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a6f8:	fb0c f300 	mul.w	r3, ip, r0
 800a6fc:	42b3      	cmp	r3, r6
 800a6fe:	d907      	bls.n	800a710 <__udivmoddi4+0x134>
 800a700:	19f6      	adds	r6, r6, r7
 800a702:	f100 32ff 	add.w	r2, r0, #4294967295
 800a706:	d202      	bcs.n	800a70e <__udivmoddi4+0x132>
 800a708:	42b3      	cmp	r3, r6
 800a70a:	f200 80ce 	bhi.w	800a8aa <__udivmoddi4+0x2ce>
 800a70e:	4610      	mov	r0, r2
 800a710:	1af6      	subs	r6, r6, r3
 800a712:	b2a2      	uxth	r2, r4
 800a714:	fbb6 f3f8 	udiv	r3, r6, r8
 800a718:	fb08 6613 	mls	r6, r8, r3, r6
 800a71c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800a720:	fb0c fc03 	mul.w	ip, ip, r3
 800a724:	45a4      	cmp	ip, r4
 800a726:	d907      	bls.n	800a738 <__udivmoddi4+0x15c>
 800a728:	19e4      	adds	r4, r4, r7
 800a72a:	f103 32ff 	add.w	r2, r3, #4294967295
 800a72e:	d202      	bcs.n	800a736 <__udivmoddi4+0x15a>
 800a730:	45a4      	cmp	ip, r4
 800a732:	f200 80b5 	bhi.w	800a8a0 <__udivmoddi4+0x2c4>
 800a736:	4613      	mov	r3, r2
 800a738:	ebcc 0404 	rsb	r4, ip, r4
 800a73c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a740:	e79c      	b.n	800a67c <__udivmoddi4+0xa0>
 800a742:	4629      	mov	r1, r5
 800a744:	4628      	mov	r0, r5
 800a746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a74a:	f1ce 0120 	rsb	r1, lr, #32
 800a74e:	fa06 f30e 	lsl.w	r3, r6, lr
 800a752:	fa07 f70e 	lsl.w	r7, r7, lr
 800a756:	fa20 f901 	lsr.w	r9, r0, r1
 800a75a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800a75e:	40ce      	lsrs	r6, r1
 800a760:	ea49 0903 	orr.w	r9, r9, r3
 800a764:	fbb6 faf8 	udiv	sl, r6, r8
 800a768:	ea4f 4419 	mov.w	r4, r9, lsr #16
 800a76c:	fb08 661a 	mls	r6, r8, sl, r6
 800a770:	fa1f fc87 	uxth.w	ip, r7
 800a774:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800a778:	fb0a f20c 	mul.w	r2, sl, ip
 800a77c:	429a      	cmp	r2, r3
 800a77e:	fa00 f40e 	lsl.w	r4, r0, lr
 800a782:	d90a      	bls.n	800a79a <__udivmoddi4+0x1be>
 800a784:	19db      	adds	r3, r3, r7
 800a786:	f10a 31ff 	add.w	r1, sl, #4294967295
 800a78a:	f080 8087 	bcs.w	800a89c <__udivmoddi4+0x2c0>
 800a78e:	429a      	cmp	r2, r3
 800a790:	f240 8084 	bls.w	800a89c <__udivmoddi4+0x2c0>
 800a794:	f1aa 0a02 	sub.w	sl, sl, #2
 800a798:	443b      	add	r3, r7
 800a79a:	1a9b      	subs	r3, r3, r2
 800a79c:	fa1f f989 	uxth.w	r9, r9
 800a7a0:	fbb3 f1f8 	udiv	r1, r3, r8
 800a7a4:	fb08 3311 	mls	r3, r8, r1, r3
 800a7a8:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800a7ac:	fb01 f60c 	mul.w	r6, r1, ip
 800a7b0:	429e      	cmp	r6, r3
 800a7b2:	d907      	bls.n	800a7c4 <__udivmoddi4+0x1e8>
 800a7b4:	19db      	adds	r3, r3, r7
 800a7b6:	f101 32ff 	add.w	r2, r1, #4294967295
 800a7ba:	d26b      	bcs.n	800a894 <__udivmoddi4+0x2b8>
 800a7bc:	429e      	cmp	r6, r3
 800a7be:	d969      	bls.n	800a894 <__udivmoddi4+0x2b8>
 800a7c0:	3902      	subs	r1, #2
 800a7c2:	443b      	add	r3, r7
 800a7c4:	1b9b      	subs	r3, r3, r6
 800a7c6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a7ca:	e78e      	b.n	800a6ea <__udivmoddi4+0x10e>
 800a7cc:	f1c1 0e20 	rsb	lr, r1, #32
 800a7d0:	fa22 f40e 	lsr.w	r4, r2, lr
 800a7d4:	408b      	lsls	r3, r1
 800a7d6:	4323      	orrs	r3, r4
 800a7d8:	fa20 f70e 	lsr.w	r7, r0, lr
 800a7dc:	fa06 f401 	lsl.w	r4, r6, r1
 800a7e0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800a7e4:	fa26 f60e 	lsr.w	r6, r6, lr
 800a7e8:	433c      	orrs	r4, r7
 800a7ea:	fbb6 f9fc 	udiv	r9, r6, ip
 800a7ee:	0c27      	lsrs	r7, r4, #16
 800a7f0:	fb0c 6619 	mls	r6, ip, r9, r6
 800a7f4:	fa1f f883 	uxth.w	r8, r3
 800a7f8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800a7fc:	fb09 f708 	mul.w	r7, r9, r8
 800a800:	42b7      	cmp	r7, r6
 800a802:	fa02 f201 	lsl.w	r2, r2, r1
 800a806:	fa00 fa01 	lsl.w	sl, r0, r1
 800a80a:	d908      	bls.n	800a81e <__udivmoddi4+0x242>
 800a80c:	18f6      	adds	r6, r6, r3
 800a80e:	f109 30ff 	add.w	r0, r9, #4294967295
 800a812:	d241      	bcs.n	800a898 <__udivmoddi4+0x2bc>
 800a814:	42b7      	cmp	r7, r6
 800a816:	d93f      	bls.n	800a898 <__udivmoddi4+0x2bc>
 800a818:	f1a9 0902 	sub.w	r9, r9, #2
 800a81c:	441e      	add	r6, r3
 800a81e:	1bf6      	subs	r6, r6, r7
 800a820:	b2a0      	uxth	r0, r4
 800a822:	fbb6 f4fc 	udiv	r4, r6, ip
 800a826:	fb0c 6614 	mls	r6, ip, r4, r6
 800a82a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 800a82e:	fb04 f808 	mul.w	r8, r4, r8
 800a832:	45b8      	cmp	r8, r7
 800a834:	d907      	bls.n	800a846 <__udivmoddi4+0x26a>
 800a836:	18ff      	adds	r7, r7, r3
 800a838:	f104 30ff 	add.w	r0, r4, #4294967295
 800a83c:	d228      	bcs.n	800a890 <__udivmoddi4+0x2b4>
 800a83e:	45b8      	cmp	r8, r7
 800a840:	d926      	bls.n	800a890 <__udivmoddi4+0x2b4>
 800a842:	3c02      	subs	r4, #2
 800a844:	441f      	add	r7, r3
 800a846:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800a84a:	ebc8 0707 	rsb	r7, r8, r7
 800a84e:	fba0 8902 	umull	r8, r9, r0, r2
 800a852:	454f      	cmp	r7, r9
 800a854:	4644      	mov	r4, r8
 800a856:	464e      	mov	r6, r9
 800a858:	d314      	bcc.n	800a884 <__udivmoddi4+0x2a8>
 800a85a:	d029      	beq.n	800a8b0 <__udivmoddi4+0x2d4>
 800a85c:	b365      	cbz	r5, 800a8b8 <__udivmoddi4+0x2dc>
 800a85e:	ebba 0304 	subs.w	r3, sl, r4
 800a862:	eb67 0706 	sbc.w	r7, r7, r6
 800a866:	fa07 fe0e 	lsl.w	lr, r7, lr
 800a86a:	40cb      	lsrs	r3, r1
 800a86c:	40cf      	lsrs	r7, r1
 800a86e:	ea4e 0303 	orr.w	r3, lr, r3
 800a872:	e885 0088 	stmia.w	r5, {r3, r7}
 800a876:	2100      	movs	r1, #0
 800a878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a87c:	4613      	mov	r3, r2
 800a87e:	e6f8      	b.n	800a672 <__udivmoddi4+0x96>
 800a880:	4610      	mov	r0, r2
 800a882:	e6e0      	b.n	800a646 <__udivmoddi4+0x6a>
 800a884:	ebb8 0402 	subs.w	r4, r8, r2
 800a888:	eb69 0603 	sbc.w	r6, r9, r3
 800a88c:	3801      	subs	r0, #1
 800a88e:	e7e5      	b.n	800a85c <__udivmoddi4+0x280>
 800a890:	4604      	mov	r4, r0
 800a892:	e7d8      	b.n	800a846 <__udivmoddi4+0x26a>
 800a894:	4611      	mov	r1, r2
 800a896:	e795      	b.n	800a7c4 <__udivmoddi4+0x1e8>
 800a898:	4681      	mov	r9, r0
 800a89a:	e7c0      	b.n	800a81e <__udivmoddi4+0x242>
 800a89c:	468a      	mov	sl, r1
 800a89e:	e77c      	b.n	800a79a <__udivmoddi4+0x1be>
 800a8a0:	3b02      	subs	r3, #2
 800a8a2:	443c      	add	r4, r7
 800a8a4:	e748      	b.n	800a738 <__udivmoddi4+0x15c>
 800a8a6:	4608      	mov	r0, r1
 800a8a8:	e70a      	b.n	800a6c0 <__udivmoddi4+0xe4>
 800a8aa:	3802      	subs	r0, #2
 800a8ac:	443e      	add	r6, r7
 800a8ae:	e72f      	b.n	800a710 <__udivmoddi4+0x134>
 800a8b0:	45c2      	cmp	sl, r8
 800a8b2:	d3e7      	bcc.n	800a884 <__udivmoddi4+0x2a8>
 800a8b4:	463e      	mov	r6, r7
 800a8b6:	e7d1      	b.n	800a85c <__udivmoddi4+0x280>
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8be:	bf00      	nop

0800a8c0 <__aeabi_idiv0>:
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	41545323 	.word	0x41545323
 800a8c8:	3031252c 	.word	0x3031252c
 800a8cc:	252c756c 	.word	0x252c756c
 800a8d0:	0a246433 	.word	0x0a246433
 800a8d4:	00000000 	.word	0x00000000
 800a8d8:	00007325 	.word	0x00007325
 800a8dc:	54554223 	.word	0x54554223
 800a8e0:	0a24312c 	.word	0x0a24312c
 800a8e4:	00000000 	.word	0x00000000
 800a8e8:	54554223 	.word	0x54554223
 800a8ec:	0a24322c 	.word	0x0a24322c
 800a8f0:	00000000 	.word	0x00000000
 800a8f4:	37257325 	.word	0x37257325
 800a8f8:	25732564 	.word	0x25732564
 800a8fc:	73256437 	.word	0x73256437
 800a900:	25643725 	.word	0x25643725
 800a904:	32302573 	.word	0x32302573
 800a908:	000a2464 	.word	0x000a2464
 800a90c:	0000002c 	.word	0x0000002c
 800a910:	58535523 	.word	0x58535523
 800a914:	5523002c 	.word	0x5523002c
 800a918:	002c5844 	.word	0x002c5844
 800a91c:	58534423 	.word	0x58534423
 800a920:	4423002c 	.word	0x4423002c
 800a924:	002c5844 	.word	0x002c5844
 800a928:	504f5423 	.word	0x504f5423
 800a92c:	4223002c 	.word	0x4223002c
 800a930:	002c544f 	.word	0x002c544f
 800a934:	58585823 	.word	0x58585823
 800a938:	4623002c 	.word	0x4623002c
 800a93c:	002c4c41 	.word	0x002c4c41
 800a940:	74747562 	.word	0x74747562
 800a944:	31206e6f 	.word	0x31206e6f
 800a948:	00000000 	.word	0x00000000
 800a94c:	74747562 	.word	0x74747562
 800a950:	32206e6f 	.word	0x32206e6f
 800a954:	00000000 	.word	0x00000000
 800a958:	3353494c 	.word	0x3353494c
 800a95c:	535f4844 	.word	0x535f4844
 800a960:	444f7465 	.word	0x444f7465
 800a964:	6f642052 	.word	0x6f642052
 800a968:	2e2e656e 	.word	0x2e2e656e
 800a96c:	0000002e 	.word	0x0000002e
 800a970:	3353494c 	.word	0x3353494c
 800a974:	535f4844 	.word	0x535f4844
 800a978:	6f4d7465 	.word	0x6f4d7465
 800a97c:	64206564 	.word	0x64206564
 800a980:	2e656e6f 	.word	0x2e656e6f
 800a984:	00002e2e 	.word	0x00002e2e
 800a988:	3353494c 	.word	0x3353494c
 800a98c:	535f4844 	.word	0x535f4844
 800a990:	75467465 	.word	0x75467465
 800a994:	63536c6c 	.word	0x63536c6c
 800a998:	20656c61 	.word	0x20656c61
 800a99c:	656e6f64 	.word	0x656e6f64
 800a9a0:	002e2e2e 	.word	0x002e2e2e
 800a9a4:	3353494c 	.word	0x3353494c
 800a9a8:	535f4844 	.word	0x535f4844
 800a9ac:	78417465 	.word	0x78417465
 800a9b0:	64207369 	.word	0x64207369
 800a9b4:	2e656e6f 	.word	0x2e656e6f
 800a9b8:	00002e2e 	.word	0x00002e2e
 800a9bc:	3353494c 	.word	0x3353494c
 800a9c0:	535f4844 	.word	0x535f4844
 800a9c4:	6e497465 	.word	0x6e497465
 800a9c8:	68543174 	.word	0x68543174
 800a9cc:	68737265 	.word	0x68737265
 800a9d0:	20646c6f 	.word	0x20646c6f
 800a9d4:	656e6f64 	.word	0x656e6f64
 800a9d8:	002e2e2e 	.word	0x002e2e2e
 800a9dc:	3353494c 	.word	0x3353494c
 800a9e0:	535f4844 	.word	0x535f4844
 800a9e4:	6e497465 	.word	0x6e497465
 800a9e8:	6e6f4374 	.word	0x6e6f4374
 800a9ec:	75676966 	.word	0x75676966
 800a9f0:	69746172 	.word	0x69746172
 800a9f4:	64206e6f 	.word	0x64206e6f
 800a9f8:	2e656e6f 	.word	0x2e656e6f
 800a9fc:	00002e2e 	.word	0x00002e2e
 800aa00:	3353494c 	.word	0x3353494c
 800aa04:	535f4844 	.word	0x535f4844
 800aa08:	6e497465 	.word	0x6e497465
 800aa0c:	646f4d74 	.word	0x646f4d74
 800aa10:	6f642065 	.word	0x6f642065
 800aa14:	2e2e656e 	.word	0x2e2e656e
 800aa18:	0000002e 	.word	0x0000002e
 800aa1c:	3353494c 	.word	0x3353494c
 800aa20:	535f4844 	.word	0x535f4844
 800aa24:	44417465 	.word	0x44417465
 800aa28:	78754143 	.word	0x78754143
 800aa2c:	6e6f6420 	.word	0x6e6f6420
 800aa30:	2e2e2e65 	.word	0x2e2e2e65
 800aa34:	00000000 	.word	0x00000000
 800aa38:	3353494c 	.word	0x3353494c
 800aa3c:	535f4844 	.word	0x535f4844
 800aa40:	44427465 	.word	0x44427465
 800aa44:	6f642055 	.word	0x6f642055
 800aa48:	2e2e656e 	.word	0x2e2e656e
 800aa4c:	0000002e 	.word	0x0000002e
 800aa50:	3353494c 	.word	0x3353494c
 800aa54:	535f4844 	.word	0x535f4844
 800aa58:	65547465 	.word	0x65547465
 800aa5c:	7265706d 	.word	0x7265706d
 800aa60:	72757461 	.word	0x72757461
 800aa64:	6f642065 	.word	0x6f642065
 800aa68:	2e2e656e 	.word	0x2e2e656e
 800aa6c:	0000002e 	.word	0x0000002e
 800aa70:	55424544 	.word	0x55424544
 800aa74:	32492b47 	.word	0x32492b47
 800aa78:	41552b43 	.word	0x41552b43
 800aa7c:	69205452 	.word	0x69205452
 800aa80:	2074696e 	.word	0x2074696e
 800aa84:	656e6f64 	.word	0x656e6f64
 800aa88:	002e2e2e 	.word	0x002e2e2e
 800aa8c:	534d454d 	.word	0x534d454d
 800aa90:	696e6920 	.word	0x696e6920
 800aa94:	6f642074 	.word	0x6f642074
 800aa98:	2e2e656e 	.word	0x2e2e656e
 800aa9c:	0000002e 	.word	0x0000002e
 800aaa0:	6f727245 	.word	0x6f727245
 800aaa4:	454d2072 	.word	0x454d2072
 800aaa8:	6920534d 	.word	0x6920534d
 800aaac:	2c74696e 	.word	0x2c74696e
 800aab0:	74657220 	.word	0x74657220
 800aab4:	2e2e7972 	.word	0x2e2e7972
 800aab8:	0000002e 	.word	0x0000002e
 800aabc:	534d454d 	.word	0x534d454d
 800aac0:	6e6f6320 	.word	0x6e6f6320
 800aac4:	20676966 	.word	0x20676966
 800aac8:	656e6f64 	.word	0x656e6f64
 800aacc:	002e2e2e 	.word	0x002e2e2e
 800aad0:	6f727245 	.word	0x6f727245
 800aad4:	454d2072 	.word	0x454d2072
 800aad8:	6320534d 	.word	0x6320534d
 800aadc:	69666e6f 	.word	0x69666e6f
 800aae0:	72202c67 	.word	0x72202c67
 800aae4:	79727465 	.word	0x79727465
 800aae8:	002e2e2e 	.word	0x002e2e2e
 800aaec:	65636572 	.word	0x65636572
 800aaf0:	64657669 	.word	0x64657669
 800aaf4:	0a732520 	.word	0x0a732520
 800aaf8:	00000000 	.word	0x00000000
 800aafc:	51455223 	.word	0x51455223
 800ab00:	0000002c 	.word	0x0000002c
 800ab04:	444e4523 	.word	0x444e4523
 800ab08:	0000002c 	.word	0x0000002c
 800ab0c:	4e4f4323 	.word	0x4e4f4323
 800ab10:	0000002c 	.word	0x0000002c
 800ab14:	52455323 	.word	0x52455323
 800ab18:	0000662c 	.word	0x0000662c
 800ab1c:	52455323 	.word	0x52455323
 800ab20:	00006e2c 	.word	0x00006e2c
 800ab24:	41545323 	.word	0x41545323
 800ab28:	0000002c 	.word	0x0000002c
 800ab2c:	00000000 	.word	0x00000000

0800ab30 <atanlo>:
 800ab30:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 800ab40:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0800ab50 <atanhi>:
 800ab50:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 800ab60:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
 800ab70:	74727173 00000000 0000000a              sqrt........

0800ab7c <zeroes.7258>:
 800ab7c:	30303030 30303030 30303030 30303030     0000000000000000
 800ab8c:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800ab9c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800abac:	00000000 33323130 37363534 62613938     ....0123456789ab
 800abbc:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800abcc:	00000030                                0...

0800abd0 <blanks.7257>:
 800abd0:	20202020 20202020 20202020 20202020                     

0800abe0 <zeroes.7273>:
 800abe0:	30303030 30303030 30303030 30303030     0000000000000000

0800abf0 <blanks.7272>:
 800abf0:	20202020 20202020 20202020 20202020                     
 800ac00:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800ac10:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0800ac20 <__mprec_tens>:
 800ac20:	00000000 3ff00000 00000000 40240000     .......?......$@
 800ac30:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800ac40:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800ac50:	00000000 412e8480 00000000 416312d0     .......A......cA
 800ac60:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800ac70:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800ac80:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800ac90:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800aca0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800acb0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800acc0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800acd0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800ace0:	79d99db4 44ea7843                       ...yCx.D

0800ace8 <__mprec_bigtens>:
 800ace8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800acf8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800ad08:	7f73bf3c 75154fdd                       <.s..O.u

0800ad10 <p05.6087>:
 800ad10:	00000005 00000019 0000007d              ........}...

0800ad1c <_ctype_>:
 800ad1c:	20202000 20202020 28282020 20282828     .         ((((( 
 800ad2c:	20202020 20202020 20202020 20202020                     
 800ad3c:	10108820 10101010 10101010 10101010      ...............
 800ad4c:	04040410 04040404 10040404 10101010     ................
 800ad5c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800ad6c:	01010101 01010101 01010101 10101010     ................
 800ad7c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800ad8c:	02020202 02020202 02020202 10101010     ................
 800ad9c:	00000020 00000000 00000000 00000000      ...............
	...
