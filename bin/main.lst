
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	a9 07 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 e1 04 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00aff8 	.word	0x0c00aff8
 800024c:	20000000 	.word	0x20000000
 8000250:	000009e8 	.word	0x000009e8
 8000254:	0c00b9e0 	.word	0x0c00b9e0
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00aff8 	.word	0x0c00aff8
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00aff8 	.word	0x0c00aff8
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200009e8 	.word	0x200009e8
 800027c:	00000108 	.word	0x00000108
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000294:	08002729 	.word	0x08002729
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	080042ad 	.word	0x080042ad
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	080022bd 	.word	0x080022bd

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	db0b      	blt.n	80002de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c6:	4909      	ldr	r1, [pc, #36]	; (80002ec <__NVIC_EnableIRQ+0x38>)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	095b      	lsrs	r3, r3, #5
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	f002 021f 	and.w	r2, r2, #31
 80002d4:	2001      	movs	r0, #1
 80002d6:	fa00 f202 	lsl.w	r2, r0, r2
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	490d      	ldr	r1, [pc, #52]	; (800033c <__NVIC_SetPriority+0x4c>)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	0092      	lsls	r2, r2, #2
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	4909      	ldr	r1, [pc, #36]	; (8000340 <__NVIC_SetPriority+0x50>)
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f003 030f 	and.w	r3, r3, #15
 8000322:	3b04      	subs	r3, #4
 8000324:	683a      	ldr	r2, [r7, #0]
 8000326:	b2d2      	uxtb	r2, r2
 8000328:	0092      	lsls	r2, r2, #2
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
  }
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
 8000350:	4613      	mov	r3, r2
 8000352:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000354:	78f8      	ldrb	r0, [r7, #3]
 8000356:	78fb      	ldrb	r3, [r7, #3]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	3306      	adds	r3, #6
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	4413      	add	r3, r2
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000366:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000368:	431a      	orrs	r2, r3
 800036a:	6879      	ldr	r1, [r7, #4]
 800036c:	1d83      	adds	r3, r0, #6
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	440b      	add	r3, r1
 8000372:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800038c:	b2db      	uxtb	r3, r3
 800038e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000392:	b2db      	uxtb	r3, r3
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	431a      	orrs	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop

080003c8 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80003d6:	f003 0308 	and.w	r3, r3, #8
 80003da:	2b00      	cmp	r3, #0
 80003dc:	bf14      	ite	ne
 80003de:	2301      	movne	r3, #1
 80003e0:	2300      	moveq	r3, #0
 80003e2:	b2db      	uxtb	r3, r3
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003fc:	f023 030f 	bic.w	r3, r3, #15
 8000400:	f043 0202 	orr.w	r2, r3, #2
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	460b      	mov	r3, r1
 800041e:	70fb      	strb	r3, [r7, #3]
 8000420:	4613      	mov	r3, r2
 8000422:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
 8000424:	78f8      	ldrb	r0, [r7, #3]
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	3306      	adds	r3, #6
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	4413      	add	r3, r2
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	f023 0250 	bic.w	r2, r3, #80	; 0x50
 8000436:	6879      	ldr	r1, [r7, #4]
 8000438:	1d83      	adds	r3, r0, #6
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	440b      	add	r3, r1
 800043e:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000440:	78ba      	ldrb	r2, [r7, #2]
 8000442:	78fb      	ldrb	r3, [r7, #3]
 8000444:	4619      	mov	r1, r3
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f7ff ff7c 	bl	8000344 <XMC_USIC_CH_SetInputSource>
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <_init_uart0_ch0>:
    .stop_bits = 1U,
    .baudrate = 115200U
};
/****************************************************************** FUNCTIONS */
void _init_uart0_ch0()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
    /* USIC channels initialization */
    XMC_UART_CH_Init (XMC_UART0_CH0, &uart_config);
 8000458:	491c      	ldr	r1, [pc, #112]	; (80004cc <_init_uart0_ch0+0x78>)
 800045a:	481d      	ldr	r0, [pc, #116]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800045c:	f002 fbe6 	bl	8002c2c <XMC_UART_CH_Init>

    XMC_UART_CH_SetInputSource (XMC_UART0_CH0, XMC_UART_CH_INPUT_RXD,
 8000460:	2201      	movs	r2, #1
 8000462:	2100      	movs	r1, #0
 8000464:	481a      	ldr	r0, [pc, #104]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000466:	f7ff ffd5 	bl	8000414 <XMC_UART_CH_SetInputSource>
    /* FIFOs initialization for both channels:
     *  8 entries for TxFIFO from point 0, LIMIT=1
     *  8 entries for RxFIFO from point 8, LIMIT=7 (SRBI is set if all 8*data have
     *                                              been received)
     *  */
    XMC_USIC_CH_TXFIFO_Configure (XMC_UART0_CH0, 0, XMC_USIC_CH_FIFO_SIZE_8WORDS, TX_FIFO_INITIAL_LIMIT);
 800046a:	2300      	movs	r3, #0
 800046c:	2203      	movs	r2, #3
 800046e:	2100      	movs	r1, #0
 8000470:	4817      	ldr	r0, [pc, #92]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000472:	f002 ff05 	bl	8003280 <XMC_USIC_CH_TXFIFO_Configure>
    XMC_USIC_CH_RXFIFO_Configure (XMC_UART0_CH0, 8, XMC_USIC_CH_FIFO_SIZE_8WORDS, RX_FIFO_INITIAL_LIMIT);
 8000476:	2300      	movs	r3, #0
 8000478:	2203      	movs	r2, #3
 800047a:	2108      	movs	r1, #8
 800047c:	4814      	ldr	r0, [pc, #80]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800047e:	f002 ff27 	bl	80032d0 <XMC_USIC_CH_RXFIFO_Configure>

    /* Enabling events for TX FIFO and RX FIFO */
    XMC_USIC_CH_RXFIFO_EnableEvent (XMC_UART0_CH0,
 8000482:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8000486:	4812      	ldr	r0, [pc, #72]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000488:	f7ff ff8a 	bl	80003a0 <XMC_USIC_CH_RXFIFO_EnableEvent>
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE);

    /* Connecting the previously enabled events to a Service Request line number */
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	2110      	movs	r1, #16
 8000490:	480f      	ldr	r0, [pc, #60]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000492:	f002 ff47 	bl	8003324 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2113      	movs	r1, #19
 800049a:	480d      	ldr	r0, [pc, #52]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800049c:	f002 ff42 	bl	8003324 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>

    /* Start USIC operation as UART */
    XMC_UART_CH_Start (XMC_UART0_CH0);
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <_init_uart0_ch0+0x7c>)
 80004a2:	f7ff ffa5 	bl	80003f0 <XMC_UART_CH_Start>

    /*Initialization of the necessary ports*/
    XMC_GPIO_Init (UART_TX, &uart_tx);
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <_init_uart0_ch0+0x80>)
 80004a8:	2105      	movs	r1, #5
 80004aa:	480b      	ldr	r0, [pc, #44]	; (80004d8 <_init_uart0_ch0+0x84>)
 80004ac:	f002 fafe 	bl	8002aac <XMC_GPIO_Init>
    XMC_GPIO_Init (UART_RX, &uart_rx);
 80004b0:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <_init_uart0_ch0+0x88>)
 80004b2:	2104      	movs	r1, #4
 80004b4:	4808      	ldr	r0, [pc, #32]	; (80004d8 <_init_uart0_ch0+0x84>)
 80004b6:	f002 faf9 	bl	8002aac <XMC_GPIO_Init>

    /* Configuring priority and enabling NVIC IRQ for the defined service request
    line number */
    NVIC_SetPriority (USIC0_0_IRQn, 63U);
 80004ba:	213f      	movs	r1, #63	; 0x3f
 80004bc:	2054      	movs	r0, #84	; 0x54
 80004be:	f7ff ff17 	bl	80002f0 <__NVIC_SetPriority>
    NVIC_EnableIRQ (USIC0_0_IRQn);
 80004c2:	2054      	movs	r0, #84	; 0x54
 80004c4:	f7ff fef6 	bl	80002b4 <__NVIC_EnableIRQ>

    return;
 80004c8:	bf00      	nop
}
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000000c 	.word	0x2000000c
 80004d0:	40030000 	.word	0x40030000
 80004d4:	20000000 	.word	0x20000000
 80004d8:	48028100 	.word	0x48028100
 80004dc:	20000a2c 	.word	0x20000a2c

080004e0 <USIC0_0_IRQHandler>:

void USIC0_0_IRQHandler (void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	71fb      	strb	r3, [r7, #7]

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 80004ea:	e01f      	b.n	800052c <USIC0_0_IRQHandler+0x4c>
        rx_tmp = XMC_UART_CH_GetReceivedData (XMC_UART0_CH0);
 80004ec:	4816      	ldr	r0, [pc, #88]	; (8000548 <USIC0_0_IRQHandler+0x68>)
 80004ee:	f002 fc1b 	bl	8002d28 <XMC_UART_CH_GetReceivedData>
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]

        if ( (rx_tmp != STRING_CR) && (!str_available)) {
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b0d      	cmp	r3, #13
 80004fa:	d011      	beq.n	8000520 <USIC0_0_IRQHandler+0x40>
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <USIC0_0_IRQHandler+0x6c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	f083 0301 	eor.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d00a      	beq.n	8000520 <USIC0_0_IRQHandler+0x40>
            rx_buffer[rx_ctr++] = rx_tmp;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	b2d1      	uxtb	r1, r2
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 8000514:	7011      	strb	r1, [r2, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <USIC0_0_IRQHandler+0x74>)
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	5453      	strb	r3, [r2, r1]
 800051e:	e005      	b.n	800052c <USIC0_0_IRQHandler+0x4c>
        } else {
            rx_ctr = 0;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
            str_available = true;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <USIC0_0_IRQHandler+0x6c>)
 8000528:	2201      	movs	r2, #1
 800052a:	701a      	strb	r2, [r3, #0]
{
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 800052c:	4806      	ldr	r0, [pc, #24]	; (8000548 <USIC0_0_IRQHandler+0x68>)
 800052e:	f7ff ff4b 	bl	80003c8 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8000532:	4603      	mov	r3, r0
 8000534:	f083 0301 	eor.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1d6      	bne.n	80004ec <USIC0_0_IRQHandler+0xc>
        } else {
            rx_ctr = 0;
            str_available = true;
        }
    }
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40030000 	.word	0x40030000
 800054c:	200009e8 	.word	0x200009e8
 8000550:	20000a38 	.word	0x20000a38
 8000554:	200009ec 	.word	0x200009ec

08000558 <_uart_printf>:

    return 0;
}

uint8_t _uart_printf (char *fmt, ...)
{
 8000558:	b40f      	push	{r0, r1, r2, r3}
 800055a:	b580      	push	{r7, lr}
 800055c:	b0c2      	sub	sp, #264	; 0x108
 800055e:	af00      	add	r7, sp, #0
    va_list arg_ptr;
    char buffer[BUFFER_SIZE_PRINTF];

    if (fmt == NULL)  {
 8000560:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000564:	2b00      	cmp	r3, #0
 8000566:	d101      	bne.n	800056c <_uart_printf+0x14>
        return ERR_OUT_OF_MEMORY;
 8000568:	2364      	movs	r3, #100	; 0x64
 800056a:	e010      	b.n	800058e <_uart_printf+0x36>
    }

    va_start (arg_ptr, fmt);
 800056c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    vsprintf (buffer, fmt, arg_ptr);
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800057a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800057e:	4618      	mov	r0, r3
 8000580:	f007 f886 	bl	8007690 <vsprintf>
    va_end (arg_ptr);

    _uart_send_string (buffer);
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f80a 	bl	80005a0 <_uart_send_string>
    return 0;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000594:	46bd      	mov	sp, r7
 8000596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800059a:	b004      	add	sp, #16
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <_uart_send_string>:

uint8_t _uart_send_string (char *str)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <_uart_send_string+0x12>
        return ERR_OUT_OF_MEMORY;
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	e01d      	b.n	80005ee <_uart_send_string+0x4e>
    }

    for (int i = 0; i < strlen (str); i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e012      	b.n	80005de <_uart_send_string+0x3e>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 80005b8:	bf00      	nop
 80005ba:	480f      	ldr	r0, [pc, #60]	; (80005f8 <_uart_send_string+0x58>)
 80005bc:	f7ff fee0 	bl	8000380 <XMC_USIC_CH_GetTransmitBufferStatus>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b80      	cmp	r3, #128	; 0x80
 80005c4:	d0f9      	beq.n	80005ba <_uart_send_string+0x1a>
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	4619      	mov	r1, r3
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <_uart_send_string+0x58>)
 80005d4:	f002 fb82 	bl	8002cdc <XMC_UART_CH_Transmit>
{
    if (str == NULL) {
        return ERR_OUT_OF_MEMORY;
    }

    for (int i = 0; i < strlen (str); i++) {
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f004 f82e 	bl	8004640 <strlen>
 80005e4:	4602      	mov	r2, r0
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8e5      	bhi.n	80005b8 <_uart_send_string+0x18>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
    }
    return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40030000 	.word	0x40030000

080005fc <_uart_get_string>:

uint8_t _uart_get_string (char *str)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <_uart_get_string+0x12>
        return ERR_OUT_OF_MEMORY;
 800060a:	2364      	movs	r3, #100	; 0x64
 800060c:	e019      	b.n	8000642 <_uart_get_string+0x46>
    }

    while (!str_available);
 800060e:	bf00      	nop
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <_uart_get_string+0x50>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f083 0301 	eor.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f8      	bne.n	8000610 <_uart_get_string+0x14>
    memcpy (str, &rx_buffer, strlen (rx_buffer));
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <_uart_get_string+0x54>)
 8000620:	f004 f80e 	bl	8004640 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4909      	ldr	r1, [pc, #36]	; (8000650 <_uart_get_string+0x54>)
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f003 fe66 	bl	80042fc <memcpy>
    memset (&rx_buffer, 0x00, BUFFER_SIZE_RX);
 8000630:	2240      	movs	r2, #64	; 0x40
 8000632:	2100      	movs	r1, #0
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <_uart_get_string+0x54>)
 8000636:	f003 fefb 	bl	8004430 <memset>

    str_available = false;
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <_uart_get_string+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
    return 0;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200009e8 	.word	0x200009e8
 8000650:	200009ec 	.word	0x200009ec

08000654 <initServoPWM>:
 * @param	none
 * @return	none
 *
 */
void initServoPWM()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	// init servos

    initServoPWMXMC();
 8000658:	f000 fe2e 	bl	80012b8 <initServoPWMXMC>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}

08000660 <pwm>:
 *			1 for lower servo <br>
 * @return	none
 *
 */
uint8_t pwm(double dutycycle, uint8_t out)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800066a:	4613      	mov	r3, r2
 800066c:	71fb      	strb	r3, [r7, #7]
	// call pwm driver

    if (out == 0)
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d10b      	bne.n	800068c <pwm+0x2c>
    {
        if(pwmXMC(dutycycle, 0) == 0)
 8000674:	2200      	movs	r2, #0
 8000676:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800067a:	f000 fe99 	bl	80013b0 <pwmXMC>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d101      	bne.n	8000688 <pwm+0x28>
        {
            return 0;
 8000684:	2300      	movs	r3, #0
 8000686:	e00c      	b.n	80006a2 <pwm+0x42>
        }
        else
        {
            return 1;
 8000688:	2301      	movs	r3, #1
 800068a:	e00a      	b.n	80006a2 <pwm+0x42>
        }

    }
    else
    {
        if(pwmXMC(dutycycle, 1) == 0)
 800068c:	2201      	movs	r2, #1
 800068e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000692:	f000 fe8d 	bl	80013b0 <pwmXMC>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d101      	bne.n	80006a0 <pwm+0x40>
        {
            return 0;
 800069c:	2300      	movs	r3, #0
 800069e:	e000      	b.n	80006a2 <pwm+0x42>
        }
        else
        {
            return 1;
 80006a0:	2301      	movs	r3, #1
        }
    }
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop

080006ac <initGlobals>:
 * @param	none
 * @return	none
 *
 */
void initGlobals()
{
 80006ac:	b490      	push	{r4, r7}
 80006ae:	af00      	add	r7, sp, #0
    readAxes.axisX = 0;
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <initGlobals+0xa0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	801a      	strh	r2, [r3, #0]
    readAxes.axisY = 0;
 80006b6:	4b25      	ldr	r3, [pc, #148]	; (800074c <initGlobals+0xa0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	805a      	strh	r2, [r3, #2]
    readAxes.axisZ = 0;
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <initGlobals+0xa0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	809a      	strh	r2, [r3, #4]
    direction = 6;
 80006c2:	4b23      	ldr	r3, [pc, #140]	; (8000750 <initGlobals+0xa4>)
 80006c4:	2206      	movs	r2, #6
 80006c6:	701a      	strb	r2, [r3, #0]
    errorcount = 0;
 80006c8:	4b22      	ldr	r3, [pc, #136]	; (8000754 <initGlobals+0xa8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
    packagesSent = 0;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <initGlobals+0xac>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
    position = 0;
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <initGlobals+0xb0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
    old_position = 0;
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <initGlobals+0xb4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
    signal1 = 0.00;
 80006e0:	4a20      	ldr	r2, [pc, #128]	; (8000764 <initGlobals+0xb8>)
 80006e2:	f04f 0300 	mov.w	r3, #0
 80006e6:	f04f 0400 	mov.w	r4, #0
 80006ea:	e9c2 3400 	strd	r3, r4, [r2]
    signal2 = 0.00;
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <initGlobals+0xbc>)
 80006f0:	f04f 0300 	mov.w	r3, #0
 80006f4:	f04f 0400 	mov.w	r4, #0
 80006f8:	e9c2 3400 	strd	r3, r4, [r2]
    button1pressed = 0;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <initGlobals+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
    button2pressed = 0;
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <initGlobals+0xc4>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
    statisticSend = 0;
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <initGlobals+0xc8>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
    servoEnable = 0;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <initGlobals+0xcc>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
    buttonSend = 0;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <initGlobals+0xd0>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
    inix = 0;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <initGlobals+0xd4>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
    outix = 0;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <initGlobals+0xd8>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
    full = 0;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <initGlobals+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
    empty = 1;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <initGlobals+0xe0>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
    startup = 0;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <initGlobals+0xe4>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
    connection = 0;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <initGlobals+0xe8>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
    averageChoice = 0;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <initGlobals+0xec>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc90      	pop	{r4, r7}
 800074a:	4770      	bx	lr
 800074c:	20000ad8 	.word	0x20000ad8
 8000750:	20000ad1 	.word	0x20000ad1
 8000754:	20000aaa 	.word	0x20000aaa
 8000758:	20000ac0 	.word	0x20000ac0
 800075c:	20000abe 	.word	0x20000abe
 8000760:	20000ad4 	.word	0x20000ad4
 8000764:	20000ae0 	.word	0x20000ae0
 8000768:	20000ac8 	.word	0x20000ac8
 800076c:	20000ad0 	.word	0x20000ad0
 8000770:	20000ac4 	.word	0x20000ac4
 8000774:	20000aa8 	.word	0x20000aa8
 8000778:	20000ad3 	.word	0x20000ad3
 800077c:	20000ad5 	.word	0x20000ad5
 8000780:	20000ad2 	.word	0x20000ad2
 8000784:	20000aa9 	.word	0x20000aa9
 8000788:	20000ab0 	.word	0x20000ab0
 800078c:	20000ae8 	.word	0x20000ae8
 8000790:	20000aac 	.word	0x20000aac
 8000794:	20000ade 	.word	0x20000ade
 8000798:	20000ad6 	.word	0x20000ad6

0800079c <outputInit>:
 * @param	none
 * @return	none
 *
 */
void outputInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    outputInitXMC();
 80007a0:	f000 fec8 	bl	8001534 <outputInitXMC>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <SysTick_Handler>:
 * @param	none
 * @return	none
 *
 */
void SysTick_Handler (void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
    static uint8_t i = 0;
    static double smoothSignal1 = 0.0, smoothSignal2 = 0.0;

    // read buttons and fill circular buffer

    readButtonDebounce();
 80007ae:	f000 fc6f 	bl	8001090 <readButtonDebounce>

    if (circularGet(&buttonIDpressed))
 80007b2:	488b      	ldr	r0, [pc, #556]	; (80009e0 <SysTick_Handler+0x238>)
 80007b4:	f000 fcba 	bl	800112c <circularGet>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d018      	beq.n	80007f0 <SysTick_Handler+0x48>
    {
        switch (buttonIDpressed)
 80007be:	4b88      	ldr	r3, [pc, #544]	; (80009e0 <SysTick_Handler+0x238>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b0e      	cmp	r3, #14
 80007c4:	d002      	beq.n	80007cc <SysTick_Handler+0x24>
 80007c6:	2b0f      	cmp	r3, #15
 80007c8:	d007      	beq.n	80007da <SysTick_Handler+0x32>
 80007ca:	e00d      	b.n	80007e8 <SysTick_Handler+0x40>
        {
        case BUTTON1INT:
        {
#if DEBUG
            printf("button 1 pressed\n");
 80007cc:	4885      	ldr	r0, [pc, #532]	; (80009e4 <SysTick_Handler+0x23c>)
 80007ce:	f003 fec5 	bl	800455c <puts>
#endif
            buttonSend = 1;
 80007d2:	4b85      	ldr	r3, [pc, #532]	; (80009e8 <SysTick_Handler+0x240>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	701a      	strb	r2, [r3, #0]
            break;
 80007d8:	e00a      	b.n	80007f0 <SysTick_Handler+0x48>
        }
        case BUTTON2INT:
        {
#if DEBUG
            printf("button 2 pressed\n");
 80007da:	4884      	ldr	r0, [pc, #528]	; (80009ec <SysTick_Handler+0x244>)
 80007dc:	f003 febe 	bl	800455c <puts>
#endif
            buttonSend = 2;
 80007e0:	4b81      	ldr	r3, [pc, #516]	; (80009e8 <SysTick_Handler+0x240>)
 80007e2:	2202      	movs	r2, #2
 80007e4:	701a      	strb	r2, [r3, #0]
            break;
 80007e6:	e003      	b.n	80007f0 <SysTick_Handler+0x48>
        }
        default:
        {
            buttonSend = 0;
 80007e8:	4b7f      	ldr	r3, [pc, #508]	; (80009e8 <SysTick_Handler+0x240>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
            break;
 80007ee:	bf00      	nop
        }
        }
    }

	// ticks acction only when connected
    if (connection == 1)
 80007f0:	4b7f      	ldr	r3, [pc, #508]	; (80009f0 <SysTick_Handler+0x248>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	f040 80ee 	bne.w	80009d6 <SysTick_Handler+0x22e>
    {
        ticks++;
 80007fa:	4b7e      	ldr	r3, [pc, #504]	; (80009f4 <SysTick_Handler+0x24c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	4a7c      	ldr	r2, [pc, #496]	; (80009f4 <SysTick_Handler+0x24c>)
 8000802:	6013      	str	r3, [r2, #0]
        if(ticks == SENSORTICKS)
 8000804:	4b7b      	ldr	r3, [pc, #492]	; (80009f4 <SysTick_Handler+0x24c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b0a      	cmp	r3, #10
 800080a:	d11f      	bne.n	800084c <SysTick_Handler+0xa4>
        {
            // get 6D Position
            direction = get6Dposition();
 800080c:	f001 f9ce 	bl	8001bac <get6Dposition>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	4b78      	ldr	r3, [pc, #480]	; (80009f8 <SysTick_Handler+0x250>)
 8000816:	701a      	strb	r2, [r3, #0]
            // get raw data
            readAxes = getAxesRawData();
 8000818:	4c78      	ldr	r4, [pc, #480]	; (80009fc <SysTick_Handler+0x254>)
 800081a:	463b      	mov	r3, r7
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fa5f 	bl	8001ce0 <getAxesRawData>
 8000822:	4622      	mov	r2, r4
 8000824:	463b      	mov	r3, r7
 8000826:	6819      	ldr	r1, [r3, #0]
 8000828:	6011      	str	r1, [r2, #0]
 800082a:	889b      	ldrh	r3, [r3, #4]
 800082c:	8093      	strh	r3, [r2, #4]
            // calculate servo output
            pwmAngleCalc(readAxes.axisX, readAxes.axisY, readAxes.axisZ);
 800082e:	4b73      	ldr	r3, [pc, #460]	; (80009fc <SysTick_Handler+0x254>)
 8000830:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000834:	4b71      	ldr	r3, [pc, #452]	; (80009fc <SysTick_Handler+0x254>)
 8000836:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800083a:	4b70      	ldr	r3, [pc, #448]	; (80009fc <SysTick_Handler+0x254>)
 800083c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000840:	461a      	mov	r2, r3
 8000842:	f000 fa31 	bl	8000ca8 <pwmAngleCalc>

            ticks = 0;
 8000846:	4b6b      	ldr	r3, [pc, #428]	; (80009f4 <SysTick_Handler+0x24c>)
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
        }

		// servo action only when connected
        if (servoEnable == 1)
 800084c:	4b6c      	ldr	r3, [pc, #432]	; (8000a00 <SysTick_Handler+0x258>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b01      	cmp	r3, #1
 8000852:	f040 80a2 	bne.w	800099a <SysTick_Handler+0x1f2>
        {
            if (averageChoice == 0)
 8000856:	4b6b      	ldr	r3, [pc, #428]	; (8000a04 <SysTick_Handler+0x25c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d176      	bne.n	800094c <SysTick_Handler+0x1a4>
            {
				// PWM averaging
                smoothSignal1 += signal1;
 800085e:	4b6a      	ldr	r3, [pc, #424]	; (8000a08 <SysTick_Handler+0x260>)
 8000860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000864:	4b69      	ldr	r3, [pc, #420]	; (8000a0c <SysTick_Handler+0x264>)
 8000866:	e9d3 3400 	ldrd	r3, r4, [r3]
 800086a:	461a      	mov	r2, r3
 800086c:	4623      	mov	r3, r4
 800086e:	f003 f86d 	bl	800394c <__adddf3>
 8000872:	4603      	mov	r3, r0
 8000874:	460c      	mov	r4, r1
 8000876:	4a64      	ldr	r2, [pc, #400]	; (8000a08 <SysTick_Handler+0x260>)
 8000878:	e9c2 3400 	strd	r3, r4, [r2]
                smoothSignal2 += signal2;
 800087c:	4b64      	ldr	r3, [pc, #400]	; (8000a10 <SysTick_Handler+0x268>)
 800087e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000882:	4b64      	ldr	r3, [pc, #400]	; (8000a14 <SysTick_Handler+0x26c>)
 8000884:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000888:	461a      	mov	r2, r3
 800088a:	4623      	mov	r3, r4
 800088c:	f003 f85e 	bl	800394c <__adddf3>
 8000890:	4603      	mov	r3, r0
 8000892:	460c      	mov	r4, r1
 8000894:	4a5e      	ldr	r2, [pc, #376]	; (8000a10 <SysTick_Handler+0x268>)
 8000896:	e9c2 3400 	strd	r3, r4, [r2]
                i++;
 800089a:	4b5f      	ldr	r3, [pc, #380]	; (8000a18 <SysTick_Handler+0x270>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b5d      	ldr	r3, [pc, #372]	; (8000a18 <SysTick_Handler+0x270>)
 80008a4:	701a      	strb	r2, [r3, #0]
                if (i == PWMAVERAGE)
 80008a6:	4b5c      	ldr	r3, [pc, #368]	; (8000a18 <SysTick_Handler+0x270>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b05      	cmp	r3, #5
 80008ac:	f040 8093 	bne.w	80009d6 <SysTick_Handler+0x22e>
                {
                    // set servo
                    smoothSignal1 /= PWMAVERAGE;
 80008b0:	4b55      	ldr	r3, [pc, #340]	; (8000a08 <SysTick_Handler+0x260>)
 80008b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008b6:	f04f 0200 	mov.w	r2, #0
 80008ba:	4b58      	ldr	r3, [pc, #352]	; (8000a1c <SysTick_Handler+0x274>)
 80008bc:	f003 fb22 	bl	8003f04 <__aeabi_ddiv>
 80008c0:	4603      	mov	r3, r0
 80008c2:	460c      	mov	r4, r1
 80008c4:	4a50      	ldr	r2, [pc, #320]	; (8000a08 <SysTick_Handler+0x260>)
 80008c6:	e9c2 3400 	strd	r3, r4, [r2]
                    smoothSignal2 /= PWMAVERAGE;
 80008ca:	4b51      	ldr	r3, [pc, #324]	; (8000a10 <SysTick_Handler+0x268>)
 80008cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008d0:	f04f 0200 	mov.w	r2, #0
 80008d4:	4b51      	ldr	r3, [pc, #324]	; (8000a1c <SysTick_Handler+0x274>)
 80008d6:	f003 fb15 	bl	8003f04 <__aeabi_ddiv>
 80008da:	4603      	mov	r3, r0
 80008dc:	460c      	mov	r4, r1
 80008de:	4a4c      	ldr	r2, [pc, #304]	; (8000a10 <SysTick_Handler+0x268>)
 80008e0:	e9c2 3400 	strd	r3, r4, [r2]
                    if (pwm(smoothSignal1, 0) != 0)
 80008e4:	4b48      	ldr	r3, [pc, #288]	; (8000a08 <SysTick_Handler+0x260>)
 80008e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008ea:	2200      	movs	r2, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	4621      	mov	r1, r4
 80008f0:	f7ff feb6 	bl	8000660 <pwm>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d005      	beq.n	8000906 <SysTick_Handler+0x15e>
                    {
                        errorcount++;
 80008fa:	4b49      	ldr	r3, [pc, #292]	; (8000a20 <SysTick_Handler+0x278>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <SysTick_Handler+0x278>)
 8000904:	701a      	strb	r2, [r3, #0]
                    }
                    if (pwm(smoothSignal2, 1) != 0)
 8000906:	4b42      	ldr	r3, [pc, #264]	; (8000a10 <SysTick_Handler+0x268>)
 8000908:	e9d3 3400 	ldrd	r3, r4, [r3]
 800090c:	2201      	movs	r2, #1
 800090e:	4618      	mov	r0, r3
 8000910:	4621      	mov	r1, r4
 8000912:	f7ff fea5 	bl	8000660 <pwm>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d005      	beq.n	8000928 <SysTick_Handler+0x180>
                    {
                        errorcount++;
 800091c:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <SysTick_Handler+0x278>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b3e      	ldr	r3, [pc, #248]	; (8000a20 <SysTick_Handler+0x278>)
 8000926:	701a      	strb	r2, [r3, #0]
                    }
                    smoothSignal1 = 0.0;
 8000928:	4a37      	ldr	r2, [pc, #220]	; (8000a08 <SysTick_Handler+0x260>)
 800092a:	f04f 0300 	mov.w	r3, #0
 800092e:	f04f 0400 	mov.w	r4, #0
 8000932:	e9c2 3400 	strd	r3, r4, [r2]
                    smoothSignal2 = 0.0;
 8000936:	4a36      	ldr	r2, [pc, #216]	; (8000a10 <SysTick_Handler+0x268>)
 8000938:	f04f 0300 	mov.w	r3, #0
 800093c:	f04f 0400 	mov.w	r4, #0
 8000940:	e9c2 3400 	strd	r3, r4, [r2]
                    i = 0;
 8000944:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <SysTick_Handler+0x270>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
            {
                errorcount++;
            }
        }
    }
}
 800094a:	e044      	b.n	80009d6 <SysTick_Handler+0x22e>
                    smoothSignal1 = 0.0;
                    smoothSignal2 = 0.0;
                    i = 0;
                }
            }
            else if (averageChoice == 1)
 800094c:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <SysTick_Handler+0x25c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d140      	bne.n	80009d6 <SysTick_Handler+0x22e>
            {
				// angle thresholding
                if (pwm(signal1, 0) != 0)
 8000954:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <SysTick_Handler+0x264>)
 8000956:	e9d3 3400 	ldrd	r3, r4, [r3]
 800095a:	2200      	movs	r2, #0
 800095c:	4618      	mov	r0, r3
 800095e:	4621      	mov	r1, r4
 8000960:	f7ff fe7e 	bl	8000660 <pwm>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d005      	beq.n	8000976 <SysTick_Handler+0x1ce>
                {
                    errorcount++;
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <SysTick_Handler+0x278>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <SysTick_Handler+0x278>)
 8000974:	701a      	strb	r2, [r3, #0]
                }
                if (pwm(signal2, 1) != 0)
 8000976:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <SysTick_Handler+0x26c>)
 8000978:	e9d3 3400 	ldrd	r3, r4, [r3]
 800097c:	2201      	movs	r2, #1
 800097e:	4618      	mov	r0, r3
 8000980:	4621      	mov	r1, r4
 8000982:	f7ff fe6d 	bl	8000660 <pwm>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d024      	beq.n	80009d6 <SysTick_Handler+0x22e>
                {
                    errorcount++;
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <SysTick_Handler+0x278>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <SysTick_Handler+0x278>)
 8000996:	701a      	strb	r2, [r3, #0]
            {
                errorcount++;
            }
        }
    }
}
 8000998:	e01d      	b.n	80009d6 <SysTick_Handler+0x22e>
            }
        }
        else
        {
            // reset servo
            if (pwm(SERVOUPCENTER, 0) != 0)
 800099a:	2200      	movs	r2, #0
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4920      	ldr	r1, [pc, #128]	; (8000a24 <SysTick_Handler+0x27c>)
 80009a2:	f7ff fe5d 	bl	8000660 <pwm>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d005      	beq.n	80009b8 <SysTick_Handler+0x210>
            {
                errorcount++;
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <SysTick_Handler+0x278>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	3301      	adds	r3, #1
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <SysTick_Handler+0x278>)
 80009b6:	701a      	strb	r2, [r3, #0]
            }
            if (pwm(SERVOLOCENTER, 1) != 0)
 80009b8:	2201      	movs	r2, #1
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	4919      	ldr	r1, [pc, #100]	; (8000a24 <SysTick_Handler+0x27c>)
 80009c0:	f7ff fe4e 	bl	8000660 <pwm>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d005      	beq.n	80009d6 <SysTick_Handler+0x22e>
            {
                errorcount++;
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <SysTick_Handler+0x278>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	3301      	adds	r3, #1
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <SysTick_Handler+0x278>)
 80009d4:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd90      	pop	{r4, r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000a39 	.word	0x20000a39
 80009e4:	0800aa44 	.word	0x0800aa44
 80009e8:	20000ad5 	.word	0x20000ad5
 80009ec:	0800aa58 	.word	0x0800aa58
 80009f0:	20000ade 	.word	0x20000ade
 80009f4:	20000a3c 	.word	0x20000a3c
 80009f8:	20000ad1 	.word	0x20000ad1
 80009fc:	20000ad8 	.word	0x20000ad8
 8000a00:	20000ad3 	.word	0x20000ad3
 8000a04:	20000ad6 	.word	0x20000ad6
 8000a08:	20000a40 	.word	0x20000a40
 8000a0c:	20000ae0 	.word	0x20000ae0
 8000a10:	20000a48 	.word	0x20000a48
 8000a14:	20000ac8 	.word	0x20000ac8
 8000a18:	20000a50 	.word	0x20000a50
 8000a1c:	40140000 	.word	0x40140000
 8000a20:	20000aaa 	.word	0x20000aaa
 8000a24:	401e0000 	.word	0x401e0000

08000a28 <protocolComplete>:
 *			temperature value <br>
 * @return	none
 *
 */
void protocolComplete(uint16_t position6D, int16_t positionX, int16_t positionY, int16_t positionZ)
{
 8000a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2a:	b0a7      	sub	sp, #156	; 0x9c
 8000a2c:	af04      	add	r7, sp, #16
 8000a2e:	4604      	mov	r4, r0
 8000a30:	4608      	mov	r0, r1
 8000a32:	4611      	mov	r1, r2
 8000a34:	461a      	mov	r2, r3
 8000a36:	4623      	mov	r3, r4
 8000a38:	80fb      	strh	r3, [r7, #6]
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	80bb      	strh	r3, [r7, #4]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	807b      	strh	r3, [r7, #2]
 8000a42:	4613      	mov	r3, r2
 8000a44:	803b      	strh	r3, [r7, #0]
    char string6D[8][6] = {"#USX,", "#UDX,", "#DSX,", "#DDX,", "#TOP,", "#BOT,", "#XXX,", "#FAL,"};
 8000a46:	4b83      	ldr	r3, [pc, #524]	; (8000c54 <protocolComplete+0x22c>)
 8000a48:	461c      	mov	r4, r3
 8000a4a:	f107 0658 	add.w	r6, r7, #88	; 0x58
 8000a4e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000a52:	4635      	mov	r5, r6
 8000a54:	4623      	mov	r3, r4
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	6859      	ldr	r1, [r3, #4]
 8000a5a:	689a      	ldr	r2, [r3, #8]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a60:	3410      	adds	r4, #16
 8000a62:	3610      	adds	r6, #16
 8000a64:	4574      	cmp	r4, lr
 8000a66:	d1f4      	bne.n	8000a52 <protocolComplete+0x2a>
	char button[2][8] = {"#BUT,1$", "#BUT,2$"};
 8000a68:	4b7b      	ldr	r3, [pc, #492]	; (8000c58 <protocolComplete+0x230>)
 8000a6a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	6859      	ldr	r1, [r3, #4]
 8000a72:	689a      	ldr	r2, [r3, #8]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	
    char send[RXBUFFERSIZE];

    memset (&send, 0, sizeof (send));
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	2240      	movs	r2, #64	; 0x40
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f003 fcd5 	bl	8004430 <memset>

    if (statisticSend == 1)
 8000a86:	4b75      	ldr	r3, [pc, #468]	; (8000c5c <protocolComplete+0x234>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d137      	bne.n	8000afe <protocolComplete+0xd6>
    {
        // send statistic package if requested - all together constant 32 chars
        if (snprintf(send, 32, "#STA,%10lu,%3d,%10lu$\n", packagesSent, errorcount, startup) < 0)
 8000a8e:	4b74      	ldr	r3, [pc, #464]	; (8000c60 <protocolComplete+0x238>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	4b74      	ldr	r3, [pc, #464]	; (8000c64 <protocolComplete+0x23c>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	4b73      	ldr	r3, [pc, #460]	; (8000c68 <protocolComplete+0x240>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f107 0008 	add.w	r0, r7, #8
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	9100      	str	r1, [sp, #0]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	4a71      	ldr	r2, [pc, #452]	; (8000c6c <protocolComplete+0x244>)
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	f003 fd5f 	bl	800456c <snprintf>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	da06      	bge.n	8000ac2 <protocolComplete+0x9a>
        {
            errorcount++;
 8000ab4:	4b6b      	ldr	r3, [pc, #428]	; (8000c64 <protocolComplete+0x23c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b69      	ldr	r3, [pc, #420]	; (8000c64 <protocolComplete+0x23c>)
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e019      	b.n	8000af6 <protocolComplete+0xce>
        }
        else
        {
#if DEBUG
            printf("send %s\n", send);
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4869      	ldr	r0, [pc, #420]	; (8000c70 <protocolComplete+0x248>)
 8000aca:	f003 fcff 	bl	80044cc <printf>
#endif
            if (_uart_printf("%s", send) != 0)
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4867      	ldr	r0, [pc, #412]	; (8000c74 <protocolComplete+0x24c>)
 8000ad6:	f7ff fd3f 	bl	8000558 <_uart_printf>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d005      	beq.n	8000aec <protocolComplete+0xc4>
            {
                errorcount++;
 8000ae0:	4b60      	ldr	r3, [pc, #384]	; (8000c64 <protocolComplete+0x23c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	4b5e      	ldr	r3, [pc, #376]	; (8000c64 <protocolComplete+0x23c>)
 8000aea:	701a      	strb	r2, [r3, #0]
            }
            packagesSent++;
 8000aec:	4b5c      	ldr	r3, [pc, #368]	; (8000c60 <protocolComplete+0x238>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	4a5b      	ldr	r2, [pc, #364]	; (8000c60 <protocolComplete+0x238>)
 8000af4:	6013      	str	r3, [r2, #0]
        }
        statisticSend = 0;
 8000af6:	4b59      	ldr	r3, [pc, #356]	; (8000c5c <protocolComplete+0x234>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	701a      	strb	r2, [r3, #0]
        return;
 8000afc:	e0a7      	b.n	8000c4e <protocolComplete+0x226>
    }
    else if (buttonSend == 1)
 8000afe:	4b5e      	ldr	r3, [pc, #376]	; (8000c78 <protocolComplete+0x250>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d12f      	bne.n	8000b66 <protocolComplete+0x13e>
    {
        // send button 1 pressed - constant 9 chars
        if (snprintf(send, 9, "%s\n", button[0]) < 0)
 8000b06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b0a:	f107 0008 	add.w	r0, r7, #8
 8000b0e:	4a5b      	ldr	r2, [pc, #364]	; (8000c7c <protocolComplete+0x254>)
 8000b10:	2109      	movs	r1, #9
 8000b12:	f003 fd2b 	bl	800456c <snprintf>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	da06      	bge.n	8000b2a <protocolComplete+0x102>
        {
            errorcount++;
 8000b1c:	4b51      	ldr	r3, [pc, #324]	; (8000c64 <protocolComplete+0x23c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	3301      	adds	r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b4f      	ldr	r3, [pc, #316]	; (8000c64 <protocolComplete+0x23c>)
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	e019      	b.n	8000b5e <protocolComplete+0x136>
        }
        else
        {
#if DEBUG
            printf("send %s", send);
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4853      	ldr	r0, [pc, #332]	; (8000c80 <protocolComplete+0x258>)
 8000b32:	f003 fccb 	bl	80044cc <printf>
#endif
            if(_uart_printf("%s", send) != 0)
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	484d      	ldr	r0, [pc, #308]	; (8000c74 <protocolComplete+0x24c>)
 8000b3e:	f7ff fd0b 	bl	8000558 <_uart_printf>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d005      	beq.n	8000b54 <protocolComplete+0x12c>
            {
                errorcount++;
 8000b48:	4b46      	ldr	r3, [pc, #280]	; (8000c64 <protocolComplete+0x23c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b44      	ldr	r3, [pc, #272]	; (8000c64 <protocolComplete+0x23c>)
 8000b52:	701a      	strb	r2, [r3, #0]
            }
            packagesSent++;
 8000b54:	4b42      	ldr	r3, [pc, #264]	; (8000c60 <protocolComplete+0x238>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	4a41      	ldr	r2, [pc, #260]	; (8000c60 <protocolComplete+0x238>)
 8000b5c:	6013      	str	r3, [r2, #0]
        }
        buttonSend = 0;
 8000b5e:	4b46      	ldr	r3, [pc, #280]	; (8000c78 <protocolComplete+0x250>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
        return;
 8000b64:	e073      	b.n	8000c4e <protocolComplete+0x226>
    }
    else if (buttonSend == 2)
 8000b66:	4b44      	ldr	r3, [pc, #272]	; (8000c78 <protocolComplete+0x250>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d130      	bne.n	8000bd0 <protocolComplete+0x1a8>
    {
        // send button 2 pressed - constant 9 chars
        if (snprintf(send, 9, "%s\n", button[1]) < 0)
 8000b6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b72:	3308      	adds	r3, #8
 8000b74:	f107 0008 	add.w	r0, r7, #8
 8000b78:	4a40      	ldr	r2, [pc, #256]	; (8000c7c <protocolComplete+0x254>)
 8000b7a:	2109      	movs	r1, #9
 8000b7c:	f003 fcf6 	bl	800456c <snprintf>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	da06      	bge.n	8000b94 <protocolComplete+0x16c>
        {
            errorcount++;
 8000b86:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <protocolComplete+0x23c>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <protocolComplete+0x23c>)
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	e019      	b.n	8000bc8 <protocolComplete+0x1a0>
        }
        else
        {
#if DEBUG
            printf("send %s", send);
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4839      	ldr	r0, [pc, #228]	; (8000c80 <protocolComplete+0x258>)
 8000b9c:	f003 fc96 	bl	80044cc <printf>
#endif
            if(_uart_printf("%s", send) != 0)
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4833      	ldr	r0, [pc, #204]	; (8000c74 <protocolComplete+0x24c>)
 8000ba8:	f7ff fcd6 	bl	8000558 <_uart_printf>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d005      	beq.n	8000bbe <protocolComplete+0x196>
            {
                errorcount++;
 8000bb2:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <protocolComplete+0x23c>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <protocolComplete+0x23c>)
 8000bbc:	701a      	strb	r2, [r3, #0]
            }
            packagesSent++;
 8000bbe:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <protocolComplete+0x238>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a26      	ldr	r2, [pc, #152]	; (8000c60 <protocolComplete+0x238>)
 8000bc6:	6013      	str	r3, [r2, #0]
        }
        buttonSend = 0;
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <protocolComplete+0x250>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
        return;
 8000bce:	e03e      	b.n	8000c4e <protocolComplete+0x226>
    }
    else
    {
        // send acceleration data - all together constant 29 chars
        if (snprintf(send, 29,"%s%6d,%6d,%6d$\n", string6D[position6D], positionX, positionY, positionZ) < 0)
 8000bd0:	88fa      	ldrh	r2, [r7, #6]
 8000bd2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	18cc      	adds	r4, r1, r3
 8000be0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000be4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000be8:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000bec:	f107 0008 	add.w	r0, r7, #8
 8000bf0:	9102      	str	r1, [sp, #8]
 8000bf2:	9201      	str	r2, [sp, #4]
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	4623      	mov	r3, r4
 8000bf8:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <protocolComplete+0x25c>)
 8000bfa:	211d      	movs	r1, #29
 8000bfc:	f003 fcb6 	bl	800456c <snprintf>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	da06      	bge.n	8000c14 <protocolComplete+0x1ec>
        {
            errorcount++;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <protocolComplete+0x23c>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <protocolComplete+0x23c>)
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e01c      	b.n	8000c4e <protocolComplete+0x226>
        }
        else
        {
#if DEBUG
            printf("send %s", send);
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4819      	ldr	r0, [pc, #100]	; (8000c80 <protocolComplete+0x258>)
 8000c1c:	f003 fc56 	bl	80044cc <printf>
#endif
            if(_uart_printf("%s", send) != 0)
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	4619      	mov	r1, r3
 8000c26:	4813      	ldr	r0, [pc, #76]	; (8000c74 <protocolComplete+0x24c>)
 8000c28:	f7ff fc96 	bl	8000558 <_uart_printf>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d005      	beq.n	8000c3e <protocolComplete+0x216>
            {
                errorcount++;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <protocolComplete+0x23c>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <protocolComplete+0x23c>)
 8000c3c:	701a      	strb	r2, [r3, #0]
            }
            ledSetting(3);
 8000c3e:	2003      	movs	r0, #3
 8000c40:	f000 f822 	bl	8000c88 <ledSetting>
            packagesSent++;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <protocolComplete+0x238>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <protocolComplete+0x238>)
 8000c4c:	6013      	str	r3, [r2, #0]
        }
    }
}
 8000c4e:	378c      	adds	r7, #140	; 0x8c
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c54:	0800aab0 	.word	0x0800aab0
 8000c58:	0800aae0 	.word	0x0800aae0
 8000c5c:	20000aa8 	.word	0x20000aa8
 8000c60:	20000ac0 	.word	0x20000ac0
 8000c64:	20000aaa 	.word	0x20000aaa
 8000c68:	20000aac 	.word	0x20000aac
 8000c6c:	0800aa6c 	.word	0x0800aa6c
 8000c70:	0800aa84 	.word	0x0800aa84
 8000c74:	0800aa90 	.word	0x0800aa90
 8000c78:	20000ad5 	.word	0x20000ad5
 8000c7c:	0800aa94 	.word	0x0800aa94
 8000c80:	0800aa98 	.word	0x0800aa98
 8000c84:	0800aaa0 	.word	0x0800aaa0

08000c88 <ledSetting>:
 *			other for LED toggle <br>
 * @return	none
 *
 */
void ledSetting(uint8_t ledState)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
    ledSettingXMC(ledState);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fccd 	bl	8001634 <ledSettingXMC>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	0000      	movs	r0, r0
	...

08000ca8 <pwmAngleCalc>:
 *			raw Z acceleration value <br>
 * @return	none
 *
 */
void pwmAngleCalc(int16_t positionX, int16_t positionY, int16_t positionZ)
{
 8000ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cac:	b08d      	sub	sp, #52	; 0x34
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	80fb      	strh	r3, [r7, #6]
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	80bb      	strh	r3, [r7, #4]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	807b      	strh	r3, [r7, #2]
    double roll, pitch;
    double gX = 0, gY = 0, gZ = 0;
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	f04f 0400 	mov.w	r4, #0
 8000cc4:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	f04f 0400 	mov.w	r4, #0
 8000cd0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	f04f 0400 	mov.w	r4, #0
 8000cdc:	e9c7 3402 	strd	r3, r4, [r7, #8]
    static double rollStored = 0.0;
    static double pitchStored = 0.0;

	// calculate acceleration values from raw values
    gX = positionX / GDIVIDER;
 8000ce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 ff7d 	bl	8003be4 <__aeabi_i2d>
 8000cea:	a3e7      	add	r3, pc, #924	; (adr r3, 8001088 <pwmAngleCalc+0x3e0>)
 8000cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf0:	f003 f908 	bl	8003f04 <__aeabi_ddiv>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	460c      	mov	r4, r1
 8000cf8:	e9c7 3406 	strd	r3, r4, [r7, #24]
    gY = positionY / GDIVIDER;
 8000cfc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f002 ff6f 	bl	8003be4 <__aeabi_i2d>
 8000d06:	a3e0      	add	r3, pc, #896	; (adr r3, 8001088 <pwmAngleCalc+0x3e0>)
 8000d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0c:	f003 f8fa 	bl	8003f04 <__aeabi_ddiv>
 8000d10:	4603      	mov	r3, r0
 8000d12:	460c      	mov	r4, r1
 8000d14:	e9c7 3404 	strd	r3, r4, [r7, #16]
    gZ = positionZ / GDIVIDER;
 8000d18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 ff61 	bl	8003be4 <__aeabi_i2d>
 8000d22:	a3d9      	add	r3, pc, #868	; (adr r3, 8001088 <pwmAngleCalc+0x3e0>)
 8000d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d28:	f003 f8ec 	bl	8003f04 <__aeabi_ddiv>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	460c      	mov	r4, r1
 8000d30:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// calculate angles for servos
    roll = atan(gY/(sqrt((gX*gX)+(gZ*gZ)))) * 180 / PI;
 8000d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d3c:	f002 ffb8 	bl	8003cb0 <__aeabi_dmul>
 8000d40:	4603      	mov	r3, r0
 8000d42:	460c      	mov	r4, r1
 8000d44:	469a      	mov	sl, r3
 8000d46:	46a3      	mov	fp, r4
 8000d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d50:	f002 ffae 	bl	8003cb0 <__aeabi_dmul>
 8000d54:	4603      	mov	r3, r0
 8000d56:	460c      	mov	r4, r1
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4623      	mov	r3, r4
 8000d5c:	4650      	mov	r0, sl
 8000d5e:	4659      	mov	r1, fp
 8000d60:	f002 fdf4 	bl	800394c <__adddf3>
 8000d64:	4603      	mov	r3, r0
 8000d66:	460c      	mov	r4, r1
 8000d68:	4618      	mov	r0, r3
 8000d6a:	4621      	mov	r1, r4
 8000d6c:	f002 fcc8 	bl	8003700 <sqrt>
 8000d70:	4603      	mov	r3, r0
 8000d72:	460c      	mov	r4, r1
 8000d74:	461a      	mov	r2, r3
 8000d76:	4623      	mov	r3, r4
 8000d78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d7c:	f003 f8c2 	bl	8003f04 <__aeabi_ddiv>
 8000d80:	4603      	mov	r3, r0
 8000d82:	460c      	mov	r4, r1
 8000d84:	4618      	mov	r0, r3
 8000d86:	4621      	mov	r1, r4
 8000d88:	f002 fb16 	bl	80033b8 <atan>
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	4bb1      	ldr	r3, [pc, #708]	; (8001058 <pwmAngleCalc+0x3b0>)
 8000d92:	f002 ff8d 	bl	8003cb0 <__aeabi_dmul>
 8000d96:	4603      	mov	r3, r0
 8000d98:	460c      	mov	r4, r1
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	4621      	mov	r1, r4
 8000d9e:	a3a8      	add	r3, pc, #672	; (adr r3, 8001040 <pwmAngleCalc+0x398>)
 8000da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da4:	f003 f8ae 	bl	8003f04 <__aeabi_ddiv>
 8000da8:	4603      	mov	r3, r0
 8000daa:	460c      	mov	r4, r1
 8000dac:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    pitch = atan(gX/(sqrt((gY*gY)+(gZ*gZ)))) * 180 / PI;
 8000db0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000db4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000db8:	f002 ff7a 	bl	8003cb0 <__aeabi_dmul>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	460c      	mov	r4, r1
 8000dc0:	469a      	mov	sl, r3
 8000dc2:	46a3      	mov	fp, r4
 8000dc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dcc:	f002 ff70 	bl	8003cb0 <__aeabi_dmul>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	460c      	mov	r4, r1
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4623      	mov	r3, r4
 8000dd8:	4650      	mov	r0, sl
 8000dda:	4659      	mov	r1, fp
 8000ddc:	f002 fdb6 	bl	800394c <__adddf3>
 8000de0:	4603      	mov	r3, r0
 8000de2:	460c      	mov	r4, r1
 8000de4:	4618      	mov	r0, r3
 8000de6:	4621      	mov	r1, r4
 8000de8:	f002 fc8a 	bl	8003700 <sqrt>
 8000dec:	4603      	mov	r3, r0
 8000dee:	460c      	mov	r4, r1
 8000df0:	461a      	mov	r2, r3
 8000df2:	4623      	mov	r3, r4
 8000df4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000df8:	f003 f884 	bl	8003f04 <__aeabi_ddiv>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	460c      	mov	r4, r1
 8000e00:	4618      	mov	r0, r3
 8000e02:	4621      	mov	r1, r4
 8000e04:	f002 fad8 	bl	80033b8 <atan>
 8000e08:	f04f 0200 	mov.w	r2, #0
 8000e0c:	4b92      	ldr	r3, [pc, #584]	; (8001058 <pwmAngleCalc+0x3b0>)
 8000e0e:	f002 ff4f 	bl	8003cb0 <__aeabi_dmul>
 8000e12:	4603      	mov	r3, r0
 8000e14:	460c      	mov	r4, r1
 8000e16:	4618      	mov	r0, r3
 8000e18:	4621      	mov	r1, r4
 8000e1a:	a389      	add	r3, pc, #548	; (adr r3, 8001040 <pwmAngleCalc+0x398>)
 8000e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e20:	f003 f870 	bl	8003f04 <__aeabi_ddiv>
 8000e24:	4603      	mov	r3, r0
 8000e26:	460c      	mov	r4, r1
 8000e28:	e9c7 3408 	strd	r3, r4, [r7, #32]

	// angle correction as documented
    if (pitch >= 0.0)
 8000e2c:	f04f 0200 	mov.w	r2, #0
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e38:	f003 f9c0 	bl	80041bc <__aeabi_dcmpge>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d012      	beq.n	8000e68 <pwmAngleCalc+0x1c0>
    {
        pitch += pitch * PITCHCORRECTPOS;
 8000e42:	a381      	add	r3, pc, #516	; (adr r3, 8001048 <pwmAngleCalc+0x3a0>)
 8000e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e4c:	f002 ff30 	bl	8003cb0 <__aeabi_dmul>
 8000e50:	4603      	mov	r3, r0
 8000e52:	460c      	mov	r4, r1
 8000e54:	461a      	mov	r2, r3
 8000e56:	4623      	mov	r3, r4
 8000e58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e5c:	f002 fd76 	bl	800394c <__adddf3>
 8000e60:	4603      	mov	r3, r0
 8000e62:	460c      	mov	r4, r1
 8000e64:	e9c7 3408 	strd	r3, r4, [r7, #32]
    }

	// angle thresholding
    if (startup == 0)
 8000e68:	4b7c      	ldr	r3, [pc, #496]	; (800105c <pwmAngleCalc+0x3b4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d10a      	bne.n	8000e86 <pwmAngleCalc+0x1de>
    {
        pitchStored = pitch;
 8000e70:	4a7b      	ldr	r2, [pc, #492]	; (8001060 <pwmAngleCalc+0x3b8>)
 8000e72:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000e76:	e9c2 3400 	strd	r3, r4, [r2]
        rollStored = roll;
 8000e7a:	4a7a      	ldr	r2, [pc, #488]	; (8001064 <pwmAngleCalc+0x3bc>)
 8000e7c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000e80:	e9c2 3400 	strd	r3, r4, [r2]
 8000e84:	e049      	b.n	8000f1a <pwmAngleCalc+0x272>
    }
    else
    {
        if (averageChoice == 1)
 8000e86:	4b78      	ldr	r3, [pc, #480]	; (8001068 <pwmAngleCalc+0x3c0>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d145      	bne.n	8000f1a <pwmAngleCalc+0x272>
        {
            if (fabs(pitch - pitchStored) < ANGAVERAGE)
 8000e8e:	4b74      	ldr	r3, [pc, #464]	; (8001060 <pwmAngleCalc+0x3b8>)
 8000e90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4623      	mov	r3, r4
 8000e98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e9c:	f002 fd54 	bl	8003948 <__aeabi_dsub>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	460c      	mov	r4, r1
 8000ea4:	4698      	mov	r8, r3
 8000ea6:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	4b6f      	ldr	r3, [pc, #444]	; (800106c <pwmAngleCalc+0x3c4>)
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	4649      	mov	r1, r9
 8000eb4:	f003 f96e 	bl	8004194 <__aeabi_dcmplt>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d005      	beq.n	8000eca <pwmAngleCalc+0x222>
            {
                pitch = pitchStored;
 8000ebe:	4b68      	ldr	r3, [pc, #416]	; (8001060 <pwmAngleCalc+0x3b8>)
 8000ec0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ec4:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8000ec8:	e004      	b.n	8000ed4 <pwmAngleCalc+0x22c>
            }
            else
            {
                pitchStored = pitch;
 8000eca:	4a65      	ldr	r2, [pc, #404]	; (8001060 <pwmAngleCalc+0x3b8>)
 8000ecc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000ed0:	e9c2 3400 	strd	r3, r4, [r2]
            }

            if (fabs(roll - rollStored) < ANGAVERAGE)
 8000ed4:	4b63      	ldr	r3, [pc, #396]	; (8001064 <pwmAngleCalc+0x3bc>)
 8000ed6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000eda:	461a      	mov	r2, r3
 8000edc:	4623      	mov	r3, r4
 8000ede:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000ee2:	f002 fd31 	bl	8003948 <__aeabi_dsub>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460c      	mov	r4, r1
 8000eea:	461d      	mov	r5, r3
 8000eec:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	4b5d      	ldr	r3, [pc, #372]	; (800106c <pwmAngleCalc+0x3c4>)
 8000ef6:	4628      	mov	r0, r5
 8000ef8:	4631      	mov	r1, r6
 8000efa:	f003 f94b 	bl	8004194 <__aeabi_dcmplt>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d005      	beq.n	8000f10 <pwmAngleCalc+0x268>
            {
                roll = rollStored;
 8000f04:	4b57      	ldr	r3, [pc, #348]	; (8001064 <pwmAngleCalc+0x3bc>)
 8000f06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f0a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8000f0e:	e004      	b.n	8000f1a <pwmAngleCalc+0x272>
            }
            else
            {
                pitchStored = pitch;
 8000f10:	4a53      	ldr	r2, [pc, #332]	; (8001060 <pwmAngleCalc+0x3b8>)
 8000f12:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000f16:	e9c2 3400 	strd	r3, r4, [r2]
            }
        }
    }

    startup++;
 8000f1a:	4b50      	ldr	r3, [pc, #320]	; (800105c <pwmAngleCalc+0x3b4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a4e      	ldr	r2, [pc, #312]	; (800105c <pwmAngleCalc+0x3b4>)
 8000f22:	6013      	str	r3, [r2, #0]

	// final signal values 

    signal1 = (90.00+roll) * SERVOUOLINEAR + SERUPLO0;
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	4b51      	ldr	r3, [pc, #324]	; (8001070 <pwmAngleCalc+0x3c8>)
 8000f2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000f2e:	f002 fd0d 	bl	800394c <__adddf3>
 8000f32:	4603      	mov	r3, r0
 8000f34:	460c      	mov	r4, r1
 8000f36:	4618      	mov	r0, r3
 8000f38:	4621      	mov	r1, r4
 8000f3a:	a345      	add	r3, pc, #276	; (adr r3, 8001050 <pwmAngleCalc+0x3a8>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f002 feb6 	bl	8003cb0 <__aeabi_dmul>
 8000f44:	4603      	mov	r3, r0
 8000f46:	460c      	mov	r4, r1
 8000f48:	4618      	mov	r0, r3
 8000f4a:	4621      	mov	r1, r4
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	4b48      	ldr	r3, [pc, #288]	; (8001074 <pwmAngleCalc+0x3cc>)
 8000f52:	f002 fcfb 	bl	800394c <__adddf3>
 8000f56:	4603      	mov	r3, r0
 8000f58:	460c      	mov	r4, r1
 8000f5a:	4a47      	ldr	r2, [pc, #284]	; (8001078 <pwmAngleCalc+0x3d0>)
 8000f5c:	e9c2 3400 	strd	r3, r4, [r2]
    signal2 = (90.00+pitch) * SERVOLOLINEAR + SERVOLO0;
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	4b42      	ldr	r3, [pc, #264]	; (8001070 <pwmAngleCalc+0x3c8>)
 8000f66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f6a:	f002 fcef 	bl	800394c <__adddf3>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	460c      	mov	r4, r1
 8000f72:	4618      	mov	r0, r3
 8000f74:	4621      	mov	r1, r4
 8000f76:	a336      	add	r3, pc, #216	; (adr r3, 8001050 <pwmAngleCalc+0x3a8>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	f002 fe98 	bl	8003cb0 <__aeabi_dmul>
 8000f80:	4603      	mov	r3, r0
 8000f82:	460c      	mov	r4, r1
 8000f84:	4618      	mov	r0, r3
 8000f86:	4621      	mov	r1, r4
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	4b39      	ldr	r3, [pc, #228]	; (8001074 <pwmAngleCalc+0x3cc>)
 8000f8e:	f002 fcdd 	bl	800394c <__adddf3>
 8000f92:	4603      	mov	r3, r0
 8000f94:	460c      	mov	r4, r1
 8000f96:	4a39      	ldr	r2, [pc, #228]	; (800107c <pwmAngleCalc+0x3d4>)
 8000f98:	e9c2 3400 	strd	r3, r4, [r2]

    signal1 = (int)(signal1 * RNDFACTOR + 0.5) / RNDFACTOR;
 8000f9c:	4b36      	ldr	r3, [pc, #216]	; (8001078 <pwmAngleCalc+0x3d0>)
 8000f9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	4b36      	ldr	r3, [pc, #216]	; (8001080 <pwmAngleCalc+0x3d8>)
 8000fa8:	f002 fe82 	bl	8003cb0 <__aeabi_dmul>
 8000fac:	4603      	mov	r3, r0
 8000fae:	460c      	mov	r4, r1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	4b32      	ldr	r3, [pc, #200]	; (8001084 <pwmAngleCalc+0x3dc>)
 8000fba:	f002 fcc7 	bl	800394c <__adddf3>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460c      	mov	r4, r1
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	f003 f923 	bl	8004210 <__aeabi_d2iz>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 fe09 	bl	8003be4 <__aeabi_i2d>
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <pwmAngleCalc+0x3d8>)
 8000fd8:	f002 ff94 	bl	8003f04 <__aeabi_ddiv>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	460c      	mov	r4, r1
 8000fe0:	4a25      	ldr	r2, [pc, #148]	; (8001078 <pwmAngleCalc+0x3d0>)
 8000fe2:	e9c2 3400 	strd	r3, r4, [r2]
    signal2 = (int)(signal2 * RNDFACTOR + 0.5) / RNDFACTOR;
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <pwmAngleCalc+0x3d4>)
 8000fe8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	4b23      	ldr	r3, [pc, #140]	; (8001080 <pwmAngleCalc+0x3d8>)
 8000ff2:	f002 fe5d 	bl	8003cb0 <__aeabi_dmul>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	460c      	mov	r4, r1
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	4621      	mov	r1, r4
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <pwmAngleCalc+0x3dc>)
 8001004:	f002 fca2 	bl	800394c <__adddf3>
 8001008:	4603      	mov	r3, r0
 800100a:	460c      	mov	r4, r1
 800100c:	4618      	mov	r0, r3
 800100e:	4621      	mov	r1, r4
 8001010:	f003 f8fe 	bl	8004210 <__aeabi_d2iz>
 8001014:	4603      	mov	r3, r0
 8001016:	4618      	mov	r0, r3
 8001018:	f002 fde4 	bl	8003be4 <__aeabi_i2d>
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <pwmAngleCalc+0x3d8>)
 8001022:	f002 ff6f 	bl	8003f04 <__aeabi_ddiv>
 8001026:	4603      	mov	r3, r0
 8001028:	460c      	mov	r4, r1
 800102a:	4a14      	ldr	r2, [pc, #80]	; (800107c <pwmAngleCalc+0x3d4>)
 800102c:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001030:	bf00      	nop
 8001032:	3734      	adds	r7, #52	; 0x34
 8001034:	46bd      	mov	sp, r7
 8001036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800103a:	bf00      	nop
 800103c:	f3af 8000 	nop.w
 8001040:	54524550 	.word	0x54524550
 8001044:	400921fb 	.word	0x400921fb
 8001048:	a14cec42 	.word	0xa14cec42
 800104c:	3fab1af3 	.word	0x3fab1af3
 8001050:	9999999a 	.word	0x9999999a
 8001054:	3fa99999 	.word	0x3fa99999
 8001058:	40668000 	.word	0x40668000
 800105c:	20000aac 	.word	0x20000aac
 8001060:	20000a58 	.word	0x20000a58
 8001064:	20000a60 	.word	0x20000a60
 8001068:	20000ad6 	.word	0x20000ad6
 800106c:	400c0000 	.word	0x400c0000
 8001070:	40568000 	.word	0x40568000
 8001074:	40080000 	.word	0x40080000
 8001078:	20000ae0 	.word	0x20000ae0
 800107c:	20000ac8 	.word	0x20000ac8
 8001080:	40590000 	.word	0x40590000
 8001084:	3fe00000 	.word	0x3fe00000
 8001088:	00000000 	.word	0x00000000
 800108c:	40bffe00 	.word	0x40bffe00

08001090 <readButtonDebounce>:
 * @param	none
 * @return	none
 *
 */
void readButtonDebounce()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
    readButtonDebounceXMC();
 8001094:	f000 fa64 	bl	8001560 <readButtonDebounceXMC>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}

0800109c <inputInit>:
 * @param	none
 * @return	none
 *
 */
void inputInit()
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
    inputInitXMC();
 80010a0:	f000 fae8 	bl	8001674 <inputInitXMC>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <circularAdd>:
 * @brief  	add element to circular buffer
 * @param  	8 bit value for buffer
 * @return 	1 if OK, 0 if KO
 */
uint8_t circularAdd (uint8_t item)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
    if (full)
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <circularAdd+0x6c>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <circularAdd+0x16>
    {
        return 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e023      	b.n	8001106 <circularAdd+0x5e>
    }
    inix = (inix + 1) % CBSIZE;
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <circularAdd+0x70>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <circularAdd+0x74>)
 80010c6:	fb83 1302 	smull	r1, r3, r3, r2
 80010ca:	1099      	asrs	r1, r3, #2
 80010cc:	17d3      	asrs	r3, r2, #31
 80010ce:	1ac9      	subs	r1, r1, r3
 80010d0:	460b      	mov	r3, r1
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	1ad1      	subs	r1, r2, r3
 80010da:	b2ca      	uxtb	r2, r1
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <circularAdd+0x70>)
 80010de:	701a      	strb	r2, [r3, #0]
    cb[inix] = item;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <circularAdd+0x70>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <circularAdd+0x78>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	5453      	strb	r3, [r2, r1]
    if (inix == outix)
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <circularAdd+0x70>)
 80010ee:	781a      	ldrb	r2, [r3, #0]
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <circularAdd+0x7c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d102      	bne.n	80010fe <circularAdd+0x56>
    {
        full = 1;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <circularAdd+0x6c>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
    }
    empty = 0;
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <circularAdd+0x80>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
    return 1;
 8001104:	2301      	movs	r3, #1
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000ab0 	.word	0x20000ab0
 8001118:	20000ad2 	.word	0x20000ad2
 800111c:	66666667 	.word	0x66666667
 8001120:	20000ab4 	.word	0x20000ab4
 8001124:	20000aa9 	.word	0x20000aa9
 8001128:	20000ae8 	.word	0x20000ae8

0800112c <circularGet>:
 * @brief 	read element from circular buffer
 * @param 	pointer to the 8-bit value
 * @return 	1 if OK, 0 if KO
 */
uint8_t circularGet (uint8_t *pItem)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    if (empty)
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <circularGet+0x6c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <circularGet+0x14>
    {
        return 0;
 800113c:	2300      	movs	r3, #0
 800113e:	e024      	b.n	800118a <circularGet+0x5e>
    }
    outix = (outix + 1) % CBSIZE;
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <circularGet+0x70>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <circularGet+0x74>)
 8001148:	fb83 1302 	smull	r1, r3, r3, r2
 800114c:	1099      	asrs	r1, r3, #2
 800114e:	17d3      	asrs	r3, r2, #31
 8001150:	1ac9      	subs	r1, r1, r3
 8001152:	460b      	mov	r3, r1
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	1ad1      	subs	r1, r2, r3
 800115c:	b2ca      	uxtb	r2, r1
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <circularGet+0x70>)
 8001160:	701a      	strb	r2, [r3, #0]
    *pItem = cb[outix];
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <circularGet+0x70>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <circularGet+0x78>)
 800116a:	5c9a      	ldrb	r2, [r3, r2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	701a      	strb	r2, [r3, #0]
    if (outix == inix)
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <circularGet+0x70>)
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <circularGet+0x7c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d102      	bne.n	8001182 <circularGet+0x56>
    {
        empty = 1;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <circularGet+0x6c>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
    }
    full = 0;
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <circularGet+0x80>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
    return 1;
 8001188:	2301      	movs	r3, #1
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000ae8 	.word	0x20000ae8
 800119c:	20000aa9 	.word	0x20000aa9
 80011a0:	66666667 	.word	0x66666667
 80011a4:	20000ab4 	.word	0x20000ab4
 80011a8:	20000ad2 	.word	0x20000ad2
 80011ac:	20000ab0 	.word	0x20000ab0

080011b0 <P1_1_set_mode>:

__STATIC_INLINE uint32_t P1_0_read(void){
    return(PORT1->IN & 0x00000001UL);
}

__STATIC_INLINE void P1_1_set_mode(uint8_t mode){
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
    PORT1->IOCR0 &= ~0x0000f800UL;
 80011ba:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <P1_1_set_mode+0x30>)
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <P1_1_set_mode+0x30>)
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80011c4:	6113      	str	r3, [r2, #16]
    PORT1->IOCR0 |= mode << 8;
 80011c6:	4906      	ldr	r1, [pc, #24]	; (80011e0 <P1_1_set_mode+0x30>)
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <P1_1_set_mode+0x30>)
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	79fa      	ldrb	r2, [r7, #7]
 80011ce:	0212      	lsls	r2, r2, #8
 80011d0:	4313      	orrs	r3, r2
 80011d2:	610b      	str	r3, [r1, #16]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	48028100 	.word	0x48028100

080011e4 <P1_1_set_driver_strength>:

__STATIC_INLINE void P1_1_set_driver_strength(uint8_t strength){
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
    PORT1->PDR0 &= ~0x00000070UL;
 80011ee:	4a09      	ldr	r2, [pc, #36]	; (8001214 <P1_1_set_driver_strength+0x30>)
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <P1_1_set_driver_strength+0x30>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
    PORT1->PDR0 |= strength << 4;
 80011fa:	4906      	ldr	r1, [pc, #24]	; (8001214 <P1_1_set_driver_strength+0x30>)
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <P1_1_set_driver_strength+0x30>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	79fa      	ldrb	r2, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	4313      	orrs	r3, r2
 8001206:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	48028100 	.word	0x48028100

08001218 <P1_1_reset>:

__STATIC_INLINE void P1_1_set(void){
    PORT1->OMR = 0x00000002UL;
}

__STATIC_INLINE void P1_1_reset(void){
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
    PORT1->OMR = 0x00020000UL;
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <P1_1_reset+0x18>)
 800121e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001222:	605a      	str	r2, [r3, #4]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	48028100 	.word	0x48028100

08001234 <P1_2_set_mode>:

__STATIC_INLINE uint32_t P1_1_read(void){
    return(PORT1->IN & 0x00000002UL);
}

__STATIC_INLINE void P1_2_set_mode(uint8_t mode){
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
    PORT1->IOCR0 &= ~0x00f80000UL;
 800123e:	4a09      	ldr	r2, [pc, #36]	; (8001264 <P1_2_set_mode+0x30>)
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <P1_2_set_mode+0x30>)
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8001248:	6113      	str	r3, [r2, #16]
    PORT1->IOCR0 |= mode << 16;
 800124a:	4906      	ldr	r1, [pc, #24]	; (8001264 <P1_2_set_mode+0x30>)
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <P1_2_set_mode+0x30>)
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	0412      	lsls	r2, r2, #16
 8001254:	4313      	orrs	r3, r2
 8001256:	610b      	str	r3, [r1, #16]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	48028100 	.word	0x48028100

08001268 <P1_2_set_driver_strength>:

__STATIC_INLINE void P1_2_set_driver_strength(uint8_t strength){
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
    PORT1->PDR0 &= ~0x00000700UL;
 8001272:	4a09      	ldr	r2, [pc, #36]	; (8001298 <P1_2_set_driver_strength+0x30>)
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <P1_2_set_driver_strength+0x30>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
    PORT1->PDR0 |= strength << 8;
 800127e:	4906      	ldr	r1, [pc, #24]	; (8001298 <P1_2_set_driver_strength+0x30>)
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <P1_2_set_driver_strength+0x30>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	79fa      	ldrb	r2, [r7, #7]
 8001286:	0212      	lsls	r2, r2, #8
 8001288:	4313      	orrs	r3, r2
 800128a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	48028100 	.word	0x48028100

0800129c <P1_2_reset>:

__STATIC_INLINE void P1_2_set(void){
    PORT1->OMR = 0x00000004UL;
}

__STATIC_INLINE void P1_2_reset(void){
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
    PORT1->OMR = 0x00040000UL;
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <P1_2_reset+0x18>)
 80012a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012a6:	605a      	str	r2, [r3, #4]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	48028100 	.word	0x48028100

080012b8 <initServoPWMXMC>:
 * @param	none
 * @return	none
 *
 */
void initServoPWMXMC()
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
    // onboard alternate function 3 at CCU40 slice 1 = CCU40.OUT1 = CCU40.CC41
    // onboard alternate function 3 at CCU40 slice 2 = CCU40.OUT2 = CCU40.CC42

    P1_1_set_mode(OUTPUT_PP_AF3);
 80012bc:	2098      	movs	r0, #152	; 0x98
 80012be:	f7ff ff77 	bl	80011b0 <P1_1_set_mode>
    P1_1_set_driver_strength(STRONG);
 80012c2:	2002      	movs	r0, #2
 80012c4:	f7ff ff8e 	bl	80011e4 <P1_1_set_driver_strength>
    P1_1_reset();
 80012c8:	f7ff ffa6 	bl	8001218 <P1_1_reset>

    P1_2_set_mode(OUTPUT_PP_AF3);
 80012cc:	2098      	movs	r0, #152	; 0x98
 80012ce:	f7ff ffb1 	bl	8001234 <P1_2_set_mode>
    P1_2_set_driver_strength(STRONG);
 80012d2:	2002      	movs	r0, #2
 80012d4:	f7ff ffc8 	bl	8001268 <P1_2_set_driver_strength>
    P1_2_reset();
 80012d8:	f7ff ffe0 	bl	800129c <P1_2_reset>

    // setup CC40 unit with shadow transfer

    SCU_RESET->PRSET0 |= (1 << SCU_RESET_PRSET0_CCU40RS_Pos);		// peripheral 0 reset set - CCU40RS - CCU40 timer
 80012dc:	4a2e      	ldr	r2, [pc, #184]	; (8001398 <initServoPWMXMC+0xe0>)
 80012de:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <initServoPWMXMC+0xe0>)
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	6113      	str	r3, [r2, #16]
    SCU_RESET->PRCLR0 |= (1 << SCU_RESET_PRCLR0_CCU40RS_Pos);		// peripheral 0 reset clear - CCU40RS - CCU40 timer
 80012e8:	4a2b      	ldr	r2, [pc, #172]	; (8001398 <initServoPWMXMC+0xe0>)
 80012ea:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <initServoPWMXMC+0xe0>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6153      	str	r3, [r2, #20]
    SCU_CLK->CLKSET = (1 << SCU_CLK_CLKSET_CCUCEN_Pos); 			// clock enable register CCUCEN - CCU clock enabled
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <initServoPWMXMC+0xe4>)
 80012f6:	2210      	movs	r2, #16
 80012f8:	605a      	str	r2, [r3, #4]
    CCU40->GIDLC |= (1 << CCU4_GIDLC_SPRB_Pos); 					// global idle clear - SPRB - prescaler run bit set
 80012fa:	4a29      	ldr	r2, [pc, #164]	; (80013a0 <initServoPWMXMC+0xe8>)
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <initServoPWMXMC+0xe8>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	60d3      	str	r3, [r2, #12]

    CCU40_CC41->PSC = PRESCALER;
 8001306:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <initServoPWMXMC+0xec>)
 8001308:	2208      	movs	r2, #8
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
    CCU40_CC42->PSC = PRESCALER; 									// prescaler control - 0 - CCU40.OUT2
 800130c:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <initServoPWMXMC+0xf0>)
 800130e:	2208      	movs	r2, #8
 8001310:	625a      	str	r2, [r3, #36]	; 0x24

    CCU40_CC41->TC |= (1 << CCU4_CC4_TC_CLST_Pos);
 8001312:	4a24      	ldr	r2, [pc, #144]	; (80013a4 <initServoPWMXMC+0xec>)
 8001314:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <initServoPWMXMC+0xec>)
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6153      	str	r3, [r2, #20]
    CCU40_CC42->TC |= (1 << CCU4_CC4_TC_CLST_Pos); 					// slice timer control - CLST - shadow transfer on clear - CCU40.OUT2
 800131e:	4a22      	ldr	r2, [pc, #136]	; (80013a8 <initServoPWMXMC+0xf0>)
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <initServoPWMXMC+0xf0>)
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	6153      	str	r3, [r2, #20]

    CCU40->GIDLC |= (1 << CCU4_GIDLC_CS1I_Pos);
 800132a:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <initServoPWMXMC+0xe8>)
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <initServoPWMXMC+0xe8>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	60d3      	str	r3, [r2, #12]
    CCU40->GIDLC |= (1 << CCU4_GIDLC_CS2I_Pos); 					// global idle clear - C2SI - CC43 idle mode clear - CCU40.OUT2
 8001336:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <initServoPWMXMC+0xe8>)
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <initServoPWMXMC+0xe8>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	60d3      	str	r3, [r2, #12]

    SCU_GENERAL->CCUCON |= (1 << SCU_GENERAL_CCUCON_GSC40_Pos);		// CCU control register - GSC40 - global start control CCU40
 8001342:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <initServoPWMXMC+0xf4>)
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <initServoPWMXMC+0xf4>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c

    CCU40_CC41->PRS = COUNTER;
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <initServoPWMXMC+0xec>)
 8001350:	f242 429f 	movw	r2, #9375	; 0x249f
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
    CCU40_CC42->PRS = COUNTER; 										// period register - timer shadow period value - CCU40.OUT2
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <initServoPWMXMC+0xf0>)
 8001358:	f242 429f 	movw	r2, #9375	; 0x249f
 800135c:	635a      	str	r2, [r3, #52]	; 0x34

    CCU40_CC41->TCSET = 1;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <initServoPWMXMC+0xec>)
 8001360:	2201      	movs	r2, #1
 8001362:	60da      	str	r2, [r3, #12]
    CCU40_CC42->TCSET = 1;											// slice timer run set - CCU40.OUT2
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <initServoPWMXMC+0xf0>)
 8001366:	2201      	movs	r2, #1
 8001368:	60da      	str	r2, [r3, #12]

    CCU40_CC41->CRS = COUNTER;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <initServoPWMXMC+0xec>)
 800136c:	f242 429f 	movw	r2, #9375	; 0x249f
 8001370:	63da      	str	r2, [r3, #60]	; 0x3c
    CCU40_CC42->CRS = COUNTER;										// compare register - timer shadow compare value - CCU40.OUT2
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <initServoPWMXMC+0xf0>)
 8001374:	f242 429f 	movw	r2, #9375	; 0x249f
 8001378:	63da      	str	r2, [r3, #60]	; 0x3c

    CCU40->GCSS |= (1 << CCU4_GCSS_S1SE_Pos);
 800137a:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <initServoPWMXMC+0xe8>)
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <initServoPWMXMC+0xe8>)
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	f043 0310 	orr.w	r3, r3, #16
 8001384:	6113      	str	r3, [r2, #16]
    CCU40->GCSS |= (1 << CCU4_GCSS_S2SE_Pos); 						// global channel set - S3SE slice 2 shadow transfer set enable
 8001386:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <initServoPWMXMC+0xe8>)
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <initServoPWMXMC+0xe8>)
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	6113      	str	r3, [r2, #16]
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	50004400 	.word	0x50004400
 800139c:	50004600 	.word	0x50004600
 80013a0:	4000c000 	.word	0x4000c000
 80013a4:	4000c200 	.word	0x4000c200
 80013a8:	4000c300 	.word	0x4000c300
 80013ac:	50004000 	.word	0x50004000

080013b0 <pwmXMC>:
 * @return	1 if wrong PWM dutycycle given <br>
			0 if correct PWM dutycycle given <br>
 *
 */
uint8_t pwmXMC(double dutycycle, uint8_t out)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80013ba:	4613      	mov	r3, r2
 80013bc:	71fb      	strb	r3, [r7, #7]
    double dcCalc = 0;
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	f04f 0400 	mov.w	r4, #0
 80013c6:	e9c7 3406 	strd	r3, r4, [r7, #24]
    uint32_t intdcCalc = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]

	// calculate and set PWM dutycycle

    if (dutycycle < 0 || dutycycle > 100)
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013da:	f002 fedb 	bl	8004194 <__aeabi_dcmplt>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d109      	bne.n	80013f8 <pwmXMC+0x48>
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	4b29      	ldr	r3, [pc, #164]	; (8001490 <pwmXMC+0xe0>)
 80013ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ee:	f002 feef 	bl	80041d0 <__aeabi_dcmpgt>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <pwmXMC+0x4c>
    {
        return 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e03a      	b.n	8001472 <pwmXMC+0xc2>
    }

    dcCalc = COUNTER - (COUNTER * dutycycle * 0.01);
 80013fc:	a320      	add	r3, pc, #128	; (adr r3, 8001480 <pwmXMC+0xd0>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001406:	f002 fc53 	bl	8003cb0 <__aeabi_dmul>
 800140a:	4603      	mov	r3, r0
 800140c:	460c      	mov	r4, r1
 800140e:	4618      	mov	r0, r3
 8001410:	4621      	mov	r1, r4
 8001412:	a31d      	add	r3, pc, #116	; (adr r3, 8001488 <pwmXMC+0xd8>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f002 fc4a 	bl	8003cb0 <__aeabi_dmul>
 800141c:	4603      	mov	r3, r0
 800141e:	460c      	mov	r4, r1
 8001420:	461a      	mov	r2, r3
 8001422:	4623      	mov	r3, r4
 8001424:	a116      	add	r1, pc, #88	; (adr r1, 8001480 <pwmXMC+0xd0>)
 8001426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800142a:	f002 fa8d 	bl	8003948 <__aeabi_dsub>
 800142e:	4603      	mov	r3, r0
 8001430:	460c      	mov	r4, r1
 8001432:	e9c7 3406 	strd	r3, r4, [r7, #24]
    intdcCalc = (uint32_t)dcCalc;
 8001436:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800143a:	f002 ff11 	bl	8004260 <__aeabi_d2uiz>
 800143e:	4603      	mov	r3, r0
 8001440:	617b      	str	r3, [r7, #20]

    if (out == 0)
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d10a      	bne.n	800145e <pwmXMC+0xae>
    {
        CCU40_CC42->CRS = intdcCalc;									// compare register - timer shadow compare value - CCU40.OUT2
 8001448:	4a12      	ldr	r2, [pc, #72]	; (8001494 <pwmXMC+0xe4>)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	63d3      	str	r3, [r2, #60]	; 0x3c
        CCU40->GCSS |= (1<<CCU4_GCSS_S2SE_Pos); 						// global channel set - S2SE slice 2 shadow transfer set enable
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <pwmXMC+0xe8>)
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <pwmXMC+0xe8>)
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001458:	6113      	str	r3, [r2, #16]
        return 0;
 800145a:	2300      	movs	r3, #0
 800145c:	e009      	b.n	8001472 <pwmXMC+0xc2>
    }
    else
    {
        CCU40_CC41->CRS = intdcCalc;									// compare register - timer shadow compare value - CCU40.OUT1
 800145e:	4a0f      	ldr	r2, [pc, #60]	; (800149c <pwmXMC+0xec>)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	63d3      	str	r3, [r2, #60]	; 0x3c
        CCU40->GCSS |= (1<<CCU4_GCSS_S1SE_Pos);							// global channel set - S1SE slice 1 shadow transfer set enable
 8001464:	4a0c      	ldr	r2, [pc, #48]	; (8001498 <pwmXMC+0xe8>)
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <pwmXMC+0xe8>)
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	f043 0310 	orr.w	r3, r3, #16
 800146e:	6113      	str	r3, [r2, #16]
        return 0;
 8001470:	2300      	movs	r3, #0
    }
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd90      	pop	{r4, r7, pc}
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w
 8001480:	00000000 	.word	0x00000000
 8001484:	40c24f80 	.word	0x40c24f80
 8001488:	47ae147b 	.word	0x47ae147b
 800148c:	3f847ae1 	.word	0x3f847ae1
 8001490:	40590000 	.word	0x40590000
 8001494:	4000c300 	.word	0x4000c300
 8001498:	4000c000 	.word	0x4000c000
 800149c:	4000c200 	.word	0x4000c200

080014a0 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	2201      	movs	r2, #1
 80014b0:	409a      	lsls	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	605a      	str	r2, [r3, #4]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop

080014c4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014d6:	409a      	lsls	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	605a      	str	r2, [r3, #4]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 80014f4:	78fb      	ldrb	r3, [r7, #3]
 80014f6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80014fa:	409a      	lsls	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	605a      	str	r2, [r3, #4]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	fa22 f303 	lsr.w	r3, r2, r3
 8001522:	f003 0301 	and.w	r3, r3, #1
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop

08001534 <outputInitXMC>:
 * @param	none
 * @return	none
 *
 */
void outputInitXMC(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
	// config LED output

    XMC_GPIO_CONFIG_t config_out;
    config_out.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	713b      	strb	r3, [r7, #4]
    config_out.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 800153e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001542:	60bb      	str	r3, [r7, #8]
    config_out.output_strength = XMC_GPIO_OUTPUT_STRENGTH_WEAK;
 8001544:	2307      	movs	r3, #7
 8001546:	733b      	strb	r3, [r7, #12]
    XMC_GPIO_Init(LED1, &config_out);
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	461a      	mov	r2, r3
 800154c:	2100      	movs	r1, #0
 800154e:	4803      	ldr	r0, [pc, #12]	; (800155c <outputInitXMC+0x28>)
 8001550:	f001 faac 	bl	8002aac <XMC_GPIO_Init>
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	48028100 	.word	0x48028100

08001560 <readButtonDebounceXMC>:
 * @param	none
 * @return	none
 *
 */
void readButtonDebounceXMC()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	// read both onboard buttons with debounce

    if ((XMC_GPIO_GetInput(BUTTON1) == 0) && (button1pressed == 0))
 8001564:	210e      	movs	r1, #14
 8001566:	4830      	ldr	r0, [pc, #192]	; (8001628 <readButtonDebounceXMC+0xc8>)
 8001568:	f7ff ffd0 	bl	800150c <XMC_GPIO_GetInput>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d106      	bne.n	8001580 <readButtonDebounceXMC+0x20>
 8001572:	4b2e      	ldr	r3, [pc, #184]	; (800162c <readButtonDebounceXMC+0xcc>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <readButtonDebounceXMC+0x20>
    {
        button1pressed = 1;
 800157a:	4b2c      	ldr	r3, [pc, #176]	; (800162c <readButtonDebounceXMC+0xcc>)
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON1) == 0) && (button1pressed == 1))
 8001580:	210e      	movs	r1, #14
 8001582:	4829      	ldr	r0, [pc, #164]	; (8001628 <readButtonDebounceXMC+0xc8>)
 8001584:	f7ff ffc2 	bl	800150c <XMC_GPIO_GetInput>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d106      	bne.n	800159c <readButtonDebounceXMC+0x3c>
 800158e:	4b27      	ldr	r3, [pc, #156]	; (800162c <readButtonDebounceXMC+0xcc>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d102      	bne.n	800159c <readButtonDebounceXMC+0x3c>
    {
        button1pressed = 2;
 8001596:	4b25      	ldr	r3, [pc, #148]	; (800162c <readButtonDebounceXMC+0xcc>)
 8001598:	2202      	movs	r2, #2
 800159a:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON1) == 1) && (button1pressed == 2))
 800159c:	210e      	movs	r1, #14
 800159e:	4822      	ldr	r0, [pc, #136]	; (8001628 <readButtonDebounceXMC+0xc8>)
 80015a0:	f7ff ffb4 	bl	800150c <XMC_GPIO_GetInput>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d10c      	bne.n	80015c4 <readButtonDebounceXMC+0x64>
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <readButtonDebounceXMC+0xcc>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d108      	bne.n	80015c4 <readButtonDebounceXMC+0x64>
    {
        if (circularAdd(BUTTON1INT) == 1)
 80015b2:	200e      	movs	r0, #14
 80015b4:	f7ff fd78 	bl	80010a8 <circularAdd>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d102      	bne.n	80015c4 <readButtonDebounceXMC+0x64>
        {
            button1pressed = 0;
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <readButtonDebounceXMC+0xcc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
        }
    }

    if ((XMC_GPIO_GetInput(BUTTON2) == 0) && (button2pressed == 0))
 80015c4:	210f      	movs	r1, #15
 80015c6:	4818      	ldr	r0, [pc, #96]	; (8001628 <readButtonDebounceXMC+0xc8>)
 80015c8:	f7ff ffa0 	bl	800150c <XMC_GPIO_GetInput>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d106      	bne.n	80015e0 <readButtonDebounceXMC+0x80>
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <readButtonDebounceXMC+0xd0>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <readButtonDebounceXMC+0x80>
    {
        button2pressed = 1;
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <readButtonDebounceXMC+0xd0>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON2) == 0) && (button2pressed == 1))
 80015e0:	210f      	movs	r1, #15
 80015e2:	4811      	ldr	r0, [pc, #68]	; (8001628 <readButtonDebounceXMC+0xc8>)
 80015e4:	f7ff ff92 	bl	800150c <XMC_GPIO_GetInput>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <readButtonDebounceXMC+0x9c>
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <readButtonDebounceXMC+0xd0>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d102      	bne.n	80015fc <readButtonDebounceXMC+0x9c>
    {
        button2pressed = 2;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <readButtonDebounceXMC+0xd0>)
 80015f8:	2202      	movs	r2, #2
 80015fa:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON2) == 1) && (button2pressed == 2))
 80015fc:	210f      	movs	r1, #15
 80015fe:	480a      	ldr	r0, [pc, #40]	; (8001628 <readButtonDebounceXMC+0xc8>)
 8001600:	f7ff ff84 	bl	800150c <XMC_GPIO_GetInput>
 8001604:	4603      	mov	r3, r0
 8001606:	2b01      	cmp	r3, #1
 8001608:	d10c      	bne.n	8001624 <readButtonDebounceXMC+0xc4>
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <readButtonDebounceXMC+0xd0>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d108      	bne.n	8001624 <readButtonDebounceXMC+0xc4>
    {
        if (circularAdd(BUTTON2INT) == 1)
 8001612:	200f      	movs	r0, #15
 8001614:	f7ff fd48 	bl	80010a8 <circularAdd>
 8001618:	4603      	mov	r3, r0
 800161a:	2b01      	cmp	r3, #1
 800161c:	d102      	bne.n	8001624 <readButtonDebounceXMC+0xc4>
        {
            button2pressed = 0;
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <readButtonDebounceXMC+0xd0>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	48028100 	.word	0x48028100
 800162c:	20000ad0 	.word	0x20000ad0
 8001630:	20000ac4 	.word	0x20000ac4

08001634 <ledSettingXMC>:
 *			other for LED toggle <br>
 * @return	none
 *
 */
void ledSettingXMC(uint8_t ledState)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	// LED settings

    if (ledState == 0)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d104      	bne.n	800164e <ledSettingXMC+0x1a>
    {
        XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
 8001644:	2100      	movs	r1, #0
 8001646:	480a      	ldr	r0, [pc, #40]	; (8001670 <ledSettingXMC+0x3c>)
 8001648:	f7ff ff3c 	bl	80014c4 <XMC_GPIO_SetOutputLow>
    }
    else
    {
        XMC_GPIO_ToggleOutput(LED1);
    }
}
 800164c:	e00b      	b.n	8001666 <ledSettingXMC+0x32>

    if (ledState == 0)
    {
        XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
    }
    else if (ledState == 1)
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d104      	bne.n	800165e <ledSettingXMC+0x2a>
    {
        XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
 8001654:	2100      	movs	r1, #0
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <ledSettingXMC+0x3c>)
 8001658:	f7ff ff22 	bl	80014a0 <XMC_GPIO_SetOutputHigh>
    }
    else
    {
        XMC_GPIO_ToggleOutput(LED1);
    }
}
 800165c:	e003      	b.n	8001666 <ledSettingXMC+0x32>
    {
        XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
    }
    else
    {
        XMC_GPIO_ToggleOutput(LED1);
 800165e:	2100      	movs	r1, #0
 8001660:	4803      	ldr	r0, [pc, #12]	; (8001670 <ledSettingXMC+0x3c>)
 8001662:	f7ff ff41 	bl	80014e8 <XMC_GPIO_ToggleOutput>
    }
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	48028100 	.word	0x48028100

08001674 <inputInitXMC>:
 * @param	none
 * @return	none
 *
 */
void inputInitXMC()
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
	// init onboard buttons

    XMC_GPIO_CONFIG_t config_in;
    config_in.mode = XMC_GPIO_MODE_INPUT_INVERTED_PULL_UP;
 800167a:	2330      	movs	r3, #48	; 0x30
 800167c:	713b      	strb	r3, [r7, #4]
    XMC_GPIO_Init(BUTTON1, &config_in);
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	461a      	mov	r2, r3
 8001682:	210e      	movs	r1, #14
 8001684:	4806      	ldr	r0, [pc, #24]	; (80016a0 <inputInitXMC+0x2c>)
 8001686:	f001 fa11 	bl	8002aac <XMC_GPIO_Init>
    XMC_GPIO_Init(BUTTON2, &config_in);
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	461a      	mov	r2, r3
 800168e:	210f      	movs	r1, #15
 8001690:	4803      	ldr	r0, [pc, #12]	; (80016a0 <inputInitXMC+0x2c>)
 8001692:	f001 fa0b 	bl	8002aac <XMC_GPIO_Init>
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	48028100 	.word	0x48028100

080016a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80016bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80016c4:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00b      	beq.n	80016e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016cc:	e000      	b.n	80016d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80016ce:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f9      	beq.n	80016ce <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80016da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop

080016f4 <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
    // P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
    // PORT2->HWSEL ... clear bits [3:2]
    PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 80016f8:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <initRetargetSwo+0x7c>)
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <initRetargetSwo+0x7c>)
 80016fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016fe:	f023 030c 	bic.w	r3, r3, #12
 8001702:	6753      	str	r3, [r2, #116]	; 0x74
    // PORT2->HWSEL ... set bit [2] -> HWO0
    PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 8001704:	4a1a      	ldr	r2, [pc, #104]	; (8001770 <initRetargetSwo+0x7c>)
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <initRetargetSwo+0x7c>)
 8001708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6753      	str	r3, [r2, #116]	; 0x74

    // Enable trace systems
    // Source: ARMv7-M Architecture Reference Manual
    // DEMCR = Debug Exception and Monitor Control Register
    //         TRCENA ... global enable for DWT and ITM blocks
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001710:	4a18      	ldr	r2, [pc, #96]	; (8001774 <initRetargetSwo+0x80>)
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <initRetargetSwo+0x80>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171a:	60d3      	str	r3, [r2, #12]
    // SWO baud rate prescaler value
    // ACPR = Asynchronous Clock Prescaler Register
    //        fSWO = fCPU / (SWOSCALAR + 1)
    //        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
    //        fCPU = 120MHz
    TPI->ACPR = 119UL;
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <initRetargetSwo+0x84>)
 800171e:	2277      	movs	r2, #119	; 0x77
 8001720:	611a      	str	r2, [r3, #16]
    // Source: ARMv7-M Architecture Reference Manual
    // SPPR = Selected Pin Control Register
    //        0x0 ... Synchronous Trace Port Mode
    //        0x1 ... Asynchronous Serial Wire Output (Manchester)
    //        0x2 ... Asynchronous Serial Wire Output (NRZ)
    TPI->SPPR = 0x2UL;
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <initRetargetSwo+0x84>)
 8001724:	2202      	movs	r2, #2
 8001726:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    // Source: ARM Cortex-M4 Processor Technical Reference Manual
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    // FFCR = Formatter and Flash Control Register
    //        0x0 ... continuous formatting disabled
    //        0x1 ... continuous formatting enabled
    TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 800172a:	4a13      	ldr	r2, [pc, #76]	; (8001778 <initRetargetSwo+0x84>)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <initRetargetSwo+0x84>)
 800172e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8001732:	f023 0302 	bic.w	r3, r3, #2
 8001736:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

    // Unlock ITM
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    ITM->LAR = 0xC5ACCE55;
 800173a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800173e:	4a0f      	ldr	r2, [pc, #60]	; (800177c <initRetargetSwo+0x88>)
 8001740:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TCR = Trace Control Register
    //       ITMENA ... enable ITM
    ITM->TCR |= ITM_TCR_ITMENA_Msk;
 8001744:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001748:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800174c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TER = Trace Enable Register
    //       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
    ITM->TER = 0xFFFFFFFF;
 8001758:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	48028200 	.word	0x48028200
 8001774:	e000edf0 	.word	0xe000edf0
 8001778:	e0040000 	.word	0xe0040000
 800177c:	c5acce55 	.word	0xc5acce55

08001780 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
    int i;

    for (i = 0; i < nbytes; i++) {
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e009      	b.n	80017a6 <_write+0x26>
        ITM_SendChar ( (*buf++));
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1c5a      	adds	r2, r3, #1
 8001796:	60ba      	str	r2, [r7, #8]
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff82 	bl	80016a4 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
    int i;

    for (i = 0; i < nbytes; i++) {
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3301      	adds	r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	dbf1      	blt.n	8001792 <_write+0x12>
        ITM_SendChar ( (*buf++));
    }
    return nbytes;
 80017ae:	687b      	ldr	r3, [r7, #4]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	70fb      	strb	r3, [r7, #3]
 80017c4:	4613      	mov	r3, r2
 80017c6:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80017c8:	78f8      	ldrb	r0, [r7, #3]
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	3306      	adds	r3, #6
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80017da:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80017dc:	431a      	orrs	r2, r3
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	1d83      	adds	r3, r0, #6
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001800:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f023 020f 	bic.w	r2, r3, #15
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8001840:	2104      	movs	r1, #4
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffe4 	bl	8001810 <XMC_USIC_CH_SetMode>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <XMC_I2C_CH_SetInputSource>:
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 *
 */
__STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT_t input, const uint8_t source)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
 800185c:	4613      	mov	r3, r2
 800185e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX0CR_DSEN_Msk;
 8001860:	78f8      	ldrb	r0, [r7, #3]
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	3306      	adds	r3, #6
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8001872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	1d83      	adds	r3, r0, #6
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8001880:	78ba      	ldrb	r2, [r7, #2]
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	4619      	mov	r1, r3
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ff96 	bl	80017b8 <XMC_USIC_CH_SetInputSource>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop

080018d0 <_init_i2c1_ch0>:
 *         P0_5 & P0_11
 *  @param none
 *  @return on success this function returns 0
 */
uint8_t _init_i2c1_ch0 (void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
    XMC_I2C_CH_Init (XMC_I2C1_CH0, &i2c_cfg);
 80018d4:	490e      	ldr	r1, [pc, #56]	; (8001910 <_init_i2c1_ch0+0x40>)
 80018d6:	480f      	ldr	r0, [pc, #60]	; (8001914 <_init_i2c1_ch0+0x44>)
 80018d8:	f001 fa62 	bl	8002da0 <XMC_I2C_CH_Init>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SDA, USIC1_C0_DX0_P0_5);
 80018dc:	2201      	movs	r2, #1
 80018de:	2100      	movs	r1, #0
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <_init_i2c1_ch0+0x44>)
 80018e2:	f7ff ffb5 	bl	8001850 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SCL, USIC1_C0_DX1_SCLKOUT);
 80018e6:	2206      	movs	r2, #6
 80018e8:	2101      	movs	r1, #1
 80018ea:	480a      	ldr	r0, [pc, #40]	; (8001914 <_init_i2c1_ch0+0x44>)
 80018ec:	f7ff ffb0 	bl	8001850 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_Start (XMC_I2C1_CH0);
 80018f0:	4808      	ldr	r0, [pc, #32]	; (8001914 <_init_i2c1_ch0+0x44>)
 80018f2:	f7ff ffa1 	bl	8001838 <XMC_I2C_CH_Start>

    XMC_GPIO_Init (P0_11, &i2c_scl);
 80018f6:	4a08      	ldr	r2, [pc, #32]	; (8001918 <_init_i2c1_ch0+0x48>)
 80018f8:	210b      	movs	r1, #11
 80018fa:	4808      	ldr	r0, [pc, #32]	; (800191c <_init_i2c1_ch0+0x4c>)
 80018fc:	f001 f8d6 	bl	8002aac <XMC_GPIO_Init>
    XMC_GPIO_Init (P0_5, &i2c_sda);
 8001900:	4a07      	ldr	r2, [pc, #28]	; (8001920 <_init_i2c1_ch0+0x50>)
 8001902:	2105      	movs	r1, #5
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <_init_i2c1_ch0+0x4c>)
 8001906:	f001 f8d1 	bl	8002aac <XMC_GPIO_Init>

    return 0;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000030 	.word	0x20000030
 8001914:	48020000 	.word	0x48020000
 8001918:	20000024 	.word	0x20000024
 800191c:	48028000 	.word	0x48028000
 8001920:	20000018 	.word	0x20000018

08001924 <_i2c_xfer>:
 *         rd_wr    ... I2C Read/Write direction
 *  @return read-value on a I2C read request or return write-value on I2C write
 *          request
 */
uint8_t _i2c_xfer (uint8_t id, uint8_t reg_addr, uint8_t i2c_data, _Bool rd_wr)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	4604      	mov	r4, r0
 800192c:	4608      	mov	r0, r1
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	4623      	mov	r3, r4
 8001934:	71fb      	strb	r3, [r7, #7]
 8001936:	4603      	mov	r3, r0
 8001938:	71bb      	strb	r3, [r7, #6]
 800193a:	460b      	mov	r3, r1
 800193c:	717b      	strb	r3, [r7, #5]
 800193e:	4613      	mov	r3, r2
 8001940:	713b      	strb	r3, [r7, #4]
    XMC_USIC_CH_t *channel;
    char _tmp_i2c_recv_ = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
    uint8_t id_tmp = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	73bb      	strb	r3, [r7, #14]

    channel = XMC_I2C1_CH0;
 800194a:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <_i2c_xfer+0x11c>)
 800194c:	60bb      	str	r3, [r7, #8]

    id_tmp = LIS3DH_RD_ADR;
 800194e:	2330      	movs	r3, #48	; 0x30
 8001950:	73bb      	strb	r3, [r7, #14]

    XMC_I2C_CH_MasterStart (channel, id_tmp, XMC_I2C_CH_CMD_WRITE);
 8001952:	7bbb      	ldrb	r3, [r7, #14]
 8001954:	b29b      	uxth	r3, r3
 8001956:	2200      	movs	r2, #0
 8001958:	4619      	mov	r1, r3
 800195a:	68b8      	ldr	r0, [r7, #8]
 800195c:	f001 faa4 	bl	8002ea8 <XMC_I2C_CH_MasterStart>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8001960:	bf00      	nop
 8001962:	68b8      	ldr	r0, [r7, #8]
 8001964:	f7ff ff96 	bl	8001894 <XMC_I2C_CH_GetStatusFlag>
 8001968:	4603      	mov	r3, r0
 800196a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f7      	beq.n	8001962 <_i2c_xfer+0x3e>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8001972:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	f7ff ff98 	bl	80018ac <XMC_I2C_CH_ClearStatusFlag>

    XMC_I2C_CH_MasterTransmit (channel, reg_addr);
 800197c:	79bb      	ldrb	r3, [r7, #6]
 800197e:	4619      	mov	r1, r3
 8001980:	68b8      	ldr	r0, [r7, #8]
 8001982:	f001 fb1f 	bl	8002fc4 <XMC_I2C_CH_MasterTransmit>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8001986:	bf00      	nop
 8001988:	68b8      	ldr	r0, [r7, #8]
 800198a:	f7ff ff83 	bl	8001894 <XMC_I2C_CH_GetStatusFlag>
 800198e:	4603      	mov	r3, r0
 8001990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f7      	beq.n	8001988 <_i2c_xfer+0x64>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8001998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800199c:	68b8      	ldr	r0, [r7, #8]
 800199e:	f7ff ff85 	bl	80018ac <XMC_I2C_CH_ClearStatusFlag>

    if (rd_wr) {
 80019a2:	793b      	ldrb	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d030      	beq.n	8001a0a <_i2c_xfer+0xe6>
        /* Read from REG */
        XMC_I2C_CH_MasterRepeatedStart (channel, id_tmp, XMC_I2C_CH_CMD_READ);
 80019a8:	7bbb      	ldrb	r3, [r7, #14]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2201      	movs	r2, #1
 80019ae:	4619      	mov	r1, r3
 80019b0:	68b8      	ldr	r0, [r7, #8]
 80019b2:	f001 faad 	bl	8002f10 <XMC_I2C_CH_MasterRepeatedStart>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 80019b6:	bf00      	nop
 80019b8:	68b8      	ldr	r0, [r7, #8]
 80019ba:	f7ff ff6b 	bl	8001894 <XMC_I2C_CH_GetStatusFlag>
 80019be:	4603      	mov	r3, r0
 80019c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f7      	beq.n	80019b8 <_i2c_xfer+0x94>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80019c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019cc:	68b8      	ldr	r0, [r7, #8]
 80019ce:	f7ff ff6d 	bl	80018ac <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterReceiveNack (channel);
 80019d2:	68b8      	ldr	r0, [r7, #8]
 80019d4:	f001 fb1c 	bl	8003010 <XMC_I2C_CH_MasterReceiveNack>

        while ( (XMC_USIC_CH_GetReceiveBufferStatus (channel) !=
 80019d8:	bf00      	nop
 80019da:	68b8      	ldr	r0, [r7, #8]
 80019dc:	f7ff ff0a 	bl	80017f4 <XMC_USIC_CH_GetReceiveBufferStatus>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019e6:	d006      	beq.n	80019f6 <_i2c_xfer+0xd2>
                 (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) && ( (uint32_t) XMC_USIC_CH_GetReceiveBufferStatus (channel)
 80019e8:	68b8      	ldr	r0, [r7, #8]
 80019ea:	f7ff ff03 	bl	80017f4 <XMC_USIC_CH_GetReceiveBufferStatus>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019f4:	d1f1      	bne.n	80019da <_i2c_xfer+0xb6>
                         != (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID0));

        _tmp_i2c_recv_ = XMC_I2C_CH_GetReceivedData (channel);
 80019f6:	68b8      	ldr	r0, [r7, #8]
 80019f8:	f001 fb30 	bl	800305c <XMC_I2C_CH_GetReceivedData>
 80019fc:	4603      	mov	r3, r0
 80019fe:	73fb      	strb	r3, [r7, #15]

        XMC_I2C_CH_MasterStop (channel);
 8001a00:	68b8      	ldr	r0, [r7, #8]
 8001a02:	f001 fab9 	bl	8002f78 <XMC_I2C_CH_MasterStop>

        return _tmp_i2c_recv_;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	e016      	b.n	8001a38 <_i2c_xfer+0x114>
    } else {
        /* Write to REG */
        XMC_I2C_CH_MasterTransmit (channel, i2c_data);
 8001a0a:	797b      	ldrb	r3, [r7, #5]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	68b8      	ldr	r0, [r7, #8]
 8001a10:	f001 fad8 	bl	8002fc4 <XMC_I2C_CH_MasterTransmit>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8001a14:	bf00      	nop
 8001a16:	68b8      	ldr	r0, [r7, #8]
 8001a18:	f7ff ff3c 	bl	8001894 <XMC_I2C_CH_GetStatusFlag>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f7      	beq.n	8001a16 <_i2c_xfer+0xf2>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8001a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a2a:	68b8      	ldr	r0, [r7, #8]
 8001a2c:	f7ff ff3e 	bl	80018ac <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterStop (channel);
 8001a30:	68b8      	ldr	r0, [r7, #8]
 8001a32:	f001 faa1 	bl	8002f78 <XMC_I2C_CH_MasterStop>

        return i2c_data;
 8001a36:	797b      	ldrb	r3, [r7, #5]
    }
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd90      	pop	{r4, r7, pc}
 8001a40:	48020000 	.word	0x48020000

08001a44 <initMEMSsensor>:
 * @param	none
 * @return	amount of errors if some occurred
 *
 */
uint8_t initMEMSsensor()
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
    uint8_t error = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	71fb      	strb	r3, [r7, #7]
    uint8_t response = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	71bb      	strb	r3, [r7, #6]

    //set ODR (turn ON device)
    if(LIS3DH_SetODR(LIS3DH_ODR_100Hz) == 1)
 8001a52:	2005      	movs	r0, #5
 8001a54:	f000 f9a2 	bl	8001d9c <LIS3DH_SetODR>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d103      	bne.n	8001a66 <initMEMSsensor+0x22>
    {
        printf("LIS3DH_SetODR done...\n");
 8001a5e:	4826      	ldr	r0, [pc, #152]	; (8001af8 <initMEMSsensor+0xb4>)
 8001a60:	f002 fd7c 	bl	800455c <puts>
 8001a64:	e008      	b.n	8001a78 <initMEMSsensor+0x34>
    }
    else
    {
        error++;
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001a6c:	4b23      	ldr	r3, [pc, #140]	; (8001afc <initMEMSsensor+0xb8>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <initMEMSsensor+0xb8>)
 8001a76:	701a      	strb	r2, [r3, #0]
    }

    //set PowerMode
    if(LIS3DH_SetMode(LIS3DH_NORMAL) == 1)
 8001a78:	2002      	movs	r0, #2
 8001a7a:	f000 f9bd 	bl	8001df8 <LIS3DH_SetMode>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d103      	bne.n	8001a8c <initMEMSsensor+0x48>
    {

        printf("LIS3DH_SetMode done...\n");
 8001a84:	481e      	ldr	r0, [pc, #120]	; (8001b00 <initMEMSsensor+0xbc>)
 8001a86:	f002 fd69 	bl	800455c <puts>
 8001a8a:	e008      	b.n	8001a9e <initMEMSsensor+0x5a>
    }
    else
    {
        error++;
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <initMEMSsensor+0xb8>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <initMEMSsensor+0xb8>)
 8001a9c:	701a      	strb	r2, [r3, #0]
    }

    //set Fullscale
    if(LIS3DH_SetFullScale(LIS3DH_FULLSCALE_4) == 1)
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f000 fa54 	bl	8001f4c <LIS3DH_SetFullScale>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d103      	bne.n	8001ab2 <initMEMSsensor+0x6e>
    {

        printf("LIS3DH_SetFullScale done...\n");
 8001aaa:	4816      	ldr	r0, [pc, #88]	; (8001b04 <initMEMSsensor+0xc0>)
 8001aac:	f002 fd56 	bl	800455c <puts>
 8001ab0:	e008      	b.n	8001ac4 <initMEMSsensor+0x80>
    }
    else
    {
        error++;
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <initMEMSsensor+0xb8>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	3301      	adds	r3, #1
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <initMEMSsensor+0xb8>)
 8001ac2:	701a      	strb	r2, [r3, #0]
    }

    //set axis Enable
    response = LIS3DH_SetAxis(LIS3DH_X_ENABLE | LIS3DH_Y_ENABLE | LIS3DH_Z_ENABLE);
 8001ac4:	2007      	movs	r0, #7
 8001ac6:	f000 fa15 	bl	8001ef4 <LIS3DH_SetAxis>
 8001aca:	4603      	mov	r3, r0
 8001acc:	71bb      	strb	r3, [r7, #6]
    if(response == 1)
 8001ace:	79bb      	ldrb	r3, [r7, #6]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d103      	bne.n	8001adc <initMEMSsensor+0x98>
    {
        printf("LIS3DH_SetAxis done...\n");
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <initMEMSsensor+0xc4>)
 8001ad6:	f002 fd41 	bl	800455c <puts>
 8001ada:	e008      	b.n	8001aee <initMEMSsensor+0xaa>
    }
    else
    {
        error++;
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <initMEMSsensor+0xb8>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <initMEMSsensor+0xb8>)
 8001aec:	701a      	strb	r2, [r3, #0]
    }

    return error;
 8001aee:	79fb      	ldrb	r3, [r7, #7]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	0800aaf0 	.word	0x0800aaf0
 8001afc:	20000aaa 	.word	0x20000aaa
 8001b00:	0800ab08 	.word	0x0800ab08
 8001b04:	0800ab20 	.word	0x0800ab20
 8001b08:	0800ab3c 	.word	0x0800ab3c

08001b0c <configMEMSsensor>:
 * @param	none
 * @return	amount of errors if some occurred
 *
 */
uint8_t configMEMSsensor()
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
    uint8_t error = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	71fb      	strb	r3, [r7, #7]
    uint8_t response = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	71bb      	strb	r3, [r7, #6]

    //set Interrupt Threshold
    if(LIS3DH_SetInt1Threshold(20) == 1)
 8001b1a:	2014      	movs	r0, #20
 8001b1c:	f000 fb16 	bl	800214c <LIS3DH_SetInt1Threshold>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d103      	bne.n	8001b2e <configMEMSsensor+0x22>
    {
        printf("LIS3DH_SetInt1Thershold done...\n");
 8001b26:	481d      	ldr	r0, [pc, #116]	; (8001b9c <configMEMSsensor+0x90>)
 8001b28:	f002 fd18 	bl	800455c <puts>
 8001b2c:	e008      	b.n	8001b40 <configMEMSsensor+0x34>
    }
    else
    {
        error++;
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	3301      	adds	r3, #1
 8001b32:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <configMEMSsensor+0x94>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <configMEMSsensor+0x94>)
 8001b3e:	701a      	strb	r2, [r3, #0]
    }

    //set Interrupt configuration (all enabled)
    response = LIS3DH_SetIntConfiguration(LIS3DH_INT1_ZHIE_ENABLE | LIS3DH_INT1_ZLIE_ENABLE |
 8001b40:	203f      	movs	r0, #63	; 0x3f
 8001b42:	f000 fa31 	bl	8001fa8 <LIS3DH_SetIntConfiguration>
 8001b46:	4603      	mov	r3, r0
 8001b48:	71bb      	strb	r3, [r7, #6]
                                          LIS3DH_INT1_YHIE_ENABLE | LIS3DH_INT1_YLIE_ENABLE |
                                          LIS3DH_INT1_XHIE_ENABLE | LIS3DH_INT1_XLIE_ENABLE );
    if(response == 1)
 8001b4a:	79bb      	ldrb	r3, [r7, #6]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d103      	bne.n	8001b58 <configMEMSsensor+0x4c>
    {
        printf("LIS3DH_SetIntConfiguration done...\n");
 8001b50:	4814      	ldr	r0, [pc, #80]	; (8001ba4 <configMEMSsensor+0x98>)
 8001b52:	f002 fd03 	bl	800455c <puts>
 8001b56:	e008      	b.n	8001b6a <configMEMSsensor+0x5e>
    }
    else
    {
        error++;
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <configMEMSsensor+0x94>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	3301      	adds	r3, #1
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <configMEMSsensor+0x94>)
 8001b68:	701a      	strb	r2, [r3, #0]
    }

    //set Interrupt Mode
    if(LIS3DH_SetIntMode(LIS3DH_INT_MODE_6D_POSITION) == 1)
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f000 fa46 	bl	8001ffc <LIS3DH_SetIntMode>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d103      	bne.n	8001b7e <configMEMSsensor+0x72>
    {
        printf("LIS3DH_SetIntMode done...\n");
 8001b76:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <configMEMSsensor+0x9c>)
 8001b78:	f002 fcf0 	bl	800455c <puts>
 8001b7c:	e008      	b.n	8001b90 <configMEMSsensor+0x84>
    }
    else
    {
        error++;
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	3301      	adds	r3, #1
 8001b82:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <configMEMSsensor+0x94>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <configMEMSsensor+0x94>)
 8001b8e:	701a      	strb	r2, [r3, #0]
    }

    return error;
 8001b90:	79fb      	ldrb	r3, [r7, #7]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	0800ab54 	.word	0x0800ab54
 8001ba0:	20000aaa 	.word	0x20000aaa
 8001ba4:	0800ab74 	.word	0x0800ab74
 8001ba8:	0800ab98 	.word	0x0800ab98

08001bac <get6Dposition>:
 * @param	none
 * @return	6D direction as integer 0 - 6
 *
 */
uint8_t get6Dposition()
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
    uint8_t response = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	71fb      	strb	r3, [r7, #7]

	// request 6D position and set global variable

    response = LIS3DH_Get6DPosition(&position);
 8001bb6:	4846      	ldr	r0, [pc, #280]	; (8001cd0 <get6Dposition+0x124>)
 8001bb8:	f000 fa4e 	bl	8002058 <LIS3DH_Get6DPosition>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]

    if((response == 1) && (old_position != position))
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d171      	bne.n	8001caa <get6Dposition+0xfe>
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <get6Dposition+0x128>)
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <get6Dposition+0x124>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d06b      	beq.n	8001caa <get6Dposition+0xfe>
    {
        switch (position)
 8001bd2:	4b3f      	ldr	r3, [pc, #252]	; (8001cd0 <get6Dposition+0x124>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	3b41      	subs	r3, #65	; 0x41
 8001bd8:	2b1f      	cmp	r3, #31
 8001bda:	d85b      	bhi.n	8001c94 <get6Dposition+0xe8>
 8001bdc:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <get6Dposition+0x38>)
 8001bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be2:	bf00      	nop
 8001be4:	08001c75 	.word	0x08001c75
 8001be8:	08001c6d 	.word	0x08001c6d
 8001bec:	08001c95 	.word	0x08001c95
 8001bf0:	08001c65 	.word	0x08001c65
 8001bf4:	08001c95 	.word	0x08001c95
 8001bf8:	08001c95 	.word	0x08001c95
 8001bfc:	08001c95 	.word	0x08001c95
 8001c00:	08001c7d 	.word	0x08001c7d
 8001c04:	08001c95 	.word	0x08001c95
 8001c08:	08001c95 	.word	0x08001c95
 8001c0c:	08001c95 	.word	0x08001c95
 8001c10:	08001c95 	.word	0x08001c95
 8001c14:	08001c95 	.word	0x08001c95
 8001c18:	08001c95 	.word	0x08001c95
 8001c1c:	08001c95 	.word	0x08001c95
 8001c20:	08001c8d 	.word	0x08001c8d
 8001c24:	08001c95 	.word	0x08001c95
 8001c28:	08001c95 	.word	0x08001c95
 8001c2c:	08001c95 	.word	0x08001c95
 8001c30:	08001c95 	.word	0x08001c95
 8001c34:	08001c95 	.word	0x08001c95
 8001c38:	08001c95 	.word	0x08001c95
 8001c3c:	08001c95 	.word	0x08001c95
 8001c40:	08001c95 	.word	0x08001c95
 8001c44:	08001c95 	.word	0x08001c95
 8001c48:	08001c95 	.word	0x08001c95
 8001c4c:	08001c95 	.word	0x08001c95
 8001c50:	08001c95 	.word	0x08001c95
 8001c54:	08001c95 	.word	0x08001c95
 8001c58:	08001c95 	.word	0x08001c95
 8001c5c:	08001c95 	.word	0x08001c95
 8001c60:	08001c85 	.word	0x08001c85
        {
        case LIS3DH_UP_SX:
        {
            direction = 0;
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <get6Dposition+0x12c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
            break;
 8001c6a:	e01d      	b.n	8001ca8 <get6Dposition+0xfc>
        }
        case LIS3DH_UP_DX:
        {
            direction = 1;
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <get6Dposition+0x12c>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
            break;
 8001c72:	e019      	b.n	8001ca8 <get6Dposition+0xfc>
        }
        case LIS3DH_DW_SX:
        {
            direction = 2;
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <get6Dposition+0x12c>)
 8001c76:	2202      	movs	r2, #2
 8001c78:	701a      	strb	r2, [r3, #0]
            break;
 8001c7a:	e015      	b.n	8001ca8 <get6Dposition+0xfc>
        }
        case LIS3DH_DW_DX:
        {
            direction = 3;
 8001c7c:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <get6Dposition+0x12c>)
 8001c7e:	2203      	movs	r2, #3
 8001c80:	701a      	strb	r2, [r3, #0]
            break;
 8001c82:	e011      	b.n	8001ca8 <get6Dposition+0xfc>
        }
        case LIS3DH_TOP:
        {
            direction = 4;
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <get6Dposition+0x12c>)
 8001c86:	2204      	movs	r2, #4
 8001c88:	701a      	strb	r2, [r3, #0]
            break;
 8001c8a:	e00d      	b.n	8001ca8 <get6Dposition+0xfc>
        }
        case LIS3DH_BOTTOM:
        {
            direction = 5;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <get6Dposition+0x12c>)
 8001c8e:	2205      	movs	r2, #5
 8001c90:	701a      	strb	r2, [r3, #0]
            break;
 8001c92:	e009      	b.n	8001ca8 <get6Dposition+0xfc>
        }
        default:
        {
            direction = 6;
 8001c94:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <get6Dposition+0x12c>)
 8001c96:	2206      	movs	r2, #6
 8001c98:	701a      	strb	r2, [r3, #0]
            errorcount++;
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <get6Dposition+0x130>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <get6Dposition+0x130>)
 8001ca4:	701a      	strb	r2, [r3, #0]
            break;
 8001ca6:	bf00      	nop
        }
        }
    }
 8001ca8:	e008      	b.n	8001cbc <get6Dposition+0x110>
    else if(response != 1)
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d005      	beq.n	8001cbc <get6Dposition+0x110>
    {
        errorcount++;
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <get6Dposition+0x130>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <get6Dposition+0x130>)
 8001cba:	701a      	strb	r2, [r3, #0]
    }
    old_position = position;
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <get6Dposition+0x124>)
 8001cbe:	781a      	ldrb	r2, [r3, #0]
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <get6Dposition+0x128>)
 8001cc2:	701a      	strb	r2, [r3, #0]

    return direction;
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <get6Dposition+0x12c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000abe 	.word	0x20000abe
 8001cd4:	20000ad4 	.word	0x20000ad4
 8001cd8:	20000ad1 	.word	0x20000ad1
 8001cdc:	20000aaa 	.word	0x20000aaa

08001ce0 <getAxesRawData>:
 * @param	none
 * @return	acceleration data in structure
 *
 */
AXESRAWDATA getAxesRawData()
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    uint8_t response = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	75fb      	strb	r3, [r7, #23]
    AxesRaw_t data;
    AXESRAWDATA dataOut;
    dataOut.axisX = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	813b      	strh	r3, [r7, #8]
    dataOut.axisY = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	817b      	strh	r3, [r7, #10]
    dataOut.axisZ = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	81bb      	strh	r3, [r7, #12]

	// request sensor data and add to struct

    response = LIS3DH_GetAccAxesRaw(&data);
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 fa3f 	bl	8002180 <LIS3DH_GetAccAxesRaw>
 8001d02:	4603      	mov	r3, r0
 8001d04:	75fb      	strb	r3, [r7, #23]
    if(response != 1)
 8001d06:	7dfb      	ldrb	r3, [r7, #23]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d005      	beq.n	8001d18 <getAxesRawData+0x38>
    {
        errorcount++;
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <getAxesRawData+0x64>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <getAxesRawData+0x64>)
 8001d16:	701a      	strb	r2, [r3, #0]
    }

    dataOut.axisX = data.AXIS_X;
 8001d18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d1c:	813b      	strh	r3, [r7, #8]
    dataOut.axisY = data.AXIS_Y;
 8001d1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d22:	817b      	strh	r3, [r7, #10]
    dataOut.axisZ = data.AXIS_Z;
 8001d24:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d28:	81bb      	strh	r3, [r7, #12]

    return dataOut;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f107 0308 	add.w	r3, r7, #8
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	6010      	str	r0, [r2, #0]
 8001d36:	889b      	ldrh	r3, [r3, #4]
 8001d38:	8093      	strh	r3, [r2, #4]
}
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000aaa 	.word	0x20000aaa

08001d48 <LIS3DH_ReadReg>:
*			: I2C or SPI reading functions
* Input			: Register Address
* Output		: Data REad
* Return		: None
*******************************************************************************/
u8_t LIS3DH_ReadReg(u8_t Reg, u8_t* Data) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
    //To be completed with either I2c or SPI reading function
    //i.e. *Data = SPI_Mems_Read_Reg( Reg );

	// added i2c xfer function FHTW

    *Data = _i2c_xfer (0, Reg, 0, 1);
 8001d54:	79f9      	ldrb	r1, [r7, #7]
 8001d56:	2301      	movs	r3, #1
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7ff fde2 	bl	8001924 <_i2c_xfer>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	701a      	strb	r2, [r3, #0]

    return 1;
 8001d68:	2301      	movs	r3, #1
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop

08001d74 <LIS3DH_WriteReg>:
*			: I2C or SPI writing function
* Input			: Register Address, Data to be written
* Output		: None
* Return		: None
*******************************************************************************/
u8_t LIS3DH_WriteReg(u8_t WriteAddr, u8_t Data) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	4613      	mov	r3, r2
 8001d82:	71bb      	strb	r3, [r7, #6]
    //To be completed with either I2c or SPI writing function
    //i.e. SPI_Mems_Write_Reg(WriteAddr, Data);

	// added i2c xfer function FHTW

    _i2c_xfer (0, WriteAddr, Data, 0);
 8001d84:	79ba      	ldrb	r2, [r7, #6]
 8001d86:	79f9      	ldrb	r1, [r7, #7]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff fdca 	bl	8001924 <_i2c_xfer>

    return 1;
 8001d90:	2301      	movs	r3, #1
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop

08001d9c <LIS3DH_SetODR>:
* Description    : Sets LIS3DH Output Data Rate
* Input          : Output Data Rate
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetODR(LIS3DH_ODR_t ov) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001da6:	f107 030f 	add.w	r3, r7, #15
 8001daa:	4619      	mov	r1, r3
 8001dac:	2020      	movs	r0, #32
 8001dae:	f7ff ffcb 	bl	8001d48 <LIS3DH_ReadReg>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <LIS3DH_SetODR+0x20>
        return MEMS_ERROR;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e018      	b.n	8001dee <LIS3DH_SetODR+0x52>

    value &= 0x0f;
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	73fb      	strb	r3, [r7, #15]
    value |= ov<<LIS3DH_ODR_BIT;
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	b25a      	sxtb	r2, r3
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	b25b      	sxtb	r3, r3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b25b      	sxtb	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	2020      	movs	r0, #32
 8001dde:	f7ff ffc9 	bl	8001d74 <LIS3DH_WriteReg>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <LIS3DH_SetODR+0x50>
        return MEMS_ERROR;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e000      	b.n	8001dee <LIS3DH_SetODR+0x52>

    return MEMS_SUCCESS;
 8001dec:	2301      	movs	r3, #1
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop

08001df8 <LIS3DH_SetMode>:
* Description    : Sets LIS3DH Operating Mode
* Input          : Modality (LIS3DH_NORMAL, LIS3DH_LOW_POWER, LIS3DH_POWER_DOWN)
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetMode(LIS3DH_Mode_t md) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
    u8_t value;
    u8_t value2;
    static   u8_t ODR_old_value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001e02:	f107 030f 	add.w	r3, r7, #15
 8001e06:	4619      	mov	r1, r3
 8001e08:	2020      	movs	r0, #32
 8001e0a:	f7ff ff9d 	bl	8001d48 <LIS3DH_ReadReg>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <LIS3DH_SetMode+0x20>
        return MEMS_ERROR;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e066      	b.n	8001ee6 <LIS3DH_SetMode+0xee>

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value2) )
 8001e18:	f107 030e 	add.w	r3, r7, #14
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	2023      	movs	r0, #35	; 0x23
 8001e20:	f7ff ff92 	bl	8001d48 <LIS3DH_ReadReg>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <LIS3DH_SetMode+0x36>
        return MEMS_ERROR;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e05b      	b.n	8001ee6 <LIS3DH_SetMode+0xee>

    if((value & 0xF0)==0)
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10b      	bne.n	8001e50 <LIS3DH_SetMode+0x58>
        value = value | (ODR_old_value & 0xF0); //if it comes from POWERDOWN
 8001e38:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <LIS3DH_SetMode+0xf8>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b25b      	sxtb	r3, r3
 8001e3e:	f023 030f 	bic.w	r3, r3, #15
 8001e42:	b25a      	sxtb	r2, r3
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	b25b      	sxtb	r3, r3
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	b25b      	sxtb	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	73fb      	strb	r3, [r7, #15]

    switch(md) {
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d01e      	beq.n	8001e94 <LIS3DH_SetMode+0x9c>
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d00a      	beq.n	8001e70 <LIS3DH_SetMode+0x78>
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d12c      	bne.n	8001eb8 <LIS3DH_SetMode+0xc0>

    case LIS3DH_POWER_DOWN:
        ODR_old_value = value;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <LIS3DH_SetMode+0xf8>)
 8001e62:	701a      	strb	r2, [r3, #0]
        value &= 0x0F;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	73fb      	strb	r3, [r7, #15]
        break;
 8001e6e:	e025      	b.n	8001ebc <LIS3DH_SetMode+0xc4>

    case LIS3DH_NORMAL:
        value &= 0xF7;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	f023 0308 	bic.w	r3, r3, #8
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	73fb      	strb	r3, [r7, #15]
        value |= (MEMS_RESET<<LIS3DH_LPEN);
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 8001e7e:	7bbb      	ldrb	r3, [r7, #14]
 8001e80:	f023 0308 	bic.w	r3, r3, #8
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_SET<<LIS3DH_HR);   //set HighResolution_BIT
 8001e88:	7bbb      	ldrb	r3, [r7, #14]
 8001e8a:	f043 0308 	orr.w	r3, r3, #8
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	73bb      	strb	r3, [r7, #14]
        break;
 8001e92:	e013      	b.n	8001ebc <LIS3DH_SetMode+0xc4>

    case LIS3DH_LOW_POWER:
        value &= 0xF7;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	f023 0308 	bic.w	r3, r3, #8
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	73fb      	strb	r3, [r7, #15]
        value |=  (MEMS_SET<<LIS3DH_LPEN);
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	f043 0308 	orr.w	r3, r3, #8
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 8001ea8:	7bbb      	ldrb	r3, [r7, #14]
 8001eaa:	f023 0308 	bic.w	r3, r3, #8
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_RESET<<LIS3DH_HR); //reset HighResolution_BIT
 8001eb2:	7bbb      	ldrb	r3, [r7, #14]
 8001eb4:	73bb      	strb	r3, [r7, #14]
        break;
 8001eb6:	e001      	b.n	8001ebc <LIS3DH_SetMode+0xc4>

    default:
        return MEMS_ERROR;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e014      	b.n	8001ee6 <LIS3DH_SetMode+0xee>
    }

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	2020      	movs	r0, #32
 8001ec2:	f7ff ff57 	bl	8001d74 <LIS3DH_WriteReg>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <LIS3DH_SetMode+0xd8>
        return MEMS_ERROR;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e00a      	b.n	8001ee6 <LIS3DH_SetMode+0xee>

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value2) )
 8001ed0:	7bbb      	ldrb	r3, [r7, #14]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	2023      	movs	r0, #35	; 0x23
 8001ed6:	f7ff ff4d 	bl	8001d74 <LIS3DH_WriteReg>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <LIS3DH_SetMode+0xec>
        return MEMS_ERROR;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e000      	b.n	8001ee6 <LIS3DH_SetMode+0xee>

    return MEMS_SUCCESS;
 8001ee4:	2301      	movs	r3, #1
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000a68 	.word	0x20000a68

08001ef4 <LIS3DH_SetAxis>:
* Input          : LIS3DH_X_ENABLE/DISABLE | LIS3DH_Y_ENABLE/DISABLE | LIS3DH_Z_ENABLE/DISABLE
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetAxis(LIS3DH_Axis_t axis) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001efe:	f107 030f 	add.w	r3, r7, #15
 8001f02:	4619      	mov	r1, r3
 8001f04:	2020      	movs	r0, #32
 8001f06:	f7ff ff1f 	bl	8001d48 <LIS3DH_ReadReg>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <LIS3DH_SetAxis+0x20>
        return MEMS_ERROR;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e017      	b.n	8001f44 <LIS3DH_SetAxis+0x50>
    value &= 0xF8;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	f023 0307 	bic.w	r3, r3, #7
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	73fb      	strb	r3, [r7, #15]
    value |= (0x07 & axis);
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	4619      	mov	r1, r3
 8001f32:	2020      	movs	r0, #32
 8001f34:	f7ff ff1e 	bl	8001d74 <LIS3DH_WriteReg>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <LIS3DH_SetAxis+0x4e>
        return MEMS_ERROR;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e000      	b.n	8001f44 <LIS3DH_SetAxis+0x50>

    return MEMS_SUCCESS;
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <LIS3DH_SetFullScale>:
* Description    : Sets the LIS3DH FullScale
* Input          : LIS3DH_FULLSCALE_2/LIS3DH_FULLSCALE_4/LIS3DH_FULLSCALE_8/LIS3DH_FULLSCALE_16
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetFullScale(LIS3DH_Fullscale_t fs) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 8001f56:	f107 030f 	add.w	r3, r7, #15
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	2023      	movs	r0, #35	; 0x23
 8001f5e:	f7ff fef3 	bl	8001d48 <LIS3DH_ReadReg>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <LIS3DH_SetFullScale+0x20>
        return MEMS_ERROR;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e018      	b.n	8001f9e <LIS3DH_SetFullScale+0x52>

    value &= 0xCF;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	73fb      	strb	r3, [r7, #15]
    value |= (fs<<LIS3DH_FS);
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	b25a      	sxtb	r2, r3
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	b25b      	sxtb	r3, r3
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b25b      	sxtb	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	2023      	movs	r0, #35	; 0x23
 8001f8e:	f7ff fef1 	bl	8001d74 <LIS3DH_WriteReg>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <LIS3DH_SetFullScale+0x50>
        return MEMS_ERROR;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e000      	b.n	8001f9e <LIS3DH_SetFullScale+0x52>

    return MEMS_SUCCESS;
 8001f9c:	2301      	movs	r3, #1
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop

08001fa8 <LIS3DH_SetIntConfiguration>:
* Input          : LIS3DH_INT1_AND/OR | LIS3DH_INT1_ZHIE_ENABLE/DISABLE | LIS3DH_INT1_ZLIE_ENABLE/DISABLE...
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntConfiguration(LIS3DH_Int1Conf_t ic) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 8001fb2:	f107 030f 	add.w	r3, r7, #15
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	2030      	movs	r0, #48	; 0x30
 8001fba:	f7ff fec5 	bl	8001d48 <LIS3DH_ReadReg>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <LIS3DH_SetIntConfiguration+0x20>
        return MEMS_ERROR;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e014      	b.n	8001ff2 <LIS3DH_SetIntConfiguration+0x4a>

    value &= 0x40;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	73fb      	strb	r3, [r7, #15]
    value |= ic;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	2030      	movs	r0, #48	; 0x30
 8001fe2:	f7ff fec7 	bl	8001d74 <LIS3DH_WriteReg>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <LIS3DH_SetIntConfiguration+0x48>
        return MEMS_ERROR;
 8001fec:	2300      	movs	r3, #0
 8001fee:	e000      	b.n	8001ff2 <LIS3DH_SetIntConfiguration+0x4a>

    return MEMS_SUCCESS;
 8001ff0:	2301      	movs	r3, #1
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop

08001ffc <LIS3DH_SetIntMode>:
* Input          : LIS3DH_INT_MODE_OR, LIS3DH_INT_MODE_6D_MOVEMENT, LIS3DH_INT_MODE_AND,
				   LIS3DH_INT_MODE_6D_POSITION
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntMode(LIS3DH_Int1Mode_t int_mode) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 8002006:	f107 030f 	add.w	r3, r7, #15
 800200a:	4619      	mov	r1, r3
 800200c:	2030      	movs	r0, #48	; 0x30
 800200e:	f7ff fe9b 	bl	8001d48 <LIS3DH_ReadReg>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <LIS3DH_SetIntMode+0x20>
        return MEMS_ERROR;
 8002018:	2300      	movs	r3, #0
 800201a:	e018      	b.n	800204e <LIS3DH_SetIntMode+0x52>

    value &= 0x3F;
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002022:	b2db      	uxtb	r3, r3
 8002024:	73fb      	strb	r3, [r7, #15]
    value |= (int_mode<<LIS3DH_INT_6D);
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	019b      	lsls	r3, r3, #6
 800202a:	b25a      	sxtb	r2, r3
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	b25b      	sxtb	r3, r3
 8002030:	4313      	orrs	r3, r2
 8002032:	b25b      	sxtb	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	4619      	mov	r1, r3
 800203c:	2030      	movs	r0, #48	; 0x30
 800203e:	f7ff fe99 	bl	8001d74 <LIS3DH_WriteReg>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <LIS3DH_SetIntMode+0x50>
        return MEMS_ERROR;
 8002048:	2300      	movs	r3, #0
 800204a:	e000      	b.n	800204e <LIS3DH_SetIntMode+0x52>

    return MEMS_SUCCESS;
 800204c:	2301      	movs	r3, #1
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop

08002058 <LIS3DH_Get6DPosition>:
* Description    : 6D, 4D Interrupt Position Detect
* Input          : Byte to empty by POSITION_6D_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_Get6DPosition(u8_t* val) {
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_SRC, &value) )
 8002060:	f107 030f 	add.w	r3, r7, #15
 8002064:	4619      	mov	r1, r3
 8002066:	2031      	movs	r0, #49	; 0x31
 8002068:	f7ff fe6e 	bl	8001d48 <LIS3DH_ReadReg>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <LIS3DH_Get6DPosition+0x1e>
        return MEMS_ERROR;
 8002072:	2300      	movs	r3, #0
 8002074:	e065      	b.n	8002142 <LIS3DH_Get6DPosition+0xea>

    value &= 0x7F;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800207c:	b2db      	uxtb	r3, r3
 800207e:	73fb      	strb	r3, [r7, #15]

    switch (value) {
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	3b41      	subs	r3, #65	; 0x41
 8002084:	2b1f      	cmp	r3, #31
 8002086:	d85b      	bhi.n	8002140 <LIS3DH_Get6DPosition+0xe8>
 8002088:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <LIS3DH_Get6DPosition+0x38>)
 800208a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208e:	bf00      	nop
 8002090:	08002121 	.word	0x08002121
 8002094:	08002119 	.word	0x08002119
 8002098:	08002141 	.word	0x08002141
 800209c:	08002111 	.word	0x08002111
 80020a0:	08002141 	.word	0x08002141
 80020a4:	08002141 	.word	0x08002141
 80020a8:	08002141 	.word	0x08002141
 80020ac:	08002129 	.word	0x08002129
 80020b0:	08002141 	.word	0x08002141
 80020b4:	08002141 	.word	0x08002141
 80020b8:	08002141 	.word	0x08002141
 80020bc:	08002141 	.word	0x08002141
 80020c0:	08002141 	.word	0x08002141
 80020c4:	08002141 	.word	0x08002141
 80020c8:	08002141 	.word	0x08002141
 80020cc:	08002139 	.word	0x08002139
 80020d0:	08002141 	.word	0x08002141
 80020d4:	08002141 	.word	0x08002141
 80020d8:	08002141 	.word	0x08002141
 80020dc:	08002141 	.word	0x08002141
 80020e0:	08002141 	.word	0x08002141
 80020e4:	08002141 	.word	0x08002141
 80020e8:	08002141 	.word	0x08002141
 80020ec:	08002141 	.word	0x08002141
 80020f0:	08002141 	.word	0x08002141
 80020f4:	08002141 	.word	0x08002141
 80020f8:	08002141 	.word	0x08002141
 80020fc:	08002141 	.word	0x08002141
 8002100:	08002141 	.word	0x08002141
 8002104:	08002141 	.word	0x08002141
 8002108:	08002141 	.word	0x08002141
 800210c:	08002131 	.word	0x08002131
    case LIS3DH_UP_SX:
        *val = LIS3DH_UP_SX;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2244      	movs	r2, #68	; 0x44
 8002114:	701a      	strb	r2, [r3, #0]
        break;
 8002116:	e013      	b.n	8002140 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_UP_DX:
        *val = LIS3DH_UP_DX;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2242      	movs	r2, #66	; 0x42
 800211c:	701a      	strb	r2, [r3, #0]
        break;
 800211e:	e00f      	b.n	8002140 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_SX:
        *val = LIS3DH_DW_SX;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2241      	movs	r2, #65	; 0x41
 8002124:	701a      	strb	r2, [r3, #0]
        break;
 8002126:	e00b      	b.n	8002140 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_DX:
        *val = LIS3DH_DW_DX;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2248      	movs	r2, #72	; 0x48
 800212c:	701a      	strb	r2, [r3, #0]
        break;
 800212e:	e007      	b.n	8002140 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_TOP:
        *val = LIS3DH_TOP;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2260      	movs	r2, #96	; 0x60
 8002134:	701a      	strb	r2, [r3, #0]
        break;
 8002136:	e003      	b.n	8002140 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_BOTTOM:
        *val = LIS3DH_BOTTOM;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2250      	movs	r2, #80	; 0x50
 800213c:	701a      	strb	r2, [r3, #0]
        break;
 800213e:	bf00      	nop
    }

    return MEMS_SUCCESS;
 8002140:	2301      	movs	r3, #1
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop

0800214c <LIS3DH_SetInt1Threshold>:
* Description    : Sets Interrupt 1 Threshold
* Input          : Threshold = [0,31]
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetInt1Threshold(u8_t ths) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
    if (ths > 127)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	2b00      	cmp	r3, #0
 800215c:	da01      	bge.n	8002162 <LIS3DH_SetInt1Threshold+0x16>
        return MEMS_ERROR;
 800215e:	2300      	movs	r3, #0
 8002160:	e00a      	b.n	8002178 <LIS3DH_SetInt1Threshold+0x2c>

    if( !LIS3DH_WriteReg(LIS3DH_INT1_THS, ths) )
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	4619      	mov	r1, r3
 8002166:	2032      	movs	r0, #50	; 0x32
 8002168:	f7ff fe04 	bl	8001d74 <LIS3DH_WriteReg>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <LIS3DH_SetInt1Threshold+0x2a>
        return MEMS_ERROR;
 8002172:	2300      	movs	r3, #0
 8002174:	e000      	b.n	8002178 <LIS3DH_SetInt1Threshold+0x2c>

    return MEMS_SUCCESS;
 8002176:	2301      	movs	r3, #1
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <LIS3DH_GetAccAxesRaw>:
* Description    : Read the Acceleration Values Output Registers
* Input          : buffer to empity by AxesRaw_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_GetAccAxesRaw(AxesRaw_t* buff) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    i16_t value;
    u8_t *valueL = (u8_t *)(&value);
 8002188:	f107 030e 	add.w	r3, r7, #14
 800218c:	617b      	str	r3, [r7, #20]
    u8_t *valueH = ((u8_t *)(&value)+1);
 800218e:	f107 030e 	add.w	r3, r7, #14
 8002192:	3301      	adds	r3, #1
 8002194:	613b      	str	r3, [r7, #16]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_L, valueL) )
 8002196:	6979      	ldr	r1, [r7, #20]
 8002198:	2028      	movs	r0, #40	; 0x28
 800219a:	f7ff fdd5 	bl	8001d48 <LIS3DH_ReadReg>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <LIS3DH_GetAccAxesRaw+0x28>
        return MEMS_ERROR;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e039      	b.n	800221c <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_H, valueH) )
 80021a8:	6939      	ldr	r1, [r7, #16]
 80021aa:	2029      	movs	r0, #41	; 0x29
 80021ac:	f7ff fdcc 	bl	8001d48 <LIS3DH_ReadReg>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <LIS3DH_GetAccAxesRaw+0x3a>
        return MEMS_ERROR;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e030      	b.n	800221c <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_X = value;
 80021ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	801a      	strh	r2, [r3, #0]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_L, valueL) )
 80021c2:	6979      	ldr	r1, [r7, #20]
 80021c4:	202a      	movs	r0, #42	; 0x2a
 80021c6:	f7ff fdbf 	bl	8001d48 <LIS3DH_ReadReg>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <LIS3DH_GetAccAxesRaw+0x54>
        return MEMS_ERROR;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e023      	b.n	800221c <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_H, valueH) )
 80021d4:	6939      	ldr	r1, [r7, #16]
 80021d6:	202b      	movs	r0, #43	; 0x2b
 80021d8:	f7ff fdb6 	bl	8001d48 <LIS3DH_ReadReg>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <LIS3DH_GetAccAxesRaw+0x66>
        return MEMS_ERROR;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e01a      	b.n	800221c <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Y = value;
 80021e6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	805a      	strh	r2, [r3, #2]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_L, valueL) )
 80021ee:	6979      	ldr	r1, [r7, #20]
 80021f0:	202c      	movs	r0, #44	; 0x2c
 80021f2:	f7ff fda9 	bl	8001d48 <LIS3DH_ReadReg>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <LIS3DH_GetAccAxesRaw+0x80>
        return MEMS_ERROR;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e00d      	b.n	800221c <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_H, valueH) )
 8002200:	6939      	ldr	r1, [r7, #16]
 8002202:	202d      	movs	r0, #45	; 0x2d
 8002204:	f7ff fda0 	bl	8001d48 <LIS3DH_ReadReg>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <LIS3DH_GetAccAxesRaw+0x92>
        return MEMS_ERROR;
 800220e:	2300      	movs	r3, #0
 8002210:	e004      	b.n	800221c <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Z = value;
 8002212:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	809a      	strh	r2, [r3, #4]

    return MEMS_SUCCESS;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db0a      	blt.n	800224e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	490d      	ldr	r1, [pc, #52]	; (8002270 <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	0092      	lsls	r2, r2, #2
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	440b      	add	r3, r1
 8002248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800224c:	e00a      	b.n	8002264 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	4909      	ldr	r1, [pc, #36]	; (8002274 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	0092      	lsls	r2, r2, #2
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	440b      	add	r3, r1
 8002262:	761a      	strb	r2, [r3, #24]
  }
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000e100 	.word	0xe000e100
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002288:	d301      	bcc.n	800228e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228a:	2301      	movs	r3, #1
 800228c:	e00f      	b.n	80022ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <SysTick_Config+0x40>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002296:	213f      	movs	r1, #63	; 0x3f
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	f7ff ffc2 	bl	8002224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <SysTick_Config+0x40>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <SysTick_Config+0x40>)
 80022a8:	2207      	movs	r2, #7
 80022aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	e000e010 	.word	0xe000e010

080022bc <main>:
/**
 * @brief	main routine
 *
 */
int main (void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b090      	sub	sp, #64	; 0x40
 80022c0:	af00      	add	r7, sp, #0
    char rxBuff[RXBUFFERSIZE];

    // init receive buffer and ring buffer
    memset (&rxBuff, 0, sizeof (rxBuff));
 80022c2:	463b      	mov	r3, r7
 80022c4:	2240      	movs	r2, #64	; 0x40
 80022c6:	2100      	movs	r1, #0
 80022c8:	4618      	mov	r0, r3
 80022ca:	f002 f8b1 	bl	8004430 <memset>
    memset (&cb[inix], 0, sizeof (cb[inix]));
 80022ce:	4baa      	ldr	r3, [pc, #680]	; (8002578 <main+0x2bc>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	4ba9      	ldr	r3, [pc, #676]	; (800257c <main+0x2c0>)
 80022d6:	4413      	add	r3, r2
 80022d8:	2201      	movs	r2, #1
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f002 f8a7 	bl	8004430 <memset>

    // init values for globals
    initGlobals();
 80022e2:	f7fe f9e3 	bl	80006ac <initGlobals>

    // init DEBUG, UART, I2C, PWM
    initRetargetSwo();
 80022e6:	f7ff fa05 	bl	80016f4 <initRetargetSwo>
    _init_uart0_ch0();
 80022ea:	f7fe f8b3 	bl	8000454 <_init_uart0_ch0>

    while (1)
    {
        if (_init_i2c1_ch0() == 0)
 80022ee:	f7ff faef 	bl	80018d0 <_init_i2c1_ch0>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10f      	bne.n	8002318 <main+0x5c>
        {
#if DEBUG
            printf("I2C init done...\n");
 80022f8:	48a1      	ldr	r0, [pc, #644]	; (8002580 <main+0x2c4>)
 80022fa:	f002 f92f 	bl	800455c <puts>
#endif
            break;
 80022fe:	bf00      	nop
            printf("Error I2C init, retry...\n");
#endif
        }
    }

    initServoPWM();
 8002300:	f7fe f9a8 	bl	8000654 <initServoPWM>

    // center both servo
    if (pwm(SERVOUPCENTER, 0) != 0)
 8002304:	2200      	movs	r2, #0
 8002306:	f04f 0000 	mov.w	r0, #0
 800230a:	499e      	ldr	r1, [pc, #632]	; (8002584 <main+0x2c8>)
 800230c:	f7fe f9a8 	bl	8000660 <pwm>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d007      	beq.n	8002326 <main+0x6a>
 8002316:	e003      	b.n	8002320 <main+0x64>
            break;
        }
        else
        {
#if DEBUG
            printf("Error I2C init, retry...\n");
 8002318:	489b      	ldr	r0, [pc, #620]	; (8002588 <main+0x2cc>)
 800231a:	f002 f91f 	bl	800455c <puts>
#endif
        }
    }
 800231e:	e7e6      	b.n	80022ee <main+0x32>

    // center both servo
    if (pwm(SERVOUPCENTER, 0) != 0)
    {
#if DEBUG
        printf("error centering servo...\n");
 8002320:	489a      	ldr	r0, [pc, #616]	; (800258c <main+0x2d0>)
 8002322:	f002 f91b 	bl	800455c <puts>
#endif
    }
    if (pwm(SERVOLOCENTER, 1) != 0)
 8002326:	2201      	movs	r2, #1
 8002328:	f04f 0000 	mov.w	r0, #0
 800232c:	4995      	ldr	r1, [pc, #596]	; (8002584 <main+0x2c8>)
 800232e:	f7fe f997 	bl	8000660 <pwm>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <main+0x82>
    {
#if DEBUG
        printf("error centering servo...\n");
 8002338:	4894      	ldr	r0, [pc, #592]	; (800258c <main+0x2d0>)
 800233a:	f002 f90f 	bl	800455c <puts>
#endif
    }

    // init LED output
    outputInit();
 800233e:	f7fe fa2d 	bl	800079c <outputInit>
    ledSetting(0);
 8002342:	2000      	movs	r0, #0
 8002344:	f7fe fca0 	bl	8000c88 <ledSetting>

    // init BUTTONS
    inputInit();
 8002348:	f7fe fea8 	bl	800109c <inputInit>

#if DEBUG
    printf("DEBUG+I2C+UART+PWM+LED+BUTTON init done...\n");
 800234c:	4890      	ldr	r0, [pc, #576]	; (8002590 <main+0x2d4>)
 800234e:	f002 f905 	bl	800455c <puts>
#endif

    // init MEMS
    while (1)
    {
        if (initMEMSsensor() == 0)
 8002352:	f7ff fb77 	bl	8001a44 <initMEMSsensor>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d103      	bne.n	8002364 <main+0xa8>
        {
#if DEBUG
            printf("MEMS init done...\n");
 800235c:	488d      	ldr	r0, [pc, #564]	; (8002594 <main+0x2d8>)
 800235e:	f002 f8fd 	bl	800455c <puts>
#endif
            break;
 8002362:	e003      	b.n	800236c <main+0xb0>
        }
        else
        {
#if DEBUG
            printf("Error MEMS init, retry...\n");
 8002364:	488c      	ldr	r0, [pc, #560]	; (8002598 <main+0x2dc>)
 8002366:	f002 f8f9 	bl	800455c <puts>
#endif
        }
    }
 800236a:	e7f2      	b.n	8002352 <main+0x96>

    // config MEMS
    while (1)
    {
        if (configMEMSsensor() == 0)
 800236c:	f7ff fbce 	bl	8001b0c <configMEMSsensor>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <main+0xd6>
        {
#if DEBUG
            printf("MEMS config done...\n");
 8002376:	4889      	ldr	r0, [pc, #548]	; (800259c <main+0x2e0>)
 8002378:	f002 f8f0 	bl	800455c <puts>
#endif
            break;
 800237c:	bf00      	nop
#endif
        }
    }

    // set up SysTick
    SysTick_Config (SystemCoreClock / SYSTEMTICKDIVIDER);
 800237e:	4b88      	ldr	r3, [pc, #544]	; (80025a0 <main+0x2e4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a88      	ldr	r2, [pc, #544]	; (80025a4 <main+0x2e8>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	099b      	lsrs	r3, r3, #6
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff ff74 	bl	8002278 <SysTick_Config>
 8002390:	e003      	b.n	800239a <main+0xde>
            break;
        }
        else
        {
#if DEBUG
            printf("Error MEMS config, retry...\n");
 8002392:	4885      	ldr	r0, [pc, #532]	; (80025a8 <main+0x2ec>)
 8002394:	f002 f8e2 	bl	800455c <puts>
#endif
        }
    }
 8002398:	e7e8      	b.n	800236c <main+0xb0>

    // main loop
    while(1)
    {
        // clear buffer and receive incoming data
        memset (&rxBuff, 0, sizeof (rxBuff));
 800239a:	463b      	mov	r3, r7
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f002 f845 	bl	8004430 <memset>
        if (_uart_get_string (rxBuff) != 0)
 80023a6:	463b      	mov	r3, r7
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f927 	bl	80005fc <_uart_get_string>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <main+0x100>
        {
#if DEBUG
            printf("error receiving from UART...\n");
 80023b4:	487d      	ldr	r0, [pc, #500]	; (80025ac <main+0x2f0>)
 80023b6:	f002 f8d1 	bl	800455c <puts>
#endif
            continue;
 80023ba:	e0dc      	b.n	8002576 <main+0x2ba>
        }

#if DEBUG
        printf("received %s\n", rxBuff);
 80023bc:	463b      	mov	r3, r7
 80023be:	4619      	mov	r1, r3
 80023c0:	487b      	ldr	r0, [pc, #492]	; (80025b0 <main+0x2f4>)
 80023c2:	f002 f883 	bl	80044cc <printf>
#endif

        // check received command and react accodingly
        if (strncmp(rxBuff, "#CON,", strlen(rxBuff)) == 0)
 80023c6:	463b      	mov	r3, r7
 80023c8:	4618      	mov	r0, r3
 80023ca:	f002 f939 	bl	8004640 <strlen>
 80023ce:	4602      	mov	r2, r0
 80023d0:	463b      	mov	r3, r7
 80023d2:	4978      	ldr	r1, [pc, #480]	; (80025b4 <main+0x2f8>)
 80023d4:	4618      	mov	r0, r3
 80023d6:	f002 f9a1 	bl	800471c <strncmp>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d113      	bne.n	8002408 <main+0x14c>
        {
            // connection established
            ledSetting(1);
 80023e0:	2001      	movs	r0, #1
 80023e2:	f7fe fc51 	bl	8000c88 <ledSetting>
            startup = 0;
 80023e6:	4b74      	ldr	r3, [pc, #464]	; (80025b8 <main+0x2fc>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
            connection = 1;
 80023ec:	4b73      	ldr	r3, [pc, #460]	; (80025bc <main+0x300>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
            memset (&cb[inix], 0, sizeof (cb[inix]));
 80023f2:	4b61      	ldr	r3, [pc, #388]	; (8002578 <main+0x2bc>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b60      	ldr	r3, [pc, #384]	; (800257c <main+0x2c0>)
 80023fa:	4413      	add	r3, r2
 80023fc:	2201      	movs	r2, #1
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f002 f815 	bl	8004430 <memset>
 8002406:	e7c8      	b.n	800239a <main+0xde>
        }
        else if (strncmp(rxBuff, "#END,", strlen(rxBuff)) == 0)
 8002408:	463b      	mov	r3, r7
 800240a:	4618      	mov	r0, r3
 800240c:	f002 f918 	bl	8004640 <strlen>
 8002410:	4602      	mov	r2, r0
 8002412:	463b      	mov	r3, r7
 8002414:	496a      	ldr	r1, [pc, #424]	; (80025c0 <main+0x304>)
 8002416:	4618      	mov	r0, r3
 8002418:	f002 f980 	bl	800471c <strncmp>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d113      	bne.n	800244a <main+0x18e>
        {
            // connection END
            ledSetting(0);
 8002422:	2000      	movs	r0, #0
 8002424:	f7fe fc30 	bl	8000c88 <ledSetting>
            startup = 0;
 8002428:	4b63      	ldr	r3, [pc, #396]	; (80025b8 <main+0x2fc>)
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
            connection = 0;
 800242e:	4b63      	ldr	r3, [pc, #396]	; (80025bc <main+0x300>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
            memset (&cb[inix], 0, sizeof (cb[inix]));
 8002434:	4b50      	ldr	r3, [pc, #320]	; (8002578 <main+0x2bc>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	4b50      	ldr	r3, [pc, #320]	; (800257c <main+0x2c0>)
 800243c:	4413      	add	r3, r2
 800243e:	2201      	movs	r2, #1
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f001 fff4 	bl	8004430 <memset>
 8002448:	e7a7      	b.n	800239a <main+0xde>
        }
        else if (strncmp(rxBuff, "#CON,", strlen(rxBuff)) == 0)
 800244a:	463b      	mov	r3, r7
 800244c:	4618      	mov	r0, r3
 800244e:	f002 f8f7 	bl	8004640 <strlen>
 8002452:	4602      	mov	r2, r0
 8002454:	463b      	mov	r3, r7
 8002456:	4957      	ldr	r1, [pc, #348]	; (80025b4 <main+0x2f8>)
 8002458:	4618      	mov	r0, r3
 800245a:	f002 f95f 	bl	800471c <strncmp>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d113      	bne.n	800248c <main+0x1d0>
        {
            // connection established
            ledSetting(1);
 8002464:	2001      	movs	r0, #1
 8002466:	f7fe fc0f 	bl	8000c88 <ledSetting>
            startup = 0;
 800246a:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <main+0x2fc>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
            connection = 1;
 8002470:	4b52      	ldr	r3, [pc, #328]	; (80025bc <main+0x300>)
 8002472:	2201      	movs	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
            memset (&cb[inix], 0, sizeof (cb[inix]));
 8002476:	4b40      	ldr	r3, [pc, #256]	; (8002578 <main+0x2bc>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	4b3f      	ldr	r3, [pc, #252]	; (800257c <main+0x2c0>)
 800247e:	4413      	add	r3, r2
 8002480:	2201      	movs	r2, #1
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f001 ffd3 	bl	8004430 <memset>
 800248a:	e786      	b.n	800239a <main+0xde>
        }
        else if (strncmp(rxBuff, "#SER,f", strlen(rxBuff)) == 0)
 800248c:	463b      	mov	r3, r7
 800248e:	4618      	mov	r0, r3
 8002490:	f002 f8d6 	bl	8004640 <strlen>
 8002494:	4602      	mov	r2, r0
 8002496:	463b      	mov	r3, r7
 8002498:	494a      	ldr	r1, [pc, #296]	; (80025c4 <main+0x308>)
 800249a:	4618      	mov	r0, r3
 800249c:	f002 f93e 	bl	800471c <strncmp>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d103      	bne.n	80024ae <main+0x1f2>
        {
            // Servos off
            servoEnable = 0;
 80024a6:	4b48      	ldr	r3, [pc, #288]	; (80025c8 <main+0x30c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	e775      	b.n	800239a <main+0xde>
        }
        else if (strncmp(rxBuff, "#SER,n", strlen(rxBuff)) == 0)
 80024ae:	463b      	mov	r3, r7
 80024b0:	4618      	mov	r0, r3
 80024b2:	f002 f8c5 	bl	8004640 <strlen>
 80024b6:	4602      	mov	r2, r0
 80024b8:	463b      	mov	r3, r7
 80024ba:	4944      	ldr	r1, [pc, #272]	; (80025cc <main+0x310>)
 80024bc:	4618      	mov	r0, r3
 80024be:	f002 f92d 	bl	800471c <strncmp>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d106      	bne.n	80024d6 <main+0x21a>
        {
            // Servos on
            servoEnable = 1;
 80024c8:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <main+0x30c>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
            startup = 0;
 80024ce:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <main+0x2fc>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e761      	b.n	800239a <main+0xde>
        }
        else if (strncmp(rxBuff, "#STA,", strlen(rxBuff)) == 0)
 80024d6:	463b      	mov	r3, r7
 80024d8:	4618      	mov	r0, r3
 80024da:	f002 f8b1 	bl	8004640 <strlen>
 80024de:	4602      	mov	r2, r0
 80024e0:	463b      	mov	r3, r7
 80024e2:	493b      	ldr	r1, [pc, #236]	; (80025d0 <main+0x314>)
 80024e4:	4618      	mov	r0, r3
 80024e6:	f002 f919 	bl	800471c <strncmp>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d103      	bne.n	80024f8 <main+0x23c>
        {
            // send statistic package
            statisticSend = 1;
 80024f0:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <main+0x318>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	e750      	b.n	800239a <main+0xde>
        }
        else if (strncmp(rxBuff, "#AVG,a", strlen(rxBuff)) == 0)
 80024f8:	463b      	mov	r3, r7
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 f8a0 	bl	8004640 <strlen>
 8002500:	4602      	mov	r2, r0
 8002502:	463b      	mov	r3, r7
 8002504:	4934      	ldr	r1, [pc, #208]	; (80025d8 <main+0x31c>)
 8002506:	4618      	mov	r0, r3
 8002508:	f002 f908 	bl	800471c <strncmp>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d103      	bne.n	800251a <main+0x25e>
        {
            // average angle
            averageChoice = 1;
 8002512:	4b32      	ldr	r3, [pc, #200]	; (80025dc <main+0x320>)
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e73f      	b.n	800239a <main+0xde>
        }
        else if (strncmp(rxBuff, "#AVG,p", strlen(rxBuff)) == 0)
 800251a:	463b      	mov	r3, r7
 800251c:	4618      	mov	r0, r3
 800251e:	f002 f88f 	bl	8004640 <strlen>
 8002522:	4602      	mov	r2, r0
 8002524:	463b      	mov	r3, r7
 8002526:	492e      	ldr	r1, [pc, #184]	; (80025e0 <main+0x324>)
 8002528:	4618      	mov	r0, r3
 800252a:	f002 f8f7 	bl	800471c <strncmp>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d103      	bne.n	800253c <main+0x280>
        {
            // average PWM
            averageChoice = 0;
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <main+0x320>)
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e72e      	b.n	800239a <main+0xde>
        }
		else if (strncmp(rxBuff, "#REQ,", strlen(rxBuff)) == 0)
 800253c:	463b      	mov	r3, r7
 800253e:	4618      	mov	r0, r3
 8002540:	f002 f87e 	bl	8004640 <strlen>
 8002544:	4602      	mov	r2, r0
 8002546:	463b      	mov	r3, r7
 8002548:	4926      	ldr	r1, [pc, #152]	; (80025e4 <main+0x328>)
 800254a:	4618      	mov	r0, r3
 800254c:	f002 f8e6 	bl	800471c <strncmp>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10e      	bne.n	8002574 <main+0x2b8>
        {
            // send data to PC GUI
            protocolComplete(direction, readAxes.axisX, readAxes.axisY, readAxes.axisZ);
 8002556:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <main+0x32c>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	b298      	uxth	r0, r3
 800255c:	4b23      	ldr	r3, [pc, #140]	; (80025ec <main+0x330>)
 800255e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002562:	4b22      	ldr	r3, [pc, #136]	; (80025ec <main+0x330>)
 8002564:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002568:	4b20      	ldr	r3, [pc, #128]	; (80025ec <main+0x330>)
 800256a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800256e:	f7fe fa5b 	bl	8000a28 <protocolComplete>
 8002572:	e712      	b.n	800239a <main+0xde>
        }
        else
        {
            continue;
 8002574:	bf00      	nop
        }
    }
 8002576:	e710      	b.n	800239a <main+0xde>
 8002578:	20000ad2 	.word	0x20000ad2
 800257c:	20000ab4 	.word	0x20000ab4
 8002580:	0800abb4 	.word	0x0800abb4
 8002584:	401e0000 	.word	0x401e0000
 8002588:	0800abc8 	.word	0x0800abc8
 800258c:	0800abe4 	.word	0x0800abe4
 8002590:	0800ac00 	.word	0x0800ac00
 8002594:	0800ac2c 	.word	0x0800ac2c
 8002598:	0800ac40 	.word	0x0800ac40
 800259c:	0800ac5c 	.word	0x0800ac5c
 80025a0:	2000ffc0 	.word	0x2000ffc0
 80025a4:	10624dd3 	.word	0x10624dd3
 80025a8:	0800ac70 	.word	0x0800ac70
 80025ac:	0800ac8c 	.word	0x0800ac8c
 80025b0:	0800acac 	.word	0x0800acac
 80025b4:	0800acbc 	.word	0x0800acbc
 80025b8:	20000aac 	.word	0x20000aac
 80025bc:	20000ade 	.word	0x20000ade
 80025c0:	0800acc4 	.word	0x0800acc4
 80025c4:	0800accc 	.word	0x0800accc
 80025c8:	20000ad3 	.word	0x20000ad3
 80025cc:	0800acd4 	.word	0x0800acd4
 80025d0:	0800acdc 	.word	0x0800acdc
 80025d4:	20000aa8 	.word	0x20000aa8
 80025d8:	0800ace4 	.word	0x0800ace4
 80025dc:	20000ad6 	.word	0x20000ad6
 80025e0:	0800acec 	.word	0x0800acec
 80025e4:	0800acf4 	.word	0x0800acf4
 80025e8:	20000ad1 	.word	0x20000ad1
 80025ec:	20000ad8 	.word	0x20000ad8

080025f0 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 80025fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop

08002628 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
 return -1;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop

0800263c <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <_fstat+0x16>
  return -1;
 800264c:	f04f 33ff 	mov.w	r3, #4294967295
 8002650:	e001      	b.n	8002656 <_fstat+0x1a>
 else
  return -2;
 8002652:	f06f 0301 	mvn.w	r3, #1
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop

08002664 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <_sbrk+0x60>)
 800266e:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <_sbrk+0x64>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d108      	bne.n	800268a <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8002678:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <_sbrk+0x64>)
 800267a:	4a14      	ldr	r2, [pc, #80]	; (80026cc <_sbrk+0x68>)
 800267c:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <_sbrk+0x64>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	4413      	add	r3, r2
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <_sbrk+0x6c>)
 8002688:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 800268a:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <_sbrk+0x64>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 800269c:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 80026a0:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <_sbrk+0x6c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d301      	bcc.n	80026b0 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 80026ac:	2300      	movs	r3, #0
 80026ae:	e003      	b.n	80026b8 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 80026b0:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <_sbrk+0x64>)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 80026b6:	693b      	ldr	r3, [r7, #16]
 }
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	371c      	adds	r7, #28
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	0000f4d0 	.word	0x0000f4d0
 80026c8:	20000a6c 	.word	0x20000a6c
 80026cc:	20000af0 	.word	0x20000af0
 80026d0:	20000a70 	.word	0x20000a70

080026d4 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop

080026e4 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	e003      	b.n	8002712 <delay+0x16>
  {
    __NOP();
 800270a:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	3301      	adds	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	429a      	cmp	r2, r3
 8002718:	d3f7      	bcc.n	800270a <delay+0xe>
  {
    __NOP();
  }
}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop

08002728 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8002728:	b598      	push	{r3, r4, r7, lr}
 800272a:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 800272c:	4a06      	ldr	r2, [pc, #24]	; (8002748 <SystemInit+0x20>)
 800272e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002732:	4614      	mov	r4, r2
 8002734:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002736:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 800273a:	f000 f807 	bl	800274c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 800273e:	f000 f83d 	bl	80027bc <SystemCoreClockSetup>
}
 8002742:	bf00      	nop
 8002744:	bd98      	pop	{r3, r4, r7, pc}
 8002746:	bf00      	nop
 8002748:	2000ffc4 	.word	0x2000ffc4

0800274c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002752:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8002754:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <SystemCoreSetup+0x64>)
 8002756:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <SystemCoreSetup+0x68>)
 8002758:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800275a:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800275e:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8002760:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <SystemCoreSetup+0x64>)
 8002762:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <SystemCoreSetup+0x64>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800276c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8002770:	4a0f      	ldr	r2, [pc, #60]	; (80027b0 <SystemCoreSetup+0x64>)
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <SystemCoreSetup+0x64>)
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f023 0308 	bic.w	r3, r3, #8
 800277a:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <SystemCoreSetup+0x6c>)
 800277e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002782:	3314      	adds	r3, #20
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f023 030f 	bic.w	r3, r3, #15
 800278e:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f043 0303 	orr.w	r3, r3, #3
 8002796:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8002798:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <SystemCoreSetup+0x6c>)
 800279a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279e:	3314      	adds	r3, #20
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	601a      	str	r2, [r3, #0]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000ed00 	.word	0xe000ed00
 80027b4:	08000000 	.word	0x08000000
 80027b8:	58001000 	.word	0x58001000

080027bc <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80027c0:	4b75      	ldr	r3, [pc, #468]	; (8002998 <SystemCoreClockSetup+0x1dc>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10c      	bne.n	80027e6 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 80027cc:	4a72      	ldr	r2, [pc, #456]	; (8002998 <SystemCoreClockSetup+0x1dc>)
 80027ce:	4b72      	ldr	r3, [pc, #456]	; (8002998 <SystemCoreClockSetup+0x1dc>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80027d8:	bf00      	nop
 80027da:	4b6f      	ldr	r3, [pc, #444]	; (8002998 <SystemCoreClockSetup+0x1dc>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f9      	beq.n	80027da <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80027e6:	4b6d      	ldr	r3, [pc, #436]	; (800299c <SystemCoreClockSetup+0x1e0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80027f2:	4a6a      	ldr	r2, [pc, #424]	; (800299c <SystemCoreClockSetup+0x1e0>)
 80027f4:	4b69      	ldr	r3, [pc, #420]	; (800299c <SystemCoreClockSetup+0x1e0>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fc:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80027fe:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8002802:	f7ff ff7b 	bl	80026fc <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8002806:	4a66      	ldr	r2, [pc, #408]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 8002808:	4b65      	ldr	r3, [pc, #404]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002810:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8002812:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002816:	f7ff ff71 	bl	80026fc <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800281a:	4a61      	ldr	r2, [pc, #388]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 800281c:	4b60      	ldr	r3, [pc, #384]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002824:	f023 0302 	bic.w	r3, r3, #2
 8002828:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 800282a:	4b5e      	ldr	r3, [pc, #376]	; (80029a4 <SystemCoreClockSetup+0x1e8>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002832:	2b00      	cmp	r3, #0
 8002834:	d029      	beq.n	800288a <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8002836:	4a5b      	ldr	r2, [pc, #364]	; (80029a4 <SystemCoreClockSetup+0x1e8>)
 8002838:	4b5a      	ldr	r3, [pc, #360]	; (80029a4 <SystemCoreClockSetup+0x1e8>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002840:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002844:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8002846:	f000 f927 	bl	8002a98 <OSCHP_GetFrequency>
 800284a:	4602      	mov	r2, r0
 800284c:	4b56      	ldr	r3, [pc, #344]	; (80029a8 <SystemCoreClockSetup+0x1ec>)
 800284e:	fba3 2302 	umull	r2, r3, r3, r2
 8002852:	0d1b      	lsrs	r3, r3, #20
 8002854:	3b01      	subs	r3, #1
 8002856:	041b      	lsls	r3, r3, #16
 8002858:	4952      	ldr	r1, [pc, #328]	; (80029a4 <SystemCoreClockSetup+0x1e8>)
 800285a:	4a52      	ldr	r2, [pc, #328]	; (80029a4 <SystemCoreClockSetup+0x1e8>)
 800285c:	6852      	ldr	r2, [r2, #4]
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8002862:	4a4f      	ldr	r2, [pc, #316]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 8002864:	4b4e      	ldr	r3, [pc, #312]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800286e:	4a4c      	ldr	r2, [pc, #304]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 8002870:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002878:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 800287a:	bf00      	nop
 800287c:	4b48      	ldr	r3, [pc, #288]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002884:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002888:	d1f8      	bne.n	800287c <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 800288a:	4a45      	ldr	r2, [pc, #276]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 800288c:	4b44      	ldr	r3, [pc, #272]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8002896:	4a42      	ldr	r2, [pc, #264]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 8002898:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f043 0310 	orr.w	r3, r3, #16
 80028a0:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80028a2:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 80028a4:	4a41      	ldr	r2, [pc, #260]	; (80029ac <SystemCoreClockSetup+0x1f0>)
 80028a6:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80028a8:	4a3d      	ldr	r2, [pc, #244]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028b2:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 80028b4:	4a3a      	ldr	r2, [pc, #232]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 80028b6:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f023 0310 	bic.w	r3, r3, #16
 80028be:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 80028c0:	4a37      	ldr	r2, [pc, #220]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 80028c2:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ca:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80028cc:	bf00      	nop
 80028ce:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f9      	beq.n	80028ce <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80028da:	4a31      	ldr	r2, [pc, #196]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 80028dc:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80028e6:	bf00      	nop
 80028e8:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f9      	bne.n	80028e8 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80028f4:	4a2e      	ldr	r2, [pc, #184]	; (80029b0 <SystemCoreClockSetup+0x1f4>)
 80028f6:	4b2e      	ldr	r3, [pc, #184]	; (80029b0 <SystemCoreClockSetup+0x1f4>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fe:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8002900:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <SystemCoreClockSetup+0x1f4>)
 8002902:	2200      	movs	r2, #0
 8002904:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8002906:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <SystemCoreClockSetup+0x1f4>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 800290c:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <SystemCoreClockSetup+0x1f4>)
 800290e:	2200      	movs	r2, #0
 8002910:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8002912:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <SystemCoreClockSetup+0x1f4>)
 8002914:	2200      	movs	r2, #0
 8002916:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8002918:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <SystemCoreClockSetup+0x1f4>)
 800291a:	2200      	movs	r2, #0
 800291c:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 800291e:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <SystemCoreClockSetup+0x1f4>)
 8002920:	2203      	movs	r2, #3
 8002922:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002924:	4a1e      	ldr	r2, [pc, #120]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 8002926:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800292e:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 8002932:	4a20      	ldr	r2, [pc, #128]	; (80029b4 <SystemCoreClockSetup+0x1f8>)
 8002934:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8002936:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800293a:	f7ff fedf 	bl	80026fc <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800293e:	bf00      	nop
 8002940:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f9      	beq.n	8002940 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800294c:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 800294e:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <SystemCoreClockSetup+0x1fc>)
 8002950:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8002952:	f241 1094 	movw	r0, #4500	; 0x1194
 8002956:	f7ff fed1 	bl	80026fc <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800295a:	bf00      	nop
 800295c:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f9      	beq.n	800295c <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002968:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 800296a:	4a14      	ldr	r2, [pc, #80]	; (80029bc <SystemCoreClockSetup+0x200>)
 800296c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 800296e:	f241 7070 	movw	r0, #6000	; 0x1770
 8002972:	f7ff fec3 	bl	80026fc <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002976:	bf00      	nop
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <SystemCoreClockSetup+0x1e4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f9      	beq.n	8002978 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <SystemCoreClockSetup+0x204>)
 8002986:	2205      	movs	r2, #5
 8002988:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <SystemCoreClockSetup+0x1f4>)
 800298c:	2200      	movs	r2, #0
 800298e:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8002990:	f000 f818 	bl	80029c4 <SystemCoreClockUpdate>
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}
 8002998:	50004200 	.word	0x50004200
 800299c:	50004400 	.word	0x50004400
 80029a0:	50004710 	.word	0x50004710
 80029a4:	50004700 	.word	0x50004700
 80029a8:	6b5fca6b 	.word	0x6b5fca6b
 80029ac:	01134f00 	.word	0x01134f00
 80029b0:	50004600 	.word	0x50004600
 80029b4:	01074f00 	.word	0x01074f00
 80029b8:	01044f00 	.word	0x01044f00
 80029bc:	01034f00 	.word	0x01034f00
 80029c0:	50004160 	.word	0x50004160

080029c4 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80029ca:	4b2f      	ldr	r3, [pc, #188]	; (8002a88 <SystemCoreClockUpdate+0xc4>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d03e      	beq.n	8002a54 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80029d6:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <SystemCoreClockUpdate+0xc8>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80029e2:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <SystemCoreClockUpdate+0xcc>)
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	e002      	b.n	80029ee <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80029e8:	f000 f856 	bl	8002a98 <OSCHP_GetFrequency>
 80029ec:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <SystemCoreClockUpdate+0xc8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d020      	beq.n	8002a3c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <SystemCoreClockUpdate+0xc8>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002a02:	0e1b      	lsrs	r3, r3, #24
 8002a04:	3301      	adds	r3, #1
 8002a06:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8002a08:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <SystemCoreClockUpdate+0xc8>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8002a10:	0a1b      	lsrs	r3, r3, #8
 8002a12:	3301      	adds	r3, #1
 8002a14:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8002a16:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <SystemCoreClockUpdate+0xc8>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a1e:	0c1b      	lsrs	r3, r3, #16
 8002a20:	3301      	adds	r3, #1
 8002a22:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	fb02 f303 	mul.w	r3, r2, r3
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	fb02 f303 	mul.w	r3, r2, r3
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	e00d      	b.n	8002a58 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8002a3c:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <SystemCoreClockUpdate+0xc8>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a44:	3301      	adds	r3, #1
 8002a46:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	e001      	b.n	8002a58 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8002a54:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <SystemCoreClockUpdate+0xcc>)
 8002a56:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <SystemCoreClockUpdate+0xc4>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a66:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8002a68:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <SystemCoreClockUpdate+0xc4>)
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	3301      	adds	r3, #1
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8002a7a:	4a06      	ldr	r2, [pc, #24]	; (8002a94 <SystemCoreClockUpdate+0xd0>)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	50004600 	.word	0x50004600
 8002a8c:	50004710 	.word	0x50004710
 8002a90:	016e3600 	.word	0x016e3600
 8002a94:	2000ffc0 	.word	0x2000ffc0

08002a98 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8002a9c:	4b02      	ldr	r3, [pc, #8]	; (8002aa8 <OSCHP_GetFrequency+0x10>)
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	00b71b00 	.word	0x00b71b00

08002aac <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8002aba:	7afb      	ldrb	r3, [r7, #11]
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	7afb      	ldrb	r3, [r7, #11]
 8002ac4:	089b      	lsrs	r3, r3, #2
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	3204      	adds	r2, #4
 8002ace:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ad2:	7afb      	ldrb	r3, [r7, #11]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	21f8      	movs	r1, #248	; 0xf8
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	ea02 0103 	and.w	r1, r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1d02      	adds	r2, r0, #4
 8002aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002af2:	7afb      	ldrb	r3, [r7, #11]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	2103      	movs	r1, #3
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	401a      	ands	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a38      	ldr	r2, [pc, #224]	; (8002be8 <XMC_GPIO_Init+0x13c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d003      	beq.n	8002b14 <XMC_GPIO_Init+0x68>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4a37      	ldr	r2, [pc, #220]	; (8002bec <XMC_GPIO_Init+0x140>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d10a      	bne.n	8002b2a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b18:	7afb      	ldrb	r3, [r7, #11]
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	401a      	ands	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	661a      	str	r2, [r3, #96]	; 0x60
 8002b28:	e03c      	b.n	8002ba4 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	7afb      	ldrb	r3, [r7, #11]
 8002b30:	409a      	lsls	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8002b36:	7afb      	ldrb	r3, [r7, #11]
 8002b38:	08db      	lsrs	r3, r3, #3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
 8002b40:	08db      	lsrs	r3, r3, #3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3210      	adds	r2, #16
 8002b4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b4e:	7afb      	ldrb	r3, [r7, #11]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	2107      	movs	r1, #7
 8002b58:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	ea02 0103 	and.w	r1, r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f100 0210 	add.w	r2, r0, #16
 8002b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8002b6c:	7afb      	ldrb	r3, [r7, #11]
 8002b6e:	08db      	lsrs	r3, r3, #3
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	4618      	mov	r0, r3
 8002b74:	7afb      	ldrb	r3, [r7, #11]
 8002b76:	08db      	lsrs	r3, r3, #3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3210      	adds	r2, #16
 8002b80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7a1b      	ldrb	r3, [r3, #8]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	7afb      	ldrb	r3, [r7, #11]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	ea42 0103 	orr.w	r1, r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f100 0210 	add.w	r2, r0, #16
 8002ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8002ba4:	7afb      	ldrb	r3, [r7, #11]
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	4618      	mov	r0, r3
 8002bac:	7afb      	ldrb	r3, [r7, #11]
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3204      	adds	r2, #4
 8002bb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	7afb      	ldrb	r3, [r7, #11]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	ea42 0103 	orr.w	r1, r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1d02      	adds	r2, r0, #4
 8002bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	48028e00 	.word	0x48028e00
 8002bec:	48028f00 	.word	0x48028f00

08002bf0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c02:	b2db      	uxtb	r3, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8002c36:	2310      	movs	r3, #16
 8002c38:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fa62 	bl	8003104 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	79db      	ldrb	r3, [r3, #7]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	79db      	ldrb	r3, [r3, #7]
 8002c4c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4619      	mov	r1, r3
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 faa2 	bl	80031a0 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	799b      	ldrb	r3, [r3, #6]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	085b      	lsrs	r3, r3, #1
 8002c68:	3301      	adds	r3, #1
 8002c6a:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	791b      	ldrb	r3, [r3, #4]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	061b      	lsls	r3, r3, #24
 8002c82:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	795b      	ldrb	r3, [r3, #5]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	795b      	ldrb	r3, [r3, #5]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	041b      	lsls	r3, r3, #16
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ca4:	e008      	b.n	8002cb8 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	791b      	ldrb	r3, [r3, #4]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	891b      	ldrh	r3, [r3, #8]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop

08002cdc <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cee:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d110      	bne.n	8002d18 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002cf6:	bf00      	nop
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff79 	bl	8002bf0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b80      	cmp	r3, #128	; 0x80
 8002d02:	d0f9      	beq.n	8002cf8 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002d04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ff81 	bl	8002c10 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8002d0e:	887a      	ldrh	r2, [r7, #2]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 8002d16:	e003      	b.n	8002d20 <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 8002d18:	887a      	ldrh	r2, [r7, #2]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002d36:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d42:	81fb      	strh	r3, [r7, #14]
 8002d44:	e003      	b.n	8002d4e <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002d4c:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8002d4e:	89fb      	ldrh	r3, [r7, #14]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d6e:	b2db      	uxtb	r3, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop

08002da0 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f9aa 	bl	8003104 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <XMC_I2C_CH_Init+0x4c>)
 8002db4:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	889b      	ldrh	r3, [r3, #4]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f817 	bl	8002df0 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f831 	bl	8002e30 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002dd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ddc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	073f0303 	.word	0x073f0303

08002df0 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8002dfc:	887b      	ldrh	r3, [r7, #2]
 8002dfe:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8002e02:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8002e06:	d109      	bne.n	8002e1c <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 8002e08:	887b      	ldrh	r3, [r7, #2]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	887b      	ldrh	r3, [r7, #2]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8002e1a:	e003      	b.n	8002e24 <XMC_I2C_CH_SetSlaveAddress+0x34>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8002e1c:	887b      	ldrh	r3, [r7, #2]
 8002e1e:	021a      	lsls	r2, r3, #8
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	4a17      	ldr	r2, [pc, #92]	; (8002ea0 <XMC_I2C_CH_SetBaudrate+0x70>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d810      	bhi.n	8002e68 <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 8002e52:	220a      	movs	r2, #10
 8002e54:	6839      	ldr	r1, [r7, #0]
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f9a2 	bl	80031a0 <XMC_USIC_CH_SetBaudrate>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d119      	bne.n	8002e96 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e016      	b.n	8002e96 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <XMC_I2C_CH_SetBaudrate+0x74>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d810      	bhi.n	8002e92 <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8002e7c:	2219      	movs	r2, #25
 8002e7e:	6839      	ldr	r1, [r7, #0]
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f98d 	bl	80031a0 <XMC_USIC_CH_SetBaudrate>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d104      	bne.n	8002e96 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]
 8002e90:	e001      	b.n	8002e96 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	000186a0 	.word	0x000186a0
 8002ea4:	00061a80 	.word	0x00061a80

08002ea8 <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8002eb8:	887b      	ldrh	r3, [r7, #2]
 8002eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8002ec2:	787b      	ldrb	r3, [r7, #1]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d103      	bne.n	8002ed0 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ed6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d110      	bne.n	8002f00 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002ede:	bf00      	nop
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ff3b 	bl	8002d5c <XMC_USIC_CH_GetTransmitBufferStatus>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b80      	cmp	r3, #128	; 0x80
 8002eea:	d0f9      	beq.n	8002ee0 <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff ff43 	bl	8002d7c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = temp;
  }
}
 8002efe:	e003      	b.n	8002f08 <XMC_I2C_CH_MasterStart+0x60>

    channel->TBUF[0] = temp;
  }
  else
  {
    channel->IN[0U] = temp;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8002f20:	887b      	ldrh	r3, [r7, #2]
 8002f22:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8002f2a:	787b      	ldrb	r3, [r7, #1]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d103      	bne.n	8002f38 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f3e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d110      	bne.n	8002f68 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002f46:	bf00      	nop
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff07 	bl	8002d5c <XMC_USIC_CH_GetTransmitBufferStatus>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b80      	cmp	r3, #128	; 0x80
 8002f52:	d0f9      	beq.n	8002f48 <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002f54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ff0f 	bl	8002d7c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = tmp;
  }
}
 8002f66:	e003      	b.n	8002f70 <XMC_I2C_CH_MasterRepeatedStart+0x60>

    channel->TBUF[0] = tmp;
  }
  else
  {
    channel->IN[0U] = tmp;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f86:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d111      	bne.n	8002fb2 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002f8e:	bf00      	nop
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff fee3 	bl	8002d5c <XMC_USIC_CH_GetTransmitBufferStatus>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b80      	cmp	r3, #128	; 0x80
 8002f9a:	d0f9      	beq.n	8002f90 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002f9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff feeb 	bl	8002d7c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
}
 8002fb0:	e004      	b.n	8002fbc <XMC_I2C_CH_MasterStop+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002fb8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fd6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d110      	bne.n	8003000 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002fde:	bf00      	nop
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff febb 	bl	8002d5c <XMC_USIC_CH_GetTransmitBufferStatus>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b80      	cmp	r3, #128	; 0x80
 8002fea:	d0f9      	beq.n	8002fe0 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff fec3 	bl	8002d7c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
}
 8002ffe:	e003      	b.n	8003008 <XMC_I2C_CH_MasterTransmit+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <XMC_I2C_CH_MasterReceiveNack>:
  }
}

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800301e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d111      	bne.n	800304a <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8003026:	bf00      	nop
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff fe97 	bl	8002d5c <XMC_USIC_CH_GetTransmitBufferStatus>
 800302e:	4603      	mov	r3, r0
 8003030:	2b80      	cmp	r3, #128	; 0x80
 8003032:	d0f9      	beq.n	8003028 <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8003034:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff fe9f 	bl	8002d7c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
}
 8003048:	e004      	b.n	8003054 <XMC_I2C_CH_MasterReceiveNack+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003050:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800306a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d103      	bne.n	800307a <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	e003      	b.n	8003082 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8003080:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8003082:	7bfb      	ldrb	r3, [r7, #15]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003094:	4b03      	ldr	r3, [pc, #12]	; (80030a4 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8003096:	681b      	ldr	r3, [r3, #0]
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	2000ffc0 	.word	0x2000ffc0

080030a8 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	0f1b      	lsrs	r3, r3, #28
 80030b4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80030bc:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 80030cc:	4413      	add	r3, r2
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	601a      	str	r2, [r3, #0]
}
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	50004414 	.word	0x50004414

080030e4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80030e8:	f7ff ffd2 	bl	8003090 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80030ec:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80030ee:	4b04      	ldr	r3, [pc, #16]	; (8003100 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80030f6:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	50004600 	.word	0x50004600

08003104 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a1b      	ldr	r2, [pc, #108]	; (800317c <XMC_USIC_CH_Enable+0x78>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <XMC_USIC_CH_Enable+0x18>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a1a      	ldr	r2, [pc, #104]	; (8003180 <XMC_USIC_CH_Enable+0x7c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d103      	bne.n	8003124 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 800311c:	4819      	ldr	r0, [pc, #100]	; (8003184 <XMC_USIC_CH_Enable+0x80>)
 800311e:	f000 f91f 	bl	8003360 <XMC_USIC_Enable>
 8003122:	e016      	b.n	8003152 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a18      	ldr	r2, [pc, #96]	; (8003188 <XMC_USIC_CH_Enable+0x84>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d003      	beq.n	8003134 <XMC_USIC_CH_Enable+0x30>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <XMC_USIC_CH_Enable+0x88>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d103      	bne.n	800313c <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8003134:	4816      	ldr	r0, [pc, #88]	; (8003190 <XMC_USIC_CH_Enable+0x8c>)
 8003136:	f000 f913 	bl	8003360 <XMC_USIC_Enable>
 800313a:	e00a      	b.n	8003152 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a15      	ldr	r2, [pc, #84]	; (8003194 <XMC_USIC_CH_Enable+0x90>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d003      	beq.n	800314c <XMC_USIC_CH_Enable+0x48>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a14      	ldr	r2, [pc, #80]	; (8003198 <XMC_USIC_CH_Enable+0x94>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d102      	bne.n	8003152 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 800314c:	4813      	ldr	r0, [pc, #76]	; (800319c <XMC_USIC_CH_Enable+0x98>)
 800314e:	f000 f907 	bl	8003360 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2203      	movs	r2, #3
 8003156:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8003158:	bf00      	nop
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f9      	beq.n	800315a <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f023 020f 	bic.w	r2, r3, #15
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40030000 	.word	0x40030000
 8003180:	40030200 	.word	0x40030200
 8003184:	40030008 	.word	0x40030008
 8003188:	48020000 	.word	0x48020000
 800318c:	48020200 	.word	0x48020200
 8003190:	48020008 	.word	0x48020008
 8003194:	48024000 	.word	0x48024000
 8003198:	48024200 	.word	0x48024200
 800319c:	48024008 	.word	0x48024008

080031a0 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08e      	sub	sp, #56	; 0x38
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b63      	cmp	r3, #99	; 0x63
 80031b0:	d958      	bls.n	8003264 <XMC_USIC_CH_SetBaudrate+0xc4>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d055      	beq.n	8003264 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80031b8:	f7ff ff94 	bl	80030e4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b2e      	ldr	r3, [pc, #184]	; (8003278 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80031c0:	fba3 2302 	umull	r2, r3, r3, r2
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4a2b      	ldr	r2, [pc, #172]	; (8003278 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 80031d4:	2301      	movs	r3, #1
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80031d8:	2301      	movs	r3, #1
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80031dc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80031e2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80031e6:	633b      	str	r3, [r7, #48]	; 0x30
 80031e8:	e022      	b.n	8003230 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ee:	fb02 f203 	mul.w	r2, r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	0a9b      	lsrs	r3, r3, #10
 8003204:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800320c:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003214:	d209      	bcs.n	800322a <XMC_USIC_CH_SetBaudrate+0x8a>
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	429a      	cmp	r2, r3
 800321c:	d205      	bcs.n	800322a <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	3b01      	subs	r3, #1
 800322e:	633b      	str	r3, [r7, #48]	; 0x30
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1d9      	bne.n	80031ea <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8003236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003238:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	4b0d      	ldr	r3, [pc, #52]	; (800327c <XMC_USIC_CH_SetBaudrate+0xdc>)
 8003246:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	3a01      	subs	r2, #1
 800324c:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800324e:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	3b01      	subs	r3, #1
 8003254:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8003256:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003262:	e002      	b.n	800326a <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 800326a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800326e:	4618      	mov	r0, r3
 8003270:	3738      	adds	r7, #56	; 0x38
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	51eb851f 	.word	0x51eb851f
 800327c:	fc0080ef 	.word	0xfc0080ef

08003280 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003296:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 80032a8:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	0211      	lsls	r1, r2, #8
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 80032b2:	79fa      	ldrb	r2, [r7, #7]
 80032b4:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80032b6:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 80032b8:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 80032c0:	bf00      	nop
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	f8ffc0c0 	.word	0xf8ffc0c0

080032d0 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80032e6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 80032f8:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	0211      	lsls	r1, r2, #8
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8003302:	79fa      	ldrb	r2, [r7, #7]
 8003304:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8003306:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8003308:	4313      	orrs	r3, r2
 800330a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	efffc0c0 	.word	0xefffc0c0

08003324 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	460b      	mov	r3, r1
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003338:	7afb      	ldrb	r3, [r7, #11]
 800333a:	2107      	movs	r1, #7
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8003344:	7afb      	ldrb	r3, [r7, #11]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800334c:	431a      	orrs	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <XMC_USIC_Enable+0x40>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d104      	bne.n	800337a <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8003370:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003374:	f7ff fe98 	bl	80030a8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8003378:	e00e      	b.n	8003398 <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <XMC_USIC_Enable+0x44>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d103      	bne.n	800338a <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8003382:	4809      	ldr	r0, [pc, #36]	; (80033a8 <XMC_USIC_Enable+0x48>)
 8003384:	f7ff fe90 	bl	80030a8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8003388:	e006      	b.n	8003398 <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a07      	ldr	r2, [pc, #28]	; (80033ac <XMC_USIC_Enable+0x4c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d102      	bne.n	8003398 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8003392:	4807      	ldr	r0, [pc, #28]	; (80033b0 <XMC_USIC_Enable+0x50>)
 8003394:	f7ff fe88 	bl	80030a8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40030008 	.word	0x40030008
 80033a4:	48020008 	.word	0x48020008
 80033a8:	10000080 	.word	0x10000080
 80033ac:	48024008 	.word	0x48024008
 80033b0:	10000100 	.word	0x10000100
 80033b4:	00000000 	.word	0x00000000

080033b8 <atan>:
 80033b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033bc:	4bc4      	ldr	r3, [pc, #784]	; (80036d0 <atan+0x318>)
 80033be:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80033c2:	429e      	cmp	r6, r3
 80033c4:	4604      	mov	r4, r0
 80033c6:	460d      	mov	r5, r1
 80033c8:	468b      	mov	fp, r1
 80033ca:	dd0e      	ble.n	80033ea <atan+0x32>
 80033cc:	4bc1      	ldr	r3, [pc, #772]	; (80036d4 <atan+0x31c>)
 80033ce:	429e      	cmp	r6, r3
 80033d0:	f300 80ac 	bgt.w	800352c <atan+0x174>
 80033d4:	f000 80a7 	beq.w	8003526 <atan+0x16e>
 80033d8:	f1bb 0f00 	cmp.w	fp, #0
 80033dc:	f340 80e9 	ble.w	80035b2 <atan+0x1fa>
 80033e0:	a19f      	add	r1, pc, #636	; (adr r1, 8003660 <atan+0x2a8>)
 80033e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ea:	4bbb      	ldr	r3, [pc, #748]	; (80036d8 <atan+0x320>)
 80033ec:	429e      	cmp	r6, r3
 80033ee:	f300 80b5 	bgt.w	800355c <atan+0x1a4>
 80033f2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80033f6:	429e      	cmp	r6, r3
 80033f8:	f340 80a0 	ble.w	800353c <atan+0x184>
 80033fc:	f04f 3aff 	mov.w	sl, #4294967295
 8003400:	4622      	mov	r2, r4
 8003402:	462b      	mov	r3, r5
 8003404:	4620      	mov	r0, r4
 8003406:	4629      	mov	r1, r5
 8003408:	f000 fc52 	bl	8003cb0 <__aeabi_dmul>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4680      	mov	r8, r0
 8003412:	4689      	mov	r9, r1
 8003414:	f000 fc4c 	bl	8003cb0 <__aeabi_dmul>
 8003418:	a393      	add	r3, pc, #588	; (adr r3, 8003668 <atan+0x2b0>)
 800341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341e:	4606      	mov	r6, r0
 8003420:	460f      	mov	r7, r1
 8003422:	f000 fc45 	bl	8003cb0 <__aeabi_dmul>
 8003426:	a392      	add	r3, pc, #584	; (adr r3, 8003670 <atan+0x2b8>)
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	f000 fa8e 	bl	800394c <__adddf3>
 8003430:	4632      	mov	r2, r6
 8003432:	463b      	mov	r3, r7
 8003434:	f000 fc3c 	bl	8003cb0 <__aeabi_dmul>
 8003438:	a38f      	add	r3, pc, #572	; (adr r3, 8003678 <atan+0x2c0>)
 800343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343e:	f000 fa85 	bl	800394c <__adddf3>
 8003442:	4632      	mov	r2, r6
 8003444:	463b      	mov	r3, r7
 8003446:	f000 fc33 	bl	8003cb0 <__aeabi_dmul>
 800344a:	a38d      	add	r3, pc, #564	; (adr r3, 8003680 <atan+0x2c8>)
 800344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003450:	f000 fa7c 	bl	800394c <__adddf3>
 8003454:	4632      	mov	r2, r6
 8003456:	463b      	mov	r3, r7
 8003458:	f000 fc2a 	bl	8003cb0 <__aeabi_dmul>
 800345c:	a38a      	add	r3, pc, #552	; (adr r3, 8003688 <atan+0x2d0>)
 800345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003462:	f000 fa73 	bl	800394c <__adddf3>
 8003466:	4632      	mov	r2, r6
 8003468:	463b      	mov	r3, r7
 800346a:	f000 fc21 	bl	8003cb0 <__aeabi_dmul>
 800346e:	a388      	add	r3, pc, #544	; (adr r3, 8003690 <atan+0x2d8>)
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f000 fa6a 	bl	800394c <__adddf3>
 8003478:	4642      	mov	r2, r8
 800347a:	464b      	mov	r3, r9
 800347c:	f000 fc18 	bl	8003cb0 <__aeabi_dmul>
 8003480:	a385      	add	r3, pc, #532	; (adr r3, 8003698 <atan+0x2e0>)
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	4680      	mov	r8, r0
 8003488:	4689      	mov	r9, r1
 800348a:	4630      	mov	r0, r6
 800348c:	4639      	mov	r1, r7
 800348e:	f000 fc0f 	bl	8003cb0 <__aeabi_dmul>
 8003492:	a383      	add	r3, pc, #524	; (adr r3, 80036a0 <atan+0x2e8>)
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f000 fa56 	bl	8003948 <__aeabi_dsub>
 800349c:	4632      	mov	r2, r6
 800349e:	463b      	mov	r3, r7
 80034a0:	f000 fc06 	bl	8003cb0 <__aeabi_dmul>
 80034a4:	a380      	add	r3, pc, #512	; (adr r3, 80036a8 <atan+0x2f0>)
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	f000 fa4d 	bl	8003948 <__aeabi_dsub>
 80034ae:	4632      	mov	r2, r6
 80034b0:	463b      	mov	r3, r7
 80034b2:	f000 fbfd 	bl	8003cb0 <__aeabi_dmul>
 80034b6:	a37e      	add	r3, pc, #504	; (adr r3, 80036b0 <atan+0x2f8>)
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f000 fa44 	bl	8003948 <__aeabi_dsub>
 80034c0:	4632      	mov	r2, r6
 80034c2:	463b      	mov	r3, r7
 80034c4:	f000 fbf4 	bl	8003cb0 <__aeabi_dmul>
 80034c8:	a37b      	add	r3, pc, #492	; (adr r3, 80036b8 <atan+0x300>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f000 fa3b 	bl	8003948 <__aeabi_dsub>
 80034d2:	4632      	mov	r2, r6
 80034d4:	463b      	mov	r3, r7
 80034d6:	f000 fbeb 	bl	8003cb0 <__aeabi_dmul>
 80034da:	f1ba 3fff 	cmp.w	sl, #4294967295
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	d06b      	beq.n	80035bc <atan+0x204>
 80034e4:	4640      	mov	r0, r8
 80034e6:	4649      	mov	r1, r9
 80034e8:	f000 fa30 	bl	800394c <__adddf3>
 80034ec:	4622      	mov	r2, r4
 80034ee:	462b      	mov	r3, r5
 80034f0:	f000 fbde 	bl	8003cb0 <__aeabi_dmul>
 80034f4:	4e79      	ldr	r6, [pc, #484]	; (80036dc <atan+0x324>)
 80034f6:	4b7a      	ldr	r3, [pc, #488]	; (80036e0 <atan+0x328>)
 80034f8:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80034fc:	4456      	add	r6, sl
 80034fe:	449a      	add	sl, r3
 8003500:	e9da 2300 	ldrd	r2, r3, [sl]
 8003504:	f000 fa20 	bl	8003948 <__aeabi_dsub>
 8003508:	4622      	mov	r2, r4
 800350a:	462b      	mov	r3, r5
 800350c:	f000 fa1c 	bl	8003948 <__aeabi_dsub>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003518:	f000 fa16 	bl	8003948 <__aeabi_dsub>
 800351c:	f1bb 0f00 	cmp.w	fp, #0
 8003520:	db43      	blt.n	80035aa <atan+0x1f2>
 8003522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003526:	2800      	cmp	r0, #0
 8003528:	f43f af56 	beq.w	80033d8 <atan+0x20>
 800352c:	4622      	mov	r2, r4
 800352e:	462b      	mov	r3, r5
 8003530:	4620      	mov	r0, r4
 8003532:	4629      	mov	r1, r5
 8003534:	f000 fa0a 	bl	800394c <__adddf3>
 8003538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800353c:	a360      	add	r3, pc, #384	; (adr r3, 80036c0 <atan+0x308>)
 800353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003542:	f000 fa03 	bl	800394c <__adddf3>
 8003546:	2200      	movs	r2, #0
 8003548:	4b66      	ldr	r3, [pc, #408]	; (80036e4 <atan+0x32c>)
 800354a:	f000 fe41 	bl	80041d0 <__aeabi_dcmpgt>
 800354e:	2800      	cmp	r0, #0
 8003550:	f43f af54 	beq.w	80033fc <atan+0x44>
 8003554:	4620      	mov	r0, r4
 8003556:	4629      	mov	r1, r5
 8003558:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800355c:	f000 f8cc 	bl	80036f8 <fabs>
 8003560:	4b61      	ldr	r3, [pc, #388]	; (80036e8 <atan+0x330>)
 8003562:	429e      	cmp	r6, r3
 8003564:	4604      	mov	r4, r0
 8003566:	460d      	mov	r5, r1
 8003568:	dc38      	bgt.n	80035dc <atan+0x224>
 800356a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800356e:	429e      	cmp	r6, r3
 8003570:	dc5d      	bgt.n	800362e <atan+0x276>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	f000 f9e9 	bl	800394c <__adddf3>
 800357a:	2200      	movs	r2, #0
 800357c:	4b59      	ldr	r3, [pc, #356]	; (80036e4 <atan+0x32c>)
 800357e:	f000 f9e3 	bl	8003948 <__aeabi_dsub>
 8003582:	2200      	movs	r2, #0
 8003584:	4606      	mov	r6, r0
 8003586:	460f      	mov	r7, r1
 8003588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800358c:	4620      	mov	r0, r4
 800358e:	4629      	mov	r1, r5
 8003590:	f000 f9dc 	bl	800394c <__adddf3>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4630      	mov	r0, r6
 800359a:	4639      	mov	r1, r7
 800359c:	f000 fcb2 	bl	8003f04 <__aeabi_ddiv>
 80035a0:	f04f 0a00 	mov.w	sl, #0
 80035a4:	4604      	mov	r4, r0
 80035a6:	460d      	mov	r5, r1
 80035a8:	e72a      	b.n	8003400 <atan+0x48>
 80035aa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80035ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035b2:	a145      	add	r1, pc, #276	; (adr r1, 80036c8 <atan+0x310>)
 80035b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035bc:	4640      	mov	r0, r8
 80035be:	4649      	mov	r1, r9
 80035c0:	f000 f9c4 	bl	800394c <__adddf3>
 80035c4:	4622      	mov	r2, r4
 80035c6:	462b      	mov	r3, r5
 80035c8:	f000 fb72 	bl	8003cb0 <__aeabi_dmul>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4620      	mov	r0, r4
 80035d2:	4629      	mov	r1, r5
 80035d4:	f000 f9b8 	bl	8003948 <__aeabi_dsub>
 80035d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035dc:	4b43      	ldr	r3, [pc, #268]	; (80036ec <atan+0x334>)
 80035de:	429e      	cmp	r6, r3
 80035e0:	dc1a      	bgt.n	8003618 <atan+0x260>
 80035e2:	2200      	movs	r2, #0
 80035e4:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <atan+0x338>)
 80035e6:	f000 f9af 	bl	8003948 <__aeabi_dsub>
 80035ea:	2200      	movs	r2, #0
 80035ec:	4606      	mov	r6, r0
 80035ee:	460f      	mov	r7, r1
 80035f0:	4b3f      	ldr	r3, [pc, #252]	; (80036f0 <atan+0x338>)
 80035f2:	4620      	mov	r0, r4
 80035f4:	4629      	mov	r1, r5
 80035f6:	f000 fb5b 	bl	8003cb0 <__aeabi_dmul>
 80035fa:	2200      	movs	r2, #0
 80035fc:	4b39      	ldr	r3, [pc, #228]	; (80036e4 <atan+0x32c>)
 80035fe:	f000 f9a5 	bl	800394c <__adddf3>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4630      	mov	r0, r6
 8003608:	4639      	mov	r1, r7
 800360a:	f000 fc7b 	bl	8003f04 <__aeabi_ddiv>
 800360e:	f04f 0a02 	mov.w	sl, #2
 8003612:	4604      	mov	r4, r0
 8003614:	460d      	mov	r5, r1
 8003616:	e6f3      	b.n	8003400 <atan+0x48>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	2000      	movs	r0, #0
 800361e:	4935      	ldr	r1, [pc, #212]	; (80036f4 <atan+0x33c>)
 8003620:	f000 fc70 	bl	8003f04 <__aeabi_ddiv>
 8003624:	f04f 0a03 	mov.w	sl, #3
 8003628:	4604      	mov	r4, r0
 800362a:	460d      	mov	r5, r1
 800362c:	e6e8      	b.n	8003400 <atan+0x48>
 800362e:	2200      	movs	r2, #0
 8003630:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <atan+0x32c>)
 8003632:	f000 f989 	bl	8003948 <__aeabi_dsub>
 8003636:	2200      	movs	r2, #0
 8003638:	4606      	mov	r6, r0
 800363a:	460f      	mov	r7, r1
 800363c:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <atan+0x32c>)
 800363e:	4620      	mov	r0, r4
 8003640:	4629      	mov	r1, r5
 8003642:	f000 f983 	bl	800394c <__adddf3>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4630      	mov	r0, r6
 800364c:	4639      	mov	r1, r7
 800364e:	f000 fc59 	bl	8003f04 <__aeabi_ddiv>
 8003652:	f04f 0a01 	mov.w	sl, #1
 8003656:	4604      	mov	r4, r0
 8003658:	460d      	mov	r5, r1
 800365a:	e6d1      	b.n	8003400 <atan+0x48>
 800365c:	f3af 8000 	nop.w
 8003660:	54442d18 	.word	0x54442d18
 8003664:	3ff921fb 	.word	0x3ff921fb
 8003668:	e322da11 	.word	0xe322da11
 800366c:	3f90ad3a 	.word	0x3f90ad3a
 8003670:	24760deb 	.word	0x24760deb
 8003674:	3fa97b4b 	.word	0x3fa97b4b
 8003678:	a0d03d51 	.word	0xa0d03d51
 800367c:	3fb10d66 	.word	0x3fb10d66
 8003680:	c54c206e 	.word	0xc54c206e
 8003684:	3fb745cd 	.word	0x3fb745cd
 8003688:	920083ff 	.word	0x920083ff
 800368c:	3fc24924 	.word	0x3fc24924
 8003690:	5555550d 	.word	0x5555550d
 8003694:	3fd55555 	.word	0x3fd55555
 8003698:	2c6a6c2f 	.word	0x2c6a6c2f
 800369c:	bfa2b444 	.word	0xbfa2b444
 80036a0:	52defd9a 	.word	0x52defd9a
 80036a4:	3fadde2d 	.word	0x3fadde2d
 80036a8:	af749a6d 	.word	0xaf749a6d
 80036ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80036b0:	fe231671 	.word	0xfe231671
 80036b4:	3fbc71c6 	.word	0x3fbc71c6
 80036b8:	9998ebc4 	.word	0x9998ebc4
 80036bc:	3fc99999 	.word	0x3fc99999
 80036c0:	8800759c 	.word	0x8800759c
 80036c4:	7e37e43c 	.word	0x7e37e43c
 80036c8:	54442d18 	.word	0x54442d18
 80036cc:	bff921fb 	.word	0xbff921fb
 80036d0:	440fffff 	.word	0x440fffff
 80036d4:	7ff00000 	.word	0x7ff00000
 80036d8:	3fdbffff 	.word	0x3fdbffff
 80036dc:	0800ad20 	.word	0x0800ad20
 80036e0:	0800ad00 	.word	0x0800ad00
 80036e4:	3ff00000 	.word	0x3ff00000
 80036e8:	3ff2ffff 	.word	0x3ff2ffff
 80036ec:	40037fff 	.word	0x40037fff
 80036f0:	3ff80000 	.word	0x3ff80000
 80036f4:	bff00000 	.word	0xbff00000

080036f8 <fabs>:
 80036f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop

08003700 <sqrt>:
 8003700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003704:	b08b      	sub	sp, #44	; 0x2c
 8003706:	4604      	mov	r4, r0
 8003708:	460d      	mov	r5, r1
 800370a:	f000 f855 	bl	80037b8 <__ieee754_sqrt>
 800370e:	4b28      	ldr	r3, [pc, #160]	; (80037b0 <sqrt+0xb0>)
 8003710:	f993 a000 	ldrsb.w	sl, [r3]
 8003714:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003718:	4606      	mov	r6, r0
 800371a:	460f      	mov	r7, r1
 800371c:	d012      	beq.n	8003744 <sqrt+0x44>
 800371e:	4622      	mov	r2, r4
 8003720:	462b      	mov	r3, r5
 8003722:	4620      	mov	r0, r4
 8003724:	4629      	mov	r1, r5
 8003726:	f000 fd5d 	bl	80041e4 <__aeabi_dcmpun>
 800372a:	4683      	mov	fp, r0
 800372c:	b950      	cbnz	r0, 8003744 <sqrt+0x44>
 800372e:	f04f 0800 	mov.w	r8, #0
 8003732:	f04f 0900 	mov.w	r9, #0
 8003736:	4620      	mov	r0, r4
 8003738:	4629      	mov	r1, r5
 800373a:	4642      	mov	r2, r8
 800373c:	464b      	mov	r3, r9
 800373e:	f000 fd29 	bl	8004194 <__aeabi_dcmplt>
 8003742:	b920      	cbnz	r0, 800374e <sqrt+0x4e>
 8003744:	4630      	mov	r0, r6
 8003746:	4639      	mov	r1, r7
 8003748:	b00b      	add	sp, #44	; 0x2c
 800374a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800374e:	4b19      	ldr	r3, [pc, #100]	; (80037b4 <sqrt+0xb4>)
 8003750:	f8cd b020 	str.w	fp, [sp, #32]
 8003754:	2201      	movs	r2, #1
 8003756:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800375a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800375e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003762:	f1ba 0f00 	cmp.w	sl, #0
 8003766:	d015      	beq.n	8003794 <sqrt+0x94>
 8003768:	4642      	mov	r2, r8
 800376a:	464b      	mov	r3, r9
 800376c:	4640      	mov	r0, r8
 800376e:	4649      	mov	r1, r9
 8003770:	f000 fbc8 	bl	8003f04 <__aeabi_ddiv>
 8003774:	f1ba 0f02 	cmp.w	sl, #2
 8003778:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800377c:	d10c      	bne.n	8003798 <sqrt+0x98>
 800377e:	f000 fd8f 	bl	80042a0 <__errno>
 8003782:	2321      	movs	r3, #33	; 0x21
 8003784:	6003      	str	r3, [r0, #0]
 8003786:	9b08      	ldr	r3, [sp, #32]
 8003788:	b963      	cbnz	r3, 80037a4 <sqrt+0xa4>
 800378a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800378e:	b00b      	add	sp, #44	; 0x2c
 8003790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003794:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003798:	4668      	mov	r0, sp
 800379a:	f000 f8cf 	bl	800393c <matherr>
 800379e:	2800      	cmp	r0, #0
 80037a0:	d1f1      	bne.n	8003786 <sqrt+0x86>
 80037a2:	e7ec      	b.n	800377e <sqrt+0x7e>
 80037a4:	f000 fd7c 	bl	80042a0 <__errno>
 80037a8:	9b08      	ldr	r3, [sp, #32]
 80037aa:	6003      	str	r3, [r0, #0]
 80037ac:	e7ed      	b.n	800378a <sqrt+0x8a>
 80037ae:	bf00      	nop
 80037b0:	20000038 	.word	0x20000038
 80037b4:	0800ad40 	.word	0x0800ad40

080037b8 <__ieee754_sqrt>:
 80037b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037bc:	4e5e      	ldr	r6, [pc, #376]	; (8003938 <__ieee754_sqrt+0x180>)
 80037be:	46b6      	mov	lr, r6
 80037c0:	400e      	ands	r6, r1
 80037c2:	4576      	cmp	r6, lr
 80037c4:	4604      	mov	r4, r0
 80037c6:	460d      	mov	r5, r1
 80037c8:	f000 8094 	beq.w	80038f4 <__ieee754_sqrt+0x13c>
 80037cc:	2900      	cmp	r1, #0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4602      	mov	r2, r0
 80037d2:	dd72      	ble.n	80038ba <__ieee754_sqrt+0x102>
 80037d4:	150f      	asrs	r7, r1, #20
 80037d6:	d07d      	beq.n	80038d4 <__ieee754_sqrt+0x11c>
 80037d8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 80037dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e0:	07f8      	lsls	r0, r7, #31
 80037e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037e6:	d463      	bmi.n	80038b0 <__ieee754_sqrt+0xf8>
 80037e8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80037ec:	2600      	movs	r6, #0
 80037ee:	440b      	add	r3, r1
 80037f0:	107f      	asrs	r7, r7, #1
 80037f2:	0052      	lsls	r2, r2, #1
 80037f4:	46b6      	mov	lr, r6
 80037f6:	2016      	movs	r0, #22
 80037f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037fc:	eb0e 0401 	add.w	r4, lr, r1
 8003800:	429c      	cmp	r4, r3
 8003802:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 8003806:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800380a:	dc03      	bgt.n	8003814 <__ieee754_sqrt+0x5c>
 800380c:	1b1b      	subs	r3, r3, r4
 800380e:	eb04 0e01 	add.w	lr, r4, r1
 8003812:	440e      	add	r6, r1
 8003814:	3801      	subs	r0, #1
 8003816:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800381a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800381e:	d1ed      	bne.n	80037fc <__ieee754_sqrt+0x44>
 8003820:	4684      	mov	ip, r0
 8003822:	2420      	movs	r4, #32
 8003824:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003828:	e009      	b.n	800383e <__ieee754_sqrt+0x86>
 800382a:	d020      	beq.n	800386e <__ieee754_sqrt+0xb6>
 800382c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 8003830:	3c01      	subs	r4, #1
 8003832:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003836:	442b      	add	r3, r5
 8003838:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800383c:	d020      	beq.n	8003880 <__ieee754_sqrt+0xc8>
 800383e:	459e      	cmp	lr, r3
 8003840:	eb01 050c 	add.w	r5, r1, ip
 8003844:	daf1      	bge.n	800382a <__ieee754_sqrt+0x72>
 8003846:	2d00      	cmp	r5, #0
 8003848:	eb05 0c01 	add.w	ip, r5, r1
 800384c:	db09      	blt.n	8003862 <__ieee754_sqrt+0xaa>
 800384e:	46f0      	mov	r8, lr
 8003850:	4295      	cmp	r5, r2
 8003852:	ebce 0303 	rsb	r3, lr, r3
 8003856:	d900      	bls.n	800385a <__ieee754_sqrt+0xa2>
 8003858:	3b01      	subs	r3, #1
 800385a:	1b52      	subs	r2, r2, r5
 800385c:	4408      	add	r0, r1
 800385e:	46c6      	mov	lr, r8
 8003860:	e7e4      	b.n	800382c <__ieee754_sqrt+0x74>
 8003862:	f1bc 0f00 	cmp.w	ip, #0
 8003866:	dbf2      	blt.n	800384e <__ieee754_sqrt+0x96>
 8003868:	f10e 0801 	add.w	r8, lr, #1
 800386c:	e7f0      	b.n	8003850 <__ieee754_sqrt+0x98>
 800386e:	4295      	cmp	r5, r2
 8003870:	d81c      	bhi.n	80038ac <__ieee754_sqrt+0xf4>
 8003872:	2d00      	cmp	r5, #0
 8003874:	eb05 0c01 	add.w	ip, r5, r1
 8003878:	db48      	blt.n	800390c <__ieee754_sqrt+0x154>
 800387a:	4698      	mov	r8, r3
 800387c:	2300      	movs	r3, #0
 800387e:	e7ec      	b.n	800385a <__ieee754_sqrt+0xa2>
 8003880:	4313      	orrs	r3, r2
 8003882:	d004      	beq.n	800388e <__ieee754_sqrt+0xd6>
 8003884:	1c41      	adds	r1, r0, #1
 8003886:	d045      	beq.n	8003914 <__ieee754_sqrt+0x15c>
 8003888:	f000 0401 	and.w	r4, r0, #1
 800388c:	4420      	add	r0, r4
 800388e:	0844      	lsrs	r4, r0, #1
 8003890:	1073      	asrs	r3, r6, #1
 8003892:	07f2      	lsls	r2, r6, #31
 8003894:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003898:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800389c:	bf48      	it	mi
 800389e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80038a2:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80038a6:	4620      	mov	r0, r4
 80038a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038ac:	4673      	mov	r3, lr
 80038ae:	e7bd      	b.n	800382c <__ieee754_sqrt+0x74>
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80038b6:	0052      	lsls	r2, r2, #1
 80038b8:	e796      	b.n	80037e8 <__ieee754_sqrt+0x30>
 80038ba:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80038be:	4306      	orrs	r6, r0
 80038c0:	d022      	beq.n	8003908 <__ieee754_sqrt+0x150>
 80038c2:	bb71      	cbnz	r1, 8003922 <__ieee754_sqrt+0x16a>
 80038c4:	460f      	mov	r7, r1
 80038c6:	0ad3      	lsrs	r3, r2, #11
 80038c8:	3f15      	subs	r7, #21
 80038ca:	0552      	lsls	r2, r2, #21
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0fa      	beq.n	80038c6 <__ieee754_sqrt+0x10e>
 80038d0:	02dd      	lsls	r5, r3, #11
 80038d2:	d421      	bmi.n	8003918 <__ieee754_sqrt+0x160>
 80038d4:	2100      	movs	r1, #0
 80038d6:	e000      	b.n	80038da <__ieee754_sqrt+0x122>
 80038d8:	4601      	mov	r1, r0
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	02dc      	lsls	r4, r3, #11
 80038de:	f101 0001 	add.w	r0, r1, #1
 80038e2:	d5f9      	bpl.n	80038d8 <__ieee754_sqrt+0x120>
 80038e4:	f1c0 0420 	rsb	r4, r0, #32
 80038e8:	fa22 f404 	lsr.w	r4, r2, r4
 80038ec:	4323      	orrs	r3, r4
 80038ee:	1a7f      	subs	r7, r7, r1
 80038f0:	4082      	lsls	r2, r0
 80038f2:	e771      	b.n	80037d8 <__ieee754_sqrt+0x20>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	f000 f9da 	bl	8003cb0 <__aeabi_dmul>
 80038fc:	4622      	mov	r2, r4
 80038fe:	462b      	mov	r3, r5
 8003900:	f000 f824 	bl	800394c <__adddf3>
 8003904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800390c:	f1bc 0f00 	cmp.w	ip, #0
 8003910:	daaa      	bge.n	8003868 <__ieee754_sqrt+0xb0>
 8003912:	e7b2      	b.n	800387a <__ieee754_sqrt+0xc2>
 8003914:	3601      	adds	r6, #1
 8003916:	e7bb      	b.n	8003890 <__ieee754_sqrt+0xd8>
 8003918:	2420      	movs	r4, #32
 800391a:	f04f 31ff 	mov.w	r1, #4294967295
 800391e:	2000      	movs	r0, #0
 8003920:	e7e2      	b.n	80038e8 <__ieee754_sqrt+0x130>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	f000 f80f 	bl	8003948 <__aeabi_dsub>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	f000 fae9 	bl	8003f04 <__aeabi_ddiv>
 8003932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003936:	bf00      	nop
 8003938:	7ff00000 	.word	0x7ff00000

0800393c <matherr>:
 800393c:	2000      	movs	r0, #0
 800393e:	4770      	bx	lr

08003940 <__aeabi_drsub>:
 8003940:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003944:	e002      	b.n	800394c <__adddf3>
 8003946:	bf00      	nop

08003948 <__aeabi_dsub>:
 8003948:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800394c <__adddf3>:
 800394c:	b530      	push	{r4, r5, lr}
 800394e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003952:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003956:	ea94 0f05 	teq	r4, r5
 800395a:	bf08      	it	eq
 800395c:	ea90 0f02 	teqeq	r0, r2
 8003960:	bf1f      	itttt	ne
 8003962:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003966:	ea55 0c02 	orrsne.w	ip, r5, r2
 800396a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800396e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003972:	f000 80e2 	beq.w	8003b3a <__adddf3+0x1ee>
 8003976:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800397a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800397e:	bfb8      	it	lt
 8003980:	426d      	neglt	r5, r5
 8003982:	dd0c      	ble.n	800399e <__adddf3+0x52>
 8003984:	442c      	add	r4, r5
 8003986:	ea80 0202 	eor.w	r2, r0, r2
 800398a:	ea81 0303 	eor.w	r3, r1, r3
 800398e:	ea82 0000 	eor.w	r0, r2, r0
 8003992:	ea83 0101 	eor.w	r1, r3, r1
 8003996:	ea80 0202 	eor.w	r2, r0, r2
 800399a:	ea81 0303 	eor.w	r3, r1, r3
 800399e:	2d36      	cmp	r5, #54	; 0x36
 80039a0:	bf88      	it	hi
 80039a2:	bd30      	pophi	{r4, r5, pc}
 80039a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80039a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80039ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80039b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80039b4:	d002      	beq.n	80039bc <__adddf3+0x70>
 80039b6:	4240      	negs	r0, r0
 80039b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80039bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80039c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80039c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80039c8:	d002      	beq.n	80039d0 <__adddf3+0x84>
 80039ca:	4252      	negs	r2, r2
 80039cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80039d0:	ea94 0f05 	teq	r4, r5
 80039d4:	f000 80a7 	beq.w	8003b26 <__adddf3+0x1da>
 80039d8:	f1a4 0401 	sub.w	r4, r4, #1
 80039dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80039e0:	db0d      	blt.n	80039fe <__adddf3+0xb2>
 80039e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80039e6:	fa22 f205 	lsr.w	r2, r2, r5
 80039ea:	1880      	adds	r0, r0, r2
 80039ec:	f141 0100 	adc.w	r1, r1, #0
 80039f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80039f4:	1880      	adds	r0, r0, r2
 80039f6:	fa43 f305 	asr.w	r3, r3, r5
 80039fa:	4159      	adcs	r1, r3
 80039fc:	e00e      	b.n	8003a1c <__adddf3+0xd0>
 80039fe:	f1a5 0520 	sub.w	r5, r5, #32
 8003a02:	f10e 0e20 	add.w	lr, lr, #32
 8003a06:	2a01      	cmp	r2, #1
 8003a08:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003a0c:	bf28      	it	cs
 8003a0e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003a12:	fa43 f305 	asr.w	r3, r3, r5
 8003a16:	18c0      	adds	r0, r0, r3
 8003a18:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003a1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003a20:	d507      	bpl.n	8003a32 <__adddf3+0xe6>
 8003a22:	f04f 0e00 	mov.w	lr, #0
 8003a26:	f1dc 0c00 	rsbs	ip, ip, #0
 8003a2a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003a2e:	eb6e 0101 	sbc.w	r1, lr, r1
 8003a32:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003a36:	d31b      	bcc.n	8003a70 <__adddf3+0x124>
 8003a38:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003a3c:	d30c      	bcc.n	8003a58 <__adddf3+0x10c>
 8003a3e:	0849      	lsrs	r1, r1, #1
 8003a40:	ea5f 0030 	movs.w	r0, r0, rrx
 8003a44:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003a48:	f104 0401 	add.w	r4, r4, #1
 8003a4c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003a50:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003a54:	f080 809a 	bcs.w	8003b8c <__adddf3+0x240>
 8003a58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003a5c:	bf08      	it	eq
 8003a5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003a62:	f150 0000 	adcs.w	r0, r0, #0
 8003a66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003a6a:	ea41 0105 	orr.w	r1, r1, r5
 8003a6e:	bd30      	pop	{r4, r5, pc}
 8003a70:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003a74:	4140      	adcs	r0, r0
 8003a76:	eb41 0101 	adc.w	r1, r1, r1
 8003a7a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003a7e:	f1a4 0401 	sub.w	r4, r4, #1
 8003a82:	d1e9      	bne.n	8003a58 <__adddf3+0x10c>
 8003a84:	f091 0f00 	teq	r1, #0
 8003a88:	bf04      	itt	eq
 8003a8a:	4601      	moveq	r1, r0
 8003a8c:	2000      	moveq	r0, #0
 8003a8e:	fab1 f381 	clz	r3, r1
 8003a92:	bf08      	it	eq
 8003a94:	3320      	addeq	r3, #32
 8003a96:	f1a3 030b 	sub.w	r3, r3, #11
 8003a9a:	f1b3 0220 	subs.w	r2, r3, #32
 8003a9e:	da0c      	bge.n	8003aba <__adddf3+0x16e>
 8003aa0:	320c      	adds	r2, #12
 8003aa2:	dd08      	ble.n	8003ab6 <__adddf3+0x16a>
 8003aa4:	f102 0c14 	add.w	ip, r2, #20
 8003aa8:	f1c2 020c 	rsb	r2, r2, #12
 8003aac:	fa01 f00c 	lsl.w	r0, r1, ip
 8003ab0:	fa21 f102 	lsr.w	r1, r1, r2
 8003ab4:	e00c      	b.n	8003ad0 <__adddf3+0x184>
 8003ab6:	f102 0214 	add.w	r2, r2, #20
 8003aba:	bfd8      	it	le
 8003abc:	f1c2 0c20 	rsble	ip, r2, #32
 8003ac0:	fa01 f102 	lsl.w	r1, r1, r2
 8003ac4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003ac8:	bfdc      	itt	le
 8003aca:	ea41 010c 	orrle.w	r1, r1, ip
 8003ace:	4090      	lslle	r0, r2
 8003ad0:	1ae4      	subs	r4, r4, r3
 8003ad2:	bfa2      	ittt	ge
 8003ad4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003ad8:	4329      	orrge	r1, r5
 8003ada:	bd30      	popge	{r4, r5, pc}
 8003adc:	ea6f 0404 	mvn.w	r4, r4
 8003ae0:	3c1f      	subs	r4, #31
 8003ae2:	da1c      	bge.n	8003b1e <__adddf3+0x1d2>
 8003ae4:	340c      	adds	r4, #12
 8003ae6:	dc0e      	bgt.n	8003b06 <__adddf3+0x1ba>
 8003ae8:	f104 0414 	add.w	r4, r4, #20
 8003aec:	f1c4 0220 	rsb	r2, r4, #32
 8003af0:	fa20 f004 	lsr.w	r0, r0, r4
 8003af4:	fa01 f302 	lsl.w	r3, r1, r2
 8003af8:	ea40 0003 	orr.w	r0, r0, r3
 8003afc:	fa21 f304 	lsr.w	r3, r1, r4
 8003b00:	ea45 0103 	orr.w	r1, r5, r3
 8003b04:	bd30      	pop	{r4, r5, pc}
 8003b06:	f1c4 040c 	rsb	r4, r4, #12
 8003b0a:	f1c4 0220 	rsb	r2, r4, #32
 8003b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8003b12:	fa01 f304 	lsl.w	r3, r1, r4
 8003b16:	ea40 0003 	orr.w	r0, r0, r3
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	bd30      	pop	{r4, r5, pc}
 8003b1e:	fa21 f004 	lsr.w	r0, r1, r4
 8003b22:	4629      	mov	r1, r5
 8003b24:	bd30      	pop	{r4, r5, pc}
 8003b26:	f094 0f00 	teq	r4, #0
 8003b2a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003b2e:	bf06      	itte	eq
 8003b30:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003b34:	3401      	addeq	r4, #1
 8003b36:	3d01      	subne	r5, #1
 8003b38:	e74e      	b.n	80039d8 <__adddf3+0x8c>
 8003b3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003b3e:	bf18      	it	ne
 8003b40:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003b44:	d029      	beq.n	8003b9a <__adddf3+0x24e>
 8003b46:	ea94 0f05 	teq	r4, r5
 8003b4a:	bf08      	it	eq
 8003b4c:	ea90 0f02 	teqeq	r0, r2
 8003b50:	d005      	beq.n	8003b5e <__adddf3+0x212>
 8003b52:	ea54 0c00 	orrs.w	ip, r4, r0
 8003b56:	bf04      	itt	eq
 8003b58:	4619      	moveq	r1, r3
 8003b5a:	4610      	moveq	r0, r2
 8003b5c:	bd30      	pop	{r4, r5, pc}
 8003b5e:	ea91 0f03 	teq	r1, r3
 8003b62:	bf1e      	ittt	ne
 8003b64:	2100      	movne	r1, #0
 8003b66:	2000      	movne	r0, #0
 8003b68:	bd30      	popne	{r4, r5, pc}
 8003b6a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003b6e:	d105      	bne.n	8003b7c <__adddf3+0x230>
 8003b70:	0040      	lsls	r0, r0, #1
 8003b72:	4149      	adcs	r1, r1
 8003b74:	bf28      	it	cs
 8003b76:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003b7a:	bd30      	pop	{r4, r5, pc}
 8003b7c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003b80:	bf3c      	itt	cc
 8003b82:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003b86:	bd30      	popcc	{r4, r5, pc}
 8003b88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003b8c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003b90:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b94:	f04f 0000 	mov.w	r0, #0
 8003b98:	bd30      	pop	{r4, r5, pc}
 8003b9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003b9e:	bf1a      	itte	ne
 8003ba0:	4619      	movne	r1, r3
 8003ba2:	4610      	movne	r0, r2
 8003ba4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003ba8:	bf1c      	itt	ne
 8003baa:	460b      	movne	r3, r1
 8003bac:	4602      	movne	r2, r0
 8003bae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003bb2:	bf06      	itte	eq
 8003bb4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003bb8:	ea91 0f03 	teqeq	r1, r3
 8003bbc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003bc0:	bd30      	pop	{r4, r5, pc}
 8003bc2:	bf00      	nop

08003bc4 <__aeabi_ui2d>:
 8003bc4:	f090 0f00 	teq	r0, #0
 8003bc8:	bf04      	itt	eq
 8003bca:	2100      	moveq	r1, #0
 8003bcc:	4770      	bxeq	lr
 8003bce:	b530      	push	{r4, r5, lr}
 8003bd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003bd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003bd8:	f04f 0500 	mov.w	r5, #0
 8003bdc:	f04f 0100 	mov.w	r1, #0
 8003be0:	e750      	b.n	8003a84 <__adddf3+0x138>
 8003be2:	bf00      	nop

08003be4 <__aeabi_i2d>:
 8003be4:	f090 0f00 	teq	r0, #0
 8003be8:	bf04      	itt	eq
 8003bea:	2100      	moveq	r1, #0
 8003bec:	4770      	bxeq	lr
 8003bee:	b530      	push	{r4, r5, lr}
 8003bf0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003bf4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003bf8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003bfc:	bf48      	it	mi
 8003bfe:	4240      	negmi	r0, r0
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	e73e      	b.n	8003a84 <__adddf3+0x138>
 8003c06:	bf00      	nop

08003c08 <__aeabi_f2d>:
 8003c08:	0042      	lsls	r2, r0, #1
 8003c0a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8003c12:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003c16:	bf1f      	itttt	ne
 8003c18:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003c1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003c20:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003c24:	4770      	bxne	lr
 8003c26:	f092 0f00 	teq	r2, #0
 8003c2a:	bf14      	ite	ne
 8003c2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003c30:	4770      	bxeq	lr
 8003c32:	b530      	push	{r4, r5, lr}
 8003c34:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003c38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003c3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003c40:	e720      	b.n	8003a84 <__adddf3+0x138>
 8003c42:	bf00      	nop

08003c44 <__aeabi_ul2d>:
 8003c44:	ea50 0201 	orrs.w	r2, r0, r1
 8003c48:	bf08      	it	eq
 8003c4a:	4770      	bxeq	lr
 8003c4c:	b530      	push	{r4, r5, lr}
 8003c4e:	f04f 0500 	mov.w	r5, #0
 8003c52:	e00a      	b.n	8003c6a <__aeabi_l2d+0x16>

08003c54 <__aeabi_l2d>:
 8003c54:	ea50 0201 	orrs.w	r2, r0, r1
 8003c58:	bf08      	it	eq
 8003c5a:	4770      	bxeq	lr
 8003c5c:	b530      	push	{r4, r5, lr}
 8003c5e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003c62:	d502      	bpl.n	8003c6a <__aeabi_l2d+0x16>
 8003c64:	4240      	negs	r0, r0
 8003c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003c6a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003c6e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003c72:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003c76:	f43f aedc 	beq.w	8003a32 <__adddf3+0xe6>
 8003c7a:	f04f 0203 	mov.w	r2, #3
 8003c7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003c82:	bf18      	it	ne
 8003c84:	3203      	addne	r2, #3
 8003c86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003c8a:	bf18      	it	ne
 8003c8c:	3203      	addne	r2, #3
 8003c8e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003c92:	f1c2 0320 	rsb	r3, r2, #32
 8003c96:	fa00 fc03 	lsl.w	ip, r0, r3
 8003c9a:	fa20 f002 	lsr.w	r0, r0, r2
 8003c9e:	fa01 fe03 	lsl.w	lr, r1, r3
 8003ca2:	ea40 000e 	orr.w	r0, r0, lr
 8003ca6:	fa21 f102 	lsr.w	r1, r1, r2
 8003caa:	4414      	add	r4, r2
 8003cac:	e6c1      	b.n	8003a32 <__adddf3+0xe6>
 8003cae:	bf00      	nop

08003cb0 <__aeabi_dmul>:
 8003cb0:	b570      	push	{r4, r5, r6, lr}
 8003cb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003cb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003cba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003cbe:	bf1d      	ittte	ne
 8003cc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003cc4:	ea94 0f0c 	teqne	r4, ip
 8003cc8:	ea95 0f0c 	teqne	r5, ip
 8003ccc:	f000 f8de 	bleq	8003e8c <__aeabi_dmul+0x1dc>
 8003cd0:	442c      	add	r4, r5
 8003cd2:	ea81 0603 	eor.w	r6, r1, r3
 8003cd6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003cda:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003cde:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003ce2:	bf18      	it	ne
 8003ce4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003ce8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003cec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cf0:	d038      	beq.n	8003d64 <__aeabi_dmul+0xb4>
 8003cf2:	fba0 ce02 	umull	ip, lr, r0, r2
 8003cf6:	f04f 0500 	mov.w	r5, #0
 8003cfa:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003cfe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003d02:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003d06:	f04f 0600 	mov.w	r6, #0
 8003d0a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003d0e:	f09c 0f00 	teq	ip, #0
 8003d12:	bf18      	it	ne
 8003d14:	f04e 0e01 	orrne.w	lr, lr, #1
 8003d18:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003d1c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003d20:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003d24:	d204      	bcs.n	8003d30 <__aeabi_dmul+0x80>
 8003d26:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003d2a:	416d      	adcs	r5, r5
 8003d2c:	eb46 0606 	adc.w	r6, r6, r6
 8003d30:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003d34:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003d38:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003d3c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003d40:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003d44:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003d48:	bf88      	it	hi
 8003d4a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003d4e:	d81e      	bhi.n	8003d8e <__aeabi_dmul+0xde>
 8003d50:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003d54:	bf08      	it	eq
 8003d56:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003d5a:	f150 0000 	adcs.w	r0, r0, #0
 8003d5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003d62:	bd70      	pop	{r4, r5, r6, pc}
 8003d64:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003d68:	ea46 0101 	orr.w	r1, r6, r1
 8003d6c:	ea40 0002 	orr.w	r0, r0, r2
 8003d70:	ea81 0103 	eor.w	r1, r1, r3
 8003d74:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003d78:	bfc2      	ittt	gt
 8003d7a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003d7e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003d82:	bd70      	popgt	{r4, r5, r6, pc}
 8003d84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003d88:	f04f 0e00 	mov.w	lr, #0
 8003d8c:	3c01      	subs	r4, #1
 8003d8e:	f300 80ab 	bgt.w	8003ee8 <__aeabi_dmul+0x238>
 8003d92:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003d96:	bfde      	ittt	le
 8003d98:	2000      	movle	r0, #0
 8003d9a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003d9e:	bd70      	pople	{r4, r5, r6, pc}
 8003da0:	f1c4 0400 	rsb	r4, r4, #0
 8003da4:	3c20      	subs	r4, #32
 8003da6:	da35      	bge.n	8003e14 <__aeabi_dmul+0x164>
 8003da8:	340c      	adds	r4, #12
 8003daa:	dc1b      	bgt.n	8003de4 <__aeabi_dmul+0x134>
 8003dac:	f104 0414 	add.w	r4, r4, #20
 8003db0:	f1c4 0520 	rsb	r5, r4, #32
 8003db4:	fa00 f305 	lsl.w	r3, r0, r5
 8003db8:	fa20 f004 	lsr.w	r0, r0, r4
 8003dbc:	fa01 f205 	lsl.w	r2, r1, r5
 8003dc0:	ea40 0002 	orr.w	r0, r0, r2
 8003dc4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8003dc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003dcc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003dd0:	fa21 f604 	lsr.w	r6, r1, r4
 8003dd4:	eb42 0106 	adc.w	r1, r2, r6
 8003dd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003ddc:	bf08      	it	eq
 8003dde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	f1c4 040c 	rsb	r4, r4, #12
 8003de8:	f1c4 0520 	rsb	r5, r4, #32
 8003dec:	fa00 f304 	lsl.w	r3, r0, r4
 8003df0:	fa20 f005 	lsr.w	r0, r0, r5
 8003df4:	fa01 f204 	lsl.w	r2, r1, r4
 8003df8:	ea40 0002 	orr.w	r0, r0, r2
 8003dfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003e00:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003e04:	f141 0100 	adc.w	r1, r1, #0
 8003e08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003e0c:	bf08      	it	eq
 8003e0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003e12:	bd70      	pop	{r4, r5, r6, pc}
 8003e14:	f1c4 0520 	rsb	r5, r4, #32
 8003e18:	fa00 f205 	lsl.w	r2, r0, r5
 8003e1c:	ea4e 0e02 	orr.w	lr, lr, r2
 8003e20:	fa20 f304 	lsr.w	r3, r0, r4
 8003e24:	fa01 f205 	lsl.w	r2, r1, r5
 8003e28:	ea43 0302 	orr.w	r3, r3, r2
 8003e2c:	fa21 f004 	lsr.w	r0, r1, r4
 8003e30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003e34:	fa21 f204 	lsr.w	r2, r1, r4
 8003e38:	ea20 0002 	bic.w	r0, r0, r2
 8003e3c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003e40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003e44:	bf08      	it	eq
 8003e46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003e4a:	bd70      	pop	{r4, r5, r6, pc}
 8003e4c:	f094 0f00 	teq	r4, #0
 8003e50:	d10f      	bne.n	8003e72 <__aeabi_dmul+0x1c2>
 8003e52:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003e56:	0040      	lsls	r0, r0, #1
 8003e58:	eb41 0101 	adc.w	r1, r1, r1
 8003e5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003e60:	bf08      	it	eq
 8003e62:	3c01      	subeq	r4, #1
 8003e64:	d0f7      	beq.n	8003e56 <__aeabi_dmul+0x1a6>
 8003e66:	ea41 0106 	orr.w	r1, r1, r6
 8003e6a:	f095 0f00 	teq	r5, #0
 8003e6e:	bf18      	it	ne
 8003e70:	4770      	bxne	lr
 8003e72:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003e76:	0052      	lsls	r2, r2, #1
 8003e78:	eb43 0303 	adc.w	r3, r3, r3
 8003e7c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003e80:	bf08      	it	eq
 8003e82:	3d01      	subeq	r5, #1
 8003e84:	d0f7      	beq.n	8003e76 <__aeabi_dmul+0x1c6>
 8003e86:	ea43 0306 	orr.w	r3, r3, r6
 8003e8a:	4770      	bx	lr
 8003e8c:	ea94 0f0c 	teq	r4, ip
 8003e90:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003e94:	bf18      	it	ne
 8003e96:	ea95 0f0c 	teqne	r5, ip
 8003e9a:	d00c      	beq.n	8003eb6 <__aeabi_dmul+0x206>
 8003e9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003ea0:	bf18      	it	ne
 8003ea2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003ea6:	d1d1      	bne.n	8003e4c <__aeabi_dmul+0x19c>
 8003ea8:	ea81 0103 	eor.w	r1, r1, r3
 8003eac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003eb0:	f04f 0000 	mov.w	r0, #0
 8003eb4:	bd70      	pop	{r4, r5, r6, pc}
 8003eb6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003eba:	bf06      	itte	eq
 8003ebc:	4610      	moveq	r0, r2
 8003ebe:	4619      	moveq	r1, r3
 8003ec0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003ec4:	d019      	beq.n	8003efa <__aeabi_dmul+0x24a>
 8003ec6:	ea94 0f0c 	teq	r4, ip
 8003eca:	d102      	bne.n	8003ed2 <__aeabi_dmul+0x222>
 8003ecc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003ed0:	d113      	bne.n	8003efa <__aeabi_dmul+0x24a>
 8003ed2:	ea95 0f0c 	teq	r5, ip
 8003ed6:	d105      	bne.n	8003ee4 <__aeabi_dmul+0x234>
 8003ed8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8003edc:	bf1c      	itt	ne
 8003ede:	4610      	movne	r0, r2
 8003ee0:	4619      	movne	r1, r3
 8003ee2:	d10a      	bne.n	8003efa <__aeabi_dmul+0x24a>
 8003ee4:	ea81 0103 	eor.w	r1, r1, r3
 8003ee8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003eec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003ef0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003ef4:	f04f 0000 	mov.w	r0, #0
 8003ef8:	bd70      	pop	{r4, r5, r6, pc}
 8003efa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003efe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003f02:	bd70      	pop	{r4, r5, r6, pc}

08003f04 <__aeabi_ddiv>:
 8003f04:	b570      	push	{r4, r5, r6, lr}
 8003f06:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003f0a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003f0e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003f12:	bf1d      	ittte	ne
 8003f14:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003f18:	ea94 0f0c 	teqne	r4, ip
 8003f1c:	ea95 0f0c 	teqne	r5, ip
 8003f20:	f000 f8a7 	bleq	8004072 <__aeabi_ddiv+0x16e>
 8003f24:	eba4 0405 	sub.w	r4, r4, r5
 8003f28:	ea81 0e03 	eor.w	lr, r1, r3
 8003f2c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003f30:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003f34:	f000 8088 	beq.w	8004048 <__aeabi_ddiv+0x144>
 8003f38:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003f3c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003f40:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003f44:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003f48:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003f4c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003f50:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003f54:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003f58:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003f5c:	429d      	cmp	r5, r3
 8003f5e:	bf08      	it	eq
 8003f60:	4296      	cmpeq	r6, r2
 8003f62:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8003f66:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003f6a:	d202      	bcs.n	8003f72 <__aeabi_ddiv+0x6e>
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	ea4f 0232 	mov.w	r2, r2, rrx
 8003f72:	1ab6      	subs	r6, r6, r2
 8003f74:	eb65 0503 	sbc.w	r5, r5, r3
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8003f7e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003f82:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8003f86:	ebb6 0e02 	subs.w	lr, r6, r2
 8003f8a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003f8e:	bf22      	ittt	cs
 8003f90:	1ab6      	subcs	r6, r6, r2
 8003f92:	4675      	movcs	r5, lr
 8003f94:	ea40 000c 	orrcs.w	r0, r0, ip
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	ea4f 0232 	mov.w	r2, r2, rrx
 8003f9e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003fa2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003fa6:	bf22      	ittt	cs
 8003fa8:	1ab6      	subcs	r6, r6, r2
 8003faa:	4675      	movcs	r5, lr
 8003fac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	ea4f 0232 	mov.w	r2, r2, rrx
 8003fb6:	ebb6 0e02 	subs.w	lr, r6, r2
 8003fba:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003fbe:	bf22      	ittt	cs
 8003fc0:	1ab6      	subcs	r6, r6, r2
 8003fc2:	4675      	movcs	r5, lr
 8003fc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	ea4f 0232 	mov.w	r2, r2, rrx
 8003fce:	ebb6 0e02 	subs.w	lr, r6, r2
 8003fd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003fd6:	bf22      	ittt	cs
 8003fd8:	1ab6      	subcs	r6, r6, r2
 8003fda:	4675      	movcs	r5, lr
 8003fdc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003fe0:	ea55 0e06 	orrs.w	lr, r5, r6
 8003fe4:	d018      	beq.n	8004018 <__aeabi_ddiv+0x114>
 8003fe6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8003fea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003fee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003ff2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003ff6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8003ffa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003ffe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8004002:	d1c0      	bne.n	8003f86 <__aeabi_ddiv+0x82>
 8004004:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004008:	d10b      	bne.n	8004022 <__aeabi_ddiv+0x11e>
 800400a:	ea41 0100 	orr.w	r1, r1, r0
 800400e:	f04f 0000 	mov.w	r0, #0
 8004012:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004016:	e7b6      	b.n	8003f86 <__aeabi_ddiv+0x82>
 8004018:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800401c:	bf04      	itt	eq
 800401e:	4301      	orreq	r1, r0
 8004020:	2000      	moveq	r0, #0
 8004022:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004026:	bf88      	it	hi
 8004028:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800402c:	f63f aeaf 	bhi.w	8003d8e <__aeabi_dmul+0xde>
 8004030:	ebb5 0c03 	subs.w	ip, r5, r3
 8004034:	bf04      	itt	eq
 8004036:	ebb6 0c02 	subseq.w	ip, r6, r2
 800403a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800403e:	f150 0000 	adcs.w	r0, r0, #0
 8004042:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800404c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004050:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004054:	bfc2      	ittt	gt
 8004056:	ebd4 050c 	rsbsgt	r5, r4, ip
 800405a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800405e:	bd70      	popgt	{r4, r5, r6, pc}
 8004060:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004064:	f04f 0e00 	mov.w	lr, #0
 8004068:	3c01      	subs	r4, #1
 800406a:	e690      	b.n	8003d8e <__aeabi_dmul+0xde>
 800406c:	ea45 0e06 	orr.w	lr, r5, r6
 8004070:	e68d      	b.n	8003d8e <__aeabi_dmul+0xde>
 8004072:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004076:	ea94 0f0c 	teq	r4, ip
 800407a:	bf08      	it	eq
 800407c:	ea95 0f0c 	teqeq	r5, ip
 8004080:	f43f af3b 	beq.w	8003efa <__aeabi_dmul+0x24a>
 8004084:	ea94 0f0c 	teq	r4, ip
 8004088:	d10a      	bne.n	80040a0 <__aeabi_ddiv+0x19c>
 800408a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800408e:	f47f af34 	bne.w	8003efa <__aeabi_dmul+0x24a>
 8004092:	ea95 0f0c 	teq	r5, ip
 8004096:	f47f af25 	bne.w	8003ee4 <__aeabi_dmul+0x234>
 800409a:	4610      	mov	r0, r2
 800409c:	4619      	mov	r1, r3
 800409e:	e72c      	b.n	8003efa <__aeabi_dmul+0x24a>
 80040a0:	ea95 0f0c 	teq	r5, ip
 80040a4:	d106      	bne.n	80040b4 <__aeabi_ddiv+0x1b0>
 80040a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80040aa:	f43f aefd 	beq.w	8003ea8 <__aeabi_dmul+0x1f8>
 80040ae:	4610      	mov	r0, r2
 80040b0:	4619      	mov	r1, r3
 80040b2:	e722      	b.n	8003efa <__aeabi_dmul+0x24a>
 80040b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80040b8:	bf18      	it	ne
 80040ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80040be:	f47f aec5 	bne.w	8003e4c <__aeabi_dmul+0x19c>
 80040c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80040c6:	f47f af0d 	bne.w	8003ee4 <__aeabi_dmul+0x234>
 80040ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80040ce:	f47f aeeb 	bne.w	8003ea8 <__aeabi_dmul+0x1f8>
 80040d2:	e712      	b.n	8003efa <__aeabi_dmul+0x24a>

080040d4 <__gedf2>:
 80040d4:	f04f 3cff 	mov.w	ip, #4294967295
 80040d8:	e006      	b.n	80040e8 <__cmpdf2+0x4>
 80040da:	bf00      	nop

080040dc <__ledf2>:
 80040dc:	f04f 0c01 	mov.w	ip, #1
 80040e0:	e002      	b.n	80040e8 <__cmpdf2+0x4>
 80040e2:	bf00      	nop

080040e4 <__cmpdf2>:
 80040e4:	f04f 0c01 	mov.w	ip, #1
 80040e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80040ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80040f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80040f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80040f8:	bf18      	it	ne
 80040fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80040fe:	d01b      	beq.n	8004138 <__cmpdf2+0x54>
 8004100:	b001      	add	sp, #4
 8004102:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004106:	bf0c      	ite	eq
 8004108:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800410c:	ea91 0f03 	teqne	r1, r3
 8004110:	bf02      	ittt	eq
 8004112:	ea90 0f02 	teqeq	r0, r2
 8004116:	2000      	moveq	r0, #0
 8004118:	4770      	bxeq	lr
 800411a:	f110 0f00 	cmn.w	r0, #0
 800411e:	ea91 0f03 	teq	r1, r3
 8004122:	bf58      	it	pl
 8004124:	4299      	cmppl	r1, r3
 8004126:	bf08      	it	eq
 8004128:	4290      	cmpeq	r0, r2
 800412a:	bf2c      	ite	cs
 800412c:	17d8      	asrcs	r0, r3, #31
 800412e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004132:	f040 0001 	orr.w	r0, r0, #1
 8004136:	4770      	bx	lr
 8004138:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800413c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004140:	d102      	bne.n	8004148 <__cmpdf2+0x64>
 8004142:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004146:	d107      	bne.n	8004158 <__cmpdf2+0x74>
 8004148:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800414c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004150:	d1d6      	bne.n	8004100 <__cmpdf2+0x1c>
 8004152:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004156:	d0d3      	beq.n	8004100 <__cmpdf2+0x1c>
 8004158:	f85d 0b04 	ldr.w	r0, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop

08004160 <__aeabi_cdrcmple>:
 8004160:	4684      	mov	ip, r0
 8004162:	4610      	mov	r0, r2
 8004164:	4662      	mov	r2, ip
 8004166:	468c      	mov	ip, r1
 8004168:	4619      	mov	r1, r3
 800416a:	4663      	mov	r3, ip
 800416c:	e000      	b.n	8004170 <__aeabi_cdcmpeq>
 800416e:	bf00      	nop

08004170 <__aeabi_cdcmpeq>:
 8004170:	b501      	push	{r0, lr}
 8004172:	f7ff ffb7 	bl	80040e4 <__cmpdf2>
 8004176:	2800      	cmp	r0, #0
 8004178:	bf48      	it	mi
 800417a:	f110 0f00 	cmnmi.w	r0, #0
 800417e:	bd01      	pop	{r0, pc}

08004180 <__aeabi_dcmpeq>:
 8004180:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004184:	f7ff fff4 	bl	8004170 <__aeabi_cdcmpeq>
 8004188:	bf0c      	ite	eq
 800418a:	2001      	moveq	r0, #1
 800418c:	2000      	movne	r0, #0
 800418e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004192:	bf00      	nop

08004194 <__aeabi_dcmplt>:
 8004194:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004198:	f7ff ffea 	bl	8004170 <__aeabi_cdcmpeq>
 800419c:	bf34      	ite	cc
 800419e:	2001      	movcc	r0, #1
 80041a0:	2000      	movcs	r0, #0
 80041a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80041a6:	bf00      	nop

080041a8 <__aeabi_dcmple>:
 80041a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80041ac:	f7ff ffe0 	bl	8004170 <__aeabi_cdcmpeq>
 80041b0:	bf94      	ite	ls
 80041b2:	2001      	movls	r0, #1
 80041b4:	2000      	movhi	r0, #0
 80041b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80041ba:	bf00      	nop

080041bc <__aeabi_dcmpge>:
 80041bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80041c0:	f7ff ffce 	bl	8004160 <__aeabi_cdrcmple>
 80041c4:	bf94      	ite	ls
 80041c6:	2001      	movls	r0, #1
 80041c8:	2000      	movhi	r0, #0
 80041ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80041ce:	bf00      	nop

080041d0 <__aeabi_dcmpgt>:
 80041d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80041d4:	f7ff ffc4 	bl	8004160 <__aeabi_cdrcmple>
 80041d8:	bf34      	ite	cc
 80041da:	2001      	movcc	r0, #1
 80041dc:	2000      	movcs	r0, #0
 80041de:	f85d fb08 	ldr.w	pc, [sp], #8
 80041e2:	bf00      	nop

080041e4 <__aeabi_dcmpun>:
 80041e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80041e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80041ec:	d102      	bne.n	80041f4 <__aeabi_dcmpun+0x10>
 80041ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80041f2:	d10a      	bne.n	800420a <__aeabi_dcmpun+0x26>
 80041f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80041f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80041fc:	d102      	bne.n	8004204 <__aeabi_dcmpun+0x20>
 80041fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004202:	d102      	bne.n	800420a <__aeabi_dcmpun+0x26>
 8004204:	f04f 0000 	mov.w	r0, #0
 8004208:	4770      	bx	lr
 800420a:	f04f 0001 	mov.w	r0, #1
 800420e:	4770      	bx	lr

08004210 <__aeabi_d2iz>:
 8004210:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004214:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004218:	d215      	bcs.n	8004246 <__aeabi_d2iz+0x36>
 800421a:	d511      	bpl.n	8004240 <__aeabi_d2iz+0x30>
 800421c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004220:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004224:	d912      	bls.n	800424c <__aeabi_d2iz+0x3c>
 8004226:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800422a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800422e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004232:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004236:	fa23 f002 	lsr.w	r0, r3, r2
 800423a:	bf18      	it	ne
 800423c:	4240      	negne	r0, r0
 800423e:	4770      	bx	lr
 8004240:	f04f 0000 	mov.w	r0, #0
 8004244:	4770      	bx	lr
 8004246:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800424a:	d105      	bne.n	8004258 <__aeabi_d2iz+0x48>
 800424c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004250:	bf08      	it	eq
 8004252:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004256:	4770      	bx	lr
 8004258:	f04f 0000 	mov.w	r0, #0
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop

08004260 <__aeabi_d2uiz>:
 8004260:	004a      	lsls	r2, r1, #1
 8004262:	d211      	bcs.n	8004288 <__aeabi_d2uiz+0x28>
 8004264:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004268:	d211      	bcs.n	800428e <__aeabi_d2uiz+0x2e>
 800426a:	d50d      	bpl.n	8004288 <__aeabi_d2uiz+0x28>
 800426c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004270:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004274:	d40e      	bmi.n	8004294 <__aeabi_d2uiz+0x34>
 8004276:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800427a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800427e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004282:	fa23 f002 	lsr.w	r0, r3, r2
 8004286:	4770      	bx	lr
 8004288:	f04f 0000 	mov.w	r0, #0
 800428c:	4770      	bx	lr
 800428e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004292:	d102      	bne.n	800429a <__aeabi_d2uiz+0x3a>
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	4770      	bx	lr
 800429a:	f04f 0000 	mov.w	r0, #0
 800429e:	4770      	bx	lr

080042a0 <__errno>:
 80042a0:	4b01      	ldr	r3, [pc, #4]	; (80042a8 <__errno+0x8>)
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000468 	.word	0x20000468

080042ac <__libc_init_array>:
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	4e0f      	ldr	r6, [pc, #60]	; (80042ec <__libc_init_array+0x40>)
 80042b0:	4d0f      	ldr	r5, [pc, #60]	; (80042f0 <__libc_init_array+0x44>)
 80042b2:	1b76      	subs	r6, r6, r5
 80042b4:	10b6      	asrs	r6, r6, #2
 80042b6:	bf18      	it	ne
 80042b8:	2400      	movne	r4, #0
 80042ba:	d005      	beq.n	80042c8 <__libc_init_array+0x1c>
 80042bc:	3401      	adds	r4, #1
 80042be:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c2:	4798      	blx	r3
 80042c4:	42a6      	cmp	r6, r4
 80042c6:	d1f9      	bne.n	80042bc <__libc_init_array+0x10>
 80042c8:	4e0a      	ldr	r6, [pc, #40]	; (80042f4 <__libc_init_array+0x48>)
 80042ca:	4d0b      	ldr	r5, [pc, #44]	; (80042f8 <__libc_init_array+0x4c>)
 80042cc:	1b76      	subs	r6, r6, r5
 80042ce:	f7fe fa01 	bl	80026d4 <_init>
 80042d2:	10b6      	asrs	r6, r6, #2
 80042d4:	bf18      	it	ne
 80042d6:	2400      	movne	r4, #0
 80042d8:	d006      	beq.n	80042e8 <__libc_init_array+0x3c>
 80042da:	3401      	adds	r4, #1
 80042dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e0:	4798      	blx	r3
 80042e2:	42a6      	cmp	r6, r4
 80042e4:	d1f9      	bne.n	80042da <__libc_init_array+0x2e>
 80042e6:	bd70      	pop	{r4, r5, r6, pc}
 80042e8:	bd70      	pop	{r4, r5, r6, pc}
 80042ea:	bf00      	nop
 80042ec:	200009e8 	.word	0x200009e8
 80042f0:	200009e8 	.word	0x200009e8
 80042f4:	200009e8 	.word	0x200009e8
 80042f8:	200009e8 	.word	0x200009e8

080042fc <memcpy>:
 80042fc:	4684      	mov	ip, r0
 80042fe:	ea41 0300 	orr.w	r3, r1, r0
 8004302:	f013 0303 	ands.w	r3, r3, #3
 8004306:	d16d      	bne.n	80043e4 <memcpy+0xe8>
 8004308:	3a40      	subs	r2, #64	; 0x40
 800430a:	d341      	bcc.n	8004390 <memcpy+0x94>
 800430c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004310:	f840 3b04 	str.w	r3, [r0], #4
 8004314:	f851 3b04 	ldr.w	r3, [r1], #4
 8004318:	f840 3b04 	str.w	r3, [r0], #4
 800431c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004320:	f840 3b04 	str.w	r3, [r0], #4
 8004324:	f851 3b04 	ldr.w	r3, [r1], #4
 8004328:	f840 3b04 	str.w	r3, [r0], #4
 800432c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004330:	f840 3b04 	str.w	r3, [r0], #4
 8004334:	f851 3b04 	ldr.w	r3, [r1], #4
 8004338:	f840 3b04 	str.w	r3, [r0], #4
 800433c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004340:	f840 3b04 	str.w	r3, [r0], #4
 8004344:	f851 3b04 	ldr.w	r3, [r1], #4
 8004348:	f840 3b04 	str.w	r3, [r0], #4
 800434c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004350:	f840 3b04 	str.w	r3, [r0], #4
 8004354:	f851 3b04 	ldr.w	r3, [r1], #4
 8004358:	f840 3b04 	str.w	r3, [r0], #4
 800435c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004360:	f840 3b04 	str.w	r3, [r0], #4
 8004364:	f851 3b04 	ldr.w	r3, [r1], #4
 8004368:	f840 3b04 	str.w	r3, [r0], #4
 800436c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004370:	f840 3b04 	str.w	r3, [r0], #4
 8004374:	f851 3b04 	ldr.w	r3, [r1], #4
 8004378:	f840 3b04 	str.w	r3, [r0], #4
 800437c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004380:	f840 3b04 	str.w	r3, [r0], #4
 8004384:	f851 3b04 	ldr.w	r3, [r1], #4
 8004388:	f840 3b04 	str.w	r3, [r0], #4
 800438c:	3a40      	subs	r2, #64	; 0x40
 800438e:	d2bd      	bcs.n	800430c <memcpy+0x10>
 8004390:	3230      	adds	r2, #48	; 0x30
 8004392:	d311      	bcc.n	80043b8 <memcpy+0xbc>
 8004394:	f851 3b04 	ldr.w	r3, [r1], #4
 8004398:	f840 3b04 	str.w	r3, [r0], #4
 800439c:	f851 3b04 	ldr.w	r3, [r1], #4
 80043a0:	f840 3b04 	str.w	r3, [r0], #4
 80043a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80043a8:	f840 3b04 	str.w	r3, [r0], #4
 80043ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80043b0:	f840 3b04 	str.w	r3, [r0], #4
 80043b4:	3a10      	subs	r2, #16
 80043b6:	d2ed      	bcs.n	8004394 <memcpy+0x98>
 80043b8:	320c      	adds	r2, #12
 80043ba:	d305      	bcc.n	80043c8 <memcpy+0xcc>
 80043bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80043c0:	f840 3b04 	str.w	r3, [r0], #4
 80043c4:	3a04      	subs	r2, #4
 80043c6:	d2f9      	bcs.n	80043bc <memcpy+0xc0>
 80043c8:	3204      	adds	r2, #4
 80043ca:	d008      	beq.n	80043de <memcpy+0xe2>
 80043cc:	07d2      	lsls	r2, r2, #31
 80043ce:	bf1c      	itt	ne
 80043d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80043d4:	f800 3b01 	strbne.w	r3, [r0], #1
 80043d8:	d301      	bcc.n	80043de <memcpy+0xe2>
 80043da:	880b      	ldrh	r3, [r1, #0]
 80043dc:	8003      	strh	r3, [r0, #0]
 80043de:	4660      	mov	r0, ip
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	2a08      	cmp	r2, #8
 80043e6:	d313      	bcc.n	8004410 <memcpy+0x114>
 80043e8:	078b      	lsls	r3, r1, #30
 80043ea:	d08d      	beq.n	8004308 <memcpy+0xc>
 80043ec:	f010 0303 	ands.w	r3, r0, #3
 80043f0:	d08a      	beq.n	8004308 <memcpy+0xc>
 80043f2:	f1c3 0304 	rsb	r3, r3, #4
 80043f6:	1ad2      	subs	r2, r2, r3
 80043f8:	07db      	lsls	r3, r3, #31
 80043fa:	bf1c      	itt	ne
 80043fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004400:	f800 3b01 	strbne.w	r3, [r0], #1
 8004404:	d380      	bcc.n	8004308 <memcpy+0xc>
 8004406:	f831 3b02 	ldrh.w	r3, [r1], #2
 800440a:	f820 3b02 	strh.w	r3, [r0], #2
 800440e:	e77b      	b.n	8004308 <memcpy+0xc>
 8004410:	3a04      	subs	r2, #4
 8004412:	d3d9      	bcc.n	80043c8 <memcpy+0xcc>
 8004414:	3a01      	subs	r2, #1
 8004416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800441a:	f800 3b01 	strb.w	r3, [r0], #1
 800441e:	d2f9      	bcs.n	8004414 <memcpy+0x118>
 8004420:	780b      	ldrb	r3, [r1, #0]
 8004422:	7003      	strb	r3, [r0, #0]
 8004424:	784b      	ldrb	r3, [r1, #1]
 8004426:	7043      	strb	r3, [r0, #1]
 8004428:	788b      	ldrb	r3, [r1, #2]
 800442a:	7083      	strb	r3, [r0, #2]
 800442c:	4660      	mov	r0, ip
 800442e:	4770      	bx	lr

08004430 <memset>:
 8004430:	b470      	push	{r4, r5, r6}
 8004432:	0784      	lsls	r4, r0, #30
 8004434:	d046      	beq.n	80044c4 <memset+0x94>
 8004436:	1e54      	subs	r4, r2, #1
 8004438:	2a00      	cmp	r2, #0
 800443a:	d041      	beq.n	80044c0 <memset+0x90>
 800443c:	b2cd      	uxtb	r5, r1
 800443e:	4603      	mov	r3, r0
 8004440:	e002      	b.n	8004448 <memset+0x18>
 8004442:	1e62      	subs	r2, r4, #1
 8004444:	b3e4      	cbz	r4, 80044c0 <memset+0x90>
 8004446:	4614      	mov	r4, r2
 8004448:	f803 5b01 	strb.w	r5, [r3], #1
 800444c:	079a      	lsls	r2, r3, #30
 800444e:	d1f8      	bne.n	8004442 <memset+0x12>
 8004450:	2c03      	cmp	r4, #3
 8004452:	d92e      	bls.n	80044b2 <memset+0x82>
 8004454:	b2cd      	uxtb	r5, r1
 8004456:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800445a:	2c0f      	cmp	r4, #15
 800445c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004460:	d919      	bls.n	8004496 <memset+0x66>
 8004462:	f103 0210 	add.w	r2, r3, #16
 8004466:	4626      	mov	r6, r4
 8004468:	3e10      	subs	r6, #16
 800446a:	2e0f      	cmp	r6, #15
 800446c:	f842 5c10 	str.w	r5, [r2, #-16]
 8004470:	f842 5c0c 	str.w	r5, [r2, #-12]
 8004474:	f842 5c08 	str.w	r5, [r2, #-8]
 8004478:	f842 5c04 	str.w	r5, [r2, #-4]
 800447c:	f102 0210 	add.w	r2, r2, #16
 8004480:	d8f2      	bhi.n	8004468 <memset+0x38>
 8004482:	f1a4 0210 	sub.w	r2, r4, #16
 8004486:	f022 020f 	bic.w	r2, r2, #15
 800448a:	f004 040f 	and.w	r4, r4, #15
 800448e:	3210      	adds	r2, #16
 8004490:	2c03      	cmp	r4, #3
 8004492:	4413      	add	r3, r2
 8004494:	d90d      	bls.n	80044b2 <memset+0x82>
 8004496:	461e      	mov	r6, r3
 8004498:	4622      	mov	r2, r4
 800449a:	3a04      	subs	r2, #4
 800449c:	2a03      	cmp	r2, #3
 800449e:	f846 5b04 	str.w	r5, [r6], #4
 80044a2:	d8fa      	bhi.n	800449a <memset+0x6a>
 80044a4:	1f22      	subs	r2, r4, #4
 80044a6:	f022 0203 	bic.w	r2, r2, #3
 80044aa:	3204      	adds	r2, #4
 80044ac:	4413      	add	r3, r2
 80044ae:	f004 0403 	and.w	r4, r4, #3
 80044b2:	b12c      	cbz	r4, 80044c0 <memset+0x90>
 80044b4:	b2c9      	uxtb	r1, r1
 80044b6:	441c      	add	r4, r3
 80044b8:	f803 1b01 	strb.w	r1, [r3], #1
 80044bc:	42a3      	cmp	r3, r4
 80044be:	d1fb      	bne.n	80044b8 <memset+0x88>
 80044c0:	bc70      	pop	{r4, r5, r6}
 80044c2:	4770      	bx	lr
 80044c4:	4614      	mov	r4, r2
 80044c6:	4603      	mov	r3, r0
 80044c8:	e7c2      	b.n	8004450 <memset+0x20>
 80044ca:	bf00      	nop

080044cc <printf>:
 80044cc:	b40f      	push	{r0, r1, r2, r3}
 80044ce:	b500      	push	{lr}
 80044d0:	4907      	ldr	r1, [pc, #28]	; (80044f0 <printf+0x24>)
 80044d2:	b083      	sub	sp, #12
 80044d4:	ab04      	add	r3, sp, #16
 80044d6:	6808      	ldr	r0, [r1, #0]
 80044d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80044dc:	6881      	ldr	r1, [r0, #8]
 80044de:	9301      	str	r3, [sp, #4]
 80044e0:	f001 fcea 	bl	8005eb8 <_vfprintf_r>
 80044e4:	b003      	add	sp, #12
 80044e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80044ea:	b004      	add	sp, #16
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	20000468 	.word	0x20000468

080044f4 <_puts_r>:
 80044f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f6:	4605      	mov	r5, r0
 80044f8:	b089      	sub	sp, #36	; 0x24
 80044fa:	4608      	mov	r0, r1
 80044fc:	460c      	mov	r4, r1
 80044fe:	f000 f89f 	bl	8004640 <strlen>
 8004502:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004504:	4f14      	ldr	r7, [pc, #80]	; (8004558 <_puts_r+0x64>)
 8004506:	9404      	str	r4, [sp, #16]
 8004508:	2601      	movs	r6, #1
 800450a:	1c44      	adds	r4, r0, #1
 800450c:	a904      	add	r1, sp, #16
 800450e:	2202      	movs	r2, #2
 8004510:	9403      	str	r4, [sp, #12]
 8004512:	9005      	str	r0, [sp, #20]
 8004514:	68ac      	ldr	r4, [r5, #8]
 8004516:	9706      	str	r7, [sp, #24]
 8004518:	9607      	str	r6, [sp, #28]
 800451a:	9101      	str	r1, [sp, #4]
 800451c:	9202      	str	r2, [sp, #8]
 800451e:	b1b3      	cbz	r3, 800454e <_puts_r+0x5a>
 8004520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004524:	049a      	lsls	r2, r3, #18
 8004526:	d406      	bmi.n	8004536 <_puts_r+0x42>
 8004528:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800452a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800452e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004532:	81a3      	strh	r3, [r4, #12]
 8004534:	6662      	str	r2, [r4, #100]	; 0x64
 8004536:	4621      	mov	r1, r4
 8004538:	4628      	mov	r0, r5
 800453a:	aa01      	add	r2, sp, #4
 800453c:	f004 fb3a 	bl	8008bb4 <__sfvwrite_r>
 8004540:	2800      	cmp	r0, #0
 8004542:	bf14      	ite	ne
 8004544:	f04f 30ff 	movne.w	r0, #4294967295
 8004548:	200a      	moveq	r0, #10
 800454a:	b009      	add	sp, #36	; 0x24
 800454c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800454e:	4628      	mov	r0, r5
 8004550:	f004 f9f0 	bl	8008934 <__sinit>
 8004554:	e7e4      	b.n	8004520 <_puts_r+0x2c>
 8004556:	bf00      	nop
 8004558:	0800ad48 	.word	0x0800ad48

0800455c <puts>:
 800455c:	4b02      	ldr	r3, [pc, #8]	; (8004568 <puts+0xc>)
 800455e:	4601      	mov	r1, r0
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	f7ff bfc7 	b.w	80044f4 <_puts_r>
 8004566:	bf00      	nop
 8004568:	20000468 	.word	0x20000468

0800456c <snprintf>:
 800456c:	b40c      	push	{r2, r3}
 800456e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004570:	4b24      	ldr	r3, [pc, #144]	; (8004604 <snprintf+0x98>)
 8004572:	2900      	cmp	r1, #0
 8004574:	b09d      	sub	sp, #116	; 0x74
 8004576:	681d      	ldr	r5, [r3, #0]
 8004578:	db3e      	blt.n	80045f8 <snprintf+0x8c>
 800457a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800457e:	460c      	mov	r4, r1
 8004580:	9002      	str	r0, [sp, #8]
 8004582:	9006      	str	r0, [sp, #24]
 8004584:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004588:	ae23      	add	r6, sp, #140	; 0x8c
 800458a:	d017      	beq.n	80045bc <snprintf+0x50>
 800458c:	1e4c      	subs	r4, r1, #1
 800458e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004590:	9404      	str	r4, [sp, #16]
 8004592:	4633      	mov	r3, r6
 8004594:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8004598:	a902      	add	r1, sp, #8
 800459a:	4628      	mov	r0, r5
 800459c:	9407      	str	r4, [sp, #28]
 800459e:	9601      	str	r6, [sp, #4]
 80045a0:	f8ad 7016 	strh.w	r7, [sp, #22]
 80045a4:	f000 f90c 	bl	80047c0 <_svfprintf_r>
 80045a8:	1c42      	adds	r2, r0, #1
 80045aa:	db1b      	blt.n	80045e4 <snprintf+0x78>
 80045ac:	9b02      	ldr	r3, [sp, #8]
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	b01d      	add	sp, #116	; 0x74
 80045b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80045b8:	b002      	add	sp, #8
 80045ba:	4770      	bx	lr
 80045bc:	4633      	mov	r3, r6
 80045be:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80045c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80045c4:	9404      	str	r4, [sp, #16]
 80045c6:	a902      	add	r1, sp, #8
 80045c8:	4628      	mov	r0, r5
 80045ca:	9407      	str	r4, [sp, #28]
 80045cc:	9601      	str	r6, [sp, #4]
 80045ce:	f8ad 7016 	strh.w	r7, [sp, #22]
 80045d2:	f000 f8f5 	bl	80047c0 <_svfprintf_r>
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	db07      	blt.n	80045ea <snprintf+0x7e>
 80045da:	b01d      	add	sp, #116	; 0x74
 80045dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80045e0:	b002      	add	sp, #8
 80045e2:	4770      	bx	lr
 80045e4:	238b      	movs	r3, #139	; 0x8b
 80045e6:	602b      	str	r3, [r5, #0]
 80045e8:	e7e0      	b.n	80045ac <snprintf+0x40>
 80045ea:	238b      	movs	r3, #139	; 0x8b
 80045ec:	602b      	str	r3, [r5, #0]
 80045ee:	b01d      	add	sp, #116	; 0x74
 80045f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80045f4:	b002      	add	sp, #8
 80045f6:	4770      	bx	lr
 80045f8:	238b      	movs	r3, #139	; 0x8b
 80045fa:	602b      	str	r3, [r5, #0]
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004600:	e7eb      	b.n	80045da <snprintf+0x6e>
 8004602:	bf00      	nop
 8004604:	20000468 	.word	0x20000468
	...

08004640 <strlen>:
 8004640:	f890 f000 	pld	[r0]
 8004644:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8004648:	f020 0107 	bic.w	r1, r0, #7
 800464c:	f06f 0c00 	mvn.w	ip, #0
 8004650:	f010 0407 	ands.w	r4, r0, #7
 8004654:	f891 f020 	pld	[r1, #32]
 8004658:	f040 8049 	bne.w	80046ee <strlen+0xae>
 800465c:	f04f 0400 	mov.w	r4, #0
 8004660:	f06f 0007 	mvn.w	r0, #7
 8004664:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004668:	f891 f040 	pld	[r1, #64]	; 0x40
 800466c:	f100 0008 	add.w	r0, r0, #8
 8004670:	fa82 f24c 	uadd8	r2, r2, ip
 8004674:	faa4 f28c 	sel	r2, r4, ip
 8004678:	fa83 f34c 	uadd8	r3, r3, ip
 800467c:	faa2 f38c 	sel	r3, r2, ip
 8004680:	bb4b      	cbnz	r3, 80046d6 <strlen+0x96>
 8004682:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8004686:	fa82 f24c 	uadd8	r2, r2, ip
 800468a:	f100 0008 	add.w	r0, r0, #8
 800468e:	faa4 f28c 	sel	r2, r4, ip
 8004692:	fa83 f34c 	uadd8	r3, r3, ip
 8004696:	faa2 f38c 	sel	r3, r2, ip
 800469a:	b9e3      	cbnz	r3, 80046d6 <strlen+0x96>
 800469c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80046a0:	fa82 f24c 	uadd8	r2, r2, ip
 80046a4:	f100 0008 	add.w	r0, r0, #8
 80046a8:	faa4 f28c 	sel	r2, r4, ip
 80046ac:	fa83 f34c 	uadd8	r3, r3, ip
 80046b0:	faa2 f38c 	sel	r3, r2, ip
 80046b4:	b97b      	cbnz	r3, 80046d6 <strlen+0x96>
 80046b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80046ba:	f101 0120 	add.w	r1, r1, #32
 80046be:	fa82 f24c 	uadd8	r2, r2, ip
 80046c2:	f100 0008 	add.w	r0, r0, #8
 80046c6:	faa4 f28c 	sel	r2, r4, ip
 80046ca:	fa83 f34c 	uadd8	r3, r3, ip
 80046ce:	faa2 f38c 	sel	r3, r2, ip
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0c6      	beq.n	8004664 <strlen+0x24>
 80046d6:	2a00      	cmp	r2, #0
 80046d8:	bf04      	itt	eq
 80046da:	3004      	addeq	r0, #4
 80046dc:	461a      	moveq	r2, r3
 80046de:	ba12      	rev	r2, r2
 80046e0:	fab2 f282 	clz	r2, r2
 80046e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80046e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80046ec:	4770      	bx	lr
 80046ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80046f2:	f004 0503 	and.w	r5, r4, #3
 80046f6:	f1c4 0000 	rsb	r0, r4, #0
 80046fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80046fe:	f014 0f04 	tst.w	r4, #4
 8004702:	f891 f040 	pld	[r1, #64]	; 0x40
 8004706:	fa0c f505 	lsl.w	r5, ip, r5
 800470a:	ea62 0205 	orn	r2, r2, r5
 800470e:	bf1c      	itt	ne
 8004710:	ea63 0305 	ornne	r3, r3, r5
 8004714:	4662      	movne	r2, ip
 8004716:	f04f 0400 	mov.w	r4, #0
 800471a:	e7a9      	b.n	8004670 <strlen+0x30>

0800471c <strncmp>:
 800471c:	2a00      	cmp	r2, #0
 800471e:	d041      	beq.n	80047a4 <strncmp+0x88>
 8004720:	ea40 0301 	orr.w	r3, r0, r1
 8004724:	f013 0303 	ands.w	r3, r3, #3
 8004728:	b4f0      	push	{r4, r5, r6, r7}
 800472a:	d125      	bne.n	8004778 <strncmp+0x5c>
 800472c:	2a03      	cmp	r2, #3
 800472e:	d923      	bls.n	8004778 <strncmp+0x5c>
 8004730:	6804      	ldr	r4, [r0, #0]
 8004732:	680d      	ldr	r5, [r1, #0]
 8004734:	42ac      	cmp	r4, r5
 8004736:	d11f      	bne.n	8004778 <strncmp+0x5c>
 8004738:	3a04      	subs	r2, #4
 800473a:	d035      	beq.n	80047a8 <strncmp+0x8c>
 800473c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8004740:	ea25 0404 	bic.w	r4, r5, r4
 8004744:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8004748:	d131      	bne.n	80047ae <strncmp+0x92>
 800474a:	1d07      	adds	r7, r0, #4
 800474c:	1d0d      	adds	r5, r1, #4
 800474e:	e00d      	b.n	800476c <strncmp+0x50>
 8004750:	f857 3b04 	ldr.w	r3, [r7], #4
 8004754:	680e      	ldr	r6, [r1, #0]
 8004756:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 800475a:	42b3      	cmp	r3, r6
 800475c:	ea24 0403 	bic.w	r4, r4, r3
 8004760:	d10a      	bne.n	8004778 <strncmp+0x5c>
 8004762:	3a04      	subs	r2, #4
 8004764:	d020      	beq.n	80047a8 <strncmp+0x8c>
 8004766:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800476a:	d123      	bne.n	80047b4 <strncmp+0x98>
 800476c:	2a03      	cmp	r2, #3
 800476e:	4629      	mov	r1, r5
 8004770:	4638      	mov	r0, r7
 8004772:	f105 0504 	add.w	r5, r5, #4
 8004776:	d8eb      	bhi.n	8004750 <strncmp+0x34>
 8004778:	7803      	ldrb	r3, [r0, #0]
 800477a:	780c      	ldrb	r4, [r1, #0]
 800477c:	429c      	cmp	r4, r3
 800477e:	f102 32ff 	add.w	r2, r2, #4294967295
 8004782:	d10c      	bne.n	800479e <strncmp+0x82>
 8004784:	b182      	cbz	r2, 80047a8 <strncmp+0x8c>
 8004786:	b914      	cbnz	r4, 800478e <strncmp+0x72>
 8004788:	e016      	b.n	80047b8 <strncmp+0x9c>
 800478a:	b16a      	cbz	r2, 80047a8 <strncmp+0x8c>
 800478c:	b17b      	cbz	r3, 80047ae <strncmp+0x92>
 800478e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004792:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004796:	42a3      	cmp	r3, r4
 8004798:	f102 32ff 	add.w	r2, r2, #4294967295
 800479c:	d0f5      	beq.n	800478a <strncmp+0x6e>
 800479e:	1b18      	subs	r0, r3, r4
 80047a0:	bcf0      	pop	{r4, r5, r6, r7}
 80047a2:	4770      	bx	lr
 80047a4:	4610      	mov	r0, r2
 80047a6:	4770      	bx	lr
 80047a8:	4610      	mov	r0, r2
 80047aa:	bcf0      	pop	{r4, r5, r6, r7}
 80047ac:	4770      	bx	lr
 80047ae:	4618      	mov	r0, r3
 80047b0:	bcf0      	pop	{r4, r5, r6, r7}
 80047b2:	4770      	bx	lr
 80047b4:	2000      	movs	r0, #0
 80047b6:	e7f3      	b.n	80047a0 <strncmp+0x84>
 80047b8:	4620      	mov	r0, r4
 80047ba:	e7f1      	b.n	80047a0 <strncmp+0x84>
 80047bc:	0000      	movs	r0, r0
	...

080047c0 <_svfprintf_r>:
 80047c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c4:	b0c5      	sub	sp, #276	; 0x114
 80047c6:	460c      	mov	r4, r1
 80047c8:	9109      	str	r1, [sp, #36]	; 0x24
 80047ca:	4615      	mov	r5, r2
 80047cc:	930e      	str	r3, [sp, #56]	; 0x38
 80047ce:	900a      	str	r0, [sp, #40]	; 0x28
 80047d0:	f004 fbaa 	bl	8008f28 <_localeconv_r>
 80047d4:	6803      	ldr	r3, [r0, #0]
 80047d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff ff31 	bl	8004640 <strlen>
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	9016      	str	r0, [sp, #88]	; 0x58
 80047e2:	061e      	lsls	r6, r3, #24
 80047e4:	d503      	bpl.n	80047ee <_svfprintf_r+0x2e>
 80047e6:	6923      	ldr	r3, [r4, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f001 8133 	beq.w	8005a54 <_svfprintf_r+0x1294>
 80047ee:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004a88 <_svfprintf_r+0x2c8>
 80047f2:	2300      	movs	r3, #0
 80047f4:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80047f8:	9312      	str	r3, [sp, #72]	; 0x48
 80047fa:	9329      	str	r3, [sp, #164]	; 0xa4
 80047fc:	9328      	str	r3, [sp, #160]	; 0xa0
 80047fe:	9319      	str	r3, [sp, #100]	; 0x64
 8004800:	930b      	str	r3, [sp, #44]	; 0x2c
 8004802:	f8df a290 	ldr.w	sl, [pc, #656]	; 8004a94 <_svfprintf_r+0x2d4>
 8004806:	ab34      	add	r3, sp, #208	; 0xd0
 8004808:	9327      	str	r3, [sp, #156]	; 0x9c
 800480a:	4699      	mov	r9, r3
 800480c:	46a8      	mov	r8, r5
 800480e:	f898 3000 	ldrb.w	r3, [r8]
 8004812:	4644      	mov	r4, r8
 8004814:	b1eb      	cbz	r3, 8004852 <_svfprintf_r+0x92>
 8004816:	2b25      	cmp	r3, #37	; 0x25
 8004818:	d102      	bne.n	8004820 <_svfprintf_r+0x60>
 800481a:	e01a      	b.n	8004852 <_svfprintf_r+0x92>
 800481c:	2b25      	cmp	r3, #37	; 0x25
 800481e:	d003      	beq.n	8004828 <_svfprintf_r+0x68>
 8004820:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f9      	bne.n	800481c <_svfprintf_r+0x5c>
 8004828:	ebc8 0504 	rsb	r5, r8, r4
 800482c:	b18d      	cbz	r5, 8004852 <_svfprintf_r+0x92>
 800482e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004830:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004832:	f8c9 8000 	str.w	r8, [r9]
 8004836:	3301      	adds	r3, #1
 8004838:	442a      	add	r2, r5
 800483a:	2b07      	cmp	r3, #7
 800483c:	f8c9 5004 	str.w	r5, [r9, #4]
 8004840:	9229      	str	r2, [sp, #164]	; 0xa4
 8004842:	9328      	str	r3, [sp, #160]	; 0xa0
 8004844:	f300 80a6 	bgt.w	8004994 <_svfprintf_r+0x1d4>
 8004848:	f109 0908 	add.w	r9, r9, #8
 800484c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800484e:	442b      	add	r3, r5
 8004850:	930b      	str	r3, [sp, #44]	; 0x2c
 8004852:	7823      	ldrb	r3, [r4, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80a6 	beq.w	80049a6 <_svfprintf_r+0x1e6>
 800485a:	2300      	movs	r3, #0
 800485c:	461a      	mov	r2, r3
 800485e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004862:	4619      	mov	r1, r3
 8004864:	930c      	str	r3, [sp, #48]	; 0x30
 8004866:	9307      	str	r3, [sp, #28]
 8004868:	f04f 3bff 	mov.w	fp, #4294967295
 800486c:	7863      	ldrb	r3, [r4, #1]
 800486e:	f104 0801 	add.w	r8, r4, #1
 8004872:	465d      	mov	r5, fp
 8004874:	f108 0801 	add.w	r8, r8, #1
 8004878:	f1a3 0020 	sub.w	r0, r3, #32
 800487c:	2858      	cmp	r0, #88	; 0x58
 800487e:	f200 8434 	bhi.w	80050ea <_svfprintf_r+0x92a>
 8004882:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004886:	03a0      	.short	0x03a0
 8004888:	04320432 	.word	0x04320432
 800488c:	043203a8 	.word	0x043203a8
 8004890:	04320432 	.word	0x04320432
 8004894:	04320432 	.word	0x04320432
 8004898:	03af0432 	.word	0x03af0432
 800489c:	043203bd 	.word	0x043203bd
 80048a0:	00e2005d 	.word	0x00e2005d
 80048a4:	01090432 	.word	0x01090432
 80048a8:	01100110 	.word	0x01100110
 80048ac:	01100110 	.word	0x01100110
 80048b0:	01100110 	.word	0x01100110
 80048b4:	01100110 	.word	0x01100110
 80048b8:	04320110 	.word	0x04320110
 80048bc:	04320432 	.word	0x04320432
 80048c0:	04320432 	.word	0x04320432
 80048c4:	04320432 	.word	0x04320432
 80048c8:	04320432 	.word	0x04320432
 80048cc:	01200432 	.word	0x01200432
 80048d0:	04320286 	.word	0x04320286
 80048d4:	04320286 	.word	0x04320286
 80048d8:	04320432 	.word	0x04320432
 80048dc:	02d40432 	.word	0x02d40432
 80048e0:	04320432 	.word	0x04320432
 80048e4:	043202e5 	.word	0x043202e5
 80048e8:	04320432 	.word	0x04320432
 80048ec:	04320432 	.word	0x04320432
 80048f0:	0432030f 	.word	0x0432030f
 80048f4:	033d0432 	.word	0x033d0432
 80048f8:	04320432 	.word	0x04320432
 80048fc:	04320432 	.word	0x04320432
 8004900:	04320432 	.word	0x04320432
 8004904:	04320432 	.word	0x04320432
 8004908:	04320432 	.word	0x04320432
 800490c:	0391037e 	.word	0x0391037e
 8004910:	02860286 	.word	0x02860286
 8004914:	03990286 	.word	0x03990286
 8004918:	04320391 	.word	0x04320391
 800491c:	04070432 	.word	0x04070432
 8004920:	04120432 	.word	0x04120432
 8004924:	006400a3 	.word	0x006400a3
 8004928:	043203c2 	.word	0x043203c2
 800492c:	043203c9 	.word	0x043203c9
 8004930:	043203ea 	.word	0x043203ea
 8004934:	03f20432 	.word	0x03f20432
 8004938:	980c      	ldr	r0, [sp, #48]	; 0x30
 800493a:	930e      	str	r3, [sp, #56]	; 0x38
 800493c:	4240      	negs	r0, r0
 800493e:	900c      	str	r0, [sp, #48]	; 0x30
 8004940:	9b07      	ldr	r3, [sp, #28]
 8004942:	f043 0304 	orr.w	r3, r3, #4
 8004946:	9307      	str	r3, [sp, #28]
 8004948:	f898 3000 	ldrb.w	r3, [r8]
 800494c:	e792      	b.n	8004874 <_svfprintf_r+0xb4>
 800494e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004950:	46ab      	mov	fp, r5
 8004952:	2100      	movs	r1, #0
 8004954:	6804      	ldr	r4, [r0, #0]
 8004956:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800495a:	1d07      	adds	r7, r0, #4
 800495c:	9807      	ldr	r0, [sp, #28]
 800495e:	2330      	movs	r3, #48	; 0x30
 8004960:	2278      	movs	r2, #120	; 0x78
 8004962:	458b      	cmp	fp, r1
 8004964:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8004968:	f04f 0500 	mov.w	r5, #0
 800496c:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8004970:	f040 0302 	orr.w	r3, r0, #2
 8004974:	f2c0 83d6 	blt.w	8005124 <_svfprintf_r+0x964>
 8004978:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 800497c:	f043 0302 	orr.w	r3, r3, #2
 8004980:	9307      	str	r3, [sp, #28]
 8004982:	ea54 0305 	orrs.w	r3, r4, r5
 8004986:	970e      	str	r7, [sp, #56]	; 0x38
 8004988:	f000 83a2 	beq.w	80050d0 <_svfprintf_r+0x910>
 800498c:	460f      	mov	r7, r1
 800498e:	9211      	str	r2, [sp, #68]	; 0x44
 8004990:	483f      	ldr	r0, [pc, #252]	; (8004a90 <_svfprintf_r+0x2d0>)
 8004992:	e2e6      	b.n	8004f62 <_svfprintf_r+0x7a2>
 8004994:	aa27      	add	r2, sp, #156	; 0x9c
 8004996:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004998:	980a      	ldr	r0, [sp, #40]	; 0x28
 800499a:	f005 fc27 	bl	800a1ec <__ssprint_r>
 800499e:	b948      	cbnz	r0, 80049b4 <_svfprintf_r+0x1f4>
 80049a0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80049a4:	e752      	b.n	800484c <_svfprintf_r+0x8c>
 80049a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80049a8:	b123      	cbz	r3, 80049b4 <_svfprintf_r+0x1f4>
 80049aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80049ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049ae:	aa27      	add	r2, sp, #156	; 0x9c
 80049b0:	f005 fc1c 	bl	800a1ec <__ssprint_r>
 80049b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b6:	899b      	ldrh	r3, [r3, #12]
 80049b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80049bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049be:	bf18      	it	ne
 80049c0:	f04f 33ff 	movne.w	r3, #4294967295
 80049c4:	4618      	mov	r0, r3
 80049c6:	b045      	add	sp, #276	; 0x114
 80049c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049cc:	9311      	str	r3, [sp, #68]	; 0x44
 80049ce:	46ab      	mov	fp, r5
 80049d0:	2a00      	cmp	r2, #0
 80049d2:	f041 823b 	bne.w	8005e4c <_svfprintf_r+0x168c>
 80049d6:	9a07      	ldr	r2, [sp, #28]
 80049d8:	f012 0320 	ands.w	r3, r2, #32
 80049dc:	f000 8246 	beq.w	8004e6c <_svfprintf_r+0x6ac>
 80049e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80049e2:	3707      	adds	r7, #7
 80049e4:	f027 0307 	bic.w	r3, r7, #7
 80049e8:	2700      	movs	r7, #0
 80049ea:	f103 0108 	add.w	r1, r3, #8
 80049ee:	45bb      	cmp	fp, r7
 80049f0:	910e      	str	r1, [sp, #56]	; 0x38
 80049f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80049f6:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80049fa:	f2c0 8764 	blt.w	80058c6 <_svfprintf_r+0x1106>
 80049fe:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004a02:	9307      	str	r3, [sp, #28]
 8004a04:	ea54 0305 	orrs.w	r3, r4, r5
 8004a08:	f000 8384 	beq.w	8005114 <_svfprintf_r+0x954>
 8004a0c:	ae34      	add	r6, sp, #208	; 0xd0
 8004a0e:	08e2      	lsrs	r2, r4, #3
 8004a10:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8004a14:	08e9      	lsrs	r1, r5, #3
 8004a16:	f004 0307 	and.w	r3, r4, #7
 8004a1a:	460d      	mov	r5, r1
 8004a1c:	4614      	mov	r4, r2
 8004a1e:	3330      	adds	r3, #48	; 0x30
 8004a20:	ea54 0205 	orrs.w	r2, r4, r5
 8004a24:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8004a28:	d1f1      	bne.n	8004a0e <_svfprintf_r+0x24e>
 8004a2a:	9a07      	ldr	r2, [sp, #28]
 8004a2c:	07d1      	lsls	r1, r2, #31
 8004a2e:	f140 808f 	bpl.w	8004b50 <_svfprintf_r+0x390>
 8004a32:	2b30      	cmp	r3, #48	; 0x30
 8004a34:	f000 808c 	beq.w	8004b50 <_svfprintf_r+0x390>
 8004a38:	2230      	movs	r2, #48	; 0x30
 8004a3a:	1e73      	subs	r3, r6, #1
 8004a3c:	f806 2c01 	strb.w	r2, [r6, #-1]
 8004a40:	aa34      	add	r2, sp, #208	; 0xd0
 8004a42:	1ad2      	subs	r2, r2, r3
 8004a44:	920d      	str	r2, [sp, #52]	; 0x34
 8004a46:	461e      	mov	r6, r3
 8004a48:	e085      	b.n	8004b56 <_svfprintf_r+0x396>
 8004a4a:	f898 3000 	ldrb.w	r3, [r8]
 8004a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a50:	f108 0401 	add.w	r4, r8, #1
 8004a54:	f001 81ec 	beq.w	8005e30 <_svfprintf_r+0x1670>
 8004a58:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004a5c:	2809      	cmp	r0, #9
 8004a5e:	bf98      	it	ls
 8004a60:	2500      	movls	r5, #0
 8004a62:	f201 818e 	bhi.w	8005d82 <_svfprintf_r+0x15c2>
 8004a66:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004a6a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004a6e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8004a72:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004a76:	2809      	cmp	r0, #9
 8004a78:	d9f5      	bls.n	8004a66 <_svfprintf_r+0x2a6>
 8004a7a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8004a7e:	46a0      	mov	r8, r4
 8004a80:	e6fa      	b.n	8004878 <_svfprintf_r+0xb8>
 8004a82:	bf00      	nop
 8004a84:	f3af 8000 	nop.w
	...
 8004a90:	0800ad80 	.word	0x0800ad80
 8004a94:	0800ad4c 	.word	0x0800ad4c
 8004a98:	9b07      	ldr	r3, [sp, #28]
 8004a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9e:	9307      	str	r3, [sp, #28]
 8004aa0:	f898 3000 	ldrb.w	r3, [r8]
 8004aa4:	e6e6      	b.n	8004874 <_svfprintf_r+0xb4>
 8004aa6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004aaa:	2300      	movs	r3, #0
 8004aac:	461c      	mov	r4, r3
 8004aae:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004ab2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004ab6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8004aba:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004abe:	2809      	cmp	r0, #9
 8004ac0:	d9f5      	bls.n	8004aae <_svfprintf_r+0x2ee>
 8004ac2:	940c      	str	r4, [sp, #48]	; 0x30
 8004ac4:	e6d8      	b.n	8004878 <_svfprintf_r+0xb8>
 8004ac6:	9311      	str	r3, [sp, #68]	; 0x44
 8004ac8:	46ab      	mov	fp, r5
 8004aca:	2a00      	cmp	r2, #0
 8004acc:	f041 81cc 	bne.w	8005e68 <_svfprintf_r+0x16a8>
 8004ad0:	9b07      	ldr	r3, [sp, #28]
 8004ad2:	f043 0310 	orr.w	r3, r3, #16
 8004ad6:	9307      	str	r3, [sp, #28]
 8004ad8:	9b07      	ldr	r3, [sp, #28]
 8004ada:	069c      	lsls	r4, r3, #26
 8004adc:	f140 8537 	bpl.w	800554e <_svfprintf_r+0xd8e>
 8004ae0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004ae2:	3707      	adds	r7, #7
 8004ae4:	f027 0707 	bic.w	r7, r7, #7
 8004ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aec:	f107 0108 	add.w	r1, r7, #8
 8004af0:	910e      	str	r1, [sp, #56]	; 0x38
 8004af2:	4614      	mov	r4, r2
 8004af4:	461d      	mov	r5, r3
 8004af6:	2a00      	cmp	r2, #0
 8004af8:	f173 0300 	sbcs.w	r3, r3, #0
 8004afc:	f2c0 8562 	blt.w	80055c4 <_svfprintf_r+0xe04>
 8004b00:	f1bb 0f00 	cmp.w	fp, #0
 8004b04:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004b08:	f2c0 853f 	blt.w	800558a <_svfprintf_r+0xdca>
 8004b0c:	9b07      	ldr	r3, [sp, #28]
 8004b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b12:	9307      	str	r3, [sp, #28]
 8004b14:	ea54 0305 	orrs.w	r3, r4, r5
 8004b18:	f000 81e8 	beq.w	8004eec <_svfprintf_r+0x72c>
 8004b1c:	2d00      	cmp	r5, #0
 8004b1e:	bf08      	it	eq
 8004b20:	2c0a      	cmpeq	r4, #10
 8004b22:	f0c0 81e8 	bcc.w	8004ef6 <_svfprintf_r+0x736>
 8004b26:	ae34      	add	r6, sp, #208	; 0xd0
 8004b28:	4620      	mov	r0, r4
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	220a      	movs	r2, #10
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f005 fdfc 	bl	800a72c <__aeabi_uldivmod>
 8004b34:	3230      	adds	r2, #48	; 0x30
 8004b36:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	2300      	movs	r3, #0
 8004b40:	220a      	movs	r2, #10
 8004b42:	f005 fdf3 	bl	800a72c <__aeabi_uldivmod>
 8004b46:	4604      	mov	r4, r0
 8004b48:	460d      	mov	r5, r1
 8004b4a:	ea54 0305 	orrs.w	r3, r4, r5
 8004b4e:	d1eb      	bne.n	8004b28 <_svfprintf_r+0x368>
 8004b50:	ab34      	add	r3, sp, #208	; 0xd0
 8004b52:	1b9b      	subs	r3, r3, r6
 8004b54:	930d      	str	r3, [sp, #52]	; 0x34
 8004b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b58:	455b      	cmp	r3, fp
 8004b5a:	bfb8      	it	lt
 8004b5c:	465b      	movlt	r3, fp
 8004b5e:	9308      	str	r3, [sp, #32]
 8004b60:	2300      	movs	r3, #0
 8004b62:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b64:	b117      	cbz	r7, 8004b6c <_svfprintf_r+0x3ac>
 8004b66:	9b08      	ldr	r3, [sp, #32]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	9308      	str	r3, [sp, #32]
 8004b6c:	9b07      	ldr	r3, [sp, #28]
 8004b6e:	f013 0302 	ands.w	r3, r3, #2
 8004b72:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b74:	d002      	beq.n	8004b7c <_svfprintf_r+0x3bc>
 8004b76:	9b08      	ldr	r3, [sp, #32]
 8004b78:	3302      	adds	r3, #2
 8004b7a:	9308      	str	r3, [sp, #32]
 8004b7c:	9b07      	ldr	r3, [sp, #28]
 8004b7e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8004b82:	9310      	str	r3, [sp, #64]	; 0x40
 8004b84:	f040 82db 	bne.w	800513e <_svfprintf_r+0x97e>
 8004b88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b8a:	9a08      	ldr	r2, [sp, #32]
 8004b8c:	1a9d      	subs	r5, r3, r2
 8004b8e:	2d00      	cmp	r5, #0
 8004b90:	f340 82d5 	ble.w	800513e <_svfprintf_r+0x97e>
 8004b94:	2d10      	cmp	r5, #16
 8004b96:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004b98:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004b9a:	4fa8      	ldr	r7, [pc, #672]	; (8004e3c <_svfprintf_r+0x67c>)
 8004b9c:	dd27      	ble.n	8004bee <_svfprintf_r+0x42e>
 8004b9e:	9618      	str	r6, [sp, #96]	; 0x60
 8004ba0:	4648      	mov	r0, r9
 8004ba2:	2410      	movs	r4, #16
 8004ba4:	46b9      	mov	r9, r7
 8004ba6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004ba8:	462f      	mov	r7, r5
 8004baa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004bac:	e004      	b.n	8004bb8 <_svfprintf_r+0x3f8>
 8004bae:	3f10      	subs	r7, #16
 8004bb0:	2f10      	cmp	r7, #16
 8004bb2:	f100 0008 	add.w	r0, r0, #8
 8004bb6:	dd16      	ble.n	8004be6 <_svfprintf_r+0x426>
 8004bb8:	3201      	adds	r2, #1
 8004bba:	4ba0      	ldr	r3, [pc, #640]	; (8004e3c <_svfprintf_r+0x67c>)
 8004bbc:	9228      	str	r2, [sp, #160]	; 0xa0
 8004bbe:	3110      	adds	r1, #16
 8004bc0:	2a07      	cmp	r2, #7
 8004bc2:	9129      	str	r1, [sp, #164]	; 0xa4
 8004bc4:	e880 0018 	stmia.w	r0, {r3, r4}
 8004bc8:	ddf1      	ble.n	8004bae <_svfprintf_r+0x3ee>
 8004bca:	aa27      	add	r2, sp, #156	; 0x9c
 8004bcc:	4631      	mov	r1, r6
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f005 fb0c 	bl	800a1ec <__ssprint_r>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	f47f aeed 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8004bda:	3f10      	subs	r7, #16
 8004bdc:	2f10      	cmp	r7, #16
 8004bde:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004be0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004be2:	a834      	add	r0, sp, #208	; 0xd0
 8004be4:	dce8      	bgt.n	8004bb8 <_svfprintf_r+0x3f8>
 8004be6:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8004be8:	463d      	mov	r5, r7
 8004bea:	464f      	mov	r7, r9
 8004bec:	4681      	mov	r9, r0
 8004bee:	3201      	adds	r2, #1
 8004bf0:	186c      	adds	r4, r5, r1
 8004bf2:	2a07      	cmp	r2, #7
 8004bf4:	9429      	str	r4, [sp, #164]	; 0xa4
 8004bf6:	9228      	str	r2, [sp, #160]	; 0xa0
 8004bf8:	f8c9 7000 	str.w	r7, [r9]
 8004bfc:	f8c9 5004 	str.w	r5, [r9, #4]
 8004c00:	f300 842d 	bgt.w	800545e <_svfprintf_r+0xc9e>
 8004c04:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004c08:	f109 0908 	add.w	r9, r9, #8
 8004c0c:	b177      	cbz	r7, 8004c2c <_svfprintf_r+0x46c>
 8004c0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004c10:	3301      	adds	r3, #1
 8004c12:	3401      	adds	r4, #1
 8004c14:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8004c18:	2201      	movs	r2, #1
 8004c1a:	2b07      	cmp	r3, #7
 8004c1c:	9429      	str	r4, [sp, #164]	; 0xa4
 8004c1e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004c20:	e889 0006 	stmia.w	r9, {r1, r2}
 8004c24:	f300 83a5 	bgt.w	8005372 <_svfprintf_r+0xbb2>
 8004c28:	f109 0908 	add.w	r9, r9, #8
 8004c2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c2e:	b16b      	cbz	r3, 8004c4c <_svfprintf_r+0x48c>
 8004c30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004c32:	3301      	adds	r3, #1
 8004c34:	3402      	adds	r4, #2
 8004c36:	a920      	add	r1, sp, #128	; 0x80
 8004c38:	2202      	movs	r2, #2
 8004c3a:	2b07      	cmp	r3, #7
 8004c3c:	9429      	str	r4, [sp, #164]	; 0xa4
 8004c3e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004c40:	e889 0006 	stmia.w	r9, {r1, r2}
 8004c44:	f300 83a1 	bgt.w	800538a <_svfprintf_r+0xbca>
 8004c48:	f109 0908 	add.w	r9, r9, #8
 8004c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c4e:	2b80      	cmp	r3, #128	; 0x80
 8004c50:	f000 82e1 	beq.w	8005216 <_svfprintf_r+0xa56>
 8004c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c56:	ebc3 070b 	rsb	r7, r3, fp
 8004c5a:	2f00      	cmp	r7, #0
 8004c5c:	dd33      	ble.n	8004cc6 <_svfprintf_r+0x506>
 8004c5e:	4a78      	ldr	r2, [pc, #480]	; (8004e40 <_svfprintf_r+0x680>)
 8004c60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004c62:	920f      	str	r2, [sp, #60]	; 0x3c
 8004c64:	2f10      	cmp	r7, #16
 8004c66:	dd22      	ble.n	8004cae <_svfprintf_r+0x4ee>
 8004c68:	4622      	mov	r2, r4
 8004c6a:	f04f 0b10 	mov.w	fp, #16
 8004c6e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004c70:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004c72:	e004      	b.n	8004c7e <_svfprintf_r+0x4be>
 8004c74:	3f10      	subs	r7, #16
 8004c76:	2f10      	cmp	r7, #16
 8004c78:	f109 0908 	add.w	r9, r9, #8
 8004c7c:	dd16      	ble.n	8004cac <_svfprintf_r+0x4ec>
 8004c7e:	3301      	adds	r3, #1
 8004c80:	3210      	adds	r2, #16
 8004c82:	2b07      	cmp	r3, #7
 8004c84:	9229      	str	r2, [sp, #164]	; 0xa4
 8004c86:	9328      	str	r3, [sp, #160]	; 0xa0
 8004c88:	e889 0c00 	stmia.w	r9, {sl, fp}
 8004c8c:	ddf2      	ble.n	8004c74 <_svfprintf_r+0x4b4>
 8004c8e:	aa27      	add	r2, sp, #156	; 0x9c
 8004c90:	4621      	mov	r1, r4
 8004c92:	4628      	mov	r0, r5
 8004c94:	f005 faaa 	bl	800a1ec <__ssprint_r>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	f47f ae8b 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8004c9e:	3f10      	subs	r7, #16
 8004ca0:	2f10      	cmp	r7, #16
 8004ca2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004ca4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004ca6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004caa:	dce8      	bgt.n	8004c7e <_svfprintf_r+0x4be>
 8004cac:	4614      	mov	r4, r2
 8004cae:	3301      	adds	r3, #1
 8004cb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cb2:	9328      	str	r3, [sp, #160]	; 0xa0
 8004cb4:	443c      	add	r4, r7
 8004cb6:	2b07      	cmp	r3, #7
 8004cb8:	9429      	str	r4, [sp, #164]	; 0xa4
 8004cba:	e889 0084 	stmia.w	r9, {r2, r7}
 8004cbe:	f300 834c 	bgt.w	800535a <_svfprintf_r+0xb9a>
 8004cc2:	f109 0908 	add.w	r9, r9, #8
 8004cc6:	9b07      	ldr	r3, [sp, #28]
 8004cc8:	05da      	lsls	r2, r3, #23
 8004cca:	f100 823a 	bmi.w	8005142 <_svfprintf_r+0x982>
 8004cce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004cd0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004cd2:	f8c9 6000 	str.w	r6, [r9]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	440c      	add	r4, r1
 8004cda:	2b07      	cmp	r3, #7
 8004cdc:	9429      	str	r4, [sp, #164]	; 0xa4
 8004cde:	f8c9 1004 	str.w	r1, [r9, #4]
 8004ce2:	9328      	str	r3, [sp, #160]	; 0xa0
 8004ce4:	f300 8323 	bgt.w	800532e <_svfprintf_r+0xb6e>
 8004ce8:	f109 0908 	add.w	r9, r9, #8
 8004cec:	9b07      	ldr	r3, [sp, #28]
 8004cee:	0759      	lsls	r1, r3, #29
 8004cf0:	d53f      	bpl.n	8004d72 <_svfprintf_r+0x5b2>
 8004cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cf4:	9a08      	ldr	r2, [sp, #32]
 8004cf6:	1a9d      	subs	r5, r3, r2
 8004cf8:	2d00      	cmp	r5, #0
 8004cfa:	dd3a      	ble.n	8004d72 <_svfprintf_r+0x5b2>
 8004cfc:	2d10      	cmp	r5, #16
 8004cfe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004d00:	4f4e      	ldr	r7, [pc, #312]	; (8004e3c <_svfprintf_r+0x67c>)
 8004d02:	dd23      	ble.n	8004d4c <_svfprintf_r+0x58c>
 8004d04:	4622      	mov	r2, r4
 8004d06:	2610      	movs	r6, #16
 8004d08:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004d0c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004d0e:	e004      	b.n	8004d1a <_svfprintf_r+0x55a>
 8004d10:	3d10      	subs	r5, #16
 8004d12:	2d10      	cmp	r5, #16
 8004d14:	f109 0908 	add.w	r9, r9, #8
 8004d18:	dd17      	ble.n	8004d4a <_svfprintf_r+0x58a>
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	4947      	ldr	r1, [pc, #284]	; (8004e3c <_svfprintf_r+0x67c>)
 8004d1e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004d20:	3210      	adds	r2, #16
 8004d22:	2b07      	cmp	r3, #7
 8004d24:	9229      	str	r2, [sp, #164]	; 0xa4
 8004d26:	e889 0042 	stmia.w	r9, {r1, r6}
 8004d2a:	ddf1      	ble.n	8004d10 <_svfprintf_r+0x550>
 8004d2c:	aa27      	add	r2, sp, #156	; 0x9c
 8004d2e:	4621      	mov	r1, r4
 8004d30:	4658      	mov	r0, fp
 8004d32:	f005 fa5b 	bl	800a1ec <__ssprint_r>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	f47f ae3c 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8004d3c:	3d10      	subs	r5, #16
 8004d3e:	2d10      	cmp	r5, #16
 8004d40:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004d42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004d44:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004d48:	dce7      	bgt.n	8004d1a <_svfprintf_r+0x55a>
 8004d4a:	4614      	mov	r4, r2
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	442c      	add	r4, r5
 8004d50:	2b07      	cmp	r3, #7
 8004d52:	9429      	str	r4, [sp, #164]	; 0xa4
 8004d54:	9328      	str	r3, [sp, #160]	; 0xa0
 8004d56:	f8c9 7000 	str.w	r7, [r9]
 8004d5a:	f8c9 5004 	str.w	r5, [r9, #4]
 8004d5e:	dd08      	ble.n	8004d72 <_svfprintf_r+0x5b2>
 8004d60:	aa27      	add	r2, sp, #156	; 0x9c
 8004d62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004d66:	f005 fa41 	bl	800a1ec <__ssprint_r>
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	f47f ae22 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8004d70:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d76:	9908      	ldr	r1, [sp, #32]
 8004d78:	428a      	cmp	r2, r1
 8004d7a:	bfac      	ite	ge
 8004d7c:	189b      	addge	r3, r3, r2
 8004d7e:	185b      	addlt	r3, r3, r1
 8004d80:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d82:	2c00      	cmp	r4, #0
 8004d84:	f040 82df 	bne.w	8005346 <_svfprintf_r+0xb86>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	9328      	str	r3, [sp, #160]	; 0xa0
 8004d8c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004d90:	e53d      	b.n	800480e <_svfprintf_r+0x4e>
 8004d92:	9311      	str	r3, [sp, #68]	; 0x44
 8004d94:	46ab      	mov	fp, r5
 8004d96:	2a00      	cmp	r2, #0
 8004d98:	f041 806a 	bne.w	8005e70 <_svfprintf_r+0x16b0>
 8004d9c:	9b07      	ldr	r3, [sp, #28]
 8004d9e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004da0:	071a      	lsls	r2, r3, #28
 8004da2:	f107 0707 	add.w	r7, r7, #7
 8004da6:	f140 8576 	bpl.w	8005896 <_svfprintf_r+0x10d6>
 8004daa:	f027 0307 	bic.w	r3, r7, #7
 8004dae:	ed93 7b00 	vldr	d7, [r3]
 8004db2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004db6:	f103 0208 	add.w	r2, r3, #8
 8004dba:	920e      	str	r2, [sp, #56]	; 0x38
 8004dbc:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8004dc0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8004dc4:	911a      	str	r1, [sp, #104]	; 0x68
 8004dc6:	931b      	str	r3, [sp, #108]	; 0x6c
 8004dc8:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8004dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <_svfprintf_r+0x684>)
 8004dd6:	f7ff fa05 	bl	80041e4 <__aeabi_dcmpun>
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	f040 84da 	bne.w	8005794 <_svfprintf_r+0xfd4>
 8004de0:	f04f 32ff 	mov.w	r2, #4294967295
 8004de4:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <_svfprintf_r+0x684>)
 8004de6:	4620      	mov	r0, r4
 8004de8:	4629      	mov	r1, r5
 8004dea:	f7ff f9dd 	bl	80041a8 <__aeabi_dcmple>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	f040 84d0 	bne.w	8005794 <_svfprintf_r+0xfd4>
 8004df4:	2200      	movs	r2, #0
 8004df6:	2300      	movs	r3, #0
 8004df8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004dfc:	f7ff f9ca 	bl	8004194 <__aeabi_dcmplt>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	f040 875a 	bne.w	8005cba <_svfprintf_r+0x14fa>
 8004e06:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004e0a:	4e0f      	ldr	r6, [pc, #60]	; (8004e48 <_svfprintf_r+0x688>)
 8004e0c:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <_svfprintf_r+0x68c>)
 8004e0e:	9907      	ldr	r1, [sp, #28]
 8004e10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004e14:	9107      	str	r1, [sp, #28]
 8004e16:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004e18:	2203      	movs	r2, #3
 8004e1a:	f04f 0b00 	mov.w	fp, #0
 8004e1e:	9208      	str	r2, [sp, #32]
 8004e20:	2947      	cmp	r1, #71	; 0x47
 8004e22:	bfd8      	it	le
 8004e24:	461e      	movle	r6, r3
 8004e26:	920d      	str	r2, [sp, #52]	; 0x34
 8004e28:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8004e2c:	e69a      	b.n	8004b64 <_svfprintf_r+0x3a4>
 8004e2e:	9b07      	ldr	r3, [sp, #28]
 8004e30:	f043 0308 	orr.w	r3, r3, #8
 8004e34:	9307      	str	r3, [sp, #28]
 8004e36:	f898 3000 	ldrb.w	r3, [r8]
 8004e3a:	e51b      	b.n	8004874 <_svfprintf_r+0xb4>
 8004e3c:	0800ada0 	.word	0x0800ada0
 8004e40:	0800ad4c 	.word	0x0800ad4c
 8004e44:	7fefffff 	.word	0x7fefffff
 8004e48:	0800ad60 	.word	0x0800ad60
 8004e4c:	0800ad5c 	.word	0x0800ad5c
 8004e50:	9311      	str	r3, [sp, #68]	; 0x44
 8004e52:	46ab      	mov	fp, r5
 8004e54:	2a00      	cmp	r2, #0
 8004e56:	f041 8017 	bne.w	8005e88 <_svfprintf_r+0x16c8>
 8004e5a:	9b07      	ldr	r3, [sp, #28]
 8004e5c:	f043 0310 	orr.w	r3, r3, #16
 8004e60:	9307      	str	r3, [sp, #28]
 8004e62:	9a07      	ldr	r2, [sp, #28]
 8004e64:	f012 0320 	ands.w	r3, r2, #32
 8004e68:	f47f adba 	bne.w	80049e0 <_svfprintf_r+0x220>
 8004e6c:	9907      	ldr	r1, [sp, #28]
 8004e6e:	f011 0210 	ands.w	r2, r1, #16
 8004e72:	f000 845b 	beq.w	800572c <_svfprintf_r+0xf6c>
 8004e76:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004e78:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004e7c:	f1bb 0f00 	cmp.w	fp, #0
 8004e80:	6804      	ldr	r4, [r0, #0]
 8004e82:	f100 0704 	add.w	r7, r0, #4
 8004e86:	f04f 0500 	mov.w	r5, #0
 8004e8a:	f2c0 851b 	blt.w	80058c4 <_svfprintf_r+0x1104>
 8004e8e:	460a      	mov	r2, r1
 8004e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e94:	9207      	str	r2, [sp, #28]
 8004e96:	ea54 0205 	orrs.w	r2, r4, r5
 8004e9a:	970e      	str	r7, [sp, #56]	; 0x38
 8004e9c:	f000 813a 	beq.w	8005114 <_svfprintf_r+0x954>
 8004ea0:	461f      	mov	r7, r3
 8004ea2:	e5b3      	b.n	8004a0c <_svfprintf_r+0x24c>
 8004ea4:	9311      	str	r3, [sp, #68]	; 0x44
 8004ea6:	46ab      	mov	fp, r5
 8004ea8:	2a00      	cmp	r2, #0
 8004eaa:	f040 87e9 	bne.w	8005e80 <_svfprintf_r+0x16c0>
 8004eae:	9b07      	ldr	r3, [sp, #28]
 8004eb0:	f043 0310 	orr.w	r3, r3, #16
 8004eb4:	9307      	str	r3, [sp, #28]
 8004eb6:	9a07      	ldr	r2, [sp, #28]
 8004eb8:	f012 0320 	ands.w	r3, r2, #32
 8004ebc:	f000 832c 	beq.w	8005518 <_svfprintf_r+0xd58>
 8004ec0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004ec2:	3707      	adds	r7, #7
 8004ec4:	f027 0307 	bic.w	r3, r7, #7
 8004ec8:	2700      	movs	r7, #0
 8004eca:	f103 0108 	add.w	r1, r3, #8
 8004ece:	45bb      	cmp	fp, r7
 8004ed0:	910e      	str	r1, [sp, #56]	; 0x38
 8004ed2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004ed6:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004eda:	f2c0 8356 	blt.w	800558a <_svfprintf_r+0xdca>
 8004ede:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004ee2:	9307      	str	r3, [sp, #28]
 8004ee4:	ea54 0305 	orrs.w	r3, r4, r5
 8004ee8:	f47f ae18 	bne.w	8004b1c <_svfprintf_r+0x35c>
 8004eec:	f1bb 0f00 	cmp.w	fp, #0
 8004ef0:	f000 80f5 	beq.w	80050de <_svfprintf_r+0x91e>
 8004ef4:	2400      	movs	r4, #0
 8004ef6:	ae44      	add	r6, sp, #272	; 0x110
 8004ef8:	3430      	adds	r4, #48	; 0x30
 8004efa:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8004efe:	e627      	b.n	8004b50 <_svfprintf_r+0x390>
 8004f00:	9311      	str	r3, [sp, #68]	; 0x44
 8004f02:	46ab      	mov	fp, r5
 8004f04:	2a00      	cmp	r2, #0
 8004f06:	f040 87b7 	bne.w	8005e78 <_svfprintf_r+0x16b8>
 8004f0a:	9b07      	ldr	r3, [sp, #28]
 8004f0c:	48af      	ldr	r0, [pc, #700]	; (80051cc <_svfprintf_r+0xa0c>)
 8004f0e:	069d      	lsls	r5, r3, #26
 8004f10:	f140 80b5 	bpl.w	800507e <_svfprintf_r+0x8be>
 8004f14:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004f16:	3707      	adds	r7, #7
 8004f18:	f027 0307 	bic.w	r3, r7, #7
 8004f1c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004f20:	f103 0208 	add.w	r2, r3, #8
 8004f24:	920e      	str	r2, [sp, #56]	; 0x38
 8004f26:	9a07      	ldr	r2, [sp, #28]
 8004f28:	f012 0701 	ands.w	r7, r2, #1
 8004f2c:	f000 8239 	beq.w	80053a2 <_svfprintf_r+0xbe2>
 8004f30:	ea54 0305 	orrs.w	r3, r4, r5
 8004f34:	f000 8504 	beq.w	8005940 <_svfprintf_r+0x1180>
 8004f38:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8004f3c:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8004f40:	2700      	movs	r7, #0
 8004f42:	9a07      	ldr	r2, [sp, #28]
 8004f44:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004f48:	2330      	movs	r3, #48	; 0x30
 8004f4a:	45bb      	cmp	fp, r7
 8004f4c:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8004f50:	f042 0302 	orr.w	r3, r2, #2
 8004f54:	f2c0 86b6 	blt.w	8005cc4 <_svfprintf_r+0x1504>
 8004f58:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004f5c:	f043 0302 	orr.w	r3, r3, #2
 8004f60:	9307      	str	r3, [sp, #28]
 8004f62:	ae34      	add	r6, sp, #208	; 0xd0
 8004f64:	0923      	lsrs	r3, r4, #4
 8004f66:	f004 010f 	and.w	r1, r4, #15
 8004f6a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8004f6e:	092a      	lsrs	r2, r5, #4
 8004f70:	461c      	mov	r4, r3
 8004f72:	4615      	mov	r5, r2
 8004f74:	5c43      	ldrb	r3, [r0, r1]
 8004f76:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8004f7a:	ea54 0305 	orrs.w	r3, r4, r5
 8004f7e:	d1f1      	bne.n	8004f64 <_svfprintf_r+0x7a4>
 8004f80:	e5e6      	b.n	8004b50 <_svfprintf_r+0x390>
 8004f82:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004f84:	9311      	str	r3, [sp, #68]	; 0x44
 8004f86:	680a      	ldr	r2, [r1, #0]
 8004f88:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	460a      	mov	r2, r1
 8004f90:	461f      	mov	r7, r3
 8004f92:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004f96:	3204      	adds	r2, #4
 8004f98:	2301      	movs	r3, #1
 8004f9a:	9308      	str	r3, [sp, #32]
 8004f9c:	46bb      	mov	fp, r7
 8004f9e:	9713      	str	r7, [sp, #76]	; 0x4c
 8004fa0:	920e      	str	r2, [sp, #56]	; 0x38
 8004fa2:	930d      	str	r3, [sp, #52]	; 0x34
 8004fa4:	ae2a      	add	r6, sp, #168	; 0xa8
 8004fa6:	e5e1      	b.n	8004b6c <_svfprintf_r+0x3ac>
 8004fa8:	9311      	str	r3, [sp, #68]	; 0x44
 8004faa:	46ab      	mov	fp, r5
 8004fac:	2a00      	cmp	r2, #0
 8004fae:	f43f ad93 	beq.w	8004ad8 <_svfprintf_r+0x318>
 8004fb2:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004fb6:	e58f      	b.n	8004ad8 <_svfprintf_r+0x318>
 8004fb8:	9b07      	ldr	r3, [sp, #28]
 8004fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fbe:	9307      	str	r3, [sp, #28]
 8004fc0:	f898 3000 	ldrb.w	r3, [r8]
 8004fc4:	e456      	b.n	8004874 <_svfprintf_r+0xb4>
 8004fc6:	f898 3000 	ldrb.w	r3, [r8]
 8004fca:	2900      	cmp	r1, #0
 8004fcc:	f47f ac52 	bne.w	8004874 <_svfprintf_r+0xb4>
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	2120      	movs	r1, #32
 8004fd4:	e44e      	b.n	8004874 <_svfprintf_r+0xb4>
 8004fd6:	9b07      	ldr	r3, [sp, #28]
 8004fd8:	f043 0301 	orr.w	r3, r3, #1
 8004fdc:	9307      	str	r3, [sp, #28]
 8004fde:	f898 3000 	ldrb.w	r3, [r8]
 8004fe2:	e447      	b.n	8004874 <_svfprintf_r+0xb4>
 8004fe4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	930c      	str	r3, [sp, #48]	; 0x30
 8004fea:	4618      	mov	r0, r3
 8004fec:	2800      	cmp	r0, #0
 8004fee:	4623      	mov	r3, r4
 8004ff0:	f103 0304 	add.w	r3, r3, #4
 8004ff4:	f6ff aca0 	blt.w	8004938 <_svfprintf_r+0x178>
 8004ff8:	930e      	str	r3, [sp, #56]	; 0x38
 8004ffa:	f898 3000 	ldrb.w	r3, [r8]
 8004ffe:	e439      	b.n	8004874 <_svfprintf_r+0xb4>
 8005000:	f898 3000 	ldrb.w	r3, [r8]
 8005004:	2201      	movs	r2, #1
 8005006:	212b      	movs	r1, #43	; 0x2b
 8005008:	e434      	b.n	8004874 <_svfprintf_r+0xb4>
 800500a:	9b07      	ldr	r3, [sp, #28]
 800500c:	f043 0320 	orr.w	r3, r3, #32
 8005010:	9307      	str	r3, [sp, #28]
 8005012:	f898 3000 	ldrb.w	r3, [r8]
 8005016:	e42d      	b.n	8004874 <_svfprintf_r+0xb4>
 8005018:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800501a:	9311      	str	r3, [sp, #68]	; 0x44
 800501c:	6816      	ldr	r6, [r2, #0]
 800501e:	2400      	movs	r4, #0
 8005020:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 8005024:	1d17      	adds	r7, r2, #4
 8005026:	2e00      	cmp	r6, #0
 8005028:	f000 8621 	beq.w	8005c6e <_svfprintf_r+0x14ae>
 800502c:	2d00      	cmp	r5, #0
 800502e:	f2c0 8566 	blt.w	8005afe <_svfprintf_r+0x133e>
 8005032:	462a      	mov	r2, r5
 8005034:	4621      	mov	r1, r4
 8005036:	4630      	mov	r0, r6
 8005038:	f004 faca 	bl	80095d0 <memchr>
 800503c:	2800      	cmp	r0, #0
 800503e:	f000 866b 	beq.w	8005d18 <_svfprintf_r+0x1558>
 8005042:	1b83      	subs	r3, r0, r6
 8005044:	930d      	str	r3, [sp, #52]	; 0x34
 8005046:	46a3      	mov	fp, r4
 8005048:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800504c:	970e      	str	r7, [sp, #56]	; 0x38
 800504e:	9308      	str	r3, [sp, #32]
 8005050:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8005054:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005058:	e584      	b.n	8004b64 <_svfprintf_r+0x3a4>
 800505a:	9311      	str	r3, [sp, #68]	; 0x44
 800505c:	46ab      	mov	fp, r5
 800505e:	2a00      	cmp	r2, #0
 8005060:	f43f af29 	beq.w	8004eb6 <_svfprintf_r+0x6f6>
 8005064:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005068:	e725      	b.n	8004eb6 <_svfprintf_r+0x6f6>
 800506a:	9311      	str	r3, [sp, #68]	; 0x44
 800506c:	46ab      	mov	fp, r5
 800506e:	2a00      	cmp	r2, #0
 8005070:	f040 8716 	bne.w	8005ea0 <_svfprintf_r+0x16e0>
 8005074:	9b07      	ldr	r3, [sp, #28]
 8005076:	4856      	ldr	r0, [pc, #344]	; (80051d0 <_svfprintf_r+0xa10>)
 8005078:	069d      	lsls	r5, r3, #26
 800507a:	f53f af4b 	bmi.w	8004f14 <_svfprintf_r+0x754>
 800507e:	9b07      	ldr	r3, [sp, #28]
 8005080:	06dc      	lsls	r4, r3, #27
 8005082:	f140 8440 	bpl.w	8005906 <_svfprintf_r+0x1146>
 8005086:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005088:	4613      	mov	r3, r2
 800508a:	3304      	adds	r3, #4
 800508c:	6814      	ldr	r4, [r2, #0]
 800508e:	930e      	str	r3, [sp, #56]	; 0x38
 8005090:	2500      	movs	r5, #0
 8005092:	e748      	b.n	8004f26 <_svfprintf_r+0x766>
 8005094:	f898 3000 	ldrb.w	r3, [r8]
 8005098:	2b6c      	cmp	r3, #108	; 0x6c
 800509a:	f000 84c4 	beq.w	8005a26 <_svfprintf_r+0x1266>
 800509e:	9807      	ldr	r0, [sp, #28]
 80050a0:	f040 0010 	orr.w	r0, r0, #16
 80050a4:	9007      	str	r0, [sp, #28]
 80050a6:	f7ff bbe5 	b.w	8004874 <_svfprintf_r+0xb4>
 80050aa:	2a00      	cmp	r2, #0
 80050ac:	f040 86f4 	bne.w	8005e98 <_svfprintf_r+0x16d8>
 80050b0:	9b07      	ldr	r3, [sp, #28]
 80050b2:	069b      	lsls	r3, r3, #26
 80050b4:	f140 8357 	bpl.w	8005766 <_svfprintf_r+0xfa6>
 80050b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050bc:	6813      	ldr	r3, [r2, #0]
 80050be:	17cd      	asrs	r5, r1, #31
 80050c0:	4608      	mov	r0, r1
 80050c2:	3204      	adds	r2, #4
 80050c4:	4629      	mov	r1, r5
 80050c6:	920e      	str	r2, [sp, #56]	; 0x38
 80050c8:	e9c3 0100 	strd	r0, r1, [r3]
 80050cc:	f7ff bb9f 	b.w	800480e <_svfprintf_r+0x4e>
 80050d0:	483f      	ldr	r0, [pc, #252]	; (80051d0 <_svfprintf_r+0xa10>)
 80050d2:	9211      	str	r2, [sp, #68]	; 0x44
 80050d4:	f1bb 0f00 	cmp.w	fp, #0
 80050d8:	f040 8174 	bne.w	80053c4 <_svfprintf_r+0xc04>
 80050dc:	465f      	mov	r7, fp
 80050de:	f04f 0b00 	mov.w	fp, #0
 80050e2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80050e6:	ae34      	add	r6, sp, #208	; 0xd0
 80050e8:	e535      	b.n	8004b56 <_svfprintf_r+0x396>
 80050ea:	9311      	str	r3, [sp, #68]	; 0x44
 80050ec:	2a00      	cmp	r2, #0
 80050ee:	f040 86cf 	bne.w	8005e90 <_svfprintf_r+0x16d0>
 80050f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80050f4:	2a00      	cmp	r2, #0
 80050f6:	f43f ac56 	beq.w	80049a6 <_svfprintf_r+0x1e6>
 80050fa:	2300      	movs	r3, #0
 80050fc:	2101      	movs	r1, #1
 80050fe:	461f      	mov	r7, r3
 8005100:	9108      	str	r1, [sp, #32]
 8005102:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8005106:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800510a:	469b      	mov	fp, r3
 800510c:	9313      	str	r3, [sp, #76]	; 0x4c
 800510e:	910d      	str	r1, [sp, #52]	; 0x34
 8005110:	ae2a      	add	r6, sp, #168	; 0xa8
 8005112:	e52b      	b.n	8004b6c <_svfprintf_r+0x3ac>
 8005114:	f1bb 0f00 	cmp.w	fp, #0
 8005118:	f000 8616 	beq.w	8005d48 <_svfprintf_r+0x1588>
 800511c:	2700      	movs	r7, #0
 800511e:	2400      	movs	r4, #0
 8005120:	2500      	movs	r5, #0
 8005122:	e473      	b.n	8004a0c <_svfprintf_r+0x24c>
 8005124:	482a      	ldr	r0, [pc, #168]	; (80051d0 <_svfprintf_r+0xa10>)
 8005126:	9307      	str	r3, [sp, #28]
 8005128:	9211      	str	r2, [sp, #68]	; 0x44
 800512a:	ea54 0305 	orrs.w	r3, r4, r5
 800512e:	970e      	str	r7, [sp, #56]	; 0x38
 8005130:	f04f 0700 	mov.w	r7, #0
 8005134:	f47f af15 	bne.w	8004f62 <_svfprintf_r+0x7a2>
 8005138:	2400      	movs	r4, #0
 800513a:	2500      	movs	r5, #0
 800513c:	e711      	b.n	8004f62 <_svfprintf_r+0x7a2>
 800513e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005140:	e564      	b.n	8004c0c <_svfprintf_r+0x44c>
 8005142:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005144:	2b65      	cmp	r3, #101	; 0x65
 8005146:	f340 80aa 	ble.w	800529e <_svfprintf_r+0xade>
 800514a:	2200      	movs	r2, #0
 800514c:	2300      	movs	r3, #0
 800514e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005152:	f7ff f815 	bl	8004180 <__aeabi_dcmpeq>
 8005156:	2800      	cmp	r0, #0
 8005158:	f000 8136 	beq.w	80053c8 <_svfprintf_r+0xc08>
 800515c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800515e:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <_svfprintf_r+0xa14>)
 8005160:	f8c9 2000 	str.w	r2, [r9]
 8005164:	3301      	adds	r3, #1
 8005166:	3401      	adds	r4, #1
 8005168:	2201      	movs	r2, #1
 800516a:	2b07      	cmp	r3, #7
 800516c:	9429      	str	r4, [sp, #164]	; 0xa4
 800516e:	9328      	str	r3, [sp, #160]	; 0xa0
 8005170:	f8c9 2004 	str.w	r2, [r9, #4]
 8005174:	f300 83f0 	bgt.w	8005958 <_svfprintf_r+0x1198>
 8005178:	f109 0908 	add.w	r9, r9, #8
 800517c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800517e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005180:	4293      	cmp	r3, r2
 8005182:	db03      	blt.n	800518c <_svfprintf_r+0x9cc>
 8005184:	9b07      	ldr	r3, [sp, #28]
 8005186:	07db      	lsls	r3, r3, #31
 8005188:	f57f adb0 	bpl.w	8004cec <_svfprintf_r+0x52c>
 800518c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800518e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005190:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005192:	f8c9 2000 	str.w	r2, [r9]
 8005196:	3301      	adds	r3, #1
 8005198:	440c      	add	r4, r1
 800519a:	2b07      	cmp	r3, #7
 800519c:	9429      	str	r4, [sp, #164]	; 0xa4
 800519e:	f8c9 1004 	str.w	r1, [r9, #4]
 80051a2:	9328      	str	r3, [sp, #160]	; 0xa0
 80051a4:	f300 8449 	bgt.w	8005a3a <_svfprintf_r+0x127a>
 80051a8:	f109 0908 	add.w	r9, r9, #8
 80051ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051ae:	1e5d      	subs	r5, r3, #1
 80051b0:	2d00      	cmp	r5, #0
 80051b2:	f77f ad9b 	ble.w	8004cec <_svfprintf_r+0x52c>
 80051b6:	4a08      	ldr	r2, [pc, #32]	; (80051d8 <_svfprintf_r+0xa18>)
 80051b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80051ba:	920f      	str	r2, [sp, #60]	; 0x3c
 80051bc:	2d10      	cmp	r5, #16
 80051be:	f340 81e9 	ble.w	8005594 <_svfprintf_r+0xdd4>
 80051c2:	2610      	movs	r6, #16
 80051c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80051c6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80051ca:	e00d      	b.n	80051e8 <_svfprintf_r+0xa28>
 80051cc:	0800ad6c 	.word	0x0800ad6c
 80051d0:	0800ad80 	.word	0x0800ad80
 80051d4:	0800ad9c 	.word	0x0800ad9c
 80051d8:	0800ad4c 	.word	0x0800ad4c
 80051dc:	f109 0908 	add.w	r9, r9, #8
 80051e0:	3d10      	subs	r5, #16
 80051e2:	2d10      	cmp	r5, #16
 80051e4:	f340 81d6 	ble.w	8005594 <_svfprintf_r+0xdd4>
 80051e8:	3301      	adds	r3, #1
 80051ea:	3410      	adds	r4, #16
 80051ec:	2b07      	cmp	r3, #7
 80051ee:	9429      	str	r4, [sp, #164]	; 0xa4
 80051f0:	9328      	str	r3, [sp, #160]	; 0xa0
 80051f2:	f8c9 a000 	str.w	sl, [r9]
 80051f6:	f8c9 6004 	str.w	r6, [r9, #4]
 80051fa:	ddef      	ble.n	80051dc <_svfprintf_r+0xa1c>
 80051fc:	aa27      	add	r2, sp, #156	; 0x9c
 80051fe:	4659      	mov	r1, fp
 8005200:	4638      	mov	r0, r7
 8005202:	f004 fff3 	bl	800a1ec <__ssprint_r>
 8005206:	2800      	cmp	r0, #0
 8005208:	f47f abd4 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 800520c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800520e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005210:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005214:	e7e4      	b.n	80051e0 <_svfprintf_r+0xa20>
 8005216:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005218:	9a08      	ldr	r2, [sp, #32]
 800521a:	1a9f      	subs	r7, r3, r2
 800521c:	2f00      	cmp	r7, #0
 800521e:	f77f ad19 	ble.w	8004c54 <_svfprintf_r+0x494>
 8005222:	4abc      	ldr	r2, [pc, #752]	; (8005514 <_svfprintf_r+0xd54>)
 8005224:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005226:	920f      	str	r2, [sp, #60]	; 0x3c
 8005228:	2f10      	cmp	r7, #16
 800522a:	dd2b      	ble.n	8005284 <_svfprintf_r+0xac4>
 800522c:	464a      	mov	r2, r9
 800522e:	4621      	mov	r1, r4
 8005230:	46b9      	mov	r9, r7
 8005232:	2510      	movs	r5, #16
 8005234:	4637      	mov	r7, r6
 8005236:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005238:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800523a:	e006      	b.n	800524a <_svfprintf_r+0xa8a>
 800523c:	f1a9 0910 	sub.w	r9, r9, #16
 8005240:	f1b9 0f10 	cmp.w	r9, #16
 8005244:	f102 0208 	add.w	r2, r2, #8
 8005248:	dd18      	ble.n	800527c <_svfprintf_r+0xabc>
 800524a:	3301      	adds	r3, #1
 800524c:	3110      	adds	r1, #16
 800524e:	2b07      	cmp	r3, #7
 8005250:	9129      	str	r1, [sp, #164]	; 0xa4
 8005252:	9328      	str	r3, [sp, #160]	; 0xa0
 8005254:	f8c2 a000 	str.w	sl, [r2]
 8005258:	6055      	str	r5, [r2, #4]
 800525a:	ddef      	ble.n	800523c <_svfprintf_r+0xa7c>
 800525c:	aa27      	add	r2, sp, #156	; 0x9c
 800525e:	4631      	mov	r1, r6
 8005260:	4620      	mov	r0, r4
 8005262:	f004 ffc3 	bl	800a1ec <__ssprint_r>
 8005266:	2800      	cmp	r0, #0
 8005268:	f47f aba4 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 800526c:	f1a9 0910 	sub.w	r9, r9, #16
 8005270:	f1b9 0f10 	cmp.w	r9, #16
 8005274:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8005276:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005278:	aa34      	add	r2, sp, #208	; 0xd0
 800527a:	dce6      	bgt.n	800524a <_svfprintf_r+0xa8a>
 800527c:	463e      	mov	r6, r7
 800527e:	460c      	mov	r4, r1
 8005280:	464f      	mov	r7, r9
 8005282:	4691      	mov	r9, r2
 8005284:	3301      	adds	r3, #1
 8005286:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005288:	9328      	str	r3, [sp, #160]	; 0xa0
 800528a:	443c      	add	r4, r7
 800528c:	2b07      	cmp	r3, #7
 800528e:	9429      	str	r4, [sp, #164]	; 0xa4
 8005290:	e889 0084 	stmia.w	r9, {r2, r7}
 8005294:	f300 823d 	bgt.w	8005712 <_svfprintf_r+0xf52>
 8005298:	f109 0908 	add.w	r9, r9, #8
 800529c:	e4da      	b.n	8004c54 <_svfprintf_r+0x494>
 800529e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052a0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	f340 820a 	ble.w	80056bc <_svfprintf_r+0xefc>
 80052a8:	3501      	adds	r5, #1
 80052aa:	3401      	adds	r4, #1
 80052ac:	2301      	movs	r3, #1
 80052ae:	2d07      	cmp	r5, #7
 80052b0:	9429      	str	r4, [sp, #164]	; 0xa4
 80052b2:	9528      	str	r5, [sp, #160]	; 0xa0
 80052b4:	f8c9 6000 	str.w	r6, [r9]
 80052b8:	f8c9 3004 	str.w	r3, [r9, #4]
 80052bc:	f300 820f 	bgt.w	80056de <_svfprintf_r+0xf1e>
 80052c0:	f109 0908 	add.w	r9, r9, #8
 80052c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80052c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052c8:	f8c9 3000 	str.w	r3, [r9]
 80052cc:	3501      	adds	r5, #1
 80052ce:	4414      	add	r4, r2
 80052d0:	2d07      	cmp	r5, #7
 80052d2:	9429      	str	r4, [sp, #164]	; 0xa4
 80052d4:	9528      	str	r5, [sp, #160]	; 0xa0
 80052d6:	f8c9 2004 	str.w	r2, [r9, #4]
 80052da:	f300 820d 	bgt.w	80056f8 <_svfprintf_r+0xf38>
 80052de:	f109 0908 	add.w	r9, r9, #8
 80052e2:	2300      	movs	r3, #0
 80052e4:	2200      	movs	r2, #0
 80052e6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80052ea:	f7fe ff49 	bl	8004180 <__aeabi_dcmpeq>
 80052ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052f0:	2800      	cmp	r0, #0
 80052f2:	f040 80c3 	bne.w	800547c <_svfprintf_r+0xcbc>
 80052f6:	3b01      	subs	r3, #1
 80052f8:	3501      	adds	r5, #1
 80052fa:	3601      	adds	r6, #1
 80052fc:	441c      	add	r4, r3
 80052fe:	2d07      	cmp	r5, #7
 8005300:	9528      	str	r5, [sp, #160]	; 0xa0
 8005302:	9429      	str	r4, [sp, #164]	; 0xa4
 8005304:	f8c9 6000 	str.w	r6, [r9]
 8005308:	f8c9 3004 	str.w	r3, [r9, #4]
 800530c:	f300 80f5 	bgt.w	80054fa <_svfprintf_r+0xd3a>
 8005310:	f109 0908 	add.w	r9, r9, #8
 8005314:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005316:	f8c9 2004 	str.w	r2, [r9, #4]
 800531a:	3501      	adds	r5, #1
 800531c:	4414      	add	r4, r2
 800531e:	ab23      	add	r3, sp, #140	; 0x8c
 8005320:	2d07      	cmp	r5, #7
 8005322:	9429      	str	r4, [sp, #164]	; 0xa4
 8005324:	9528      	str	r5, [sp, #160]	; 0xa0
 8005326:	f8c9 3000 	str.w	r3, [r9]
 800532a:	f77f acdd 	ble.w	8004ce8 <_svfprintf_r+0x528>
 800532e:	aa27      	add	r2, sp, #156	; 0x9c
 8005330:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005332:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005334:	f004 ff5a 	bl	800a1ec <__ssprint_r>
 8005338:	2800      	cmp	r0, #0
 800533a:	f47f ab3b 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 800533e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005340:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005344:	e4d2      	b.n	8004cec <_svfprintf_r+0x52c>
 8005346:	aa27      	add	r2, sp, #156	; 0x9c
 8005348:	9909      	ldr	r1, [sp, #36]	; 0x24
 800534a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800534c:	f004 ff4e 	bl	800a1ec <__ssprint_r>
 8005350:	2800      	cmp	r0, #0
 8005352:	f43f ad19 	beq.w	8004d88 <_svfprintf_r+0x5c8>
 8005356:	f7ff bb2d 	b.w	80049b4 <_svfprintf_r+0x1f4>
 800535a:	aa27      	add	r2, sp, #156	; 0x9c
 800535c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800535e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005360:	f004 ff44 	bl	800a1ec <__ssprint_r>
 8005364:	2800      	cmp	r0, #0
 8005366:	f47f ab25 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 800536a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800536c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005370:	e4a9      	b.n	8004cc6 <_svfprintf_r+0x506>
 8005372:	aa27      	add	r2, sp, #156	; 0x9c
 8005374:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005376:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005378:	f004 ff38 	bl	800a1ec <__ssprint_r>
 800537c:	2800      	cmp	r0, #0
 800537e:	f47f ab19 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8005382:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005384:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005388:	e450      	b.n	8004c2c <_svfprintf_r+0x46c>
 800538a:	aa27      	add	r2, sp, #156	; 0x9c
 800538c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800538e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005390:	f004 ff2c 	bl	800a1ec <__ssprint_r>
 8005394:	2800      	cmp	r0, #0
 8005396:	f47f ab0d 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 800539a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800539c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80053a0:	e454      	b.n	8004c4c <_svfprintf_r+0x48c>
 80053a2:	f1bb 0f00 	cmp.w	fp, #0
 80053a6:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80053aa:	f2c0 82e1 	blt.w	8005970 <_svfprintf_r+0x11b0>
 80053ae:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80053b2:	9307      	str	r3, [sp, #28]
 80053b4:	ea54 0305 	orrs.w	r3, r4, r5
 80053b8:	f47f add3 	bne.w	8004f62 <_svfprintf_r+0x7a2>
 80053bc:	f1bb 0f00 	cmp.w	fp, #0
 80053c0:	f43f ae8c 	beq.w	80050dc <_svfprintf_r+0x91c>
 80053c4:	2700      	movs	r7, #0
 80053c6:	e6b7      	b.n	8005138 <_svfprintf_r+0x978>
 80053c8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80053ca:	2d00      	cmp	r5, #0
 80053cc:	f340 82d3 	ble.w	8005976 <_svfprintf_r+0x11b6>
 80053d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80053d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053d4:	4293      	cmp	r3, r2
 80053d6:	bfa8      	it	ge
 80053d8:	4613      	movge	r3, r2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	461d      	mov	r5, r3
 80053de:	dd0d      	ble.n	80053fc <_svfprintf_r+0xc3c>
 80053e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80053e2:	f8c9 6000 	str.w	r6, [r9]
 80053e6:	3301      	adds	r3, #1
 80053e8:	442c      	add	r4, r5
 80053ea:	2b07      	cmp	r3, #7
 80053ec:	9429      	str	r4, [sp, #164]	; 0xa4
 80053ee:	f8c9 5004 	str.w	r5, [r9, #4]
 80053f2:	9328      	str	r3, [sp, #160]	; 0xa0
 80053f4:	f300 83ae 	bgt.w	8005b54 <_svfprintf_r+0x1394>
 80053f8:	f109 0908 	add.w	r9, r9, #8
 80053fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80053fe:	2d00      	cmp	r5, #0
 8005400:	bfa8      	it	ge
 8005402:	1b5b      	subge	r3, r3, r5
 8005404:	2b00      	cmp	r3, #0
 8005406:	461d      	mov	r5, r3
 8005408:	f340 80f8 	ble.w	80055fc <_svfprintf_r+0xe3c>
 800540c:	4a41      	ldr	r2, [pc, #260]	; (8005514 <_svfprintf_r+0xd54>)
 800540e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005410:	920f      	str	r2, [sp, #60]	; 0x3c
 8005412:	2d10      	cmp	r5, #16
 8005414:	f340 8285 	ble.w	8005922 <_svfprintf_r+0x1162>
 8005418:	4622      	mov	r2, r4
 800541a:	2710      	movs	r7, #16
 800541c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005420:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005422:	e005      	b.n	8005430 <_svfprintf_r+0xc70>
 8005424:	f109 0908 	add.w	r9, r9, #8
 8005428:	3d10      	subs	r5, #16
 800542a:	2d10      	cmp	r5, #16
 800542c:	f340 8278 	ble.w	8005920 <_svfprintf_r+0x1160>
 8005430:	3301      	adds	r3, #1
 8005432:	3210      	adds	r2, #16
 8005434:	2b07      	cmp	r3, #7
 8005436:	9229      	str	r2, [sp, #164]	; 0xa4
 8005438:	9328      	str	r3, [sp, #160]	; 0xa0
 800543a:	f8c9 a000 	str.w	sl, [r9]
 800543e:	f8c9 7004 	str.w	r7, [r9, #4]
 8005442:	ddef      	ble.n	8005424 <_svfprintf_r+0xc64>
 8005444:	aa27      	add	r2, sp, #156	; 0x9c
 8005446:	4621      	mov	r1, r4
 8005448:	4658      	mov	r0, fp
 800544a:	f004 fecf 	bl	800a1ec <__ssprint_r>
 800544e:	2800      	cmp	r0, #0
 8005450:	f47f aab0 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8005454:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005456:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005458:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800545c:	e7e4      	b.n	8005428 <_svfprintf_r+0xc68>
 800545e:	aa27      	add	r2, sp, #156	; 0x9c
 8005460:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005462:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005464:	f004 fec2 	bl	800a1ec <__ssprint_r>
 8005468:	2800      	cmp	r0, #0
 800546a:	f47f aaa3 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 800546e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005472:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005474:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005478:	f7ff bbc8 	b.w	8004c0c <_svfprintf_r+0x44c>
 800547c:	1e5e      	subs	r6, r3, #1
 800547e:	2e00      	cmp	r6, #0
 8005480:	f77f af48 	ble.w	8005314 <_svfprintf_r+0xb54>
 8005484:	4b23      	ldr	r3, [pc, #140]	; (8005514 <_svfprintf_r+0xd54>)
 8005486:	930f      	str	r3, [sp, #60]	; 0x3c
 8005488:	2e10      	cmp	r6, #16
 800548a:	dd2c      	ble.n	80054e6 <_svfprintf_r+0xd26>
 800548c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8005490:	2710      	movs	r7, #16
 8005492:	46b0      	mov	r8, r6
 8005494:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005498:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800549a:	e006      	b.n	80054aa <_svfprintf_r+0xcea>
 800549c:	f1a8 0810 	sub.w	r8, r8, #16
 80054a0:	f1b8 0f10 	cmp.w	r8, #16
 80054a4:	f109 0908 	add.w	r9, r9, #8
 80054a8:	dd1a      	ble.n	80054e0 <_svfprintf_r+0xd20>
 80054aa:	3501      	adds	r5, #1
 80054ac:	3410      	adds	r4, #16
 80054ae:	2d07      	cmp	r5, #7
 80054b0:	9429      	str	r4, [sp, #164]	; 0xa4
 80054b2:	9528      	str	r5, [sp, #160]	; 0xa0
 80054b4:	f8c9 a000 	str.w	sl, [r9]
 80054b8:	f8c9 7004 	str.w	r7, [r9, #4]
 80054bc:	ddee      	ble.n	800549c <_svfprintf_r+0xcdc>
 80054be:	aa27      	add	r2, sp, #156	; 0x9c
 80054c0:	4631      	mov	r1, r6
 80054c2:	4658      	mov	r0, fp
 80054c4:	f004 fe92 	bl	800a1ec <__ssprint_r>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	f47f aa73 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 80054ce:	f1a8 0810 	sub.w	r8, r8, #16
 80054d2:	f1b8 0f10 	cmp.w	r8, #16
 80054d6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80054d8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80054da:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80054de:	dce4      	bgt.n	80054aa <_svfprintf_r+0xcea>
 80054e0:	4646      	mov	r6, r8
 80054e2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80054e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054e8:	3501      	adds	r5, #1
 80054ea:	4434      	add	r4, r6
 80054ec:	2d07      	cmp	r5, #7
 80054ee:	9429      	str	r4, [sp, #164]	; 0xa4
 80054f0:	9528      	str	r5, [sp, #160]	; 0xa0
 80054f2:	e889 0048 	stmia.w	r9, {r3, r6}
 80054f6:	f77f af0b 	ble.w	8005310 <_svfprintf_r+0xb50>
 80054fa:	aa27      	add	r2, sp, #156	; 0x9c
 80054fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005500:	f004 fe74 	bl	800a1ec <__ssprint_r>
 8005504:	2800      	cmp	r0, #0
 8005506:	f47f aa55 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 800550a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800550c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800550e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005512:	e6ff      	b.n	8005314 <_svfprintf_r+0xb54>
 8005514:	0800ad4c 	.word	0x0800ad4c
 8005518:	9907      	ldr	r1, [sp, #28]
 800551a:	f011 0210 	ands.w	r2, r1, #16
 800551e:	f000 81d5 	beq.w	80058cc <_svfprintf_r+0x110c>
 8005522:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005524:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005528:	f1bb 0f00 	cmp.w	fp, #0
 800552c:	6804      	ldr	r4, [r0, #0]
 800552e:	f100 0704 	add.w	r7, r0, #4
 8005532:	f04f 0500 	mov.w	r5, #0
 8005536:	db26      	blt.n	8005586 <_svfprintf_r+0xdc6>
 8005538:	460a      	mov	r2, r1
 800553a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800553e:	9207      	str	r2, [sp, #28]
 8005540:	ea54 0205 	orrs.w	r2, r4, r5
 8005544:	970e      	str	r7, [sp, #56]	; 0x38
 8005546:	461f      	mov	r7, r3
 8005548:	f47f aae8 	bne.w	8004b1c <_svfprintf_r+0x35c>
 800554c:	e4ce      	b.n	8004eec <_svfprintf_r+0x72c>
 800554e:	9b07      	ldr	r3, [sp, #28]
 8005550:	06d8      	lsls	r0, r3, #27
 8005552:	d42a      	bmi.n	80055aa <_svfprintf_r+0xdea>
 8005554:	9b07      	ldr	r3, [sp, #28]
 8005556:	0659      	lsls	r1, r3, #25
 8005558:	d527      	bpl.n	80055aa <_svfprintf_r+0xdea>
 800555a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800555c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8005560:	3104      	adds	r1, #4
 8005562:	17e5      	asrs	r5, r4, #31
 8005564:	4622      	mov	r2, r4
 8005566:	462b      	mov	r3, r5
 8005568:	910e      	str	r1, [sp, #56]	; 0x38
 800556a:	f7ff bac4 	b.w	8004af6 <_svfprintf_r+0x336>
 800556e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005570:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005574:	f1bb 0f00 	cmp.w	fp, #0
 8005578:	680c      	ldr	r4, [r1, #0]
 800557a:	f101 0704 	add.w	r7, r1, #4
 800557e:	f04f 0500 	mov.w	r5, #0
 8005582:	f280 824e 	bge.w	8005a22 <_svfprintf_r+0x1262>
 8005586:	970e      	str	r7, [sp, #56]	; 0x38
 8005588:	461f      	mov	r7, r3
 800558a:	ea54 0305 	orrs.w	r3, r4, r5
 800558e:	f47f aac5 	bne.w	8004b1c <_svfprintf_r+0x35c>
 8005592:	e4b0      	b.n	8004ef6 <_svfprintf_r+0x736>
 8005594:	3301      	adds	r3, #1
 8005596:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005598:	9328      	str	r3, [sp, #160]	; 0xa0
 800559a:	442c      	add	r4, r5
 800559c:	2b07      	cmp	r3, #7
 800559e:	9429      	str	r4, [sp, #164]	; 0xa4
 80055a0:	e889 0024 	stmia.w	r9, {r2, r5}
 80055a4:	f77f aba0 	ble.w	8004ce8 <_svfprintf_r+0x528>
 80055a8:	e6c1      	b.n	800532e <_svfprintf_r+0xb6e>
 80055aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055ac:	6814      	ldr	r4, [r2, #0]
 80055ae:	4613      	mov	r3, r2
 80055b0:	3304      	adds	r3, #4
 80055b2:	17e5      	asrs	r5, r4, #31
 80055b4:	4622      	mov	r2, r4
 80055b6:	930e      	str	r3, [sp, #56]	; 0x38
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	462b      	mov	r3, r5
 80055bc:	f173 0300 	sbcs.w	r3, r3, #0
 80055c0:	f6bf aa9e 	bge.w	8004b00 <_svfprintf_r+0x340>
 80055c4:	4264      	negs	r4, r4
 80055c6:	f04f 072d 	mov.w	r7, #45	; 0x2d
 80055ca:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80055ce:	f1bb 0f00 	cmp.w	fp, #0
 80055d2:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80055d6:	f6ff aaa1 	blt.w	8004b1c <_svfprintf_r+0x35c>
 80055da:	9b07      	ldr	r3, [sp, #28]
 80055dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055e0:	9307      	str	r3, [sp, #28]
 80055e2:	f7ff ba9b 	b.w	8004b1c <_svfprintf_r+0x35c>
 80055e6:	aa27      	add	r2, sp, #156	; 0x9c
 80055e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80055ec:	f004 fdfe 	bl	800a1ec <__ssprint_r>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	f47f a9df 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 80055f6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80055f8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80055fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80055fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005600:	4432      	add	r2, r6
 8005602:	4617      	mov	r7, r2
 8005604:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005606:	4293      	cmp	r3, r2
 8005608:	db47      	blt.n	800569a <_svfprintf_r+0xeda>
 800560a:	9a07      	ldr	r2, [sp, #28]
 800560c:	07d5      	lsls	r5, r2, #31
 800560e:	d444      	bmi.n	800569a <_svfprintf_r+0xeda>
 8005610:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005612:	440e      	add	r6, r1
 8005614:	1bf5      	subs	r5, r6, r7
 8005616:	1acb      	subs	r3, r1, r3
 8005618:	429d      	cmp	r5, r3
 800561a:	bfa8      	it	ge
 800561c:	461d      	movge	r5, r3
 800561e:	2d00      	cmp	r5, #0
 8005620:	462e      	mov	r6, r5
 8005622:	dd0d      	ble.n	8005640 <_svfprintf_r+0xe80>
 8005624:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8005626:	f8c9 7000 	str.w	r7, [r9]
 800562a:	3201      	adds	r2, #1
 800562c:	442c      	add	r4, r5
 800562e:	2a07      	cmp	r2, #7
 8005630:	9429      	str	r4, [sp, #164]	; 0xa4
 8005632:	f8c9 5004 	str.w	r5, [r9, #4]
 8005636:	9228      	str	r2, [sp, #160]	; 0xa0
 8005638:	f300 830a 	bgt.w	8005c50 <_svfprintf_r+0x1490>
 800563c:	f109 0908 	add.w	r9, r9, #8
 8005640:	2e00      	cmp	r6, #0
 8005642:	bfac      	ite	ge
 8005644:	1b9d      	subge	r5, r3, r6
 8005646:	461d      	movlt	r5, r3
 8005648:	2d00      	cmp	r5, #0
 800564a:	f77f ab4f 	ble.w	8004cec <_svfprintf_r+0x52c>
 800564e:	4abb      	ldr	r2, [pc, #748]	; (800593c <_svfprintf_r+0x117c>)
 8005650:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005652:	920f      	str	r2, [sp, #60]	; 0x3c
 8005654:	2d10      	cmp	r5, #16
 8005656:	dd9d      	ble.n	8005594 <_svfprintf_r+0xdd4>
 8005658:	2610      	movs	r6, #16
 800565a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800565c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8005660:	e004      	b.n	800566c <_svfprintf_r+0xeac>
 8005662:	f109 0908 	add.w	r9, r9, #8
 8005666:	3d10      	subs	r5, #16
 8005668:	2d10      	cmp	r5, #16
 800566a:	dd93      	ble.n	8005594 <_svfprintf_r+0xdd4>
 800566c:	3301      	adds	r3, #1
 800566e:	3410      	adds	r4, #16
 8005670:	2b07      	cmp	r3, #7
 8005672:	9429      	str	r4, [sp, #164]	; 0xa4
 8005674:	9328      	str	r3, [sp, #160]	; 0xa0
 8005676:	f8c9 a000 	str.w	sl, [r9]
 800567a:	f8c9 6004 	str.w	r6, [r9, #4]
 800567e:	ddf0      	ble.n	8005662 <_svfprintf_r+0xea2>
 8005680:	aa27      	add	r2, sp, #156	; 0x9c
 8005682:	4659      	mov	r1, fp
 8005684:	4638      	mov	r0, r7
 8005686:	f004 fdb1 	bl	800a1ec <__ssprint_r>
 800568a:	2800      	cmp	r0, #0
 800568c:	f47f a992 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8005690:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005692:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005694:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005698:	e7e5      	b.n	8005666 <_svfprintf_r+0xea6>
 800569a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800569c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800569e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80056a0:	f8c9 1000 	str.w	r1, [r9]
 80056a4:	3201      	adds	r2, #1
 80056a6:	4404      	add	r4, r0
 80056a8:	2a07      	cmp	r2, #7
 80056aa:	9429      	str	r4, [sp, #164]	; 0xa4
 80056ac:	f8c9 0004 	str.w	r0, [r9, #4]
 80056b0:	9228      	str	r2, [sp, #160]	; 0xa0
 80056b2:	f300 82b9 	bgt.w	8005c28 <_svfprintf_r+0x1468>
 80056b6:	f109 0908 	add.w	r9, r9, #8
 80056ba:	e7a9      	b.n	8005610 <_svfprintf_r+0xe50>
 80056bc:	9b07      	ldr	r3, [sp, #28]
 80056be:	07d8      	lsls	r0, r3, #31
 80056c0:	f53f adf2 	bmi.w	80052a8 <_svfprintf_r+0xae8>
 80056c4:	3501      	adds	r5, #1
 80056c6:	3401      	adds	r4, #1
 80056c8:	2301      	movs	r3, #1
 80056ca:	2d07      	cmp	r5, #7
 80056cc:	9429      	str	r4, [sp, #164]	; 0xa4
 80056ce:	9528      	str	r5, [sp, #160]	; 0xa0
 80056d0:	f8c9 6000 	str.w	r6, [r9]
 80056d4:	f8c9 3004 	str.w	r3, [r9, #4]
 80056d8:	f77f ae1a 	ble.w	8005310 <_svfprintf_r+0xb50>
 80056dc:	e70d      	b.n	80054fa <_svfprintf_r+0xd3a>
 80056de:	aa27      	add	r2, sp, #156	; 0x9c
 80056e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80056e4:	f004 fd82 	bl	800a1ec <__ssprint_r>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	f47f a963 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 80056ee:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80056f0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80056f2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80056f6:	e5e5      	b.n	80052c4 <_svfprintf_r+0xb04>
 80056f8:	aa27      	add	r2, sp, #156	; 0x9c
 80056fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80056fe:	f004 fd75 	bl	800a1ec <__ssprint_r>
 8005702:	2800      	cmp	r0, #0
 8005704:	f47f a956 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8005708:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800570a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800570c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005710:	e5e7      	b.n	80052e2 <_svfprintf_r+0xb22>
 8005712:	aa27      	add	r2, sp, #156	; 0x9c
 8005714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005716:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005718:	f004 fd68 	bl	800a1ec <__ssprint_r>
 800571c:	2800      	cmp	r0, #0
 800571e:	f47f a949 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8005722:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005724:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005728:	f7ff ba94 	b.w	8004c54 <_svfprintf_r+0x494>
 800572c:	9907      	ldr	r1, [sp, #28]
 800572e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8005732:	f000 80bb 	beq.w	80058ac <_svfprintf_r+0x10ec>
 8005736:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005738:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800573c:	4603      	mov	r3, r0
 800573e:	f1bb 0f00 	cmp.w	fp, #0
 8005742:	f103 0304 	add.w	r3, r3, #4
 8005746:	8804      	ldrh	r4, [r0, #0]
 8005748:	f04f 0500 	mov.w	r5, #0
 800574c:	f2c0 81c5 	blt.w	8005ada <_svfprintf_r+0x131a>
 8005750:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005754:	9107      	str	r1, [sp, #28]
 8005756:	ea54 0105 	orrs.w	r1, r4, r5
 800575a:	930e      	str	r3, [sp, #56]	; 0x38
 800575c:	f43f acda 	beq.w	8005114 <_svfprintf_r+0x954>
 8005760:	4617      	mov	r7, r2
 8005762:	f7ff b953 	b.w	8004a0c <_svfprintf_r+0x24c>
 8005766:	9b07      	ldr	r3, [sp, #28]
 8005768:	06df      	lsls	r7, r3, #27
 800576a:	d40b      	bmi.n	8005784 <_svfprintf_r+0xfc4>
 800576c:	9b07      	ldr	r3, [sp, #28]
 800576e:	065e      	lsls	r6, r3, #25
 8005770:	d508      	bpl.n	8005784 <_svfprintf_r+0xfc4>
 8005772:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005774:	6813      	ldr	r3, [r2, #0]
 8005776:	3204      	adds	r2, #4
 8005778:	920e      	str	r2, [sp, #56]	; 0x38
 800577a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	f7ff b845 	b.w	800480e <_svfprintf_r+0x4e>
 8005784:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005786:	6813      	ldr	r3, [r2, #0]
 8005788:	3204      	adds	r2, #4
 800578a:	920e      	str	r2, [sp, #56]	; 0x38
 800578c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	f7ff b83d 	b.w	800480e <_svfprintf_r+0x4e>
 8005794:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	f7fe fd22 	bl	80041e4 <__aeabi_dcmpun>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	f040 8305 	bne.w	8005db0 <_svfprintf_r+0x15f0>
 80057a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057a8:	f1bb 3fff 	cmp.w	fp, #4294967295
 80057ac:	f023 0720 	bic.w	r7, r3, #32
 80057b0:	f000 826c 	beq.w	8005c8c <_svfprintf_r+0x14cc>
 80057b4:	2f47      	cmp	r7, #71	; 0x47
 80057b6:	f000 8187 	beq.w	8005ac8 <_svfprintf_r+0x1308>
 80057ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057bc:	9a07      	ldr	r2, [sp, #28]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057c4:	920f      	str	r2, [sp, #60]	; 0x3c
 80057c6:	f2c0 8280 	blt.w	8005cca <_svfprintf_r+0x150a>
 80057ca:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 80057ce:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 80057d2:	2300      	movs	r3, #0
 80057d4:	9308      	str	r3, [sp, #32]
 80057d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057d8:	2b66      	cmp	r3, #102	; 0x66
 80057da:	f000 825a 	beq.w	8005c92 <_svfprintf_r+0x14d2>
 80057de:	2b46      	cmp	r3, #70	; 0x46
 80057e0:	f000 8147 	beq.w	8005a72 <_svfprintf_r+0x12b2>
 80057e4:	2f45      	cmp	r7, #69	; 0x45
 80057e6:	bf0c      	ite	eq
 80057e8:	f10b 0501 	addeq.w	r5, fp, #1
 80057ec:	465d      	movne	r5, fp
 80057ee:	a825      	add	r0, sp, #148	; 0x94
 80057f0:	a922      	add	r1, sp, #136	; 0x88
 80057f2:	aa21      	add	r2, sp, #132	; 0x84
 80057f4:	2302      	movs	r3, #2
 80057f6:	9004      	str	r0, [sp, #16]
 80057f8:	9202      	str	r2, [sp, #8]
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	9501      	str	r5, [sp, #4]
 80057fe:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005802:	9103      	str	r1, [sp, #12]
 8005804:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005806:	f002 f847 	bl	8007898 <_dtoa_r>
 800580a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800580c:	2b67      	cmp	r3, #103	; 0x67
 800580e:	4606      	mov	r6, r0
 8005810:	f040 8271 	bne.w	8005cf6 <_svfprintf_r+0x1536>
 8005814:	9b07      	ldr	r3, [sp, #28]
 8005816:	07da      	lsls	r2, r3, #31
 8005818:	f140 82bf 	bpl.w	8005d9a <_svfprintf_r+0x15da>
 800581c:	1974      	adds	r4, r6, r5
 800581e:	2200      	movs	r2, #0
 8005820:	2300      	movs	r3, #0
 8005822:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8005826:	f7fe fcab 	bl	8004180 <__aeabi_dcmpeq>
 800582a:	2800      	cmp	r0, #0
 800582c:	f040 8190 	bne.w	8005b50 <_svfprintf_r+0x1390>
 8005830:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005832:	429c      	cmp	r4, r3
 8005834:	d906      	bls.n	8005844 <_svfprintf_r+0x1084>
 8005836:	2130      	movs	r1, #48	; 0x30
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	9225      	str	r2, [sp, #148]	; 0x94
 800583c:	7019      	strb	r1, [r3, #0]
 800583e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005840:	429c      	cmp	r4, r3
 8005842:	d8f9      	bhi.n	8005838 <_svfprintf_r+0x1078>
 8005844:	1b9b      	subs	r3, r3, r6
 8005846:	2f47      	cmp	r7, #71	; 0x47
 8005848:	9312      	str	r3, [sp, #72]	; 0x48
 800584a:	f000 817a 	beq.w	8005b42 <_svfprintf_r+0x1382>
 800584e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005850:	2b65      	cmp	r3, #101	; 0x65
 8005852:	f340 825f 	ble.w	8005d14 <_svfprintf_r+0x1554>
 8005856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005858:	2b66      	cmp	r3, #102	; 0x66
 800585a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800585c:	9313      	str	r3, [sp, #76]	; 0x4c
 800585e:	f000 8266 	beq.w	8005d2e <_svfprintf_r+0x156e>
 8005862:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005864:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005866:	428a      	cmp	r2, r1
 8005868:	f2c0 8238 	blt.w	8005cdc <_svfprintf_r+0x151c>
 800586c:	9b07      	ldr	r3, [sp, #28]
 800586e:	07d9      	lsls	r1, r3, #31
 8005870:	f100 8295 	bmi.w	8005d9e <_svfprintf_r+0x15de>
 8005874:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005878:	920d      	str	r2, [sp, #52]	; 0x34
 800587a:	2267      	movs	r2, #103	; 0x67
 800587c:	9211      	str	r2, [sp, #68]	; 0x44
 800587e:	9a08      	ldr	r2, [sp, #32]
 8005880:	2a00      	cmp	r2, #0
 8005882:	f040 8132 	bne.w	8005aea <_svfprintf_r+0x132a>
 8005886:	9308      	str	r3, [sp, #32]
 8005888:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800588a:	9307      	str	r3, [sp, #28]
 800588c:	4693      	mov	fp, r2
 800588e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005892:	f7ff b967 	b.w	8004b64 <_svfprintf_r+0x3a4>
 8005896:	f027 0707 	bic.w	r7, r7, #7
 800589a:	ed97 7b00 	vldr	d7, [r7]
 800589e:	f107 0308 	add.w	r3, r7, #8
 80058a2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80058a6:	930e      	str	r3, [sp, #56]	; 0x38
 80058a8:	f7ff ba88 	b.w	8004dbc <_svfprintf_r+0x5fc>
 80058ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 80058ae:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80058b2:	f1bb 0f00 	cmp.w	fp, #0
 80058b6:	680c      	ldr	r4, [r1, #0]
 80058b8:	f101 0704 	add.w	r7, r1, #4
 80058bc:	f04f 0500 	mov.w	r5, #0
 80058c0:	f280 80ac 	bge.w	8005a1c <_svfprintf_r+0x125c>
 80058c4:	970e      	str	r7, [sp, #56]	; 0x38
 80058c6:	2700      	movs	r7, #0
 80058c8:	f7ff b8a0 	b.w	8004a0c <_svfprintf_r+0x24c>
 80058cc:	9907      	ldr	r1, [sp, #28]
 80058ce:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80058d2:	f43f ae4c 	beq.w	800556e <_svfprintf_r+0xdae>
 80058d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80058d8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80058dc:	4603      	mov	r3, r0
 80058de:	f1bb 0f00 	cmp.w	fp, #0
 80058e2:	f103 0304 	add.w	r3, r3, #4
 80058e6:	8804      	ldrh	r4, [r0, #0]
 80058e8:	f04f 0500 	mov.w	r5, #0
 80058ec:	f2c0 80f2 	blt.w	8005ad4 <_svfprintf_r+0x1314>
 80058f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80058f4:	9107      	str	r1, [sp, #28]
 80058f6:	ea54 0105 	orrs.w	r1, r4, r5
 80058fa:	930e      	str	r3, [sp, #56]	; 0x38
 80058fc:	4617      	mov	r7, r2
 80058fe:	f47f a90d 	bne.w	8004b1c <_svfprintf_r+0x35c>
 8005902:	f7ff baf3 	b.w	8004eec <_svfprintf_r+0x72c>
 8005906:	9b07      	ldr	r3, [sp, #28]
 8005908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800590a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800590e:	4613      	mov	r3, r2
 8005910:	f000 80e5 	beq.w	8005ade <_svfprintf_r+0x131e>
 8005914:	3304      	adds	r3, #4
 8005916:	8814      	ldrh	r4, [r2, #0]
 8005918:	930e      	str	r3, [sp, #56]	; 0x38
 800591a:	2500      	movs	r5, #0
 800591c:	f7ff bb03 	b.w	8004f26 <_svfprintf_r+0x766>
 8005920:	4614      	mov	r4, r2
 8005922:	3301      	adds	r3, #1
 8005924:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005926:	9328      	str	r3, [sp, #160]	; 0xa0
 8005928:	442c      	add	r4, r5
 800592a:	2b07      	cmp	r3, #7
 800592c:	9429      	str	r4, [sp, #164]	; 0xa4
 800592e:	e889 0024 	stmia.w	r9, {r2, r5}
 8005932:	f73f ae58 	bgt.w	80055e6 <_svfprintf_r+0xe26>
 8005936:	f109 0908 	add.w	r9, r9, #8
 800593a:	e65f      	b.n	80055fc <_svfprintf_r+0xe3c>
 800593c:	0800ad4c 	.word	0x0800ad4c
 8005940:	2700      	movs	r7, #0
 8005942:	45bb      	cmp	fp, r7
 8005944:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005948:	f6ff abf6 	blt.w	8005138 <_svfprintf_r+0x978>
 800594c:	9b07      	ldr	r3, [sp, #28]
 800594e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005952:	9307      	str	r3, [sp, #28]
 8005954:	f7ff bbbe 	b.w	80050d4 <_svfprintf_r+0x914>
 8005958:	aa27      	add	r2, sp, #156	; 0x9c
 800595a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800595c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800595e:	f004 fc45 	bl	800a1ec <__ssprint_r>
 8005962:	2800      	cmp	r0, #0
 8005964:	f47f a826 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8005968:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800596a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800596e:	e405      	b.n	800517c <_svfprintf_r+0x9bc>
 8005970:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005972:	f7ff bbda 	b.w	800512a <_svfprintf_r+0x96a>
 8005976:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005978:	4ab2      	ldr	r2, [pc, #712]	; (8005c44 <_svfprintf_r+0x1484>)
 800597a:	f8c9 2000 	str.w	r2, [r9]
 800597e:	3301      	adds	r3, #1
 8005980:	3401      	adds	r4, #1
 8005982:	2201      	movs	r2, #1
 8005984:	2b07      	cmp	r3, #7
 8005986:	9429      	str	r4, [sp, #164]	; 0xa4
 8005988:	9328      	str	r3, [sp, #160]	; 0xa0
 800598a:	f8c9 2004 	str.w	r2, [r9, #4]
 800598e:	f300 808e 	bgt.w	8005aae <_svfprintf_r+0x12ee>
 8005992:	f109 0908 	add.w	r9, r9, #8
 8005996:	b92d      	cbnz	r5, 80059a4 <_svfprintf_r+0x11e4>
 8005998:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800599a:	b91b      	cbnz	r3, 80059a4 <_svfprintf_r+0x11e4>
 800599c:	9b07      	ldr	r3, [sp, #28]
 800599e:	07df      	lsls	r7, r3, #31
 80059a0:	f57f a9a4 	bpl.w	8004cec <_svfprintf_r+0x52c>
 80059a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80059a6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80059a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80059aa:	f8c9 2000 	str.w	r2, [r9]
 80059ae:	3301      	adds	r3, #1
 80059b0:	440c      	add	r4, r1
 80059b2:	2b07      	cmp	r3, #7
 80059b4:	9429      	str	r4, [sp, #164]	; 0xa4
 80059b6:	f8c9 1004 	str.w	r1, [r9, #4]
 80059ba:	9328      	str	r3, [sp, #160]	; 0xa0
 80059bc:	f300 81d3 	bgt.w	8005d66 <_svfprintf_r+0x15a6>
 80059c0:	f109 0908 	add.w	r9, r9, #8
 80059c4:	426d      	negs	r5, r5
 80059c6:	2d00      	cmp	r5, #0
 80059c8:	f340 80ad 	ble.w	8005b26 <_svfprintf_r+0x1366>
 80059cc:	4a9e      	ldr	r2, [pc, #632]	; (8005c48 <_svfprintf_r+0x1488>)
 80059ce:	920f      	str	r2, [sp, #60]	; 0x3c
 80059d0:	2d10      	cmp	r5, #16
 80059d2:	f340 80cc 	ble.w	8005b6e <_svfprintf_r+0x13ae>
 80059d6:	4622      	mov	r2, r4
 80059d8:	2710      	movs	r7, #16
 80059da:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80059de:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80059e0:	e005      	b.n	80059ee <_svfprintf_r+0x122e>
 80059e2:	f109 0908 	add.w	r9, r9, #8
 80059e6:	3d10      	subs	r5, #16
 80059e8:	2d10      	cmp	r5, #16
 80059ea:	f340 80bf 	ble.w	8005b6c <_svfprintf_r+0x13ac>
 80059ee:	3301      	adds	r3, #1
 80059f0:	3210      	adds	r2, #16
 80059f2:	2b07      	cmp	r3, #7
 80059f4:	9229      	str	r2, [sp, #164]	; 0xa4
 80059f6:	9328      	str	r3, [sp, #160]	; 0xa0
 80059f8:	f8c9 a000 	str.w	sl, [r9]
 80059fc:	f8c9 7004 	str.w	r7, [r9, #4]
 8005a00:	ddef      	ble.n	80059e2 <_svfprintf_r+0x1222>
 8005a02:	aa27      	add	r2, sp, #156	; 0x9c
 8005a04:	4621      	mov	r1, r4
 8005a06:	4658      	mov	r0, fp
 8005a08:	f004 fbf0 	bl	800a1ec <__ssprint_r>
 8005a0c:	2800      	cmp	r0, #0
 8005a0e:	f47e afd1 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8005a12:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005a14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005a16:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005a1a:	e7e4      	b.n	80059e6 <_svfprintf_r+0x1226>
 8005a1c:	9a07      	ldr	r2, [sp, #28]
 8005a1e:	f7ff ba37 	b.w	8004e90 <_svfprintf_r+0x6d0>
 8005a22:	9a07      	ldr	r2, [sp, #28]
 8005a24:	e589      	b.n	800553a <_svfprintf_r+0xd7a>
 8005a26:	9b07      	ldr	r3, [sp, #28]
 8005a28:	f043 0320 	orr.w	r3, r3, #32
 8005a2c:	9307      	str	r3, [sp, #28]
 8005a2e:	f108 0801 	add.w	r8, r8, #1
 8005a32:	f898 3000 	ldrb.w	r3, [r8]
 8005a36:	f7fe bf1d 	b.w	8004874 <_svfprintf_r+0xb4>
 8005a3a:	aa27      	add	r2, sp, #156	; 0x9c
 8005a3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a40:	f004 fbd4 	bl	800a1ec <__ssprint_r>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	f47e afb5 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8005a4a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005a4c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005a50:	f7ff bbac 	b.w	80051ac <_svfprintf_r+0x9ec>
 8005a54:	2140      	movs	r1, #64	; 0x40
 8005a56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a58:	f003 fae8 	bl	800902c <_malloc_r>
 8005a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a5e:	6010      	str	r0, [r2, #0]
 8005a60:	6110      	str	r0, [r2, #16]
 8005a62:	2800      	cmp	r0, #0
 8005a64:	f000 81f9 	beq.w	8005e5a <_svfprintf_r+0x169a>
 8005a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a6a:	2340      	movs	r3, #64	; 0x40
 8005a6c:	6153      	str	r3, [r2, #20]
 8005a6e:	f7fe bebe 	b.w	80047ee <_svfprintf_r+0x2e>
 8005a72:	a825      	add	r0, sp, #148	; 0x94
 8005a74:	a922      	add	r1, sp, #136	; 0x88
 8005a76:	aa21      	add	r2, sp, #132	; 0x84
 8005a78:	2303      	movs	r3, #3
 8005a7a:	9004      	str	r0, [sp, #16]
 8005a7c:	9202      	str	r2, [sp, #8]
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	f8cd b004 	str.w	fp, [sp, #4]
 8005a84:	9103      	str	r1, [sp, #12]
 8005a86:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005a8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a8c:	f001 ff04 	bl	8007898 <_dtoa_r>
 8005a90:	465d      	mov	r5, fp
 8005a92:	4606      	mov	r6, r0
 8005a94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a96:	2b46      	cmp	r3, #70	; 0x46
 8005a98:	eb06 0405 	add.w	r4, r6, r5
 8005a9c:	f47f aebf 	bne.w	800581e <_svfprintf_r+0x105e>
 8005aa0:	7833      	ldrb	r3, [r6, #0]
 8005aa2:	2b30      	cmp	r3, #48	; 0x30
 8005aa4:	f000 818a 	beq.w	8005dbc <_svfprintf_r+0x15fc>
 8005aa8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005aaa:	442c      	add	r4, r5
 8005aac:	e6b7      	b.n	800581e <_svfprintf_r+0x105e>
 8005aae:	aa27      	add	r2, sp, #156	; 0x9c
 8005ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ab2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005ab4:	f004 fb9a 	bl	800a1ec <__ssprint_r>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	f47e af7b 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8005abe:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005ac0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005ac2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005ac6:	e766      	b.n	8005996 <_svfprintf_r+0x11d6>
 8005ac8:	f1bb 0f00 	cmp.w	fp, #0
 8005acc:	bf08      	it	eq
 8005ace:	f04f 0b01 	moveq.w	fp, #1
 8005ad2:	e672      	b.n	80057ba <_svfprintf_r+0xffa>
 8005ad4:	930e      	str	r3, [sp, #56]	; 0x38
 8005ad6:	4617      	mov	r7, r2
 8005ad8:	e557      	b.n	800558a <_svfprintf_r+0xdca>
 8005ada:	930e      	str	r3, [sp, #56]	; 0x38
 8005adc:	e6f3      	b.n	80058c6 <_svfprintf_r+0x1106>
 8005ade:	3304      	adds	r3, #4
 8005ae0:	6814      	ldr	r4, [r2, #0]
 8005ae2:	930e      	str	r3, [sp, #56]	; 0x38
 8005ae4:	2500      	movs	r5, #0
 8005ae6:	f7ff ba1e 	b.w	8004f26 <_svfprintf_r+0x766>
 8005aea:	272d      	movs	r7, #45	; 0x2d
 8005aec:	9308      	str	r3, [sp, #32]
 8005aee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005af0:	9307      	str	r3, [sp, #28]
 8005af2:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005af6:	f04f 0b00 	mov.w	fp, #0
 8005afa:	f7ff b834 	b.w	8004b66 <_svfprintf_r+0x3a6>
 8005afe:	4630      	mov	r0, r6
 8005b00:	f7fe fd9e 	bl	8004640 <strlen>
 8005b04:	46a3      	mov	fp, r4
 8005b06:	4603      	mov	r3, r0
 8005b08:	900d      	str	r0, [sp, #52]	; 0x34
 8005b0a:	f7ff ba9d 	b.w	8005048 <_svfprintf_r+0x888>
 8005b0e:	aa27      	add	r2, sp, #156	; 0x9c
 8005b10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005b14:	f004 fb6a 	bl	800a1ec <__ssprint_r>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	f47e af4b 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8005b1e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005b20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005b22:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005b26:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005b28:	f8c9 6000 	str.w	r6, [r9]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	440c      	add	r4, r1
 8005b30:	2b07      	cmp	r3, #7
 8005b32:	9429      	str	r4, [sp, #164]	; 0xa4
 8005b34:	9328      	str	r3, [sp, #160]	; 0xa0
 8005b36:	f8c9 1004 	str.w	r1, [r9, #4]
 8005b3a:	f77f a8d5 	ble.w	8004ce8 <_svfprintf_r+0x528>
 8005b3e:	f7ff bbf6 	b.w	800532e <_svfprintf_r+0xb6e>
 8005b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b44:	1cdd      	adds	r5, r3, #3
 8005b46:	db1e      	blt.n	8005b86 <_svfprintf_r+0x13c6>
 8005b48:	459b      	cmp	fp, r3
 8005b4a:	db1c      	blt.n	8005b86 <_svfprintf_r+0x13c6>
 8005b4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b4e:	e688      	b.n	8005862 <_svfprintf_r+0x10a2>
 8005b50:	4623      	mov	r3, r4
 8005b52:	e677      	b.n	8005844 <_svfprintf_r+0x1084>
 8005b54:	aa27      	add	r2, sp, #156	; 0x9c
 8005b56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005b5a:	f004 fb47 	bl	800a1ec <__ssprint_r>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	f47e af28 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8005b64:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005b66:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005b6a:	e447      	b.n	80053fc <_svfprintf_r+0xc3c>
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	3301      	adds	r3, #1
 8005b70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b72:	9328      	str	r3, [sp, #160]	; 0xa0
 8005b74:	442c      	add	r4, r5
 8005b76:	2b07      	cmp	r3, #7
 8005b78:	9429      	str	r4, [sp, #164]	; 0xa4
 8005b7a:	e889 0024 	stmia.w	r9, {r2, r5}
 8005b7e:	dcc6      	bgt.n	8005b0e <_svfprintf_r+0x134e>
 8005b80:	f109 0908 	add.w	r9, r9, #8
 8005b84:	e7cf      	b.n	8005b26 <_svfprintf_r+0x1366>
 8005b86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005b88:	3a02      	subs	r2, #2
 8005b8a:	9211      	str	r2, [sp, #68]	; 0x44
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8005b94:	9321      	str	r3, [sp, #132]	; 0x84
 8005b96:	bfb8      	it	lt
 8005b98:	425b      	neglt	r3, r3
 8005b9a:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8005b9e:	bfb4      	ite	lt
 8005ba0:	222d      	movlt	r2, #45	; 0x2d
 8005ba2:	222b      	movge	r2, #43	; 0x2b
 8005ba4:	2b09      	cmp	r3, #9
 8005ba6:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8005baa:	f340 80ee 	ble.w	8005d8a <_svfprintf_r+0x15ca>
 8005bae:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	4a25      	ldr	r2, [pc, #148]	; (8005c4c <_svfprintf_r+0x148c>)
 8005bb6:	fb82 2103 	smull	r2, r1, r2, r3
 8005bba:	17da      	asrs	r2, r3, #31
 8005bbc:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8005bc0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005bc4:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8005bc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005bcc:	2a09      	cmp	r2, #9
 8005bce:	4613      	mov	r3, r2
 8005bd0:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8005bd4:	dcee      	bgt.n	8005bb4 <_svfprintf_r+0x13f4>
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	3330      	adds	r3, #48	; 0x30
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8005be0:	4288      	cmp	r0, r1
 8005be2:	f240 8137 	bls.w	8005e54 <_svfprintf_r+0x1694>
 8005be6:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8005bea:	4623      	mov	r3, r4
 8005bec:	e001      	b.n	8005bf2 <_svfprintf_r+0x1432>
 8005bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bf2:	f801 2b01 	strb.w	r2, [r1], #1
 8005bf6:	4298      	cmp	r0, r3
 8005bf8:	d1f9      	bne.n	8005bee <_svfprintf_r+0x142e>
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	1b1b      	subs	r3, r3, r4
 8005bfe:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 8005c02:	4413      	add	r3, r2
 8005c04:	aa23      	add	r2, sp, #140	; 0x8c
 8005c06:	1a9b      	subs	r3, r3, r2
 8005c08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c0a:	9319      	str	r3, [sp, #100]	; 0x64
 8005c0c:	2a01      	cmp	r2, #1
 8005c0e:	4413      	add	r3, r2
 8005c10:	930d      	str	r3, [sp, #52]	; 0x34
 8005c12:	f340 80ea 	ble.w	8005dea <_svfprintf_r+0x162a>
 8005c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c18:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005c1a:	4413      	add	r3, r2
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	930d      	str	r3, [sp, #52]	; 0x34
 8005c20:	9213      	str	r2, [sp, #76]	; 0x4c
 8005c22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c26:	e62a      	b.n	800587e <_svfprintf_r+0x10be>
 8005c28:	aa27      	add	r2, sp, #156	; 0x9c
 8005c2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005c2e:	f004 fadd 	bl	800a1ec <__ssprint_r>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	f47e aebe 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8005c38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c3a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005c3c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005c40:	e4e6      	b.n	8005610 <_svfprintf_r+0xe50>
 8005c42:	bf00      	nop
 8005c44:	0800ad9c 	.word	0x0800ad9c
 8005c48:	0800ad4c 	.word	0x0800ad4c
 8005c4c:	66666667 	.word	0x66666667
 8005c50:	aa27      	add	r2, sp, #156	; 0x9c
 8005c52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c54:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005c56:	f004 fac9 	bl	800a1ec <__ssprint_r>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	f47e aeaa 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8005c60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c64:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005c6c:	e4e8      	b.n	8005640 <_svfprintf_r+0xe80>
 8005c6e:	2d06      	cmp	r5, #6
 8005c70:	462b      	mov	r3, r5
 8005c72:	bf28      	it	cs
 8005c74:	2306      	movcs	r3, #6
 8005c76:	930d      	str	r3, [sp, #52]	; 0x34
 8005c78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c7c:	46b3      	mov	fp, r6
 8005c7e:	970e      	str	r7, [sp, #56]	; 0x38
 8005c80:	9613      	str	r6, [sp, #76]	; 0x4c
 8005c82:	4637      	mov	r7, r6
 8005c84:	9308      	str	r3, [sp, #32]
 8005c86:	4e88      	ldr	r6, [pc, #544]	; (8005ea8 <_svfprintf_r+0x16e8>)
 8005c88:	f7fe bf6c 	b.w	8004b64 <_svfprintf_r+0x3a4>
 8005c8c:	f04f 0b06 	mov.w	fp, #6
 8005c90:	e593      	b.n	80057ba <_svfprintf_r+0xffa>
 8005c92:	a825      	add	r0, sp, #148	; 0x94
 8005c94:	a922      	add	r1, sp, #136	; 0x88
 8005c96:	aa21      	add	r2, sp, #132	; 0x84
 8005c98:	2303      	movs	r3, #3
 8005c9a:	9004      	str	r0, [sp, #16]
 8005c9c:	9202      	str	r2, [sp, #8]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	f8cd b004 	str.w	fp, [sp, #4]
 8005ca4:	9103      	str	r1, [sp, #12]
 8005ca6:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005caa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005cac:	f001 fdf4 	bl	8007898 <_dtoa_r>
 8005cb0:	465d      	mov	r5, fp
 8005cb2:	4606      	mov	r6, r0
 8005cb4:	eb00 040b 	add.w	r4, r0, fp
 8005cb8:	e6f2      	b.n	8005aa0 <_svfprintf_r+0x12e0>
 8005cba:	272d      	movs	r7, #45	; 0x2d
 8005cbc:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005cc0:	f7ff b8a3 	b.w	8004e0a <_svfprintf_r+0x64a>
 8005cc4:	9307      	str	r3, [sp, #28]
 8005cc6:	f7ff b94c 	b.w	8004f62 <_svfprintf_r+0x7a2>
 8005cca:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8005cce:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8005cd2:	931d      	str	r3, [sp, #116]	; 0x74
 8005cd4:	232d      	movs	r3, #45	; 0x2d
 8005cd6:	911c      	str	r1, [sp, #112]	; 0x70
 8005cd8:	9308      	str	r3, [sp, #32]
 8005cda:	e57c      	b.n	80057d6 <_svfprintf_r+0x1016>
 8005cdc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005cde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ce0:	4413      	add	r3, r2
 8005ce2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ce4:	930d      	str	r3, [sp, #52]	; 0x34
 8005ce6:	2a00      	cmp	r2, #0
 8005ce8:	f340 8089 	ble.w	8005dfe <_svfprintf_r+0x163e>
 8005cec:	2267      	movs	r2, #103	; 0x67
 8005cee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005cf2:	9211      	str	r2, [sp, #68]	; 0x44
 8005cf4:	e5c3      	b.n	800587e <_svfprintf_r+0x10be>
 8005cf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cf8:	2b47      	cmp	r3, #71	; 0x47
 8005cfa:	f47f ad8f 	bne.w	800581c <_svfprintf_r+0x105c>
 8005cfe:	9b07      	ldr	r3, [sp, #28]
 8005d00:	07db      	lsls	r3, r3, #31
 8005d02:	f53f aec7 	bmi.w	8005a94 <_svfprintf_r+0x12d4>
 8005d06:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005d08:	2f47      	cmp	r7, #71	; 0x47
 8005d0a:	eba3 0306 	sub.w	r3, r3, r6
 8005d0e:	9312      	str	r3, [sp, #72]	; 0x48
 8005d10:	f43f af17 	beq.w	8005b42 <_svfprintf_r+0x1382>
 8005d14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d16:	e739      	b.n	8005b8c <_svfprintf_r+0x13cc>
 8005d18:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8005d1c:	970e      	str	r7, [sp, #56]	; 0x38
 8005d1e:	9308      	str	r3, [sp, #32]
 8005d20:	950d      	str	r5, [sp, #52]	; 0x34
 8005d22:	4683      	mov	fp, r0
 8005d24:	9013      	str	r0, [sp, #76]	; 0x4c
 8005d26:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005d2a:	f7fe bf1b 	b.w	8004b64 <_svfprintf_r+0x3a4>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	dd6d      	ble.n	8005e0e <_svfprintf_r+0x164e>
 8005d32:	f1bb 0f00 	cmp.w	fp, #0
 8005d36:	d14f      	bne.n	8005dd8 <_svfprintf_r+0x1618>
 8005d38:	9a07      	ldr	r2, [sp, #28]
 8005d3a:	07d4      	lsls	r4, r2, #31
 8005d3c:	d44c      	bmi.n	8005dd8 <_svfprintf_r+0x1618>
 8005d3e:	461a      	mov	r2, r3
 8005d40:	920d      	str	r2, [sp, #52]	; 0x34
 8005d42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d46:	e59a      	b.n	800587e <_svfprintf_r+0x10be>
 8005d48:	9b07      	ldr	r3, [sp, #28]
 8005d4a:	07db      	lsls	r3, r3, #31
 8005d4c:	465f      	mov	r7, fp
 8005d4e:	d505      	bpl.n	8005d5c <_svfprintf_r+0x159c>
 8005d50:	ae44      	add	r6, sp, #272	; 0x110
 8005d52:	2330      	movs	r3, #48	; 0x30
 8005d54:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8005d58:	f7fe befa 	b.w	8004b50 <_svfprintf_r+0x390>
 8005d5c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8005d60:	ae34      	add	r6, sp, #208	; 0xd0
 8005d62:	f7fe bef8 	b.w	8004b56 <_svfprintf_r+0x396>
 8005d66:	aa27      	add	r2, sp, #156	; 0x9c
 8005d68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d6c:	f004 fa3e 	bl	800a1ec <__ssprint_r>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	f47e ae1f 	bne.w	80049b4 <_svfprintf_r+0x1f4>
 8005d76:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005d78:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005d7a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005d7c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005d80:	e620      	b.n	80059c4 <_svfprintf_r+0x1204>
 8005d82:	46a0      	mov	r8, r4
 8005d84:	2500      	movs	r5, #0
 8005d86:	f7fe bd77 	b.w	8004878 <_svfprintf_r+0xb8>
 8005d8a:	3330      	adds	r3, #48	; 0x30
 8005d8c:	2230      	movs	r2, #48	; 0x30
 8005d8e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8005d92:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8005d96:	ab24      	add	r3, sp, #144	; 0x90
 8005d98:	e734      	b.n	8005c04 <_svfprintf_r+0x1444>
 8005d9a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005d9c:	e552      	b.n	8005844 <_svfprintf_r+0x1084>
 8005d9e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005da0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005da2:	4413      	add	r3, r2
 8005da4:	2267      	movs	r2, #103	; 0x67
 8005da6:	930d      	str	r3, [sp, #52]	; 0x34
 8005da8:	9211      	str	r2, [sp, #68]	; 0x44
 8005daa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005dae:	e566      	b.n	800587e <_svfprintf_r+0x10be>
 8005db0:	4e3e      	ldr	r6, [pc, #248]	; (8005eac <_svfprintf_r+0x16ec>)
 8005db2:	4b3f      	ldr	r3, [pc, #252]	; (8005eb0 <_svfprintf_r+0x16f0>)
 8005db4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005db8:	f7ff b829 	b.w	8004e0e <_svfprintf_r+0x64e>
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8005dc4:	f7fe f9dc 	bl	8004180 <__aeabi_dcmpeq>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	f47f ae6d 	bne.w	8005aa8 <_svfprintf_r+0x12e8>
 8005dce:	f1c5 0501 	rsb	r5, r5, #1
 8005dd2:	9521      	str	r5, [sp, #132]	; 0x84
 8005dd4:	442c      	add	r4, r5
 8005dd6:	e522      	b.n	800581e <_svfprintf_r+0x105e>
 8005dd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005dda:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005ddc:	189d      	adds	r5, r3, r2
 8005dde:	eb05 030b 	add.w	r3, r5, fp
 8005de2:	930d      	str	r3, [sp, #52]	; 0x34
 8005de4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005de8:	e549      	b.n	800587e <_svfprintf_r+0x10be>
 8005dea:	9b07      	ldr	r3, [sp, #28]
 8005dec:	f013 0301 	ands.w	r3, r3, #1
 8005df0:	f47f af11 	bne.w	8005c16 <_svfprintf_r+0x1456>
 8005df4:	9313      	str	r3, [sp, #76]	; 0x4c
 8005df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005df8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005dfc:	e53f      	b.n	800587e <_svfprintf_r+0x10be>
 8005dfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e02:	f1c3 0301 	rsb	r3, r3, #1
 8005e06:	441a      	add	r2, r3
 8005e08:	4613      	mov	r3, r2
 8005e0a:	920d      	str	r2, [sp, #52]	; 0x34
 8005e0c:	e76e      	b.n	8005cec <_svfprintf_r+0x152c>
 8005e0e:	f1bb 0f00 	cmp.w	fp, #0
 8005e12:	d102      	bne.n	8005e1a <_svfprintf_r+0x165a>
 8005e14:	9b07      	ldr	r3, [sp, #28]
 8005e16:	07d8      	lsls	r0, r3, #31
 8005e18:	d507      	bpl.n	8005e2a <_svfprintf_r+0x166a>
 8005e1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e1c:	1c5d      	adds	r5, r3, #1
 8005e1e:	eb05 030b 	add.w	r3, r5, fp
 8005e22:	930d      	str	r3, [sp, #52]	; 0x34
 8005e24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005e28:	e529      	b.n	800587e <_svfprintf_r+0x10be>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	930d      	str	r3, [sp, #52]	; 0x34
 8005e2e:	e526      	b.n	800587e <_svfprintf_r+0x10be>
 8005e30:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005e32:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005e36:	6805      	ldr	r5, [r0, #0]
 8005e38:	3004      	adds	r0, #4
 8005e3a:	2d00      	cmp	r5, #0
 8005e3c:	900e      	str	r0, [sp, #56]	; 0x38
 8005e3e:	46a0      	mov	r8, r4
 8005e40:	f6be ad18 	bge.w	8004874 <_svfprintf_r+0xb4>
 8005e44:	f04f 35ff 	mov.w	r5, #4294967295
 8005e48:	f7fe bd14 	b.w	8004874 <_svfprintf_r+0xb4>
 8005e4c:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005e50:	f7fe bdc1 	b.w	80049d6 <_svfprintf_r+0x216>
 8005e54:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8005e58:	e6d4      	b.n	8005c04 <_svfprintf_r+0x1444>
 8005e5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e5c:	230c      	movs	r3, #12
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	f04f 30ff 	mov.w	r0, #4294967295
 8005e64:	f7fe bdaf 	b.w	80049c6 <_svfprintf_r+0x206>
 8005e68:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005e6c:	f7fe be30 	b.w	8004ad0 <_svfprintf_r+0x310>
 8005e70:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005e74:	f7fe bf92 	b.w	8004d9c <_svfprintf_r+0x5dc>
 8005e78:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005e7c:	f7ff b845 	b.w	8004f0a <_svfprintf_r+0x74a>
 8005e80:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005e84:	f7ff b813 	b.w	8004eae <_svfprintf_r+0x6ee>
 8005e88:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005e8c:	f7fe bfe5 	b.w	8004e5a <_svfprintf_r+0x69a>
 8005e90:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005e94:	f7ff b92d 	b.w	80050f2 <_svfprintf_r+0x932>
 8005e98:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005e9c:	f7ff b908 	b.w	80050b0 <_svfprintf_r+0x8f0>
 8005ea0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005ea4:	f7ff b8e6 	b.w	8005074 <_svfprintf_r+0x8b4>
 8005ea8:	0800ad94 	.word	0x0800ad94
 8005eac:	0800ad68 	.word	0x0800ad68
 8005eb0:	0800ad64 	.word	0x0800ad64
 8005eb4:	00000000 	.word	0x00000000

08005eb8 <_vfprintf_r>:
 8005eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ebc:	b0c5      	sub	sp, #276	; 0x114
 8005ebe:	461c      	mov	r4, r3
 8005ec0:	9108      	str	r1, [sp, #32]
 8005ec2:	4616      	mov	r6, r2
 8005ec4:	4605      	mov	r5, r0
 8005ec6:	900a      	str	r0, [sp, #40]	; 0x28
 8005ec8:	f003 f82e 	bl	8008f28 <_localeconv_r>
 8005ecc:	6803      	ldr	r3, [r0, #0]
 8005ece:	9317      	str	r3, [sp, #92]	; 0x5c
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fe fbb5 	bl	8004640 <strlen>
 8005ed6:	940e      	str	r4, [sp, #56]	; 0x38
 8005ed8:	9016      	str	r0, [sp, #88]	; 0x58
 8005eda:	b11d      	cbz	r5, 8005ee4 <_vfprintf_r+0x2c>
 8005edc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 8123 	beq.w	800612a <_vfprintf_r+0x272>
 8005ee4:	9808      	ldr	r0, [sp, #32]
 8005ee6:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8005eea:	b293      	uxth	r3, r2
 8005eec:	0499      	lsls	r1, r3, #18
 8005eee:	d407      	bmi.n	8005f00 <_vfprintf_r+0x48>
 8005ef0:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8005ef2:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8005ef6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8005efa:	8183      	strh	r3, [r0, #12]
 8005efc:	6641      	str	r1, [r0, #100]	; 0x64
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	071a      	lsls	r2, r3, #28
 8005f02:	f140 80dd 	bpl.w	80060c0 <_vfprintf_r+0x208>
 8005f06:	9a08      	ldr	r2, [sp, #32]
 8005f08:	6912      	ldr	r2, [r2, #16]
 8005f0a:	2a00      	cmp	r2, #0
 8005f0c:	f000 80d8 	beq.w	80060c0 <_vfprintf_r+0x208>
 8005f10:	f003 031a 	and.w	r3, r3, #26
 8005f14:	2b0a      	cmp	r3, #10
 8005f16:	f000 80e1 	beq.w	80060dc <_vfprintf_r+0x224>
 8005f1a:	ed9f 7b87 	vldr	d7, [pc, #540]	; 8006138 <_vfprintf_r+0x280>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005f24:	9312      	str	r3, [sp, #72]	; 0x48
 8005f26:	9329      	str	r3, [sp, #164]	; 0xa4
 8005f28:	9328      	str	r3, [sp, #160]	; 0xa0
 8005f2a:	9319      	str	r3, [sp, #100]	; 0x64
 8005f2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f2e:	f8df a214 	ldr.w	sl, [pc, #532]	; 8006144 <_vfprintf_r+0x28c>
 8005f32:	ab34      	add	r3, sp, #208	; 0xd0
 8005f34:	9327      	str	r3, [sp, #156]	; 0x9c
 8005f36:	4699      	mov	r9, r3
 8005f38:	46b0      	mov	r8, r6
 8005f3a:	f898 3000 	ldrb.w	r3, [r8]
 8005f3e:	4644      	mov	r4, r8
 8005f40:	b1eb      	cbz	r3, 8005f7e <_vfprintf_r+0xc6>
 8005f42:	2b25      	cmp	r3, #37	; 0x25
 8005f44:	d102      	bne.n	8005f4c <_vfprintf_r+0x94>
 8005f46:	e01a      	b.n	8005f7e <_vfprintf_r+0xc6>
 8005f48:	2b25      	cmp	r3, #37	; 0x25
 8005f4a:	d003      	beq.n	8005f54 <_vfprintf_r+0x9c>
 8005f4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1f9      	bne.n	8005f48 <_vfprintf_r+0x90>
 8005f54:	ebc8 0504 	rsb	r5, r8, r4
 8005f58:	b18d      	cbz	r5, 8005f7e <_vfprintf_r+0xc6>
 8005f5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005f5c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005f5e:	f8c9 8000 	str.w	r8, [r9]
 8005f62:	3301      	adds	r3, #1
 8005f64:	442a      	add	r2, r5
 8005f66:	2b07      	cmp	r3, #7
 8005f68:	f8c9 5004 	str.w	r5, [r9, #4]
 8005f6c:	9229      	str	r2, [sp, #164]	; 0xa4
 8005f6e:	9328      	str	r3, [sp, #160]	; 0xa0
 8005f70:	f300 80c2 	bgt.w	80060f8 <_vfprintf_r+0x240>
 8005f74:	f109 0908 	add.w	r9, r9, #8
 8005f78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f7a:	442b      	add	r3, r5
 8005f7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f7e:	7823      	ldrb	r3, [r4, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 80c2 	beq.w	800610a <_vfprintf_r+0x252>
 8005f86:	2300      	movs	r3, #0
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005f8e:	4619      	mov	r1, r3
 8005f90:	930c      	str	r3, [sp, #48]	; 0x30
 8005f92:	9307      	str	r3, [sp, #28]
 8005f94:	f04f 3bff 	mov.w	fp, #4294967295
 8005f98:	7863      	ldrb	r3, [r4, #1]
 8005f9a:	f104 0801 	add.w	r8, r4, #1
 8005f9e:	465d      	mov	r5, fp
 8005fa0:	f108 0801 	add.w	r8, r8, #1
 8005fa4:	f1a3 0020 	sub.w	r0, r3, #32
 8005fa8:	2858      	cmp	r0, #88	; 0x58
 8005faa:	f200 8459 	bhi.w	8006860 <_vfprintf_r+0x9a8>
 8005fae:	e8df f010 	tbh	[pc, r0, lsl #1]
 8005fb2:	040f      	.short	0x040f
 8005fb4:	04570457 	.word	0x04570457
 8005fb8:	04570418 	.word	0x04570418
 8005fbc:	04570457 	.word	0x04570457
 8005fc0:	04570457 	.word	0x04570457
 8005fc4:	03620457 	.word	0x03620457
 8005fc8:	04570449 	.word	0x04570449
 8005fcc:	0109005d 	.word	0x0109005d
 8005fd0:	01250457 	.word	0x01250457
 8005fd4:	03700370 	.word	0x03700370
 8005fd8:	03700370 	.word	0x03700370
 8005fdc:	03700370 	.word	0x03700370
 8005fe0:	03700370 	.word	0x03700370
 8005fe4:	04570370 	.word	0x04570370
 8005fe8:	04570457 	.word	0x04570457
 8005fec:	04570457 	.word	0x04570457
 8005ff0:	04570457 	.word	0x04570457
 8005ff4:	04570457 	.word	0x04570457
 8005ff8:	03800457 	.word	0x03800457
 8005ffc:	0457039d 	.word	0x0457039d
 8006000:	0457039d 	.word	0x0457039d
 8006004:	04570457 	.word	0x04570457
 8006008:	03eb0457 	.word	0x03eb0457
 800600c:	04570457 	.word	0x04570457
 8006010:	0457012c 	.word	0x0457012c
 8006014:	04570457 	.word	0x04570457
 8006018:	04570457 	.word	0x04570457
 800601c:	04570155 	.word	0x04570155
 8006020:	02b40457 	.word	0x02b40457
 8006024:	04570457 	.word	0x04570457
 8006028:	04570457 	.word	0x04570457
 800602c:	04570457 	.word	0x04570457
 8006030:	04570457 	.word	0x04570457
 8006034:	04570457 	.word	0x04570457
 8006038:	030f02f5 	.word	0x030f02f5
 800603c:	039d039d 	.word	0x039d039d
 8006040:	033f039d 	.word	0x033f039d
 8006044:	0457030f 	.word	0x0457030f
 8006048:	03460457 	.word	0x03460457
 800604c:	03500457 	.word	0x03500457
 8006050:	006400cb 	.word	0x006400cb
 8006054:	04570420 	.word	0x04570420
 8006058:	04570428 	.word	0x04570428
 800605c:	045703f2 	.word	0x045703f2
 8006060:	03fa0457 	.word	0x03fa0457
 8006064:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006066:	930e      	str	r3, [sp, #56]	; 0x38
 8006068:	4240      	negs	r0, r0
 800606a:	900c      	str	r0, [sp, #48]	; 0x30
 800606c:	9b07      	ldr	r3, [sp, #28]
 800606e:	f043 0304 	orr.w	r3, r3, #4
 8006072:	9307      	str	r3, [sp, #28]
 8006074:	f898 3000 	ldrb.w	r3, [r8]
 8006078:	e792      	b.n	8005fa0 <_vfprintf_r+0xe8>
 800607a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800607c:	46ab      	mov	fp, r5
 800607e:	2100      	movs	r1, #0
 8006080:	6804      	ldr	r4, [r0, #0]
 8006082:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006086:	1d07      	adds	r7, r0, #4
 8006088:	9807      	ldr	r0, [sp, #28]
 800608a:	2330      	movs	r3, #48	; 0x30
 800608c:	2278      	movs	r2, #120	; 0x78
 800608e:	458b      	cmp	fp, r1
 8006090:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8006094:	f04f 0500 	mov.w	r5, #0
 8006098:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 800609c:	f040 0302 	orr.w	r3, r0, #2
 80060a0:	f2c0 83fb 	blt.w	800689a <_vfprintf_r+0x9e2>
 80060a4:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 80060a8:	f043 0302 	orr.w	r3, r3, #2
 80060ac:	9307      	str	r3, [sp, #28]
 80060ae:	ea54 0305 	orrs.w	r3, r4, r5
 80060b2:	970e      	str	r7, [sp, #56]	; 0x38
 80060b4:	f000 83cc 	beq.w	8006850 <_vfprintf_r+0x998>
 80060b8:	460f      	mov	r7, r1
 80060ba:	9211      	str	r2, [sp, #68]	; 0x44
 80060bc:	4820      	ldr	r0, [pc, #128]	; (8006140 <_vfprintf_r+0x288>)
 80060be:	e25d      	b.n	800657c <_vfprintf_r+0x6c4>
 80060c0:	9908      	ldr	r1, [sp, #32]
 80060c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80060c4:	f001 faf0 	bl	80076a8 <__swsetup_r>
 80060c8:	2800      	cmp	r0, #0
 80060ca:	f041 803f 	bne.w	800714c <_vfprintf_r+0x1294>
 80060ce:	9b08      	ldr	r3, [sp, #32]
 80060d0:	899b      	ldrh	r3, [r3, #12]
 80060d2:	f003 031a 	and.w	r3, r3, #26
 80060d6:	2b0a      	cmp	r3, #10
 80060d8:	f47f af1f 	bne.w	8005f1a <_vfprintf_r+0x62>
 80060dc:	9908      	ldr	r1, [sp, #32]
 80060de:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f6ff af19 	blt.w	8005f1a <_vfprintf_r+0x62>
 80060e8:	4623      	mov	r3, r4
 80060ea:	4632      	mov	r2, r6
 80060ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80060ee:	f001 fa7f 	bl	80075f0 <__sbprintf>
 80060f2:	b045      	add	sp, #276	; 0x114
 80060f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f8:	aa27      	add	r2, sp, #156	; 0x9c
 80060fa:	9908      	ldr	r1, [sp, #32]
 80060fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80060fe:	f004 f931 	bl	800a364 <__sprint_r>
 8006102:	b948      	cbnz	r0, 8006118 <_vfprintf_r+0x260>
 8006104:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006108:	e736      	b.n	8005f78 <_vfprintf_r+0xc0>
 800610a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800610c:	b123      	cbz	r3, 8006118 <_vfprintf_r+0x260>
 800610e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006110:	9908      	ldr	r1, [sp, #32]
 8006112:	aa27      	add	r2, sp, #156	; 0x9c
 8006114:	f004 f926 	bl	800a364 <__sprint_r>
 8006118:	9b08      	ldr	r3, [sp, #32]
 800611a:	899b      	ldrh	r3, [r3, #12]
 800611c:	0659      	lsls	r1, r3, #25
 800611e:	f101 8015 	bmi.w	800714c <_vfprintf_r+0x1294>
 8006122:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006124:	b045      	add	sp, #276	; 0x114
 8006126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800612c:	f002 fc02 	bl	8008934 <__sinit>
 8006130:	e6d8      	b.n	8005ee4 <_vfprintf_r+0x2c>
 8006132:	bf00      	nop
 8006134:	f3af 8000 	nop.w
	...
 8006140:	0800ad80 	.word	0x0800ad80
 8006144:	0800adb0 	.word	0x0800adb0
 8006148:	9311      	str	r3, [sp, #68]	; 0x44
 800614a:	46ab      	mov	fp, r5
 800614c:	2a00      	cmp	r2, #0
 800614e:	f041 8232 	bne.w	80075b6 <_vfprintf_r+0x16fe>
 8006152:	9a07      	ldr	r2, [sp, #28]
 8006154:	f012 0320 	ands.w	r3, r2, #32
 8006158:	d064      	beq.n	8006224 <_vfprintf_r+0x36c>
 800615a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800615c:	3707      	adds	r7, #7
 800615e:	f027 0307 	bic.w	r3, r7, #7
 8006162:	2700      	movs	r7, #0
 8006164:	f103 0108 	add.w	r1, r3, #8
 8006168:	45bb      	cmp	fp, r7
 800616a:	910e      	str	r1, [sp, #56]	; 0x38
 800616c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006170:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006174:	f2c0 86ba 	blt.w	8006eec <_vfprintf_r+0x1034>
 8006178:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800617c:	9307      	str	r3, [sp, #28]
 800617e:	ea54 0305 	orrs.w	r3, r4, r5
 8006182:	f000 8382 	beq.w	800688a <_vfprintf_r+0x9d2>
 8006186:	ae34      	add	r6, sp, #208	; 0xd0
 8006188:	08e2      	lsrs	r2, r4, #3
 800618a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800618e:	08e9      	lsrs	r1, r5, #3
 8006190:	f004 0307 	and.w	r3, r4, #7
 8006194:	460d      	mov	r5, r1
 8006196:	4614      	mov	r4, r2
 8006198:	3330      	adds	r3, #48	; 0x30
 800619a:	ea54 0205 	orrs.w	r2, r4, r5
 800619e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80061a2:	d1f1      	bne.n	8006188 <_vfprintf_r+0x2d0>
 80061a4:	9a07      	ldr	r2, [sp, #28]
 80061a6:	07d2      	lsls	r2, r2, #31
 80061a8:	f140 8096 	bpl.w	80062d8 <_vfprintf_r+0x420>
 80061ac:	2b30      	cmp	r3, #48	; 0x30
 80061ae:	f000 8093 	beq.w	80062d8 <_vfprintf_r+0x420>
 80061b2:	2230      	movs	r2, #48	; 0x30
 80061b4:	1e73      	subs	r3, r6, #1
 80061b6:	f806 2c01 	strb.w	r2, [r6, #-1]
 80061ba:	aa34      	add	r2, sp, #208	; 0xd0
 80061bc:	1ad2      	subs	r2, r2, r3
 80061be:	920d      	str	r2, [sp, #52]	; 0x34
 80061c0:	461e      	mov	r6, r3
 80061c2:	e08c      	b.n	80062de <_vfprintf_r+0x426>
 80061c4:	f898 3000 	ldrb.w	r3, [r8]
 80061c8:	2b2a      	cmp	r3, #42	; 0x2a
 80061ca:	f108 0401 	add.w	r4, r8, #1
 80061ce:	f001 81d0 	beq.w	8007572 <_vfprintf_r+0x16ba>
 80061d2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80061d6:	2809      	cmp	r0, #9
 80061d8:	bf98      	it	ls
 80061da:	2500      	movls	r5, #0
 80061dc:	f201 816c 	bhi.w	80074b8 <_vfprintf_r+0x1600>
 80061e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80061e4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80061e8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80061ec:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80061f0:	2809      	cmp	r0, #9
 80061f2:	d9f5      	bls.n	80061e0 <_vfprintf_r+0x328>
 80061f4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80061f8:	46a0      	mov	r8, r4
 80061fa:	e6d3      	b.n	8005fa4 <_vfprintf_r+0xec>
 80061fc:	9b07      	ldr	r3, [sp, #28]
 80061fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006202:	9307      	str	r3, [sp, #28]
 8006204:	f898 3000 	ldrb.w	r3, [r8]
 8006208:	e6ca      	b.n	8005fa0 <_vfprintf_r+0xe8>
 800620a:	9311      	str	r3, [sp, #68]	; 0x44
 800620c:	46ab      	mov	fp, r5
 800620e:	2a00      	cmp	r2, #0
 8006210:	f041 81d9 	bne.w	80075c6 <_vfprintf_r+0x170e>
 8006214:	9b07      	ldr	r3, [sp, #28]
 8006216:	f043 0310 	orr.w	r3, r3, #16
 800621a:	9307      	str	r3, [sp, #28]
 800621c:	9a07      	ldr	r2, [sp, #28]
 800621e:	f012 0320 	ands.w	r3, r2, #32
 8006222:	d19a      	bne.n	800615a <_vfprintf_r+0x2a2>
 8006224:	9907      	ldr	r1, [sp, #28]
 8006226:	f011 0210 	ands.w	r2, r1, #16
 800622a:	f000 8634 	beq.w	8006e96 <_vfprintf_r+0xfde>
 800622e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006230:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006234:	f1bb 0f00 	cmp.w	fp, #0
 8006238:	6804      	ldr	r4, [r0, #0]
 800623a:	f100 0704 	add.w	r7, r0, #4
 800623e:	f04f 0500 	mov.w	r5, #0
 8006242:	f2c0 8652 	blt.w	8006eea <_vfprintf_r+0x1032>
 8006246:	460a      	mov	r2, r1
 8006248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800624c:	9207      	str	r2, [sp, #28]
 800624e:	ea54 0205 	orrs.w	r2, r4, r5
 8006252:	970e      	str	r7, [sp, #56]	; 0x38
 8006254:	f000 8319 	beq.w	800688a <_vfprintf_r+0x9d2>
 8006258:	461f      	mov	r7, r3
 800625a:	e794      	b.n	8006186 <_vfprintf_r+0x2ce>
 800625c:	9311      	str	r3, [sp, #68]	; 0x44
 800625e:	46ab      	mov	fp, r5
 8006260:	2a00      	cmp	r2, #0
 8006262:	f041 81a0 	bne.w	80075a6 <_vfprintf_r+0x16ee>
 8006266:	9b07      	ldr	r3, [sp, #28]
 8006268:	f043 0310 	orr.w	r3, r3, #16
 800626c:	9307      	str	r3, [sp, #28]
 800626e:	9a07      	ldr	r2, [sp, #28]
 8006270:	f012 0320 	ands.w	r3, r2, #32
 8006274:	f000 84fa 	beq.w	8006c6c <_vfprintf_r+0xdb4>
 8006278:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800627a:	3707      	adds	r7, #7
 800627c:	f027 0307 	bic.w	r3, r7, #7
 8006280:	2700      	movs	r7, #0
 8006282:	f103 0108 	add.w	r1, r3, #8
 8006286:	45bb      	cmp	fp, r7
 8006288:	910e      	str	r1, [sp, #56]	; 0x38
 800628a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800628e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006292:	f2c0 8523 	blt.w	8006cdc <_vfprintf_r+0xe24>
 8006296:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800629a:	9307      	str	r3, [sp, #28]
 800629c:	ea54 0305 	orrs.w	r3, r4, r5
 80062a0:	f000 81bc 	beq.w	800661c <_vfprintf_r+0x764>
 80062a4:	2d00      	cmp	r5, #0
 80062a6:	bf08      	it	eq
 80062a8:	2c0a      	cmpeq	r4, #10
 80062aa:	f0c0 851b 	bcc.w	8006ce4 <_vfprintf_r+0xe2c>
 80062ae:	ae34      	add	r6, sp, #208	; 0xd0
 80062b0:	4620      	mov	r0, r4
 80062b2:	4629      	mov	r1, r5
 80062b4:	220a      	movs	r2, #10
 80062b6:	2300      	movs	r3, #0
 80062b8:	f004 fa38 	bl	800a72c <__aeabi_uldivmod>
 80062bc:	3230      	adds	r2, #48	; 0x30
 80062be:	f806 2d01 	strb.w	r2, [r6, #-1]!
 80062c2:	4620      	mov	r0, r4
 80062c4:	4629      	mov	r1, r5
 80062c6:	2300      	movs	r3, #0
 80062c8:	220a      	movs	r2, #10
 80062ca:	f004 fa2f 	bl	800a72c <__aeabi_uldivmod>
 80062ce:	4604      	mov	r4, r0
 80062d0:	460d      	mov	r5, r1
 80062d2:	ea54 0305 	orrs.w	r3, r4, r5
 80062d6:	d1eb      	bne.n	80062b0 <_vfprintf_r+0x3f8>
 80062d8:	ab34      	add	r3, sp, #208	; 0xd0
 80062da:	1b9b      	subs	r3, r3, r6
 80062dc:	930d      	str	r3, [sp, #52]	; 0x34
 80062de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062e0:	455b      	cmp	r3, fp
 80062e2:	bfb8      	it	lt
 80062e4:	465b      	movlt	r3, fp
 80062e6:	9309      	str	r3, [sp, #36]	; 0x24
 80062e8:	2300      	movs	r3, #0
 80062ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80062ec:	b117      	cbz	r7, 80062f4 <_vfprintf_r+0x43c>
 80062ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f0:	3301      	adds	r3, #1
 80062f2:	9309      	str	r3, [sp, #36]	; 0x24
 80062f4:	9b07      	ldr	r3, [sp, #28]
 80062f6:	f013 0302 	ands.w	r3, r3, #2
 80062fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80062fc:	d002      	beq.n	8006304 <_vfprintf_r+0x44c>
 80062fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006300:	3302      	adds	r3, #2
 8006302:	9309      	str	r3, [sp, #36]	; 0x24
 8006304:	9b07      	ldr	r3, [sp, #28]
 8006306:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800630a:	9310      	str	r3, [sp, #64]	; 0x40
 800630c:	f040 82d2 	bne.w	80068b4 <_vfprintf_r+0x9fc>
 8006310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006314:	1a9d      	subs	r5, r3, r2
 8006316:	2d00      	cmp	r5, #0
 8006318:	f340 82cc 	ble.w	80068b4 <_vfprintf_r+0x9fc>
 800631c:	2d10      	cmp	r5, #16
 800631e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8006320:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8006322:	4fa8      	ldr	r7, [pc, #672]	; (80065c4 <_vfprintf_r+0x70c>)
 8006324:	dd27      	ble.n	8006376 <_vfprintf_r+0x4be>
 8006326:	9618      	str	r6, [sp, #96]	; 0x60
 8006328:	4648      	mov	r0, r9
 800632a:	2410      	movs	r4, #16
 800632c:	46b9      	mov	r9, r7
 800632e:	9e08      	ldr	r6, [sp, #32]
 8006330:	462f      	mov	r7, r5
 8006332:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006334:	e004      	b.n	8006340 <_vfprintf_r+0x488>
 8006336:	3f10      	subs	r7, #16
 8006338:	2f10      	cmp	r7, #16
 800633a:	f100 0008 	add.w	r0, r0, #8
 800633e:	dd16      	ble.n	800636e <_vfprintf_r+0x4b6>
 8006340:	3201      	adds	r2, #1
 8006342:	4ba0      	ldr	r3, [pc, #640]	; (80065c4 <_vfprintf_r+0x70c>)
 8006344:	9228      	str	r2, [sp, #160]	; 0xa0
 8006346:	3110      	adds	r1, #16
 8006348:	2a07      	cmp	r2, #7
 800634a:	9129      	str	r1, [sp, #164]	; 0xa4
 800634c:	e880 0018 	stmia.w	r0, {r3, r4}
 8006350:	ddf1      	ble.n	8006336 <_vfprintf_r+0x47e>
 8006352:	aa27      	add	r2, sp, #156	; 0x9c
 8006354:	4631      	mov	r1, r6
 8006356:	4628      	mov	r0, r5
 8006358:	f004 f804 	bl	800a364 <__sprint_r>
 800635c:	2800      	cmp	r0, #0
 800635e:	f47f aedb 	bne.w	8006118 <_vfprintf_r+0x260>
 8006362:	3f10      	subs	r7, #16
 8006364:	2f10      	cmp	r7, #16
 8006366:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8006368:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800636a:	a834      	add	r0, sp, #208	; 0xd0
 800636c:	dce8      	bgt.n	8006340 <_vfprintf_r+0x488>
 800636e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8006370:	463d      	mov	r5, r7
 8006372:	464f      	mov	r7, r9
 8006374:	4681      	mov	r9, r0
 8006376:	3201      	adds	r2, #1
 8006378:	186c      	adds	r4, r5, r1
 800637a:	2a07      	cmp	r2, #7
 800637c:	9429      	str	r4, [sp, #164]	; 0xa4
 800637e:	9228      	str	r2, [sp, #160]	; 0xa0
 8006380:	f8c9 7000 	str.w	r7, [r9]
 8006384:	f8c9 5004 	str.w	r5, [r9, #4]
 8006388:	f300 8428 	bgt.w	8006bdc <_vfprintf_r+0xd24>
 800638c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006390:	f109 0908 	add.w	r9, r9, #8
 8006394:	b177      	cbz	r7, 80063b4 <_vfprintf_r+0x4fc>
 8006396:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006398:	3301      	adds	r3, #1
 800639a:	3401      	adds	r4, #1
 800639c:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 80063a0:	2201      	movs	r2, #1
 80063a2:	2b07      	cmp	r3, #7
 80063a4:	9429      	str	r4, [sp, #164]	; 0xa4
 80063a6:	9328      	str	r3, [sp, #160]	; 0xa0
 80063a8:	e889 0006 	stmia.w	r9, {r1, r2}
 80063ac:	f300 83a0 	bgt.w	8006af0 <_vfprintf_r+0xc38>
 80063b0:	f109 0908 	add.w	r9, r9, #8
 80063b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063b6:	b16b      	cbz	r3, 80063d4 <_vfprintf_r+0x51c>
 80063b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80063ba:	3301      	adds	r3, #1
 80063bc:	3402      	adds	r4, #2
 80063be:	a920      	add	r1, sp, #128	; 0x80
 80063c0:	2202      	movs	r2, #2
 80063c2:	2b07      	cmp	r3, #7
 80063c4:	9429      	str	r4, [sp, #164]	; 0xa4
 80063c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80063c8:	e889 0006 	stmia.w	r9, {r1, r2}
 80063cc:	f300 839c 	bgt.w	8006b08 <_vfprintf_r+0xc50>
 80063d0:	f109 0908 	add.w	r9, r9, #8
 80063d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063d6:	2b80      	cmp	r3, #128	; 0x80
 80063d8:	f000 82d0 	beq.w	800697c <_vfprintf_r+0xac4>
 80063dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063de:	ebc3 070b 	rsb	r7, r3, fp
 80063e2:	2f00      	cmp	r7, #0
 80063e4:	dd33      	ble.n	800644e <_vfprintf_r+0x596>
 80063e6:	4a78      	ldr	r2, [pc, #480]	; (80065c8 <_vfprintf_r+0x710>)
 80063e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80063ea:	920f      	str	r2, [sp, #60]	; 0x3c
 80063ec:	2f10      	cmp	r7, #16
 80063ee:	dd22      	ble.n	8006436 <_vfprintf_r+0x57e>
 80063f0:	4622      	mov	r2, r4
 80063f2:	f04f 0b10 	mov.w	fp, #16
 80063f6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80063f8:	9c08      	ldr	r4, [sp, #32]
 80063fa:	e004      	b.n	8006406 <_vfprintf_r+0x54e>
 80063fc:	3f10      	subs	r7, #16
 80063fe:	2f10      	cmp	r7, #16
 8006400:	f109 0908 	add.w	r9, r9, #8
 8006404:	dd16      	ble.n	8006434 <_vfprintf_r+0x57c>
 8006406:	3301      	adds	r3, #1
 8006408:	3210      	adds	r2, #16
 800640a:	2b07      	cmp	r3, #7
 800640c:	9229      	str	r2, [sp, #164]	; 0xa4
 800640e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006410:	e889 0c00 	stmia.w	r9, {sl, fp}
 8006414:	ddf2      	ble.n	80063fc <_vfprintf_r+0x544>
 8006416:	aa27      	add	r2, sp, #156	; 0x9c
 8006418:	4621      	mov	r1, r4
 800641a:	4628      	mov	r0, r5
 800641c:	f003 ffa2 	bl	800a364 <__sprint_r>
 8006420:	2800      	cmp	r0, #0
 8006422:	f47f ae79 	bne.w	8006118 <_vfprintf_r+0x260>
 8006426:	3f10      	subs	r7, #16
 8006428:	2f10      	cmp	r7, #16
 800642a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800642c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800642e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006432:	dce8      	bgt.n	8006406 <_vfprintf_r+0x54e>
 8006434:	4614      	mov	r4, r2
 8006436:	3301      	adds	r3, #1
 8006438:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800643a:	9328      	str	r3, [sp, #160]	; 0xa0
 800643c:	443c      	add	r4, r7
 800643e:	2b07      	cmp	r3, #7
 8006440:	9429      	str	r4, [sp, #164]	; 0xa4
 8006442:	e889 0084 	stmia.w	r9, {r2, r7}
 8006446:	f300 8347 	bgt.w	8006ad8 <_vfprintf_r+0xc20>
 800644a:	f109 0908 	add.w	r9, r9, #8
 800644e:	9b07      	ldr	r3, [sp, #28]
 8006450:	05dd      	lsls	r5, r3, #23
 8006452:	f100 8231 	bmi.w	80068b8 <_vfprintf_r+0xa00>
 8006456:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006458:	990d      	ldr	r1, [sp, #52]	; 0x34
 800645a:	f8c9 6000 	str.w	r6, [r9]
 800645e:	3301      	adds	r3, #1
 8006460:	440c      	add	r4, r1
 8006462:	2b07      	cmp	r3, #7
 8006464:	9429      	str	r4, [sp, #164]	; 0xa4
 8006466:	f8c9 1004 	str.w	r1, [r9, #4]
 800646a:	9328      	str	r3, [sp, #160]	; 0xa0
 800646c:	f300 831e 	bgt.w	8006aac <_vfprintf_r+0xbf4>
 8006470:	f109 0908 	add.w	r9, r9, #8
 8006474:	9b07      	ldr	r3, [sp, #28]
 8006476:	0758      	lsls	r0, r3, #29
 8006478:	d53f      	bpl.n	80064fa <_vfprintf_r+0x642>
 800647a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800647c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800647e:	1a9d      	subs	r5, r3, r2
 8006480:	2d00      	cmp	r5, #0
 8006482:	dd3a      	ble.n	80064fa <_vfprintf_r+0x642>
 8006484:	2d10      	cmp	r5, #16
 8006486:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006488:	4f4e      	ldr	r7, [pc, #312]	; (80065c4 <_vfprintf_r+0x70c>)
 800648a:	dd23      	ble.n	80064d4 <_vfprintf_r+0x61c>
 800648c:	4622      	mov	r2, r4
 800648e:	2610      	movs	r6, #16
 8006490:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006494:	9c08      	ldr	r4, [sp, #32]
 8006496:	e004      	b.n	80064a2 <_vfprintf_r+0x5ea>
 8006498:	3d10      	subs	r5, #16
 800649a:	2d10      	cmp	r5, #16
 800649c:	f109 0908 	add.w	r9, r9, #8
 80064a0:	dd17      	ble.n	80064d2 <_vfprintf_r+0x61a>
 80064a2:	3301      	adds	r3, #1
 80064a4:	4947      	ldr	r1, [pc, #284]	; (80065c4 <_vfprintf_r+0x70c>)
 80064a6:	9328      	str	r3, [sp, #160]	; 0xa0
 80064a8:	3210      	adds	r2, #16
 80064aa:	2b07      	cmp	r3, #7
 80064ac:	9229      	str	r2, [sp, #164]	; 0xa4
 80064ae:	e889 0042 	stmia.w	r9, {r1, r6}
 80064b2:	ddf1      	ble.n	8006498 <_vfprintf_r+0x5e0>
 80064b4:	aa27      	add	r2, sp, #156	; 0x9c
 80064b6:	4621      	mov	r1, r4
 80064b8:	4658      	mov	r0, fp
 80064ba:	f003 ff53 	bl	800a364 <__sprint_r>
 80064be:	2800      	cmp	r0, #0
 80064c0:	f47f ae2a 	bne.w	8006118 <_vfprintf_r+0x260>
 80064c4:	3d10      	subs	r5, #16
 80064c6:	2d10      	cmp	r5, #16
 80064c8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80064ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80064cc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80064d0:	dce7      	bgt.n	80064a2 <_vfprintf_r+0x5ea>
 80064d2:	4614      	mov	r4, r2
 80064d4:	3301      	adds	r3, #1
 80064d6:	442c      	add	r4, r5
 80064d8:	2b07      	cmp	r3, #7
 80064da:	9429      	str	r4, [sp, #164]	; 0xa4
 80064dc:	9328      	str	r3, [sp, #160]	; 0xa0
 80064de:	f8c9 7000 	str.w	r7, [r9]
 80064e2:	f8c9 5004 	str.w	r5, [r9, #4]
 80064e6:	dd08      	ble.n	80064fa <_vfprintf_r+0x642>
 80064e8:	aa27      	add	r2, sp, #156	; 0x9c
 80064ea:	9908      	ldr	r1, [sp, #32]
 80064ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80064ee:	f003 ff39 	bl	800a364 <__sprint_r>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	f47f ae10 	bne.w	8006118 <_vfprintf_r+0x260>
 80064f8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80064fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006500:	428a      	cmp	r2, r1
 8006502:	bfac      	ite	ge
 8006504:	189b      	addge	r3, r3, r2
 8006506:	185b      	addlt	r3, r3, r1
 8006508:	930b      	str	r3, [sp, #44]	; 0x2c
 800650a:	2c00      	cmp	r4, #0
 800650c:	f040 82da 	bne.w	8006ac4 <_vfprintf_r+0xc0c>
 8006510:	2300      	movs	r3, #0
 8006512:	9328      	str	r3, [sp, #160]	; 0xa0
 8006514:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006518:	e50f      	b.n	8005f3a <_vfprintf_r+0x82>
 800651a:	9311      	str	r3, [sp, #68]	; 0x44
 800651c:	46ab      	mov	fp, r5
 800651e:	2a00      	cmp	r2, #0
 8006520:	f041 803d 	bne.w	800759e <_vfprintf_r+0x16e6>
 8006524:	9b07      	ldr	r3, [sp, #28]
 8006526:	4829      	ldr	r0, [pc, #164]	; (80065cc <_vfprintf_r+0x714>)
 8006528:	069c      	lsls	r4, r3, #26
 800652a:	f140 8146 	bpl.w	80067ba <_vfprintf_r+0x902>
 800652e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006530:	3707      	adds	r7, #7
 8006532:	f027 0307 	bic.w	r3, r7, #7
 8006536:	e9d3 4500 	ldrd	r4, r5, [r3]
 800653a:	f103 0208 	add.w	r2, r3, #8
 800653e:	920e      	str	r2, [sp, #56]	; 0x38
 8006540:	9a07      	ldr	r2, [sp, #28]
 8006542:	f012 0701 	ands.w	r7, r2, #1
 8006546:	f000 82eb 	beq.w	8006b20 <_vfprintf_r+0xc68>
 800654a:	ea54 0305 	orrs.w	r3, r4, r5
 800654e:	f000 8582 	beq.w	8007056 <_vfprintf_r+0x119e>
 8006552:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8006556:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 800655a:	2700      	movs	r7, #0
 800655c:	9a07      	ldr	r2, [sp, #28]
 800655e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006562:	2330      	movs	r3, #48	; 0x30
 8006564:	45bb      	cmp	fp, r7
 8006566:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 800656a:	f042 0302 	orr.w	r3, r2, #2
 800656e:	f2c0 873b 	blt.w	80073e8 <_vfprintf_r+0x1530>
 8006572:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006576:	f043 0302 	orr.w	r3, r3, #2
 800657a:	9307      	str	r3, [sp, #28]
 800657c:	ae34      	add	r6, sp, #208	; 0xd0
 800657e:	0923      	lsrs	r3, r4, #4
 8006580:	f004 010f 	and.w	r1, r4, #15
 8006584:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006588:	092a      	lsrs	r2, r5, #4
 800658a:	461c      	mov	r4, r3
 800658c:	4615      	mov	r5, r2
 800658e:	5c43      	ldrb	r3, [r0, r1]
 8006590:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8006594:	ea54 0305 	orrs.w	r3, r4, r5
 8006598:	d1f1      	bne.n	800657e <_vfprintf_r+0x6c6>
 800659a:	e69d      	b.n	80062d8 <_vfprintf_r+0x420>
 800659c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800659e:	9311      	str	r3, [sp, #68]	; 0x44
 80065a0:	680a      	ldr	r2, [r1, #0]
 80065a2:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 80065a6:	2300      	movs	r3, #0
 80065a8:	460a      	mov	r2, r1
 80065aa:	461f      	mov	r7, r3
 80065ac:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80065b0:	3204      	adds	r2, #4
 80065b2:	2301      	movs	r3, #1
 80065b4:	9309      	str	r3, [sp, #36]	; 0x24
 80065b6:	46bb      	mov	fp, r7
 80065b8:	9713      	str	r7, [sp, #76]	; 0x4c
 80065ba:	920e      	str	r2, [sp, #56]	; 0x38
 80065bc:	930d      	str	r3, [sp, #52]	; 0x34
 80065be:	ae2a      	add	r6, sp, #168	; 0xa8
 80065c0:	e698      	b.n	80062f4 <_vfprintf_r+0x43c>
 80065c2:	bf00      	nop
 80065c4:	0800adc0 	.word	0x0800adc0
 80065c8:	0800adb0 	.word	0x0800adb0
 80065cc:	0800ad6c 	.word	0x0800ad6c
 80065d0:	9311      	str	r3, [sp, #68]	; 0x44
 80065d2:	46ab      	mov	fp, r5
 80065d4:	2a00      	cmp	r2, #0
 80065d6:	f040 87ea 	bne.w	80075ae <_vfprintf_r+0x16f6>
 80065da:	9b07      	ldr	r3, [sp, #28]
 80065dc:	069b      	lsls	r3, r3, #26
 80065de:	d574      	bpl.n	80066ca <_vfprintf_r+0x812>
 80065e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80065e2:	3707      	adds	r7, #7
 80065e4:	f027 0707 	bic.w	r7, r7, #7
 80065e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ec:	f107 0108 	add.w	r1, r7, #8
 80065f0:	910e      	str	r1, [sp, #56]	; 0x38
 80065f2:	4614      	mov	r4, r2
 80065f4:	461d      	mov	r5, r3
 80065f6:	2a00      	cmp	r2, #0
 80065f8:	f173 0300 	sbcs.w	r3, r3, #0
 80065fc:	f2c0 843a 	blt.w	8006e74 <_vfprintf_r+0xfbc>
 8006600:	f1bb 0f00 	cmp.w	fp, #0
 8006604:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006608:	f2c0 8368 	blt.w	8006cdc <_vfprintf_r+0xe24>
 800660c:	9b07      	ldr	r3, [sp, #28]
 800660e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006612:	9307      	str	r3, [sp, #28]
 8006614:	ea54 0305 	orrs.w	r3, r4, r5
 8006618:	f47f ae44 	bne.w	80062a4 <_vfprintf_r+0x3ec>
 800661c:	f1bb 0f00 	cmp.w	fp, #0
 8006620:	f040 8408 	bne.w	8006e34 <_vfprintf_r+0xf7c>
 8006624:	f04f 0b00 	mov.w	fp, #0
 8006628:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800662c:	ae34      	add	r6, sp, #208	; 0xd0
 800662e:	e656      	b.n	80062de <_vfprintf_r+0x426>
 8006630:	9b07      	ldr	r3, [sp, #28]
 8006632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006636:	9307      	str	r3, [sp, #28]
 8006638:	f898 3000 	ldrb.w	r3, [r8]
 800663c:	e4b0      	b.n	8005fa0 <_vfprintf_r+0xe8>
 800663e:	f898 3000 	ldrb.w	r3, [r8]
 8006642:	2b6c      	cmp	r3, #108	; 0x6c
 8006644:	f000 85d5 	beq.w	80071f2 <_vfprintf_r+0x133a>
 8006648:	9807      	ldr	r0, [sp, #28]
 800664a:	f040 0010 	orr.w	r0, r0, #16
 800664e:	9007      	str	r0, [sp, #28]
 8006650:	e4a6      	b.n	8005fa0 <_vfprintf_r+0xe8>
 8006652:	2a00      	cmp	r2, #0
 8006654:	f040 879f 	bne.w	8007596 <_vfprintf_r+0x16de>
 8006658:	9b07      	ldr	r3, [sp, #28]
 800665a:	069f      	lsls	r7, r3, #26
 800665c:	f140 84e4 	bpl.w	8007028 <_vfprintf_r+0x1170>
 8006660:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006662:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006664:	6813      	ldr	r3, [r2, #0]
 8006666:	17cd      	asrs	r5, r1, #31
 8006668:	4608      	mov	r0, r1
 800666a:	3204      	adds	r2, #4
 800666c:	4629      	mov	r1, r5
 800666e:	920e      	str	r2, [sp, #56]	; 0x38
 8006670:	e9c3 0100 	strd	r0, r1, [r3]
 8006674:	e461      	b.n	8005f3a <_vfprintf_r+0x82>
 8006676:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	930c      	str	r3, [sp, #48]	; 0x30
 800667c:	4618      	mov	r0, r3
 800667e:	2800      	cmp	r0, #0
 8006680:	4623      	mov	r3, r4
 8006682:	f103 0304 	add.w	r3, r3, #4
 8006686:	f6ff aced 	blt.w	8006064 <_vfprintf_r+0x1ac>
 800668a:	930e      	str	r3, [sp, #56]	; 0x38
 800668c:	f898 3000 	ldrb.w	r3, [r8]
 8006690:	e486      	b.n	8005fa0 <_vfprintf_r+0xe8>
 8006692:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006696:	2300      	movs	r3, #0
 8006698:	461c      	mov	r4, r3
 800669a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800669e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80066a2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80066a6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80066aa:	2809      	cmp	r0, #9
 80066ac:	d9f5      	bls.n	800669a <_vfprintf_r+0x7e2>
 80066ae:	940c      	str	r4, [sp, #48]	; 0x30
 80066b0:	e478      	b.n	8005fa4 <_vfprintf_r+0xec>
 80066b2:	9311      	str	r3, [sp, #68]	; 0x44
 80066b4:	46ab      	mov	fp, r5
 80066b6:	2a00      	cmp	r2, #0
 80066b8:	f040 8769 	bne.w	800758e <_vfprintf_r+0x16d6>
 80066bc:	9b07      	ldr	r3, [sp, #28]
 80066be:	f043 0310 	orr.w	r3, r3, #16
 80066c2:	9307      	str	r3, [sp, #28]
 80066c4:	9b07      	ldr	r3, [sp, #28]
 80066c6:	069b      	lsls	r3, r3, #26
 80066c8:	d48a      	bmi.n	80065e0 <_vfprintf_r+0x728>
 80066ca:	9b07      	ldr	r3, [sp, #28]
 80066cc:	06df      	lsls	r7, r3, #27
 80066ce:	f100 8294 	bmi.w	8006bfa <_vfprintf_r+0xd42>
 80066d2:	9b07      	ldr	r3, [sp, #28]
 80066d4:	065e      	lsls	r6, r3, #25
 80066d6:	f140 8290 	bpl.w	8006bfa <_vfprintf_r+0xd42>
 80066da:	990e      	ldr	r1, [sp, #56]	; 0x38
 80066dc:	f9b1 4000 	ldrsh.w	r4, [r1]
 80066e0:	3104      	adds	r1, #4
 80066e2:	17e5      	asrs	r5, r4, #31
 80066e4:	4622      	mov	r2, r4
 80066e6:	462b      	mov	r3, r5
 80066e8:	910e      	str	r1, [sp, #56]	; 0x38
 80066ea:	e784      	b.n	80065f6 <_vfprintf_r+0x73e>
 80066ec:	9311      	str	r3, [sp, #68]	; 0x44
 80066ee:	46ab      	mov	fp, r5
 80066f0:	2a00      	cmp	r2, #0
 80066f2:	f040 8770 	bne.w	80075d6 <_vfprintf_r+0x171e>
 80066f6:	9b07      	ldr	r3, [sp, #28]
 80066f8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80066fa:	071d      	lsls	r5, r3, #28
 80066fc:	f107 0707 	add.w	r7, r7, #7
 8006700:	f140 8487 	bpl.w	8007012 <_vfprintf_r+0x115a>
 8006704:	f027 0307 	bic.w	r3, r7, #7
 8006708:	ed93 7b00 	vldr	d7, [r3]
 800670c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006710:	f103 0208 	add.w	r2, r3, #8
 8006714:	920e      	str	r2, [sp, #56]	; 0x38
 8006716:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800671a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800671e:	911a      	str	r1, [sp, #104]	; 0x68
 8006720:	931b      	str	r3, [sp, #108]	; 0x6c
 8006722:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8006726:	f04f 32ff 	mov.w	r2, #4294967295
 800672a:	4620      	mov	r0, r4
 800672c:	4629      	mov	r1, r5
 800672e:	4bb5      	ldr	r3, [pc, #724]	; (8006a04 <_vfprintf_r+0xb4c>)
 8006730:	f7fd fd58 	bl	80041e4 <__aeabi_dcmpun>
 8006734:	2800      	cmp	r0, #0
 8006736:	f040 83eb 	bne.w	8006f10 <_vfprintf_r+0x1058>
 800673a:	f04f 32ff 	mov.w	r2, #4294967295
 800673e:	4bb1      	ldr	r3, [pc, #708]	; (8006a04 <_vfprintf_r+0xb4c>)
 8006740:	4620      	mov	r0, r4
 8006742:	4629      	mov	r1, r5
 8006744:	f7fd fd30 	bl	80041a8 <__aeabi_dcmple>
 8006748:	2800      	cmp	r0, #0
 800674a:	f040 83e1 	bne.w	8006f10 <_vfprintf_r+0x1058>
 800674e:	2200      	movs	r2, #0
 8006750:	2300      	movs	r3, #0
 8006752:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006756:	f7fd fd1d 	bl	8004194 <__aeabi_dcmplt>
 800675a:	2800      	cmp	r0, #0
 800675c:	f040 864a 	bne.w	80073f4 <_vfprintf_r+0x153c>
 8006760:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006764:	4ea8      	ldr	r6, [pc, #672]	; (8006a08 <_vfprintf_r+0xb50>)
 8006766:	4ba9      	ldr	r3, [pc, #676]	; (8006a0c <_vfprintf_r+0xb54>)
 8006768:	9907      	ldr	r1, [sp, #28]
 800676a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800676e:	9107      	str	r1, [sp, #28]
 8006770:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006772:	2203      	movs	r2, #3
 8006774:	f04f 0b00 	mov.w	fp, #0
 8006778:	9209      	str	r2, [sp, #36]	; 0x24
 800677a:	2947      	cmp	r1, #71	; 0x47
 800677c:	bfd8      	it	le
 800677e:	461e      	movle	r6, r3
 8006780:	920d      	str	r2, [sp, #52]	; 0x34
 8006782:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8006786:	e5b1      	b.n	80062ec <_vfprintf_r+0x434>
 8006788:	9b07      	ldr	r3, [sp, #28]
 800678a:	f043 0308 	orr.w	r3, r3, #8
 800678e:	9307      	str	r3, [sp, #28]
 8006790:	f898 3000 	ldrb.w	r3, [r8]
 8006794:	e404      	b.n	8005fa0 <_vfprintf_r+0xe8>
 8006796:	9311      	str	r3, [sp, #68]	; 0x44
 8006798:	46ab      	mov	fp, r5
 800679a:	2a00      	cmp	r2, #0
 800679c:	f43f ad67 	beq.w	800626e <_vfprintf_r+0x3b6>
 80067a0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80067a4:	e563      	b.n	800626e <_vfprintf_r+0x3b6>
 80067a6:	9311      	str	r3, [sp, #68]	; 0x44
 80067a8:	46ab      	mov	fp, r5
 80067aa:	2a00      	cmp	r2, #0
 80067ac:	f040 870f 	bne.w	80075ce <_vfprintf_r+0x1716>
 80067b0:	9b07      	ldr	r3, [sp, #28]
 80067b2:	4897      	ldr	r0, [pc, #604]	; (8006a10 <_vfprintf_r+0xb58>)
 80067b4:	069c      	lsls	r4, r3, #26
 80067b6:	f53f aeba 	bmi.w	800652e <_vfprintf_r+0x676>
 80067ba:	9b07      	ldr	r3, [sp, #28]
 80067bc:	06d9      	lsls	r1, r3, #27
 80067be:	f140 8398 	bpl.w	8006ef2 <_vfprintf_r+0x103a>
 80067c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067c4:	4613      	mov	r3, r2
 80067c6:	3304      	adds	r3, #4
 80067c8:	6814      	ldr	r4, [r2, #0]
 80067ca:	930e      	str	r3, [sp, #56]	; 0x38
 80067cc:	2500      	movs	r5, #0
 80067ce:	e6b7      	b.n	8006540 <_vfprintf_r+0x688>
 80067d0:	f898 3000 	ldrb.w	r3, [r8]
 80067d4:	2900      	cmp	r1, #0
 80067d6:	f47f abe3 	bne.w	8005fa0 <_vfprintf_r+0xe8>
 80067da:	2201      	movs	r2, #1
 80067dc:	2120      	movs	r1, #32
 80067de:	f7ff bbdf 	b.w	8005fa0 <_vfprintf_r+0xe8>
 80067e2:	9b07      	ldr	r3, [sp, #28]
 80067e4:	f043 0301 	orr.w	r3, r3, #1
 80067e8:	9307      	str	r3, [sp, #28]
 80067ea:	f898 3000 	ldrb.w	r3, [r8]
 80067ee:	f7ff bbd7 	b.w	8005fa0 <_vfprintf_r+0xe8>
 80067f2:	9b07      	ldr	r3, [sp, #28]
 80067f4:	f043 0320 	orr.w	r3, r3, #32
 80067f8:	9307      	str	r3, [sp, #28]
 80067fa:	f898 3000 	ldrb.w	r3, [r8]
 80067fe:	f7ff bbcf 	b.w	8005fa0 <_vfprintf_r+0xe8>
 8006802:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006804:	9311      	str	r3, [sp, #68]	; 0x44
 8006806:	6816      	ldr	r6, [r2, #0]
 8006808:	2400      	movs	r4, #0
 800680a:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 800680e:	1d17      	adds	r7, r2, #4
 8006810:	2e00      	cmp	r6, #0
 8006812:	f000 85b7 	beq.w	8007384 <_vfprintf_r+0x14cc>
 8006816:	2d00      	cmp	r5, #0
 8006818:	f2c0 8502 	blt.w	8007220 <_vfprintf_r+0x1368>
 800681c:	462a      	mov	r2, r5
 800681e:	4621      	mov	r1, r4
 8006820:	4630      	mov	r0, r6
 8006822:	f002 fed5 	bl	80095d0 <memchr>
 8006826:	2800      	cmp	r0, #0
 8006828:	f000 861c 	beq.w	8007464 <_vfprintf_r+0x15ac>
 800682c:	1b83      	subs	r3, r0, r6
 800682e:	930d      	str	r3, [sp, #52]	; 0x34
 8006830:	46a3      	mov	fp, r4
 8006832:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006836:	970e      	str	r7, [sp, #56]	; 0x38
 8006838:	9309      	str	r3, [sp, #36]	; 0x24
 800683a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800683e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006842:	e553      	b.n	80062ec <_vfprintf_r+0x434>
 8006844:	f898 3000 	ldrb.w	r3, [r8]
 8006848:	2201      	movs	r2, #1
 800684a:	212b      	movs	r1, #43	; 0x2b
 800684c:	f7ff bba8 	b.w	8005fa0 <_vfprintf_r+0xe8>
 8006850:	486f      	ldr	r0, [pc, #444]	; (8006a10 <_vfprintf_r+0xb58>)
 8006852:	9211      	str	r2, [sp, #68]	; 0x44
 8006854:	f1bb 0f00 	cmp.w	fp, #0
 8006858:	f040 8173 	bne.w	8006b42 <_vfprintf_r+0xc8a>
 800685c:	465f      	mov	r7, fp
 800685e:	e6e1      	b.n	8006624 <_vfprintf_r+0x76c>
 8006860:	9311      	str	r3, [sp, #68]	; 0x44
 8006862:	2a00      	cmp	r2, #0
 8006864:	f040 86ab 	bne.w	80075be <_vfprintf_r+0x1706>
 8006868:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800686a:	2a00      	cmp	r2, #0
 800686c:	f43f ac4d 	beq.w	800610a <_vfprintf_r+0x252>
 8006870:	2300      	movs	r3, #0
 8006872:	2101      	movs	r1, #1
 8006874:	461f      	mov	r7, r3
 8006876:	9109      	str	r1, [sp, #36]	; 0x24
 8006878:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800687c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006880:	469b      	mov	fp, r3
 8006882:	9313      	str	r3, [sp, #76]	; 0x4c
 8006884:	910d      	str	r1, [sp, #52]	; 0x34
 8006886:	ae2a      	add	r6, sp, #168	; 0xa8
 8006888:	e534      	b.n	80062f4 <_vfprintf_r+0x43c>
 800688a:	f1bb 0f00 	cmp.w	fp, #0
 800688e:	f000 85da 	beq.w	8007446 <_vfprintf_r+0x158e>
 8006892:	2700      	movs	r7, #0
 8006894:	2400      	movs	r4, #0
 8006896:	2500      	movs	r5, #0
 8006898:	e475      	b.n	8006186 <_vfprintf_r+0x2ce>
 800689a:	485d      	ldr	r0, [pc, #372]	; (8006a10 <_vfprintf_r+0xb58>)
 800689c:	9307      	str	r3, [sp, #28]
 800689e:	9211      	str	r2, [sp, #68]	; 0x44
 80068a0:	ea54 0305 	orrs.w	r3, r4, r5
 80068a4:	970e      	str	r7, [sp, #56]	; 0x38
 80068a6:	f04f 0700 	mov.w	r7, #0
 80068aa:	f47f ae67 	bne.w	800657c <_vfprintf_r+0x6c4>
 80068ae:	2400      	movs	r4, #0
 80068b0:	2500      	movs	r5, #0
 80068b2:	e663      	b.n	800657c <_vfprintf_r+0x6c4>
 80068b4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80068b6:	e56d      	b.n	8006394 <_vfprintf_r+0x4dc>
 80068b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068ba:	2b65      	cmp	r3, #101	; 0x65
 80068bc:	f340 80ae 	ble.w	8006a1c <_vfprintf_r+0xb64>
 80068c0:	2200      	movs	r2, #0
 80068c2:	2300      	movs	r3, #0
 80068c4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80068c8:	f7fd fc5a 	bl	8004180 <__aeabi_dcmpeq>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	f000 813a 	beq.w	8006b46 <_vfprintf_r+0xc8e>
 80068d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80068d4:	4a4f      	ldr	r2, [pc, #316]	; (8006a14 <_vfprintf_r+0xb5c>)
 80068d6:	f8c9 2000 	str.w	r2, [r9]
 80068da:	3301      	adds	r3, #1
 80068dc:	3401      	adds	r4, #1
 80068de:	2201      	movs	r2, #1
 80068e0:	2b07      	cmp	r3, #7
 80068e2:	9429      	str	r4, [sp, #164]	; 0xa4
 80068e4:	9328      	str	r3, [sp, #160]	; 0xa0
 80068e6:	f8c9 2004 	str.w	r2, [r9, #4]
 80068ea:	f300 83ce 	bgt.w	800708a <_vfprintf_r+0x11d2>
 80068ee:	f109 0908 	add.w	r9, r9, #8
 80068f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068f6:	4293      	cmp	r3, r2
 80068f8:	db03      	blt.n	8006902 <_vfprintf_r+0xa4a>
 80068fa:	9b07      	ldr	r3, [sp, #28]
 80068fc:	07d8      	lsls	r0, r3, #31
 80068fe:	f57f adb9 	bpl.w	8006474 <_vfprintf_r+0x5bc>
 8006902:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006904:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006906:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006908:	f8c9 2000 	str.w	r2, [r9]
 800690c:	3301      	adds	r3, #1
 800690e:	440c      	add	r4, r1
 8006910:	2b07      	cmp	r3, #7
 8006912:	9429      	str	r4, [sp, #164]	; 0xa4
 8006914:	f8c9 1004 	str.w	r1, [r9, #4]
 8006918:	9328      	str	r3, [sp, #160]	; 0xa0
 800691a:	f300 8474 	bgt.w	8007206 <_vfprintf_r+0x134e>
 800691e:	f109 0908 	add.w	r9, r9, #8
 8006922:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006924:	1e5d      	subs	r5, r3, #1
 8006926:	2d00      	cmp	r5, #0
 8006928:	f77f ada4 	ble.w	8006474 <_vfprintf_r+0x5bc>
 800692c:	4a3a      	ldr	r2, [pc, #232]	; (8006a18 <_vfprintf_r+0xb60>)
 800692e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006930:	920f      	str	r2, [sp, #60]	; 0x3c
 8006932:	2d10      	cmp	r5, #16
 8006934:	f340 81b4 	ble.w	8006ca0 <_vfprintf_r+0xde8>
 8006938:	2610      	movs	r6, #16
 800693a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800693c:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006940:	e005      	b.n	800694e <_vfprintf_r+0xa96>
 8006942:	f109 0908 	add.w	r9, r9, #8
 8006946:	3d10      	subs	r5, #16
 8006948:	2d10      	cmp	r5, #16
 800694a:	f340 81a9 	ble.w	8006ca0 <_vfprintf_r+0xde8>
 800694e:	3301      	adds	r3, #1
 8006950:	3410      	adds	r4, #16
 8006952:	2b07      	cmp	r3, #7
 8006954:	9429      	str	r4, [sp, #164]	; 0xa4
 8006956:	9328      	str	r3, [sp, #160]	; 0xa0
 8006958:	f8c9 a000 	str.w	sl, [r9]
 800695c:	f8c9 6004 	str.w	r6, [r9, #4]
 8006960:	ddef      	ble.n	8006942 <_vfprintf_r+0xa8a>
 8006962:	aa27      	add	r2, sp, #156	; 0x9c
 8006964:	4659      	mov	r1, fp
 8006966:	4638      	mov	r0, r7
 8006968:	f003 fcfc 	bl	800a364 <__sprint_r>
 800696c:	2800      	cmp	r0, #0
 800696e:	f47f abd3 	bne.w	8006118 <_vfprintf_r+0x260>
 8006972:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006974:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006976:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800697a:	e7e4      	b.n	8006946 <_vfprintf_r+0xa8e>
 800697c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800697e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006980:	1a9f      	subs	r7, r3, r2
 8006982:	2f00      	cmp	r7, #0
 8006984:	f77f ad2a 	ble.w	80063dc <_vfprintf_r+0x524>
 8006988:	4a23      	ldr	r2, [pc, #140]	; (8006a18 <_vfprintf_r+0xb60>)
 800698a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800698c:	920f      	str	r2, [sp, #60]	; 0x3c
 800698e:	2f10      	cmp	r7, #16
 8006990:	dd2b      	ble.n	80069ea <_vfprintf_r+0xb32>
 8006992:	464a      	mov	r2, r9
 8006994:	4621      	mov	r1, r4
 8006996:	46b9      	mov	r9, r7
 8006998:	2510      	movs	r5, #16
 800699a:	4637      	mov	r7, r6
 800699c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800699e:	9e08      	ldr	r6, [sp, #32]
 80069a0:	e006      	b.n	80069b0 <_vfprintf_r+0xaf8>
 80069a2:	f1a9 0910 	sub.w	r9, r9, #16
 80069a6:	f1b9 0f10 	cmp.w	r9, #16
 80069aa:	f102 0208 	add.w	r2, r2, #8
 80069ae:	dd18      	ble.n	80069e2 <_vfprintf_r+0xb2a>
 80069b0:	3301      	adds	r3, #1
 80069b2:	3110      	adds	r1, #16
 80069b4:	2b07      	cmp	r3, #7
 80069b6:	9129      	str	r1, [sp, #164]	; 0xa4
 80069b8:	9328      	str	r3, [sp, #160]	; 0xa0
 80069ba:	f8c2 a000 	str.w	sl, [r2]
 80069be:	6055      	str	r5, [r2, #4]
 80069c0:	ddef      	ble.n	80069a2 <_vfprintf_r+0xaea>
 80069c2:	aa27      	add	r2, sp, #156	; 0x9c
 80069c4:	4631      	mov	r1, r6
 80069c6:	4620      	mov	r0, r4
 80069c8:	f003 fccc 	bl	800a364 <__sprint_r>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	f47f aba3 	bne.w	8006118 <_vfprintf_r+0x260>
 80069d2:	f1a9 0910 	sub.w	r9, r9, #16
 80069d6:	f1b9 0f10 	cmp.w	r9, #16
 80069da:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80069dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80069de:	aa34      	add	r2, sp, #208	; 0xd0
 80069e0:	dce6      	bgt.n	80069b0 <_vfprintf_r+0xaf8>
 80069e2:	463e      	mov	r6, r7
 80069e4:	460c      	mov	r4, r1
 80069e6:	464f      	mov	r7, r9
 80069e8:	4691      	mov	r9, r2
 80069ea:	3301      	adds	r3, #1
 80069ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069ee:	9328      	str	r3, [sp, #160]	; 0xa0
 80069f0:	443c      	add	r4, r7
 80069f2:	2b07      	cmp	r3, #7
 80069f4:	9429      	str	r4, [sp, #164]	; 0xa4
 80069f6:	e889 0084 	stmia.w	r9, {r2, r7}
 80069fa:	f300 822b 	bgt.w	8006e54 <_vfprintf_r+0xf9c>
 80069fe:	f109 0908 	add.w	r9, r9, #8
 8006a02:	e4eb      	b.n	80063dc <_vfprintf_r+0x524>
 8006a04:	7fefffff 	.word	0x7fefffff
 8006a08:	0800ad60 	.word	0x0800ad60
 8006a0c:	0800ad5c 	.word	0x0800ad5c
 8006a10:	0800ad80 	.word	0x0800ad80
 8006a14:	0800ad9c 	.word	0x0800ad9c
 8006a18:	0800adb0 	.word	0x0800adb0
 8006a1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a1e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	f340 81d0 	ble.w	8006dc6 <_vfprintf_r+0xf0e>
 8006a26:	3501      	adds	r5, #1
 8006a28:	3401      	adds	r4, #1
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	2d07      	cmp	r5, #7
 8006a2e:	9429      	str	r4, [sp, #164]	; 0xa4
 8006a30:	9528      	str	r5, [sp, #160]	; 0xa0
 8006a32:	f8c9 6000 	str.w	r6, [r9]
 8006a36:	f8c9 3004 	str.w	r3, [r9, #4]
 8006a3a:	f300 81e1 	bgt.w	8006e00 <_vfprintf_r+0xf48>
 8006a3e:	f109 0908 	add.w	r9, r9, #8
 8006a42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006a44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a46:	f8c9 3000 	str.w	r3, [r9]
 8006a4a:	3501      	adds	r5, #1
 8006a4c:	4414      	add	r4, r2
 8006a4e:	2d07      	cmp	r5, #7
 8006a50:	9429      	str	r4, [sp, #164]	; 0xa4
 8006a52:	9528      	str	r5, [sp, #160]	; 0xa0
 8006a54:	f8c9 2004 	str.w	r2, [r9, #4]
 8006a58:	f300 81df 	bgt.w	8006e1a <_vfprintf_r+0xf62>
 8006a5c:	f109 0908 	add.w	r9, r9, #8
 8006a60:	2300      	movs	r3, #0
 8006a62:	2200      	movs	r2, #0
 8006a64:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006a68:	f7fd fb8a 	bl	8004180 <__aeabi_dcmpeq>
 8006a6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	f040 80cc 	bne.w	8006c0c <_vfprintf_r+0xd54>
 8006a74:	3b01      	subs	r3, #1
 8006a76:	3501      	adds	r5, #1
 8006a78:	3601      	adds	r6, #1
 8006a7a:	441c      	add	r4, r3
 8006a7c:	2d07      	cmp	r5, #7
 8006a7e:	9528      	str	r5, [sp, #160]	; 0xa0
 8006a80:	9429      	str	r4, [sp, #164]	; 0xa4
 8006a82:	f8c9 6000 	str.w	r6, [r9]
 8006a86:	f8c9 3004 	str.w	r3, [r9, #4]
 8006a8a:	f300 81ac 	bgt.w	8006de6 <_vfprintf_r+0xf2e>
 8006a8e:	f109 0908 	add.w	r9, r9, #8
 8006a92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006a94:	f8c9 2004 	str.w	r2, [r9, #4]
 8006a98:	3501      	adds	r5, #1
 8006a9a:	4414      	add	r4, r2
 8006a9c:	ab23      	add	r3, sp, #140	; 0x8c
 8006a9e:	2d07      	cmp	r5, #7
 8006aa0:	9429      	str	r4, [sp, #164]	; 0xa4
 8006aa2:	9528      	str	r5, [sp, #160]	; 0xa0
 8006aa4:	f8c9 3000 	str.w	r3, [r9]
 8006aa8:	f77f ace2 	ble.w	8006470 <_vfprintf_r+0x5b8>
 8006aac:	aa27      	add	r2, sp, #156	; 0x9c
 8006aae:	9908      	ldr	r1, [sp, #32]
 8006ab0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ab2:	f003 fc57 	bl	800a364 <__sprint_r>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	f47f ab2e 	bne.w	8006118 <_vfprintf_r+0x260>
 8006abc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006abe:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006ac2:	e4d7      	b.n	8006474 <_vfprintf_r+0x5bc>
 8006ac4:	aa27      	add	r2, sp, #156	; 0x9c
 8006ac6:	9908      	ldr	r1, [sp, #32]
 8006ac8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006aca:	f003 fc4b 	bl	800a364 <__sprint_r>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	f43f ad1e 	beq.w	8006510 <_vfprintf_r+0x658>
 8006ad4:	f7ff bb20 	b.w	8006118 <_vfprintf_r+0x260>
 8006ad8:	aa27      	add	r2, sp, #156	; 0x9c
 8006ada:	9908      	ldr	r1, [sp, #32]
 8006adc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ade:	f003 fc41 	bl	800a364 <__sprint_r>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	f47f ab18 	bne.w	8006118 <_vfprintf_r+0x260>
 8006ae8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006aea:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006aee:	e4ae      	b.n	800644e <_vfprintf_r+0x596>
 8006af0:	aa27      	add	r2, sp, #156	; 0x9c
 8006af2:	9908      	ldr	r1, [sp, #32]
 8006af4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006af6:	f003 fc35 	bl	800a364 <__sprint_r>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	f47f ab0c 	bne.w	8006118 <_vfprintf_r+0x260>
 8006b00:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006b02:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006b06:	e455      	b.n	80063b4 <_vfprintf_r+0x4fc>
 8006b08:	aa27      	add	r2, sp, #156	; 0x9c
 8006b0a:	9908      	ldr	r1, [sp, #32]
 8006b0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b0e:	f003 fc29 	bl	800a364 <__sprint_r>
 8006b12:	2800      	cmp	r0, #0
 8006b14:	f47f ab00 	bne.w	8006118 <_vfprintf_r+0x260>
 8006b18:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006b1a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006b1e:	e459      	b.n	80063d4 <_vfprintf_r+0x51c>
 8006b20:	f1bb 0f00 	cmp.w	fp, #0
 8006b24:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006b28:	f2c0 830d 	blt.w	8007146 <_vfprintf_r+0x128e>
 8006b2c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006b30:	9307      	str	r3, [sp, #28]
 8006b32:	ea54 0305 	orrs.w	r3, r4, r5
 8006b36:	f47f ad21 	bne.w	800657c <_vfprintf_r+0x6c4>
 8006b3a:	f1bb 0f00 	cmp.w	fp, #0
 8006b3e:	f43f ae8d 	beq.w	800685c <_vfprintf_r+0x9a4>
 8006b42:	2700      	movs	r7, #0
 8006b44:	e6b3      	b.n	80068ae <_vfprintf_r+0x9f6>
 8006b46:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006b48:	2d00      	cmp	r5, #0
 8006b4a:	f340 82aa 	ble.w	80070a2 <_vfprintf_r+0x11ea>
 8006b4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b52:	4293      	cmp	r3, r2
 8006b54:	bfa8      	it	ge
 8006b56:	4613      	movge	r3, r2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	461d      	mov	r5, r3
 8006b5c:	dd0d      	ble.n	8006b7a <_vfprintf_r+0xcc2>
 8006b5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006b60:	f8c9 6000 	str.w	r6, [r9]
 8006b64:	3301      	adds	r3, #1
 8006b66:	442c      	add	r4, r5
 8006b68:	2b07      	cmp	r3, #7
 8006b6a:	9429      	str	r4, [sp, #164]	; 0xa4
 8006b6c:	f8c9 5004 	str.w	r5, [r9, #4]
 8006b70:	9328      	str	r3, [sp, #160]	; 0xa0
 8006b72:	f300 8387 	bgt.w	8007284 <_vfprintf_r+0x13cc>
 8006b76:	f109 0908 	add.w	r9, r9, #8
 8006b7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b7c:	2d00      	cmp	r5, #0
 8006b7e:	bfa8      	it	ge
 8006b80:	1b5b      	subge	r3, r3, r5
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	461d      	mov	r5, r3
 8006b86:	f340 80be 	ble.w	8006d06 <_vfprintf_r+0xe4e>
 8006b8a:	4ab9      	ldr	r2, [pc, #740]	; (8006e70 <_vfprintf_r+0xfb8>)
 8006b8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006b8e:	920f      	str	r2, [sp, #60]	; 0x3c
 8006b90:	2d10      	cmp	r5, #16
 8006b92:	f340 826d 	ble.w	8007070 <_vfprintf_r+0x11b8>
 8006b96:	4622      	mov	r2, r4
 8006b98:	2710      	movs	r7, #16
 8006b9a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006b9e:	9c08      	ldr	r4, [sp, #32]
 8006ba0:	e005      	b.n	8006bae <_vfprintf_r+0xcf6>
 8006ba2:	f109 0908 	add.w	r9, r9, #8
 8006ba6:	3d10      	subs	r5, #16
 8006ba8:	2d10      	cmp	r5, #16
 8006baa:	f340 8260 	ble.w	800706e <_vfprintf_r+0x11b6>
 8006bae:	3301      	adds	r3, #1
 8006bb0:	3210      	adds	r2, #16
 8006bb2:	2b07      	cmp	r3, #7
 8006bb4:	9229      	str	r2, [sp, #164]	; 0xa4
 8006bb6:	9328      	str	r3, [sp, #160]	; 0xa0
 8006bb8:	f8c9 a000 	str.w	sl, [r9]
 8006bbc:	f8c9 7004 	str.w	r7, [r9, #4]
 8006bc0:	ddef      	ble.n	8006ba2 <_vfprintf_r+0xcea>
 8006bc2:	aa27      	add	r2, sp, #156	; 0x9c
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4658      	mov	r0, fp
 8006bc8:	f003 fbcc 	bl	800a364 <__sprint_r>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	f47f aaa3 	bne.w	8006118 <_vfprintf_r+0x260>
 8006bd2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006bd4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006bd6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006bda:	e7e4      	b.n	8006ba6 <_vfprintf_r+0xcee>
 8006bdc:	aa27      	add	r2, sp, #156	; 0x9c
 8006bde:	9908      	ldr	r1, [sp, #32]
 8006be0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006be2:	f003 fbbf 	bl	800a364 <__sprint_r>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	f47f aa96 	bne.w	8006118 <_vfprintf_r+0x260>
 8006bec:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006bf0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006bf2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006bf6:	f7ff bbcd 	b.w	8006394 <_vfprintf_r+0x4dc>
 8006bfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bfc:	6814      	ldr	r4, [r2, #0]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	3304      	adds	r3, #4
 8006c02:	17e5      	asrs	r5, r4, #31
 8006c04:	930e      	str	r3, [sp, #56]	; 0x38
 8006c06:	4622      	mov	r2, r4
 8006c08:	462b      	mov	r3, r5
 8006c0a:	e4f4      	b.n	80065f6 <_vfprintf_r+0x73e>
 8006c0c:	1e5e      	subs	r6, r3, #1
 8006c0e:	2e00      	cmp	r6, #0
 8006c10:	f77f af3f 	ble.w	8006a92 <_vfprintf_r+0xbda>
 8006c14:	4b96      	ldr	r3, [pc, #600]	; (8006e70 <_vfprintf_r+0xfb8>)
 8006c16:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c18:	2e10      	cmp	r6, #16
 8006c1a:	f340 8110 	ble.w	8006e3e <_vfprintf_r+0xf86>
 8006c1e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8006c22:	2710      	movs	r7, #16
 8006c24:	46b0      	mov	r8, r6
 8006c26:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006c2a:	9e08      	ldr	r6, [sp, #32]
 8006c2c:	e007      	b.n	8006c3e <_vfprintf_r+0xd86>
 8006c2e:	f109 0908 	add.w	r9, r9, #8
 8006c32:	f1a8 0810 	sub.w	r8, r8, #16
 8006c36:	f1b8 0f10 	cmp.w	r8, #16
 8006c3a:	f340 80fd 	ble.w	8006e38 <_vfprintf_r+0xf80>
 8006c3e:	3501      	adds	r5, #1
 8006c40:	3410      	adds	r4, #16
 8006c42:	2d07      	cmp	r5, #7
 8006c44:	9429      	str	r4, [sp, #164]	; 0xa4
 8006c46:	9528      	str	r5, [sp, #160]	; 0xa0
 8006c48:	f8c9 a000 	str.w	sl, [r9]
 8006c4c:	f8c9 7004 	str.w	r7, [r9, #4]
 8006c50:	dded      	ble.n	8006c2e <_vfprintf_r+0xd76>
 8006c52:	aa27      	add	r2, sp, #156	; 0x9c
 8006c54:	4631      	mov	r1, r6
 8006c56:	4658      	mov	r0, fp
 8006c58:	f003 fb84 	bl	800a364 <__sprint_r>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	f47f aa5b 	bne.w	8006118 <_vfprintf_r+0x260>
 8006c62:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006c64:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006c66:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006c6a:	e7e2      	b.n	8006c32 <_vfprintf_r+0xd7a>
 8006c6c:	9907      	ldr	r1, [sp, #28]
 8006c6e:	f011 0210 	ands.w	r2, r1, #16
 8006c72:	d020      	beq.n	8006cb6 <_vfprintf_r+0xdfe>
 8006c74:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006c76:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006c7a:	f1bb 0f00 	cmp.w	fp, #0
 8006c7e:	6804      	ldr	r4, [r0, #0]
 8006c80:	f100 0704 	add.w	r7, r0, #4
 8006c84:	f04f 0500 	mov.w	r5, #0
 8006c88:	db26      	blt.n	8006cd8 <_vfprintf_r+0xe20>
 8006c8a:	460a      	mov	r2, r1
 8006c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c90:	9207      	str	r2, [sp, #28]
 8006c92:	ea54 0205 	orrs.w	r2, r4, r5
 8006c96:	970e      	str	r7, [sp, #56]	; 0x38
 8006c98:	461f      	mov	r7, r3
 8006c9a:	f47f ab03 	bne.w	80062a4 <_vfprintf_r+0x3ec>
 8006c9e:	e4bd      	b.n	800661c <_vfprintf_r+0x764>
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ca4:	9328      	str	r3, [sp, #160]	; 0xa0
 8006ca6:	442c      	add	r4, r5
 8006ca8:	2b07      	cmp	r3, #7
 8006caa:	9429      	str	r4, [sp, #164]	; 0xa4
 8006cac:	e889 0024 	stmia.w	r9, {r2, r5}
 8006cb0:	f77f abde 	ble.w	8006470 <_vfprintf_r+0x5b8>
 8006cb4:	e6fa      	b.n	8006aac <_vfprintf_r+0xbf4>
 8006cb6:	9907      	ldr	r1, [sp, #28]
 8006cb8:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8006cbc:	f040 824a 	bne.w	8007154 <_vfprintf_r+0x129c>
 8006cc0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006cc2:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006cc6:	f1bb 0f00 	cmp.w	fp, #0
 8006cca:	680c      	ldr	r4, [r1, #0]
 8006ccc:	f101 0704 	add.w	r7, r1, #4
 8006cd0:	f04f 0500 	mov.w	r5, #0
 8006cd4:	f280 811a 	bge.w	8006f0c <_vfprintf_r+0x1054>
 8006cd8:	970e      	str	r7, [sp, #56]	; 0x38
 8006cda:	461f      	mov	r7, r3
 8006cdc:	ea54 0305 	orrs.w	r3, r4, r5
 8006ce0:	f47f aae0 	bne.w	80062a4 <_vfprintf_r+0x3ec>
 8006ce4:	ae44      	add	r6, sp, #272	; 0x110
 8006ce6:	3430      	adds	r4, #48	; 0x30
 8006ce8:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8006cec:	f7ff baf4 	b.w	80062d8 <_vfprintf_r+0x420>
 8006cf0:	aa27      	add	r2, sp, #156	; 0x9c
 8006cf2:	9908      	ldr	r1, [sp, #32]
 8006cf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006cf6:	f003 fb35 	bl	800a364 <__sprint_r>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	f47f aa0c 	bne.w	8006118 <_vfprintf_r+0x260>
 8006d00:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006d02:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006d06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d0a:	4432      	add	r2, r6
 8006d0c:	4617      	mov	r7, r2
 8006d0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d10:	4293      	cmp	r3, r2
 8006d12:	db47      	blt.n	8006da4 <_vfprintf_r+0xeec>
 8006d14:	9a07      	ldr	r2, [sp, #28]
 8006d16:	07d2      	lsls	r2, r2, #31
 8006d18:	d444      	bmi.n	8006da4 <_vfprintf_r+0xeec>
 8006d1a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006d1c:	440e      	add	r6, r1
 8006d1e:	1bf5      	subs	r5, r6, r7
 8006d20:	1acb      	subs	r3, r1, r3
 8006d22:	429d      	cmp	r5, r3
 8006d24:	bfa8      	it	ge
 8006d26:	461d      	movge	r5, r3
 8006d28:	2d00      	cmp	r5, #0
 8006d2a:	462e      	mov	r6, r5
 8006d2c:	dd0d      	ble.n	8006d4a <_vfprintf_r+0xe92>
 8006d2e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8006d30:	f8c9 7000 	str.w	r7, [r9]
 8006d34:	3201      	adds	r2, #1
 8006d36:	442c      	add	r4, r5
 8006d38:	2a07      	cmp	r2, #7
 8006d3a:	9429      	str	r4, [sp, #164]	; 0xa4
 8006d3c:	f8c9 5004 	str.w	r5, [r9, #4]
 8006d40:	9228      	str	r2, [sp, #160]	; 0xa0
 8006d42:	f300 832e 	bgt.w	80073a2 <_vfprintf_r+0x14ea>
 8006d46:	f109 0908 	add.w	r9, r9, #8
 8006d4a:	2e00      	cmp	r6, #0
 8006d4c:	bfac      	ite	ge
 8006d4e:	1b9d      	subge	r5, r3, r6
 8006d50:	461d      	movlt	r5, r3
 8006d52:	2d00      	cmp	r5, #0
 8006d54:	f77f ab8e 	ble.w	8006474 <_vfprintf_r+0x5bc>
 8006d58:	4a45      	ldr	r2, [pc, #276]	; (8006e70 <_vfprintf_r+0xfb8>)
 8006d5a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006d5c:	920f      	str	r2, [sp, #60]	; 0x3c
 8006d5e:	2d10      	cmp	r5, #16
 8006d60:	dd9e      	ble.n	8006ca0 <_vfprintf_r+0xde8>
 8006d62:	2610      	movs	r6, #16
 8006d64:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006d66:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006d6a:	e004      	b.n	8006d76 <_vfprintf_r+0xebe>
 8006d6c:	f109 0908 	add.w	r9, r9, #8
 8006d70:	3d10      	subs	r5, #16
 8006d72:	2d10      	cmp	r5, #16
 8006d74:	dd94      	ble.n	8006ca0 <_vfprintf_r+0xde8>
 8006d76:	3301      	adds	r3, #1
 8006d78:	3410      	adds	r4, #16
 8006d7a:	2b07      	cmp	r3, #7
 8006d7c:	9429      	str	r4, [sp, #164]	; 0xa4
 8006d7e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006d80:	f8c9 a000 	str.w	sl, [r9]
 8006d84:	f8c9 6004 	str.w	r6, [r9, #4]
 8006d88:	ddf0      	ble.n	8006d6c <_vfprintf_r+0xeb4>
 8006d8a:	aa27      	add	r2, sp, #156	; 0x9c
 8006d8c:	4659      	mov	r1, fp
 8006d8e:	4638      	mov	r0, r7
 8006d90:	f003 fae8 	bl	800a364 <__sprint_r>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	f47f a9bf 	bne.w	8006118 <_vfprintf_r+0x260>
 8006d9a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006d9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006d9e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006da2:	e7e5      	b.n	8006d70 <_vfprintf_r+0xeb8>
 8006da4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8006da6:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006da8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006daa:	f8c9 1000 	str.w	r1, [r9]
 8006dae:	3201      	adds	r2, #1
 8006db0:	4404      	add	r4, r0
 8006db2:	2a07      	cmp	r2, #7
 8006db4:	9429      	str	r4, [sp, #164]	; 0xa4
 8006db6:	f8c9 0004 	str.w	r0, [r9, #4]
 8006dba:	9228      	str	r2, [sp, #160]	; 0xa0
 8006dbc:	f300 82cf 	bgt.w	800735e <_vfprintf_r+0x14a6>
 8006dc0:	f109 0908 	add.w	r9, r9, #8
 8006dc4:	e7a9      	b.n	8006d1a <_vfprintf_r+0xe62>
 8006dc6:	9b07      	ldr	r3, [sp, #28]
 8006dc8:	07df      	lsls	r7, r3, #31
 8006dca:	f53f ae2c 	bmi.w	8006a26 <_vfprintf_r+0xb6e>
 8006dce:	3501      	adds	r5, #1
 8006dd0:	3401      	adds	r4, #1
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	2d07      	cmp	r5, #7
 8006dd6:	9429      	str	r4, [sp, #164]	; 0xa4
 8006dd8:	9528      	str	r5, [sp, #160]	; 0xa0
 8006dda:	f8c9 6000 	str.w	r6, [r9]
 8006dde:	f8c9 3004 	str.w	r3, [r9, #4]
 8006de2:	f77f ae54 	ble.w	8006a8e <_vfprintf_r+0xbd6>
 8006de6:	aa27      	add	r2, sp, #156	; 0x9c
 8006de8:	9908      	ldr	r1, [sp, #32]
 8006dea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006dec:	f003 faba 	bl	800a364 <__sprint_r>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	f47f a991 	bne.w	8006118 <_vfprintf_r+0x260>
 8006df6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006df8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006dfa:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006dfe:	e648      	b.n	8006a92 <_vfprintf_r+0xbda>
 8006e00:	aa27      	add	r2, sp, #156	; 0x9c
 8006e02:	9908      	ldr	r1, [sp, #32]
 8006e04:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006e06:	f003 faad 	bl	800a364 <__sprint_r>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	f47f a984 	bne.w	8006118 <_vfprintf_r+0x260>
 8006e10:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006e12:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006e14:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006e18:	e613      	b.n	8006a42 <_vfprintf_r+0xb8a>
 8006e1a:	aa27      	add	r2, sp, #156	; 0x9c
 8006e1c:	9908      	ldr	r1, [sp, #32]
 8006e1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006e20:	f003 faa0 	bl	800a364 <__sprint_r>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	f47f a977 	bne.w	8006118 <_vfprintf_r+0x260>
 8006e2a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006e2c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006e2e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006e32:	e615      	b.n	8006a60 <_vfprintf_r+0xba8>
 8006e34:	2400      	movs	r4, #0
 8006e36:	e755      	b.n	8006ce4 <_vfprintf_r+0xe2c>
 8006e38:	4646      	mov	r6, r8
 8006e3a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8006e3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e40:	3501      	adds	r5, #1
 8006e42:	4434      	add	r4, r6
 8006e44:	2d07      	cmp	r5, #7
 8006e46:	9429      	str	r4, [sp, #164]	; 0xa4
 8006e48:	9528      	str	r5, [sp, #160]	; 0xa0
 8006e4a:	e889 0048 	stmia.w	r9, {r3, r6}
 8006e4e:	f77f ae1e 	ble.w	8006a8e <_vfprintf_r+0xbd6>
 8006e52:	e7c8      	b.n	8006de6 <_vfprintf_r+0xf2e>
 8006e54:	aa27      	add	r2, sp, #156	; 0x9c
 8006e56:	9908      	ldr	r1, [sp, #32]
 8006e58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006e5a:	f003 fa83 	bl	800a364 <__sprint_r>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f47f a95a 	bne.w	8006118 <_vfprintf_r+0x260>
 8006e64:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006e66:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006e6a:	f7ff bab7 	b.w	80063dc <_vfprintf_r+0x524>
 8006e6e:	bf00      	nop
 8006e70:	0800adb0 	.word	0x0800adb0
 8006e74:	4264      	negs	r4, r4
 8006e76:	f04f 072d 	mov.w	r7, #45	; 0x2d
 8006e7a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8006e7e:	f1bb 0f00 	cmp.w	fp, #0
 8006e82:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006e86:	f6ff aa0d 	blt.w	80062a4 <_vfprintf_r+0x3ec>
 8006e8a:	9b07      	ldr	r3, [sp, #28]
 8006e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e90:	9307      	str	r3, [sp, #28]
 8006e92:	f7ff ba07 	b.w	80062a4 <_vfprintf_r+0x3ec>
 8006e96:	9907      	ldr	r1, [sp, #28]
 8006e98:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8006e9c:	d017      	beq.n	8006ece <_vfprintf_r+0x1016>
 8006e9e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006ea0:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f1bb 0f00 	cmp.w	fp, #0
 8006eaa:	f103 0304 	add.w	r3, r3, #4
 8006eae:	8804      	ldrh	r4, [r0, #0]
 8006eb0:	f04f 0500 	mov.w	r5, #0
 8006eb4:	f2c0 831b 	blt.w	80074ee <_vfprintf_r+0x1636>
 8006eb8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ebc:	9107      	str	r1, [sp, #28]
 8006ebe:	ea54 0105 	orrs.w	r1, r4, r5
 8006ec2:	930e      	str	r3, [sp, #56]	; 0x38
 8006ec4:	f43f ace1 	beq.w	800688a <_vfprintf_r+0x9d2>
 8006ec8:	4617      	mov	r7, r2
 8006eca:	f7ff b95c 	b.w	8006186 <_vfprintf_r+0x2ce>
 8006ece:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006ed0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006ed4:	f1bb 0f00 	cmp.w	fp, #0
 8006ed8:	680c      	ldr	r4, [r1, #0]
 8006eda:	f101 0704 	add.w	r7, r1, #4
 8006ede:	f04f 0500 	mov.w	r5, #0
 8006ee2:	db02      	blt.n	8006eea <_vfprintf_r+0x1032>
 8006ee4:	9a07      	ldr	r2, [sp, #28]
 8006ee6:	f7ff b9af 	b.w	8006248 <_vfprintf_r+0x390>
 8006eea:	970e      	str	r7, [sp, #56]	; 0x38
 8006eec:	2700      	movs	r7, #0
 8006eee:	f7ff b94a 	b.w	8006186 <_vfprintf_r+0x2ce>
 8006ef2:	9b07      	ldr	r3, [sp, #28]
 8006ef4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ef6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006efa:	4613      	mov	r3, r2
 8006efc:	f000 8142 	beq.w	8007184 <_vfprintf_r+0x12cc>
 8006f00:	3304      	adds	r3, #4
 8006f02:	8814      	ldrh	r4, [r2, #0]
 8006f04:	930e      	str	r3, [sp, #56]	; 0x38
 8006f06:	2500      	movs	r5, #0
 8006f08:	f7ff bb1a 	b.w	8006540 <_vfprintf_r+0x688>
 8006f0c:	9a07      	ldr	r2, [sp, #28]
 8006f0e:	e6bd      	b.n	8006c8c <_vfprintf_r+0xdd4>
 8006f10:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	f7fd f964 	bl	80041e4 <__aeabi_dcmpun>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	f040 82e8 	bne.w	80074f2 <_vfprintf_r+0x163a>
 8006f22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f24:	f1bb 3fff 	cmp.w	fp, #4294967295
 8006f28:	f023 0720 	bic.w	r7, r3, #32
 8006f2c:	f000 825f 	beq.w	80073ee <_vfprintf_r+0x1536>
 8006f30:	2f47      	cmp	r7, #71	; 0x47
 8006f32:	f000 8158 	beq.w	80071e6 <_vfprintf_r+0x132e>
 8006f36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f38:	9a07      	ldr	r2, [sp, #28]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f40:	920f      	str	r2, [sp, #60]	; 0x3c
 8006f42:	f2c0 825c 	blt.w	80073fe <_vfprintf_r+0x1546>
 8006f46:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8006f4a:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8006f4e:	2300      	movs	r3, #0
 8006f50:	9309      	str	r3, [sp, #36]	; 0x24
 8006f52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f54:	2b66      	cmp	r3, #102	; 0x66
 8006f56:	f000 8233 	beq.w	80073c0 <_vfprintf_r+0x1508>
 8006f5a:	2b46      	cmp	r3, #70	; 0x46
 8006f5c:	f000 8125 	beq.w	80071aa <_vfprintf_r+0x12f2>
 8006f60:	2f45      	cmp	r7, #69	; 0x45
 8006f62:	bf0c      	ite	eq
 8006f64:	f10b 0501 	addeq.w	r5, fp, #1
 8006f68:	465d      	movne	r5, fp
 8006f6a:	a825      	add	r0, sp, #148	; 0x94
 8006f6c:	a922      	add	r1, sp, #136	; 0x88
 8006f6e:	aa21      	add	r2, sp, #132	; 0x84
 8006f70:	2302      	movs	r3, #2
 8006f72:	9004      	str	r0, [sp, #16]
 8006f74:	9202      	str	r2, [sp, #8]
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	9501      	str	r5, [sp, #4]
 8006f7a:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8006f7e:	9103      	str	r1, [sp, #12]
 8006f80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f82:	f000 fc89 	bl	8007898 <_dtoa_r>
 8006f86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f88:	2b67      	cmp	r3, #103	; 0x67
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	f040 8275 	bne.w	800747a <_vfprintf_r+0x15c2>
 8006f90:	9b07      	ldr	r3, [sp, #28]
 8006f92:	07da      	lsls	r2, r3, #31
 8006f94:	f140 8294 	bpl.w	80074c0 <_vfprintf_r+0x1608>
 8006f98:	1974      	adds	r4, r6, r5
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8006fa2:	f7fd f8ed 	bl	8004180 <__aeabi_dcmpeq>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	f040 8178 	bne.w	800729c <_vfprintf_r+0x13e4>
 8006fac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006fae:	429c      	cmp	r4, r3
 8006fb0:	d906      	bls.n	8006fc0 <_vfprintf_r+0x1108>
 8006fb2:	2130      	movs	r1, #48	; 0x30
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	9225      	str	r2, [sp, #148]	; 0x94
 8006fb8:	7019      	strb	r1, [r3, #0]
 8006fba:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006fbc:	429c      	cmp	r4, r3
 8006fbe:	d8f9      	bhi.n	8006fb4 <_vfprintf_r+0x10fc>
 8006fc0:	1b9b      	subs	r3, r3, r6
 8006fc2:	2f47      	cmp	r7, #71	; 0x47
 8006fc4:	9312      	str	r3, [sp, #72]	; 0x48
 8006fc6:	f000 8156 	beq.w	8007276 <_vfprintf_r+0x13be>
 8006fca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fcc:	2b65      	cmp	r3, #101	; 0x65
 8006fce:	f340 8263 	ble.w	8007498 <_vfprintf_r+0x15e0>
 8006fd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fd4:	2b66      	cmp	r3, #102	; 0x66
 8006fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fd8:	9313      	str	r3, [sp, #76]	; 0x4c
 8006fda:	f000 8226 	beq.w	800742a <_vfprintf_r+0x1572>
 8006fde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006fe0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006fe2:	428a      	cmp	r2, r1
 8006fe4:	f2c0 8214 	blt.w	8007410 <_vfprintf_r+0x1558>
 8006fe8:	9b07      	ldr	r3, [sp, #28]
 8006fea:	07db      	lsls	r3, r3, #31
 8006fec:	f100 826a 	bmi.w	80074c4 <_vfprintf_r+0x160c>
 8006ff0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006ff4:	920d      	str	r2, [sp, #52]	; 0x34
 8006ff6:	2267      	movs	r2, #103	; 0x67
 8006ff8:	9211      	str	r2, [sp, #68]	; 0x44
 8006ffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ffc:	2a00      	cmp	r2, #0
 8006ffe:	f040 8117 	bne.w	8007230 <_vfprintf_r+0x1378>
 8007002:	9309      	str	r3, [sp, #36]	; 0x24
 8007004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007006:	9307      	str	r3, [sp, #28]
 8007008:	4693      	mov	fp, r2
 800700a:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800700e:	f7ff b96d 	b.w	80062ec <_vfprintf_r+0x434>
 8007012:	f027 0707 	bic.w	r7, r7, #7
 8007016:	ed97 7b00 	vldr	d7, [r7]
 800701a:	f107 0308 	add.w	r3, r7, #8
 800701e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8007022:	930e      	str	r3, [sp, #56]	; 0x38
 8007024:	f7ff bb77 	b.w	8006716 <_vfprintf_r+0x85e>
 8007028:	9b07      	ldr	r3, [sp, #28]
 800702a:	06de      	lsls	r6, r3, #27
 800702c:	d40b      	bmi.n	8007046 <_vfprintf_r+0x118e>
 800702e:	9b07      	ldr	r3, [sp, #28]
 8007030:	065d      	lsls	r5, r3, #25
 8007032:	d508      	bpl.n	8007046 <_vfprintf_r+0x118e>
 8007034:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	3204      	adds	r2, #4
 800703a:	920e      	str	r2, [sp, #56]	; 0x38
 800703c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8007040:	801a      	strh	r2, [r3, #0]
 8007042:	f7fe bf7a 	b.w	8005f3a <_vfprintf_r+0x82>
 8007046:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007048:	6813      	ldr	r3, [r2, #0]
 800704a:	3204      	adds	r2, #4
 800704c:	920e      	str	r2, [sp, #56]	; 0x38
 800704e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	f7fe bf72 	b.w	8005f3a <_vfprintf_r+0x82>
 8007056:	2700      	movs	r7, #0
 8007058:	45bb      	cmp	fp, r7
 800705a:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800705e:	f6ff ac26 	blt.w	80068ae <_vfprintf_r+0x9f6>
 8007062:	9b07      	ldr	r3, [sp, #28]
 8007064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007068:	9307      	str	r3, [sp, #28]
 800706a:	f7ff bbf3 	b.w	8006854 <_vfprintf_r+0x99c>
 800706e:	4614      	mov	r4, r2
 8007070:	3301      	adds	r3, #1
 8007072:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007074:	9328      	str	r3, [sp, #160]	; 0xa0
 8007076:	442c      	add	r4, r5
 8007078:	2b07      	cmp	r3, #7
 800707a:	9429      	str	r4, [sp, #164]	; 0xa4
 800707c:	e889 0024 	stmia.w	r9, {r2, r5}
 8007080:	f73f ae36 	bgt.w	8006cf0 <_vfprintf_r+0xe38>
 8007084:	f109 0908 	add.w	r9, r9, #8
 8007088:	e63d      	b.n	8006d06 <_vfprintf_r+0xe4e>
 800708a:	aa27      	add	r2, sp, #156	; 0x9c
 800708c:	9908      	ldr	r1, [sp, #32]
 800708e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007090:	f003 f968 	bl	800a364 <__sprint_r>
 8007094:	2800      	cmp	r0, #0
 8007096:	f47f a83f 	bne.w	8006118 <_vfprintf_r+0x260>
 800709a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800709c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80070a0:	e427      	b.n	80068f2 <_vfprintf_r+0xa3a>
 80070a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80070a4:	4ab4      	ldr	r2, [pc, #720]	; (8007378 <_vfprintf_r+0x14c0>)
 80070a6:	f8c9 2000 	str.w	r2, [r9]
 80070aa:	3301      	adds	r3, #1
 80070ac:	3401      	adds	r4, #1
 80070ae:	2201      	movs	r2, #1
 80070b0:	2b07      	cmp	r3, #7
 80070b2:	9429      	str	r4, [sp, #164]	; 0xa4
 80070b4:	9328      	str	r3, [sp, #160]	; 0xa0
 80070b6:	f8c9 2004 	str.w	r2, [r9, #4]
 80070ba:	dc69      	bgt.n	8007190 <_vfprintf_r+0x12d8>
 80070bc:	f109 0908 	add.w	r9, r9, #8
 80070c0:	b92d      	cbnz	r5, 80070ce <_vfprintf_r+0x1216>
 80070c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070c4:	b91b      	cbnz	r3, 80070ce <_vfprintf_r+0x1216>
 80070c6:	9b07      	ldr	r3, [sp, #28]
 80070c8:	07d9      	lsls	r1, r3, #31
 80070ca:	f57f a9d3 	bpl.w	8006474 <_vfprintf_r+0x5bc>
 80070ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80070d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80070d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070d4:	f8c9 2000 	str.w	r2, [r9]
 80070d8:	3301      	adds	r3, #1
 80070da:	440c      	add	r4, r1
 80070dc:	2b07      	cmp	r3, #7
 80070de:	9429      	str	r4, [sp, #164]	; 0xa4
 80070e0:	f8c9 1004 	str.w	r1, [r9, #4]
 80070e4:	9328      	str	r3, [sp, #160]	; 0xa0
 80070e6:	f300 81d9 	bgt.w	800749c <_vfprintf_r+0x15e4>
 80070ea:	f109 0908 	add.w	r9, r9, #8
 80070ee:	426d      	negs	r5, r5
 80070f0:	2d00      	cmp	r5, #0
 80070f2:	f340 80b3 	ble.w	800725c <_vfprintf_r+0x13a4>
 80070f6:	4aa1      	ldr	r2, [pc, #644]	; (800737c <_vfprintf_r+0x14c4>)
 80070f8:	920f      	str	r2, [sp, #60]	; 0x3c
 80070fa:	2d10      	cmp	r5, #16
 80070fc:	f340 8122 	ble.w	8007344 <_vfprintf_r+0x148c>
 8007100:	4622      	mov	r2, r4
 8007102:	2710      	movs	r7, #16
 8007104:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8007108:	9c08      	ldr	r4, [sp, #32]
 800710a:	e005      	b.n	8007118 <_vfprintf_r+0x1260>
 800710c:	f109 0908 	add.w	r9, r9, #8
 8007110:	3d10      	subs	r5, #16
 8007112:	2d10      	cmp	r5, #16
 8007114:	f340 8115 	ble.w	8007342 <_vfprintf_r+0x148a>
 8007118:	3301      	adds	r3, #1
 800711a:	3210      	adds	r2, #16
 800711c:	2b07      	cmp	r3, #7
 800711e:	9229      	str	r2, [sp, #164]	; 0xa4
 8007120:	9328      	str	r3, [sp, #160]	; 0xa0
 8007122:	f8c9 a000 	str.w	sl, [r9]
 8007126:	f8c9 7004 	str.w	r7, [r9, #4]
 800712a:	ddef      	ble.n	800710c <_vfprintf_r+0x1254>
 800712c:	aa27      	add	r2, sp, #156	; 0x9c
 800712e:	4621      	mov	r1, r4
 8007130:	4658      	mov	r0, fp
 8007132:	f003 f917 	bl	800a364 <__sprint_r>
 8007136:	2800      	cmp	r0, #0
 8007138:	f47e afee 	bne.w	8006118 <_vfprintf_r+0x260>
 800713c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800713e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007140:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007144:	e7e4      	b.n	8007110 <_vfprintf_r+0x1258>
 8007146:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8007148:	f7ff bbaa 	b.w	80068a0 <_vfprintf_r+0x9e8>
 800714c:	f04f 30ff 	mov.w	r0, #4294967295
 8007150:	f7fe bfe8 	b.w	8006124 <_vfprintf_r+0x26c>
 8007154:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007156:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800715a:	4603      	mov	r3, r0
 800715c:	f1bb 0f00 	cmp.w	fp, #0
 8007160:	f103 0304 	add.w	r3, r3, #4
 8007164:	8804      	ldrh	r4, [r0, #0]
 8007166:	f04f 0500 	mov.w	r5, #0
 800716a:	f2c0 81b4 	blt.w	80074d6 <_vfprintf_r+0x161e>
 800716e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007172:	9107      	str	r1, [sp, #28]
 8007174:	ea54 0105 	orrs.w	r1, r4, r5
 8007178:	930e      	str	r3, [sp, #56]	; 0x38
 800717a:	4617      	mov	r7, r2
 800717c:	f47f a892 	bne.w	80062a4 <_vfprintf_r+0x3ec>
 8007180:	f7ff ba4c 	b.w	800661c <_vfprintf_r+0x764>
 8007184:	3304      	adds	r3, #4
 8007186:	6814      	ldr	r4, [r2, #0]
 8007188:	930e      	str	r3, [sp, #56]	; 0x38
 800718a:	2500      	movs	r5, #0
 800718c:	f7ff b9d8 	b.w	8006540 <_vfprintf_r+0x688>
 8007190:	aa27      	add	r2, sp, #156	; 0x9c
 8007192:	9908      	ldr	r1, [sp, #32]
 8007194:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007196:	f003 f8e5 	bl	800a364 <__sprint_r>
 800719a:	2800      	cmp	r0, #0
 800719c:	f47e afbc 	bne.w	8006118 <_vfprintf_r+0x260>
 80071a0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80071a2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80071a4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80071a8:	e78a      	b.n	80070c0 <_vfprintf_r+0x1208>
 80071aa:	a825      	add	r0, sp, #148	; 0x94
 80071ac:	a922      	add	r1, sp, #136	; 0x88
 80071ae:	aa21      	add	r2, sp, #132	; 0x84
 80071b0:	2303      	movs	r3, #3
 80071b2:	9004      	str	r0, [sp, #16]
 80071b4:	9202      	str	r2, [sp, #8]
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	f8cd b004 	str.w	fp, [sp, #4]
 80071bc:	9103      	str	r1, [sp, #12]
 80071be:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80071c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80071c4:	f000 fb68 	bl	8007898 <_dtoa_r>
 80071c8:	465d      	mov	r5, fp
 80071ca:	4606      	mov	r6, r0
 80071cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071ce:	2b46      	cmp	r3, #70	; 0x46
 80071d0:	eb06 0405 	add.w	r4, r6, r5
 80071d4:	f47f aee1 	bne.w	8006f9a <_vfprintf_r+0x10e2>
 80071d8:	7833      	ldrb	r3, [r6, #0]
 80071da:	2b30      	cmp	r3, #48	; 0x30
 80071dc:	f000 8198 	beq.w	8007510 <_vfprintf_r+0x1658>
 80071e0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80071e2:	442c      	add	r4, r5
 80071e4:	e6d9      	b.n	8006f9a <_vfprintf_r+0x10e2>
 80071e6:	f1bb 0f00 	cmp.w	fp, #0
 80071ea:	bf08      	it	eq
 80071ec:	f04f 0b01 	moveq.w	fp, #1
 80071f0:	e6a1      	b.n	8006f36 <_vfprintf_r+0x107e>
 80071f2:	9b07      	ldr	r3, [sp, #28]
 80071f4:	f043 0320 	orr.w	r3, r3, #32
 80071f8:	9307      	str	r3, [sp, #28]
 80071fa:	f108 0801 	add.w	r8, r8, #1
 80071fe:	f898 3000 	ldrb.w	r3, [r8]
 8007202:	f7fe becd 	b.w	8005fa0 <_vfprintf_r+0xe8>
 8007206:	aa27      	add	r2, sp, #156	; 0x9c
 8007208:	9908      	ldr	r1, [sp, #32]
 800720a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800720c:	f003 f8aa 	bl	800a364 <__sprint_r>
 8007210:	2800      	cmp	r0, #0
 8007212:	f47e af81 	bne.w	8006118 <_vfprintf_r+0x260>
 8007216:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007218:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800721c:	f7ff bb81 	b.w	8006922 <_vfprintf_r+0xa6a>
 8007220:	4630      	mov	r0, r6
 8007222:	f7fd fa0d 	bl	8004640 <strlen>
 8007226:	46a3      	mov	fp, r4
 8007228:	4603      	mov	r3, r0
 800722a:	900d      	str	r0, [sp, #52]	; 0x34
 800722c:	f7ff bb01 	b.w	8006832 <_vfprintf_r+0x97a>
 8007230:	272d      	movs	r7, #45	; 0x2d
 8007232:	9309      	str	r3, [sp, #36]	; 0x24
 8007234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007236:	9307      	str	r3, [sp, #28]
 8007238:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800723c:	f04f 0b00 	mov.w	fp, #0
 8007240:	f7ff b855 	b.w	80062ee <_vfprintf_r+0x436>
 8007244:	aa27      	add	r2, sp, #156	; 0x9c
 8007246:	9908      	ldr	r1, [sp, #32]
 8007248:	980a      	ldr	r0, [sp, #40]	; 0x28
 800724a:	f003 f88b 	bl	800a364 <__sprint_r>
 800724e:	2800      	cmp	r0, #0
 8007250:	f47e af62 	bne.w	8006118 <_vfprintf_r+0x260>
 8007254:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007256:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007258:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800725c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800725e:	f8c9 6000 	str.w	r6, [r9]
 8007262:	3301      	adds	r3, #1
 8007264:	440c      	add	r4, r1
 8007266:	2b07      	cmp	r3, #7
 8007268:	9429      	str	r4, [sp, #164]	; 0xa4
 800726a:	9328      	str	r3, [sp, #160]	; 0xa0
 800726c:	f8c9 1004 	str.w	r1, [r9, #4]
 8007270:	f77f a8fe 	ble.w	8006470 <_vfprintf_r+0x5b8>
 8007274:	e41a      	b.n	8006aac <_vfprintf_r+0xbf4>
 8007276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007278:	1cd8      	adds	r0, r3, #3
 800727a:	db11      	blt.n	80072a0 <_vfprintf_r+0x13e8>
 800727c:	459b      	cmp	fp, r3
 800727e:	db0f      	blt.n	80072a0 <_vfprintf_r+0x13e8>
 8007280:	9313      	str	r3, [sp, #76]	; 0x4c
 8007282:	e6ac      	b.n	8006fde <_vfprintf_r+0x1126>
 8007284:	aa27      	add	r2, sp, #156	; 0x9c
 8007286:	9908      	ldr	r1, [sp, #32]
 8007288:	980a      	ldr	r0, [sp, #40]	; 0x28
 800728a:	f003 f86b 	bl	800a364 <__sprint_r>
 800728e:	2800      	cmp	r0, #0
 8007290:	f47e af42 	bne.w	8006118 <_vfprintf_r+0x260>
 8007294:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007296:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800729a:	e46e      	b.n	8006b7a <_vfprintf_r+0xcc2>
 800729c:	4623      	mov	r3, r4
 800729e:	e68f      	b.n	8006fc0 <_vfprintf_r+0x1108>
 80072a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80072a2:	3a02      	subs	r2, #2
 80072a4:	9211      	str	r2, [sp, #68]	; 0x44
 80072a6:	3b01      	subs	r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80072ae:	9321      	str	r3, [sp, #132]	; 0x84
 80072b0:	bfb8      	it	lt
 80072b2:	425b      	neglt	r3, r3
 80072b4:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 80072b8:	bfb4      	ite	lt
 80072ba:	222d      	movlt	r2, #45	; 0x2d
 80072bc:	222b      	movge	r2, #43	; 0x2b
 80072be:	2b09      	cmp	r3, #9
 80072c0:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 80072c4:	f340 810b 	ble.w	80074de <_vfprintf_r+0x1626>
 80072c8:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 80072cc:	4604      	mov	r4, r0
 80072ce:	4a2c      	ldr	r2, [pc, #176]	; (8007380 <_vfprintf_r+0x14c8>)
 80072d0:	fb82 2103 	smull	r2, r1, r2, r3
 80072d4:	17da      	asrs	r2, r3, #31
 80072d6:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80072da:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80072de:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80072e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072e6:	2a09      	cmp	r2, #9
 80072e8:	4613      	mov	r3, r2
 80072ea:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80072ee:	dcee      	bgt.n	80072ce <_vfprintf_r+0x1416>
 80072f0:	4621      	mov	r1, r4
 80072f2:	3330      	adds	r3, #48	; 0x30
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	f801 2d01 	strb.w	r2, [r1, #-1]!
 80072fa:	4288      	cmp	r0, r1
 80072fc:	f240 816f 	bls.w	80075de <_vfprintf_r+0x1726>
 8007300:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8007304:	4623      	mov	r3, r4
 8007306:	e001      	b.n	800730c <_vfprintf_r+0x1454>
 8007308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800730c:	f801 2b01 	strb.w	r2, [r1], #1
 8007310:	4298      	cmp	r0, r3
 8007312:	d1f9      	bne.n	8007308 <_vfprintf_r+0x1450>
 8007314:	1c43      	adds	r3, r0, #1
 8007316:	1b1b      	subs	r3, r3, r4
 8007318:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 800731c:	4413      	add	r3, r2
 800731e:	aa23      	add	r2, sp, #140	; 0x8c
 8007320:	1a9b      	subs	r3, r3, r2
 8007322:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007324:	9319      	str	r3, [sp, #100]	; 0x64
 8007326:	2a01      	cmp	r2, #1
 8007328:	4413      	add	r3, r2
 800732a:	930d      	str	r3, [sp, #52]	; 0x34
 800732c:	f340 80fe 	ble.w	800752c <_vfprintf_r+0x1674>
 8007330:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007332:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007334:	4413      	add	r3, r2
 8007336:	2200      	movs	r2, #0
 8007338:	930d      	str	r3, [sp, #52]	; 0x34
 800733a:	9213      	str	r2, [sp, #76]	; 0x4c
 800733c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007340:	e65b      	b.n	8006ffa <_vfprintf_r+0x1142>
 8007342:	4614      	mov	r4, r2
 8007344:	3301      	adds	r3, #1
 8007346:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007348:	9328      	str	r3, [sp, #160]	; 0xa0
 800734a:	442c      	add	r4, r5
 800734c:	2b07      	cmp	r3, #7
 800734e:	9429      	str	r4, [sp, #164]	; 0xa4
 8007350:	e889 0024 	stmia.w	r9, {r2, r5}
 8007354:	f73f af76 	bgt.w	8007244 <_vfprintf_r+0x138c>
 8007358:	f109 0908 	add.w	r9, r9, #8
 800735c:	e77e      	b.n	800725c <_vfprintf_r+0x13a4>
 800735e:	aa27      	add	r2, sp, #156	; 0x9c
 8007360:	9908      	ldr	r1, [sp, #32]
 8007362:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007364:	f002 fffe 	bl	800a364 <__sprint_r>
 8007368:	2800      	cmp	r0, #0
 800736a:	f47e aed5 	bne.w	8006118 <_vfprintf_r+0x260>
 800736e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007370:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007372:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007376:	e4d0      	b.n	8006d1a <_vfprintf_r+0xe62>
 8007378:	0800ad9c 	.word	0x0800ad9c
 800737c:	0800adb0 	.word	0x0800adb0
 8007380:	66666667 	.word	0x66666667
 8007384:	2d06      	cmp	r5, #6
 8007386:	462b      	mov	r3, r5
 8007388:	bf28      	it	cs
 800738a:	2306      	movcs	r3, #6
 800738c:	930d      	str	r3, [sp, #52]	; 0x34
 800738e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007392:	46b3      	mov	fp, r6
 8007394:	970e      	str	r7, [sp, #56]	; 0x38
 8007396:	9613      	str	r6, [sp, #76]	; 0x4c
 8007398:	4637      	mov	r7, r6
 800739a:	9309      	str	r3, [sp, #36]	; 0x24
 800739c:	4e91      	ldr	r6, [pc, #580]	; (80075e4 <_vfprintf_r+0x172c>)
 800739e:	f7fe bfa5 	b.w	80062ec <_vfprintf_r+0x434>
 80073a2:	aa27      	add	r2, sp, #156	; 0x9c
 80073a4:	9908      	ldr	r1, [sp, #32]
 80073a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80073a8:	f002 ffdc 	bl	800a364 <__sprint_r>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	f47e aeb3 	bne.w	8006118 <_vfprintf_r+0x260>
 80073b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073b6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80073be:	e4c4      	b.n	8006d4a <_vfprintf_r+0xe92>
 80073c0:	a825      	add	r0, sp, #148	; 0x94
 80073c2:	a922      	add	r1, sp, #136	; 0x88
 80073c4:	aa21      	add	r2, sp, #132	; 0x84
 80073c6:	2303      	movs	r3, #3
 80073c8:	9004      	str	r0, [sp, #16]
 80073ca:	9202      	str	r2, [sp, #8]
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	f8cd b004 	str.w	fp, [sp, #4]
 80073d2:	9103      	str	r1, [sp, #12]
 80073d4:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80073d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80073da:	f000 fa5d 	bl	8007898 <_dtoa_r>
 80073de:	465d      	mov	r5, fp
 80073e0:	4606      	mov	r6, r0
 80073e2:	eb00 040b 	add.w	r4, r0, fp
 80073e6:	e6f7      	b.n	80071d8 <_vfprintf_r+0x1320>
 80073e8:	9307      	str	r3, [sp, #28]
 80073ea:	f7ff b8c7 	b.w	800657c <_vfprintf_r+0x6c4>
 80073ee:	f04f 0b06 	mov.w	fp, #6
 80073f2:	e5a0      	b.n	8006f36 <_vfprintf_r+0x107e>
 80073f4:	272d      	movs	r7, #45	; 0x2d
 80073f6:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80073fa:	f7ff b9b3 	b.w	8006764 <_vfprintf_r+0x8ac>
 80073fe:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8007402:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8007406:	931d      	str	r3, [sp, #116]	; 0x74
 8007408:	232d      	movs	r3, #45	; 0x2d
 800740a:	911c      	str	r1, [sp, #112]	; 0x70
 800740c:	9309      	str	r3, [sp, #36]	; 0x24
 800740e:	e5a0      	b.n	8006f52 <_vfprintf_r+0x109a>
 8007410:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007412:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007414:	4413      	add	r3, r2
 8007416:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007418:	930d      	str	r3, [sp, #52]	; 0x34
 800741a:	2a00      	cmp	r2, #0
 800741c:	f340 8090 	ble.w	8007540 <_vfprintf_r+0x1688>
 8007420:	2267      	movs	r2, #103	; 0x67
 8007422:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007426:	9211      	str	r2, [sp, #68]	; 0x44
 8007428:	e5e7      	b.n	8006ffa <_vfprintf_r+0x1142>
 800742a:	2b00      	cmp	r3, #0
 800742c:	f340 8090 	ble.w	8007550 <_vfprintf_r+0x1698>
 8007430:	f1bb 0f00 	cmp.w	fp, #0
 8007434:	d163      	bne.n	80074fe <_vfprintf_r+0x1646>
 8007436:	9a07      	ldr	r2, [sp, #28]
 8007438:	07d1      	lsls	r1, r2, #31
 800743a:	d460      	bmi.n	80074fe <_vfprintf_r+0x1646>
 800743c:	461a      	mov	r2, r3
 800743e:	920d      	str	r2, [sp, #52]	; 0x34
 8007440:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007444:	e5d9      	b.n	8006ffa <_vfprintf_r+0x1142>
 8007446:	9b07      	ldr	r3, [sp, #28]
 8007448:	07db      	lsls	r3, r3, #31
 800744a:	465f      	mov	r7, fp
 800744c:	d505      	bpl.n	800745a <_vfprintf_r+0x15a2>
 800744e:	ae44      	add	r6, sp, #272	; 0x110
 8007450:	2330      	movs	r3, #48	; 0x30
 8007452:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8007456:	f7fe bf3f 	b.w	80062d8 <_vfprintf_r+0x420>
 800745a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800745e:	ae34      	add	r6, sp, #208	; 0xd0
 8007460:	f7fe bf3d 	b.w	80062de <_vfprintf_r+0x426>
 8007464:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007468:	970e      	str	r7, [sp, #56]	; 0x38
 800746a:	9309      	str	r3, [sp, #36]	; 0x24
 800746c:	950d      	str	r5, [sp, #52]	; 0x34
 800746e:	4683      	mov	fp, r0
 8007470:	9013      	str	r0, [sp, #76]	; 0x4c
 8007472:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8007476:	f7fe bf39 	b.w	80062ec <_vfprintf_r+0x434>
 800747a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800747c:	2b47      	cmp	r3, #71	; 0x47
 800747e:	f47f ad8b 	bne.w	8006f98 <_vfprintf_r+0x10e0>
 8007482:	9b07      	ldr	r3, [sp, #28]
 8007484:	07dc      	lsls	r4, r3, #31
 8007486:	f53f aea1 	bmi.w	80071cc <_vfprintf_r+0x1314>
 800748a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800748c:	2f47      	cmp	r7, #71	; 0x47
 800748e:	eba3 0306 	sub.w	r3, r3, r6
 8007492:	9312      	str	r3, [sp, #72]	; 0x48
 8007494:	f43f aeef 	beq.w	8007276 <_vfprintf_r+0x13be>
 8007498:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800749a:	e704      	b.n	80072a6 <_vfprintf_r+0x13ee>
 800749c:	aa27      	add	r2, sp, #156	; 0x9c
 800749e:	9908      	ldr	r1, [sp, #32]
 80074a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074a2:	f002 ff5f 	bl	800a364 <__sprint_r>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	f47e ae36 	bne.w	8006118 <_vfprintf_r+0x260>
 80074ac:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80074ae:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80074b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80074b2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80074b6:	e61a      	b.n	80070ee <_vfprintf_r+0x1236>
 80074b8:	46a0      	mov	r8, r4
 80074ba:	2500      	movs	r5, #0
 80074bc:	f7fe bd72 	b.w	8005fa4 <_vfprintf_r+0xec>
 80074c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80074c2:	e57d      	b.n	8006fc0 <_vfprintf_r+0x1108>
 80074c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80074c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074c8:	4413      	add	r3, r2
 80074ca:	2267      	movs	r2, #103	; 0x67
 80074cc:	930d      	str	r3, [sp, #52]	; 0x34
 80074ce:	9211      	str	r2, [sp, #68]	; 0x44
 80074d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80074d4:	e591      	b.n	8006ffa <_vfprintf_r+0x1142>
 80074d6:	930e      	str	r3, [sp, #56]	; 0x38
 80074d8:	4617      	mov	r7, r2
 80074da:	f7ff bbff 	b.w	8006cdc <_vfprintf_r+0xe24>
 80074de:	3330      	adds	r3, #48	; 0x30
 80074e0:	2230      	movs	r2, #48	; 0x30
 80074e2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 80074e6:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 80074ea:	ab24      	add	r3, sp, #144	; 0x90
 80074ec:	e717      	b.n	800731e <_vfprintf_r+0x1466>
 80074ee:	930e      	str	r3, [sp, #56]	; 0x38
 80074f0:	e4fc      	b.n	8006eec <_vfprintf_r+0x1034>
 80074f2:	4e3d      	ldr	r6, [pc, #244]	; (80075e8 <_vfprintf_r+0x1730>)
 80074f4:	4b3d      	ldr	r3, [pc, #244]	; (80075ec <_vfprintf_r+0x1734>)
 80074f6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80074fa:	f7ff b935 	b.w	8006768 <_vfprintf_r+0x8b0>
 80074fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007500:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007502:	189d      	adds	r5, r3, r2
 8007504:	eb05 030b 	add.w	r3, r5, fp
 8007508:	930d      	str	r3, [sp, #52]	; 0x34
 800750a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800750e:	e574      	b.n	8006ffa <_vfprintf_r+0x1142>
 8007510:	2200      	movs	r2, #0
 8007512:	2300      	movs	r3, #0
 8007514:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8007518:	f7fc fe32 	bl	8004180 <__aeabi_dcmpeq>
 800751c:	2800      	cmp	r0, #0
 800751e:	f47f ae5f 	bne.w	80071e0 <_vfprintf_r+0x1328>
 8007522:	f1c5 0501 	rsb	r5, r5, #1
 8007526:	9521      	str	r5, [sp, #132]	; 0x84
 8007528:	442c      	add	r4, r5
 800752a:	e536      	b.n	8006f9a <_vfprintf_r+0x10e2>
 800752c:	9b07      	ldr	r3, [sp, #28]
 800752e:	f013 0301 	ands.w	r3, r3, #1
 8007532:	f47f aefd 	bne.w	8007330 <_vfprintf_r+0x1478>
 8007536:	9313      	str	r3, [sp, #76]	; 0x4c
 8007538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800753a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800753e:	e55c      	b.n	8006ffa <_vfprintf_r+0x1142>
 8007540:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007542:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007544:	f1c3 0301 	rsb	r3, r3, #1
 8007548:	441a      	add	r2, r3
 800754a:	4613      	mov	r3, r2
 800754c:	920d      	str	r2, [sp, #52]	; 0x34
 800754e:	e767      	b.n	8007420 <_vfprintf_r+0x1568>
 8007550:	f1bb 0f00 	cmp.w	fp, #0
 8007554:	d102      	bne.n	800755c <_vfprintf_r+0x16a4>
 8007556:	9b07      	ldr	r3, [sp, #28]
 8007558:	07da      	lsls	r2, r3, #31
 800755a:	d507      	bpl.n	800756c <_vfprintf_r+0x16b4>
 800755c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800755e:	1c5d      	adds	r5, r3, #1
 8007560:	eb05 030b 	add.w	r3, r5, fp
 8007564:	930d      	str	r3, [sp, #52]	; 0x34
 8007566:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800756a:	e546      	b.n	8006ffa <_vfprintf_r+0x1142>
 800756c:	2301      	movs	r3, #1
 800756e:	930d      	str	r3, [sp, #52]	; 0x34
 8007570:	e543      	b.n	8006ffa <_vfprintf_r+0x1142>
 8007572:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007574:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007578:	6805      	ldr	r5, [r0, #0]
 800757a:	3004      	adds	r0, #4
 800757c:	2d00      	cmp	r5, #0
 800757e:	900e      	str	r0, [sp, #56]	; 0x38
 8007580:	46a0      	mov	r8, r4
 8007582:	f6be ad0d 	bge.w	8005fa0 <_vfprintf_r+0xe8>
 8007586:	f04f 35ff 	mov.w	r5, #4294967295
 800758a:	f7fe bd09 	b.w	8005fa0 <_vfprintf_r+0xe8>
 800758e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007592:	f7ff b893 	b.w	80066bc <_vfprintf_r+0x804>
 8007596:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800759a:	f7ff b85d 	b.w	8006658 <_vfprintf_r+0x7a0>
 800759e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80075a2:	f7fe bfbf 	b.w	8006524 <_vfprintf_r+0x66c>
 80075a6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80075aa:	f7fe be5c 	b.w	8006266 <_vfprintf_r+0x3ae>
 80075ae:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80075b2:	f7ff b812 	b.w	80065da <_vfprintf_r+0x722>
 80075b6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80075ba:	f7fe bdca 	b.w	8006152 <_vfprintf_r+0x29a>
 80075be:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80075c2:	f7ff b951 	b.w	8006868 <_vfprintf_r+0x9b0>
 80075c6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80075ca:	f7fe be23 	b.w	8006214 <_vfprintf_r+0x35c>
 80075ce:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80075d2:	f7ff b8ed 	b.w	80067b0 <_vfprintf_r+0x8f8>
 80075d6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80075da:	f7ff b88c 	b.w	80066f6 <_vfprintf_r+0x83e>
 80075de:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 80075e2:	e69c      	b.n	800731e <_vfprintf_r+0x1466>
 80075e4:	0800ad94 	.word	0x0800ad94
 80075e8:	0800ad68 	.word	0x0800ad68
 80075ec:	0800ad64 	.word	0x0800ad64

080075f0 <__sbprintf>:
 80075f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075f2:	460c      	mov	r4, r1
 80075f4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80075f8:	8989      	ldrh	r1, [r1, #12]
 80075fa:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80075fc:	89e5      	ldrh	r5, [r4, #14]
 80075fe:	9619      	str	r6, [sp, #100]	; 0x64
 8007600:	f021 0102 	bic.w	r1, r1, #2
 8007604:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007606:	f8ad 500e 	strh.w	r5, [sp, #14]
 800760a:	2500      	movs	r5, #0
 800760c:	69e7      	ldr	r7, [r4, #28]
 800760e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8007612:	9609      	str	r6, [sp, #36]	; 0x24
 8007614:	9506      	str	r5, [sp, #24]
 8007616:	ae1a      	add	r6, sp, #104	; 0x68
 8007618:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800761c:	4669      	mov	r1, sp
 800761e:	9600      	str	r6, [sp, #0]
 8007620:	9604      	str	r6, [sp, #16]
 8007622:	9502      	str	r5, [sp, #8]
 8007624:	9505      	str	r5, [sp, #20]
 8007626:	9707      	str	r7, [sp, #28]
 8007628:	4606      	mov	r6, r0
 800762a:	f7fe fc45 	bl	8005eb8 <_vfprintf_r>
 800762e:	1e05      	subs	r5, r0, #0
 8007630:	db07      	blt.n	8007642 <__sbprintf+0x52>
 8007632:	4630      	mov	r0, r6
 8007634:	4669      	mov	r1, sp
 8007636:	f001 f8e9 	bl	800880c <_fflush_r>
 800763a:	2800      	cmp	r0, #0
 800763c:	bf18      	it	ne
 800763e:	f04f 35ff 	movne.w	r5, #4294967295
 8007642:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007646:	065b      	lsls	r3, r3, #25
 8007648:	d503      	bpl.n	8007652 <__sbprintf+0x62>
 800764a:	89a3      	ldrh	r3, [r4, #12]
 800764c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007650:	81a3      	strh	r3, [r4, #12]
 8007652:	4628      	mov	r0, r5
 8007654:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8007658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800765a:	bf00      	nop

0800765c <_vsprintf_r>:
 800765c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800765e:	b09b      	sub	sp, #108	; 0x6c
 8007660:	460d      	mov	r5, r1
 8007662:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8007666:	f44f 7702 	mov.w	r7, #520	; 0x208
 800766a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800766e:	4669      	mov	r1, sp
 8007670:	9500      	str	r5, [sp, #0]
 8007672:	9504      	str	r5, [sp, #16]
 8007674:	f8ad 700c 	strh.w	r7, [sp, #12]
 8007678:	9402      	str	r4, [sp, #8]
 800767a:	9405      	str	r4, [sp, #20]
 800767c:	f8ad 600e 	strh.w	r6, [sp, #14]
 8007680:	f7fd f89e 	bl	80047c0 <_svfprintf_r>
 8007684:	9b00      	ldr	r3, [sp, #0]
 8007686:	2200      	movs	r2, #0
 8007688:	701a      	strb	r2, [r3, #0]
 800768a:	b01b      	add	sp, #108	; 0x6c
 800768c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800768e:	bf00      	nop

08007690 <vsprintf>:
 8007690:	b410      	push	{r4}
 8007692:	4c04      	ldr	r4, [pc, #16]	; (80076a4 <vsprintf+0x14>)
 8007694:	4613      	mov	r3, r2
 8007696:	460a      	mov	r2, r1
 8007698:	4601      	mov	r1, r0
 800769a:	6820      	ldr	r0, [r4, #0]
 800769c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076a0:	f7ff bfdc 	b.w	800765c <_vsprintf_r>
 80076a4:	20000468 	.word	0x20000468

080076a8 <__swsetup_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4b30      	ldr	r3, [pc, #192]	; (800776c <__swsetup_r+0xc4>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4605      	mov	r5, r0
 80076b0:	460c      	mov	r4, r1
 80076b2:	b113      	cbz	r3, 80076ba <__swsetup_r+0x12>
 80076b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076b6:	2a00      	cmp	r2, #0
 80076b8:	d038      	beq.n	800772c <__swsetup_r+0x84>
 80076ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076be:	b293      	uxth	r3, r2
 80076c0:	0718      	lsls	r0, r3, #28
 80076c2:	d50c      	bpl.n	80076de <__swsetup_r+0x36>
 80076c4:	6920      	ldr	r0, [r4, #16]
 80076c6:	b1a8      	cbz	r0, 80076f4 <__swsetup_r+0x4c>
 80076c8:	f013 0201 	ands.w	r2, r3, #1
 80076cc:	d01e      	beq.n	800770c <__swsetup_r+0x64>
 80076ce:	6963      	ldr	r3, [r4, #20]
 80076d0:	2200      	movs	r2, #0
 80076d2:	425b      	negs	r3, r3
 80076d4:	61a3      	str	r3, [r4, #24]
 80076d6:	60a2      	str	r2, [r4, #8]
 80076d8:	b1f0      	cbz	r0, 8007718 <__swsetup_r+0x70>
 80076da:	2000      	movs	r0, #0
 80076dc:	bd38      	pop	{r3, r4, r5, pc}
 80076de:	06d9      	lsls	r1, r3, #27
 80076e0:	d53c      	bpl.n	800775c <__swsetup_r+0xb4>
 80076e2:	0758      	lsls	r0, r3, #29
 80076e4:	d426      	bmi.n	8007734 <__swsetup_r+0x8c>
 80076e6:	6920      	ldr	r0, [r4, #16]
 80076e8:	f042 0308 	orr.w	r3, r2, #8
 80076ec:	81a3      	strh	r3, [r4, #12]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d1e9      	bne.n	80076c8 <__swsetup_r+0x20>
 80076f4:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80076f8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80076fc:	d0e4      	beq.n	80076c8 <__swsetup_r+0x20>
 80076fe:	4628      	mov	r0, r5
 8007700:	4621      	mov	r1, r4
 8007702:	f001 fc4f 	bl	8008fa4 <__smakebuf_r>
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	6920      	ldr	r0, [r4, #16]
 800770a:	e7dd      	b.n	80076c8 <__swsetup_r+0x20>
 800770c:	0799      	lsls	r1, r3, #30
 800770e:	bf58      	it	pl
 8007710:	6962      	ldrpl	r2, [r4, #20]
 8007712:	60a2      	str	r2, [r4, #8]
 8007714:	2800      	cmp	r0, #0
 8007716:	d1e0      	bne.n	80076da <__swsetup_r+0x32>
 8007718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800771c:	061a      	lsls	r2, r3, #24
 800771e:	d5dd      	bpl.n	80076dc <__swsetup_r+0x34>
 8007720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007724:	81a3      	strh	r3, [r4, #12]
 8007726:	f04f 30ff 	mov.w	r0, #4294967295
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	4618      	mov	r0, r3
 800772e:	f001 f901 	bl	8008934 <__sinit>
 8007732:	e7c2      	b.n	80076ba <__swsetup_r+0x12>
 8007734:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007736:	b151      	cbz	r1, 800774e <__swsetup_r+0xa6>
 8007738:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800773c:	4299      	cmp	r1, r3
 800773e:	d004      	beq.n	800774a <__swsetup_r+0xa2>
 8007740:	4628      	mov	r0, r5
 8007742:	f001 f94f 	bl	80089e4 <_free_r>
 8007746:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800774a:	2300      	movs	r3, #0
 800774c:	6323      	str	r3, [r4, #48]	; 0x30
 800774e:	2300      	movs	r3, #0
 8007750:	6920      	ldr	r0, [r4, #16]
 8007752:	6063      	str	r3, [r4, #4]
 8007754:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8007758:	6020      	str	r0, [r4, #0]
 800775a:	e7c5      	b.n	80076e8 <__swsetup_r+0x40>
 800775c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007760:	2309      	movs	r3, #9
 8007762:	602b      	str	r3, [r5, #0]
 8007764:	f04f 30ff 	mov.w	r0, #4294967295
 8007768:	81a2      	strh	r2, [r4, #12]
 800776a:	bd38      	pop	{r3, r4, r5, pc}
 800776c:	20000468 	.word	0x20000468

08007770 <quorem>:
 8007770:	6902      	ldr	r2, [r0, #16]
 8007772:	690b      	ldr	r3, [r1, #16]
 8007774:	4293      	cmp	r3, r2
 8007776:	f300 808d 	bgt.w	8007894 <quorem+0x124>
 800777a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777e:	f103 38ff 	add.w	r8, r3, #4294967295
 8007782:	f101 0714 	add.w	r7, r1, #20
 8007786:	f100 0b14 	add.w	fp, r0, #20
 800778a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800778e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8007792:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8007796:	b083      	sub	sp, #12
 8007798:	3201      	adds	r2, #1
 800779a:	fbb3 f9f2 	udiv	r9, r3, r2
 800779e:	eb0b 0304 	add.w	r3, fp, r4
 80077a2:	9400      	str	r4, [sp, #0]
 80077a4:	eb07 0a04 	add.w	sl, r7, r4
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	f1b9 0f00 	cmp.w	r9, #0
 80077ae:	d039      	beq.n	8007824 <quorem+0xb4>
 80077b0:	2500      	movs	r5, #0
 80077b2:	46bc      	mov	ip, r7
 80077b4:	46de      	mov	lr, fp
 80077b6:	462b      	mov	r3, r5
 80077b8:	f85c 6b04 	ldr.w	r6, [ip], #4
 80077bc:	f8de 2000 	ldr.w	r2, [lr]
 80077c0:	b2b4      	uxth	r4, r6
 80077c2:	fb09 5504 	mla	r5, r9, r4, r5
 80077c6:	0c36      	lsrs	r6, r6, #16
 80077c8:	0c2c      	lsrs	r4, r5, #16
 80077ca:	fb09 4406 	mla	r4, r9, r6, r4
 80077ce:	b2ad      	uxth	r5, r5
 80077d0:	1b5b      	subs	r3, r3, r5
 80077d2:	b2a6      	uxth	r6, r4
 80077d4:	fa13 f382 	uxtah	r3, r3, r2
 80077d8:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 80077dc:	eb06 4623 	add.w	r6, r6, r3, asr #16
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80077e6:	45e2      	cmp	sl, ip
 80077e8:	f84e 3b04 	str.w	r3, [lr], #4
 80077ec:	ea4f 4514 	mov.w	r5, r4, lsr #16
 80077f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80077f4:	d2e0      	bcs.n	80077b8 <quorem+0x48>
 80077f6:	9b00      	ldr	r3, [sp, #0]
 80077f8:	f85b 3003 	ldr.w	r3, [fp, r3]
 80077fc:	b993      	cbnz	r3, 8007824 <quorem+0xb4>
 80077fe:	9c01      	ldr	r4, [sp, #4]
 8007800:	1f23      	subs	r3, r4, #4
 8007802:	459b      	cmp	fp, r3
 8007804:	d20c      	bcs.n	8007820 <quorem+0xb0>
 8007806:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800780a:	b94b      	cbnz	r3, 8007820 <quorem+0xb0>
 800780c:	f1a4 0308 	sub.w	r3, r4, #8
 8007810:	e002      	b.n	8007818 <quorem+0xa8>
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	3b04      	subs	r3, #4
 8007816:	b91a      	cbnz	r2, 8007820 <quorem+0xb0>
 8007818:	459b      	cmp	fp, r3
 800781a:	f108 38ff 	add.w	r8, r8, #4294967295
 800781e:	d3f8      	bcc.n	8007812 <quorem+0xa2>
 8007820:	f8c0 8010 	str.w	r8, [r0, #16]
 8007824:	4604      	mov	r4, r0
 8007826:	f002 f993 	bl	8009b50 <__mcmp>
 800782a:	2800      	cmp	r0, #0
 800782c:	db2e      	blt.n	800788c <quorem+0x11c>
 800782e:	f109 0901 	add.w	r9, r9, #1
 8007832:	465d      	mov	r5, fp
 8007834:	2300      	movs	r3, #0
 8007836:	f857 1b04 	ldr.w	r1, [r7], #4
 800783a:	6828      	ldr	r0, [r5, #0]
 800783c:	b28a      	uxth	r2, r1
 800783e:	1a9a      	subs	r2, r3, r2
 8007840:	0c09      	lsrs	r1, r1, #16
 8007842:	fa12 f280 	uxtah	r2, r2, r0
 8007846:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 800784a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800784e:	b291      	uxth	r1, r2
 8007850:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007854:	45ba      	cmp	sl, r7
 8007856:	f845 1b04 	str.w	r1, [r5], #4
 800785a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800785e:	d2ea      	bcs.n	8007836 <quorem+0xc6>
 8007860:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8007864:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8007868:	b982      	cbnz	r2, 800788c <quorem+0x11c>
 800786a:	1f1a      	subs	r2, r3, #4
 800786c:	4593      	cmp	fp, r2
 800786e:	d20b      	bcs.n	8007888 <quorem+0x118>
 8007870:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8007874:	b942      	cbnz	r2, 8007888 <quorem+0x118>
 8007876:	3b08      	subs	r3, #8
 8007878:	e002      	b.n	8007880 <quorem+0x110>
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	3b04      	subs	r3, #4
 800787e:	b91a      	cbnz	r2, 8007888 <quorem+0x118>
 8007880:	459b      	cmp	fp, r3
 8007882:	f108 38ff 	add.w	r8, r8, #4294967295
 8007886:	d3f8      	bcc.n	800787a <quorem+0x10a>
 8007888:	f8c4 8010 	str.w	r8, [r4, #16]
 800788c:	4648      	mov	r0, r9
 800788e:	b003      	add	sp, #12
 8007890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007894:	2000      	movs	r0, #0
 8007896:	4770      	bx	lr

08007898 <_dtoa_r>:
 8007898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800789e:	b099      	sub	sp, #100	; 0x64
 80078a0:	4681      	mov	r9, r0
 80078a2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80078a4:	4692      	mov	sl, r2
 80078a6:	469b      	mov	fp, r3
 80078a8:	b149      	cbz	r1, 80078be <_dtoa_r+0x26>
 80078aa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078ac:	604a      	str	r2, [r1, #4]
 80078ae:	2301      	movs	r3, #1
 80078b0:	4093      	lsls	r3, r2
 80078b2:	608b      	str	r3, [r1, #8]
 80078b4:	f001 ff6a 	bl	800978c <_Bfree>
 80078b8:	2300      	movs	r3, #0
 80078ba:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 80078be:	f1bb 0f00 	cmp.w	fp, #0
 80078c2:	46d8      	mov	r8, fp
 80078c4:	db33      	blt.n	800792e <_dtoa_r+0x96>
 80078c6:	2300      	movs	r3, #0
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	4ba3      	ldr	r3, [pc, #652]	; (8007b58 <_dtoa_r+0x2c0>)
 80078cc:	461a      	mov	r2, r3
 80078ce:	ea08 0303 	and.w	r3, r8, r3
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d014      	beq.n	8007900 <_dtoa_r+0x68>
 80078d6:	2200      	movs	r2, #0
 80078d8:	2300      	movs	r3, #0
 80078da:	4650      	mov	r0, sl
 80078dc:	4659      	mov	r1, fp
 80078de:	f7fc fc4f 	bl	8004180 <__aeabi_dcmpeq>
 80078e2:	4605      	mov	r5, r0
 80078e4:	b348      	cbz	r0, 800793a <_dtoa_r+0xa2>
 80078e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80078e8:	2301      	movs	r3, #1
 80078ea:	6013      	str	r3, [r2, #0]
 80078ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 80c2 	beq.w	8007a78 <_dtoa_r+0x1e0>
 80078f4:	4899      	ldr	r0, [pc, #612]	; (8007b5c <_dtoa_r+0x2c4>)
 80078f6:	6018      	str	r0, [r3, #0]
 80078f8:	3801      	subs	r0, #1
 80078fa:	b019      	add	sp, #100	; 0x64
 80078fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007900:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007902:	f242 730f 	movw	r3, #9999	; 0x270f
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	f1ba 0f00 	cmp.w	sl, #0
 800790c:	f000 809f 	beq.w	8007a4e <_dtoa_r+0x1b6>
 8007910:	4893      	ldr	r0, [pc, #588]	; (8007b60 <_dtoa_r+0x2c8>)
 8007912:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007914:	2b00      	cmp	r3, #0
 8007916:	d0f0      	beq.n	80078fa <_dtoa_r+0x62>
 8007918:	78c3      	ldrb	r3, [r0, #3]
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 80ae 	beq.w	8007a7c <_dtoa_r+0x1e4>
 8007920:	f100 0308 	add.w	r3, r0, #8
 8007924:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	b019      	add	sp, #100	; 0x64
 800792a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792e:	2301      	movs	r3, #1
 8007930:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	46c3      	mov	fp, r8
 8007938:	e7c7      	b.n	80078ca <_dtoa_r+0x32>
 800793a:	aa16      	add	r2, sp, #88	; 0x58
 800793c:	ab17      	add	r3, sp, #92	; 0x5c
 800793e:	9201      	str	r2, [sp, #4]
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	4652      	mov	r2, sl
 8007944:	465b      	mov	r3, fp
 8007946:	4648      	mov	r0, r9
 8007948:	f002 f9ae 	bl	8009ca8 <__d2b>
 800794c:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8007950:	9008      	str	r0, [sp, #32]
 8007952:	f040 8085 	bne.w	8007a60 <_dtoa_r+0x1c8>
 8007956:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8007958:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800795a:	442c      	add	r4, r5
 800795c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007960:	2b20      	cmp	r3, #32
 8007962:	f340 8289 	ble.w	8007e78 <_dtoa_r+0x5e0>
 8007966:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800796a:	f204 4012 	addw	r0, r4, #1042	; 0x412
 800796e:	fa08 f803 	lsl.w	r8, r8, r3
 8007972:	fa2a f000 	lsr.w	r0, sl, r0
 8007976:	ea40 0008 	orr.w	r0, r0, r8
 800797a:	f7fc f923 	bl	8003bc4 <__aeabi_ui2d>
 800797e:	2301      	movs	r3, #1
 8007980:	3c01      	subs	r4, #1
 8007982:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007986:	930d      	str	r3, [sp, #52]	; 0x34
 8007988:	2200      	movs	r2, #0
 800798a:	4b76      	ldr	r3, [pc, #472]	; (8007b64 <_dtoa_r+0x2cc>)
 800798c:	f7fb ffdc 	bl	8003948 <__aeabi_dsub>
 8007990:	a36b      	add	r3, pc, #428	; (adr r3, 8007b40 <_dtoa_r+0x2a8>)
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	f7fc f98b 	bl	8003cb0 <__aeabi_dmul>
 800799a:	a36b      	add	r3, pc, #428	; (adr r3, 8007b48 <_dtoa_r+0x2b0>)
 800799c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a0:	f7fb ffd4 	bl	800394c <__adddf3>
 80079a4:	4606      	mov	r6, r0
 80079a6:	4620      	mov	r0, r4
 80079a8:	460f      	mov	r7, r1
 80079aa:	f7fc f91b 	bl	8003be4 <__aeabi_i2d>
 80079ae:	a368      	add	r3, pc, #416	; (adr r3, 8007b50 <_dtoa_r+0x2b8>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7fc f97c 	bl	8003cb0 <__aeabi_dmul>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4630      	mov	r0, r6
 80079be:	4639      	mov	r1, r7
 80079c0:	f7fb ffc4 	bl	800394c <__adddf3>
 80079c4:	4606      	mov	r6, r0
 80079c6:	460f      	mov	r7, r1
 80079c8:	f7fc fc22 	bl	8004210 <__aeabi_d2iz>
 80079cc:	2200      	movs	r2, #0
 80079ce:	9004      	str	r0, [sp, #16]
 80079d0:	2300      	movs	r3, #0
 80079d2:	4630      	mov	r0, r6
 80079d4:	4639      	mov	r1, r7
 80079d6:	f7fc fbdd 	bl	8004194 <__aeabi_dcmplt>
 80079da:	2800      	cmp	r0, #0
 80079dc:	f040 8227 	bne.w	8007e2e <_dtoa_r+0x596>
 80079e0:	9e04      	ldr	r6, [sp, #16]
 80079e2:	2e16      	cmp	r6, #22
 80079e4:	f200 8220 	bhi.w	8007e28 <_dtoa_r+0x590>
 80079e8:	4b5f      	ldr	r3, [pc, #380]	; (8007b68 <_dtoa_r+0x2d0>)
 80079ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079f2:	4652      	mov	r2, sl
 80079f4:	465b      	mov	r3, fp
 80079f6:	f7fc fbeb 	bl	80041d0 <__aeabi_dcmpgt>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	f000 8241 	beq.w	8007e82 <_dtoa_r+0x5ea>
 8007a00:	1e73      	subs	r3, r6, #1
 8007a02:	9304      	str	r3, [sp, #16]
 8007a04:	2300      	movs	r3, #0
 8007a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a08:	1b2c      	subs	r4, r5, r4
 8007a0a:	f1b4 0801 	subs.w	r8, r4, #1
 8007a0e:	f100 8229 	bmi.w	8007e64 <_dtoa_r+0x5cc>
 8007a12:	2300      	movs	r3, #0
 8007a14:	9305      	str	r3, [sp, #20]
 8007a16:	9b04      	ldr	r3, [sp, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f2c0 821a 	blt.w	8007e52 <_dtoa_r+0x5ba>
 8007a1e:	4498      	add	r8, r3
 8007a20:	930a      	str	r3, [sp, #40]	; 0x28
 8007a22:	2300      	movs	r3, #0
 8007a24:	9302      	str	r3, [sp, #8]
 8007a26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a28:	2b09      	cmp	r3, #9
 8007a2a:	d829      	bhi.n	8007a80 <_dtoa_r+0x1e8>
 8007a2c:	2b05      	cmp	r3, #5
 8007a2e:	f340 8643 	ble.w	80086b8 <_dtoa_r+0xe20>
 8007a32:	3b04      	subs	r3, #4
 8007a34:	9322      	str	r3, [sp, #136]	; 0x88
 8007a36:	2500      	movs	r5, #0
 8007a38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a3a:	3b02      	subs	r3, #2
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	f200 8622 	bhi.w	8008686 <_dtoa_r+0xdee>
 8007a42:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007a46:	032a      	.short	0x032a
 8007a48:	03350223 	.word	0x03350223
 8007a4c:	044f      	.short	0x044f
 8007a4e:	4b44      	ldr	r3, [pc, #272]	; (8007b60 <_dtoa_r+0x2c8>)
 8007a50:	4a46      	ldr	r2, [pc, #280]	; (8007b6c <_dtoa_r+0x2d4>)
 8007a52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007a56:	2800      	cmp	r0, #0
 8007a58:	bf14      	ite	ne
 8007a5a:	4618      	movne	r0, r3
 8007a5c:	4610      	moveq	r0, r2
 8007a5e:	e758      	b.n	8007912 <_dtoa_r+0x7a>
 8007a60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a64:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007a68:	950d      	str	r5, [sp, #52]	; 0x34
 8007a6a:	4650      	mov	r0, sl
 8007a6c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007a70:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007a74:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8007a76:	e787      	b.n	8007988 <_dtoa_r+0xf0>
 8007a78:	483d      	ldr	r0, [pc, #244]	; (8007b70 <_dtoa_r+0x2d8>)
 8007a7a:	e73e      	b.n	80078fa <_dtoa_r+0x62>
 8007a7c:	1cc3      	adds	r3, r0, #3
 8007a7e:	e751      	b.n	8007924 <_dtoa_r+0x8c>
 8007a80:	2100      	movs	r1, #0
 8007a82:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007a86:	4648      	mov	r0, r9
 8007a88:	9122      	str	r1, [sp, #136]	; 0x88
 8007a8a:	f001 fe59 	bl	8009740 <_Balloc>
 8007a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a92:	9306      	str	r3, [sp, #24]
 8007a94:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a96:	930c      	str	r3, [sp, #48]	; 0x30
 8007a98:	2301      	movs	r3, #1
 8007a9a:	9007      	str	r0, [sp, #28]
 8007a9c:	9223      	str	r2, [sp, #140]	; 0x8c
 8007a9e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8007aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f2c0 80d0 	blt.w	8007c4c <_dtoa_r+0x3b4>
 8007aac:	9a04      	ldr	r2, [sp, #16]
 8007aae:	2a0e      	cmp	r2, #14
 8007ab0:	f300 80cc 	bgt.w	8007c4c <_dtoa_r+0x3b4>
 8007ab4:	4b2c      	ldr	r3, [pc, #176]	; (8007b68 <_dtoa_r+0x2d0>)
 8007ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aba:	ed93 7b00 	vldr	d7, [r3]
 8007abe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ac6:	f2c0 82fe 	blt.w	80080c6 <_dtoa_r+0x82e>
 8007aca:	4656      	mov	r6, sl
 8007acc:	465f      	mov	r7, fp
 8007ace:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	4652      	mov	r2, sl
 8007ad6:	465b      	mov	r3, fp
 8007ad8:	4639      	mov	r1, r7
 8007ada:	f7fc fa13 	bl	8003f04 <__aeabi_ddiv>
 8007ade:	f7fc fb97 	bl	8004210 <__aeabi_d2iz>
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	f7fc f87e 	bl	8003be4 <__aeabi_i2d>
 8007ae8:	4652      	mov	r2, sl
 8007aea:	465b      	mov	r3, fp
 8007aec:	f7fc f8e0 	bl	8003cb0 <__aeabi_dmul>
 8007af0:	460b      	mov	r3, r1
 8007af2:	4602      	mov	r2, r0
 8007af4:	4639      	mov	r1, r7
 8007af6:	4630      	mov	r0, r6
 8007af8:	f7fb ff26 	bl	8003948 <__aeabi_dsub>
 8007afc:	9d07      	ldr	r5, [sp, #28]
 8007afe:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8007b02:	702b      	strb	r3, [r5, #0]
 8007b04:	9b06      	ldr	r3, [sp, #24]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	4606      	mov	r6, r0
 8007b0a:	460f      	mov	r7, r1
 8007b0c:	f105 0501 	add.w	r5, r5, #1
 8007b10:	d061      	beq.n	8007bd6 <_dtoa_r+0x33e>
 8007b12:	2200      	movs	r2, #0
 8007b14:	4b17      	ldr	r3, [pc, #92]	; (8007b74 <_dtoa_r+0x2dc>)
 8007b16:	f7fc f8cb 	bl	8003cb0 <__aeabi_dmul>
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	4606      	mov	r6, r0
 8007b20:	460f      	mov	r7, r1
 8007b22:	f7fc fb2d 	bl	8004180 <__aeabi_dcmpeq>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d17d      	bne.n	8007c26 <_dtoa_r+0x38e>
 8007b2a:	f8cd 9014 	str.w	r9, [sp, #20]
 8007b2e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8007b32:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8007b36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007b3a:	e028      	b.n	8007b8e <_dtoa_r+0x2f6>
 8007b3c:	f3af 8000 	nop.w
 8007b40:	636f4361 	.word	0x636f4361
 8007b44:	3fd287a7 	.word	0x3fd287a7
 8007b48:	8b60c8b3 	.word	0x8b60c8b3
 8007b4c:	3fc68a28 	.word	0x3fc68a28
 8007b50:	509f79fb 	.word	0x509f79fb
 8007b54:	3fd34413 	.word	0x3fd34413
 8007b58:	7ff00000 	.word	0x7ff00000
 8007b5c:	0800ad9d 	.word	0x0800ad9d
 8007b60:	0800addc 	.word	0x0800addc
 8007b64:	3ff80000 	.word	0x3ff80000
 8007b68:	0800adf0 	.word	0x0800adf0
 8007b6c:	0800add0 	.word	0x0800add0
 8007b70:	0800ad9c 	.word	0x0800ad9c
 8007b74:	40240000 	.word	0x40240000
 8007b78:	f7fc f89a 	bl	8003cb0 <__aeabi_dmul>
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	2300      	movs	r3, #0
 8007b80:	4606      	mov	r6, r0
 8007b82:	460f      	mov	r7, r1
 8007b84:	f7fc fafc 	bl	8004180 <__aeabi_dcmpeq>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	f040 83ae 	bne.w	80082ea <_dtoa_r+0xa52>
 8007b8e:	4642      	mov	r2, r8
 8007b90:	464b      	mov	r3, r9
 8007b92:	4630      	mov	r0, r6
 8007b94:	4639      	mov	r1, r7
 8007b96:	f7fc f9b5 	bl	8003f04 <__aeabi_ddiv>
 8007b9a:	f7fc fb39 	bl	8004210 <__aeabi_d2iz>
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	f7fc f820 	bl	8003be4 <__aeabi_i2d>
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	464b      	mov	r3, r9
 8007ba8:	f7fc f882 	bl	8003cb0 <__aeabi_dmul>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	f7fb fec8 	bl	8003948 <__aeabi_dsub>
 8007bb8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8007bbc:	f805 eb01 	strb.w	lr, [r5], #1
 8007bc0:	ebcb 0e05 	rsb	lr, fp, r5
 8007bc4:	45d6      	cmp	lr, sl
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	460f      	mov	r7, r1
 8007bca:	f04f 0200 	mov.w	r2, #0
 8007bce:	4bae      	ldr	r3, [pc, #696]	; (8007e88 <_dtoa_r+0x5f0>)
 8007bd0:	d1d2      	bne.n	8007b78 <_dtoa_r+0x2e0>
 8007bd2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007bd6:	4632      	mov	r2, r6
 8007bd8:	463b      	mov	r3, r7
 8007bda:	4630      	mov	r0, r6
 8007bdc:	4639      	mov	r1, r7
 8007bde:	f7fb feb5 	bl	800394c <__adddf3>
 8007be2:	4606      	mov	r6, r0
 8007be4:	460f      	mov	r7, r1
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bee:	f7fc fad1 	bl	8004194 <__aeabi_dcmplt>
 8007bf2:	b940      	cbnz	r0, 8007c06 <_dtoa_r+0x36e>
 8007bf4:	4632      	mov	r2, r6
 8007bf6:	463b      	mov	r3, r7
 8007bf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bfc:	f7fc fac0 	bl	8004180 <__aeabi_dcmpeq>
 8007c00:	b188      	cbz	r0, 8007c26 <_dtoa_r+0x38e>
 8007c02:	07e3      	lsls	r3, r4, #31
 8007c04:	d50f      	bpl.n	8007c26 <_dtoa_r+0x38e>
 8007c06:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8007c0a:	9a07      	ldr	r2, [sp, #28]
 8007c0c:	1e6b      	subs	r3, r5, #1
 8007c0e:	e004      	b.n	8007c1a <_dtoa_r+0x382>
 8007c10:	429a      	cmp	r2, r3
 8007c12:	f000 83fc 	beq.w	800840e <_dtoa_r+0xb76>
 8007c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c1a:	2c39      	cmp	r4, #57	; 0x39
 8007c1c:	f103 0501 	add.w	r5, r3, #1
 8007c20:	d0f6      	beq.n	8007c10 <_dtoa_r+0x378>
 8007c22:	3401      	adds	r4, #1
 8007c24:	701c      	strb	r4, [r3, #0]
 8007c26:	9908      	ldr	r1, [sp, #32]
 8007c28:	4648      	mov	r0, r9
 8007c2a:	f001 fdaf 	bl	800978c <_Bfree>
 8007c2e:	2200      	movs	r2, #0
 8007c30:	9b04      	ldr	r3, [sp, #16]
 8007c32:	702a      	strb	r2, [r5, #0]
 8007c34:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c36:	3301      	adds	r3, #1
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 839b 	beq.w	8008378 <_dtoa_r+0xae0>
 8007c42:	9807      	ldr	r0, [sp, #28]
 8007c44:	601d      	str	r5, [r3, #0]
 8007c46:	b019      	add	sp, #100	; 0x64
 8007c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	f000 810e 	beq.w	8007e70 <_dtoa_r+0x5d8>
 8007c54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007c56:	2a01      	cmp	r2, #1
 8007c58:	f340 8257 	ble.w	800810a <_dtoa_r+0x872>
 8007c5c:	9b06      	ldr	r3, [sp, #24]
 8007c5e:	9a02      	ldr	r2, [sp, #8]
 8007c60:	1e5f      	subs	r7, r3, #1
 8007c62:	42ba      	cmp	r2, r7
 8007c64:	f2c0 838b 	blt.w	800837e <_dtoa_r+0xae6>
 8007c68:	1bd7      	subs	r7, r2, r7
 8007c6a:	9b06      	ldr	r3, [sp, #24]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f2c0 8480 	blt.w	8008572 <_dtoa_r+0xcda>
 8007c72:	9d05      	ldr	r5, [sp, #20]
 8007c74:	9b06      	ldr	r3, [sp, #24]
 8007c76:	9a05      	ldr	r2, [sp, #20]
 8007c78:	2101      	movs	r1, #1
 8007c7a:	441a      	add	r2, r3
 8007c7c:	4648      	mov	r0, r9
 8007c7e:	9205      	str	r2, [sp, #20]
 8007c80:	4498      	add	r8, r3
 8007c82:	f001 fe1b 	bl	80098bc <__i2b>
 8007c86:	4606      	mov	r6, r0
 8007c88:	b165      	cbz	r5, 8007ca4 <_dtoa_r+0x40c>
 8007c8a:	f1b8 0f00 	cmp.w	r8, #0
 8007c8e:	dd09      	ble.n	8007ca4 <_dtoa_r+0x40c>
 8007c90:	4545      	cmp	r5, r8
 8007c92:	9a05      	ldr	r2, [sp, #20]
 8007c94:	462b      	mov	r3, r5
 8007c96:	bfa8      	it	ge
 8007c98:	4643      	movge	r3, r8
 8007c9a:	1ad2      	subs	r2, r2, r3
 8007c9c:	9205      	str	r2, [sp, #20]
 8007c9e:	1aed      	subs	r5, r5, r3
 8007ca0:	ebc3 0808 	rsb	r8, r3, r8
 8007ca4:	9b02      	ldr	r3, [sp, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f340 82f5 	ble.w	8008296 <_dtoa_r+0x9fe>
 8007cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cae:	2a00      	cmp	r2, #0
 8007cb0:	f000 8202 	beq.w	80080b8 <_dtoa_r+0x820>
 8007cb4:	2f00      	cmp	r7, #0
 8007cb6:	f000 81ff 	beq.w	80080b8 <_dtoa_r+0x820>
 8007cba:	4631      	mov	r1, r6
 8007cbc:	463a      	mov	r2, r7
 8007cbe:	4648      	mov	r0, r9
 8007cc0:	f001 fe9e 	bl	8009a00 <__pow5mult>
 8007cc4:	9a08      	ldr	r2, [sp, #32]
 8007cc6:	4601      	mov	r1, r0
 8007cc8:	4606      	mov	r6, r0
 8007cca:	4648      	mov	r0, r9
 8007ccc:	f001 fe00 	bl	80098d0 <__multiply>
 8007cd0:	9908      	ldr	r1, [sp, #32]
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	4648      	mov	r0, r9
 8007cd6:	f001 fd59 	bl	800978c <_Bfree>
 8007cda:	9b02      	ldr	r3, [sp, #8]
 8007cdc:	1bdb      	subs	r3, r3, r7
 8007cde:	9302      	str	r3, [sp, #8]
 8007ce0:	f040 81e9 	bne.w	80080b6 <_dtoa_r+0x81e>
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	4648      	mov	r0, r9
 8007ce8:	f001 fde8 	bl	80098bc <__i2b>
 8007cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cee:	9002      	str	r0, [sp, #8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 8215 	beq.w	8008120 <_dtoa_r+0x888>
 8007cf6:	4601      	mov	r1, r0
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4648      	mov	r0, r9
 8007cfc:	f001 fe80 	bl	8009a00 <__pow5mult>
 8007d00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d02:	9002      	str	r0, [sp, #8]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	f340 82f3 	ble.w	80082f0 <_dtoa_r+0xa58>
 8007d0a:	2700      	movs	r7, #0
 8007d0c:	9a02      	ldr	r2, [sp, #8]
 8007d0e:	6913      	ldr	r3, [r2, #16]
 8007d10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d14:	6918      	ldr	r0, [r3, #16]
 8007d16:	f001 fd83 	bl	8009820 <__hi0bits>
 8007d1a:	f1c0 0020 	rsb	r0, r0, #32
 8007d1e:	4440      	add	r0, r8
 8007d20:	f010 001f 	ands.w	r0, r0, #31
 8007d24:	f000 81fa 	beq.w	800811c <_dtoa_r+0x884>
 8007d28:	f1c0 0320 	rsb	r3, r0, #32
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	f340 84bd 	ble.w	80086ac <_dtoa_r+0xe14>
 8007d32:	f1c0 001c 	rsb	r0, r0, #28
 8007d36:	9b05      	ldr	r3, [sp, #20]
 8007d38:	4403      	add	r3, r0
 8007d3a:	9305      	str	r3, [sp, #20]
 8007d3c:	4405      	add	r5, r0
 8007d3e:	4480      	add	r8, r0
 8007d40:	9b05      	ldr	r3, [sp, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	dd05      	ble.n	8007d52 <_dtoa_r+0x4ba>
 8007d46:	4621      	mov	r1, r4
 8007d48:	461a      	mov	r2, r3
 8007d4a:	4648      	mov	r0, r9
 8007d4c:	f001 fea8 	bl	8009aa0 <__lshift>
 8007d50:	4604      	mov	r4, r0
 8007d52:	f1b8 0f00 	cmp.w	r8, #0
 8007d56:	dd05      	ble.n	8007d64 <_dtoa_r+0x4cc>
 8007d58:	4642      	mov	r2, r8
 8007d5a:	9902      	ldr	r1, [sp, #8]
 8007d5c:	4648      	mov	r0, r9
 8007d5e:	f001 fe9f 	bl	8009aa0 <__lshift>
 8007d62:	9002      	str	r0, [sp, #8]
 8007d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f040 827a 	bne.w	8008260 <_dtoa_r+0x9c8>
 8007d6c:	9b06      	ldr	r3, [sp, #24]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f340 8293 	ble.w	800829a <_dtoa_r+0xa02>
 8007d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f040 81f4 	bne.w	8008164 <_dtoa_r+0x8cc>
 8007d7c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8007d80:	9f06      	ldr	r7, [sp, #24]
 8007d82:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007d86:	465d      	mov	r5, fp
 8007d88:	e002      	b.n	8007d90 <_dtoa_r+0x4f8>
 8007d8a:	f001 fd09 	bl	80097a0 <__multadd>
 8007d8e:	4604      	mov	r4, r0
 8007d90:	4641      	mov	r1, r8
 8007d92:	4620      	mov	r0, r4
 8007d94:	f7ff fcec 	bl	8007770 <quorem>
 8007d98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007d9c:	f805 ab01 	strb.w	sl, [r5], #1
 8007da0:	ebcb 0305 	rsb	r3, fp, r5
 8007da4:	42bb      	cmp	r3, r7
 8007da6:	f04f 020a 	mov.w	r2, #10
 8007daa:	f04f 0300 	mov.w	r3, #0
 8007dae:	4621      	mov	r1, r4
 8007db0:	4648      	mov	r0, r9
 8007db2:	dbea      	blt.n	8007d8a <_dtoa_r+0x4f2>
 8007db4:	9b07      	ldr	r3, [sp, #28]
 8007db6:	9a06      	ldr	r2, [sp, #24]
 8007db8:	2a01      	cmp	r2, #1
 8007dba:	bfac      	ite	ge
 8007dbc:	189b      	addge	r3, r3, r2
 8007dbe:	3301      	addlt	r3, #1
 8007dc0:	461d      	mov	r5, r3
 8007dc2:	f04f 0b00 	mov.w	fp, #0
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	2201      	movs	r2, #1
 8007dca:	4648      	mov	r0, r9
 8007dcc:	f001 fe68 	bl	8009aa0 <__lshift>
 8007dd0:	9902      	ldr	r1, [sp, #8]
 8007dd2:	9008      	str	r0, [sp, #32]
 8007dd4:	f001 febc 	bl	8009b50 <__mcmp>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	f340 8305 	ble.w	80083e8 <_dtoa_r+0xb50>
 8007dde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007de2:	9907      	ldr	r1, [sp, #28]
 8007de4:	1e6b      	subs	r3, r5, #1
 8007de6:	e004      	b.n	8007df2 <_dtoa_r+0x55a>
 8007de8:	428b      	cmp	r3, r1
 8007dea:	f000 8274 	beq.w	80082d6 <_dtoa_r+0xa3e>
 8007dee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007df2:	2a39      	cmp	r2, #57	; 0x39
 8007df4:	f103 0501 	add.w	r5, r3, #1
 8007df8:	d0f6      	beq.n	8007de8 <_dtoa_r+0x550>
 8007dfa:	3201      	adds	r2, #1
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	9902      	ldr	r1, [sp, #8]
 8007e00:	4648      	mov	r0, r9
 8007e02:	f001 fcc3 	bl	800978c <_Bfree>
 8007e06:	2e00      	cmp	r6, #0
 8007e08:	f43f af0d 	beq.w	8007c26 <_dtoa_r+0x38e>
 8007e0c:	f1bb 0f00 	cmp.w	fp, #0
 8007e10:	d005      	beq.n	8007e1e <_dtoa_r+0x586>
 8007e12:	45b3      	cmp	fp, r6
 8007e14:	d003      	beq.n	8007e1e <_dtoa_r+0x586>
 8007e16:	4659      	mov	r1, fp
 8007e18:	4648      	mov	r0, r9
 8007e1a:	f001 fcb7 	bl	800978c <_Bfree>
 8007e1e:	4631      	mov	r1, r6
 8007e20:	4648      	mov	r0, r9
 8007e22:	f001 fcb3 	bl	800978c <_Bfree>
 8007e26:	e6fe      	b.n	8007c26 <_dtoa_r+0x38e>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e2c:	e5ec      	b.n	8007a08 <_dtoa_r+0x170>
 8007e2e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007e32:	4640      	mov	r0, r8
 8007e34:	f7fb fed6 	bl	8003be4 <__aeabi_i2d>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	4639      	mov	r1, r7
 8007e40:	f7fc f99e 	bl	8004180 <__aeabi_dcmpeq>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	f47f adcb 	bne.w	80079e0 <_dtoa_r+0x148>
 8007e4a:	f108 33ff 	add.w	r3, r8, #4294967295
 8007e4e:	9304      	str	r3, [sp, #16]
 8007e50:	e5c6      	b.n	80079e0 <_dtoa_r+0x148>
 8007e52:	9a05      	ldr	r2, [sp, #20]
 8007e54:	9b04      	ldr	r3, [sp, #16]
 8007e56:	1ad2      	subs	r2, r2, r3
 8007e58:	425b      	negs	r3, r3
 8007e5a:	9302      	str	r3, [sp, #8]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9205      	str	r2, [sp, #20]
 8007e60:	930a      	str	r3, [sp, #40]	; 0x28
 8007e62:	e5e0      	b.n	8007a26 <_dtoa_r+0x18e>
 8007e64:	f1c8 0300 	rsb	r3, r8, #0
 8007e68:	9305      	str	r3, [sp, #20]
 8007e6a:	f04f 0800 	mov.w	r8, #0
 8007e6e:	e5d2      	b.n	8007a16 <_dtoa_r+0x17e>
 8007e70:	9f02      	ldr	r7, [sp, #8]
 8007e72:	9d05      	ldr	r5, [sp, #20]
 8007e74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007e76:	e707      	b.n	8007c88 <_dtoa_r+0x3f0>
 8007e78:	f1c3 0820 	rsb	r8, r3, #32
 8007e7c:	fa0a f008 	lsl.w	r0, sl, r8
 8007e80:	e57b      	b.n	800797a <_dtoa_r+0xe2>
 8007e82:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e84:	e5c0      	b.n	8007a08 <_dtoa_r+0x170>
 8007e86:	bf00      	nop
 8007e88:	40240000 	.word	0x40240000
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e90:	9b04      	ldr	r3, [sp, #16]
 8007e92:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007e94:	4413      	add	r3, r2
 8007e96:	930c      	str	r3, [sp, #48]	; 0x30
 8007e98:	3301      	adds	r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	9306      	str	r3, [sp, #24]
 8007e9e:	f340 827d 	ble.w	800839c <_dtoa_r+0xb04>
 8007ea2:	9c06      	ldr	r4, [sp, #24]
 8007ea4:	4626      	mov	r6, r4
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	2e17      	cmp	r6, #23
 8007eaa:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007eae:	d90b      	bls.n	8007ec8 <_dtoa_r+0x630>
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	2304      	movs	r3, #4
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	f103 0014 	add.w	r0, r3, #20
 8007eba:	42b0      	cmp	r0, r6
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	f102 0201 	add.w	r2, r2, #1
 8007ec2:	d9f7      	bls.n	8007eb4 <_dtoa_r+0x61c>
 8007ec4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007ec8:	4648      	mov	r0, r9
 8007eca:	f001 fc39 	bl	8009740 <_Balloc>
 8007ece:	2c0e      	cmp	r4, #14
 8007ed0:	9007      	str	r0, [sp, #28]
 8007ed2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8007ed6:	f63f ade5 	bhi.w	8007aa4 <_dtoa_r+0x20c>
 8007eda:	2d00      	cmp	r5, #0
 8007edc:	f43f ade2 	beq.w	8007aa4 <_dtoa_r+0x20c>
 8007ee0:	9904      	ldr	r1, [sp, #16]
 8007ee2:	2900      	cmp	r1, #0
 8007ee4:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8007ee8:	f340 829a 	ble.w	8008420 <_dtoa_r+0xb88>
 8007eec:	4b90      	ldr	r3, [pc, #576]	; (8008130 <_dtoa_r+0x898>)
 8007eee:	f001 020f 	and.w	r2, r1, #15
 8007ef2:	110e      	asrs	r6, r1, #4
 8007ef4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ef8:	06f0      	lsls	r0, r6, #27
 8007efa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007efe:	f140 8246 	bpl.w	800838e <_dtoa_r+0xaf6>
 8007f02:	4b8c      	ldr	r3, [pc, #560]	; (8008134 <_dtoa_r+0x89c>)
 8007f04:	4650      	mov	r0, sl
 8007f06:	4659      	mov	r1, fp
 8007f08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f0c:	f7fb fffa 	bl	8003f04 <__aeabi_ddiv>
 8007f10:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f14:	f006 060f 	and.w	r6, r6, #15
 8007f18:	f04f 0a03 	mov.w	sl, #3
 8007f1c:	b186      	cbz	r6, 8007f40 <_dtoa_r+0x6a8>
 8007f1e:	4f85      	ldr	r7, [pc, #532]	; (8008134 <_dtoa_r+0x89c>)
 8007f20:	07f1      	lsls	r1, r6, #31
 8007f22:	d509      	bpl.n	8007f38 <_dtoa_r+0x6a0>
 8007f24:	4620      	mov	r0, r4
 8007f26:	4629      	mov	r1, r5
 8007f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f2c:	f7fb fec0 	bl	8003cb0 <__aeabi_dmul>
 8007f30:	f10a 0a01 	add.w	sl, sl, #1
 8007f34:	4604      	mov	r4, r0
 8007f36:	460d      	mov	r5, r1
 8007f38:	1076      	asrs	r6, r6, #1
 8007f3a:	f107 0708 	add.w	r7, r7, #8
 8007f3e:	d1ef      	bne.n	8007f20 <_dtoa_r+0x688>
 8007f40:	4622      	mov	r2, r4
 8007f42:	462b      	mov	r3, r5
 8007f44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f48:	f7fb ffdc 	bl	8003f04 <__aeabi_ddiv>
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	460f      	mov	r7, r1
 8007f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f52:	b143      	cbz	r3, 8007f66 <_dtoa_r+0x6ce>
 8007f54:	2200      	movs	r2, #0
 8007f56:	4b78      	ldr	r3, [pc, #480]	; (8008138 <_dtoa_r+0x8a0>)
 8007f58:	4630      	mov	r0, r6
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	f7fc f91a 	bl	8004194 <__aeabi_dcmplt>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	f040 831a 	bne.w	800859a <_dtoa_r+0xd02>
 8007f66:	4650      	mov	r0, sl
 8007f68:	f7fb fe3c 	bl	8003be4 <__aeabi_i2d>
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	463b      	mov	r3, r7
 8007f70:	f7fb fe9e 	bl	8003cb0 <__aeabi_dmul>
 8007f74:	4b71      	ldr	r3, [pc, #452]	; (800813c <_dtoa_r+0x8a4>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	f7fb fce8 	bl	800394c <__adddf3>
 8007f7c:	9b06      	ldr	r3, [sp, #24]
 8007f7e:	4604      	mov	r4, r0
 8007f80:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 81db 	beq.w	8008340 <_dtoa_r+0xaa8>
 8007f8a:	9b04      	ldr	r3, [sp, #16]
 8007f8c:	9314      	str	r3, [sp, #80]	; 0x50
 8007f8e:	9b06      	ldr	r3, [sp, #24]
 8007f90:	9310      	str	r3, [sp, #64]	; 0x40
 8007f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 8294 	beq.w	80084c2 <_dtoa_r+0xc2a>
 8007f9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f9c:	4b64      	ldr	r3, [pc, #400]	; (8008130 <_dtoa_r+0x898>)
 8007f9e:	4968      	ldr	r1, [pc, #416]	; (8008140 <_dtoa_r+0x8a8>)
 8007fa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fa4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fa8:	2000      	movs	r0, #0
 8007faa:	f7fb ffab 	bl	8003f04 <__aeabi_ddiv>
 8007fae:	4622      	mov	r2, r4
 8007fb0:	462b      	mov	r3, r5
 8007fb2:	f7fb fcc9 	bl	8003948 <__aeabi_dsub>
 8007fb6:	4682      	mov	sl, r0
 8007fb8:	468b      	mov	fp, r1
 8007fba:	4630      	mov	r0, r6
 8007fbc:	4639      	mov	r1, r7
 8007fbe:	f7fc f927 	bl	8004210 <__aeabi_d2iz>
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	f7fb fe0e 	bl	8003be4 <__aeabi_i2d>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4630      	mov	r0, r6
 8007fce:	4639      	mov	r1, r7
 8007fd0:	f7fb fcba 	bl	8003948 <__aeabi_dsub>
 8007fd4:	3430      	adds	r4, #48	; 0x30
 8007fd6:	9d07      	ldr	r5, [sp, #28]
 8007fd8:	b2e4      	uxtb	r4, r4
 8007fda:	4606      	mov	r6, r0
 8007fdc:	460f      	mov	r7, r1
 8007fde:	702c      	strb	r4, [r5, #0]
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4650      	mov	r0, sl
 8007fe6:	4659      	mov	r1, fp
 8007fe8:	3501      	adds	r5, #1
 8007fea:	f7fc f8f1 	bl	80041d0 <__aeabi_dcmpgt>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d150      	bne.n	8008094 <_dtoa_r+0x7fc>
 8007ff2:	4632      	mov	r2, r6
 8007ff4:	463b      	mov	r3, r7
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	494f      	ldr	r1, [pc, #316]	; (8008138 <_dtoa_r+0x8a0>)
 8007ffa:	f7fb fca5 	bl	8003948 <__aeabi_dsub>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	4650      	mov	r0, sl
 8008004:	4659      	mov	r1, fp
 8008006:	f7fc f8e3 	bl	80041d0 <__aeabi_dcmpgt>
 800800a:	2800      	cmp	r0, #0
 800800c:	f040 8308 	bne.w	8008620 <_dtoa_r+0xd88>
 8008010:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008012:	2a01      	cmp	r2, #1
 8008014:	f340 81f7 	ble.w	8008406 <_dtoa_r+0xb6e>
 8008018:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800801a:	9a07      	ldr	r2, [sp, #28]
 800801c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008020:	4413      	add	r3, r2
 8008022:	4698      	mov	r8, r3
 8008024:	e00d      	b.n	8008042 <_dtoa_r+0x7aa>
 8008026:	2000      	movs	r0, #0
 8008028:	4943      	ldr	r1, [pc, #268]	; (8008138 <_dtoa_r+0x8a0>)
 800802a:	f7fb fc8d 	bl	8003948 <__aeabi_dsub>
 800802e:	4652      	mov	r2, sl
 8008030:	465b      	mov	r3, fp
 8008032:	f7fc f8af 	bl	8004194 <__aeabi_dcmplt>
 8008036:	2800      	cmp	r0, #0
 8008038:	f040 82f2 	bne.w	8008620 <_dtoa_r+0xd88>
 800803c:	4545      	cmp	r5, r8
 800803e:	f000 81e0 	beq.w	8008402 <_dtoa_r+0xb6a>
 8008042:	4650      	mov	r0, sl
 8008044:	4659      	mov	r1, fp
 8008046:	2200      	movs	r2, #0
 8008048:	4b3e      	ldr	r3, [pc, #248]	; (8008144 <_dtoa_r+0x8ac>)
 800804a:	f7fb fe31 	bl	8003cb0 <__aeabi_dmul>
 800804e:	2200      	movs	r2, #0
 8008050:	4b3c      	ldr	r3, [pc, #240]	; (8008144 <_dtoa_r+0x8ac>)
 8008052:	4682      	mov	sl, r0
 8008054:	468b      	mov	fp, r1
 8008056:	4630      	mov	r0, r6
 8008058:	4639      	mov	r1, r7
 800805a:	f7fb fe29 	bl	8003cb0 <__aeabi_dmul>
 800805e:	460f      	mov	r7, r1
 8008060:	4606      	mov	r6, r0
 8008062:	f7fc f8d5 	bl	8004210 <__aeabi_d2iz>
 8008066:	4604      	mov	r4, r0
 8008068:	f7fb fdbc 	bl	8003be4 <__aeabi_i2d>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4630      	mov	r0, r6
 8008072:	4639      	mov	r1, r7
 8008074:	f7fb fc68 	bl	8003948 <__aeabi_dsub>
 8008078:	3430      	adds	r4, #48	; 0x30
 800807a:	b2e4      	uxtb	r4, r4
 800807c:	4652      	mov	r2, sl
 800807e:	465b      	mov	r3, fp
 8008080:	f805 4b01 	strb.w	r4, [r5], #1
 8008084:	4606      	mov	r6, r0
 8008086:	460f      	mov	r7, r1
 8008088:	f7fc f884 	bl	8004194 <__aeabi_dcmplt>
 800808c:	4632      	mov	r2, r6
 800808e:	463b      	mov	r3, r7
 8008090:	2800      	cmp	r0, #0
 8008092:	d0c8      	beq.n	8008026 <_dtoa_r+0x78e>
 8008094:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008096:	9304      	str	r3, [sp, #16]
 8008098:	e5c5      	b.n	8007c26 <_dtoa_r+0x38e>
 800809a:	2300      	movs	r3, #0
 800809c:	9309      	str	r3, [sp, #36]	; 0x24
 800809e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f340 8180 	ble.w	80083a6 <_dtoa_r+0xb0e>
 80080a6:	461e      	mov	r6, r3
 80080a8:	461c      	mov	r4, r3
 80080aa:	930c      	str	r3, [sp, #48]	; 0x30
 80080ac:	9306      	str	r3, [sp, #24]
 80080ae:	e6fa      	b.n	8007ea6 <_dtoa_r+0x60e>
 80080b0:	2301      	movs	r3, #1
 80080b2:	9309      	str	r3, [sp, #36]	; 0x24
 80080b4:	e7f3      	b.n	800809e <_dtoa_r+0x806>
 80080b6:	9408      	str	r4, [sp, #32]
 80080b8:	9a02      	ldr	r2, [sp, #8]
 80080ba:	9908      	ldr	r1, [sp, #32]
 80080bc:	4648      	mov	r0, r9
 80080be:	f001 fc9f 	bl	8009a00 <__pow5mult>
 80080c2:	4604      	mov	r4, r0
 80080c4:	e60e      	b.n	8007ce4 <_dtoa_r+0x44c>
 80080c6:	9b06      	ldr	r3, [sp, #24]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f73f acfe 	bgt.w	8007aca <_dtoa_r+0x232>
 80080ce:	f040 814f 	bne.w	8008370 <_dtoa_r+0xad8>
 80080d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080d6:	2200      	movs	r2, #0
 80080d8:	4b1b      	ldr	r3, [pc, #108]	; (8008148 <_dtoa_r+0x8b0>)
 80080da:	f7fb fde9 	bl	8003cb0 <__aeabi_dmul>
 80080de:	465b      	mov	r3, fp
 80080e0:	4652      	mov	r2, sl
 80080e2:	f7fc f86b 	bl	80041bc <__aeabi_dcmpge>
 80080e6:	9b06      	ldr	r3, [sp, #24]
 80080e8:	9302      	str	r3, [sp, #8]
 80080ea:	461e      	mov	r6, r3
 80080ec:	2800      	cmp	r0, #0
 80080ee:	f000 80ea 	beq.w	80082c6 <_dtoa_r+0xa2e>
 80080f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080f4:	9d07      	ldr	r5, [sp, #28]
 80080f6:	43db      	mvns	r3, r3
 80080f8:	9304      	str	r3, [sp, #16]
 80080fa:	9902      	ldr	r1, [sp, #8]
 80080fc:	4648      	mov	r0, r9
 80080fe:	f001 fb45 	bl	800978c <_Bfree>
 8008102:	2e00      	cmp	r6, #0
 8008104:	f43f ad8f 	beq.w	8007c26 <_dtoa_r+0x38e>
 8008108:	e689      	b.n	8007e1e <_dtoa_r+0x586>
 800810a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800810c:	2a00      	cmp	r2, #0
 800810e:	f000 8238 	beq.w	8008582 <_dtoa_r+0xcea>
 8008112:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008116:	9f02      	ldr	r7, [sp, #8]
 8008118:	9d05      	ldr	r5, [sp, #20]
 800811a:	e5ac      	b.n	8007c76 <_dtoa_r+0x3de>
 800811c:	201c      	movs	r0, #28
 800811e:	e60a      	b.n	8007d36 <_dtoa_r+0x49e>
 8008120:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008122:	2b01      	cmp	r3, #1
 8008124:	f340 8280 	ble.w	8008628 <_dtoa_r+0xd90>
 8008128:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800812a:	2001      	movs	r0, #1
 800812c:	e5f7      	b.n	8007d1e <_dtoa_r+0x486>
 800812e:	bf00      	nop
 8008130:	0800adf0 	.word	0x0800adf0
 8008134:	0800aeb8 	.word	0x0800aeb8
 8008138:	3ff00000 	.word	0x3ff00000
 800813c:	401c0000 	.word	0x401c0000
 8008140:	3fe00000 	.word	0x3fe00000
 8008144:	40240000 	.word	0x40240000
 8008148:	40140000 	.word	0x40140000
 800814c:	4631      	mov	r1, r6
 800814e:	2300      	movs	r3, #0
 8008150:	220a      	movs	r2, #10
 8008152:	4648      	mov	r0, r9
 8008154:	f001 fb24 	bl	80097a0 <__multadd>
 8008158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800815a:	2b00      	cmp	r3, #0
 800815c:	4606      	mov	r6, r0
 800815e:	f340 828d 	ble.w	800867c <_dtoa_r+0xde4>
 8008162:	9306      	str	r3, [sp, #24]
 8008164:	2d00      	cmp	r5, #0
 8008166:	dd05      	ble.n	8008174 <_dtoa_r+0x8dc>
 8008168:	4631      	mov	r1, r6
 800816a:	462a      	mov	r2, r5
 800816c:	4648      	mov	r0, r9
 800816e:	f001 fc97 	bl	8009aa0 <__lshift>
 8008172:	4606      	mov	r6, r0
 8008174:	2f00      	cmp	r7, #0
 8008176:	f040 817c 	bne.w	8008472 <_dtoa_r+0xbda>
 800817a:	46b0      	mov	r8, r6
 800817c:	9b06      	ldr	r3, [sp, #24]
 800817e:	9a07      	ldr	r2, [sp, #28]
 8008180:	3b01      	subs	r3, #1
 8008182:	18d3      	adds	r3, r2, r3
 8008184:	9308      	str	r3, [sp, #32]
 8008186:	f00a 0301 	and.w	r3, sl, #1
 800818a:	9309      	str	r3, [sp, #36]	; 0x24
 800818c:	4617      	mov	r7, r2
 800818e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008192:	4620      	mov	r0, r4
 8008194:	4659      	mov	r1, fp
 8008196:	f7ff faeb 	bl	8007770 <quorem>
 800819a:	4631      	mov	r1, r6
 800819c:	4605      	mov	r5, r0
 800819e:	4620      	mov	r0, r4
 80081a0:	f001 fcd6 	bl	8009b50 <__mcmp>
 80081a4:	4642      	mov	r2, r8
 80081a6:	4659      	mov	r1, fp
 80081a8:	4682      	mov	sl, r0
 80081aa:	4648      	mov	r0, r9
 80081ac:	f001 fcf2 	bl	8009b94 <__mdiff>
 80081b0:	68c2      	ldr	r2, [r0, #12]
 80081b2:	4683      	mov	fp, r0
 80081b4:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80081b8:	2a00      	cmp	r2, #0
 80081ba:	d149      	bne.n	8008250 <_dtoa_r+0x9b8>
 80081bc:	4601      	mov	r1, r0
 80081be:	4620      	mov	r0, r4
 80081c0:	9306      	str	r3, [sp, #24]
 80081c2:	f001 fcc5 	bl	8009b50 <__mcmp>
 80081c6:	4659      	mov	r1, fp
 80081c8:	9005      	str	r0, [sp, #20]
 80081ca:	4648      	mov	r0, r9
 80081cc:	f001 fade 	bl	800978c <_Bfree>
 80081d0:	9a05      	ldr	r2, [sp, #20]
 80081d2:	9b06      	ldr	r3, [sp, #24]
 80081d4:	b92a      	cbnz	r2, 80081e2 <_dtoa_r+0x94a>
 80081d6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80081d8:	b919      	cbnz	r1, 80081e2 <_dtoa_r+0x94a>
 80081da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081dc:	2900      	cmp	r1, #0
 80081de:	f000 8235 	beq.w	800864c <_dtoa_r+0xdb4>
 80081e2:	f1ba 0f00 	cmp.w	sl, #0
 80081e6:	f2c0 80e3 	blt.w	80083b0 <_dtoa_r+0xb18>
 80081ea:	d105      	bne.n	80081f8 <_dtoa_r+0x960>
 80081ec:	9922      	ldr	r1, [sp, #136]	; 0x88
 80081ee:	b919      	cbnz	r1, 80081f8 <_dtoa_r+0x960>
 80081f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081f2:	2900      	cmp	r1, #0
 80081f4:	f000 80dc 	beq.w	80083b0 <_dtoa_r+0xb18>
 80081f8:	2a00      	cmp	r2, #0
 80081fa:	f300 814e 	bgt.w	800849a <_dtoa_r+0xc02>
 80081fe:	9a08      	ldr	r2, [sp, #32]
 8008200:	703b      	strb	r3, [r7, #0]
 8008202:	f107 0a01 	add.w	sl, r7, #1
 8008206:	4297      	cmp	r7, r2
 8008208:	4655      	mov	r5, sl
 800820a:	f000 8152 	beq.w	80084b2 <_dtoa_r+0xc1a>
 800820e:	4621      	mov	r1, r4
 8008210:	2300      	movs	r3, #0
 8008212:	220a      	movs	r2, #10
 8008214:	4648      	mov	r0, r9
 8008216:	f001 fac3 	bl	80097a0 <__multadd>
 800821a:	4546      	cmp	r6, r8
 800821c:	4604      	mov	r4, r0
 800821e:	4631      	mov	r1, r6
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	f04f 020a 	mov.w	r2, #10
 8008228:	4648      	mov	r0, r9
 800822a:	d00b      	beq.n	8008244 <_dtoa_r+0x9ac>
 800822c:	f001 fab8 	bl	80097a0 <__multadd>
 8008230:	4641      	mov	r1, r8
 8008232:	4606      	mov	r6, r0
 8008234:	2300      	movs	r3, #0
 8008236:	220a      	movs	r2, #10
 8008238:	4648      	mov	r0, r9
 800823a:	f001 fab1 	bl	80097a0 <__multadd>
 800823e:	4657      	mov	r7, sl
 8008240:	4680      	mov	r8, r0
 8008242:	e7a4      	b.n	800818e <_dtoa_r+0x8f6>
 8008244:	f001 faac 	bl	80097a0 <__multadd>
 8008248:	4657      	mov	r7, sl
 800824a:	4606      	mov	r6, r0
 800824c:	4680      	mov	r8, r0
 800824e:	e79e      	b.n	800818e <_dtoa_r+0x8f6>
 8008250:	4601      	mov	r1, r0
 8008252:	4648      	mov	r0, r9
 8008254:	9305      	str	r3, [sp, #20]
 8008256:	f001 fa99 	bl	800978c <_Bfree>
 800825a:	2201      	movs	r2, #1
 800825c:	9b05      	ldr	r3, [sp, #20]
 800825e:	e7c0      	b.n	80081e2 <_dtoa_r+0x94a>
 8008260:	9902      	ldr	r1, [sp, #8]
 8008262:	4620      	mov	r0, r4
 8008264:	f001 fc74 	bl	8009b50 <__mcmp>
 8008268:	2800      	cmp	r0, #0
 800826a:	f6bf ad7f 	bge.w	8007d6c <_dtoa_r+0x4d4>
 800826e:	4621      	mov	r1, r4
 8008270:	9c04      	ldr	r4, [sp, #16]
 8008272:	2300      	movs	r3, #0
 8008274:	3c01      	subs	r4, #1
 8008276:	220a      	movs	r2, #10
 8008278:	4648      	mov	r0, r9
 800827a:	9404      	str	r4, [sp, #16]
 800827c:	f001 fa90 	bl	80097a0 <__multadd>
 8008280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008282:	4604      	mov	r4, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	f47f af61 	bne.w	800814c <_dtoa_r+0x8b4>
 800828a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800828c:	2b00      	cmp	r3, #0
 800828e:	f340 81ed 	ble.w	800866c <_dtoa_r+0xdd4>
 8008292:	9306      	str	r3, [sp, #24]
 8008294:	e572      	b.n	8007d7c <_dtoa_r+0x4e4>
 8008296:	9c08      	ldr	r4, [sp, #32]
 8008298:	e524      	b.n	8007ce4 <_dtoa_r+0x44c>
 800829a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800829c:	2b02      	cmp	r3, #2
 800829e:	f77f ad69 	ble.w	8007d74 <_dtoa_r+0x4dc>
 80082a2:	9b06      	ldr	r3, [sp, #24]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f040 819d 	bne.w	80085e4 <_dtoa_r+0xd4c>
 80082aa:	9902      	ldr	r1, [sp, #8]
 80082ac:	2205      	movs	r2, #5
 80082ae:	4648      	mov	r0, r9
 80082b0:	f001 fa76 	bl	80097a0 <__multadd>
 80082b4:	4601      	mov	r1, r0
 80082b6:	9002      	str	r0, [sp, #8]
 80082b8:	4620      	mov	r0, r4
 80082ba:	f001 fc49 	bl	8009b50 <__mcmp>
 80082be:	2800      	cmp	r0, #0
 80082c0:	9408      	str	r4, [sp, #32]
 80082c2:	f77f af16 	ble.w	80080f2 <_dtoa_r+0x85a>
 80082c6:	9a04      	ldr	r2, [sp, #16]
 80082c8:	9907      	ldr	r1, [sp, #28]
 80082ca:	2331      	movs	r3, #49	; 0x31
 80082cc:	3201      	adds	r2, #1
 80082ce:	9204      	str	r2, [sp, #16]
 80082d0:	700b      	strb	r3, [r1, #0]
 80082d2:	1c4d      	adds	r5, r1, #1
 80082d4:	e711      	b.n	80080fa <_dtoa_r+0x862>
 80082d6:	9a04      	ldr	r2, [sp, #16]
 80082d8:	3201      	adds	r2, #1
 80082da:	9204      	str	r2, [sp, #16]
 80082dc:	9a07      	ldr	r2, [sp, #28]
 80082de:	2331      	movs	r3, #49	; 0x31
 80082e0:	7013      	strb	r3, [r2, #0]
 80082e2:	e58c      	b.n	8007dfe <_dtoa_r+0x566>
 80082e4:	2301      	movs	r3, #1
 80082e6:	9309      	str	r3, [sp, #36]	; 0x24
 80082e8:	e5d2      	b.n	8007e90 <_dtoa_r+0x5f8>
 80082ea:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80082ee:	e49a      	b.n	8007c26 <_dtoa_r+0x38e>
 80082f0:	f1ba 0f00 	cmp.w	sl, #0
 80082f4:	f47f ad09 	bne.w	8007d0a <_dtoa_r+0x472>
 80082f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f040 813e 	bne.w	800857e <_dtoa_r+0xce6>
 8008302:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8008306:	0d3f      	lsrs	r7, r7, #20
 8008308:	053f      	lsls	r7, r7, #20
 800830a:	b12f      	cbz	r7, 8008318 <_dtoa_r+0xa80>
 800830c:	9b05      	ldr	r3, [sp, #20]
 800830e:	3301      	adds	r3, #1
 8008310:	9305      	str	r3, [sp, #20]
 8008312:	f108 0801 	add.w	r8, r8, #1
 8008316:	2701      	movs	r7, #1
 8008318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800831a:	2001      	movs	r0, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	f43f acfe 	beq.w	8007d1e <_dtoa_r+0x486>
 8008322:	e4f3      	b.n	8007d0c <_dtoa_r+0x474>
 8008324:	4650      	mov	r0, sl
 8008326:	f7fb fc5d 	bl	8003be4 <__aeabi_i2d>
 800832a:	4632      	mov	r2, r6
 800832c:	463b      	mov	r3, r7
 800832e:	f7fb fcbf 	bl	8003cb0 <__aeabi_dmul>
 8008332:	2200      	movs	r2, #0
 8008334:	4bbf      	ldr	r3, [pc, #764]	; (8008634 <_dtoa_r+0xd9c>)
 8008336:	f7fb fb09 	bl	800394c <__adddf3>
 800833a:	4604      	mov	r4, r0
 800833c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008340:	4630      	mov	r0, r6
 8008342:	4639      	mov	r1, r7
 8008344:	2200      	movs	r2, #0
 8008346:	4bbc      	ldr	r3, [pc, #752]	; (8008638 <_dtoa_r+0xda0>)
 8008348:	f7fb fafe 	bl	8003948 <__aeabi_dsub>
 800834c:	4622      	mov	r2, r4
 800834e:	462b      	mov	r3, r5
 8008350:	4606      	mov	r6, r0
 8008352:	460f      	mov	r7, r1
 8008354:	f7fb ff3c 	bl	80041d0 <__aeabi_dcmpgt>
 8008358:	2800      	cmp	r0, #0
 800835a:	f040 80ae 	bne.w	80084ba <_dtoa_r+0xc22>
 800835e:	4622      	mov	r2, r4
 8008360:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008364:	4630      	mov	r0, r6
 8008366:	4639      	mov	r1, r7
 8008368:	f7fb ff14 	bl	8004194 <__aeabi_dcmplt>
 800836c:	2800      	cmp	r0, #0
 800836e:	d04a      	beq.n	8008406 <_dtoa_r+0xb6e>
 8008370:	2300      	movs	r3, #0
 8008372:	9302      	str	r3, [sp, #8]
 8008374:	461e      	mov	r6, r3
 8008376:	e6bc      	b.n	80080f2 <_dtoa_r+0x85a>
 8008378:	9807      	ldr	r0, [sp, #28]
 800837a:	f7ff babe 	b.w	80078fa <_dtoa_r+0x62>
 800837e:	9b02      	ldr	r3, [sp, #8]
 8008380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008382:	9702      	str	r7, [sp, #8]
 8008384:	1afb      	subs	r3, r7, r3
 8008386:	441a      	add	r2, r3
 8008388:	920a      	str	r2, [sp, #40]	; 0x28
 800838a:	2700      	movs	r7, #0
 800838c:	e46d      	b.n	8007c6a <_dtoa_r+0x3d2>
 800838e:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8008392:	f04f 0a02 	mov.w	sl, #2
 8008396:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800839a:	e5bf      	b.n	8007f1c <_dtoa_r+0x684>
 800839c:	461c      	mov	r4, r3
 800839e:	2100      	movs	r1, #0
 80083a0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80083a4:	e590      	b.n	8007ec8 <_dtoa_r+0x630>
 80083a6:	2401      	movs	r4, #1
 80083a8:	9423      	str	r4, [sp, #140]	; 0x8c
 80083aa:	940c      	str	r4, [sp, #48]	; 0x30
 80083ac:	9406      	str	r4, [sp, #24]
 80083ae:	e7f6      	b.n	800839e <_dtoa_r+0xb06>
 80083b0:	2a00      	cmp	r2, #0
 80083b2:	469a      	mov	sl, r3
 80083b4:	dd11      	ble.n	80083da <_dtoa_r+0xb42>
 80083b6:	4621      	mov	r1, r4
 80083b8:	2201      	movs	r2, #1
 80083ba:	4648      	mov	r0, r9
 80083bc:	f001 fb70 	bl	8009aa0 <__lshift>
 80083c0:	9902      	ldr	r1, [sp, #8]
 80083c2:	4604      	mov	r4, r0
 80083c4:	f001 fbc4 	bl	8009b50 <__mcmp>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	f340 8148 	ble.w	800865e <_dtoa_r+0xdc6>
 80083ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083d2:	f000 8109 	beq.w	80085e8 <_dtoa_r+0xd50>
 80083d6:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 80083da:	46b3      	mov	fp, r6
 80083dc:	f887 a000 	strb.w	sl, [r7]
 80083e0:	1c7d      	adds	r5, r7, #1
 80083e2:	4646      	mov	r6, r8
 80083e4:	9408      	str	r4, [sp, #32]
 80083e6:	e50a      	b.n	8007dfe <_dtoa_r+0x566>
 80083e8:	d104      	bne.n	80083f4 <_dtoa_r+0xb5c>
 80083ea:	f01a 0f01 	tst.w	sl, #1
 80083ee:	d001      	beq.n	80083f4 <_dtoa_r+0xb5c>
 80083f0:	e4f5      	b.n	8007dde <_dtoa_r+0x546>
 80083f2:	4615      	mov	r5, r2
 80083f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80083f8:	2b30      	cmp	r3, #48	; 0x30
 80083fa:	f105 32ff 	add.w	r2, r5, #4294967295
 80083fe:	d0f8      	beq.n	80083f2 <_dtoa_r+0xb5a>
 8008400:	e4fd      	b.n	8007dfe <_dtoa_r+0x566>
 8008402:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008406:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 800840a:	f7ff bb4b 	b.w	8007aa4 <_dtoa_r+0x20c>
 800840e:	9907      	ldr	r1, [sp, #28]
 8008410:	2230      	movs	r2, #48	; 0x30
 8008412:	700a      	strb	r2, [r1, #0]
 8008414:	9a04      	ldr	r2, [sp, #16]
 8008416:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800841a:	3201      	adds	r2, #1
 800841c:	9204      	str	r2, [sp, #16]
 800841e:	e400      	b.n	8007c22 <_dtoa_r+0x38a>
 8008420:	9b04      	ldr	r3, [sp, #16]
 8008422:	425c      	negs	r4, r3
 8008424:	2c00      	cmp	r4, #0
 8008426:	f000 80b3 	beq.w	8008590 <_dtoa_r+0xcf8>
 800842a:	4b84      	ldr	r3, [pc, #528]	; (800863c <_dtoa_r+0xda4>)
 800842c:	f004 020f 	and.w	r2, r4, #15
 8008430:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800843c:	f7fb fc38 	bl	8003cb0 <__aeabi_dmul>
 8008440:	1124      	asrs	r4, r4, #4
 8008442:	4606      	mov	r6, r0
 8008444:	460f      	mov	r7, r1
 8008446:	f000 8116 	beq.w	8008676 <_dtoa_r+0xdde>
 800844a:	4d7d      	ldr	r5, [pc, #500]	; (8008640 <_dtoa_r+0xda8>)
 800844c:	f04f 0a02 	mov.w	sl, #2
 8008450:	07e2      	lsls	r2, r4, #31
 8008452:	d509      	bpl.n	8008468 <_dtoa_r+0xbd0>
 8008454:	4630      	mov	r0, r6
 8008456:	4639      	mov	r1, r7
 8008458:	e9d5 2300 	ldrd	r2, r3, [r5]
 800845c:	f7fb fc28 	bl	8003cb0 <__aeabi_dmul>
 8008460:	f10a 0a01 	add.w	sl, sl, #1
 8008464:	4606      	mov	r6, r0
 8008466:	460f      	mov	r7, r1
 8008468:	1064      	asrs	r4, r4, #1
 800846a:	f105 0508 	add.w	r5, r5, #8
 800846e:	d1ef      	bne.n	8008450 <_dtoa_r+0xbb8>
 8008470:	e56e      	b.n	8007f50 <_dtoa_r+0x6b8>
 8008472:	6871      	ldr	r1, [r6, #4]
 8008474:	4648      	mov	r0, r9
 8008476:	f001 f963 	bl	8009740 <_Balloc>
 800847a:	6933      	ldr	r3, [r6, #16]
 800847c:	1c9a      	adds	r2, r3, #2
 800847e:	4605      	mov	r5, r0
 8008480:	0092      	lsls	r2, r2, #2
 8008482:	f106 010c 	add.w	r1, r6, #12
 8008486:	300c      	adds	r0, #12
 8008488:	f7fb ff38 	bl	80042fc <memcpy>
 800848c:	4629      	mov	r1, r5
 800848e:	2201      	movs	r2, #1
 8008490:	4648      	mov	r0, r9
 8008492:	f001 fb05 	bl	8009aa0 <__lshift>
 8008496:	4680      	mov	r8, r0
 8008498:	e670      	b.n	800817c <_dtoa_r+0x8e4>
 800849a:	2b39      	cmp	r3, #57	; 0x39
 800849c:	f000 80a4 	beq.w	80085e8 <_dtoa_r+0xd50>
 80084a0:	f103 0a01 	add.w	sl, r3, #1
 80084a4:	46b3      	mov	fp, r6
 80084a6:	f887 a000 	strb.w	sl, [r7]
 80084aa:	1c7d      	adds	r5, r7, #1
 80084ac:	4646      	mov	r6, r8
 80084ae:	9408      	str	r4, [sp, #32]
 80084b0:	e4a5      	b.n	8007dfe <_dtoa_r+0x566>
 80084b2:	46b3      	mov	fp, r6
 80084b4:	469a      	mov	sl, r3
 80084b6:	4646      	mov	r6, r8
 80084b8:	e485      	b.n	8007dc6 <_dtoa_r+0x52e>
 80084ba:	2300      	movs	r3, #0
 80084bc:	9302      	str	r3, [sp, #8]
 80084be:	461e      	mov	r6, r3
 80084c0:	e701      	b.n	80082c6 <_dtoa_r+0xa2e>
 80084c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084c4:	495d      	ldr	r1, [pc, #372]	; (800863c <_dtoa_r+0xda4>)
 80084c6:	1e5a      	subs	r2, r3, #1
 80084c8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80084cc:	462b      	mov	r3, r5
 80084ce:	9215      	str	r2, [sp, #84]	; 0x54
 80084d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084d4:	4622      	mov	r2, r4
 80084d6:	f7fb fbeb 	bl	8003cb0 <__aeabi_dmul>
 80084da:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80084de:	4639      	mov	r1, r7
 80084e0:	4630      	mov	r0, r6
 80084e2:	f7fb fe95 	bl	8004210 <__aeabi_d2iz>
 80084e6:	4604      	mov	r4, r0
 80084e8:	f7fb fb7c 	bl	8003be4 <__aeabi_i2d>
 80084ec:	460b      	mov	r3, r1
 80084ee:	4602      	mov	r2, r0
 80084f0:	4639      	mov	r1, r7
 80084f2:	4630      	mov	r0, r6
 80084f4:	f7fb fa28 	bl	8003948 <__aeabi_dsub>
 80084f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084fa:	460f      	mov	r7, r1
 80084fc:	9907      	ldr	r1, [sp, #28]
 80084fe:	3430      	adds	r4, #48	; 0x30
 8008500:	2b01      	cmp	r3, #1
 8008502:	4606      	mov	r6, r0
 8008504:	700c      	strb	r4, [r1, #0]
 8008506:	f101 0501 	add.w	r5, r1, #1
 800850a:	d020      	beq.n	800854e <_dtoa_r+0xcb6>
 800850c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800850e:	9a07      	ldr	r2, [sp, #28]
 8008510:	4413      	add	r3, r2
 8008512:	469a      	mov	sl, r3
 8008514:	46ab      	mov	fp, r5
 8008516:	2200      	movs	r2, #0
 8008518:	4b4a      	ldr	r3, [pc, #296]	; (8008644 <_dtoa_r+0xdac>)
 800851a:	4630      	mov	r0, r6
 800851c:	4639      	mov	r1, r7
 800851e:	f7fb fbc7 	bl	8003cb0 <__aeabi_dmul>
 8008522:	460f      	mov	r7, r1
 8008524:	4606      	mov	r6, r0
 8008526:	f7fb fe73 	bl	8004210 <__aeabi_d2iz>
 800852a:	4604      	mov	r4, r0
 800852c:	f7fb fb5a 	bl	8003be4 <__aeabi_i2d>
 8008530:	3430      	adds	r4, #48	; 0x30
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
 8008536:	4630      	mov	r0, r6
 8008538:	4639      	mov	r1, r7
 800853a:	f7fb fa05 	bl	8003948 <__aeabi_dsub>
 800853e:	f80b 4b01 	strb.w	r4, [fp], #1
 8008542:	45da      	cmp	sl, fp
 8008544:	4606      	mov	r6, r0
 8008546:	460f      	mov	r7, r1
 8008548:	d1e5      	bne.n	8008516 <_dtoa_r+0xc7e>
 800854a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800854c:	441d      	add	r5, r3
 800854e:	2200      	movs	r2, #0
 8008550:	4b3d      	ldr	r3, [pc, #244]	; (8008648 <_dtoa_r+0xdb0>)
 8008552:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008556:	f7fb f9f9 	bl	800394c <__adddf3>
 800855a:	4632      	mov	r2, r6
 800855c:	463b      	mov	r3, r7
 800855e:	f7fb fe19 	bl	8004194 <__aeabi_dcmplt>
 8008562:	2800      	cmp	r0, #0
 8008564:	d048      	beq.n	80085f8 <_dtoa_r+0xd60>
 8008566:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008568:	9304      	str	r3, [sp, #16]
 800856a:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800856e:	f7ff bb4c 	b.w	8007c0a <_dtoa_r+0x372>
 8008572:	9b05      	ldr	r3, [sp, #20]
 8008574:	9a06      	ldr	r2, [sp, #24]
 8008576:	1a9d      	subs	r5, r3, r2
 8008578:	2300      	movs	r3, #0
 800857a:	f7ff bb7c 	b.w	8007c76 <_dtoa_r+0x3de>
 800857e:	2700      	movs	r7, #0
 8008580:	e6ca      	b.n	8008318 <_dtoa_r+0xa80>
 8008582:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008584:	9f02      	ldr	r7, [sp, #8]
 8008586:	9d05      	ldr	r5, [sp, #20]
 8008588:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800858c:	f7ff bb73 	b.w	8007c76 <_dtoa_r+0x3de>
 8008590:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8008594:	f04f 0a02 	mov.w	sl, #2
 8008598:	e4da      	b.n	8007f50 <_dtoa_r+0x6b8>
 800859a:	9b06      	ldr	r3, [sp, #24]
 800859c:	2b00      	cmp	r3, #0
 800859e:	f43f aec1 	beq.w	8008324 <_dtoa_r+0xa8c>
 80085a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f77f af2e 	ble.w	8008406 <_dtoa_r+0xb6e>
 80085aa:	2200      	movs	r2, #0
 80085ac:	4b25      	ldr	r3, [pc, #148]	; (8008644 <_dtoa_r+0xdac>)
 80085ae:	4630      	mov	r0, r6
 80085b0:	4639      	mov	r1, r7
 80085b2:	f7fb fb7d 	bl	8003cb0 <__aeabi_dmul>
 80085b6:	4606      	mov	r6, r0
 80085b8:	460f      	mov	r7, r1
 80085ba:	f10a 0001 	add.w	r0, sl, #1
 80085be:	f7fb fb11 	bl	8003be4 <__aeabi_i2d>
 80085c2:	4632      	mov	r2, r6
 80085c4:	463b      	mov	r3, r7
 80085c6:	f7fb fb73 	bl	8003cb0 <__aeabi_dmul>
 80085ca:	2200      	movs	r2, #0
 80085cc:	4b19      	ldr	r3, [pc, #100]	; (8008634 <_dtoa_r+0xd9c>)
 80085ce:	f7fb f9bd 	bl	800394c <__adddf3>
 80085d2:	9a04      	ldr	r2, [sp, #16]
 80085d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085d6:	9310      	str	r3, [sp, #64]	; 0x40
 80085d8:	3a01      	subs	r2, #1
 80085da:	4604      	mov	r4, r0
 80085dc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80085e0:	9214      	str	r2, [sp, #80]	; 0x50
 80085e2:	e4d6      	b.n	8007f92 <_dtoa_r+0x6fa>
 80085e4:	9408      	str	r4, [sp, #32]
 80085e6:	e584      	b.n	80080f2 <_dtoa_r+0x85a>
 80085e8:	2239      	movs	r2, #57	; 0x39
 80085ea:	46b3      	mov	fp, r6
 80085ec:	9408      	str	r4, [sp, #32]
 80085ee:	4646      	mov	r6, r8
 80085f0:	703a      	strb	r2, [r7, #0]
 80085f2:	1c7d      	adds	r5, r7, #1
 80085f4:	f7ff bbf5 	b.w	8007de2 <_dtoa_r+0x54a>
 80085f8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80085fc:	2000      	movs	r0, #0
 80085fe:	4912      	ldr	r1, [pc, #72]	; (8008648 <_dtoa_r+0xdb0>)
 8008600:	f7fb f9a2 	bl	8003948 <__aeabi_dsub>
 8008604:	4632      	mov	r2, r6
 8008606:	463b      	mov	r3, r7
 8008608:	f7fb fde2 	bl	80041d0 <__aeabi_dcmpgt>
 800860c:	b908      	cbnz	r0, 8008612 <_dtoa_r+0xd7a>
 800860e:	e6fa      	b.n	8008406 <_dtoa_r+0xb6e>
 8008610:	4615      	mov	r5, r2
 8008612:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008616:	2b30      	cmp	r3, #48	; 0x30
 8008618:	f105 32ff 	add.w	r2, r5, #4294967295
 800861c:	d0f8      	beq.n	8008610 <_dtoa_r+0xd78>
 800861e:	e539      	b.n	8008094 <_dtoa_r+0x7fc>
 8008620:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008622:	9304      	str	r3, [sp, #16]
 8008624:	f7ff baf1 	b.w	8007c0a <_dtoa_r+0x372>
 8008628:	f1ba 0f00 	cmp.w	sl, #0
 800862c:	f47f ad7c 	bne.w	8008128 <_dtoa_r+0x890>
 8008630:	e662      	b.n	80082f8 <_dtoa_r+0xa60>
 8008632:	bf00      	nop
 8008634:	401c0000 	.word	0x401c0000
 8008638:	40140000 	.word	0x40140000
 800863c:	0800adf0 	.word	0x0800adf0
 8008640:	0800aeb8 	.word	0x0800aeb8
 8008644:	40240000 	.word	0x40240000
 8008648:	3fe00000 	.word	0x3fe00000
 800864c:	2b39      	cmp	r3, #57	; 0x39
 800864e:	46d3      	mov	fp, sl
 8008650:	469a      	mov	sl, r3
 8008652:	d0c9      	beq.n	80085e8 <_dtoa_r+0xd50>
 8008654:	f1bb 0f00 	cmp.w	fp, #0
 8008658:	f73f aebd 	bgt.w	80083d6 <_dtoa_r+0xb3e>
 800865c:	e6bd      	b.n	80083da <_dtoa_r+0xb42>
 800865e:	f47f aebc 	bne.w	80083da <_dtoa_r+0xb42>
 8008662:	f01a 0f01 	tst.w	sl, #1
 8008666:	f43f aeb8 	beq.w	80083da <_dtoa_r+0xb42>
 800866a:	e6b0      	b.n	80083ce <_dtoa_r+0xb36>
 800866c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800866e:	2b02      	cmp	r3, #2
 8008670:	dc25      	bgt.n	80086be <_dtoa_r+0xe26>
 8008672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008674:	e60d      	b.n	8008292 <_dtoa_r+0x9fa>
 8008676:	f04f 0a02 	mov.w	sl, #2
 800867a:	e469      	b.n	8007f50 <_dtoa_r+0x6b8>
 800867c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800867e:	2b02      	cmp	r3, #2
 8008680:	dc1d      	bgt.n	80086be <_dtoa_r+0xe26>
 8008682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008684:	e56d      	b.n	8008162 <_dtoa_r+0x8ca>
 8008686:	2400      	movs	r4, #0
 8008688:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800868c:	4621      	mov	r1, r4
 800868e:	4648      	mov	r0, r9
 8008690:	f001 f856 	bl	8009740 <_Balloc>
 8008694:	f04f 33ff 	mov.w	r3, #4294967295
 8008698:	9306      	str	r3, [sp, #24]
 800869a:	930c      	str	r3, [sp, #48]	; 0x30
 800869c:	2301      	movs	r3, #1
 800869e:	9007      	str	r0, [sp, #28]
 80086a0:	9423      	str	r4, [sp, #140]	; 0x8c
 80086a2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 80086a6:	9309      	str	r3, [sp, #36]	; 0x24
 80086a8:	f7ff b9fc 	b.w	8007aa4 <_dtoa_r+0x20c>
 80086ac:	f43f ab48 	beq.w	8007d40 <_dtoa_r+0x4a8>
 80086b0:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80086b4:	f7ff bb3f 	b.w	8007d36 <_dtoa_r+0x49e>
 80086b8:	2501      	movs	r5, #1
 80086ba:	f7ff b9bd 	b.w	8007a38 <_dtoa_r+0x1a0>
 80086be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086c0:	9306      	str	r3, [sp, #24]
 80086c2:	e5ee      	b.n	80082a2 <_dtoa_r+0xa0a>

080086c4 <__sflush_r>:
 80086c4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ce:	460d      	mov	r5, r1
 80086d0:	0711      	lsls	r1, r2, #28
 80086d2:	4680      	mov	r8, r0
 80086d4:	d43c      	bmi.n	8008750 <__sflush_r+0x8c>
 80086d6:	686a      	ldr	r2, [r5, #4]
 80086d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80086dc:	2a00      	cmp	r2, #0
 80086de:	81ab      	strh	r3, [r5, #12]
 80086e0:	dd73      	ble.n	80087ca <__sflush_r+0x106>
 80086e2:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80086e4:	2c00      	cmp	r4, #0
 80086e6:	d04b      	beq.n	8008780 <__sflush_r+0xbc>
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80086ee:	2100      	movs	r1, #0
 80086f0:	b292      	uxth	r2, r2
 80086f2:	f8d8 6000 	ldr.w	r6, [r8]
 80086f6:	f8c8 1000 	str.w	r1, [r8]
 80086fa:	2a00      	cmp	r2, #0
 80086fc:	d069      	beq.n	80087d2 <__sflush_r+0x10e>
 80086fe:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8008700:	075f      	lsls	r7, r3, #29
 8008702:	d505      	bpl.n	8008710 <__sflush_r+0x4c>
 8008704:	6869      	ldr	r1, [r5, #4]
 8008706:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008708:	1a52      	subs	r2, r2, r1
 800870a:	b10b      	cbz	r3, 8008710 <__sflush_r+0x4c>
 800870c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800870e:	1ad2      	subs	r2, r2, r3
 8008710:	2300      	movs	r3, #0
 8008712:	69e9      	ldr	r1, [r5, #28]
 8008714:	4640      	mov	r0, r8
 8008716:	47a0      	blx	r4
 8008718:	1c44      	adds	r4, r0, #1
 800871a:	d03c      	beq.n	8008796 <__sflush_r+0xd2>
 800871c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8008720:	692a      	ldr	r2, [r5, #16]
 8008722:	602a      	str	r2, [r5, #0]
 8008724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008728:	2200      	movs	r2, #0
 800872a:	81ab      	strh	r3, [r5, #12]
 800872c:	04db      	lsls	r3, r3, #19
 800872e:	606a      	str	r2, [r5, #4]
 8008730:	d449      	bmi.n	80087c6 <__sflush_r+0x102>
 8008732:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8008734:	f8c8 6000 	str.w	r6, [r8]
 8008738:	b311      	cbz	r1, 8008780 <__sflush_r+0xbc>
 800873a:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800873e:	4299      	cmp	r1, r3
 8008740:	d002      	beq.n	8008748 <__sflush_r+0x84>
 8008742:	4640      	mov	r0, r8
 8008744:	f000 f94e 	bl	80089e4 <_free_r>
 8008748:	2000      	movs	r0, #0
 800874a:	6328      	str	r0, [r5, #48]	; 0x30
 800874c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008750:	692e      	ldr	r6, [r5, #16]
 8008752:	b1ae      	cbz	r6, 8008780 <__sflush_r+0xbc>
 8008754:	682c      	ldr	r4, [r5, #0]
 8008756:	602e      	str	r6, [r5, #0]
 8008758:	0790      	lsls	r0, r2, #30
 800875a:	bf0c      	ite	eq
 800875c:	696b      	ldreq	r3, [r5, #20]
 800875e:	2300      	movne	r3, #0
 8008760:	1ba4      	subs	r4, r4, r6
 8008762:	60ab      	str	r3, [r5, #8]
 8008764:	e00a      	b.n	800877c <__sflush_r+0xb8>
 8008766:	4623      	mov	r3, r4
 8008768:	4632      	mov	r2, r6
 800876a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800876c:	69e9      	ldr	r1, [r5, #28]
 800876e:	4640      	mov	r0, r8
 8008770:	47b8      	blx	r7
 8008772:	2800      	cmp	r0, #0
 8008774:	eba4 0400 	sub.w	r4, r4, r0
 8008778:	4406      	add	r6, r0
 800877a:	dd04      	ble.n	8008786 <__sflush_r+0xc2>
 800877c:	2c00      	cmp	r4, #0
 800877e:	dcf2      	bgt.n	8008766 <__sflush_r+0xa2>
 8008780:	2000      	movs	r0, #0
 8008782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008786:	89ab      	ldrh	r3, [r5, #12]
 8008788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800878c:	81ab      	strh	r3, [r5, #12]
 800878e:	f04f 30ff 	mov.w	r0, #4294967295
 8008792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008796:	f8d8 2000 	ldr.w	r2, [r8]
 800879a:	2a1d      	cmp	r2, #29
 800879c:	d8f3      	bhi.n	8008786 <__sflush_r+0xc2>
 800879e:	4b1a      	ldr	r3, [pc, #104]	; (8008808 <__sflush_r+0x144>)
 80087a0:	40d3      	lsrs	r3, r2
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	f083 0401 	eor.w	r4, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0eb      	beq.n	8008786 <__sflush_r+0xc2>
 80087ae:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80087b2:	6929      	ldr	r1, [r5, #16]
 80087b4:	6029      	str	r1, [r5, #0]
 80087b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087ba:	04d9      	lsls	r1, r3, #19
 80087bc:	606c      	str	r4, [r5, #4]
 80087be:	81ab      	strh	r3, [r5, #12]
 80087c0:	d5b7      	bpl.n	8008732 <__sflush_r+0x6e>
 80087c2:	2a00      	cmp	r2, #0
 80087c4:	d1b5      	bne.n	8008732 <__sflush_r+0x6e>
 80087c6:	6528      	str	r0, [r5, #80]	; 0x50
 80087c8:	e7b3      	b.n	8008732 <__sflush_r+0x6e>
 80087ca:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80087cc:	2a00      	cmp	r2, #0
 80087ce:	dc88      	bgt.n	80086e2 <__sflush_r+0x1e>
 80087d0:	e7d6      	b.n	8008780 <__sflush_r+0xbc>
 80087d2:	2301      	movs	r3, #1
 80087d4:	69e9      	ldr	r1, [r5, #28]
 80087d6:	4640      	mov	r0, r8
 80087d8:	47a0      	blx	r4
 80087da:	1c43      	adds	r3, r0, #1
 80087dc:	4602      	mov	r2, r0
 80087de:	d002      	beq.n	80087e6 <__sflush_r+0x122>
 80087e0:	89ab      	ldrh	r3, [r5, #12]
 80087e2:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80087e4:	e78c      	b.n	8008700 <__sflush_r+0x3c>
 80087e6:	f8d8 3000 	ldr.w	r3, [r8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d0f8      	beq.n	80087e0 <__sflush_r+0x11c>
 80087ee:	2b1d      	cmp	r3, #29
 80087f0:	d001      	beq.n	80087f6 <__sflush_r+0x132>
 80087f2:	2b16      	cmp	r3, #22
 80087f4:	d102      	bne.n	80087fc <__sflush_r+0x138>
 80087f6:	f8c8 6000 	str.w	r6, [r8]
 80087fa:	e7c1      	b.n	8008780 <__sflush_r+0xbc>
 80087fc:	89ab      	ldrh	r3, [r5, #12]
 80087fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008802:	81ab      	strh	r3, [r5, #12]
 8008804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008808:	20400001 	.word	0x20400001

0800880c <_fflush_r>:
 800880c:	b510      	push	{r4, lr}
 800880e:	4604      	mov	r4, r0
 8008810:	b082      	sub	sp, #8
 8008812:	b108      	cbz	r0, 8008818 <_fflush_r+0xc>
 8008814:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008816:	b153      	cbz	r3, 800882e <_fflush_r+0x22>
 8008818:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800881c:	b908      	cbnz	r0, 8008822 <_fflush_r+0x16>
 800881e:	b002      	add	sp, #8
 8008820:	bd10      	pop	{r4, pc}
 8008822:	4620      	mov	r0, r4
 8008824:	b002      	add	sp, #8
 8008826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800882a:	f7ff bf4b 	b.w	80086c4 <__sflush_r>
 800882e:	9101      	str	r1, [sp, #4]
 8008830:	f000 f880 	bl	8008934 <__sinit>
 8008834:	9901      	ldr	r1, [sp, #4]
 8008836:	e7ef      	b.n	8008818 <_fflush_r+0xc>

08008838 <_cleanup_r>:
 8008838:	4901      	ldr	r1, [pc, #4]	; (8008840 <_cleanup_r+0x8>)
 800883a:	f000 bb3d 	b.w	8008eb8 <_fwalk_reent>
 800883e:	bf00      	nop
 8008840:	0800a445 	.word	0x0800a445

08008844 <__sinit.part.1>:
 8008844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008848:	4b35      	ldr	r3, [pc, #212]	; (8008920 <__sinit.part.1+0xdc>)
 800884a:	6845      	ldr	r5, [r0, #4]
 800884c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800884e:	2400      	movs	r4, #0
 8008850:	4607      	mov	r7, r0
 8008852:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8008856:	2304      	movs	r3, #4
 8008858:	2103      	movs	r1, #3
 800885a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 800885e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8008862:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8008866:	b083      	sub	sp, #12
 8008868:	602c      	str	r4, [r5, #0]
 800886a:	606c      	str	r4, [r5, #4]
 800886c:	60ac      	str	r4, [r5, #8]
 800886e:	666c      	str	r4, [r5, #100]	; 0x64
 8008870:	81ec      	strh	r4, [r5, #14]
 8008872:	612c      	str	r4, [r5, #16]
 8008874:	616c      	str	r4, [r5, #20]
 8008876:	61ac      	str	r4, [r5, #24]
 8008878:	81ab      	strh	r3, [r5, #12]
 800887a:	4621      	mov	r1, r4
 800887c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8008880:	2208      	movs	r2, #8
 8008882:	f7fb fdd5 	bl	8004430 <memset>
 8008886:	68be      	ldr	r6, [r7, #8]
 8008888:	f8df b098 	ldr.w	fp, [pc, #152]	; 8008924 <__sinit.part.1+0xe0>
 800888c:	f8df a098 	ldr.w	sl, [pc, #152]	; 8008928 <__sinit.part.1+0xe4>
 8008890:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800892c <__sinit.part.1+0xe8>
 8008894:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008930 <__sinit.part.1+0xec>
 8008898:	f8c5 b020 	str.w	fp, [r5, #32]
 800889c:	2301      	movs	r3, #1
 800889e:	2209      	movs	r2, #9
 80088a0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80088a4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80088a8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80088ac:	61ed      	str	r5, [r5, #28]
 80088ae:	4621      	mov	r1, r4
 80088b0:	81f3      	strh	r3, [r6, #14]
 80088b2:	81b2      	strh	r2, [r6, #12]
 80088b4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80088b8:	6034      	str	r4, [r6, #0]
 80088ba:	6074      	str	r4, [r6, #4]
 80088bc:	60b4      	str	r4, [r6, #8]
 80088be:	6674      	str	r4, [r6, #100]	; 0x64
 80088c0:	6134      	str	r4, [r6, #16]
 80088c2:	6174      	str	r4, [r6, #20]
 80088c4:	61b4      	str	r4, [r6, #24]
 80088c6:	2208      	movs	r2, #8
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	f7fb fdb1 	bl	8004430 <memset>
 80088ce:	68fd      	ldr	r5, [r7, #12]
 80088d0:	61f6      	str	r6, [r6, #28]
 80088d2:	2012      	movs	r0, #18
 80088d4:	2202      	movs	r2, #2
 80088d6:	f8c6 b020 	str.w	fp, [r6, #32]
 80088da:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 80088de:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 80088e2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 80088e6:	4621      	mov	r1, r4
 80088e8:	81a8      	strh	r0, [r5, #12]
 80088ea:	81ea      	strh	r2, [r5, #14]
 80088ec:	602c      	str	r4, [r5, #0]
 80088ee:	606c      	str	r4, [r5, #4]
 80088f0:	60ac      	str	r4, [r5, #8]
 80088f2:	666c      	str	r4, [r5, #100]	; 0x64
 80088f4:	612c      	str	r4, [r5, #16]
 80088f6:	616c      	str	r4, [r5, #20]
 80088f8:	61ac      	str	r4, [r5, #24]
 80088fa:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80088fe:	2208      	movs	r2, #8
 8008900:	f7fb fd96 	bl	8004430 <memset>
 8008904:	9b01      	ldr	r3, [sp, #4]
 8008906:	61ed      	str	r5, [r5, #28]
 8008908:	f8c5 b020 	str.w	fp, [r5, #32]
 800890c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8008910:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8008914:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8008918:	63bb      	str	r3, [r7, #56]	; 0x38
 800891a:	b003      	add	sp, #12
 800891c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008920:	08008839 	.word	0x08008839
 8008924:	0800a165 	.word	0x0800a165
 8008928:	0800a189 	.word	0x0800a189
 800892c:	0800a1c5 	.word	0x0800a1c5
 8008930:	0800a1e5 	.word	0x0800a1e5

08008934 <__sinit>:
 8008934:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008936:	b103      	cbz	r3, 800893a <__sinit+0x6>
 8008938:	4770      	bx	lr
 800893a:	f7ff bf83 	b.w	8008844 <__sinit.part.1>
 800893e:	bf00      	nop

08008940 <__sfp_lock_acquire>:
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop

08008944 <__sfp_lock_release>:
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop

08008948 <_malloc_trim_r>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	4f23      	ldr	r7, [pc, #140]	; (80089d8 <_malloc_trim_r+0x90>)
 800894c:	460c      	mov	r4, r1
 800894e:	4606      	mov	r6, r0
 8008950:	f000 fef2 	bl	8009738 <__malloc_lock>
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	685d      	ldr	r5, [r3, #4]
 8008958:	f025 0503 	bic.w	r5, r5, #3
 800895c:	1b29      	subs	r1, r5, r4
 800895e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8008962:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8008966:	f021 010f 	bic.w	r1, r1, #15
 800896a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800896e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8008972:	db07      	blt.n	8008984 <_malloc_trim_r+0x3c>
 8008974:	2100      	movs	r1, #0
 8008976:	4630      	mov	r0, r6
 8008978:	f001 fbe2 	bl	800a140 <_sbrk_r>
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	442b      	add	r3, r5
 8008980:	4298      	cmp	r0, r3
 8008982:	d004      	beq.n	800898e <_malloc_trim_r+0x46>
 8008984:	4630      	mov	r0, r6
 8008986:	f000 fed9 	bl	800973c <__malloc_unlock>
 800898a:	2000      	movs	r0, #0
 800898c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800898e:	4261      	negs	r1, r4
 8008990:	4630      	mov	r0, r6
 8008992:	f001 fbd5 	bl	800a140 <_sbrk_r>
 8008996:	3001      	adds	r0, #1
 8008998:	d00d      	beq.n	80089b6 <_malloc_trim_r+0x6e>
 800899a:	4b10      	ldr	r3, [pc, #64]	; (80089dc <_malloc_trim_r+0x94>)
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	6819      	ldr	r1, [r3, #0]
 80089a0:	1b2d      	subs	r5, r5, r4
 80089a2:	f045 0501 	orr.w	r5, r5, #1
 80089a6:	4630      	mov	r0, r6
 80089a8:	1b09      	subs	r1, r1, r4
 80089aa:	6055      	str	r5, [r2, #4]
 80089ac:	6019      	str	r1, [r3, #0]
 80089ae:	f000 fec5 	bl	800973c <__malloc_unlock>
 80089b2:	2001      	movs	r0, #1
 80089b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089b6:	2100      	movs	r1, #0
 80089b8:	4630      	mov	r0, r6
 80089ba:	f001 fbc1 	bl	800a140 <_sbrk_r>
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	1a83      	subs	r3, r0, r2
 80089c2:	2b0f      	cmp	r3, #15
 80089c4:	ddde      	ble.n	8008984 <_malloc_trim_r+0x3c>
 80089c6:	4c06      	ldr	r4, [pc, #24]	; (80089e0 <_malloc_trim_r+0x98>)
 80089c8:	4904      	ldr	r1, [pc, #16]	; (80089dc <_malloc_trim_r+0x94>)
 80089ca:	6824      	ldr	r4, [r4, #0]
 80089cc:	f043 0301 	orr.w	r3, r3, #1
 80089d0:	1b00      	subs	r0, r0, r4
 80089d2:	6053      	str	r3, [r2, #4]
 80089d4:	6008      	str	r0, [r1, #0]
 80089d6:	e7d5      	b.n	8008984 <_malloc_trim_r+0x3c>
 80089d8:	200005d8 	.word	0x200005d8
 80089dc:	20000a80 	.word	0x20000a80
 80089e0:	200009e4 	.word	0x200009e4

080089e4 <_free_r>:
 80089e4:	2900      	cmp	r1, #0
 80089e6:	d045      	beq.n	8008a74 <_free_r+0x90>
 80089e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ec:	460d      	mov	r5, r1
 80089ee:	4680      	mov	r8, r0
 80089f0:	f000 fea2 	bl	8009738 <__malloc_lock>
 80089f4:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80089f8:	496a      	ldr	r1, [pc, #424]	; (8008ba4 <_free_r+0x1c0>)
 80089fa:	f027 0301 	bic.w	r3, r7, #1
 80089fe:	f1a5 0408 	sub.w	r4, r5, #8
 8008a02:	18e2      	adds	r2, r4, r3
 8008a04:	688e      	ldr	r6, [r1, #8]
 8008a06:	6850      	ldr	r0, [r2, #4]
 8008a08:	42b2      	cmp	r2, r6
 8008a0a:	f020 0003 	bic.w	r0, r0, #3
 8008a0e:	d062      	beq.n	8008ad6 <_free_r+0xf2>
 8008a10:	07fe      	lsls	r6, r7, #31
 8008a12:	6050      	str	r0, [r2, #4]
 8008a14:	d40b      	bmi.n	8008a2e <_free_r+0x4a>
 8008a16:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8008a1a:	1be4      	subs	r4, r4, r7
 8008a1c:	f101 0e08 	add.w	lr, r1, #8
 8008a20:	68a5      	ldr	r5, [r4, #8]
 8008a22:	4575      	cmp	r5, lr
 8008a24:	443b      	add	r3, r7
 8008a26:	d06f      	beq.n	8008b08 <_free_r+0x124>
 8008a28:	68e7      	ldr	r7, [r4, #12]
 8008a2a:	60ef      	str	r7, [r5, #12]
 8008a2c:	60bd      	str	r5, [r7, #8]
 8008a2e:	1815      	adds	r5, r2, r0
 8008a30:	686d      	ldr	r5, [r5, #4]
 8008a32:	07ed      	lsls	r5, r5, #31
 8008a34:	d542      	bpl.n	8008abc <_free_r+0xd8>
 8008a36:	f043 0201 	orr.w	r2, r3, #1
 8008a3a:	6062      	str	r2, [r4, #4]
 8008a3c:	50e3      	str	r3, [r4, r3]
 8008a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a42:	d218      	bcs.n	8008a76 <_free_r+0x92>
 8008a44:	08db      	lsrs	r3, r3, #3
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	684d      	ldr	r5, [r1, #4]
 8008a4a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 8008a4e:	60a7      	str	r7, [r4, #8]
 8008a50:	2001      	movs	r0, #1
 8008a52:	109b      	asrs	r3, r3, #2
 8008a54:	fa00 f303 	lsl.w	r3, r0, r3
 8008a58:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 8008a5c:	431d      	orrs	r5, r3
 8008a5e:	3808      	subs	r0, #8
 8008a60:	60e0      	str	r0, [r4, #12]
 8008a62:	604d      	str	r5, [r1, #4]
 8008a64:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 8008a68:	60fc      	str	r4, [r7, #12]
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a70:	f000 be64 	b.w	800973c <__malloc_unlock>
 8008a74:	4770      	bx	lr
 8008a76:	0a5a      	lsrs	r2, r3, #9
 8008a78:	2a04      	cmp	r2, #4
 8008a7a:	d853      	bhi.n	8008b24 <_free_r+0x140>
 8008a7c:	099a      	lsrs	r2, r3, #6
 8008a7e:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8008a82:	007f      	lsls	r7, r7, #1
 8008a84:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8008a88:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8008a8c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8008a90:	4944      	ldr	r1, [pc, #272]	; (8008ba4 <_free_r+0x1c0>)
 8008a92:	3808      	subs	r0, #8
 8008a94:	4290      	cmp	r0, r2
 8008a96:	d04d      	beq.n	8008b34 <_free_r+0x150>
 8008a98:	6851      	ldr	r1, [r2, #4]
 8008a9a:	f021 0103 	bic.w	r1, r1, #3
 8008a9e:	428b      	cmp	r3, r1
 8008aa0:	d202      	bcs.n	8008aa8 <_free_r+0xc4>
 8008aa2:	6892      	ldr	r2, [r2, #8]
 8008aa4:	4290      	cmp	r0, r2
 8008aa6:	d1f7      	bne.n	8008a98 <_free_r+0xb4>
 8008aa8:	68d0      	ldr	r0, [r2, #12]
 8008aaa:	60e0      	str	r0, [r4, #12]
 8008aac:	60a2      	str	r2, [r4, #8]
 8008aae:	6084      	str	r4, [r0, #8]
 8008ab0:	60d4      	str	r4, [r2, #12]
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab8:	f000 be40 	b.w	800973c <__malloc_unlock>
 8008abc:	6895      	ldr	r5, [r2, #8]
 8008abe:	4f3a      	ldr	r7, [pc, #232]	; (8008ba8 <_free_r+0x1c4>)
 8008ac0:	42bd      	cmp	r5, r7
 8008ac2:	4403      	add	r3, r0
 8008ac4:	d03f      	beq.n	8008b46 <_free_r+0x162>
 8008ac6:	68d0      	ldr	r0, [r2, #12]
 8008ac8:	60e8      	str	r0, [r5, #12]
 8008aca:	f043 0201 	orr.w	r2, r3, #1
 8008ace:	6085      	str	r5, [r0, #8]
 8008ad0:	6062      	str	r2, [r4, #4]
 8008ad2:	50e3      	str	r3, [r4, r3]
 8008ad4:	e7b3      	b.n	8008a3e <_free_r+0x5a>
 8008ad6:	07ff      	lsls	r7, r7, #31
 8008ad8:	4403      	add	r3, r0
 8008ada:	d407      	bmi.n	8008aec <_free_r+0x108>
 8008adc:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8008ae0:	1aa4      	subs	r4, r4, r2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	68a0      	ldr	r0, [r4, #8]
 8008ae6:	68e2      	ldr	r2, [r4, #12]
 8008ae8:	60c2      	str	r2, [r0, #12]
 8008aea:	6090      	str	r0, [r2, #8]
 8008aec:	4a2f      	ldr	r2, [pc, #188]	; (8008bac <_free_r+0x1c8>)
 8008aee:	6812      	ldr	r2, [r2, #0]
 8008af0:	f043 0001 	orr.w	r0, r3, #1
 8008af4:	4293      	cmp	r3, r2
 8008af6:	6060      	str	r0, [r4, #4]
 8008af8:	608c      	str	r4, [r1, #8]
 8008afa:	d3b6      	bcc.n	8008a6a <_free_r+0x86>
 8008afc:	4b2c      	ldr	r3, [pc, #176]	; (8008bb0 <_free_r+0x1cc>)
 8008afe:	4640      	mov	r0, r8
 8008b00:	6819      	ldr	r1, [r3, #0]
 8008b02:	f7ff ff21 	bl	8008948 <_malloc_trim_r>
 8008b06:	e7b0      	b.n	8008a6a <_free_r+0x86>
 8008b08:	1811      	adds	r1, r2, r0
 8008b0a:	6849      	ldr	r1, [r1, #4]
 8008b0c:	07c9      	lsls	r1, r1, #31
 8008b0e:	d444      	bmi.n	8008b9a <_free_r+0x1b6>
 8008b10:	6891      	ldr	r1, [r2, #8]
 8008b12:	68d2      	ldr	r2, [r2, #12]
 8008b14:	60ca      	str	r2, [r1, #12]
 8008b16:	4403      	add	r3, r0
 8008b18:	f043 0001 	orr.w	r0, r3, #1
 8008b1c:	6091      	str	r1, [r2, #8]
 8008b1e:	6060      	str	r0, [r4, #4]
 8008b20:	50e3      	str	r3, [r4, r3]
 8008b22:	e7a2      	b.n	8008a6a <_free_r+0x86>
 8008b24:	2a14      	cmp	r2, #20
 8008b26:	d817      	bhi.n	8008b58 <_free_r+0x174>
 8008b28:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 8008b2c:	007f      	lsls	r7, r7, #1
 8008b2e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8008b32:	e7a9      	b.n	8008a88 <_free_r+0xa4>
 8008b34:	10aa      	asrs	r2, r5, #2
 8008b36:	684b      	ldr	r3, [r1, #4]
 8008b38:	2501      	movs	r5, #1
 8008b3a:	fa05 f202 	lsl.w	r2, r5, r2
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	604b      	str	r3, [r1, #4]
 8008b42:	4602      	mov	r2, r0
 8008b44:	e7b1      	b.n	8008aaa <_free_r+0xc6>
 8008b46:	f043 0201 	orr.w	r2, r3, #1
 8008b4a:	614c      	str	r4, [r1, #20]
 8008b4c:	610c      	str	r4, [r1, #16]
 8008b4e:	60e5      	str	r5, [r4, #12]
 8008b50:	60a5      	str	r5, [r4, #8]
 8008b52:	6062      	str	r2, [r4, #4]
 8008b54:	50e3      	str	r3, [r4, r3]
 8008b56:	e788      	b.n	8008a6a <_free_r+0x86>
 8008b58:	2a54      	cmp	r2, #84	; 0x54
 8008b5a:	d806      	bhi.n	8008b6a <_free_r+0x186>
 8008b5c:	0b1a      	lsrs	r2, r3, #12
 8008b5e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8008b62:	007f      	lsls	r7, r7, #1
 8008b64:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 8008b68:	e78e      	b.n	8008a88 <_free_r+0xa4>
 8008b6a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008b6e:	d806      	bhi.n	8008b7e <_free_r+0x19a>
 8008b70:	0bda      	lsrs	r2, r3, #15
 8008b72:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8008b76:	007f      	lsls	r7, r7, #1
 8008b78:	f102 0577 	add.w	r5, r2, #119	; 0x77
 8008b7c:	e784      	b.n	8008a88 <_free_r+0xa4>
 8008b7e:	f240 5054 	movw	r0, #1364	; 0x554
 8008b82:	4282      	cmp	r2, r0
 8008b84:	d806      	bhi.n	8008b94 <_free_r+0x1b0>
 8008b86:	0c9a      	lsrs	r2, r3, #18
 8008b88:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8008b8c:	007f      	lsls	r7, r7, #1
 8008b8e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 8008b92:	e779      	b.n	8008a88 <_free_r+0xa4>
 8008b94:	27fe      	movs	r7, #254	; 0xfe
 8008b96:	257e      	movs	r5, #126	; 0x7e
 8008b98:	e776      	b.n	8008a88 <_free_r+0xa4>
 8008b9a:	f043 0201 	orr.w	r2, r3, #1
 8008b9e:	6062      	str	r2, [r4, #4]
 8008ba0:	50e3      	str	r3, [r4, r3]
 8008ba2:	e762      	b.n	8008a6a <_free_r+0x86>
 8008ba4:	200005d8 	.word	0x200005d8
 8008ba8:	200005e0 	.word	0x200005e0
 8008bac:	200009e0 	.word	0x200009e0
 8008bb0:	20000a7c 	.word	0x20000a7c

08008bb4 <__sfvwrite_r>:
 8008bb4:	6893      	ldr	r3, [r2, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d076      	beq.n	8008ca8 <__sfvwrite_r+0xf4>
 8008bba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbe:	898b      	ldrh	r3, [r1, #12]
 8008bc0:	b085      	sub	sp, #20
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	0719      	lsls	r1, r3, #28
 8008bc6:	9001      	str	r0, [sp, #4]
 8008bc8:	4616      	mov	r6, r2
 8008bca:	d529      	bpl.n	8008c20 <__sfvwrite_r+0x6c>
 8008bcc:	6922      	ldr	r2, [r4, #16]
 8008bce:	b33a      	cbz	r2, 8008c20 <__sfvwrite_r+0x6c>
 8008bd0:	f003 0802 	and.w	r8, r3, #2
 8008bd4:	fa1f f088 	uxth.w	r0, r8
 8008bd8:	6835      	ldr	r5, [r6, #0]
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d02f      	beq.n	8008c3e <__sfvwrite_r+0x8a>
 8008bde:	f04f 0900 	mov.w	r9, #0
 8008be2:	4fb4      	ldr	r7, [pc, #720]	; (8008eb4 <__sfvwrite_r+0x300>)
 8008be4:	46c8      	mov	r8, r9
 8008be6:	46b2      	mov	sl, r6
 8008be8:	45b8      	cmp	r8, r7
 8008bea:	4643      	mov	r3, r8
 8008bec:	464a      	mov	r2, r9
 8008bee:	bf28      	it	cs
 8008bf0:	463b      	movcs	r3, r7
 8008bf2:	9801      	ldr	r0, [sp, #4]
 8008bf4:	f1b8 0f00 	cmp.w	r8, #0
 8008bf8:	d050      	beq.n	8008c9c <__sfvwrite_r+0xe8>
 8008bfa:	69e1      	ldr	r1, [r4, #28]
 8008bfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008bfe:	47b0      	blx	r6
 8008c00:	2800      	cmp	r0, #0
 8008c02:	dd71      	ble.n	8008ce8 <__sfvwrite_r+0x134>
 8008c04:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008c08:	1a1b      	subs	r3, r3, r0
 8008c0a:	4481      	add	r9, r0
 8008c0c:	ebc0 0808 	rsb	r8, r0, r8
 8008c10:	f8ca 3008 	str.w	r3, [sl, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1e7      	bne.n	8008be8 <__sfvwrite_r+0x34>
 8008c18:	2000      	movs	r0, #0
 8008c1a:	b005      	add	sp, #20
 8008c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c20:	4621      	mov	r1, r4
 8008c22:	9801      	ldr	r0, [sp, #4]
 8008c24:	f7fe fd40 	bl	80076a8 <__swsetup_r>
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	f040 813a 	bne.w	8008ea2 <__sfvwrite_r+0x2ee>
 8008c2e:	89a3      	ldrh	r3, [r4, #12]
 8008c30:	6835      	ldr	r5, [r6, #0]
 8008c32:	f003 0802 	and.w	r8, r3, #2
 8008c36:	fa1f f088 	uxth.w	r0, r8
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d1cf      	bne.n	8008bde <__sfvwrite_r+0x2a>
 8008c3e:	f013 0901 	ands.w	r9, r3, #1
 8008c42:	d15b      	bne.n	8008cfc <__sfvwrite_r+0x148>
 8008c44:	464f      	mov	r7, r9
 8008c46:	9602      	str	r6, [sp, #8]
 8008c48:	b31f      	cbz	r7, 8008c92 <__sfvwrite_r+0xde>
 8008c4a:	059a      	lsls	r2, r3, #22
 8008c4c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8008c50:	d52c      	bpl.n	8008cac <__sfvwrite_r+0xf8>
 8008c52:	4547      	cmp	r7, r8
 8008c54:	46c2      	mov	sl, r8
 8008c56:	f0c0 80a4 	bcc.w	8008da2 <__sfvwrite_r+0x1ee>
 8008c5a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8008c5e:	f040 80b1 	bne.w	8008dc4 <__sfvwrite_r+0x210>
 8008c62:	6820      	ldr	r0, [r4, #0]
 8008c64:	4652      	mov	r2, sl
 8008c66:	4649      	mov	r1, r9
 8008c68:	f000 fd02 	bl	8009670 <memmove>
 8008c6c:	68a0      	ldr	r0, [r4, #8]
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	ebc8 0000 	rsb	r0, r8, r0
 8008c74:	4453      	add	r3, sl
 8008c76:	60a0      	str	r0, [r4, #8]
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	9a02      	ldr	r2, [sp, #8]
 8008c7e:	6893      	ldr	r3, [r2, #8]
 8008c80:	1a1b      	subs	r3, r3, r0
 8008c82:	4481      	add	r9, r0
 8008c84:	1a3f      	subs	r7, r7, r0
 8008c86:	6093      	str	r3, [r2, #8]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d0c5      	beq.n	8008c18 <__sfvwrite_r+0x64>
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	2f00      	cmp	r7, #0
 8008c90:	d1db      	bne.n	8008c4a <__sfvwrite_r+0x96>
 8008c92:	f8d5 9000 	ldr.w	r9, [r5]
 8008c96:	686f      	ldr	r7, [r5, #4]
 8008c98:	3508      	adds	r5, #8
 8008c9a:	e7d5      	b.n	8008c48 <__sfvwrite_r+0x94>
 8008c9c:	f8d5 9000 	ldr.w	r9, [r5]
 8008ca0:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8008ca4:	3508      	adds	r5, #8
 8008ca6:	e79f      	b.n	8008be8 <__sfvwrite_r+0x34>
 8008ca8:	2000      	movs	r0, #0
 8008caa:	4770      	bx	lr
 8008cac:	6820      	ldr	r0, [r4, #0]
 8008cae:	6923      	ldr	r3, [r4, #16]
 8008cb0:	4298      	cmp	r0, r3
 8008cb2:	d803      	bhi.n	8008cbc <__sfvwrite_r+0x108>
 8008cb4:	6961      	ldr	r1, [r4, #20]
 8008cb6:	428f      	cmp	r7, r1
 8008cb8:	f080 80b7 	bcs.w	8008e2a <__sfvwrite_r+0x276>
 8008cbc:	45b8      	cmp	r8, r7
 8008cbe:	bf28      	it	cs
 8008cc0:	46b8      	movcs	r8, r7
 8008cc2:	4642      	mov	r2, r8
 8008cc4:	4649      	mov	r1, r9
 8008cc6:	f000 fcd3 	bl	8009670 <memmove>
 8008cca:	68a3      	ldr	r3, [r4, #8]
 8008ccc:	6822      	ldr	r2, [r4, #0]
 8008cce:	ebc8 0303 	rsb	r3, r8, r3
 8008cd2:	4442      	add	r2, r8
 8008cd4:	60a3      	str	r3, [r4, #8]
 8008cd6:	6022      	str	r2, [r4, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d149      	bne.n	8008d70 <__sfvwrite_r+0x1bc>
 8008cdc:	4621      	mov	r1, r4
 8008cde:	9801      	ldr	r0, [sp, #4]
 8008ce0:	f7ff fd94 	bl	800880c <_fflush_r>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d043      	beq.n	8008d70 <__sfvwrite_r+0x1bc>
 8008ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	b005      	add	sp, #20
 8008cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfc:	4680      	mov	r8, r0
 8008cfe:	9002      	str	r0, [sp, #8]
 8008d00:	4682      	mov	sl, r0
 8008d02:	4681      	mov	r9, r0
 8008d04:	f1b9 0f00 	cmp.w	r9, #0
 8008d08:	d02a      	beq.n	8008d60 <__sfvwrite_r+0x1ac>
 8008d0a:	9b02      	ldr	r3, [sp, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d04c      	beq.n	8008daa <__sfvwrite_r+0x1f6>
 8008d10:	6820      	ldr	r0, [r4, #0]
 8008d12:	6923      	ldr	r3, [r4, #16]
 8008d14:	6962      	ldr	r2, [r4, #20]
 8008d16:	45c8      	cmp	r8, r9
 8008d18:	46c3      	mov	fp, r8
 8008d1a:	bf28      	it	cs
 8008d1c:	46cb      	movcs	fp, r9
 8008d1e:	4298      	cmp	r0, r3
 8008d20:	465f      	mov	r7, fp
 8008d22:	d904      	bls.n	8008d2e <__sfvwrite_r+0x17a>
 8008d24:	68a3      	ldr	r3, [r4, #8]
 8008d26:	4413      	add	r3, r2
 8008d28:	459b      	cmp	fp, r3
 8008d2a:	f300 8090 	bgt.w	8008e4e <__sfvwrite_r+0x29a>
 8008d2e:	4593      	cmp	fp, r2
 8008d30:	db20      	blt.n	8008d74 <__sfvwrite_r+0x1c0>
 8008d32:	4613      	mov	r3, r2
 8008d34:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008d36:	69e1      	ldr	r1, [r4, #28]
 8008d38:	9801      	ldr	r0, [sp, #4]
 8008d3a:	4652      	mov	r2, sl
 8008d3c:	47b8      	blx	r7
 8008d3e:	1e07      	subs	r7, r0, #0
 8008d40:	ddd2      	ble.n	8008ce8 <__sfvwrite_r+0x134>
 8008d42:	ebb8 0807 	subs.w	r8, r8, r7
 8008d46:	d023      	beq.n	8008d90 <__sfvwrite_r+0x1dc>
 8008d48:	68b3      	ldr	r3, [r6, #8]
 8008d4a:	1bdb      	subs	r3, r3, r7
 8008d4c:	44ba      	add	sl, r7
 8008d4e:	ebc7 0909 	rsb	r9, r7, r9
 8008d52:	60b3      	str	r3, [r6, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f43f af5f 	beq.w	8008c18 <__sfvwrite_r+0x64>
 8008d5a:	f1b9 0f00 	cmp.w	r9, #0
 8008d5e:	d1d4      	bne.n	8008d0a <__sfvwrite_r+0x156>
 8008d60:	2300      	movs	r3, #0
 8008d62:	f8d5 a000 	ldr.w	sl, [r5]
 8008d66:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8008d6a:	9302      	str	r3, [sp, #8]
 8008d6c:	3508      	adds	r5, #8
 8008d6e:	e7c9      	b.n	8008d04 <__sfvwrite_r+0x150>
 8008d70:	4640      	mov	r0, r8
 8008d72:	e783      	b.n	8008c7c <__sfvwrite_r+0xc8>
 8008d74:	465a      	mov	r2, fp
 8008d76:	4651      	mov	r1, sl
 8008d78:	f000 fc7a 	bl	8009670 <memmove>
 8008d7c:	68a2      	ldr	r2, [r4, #8]
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	ebcb 0202 	rsb	r2, fp, r2
 8008d84:	445b      	add	r3, fp
 8008d86:	ebb8 0807 	subs.w	r8, r8, r7
 8008d8a:	60a2      	str	r2, [r4, #8]
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	d1db      	bne.n	8008d48 <__sfvwrite_r+0x194>
 8008d90:	4621      	mov	r1, r4
 8008d92:	9801      	ldr	r0, [sp, #4]
 8008d94:	f7ff fd3a 	bl	800880c <_fflush_r>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d1a5      	bne.n	8008ce8 <__sfvwrite_r+0x134>
 8008d9c:	f8cd 8008 	str.w	r8, [sp, #8]
 8008da0:	e7d2      	b.n	8008d48 <__sfvwrite_r+0x194>
 8008da2:	6820      	ldr	r0, [r4, #0]
 8008da4:	46b8      	mov	r8, r7
 8008da6:	46ba      	mov	sl, r7
 8008da8:	e75c      	b.n	8008c64 <__sfvwrite_r+0xb0>
 8008daa:	464a      	mov	r2, r9
 8008dac:	210a      	movs	r1, #10
 8008dae:	4650      	mov	r0, sl
 8008db0:	f000 fc0e 	bl	80095d0 <memchr>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d06f      	beq.n	8008e98 <__sfvwrite_r+0x2e4>
 8008db8:	3001      	adds	r0, #1
 8008dba:	2301      	movs	r3, #1
 8008dbc:	ebca 0800 	rsb	r8, sl, r0
 8008dc0:	9302      	str	r3, [sp, #8]
 8008dc2:	e7a5      	b.n	8008d10 <__sfvwrite_r+0x15c>
 8008dc4:	6962      	ldr	r2, [r4, #20]
 8008dc6:	6820      	ldr	r0, [r4, #0]
 8008dc8:	6921      	ldr	r1, [r4, #16]
 8008dca:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 8008dce:	ebc1 0a00 	rsb	sl, r1, r0
 8008dd2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8008dd6:	f10a 0001 	add.w	r0, sl, #1
 8008dda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008dde:	4438      	add	r0, r7
 8008de0:	4540      	cmp	r0, r8
 8008de2:	4642      	mov	r2, r8
 8008de4:	bf84      	itt	hi
 8008de6:	4680      	movhi	r8, r0
 8008de8:	4642      	movhi	r2, r8
 8008dea:	055b      	lsls	r3, r3, #21
 8008dec:	d542      	bpl.n	8008e74 <__sfvwrite_r+0x2c0>
 8008dee:	4611      	mov	r1, r2
 8008df0:	9801      	ldr	r0, [sp, #4]
 8008df2:	f000 f91b 	bl	800902c <_malloc_r>
 8008df6:	4683      	mov	fp, r0
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d055      	beq.n	8008ea8 <__sfvwrite_r+0x2f4>
 8008dfc:	4652      	mov	r2, sl
 8008dfe:	6921      	ldr	r1, [r4, #16]
 8008e00:	f7fb fa7c 	bl	80042fc <memcpy>
 8008e04:	89a3      	ldrh	r3, [r4, #12]
 8008e06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e0e:	81a3      	strh	r3, [r4, #12]
 8008e10:	ebca 0308 	rsb	r3, sl, r8
 8008e14:	eb0b 000a 	add.w	r0, fp, sl
 8008e18:	f8c4 8014 	str.w	r8, [r4, #20]
 8008e1c:	f8c4 b010 	str.w	fp, [r4, #16]
 8008e20:	6020      	str	r0, [r4, #0]
 8008e22:	60a3      	str	r3, [r4, #8]
 8008e24:	46b8      	mov	r8, r7
 8008e26:	46ba      	mov	sl, r7
 8008e28:	e71c      	b.n	8008c64 <__sfvwrite_r+0xb0>
 8008e2a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008e2e:	42bb      	cmp	r3, r7
 8008e30:	bf28      	it	cs
 8008e32:	463b      	movcs	r3, r7
 8008e34:	464a      	mov	r2, r9
 8008e36:	fb93 f3f1 	sdiv	r3, r3, r1
 8008e3a:	9801      	ldr	r0, [sp, #4]
 8008e3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e3e:	fb01 f303 	mul.w	r3, r1, r3
 8008e42:	69e1      	ldr	r1, [r4, #28]
 8008e44:	47b0      	blx	r6
 8008e46:	2800      	cmp	r0, #0
 8008e48:	f73f af18 	bgt.w	8008c7c <__sfvwrite_r+0xc8>
 8008e4c:	e74c      	b.n	8008ce8 <__sfvwrite_r+0x134>
 8008e4e:	461a      	mov	r2, r3
 8008e50:	4651      	mov	r1, sl
 8008e52:	9303      	str	r3, [sp, #12]
 8008e54:	f000 fc0c 	bl	8009670 <memmove>
 8008e58:	6822      	ldr	r2, [r4, #0]
 8008e5a:	9b03      	ldr	r3, [sp, #12]
 8008e5c:	9801      	ldr	r0, [sp, #4]
 8008e5e:	441a      	add	r2, r3
 8008e60:	6022      	str	r2, [r4, #0]
 8008e62:	4621      	mov	r1, r4
 8008e64:	f7ff fcd2 	bl	800880c <_fflush_r>
 8008e68:	9b03      	ldr	r3, [sp, #12]
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	f47f af3c 	bne.w	8008ce8 <__sfvwrite_r+0x134>
 8008e70:	461f      	mov	r7, r3
 8008e72:	e766      	b.n	8008d42 <__sfvwrite_r+0x18e>
 8008e74:	9801      	ldr	r0, [sp, #4]
 8008e76:	f000 ff73 	bl	8009d60 <_realloc_r>
 8008e7a:	4683      	mov	fp, r0
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d1c7      	bne.n	8008e10 <__sfvwrite_r+0x25c>
 8008e80:	9d01      	ldr	r5, [sp, #4]
 8008e82:	6921      	ldr	r1, [r4, #16]
 8008e84:	4628      	mov	r0, r5
 8008e86:	f7ff fdad 	bl	80089e4 <_free_r>
 8008e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e8e:	220c      	movs	r2, #12
 8008e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e94:	602a      	str	r2, [r5, #0]
 8008e96:	e729      	b.n	8008cec <__sfvwrite_r+0x138>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f109 0801 	add.w	r8, r9, #1
 8008e9e:	9302      	str	r3, [sp, #8]
 8008ea0:	e736      	b.n	8008d10 <__sfvwrite_r+0x15c>
 8008ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea6:	e6b8      	b.n	8008c1a <__sfvwrite_r+0x66>
 8008ea8:	9a01      	ldr	r2, [sp, #4]
 8008eaa:	230c      	movs	r3, #12
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb2:	e71b      	b.n	8008cec <__sfvwrite_r+0x138>
 8008eb4:	7ffffc00 	.word	0x7ffffc00

08008eb8 <_fwalk_reent>:
 8008eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ebc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8008ec0:	d01f      	beq.n	8008f02 <_fwalk_reent+0x4a>
 8008ec2:	4688      	mov	r8, r1
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	f04f 0900 	mov.w	r9, #0
 8008eca:	687d      	ldr	r5, [r7, #4]
 8008ecc:	68bc      	ldr	r4, [r7, #8]
 8008ece:	3d01      	subs	r5, #1
 8008ed0:	d411      	bmi.n	8008ef6 <_fwalk_reent+0x3e>
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	f105 35ff 	add.w	r5, r5, #4294967295
 8008eda:	d908      	bls.n	8008eee <_fwalk_reent+0x36>
 8008edc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	d002      	beq.n	8008eee <_fwalk_reent+0x36>
 8008ee8:	47c0      	blx	r8
 8008eea:	ea49 0900 	orr.w	r9, r9, r0
 8008eee:	1c6b      	adds	r3, r5, #1
 8008ef0:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8008ef4:	d1ed      	bne.n	8008ed2 <_fwalk_reent+0x1a>
 8008ef6:	683f      	ldr	r7, [r7, #0]
 8008ef8:	2f00      	cmp	r7, #0
 8008efa:	d1e6      	bne.n	8008eca <_fwalk_reent+0x12>
 8008efc:	4648      	mov	r0, r9
 8008efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f02:	46b9      	mov	r9, r7
 8008f04:	4648      	mov	r0, r9
 8008f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f0a:	bf00      	nop

08008f0c <__locale_mb_cur_max>:
 8008f0c:	4b04      	ldr	r3, [pc, #16]	; (8008f20 <__locale_mb_cur_max+0x14>)
 8008f0e:	4a05      	ldr	r2, [pc, #20]	; (8008f24 <__locale_mb_cur_max+0x18>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	bf08      	it	eq
 8008f18:	4613      	moveq	r3, r2
 8008f1a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8008f1e:	4770      	bx	lr
 8008f20:	20000468 	.word	0x20000468
 8008f24:	2000046c 	.word	0x2000046c

08008f28 <_localeconv_r>:
 8008f28:	4a04      	ldr	r2, [pc, #16]	; (8008f3c <_localeconv_r+0x14>)
 8008f2a:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <_localeconv_r+0x18>)
 8008f2c:	6812      	ldr	r2, [r2, #0]
 8008f2e:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8008f30:	2800      	cmp	r0, #0
 8008f32:	bf08      	it	eq
 8008f34:	4618      	moveq	r0, r3
 8008f36:	30f0      	adds	r0, #240	; 0xf0
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	20000468 	.word	0x20000468
 8008f40:	2000046c 	.word	0x2000046c

08008f44 <__swhatbuf_r>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	460d      	mov	r5, r1
 8008f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f4c:	2900      	cmp	r1, #0
 8008f4e:	b090      	sub	sp, #64	; 0x40
 8008f50:	4614      	mov	r4, r2
 8008f52:	461e      	mov	r6, r3
 8008f54:	db14      	blt.n	8008f80 <__swhatbuf_r+0x3c>
 8008f56:	aa01      	add	r2, sp, #4
 8008f58:	f001 fb16 	bl	800a588 <_fstat_r>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	db0f      	blt.n	8008f80 <__swhatbuf_r+0x3c>
 8008f60:	9a02      	ldr	r2, [sp, #8]
 8008f62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f66:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8008f6a:	fab2 f282 	clz	r2, r2
 8008f6e:	0952      	lsrs	r2, r2, #5
 8008f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f74:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008f78:	6032      	str	r2, [r6, #0]
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	b010      	add	sp, #64	; 0x40
 8008f7e:	bd70      	pop	{r4, r5, r6, pc}
 8008f80:	89a8      	ldrh	r0, [r5, #12]
 8008f82:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8008f86:	b282      	uxth	r2, r0
 8008f88:	2000      	movs	r0, #0
 8008f8a:	6030      	str	r0, [r6, #0]
 8008f8c:	b11a      	cbz	r2, 8008f96 <__swhatbuf_r+0x52>
 8008f8e:	2340      	movs	r3, #64	; 0x40
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	b010      	add	sp, #64	; 0x40
 8008f94:	bd70      	pop	{r4, r5, r6, pc}
 8008f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	b010      	add	sp, #64	; 0x40
 8008fa0:	bd70      	pop	{r4, r5, r6, pc}
 8008fa2:	bf00      	nop

08008fa4 <__smakebuf_r>:
 8008fa4:	898a      	ldrh	r2, [r1, #12]
 8008fa6:	0792      	lsls	r2, r2, #30
 8008fa8:	460b      	mov	r3, r1
 8008faa:	d506      	bpl.n	8008fba <__smakebuf_r+0x16>
 8008fac:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	611a      	str	r2, [r3, #16]
 8008fb6:	6159      	str	r1, [r3, #20]
 8008fb8:	4770      	bx	lr
 8008fba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fbc:	b083      	sub	sp, #12
 8008fbe:	ab01      	add	r3, sp, #4
 8008fc0:	466a      	mov	r2, sp
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	f7ff ffbd 	bl	8008f44 <__swhatbuf_r>
 8008fca:	9900      	ldr	r1, [sp, #0]
 8008fcc:	4606      	mov	r6, r0
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f000 f82c 	bl	800902c <_malloc_r>
 8008fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fd8:	b1d0      	cbz	r0, 8009010 <__smakebuf_r+0x6c>
 8008fda:	9a01      	ldr	r2, [sp, #4]
 8008fdc:	4f12      	ldr	r7, [pc, #72]	; (8009028 <__smakebuf_r+0x84>)
 8008fde:	9900      	ldr	r1, [sp, #0]
 8008fe0:	63ef      	str	r7, [r5, #60]	; 0x3c
 8008fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fe6:	81a3      	strh	r3, [r4, #12]
 8008fe8:	6020      	str	r0, [r4, #0]
 8008fea:	6120      	str	r0, [r4, #16]
 8008fec:	6161      	str	r1, [r4, #20]
 8008fee:	b91a      	cbnz	r2, 8008ff8 <__smakebuf_r+0x54>
 8008ff0:	4333      	orrs	r3, r6
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	b003      	add	sp, #12
 8008ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ffe:	f001 fad7 	bl	800a5b0 <_isatty_r>
 8009002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009006:	2800      	cmp	r0, #0
 8009008:	d0f2      	beq.n	8008ff0 <__smakebuf_r+0x4c>
 800900a:	f043 0301 	orr.w	r3, r3, #1
 800900e:	e7ef      	b.n	8008ff0 <__smakebuf_r+0x4c>
 8009010:	059a      	lsls	r2, r3, #22
 8009012:	d4ef      	bmi.n	8008ff4 <__smakebuf_r+0x50>
 8009014:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009018:	f043 0302 	orr.w	r3, r3, #2
 800901c:	2101      	movs	r1, #1
 800901e:	81a3      	strh	r3, [r4, #12]
 8009020:	6022      	str	r2, [r4, #0]
 8009022:	6122      	str	r2, [r4, #16]
 8009024:	6161      	str	r1, [r4, #20]
 8009026:	e7e5      	b.n	8008ff4 <__smakebuf_r+0x50>
 8009028:	08008839 	.word	0x08008839

0800902c <_malloc_r>:
 800902c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009030:	f101 050b 	add.w	r5, r1, #11
 8009034:	2d16      	cmp	r5, #22
 8009036:	b083      	sub	sp, #12
 8009038:	4606      	mov	r6, r0
 800903a:	f240 809f 	bls.w	800917c <_malloc_r+0x150>
 800903e:	f035 0507 	bics.w	r5, r5, #7
 8009042:	f100 80bf 	bmi.w	80091c4 <_malloc_r+0x198>
 8009046:	42a9      	cmp	r1, r5
 8009048:	f200 80bc 	bhi.w	80091c4 <_malloc_r+0x198>
 800904c:	f000 fb74 	bl	8009738 <__malloc_lock>
 8009050:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8009054:	f0c0 829c 	bcc.w	8009590 <_malloc_r+0x564>
 8009058:	0a6b      	lsrs	r3, r5, #9
 800905a:	f000 80ba 	beq.w	80091d2 <_malloc_r+0x1a6>
 800905e:	2b04      	cmp	r3, #4
 8009060:	f200 8183 	bhi.w	800936a <_malloc_r+0x33e>
 8009064:	09a8      	lsrs	r0, r5, #6
 8009066:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 800906a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800906e:	3038      	adds	r0, #56	; 0x38
 8009070:	4fc4      	ldr	r7, [pc, #784]	; (8009384 <_malloc_r+0x358>)
 8009072:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009076:	f1a3 0108 	sub.w	r1, r3, #8
 800907a:	685c      	ldr	r4, [r3, #4]
 800907c:	42a1      	cmp	r1, r4
 800907e:	d107      	bne.n	8009090 <_malloc_r+0x64>
 8009080:	e0ac      	b.n	80091dc <_malloc_r+0x1b0>
 8009082:	2a00      	cmp	r2, #0
 8009084:	f280 80ac 	bge.w	80091e0 <_malloc_r+0x1b4>
 8009088:	68e4      	ldr	r4, [r4, #12]
 800908a:	42a1      	cmp	r1, r4
 800908c:	f000 80a6 	beq.w	80091dc <_malloc_r+0x1b0>
 8009090:	6863      	ldr	r3, [r4, #4]
 8009092:	f023 0303 	bic.w	r3, r3, #3
 8009096:	1b5a      	subs	r2, r3, r5
 8009098:	2a0f      	cmp	r2, #15
 800909a:	ddf2      	ble.n	8009082 <_malloc_r+0x56>
 800909c:	49b9      	ldr	r1, [pc, #740]	; (8009384 <_malloc_r+0x358>)
 800909e:	693c      	ldr	r4, [r7, #16]
 80090a0:	f101 0e08 	add.w	lr, r1, #8
 80090a4:	4574      	cmp	r4, lr
 80090a6:	f000 81b3 	beq.w	8009410 <_malloc_r+0x3e4>
 80090aa:	6863      	ldr	r3, [r4, #4]
 80090ac:	f023 0303 	bic.w	r3, r3, #3
 80090b0:	1b5a      	subs	r2, r3, r5
 80090b2:	2a0f      	cmp	r2, #15
 80090b4:	f300 8199 	bgt.w	80093ea <_malloc_r+0x3be>
 80090b8:	2a00      	cmp	r2, #0
 80090ba:	f8c1 e014 	str.w	lr, [r1, #20]
 80090be:	f8c1 e010 	str.w	lr, [r1, #16]
 80090c2:	f280 809e 	bge.w	8009202 <_malloc_r+0x1d6>
 80090c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090ca:	f080 8167 	bcs.w	800939c <_malloc_r+0x370>
 80090ce:	08db      	lsrs	r3, r3, #3
 80090d0:	f103 0c01 	add.w	ip, r3, #1
 80090d4:	2201      	movs	r2, #1
 80090d6:	109b      	asrs	r3, r3, #2
 80090d8:	fa02 f303 	lsl.w	r3, r2, r3
 80090dc:	684a      	ldr	r2, [r1, #4]
 80090de:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 80090e2:	f8c4 8008 	str.w	r8, [r4, #8]
 80090e6:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 80090ea:	431a      	orrs	r2, r3
 80090ec:	f1a9 0308 	sub.w	r3, r9, #8
 80090f0:	60e3      	str	r3, [r4, #12]
 80090f2:	604a      	str	r2, [r1, #4]
 80090f4:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 80090f8:	f8c8 400c 	str.w	r4, [r8, #12]
 80090fc:	1083      	asrs	r3, r0, #2
 80090fe:	2401      	movs	r4, #1
 8009100:	409c      	lsls	r4, r3
 8009102:	4294      	cmp	r4, r2
 8009104:	f200 808a 	bhi.w	800921c <_malloc_r+0x1f0>
 8009108:	4214      	tst	r4, r2
 800910a:	d106      	bne.n	800911a <_malloc_r+0xee>
 800910c:	f020 0003 	bic.w	r0, r0, #3
 8009110:	0064      	lsls	r4, r4, #1
 8009112:	4214      	tst	r4, r2
 8009114:	f100 0004 	add.w	r0, r0, #4
 8009118:	d0fa      	beq.n	8009110 <_malloc_r+0xe4>
 800911a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800911e:	46cc      	mov	ip, r9
 8009120:	4680      	mov	r8, r0
 8009122:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009126:	458c      	cmp	ip, r1
 8009128:	d107      	bne.n	800913a <_malloc_r+0x10e>
 800912a:	e173      	b.n	8009414 <_malloc_r+0x3e8>
 800912c:	2a00      	cmp	r2, #0
 800912e:	f280 8181 	bge.w	8009434 <_malloc_r+0x408>
 8009132:	68c9      	ldr	r1, [r1, #12]
 8009134:	458c      	cmp	ip, r1
 8009136:	f000 816d 	beq.w	8009414 <_malloc_r+0x3e8>
 800913a:	684b      	ldr	r3, [r1, #4]
 800913c:	f023 0303 	bic.w	r3, r3, #3
 8009140:	1b5a      	subs	r2, r3, r5
 8009142:	2a0f      	cmp	r2, #15
 8009144:	ddf2      	ble.n	800912c <_malloc_r+0x100>
 8009146:	460c      	mov	r4, r1
 8009148:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800914c:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8009150:	194b      	adds	r3, r1, r5
 8009152:	f045 0501 	orr.w	r5, r5, #1
 8009156:	604d      	str	r5, [r1, #4]
 8009158:	f042 0101 	orr.w	r1, r2, #1
 800915c:	f8c8 c00c 	str.w	ip, [r8, #12]
 8009160:	4630      	mov	r0, r6
 8009162:	f8cc 8008 	str.w	r8, [ip, #8]
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	613b      	str	r3, [r7, #16]
 800916a:	f8c3 e00c 	str.w	lr, [r3, #12]
 800916e:	f8c3 e008 	str.w	lr, [r3, #8]
 8009172:	6059      	str	r1, [r3, #4]
 8009174:	509a      	str	r2, [r3, r2]
 8009176:	f000 fae1 	bl	800973c <__malloc_unlock>
 800917a:	e01f      	b.n	80091bc <_malloc_r+0x190>
 800917c:	2910      	cmp	r1, #16
 800917e:	d821      	bhi.n	80091c4 <_malloc_r+0x198>
 8009180:	f000 fada 	bl	8009738 <__malloc_lock>
 8009184:	2510      	movs	r5, #16
 8009186:	2306      	movs	r3, #6
 8009188:	2002      	movs	r0, #2
 800918a:	4f7e      	ldr	r7, [pc, #504]	; (8009384 <_malloc_r+0x358>)
 800918c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009190:	f1a3 0208 	sub.w	r2, r3, #8
 8009194:	685c      	ldr	r4, [r3, #4]
 8009196:	4294      	cmp	r4, r2
 8009198:	f000 8145 	beq.w	8009426 <_malloc_r+0x3fa>
 800919c:	6863      	ldr	r3, [r4, #4]
 800919e:	68e1      	ldr	r1, [r4, #12]
 80091a0:	68a5      	ldr	r5, [r4, #8]
 80091a2:	f023 0303 	bic.w	r3, r3, #3
 80091a6:	4423      	add	r3, r4
 80091a8:	4630      	mov	r0, r6
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	60e9      	str	r1, [r5, #12]
 80091ae:	f042 0201 	orr.w	r2, r2, #1
 80091b2:	608d      	str	r5, [r1, #8]
 80091b4:	605a      	str	r2, [r3, #4]
 80091b6:	f000 fac1 	bl	800973c <__malloc_unlock>
 80091ba:	3408      	adds	r4, #8
 80091bc:	4620      	mov	r0, r4
 80091be:	b003      	add	sp, #12
 80091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c4:	2400      	movs	r4, #0
 80091c6:	230c      	movs	r3, #12
 80091c8:	4620      	mov	r0, r4
 80091ca:	6033      	str	r3, [r6, #0]
 80091cc:	b003      	add	sp, #12
 80091ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d2:	2380      	movs	r3, #128	; 0x80
 80091d4:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80091d8:	203f      	movs	r0, #63	; 0x3f
 80091da:	e749      	b.n	8009070 <_malloc_r+0x44>
 80091dc:	4670      	mov	r0, lr
 80091de:	e75d      	b.n	800909c <_malloc_r+0x70>
 80091e0:	4423      	add	r3, r4
 80091e2:	68e1      	ldr	r1, [r4, #12]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	68a5      	ldr	r5, [r4, #8]
 80091e8:	f042 0201 	orr.w	r2, r2, #1
 80091ec:	60e9      	str	r1, [r5, #12]
 80091ee:	4630      	mov	r0, r6
 80091f0:	608d      	str	r5, [r1, #8]
 80091f2:	605a      	str	r2, [r3, #4]
 80091f4:	f000 faa2 	bl	800973c <__malloc_unlock>
 80091f8:	3408      	adds	r4, #8
 80091fa:	4620      	mov	r0, r4
 80091fc:	b003      	add	sp, #12
 80091fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009202:	4423      	add	r3, r4
 8009204:	4630      	mov	r0, r6
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	f042 0201 	orr.w	r2, r2, #1
 800920c:	605a      	str	r2, [r3, #4]
 800920e:	f000 fa95 	bl	800973c <__malloc_unlock>
 8009212:	3408      	adds	r4, #8
 8009214:	4620      	mov	r0, r4
 8009216:	b003      	add	sp, #12
 8009218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921c:	68bc      	ldr	r4, [r7, #8]
 800921e:	6863      	ldr	r3, [r4, #4]
 8009220:	f023 0803 	bic.w	r8, r3, #3
 8009224:	45a8      	cmp	r8, r5
 8009226:	d304      	bcc.n	8009232 <_malloc_r+0x206>
 8009228:	ebc5 0308 	rsb	r3, r5, r8
 800922c:	2b0f      	cmp	r3, #15
 800922e:	f300 808c 	bgt.w	800934a <_malloc_r+0x31e>
 8009232:	4b55      	ldr	r3, [pc, #340]	; (8009388 <_malloc_r+0x35c>)
 8009234:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8009398 <_malloc_r+0x36c>
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	f8d9 3000 	ldr.w	r3, [r9]
 800923e:	3301      	adds	r3, #1
 8009240:	442a      	add	r2, r5
 8009242:	eb04 0a08 	add.w	sl, r4, r8
 8009246:	f000 8160 	beq.w	800950a <_malloc_r+0x4de>
 800924a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800924e:	320f      	adds	r2, #15
 8009250:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8009254:	f022 020f 	bic.w	r2, r2, #15
 8009258:	4611      	mov	r1, r2
 800925a:	4630      	mov	r0, r6
 800925c:	9201      	str	r2, [sp, #4]
 800925e:	f000 ff6f 	bl	800a140 <_sbrk_r>
 8009262:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009266:	4683      	mov	fp, r0
 8009268:	9a01      	ldr	r2, [sp, #4]
 800926a:	f000 8158 	beq.w	800951e <_malloc_r+0x4f2>
 800926e:	4582      	cmp	sl, r0
 8009270:	f200 80fc 	bhi.w	800946c <_malloc_r+0x440>
 8009274:	4b45      	ldr	r3, [pc, #276]	; (800938c <_malloc_r+0x360>)
 8009276:	6819      	ldr	r1, [r3, #0]
 8009278:	45da      	cmp	sl, fp
 800927a:	4411      	add	r1, r2
 800927c:	6019      	str	r1, [r3, #0]
 800927e:	f000 8153 	beq.w	8009528 <_malloc_r+0x4fc>
 8009282:	f8d9 0000 	ldr.w	r0, [r9]
 8009286:	f8df e110 	ldr.w	lr, [pc, #272]	; 8009398 <_malloc_r+0x36c>
 800928a:	3001      	adds	r0, #1
 800928c:	bf1b      	ittet	ne
 800928e:	ebca 0a0b 	rsbne	sl, sl, fp
 8009292:	4451      	addne	r1, sl
 8009294:	f8ce b000 	streq.w	fp, [lr]
 8009298:	6019      	strne	r1, [r3, #0]
 800929a:	f01b 0107 	ands.w	r1, fp, #7
 800929e:	f000 8117 	beq.w	80094d0 <_malloc_r+0x4a4>
 80092a2:	f1c1 0008 	rsb	r0, r1, #8
 80092a6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 80092aa:	4483      	add	fp, r0
 80092ac:	3108      	adds	r1, #8
 80092ae:	445a      	add	r2, fp
 80092b0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80092b4:	ebc2 0901 	rsb	r9, r2, r1
 80092b8:	4649      	mov	r1, r9
 80092ba:	4630      	mov	r0, r6
 80092bc:	9301      	str	r3, [sp, #4]
 80092be:	f000 ff3f 	bl	800a140 <_sbrk_r>
 80092c2:	1c43      	adds	r3, r0, #1
 80092c4:	9b01      	ldr	r3, [sp, #4]
 80092c6:	f000 813f 	beq.w	8009548 <_malloc_r+0x51c>
 80092ca:	ebcb 0200 	rsb	r2, fp, r0
 80092ce:	444a      	add	r2, r9
 80092d0:	f042 0201 	orr.w	r2, r2, #1
 80092d4:	6819      	ldr	r1, [r3, #0]
 80092d6:	f8c7 b008 	str.w	fp, [r7, #8]
 80092da:	4449      	add	r1, r9
 80092dc:	42bc      	cmp	r4, r7
 80092de:	f8cb 2004 	str.w	r2, [fp, #4]
 80092e2:	6019      	str	r1, [r3, #0]
 80092e4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800938c <_malloc_r+0x360>
 80092e8:	d016      	beq.n	8009318 <_malloc_r+0x2ec>
 80092ea:	f1b8 0f0f 	cmp.w	r8, #15
 80092ee:	f240 80fd 	bls.w	80094ec <_malloc_r+0x4c0>
 80092f2:	6862      	ldr	r2, [r4, #4]
 80092f4:	f1a8 030c 	sub.w	r3, r8, #12
 80092f8:	f023 0307 	bic.w	r3, r3, #7
 80092fc:	18e0      	adds	r0, r4, r3
 80092fe:	f002 0201 	and.w	r2, r2, #1
 8009302:	f04f 0e05 	mov.w	lr, #5
 8009306:	431a      	orrs	r2, r3
 8009308:	2b0f      	cmp	r3, #15
 800930a:	6062      	str	r2, [r4, #4]
 800930c:	f8c0 e004 	str.w	lr, [r0, #4]
 8009310:	f8c0 e008 	str.w	lr, [r0, #8]
 8009314:	f200 811c 	bhi.w	8009550 <_malloc_r+0x524>
 8009318:	4b1d      	ldr	r3, [pc, #116]	; (8009390 <_malloc_r+0x364>)
 800931a:	68bc      	ldr	r4, [r7, #8]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	4291      	cmp	r1, r2
 8009320:	bf88      	it	hi
 8009322:	6019      	strhi	r1, [r3, #0]
 8009324:	4b1b      	ldr	r3, [pc, #108]	; (8009394 <_malloc_r+0x368>)
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	4291      	cmp	r1, r2
 800932a:	6862      	ldr	r2, [r4, #4]
 800932c:	bf88      	it	hi
 800932e:	6019      	strhi	r1, [r3, #0]
 8009330:	f022 0203 	bic.w	r2, r2, #3
 8009334:	4295      	cmp	r5, r2
 8009336:	eba2 0305 	sub.w	r3, r2, r5
 800933a:	d801      	bhi.n	8009340 <_malloc_r+0x314>
 800933c:	2b0f      	cmp	r3, #15
 800933e:	dc04      	bgt.n	800934a <_malloc_r+0x31e>
 8009340:	4630      	mov	r0, r6
 8009342:	f000 f9fb 	bl	800973c <__malloc_unlock>
 8009346:	2400      	movs	r4, #0
 8009348:	e738      	b.n	80091bc <_malloc_r+0x190>
 800934a:	1962      	adds	r2, r4, r5
 800934c:	f043 0301 	orr.w	r3, r3, #1
 8009350:	f045 0501 	orr.w	r5, r5, #1
 8009354:	6065      	str	r5, [r4, #4]
 8009356:	4630      	mov	r0, r6
 8009358:	60ba      	str	r2, [r7, #8]
 800935a:	6053      	str	r3, [r2, #4]
 800935c:	f000 f9ee 	bl	800973c <__malloc_unlock>
 8009360:	3408      	adds	r4, #8
 8009362:	4620      	mov	r0, r4
 8009364:	b003      	add	sp, #12
 8009366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936a:	2b14      	cmp	r3, #20
 800936c:	d971      	bls.n	8009452 <_malloc_r+0x426>
 800936e:	2b54      	cmp	r3, #84	; 0x54
 8009370:	f200 80a4 	bhi.w	80094bc <_malloc_r+0x490>
 8009374:	0b28      	lsrs	r0, r5, #12
 8009376:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 800937a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800937e:	306e      	adds	r0, #110	; 0x6e
 8009380:	e676      	b.n	8009070 <_malloc_r+0x44>
 8009382:	bf00      	nop
 8009384:	200005d8 	.word	0x200005d8
 8009388:	20000a7c 	.word	0x20000a7c
 800938c:	20000a80 	.word	0x20000a80
 8009390:	20000a78 	.word	0x20000a78
 8009394:	20000a74 	.word	0x20000a74
 8009398:	200009e4 	.word	0x200009e4
 800939c:	0a5a      	lsrs	r2, r3, #9
 800939e:	2a04      	cmp	r2, #4
 80093a0:	d95e      	bls.n	8009460 <_malloc_r+0x434>
 80093a2:	2a14      	cmp	r2, #20
 80093a4:	f200 80b3 	bhi.w	800950e <_malloc_r+0x4e2>
 80093a8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 80093ac:	0049      	lsls	r1, r1, #1
 80093ae:	325b      	adds	r2, #91	; 0x5b
 80093b0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 80093b4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80093b8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8009598 <_malloc_r+0x56c>
 80093bc:	f1ac 0c08 	sub.w	ip, ip, #8
 80093c0:	458c      	cmp	ip, r1
 80093c2:	f000 8088 	beq.w	80094d6 <_malloc_r+0x4aa>
 80093c6:	684a      	ldr	r2, [r1, #4]
 80093c8:	f022 0203 	bic.w	r2, r2, #3
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d202      	bcs.n	80093d6 <_malloc_r+0x3aa>
 80093d0:	6889      	ldr	r1, [r1, #8]
 80093d2:	458c      	cmp	ip, r1
 80093d4:	d1f7      	bne.n	80093c6 <_malloc_r+0x39a>
 80093d6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	f8c4 c00c 	str.w	ip, [r4, #12]
 80093e0:	60a1      	str	r1, [r4, #8]
 80093e2:	f8cc 4008 	str.w	r4, [ip, #8]
 80093e6:	60cc      	str	r4, [r1, #12]
 80093e8:	e688      	b.n	80090fc <_malloc_r+0xd0>
 80093ea:	1963      	adds	r3, r4, r5
 80093ec:	f042 0701 	orr.w	r7, r2, #1
 80093f0:	f045 0501 	orr.w	r5, r5, #1
 80093f4:	6065      	str	r5, [r4, #4]
 80093f6:	4630      	mov	r0, r6
 80093f8:	614b      	str	r3, [r1, #20]
 80093fa:	610b      	str	r3, [r1, #16]
 80093fc:	f8c3 e00c 	str.w	lr, [r3, #12]
 8009400:	f8c3 e008 	str.w	lr, [r3, #8]
 8009404:	605f      	str	r7, [r3, #4]
 8009406:	509a      	str	r2, [r3, r2]
 8009408:	3408      	adds	r4, #8
 800940a:	f000 f997 	bl	800973c <__malloc_unlock>
 800940e:	e6d5      	b.n	80091bc <_malloc_r+0x190>
 8009410:	684a      	ldr	r2, [r1, #4]
 8009412:	e673      	b.n	80090fc <_malloc_r+0xd0>
 8009414:	f108 0801 	add.w	r8, r8, #1
 8009418:	f018 0f03 	tst.w	r8, #3
 800941c:	f10c 0c08 	add.w	ip, ip, #8
 8009420:	f47f ae7f 	bne.w	8009122 <_malloc_r+0xf6>
 8009424:	e030      	b.n	8009488 <_malloc_r+0x45c>
 8009426:	68dc      	ldr	r4, [r3, #12]
 8009428:	42a3      	cmp	r3, r4
 800942a:	bf08      	it	eq
 800942c:	3002      	addeq	r0, #2
 800942e:	f43f ae35 	beq.w	800909c <_malloc_r+0x70>
 8009432:	e6b3      	b.n	800919c <_malloc_r+0x170>
 8009434:	440b      	add	r3, r1
 8009436:	460c      	mov	r4, r1
 8009438:	685a      	ldr	r2, [r3, #4]
 800943a:	68c9      	ldr	r1, [r1, #12]
 800943c:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8009440:	f042 0201 	orr.w	r2, r2, #1
 8009444:	605a      	str	r2, [r3, #4]
 8009446:	4630      	mov	r0, r6
 8009448:	60e9      	str	r1, [r5, #12]
 800944a:	608d      	str	r5, [r1, #8]
 800944c:	f000 f976 	bl	800973c <__malloc_unlock>
 8009450:	e6b4      	b.n	80091bc <_malloc_r+0x190>
 8009452:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 8009456:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 800945a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800945e:	e607      	b.n	8009070 <_malloc_r+0x44>
 8009460:	099a      	lsrs	r2, r3, #6
 8009462:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8009466:	0049      	lsls	r1, r1, #1
 8009468:	3238      	adds	r2, #56	; 0x38
 800946a:	e7a1      	b.n	80093b0 <_malloc_r+0x384>
 800946c:	42bc      	cmp	r4, r7
 800946e:	4b4a      	ldr	r3, [pc, #296]	; (8009598 <_malloc_r+0x56c>)
 8009470:	f43f af00 	beq.w	8009274 <_malloc_r+0x248>
 8009474:	689c      	ldr	r4, [r3, #8]
 8009476:	6862      	ldr	r2, [r4, #4]
 8009478:	f022 0203 	bic.w	r2, r2, #3
 800947c:	e75a      	b.n	8009334 <_malloc_r+0x308>
 800947e:	f859 3908 	ldr.w	r3, [r9], #-8
 8009482:	4599      	cmp	r9, r3
 8009484:	f040 8082 	bne.w	800958c <_malloc_r+0x560>
 8009488:	f010 0f03 	tst.w	r0, #3
 800948c:	f100 30ff 	add.w	r0, r0, #4294967295
 8009490:	d1f5      	bne.n	800947e <_malloc_r+0x452>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	ea23 0304 	bic.w	r3, r3, r4
 8009498:	607b      	str	r3, [r7, #4]
 800949a:	0064      	lsls	r4, r4, #1
 800949c:	429c      	cmp	r4, r3
 800949e:	f63f aebd 	bhi.w	800921c <_malloc_r+0x1f0>
 80094a2:	2c00      	cmp	r4, #0
 80094a4:	f43f aeba 	beq.w	800921c <_malloc_r+0x1f0>
 80094a8:	421c      	tst	r4, r3
 80094aa:	4640      	mov	r0, r8
 80094ac:	f47f ae35 	bne.w	800911a <_malloc_r+0xee>
 80094b0:	0064      	lsls	r4, r4, #1
 80094b2:	421c      	tst	r4, r3
 80094b4:	f100 0004 	add.w	r0, r0, #4
 80094b8:	d0fa      	beq.n	80094b0 <_malloc_r+0x484>
 80094ba:	e62e      	b.n	800911a <_malloc_r+0xee>
 80094bc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80094c0:	d818      	bhi.n	80094f4 <_malloc_r+0x4c8>
 80094c2:	0be8      	lsrs	r0, r5, #15
 80094c4:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 80094c8:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80094cc:	3077      	adds	r0, #119	; 0x77
 80094ce:	e5cf      	b.n	8009070 <_malloc_r+0x44>
 80094d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80094d4:	e6eb      	b.n	80092ae <_malloc_r+0x282>
 80094d6:	2101      	movs	r1, #1
 80094d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094dc:	1092      	asrs	r2, r2, #2
 80094de:	fa01 f202 	lsl.w	r2, r1, r2
 80094e2:	431a      	orrs	r2, r3
 80094e4:	f8c8 2004 	str.w	r2, [r8, #4]
 80094e8:	4661      	mov	r1, ip
 80094ea:	e777      	b.n	80093dc <_malloc_r+0x3b0>
 80094ec:	2301      	movs	r3, #1
 80094ee:	f8cb 3004 	str.w	r3, [fp, #4]
 80094f2:	e725      	b.n	8009340 <_malloc_r+0x314>
 80094f4:	f240 5254 	movw	r2, #1364	; 0x554
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d820      	bhi.n	800953e <_malloc_r+0x512>
 80094fc:	0ca8      	lsrs	r0, r5, #18
 80094fe:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 8009502:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8009506:	307c      	adds	r0, #124	; 0x7c
 8009508:	e5b2      	b.n	8009070 <_malloc_r+0x44>
 800950a:	3210      	adds	r2, #16
 800950c:	e6a4      	b.n	8009258 <_malloc_r+0x22c>
 800950e:	2a54      	cmp	r2, #84	; 0x54
 8009510:	d826      	bhi.n	8009560 <_malloc_r+0x534>
 8009512:	0b1a      	lsrs	r2, r3, #12
 8009514:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8009518:	0049      	lsls	r1, r1, #1
 800951a:	326e      	adds	r2, #110	; 0x6e
 800951c:	e748      	b.n	80093b0 <_malloc_r+0x384>
 800951e:	68bc      	ldr	r4, [r7, #8]
 8009520:	6862      	ldr	r2, [r4, #4]
 8009522:	f022 0203 	bic.w	r2, r2, #3
 8009526:	e705      	b.n	8009334 <_malloc_r+0x308>
 8009528:	f3ca 000b 	ubfx	r0, sl, #0, #12
 800952c:	2800      	cmp	r0, #0
 800952e:	f47f aea8 	bne.w	8009282 <_malloc_r+0x256>
 8009532:	4442      	add	r2, r8
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f042 0201 	orr.w	r2, r2, #1
 800953a:	605a      	str	r2, [r3, #4]
 800953c:	e6ec      	b.n	8009318 <_malloc_r+0x2ec>
 800953e:	23fe      	movs	r3, #254	; 0xfe
 8009540:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 8009544:	207e      	movs	r0, #126	; 0x7e
 8009546:	e593      	b.n	8009070 <_malloc_r+0x44>
 8009548:	2201      	movs	r2, #1
 800954a:	f04f 0900 	mov.w	r9, #0
 800954e:	e6c1      	b.n	80092d4 <_malloc_r+0x2a8>
 8009550:	f104 0108 	add.w	r1, r4, #8
 8009554:	4630      	mov	r0, r6
 8009556:	f7ff fa45 	bl	80089e4 <_free_r>
 800955a:	f8d9 1000 	ldr.w	r1, [r9]
 800955e:	e6db      	b.n	8009318 <_malloc_r+0x2ec>
 8009560:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009564:	d805      	bhi.n	8009572 <_malloc_r+0x546>
 8009566:	0bda      	lsrs	r2, r3, #15
 8009568:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800956c:	0049      	lsls	r1, r1, #1
 800956e:	3277      	adds	r2, #119	; 0x77
 8009570:	e71e      	b.n	80093b0 <_malloc_r+0x384>
 8009572:	f240 5154 	movw	r1, #1364	; 0x554
 8009576:	428a      	cmp	r2, r1
 8009578:	d805      	bhi.n	8009586 <_malloc_r+0x55a>
 800957a:	0c9a      	lsrs	r2, r3, #18
 800957c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8009580:	0049      	lsls	r1, r1, #1
 8009582:	327c      	adds	r2, #124	; 0x7c
 8009584:	e714      	b.n	80093b0 <_malloc_r+0x384>
 8009586:	21fe      	movs	r1, #254	; 0xfe
 8009588:	227e      	movs	r2, #126	; 0x7e
 800958a:	e711      	b.n	80093b0 <_malloc_r+0x384>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	e784      	b.n	800949a <_malloc_r+0x46e>
 8009590:	08e8      	lsrs	r0, r5, #3
 8009592:	1c43      	adds	r3, r0, #1
 8009594:	005b      	lsls	r3, r3, #1
 8009596:	e5f8      	b.n	800918a <_malloc_r+0x15e>
 8009598:	200005d8 	.word	0x200005d8

0800959c <__ascii_mbtowc>:
 800959c:	b082      	sub	sp, #8
 800959e:	b149      	cbz	r1, 80095b4 <__ascii_mbtowc+0x18>
 80095a0:	b15a      	cbz	r2, 80095ba <__ascii_mbtowc+0x1e>
 80095a2:	b16b      	cbz	r3, 80095c0 <__ascii_mbtowc+0x24>
 80095a4:	7813      	ldrb	r3, [r2, #0]
 80095a6:	600b      	str	r3, [r1, #0]
 80095a8:	7812      	ldrb	r2, [r2, #0]
 80095aa:	1c10      	adds	r0, r2, #0
 80095ac:	bf18      	it	ne
 80095ae:	2001      	movne	r0, #1
 80095b0:	b002      	add	sp, #8
 80095b2:	4770      	bx	lr
 80095b4:	a901      	add	r1, sp, #4
 80095b6:	2a00      	cmp	r2, #0
 80095b8:	d1f3      	bne.n	80095a2 <__ascii_mbtowc+0x6>
 80095ba:	4610      	mov	r0, r2
 80095bc:	b002      	add	sp, #8
 80095be:	4770      	bx	lr
 80095c0:	f06f 0001 	mvn.w	r0, #1
 80095c4:	e7f4      	b.n	80095b0 <__ascii_mbtowc+0x14>
 80095c6:	bf00      	nop
	...

080095d0 <memchr>:
 80095d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80095d4:	2a10      	cmp	r2, #16
 80095d6:	db2b      	blt.n	8009630 <memchr+0x60>
 80095d8:	f010 0f07 	tst.w	r0, #7
 80095dc:	d008      	beq.n	80095f0 <memchr+0x20>
 80095de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80095e2:	3a01      	subs	r2, #1
 80095e4:	428b      	cmp	r3, r1
 80095e6:	d02d      	beq.n	8009644 <memchr+0x74>
 80095e8:	f010 0f07 	tst.w	r0, #7
 80095ec:	b342      	cbz	r2, 8009640 <memchr+0x70>
 80095ee:	d1f6      	bne.n	80095de <memchr+0xe>
 80095f0:	b4f0      	push	{r4, r5, r6, r7}
 80095f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80095f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80095fa:	f022 0407 	bic.w	r4, r2, #7
 80095fe:	f07f 0700 	mvns.w	r7, #0
 8009602:	2300      	movs	r3, #0
 8009604:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8009608:	3c08      	subs	r4, #8
 800960a:	ea85 0501 	eor.w	r5, r5, r1
 800960e:	ea86 0601 	eor.w	r6, r6, r1
 8009612:	fa85 f547 	uadd8	r5, r5, r7
 8009616:	faa3 f587 	sel	r5, r3, r7
 800961a:	fa86 f647 	uadd8	r6, r6, r7
 800961e:	faa5 f687 	sel	r6, r5, r7
 8009622:	b98e      	cbnz	r6, 8009648 <memchr+0x78>
 8009624:	d1ee      	bne.n	8009604 <memchr+0x34>
 8009626:	bcf0      	pop	{r4, r5, r6, r7}
 8009628:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800962c:	f002 0207 	and.w	r2, r2, #7
 8009630:	b132      	cbz	r2, 8009640 <memchr+0x70>
 8009632:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009636:	3a01      	subs	r2, #1
 8009638:	ea83 0301 	eor.w	r3, r3, r1
 800963c:	b113      	cbz	r3, 8009644 <memchr+0x74>
 800963e:	d1f8      	bne.n	8009632 <memchr+0x62>
 8009640:	2000      	movs	r0, #0
 8009642:	4770      	bx	lr
 8009644:	3801      	subs	r0, #1
 8009646:	4770      	bx	lr
 8009648:	2d00      	cmp	r5, #0
 800964a:	bf06      	itte	eq
 800964c:	4635      	moveq	r5, r6
 800964e:	3803      	subeq	r0, #3
 8009650:	3807      	subne	r0, #7
 8009652:	f015 0f01 	tst.w	r5, #1
 8009656:	d107      	bne.n	8009668 <memchr+0x98>
 8009658:	3001      	adds	r0, #1
 800965a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800965e:	bf02      	ittt	eq
 8009660:	3001      	addeq	r0, #1
 8009662:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8009666:	3001      	addeq	r0, #1
 8009668:	bcf0      	pop	{r4, r5, r6, r7}
 800966a:	3801      	subs	r0, #1
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop

08009670 <memmove>:
 8009670:	4288      	cmp	r0, r1
 8009672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009674:	d90d      	bls.n	8009692 <memmove+0x22>
 8009676:	188b      	adds	r3, r1, r2
 8009678:	4298      	cmp	r0, r3
 800967a:	d20a      	bcs.n	8009692 <memmove+0x22>
 800967c:	1881      	adds	r1, r0, r2
 800967e:	2a00      	cmp	r2, #0
 8009680:	d051      	beq.n	8009726 <memmove+0xb6>
 8009682:	1a9a      	subs	r2, r3, r2
 8009684:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009688:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800968c:	4293      	cmp	r3, r2
 800968e:	d1f9      	bne.n	8009684 <memmove+0x14>
 8009690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009692:	2a0f      	cmp	r2, #15
 8009694:	d948      	bls.n	8009728 <memmove+0xb8>
 8009696:	ea41 0300 	orr.w	r3, r1, r0
 800969a:	079b      	lsls	r3, r3, #30
 800969c:	d146      	bne.n	800972c <memmove+0xbc>
 800969e:	f100 0410 	add.w	r4, r0, #16
 80096a2:	f101 0310 	add.w	r3, r1, #16
 80096a6:	4615      	mov	r5, r2
 80096a8:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80096ac:	f844 6c10 	str.w	r6, [r4, #-16]
 80096b0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80096b4:	f844 6c0c 	str.w	r6, [r4, #-12]
 80096b8:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80096bc:	f844 6c08 	str.w	r6, [r4, #-8]
 80096c0:	3d10      	subs	r5, #16
 80096c2:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80096c6:	f844 6c04 	str.w	r6, [r4, #-4]
 80096ca:	2d0f      	cmp	r5, #15
 80096cc:	f103 0310 	add.w	r3, r3, #16
 80096d0:	f104 0410 	add.w	r4, r4, #16
 80096d4:	d8e8      	bhi.n	80096a8 <memmove+0x38>
 80096d6:	f1a2 0310 	sub.w	r3, r2, #16
 80096da:	f023 030f 	bic.w	r3, r3, #15
 80096de:	f002 0e0f 	and.w	lr, r2, #15
 80096e2:	3310      	adds	r3, #16
 80096e4:	f1be 0f03 	cmp.w	lr, #3
 80096e8:	4419      	add	r1, r3
 80096ea:	4403      	add	r3, r0
 80096ec:	d921      	bls.n	8009732 <memmove+0xc2>
 80096ee:	1f1e      	subs	r6, r3, #4
 80096f0:	460d      	mov	r5, r1
 80096f2:	4674      	mov	r4, lr
 80096f4:	3c04      	subs	r4, #4
 80096f6:	f855 7b04 	ldr.w	r7, [r5], #4
 80096fa:	f846 7f04 	str.w	r7, [r6, #4]!
 80096fe:	2c03      	cmp	r4, #3
 8009700:	d8f8      	bhi.n	80096f4 <memmove+0x84>
 8009702:	f1ae 0404 	sub.w	r4, lr, #4
 8009706:	f024 0403 	bic.w	r4, r4, #3
 800970a:	3404      	adds	r4, #4
 800970c:	4423      	add	r3, r4
 800970e:	4421      	add	r1, r4
 8009710:	f002 0203 	and.w	r2, r2, #3
 8009714:	b162      	cbz	r2, 8009730 <memmove+0xc0>
 8009716:	3b01      	subs	r3, #1
 8009718:	440a      	add	r2, r1
 800971a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800971e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009722:	428a      	cmp	r2, r1
 8009724:	d1f9      	bne.n	800971a <memmove+0xaa>
 8009726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009728:	4603      	mov	r3, r0
 800972a:	e7f3      	b.n	8009714 <memmove+0xa4>
 800972c:	4603      	mov	r3, r0
 800972e:	e7f2      	b.n	8009716 <memmove+0xa6>
 8009730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009732:	4672      	mov	r2, lr
 8009734:	e7ee      	b.n	8009714 <memmove+0xa4>
 8009736:	bf00      	nop

08009738 <__malloc_lock>:
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop

0800973c <__malloc_unlock>:
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop

08009740 <_Balloc>:
 8009740:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009742:	b570      	push	{r4, r5, r6, lr}
 8009744:	4605      	mov	r5, r0
 8009746:	460c      	mov	r4, r1
 8009748:	b14b      	cbz	r3, 800975e <_Balloc+0x1e>
 800974a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800974e:	b180      	cbz	r0, 8009772 <_Balloc+0x32>
 8009750:	6802      	ldr	r2, [r0, #0]
 8009752:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8009756:	2300      	movs	r3, #0
 8009758:	6103      	str	r3, [r0, #16]
 800975a:	60c3      	str	r3, [r0, #12]
 800975c:	bd70      	pop	{r4, r5, r6, pc}
 800975e:	2221      	movs	r2, #33	; 0x21
 8009760:	2104      	movs	r1, #4
 8009762:	f000 fe2d 	bl	800a3c0 <_calloc_r>
 8009766:	64e8      	str	r0, [r5, #76]	; 0x4c
 8009768:	4603      	mov	r3, r0
 800976a:	2800      	cmp	r0, #0
 800976c:	d1ed      	bne.n	800974a <_Balloc+0xa>
 800976e:	2000      	movs	r0, #0
 8009770:	bd70      	pop	{r4, r5, r6, pc}
 8009772:	2101      	movs	r1, #1
 8009774:	fa01 f604 	lsl.w	r6, r1, r4
 8009778:	1d72      	adds	r2, r6, #5
 800977a:	4628      	mov	r0, r5
 800977c:	0092      	lsls	r2, r2, #2
 800977e:	f000 fe1f 	bl	800a3c0 <_calloc_r>
 8009782:	2800      	cmp	r0, #0
 8009784:	d0f3      	beq.n	800976e <_Balloc+0x2e>
 8009786:	6044      	str	r4, [r0, #4]
 8009788:	6086      	str	r6, [r0, #8]
 800978a:	e7e4      	b.n	8009756 <_Balloc+0x16>

0800978c <_Bfree>:
 800978c:	b131      	cbz	r1, 800979c <_Bfree+0x10>
 800978e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009790:	684a      	ldr	r2, [r1, #4]
 8009792:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009796:	6008      	str	r0, [r1, #0]
 8009798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop

080097a0 <__multadd>:
 80097a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097a2:	690c      	ldr	r4, [r1, #16]
 80097a4:	b083      	sub	sp, #12
 80097a6:	460d      	mov	r5, r1
 80097a8:	4606      	mov	r6, r0
 80097aa:	f101 0e14 	add.w	lr, r1, #20
 80097ae:	2700      	movs	r7, #0
 80097b0:	f8de 0000 	ldr.w	r0, [lr]
 80097b4:	b281      	uxth	r1, r0
 80097b6:	fb02 3101 	mla	r1, r2, r1, r3
 80097ba:	0c0b      	lsrs	r3, r1, #16
 80097bc:	0c00      	lsrs	r0, r0, #16
 80097be:	fb02 3300 	mla	r3, r2, r0, r3
 80097c2:	b289      	uxth	r1, r1
 80097c4:	3701      	adds	r7, #1
 80097c6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097ca:	42bc      	cmp	r4, r7
 80097cc:	f84e 1b04 	str.w	r1, [lr], #4
 80097d0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80097d4:	dcec      	bgt.n	80097b0 <__multadd+0x10>
 80097d6:	b13b      	cbz	r3, 80097e8 <__multadd+0x48>
 80097d8:	68aa      	ldr	r2, [r5, #8]
 80097da:	4294      	cmp	r4, r2
 80097dc:	da07      	bge.n	80097ee <__multadd+0x4e>
 80097de:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80097e2:	3401      	adds	r4, #1
 80097e4:	6153      	str	r3, [r2, #20]
 80097e6:	612c      	str	r4, [r5, #16]
 80097e8:	4628      	mov	r0, r5
 80097ea:	b003      	add	sp, #12
 80097ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097ee:	6869      	ldr	r1, [r5, #4]
 80097f0:	9301      	str	r3, [sp, #4]
 80097f2:	3101      	adds	r1, #1
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7ff ffa3 	bl	8009740 <_Balloc>
 80097fa:	692a      	ldr	r2, [r5, #16]
 80097fc:	3202      	adds	r2, #2
 80097fe:	f105 010c 	add.w	r1, r5, #12
 8009802:	4607      	mov	r7, r0
 8009804:	0092      	lsls	r2, r2, #2
 8009806:	300c      	adds	r0, #12
 8009808:	f7fa fd78 	bl	80042fc <memcpy>
 800980c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800980e:	6869      	ldr	r1, [r5, #4]
 8009810:	9b01      	ldr	r3, [sp, #4]
 8009812:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8009816:	6028      	str	r0, [r5, #0]
 8009818:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800981c:	463d      	mov	r5, r7
 800981e:	e7de      	b.n	80097de <__multadd+0x3e>

08009820 <__hi0bits>:
 8009820:	0c03      	lsrs	r3, r0, #16
 8009822:	041b      	lsls	r3, r3, #16
 8009824:	b9b3      	cbnz	r3, 8009854 <__hi0bits+0x34>
 8009826:	0400      	lsls	r0, r0, #16
 8009828:	2310      	movs	r3, #16
 800982a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800982e:	bf04      	itt	eq
 8009830:	0200      	lsleq	r0, r0, #8
 8009832:	3308      	addeq	r3, #8
 8009834:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009838:	bf04      	itt	eq
 800983a:	0100      	lsleq	r0, r0, #4
 800983c:	3304      	addeq	r3, #4
 800983e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009842:	bf04      	itt	eq
 8009844:	0080      	lsleq	r0, r0, #2
 8009846:	3302      	addeq	r3, #2
 8009848:	2800      	cmp	r0, #0
 800984a:	db07      	blt.n	800985c <__hi0bits+0x3c>
 800984c:	0042      	lsls	r2, r0, #1
 800984e:	d403      	bmi.n	8009858 <__hi0bits+0x38>
 8009850:	2020      	movs	r0, #32
 8009852:	4770      	bx	lr
 8009854:	2300      	movs	r3, #0
 8009856:	e7e8      	b.n	800982a <__hi0bits+0xa>
 8009858:	1c58      	adds	r0, r3, #1
 800985a:	4770      	bx	lr
 800985c:	4618      	mov	r0, r3
 800985e:	4770      	bx	lr

08009860 <__lo0bits>:
 8009860:	6803      	ldr	r3, [r0, #0]
 8009862:	f013 0207 	ands.w	r2, r3, #7
 8009866:	d007      	beq.n	8009878 <__lo0bits+0x18>
 8009868:	07d9      	lsls	r1, r3, #31
 800986a:	d420      	bmi.n	80098ae <__lo0bits+0x4e>
 800986c:	079a      	lsls	r2, r3, #30
 800986e:	d420      	bmi.n	80098b2 <__lo0bits+0x52>
 8009870:	089b      	lsrs	r3, r3, #2
 8009872:	6003      	str	r3, [r0, #0]
 8009874:	2002      	movs	r0, #2
 8009876:	4770      	bx	lr
 8009878:	b299      	uxth	r1, r3
 800987a:	b909      	cbnz	r1, 8009880 <__lo0bits+0x20>
 800987c:	0c1b      	lsrs	r3, r3, #16
 800987e:	2210      	movs	r2, #16
 8009880:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009884:	bf04      	itt	eq
 8009886:	0a1b      	lsreq	r3, r3, #8
 8009888:	3208      	addeq	r2, #8
 800988a:	0719      	lsls	r1, r3, #28
 800988c:	bf04      	itt	eq
 800988e:	091b      	lsreq	r3, r3, #4
 8009890:	3204      	addeq	r2, #4
 8009892:	0799      	lsls	r1, r3, #30
 8009894:	bf04      	itt	eq
 8009896:	089b      	lsreq	r3, r3, #2
 8009898:	3202      	addeq	r2, #2
 800989a:	07d9      	lsls	r1, r3, #31
 800989c:	d404      	bmi.n	80098a8 <__lo0bits+0x48>
 800989e:	085b      	lsrs	r3, r3, #1
 80098a0:	d101      	bne.n	80098a6 <__lo0bits+0x46>
 80098a2:	2020      	movs	r0, #32
 80098a4:	4770      	bx	lr
 80098a6:	3201      	adds	r2, #1
 80098a8:	6003      	str	r3, [r0, #0]
 80098aa:	4610      	mov	r0, r2
 80098ac:	4770      	bx	lr
 80098ae:	2000      	movs	r0, #0
 80098b0:	4770      	bx	lr
 80098b2:	085b      	lsrs	r3, r3, #1
 80098b4:	6003      	str	r3, [r0, #0]
 80098b6:	2001      	movs	r0, #1
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop

080098bc <__i2b>:
 80098bc:	b510      	push	{r4, lr}
 80098be:	460c      	mov	r4, r1
 80098c0:	2101      	movs	r1, #1
 80098c2:	f7ff ff3d 	bl	8009740 <_Balloc>
 80098c6:	2201      	movs	r2, #1
 80098c8:	6144      	str	r4, [r0, #20]
 80098ca:	6102      	str	r2, [r0, #16]
 80098cc:	bd10      	pop	{r4, pc}
 80098ce:	bf00      	nop

080098d0 <__multiply>:
 80098d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d4:	690d      	ldr	r5, [r1, #16]
 80098d6:	6917      	ldr	r7, [r2, #16]
 80098d8:	42bd      	cmp	r5, r7
 80098da:	b083      	sub	sp, #12
 80098dc:	460c      	mov	r4, r1
 80098de:	4616      	mov	r6, r2
 80098e0:	da04      	bge.n	80098ec <__multiply+0x1c>
 80098e2:	462a      	mov	r2, r5
 80098e4:	4634      	mov	r4, r6
 80098e6:	463d      	mov	r5, r7
 80098e8:	460e      	mov	r6, r1
 80098ea:	4617      	mov	r7, r2
 80098ec:	68a3      	ldr	r3, [r4, #8]
 80098ee:	6861      	ldr	r1, [r4, #4]
 80098f0:	eb05 0807 	add.w	r8, r5, r7
 80098f4:	4598      	cmp	r8, r3
 80098f6:	bfc8      	it	gt
 80098f8:	3101      	addgt	r1, #1
 80098fa:	f7ff ff21 	bl	8009740 <_Balloc>
 80098fe:	f100 0c14 	add.w	ip, r0, #20
 8009902:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8009906:	45cc      	cmp	ip, r9
 8009908:	9000      	str	r0, [sp, #0]
 800990a:	d205      	bcs.n	8009918 <__multiply+0x48>
 800990c:	4663      	mov	r3, ip
 800990e:	2100      	movs	r1, #0
 8009910:	f843 1b04 	str.w	r1, [r3], #4
 8009914:	4599      	cmp	r9, r3
 8009916:	d8fb      	bhi.n	8009910 <__multiply+0x40>
 8009918:	f106 0214 	add.w	r2, r6, #20
 800991c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8009920:	f104 0314 	add.w	r3, r4, #20
 8009924:	4552      	cmp	r2, sl
 8009926:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 800992a:	d254      	bcs.n	80099d6 <__multiply+0x106>
 800992c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009930:	4699      	mov	r9, r3
 8009932:	f852 3b04 	ldr.w	r3, [r2], #4
 8009936:	fa1f fb83 	uxth.w	fp, r3
 800993a:	f1bb 0f00 	cmp.w	fp, #0
 800993e:	d020      	beq.n	8009982 <__multiply+0xb2>
 8009940:	2000      	movs	r0, #0
 8009942:	464f      	mov	r7, r9
 8009944:	4666      	mov	r6, ip
 8009946:	4605      	mov	r5, r0
 8009948:	e000      	b.n	800994c <__multiply+0x7c>
 800994a:	461e      	mov	r6, r3
 800994c:	f857 4b04 	ldr.w	r4, [r7], #4
 8009950:	6830      	ldr	r0, [r6, #0]
 8009952:	b2a1      	uxth	r1, r4
 8009954:	b283      	uxth	r3, r0
 8009956:	fb0b 3101 	mla	r1, fp, r1, r3
 800995a:	0c24      	lsrs	r4, r4, #16
 800995c:	0c00      	lsrs	r0, r0, #16
 800995e:	194b      	adds	r3, r1, r5
 8009960:	fb0b 0004 	mla	r0, fp, r4, r0
 8009964:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8009968:	b299      	uxth	r1, r3
 800996a:	4633      	mov	r3, r6
 800996c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009970:	45be      	cmp	lr, r7
 8009972:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8009976:	f843 1b04 	str.w	r1, [r3], #4
 800997a:	d8e6      	bhi.n	800994a <__multiply+0x7a>
 800997c:	6075      	str	r5, [r6, #4]
 800997e:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8009982:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8009986:	d020      	beq.n	80099ca <__multiply+0xfa>
 8009988:	f8dc 3000 	ldr.w	r3, [ip]
 800998c:	4667      	mov	r7, ip
 800998e:	4618      	mov	r0, r3
 8009990:	464d      	mov	r5, r9
 8009992:	2100      	movs	r1, #0
 8009994:	e000      	b.n	8009998 <__multiply+0xc8>
 8009996:	4637      	mov	r7, r6
 8009998:	882c      	ldrh	r4, [r5, #0]
 800999a:	0c00      	lsrs	r0, r0, #16
 800999c:	fb0b 0004 	mla	r0, fp, r4, r0
 80099a0:	4401      	add	r1, r0
 80099a2:	b29c      	uxth	r4, r3
 80099a4:	463e      	mov	r6, r7
 80099a6:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 80099aa:	f846 3b04 	str.w	r3, [r6], #4
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f855 4b04 	ldr.w	r4, [r5], #4
 80099b4:	b283      	uxth	r3, r0
 80099b6:	0c24      	lsrs	r4, r4, #16
 80099b8:	fb0b 3404 	mla	r4, fp, r4, r3
 80099bc:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 80099c0:	45ae      	cmp	lr, r5
 80099c2:	ea4f 4113 	mov.w	r1, r3, lsr #16
 80099c6:	d8e6      	bhi.n	8009996 <__multiply+0xc6>
 80099c8:	607b      	str	r3, [r7, #4]
 80099ca:	4592      	cmp	sl, r2
 80099cc:	f10c 0c04 	add.w	ip, ip, #4
 80099d0:	d8af      	bhi.n	8009932 <__multiply+0x62>
 80099d2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80099d6:	f1b8 0f00 	cmp.w	r8, #0
 80099da:	dd0b      	ble.n	80099f4 <__multiply+0x124>
 80099dc:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80099e0:	f1a9 0904 	sub.w	r9, r9, #4
 80099e4:	b11b      	cbz	r3, 80099ee <__multiply+0x11e>
 80099e6:	e005      	b.n	80099f4 <__multiply+0x124>
 80099e8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 80099ec:	b913      	cbnz	r3, 80099f4 <__multiply+0x124>
 80099ee:	f1b8 0801 	subs.w	r8, r8, #1
 80099f2:	d1f9      	bne.n	80099e8 <__multiply+0x118>
 80099f4:	9800      	ldr	r0, [sp, #0]
 80099f6:	f8c0 8010 	str.w	r8, [r0, #16]
 80099fa:	b003      	add	sp, #12
 80099fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a00 <__pow5mult>:
 8009a00:	f012 0303 	ands.w	r3, r2, #3
 8009a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a08:	4614      	mov	r4, r2
 8009a0a:	4607      	mov	r7, r0
 8009a0c:	d12e      	bne.n	8009a6c <__pow5mult+0x6c>
 8009a0e:	460e      	mov	r6, r1
 8009a10:	10a4      	asrs	r4, r4, #2
 8009a12:	d01c      	beq.n	8009a4e <__pow5mult+0x4e>
 8009a14:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8009a16:	b395      	cbz	r5, 8009a7e <__pow5mult+0x7e>
 8009a18:	07e3      	lsls	r3, r4, #31
 8009a1a:	f04f 0800 	mov.w	r8, #0
 8009a1e:	d406      	bmi.n	8009a2e <__pow5mult+0x2e>
 8009a20:	1064      	asrs	r4, r4, #1
 8009a22:	d014      	beq.n	8009a4e <__pow5mult+0x4e>
 8009a24:	6828      	ldr	r0, [r5, #0]
 8009a26:	b1a8      	cbz	r0, 8009a54 <__pow5mult+0x54>
 8009a28:	4605      	mov	r5, r0
 8009a2a:	07e3      	lsls	r3, r4, #31
 8009a2c:	d5f8      	bpl.n	8009a20 <__pow5mult+0x20>
 8009a2e:	462a      	mov	r2, r5
 8009a30:	4631      	mov	r1, r6
 8009a32:	4638      	mov	r0, r7
 8009a34:	f7ff ff4c 	bl	80098d0 <__multiply>
 8009a38:	b1b6      	cbz	r6, 8009a68 <__pow5mult+0x68>
 8009a3a:	6872      	ldr	r2, [r6, #4]
 8009a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a3e:	1064      	asrs	r4, r4, #1
 8009a40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a44:	6031      	str	r1, [r6, #0]
 8009a46:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	d1ea      	bne.n	8009a24 <__pow5mult+0x24>
 8009a4e:	4630      	mov	r0, r6
 8009a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a54:	462a      	mov	r2, r5
 8009a56:	4629      	mov	r1, r5
 8009a58:	4638      	mov	r0, r7
 8009a5a:	f7ff ff39 	bl	80098d0 <__multiply>
 8009a5e:	6028      	str	r0, [r5, #0]
 8009a60:	f8c0 8000 	str.w	r8, [r0]
 8009a64:	4605      	mov	r5, r0
 8009a66:	e7e0      	b.n	8009a2a <__pow5mult+0x2a>
 8009a68:	4606      	mov	r6, r0
 8009a6a:	e7d9      	b.n	8009a20 <__pow5mult+0x20>
 8009a6c:	1e5a      	subs	r2, r3, #1
 8009a6e:	4d0b      	ldr	r5, [pc, #44]	; (8009a9c <__pow5mult+0x9c>)
 8009a70:	2300      	movs	r3, #0
 8009a72:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8009a76:	f7ff fe93 	bl	80097a0 <__multadd>
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	e7c8      	b.n	8009a10 <__pow5mult+0x10>
 8009a7e:	2101      	movs	r1, #1
 8009a80:	4638      	mov	r0, r7
 8009a82:	f7ff fe5d 	bl	8009740 <_Balloc>
 8009a86:	f240 2171 	movw	r1, #625	; 0x271
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	6141      	str	r1, [r0, #20]
 8009a90:	6102      	str	r2, [r0, #16]
 8009a92:	4605      	mov	r5, r0
 8009a94:	64b8      	str	r0, [r7, #72]	; 0x48
 8009a96:	6003      	str	r3, [r0, #0]
 8009a98:	e7be      	b.n	8009a18 <__pow5mult+0x18>
 8009a9a:	bf00      	nop
 8009a9c:	0800aee0 	.word	0x0800aee0

08009aa0 <__lshift>:
 8009aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa4:	4691      	mov	r9, r2
 8009aa6:	690a      	ldr	r2, [r1, #16]
 8009aa8:	688b      	ldr	r3, [r1, #8]
 8009aaa:	ea4f 1469 	mov.w	r4, r9, asr #5
 8009aae:	eb04 0802 	add.w	r8, r4, r2
 8009ab2:	f108 0501 	add.w	r5, r8, #1
 8009ab6:	429d      	cmp	r5, r3
 8009ab8:	460e      	mov	r6, r1
 8009aba:	4682      	mov	sl, r0
 8009abc:	6849      	ldr	r1, [r1, #4]
 8009abe:	dd04      	ble.n	8009aca <__lshift+0x2a>
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	429d      	cmp	r5, r3
 8009ac4:	f101 0101 	add.w	r1, r1, #1
 8009ac8:	dcfa      	bgt.n	8009ac0 <__lshift+0x20>
 8009aca:	4650      	mov	r0, sl
 8009acc:	f7ff fe38 	bl	8009740 <_Balloc>
 8009ad0:	2c00      	cmp	r4, #0
 8009ad2:	f100 0214 	add.w	r2, r0, #20
 8009ad6:	dd38      	ble.n	8009b4a <__lshift+0xaa>
 8009ad8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8009adc:	2100      	movs	r1, #0
 8009ade:	f842 1b04 	str.w	r1, [r2], #4
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d1fb      	bne.n	8009ade <__lshift+0x3e>
 8009ae6:	6934      	ldr	r4, [r6, #16]
 8009ae8:	f106 0114 	add.w	r1, r6, #20
 8009aec:	f019 091f 	ands.w	r9, r9, #31
 8009af0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8009af4:	d021      	beq.n	8009b3a <__lshift+0x9a>
 8009af6:	f1c9 0220 	rsb	r2, r9, #32
 8009afa:	2400      	movs	r4, #0
 8009afc:	680f      	ldr	r7, [r1, #0]
 8009afe:	fa07 fc09 	lsl.w	ip, r7, r9
 8009b02:	ea4c 0404 	orr.w	r4, ip, r4
 8009b06:	469c      	mov	ip, r3
 8009b08:	f843 4b04 	str.w	r4, [r3], #4
 8009b0c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b10:	458e      	cmp	lr, r1
 8009b12:	fa24 f402 	lsr.w	r4, r4, r2
 8009b16:	d8f1      	bhi.n	8009afc <__lshift+0x5c>
 8009b18:	f8cc 4004 	str.w	r4, [ip, #4]
 8009b1c:	b10c      	cbz	r4, 8009b22 <__lshift+0x82>
 8009b1e:	f108 0502 	add.w	r5, r8, #2
 8009b22:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8009b26:	6872      	ldr	r2, [r6, #4]
 8009b28:	3d01      	subs	r5, #1
 8009b2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b2e:	6105      	str	r5, [r0, #16]
 8009b30:	6031      	str	r1, [r6, #0]
 8009b32:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8009b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b3a:	3b04      	subs	r3, #4
 8009b3c:	f851 2b04 	ldr.w	r2, [r1], #4
 8009b40:	f843 2f04 	str.w	r2, [r3, #4]!
 8009b44:	458e      	cmp	lr, r1
 8009b46:	d8f9      	bhi.n	8009b3c <__lshift+0x9c>
 8009b48:	e7eb      	b.n	8009b22 <__lshift+0x82>
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	e7cb      	b.n	8009ae6 <__lshift+0x46>
 8009b4e:	bf00      	nop

08009b50 <__mcmp>:
 8009b50:	6902      	ldr	r2, [r0, #16]
 8009b52:	690b      	ldr	r3, [r1, #16]
 8009b54:	1ad2      	subs	r2, r2, r3
 8009b56:	d113      	bne.n	8009b80 <__mcmp+0x30>
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	3014      	adds	r0, #20
 8009b5c:	3114      	adds	r1, #20
 8009b5e:	4419      	add	r1, r3
 8009b60:	b410      	push	{r4}
 8009b62:	4403      	add	r3, r0
 8009b64:	e001      	b.n	8009b6a <__mcmp+0x1a>
 8009b66:	4298      	cmp	r0, r3
 8009b68:	d20c      	bcs.n	8009b84 <__mcmp+0x34>
 8009b6a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8009b6e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b72:	4294      	cmp	r4, r2
 8009b74:	d0f7      	beq.n	8009b66 <__mcmp+0x16>
 8009b76:	d309      	bcc.n	8009b8c <__mcmp+0x3c>
 8009b78:	2001      	movs	r0, #1
 8009b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	4610      	mov	r0, r2
 8009b82:	4770      	bx	lr
 8009b84:	2000      	movs	r0, #0
 8009b86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b90:	e7f3      	b.n	8009b7a <__mcmp+0x2a>
 8009b92:	bf00      	nop

08009b94 <__mdiff>:
 8009b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b98:	690b      	ldr	r3, [r1, #16]
 8009b9a:	460f      	mov	r7, r1
 8009b9c:	6911      	ldr	r1, [r2, #16]
 8009b9e:	1a5b      	subs	r3, r3, r1
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	4690      	mov	r8, r2
 8009ba4:	d117      	bne.n	8009bd6 <__mdiff+0x42>
 8009ba6:	0089      	lsls	r1, r1, #2
 8009ba8:	f107 0214 	add.w	r2, r7, #20
 8009bac:	f108 0514 	add.w	r5, r8, #20
 8009bb0:	1853      	adds	r3, r2, r1
 8009bb2:	4429      	add	r1, r5
 8009bb4:	e001      	b.n	8009bba <__mdiff+0x26>
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d25e      	bcs.n	8009c78 <__mdiff+0xe4>
 8009bba:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 8009bbe:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009bc2:	42a6      	cmp	r6, r4
 8009bc4:	d0f7      	beq.n	8009bb6 <__mdiff+0x22>
 8009bc6:	d260      	bcs.n	8009c8a <__mdiff+0xf6>
 8009bc8:	463b      	mov	r3, r7
 8009bca:	4614      	mov	r4, r2
 8009bcc:	4647      	mov	r7, r8
 8009bce:	f04f 0901 	mov.w	r9, #1
 8009bd2:	4698      	mov	r8, r3
 8009bd4:	e006      	b.n	8009be4 <__mdiff+0x50>
 8009bd6:	db5d      	blt.n	8009c94 <__mdiff+0x100>
 8009bd8:	f107 0514 	add.w	r5, r7, #20
 8009bdc:	f102 0414 	add.w	r4, r2, #20
 8009be0:	f04f 0900 	mov.w	r9, #0
 8009be4:	6879      	ldr	r1, [r7, #4]
 8009be6:	f7ff fdab 	bl	8009740 <_Balloc>
 8009bea:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009bee:	693e      	ldr	r6, [r7, #16]
 8009bf0:	f8c0 900c 	str.w	r9, [r0, #12]
 8009bf4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8009bf8:	46a6      	mov	lr, r4
 8009bfa:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8009bfe:	f100 0414 	add.w	r4, r0, #20
 8009c02:	2300      	movs	r3, #0
 8009c04:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009c08:	f855 8b04 	ldr.w	r8, [r5], #4
 8009c0c:	b28a      	uxth	r2, r1
 8009c0e:	fa13 f388 	uxtah	r3, r3, r8
 8009c12:	0c09      	lsrs	r1, r1, #16
 8009c14:	1a9a      	subs	r2, r3, r2
 8009c16:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 8009c1a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8009c1e:	b292      	uxth	r2, r2
 8009c20:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009c24:	45f4      	cmp	ip, lr
 8009c26:	f844 2b04 	str.w	r2, [r4], #4
 8009c2a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8009c2e:	d8e9      	bhi.n	8009c04 <__mdiff+0x70>
 8009c30:	42af      	cmp	r7, r5
 8009c32:	d917      	bls.n	8009c64 <__mdiff+0xd0>
 8009c34:	46a4      	mov	ip, r4
 8009c36:	4629      	mov	r1, r5
 8009c38:	f851 eb04 	ldr.w	lr, [r1], #4
 8009c3c:	fa13 f28e 	uxtah	r2, r3, lr
 8009c40:	1413      	asrs	r3, r2, #16
 8009c42:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 8009c46:	b292      	uxth	r2, r2
 8009c48:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009c4c:	428f      	cmp	r7, r1
 8009c4e:	f84c 2b04 	str.w	r2, [ip], #4
 8009c52:	ea4f 4323 	mov.w	r3, r3, asr #16
 8009c56:	d8ef      	bhi.n	8009c38 <__mdiff+0xa4>
 8009c58:	43ed      	mvns	r5, r5
 8009c5a:	443d      	add	r5, r7
 8009c5c:	f025 0503 	bic.w	r5, r5, #3
 8009c60:	3504      	adds	r5, #4
 8009c62:	442c      	add	r4, r5
 8009c64:	3c04      	subs	r4, #4
 8009c66:	b922      	cbnz	r2, 8009c72 <__mdiff+0xde>
 8009c68:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8009c6c:	3e01      	subs	r6, #1
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0fa      	beq.n	8009c68 <__mdiff+0xd4>
 8009c72:	6106      	str	r6, [r0, #16]
 8009c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c78:	2100      	movs	r1, #0
 8009c7a:	f7ff fd61 	bl	8009740 <_Balloc>
 8009c7e:	2201      	movs	r2, #1
 8009c80:	2300      	movs	r3, #0
 8009c82:	6102      	str	r2, [r0, #16]
 8009c84:	6143      	str	r3, [r0, #20]
 8009c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c8a:	462c      	mov	r4, r5
 8009c8c:	f04f 0900 	mov.w	r9, #0
 8009c90:	4615      	mov	r5, r2
 8009c92:	e7a7      	b.n	8009be4 <__mdiff+0x50>
 8009c94:	463b      	mov	r3, r7
 8009c96:	f107 0414 	add.w	r4, r7, #20
 8009c9a:	f108 0514 	add.w	r5, r8, #20
 8009c9e:	4647      	mov	r7, r8
 8009ca0:	f04f 0901 	mov.w	r9, #1
 8009ca4:	4698      	mov	r8, r3
 8009ca6:	e79d      	b.n	8009be4 <__mdiff+0x50>

08009ca8 <__d2b>:
 8009ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cac:	b083      	sub	sp, #12
 8009cae:	2101      	movs	r1, #1
 8009cb0:	461c      	mov	r4, r3
 8009cb2:	f3c3 550a 	ubfx	r5, r3, #20, #11
 8009cb6:	4617      	mov	r7, r2
 8009cb8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009cba:	f7ff fd41 	bl	8009740 <_Balloc>
 8009cbe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009cc2:	4681      	mov	r9, r0
 8009cc4:	b10d      	cbz	r5, 8009cca <__d2b+0x22>
 8009cc6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009cca:	9401      	str	r4, [sp, #4]
 8009ccc:	b31f      	cbz	r7, 8009d16 <__d2b+0x6e>
 8009cce:	a802      	add	r0, sp, #8
 8009cd0:	f840 7d08 	str.w	r7, [r0, #-8]!
 8009cd4:	f7ff fdc4 	bl	8009860 <__lo0bits>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d135      	bne.n	8009d48 <__d2b+0xa0>
 8009cdc:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009ce0:	f8c9 2014 	str.w	r2, [r9, #20]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	bf0c      	ite	eq
 8009ce8:	2101      	moveq	r1, #1
 8009cea:	2102      	movne	r1, #2
 8009cec:	f8c9 3018 	str.w	r3, [r9, #24]
 8009cf0:	f8c9 1010 	str.w	r1, [r9, #16]
 8009cf4:	b9dd      	cbnz	r5, 8009d2e <__d2b+0x86>
 8009cf6:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 8009cfa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009cfe:	6030      	str	r0, [r6, #0]
 8009d00:	6918      	ldr	r0, [r3, #16]
 8009d02:	f7ff fd8d 	bl	8009820 <__hi0bits>
 8009d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d08:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009d0c:	6018      	str	r0, [r3, #0]
 8009d0e:	4648      	mov	r0, r9
 8009d10:	b003      	add	sp, #12
 8009d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d16:	a801      	add	r0, sp, #4
 8009d18:	f7ff fda2 	bl	8009860 <__lo0bits>
 8009d1c:	9b01      	ldr	r3, [sp, #4]
 8009d1e:	f8c9 3014 	str.w	r3, [r9, #20]
 8009d22:	2101      	movs	r1, #1
 8009d24:	3020      	adds	r0, #32
 8009d26:	f8c9 1010 	str.w	r1, [r9, #16]
 8009d2a:	2d00      	cmp	r5, #0
 8009d2c:	d0e3      	beq.n	8009cf6 <__d2b+0x4e>
 8009d2e:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 8009d32:	eb08 0300 	add.w	r3, r8, r0
 8009d36:	6033      	str	r3, [r6, #0]
 8009d38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d3a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d3e:	6018      	str	r0, [r3, #0]
 8009d40:	4648      	mov	r0, r9
 8009d42:	b003      	add	sp, #12
 8009d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d48:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009d4c:	f1c0 0120 	rsb	r1, r0, #32
 8009d50:	fa03 f101 	lsl.w	r1, r3, r1
 8009d54:	430a      	orrs	r2, r1
 8009d56:	40c3      	lsrs	r3, r0
 8009d58:	9301      	str	r3, [sp, #4]
 8009d5a:	f8c9 2014 	str.w	r2, [r9, #20]
 8009d5e:	e7c1      	b.n	8009ce4 <__d2b+0x3c>

08009d60 <_realloc_r>:
 8009d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d64:	4617      	mov	r7, r2
 8009d66:	b083      	sub	sp, #12
 8009d68:	2900      	cmp	r1, #0
 8009d6a:	f000 80c1 	beq.w	8009ef0 <_realloc_r+0x190>
 8009d6e:	460e      	mov	r6, r1
 8009d70:	4681      	mov	r9, r0
 8009d72:	f107 050b 	add.w	r5, r7, #11
 8009d76:	f7ff fcdf 	bl	8009738 <__malloc_lock>
 8009d7a:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8009d7e:	2d16      	cmp	r5, #22
 8009d80:	f02e 0403 	bic.w	r4, lr, #3
 8009d84:	f1a6 0808 	sub.w	r8, r6, #8
 8009d88:	d840      	bhi.n	8009e0c <_realloc_r+0xac>
 8009d8a:	2210      	movs	r2, #16
 8009d8c:	4615      	mov	r5, r2
 8009d8e:	42af      	cmp	r7, r5
 8009d90:	d841      	bhi.n	8009e16 <_realloc_r+0xb6>
 8009d92:	4294      	cmp	r4, r2
 8009d94:	da75      	bge.n	8009e82 <_realloc_r+0x122>
 8009d96:	4bc9      	ldr	r3, [pc, #804]	; (800a0bc <_realloc_r+0x35c>)
 8009d98:	6899      	ldr	r1, [r3, #8]
 8009d9a:	eb08 0004 	add.w	r0, r8, r4
 8009d9e:	4288      	cmp	r0, r1
 8009da0:	6841      	ldr	r1, [r0, #4]
 8009da2:	f000 80d9 	beq.w	8009f58 <_realloc_r+0x1f8>
 8009da6:	f021 0301 	bic.w	r3, r1, #1
 8009daa:	4403      	add	r3, r0
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	07db      	lsls	r3, r3, #31
 8009db0:	d57d      	bpl.n	8009eae <_realloc_r+0x14e>
 8009db2:	f01e 0f01 	tst.w	lr, #1
 8009db6:	d035      	beq.n	8009e24 <_realloc_r+0xc4>
 8009db8:	4639      	mov	r1, r7
 8009dba:	4648      	mov	r0, r9
 8009dbc:	f7ff f936 	bl	800902c <_malloc_r>
 8009dc0:	4607      	mov	r7, r0
 8009dc2:	b1e0      	cbz	r0, 8009dfe <_realloc_r+0x9e>
 8009dc4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009dc8:	f023 0301 	bic.w	r3, r3, #1
 8009dcc:	4443      	add	r3, r8
 8009dce:	f1a0 0208 	sub.w	r2, r0, #8
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	f000 8144 	beq.w	800a060 <_realloc_r+0x300>
 8009dd8:	1f22      	subs	r2, r4, #4
 8009dda:	2a24      	cmp	r2, #36	; 0x24
 8009ddc:	f200 8131 	bhi.w	800a042 <_realloc_r+0x2e2>
 8009de0:	2a13      	cmp	r2, #19
 8009de2:	f200 8104 	bhi.w	8009fee <_realloc_r+0x28e>
 8009de6:	4603      	mov	r3, r0
 8009de8:	4632      	mov	r2, r6
 8009dea:	6811      	ldr	r1, [r2, #0]
 8009dec:	6019      	str	r1, [r3, #0]
 8009dee:	6851      	ldr	r1, [r2, #4]
 8009df0:	6059      	str	r1, [r3, #4]
 8009df2:	6892      	ldr	r2, [r2, #8]
 8009df4:	609a      	str	r2, [r3, #8]
 8009df6:	4631      	mov	r1, r6
 8009df8:	4648      	mov	r0, r9
 8009dfa:	f7fe fdf3 	bl	80089e4 <_free_r>
 8009dfe:	4648      	mov	r0, r9
 8009e00:	f7ff fc9c 	bl	800973c <__malloc_unlock>
 8009e04:	4638      	mov	r0, r7
 8009e06:	b003      	add	sp, #12
 8009e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0c:	f025 0507 	bic.w	r5, r5, #7
 8009e10:	2d00      	cmp	r5, #0
 8009e12:	462a      	mov	r2, r5
 8009e14:	dabb      	bge.n	8009d8e <_realloc_r+0x2e>
 8009e16:	230c      	movs	r3, #12
 8009e18:	2000      	movs	r0, #0
 8009e1a:	f8c9 3000 	str.w	r3, [r9]
 8009e1e:	b003      	add	sp, #12
 8009e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e24:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009e28:	ebc3 0a08 	rsb	sl, r3, r8
 8009e2c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009e30:	f023 0c03 	bic.w	ip, r3, #3
 8009e34:	eb04 030c 	add.w	r3, r4, ip
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	dbbd      	blt.n	8009db8 <_realloc_r+0x58>
 8009e3c:	4657      	mov	r7, sl
 8009e3e:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009e42:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009e46:	1f22      	subs	r2, r4, #4
 8009e48:	2a24      	cmp	r2, #36	; 0x24
 8009e4a:	60c1      	str	r1, [r0, #12]
 8009e4c:	6088      	str	r0, [r1, #8]
 8009e4e:	f200 8117 	bhi.w	800a080 <_realloc_r+0x320>
 8009e52:	2a13      	cmp	r2, #19
 8009e54:	f240 8112 	bls.w	800a07c <_realloc_r+0x31c>
 8009e58:	6831      	ldr	r1, [r6, #0]
 8009e5a:	f8ca 1008 	str.w	r1, [sl, #8]
 8009e5e:	6871      	ldr	r1, [r6, #4]
 8009e60:	f8ca 100c 	str.w	r1, [sl, #12]
 8009e64:	2a1b      	cmp	r2, #27
 8009e66:	f200 812b 	bhi.w	800a0c0 <_realloc_r+0x360>
 8009e6a:	3608      	adds	r6, #8
 8009e6c:	f10a 0210 	add.w	r2, sl, #16
 8009e70:	6831      	ldr	r1, [r6, #0]
 8009e72:	6011      	str	r1, [r2, #0]
 8009e74:	6871      	ldr	r1, [r6, #4]
 8009e76:	6051      	str	r1, [r2, #4]
 8009e78:	68b1      	ldr	r1, [r6, #8]
 8009e7a:	6091      	str	r1, [r2, #8]
 8009e7c:	463e      	mov	r6, r7
 8009e7e:	461c      	mov	r4, r3
 8009e80:	46d0      	mov	r8, sl
 8009e82:	1b63      	subs	r3, r4, r5
 8009e84:	2b0f      	cmp	r3, #15
 8009e86:	d81d      	bhi.n	8009ec4 <_realloc_r+0x164>
 8009e88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e8c:	f003 0301 	and.w	r3, r3, #1
 8009e90:	4323      	orrs	r3, r4
 8009e92:	4444      	add	r4, r8
 8009e94:	f8c8 3004 	str.w	r3, [r8, #4]
 8009e98:	6863      	ldr	r3, [r4, #4]
 8009e9a:	f043 0301 	orr.w	r3, r3, #1
 8009e9e:	6063      	str	r3, [r4, #4]
 8009ea0:	4648      	mov	r0, r9
 8009ea2:	f7ff fc4b 	bl	800973c <__malloc_unlock>
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	b003      	add	sp, #12
 8009eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eae:	f021 0103 	bic.w	r1, r1, #3
 8009eb2:	4421      	add	r1, r4
 8009eb4:	4291      	cmp	r1, r2
 8009eb6:	db21      	blt.n	8009efc <_realloc_r+0x19c>
 8009eb8:	68c3      	ldr	r3, [r0, #12]
 8009eba:	6882      	ldr	r2, [r0, #8]
 8009ebc:	460c      	mov	r4, r1
 8009ebe:	60d3      	str	r3, [r2, #12]
 8009ec0:	609a      	str	r2, [r3, #8]
 8009ec2:	e7de      	b.n	8009e82 <_realloc_r+0x122>
 8009ec4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009ec8:	eb08 0105 	add.w	r1, r8, r5
 8009ecc:	f002 0201 	and.w	r2, r2, #1
 8009ed0:	4315      	orrs	r5, r2
 8009ed2:	f043 0201 	orr.w	r2, r3, #1
 8009ed6:	440b      	add	r3, r1
 8009ed8:	f8c8 5004 	str.w	r5, [r8, #4]
 8009edc:	604a      	str	r2, [r1, #4]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	f042 0201 	orr.w	r2, r2, #1
 8009ee4:	3108      	adds	r1, #8
 8009ee6:	605a      	str	r2, [r3, #4]
 8009ee8:	4648      	mov	r0, r9
 8009eea:	f7fe fd7b 	bl	80089e4 <_free_r>
 8009eee:	e7d7      	b.n	8009ea0 <_realloc_r+0x140>
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	b003      	add	sp, #12
 8009ef4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef8:	f7ff b898 	b.w	800902c <_malloc_r>
 8009efc:	f01e 0f01 	tst.w	lr, #1
 8009f00:	f47f af5a 	bne.w	8009db8 <_realloc_r+0x58>
 8009f04:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009f08:	ebc3 0a08 	rsb	sl, r3, r8
 8009f0c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009f10:	f023 0c03 	bic.w	ip, r3, #3
 8009f14:	eb01 0e0c 	add.w	lr, r1, ip
 8009f18:	4596      	cmp	lr, r2
 8009f1a:	db8b      	blt.n	8009e34 <_realloc_r+0xd4>
 8009f1c:	68c3      	ldr	r3, [r0, #12]
 8009f1e:	6882      	ldr	r2, [r0, #8]
 8009f20:	4657      	mov	r7, sl
 8009f22:	60d3      	str	r3, [r2, #12]
 8009f24:	609a      	str	r2, [r3, #8]
 8009f26:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009f2a:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009f2e:	60cb      	str	r3, [r1, #12]
 8009f30:	1f22      	subs	r2, r4, #4
 8009f32:	2a24      	cmp	r2, #36	; 0x24
 8009f34:	6099      	str	r1, [r3, #8]
 8009f36:	f200 8099 	bhi.w	800a06c <_realloc_r+0x30c>
 8009f3a:	2a13      	cmp	r2, #19
 8009f3c:	d962      	bls.n	800a004 <_realloc_r+0x2a4>
 8009f3e:	6833      	ldr	r3, [r6, #0]
 8009f40:	f8ca 3008 	str.w	r3, [sl, #8]
 8009f44:	6873      	ldr	r3, [r6, #4]
 8009f46:	f8ca 300c 	str.w	r3, [sl, #12]
 8009f4a:	2a1b      	cmp	r2, #27
 8009f4c:	f200 80a0 	bhi.w	800a090 <_realloc_r+0x330>
 8009f50:	3608      	adds	r6, #8
 8009f52:	f10a 0310 	add.w	r3, sl, #16
 8009f56:	e056      	b.n	800a006 <_realloc_r+0x2a6>
 8009f58:	f021 0b03 	bic.w	fp, r1, #3
 8009f5c:	44a3      	add	fp, r4
 8009f5e:	f105 0010 	add.w	r0, r5, #16
 8009f62:	4583      	cmp	fp, r0
 8009f64:	da59      	bge.n	800a01a <_realloc_r+0x2ba>
 8009f66:	f01e 0f01 	tst.w	lr, #1
 8009f6a:	f47f af25 	bne.w	8009db8 <_realloc_r+0x58>
 8009f6e:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8009f72:	ebc1 0a08 	rsb	sl, r1, r8
 8009f76:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009f7a:	f021 0c03 	bic.w	ip, r1, #3
 8009f7e:	44e3      	add	fp, ip
 8009f80:	4558      	cmp	r0, fp
 8009f82:	f73f af57 	bgt.w	8009e34 <_realloc_r+0xd4>
 8009f86:	4657      	mov	r7, sl
 8009f88:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009f8c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009f90:	1f22      	subs	r2, r4, #4
 8009f92:	2a24      	cmp	r2, #36	; 0x24
 8009f94:	60c1      	str	r1, [r0, #12]
 8009f96:	6088      	str	r0, [r1, #8]
 8009f98:	f200 80b4 	bhi.w	800a104 <_realloc_r+0x3a4>
 8009f9c:	2a13      	cmp	r2, #19
 8009f9e:	f240 80a5 	bls.w	800a0ec <_realloc_r+0x38c>
 8009fa2:	6831      	ldr	r1, [r6, #0]
 8009fa4:	f8ca 1008 	str.w	r1, [sl, #8]
 8009fa8:	6871      	ldr	r1, [r6, #4]
 8009faa:	f8ca 100c 	str.w	r1, [sl, #12]
 8009fae:	2a1b      	cmp	r2, #27
 8009fb0:	f200 80af 	bhi.w	800a112 <_realloc_r+0x3b2>
 8009fb4:	3608      	adds	r6, #8
 8009fb6:	f10a 0210 	add.w	r2, sl, #16
 8009fba:	6831      	ldr	r1, [r6, #0]
 8009fbc:	6011      	str	r1, [r2, #0]
 8009fbe:	6871      	ldr	r1, [r6, #4]
 8009fc0:	6051      	str	r1, [r2, #4]
 8009fc2:	68b1      	ldr	r1, [r6, #8]
 8009fc4:	6091      	str	r1, [r2, #8]
 8009fc6:	eb0a 0105 	add.w	r1, sl, r5
 8009fca:	ebc5 020b 	rsb	r2, r5, fp
 8009fce:	f042 0201 	orr.w	r2, r2, #1
 8009fd2:	6099      	str	r1, [r3, #8]
 8009fd4:	604a      	str	r2, [r1, #4]
 8009fd6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	431d      	orrs	r5, r3
 8009fe0:	4648      	mov	r0, r9
 8009fe2:	f8ca 5004 	str.w	r5, [sl, #4]
 8009fe6:	f7ff fba9 	bl	800973c <__malloc_unlock>
 8009fea:	4638      	mov	r0, r7
 8009fec:	e75c      	b.n	8009ea8 <_realloc_r+0x148>
 8009fee:	6833      	ldr	r3, [r6, #0]
 8009ff0:	6003      	str	r3, [r0, #0]
 8009ff2:	6873      	ldr	r3, [r6, #4]
 8009ff4:	6043      	str	r3, [r0, #4]
 8009ff6:	2a1b      	cmp	r2, #27
 8009ff8:	d827      	bhi.n	800a04a <_realloc_r+0x2ea>
 8009ffa:	f100 0308 	add.w	r3, r0, #8
 8009ffe:	f106 0208 	add.w	r2, r6, #8
 800a002:	e6f2      	b.n	8009dea <_realloc_r+0x8a>
 800a004:	463b      	mov	r3, r7
 800a006:	6832      	ldr	r2, [r6, #0]
 800a008:	601a      	str	r2, [r3, #0]
 800a00a:	6872      	ldr	r2, [r6, #4]
 800a00c:	605a      	str	r2, [r3, #4]
 800a00e:	68b2      	ldr	r2, [r6, #8]
 800a010:	609a      	str	r2, [r3, #8]
 800a012:	463e      	mov	r6, r7
 800a014:	4674      	mov	r4, lr
 800a016:	46d0      	mov	r8, sl
 800a018:	e733      	b.n	8009e82 <_realloc_r+0x122>
 800a01a:	eb08 0105 	add.w	r1, r8, r5
 800a01e:	ebc5 0b0b 	rsb	fp, r5, fp
 800a022:	f04b 0201 	orr.w	r2, fp, #1
 800a026:	6099      	str	r1, [r3, #8]
 800a028:	604a      	str	r2, [r1, #4]
 800a02a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a02e:	f003 0301 	and.w	r3, r3, #1
 800a032:	431d      	orrs	r5, r3
 800a034:	4648      	mov	r0, r9
 800a036:	f846 5c04 	str.w	r5, [r6, #-4]
 800a03a:	f7ff fb7f 	bl	800973c <__malloc_unlock>
 800a03e:	4630      	mov	r0, r6
 800a040:	e732      	b.n	8009ea8 <_realloc_r+0x148>
 800a042:	4631      	mov	r1, r6
 800a044:	f7ff fb14 	bl	8009670 <memmove>
 800a048:	e6d5      	b.n	8009df6 <_realloc_r+0x96>
 800a04a:	68b3      	ldr	r3, [r6, #8]
 800a04c:	6083      	str	r3, [r0, #8]
 800a04e:	68f3      	ldr	r3, [r6, #12]
 800a050:	60c3      	str	r3, [r0, #12]
 800a052:	2a24      	cmp	r2, #36	; 0x24
 800a054:	d028      	beq.n	800a0a8 <_realloc_r+0x348>
 800a056:	f100 0310 	add.w	r3, r0, #16
 800a05a:	f106 0210 	add.w	r2, r6, #16
 800a05e:	e6c4      	b.n	8009dea <_realloc_r+0x8a>
 800a060:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a064:	f023 0303 	bic.w	r3, r3, #3
 800a068:	441c      	add	r4, r3
 800a06a:	e70a      	b.n	8009e82 <_realloc_r+0x122>
 800a06c:	4631      	mov	r1, r6
 800a06e:	4638      	mov	r0, r7
 800a070:	4674      	mov	r4, lr
 800a072:	46d0      	mov	r8, sl
 800a074:	f7ff fafc 	bl	8009670 <memmove>
 800a078:	463e      	mov	r6, r7
 800a07a:	e702      	b.n	8009e82 <_realloc_r+0x122>
 800a07c:	463a      	mov	r2, r7
 800a07e:	e6f7      	b.n	8009e70 <_realloc_r+0x110>
 800a080:	4631      	mov	r1, r6
 800a082:	4638      	mov	r0, r7
 800a084:	461c      	mov	r4, r3
 800a086:	46d0      	mov	r8, sl
 800a088:	f7ff faf2 	bl	8009670 <memmove>
 800a08c:	463e      	mov	r6, r7
 800a08e:	e6f8      	b.n	8009e82 <_realloc_r+0x122>
 800a090:	68b3      	ldr	r3, [r6, #8]
 800a092:	f8ca 3010 	str.w	r3, [sl, #16]
 800a096:	68f3      	ldr	r3, [r6, #12]
 800a098:	f8ca 3014 	str.w	r3, [sl, #20]
 800a09c:	2a24      	cmp	r2, #36	; 0x24
 800a09e:	d01b      	beq.n	800a0d8 <_realloc_r+0x378>
 800a0a0:	3610      	adds	r6, #16
 800a0a2:	f10a 0318 	add.w	r3, sl, #24
 800a0a6:	e7ae      	b.n	800a006 <_realloc_r+0x2a6>
 800a0a8:	6933      	ldr	r3, [r6, #16]
 800a0aa:	6103      	str	r3, [r0, #16]
 800a0ac:	6973      	ldr	r3, [r6, #20]
 800a0ae:	6143      	str	r3, [r0, #20]
 800a0b0:	f106 0218 	add.w	r2, r6, #24
 800a0b4:	f100 0318 	add.w	r3, r0, #24
 800a0b8:	e697      	b.n	8009dea <_realloc_r+0x8a>
 800a0ba:	bf00      	nop
 800a0bc:	200005d8 	.word	0x200005d8
 800a0c0:	68b1      	ldr	r1, [r6, #8]
 800a0c2:	f8ca 1010 	str.w	r1, [sl, #16]
 800a0c6:	68f1      	ldr	r1, [r6, #12]
 800a0c8:	f8ca 1014 	str.w	r1, [sl, #20]
 800a0cc:	2a24      	cmp	r2, #36	; 0x24
 800a0ce:	d00f      	beq.n	800a0f0 <_realloc_r+0x390>
 800a0d0:	3610      	adds	r6, #16
 800a0d2:	f10a 0218 	add.w	r2, sl, #24
 800a0d6:	e6cb      	b.n	8009e70 <_realloc_r+0x110>
 800a0d8:	6933      	ldr	r3, [r6, #16]
 800a0da:	f8ca 3018 	str.w	r3, [sl, #24]
 800a0de:	6973      	ldr	r3, [r6, #20]
 800a0e0:	f8ca 301c 	str.w	r3, [sl, #28]
 800a0e4:	3618      	adds	r6, #24
 800a0e6:	f10a 0320 	add.w	r3, sl, #32
 800a0ea:	e78c      	b.n	800a006 <_realloc_r+0x2a6>
 800a0ec:	463a      	mov	r2, r7
 800a0ee:	e764      	b.n	8009fba <_realloc_r+0x25a>
 800a0f0:	6932      	ldr	r2, [r6, #16]
 800a0f2:	f8ca 2018 	str.w	r2, [sl, #24]
 800a0f6:	6972      	ldr	r2, [r6, #20]
 800a0f8:	f8ca 201c 	str.w	r2, [sl, #28]
 800a0fc:	3618      	adds	r6, #24
 800a0fe:	f10a 0220 	add.w	r2, sl, #32
 800a102:	e6b5      	b.n	8009e70 <_realloc_r+0x110>
 800a104:	4631      	mov	r1, r6
 800a106:	4638      	mov	r0, r7
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	f7ff fab1 	bl	8009670 <memmove>
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	e759      	b.n	8009fc6 <_realloc_r+0x266>
 800a112:	68b1      	ldr	r1, [r6, #8]
 800a114:	f8ca 1010 	str.w	r1, [sl, #16]
 800a118:	68f1      	ldr	r1, [r6, #12]
 800a11a:	f8ca 1014 	str.w	r1, [sl, #20]
 800a11e:	2a24      	cmp	r2, #36	; 0x24
 800a120:	d003      	beq.n	800a12a <_realloc_r+0x3ca>
 800a122:	3610      	adds	r6, #16
 800a124:	f10a 0218 	add.w	r2, sl, #24
 800a128:	e747      	b.n	8009fba <_realloc_r+0x25a>
 800a12a:	6932      	ldr	r2, [r6, #16]
 800a12c:	f8ca 2018 	str.w	r2, [sl, #24]
 800a130:	6972      	ldr	r2, [r6, #20]
 800a132:	f8ca 201c 	str.w	r2, [sl, #28]
 800a136:	3618      	adds	r6, #24
 800a138:	f10a 0220 	add.w	r2, sl, #32
 800a13c:	e73d      	b.n	8009fba <_realloc_r+0x25a>
 800a13e:	bf00      	nop

0800a140 <_sbrk_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	4c07      	ldr	r4, [pc, #28]	; (800a160 <_sbrk_r+0x20>)
 800a144:	2300      	movs	r3, #0
 800a146:	4605      	mov	r5, r0
 800a148:	4608      	mov	r0, r1
 800a14a:	6023      	str	r3, [r4, #0]
 800a14c:	f7f8 fa8a 	bl	8002664 <_sbrk>
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	d000      	beq.n	800a156 <_sbrk_r+0x16>
 800a154:	bd38      	pop	{r3, r4, r5, pc}
 800a156:	6823      	ldr	r3, [r4, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d0fb      	beq.n	800a154 <_sbrk_r+0x14>
 800a15c:	602b      	str	r3, [r5, #0]
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
 800a160:	20000aec 	.word	0x20000aec

0800a164 <__sread>:
 800a164:	b510      	push	{r4, lr}
 800a166:	460c      	mov	r4, r1
 800a168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a16c:	f000 fa48 	bl	800a600 <_read_r>
 800a170:	2800      	cmp	r0, #0
 800a172:	db03      	blt.n	800a17c <__sread+0x18>
 800a174:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a176:	4403      	add	r3, r0
 800a178:	6523      	str	r3, [r4, #80]	; 0x50
 800a17a:	bd10      	pop	{r4, pc}
 800a17c:	89a3      	ldrh	r3, [r4, #12]
 800a17e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a182:	81a3      	strh	r3, [r4, #12]
 800a184:	bd10      	pop	{r4, pc}
 800a186:	bf00      	nop

0800a188 <__swrite>:
 800a188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a18c:	4616      	mov	r6, r2
 800a18e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a192:	461f      	mov	r7, r3
 800a194:	05d3      	lsls	r3, r2, #23
 800a196:	460c      	mov	r4, r1
 800a198:	4605      	mov	r5, r0
 800a19a:	d507      	bpl.n	800a1ac <__swrite+0x24>
 800a19c:	2200      	movs	r2, #0
 800a19e:	2302      	movs	r3, #2
 800a1a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a4:	f000 fa16 	bl	800a5d4 <_lseek_r>
 800a1a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a1b4:	81a2      	strh	r2, [r4, #12]
 800a1b6:	463b      	mov	r3, r7
 800a1b8:	4632      	mov	r2, r6
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c0:	f000 b8e8 	b.w	800a394 <_write_r>

0800a1c4 <__sseek>:
 800a1c4:	b510      	push	{r4, lr}
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1cc:	f000 fa02 	bl	800a5d4 <_lseek_r>
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	1c42      	adds	r2, r0, #1
 800a1d4:	bf0e      	itee	eq
 800a1d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1de:	6520      	strne	r0, [r4, #80]	; 0x50
 800a1e0:	81a3      	strh	r3, [r4, #12]
 800a1e2:	bd10      	pop	{r4, pc}

0800a1e4 <__sclose>:
 800a1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e8:	f000 b91a 	b.w	800a420 <_close_r>

0800a1ec <__ssprint_r>:
 800a1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f0:	6893      	ldr	r3, [r2, #8]
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	4690      	mov	r8, r2
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d072      	beq.n	800a2e0 <__ssprint_r+0xf4>
 800a1fa:	4683      	mov	fp, r0
 800a1fc:	f04f 0900 	mov.w	r9, #0
 800a200:	6816      	ldr	r6, [r2, #0]
 800a202:	6808      	ldr	r0, [r1, #0]
 800a204:	688b      	ldr	r3, [r1, #8]
 800a206:	460d      	mov	r5, r1
 800a208:	464c      	mov	r4, r9
 800a20a:	2c00      	cmp	r4, #0
 800a20c:	d045      	beq.n	800a29a <__ssprint_r+0xae>
 800a20e:	429c      	cmp	r4, r3
 800a210:	461f      	mov	r7, r3
 800a212:	469a      	mov	sl, r3
 800a214:	d346      	bcc.n	800a2a4 <__ssprint_r+0xb8>
 800a216:	89ab      	ldrh	r3, [r5, #12]
 800a218:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800a21c:	d02d      	beq.n	800a27a <__ssprint_r+0x8e>
 800a21e:	696f      	ldr	r7, [r5, #20]
 800a220:	6929      	ldr	r1, [r5, #16]
 800a222:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800a226:	ebc1 0a00 	rsb	sl, r1, r0
 800a22a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800a22e:	1c60      	adds	r0, r4, #1
 800a230:	107f      	asrs	r7, r7, #1
 800a232:	4450      	add	r0, sl
 800a234:	42b8      	cmp	r0, r7
 800a236:	463a      	mov	r2, r7
 800a238:	bf84      	itt	hi
 800a23a:	4607      	movhi	r7, r0
 800a23c:	463a      	movhi	r2, r7
 800a23e:	055b      	lsls	r3, r3, #21
 800a240:	d533      	bpl.n	800a2aa <__ssprint_r+0xbe>
 800a242:	4611      	mov	r1, r2
 800a244:	4658      	mov	r0, fp
 800a246:	f7fe fef1 	bl	800902c <_malloc_r>
 800a24a:	2800      	cmp	r0, #0
 800a24c:	d037      	beq.n	800a2be <__ssprint_r+0xd2>
 800a24e:	4652      	mov	r2, sl
 800a250:	6929      	ldr	r1, [r5, #16]
 800a252:	9001      	str	r0, [sp, #4]
 800a254:	f7fa f852 	bl	80042fc <memcpy>
 800a258:	89aa      	ldrh	r2, [r5, #12]
 800a25a:	9b01      	ldr	r3, [sp, #4]
 800a25c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a260:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a264:	81aa      	strh	r2, [r5, #12]
 800a266:	ebca 0207 	rsb	r2, sl, r7
 800a26a:	eb03 000a 	add.w	r0, r3, sl
 800a26e:	616f      	str	r7, [r5, #20]
 800a270:	612b      	str	r3, [r5, #16]
 800a272:	6028      	str	r0, [r5, #0]
 800a274:	60aa      	str	r2, [r5, #8]
 800a276:	4627      	mov	r7, r4
 800a278:	46a2      	mov	sl, r4
 800a27a:	4652      	mov	r2, sl
 800a27c:	4649      	mov	r1, r9
 800a27e:	f7ff f9f7 	bl	8009670 <memmove>
 800a282:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800a286:	68ab      	ldr	r3, [r5, #8]
 800a288:	6828      	ldr	r0, [r5, #0]
 800a28a:	1bdb      	subs	r3, r3, r7
 800a28c:	4450      	add	r0, sl
 800a28e:	1b14      	subs	r4, r2, r4
 800a290:	60ab      	str	r3, [r5, #8]
 800a292:	6028      	str	r0, [r5, #0]
 800a294:	f8c8 4008 	str.w	r4, [r8, #8]
 800a298:	b314      	cbz	r4, 800a2e0 <__ssprint_r+0xf4>
 800a29a:	f8d6 9000 	ldr.w	r9, [r6]
 800a29e:	6874      	ldr	r4, [r6, #4]
 800a2a0:	3608      	adds	r6, #8
 800a2a2:	e7b2      	b.n	800a20a <__ssprint_r+0x1e>
 800a2a4:	4627      	mov	r7, r4
 800a2a6:	46a2      	mov	sl, r4
 800a2a8:	e7e7      	b.n	800a27a <__ssprint_r+0x8e>
 800a2aa:	4658      	mov	r0, fp
 800a2ac:	f7ff fd58 	bl	8009d60 <_realloc_r>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d1d7      	bne.n	800a266 <__ssprint_r+0x7a>
 800a2b6:	6929      	ldr	r1, [r5, #16]
 800a2b8:	4658      	mov	r0, fp
 800a2ba:	f7fe fb93 	bl	80089e4 <_free_r>
 800a2be:	230c      	movs	r3, #12
 800a2c0:	f8cb 3000 	str.w	r3, [fp]
 800a2c4:	89ab      	ldrh	r3, [r5, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d0:	81ab      	strh	r3, [r5, #12]
 800a2d2:	f8c8 2008 	str.w	r2, [r8, #8]
 800a2d6:	f8c8 2004 	str.w	r2, [r8, #4]
 800a2da:	b003      	add	sp, #12
 800a2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	f8c8 0004 	str.w	r0, [r8, #4]
 800a2e6:	b003      	add	sp, #12
 800a2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a2ec <__sprint_r.part.0>:
 800a2ec:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a2ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f2:	049c      	lsls	r4, r3, #18
 800a2f4:	4692      	mov	sl, r2
 800a2f6:	d52c      	bpl.n	800a352 <__sprint_r.part.0+0x66>
 800a2f8:	6893      	ldr	r3, [r2, #8]
 800a2fa:	6812      	ldr	r2, [r2, #0]
 800a2fc:	b33b      	cbz	r3, 800a34e <__sprint_r.part.0+0x62>
 800a2fe:	460f      	mov	r7, r1
 800a300:	4680      	mov	r8, r0
 800a302:	f102 0908 	add.w	r9, r2, #8
 800a306:	e919 0060 	ldmdb	r9, {r5, r6}
 800a30a:	08b6      	lsrs	r6, r6, #2
 800a30c:	d017      	beq.n	800a33e <__sprint_r.part.0+0x52>
 800a30e:	3d04      	subs	r5, #4
 800a310:	2400      	movs	r4, #0
 800a312:	e001      	b.n	800a318 <__sprint_r.part.0+0x2c>
 800a314:	42a6      	cmp	r6, r4
 800a316:	d010      	beq.n	800a33a <__sprint_r.part.0+0x4e>
 800a318:	463a      	mov	r2, r7
 800a31a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800a31e:	4640      	mov	r0, r8
 800a320:	f000 f91e 	bl	800a560 <_fputwc_r>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	f104 0401 	add.w	r4, r4, #1
 800a32a:	d1f3      	bne.n	800a314 <__sprint_r.part.0+0x28>
 800a32c:	2300      	movs	r3, #0
 800a32e:	f8ca 3008 	str.w	r3, [sl, #8]
 800a332:	f8ca 3004 	str.w	r3, [sl, #4]
 800a336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a33a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a33e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800a342:	f8ca 3008 	str.w	r3, [sl, #8]
 800a346:	f109 0908 	add.w	r9, r9, #8
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1db      	bne.n	800a306 <__sprint_r.part.0+0x1a>
 800a34e:	2000      	movs	r0, #0
 800a350:	e7ec      	b.n	800a32c <__sprint_r.part.0+0x40>
 800a352:	f7fe fc2f 	bl	8008bb4 <__sfvwrite_r>
 800a356:	2300      	movs	r3, #0
 800a358:	f8ca 3008 	str.w	r3, [sl, #8]
 800a35c:	f8ca 3004 	str.w	r3, [sl, #4]
 800a360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a364 <__sprint_r>:
 800a364:	6893      	ldr	r3, [r2, #8]
 800a366:	b10b      	cbz	r3, 800a36c <__sprint_r+0x8>
 800a368:	f7ff bfc0 	b.w	800a2ec <__sprint_r.part.0>
 800a36c:	b410      	push	{r4}
 800a36e:	4618      	mov	r0, r3
 800a370:	6053      	str	r3, [r2, #4]
 800a372:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <__ascii_wctomb>:
 800a378:	b121      	cbz	r1, 800a384 <__ascii_wctomb+0xc>
 800a37a:	2aff      	cmp	r2, #255	; 0xff
 800a37c:	d804      	bhi.n	800a388 <__ascii_wctomb+0x10>
 800a37e:	700a      	strb	r2, [r1, #0]
 800a380:	2001      	movs	r0, #1
 800a382:	4770      	bx	lr
 800a384:	4608      	mov	r0, r1
 800a386:	4770      	bx	lr
 800a388:	238a      	movs	r3, #138	; 0x8a
 800a38a:	6003      	str	r3, [r0, #0]
 800a38c:	f04f 30ff 	mov.w	r0, #4294967295
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop

0800a394 <_write_r>:
 800a394:	b570      	push	{r4, r5, r6, lr}
 800a396:	460d      	mov	r5, r1
 800a398:	4c08      	ldr	r4, [pc, #32]	; (800a3bc <_write_r+0x28>)
 800a39a:	4611      	mov	r1, r2
 800a39c:	4606      	mov	r6, r0
 800a39e:	461a      	mov	r2, r3
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	f7f7 f9eb 	bl	8001780 <_write>
 800a3aa:	1c43      	adds	r3, r0, #1
 800a3ac:	d000      	beq.n	800a3b0 <_write_r+0x1c>
 800a3ae:	bd70      	pop	{r4, r5, r6, pc}
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0fb      	beq.n	800a3ae <_write_r+0x1a>
 800a3b6:	6033      	str	r3, [r6, #0]
 800a3b8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20000aec 	.word	0x20000aec

0800a3c0 <_calloc_r>:
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	fb02 f101 	mul.w	r1, r2, r1
 800a3c6:	f7fe fe31 	bl	800902c <_malloc_r>
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	b1d8      	cbz	r0, 800a406 <_calloc_r+0x46>
 800a3ce:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a3d2:	f022 0203 	bic.w	r2, r2, #3
 800a3d6:	3a04      	subs	r2, #4
 800a3d8:	2a24      	cmp	r2, #36	; 0x24
 800a3da:	d818      	bhi.n	800a40e <_calloc_r+0x4e>
 800a3dc:	2a13      	cmp	r2, #19
 800a3de:	d914      	bls.n	800a40a <_calloc_r+0x4a>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	2a1b      	cmp	r2, #27
 800a3e4:	6003      	str	r3, [r0, #0]
 800a3e6:	6043      	str	r3, [r0, #4]
 800a3e8:	d916      	bls.n	800a418 <_calloc_r+0x58>
 800a3ea:	2a24      	cmp	r2, #36	; 0x24
 800a3ec:	6083      	str	r3, [r0, #8]
 800a3ee:	60c3      	str	r3, [r0, #12]
 800a3f0:	bf11      	iteee	ne
 800a3f2:	f100 0210 	addne.w	r2, r0, #16
 800a3f6:	6103      	streq	r3, [r0, #16]
 800a3f8:	6143      	streq	r3, [r0, #20]
 800a3fa:	f100 0218 	addeq.w	r2, r0, #24
 800a3fe:	2300      	movs	r3, #0
 800a400:	6013      	str	r3, [r2, #0]
 800a402:	6053      	str	r3, [r2, #4]
 800a404:	6093      	str	r3, [r2, #8]
 800a406:	4620      	mov	r0, r4
 800a408:	bd10      	pop	{r4, pc}
 800a40a:	4602      	mov	r2, r0
 800a40c:	e7f7      	b.n	800a3fe <_calloc_r+0x3e>
 800a40e:	2100      	movs	r1, #0
 800a410:	f7fa f80e 	bl	8004430 <memset>
 800a414:	4620      	mov	r0, r4
 800a416:	bd10      	pop	{r4, pc}
 800a418:	f100 0208 	add.w	r2, r0, #8
 800a41c:	e7ef      	b.n	800a3fe <_calloc_r+0x3e>
 800a41e:	bf00      	nop

0800a420 <_close_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4c07      	ldr	r4, [pc, #28]	; (800a440 <_close_r+0x20>)
 800a424:	2300      	movs	r3, #0
 800a426:	4605      	mov	r5, r0
 800a428:	4608      	mov	r0, r1
 800a42a:	6023      	str	r3, [r4, #0]
 800a42c:	f7f8 f8fc 	bl	8002628 <_close>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d000      	beq.n	800a436 <_close_r+0x16>
 800a434:	bd38      	pop	{r3, r4, r5, pc}
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d0fb      	beq.n	800a434 <_close_r+0x14>
 800a43c:	602b      	str	r3, [r5, #0]
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	20000aec 	.word	0x20000aec

0800a444 <_fclose_r>:
 800a444:	2900      	cmp	r1, #0
 800a446:	d03d      	beq.n	800a4c4 <_fclose_r+0x80>
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	4605      	mov	r5, r0
 800a44c:	460c      	mov	r4, r1
 800a44e:	b108      	cbz	r0, 800a454 <_fclose_r+0x10>
 800a450:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a452:	b37b      	cbz	r3, 800a4b4 <_fclose_r+0x70>
 800a454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a458:	b90b      	cbnz	r3, 800a45e <_fclose_r+0x1a>
 800a45a:	2000      	movs	r0, #0
 800a45c:	bd70      	pop	{r4, r5, r6, pc}
 800a45e:	4621      	mov	r1, r4
 800a460:	4628      	mov	r0, r5
 800a462:	f7fe f92f 	bl	80086c4 <__sflush_r>
 800a466:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a468:	4606      	mov	r6, r0
 800a46a:	b133      	cbz	r3, 800a47a <_fclose_r+0x36>
 800a46c:	69e1      	ldr	r1, [r4, #28]
 800a46e:	4628      	mov	r0, r5
 800a470:	4798      	blx	r3
 800a472:	2800      	cmp	r0, #0
 800a474:	bfb8      	it	lt
 800a476:	f04f 36ff 	movlt.w	r6, #4294967295
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	061b      	lsls	r3, r3, #24
 800a47e:	d41c      	bmi.n	800a4ba <_fclose_r+0x76>
 800a480:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a482:	b141      	cbz	r1, 800a496 <_fclose_r+0x52>
 800a484:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a488:	4299      	cmp	r1, r3
 800a48a:	d002      	beq.n	800a492 <_fclose_r+0x4e>
 800a48c:	4628      	mov	r0, r5
 800a48e:	f7fe faa9 	bl	80089e4 <_free_r>
 800a492:	2300      	movs	r3, #0
 800a494:	6323      	str	r3, [r4, #48]	; 0x30
 800a496:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a498:	b121      	cbz	r1, 800a4a4 <_fclose_r+0x60>
 800a49a:	4628      	mov	r0, r5
 800a49c:	f7fe faa2 	bl	80089e4 <_free_r>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	6463      	str	r3, [r4, #68]	; 0x44
 800a4a4:	f7fe fa4c 	bl	8008940 <__sfp_lock_acquire>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	81a3      	strh	r3, [r4, #12]
 800a4ac:	f7fe fa4a 	bl	8008944 <__sfp_lock_release>
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	bd70      	pop	{r4, r5, r6, pc}
 800a4b4:	f7fe fa3e 	bl	8008934 <__sinit>
 800a4b8:	e7cc      	b.n	800a454 <_fclose_r+0x10>
 800a4ba:	6921      	ldr	r1, [r4, #16]
 800a4bc:	4628      	mov	r0, r5
 800a4be:	f7fe fa91 	bl	80089e4 <_free_r>
 800a4c2:	e7dd      	b.n	800a480 <_fclose_r+0x3c>
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	4770      	bx	lr

0800a4c8 <__fputwc>:
 800a4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4cc:	b082      	sub	sp, #8
 800a4ce:	4680      	mov	r8, r0
 800a4d0:	4689      	mov	r9, r1
 800a4d2:	4614      	mov	r4, r2
 800a4d4:	f7fe fd1a 	bl	8008f0c <__locale_mb_cur_max>
 800a4d8:	2801      	cmp	r0, #1
 800a4da:	d033      	beq.n	800a544 <__fputwc+0x7c>
 800a4dc:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800a4e0:	464a      	mov	r2, r9
 800a4e2:	a901      	add	r1, sp, #4
 800a4e4:	4640      	mov	r0, r8
 800a4e6:	f000 f8f7 	bl	800a6d8 <_wcrtomb_r>
 800a4ea:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a4ee:	4682      	mov	sl, r0
 800a4f0:	d021      	beq.n	800a536 <__fputwc+0x6e>
 800a4f2:	b388      	cbz	r0, 800a558 <__fputwc+0x90>
 800a4f4:	f89d 6004 	ldrb.w	r6, [sp, #4]
 800a4f8:	2500      	movs	r5, #0
 800a4fa:	e008      	b.n	800a50e <__fputwc+0x46>
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	6022      	str	r2, [r4, #0]
 800a502:	701e      	strb	r6, [r3, #0]
 800a504:	3501      	adds	r5, #1
 800a506:	4555      	cmp	r5, sl
 800a508:	d226      	bcs.n	800a558 <__fputwc+0x90>
 800a50a:	ab01      	add	r3, sp, #4
 800a50c:	5d5e      	ldrb	r6, [r3, r5]
 800a50e:	68a3      	ldr	r3, [r4, #8]
 800a510:	3b01      	subs	r3, #1
 800a512:	2b00      	cmp	r3, #0
 800a514:	60a3      	str	r3, [r4, #8]
 800a516:	daf1      	bge.n	800a4fc <__fputwc+0x34>
 800a518:	69a7      	ldr	r7, [r4, #24]
 800a51a:	42bb      	cmp	r3, r7
 800a51c:	4631      	mov	r1, r6
 800a51e:	4622      	mov	r2, r4
 800a520:	4640      	mov	r0, r8
 800a522:	db01      	blt.n	800a528 <__fputwc+0x60>
 800a524:	2e0a      	cmp	r6, #10
 800a526:	d1e9      	bne.n	800a4fc <__fputwc+0x34>
 800a528:	f000 f880 	bl	800a62c <__swbuf_r>
 800a52c:	1c43      	adds	r3, r0, #1
 800a52e:	d1e9      	bne.n	800a504 <__fputwc+0x3c>
 800a530:	b002      	add	sp, #8
 800a532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a536:	89a3      	ldrh	r3, [r4, #12]
 800a538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a53c:	81a3      	strh	r3, [r4, #12]
 800a53e:	b002      	add	sp, #8
 800a540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a544:	f109 33ff 	add.w	r3, r9, #4294967295
 800a548:	2bfe      	cmp	r3, #254	; 0xfe
 800a54a:	d8c7      	bhi.n	800a4dc <__fputwc+0x14>
 800a54c:	fa5f f689 	uxtb.w	r6, r9
 800a550:	4682      	mov	sl, r0
 800a552:	f88d 6004 	strb.w	r6, [sp, #4]
 800a556:	e7cf      	b.n	800a4f8 <__fputwc+0x30>
 800a558:	4648      	mov	r0, r9
 800a55a:	b002      	add	sp, #8
 800a55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a560 <_fputwc_r>:
 800a560:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800a564:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800a568:	d10b      	bne.n	800a582 <_fputwc_r+0x22>
 800a56a:	b410      	push	{r4}
 800a56c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800a56e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a572:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800a576:	6654      	str	r4, [r2, #100]	; 0x64
 800a578:	8193      	strh	r3, [r2, #12]
 800a57a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a57e:	f7ff bfa3 	b.w	800a4c8 <__fputwc>
 800a582:	f7ff bfa1 	b.w	800a4c8 <__fputwc>
 800a586:	bf00      	nop

0800a588 <_fstat_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	460b      	mov	r3, r1
 800a58c:	4c07      	ldr	r4, [pc, #28]	; (800a5ac <_fstat_r+0x24>)
 800a58e:	4605      	mov	r5, r0
 800a590:	4611      	mov	r1, r2
 800a592:	4618      	mov	r0, r3
 800a594:	2300      	movs	r3, #0
 800a596:	6023      	str	r3, [r4, #0]
 800a598:	f7f8 f850 	bl	800263c <_fstat>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d000      	beq.n	800a5a2 <_fstat_r+0x1a>
 800a5a0:	bd38      	pop	{r3, r4, r5, pc}
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d0fb      	beq.n	800a5a0 <_fstat_r+0x18>
 800a5a8:	602b      	str	r3, [r5, #0]
 800a5aa:	bd38      	pop	{r3, r4, r5, pc}
 800a5ac:	20000aec 	.word	0x20000aec

0800a5b0 <_isatty_r>:
 800a5b0:	b538      	push	{r3, r4, r5, lr}
 800a5b2:	4c07      	ldr	r4, [pc, #28]	; (800a5d0 <_isatty_r+0x20>)
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	4605      	mov	r5, r0
 800a5b8:	4608      	mov	r0, r1
 800a5ba:	6023      	str	r3, [r4, #0]
 800a5bc:	f7f8 f892 	bl	80026e4 <_isatty>
 800a5c0:	1c43      	adds	r3, r0, #1
 800a5c2:	d000      	beq.n	800a5c6 <_isatty_r+0x16>
 800a5c4:	bd38      	pop	{r3, r4, r5, pc}
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d0fb      	beq.n	800a5c4 <_isatty_r+0x14>
 800a5cc:	602b      	str	r3, [r5, #0]
 800a5ce:	bd38      	pop	{r3, r4, r5, pc}
 800a5d0:	20000aec 	.word	0x20000aec

0800a5d4 <_lseek_r>:
 800a5d4:	b570      	push	{r4, r5, r6, lr}
 800a5d6:	460d      	mov	r5, r1
 800a5d8:	4c08      	ldr	r4, [pc, #32]	; (800a5fc <_lseek_r+0x28>)
 800a5da:	4611      	mov	r1, r2
 800a5dc:	4606      	mov	r6, r0
 800a5de:	461a      	mov	r2, r3
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	f7f8 f803 	bl	80025f0 <_lseek>
 800a5ea:	1c43      	adds	r3, r0, #1
 800a5ec:	d000      	beq.n	800a5f0 <_lseek_r+0x1c>
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d0fb      	beq.n	800a5ee <_lseek_r+0x1a>
 800a5f6:	6033      	str	r3, [r6, #0]
 800a5f8:	bd70      	pop	{r4, r5, r6, pc}
 800a5fa:	bf00      	nop
 800a5fc:	20000aec 	.word	0x20000aec

0800a600 <_read_r>:
 800a600:	b570      	push	{r4, r5, r6, lr}
 800a602:	460d      	mov	r5, r1
 800a604:	4c08      	ldr	r4, [pc, #32]	; (800a628 <_read_r+0x28>)
 800a606:	4611      	mov	r1, r2
 800a608:	4606      	mov	r6, r0
 800a60a:	461a      	mov	r2, r3
 800a60c:	4628      	mov	r0, r5
 800a60e:	2300      	movs	r3, #0
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	f7f7 fffb 	bl	800260c <_read>
 800a616:	1c43      	adds	r3, r0, #1
 800a618:	d000      	beq.n	800a61c <_read_r+0x1c>
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d0fb      	beq.n	800a61a <_read_r+0x1a>
 800a622:	6033      	str	r3, [r6, #0]
 800a624:	bd70      	pop	{r4, r5, r6, pc}
 800a626:	bf00      	nop
 800a628:	20000aec 	.word	0x20000aec

0800a62c <__swbuf_r>:
 800a62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62e:	460d      	mov	r5, r1
 800a630:	4614      	mov	r4, r2
 800a632:	4606      	mov	r6, r0
 800a634:	b110      	cbz	r0, 800a63c <__swbuf_r+0x10>
 800a636:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d04a      	beq.n	800a6d2 <__swbuf_r+0xa6>
 800a63c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a640:	69a3      	ldr	r3, [r4, #24]
 800a642:	60a3      	str	r3, [r4, #8]
 800a644:	b291      	uxth	r1, r2
 800a646:	0708      	lsls	r0, r1, #28
 800a648:	d538      	bpl.n	800a6bc <__swbuf_r+0x90>
 800a64a:	6923      	ldr	r3, [r4, #16]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d035      	beq.n	800a6bc <__swbuf_r+0x90>
 800a650:	0489      	lsls	r1, r1, #18
 800a652:	b2ef      	uxtb	r7, r5
 800a654:	d515      	bpl.n	800a682 <__swbuf_r+0x56>
 800a656:	6822      	ldr	r2, [r4, #0]
 800a658:	6961      	ldr	r1, [r4, #20]
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	428b      	cmp	r3, r1
 800a65e:	da1c      	bge.n	800a69a <__swbuf_r+0x6e>
 800a660:	3301      	adds	r3, #1
 800a662:	68a1      	ldr	r1, [r4, #8]
 800a664:	1c50      	adds	r0, r2, #1
 800a666:	3901      	subs	r1, #1
 800a668:	60a1      	str	r1, [r4, #8]
 800a66a:	6020      	str	r0, [r4, #0]
 800a66c:	7015      	strb	r5, [r2, #0]
 800a66e:	6962      	ldr	r2, [r4, #20]
 800a670:	429a      	cmp	r2, r3
 800a672:	d01a      	beq.n	800a6aa <__swbuf_r+0x7e>
 800a674:	89a3      	ldrh	r3, [r4, #12]
 800a676:	07db      	lsls	r3, r3, #31
 800a678:	d501      	bpl.n	800a67e <__swbuf_r+0x52>
 800a67a:	2f0a      	cmp	r7, #10
 800a67c:	d015      	beq.n	800a6aa <__swbuf_r+0x7e>
 800a67e:	4638      	mov	r0, r7
 800a680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a682:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a688:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800a68c:	81a2      	strh	r2, [r4, #12]
 800a68e:	6822      	ldr	r2, [r4, #0]
 800a690:	6661      	str	r1, [r4, #100]	; 0x64
 800a692:	6961      	ldr	r1, [r4, #20]
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	428b      	cmp	r3, r1
 800a698:	dbe2      	blt.n	800a660 <__swbuf_r+0x34>
 800a69a:	4621      	mov	r1, r4
 800a69c:	4630      	mov	r0, r6
 800a69e:	f7fe f8b5 	bl	800880c <_fflush_r>
 800a6a2:	b940      	cbnz	r0, 800a6b6 <__swbuf_r+0x8a>
 800a6a4:	6822      	ldr	r2, [r4, #0]
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e7db      	b.n	800a662 <__swbuf_r+0x36>
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f7fe f8ad 	bl	800880c <_fflush_r>
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	d0e3      	beq.n	800a67e <__swbuf_r+0x52>
 800a6b6:	f04f 37ff 	mov.w	r7, #4294967295
 800a6ba:	e7e0      	b.n	800a67e <__swbuf_r+0x52>
 800a6bc:	4621      	mov	r1, r4
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f7fc fff2 	bl	80076a8 <__swsetup_r>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d1f6      	bne.n	800a6b6 <__swbuf_r+0x8a>
 800a6c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6cc:	6923      	ldr	r3, [r4, #16]
 800a6ce:	b291      	uxth	r1, r2
 800a6d0:	e7be      	b.n	800a650 <__swbuf_r+0x24>
 800a6d2:	f7fe f92f 	bl	8008934 <__sinit>
 800a6d6:	e7b1      	b.n	800a63c <__swbuf_r+0x10>

0800a6d8 <_wcrtomb_r>:
 800a6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6da:	4606      	mov	r6, r0
 800a6dc:	b085      	sub	sp, #20
 800a6de:	461f      	mov	r7, r3
 800a6e0:	b189      	cbz	r1, 800a706 <_wcrtomb_r+0x2e>
 800a6e2:	4c10      	ldr	r4, [pc, #64]	; (800a724 <_wcrtomb_r+0x4c>)
 800a6e4:	4d10      	ldr	r5, [pc, #64]	; (800a728 <_wcrtomb_r+0x50>)
 800a6e6:	6824      	ldr	r4, [r4, #0]
 800a6e8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800a6ea:	2c00      	cmp	r4, #0
 800a6ec:	bf08      	it	eq
 800a6ee:	462c      	moveq	r4, r5
 800a6f0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800a6f4:	47a0      	blx	r4
 800a6f6:	1c43      	adds	r3, r0, #1
 800a6f8:	d103      	bne.n	800a702 <_wcrtomb_r+0x2a>
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	238a      	movs	r3, #138	; 0x8a
 800a6fe:	603a      	str	r2, [r7, #0]
 800a700:	6033      	str	r3, [r6, #0]
 800a702:	b005      	add	sp, #20
 800a704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a706:	460c      	mov	r4, r1
 800a708:	4906      	ldr	r1, [pc, #24]	; (800a724 <_wcrtomb_r+0x4c>)
 800a70a:	4a07      	ldr	r2, [pc, #28]	; (800a728 <_wcrtomb_r+0x50>)
 800a70c:	6809      	ldr	r1, [r1, #0]
 800a70e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a710:	2900      	cmp	r1, #0
 800a712:	bf08      	it	eq
 800a714:	4611      	moveq	r1, r2
 800a716:	4622      	mov	r2, r4
 800a718:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 800a71c:	a901      	add	r1, sp, #4
 800a71e:	47a0      	blx	r4
 800a720:	e7e9      	b.n	800a6f6 <_wcrtomb_r+0x1e>
 800a722:	bf00      	nop
 800a724:	20000468 	.word	0x20000468
 800a728:	2000046c 	.word	0x2000046c

0800a72c <__aeabi_uldivmod>:
 800a72c:	b953      	cbnz	r3, 800a744 <__aeabi_uldivmod+0x18>
 800a72e:	b94a      	cbnz	r2, 800a744 <__aeabi_uldivmod+0x18>
 800a730:	2900      	cmp	r1, #0
 800a732:	bf08      	it	eq
 800a734:	2800      	cmpeq	r0, #0
 800a736:	bf1c      	itt	ne
 800a738:	f04f 31ff 	movne.w	r1, #4294967295
 800a73c:	f04f 30ff 	movne.w	r0, #4294967295
 800a740:	f000 b97e 	b.w	800aa40 <__aeabi_idiv0>
 800a744:	f1ad 0c08 	sub.w	ip, sp, #8
 800a748:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800a74c:	f000 f806 	bl	800a75c <__udivmoddi4>
 800a750:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a754:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a758:	b004      	add	sp, #16
 800a75a:	4770      	bx	lr

0800a75c <__udivmoddi4>:
 800a75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a760:	468c      	mov	ip, r1
 800a762:	460e      	mov	r6, r1
 800a764:	4604      	mov	r4, r0
 800a766:	9d08      	ldr	r5, [sp, #32]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d150      	bne.n	800a80e <__udivmoddi4+0xb2>
 800a76c:	428a      	cmp	r2, r1
 800a76e:	4617      	mov	r7, r2
 800a770:	d96c      	bls.n	800a84c <__udivmoddi4+0xf0>
 800a772:	fab2 fe82 	clz	lr, r2
 800a776:	f1be 0f00 	cmp.w	lr, #0
 800a77a:	d00b      	beq.n	800a794 <__udivmoddi4+0x38>
 800a77c:	f1ce 0420 	rsb	r4, lr, #32
 800a780:	fa20 f404 	lsr.w	r4, r0, r4
 800a784:	fa01 f60e 	lsl.w	r6, r1, lr
 800a788:	ea44 0c06 	orr.w	ip, r4, r6
 800a78c:	fa02 f70e 	lsl.w	r7, r2, lr
 800a790:	fa00 f40e 	lsl.w	r4, r0, lr
 800a794:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800a798:	0c22      	lsrs	r2, r4, #16
 800a79a:	fbbc f0f9 	udiv	r0, ip, r9
 800a79e:	fa1f f887 	uxth.w	r8, r7
 800a7a2:	fb09 c610 	mls	r6, r9, r0, ip
 800a7a6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a7aa:	fb00 f308 	mul.w	r3, r0, r8
 800a7ae:	42b3      	cmp	r3, r6
 800a7b0:	d909      	bls.n	800a7c6 <__udivmoddi4+0x6a>
 800a7b2:	19f6      	adds	r6, r6, r7
 800a7b4:	f100 32ff 	add.w	r2, r0, #4294967295
 800a7b8:	f080 8122 	bcs.w	800aa00 <__udivmoddi4+0x2a4>
 800a7bc:	42b3      	cmp	r3, r6
 800a7be:	f240 811f 	bls.w	800aa00 <__udivmoddi4+0x2a4>
 800a7c2:	3802      	subs	r0, #2
 800a7c4:	443e      	add	r6, r7
 800a7c6:	1af6      	subs	r6, r6, r3
 800a7c8:	b2a2      	uxth	r2, r4
 800a7ca:	fbb6 f3f9 	udiv	r3, r6, r9
 800a7ce:	fb09 6613 	mls	r6, r9, r3, r6
 800a7d2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800a7d6:	fb03 f808 	mul.w	r8, r3, r8
 800a7da:	45a0      	cmp	r8, r4
 800a7dc:	d909      	bls.n	800a7f2 <__udivmoddi4+0x96>
 800a7de:	19e4      	adds	r4, r4, r7
 800a7e0:	f103 32ff 	add.w	r2, r3, #4294967295
 800a7e4:	f080 810a 	bcs.w	800a9fc <__udivmoddi4+0x2a0>
 800a7e8:	45a0      	cmp	r8, r4
 800a7ea:	f240 8107 	bls.w	800a9fc <__udivmoddi4+0x2a0>
 800a7ee:	3b02      	subs	r3, #2
 800a7f0:	443c      	add	r4, r7
 800a7f2:	ebc8 0404 	rsb	r4, r8, r4
 800a7f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	2d00      	cmp	r5, #0
 800a7fe:	d062      	beq.n	800a8c6 <__udivmoddi4+0x16a>
 800a800:	fa24 f40e 	lsr.w	r4, r4, lr
 800a804:	2300      	movs	r3, #0
 800a806:	602c      	str	r4, [r5, #0]
 800a808:	606b      	str	r3, [r5, #4]
 800a80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80e:	428b      	cmp	r3, r1
 800a810:	d907      	bls.n	800a822 <__udivmoddi4+0xc6>
 800a812:	2d00      	cmp	r5, #0
 800a814:	d055      	beq.n	800a8c2 <__udivmoddi4+0x166>
 800a816:	2100      	movs	r1, #0
 800a818:	e885 0041 	stmia.w	r5, {r0, r6}
 800a81c:	4608      	mov	r0, r1
 800a81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a822:	fab3 f183 	clz	r1, r3
 800a826:	2900      	cmp	r1, #0
 800a828:	f040 8090 	bne.w	800a94c <__udivmoddi4+0x1f0>
 800a82c:	42b3      	cmp	r3, r6
 800a82e:	d302      	bcc.n	800a836 <__udivmoddi4+0xda>
 800a830:	4282      	cmp	r2, r0
 800a832:	f200 80f8 	bhi.w	800aa26 <__udivmoddi4+0x2ca>
 800a836:	1a84      	subs	r4, r0, r2
 800a838:	eb66 0603 	sbc.w	r6, r6, r3
 800a83c:	2001      	movs	r0, #1
 800a83e:	46b4      	mov	ip, r6
 800a840:	2d00      	cmp	r5, #0
 800a842:	d040      	beq.n	800a8c6 <__udivmoddi4+0x16a>
 800a844:	e885 1010 	stmia.w	r5, {r4, ip}
 800a848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a84c:	b912      	cbnz	r2, 800a854 <__udivmoddi4+0xf8>
 800a84e:	2701      	movs	r7, #1
 800a850:	fbb7 f7f2 	udiv	r7, r7, r2
 800a854:	fab7 fe87 	clz	lr, r7
 800a858:	f1be 0f00 	cmp.w	lr, #0
 800a85c:	d135      	bne.n	800a8ca <__udivmoddi4+0x16e>
 800a85e:	1bf3      	subs	r3, r6, r7
 800a860:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800a864:	fa1f fc87 	uxth.w	ip, r7
 800a868:	2101      	movs	r1, #1
 800a86a:	fbb3 f0f8 	udiv	r0, r3, r8
 800a86e:	0c22      	lsrs	r2, r4, #16
 800a870:	fb08 3610 	mls	r6, r8, r0, r3
 800a874:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a878:	fb0c f300 	mul.w	r3, ip, r0
 800a87c:	42b3      	cmp	r3, r6
 800a87e:	d907      	bls.n	800a890 <__udivmoddi4+0x134>
 800a880:	19f6      	adds	r6, r6, r7
 800a882:	f100 32ff 	add.w	r2, r0, #4294967295
 800a886:	d202      	bcs.n	800a88e <__udivmoddi4+0x132>
 800a888:	42b3      	cmp	r3, r6
 800a88a:	f200 80ce 	bhi.w	800aa2a <__udivmoddi4+0x2ce>
 800a88e:	4610      	mov	r0, r2
 800a890:	1af6      	subs	r6, r6, r3
 800a892:	b2a2      	uxth	r2, r4
 800a894:	fbb6 f3f8 	udiv	r3, r6, r8
 800a898:	fb08 6613 	mls	r6, r8, r3, r6
 800a89c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800a8a0:	fb0c fc03 	mul.w	ip, ip, r3
 800a8a4:	45a4      	cmp	ip, r4
 800a8a6:	d907      	bls.n	800a8b8 <__udivmoddi4+0x15c>
 800a8a8:	19e4      	adds	r4, r4, r7
 800a8aa:	f103 32ff 	add.w	r2, r3, #4294967295
 800a8ae:	d202      	bcs.n	800a8b6 <__udivmoddi4+0x15a>
 800a8b0:	45a4      	cmp	ip, r4
 800a8b2:	f200 80b5 	bhi.w	800aa20 <__udivmoddi4+0x2c4>
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	ebcc 0404 	rsb	r4, ip, r4
 800a8bc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a8c0:	e79c      	b.n	800a7fc <__udivmoddi4+0xa0>
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ca:	f1ce 0120 	rsb	r1, lr, #32
 800a8ce:	fa06 f30e 	lsl.w	r3, r6, lr
 800a8d2:	fa07 f70e 	lsl.w	r7, r7, lr
 800a8d6:	fa20 f901 	lsr.w	r9, r0, r1
 800a8da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800a8de:	40ce      	lsrs	r6, r1
 800a8e0:	ea49 0903 	orr.w	r9, r9, r3
 800a8e4:	fbb6 faf8 	udiv	sl, r6, r8
 800a8e8:	ea4f 4419 	mov.w	r4, r9, lsr #16
 800a8ec:	fb08 661a 	mls	r6, r8, sl, r6
 800a8f0:	fa1f fc87 	uxth.w	ip, r7
 800a8f4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800a8f8:	fb0a f20c 	mul.w	r2, sl, ip
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	fa00 f40e 	lsl.w	r4, r0, lr
 800a902:	d90a      	bls.n	800a91a <__udivmoddi4+0x1be>
 800a904:	19db      	adds	r3, r3, r7
 800a906:	f10a 31ff 	add.w	r1, sl, #4294967295
 800a90a:	f080 8087 	bcs.w	800aa1c <__udivmoddi4+0x2c0>
 800a90e:	429a      	cmp	r2, r3
 800a910:	f240 8084 	bls.w	800aa1c <__udivmoddi4+0x2c0>
 800a914:	f1aa 0a02 	sub.w	sl, sl, #2
 800a918:	443b      	add	r3, r7
 800a91a:	1a9b      	subs	r3, r3, r2
 800a91c:	fa1f f989 	uxth.w	r9, r9
 800a920:	fbb3 f1f8 	udiv	r1, r3, r8
 800a924:	fb08 3311 	mls	r3, r8, r1, r3
 800a928:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800a92c:	fb01 f60c 	mul.w	r6, r1, ip
 800a930:	429e      	cmp	r6, r3
 800a932:	d907      	bls.n	800a944 <__udivmoddi4+0x1e8>
 800a934:	19db      	adds	r3, r3, r7
 800a936:	f101 32ff 	add.w	r2, r1, #4294967295
 800a93a:	d26b      	bcs.n	800aa14 <__udivmoddi4+0x2b8>
 800a93c:	429e      	cmp	r6, r3
 800a93e:	d969      	bls.n	800aa14 <__udivmoddi4+0x2b8>
 800a940:	3902      	subs	r1, #2
 800a942:	443b      	add	r3, r7
 800a944:	1b9b      	subs	r3, r3, r6
 800a946:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a94a:	e78e      	b.n	800a86a <__udivmoddi4+0x10e>
 800a94c:	f1c1 0e20 	rsb	lr, r1, #32
 800a950:	fa22 f40e 	lsr.w	r4, r2, lr
 800a954:	408b      	lsls	r3, r1
 800a956:	4323      	orrs	r3, r4
 800a958:	fa20 f70e 	lsr.w	r7, r0, lr
 800a95c:	fa06 f401 	lsl.w	r4, r6, r1
 800a960:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800a964:	fa26 f60e 	lsr.w	r6, r6, lr
 800a968:	433c      	orrs	r4, r7
 800a96a:	fbb6 f9fc 	udiv	r9, r6, ip
 800a96e:	0c27      	lsrs	r7, r4, #16
 800a970:	fb0c 6619 	mls	r6, ip, r9, r6
 800a974:	fa1f f883 	uxth.w	r8, r3
 800a978:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800a97c:	fb09 f708 	mul.w	r7, r9, r8
 800a980:	42b7      	cmp	r7, r6
 800a982:	fa02 f201 	lsl.w	r2, r2, r1
 800a986:	fa00 fa01 	lsl.w	sl, r0, r1
 800a98a:	d908      	bls.n	800a99e <__udivmoddi4+0x242>
 800a98c:	18f6      	adds	r6, r6, r3
 800a98e:	f109 30ff 	add.w	r0, r9, #4294967295
 800a992:	d241      	bcs.n	800aa18 <__udivmoddi4+0x2bc>
 800a994:	42b7      	cmp	r7, r6
 800a996:	d93f      	bls.n	800aa18 <__udivmoddi4+0x2bc>
 800a998:	f1a9 0902 	sub.w	r9, r9, #2
 800a99c:	441e      	add	r6, r3
 800a99e:	1bf6      	subs	r6, r6, r7
 800a9a0:	b2a0      	uxth	r0, r4
 800a9a2:	fbb6 f4fc 	udiv	r4, r6, ip
 800a9a6:	fb0c 6614 	mls	r6, ip, r4, r6
 800a9aa:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 800a9ae:	fb04 f808 	mul.w	r8, r4, r8
 800a9b2:	45b8      	cmp	r8, r7
 800a9b4:	d907      	bls.n	800a9c6 <__udivmoddi4+0x26a>
 800a9b6:	18ff      	adds	r7, r7, r3
 800a9b8:	f104 30ff 	add.w	r0, r4, #4294967295
 800a9bc:	d228      	bcs.n	800aa10 <__udivmoddi4+0x2b4>
 800a9be:	45b8      	cmp	r8, r7
 800a9c0:	d926      	bls.n	800aa10 <__udivmoddi4+0x2b4>
 800a9c2:	3c02      	subs	r4, #2
 800a9c4:	441f      	add	r7, r3
 800a9c6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800a9ca:	ebc8 0707 	rsb	r7, r8, r7
 800a9ce:	fba0 8902 	umull	r8, r9, r0, r2
 800a9d2:	454f      	cmp	r7, r9
 800a9d4:	4644      	mov	r4, r8
 800a9d6:	464e      	mov	r6, r9
 800a9d8:	d314      	bcc.n	800aa04 <__udivmoddi4+0x2a8>
 800a9da:	d029      	beq.n	800aa30 <__udivmoddi4+0x2d4>
 800a9dc:	b365      	cbz	r5, 800aa38 <__udivmoddi4+0x2dc>
 800a9de:	ebba 0304 	subs.w	r3, sl, r4
 800a9e2:	eb67 0706 	sbc.w	r7, r7, r6
 800a9e6:	fa07 fe0e 	lsl.w	lr, r7, lr
 800a9ea:	40cb      	lsrs	r3, r1
 800a9ec:	40cf      	lsrs	r7, r1
 800a9ee:	ea4e 0303 	orr.w	r3, lr, r3
 800a9f2:	e885 0088 	stmia.w	r5, {r3, r7}
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	e6f8      	b.n	800a7f2 <__udivmoddi4+0x96>
 800aa00:	4610      	mov	r0, r2
 800aa02:	e6e0      	b.n	800a7c6 <__udivmoddi4+0x6a>
 800aa04:	ebb8 0402 	subs.w	r4, r8, r2
 800aa08:	eb69 0603 	sbc.w	r6, r9, r3
 800aa0c:	3801      	subs	r0, #1
 800aa0e:	e7e5      	b.n	800a9dc <__udivmoddi4+0x280>
 800aa10:	4604      	mov	r4, r0
 800aa12:	e7d8      	b.n	800a9c6 <__udivmoddi4+0x26a>
 800aa14:	4611      	mov	r1, r2
 800aa16:	e795      	b.n	800a944 <__udivmoddi4+0x1e8>
 800aa18:	4681      	mov	r9, r0
 800aa1a:	e7c0      	b.n	800a99e <__udivmoddi4+0x242>
 800aa1c:	468a      	mov	sl, r1
 800aa1e:	e77c      	b.n	800a91a <__udivmoddi4+0x1be>
 800aa20:	3b02      	subs	r3, #2
 800aa22:	443c      	add	r4, r7
 800aa24:	e748      	b.n	800a8b8 <__udivmoddi4+0x15c>
 800aa26:	4608      	mov	r0, r1
 800aa28:	e70a      	b.n	800a840 <__udivmoddi4+0xe4>
 800aa2a:	3802      	subs	r0, #2
 800aa2c:	443e      	add	r6, r7
 800aa2e:	e72f      	b.n	800a890 <__udivmoddi4+0x134>
 800aa30:	45c2      	cmp	sl, r8
 800aa32:	d3e7      	bcc.n	800aa04 <__udivmoddi4+0x2a8>
 800aa34:	463e      	mov	r6, r7
 800aa36:	e7d1      	b.n	800a9dc <__udivmoddi4+0x280>
 800aa38:	4629      	mov	r1, r5
 800aa3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa3e:	bf00      	nop

0800aa40 <__aeabi_idiv0>:
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	74747562 	.word	0x74747562
 800aa48:	31206e6f 	.word	0x31206e6f
 800aa4c:	65727020 	.word	0x65727020
 800aa50:	64657373 	.word	0x64657373
 800aa54:	00000000 	.word	0x00000000
 800aa58:	74747562 	.word	0x74747562
 800aa5c:	32206e6f 	.word	0x32206e6f
 800aa60:	65727020 	.word	0x65727020
 800aa64:	64657373 	.word	0x64657373
 800aa68:	00000000 	.word	0x00000000
 800aa6c:	41545323 	.word	0x41545323
 800aa70:	3031252c 	.word	0x3031252c
 800aa74:	252c756c 	.word	0x252c756c
 800aa78:	252c6433 	.word	0x252c6433
 800aa7c:	756c3031 	.word	0x756c3031
 800aa80:	00000a24 	.word	0x00000a24
 800aa84:	646e6573 	.word	0x646e6573
 800aa88:	0a732520 	.word	0x0a732520
 800aa8c:	00000000 	.word	0x00000000
 800aa90:	00007325 	.word	0x00007325
 800aa94:	000a7325 	.word	0x000a7325
 800aa98:	646e6573 	.word	0x646e6573
 800aa9c:	00732520 	.word	0x00732520
 800aaa0:	36257325 	.word	0x36257325
 800aaa4:	36252c64 	.word	0x36252c64
 800aaa8:	36252c64 	.word	0x36252c64
 800aaac:	000a2464 	.word	0x000a2464
 800aab0:	58535523 	.word	0x58535523
 800aab4:	5523002c 	.word	0x5523002c
 800aab8:	002c5844 	.word	0x002c5844
 800aabc:	58534423 	.word	0x58534423
 800aac0:	4423002c 	.word	0x4423002c
 800aac4:	002c5844 	.word	0x002c5844
 800aac8:	504f5423 	.word	0x504f5423
 800aacc:	4223002c 	.word	0x4223002c
 800aad0:	002c544f 	.word	0x002c544f
 800aad4:	58585823 	.word	0x58585823
 800aad8:	4623002c 	.word	0x4623002c
 800aadc:	002c4c41 	.word	0x002c4c41
 800aae0:	54554223 	.word	0x54554223
 800aae4:	0024312c 	.word	0x0024312c
 800aae8:	54554223 	.word	0x54554223
 800aaec:	0024322c 	.word	0x0024322c
 800aaf0:	3353494c 	.word	0x3353494c
 800aaf4:	535f4844 	.word	0x535f4844
 800aaf8:	444f7465 	.word	0x444f7465
 800aafc:	6f642052 	.word	0x6f642052
 800ab00:	2e2e656e 	.word	0x2e2e656e
 800ab04:	0000002e 	.word	0x0000002e
 800ab08:	3353494c 	.word	0x3353494c
 800ab0c:	535f4844 	.word	0x535f4844
 800ab10:	6f4d7465 	.word	0x6f4d7465
 800ab14:	64206564 	.word	0x64206564
 800ab18:	2e656e6f 	.word	0x2e656e6f
 800ab1c:	00002e2e 	.word	0x00002e2e
 800ab20:	3353494c 	.word	0x3353494c
 800ab24:	535f4844 	.word	0x535f4844
 800ab28:	75467465 	.word	0x75467465
 800ab2c:	63536c6c 	.word	0x63536c6c
 800ab30:	20656c61 	.word	0x20656c61
 800ab34:	656e6f64 	.word	0x656e6f64
 800ab38:	002e2e2e 	.word	0x002e2e2e
 800ab3c:	3353494c 	.word	0x3353494c
 800ab40:	535f4844 	.word	0x535f4844
 800ab44:	78417465 	.word	0x78417465
 800ab48:	64207369 	.word	0x64207369
 800ab4c:	2e656e6f 	.word	0x2e656e6f
 800ab50:	00002e2e 	.word	0x00002e2e
 800ab54:	3353494c 	.word	0x3353494c
 800ab58:	535f4844 	.word	0x535f4844
 800ab5c:	6e497465 	.word	0x6e497465
 800ab60:	68543174 	.word	0x68543174
 800ab64:	68737265 	.word	0x68737265
 800ab68:	20646c6f 	.word	0x20646c6f
 800ab6c:	656e6f64 	.word	0x656e6f64
 800ab70:	002e2e2e 	.word	0x002e2e2e
 800ab74:	3353494c 	.word	0x3353494c
 800ab78:	535f4844 	.word	0x535f4844
 800ab7c:	6e497465 	.word	0x6e497465
 800ab80:	6e6f4374 	.word	0x6e6f4374
 800ab84:	75676966 	.word	0x75676966
 800ab88:	69746172 	.word	0x69746172
 800ab8c:	64206e6f 	.word	0x64206e6f
 800ab90:	2e656e6f 	.word	0x2e656e6f
 800ab94:	00002e2e 	.word	0x00002e2e
 800ab98:	3353494c 	.word	0x3353494c
 800ab9c:	535f4844 	.word	0x535f4844
 800aba0:	6e497465 	.word	0x6e497465
 800aba4:	646f4d74 	.word	0x646f4d74
 800aba8:	6f642065 	.word	0x6f642065
 800abac:	2e2e656e 	.word	0x2e2e656e
 800abb0:	0000002e 	.word	0x0000002e
 800abb4:	20433249 	.word	0x20433249
 800abb8:	74696e69 	.word	0x74696e69
 800abbc:	6e6f6420 	.word	0x6e6f6420
 800abc0:	2e2e2e65 	.word	0x2e2e2e65
 800abc4:	00000000 	.word	0x00000000
 800abc8:	6f727245 	.word	0x6f727245
 800abcc:	32492072 	.word	0x32492072
 800abd0:	6e692043 	.word	0x6e692043
 800abd4:	202c7469 	.word	0x202c7469
 800abd8:	72746572 	.word	0x72746572
 800abdc:	2e2e2e79 	.word	0x2e2e2e79
 800abe0:	00000000 	.word	0x00000000
 800abe4:	6f727265 	.word	0x6f727265
 800abe8:	65632072 	.word	0x65632072
 800abec:	7265746e 	.word	0x7265746e
 800abf0:	20676e69 	.word	0x20676e69
 800abf4:	76726573 	.word	0x76726573
 800abf8:	2e2e2e6f 	.word	0x2e2e2e6f
 800abfc:	00000000 	.word	0x00000000
 800ac00:	55424544 	.word	0x55424544
 800ac04:	32492b47 	.word	0x32492b47
 800ac08:	41552b43 	.word	0x41552b43
 800ac0c:	502b5452 	.word	0x502b5452
 800ac10:	4c2b4d57 	.word	0x4c2b4d57
 800ac14:	422b4445 	.word	0x422b4445
 800ac18:	4f545455 	.word	0x4f545455
 800ac1c:	6e69204e 	.word	0x6e69204e
 800ac20:	64207469 	.word	0x64207469
 800ac24:	2e656e6f 	.word	0x2e656e6f
 800ac28:	00002e2e 	.word	0x00002e2e
 800ac2c:	534d454d 	.word	0x534d454d
 800ac30:	696e6920 	.word	0x696e6920
 800ac34:	6f642074 	.word	0x6f642074
 800ac38:	2e2e656e 	.word	0x2e2e656e
 800ac3c:	0000002e 	.word	0x0000002e
 800ac40:	6f727245 	.word	0x6f727245
 800ac44:	454d2072 	.word	0x454d2072
 800ac48:	6920534d 	.word	0x6920534d
 800ac4c:	2c74696e 	.word	0x2c74696e
 800ac50:	74657220 	.word	0x74657220
 800ac54:	2e2e7972 	.word	0x2e2e7972
 800ac58:	0000002e 	.word	0x0000002e
 800ac5c:	534d454d 	.word	0x534d454d
 800ac60:	6e6f6320 	.word	0x6e6f6320
 800ac64:	20676966 	.word	0x20676966
 800ac68:	656e6f64 	.word	0x656e6f64
 800ac6c:	002e2e2e 	.word	0x002e2e2e
 800ac70:	6f727245 	.word	0x6f727245
 800ac74:	454d2072 	.word	0x454d2072
 800ac78:	6320534d 	.word	0x6320534d
 800ac7c:	69666e6f 	.word	0x69666e6f
 800ac80:	72202c67 	.word	0x72202c67
 800ac84:	79727465 	.word	0x79727465
 800ac88:	002e2e2e 	.word	0x002e2e2e
 800ac8c:	6f727265 	.word	0x6f727265
 800ac90:	65722072 	.word	0x65722072
 800ac94:	76696563 	.word	0x76696563
 800ac98:	20676e69 	.word	0x20676e69
 800ac9c:	6d6f7266 	.word	0x6d6f7266
 800aca0:	52415520 	.word	0x52415520
 800aca4:	2e2e2e54 	.word	0x2e2e2e54
 800aca8:	00000000 	.word	0x00000000
 800acac:	65636572 	.word	0x65636572
 800acb0:	64657669 	.word	0x64657669
 800acb4:	0a732520 	.word	0x0a732520
 800acb8:	00000000 	.word	0x00000000
 800acbc:	4e4f4323 	.word	0x4e4f4323
 800acc0:	0000002c 	.word	0x0000002c
 800acc4:	444e4523 	.word	0x444e4523
 800acc8:	0000002c 	.word	0x0000002c
 800accc:	52455323 	.word	0x52455323
 800acd0:	0000662c 	.word	0x0000662c
 800acd4:	52455323 	.word	0x52455323
 800acd8:	00006e2c 	.word	0x00006e2c
 800acdc:	41545323 	.word	0x41545323
 800ace0:	0000002c 	.word	0x0000002c
 800ace4:	47564123 	.word	0x47564123
 800ace8:	0000612c 	.word	0x0000612c
 800acec:	47564123 	.word	0x47564123
 800acf0:	0000702c 	.word	0x0000702c
 800acf4:	51455223 	.word	0x51455223
 800acf8:	0000002c 	.word	0x0000002c
 800acfc:	00000000 	.word	0x00000000

0800ad00 <atanlo>:
 800ad00:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 800ad10:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0800ad20 <atanhi>:
 800ad20:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 800ad30:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
 800ad40:	74727173 00000000 0000000a              sqrt........

0800ad4c <zeroes.7258>:
 800ad4c:	30303030 30303030 30303030 30303030     0000000000000000
 800ad5c:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800ad6c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800ad7c:	00000000 33323130 37363534 62613938     ....0123456789ab
 800ad8c:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800ad9c:	00000030                                0...

0800ada0 <blanks.7257>:
 800ada0:	20202020 20202020 20202020 20202020                     

0800adb0 <zeroes.7273>:
 800adb0:	30303030 30303030 30303030 30303030     0000000000000000

0800adc0 <blanks.7272>:
 800adc0:	20202020 20202020 20202020 20202020                     
 800add0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800ade0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0800adf0 <__mprec_tens>:
 800adf0:	00000000 3ff00000 00000000 40240000     .......?......$@
 800ae00:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800ae10:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800ae20:	00000000 412e8480 00000000 416312d0     .......A......cA
 800ae30:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800ae40:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800ae50:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800ae60:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800ae70:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800ae80:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800ae90:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800aea0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800aeb0:	79d99db4 44ea7843                       ...yCx.D

0800aeb8 <__mprec_bigtens>:
 800aeb8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800aec8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800aed8:	7f73bf3c 75154fdd                       <.s..O.u

0800aee0 <p05.6087>:
 800aee0:	00000005 00000019 0000007d              ........}...

0800aeec <_ctype_>:
 800aeec:	20202000 20202020 28282020 20282828     .         ((((( 
 800aefc:	20202020 20202020 20202020 20202020                     
 800af0c:	10108820 10101010 10101010 10101010      ...............
 800af1c:	04040410 04040404 10040404 10101010     ................
 800af2c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800af3c:	01010101 01010101 01010101 10101010     ................
 800af4c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800af5c:	02020202 02020202 02020202 10101010     ................
 800af6c:	00000020 00000000 00000000 00000000      ...............
	...
