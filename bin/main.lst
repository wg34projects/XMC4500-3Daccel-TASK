
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	91 07 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 e1 04 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00af60 	.word	0x0c00af60
 800024c:	20000000 	.word	0x20000000
 8000250:	000009e8 	.word	0x000009e8
 8000254:	0c00b948 	.word	0x0c00b948
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00af60 	.word	0x0c00af60
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00af60 	.word	0x0c00af60
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200009e8 	.word	0x200009e8
 800027c:	00000108 	.word	0x00000108
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000294:	08002719 	.word	0x08002719
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800429d 	.word	0x0800429d
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08002381 	.word	0x08002381

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	db0b      	blt.n	80002de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c6:	4909      	ldr	r1, [pc, #36]	; (80002ec <__NVIC_EnableIRQ+0x38>)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	095b      	lsrs	r3, r3, #5
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	f002 021f 	and.w	r2, r2, #31
 80002d4:	2001      	movs	r0, #1
 80002d6:	fa00 f202 	lsl.w	r2, r0, r2
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	490d      	ldr	r1, [pc, #52]	; (800033c <__NVIC_SetPriority+0x4c>)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	0092      	lsls	r2, r2, #2
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	4909      	ldr	r1, [pc, #36]	; (8000340 <__NVIC_SetPriority+0x50>)
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f003 030f 	and.w	r3, r3, #15
 8000322:	3b04      	subs	r3, #4
 8000324:	683a      	ldr	r2, [r7, #0]
 8000326:	b2d2      	uxtb	r2, r2
 8000328:	0092      	lsls	r2, r2, #2
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
  }
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
 8000350:	4613      	mov	r3, r2
 8000352:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000354:	78f8      	ldrb	r0, [r7, #3]
 8000356:	78fb      	ldrb	r3, [r7, #3]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	3306      	adds	r3, #6
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	4413      	add	r3, r2
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000366:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000368:	431a      	orrs	r2, r3
 800036a:	6879      	ldr	r1, [r7, #4]
 800036c:	1d83      	adds	r3, r0, #6
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	440b      	add	r3, r1
 8000372:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800038c:	b2db      	uxtb	r3, r3
 800038e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000392:	b2db      	uxtb	r3, r3
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	431a      	orrs	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop

080003c8 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80003d6:	f003 0308 	and.w	r3, r3, #8
 80003da:	2b00      	cmp	r3, #0
 80003dc:	bf14      	ite	ne
 80003de:	2301      	movne	r3, #1
 80003e0:	2300      	moveq	r3, #0
 80003e2:	b2db      	uxtb	r3, r3
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003fc:	f023 030f 	bic.w	r3, r3, #15
 8000400:	f043 0202 	orr.w	r2, r3, #2
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	460b      	mov	r3, r1
 800041e:	70fb      	strb	r3, [r7, #3]
 8000420:	4613      	mov	r3, r2
 8000422:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
 8000424:	78f8      	ldrb	r0, [r7, #3]
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	3306      	adds	r3, #6
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	4413      	add	r3, r2
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	f023 0250 	bic.w	r2, r3, #80	; 0x50
 8000436:	6879      	ldr	r1, [r7, #4]
 8000438:	1d83      	adds	r3, r0, #6
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	440b      	add	r3, r1
 800043e:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000440:	78ba      	ldrb	r2, [r7, #2]
 8000442:	78fb      	ldrb	r3, [r7, #3]
 8000444:	4619      	mov	r1, r3
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f7ff ff7c 	bl	8000344 <XMC_USIC_CH_SetInputSource>
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <_init_uart0_ch0>:
    .stop_bits = 1U,
    .baudrate = 115200U
};
/****************************************************************** FUNCTIONS */
void _init_uart0_ch0()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
    /* USIC channels initialization */
    XMC_UART_CH_Init (XMC_UART0_CH0, &uart_config);
 8000458:	491c      	ldr	r1, [pc, #112]	; (80004cc <_init_uart0_ch0+0x78>)
 800045a:	481d      	ldr	r0, [pc, #116]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800045c:	f002 fbde 	bl	8002c1c <XMC_UART_CH_Init>

    XMC_UART_CH_SetInputSource (XMC_UART0_CH0, XMC_UART_CH_INPUT_RXD,
 8000460:	2201      	movs	r2, #1
 8000462:	2100      	movs	r1, #0
 8000464:	481a      	ldr	r0, [pc, #104]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000466:	f7ff ffd5 	bl	8000414 <XMC_UART_CH_SetInputSource>
    /* FIFOs initialization for both channels:
     *  8 entries for TxFIFO from point 0, LIMIT=1
     *  8 entries for RxFIFO from point 8, LIMIT=7 (SRBI is set if all 8*data have
     *                                              been received)
     *  */
    XMC_USIC_CH_TXFIFO_Configure (XMC_UART0_CH0, 0, XMC_USIC_CH_FIFO_SIZE_8WORDS, TX_FIFO_INITIAL_LIMIT);
 800046a:	2300      	movs	r3, #0
 800046c:	2203      	movs	r2, #3
 800046e:	2100      	movs	r1, #0
 8000470:	4817      	ldr	r0, [pc, #92]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000472:	f002 fefd 	bl	8003270 <XMC_USIC_CH_TXFIFO_Configure>
    XMC_USIC_CH_RXFIFO_Configure (XMC_UART0_CH0, 8, XMC_USIC_CH_FIFO_SIZE_8WORDS, RX_FIFO_INITIAL_LIMIT);
 8000476:	2300      	movs	r3, #0
 8000478:	2203      	movs	r2, #3
 800047a:	2108      	movs	r1, #8
 800047c:	4814      	ldr	r0, [pc, #80]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800047e:	f002 ff1f 	bl	80032c0 <XMC_USIC_CH_RXFIFO_Configure>

    /* Enabling events for TX FIFO and RX FIFO */
    XMC_USIC_CH_RXFIFO_EnableEvent (XMC_UART0_CH0,
 8000482:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8000486:	4812      	ldr	r0, [pc, #72]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000488:	f7ff ff8a 	bl	80003a0 <XMC_USIC_CH_RXFIFO_EnableEvent>
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE);

    /* Connecting the previously enabled events to a Service Request line number */
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	2110      	movs	r1, #16
 8000490:	480f      	ldr	r0, [pc, #60]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000492:	f002 ff3f 	bl	8003314 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2113      	movs	r1, #19
 800049a:	480d      	ldr	r0, [pc, #52]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800049c:	f002 ff3a 	bl	8003314 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>

    /* Start USIC operation as UART */
    XMC_UART_CH_Start (XMC_UART0_CH0);
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <_init_uart0_ch0+0x7c>)
 80004a2:	f7ff ffa5 	bl	80003f0 <XMC_UART_CH_Start>

    /*Initialization of the necessary ports*/
    XMC_GPIO_Init (UART_TX, &uart_tx);
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <_init_uart0_ch0+0x80>)
 80004a8:	2105      	movs	r1, #5
 80004aa:	480b      	ldr	r0, [pc, #44]	; (80004d8 <_init_uart0_ch0+0x84>)
 80004ac:	f002 faf6 	bl	8002a9c <XMC_GPIO_Init>
    XMC_GPIO_Init (UART_RX, &uart_rx);
 80004b0:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <_init_uart0_ch0+0x88>)
 80004b2:	2104      	movs	r1, #4
 80004b4:	4808      	ldr	r0, [pc, #32]	; (80004d8 <_init_uart0_ch0+0x84>)
 80004b6:	f002 faf1 	bl	8002a9c <XMC_GPIO_Init>

    /* Configuring priority and enabling NVIC IRQ for the defined service request
    line number */
    NVIC_SetPriority (USIC0_0_IRQn, 63U);
 80004ba:	213f      	movs	r1, #63	; 0x3f
 80004bc:	2054      	movs	r0, #84	; 0x54
 80004be:	f7ff ff17 	bl	80002f0 <__NVIC_SetPriority>
    NVIC_EnableIRQ (USIC0_0_IRQn);
 80004c2:	2054      	movs	r0, #84	; 0x54
 80004c4:	f7ff fef6 	bl	80002b4 <__NVIC_EnableIRQ>

    return;
 80004c8:	bf00      	nop
}
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000000c 	.word	0x2000000c
 80004d0:	40030000 	.word	0x40030000
 80004d4:	20000000 	.word	0x20000000
 80004d8:	48028100 	.word	0x48028100
 80004dc:	20000a2c 	.word	0x20000a2c

080004e0 <USIC0_0_IRQHandler>:

void USIC0_0_IRQHandler (void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	71fb      	strb	r3, [r7, #7]

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 80004ea:	e01f      	b.n	800052c <USIC0_0_IRQHandler+0x4c>
        rx_tmp = XMC_UART_CH_GetReceivedData (XMC_UART0_CH0);
 80004ec:	4816      	ldr	r0, [pc, #88]	; (8000548 <USIC0_0_IRQHandler+0x68>)
 80004ee:	f002 fc13 	bl	8002d18 <XMC_UART_CH_GetReceivedData>
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]

        if ( (rx_tmp != STRING_CR) && (!str_available)) {
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b0d      	cmp	r3, #13
 80004fa:	d011      	beq.n	8000520 <USIC0_0_IRQHandler+0x40>
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <USIC0_0_IRQHandler+0x6c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	f083 0301 	eor.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d00a      	beq.n	8000520 <USIC0_0_IRQHandler+0x40>
            rx_buffer[rx_ctr++] = rx_tmp;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	b2d1      	uxtb	r1, r2
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 8000514:	7011      	strb	r1, [r2, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <USIC0_0_IRQHandler+0x74>)
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	5453      	strb	r3, [r2, r1]
 800051e:	e005      	b.n	800052c <USIC0_0_IRQHandler+0x4c>
        } else {
            rx_ctr = 0;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
            str_available = true;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <USIC0_0_IRQHandler+0x6c>)
 8000528:	2201      	movs	r2, #1
 800052a:	701a      	strb	r2, [r3, #0]
{
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 800052c:	4806      	ldr	r0, [pc, #24]	; (8000548 <USIC0_0_IRQHandler+0x68>)
 800052e:	f7ff ff4b 	bl	80003c8 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8000532:	4603      	mov	r3, r0
 8000534:	f083 0301 	eor.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1d6      	bne.n	80004ec <USIC0_0_IRQHandler+0xc>
        } else {
            rx_ctr = 0;
            str_available = true;
        }
    }
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40030000 	.word	0x40030000
 800054c:	200009e8 	.word	0x200009e8
 8000550:	20000a38 	.word	0x20000a38
 8000554:	200009ec 	.word	0x200009ec

08000558 <_uart_printf>:

    return 0;
}

uint8_t _uart_printf (char *fmt, ...)
{
 8000558:	b40f      	push	{r0, r1, r2, r3}
 800055a:	b580      	push	{r7, lr}
 800055c:	b0c2      	sub	sp, #264	; 0x108
 800055e:	af00      	add	r7, sp, #0
    va_list arg_ptr;
    char buffer[BUFFER_SIZE_PRINTF];

    if (fmt == NULL)  {
 8000560:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000564:	2b00      	cmp	r3, #0
 8000566:	d101      	bne.n	800056c <_uart_printf+0x14>
        return ERR_OUT_OF_MEMORY;
 8000568:	2364      	movs	r3, #100	; 0x64
 800056a:	e010      	b.n	800058e <_uart_printf+0x36>
    }

    va_start (arg_ptr, fmt);
 800056c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    vsprintf (buffer, fmt, arg_ptr);
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800057a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800057e:	4618      	mov	r0, r3
 8000580:	f007 f846 	bl	8007610 <vsprintf>
    va_end (arg_ptr);

    _uart_send_string (buffer);
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f80a 	bl	80005a0 <_uart_send_string>
    return 0;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000594:	46bd      	mov	sp, r7
 8000596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800059a:	b004      	add	sp, #16
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <_uart_send_string>:

uint8_t _uart_send_string (char *str)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <_uart_send_string+0x12>
        return ERR_OUT_OF_MEMORY;
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	e01d      	b.n	80005ee <_uart_send_string+0x4e>
    }

    for (int i = 0; i < strlen (str); i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e012      	b.n	80005de <_uart_send_string+0x3e>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 80005b8:	bf00      	nop
 80005ba:	480f      	ldr	r0, [pc, #60]	; (80005f8 <_uart_send_string+0x58>)
 80005bc:	f7ff fee0 	bl	8000380 <XMC_USIC_CH_GetTransmitBufferStatus>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b80      	cmp	r3, #128	; 0x80
 80005c4:	d0f9      	beq.n	80005ba <_uart_send_string+0x1a>
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	4619      	mov	r1, r3
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <_uart_send_string+0x58>)
 80005d4:	f002 fb7a 	bl	8002ccc <XMC_UART_CH_Transmit>
{
    if (str == NULL) {
        return ERR_OUT_OF_MEMORY;
    }

    for (int i = 0; i < strlen (str); i++) {
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f003 ffee 	bl	80045c0 <strlen>
 80005e4:	4602      	mov	r2, r0
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8e5      	bhi.n	80005b8 <_uart_send_string+0x18>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
    }
    return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40030000 	.word	0x40030000

080005fc <_uart_get_string>:

uint8_t _uart_get_string (char *str)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <_uart_get_string+0x12>
        return ERR_OUT_OF_MEMORY;
 800060a:	2364      	movs	r3, #100	; 0x64
 800060c:	e019      	b.n	8000642 <_uart_get_string+0x46>
    }

    while (!str_available);
 800060e:	bf00      	nop
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <_uart_get_string+0x50>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f083 0301 	eor.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f8      	bne.n	8000610 <_uart_get_string+0x14>
    memcpy (str, &rx_buffer, strlen (rx_buffer));
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <_uart_get_string+0x54>)
 8000620:	f003 ffce 	bl	80045c0 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4909      	ldr	r1, [pc, #36]	; (8000650 <_uart_get_string+0x54>)
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f003 fe5e 	bl	80042ec <memcpy>
    memset (&rx_buffer, 0x00, BUFFER_SIZE_RX);
 8000630:	2240      	movs	r2, #64	; 0x40
 8000632:	2100      	movs	r1, #0
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <_uart_get_string+0x54>)
 8000636:	f003 fef3 	bl	8004420 <memset>

    str_available = false;
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <_uart_get_string+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
    return 0;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200009e8 	.word	0x200009e8
 8000650:	200009ec 	.word	0x200009ec

08000654 <initServoPWM>:
 * @param	none
 * @return	none
 *
 */
void initServoPWM()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    initServoPWMXMC();
 8000658:	f000 fdc6 	bl	80011e8 <initServoPWMXMC>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}

08000660 <pwm>:
 *			1 for lower servo <br>
 * @return	none
 *
 */
void pwm(double dutycycle, uint8_t out)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800066a:	4613      	mov	r3, r2
 800066c:	71fb      	strb	r3, [r7, #7]
    if (out == 0)
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d105      	bne.n	8000680 <pwm+0x20>
    {
        pwmXMC(dutycycle, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800067a:	f000 fe31 	bl	80012e0 <pwmXMC>
    }
    else
    {
        pwmXMC(dutycycle, 1);
    }
}
 800067e:	e004      	b.n	800068a <pwm+0x2a>
    {
        pwmXMC(dutycycle, 0);
    }
    else
    {
        pwmXMC(dutycycle, 1);
 8000680:	2201      	movs	r2, #1
 8000682:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000686:	f000 fe2b 	bl	80012e0 <pwmXMC>
    }
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop

08000694 <initGlobals>:
 * @param	none
 * @return	none
 *
 */
void initGlobals()
{
 8000694:	b490      	push	{r4, r7}
 8000696:	af00      	add	r7, sp, #0
    readAxes.axisX = 0;
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <initGlobals+0xa0>)
 800069a:	2200      	movs	r2, #0
 800069c:	801a      	strh	r2, [r3, #0]
    readAxes.axisY = 0;
 800069e:	4b25      	ldr	r3, [pc, #148]	; (8000734 <initGlobals+0xa0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	805a      	strh	r2, [r3, #2]
    readAxes.axisZ = 0;
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <initGlobals+0xa0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	809a      	strh	r2, [r3, #4]
    direction = 6;
 80006aa:	4b23      	ldr	r3, [pc, #140]	; (8000738 <initGlobals+0xa4>)
 80006ac:	2206      	movs	r2, #6
 80006ae:	701a      	strb	r2, [r3, #0]
    errorcount = 0;
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <initGlobals+0xa8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
    packagesSent = 0;
 80006b6:	4b22      	ldr	r3, [pc, #136]	; (8000740 <initGlobals+0xac>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
    position = 0;
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <initGlobals+0xb0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
    old_position = 0;
 80006c2:	4b21      	ldr	r3, [pc, #132]	; (8000748 <initGlobals+0xb4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
    signal1 = 0.00;
 80006c8:	4a20      	ldr	r2, [pc, #128]	; (800074c <initGlobals+0xb8>)
 80006ca:	f04f 0300 	mov.w	r3, #0
 80006ce:	f04f 0400 	mov.w	r4, #0
 80006d2:	e9c2 3400 	strd	r3, r4, [r2]
    signal2 = 0.00;
 80006d6:	4a1e      	ldr	r2, [pc, #120]	; (8000750 <initGlobals+0xbc>)
 80006d8:	f04f 0300 	mov.w	r3, #0
 80006dc:	f04f 0400 	mov.w	r4, #0
 80006e0:	e9c2 3400 	strd	r3, r4, [r2]
    button1pressed = 0;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <initGlobals+0xc0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
    button2pressed = 0;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <initGlobals+0xc4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
    statisticSend = 0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	; (800075c <initGlobals+0xc8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
    servoEnable = 0;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <initGlobals+0xcc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
    buttonSend = 0;
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <initGlobals+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
    inix = 0;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <initGlobals+0xd4>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
    outix = 0;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <initGlobals+0xd8>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
    full = 0;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <initGlobals+0xdc>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
    empty = 1;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <initGlobals+0xe0>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
	startup = 0;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <initGlobals+0xe4>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
	connection = 0;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <initGlobals+0xe8>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
	averageChoice = 0;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <initGlobals+0xec>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc90      	pop	{r4, r7}
 8000732:	4770      	bx	lr
 8000734:	20000ad8 	.word	0x20000ad8
 8000738:	20000ad1 	.word	0x20000ad1
 800073c:	20000aaa 	.word	0x20000aaa
 8000740:	20000ac0 	.word	0x20000ac0
 8000744:	20000abe 	.word	0x20000abe
 8000748:	20000ad4 	.word	0x20000ad4
 800074c:	20000ae0 	.word	0x20000ae0
 8000750:	20000ac8 	.word	0x20000ac8
 8000754:	20000ad0 	.word	0x20000ad0
 8000758:	20000ac4 	.word	0x20000ac4
 800075c:	20000aa8 	.word	0x20000aa8
 8000760:	20000ad3 	.word	0x20000ad3
 8000764:	20000ad5 	.word	0x20000ad5
 8000768:	20000ad2 	.word	0x20000ad2
 800076c:	20000aa9 	.word	0x20000aa9
 8000770:	20000ab0 	.word	0x20000ab0
 8000774:	20000ae8 	.word	0x20000ae8
 8000778:	20000aac 	.word	0x20000aac
 800077c:	20000ade 	.word	0x20000ade
 8000780:	20000ad6 	.word	0x20000ad6

08000784 <outputInit>:
 * @param	none
 * @return	none
 *
 */
void outputInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    outputInitXMC();
 8000788:	f000 fe6c 	bl	8001464 <outputInitXMC>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <SysTick_Handler>:
 * @param	none
 * @return	none
 *
 */
void SysTick_Handler (void)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
	static double smoothSignal1 = 0.0, smoothSignal2 = 0.0;

    // read buttons and fill circular buffer

    readButtonDebounce();
 8000796:	f000 fc13 	bl	8000fc0 <readButtonDebounce>

    if (circularGet(&buttonIDpressed))
 800079a:	486f      	ldr	r0, [pc, #444]	; (8000958 <SysTick_Handler+0x1c8>)
 800079c:	f000 fc5e 	bl	800105c <circularGet>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d018      	beq.n	80007d8 <SysTick_Handler+0x48>
    {
        switch (buttonIDpressed)
 80007a6:	4b6c      	ldr	r3, [pc, #432]	; (8000958 <SysTick_Handler+0x1c8>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b0e      	cmp	r3, #14
 80007ac:	d002      	beq.n	80007b4 <SysTick_Handler+0x24>
 80007ae:	2b0f      	cmp	r3, #15
 80007b0:	d007      	beq.n	80007c2 <SysTick_Handler+0x32>
 80007b2:	e00d      	b.n	80007d0 <SysTick_Handler+0x40>
        {
        case BUTTON1INT:
        {
#if DEBUG
            printf("button 1 pressed\n");
 80007b4:	4869      	ldr	r0, [pc, #420]	; (800095c <SysTick_Handler+0x1cc>)
 80007b6:	f003 fec9 	bl	800454c <puts>
#endif
            buttonSend = 1;
 80007ba:	4b69      	ldr	r3, [pc, #420]	; (8000960 <SysTick_Handler+0x1d0>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
            break;
 80007c0:	e00a      	b.n	80007d8 <SysTick_Handler+0x48>
        }
        case BUTTON2INT:
        {
#if DEBUG
            printf("button 2 pressed\n");
 80007c2:	4868      	ldr	r0, [pc, #416]	; (8000964 <SysTick_Handler+0x1d4>)
 80007c4:	f003 fec2 	bl	800454c <puts>
#endif
            buttonSend = 2;
 80007c8:	4b65      	ldr	r3, [pc, #404]	; (8000960 <SysTick_Handler+0x1d0>)
 80007ca:	2202      	movs	r2, #2
 80007cc:	701a      	strb	r2, [r3, #0]
            break;
 80007ce:	e003      	b.n	80007d8 <SysTick_Handler+0x48>
        }
        default:
        {
            buttonSend = 0;
 80007d0:	4b63      	ldr	r3, [pc, #396]	; (8000960 <SysTick_Handler+0x1d0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
            break;
 80007d6:	bf00      	nop
        }
        }
    }

	if (connection == 1)
 80007d8:	4b63      	ldr	r3, [pc, #396]	; (8000968 <SysTick_Handler+0x1d8>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	f040 80b6 	bne.w	800094e <SysTick_Handler+0x1be>
	{
	    ticks++;
 80007e2:	4b62      	ldr	r3, [pc, #392]	; (800096c <SysTick_Handler+0x1dc>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	4a60      	ldr	r2, [pc, #384]	; (800096c <SysTick_Handler+0x1dc>)
 80007ea:	6013      	str	r3, [r2, #0]
    	if(ticks == SENSORTICKS)
 80007ec:	4b5f      	ldr	r3, [pc, #380]	; (800096c <SysTick_Handler+0x1dc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b0a      	cmp	r3, #10
 80007f2:	d11f      	bne.n	8000834 <SysTick_Handler+0xa4>
		{
        // get 6D Position
        direction = get6Dposition();
 80007f4:	f001 f9b0 	bl	8001b58 <get6Dposition>
 80007f8:	4603      	mov	r3, r0
 80007fa:	461a      	mov	r2, r3
 80007fc:	4b5c      	ldr	r3, [pc, #368]	; (8000970 <SysTick_Handler+0x1e0>)
 80007fe:	701a      	strb	r2, [r3, #0]
        // get raw data
        readAxes = getAxesRawData();
 8000800:	4c5c      	ldr	r4, [pc, #368]	; (8000974 <SysTick_Handler+0x1e4>)
 8000802:	463b      	mov	r3, r7
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fa41 	bl	8001c8c <getAxesRawData>
 800080a:	4622      	mov	r2, r4
 800080c:	463b      	mov	r3, r7
 800080e:	6819      	ldr	r1, [r3, #0]
 8000810:	6011      	str	r1, [r2, #0]
 8000812:	889b      	ldrh	r3, [r3, #4]
 8000814:	8093      	strh	r3, [r2, #4]
        // calculate servo output
        pwmAngleCalc(readAxes.axisX, readAxes.axisY, readAxes.axisZ);
 8000816:	4b57      	ldr	r3, [pc, #348]	; (8000974 <SysTick_Handler+0x1e4>)
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	b218      	sxth	r0, r3
 800081c:	4b55      	ldr	r3, [pc, #340]	; (8000974 <SysTick_Handler+0x1e4>)
 800081e:	885b      	ldrh	r3, [r3, #2]
 8000820:	b219      	sxth	r1, r3
 8000822:	4b54      	ldr	r3, [pc, #336]	; (8000974 <SysTick_Handler+0x1e4>)
 8000824:	889b      	ldrh	r3, [r3, #4]
 8000826:	b21b      	sxth	r3, r3
 8000828:	461a      	mov	r2, r3
 800082a:	f000 f9c9 	bl	8000bc0 <pwmAngleCalc>

        ticks = 0;
 800082e:	4b4f      	ldr	r3, [pc, #316]	; (800096c <SysTick_Handler+0x1dc>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
		}

	    if (servoEnable == 1)
 8000834:	4b50      	ldr	r3, [pc, #320]	; (8000978 <SysTick_Handler+0x1e8>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d17c      	bne.n	8000936 <SysTick_Handler+0x1a6>
	    {
			if (averageChoice == 0)
 800083c:	4b4f      	ldr	r3, [pc, #316]	; (800097c <SysTick_Handler+0x1ec>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d163      	bne.n	800090c <SysTick_Handler+0x17c>
			{
				smoothSignal1 += signal1;
 8000844:	4b4e      	ldr	r3, [pc, #312]	; (8000980 <SysTick_Handler+0x1f0>)
 8000846:	e9d3 0100 	ldrd	r0, r1, [r3]
 800084a:	4b4e      	ldr	r3, [pc, #312]	; (8000984 <SysTick_Handler+0x1f4>)
 800084c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000850:	461a      	mov	r2, r3
 8000852:	4623      	mov	r3, r4
 8000854:	f003 f872 	bl	800393c <__adddf3>
 8000858:	4603      	mov	r3, r0
 800085a:	460c      	mov	r4, r1
 800085c:	4a48      	ldr	r2, [pc, #288]	; (8000980 <SysTick_Handler+0x1f0>)
 800085e:	e9c2 3400 	strd	r3, r4, [r2]
				smoothSignal2 += signal2;
 8000862:	4b49      	ldr	r3, [pc, #292]	; (8000988 <SysTick_Handler+0x1f8>)
 8000864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000868:	4b48      	ldr	r3, [pc, #288]	; (800098c <SysTick_Handler+0x1fc>)
 800086a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800086e:	461a      	mov	r2, r3
 8000870:	4623      	mov	r3, r4
 8000872:	f003 f863 	bl	800393c <__adddf3>
 8000876:	4603      	mov	r3, r0
 8000878:	460c      	mov	r4, r1
 800087a:	4a43      	ldr	r2, [pc, #268]	; (8000988 <SysTick_Handler+0x1f8>)
 800087c:	e9c2 3400 	strd	r3, r4, [r2]
				i++;
 8000880:	4b43      	ldr	r3, [pc, #268]	; (8000990 <SysTick_Handler+0x200>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b41      	ldr	r3, [pc, #260]	; (8000990 <SysTick_Handler+0x200>)
 800088a:	701a      	strb	r2, [r3, #0]
				if (i == PWMAVERAGE)
 800088c:	4b40      	ldr	r3, [pc, #256]	; (8000990 <SysTick_Handler+0x200>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b05      	cmp	r3, #5
 8000892:	d15c      	bne.n	800094e <SysTick_Handler+0x1be>
				{
				    // set servo
					smoothSignal1 /= PWMAVERAGE;
 8000894:	4b3a      	ldr	r3, [pc, #232]	; (8000980 <SysTick_Handler+0x1f0>)
 8000896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800089a:	f04f 0200 	mov.w	r2, #0
 800089e:	4b3d      	ldr	r3, [pc, #244]	; (8000994 <SysTick_Handler+0x204>)
 80008a0:	f003 fb28 	bl	8003ef4 <__aeabi_ddiv>
 80008a4:	4603      	mov	r3, r0
 80008a6:	460c      	mov	r4, r1
 80008a8:	4a35      	ldr	r2, [pc, #212]	; (8000980 <SysTick_Handler+0x1f0>)
 80008aa:	e9c2 3400 	strd	r3, r4, [r2]
					smoothSignal2 /= PWMAVERAGE;
 80008ae:	4b36      	ldr	r3, [pc, #216]	; (8000988 <SysTick_Handler+0x1f8>)
 80008b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008b4:	f04f 0200 	mov.w	r2, #0
 80008b8:	4b36      	ldr	r3, [pc, #216]	; (8000994 <SysTick_Handler+0x204>)
 80008ba:	f003 fb1b 	bl	8003ef4 <__aeabi_ddiv>
 80008be:	4603      	mov	r3, r0
 80008c0:	460c      	mov	r4, r1
 80008c2:	4a31      	ldr	r2, [pc, #196]	; (8000988 <SysTick_Handler+0x1f8>)
 80008c4:	e9c2 3400 	strd	r3, r4, [r2]
				    pwm(smoothSignal1, 0);
 80008c8:	4b2d      	ldr	r3, [pc, #180]	; (8000980 <SysTick_Handler+0x1f0>)
 80008ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008ce:	2200      	movs	r2, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	4621      	mov	r1, r4
 80008d4:	f7ff fec4 	bl	8000660 <pwm>
				    pwm(smoothSignal2, 1);
 80008d8:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <SysTick_Handler+0x1f8>)
 80008da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008de:	2201      	movs	r2, #1
 80008e0:	4618      	mov	r0, r3
 80008e2:	4621      	mov	r1, r4
 80008e4:	f7ff febc 	bl	8000660 <pwm>
					smoothSignal1 = 0.0;
 80008e8:	4a25      	ldr	r2, [pc, #148]	; (8000980 <SysTick_Handler+0x1f0>)
 80008ea:	f04f 0300 	mov.w	r3, #0
 80008ee:	f04f 0400 	mov.w	r4, #0
 80008f2:	e9c2 3400 	strd	r3, r4, [r2]
					smoothSignal2 = 0.0;
 80008f6:	4a24      	ldr	r2, [pc, #144]	; (8000988 <SysTick_Handler+0x1f8>)
 80008f8:	f04f 0300 	mov.w	r3, #0
 80008fc:	f04f 0400 	mov.w	r4, #0
 8000900:	e9c2 3400 	strd	r3, r4, [r2]
					i = 0;
 8000904:	4b22      	ldr	r3, [pc, #136]	; (8000990 <SysTick_Handler+0x200>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
		    // reset servo
		    pwm(SERVOUPCENTER, 0);
		    pwm(SERVOLOCENTER, 1);
		}
	}
}
 800090a:	e020      	b.n	800094e <SysTick_Handler+0x1be>
					smoothSignal1 = 0.0;
					smoothSignal2 = 0.0;
					i = 0;
				}
			}
			else if (averageChoice == 1)
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <SysTick_Handler+0x1ec>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d11c      	bne.n	800094e <SysTick_Handler+0x1be>
			{
		   	    pwm(signal1, 0);
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <SysTick_Handler+0x1f4>)
 8000916:	e9d3 3400 	ldrd	r3, r4, [r3]
 800091a:	2200      	movs	r2, #0
 800091c:	4618      	mov	r0, r3
 800091e:	4621      	mov	r1, r4
 8000920:	f7ff fe9e 	bl	8000660 <pwm>
		   	    pwm(signal2, 1);
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <SysTick_Handler+0x1fc>)
 8000926:	e9d3 3400 	ldrd	r3, r4, [r3]
 800092a:	2201      	movs	r2, #1
 800092c:	4618      	mov	r0, r3
 800092e:	4621      	mov	r1, r4
 8000930:	f7ff fe96 	bl	8000660 <pwm>
		    // reset servo
		    pwm(SERVOUPCENTER, 0);
		    pwm(SERVOLOCENTER, 1);
		}
	}
}
 8000934:	e00b      	b.n	800094e <SysTick_Handler+0x1be>
			}
	    }
		else
		{
		    // reset servo
		    pwm(SERVOUPCENTER, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	f04f 0000 	mov.w	r0, #0
 800093c:	4916      	ldr	r1, [pc, #88]	; (8000998 <SysTick_Handler+0x208>)
 800093e:	f7ff fe8f 	bl	8000660 <pwm>
		    pwm(SERVOLOCENTER, 1);
 8000942:	2201      	movs	r2, #1
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4913      	ldr	r1, [pc, #76]	; (8000998 <SysTick_Handler+0x208>)
 800094a:	f7ff fe89 	bl	8000660 <pwm>
		}
	}
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	bf00      	nop
 8000958:	20000a39 	.word	0x20000a39
 800095c:	0800a9c4 	.word	0x0800a9c4
 8000960:	20000ad5 	.word	0x20000ad5
 8000964:	0800a9d8 	.word	0x0800a9d8
 8000968:	20000ade 	.word	0x20000ade
 800096c:	20000a3c 	.word	0x20000a3c
 8000970:	20000ad1 	.word	0x20000ad1
 8000974:	20000ad8 	.word	0x20000ad8
 8000978:	20000ad3 	.word	0x20000ad3
 800097c:	20000ad6 	.word	0x20000ad6
 8000980:	20000a40 	.word	0x20000a40
 8000984:	20000ae0 	.word	0x20000ae0
 8000988:	20000a48 	.word	0x20000a48
 800098c:	20000ac8 	.word	0x20000ac8
 8000990:	20000a50 	.word	0x20000a50
 8000994:	40140000 	.word	0x40140000
 8000998:	401e0000 	.word	0x401e0000

0800099c <protocolComplete>:
 *			temperature value <br>
 * @return	none
 *
 */
void protocolComplete(int16_t position6D, int16_t positionX, int16_t positionY, int16_t positionZ)
{
 800099c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800099e:	b0a3      	sub	sp, #140	; 0x8c
 80009a0:	af04      	add	r7, sp, #16
 80009a2:	4604      	mov	r4, r0
 80009a4:	4608      	mov	r0, r1
 80009a6:	4611      	mov	r1, r2
 80009a8:	461a      	mov	r2, r3
 80009aa:	4623      	mov	r3, r4
 80009ac:	80fb      	strh	r3, [r7, #6]
 80009ae:	4603      	mov	r3, r0
 80009b0:	80bb      	strh	r3, [r7, #4]
 80009b2:	460b      	mov	r3, r1
 80009b4:	807b      	strh	r3, [r7, #2]
 80009b6:	4613      	mov	r3, r2
 80009b8:	803b      	strh	r3, [r7, #0]
    char string6D[8][6] = {"#USX,", "#UDX,", "#DSX,", "#DDX,", "#TOP,", "#BOT,", "#XXX,", "#FAL,"};
 80009ba:	4b6c      	ldr	r3, [pc, #432]	; (8000b6c <protocolComplete+0x1d0>)
 80009bc:	461c      	mov	r4, r3
 80009be:	f107 0648 	add.w	r6, r7, #72	; 0x48
 80009c2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80009c6:	4635      	mov	r5, r6
 80009c8:	4623      	mov	r3, r4
 80009ca:	6818      	ldr	r0, [r3, #0]
 80009cc:	6859      	ldr	r1, [r3, #4]
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009d4:	3410      	adds	r4, #16
 80009d6:	3610      	adds	r6, #16
 80009d8:	4574      	cmp	r4, lr
 80009da:	d1f4      	bne.n	80009c6 <protocolComplete+0x2a>
    char send[RXBUFFERSIZE];

    memset (&send, 0, sizeof (send));
 80009dc:	f107 0308 	add.w	r3, r7, #8
 80009e0:	2240      	movs	r2, #64	; 0x40
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 fd1b 	bl	8004420 <memset>

    if (statisticSend == 1)
 80009ea:	4b61      	ldr	r3, [pc, #388]	; (8000b70 <protocolComplete+0x1d4>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d12c      	bne.n	8000a4c <protocolComplete+0xb0>
    {
        // send statistic package if requested
        if (sprintf(send, "#STA,%10lu,%3d,%10lu$\n", packagesSent, errorcount, startup) < 0)
 80009f2:	4b60      	ldr	r3, [pc, #384]	; (8000b74 <protocolComplete+0x1d8>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	4b60      	ldr	r3, [pc, #384]	; (8000b78 <protocolComplete+0x1dc>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	4619      	mov	r1, r3
 80009fc:	4b5f      	ldr	r3, [pc, #380]	; (8000b7c <protocolComplete+0x1e0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f107 0008 	add.w	r0, r7, #8
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	460b      	mov	r3, r1
 8000a08:	495d      	ldr	r1, [pc, #372]	; (8000b80 <protocolComplete+0x1e4>)
 8000a0a:	f003 fda7 	bl	800455c <sprintf>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	da06      	bge.n	8000a22 <protocolComplete+0x86>
        {
            errorcount++;
 8000a14:	4b58      	ldr	r3, [pc, #352]	; (8000b78 <protocolComplete+0x1dc>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	4b56      	ldr	r3, [pc, #344]	; (8000b78 <protocolComplete+0x1dc>)
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	e010      	b.n	8000a44 <protocolComplete+0xa8>
        }
        else
        {
#if DEBUG
            printf("send %s", send);
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	4856      	ldr	r0, [pc, #344]	; (8000b84 <protocolComplete+0x1e8>)
 8000a2a:	f003 fd47 	bl	80044bc <printf>
#endif
            _uart_printf("%s", send);
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	4619      	mov	r1, r3
 8000a34:	4854      	ldr	r0, [pc, #336]	; (8000b88 <protocolComplete+0x1ec>)
 8000a36:	f7ff fd8f 	bl	8000558 <_uart_printf>
            packagesSent++;
 8000a3a:	4b4e      	ldr	r3, [pc, #312]	; (8000b74 <protocolComplete+0x1d8>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	4a4c      	ldr	r2, [pc, #304]	; (8000b74 <protocolComplete+0x1d8>)
 8000a42:	6013      	str	r3, [r2, #0]
        }
        statisticSend = 0;
 8000a44:	4b4a      	ldr	r3, [pc, #296]	; (8000b70 <protocolComplete+0x1d4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
        return;
 8000a4a:	e08b      	b.n	8000b64 <protocolComplete+0x1c8>
    }
    else if (buttonSend == 1)
 8000a4c:	4b4f      	ldr	r3, [pc, #316]	; (8000b8c <protocolComplete+0x1f0>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d124      	bne.n	8000a9e <protocolComplete+0x102>
    {
        // send button 1 pressed
        if (sprintf(send, "#BUT,1$\n") < 0)
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	4a4d      	ldr	r2, [pc, #308]	; (8000b90 <protocolComplete+0x1f4>)
 8000a5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a5c:	c303      	stmia	r3!, {r0, r1}
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	2308      	movs	r3, #8
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	da06      	bge.n	8000a74 <protocolComplete+0xd8>
        {
            errorcount++;
 8000a66:	4b44      	ldr	r3, [pc, #272]	; (8000b78 <protocolComplete+0x1dc>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4b42      	ldr	r3, [pc, #264]	; (8000b78 <protocolComplete+0x1dc>)
 8000a70:	701a      	strb	r2, [r3, #0]
 8000a72:	e010      	b.n	8000a96 <protocolComplete+0xfa>
        }
        else
        {
#if DEBUG
            printf("send %s", send);
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4842      	ldr	r0, [pc, #264]	; (8000b84 <protocolComplete+0x1e8>)
 8000a7c:	f003 fd1e 	bl	80044bc <printf>
#endif
            _uart_printf("%s", send);
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	4619      	mov	r1, r3
 8000a86:	4840      	ldr	r0, [pc, #256]	; (8000b88 <protocolComplete+0x1ec>)
 8000a88:	f7ff fd66 	bl	8000558 <_uart_printf>
            packagesSent++;
 8000a8c:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <protocolComplete+0x1d8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4a38      	ldr	r2, [pc, #224]	; (8000b74 <protocolComplete+0x1d8>)
 8000a94:	6013      	str	r3, [r2, #0]
        }
        buttonSend = 0;
 8000a96:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <protocolComplete+0x1f0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
        return;
 8000a9c:	e062      	b.n	8000b64 <protocolComplete+0x1c8>
    }
    else if (buttonSend == 2)
 8000a9e:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <protocolComplete+0x1f0>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d124      	bne.n	8000af0 <protocolComplete+0x154>
    {
        // send button 2 pressed
        if (sprintf(send, "#BUT,2$\n") < 0)
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4a3a      	ldr	r2, [pc, #232]	; (8000b94 <protocolComplete+0x1f8>)
 8000aac:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aae:	c303      	stmia	r3!, {r0, r1}
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	da06      	bge.n	8000ac6 <protocolComplete+0x12a>
        {
            errorcount++;
 8000ab8:	4b2f      	ldr	r3, [pc, #188]	; (8000b78 <protocolComplete+0x1dc>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <protocolComplete+0x1dc>)
 8000ac2:	701a      	strb	r2, [r3, #0]
 8000ac4:	e010      	b.n	8000ae8 <protocolComplete+0x14c>
        }
        else
        {
#if DEBUG
            printf("send %s", send);
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	4619      	mov	r1, r3
 8000acc:	482d      	ldr	r0, [pc, #180]	; (8000b84 <protocolComplete+0x1e8>)
 8000ace:	f003 fcf5 	bl	80044bc <printf>
#endif
            _uart_printf("%s", send);
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	482b      	ldr	r0, [pc, #172]	; (8000b88 <protocolComplete+0x1ec>)
 8000ada:	f7ff fd3d 	bl	8000558 <_uart_printf>
            packagesSent++;
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <protocolComplete+0x1d8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	4a23      	ldr	r2, [pc, #140]	; (8000b74 <protocolComplete+0x1d8>)
 8000ae6:	6013      	str	r3, [r2, #0]
        }
        buttonSend = 0;
 8000ae8:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <protocolComplete+0x1f0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
        return;
 8000aee:	e039      	b.n	8000b64 <protocolComplete+0x1c8>
    }
    else
    {
        // send acceleration data
        if (sprintf(send, "%s%7d%s%7d%s%7d$\n", string6D[position6D], positionX, ",", positionY, ",", positionZ) < 0)
 8000af0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000af4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	4419      	add	r1, r3
 8000b02:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000b06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b0a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b0e:	f107 0008 	add.w	r0, r7, #8
 8000b12:	9203      	str	r2, [sp, #12]
 8000b14:	4a20      	ldr	r2, [pc, #128]	; (8000b98 <protocolComplete+0x1fc>)
 8000b16:	9202      	str	r2, [sp, #8]
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <protocolComplete+0x1fc>)
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	4623      	mov	r3, r4
 8000b20:	460a      	mov	r2, r1
 8000b22:	491e      	ldr	r1, [pc, #120]	; (8000b9c <protocolComplete+0x200>)
 8000b24:	f003 fd1a 	bl	800455c <sprintf>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	da06      	bge.n	8000b3c <protocolComplete+0x1a0>
        {
            errorcount++;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <protocolComplete+0x1dc>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <protocolComplete+0x1dc>)
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	e013      	b.n	8000b64 <protocolComplete+0x1c8>
        }
        else
        {
#if DEBUG
            printf("send %s", send);
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	4619      	mov	r1, r3
 8000b42:	4810      	ldr	r0, [pc, #64]	; (8000b84 <protocolComplete+0x1e8>)
 8000b44:	f003 fcba 	bl	80044bc <printf>
#endif
            _uart_printf("%s", send);
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480e      	ldr	r0, [pc, #56]	; (8000b88 <protocolComplete+0x1ec>)
 8000b50:	f7ff fd02 	bl	8000558 <_uart_printf>
            ledSetting(3);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f823 	bl	8000ba0 <ledSetting>
            packagesSent++;
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <protocolComplete+0x1d8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <protocolComplete+0x1d8>)
 8000b62:	6013      	str	r3, [r2, #0]
        }
    }
}
 8000b64:	377c      	adds	r7, #124	; 0x7c
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	0800aa40 	.word	0x0800aa40
 8000b70:	20000aa8 	.word	0x20000aa8
 8000b74:	20000ac0 	.word	0x20000ac0
 8000b78:	20000aaa 	.word	0x20000aaa
 8000b7c:	20000aac 	.word	0x20000aac
 8000b80:	0800a9ec 	.word	0x0800a9ec
 8000b84:	0800aa04 	.word	0x0800aa04
 8000b88:	0800aa0c 	.word	0x0800aa0c
 8000b8c:	20000ad5 	.word	0x20000ad5
 8000b90:	0800aa10 	.word	0x0800aa10
 8000b94:	0800aa1c 	.word	0x0800aa1c
 8000b98:	0800aa3c 	.word	0x0800aa3c
 8000b9c:	0800aa28 	.word	0x0800aa28

08000ba0 <ledSetting>:
 *			other for LED toggle <br>
 * @return	none
 *
 */
void ledSetting(uint8_t ledState)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	ledSettingXMC(ledState);
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fcd9 	bl	8001564 <ledSettingXMC>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	0000      	movs	r0, r0
	...

08000bc0 <pwmAngleCalc>:
 *			raw Z acceleration value <br>
 * @return	none
 *
 */
void pwmAngleCalc(int16_t positionX, int16_t positionY, int16_t positionZ)
{
 8000bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bc4:	b08d      	sub	sp, #52	; 0x34
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	80fb      	strh	r3, [r7, #6]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	80bb      	strh	r3, [r7, #4]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	807b      	strh	r3, [r7, #2]
    double roll = 0.0, pitch = 0.0;
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	f04f 0400 	mov.w	r4, #0
 8000bdc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8000be0:	f04f 0300 	mov.w	r3, #0
 8000be4:	f04f 0400 	mov.w	r4, #0
 8000be8:	e9c7 3408 	strd	r3, r4, [r7, #32]
    double gX = 0, gY = 0, gZ = 0;
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	f04f 0400 	mov.w	r4, #0
 8000bf4:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	f04f 0400 	mov.w	r4, #0
 8000c00:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	f04f 0400 	mov.w	r4, #0
 8000c0c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	static double rollStored = 0.0;
	static double pitchStored = 0.0;

    gX = positionX / GDIVIDER;
 8000c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f002 ffdd 	bl	8003bd4 <__aeabi_i2d>
 8000c1a:	a3e7      	add	r3, pc, #924	; (adr r3, 8000fb8 <pwmAngleCalc+0x3f8>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	f003 f968 	bl	8003ef4 <__aeabi_ddiv>
 8000c24:	4603      	mov	r3, r0
 8000c26:	460c      	mov	r4, r1
 8000c28:	e9c7 3406 	strd	r3, r4, [r7, #24]
    gY = positionY / GDIVIDER;
 8000c2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 ffcf 	bl	8003bd4 <__aeabi_i2d>
 8000c36:	a3e0      	add	r3, pc, #896	; (adr r3, 8000fb8 <pwmAngleCalc+0x3f8>)
 8000c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3c:	f003 f95a 	bl	8003ef4 <__aeabi_ddiv>
 8000c40:	4603      	mov	r3, r0
 8000c42:	460c      	mov	r4, r1
 8000c44:	e9c7 3404 	strd	r3, r4, [r7, #16]
    gZ = positionZ / GDIVIDER;
 8000c48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 ffc1 	bl	8003bd4 <__aeabi_i2d>
 8000c52:	a3d9      	add	r3, pc, #868	; (adr r3, 8000fb8 <pwmAngleCalc+0x3f8>)
 8000c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c58:	f003 f94c 	bl	8003ef4 <__aeabi_ddiv>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	460c      	mov	r4, r1
 8000c60:	e9c7 3402 	strd	r3, r4, [r7, #8]

    roll = atan(gY/(sqrt((gX*gX)+(gZ*gZ)))) * 180 / PI;
 8000c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000c68:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c6c:	f003 f818 	bl	8003ca0 <__aeabi_dmul>
 8000c70:	4603      	mov	r3, r0
 8000c72:	460c      	mov	r4, r1
 8000c74:	469a      	mov	sl, r3
 8000c76:	46a3      	mov	fp, r4
 8000c78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c80:	f003 f80e 	bl	8003ca0 <__aeabi_dmul>
 8000c84:	4603      	mov	r3, r0
 8000c86:	460c      	mov	r4, r1
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	4650      	mov	r0, sl
 8000c8e:	4659      	mov	r1, fp
 8000c90:	f002 fe54 	bl	800393c <__adddf3>
 8000c94:	4603      	mov	r3, r0
 8000c96:	460c      	mov	r4, r1
 8000c98:	4618      	mov	r0, r3
 8000c9a:	4621      	mov	r1, r4
 8000c9c:	f002 fd28 	bl	80036f0 <sqrt>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	460c      	mov	r4, r1
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4623      	mov	r3, r4
 8000ca8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000cac:	f003 f922 	bl	8003ef4 <__aeabi_ddiv>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	460c      	mov	r4, r1
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	4621      	mov	r1, r4
 8000cb8:	f002 fb76 	bl	80033a8 <atan>
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	4bb1      	ldr	r3, [pc, #708]	; (8000f88 <pwmAngleCalc+0x3c8>)
 8000cc2:	f002 ffed 	bl	8003ca0 <__aeabi_dmul>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	460c      	mov	r4, r1
 8000cca:	4618      	mov	r0, r3
 8000ccc:	4621      	mov	r1, r4
 8000cce:	a3a8      	add	r3, pc, #672	; (adr r3, 8000f70 <pwmAngleCalc+0x3b0>)
 8000cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd4:	f003 f90e 	bl	8003ef4 <__aeabi_ddiv>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	460c      	mov	r4, r1
 8000cdc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    pitch = atan(gX/(sqrt((gY*gY)+(gZ*gZ)))) * 180 / PI;
 8000ce0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ce4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000ce8:	f002 ffda 	bl	8003ca0 <__aeabi_dmul>
 8000cec:	4603      	mov	r3, r0
 8000cee:	460c      	mov	r4, r1
 8000cf0:	469a      	mov	sl, r3
 8000cf2:	46a3      	mov	fp, r4
 8000cf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cf8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cfc:	f002 ffd0 	bl	8003ca0 <__aeabi_dmul>
 8000d00:	4603      	mov	r3, r0
 8000d02:	460c      	mov	r4, r1
 8000d04:	461a      	mov	r2, r3
 8000d06:	4623      	mov	r3, r4
 8000d08:	4650      	mov	r0, sl
 8000d0a:	4659      	mov	r1, fp
 8000d0c:	f002 fe16 	bl	800393c <__adddf3>
 8000d10:	4603      	mov	r3, r0
 8000d12:	460c      	mov	r4, r1
 8000d14:	4618      	mov	r0, r3
 8000d16:	4621      	mov	r1, r4
 8000d18:	f002 fcea 	bl	80036f0 <sqrt>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	460c      	mov	r4, r1
 8000d20:	461a      	mov	r2, r3
 8000d22:	4623      	mov	r3, r4
 8000d24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000d28:	f003 f8e4 	bl	8003ef4 <__aeabi_ddiv>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	460c      	mov	r4, r1
 8000d30:	4618      	mov	r0, r3
 8000d32:	4621      	mov	r1, r4
 8000d34:	f002 fb38 	bl	80033a8 <atan>
 8000d38:	f04f 0200 	mov.w	r2, #0
 8000d3c:	4b92      	ldr	r3, [pc, #584]	; (8000f88 <pwmAngleCalc+0x3c8>)
 8000d3e:	f002 ffaf 	bl	8003ca0 <__aeabi_dmul>
 8000d42:	4603      	mov	r3, r0
 8000d44:	460c      	mov	r4, r1
 8000d46:	4618      	mov	r0, r3
 8000d48:	4621      	mov	r1, r4
 8000d4a:	a389      	add	r3, pc, #548	; (adr r3, 8000f70 <pwmAngleCalc+0x3b0>)
 8000d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d50:	f003 f8d0 	bl	8003ef4 <__aeabi_ddiv>
 8000d54:	4603      	mov	r3, r0
 8000d56:	460c      	mov	r4, r1
 8000d58:	e9c7 3408 	strd	r3, r4, [r7, #32]

	if (pitch >= 0.0)
 8000d5c:	f04f 0200 	mov.w	r2, #0
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000d68:	f003 fa20 	bl	80041ac <__aeabi_dcmpge>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d012      	beq.n	8000d98 <pwmAngleCalc+0x1d8>
	{
		pitch += pitch * PITCHCORRECTPOS;
 8000d72:	a381      	add	r3, pc, #516	; (adr r3, 8000f78 <pwmAngleCalc+0x3b8>)
 8000d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000d7c:	f002 ff90 	bl	8003ca0 <__aeabi_dmul>
 8000d80:	4603      	mov	r3, r0
 8000d82:	460c      	mov	r4, r1
 8000d84:	461a      	mov	r2, r3
 8000d86:	4623      	mov	r3, r4
 8000d88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000d8c:	f002 fdd6 	bl	800393c <__adddf3>
 8000d90:	4603      	mov	r3, r0
 8000d92:	460c      	mov	r4, r1
 8000d94:	e9c7 3408 	strd	r3, r4, [r7, #32]
	}

	if (startup == 0)
 8000d98:	4b7c      	ldr	r3, [pc, #496]	; (8000f8c <pwmAngleCalc+0x3cc>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d10a      	bne.n	8000db6 <pwmAngleCalc+0x1f6>
	{
		pitchStored = pitch;
 8000da0:	4a7b      	ldr	r2, [pc, #492]	; (8000f90 <pwmAngleCalc+0x3d0>)
 8000da2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000da6:	e9c2 3400 	strd	r3, r4, [r2]
		rollStored = roll;
 8000daa:	4a7a      	ldr	r2, [pc, #488]	; (8000f94 <pwmAngleCalc+0x3d4>)
 8000dac:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000db0:	e9c2 3400 	strd	r3, r4, [r2]
 8000db4:	e049      	b.n	8000e4a <pwmAngleCalc+0x28a>
	}
	else
	{
		if (averageChoice == 1)
 8000db6:	4b78      	ldr	r3, [pc, #480]	; (8000f98 <pwmAngleCalc+0x3d8>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d145      	bne.n	8000e4a <pwmAngleCalc+0x28a>
		{
			if (fabs(pitch - pitchStored) < ANGAVERAGE)
 8000dbe:	4b74      	ldr	r3, [pc, #464]	; (8000f90 <pwmAngleCalc+0x3d0>)
 8000dc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4623      	mov	r3, r4
 8000dc8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000dcc:	f002 fdb4 	bl	8003938 <__aeabi_dsub>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	460c      	mov	r4, r1
 8000dd4:	4698      	mov	r8, r3
 8000dd6:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	4b6f      	ldr	r3, [pc, #444]	; (8000f9c <pwmAngleCalc+0x3dc>)
 8000de0:	4640      	mov	r0, r8
 8000de2:	4649      	mov	r1, r9
 8000de4:	f003 f9ce 	bl	8004184 <__aeabi_dcmplt>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d005      	beq.n	8000dfa <pwmAngleCalc+0x23a>
			{
				pitch = pitchStored;
 8000dee:	4b68      	ldr	r3, [pc, #416]	; (8000f90 <pwmAngleCalc+0x3d0>)
 8000df0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000df4:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8000df8:	e004      	b.n	8000e04 <pwmAngleCalc+0x244>
			}
			else
			{
				pitchStored = pitch;
 8000dfa:	4a65      	ldr	r2, [pc, #404]	; (8000f90 <pwmAngleCalc+0x3d0>)
 8000dfc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000e00:	e9c2 3400 	strd	r3, r4, [r2]
			}

			if (fabs(roll - rollStored) < ANGAVERAGE)
 8000e04:	4b63      	ldr	r3, [pc, #396]	; (8000f94 <pwmAngleCalc+0x3d4>)
 8000e06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4623      	mov	r3, r4
 8000e0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000e12:	f002 fd91 	bl	8003938 <__aeabi_dsub>
 8000e16:	4603      	mov	r3, r0
 8000e18:	460c      	mov	r4, r1
 8000e1a:	461d      	mov	r5, r3
 8000e1c:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	4b5d      	ldr	r3, [pc, #372]	; (8000f9c <pwmAngleCalc+0x3dc>)
 8000e26:	4628      	mov	r0, r5
 8000e28:	4631      	mov	r1, r6
 8000e2a:	f003 f9ab 	bl	8004184 <__aeabi_dcmplt>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <pwmAngleCalc+0x280>
			{
				roll = rollStored;
 8000e34:	4b57      	ldr	r3, [pc, #348]	; (8000f94 <pwmAngleCalc+0x3d4>)
 8000e36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e3a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8000e3e:	e004      	b.n	8000e4a <pwmAngleCalc+0x28a>
			}
			else
			{
				pitchStored = pitch;
 8000e40:	4a53      	ldr	r2, [pc, #332]	; (8000f90 <pwmAngleCalc+0x3d0>)
 8000e42:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000e46:	e9c2 3400 	strd	r3, r4, [r2]
			}
		}
	}

	startup++;
 8000e4a:	4b50      	ldr	r3, [pc, #320]	; (8000f8c <pwmAngleCalc+0x3cc>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4a4e      	ldr	r2, [pc, #312]	; (8000f8c <pwmAngleCalc+0x3cc>)
 8000e52:	6013      	str	r3, [r2, #0]

    signal1 = (90.00+roll) * SERVOUOLINEAR + SERUPLO0;
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <pwmAngleCalc+0x3e0>)
 8000e5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000e5e:	f002 fd6d 	bl	800393c <__adddf3>
 8000e62:	4603      	mov	r3, r0
 8000e64:	460c      	mov	r4, r1
 8000e66:	4618      	mov	r0, r3
 8000e68:	4621      	mov	r1, r4
 8000e6a:	a345      	add	r3, pc, #276	; (adr r3, 8000f80 <pwmAngleCalc+0x3c0>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	f002 ff16 	bl	8003ca0 <__aeabi_dmul>
 8000e74:	4603      	mov	r3, r0
 8000e76:	460c      	mov	r4, r1
 8000e78:	4618      	mov	r0, r3
 8000e7a:	4621      	mov	r1, r4
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	4b48      	ldr	r3, [pc, #288]	; (8000fa4 <pwmAngleCalc+0x3e4>)
 8000e82:	f002 fd5b 	bl	800393c <__adddf3>
 8000e86:	4603      	mov	r3, r0
 8000e88:	460c      	mov	r4, r1
 8000e8a:	4a47      	ldr	r2, [pc, #284]	; (8000fa8 <pwmAngleCalc+0x3e8>)
 8000e8c:	e9c2 3400 	strd	r3, r4, [r2]
    signal2 = (90.00+pitch) * SERVOLOLINEAR + SERVOLO0;
 8000e90:	f04f 0200 	mov.w	r2, #0
 8000e94:	4b42      	ldr	r3, [pc, #264]	; (8000fa0 <pwmAngleCalc+0x3e0>)
 8000e96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e9a:	f002 fd4f 	bl	800393c <__adddf3>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	460c      	mov	r4, r1
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	a336      	add	r3, pc, #216	; (adr r3, 8000f80 <pwmAngleCalc+0x3c0>)
 8000ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eac:	f002 fef8 	bl	8003ca0 <__aeabi_dmul>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	460c      	mov	r4, r1
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	4621      	mov	r1, r4
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	4b39      	ldr	r3, [pc, #228]	; (8000fa4 <pwmAngleCalc+0x3e4>)
 8000ebe:	f002 fd3d 	bl	800393c <__adddf3>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460c      	mov	r4, r1
 8000ec6:	4a39      	ldr	r2, [pc, #228]	; (8000fac <pwmAngleCalc+0x3ec>)
 8000ec8:	e9c2 3400 	strd	r3, r4, [r2]

    signal1 = (int)(signal1 * RNDFACTOR + 0.5) / RNDFACTOR;
 8000ecc:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <pwmAngleCalc+0x3e8>)
 8000ece:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	4b36      	ldr	r3, [pc, #216]	; (8000fb0 <pwmAngleCalc+0x3f0>)
 8000ed8:	f002 fee2 	bl	8003ca0 <__aeabi_dmul>
 8000edc:	4603      	mov	r3, r0
 8000ede:	460c      	mov	r4, r1
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	4621      	mov	r1, r4
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <pwmAngleCalc+0x3f4>)
 8000eea:	f002 fd27 	bl	800393c <__adddf3>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460c      	mov	r4, r1
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	4621      	mov	r1, r4
 8000ef6:	f003 f983 	bl	8004200 <__aeabi_d2iz>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f002 fe69 	bl	8003bd4 <__aeabi_i2d>
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <pwmAngleCalc+0x3f0>)
 8000f08:	f002 fff4 	bl	8003ef4 <__aeabi_ddiv>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	460c      	mov	r4, r1
 8000f10:	4a25      	ldr	r2, [pc, #148]	; (8000fa8 <pwmAngleCalc+0x3e8>)
 8000f12:	e9c2 3400 	strd	r3, r4, [r2]
    signal2 = (int)(signal2 * RNDFACTOR + 0.5) / RNDFACTOR;
 8000f16:	4b25      	ldr	r3, [pc, #148]	; (8000fac <pwmAngleCalc+0x3ec>)
 8000f18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <pwmAngleCalc+0x3f0>)
 8000f22:	f002 febd 	bl	8003ca0 <__aeabi_dmul>
 8000f26:	4603      	mov	r3, r0
 8000f28:	460c      	mov	r4, r1
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <pwmAngleCalc+0x3f4>)
 8000f34:	f002 fd02 	bl	800393c <__adddf3>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	460c      	mov	r4, r1
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	4621      	mov	r1, r4
 8000f40:	f003 f95e 	bl	8004200 <__aeabi_d2iz>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 fe44 	bl	8003bd4 <__aeabi_i2d>
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <pwmAngleCalc+0x3f0>)
 8000f52:	f002 ffcf 	bl	8003ef4 <__aeabi_ddiv>
 8000f56:	4603      	mov	r3, r0
 8000f58:	460c      	mov	r4, r1
 8000f5a:	4a14      	ldr	r2, [pc, #80]	; (8000fac <pwmAngleCalc+0x3ec>)
 8000f5c:	e9c2 3400 	strd	r3, r4, [r2]
}
 8000f60:	bf00      	nop
 8000f62:	3734      	adds	r7, #52	; 0x34
 8000f64:	46bd      	mov	sp, r7
 8000f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f6a:	bf00      	nop
 8000f6c:	f3af 8000 	nop.w
 8000f70:	54524550 	.word	0x54524550
 8000f74:	400921fb 	.word	0x400921fb
 8000f78:	a14cec42 	.word	0xa14cec42
 8000f7c:	3fab1af3 	.word	0x3fab1af3
 8000f80:	9999999a 	.word	0x9999999a
 8000f84:	3fa99999 	.word	0x3fa99999
 8000f88:	40668000 	.word	0x40668000
 8000f8c:	20000aac 	.word	0x20000aac
 8000f90:	20000a58 	.word	0x20000a58
 8000f94:	20000a60 	.word	0x20000a60
 8000f98:	20000ad6 	.word	0x20000ad6
 8000f9c:	400c0000 	.word	0x400c0000
 8000fa0:	40568000 	.word	0x40568000
 8000fa4:	40080000 	.word	0x40080000
 8000fa8:	20000ae0 	.word	0x20000ae0
 8000fac:	20000ac8 	.word	0x20000ac8
 8000fb0:	40590000 	.word	0x40590000
 8000fb4:	3fe00000 	.word	0x3fe00000
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	40bffe00 	.word	0x40bffe00

08000fc0 <readButtonDebounce>:
 * @param	none
 * @return	none
 *
 */
void readButtonDebounce()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    readButtonDebounceXMC();
 8000fc4:	f000 fa64 	bl	8001490 <readButtonDebounceXMC>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <inputInit>:
 * @param	none
 * @return	none
 *
 */
void inputInit()
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
    inputInitXMC();
 8000fd0:	f000 fae8 	bl	80015a4 <inputInitXMC>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <circularAdd>:
 * @brief  	add element to circular buffer
 * @param  	8 bit value for buffer
 * @return 	1 if OK, 0 if KO
 */
uint8_t circularAdd (uint8_t item)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
    if (full)
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <circularAdd+0x6c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <circularAdd+0x16>
    {
        return 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e023      	b.n	8001036 <circularAdd+0x5e>
    }
    inix = (inix + 1) % CBSIZE;
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <circularAdd+0x70>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <circularAdd+0x74>)
 8000ff6:	fb83 1302 	smull	r1, r3, r3, r2
 8000ffa:	1099      	asrs	r1, r3, #2
 8000ffc:	17d3      	asrs	r3, r2, #31
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	460b      	mov	r3, r1
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	1ad1      	subs	r1, r2, r3
 800100a:	b2ca      	uxtb	r2, r1
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <circularAdd+0x70>)
 800100e:	701a      	strb	r2, [r3, #0]
    cb[inix] = item;
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <circularAdd+0x70>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <circularAdd+0x78>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	5453      	strb	r3, [r2, r1]
    if (inix == outix)
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <circularAdd+0x70>)
 800101e:	781a      	ldrb	r2, [r3, #0]
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <circularAdd+0x7c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	429a      	cmp	r2, r3
 8001026:	d102      	bne.n	800102e <circularAdd+0x56>
    {
        full = 1;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <circularAdd+0x6c>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
    }
    empty = 0;
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <circularAdd+0x80>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
    return 1;
 8001034:	2301      	movs	r3, #1
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000ab0 	.word	0x20000ab0
 8001048:	20000ad2 	.word	0x20000ad2
 800104c:	66666667 	.word	0x66666667
 8001050:	20000ab4 	.word	0x20000ab4
 8001054:	20000aa9 	.word	0x20000aa9
 8001058:	20000ae8 	.word	0x20000ae8

0800105c <circularGet>:
 * @brief 	read element from circular buffer
 * @param 	pointer to the 8-bit value
 * @return 	1 if OK, 0 if KO
 */
uint8_t circularGet (uint8_t *pItem)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
    if (empty)
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <circularGet+0x6c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <circularGet+0x14>
    {
        return 0;
 800106c:	2300      	movs	r3, #0
 800106e:	e024      	b.n	80010ba <circularGet+0x5e>
    }
    outix = (outix + 1) % CBSIZE;
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <circularGet+0x70>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <circularGet+0x74>)
 8001078:	fb83 1302 	smull	r1, r3, r3, r2
 800107c:	1099      	asrs	r1, r3, #2
 800107e:	17d3      	asrs	r3, r2, #31
 8001080:	1ac9      	subs	r1, r1, r3
 8001082:	460b      	mov	r3, r1
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	1ad1      	subs	r1, r2, r3
 800108c:	b2ca      	uxtb	r2, r1
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <circularGet+0x70>)
 8001090:	701a      	strb	r2, [r3, #0]
    *pItem = cb[outix];
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <circularGet+0x70>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <circularGet+0x78>)
 800109a:	5c9a      	ldrb	r2, [r3, r2]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	701a      	strb	r2, [r3, #0]
    if (outix == inix)
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <circularGet+0x70>)
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <circularGet+0x7c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d102      	bne.n	80010b2 <circularGet+0x56>
    {
        empty = 1;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <circularGet+0x6c>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
    }
    full = 0;
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <circularGet+0x80>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
    return 1;
 80010b8:	2301      	movs	r3, #1
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000ae8 	.word	0x20000ae8
 80010cc:	20000aa9 	.word	0x20000aa9
 80010d0:	66666667 	.word	0x66666667
 80010d4:	20000ab4 	.word	0x20000ab4
 80010d8:	20000ad2 	.word	0x20000ad2
 80010dc:	20000ab0 	.word	0x20000ab0

080010e0 <P1_1_set_mode>:

__STATIC_INLINE uint32_t P1_0_read(void){
    return(PORT1->IN & 0x00000001UL);
}

__STATIC_INLINE void P1_1_set_mode(uint8_t mode){
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
    PORT1->IOCR0 &= ~0x0000f800UL;
 80010ea:	4a09      	ldr	r2, [pc, #36]	; (8001110 <P1_1_set_mode+0x30>)
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <P1_1_set_mode+0x30>)
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80010f4:	6113      	str	r3, [r2, #16]
    PORT1->IOCR0 |= mode << 8;
 80010f6:	4906      	ldr	r1, [pc, #24]	; (8001110 <P1_1_set_mode+0x30>)
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <P1_1_set_mode+0x30>)
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	79fa      	ldrb	r2, [r7, #7]
 80010fe:	0212      	lsls	r2, r2, #8
 8001100:	4313      	orrs	r3, r2
 8001102:	610b      	str	r3, [r1, #16]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	48028100 	.word	0x48028100

08001114 <P1_1_set_driver_strength>:

__STATIC_INLINE void P1_1_set_driver_strength(uint8_t strength){
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
    PORT1->PDR0 &= ~0x00000070UL;
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <P1_1_set_driver_strength+0x30>)
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <P1_1_set_driver_strength+0x30>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
    PORT1->PDR0 |= strength << 4;
 800112a:	4906      	ldr	r1, [pc, #24]	; (8001144 <P1_1_set_driver_strength+0x30>)
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <P1_1_set_driver_strength+0x30>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	79fa      	ldrb	r2, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	4313      	orrs	r3, r2
 8001136:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	48028100 	.word	0x48028100

08001148 <P1_1_reset>:

__STATIC_INLINE void P1_1_set(void){
    PORT1->OMR = 0x00000002UL;
}

__STATIC_INLINE void P1_1_reset(void){
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
    PORT1->OMR = 0x00020000UL;
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <P1_1_reset+0x18>)
 800114e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001152:	605a      	str	r2, [r3, #4]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	48028100 	.word	0x48028100

08001164 <P1_2_set_mode>:

__STATIC_INLINE uint32_t P1_1_read(void){
    return(PORT1->IN & 0x00000002UL);
}

__STATIC_INLINE void P1_2_set_mode(uint8_t mode){
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
    PORT1->IOCR0 &= ~0x00f80000UL;
 800116e:	4a09      	ldr	r2, [pc, #36]	; (8001194 <P1_2_set_mode+0x30>)
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <P1_2_set_mode+0x30>)
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 8001178:	6113      	str	r3, [r2, #16]
    PORT1->IOCR0 |= mode << 16;
 800117a:	4906      	ldr	r1, [pc, #24]	; (8001194 <P1_2_set_mode+0x30>)
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <P1_2_set_mode+0x30>)
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	79fa      	ldrb	r2, [r7, #7]
 8001182:	0412      	lsls	r2, r2, #16
 8001184:	4313      	orrs	r3, r2
 8001186:	610b      	str	r3, [r1, #16]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	48028100 	.word	0x48028100

08001198 <P1_2_set_driver_strength>:

__STATIC_INLINE void P1_2_set_driver_strength(uint8_t strength){
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
    PORT1->PDR0 &= ~0x00000700UL;
 80011a2:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <P1_2_set_driver_strength+0x30>)
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <P1_2_set_driver_strength+0x30>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
    PORT1->PDR0 |= strength << 8;
 80011ae:	4906      	ldr	r1, [pc, #24]	; (80011c8 <P1_2_set_driver_strength+0x30>)
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <P1_2_set_driver_strength+0x30>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	79fa      	ldrb	r2, [r7, #7]
 80011b6:	0212      	lsls	r2, r2, #8
 80011b8:	4313      	orrs	r3, r2
 80011ba:	640b      	str	r3, [r1, #64]	; 0x40
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	48028100 	.word	0x48028100

080011cc <P1_2_reset>:

__STATIC_INLINE void P1_2_set(void){
    PORT1->OMR = 0x00000004UL;
}

__STATIC_INLINE void P1_2_reset(void){
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
    PORT1->OMR = 0x00040000UL;
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <P1_2_reset+0x18>)
 80011d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011d6:	605a      	str	r2, [r3, #4]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	48028100 	.word	0x48028100

080011e8 <initServoPWMXMC>:
 * @param	none
 * @return	none
 *
 */
void initServoPWMXMC()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    // onboard alternate function 3 at CCU40 slice 1 = CCU40.OUT1 = CCU40.CC41
    // onboard alternate function 3 at CCU40 slice 2 = CCU40.OUT2 = CCU40.CC42

    P1_1_set_mode(OUTPUT_PP_AF3);
 80011ec:	2098      	movs	r0, #152	; 0x98
 80011ee:	f7ff ff77 	bl	80010e0 <P1_1_set_mode>
    P1_1_set_driver_strength(STRONG);
 80011f2:	2002      	movs	r0, #2
 80011f4:	f7ff ff8e 	bl	8001114 <P1_1_set_driver_strength>
    P1_1_reset();
 80011f8:	f7ff ffa6 	bl	8001148 <P1_1_reset>

    P1_2_set_mode(OUTPUT_PP_AF3);
 80011fc:	2098      	movs	r0, #152	; 0x98
 80011fe:	f7ff ffb1 	bl	8001164 <P1_2_set_mode>
    P1_2_set_driver_strength(STRONG);
 8001202:	2002      	movs	r0, #2
 8001204:	f7ff ffc8 	bl	8001198 <P1_2_set_driver_strength>
    P1_2_reset();
 8001208:	f7ff ffe0 	bl	80011cc <P1_2_reset>

    // setup CC40 unit with shadow transfer

    SCU_RESET->PRSET0 |= (1 << SCU_RESET_PRSET0_CCU40RS_Pos);		// peripheral 0 reset set - CCU40RS - CCU40 timer
 800120c:	4a2e      	ldr	r2, [pc, #184]	; (80012c8 <initServoPWMXMC+0xe0>)
 800120e:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <initServoPWMXMC+0xe0>)
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	6113      	str	r3, [r2, #16]
    SCU_RESET->PRCLR0 |= (1 << SCU_RESET_PRCLR0_CCU40RS_Pos);		// peripheral 0 reset clear - CCU40RS - CCU40 timer
 8001218:	4a2b      	ldr	r2, [pc, #172]	; (80012c8 <initServoPWMXMC+0xe0>)
 800121a:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <initServoPWMXMC+0xe0>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6153      	str	r3, [r2, #20]
    SCU_CLK->CLKSET = (1 << SCU_CLK_CLKSET_CCUCEN_Pos); 			// clock enable register CCUCEN - CCU clock enabled
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <initServoPWMXMC+0xe4>)
 8001226:	2210      	movs	r2, #16
 8001228:	605a      	str	r2, [r3, #4]
    CCU40->GIDLC |= (1 << CCU4_GIDLC_SPRB_Pos); 					// global idle clear - SPRB - prescaler run bit set
 800122a:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <initServoPWMXMC+0xe8>)
 800122c:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <initServoPWMXMC+0xe8>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001234:	60d3      	str	r3, [r2, #12]

    CCU40_CC41->PSC = PRESCALER;
 8001236:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <initServoPWMXMC+0xec>)
 8001238:	2208      	movs	r2, #8
 800123a:	625a      	str	r2, [r3, #36]	; 0x24
    CCU40_CC42->PSC = PRESCALER; 									// prescaler control - 0 - CCU40.OUT2
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <initServoPWMXMC+0xf0>)
 800123e:	2208      	movs	r2, #8
 8001240:	625a      	str	r2, [r3, #36]	; 0x24

    CCU40_CC41->TC |= (1 << CCU4_CC4_TC_CLST_Pos);
 8001242:	4a24      	ldr	r2, [pc, #144]	; (80012d4 <initServoPWMXMC+0xec>)
 8001244:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <initServoPWMXMC+0xec>)
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6153      	str	r3, [r2, #20]
    CCU40_CC42->TC |= (1 << CCU4_CC4_TC_CLST_Pos); 					// slice timer control - CLST - shadow transfer on clear - CCU40.OUT2
 800124e:	4a22      	ldr	r2, [pc, #136]	; (80012d8 <initServoPWMXMC+0xf0>)
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <initServoPWMXMC+0xf0>)
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	6153      	str	r3, [r2, #20]

    CCU40->GIDLC |= (1 << CCU4_GIDLC_CS1I_Pos);
 800125a:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <initServoPWMXMC+0xe8>)
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <initServoPWMXMC+0xe8>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	60d3      	str	r3, [r2, #12]
    CCU40->GIDLC |= (1 << CCU4_GIDLC_CS2I_Pos); 					// global idle clear - C2SI - CC43 idle mode clear - CCU40.OUT2
 8001266:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <initServoPWMXMC+0xe8>)
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <initServoPWMXMC+0xe8>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	60d3      	str	r3, [r2, #12]

    SCU_GENERAL->CCUCON |= (1 << SCU_GENERAL_CCUCON_GSC40_Pos);		// CCU control register - GSC40 - global start control CCU40
 8001272:	4a1a      	ldr	r2, [pc, #104]	; (80012dc <initServoPWMXMC+0xf4>)
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <initServoPWMXMC+0xf4>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	64d3      	str	r3, [r2, #76]	; 0x4c

    CCU40_CC41->PRS = COUNTER;
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <initServoPWMXMC+0xec>)
 8001280:	f242 429f 	movw	r2, #9375	; 0x249f
 8001284:	635a      	str	r2, [r3, #52]	; 0x34
    CCU40_CC42->PRS = COUNTER; 										// period register - timer shadow period value - CCU40.OUT2
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <initServoPWMXMC+0xf0>)
 8001288:	f242 429f 	movw	r2, #9375	; 0x249f
 800128c:	635a      	str	r2, [r3, #52]	; 0x34

    CCU40_CC41->TCSET = 1;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <initServoPWMXMC+0xec>)
 8001290:	2201      	movs	r2, #1
 8001292:	60da      	str	r2, [r3, #12]
    CCU40_CC42->TCSET = 1;											// slice timer run set - CCU40.OUT2
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <initServoPWMXMC+0xf0>)
 8001296:	2201      	movs	r2, #1
 8001298:	60da      	str	r2, [r3, #12]

    CCU40_CC41->CRS = COUNTER;
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <initServoPWMXMC+0xec>)
 800129c:	f242 429f 	movw	r2, #9375	; 0x249f
 80012a0:	63da      	str	r2, [r3, #60]	; 0x3c
    CCU40_CC42->CRS = COUNTER;										// compare register - timer shadow compare value - CCU40.OUT2
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <initServoPWMXMC+0xf0>)
 80012a4:	f242 429f 	movw	r2, #9375	; 0x249f
 80012a8:	63da      	str	r2, [r3, #60]	; 0x3c

    CCU40->GCSS |= (1 << CCU4_GCSS_S1SE_Pos);
 80012aa:	4a09      	ldr	r2, [pc, #36]	; (80012d0 <initServoPWMXMC+0xe8>)
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <initServoPWMXMC+0xe8>)
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	f043 0310 	orr.w	r3, r3, #16
 80012b4:	6113      	str	r3, [r2, #16]
    CCU40->GCSS |= (1 << CCU4_GCSS_S2SE_Pos); 						// global channel set - S3SE slice 2 shadow transfer set enable
 80012b6:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <initServoPWMXMC+0xe8>)
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <initServoPWMXMC+0xe8>)
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c0:	6113      	str	r3, [r2, #16]
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	50004400 	.word	0x50004400
 80012cc:	50004600 	.word	0x50004600
 80012d0:	4000c000 	.word	0x4000c000
 80012d4:	4000c200 	.word	0x4000c200
 80012d8:	4000c300 	.word	0x4000c300
 80012dc:	50004000 	.word	0x50004000

080012e0 <pwmXMC>:
 * @return	1 if wrong PWM dutycycle given <br>
			0 if correct PWM dutycycle given <br>
 *
 */
uint8_t pwmXMC(double dutycycle, uint8_t out)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80012ea:	4613      	mov	r3, r2
 80012ec:	71fb      	strb	r3, [r7, #7]
    double dcCalc = 0;
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	f04f 0400 	mov.w	r4, #0
 80012f6:	e9c7 3406 	strd	r3, r4, [r7, #24]
    uint32_t intdcCalc = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]

    if (dutycycle < 0 || dutycycle > 100)
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	f04f 0300 	mov.w	r3, #0
 8001306:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800130a:	f002 ff3b 	bl	8004184 <__aeabi_dcmplt>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d109      	bne.n	8001328 <pwmXMC+0x48>
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <pwmXMC+0xe0>)
 800131a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800131e:	f002 ff4f 	bl	80041c0 <__aeabi_dcmpgt>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <pwmXMC+0x4c>
    {
        return 1;
 8001328:	2301      	movs	r3, #1
 800132a:	e03a      	b.n	80013a2 <pwmXMC+0xc2>
    }

    dcCalc = COUNTER - (COUNTER * dutycycle * 0.01);
 800132c:	a320      	add	r3, pc, #128	; (adr r3, 80013b0 <pwmXMC+0xd0>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001336:	f002 fcb3 	bl	8003ca0 <__aeabi_dmul>
 800133a:	4603      	mov	r3, r0
 800133c:	460c      	mov	r4, r1
 800133e:	4618      	mov	r0, r3
 8001340:	4621      	mov	r1, r4
 8001342:	a31d      	add	r3, pc, #116	; (adr r3, 80013b8 <pwmXMC+0xd8>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f002 fcaa 	bl	8003ca0 <__aeabi_dmul>
 800134c:	4603      	mov	r3, r0
 800134e:	460c      	mov	r4, r1
 8001350:	461a      	mov	r2, r3
 8001352:	4623      	mov	r3, r4
 8001354:	a116      	add	r1, pc, #88	; (adr r1, 80013b0 <pwmXMC+0xd0>)
 8001356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800135a:	f002 faed 	bl	8003938 <__aeabi_dsub>
 800135e:	4603      	mov	r3, r0
 8001360:	460c      	mov	r4, r1
 8001362:	e9c7 3406 	strd	r3, r4, [r7, #24]
    intdcCalc = (uint32_t)dcCalc;
 8001366:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800136a:	f002 ff71 	bl	8004250 <__aeabi_d2uiz>
 800136e:	4603      	mov	r3, r0
 8001370:	617b      	str	r3, [r7, #20]

    if (out == 0)
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d10a      	bne.n	800138e <pwmXMC+0xae>
    {
        CCU40_CC42->CRS = intdcCalc;									// compare register - timer shadow compare value - CCU40.OUT2
 8001378:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <pwmXMC+0xe4>)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	63d3      	str	r3, [r2, #60]	; 0x3c
        CCU40->GCSS |= (1<<CCU4_GCSS_S2SE_Pos); 						// global channel set - S2SE slice 2 shadow transfer set enable
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <pwmXMC+0xe8>)
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <pwmXMC+0xe8>)
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001388:	6113      	str	r3, [r2, #16]
        return 0;
 800138a:	2300      	movs	r3, #0
 800138c:	e009      	b.n	80013a2 <pwmXMC+0xc2>
    }
    else
    {
        CCU40_CC41->CRS = intdcCalc;									// compare register - timer shadow compare value - CCU40.OUT1
 800138e:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <pwmXMC+0xec>)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	63d3      	str	r3, [r2, #60]	; 0x3c
        CCU40->GCSS |= (1<<CCU4_GCSS_S1SE_Pos);							// global channel set - S1SE slice 1 shadow transfer set enable
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <pwmXMC+0xe8>)
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <pwmXMC+0xe8>)
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	f043 0310 	orr.w	r3, r3, #16
 800139e:	6113      	str	r3, [r2, #16]
        return 0;
 80013a0:	2300      	movs	r3, #0
    }
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3724      	adds	r7, #36	; 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd90      	pop	{r4, r7, pc}
 80013aa:	bf00      	nop
 80013ac:	f3af 8000 	nop.w
 80013b0:	00000000 	.word	0x00000000
 80013b4:	40c24f80 	.word	0x40c24f80
 80013b8:	47ae147b 	.word	0x47ae147b
 80013bc:	3f847ae1 	.word	0x3f847ae1
 80013c0:	40590000 	.word	0x40590000
 80013c4:	4000c300 	.word	0x4000c300
 80013c8:	4000c000 	.word	0x4000c000
 80013cc:	4000c200 	.word	0x4000c200

080013d0 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	2201      	movs	r2, #1
 80013e0:	409a      	lsls	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	605a      	str	r2, [r3, #4]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop

080013f4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001406:	409a      	lsls	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	605a      	str	r2, [r3, #4]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8001424:	78fb      	ldrb	r3, [r7, #3]
 8001426:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800142a:	409a      	lsls	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	605a      	str	r2, [r3, #4]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	fa22 f303 	lsr.w	r3, r2, r3
 8001452:	f003 0301 	and.w	r3, r3, #1
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop

08001464 <outputInitXMC>:
 * @param	none
 * @return	none
 *
 */
void outputInitXMC(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
    XMC_GPIO_CONFIG_t config_out;
    config_out.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	713b      	strb	r3, [r7, #4]
    config_out.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 800146e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001472:	60bb      	str	r3, [r7, #8]
    config_out.output_strength = XMC_GPIO_OUTPUT_STRENGTH_WEAK;
 8001474:	2307      	movs	r3, #7
 8001476:	733b      	strb	r3, [r7, #12]
    XMC_GPIO_Init(LED1, &config_out);
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	461a      	mov	r2, r3
 800147c:	2100      	movs	r1, #0
 800147e:	4803      	ldr	r0, [pc, #12]	; (800148c <outputInitXMC+0x28>)
 8001480:	f001 fb0c 	bl	8002a9c <XMC_GPIO_Init>
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	48028100 	.word	0x48028100

08001490 <readButtonDebounceXMC>:
 * @param	none
 * @return	none
 *
 */
void readButtonDebounceXMC()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
    if ((XMC_GPIO_GetInput(BUTTON1) == 0) && (button1pressed == 0))
 8001494:	210e      	movs	r1, #14
 8001496:	4830      	ldr	r0, [pc, #192]	; (8001558 <readButtonDebounceXMC+0xc8>)
 8001498:	f7ff ffd0 	bl	800143c <XMC_GPIO_GetInput>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <readButtonDebounceXMC+0x20>
 80014a2:	4b2e      	ldr	r3, [pc, #184]	; (800155c <readButtonDebounceXMC+0xcc>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <readButtonDebounceXMC+0x20>
    {
        button1pressed = 1;
 80014aa:	4b2c      	ldr	r3, [pc, #176]	; (800155c <readButtonDebounceXMC+0xcc>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON1) == 0) && (button1pressed == 1))
 80014b0:	210e      	movs	r1, #14
 80014b2:	4829      	ldr	r0, [pc, #164]	; (8001558 <readButtonDebounceXMC+0xc8>)
 80014b4:	f7ff ffc2 	bl	800143c <XMC_GPIO_GetInput>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d106      	bne.n	80014cc <readButtonDebounceXMC+0x3c>
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <readButtonDebounceXMC+0xcc>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d102      	bne.n	80014cc <readButtonDebounceXMC+0x3c>
    {
        button1pressed = 2;
 80014c6:	4b25      	ldr	r3, [pc, #148]	; (800155c <readButtonDebounceXMC+0xcc>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON1) == 1) && (button1pressed == 2))
 80014cc:	210e      	movs	r1, #14
 80014ce:	4822      	ldr	r0, [pc, #136]	; (8001558 <readButtonDebounceXMC+0xc8>)
 80014d0:	f7ff ffb4 	bl	800143c <XMC_GPIO_GetInput>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d10c      	bne.n	80014f4 <readButtonDebounceXMC+0x64>
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <readButtonDebounceXMC+0xcc>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d108      	bne.n	80014f4 <readButtonDebounceXMC+0x64>
    {
        if (circularAdd(BUTTON1INT) == 1)
 80014e2:	200e      	movs	r0, #14
 80014e4:	f7ff fd78 	bl	8000fd8 <circularAdd>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d102      	bne.n	80014f4 <readButtonDebounceXMC+0x64>
        {
            button1pressed = 0;
 80014ee:	4b1b      	ldr	r3, [pc, #108]	; (800155c <readButtonDebounceXMC+0xcc>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
        }
    }

    if ((XMC_GPIO_GetInput(BUTTON2) == 0) && (button2pressed == 0))
 80014f4:	210f      	movs	r1, #15
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <readButtonDebounceXMC+0xc8>)
 80014f8:	f7ff ffa0 	bl	800143c <XMC_GPIO_GetInput>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d106      	bne.n	8001510 <readButtonDebounceXMC+0x80>
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <readButtonDebounceXMC+0xd0>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <readButtonDebounceXMC+0x80>
    {
        button2pressed = 1;
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <readButtonDebounceXMC+0xd0>)
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON2) == 0) && (button2pressed == 1))
 8001510:	210f      	movs	r1, #15
 8001512:	4811      	ldr	r0, [pc, #68]	; (8001558 <readButtonDebounceXMC+0xc8>)
 8001514:	f7ff ff92 	bl	800143c <XMC_GPIO_GetInput>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <readButtonDebounceXMC+0x9c>
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <readButtonDebounceXMC+0xd0>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d102      	bne.n	800152c <readButtonDebounceXMC+0x9c>
    {
        button2pressed = 2;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <readButtonDebounceXMC+0xd0>)
 8001528:	2202      	movs	r2, #2
 800152a:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON2) == 1) && (button2pressed == 2))
 800152c:	210f      	movs	r1, #15
 800152e:	480a      	ldr	r0, [pc, #40]	; (8001558 <readButtonDebounceXMC+0xc8>)
 8001530:	f7ff ff84 	bl	800143c <XMC_GPIO_GetInput>
 8001534:	4603      	mov	r3, r0
 8001536:	2b01      	cmp	r3, #1
 8001538:	d10c      	bne.n	8001554 <readButtonDebounceXMC+0xc4>
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <readButtonDebounceXMC+0xd0>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d108      	bne.n	8001554 <readButtonDebounceXMC+0xc4>
    {
        if (circularAdd(BUTTON2INT) == 1)
 8001542:	200f      	movs	r0, #15
 8001544:	f7ff fd48 	bl	8000fd8 <circularAdd>
 8001548:	4603      	mov	r3, r0
 800154a:	2b01      	cmp	r3, #1
 800154c:	d102      	bne.n	8001554 <readButtonDebounceXMC+0xc4>
        {
            button2pressed = 0;
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <readButtonDebounceXMC+0xd0>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	48028100 	.word	0x48028100
 800155c:	20000ad0 	.word	0x20000ad0
 8001560:	20000ac4 	.word	0x20000ac4

08001564 <ledSettingXMC>:
 *			other for LED toggle <br>
 * @return	none
 *
 */
void ledSettingXMC(uint8_t ledState)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
    if (ledState == 0)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d104      	bne.n	800157e <ledSettingXMC+0x1a>
    {
        XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
 8001574:	2100      	movs	r1, #0
 8001576:	480a      	ldr	r0, [pc, #40]	; (80015a0 <ledSettingXMC+0x3c>)
 8001578:	f7ff ff3c 	bl	80013f4 <XMC_GPIO_SetOutputLow>
    }
    else
    {
        XMC_GPIO_ToggleOutput(LED1);
    }
}
 800157c:	e00b      	b.n	8001596 <ledSettingXMC+0x32>
{
    if (ledState == 0)
    {
        XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
    }
    else if (ledState == 1)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d104      	bne.n	800158e <ledSettingXMC+0x2a>
    {
        XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
 8001584:	2100      	movs	r1, #0
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <ledSettingXMC+0x3c>)
 8001588:	f7ff ff22 	bl	80013d0 <XMC_GPIO_SetOutputHigh>
    }
    else
    {
        XMC_GPIO_ToggleOutput(LED1);
    }
}
 800158c:	e003      	b.n	8001596 <ledSettingXMC+0x32>
    {
        XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
    }
    else
    {
        XMC_GPIO_ToggleOutput(LED1);
 800158e:	2100      	movs	r1, #0
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <ledSettingXMC+0x3c>)
 8001592:	f7ff ff41 	bl	8001418 <XMC_GPIO_ToggleOutput>
    }
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	48028100 	.word	0x48028100

080015a4 <inputInitXMC>:
 * @param	none
 * @return	none
 *
 */
void inputInitXMC()
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
    XMC_GPIO_CONFIG_t config_in;
    config_in.mode = XMC_GPIO_MODE_INPUT_INVERTED_PULL_UP;
 80015aa:	2330      	movs	r3, #48	; 0x30
 80015ac:	713b      	strb	r3, [r7, #4]
    XMC_GPIO_Init(BUTTON1, &config_in);
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	461a      	mov	r2, r3
 80015b2:	210e      	movs	r1, #14
 80015b4:	4806      	ldr	r0, [pc, #24]	; (80015d0 <inputInitXMC+0x2c>)
 80015b6:	f001 fa71 	bl	8002a9c <XMC_GPIO_Init>
    XMC_GPIO_Init(BUTTON2, &config_in);
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	461a      	mov	r2, r3
 80015be:	210f      	movs	r1, #15
 80015c0:	4803      	ldr	r0, [pc, #12]	; (80015d0 <inputInitXMC+0x2c>)
 80015c2:	f001 fa6b 	bl	8002a9c <XMC_GPIO_Init>
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	48028100 	.word	0x48028100

080015d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d013      	beq.n	8001614 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80015ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80015f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80015f4:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00b      	beq.n	8001614 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80015fc:	e000      	b.n	8001600 <ITM_SendChar+0x2c>
    {
      __NOP();
 80015fe:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001600:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f9      	beq.n	80015fe <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800160a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001614:	687b      	ldr	r3, [r7, #4]
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop

08001624 <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
    // P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
    // PORT2->HWSEL ... clear bits [3:2]
    PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 8001628:	4a1d      	ldr	r2, [pc, #116]	; (80016a0 <initRetargetSwo+0x7c>)
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <initRetargetSwo+0x7c>)
 800162c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162e:	f023 030c 	bic.w	r3, r3, #12
 8001632:	6753      	str	r3, [r2, #116]	; 0x74
    // PORT2->HWSEL ... set bit [2] -> HWO0
    PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 8001634:	4a1a      	ldr	r2, [pc, #104]	; (80016a0 <initRetargetSwo+0x7c>)
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <initRetargetSwo+0x7c>)
 8001638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	6753      	str	r3, [r2, #116]	; 0x74

    // Enable trace systems
    // Source: ARMv7-M Architecture Reference Manual
    // DEMCR = Debug Exception and Monitor Control Register
    //         TRCENA ... global enable for DWT and ITM blocks
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001640:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <initRetargetSwo+0x80>)
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <initRetargetSwo+0x80>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164a:	60d3      	str	r3, [r2, #12]
    // SWO baud rate prescaler value
    // ACPR = Asynchronous Clock Prescaler Register
    //        fSWO = fCPU / (SWOSCALAR + 1)
    //        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
    //        fCPU = 120MHz
    TPI->ACPR = 119UL;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <initRetargetSwo+0x84>)
 800164e:	2277      	movs	r2, #119	; 0x77
 8001650:	611a      	str	r2, [r3, #16]
    // Source: ARMv7-M Architecture Reference Manual
    // SPPR = Selected Pin Control Register
    //        0x0 ... Synchronous Trace Port Mode
    //        0x1 ... Asynchronous Serial Wire Output (Manchester)
    //        0x2 ... Asynchronous Serial Wire Output (NRZ)
    TPI->SPPR = 0x2UL;
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <initRetargetSwo+0x84>)
 8001654:	2202      	movs	r2, #2
 8001656:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    // Source: ARM Cortex-M4 Processor Technical Reference Manual
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    // FFCR = Formatter and Flash Control Register
    //        0x0 ... continuous formatting disabled
    //        0x1 ... continuous formatting enabled
    TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 800165a:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <initRetargetSwo+0x84>)
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <initRetargetSwo+0x84>)
 800165e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8001662:	f023 0302 	bic.w	r3, r3, #2
 8001666:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

    // Unlock ITM
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    ITM->LAR = 0xC5ACCE55;
 800166a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800166e:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <initRetargetSwo+0x88>)
 8001670:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TCR = Trace Control Register
    //       ITMENA ... enable ITM
    ITM->TCR |= ITM_TCR_ITMENA_Msk;
 8001674:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001678:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800167c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TER = Trace Enable Register
    //       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
    ITM->TER = 0xFFFFFFFF;
 8001688:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	48028200 	.word	0x48028200
 80016a4:	e000edf0 	.word	0xe000edf0
 80016a8:	e0040000 	.word	0xe0040000
 80016ac:	c5acce55 	.word	0xc5acce55

080016b0 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
    int i;

    for (i = 0; i < nbytes; i++) {
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	e009      	b.n	80016d6 <_write+0x26>
        ITM_SendChar ( (*buf++));
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	60ba      	str	r2, [r7, #8]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff82 	bl	80015d4 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
    int i;

    for (i = 0; i < nbytes; i++) {
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3301      	adds	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	dbf1      	blt.n	80016c2 <_write+0x12>
        ITM_SendChar ( (*buf++));
    }
    return nbytes;
 80016de:	687b      	ldr	r3, [r7, #4]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
 80016f4:	4613      	mov	r3, r2
 80016f6:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80016f8:	78f8      	ldrb	r0, [r7, #3]
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	3306      	adds	r3, #6
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800170a:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800170c:	431a      	orrs	r2, r3
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	1d83      	adds	r3, r0, #6
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001730:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	f023 020f 	bic.w	r2, r3, #15
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8001770:	2104      	movs	r1, #4
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffe4 	bl	8001740 <XMC_USIC_CH_SetMode>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <XMC_I2C_CH_SetInputSource>:
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 *
 */
__STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT_t input, const uint8_t source)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
 800178c:	4613      	mov	r3, r2
 800178e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX0CR_DSEN_Msk;
 8001790:	78f8      	ldrb	r0, [r7, #3]
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	3306      	adds	r3, #6
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80017a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	1d83      	adds	r3, r0, #6
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 80017b0:	78ba      	ldrb	r2, [r7, #2]
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	4619      	mov	r1, r3
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ff96 	bl	80016e8 <XMC_USIC_CH_SetInputSource>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop

08001800 <_init_i2c1_ch0>:
 *         P0_5 & P0_11
 *  @param none
 *  @return on success this function returns 0
 */
uint8_t _init_i2c1_ch0 (void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
    XMC_I2C_CH_Init (XMC_I2C1_CH0, &i2c_cfg);
 8001804:	490e      	ldr	r1, [pc, #56]	; (8001840 <_init_i2c1_ch0+0x40>)
 8001806:	480f      	ldr	r0, [pc, #60]	; (8001844 <_init_i2c1_ch0+0x44>)
 8001808:	f001 fac2 	bl	8002d90 <XMC_I2C_CH_Init>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SDA, USIC1_C0_DX0_P0_5);
 800180c:	2201      	movs	r2, #1
 800180e:	2100      	movs	r1, #0
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <_init_i2c1_ch0+0x44>)
 8001812:	f7ff ffb5 	bl	8001780 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SCL, USIC1_C0_DX1_SCLKOUT);
 8001816:	2206      	movs	r2, #6
 8001818:	2101      	movs	r1, #1
 800181a:	480a      	ldr	r0, [pc, #40]	; (8001844 <_init_i2c1_ch0+0x44>)
 800181c:	f7ff ffb0 	bl	8001780 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_Start (XMC_I2C1_CH0);
 8001820:	4808      	ldr	r0, [pc, #32]	; (8001844 <_init_i2c1_ch0+0x44>)
 8001822:	f7ff ffa1 	bl	8001768 <XMC_I2C_CH_Start>

    XMC_GPIO_Init (P0_11, &i2c_scl);
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <_init_i2c1_ch0+0x48>)
 8001828:	210b      	movs	r1, #11
 800182a:	4808      	ldr	r0, [pc, #32]	; (800184c <_init_i2c1_ch0+0x4c>)
 800182c:	f001 f936 	bl	8002a9c <XMC_GPIO_Init>
    XMC_GPIO_Init (P0_5, &i2c_sda);
 8001830:	4a07      	ldr	r2, [pc, #28]	; (8001850 <_init_i2c1_ch0+0x50>)
 8001832:	2105      	movs	r1, #5
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <_init_i2c1_ch0+0x4c>)
 8001836:	f001 f931 	bl	8002a9c <XMC_GPIO_Init>

    return 0;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000030 	.word	0x20000030
 8001844:	48020000 	.word	0x48020000
 8001848:	20000024 	.word	0x20000024
 800184c:	48028000 	.word	0x48028000
 8001850:	20000018 	.word	0x20000018

08001854 <_i2c_xfer>:
 *         rd_wr    ... I2C Read/Write direction
 *  @return read-value on a I2C read request or return write-value on I2C write
 *          request
 */
uint8_t _i2c_xfer (uint8_t id, uint8_t reg_addr, uint8_t i2c_data, _Bool rd_wr)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	4604      	mov	r4, r0
 800185c:	4608      	mov	r0, r1
 800185e:	4611      	mov	r1, r2
 8001860:	461a      	mov	r2, r3
 8001862:	4623      	mov	r3, r4
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	4603      	mov	r3, r0
 8001868:	71bb      	strb	r3, [r7, #6]
 800186a:	460b      	mov	r3, r1
 800186c:	717b      	strb	r3, [r7, #5]
 800186e:	4613      	mov	r3, r2
 8001870:	713b      	strb	r3, [r7, #4]
    XMC_USIC_CH_t *channel;
    char _tmp_i2c_recv_ = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
    uint8_t id_tmp = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	73bb      	strb	r3, [r7, #14]

    channel = XMC_I2C1_CH0;
 800187a:	4b3d      	ldr	r3, [pc, #244]	; (8001970 <_i2c_xfer+0x11c>)
 800187c:	60bb      	str	r3, [r7, #8]

    id_tmp = LIS3DH_RD_ADR;
 800187e:	2330      	movs	r3, #48	; 0x30
 8001880:	73bb      	strb	r3, [r7, #14]

    XMC_I2C_CH_MasterStart (channel, id_tmp, XMC_I2C_CH_CMD_WRITE);
 8001882:	7bbb      	ldrb	r3, [r7, #14]
 8001884:	b29b      	uxth	r3, r3
 8001886:	2200      	movs	r2, #0
 8001888:	4619      	mov	r1, r3
 800188a:	68b8      	ldr	r0, [r7, #8]
 800188c:	f001 fb04 	bl	8002e98 <XMC_I2C_CH_MasterStart>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8001890:	bf00      	nop
 8001892:	68b8      	ldr	r0, [r7, #8]
 8001894:	f7ff ff96 	bl	80017c4 <XMC_I2C_CH_GetStatusFlag>
 8001898:	4603      	mov	r3, r0
 800189a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f7      	beq.n	8001892 <_i2c_xfer+0x3e>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80018a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a6:	68b8      	ldr	r0, [r7, #8]
 80018a8:	f7ff ff98 	bl	80017dc <XMC_I2C_CH_ClearStatusFlag>

    XMC_I2C_CH_MasterTransmit (channel, reg_addr);
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	4619      	mov	r1, r3
 80018b0:	68b8      	ldr	r0, [r7, #8]
 80018b2:	f001 fb7f 	bl	8002fb4 <XMC_I2C_CH_MasterTransmit>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 80018b6:	bf00      	nop
 80018b8:	68b8      	ldr	r0, [r7, #8]
 80018ba:	f7ff ff83 	bl	80017c4 <XMC_I2C_CH_GetStatusFlag>
 80018be:	4603      	mov	r3, r0
 80018c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f7      	beq.n	80018b8 <_i2c_xfer+0x64>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80018c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018cc:	68b8      	ldr	r0, [r7, #8]
 80018ce:	f7ff ff85 	bl	80017dc <XMC_I2C_CH_ClearStatusFlag>

    if (rd_wr) {
 80018d2:	793b      	ldrb	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d030      	beq.n	800193a <_i2c_xfer+0xe6>
        /* Read from REG */
        XMC_I2C_CH_MasterRepeatedStart (channel, id_tmp, XMC_I2C_CH_CMD_READ);
 80018d8:	7bbb      	ldrb	r3, [r7, #14]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	2201      	movs	r2, #1
 80018de:	4619      	mov	r1, r3
 80018e0:	68b8      	ldr	r0, [r7, #8]
 80018e2:	f001 fb0d 	bl	8002f00 <XMC_I2C_CH_MasterRepeatedStart>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 80018e6:	bf00      	nop
 80018e8:	68b8      	ldr	r0, [r7, #8]
 80018ea:	f7ff ff6b 	bl	80017c4 <XMC_I2C_CH_GetStatusFlag>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f7      	beq.n	80018e8 <_i2c_xfer+0x94>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80018f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018fc:	68b8      	ldr	r0, [r7, #8]
 80018fe:	f7ff ff6d 	bl	80017dc <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterReceiveNack (channel);
 8001902:	68b8      	ldr	r0, [r7, #8]
 8001904:	f001 fb7c 	bl	8003000 <XMC_I2C_CH_MasterReceiveNack>

        while ( (XMC_USIC_CH_GetReceiveBufferStatus (channel) !=
 8001908:	bf00      	nop
 800190a:	68b8      	ldr	r0, [r7, #8]
 800190c:	f7ff ff0a 	bl	8001724 <XMC_USIC_CH_GetReceiveBufferStatus>
 8001910:	4603      	mov	r3, r0
 8001912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001916:	d006      	beq.n	8001926 <_i2c_xfer+0xd2>
                 (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) && ( (uint32_t) XMC_USIC_CH_GetReceiveBufferStatus (channel)
 8001918:	68b8      	ldr	r0, [r7, #8]
 800191a:	f7ff ff03 	bl	8001724 <XMC_USIC_CH_GetReceiveBufferStatus>
 800191e:	4603      	mov	r3, r0
 8001920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001924:	d1f1      	bne.n	800190a <_i2c_xfer+0xb6>
                         != (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID0));

        _tmp_i2c_recv_ = XMC_I2C_CH_GetReceivedData (channel);
 8001926:	68b8      	ldr	r0, [r7, #8]
 8001928:	f001 fb90 	bl	800304c <XMC_I2C_CH_GetReceivedData>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]

        XMC_I2C_CH_MasterStop (channel);
 8001930:	68b8      	ldr	r0, [r7, #8]
 8001932:	f001 fb19 	bl	8002f68 <XMC_I2C_CH_MasterStop>

        return _tmp_i2c_recv_;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	e016      	b.n	8001968 <_i2c_xfer+0x114>
    } else {
        /* Write to REG */
        XMC_I2C_CH_MasterTransmit (channel, i2c_data);
 800193a:	797b      	ldrb	r3, [r7, #5]
 800193c:	4619      	mov	r1, r3
 800193e:	68b8      	ldr	r0, [r7, #8]
 8001940:	f001 fb38 	bl	8002fb4 <XMC_I2C_CH_MasterTransmit>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8001944:	bf00      	nop
 8001946:	68b8      	ldr	r0, [r7, #8]
 8001948:	f7ff ff3c 	bl	80017c4 <XMC_I2C_CH_GetStatusFlag>
 800194c:	4603      	mov	r3, r0
 800194e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f7      	beq.n	8001946 <_i2c_xfer+0xf2>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8001956:	f44f 7100 	mov.w	r1, #512	; 0x200
 800195a:	68b8      	ldr	r0, [r7, #8]
 800195c:	f7ff ff3e 	bl	80017dc <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterStop (channel);
 8001960:	68b8      	ldr	r0, [r7, #8]
 8001962:	f001 fb01 	bl	8002f68 <XMC_I2C_CH_MasterStop>

        return i2c_data;
 8001966:	797b      	ldrb	r3, [r7, #5]
    }
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	bd90      	pop	{r4, r7, pc}
 8001970:	48020000 	.word	0x48020000

08001974 <initMEMSsensor>:
 * @param	none
 * @return	amount of errors if some occurred
 *
 */
uint8_t initMEMSsensor()
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
    uint8_t error = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	71fb      	strb	r3, [r7, #7]
    uint8_t response = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	71bb      	strb	r3, [r7, #6]

    //set ODR (turn ON device)
    if(LIS3DH_SetODR(LIS3DH_ODR_100Hz) == 1)
 8001982:	2005      	movs	r0, #5
 8001984:	f000 f9e2 	bl	8001d4c <LIS3DH_SetODR>
 8001988:	4603      	mov	r3, r0
 800198a:	2b01      	cmp	r3, #1
 800198c:	d103      	bne.n	8001996 <initMEMSsensor+0x22>
    {
        printf("LIS3DH_SetODR done...\n");
 800198e:	4826      	ldr	r0, [pc, #152]	; (8001a28 <initMEMSsensor+0xb4>)
 8001990:	f002 fddc 	bl	800454c <puts>
 8001994:	e008      	b.n	80019a8 <initMEMSsensor+0x34>
    }
    else
    {
        error++;
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	3301      	adds	r3, #1
 800199a:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <initMEMSsensor+0xb8>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	3301      	adds	r3, #1
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <initMEMSsensor+0xb8>)
 80019a6:	701a      	strb	r2, [r3, #0]
    }

    //set PowerMode
    if(LIS3DH_SetMode(LIS3DH_NORMAL) == 1)
 80019a8:	2002      	movs	r0, #2
 80019aa:	f000 fa59 	bl	8001e60 <LIS3DH_SetMode>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d103      	bne.n	80019bc <initMEMSsensor+0x48>
    {

        printf("LIS3DH_SetMode done...\n");
 80019b4:	481e      	ldr	r0, [pc, #120]	; (8001a30 <initMEMSsensor+0xbc>)
 80019b6:	f002 fdc9 	bl	800454c <puts>
 80019ba:	e008      	b.n	80019ce <initMEMSsensor+0x5a>
    }
    else
    {
        error++;
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	3301      	adds	r3, #1
 80019c0:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 80019c2:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <initMEMSsensor+0xb8>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <initMEMSsensor+0xb8>)
 80019cc:	701a      	strb	r2, [r3, #0]
    }

    //set Fullscale
    if(LIS3DH_SetFullScale(LIS3DH_FULLSCALE_4) == 1)
 80019ce:	2001      	movs	r0, #1
 80019d0:	f000 faf0 	bl	8001fb4 <LIS3DH_SetFullScale>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d103      	bne.n	80019e2 <initMEMSsensor+0x6e>
    {

        printf("LIS3DH_SetFullScale done...\n");
 80019da:	4816      	ldr	r0, [pc, #88]	; (8001a34 <initMEMSsensor+0xc0>)
 80019dc:	f002 fdb6 	bl	800454c <puts>
 80019e0:	e008      	b.n	80019f4 <initMEMSsensor+0x80>
    }
    else
    {
        error++;
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	3301      	adds	r3, #1
 80019e6:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <initMEMSsensor+0xb8>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <initMEMSsensor+0xb8>)
 80019f2:	701a      	strb	r2, [r3, #0]
    }

    //set axis Enable
    response = LIS3DH_SetAxis(LIS3DH_X_ENABLE | LIS3DH_Y_ENABLE | LIS3DH_Z_ENABLE);
 80019f4:	2007      	movs	r0, #7
 80019f6:	f000 fab1 	bl	8001f5c <LIS3DH_SetAxis>
 80019fa:	4603      	mov	r3, r0
 80019fc:	71bb      	strb	r3, [r7, #6]
    if(response == 1)
 80019fe:	79bb      	ldrb	r3, [r7, #6]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d103      	bne.n	8001a0c <initMEMSsensor+0x98>
    {
        printf("LIS3DH_SetAxis done...\n");
 8001a04:	480c      	ldr	r0, [pc, #48]	; (8001a38 <initMEMSsensor+0xc4>)
 8001a06:	f002 fda1 	bl	800454c <puts>
 8001a0a:	e008      	b.n	8001a1e <initMEMSsensor+0xaa>
    }
    else
    {
        error++;
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <initMEMSsensor+0xb8>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <initMEMSsensor+0xb8>)
 8001a1c:	701a      	strb	r2, [r3, #0]
    }

    return error;
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	0800aa70 	.word	0x0800aa70
 8001a2c:	20000aaa 	.word	0x20000aaa
 8001a30:	0800aa88 	.word	0x0800aa88
 8001a34:	0800aaa0 	.word	0x0800aaa0
 8001a38:	0800aabc 	.word	0x0800aabc

08001a3c <configMEMSsensor>:
 * @param	none
 * @return	amount of errors if some occurred
 *
 */
uint8_t configMEMSsensor()
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
    uint8_t error = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	71fb      	strb	r3, [r7, #7]
    uint8_t response = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	71bb      	strb	r3, [r7, #6]

    //set Interrupt Threshold
    if(LIS3DH_SetInt1Threshold(20) == 1)
 8001a4a:	2014      	movs	r0, #20
 8001a4c:	f000 fbe0 	bl	8002210 <LIS3DH_SetInt1Threshold>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d103      	bne.n	8001a5e <configMEMSsensor+0x22>
    {
        printf("LIS3DH_SetInt1Thershold done...\n");
 8001a56:	4839      	ldr	r0, [pc, #228]	; (8001b3c <configMEMSsensor+0x100>)
 8001a58:	f002 fd78 	bl	800454c <puts>
 8001a5c:	e008      	b.n	8001a70 <configMEMSsensor+0x34>
    }
    else
    {
        error++;
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	3301      	adds	r3, #1
 8001a62:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001a64:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <configMEMSsensor+0x104>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <configMEMSsensor+0x104>)
 8001a6e:	701a      	strb	r2, [r3, #0]
    }

    //set Interrupt configuration (all enabled)
    response = LIS3DH_SetIntConfiguration(LIS3DH_INT1_ZHIE_ENABLE | LIS3DH_INT1_ZLIE_ENABLE |
 8001a70:	203f      	movs	r0, #63	; 0x3f
 8001a72:	f000 fafb 	bl	800206c <LIS3DH_SetIntConfiguration>
 8001a76:	4603      	mov	r3, r0
 8001a78:	71bb      	strb	r3, [r7, #6]
                                          LIS3DH_INT1_YHIE_ENABLE | LIS3DH_INT1_YLIE_ENABLE |
                                          LIS3DH_INT1_XHIE_ENABLE | LIS3DH_INT1_XLIE_ENABLE );
    if(response == 1)
 8001a7a:	79bb      	ldrb	r3, [r7, #6]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d103      	bne.n	8001a88 <configMEMSsensor+0x4c>
    {
        printf("LIS3DH_SetIntConfiguration done...\n");
 8001a80:	4830      	ldr	r0, [pc, #192]	; (8001b44 <configMEMSsensor+0x108>)
 8001a82:	f002 fd63 	bl	800454c <puts>
 8001a86:	e008      	b.n	8001a9a <configMEMSsensor+0x5e>
    }
    else
    {
        error++;
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <configMEMSsensor+0x104>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	3301      	adds	r3, #1
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <configMEMSsensor+0x104>)
 8001a98:	701a      	strb	r2, [r3, #0]
    }

    //set Interrupt Mode
    if(LIS3DH_SetIntMode(LIS3DH_INT_MODE_6D_POSITION) == 1)
 8001a9a:	2003      	movs	r0, #3
 8001a9c:	f000 fb10 	bl	80020c0 <LIS3DH_SetIntMode>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d103      	bne.n	8001aae <configMEMSsensor+0x72>
    {
        printf("LIS3DH_SetIntMode done...\n");
 8001aa6:	4828      	ldr	r0, [pc, #160]	; (8001b48 <configMEMSsensor+0x10c>)
 8001aa8:	f002 fd50 	bl	800454c <puts>
 8001aac:	e008      	b.n	8001ac0 <configMEMSsensor+0x84>
    }
    else
    {
        error++;
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001ab4:	4b22      	ldr	r3, [pc, #136]	; (8001b40 <configMEMSsensor+0x104>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <configMEMSsensor+0x104>)
 8001abe:	701a      	strb	r2, [r3, #0]
    }

    // internal temperature sensor
    if (LIS3DH_SetADCAux(MEMS_ENABLE) == 1)
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f000 f99f 	bl	8001e04 <LIS3DH_SetADCAux>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d103      	bne.n	8001ad4 <configMEMSsensor+0x98>
    {
        printf("LIS3DH_SetADCAux done...");
 8001acc:	481f      	ldr	r0, [pc, #124]	; (8001b4c <configMEMSsensor+0x110>)
 8001ace:	f002 fcf5 	bl	80044bc <printf>
 8001ad2:	e008      	b.n	8001ae6 <configMEMSsensor+0xaa>
    }
    else
    {
        error++;
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <configMEMSsensor+0x104>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <configMEMSsensor+0x104>)
 8001ae4:	701a      	strb	r2, [r3, #0]
    }

    if (LIS3DH_SetBDU(MEMS_ENABLE) == 1)
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f000 fa92 	bl	8002010 <LIS3DH_SetBDU>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d103      	bne.n	8001afa <configMEMSsensor+0xbe>
    {
        printf("LIS3DH_SetBDU done...\n");
 8001af2:	4817      	ldr	r0, [pc, #92]	; (8001b50 <configMEMSsensor+0x114>)
 8001af4:	f002 fd2a 	bl	800454c <puts>
 8001af8:	e008      	b.n	8001b0c <configMEMSsensor+0xd0>
    }
    else
    {
        error++;
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	3301      	adds	r3, #1
 8001afe:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <configMEMSsensor+0x104>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <configMEMSsensor+0x104>)
 8001b0a:	701a      	strb	r2, [r3, #0]
    }

    if (LIS3DH_SetTemperature(MEMS_ENABLE) == 1)
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f000 f94b 	bl	8001da8 <LIS3DH_SetTemperature>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d103      	bne.n	8001b20 <configMEMSsensor+0xe4>
    {
        printf("LIS3DH_SetTemperature done...\n");
 8001b18:	480e      	ldr	r0, [pc, #56]	; (8001b54 <configMEMSsensor+0x118>)
 8001b1a:	f002 fd17 	bl	800454c <puts>
 8001b1e:	e008      	b.n	8001b32 <configMEMSsensor+0xf6>
    }
    else
    {
        error++;
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	3301      	adds	r3, #1
 8001b24:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <configMEMSsensor+0x104>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <configMEMSsensor+0x104>)
 8001b30:	701a      	strb	r2, [r3, #0]
    }

    return error;
 8001b32:	79fb      	ldrb	r3, [r7, #7]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	0800aad4 	.word	0x0800aad4
 8001b40:	20000aaa 	.word	0x20000aaa
 8001b44:	0800aaf4 	.word	0x0800aaf4
 8001b48:	0800ab18 	.word	0x0800ab18
 8001b4c:	0800ab34 	.word	0x0800ab34
 8001b50:	0800ab50 	.word	0x0800ab50
 8001b54:	0800ab68 	.word	0x0800ab68

08001b58 <get6Dposition>:
 * @param	none
 * @return	6D direction as integer 0 - 6
 *
 */
uint8_t get6Dposition()
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
    uint8_t response = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	71fb      	strb	r3, [r7, #7]

    response = LIS3DH_Get6DPosition(&position);
 8001b62:	4846      	ldr	r0, [pc, #280]	; (8001c7c <get6Dposition+0x124>)
 8001b64:	f000 fada 	bl	800211c <LIS3DH_Get6DPosition>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71fb      	strb	r3, [r7, #7]

    if((response == 1) && (old_position != position))
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d171      	bne.n	8001c56 <get6Dposition+0xfe>
 8001b72:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <get6Dposition+0x128>)
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <get6Dposition+0x124>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d06b      	beq.n	8001c56 <get6Dposition+0xfe>
    {
        switch (position)
 8001b7e:	4b3f      	ldr	r3, [pc, #252]	; (8001c7c <get6Dposition+0x124>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	3b41      	subs	r3, #65	; 0x41
 8001b84:	2b1f      	cmp	r3, #31
 8001b86:	d85b      	bhi.n	8001c40 <get6Dposition+0xe8>
 8001b88:	a201      	add	r2, pc, #4	; (adr r2, 8001b90 <get6Dposition+0x38>)
 8001b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8e:	bf00      	nop
 8001b90:	08001c21 	.word	0x08001c21
 8001b94:	08001c19 	.word	0x08001c19
 8001b98:	08001c41 	.word	0x08001c41
 8001b9c:	08001c11 	.word	0x08001c11
 8001ba0:	08001c41 	.word	0x08001c41
 8001ba4:	08001c41 	.word	0x08001c41
 8001ba8:	08001c41 	.word	0x08001c41
 8001bac:	08001c29 	.word	0x08001c29
 8001bb0:	08001c41 	.word	0x08001c41
 8001bb4:	08001c41 	.word	0x08001c41
 8001bb8:	08001c41 	.word	0x08001c41
 8001bbc:	08001c41 	.word	0x08001c41
 8001bc0:	08001c41 	.word	0x08001c41
 8001bc4:	08001c41 	.word	0x08001c41
 8001bc8:	08001c41 	.word	0x08001c41
 8001bcc:	08001c39 	.word	0x08001c39
 8001bd0:	08001c41 	.word	0x08001c41
 8001bd4:	08001c41 	.word	0x08001c41
 8001bd8:	08001c41 	.word	0x08001c41
 8001bdc:	08001c41 	.word	0x08001c41
 8001be0:	08001c41 	.word	0x08001c41
 8001be4:	08001c41 	.word	0x08001c41
 8001be8:	08001c41 	.word	0x08001c41
 8001bec:	08001c41 	.word	0x08001c41
 8001bf0:	08001c41 	.word	0x08001c41
 8001bf4:	08001c41 	.word	0x08001c41
 8001bf8:	08001c41 	.word	0x08001c41
 8001bfc:	08001c41 	.word	0x08001c41
 8001c00:	08001c41 	.word	0x08001c41
 8001c04:	08001c41 	.word	0x08001c41
 8001c08:	08001c41 	.word	0x08001c41
 8001c0c:	08001c31 	.word	0x08001c31
        {
        case LIS3DH_UP_SX:
        {
            direction = 0;
 8001c10:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <get6Dposition+0x12c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
            break;
 8001c16:	e01d      	b.n	8001c54 <get6Dposition+0xfc>
        }
        case LIS3DH_UP_DX:
        {
            direction = 1;
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <get6Dposition+0x12c>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
            break;
 8001c1e:	e019      	b.n	8001c54 <get6Dposition+0xfc>
        }
        case LIS3DH_DW_SX:
        {
            direction = 2;
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <get6Dposition+0x12c>)
 8001c22:	2202      	movs	r2, #2
 8001c24:	701a      	strb	r2, [r3, #0]
            break;
 8001c26:	e015      	b.n	8001c54 <get6Dposition+0xfc>
        }
        case LIS3DH_DW_DX:
        {
            direction = 3;
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <get6Dposition+0x12c>)
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	701a      	strb	r2, [r3, #0]
            break;
 8001c2e:	e011      	b.n	8001c54 <get6Dposition+0xfc>
        }
        case LIS3DH_TOP:
        {
            direction = 4;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <get6Dposition+0x12c>)
 8001c32:	2204      	movs	r2, #4
 8001c34:	701a      	strb	r2, [r3, #0]
            break;
 8001c36:	e00d      	b.n	8001c54 <get6Dposition+0xfc>
        }
        case LIS3DH_BOTTOM:
        {
            direction = 5;
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <get6Dposition+0x12c>)
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	701a      	strb	r2, [r3, #0]
            break;
 8001c3e:	e009      	b.n	8001c54 <get6Dposition+0xfc>
        }
        default:
        {
            direction = 6;
 8001c40:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <get6Dposition+0x12c>)
 8001c42:	2206      	movs	r2, #6
 8001c44:	701a      	strb	r2, [r3, #0]
            errorcount++;
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <get6Dposition+0x130>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <get6Dposition+0x130>)
 8001c50:	701a      	strb	r2, [r3, #0]
            break;
 8001c52:	bf00      	nop
        }
        }
    }
 8001c54:	e008      	b.n	8001c68 <get6Dposition+0x110>
    else if(response != 1)
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d005      	beq.n	8001c68 <get6Dposition+0x110>
    {
        errorcount++;
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <get6Dposition+0x130>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <get6Dposition+0x130>)
 8001c66:	701a      	strb	r2, [r3, #0]
    }
    old_position = position;
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <get6Dposition+0x124>)
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <get6Dposition+0x128>)
 8001c6e:	701a      	strb	r2, [r3, #0]

    return direction;
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <get6Dposition+0x12c>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000abe 	.word	0x20000abe
 8001c80:	20000ad4 	.word	0x20000ad4
 8001c84:	20000ad1 	.word	0x20000ad1
 8001c88:	20000aaa 	.word	0x20000aaa

08001c8c <getAxesRawData>:
 * @param	none
 * @return	acceleration data in structure
 *
 */
AXESRAWDATA getAxesRawData()
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    uint8_t response = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	75fb      	strb	r3, [r7, #23]
    AxesRaw_t data;
    AXESRAWDATA dataOut;
    dataOut.axisX = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	813b      	strh	r3, [r7, #8]
    dataOut.axisY = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	817b      	strh	r3, [r7, #10]
    dataOut.axisZ = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	81bb      	strh	r3, [r7, #12]

    response = LIS3DH_GetAccAxesRaw(&data);
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 facb 	bl	8002244 <LIS3DH_GetAccAxesRaw>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	75fb      	strb	r3, [r7, #23]
    if(response != 1)
 8001cb2:	7dfb      	ldrb	r3, [r7, #23]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d005      	beq.n	8001cc4 <getAxesRawData+0x38>
    {
        errorcount++;
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <getAxesRawData+0x68>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <getAxesRawData+0x68>)
 8001cc2:	701a      	strb	r2, [r3, #0]
    }

    dataOut.axisX = data.AXIS_X;
 8001cc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	813b      	strh	r3, [r7, #8]
    dataOut.axisY = data.AXIS_Y;
 8001ccc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	817b      	strh	r3, [r7, #10]
    dataOut.axisZ = data.AXIS_Z;
 8001cd4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	81bb      	strh	r3, [r7, #12]

    return dataOut;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f107 0308 	add.w	r3, r7, #8
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	6010      	str	r0, [r2, #0]
 8001ce8:	889b      	ldrh	r3, [r3, #4]
 8001cea:	8093      	strh	r3, [r2, #4]
}
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000aaa 	.word	0x20000aaa

08001cf8 <LIS3DH_ReadReg>:
*			: I2C or SPI reading functions
* Input			: Register Address
* Output		: Data REad
* Return		: None
*******************************************************************************/
u8_t LIS3DH_ReadReg(u8_t Reg, u8_t* Data) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]

    //To be completed with either I2c or SPI reading function
    //i.e. *Data = SPI_Mems_Read_Reg( Reg );

    *Data = _i2c_xfer (0, Reg, 0, 1);
 8001d04:	79f9      	ldrb	r1, [r7, #7]
 8001d06:	2301      	movs	r3, #1
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f7ff fda2 	bl	8001854 <_i2c_xfer>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461a      	mov	r2, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	701a      	strb	r2, [r3, #0]

    return 1;
 8001d18:	2301      	movs	r3, #1
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop

08001d24 <LIS3DH_WriteReg>:
*			: I2C or SPI writing function
* Input			: Register Address, Data to be written
* Output		: None
* Return		: None
*******************************************************************************/
u8_t LIS3DH_WriteReg(u8_t WriteAddr, u8_t Data) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	460a      	mov	r2, r1
 8001d2e:	71fb      	strb	r3, [r7, #7]
 8001d30:	4613      	mov	r3, r2
 8001d32:	71bb      	strb	r3, [r7, #6]

    //To be completed with either I2c or SPI writing function
    //i.e. SPI_Mems_Write_Reg(WriteAddr, Data);

    _i2c_xfer (0, WriteAddr, Data, 0);
 8001d34:	79ba      	ldrb	r2, [r7, #6]
 8001d36:	79f9      	ldrb	r1, [r7, #7]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7ff fd8a 	bl	8001854 <_i2c_xfer>

    return 1;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop

08001d4c <LIS3DH_SetODR>:
* Description    : Sets LIS3DH Output Data Rate
* Input          : Output Data Rate
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetODR(LIS3DH_ODR_t ov) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001d56:	f107 030f 	add.w	r3, r7, #15
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	2020      	movs	r0, #32
 8001d5e:	f7ff ffcb 	bl	8001cf8 <LIS3DH_ReadReg>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <LIS3DH_SetODR+0x20>
        return MEMS_ERROR;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e018      	b.n	8001d9e <LIS3DH_SetODR+0x52>

    value &= 0x0f;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	73fb      	strb	r3, [r7, #15]
    value |= ov<<LIS3DH_ODR_BIT;
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	b25a      	sxtb	r2, r3
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	b25b      	sxtb	r3, r3
 8001d80:	4313      	orrs	r3, r2
 8001d82:	b25b      	sxtb	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	2020      	movs	r0, #32
 8001d8e:	f7ff ffc9 	bl	8001d24 <LIS3DH_WriteReg>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <LIS3DH_SetODR+0x50>
        return MEMS_ERROR;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	e000      	b.n	8001d9e <LIS3DH_SetODR+0x52>

    return MEMS_SUCCESS;
 8001d9c:	2301      	movs	r3, #1
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop

08001da8 <LIS3DH_SetTemperature>:
* Output         : None
* Note           : For Read Temperature by LIS3DH_OUT_AUX_3, LIS3DH_SetADCAux and LIS3DH_SetBDU
				   functions must be ENABLE
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetTemperature(State_t state) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
 8001db2:	f107 030f 	add.w	r3, r7, #15
 8001db6:	4619      	mov	r1, r3
 8001db8:	201f      	movs	r0, #31
 8001dba:	f7ff ff9d 	bl	8001cf8 <LIS3DH_ReadReg>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <LIS3DH_SetTemperature+0x20>
        return MEMS_ERROR;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e018      	b.n	8001dfa <LIS3DH_SetTemperature+0x52>

    value &= 0xBF;
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	73fb      	strb	r3, [r7, #15]
    value |= state<<LIS3DH_TEMP_EN;
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	019b      	lsls	r3, r3, #6
 8001dd6:	b25a      	sxtb	r2, r3
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	4619      	mov	r1, r3
 8001de8:	201f      	movs	r0, #31
 8001dea:	f7ff ff9b 	bl	8001d24 <LIS3DH_WriteReg>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <LIS3DH_SetTemperature+0x50>
        return MEMS_ERROR;
 8001df4:	2300      	movs	r3, #0
 8001df6:	e000      	b.n	8001dfa <LIS3DH_SetTemperature+0x52>

    return MEMS_SUCCESS;
 8001df8:	2301      	movs	r3, #1
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop

08001e04 <LIS3DH_SetADCAux>:
* Description    : Sets LIS3DH Output ADC
* Input          : MEMS_ENABLE, MEMS_DISABLE
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetADCAux(State_t state) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
 8001e0e:	f107 030f 	add.w	r3, r7, #15
 8001e12:	4619      	mov	r1, r3
 8001e14:	201f      	movs	r0, #31
 8001e16:	f7ff ff6f 	bl	8001cf8 <LIS3DH_ReadReg>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <LIS3DH_SetADCAux+0x20>
        return MEMS_ERROR;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e018      	b.n	8001e56 <LIS3DH_SetADCAux+0x52>

    value &= 0x7F;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	73fb      	strb	r3, [r7, #15]
    value |= state<<LIS3DH_ADC_PD;
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	01db      	lsls	r3, r3, #7
 8001e32:	b25a      	sxtb	r2, r3
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	b25b      	sxtb	r3, r3
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	b25b      	sxtb	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	4619      	mov	r1, r3
 8001e44:	201f      	movs	r0, #31
 8001e46:	f7ff ff6d 	bl	8001d24 <LIS3DH_WriteReg>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <LIS3DH_SetADCAux+0x50>
        return MEMS_ERROR;
 8001e50:	2300      	movs	r3, #0
 8001e52:	e000      	b.n	8001e56 <LIS3DH_SetADCAux+0x52>

    return MEMS_SUCCESS;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop

08001e60 <LIS3DH_SetMode>:
* Description    : Sets LIS3DH Operating Mode
* Input          : Modality (LIS3DH_NORMAL, LIS3DH_LOW_POWER, LIS3DH_POWER_DOWN)
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetMode(LIS3DH_Mode_t md) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
    u8_t value;
    u8_t value2;
    static   u8_t ODR_old_value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001e6a:	f107 030f 	add.w	r3, r7, #15
 8001e6e:	4619      	mov	r1, r3
 8001e70:	2020      	movs	r0, #32
 8001e72:	f7ff ff41 	bl	8001cf8 <LIS3DH_ReadReg>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <LIS3DH_SetMode+0x20>
        return MEMS_ERROR;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e066      	b.n	8001f4e <LIS3DH_SetMode+0xee>

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value2) )
 8001e80:	f107 030e 	add.w	r3, r7, #14
 8001e84:	4619      	mov	r1, r3
 8001e86:	2023      	movs	r0, #35	; 0x23
 8001e88:	f7ff ff36 	bl	8001cf8 <LIS3DH_ReadReg>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <LIS3DH_SetMode+0x36>
        return MEMS_ERROR;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e05b      	b.n	8001f4e <LIS3DH_SetMode+0xee>

    if((value & 0xF0)==0)
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10b      	bne.n	8001eb8 <LIS3DH_SetMode+0x58>
        value = value | (ODR_old_value & 0xF0); //if it comes from POWERDOWN
 8001ea0:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <LIS3DH_SetMode+0xf8>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	f023 030f 	bic.w	r3, r3, #15
 8001eaa:	b25a      	sxtb	r2, r3
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	b25b      	sxtb	r3, r3
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	b25b      	sxtb	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	73fb      	strb	r3, [r7, #15]

    switch(md) {
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d01e      	beq.n	8001efc <LIS3DH_SetMode+0x9c>
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d00a      	beq.n	8001ed8 <LIS3DH_SetMode+0x78>
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d12c      	bne.n	8001f20 <LIS3DH_SetMode+0xc0>

    case LIS3DH_POWER_DOWN:
        ODR_old_value = value;
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <LIS3DH_SetMode+0xf8>)
 8001eca:	701a      	strb	r2, [r3, #0]
        value &= 0x0F;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	73fb      	strb	r3, [r7, #15]
        break;
 8001ed6:	e025      	b.n	8001f24 <LIS3DH_SetMode+0xc4>

    case LIS3DH_NORMAL:
        value &= 0xF7;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	f023 0308 	bic.w	r3, r3, #8
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	73fb      	strb	r3, [r7, #15]
        value |= (MEMS_RESET<<LIS3DH_LPEN);
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 8001ee6:	7bbb      	ldrb	r3, [r7, #14]
 8001ee8:	f023 0308 	bic.w	r3, r3, #8
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_SET<<LIS3DH_HR);   //set HighResolution_BIT
 8001ef0:	7bbb      	ldrb	r3, [r7, #14]
 8001ef2:	f043 0308 	orr.w	r3, r3, #8
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	73bb      	strb	r3, [r7, #14]
        break;
 8001efa:	e013      	b.n	8001f24 <LIS3DH_SetMode+0xc4>

    case LIS3DH_LOW_POWER:
        value &= 0xF7;
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	f023 0308 	bic.w	r3, r3, #8
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	73fb      	strb	r3, [r7, #15]
        value |=  (MEMS_SET<<LIS3DH_LPEN);
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	f043 0308 	orr.w	r3, r3, #8
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 8001f10:	7bbb      	ldrb	r3, [r7, #14]
 8001f12:	f023 0308 	bic.w	r3, r3, #8
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_RESET<<LIS3DH_HR); //reset HighResolution_BIT
 8001f1a:	7bbb      	ldrb	r3, [r7, #14]
 8001f1c:	73bb      	strb	r3, [r7, #14]
        break;
 8001f1e:	e001      	b.n	8001f24 <LIS3DH_SetMode+0xc4>

    default:
        return MEMS_ERROR;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e014      	b.n	8001f4e <LIS3DH_SetMode+0xee>
    }

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	4619      	mov	r1, r3
 8001f28:	2020      	movs	r0, #32
 8001f2a:	f7ff fefb 	bl	8001d24 <LIS3DH_WriteReg>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <LIS3DH_SetMode+0xd8>
        return MEMS_ERROR;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e00a      	b.n	8001f4e <LIS3DH_SetMode+0xee>

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value2) )
 8001f38:	7bbb      	ldrb	r3, [r7, #14]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	2023      	movs	r0, #35	; 0x23
 8001f3e:	f7ff fef1 	bl	8001d24 <LIS3DH_WriteReg>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <LIS3DH_SetMode+0xec>
        return MEMS_ERROR;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e000      	b.n	8001f4e <LIS3DH_SetMode+0xee>

    return MEMS_SUCCESS;
 8001f4c:	2301      	movs	r3, #1
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000a68 	.word	0x20000a68

08001f5c <LIS3DH_SetAxis>:
* Input          : LIS3DH_X_ENABLE/DISABLE | LIS3DH_Y_ENABLE/DISABLE | LIS3DH_Z_ENABLE/DISABLE
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetAxis(LIS3DH_Axis_t axis) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001f66:	f107 030f 	add.w	r3, r7, #15
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	2020      	movs	r0, #32
 8001f6e:	f7ff fec3 	bl	8001cf8 <LIS3DH_ReadReg>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <LIS3DH_SetAxis+0x20>
        return MEMS_ERROR;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e017      	b.n	8001fac <LIS3DH_SetAxis+0x50>
    value &= 0xF8;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	f023 0307 	bic.w	r3, r3, #7
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	73fb      	strb	r3, [r7, #15]
    value |= (0x07 & axis);
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	2020      	movs	r0, #32
 8001f9c:	f7ff fec2 	bl	8001d24 <LIS3DH_WriteReg>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <LIS3DH_SetAxis+0x4e>
        return MEMS_ERROR;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <LIS3DH_SetAxis+0x50>

    return MEMS_SUCCESS;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <LIS3DH_SetFullScale>:
* Description    : Sets the LIS3DH FullScale
* Input          : LIS3DH_FULLSCALE_2/LIS3DH_FULLSCALE_4/LIS3DH_FULLSCALE_8/LIS3DH_FULLSCALE_16
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetFullScale(LIS3DH_Fullscale_t fs) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 8001fbe:	f107 030f 	add.w	r3, r7, #15
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	2023      	movs	r0, #35	; 0x23
 8001fc6:	f7ff fe97 	bl	8001cf8 <LIS3DH_ReadReg>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <LIS3DH_SetFullScale+0x20>
        return MEMS_ERROR;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e018      	b.n	8002006 <LIS3DH_SetFullScale+0x52>

    value &= 0xCF;
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	73fb      	strb	r3, [r7, #15]
    value |= (fs<<LIS3DH_FS);
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	b25a      	sxtb	r2, r3
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	b25b      	sxtb	r3, r3
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	2023      	movs	r0, #35	; 0x23
 8001ff6:	f7ff fe95 	bl	8001d24 <LIS3DH_WriteReg>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <LIS3DH_SetFullScale+0x50>
        return MEMS_ERROR;
 8002000:	2300      	movs	r3, #0
 8002002:	e000      	b.n	8002006 <LIS3DH_SetFullScale+0x52>

    return MEMS_SUCCESS;
 8002004:	2301      	movs	r3, #1
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop

08002010 <LIS3DH_SetBDU>:
* Description    : Enable/Disable Block Data Update Functionality
* Input          : ENABLE/DISABLE
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetBDU(State_t bdu) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 800201a:	f107 030f 	add.w	r3, r7, #15
 800201e:	4619      	mov	r1, r3
 8002020:	2023      	movs	r0, #35	; 0x23
 8002022:	f7ff fe69 	bl	8001cf8 <LIS3DH_ReadReg>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <LIS3DH_SetBDU+0x20>
        return MEMS_ERROR;
 800202c:	2300      	movs	r3, #0
 800202e:	e018      	b.n	8002062 <LIS3DH_SetBDU+0x52>

    value &= 0x7F;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002036:	b2db      	uxtb	r3, r3
 8002038:	73fb      	strb	r3, [r7, #15]
    value |= (bdu<<LIS3DH_BDU);
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	01db      	lsls	r3, r3, #7
 800203e:	b25a      	sxtb	r2, r3
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	b25b      	sxtb	r3, r3
 8002044:	4313      	orrs	r3, r2
 8002046:	b25b      	sxtb	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	4619      	mov	r1, r3
 8002050:	2023      	movs	r0, #35	; 0x23
 8002052:	f7ff fe67 	bl	8001d24 <LIS3DH_WriteReg>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <LIS3DH_SetBDU+0x50>
        return MEMS_ERROR;
 800205c:	2300      	movs	r3, #0
 800205e:	e000      	b.n	8002062 <LIS3DH_SetBDU+0x52>

    return MEMS_SUCCESS;
 8002060:	2301      	movs	r3, #1
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop

0800206c <LIS3DH_SetIntConfiguration>:
* Input          : LIS3DH_INT1_AND/OR | LIS3DH_INT1_ZHIE_ENABLE/DISABLE | LIS3DH_INT1_ZLIE_ENABLE/DISABLE...
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntConfiguration(LIS3DH_Int1Conf_t ic) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 8002076:	f107 030f 	add.w	r3, r7, #15
 800207a:	4619      	mov	r1, r3
 800207c:	2030      	movs	r0, #48	; 0x30
 800207e:	f7ff fe3b 	bl	8001cf8 <LIS3DH_ReadReg>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <LIS3DH_SetIntConfiguration+0x20>
        return MEMS_ERROR;
 8002088:	2300      	movs	r3, #0
 800208a:	e014      	b.n	80020b6 <LIS3DH_SetIntConfiguration+0x4a>

    value &= 0x40;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	b2db      	uxtb	r3, r3
 8002094:	73fb      	strb	r3, [r7, #15]
    value |= ic;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	4313      	orrs	r3, r2
 800209c:	b2db      	uxtb	r3, r3
 800209e:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	4619      	mov	r1, r3
 80020a4:	2030      	movs	r0, #48	; 0x30
 80020a6:	f7ff fe3d 	bl	8001d24 <LIS3DH_WriteReg>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <LIS3DH_SetIntConfiguration+0x48>
        return MEMS_ERROR;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e000      	b.n	80020b6 <LIS3DH_SetIntConfiguration+0x4a>

    return MEMS_SUCCESS;
 80020b4:	2301      	movs	r3, #1
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop

080020c0 <LIS3DH_SetIntMode>:
* Input          : LIS3DH_INT_MODE_OR, LIS3DH_INT_MODE_6D_MOVEMENT, LIS3DH_INT_MODE_AND,
				   LIS3DH_INT_MODE_6D_POSITION
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntMode(LIS3DH_Int1Mode_t int_mode) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 80020ca:	f107 030f 	add.w	r3, r7, #15
 80020ce:	4619      	mov	r1, r3
 80020d0:	2030      	movs	r0, #48	; 0x30
 80020d2:	f7ff fe11 	bl	8001cf8 <LIS3DH_ReadReg>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <LIS3DH_SetIntMode+0x20>
        return MEMS_ERROR;
 80020dc:	2300      	movs	r3, #0
 80020de:	e018      	b.n	8002112 <LIS3DH_SetIntMode+0x52>

    value &= 0x3F;
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	73fb      	strb	r3, [r7, #15]
    value |= (int_mode<<LIS3DH_INT_6D);
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	019b      	lsls	r3, r3, #6
 80020ee:	b25a      	sxtb	r2, r3
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	b25b      	sxtb	r3, r3
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b25b      	sxtb	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	4619      	mov	r1, r3
 8002100:	2030      	movs	r0, #48	; 0x30
 8002102:	f7ff fe0f 	bl	8001d24 <LIS3DH_WriteReg>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <LIS3DH_SetIntMode+0x50>
        return MEMS_ERROR;
 800210c:	2300      	movs	r3, #0
 800210e:	e000      	b.n	8002112 <LIS3DH_SetIntMode+0x52>

    return MEMS_SUCCESS;
 8002110:	2301      	movs	r3, #1
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop

0800211c <LIS3DH_Get6DPosition>:
* Description    : 6D, 4D Interrupt Position Detect
* Input          : Byte to empty by POSITION_6D_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_Get6DPosition(u8_t* val) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_SRC, &value) )
 8002124:	f107 030f 	add.w	r3, r7, #15
 8002128:	4619      	mov	r1, r3
 800212a:	2031      	movs	r0, #49	; 0x31
 800212c:	f7ff fde4 	bl	8001cf8 <LIS3DH_ReadReg>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <LIS3DH_Get6DPosition+0x1e>
        return MEMS_ERROR;
 8002136:	2300      	movs	r3, #0
 8002138:	e065      	b.n	8002206 <LIS3DH_Get6DPosition+0xea>

    value &= 0x7F;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002140:	b2db      	uxtb	r3, r3
 8002142:	73fb      	strb	r3, [r7, #15]

    switch (value) {
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	3b41      	subs	r3, #65	; 0x41
 8002148:	2b1f      	cmp	r3, #31
 800214a:	d85b      	bhi.n	8002204 <LIS3DH_Get6DPosition+0xe8>
 800214c:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <LIS3DH_Get6DPosition+0x38>)
 800214e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002152:	bf00      	nop
 8002154:	080021e5 	.word	0x080021e5
 8002158:	080021dd 	.word	0x080021dd
 800215c:	08002205 	.word	0x08002205
 8002160:	080021d5 	.word	0x080021d5
 8002164:	08002205 	.word	0x08002205
 8002168:	08002205 	.word	0x08002205
 800216c:	08002205 	.word	0x08002205
 8002170:	080021ed 	.word	0x080021ed
 8002174:	08002205 	.word	0x08002205
 8002178:	08002205 	.word	0x08002205
 800217c:	08002205 	.word	0x08002205
 8002180:	08002205 	.word	0x08002205
 8002184:	08002205 	.word	0x08002205
 8002188:	08002205 	.word	0x08002205
 800218c:	08002205 	.word	0x08002205
 8002190:	080021fd 	.word	0x080021fd
 8002194:	08002205 	.word	0x08002205
 8002198:	08002205 	.word	0x08002205
 800219c:	08002205 	.word	0x08002205
 80021a0:	08002205 	.word	0x08002205
 80021a4:	08002205 	.word	0x08002205
 80021a8:	08002205 	.word	0x08002205
 80021ac:	08002205 	.word	0x08002205
 80021b0:	08002205 	.word	0x08002205
 80021b4:	08002205 	.word	0x08002205
 80021b8:	08002205 	.word	0x08002205
 80021bc:	08002205 	.word	0x08002205
 80021c0:	08002205 	.word	0x08002205
 80021c4:	08002205 	.word	0x08002205
 80021c8:	08002205 	.word	0x08002205
 80021cc:	08002205 	.word	0x08002205
 80021d0:	080021f5 	.word	0x080021f5
    case LIS3DH_UP_SX:
        *val = LIS3DH_UP_SX;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2244      	movs	r2, #68	; 0x44
 80021d8:	701a      	strb	r2, [r3, #0]
        break;
 80021da:	e013      	b.n	8002204 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_UP_DX:
        *val = LIS3DH_UP_DX;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2242      	movs	r2, #66	; 0x42
 80021e0:	701a      	strb	r2, [r3, #0]
        break;
 80021e2:	e00f      	b.n	8002204 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_SX:
        *val = LIS3DH_DW_SX;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2241      	movs	r2, #65	; 0x41
 80021e8:	701a      	strb	r2, [r3, #0]
        break;
 80021ea:	e00b      	b.n	8002204 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_DX:
        *val = LIS3DH_DW_DX;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2248      	movs	r2, #72	; 0x48
 80021f0:	701a      	strb	r2, [r3, #0]
        break;
 80021f2:	e007      	b.n	8002204 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_TOP:
        *val = LIS3DH_TOP;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2260      	movs	r2, #96	; 0x60
 80021f8:	701a      	strb	r2, [r3, #0]
        break;
 80021fa:	e003      	b.n	8002204 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_BOTTOM:
        *val = LIS3DH_BOTTOM;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2250      	movs	r2, #80	; 0x50
 8002200:	701a      	strb	r2, [r3, #0]
        break;
 8002202:	bf00      	nop
    }

    return MEMS_SUCCESS;
 8002204:	2301      	movs	r3, #1
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop

08002210 <LIS3DH_SetInt1Threshold>:
* Description    : Sets Interrupt 1 Threshold
* Input          : Threshold = [0,31]
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetInt1Threshold(u8_t ths) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
    if (ths > 127)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	da01      	bge.n	8002226 <LIS3DH_SetInt1Threshold+0x16>
        return MEMS_ERROR;
 8002222:	2300      	movs	r3, #0
 8002224:	e00a      	b.n	800223c <LIS3DH_SetInt1Threshold+0x2c>

    if( !LIS3DH_WriteReg(LIS3DH_INT1_THS, ths) )
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	4619      	mov	r1, r3
 800222a:	2032      	movs	r0, #50	; 0x32
 800222c:	f7ff fd7a 	bl	8001d24 <LIS3DH_WriteReg>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <LIS3DH_SetInt1Threshold+0x2a>
        return MEMS_ERROR;
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <LIS3DH_SetInt1Threshold+0x2c>

    return MEMS_SUCCESS;
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <LIS3DH_GetAccAxesRaw>:
* Description    : Read the Acceleration Values Output Registers
* Input          : buffer to empity by AxesRaw_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_GetAccAxesRaw(AxesRaw_t* buff) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    i16_t value;
    u8_t *valueL = (u8_t *)(&value);
 800224c:	f107 030e 	add.w	r3, r7, #14
 8002250:	617b      	str	r3, [r7, #20]
    u8_t *valueH = ((u8_t *)(&value)+1);
 8002252:	f107 030e 	add.w	r3, r7, #14
 8002256:	3301      	adds	r3, #1
 8002258:	613b      	str	r3, [r7, #16]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_L, valueL) )
 800225a:	6979      	ldr	r1, [r7, #20]
 800225c:	2028      	movs	r0, #40	; 0x28
 800225e:	f7ff fd4b 	bl	8001cf8 <LIS3DH_ReadReg>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <LIS3DH_GetAccAxesRaw+0x28>
        return MEMS_ERROR;
 8002268:	2300      	movs	r3, #0
 800226a:	e039      	b.n	80022e0 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_H, valueH) )
 800226c:	6939      	ldr	r1, [r7, #16]
 800226e:	2029      	movs	r0, #41	; 0x29
 8002270:	f7ff fd42 	bl	8001cf8 <LIS3DH_ReadReg>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <LIS3DH_GetAccAxesRaw+0x3a>
        return MEMS_ERROR;
 800227a:	2300      	movs	r3, #0
 800227c:	e030      	b.n	80022e0 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_X = value;
 800227e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	801a      	strh	r2, [r3, #0]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_L, valueL) )
 8002286:	6979      	ldr	r1, [r7, #20]
 8002288:	202a      	movs	r0, #42	; 0x2a
 800228a:	f7ff fd35 	bl	8001cf8 <LIS3DH_ReadReg>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <LIS3DH_GetAccAxesRaw+0x54>
        return MEMS_ERROR;
 8002294:	2300      	movs	r3, #0
 8002296:	e023      	b.n	80022e0 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_H, valueH) )
 8002298:	6939      	ldr	r1, [r7, #16]
 800229a:	202b      	movs	r0, #43	; 0x2b
 800229c:	f7ff fd2c 	bl	8001cf8 <LIS3DH_ReadReg>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <LIS3DH_GetAccAxesRaw+0x66>
        return MEMS_ERROR;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e01a      	b.n	80022e0 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Y = value;
 80022aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	805a      	strh	r2, [r3, #2]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_L, valueL) )
 80022b2:	6979      	ldr	r1, [r7, #20]
 80022b4:	202c      	movs	r0, #44	; 0x2c
 80022b6:	f7ff fd1f 	bl	8001cf8 <LIS3DH_ReadReg>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <LIS3DH_GetAccAxesRaw+0x80>
        return MEMS_ERROR;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e00d      	b.n	80022e0 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_H, valueH) )
 80022c4:	6939      	ldr	r1, [r7, #16]
 80022c6:	202d      	movs	r0, #45	; 0x2d
 80022c8:	f7ff fd16 	bl	8001cf8 <LIS3DH_ReadReg>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <LIS3DH_GetAccAxesRaw+0x92>
        return MEMS_ERROR;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e004      	b.n	80022e0 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Z = value;
 80022d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	809a      	strh	r2, [r3, #4]

    return MEMS_SUCCESS;
 80022de:	2301      	movs	r3, #1
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	db0a      	blt.n	8002312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fc:	490d      	ldr	r1, [pc, #52]	; (8002334 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	0092      	lsls	r2, r2, #2
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	440b      	add	r3, r1
 800230c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002310:	e00a      	b.n	8002328 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002312:	4909      	ldr	r1, [pc, #36]	; (8002338 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	0092      	lsls	r2, r2, #2
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	440b      	add	r3, r1
 8002326:	761a      	strb	r2, [r3, #24]
  }
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000e100 	.word	0xe000e100
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800234c:	d301      	bcc.n	8002352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234e:	2301      	movs	r3, #1
 8002350:	e00f      	b.n	8002372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <SysTick_Config+0x40>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235a:	213f      	movs	r1, #63	; 0x3f
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	f7ff ffc2 	bl	80022e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <SysTick_Config+0x40>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <SysTick_Config+0x40>)
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	e000e010 	.word	0xe000e010

08002380 <main>:
/**
 * @brief	main routine
 *
 */
int main (void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b090      	sub	sp, #64	; 0x40
 8002384:	af00      	add	r7, sp, #0
    char rxBuff[RXBUFFERSIZE];

    // init receive buffer
    memset (&rxBuff, 0, sizeof (rxBuff));
 8002386:	463b      	mov	r3, r7
 8002388:	2240      	movs	r2, #64	; 0x40
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f002 f847 	bl	8004420 <memset>

    // init values for globals
    initGlobals();
 8002392:	f7fe f97f 	bl	8000694 <initGlobals>

    // init DEBUG, UART, I2C, PWM
    initRetargetSwo();
 8002396:	f7ff f945 	bl	8001624 <initRetargetSwo>
    _init_uart0_ch0();
 800239a:	f7fe f85b 	bl	8000454 <_init_uart0_ch0>
    _init_i2c1_ch0();
 800239e:	f7ff fa2f 	bl	8001800 <_init_i2c1_ch0>
    initServoPWM();
 80023a2:	f7fe f957 	bl	8000654 <initServoPWM>

    // center both servo
    pwm(SERVOUPCENTER, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	f04f 0000 	mov.w	r0, #0
 80023ac:	4974      	ldr	r1, [pc, #464]	; (8002580 <main+0x200>)
 80023ae:	f7fe f957 	bl	8000660 <pwm>
    pwm(SERVOLOCENTER, 1);
 80023b2:	2201      	movs	r2, #1
 80023b4:	f04f 0000 	mov.w	r0, #0
 80023b8:	4971      	ldr	r1, [pc, #452]	; (8002580 <main+0x200>)
 80023ba:	f7fe f951 	bl	8000660 <pwm>

    // init LED output
    outputInit();
 80023be:	f7fe f9e1 	bl	8000784 <outputInit>
    ledSetting(0);
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7fe fbec 	bl	8000ba0 <ledSetting>

    // init BUTTONS
    inputInit();
 80023c8:	f7fe fe00 	bl	8000fcc <inputInit>

#if DEBUG
    printf("DEBUG+I2C+UART+PWM+LED+BUTTON init done...\n");
 80023cc:	486d      	ldr	r0, [pc, #436]	; (8002584 <main+0x204>)
 80023ce:	f002 f8bd 	bl	800454c <puts>
#endif

    // init MEMS
    while (1)
    {
        if (initMEMSsensor() == 0)
 80023d2:	f7ff facf 	bl	8001974 <initMEMSsensor>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d103      	bne.n	80023e4 <main+0x64>
        {
#if DEBUG
            printf("MEMS init done...\n");
 80023dc:	486a      	ldr	r0, [pc, #424]	; (8002588 <main+0x208>)
 80023de:	f002 f8b5 	bl	800454c <puts>
#endif
            break;
 80023e2:	e003      	b.n	80023ec <main+0x6c>
        }
        else
        {
#if DEBUG
            printf("Error MEMS init, retry...\n");
 80023e4:	4869      	ldr	r0, [pc, #420]	; (800258c <main+0x20c>)
 80023e6:	f002 f8b1 	bl	800454c <puts>
#endif
        }
    }
 80023ea:	e7f2      	b.n	80023d2 <main+0x52>

    // config MEMS
    while (1)
    {
        if (configMEMSsensor() == 0)
 80023ec:	f7ff fb26 	bl	8001a3c <configMEMSsensor>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <main+0x92>
        {
#if DEBUG
            printf("MEMS config done...\n");
 80023f6:	4866      	ldr	r0, [pc, #408]	; (8002590 <main+0x210>)
 80023f8:	f002 f8a8 	bl	800454c <puts>
#endif
            break;
 80023fc:	bf00      	nop
#endif
        }
    }

    // set up SysTick
    SysTick_Config (SystemCoreClock / SYSTEMTICKDIVIDER);
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <main+0x214>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a65      	ldr	r2, [pc, #404]	; (8002598 <main+0x218>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	099b      	lsrs	r3, r3, #6
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff96 	bl	800233c <SysTick_Config>
 8002410:	e003      	b.n	800241a <main+0x9a>
            break;
        }
        else
        {
#if DEBUG
            printf("Error MEMS config, retry...\n");
 8002412:	4862      	ldr	r0, [pc, #392]	; (800259c <main+0x21c>)
 8002414:	f002 f89a 	bl	800454c <puts>
#endif
        }
    }
 8002418:	e7e8      	b.n	80023ec <main+0x6c>

    // main loop
    while(1)
    {
        // clear buffer and receive incoming data
        memset (&rxBuff, 0, sizeof (rxBuff));
 800241a:	463b      	mov	r3, r7
 800241c:	2240      	movs	r2, #64	; 0x40
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f001 fffd 	bl	8004420 <memset>
        _uart_get_string (rxBuff);
 8002426:	463b      	mov	r3, r7
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f8e7 	bl	80005fc <_uart_get_string>

#if DEBUG
        printf("received %s\n", rxBuff);
 800242e:	463b      	mov	r3, r7
 8002430:	4619      	mov	r1, r3
 8002432:	485b      	ldr	r0, [pc, #364]	; (80025a0 <main+0x220>)
 8002434:	f002 f842 	bl	80044bc <printf>
#endif

        // check received command and react accodingly
        if (strncmp(rxBuff, "#REQ,", strlen(rxBuff)) == 0)
 8002438:	463b      	mov	r3, r7
 800243a:	4618      	mov	r0, r3
 800243c:	f002 f8c0 	bl	80045c0 <strlen>
 8002440:	4602      	mov	r2, r0
 8002442:	463b      	mov	r3, r7
 8002444:	4957      	ldr	r1, [pc, #348]	; (80025a4 <main+0x224>)
 8002446:	4618      	mov	r0, r3
 8002448:	f002 f928 	bl	800469c <strncmp>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10e      	bne.n	8002470 <main+0xf0>
        {
            // send data to PC GUI
            protocolComplete(direction, readAxes.axisX, readAxes.axisY, readAxes.axisZ);
 8002452:	4b55      	ldr	r3, [pc, #340]	; (80025a8 <main+0x228>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b218      	sxth	r0, r3
 8002458:	4b54      	ldr	r3, [pc, #336]	; (80025ac <main+0x22c>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b219      	sxth	r1, r3
 800245e:	4b53      	ldr	r3, [pc, #332]	; (80025ac <main+0x22c>)
 8002460:	885b      	ldrh	r3, [r3, #2]
 8002462:	b21a      	sxth	r2, r3
 8002464:	4b51      	ldr	r3, [pc, #324]	; (80025ac <main+0x22c>)
 8002466:	889b      	ldrh	r3, [r3, #4]
 8002468:	b21b      	sxth	r3, r3
 800246a:	f7fe fa97 	bl	800099c <protocolComplete>
 800246e:	e7d4      	b.n	800241a <main+0x9a>
        }
        else if (strncmp(rxBuff, "#END,", strlen(rxBuff)) == 0)
 8002470:	463b      	mov	r3, r7
 8002472:	4618      	mov	r0, r3
 8002474:	f002 f8a4 	bl	80045c0 <strlen>
 8002478:	4602      	mov	r2, r0
 800247a:	463b      	mov	r3, r7
 800247c:	494c      	ldr	r1, [pc, #304]	; (80025b0 <main+0x230>)
 800247e:	4618      	mov	r0, r3
 8002480:	f002 f90c 	bl	800469c <strncmp>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <main+0x11e>
        {
            // LED off - connection END
            ledSetting(0);
 800248a:	2000      	movs	r0, #0
 800248c:	f7fe fb88 	bl	8000ba0 <ledSetting>
			startup = 0;
 8002490:	4b48      	ldr	r3, [pc, #288]	; (80025b4 <main+0x234>)
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
			connection = 0;
 8002496:	4b48      	ldr	r3, [pc, #288]	; (80025b8 <main+0x238>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
 800249c:	e7bd      	b.n	800241a <main+0x9a>
        }
        else if (strncmp(rxBuff, "#CON,", strlen(rxBuff)) == 0)
 800249e:	463b      	mov	r3, r7
 80024a0:	4618      	mov	r0, r3
 80024a2:	f002 f88d 	bl	80045c0 <strlen>
 80024a6:	4602      	mov	r2, r0
 80024a8:	463b      	mov	r3, r7
 80024aa:	4944      	ldr	r1, [pc, #272]	; (80025bc <main+0x23c>)
 80024ac:	4618      	mov	r0, r3
 80024ae:	f002 f8f5 	bl	800469c <strncmp>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d109      	bne.n	80024cc <main+0x14c>
        {
            // LED on - connection established
            ledSetting(1);
 80024b8:	2001      	movs	r0, #1
 80024ba:	f7fe fb71 	bl	8000ba0 <ledSetting>
			startup = 0;
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <main+0x234>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
			connection = 1;
 80024c4:	4b3c      	ldr	r3, [pc, #240]	; (80025b8 <main+0x238>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
 80024ca:	e7a6      	b.n	800241a <main+0x9a>
        }
        else if (strncmp(rxBuff, "#SER,f", strlen(rxBuff)) == 0)
 80024cc:	463b      	mov	r3, r7
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 f876 	bl	80045c0 <strlen>
 80024d4:	4602      	mov	r2, r0
 80024d6:	463b      	mov	r3, r7
 80024d8:	4939      	ldr	r1, [pc, #228]	; (80025c0 <main+0x240>)
 80024da:	4618      	mov	r0, r3
 80024dc:	f002 f8de 	bl	800469c <strncmp>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d103      	bne.n	80024ee <main+0x16e>
        {
            // Servos off
            servoEnable = 0;
 80024e6:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <main+0x244>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e795      	b.n	800241a <main+0x9a>
        }
        else if (strncmp(rxBuff, "#SER,n", strlen(rxBuff)) == 0)
 80024ee:	463b      	mov	r3, r7
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 f865 	bl	80045c0 <strlen>
 80024f6:	4602      	mov	r2, r0
 80024f8:	463b      	mov	r3, r7
 80024fa:	4933      	ldr	r1, [pc, #204]	; (80025c8 <main+0x248>)
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 f8cd 	bl	800469c <strncmp>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d106      	bne.n	8002516 <main+0x196>
        {
            // Servos on
            servoEnable = 1;
 8002508:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <main+0x244>)
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
			startup = 0;
 800250e:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <main+0x234>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e781      	b.n	800241a <main+0x9a>
        }
        else if (strncmp(rxBuff, "#STA,", strlen(rxBuff)) == 0)
 8002516:	463b      	mov	r3, r7
 8002518:	4618      	mov	r0, r3
 800251a:	f002 f851 	bl	80045c0 <strlen>
 800251e:	4602      	mov	r2, r0
 8002520:	463b      	mov	r3, r7
 8002522:	492a      	ldr	r1, [pc, #168]	; (80025cc <main+0x24c>)
 8002524:	4618      	mov	r0, r3
 8002526:	f002 f8b9 	bl	800469c <strncmp>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d103      	bne.n	8002538 <main+0x1b8>
        {
            // send statistic package
            statisticSend = 1;
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <main+0x250>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e770      	b.n	800241a <main+0x9a>
        }
        else if (strncmp(rxBuff, "#AVG,a", strlen(rxBuff)) == 0)
 8002538:	463b      	mov	r3, r7
 800253a:	4618      	mov	r0, r3
 800253c:	f002 f840 	bl	80045c0 <strlen>
 8002540:	4602      	mov	r2, r0
 8002542:	463b      	mov	r3, r7
 8002544:	4923      	ldr	r1, [pc, #140]	; (80025d4 <main+0x254>)
 8002546:	4618      	mov	r0, r3
 8002548:	f002 f8a8 	bl	800469c <strncmp>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d103      	bne.n	800255a <main+0x1da>
        {
            // average Angle
            averageChoice = 0;
 8002552:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <main+0x258>)
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
 8002558:	e75f      	b.n	800241a <main+0x9a>
        }
        else if (strncmp(rxBuff, "#AVG,p", strlen(rxBuff)) == 0)
 800255a:	463b      	mov	r3, r7
 800255c:	4618      	mov	r0, r3
 800255e:	f002 f82f 	bl	80045c0 <strlen>
 8002562:	4602      	mov	r2, r0
 8002564:	463b      	mov	r3, r7
 8002566:	491d      	ldr	r1, [pc, #116]	; (80025dc <main+0x25c>)
 8002568:	4618      	mov	r0, r3
 800256a:	f002 f897 	bl	800469c <strncmp>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d103      	bne.n	800257c <main+0x1fc>
        {
            // average PWM
            averageChoice = 1;
 8002574:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <main+0x258>)
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
 800257a:	e74e      	b.n	800241a <main+0x9a>
        }
        else
        {
            continue;
 800257c:	bf00      	nop
        }
    }
 800257e:	e74c      	b.n	800241a <main+0x9a>
 8002580:	401e0000 	.word	0x401e0000
 8002584:	0800ab88 	.word	0x0800ab88
 8002588:	0800abb4 	.word	0x0800abb4
 800258c:	0800abc8 	.word	0x0800abc8
 8002590:	0800abe4 	.word	0x0800abe4
 8002594:	2000ffc0 	.word	0x2000ffc0
 8002598:	10624dd3 	.word	0x10624dd3
 800259c:	0800abf8 	.word	0x0800abf8
 80025a0:	0800ac14 	.word	0x0800ac14
 80025a4:	0800ac24 	.word	0x0800ac24
 80025a8:	20000ad1 	.word	0x20000ad1
 80025ac:	20000ad8 	.word	0x20000ad8
 80025b0:	0800ac2c 	.word	0x0800ac2c
 80025b4:	20000aac 	.word	0x20000aac
 80025b8:	20000ade 	.word	0x20000ade
 80025bc:	0800ac34 	.word	0x0800ac34
 80025c0:	0800ac3c 	.word	0x0800ac3c
 80025c4:	20000ad3 	.word	0x20000ad3
 80025c8:	0800ac44 	.word	0x0800ac44
 80025cc:	0800ac4c 	.word	0x0800ac4c
 80025d0:	20000aa8 	.word	0x20000aa8
 80025d4:	0800ac54 	.word	0x0800ac54
 80025d8:	20000ad6 	.word	0x20000ad6
 80025dc:	0800ac5c 	.word	0x0800ac5c

080025e0 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop

08002618 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
 return -1;
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop

0800262c <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <_fstat+0x16>
  return -1;
 800263c:	f04f 33ff 	mov.w	r3, #4294967295
 8002640:	e001      	b.n	8002646 <_fstat+0x1a>
 else
  return -2;
 8002642:	f06f 0301 	mvn.w	r3, #1
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop

08002654 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 8002654:	b480      	push	{r7}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 800265c:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <_sbrk+0x60>)
 800265e:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 8002660:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <_sbrk+0x64>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d108      	bne.n	800267a <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <_sbrk+0x64>)
 800266a:	4a14      	ldr	r2, [pc, #80]	; (80026bc <_sbrk+0x68>)
 800266c:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	4413      	add	r3, r2
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <_sbrk+0x6c>)
 8002678:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <_sbrk+0x64>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8002680:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 800268c:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8002690:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <_sbrk+0x6c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	429a      	cmp	r2, r3
 800269a:	d301      	bcc.n	80026a0 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 800269c:	2300      	movs	r3, #0
 800269e:	e003      	b.n	80026a8 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 80026a0:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <_sbrk+0x64>)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 80026a6:	693b      	ldr	r3, [r7, #16]
 }
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	371c      	adds	r7, #28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	0000f4d0 	.word	0x0000f4d0
 80026b8:	20000a6c 	.word	0x20000a6c
 80026bc:	20000af0 	.word	0x20000af0
 80026c0:	20000a70 	.word	0x20000a70

080026c4 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop

080026d4 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 80026dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e003      	b.n	8002702 <delay+0x16>
  {
    __NOP();
 80026fa:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3301      	adds	r3, #1
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	429a      	cmp	r2, r3
 8002708:	d3f7      	bcc.n	80026fa <delay+0xe>
  {
    __NOP();
  }
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop

08002718 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8002718:	b598      	push	{r3, r4, r7, lr}
 800271a:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 800271c:	4a06      	ldr	r2, [pc, #24]	; (8002738 <SystemInit+0x20>)
 800271e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002722:	4614      	mov	r4, r2
 8002724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002726:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 800272a:	f000 f807 	bl	800273c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 800272e:	f000 f83d 	bl	80027ac <SystemCoreClockSetup>
}
 8002732:	bf00      	nop
 8002734:	bd98      	pop	{r3, r4, r7, pc}
 8002736:	bf00      	nop
 8002738:	2000ffc4 	.word	0x2000ffc4

0800273c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002742:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <SystemCoreSetup+0x64>)
 8002746:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <SystemCoreSetup+0x68>)
 8002748:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800274a:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800274e:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8002750:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <SystemCoreSetup+0x64>)
 8002752:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <SystemCoreSetup+0x64>)
 8002754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800275c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8002760:	4a0f      	ldr	r2, [pc, #60]	; (80027a0 <SystemCoreSetup+0x64>)
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <SystemCoreSetup+0x64>)
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f023 0308 	bic.w	r3, r3, #8
 800276a:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <SystemCoreSetup+0x6c>)
 800276e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002772:	3314      	adds	r3, #20
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f023 030f 	bic.w	r3, r3, #15
 800277e:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f043 0303 	orr.w	r3, r3, #3
 8002786:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8002788:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <SystemCoreSetup+0x6c>)
 800278a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800278e:	3314      	adds	r3, #20
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	601a      	str	r2, [r3, #0]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00
 80027a4:	08000000 	.word	0x08000000
 80027a8:	58001000 	.word	0x58001000

080027ac <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80027b0:	4b75      	ldr	r3, [pc, #468]	; (8002988 <SystemCoreClockSetup+0x1dc>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10c      	bne.n	80027d6 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 80027bc:	4a72      	ldr	r2, [pc, #456]	; (8002988 <SystemCoreClockSetup+0x1dc>)
 80027be:	4b72      	ldr	r3, [pc, #456]	; (8002988 <SystemCoreClockSetup+0x1dc>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80027c8:	bf00      	nop
 80027ca:	4b6f      	ldr	r3, [pc, #444]	; (8002988 <SystemCoreClockSetup+0x1dc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f9      	beq.n	80027ca <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80027d6:	4b6d      	ldr	r3, [pc, #436]	; (800298c <SystemCoreClockSetup+0x1e0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80027e2:	4a6a      	ldr	r2, [pc, #424]	; (800298c <SystemCoreClockSetup+0x1e0>)
 80027e4:	4b69      	ldr	r3, [pc, #420]	; (800298c <SystemCoreClockSetup+0x1e0>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ec:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80027ee:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80027f2:	f7ff ff7b 	bl	80026ec <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80027f6:	4a66      	ldr	r2, [pc, #408]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 80027f8:	4b65      	ldr	r3, [pc, #404]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002800:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8002802:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002806:	f7ff ff71 	bl	80026ec <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800280a:	4a61      	ldr	r2, [pc, #388]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 800280c:	4b60      	ldr	r3, [pc, #384]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002814:	f023 0302 	bic.w	r3, r3, #2
 8002818:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 800281a:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <SystemCoreClockSetup+0x1e8>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002822:	2b00      	cmp	r3, #0
 8002824:	d029      	beq.n	800287a <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8002826:	4a5b      	ldr	r2, [pc, #364]	; (8002994 <SystemCoreClockSetup+0x1e8>)
 8002828:	4b5a      	ldr	r3, [pc, #360]	; (8002994 <SystemCoreClockSetup+0x1e8>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002830:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002834:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8002836:	f000 f927 	bl	8002a88 <OSCHP_GetFrequency>
 800283a:	4602      	mov	r2, r0
 800283c:	4b56      	ldr	r3, [pc, #344]	; (8002998 <SystemCoreClockSetup+0x1ec>)
 800283e:	fba3 2302 	umull	r2, r3, r3, r2
 8002842:	0d1b      	lsrs	r3, r3, #20
 8002844:	3b01      	subs	r3, #1
 8002846:	041b      	lsls	r3, r3, #16
 8002848:	4952      	ldr	r1, [pc, #328]	; (8002994 <SystemCoreClockSetup+0x1e8>)
 800284a:	4a52      	ldr	r2, [pc, #328]	; (8002994 <SystemCoreClockSetup+0x1e8>)
 800284c:	6852      	ldr	r2, [r2, #4]
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8002852:	4a4f      	ldr	r2, [pc, #316]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 8002854:	4b4e      	ldr	r3, [pc, #312]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f023 0301 	bic.w	r3, r3, #1
 800285c:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800285e:	4a4c      	ldr	r2, [pc, #304]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 8002860:	4b4b      	ldr	r3, [pc, #300]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002868:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 800286a:	bf00      	nop
 800286c:	4b48      	ldr	r3, [pc, #288]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002874:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002878:	d1f8      	bne.n	800286c <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 800287a:	4a45      	ldr	r2, [pc, #276]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 800287c:	4b44      	ldr	r3, [pc, #272]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8002886:	4a42      	ldr	r2, [pc, #264]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 8002888:	4b41      	ldr	r3, [pc, #260]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f043 0310 	orr.w	r3, r3, #16
 8002890:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002892:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 8002894:	4a41      	ldr	r2, [pc, #260]	; (800299c <SystemCoreClockSetup+0x1f0>)
 8002896:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002898:	4a3d      	ldr	r2, [pc, #244]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 800289a:	4b3d      	ldr	r3, [pc, #244]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028a2:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 80028a4:	4a3a      	ldr	r2, [pc, #232]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 80028a6:	4b3a      	ldr	r3, [pc, #232]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f023 0310 	bic.w	r3, r3, #16
 80028ae:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 80028b0:	4a37      	ldr	r2, [pc, #220]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ba:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80028bc:	bf00      	nop
 80028be:	4b34      	ldr	r3, [pc, #208]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f9      	beq.n	80028be <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80028ca:	4a31      	ldr	r2, [pc, #196]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 80028cc:	4b30      	ldr	r3, [pc, #192]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 0301 	bic.w	r3, r3, #1
 80028d4:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80028d6:	bf00      	nop
 80028d8:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f9      	bne.n	80028d8 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80028e4:	4a2e      	ldr	r2, [pc, #184]	; (80029a0 <SystemCoreClockSetup+0x1f4>)
 80028e6:	4b2e      	ldr	r3, [pc, #184]	; (80029a0 <SystemCoreClockSetup+0x1f4>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ee:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <SystemCoreClockSetup+0x1f4>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80028f6:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <SystemCoreClockSetup+0x1f4>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <SystemCoreClockSetup+0x1f4>)
 80028fe:	2200      	movs	r2, #0
 8002900:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8002902:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <SystemCoreClockSetup+0x1f4>)
 8002904:	2200      	movs	r2, #0
 8002906:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <SystemCoreClockSetup+0x1f4>)
 800290a:	2200      	movs	r2, #0
 800290c:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 800290e:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <SystemCoreClockSetup+0x1f4>)
 8002910:	2203      	movs	r2, #3
 8002912:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002914:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 8002916:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800291e:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 8002922:	4a20      	ldr	r2, [pc, #128]	; (80029a4 <SystemCoreClockSetup+0x1f8>)
 8002924:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8002926:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800292a:	f7ff fedf 	bl	80026ec <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800292e:	bf00      	nop
 8002930:	4b17      	ldr	r3, [pc, #92]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f9      	beq.n	8002930 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800293c:	4b14      	ldr	r3, [pc, #80]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 800293e:	4a1a      	ldr	r2, [pc, #104]	; (80029a8 <SystemCoreClockSetup+0x1fc>)
 8002940:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8002942:	f241 1094 	movw	r0, #4500	; 0x1194
 8002946:	f7ff fed1 	bl	80026ec <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800294a:	bf00      	nop
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f9      	beq.n	800294c <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002958:	4b0d      	ldr	r3, [pc, #52]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 800295a:	4a14      	ldr	r2, [pc, #80]	; (80029ac <SystemCoreClockSetup+0x200>)
 800295c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 800295e:	f241 7070 	movw	r0, #6000	; 0x1770
 8002962:	f7ff fec3 	bl	80026ec <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002966:	bf00      	nop
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <SystemCoreClockSetup+0x1e4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f9      	beq.n	8002968 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <SystemCoreClockSetup+0x204>)
 8002976:	2205      	movs	r2, #5
 8002978:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <SystemCoreClockSetup+0x1f4>)
 800297c:	2200      	movs	r2, #0
 800297e:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8002980:	f000 f818 	bl	80029b4 <SystemCoreClockUpdate>
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}
 8002988:	50004200 	.word	0x50004200
 800298c:	50004400 	.word	0x50004400
 8002990:	50004710 	.word	0x50004710
 8002994:	50004700 	.word	0x50004700
 8002998:	6b5fca6b 	.word	0x6b5fca6b
 800299c:	01134f00 	.word	0x01134f00
 80029a0:	50004600 	.word	0x50004600
 80029a4:	01074f00 	.word	0x01074f00
 80029a8:	01044f00 	.word	0x01044f00
 80029ac:	01034f00 	.word	0x01034f00
 80029b0:	50004160 	.word	0x50004160

080029b4 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80029ba:	4b2f      	ldr	r3, [pc, #188]	; (8002a78 <SystemCoreClockUpdate+0xc4>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d03e      	beq.n	8002a44 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80029c6:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <SystemCoreClockUpdate+0xc8>)
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80029d2:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <SystemCoreClockUpdate+0xcc>)
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	e002      	b.n	80029de <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80029d8:	f000 f856 	bl	8002a88 <OSCHP_GetFrequency>
 80029dc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80029de:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <SystemCoreClockUpdate+0xc8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d020      	beq.n	8002a2c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <SystemCoreClockUpdate+0xc8>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80029f2:	0e1b      	lsrs	r3, r3, #24
 80029f4:	3301      	adds	r3, #1
 80029f6:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80029f8:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <SystemCoreClockUpdate+0xc8>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	3301      	adds	r3, #1
 8002a04:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8002a06:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <SystemCoreClockUpdate+0xc8>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a0e:	0c1b      	lsrs	r3, r3, #16
 8002a10:	3301      	adds	r3, #1
 8002a12:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	fb02 f303 	mul.w	r3, r2, r3
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	e00d      	b.n	8002a48 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8002a2c:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <SystemCoreClockUpdate+0xc8>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a34:	3301      	adds	r3, #1
 8002a36:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	e001      	b.n	8002a48 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <SystemCoreClockUpdate+0xcc>)
 8002a46:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <SystemCoreClockUpdate+0xc4>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a56:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <SystemCoreClockUpdate+0xc4>)
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	3301      	adds	r3, #1
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a68:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8002a6a:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <SystemCoreClockUpdate+0xd0>)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	50004600 	.word	0x50004600
 8002a7c:	50004710 	.word	0x50004710
 8002a80:	016e3600 	.word	0x016e3600
 8002a84:	2000ffc0 	.word	0x2000ffc0

08002a88 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8002a8c:	4b02      	ldr	r3, [pc, #8]	; (8002a98 <OSCHP_GetFrequency+0x10>)
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	00b71b00 	.word	0x00b71b00

08002a9c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	7afb      	ldrb	r3, [r7, #11]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3204      	adds	r2, #4
 8002abe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ac2:	7afb      	ldrb	r3, [r7, #11]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	21f8      	movs	r1, #248	; 0xf8
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	ea02 0103 	and.w	r1, r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1d02      	adds	r2, r0, #4
 8002ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002ae2:	7afb      	ldrb	r3, [r7, #11]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2103      	movs	r1, #3
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	401a      	ands	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a38      	ldr	r2, [pc, #224]	; (8002bd8 <XMC_GPIO_Init+0x13c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d003      	beq.n	8002b04 <XMC_GPIO_Init+0x68>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a37      	ldr	r2, [pc, #220]	; (8002bdc <XMC_GPIO_Init+0x140>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d10a      	bne.n	8002b1a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b08:	7afb      	ldrb	r3, [r7, #11]
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	401a      	ands	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	661a      	str	r2, [r3, #96]	; 0x60
 8002b18:	e03c      	b.n	8002b94 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
 8002b20:	409a      	lsls	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8002b26:	7afb      	ldrb	r3, [r7, #11]
 8002b28:	08db      	lsrs	r3, r3, #3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	7afb      	ldrb	r3, [r7, #11]
 8002b30:	08db      	lsrs	r3, r3, #3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	3210      	adds	r2, #16
 8002b3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	2107      	movs	r1, #7
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	ea02 0103 	and.w	r1, r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f100 0210 	add.w	r2, r0, #16
 8002b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8002b5c:	7afb      	ldrb	r3, [r7, #11]
 8002b5e:	08db      	lsrs	r3, r3, #3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	4618      	mov	r0, r3
 8002b64:	7afb      	ldrb	r3, [r7, #11]
 8002b66:	08db      	lsrs	r3, r3, #3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	3210      	adds	r2, #16
 8002b70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	7a1b      	ldrb	r3, [r3, #8]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	7afb      	ldrb	r3, [r7, #11]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	ea42 0103 	orr.w	r1, r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f100 0210 	add.w	r2, r0, #16
 8002b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8002b94:	7afb      	ldrb	r3, [r7, #11]
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	7afb      	ldrb	r3, [r7, #11]
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	3204      	adds	r2, #4
 8002ba8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	7afb      	ldrb	r3, [r7, #11]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	ea42 0103 	orr.w	r1, r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1d02      	adds	r2, r0, #4
 8002bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	48028e00 	.word	0x48028e00
 8002bdc:	48028f00 	.word	0x48028f00

08002be0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bf2:	b2db      	uxtb	r3, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8002c26:	2310      	movs	r3, #16
 8002c28:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fa62 	bl	80030f4 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	79db      	ldrb	r3, [r3, #7]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	79db      	ldrb	r3, [r3, #7]
 8002c3c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4619      	mov	r1, r3
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 faa2 	bl	8003190 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	799b      	ldrb	r3, [r3, #6]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	3301      	adds	r3, #1
 8002c5a:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	791b      	ldrb	r3, [r3, #4]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	061b      	lsls	r3, r3, #24
 8002c72:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	795b      	ldrb	r3, [r3, #5]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	795b      	ldrb	r3, [r3, #5]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	635a      	str	r2, [r3, #52]	; 0x34
 8002c94:	e008      	b.n	8002ca8 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	791b      	ldrb	r3, [r3, #4]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002cae:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	891b      	ldrh	r3, [r3, #8]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop

08002ccc <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cde:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d110      	bne.n	8002d08 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002ce6:	bf00      	nop
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ff79 	bl	8002be0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b80      	cmp	r3, #128	; 0x80
 8002cf2:	d0f9      	beq.n	8002ce8 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002cf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ff81 	bl	8002c00 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 8002d06:	e003      	b.n	8002d10 <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 8002d08:	887a      	ldrh	r2, [r7, #2]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002d26:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d103      	bne.n	8002d36 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d32:	81fb      	strh	r3, [r7, #14]
 8002d34:	e003      	b.n	8002d3e <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002d3c:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8002d3e:	89fb      	ldrh	r3, [r7, #14]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d5e:	b2db      	uxtb	r3, r3
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop

08002d90 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f9aa 	bl	80030f4 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <XMC_I2C_CH_Init+0x4c>)
 8002da4:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	889b      	ldrh	r3, [r3, #4]
 8002daa:	4619      	mov	r1, r3
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f817 	bl	8002de0 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4619      	mov	r1, r3
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f831 	bl	8002e20 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dcc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	073f0303 	.word	0x073f0303

08002de0 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8002dec:	887b      	ldrh	r3, [r7, #2]
 8002dee:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8002df2:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8002df6:	d109      	bne.n	8002e0c <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 8002df8:	887b      	ldrh	r3, [r7, #2]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	887b      	ldrh	r3, [r7, #2]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8002e0a:	e003      	b.n	8002e14 <XMC_I2C_CH_SetSlaveAddress+0x34>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8002e0c:	887b      	ldrh	r3, [r7, #2]
 8002e0e:	021a      	lsls	r2, r3, #8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	4a17      	ldr	r2, [pc, #92]	; (8002e90 <XMC_I2C_CH_SetBaudrate+0x70>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d810      	bhi.n	8002e58 <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 8002e42:	220a      	movs	r2, #10
 8002e44:	6839      	ldr	r1, [r7, #0]
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9a2 	bl	8003190 <XMC_USIC_CH_SetBaudrate>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d119      	bne.n	8002e86 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
 8002e56:	e016      	b.n	8002e86 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	4a0e      	ldr	r2, [pc, #56]	; (8002e94 <XMC_I2C_CH_SetBaudrate+0x74>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d810      	bhi.n	8002e82 <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e64:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8002e6c:	2219      	movs	r2, #25
 8002e6e:	6839      	ldr	r1, [r7, #0]
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f98d 	bl	8003190 <XMC_USIC_CH_SetBaudrate>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d104      	bne.n	8002e86 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	73fb      	strb	r3, [r7, #15]
 8002e80:	e001      	b.n	8002e86 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	000186a0 	.word	0x000186a0
 8002e94:	00061a80 	.word	0x00061a80

08002e98 <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8002ea8:	887b      	ldrh	r3, [r7, #2]
 8002eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8002eb2:	787b      	ldrb	r3, [r7, #1]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d103      	bne.n	8002ec0 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ec6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d110      	bne.n	8002ef0 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002ece:	bf00      	nop
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff3b 	bl	8002d4c <XMC_USIC_CH_GetTransmitBufferStatus>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b80      	cmp	r3, #128	; 0x80
 8002eda:	d0f9      	beq.n	8002ed0 <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002edc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ff43 	bl	8002d6c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = temp;
  }
}
 8002eee:	e003      	b.n	8002ef8 <XMC_I2C_CH_MasterStart+0x60>

    channel->TBUF[0] = temp;
  }
  else
  {
    channel->IN[0U] = temp;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8002f10:	887b      	ldrh	r3, [r7, #2]
 8002f12:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8002f1a:	787b      	ldrb	r3, [r7, #1]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d103      	bne.n	8002f28 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f2e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d110      	bne.n	8002f58 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002f36:	bf00      	nop
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ff07 	bl	8002d4c <XMC_USIC_CH_GetTransmitBufferStatus>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b80      	cmp	r3, #128	; 0x80
 8002f42:	d0f9      	beq.n	8002f38 <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002f44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff0f 	bl	8002d6c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = tmp;
  }
}
 8002f56:	e003      	b.n	8002f60 <XMC_I2C_CH_MasterRepeatedStart+0x60>

    channel->TBUF[0] = tmp;
  }
  else
  {
    channel->IN[0U] = tmp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f76:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d111      	bne.n	8002fa2 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002f7e:	bf00      	nop
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff fee3 	bl	8002d4c <XMC_USIC_CH_GetTransmitBufferStatus>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b80      	cmp	r3, #128	; 0x80
 8002f8a:	d0f9      	beq.n	8002f80 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002f8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff feeb 	bl	8002d6c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
}
 8002fa0:	e004      	b.n	8002fac <XMC_I2C_CH_MasterStop+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002fa8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fc6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d110      	bne.n	8002ff0 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002fce:	bf00      	nop
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff febb 	bl	8002d4c <XMC_USIC_CH_GetTransmitBufferStatus>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b80      	cmp	r3, #128	; 0x80
 8002fda:	d0f9      	beq.n	8002fd0 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff fec3 	bl	8002d6c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
}
 8002fee:	e003      	b.n	8002ff8 <XMC_I2C_CH_MasterTransmit+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <XMC_I2C_CH_MasterReceiveNack>:
  }
}

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800300e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d111      	bne.n	800303a <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8003016:	bf00      	nop
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff fe97 	bl	8002d4c <XMC_USIC_CH_GetTransmitBufferStatus>
 800301e:	4603      	mov	r3, r0
 8003020:	2b80      	cmp	r3, #128	; 0x80
 8003022:	d0f9      	beq.n	8003018 <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8003024:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff fe9f 	bl	8002d6c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
}
 8003038:	e004      	b.n	8003044 <XMC_I2C_CH_MasterReceiveNack+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003040:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800305a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d103      	bne.n	800306a <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	73fb      	strb	r3, [r7, #15]
 8003068:	e003      	b.n	8003072 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8003070:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8003072:	7bfb      	ldrb	r3, [r7, #15]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	2000ffc0 	.word	0x2000ffc0

08003098 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	0f1b      	lsrs	r3, r3, #28
 80030a4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80030ac:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	461a      	mov	r2, r3
 80030ba:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 80030bc:	4413      	add	r3, r2
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	601a      	str	r2, [r3, #0]
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	50004414 	.word	0x50004414

080030d4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80030d8:	f7ff ffd2 	bl	8003080 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80030dc:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80030e6:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	50004600 	.word	0x50004600

080030f4 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a1b      	ldr	r2, [pc, #108]	; (800316c <XMC_USIC_CH_Enable+0x78>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d003      	beq.n	800310c <XMC_USIC_CH_Enable+0x18>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a1a      	ldr	r2, [pc, #104]	; (8003170 <XMC_USIC_CH_Enable+0x7c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d103      	bne.n	8003114 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 800310c:	4819      	ldr	r0, [pc, #100]	; (8003174 <XMC_USIC_CH_Enable+0x80>)
 800310e:	f000 f91f 	bl	8003350 <XMC_USIC_Enable>
 8003112:	e016      	b.n	8003142 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a18      	ldr	r2, [pc, #96]	; (8003178 <XMC_USIC_CH_Enable+0x84>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <XMC_USIC_CH_Enable+0x30>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a17      	ldr	r2, [pc, #92]	; (800317c <XMC_USIC_CH_Enable+0x88>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d103      	bne.n	800312c <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8003124:	4816      	ldr	r0, [pc, #88]	; (8003180 <XMC_USIC_CH_Enable+0x8c>)
 8003126:	f000 f913 	bl	8003350 <XMC_USIC_Enable>
 800312a:	e00a      	b.n	8003142 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a15      	ldr	r2, [pc, #84]	; (8003184 <XMC_USIC_CH_Enable+0x90>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d003      	beq.n	800313c <XMC_USIC_CH_Enable+0x48>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a14      	ldr	r2, [pc, #80]	; (8003188 <XMC_USIC_CH_Enable+0x94>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d102      	bne.n	8003142 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 800313c:	4813      	ldr	r0, [pc, #76]	; (800318c <XMC_USIC_CH_Enable+0x98>)
 800313e:	f000 f907 	bl	8003350 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2203      	movs	r2, #3
 8003146:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8003148:	bf00      	nop
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f9      	beq.n	800314a <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f023 020f 	bic.w	r2, r3, #15
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40030000 	.word	0x40030000
 8003170:	40030200 	.word	0x40030200
 8003174:	40030008 	.word	0x40030008
 8003178:	48020000 	.word	0x48020000
 800317c:	48020200 	.word	0x48020200
 8003180:	48020008 	.word	0x48020008
 8003184:	48024000 	.word	0x48024000
 8003188:	48024200 	.word	0x48024200
 800318c:	48024008 	.word	0x48024008

08003190 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08e      	sub	sp, #56	; 0x38
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b63      	cmp	r3, #99	; 0x63
 80031a0:	d958      	bls.n	8003254 <XMC_USIC_CH_SetBaudrate+0xc4>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d055      	beq.n	8003254 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80031a8:	f7ff ff94 	bl	80030d4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80031b0:	fba3 2302 	umull	r2, r3, r3, r2
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4a2b      	ldr	r2, [pc, #172]	; (8003268 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 80031c4:	2301      	movs	r3, #1
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80031c8:	2301      	movs	r3, #1
 80031ca:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80031cc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80031d2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80031d6:	633b      	str	r3, [r7, #48]	; 0x30
 80031d8:	e022      	b.n	8003220 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031de:	fb02 f203 	mul.w	r2, r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ee:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	0a9b      	lsrs	r3, r3, #10
 80031f4:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031fc:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003204:	d209      	bcs.n	800321a <XMC_USIC_CH_SetBaudrate+0x8a>
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	429a      	cmp	r2, r3
 800320c:	d205      	bcs.n	800321a <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	3b01      	subs	r3, #1
 800321e:	633b      	str	r3, [r7, #48]	; 0x30
 8003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1d9      	bne.n	80031da <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <XMC_USIC_CH_SetBaudrate+0xdc>)
 8003236:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	3a01      	subs	r2, #1
 800323c:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800323e:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	3b01      	subs	r3, #1
 8003244:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8003246:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003252:	e002      	b.n	800325a <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 800325a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800325e:	4618      	mov	r0, r3
 8003260:	3738      	adds	r7, #56	; 0x38
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	51eb851f 	.word	0x51eb851f
 800326c:	fc0080ef 	.word	0xfc0080ef

08003270 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003286:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8003298:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	0211      	lsls	r1, r2, #8
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 80032a2:	79fa      	ldrb	r2, [r7, #7]
 80032a4:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80032a6:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 80032a8:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	f8ffc0c0 	.word	0xf8ffc0c0

080032c0 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80032d6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80032e6:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 80032e8:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	0211      	lsls	r1, r2, #8
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 80032f2:	79fa      	ldrb	r2, [r7, #7]
 80032f4:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 80032f6:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	efffc0c0 	.word	0xefffc0c0

08003314 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	460b      	mov	r3, r1
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003328:	7afb      	ldrb	r3, [r7, #11]
 800332a:	2107      	movs	r1, #7
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8003334:	7afb      	ldrb	r3, [r7, #11]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <XMC_USIC_Enable+0x40>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d104      	bne.n	800336a <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8003360:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003364:	f7ff fe98 	bl	8003098 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8003368:	e00e      	b.n	8003388 <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a09      	ldr	r2, [pc, #36]	; (8003394 <XMC_USIC_Enable+0x44>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d103      	bne.n	800337a <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8003372:	4809      	ldr	r0, [pc, #36]	; (8003398 <XMC_USIC_Enable+0x48>)
 8003374:	f7ff fe90 	bl	8003098 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8003378:	e006      	b.n	8003388 <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a07      	ldr	r2, [pc, #28]	; (800339c <XMC_USIC_Enable+0x4c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d102      	bne.n	8003388 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8003382:	4807      	ldr	r0, [pc, #28]	; (80033a0 <XMC_USIC_Enable+0x50>)
 8003384:	f7ff fe88 	bl	8003098 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40030008 	.word	0x40030008
 8003394:	48020008 	.word	0x48020008
 8003398:	10000080 	.word	0x10000080
 800339c:	48024008 	.word	0x48024008
 80033a0:	10000100 	.word	0x10000100
 80033a4:	00000000 	.word	0x00000000

080033a8 <atan>:
 80033a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ac:	4bc4      	ldr	r3, [pc, #784]	; (80036c0 <atan+0x318>)
 80033ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80033b2:	429e      	cmp	r6, r3
 80033b4:	4604      	mov	r4, r0
 80033b6:	460d      	mov	r5, r1
 80033b8:	468b      	mov	fp, r1
 80033ba:	dd0e      	ble.n	80033da <atan+0x32>
 80033bc:	4bc1      	ldr	r3, [pc, #772]	; (80036c4 <atan+0x31c>)
 80033be:	429e      	cmp	r6, r3
 80033c0:	f300 80ac 	bgt.w	800351c <atan+0x174>
 80033c4:	f000 80a7 	beq.w	8003516 <atan+0x16e>
 80033c8:	f1bb 0f00 	cmp.w	fp, #0
 80033cc:	f340 80e9 	ble.w	80035a2 <atan+0x1fa>
 80033d0:	a19f      	add	r1, pc, #636	; (adr r1, 8003650 <atan+0x2a8>)
 80033d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033da:	4bbb      	ldr	r3, [pc, #748]	; (80036c8 <atan+0x320>)
 80033dc:	429e      	cmp	r6, r3
 80033de:	f300 80b5 	bgt.w	800354c <atan+0x1a4>
 80033e2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80033e6:	429e      	cmp	r6, r3
 80033e8:	f340 80a0 	ble.w	800352c <atan+0x184>
 80033ec:	f04f 3aff 	mov.w	sl, #4294967295
 80033f0:	4622      	mov	r2, r4
 80033f2:	462b      	mov	r3, r5
 80033f4:	4620      	mov	r0, r4
 80033f6:	4629      	mov	r1, r5
 80033f8:	f000 fc52 	bl	8003ca0 <__aeabi_dmul>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4680      	mov	r8, r0
 8003402:	4689      	mov	r9, r1
 8003404:	f000 fc4c 	bl	8003ca0 <__aeabi_dmul>
 8003408:	a393      	add	r3, pc, #588	; (adr r3, 8003658 <atan+0x2b0>)
 800340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340e:	4606      	mov	r6, r0
 8003410:	460f      	mov	r7, r1
 8003412:	f000 fc45 	bl	8003ca0 <__aeabi_dmul>
 8003416:	a392      	add	r3, pc, #584	; (adr r3, 8003660 <atan+0x2b8>)
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	f000 fa8e 	bl	800393c <__adddf3>
 8003420:	4632      	mov	r2, r6
 8003422:	463b      	mov	r3, r7
 8003424:	f000 fc3c 	bl	8003ca0 <__aeabi_dmul>
 8003428:	a38f      	add	r3, pc, #572	; (adr r3, 8003668 <atan+0x2c0>)
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	f000 fa85 	bl	800393c <__adddf3>
 8003432:	4632      	mov	r2, r6
 8003434:	463b      	mov	r3, r7
 8003436:	f000 fc33 	bl	8003ca0 <__aeabi_dmul>
 800343a:	a38d      	add	r3, pc, #564	; (adr r3, 8003670 <atan+0x2c8>)
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	f000 fa7c 	bl	800393c <__adddf3>
 8003444:	4632      	mov	r2, r6
 8003446:	463b      	mov	r3, r7
 8003448:	f000 fc2a 	bl	8003ca0 <__aeabi_dmul>
 800344c:	a38a      	add	r3, pc, #552	; (adr r3, 8003678 <atan+0x2d0>)
 800344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003452:	f000 fa73 	bl	800393c <__adddf3>
 8003456:	4632      	mov	r2, r6
 8003458:	463b      	mov	r3, r7
 800345a:	f000 fc21 	bl	8003ca0 <__aeabi_dmul>
 800345e:	a388      	add	r3, pc, #544	; (adr r3, 8003680 <atan+0x2d8>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f000 fa6a 	bl	800393c <__adddf3>
 8003468:	4642      	mov	r2, r8
 800346a:	464b      	mov	r3, r9
 800346c:	f000 fc18 	bl	8003ca0 <__aeabi_dmul>
 8003470:	a385      	add	r3, pc, #532	; (adr r3, 8003688 <atan+0x2e0>)
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	4680      	mov	r8, r0
 8003478:	4689      	mov	r9, r1
 800347a:	4630      	mov	r0, r6
 800347c:	4639      	mov	r1, r7
 800347e:	f000 fc0f 	bl	8003ca0 <__aeabi_dmul>
 8003482:	a383      	add	r3, pc, #524	; (adr r3, 8003690 <atan+0x2e8>)
 8003484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003488:	f000 fa56 	bl	8003938 <__aeabi_dsub>
 800348c:	4632      	mov	r2, r6
 800348e:	463b      	mov	r3, r7
 8003490:	f000 fc06 	bl	8003ca0 <__aeabi_dmul>
 8003494:	a380      	add	r3, pc, #512	; (adr r3, 8003698 <atan+0x2f0>)
 8003496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349a:	f000 fa4d 	bl	8003938 <__aeabi_dsub>
 800349e:	4632      	mov	r2, r6
 80034a0:	463b      	mov	r3, r7
 80034a2:	f000 fbfd 	bl	8003ca0 <__aeabi_dmul>
 80034a6:	a37e      	add	r3, pc, #504	; (adr r3, 80036a0 <atan+0x2f8>)
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f000 fa44 	bl	8003938 <__aeabi_dsub>
 80034b0:	4632      	mov	r2, r6
 80034b2:	463b      	mov	r3, r7
 80034b4:	f000 fbf4 	bl	8003ca0 <__aeabi_dmul>
 80034b8:	a37b      	add	r3, pc, #492	; (adr r3, 80036a8 <atan+0x300>)
 80034ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034be:	f000 fa3b 	bl	8003938 <__aeabi_dsub>
 80034c2:	4632      	mov	r2, r6
 80034c4:	463b      	mov	r3, r7
 80034c6:	f000 fbeb 	bl	8003ca0 <__aeabi_dmul>
 80034ca:	f1ba 3fff 	cmp.w	sl, #4294967295
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	d06b      	beq.n	80035ac <atan+0x204>
 80034d4:	4640      	mov	r0, r8
 80034d6:	4649      	mov	r1, r9
 80034d8:	f000 fa30 	bl	800393c <__adddf3>
 80034dc:	4622      	mov	r2, r4
 80034de:	462b      	mov	r3, r5
 80034e0:	f000 fbde 	bl	8003ca0 <__aeabi_dmul>
 80034e4:	4e79      	ldr	r6, [pc, #484]	; (80036cc <atan+0x324>)
 80034e6:	4b7a      	ldr	r3, [pc, #488]	; (80036d0 <atan+0x328>)
 80034e8:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80034ec:	4456      	add	r6, sl
 80034ee:	449a      	add	sl, r3
 80034f0:	e9da 2300 	ldrd	r2, r3, [sl]
 80034f4:	f000 fa20 	bl	8003938 <__aeabi_dsub>
 80034f8:	4622      	mov	r2, r4
 80034fa:	462b      	mov	r3, r5
 80034fc:	f000 fa1c 	bl	8003938 <__aeabi_dsub>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003508:	f000 fa16 	bl	8003938 <__aeabi_dsub>
 800350c:	f1bb 0f00 	cmp.w	fp, #0
 8003510:	db43      	blt.n	800359a <atan+0x1f2>
 8003512:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003516:	2800      	cmp	r0, #0
 8003518:	f43f af56 	beq.w	80033c8 <atan+0x20>
 800351c:	4622      	mov	r2, r4
 800351e:	462b      	mov	r3, r5
 8003520:	4620      	mov	r0, r4
 8003522:	4629      	mov	r1, r5
 8003524:	f000 fa0a 	bl	800393c <__adddf3>
 8003528:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800352c:	a360      	add	r3, pc, #384	; (adr r3, 80036b0 <atan+0x308>)
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	f000 fa03 	bl	800393c <__adddf3>
 8003536:	2200      	movs	r2, #0
 8003538:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <atan+0x32c>)
 800353a:	f000 fe41 	bl	80041c0 <__aeabi_dcmpgt>
 800353e:	2800      	cmp	r0, #0
 8003540:	f43f af54 	beq.w	80033ec <atan+0x44>
 8003544:	4620      	mov	r0, r4
 8003546:	4629      	mov	r1, r5
 8003548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800354c:	f000 f8cc 	bl	80036e8 <fabs>
 8003550:	4b61      	ldr	r3, [pc, #388]	; (80036d8 <atan+0x330>)
 8003552:	429e      	cmp	r6, r3
 8003554:	4604      	mov	r4, r0
 8003556:	460d      	mov	r5, r1
 8003558:	dc38      	bgt.n	80035cc <atan+0x224>
 800355a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800355e:	429e      	cmp	r6, r3
 8003560:	dc5d      	bgt.n	800361e <atan+0x276>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	f000 f9e9 	bl	800393c <__adddf3>
 800356a:	2200      	movs	r2, #0
 800356c:	4b59      	ldr	r3, [pc, #356]	; (80036d4 <atan+0x32c>)
 800356e:	f000 f9e3 	bl	8003938 <__aeabi_dsub>
 8003572:	2200      	movs	r2, #0
 8003574:	4606      	mov	r6, r0
 8003576:	460f      	mov	r7, r1
 8003578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800357c:	4620      	mov	r0, r4
 800357e:	4629      	mov	r1, r5
 8003580:	f000 f9dc 	bl	800393c <__adddf3>
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4630      	mov	r0, r6
 800358a:	4639      	mov	r1, r7
 800358c:	f000 fcb2 	bl	8003ef4 <__aeabi_ddiv>
 8003590:	f04f 0a00 	mov.w	sl, #0
 8003594:	4604      	mov	r4, r0
 8003596:	460d      	mov	r5, r1
 8003598:	e72a      	b.n	80033f0 <atan+0x48>
 800359a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800359e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035a2:	a145      	add	r1, pc, #276	; (adr r1, 80036b8 <atan+0x310>)
 80035a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ac:	4640      	mov	r0, r8
 80035ae:	4649      	mov	r1, r9
 80035b0:	f000 f9c4 	bl	800393c <__adddf3>
 80035b4:	4622      	mov	r2, r4
 80035b6:	462b      	mov	r3, r5
 80035b8:	f000 fb72 	bl	8003ca0 <__aeabi_dmul>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4620      	mov	r0, r4
 80035c2:	4629      	mov	r1, r5
 80035c4:	f000 f9b8 	bl	8003938 <__aeabi_dsub>
 80035c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035cc:	4b43      	ldr	r3, [pc, #268]	; (80036dc <atan+0x334>)
 80035ce:	429e      	cmp	r6, r3
 80035d0:	dc1a      	bgt.n	8003608 <atan+0x260>
 80035d2:	2200      	movs	r2, #0
 80035d4:	4b42      	ldr	r3, [pc, #264]	; (80036e0 <atan+0x338>)
 80035d6:	f000 f9af 	bl	8003938 <__aeabi_dsub>
 80035da:	2200      	movs	r2, #0
 80035dc:	4606      	mov	r6, r0
 80035de:	460f      	mov	r7, r1
 80035e0:	4b3f      	ldr	r3, [pc, #252]	; (80036e0 <atan+0x338>)
 80035e2:	4620      	mov	r0, r4
 80035e4:	4629      	mov	r1, r5
 80035e6:	f000 fb5b 	bl	8003ca0 <__aeabi_dmul>
 80035ea:	2200      	movs	r2, #0
 80035ec:	4b39      	ldr	r3, [pc, #228]	; (80036d4 <atan+0x32c>)
 80035ee:	f000 f9a5 	bl	800393c <__adddf3>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4630      	mov	r0, r6
 80035f8:	4639      	mov	r1, r7
 80035fa:	f000 fc7b 	bl	8003ef4 <__aeabi_ddiv>
 80035fe:	f04f 0a02 	mov.w	sl, #2
 8003602:	4604      	mov	r4, r0
 8003604:	460d      	mov	r5, r1
 8003606:	e6f3      	b.n	80033f0 <atan+0x48>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	2000      	movs	r0, #0
 800360e:	4935      	ldr	r1, [pc, #212]	; (80036e4 <atan+0x33c>)
 8003610:	f000 fc70 	bl	8003ef4 <__aeabi_ddiv>
 8003614:	f04f 0a03 	mov.w	sl, #3
 8003618:	4604      	mov	r4, r0
 800361a:	460d      	mov	r5, r1
 800361c:	e6e8      	b.n	80033f0 <atan+0x48>
 800361e:	2200      	movs	r2, #0
 8003620:	4b2c      	ldr	r3, [pc, #176]	; (80036d4 <atan+0x32c>)
 8003622:	f000 f989 	bl	8003938 <__aeabi_dsub>
 8003626:	2200      	movs	r2, #0
 8003628:	4606      	mov	r6, r0
 800362a:	460f      	mov	r7, r1
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <atan+0x32c>)
 800362e:	4620      	mov	r0, r4
 8003630:	4629      	mov	r1, r5
 8003632:	f000 f983 	bl	800393c <__adddf3>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4630      	mov	r0, r6
 800363c:	4639      	mov	r1, r7
 800363e:	f000 fc59 	bl	8003ef4 <__aeabi_ddiv>
 8003642:	f04f 0a01 	mov.w	sl, #1
 8003646:	4604      	mov	r4, r0
 8003648:	460d      	mov	r5, r1
 800364a:	e6d1      	b.n	80033f0 <atan+0x48>
 800364c:	f3af 8000 	nop.w
 8003650:	54442d18 	.word	0x54442d18
 8003654:	3ff921fb 	.word	0x3ff921fb
 8003658:	e322da11 	.word	0xe322da11
 800365c:	3f90ad3a 	.word	0x3f90ad3a
 8003660:	24760deb 	.word	0x24760deb
 8003664:	3fa97b4b 	.word	0x3fa97b4b
 8003668:	a0d03d51 	.word	0xa0d03d51
 800366c:	3fb10d66 	.word	0x3fb10d66
 8003670:	c54c206e 	.word	0xc54c206e
 8003674:	3fb745cd 	.word	0x3fb745cd
 8003678:	920083ff 	.word	0x920083ff
 800367c:	3fc24924 	.word	0x3fc24924
 8003680:	5555550d 	.word	0x5555550d
 8003684:	3fd55555 	.word	0x3fd55555
 8003688:	2c6a6c2f 	.word	0x2c6a6c2f
 800368c:	bfa2b444 	.word	0xbfa2b444
 8003690:	52defd9a 	.word	0x52defd9a
 8003694:	3fadde2d 	.word	0x3fadde2d
 8003698:	af749a6d 	.word	0xaf749a6d
 800369c:	3fb3b0f2 	.word	0x3fb3b0f2
 80036a0:	fe231671 	.word	0xfe231671
 80036a4:	3fbc71c6 	.word	0x3fbc71c6
 80036a8:	9998ebc4 	.word	0x9998ebc4
 80036ac:	3fc99999 	.word	0x3fc99999
 80036b0:	8800759c 	.word	0x8800759c
 80036b4:	7e37e43c 	.word	0x7e37e43c
 80036b8:	54442d18 	.word	0x54442d18
 80036bc:	bff921fb 	.word	0xbff921fb
 80036c0:	440fffff 	.word	0x440fffff
 80036c4:	7ff00000 	.word	0x7ff00000
 80036c8:	3fdbffff 	.word	0x3fdbffff
 80036cc:	0800ac88 	.word	0x0800ac88
 80036d0:	0800ac68 	.word	0x0800ac68
 80036d4:	3ff00000 	.word	0x3ff00000
 80036d8:	3ff2ffff 	.word	0x3ff2ffff
 80036dc:	40037fff 	.word	0x40037fff
 80036e0:	3ff80000 	.word	0x3ff80000
 80036e4:	bff00000 	.word	0xbff00000

080036e8 <fabs>:
 80036e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop

080036f0 <sqrt>:
 80036f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f4:	b08b      	sub	sp, #44	; 0x2c
 80036f6:	4604      	mov	r4, r0
 80036f8:	460d      	mov	r5, r1
 80036fa:	f000 f855 	bl	80037a8 <__ieee754_sqrt>
 80036fe:	4b28      	ldr	r3, [pc, #160]	; (80037a0 <sqrt+0xb0>)
 8003700:	f993 a000 	ldrsb.w	sl, [r3]
 8003704:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003708:	4606      	mov	r6, r0
 800370a:	460f      	mov	r7, r1
 800370c:	d012      	beq.n	8003734 <sqrt+0x44>
 800370e:	4622      	mov	r2, r4
 8003710:	462b      	mov	r3, r5
 8003712:	4620      	mov	r0, r4
 8003714:	4629      	mov	r1, r5
 8003716:	f000 fd5d 	bl	80041d4 <__aeabi_dcmpun>
 800371a:	4683      	mov	fp, r0
 800371c:	b950      	cbnz	r0, 8003734 <sqrt+0x44>
 800371e:	f04f 0800 	mov.w	r8, #0
 8003722:	f04f 0900 	mov.w	r9, #0
 8003726:	4620      	mov	r0, r4
 8003728:	4629      	mov	r1, r5
 800372a:	4642      	mov	r2, r8
 800372c:	464b      	mov	r3, r9
 800372e:	f000 fd29 	bl	8004184 <__aeabi_dcmplt>
 8003732:	b920      	cbnz	r0, 800373e <sqrt+0x4e>
 8003734:	4630      	mov	r0, r6
 8003736:	4639      	mov	r1, r7
 8003738:	b00b      	add	sp, #44	; 0x2c
 800373a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800373e:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <sqrt+0xb4>)
 8003740:	f8cd b020 	str.w	fp, [sp, #32]
 8003744:	2201      	movs	r2, #1
 8003746:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800374a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800374e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003752:	f1ba 0f00 	cmp.w	sl, #0
 8003756:	d015      	beq.n	8003784 <sqrt+0x94>
 8003758:	4642      	mov	r2, r8
 800375a:	464b      	mov	r3, r9
 800375c:	4640      	mov	r0, r8
 800375e:	4649      	mov	r1, r9
 8003760:	f000 fbc8 	bl	8003ef4 <__aeabi_ddiv>
 8003764:	f1ba 0f02 	cmp.w	sl, #2
 8003768:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800376c:	d10c      	bne.n	8003788 <sqrt+0x98>
 800376e:	f000 fd8f 	bl	8004290 <__errno>
 8003772:	2321      	movs	r3, #33	; 0x21
 8003774:	6003      	str	r3, [r0, #0]
 8003776:	9b08      	ldr	r3, [sp, #32]
 8003778:	b963      	cbnz	r3, 8003794 <sqrt+0xa4>
 800377a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800377e:	b00b      	add	sp, #44	; 0x2c
 8003780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003784:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003788:	4668      	mov	r0, sp
 800378a:	f000 f8cf 	bl	800392c <matherr>
 800378e:	2800      	cmp	r0, #0
 8003790:	d1f1      	bne.n	8003776 <sqrt+0x86>
 8003792:	e7ec      	b.n	800376e <sqrt+0x7e>
 8003794:	f000 fd7c 	bl	8004290 <__errno>
 8003798:	9b08      	ldr	r3, [sp, #32]
 800379a:	6003      	str	r3, [r0, #0]
 800379c:	e7ed      	b.n	800377a <sqrt+0x8a>
 800379e:	bf00      	nop
 80037a0:	20000038 	.word	0x20000038
 80037a4:	0800aca8 	.word	0x0800aca8

080037a8 <__ieee754_sqrt>:
 80037a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ac:	4e5e      	ldr	r6, [pc, #376]	; (8003928 <__ieee754_sqrt+0x180>)
 80037ae:	46b6      	mov	lr, r6
 80037b0:	400e      	ands	r6, r1
 80037b2:	4576      	cmp	r6, lr
 80037b4:	4604      	mov	r4, r0
 80037b6:	460d      	mov	r5, r1
 80037b8:	f000 8094 	beq.w	80038e4 <__ieee754_sqrt+0x13c>
 80037bc:	2900      	cmp	r1, #0
 80037be:	460b      	mov	r3, r1
 80037c0:	4602      	mov	r2, r0
 80037c2:	dd72      	ble.n	80038aa <__ieee754_sqrt+0x102>
 80037c4:	150f      	asrs	r7, r1, #20
 80037c6:	d07d      	beq.n	80038c4 <__ieee754_sqrt+0x11c>
 80037c8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 80037cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037d0:	07f8      	lsls	r0, r7, #31
 80037d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037d6:	d463      	bmi.n	80038a0 <__ieee754_sqrt+0xf8>
 80037d8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80037dc:	2600      	movs	r6, #0
 80037de:	440b      	add	r3, r1
 80037e0:	107f      	asrs	r7, r7, #1
 80037e2:	0052      	lsls	r2, r2, #1
 80037e4:	46b6      	mov	lr, r6
 80037e6:	2016      	movs	r0, #22
 80037e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037ec:	eb0e 0401 	add.w	r4, lr, r1
 80037f0:	429c      	cmp	r4, r3
 80037f2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80037f6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80037fa:	dc03      	bgt.n	8003804 <__ieee754_sqrt+0x5c>
 80037fc:	1b1b      	subs	r3, r3, r4
 80037fe:	eb04 0e01 	add.w	lr, r4, r1
 8003802:	440e      	add	r6, r1
 8003804:	3801      	subs	r0, #1
 8003806:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800380a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800380e:	d1ed      	bne.n	80037ec <__ieee754_sqrt+0x44>
 8003810:	4684      	mov	ip, r0
 8003812:	2420      	movs	r4, #32
 8003814:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003818:	e009      	b.n	800382e <__ieee754_sqrt+0x86>
 800381a:	d020      	beq.n	800385e <__ieee754_sqrt+0xb6>
 800381c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 8003820:	3c01      	subs	r4, #1
 8003822:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003826:	442b      	add	r3, r5
 8003828:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800382c:	d020      	beq.n	8003870 <__ieee754_sqrt+0xc8>
 800382e:	459e      	cmp	lr, r3
 8003830:	eb01 050c 	add.w	r5, r1, ip
 8003834:	daf1      	bge.n	800381a <__ieee754_sqrt+0x72>
 8003836:	2d00      	cmp	r5, #0
 8003838:	eb05 0c01 	add.w	ip, r5, r1
 800383c:	db09      	blt.n	8003852 <__ieee754_sqrt+0xaa>
 800383e:	46f0      	mov	r8, lr
 8003840:	4295      	cmp	r5, r2
 8003842:	ebce 0303 	rsb	r3, lr, r3
 8003846:	d900      	bls.n	800384a <__ieee754_sqrt+0xa2>
 8003848:	3b01      	subs	r3, #1
 800384a:	1b52      	subs	r2, r2, r5
 800384c:	4408      	add	r0, r1
 800384e:	46c6      	mov	lr, r8
 8003850:	e7e4      	b.n	800381c <__ieee754_sqrt+0x74>
 8003852:	f1bc 0f00 	cmp.w	ip, #0
 8003856:	dbf2      	blt.n	800383e <__ieee754_sqrt+0x96>
 8003858:	f10e 0801 	add.w	r8, lr, #1
 800385c:	e7f0      	b.n	8003840 <__ieee754_sqrt+0x98>
 800385e:	4295      	cmp	r5, r2
 8003860:	d81c      	bhi.n	800389c <__ieee754_sqrt+0xf4>
 8003862:	2d00      	cmp	r5, #0
 8003864:	eb05 0c01 	add.w	ip, r5, r1
 8003868:	db48      	blt.n	80038fc <__ieee754_sqrt+0x154>
 800386a:	4698      	mov	r8, r3
 800386c:	2300      	movs	r3, #0
 800386e:	e7ec      	b.n	800384a <__ieee754_sqrt+0xa2>
 8003870:	4313      	orrs	r3, r2
 8003872:	d004      	beq.n	800387e <__ieee754_sqrt+0xd6>
 8003874:	1c41      	adds	r1, r0, #1
 8003876:	d045      	beq.n	8003904 <__ieee754_sqrt+0x15c>
 8003878:	f000 0401 	and.w	r4, r0, #1
 800387c:	4420      	add	r0, r4
 800387e:	0844      	lsrs	r4, r0, #1
 8003880:	1073      	asrs	r3, r6, #1
 8003882:	07f2      	lsls	r2, r6, #31
 8003884:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003888:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800388c:	bf48      	it	mi
 800388e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8003892:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8003896:	4620      	mov	r0, r4
 8003898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800389c:	4673      	mov	r3, lr
 800389e:	e7bd      	b.n	800381c <__ieee754_sqrt+0x74>
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80038a6:	0052      	lsls	r2, r2, #1
 80038a8:	e796      	b.n	80037d8 <__ieee754_sqrt+0x30>
 80038aa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80038ae:	4306      	orrs	r6, r0
 80038b0:	d022      	beq.n	80038f8 <__ieee754_sqrt+0x150>
 80038b2:	bb71      	cbnz	r1, 8003912 <__ieee754_sqrt+0x16a>
 80038b4:	460f      	mov	r7, r1
 80038b6:	0ad3      	lsrs	r3, r2, #11
 80038b8:	3f15      	subs	r7, #21
 80038ba:	0552      	lsls	r2, r2, #21
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0fa      	beq.n	80038b6 <__ieee754_sqrt+0x10e>
 80038c0:	02dd      	lsls	r5, r3, #11
 80038c2:	d421      	bmi.n	8003908 <__ieee754_sqrt+0x160>
 80038c4:	2100      	movs	r1, #0
 80038c6:	e000      	b.n	80038ca <__ieee754_sqrt+0x122>
 80038c8:	4601      	mov	r1, r0
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	02dc      	lsls	r4, r3, #11
 80038ce:	f101 0001 	add.w	r0, r1, #1
 80038d2:	d5f9      	bpl.n	80038c8 <__ieee754_sqrt+0x120>
 80038d4:	f1c0 0420 	rsb	r4, r0, #32
 80038d8:	fa22 f404 	lsr.w	r4, r2, r4
 80038dc:	4323      	orrs	r3, r4
 80038de:	1a7f      	subs	r7, r7, r1
 80038e0:	4082      	lsls	r2, r0
 80038e2:	e771      	b.n	80037c8 <__ieee754_sqrt+0x20>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	f000 f9da 	bl	8003ca0 <__aeabi_dmul>
 80038ec:	4622      	mov	r2, r4
 80038ee:	462b      	mov	r3, r5
 80038f0:	f000 f824 	bl	800393c <__adddf3>
 80038f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038fc:	f1bc 0f00 	cmp.w	ip, #0
 8003900:	daaa      	bge.n	8003858 <__ieee754_sqrt+0xb0>
 8003902:	e7b2      	b.n	800386a <__ieee754_sqrt+0xc2>
 8003904:	3601      	adds	r6, #1
 8003906:	e7bb      	b.n	8003880 <__ieee754_sqrt+0xd8>
 8003908:	2420      	movs	r4, #32
 800390a:	f04f 31ff 	mov.w	r1, #4294967295
 800390e:	2000      	movs	r0, #0
 8003910:	e7e2      	b.n	80038d8 <__ieee754_sqrt+0x130>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	f000 f80f 	bl	8003938 <__aeabi_dsub>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	f000 fae9 	bl	8003ef4 <__aeabi_ddiv>
 8003922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003926:	bf00      	nop
 8003928:	7ff00000 	.word	0x7ff00000

0800392c <matherr>:
 800392c:	2000      	movs	r0, #0
 800392e:	4770      	bx	lr

08003930 <__aeabi_drsub>:
 8003930:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003934:	e002      	b.n	800393c <__adddf3>
 8003936:	bf00      	nop

08003938 <__aeabi_dsub>:
 8003938:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800393c <__adddf3>:
 800393c:	b530      	push	{r4, r5, lr}
 800393e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003942:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003946:	ea94 0f05 	teq	r4, r5
 800394a:	bf08      	it	eq
 800394c:	ea90 0f02 	teqeq	r0, r2
 8003950:	bf1f      	itttt	ne
 8003952:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003956:	ea55 0c02 	orrsne.w	ip, r5, r2
 800395a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800395e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003962:	f000 80e2 	beq.w	8003b2a <__adddf3+0x1ee>
 8003966:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800396a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800396e:	bfb8      	it	lt
 8003970:	426d      	neglt	r5, r5
 8003972:	dd0c      	ble.n	800398e <__adddf3+0x52>
 8003974:	442c      	add	r4, r5
 8003976:	ea80 0202 	eor.w	r2, r0, r2
 800397a:	ea81 0303 	eor.w	r3, r1, r3
 800397e:	ea82 0000 	eor.w	r0, r2, r0
 8003982:	ea83 0101 	eor.w	r1, r3, r1
 8003986:	ea80 0202 	eor.w	r2, r0, r2
 800398a:	ea81 0303 	eor.w	r3, r1, r3
 800398e:	2d36      	cmp	r5, #54	; 0x36
 8003990:	bf88      	it	hi
 8003992:	bd30      	pophi	{r4, r5, pc}
 8003994:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800399c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80039a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80039a4:	d002      	beq.n	80039ac <__adddf3+0x70>
 80039a6:	4240      	negs	r0, r0
 80039a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80039ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80039b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80039b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80039b8:	d002      	beq.n	80039c0 <__adddf3+0x84>
 80039ba:	4252      	negs	r2, r2
 80039bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80039c0:	ea94 0f05 	teq	r4, r5
 80039c4:	f000 80a7 	beq.w	8003b16 <__adddf3+0x1da>
 80039c8:	f1a4 0401 	sub.w	r4, r4, #1
 80039cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80039d0:	db0d      	blt.n	80039ee <__adddf3+0xb2>
 80039d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80039d6:	fa22 f205 	lsr.w	r2, r2, r5
 80039da:	1880      	adds	r0, r0, r2
 80039dc:	f141 0100 	adc.w	r1, r1, #0
 80039e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80039e4:	1880      	adds	r0, r0, r2
 80039e6:	fa43 f305 	asr.w	r3, r3, r5
 80039ea:	4159      	adcs	r1, r3
 80039ec:	e00e      	b.n	8003a0c <__adddf3+0xd0>
 80039ee:	f1a5 0520 	sub.w	r5, r5, #32
 80039f2:	f10e 0e20 	add.w	lr, lr, #32
 80039f6:	2a01      	cmp	r2, #1
 80039f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80039fc:	bf28      	it	cs
 80039fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003a02:	fa43 f305 	asr.w	r3, r3, r5
 8003a06:	18c0      	adds	r0, r0, r3
 8003a08:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003a0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003a10:	d507      	bpl.n	8003a22 <__adddf3+0xe6>
 8003a12:	f04f 0e00 	mov.w	lr, #0
 8003a16:	f1dc 0c00 	rsbs	ip, ip, #0
 8003a1a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003a1e:	eb6e 0101 	sbc.w	r1, lr, r1
 8003a22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003a26:	d31b      	bcc.n	8003a60 <__adddf3+0x124>
 8003a28:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003a2c:	d30c      	bcc.n	8003a48 <__adddf3+0x10c>
 8003a2e:	0849      	lsrs	r1, r1, #1
 8003a30:	ea5f 0030 	movs.w	r0, r0, rrx
 8003a34:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003a38:	f104 0401 	add.w	r4, r4, #1
 8003a3c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003a40:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003a44:	f080 809a 	bcs.w	8003b7c <__adddf3+0x240>
 8003a48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003a4c:	bf08      	it	eq
 8003a4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003a52:	f150 0000 	adcs.w	r0, r0, #0
 8003a56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003a5a:	ea41 0105 	orr.w	r1, r1, r5
 8003a5e:	bd30      	pop	{r4, r5, pc}
 8003a60:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003a64:	4140      	adcs	r0, r0
 8003a66:	eb41 0101 	adc.w	r1, r1, r1
 8003a6a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003a6e:	f1a4 0401 	sub.w	r4, r4, #1
 8003a72:	d1e9      	bne.n	8003a48 <__adddf3+0x10c>
 8003a74:	f091 0f00 	teq	r1, #0
 8003a78:	bf04      	itt	eq
 8003a7a:	4601      	moveq	r1, r0
 8003a7c:	2000      	moveq	r0, #0
 8003a7e:	fab1 f381 	clz	r3, r1
 8003a82:	bf08      	it	eq
 8003a84:	3320      	addeq	r3, #32
 8003a86:	f1a3 030b 	sub.w	r3, r3, #11
 8003a8a:	f1b3 0220 	subs.w	r2, r3, #32
 8003a8e:	da0c      	bge.n	8003aaa <__adddf3+0x16e>
 8003a90:	320c      	adds	r2, #12
 8003a92:	dd08      	ble.n	8003aa6 <__adddf3+0x16a>
 8003a94:	f102 0c14 	add.w	ip, r2, #20
 8003a98:	f1c2 020c 	rsb	r2, r2, #12
 8003a9c:	fa01 f00c 	lsl.w	r0, r1, ip
 8003aa0:	fa21 f102 	lsr.w	r1, r1, r2
 8003aa4:	e00c      	b.n	8003ac0 <__adddf3+0x184>
 8003aa6:	f102 0214 	add.w	r2, r2, #20
 8003aaa:	bfd8      	it	le
 8003aac:	f1c2 0c20 	rsble	ip, r2, #32
 8003ab0:	fa01 f102 	lsl.w	r1, r1, r2
 8003ab4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003ab8:	bfdc      	itt	le
 8003aba:	ea41 010c 	orrle.w	r1, r1, ip
 8003abe:	4090      	lslle	r0, r2
 8003ac0:	1ae4      	subs	r4, r4, r3
 8003ac2:	bfa2      	ittt	ge
 8003ac4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003ac8:	4329      	orrge	r1, r5
 8003aca:	bd30      	popge	{r4, r5, pc}
 8003acc:	ea6f 0404 	mvn.w	r4, r4
 8003ad0:	3c1f      	subs	r4, #31
 8003ad2:	da1c      	bge.n	8003b0e <__adddf3+0x1d2>
 8003ad4:	340c      	adds	r4, #12
 8003ad6:	dc0e      	bgt.n	8003af6 <__adddf3+0x1ba>
 8003ad8:	f104 0414 	add.w	r4, r4, #20
 8003adc:	f1c4 0220 	rsb	r2, r4, #32
 8003ae0:	fa20 f004 	lsr.w	r0, r0, r4
 8003ae4:	fa01 f302 	lsl.w	r3, r1, r2
 8003ae8:	ea40 0003 	orr.w	r0, r0, r3
 8003aec:	fa21 f304 	lsr.w	r3, r1, r4
 8003af0:	ea45 0103 	orr.w	r1, r5, r3
 8003af4:	bd30      	pop	{r4, r5, pc}
 8003af6:	f1c4 040c 	rsb	r4, r4, #12
 8003afa:	f1c4 0220 	rsb	r2, r4, #32
 8003afe:	fa20 f002 	lsr.w	r0, r0, r2
 8003b02:	fa01 f304 	lsl.w	r3, r1, r4
 8003b06:	ea40 0003 	orr.w	r0, r0, r3
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	bd30      	pop	{r4, r5, pc}
 8003b0e:	fa21 f004 	lsr.w	r0, r1, r4
 8003b12:	4629      	mov	r1, r5
 8003b14:	bd30      	pop	{r4, r5, pc}
 8003b16:	f094 0f00 	teq	r4, #0
 8003b1a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003b1e:	bf06      	itte	eq
 8003b20:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003b24:	3401      	addeq	r4, #1
 8003b26:	3d01      	subne	r5, #1
 8003b28:	e74e      	b.n	80039c8 <__adddf3+0x8c>
 8003b2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003b2e:	bf18      	it	ne
 8003b30:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003b34:	d029      	beq.n	8003b8a <__adddf3+0x24e>
 8003b36:	ea94 0f05 	teq	r4, r5
 8003b3a:	bf08      	it	eq
 8003b3c:	ea90 0f02 	teqeq	r0, r2
 8003b40:	d005      	beq.n	8003b4e <__adddf3+0x212>
 8003b42:	ea54 0c00 	orrs.w	ip, r4, r0
 8003b46:	bf04      	itt	eq
 8003b48:	4619      	moveq	r1, r3
 8003b4a:	4610      	moveq	r0, r2
 8003b4c:	bd30      	pop	{r4, r5, pc}
 8003b4e:	ea91 0f03 	teq	r1, r3
 8003b52:	bf1e      	ittt	ne
 8003b54:	2100      	movne	r1, #0
 8003b56:	2000      	movne	r0, #0
 8003b58:	bd30      	popne	{r4, r5, pc}
 8003b5a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003b5e:	d105      	bne.n	8003b6c <__adddf3+0x230>
 8003b60:	0040      	lsls	r0, r0, #1
 8003b62:	4149      	adcs	r1, r1
 8003b64:	bf28      	it	cs
 8003b66:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003b6a:	bd30      	pop	{r4, r5, pc}
 8003b6c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003b70:	bf3c      	itt	cc
 8003b72:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003b76:	bd30      	popcc	{r4, r5, pc}
 8003b78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003b7c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003b80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b84:	f04f 0000 	mov.w	r0, #0
 8003b88:	bd30      	pop	{r4, r5, pc}
 8003b8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003b8e:	bf1a      	itte	ne
 8003b90:	4619      	movne	r1, r3
 8003b92:	4610      	movne	r0, r2
 8003b94:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003b98:	bf1c      	itt	ne
 8003b9a:	460b      	movne	r3, r1
 8003b9c:	4602      	movne	r2, r0
 8003b9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003ba2:	bf06      	itte	eq
 8003ba4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003ba8:	ea91 0f03 	teqeq	r1, r3
 8003bac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003bb0:	bd30      	pop	{r4, r5, pc}
 8003bb2:	bf00      	nop

08003bb4 <__aeabi_ui2d>:
 8003bb4:	f090 0f00 	teq	r0, #0
 8003bb8:	bf04      	itt	eq
 8003bba:	2100      	moveq	r1, #0
 8003bbc:	4770      	bxeq	lr
 8003bbe:	b530      	push	{r4, r5, lr}
 8003bc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003bc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003bc8:	f04f 0500 	mov.w	r5, #0
 8003bcc:	f04f 0100 	mov.w	r1, #0
 8003bd0:	e750      	b.n	8003a74 <__adddf3+0x138>
 8003bd2:	bf00      	nop

08003bd4 <__aeabi_i2d>:
 8003bd4:	f090 0f00 	teq	r0, #0
 8003bd8:	bf04      	itt	eq
 8003bda:	2100      	moveq	r1, #0
 8003bdc:	4770      	bxeq	lr
 8003bde:	b530      	push	{r4, r5, lr}
 8003be0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003be4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003be8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003bec:	bf48      	it	mi
 8003bee:	4240      	negmi	r0, r0
 8003bf0:	f04f 0100 	mov.w	r1, #0
 8003bf4:	e73e      	b.n	8003a74 <__adddf3+0x138>
 8003bf6:	bf00      	nop

08003bf8 <__aeabi_f2d>:
 8003bf8:	0042      	lsls	r2, r0, #1
 8003bfa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003bfe:	ea4f 0131 	mov.w	r1, r1, rrx
 8003c02:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003c06:	bf1f      	itttt	ne
 8003c08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003c0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003c10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003c14:	4770      	bxne	lr
 8003c16:	f092 0f00 	teq	r2, #0
 8003c1a:	bf14      	ite	ne
 8003c1c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003c20:	4770      	bxeq	lr
 8003c22:	b530      	push	{r4, r5, lr}
 8003c24:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003c28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003c2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003c30:	e720      	b.n	8003a74 <__adddf3+0x138>
 8003c32:	bf00      	nop

08003c34 <__aeabi_ul2d>:
 8003c34:	ea50 0201 	orrs.w	r2, r0, r1
 8003c38:	bf08      	it	eq
 8003c3a:	4770      	bxeq	lr
 8003c3c:	b530      	push	{r4, r5, lr}
 8003c3e:	f04f 0500 	mov.w	r5, #0
 8003c42:	e00a      	b.n	8003c5a <__aeabi_l2d+0x16>

08003c44 <__aeabi_l2d>:
 8003c44:	ea50 0201 	orrs.w	r2, r0, r1
 8003c48:	bf08      	it	eq
 8003c4a:	4770      	bxeq	lr
 8003c4c:	b530      	push	{r4, r5, lr}
 8003c4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003c52:	d502      	bpl.n	8003c5a <__aeabi_l2d+0x16>
 8003c54:	4240      	negs	r0, r0
 8003c56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003c5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003c5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003c62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003c66:	f43f aedc 	beq.w	8003a22 <__adddf3+0xe6>
 8003c6a:	f04f 0203 	mov.w	r2, #3
 8003c6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003c72:	bf18      	it	ne
 8003c74:	3203      	addne	r2, #3
 8003c76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003c7a:	bf18      	it	ne
 8003c7c:	3203      	addne	r2, #3
 8003c7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003c82:	f1c2 0320 	rsb	r3, r2, #32
 8003c86:	fa00 fc03 	lsl.w	ip, r0, r3
 8003c8a:	fa20 f002 	lsr.w	r0, r0, r2
 8003c8e:	fa01 fe03 	lsl.w	lr, r1, r3
 8003c92:	ea40 000e 	orr.w	r0, r0, lr
 8003c96:	fa21 f102 	lsr.w	r1, r1, r2
 8003c9a:	4414      	add	r4, r2
 8003c9c:	e6c1      	b.n	8003a22 <__adddf3+0xe6>
 8003c9e:	bf00      	nop

08003ca0 <__aeabi_dmul>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003ca6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003caa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003cae:	bf1d      	ittte	ne
 8003cb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003cb4:	ea94 0f0c 	teqne	r4, ip
 8003cb8:	ea95 0f0c 	teqne	r5, ip
 8003cbc:	f000 f8de 	bleq	8003e7c <__aeabi_dmul+0x1dc>
 8003cc0:	442c      	add	r4, r5
 8003cc2:	ea81 0603 	eor.w	r6, r1, r3
 8003cc6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003cca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003cce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003cd2:	bf18      	it	ne
 8003cd4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003cd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003cdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce0:	d038      	beq.n	8003d54 <__aeabi_dmul+0xb4>
 8003ce2:	fba0 ce02 	umull	ip, lr, r0, r2
 8003ce6:	f04f 0500 	mov.w	r5, #0
 8003cea:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003cee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003cf2:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003cf6:	f04f 0600 	mov.w	r6, #0
 8003cfa:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003cfe:	f09c 0f00 	teq	ip, #0
 8003d02:	bf18      	it	ne
 8003d04:	f04e 0e01 	orrne.w	lr, lr, #1
 8003d08:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003d0c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003d10:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003d14:	d204      	bcs.n	8003d20 <__aeabi_dmul+0x80>
 8003d16:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003d1a:	416d      	adcs	r5, r5
 8003d1c:	eb46 0606 	adc.w	r6, r6, r6
 8003d20:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003d24:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003d28:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003d2c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003d30:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003d34:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003d38:	bf88      	it	hi
 8003d3a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003d3e:	d81e      	bhi.n	8003d7e <__aeabi_dmul+0xde>
 8003d40:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003d44:	bf08      	it	eq
 8003d46:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003d4a:	f150 0000 	adcs.w	r0, r0, #0
 8003d4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003d52:	bd70      	pop	{r4, r5, r6, pc}
 8003d54:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003d58:	ea46 0101 	orr.w	r1, r6, r1
 8003d5c:	ea40 0002 	orr.w	r0, r0, r2
 8003d60:	ea81 0103 	eor.w	r1, r1, r3
 8003d64:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003d68:	bfc2      	ittt	gt
 8003d6a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003d6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003d72:	bd70      	popgt	{r4, r5, r6, pc}
 8003d74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003d78:	f04f 0e00 	mov.w	lr, #0
 8003d7c:	3c01      	subs	r4, #1
 8003d7e:	f300 80ab 	bgt.w	8003ed8 <__aeabi_dmul+0x238>
 8003d82:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003d86:	bfde      	ittt	le
 8003d88:	2000      	movle	r0, #0
 8003d8a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003d8e:	bd70      	pople	{r4, r5, r6, pc}
 8003d90:	f1c4 0400 	rsb	r4, r4, #0
 8003d94:	3c20      	subs	r4, #32
 8003d96:	da35      	bge.n	8003e04 <__aeabi_dmul+0x164>
 8003d98:	340c      	adds	r4, #12
 8003d9a:	dc1b      	bgt.n	8003dd4 <__aeabi_dmul+0x134>
 8003d9c:	f104 0414 	add.w	r4, r4, #20
 8003da0:	f1c4 0520 	rsb	r5, r4, #32
 8003da4:	fa00 f305 	lsl.w	r3, r0, r5
 8003da8:	fa20 f004 	lsr.w	r0, r0, r4
 8003dac:	fa01 f205 	lsl.w	r2, r1, r5
 8003db0:	ea40 0002 	orr.w	r0, r0, r2
 8003db4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8003db8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003dbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003dc0:	fa21 f604 	lsr.w	r6, r1, r4
 8003dc4:	eb42 0106 	adc.w	r1, r2, r6
 8003dc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003dcc:	bf08      	it	eq
 8003dce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}
 8003dd4:	f1c4 040c 	rsb	r4, r4, #12
 8003dd8:	f1c4 0520 	rsb	r5, r4, #32
 8003ddc:	fa00 f304 	lsl.w	r3, r0, r4
 8003de0:	fa20 f005 	lsr.w	r0, r0, r5
 8003de4:	fa01 f204 	lsl.w	r2, r1, r4
 8003de8:	ea40 0002 	orr.w	r0, r0, r2
 8003dec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003df0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003df4:	f141 0100 	adc.w	r1, r1, #0
 8003df8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003dfc:	bf08      	it	eq
 8003dfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
 8003e04:	f1c4 0520 	rsb	r5, r4, #32
 8003e08:	fa00 f205 	lsl.w	r2, r0, r5
 8003e0c:	ea4e 0e02 	orr.w	lr, lr, r2
 8003e10:	fa20 f304 	lsr.w	r3, r0, r4
 8003e14:	fa01 f205 	lsl.w	r2, r1, r5
 8003e18:	ea43 0302 	orr.w	r3, r3, r2
 8003e1c:	fa21 f004 	lsr.w	r0, r1, r4
 8003e20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003e24:	fa21 f204 	lsr.w	r2, r1, r4
 8003e28:	ea20 0002 	bic.w	r0, r0, r2
 8003e2c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003e30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003e34:	bf08      	it	eq
 8003e36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	f094 0f00 	teq	r4, #0
 8003e40:	d10f      	bne.n	8003e62 <__aeabi_dmul+0x1c2>
 8003e42:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003e46:	0040      	lsls	r0, r0, #1
 8003e48:	eb41 0101 	adc.w	r1, r1, r1
 8003e4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003e50:	bf08      	it	eq
 8003e52:	3c01      	subeq	r4, #1
 8003e54:	d0f7      	beq.n	8003e46 <__aeabi_dmul+0x1a6>
 8003e56:	ea41 0106 	orr.w	r1, r1, r6
 8003e5a:	f095 0f00 	teq	r5, #0
 8003e5e:	bf18      	it	ne
 8003e60:	4770      	bxne	lr
 8003e62:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003e66:	0052      	lsls	r2, r2, #1
 8003e68:	eb43 0303 	adc.w	r3, r3, r3
 8003e6c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003e70:	bf08      	it	eq
 8003e72:	3d01      	subeq	r5, #1
 8003e74:	d0f7      	beq.n	8003e66 <__aeabi_dmul+0x1c6>
 8003e76:	ea43 0306 	orr.w	r3, r3, r6
 8003e7a:	4770      	bx	lr
 8003e7c:	ea94 0f0c 	teq	r4, ip
 8003e80:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003e84:	bf18      	it	ne
 8003e86:	ea95 0f0c 	teqne	r5, ip
 8003e8a:	d00c      	beq.n	8003ea6 <__aeabi_dmul+0x206>
 8003e8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003e90:	bf18      	it	ne
 8003e92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003e96:	d1d1      	bne.n	8003e3c <__aeabi_dmul+0x19c>
 8003e98:	ea81 0103 	eor.w	r1, r1, r3
 8003e9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003ea0:	f04f 0000 	mov.w	r0, #0
 8003ea4:	bd70      	pop	{r4, r5, r6, pc}
 8003ea6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003eaa:	bf06      	itte	eq
 8003eac:	4610      	moveq	r0, r2
 8003eae:	4619      	moveq	r1, r3
 8003eb0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003eb4:	d019      	beq.n	8003eea <__aeabi_dmul+0x24a>
 8003eb6:	ea94 0f0c 	teq	r4, ip
 8003eba:	d102      	bne.n	8003ec2 <__aeabi_dmul+0x222>
 8003ebc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003ec0:	d113      	bne.n	8003eea <__aeabi_dmul+0x24a>
 8003ec2:	ea95 0f0c 	teq	r5, ip
 8003ec6:	d105      	bne.n	8003ed4 <__aeabi_dmul+0x234>
 8003ec8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8003ecc:	bf1c      	itt	ne
 8003ece:	4610      	movne	r0, r2
 8003ed0:	4619      	movne	r1, r3
 8003ed2:	d10a      	bne.n	8003eea <__aeabi_dmul+0x24a>
 8003ed4:	ea81 0103 	eor.w	r1, r1, r3
 8003ed8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003edc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003ee0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003ee4:	f04f 0000 	mov.w	r0, #0
 8003ee8:	bd70      	pop	{r4, r5, r6, pc}
 8003eea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003eee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}

08003ef4 <__aeabi_ddiv>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003efa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003efe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003f02:	bf1d      	ittte	ne
 8003f04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003f08:	ea94 0f0c 	teqne	r4, ip
 8003f0c:	ea95 0f0c 	teqne	r5, ip
 8003f10:	f000 f8a7 	bleq	8004062 <__aeabi_ddiv+0x16e>
 8003f14:	eba4 0405 	sub.w	r4, r4, r5
 8003f18:	ea81 0e03 	eor.w	lr, r1, r3
 8003f1c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003f20:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003f24:	f000 8088 	beq.w	8004038 <__aeabi_ddiv+0x144>
 8003f28:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003f2c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003f30:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003f34:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003f38:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003f3c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003f40:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003f44:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003f48:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003f4c:	429d      	cmp	r5, r3
 8003f4e:	bf08      	it	eq
 8003f50:	4296      	cmpeq	r6, r2
 8003f52:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8003f56:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003f5a:	d202      	bcs.n	8003f62 <__aeabi_ddiv+0x6e>
 8003f5c:	085b      	lsrs	r3, r3, #1
 8003f5e:	ea4f 0232 	mov.w	r2, r2, rrx
 8003f62:	1ab6      	subs	r6, r6, r2
 8003f64:	eb65 0503 	sbc.w	r5, r5, r3
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	ea4f 0232 	mov.w	r2, r2, rrx
 8003f6e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003f72:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8003f76:	ebb6 0e02 	subs.w	lr, r6, r2
 8003f7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003f7e:	bf22      	ittt	cs
 8003f80:	1ab6      	subcs	r6, r6, r2
 8003f82:	4675      	movcs	r5, lr
 8003f84:	ea40 000c 	orrcs.w	r0, r0, ip
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8003f8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003f92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003f96:	bf22      	ittt	cs
 8003f98:	1ab6      	subcs	r6, r6, r2
 8003f9a:	4675      	movcs	r5, lr
 8003f9c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	ea4f 0232 	mov.w	r2, r2, rrx
 8003fa6:	ebb6 0e02 	subs.w	lr, r6, r2
 8003faa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003fae:	bf22      	ittt	cs
 8003fb0:	1ab6      	subcs	r6, r6, r2
 8003fb2:	4675      	movcs	r5, lr
 8003fb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	ea4f 0232 	mov.w	r2, r2, rrx
 8003fbe:	ebb6 0e02 	subs.w	lr, r6, r2
 8003fc2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003fc6:	bf22      	ittt	cs
 8003fc8:	1ab6      	subcs	r6, r6, r2
 8003fca:	4675      	movcs	r5, lr
 8003fcc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003fd0:	ea55 0e06 	orrs.w	lr, r5, r6
 8003fd4:	d018      	beq.n	8004008 <__aeabi_ddiv+0x114>
 8003fd6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8003fda:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003fde:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003fe2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003fe6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8003fea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003fee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003ff2:	d1c0      	bne.n	8003f76 <__aeabi_ddiv+0x82>
 8003ff4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003ff8:	d10b      	bne.n	8004012 <__aeabi_ddiv+0x11e>
 8003ffa:	ea41 0100 	orr.w	r1, r1, r0
 8003ffe:	f04f 0000 	mov.w	r0, #0
 8004002:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004006:	e7b6      	b.n	8003f76 <__aeabi_ddiv+0x82>
 8004008:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800400c:	bf04      	itt	eq
 800400e:	4301      	orreq	r1, r0
 8004010:	2000      	moveq	r0, #0
 8004012:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004016:	bf88      	it	hi
 8004018:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800401c:	f63f aeaf 	bhi.w	8003d7e <__aeabi_dmul+0xde>
 8004020:	ebb5 0c03 	subs.w	ip, r5, r3
 8004024:	bf04      	itt	eq
 8004026:	ebb6 0c02 	subseq.w	ip, r6, r2
 800402a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800402e:	f150 0000 	adcs.w	r0, r0, #0
 8004032:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004036:	bd70      	pop	{r4, r5, r6, pc}
 8004038:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800403c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004040:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004044:	bfc2      	ittt	gt
 8004046:	ebd4 050c 	rsbsgt	r5, r4, ip
 800404a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800404e:	bd70      	popgt	{r4, r5, r6, pc}
 8004050:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004054:	f04f 0e00 	mov.w	lr, #0
 8004058:	3c01      	subs	r4, #1
 800405a:	e690      	b.n	8003d7e <__aeabi_dmul+0xde>
 800405c:	ea45 0e06 	orr.w	lr, r5, r6
 8004060:	e68d      	b.n	8003d7e <__aeabi_dmul+0xde>
 8004062:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004066:	ea94 0f0c 	teq	r4, ip
 800406a:	bf08      	it	eq
 800406c:	ea95 0f0c 	teqeq	r5, ip
 8004070:	f43f af3b 	beq.w	8003eea <__aeabi_dmul+0x24a>
 8004074:	ea94 0f0c 	teq	r4, ip
 8004078:	d10a      	bne.n	8004090 <__aeabi_ddiv+0x19c>
 800407a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800407e:	f47f af34 	bne.w	8003eea <__aeabi_dmul+0x24a>
 8004082:	ea95 0f0c 	teq	r5, ip
 8004086:	f47f af25 	bne.w	8003ed4 <__aeabi_dmul+0x234>
 800408a:	4610      	mov	r0, r2
 800408c:	4619      	mov	r1, r3
 800408e:	e72c      	b.n	8003eea <__aeabi_dmul+0x24a>
 8004090:	ea95 0f0c 	teq	r5, ip
 8004094:	d106      	bne.n	80040a4 <__aeabi_ddiv+0x1b0>
 8004096:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800409a:	f43f aefd 	beq.w	8003e98 <__aeabi_dmul+0x1f8>
 800409e:	4610      	mov	r0, r2
 80040a0:	4619      	mov	r1, r3
 80040a2:	e722      	b.n	8003eea <__aeabi_dmul+0x24a>
 80040a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80040a8:	bf18      	it	ne
 80040aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80040ae:	f47f aec5 	bne.w	8003e3c <__aeabi_dmul+0x19c>
 80040b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80040b6:	f47f af0d 	bne.w	8003ed4 <__aeabi_dmul+0x234>
 80040ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80040be:	f47f aeeb 	bne.w	8003e98 <__aeabi_dmul+0x1f8>
 80040c2:	e712      	b.n	8003eea <__aeabi_dmul+0x24a>

080040c4 <__gedf2>:
 80040c4:	f04f 3cff 	mov.w	ip, #4294967295
 80040c8:	e006      	b.n	80040d8 <__cmpdf2+0x4>
 80040ca:	bf00      	nop

080040cc <__ledf2>:
 80040cc:	f04f 0c01 	mov.w	ip, #1
 80040d0:	e002      	b.n	80040d8 <__cmpdf2+0x4>
 80040d2:	bf00      	nop

080040d4 <__cmpdf2>:
 80040d4:	f04f 0c01 	mov.w	ip, #1
 80040d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80040dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80040e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80040e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80040e8:	bf18      	it	ne
 80040ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80040ee:	d01b      	beq.n	8004128 <__cmpdf2+0x54>
 80040f0:	b001      	add	sp, #4
 80040f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80040f6:	bf0c      	ite	eq
 80040f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80040fc:	ea91 0f03 	teqne	r1, r3
 8004100:	bf02      	ittt	eq
 8004102:	ea90 0f02 	teqeq	r0, r2
 8004106:	2000      	moveq	r0, #0
 8004108:	4770      	bxeq	lr
 800410a:	f110 0f00 	cmn.w	r0, #0
 800410e:	ea91 0f03 	teq	r1, r3
 8004112:	bf58      	it	pl
 8004114:	4299      	cmppl	r1, r3
 8004116:	bf08      	it	eq
 8004118:	4290      	cmpeq	r0, r2
 800411a:	bf2c      	ite	cs
 800411c:	17d8      	asrcs	r0, r3, #31
 800411e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004122:	f040 0001 	orr.w	r0, r0, #1
 8004126:	4770      	bx	lr
 8004128:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800412c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004130:	d102      	bne.n	8004138 <__cmpdf2+0x64>
 8004132:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004136:	d107      	bne.n	8004148 <__cmpdf2+0x74>
 8004138:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800413c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004140:	d1d6      	bne.n	80040f0 <__cmpdf2+0x1c>
 8004142:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004146:	d0d3      	beq.n	80040f0 <__cmpdf2+0x1c>
 8004148:	f85d 0b04 	ldr.w	r0, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop

08004150 <__aeabi_cdrcmple>:
 8004150:	4684      	mov	ip, r0
 8004152:	4610      	mov	r0, r2
 8004154:	4662      	mov	r2, ip
 8004156:	468c      	mov	ip, r1
 8004158:	4619      	mov	r1, r3
 800415a:	4663      	mov	r3, ip
 800415c:	e000      	b.n	8004160 <__aeabi_cdcmpeq>
 800415e:	bf00      	nop

08004160 <__aeabi_cdcmpeq>:
 8004160:	b501      	push	{r0, lr}
 8004162:	f7ff ffb7 	bl	80040d4 <__cmpdf2>
 8004166:	2800      	cmp	r0, #0
 8004168:	bf48      	it	mi
 800416a:	f110 0f00 	cmnmi.w	r0, #0
 800416e:	bd01      	pop	{r0, pc}

08004170 <__aeabi_dcmpeq>:
 8004170:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004174:	f7ff fff4 	bl	8004160 <__aeabi_cdcmpeq>
 8004178:	bf0c      	ite	eq
 800417a:	2001      	moveq	r0, #1
 800417c:	2000      	movne	r0, #0
 800417e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004182:	bf00      	nop

08004184 <__aeabi_dcmplt>:
 8004184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004188:	f7ff ffea 	bl	8004160 <__aeabi_cdcmpeq>
 800418c:	bf34      	ite	cc
 800418e:	2001      	movcc	r0, #1
 8004190:	2000      	movcs	r0, #0
 8004192:	f85d fb08 	ldr.w	pc, [sp], #8
 8004196:	bf00      	nop

08004198 <__aeabi_dcmple>:
 8004198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800419c:	f7ff ffe0 	bl	8004160 <__aeabi_cdcmpeq>
 80041a0:	bf94      	ite	ls
 80041a2:	2001      	movls	r0, #1
 80041a4:	2000      	movhi	r0, #0
 80041a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80041aa:	bf00      	nop

080041ac <__aeabi_dcmpge>:
 80041ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80041b0:	f7ff ffce 	bl	8004150 <__aeabi_cdrcmple>
 80041b4:	bf94      	ite	ls
 80041b6:	2001      	movls	r0, #1
 80041b8:	2000      	movhi	r0, #0
 80041ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80041be:	bf00      	nop

080041c0 <__aeabi_dcmpgt>:
 80041c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80041c4:	f7ff ffc4 	bl	8004150 <__aeabi_cdrcmple>
 80041c8:	bf34      	ite	cc
 80041ca:	2001      	movcc	r0, #1
 80041cc:	2000      	movcs	r0, #0
 80041ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80041d2:	bf00      	nop

080041d4 <__aeabi_dcmpun>:
 80041d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80041d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80041dc:	d102      	bne.n	80041e4 <__aeabi_dcmpun+0x10>
 80041de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80041e2:	d10a      	bne.n	80041fa <__aeabi_dcmpun+0x26>
 80041e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80041e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80041ec:	d102      	bne.n	80041f4 <__aeabi_dcmpun+0x20>
 80041ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80041f2:	d102      	bne.n	80041fa <__aeabi_dcmpun+0x26>
 80041f4:	f04f 0000 	mov.w	r0, #0
 80041f8:	4770      	bx	lr
 80041fa:	f04f 0001 	mov.w	r0, #1
 80041fe:	4770      	bx	lr

08004200 <__aeabi_d2iz>:
 8004200:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004204:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004208:	d215      	bcs.n	8004236 <__aeabi_d2iz+0x36>
 800420a:	d511      	bpl.n	8004230 <__aeabi_d2iz+0x30>
 800420c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004210:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004214:	d912      	bls.n	800423c <__aeabi_d2iz+0x3c>
 8004216:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800421a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800421e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004222:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004226:	fa23 f002 	lsr.w	r0, r3, r2
 800422a:	bf18      	it	ne
 800422c:	4240      	negne	r0, r0
 800422e:	4770      	bx	lr
 8004230:	f04f 0000 	mov.w	r0, #0
 8004234:	4770      	bx	lr
 8004236:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800423a:	d105      	bne.n	8004248 <__aeabi_d2iz+0x48>
 800423c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004240:	bf08      	it	eq
 8004242:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004246:	4770      	bx	lr
 8004248:	f04f 0000 	mov.w	r0, #0
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop

08004250 <__aeabi_d2uiz>:
 8004250:	004a      	lsls	r2, r1, #1
 8004252:	d211      	bcs.n	8004278 <__aeabi_d2uiz+0x28>
 8004254:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004258:	d211      	bcs.n	800427e <__aeabi_d2uiz+0x2e>
 800425a:	d50d      	bpl.n	8004278 <__aeabi_d2uiz+0x28>
 800425c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004260:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004264:	d40e      	bmi.n	8004284 <__aeabi_d2uiz+0x34>
 8004266:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800426a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800426e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004272:	fa23 f002 	lsr.w	r0, r3, r2
 8004276:	4770      	bx	lr
 8004278:	f04f 0000 	mov.w	r0, #0
 800427c:	4770      	bx	lr
 800427e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004282:	d102      	bne.n	800428a <__aeabi_d2uiz+0x3a>
 8004284:	f04f 30ff 	mov.w	r0, #4294967295
 8004288:	4770      	bx	lr
 800428a:	f04f 0000 	mov.w	r0, #0
 800428e:	4770      	bx	lr

08004290 <__errno>:
 8004290:	4b01      	ldr	r3, [pc, #4]	; (8004298 <__errno+0x8>)
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20000468 	.word	0x20000468

0800429c <__libc_init_array>:
 800429c:	b570      	push	{r4, r5, r6, lr}
 800429e:	4e0f      	ldr	r6, [pc, #60]	; (80042dc <__libc_init_array+0x40>)
 80042a0:	4d0f      	ldr	r5, [pc, #60]	; (80042e0 <__libc_init_array+0x44>)
 80042a2:	1b76      	subs	r6, r6, r5
 80042a4:	10b6      	asrs	r6, r6, #2
 80042a6:	bf18      	it	ne
 80042a8:	2400      	movne	r4, #0
 80042aa:	d005      	beq.n	80042b8 <__libc_init_array+0x1c>
 80042ac:	3401      	adds	r4, #1
 80042ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b2:	4798      	blx	r3
 80042b4:	42a6      	cmp	r6, r4
 80042b6:	d1f9      	bne.n	80042ac <__libc_init_array+0x10>
 80042b8:	4e0a      	ldr	r6, [pc, #40]	; (80042e4 <__libc_init_array+0x48>)
 80042ba:	4d0b      	ldr	r5, [pc, #44]	; (80042e8 <__libc_init_array+0x4c>)
 80042bc:	1b76      	subs	r6, r6, r5
 80042be:	f7fe fa01 	bl	80026c4 <_init>
 80042c2:	10b6      	asrs	r6, r6, #2
 80042c4:	bf18      	it	ne
 80042c6:	2400      	movne	r4, #0
 80042c8:	d006      	beq.n	80042d8 <__libc_init_array+0x3c>
 80042ca:	3401      	adds	r4, #1
 80042cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d0:	4798      	blx	r3
 80042d2:	42a6      	cmp	r6, r4
 80042d4:	d1f9      	bne.n	80042ca <__libc_init_array+0x2e>
 80042d6:	bd70      	pop	{r4, r5, r6, pc}
 80042d8:	bd70      	pop	{r4, r5, r6, pc}
 80042da:	bf00      	nop
 80042dc:	200009e8 	.word	0x200009e8
 80042e0:	200009e8 	.word	0x200009e8
 80042e4:	200009e8 	.word	0x200009e8
 80042e8:	200009e8 	.word	0x200009e8

080042ec <memcpy>:
 80042ec:	4684      	mov	ip, r0
 80042ee:	ea41 0300 	orr.w	r3, r1, r0
 80042f2:	f013 0303 	ands.w	r3, r3, #3
 80042f6:	d16d      	bne.n	80043d4 <memcpy+0xe8>
 80042f8:	3a40      	subs	r2, #64	; 0x40
 80042fa:	d341      	bcc.n	8004380 <memcpy+0x94>
 80042fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8004300:	f840 3b04 	str.w	r3, [r0], #4
 8004304:	f851 3b04 	ldr.w	r3, [r1], #4
 8004308:	f840 3b04 	str.w	r3, [r0], #4
 800430c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004310:	f840 3b04 	str.w	r3, [r0], #4
 8004314:	f851 3b04 	ldr.w	r3, [r1], #4
 8004318:	f840 3b04 	str.w	r3, [r0], #4
 800431c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004320:	f840 3b04 	str.w	r3, [r0], #4
 8004324:	f851 3b04 	ldr.w	r3, [r1], #4
 8004328:	f840 3b04 	str.w	r3, [r0], #4
 800432c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004330:	f840 3b04 	str.w	r3, [r0], #4
 8004334:	f851 3b04 	ldr.w	r3, [r1], #4
 8004338:	f840 3b04 	str.w	r3, [r0], #4
 800433c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004340:	f840 3b04 	str.w	r3, [r0], #4
 8004344:	f851 3b04 	ldr.w	r3, [r1], #4
 8004348:	f840 3b04 	str.w	r3, [r0], #4
 800434c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004350:	f840 3b04 	str.w	r3, [r0], #4
 8004354:	f851 3b04 	ldr.w	r3, [r1], #4
 8004358:	f840 3b04 	str.w	r3, [r0], #4
 800435c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004360:	f840 3b04 	str.w	r3, [r0], #4
 8004364:	f851 3b04 	ldr.w	r3, [r1], #4
 8004368:	f840 3b04 	str.w	r3, [r0], #4
 800436c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004370:	f840 3b04 	str.w	r3, [r0], #4
 8004374:	f851 3b04 	ldr.w	r3, [r1], #4
 8004378:	f840 3b04 	str.w	r3, [r0], #4
 800437c:	3a40      	subs	r2, #64	; 0x40
 800437e:	d2bd      	bcs.n	80042fc <memcpy+0x10>
 8004380:	3230      	adds	r2, #48	; 0x30
 8004382:	d311      	bcc.n	80043a8 <memcpy+0xbc>
 8004384:	f851 3b04 	ldr.w	r3, [r1], #4
 8004388:	f840 3b04 	str.w	r3, [r0], #4
 800438c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004390:	f840 3b04 	str.w	r3, [r0], #4
 8004394:	f851 3b04 	ldr.w	r3, [r1], #4
 8004398:	f840 3b04 	str.w	r3, [r0], #4
 800439c:	f851 3b04 	ldr.w	r3, [r1], #4
 80043a0:	f840 3b04 	str.w	r3, [r0], #4
 80043a4:	3a10      	subs	r2, #16
 80043a6:	d2ed      	bcs.n	8004384 <memcpy+0x98>
 80043a8:	320c      	adds	r2, #12
 80043aa:	d305      	bcc.n	80043b8 <memcpy+0xcc>
 80043ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80043b0:	f840 3b04 	str.w	r3, [r0], #4
 80043b4:	3a04      	subs	r2, #4
 80043b6:	d2f9      	bcs.n	80043ac <memcpy+0xc0>
 80043b8:	3204      	adds	r2, #4
 80043ba:	d008      	beq.n	80043ce <memcpy+0xe2>
 80043bc:	07d2      	lsls	r2, r2, #31
 80043be:	bf1c      	itt	ne
 80043c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80043c4:	f800 3b01 	strbne.w	r3, [r0], #1
 80043c8:	d301      	bcc.n	80043ce <memcpy+0xe2>
 80043ca:	880b      	ldrh	r3, [r1, #0]
 80043cc:	8003      	strh	r3, [r0, #0]
 80043ce:	4660      	mov	r0, ip
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	2a08      	cmp	r2, #8
 80043d6:	d313      	bcc.n	8004400 <memcpy+0x114>
 80043d8:	078b      	lsls	r3, r1, #30
 80043da:	d08d      	beq.n	80042f8 <memcpy+0xc>
 80043dc:	f010 0303 	ands.w	r3, r0, #3
 80043e0:	d08a      	beq.n	80042f8 <memcpy+0xc>
 80043e2:	f1c3 0304 	rsb	r3, r3, #4
 80043e6:	1ad2      	subs	r2, r2, r3
 80043e8:	07db      	lsls	r3, r3, #31
 80043ea:	bf1c      	itt	ne
 80043ec:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80043f0:	f800 3b01 	strbne.w	r3, [r0], #1
 80043f4:	d380      	bcc.n	80042f8 <memcpy+0xc>
 80043f6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80043fa:	f820 3b02 	strh.w	r3, [r0], #2
 80043fe:	e77b      	b.n	80042f8 <memcpy+0xc>
 8004400:	3a04      	subs	r2, #4
 8004402:	d3d9      	bcc.n	80043b8 <memcpy+0xcc>
 8004404:	3a01      	subs	r2, #1
 8004406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800440a:	f800 3b01 	strb.w	r3, [r0], #1
 800440e:	d2f9      	bcs.n	8004404 <memcpy+0x118>
 8004410:	780b      	ldrb	r3, [r1, #0]
 8004412:	7003      	strb	r3, [r0, #0]
 8004414:	784b      	ldrb	r3, [r1, #1]
 8004416:	7043      	strb	r3, [r0, #1]
 8004418:	788b      	ldrb	r3, [r1, #2]
 800441a:	7083      	strb	r3, [r0, #2]
 800441c:	4660      	mov	r0, ip
 800441e:	4770      	bx	lr

08004420 <memset>:
 8004420:	b470      	push	{r4, r5, r6}
 8004422:	0784      	lsls	r4, r0, #30
 8004424:	d046      	beq.n	80044b4 <memset+0x94>
 8004426:	1e54      	subs	r4, r2, #1
 8004428:	2a00      	cmp	r2, #0
 800442a:	d041      	beq.n	80044b0 <memset+0x90>
 800442c:	b2cd      	uxtb	r5, r1
 800442e:	4603      	mov	r3, r0
 8004430:	e002      	b.n	8004438 <memset+0x18>
 8004432:	1e62      	subs	r2, r4, #1
 8004434:	b3e4      	cbz	r4, 80044b0 <memset+0x90>
 8004436:	4614      	mov	r4, r2
 8004438:	f803 5b01 	strb.w	r5, [r3], #1
 800443c:	079a      	lsls	r2, r3, #30
 800443e:	d1f8      	bne.n	8004432 <memset+0x12>
 8004440:	2c03      	cmp	r4, #3
 8004442:	d92e      	bls.n	80044a2 <memset+0x82>
 8004444:	b2cd      	uxtb	r5, r1
 8004446:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800444a:	2c0f      	cmp	r4, #15
 800444c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004450:	d919      	bls.n	8004486 <memset+0x66>
 8004452:	f103 0210 	add.w	r2, r3, #16
 8004456:	4626      	mov	r6, r4
 8004458:	3e10      	subs	r6, #16
 800445a:	2e0f      	cmp	r6, #15
 800445c:	f842 5c10 	str.w	r5, [r2, #-16]
 8004460:	f842 5c0c 	str.w	r5, [r2, #-12]
 8004464:	f842 5c08 	str.w	r5, [r2, #-8]
 8004468:	f842 5c04 	str.w	r5, [r2, #-4]
 800446c:	f102 0210 	add.w	r2, r2, #16
 8004470:	d8f2      	bhi.n	8004458 <memset+0x38>
 8004472:	f1a4 0210 	sub.w	r2, r4, #16
 8004476:	f022 020f 	bic.w	r2, r2, #15
 800447a:	f004 040f 	and.w	r4, r4, #15
 800447e:	3210      	adds	r2, #16
 8004480:	2c03      	cmp	r4, #3
 8004482:	4413      	add	r3, r2
 8004484:	d90d      	bls.n	80044a2 <memset+0x82>
 8004486:	461e      	mov	r6, r3
 8004488:	4622      	mov	r2, r4
 800448a:	3a04      	subs	r2, #4
 800448c:	2a03      	cmp	r2, #3
 800448e:	f846 5b04 	str.w	r5, [r6], #4
 8004492:	d8fa      	bhi.n	800448a <memset+0x6a>
 8004494:	1f22      	subs	r2, r4, #4
 8004496:	f022 0203 	bic.w	r2, r2, #3
 800449a:	3204      	adds	r2, #4
 800449c:	4413      	add	r3, r2
 800449e:	f004 0403 	and.w	r4, r4, #3
 80044a2:	b12c      	cbz	r4, 80044b0 <memset+0x90>
 80044a4:	b2c9      	uxtb	r1, r1
 80044a6:	441c      	add	r4, r3
 80044a8:	f803 1b01 	strb.w	r1, [r3], #1
 80044ac:	42a3      	cmp	r3, r4
 80044ae:	d1fb      	bne.n	80044a8 <memset+0x88>
 80044b0:	bc70      	pop	{r4, r5, r6}
 80044b2:	4770      	bx	lr
 80044b4:	4614      	mov	r4, r2
 80044b6:	4603      	mov	r3, r0
 80044b8:	e7c2      	b.n	8004440 <memset+0x20>
 80044ba:	bf00      	nop

080044bc <printf>:
 80044bc:	b40f      	push	{r0, r1, r2, r3}
 80044be:	b500      	push	{lr}
 80044c0:	4907      	ldr	r1, [pc, #28]	; (80044e0 <printf+0x24>)
 80044c2:	b083      	sub	sp, #12
 80044c4:	ab04      	add	r3, sp, #16
 80044c6:	6808      	ldr	r0, [r1, #0]
 80044c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80044cc:	6881      	ldr	r1, [r0, #8]
 80044ce:	9301      	str	r3, [sp, #4]
 80044d0:	f001 fcb2 	bl	8005e38 <_vfprintf_r>
 80044d4:	b003      	add	sp, #12
 80044d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80044da:	b004      	add	sp, #16
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000468 	.word	0x20000468

080044e4 <_puts_r>:
 80044e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e6:	4605      	mov	r5, r0
 80044e8:	b089      	sub	sp, #36	; 0x24
 80044ea:	4608      	mov	r0, r1
 80044ec:	460c      	mov	r4, r1
 80044ee:	f000 f867 	bl	80045c0 <strlen>
 80044f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80044f4:	4f14      	ldr	r7, [pc, #80]	; (8004548 <_puts_r+0x64>)
 80044f6:	9404      	str	r4, [sp, #16]
 80044f8:	2601      	movs	r6, #1
 80044fa:	1c44      	adds	r4, r0, #1
 80044fc:	a904      	add	r1, sp, #16
 80044fe:	2202      	movs	r2, #2
 8004500:	9403      	str	r4, [sp, #12]
 8004502:	9005      	str	r0, [sp, #20]
 8004504:	68ac      	ldr	r4, [r5, #8]
 8004506:	9706      	str	r7, [sp, #24]
 8004508:	9607      	str	r6, [sp, #28]
 800450a:	9101      	str	r1, [sp, #4]
 800450c:	9202      	str	r2, [sp, #8]
 800450e:	b1b3      	cbz	r3, 800453e <_puts_r+0x5a>
 8004510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004514:	049a      	lsls	r2, r3, #18
 8004516:	d406      	bmi.n	8004526 <_puts_r+0x42>
 8004518:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800451a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800451e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004522:	81a3      	strh	r3, [r4, #12]
 8004524:	6662      	str	r2, [r4, #100]	; 0x64
 8004526:	4621      	mov	r1, r4
 8004528:	4628      	mov	r0, r5
 800452a:	aa01      	add	r2, sp, #4
 800452c:	f004 fb02 	bl	8008b34 <__sfvwrite_r>
 8004530:	2800      	cmp	r0, #0
 8004532:	bf14      	ite	ne
 8004534:	f04f 30ff 	movne.w	r0, #4294967295
 8004538:	200a      	moveq	r0, #10
 800453a:	b009      	add	sp, #36	; 0x24
 800453c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800453e:	4628      	mov	r0, r5
 8004540:	f004 f9b8 	bl	80088b4 <__sinit>
 8004544:	e7e4      	b.n	8004510 <_puts_r+0x2c>
 8004546:	bf00      	nop
 8004548:	0800acb0 	.word	0x0800acb0

0800454c <puts>:
 800454c:	4b02      	ldr	r3, [pc, #8]	; (8004558 <puts+0xc>)
 800454e:	4601      	mov	r1, r0
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	f7ff bfc7 	b.w	80044e4 <_puts_r>
 8004556:	bf00      	nop
 8004558:	20000468 	.word	0x20000468

0800455c <sprintf>:
 800455c:	b40e      	push	{r1, r2, r3}
 800455e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004560:	b09c      	sub	sp, #112	; 0x70
 8004562:	ab21      	add	r3, sp, #132	; 0x84
 8004564:	490f      	ldr	r1, [pc, #60]	; (80045a4 <sprintf+0x48>)
 8004566:	f853 2b04 	ldr.w	r2, [r3], #4
 800456a:	9301      	str	r3, [sp, #4]
 800456c:	4605      	mov	r5, r0
 800456e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8004572:	6808      	ldr	r0, [r1, #0]
 8004574:	9502      	str	r5, [sp, #8]
 8004576:	f44f 7702 	mov.w	r7, #520	; 0x208
 800457a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800457e:	a902      	add	r1, sp, #8
 8004580:	9506      	str	r5, [sp, #24]
 8004582:	f8ad 7014 	strh.w	r7, [sp, #20]
 8004586:	9404      	str	r4, [sp, #16]
 8004588:	9407      	str	r4, [sp, #28]
 800458a:	f8ad 6016 	strh.w	r6, [sp, #22]
 800458e:	f000 f8d7 	bl	8004740 <_svfprintf_r>
 8004592:	9b02      	ldr	r3, [sp, #8]
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
 8004598:	b01c      	add	sp, #112	; 0x70
 800459a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800459e:	b003      	add	sp, #12
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000468 	.word	0x20000468
	...

080045c0 <strlen>:
 80045c0:	f890 f000 	pld	[r0]
 80045c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 80045c8:	f020 0107 	bic.w	r1, r0, #7
 80045cc:	f06f 0c00 	mvn.w	ip, #0
 80045d0:	f010 0407 	ands.w	r4, r0, #7
 80045d4:	f891 f020 	pld	[r1, #32]
 80045d8:	f040 8049 	bne.w	800466e <strlen+0xae>
 80045dc:	f04f 0400 	mov.w	r4, #0
 80045e0:	f06f 0007 	mvn.w	r0, #7
 80045e4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80045e8:	f891 f040 	pld	[r1, #64]	; 0x40
 80045ec:	f100 0008 	add.w	r0, r0, #8
 80045f0:	fa82 f24c 	uadd8	r2, r2, ip
 80045f4:	faa4 f28c 	sel	r2, r4, ip
 80045f8:	fa83 f34c 	uadd8	r3, r3, ip
 80045fc:	faa2 f38c 	sel	r3, r2, ip
 8004600:	bb4b      	cbnz	r3, 8004656 <strlen+0x96>
 8004602:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8004606:	fa82 f24c 	uadd8	r2, r2, ip
 800460a:	f100 0008 	add.w	r0, r0, #8
 800460e:	faa4 f28c 	sel	r2, r4, ip
 8004612:	fa83 f34c 	uadd8	r3, r3, ip
 8004616:	faa2 f38c 	sel	r3, r2, ip
 800461a:	b9e3      	cbnz	r3, 8004656 <strlen+0x96>
 800461c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8004620:	fa82 f24c 	uadd8	r2, r2, ip
 8004624:	f100 0008 	add.w	r0, r0, #8
 8004628:	faa4 f28c 	sel	r2, r4, ip
 800462c:	fa83 f34c 	uadd8	r3, r3, ip
 8004630:	faa2 f38c 	sel	r3, r2, ip
 8004634:	b97b      	cbnz	r3, 8004656 <strlen+0x96>
 8004636:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800463a:	f101 0120 	add.w	r1, r1, #32
 800463e:	fa82 f24c 	uadd8	r2, r2, ip
 8004642:	f100 0008 	add.w	r0, r0, #8
 8004646:	faa4 f28c 	sel	r2, r4, ip
 800464a:	fa83 f34c 	uadd8	r3, r3, ip
 800464e:	faa2 f38c 	sel	r3, r2, ip
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0c6      	beq.n	80045e4 <strlen+0x24>
 8004656:	2a00      	cmp	r2, #0
 8004658:	bf04      	itt	eq
 800465a:	3004      	addeq	r0, #4
 800465c:	461a      	moveq	r2, r3
 800465e:	ba12      	rev	r2, r2
 8004660:	fab2 f282 	clz	r2, r2
 8004664:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8004668:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800466c:	4770      	bx	lr
 800466e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004672:	f004 0503 	and.w	r5, r4, #3
 8004676:	f1c4 0000 	rsb	r0, r4, #0
 800467a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800467e:	f014 0f04 	tst.w	r4, #4
 8004682:	f891 f040 	pld	[r1, #64]	; 0x40
 8004686:	fa0c f505 	lsl.w	r5, ip, r5
 800468a:	ea62 0205 	orn	r2, r2, r5
 800468e:	bf1c      	itt	ne
 8004690:	ea63 0305 	ornne	r3, r3, r5
 8004694:	4662      	movne	r2, ip
 8004696:	f04f 0400 	mov.w	r4, #0
 800469a:	e7a9      	b.n	80045f0 <strlen+0x30>

0800469c <strncmp>:
 800469c:	2a00      	cmp	r2, #0
 800469e:	d041      	beq.n	8004724 <strncmp+0x88>
 80046a0:	ea40 0301 	orr.w	r3, r0, r1
 80046a4:	f013 0303 	ands.w	r3, r3, #3
 80046a8:	b4f0      	push	{r4, r5, r6, r7}
 80046aa:	d125      	bne.n	80046f8 <strncmp+0x5c>
 80046ac:	2a03      	cmp	r2, #3
 80046ae:	d923      	bls.n	80046f8 <strncmp+0x5c>
 80046b0:	6804      	ldr	r4, [r0, #0]
 80046b2:	680d      	ldr	r5, [r1, #0]
 80046b4:	42ac      	cmp	r4, r5
 80046b6:	d11f      	bne.n	80046f8 <strncmp+0x5c>
 80046b8:	3a04      	subs	r2, #4
 80046ba:	d035      	beq.n	8004728 <strncmp+0x8c>
 80046bc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 80046c0:	ea25 0404 	bic.w	r4, r5, r4
 80046c4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80046c8:	d131      	bne.n	800472e <strncmp+0x92>
 80046ca:	1d07      	adds	r7, r0, #4
 80046cc:	1d0d      	adds	r5, r1, #4
 80046ce:	e00d      	b.n	80046ec <strncmp+0x50>
 80046d0:	f857 3b04 	ldr.w	r3, [r7], #4
 80046d4:	680e      	ldr	r6, [r1, #0]
 80046d6:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 80046da:	42b3      	cmp	r3, r6
 80046dc:	ea24 0403 	bic.w	r4, r4, r3
 80046e0:	d10a      	bne.n	80046f8 <strncmp+0x5c>
 80046e2:	3a04      	subs	r2, #4
 80046e4:	d020      	beq.n	8004728 <strncmp+0x8c>
 80046e6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80046ea:	d123      	bne.n	8004734 <strncmp+0x98>
 80046ec:	2a03      	cmp	r2, #3
 80046ee:	4629      	mov	r1, r5
 80046f0:	4638      	mov	r0, r7
 80046f2:	f105 0504 	add.w	r5, r5, #4
 80046f6:	d8eb      	bhi.n	80046d0 <strncmp+0x34>
 80046f8:	7803      	ldrb	r3, [r0, #0]
 80046fa:	780c      	ldrb	r4, [r1, #0]
 80046fc:	429c      	cmp	r4, r3
 80046fe:	f102 32ff 	add.w	r2, r2, #4294967295
 8004702:	d10c      	bne.n	800471e <strncmp+0x82>
 8004704:	b182      	cbz	r2, 8004728 <strncmp+0x8c>
 8004706:	b914      	cbnz	r4, 800470e <strncmp+0x72>
 8004708:	e016      	b.n	8004738 <strncmp+0x9c>
 800470a:	b16a      	cbz	r2, 8004728 <strncmp+0x8c>
 800470c:	b17b      	cbz	r3, 800472e <strncmp+0x92>
 800470e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004712:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004716:	42a3      	cmp	r3, r4
 8004718:	f102 32ff 	add.w	r2, r2, #4294967295
 800471c:	d0f5      	beq.n	800470a <strncmp+0x6e>
 800471e:	1b18      	subs	r0, r3, r4
 8004720:	bcf0      	pop	{r4, r5, r6, r7}
 8004722:	4770      	bx	lr
 8004724:	4610      	mov	r0, r2
 8004726:	4770      	bx	lr
 8004728:	4610      	mov	r0, r2
 800472a:	bcf0      	pop	{r4, r5, r6, r7}
 800472c:	4770      	bx	lr
 800472e:	4618      	mov	r0, r3
 8004730:	bcf0      	pop	{r4, r5, r6, r7}
 8004732:	4770      	bx	lr
 8004734:	2000      	movs	r0, #0
 8004736:	e7f3      	b.n	8004720 <strncmp+0x84>
 8004738:	4620      	mov	r0, r4
 800473a:	e7f1      	b.n	8004720 <strncmp+0x84>
 800473c:	0000      	movs	r0, r0
	...

08004740 <_svfprintf_r>:
 8004740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	b0c5      	sub	sp, #276	; 0x114
 8004746:	460c      	mov	r4, r1
 8004748:	9109      	str	r1, [sp, #36]	; 0x24
 800474a:	4615      	mov	r5, r2
 800474c:	930e      	str	r3, [sp, #56]	; 0x38
 800474e:	900a      	str	r0, [sp, #40]	; 0x28
 8004750:	f004 fbaa 	bl	8008ea8 <_localeconv_r>
 8004754:	6803      	ldr	r3, [r0, #0]
 8004756:	9317      	str	r3, [sp, #92]	; 0x5c
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff ff31 	bl	80045c0 <strlen>
 800475e:	89a3      	ldrh	r3, [r4, #12]
 8004760:	9016      	str	r0, [sp, #88]	; 0x58
 8004762:	061e      	lsls	r6, r3, #24
 8004764:	d503      	bpl.n	800476e <_svfprintf_r+0x2e>
 8004766:	6923      	ldr	r3, [r4, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	f001 8133 	beq.w	80059d4 <_svfprintf_r+0x1294>
 800476e:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004a08 <_svfprintf_r+0x2c8>
 8004772:	2300      	movs	r3, #0
 8004774:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004778:	9312      	str	r3, [sp, #72]	; 0x48
 800477a:	9329      	str	r3, [sp, #164]	; 0xa4
 800477c:	9328      	str	r3, [sp, #160]	; 0xa0
 800477e:	9319      	str	r3, [sp, #100]	; 0x64
 8004780:	930b      	str	r3, [sp, #44]	; 0x2c
 8004782:	f8df a290 	ldr.w	sl, [pc, #656]	; 8004a14 <_svfprintf_r+0x2d4>
 8004786:	ab34      	add	r3, sp, #208	; 0xd0
 8004788:	9327      	str	r3, [sp, #156]	; 0x9c
 800478a:	4699      	mov	r9, r3
 800478c:	46a8      	mov	r8, r5
 800478e:	f898 3000 	ldrb.w	r3, [r8]
 8004792:	4644      	mov	r4, r8
 8004794:	b1eb      	cbz	r3, 80047d2 <_svfprintf_r+0x92>
 8004796:	2b25      	cmp	r3, #37	; 0x25
 8004798:	d102      	bne.n	80047a0 <_svfprintf_r+0x60>
 800479a:	e01a      	b.n	80047d2 <_svfprintf_r+0x92>
 800479c:	2b25      	cmp	r3, #37	; 0x25
 800479e:	d003      	beq.n	80047a8 <_svfprintf_r+0x68>
 80047a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f9      	bne.n	800479c <_svfprintf_r+0x5c>
 80047a8:	ebc8 0504 	rsb	r5, r8, r4
 80047ac:	b18d      	cbz	r5, 80047d2 <_svfprintf_r+0x92>
 80047ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80047b0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80047b2:	f8c9 8000 	str.w	r8, [r9]
 80047b6:	3301      	adds	r3, #1
 80047b8:	442a      	add	r2, r5
 80047ba:	2b07      	cmp	r3, #7
 80047bc:	f8c9 5004 	str.w	r5, [r9, #4]
 80047c0:	9229      	str	r2, [sp, #164]	; 0xa4
 80047c2:	9328      	str	r3, [sp, #160]	; 0xa0
 80047c4:	f300 80a6 	bgt.w	8004914 <_svfprintf_r+0x1d4>
 80047c8:	f109 0908 	add.w	r9, r9, #8
 80047cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047ce:	442b      	add	r3, r5
 80047d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80047d2:	7823      	ldrb	r3, [r4, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80a6 	beq.w	8004926 <_svfprintf_r+0x1e6>
 80047da:	2300      	movs	r3, #0
 80047dc:	461a      	mov	r2, r3
 80047de:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80047e2:	4619      	mov	r1, r3
 80047e4:	930c      	str	r3, [sp, #48]	; 0x30
 80047e6:	9307      	str	r3, [sp, #28]
 80047e8:	f04f 3bff 	mov.w	fp, #4294967295
 80047ec:	7863      	ldrb	r3, [r4, #1]
 80047ee:	f104 0801 	add.w	r8, r4, #1
 80047f2:	465d      	mov	r5, fp
 80047f4:	f108 0801 	add.w	r8, r8, #1
 80047f8:	f1a3 0020 	sub.w	r0, r3, #32
 80047fc:	2858      	cmp	r0, #88	; 0x58
 80047fe:	f200 8434 	bhi.w	800506a <_svfprintf_r+0x92a>
 8004802:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004806:	03a0      	.short	0x03a0
 8004808:	04320432 	.word	0x04320432
 800480c:	043203a8 	.word	0x043203a8
 8004810:	04320432 	.word	0x04320432
 8004814:	04320432 	.word	0x04320432
 8004818:	03af0432 	.word	0x03af0432
 800481c:	043203bd 	.word	0x043203bd
 8004820:	00e2005d 	.word	0x00e2005d
 8004824:	01090432 	.word	0x01090432
 8004828:	01100110 	.word	0x01100110
 800482c:	01100110 	.word	0x01100110
 8004830:	01100110 	.word	0x01100110
 8004834:	01100110 	.word	0x01100110
 8004838:	04320110 	.word	0x04320110
 800483c:	04320432 	.word	0x04320432
 8004840:	04320432 	.word	0x04320432
 8004844:	04320432 	.word	0x04320432
 8004848:	04320432 	.word	0x04320432
 800484c:	01200432 	.word	0x01200432
 8004850:	04320286 	.word	0x04320286
 8004854:	04320286 	.word	0x04320286
 8004858:	04320432 	.word	0x04320432
 800485c:	02d40432 	.word	0x02d40432
 8004860:	04320432 	.word	0x04320432
 8004864:	043202e5 	.word	0x043202e5
 8004868:	04320432 	.word	0x04320432
 800486c:	04320432 	.word	0x04320432
 8004870:	0432030f 	.word	0x0432030f
 8004874:	033d0432 	.word	0x033d0432
 8004878:	04320432 	.word	0x04320432
 800487c:	04320432 	.word	0x04320432
 8004880:	04320432 	.word	0x04320432
 8004884:	04320432 	.word	0x04320432
 8004888:	04320432 	.word	0x04320432
 800488c:	0391037e 	.word	0x0391037e
 8004890:	02860286 	.word	0x02860286
 8004894:	03990286 	.word	0x03990286
 8004898:	04320391 	.word	0x04320391
 800489c:	04070432 	.word	0x04070432
 80048a0:	04120432 	.word	0x04120432
 80048a4:	006400a3 	.word	0x006400a3
 80048a8:	043203c2 	.word	0x043203c2
 80048ac:	043203c9 	.word	0x043203c9
 80048b0:	043203ea 	.word	0x043203ea
 80048b4:	03f20432 	.word	0x03f20432
 80048b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80048ba:	930e      	str	r3, [sp, #56]	; 0x38
 80048bc:	4240      	negs	r0, r0
 80048be:	900c      	str	r0, [sp, #48]	; 0x30
 80048c0:	9b07      	ldr	r3, [sp, #28]
 80048c2:	f043 0304 	orr.w	r3, r3, #4
 80048c6:	9307      	str	r3, [sp, #28]
 80048c8:	f898 3000 	ldrb.w	r3, [r8]
 80048cc:	e792      	b.n	80047f4 <_svfprintf_r+0xb4>
 80048ce:	980e      	ldr	r0, [sp, #56]	; 0x38
 80048d0:	46ab      	mov	fp, r5
 80048d2:	2100      	movs	r1, #0
 80048d4:	6804      	ldr	r4, [r0, #0]
 80048d6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80048da:	1d07      	adds	r7, r0, #4
 80048dc:	9807      	ldr	r0, [sp, #28]
 80048de:	2330      	movs	r3, #48	; 0x30
 80048e0:	2278      	movs	r2, #120	; 0x78
 80048e2:	458b      	cmp	fp, r1
 80048e4:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 80048e8:	f04f 0500 	mov.w	r5, #0
 80048ec:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 80048f0:	f040 0302 	orr.w	r3, r0, #2
 80048f4:	f2c0 83d6 	blt.w	80050a4 <_svfprintf_r+0x964>
 80048f8:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 80048fc:	f043 0302 	orr.w	r3, r3, #2
 8004900:	9307      	str	r3, [sp, #28]
 8004902:	ea54 0305 	orrs.w	r3, r4, r5
 8004906:	970e      	str	r7, [sp, #56]	; 0x38
 8004908:	f000 83a2 	beq.w	8005050 <_svfprintf_r+0x910>
 800490c:	460f      	mov	r7, r1
 800490e:	9211      	str	r2, [sp, #68]	; 0x44
 8004910:	483f      	ldr	r0, [pc, #252]	; (8004a10 <_svfprintf_r+0x2d0>)
 8004912:	e2e6      	b.n	8004ee2 <_svfprintf_r+0x7a2>
 8004914:	aa27      	add	r2, sp, #156	; 0x9c
 8004916:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004918:	980a      	ldr	r0, [sp, #40]	; 0x28
 800491a:	f005 fc27 	bl	800a16c <__ssprint_r>
 800491e:	b948      	cbnz	r0, 8004934 <_svfprintf_r+0x1f4>
 8004920:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004924:	e752      	b.n	80047cc <_svfprintf_r+0x8c>
 8004926:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004928:	b123      	cbz	r3, 8004934 <_svfprintf_r+0x1f4>
 800492a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800492c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800492e:	aa27      	add	r2, sp, #156	; 0x9c
 8004930:	f005 fc1c 	bl	800a16c <__ssprint_r>
 8004934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004936:	899b      	ldrh	r3, [r3, #12]
 8004938:	f013 0f40 	tst.w	r3, #64	; 0x40
 800493c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800493e:	bf18      	it	ne
 8004940:	f04f 33ff 	movne.w	r3, #4294967295
 8004944:	4618      	mov	r0, r3
 8004946:	b045      	add	sp, #276	; 0x114
 8004948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494c:	9311      	str	r3, [sp, #68]	; 0x44
 800494e:	46ab      	mov	fp, r5
 8004950:	2a00      	cmp	r2, #0
 8004952:	f041 823b 	bne.w	8005dcc <_svfprintf_r+0x168c>
 8004956:	9a07      	ldr	r2, [sp, #28]
 8004958:	f012 0320 	ands.w	r3, r2, #32
 800495c:	f000 8246 	beq.w	8004dec <_svfprintf_r+0x6ac>
 8004960:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004962:	3707      	adds	r7, #7
 8004964:	f027 0307 	bic.w	r3, r7, #7
 8004968:	2700      	movs	r7, #0
 800496a:	f103 0108 	add.w	r1, r3, #8
 800496e:	45bb      	cmp	fp, r7
 8004970:	910e      	str	r1, [sp, #56]	; 0x38
 8004972:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004976:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800497a:	f2c0 8764 	blt.w	8005846 <_svfprintf_r+0x1106>
 800497e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004982:	9307      	str	r3, [sp, #28]
 8004984:	ea54 0305 	orrs.w	r3, r4, r5
 8004988:	f000 8384 	beq.w	8005094 <_svfprintf_r+0x954>
 800498c:	ae34      	add	r6, sp, #208	; 0xd0
 800498e:	08e2      	lsrs	r2, r4, #3
 8004990:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8004994:	08e9      	lsrs	r1, r5, #3
 8004996:	f004 0307 	and.w	r3, r4, #7
 800499a:	460d      	mov	r5, r1
 800499c:	4614      	mov	r4, r2
 800499e:	3330      	adds	r3, #48	; 0x30
 80049a0:	ea54 0205 	orrs.w	r2, r4, r5
 80049a4:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80049a8:	d1f1      	bne.n	800498e <_svfprintf_r+0x24e>
 80049aa:	9a07      	ldr	r2, [sp, #28]
 80049ac:	07d1      	lsls	r1, r2, #31
 80049ae:	f140 808f 	bpl.w	8004ad0 <_svfprintf_r+0x390>
 80049b2:	2b30      	cmp	r3, #48	; 0x30
 80049b4:	f000 808c 	beq.w	8004ad0 <_svfprintf_r+0x390>
 80049b8:	2230      	movs	r2, #48	; 0x30
 80049ba:	1e73      	subs	r3, r6, #1
 80049bc:	f806 2c01 	strb.w	r2, [r6, #-1]
 80049c0:	aa34      	add	r2, sp, #208	; 0xd0
 80049c2:	1ad2      	subs	r2, r2, r3
 80049c4:	920d      	str	r2, [sp, #52]	; 0x34
 80049c6:	461e      	mov	r6, r3
 80049c8:	e085      	b.n	8004ad6 <_svfprintf_r+0x396>
 80049ca:	f898 3000 	ldrb.w	r3, [r8]
 80049ce:	2b2a      	cmp	r3, #42	; 0x2a
 80049d0:	f108 0401 	add.w	r4, r8, #1
 80049d4:	f001 81ec 	beq.w	8005db0 <_svfprintf_r+0x1670>
 80049d8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80049dc:	2809      	cmp	r0, #9
 80049de:	bf98      	it	ls
 80049e0:	2500      	movls	r5, #0
 80049e2:	f201 818e 	bhi.w	8005d02 <_svfprintf_r+0x15c2>
 80049e6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80049ea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80049ee:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80049f2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80049f6:	2809      	cmp	r0, #9
 80049f8:	d9f5      	bls.n	80049e6 <_svfprintf_r+0x2a6>
 80049fa:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80049fe:	46a0      	mov	r8, r4
 8004a00:	e6fa      	b.n	80047f8 <_svfprintf_r+0xb8>
 8004a02:	bf00      	nop
 8004a04:	f3af 8000 	nop.w
	...
 8004a10:	0800ace8 	.word	0x0800ace8
 8004a14:	0800acb4 	.word	0x0800acb4
 8004a18:	9b07      	ldr	r3, [sp, #28]
 8004a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1e:	9307      	str	r3, [sp, #28]
 8004a20:	f898 3000 	ldrb.w	r3, [r8]
 8004a24:	e6e6      	b.n	80047f4 <_svfprintf_r+0xb4>
 8004a26:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	461c      	mov	r4, r3
 8004a2e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004a32:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004a36:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8004a3a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004a3e:	2809      	cmp	r0, #9
 8004a40:	d9f5      	bls.n	8004a2e <_svfprintf_r+0x2ee>
 8004a42:	940c      	str	r4, [sp, #48]	; 0x30
 8004a44:	e6d8      	b.n	80047f8 <_svfprintf_r+0xb8>
 8004a46:	9311      	str	r3, [sp, #68]	; 0x44
 8004a48:	46ab      	mov	fp, r5
 8004a4a:	2a00      	cmp	r2, #0
 8004a4c:	f041 81cc 	bne.w	8005de8 <_svfprintf_r+0x16a8>
 8004a50:	9b07      	ldr	r3, [sp, #28]
 8004a52:	f043 0310 	orr.w	r3, r3, #16
 8004a56:	9307      	str	r3, [sp, #28]
 8004a58:	9b07      	ldr	r3, [sp, #28]
 8004a5a:	069c      	lsls	r4, r3, #26
 8004a5c:	f140 8537 	bpl.w	80054ce <_svfprintf_r+0xd8e>
 8004a60:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004a62:	3707      	adds	r7, #7
 8004a64:	f027 0707 	bic.w	r7, r7, #7
 8004a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a6c:	f107 0108 	add.w	r1, r7, #8
 8004a70:	910e      	str	r1, [sp, #56]	; 0x38
 8004a72:	4614      	mov	r4, r2
 8004a74:	461d      	mov	r5, r3
 8004a76:	2a00      	cmp	r2, #0
 8004a78:	f173 0300 	sbcs.w	r3, r3, #0
 8004a7c:	f2c0 8562 	blt.w	8005544 <_svfprintf_r+0xe04>
 8004a80:	f1bb 0f00 	cmp.w	fp, #0
 8004a84:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004a88:	f2c0 853f 	blt.w	800550a <_svfprintf_r+0xdca>
 8004a8c:	9b07      	ldr	r3, [sp, #28]
 8004a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a92:	9307      	str	r3, [sp, #28]
 8004a94:	ea54 0305 	orrs.w	r3, r4, r5
 8004a98:	f000 81e8 	beq.w	8004e6c <_svfprintf_r+0x72c>
 8004a9c:	2d00      	cmp	r5, #0
 8004a9e:	bf08      	it	eq
 8004aa0:	2c0a      	cmpeq	r4, #10
 8004aa2:	f0c0 81e8 	bcc.w	8004e76 <_svfprintf_r+0x736>
 8004aa6:	ae34      	add	r6, sp, #208	; 0xd0
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	4629      	mov	r1, r5
 8004aac:	220a      	movs	r2, #10
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f005 fdfc 	bl	800a6ac <__aeabi_uldivmod>
 8004ab4:	3230      	adds	r2, #48	; 0x30
 8004ab6:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8004aba:	4620      	mov	r0, r4
 8004abc:	4629      	mov	r1, r5
 8004abe:	2300      	movs	r3, #0
 8004ac0:	220a      	movs	r2, #10
 8004ac2:	f005 fdf3 	bl	800a6ac <__aeabi_uldivmod>
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	460d      	mov	r5, r1
 8004aca:	ea54 0305 	orrs.w	r3, r4, r5
 8004ace:	d1eb      	bne.n	8004aa8 <_svfprintf_r+0x368>
 8004ad0:	ab34      	add	r3, sp, #208	; 0xd0
 8004ad2:	1b9b      	subs	r3, r3, r6
 8004ad4:	930d      	str	r3, [sp, #52]	; 0x34
 8004ad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ad8:	455b      	cmp	r3, fp
 8004ada:	bfb8      	it	lt
 8004adc:	465b      	movlt	r3, fp
 8004ade:	9308      	str	r3, [sp, #32]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9313      	str	r3, [sp, #76]	; 0x4c
 8004ae4:	b117      	cbz	r7, 8004aec <_svfprintf_r+0x3ac>
 8004ae6:	9b08      	ldr	r3, [sp, #32]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	9308      	str	r3, [sp, #32]
 8004aec:	9b07      	ldr	r3, [sp, #28]
 8004aee:	f013 0302 	ands.w	r3, r3, #2
 8004af2:	930f      	str	r3, [sp, #60]	; 0x3c
 8004af4:	d002      	beq.n	8004afc <_svfprintf_r+0x3bc>
 8004af6:	9b08      	ldr	r3, [sp, #32]
 8004af8:	3302      	adds	r3, #2
 8004afa:	9308      	str	r3, [sp, #32]
 8004afc:	9b07      	ldr	r3, [sp, #28]
 8004afe:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8004b02:	9310      	str	r3, [sp, #64]	; 0x40
 8004b04:	f040 82db 	bne.w	80050be <_svfprintf_r+0x97e>
 8004b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b0a:	9a08      	ldr	r2, [sp, #32]
 8004b0c:	1a9d      	subs	r5, r3, r2
 8004b0e:	2d00      	cmp	r5, #0
 8004b10:	f340 82d5 	ble.w	80050be <_svfprintf_r+0x97e>
 8004b14:	2d10      	cmp	r5, #16
 8004b16:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004b18:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004b1a:	4fa8      	ldr	r7, [pc, #672]	; (8004dbc <_svfprintf_r+0x67c>)
 8004b1c:	dd27      	ble.n	8004b6e <_svfprintf_r+0x42e>
 8004b1e:	9618      	str	r6, [sp, #96]	; 0x60
 8004b20:	4648      	mov	r0, r9
 8004b22:	2410      	movs	r4, #16
 8004b24:	46b9      	mov	r9, r7
 8004b26:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004b28:	462f      	mov	r7, r5
 8004b2a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004b2c:	e004      	b.n	8004b38 <_svfprintf_r+0x3f8>
 8004b2e:	3f10      	subs	r7, #16
 8004b30:	2f10      	cmp	r7, #16
 8004b32:	f100 0008 	add.w	r0, r0, #8
 8004b36:	dd16      	ble.n	8004b66 <_svfprintf_r+0x426>
 8004b38:	3201      	adds	r2, #1
 8004b3a:	4ba0      	ldr	r3, [pc, #640]	; (8004dbc <_svfprintf_r+0x67c>)
 8004b3c:	9228      	str	r2, [sp, #160]	; 0xa0
 8004b3e:	3110      	adds	r1, #16
 8004b40:	2a07      	cmp	r2, #7
 8004b42:	9129      	str	r1, [sp, #164]	; 0xa4
 8004b44:	e880 0018 	stmia.w	r0, {r3, r4}
 8004b48:	ddf1      	ble.n	8004b2e <_svfprintf_r+0x3ee>
 8004b4a:	aa27      	add	r2, sp, #156	; 0x9c
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f005 fb0c 	bl	800a16c <__ssprint_r>
 8004b54:	2800      	cmp	r0, #0
 8004b56:	f47f aeed 	bne.w	8004934 <_svfprintf_r+0x1f4>
 8004b5a:	3f10      	subs	r7, #16
 8004b5c:	2f10      	cmp	r7, #16
 8004b5e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004b60:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004b62:	a834      	add	r0, sp, #208	; 0xd0
 8004b64:	dce8      	bgt.n	8004b38 <_svfprintf_r+0x3f8>
 8004b66:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8004b68:	463d      	mov	r5, r7
 8004b6a:	464f      	mov	r7, r9
 8004b6c:	4681      	mov	r9, r0
 8004b6e:	3201      	adds	r2, #1
 8004b70:	186c      	adds	r4, r5, r1
 8004b72:	2a07      	cmp	r2, #7
 8004b74:	9429      	str	r4, [sp, #164]	; 0xa4
 8004b76:	9228      	str	r2, [sp, #160]	; 0xa0
 8004b78:	f8c9 7000 	str.w	r7, [r9]
 8004b7c:	f8c9 5004 	str.w	r5, [r9, #4]
 8004b80:	f300 842d 	bgt.w	80053de <_svfprintf_r+0xc9e>
 8004b84:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004b88:	f109 0908 	add.w	r9, r9, #8
 8004b8c:	b177      	cbz	r7, 8004bac <_svfprintf_r+0x46c>
 8004b8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004b90:	3301      	adds	r3, #1
 8004b92:	3401      	adds	r4, #1
 8004b94:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8004b98:	2201      	movs	r2, #1
 8004b9a:	2b07      	cmp	r3, #7
 8004b9c:	9429      	str	r4, [sp, #164]	; 0xa4
 8004b9e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004ba0:	e889 0006 	stmia.w	r9, {r1, r2}
 8004ba4:	f300 83a5 	bgt.w	80052f2 <_svfprintf_r+0xbb2>
 8004ba8:	f109 0908 	add.w	r9, r9, #8
 8004bac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bae:	b16b      	cbz	r3, 8004bcc <_svfprintf_r+0x48c>
 8004bb0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	3402      	adds	r4, #2
 8004bb6:	a920      	add	r1, sp, #128	; 0x80
 8004bb8:	2202      	movs	r2, #2
 8004bba:	2b07      	cmp	r3, #7
 8004bbc:	9429      	str	r4, [sp, #164]	; 0xa4
 8004bbe:	9328      	str	r3, [sp, #160]	; 0xa0
 8004bc0:	e889 0006 	stmia.w	r9, {r1, r2}
 8004bc4:	f300 83a1 	bgt.w	800530a <_svfprintf_r+0xbca>
 8004bc8:	f109 0908 	add.w	r9, r9, #8
 8004bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bce:	2b80      	cmp	r3, #128	; 0x80
 8004bd0:	f000 82e1 	beq.w	8005196 <_svfprintf_r+0xa56>
 8004bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bd6:	ebc3 070b 	rsb	r7, r3, fp
 8004bda:	2f00      	cmp	r7, #0
 8004bdc:	dd33      	ble.n	8004c46 <_svfprintf_r+0x506>
 8004bde:	4a78      	ldr	r2, [pc, #480]	; (8004dc0 <_svfprintf_r+0x680>)
 8004be0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004be2:	920f      	str	r2, [sp, #60]	; 0x3c
 8004be4:	2f10      	cmp	r7, #16
 8004be6:	dd22      	ble.n	8004c2e <_svfprintf_r+0x4ee>
 8004be8:	4622      	mov	r2, r4
 8004bea:	f04f 0b10 	mov.w	fp, #16
 8004bee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004bf0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004bf2:	e004      	b.n	8004bfe <_svfprintf_r+0x4be>
 8004bf4:	3f10      	subs	r7, #16
 8004bf6:	2f10      	cmp	r7, #16
 8004bf8:	f109 0908 	add.w	r9, r9, #8
 8004bfc:	dd16      	ble.n	8004c2c <_svfprintf_r+0x4ec>
 8004bfe:	3301      	adds	r3, #1
 8004c00:	3210      	adds	r2, #16
 8004c02:	2b07      	cmp	r3, #7
 8004c04:	9229      	str	r2, [sp, #164]	; 0xa4
 8004c06:	9328      	str	r3, [sp, #160]	; 0xa0
 8004c08:	e889 0c00 	stmia.w	r9, {sl, fp}
 8004c0c:	ddf2      	ble.n	8004bf4 <_svfprintf_r+0x4b4>
 8004c0e:	aa27      	add	r2, sp, #156	; 0x9c
 8004c10:	4621      	mov	r1, r4
 8004c12:	4628      	mov	r0, r5
 8004c14:	f005 faaa 	bl	800a16c <__ssprint_r>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	f47f ae8b 	bne.w	8004934 <_svfprintf_r+0x1f4>
 8004c1e:	3f10      	subs	r7, #16
 8004c20:	2f10      	cmp	r7, #16
 8004c22:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004c24:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004c26:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004c2a:	dce8      	bgt.n	8004bfe <_svfprintf_r+0x4be>
 8004c2c:	4614      	mov	r4, r2
 8004c2e:	3301      	adds	r3, #1
 8004c30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c32:	9328      	str	r3, [sp, #160]	; 0xa0
 8004c34:	443c      	add	r4, r7
 8004c36:	2b07      	cmp	r3, #7
 8004c38:	9429      	str	r4, [sp, #164]	; 0xa4
 8004c3a:	e889 0084 	stmia.w	r9, {r2, r7}
 8004c3e:	f300 834c 	bgt.w	80052da <_svfprintf_r+0xb9a>
 8004c42:	f109 0908 	add.w	r9, r9, #8
 8004c46:	9b07      	ldr	r3, [sp, #28]
 8004c48:	05da      	lsls	r2, r3, #23
 8004c4a:	f100 823a 	bmi.w	80050c2 <_svfprintf_r+0x982>
 8004c4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004c50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c52:	f8c9 6000 	str.w	r6, [r9]
 8004c56:	3301      	adds	r3, #1
 8004c58:	440c      	add	r4, r1
 8004c5a:	2b07      	cmp	r3, #7
 8004c5c:	9429      	str	r4, [sp, #164]	; 0xa4
 8004c5e:	f8c9 1004 	str.w	r1, [r9, #4]
 8004c62:	9328      	str	r3, [sp, #160]	; 0xa0
 8004c64:	f300 8323 	bgt.w	80052ae <_svfprintf_r+0xb6e>
 8004c68:	f109 0908 	add.w	r9, r9, #8
 8004c6c:	9b07      	ldr	r3, [sp, #28]
 8004c6e:	0759      	lsls	r1, r3, #29
 8004c70:	d53f      	bpl.n	8004cf2 <_svfprintf_r+0x5b2>
 8004c72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c74:	9a08      	ldr	r2, [sp, #32]
 8004c76:	1a9d      	subs	r5, r3, r2
 8004c78:	2d00      	cmp	r5, #0
 8004c7a:	dd3a      	ble.n	8004cf2 <_svfprintf_r+0x5b2>
 8004c7c:	2d10      	cmp	r5, #16
 8004c7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004c80:	4f4e      	ldr	r7, [pc, #312]	; (8004dbc <_svfprintf_r+0x67c>)
 8004c82:	dd23      	ble.n	8004ccc <_svfprintf_r+0x58c>
 8004c84:	4622      	mov	r2, r4
 8004c86:	2610      	movs	r6, #16
 8004c88:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004c8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004c8e:	e004      	b.n	8004c9a <_svfprintf_r+0x55a>
 8004c90:	3d10      	subs	r5, #16
 8004c92:	2d10      	cmp	r5, #16
 8004c94:	f109 0908 	add.w	r9, r9, #8
 8004c98:	dd17      	ble.n	8004cca <_svfprintf_r+0x58a>
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	4947      	ldr	r1, [pc, #284]	; (8004dbc <_svfprintf_r+0x67c>)
 8004c9e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004ca0:	3210      	adds	r2, #16
 8004ca2:	2b07      	cmp	r3, #7
 8004ca4:	9229      	str	r2, [sp, #164]	; 0xa4
 8004ca6:	e889 0042 	stmia.w	r9, {r1, r6}
 8004caa:	ddf1      	ble.n	8004c90 <_svfprintf_r+0x550>
 8004cac:	aa27      	add	r2, sp, #156	; 0x9c
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4658      	mov	r0, fp
 8004cb2:	f005 fa5b 	bl	800a16c <__ssprint_r>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	f47f ae3c 	bne.w	8004934 <_svfprintf_r+0x1f4>
 8004cbc:	3d10      	subs	r5, #16
 8004cbe:	2d10      	cmp	r5, #16
 8004cc0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004cc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004cc4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004cc8:	dce7      	bgt.n	8004c9a <_svfprintf_r+0x55a>
 8004cca:	4614      	mov	r4, r2
 8004ccc:	3301      	adds	r3, #1
 8004cce:	442c      	add	r4, r5
 8004cd0:	2b07      	cmp	r3, #7
 8004cd2:	9429      	str	r4, [sp, #164]	; 0xa4
 8004cd4:	9328      	str	r3, [sp, #160]	; 0xa0
 8004cd6:	f8c9 7000 	str.w	r7, [r9]
 8004cda:	f8c9 5004 	str.w	r5, [r9, #4]
 8004cde:	dd08      	ble.n	8004cf2 <_svfprintf_r+0x5b2>
 8004ce0:	aa27      	add	r2, sp, #156	; 0x9c
 8004ce2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ce4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004ce6:	f005 fa41 	bl	800a16c <__ssprint_r>
 8004cea:	2800      	cmp	r0, #0
 8004cec:	f47f ae22 	bne.w	8004934 <_svfprintf_r+0x1f4>
 8004cf0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cf6:	9908      	ldr	r1, [sp, #32]
 8004cf8:	428a      	cmp	r2, r1
 8004cfa:	bfac      	ite	ge
 8004cfc:	189b      	addge	r3, r3, r2
 8004cfe:	185b      	addlt	r3, r3, r1
 8004d00:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d02:	2c00      	cmp	r4, #0
 8004d04:	f040 82df 	bne.w	80052c6 <_svfprintf_r+0xb86>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9328      	str	r3, [sp, #160]	; 0xa0
 8004d0c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004d10:	e53d      	b.n	800478e <_svfprintf_r+0x4e>
 8004d12:	9311      	str	r3, [sp, #68]	; 0x44
 8004d14:	46ab      	mov	fp, r5
 8004d16:	2a00      	cmp	r2, #0
 8004d18:	f041 806a 	bne.w	8005df0 <_svfprintf_r+0x16b0>
 8004d1c:	9b07      	ldr	r3, [sp, #28]
 8004d1e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004d20:	071a      	lsls	r2, r3, #28
 8004d22:	f107 0707 	add.w	r7, r7, #7
 8004d26:	f140 8576 	bpl.w	8005816 <_svfprintf_r+0x10d6>
 8004d2a:	f027 0307 	bic.w	r3, r7, #7
 8004d2e:	ed93 7b00 	vldr	d7, [r3]
 8004d32:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004d36:	f103 0208 	add.w	r2, r3, #8
 8004d3a:	920e      	str	r2, [sp, #56]	; 0x38
 8004d3c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8004d40:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8004d44:	911a      	str	r1, [sp, #104]	; 0x68
 8004d46:	931b      	str	r3, [sp, #108]	; 0x6c
 8004d48:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8004d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d50:	4620      	mov	r0, r4
 8004d52:	4629      	mov	r1, r5
 8004d54:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <_svfprintf_r+0x684>)
 8004d56:	f7ff fa3d 	bl	80041d4 <__aeabi_dcmpun>
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	f040 84da 	bne.w	8005714 <_svfprintf_r+0xfd4>
 8004d60:	f04f 32ff 	mov.w	r2, #4294967295
 8004d64:	4b17      	ldr	r3, [pc, #92]	; (8004dc4 <_svfprintf_r+0x684>)
 8004d66:	4620      	mov	r0, r4
 8004d68:	4629      	mov	r1, r5
 8004d6a:	f7ff fa15 	bl	8004198 <__aeabi_dcmple>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	f040 84d0 	bne.w	8005714 <_svfprintf_r+0xfd4>
 8004d74:	2200      	movs	r2, #0
 8004d76:	2300      	movs	r3, #0
 8004d78:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004d7c:	f7ff fa02 	bl	8004184 <__aeabi_dcmplt>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	f040 875a 	bne.w	8005c3a <_svfprintf_r+0x14fa>
 8004d86:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004d8a:	4e0f      	ldr	r6, [pc, #60]	; (8004dc8 <_svfprintf_r+0x688>)
 8004d8c:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <_svfprintf_r+0x68c>)
 8004d8e:	9907      	ldr	r1, [sp, #28]
 8004d90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004d94:	9107      	str	r1, [sp, #28]
 8004d96:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004d98:	2203      	movs	r2, #3
 8004d9a:	f04f 0b00 	mov.w	fp, #0
 8004d9e:	9208      	str	r2, [sp, #32]
 8004da0:	2947      	cmp	r1, #71	; 0x47
 8004da2:	bfd8      	it	le
 8004da4:	461e      	movle	r6, r3
 8004da6:	920d      	str	r2, [sp, #52]	; 0x34
 8004da8:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8004dac:	e69a      	b.n	8004ae4 <_svfprintf_r+0x3a4>
 8004dae:	9b07      	ldr	r3, [sp, #28]
 8004db0:	f043 0308 	orr.w	r3, r3, #8
 8004db4:	9307      	str	r3, [sp, #28]
 8004db6:	f898 3000 	ldrb.w	r3, [r8]
 8004dba:	e51b      	b.n	80047f4 <_svfprintf_r+0xb4>
 8004dbc:	0800ad08 	.word	0x0800ad08
 8004dc0:	0800acb4 	.word	0x0800acb4
 8004dc4:	7fefffff 	.word	0x7fefffff
 8004dc8:	0800acc8 	.word	0x0800acc8
 8004dcc:	0800acc4 	.word	0x0800acc4
 8004dd0:	9311      	str	r3, [sp, #68]	; 0x44
 8004dd2:	46ab      	mov	fp, r5
 8004dd4:	2a00      	cmp	r2, #0
 8004dd6:	f041 8017 	bne.w	8005e08 <_svfprintf_r+0x16c8>
 8004dda:	9b07      	ldr	r3, [sp, #28]
 8004ddc:	f043 0310 	orr.w	r3, r3, #16
 8004de0:	9307      	str	r3, [sp, #28]
 8004de2:	9a07      	ldr	r2, [sp, #28]
 8004de4:	f012 0320 	ands.w	r3, r2, #32
 8004de8:	f47f adba 	bne.w	8004960 <_svfprintf_r+0x220>
 8004dec:	9907      	ldr	r1, [sp, #28]
 8004dee:	f011 0210 	ands.w	r2, r1, #16
 8004df2:	f000 845b 	beq.w	80056ac <_svfprintf_r+0xf6c>
 8004df6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004df8:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004dfc:	f1bb 0f00 	cmp.w	fp, #0
 8004e00:	6804      	ldr	r4, [r0, #0]
 8004e02:	f100 0704 	add.w	r7, r0, #4
 8004e06:	f04f 0500 	mov.w	r5, #0
 8004e0a:	f2c0 851b 	blt.w	8005844 <_svfprintf_r+0x1104>
 8004e0e:	460a      	mov	r2, r1
 8004e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e14:	9207      	str	r2, [sp, #28]
 8004e16:	ea54 0205 	orrs.w	r2, r4, r5
 8004e1a:	970e      	str	r7, [sp, #56]	; 0x38
 8004e1c:	f000 813a 	beq.w	8005094 <_svfprintf_r+0x954>
 8004e20:	461f      	mov	r7, r3
 8004e22:	e5b3      	b.n	800498c <_svfprintf_r+0x24c>
 8004e24:	9311      	str	r3, [sp, #68]	; 0x44
 8004e26:	46ab      	mov	fp, r5
 8004e28:	2a00      	cmp	r2, #0
 8004e2a:	f040 87e9 	bne.w	8005e00 <_svfprintf_r+0x16c0>
 8004e2e:	9b07      	ldr	r3, [sp, #28]
 8004e30:	f043 0310 	orr.w	r3, r3, #16
 8004e34:	9307      	str	r3, [sp, #28]
 8004e36:	9a07      	ldr	r2, [sp, #28]
 8004e38:	f012 0320 	ands.w	r3, r2, #32
 8004e3c:	f000 832c 	beq.w	8005498 <_svfprintf_r+0xd58>
 8004e40:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004e42:	3707      	adds	r7, #7
 8004e44:	f027 0307 	bic.w	r3, r7, #7
 8004e48:	2700      	movs	r7, #0
 8004e4a:	f103 0108 	add.w	r1, r3, #8
 8004e4e:	45bb      	cmp	fp, r7
 8004e50:	910e      	str	r1, [sp, #56]	; 0x38
 8004e52:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004e56:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004e5a:	f2c0 8356 	blt.w	800550a <_svfprintf_r+0xdca>
 8004e5e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004e62:	9307      	str	r3, [sp, #28]
 8004e64:	ea54 0305 	orrs.w	r3, r4, r5
 8004e68:	f47f ae18 	bne.w	8004a9c <_svfprintf_r+0x35c>
 8004e6c:	f1bb 0f00 	cmp.w	fp, #0
 8004e70:	f000 80f5 	beq.w	800505e <_svfprintf_r+0x91e>
 8004e74:	2400      	movs	r4, #0
 8004e76:	ae44      	add	r6, sp, #272	; 0x110
 8004e78:	3430      	adds	r4, #48	; 0x30
 8004e7a:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8004e7e:	e627      	b.n	8004ad0 <_svfprintf_r+0x390>
 8004e80:	9311      	str	r3, [sp, #68]	; 0x44
 8004e82:	46ab      	mov	fp, r5
 8004e84:	2a00      	cmp	r2, #0
 8004e86:	f040 87b7 	bne.w	8005df8 <_svfprintf_r+0x16b8>
 8004e8a:	9b07      	ldr	r3, [sp, #28]
 8004e8c:	48af      	ldr	r0, [pc, #700]	; (800514c <_svfprintf_r+0xa0c>)
 8004e8e:	069d      	lsls	r5, r3, #26
 8004e90:	f140 80b5 	bpl.w	8004ffe <_svfprintf_r+0x8be>
 8004e94:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004e96:	3707      	adds	r7, #7
 8004e98:	f027 0307 	bic.w	r3, r7, #7
 8004e9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004ea0:	f103 0208 	add.w	r2, r3, #8
 8004ea4:	920e      	str	r2, [sp, #56]	; 0x38
 8004ea6:	9a07      	ldr	r2, [sp, #28]
 8004ea8:	f012 0701 	ands.w	r7, r2, #1
 8004eac:	f000 8239 	beq.w	8005322 <_svfprintf_r+0xbe2>
 8004eb0:	ea54 0305 	orrs.w	r3, r4, r5
 8004eb4:	f000 8504 	beq.w	80058c0 <_svfprintf_r+0x1180>
 8004eb8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8004ebc:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8004ec0:	2700      	movs	r7, #0
 8004ec2:	9a07      	ldr	r2, [sp, #28]
 8004ec4:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004ec8:	2330      	movs	r3, #48	; 0x30
 8004eca:	45bb      	cmp	fp, r7
 8004ecc:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8004ed0:	f042 0302 	orr.w	r3, r2, #2
 8004ed4:	f2c0 86b6 	blt.w	8005c44 <_svfprintf_r+0x1504>
 8004ed8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004edc:	f043 0302 	orr.w	r3, r3, #2
 8004ee0:	9307      	str	r3, [sp, #28]
 8004ee2:	ae34      	add	r6, sp, #208	; 0xd0
 8004ee4:	0923      	lsrs	r3, r4, #4
 8004ee6:	f004 010f 	and.w	r1, r4, #15
 8004eea:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8004eee:	092a      	lsrs	r2, r5, #4
 8004ef0:	461c      	mov	r4, r3
 8004ef2:	4615      	mov	r5, r2
 8004ef4:	5c43      	ldrb	r3, [r0, r1]
 8004ef6:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8004efa:	ea54 0305 	orrs.w	r3, r4, r5
 8004efe:	d1f1      	bne.n	8004ee4 <_svfprintf_r+0x7a4>
 8004f00:	e5e6      	b.n	8004ad0 <_svfprintf_r+0x390>
 8004f02:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004f04:	9311      	str	r3, [sp, #68]	; 0x44
 8004f06:	680a      	ldr	r2, [r1, #0]
 8004f08:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	460a      	mov	r2, r1
 8004f10:	461f      	mov	r7, r3
 8004f12:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004f16:	3204      	adds	r2, #4
 8004f18:	2301      	movs	r3, #1
 8004f1a:	9308      	str	r3, [sp, #32]
 8004f1c:	46bb      	mov	fp, r7
 8004f1e:	9713      	str	r7, [sp, #76]	; 0x4c
 8004f20:	920e      	str	r2, [sp, #56]	; 0x38
 8004f22:	930d      	str	r3, [sp, #52]	; 0x34
 8004f24:	ae2a      	add	r6, sp, #168	; 0xa8
 8004f26:	e5e1      	b.n	8004aec <_svfprintf_r+0x3ac>
 8004f28:	9311      	str	r3, [sp, #68]	; 0x44
 8004f2a:	46ab      	mov	fp, r5
 8004f2c:	2a00      	cmp	r2, #0
 8004f2e:	f43f ad93 	beq.w	8004a58 <_svfprintf_r+0x318>
 8004f32:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004f36:	e58f      	b.n	8004a58 <_svfprintf_r+0x318>
 8004f38:	9b07      	ldr	r3, [sp, #28]
 8004f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f3e:	9307      	str	r3, [sp, #28]
 8004f40:	f898 3000 	ldrb.w	r3, [r8]
 8004f44:	e456      	b.n	80047f4 <_svfprintf_r+0xb4>
 8004f46:	f898 3000 	ldrb.w	r3, [r8]
 8004f4a:	2900      	cmp	r1, #0
 8004f4c:	f47f ac52 	bne.w	80047f4 <_svfprintf_r+0xb4>
 8004f50:	2201      	movs	r2, #1
 8004f52:	2120      	movs	r1, #32
 8004f54:	e44e      	b.n	80047f4 <_svfprintf_r+0xb4>
 8004f56:	9b07      	ldr	r3, [sp, #28]
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	9307      	str	r3, [sp, #28]
 8004f5e:	f898 3000 	ldrb.w	r3, [r8]
 8004f62:	e447      	b.n	80047f4 <_svfprintf_r+0xb4>
 8004f64:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	930c      	str	r3, [sp, #48]	; 0x30
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	4623      	mov	r3, r4
 8004f70:	f103 0304 	add.w	r3, r3, #4
 8004f74:	f6ff aca0 	blt.w	80048b8 <_svfprintf_r+0x178>
 8004f78:	930e      	str	r3, [sp, #56]	; 0x38
 8004f7a:	f898 3000 	ldrb.w	r3, [r8]
 8004f7e:	e439      	b.n	80047f4 <_svfprintf_r+0xb4>
 8004f80:	f898 3000 	ldrb.w	r3, [r8]
 8004f84:	2201      	movs	r2, #1
 8004f86:	212b      	movs	r1, #43	; 0x2b
 8004f88:	e434      	b.n	80047f4 <_svfprintf_r+0xb4>
 8004f8a:	9b07      	ldr	r3, [sp, #28]
 8004f8c:	f043 0320 	orr.w	r3, r3, #32
 8004f90:	9307      	str	r3, [sp, #28]
 8004f92:	f898 3000 	ldrb.w	r3, [r8]
 8004f96:	e42d      	b.n	80047f4 <_svfprintf_r+0xb4>
 8004f98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f9a:	9311      	str	r3, [sp, #68]	; 0x44
 8004f9c:	6816      	ldr	r6, [r2, #0]
 8004f9e:	2400      	movs	r4, #0
 8004fa0:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 8004fa4:	1d17      	adds	r7, r2, #4
 8004fa6:	2e00      	cmp	r6, #0
 8004fa8:	f000 8621 	beq.w	8005bee <_svfprintf_r+0x14ae>
 8004fac:	2d00      	cmp	r5, #0
 8004fae:	f2c0 8566 	blt.w	8005a7e <_svfprintf_r+0x133e>
 8004fb2:	462a      	mov	r2, r5
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	f004 faca 	bl	8009550 <memchr>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	f000 866b 	beq.w	8005c98 <_svfprintf_r+0x1558>
 8004fc2:	1b83      	subs	r3, r0, r6
 8004fc4:	930d      	str	r3, [sp, #52]	; 0x34
 8004fc6:	46a3      	mov	fp, r4
 8004fc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004fcc:	970e      	str	r7, [sp, #56]	; 0x38
 8004fce:	9308      	str	r3, [sp, #32]
 8004fd0:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8004fd4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004fd8:	e584      	b.n	8004ae4 <_svfprintf_r+0x3a4>
 8004fda:	9311      	str	r3, [sp, #68]	; 0x44
 8004fdc:	46ab      	mov	fp, r5
 8004fde:	2a00      	cmp	r2, #0
 8004fe0:	f43f af29 	beq.w	8004e36 <_svfprintf_r+0x6f6>
 8004fe4:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004fe8:	e725      	b.n	8004e36 <_svfprintf_r+0x6f6>
 8004fea:	9311      	str	r3, [sp, #68]	; 0x44
 8004fec:	46ab      	mov	fp, r5
 8004fee:	2a00      	cmp	r2, #0
 8004ff0:	f040 8716 	bne.w	8005e20 <_svfprintf_r+0x16e0>
 8004ff4:	9b07      	ldr	r3, [sp, #28]
 8004ff6:	4856      	ldr	r0, [pc, #344]	; (8005150 <_svfprintf_r+0xa10>)
 8004ff8:	069d      	lsls	r5, r3, #26
 8004ffa:	f53f af4b 	bmi.w	8004e94 <_svfprintf_r+0x754>
 8004ffe:	9b07      	ldr	r3, [sp, #28]
 8005000:	06dc      	lsls	r4, r3, #27
 8005002:	f140 8440 	bpl.w	8005886 <_svfprintf_r+0x1146>
 8005006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005008:	4613      	mov	r3, r2
 800500a:	3304      	adds	r3, #4
 800500c:	6814      	ldr	r4, [r2, #0]
 800500e:	930e      	str	r3, [sp, #56]	; 0x38
 8005010:	2500      	movs	r5, #0
 8005012:	e748      	b.n	8004ea6 <_svfprintf_r+0x766>
 8005014:	f898 3000 	ldrb.w	r3, [r8]
 8005018:	2b6c      	cmp	r3, #108	; 0x6c
 800501a:	f000 84c4 	beq.w	80059a6 <_svfprintf_r+0x1266>
 800501e:	9807      	ldr	r0, [sp, #28]
 8005020:	f040 0010 	orr.w	r0, r0, #16
 8005024:	9007      	str	r0, [sp, #28]
 8005026:	f7ff bbe5 	b.w	80047f4 <_svfprintf_r+0xb4>
 800502a:	2a00      	cmp	r2, #0
 800502c:	f040 86f4 	bne.w	8005e18 <_svfprintf_r+0x16d8>
 8005030:	9b07      	ldr	r3, [sp, #28]
 8005032:	069b      	lsls	r3, r3, #26
 8005034:	f140 8357 	bpl.w	80056e6 <_svfprintf_r+0xfa6>
 8005038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800503a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800503c:	6813      	ldr	r3, [r2, #0]
 800503e:	17cd      	asrs	r5, r1, #31
 8005040:	4608      	mov	r0, r1
 8005042:	3204      	adds	r2, #4
 8005044:	4629      	mov	r1, r5
 8005046:	920e      	str	r2, [sp, #56]	; 0x38
 8005048:	e9c3 0100 	strd	r0, r1, [r3]
 800504c:	f7ff bb9f 	b.w	800478e <_svfprintf_r+0x4e>
 8005050:	483f      	ldr	r0, [pc, #252]	; (8005150 <_svfprintf_r+0xa10>)
 8005052:	9211      	str	r2, [sp, #68]	; 0x44
 8005054:	f1bb 0f00 	cmp.w	fp, #0
 8005058:	f040 8174 	bne.w	8005344 <_svfprintf_r+0xc04>
 800505c:	465f      	mov	r7, fp
 800505e:	f04f 0b00 	mov.w	fp, #0
 8005062:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8005066:	ae34      	add	r6, sp, #208	; 0xd0
 8005068:	e535      	b.n	8004ad6 <_svfprintf_r+0x396>
 800506a:	9311      	str	r3, [sp, #68]	; 0x44
 800506c:	2a00      	cmp	r2, #0
 800506e:	f040 86cf 	bne.w	8005e10 <_svfprintf_r+0x16d0>
 8005072:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005074:	2a00      	cmp	r2, #0
 8005076:	f43f ac56 	beq.w	8004926 <_svfprintf_r+0x1e6>
 800507a:	2300      	movs	r3, #0
 800507c:	2101      	movs	r1, #1
 800507e:	461f      	mov	r7, r3
 8005080:	9108      	str	r1, [sp, #32]
 8005082:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8005086:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800508a:	469b      	mov	fp, r3
 800508c:	9313      	str	r3, [sp, #76]	; 0x4c
 800508e:	910d      	str	r1, [sp, #52]	; 0x34
 8005090:	ae2a      	add	r6, sp, #168	; 0xa8
 8005092:	e52b      	b.n	8004aec <_svfprintf_r+0x3ac>
 8005094:	f1bb 0f00 	cmp.w	fp, #0
 8005098:	f000 8616 	beq.w	8005cc8 <_svfprintf_r+0x1588>
 800509c:	2700      	movs	r7, #0
 800509e:	2400      	movs	r4, #0
 80050a0:	2500      	movs	r5, #0
 80050a2:	e473      	b.n	800498c <_svfprintf_r+0x24c>
 80050a4:	482a      	ldr	r0, [pc, #168]	; (8005150 <_svfprintf_r+0xa10>)
 80050a6:	9307      	str	r3, [sp, #28]
 80050a8:	9211      	str	r2, [sp, #68]	; 0x44
 80050aa:	ea54 0305 	orrs.w	r3, r4, r5
 80050ae:	970e      	str	r7, [sp, #56]	; 0x38
 80050b0:	f04f 0700 	mov.w	r7, #0
 80050b4:	f47f af15 	bne.w	8004ee2 <_svfprintf_r+0x7a2>
 80050b8:	2400      	movs	r4, #0
 80050ba:	2500      	movs	r5, #0
 80050bc:	e711      	b.n	8004ee2 <_svfprintf_r+0x7a2>
 80050be:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80050c0:	e564      	b.n	8004b8c <_svfprintf_r+0x44c>
 80050c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050c4:	2b65      	cmp	r3, #101	; 0x65
 80050c6:	f340 80aa 	ble.w	800521e <_svfprintf_r+0xade>
 80050ca:	2200      	movs	r2, #0
 80050cc:	2300      	movs	r3, #0
 80050ce:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80050d2:	f7ff f84d 	bl	8004170 <__aeabi_dcmpeq>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	f000 8136 	beq.w	8005348 <_svfprintf_r+0xc08>
 80050dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80050de:	4a1d      	ldr	r2, [pc, #116]	; (8005154 <_svfprintf_r+0xa14>)
 80050e0:	f8c9 2000 	str.w	r2, [r9]
 80050e4:	3301      	adds	r3, #1
 80050e6:	3401      	adds	r4, #1
 80050e8:	2201      	movs	r2, #1
 80050ea:	2b07      	cmp	r3, #7
 80050ec:	9429      	str	r4, [sp, #164]	; 0xa4
 80050ee:	9328      	str	r3, [sp, #160]	; 0xa0
 80050f0:	f8c9 2004 	str.w	r2, [r9, #4]
 80050f4:	f300 83f0 	bgt.w	80058d8 <_svfprintf_r+0x1198>
 80050f8:	f109 0908 	add.w	r9, r9, #8
 80050fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005100:	4293      	cmp	r3, r2
 8005102:	db03      	blt.n	800510c <_svfprintf_r+0x9cc>
 8005104:	9b07      	ldr	r3, [sp, #28]
 8005106:	07db      	lsls	r3, r3, #31
 8005108:	f57f adb0 	bpl.w	8004c6c <_svfprintf_r+0x52c>
 800510c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800510e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005110:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005112:	f8c9 2000 	str.w	r2, [r9]
 8005116:	3301      	adds	r3, #1
 8005118:	440c      	add	r4, r1
 800511a:	2b07      	cmp	r3, #7
 800511c:	9429      	str	r4, [sp, #164]	; 0xa4
 800511e:	f8c9 1004 	str.w	r1, [r9, #4]
 8005122:	9328      	str	r3, [sp, #160]	; 0xa0
 8005124:	f300 8449 	bgt.w	80059ba <_svfprintf_r+0x127a>
 8005128:	f109 0908 	add.w	r9, r9, #8
 800512c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800512e:	1e5d      	subs	r5, r3, #1
 8005130:	2d00      	cmp	r5, #0
 8005132:	f77f ad9b 	ble.w	8004c6c <_svfprintf_r+0x52c>
 8005136:	4a08      	ldr	r2, [pc, #32]	; (8005158 <_svfprintf_r+0xa18>)
 8005138:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800513a:	920f      	str	r2, [sp, #60]	; 0x3c
 800513c:	2d10      	cmp	r5, #16
 800513e:	f340 81e9 	ble.w	8005514 <_svfprintf_r+0xdd4>
 8005142:	2610      	movs	r6, #16
 8005144:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005146:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800514a:	e00d      	b.n	8005168 <_svfprintf_r+0xa28>
 800514c:	0800acd4 	.word	0x0800acd4
 8005150:	0800ace8 	.word	0x0800ace8
 8005154:	0800ad04 	.word	0x0800ad04
 8005158:	0800acb4 	.word	0x0800acb4
 800515c:	f109 0908 	add.w	r9, r9, #8
 8005160:	3d10      	subs	r5, #16
 8005162:	2d10      	cmp	r5, #16
 8005164:	f340 81d6 	ble.w	8005514 <_svfprintf_r+0xdd4>
 8005168:	3301      	adds	r3, #1
 800516a:	3410      	adds	r4, #16
 800516c:	2b07      	cmp	r3, #7
 800516e:	9429      	str	r4, [sp, #164]	; 0xa4
 8005170:	9328      	str	r3, [sp, #160]	; 0xa0
 8005172:	f8c9 a000 	str.w	sl, [r9]
 8005176:	f8c9 6004 	str.w	r6, [r9, #4]
 800517a:	ddef      	ble.n	800515c <_svfprintf_r+0xa1c>
 800517c:	aa27      	add	r2, sp, #156	; 0x9c
 800517e:	4659      	mov	r1, fp
 8005180:	4638      	mov	r0, r7
 8005182:	f004 fff3 	bl	800a16c <__ssprint_r>
 8005186:	2800      	cmp	r0, #0
 8005188:	f47f abd4 	bne.w	8004934 <_svfprintf_r+0x1f4>
 800518c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800518e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005190:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005194:	e7e4      	b.n	8005160 <_svfprintf_r+0xa20>
 8005196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005198:	9a08      	ldr	r2, [sp, #32]
 800519a:	1a9f      	subs	r7, r3, r2
 800519c:	2f00      	cmp	r7, #0
 800519e:	f77f ad19 	ble.w	8004bd4 <_svfprintf_r+0x494>
 80051a2:	4abc      	ldr	r2, [pc, #752]	; (8005494 <_svfprintf_r+0xd54>)
 80051a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80051a6:	920f      	str	r2, [sp, #60]	; 0x3c
 80051a8:	2f10      	cmp	r7, #16
 80051aa:	dd2b      	ble.n	8005204 <_svfprintf_r+0xac4>
 80051ac:	464a      	mov	r2, r9
 80051ae:	4621      	mov	r1, r4
 80051b0:	46b9      	mov	r9, r7
 80051b2:	2510      	movs	r5, #16
 80051b4:	4637      	mov	r7, r6
 80051b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80051b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80051ba:	e006      	b.n	80051ca <_svfprintf_r+0xa8a>
 80051bc:	f1a9 0910 	sub.w	r9, r9, #16
 80051c0:	f1b9 0f10 	cmp.w	r9, #16
 80051c4:	f102 0208 	add.w	r2, r2, #8
 80051c8:	dd18      	ble.n	80051fc <_svfprintf_r+0xabc>
 80051ca:	3301      	adds	r3, #1
 80051cc:	3110      	adds	r1, #16
 80051ce:	2b07      	cmp	r3, #7
 80051d0:	9129      	str	r1, [sp, #164]	; 0xa4
 80051d2:	9328      	str	r3, [sp, #160]	; 0xa0
 80051d4:	f8c2 a000 	str.w	sl, [r2]
 80051d8:	6055      	str	r5, [r2, #4]
 80051da:	ddef      	ble.n	80051bc <_svfprintf_r+0xa7c>
 80051dc:	aa27      	add	r2, sp, #156	; 0x9c
 80051de:	4631      	mov	r1, r6
 80051e0:	4620      	mov	r0, r4
 80051e2:	f004 ffc3 	bl	800a16c <__ssprint_r>
 80051e6:	2800      	cmp	r0, #0
 80051e8:	f47f aba4 	bne.w	8004934 <_svfprintf_r+0x1f4>
 80051ec:	f1a9 0910 	sub.w	r9, r9, #16
 80051f0:	f1b9 0f10 	cmp.w	r9, #16
 80051f4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80051f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80051f8:	aa34      	add	r2, sp, #208	; 0xd0
 80051fa:	dce6      	bgt.n	80051ca <_svfprintf_r+0xa8a>
 80051fc:	463e      	mov	r6, r7
 80051fe:	460c      	mov	r4, r1
 8005200:	464f      	mov	r7, r9
 8005202:	4691      	mov	r9, r2
 8005204:	3301      	adds	r3, #1
 8005206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005208:	9328      	str	r3, [sp, #160]	; 0xa0
 800520a:	443c      	add	r4, r7
 800520c:	2b07      	cmp	r3, #7
 800520e:	9429      	str	r4, [sp, #164]	; 0xa4
 8005210:	e889 0084 	stmia.w	r9, {r2, r7}
 8005214:	f300 823d 	bgt.w	8005692 <_svfprintf_r+0xf52>
 8005218:	f109 0908 	add.w	r9, r9, #8
 800521c:	e4da      	b.n	8004bd4 <_svfprintf_r+0x494>
 800521e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005220:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8005222:	2b01      	cmp	r3, #1
 8005224:	f340 820a 	ble.w	800563c <_svfprintf_r+0xefc>
 8005228:	3501      	adds	r5, #1
 800522a:	3401      	adds	r4, #1
 800522c:	2301      	movs	r3, #1
 800522e:	2d07      	cmp	r5, #7
 8005230:	9429      	str	r4, [sp, #164]	; 0xa4
 8005232:	9528      	str	r5, [sp, #160]	; 0xa0
 8005234:	f8c9 6000 	str.w	r6, [r9]
 8005238:	f8c9 3004 	str.w	r3, [r9, #4]
 800523c:	f300 820f 	bgt.w	800565e <_svfprintf_r+0xf1e>
 8005240:	f109 0908 	add.w	r9, r9, #8
 8005244:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005246:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005248:	f8c9 3000 	str.w	r3, [r9]
 800524c:	3501      	adds	r5, #1
 800524e:	4414      	add	r4, r2
 8005250:	2d07      	cmp	r5, #7
 8005252:	9429      	str	r4, [sp, #164]	; 0xa4
 8005254:	9528      	str	r5, [sp, #160]	; 0xa0
 8005256:	f8c9 2004 	str.w	r2, [r9, #4]
 800525a:	f300 820d 	bgt.w	8005678 <_svfprintf_r+0xf38>
 800525e:	f109 0908 	add.w	r9, r9, #8
 8005262:	2300      	movs	r3, #0
 8005264:	2200      	movs	r2, #0
 8005266:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800526a:	f7fe ff81 	bl	8004170 <__aeabi_dcmpeq>
 800526e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005270:	2800      	cmp	r0, #0
 8005272:	f040 80c3 	bne.w	80053fc <_svfprintf_r+0xcbc>
 8005276:	3b01      	subs	r3, #1
 8005278:	3501      	adds	r5, #1
 800527a:	3601      	adds	r6, #1
 800527c:	441c      	add	r4, r3
 800527e:	2d07      	cmp	r5, #7
 8005280:	9528      	str	r5, [sp, #160]	; 0xa0
 8005282:	9429      	str	r4, [sp, #164]	; 0xa4
 8005284:	f8c9 6000 	str.w	r6, [r9]
 8005288:	f8c9 3004 	str.w	r3, [r9, #4]
 800528c:	f300 80f5 	bgt.w	800547a <_svfprintf_r+0xd3a>
 8005290:	f109 0908 	add.w	r9, r9, #8
 8005294:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005296:	f8c9 2004 	str.w	r2, [r9, #4]
 800529a:	3501      	adds	r5, #1
 800529c:	4414      	add	r4, r2
 800529e:	ab23      	add	r3, sp, #140	; 0x8c
 80052a0:	2d07      	cmp	r5, #7
 80052a2:	9429      	str	r4, [sp, #164]	; 0xa4
 80052a4:	9528      	str	r5, [sp, #160]	; 0xa0
 80052a6:	f8c9 3000 	str.w	r3, [r9]
 80052aa:	f77f acdd 	ble.w	8004c68 <_svfprintf_r+0x528>
 80052ae:	aa27      	add	r2, sp, #156	; 0x9c
 80052b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80052b4:	f004 ff5a 	bl	800a16c <__ssprint_r>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	f47f ab3b 	bne.w	8004934 <_svfprintf_r+0x1f4>
 80052be:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80052c0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80052c4:	e4d2      	b.n	8004c6c <_svfprintf_r+0x52c>
 80052c6:	aa27      	add	r2, sp, #156	; 0x9c
 80052c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80052cc:	f004 ff4e 	bl	800a16c <__ssprint_r>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f43f ad19 	beq.w	8004d08 <_svfprintf_r+0x5c8>
 80052d6:	f7ff bb2d 	b.w	8004934 <_svfprintf_r+0x1f4>
 80052da:	aa27      	add	r2, sp, #156	; 0x9c
 80052dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80052e0:	f004 ff44 	bl	800a16c <__ssprint_r>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	f47f ab25 	bne.w	8004934 <_svfprintf_r+0x1f4>
 80052ea:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80052ec:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80052f0:	e4a9      	b.n	8004c46 <_svfprintf_r+0x506>
 80052f2:	aa27      	add	r2, sp, #156	; 0x9c
 80052f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80052f8:	f004 ff38 	bl	800a16c <__ssprint_r>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	f47f ab19 	bne.w	8004934 <_svfprintf_r+0x1f4>
 8005302:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005304:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005308:	e450      	b.n	8004bac <_svfprintf_r+0x46c>
 800530a:	aa27      	add	r2, sp, #156	; 0x9c
 800530c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800530e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005310:	f004 ff2c 	bl	800a16c <__ssprint_r>
 8005314:	2800      	cmp	r0, #0
 8005316:	f47f ab0d 	bne.w	8004934 <_svfprintf_r+0x1f4>
 800531a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800531c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005320:	e454      	b.n	8004bcc <_svfprintf_r+0x48c>
 8005322:	f1bb 0f00 	cmp.w	fp, #0
 8005326:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800532a:	f2c0 82e1 	blt.w	80058f0 <_svfprintf_r+0x11b0>
 800532e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8005332:	9307      	str	r3, [sp, #28]
 8005334:	ea54 0305 	orrs.w	r3, r4, r5
 8005338:	f47f add3 	bne.w	8004ee2 <_svfprintf_r+0x7a2>
 800533c:	f1bb 0f00 	cmp.w	fp, #0
 8005340:	f43f ae8c 	beq.w	800505c <_svfprintf_r+0x91c>
 8005344:	2700      	movs	r7, #0
 8005346:	e6b7      	b.n	80050b8 <_svfprintf_r+0x978>
 8005348:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800534a:	2d00      	cmp	r5, #0
 800534c:	f340 82d3 	ble.w	80058f6 <_svfprintf_r+0x11b6>
 8005350:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005352:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005354:	4293      	cmp	r3, r2
 8005356:	bfa8      	it	ge
 8005358:	4613      	movge	r3, r2
 800535a:	2b00      	cmp	r3, #0
 800535c:	461d      	mov	r5, r3
 800535e:	dd0d      	ble.n	800537c <_svfprintf_r+0xc3c>
 8005360:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005362:	f8c9 6000 	str.w	r6, [r9]
 8005366:	3301      	adds	r3, #1
 8005368:	442c      	add	r4, r5
 800536a:	2b07      	cmp	r3, #7
 800536c:	9429      	str	r4, [sp, #164]	; 0xa4
 800536e:	f8c9 5004 	str.w	r5, [r9, #4]
 8005372:	9328      	str	r3, [sp, #160]	; 0xa0
 8005374:	f300 83ae 	bgt.w	8005ad4 <_svfprintf_r+0x1394>
 8005378:	f109 0908 	add.w	r9, r9, #8
 800537c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800537e:	2d00      	cmp	r5, #0
 8005380:	bfa8      	it	ge
 8005382:	1b5b      	subge	r3, r3, r5
 8005384:	2b00      	cmp	r3, #0
 8005386:	461d      	mov	r5, r3
 8005388:	f340 80f8 	ble.w	800557c <_svfprintf_r+0xe3c>
 800538c:	4a41      	ldr	r2, [pc, #260]	; (8005494 <_svfprintf_r+0xd54>)
 800538e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005390:	920f      	str	r2, [sp, #60]	; 0x3c
 8005392:	2d10      	cmp	r5, #16
 8005394:	f340 8285 	ble.w	80058a2 <_svfprintf_r+0x1162>
 8005398:	4622      	mov	r2, r4
 800539a:	2710      	movs	r7, #16
 800539c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80053a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80053a2:	e005      	b.n	80053b0 <_svfprintf_r+0xc70>
 80053a4:	f109 0908 	add.w	r9, r9, #8
 80053a8:	3d10      	subs	r5, #16
 80053aa:	2d10      	cmp	r5, #16
 80053ac:	f340 8278 	ble.w	80058a0 <_svfprintf_r+0x1160>
 80053b0:	3301      	adds	r3, #1
 80053b2:	3210      	adds	r2, #16
 80053b4:	2b07      	cmp	r3, #7
 80053b6:	9229      	str	r2, [sp, #164]	; 0xa4
 80053b8:	9328      	str	r3, [sp, #160]	; 0xa0
 80053ba:	f8c9 a000 	str.w	sl, [r9]
 80053be:	f8c9 7004 	str.w	r7, [r9, #4]
 80053c2:	ddef      	ble.n	80053a4 <_svfprintf_r+0xc64>
 80053c4:	aa27      	add	r2, sp, #156	; 0x9c
 80053c6:	4621      	mov	r1, r4
 80053c8:	4658      	mov	r0, fp
 80053ca:	f004 fecf 	bl	800a16c <__ssprint_r>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	f47f aab0 	bne.w	8004934 <_svfprintf_r+0x1f4>
 80053d4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80053d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80053d8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80053dc:	e7e4      	b.n	80053a8 <_svfprintf_r+0xc68>
 80053de:	aa27      	add	r2, sp, #156	; 0x9c
 80053e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80053e4:	f004 fec2 	bl	800a16c <__ssprint_r>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	f47f aaa3 	bne.w	8004934 <_svfprintf_r+0x1f4>
 80053ee:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80053f2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80053f4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80053f8:	f7ff bbc8 	b.w	8004b8c <_svfprintf_r+0x44c>
 80053fc:	1e5e      	subs	r6, r3, #1
 80053fe:	2e00      	cmp	r6, #0
 8005400:	f77f af48 	ble.w	8005294 <_svfprintf_r+0xb54>
 8005404:	4b23      	ldr	r3, [pc, #140]	; (8005494 <_svfprintf_r+0xd54>)
 8005406:	930f      	str	r3, [sp, #60]	; 0x3c
 8005408:	2e10      	cmp	r6, #16
 800540a:	dd2c      	ble.n	8005466 <_svfprintf_r+0xd26>
 800540c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8005410:	2710      	movs	r7, #16
 8005412:	46b0      	mov	r8, r6
 8005414:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005418:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800541a:	e006      	b.n	800542a <_svfprintf_r+0xcea>
 800541c:	f1a8 0810 	sub.w	r8, r8, #16
 8005420:	f1b8 0f10 	cmp.w	r8, #16
 8005424:	f109 0908 	add.w	r9, r9, #8
 8005428:	dd1a      	ble.n	8005460 <_svfprintf_r+0xd20>
 800542a:	3501      	adds	r5, #1
 800542c:	3410      	adds	r4, #16
 800542e:	2d07      	cmp	r5, #7
 8005430:	9429      	str	r4, [sp, #164]	; 0xa4
 8005432:	9528      	str	r5, [sp, #160]	; 0xa0
 8005434:	f8c9 a000 	str.w	sl, [r9]
 8005438:	f8c9 7004 	str.w	r7, [r9, #4]
 800543c:	ddee      	ble.n	800541c <_svfprintf_r+0xcdc>
 800543e:	aa27      	add	r2, sp, #156	; 0x9c
 8005440:	4631      	mov	r1, r6
 8005442:	4658      	mov	r0, fp
 8005444:	f004 fe92 	bl	800a16c <__ssprint_r>
 8005448:	2800      	cmp	r0, #0
 800544a:	f47f aa73 	bne.w	8004934 <_svfprintf_r+0x1f4>
 800544e:	f1a8 0810 	sub.w	r8, r8, #16
 8005452:	f1b8 0f10 	cmp.w	r8, #16
 8005456:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005458:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800545a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800545e:	dce4      	bgt.n	800542a <_svfprintf_r+0xcea>
 8005460:	4646      	mov	r6, r8
 8005462:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8005466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005468:	3501      	adds	r5, #1
 800546a:	4434      	add	r4, r6
 800546c:	2d07      	cmp	r5, #7
 800546e:	9429      	str	r4, [sp, #164]	; 0xa4
 8005470:	9528      	str	r5, [sp, #160]	; 0xa0
 8005472:	e889 0048 	stmia.w	r9, {r3, r6}
 8005476:	f77f af0b 	ble.w	8005290 <_svfprintf_r+0xb50>
 800547a:	aa27      	add	r2, sp, #156	; 0x9c
 800547c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800547e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005480:	f004 fe74 	bl	800a16c <__ssprint_r>
 8005484:	2800      	cmp	r0, #0
 8005486:	f47f aa55 	bne.w	8004934 <_svfprintf_r+0x1f4>
 800548a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800548c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800548e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005492:	e6ff      	b.n	8005294 <_svfprintf_r+0xb54>
 8005494:	0800acb4 	.word	0x0800acb4
 8005498:	9907      	ldr	r1, [sp, #28]
 800549a:	f011 0210 	ands.w	r2, r1, #16
 800549e:	f000 81d5 	beq.w	800584c <_svfprintf_r+0x110c>
 80054a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80054a4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80054a8:	f1bb 0f00 	cmp.w	fp, #0
 80054ac:	6804      	ldr	r4, [r0, #0]
 80054ae:	f100 0704 	add.w	r7, r0, #4
 80054b2:	f04f 0500 	mov.w	r5, #0
 80054b6:	db26      	blt.n	8005506 <_svfprintf_r+0xdc6>
 80054b8:	460a      	mov	r2, r1
 80054ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054be:	9207      	str	r2, [sp, #28]
 80054c0:	ea54 0205 	orrs.w	r2, r4, r5
 80054c4:	970e      	str	r7, [sp, #56]	; 0x38
 80054c6:	461f      	mov	r7, r3
 80054c8:	f47f aae8 	bne.w	8004a9c <_svfprintf_r+0x35c>
 80054cc:	e4ce      	b.n	8004e6c <_svfprintf_r+0x72c>
 80054ce:	9b07      	ldr	r3, [sp, #28]
 80054d0:	06d8      	lsls	r0, r3, #27
 80054d2:	d42a      	bmi.n	800552a <_svfprintf_r+0xdea>
 80054d4:	9b07      	ldr	r3, [sp, #28]
 80054d6:	0659      	lsls	r1, r3, #25
 80054d8:	d527      	bpl.n	800552a <_svfprintf_r+0xdea>
 80054da:	990e      	ldr	r1, [sp, #56]	; 0x38
 80054dc:	f9b1 4000 	ldrsh.w	r4, [r1]
 80054e0:	3104      	adds	r1, #4
 80054e2:	17e5      	asrs	r5, r4, #31
 80054e4:	4622      	mov	r2, r4
 80054e6:	462b      	mov	r3, r5
 80054e8:	910e      	str	r1, [sp, #56]	; 0x38
 80054ea:	f7ff bac4 	b.w	8004a76 <_svfprintf_r+0x336>
 80054ee:	990e      	ldr	r1, [sp, #56]	; 0x38
 80054f0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80054f4:	f1bb 0f00 	cmp.w	fp, #0
 80054f8:	680c      	ldr	r4, [r1, #0]
 80054fa:	f101 0704 	add.w	r7, r1, #4
 80054fe:	f04f 0500 	mov.w	r5, #0
 8005502:	f280 824e 	bge.w	80059a2 <_svfprintf_r+0x1262>
 8005506:	970e      	str	r7, [sp, #56]	; 0x38
 8005508:	461f      	mov	r7, r3
 800550a:	ea54 0305 	orrs.w	r3, r4, r5
 800550e:	f47f aac5 	bne.w	8004a9c <_svfprintf_r+0x35c>
 8005512:	e4b0      	b.n	8004e76 <_svfprintf_r+0x736>
 8005514:	3301      	adds	r3, #1
 8005516:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005518:	9328      	str	r3, [sp, #160]	; 0xa0
 800551a:	442c      	add	r4, r5
 800551c:	2b07      	cmp	r3, #7
 800551e:	9429      	str	r4, [sp, #164]	; 0xa4
 8005520:	e889 0024 	stmia.w	r9, {r2, r5}
 8005524:	f77f aba0 	ble.w	8004c68 <_svfprintf_r+0x528>
 8005528:	e6c1      	b.n	80052ae <_svfprintf_r+0xb6e>
 800552a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800552c:	6814      	ldr	r4, [r2, #0]
 800552e:	4613      	mov	r3, r2
 8005530:	3304      	adds	r3, #4
 8005532:	17e5      	asrs	r5, r4, #31
 8005534:	4622      	mov	r2, r4
 8005536:	930e      	str	r3, [sp, #56]	; 0x38
 8005538:	2a00      	cmp	r2, #0
 800553a:	462b      	mov	r3, r5
 800553c:	f173 0300 	sbcs.w	r3, r3, #0
 8005540:	f6bf aa9e 	bge.w	8004a80 <_svfprintf_r+0x340>
 8005544:	4264      	negs	r4, r4
 8005546:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800554a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800554e:	f1bb 0f00 	cmp.w	fp, #0
 8005552:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005556:	f6ff aaa1 	blt.w	8004a9c <_svfprintf_r+0x35c>
 800555a:	9b07      	ldr	r3, [sp, #28]
 800555c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005560:	9307      	str	r3, [sp, #28]
 8005562:	f7ff ba9b 	b.w	8004a9c <_svfprintf_r+0x35c>
 8005566:	aa27      	add	r2, sp, #156	; 0x9c
 8005568:	9909      	ldr	r1, [sp, #36]	; 0x24
 800556a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800556c:	f004 fdfe 	bl	800a16c <__ssprint_r>
 8005570:	2800      	cmp	r0, #0
 8005572:	f47f a9df 	bne.w	8004934 <_svfprintf_r+0x1f4>
 8005576:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005578:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800557c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800557e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005580:	4432      	add	r2, r6
 8005582:	4617      	mov	r7, r2
 8005584:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005586:	4293      	cmp	r3, r2
 8005588:	db47      	blt.n	800561a <_svfprintf_r+0xeda>
 800558a:	9a07      	ldr	r2, [sp, #28]
 800558c:	07d5      	lsls	r5, r2, #31
 800558e:	d444      	bmi.n	800561a <_svfprintf_r+0xeda>
 8005590:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005592:	440e      	add	r6, r1
 8005594:	1bf5      	subs	r5, r6, r7
 8005596:	1acb      	subs	r3, r1, r3
 8005598:	429d      	cmp	r5, r3
 800559a:	bfa8      	it	ge
 800559c:	461d      	movge	r5, r3
 800559e:	2d00      	cmp	r5, #0
 80055a0:	462e      	mov	r6, r5
 80055a2:	dd0d      	ble.n	80055c0 <_svfprintf_r+0xe80>
 80055a4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80055a6:	f8c9 7000 	str.w	r7, [r9]
 80055aa:	3201      	adds	r2, #1
 80055ac:	442c      	add	r4, r5
 80055ae:	2a07      	cmp	r2, #7
 80055b0:	9429      	str	r4, [sp, #164]	; 0xa4
 80055b2:	f8c9 5004 	str.w	r5, [r9, #4]
 80055b6:	9228      	str	r2, [sp, #160]	; 0xa0
 80055b8:	f300 830a 	bgt.w	8005bd0 <_svfprintf_r+0x1490>
 80055bc:	f109 0908 	add.w	r9, r9, #8
 80055c0:	2e00      	cmp	r6, #0
 80055c2:	bfac      	ite	ge
 80055c4:	1b9d      	subge	r5, r3, r6
 80055c6:	461d      	movlt	r5, r3
 80055c8:	2d00      	cmp	r5, #0
 80055ca:	f77f ab4f 	ble.w	8004c6c <_svfprintf_r+0x52c>
 80055ce:	4abb      	ldr	r2, [pc, #748]	; (80058bc <_svfprintf_r+0x117c>)
 80055d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80055d2:	920f      	str	r2, [sp, #60]	; 0x3c
 80055d4:	2d10      	cmp	r5, #16
 80055d6:	dd9d      	ble.n	8005514 <_svfprintf_r+0xdd4>
 80055d8:	2610      	movs	r6, #16
 80055da:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80055dc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80055e0:	e004      	b.n	80055ec <_svfprintf_r+0xeac>
 80055e2:	f109 0908 	add.w	r9, r9, #8
 80055e6:	3d10      	subs	r5, #16
 80055e8:	2d10      	cmp	r5, #16
 80055ea:	dd93      	ble.n	8005514 <_svfprintf_r+0xdd4>
 80055ec:	3301      	adds	r3, #1
 80055ee:	3410      	adds	r4, #16
 80055f0:	2b07      	cmp	r3, #7
 80055f2:	9429      	str	r4, [sp, #164]	; 0xa4
 80055f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80055f6:	f8c9 a000 	str.w	sl, [r9]
 80055fa:	f8c9 6004 	str.w	r6, [r9, #4]
 80055fe:	ddf0      	ble.n	80055e2 <_svfprintf_r+0xea2>
 8005600:	aa27      	add	r2, sp, #156	; 0x9c
 8005602:	4659      	mov	r1, fp
 8005604:	4638      	mov	r0, r7
 8005606:	f004 fdb1 	bl	800a16c <__ssprint_r>
 800560a:	2800      	cmp	r0, #0
 800560c:	f47f a992 	bne.w	8004934 <_svfprintf_r+0x1f4>
 8005610:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005612:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005614:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005618:	e7e5      	b.n	80055e6 <_svfprintf_r+0xea6>
 800561a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800561c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800561e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005620:	f8c9 1000 	str.w	r1, [r9]
 8005624:	3201      	adds	r2, #1
 8005626:	4404      	add	r4, r0
 8005628:	2a07      	cmp	r2, #7
 800562a:	9429      	str	r4, [sp, #164]	; 0xa4
 800562c:	f8c9 0004 	str.w	r0, [r9, #4]
 8005630:	9228      	str	r2, [sp, #160]	; 0xa0
 8005632:	f300 82b9 	bgt.w	8005ba8 <_svfprintf_r+0x1468>
 8005636:	f109 0908 	add.w	r9, r9, #8
 800563a:	e7a9      	b.n	8005590 <_svfprintf_r+0xe50>
 800563c:	9b07      	ldr	r3, [sp, #28]
 800563e:	07d8      	lsls	r0, r3, #31
 8005640:	f53f adf2 	bmi.w	8005228 <_svfprintf_r+0xae8>
 8005644:	3501      	adds	r5, #1
 8005646:	3401      	adds	r4, #1
 8005648:	2301      	movs	r3, #1
 800564a:	2d07      	cmp	r5, #7
 800564c:	9429      	str	r4, [sp, #164]	; 0xa4
 800564e:	9528      	str	r5, [sp, #160]	; 0xa0
 8005650:	f8c9 6000 	str.w	r6, [r9]
 8005654:	f8c9 3004 	str.w	r3, [r9, #4]
 8005658:	f77f ae1a 	ble.w	8005290 <_svfprintf_r+0xb50>
 800565c:	e70d      	b.n	800547a <_svfprintf_r+0xd3a>
 800565e:	aa27      	add	r2, sp, #156	; 0x9c
 8005660:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005662:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005664:	f004 fd82 	bl	800a16c <__ssprint_r>
 8005668:	2800      	cmp	r0, #0
 800566a:	f47f a963 	bne.w	8004934 <_svfprintf_r+0x1f4>
 800566e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005670:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8005672:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005676:	e5e5      	b.n	8005244 <_svfprintf_r+0xb04>
 8005678:	aa27      	add	r2, sp, #156	; 0x9c
 800567a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800567c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800567e:	f004 fd75 	bl	800a16c <__ssprint_r>
 8005682:	2800      	cmp	r0, #0
 8005684:	f47f a956 	bne.w	8004934 <_svfprintf_r+0x1f4>
 8005688:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800568a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800568c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005690:	e5e7      	b.n	8005262 <_svfprintf_r+0xb22>
 8005692:	aa27      	add	r2, sp, #156	; 0x9c
 8005694:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005696:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005698:	f004 fd68 	bl	800a16c <__ssprint_r>
 800569c:	2800      	cmp	r0, #0
 800569e:	f47f a949 	bne.w	8004934 <_svfprintf_r+0x1f4>
 80056a2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80056a4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80056a8:	f7ff ba94 	b.w	8004bd4 <_svfprintf_r+0x494>
 80056ac:	9907      	ldr	r1, [sp, #28]
 80056ae:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80056b2:	f000 80bb 	beq.w	800582c <_svfprintf_r+0x10ec>
 80056b6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80056b8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80056bc:	4603      	mov	r3, r0
 80056be:	f1bb 0f00 	cmp.w	fp, #0
 80056c2:	f103 0304 	add.w	r3, r3, #4
 80056c6:	8804      	ldrh	r4, [r0, #0]
 80056c8:	f04f 0500 	mov.w	r5, #0
 80056cc:	f2c0 81c5 	blt.w	8005a5a <_svfprintf_r+0x131a>
 80056d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80056d4:	9107      	str	r1, [sp, #28]
 80056d6:	ea54 0105 	orrs.w	r1, r4, r5
 80056da:	930e      	str	r3, [sp, #56]	; 0x38
 80056dc:	f43f acda 	beq.w	8005094 <_svfprintf_r+0x954>
 80056e0:	4617      	mov	r7, r2
 80056e2:	f7ff b953 	b.w	800498c <_svfprintf_r+0x24c>
 80056e6:	9b07      	ldr	r3, [sp, #28]
 80056e8:	06df      	lsls	r7, r3, #27
 80056ea:	d40b      	bmi.n	8005704 <_svfprintf_r+0xfc4>
 80056ec:	9b07      	ldr	r3, [sp, #28]
 80056ee:	065e      	lsls	r6, r3, #25
 80056f0:	d508      	bpl.n	8005704 <_svfprintf_r+0xfc4>
 80056f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056f4:	6813      	ldr	r3, [r2, #0]
 80056f6:	3204      	adds	r2, #4
 80056f8:	920e      	str	r2, [sp, #56]	; 0x38
 80056fa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80056fe:	801a      	strh	r2, [r3, #0]
 8005700:	f7ff b845 	b.w	800478e <_svfprintf_r+0x4e>
 8005704:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005706:	6813      	ldr	r3, [r2, #0]
 8005708:	3204      	adds	r2, #4
 800570a:	920e      	str	r2, [sp, #56]	; 0x38
 800570c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	f7ff b83d 	b.w	800478e <_svfprintf_r+0x4e>
 8005714:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	f7fe fd5a 	bl	80041d4 <__aeabi_dcmpun>
 8005720:	2800      	cmp	r0, #0
 8005722:	f040 8305 	bne.w	8005d30 <_svfprintf_r+0x15f0>
 8005726:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005728:	f1bb 3fff 	cmp.w	fp, #4294967295
 800572c:	f023 0720 	bic.w	r7, r3, #32
 8005730:	f000 826c 	beq.w	8005c0c <_svfprintf_r+0x14cc>
 8005734:	2f47      	cmp	r7, #71	; 0x47
 8005736:	f000 8187 	beq.w	8005a48 <_svfprintf_r+0x1308>
 800573a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800573c:	9a07      	ldr	r2, [sp, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005744:	920f      	str	r2, [sp, #60]	; 0x3c
 8005746:	f2c0 8280 	blt.w	8005c4a <_svfprintf_r+0x150a>
 800574a:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 800574e:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8005752:	2300      	movs	r3, #0
 8005754:	9308      	str	r3, [sp, #32]
 8005756:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005758:	2b66      	cmp	r3, #102	; 0x66
 800575a:	f000 825a 	beq.w	8005c12 <_svfprintf_r+0x14d2>
 800575e:	2b46      	cmp	r3, #70	; 0x46
 8005760:	f000 8147 	beq.w	80059f2 <_svfprintf_r+0x12b2>
 8005764:	2f45      	cmp	r7, #69	; 0x45
 8005766:	bf0c      	ite	eq
 8005768:	f10b 0501 	addeq.w	r5, fp, #1
 800576c:	465d      	movne	r5, fp
 800576e:	a825      	add	r0, sp, #148	; 0x94
 8005770:	a922      	add	r1, sp, #136	; 0x88
 8005772:	aa21      	add	r2, sp, #132	; 0x84
 8005774:	2302      	movs	r3, #2
 8005776:	9004      	str	r0, [sp, #16]
 8005778:	9202      	str	r2, [sp, #8]
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	9501      	str	r5, [sp, #4]
 800577e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005782:	9103      	str	r1, [sp, #12]
 8005784:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005786:	f002 f847 	bl	8007818 <_dtoa_r>
 800578a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800578c:	2b67      	cmp	r3, #103	; 0x67
 800578e:	4606      	mov	r6, r0
 8005790:	f040 8271 	bne.w	8005c76 <_svfprintf_r+0x1536>
 8005794:	9b07      	ldr	r3, [sp, #28]
 8005796:	07da      	lsls	r2, r3, #31
 8005798:	f140 82bf 	bpl.w	8005d1a <_svfprintf_r+0x15da>
 800579c:	1974      	adds	r4, r6, r5
 800579e:	2200      	movs	r2, #0
 80057a0:	2300      	movs	r3, #0
 80057a2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80057a6:	f7fe fce3 	bl	8004170 <__aeabi_dcmpeq>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	f040 8190 	bne.w	8005ad0 <_svfprintf_r+0x1390>
 80057b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80057b2:	429c      	cmp	r4, r3
 80057b4:	d906      	bls.n	80057c4 <_svfprintf_r+0x1084>
 80057b6:	2130      	movs	r1, #48	; 0x30
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	9225      	str	r2, [sp, #148]	; 0x94
 80057bc:	7019      	strb	r1, [r3, #0]
 80057be:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80057c0:	429c      	cmp	r4, r3
 80057c2:	d8f9      	bhi.n	80057b8 <_svfprintf_r+0x1078>
 80057c4:	1b9b      	subs	r3, r3, r6
 80057c6:	2f47      	cmp	r7, #71	; 0x47
 80057c8:	9312      	str	r3, [sp, #72]	; 0x48
 80057ca:	f000 817a 	beq.w	8005ac2 <_svfprintf_r+0x1382>
 80057ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057d0:	2b65      	cmp	r3, #101	; 0x65
 80057d2:	f340 825f 	ble.w	8005c94 <_svfprintf_r+0x1554>
 80057d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057d8:	2b66      	cmp	r3, #102	; 0x66
 80057da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80057de:	f000 8266 	beq.w	8005cae <_svfprintf_r+0x156e>
 80057e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80057e6:	428a      	cmp	r2, r1
 80057e8:	f2c0 8238 	blt.w	8005c5c <_svfprintf_r+0x151c>
 80057ec:	9b07      	ldr	r3, [sp, #28]
 80057ee:	07d9      	lsls	r1, r3, #31
 80057f0:	f100 8295 	bmi.w	8005d1e <_svfprintf_r+0x15de>
 80057f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80057f8:	920d      	str	r2, [sp, #52]	; 0x34
 80057fa:	2267      	movs	r2, #103	; 0x67
 80057fc:	9211      	str	r2, [sp, #68]	; 0x44
 80057fe:	9a08      	ldr	r2, [sp, #32]
 8005800:	2a00      	cmp	r2, #0
 8005802:	f040 8132 	bne.w	8005a6a <_svfprintf_r+0x132a>
 8005806:	9308      	str	r3, [sp, #32]
 8005808:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800580a:	9307      	str	r3, [sp, #28]
 800580c:	4693      	mov	fp, r2
 800580e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005812:	f7ff b967 	b.w	8004ae4 <_svfprintf_r+0x3a4>
 8005816:	f027 0707 	bic.w	r7, r7, #7
 800581a:	ed97 7b00 	vldr	d7, [r7]
 800581e:	f107 0308 	add.w	r3, r7, #8
 8005822:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005826:	930e      	str	r3, [sp, #56]	; 0x38
 8005828:	f7ff ba88 	b.w	8004d3c <_svfprintf_r+0x5fc>
 800582c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800582e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005832:	f1bb 0f00 	cmp.w	fp, #0
 8005836:	680c      	ldr	r4, [r1, #0]
 8005838:	f101 0704 	add.w	r7, r1, #4
 800583c:	f04f 0500 	mov.w	r5, #0
 8005840:	f280 80ac 	bge.w	800599c <_svfprintf_r+0x125c>
 8005844:	970e      	str	r7, [sp, #56]	; 0x38
 8005846:	2700      	movs	r7, #0
 8005848:	f7ff b8a0 	b.w	800498c <_svfprintf_r+0x24c>
 800584c:	9907      	ldr	r1, [sp, #28]
 800584e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8005852:	f43f ae4c 	beq.w	80054ee <_svfprintf_r+0xdae>
 8005856:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005858:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800585c:	4603      	mov	r3, r0
 800585e:	f1bb 0f00 	cmp.w	fp, #0
 8005862:	f103 0304 	add.w	r3, r3, #4
 8005866:	8804      	ldrh	r4, [r0, #0]
 8005868:	f04f 0500 	mov.w	r5, #0
 800586c:	f2c0 80f2 	blt.w	8005a54 <_svfprintf_r+0x1314>
 8005870:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005874:	9107      	str	r1, [sp, #28]
 8005876:	ea54 0105 	orrs.w	r1, r4, r5
 800587a:	930e      	str	r3, [sp, #56]	; 0x38
 800587c:	4617      	mov	r7, r2
 800587e:	f47f a90d 	bne.w	8004a9c <_svfprintf_r+0x35c>
 8005882:	f7ff baf3 	b.w	8004e6c <_svfprintf_r+0x72c>
 8005886:	9b07      	ldr	r3, [sp, #28]
 8005888:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800588a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800588e:	4613      	mov	r3, r2
 8005890:	f000 80e5 	beq.w	8005a5e <_svfprintf_r+0x131e>
 8005894:	3304      	adds	r3, #4
 8005896:	8814      	ldrh	r4, [r2, #0]
 8005898:	930e      	str	r3, [sp, #56]	; 0x38
 800589a:	2500      	movs	r5, #0
 800589c:	f7ff bb03 	b.w	8004ea6 <_svfprintf_r+0x766>
 80058a0:	4614      	mov	r4, r2
 80058a2:	3301      	adds	r3, #1
 80058a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058a6:	9328      	str	r3, [sp, #160]	; 0xa0
 80058a8:	442c      	add	r4, r5
 80058aa:	2b07      	cmp	r3, #7
 80058ac:	9429      	str	r4, [sp, #164]	; 0xa4
 80058ae:	e889 0024 	stmia.w	r9, {r2, r5}
 80058b2:	f73f ae58 	bgt.w	8005566 <_svfprintf_r+0xe26>
 80058b6:	f109 0908 	add.w	r9, r9, #8
 80058ba:	e65f      	b.n	800557c <_svfprintf_r+0xe3c>
 80058bc:	0800acb4 	.word	0x0800acb4
 80058c0:	2700      	movs	r7, #0
 80058c2:	45bb      	cmp	fp, r7
 80058c4:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80058c8:	f6ff abf6 	blt.w	80050b8 <_svfprintf_r+0x978>
 80058cc:	9b07      	ldr	r3, [sp, #28]
 80058ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058d2:	9307      	str	r3, [sp, #28]
 80058d4:	f7ff bbbe 	b.w	8005054 <_svfprintf_r+0x914>
 80058d8:	aa27      	add	r2, sp, #156	; 0x9c
 80058da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80058de:	f004 fc45 	bl	800a16c <__ssprint_r>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	f47f a826 	bne.w	8004934 <_svfprintf_r+0x1f4>
 80058e8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80058ea:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80058ee:	e405      	b.n	80050fc <_svfprintf_r+0x9bc>
 80058f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80058f2:	f7ff bbda 	b.w	80050aa <_svfprintf_r+0x96a>
 80058f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80058f8:	4ab2      	ldr	r2, [pc, #712]	; (8005bc4 <_svfprintf_r+0x1484>)
 80058fa:	f8c9 2000 	str.w	r2, [r9]
 80058fe:	3301      	adds	r3, #1
 8005900:	3401      	adds	r4, #1
 8005902:	2201      	movs	r2, #1
 8005904:	2b07      	cmp	r3, #7
 8005906:	9429      	str	r4, [sp, #164]	; 0xa4
 8005908:	9328      	str	r3, [sp, #160]	; 0xa0
 800590a:	f8c9 2004 	str.w	r2, [r9, #4]
 800590e:	f300 808e 	bgt.w	8005a2e <_svfprintf_r+0x12ee>
 8005912:	f109 0908 	add.w	r9, r9, #8
 8005916:	b92d      	cbnz	r5, 8005924 <_svfprintf_r+0x11e4>
 8005918:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800591a:	b91b      	cbnz	r3, 8005924 <_svfprintf_r+0x11e4>
 800591c:	9b07      	ldr	r3, [sp, #28]
 800591e:	07df      	lsls	r7, r3, #31
 8005920:	f57f a9a4 	bpl.w	8004c6c <_svfprintf_r+0x52c>
 8005924:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005926:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005928:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800592a:	f8c9 2000 	str.w	r2, [r9]
 800592e:	3301      	adds	r3, #1
 8005930:	440c      	add	r4, r1
 8005932:	2b07      	cmp	r3, #7
 8005934:	9429      	str	r4, [sp, #164]	; 0xa4
 8005936:	f8c9 1004 	str.w	r1, [r9, #4]
 800593a:	9328      	str	r3, [sp, #160]	; 0xa0
 800593c:	f300 81d3 	bgt.w	8005ce6 <_svfprintf_r+0x15a6>
 8005940:	f109 0908 	add.w	r9, r9, #8
 8005944:	426d      	negs	r5, r5
 8005946:	2d00      	cmp	r5, #0
 8005948:	f340 80ad 	ble.w	8005aa6 <_svfprintf_r+0x1366>
 800594c:	4a9e      	ldr	r2, [pc, #632]	; (8005bc8 <_svfprintf_r+0x1488>)
 800594e:	920f      	str	r2, [sp, #60]	; 0x3c
 8005950:	2d10      	cmp	r5, #16
 8005952:	f340 80cc 	ble.w	8005aee <_svfprintf_r+0x13ae>
 8005956:	4622      	mov	r2, r4
 8005958:	2710      	movs	r7, #16
 800595a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800595e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005960:	e005      	b.n	800596e <_svfprintf_r+0x122e>
 8005962:	f109 0908 	add.w	r9, r9, #8
 8005966:	3d10      	subs	r5, #16
 8005968:	2d10      	cmp	r5, #16
 800596a:	f340 80bf 	ble.w	8005aec <_svfprintf_r+0x13ac>
 800596e:	3301      	adds	r3, #1
 8005970:	3210      	adds	r2, #16
 8005972:	2b07      	cmp	r3, #7
 8005974:	9229      	str	r2, [sp, #164]	; 0xa4
 8005976:	9328      	str	r3, [sp, #160]	; 0xa0
 8005978:	f8c9 a000 	str.w	sl, [r9]
 800597c:	f8c9 7004 	str.w	r7, [r9, #4]
 8005980:	ddef      	ble.n	8005962 <_svfprintf_r+0x1222>
 8005982:	aa27      	add	r2, sp, #156	; 0x9c
 8005984:	4621      	mov	r1, r4
 8005986:	4658      	mov	r0, fp
 8005988:	f004 fbf0 	bl	800a16c <__ssprint_r>
 800598c:	2800      	cmp	r0, #0
 800598e:	f47e afd1 	bne.w	8004934 <_svfprintf_r+0x1f4>
 8005992:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005994:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005996:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800599a:	e7e4      	b.n	8005966 <_svfprintf_r+0x1226>
 800599c:	9a07      	ldr	r2, [sp, #28]
 800599e:	f7ff ba37 	b.w	8004e10 <_svfprintf_r+0x6d0>
 80059a2:	9a07      	ldr	r2, [sp, #28]
 80059a4:	e589      	b.n	80054ba <_svfprintf_r+0xd7a>
 80059a6:	9b07      	ldr	r3, [sp, #28]
 80059a8:	f043 0320 	orr.w	r3, r3, #32
 80059ac:	9307      	str	r3, [sp, #28]
 80059ae:	f108 0801 	add.w	r8, r8, #1
 80059b2:	f898 3000 	ldrb.w	r3, [r8]
 80059b6:	f7fe bf1d 	b.w	80047f4 <_svfprintf_r+0xb4>
 80059ba:	aa27      	add	r2, sp, #156	; 0x9c
 80059bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80059c0:	f004 fbd4 	bl	800a16c <__ssprint_r>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	f47e afb5 	bne.w	8004934 <_svfprintf_r+0x1f4>
 80059ca:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80059cc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80059d0:	f7ff bbac 	b.w	800512c <_svfprintf_r+0x9ec>
 80059d4:	2140      	movs	r1, #64	; 0x40
 80059d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80059d8:	f003 fae8 	bl	8008fac <_malloc_r>
 80059dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059de:	6010      	str	r0, [r2, #0]
 80059e0:	6110      	str	r0, [r2, #16]
 80059e2:	2800      	cmp	r0, #0
 80059e4:	f000 81f9 	beq.w	8005dda <_svfprintf_r+0x169a>
 80059e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059ea:	2340      	movs	r3, #64	; 0x40
 80059ec:	6153      	str	r3, [r2, #20]
 80059ee:	f7fe bebe 	b.w	800476e <_svfprintf_r+0x2e>
 80059f2:	a825      	add	r0, sp, #148	; 0x94
 80059f4:	a922      	add	r1, sp, #136	; 0x88
 80059f6:	aa21      	add	r2, sp, #132	; 0x84
 80059f8:	2303      	movs	r3, #3
 80059fa:	9004      	str	r0, [sp, #16]
 80059fc:	9202      	str	r2, [sp, #8]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	f8cd b004 	str.w	fp, [sp, #4]
 8005a04:	9103      	str	r1, [sp, #12]
 8005a06:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005a0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a0c:	f001 ff04 	bl	8007818 <_dtoa_r>
 8005a10:	465d      	mov	r5, fp
 8005a12:	4606      	mov	r6, r0
 8005a14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a16:	2b46      	cmp	r3, #70	; 0x46
 8005a18:	eb06 0405 	add.w	r4, r6, r5
 8005a1c:	f47f aebf 	bne.w	800579e <_svfprintf_r+0x105e>
 8005a20:	7833      	ldrb	r3, [r6, #0]
 8005a22:	2b30      	cmp	r3, #48	; 0x30
 8005a24:	f000 818a 	beq.w	8005d3c <_svfprintf_r+0x15fc>
 8005a28:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005a2a:	442c      	add	r4, r5
 8005a2c:	e6b7      	b.n	800579e <_svfprintf_r+0x105e>
 8005a2e:	aa27      	add	r2, sp, #156	; 0x9c
 8005a30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a34:	f004 fb9a 	bl	800a16c <__ssprint_r>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f47e af7b 	bne.w	8004934 <_svfprintf_r+0x1f4>
 8005a3e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005a40:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005a42:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005a46:	e766      	b.n	8005916 <_svfprintf_r+0x11d6>
 8005a48:	f1bb 0f00 	cmp.w	fp, #0
 8005a4c:	bf08      	it	eq
 8005a4e:	f04f 0b01 	moveq.w	fp, #1
 8005a52:	e672      	b.n	800573a <_svfprintf_r+0xffa>
 8005a54:	930e      	str	r3, [sp, #56]	; 0x38
 8005a56:	4617      	mov	r7, r2
 8005a58:	e557      	b.n	800550a <_svfprintf_r+0xdca>
 8005a5a:	930e      	str	r3, [sp, #56]	; 0x38
 8005a5c:	e6f3      	b.n	8005846 <_svfprintf_r+0x1106>
 8005a5e:	3304      	adds	r3, #4
 8005a60:	6814      	ldr	r4, [r2, #0]
 8005a62:	930e      	str	r3, [sp, #56]	; 0x38
 8005a64:	2500      	movs	r5, #0
 8005a66:	f7ff ba1e 	b.w	8004ea6 <_svfprintf_r+0x766>
 8005a6a:	272d      	movs	r7, #45	; 0x2d
 8005a6c:	9308      	str	r3, [sp, #32]
 8005a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a70:	9307      	str	r3, [sp, #28]
 8005a72:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005a76:	f04f 0b00 	mov.w	fp, #0
 8005a7a:	f7ff b834 	b.w	8004ae6 <_svfprintf_r+0x3a6>
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f7fe fd9e 	bl	80045c0 <strlen>
 8005a84:	46a3      	mov	fp, r4
 8005a86:	4603      	mov	r3, r0
 8005a88:	900d      	str	r0, [sp, #52]	; 0x34
 8005a8a:	f7ff ba9d 	b.w	8004fc8 <_svfprintf_r+0x888>
 8005a8e:	aa27      	add	r2, sp, #156	; 0x9c
 8005a90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a94:	f004 fb6a 	bl	800a16c <__ssprint_r>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	f47e af4b 	bne.w	8004934 <_svfprintf_r+0x1f4>
 8005a9e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005aa0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005aa2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005aa6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005aa8:	f8c9 6000 	str.w	r6, [r9]
 8005aac:	3301      	adds	r3, #1
 8005aae:	440c      	add	r4, r1
 8005ab0:	2b07      	cmp	r3, #7
 8005ab2:	9429      	str	r4, [sp, #164]	; 0xa4
 8005ab4:	9328      	str	r3, [sp, #160]	; 0xa0
 8005ab6:	f8c9 1004 	str.w	r1, [r9, #4]
 8005aba:	f77f a8d5 	ble.w	8004c68 <_svfprintf_r+0x528>
 8005abe:	f7ff bbf6 	b.w	80052ae <_svfprintf_r+0xb6e>
 8005ac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ac4:	1cdd      	adds	r5, r3, #3
 8005ac6:	db1e      	blt.n	8005b06 <_svfprintf_r+0x13c6>
 8005ac8:	459b      	cmp	fp, r3
 8005aca:	db1c      	blt.n	8005b06 <_svfprintf_r+0x13c6>
 8005acc:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ace:	e688      	b.n	80057e2 <_svfprintf_r+0x10a2>
 8005ad0:	4623      	mov	r3, r4
 8005ad2:	e677      	b.n	80057c4 <_svfprintf_r+0x1084>
 8005ad4:	aa27      	add	r2, sp, #156	; 0x9c
 8005ad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ad8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005ada:	f004 fb47 	bl	800a16c <__ssprint_r>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	f47e af28 	bne.w	8004934 <_svfprintf_r+0x1f4>
 8005ae4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005ae6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005aea:	e447      	b.n	800537c <_svfprintf_r+0xc3c>
 8005aec:	4614      	mov	r4, r2
 8005aee:	3301      	adds	r3, #1
 8005af0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005af2:	9328      	str	r3, [sp, #160]	; 0xa0
 8005af4:	442c      	add	r4, r5
 8005af6:	2b07      	cmp	r3, #7
 8005af8:	9429      	str	r4, [sp, #164]	; 0xa4
 8005afa:	e889 0024 	stmia.w	r9, {r2, r5}
 8005afe:	dcc6      	bgt.n	8005a8e <_svfprintf_r+0x134e>
 8005b00:	f109 0908 	add.w	r9, r9, #8
 8005b04:	e7cf      	b.n	8005aa6 <_svfprintf_r+0x1366>
 8005b06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005b08:	3a02      	subs	r2, #2
 8005b0a:	9211      	str	r2, [sp, #68]	; 0x44
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8005b14:	9321      	str	r3, [sp, #132]	; 0x84
 8005b16:	bfb8      	it	lt
 8005b18:	425b      	neglt	r3, r3
 8005b1a:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8005b1e:	bfb4      	ite	lt
 8005b20:	222d      	movlt	r2, #45	; 0x2d
 8005b22:	222b      	movge	r2, #43	; 0x2b
 8005b24:	2b09      	cmp	r3, #9
 8005b26:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8005b2a:	f340 80ee 	ble.w	8005d0a <_svfprintf_r+0x15ca>
 8005b2e:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 8005b32:	4604      	mov	r4, r0
 8005b34:	4a25      	ldr	r2, [pc, #148]	; (8005bcc <_svfprintf_r+0x148c>)
 8005b36:	fb82 2103 	smull	r2, r1, r2, r3
 8005b3a:	17da      	asrs	r2, r3, #31
 8005b3c:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8005b40:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005b44:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8005b48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b4c:	2a09      	cmp	r2, #9
 8005b4e:	4613      	mov	r3, r2
 8005b50:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8005b54:	dcee      	bgt.n	8005b34 <_svfprintf_r+0x13f4>
 8005b56:	4621      	mov	r1, r4
 8005b58:	3330      	adds	r3, #48	; 0x30
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8005b60:	4288      	cmp	r0, r1
 8005b62:	f240 8137 	bls.w	8005dd4 <_svfprintf_r+0x1694>
 8005b66:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8005b6a:	4623      	mov	r3, r4
 8005b6c:	e001      	b.n	8005b72 <_svfprintf_r+0x1432>
 8005b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b72:	f801 2b01 	strb.w	r2, [r1], #1
 8005b76:	4298      	cmp	r0, r3
 8005b78:	d1f9      	bne.n	8005b6e <_svfprintf_r+0x142e>
 8005b7a:	1c43      	adds	r3, r0, #1
 8005b7c:	1b1b      	subs	r3, r3, r4
 8005b7e:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 8005b82:	4413      	add	r3, r2
 8005b84:	aa23      	add	r2, sp, #140	; 0x8c
 8005b86:	1a9b      	subs	r3, r3, r2
 8005b88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b8a:	9319      	str	r3, [sp, #100]	; 0x64
 8005b8c:	2a01      	cmp	r2, #1
 8005b8e:	4413      	add	r3, r2
 8005b90:	930d      	str	r3, [sp, #52]	; 0x34
 8005b92:	f340 80ea 	ble.w	8005d6a <_svfprintf_r+0x162a>
 8005b96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b98:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005b9a:	4413      	add	r3, r2
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	930d      	str	r3, [sp, #52]	; 0x34
 8005ba0:	9213      	str	r2, [sp, #76]	; 0x4c
 8005ba2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005ba6:	e62a      	b.n	80057fe <_svfprintf_r+0x10be>
 8005ba8:	aa27      	add	r2, sp, #156	; 0x9c
 8005baa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005bae:	f004 fadd 	bl	800a16c <__ssprint_r>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	f47e aebe 	bne.w	8004934 <_svfprintf_r+0x1f4>
 8005bb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bba:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005bbc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005bc0:	e4e6      	b.n	8005590 <_svfprintf_r+0xe50>
 8005bc2:	bf00      	nop
 8005bc4:	0800ad04 	.word	0x0800ad04
 8005bc8:	0800acb4 	.word	0x0800acb4
 8005bcc:	66666667 	.word	0x66666667
 8005bd0:	aa27      	add	r2, sp, #156	; 0x9c
 8005bd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005bd6:	f004 fac9 	bl	800a16c <__ssprint_r>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	f47e aeaa 	bne.w	8004934 <_svfprintf_r+0x1f4>
 8005be0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005be2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005be4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005bec:	e4e8      	b.n	80055c0 <_svfprintf_r+0xe80>
 8005bee:	2d06      	cmp	r5, #6
 8005bf0:	462b      	mov	r3, r5
 8005bf2:	bf28      	it	cs
 8005bf4:	2306      	movcs	r3, #6
 8005bf6:	930d      	str	r3, [sp, #52]	; 0x34
 8005bf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005bfc:	46b3      	mov	fp, r6
 8005bfe:	970e      	str	r7, [sp, #56]	; 0x38
 8005c00:	9613      	str	r6, [sp, #76]	; 0x4c
 8005c02:	4637      	mov	r7, r6
 8005c04:	9308      	str	r3, [sp, #32]
 8005c06:	4e88      	ldr	r6, [pc, #544]	; (8005e28 <_svfprintf_r+0x16e8>)
 8005c08:	f7fe bf6c 	b.w	8004ae4 <_svfprintf_r+0x3a4>
 8005c0c:	f04f 0b06 	mov.w	fp, #6
 8005c10:	e593      	b.n	800573a <_svfprintf_r+0xffa>
 8005c12:	a825      	add	r0, sp, #148	; 0x94
 8005c14:	a922      	add	r1, sp, #136	; 0x88
 8005c16:	aa21      	add	r2, sp, #132	; 0x84
 8005c18:	2303      	movs	r3, #3
 8005c1a:	9004      	str	r0, [sp, #16]
 8005c1c:	9202      	str	r2, [sp, #8]
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	f8cd b004 	str.w	fp, [sp, #4]
 8005c24:	9103      	str	r1, [sp, #12]
 8005c26:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005c2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005c2c:	f001 fdf4 	bl	8007818 <_dtoa_r>
 8005c30:	465d      	mov	r5, fp
 8005c32:	4606      	mov	r6, r0
 8005c34:	eb00 040b 	add.w	r4, r0, fp
 8005c38:	e6f2      	b.n	8005a20 <_svfprintf_r+0x12e0>
 8005c3a:	272d      	movs	r7, #45	; 0x2d
 8005c3c:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005c40:	f7ff b8a3 	b.w	8004d8a <_svfprintf_r+0x64a>
 8005c44:	9307      	str	r3, [sp, #28]
 8005c46:	f7ff b94c 	b.w	8004ee2 <_svfprintf_r+0x7a2>
 8005c4a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8005c4e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8005c52:	931d      	str	r3, [sp, #116]	; 0x74
 8005c54:	232d      	movs	r3, #45	; 0x2d
 8005c56:	911c      	str	r1, [sp, #112]	; 0x70
 8005c58:	9308      	str	r3, [sp, #32]
 8005c5a:	e57c      	b.n	8005756 <_svfprintf_r+0x1016>
 8005c5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005c5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c60:	4413      	add	r3, r2
 8005c62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005c64:	930d      	str	r3, [sp, #52]	; 0x34
 8005c66:	2a00      	cmp	r2, #0
 8005c68:	f340 8089 	ble.w	8005d7e <_svfprintf_r+0x163e>
 8005c6c:	2267      	movs	r2, #103	; 0x67
 8005c6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c72:	9211      	str	r2, [sp, #68]	; 0x44
 8005c74:	e5c3      	b.n	80057fe <_svfprintf_r+0x10be>
 8005c76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c78:	2b47      	cmp	r3, #71	; 0x47
 8005c7a:	f47f ad8f 	bne.w	800579c <_svfprintf_r+0x105c>
 8005c7e:	9b07      	ldr	r3, [sp, #28]
 8005c80:	07db      	lsls	r3, r3, #31
 8005c82:	f53f aec7 	bmi.w	8005a14 <_svfprintf_r+0x12d4>
 8005c86:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005c88:	2f47      	cmp	r7, #71	; 0x47
 8005c8a:	eba3 0306 	sub.w	r3, r3, r6
 8005c8e:	9312      	str	r3, [sp, #72]	; 0x48
 8005c90:	f43f af17 	beq.w	8005ac2 <_svfprintf_r+0x1382>
 8005c94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c96:	e739      	b.n	8005b0c <_svfprintf_r+0x13cc>
 8005c98:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8005c9c:	970e      	str	r7, [sp, #56]	; 0x38
 8005c9e:	9308      	str	r3, [sp, #32]
 8005ca0:	950d      	str	r5, [sp, #52]	; 0x34
 8005ca2:	4683      	mov	fp, r0
 8005ca4:	9013      	str	r0, [sp, #76]	; 0x4c
 8005ca6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005caa:	f7fe bf1b 	b.w	8004ae4 <_svfprintf_r+0x3a4>
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	dd6d      	ble.n	8005d8e <_svfprintf_r+0x164e>
 8005cb2:	f1bb 0f00 	cmp.w	fp, #0
 8005cb6:	d14f      	bne.n	8005d58 <_svfprintf_r+0x1618>
 8005cb8:	9a07      	ldr	r2, [sp, #28]
 8005cba:	07d4      	lsls	r4, r2, #31
 8005cbc:	d44c      	bmi.n	8005d58 <_svfprintf_r+0x1618>
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	920d      	str	r2, [sp, #52]	; 0x34
 8005cc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005cc6:	e59a      	b.n	80057fe <_svfprintf_r+0x10be>
 8005cc8:	9b07      	ldr	r3, [sp, #28]
 8005cca:	07db      	lsls	r3, r3, #31
 8005ccc:	465f      	mov	r7, fp
 8005cce:	d505      	bpl.n	8005cdc <_svfprintf_r+0x159c>
 8005cd0:	ae44      	add	r6, sp, #272	; 0x110
 8005cd2:	2330      	movs	r3, #48	; 0x30
 8005cd4:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8005cd8:	f7fe befa 	b.w	8004ad0 <_svfprintf_r+0x390>
 8005cdc:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8005ce0:	ae34      	add	r6, sp, #208	; 0xd0
 8005ce2:	f7fe bef8 	b.w	8004ad6 <_svfprintf_r+0x396>
 8005ce6:	aa27      	add	r2, sp, #156	; 0x9c
 8005ce8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005cec:	f004 fa3e 	bl	800a16c <__ssprint_r>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	f47e ae1f 	bne.w	8004934 <_svfprintf_r+0x1f4>
 8005cf6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005cf8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005cfa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005cfc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005d00:	e620      	b.n	8005944 <_svfprintf_r+0x1204>
 8005d02:	46a0      	mov	r8, r4
 8005d04:	2500      	movs	r5, #0
 8005d06:	f7fe bd77 	b.w	80047f8 <_svfprintf_r+0xb8>
 8005d0a:	3330      	adds	r3, #48	; 0x30
 8005d0c:	2230      	movs	r2, #48	; 0x30
 8005d0e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8005d12:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8005d16:	ab24      	add	r3, sp, #144	; 0x90
 8005d18:	e734      	b.n	8005b84 <_svfprintf_r+0x1444>
 8005d1a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005d1c:	e552      	b.n	80057c4 <_svfprintf_r+0x1084>
 8005d1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005d20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d22:	4413      	add	r3, r2
 8005d24:	2267      	movs	r2, #103	; 0x67
 8005d26:	930d      	str	r3, [sp, #52]	; 0x34
 8005d28:	9211      	str	r2, [sp, #68]	; 0x44
 8005d2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d2e:	e566      	b.n	80057fe <_svfprintf_r+0x10be>
 8005d30:	4e3e      	ldr	r6, [pc, #248]	; (8005e2c <_svfprintf_r+0x16ec>)
 8005d32:	4b3f      	ldr	r3, [pc, #252]	; (8005e30 <_svfprintf_r+0x16f0>)
 8005d34:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005d38:	f7ff b829 	b.w	8004d8e <_svfprintf_r+0x64e>
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8005d44:	f7fe fa14 	bl	8004170 <__aeabi_dcmpeq>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	f47f ae6d 	bne.w	8005a28 <_svfprintf_r+0x12e8>
 8005d4e:	f1c5 0501 	rsb	r5, r5, #1
 8005d52:	9521      	str	r5, [sp, #132]	; 0x84
 8005d54:	442c      	add	r4, r5
 8005d56:	e522      	b.n	800579e <_svfprintf_r+0x105e>
 8005d58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005d5c:	189d      	adds	r5, r3, r2
 8005d5e:	eb05 030b 	add.w	r3, r5, fp
 8005d62:	930d      	str	r3, [sp, #52]	; 0x34
 8005d64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d68:	e549      	b.n	80057fe <_svfprintf_r+0x10be>
 8005d6a:	9b07      	ldr	r3, [sp, #28]
 8005d6c:	f013 0301 	ands.w	r3, r3, #1
 8005d70:	f47f af11 	bne.w	8005b96 <_svfprintf_r+0x1456>
 8005d74:	9313      	str	r3, [sp, #76]	; 0x4c
 8005d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d7c:	e53f      	b.n	80057fe <_svfprintf_r+0x10be>
 8005d7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d82:	f1c3 0301 	rsb	r3, r3, #1
 8005d86:	441a      	add	r2, r3
 8005d88:	4613      	mov	r3, r2
 8005d8a:	920d      	str	r2, [sp, #52]	; 0x34
 8005d8c:	e76e      	b.n	8005c6c <_svfprintf_r+0x152c>
 8005d8e:	f1bb 0f00 	cmp.w	fp, #0
 8005d92:	d102      	bne.n	8005d9a <_svfprintf_r+0x165a>
 8005d94:	9b07      	ldr	r3, [sp, #28]
 8005d96:	07d8      	lsls	r0, r3, #31
 8005d98:	d507      	bpl.n	8005daa <_svfprintf_r+0x166a>
 8005d9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005d9c:	1c5d      	adds	r5, r3, #1
 8005d9e:	eb05 030b 	add.w	r3, r5, fp
 8005da2:	930d      	str	r3, [sp, #52]	; 0x34
 8005da4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005da8:	e529      	b.n	80057fe <_svfprintf_r+0x10be>
 8005daa:	2301      	movs	r3, #1
 8005dac:	930d      	str	r3, [sp, #52]	; 0x34
 8005dae:	e526      	b.n	80057fe <_svfprintf_r+0x10be>
 8005db0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005db2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005db6:	6805      	ldr	r5, [r0, #0]
 8005db8:	3004      	adds	r0, #4
 8005dba:	2d00      	cmp	r5, #0
 8005dbc:	900e      	str	r0, [sp, #56]	; 0x38
 8005dbe:	46a0      	mov	r8, r4
 8005dc0:	f6be ad18 	bge.w	80047f4 <_svfprintf_r+0xb4>
 8005dc4:	f04f 35ff 	mov.w	r5, #4294967295
 8005dc8:	f7fe bd14 	b.w	80047f4 <_svfprintf_r+0xb4>
 8005dcc:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005dd0:	f7fe bdc1 	b.w	8004956 <_svfprintf_r+0x216>
 8005dd4:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8005dd8:	e6d4      	b.n	8005b84 <_svfprintf_r+0x1444>
 8005dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ddc:	230c      	movs	r3, #12
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	f04f 30ff 	mov.w	r0, #4294967295
 8005de4:	f7fe bdaf 	b.w	8004946 <_svfprintf_r+0x206>
 8005de8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005dec:	f7fe be30 	b.w	8004a50 <_svfprintf_r+0x310>
 8005df0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005df4:	f7fe bf92 	b.w	8004d1c <_svfprintf_r+0x5dc>
 8005df8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005dfc:	f7ff b845 	b.w	8004e8a <_svfprintf_r+0x74a>
 8005e00:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005e04:	f7ff b813 	b.w	8004e2e <_svfprintf_r+0x6ee>
 8005e08:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005e0c:	f7fe bfe5 	b.w	8004dda <_svfprintf_r+0x69a>
 8005e10:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005e14:	f7ff b92d 	b.w	8005072 <_svfprintf_r+0x932>
 8005e18:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005e1c:	f7ff b908 	b.w	8005030 <_svfprintf_r+0x8f0>
 8005e20:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005e24:	f7ff b8e6 	b.w	8004ff4 <_svfprintf_r+0x8b4>
 8005e28:	0800acfc 	.word	0x0800acfc
 8005e2c:	0800acd0 	.word	0x0800acd0
 8005e30:	0800accc 	.word	0x0800accc
 8005e34:	00000000 	.word	0x00000000

08005e38 <_vfprintf_r>:
 8005e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	b0c5      	sub	sp, #276	; 0x114
 8005e3e:	461c      	mov	r4, r3
 8005e40:	9108      	str	r1, [sp, #32]
 8005e42:	4616      	mov	r6, r2
 8005e44:	4605      	mov	r5, r0
 8005e46:	900a      	str	r0, [sp, #40]	; 0x28
 8005e48:	f003 f82e 	bl	8008ea8 <_localeconv_r>
 8005e4c:	6803      	ldr	r3, [r0, #0]
 8005e4e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fe fbb5 	bl	80045c0 <strlen>
 8005e56:	940e      	str	r4, [sp, #56]	; 0x38
 8005e58:	9016      	str	r0, [sp, #88]	; 0x58
 8005e5a:	b11d      	cbz	r5, 8005e64 <_vfprintf_r+0x2c>
 8005e5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 8123 	beq.w	80060aa <_vfprintf_r+0x272>
 8005e64:	9808      	ldr	r0, [sp, #32]
 8005e66:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8005e6a:	b293      	uxth	r3, r2
 8005e6c:	0499      	lsls	r1, r3, #18
 8005e6e:	d407      	bmi.n	8005e80 <_vfprintf_r+0x48>
 8005e70:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8005e72:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8005e76:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8005e7a:	8183      	strh	r3, [r0, #12]
 8005e7c:	6641      	str	r1, [r0, #100]	; 0x64
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	071a      	lsls	r2, r3, #28
 8005e82:	f140 80dd 	bpl.w	8006040 <_vfprintf_r+0x208>
 8005e86:	9a08      	ldr	r2, [sp, #32]
 8005e88:	6912      	ldr	r2, [r2, #16]
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	f000 80d8 	beq.w	8006040 <_vfprintf_r+0x208>
 8005e90:	f003 031a 	and.w	r3, r3, #26
 8005e94:	2b0a      	cmp	r3, #10
 8005e96:	f000 80e1 	beq.w	800605c <_vfprintf_r+0x224>
 8005e9a:	ed9f 7b87 	vldr	d7, [pc, #540]	; 80060b8 <_vfprintf_r+0x280>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005ea4:	9312      	str	r3, [sp, #72]	; 0x48
 8005ea6:	9329      	str	r3, [sp, #164]	; 0xa4
 8005ea8:	9328      	str	r3, [sp, #160]	; 0xa0
 8005eaa:	9319      	str	r3, [sp, #100]	; 0x64
 8005eac:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eae:	f8df a214 	ldr.w	sl, [pc, #532]	; 80060c4 <_vfprintf_r+0x28c>
 8005eb2:	ab34      	add	r3, sp, #208	; 0xd0
 8005eb4:	9327      	str	r3, [sp, #156]	; 0x9c
 8005eb6:	4699      	mov	r9, r3
 8005eb8:	46b0      	mov	r8, r6
 8005eba:	f898 3000 	ldrb.w	r3, [r8]
 8005ebe:	4644      	mov	r4, r8
 8005ec0:	b1eb      	cbz	r3, 8005efe <_vfprintf_r+0xc6>
 8005ec2:	2b25      	cmp	r3, #37	; 0x25
 8005ec4:	d102      	bne.n	8005ecc <_vfprintf_r+0x94>
 8005ec6:	e01a      	b.n	8005efe <_vfprintf_r+0xc6>
 8005ec8:	2b25      	cmp	r3, #37	; 0x25
 8005eca:	d003      	beq.n	8005ed4 <_vfprintf_r+0x9c>
 8005ecc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1f9      	bne.n	8005ec8 <_vfprintf_r+0x90>
 8005ed4:	ebc8 0504 	rsb	r5, r8, r4
 8005ed8:	b18d      	cbz	r5, 8005efe <_vfprintf_r+0xc6>
 8005eda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005edc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005ede:	f8c9 8000 	str.w	r8, [r9]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	442a      	add	r2, r5
 8005ee6:	2b07      	cmp	r3, #7
 8005ee8:	f8c9 5004 	str.w	r5, [r9, #4]
 8005eec:	9229      	str	r2, [sp, #164]	; 0xa4
 8005eee:	9328      	str	r3, [sp, #160]	; 0xa0
 8005ef0:	f300 80c2 	bgt.w	8006078 <_vfprintf_r+0x240>
 8005ef4:	f109 0908 	add.w	r9, r9, #8
 8005ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005efa:	442b      	add	r3, r5
 8005efc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005efe:	7823      	ldrb	r3, [r4, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 80c2 	beq.w	800608a <_vfprintf_r+0x252>
 8005f06:	2300      	movs	r3, #0
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005f0e:	4619      	mov	r1, r3
 8005f10:	930c      	str	r3, [sp, #48]	; 0x30
 8005f12:	9307      	str	r3, [sp, #28]
 8005f14:	f04f 3bff 	mov.w	fp, #4294967295
 8005f18:	7863      	ldrb	r3, [r4, #1]
 8005f1a:	f104 0801 	add.w	r8, r4, #1
 8005f1e:	465d      	mov	r5, fp
 8005f20:	f108 0801 	add.w	r8, r8, #1
 8005f24:	f1a3 0020 	sub.w	r0, r3, #32
 8005f28:	2858      	cmp	r0, #88	; 0x58
 8005f2a:	f200 8459 	bhi.w	80067e0 <_vfprintf_r+0x9a8>
 8005f2e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8005f32:	040f      	.short	0x040f
 8005f34:	04570457 	.word	0x04570457
 8005f38:	04570418 	.word	0x04570418
 8005f3c:	04570457 	.word	0x04570457
 8005f40:	04570457 	.word	0x04570457
 8005f44:	03620457 	.word	0x03620457
 8005f48:	04570449 	.word	0x04570449
 8005f4c:	0109005d 	.word	0x0109005d
 8005f50:	01250457 	.word	0x01250457
 8005f54:	03700370 	.word	0x03700370
 8005f58:	03700370 	.word	0x03700370
 8005f5c:	03700370 	.word	0x03700370
 8005f60:	03700370 	.word	0x03700370
 8005f64:	04570370 	.word	0x04570370
 8005f68:	04570457 	.word	0x04570457
 8005f6c:	04570457 	.word	0x04570457
 8005f70:	04570457 	.word	0x04570457
 8005f74:	04570457 	.word	0x04570457
 8005f78:	03800457 	.word	0x03800457
 8005f7c:	0457039d 	.word	0x0457039d
 8005f80:	0457039d 	.word	0x0457039d
 8005f84:	04570457 	.word	0x04570457
 8005f88:	03eb0457 	.word	0x03eb0457
 8005f8c:	04570457 	.word	0x04570457
 8005f90:	0457012c 	.word	0x0457012c
 8005f94:	04570457 	.word	0x04570457
 8005f98:	04570457 	.word	0x04570457
 8005f9c:	04570155 	.word	0x04570155
 8005fa0:	02b40457 	.word	0x02b40457
 8005fa4:	04570457 	.word	0x04570457
 8005fa8:	04570457 	.word	0x04570457
 8005fac:	04570457 	.word	0x04570457
 8005fb0:	04570457 	.word	0x04570457
 8005fb4:	04570457 	.word	0x04570457
 8005fb8:	030f02f5 	.word	0x030f02f5
 8005fbc:	039d039d 	.word	0x039d039d
 8005fc0:	033f039d 	.word	0x033f039d
 8005fc4:	0457030f 	.word	0x0457030f
 8005fc8:	03460457 	.word	0x03460457
 8005fcc:	03500457 	.word	0x03500457
 8005fd0:	006400cb 	.word	0x006400cb
 8005fd4:	04570420 	.word	0x04570420
 8005fd8:	04570428 	.word	0x04570428
 8005fdc:	045703f2 	.word	0x045703f2
 8005fe0:	03fa0457 	.word	0x03fa0457
 8005fe4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005fe6:	930e      	str	r3, [sp, #56]	; 0x38
 8005fe8:	4240      	negs	r0, r0
 8005fea:	900c      	str	r0, [sp, #48]	; 0x30
 8005fec:	9b07      	ldr	r3, [sp, #28]
 8005fee:	f043 0304 	orr.w	r3, r3, #4
 8005ff2:	9307      	str	r3, [sp, #28]
 8005ff4:	f898 3000 	ldrb.w	r3, [r8]
 8005ff8:	e792      	b.n	8005f20 <_vfprintf_r+0xe8>
 8005ffa:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005ffc:	46ab      	mov	fp, r5
 8005ffe:	2100      	movs	r1, #0
 8006000:	6804      	ldr	r4, [r0, #0]
 8006002:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006006:	1d07      	adds	r7, r0, #4
 8006008:	9807      	ldr	r0, [sp, #28]
 800600a:	2330      	movs	r3, #48	; 0x30
 800600c:	2278      	movs	r2, #120	; 0x78
 800600e:	458b      	cmp	fp, r1
 8006010:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8006014:	f04f 0500 	mov.w	r5, #0
 8006018:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 800601c:	f040 0302 	orr.w	r3, r0, #2
 8006020:	f2c0 83fb 	blt.w	800681a <_vfprintf_r+0x9e2>
 8006024:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8006028:	f043 0302 	orr.w	r3, r3, #2
 800602c:	9307      	str	r3, [sp, #28]
 800602e:	ea54 0305 	orrs.w	r3, r4, r5
 8006032:	970e      	str	r7, [sp, #56]	; 0x38
 8006034:	f000 83cc 	beq.w	80067d0 <_vfprintf_r+0x998>
 8006038:	460f      	mov	r7, r1
 800603a:	9211      	str	r2, [sp, #68]	; 0x44
 800603c:	4820      	ldr	r0, [pc, #128]	; (80060c0 <_vfprintf_r+0x288>)
 800603e:	e25d      	b.n	80064fc <_vfprintf_r+0x6c4>
 8006040:	9908      	ldr	r1, [sp, #32]
 8006042:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006044:	f001 faf0 	bl	8007628 <__swsetup_r>
 8006048:	2800      	cmp	r0, #0
 800604a:	f041 803f 	bne.w	80070cc <_vfprintf_r+0x1294>
 800604e:	9b08      	ldr	r3, [sp, #32]
 8006050:	899b      	ldrh	r3, [r3, #12]
 8006052:	f003 031a 	and.w	r3, r3, #26
 8006056:	2b0a      	cmp	r3, #10
 8006058:	f47f af1f 	bne.w	8005e9a <_vfprintf_r+0x62>
 800605c:	9908      	ldr	r1, [sp, #32]
 800605e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8006062:	2b00      	cmp	r3, #0
 8006064:	f6ff af19 	blt.w	8005e9a <_vfprintf_r+0x62>
 8006068:	4623      	mov	r3, r4
 800606a:	4632      	mov	r2, r6
 800606c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800606e:	f001 fa7f 	bl	8007570 <__sbprintf>
 8006072:	b045      	add	sp, #276	; 0x114
 8006074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006078:	aa27      	add	r2, sp, #156	; 0x9c
 800607a:	9908      	ldr	r1, [sp, #32]
 800607c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800607e:	f004 f931 	bl	800a2e4 <__sprint_r>
 8006082:	b948      	cbnz	r0, 8006098 <_vfprintf_r+0x260>
 8006084:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006088:	e736      	b.n	8005ef8 <_vfprintf_r+0xc0>
 800608a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800608c:	b123      	cbz	r3, 8006098 <_vfprintf_r+0x260>
 800608e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006090:	9908      	ldr	r1, [sp, #32]
 8006092:	aa27      	add	r2, sp, #156	; 0x9c
 8006094:	f004 f926 	bl	800a2e4 <__sprint_r>
 8006098:	9b08      	ldr	r3, [sp, #32]
 800609a:	899b      	ldrh	r3, [r3, #12]
 800609c:	0659      	lsls	r1, r3, #25
 800609e:	f101 8015 	bmi.w	80070cc <_vfprintf_r+0x1294>
 80060a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80060a4:	b045      	add	sp, #276	; 0x114
 80060a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80060ac:	f002 fc02 	bl	80088b4 <__sinit>
 80060b0:	e6d8      	b.n	8005e64 <_vfprintf_r+0x2c>
 80060b2:	bf00      	nop
 80060b4:	f3af 8000 	nop.w
	...
 80060c0:	0800ace8 	.word	0x0800ace8
 80060c4:	0800ad18 	.word	0x0800ad18
 80060c8:	9311      	str	r3, [sp, #68]	; 0x44
 80060ca:	46ab      	mov	fp, r5
 80060cc:	2a00      	cmp	r2, #0
 80060ce:	f041 8232 	bne.w	8007536 <_vfprintf_r+0x16fe>
 80060d2:	9a07      	ldr	r2, [sp, #28]
 80060d4:	f012 0320 	ands.w	r3, r2, #32
 80060d8:	d064      	beq.n	80061a4 <_vfprintf_r+0x36c>
 80060da:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80060dc:	3707      	adds	r7, #7
 80060de:	f027 0307 	bic.w	r3, r7, #7
 80060e2:	2700      	movs	r7, #0
 80060e4:	f103 0108 	add.w	r1, r3, #8
 80060e8:	45bb      	cmp	fp, r7
 80060ea:	910e      	str	r1, [sp, #56]	; 0x38
 80060ec:	e9d3 4500 	ldrd	r4, r5, [r3]
 80060f0:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80060f4:	f2c0 86ba 	blt.w	8006e6c <_vfprintf_r+0x1034>
 80060f8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80060fc:	9307      	str	r3, [sp, #28]
 80060fe:	ea54 0305 	orrs.w	r3, r4, r5
 8006102:	f000 8382 	beq.w	800680a <_vfprintf_r+0x9d2>
 8006106:	ae34      	add	r6, sp, #208	; 0xd0
 8006108:	08e2      	lsrs	r2, r4, #3
 800610a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800610e:	08e9      	lsrs	r1, r5, #3
 8006110:	f004 0307 	and.w	r3, r4, #7
 8006114:	460d      	mov	r5, r1
 8006116:	4614      	mov	r4, r2
 8006118:	3330      	adds	r3, #48	; 0x30
 800611a:	ea54 0205 	orrs.w	r2, r4, r5
 800611e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8006122:	d1f1      	bne.n	8006108 <_vfprintf_r+0x2d0>
 8006124:	9a07      	ldr	r2, [sp, #28]
 8006126:	07d2      	lsls	r2, r2, #31
 8006128:	f140 8096 	bpl.w	8006258 <_vfprintf_r+0x420>
 800612c:	2b30      	cmp	r3, #48	; 0x30
 800612e:	f000 8093 	beq.w	8006258 <_vfprintf_r+0x420>
 8006132:	2230      	movs	r2, #48	; 0x30
 8006134:	1e73      	subs	r3, r6, #1
 8006136:	f806 2c01 	strb.w	r2, [r6, #-1]
 800613a:	aa34      	add	r2, sp, #208	; 0xd0
 800613c:	1ad2      	subs	r2, r2, r3
 800613e:	920d      	str	r2, [sp, #52]	; 0x34
 8006140:	461e      	mov	r6, r3
 8006142:	e08c      	b.n	800625e <_vfprintf_r+0x426>
 8006144:	f898 3000 	ldrb.w	r3, [r8]
 8006148:	2b2a      	cmp	r3, #42	; 0x2a
 800614a:	f108 0401 	add.w	r4, r8, #1
 800614e:	f001 81d0 	beq.w	80074f2 <_vfprintf_r+0x16ba>
 8006152:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006156:	2809      	cmp	r0, #9
 8006158:	bf98      	it	ls
 800615a:	2500      	movls	r5, #0
 800615c:	f201 816c 	bhi.w	8007438 <_vfprintf_r+0x1600>
 8006160:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006164:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8006168:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800616c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006170:	2809      	cmp	r0, #9
 8006172:	d9f5      	bls.n	8006160 <_vfprintf_r+0x328>
 8006174:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8006178:	46a0      	mov	r8, r4
 800617a:	e6d3      	b.n	8005f24 <_vfprintf_r+0xec>
 800617c:	9b07      	ldr	r3, [sp, #28]
 800617e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006182:	9307      	str	r3, [sp, #28]
 8006184:	f898 3000 	ldrb.w	r3, [r8]
 8006188:	e6ca      	b.n	8005f20 <_vfprintf_r+0xe8>
 800618a:	9311      	str	r3, [sp, #68]	; 0x44
 800618c:	46ab      	mov	fp, r5
 800618e:	2a00      	cmp	r2, #0
 8006190:	f041 81d9 	bne.w	8007546 <_vfprintf_r+0x170e>
 8006194:	9b07      	ldr	r3, [sp, #28]
 8006196:	f043 0310 	orr.w	r3, r3, #16
 800619a:	9307      	str	r3, [sp, #28]
 800619c:	9a07      	ldr	r2, [sp, #28]
 800619e:	f012 0320 	ands.w	r3, r2, #32
 80061a2:	d19a      	bne.n	80060da <_vfprintf_r+0x2a2>
 80061a4:	9907      	ldr	r1, [sp, #28]
 80061a6:	f011 0210 	ands.w	r2, r1, #16
 80061aa:	f000 8634 	beq.w	8006e16 <_vfprintf_r+0xfde>
 80061ae:	980e      	ldr	r0, [sp, #56]	; 0x38
 80061b0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80061b4:	f1bb 0f00 	cmp.w	fp, #0
 80061b8:	6804      	ldr	r4, [r0, #0]
 80061ba:	f100 0704 	add.w	r7, r0, #4
 80061be:	f04f 0500 	mov.w	r5, #0
 80061c2:	f2c0 8652 	blt.w	8006e6a <_vfprintf_r+0x1032>
 80061c6:	460a      	mov	r2, r1
 80061c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061cc:	9207      	str	r2, [sp, #28]
 80061ce:	ea54 0205 	orrs.w	r2, r4, r5
 80061d2:	970e      	str	r7, [sp, #56]	; 0x38
 80061d4:	f000 8319 	beq.w	800680a <_vfprintf_r+0x9d2>
 80061d8:	461f      	mov	r7, r3
 80061da:	e794      	b.n	8006106 <_vfprintf_r+0x2ce>
 80061dc:	9311      	str	r3, [sp, #68]	; 0x44
 80061de:	46ab      	mov	fp, r5
 80061e0:	2a00      	cmp	r2, #0
 80061e2:	f041 81a0 	bne.w	8007526 <_vfprintf_r+0x16ee>
 80061e6:	9b07      	ldr	r3, [sp, #28]
 80061e8:	f043 0310 	orr.w	r3, r3, #16
 80061ec:	9307      	str	r3, [sp, #28]
 80061ee:	9a07      	ldr	r2, [sp, #28]
 80061f0:	f012 0320 	ands.w	r3, r2, #32
 80061f4:	f000 84fa 	beq.w	8006bec <_vfprintf_r+0xdb4>
 80061f8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80061fa:	3707      	adds	r7, #7
 80061fc:	f027 0307 	bic.w	r3, r7, #7
 8006200:	2700      	movs	r7, #0
 8006202:	f103 0108 	add.w	r1, r3, #8
 8006206:	45bb      	cmp	fp, r7
 8006208:	910e      	str	r1, [sp, #56]	; 0x38
 800620a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800620e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006212:	f2c0 8523 	blt.w	8006c5c <_vfprintf_r+0xe24>
 8006216:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800621a:	9307      	str	r3, [sp, #28]
 800621c:	ea54 0305 	orrs.w	r3, r4, r5
 8006220:	f000 81bc 	beq.w	800659c <_vfprintf_r+0x764>
 8006224:	2d00      	cmp	r5, #0
 8006226:	bf08      	it	eq
 8006228:	2c0a      	cmpeq	r4, #10
 800622a:	f0c0 851b 	bcc.w	8006c64 <_vfprintf_r+0xe2c>
 800622e:	ae34      	add	r6, sp, #208	; 0xd0
 8006230:	4620      	mov	r0, r4
 8006232:	4629      	mov	r1, r5
 8006234:	220a      	movs	r2, #10
 8006236:	2300      	movs	r3, #0
 8006238:	f004 fa38 	bl	800a6ac <__aeabi_uldivmod>
 800623c:	3230      	adds	r2, #48	; 0x30
 800623e:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8006242:	4620      	mov	r0, r4
 8006244:	4629      	mov	r1, r5
 8006246:	2300      	movs	r3, #0
 8006248:	220a      	movs	r2, #10
 800624a:	f004 fa2f 	bl	800a6ac <__aeabi_uldivmod>
 800624e:	4604      	mov	r4, r0
 8006250:	460d      	mov	r5, r1
 8006252:	ea54 0305 	orrs.w	r3, r4, r5
 8006256:	d1eb      	bne.n	8006230 <_vfprintf_r+0x3f8>
 8006258:	ab34      	add	r3, sp, #208	; 0xd0
 800625a:	1b9b      	subs	r3, r3, r6
 800625c:	930d      	str	r3, [sp, #52]	; 0x34
 800625e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006260:	455b      	cmp	r3, fp
 8006262:	bfb8      	it	lt
 8006264:	465b      	movlt	r3, fp
 8006266:	9309      	str	r3, [sp, #36]	; 0x24
 8006268:	2300      	movs	r3, #0
 800626a:	9313      	str	r3, [sp, #76]	; 0x4c
 800626c:	b117      	cbz	r7, 8006274 <_vfprintf_r+0x43c>
 800626e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006270:	3301      	adds	r3, #1
 8006272:	9309      	str	r3, [sp, #36]	; 0x24
 8006274:	9b07      	ldr	r3, [sp, #28]
 8006276:	f013 0302 	ands.w	r3, r3, #2
 800627a:	930f      	str	r3, [sp, #60]	; 0x3c
 800627c:	d002      	beq.n	8006284 <_vfprintf_r+0x44c>
 800627e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006280:	3302      	adds	r3, #2
 8006282:	9309      	str	r3, [sp, #36]	; 0x24
 8006284:	9b07      	ldr	r3, [sp, #28]
 8006286:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800628a:	9310      	str	r3, [sp, #64]	; 0x40
 800628c:	f040 82d2 	bne.w	8006834 <_vfprintf_r+0x9fc>
 8006290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006294:	1a9d      	subs	r5, r3, r2
 8006296:	2d00      	cmp	r5, #0
 8006298:	f340 82cc 	ble.w	8006834 <_vfprintf_r+0x9fc>
 800629c:	2d10      	cmp	r5, #16
 800629e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80062a0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80062a2:	4fa8      	ldr	r7, [pc, #672]	; (8006544 <_vfprintf_r+0x70c>)
 80062a4:	dd27      	ble.n	80062f6 <_vfprintf_r+0x4be>
 80062a6:	9618      	str	r6, [sp, #96]	; 0x60
 80062a8:	4648      	mov	r0, r9
 80062aa:	2410      	movs	r4, #16
 80062ac:	46b9      	mov	r9, r7
 80062ae:	9e08      	ldr	r6, [sp, #32]
 80062b0:	462f      	mov	r7, r5
 80062b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80062b4:	e004      	b.n	80062c0 <_vfprintf_r+0x488>
 80062b6:	3f10      	subs	r7, #16
 80062b8:	2f10      	cmp	r7, #16
 80062ba:	f100 0008 	add.w	r0, r0, #8
 80062be:	dd16      	ble.n	80062ee <_vfprintf_r+0x4b6>
 80062c0:	3201      	adds	r2, #1
 80062c2:	4ba0      	ldr	r3, [pc, #640]	; (8006544 <_vfprintf_r+0x70c>)
 80062c4:	9228      	str	r2, [sp, #160]	; 0xa0
 80062c6:	3110      	adds	r1, #16
 80062c8:	2a07      	cmp	r2, #7
 80062ca:	9129      	str	r1, [sp, #164]	; 0xa4
 80062cc:	e880 0018 	stmia.w	r0, {r3, r4}
 80062d0:	ddf1      	ble.n	80062b6 <_vfprintf_r+0x47e>
 80062d2:	aa27      	add	r2, sp, #156	; 0x9c
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	f004 f804 	bl	800a2e4 <__sprint_r>
 80062dc:	2800      	cmp	r0, #0
 80062de:	f47f aedb 	bne.w	8006098 <_vfprintf_r+0x260>
 80062e2:	3f10      	subs	r7, #16
 80062e4:	2f10      	cmp	r7, #16
 80062e6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80062e8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80062ea:	a834      	add	r0, sp, #208	; 0xd0
 80062ec:	dce8      	bgt.n	80062c0 <_vfprintf_r+0x488>
 80062ee:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80062f0:	463d      	mov	r5, r7
 80062f2:	464f      	mov	r7, r9
 80062f4:	4681      	mov	r9, r0
 80062f6:	3201      	adds	r2, #1
 80062f8:	186c      	adds	r4, r5, r1
 80062fa:	2a07      	cmp	r2, #7
 80062fc:	9429      	str	r4, [sp, #164]	; 0xa4
 80062fe:	9228      	str	r2, [sp, #160]	; 0xa0
 8006300:	f8c9 7000 	str.w	r7, [r9]
 8006304:	f8c9 5004 	str.w	r5, [r9, #4]
 8006308:	f300 8428 	bgt.w	8006b5c <_vfprintf_r+0xd24>
 800630c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006310:	f109 0908 	add.w	r9, r9, #8
 8006314:	b177      	cbz	r7, 8006334 <_vfprintf_r+0x4fc>
 8006316:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006318:	3301      	adds	r3, #1
 800631a:	3401      	adds	r4, #1
 800631c:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8006320:	2201      	movs	r2, #1
 8006322:	2b07      	cmp	r3, #7
 8006324:	9429      	str	r4, [sp, #164]	; 0xa4
 8006326:	9328      	str	r3, [sp, #160]	; 0xa0
 8006328:	e889 0006 	stmia.w	r9, {r1, r2}
 800632c:	f300 83a0 	bgt.w	8006a70 <_vfprintf_r+0xc38>
 8006330:	f109 0908 	add.w	r9, r9, #8
 8006334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006336:	b16b      	cbz	r3, 8006354 <_vfprintf_r+0x51c>
 8006338:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800633a:	3301      	adds	r3, #1
 800633c:	3402      	adds	r4, #2
 800633e:	a920      	add	r1, sp, #128	; 0x80
 8006340:	2202      	movs	r2, #2
 8006342:	2b07      	cmp	r3, #7
 8006344:	9429      	str	r4, [sp, #164]	; 0xa4
 8006346:	9328      	str	r3, [sp, #160]	; 0xa0
 8006348:	e889 0006 	stmia.w	r9, {r1, r2}
 800634c:	f300 839c 	bgt.w	8006a88 <_vfprintf_r+0xc50>
 8006350:	f109 0908 	add.w	r9, r9, #8
 8006354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006356:	2b80      	cmp	r3, #128	; 0x80
 8006358:	f000 82d0 	beq.w	80068fc <_vfprintf_r+0xac4>
 800635c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800635e:	ebc3 070b 	rsb	r7, r3, fp
 8006362:	2f00      	cmp	r7, #0
 8006364:	dd33      	ble.n	80063ce <_vfprintf_r+0x596>
 8006366:	4a78      	ldr	r2, [pc, #480]	; (8006548 <_vfprintf_r+0x710>)
 8006368:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800636a:	920f      	str	r2, [sp, #60]	; 0x3c
 800636c:	2f10      	cmp	r7, #16
 800636e:	dd22      	ble.n	80063b6 <_vfprintf_r+0x57e>
 8006370:	4622      	mov	r2, r4
 8006372:	f04f 0b10 	mov.w	fp, #16
 8006376:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006378:	9c08      	ldr	r4, [sp, #32]
 800637a:	e004      	b.n	8006386 <_vfprintf_r+0x54e>
 800637c:	3f10      	subs	r7, #16
 800637e:	2f10      	cmp	r7, #16
 8006380:	f109 0908 	add.w	r9, r9, #8
 8006384:	dd16      	ble.n	80063b4 <_vfprintf_r+0x57c>
 8006386:	3301      	adds	r3, #1
 8006388:	3210      	adds	r2, #16
 800638a:	2b07      	cmp	r3, #7
 800638c:	9229      	str	r2, [sp, #164]	; 0xa4
 800638e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006390:	e889 0c00 	stmia.w	r9, {sl, fp}
 8006394:	ddf2      	ble.n	800637c <_vfprintf_r+0x544>
 8006396:	aa27      	add	r2, sp, #156	; 0x9c
 8006398:	4621      	mov	r1, r4
 800639a:	4628      	mov	r0, r5
 800639c:	f003 ffa2 	bl	800a2e4 <__sprint_r>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	f47f ae79 	bne.w	8006098 <_vfprintf_r+0x260>
 80063a6:	3f10      	subs	r7, #16
 80063a8:	2f10      	cmp	r7, #16
 80063aa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80063ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80063ae:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80063b2:	dce8      	bgt.n	8006386 <_vfprintf_r+0x54e>
 80063b4:	4614      	mov	r4, r2
 80063b6:	3301      	adds	r3, #1
 80063b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063ba:	9328      	str	r3, [sp, #160]	; 0xa0
 80063bc:	443c      	add	r4, r7
 80063be:	2b07      	cmp	r3, #7
 80063c0:	9429      	str	r4, [sp, #164]	; 0xa4
 80063c2:	e889 0084 	stmia.w	r9, {r2, r7}
 80063c6:	f300 8347 	bgt.w	8006a58 <_vfprintf_r+0xc20>
 80063ca:	f109 0908 	add.w	r9, r9, #8
 80063ce:	9b07      	ldr	r3, [sp, #28]
 80063d0:	05dd      	lsls	r5, r3, #23
 80063d2:	f100 8231 	bmi.w	8006838 <_vfprintf_r+0xa00>
 80063d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80063d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80063da:	f8c9 6000 	str.w	r6, [r9]
 80063de:	3301      	adds	r3, #1
 80063e0:	440c      	add	r4, r1
 80063e2:	2b07      	cmp	r3, #7
 80063e4:	9429      	str	r4, [sp, #164]	; 0xa4
 80063e6:	f8c9 1004 	str.w	r1, [r9, #4]
 80063ea:	9328      	str	r3, [sp, #160]	; 0xa0
 80063ec:	f300 831e 	bgt.w	8006a2c <_vfprintf_r+0xbf4>
 80063f0:	f109 0908 	add.w	r9, r9, #8
 80063f4:	9b07      	ldr	r3, [sp, #28]
 80063f6:	0758      	lsls	r0, r3, #29
 80063f8:	d53f      	bpl.n	800647a <_vfprintf_r+0x642>
 80063fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063fe:	1a9d      	subs	r5, r3, r2
 8006400:	2d00      	cmp	r5, #0
 8006402:	dd3a      	ble.n	800647a <_vfprintf_r+0x642>
 8006404:	2d10      	cmp	r5, #16
 8006406:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006408:	4f4e      	ldr	r7, [pc, #312]	; (8006544 <_vfprintf_r+0x70c>)
 800640a:	dd23      	ble.n	8006454 <_vfprintf_r+0x61c>
 800640c:	4622      	mov	r2, r4
 800640e:	2610      	movs	r6, #16
 8006410:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006414:	9c08      	ldr	r4, [sp, #32]
 8006416:	e004      	b.n	8006422 <_vfprintf_r+0x5ea>
 8006418:	3d10      	subs	r5, #16
 800641a:	2d10      	cmp	r5, #16
 800641c:	f109 0908 	add.w	r9, r9, #8
 8006420:	dd17      	ble.n	8006452 <_vfprintf_r+0x61a>
 8006422:	3301      	adds	r3, #1
 8006424:	4947      	ldr	r1, [pc, #284]	; (8006544 <_vfprintf_r+0x70c>)
 8006426:	9328      	str	r3, [sp, #160]	; 0xa0
 8006428:	3210      	adds	r2, #16
 800642a:	2b07      	cmp	r3, #7
 800642c:	9229      	str	r2, [sp, #164]	; 0xa4
 800642e:	e889 0042 	stmia.w	r9, {r1, r6}
 8006432:	ddf1      	ble.n	8006418 <_vfprintf_r+0x5e0>
 8006434:	aa27      	add	r2, sp, #156	; 0x9c
 8006436:	4621      	mov	r1, r4
 8006438:	4658      	mov	r0, fp
 800643a:	f003 ff53 	bl	800a2e4 <__sprint_r>
 800643e:	2800      	cmp	r0, #0
 8006440:	f47f ae2a 	bne.w	8006098 <_vfprintf_r+0x260>
 8006444:	3d10      	subs	r5, #16
 8006446:	2d10      	cmp	r5, #16
 8006448:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800644a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800644c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006450:	dce7      	bgt.n	8006422 <_vfprintf_r+0x5ea>
 8006452:	4614      	mov	r4, r2
 8006454:	3301      	adds	r3, #1
 8006456:	442c      	add	r4, r5
 8006458:	2b07      	cmp	r3, #7
 800645a:	9429      	str	r4, [sp, #164]	; 0xa4
 800645c:	9328      	str	r3, [sp, #160]	; 0xa0
 800645e:	f8c9 7000 	str.w	r7, [r9]
 8006462:	f8c9 5004 	str.w	r5, [r9, #4]
 8006466:	dd08      	ble.n	800647a <_vfprintf_r+0x642>
 8006468:	aa27      	add	r2, sp, #156	; 0x9c
 800646a:	9908      	ldr	r1, [sp, #32]
 800646c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800646e:	f003 ff39 	bl	800a2e4 <__sprint_r>
 8006472:	2800      	cmp	r0, #0
 8006474:	f47f ae10 	bne.w	8006098 <_vfprintf_r+0x260>
 8006478:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800647a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800647c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800647e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006480:	428a      	cmp	r2, r1
 8006482:	bfac      	ite	ge
 8006484:	189b      	addge	r3, r3, r2
 8006486:	185b      	addlt	r3, r3, r1
 8006488:	930b      	str	r3, [sp, #44]	; 0x2c
 800648a:	2c00      	cmp	r4, #0
 800648c:	f040 82da 	bne.w	8006a44 <_vfprintf_r+0xc0c>
 8006490:	2300      	movs	r3, #0
 8006492:	9328      	str	r3, [sp, #160]	; 0xa0
 8006494:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006498:	e50f      	b.n	8005eba <_vfprintf_r+0x82>
 800649a:	9311      	str	r3, [sp, #68]	; 0x44
 800649c:	46ab      	mov	fp, r5
 800649e:	2a00      	cmp	r2, #0
 80064a0:	f041 803d 	bne.w	800751e <_vfprintf_r+0x16e6>
 80064a4:	9b07      	ldr	r3, [sp, #28]
 80064a6:	4829      	ldr	r0, [pc, #164]	; (800654c <_vfprintf_r+0x714>)
 80064a8:	069c      	lsls	r4, r3, #26
 80064aa:	f140 8146 	bpl.w	800673a <_vfprintf_r+0x902>
 80064ae:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80064b0:	3707      	adds	r7, #7
 80064b2:	f027 0307 	bic.w	r3, r7, #7
 80064b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80064ba:	f103 0208 	add.w	r2, r3, #8
 80064be:	920e      	str	r2, [sp, #56]	; 0x38
 80064c0:	9a07      	ldr	r2, [sp, #28]
 80064c2:	f012 0701 	ands.w	r7, r2, #1
 80064c6:	f000 82eb 	beq.w	8006aa0 <_vfprintf_r+0xc68>
 80064ca:	ea54 0305 	orrs.w	r3, r4, r5
 80064ce:	f000 8582 	beq.w	8006fd6 <_vfprintf_r+0x119e>
 80064d2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80064d6:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 80064da:	2700      	movs	r7, #0
 80064dc:	9a07      	ldr	r2, [sp, #28]
 80064de:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80064e2:	2330      	movs	r3, #48	; 0x30
 80064e4:	45bb      	cmp	fp, r7
 80064e6:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 80064ea:	f042 0302 	orr.w	r3, r2, #2
 80064ee:	f2c0 873b 	blt.w	8007368 <_vfprintf_r+0x1530>
 80064f2:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80064f6:	f043 0302 	orr.w	r3, r3, #2
 80064fa:	9307      	str	r3, [sp, #28]
 80064fc:	ae34      	add	r6, sp, #208	; 0xd0
 80064fe:	0923      	lsrs	r3, r4, #4
 8006500:	f004 010f 	and.w	r1, r4, #15
 8006504:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006508:	092a      	lsrs	r2, r5, #4
 800650a:	461c      	mov	r4, r3
 800650c:	4615      	mov	r5, r2
 800650e:	5c43      	ldrb	r3, [r0, r1]
 8006510:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8006514:	ea54 0305 	orrs.w	r3, r4, r5
 8006518:	d1f1      	bne.n	80064fe <_vfprintf_r+0x6c6>
 800651a:	e69d      	b.n	8006258 <_vfprintf_r+0x420>
 800651c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800651e:	9311      	str	r3, [sp, #68]	; 0x44
 8006520:	680a      	ldr	r2, [r1, #0]
 8006522:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8006526:	2300      	movs	r3, #0
 8006528:	460a      	mov	r2, r1
 800652a:	461f      	mov	r7, r3
 800652c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006530:	3204      	adds	r2, #4
 8006532:	2301      	movs	r3, #1
 8006534:	9309      	str	r3, [sp, #36]	; 0x24
 8006536:	46bb      	mov	fp, r7
 8006538:	9713      	str	r7, [sp, #76]	; 0x4c
 800653a:	920e      	str	r2, [sp, #56]	; 0x38
 800653c:	930d      	str	r3, [sp, #52]	; 0x34
 800653e:	ae2a      	add	r6, sp, #168	; 0xa8
 8006540:	e698      	b.n	8006274 <_vfprintf_r+0x43c>
 8006542:	bf00      	nop
 8006544:	0800ad28 	.word	0x0800ad28
 8006548:	0800ad18 	.word	0x0800ad18
 800654c:	0800acd4 	.word	0x0800acd4
 8006550:	9311      	str	r3, [sp, #68]	; 0x44
 8006552:	46ab      	mov	fp, r5
 8006554:	2a00      	cmp	r2, #0
 8006556:	f040 87ea 	bne.w	800752e <_vfprintf_r+0x16f6>
 800655a:	9b07      	ldr	r3, [sp, #28]
 800655c:	069b      	lsls	r3, r3, #26
 800655e:	d574      	bpl.n	800664a <_vfprintf_r+0x812>
 8006560:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006562:	3707      	adds	r7, #7
 8006564:	f027 0707 	bic.w	r7, r7, #7
 8006568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800656c:	f107 0108 	add.w	r1, r7, #8
 8006570:	910e      	str	r1, [sp, #56]	; 0x38
 8006572:	4614      	mov	r4, r2
 8006574:	461d      	mov	r5, r3
 8006576:	2a00      	cmp	r2, #0
 8006578:	f173 0300 	sbcs.w	r3, r3, #0
 800657c:	f2c0 843a 	blt.w	8006df4 <_vfprintf_r+0xfbc>
 8006580:	f1bb 0f00 	cmp.w	fp, #0
 8006584:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006588:	f2c0 8368 	blt.w	8006c5c <_vfprintf_r+0xe24>
 800658c:	9b07      	ldr	r3, [sp, #28]
 800658e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006592:	9307      	str	r3, [sp, #28]
 8006594:	ea54 0305 	orrs.w	r3, r4, r5
 8006598:	f47f ae44 	bne.w	8006224 <_vfprintf_r+0x3ec>
 800659c:	f1bb 0f00 	cmp.w	fp, #0
 80065a0:	f040 8408 	bne.w	8006db4 <_vfprintf_r+0xf7c>
 80065a4:	f04f 0b00 	mov.w	fp, #0
 80065a8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80065ac:	ae34      	add	r6, sp, #208	; 0xd0
 80065ae:	e656      	b.n	800625e <_vfprintf_r+0x426>
 80065b0:	9b07      	ldr	r3, [sp, #28]
 80065b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b6:	9307      	str	r3, [sp, #28]
 80065b8:	f898 3000 	ldrb.w	r3, [r8]
 80065bc:	e4b0      	b.n	8005f20 <_vfprintf_r+0xe8>
 80065be:	f898 3000 	ldrb.w	r3, [r8]
 80065c2:	2b6c      	cmp	r3, #108	; 0x6c
 80065c4:	f000 85d5 	beq.w	8007172 <_vfprintf_r+0x133a>
 80065c8:	9807      	ldr	r0, [sp, #28]
 80065ca:	f040 0010 	orr.w	r0, r0, #16
 80065ce:	9007      	str	r0, [sp, #28]
 80065d0:	e4a6      	b.n	8005f20 <_vfprintf_r+0xe8>
 80065d2:	2a00      	cmp	r2, #0
 80065d4:	f040 879f 	bne.w	8007516 <_vfprintf_r+0x16de>
 80065d8:	9b07      	ldr	r3, [sp, #28]
 80065da:	069f      	lsls	r7, r3, #26
 80065dc:	f140 84e4 	bpl.w	8006fa8 <_vfprintf_r+0x1170>
 80065e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065e4:	6813      	ldr	r3, [r2, #0]
 80065e6:	17cd      	asrs	r5, r1, #31
 80065e8:	4608      	mov	r0, r1
 80065ea:	3204      	adds	r2, #4
 80065ec:	4629      	mov	r1, r5
 80065ee:	920e      	str	r2, [sp, #56]	; 0x38
 80065f0:	e9c3 0100 	strd	r0, r1, [r3]
 80065f4:	e461      	b.n	8005eba <_vfprintf_r+0x82>
 80065f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	930c      	str	r3, [sp, #48]	; 0x30
 80065fc:	4618      	mov	r0, r3
 80065fe:	2800      	cmp	r0, #0
 8006600:	4623      	mov	r3, r4
 8006602:	f103 0304 	add.w	r3, r3, #4
 8006606:	f6ff aced 	blt.w	8005fe4 <_vfprintf_r+0x1ac>
 800660a:	930e      	str	r3, [sp, #56]	; 0x38
 800660c:	f898 3000 	ldrb.w	r3, [r8]
 8006610:	e486      	b.n	8005f20 <_vfprintf_r+0xe8>
 8006612:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006616:	2300      	movs	r3, #0
 8006618:	461c      	mov	r4, r3
 800661a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800661e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006622:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8006626:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800662a:	2809      	cmp	r0, #9
 800662c:	d9f5      	bls.n	800661a <_vfprintf_r+0x7e2>
 800662e:	940c      	str	r4, [sp, #48]	; 0x30
 8006630:	e478      	b.n	8005f24 <_vfprintf_r+0xec>
 8006632:	9311      	str	r3, [sp, #68]	; 0x44
 8006634:	46ab      	mov	fp, r5
 8006636:	2a00      	cmp	r2, #0
 8006638:	f040 8769 	bne.w	800750e <_vfprintf_r+0x16d6>
 800663c:	9b07      	ldr	r3, [sp, #28]
 800663e:	f043 0310 	orr.w	r3, r3, #16
 8006642:	9307      	str	r3, [sp, #28]
 8006644:	9b07      	ldr	r3, [sp, #28]
 8006646:	069b      	lsls	r3, r3, #26
 8006648:	d48a      	bmi.n	8006560 <_vfprintf_r+0x728>
 800664a:	9b07      	ldr	r3, [sp, #28]
 800664c:	06df      	lsls	r7, r3, #27
 800664e:	f100 8294 	bmi.w	8006b7a <_vfprintf_r+0xd42>
 8006652:	9b07      	ldr	r3, [sp, #28]
 8006654:	065e      	lsls	r6, r3, #25
 8006656:	f140 8290 	bpl.w	8006b7a <_vfprintf_r+0xd42>
 800665a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800665c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8006660:	3104      	adds	r1, #4
 8006662:	17e5      	asrs	r5, r4, #31
 8006664:	4622      	mov	r2, r4
 8006666:	462b      	mov	r3, r5
 8006668:	910e      	str	r1, [sp, #56]	; 0x38
 800666a:	e784      	b.n	8006576 <_vfprintf_r+0x73e>
 800666c:	9311      	str	r3, [sp, #68]	; 0x44
 800666e:	46ab      	mov	fp, r5
 8006670:	2a00      	cmp	r2, #0
 8006672:	f040 8770 	bne.w	8007556 <_vfprintf_r+0x171e>
 8006676:	9b07      	ldr	r3, [sp, #28]
 8006678:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800667a:	071d      	lsls	r5, r3, #28
 800667c:	f107 0707 	add.w	r7, r7, #7
 8006680:	f140 8487 	bpl.w	8006f92 <_vfprintf_r+0x115a>
 8006684:	f027 0307 	bic.w	r3, r7, #7
 8006688:	ed93 7b00 	vldr	d7, [r3]
 800668c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006690:	f103 0208 	add.w	r2, r3, #8
 8006694:	920e      	str	r2, [sp, #56]	; 0x38
 8006696:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800669a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800669e:	911a      	str	r1, [sp, #104]	; 0x68
 80066a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80066a2:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 80066a6:	f04f 32ff 	mov.w	r2, #4294967295
 80066aa:	4620      	mov	r0, r4
 80066ac:	4629      	mov	r1, r5
 80066ae:	4bb5      	ldr	r3, [pc, #724]	; (8006984 <_vfprintf_r+0xb4c>)
 80066b0:	f7fd fd90 	bl	80041d4 <__aeabi_dcmpun>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	f040 83eb 	bne.w	8006e90 <_vfprintf_r+0x1058>
 80066ba:	f04f 32ff 	mov.w	r2, #4294967295
 80066be:	4bb1      	ldr	r3, [pc, #708]	; (8006984 <_vfprintf_r+0xb4c>)
 80066c0:	4620      	mov	r0, r4
 80066c2:	4629      	mov	r1, r5
 80066c4:	f7fd fd68 	bl	8004198 <__aeabi_dcmple>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	f040 83e1 	bne.w	8006e90 <_vfprintf_r+0x1058>
 80066ce:	2200      	movs	r2, #0
 80066d0:	2300      	movs	r3, #0
 80066d2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80066d6:	f7fd fd55 	bl	8004184 <__aeabi_dcmplt>
 80066da:	2800      	cmp	r0, #0
 80066dc:	f040 864a 	bne.w	8007374 <_vfprintf_r+0x153c>
 80066e0:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80066e4:	4ea8      	ldr	r6, [pc, #672]	; (8006988 <_vfprintf_r+0xb50>)
 80066e6:	4ba9      	ldr	r3, [pc, #676]	; (800698c <_vfprintf_r+0xb54>)
 80066e8:	9907      	ldr	r1, [sp, #28]
 80066ea:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80066ee:	9107      	str	r1, [sp, #28]
 80066f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80066f2:	2203      	movs	r2, #3
 80066f4:	f04f 0b00 	mov.w	fp, #0
 80066f8:	9209      	str	r2, [sp, #36]	; 0x24
 80066fa:	2947      	cmp	r1, #71	; 0x47
 80066fc:	bfd8      	it	le
 80066fe:	461e      	movle	r6, r3
 8006700:	920d      	str	r2, [sp, #52]	; 0x34
 8006702:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8006706:	e5b1      	b.n	800626c <_vfprintf_r+0x434>
 8006708:	9b07      	ldr	r3, [sp, #28]
 800670a:	f043 0308 	orr.w	r3, r3, #8
 800670e:	9307      	str	r3, [sp, #28]
 8006710:	f898 3000 	ldrb.w	r3, [r8]
 8006714:	e404      	b.n	8005f20 <_vfprintf_r+0xe8>
 8006716:	9311      	str	r3, [sp, #68]	; 0x44
 8006718:	46ab      	mov	fp, r5
 800671a:	2a00      	cmp	r2, #0
 800671c:	f43f ad67 	beq.w	80061ee <_vfprintf_r+0x3b6>
 8006720:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006724:	e563      	b.n	80061ee <_vfprintf_r+0x3b6>
 8006726:	9311      	str	r3, [sp, #68]	; 0x44
 8006728:	46ab      	mov	fp, r5
 800672a:	2a00      	cmp	r2, #0
 800672c:	f040 870f 	bne.w	800754e <_vfprintf_r+0x1716>
 8006730:	9b07      	ldr	r3, [sp, #28]
 8006732:	4897      	ldr	r0, [pc, #604]	; (8006990 <_vfprintf_r+0xb58>)
 8006734:	069c      	lsls	r4, r3, #26
 8006736:	f53f aeba 	bmi.w	80064ae <_vfprintf_r+0x676>
 800673a:	9b07      	ldr	r3, [sp, #28]
 800673c:	06d9      	lsls	r1, r3, #27
 800673e:	f140 8398 	bpl.w	8006e72 <_vfprintf_r+0x103a>
 8006742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006744:	4613      	mov	r3, r2
 8006746:	3304      	adds	r3, #4
 8006748:	6814      	ldr	r4, [r2, #0]
 800674a:	930e      	str	r3, [sp, #56]	; 0x38
 800674c:	2500      	movs	r5, #0
 800674e:	e6b7      	b.n	80064c0 <_vfprintf_r+0x688>
 8006750:	f898 3000 	ldrb.w	r3, [r8]
 8006754:	2900      	cmp	r1, #0
 8006756:	f47f abe3 	bne.w	8005f20 <_vfprintf_r+0xe8>
 800675a:	2201      	movs	r2, #1
 800675c:	2120      	movs	r1, #32
 800675e:	f7ff bbdf 	b.w	8005f20 <_vfprintf_r+0xe8>
 8006762:	9b07      	ldr	r3, [sp, #28]
 8006764:	f043 0301 	orr.w	r3, r3, #1
 8006768:	9307      	str	r3, [sp, #28]
 800676a:	f898 3000 	ldrb.w	r3, [r8]
 800676e:	f7ff bbd7 	b.w	8005f20 <_vfprintf_r+0xe8>
 8006772:	9b07      	ldr	r3, [sp, #28]
 8006774:	f043 0320 	orr.w	r3, r3, #32
 8006778:	9307      	str	r3, [sp, #28]
 800677a:	f898 3000 	ldrb.w	r3, [r8]
 800677e:	f7ff bbcf 	b.w	8005f20 <_vfprintf_r+0xe8>
 8006782:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006784:	9311      	str	r3, [sp, #68]	; 0x44
 8006786:	6816      	ldr	r6, [r2, #0]
 8006788:	2400      	movs	r4, #0
 800678a:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 800678e:	1d17      	adds	r7, r2, #4
 8006790:	2e00      	cmp	r6, #0
 8006792:	f000 85b7 	beq.w	8007304 <_vfprintf_r+0x14cc>
 8006796:	2d00      	cmp	r5, #0
 8006798:	f2c0 8502 	blt.w	80071a0 <_vfprintf_r+0x1368>
 800679c:	462a      	mov	r2, r5
 800679e:	4621      	mov	r1, r4
 80067a0:	4630      	mov	r0, r6
 80067a2:	f002 fed5 	bl	8009550 <memchr>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	f000 861c 	beq.w	80073e4 <_vfprintf_r+0x15ac>
 80067ac:	1b83      	subs	r3, r0, r6
 80067ae:	930d      	str	r3, [sp, #52]	; 0x34
 80067b0:	46a3      	mov	fp, r4
 80067b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80067b6:	970e      	str	r7, [sp, #56]	; 0x38
 80067b8:	9309      	str	r3, [sp, #36]	; 0x24
 80067ba:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 80067be:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80067c2:	e553      	b.n	800626c <_vfprintf_r+0x434>
 80067c4:	f898 3000 	ldrb.w	r3, [r8]
 80067c8:	2201      	movs	r2, #1
 80067ca:	212b      	movs	r1, #43	; 0x2b
 80067cc:	f7ff bba8 	b.w	8005f20 <_vfprintf_r+0xe8>
 80067d0:	486f      	ldr	r0, [pc, #444]	; (8006990 <_vfprintf_r+0xb58>)
 80067d2:	9211      	str	r2, [sp, #68]	; 0x44
 80067d4:	f1bb 0f00 	cmp.w	fp, #0
 80067d8:	f040 8173 	bne.w	8006ac2 <_vfprintf_r+0xc8a>
 80067dc:	465f      	mov	r7, fp
 80067de:	e6e1      	b.n	80065a4 <_vfprintf_r+0x76c>
 80067e0:	9311      	str	r3, [sp, #68]	; 0x44
 80067e2:	2a00      	cmp	r2, #0
 80067e4:	f040 86ab 	bne.w	800753e <_vfprintf_r+0x1706>
 80067e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80067ea:	2a00      	cmp	r2, #0
 80067ec:	f43f ac4d 	beq.w	800608a <_vfprintf_r+0x252>
 80067f0:	2300      	movs	r3, #0
 80067f2:	2101      	movs	r1, #1
 80067f4:	461f      	mov	r7, r3
 80067f6:	9109      	str	r1, [sp, #36]	; 0x24
 80067f8:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 80067fc:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006800:	469b      	mov	fp, r3
 8006802:	9313      	str	r3, [sp, #76]	; 0x4c
 8006804:	910d      	str	r1, [sp, #52]	; 0x34
 8006806:	ae2a      	add	r6, sp, #168	; 0xa8
 8006808:	e534      	b.n	8006274 <_vfprintf_r+0x43c>
 800680a:	f1bb 0f00 	cmp.w	fp, #0
 800680e:	f000 85da 	beq.w	80073c6 <_vfprintf_r+0x158e>
 8006812:	2700      	movs	r7, #0
 8006814:	2400      	movs	r4, #0
 8006816:	2500      	movs	r5, #0
 8006818:	e475      	b.n	8006106 <_vfprintf_r+0x2ce>
 800681a:	485d      	ldr	r0, [pc, #372]	; (8006990 <_vfprintf_r+0xb58>)
 800681c:	9307      	str	r3, [sp, #28]
 800681e:	9211      	str	r2, [sp, #68]	; 0x44
 8006820:	ea54 0305 	orrs.w	r3, r4, r5
 8006824:	970e      	str	r7, [sp, #56]	; 0x38
 8006826:	f04f 0700 	mov.w	r7, #0
 800682a:	f47f ae67 	bne.w	80064fc <_vfprintf_r+0x6c4>
 800682e:	2400      	movs	r4, #0
 8006830:	2500      	movs	r5, #0
 8006832:	e663      	b.n	80064fc <_vfprintf_r+0x6c4>
 8006834:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006836:	e56d      	b.n	8006314 <_vfprintf_r+0x4dc>
 8006838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800683a:	2b65      	cmp	r3, #101	; 0x65
 800683c:	f340 80ae 	ble.w	800699c <_vfprintf_r+0xb64>
 8006840:	2200      	movs	r2, #0
 8006842:	2300      	movs	r3, #0
 8006844:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006848:	f7fd fc92 	bl	8004170 <__aeabi_dcmpeq>
 800684c:	2800      	cmp	r0, #0
 800684e:	f000 813a 	beq.w	8006ac6 <_vfprintf_r+0xc8e>
 8006852:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006854:	4a4f      	ldr	r2, [pc, #316]	; (8006994 <_vfprintf_r+0xb5c>)
 8006856:	f8c9 2000 	str.w	r2, [r9]
 800685a:	3301      	adds	r3, #1
 800685c:	3401      	adds	r4, #1
 800685e:	2201      	movs	r2, #1
 8006860:	2b07      	cmp	r3, #7
 8006862:	9429      	str	r4, [sp, #164]	; 0xa4
 8006864:	9328      	str	r3, [sp, #160]	; 0xa0
 8006866:	f8c9 2004 	str.w	r2, [r9, #4]
 800686a:	f300 83ce 	bgt.w	800700a <_vfprintf_r+0x11d2>
 800686e:	f109 0908 	add.w	r9, r9, #8
 8006872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006874:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006876:	4293      	cmp	r3, r2
 8006878:	db03      	blt.n	8006882 <_vfprintf_r+0xa4a>
 800687a:	9b07      	ldr	r3, [sp, #28]
 800687c:	07d8      	lsls	r0, r3, #31
 800687e:	f57f adb9 	bpl.w	80063f4 <_vfprintf_r+0x5bc>
 8006882:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006884:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006886:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006888:	f8c9 2000 	str.w	r2, [r9]
 800688c:	3301      	adds	r3, #1
 800688e:	440c      	add	r4, r1
 8006890:	2b07      	cmp	r3, #7
 8006892:	9429      	str	r4, [sp, #164]	; 0xa4
 8006894:	f8c9 1004 	str.w	r1, [r9, #4]
 8006898:	9328      	str	r3, [sp, #160]	; 0xa0
 800689a:	f300 8474 	bgt.w	8007186 <_vfprintf_r+0x134e>
 800689e:	f109 0908 	add.w	r9, r9, #8
 80068a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068a4:	1e5d      	subs	r5, r3, #1
 80068a6:	2d00      	cmp	r5, #0
 80068a8:	f77f ada4 	ble.w	80063f4 <_vfprintf_r+0x5bc>
 80068ac:	4a3a      	ldr	r2, [pc, #232]	; (8006998 <_vfprintf_r+0xb60>)
 80068ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80068b0:	920f      	str	r2, [sp, #60]	; 0x3c
 80068b2:	2d10      	cmp	r5, #16
 80068b4:	f340 81b4 	ble.w	8006c20 <_vfprintf_r+0xde8>
 80068b8:	2610      	movs	r6, #16
 80068ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80068bc:	f8dd b020 	ldr.w	fp, [sp, #32]
 80068c0:	e005      	b.n	80068ce <_vfprintf_r+0xa96>
 80068c2:	f109 0908 	add.w	r9, r9, #8
 80068c6:	3d10      	subs	r5, #16
 80068c8:	2d10      	cmp	r5, #16
 80068ca:	f340 81a9 	ble.w	8006c20 <_vfprintf_r+0xde8>
 80068ce:	3301      	adds	r3, #1
 80068d0:	3410      	adds	r4, #16
 80068d2:	2b07      	cmp	r3, #7
 80068d4:	9429      	str	r4, [sp, #164]	; 0xa4
 80068d6:	9328      	str	r3, [sp, #160]	; 0xa0
 80068d8:	f8c9 a000 	str.w	sl, [r9]
 80068dc:	f8c9 6004 	str.w	r6, [r9, #4]
 80068e0:	ddef      	ble.n	80068c2 <_vfprintf_r+0xa8a>
 80068e2:	aa27      	add	r2, sp, #156	; 0x9c
 80068e4:	4659      	mov	r1, fp
 80068e6:	4638      	mov	r0, r7
 80068e8:	f003 fcfc 	bl	800a2e4 <__sprint_r>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	f47f abd3 	bne.w	8006098 <_vfprintf_r+0x260>
 80068f2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80068f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80068f6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80068fa:	e7e4      	b.n	80068c6 <_vfprintf_r+0xa8e>
 80068fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006900:	1a9f      	subs	r7, r3, r2
 8006902:	2f00      	cmp	r7, #0
 8006904:	f77f ad2a 	ble.w	800635c <_vfprintf_r+0x524>
 8006908:	4a23      	ldr	r2, [pc, #140]	; (8006998 <_vfprintf_r+0xb60>)
 800690a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800690c:	920f      	str	r2, [sp, #60]	; 0x3c
 800690e:	2f10      	cmp	r7, #16
 8006910:	dd2b      	ble.n	800696a <_vfprintf_r+0xb32>
 8006912:	464a      	mov	r2, r9
 8006914:	4621      	mov	r1, r4
 8006916:	46b9      	mov	r9, r7
 8006918:	2510      	movs	r5, #16
 800691a:	4637      	mov	r7, r6
 800691c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800691e:	9e08      	ldr	r6, [sp, #32]
 8006920:	e006      	b.n	8006930 <_vfprintf_r+0xaf8>
 8006922:	f1a9 0910 	sub.w	r9, r9, #16
 8006926:	f1b9 0f10 	cmp.w	r9, #16
 800692a:	f102 0208 	add.w	r2, r2, #8
 800692e:	dd18      	ble.n	8006962 <_vfprintf_r+0xb2a>
 8006930:	3301      	adds	r3, #1
 8006932:	3110      	adds	r1, #16
 8006934:	2b07      	cmp	r3, #7
 8006936:	9129      	str	r1, [sp, #164]	; 0xa4
 8006938:	9328      	str	r3, [sp, #160]	; 0xa0
 800693a:	f8c2 a000 	str.w	sl, [r2]
 800693e:	6055      	str	r5, [r2, #4]
 8006940:	ddef      	ble.n	8006922 <_vfprintf_r+0xaea>
 8006942:	aa27      	add	r2, sp, #156	; 0x9c
 8006944:	4631      	mov	r1, r6
 8006946:	4620      	mov	r0, r4
 8006948:	f003 fccc 	bl	800a2e4 <__sprint_r>
 800694c:	2800      	cmp	r0, #0
 800694e:	f47f aba3 	bne.w	8006098 <_vfprintf_r+0x260>
 8006952:	f1a9 0910 	sub.w	r9, r9, #16
 8006956:	f1b9 0f10 	cmp.w	r9, #16
 800695a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800695c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800695e:	aa34      	add	r2, sp, #208	; 0xd0
 8006960:	dce6      	bgt.n	8006930 <_vfprintf_r+0xaf8>
 8006962:	463e      	mov	r6, r7
 8006964:	460c      	mov	r4, r1
 8006966:	464f      	mov	r7, r9
 8006968:	4691      	mov	r9, r2
 800696a:	3301      	adds	r3, #1
 800696c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800696e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006970:	443c      	add	r4, r7
 8006972:	2b07      	cmp	r3, #7
 8006974:	9429      	str	r4, [sp, #164]	; 0xa4
 8006976:	e889 0084 	stmia.w	r9, {r2, r7}
 800697a:	f300 822b 	bgt.w	8006dd4 <_vfprintf_r+0xf9c>
 800697e:	f109 0908 	add.w	r9, r9, #8
 8006982:	e4eb      	b.n	800635c <_vfprintf_r+0x524>
 8006984:	7fefffff 	.word	0x7fefffff
 8006988:	0800acc8 	.word	0x0800acc8
 800698c:	0800acc4 	.word	0x0800acc4
 8006990:	0800ace8 	.word	0x0800ace8
 8006994:	0800ad04 	.word	0x0800ad04
 8006998:	0800ad18 	.word	0x0800ad18
 800699c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800699e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	f340 81d0 	ble.w	8006d46 <_vfprintf_r+0xf0e>
 80069a6:	3501      	adds	r5, #1
 80069a8:	3401      	adds	r4, #1
 80069aa:	2301      	movs	r3, #1
 80069ac:	2d07      	cmp	r5, #7
 80069ae:	9429      	str	r4, [sp, #164]	; 0xa4
 80069b0:	9528      	str	r5, [sp, #160]	; 0xa0
 80069b2:	f8c9 6000 	str.w	r6, [r9]
 80069b6:	f8c9 3004 	str.w	r3, [r9, #4]
 80069ba:	f300 81e1 	bgt.w	8006d80 <_vfprintf_r+0xf48>
 80069be:	f109 0908 	add.w	r9, r9, #8
 80069c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80069c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069c6:	f8c9 3000 	str.w	r3, [r9]
 80069ca:	3501      	adds	r5, #1
 80069cc:	4414      	add	r4, r2
 80069ce:	2d07      	cmp	r5, #7
 80069d0:	9429      	str	r4, [sp, #164]	; 0xa4
 80069d2:	9528      	str	r5, [sp, #160]	; 0xa0
 80069d4:	f8c9 2004 	str.w	r2, [r9, #4]
 80069d8:	f300 81df 	bgt.w	8006d9a <_vfprintf_r+0xf62>
 80069dc:	f109 0908 	add.w	r9, r9, #8
 80069e0:	2300      	movs	r3, #0
 80069e2:	2200      	movs	r2, #0
 80069e4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80069e8:	f7fd fbc2 	bl	8004170 <__aeabi_dcmpeq>
 80069ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f040 80cc 	bne.w	8006b8c <_vfprintf_r+0xd54>
 80069f4:	3b01      	subs	r3, #1
 80069f6:	3501      	adds	r5, #1
 80069f8:	3601      	adds	r6, #1
 80069fa:	441c      	add	r4, r3
 80069fc:	2d07      	cmp	r5, #7
 80069fe:	9528      	str	r5, [sp, #160]	; 0xa0
 8006a00:	9429      	str	r4, [sp, #164]	; 0xa4
 8006a02:	f8c9 6000 	str.w	r6, [r9]
 8006a06:	f8c9 3004 	str.w	r3, [r9, #4]
 8006a0a:	f300 81ac 	bgt.w	8006d66 <_vfprintf_r+0xf2e>
 8006a0e:	f109 0908 	add.w	r9, r9, #8
 8006a12:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006a14:	f8c9 2004 	str.w	r2, [r9, #4]
 8006a18:	3501      	adds	r5, #1
 8006a1a:	4414      	add	r4, r2
 8006a1c:	ab23      	add	r3, sp, #140	; 0x8c
 8006a1e:	2d07      	cmp	r5, #7
 8006a20:	9429      	str	r4, [sp, #164]	; 0xa4
 8006a22:	9528      	str	r5, [sp, #160]	; 0xa0
 8006a24:	f8c9 3000 	str.w	r3, [r9]
 8006a28:	f77f ace2 	ble.w	80063f0 <_vfprintf_r+0x5b8>
 8006a2c:	aa27      	add	r2, sp, #156	; 0x9c
 8006a2e:	9908      	ldr	r1, [sp, #32]
 8006a30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a32:	f003 fc57 	bl	800a2e4 <__sprint_r>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	f47f ab2e 	bne.w	8006098 <_vfprintf_r+0x260>
 8006a3c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006a3e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006a42:	e4d7      	b.n	80063f4 <_vfprintf_r+0x5bc>
 8006a44:	aa27      	add	r2, sp, #156	; 0x9c
 8006a46:	9908      	ldr	r1, [sp, #32]
 8006a48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a4a:	f003 fc4b 	bl	800a2e4 <__sprint_r>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	f43f ad1e 	beq.w	8006490 <_vfprintf_r+0x658>
 8006a54:	f7ff bb20 	b.w	8006098 <_vfprintf_r+0x260>
 8006a58:	aa27      	add	r2, sp, #156	; 0x9c
 8006a5a:	9908      	ldr	r1, [sp, #32]
 8006a5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a5e:	f003 fc41 	bl	800a2e4 <__sprint_r>
 8006a62:	2800      	cmp	r0, #0
 8006a64:	f47f ab18 	bne.w	8006098 <_vfprintf_r+0x260>
 8006a68:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006a6a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006a6e:	e4ae      	b.n	80063ce <_vfprintf_r+0x596>
 8006a70:	aa27      	add	r2, sp, #156	; 0x9c
 8006a72:	9908      	ldr	r1, [sp, #32]
 8006a74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a76:	f003 fc35 	bl	800a2e4 <__sprint_r>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	f47f ab0c 	bne.w	8006098 <_vfprintf_r+0x260>
 8006a80:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006a82:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006a86:	e455      	b.n	8006334 <_vfprintf_r+0x4fc>
 8006a88:	aa27      	add	r2, sp, #156	; 0x9c
 8006a8a:	9908      	ldr	r1, [sp, #32]
 8006a8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a8e:	f003 fc29 	bl	800a2e4 <__sprint_r>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	f47f ab00 	bne.w	8006098 <_vfprintf_r+0x260>
 8006a98:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006a9a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006a9e:	e459      	b.n	8006354 <_vfprintf_r+0x51c>
 8006aa0:	f1bb 0f00 	cmp.w	fp, #0
 8006aa4:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006aa8:	f2c0 830d 	blt.w	80070c6 <_vfprintf_r+0x128e>
 8006aac:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006ab0:	9307      	str	r3, [sp, #28]
 8006ab2:	ea54 0305 	orrs.w	r3, r4, r5
 8006ab6:	f47f ad21 	bne.w	80064fc <_vfprintf_r+0x6c4>
 8006aba:	f1bb 0f00 	cmp.w	fp, #0
 8006abe:	f43f ae8d 	beq.w	80067dc <_vfprintf_r+0x9a4>
 8006ac2:	2700      	movs	r7, #0
 8006ac4:	e6b3      	b.n	800682e <_vfprintf_r+0x9f6>
 8006ac6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006ac8:	2d00      	cmp	r5, #0
 8006aca:	f340 82aa 	ble.w	8007022 <_vfprintf_r+0x11ea>
 8006ace:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ad0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	bfa8      	it	ge
 8006ad6:	4613      	movge	r3, r2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	461d      	mov	r5, r3
 8006adc:	dd0d      	ble.n	8006afa <_vfprintf_r+0xcc2>
 8006ade:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006ae0:	f8c9 6000 	str.w	r6, [r9]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	442c      	add	r4, r5
 8006ae8:	2b07      	cmp	r3, #7
 8006aea:	9429      	str	r4, [sp, #164]	; 0xa4
 8006aec:	f8c9 5004 	str.w	r5, [r9, #4]
 8006af0:	9328      	str	r3, [sp, #160]	; 0xa0
 8006af2:	f300 8387 	bgt.w	8007204 <_vfprintf_r+0x13cc>
 8006af6:	f109 0908 	add.w	r9, r9, #8
 8006afa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006afc:	2d00      	cmp	r5, #0
 8006afe:	bfa8      	it	ge
 8006b00:	1b5b      	subge	r3, r3, r5
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	461d      	mov	r5, r3
 8006b06:	f340 80be 	ble.w	8006c86 <_vfprintf_r+0xe4e>
 8006b0a:	4ab9      	ldr	r2, [pc, #740]	; (8006df0 <_vfprintf_r+0xfb8>)
 8006b0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006b0e:	920f      	str	r2, [sp, #60]	; 0x3c
 8006b10:	2d10      	cmp	r5, #16
 8006b12:	f340 826d 	ble.w	8006ff0 <_vfprintf_r+0x11b8>
 8006b16:	4622      	mov	r2, r4
 8006b18:	2710      	movs	r7, #16
 8006b1a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006b1e:	9c08      	ldr	r4, [sp, #32]
 8006b20:	e005      	b.n	8006b2e <_vfprintf_r+0xcf6>
 8006b22:	f109 0908 	add.w	r9, r9, #8
 8006b26:	3d10      	subs	r5, #16
 8006b28:	2d10      	cmp	r5, #16
 8006b2a:	f340 8260 	ble.w	8006fee <_vfprintf_r+0x11b6>
 8006b2e:	3301      	adds	r3, #1
 8006b30:	3210      	adds	r2, #16
 8006b32:	2b07      	cmp	r3, #7
 8006b34:	9229      	str	r2, [sp, #164]	; 0xa4
 8006b36:	9328      	str	r3, [sp, #160]	; 0xa0
 8006b38:	f8c9 a000 	str.w	sl, [r9]
 8006b3c:	f8c9 7004 	str.w	r7, [r9, #4]
 8006b40:	ddef      	ble.n	8006b22 <_vfprintf_r+0xcea>
 8006b42:	aa27      	add	r2, sp, #156	; 0x9c
 8006b44:	4621      	mov	r1, r4
 8006b46:	4658      	mov	r0, fp
 8006b48:	f003 fbcc 	bl	800a2e4 <__sprint_r>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	f47f aaa3 	bne.w	8006098 <_vfprintf_r+0x260>
 8006b52:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006b54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006b56:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006b5a:	e7e4      	b.n	8006b26 <_vfprintf_r+0xcee>
 8006b5c:	aa27      	add	r2, sp, #156	; 0x9c
 8006b5e:	9908      	ldr	r1, [sp, #32]
 8006b60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b62:	f003 fbbf 	bl	800a2e4 <__sprint_r>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	f47f aa96 	bne.w	8006098 <_vfprintf_r+0x260>
 8006b6c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006b70:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006b72:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006b76:	f7ff bbcd 	b.w	8006314 <_vfprintf_r+0x4dc>
 8006b7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b7c:	6814      	ldr	r4, [r2, #0]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	3304      	adds	r3, #4
 8006b82:	17e5      	asrs	r5, r4, #31
 8006b84:	930e      	str	r3, [sp, #56]	; 0x38
 8006b86:	4622      	mov	r2, r4
 8006b88:	462b      	mov	r3, r5
 8006b8a:	e4f4      	b.n	8006576 <_vfprintf_r+0x73e>
 8006b8c:	1e5e      	subs	r6, r3, #1
 8006b8e:	2e00      	cmp	r6, #0
 8006b90:	f77f af3f 	ble.w	8006a12 <_vfprintf_r+0xbda>
 8006b94:	4b96      	ldr	r3, [pc, #600]	; (8006df0 <_vfprintf_r+0xfb8>)
 8006b96:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b98:	2e10      	cmp	r6, #16
 8006b9a:	f340 8110 	ble.w	8006dbe <_vfprintf_r+0xf86>
 8006b9e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8006ba2:	2710      	movs	r7, #16
 8006ba4:	46b0      	mov	r8, r6
 8006ba6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006baa:	9e08      	ldr	r6, [sp, #32]
 8006bac:	e007      	b.n	8006bbe <_vfprintf_r+0xd86>
 8006bae:	f109 0908 	add.w	r9, r9, #8
 8006bb2:	f1a8 0810 	sub.w	r8, r8, #16
 8006bb6:	f1b8 0f10 	cmp.w	r8, #16
 8006bba:	f340 80fd 	ble.w	8006db8 <_vfprintf_r+0xf80>
 8006bbe:	3501      	adds	r5, #1
 8006bc0:	3410      	adds	r4, #16
 8006bc2:	2d07      	cmp	r5, #7
 8006bc4:	9429      	str	r4, [sp, #164]	; 0xa4
 8006bc6:	9528      	str	r5, [sp, #160]	; 0xa0
 8006bc8:	f8c9 a000 	str.w	sl, [r9]
 8006bcc:	f8c9 7004 	str.w	r7, [r9, #4]
 8006bd0:	dded      	ble.n	8006bae <_vfprintf_r+0xd76>
 8006bd2:	aa27      	add	r2, sp, #156	; 0x9c
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	4658      	mov	r0, fp
 8006bd8:	f003 fb84 	bl	800a2e4 <__sprint_r>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	f47f aa5b 	bne.w	8006098 <_vfprintf_r+0x260>
 8006be2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006be4:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006be6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006bea:	e7e2      	b.n	8006bb2 <_vfprintf_r+0xd7a>
 8006bec:	9907      	ldr	r1, [sp, #28]
 8006bee:	f011 0210 	ands.w	r2, r1, #16
 8006bf2:	d020      	beq.n	8006c36 <_vfprintf_r+0xdfe>
 8006bf4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006bf6:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006bfa:	f1bb 0f00 	cmp.w	fp, #0
 8006bfe:	6804      	ldr	r4, [r0, #0]
 8006c00:	f100 0704 	add.w	r7, r0, #4
 8006c04:	f04f 0500 	mov.w	r5, #0
 8006c08:	db26      	blt.n	8006c58 <_vfprintf_r+0xe20>
 8006c0a:	460a      	mov	r2, r1
 8006c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c10:	9207      	str	r2, [sp, #28]
 8006c12:	ea54 0205 	orrs.w	r2, r4, r5
 8006c16:	970e      	str	r7, [sp, #56]	; 0x38
 8006c18:	461f      	mov	r7, r3
 8006c1a:	f47f ab03 	bne.w	8006224 <_vfprintf_r+0x3ec>
 8006c1e:	e4bd      	b.n	800659c <_vfprintf_r+0x764>
 8006c20:	3301      	adds	r3, #1
 8006c22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c24:	9328      	str	r3, [sp, #160]	; 0xa0
 8006c26:	442c      	add	r4, r5
 8006c28:	2b07      	cmp	r3, #7
 8006c2a:	9429      	str	r4, [sp, #164]	; 0xa4
 8006c2c:	e889 0024 	stmia.w	r9, {r2, r5}
 8006c30:	f77f abde 	ble.w	80063f0 <_vfprintf_r+0x5b8>
 8006c34:	e6fa      	b.n	8006a2c <_vfprintf_r+0xbf4>
 8006c36:	9907      	ldr	r1, [sp, #28]
 8006c38:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8006c3c:	f040 824a 	bne.w	80070d4 <_vfprintf_r+0x129c>
 8006c40:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006c42:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006c46:	f1bb 0f00 	cmp.w	fp, #0
 8006c4a:	680c      	ldr	r4, [r1, #0]
 8006c4c:	f101 0704 	add.w	r7, r1, #4
 8006c50:	f04f 0500 	mov.w	r5, #0
 8006c54:	f280 811a 	bge.w	8006e8c <_vfprintf_r+0x1054>
 8006c58:	970e      	str	r7, [sp, #56]	; 0x38
 8006c5a:	461f      	mov	r7, r3
 8006c5c:	ea54 0305 	orrs.w	r3, r4, r5
 8006c60:	f47f aae0 	bne.w	8006224 <_vfprintf_r+0x3ec>
 8006c64:	ae44      	add	r6, sp, #272	; 0x110
 8006c66:	3430      	adds	r4, #48	; 0x30
 8006c68:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8006c6c:	f7ff baf4 	b.w	8006258 <_vfprintf_r+0x420>
 8006c70:	aa27      	add	r2, sp, #156	; 0x9c
 8006c72:	9908      	ldr	r1, [sp, #32]
 8006c74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006c76:	f003 fb35 	bl	800a2e4 <__sprint_r>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	f47f aa0c 	bne.w	8006098 <_vfprintf_r+0x260>
 8006c80:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006c82:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006c86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006c88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c8a:	4432      	add	r2, r6
 8006c8c:	4617      	mov	r7, r2
 8006c8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c90:	4293      	cmp	r3, r2
 8006c92:	db47      	blt.n	8006d24 <_vfprintf_r+0xeec>
 8006c94:	9a07      	ldr	r2, [sp, #28]
 8006c96:	07d2      	lsls	r2, r2, #31
 8006c98:	d444      	bmi.n	8006d24 <_vfprintf_r+0xeec>
 8006c9a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006c9c:	440e      	add	r6, r1
 8006c9e:	1bf5      	subs	r5, r6, r7
 8006ca0:	1acb      	subs	r3, r1, r3
 8006ca2:	429d      	cmp	r5, r3
 8006ca4:	bfa8      	it	ge
 8006ca6:	461d      	movge	r5, r3
 8006ca8:	2d00      	cmp	r5, #0
 8006caa:	462e      	mov	r6, r5
 8006cac:	dd0d      	ble.n	8006cca <_vfprintf_r+0xe92>
 8006cae:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8006cb0:	f8c9 7000 	str.w	r7, [r9]
 8006cb4:	3201      	adds	r2, #1
 8006cb6:	442c      	add	r4, r5
 8006cb8:	2a07      	cmp	r2, #7
 8006cba:	9429      	str	r4, [sp, #164]	; 0xa4
 8006cbc:	f8c9 5004 	str.w	r5, [r9, #4]
 8006cc0:	9228      	str	r2, [sp, #160]	; 0xa0
 8006cc2:	f300 832e 	bgt.w	8007322 <_vfprintf_r+0x14ea>
 8006cc6:	f109 0908 	add.w	r9, r9, #8
 8006cca:	2e00      	cmp	r6, #0
 8006ccc:	bfac      	ite	ge
 8006cce:	1b9d      	subge	r5, r3, r6
 8006cd0:	461d      	movlt	r5, r3
 8006cd2:	2d00      	cmp	r5, #0
 8006cd4:	f77f ab8e 	ble.w	80063f4 <_vfprintf_r+0x5bc>
 8006cd8:	4a45      	ldr	r2, [pc, #276]	; (8006df0 <_vfprintf_r+0xfb8>)
 8006cda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006cdc:	920f      	str	r2, [sp, #60]	; 0x3c
 8006cde:	2d10      	cmp	r5, #16
 8006ce0:	dd9e      	ble.n	8006c20 <_vfprintf_r+0xde8>
 8006ce2:	2610      	movs	r6, #16
 8006ce4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006ce6:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006cea:	e004      	b.n	8006cf6 <_vfprintf_r+0xebe>
 8006cec:	f109 0908 	add.w	r9, r9, #8
 8006cf0:	3d10      	subs	r5, #16
 8006cf2:	2d10      	cmp	r5, #16
 8006cf4:	dd94      	ble.n	8006c20 <_vfprintf_r+0xde8>
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	3410      	adds	r4, #16
 8006cfa:	2b07      	cmp	r3, #7
 8006cfc:	9429      	str	r4, [sp, #164]	; 0xa4
 8006cfe:	9328      	str	r3, [sp, #160]	; 0xa0
 8006d00:	f8c9 a000 	str.w	sl, [r9]
 8006d04:	f8c9 6004 	str.w	r6, [r9, #4]
 8006d08:	ddf0      	ble.n	8006cec <_vfprintf_r+0xeb4>
 8006d0a:	aa27      	add	r2, sp, #156	; 0x9c
 8006d0c:	4659      	mov	r1, fp
 8006d0e:	4638      	mov	r0, r7
 8006d10:	f003 fae8 	bl	800a2e4 <__sprint_r>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	f47f a9bf 	bne.w	8006098 <_vfprintf_r+0x260>
 8006d1a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006d1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006d1e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006d22:	e7e5      	b.n	8006cf0 <_vfprintf_r+0xeb8>
 8006d24:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8006d26:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006d28:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006d2a:	f8c9 1000 	str.w	r1, [r9]
 8006d2e:	3201      	adds	r2, #1
 8006d30:	4404      	add	r4, r0
 8006d32:	2a07      	cmp	r2, #7
 8006d34:	9429      	str	r4, [sp, #164]	; 0xa4
 8006d36:	f8c9 0004 	str.w	r0, [r9, #4]
 8006d3a:	9228      	str	r2, [sp, #160]	; 0xa0
 8006d3c:	f300 82cf 	bgt.w	80072de <_vfprintf_r+0x14a6>
 8006d40:	f109 0908 	add.w	r9, r9, #8
 8006d44:	e7a9      	b.n	8006c9a <_vfprintf_r+0xe62>
 8006d46:	9b07      	ldr	r3, [sp, #28]
 8006d48:	07df      	lsls	r7, r3, #31
 8006d4a:	f53f ae2c 	bmi.w	80069a6 <_vfprintf_r+0xb6e>
 8006d4e:	3501      	adds	r5, #1
 8006d50:	3401      	adds	r4, #1
 8006d52:	2301      	movs	r3, #1
 8006d54:	2d07      	cmp	r5, #7
 8006d56:	9429      	str	r4, [sp, #164]	; 0xa4
 8006d58:	9528      	str	r5, [sp, #160]	; 0xa0
 8006d5a:	f8c9 6000 	str.w	r6, [r9]
 8006d5e:	f8c9 3004 	str.w	r3, [r9, #4]
 8006d62:	f77f ae54 	ble.w	8006a0e <_vfprintf_r+0xbd6>
 8006d66:	aa27      	add	r2, sp, #156	; 0x9c
 8006d68:	9908      	ldr	r1, [sp, #32]
 8006d6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d6c:	f003 faba 	bl	800a2e4 <__sprint_r>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	f47f a991 	bne.w	8006098 <_vfprintf_r+0x260>
 8006d76:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006d78:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006d7a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006d7e:	e648      	b.n	8006a12 <_vfprintf_r+0xbda>
 8006d80:	aa27      	add	r2, sp, #156	; 0x9c
 8006d82:	9908      	ldr	r1, [sp, #32]
 8006d84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d86:	f003 faad 	bl	800a2e4 <__sprint_r>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	f47f a984 	bne.w	8006098 <_vfprintf_r+0x260>
 8006d90:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006d92:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006d94:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006d98:	e613      	b.n	80069c2 <_vfprintf_r+0xb8a>
 8006d9a:	aa27      	add	r2, sp, #156	; 0x9c
 8006d9c:	9908      	ldr	r1, [sp, #32]
 8006d9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006da0:	f003 faa0 	bl	800a2e4 <__sprint_r>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	f47f a977 	bne.w	8006098 <_vfprintf_r+0x260>
 8006daa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006dac:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006dae:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006db2:	e615      	b.n	80069e0 <_vfprintf_r+0xba8>
 8006db4:	2400      	movs	r4, #0
 8006db6:	e755      	b.n	8006c64 <_vfprintf_r+0xe2c>
 8006db8:	4646      	mov	r6, r8
 8006dba:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8006dbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dc0:	3501      	adds	r5, #1
 8006dc2:	4434      	add	r4, r6
 8006dc4:	2d07      	cmp	r5, #7
 8006dc6:	9429      	str	r4, [sp, #164]	; 0xa4
 8006dc8:	9528      	str	r5, [sp, #160]	; 0xa0
 8006dca:	e889 0048 	stmia.w	r9, {r3, r6}
 8006dce:	f77f ae1e 	ble.w	8006a0e <_vfprintf_r+0xbd6>
 8006dd2:	e7c8      	b.n	8006d66 <_vfprintf_r+0xf2e>
 8006dd4:	aa27      	add	r2, sp, #156	; 0x9c
 8006dd6:	9908      	ldr	r1, [sp, #32]
 8006dd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006dda:	f003 fa83 	bl	800a2e4 <__sprint_r>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	f47f a95a 	bne.w	8006098 <_vfprintf_r+0x260>
 8006de4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006de6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006dea:	f7ff bab7 	b.w	800635c <_vfprintf_r+0x524>
 8006dee:	bf00      	nop
 8006df0:	0800ad18 	.word	0x0800ad18
 8006df4:	4264      	negs	r4, r4
 8006df6:	f04f 072d 	mov.w	r7, #45	; 0x2d
 8006dfa:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8006dfe:	f1bb 0f00 	cmp.w	fp, #0
 8006e02:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006e06:	f6ff aa0d 	blt.w	8006224 <_vfprintf_r+0x3ec>
 8006e0a:	9b07      	ldr	r3, [sp, #28]
 8006e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e10:	9307      	str	r3, [sp, #28]
 8006e12:	f7ff ba07 	b.w	8006224 <_vfprintf_r+0x3ec>
 8006e16:	9907      	ldr	r1, [sp, #28]
 8006e18:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8006e1c:	d017      	beq.n	8006e4e <_vfprintf_r+0x1016>
 8006e1e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006e20:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8006e24:	4603      	mov	r3, r0
 8006e26:	f1bb 0f00 	cmp.w	fp, #0
 8006e2a:	f103 0304 	add.w	r3, r3, #4
 8006e2e:	8804      	ldrh	r4, [r0, #0]
 8006e30:	f04f 0500 	mov.w	r5, #0
 8006e34:	f2c0 831b 	blt.w	800746e <_vfprintf_r+0x1636>
 8006e38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006e3c:	9107      	str	r1, [sp, #28]
 8006e3e:	ea54 0105 	orrs.w	r1, r4, r5
 8006e42:	930e      	str	r3, [sp, #56]	; 0x38
 8006e44:	f43f ace1 	beq.w	800680a <_vfprintf_r+0x9d2>
 8006e48:	4617      	mov	r7, r2
 8006e4a:	f7ff b95c 	b.w	8006106 <_vfprintf_r+0x2ce>
 8006e4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006e50:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006e54:	f1bb 0f00 	cmp.w	fp, #0
 8006e58:	680c      	ldr	r4, [r1, #0]
 8006e5a:	f101 0704 	add.w	r7, r1, #4
 8006e5e:	f04f 0500 	mov.w	r5, #0
 8006e62:	db02      	blt.n	8006e6a <_vfprintf_r+0x1032>
 8006e64:	9a07      	ldr	r2, [sp, #28]
 8006e66:	f7ff b9af 	b.w	80061c8 <_vfprintf_r+0x390>
 8006e6a:	970e      	str	r7, [sp, #56]	; 0x38
 8006e6c:	2700      	movs	r7, #0
 8006e6e:	f7ff b94a 	b.w	8006106 <_vfprintf_r+0x2ce>
 8006e72:	9b07      	ldr	r3, [sp, #28]
 8006e74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e76:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	f000 8142 	beq.w	8007104 <_vfprintf_r+0x12cc>
 8006e80:	3304      	adds	r3, #4
 8006e82:	8814      	ldrh	r4, [r2, #0]
 8006e84:	930e      	str	r3, [sp, #56]	; 0x38
 8006e86:	2500      	movs	r5, #0
 8006e88:	f7ff bb1a 	b.w	80064c0 <_vfprintf_r+0x688>
 8006e8c:	9a07      	ldr	r2, [sp, #28]
 8006e8e:	e6bd      	b.n	8006c0c <_vfprintf_r+0xdd4>
 8006e90:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	f7fd f99c 	bl	80041d4 <__aeabi_dcmpun>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	f040 82e8 	bne.w	8007472 <_vfprintf_r+0x163a>
 8006ea2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ea4:	f1bb 3fff 	cmp.w	fp, #4294967295
 8006ea8:	f023 0720 	bic.w	r7, r3, #32
 8006eac:	f000 825f 	beq.w	800736e <_vfprintf_r+0x1536>
 8006eb0:	2f47      	cmp	r7, #71	; 0x47
 8006eb2:	f000 8158 	beq.w	8007166 <_vfprintf_r+0x132e>
 8006eb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006eb8:	9a07      	ldr	r2, [sp, #28]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ec0:	920f      	str	r2, [sp, #60]	; 0x3c
 8006ec2:	f2c0 825c 	blt.w	800737e <_vfprintf_r+0x1546>
 8006ec6:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8006eca:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8006ece:	2300      	movs	r3, #0
 8006ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ed4:	2b66      	cmp	r3, #102	; 0x66
 8006ed6:	f000 8233 	beq.w	8007340 <_vfprintf_r+0x1508>
 8006eda:	2b46      	cmp	r3, #70	; 0x46
 8006edc:	f000 8125 	beq.w	800712a <_vfprintf_r+0x12f2>
 8006ee0:	2f45      	cmp	r7, #69	; 0x45
 8006ee2:	bf0c      	ite	eq
 8006ee4:	f10b 0501 	addeq.w	r5, fp, #1
 8006ee8:	465d      	movne	r5, fp
 8006eea:	a825      	add	r0, sp, #148	; 0x94
 8006eec:	a922      	add	r1, sp, #136	; 0x88
 8006eee:	aa21      	add	r2, sp, #132	; 0x84
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	9004      	str	r0, [sp, #16]
 8006ef4:	9202      	str	r2, [sp, #8]
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	9501      	str	r5, [sp, #4]
 8006efa:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8006efe:	9103      	str	r1, [sp, #12]
 8006f00:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f02:	f000 fc89 	bl	8007818 <_dtoa_r>
 8006f06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f08:	2b67      	cmp	r3, #103	; 0x67
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	f040 8275 	bne.w	80073fa <_vfprintf_r+0x15c2>
 8006f10:	9b07      	ldr	r3, [sp, #28]
 8006f12:	07da      	lsls	r2, r3, #31
 8006f14:	f140 8294 	bpl.w	8007440 <_vfprintf_r+0x1608>
 8006f18:	1974      	adds	r4, r6, r5
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8006f22:	f7fd f925 	bl	8004170 <__aeabi_dcmpeq>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	f040 8178 	bne.w	800721c <_vfprintf_r+0x13e4>
 8006f2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006f2e:	429c      	cmp	r4, r3
 8006f30:	d906      	bls.n	8006f40 <_vfprintf_r+0x1108>
 8006f32:	2130      	movs	r1, #48	; 0x30
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	9225      	str	r2, [sp, #148]	; 0x94
 8006f38:	7019      	strb	r1, [r3, #0]
 8006f3a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006f3c:	429c      	cmp	r4, r3
 8006f3e:	d8f9      	bhi.n	8006f34 <_vfprintf_r+0x10fc>
 8006f40:	1b9b      	subs	r3, r3, r6
 8006f42:	2f47      	cmp	r7, #71	; 0x47
 8006f44:	9312      	str	r3, [sp, #72]	; 0x48
 8006f46:	f000 8156 	beq.w	80071f6 <_vfprintf_r+0x13be>
 8006f4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f4c:	2b65      	cmp	r3, #101	; 0x65
 8006f4e:	f340 8263 	ble.w	8007418 <_vfprintf_r+0x15e0>
 8006f52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f54:	2b66      	cmp	r3, #102	; 0x66
 8006f56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f58:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f5a:	f000 8226 	beq.w	80073aa <_vfprintf_r+0x1572>
 8006f5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f60:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006f62:	428a      	cmp	r2, r1
 8006f64:	f2c0 8214 	blt.w	8007390 <_vfprintf_r+0x1558>
 8006f68:	9b07      	ldr	r3, [sp, #28]
 8006f6a:	07db      	lsls	r3, r3, #31
 8006f6c:	f100 826a 	bmi.w	8007444 <_vfprintf_r+0x160c>
 8006f70:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006f74:	920d      	str	r2, [sp, #52]	; 0x34
 8006f76:	2267      	movs	r2, #103	; 0x67
 8006f78:	9211      	str	r2, [sp, #68]	; 0x44
 8006f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f7c:	2a00      	cmp	r2, #0
 8006f7e:	f040 8117 	bne.w	80071b0 <_vfprintf_r+0x1378>
 8006f82:	9309      	str	r3, [sp, #36]	; 0x24
 8006f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f86:	9307      	str	r3, [sp, #28]
 8006f88:	4693      	mov	fp, r2
 8006f8a:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006f8e:	f7ff b96d 	b.w	800626c <_vfprintf_r+0x434>
 8006f92:	f027 0707 	bic.w	r7, r7, #7
 8006f96:	ed97 7b00 	vldr	d7, [r7]
 8006f9a:	f107 0308 	add.w	r3, r7, #8
 8006f9e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006fa2:	930e      	str	r3, [sp, #56]	; 0x38
 8006fa4:	f7ff bb77 	b.w	8006696 <_vfprintf_r+0x85e>
 8006fa8:	9b07      	ldr	r3, [sp, #28]
 8006faa:	06de      	lsls	r6, r3, #27
 8006fac:	d40b      	bmi.n	8006fc6 <_vfprintf_r+0x118e>
 8006fae:	9b07      	ldr	r3, [sp, #28]
 8006fb0:	065d      	lsls	r5, r3, #25
 8006fb2:	d508      	bpl.n	8006fc6 <_vfprintf_r+0x118e>
 8006fb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fb6:	6813      	ldr	r3, [r2, #0]
 8006fb8:	3204      	adds	r2, #4
 8006fba:	920e      	str	r2, [sp, #56]	; 0x38
 8006fbc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8006fc0:	801a      	strh	r2, [r3, #0]
 8006fc2:	f7fe bf7a 	b.w	8005eba <_vfprintf_r+0x82>
 8006fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fc8:	6813      	ldr	r3, [r2, #0]
 8006fca:	3204      	adds	r2, #4
 8006fcc:	920e      	str	r2, [sp, #56]	; 0x38
 8006fce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	f7fe bf72 	b.w	8005eba <_vfprintf_r+0x82>
 8006fd6:	2700      	movs	r7, #0
 8006fd8:	45bb      	cmp	fp, r7
 8006fda:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006fde:	f6ff ac26 	blt.w	800682e <_vfprintf_r+0x9f6>
 8006fe2:	9b07      	ldr	r3, [sp, #28]
 8006fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fe8:	9307      	str	r3, [sp, #28]
 8006fea:	f7ff bbf3 	b.w	80067d4 <_vfprintf_r+0x99c>
 8006fee:	4614      	mov	r4, r2
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ff4:	9328      	str	r3, [sp, #160]	; 0xa0
 8006ff6:	442c      	add	r4, r5
 8006ff8:	2b07      	cmp	r3, #7
 8006ffa:	9429      	str	r4, [sp, #164]	; 0xa4
 8006ffc:	e889 0024 	stmia.w	r9, {r2, r5}
 8007000:	f73f ae36 	bgt.w	8006c70 <_vfprintf_r+0xe38>
 8007004:	f109 0908 	add.w	r9, r9, #8
 8007008:	e63d      	b.n	8006c86 <_vfprintf_r+0xe4e>
 800700a:	aa27      	add	r2, sp, #156	; 0x9c
 800700c:	9908      	ldr	r1, [sp, #32]
 800700e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007010:	f003 f968 	bl	800a2e4 <__sprint_r>
 8007014:	2800      	cmp	r0, #0
 8007016:	f47f a83f 	bne.w	8006098 <_vfprintf_r+0x260>
 800701a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800701c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007020:	e427      	b.n	8006872 <_vfprintf_r+0xa3a>
 8007022:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007024:	4ab4      	ldr	r2, [pc, #720]	; (80072f8 <_vfprintf_r+0x14c0>)
 8007026:	f8c9 2000 	str.w	r2, [r9]
 800702a:	3301      	adds	r3, #1
 800702c:	3401      	adds	r4, #1
 800702e:	2201      	movs	r2, #1
 8007030:	2b07      	cmp	r3, #7
 8007032:	9429      	str	r4, [sp, #164]	; 0xa4
 8007034:	9328      	str	r3, [sp, #160]	; 0xa0
 8007036:	f8c9 2004 	str.w	r2, [r9, #4]
 800703a:	dc69      	bgt.n	8007110 <_vfprintf_r+0x12d8>
 800703c:	f109 0908 	add.w	r9, r9, #8
 8007040:	b92d      	cbnz	r5, 800704e <_vfprintf_r+0x1216>
 8007042:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007044:	b91b      	cbnz	r3, 800704e <_vfprintf_r+0x1216>
 8007046:	9b07      	ldr	r3, [sp, #28]
 8007048:	07d9      	lsls	r1, r3, #31
 800704a:	f57f a9d3 	bpl.w	80063f4 <_vfprintf_r+0x5bc>
 800704e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007050:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007052:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007054:	f8c9 2000 	str.w	r2, [r9]
 8007058:	3301      	adds	r3, #1
 800705a:	440c      	add	r4, r1
 800705c:	2b07      	cmp	r3, #7
 800705e:	9429      	str	r4, [sp, #164]	; 0xa4
 8007060:	f8c9 1004 	str.w	r1, [r9, #4]
 8007064:	9328      	str	r3, [sp, #160]	; 0xa0
 8007066:	f300 81d9 	bgt.w	800741c <_vfprintf_r+0x15e4>
 800706a:	f109 0908 	add.w	r9, r9, #8
 800706e:	426d      	negs	r5, r5
 8007070:	2d00      	cmp	r5, #0
 8007072:	f340 80b3 	ble.w	80071dc <_vfprintf_r+0x13a4>
 8007076:	4aa1      	ldr	r2, [pc, #644]	; (80072fc <_vfprintf_r+0x14c4>)
 8007078:	920f      	str	r2, [sp, #60]	; 0x3c
 800707a:	2d10      	cmp	r5, #16
 800707c:	f340 8122 	ble.w	80072c4 <_vfprintf_r+0x148c>
 8007080:	4622      	mov	r2, r4
 8007082:	2710      	movs	r7, #16
 8007084:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8007088:	9c08      	ldr	r4, [sp, #32]
 800708a:	e005      	b.n	8007098 <_vfprintf_r+0x1260>
 800708c:	f109 0908 	add.w	r9, r9, #8
 8007090:	3d10      	subs	r5, #16
 8007092:	2d10      	cmp	r5, #16
 8007094:	f340 8115 	ble.w	80072c2 <_vfprintf_r+0x148a>
 8007098:	3301      	adds	r3, #1
 800709a:	3210      	adds	r2, #16
 800709c:	2b07      	cmp	r3, #7
 800709e:	9229      	str	r2, [sp, #164]	; 0xa4
 80070a0:	9328      	str	r3, [sp, #160]	; 0xa0
 80070a2:	f8c9 a000 	str.w	sl, [r9]
 80070a6:	f8c9 7004 	str.w	r7, [r9, #4]
 80070aa:	ddef      	ble.n	800708c <_vfprintf_r+0x1254>
 80070ac:	aa27      	add	r2, sp, #156	; 0x9c
 80070ae:	4621      	mov	r1, r4
 80070b0:	4658      	mov	r0, fp
 80070b2:	f003 f917 	bl	800a2e4 <__sprint_r>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f47e afee 	bne.w	8006098 <_vfprintf_r+0x260>
 80070bc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80070be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80070c0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80070c4:	e7e4      	b.n	8007090 <_vfprintf_r+0x1258>
 80070c6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80070c8:	f7ff bbaa 	b.w	8006820 <_vfprintf_r+0x9e8>
 80070cc:	f04f 30ff 	mov.w	r0, #4294967295
 80070d0:	f7fe bfe8 	b.w	80060a4 <_vfprintf_r+0x26c>
 80070d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80070d6:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80070da:	4603      	mov	r3, r0
 80070dc:	f1bb 0f00 	cmp.w	fp, #0
 80070e0:	f103 0304 	add.w	r3, r3, #4
 80070e4:	8804      	ldrh	r4, [r0, #0]
 80070e6:	f04f 0500 	mov.w	r5, #0
 80070ea:	f2c0 81b4 	blt.w	8007456 <_vfprintf_r+0x161e>
 80070ee:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80070f2:	9107      	str	r1, [sp, #28]
 80070f4:	ea54 0105 	orrs.w	r1, r4, r5
 80070f8:	930e      	str	r3, [sp, #56]	; 0x38
 80070fa:	4617      	mov	r7, r2
 80070fc:	f47f a892 	bne.w	8006224 <_vfprintf_r+0x3ec>
 8007100:	f7ff ba4c 	b.w	800659c <_vfprintf_r+0x764>
 8007104:	3304      	adds	r3, #4
 8007106:	6814      	ldr	r4, [r2, #0]
 8007108:	930e      	str	r3, [sp, #56]	; 0x38
 800710a:	2500      	movs	r5, #0
 800710c:	f7ff b9d8 	b.w	80064c0 <_vfprintf_r+0x688>
 8007110:	aa27      	add	r2, sp, #156	; 0x9c
 8007112:	9908      	ldr	r1, [sp, #32]
 8007114:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007116:	f003 f8e5 	bl	800a2e4 <__sprint_r>
 800711a:	2800      	cmp	r0, #0
 800711c:	f47e afbc 	bne.w	8006098 <_vfprintf_r+0x260>
 8007120:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8007122:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007124:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007128:	e78a      	b.n	8007040 <_vfprintf_r+0x1208>
 800712a:	a825      	add	r0, sp, #148	; 0x94
 800712c:	a922      	add	r1, sp, #136	; 0x88
 800712e:	aa21      	add	r2, sp, #132	; 0x84
 8007130:	2303      	movs	r3, #3
 8007132:	9004      	str	r0, [sp, #16]
 8007134:	9202      	str	r2, [sp, #8]
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	f8cd b004 	str.w	fp, [sp, #4]
 800713c:	9103      	str	r1, [sp, #12]
 800713e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8007142:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007144:	f000 fb68 	bl	8007818 <_dtoa_r>
 8007148:	465d      	mov	r5, fp
 800714a:	4606      	mov	r6, r0
 800714c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800714e:	2b46      	cmp	r3, #70	; 0x46
 8007150:	eb06 0405 	add.w	r4, r6, r5
 8007154:	f47f aee1 	bne.w	8006f1a <_vfprintf_r+0x10e2>
 8007158:	7833      	ldrb	r3, [r6, #0]
 800715a:	2b30      	cmp	r3, #48	; 0x30
 800715c:	f000 8198 	beq.w	8007490 <_vfprintf_r+0x1658>
 8007160:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8007162:	442c      	add	r4, r5
 8007164:	e6d9      	b.n	8006f1a <_vfprintf_r+0x10e2>
 8007166:	f1bb 0f00 	cmp.w	fp, #0
 800716a:	bf08      	it	eq
 800716c:	f04f 0b01 	moveq.w	fp, #1
 8007170:	e6a1      	b.n	8006eb6 <_vfprintf_r+0x107e>
 8007172:	9b07      	ldr	r3, [sp, #28]
 8007174:	f043 0320 	orr.w	r3, r3, #32
 8007178:	9307      	str	r3, [sp, #28]
 800717a:	f108 0801 	add.w	r8, r8, #1
 800717e:	f898 3000 	ldrb.w	r3, [r8]
 8007182:	f7fe becd 	b.w	8005f20 <_vfprintf_r+0xe8>
 8007186:	aa27      	add	r2, sp, #156	; 0x9c
 8007188:	9908      	ldr	r1, [sp, #32]
 800718a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800718c:	f003 f8aa 	bl	800a2e4 <__sprint_r>
 8007190:	2800      	cmp	r0, #0
 8007192:	f47e af81 	bne.w	8006098 <_vfprintf_r+0x260>
 8007196:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007198:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800719c:	f7ff bb81 	b.w	80068a2 <_vfprintf_r+0xa6a>
 80071a0:	4630      	mov	r0, r6
 80071a2:	f7fd fa0d 	bl	80045c0 <strlen>
 80071a6:	46a3      	mov	fp, r4
 80071a8:	4603      	mov	r3, r0
 80071aa:	900d      	str	r0, [sp, #52]	; 0x34
 80071ac:	f7ff bb01 	b.w	80067b2 <_vfprintf_r+0x97a>
 80071b0:	272d      	movs	r7, #45	; 0x2d
 80071b2:	9309      	str	r3, [sp, #36]	; 0x24
 80071b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071b6:	9307      	str	r3, [sp, #28]
 80071b8:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80071bc:	f04f 0b00 	mov.w	fp, #0
 80071c0:	f7ff b855 	b.w	800626e <_vfprintf_r+0x436>
 80071c4:	aa27      	add	r2, sp, #156	; 0x9c
 80071c6:	9908      	ldr	r1, [sp, #32]
 80071c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80071ca:	f003 f88b 	bl	800a2e4 <__sprint_r>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	f47e af62 	bne.w	8006098 <_vfprintf_r+0x260>
 80071d4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80071d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80071d8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80071dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80071de:	f8c9 6000 	str.w	r6, [r9]
 80071e2:	3301      	adds	r3, #1
 80071e4:	440c      	add	r4, r1
 80071e6:	2b07      	cmp	r3, #7
 80071e8:	9429      	str	r4, [sp, #164]	; 0xa4
 80071ea:	9328      	str	r3, [sp, #160]	; 0xa0
 80071ec:	f8c9 1004 	str.w	r1, [r9, #4]
 80071f0:	f77f a8fe 	ble.w	80063f0 <_vfprintf_r+0x5b8>
 80071f4:	e41a      	b.n	8006a2c <_vfprintf_r+0xbf4>
 80071f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071f8:	1cd8      	adds	r0, r3, #3
 80071fa:	db11      	blt.n	8007220 <_vfprintf_r+0x13e8>
 80071fc:	459b      	cmp	fp, r3
 80071fe:	db0f      	blt.n	8007220 <_vfprintf_r+0x13e8>
 8007200:	9313      	str	r3, [sp, #76]	; 0x4c
 8007202:	e6ac      	b.n	8006f5e <_vfprintf_r+0x1126>
 8007204:	aa27      	add	r2, sp, #156	; 0x9c
 8007206:	9908      	ldr	r1, [sp, #32]
 8007208:	980a      	ldr	r0, [sp, #40]	; 0x28
 800720a:	f003 f86b 	bl	800a2e4 <__sprint_r>
 800720e:	2800      	cmp	r0, #0
 8007210:	f47e af42 	bne.w	8006098 <_vfprintf_r+0x260>
 8007214:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007216:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800721a:	e46e      	b.n	8006afa <_vfprintf_r+0xcc2>
 800721c:	4623      	mov	r3, r4
 800721e:	e68f      	b.n	8006f40 <_vfprintf_r+0x1108>
 8007220:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007222:	3a02      	subs	r2, #2
 8007224:	9211      	str	r2, [sp, #68]	; 0x44
 8007226:	3b01      	subs	r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800722e:	9321      	str	r3, [sp, #132]	; 0x84
 8007230:	bfb8      	it	lt
 8007232:	425b      	neglt	r3, r3
 8007234:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8007238:	bfb4      	ite	lt
 800723a:	222d      	movlt	r2, #45	; 0x2d
 800723c:	222b      	movge	r2, #43	; 0x2b
 800723e:	2b09      	cmp	r3, #9
 8007240:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8007244:	f340 810b 	ble.w	800745e <_vfprintf_r+0x1626>
 8007248:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 800724c:	4604      	mov	r4, r0
 800724e:	4a2c      	ldr	r2, [pc, #176]	; (8007300 <_vfprintf_r+0x14c8>)
 8007250:	fb82 2103 	smull	r2, r1, r2, r3
 8007254:	17da      	asrs	r2, r3, #31
 8007256:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800725a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800725e:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8007262:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007266:	2a09      	cmp	r2, #9
 8007268:	4613      	mov	r3, r2
 800726a:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800726e:	dcee      	bgt.n	800724e <_vfprintf_r+0x1416>
 8007270:	4621      	mov	r1, r4
 8007272:	3330      	adds	r3, #48	; 0x30
 8007274:	b2da      	uxtb	r2, r3
 8007276:	f801 2d01 	strb.w	r2, [r1, #-1]!
 800727a:	4288      	cmp	r0, r1
 800727c:	f240 816f 	bls.w	800755e <_vfprintf_r+0x1726>
 8007280:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8007284:	4623      	mov	r3, r4
 8007286:	e001      	b.n	800728c <_vfprintf_r+0x1454>
 8007288:	f813 2b01 	ldrb.w	r2, [r3], #1
 800728c:	f801 2b01 	strb.w	r2, [r1], #1
 8007290:	4298      	cmp	r0, r3
 8007292:	d1f9      	bne.n	8007288 <_vfprintf_r+0x1450>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	1b1b      	subs	r3, r3, r4
 8007298:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 800729c:	4413      	add	r3, r2
 800729e:	aa23      	add	r2, sp, #140	; 0x8c
 80072a0:	1a9b      	subs	r3, r3, r2
 80072a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072a4:	9319      	str	r3, [sp, #100]	; 0x64
 80072a6:	2a01      	cmp	r2, #1
 80072a8:	4413      	add	r3, r2
 80072aa:	930d      	str	r3, [sp, #52]	; 0x34
 80072ac:	f340 80fe 	ble.w	80074ac <_vfprintf_r+0x1674>
 80072b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80072b4:	4413      	add	r3, r2
 80072b6:	2200      	movs	r2, #0
 80072b8:	930d      	str	r3, [sp, #52]	; 0x34
 80072ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80072bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80072c0:	e65b      	b.n	8006f7a <_vfprintf_r+0x1142>
 80072c2:	4614      	mov	r4, r2
 80072c4:	3301      	adds	r3, #1
 80072c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80072ca:	442c      	add	r4, r5
 80072cc:	2b07      	cmp	r3, #7
 80072ce:	9429      	str	r4, [sp, #164]	; 0xa4
 80072d0:	e889 0024 	stmia.w	r9, {r2, r5}
 80072d4:	f73f af76 	bgt.w	80071c4 <_vfprintf_r+0x138c>
 80072d8:	f109 0908 	add.w	r9, r9, #8
 80072dc:	e77e      	b.n	80071dc <_vfprintf_r+0x13a4>
 80072de:	aa27      	add	r2, sp, #156	; 0x9c
 80072e0:	9908      	ldr	r1, [sp, #32]
 80072e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80072e4:	f002 fffe 	bl	800a2e4 <__sprint_r>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	f47e aed5 	bne.w	8006098 <_vfprintf_r+0x260>
 80072ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072f0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80072f2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80072f6:	e4d0      	b.n	8006c9a <_vfprintf_r+0xe62>
 80072f8:	0800ad04 	.word	0x0800ad04
 80072fc:	0800ad18 	.word	0x0800ad18
 8007300:	66666667 	.word	0x66666667
 8007304:	2d06      	cmp	r5, #6
 8007306:	462b      	mov	r3, r5
 8007308:	bf28      	it	cs
 800730a:	2306      	movcs	r3, #6
 800730c:	930d      	str	r3, [sp, #52]	; 0x34
 800730e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007312:	46b3      	mov	fp, r6
 8007314:	970e      	str	r7, [sp, #56]	; 0x38
 8007316:	9613      	str	r6, [sp, #76]	; 0x4c
 8007318:	4637      	mov	r7, r6
 800731a:	9309      	str	r3, [sp, #36]	; 0x24
 800731c:	4e91      	ldr	r6, [pc, #580]	; (8007564 <_vfprintf_r+0x172c>)
 800731e:	f7fe bfa5 	b.w	800626c <_vfprintf_r+0x434>
 8007322:	aa27      	add	r2, sp, #156	; 0x9c
 8007324:	9908      	ldr	r1, [sp, #32]
 8007326:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007328:	f002 ffdc 	bl	800a2e4 <__sprint_r>
 800732c:	2800      	cmp	r0, #0
 800732e:	f47e aeb3 	bne.w	8006098 <_vfprintf_r+0x260>
 8007332:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007334:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007336:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800733e:	e4c4      	b.n	8006cca <_vfprintf_r+0xe92>
 8007340:	a825      	add	r0, sp, #148	; 0x94
 8007342:	a922      	add	r1, sp, #136	; 0x88
 8007344:	aa21      	add	r2, sp, #132	; 0x84
 8007346:	2303      	movs	r3, #3
 8007348:	9004      	str	r0, [sp, #16]
 800734a:	9202      	str	r2, [sp, #8]
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	f8cd b004 	str.w	fp, [sp, #4]
 8007352:	9103      	str	r1, [sp, #12]
 8007354:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8007358:	980a      	ldr	r0, [sp, #40]	; 0x28
 800735a:	f000 fa5d 	bl	8007818 <_dtoa_r>
 800735e:	465d      	mov	r5, fp
 8007360:	4606      	mov	r6, r0
 8007362:	eb00 040b 	add.w	r4, r0, fp
 8007366:	e6f7      	b.n	8007158 <_vfprintf_r+0x1320>
 8007368:	9307      	str	r3, [sp, #28]
 800736a:	f7ff b8c7 	b.w	80064fc <_vfprintf_r+0x6c4>
 800736e:	f04f 0b06 	mov.w	fp, #6
 8007372:	e5a0      	b.n	8006eb6 <_vfprintf_r+0x107e>
 8007374:	272d      	movs	r7, #45	; 0x2d
 8007376:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800737a:	f7ff b9b3 	b.w	80066e4 <_vfprintf_r+0x8ac>
 800737e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8007382:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8007386:	931d      	str	r3, [sp, #116]	; 0x74
 8007388:	232d      	movs	r3, #45	; 0x2d
 800738a:	911c      	str	r1, [sp, #112]	; 0x70
 800738c:	9309      	str	r3, [sp, #36]	; 0x24
 800738e:	e5a0      	b.n	8006ed2 <_vfprintf_r+0x109a>
 8007390:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007392:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007394:	4413      	add	r3, r2
 8007396:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007398:	930d      	str	r3, [sp, #52]	; 0x34
 800739a:	2a00      	cmp	r2, #0
 800739c:	f340 8090 	ble.w	80074c0 <_vfprintf_r+0x1688>
 80073a0:	2267      	movs	r2, #103	; 0x67
 80073a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073a6:	9211      	str	r2, [sp, #68]	; 0x44
 80073a8:	e5e7      	b.n	8006f7a <_vfprintf_r+0x1142>
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f340 8090 	ble.w	80074d0 <_vfprintf_r+0x1698>
 80073b0:	f1bb 0f00 	cmp.w	fp, #0
 80073b4:	d163      	bne.n	800747e <_vfprintf_r+0x1646>
 80073b6:	9a07      	ldr	r2, [sp, #28]
 80073b8:	07d1      	lsls	r1, r2, #31
 80073ba:	d460      	bmi.n	800747e <_vfprintf_r+0x1646>
 80073bc:	461a      	mov	r2, r3
 80073be:	920d      	str	r2, [sp, #52]	; 0x34
 80073c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073c4:	e5d9      	b.n	8006f7a <_vfprintf_r+0x1142>
 80073c6:	9b07      	ldr	r3, [sp, #28]
 80073c8:	07db      	lsls	r3, r3, #31
 80073ca:	465f      	mov	r7, fp
 80073cc:	d505      	bpl.n	80073da <_vfprintf_r+0x15a2>
 80073ce:	ae44      	add	r6, sp, #272	; 0x110
 80073d0:	2330      	movs	r3, #48	; 0x30
 80073d2:	f806 3d41 	strb.w	r3, [r6, #-65]!
 80073d6:	f7fe bf3f 	b.w	8006258 <_vfprintf_r+0x420>
 80073da:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80073de:	ae34      	add	r6, sp, #208	; 0xd0
 80073e0:	f7fe bf3d 	b.w	800625e <_vfprintf_r+0x426>
 80073e4:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 80073e8:	970e      	str	r7, [sp, #56]	; 0x38
 80073ea:	9309      	str	r3, [sp, #36]	; 0x24
 80073ec:	950d      	str	r5, [sp, #52]	; 0x34
 80073ee:	4683      	mov	fp, r0
 80073f0:	9013      	str	r0, [sp, #76]	; 0x4c
 80073f2:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80073f6:	f7fe bf39 	b.w	800626c <_vfprintf_r+0x434>
 80073fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073fc:	2b47      	cmp	r3, #71	; 0x47
 80073fe:	f47f ad8b 	bne.w	8006f18 <_vfprintf_r+0x10e0>
 8007402:	9b07      	ldr	r3, [sp, #28]
 8007404:	07dc      	lsls	r4, r3, #31
 8007406:	f53f aea1 	bmi.w	800714c <_vfprintf_r+0x1314>
 800740a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800740c:	2f47      	cmp	r7, #71	; 0x47
 800740e:	eba3 0306 	sub.w	r3, r3, r6
 8007412:	9312      	str	r3, [sp, #72]	; 0x48
 8007414:	f43f aeef 	beq.w	80071f6 <_vfprintf_r+0x13be>
 8007418:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800741a:	e704      	b.n	8007226 <_vfprintf_r+0x13ee>
 800741c:	aa27      	add	r2, sp, #156	; 0x9c
 800741e:	9908      	ldr	r1, [sp, #32]
 8007420:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007422:	f002 ff5f 	bl	800a2e4 <__sprint_r>
 8007426:	2800      	cmp	r0, #0
 8007428:	f47e ae36 	bne.w	8006098 <_vfprintf_r+0x260>
 800742c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800742e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007430:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007432:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007436:	e61a      	b.n	800706e <_vfprintf_r+0x1236>
 8007438:	46a0      	mov	r8, r4
 800743a:	2500      	movs	r5, #0
 800743c:	f7fe bd72 	b.w	8005f24 <_vfprintf_r+0xec>
 8007440:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007442:	e57d      	b.n	8006f40 <_vfprintf_r+0x1108>
 8007444:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007446:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007448:	4413      	add	r3, r2
 800744a:	2267      	movs	r2, #103	; 0x67
 800744c:	930d      	str	r3, [sp, #52]	; 0x34
 800744e:	9211      	str	r2, [sp, #68]	; 0x44
 8007450:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007454:	e591      	b.n	8006f7a <_vfprintf_r+0x1142>
 8007456:	930e      	str	r3, [sp, #56]	; 0x38
 8007458:	4617      	mov	r7, r2
 800745a:	f7ff bbff 	b.w	8006c5c <_vfprintf_r+0xe24>
 800745e:	3330      	adds	r3, #48	; 0x30
 8007460:	2230      	movs	r2, #48	; 0x30
 8007462:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8007466:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 800746a:	ab24      	add	r3, sp, #144	; 0x90
 800746c:	e717      	b.n	800729e <_vfprintf_r+0x1466>
 800746e:	930e      	str	r3, [sp, #56]	; 0x38
 8007470:	e4fc      	b.n	8006e6c <_vfprintf_r+0x1034>
 8007472:	4e3d      	ldr	r6, [pc, #244]	; (8007568 <_vfprintf_r+0x1730>)
 8007474:	4b3d      	ldr	r3, [pc, #244]	; (800756c <_vfprintf_r+0x1734>)
 8007476:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800747a:	f7ff b935 	b.w	80066e8 <_vfprintf_r+0x8b0>
 800747e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007480:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007482:	189d      	adds	r5, r3, r2
 8007484:	eb05 030b 	add.w	r3, r5, fp
 8007488:	930d      	str	r3, [sp, #52]	; 0x34
 800748a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800748e:	e574      	b.n	8006f7a <_vfprintf_r+0x1142>
 8007490:	2200      	movs	r2, #0
 8007492:	2300      	movs	r3, #0
 8007494:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8007498:	f7fc fe6a 	bl	8004170 <__aeabi_dcmpeq>
 800749c:	2800      	cmp	r0, #0
 800749e:	f47f ae5f 	bne.w	8007160 <_vfprintf_r+0x1328>
 80074a2:	f1c5 0501 	rsb	r5, r5, #1
 80074a6:	9521      	str	r5, [sp, #132]	; 0x84
 80074a8:	442c      	add	r4, r5
 80074aa:	e536      	b.n	8006f1a <_vfprintf_r+0x10e2>
 80074ac:	9b07      	ldr	r3, [sp, #28]
 80074ae:	f013 0301 	ands.w	r3, r3, #1
 80074b2:	f47f aefd 	bne.w	80072b0 <_vfprintf_r+0x1478>
 80074b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80074b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80074be:	e55c      	b.n	8006f7a <_vfprintf_r+0x1142>
 80074c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074c4:	f1c3 0301 	rsb	r3, r3, #1
 80074c8:	441a      	add	r2, r3
 80074ca:	4613      	mov	r3, r2
 80074cc:	920d      	str	r2, [sp, #52]	; 0x34
 80074ce:	e767      	b.n	80073a0 <_vfprintf_r+0x1568>
 80074d0:	f1bb 0f00 	cmp.w	fp, #0
 80074d4:	d102      	bne.n	80074dc <_vfprintf_r+0x16a4>
 80074d6:	9b07      	ldr	r3, [sp, #28]
 80074d8:	07da      	lsls	r2, r3, #31
 80074da:	d507      	bpl.n	80074ec <_vfprintf_r+0x16b4>
 80074dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80074de:	1c5d      	adds	r5, r3, #1
 80074e0:	eb05 030b 	add.w	r3, r5, fp
 80074e4:	930d      	str	r3, [sp, #52]	; 0x34
 80074e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80074ea:	e546      	b.n	8006f7a <_vfprintf_r+0x1142>
 80074ec:	2301      	movs	r3, #1
 80074ee:	930d      	str	r3, [sp, #52]	; 0x34
 80074f0:	e543      	b.n	8006f7a <_vfprintf_r+0x1142>
 80074f2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80074f4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80074f8:	6805      	ldr	r5, [r0, #0]
 80074fa:	3004      	adds	r0, #4
 80074fc:	2d00      	cmp	r5, #0
 80074fe:	900e      	str	r0, [sp, #56]	; 0x38
 8007500:	46a0      	mov	r8, r4
 8007502:	f6be ad0d 	bge.w	8005f20 <_vfprintf_r+0xe8>
 8007506:	f04f 35ff 	mov.w	r5, #4294967295
 800750a:	f7fe bd09 	b.w	8005f20 <_vfprintf_r+0xe8>
 800750e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007512:	f7ff b893 	b.w	800663c <_vfprintf_r+0x804>
 8007516:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800751a:	f7ff b85d 	b.w	80065d8 <_vfprintf_r+0x7a0>
 800751e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007522:	f7fe bfbf 	b.w	80064a4 <_vfprintf_r+0x66c>
 8007526:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800752a:	f7fe be5c 	b.w	80061e6 <_vfprintf_r+0x3ae>
 800752e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007532:	f7ff b812 	b.w	800655a <_vfprintf_r+0x722>
 8007536:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800753a:	f7fe bdca 	b.w	80060d2 <_vfprintf_r+0x29a>
 800753e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007542:	f7ff b951 	b.w	80067e8 <_vfprintf_r+0x9b0>
 8007546:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800754a:	f7fe be23 	b.w	8006194 <_vfprintf_r+0x35c>
 800754e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007552:	f7ff b8ed 	b.w	8006730 <_vfprintf_r+0x8f8>
 8007556:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800755a:	f7ff b88c 	b.w	8006676 <_vfprintf_r+0x83e>
 800755e:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8007562:	e69c      	b.n	800729e <_vfprintf_r+0x1466>
 8007564:	0800acfc 	.word	0x0800acfc
 8007568:	0800acd0 	.word	0x0800acd0
 800756c:	0800accc 	.word	0x0800accc

08007570 <__sbprintf>:
 8007570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007572:	460c      	mov	r4, r1
 8007574:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8007578:	8989      	ldrh	r1, [r1, #12]
 800757a:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800757c:	89e5      	ldrh	r5, [r4, #14]
 800757e:	9619      	str	r6, [sp, #100]	; 0x64
 8007580:	f021 0102 	bic.w	r1, r1, #2
 8007584:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007586:	f8ad 500e 	strh.w	r5, [sp, #14]
 800758a:	2500      	movs	r5, #0
 800758c:	69e7      	ldr	r7, [r4, #28]
 800758e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8007592:	9609      	str	r6, [sp, #36]	; 0x24
 8007594:	9506      	str	r5, [sp, #24]
 8007596:	ae1a      	add	r6, sp, #104	; 0x68
 8007598:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800759c:	4669      	mov	r1, sp
 800759e:	9600      	str	r6, [sp, #0]
 80075a0:	9604      	str	r6, [sp, #16]
 80075a2:	9502      	str	r5, [sp, #8]
 80075a4:	9505      	str	r5, [sp, #20]
 80075a6:	9707      	str	r7, [sp, #28]
 80075a8:	4606      	mov	r6, r0
 80075aa:	f7fe fc45 	bl	8005e38 <_vfprintf_r>
 80075ae:	1e05      	subs	r5, r0, #0
 80075b0:	db07      	blt.n	80075c2 <__sbprintf+0x52>
 80075b2:	4630      	mov	r0, r6
 80075b4:	4669      	mov	r1, sp
 80075b6:	f001 f8e9 	bl	800878c <_fflush_r>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	bf18      	it	ne
 80075be:	f04f 35ff 	movne.w	r5, #4294967295
 80075c2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80075c6:	065b      	lsls	r3, r3, #25
 80075c8:	d503      	bpl.n	80075d2 <__sbprintf+0x62>
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d0:	81a3      	strh	r3, [r4, #12]
 80075d2:	4628      	mov	r0, r5
 80075d4:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80075d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075da:	bf00      	nop

080075dc <_vsprintf_r>:
 80075dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075de:	b09b      	sub	sp, #108	; 0x6c
 80075e0:	460d      	mov	r5, r1
 80075e2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80075e6:	f44f 7702 	mov.w	r7, #520	; 0x208
 80075ea:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80075ee:	4669      	mov	r1, sp
 80075f0:	9500      	str	r5, [sp, #0]
 80075f2:	9504      	str	r5, [sp, #16]
 80075f4:	f8ad 700c 	strh.w	r7, [sp, #12]
 80075f8:	9402      	str	r4, [sp, #8]
 80075fa:	9405      	str	r4, [sp, #20]
 80075fc:	f8ad 600e 	strh.w	r6, [sp, #14]
 8007600:	f7fd f89e 	bl	8004740 <_svfprintf_r>
 8007604:	9b00      	ldr	r3, [sp, #0]
 8007606:	2200      	movs	r2, #0
 8007608:	701a      	strb	r2, [r3, #0]
 800760a:	b01b      	add	sp, #108	; 0x6c
 800760c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800760e:	bf00      	nop

08007610 <vsprintf>:
 8007610:	b410      	push	{r4}
 8007612:	4c04      	ldr	r4, [pc, #16]	; (8007624 <vsprintf+0x14>)
 8007614:	4613      	mov	r3, r2
 8007616:	460a      	mov	r2, r1
 8007618:	4601      	mov	r1, r0
 800761a:	6820      	ldr	r0, [r4, #0]
 800761c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007620:	f7ff bfdc 	b.w	80075dc <_vsprintf_r>
 8007624:	20000468 	.word	0x20000468

08007628 <__swsetup_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4b30      	ldr	r3, [pc, #192]	; (80076ec <__swsetup_r+0xc4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4605      	mov	r5, r0
 8007630:	460c      	mov	r4, r1
 8007632:	b113      	cbz	r3, 800763a <__swsetup_r+0x12>
 8007634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007636:	2a00      	cmp	r2, #0
 8007638:	d038      	beq.n	80076ac <__swsetup_r+0x84>
 800763a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800763e:	b293      	uxth	r3, r2
 8007640:	0718      	lsls	r0, r3, #28
 8007642:	d50c      	bpl.n	800765e <__swsetup_r+0x36>
 8007644:	6920      	ldr	r0, [r4, #16]
 8007646:	b1a8      	cbz	r0, 8007674 <__swsetup_r+0x4c>
 8007648:	f013 0201 	ands.w	r2, r3, #1
 800764c:	d01e      	beq.n	800768c <__swsetup_r+0x64>
 800764e:	6963      	ldr	r3, [r4, #20]
 8007650:	2200      	movs	r2, #0
 8007652:	425b      	negs	r3, r3
 8007654:	61a3      	str	r3, [r4, #24]
 8007656:	60a2      	str	r2, [r4, #8]
 8007658:	b1f0      	cbz	r0, 8007698 <__swsetup_r+0x70>
 800765a:	2000      	movs	r0, #0
 800765c:	bd38      	pop	{r3, r4, r5, pc}
 800765e:	06d9      	lsls	r1, r3, #27
 8007660:	d53c      	bpl.n	80076dc <__swsetup_r+0xb4>
 8007662:	0758      	lsls	r0, r3, #29
 8007664:	d426      	bmi.n	80076b4 <__swsetup_r+0x8c>
 8007666:	6920      	ldr	r0, [r4, #16]
 8007668:	f042 0308 	orr.w	r3, r2, #8
 800766c:	81a3      	strh	r3, [r4, #12]
 800766e:	b29b      	uxth	r3, r3
 8007670:	2800      	cmp	r0, #0
 8007672:	d1e9      	bne.n	8007648 <__swsetup_r+0x20>
 8007674:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8007678:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800767c:	d0e4      	beq.n	8007648 <__swsetup_r+0x20>
 800767e:	4628      	mov	r0, r5
 8007680:	4621      	mov	r1, r4
 8007682:	f001 fc4f 	bl	8008f24 <__smakebuf_r>
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	6920      	ldr	r0, [r4, #16]
 800768a:	e7dd      	b.n	8007648 <__swsetup_r+0x20>
 800768c:	0799      	lsls	r1, r3, #30
 800768e:	bf58      	it	pl
 8007690:	6962      	ldrpl	r2, [r4, #20]
 8007692:	60a2      	str	r2, [r4, #8]
 8007694:	2800      	cmp	r0, #0
 8007696:	d1e0      	bne.n	800765a <__swsetup_r+0x32>
 8007698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800769c:	061a      	lsls	r2, r3, #24
 800769e:	d5dd      	bpl.n	800765c <__swsetup_r+0x34>
 80076a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076a4:	81a3      	strh	r3, [r4, #12]
 80076a6:	f04f 30ff 	mov.w	r0, #4294967295
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	4618      	mov	r0, r3
 80076ae:	f001 f901 	bl	80088b4 <__sinit>
 80076b2:	e7c2      	b.n	800763a <__swsetup_r+0x12>
 80076b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80076b6:	b151      	cbz	r1, 80076ce <__swsetup_r+0xa6>
 80076b8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80076bc:	4299      	cmp	r1, r3
 80076be:	d004      	beq.n	80076ca <__swsetup_r+0xa2>
 80076c0:	4628      	mov	r0, r5
 80076c2:	f001 f94f 	bl	8008964 <_free_r>
 80076c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076ca:	2300      	movs	r3, #0
 80076cc:	6323      	str	r3, [r4, #48]	; 0x30
 80076ce:	2300      	movs	r3, #0
 80076d0:	6920      	ldr	r0, [r4, #16]
 80076d2:	6063      	str	r3, [r4, #4]
 80076d4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80076d8:	6020      	str	r0, [r4, #0]
 80076da:	e7c5      	b.n	8007668 <__swsetup_r+0x40>
 80076dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076e0:	2309      	movs	r3, #9
 80076e2:	602b      	str	r3, [r5, #0]
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295
 80076e8:	81a2      	strh	r2, [r4, #12]
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	20000468 	.word	0x20000468

080076f0 <quorem>:
 80076f0:	6902      	ldr	r2, [r0, #16]
 80076f2:	690b      	ldr	r3, [r1, #16]
 80076f4:	4293      	cmp	r3, r2
 80076f6:	f300 808d 	bgt.w	8007814 <quorem+0x124>
 80076fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8007702:	f101 0714 	add.w	r7, r1, #20
 8007706:	f100 0b14 	add.w	fp, r0, #20
 800770a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800770e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8007712:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8007716:	b083      	sub	sp, #12
 8007718:	3201      	adds	r2, #1
 800771a:	fbb3 f9f2 	udiv	r9, r3, r2
 800771e:	eb0b 0304 	add.w	r3, fp, r4
 8007722:	9400      	str	r4, [sp, #0]
 8007724:	eb07 0a04 	add.w	sl, r7, r4
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	f1b9 0f00 	cmp.w	r9, #0
 800772e:	d039      	beq.n	80077a4 <quorem+0xb4>
 8007730:	2500      	movs	r5, #0
 8007732:	46bc      	mov	ip, r7
 8007734:	46de      	mov	lr, fp
 8007736:	462b      	mov	r3, r5
 8007738:	f85c 6b04 	ldr.w	r6, [ip], #4
 800773c:	f8de 2000 	ldr.w	r2, [lr]
 8007740:	b2b4      	uxth	r4, r6
 8007742:	fb09 5504 	mla	r5, r9, r4, r5
 8007746:	0c36      	lsrs	r6, r6, #16
 8007748:	0c2c      	lsrs	r4, r5, #16
 800774a:	fb09 4406 	mla	r4, r9, r6, r4
 800774e:	b2ad      	uxth	r5, r5
 8007750:	1b5b      	subs	r3, r3, r5
 8007752:	b2a6      	uxth	r6, r4
 8007754:	fa13 f382 	uxtah	r3, r3, r2
 8007758:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 800775c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8007760:	b29b      	uxth	r3, r3
 8007762:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007766:	45e2      	cmp	sl, ip
 8007768:	f84e 3b04 	str.w	r3, [lr], #4
 800776c:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8007770:	ea4f 4326 	mov.w	r3, r6, asr #16
 8007774:	d2e0      	bcs.n	8007738 <quorem+0x48>
 8007776:	9b00      	ldr	r3, [sp, #0]
 8007778:	f85b 3003 	ldr.w	r3, [fp, r3]
 800777c:	b993      	cbnz	r3, 80077a4 <quorem+0xb4>
 800777e:	9c01      	ldr	r4, [sp, #4]
 8007780:	1f23      	subs	r3, r4, #4
 8007782:	459b      	cmp	fp, r3
 8007784:	d20c      	bcs.n	80077a0 <quorem+0xb0>
 8007786:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800778a:	b94b      	cbnz	r3, 80077a0 <quorem+0xb0>
 800778c:	f1a4 0308 	sub.w	r3, r4, #8
 8007790:	e002      	b.n	8007798 <quorem+0xa8>
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	3b04      	subs	r3, #4
 8007796:	b91a      	cbnz	r2, 80077a0 <quorem+0xb0>
 8007798:	459b      	cmp	fp, r3
 800779a:	f108 38ff 	add.w	r8, r8, #4294967295
 800779e:	d3f8      	bcc.n	8007792 <quorem+0xa2>
 80077a0:	f8c0 8010 	str.w	r8, [r0, #16]
 80077a4:	4604      	mov	r4, r0
 80077a6:	f002 f993 	bl	8009ad0 <__mcmp>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	db2e      	blt.n	800780c <quorem+0x11c>
 80077ae:	f109 0901 	add.w	r9, r9, #1
 80077b2:	465d      	mov	r5, fp
 80077b4:	2300      	movs	r3, #0
 80077b6:	f857 1b04 	ldr.w	r1, [r7], #4
 80077ba:	6828      	ldr	r0, [r5, #0]
 80077bc:	b28a      	uxth	r2, r1
 80077be:	1a9a      	subs	r2, r3, r2
 80077c0:	0c09      	lsrs	r1, r1, #16
 80077c2:	fa12 f280 	uxtah	r2, r2, r0
 80077c6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 80077ca:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80077ce:	b291      	uxth	r1, r2
 80077d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80077d4:	45ba      	cmp	sl, r7
 80077d6:	f845 1b04 	str.w	r1, [r5], #4
 80077da:	ea4f 4323 	mov.w	r3, r3, asr #16
 80077de:	d2ea      	bcs.n	80077b6 <quorem+0xc6>
 80077e0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80077e4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80077e8:	b982      	cbnz	r2, 800780c <quorem+0x11c>
 80077ea:	1f1a      	subs	r2, r3, #4
 80077ec:	4593      	cmp	fp, r2
 80077ee:	d20b      	bcs.n	8007808 <quorem+0x118>
 80077f0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80077f4:	b942      	cbnz	r2, 8007808 <quorem+0x118>
 80077f6:	3b08      	subs	r3, #8
 80077f8:	e002      	b.n	8007800 <quorem+0x110>
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	3b04      	subs	r3, #4
 80077fe:	b91a      	cbnz	r2, 8007808 <quorem+0x118>
 8007800:	459b      	cmp	fp, r3
 8007802:	f108 38ff 	add.w	r8, r8, #4294967295
 8007806:	d3f8      	bcc.n	80077fa <quorem+0x10a>
 8007808:	f8c4 8010 	str.w	r8, [r4, #16]
 800780c:	4648      	mov	r0, r9
 800780e:	b003      	add	sp, #12
 8007810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007814:	2000      	movs	r0, #0
 8007816:	4770      	bx	lr

08007818 <_dtoa_r>:
 8007818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800781e:	b099      	sub	sp, #100	; 0x64
 8007820:	4681      	mov	r9, r0
 8007822:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8007824:	4692      	mov	sl, r2
 8007826:	469b      	mov	fp, r3
 8007828:	b149      	cbz	r1, 800783e <_dtoa_r+0x26>
 800782a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800782c:	604a      	str	r2, [r1, #4]
 800782e:	2301      	movs	r3, #1
 8007830:	4093      	lsls	r3, r2
 8007832:	608b      	str	r3, [r1, #8]
 8007834:	f001 ff6a 	bl	800970c <_Bfree>
 8007838:	2300      	movs	r3, #0
 800783a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800783e:	f1bb 0f00 	cmp.w	fp, #0
 8007842:	46d8      	mov	r8, fp
 8007844:	db33      	blt.n	80078ae <_dtoa_r+0x96>
 8007846:	2300      	movs	r3, #0
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	4ba3      	ldr	r3, [pc, #652]	; (8007ad8 <_dtoa_r+0x2c0>)
 800784c:	461a      	mov	r2, r3
 800784e:	ea08 0303 	and.w	r3, r8, r3
 8007852:	4293      	cmp	r3, r2
 8007854:	d014      	beq.n	8007880 <_dtoa_r+0x68>
 8007856:	2200      	movs	r2, #0
 8007858:	2300      	movs	r3, #0
 800785a:	4650      	mov	r0, sl
 800785c:	4659      	mov	r1, fp
 800785e:	f7fc fc87 	bl	8004170 <__aeabi_dcmpeq>
 8007862:	4605      	mov	r5, r0
 8007864:	b348      	cbz	r0, 80078ba <_dtoa_r+0xa2>
 8007866:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007868:	2301      	movs	r3, #1
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 80c2 	beq.w	80079f8 <_dtoa_r+0x1e0>
 8007874:	4899      	ldr	r0, [pc, #612]	; (8007adc <_dtoa_r+0x2c4>)
 8007876:	6018      	str	r0, [r3, #0]
 8007878:	3801      	subs	r0, #1
 800787a:	b019      	add	sp, #100	; 0x64
 800787c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007880:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007882:	f242 730f 	movw	r3, #9999	; 0x270f
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	f1ba 0f00 	cmp.w	sl, #0
 800788c:	f000 809f 	beq.w	80079ce <_dtoa_r+0x1b6>
 8007890:	4893      	ldr	r0, [pc, #588]	; (8007ae0 <_dtoa_r+0x2c8>)
 8007892:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0f0      	beq.n	800787a <_dtoa_r+0x62>
 8007898:	78c3      	ldrb	r3, [r0, #3]
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 80ae 	beq.w	80079fc <_dtoa_r+0x1e4>
 80078a0:	f100 0308 	add.w	r3, r0, #8
 80078a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	b019      	add	sp, #100	; 0x64
 80078aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ae:	2301      	movs	r3, #1
 80078b0:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	46c3      	mov	fp, r8
 80078b8:	e7c7      	b.n	800784a <_dtoa_r+0x32>
 80078ba:	aa16      	add	r2, sp, #88	; 0x58
 80078bc:	ab17      	add	r3, sp, #92	; 0x5c
 80078be:	9201      	str	r2, [sp, #4]
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	4652      	mov	r2, sl
 80078c4:	465b      	mov	r3, fp
 80078c6:	4648      	mov	r0, r9
 80078c8:	f002 f9ae 	bl	8009c28 <__d2b>
 80078cc:	ea5f 5418 	movs.w	r4, r8, lsr #20
 80078d0:	9008      	str	r0, [sp, #32]
 80078d2:	f040 8085 	bne.w	80079e0 <_dtoa_r+0x1c8>
 80078d6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80078d8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80078da:	442c      	add	r4, r5
 80078dc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80078e0:	2b20      	cmp	r3, #32
 80078e2:	f340 8289 	ble.w	8007df8 <_dtoa_r+0x5e0>
 80078e6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80078ea:	f204 4012 	addw	r0, r4, #1042	; 0x412
 80078ee:	fa08 f803 	lsl.w	r8, r8, r3
 80078f2:	fa2a f000 	lsr.w	r0, sl, r0
 80078f6:	ea40 0008 	orr.w	r0, r0, r8
 80078fa:	f7fc f95b 	bl	8003bb4 <__aeabi_ui2d>
 80078fe:	2301      	movs	r3, #1
 8007900:	3c01      	subs	r4, #1
 8007902:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007906:	930d      	str	r3, [sp, #52]	; 0x34
 8007908:	2200      	movs	r2, #0
 800790a:	4b76      	ldr	r3, [pc, #472]	; (8007ae4 <_dtoa_r+0x2cc>)
 800790c:	f7fc f814 	bl	8003938 <__aeabi_dsub>
 8007910:	a36b      	add	r3, pc, #428	; (adr r3, 8007ac0 <_dtoa_r+0x2a8>)
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f7fc f9c3 	bl	8003ca0 <__aeabi_dmul>
 800791a:	a36b      	add	r3, pc, #428	; (adr r3, 8007ac8 <_dtoa_r+0x2b0>)
 800791c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007920:	f7fc f80c 	bl	800393c <__adddf3>
 8007924:	4606      	mov	r6, r0
 8007926:	4620      	mov	r0, r4
 8007928:	460f      	mov	r7, r1
 800792a:	f7fc f953 	bl	8003bd4 <__aeabi_i2d>
 800792e:	a368      	add	r3, pc, #416	; (adr r3, 8007ad0 <_dtoa_r+0x2b8>)
 8007930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007934:	f7fc f9b4 	bl	8003ca0 <__aeabi_dmul>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	4630      	mov	r0, r6
 800793e:	4639      	mov	r1, r7
 8007940:	f7fb fffc 	bl	800393c <__adddf3>
 8007944:	4606      	mov	r6, r0
 8007946:	460f      	mov	r7, r1
 8007948:	f7fc fc5a 	bl	8004200 <__aeabi_d2iz>
 800794c:	2200      	movs	r2, #0
 800794e:	9004      	str	r0, [sp, #16]
 8007950:	2300      	movs	r3, #0
 8007952:	4630      	mov	r0, r6
 8007954:	4639      	mov	r1, r7
 8007956:	f7fc fc15 	bl	8004184 <__aeabi_dcmplt>
 800795a:	2800      	cmp	r0, #0
 800795c:	f040 8227 	bne.w	8007dae <_dtoa_r+0x596>
 8007960:	9e04      	ldr	r6, [sp, #16]
 8007962:	2e16      	cmp	r6, #22
 8007964:	f200 8220 	bhi.w	8007da8 <_dtoa_r+0x590>
 8007968:	4b5f      	ldr	r3, [pc, #380]	; (8007ae8 <_dtoa_r+0x2d0>)
 800796a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800796e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007972:	4652      	mov	r2, sl
 8007974:	465b      	mov	r3, fp
 8007976:	f7fc fc23 	bl	80041c0 <__aeabi_dcmpgt>
 800797a:	2800      	cmp	r0, #0
 800797c:	f000 8241 	beq.w	8007e02 <_dtoa_r+0x5ea>
 8007980:	1e73      	subs	r3, r6, #1
 8007982:	9304      	str	r3, [sp, #16]
 8007984:	2300      	movs	r3, #0
 8007986:	930b      	str	r3, [sp, #44]	; 0x2c
 8007988:	1b2c      	subs	r4, r5, r4
 800798a:	f1b4 0801 	subs.w	r8, r4, #1
 800798e:	f100 8229 	bmi.w	8007de4 <_dtoa_r+0x5cc>
 8007992:	2300      	movs	r3, #0
 8007994:	9305      	str	r3, [sp, #20]
 8007996:	9b04      	ldr	r3, [sp, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f2c0 821a 	blt.w	8007dd2 <_dtoa_r+0x5ba>
 800799e:	4498      	add	r8, r3
 80079a0:	930a      	str	r3, [sp, #40]	; 0x28
 80079a2:	2300      	movs	r3, #0
 80079a4:	9302      	str	r3, [sp, #8]
 80079a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079a8:	2b09      	cmp	r3, #9
 80079aa:	d829      	bhi.n	8007a00 <_dtoa_r+0x1e8>
 80079ac:	2b05      	cmp	r3, #5
 80079ae:	f340 8643 	ble.w	8008638 <_dtoa_r+0xe20>
 80079b2:	3b04      	subs	r3, #4
 80079b4:	9322      	str	r3, [sp, #136]	; 0x88
 80079b6:	2500      	movs	r5, #0
 80079b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079ba:	3b02      	subs	r3, #2
 80079bc:	2b03      	cmp	r3, #3
 80079be:	f200 8622 	bhi.w	8008606 <_dtoa_r+0xdee>
 80079c2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80079c6:	032a      	.short	0x032a
 80079c8:	03350223 	.word	0x03350223
 80079cc:	044f      	.short	0x044f
 80079ce:	4b44      	ldr	r3, [pc, #272]	; (8007ae0 <_dtoa_r+0x2c8>)
 80079d0:	4a46      	ldr	r2, [pc, #280]	; (8007aec <_dtoa_r+0x2d4>)
 80079d2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80079d6:	2800      	cmp	r0, #0
 80079d8:	bf14      	ite	ne
 80079da:	4618      	movne	r0, r3
 80079dc:	4610      	moveq	r0, r2
 80079de:	e758      	b.n	8007892 <_dtoa_r+0x7a>
 80079e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079e4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80079e8:	950d      	str	r5, [sp, #52]	; 0x34
 80079ea:	4650      	mov	r0, sl
 80079ec:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80079f0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80079f4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80079f6:	e787      	b.n	8007908 <_dtoa_r+0xf0>
 80079f8:	483d      	ldr	r0, [pc, #244]	; (8007af0 <_dtoa_r+0x2d8>)
 80079fa:	e73e      	b.n	800787a <_dtoa_r+0x62>
 80079fc:	1cc3      	adds	r3, r0, #3
 80079fe:	e751      	b.n	80078a4 <_dtoa_r+0x8c>
 8007a00:	2100      	movs	r1, #0
 8007a02:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007a06:	4648      	mov	r0, r9
 8007a08:	9122      	str	r1, [sp, #136]	; 0x88
 8007a0a:	f001 fe59 	bl	80096c0 <_Balloc>
 8007a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a12:	9306      	str	r3, [sp, #24]
 8007a14:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007a16:	930c      	str	r3, [sp, #48]	; 0x30
 8007a18:	2301      	movs	r3, #1
 8007a1a:	9007      	str	r0, [sp, #28]
 8007a1c:	9223      	str	r2, [sp, #140]	; 0x8c
 8007a1e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8007a22:	9309      	str	r3, [sp, #36]	; 0x24
 8007a24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f2c0 80d0 	blt.w	8007bcc <_dtoa_r+0x3b4>
 8007a2c:	9a04      	ldr	r2, [sp, #16]
 8007a2e:	2a0e      	cmp	r2, #14
 8007a30:	f300 80cc 	bgt.w	8007bcc <_dtoa_r+0x3b4>
 8007a34:	4b2c      	ldr	r3, [pc, #176]	; (8007ae8 <_dtoa_r+0x2d0>)
 8007a36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a3a:	ed93 7b00 	vldr	d7, [r3]
 8007a3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a46:	f2c0 82fe 	blt.w	8008046 <_dtoa_r+0x82e>
 8007a4a:	4656      	mov	r6, sl
 8007a4c:	465f      	mov	r7, fp
 8007a4e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8007a52:	4630      	mov	r0, r6
 8007a54:	4652      	mov	r2, sl
 8007a56:	465b      	mov	r3, fp
 8007a58:	4639      	mov	r1, r7
 8007a5a:	f7fc fa4b 	bl	8003ef4 <__aeabi_ddiv>
 8007a5e:	f7fc fbcf 	bl	8004200 <__aeabi_d2iz>
 8007a62:	4604      	mov	r4, r0
 8007a64:	f7fc f8b6 	bl	8003bd4 <__aeabi_i2d>
 8007a68:	4652      	mov	r2, sl
 8007a6a:	465b      	mov	r3, fp
 8007a6c:	f7fc f918 	bl	8003ca0 <__aeabi_dmul>
 8007a70:	460b      	mov	r3, r1
 8007a72:	4602      	mov	r2, r0
 8007a74:	4639      	mov	r1, r7
 8007a76:	4630      	mov	r0, r6
 8007a78:	f7fb ff5e 	bl	8003938 <__aeabi_dsub>
 8007a7c:	9d07      	ldr	r5, [sp, #28]
 8007a7e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8007a82:	702b      	strb	r3, [r5, #0]
 8007a84:	9b06      	ldr	r3, [sp, #24]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	4606      	mov	r6, r0
 8007a8a:	460f      	mov	r7, r1
 8007a8c:	f105 0501 	add.w	r5, r5, #1
 8007a90:	d061      	beq.n	8007b56 <_dtoa_r+0x33e>
 8007a92:	2200      	movs	r2, #0
 8007a94:	4b17      	ldr	r3, [pc, #92]	; (8007af4 <_dtoa_r+0x2dc>)
 8007a96:	f7fc f903 	bl	8003ca0 <__aeabi_dmul>
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	460f      	mov	r7, r1
 8007aa2:	f7fc fb65 	bl	8004170 <__aeabi_dcmpeq>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d17d      	bne.n	8007ba6 <_dtoa_r+0x38e>
 8007aaa:	f8cd 9014 	str.w	r9, [sp, #20]
 8007aae:	f8dd a018 	ldr.w	sl, [sp, #24]
 8007ab2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8007ab6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007aba:	e028      	b.n	8007b0e <_dtoa_r+0x2f6>
 8007abc:	f3af 8000 	nop.w
 8007ac0:	636f4361 	.word	0x636f4361
 8007ac4:	3fd287a7 	.word	0x3fd287a7
 8007ac8:	8b60c8b3 	.word	0x8b60c8b3
 8007acc:	3fc68a28 	.word	0x3fc68a28
 8007ad0:	509f79fb 	.word	0x509f79fb
 8007ad4:	3fd34413 	.word	0x3fd34413
 8007ad8:	7ff00000 	.word	0x7ff00000
 8007adc:	0800ad05 	.word	0x0800ad05
 8007ae0:	0800ad44 	.word	0x0800ad44
 8007ae4:	3ff80000 	.word	0x3ff80000
 8007ae8:	0800ad58 	.word	0x0800ad58
 8007aec:	0800ad38 	.word	0x0800ad38
 8007af0:	0800ad04 	.word	0x0800ad04
 8007af4:	40240000 	.word	0x40240000
 8007af8:	f7fc f8d2 	bl	8003ca0 <__aeabi_dmul>
 8007afc:	2200      	movs	r2, #0
 8007afe:	2300      	movs	r3, #0
 8007b00:	4606      	mov	r6, r0
 8007b02:	460f      	mov	r7, r1
 8007b04:	f7fc fb34 	bl	8004170 <__aeabi_dcmpeq>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	f040 83ae 	bne.w	800826a <_dtoa_r+0xa52>
 8007b0e:	4642      	mov	r2, r8
 8007b10:	464b      	mov	r3, r9
 8007b12:	4630      	mov	r0, r6
 8007b14:	4639      	mov	r1, r7
 8007b16:	f7fc f9ed 	bl	8003ef4 <__aeabi_ddiv>
 8007b1a:	f7fc fb71 	bl	8004200 <__aeabi_d2iz>
 8007b1e:	4604      	mov	r4, r0
 8007b20:	f7fc f858 	bl	8003bd4 <__aeabi_i2d>
 8007b24:	4642      	mov	r2, r8
 8007b26:	464b      	mov	r3, r9
 8007b28:	f7fc f8ba 	bl	8003ca0 <__aeabi_dmul>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4630      	mov	r0, r6
 8007b32:	4639      	mov	r1, r7
 8007b34:	f7fb ff00 	bl	8003938 <__aeabi_dsub>
 8007b38:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8007b3c:	f805 eb01 	strb.w	lr, [r5], #1
 8007b40:	ebcb 0e05 	rsb	lr, fp, r5
 8007b44:	45d6      	cmp	lr, sl
 8007b46:	4606      	mov	r6, r0
 8007b48:	460f      	mov	r7, r1
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	4bae      	ldr	r3, [pc, #696]	; (8007e08 <_dtoa_r+0x5f0>)
 8007b50:	d1d2      	bne.n	8007af8 <_dtoa_r+0x2e0>
 8007b52:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007b56:	4632      	mov	r2, r6
 8007b58:	463b      	mov	r3, r7
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	f7fb feed 	bl	800393c <__adddf3>
 8007b62:	4606      	mov	r6, r0
 8007b64:	460f      	mov	r7, r1
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b6e:	f7fc fb09 	bl	8004184 <__aeabi_dcmplt>
 8007b72:	b940      	cbnz	r0, 8007b86 <_dtoa_r+0x36e>
 8007b74:	4632      	mov	r2, r6
 8007b76:	463b      	mov	r3, r7
 8007b78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b7c:	f7fc faf8 	bl	8004170 <__aeabi_dcmpeq>
 8007b80:	b188      	cbz	r0, 8007ba6 <_dtoa_r+0x38e>
 8007b82:	07e3      	lsls	r3, r4, #31
 8007b84:	d50f      	bpl.n	8007ba6 <_dtoa_r+0x38e>
 8007b86:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8007b8a:	9a07      	ldr	r2, [sp, #28]
 8007b8c:	1e6b      	subs	r3, r5, #1
 8007b8e:	e004      	b.n	8007b9a <_dtoa_r+0x382>
 8007b90:	429a      	cmp	r2, r3
 8007b92:	f000 83fc 	beq.w	800838e <_dtoa_r+0xb76>
 8007b96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b9a:	2c39      	cmp	r4, #57	; 0x39
 8007b9c:	f103 0501 	add.w	r5, r3, #1
 8007ba0:	d0f6      	beq.n	8007b90 <_dtoa_r+0x378>
 8007ba2:	3401      	adds	r4, #1
 8007ba4:	701c      	strb	r4, [r3, #0]
 8007ba6:	9908      	ldr	r1, [sp, #32]
 8007ba8:	4648      	mov	r0, r9
 8007baa:	f001 fdaf 	bl	800970c <_Bfree>
 8007bae:	2200      	movs	r2, #0
 8007bb0:	9b04      	ldr	r3, [sp, #16]
 8007bb2:	702a      	strb	r2, [r5, #0]
 8007bb4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 839b 	beq.w	80082f8 <_dtoa_r+0xae0>
 8007bc2:	9807      	ldr	r0, [sp, #28]
 8007bc4:	601d      	str	r5, [r3, #0]
 8007bc6:	b019      	add	sp, #100	; 0x64
 8007bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bce:	2a00      	cmp	r2, #0
 8007bd0:	f000 810e 	beq.w	8007df0 <_dtoa_r+0x5d8>
 8007bd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007bd6:	2a01      	cmp	r2, #1
 8007bd8:	f340 8257 	ble.w	800808a <_dtoa_r+0x872>
 8007bdc:	9b06      	ldr	r3, [sp, #24]
 8007bde:	9a02      	ldr	r2, [sp, #8]
 8007be0:	1e5f      	subs	r7, r3, #1
 8007be2:	42ba      	cmp	r2, r7
 8007be4:	f2c0 838b 	blt.w	80082fe <_dtoa_r+0xae6>
 8007be8:	1bd7      	subs	r7, r2, r7
 8007bea:	9b06      	ldr	r3, [sp, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f2c0 8480 	blt.w	80084f2 <_dtoa_r+0xcda>
 8007bf2:	9d05      	ldr	r5, [sp, #20]
 8007bf4:	9b06      	ldr	r3, [sp, #24]
 8007bf6:	9a05      	ldr	r2, [sp, #20]
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	441a      	add	r2, r3
 8007bfc:	4648      	mov	r0, r9
 8007bfe:	9205      	str	r2, [sp, #20]
 8007c00:	4498      	add	r8, r3
 8007c02:	f001 fe1b 	bl	800983c <__i2b>
 8007c06:	4606      	mov	r6, r0
 8007c08:	b165      	cbz	r5, 8007c24 <_dtoa_r+0x40c>
 8007c0a:	f1b8 0f00 	cmp.w	r8, #0
 8007c0e:	dd09      	ble.n	8007c24 <_dtoa_r+0x40c>
 8007c10:	4545      	cmp	r5, r8
 8007c12:	9a05      	ldr	r2, [sp, #20]
 8007c14:	462b      	mov	r3, r5
 8007c16:	bfa8      	it	ge
 8007c18:	4643      	movge	r3, r8
 8007c1a:	1ad2      	subs	r2, r2, r3
 8007c1c:	9205      	str	r2, [sp, #20]
 8007c1e:	1aed      	subs	r5, r5, r3
 8007c20:	ebc3 0808 	rsb	r8, r3, r8
 8007c24:	9b02      	ldr	r3, [sp, #8]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f340 82f5 	ble.w	8008216 <_dtoa_r+0x9fe>
 8007c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c2e:	2a00      	cmp	r2, #0
 8007c30:	f000 8202 	beq.w	8008038 <_dtoa_r+0x820>
 8007c34:	2f00      	cmp	r7, #0
 8007c36:	f000 81ff 	beq.w	8008038 <_dtoa_r+0x820>
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	463a      	mov	r2, r7
 8007c3e:	4648      	mov	r0, r9
 8007c40:	f001 fe9e 	bl	8009980 <__pow5mult>
 8007c44:	9a08      	ldr	r2, [sp, #32]
 8007c46:	4601      	mov	r1, r0
 8007c48:	4606      	mov	r6, r0
 8007c4a:	4648      	mov	r0, r9
 8007c4c:	f001 fe00 	bl	8009850 <__multiply>
 8007c50:	9908      	ldr	r1, [sp, #32]
 8007c52:	4604      	mov	r4, r0
 8007c54:	4648      	mov	r0, r9
 8007c56:	f001 fd59 	bl	800970c <_Bfree>
 8007c5a:	9b02      	ldr	r3, [sp, #8]
 8007c5c:	1bdb      	subs	r3, r3, r7
 8007c5e:	9302      	str	r3, [sp, #8]
 8007c60:	f040 81e9 	bne.w	8008036 <_dtoa_r+0x81e>
 8007c64:	2101      	movs	r1, #1
 8007c66:	4648      	mov	r0, r9
 8007c68:	f001 fde8 	bl	800983c <__i2b>
 8007c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c6e:	9002      	str	r0, [sp, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 8215 	beq.w	80080a0 <_dtoa_r+0x888>
 8007c76:	4601      	mov	r1, r0
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4648      	mov	r0, r9
 8007c7c:	f001 fe80 	bl	8009980 <__pow5mult>
 8007c80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c82:	9002      	str	r0, [sp, #8]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	f340 82f3 	ble.w	8008270 <_dtoa_r+0xa58>
 8007c8a:	2700      	movs	r7, #0
 8007c8c:	9a02      	ldr	r2, [sp, #8]
 8007c8e:	6913      	ldr	r3, [r2, #16]
 8007c90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c94:	6918      	ldr	r0, [r3, #16]
 8007c96:	f001 fd83 	bl	80097a0 <__hi0bits>
 8007c9a:	f1c0 0020 	rsb	r0, r0, #32
 8007c9e:	4440      	add	r0, r8
 8007ca0:	f010 001f 	ands.w	r0, r0, #31
 8007ca4:	f000 81fa 	beq.w	800809c <_dtoa_r+0x884>
 8007ca8:	f1c0 0320 	rsb	r3, r0, #32
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	f340 84bd 	ble.w	800862c <_dtoa_r+0xe14>
 8007cb2:	f1c0 001c 	rsb	r0, r0, #28
 8007cb6:	9b05      	ldr	r3, [sp, #20]
 8007cb8:	4403      	add	r3, r0
 8007cba:	9305      	str	r3, [sp, #20]
 8007cbc:	4405      	add	r5, r0
 8007cbe:	4480      	add	r8, r0
 8007cc0:	9b05      	ldr	r3, [sp, #20]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	dd05      	ble.n	8007cd2 <_dtoa_r+0x4ba>
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4648      	mov	r0, r9
 8007ccc:	f001 fea8 	bl	8009a20 <__lshift>
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	f1b8 0f00 	cmp.w	r8, #0
 8007cd6:	dd05      	ble.n	8007ce4 <_dtoa_r+0x4cc>
 8007cd8:	4642      	mov	r2, r8
 8007cda:	9902      	ldr	r1, [sp, #8]
 8007cdc:	4648      	mov	r0, r9
 8007cde:	f001 fe9f 	bl	8009a20 <__lshift>
 8007ce2:	9002      	str	r0, [sp, #8]
 8007ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f040 827a 	bne.w	80081e0 <_dtoa_r+0x9c8>
 8007cec:	9b06      	ldr	r3, [sp, #24]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f340 8293 	ble.w	800821a <_dtoa_r+0xa02>
 8007cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f040 81f4 	bne.w	80080e4 <_dtoa_r+0x8cc>
 8007cfc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8007d00:	9f06      	ldr	r7, [sp, #24]
 8007d02:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007d06:	465d      	mov	r5, fp
 8007d08:	e002      	b.n	8007d10 <_dtoa_r+0x4f8>
 8007d0a:	f001 fd09 	bl	8009720 <__multadd>
 8007d0e:	4604      	mov	r4, r0
 8007d10:	4641      	mov	r1, r8
 8007d12:	4620      	mov	r0, r4
 8007d14:	f7ff fcec 	bl	80076f0 <quorem>
 8007d18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007d1c:	f805 ab01 	strb.w	sl, [r5], #1
 8007d20:	ebcb 0305 	rsb	r3, fp, r5
 8007d24:	42bb      	cmp	r3, r7
 8007d26:	f04f 020a 	mov.w	r2, #10
 8007d2a:	f04f 0300 	mov.w	r3, #0
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4648      	mov	r0, r9
 8007d32:	dbea      	blt.n	8007d0a <_dtoa_r+0x4f2>
 8007d34:	9b07      	ldr	r3, [sp, #28]
 8007d36:	9a06      	ldr	r2, [sp, #24]
 8007d38:	2a01      	cmp	r2, #1
 8007d3a:	bfac      	ite	ge
 8007d3c:	189b      	addge	r3, r3, r2
 8007d3e:	3301      	addlt	r3, #1
 8007d40:	461d      	mov	r5, r3
 8007d42:	f04f 0b00 	mov.w	fp, #0
 8007d46:	4621      	mov	r1, r4
 8007d48:	2201      	movs	r2, #1
 8007d4a:	4648      	mov	r0, r9
 8007d4c:	f001 fe68 	bl	8009a20 <__lshift>
 8007d50:	9902      	ldr	r1, [sp, #8]
 8007d52:	9008      	str	r0, [sp, #32]
 8007d54:	f001 febc 	bl	8009ad0 <__mcmp>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	f340 8305 	ble.w	8008368 <_dtoa_r+0xb50>
 8007d5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d62:	9907      	ldr	r1, [sp, #28]
 8007d64:	1e6b      	subs	r3, r5, #1
 8007d66:	e004      	b.n	8007d72 <_dtoa_r+0x55a>
 8007d68:	428b      	cmp	r3, r1
 8007d6a:	f000 8274 	beq.w	8008256 <_dtoa_r+0xa3e>
 8007d6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d72:	2a39      	cmp	r2, #57	; 0x39
 8007d74:	f103 0501 	add.w	r5, r3, #1
 8007d78:	d0f6      	beq.n	8007d68 <_dtoa_r+0x550>
 8007d7a:	3201      	adds	r2, #1
 8007d7c:	701a      	strb	r2, [r3, #0]
 8007d7e:	9902      	ldr	r1, [sp, #8]
 8007d80:	4648      	mov	r0, r9
 8007d82:	f001 fcc3 	bl	800970c <_Bfree>
 8007d86:	2e00      	cmp	r6, #0
 8007d88:	f43f af0d 	beq.w	8007ba6 <_dtoa_r+0x38e>
 8007d8c:	f1bb 0f00 	cmp.w	fp, #0
 8007d90:	d005      	beq.n	8007d9e <_dtoa_r+0x586>
 8007d92:	45b3      	cmp	fp, r6
 8007d94:	d003      	beq.n	8007d9e <_dtoa_r+0x586>
 8007d96:	4659      	mov	r1, fp
 8007d98:	4648      	mov	r0, r9
 8007d9a:	f001 fcb7 	bl	800970c <_Bfree>
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4648      	mov	r0, r9
 8007da2:	f001 fcb3 	bl	800970c <_Bfree>
 8007da6:	e6fe      	b.n	8007ba6 <_dtoa_r+0x38e>
 8007da8:	2301      	movs	r3, #1
 8007daa:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dac:	e5ec      	b.n	8007988 <_dtoa_r+0x170>
 8007dae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007db2:	4640      	mov	r0, r8
 8007db4:	f7fb ff0e 	bl	8003bd4 <__aeabi_i2d>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	4639      	mov	r1, r7
 8007dc0:	f7fc f9d6 	bl	8004170 <__aeabi_dcmpeq>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	f47f adcb 	bne.w	8007960 <_dtoa_r+0x148>
 8007dca:	f108 33ff 	add.w	r3, r8, #4294967295
 8007dce:	9304      	str	r3, [sp, #16]
 8007dd0:	e5c6      	b.n	8007960 <_dtoa_r+0x148>
 8007dd2:	9a05      	ldr	r2, [sp, #20]
 8007dd4:	9b04      	ldr	r3, [sp, #16]
 8007dd6:	1ad2      	subs	r2, r2, r3
 8007dd8:	425b      	negs	r3, r3
 8007dda:	9302      	str	r3, [sp, #8]
 8007ddc:	2300      	movs	r3, #0
 8007dde:	9205      	str	r2, [sp, #20]
 8007de0:	930a      	str	r3, [sp, #40]	; 0x28
 8007de2:	e5e0      	b.n	80079a6 <_dtoa_r+0x18e>
 8007de4:	f1c8 0300 	rsb	r3, r8, #0
 8007de8:	9305      	str	r3, [sp, #20]
 8007dea:	f04f 0800 	mov.w	r8, #0
 8007dee:	e5d2      	b.n	8007996 <_dtoa_r+0x17e>
 8007df0:	9f02      	ldr	r7, [sp, #8]
 8007df2:	9d05      	ldr	r5, [sp, #20]
 8007df4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007df6:	e707      	b.n	8007c08 <_dtoa_r+0x3f0>
 8007df8:	f1c3 0820 	rsb	r8, r3, #32
 8007dfc:	fa0a f008 	lsl.w	r0, sl, r8
 8007e00:	e57b      	b.n	80078fa <_dtoa_r+0xe2>
 8007e02:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e04:	e5c0      	b.n	8007988 <_dtoa_r+0x170>
 8007e06:	bf00      	nop
 8007e08:	40240000 	.word	0x40240000
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e10:	9b04      	ldr	r3, [sp, #16]
 8007e12:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007e14:	4413      	add	r3, r2
 8007e16:	930c      	str	r3, [sp, #48]	; 0x30
 8007e18:	3301      	adds	r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	9306      	str	r3, [sp, #24]
 8007e1e:	f340 827d 	ble.w	800831c <_dtoa_r+0xb04>
 8007e22:	9c06      	ldr	r4, [sp, #24]
 8007e24:	4626      	mov	r6, r4
 8007e26:	2100      	movs	r1, #0
 8007e28:	2e17      	cmp	r6, #23
 8007e2a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007e2e:	d90b      	bls.n	8007e48 <_dtoa_r+0x630>
 8007e30:	2201      	movs	r2, #1
 8007e32:	2304      	movs	r3, #4
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	f103 0014 	add.w	r0, r3, #20
 8007e3a:	42b0      	cmp	r0, r6
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	f102 0201 	add.w	r2, r2, #1
 8007e42:	d9f7      	bls.n	8007e34 <_dtoa_r+0x61c>
 8007e44:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007e48:	4648      	mov	r0, r9
 8007e4a:	f001 fc39 	bl	80096c0 <_Balloc>
 8007e4e:	2c0e      	cmp	r4, #14
 8007e50:	9007      	str	r0, [sp, #28]
 8007e52:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8007e56:	f63f ade5 	bhi.w	8007a24 <_dtoa_r+0x20c>
 8007e5a:	2d00      	cmp	r5, #0
 8007e5c:	f43f ade2 	beq.w	8007a24 <_dtoa_r+0x20c>
 8007e60:	9904      	ldr	r1, [sp, #16]
 8007e62:	2900      	cmp	r1, #0
 8007e64:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8007e68:	f340 829a 	ble.w	80083a0 <_dtoa_r+0xb88>
 8007e6c:	4b90      	ldr	r3, [pc, #576]	; (80080b0 <_dtoa_r+0x898>)
 8007e6e:	f001 020f 	and.w	r2, r1, #15
 8007e72:	110e      	asrs	r6, r1, #4
 8007e74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e78:	06f0      	lsls	r0, r6, #27
 8007e7a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007e7e:	f140 8246 	bpl.w	800830e <_dtoa_r+0xaf6>
 8007e82:	4b8c      	ldr	r3, [pc, #560]	; (80080b4 <_dtoa_r+0x89c>)
 8007e84:	4650      	mov	r0, sl
 8007e86:	4659      	mov	r1, fp
 8007e88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e8c:	f7fc f832 	bl	8003ef4 <__aeabi_ddiv>
 8007e90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e94:	f006 060f 	and.w	r6, r6, #15
 8007e98:	f04f 0a03 	mov.w	sl, #3
 8007e9c:	b186      	cbz	r6, 8007ec0 <_dtoa_r+0x6a8>
 8007e9e:	4f85      	ldr	r7, [pc, #532]	; (80080b4 <_dtoa_r+0x89c>)
 8007ea0:	07f1      	lsls	r1, r6, #31
 8007ea2:	d509      	bpl.n	8007eb8 <_dtoa_r+0x6a0>
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eac:	f7fb fef8 	bl	8003ca0 <__aeabi_dmul>
 8007eb0:	f10a 0a01 	add.w	sl, sl, #1
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	460d      	mov	r5, r1
 8007eb8:	1076      	asrs	r6, r6, #1
 8007eba:	f107 0708 	add.w	r7, r7, #8
 8007ebe:	d1ef      	bne.n	8007ea0 <_dtoa_r+0x688>
 8007ec0:	4622      	mov	r2, r4
 8007ec2:	462b      	mov	r3, r5
 8007ec4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ec8:	f7fc f814 	bl	8003ef4 <__aeabi_ddiv>
 8007ecc:	4606      	mov	r6, r0
 8007ece:	460f      	mov	r7, r1
 8007ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed2:	b143      	cbz	r3, 8007ee6 <_dtoa_r+0x6ce>
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	4b78      	ldr	r3, [pc, #480]	; (80080b8 <_dtoa_r+0x8a0>)
 8007ed8:	4630      	mov	r0, r6
 8007eda:	4639      	mov	r1, r7
 8007edc:	f7fc f952 	bl	8004184 <__aeabi_dcmplt>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	f040 831a 	bne.w	800851a <_dtoa_r+0xd02>
 8007ee6:	4650      	mov	r0, sl
 8007ee8:	f7fb fe74 	bl	8003bd4 <__aeabi_i2d>
 8007eec:	4632      	mov	r2, r6
 8007eee:	463b      	mov	r3, r7
 8007ef0:	f7fb fed6 	bl	8003ca0 <__aeabi_dmul>
 8007ef4:	4b71      	ldr	r3, [pc, #452]	; (80080bc <_dtoa_r+0x8a4>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f7fb fd20 	bl	800393c <__adddf3>
 8007efc:	9b06      	ldr	r3, [sp, #24]
 8007efe:	4604      	mov	r4, r0
 8007f00:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 81db 	beq.w	80082c0 <_dtoa_r+0xaa8>
 8007f0a:	9b04      	ldr	r3, [sp, #16]
 8007f0c:	9314      	str	r3, [sp, #80]	; 0x50
 8007f0e:	9b06      	ldr	r3, [sp, #24]
 8007f10:	9310      	str	r3, [sp, #64]	; 0x40
 8007f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 8294 	beq.w	8008442 <_dtoa_r+0xc2a>
 8007f1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f1c:	4b64      	ldr	r3, [pc, #400]	; (80080b0 <_dtoa_r+0x898>)
 8007f1e:	4968      	ldr	r1, [pc, #416]	; (80080c0 <_dtoa_r+0x8a8>)
 8007f20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f24:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f28:	2000      	movs	r0, #0
 8007f2a:	f7fb ffe3 	bl	8003ef4 <__aeabi_ddiv>
 8007f2e:	4622      	mov	r2, r4
 8007f30:	462b      	mov	r3, r5
 8007f32:	f7fb fd01 	bl	8003938 <__aeabi_dsub>
 8007f36:	4682      	mov	sl, r0
 8007f38:	468b      	mov	fp, r1
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	f7fc f95f 	bl	8004200 <__aeabi_d2iz>
 8007f42:	4604      	mov	r4, r0
 8007f44:	f7fb fe46 	bl	8003bd4 <__aeabi_i2d>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	4639      	mov	r1, r7
 8007f50:	f7fb fcf2 	bl	8003938 <__aeabi_dsub>
 8007f54:	3430      	adds	r4, #48	; 0x30
 8007f56:	9d07      	ldr	r5, [sp, #28]
 8007f58:	b2e4      	uxtb	r4, r4
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	460f      	mov	r7, r1
 8007f5e:	702c      	strb	r4, [r5, #0]
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4650      	mov	r0, sl
 8007f66:	4659      	mov	r1, fp
 8007f68:	3501      	adds	r5, #1
 8007f6a:	f7fc f929 	bl	80041c0 <__aeabi_dcmpgt>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d150      	bne.n	8008014 <_dtoa_r+0x7fc>
 8007f72:	4632      	mov	r2, r6
 8007f74:	463b      	mov	r3, r7
 8007f76:	2000      	movs	r0, #0
 8007f78:	494f      	ldr	r1, [pc, #316]	; (80080b8 <_dtoa_r+0x8a0>)
 8007f7a:	f7fb fcdd 	bl	8003938 <__aeabi_dsub>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4650      	mov	r0, sl
 8007f84:	4659      	mov	r1, fp
 8007f86:	f7fc f91b 	bl	80041c0 <__aeabi_dcmpgt>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	f040 8308 	bne.w	80085a0 <_dtoa_r+0xd88>
 8007f90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f92:	2a01      	cmp	r2, #1
 8007f94:	f340 81f7 	ble.w	8008386 <_dtoa_r+0xb6e>
 8007f98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f9a:	9a07      	ldr	r2, [sp, #28]
 8007f9c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007fa0:	4413      	add	r3, r2
 8007fa2:	4698      	mov	r8, r3
 8007fa4:	e00d      	b.n	8007fc2 <_dtoa_r+0x7aa>
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	4943      	ldr	r1, [pc, #268]	; (80080b8 <_dtoa_r+0x8a0>)
 8007faa:	f7fb fcc5 	bl	8003938 <__aeabi_dsub>
 8007fae:	4652      	mov	r2, sl
 8007fb0:	465b      	mov	r3, fp
 8007fb2:	f7fc f8e7 	bl	8004184 <__aeabi_dcmplt>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	f040 82f2 	bne.w	80085a0 <_dtoa_r+0xd88>
 8007fbc:	4545      	cmp	r5, r8
 8007fbe:	f000 81e0 	beq.w	8008382 <_dtoa_r+0xb6a>
 8007fc2:	4650      	mov	r0, sl
 8007fc4:	4659      	mov	r1, fp
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	4b3e      	ldr	r3, [pc, #248]	; (80080c4 <_dtoa_r+0x8ac>)
 8007fca:	f7fb fe69 	bl	8003ca0 <__aeabi_dmul>
 8007fce:	2200      	movs	r2, #0
 8007fd0:	4b3c      	ldr	r3, [pc, #240]	; (80080c4 <_dtoa_r+0x8ac>)
 8007fd2:	4682      	mov	sl, r0
 8007fd4:	468b      	mov	fp, r1
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	4639      	mov	r1, r7
 8007fda:	f7fb fe61 	bl	8003ca0 <__aeabi_dmul>
 8007fde:	460f      	mov	r7, r1
 8007fe0:	4606      	mov	r6, r0
 8007fe2:	f7fc f90d 	bl	8004200 <__aeabi_d2iz>
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	f7fb fdf4 	bl	8003bd4 <__aeabi_i2d>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	f7fb fca0 	bl	8003938 <__aeabi_dsub>
 8007ff8:	3430      	adds	r4, #48	; 0x30
 8007ffa:	b2e4      	uxtb	r4, r4
 8007ffc:	4652      	mov	r2, sl
 8007ffe:	465b      	mov	r3, fp
 8008000:	f805 4b01 	strb.w	r4, [r5], #1
 8008004:	4606      	mov	r6, r0
 8008006:	460f      	mov	r7, r1
 8008008:	f7fc f8bc 	bl	8004184 <__aeabi_dcmplt>
 800800c:	4632      	mov	r2, r6
 800800e:	463b      	mov	r3, r7
 8008010:	2800      	cmp	r0, #0
 8008012:	d0c8      	beq.n	8007fa6 <_dtoa_r+0x78e>
 8008014:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008016:	9304      	str	r3, [sp, #16]
 8008018:	e5c5      	b.n	8007ba6 <_dtoa_r+0x38e>
 800801a:	2300      	movs	r3, #0
 800801c:	9309      	str	r3, [sp, #36]	; 0x24
 800801e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008020:	2b00      	cmp	r3, #0
 8008022:	f340 8180 	ble.w	8008326 <_dtoa_r+0xb0e>
 8008026:	461e      	mov	r6, r3
 8008028:	461c      	mov	r4, r3
 800802a:	930c      	str	r3, [sp, #48]	; 0x30
 800802c:	9306      	str	r3, [sp, #24]
 800802e:	e6fa      	b.n	8007e26 <_dtoa_r+0x60e>
 8008030:	2301      	movs	r3, #1
 8008032:	9309      	str	r3, [sp, #36]	; 0x24
 8008034:	e7f3      	b.n	800801e <_dtoa_r+0x806>
 8008036:	9408      	str	r4, [sp, #32]
 8008038:	9a02      	ldr	r2, [sp, #8]
 800803a:	9908      	ldr	r1, [sp, #32]
 800803c:	4648      	mov	r0, r9
 800803e:	f001 fc9f 	bl	8009980 <__pow5mult>
 8008042:	4604      	mov	r4, r0
 8008044:	e60e      	b.n	8007c64 <_dtoa_r+0x44c>
 8008046:	9b06      	ldr	r3, [sp, #24]
 8008048:	2b00      	cmp	r3, #0
 800804a:	f73f acfe 	bgt.w	8007a4a <_dtoa_r+0x232>
 800804e:	f040 814f 	bne.w	80082f0 <_dtoa_r+0xad8>
 8008052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008056:	2200      	movs	r2, #0
 8008058:	4b1b      	ldr	r3, [pc, #108]	; (80080c8 <_dtoa_r+0x8b0>)
 800805a:	f7fb fe21 	bl	8003ca0 <__aeabi_dmul>
 800805e:	465b      	mov	r3, fp
 8008060:	4652      	mov	r2, sl
 8008062:	f7fc f8a3 	bl	80041ac <__aeabi_dcmpge>
 8008066:	9b06      	ldr	r3, [sp, #24]
 8008068:	9302      	str	r3, [sp, #8]
 800806a:	461e      	mov	r6, r3
 800806c:	2800      	cmp	r0, #0
 800806e:	f000 80ea 	beq.w	8008246 <_dtoa_r+0xa2e>
 8008072:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008074:	9d07      	ldr	r5, [sp, #28]
 8008076:	43db      	mvns	r3, r3
 8008078:	9304      	str	r3, [sp, #16]
 800807a:	9902      	ldr	r1, [sp, #8]
 800807c:	4648      	mov	r0, r9
 800807e:	f001 fb45 	bl	800970c <_Bfree>
 8008082:	2e00      	cmp	r6, #0
 8008084:	f43f ad8f 	beq.w	8007ba6 <_dtoa_r+0x38e>
 8008088:	e689      	b.n	8007d9e <_dtoa_r+0x586>
 800808a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800808c:	2a00      	cmp	r2, #0
 800808e:	f000 8238 	beq.w	8008502 <_dtoa_r+0xcea>
 8008092:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008096:	9f02      	ldr	r7, [sp, #8]
 8008098:	9d05      	ldr	r5, [sp, #20]
 800809a:	e5ac      	b.n	8007bf6 <_dtoa_r+0x3de>
 800809c:	201c      	movs	r0, #28
 800809e:	e60a      	b.n	8007cb6 <_dtoa_r+0x49e>
 80080a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	f340 8280 	ble.w	80085a8 <_dtoa_r+0xd90>
 80080a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80080aa:	2001      	movs	r0, #1
 80080ac:	e5f7      	b.n	8007c9e <_dtoa_r+0x486>
 80080ae:	bf00      	nop
 80080b0:	0800ad58 	.word	0x0800ad58
 80080b4:	0800ae20 	.word	0x0800ae20
 80080b8:	3ff00000 	.word	0x3ff00000
 80080bc:	401c0000 	.word	0x401c0000
 80080c0:	3fe00000 	.word	0x3fe00000
 80080c4:	40240000 	.word	0x40240000
 80080c8:	40140000 	.word	0x40140000
 80080cc:	4631      	mov	r1, r6
 80080ce:	2300      	movs	r3, #0
 80080d0:	220a      	movs	r2, #10
 80080d2:	4648      	mov	r0, r9
 80080d4:	f001 fb24 	bl	8009720 <__multadd>
 80080d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080da:	2b00      	cmp	r3, #0
 80080dc:	4606      	mov	r6, r0
 80080de:	f340 828d 	ble.w	80085fc <_dtoa_r+0xde4>
 80080e2:	9306      	str	r3, [sp, #24]
 80080e4:	2d00      	cmp	r5, #0
 80080e6:	dd05      	ble.n	80080f4 <_dtoa_r+0x8dc>
 80080e8:	4631      	mov	r1, r6
 80080ea:	462a      	mov	r2, r5
 80080ec:	4648      	mov	r0, r9
 80080ee:	f001 fc97 	bl	8009a20 <__lshift>
 80080f2:	4606      	mov	r6, r0
 80080f4:	2f00      	cmp	r7, #0
 80080f6:	f040 817c 	bne.w	80083f2 <_dtoa_r+0xbda>
 80080fa:	46b0      	mov	r8, r6
 80080fc:	9b06      	ldr	r3, [sp, #24]
 80080fe:	9a07      	ldr	r2, [sp, #28]
 8008100:	3b01      	subs	r3, #1
 8008102:	18d3      	adds	r3, r2, r3
 8008104:	9308      	str	r3, [sp, #32]
 8008106:	f00a 0301 	and.w	r3, sl, #1
 800810a:	9309      	str	r3, [sp, #36]	; 0x24
 800810c:	4617      	mov	r7, r2
 800810e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008112:	4620      	mov	r0, r4
 8008114:	4659      	mov	r1, fp
 8008116:	f7ff faeb 	bl	80076f0 <quorem>
 800811a:	4631      	mov	r1, r6
 800811c:	4605      	mov	r5, r0
 800811e:	4620      	mov	r0, r4
 8008120:	f001 fcd6 	bl	8009ad0 <__mcmp>
 8008124:	4642      	mov	r2, r8
 8008126:	4659      	mov	r1, fp
 8008128:	4682      	mov	sl, r0
 800812a:	4648      	mov	r0, r9
 800812c:	f001 fcf2 	bl	8009b14 <__mdiff>
 8008130:	68c2      	ldr	r2, [r0, #12]
 8008132:	4683      	mov	fp, r0
 8008134:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8008138:	2a00      	cmp	r2, #0
 800813a:	d149      	bne.n	80081d0 <_dtoa_r+0x9b8>
 800813c:	4601      	mov	r1, r0
 800813e:	4620      	mov	r0, r4
 8008140:	9306      	str	r3, [sp, #24]
 8008142:	f001 fcc5 	bl	8009ad0 <__mcmp>
 8008146:	4659      	mov	r1, fp
 8008148:	9005      	str	r0, [sp, #20]
 800814a:	4648      	mov	r0, r9
 800814c:	f001 fade 	bl	800970c <_Bfree>
 8008150:	9a05      	ldr	r2, [sp, #20]
 8008152:	9b06      	ldr	r3, [sp, #24]
 8008154:	b92a      	cbnz	r2, 8008162 <_dtoa_r+0x94a>
 8008156:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008158:	b919      	cbnz	r1, 8008162 <_dtoa_r+0x94a>
 800815a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800815c:	2900      	cmp	r1, #0
 800815e:	f000 8235 	beq.w	80085cc <_dtoa_r+0xdb4>
 8008162:	f1ba 0f00 	cmp.w	sl, #0
 8008166:	f2c0 80e3 	blt.w	8008330 <_dtoa_r+0xb18>
 800816a:	d105      	bne.n	8008178 <_dtoa_r+0x960>
 800816c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800816e:	b919      	cbnz	r1, 8008178 <_dtoa_r+0x960>
 8008170:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008172:	2900      	cmp	r1, #0
 8008174:	f000 80dc 	beq.w	8008330 <_dtoa_r+0xb18>
 8008178:	2a00      	cmp	r2, #0
 800817a:	f300 814e 	bgt.w	800841a <_dtoa_r+0xc02>
 800817e:	9a08      	ldr	r2, [sp, #32]
 8008180:	703b      	strb	r3, [r7, #0]
 8008182:	f107 0a01 	add.w	sl, r7, #1
 8008186:	4297      	cmp	r7, r2
 8008188:	4655      	mov	r5, sl
 800818a:	f000 8152 	beq.w	8008432 <_dtoa_r+0xc1a>
 800818e:	4621      	mov	r1, r4
 8008190:	2300      	movs	r3, #0
 8008192:	220a      	movs	r2, #10
 8008194:	4648      	mov	r0, r9
 8008196:	f001 fac3 	bl	8009720 <__multadd>
 800819a:	4546      	cmp	r6, r8
 800819c:	4604      	mov	r4, r0
 800819e:	4631      	mov	r1, r6
 80081a0:	f04f 0300 	mov.w	r3, #0
 80081a4:	f04f 020a 	mov.w	r2, #10
 80081a8:	4648      	mov	r0, r9
 80081aa:	d00b      	beq.n	80081c4 <_dtoa_r+0x9ac>
 80081ac:	f001 fab8 	bl	8009720 <__multadd>
 80081b0:	4641      	mov	r1, r8
 80081b2:	4606      	mov	r6, r0
 80081b4:	2300      	movs	r3, #0
 80081b6:	220a      	movs	r2, #10
 80081b8:	4648      	mov	r0, r9
 80081ba:	f001 fab1 	bl	8009720 <__multadd>
 80081be:	4657      	mov	r7, sl
 80081c0:	4680      	mov	r8, r0
 80081c2:	e7a4      	b.n	800810e <_dtoa_r+0x8f6>
 80081c4:	f001 faac 	bl	8009720 <__multadd>
 80081c8:	4657      	mov	r7, sl
 80081ca:	4606      	mov	r6, r0
 80081cc:	4680      	mov	r8, r0
 80081ce:	e79e      	b.n	800810e <_dtoa_r+0x8f6>
 80081d0:	4601      	mov	r1, r0
 80081d2:	4648      	mov	r0, r9
 80081d4:	9305      	str	r3, [sp, #20]
 80081d6:	f001 fa99 	bl	800970c <_Bfree>
 80081da:	2201      	movs	r2, #1
 80081dc:	9b05      	ldr	r3, [sp, #20]
 80081de:	e7c0      	b.n	8008162 <_dtoa_r+0x94a>
 80081e0:	9902      	ldr	r1, [sp, #8]
 80081e2:	4620      	mov	r0, r4
 80081e4:	f001 fc74 	bl	8009ad0 <__mcmp>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	f6bf ad7f 	bge.w	8007cec <_dtoa_r+0x4d4>
 80081ee:	4621      	mov	r1, r4
 80081f0:	9c04      	ldr	r4, [sp, #16]
 80081f2:	2300      	movs	r3, #0
 80081f4:	3c01      	subs	r4, #1
 80081f6:	220a      	movs	r2, #10
 80081f8:	4648      	mov	r0, r9
 80081fa:	9404      	str	r4, [sp, #16]
 80081fc:	f001 fa90 	bl	8009720 <__multadd>
 8008200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008202:	4604      	mov	r4, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	f47f af61 	bne.w	80080cc <_dtoa_r+0x8b4>
 800820a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800820c:	2b00      	cmp	r3, #0
 800820e:	f340 81ed 	ble.w	80085ec <_dtoa_r+0xdd4>
 8008212:	9306      	str	r3, [sp, #24]
 8008214:	e572      	b.n	8007cfc <_dtoa_r+0x4e4>
 8008216:	9c08      	ldr	r4, [sp, #32]
 8008218:	e524      	b.n	8007c64 <_dtoa_r+0x44c>
 800821a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800821c:	2b02      	cmp	r3, #2
 800821e:	f77f ad69 	ble.w	8007cf4 <_dtoa_r+0x4dc>
 8008222:	9b06      	ldr	r3, [sp, #24]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f040 819d 	bne.w	8008564 <_dtoa_r+0xd4c>
 800822a:	9902      	ldr	r1, [sp, #8]
 800822c:	2205      	movs	r2, #5
 800822e:	4648      	mov	r0, r9
 8008230:	f001 fa76 	bl	8009720 <__multadd>
 8008234:	4601      	mov	r1, r0
 8008236:	9002      	str	r0, [sp, #8]
 8008238:	4620      	mov	r0, r4
 800823a:	f001 fc49 	bl	8009ad0 <__mcmp>
 800823e:	2800      	cmp	r0, #0
 8008240:	9408      	str	r4, [sp, #32]
 8008242:	f77f af16 	ble.w	8008072 <_dtoa_r+0x85a>
 8008246:	9a04      	ldr	r2, [sp, #16]
 8008248:	9907      	ldr	r1, [sp, #28]
 800824a:	2331      	movs	r3, #49	; 0x31
 800824c:	3201      	adds	r2, #1
 800824e:	9204      	str	r2, [sp, #16]
 8008250:	700b      	strb	r3, [r1, #0]
 8008252:	1c4d      	adds	r5, r1, #1
 8008254:	e711      	b.n	800807a <_dtoa_r+0x862>
 8008256:	9a04      	ldr	r2, [sp, #16]
 8008258:	3201      	adds	r2, #1
 800825a:	9204      	str	r2, [sp, #16]
 800825c:	9a07      	ldr	r2, [sp, #28]
 800825e:	2331      	movs	r3, #49	; 0x31
 8008260:	7013      	strb	r3, [r2, #0]
 8008262:	e58c      	b.n	8007d7e <_dtoa_r+0x566>
 8008264:	2301      	movs	r3, #1
 8008266:	9309      	str	r3, [sp, #36]	; 0x24
 8008268:	e5d2      	b.n	8007e10 <_dtoa_r+0x5f8>
 800826a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800826e:	e49a      	b.n	8007ba6 <_dtoa_r+0x38e>
 8008270:	f1ba 0f00 	cmp.w	sl, #0
 8008274:	f47f ad09 	bne.w	8007c8a <_dtoa_r+0x472>
 8008278:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800827c:	2b00      	cmp	r3, #0
 800827e:	f040 813e 	bne.w	80084fe <_dtoa_r+0xce6>
 8008282:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8008286:	0d3f      	lsrs	r7, r7, #20
 8008288:	053f      	lsls	r7, r7, #20
 800828a:	b12f      	cbz	r7, 8008298 <_dtoa_r+0xa80>
 800828c:	9b05      	ldr	r3, [sp, #20]
 800828e:	3301      	adds	r3, #1
 8008290:	9305      	str	r3, [sp, #20]
 8008292:	f108 0801 	add.w	r8, r8, #1
 8008296:	2701      	movs	r7, #1
 8008298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800829a:	2001      	movs	r0, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	f43f acfe 	beq.w	8007c9e <_dtoa_r+0x486>
 80082a2:	e4f3      	b.n	8007c8c <_dtoa_r+0x474>
 80082a4:	4650      	mov	r0, sl
 80082a6:	f7fb fc95 	bl	8003bd4 <__aeabi_i2d>
 80082aa:	4632      	mov	r2, r6
 80082ac:	463b      	mov	r3, r7
 80082ae:	f7fb fcf7 	bl	8003ca0 <__aeabi_dmul>
 80082b2:	2200      	movs	r2, #0
 80082b4:	4bbf      	ldr	r3, [pc, #764]	; (80085b4 <_dtoa_r+0xd9c>)
 80082b6:	f7fb fb41 	bl	800393c <__adddf3>
 80082ba:	4604      	mov	r4, r0
 80082bc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80082c0:	4630      	mov	r0, r6
 80082c2:	4639      	mov	r1, r7
 80082c4:	2200      	movs	r2, #0
 80082c6:	4bbc      	ldr	r3, [pc, #752]	; (80085b8 <_dtoa_r+0xda0>)
 80082c8:	f7fb fb36 	bl	8003938 <__aeabi_dsub>
 80082cc:	4622      	mov	r2, r4
 80082ce:	462b      	mov	r3, r5
 80082d0:	4606      	mov	r6, r0
 80082d2:	460f      	mov	r7, r1
 80082d4:	f7fb ff74 	bl	80041c0 <__aeabi_dcmpgt>
 80082d8:	2800      	cmp	r0, #0
 80082da:	f040 80ae 	bne.w	800843a <_dtoa_r+0xc22>
 80082de:	4622      	mov	r2, r4
 80082e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80082e4:	4630      	mov	r0, r6
 80082e6:	4639      	mov	r1, r7
 80082e8:	f7fb ff4c 	bl	8004184 <__aeabi_dcmplt>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	d04a      	beq.n	8008386 <_dtoa_r+0xb6e>
 80082f0:	2300      	movs	r3, #0
 80082f2:	9302      	str	r3, [sp, #8]
 80082f4:	461e      	mov	r6, r3
 80082f6:	e6bc      	b.n	8008072 <_dtoa_r+0x85a>
 80082f8:	9807      	ldr	r0, [sp, #28]
 80082fa:	f7ff babe 	b.w	800787a <_dtoa_r+0x62>
 80082fe:	9b02      	ldr	r3, [sp, #8]
 8008300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008302:	9702      	str	r7, [sp, #8]
 8008304:	1afb      	subs	r3, r7, r3
 8008306:	441a      	add	r2, r3
 8008308:	920a      	str	r2, [sp, #40]	; 0x28
 800830a:	2700      	movs	r7, #0
 800830c:	e46d      	b.n	8007bea <_dtoa_r+0x3d2>
 800830e:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8008312:	f04f 0a02 	mov.w	sl, #2
 8008316:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800831a:	e5bf      	b.n	8007e9c <_dtoa_r+0x684>
 800831c:	461c      	mov	r4, r3
 800831e:	2100      	movs	r1, #0
 8008320:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8008324:	e590      	b.n	8007e48 <_dtoa_r+0x630>
 8008326:	2401      	movs	r4, #1
 8008328:	9423      	str	r4, [sp, #140]	; 0x8c
 800832a:	940c      	str	r4, [sp, #48]	; 0x30
 800832c:	9406      	str	r4, [sp, #24]
 800832e:	e7f6      	b.n	800831e <_dtoa_r+0xb06>
 8008330:	2a00      	cmp	r2, #0
 8008332:	469a      	mov	sl, r3
 8008334:	dd11      	ble.n	800835a <_dtoa_r+0xb42>
 8008336:	4621      	mov	r1, r4
 8008338:	2201      	movs	r2, #1
 800833a:	4648      	mov	r0, r9
 800833c:	f001 fb70 	bl	8009a20 <__lshift>
 8008340:	9902      	ldr	r1, [sp, #8]
 8008342:	4604      	mov	r4, r0
 8008344:	f001 fbc4 	bl	8009ad0 <__mcmp>
 8008348:	2800      	cmp	r0, #0
 800834a:	f340 8148 	ble.w	80085de <_dtoa_r+0xdc6>
 800834e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008352:	f000 8109 	beq.w	8008568 <_dtoa_r+0xd50>
 8008356:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 800835a:	46b3      	mov	fp, r6
 800835c:	f887 a000 	strb.w	sl, [r7]
 8008360:	1c7d      	adds	r5, r7, #1
 8008362:	4646      	mov	r6, r8
 8008364:	9408      	str	r4, [sp, #32]
 8008366:	e50a      	b.n	8007d7e <_dtoa_r+0x566>
 8008368:	d104      	bne.n	8008374 <_dtoa_r+0xb5c>
 800836a:	f01a 0f01 	tst.w	sl, #1
 800836e:	d001      	beq.n	8008374 <_dtoa_r+0xb5c>
 8008370:	e4f5      	b.n	8007d5e <_dtoa_r+0x546>
 8008372:	4615      	mov	r5, r2
 8008374:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008378:	2b30      	cmp	r3, #48	; 0x30
 800837a:	f105 32ff 	add.w	r2, r5, #4294967295
 800837e:	d0f8      	beq.n	8008372 <_dtoa_r+0xb5a>
 8008380:	e4fd      	b.n	8007d7e <_dtoa_r+0x566>
 8008382:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008386:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 800838a:	f7ff bb4b 	b.w	8007a24 <_dtoa_r+0x20c>
 800838e:	9907      	ldr	r1, [sp, #28]
 8008390:	2230      	movs	r2, #48	; 0x30
 8008392:	700a      	strb	r2, [r1, #0]
 8008394:	9a04      	ldr	r2, [sp, #16]
 8008396:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800839a:	3201      	adds	r2, #1
 800839c:	9204      	str	r2, [sp, #16]
 800839e:	e400      	b.n	8007ba2 <_dtoa_r+0x38a>
 80083a0:	9b04      	ldr	r3, [sp, #16]
 80083a2:	425c      	negs	r4, r3
 80083a4:	2c00      	cmp	r4, #0
 80083a6:	f000 80b3 	beq.w	8008510 <_dtoa_r+0xcf8>
 80083aa:	4b84      	ldr	r3, [pc, #528]	; (80085bc <_dtoa_r+0xda4>)
 80083ac:	f004 020f 	and.w	r2, r4, #15
 80083b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80083bc:	f7fb fc70 	bl	8003ca0 <__aeabi_dmul>
 80083c0:	1124      	asrs	r4, r4, #4
 80083c2:	4606      	mov	r6, r0
 80083c4:	460f      	mov	r7, r1
 80083c6:	f000 8116 	beq.w	80085f6 <_dtoa_r+0xdde>
 80083ca:	4d7d      	ldr	r5, [pc, #500]	; (80085c0 <_dtoa_r+0xda8>)
 80083cc:	f04f 0a02 	mov.w	sl, #2
 80083d0:	07e2      	lsls	r2, r4, #31
 80083d2:	d509      	bpl.n	80083e8 <_dtoa_r+0xbd0>
 80083d4:	4630      	mov	r0, r6
 80083d6:	4639      	mov	r1, r7
 80083d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083dc:	f7fb fc60 	bl	8003ca0 <__aeabi_dmul>
 80083e0:	f10a 0a01 	add.w	sl, sl, #1
 80083e4:	4606      	mov	r6, r0
 80083e6:	460f      	mov	r7, r1
 80083e8:	1064      	asrs	r4, r4, #1
 80083ea:	f105 0508 	add.w	r5, r5, #8
 80083ee:	d1ef      	bne.n	80083d0 <_dtoa_r+0xbb8>
 80083f0:	e56e      	b.n	8007ed0 <_dtoa_r+0x6b8>
 80083f2:	6871      	ldr	r1, [r6, #4]
 80083f4:	4648      	mov	r0, r9
 80083f6:	f001 f963 	bl	80096c0 <_Balloc>
 80083fa:	6933      	ldr	r3, [r6, #16]
 80083fc:	1c9a      	adds	r2, r3, #2
 80083fe:	4605      	mov	r5, r0
 8008400:	0092      	lsls	r2, r2, #2
 8008402:	f106 010c 	add.w	r1, r6, #12
 8008406:	300c      	adds	r0, #12
 8008408:	f7fb ff70 	bl	80042ec <memcpy>
 800840c:	4629      	mov	r1, r5
 800840e:	2201      	movs	r2, #1
 8008410:	4648      	mov	r0, r9
 8008412:	f001 fb05 	bl	8009a20 <__lshift>
 8008416:	4680      	mov	r8, r0
 8008418:	e670      	b.n	80080fc <_dtoa_r+0x8e4>
 800841a:	2b39      	cmp	r3, #57	; 0x39
 800841c:	f000 80a4 	beq.w	8008568 <_dtoa_r+0xd50>
 8008420:	f103 0a01 	add.w	sl, r3, #1
 8008424:	46b3      	mov	fp, r6
 8008426:	f887 a000 	strb.w	sl, [r7]
 800842a:	1c7d      	adds	r5, r7, #1
 800842c:	4646      	mov	r6, r8
 800842e:	9408      	str	r4, [sp, #32]
 8008430:	e4a5      	b.n	8007d7e <_dtoa_r+0x566>
 8008432:	46b3      	mov	fp, r6
 8008434:	469a      	mov	sl, r3
 8008436:	4646      	mov	r6, r8
 8008438:	e485      	b.n	8007d46 <_dtoa_r+0x52e>
 800843a:	2300      	movs	r3, #0
 800843c:	9302      	str	r3, [sp, #8]
 800843e:	461e      	mov	r6, r3
 8008440:	e701      	b.n	8008246 <_dtoa_r+0xa2e>
 8008442:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008444:	495d      	ldr	r1, [pc, #372]	; (80085bc <_dtoa_r+0xda4>)
 8008446:	1e5a      	subs	r2, r3, #1
 8008448:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800844c:	462b      	mov	r3, r5
 800844e:	9215      	str	r2, [sp, #84]	; 0x54
 8008450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008454:	4622      	mov	r2, r4
 8008456:	f7fb fc23 	bl	8003ca0 <__aeabi_dmul>
 800845a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800845e:	4639      	mov	r1, r7
 8008460:	4630      	mov	r0, r6
 8008462:	f7fb fecd 	bl	8004200 <__aeabi_d2iz>
 8008466:	4604      	mov	r4, r0
 8008468:	f7fb fbb4 	bl	8003bd4 <__aeabi_i2d>
 800846c:	460b      	mov	r3, r1
 800846e:	4602      	mov	r2, r0
 8008470:	4639      	mov	r1, r7
 8008472:	4630      	mov	r0, r6
 8008474:	f7fb fa60 	bl	8003938 <__aeabi_dsub>
 8008478:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800847a:	460f      	mov	r7, r1
 800847c:	9907      	ldr	r1, [sp, #28]
 800847e:	3430      	adds	r4, #48	; 0x30
 8008480:	2b01      	cmp	r3, #1
 8008482:	4606      	mov	r6, r0
 8008484:	700c      	strb	r4, [r1, #0]
 8008486:	f101 0501 	add.w	r5, r1, #1
 800848a:	d020      	beq.n	80084ce <_dtoa_r+0xcb6>
 800848c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800848e:	9a07      	ldr	r2, [sp, #28]
 8008490:	4413      	add	r3, r2
 8008492:	469a      	mov	sl, r3
 8008494:	46ab      	mov	fp, r5
 8008496:	2200      	movs	r2, #0
 8008498:	4b4a      	ldr	r3, [pc, #296]	; (80085c4 <_dtoa_r+0xdac>)
 800849a:	4630      	mov	r0, r6
 800849c:	4639      	mov	r1, r7
 800849e:	f7fb fbff 	bl	8003ca0 <__aeabi_dmul>
 80084a2:	460f      	mov	r7, r1
 80084a4:	4606      	mov	r6, r0
 80084a6:	f7fb feab 	bl	8004200 <__aeabi_d2iz>
 80084aa:	4604      	mov	r4, r0
 80084ac:	f7fb fb92 	bl	8003bd4 <__aeabi_i2d>
 80084b0:	3430      	adds	r4, #48	; 0x30
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	4630      	mov	r0, r6
 80084b8:	4639      	mov	r1, r7
 80084ba:	f7fb fa3d 	bl	8003938 <__aeabi_dsub>
 80084be:	f80b 4b01 	strb.w	r4, [fp], #1
 80084c2:	45da      	cmp	sl, fp
 80084c4:	4606      	mov	r6, r0
 80084c6:	460f      	mov	r7, r1
 80084c8:	d1e5      	bne.n	8008496 <_dtoa_r+0xc7e>
 80084ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084cc:	441d      	add	r5, r3
 80084ce:	2200      	movs	r2, #0
 80084d0:	4b3d      	ldr	r3, [pc, #244]	; (80085c8 <_dtoa_r+0xdb0>)
 80084d2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80084d6:	f7fb fa31 	bl	800393c <__adddf3>
 80084da:	4632      	mov	r2, r6
 80084dc:	463b      	mov	r3, r7
 80084de:	f7fb fe51 	bl	8004184 <__aeabi_dcmplt>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	d048      	beq.n	8008578 <_dtoa_r+0xd60>
 80084e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084e8:	9304      	str	r3, [sp, #16]
 80084ea:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 80084ee:	f7ff bb4c 	b.w	8007b8a <_dtoa_r+0x372>
 80084f2:	9b05      	ldr	r3, [sp, #20]
 80084f4:	9a06      	ldr	r2, [sp, #24]
 80084f6:	1a9d      	subs	r5, r3, r2
 80084f8:	2300      	movs	r3, #0
 80084fa:	f7ff bb7c 	b.w	8007bf6 <_dtoa_r+0x3de>
 80084fe:	2700      	movs	r7, #0
 8008500:	e6ca      	b.n	8008298 <_dtoa_r+0xa80>
 8008502:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008504:	9f02      	ldr	r7, [sp, #8]
 8008506:	9d05      	ldr	r5, [sp, #20]
 8008508:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800850c:	f7ff bb73 	b.w	8007bf6 <_dtoa_r+0x3de>
 8008510:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8008514:	f04f 0a02 	mov.w	sl, #2
 8008518:	e4da      	b.n	8007ed0 <_dtoa_r+0x6b8>
 800851a:	9b06      	ldr	r3, [sp, #24]
 800851c:	2b00      	cmp	r3, #0
 800851e:	f43f aec1 	beq.w	80082a4 <_dtoa_r+0xa8c>
 8008522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008524:	2b00      	cmp	r3, #0
 8008526:	f77f af2e 	ble.w	8008386 <_dtoa_r+0xb6e>
 800852a:	2200      	movs	r2, #0
 800852c:	4b25      	ldr	r3, [pc, #148]	; (80085c4 <_dtoa_r+0xdac>)
 800852e:	4630      	mov	r0, r6
 8008530:	4639      	mov	r1, r7
 8008532:	f7fb fbb5 	bl	8003ca0 <__aeabi_dmul>
 8008536:	4606      	mov	r6, r0
 8008538:	460f      	mov	r7, r1
 800853a:	f10a 0001 	add.w	r0, sl, #1
 800853e:	f7fb fb49 	bl	8003bd4 <__aeabi_i2d>
 8008542:	4632      	mov	r2, r6
 8008544:	463b      	mov	r3, r7
 8008546:	f7fb fbab 	bl	8003ca0 <__aeabi_dmul>
 800854a:	2200      	movs	r2, #0
 800854c:	4b19      	ldr	r3, [pc, #100]	; (80085b4 <_dtoa_r+0xd9c>)
 800854e:	f7fb f9f5 	bl	800393c <__adddf3>
 8008552:	9a04      	ldr	r2, [sp, #16]
 8008554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008556:	9310      	str	r3, [sp, #64]	; 0x40
 8008558:	3a01      	subs	r2, #1
 800855a:	4604      	mov	r4, r0
 800855c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008560:	9214      	str	r2, [sp, #80]	; 0x50
 8008562:	e4d6      	b.n	8007f12 <_dtoa_r+0x6fa>
 8008564:	9408      	str	r4, [sp, #32]
 8008566:	e584      	b.n	8008072 <_dtoa_r+0x85a>
 8008568:	2239      	movs	r2, #57	; 0x39
 800856a:	46b3      	mov	fp, r6
 800856c:	9408      	str	r4, [sp, #32]
 800856e:	4646      	mov	r6, r8
 8008570:	703a      	strb	r2, [r7, #0]
 8008572:	1c7d      	adds	r5, r7, #1
 8008574:	f7ff bbf5 	b.w	8007d62 <_dtoa_r+0x54a>
 8008578:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800857c:	2000      	movs	r0, #0
 800857e:	4912      	ldr	r1, [pc, #72]	; (80085c8 <_dtoa_r+0xdb0>)
 8008580:	f7fb f9da 	bl	8003938 <__aeabi_dsub>
 8008584:	4632      	mov	r2, r6
 8008586:	463b      	mov	r3, r7
 8008588:	f7fb fe1a 	bl	80041c0 <__aeabi_dcmpgt>
 800858c:	b908      	cbnz	r0, 8008592 <_dtoa_r+0xd7a>
 800858e:	e6fa      	b.n	8008386 <_dtoa_r+0xb6e>
 8008590:	4615      	mov	r5, r2
 8008592:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008596:	2b30      	cmp	r3, #48	; 0x30
 8008598:	f105 32ff 	add.w	r2, r5, #4294967295
 800859c:	d0f8      	beq.n	8008590 <_dtoa_r+0xd78>
 800859e:	e539      	b.n	8008014 <_dtoa_r+0x7fc>
 80085a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085a2:	9304      	str	r3, [sp, #16]
 80085a4:	f7ff baf1 	b.w	8007b8a <_dtoa_r+0x372>
 80085a8:	f1ba 0f00 	cmp.w	sl, #0
 80085ac:	f47f ad7c 	bne.w	80080a8 <_dtoa_r+0x890>
 80085b0:	e662      	b.n	8008278 <_dtoa_r+0xa60>
 80085b2:	bf00      	nop
 80085b4:	401c0000 	.word	0x401c0000
 80085b8:	40140000 	.word	0x40140000
 80085bc:	0800ad58 	.word	0x0800ad58
 80085c0:	0800ae20 	.word	0x0800ae20
 80085c4:	40240000 	.word	0x40240000
 80085c8:	3fe00000 	.word	0x3fe00000
 80085cc:	2b39      	cmp	r3, #57	; 0x39
 80085ce:	46d3      	mov	fp, sl
 80085d0:	469a      	mov	sl, r3
 80085d2:	d0c9      	beq.n	8008568 <_dtoa_r+0xd50>
 80085d4:	f1bb 0f00 	cmp.w	fp, #0
 80085d8:	f73f aebd 	bgt.w	8008356 <_dtoa_r+0xb3e>
 80085dc:	e6bd      	b.n	800835a <_dtoa_r+0xb42>
 80085de:	f47f aebc 	bne.w	800835a <_dtoa_r+0xb42>
 80085e2:	f01a 0f01 	tst.w	sl, #1
 80085e6:	f43f aeb8 	beq.w	800835a <_dtoa_r+0xb42>
 80085ea:	e6b0      	b.n	800834e <_dtoa_r+0xb36>
 80085ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	dc25      	bgt.n	800863e <_dtoa_r+0xe26>
 80085f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085f4:	e60d      	b.n	8008212 <_dtoa_r+0x9fa>
 80085f6:	f04f 0a02 	mov.w	sl, #2
 80085fa:	e469      	b.n	8007ed0 <_dtoa_r+0x6b8>
 80085fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085fe:	2b02      	cmp	r3, #2
 8008600:	dc1d      	bgt.n	800863e <_dtoa_r+0xe26>
 8008602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008604:	e56d      	b.n	80080e2 <_dtoa_r+0x8ca>
 8008606:	2400      	movs	r4, #0
 8008608:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800860c:	4621      	mov	r1, r4
 800860e:	4648      	mov	r0, r9
 8008610:	f001 f856 	bl	80096c0 <_Balloc>
 8008614:	f04f 33ff 	mov.w	r3, #4294967295
 8008618:	9306      	str	r3, [sp, #24]
 800861a:	930c      	str	r3, [sp, #48]	; 0x30
 800861c:	2301      	movs	r3, #1
 800861e:	9007      	str	r0, [sp, #28]
 8008620:	9423      	str	r4, [sp, #140]	; 0x8c
 8008622:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8008626:	9309      	str	r3, [sp, #36]	; 0x24
 8008628:	f7ff b9fc 	b.w	8007a24 <_dtoa_r+0x20c>
 800862c:	f43f ab48 	beq.w	8007cc0 <_dtoa_r+0x4a8>
 8008630:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8008634:	f7ff bb3f 	b.w	8007cb6 <_dtoa_r+0x49e>
 8008638:	2501      	movs	r5, #1
 800863a:	f7ff b9bd 	b.w	80079b8 <_dtoa_r+0x1a0>
 800863e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008640:	9306      	str	r3, [sp, #24]
 8008642:	e5ee      	b.n	8008222 <_dtoa_r+0xa0a>

08008644 <__sflush_r>:
 8008644:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8008648:	b29a      	uxth	r2, r3
 800864a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864e:	460d      	mov	r5, r1
 8008650:	0711      	lsls	r1, r2, #28
 8008652:	4680      	mov	r8, r0
 8008654:	d43c      	bmi.n	80086d0 <__sflush_r+0x8c>
 8008656:	686a      	ldr	r2, [r5, #4]
 8008658:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800865c:	2a00      	cmp	r2, #0
 800865e:	81ab      	strh	r3, [r5, #12]
 8008660:	dd73      	ble.n	800874a <__sflush_r+0x106>
 8008662:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8008664:	2c00      	cmp	r4, #0
 8008666:	d04b      	beq.n	8008700 <__sflush_r+0xbc>
 8008668:	b29b      	uxth	r3, r3
 800866a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800866e:	2100      	movs	r1, #0
 8008670:	b292      	uxth	r2, r2
 8008672:	f8d8 6000 	ldr.w	r6, [r8]
 8008676:	f8c8 1000 	str.w	r1, [r8]
 800867a:	2a00      	cmp	r2, #0
 800867c:	d069      	beq.n	8008752 <__sflush_r+0x10e>
 800867e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8008680:	075f      	lsls	r7, r3, #29
 8008682:	d505      	bpl.n	8008690 <__sflush_r+0x4c>
 8008684:	6869      	ldr	r1, [r5, #4]
 8008686:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008688:	1a52      	subs	r2, r2, r1
 800868a:	b10b      	cbz	r3, 8008690 <__sflush_r+0x4c>
 800868c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	2300      	movs	r3, #0
 8008692:	69e9      	ldr	r1, [r5, #28]
 8008694:	4640      	mov	r0, r8
 8008696:	47a0      	blx	r4
 8008698:	1c44      	adds	r4, r0, #1
 800869a:	d03c      	beq.n	8008716 <__sflush_r+0xd2>
 800869c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80086a0:	692a      	ldr	r2, [r5, #16]
 80086a2:	602a      	str	r2, [r5, #0]
 80086a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086a8:	2200      	movs	r2, #0
 80086aa:	81ab      	strh	r3, [r5, #12]
 80086ac:	04db      	lsls	r3, r3, #19
 80086ae:	606a      	str	r2, [r5, #4]
 80086b0:	d449      	bmi.n	8008746 <__sflush_r+0x102>
 80086b2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80086b4:	f8c8 6000 	str.w	r6, [r8]
 80086b8:	b311      	cbz	r1, 8008700 <__sflush_r+0xbc>
 80086ba:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80086be:	4299      	cmp	r1, r3
 80086c0:	d002      	beq.n	80086c8 <__sflush_r+0x84>
 80086c2:	4640      	mov	r0, r8
 80086c4:	f000 f94e 	bl	8008964 <_free_r>
 80086c8:	2000      	movs	r0, #0
 80086ca:	6328      	str	r0, [r5, #48]	; 0x30
 80086cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d0:	692e      	ldr	r6, [r5, #16]
 80086d2:	b1ae      	cbz	r6, 8008700 <__sflush_r+0xbc>
 80086d4:	682c      	ldr	r4, [r5, #0]
 80086d6:	602e      	str	r6, [r5, #0]
 80086d8:	0790      	lsls	r0, r2, #30
 80086da:	bf0c      	ite	eq
 80086dc:	696b      	ldreq	r3, [r5, #20]
 80086de:	2300      	movne	r3, #0
 80086e0:	1ba4      	subs	r4, r4, r6
 80086e2:	60ab      	str	r3, [r5, #8]
 80086e4:	e00a      	b.n	80086fc <__sflush_r+0xb8>
 80086e6:	4623      	mov	r3, r4
 80086e8:	4632      	mov	r2, r6
 80086ea:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80086ec:	69e9      	ldr	r1, [r5, #28]
 80086ee:	4640      	mov	r0, r8
 80086f0:	47b8      	blx	r7
 80086f2:	2800      	cmp	r0, #0
 80086f4:	eba4 0400 	sub.w	r4, r4, r0
 80086f8:	4406      	add	r6, r0
 80086fa:	dd04      	ble.n	8008706 <__sflush_r+0xc2>
 80086fc:	2c00      	cmp	r4, #0
 80086fe:	dcf2      	bgt.n	80086e6 <__sflush_r+0xa2>
 8008700:	2000      	movs	r0, #0
 8008702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008706:	89ab      	ldrh	r3, [r5, #12]
 8008708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800870c:	81ab      	strh	r3, [r5, #12]
 800870e:	f04f 30ff 	mov.w	r0, #4294967295
 8008712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008716:	f8d8 2000 	ldr.w	r2, [r8]
 800871a:	2a1d      	cmp	r2, #29
 800871c:	d8f3      	bhi.n	8008706 <__sflush_r+0xc2>
 800871e:	4b1a      	ldr	r3, [pc, #104]	; (8008788 <__sflush_r+0x144>)
 8008720:	40d3      	lsrs	r3, r2
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	f083 0401 	eor.w	r4, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0eb      	beq.n	8008706 <__sflush_r+0xc2>
 800872e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8008732:	6929      	ldr	r1, [r5, #16]
 8008734:	6029      	str	r1, [r5, #0]
 8008736:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800873a:	04d9      	lsls	r1, r3, #19
 800873c:	606c      	str	r4, [r5, #4]
 800873e:	81ab      	strh	r3, [r5, #12]
 8008740:	d5b7      	bpl.n	80086b2 <__sflush_r+0x6e>
 8008742:	2a00      	cmp	r2, #0
 8008744:	d1b5      	bne.n	80086b2 <__sflush_r+0x6e>
 8008746:	6528      	str	r0, [r5, #80]	; 0x50
 8008748:	e7b3      	b.n	80086b2 <__sflush_r+0x6e>
 800874a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800874c:	2a00      	cmp	r2, #0
 800874e:	dc88      	bgt.n	8008662 <__sflush_r+0x1e>
 8008750:	e7d6      	b.n	8008700 <__sflush_r+0xbc>
 8008752:	2301      	movs	r3, #1
 8008754:	69e9      	ldr	r1, [r5, #28]
 8008756:	4640      	mov	r0, r8
 8008758:	47a0      	blx	r4
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	4602      	mov	r2, r0
 800875e:	d002      	beq.n	8008766 <__sflush_r+0x122>
 8008760:	89ab      	ldrh	r3, [r5, #12]
 8008762:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8008764:	e78c      	b.n	8008680 <__sflush_r+0x3c>
 8008766:	f8d8 3000 	ldr.w	r3, [r8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0f8      	beq.n	8008760 <__sflush_r+0x11c>
 800876e:	2b1d      	cmp	r3, #29
 8008770:	d001      	beq.n	8008776 <__sflush_r+0x132>
 8008772:	2b16      	cmp	r3, #22
 8008774:	d102      	bne.n	800877c <__sflush_r+0x138>
 8008776:	f8c8 6000 	str.w	r6, [r8]
 800877a:	e7c1      	b.n	8008700 <__sflush_r+0xbc>
 800877c:	89ab      	ldrh	r3, [r5, #12]
 800877e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008782:	81ab      	strh	r3, [r5, #12]
 8008784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008788:	20400001 	.word	0x20400001

0800878c <_fflush_r>:
 800878c:	b510      	push	{r4, lr}
 800878e:	4604      	mov	r4, r0
 8008790:	b082      	sub	sp, #8
 8008792:	b108      	cbz	r0, 8008798 <_fflush_r+0xc>
 8008794:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008796:	b153      	cbz	r3, 80087ae <_fflush_r+0x22>
 8008798:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800879c:	b908      	cbnz	r0, 80087a2 <_fflush_r+0x16>
 800879e:	b002      	add	sp, #8
 80087a0:	bd10      	pop	{r4, pc}
 80087a2:	4620      	mov	r0, r4
 80087a4:	b002      	add	sp, #8
 80087a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087aa:	f7ff bf4b 	b.w	8008644 <__sflush_r>
 80087ae:	9101      	str	r1, [sp, #4]
 80087b0:	f000 f880 	bl	80088b4 <__sinit>
 80087b4:	9901      	ldr	r1, [sp, #4]
 80087b6:	e7ef      	b.n	8008798 <_fflush_r+0xc>

080087b8 <_cleanup_r>:
 80087b8:	4901      	ldr	r1, [pc, #4]	; (80087c0 <_cleanup_r+0x8>)
 80087ba:	f000 bb3d 	b.w	8008e38 <_fwalk_reent>
 80087be:	bf00      	nop
 80087c0:	0800a3c5 	.word	0x0800a3c5

080087c4 <__sinit.part.1>:
 80087c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c8:	4b35      	ldr	r3, [pc, #212]	; (80088a0 <__sinit.part.1+0xdc>)
 80087ca:	6845      	ldr	r5, [r0, #4]
 80087cc:	63c3      	str	r3, [r0, #60]	; 0x3c
 80087ce:	2400      	movs	r4, #0
 80087d0:	4607      	mov	r7, r0
 80087d2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 80087d6:	2304      	movs	r3, #4
 80087d8:	2103      	movs	r1, #3
 80087da:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 80087de:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 80087e2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 80087e6:	b083      	sub	sp, #12
 80087e8:	602c      	str	r4, [r5, #0]
 80087ea:	606c      	str	r4, [r5, #4]
 80087ec:	60ac      	str	r4, [r5, #8]
 80087ee:	666c      	str	r4, [r5, #100]	; 0x64
 80087f0:	81ec      	strh	r4, [r5, #14]
 80087f2:	612c      	str	r4, [r5, #16]
 80087f4:	616c      	str	r4, [r5, #20]
 80087f6:	61ac      	str	r4, [r5, #24]
 80087f8:	81ab      	strh	r3, [r5, #12]
 80087fa:	4621      	mov	r1, r4
 80087fc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8008800:	2208      	movs	r2, #8
 8008802:	f7fb fe0d 	bl	8004420 <memset>
 8008806:	68be      	ldr	r6, [r7, #8]
 8008808:	f8df b098 	ldr.w	fp, [pc, #152]	; 80088a4 <__sinit.part.1+0xe0>
 800880c:	f8df a098 	ldr.w	sl, [pc, #152]	; 80088a8 <__sinit.part.1+0xe4>
 8008810:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80088ac <__sinit.part.1+0xe8>
 8008814:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80088b0 <__sinit.part.1+0xec>
 8008818:	f8c5 b020 	str.w	fp, [r5, #32]
 800881c:	2301      	movs	r3, #1
 800881e:	2209      	movs	r2, #9
 8008820:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8008824:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8008828:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800882c:	61ed      	str	r5, [r5, #28]
 800882e:	4621      	mov	r1, r4
 8008830:	81f3      	strh	r3, [r6, #14]
 8008832:	81b2      	strh	r2, [r6, #12]
 8008834:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8008838:	6034      	str	r4, [r6, #0]
 800883a:	6074      	str	r4, [r6, #4]
 800883c:	60b4      	str	r4, [r6, #8]
 800883e:	6674      	str	r4, [r6, #100]	; 0x64
 8008840:	6134      	str	r4, [r6, #16]
 8008842:	6174      	str	r4, [r6, #20]
 8008844:	61b4      	str	r4, [r6, #24]
 8008846:	2208      	movs	r2, #8
 8008848:	9301      	str	r3, [sp, #4]
 800884a:	f7fb fde9 	bl	8004420 <memset>
 800884e:	68fd      	ldr	r5, [r7, #12]
 8008850:	61f6      	str	r6, [r6, #28]
 8008852:	2012      	movs	r0, #18
 8008854:	2202      	movs	r2, #2
 8008856:	f8c6 b020 	str.w	fp, [r6, #32]
 800885a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800885e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8008862:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8008866:	4621      	mov	r1, r4
 8008868:	81a8      	strh	r0, [r5, #12]
 800886a:	81ea      	strh	r2, [r5, #14]
 800886c:	602c      	str	r4, [r5, #0]
 800886e:	606c      	str	r4, [r5, #4]
 8008870:	60ac      	str	r4, [r5, #8]
 8008872:	666c      	str	r4, [r5, #100]	; 0x64
 8008874:	612c      	str	r4, [r5, #16]
 8008876:	616c      	str	r4, [r5, #20]
 8008878:	61ac      	str	r4, [r5, #24]
 800887a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800887e:	2208      	movs	r2, #8
 8008880:	f7fb fdce 	bl	8004420 <memset>
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	61ed      	str	r5, [r5, #28]
 8008888:	f8c5 b020 	str.w	fp, [r5, #32]
 800888c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8008890:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8008894:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8008898:	63bb      	str	r3, [r7, #56]	; 0x38
 800889a:	b003      	add	sp, #12
 800889c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a0:	080087b9 	.word	0x080087b9
 80088a4:	0800a0e5 	.word	0x0800a0e5
 80088a8:	0800a109 	.word	0x0800a109
 80088ac:	0800a145 	.word	0x0800a145
 80088b0:	0800a165 	.word	0x0800a165

080088b4 <__sinit>:
 80088b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80088b6:	b103      	cbz	r3, 80088ba <__sinit+0x6>
 80088b8:	4770      	bx	lr
 80088ba:	f7ff bf83 	b.w	80087c4 <__sinit.part.1>
 80088be:	bf00      	nop

080088c0 <__sfp_lock_acquire>:
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop

080088c4 <__sfp_lock_release>:
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop

080088c8 <_malloc_trim_r>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	4f23      	ldr	r7, [pc, #140]	; (8008958 <_malloc_trim_r+0x90>)
 80088cc:	460c      	mov	r4, r1
 80088ce:	4606      	mov	r6, r0
 80088d0:	f000 fef2 	bl	80096b8 <__malloc_lock>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	685d      	ldr	r5, [r3, #4]
 80088d8:	f025 0503 	bic.w	r5, r5, #3
 80088dc:	1b29      	subs	r1, r5, r4
 80088de:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 80088e2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80088e6:	f021 010f 	bic.w	r1, r1, #15
 80088ea:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80088ee:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80088f2:	db07      	blt.n	8008904 <_malloc_trim_r+0x3c>
 80088f4:	2100      	movs	r1, #0
 80088f6:	4630      	mov	r0, r6
 80088f8:	f001 fbe2 	bl	800a0c0 <_sbrk_r>
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	442b      	add	r3, r5
 8008900:	4298      	cmp	r0, r3
 8008902:	d004      	beq.n	800890e <_malloc_trim_r+0x46>
 8008904:	4630      	mov	r0, r6
 8008906:	f000 fed9 	bl	80096bc <__malloc_unlock>
 800890a:	2000      	movs	r0, #0
 800890c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800890e:	4261      	negs	r1, r4
 8008910:	4630      	mov	r0, r6
 8008912:	f001 fbd5 	bl	800a0c0 <_sbrk_r>
 8008916:	3001      	adds	r0, #1
 8008918:	d00d      	beq.n	8008936 <_malloc_trim_r+0x6e>
 800891a:	4b10      	ldr	r3, [pc, #64]	; (800895c <_malloc_trim_r+0x94>)
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	6819      	ldr	r1, [r3, #0]
 8008920:	1b2d      	subs	r5, r5, r4
 8008922:	f045 0501 	orr.w	r5, r5, #1
 8008926:	4630      	mov	r0, r6
 8008928:	1b09      	subs	r1, r1, r4
 800892a:	6055      	str	r5, [r2, #4]
 800892c:	6019      	str	r1, [r3, #0]
 800892e:	f000 fec5 	bl	80096bc <__malloc_unlock>
 8008932:	2001      	movs	r0, #1
 8008934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008936:	2100      	movs	r1, #0
 8008938:	4630      	mov	r0, r6
 800893a:	f001 fbc1 	bl	800a0c0 <_sbrk_r>
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	1a83      	subs	r3, r0, r2
 8008942:	2b0f      	cmp	r3, #15
 8008944:	ddde      	ble.n	8008904 <_malloc_trim_r+0x3c>
 8008946:	4c06      	ldr	r4, [pc, #24]	; (8008960 <_malloc_trim_r+0x98>)
 8008948:	4904      	ldr	r1, [pc, #16]	; (800895c <_malloc_trim_r+0x94>)
 800894a:	6824      	ldr	r4, [r4, #0]
 800894c:	f043 0301 	orr.w	r3, r3, #1
 8008950:	1b00      	subs	r0, r0, r4
 8008952:	6053      	str	r3, [r2, #4]
 8008954:	6008      	str	r0, [r1, #0]
 8008956:	e7d5      	b.n	8008904 <_malloc_trim_r+0x3c>
 8008958:	200005d8 	.word	0x200005d8
 800895c:	20000a80 	.word	0x20000a80
 8008960:	200009e4 	.word	0x200009e4

08008964 <_free_r>:
 8008964:	2900      	cmp	r1, #0
 8008966:	d045      	beq.n	80089f4 <_free_r+0x90>
 8008968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800896c:	460d      	mov	r5, r1
 800896e:	4680      	mov	r8, r0
 8008970:	f000 fea2 	bl	80096b8 <__malloc_lock>
 8008974:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8008978:	496a      	ldr	r1, [pc, #424]	; (8008b24 <_free_r+0x1c0>)
 800897a:	f027 0301 	bic.w	r3, r7, #1
 800897e:	f1a5 0408 	sub.w	r4, r5, #8
 8008982:	18e2      	adds	r2, r4, r3
 8008984:	688e      	ldr	r6, [r1, #8]
 8008986:	6850      	ldr	r0, [r2, #4]
 8008988:	42b2      	cmp	r2, r6
 800898a:	f020 0003 	bic.w	r0, r0, #3
 800898e:	d062      	beq.n	8008a56 <_free_r+0xf2>
 8008990:	07fe      	lsls	r6, r7, #31
 8008992:	6050      	str	r0, [r2, #4]
 8008994:	d40b      	bmi.n	80089ae <_free_r+0x4a>
 8008996:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800899a:	1be4      	subs	r4, r4, r7
 800899c:	f101 0e08 	add.w	lr, r1, #8
 80089a0:	68a5      	ldr	r5, [r4, #8]
 80089a2:	4575      	cmp	r5, lr
 80089a4:	443b      	add	r3, r7
 80089a6:	d06f      	beq.n	8008a88 <_free_r+0x124>
 80089a8:	68e7      	ldr	r7, [r4, #12]
 80089aa:	60ef      	str	r7, [r5, #12]
 80089ac:	60bd      	str	r5, [r7, #8]
 80089ae:	1815      	adds	r5, r2, r0
 80089b0:	686d      	ldr	r5, [r5, #4]
 80089b2:	07ed      	lsls	r5, r5, #31
 80089b4:	d542      	bpl.n	8008a3c <_free_r+0xd8>
 80089b6:	f043 0201 	orr.w	r2, r3, #1
 80089ba:	6062      	str	r2, [r4, #4]
 80089bc:	50e3      	str	r3, [r4, r3]
 80089be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089c2:	d218      	bcs.n	80089f6 <_free_r+0x92>
 80089c4:	08db      	lsrs	r3, r3, #3
 80089c6:	1c5a      	adds	r2, r3, #1
 80089c8:	684d      	ldr	r5, [r1, #4]
 80089ca:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 80089ce:	60a7      	str	r7, [r4, #8]
 80089d0:	2001      	movs	r0, #1
 80089d2:	109b      	asrs	r3, r3, #2
 80089d4:	fa00 f303 	lsl.w	r3, r0, r3
 80089d8:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 80089dc:	431d      	orrs	r5, r3
 80089de:	3808      	subs	r0, #8
 80089e0:	60e0      	str	r0, [r4, #12]
 80089e2:	604d      	str	r5, [r1, #4]
 80089e4:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 80089e8:	60fc      	str	r4, [r7, #12]
 80089ea:	4640      	mov	r0, r8
 80089ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089f0:	f000 be64 	b.w	80096bc <__malloc_unlock>
 80089f4:	4770      	bx	lr
 80089f6:	0a5a      	lsrs	r2, r3, #9
 80089f8:	2a04      	cmp	r2, #4
 80089fa:	d853      	bhi.n	8008aa4 <_free_r+0x140>
 80089fc:	099a      	lsrs	r2, r3, #6
 80089fe:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8008a02:	007f      	lsls	r7, r7, #1
 8008a04:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8008a08:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8008a0c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8008a10:	4944      	ldr	r1, [pc, #272]	; (8008b24 <_free_r+0x1c0>)
 8008a12:	3808      	subs	r0, #8
 8008a14:	4290      	cmp	r0, r2
 8008a16:	d04d      	beq.n	8008ab4 <_free_r+0x150>
 8008a18:	6851      	ldr	r1, [r2, #4]
 8008a1a:	f021 0103 	bic.w	r1, r1, #3
 8008a1e:	428b      	cmp	r3, r1
 8008a20:	d202      	bcs.n	8008a28 <_free_r+0xc4>
 8008a22:	6892      	ldr	r2, [r2, #8]
 8008a24:	4290      	cmp	r0, r2
 8008a26:	d1f7      	bne.n	8008a18 <_free_r+0xb4>
 8008a28:	68d0      	ldr	r0, [r2, #12]
 8008a2a:	60e0      	str	r0, [r4, #12]
 8008a2c:	60a2      	str	r2, [r4, #8]
 8008a2e:	6084      	str	r4, [r0, #8]
 8008a30:	60d4      	str	r4, [r2, #12]
 8008a32:	4640      	mov	r0, r8
 8008a34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a38:	f000 be40 	b.w	80096bc <__malloc_unlock>
 8008a3c:	6895      	ldr	r5, [r2, #8]
 8008a3e:	4f3a      	ldr	r7, [pc, #232]	; (8008b28 <_free_r+0x1c4>)
 8008a40:	42bd      	cmp	r5, r7
 8008a42:	4403      	add	r3, r0
 8008a44:	d03f      	beq.n	8008ac6 <_free_r+0x162>
 8008a46:	68d0      	ldr	r0, [r2, #12]
 8008a48:	60e8      	str	r0, [r5, #12]
 8008a4a:	f043 0201 	orr.w	r2, r3, #1
 8008a4e:	6085      	str	r5, [r0, #8]
 8008a50:	6062      	str	r2, [r4, #4]
 8008a52:	50e3      	str	r3, [r4, r3]
 8008a54:	e7b3      	b.n	80089be <_free_r+0x5a>
 8008a56:	07ff      	lsls	r7, r7, #31
 8008a58:	4403      	add	r3, r0
 8008a5a:	d407      	bmi.n	8008a6c <_free_r+0x108>
 8008a5c:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8008a60:	1aa4      	subs	r4, r4, r2
 8008a62:	4413      	add	r3, r2
 8008a64:	68a0      	ldr	r0, [r4, #8]
 8008a66:	68e2      	ldr	r2, [r4, #12]
 8008a68:	60c2      	str	r2, [r0, #12]
 8008a6a:	6090      	str	r0, [r2, #8]
 8008a6c:	4a2f      	ldr	r2, [pc, #188]	; (8008b2c <_free_r+0x1c8>)
 8008a6e:	6812      	ldr	r2, [r2, #0]
 8008a70:	f043 0001 	orr.w	r0, r3, #1
 8008a74:	4293      	cmp	r3, r2
 8008a76:	6060      	str	r0, [r4, #4]
 8008a78:	608c      	str	r4, [r1, #8]
 8008a7a:	d3b6      	bcc.n	80089ea <_free_r+0x86>
 8008a7c:	4b2c      	ldr	r3, [pc, #176]	; (8008b30 <_free_r+0x1cc>)
 8008a7e:	4640      	mov	r0, r8
 8008a80:	6819      	ldr	r1, [r3, #0]
 8008a82:	f7ff ff21 	bl	80088c8 <_malloc_trim_r>
 8008a86:	e7b0      	b.n	80089ea <_free_r+0x86>
 8008a88:	1811      	adds	r1, r2, r0
 8008a8a:	6849      	ldr	r1, [r1, #4]
 8008a8c:	07c9      	lsls	r1, r1, #31
 8008a8e:	d444      	bmi.n	8008b1a <_free_r+0x1b6>
 8008a90:	6891      	ldr	r1, [r2, #8]
 8008a92:	68d2      	ldr	r2, [r2, #12]
 8008a94:	60ca      	str	r2, [r1, #12]
 8008a96:	4403      	add	r3, r0
 8008a98:	f043 0001 	orr.w	r0, r3, #1
 8008a9c:	6091      	str	r1, [r2, #8]
 8008a9e:	6060      	str	r0, [r4, #4]
 8008aa0:	50e3      	str	r3, [r4, r3]
 8008aa2:	e7a2      	b.n	80089ea <_free_r+0x86>
 8008aa4:	2a14      	cmp	r2, #20
 8008aa6:	d817      	bhi.n	8008ad8 <_free_r+0x174>
 8008aa8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 8008aac:	007f      	lsls	r7, r7, #1
 8008aae:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8008ab2:	e7a9      	b.n	8008a08 <_free_r+0xa4>
 8008ab4:	10aa      	asrs	r2, r5, #2
 8008ab6:	684b      	ldr	r3, [r1, #4]
 8008ab8:	2501      	movs	r5, #1
 8008aba:	fa05 f202 	lsl.w	r2, r5, r2
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	604b      	str	r3, [r1, #4]
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	e7b1      	b.n	8008a2a <_free_r+0xc6>
 8008ac6:	f043 0201 	orr.w	r2, r3, #1
 8008aca:	614c      	str	r4, [r1, #20]
 8008acc:	610c      	str	r4, [r1, #16]
 8008ace:	60e5      	str	r5, [r4, #12]
 8008ad0:	60a5      	str	r5, [r4, #8]
 8008ad2:	6062      	str	r2, [r4, #4]
 8008ad4:	50e3      	str	r3, [r4, r3]
 8008ad6:	e788      	b.n	80089ea <_free_r+0x86>
 8008ad8:	2a54      	cmp	r2, #84	; 0x54
 8008ada:	d806      	bhi.n	8008aea <_free_r+0x186>
 8008adc:	0b1a      	lsrs	r2, r3, #12
 8008ade:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8008ae2:	007f      	lsls	r7, r7, #1
 8008ae4:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 8008ae8:	e78e      	b.n	8008a08 <_free_r+0xa4>
 8008aea:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008aee:	d806      	bhi.n	8008afe <_free_r+0x19a>
 8008af0:	0bda      	lsrs	r2, r3, #15
 8008af2:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8008af6:	007f      	lsls	r7, r7, #1
 8008af8:	f102 0577 	add.w	r5, r2, #119	; 0x77
 8008afc:	e784      	b.n	8008a08 <_free_r+0xa4>
 8008afe:	f240 5054 	movw	r0, #1364	; 0x554
 8008b02:	4282      	cmp	r2, r0
 8008b04:	d806      	bhi.n	8008b14 <_free_r+0x1b0>
 8008b06:	0c9a      	lsrs	r2, r3, #18
 8008b08:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8008b0c:	007f      	lsls	r7, r7, #1
 8008b0e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 8008b12:	e779      	b.n	8008a08 <_free_r+0xa4>
 8008b14:	27fe      	movs	r7, #254	; 0xfe
 8008b16:	257e      	movs	r5, #126	; 0x7e
 8008b18:	e776      	b.n	8008a08 <_free_r+0xa4>
 8008b1a:	f043 0201 	orr.w	r2, r3, #1
 8008b1e:	6062      	str	r2, [r4, #4]
 8008b20:	50e3      	str	r3, [r4, r3]
 8008b22:	e762      	b.n	80089ea <_free_r+0x86>
 8008b24:	200005d8 	.word	0x200005d8
 8008b28:	200005e0 	.word	0x200005e0
 8008b2c:	200009e0 	.word	0x200009e0
 8008b30:	20000a7c 	.word	0x20000a7c

08008b34 <__sfvwrite_r>:
 8008b34:	6893      	ldr	r3, [r2, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d076      	beq.n	8008c28 <__sfvwrite_r+0xf4>
 8008b3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3e:	898b      	ldrh	r3, [r1, #12]
 8008b40:	b085      	sub	sp, #20
 8008b42:	460c      	mov	r4, r1
 8008b44:	0719      	lsls	r1, r3, #28
 8008b46:	9001      	str	r0, [sp, #4]
 8008b48:	4616      	mov	r6, r2
 8008b4a:	d529      	bpl.n	8008ba0 <__sfvwrite_r+0x6c>
 8008b4c:	6922      	ldr	r2, [r4, #16]
 8008b4e:	b33a      	cbz	r2, 8008ba0 <__sfvwrite_r+0x6c>
 8008b50:	f003 0802 	and.w	r8, r3, #2
 8008b54:	fa1f f088 	uxth.w	r0, r8
 8008b58:	6835      	ldr	r5, [r6, #0]
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d02f      	beq.n	8008bbe <__sfvwrite_r+0x8a>
 8008b5e:	f04f 0900 	mov.w	r9, #0
 8008b62:	4fb4      	ldr	r7, [pc, #720]	; (8008e34 <__sfvwrite_r+0x300>)
 8008b64:	46c8      	mov	r8, r9
 8008b66:	46b2      	mov	sl, r6
 8008b68:	45b8      	cmp	r8, r7
 8008b6a:	4643      	mov	r3, r8
 8008b6c:	464a      	mov	r2, r9
 8008b6e:	bf28      	it	cs
 8008b70:	463b      	movcs	r3, r7
 8008b72:	9801      	ldr	r0, [sp, #4]
 8008b74:	f1b8 0f00 	cmp.w	r8, #0
 8008b78:	d050      	beq.n	8008c1c <__sfvwrite_r+0xe8>
 8008b7a:	69e1      	ldr	r1, [r4, #28]
 8008b7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b7e:	47b0      	blx	r6
 8008b80:	2800      	cmp	r0, #0
 8008b82:	dd71      	ble.n	8008c68 <__sfvwrite_r+0x134>
 8008b84:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008b88:	1a1b      	subs	r3, r3, r0
 8008b8a:	4481      	add	r9, r0
 8008b8c:	ebc0 0808 	rsb	r8, r0, r8
 8008b90:	f8ca 3008 	str.w	r3, [sl, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1e7      	bne.n	8008b68 <__sfvwrite_r+0x34>
 8008b98:	2000      	movs	r0, #0
 8008b9a:	b005      	add	sp, #20
 8008b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	9801      	ldr	r0, [sp, #4]
 8008ba4:	f7fe fd40 	bl	8007628 <__swsetup_r>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	f040 813a 	bne.w	8008e22 <__sfvwrite_r+0x2ee>
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	6835      	ldr	r5, [r6, #0]
 8008bb2:	f003 0802 	and.w	r8, r3, #2
 8008bb6:	fa1f f088 	uxth.w	r0, r8
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	d1cf      	bne.n	8008b5e <__sfvwrite_r+0x2a>
 8008bbe:	f013 0901 	ands.w	r9, r3, #1
 8008bc2:	d15b      	bne.n	8008c7c <__sfvwrite_r+0x148>
 8008bc4:	464f      	mov	r7, r9
 8008bc6:	9602      	str	r6, [sp, #8]
 8008bc8:	b31f      	cbz	r7, 8008c12 <__sfvwrite_r+0xde>
 8008bca:	059a      	lsls	r2, r3, #22
 8008bcc:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8008bd0:	d52c      	bpl.n	8008c2c <__sfvwrite_r+0xf8>
 8008bd2:	4547      	cmp	r7, r8
 8008bd4:	46c2      	mov	sl, r8
 8008bd6:	f0c0 80a4 	bcc.w	8008d22 <__sfvwrite_r+0x1ee>
 8008bda:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8008bde:	f040 80b1 	bne.w	8008d44 <__sfvwrite_r+0x210>
 8008be2:	6820      	ldr	r0, [r4, #0]
 8008be4:	4652      	mov	r2, sl
 8008be6:	4649      	mov	r1, r9
 8008be8:	f000 fd02 	bl	80095f0 <memmove>
 8008bec:	68a0      	ldr	r0, [r4, #8]
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	ebc8 0000 	rsb	r0, r8, r0
 8008bf4:	4453      	add	r3, sl
 8008bf6:	60a0      	str	r0, [r4, #8]
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	9a02      	ldr	r2, [sp, #8]
 8008bfe:	6893      	ldr	r3, [r2, #8]
 8008c00:	1a1b      	subs	r3, r3, r0
 8008c02:	4481      	add	r9, r0
 8008c04:	1a3f      	subs	r7, r7, r0
 8008c06:	6093      	str	r3, [r2, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d0c5      	beq.n	8008b98 <__sfvwrite_r+0x64>
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	2f00      	cmp	r7, #0
 8008c10:	d1db      	bne.n	8008bca <__sfvwrite_r+0x96>
 8008c12:	f8d5 9000 	ldr.w	r9, [r5]
 8008c16:	686f      	ldr	r7, [r5, #4]
 8008c18:	3508      	adds	r5, #8
 8008c1a:	e7d5      	b.n	8008bc8 <__sfvwrite_r+0x94>
 8008c1c:	f8d5 9000 	ldr.w	r9, [r5]
 8008c20:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8008c24:	3508      	adds	r5, #8
 8008c26:	e79f      	b.n	8008b68 <__sfvwrite_r+0x34>
 8008c28:	2000      	movs	r0, #0
 8008c2a:	4770      	bx	lr
 8008c2c:	6820      	ldr	r0, [r4, #0]
 8008c2e:	6923      	ldr	r3, [r4, #16]
 8008c30:	4298      	cmp	r0, r3
 8008c32:	d803      	bhi.n	8008c3c <__sfvwrite_r+0x108>
 8008c34:	6961      	ldr	r1, [r4, #20]
 8008c36:	428f      	cmp	r7, r1
 8008c38:	f080 80b7 	bcs.w	8008daa <__sfvwrite_r+0x276>
 8008c3c:	45b8      	cmp	r8, r7
 8008c3e:	bf28      	it	cs
 8008c40:	46b8      	movcs	r8, r7
 8008c42:	4642      	mov	r2, r8
 8008c44:	4649      	mov	r1, r9
 8008c46:	f000 fcd3 	bl	80095f0 <memmove>
 8008c4a:	68a3      	ldr	r3, [r4, #8]
 8008c4c:	6822      	ldr	r2, [r4, #0]
 8008c4e:	ebc8 0303 	rsb	r3, r8, r3
 8008c52:	4442      	add	r2, r8
 8008c54:	60a3      	str	r3, [r4, #8]
 8008c56:	6022      	str	r2, [r4, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d149      	bne.n	8008cf0 <__sfvwrite_r+0x1bc>
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	9801      	ldr	r0, [sp, #4]
 8008c60:	f7ff fd94 	bl	800878c <_fflush_r>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d043      	beq.n	8008cf0 <__sfvwrite_r+0x1bc>
 8008c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c70:	f04f 30ff 	mov.w	r0, #4294967295
 8008c74:	81a3      	strh	r3, [r4, #12]
 8008c76:	b005      	add	sp, #20
 8008c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	9002      	str	r0, [sp, #8]
 8008c80:	4682      	mov	sl, r0
 8008c82:	4681      	mov	r9, r0
 8008c84:	f1b9 0f00 	cmp.w	r9, #0
 8008c88:	d02a      	beq.n	8008ce0 <__sfvwrite_r+0x1ac>
 8008c8a:	9b02      	ldr	r3, [sp, #8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d04c      	beq.n	8008d2a <__sfvwrite_r+0x1f6>
 8008c90:	6820      	ldr	r0, [r4, #0]
 8008c92:	6923      	ldr	r3, [r4, #16]
 8008c94:	6962      	ldr	r2, [r4, #20]
 8008c96:	45c8      	cmp	r8, r9
 8008c98:	46c3      	mov	fp, r8
 8008c9a:	bf28      	it	cs
 8008c9c:	46cb      	movcs	fp, r9
 8008c9e:	4298      	cmp	r0, r3
 8008ca0:	465f      	mov	r7, fp
 8008ca2:	d904      	bls.n	8008cae <__sfvwrite_r+0x17a>
 8008ca4:	68a3      	ldr	r3, [r4, #8]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	459b      	cmp	fp, r3
 8008caa:	f300 8090 	bgt.w	8008dce <__sfvwrite_r+0x29a>
 8008cae:	4593      	cmp	fp, r2
 8008cb0:	db20      	blt.n	8008cf4 <__sfvwrite_r+0x1c0>
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008cb6:	69e1      	ldr	r1, [r4, #28]
 8008cb8:	9801      	ldr	r0, [sp, #4]
 8008cba:	4652      	mov	r2, sl
 8008cbc:	47b8      	blx	r7
 8008cbe:	1e07      	subs	r7, r0, #0
 8008cc0:	ddd2      	ble.n	8008c68 <__sfvwrite_r+0x134>
 8008cc2:	ebb8 0807 	subs.w	r8, r8, r7
 8008cc6:	d023      	beq.n	8008d10 <__sfvwrite_r+0x1dc>
 8008cc8:	68b3      	ldr	r3, [r6, #8]
 8008cca:	1bdb      	subs	r3, r3, r7
 8008ccc:	44ba      	add	sl, r7
 8008cce:	ebc7 0909 	rsb	r9, r7, r9
 8008cd2:	60b3      	str	r3, [r6, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f43f af5f 	beq.w	8008b98 <__sfvwrite_r+0x64>
 8008cda:	f1b9 0f00 	cmp.w	r9, #0
 8008cde:	d1d4      	bne.n	8008c8a <__sfvwrite_r+0x156>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f8d5 a000 	ldr.w	sl, [r5]
 8008ce6:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8008cea:	9302      	str	r3, [sp, #8]
 8008cec:	3508      	adds	r5, #8
 8008cee:	e7c9      	b.n	8008c84 <__sfvwrite_r+0x150>
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	e783      	b.n	8008bfc <__sfvwrite_r+0xc8>
 8008cf4:	465a      	mov	r2, fp
 8008cf6:	4651      	mov	r1, sl
 8008cf8:	f000 fc7a 	bl	80095f0 <memmove>
 8008cfc:	68a2      	ldr	r2, [r4, #8]
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	ebcb 0202 	rsb	r2, fp, r2
 8008d04:	445b      	add	r3, fp
 8008d06:	ebb8 0807 	subs.w	r8, r8, r7
 8008d0a:	60a2      	str	r2, [r4, #8]
 8008d0c:	6023      	str	r3, [r4, #0]
 8008d0e:	d1db      	bne.n	8008cc8 <__sfvwrite_r+0x194>
 8008d10:	4621      	mov	r1, r4
 8008d12:	9801      	ldr	r0, [sp, #4]
 8008d14:	f7ff fd3a 	bl	800878c <_fflush_r>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d1a5      	bne.n	8008c68 <__sfvwrite_r+0x134>
 8008d1c:	f8cd 8008 	str.w	r8, [sp, #8]
 8008d20:	e7d2      	b.n	8008cc8 <__sfvwrite_r+0x194>
 8008d22:	6820      	ldr	r0, [r4, #0]
 8008d24:	46b8      	mov	r8, r7
 8008d26:	46ba      	mov	sl, r7
 8008d28:	e75c      	b.n	8008be4 <__sfvwrite_r+0xb0>
 8008d2a:	464a      	mov	r2, r9
 8008d2c:	210a      	movs	r1, #10
 8008d2e:	4650      	mov	r0, sl
 8008d30:	f000 fc0e 	bl	8009550 <memchr>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	d06f      	beq.n	8008e18 <__sfvwrite_r+0x2e4>
 8008d38:	3001      	adds	r0, #1
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	ebca 0800 	rsb	r8, sl, r0
 8008d40:	9302      	str	r3, [sp, #8]
 8008d42:	e7a5      	b.n	8008c90 <__sfvwrite_r+0x15c>
 8008d44:	6962      	ldr	r2, [r4, #20]
 8008d46:	6820      	ldr	r0, [r4, #0]
 8008d48:	6921      	ldr	r1, [r4, #16]
 8008d4a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 8008d4e:	ebc1 0a00 	rsb	sl, r1, r0
 8008d52:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8008d56:	f10a 0001 	add.w	r0, sl, #1
 8008d5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008d5e:	4438      	add	r0, r7
 8008d60:	4540      	cmp	r0, r8
 8008d62:	4642      	mov	r2, r8
 8008d64:	bf84      	itt	hi
 8008d66:	4680      	movhi	r8, r0
 8008d68:	4642      	movhi	r2, r8
 8008d6a:	055b      	lsls	r3, r3, #21
 8008d6c:	d542      	bpl.n	8008df4 <__sfvwrite_r+0x2c0>
 8008d6e:	4611      	mov	r1, r2
 8008d70:	9801      	ldr	r0, [sp, #4]
 8008d72:	f000 f91b 	bl	8008fac <_malloc_r>
 8008d76:	4683      	mov	fp, r0
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d055      	beq.n	8008e28 <__sfvwrite_r+0x2f4>
 8008d7c:	4652      	mov	r2, sl
 8008d7e:	6921      	ldr	r1, [r4, #16]
 8008d80:	f7fb fab4 	bl	80042ec <memcpy>
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d8e:	81a3      	strh	r3, [r4, #12]
 8008d90:	ebca 0308 	rsb	r3, sl, r8
 8008d94:	eb0b 000a 	add.w	r0, fp, sl
 8008d98:	f8c4 8014 	str.w	r8, [r4, #20]
 8008d9c:	f8c4 b010 	str.w	fp, [r4, #16]
 8008da0:	6020      	str	r0, [r4, #0]
 8008da2:	60a3      	str	r3, [r4, #8]
 8008da4:	46b8      	mov	r8, r7
 8008da6:	46ba      	mov	sl, r7
 8008da8:	e71c      	b.n	8008be4 <__sfvwrite_r+0xb0>
 8008daa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008dae:	42bb      	cmp	r3, r7
 8008db0:	bf28      	it	cs
 8008db2:	463b      	movcs	r3, r7
 8008db4:	464a      	mov	r2, r9
 8008db6:	fb93 f3f1 	sdiv	r3, r3, r1
 8008dba:	9801      	ldr	r0, [sp, #4]
 8008dbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008dbe:	fb01 f303 	mul.w	r3, r1, r3
 8008dc2:	69e1      	ldr	r1, [r4, #28]
 8008dc4:	47b0      	blx	r6
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	f73f af18 	bgt.w	8008bfc <__sfvwrite_r+0xc8>
 8008dcc:	e74c      	b.n	8008c68 <__sfvwrite_r+0x134>
 8008dce:	461a      	mov	r2, r3
 8008dd0:	4651      	mov	r1, sl
 8008dd2:	9303      	str	r3, [sp, #12]
 8008dd4:	f000 fc0c 	bl	80095f0 <memmove>
 8008dd8:	6822      	ldr	r2, [r4, #0]
 8008dda:	9b03      	ldr	r3, [sp, #12]
 8008ddc:	9801      	ldr	r0, [sp, #4]
 8008dde:	441a      	add	r2, r3
 8008de0:	6022      	str	r2, [r4, #0]
 8008de2:	4621      	mov	r1, r4
 8008de4:	f7ff fcd2 	bl	800878c <_fflush_r>
 8008de8:	9b03      	ldr	r3, [sp, #12]
 8008dea:	2800      	cmp	r0, #0
 8008dec:	f47f af3c 	bne.w	8008c68 <__sfvwrite_r+0x134>
 8008df0:	461f      	mov	r7, r3
 8008df2:	e766      	b.n	8008cc2 <__sfvwrite_r+0x18e>
 8008df4:	9801      	ldr	r0, [sp, #4]
 8008df6:	f000 ff73 	bl	8009ce0 <_realloc_r>
 8008dfa:	4683      	mov	fp, r0
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d1c7      	bne.n	8008d90 <__sfvwrite_r+0x25c>
 8008e00:	9d01      	ldr	r5, [sp, #4]
 8008e02:	6921      	ldr	r1, [r4, #16]
 8008e04:	4628      	mov	r0, r5
 8008e06:	f7ff fdad 	bl	8008964 <_free_r>
 8008e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e0e:	220c      	movs	r2, #12
 8008e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e14:	602a      	str	r2, [r5, #0]
 8008e16:	e729      	b.n	8008c6c <__sfvwrite_r+0x138>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	f109 0801 	add.w	r8, r9, #1
 8008e1e:	9302      	str	r3, [sp, #8]
 8008e20:	e736      	b.n	8008c90 <__sfvwrite_r+0x15c>
 8008e22:	f04f 30ff 	mov.w	r0, #4294967295
 8008e26:	e6b8      	b.n	8008b9a <__sfvwrite_r+0x66>
 8008e28:	9a01      	ldr	r2, [sp, #4]
 8008e2a:	230c      	movs	r3, #12
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e32:	e71b      	b.n	8008c6c <__sfvwrite_r+0x138>
 8008e34:	7ffffc00 	.word	0x7ffffc00

08008e38 <_fwalk_reent>:
 8008e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e3c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8008e40:	d01f      	beq.n	8008e82 <_fwalk_reent+0x4a>
 8008e42:	4688      	mov	r8, r1
 8008e44:	4606      	mov	r6, r0
 8008e46:	f04f 0900 	mov.w	r9, #0
 8008e4a:	687d      	ldr	r5, [r7, #4]
 8008e4c:	68bc      	ldr	r4, [r7, #8]
 8008e4e:	3d01      	subs	r5, #1
 8008e50:	d411      	bmi.n	8008e76 <_fwalk_reent+0x3e>
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	f105 35ff 	add.w	r5, r5, #4294967295
 8008e5a:	d908      	bls.n	8008e6e <_fwalk_reent+0x36>
 8008e5c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8008e60:	3301      	adds	r3, #1
 8008e62:	4621      	mov	r1, r4
 8008e64:	4630      	mov	r0, r6
 8008e66:	d002      	beq.n	8008e6e <_fwalk_reent+0x36>
 8008e68:	47c0      	blx	r8
 8008e6a:	ea49 0900 	orr.w	r9, r9, r0
 8008e6e:	1c6b      	adds	r3, r5, #1
 8008e70:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8008e74:	d1ed      	bne.n	8008e52 <_fwalk_reent+0x1a>
 8008e76:	683f      	ldr	r7, [r7, #0]
 8008e78:	2f00      	cmp	r7, #0
 8008e7a:	d1e6      	bne.n	8008e4a <_fwalk_reent+0x12>
 8008e7c:	4648      	mov	r0, r9
 8008e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e82:	46b9      	mov	r9, r7
 8008e84:	4648      	mov	r0, r9
 8008e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e8a:	bf00      	nop

08008e8c <__locale_mb_cur_max>:
 8008e8c:	4b04      	ldr	r3, [pc, #16]	; (8008ea0 <__locale_mb_cur_max+0x14>)
 8008e8e:	4a05      	ldr	r2, [pc, #20]	; (8008ea4 <__locale_mb_cur_max+0x18>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	bf08      	it	eq
 8008e98:	4613      	moveq	r3, r2
 8008e9a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8008e9e:	4770      	bx	lr
 8008ea0:	20000468 	.word	0x20000468
 8008ea4:	2000046c 	.word	0x2000046c

08008ea8 <_localeconv_r>:
 8008ea8:	4a04      	ldr	r2, [pc, #16]	; (8008ebc <_localeconv_r+0x14>)
 8008eaa:	4b05      	ldr	r3, [pc, #20]	; (8008ec0 <_localeconv_r+0x18>)
 8008eac:	6812      	ldr	r2, [r2, #0]
 8008eae:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	bf08      	it	eq
 8008eb4:	4618      	moveq	r0, r3
 8008eb6:	30f0      	adds	r0, #240	; 0xf0
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	20000468 	.word	0x20000468
 8008ec0:	2000046c 	.word	0x2000046c

08008ec4 <__swhatbuf_r>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	460d      	mov	r5, r1
 8008ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ecc:	2900      	cmp	r1, #0
 8008ece:	b090      	sub	sp, #64	; 0x40
 8008ed0:	4614      	mov	r4, r2
 8008ed2:	461e      	mov	r6, r3
 8008ed4:	db14      	blt.n	8008f00 <__swhatbuf_r+0x3c>
 8008ed6:	aa01      	add	r2, sp, #4
 8008ed8:	f001 fb16 	bl	800a508 <_fstat_r>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	db0f      	blt.n	8008f00 <__swhatbuf_r+0x3c>
 8008ee0:	9a02      	ldr	r2, [sp, #8]
 8008ee2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ee6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8008eea:	fab2 f282 	clz	r2, r2
 8008eee:	0952      	lsrs	r2, r2, #5
 8008ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ef4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008ef8:	6032      	str	r2, [r6, #0]
 8008efa:	6023      	str	r3, [r4, #0]
 8008efc:	b010      	add	sp, #64	; 0x40
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	89a8      	ldrh	r0, [r5, #12]
 8008f02:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8008f06:	b282      	uxth	r2, r0
 8008f08:	2000      	movs	r0, #0
 8008f0a:	6030      	str	r0, [r6, #0]
 8008f0c:	b11a      	cbz	r2, 8008f16 <__swhatbuf_r+0x52>
 8008f0e:	2340      	movs	r3, #64	; 0x40
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	b010      	add	sp, #64	; 0x40
 8008f14:	bd70      	pop	{r4, r5, r6, pc}
 8008f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	b010      	add	sp, #64	; 0x40
 8008f20:	bd70      	pop	{r4, r5, r6, pc}
 8008f22:	bf00      	nop

08008f24 <__smakebuf_r>:
 8008f24:	898a      	ldrh	r2, [r1, #12]
 8008f26:	0792      	lsls	r2, r2, #30
 8008f28:	460b      	mov	r3, r1
 8008f2a:	d506      	bpl.n	8008f3a <__smakebuf_r+0x16>
 8008f2c:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f30:	2101      	movs	r1, #1
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	611a      	str	r2, [r3, #16]
 8008f36:	6159      	str	r1, [r3, #20]
 8008f38:	4770      	bx	lr
 8008f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	ab01      	add	r3, sp, #4
 8008f40:	466a      	mov	r2, sp
 8008f42:	460c      	mov	r4, r1
 8008f44:	4605      	mov	r5, r0
 8008f46:	f7ff ffbd 	bl	8008ec4 <__swhatbuf_r>
 8008f4a:	9900      	ldr	r1, [sp, #0]
 8008f4c:	4606      	mov	r6, r0
 8008f4e:	4628      	mov	r0, r5
 8008f50:	f000 f82c 	bl	8008fac <_malloc_r>
 8008f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f58:	b1d0      	cbz	r0, 8008f90 <__smakebuf_r+0x6c>
 8008f5a:	9a01      	ldr	r2, [sp, #4]
 8008f5c:	4f12      	ldr	r7, [pc, #72]	; (8008fa8 <__smakebuf_r+0x84>)
 8008f5e:	9900      	ldr	r1, [sp, #0]
 8008f60:	63ef      	str	r7, [r5, #60]	; 0x3c
 8008f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f66:	81a3      	strh	r3, [r4, #12]
 8008f68:	6020      	str	r0, [r4, #0]
 8008f6a:	6120      	str	r0, [r4, #16]
 8008f6c:	6161      	str	r1, [r4, #20]
 8008f6e:	b91a      	cbnz	r2, 8008f78 <__smakebuf_r+0x54>
 8008f70:	4333      	orrs	r3, r6
 8008f72:	81a3      	strh	r3, [r4, #12]
 8008f74:	b003      	add	sp, #12
 8008f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f78:	4628      	mov	r0, r5
 8008f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f7e:	f001 fad7 	bl	800a530 <_isatty_r>
 8008f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d0f2      	beq.n	8008f70 <__smakebuf_r+0x4c>
 8008f8a:	f043 0301 	orr.w	r3, r3, #1
 8008f8e:	e7ef      	b.n	8008f70 <__smakebuf_r+0x4c>
 8008f90:	059a      	lsls	r2, r3, #22
 8008f92:	d4ef      	bmi.n	8008f74 <__smakebuf_r+0x50>
 8008f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f98:	f043 0302 	orr.w	r3, r3, #2
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	81a3      	strh	r3, [r4, #12]
 8008fa0:	6022      	str	r2, [r4, #0]
 8008fa2:	6122      	str	r2, [r4, #16]
 8008fa4:	6161      	str	r1, [r4, #20]
 8008fa6:	e7e5      	b.n	8008f74 <__smakebuf_r+0x50>
 8008fa8:	080087b9 	.word	0x080087b9

08008fac <_malloc_r>:
 8008fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb0:	f101 050b 	add.w	r5, r1, #11
 8008fb4:	2d16      	cmp	r5, #22
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	4606      	mov	r6, r0
 8008fba:	f240 809f 	bls.w	80090fc <_malloc_r+0x150>
 8008fbe:	f035 0507 	bics.w	r5, r5, #7
 8008fc2:	f100 80bf 	bmi.w	8009144 <_malloc_r+0x198>
 8008fc6:	42a9      	cmp	r1, r5
 8008fc8:	f200 80bc 	bhi.w	8009144 <_malloc_r+0x198>
 8008fcc:	f000 fb74 	bl	80096b8 <__malloc_lock>
 8008fd0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8008fd4:	f0c0 829c 	bcc.w	8009510 <_malloc_r+0x564>
 8008fd8:	0a6b      	lsrs	r3, r5, #9
 8008fda:	f000 80ba 	beq.w	8009152 <_malloc_r+0x1a6>
 8008fde:	2b04      	cmp	r3, #4
 8008fe0:	f200 8183 	bhi.w	80092ea <_malloc_r+0x33e>
 8008fe4:	09a8      	lsrs	r0, r5, #6
 8008fe6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 8008fea:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8008fee:	3038      	adds	r0, #56	; 0x38
 8008ff0:	4fc4      	ldr	r7, [pc, #784]	; (8009304 <_malloc_r+0x358>)
 8008ff2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008ff6:	f1a3 0108 	sub.w	r1, r3, #8
 8008ffa:	685c      	ldr	r4, [r3, #4]
 8008ffc:	42a1      	cmp	r1, r4
 8008ffe:	d107      	bne.n	8009010 <_malloc_r+0x64>
 8009000:	e0ac      	b.n	800915c <_malloc_r+0x1b0>
 8009002:	2a00      	cmp	r2, #0
 8009004:	f280 80ac 	bge.w	8009160 <_malloc_r+0x1b4>
 8009008:	68e4      	ldr	r4, [r4, #12]
 800900a:	42a1      	cmp	r1, r4
 800900c:	f000 80a6 	beq.w	800915c <_malloc_r+0x1b0>
 8009010:	6863      	ldr	r3, [r4, #4]
 8009012:	f023 0303 	bic.w	r3, r3, #3
 8009016:	1b5a      	subs	r2, r3, r5
 8009018:	2a0f      	cmp	r2, #15
 800901a:	ddf2      	ble.n	8009002 <_malloc_r+0x56>
 800901c:	49b9      	ldr	r1, [pc, #740]	; (8009304 <_malloc_r+0x358>)
 800901e:	693c      	ldr	r4, [r7, #16]
 8009020:	f101 0e08 	add.w	lr, r1, #8
 8009024:	4574      	cmp	r4, lr
 8009026:	f000 81b3 	beq.w	8009390 <_malloc_r+0x3e4>
 800902a:	6863      	ldr	r3, [r4, #4]
 800902c:	f023 0303 	bic.w	r3, r3, #3
 8009030:	1b5a      	subs	r2, r3, r5
 8009032:	2a0f      	cmp	r2, #15
 8009034:	f300 8199 	bgt.w	800936a <_malloc_r+0x3be>
 8009038:	2a00      	cmp	r2, #0
 800903a:	f8c1 e014 	str.w	lr, [r1, #20]
 800903e:	f8c1 e010 	str.w	lr, [r1, #16]
 8009042:	f280 809e 	bge.w	8009182 <_malloc_r+0x1d6>
 8009046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800904a:	f080 8167 	bcs.w	800931c <_malloc_r+0x370>
 800904e:	08db      	lsrs	r3, r3, #3
 8009050:	f103 0c01 	add.w	ip, r3, #1
 8009054:	2201      	movs	r2, #1
 8009056:	109b      	asrs	r3, r3, #2
 8009058:	fa02 f303 	lsl.w	r3, r2, r3
 800905c:	684a      	ldr	r2, [r1, #4]
 800905e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 8009062:	f8c4 8008 	str.w	r8, [r4, #8]
 8009066:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 800906a:	431a      	orrs	r2, r3
 800906c:	f1a9 0308 	sub.w	r3, r9, #8
 8009070:	60e3      	str	r3, [r4, #12]
 8009072:	604a      	str	r2, [r1, #4]
 8009074:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8009078:	f8c8 400c 	str.w	r4, [r8, #12]
 800907c:	1083      	asrs	r3, r0, #2
 800907e:	2401      	movs	r4, #1
 8009080:	409c      	lsls	r4, r3
 8009082:	4294      	cmp	r4, r2
 8009084:	f200 808a 	bhi.w	800919c <_malloc_r+0x1f0>
 8009088:	4214      	tst	r4, r2
 800908a:	d106      	bne.n	800909a <_malloc_r+0xee>
 800908c:	f020 0003 	bic.w	r0, r0, #3
 8009090:	0064      	lsls	r4, r4, #1
 8009092:	4214      	tst	r4, r2
 8009094:	f100 0004 	add.w	r0, r0, #4
 8009098:	d0fa      	beq.n	8009090 <_malloc_r+0xe4>
 800909a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800909e:	46cc      	mov	ip, r9
 80090a0:	4680      	mov	r8, r0
 80090a2:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80090a6:	458c      	cmp	ip, r1
 80090a8:	d107      	bne.n	80090ba <_malloc_r+0x10e>
 80090aa:	e173      	b.n	8009394 <_malloc_r+0x3e8>
 80090ac:	2a00      	cmp	r2, #0
 80090ae:	f280 8181 	bge.w	80093b4 <_malloc_r+0x408>
 80090b2:	68c9      	ldr	r1, [r1, #12]
 80090b4:	458c      	cmp	ip, r1
 80090b6:	f000 816d 	beq.w	8009394 <_malloc_r+0x3e8>
 80090ba:	684b      	ldr	r3, [r1, #4]
 80090bc:	f023 0303 	bic.w	r3, r3, #3
 80090c0:	1b5a      	subs	r2, r3, r5
 80090c2:	2a0f      	cmp	r2, #15
 80090c4:	ddf2      	ble.n	80090ac <_malloc_r+0x100>
 80090c6:	460c      	mov	r4, r1
 80090c8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80090cc:	f854 8f08 	ldr.w	r8, [r4, #8]!
 80090d0:	194b      	adds	r3, r1, r5
 80090d2:	f045 0501 	orr.w	r5, r5, #1
 80090d6:	604d      	str	r5, [r1, #4]
 80090d8:	f042 0101 	orr.w	r1, r2, #1
 80090dc:	f8c8 c00c 	str.w	ip, [r8, #12]
 80090e0:	4630      	mov	r0, r6
 80090e2:	f8cc 8008 	str.w	r8, [ip, #8]
 80090e6:	617b      	str	r3, [r7, #20]
 80090e8:	613b      	str	r3, [r7, #16]
 80090ea:	f8c3 e00c 	str.w	lr, [r3, #12]
 80090ee:	f8c3 e008 	str.w	lr, [r3, #8]
 80090f2:	6059      	str	r1, [r3, #4]
 80090f4:	509a      	str	r2, [r3, r2]
 80090f6:	f000 fae1 	bl	80096bc <__malloc_unlock>
 80090fa:	e01f      	b.n	800913c <_malloc_r+0x190>
 80090fc:	2910      	cmp	r1, #16
 80090fe:	d821      	bhi.n	8009144 <_malloc_r+0x198>
 8009100:	f000 fada 	bl	80096b8 <__malloc_lock>
 8009104:	2510      	movs	r5, #16
 8009106:	2306      	movs	r3, #6
 8009108:	2002      	movs	r0, #2
 800910a:	4f7e      	ldr	r7, [pc, #504]	; (8009304 <_malloc_r+0x358>)
 800910c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009110:	f1a3 0208 	sub.w	r2, r3, #8
 8009114:	685c      	ldr	r4, [r3, #4]
 8009116:	4294      	cmp	r4, r2
 8009118:	f000 8145 	beq.w	80093a6 <_malloc_r+0x3fa>
 800911c:	6863      	ldr	r3, [r4, #4]
 800911e:	68e1      	ldr	r1, [r4, #12]
 8009120:	68a5      	ldr	r5, [r4, #8]
 8009122:	f023 0303 	bic.w	r3, r3, #3
 8009126:	4423      	add	r3, r4
 8009128:	4630      	mov	r0, r6
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	60e9      	str	r1, [r5, #12]
 800912e:	f042 0201 	orr.w	r2, r2, #1
 8009132:	608d      	str	r5, [r1, #8]
 8009134:	605a      	str	r2, [r3, #4]
 8009136:	f000 fac1 	bl	80096bc <__malloc_unlock>
 800913a:	3408      	adds	r4, #8
 800913c:	4620      	mov	r0, r4
 800913e:	b003      	add	sp, #12
 8009140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009144:	2400      	movs	r4, #0
 8009146:	230c      	movs	r3, #12
 8009148:	4620      	mov	r0, r4
 800914a:	6033      	str	r3, [r6, #0]
 800914c:	b003      	add	sp, #12
 800914e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009152:	2380      	movs	r3, #128	; 0x80
 8009154:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8009158:	203f      	movs	r0, #63	; 0x3f
 800915a:	e749      	b.n	8008ff0 <_malloc_r+0x44>
 800915c:	4670      	mov	r0, lr
 800915e:	e75d      	b.n	800901c <_malloc_r+0x70>
 8009160:	4423      	add	r3, r4
 8009162:	68e1      	ldr	r1, [r4, #12]
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	68a5      	ldr	r5, [r4, #8]
 8009168:	f042 0201 	orr.w	r2, r2, #1
 800916c:	60e9      	str	r1, [r5, #12]
 800916e:	4630      	mov	r0, r6
 8009170:	608d      	str	r5, [r1, #8]
 8009172:	605a      	str	r2, [r3, #4]
 8009174:	f000 faa2 	bl	80096bc <__malloc_unlock>
 8009178:	3408      	adds	r4, #8
 800917a:	4620      	mov	r0, r4
 800917c:	b003      	add	sp, #12
 800917e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009182:	4423      	add	r3, r4
 8009184:	4630      	mov	r0, r6
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	f042 0201 	orr.w	r2, r2, #1
 800918c:	605a      	str	r2, [r3, #4]
 800918e:	f000 fa95 	bl	80096bc <__malloc_unlock>
 8009192:	3408      	adds	r4, #8
 8009194:	4620      	mov	r0, r4
 8009196:	b003      	add	sp, #12
 8009198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919c:	68bc      	ldr	r4, [r7, #8]
 800919e:	6863      	ldr	r3, [r4, #4]
 80091a0:	f023 0803 	bic.w	r8, r3, #3
 80091a4:	45a8      	cmp	r8, r5
 80091a6:	d304      	bcc.n	80091b2 <_malloc_r+0x206>
 80091a8:	ebc5 0308 	rsb	r3, r5, r8
 80091ac:	2b0f      	cmp	r3, #15
 80091ae:	f300 808c 	bgt.w	80092ca <_malloc_r+0x31e>
 80091b2:	4b55      	ldr	r3, [pc, #340]	; (8009308 <_malloc_r+0x35c>)
 80091b4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8009318 <_malloc_r+0x36c>
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	f8d9 3000 	ldr.w	r3, [r9]
 80091be:	3301      	adds	r3, #1
 80091c0:	442a      	add	r2, r5
 80091c2:	eb04 0a08 	add.w	sl, r4, r8
 80091c6:	f000 8160 	beq.w	800948a <_malloc_r+0x4de>
 80091ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80091ce:	320f      	adds	r2, #15
 80091d0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80091d4:	f022 020f 	bic.w	r2, r2, #15
 80091d8:	4611      	mov	r1, r2
 80091da:	4630      	mov	r0, r6
 80091dc:	9201      	str	r2, [sp, #4]
 80091de:	f000 ff6f 	bl	800a0c0 <_sbrk_r>
 80091e2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80091e6:	4683      	mov	fp, r0
 80091e8:	9a01      	ldr	r2, [sp, #4]
 80091ea:	f000 8158 	beq.w	800949e <_malloc_r+0x4f2>
 80091ee:	4582      	cmp	sl, r0
 80091f0:	f200 80fc 	bhi.w	80093ec <_malloc_r+0x440>
 80091f4:	4b45      	ldr	r3, [pc, #276]	; (800930c <_malloc_r+0x360>)
 80091f6:	6819      	ldr	r1, [r3, #0]
 80091f8:	45da      	cmp	sl, fp
 80091fa:	4411      	add	r1, r2
 80091fc:	6019      	str	r1, [r3, #0]
 80091fe:	f000 8153 	beq.w	80094a8 <_malloc_r+0x4fc>
 8009202:	f8d9 0000 	ldr.w	r0, [r9]
 8009206:	f8df e110 	ldr.w	lr, [pc, #272]	; 8009318 <_malloc_r+0x36c>
 800920a:	3001      	adds	r0, #1
 800920c:	bf1b      	ittet	ne
 800920e:	ebca 0a0b 	rsbne	sl, sl, fp
 8009212:	4451      	addne	r1, sl
 8009214:	f8ce b000 	streq.w	fp, [lr]
 8009218:	6019      	strne	r1, [r3, #0]
 800921a:	f01b 0107 	ands.w	r1, fp, #7
 800921e:	f000 8117 	beq.w	8009450 <_malloc_r+0x4a4>
 8009222:	f1c1 0008 	rsb	r0, r1, #8
 8009226:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800922a:	4483      	add	fp, r0
 800922c:	3108      	adds	r1, #8
 800922e:	445a      	add	r2, fp
 8009230:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8009234:	ebc2 0901 	rsb	r9, r2, r1
 8009238:	4649      	mov	r1, r9
 800923a:	4630      	mov	r0, r6
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	f000 ff3f 	bl	800a0c0 <_sbrk_r>
 8009242:	1c43      	adds	r3, r0, #1
 8009244:	9b01      	ldr	r3, [sp, #4]
 8009246:	f000 813f 	beq.w	80094c8 <_malloc_r+0x51c>
 800924a:	ebcb 0200 	rsb	r2, fp, r0
 800924e:	444a      	add	r2, r9
 8009250:	f042 0201 	orr.w	r2, r2, #1
 8009254:	6819      	ldr	r1, [r3, #0]
 8009256:	f8c7 b008 	str.w	fp, [r7, #8]
 800925a:	4449      	add	r1, r9
 800925c:	42bc      	cmp	r4, r7
 800925e:	f8cb 2004 	str.w	r2, [fp, #4]
 8009262:	6019      	str	r1, [r3, #0]
 8009264:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800930c <_malloc_r+0x360>
 8009268:	d016      	beq.n	8009298 <_malloc_r+0x2ec>
 800926a:	f1b8 0f0f 	cmp.w	r8, #15
 800926e:	f240 80fd 	bls.w	800946c <_malloc_r+0x4c0>
 8009272:	6862      	ldr	r2, [r4, #4]
 8009274:	f1a8 030c 	sub.w	r3, r8, #12
 8009278:	f023 0307 	bic.w	r3, r3, #7
 800927c:	18e0      	adds	r0, r4, r3
 800927e:	f002 0201 	and.w	r2, r2, #1
 8009282:	f04f 0e05 	mov.w	lr, #5
 8009286:	431a      	orrs	r2, r3
 8009288:	2b0f      	cmp	r3, #15
 800928a:	6062      	str	r2, [r4, #4]
 800928c:	f8c0 e004 	str.w	lr, [r0, #4]
 8009290:	f8c0 e008 	str.w	lr, [r0, #8]
 8009294:	f200 811c 	bhi.w	80094d0 <_malloc_r+0x524>
 8009298:	4b1d      	ldr	r3, [pc, #116]	; (8009310 <_malloc_r+0x364>)
 800929a:	68bc      	ldr	r4, [r7, #8]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	4291      	cmp	r1, r2
 80092a0:	bf88      	it	hi
 80092a2:	6019      	strhi	r1, [r3, #0]
 80092a4:	4b1b      	ldr	r3, [pc, #108]	; (8009314 <_malloc_r+0x368>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	4291      	cmp	r1, r2
 80092aa:	6862      	ldr	r2, [r4, #4]
 80092ac:	bf88      	it	hi
 80092ae:	6019      	strhi	r1, [r3, #0]
 80092b0:	f022 0203 	bic.w	r2, r2, #3
 80092b4:	4295      	cmp	r5, r2
 80092b6:	eba2 0305 	sub.w	r3, r2, r5
 80092ba:	d801      	bhi.n	80092c0 <_malloc_r+0x314>
 80092bc:	2b0f      	cmp	r3, #15
 80092be:	dc04      	bgt.n	80092ca <_malloc_r+0x31e>
 80092c0:	4630      	mov	r0, r6
 80092c2:	f000 f9fb 	bl	80096bc <__malloc_unlock>
 80092c6:	2400      	movs	r4, #0
 80092c8:	e738      	b.n	800913c <_malloc_r+0x190>
 80092ca:	1962      	adds	r2, r4, r5
 80092cc:	f043 0301 	orr.w	r3, r3, #1
 80092d0:	f045 0501 	orr.w	r5, r5, #1
 80092d4:	6065      	str	r5, [r4, #4]
 80092d6:	4630      	mov	r0, r6
 80092d8:	60ba      	str	r2, [r7, #8]
 80092da:	6053      	str	r3, [r2, #4]
 80092dc:	f000 f9ee 	bl	80096bc <__malloc_unlock>
 80092e0:	3408      	adds	r4, #8
 80092e2:	4620      	mov	r0, r4
 80092e4:	b003      	add	sp, #12
 80092e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ea:	2b14      	cmp	r3, #20
 80092ec:	d971      	bls.n	80093d2 <_malloc_r+0x426>
 80092ee:	2b54      	cmp	r3, #84	; 0x54
 80092f0:	f200 80a4 	bhi.w	800943c <_malloc_r+0x490>
 80092f4:	0b28      	lsrs	r0, r5, #12
 80092f6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 80092fa:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80092fe:	306e      	adds	r0, #110	; 0x6e
 8009300:	e676      	b.n	8008ff0 <_malloc_r+0x44>
 8009302:	bf00      	nop
 8009304:	200005d8 	.word	0x200005d8
 8009308:	20000a7c 	.word	0x20000a7c
 800930c:	20000a80 	.word	0x20000a80
 8009310:	20000a78 	.word	0x20000a78
 8009314:	20000a74 	.word	0x20000a74
 8009318:	200009e4 	.word	0x200009e4
 800931c:	0a5a      	lsrs	r2, r3, #9
 800931e:	2a04      	cmp	r2, #4
 8009320:	d95e      	bls.n	80093e0 <_malloc_r+0x434>
 8009322:	2a14      	cmp	r2, #20
 8009324:	f200 80b3 	bhi.w	800948e <_malloc_r+0x4e2>
 8009328:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800932c:	0049      	lsls	r1, r1, #1
 800932e:	325b      	adds	r2, #91	; 0x5b
 8009330:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 8009334:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8009338:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8009518 <_malloc_r+0x56c>
 800933c:	f1ac 0c08 	sub.w	ip, ip, #8
 8009340:	458c      	cmp	ip, r1
 8009342:	f000 8088 	beq.w	8009456 <_malloc_r+0x4aa>
 8009346:	684a      	ldr	r2, [r1, #4]
 8009348:	f022 0203 	bic.w	r2, r2, #3
 800934c:	4293      	cmp	r3, r2
 800934e:	d202      	bcs.n	8009356 <_malloc_r+0x3aa>
 8009350:	6889      	ldr	r1, [r1, #8]
 8009352:	458c      	cmp	ip, r1
 8009354:	d1f7      	bne.n	8009346 <_malloc_r+0x39a>
 8009356:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8009360:	60a1      	str	r1, [r4, #8]
 8009362:	f8cc 4008 	str.w	r4, [ip, #8]
 8009366:	60cc      	str	r4, [r1, #12]
 8009368:	e688      	b.n	800907c <_malloc_r+0xd0>
 800936a:	1963      	adds	r3, r4, r5
 800936c:	f042 0701 	orr.w	r7, r2, #1
 8009370:	f045 0501 	orr.w	r5, r5, #1
 8009374:	6065      	str	r5, [r4, #4]
 8009376:	4630      	mov	r0, r6
 8009378:	614b      	str	r3, [r1, #20]
 800937a:	610b      	str	r3, [r1, #16]
 800937c:	f8c3 e00c 	str.w	lr, [r3, #12]
 8009380:	f8c3 e008 	str.w	lr, [r3, #8]
 8009384:	605f      	str	r7, [r3, #4]
 8009386:	509a      	str	r2, [r3, r2]
 8009388:	3408      	adds	r4, #8
 800938a:	f000 f997 	bl	80096bc <__malloc_unlock>
 800938e:	e6d5      	b.n	800913c <_malloc_r+0x190>
 8009390:	684a      	ldr	r2, [r1, #4]
 8009392:	e673      	b.n	800907c <_malloc_r+0xd0>
 8009394:	f108 0801 	add.w	r8, r8, #1
 8009398:	f018 0f03 	tst.w	r8, #3
 800939c:	f10c 0c08 	add.w	ip, ip, #8
 80093a0:	f47f ae7f 	bne.w	80090a2 <_malloc_r+0xf6>
 80093a4:	e030      	b.n	8009408 <_malloc_r+0x45c>
 80093a6:	68dc      	ldr	r4, [r3, #12]
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	bf08      	it	eq
 80093ac:	3002      	addeq	r0, #2
 80093ae:	f43f ae35 	beq.w	800901c <_malloc_r+0x70>
 80093b2:	e6b3      	b.n	800911c <_malloc_r+0x170>
 80093b4:	440b      	add	r3, r1
 80093b6:	460c      	mov	r4, r1
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	68c9      	ldr	r1, [r1, #12]
 80093bc:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80093c0:	f042 0201 	orr.w	r2, r2, #1
 80093c4:	605a      	str	r2, [r3, #4]
 80093c6:	4630      	mov	r0, r6
 80093c8:	60e9      	str	r1, [r5, #12]
 80093ca:	608d      	str	r5, [r1, #8]
 80093cc:	f000 f976 	bl	80096bc <__malloc_unlock>
 80093d0:	e6b4      	b.n	800913c <_malloc_r+0x190>
 80093d2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 80093d6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 80093da:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80093de:	e607      	b.n	8008ff0 <_malloc_r+0x44>
 80093e0:	099a      	lsrs	r2, r3, #6
 80093e2:	f102 0139 	add.w	r1, r2, #57	; 0x39
 80093e6:	0049      	lsls	r1, r1, #1
 80093e8:	3238      	adds	r2, #56	; 0x38
 80093ea:	e7a1      	b.n	8009330 <_malloc_r+0x384>
 80093ec:	42bc      	cmp	r4, r7
 80093ee:	4b4a      	ldr	r3, [pc, #296]	; (8009518 <_malloc_r+0x56c>)
 80093f0:	f43f af00 	beq.w	80091f4 <_malloc_r+0x248>
 80093f4:	689c      	ldr	r4, [r3, #8]
 80093f6:	6862      	ldr	r2, [r4, #4]
 80093f8:	f022 0203 	bic.w	r2, r2, #3
 80093fc:	e75a      	b.n	80092b4 <_malloc_r+0x308>
 80093fe:	f859 3908 	ldr.w	r3, [r9], #-8
 8009402:	4599      	cmp	r9, r3
 8009404:	f040 8082 	bne.w	800950c <_malloc_r+0x560>
 8009408:	f010 0f03 	tst.w	r0, #3
 800940c:	f100 30ff 	add.w	r0, r0, #4294967295
 8009410:	d1f5      	bne.n	80093fe <_malloc_r+0x452>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	ea23 0304 	bic.w	r3, r3, r4
 8009418:	607b      	str	r3, [r7, #4]
 800941a:	0064      	lsls	r4, r4, #1
 800941c:	429c      	cmp	r4, r3
 800941e:	f63f aebd 	bhi.w	800919c <_malloc_r+0x1f0>
 8009422:	2c00      	cmp	r4, #0
 8009424:	f43f aeba 	beq.w	800919c <_malloc_r+0x1f0>
 8009428:	421c      	tst	r4, r3
 800942a:	4640      	mov	r0, r8
 800942c:	f47f ae35 	bne.w	800909a <_malloc_r+0xee>
 8009430:	0064      	lsls	r4, r4, #1
 8009432:	421c      	tst	r4, r3
 8009434:	f100 0004 	add.w	r0, r0, #4
 8009438:	d0fa      	beq.n	8009430 <_malloc_r+0x484>
 800943a:	e62e      	b.n	800909a <_malloc_r+0xee>
 800943c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009440:	d818      	bhi.n	8009474 <_malloc_r+0x4c8>
 8009442:	0be8      	lsrs	r0, r5, #15
 8009444:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 8009448:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800944c:	3077      	adds	r0, #119	; 0x77
 800944e:	e5cf      	b.n	8008ff0 <_malloc_r+0x44>
 8009450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009454:	e6eb      	b.n	800922e <_malloc_r+0x282>
 8009456:	2101      	movs	r1, #1
 8009458:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800945c:	1092      	asrs	r2, r2, #2
 800945e:	fa01 f202 	lsl.w	r2, r1, r2
 8009462:	431a      	orrs	r2, r3
 8009464:	f8c8 2004 	str.w	r2, [r8, #4]
 8009468:	4661      	mov	r1, ip
 800946a:	e777      	b.n	800935c <_malloc_r+0x3b0>
 800946c:	2301      	movs	r3, #1
 800946e:	f8cb 3004 	str.w	r3, [fp, #4]
 8009472:	e725      	b.n	80092c0 <_malloc_r+0x314>
 8009474:	f240 5254 	movw	r2, #1364	; 0x554
 8009478:	4293      	cmp	r3, r2
 800947a:	d820      	bhi.n	80094be <_malloc_r+0x512>
 800947c:	0ca8      	lsrs	r0, r5, #18
 800947e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 8009482:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8009486:	307c      	adds	r0, #124	; 0x7c
 8009488:	e5b2      	b.n	8008ff0 <_malloc_r+0x44>
 800948a:	3210      	adds	r2, #16
 800948c:	e6a4      	b.n	80091d8 <_malloc_r+0x22c>
 800948e:	2a54      	cmp	r2, #84	; 0x54
 8009490:	d826      	bhi.n	80094e0 <_malloc_r+0x534>
 8009492:	0b1a      	lsrs	r2, r3, #12
 8009494:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8009498:	0049      	lsls	r1, r1, #1
 800949a:	326e      	adds	r2, #110	; 0x6e
 800949c:	e748      	b.n	8009330 <_malloc_r+0x384>
 800949e:	68bc      	ldr	r4, [r7, #8]
 80094a0:	6862      	ldr	r2, [r4, #4]
 80094a2:	f022 0203 	bic.w	r2, r2, #3
 80094a6:	e705      	b.n	80092b4 <_malloc_r+0x308>
 80094a8:	f3ca 000b 	ubfx	r0, sl, #0, #12
 80094ac:	2800      	cmp	r0, #0
 80094ae:	f47f aea8 	bne.w	8009202 <_malloc_r+0x256>
 80094b2:	4442      	add	r2, r8
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	f042 0201 	orr.w	r2, r2, #1
 80094ba:	605a      	str	r2, [r3, #4]
 80094bc:	e6ec      	b.n	8009298 <_malloc_r+0x2ec>
 80094be:	23fe      	movs	r3, #254	; 0xfe
 80094c0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 80094c4:	207e      	movs	r0, #126	; 0x7e
 80094c6:	e593      	b.n	8008ff0 <_malloc_r+0x44>
 80094c8:	2201      	movs	r2, #1
 80094ca:	f04f 0900 	mov.w	r9, #0
 80094ce:	e6c1      	b.n	8009254 <_malloc_r+0x2a8>
 80094d0:	f104 0108 	add.w	r1, r4, #8
 80094d4:	4630      	mov	r0, r6
 80094d6:	f7ff fa45 	bl	8008964 <_free_r>
 80094da:	f8d9 1000 	ldr.w	r1, [r9]
 80094de:	e6db      	b.n	8009298 <_malloc_r+0x2ec>
 80094e0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80094e4:	d805      	bhi.n	80094f2 <_malloc_r+0x546>
 80094e6:	0bda      	lsrs	r2, r3, #15
 80094e8:	f102 0178 	add.w	r1, r2, #120	; 0x78
 80094ec:	0049      	lsls	r1, r1, #1
 80094ee:	3277      	adds	r2, #119	; 0x77
 80094f0:	e71e      	b.n	8009330 <_malloc_r+0x384>
 80094f2:	f240 5154 	movw	r1, #1364	; 0x554
 80094f6:	428a      	cmp	r2, r1
 80094f8:	d805      	bhi.n	8009506 <_malloc_r+0x55a>
 80094fa:	0c9a      	lsrs	r2, r3, #18
 80094fc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8009500:	0049      	lsls	r1, r1, #1
 8009502:	327c      	adds	r2, #124	; 0x7c
 8009504:	e714      	b.n	8009330 <_malloc_r+0x384>
 8009506:	21fe      	movs	r1, #254	; 0xfe
 8009508:	227e      	movs	r2, #126	; 0x7e
 800950a:	e711      	b.n	8009330 <_malloc_r+0x384>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	e784      	b.n	800941a <_malloc_r+0x46e>
 8009510:	08e8      	lsrs	r0, r5, #3
 8009512:	1c43      	adds	r3, r0, #1
 8009514:	005b      	lsls	r3, r3, #1
 8009516:	e5f8      	b.n	800910a <_malloc_r+0x15e>
 8009518:	200005d8 	.word	0x200005d8

0800951c <__ascii_mbtowc>:
 800951c:	b082      	sub	sp, #8
 800951e:	b149      	cbz	r1, 8009534 <__ascii_mbtowc+0x18>
 8009520:	b15a      	cbz	r2, 800953a <__ascii_mbtowc+0x1e>
 8009522:	b16b      	cbz	r3, 8009540 <__ascii_mbtowc+0x24>
 8009524:	7813      	ldrb	r3, [r2, #0]
 8009526:	600b      	str	r3, [r1, #0]
 8009528:	7812      	ldrb	r2, [r2, #0]
 800952a:	1c10      	adds	r0, r2, #0
 800952c:	bf18      	it	ne
 800952e:	2001      	movne	r0, #1
 8009530:	b002      	add	sp, #8
 8009532:	4770      	bx	lr
 8009534:	a901      	add	r1, sp, #4
 8009536:	2a00      	cmp	r2, #0
 8009538:	d1f3      	bne.n	8009522 <__ascii_mbtowc+0x6>
 800953a:	4610      	mov	r0, r2
 800953c:	b002      	add	sp, #8
 800953e:	4770      	bx	lr
 8009540:	f06f 0001 	mvn.w	r0, #1
 8009544:	e7f4      	b.n	8009530 <__ascii_mbtowc+0x14>
 8009546:	bf00      	nop
	...

08009550 <memchr>:
 8009550:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8009554:	2a10      	cmp	r2, #16
 8009556:	db2b      	blt.n	80095b0 <memchr+0x60>
 8009558:	f010 0f07 	tst.w	r0, #7
 800955c:	d008      	beq.n	8009570 <memchr+0x20>
 800955e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009562:	3a01      	subs	r2, #1
 8009564:	428b      	cmp	r3, r1
 8009566:	d02d      	beq.n	80095c4 <memchr+0x74>
 8009568:	f010 0f07 	tst.w	r0, #7
 800956c:	b342      	cbz	r2, 80095c0 <memchr+0x70>
 800956e:	d1f6      	bne.n	800955e <memchr+0xe>
 8009570:	b4f0      	push	{r4, r5, r6, r7}
 8009572:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8009576:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800957a:	f022 0407 	bic.w	r4, r2, #7
 800957e:	f07f 0700 	mvns.w	r7, #0
 8009582:	2300      	movs	r3, #0
 8009584:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8009588:	3c08      	subs	r4, #8
 800958a:	ea85 0501 	eor.w	r5, r5, r1
 800958e:	ea86 0601 	eor.w	r6, r6, r1
 8009592:	fa85 f547 	uadd8	r5, r5, r7
 8009596:	faa3 f587 	sel	r5, r3, r7
 800959a:	fa86 f647 	uadd8	r6, r6, r7
 800959e:	faa5 f687 	sel	r6, r5, r7
 80095a2:	b98e      	cbnz	r6, 80095c8 <memchr+0x78>
 80095a4:	d1ee      	bne.n	8009584 <memchr+0x34>
 80095a6:	bcf0      	pop	{r4, r5, r6, r7}
 80095a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80095ac:	f002 0207 	and.w	r2, r2, #7
 80095b0:	b132      	cbz	r2, 80095c0 <memchr+0x70>
 80095b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80095b6:	3a01      	subs	r2, #1
 80095b8:	ea83 0301 	eor.w	r3, r3, r1
 80095bc:	b113      	cbz	r3, 80095c4 <memchr+0x74>
 80095be:	d1f8      	bne.n	80095b2 <memchr+0x62>
 80095c0:	2000      	movs	r0, #0
 80095c2:	4770      	bx	lr
 80095c4:	3801      	subs	r0, #1
 80095c6:	4770      	bx	lr
 80095c8:	2d00      	cmp	r5, #0
 80095ca:	bf06      	itte	eq
 80095cc:	4635      	moveq	r5, r6
 80095ce:	3803      	subeq	r0, #3
 80095d0:	3807      	subne	r0, #7
 80095d2:	f015 0f01 	tst.w	r5, #1
 80095d6:	d107      	bne.n	80095e8 <memchr+0x98>
 80095d8:	3001      	adds	r0, #1
 80095da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80095de:	bf02      	ittt	eq
 80095e0:	3001      	addeq	r0, #1
 80095e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80095e6:	3001      	addeq	r0, #1
 80095e8:	bcf0      	pop	{r4, r5, r6, r7}
 80095ea:	3801      	subs	r0, #1
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop

080095f0 <memmove>:
 80095f0:	4288      	cmp	r0, r1
 80095f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095f4:	d90d      	bls.n	8009612 <memmove+0x22>
 80095f6:	188b      	adds	r3, r1, r2
 80095f8:	4298      	cmp	r0, r3
 80095fa:	d20a      	bcs.n	8009612 <memmove+0x22>
 80095fc:	1881      	adds	r1, r0, r2
 80095fe:	2a00      	cmp	r2, #0
 8009600:	d051      	beq.n	80096a6 <memmove+0xb6>
 8009602:	1a9a      	subs	r2, r3, r2
 8009604:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009608:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800960c:	4293      	cmp	r3, r2
 800960e:	d1f9      	bne.n	8009604 <memmove+0x14>
 8009610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009612:	2a0f      	cmp	r2, #15
 8009614:	d948      	bls.n	80096a8 <memmove+0xb8>
 8009616:	ea41 0300 	orr.w	r3, r1, r0
 800961a:	079b      	lsls	r3, r3, #30
 800961c:	d146      	bne.n	80096ac <memmove+0xbc>
 800961e:	f100 0410 	add.w	r4, r0, #16
 8009622:	f101 0310 	add.w	r3, r1, #16
 8009626:	4615      	mov	r5, r2
 8009628:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800962c:	f844 6c10 	str.w	r6, [r4, #-16]
 8009630:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8009634:	f844 6c0c 	str.w	r6, [r4, #-12]
 8009638:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800963c:	f844 6c08 	str.w	r6, [r4, #-8]
 8009640:	3d10      	subs	r5, #16
 8009642:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8009646:	f844 6c04 	str.w	r6, [r4, #-4]
 800964a:	2d0f      	cmp	r5, #15
 800964c:	f103 0310 	add.w	r3, r3, #16
 8009650:	f104 0410 	add.w	r4, r4, #16
 8009654:	d8e8      	bhi.n	8009628 <memmove+0x38>
 8009656:	f1a2 0310 	sub.w	r3, r2, #16
 800965a:	f023 030f 	bic.w	r3, r3, #15
 800965e:	f002 0e0f 	and.w	lr, r2, #15
 8009662:	3310      	adds	r3, #16
 8009664:	f1be 0f03 	cmp.w	lr, #3
 8009668:	4419      	add	r1, r3
 800966a:	4403      	add	r3, r0
 800966c:	d921      	bls.n	80096b2 <memmove+0xc2>
 800966e:	1f1e      	subs	r6, r3, #4
 8009670:	460d      	mov	r5, r1
 8009672:	4674      	mov	r4, lr
 8009674:	3c04      	subs	r4, #4
 8009676:	f855 7b04 	ldr.w	r7, [r5], #4
 800967a:	f846 7f04 	str.w	r7, [r6, #4]!
 800967e:	2c03      	cmp	r4, #3
 8009680:	d8f8      	bhi.n	8009674 <memmove+0x84>
 8009682:	f1ae 0404 	sub.w	r4, lr, #4
 8009686:	f024 0403 	bic.w	r4, r4, #3
 800968a:	3404      	adds	r4, #4
 800968c:	4423      	add	r3, r4
 800968e:	4421      	add	r1, r4
 8009690:	f002 0203 	and.w	r2, r2, #3
 8009694:	b162      	cbz	r2, 80096b0 <memmove+0xc0>
 8009696:	3b01      	subs	r3, #1
 8009698:	440a      	add	r2, r1
 800969a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800969e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096a2:	428a      	cmp	r2, r1
 80096a4:	d1f9      	bne.n	800969a <memmove+0xaa>
 80096a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096a8:	4603      	mov	r3, r0
 80096aa:	e7f3      	b.n	8009694 <memmove+0xa4>
 80096ac:	4603      	mov	r3, r0
 80096ae:	e7f2      	b.n	8009696 <memmove+0xa6>
 80096b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096b2:	4672      	mov	r2, lr
 80096b4:	e7ee      	b.n	8009694 <memmove+0xa4>
 80096b6:	bf00      	nop

080096b8 <__malloc_lock>:
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop

080096bc <__malloc_unlock>:
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop

080096c0 <_Balloc>:
 80096c0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80096c2:	b570      	push	{r4, r5, r6, lr}
 80096c4:	4605      	mov	r5, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	b14b      	cbz	r3, 80096de <_Balloc+0x1e>
 80096ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80096ce:	b180      	cbz	r0, 80096f2 <_Balloc+0x32>
 80096d0:	6802      	ldr	r2, [r0, #0]
 80096d2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80096d6:	2300      	movs	r3, #0
 80096d8:	6103      	str	r3, [r0, #16]
 80096da:	60c3      	str	r3, [r0, #12]
 80096dc:	bd70      	pop	{r4, r5, r6, pc}
 80096de:	2221      	movs	r2, #33	; 0x21
 80096e0:	2104      	movs	r1, #4
 80096e2:	f000 fe2d 	bl	800a340 <_calloc_r>
 80096e6:	64e8      	str	r0, [r5, #76]	; 0x4c
 80096e8:	4603      	mov	r3, r0
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d1ed      	bne.n	80096ca <_Balloc+0xa>
 80096ee:	2000      	movs	r0, #0
 80096f0:	bd70      	pop	{r4, r5, r6, pc}
 80096f2:	2101      	movs	r1, #1
 80096f4:	fa01 f604 	lsl.w	r6, r1, r4
 80096f8:	1d72      	adds	r2, r6, #5
 80096fa:	4628      	mov	r0, r5
 80096fc:	0092      	lsls	r2, r2, #2
 80096fe:	f000 fe1f 	bl	800a340 <_calloc_r>
 8009702:	2800      	cmp	r0, #0
 8009704:	d0f3      	beq.n	80096ee <_Balloc+0x2e>
 8009706:	6044      	str	r4, [r0, #4]
 8009708:	6086      	str	r6, [r0, #8]
 800970a:	e7e4      	b.n	80096d6 <_Balloc+0x16>

0800970c <_Bfree>:
 800970c:	b131      	cbz	r1, 800971c <_Bfree+0x10>
 800970e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009710:	684a      	ldr	r2, [r1, #4]
 8009712:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009716:	6008      	str	r0, [r1, #0]
 8009718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop

08009720 <__multadd>:
 8009720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009722:	690c      	ldr	r4, [r1, #16]
 8009724:	b083      	sub	sp, #12
 8009726:	460d      	mov	r5, r1
 8009728:	4606      	mov	r6, r0
 800972a:	f101 0e14 	add.w	lr, r1, #20
 800972e:	2700      	movs	r7, #0
 8009730:	f8de 0000 	ldr.w	r0, [lr]
 8009734:	b281      	uxth	r1, r0
 8009736:	fb02 3101 	mla	r1, r2, r1, r3
 800973a:	0c0b      	lsrs	r3, r1, #16
 800973c:	0c00      	lsrs	r0, r0, #16
 800973e:	fb02 3300 	mla	r3, r2, r0, r3
 8009742:	b289      	uxth	r1, r1
 8009744:	3701      	adds	r7, #1
 8009746:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800974a:	42bc      	cmp	r4, r7
 800974c:	f84e 1b04 	str.w	r1, [lr], #4
 8009750:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009754:	dcec      	bgt.n	8009730 <__multadd+0x10>
 8009756:	b13b      	cbz	r3, 8009768 <__multadd+0x48>
 8009758:	68aa      	ldr	r2, [r5, #8]
 800975a:	4294      	cmp	r4, r2
 800975c:	da07      	bge.n	800976e <__multadd+0x4e>
 800975e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8009762:	3401      	adds	r4, #1
 8009764:	6153      	str	r3, [r2, #20]
 8009766:	612c      	str	r4, [r5, #16]
 8009768:	4628      	mov	r0, r5
 800976a:	b003      	add	sp, #12
 800976c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800976e:	6869      	ldr	r1, [r5, #4]
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	3101      	adds	r1, #1
 8009774:	4630      	mov	r0, r6
 8009776:	f7ff ffa3 	bl	80096c0 <_Balloc>
 800977a:	692a      	ldr	r2, [r5, #16]
 800977c:	3202      	adds	r2, #2
 800977e:	f105 010c 	add.w	r1, r5, #12
 8009782:	4607      	mov	r7, r0
 8009784:	0092      	lsls	r2, r2, #2
 8009786:	300c      	adds	r0, #12
 8009788:	f7fa fdb0 	bl	80042ec <memcpy>
 800978c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800978e:	6869      	ldr	r1, [r5, #4]
 8009790:	9b01      	ldr	r3, [sp, #4]
 8009792:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8009796:	6028      	str	r0, [r5, #0]
 8009798:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800979c:	463d      	mov	r5, r7
 800979e:	e7de      	b.n	800975e <__multadd+0x3e>

080097a0 <__hi0bits>:
 80097a0:	0c03      	lsrs	r3, r0, #16
 80097a2:	041b      	lsls	r3, r3, #16
 80097a4:	b9b3      	cbnz	r3, 80097d4 <__hi0bits+0x34>
 80097a6:	0400      	lsls	r0, r0, #16
 80097a8:	2310      	movs	r3, #16
 80097aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097ae:	bf04      	itt	eq
 80097b0:	0200      	lsleq	r0, r0, #8
 80097b2:	3308      	addeq	r3, #8
 80097b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097b8:	bf04      	itt	eq
 80097ba:	0100      	lsleq	r0, r0, #4
 80097bc:	3304      	addeq	r3, #4
 80097be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097c2:	bf04      	itt	eq
 80097c4:	0080      	lsleq	r0, r0, #2
 80097c6:	3302      	addeq	r3, #2
 80097c8:	2800      	cmp	r0, #0
 80097ca:	db07      	blt.n	80097dc <__hi0bits+0x3c>
 80097cc:	0042      	lsls	r2, r0, #1
 80097ce:	d403      	bmi.n	80097d8 <__hi0bits+0x38>
 80097d0:	2020      	movs	r0, #32
 80097d2:	4770      	bx	lr
 80097d4:	2300      	movs	r3, #0
 80097d6:	e7e8      	b.n	80097aa <__hi0bits+0xa>
 80097d8:	1c58      	adds	r0, r3, #1
 80097da:	4770      	bx	lr
 80097dc:	4618      	mov	r0, r3
 80097de:	4770      	bx	lr

080097e0 <__lo0bits>:
 80097e0:	6803      	ldr	r3, [r0, #0]
 80097e2:	f013 0207 	ands.w	r2, r3, #7
 80097e6:	d007      	beq.n	80097f8 <__lo0bits+0x18>
 80097e8:	07d9      	lsls	r1, r3, #31
 80097ea:	d420      	bmi.n	800982e <__lo0bits+0x4e>
 80097ec:	079a      	lsls	r2, r3, #30
 80097ee:	d420      	bmi.n	8009832 <__lo0bits+0x52>
 80097f0:	089b      	lsrs	r3, r3, #2
 80097f2:	6003      	str	r3, [r0, #0]
 80097f4:	2002      	movs	r0, #2
 80097f6:	4770      	bx	lr
 80097f8:	b299      	uxth	r1, r3
 80097fa:	b909      	cbnz	r1, 8009800 <__lo0bits+0x20>
 80097fc:	0c1b      	lsrs	r3, r3, #16
 80097fe:	2210      	movs	r2, #16
 8009800:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009804:	bf04      	itt	eq
 8009806:	0a1b      	lsreq	r3, r3, #8
 8009808:	3208      	addeq	r2, #8
 800980a:	0719      	lsls	r1, r3, #28
 800980c:	bf04      	itt	eq
 800980e:	091b      	lsreq	r3, r3, #4
 8009810:	3204      	addeq	r2, #4
 8009812:	0799      	lsls	r1, r3, #30
 8009814:	bf04      	itt	eq
 8009816:	089b      	lsreq	r3, r3, #2
 8009818:	3202      	addeq	r2, #2
 800981a:	07d9      	lsls	r1, r3, #31
 800981c:	d404      	bmi.n	8009828 <__lo0bits+0x48>
 800981e:	085b      	lsrs	r3, r3, #1
 8009820:	d101      	bne.n	8009826 <__lo0bits+0x46>
 8009822:	2020      	movs	r0, #32
 8009824:	4770      	bx	lr
 8009826:	3201      	adds	r2, #1
 8009828:	6003      	str	r3, [r0, #0]
 800982a:	4610      	mov	r0, r2
 800982c:	4770      	bx	lr
 800982e:	2000      	movs	r0, #0
 8009830:	4770      	bx	lr
 8009832:	085b      	lsrs	r3, r3, #1
 8009834:	6003      	str	r3, [r0, #0]
 8009836:	2001      	movs	r0, #1
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop

0800983c <__i2b>:
 800983c:	b510      	push	{r4, lr}
 800983e:	460c      	mov	r4, r1
 8009840:	2101      	movs	r1, #1
 8009842:	f7ff ff3d 	bl	80096c0 <_Balloc>
 8009846:	2201      	movs	r2, #1
 8009848:	6144      	str	r4, [r0, #20]
 800984a:	6102      	str	r2, [r0, #16]
 800984c:	bd10      	pop	{r4, pc}
 800984e:	bf00      	nop

08009850 <__multiply>:
 8009850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009854:	690d      	ldr	r5, [r1, #16]
 8009856:	6917      	ldr	r7, [r2, #16]
 8009858:	42bd      	cmp	r5, r7
 800985a:	b083      	sub	sp, #12
 800985c:	460c      	mov	r4, r1
 800985e:	4616      	mov	r6, r2
 8009860:	da04      	bge.n	800986c <__multiply+0x1c>
 8009862:	462a      	mov	r2, r5
 8009864:	4634      	mov	r4, r6
 8009866:	463d      	mov	r5, r7
 8009868:	460e      	mov	r6, r1
 800986a:	4617      	mov	r7, r2
 800986c:	68a3      	ldr	r3, [r4, #8]
 800986e:	6861      	ldr	r1, [r4, #4]
 8009870:	eb05 0807 	add.w	r8, r5, r7
 8009874:	4598      	cmp	r8, r3
 8009876:	bfc8      	it	gt
 8009878:	3101      	addgt	r1, #1
 800987a:	f7ff ff21 	bl	80096c0 <_Balloc>
 800987e:	f100 0c14 	add.w	ip, r0, #20
 8009882:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8009886:	45cc      	cmp	ip, r9
 8009888:	9000      	str	r0, [sp, #0]
 800988a:	d205      	bcs.n	8009898 <__multiply+0x48>
 800988c:	4663      	mov	r3, ip
 800988e:	2100      	movs	r1, #0
 8009890:	f843 1b04 	str.w	r1, [r3], #4
 8009894:	4599      	cmp	r9, r3
 8009896:	d8fb      	bhi.n	8009890 <__multiply+0x40>
 8009898:	f106 0214 	add.w	r2, r6, #20
 800989c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80098a0:	f104 0314 	add.w	r3, r4, #20
 80098a4:	4552      	cmp	r2, sl
 80098a6:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 80098aa:	d254      	bcs.n	8009956 <__multiply+0x106>
 80098ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80098b0:	4699      	mov	r9, r3
 80098b2:	f852 3b04 	ldr.w	r3, [r2], #4
 80098b6:	fa1f fb83 	uxth.w	fp, r3
 80098ba:	f1bb 0f00 	cmp.w	fp, #0
 80098be:	d020      	beq.n	8009902 <__multiply+0xb2>
 80098c0:	2000      	movs	r0, #0
 80098c2:	464f      	mov	r7, r9
 80098c4:	4666      	mov	r6, ip
 80098c6:	4605      	mov	r5, r0
 80098c8:	e000      	b.n	80098cc <__multiply+0x7c>
 80098ca:	461e      	mov	r6, r3
 80098cc:	f857 4b04 	ldr.w	r4, [r7], #4
 80098d0:	6830      	ldr	r0, [r6, #0]
 80098d2:	b2a1      	uxth	r1, r4
 80098d4:	b283      	uxth	r3, r0
 80098d6:	fb0b 3101 	mla	r1, fp, r1, r3
 80098da:	0c24      	lsrs	r4, r4, #16
 80098dc:	0c00      	lsrs	r0, r0, #16
 80098de:	194b      	adds	r3, r1, r5
 80098e0:	fb0b 0004 	mla	r0, fp, r4, r0
 80098e4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 80098e8:	b299      	uxth	r1, r3
 80098ea:	4633      	mov	r3, r6
 80098ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80098f0:	45be      	cmp	lr, r7
 80098f2:	ea4f 4510 	mov.w	r5, r0, lsr #16
 80098f6:	f843 1b04 	str.w	r1, [r3], #4
 80098fa:	d8e6      	bhi.n	80098ca <__multiply+0x7a>
 80098fc:	6075      	str	r5, [r6, #4]
 80098fe:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8009902:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8009906:	d020      	beq.n	800994a <__multiply+0xfa>
 8009908:	f8dc 3000 	ldr.w	r3, [ip]
 800990c:	4667      	mov	r7, ip
 800990e:	4618      	mov	r0, r3
 8009910:	464d      	mov	r5, r9
 8009912:	2100      	movs	r1, #0
 8009914:	e000      	b.n	8009918 <__multiply+0xc8>
 8009916:	4637      	mov	r7, r6
 8009918:	882c      	ldrh	r4, [r5, #0]
 800991a:	0c00      	lsrs	r0, r0, #16
 800991c:	fb0b 0004 	mla	r0, fp, r4, r0
 8009920:	4401      	add	r1, r0
 8009922:	b29c      	uxth	r4, r3
 8009924:	463e      	mov	r6, r7
 8009926:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800992a:	f846 3b04 	str.w	r3, [r6], #4
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f855 4b04 	ldr.w	r4, [r5], #4
 8009934:	b283      	uxth	r3, r0
 8009936:	0c24      	lsrs	r4, r4, #16
 8009938:	fb0b 3404 	mla	r4, fp, r4, r3
 800993c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8009940:	45ae      	cmp	lr, r5
 8009942:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8009946:	d8e6      	bhi.n	8009916 <__multiply+0xc6>
 8009948:	607b      	str	r3, [r7, #4]
 800994a:	4592      	cmp	sl, r2
 800994c:	f10c 0c04 	add.w	ip, ip, #4
 8009950:	d8af      	bhi.n	80098b2 <__multiply+0x62>
 8009952:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009956:	f1b8 0f00 	cmp.w	r8, #0
 800995a:	dd0b      	ble.n	8009974 <__multiply+0x124>
 800995c:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8009960:	f1a9 0904 	sub.w	r9, r9, #4
 8009964:	b11b      	cbz	r3, 800996e <__multiply+0x11e>
 8009966:	e005      	b.n	8009974 <__multiply+0x124>
 8009968:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 800996c:	b913      	cbnz	r3, 8009974 <__multiply+0x124>
 800996e:	f1b8 0801 	subs.w	r8, r8, #1
 8009972:	d1f9      	bne.n	8009968 <__multiply+0x118>
 8009974:	9800      	ldr	r0, [sp, #0]
 8009976:	f8c0 8010 	str.w	r8, [r0, #16]
 800997a:	b003      	add	sp, #12
 800997c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009980 <__pow5mult>:
 8009980:	f012 0303 	ands.w	r3, r2, #3
 8009984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009988:	4614      	mov	r4, r2
 800998a:	4607      	mov	r7, r0
 800998c:	d12e      	bne.n	80099ec <__pow5mult+0x6c>
 800998e:	460e      	mov	r6, r1
 8009990:	10a4      	asrs	r4, r4, #2
 8009992:	d01c      	beq.n	80099ce <__pow5mult+0x4e>
 8009994:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8009996:	b395      	cbz	r5, 80099fe <__pow5mult+0x7e>
 8009998:	07e3      	lsls	r3, r4, #31
 800999a:	f04f 0800 	mov.w	r8, #0
 800999e:	d406      	bmi.n	80099ae <__pow5mult+0x2e>
 80099a0:	1064      	asrs	r4, r4, #1
 80099a2:	d014      	beq.n	80099ce <__pow5mult+0x4e>
 80099a4:	6828      	ldr	r0, [r5, #0]
 80099a6:	b1a8      	cbz	r0, 80099d4 <__pow5mult+0x54>
 80099a8:	4605      	mov	r5, r0
 80099aa:	07e3      	lsls	r3, r4, #31
 80099ac:	d5f8      	bpl.n	80099a0 <__pow5mult+0x20>
 80099ae:	462a      	mov	r2, r5
 80099b0:	4631      	mov	r1, r6
 80099b2:	4638      	mov	r0, r7
 80099b4:	f7ff ff4c 	bl	8009850 <__multiply>
 80099b8:	b1b6      	cbz	r6, 80099e8 <__pow5mult+0x68>
 80099ba:	6872      	ldr	r2, [r6, #4]
 80099bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099be:	1064      	asrs	r4, r4, #1
 80099c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099c4:	6031      	str	r1, [r6, #0]
 80099c6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80099ca:	4606      	mov	r6, r0
 80099cc:	d1ea      	bne.n	80099a4 <__pow5mult+0x24>
 80099ce:	4630      	mov	r0, r6
 80099d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d4:	462a      	mov	r2, r5
 80099d6:	4629      	mov	r1, r5
 80099d8:	4638      	mov	r0, r7
 80099da:	f7ff ff39 	bl	8009850 <__multiply>
 80099de:	6028      	str	r0, [r5, #0]
 80099e0:	f8c0 8000 	str.w	r8, [r0]
 80099e4:	4605      	mov	r5, r0
 80099e6:	e7e0      	b.n	80099aa <__pow5mult+0x2a>
 80099e8:	4606      	mov	r6, r0
 80099ea:	e7d9      	b.n	80099a0 <__pow5mult+0x20>
 80099ec:	1e5a      	subs	r2, r3, #1
 80099ee:	4d0b      	ldr	r5, [pc, #44]	; (8009a1c <__pow5mult+0x9c>)
 80099f0:	2300      	movs	r3, #0
 80099f2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80099f6:	f7ff fe93 	bl	8009720 <__multadd>
 80099fa:	4606      	mov	r6, r0
 80099fc:	e7c8      	b.n	8009990 <__pow5mult+0x10>
 80099fe:	2101      	movs	r1, #1
 8009a00:	4638      	mov	r0, r7
 8009a02:	f7ff fe5d 	bl	80096c0 <_Balloc>
 8009a06:	f240 2171 	movw	r1, #625	; 0x271
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	6141      	str	r1, [r0, #20]
 8009a10:	6102      	str	r2, [r0, #16]
 8009a12:	4605      	mov	r5, r0
 8009a14:	64b8      	str	r0, [r7, #72]	; 0x48
 8009a16:	6003      	str	r3, [r0, #0]
 8009a18:	e7be      	b.n	8009998 <__pow5mult+0x18>
 8009a1a:	bf00      	nop
 8009a1c:	0800ae48 	.word	0x0800ae48

08009a20 <__lshift>:
 8009a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a24:	4691      	mov	r9, r2
 8009a26:	690a      	ldr	r2, [r1, #16]
 8009a28:	688b      	ldr	r3, [r1, #8]
 8009a2a:	ea4f 1469 	mov.w	r4, r9, asr #5
 8009a2e:	eb04 0802 	add.w	r8, r4, r2
 8009a32:	f108 0501 	add.w	r5, r8, #1
 8009a36:	429d      	cmp	r5, r3
 8009a38:	460e      	mov	r6, r1
 8009a3a:	4682      	mov	sl, r0
 8009a3c:	6849      	ldr	r1, [r1, #4]
 8009a3e:	dd04      	ble.n	8009a4a <__lshift+0x2a>
 8009a40:	005b      	lsls	r3, r3, #1
 8009a42:	429d      	cmp	r5, r3
 8009a44:	f101 0101 	add.w	r1, r1, #1
 8009a48:	dcfa      	bgt.n	8009a40 <__lshift+0x20>
 8009a4a:	4650      	mov	r0, sl
 8009a4c:	f7ff fe38 	bl	80096c0 <_Balloc>
 8009a50:	2c00      	cmp	r4, #0
 8009a52:	f100 0214 	add.w	r2, r0, #20
 8009a56:	dd38      	ble.n	8009aca <__lshift+0xaa>
 8009a58:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	f842 1b04 	str.w	r1, [r2], #4
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d1fb      	bne.n	8009a5e <__lshift+0x3e>
 8009a66:	6934      	ldr	r4, [r6, #16]
 8009a68:	f106 0114 	add.w	r1, r6, #20
 8009a6c:	f019 091f 	ands.w	r9, r9, #31
 8009a70:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8009a74:	d021      	beq.n	8009aba <__lshift+0x9a>
 8009a76:	f1c9 0220 	rsb	r2, r9, #32
 8009a7a:	2400      	movs	r4, #0
 8009a7c:	680f      	ldr	r7, [r1, #0]
 8009a7e:	fa07 fc09 	lsl.w	ip, r7, r9
 8009a82:	ea4c 0404 	orr.w	r4, ip, r4
 8009a86:	469c      	mov	ip, r3
 8009a88:	f843 4b04 	str.w	r4, [r3], #4
 8009a8c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009a90:	458e      	cmp	lr, r1
 8009a92:	fa24 f402 	lsr.w	r4, r4, r2
 8009a96:	d8f1      	bhi.n	8009a7c <__lshift+0x5c>
 8009a98:	f8cc 4004 	str.w	r4, [ip, #4]
 8009a9c:	b10c      	cbz	r4, 8009aa2 <__lshift+0x82>
 8009a9e:	f108 0502 	add.w	r5, r8, #2
 8009aa2:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8009aa6:	6872      	ldr	r2, [r6, #4]
 8009aa8:	3d01      	subs	r5, #1
 8009aaa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009aae:	6105      	str	r5, [r0, #16]
 8009ab0:	6031      	str	r1, [r6, #0]
 8009ab2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8009ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aba:	3b04      	subs	r3, #4
 8009abc:	f851 2b04 	ldr.w	r2, [r1], #4
 8009ac0:	f843 2f04 	str.w	r2, [r3, #4]!
 8009ac4:	458e      	cmp	lr, r1
 8009ac6:	d8f9      	bhi.n	8009abc <__lshift+0x9c>
 8009ac8:	e7eb      	b.n	8009aa2 <__lshift+0x82>
 8009aca:	4613      	mov	r3, r2
 8009acc:	e7cb      	b.n	8009a66 <__lshift+0x46>
 8009ace:	bf00      	nop

08009ad0 <__mcmp>:
 8009ad0:	6902      	ldr	r2, [r0, #16]
 8009ad2:	690b      	ldr	r3, [r1, #16]
 8009ad4:	1ad2      	subs	r2, r2, r3
 8009ad6:	d113      	bne.n	8009b00 <__mcmp+0x30>
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	3014      	adds	r0, #20
 8009adc:	3114      	adds	r1, #20
 8009ade:	4419      	add	r1, r3
 8009ae0:	b410      	push	{r4}
 8009ae2:	4403      	add	r3, r0
 8009ae4:	e001      	b.n	8009aea <__mcmp+0x1a>
 8009ae6:	4298      	cmp	r0, r3
 8009ae8:	d20c      	bcs.n	8009b04 <__mcmp+0x34>
 8009aea:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8009aee:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009af2:	4294      	cmp	r4, r2
 8009af4:	d0f7      	beq.n	8009ae6 <__mcmp+0x16>
 8009af6:	d309      	bcc.n	8009b0c <__mcmp+0x3c>
 8009af8:	2001      	movs	r0, #1
 8009afa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	4610      	mov	r0, r2
 8009b02:	4770      	bx	lr
 8009b04:	2000      	movs	r0, #0
 8009b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b10:	e7f3      	b.n	8009afa <__mcmp+0x2a>
 8009b12:	bf00      	nop

08009b14 <__mdiff>:
 8009b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b18:	690b      	ldr	r3, [r1, #16]
 8009b1a:	460f      	mov	r7, r1
 8009b1c:	6911      	ldr	r1, [r2, #16]
 8009b1e:	1a5b      	subs	r3, r3, r1
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	4690      	mov	r8, r2
 8009b24:	d117      	bne.n	8009b56 <__mdiff+0x42>
 8009b26:	0089      	lsls	r1, r1, #2
 8009b28:	f107 0214 	add.w	r2, r7, #20
 8009b2c:	f108 0514 	add.w	r5, r8, #20
 8009b30:	1853      	adds	r3, r2, r1
 8009b32:	4429      	add	r1, r5
 8009b34:	e001      	b.n	8009b3a <__mdiff+0x26>
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d25e      	bcs.n	8009bf8 <__mdiff+0xe4>
 8009b3a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 8009b3e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b42:	42a6      	cmp	r6, r4
 8009b44:	d0f7      	beq.n	8009b36 <__mdiff+0x22>
 8009b46:	d260      	bcs.n	8009c0a <__mdiff+0xf6>
 8009b48:	463b      	mov	r3, r7
 8009b4a:	4614      	mov	r4, r2
 8009b4c:	4647      	mov	r7, r8
 8009b4e:	f04f 0901 	mov.w	r9, #1
 8009b52:	4698      	mov	r8, r3
 8009b54:	e006      	b.n	8009b64 <__mdiff+0x50>
 8009b56:	db5d      	blt.n	8009c14 <__mdiff+0x100>
 8009b58:	f107 0514 	add.w	r5, r7, #20
 8009b5c:	f102 0414 	add.w	r4, r2, #20
 8009b60:	f04f 0900 	mov.w	r9, #0
 8009b64:	6879      	ldr	r1, [r7, #4]
 8009b66:	f7ff fdab 	bl	80096c0 <_Balloc>
 8009b6a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009b6e:	693e      	ldr	r6, [r7, #16]
 8009b70:	f8c0 900c 	str.w	r9, [r0, #12]
 8009b74:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8009b78:	46a6      	mov	lr, r4
 8009b7a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8009b7e:	f100 0414 	add.w	r4, r0, #20
 8009b82:	2300      	movs	r3, #0
 8009b84:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009b88:	f855 8b04 	ldr.w	r8, [r5], #4
 8009b8c:	b28a      	uxth	r2, r1
 8009b8e:	fa13 f388 	uxtah	r3, r3, r8
 8009b92:	0c09      	lsrs	r1, r1, #16
 8009b94:	1a9a      	subs	r2, r3, r2
 8009b96:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 8009b9a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8009b9e:	b292      	uxth	r2, r2
 8009ba0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009ba4:	45f4      	cmp	ip, lr
 8009ba6:	f844 2b04 	str.w	r2, [r4], #4
 8009baa:	ea4f 4323 	mov.w	r3, r3, asr #16
 8009bae:	d8e9      	bhi.n	8009b84 <__mdiff+0x70>
 8009bb0:	42af      	cmp	r7, r5
 8009bb2:	d917      	bls.n	8009be4 <__mdiff+0xd0>
 8009bb4:	46a4      	mov	ip, r4
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	f851 eb04 	ldr.w	lr, [r1], #4
 8009bbc:	fa13 f28e 	uxtah	r2, r3, lr
 8009bc0:	1413      	asrs	r3, r2, #16
 8009bc2:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 8009bc6:	b292      	uxth	r2, r2
 8009bc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009bcc:	428f      	cmp	r7, r1
 8009bce:	f84c 2b04 	str.w	r2, [ip], #4
 8009bd2:	ea4f 4323 	mov.w	r3, r3, asr #16
 8009bd6:	d8ef      	bhi.n	8009bb8 <__mdiff+0xa4>
 8009bd8:	43ed      	mvns	r5, r5
 8009bda:	443d      	add	r5, r7
 8009bdc:	f025 0503 	bic.w	r5, r5, #3
 8009be0:	3504      	adds	r5, #4
 8009be2:	442c      	add	r4, r5
 8009be4:	3c04      	subs	r4, #4
 8009be6:	b922      	cbnz	r2, 8009bf2 <__mdiff+0xde>
 8009be8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8009bec:	3e01      	subs	r6, #1
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d0fa      	beq.n	8009be8 <__mdiff+0xd4>
 8009bf2:	6106      	str	r6, [r0, #16]
 8009bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	f7ff fd61 	bl	80096c0 <_Balloc>
 8009bfe:	2201      	movs	r2, #1
 8009c00:	2300      	movs	r3, #0
 8009c02:	6102      	str	r2, [r0, #16]
 8009c04:	6143      	str	r3, [r0, #20]
 8009c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c0a:	462c      	mov	r4, r5
 8009c0c:	f04f 0900 	mov.w	r9, #0
 8009c10:	4615      	mov	r5, r2
 8009c12:	e7a7      	b.n	8009b64 <__mdiff+0x50>
 8009c14:	463b      	mov	r3, r7
 8009c16:	f107 0414 	add.w	r4, r7, #20
 8009c1a:	f108 0514 	add.w	r5, r8, #20
 8009c1e:	4647      	mov	r7, r8
 8009c20:	f04f 0901 	mov.w	r9, #1
 8009c24:	4698      	mov	r8, r3
 8009c26:	e79d      	b.n	8009b64 <__mdiff+0x50>

08009c28 <__d2b>:
 8009c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	2101      	movs	r1, #1
 8009c30:	461c      	mov	r4, r3
 8009c32:	f3c3 550a 	ubfx	r5, r3, #20, #11
 8009c36:	4617      	mov	r7, r2
 8009c38:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009c3a:	f7ff fd41 	bl	80096c0 <_Balloc>
 8009c3e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009c42:	4681      	mov	r9, r0
 8009c44:	b10d      	cbz	r5, 8009c4a <__d2b+0x22>
 8009c46:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009c4a:	9401      	str	r4, [sp, #4]
 8009c4c:	b31f      	cbz	r7, 8009c96 <__d2b+0x6e>
 8009c4e:	a802      	add	r0, sp, #8
 8009c50:	f840 7d08 	str.w	r7, [r0, #-8]!
 8009c54:	f7ff fdc4 	bl	80097e0 <__lo0bits>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d135      	bne.n	8009cc8 <__d2b+0xa0>
 8009c5c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009c60:	f8c9 2014 	str.w	r2, [r9, #20]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bf0c      	ite	eq
 8009c68:	2101      	moveq	r1, #1
 8009c6a:	2102      	movne	r1, #2
 8009c6c:	f8c9 3018 	str.w	r3, [r9, #24]
 8009c70:	f8c9 1010 	str.w	r1, [r9, #16]
 8009c74:	b9dd      	cbnz	r5, 8009cae <__d2b+0x86>
 8009c76:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 8009c7a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c7e:	6030      	str	r0, [r6, #0]
 8009c80:	6918      	ldr	r0, [r3, #16]
 8009c82:	f7ff fd8d 	bl	80097a0 <__hi0bits>
 8009c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c88:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009c8c:	6018      	str	r0, [r3, #0]
 8009c8e:	4648      	mov	r0, r9
 8009c90:	b003      	add	sp, #12
 8009c92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c96:	a801      	add	r0, sp, #4
 8009c98:	f7ff fda2 	bl	80097e0 <__lo0bits>
 8009c9c:	9b01      	ldr	r3, [sp, #4]
 8009c9e:	f8c9 3014 	str.w	r3, [r9, #20]
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	3020      	adds	r0, #32
 8009ca6:	f8c9 1010 	str.w	r1, [r9, #16]
 8009caa:	2d00      	cmp	r5, #0
 8009cac:	d0e3      	beq.n	8009c76 <__d2b+0x4e>
 8009cae:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 8009cb2:	eb08 0300 	add.w	r3, r8, r0
 8009cb6:	6033      	str	r3, [r6, #0]
 8009cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009cbe:	6018      	str	r0, [r3, #0]
 8009cc0:	4648      	mov	r0, r9
 8009cc2:	b003      	add	sp, #12
 8009cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cc8:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009ccc:	f1c0 0120 	rsb	r1, r0, #32
 8009cd0:	fa03 f101 	lsl.w	r1, r3, r1
 8009cd4:	430a      	orrs	r2, r1
 8009cd6:	40c3      	lsrs	r3, r0
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	f8c9 2014 	str.w	r2, [r9, #20]
 8009cde:	e7c1      	b.n	8009c64 <__d2b+0x3c>

08009ce0 <_realloc_r>:
 8009ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	4617      	mov	r7, r2
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	2900      	cmp	r1, #0
 8009cea:	f000 80c1 	beq.w	8009e70 <_realloc_r+0x190>
 8009cee:	460e      	mov	r6, r1
 8009cf0:	4681      	mov	r9, r0
 8009cf2:	f107 050b 	add.w	r5, r7, #11
 8009cf6:	f7ff fcdf 	bl	80096b8 <__malloc_lock>
 8009cfa:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8009cfe:	2d16      	cmp	r5, #22
 8009d00:	f02e 0403 	bic.w	r4, lr, #3
 8009d04:	f1a6 0808 	sub.w	r8, r6, #8
 8009d08:	d840      	bhi.n	8009d8c <_realloc_r+0xac>
 8009d0a:	2210      	movs	r2, #16
 8009d0c:	4615      	mov	r5, r2
 8009d0e:	42af      	cmp	r7, r5
 8009d10:	d841      	bhi.n	8009d96 <_realloc_r+0xb6>
 8009d12:	4294      	cmp	r4, r2
 8009d14:	da75      	bge.n	8009e02 <_realloc_r+0x122>
 8009d16:	4bc9      	ldr	r3, [pc, #804]	; (800a03c <_realloc_r+0x35c>)
 8009d18:	6899      	ldr	r1, [r3, #8]
 8009d1a:	eb08 0004 	add.w	r0, r8, r4
 8009d1e:	4288      	cmp	r0, r1
 8009d20:	6841      	ldr	r1, [r0, #4]
 8009d22:	f000 80d9 	beq.w	8009ed8 <_realloc_r+0x1f8>
 8009d26:	f021 0301 	bic.w	r3, r1, #1
 8009d2a:	4403      	add	r3, r0
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	07db      	lsls	r3, r3, #31
 8009d30:	d57d      	bpl.n	8009e2e <_realloc_r+0x14e>
 8009d32:	f01e 0f01 	tst.w	lr, #1
 8009d36:	d035      	beq.n	8009da4 <_realloc_r+0xc4>
 8009d38:	4639      	mov	r1, r7
 8009d3a:	4648      	mov	r0, r9
 8009d3c:	f7ff f936 	bl	8008fac <_malloc_r>
 8009d40:	4607      	mov	r7, r0
 8009d42:	b1e0      	cbz	r0, 8009d7e <_realloc_r+0x9e>
 8009d44:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d48:	f023 0301 	bic.w	r3, r3, #1
 8009d4c:	4443      	add	r3, r8
 8009d4e:	f1a0 0208 	sub.w	r2, r0, #8
 8009d52:	429a      	cmp	r2, r3
 8009d54:	f000 8144 	beq.w	8009fe0 <_realloc_r+0x300>
 8009d58:	1f22      	subs	r2, r4, #4
 8009d5a:	2a24      	cmp	r2, #36	; 0x24
 8009d5c:	f200 8131 	bhi.w	8009fc2 <_realloc_r+0x2e2>
 8009d60:	2a13      	cmp	r2, #19
 8009d62:	f200 8104 	bhi.w	8009f6e <_realloc_r+0x28e>
 8009d66:	4603      	mov	r3, r0
 8009d68:	4632      	mov	r2, r6
 8009d6a:	6811      	ldr	r1, [r2, #0]
 8009d6c:	6019      	str	r1, [r3, #0]
 8009d6e:	6851      	ldr	r1, [r2, #4]
 8009d70:	6059      	str	r1, [r3, #4]
 8009d72:	6892      	ldr	r2, [r2, #8]
 8009d74:	609a      	str	r2, [r3, #8]
 8009d76:	4631      	mov	r1, r6
 8009d78:	4648      	mov	r0, r9
 8009d7a:	f7fe fdf3 	bl	8008964 <_free_r>
 8009d7e:	4648      	mov	r0, r9
 8009d80:	f7ff fc9c 	bl	80096bc <__malloc_unlock>
 8009d84:	4638      	mov	r0, r7
 8009d86:	b003      	add	sp, #12
 8009d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8c:	f025 0507 	bic.w	r5, r5, #7
 8009d90:	2d00      	cmp	r5, #0
 8009d92:	462a      	mov	r2, r5
 8009d94:	dabb      	bge.n	8009d0e <_realloc_r+0x2e>
 8009d96:	230c      	movs	r3, #12
 8009d98:	2000      	movs	r0, #0
 8009d9a:	f8c9 3000 	str.w	r3, [r9]
 8009d9e:	b003      	add	sp, #12
 8009da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009da8:	ebc3 0a08 	rsb	sl, r3, r8
 8009dac:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009db0:	f023 0c03 	bic.w	ip, r3, #3
 8009db4:	eb04 030c 	add.w	r3, r4, ip
 8009db8:	4293      	cmp	r3, r2
 8009dba:	dbbd      	blt.n	8009d38 <_realloc_r+0x58>
 8009dbc:	4657      	mov	r7, sl
 8009dbe:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009dc2:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009dc6:	1f22      	subs	r2, r4, #4
 8009dc8:	2a24      	cmp	r2, #36	; 0x24
 8009dca:	60c1      	str	r1, [r0, #12]
 8009dcc:	6088      	str	r0, [r1, #8]
 8009dce:	f200 8117 	bhi.w	800a000 <_realloc_r+0x320>
 8009dd2:	2a13      	cmp	r2, #19
 8009dd4:	f240 8112 	bls.w	8009ffc <_realloc_r+0x31c>
 8009dd8:	6831      	ldr	r1, [r6, #0]
 8009dda:	f8ca 1008 	str.w	r1, [sl, #8]
 8009dde:	6871      	ldr	r1, [r6, #4]
 8009de0:	f8ca 100c 	str.w	r1, [sl, #12]
 8009de4:	2a1b      	cmp	r2, #27
 8009de6:	f200 812b 	bhi.w	800a040 <_realloc_r+0x360>
 8009dea:	3608      	adds	r6, #8
 8009dec:	f10a 0210 	add.w	r2, sl, #16
 8009df0:	6831      	ldr	r1, [r6, #0]
 8009df2:	6011      	str	r1, [r2, #0]
 8009df4:	6871      	ldr	r1, [r6, #4]
 8009df6:	6051      	str	r1, [r2, #4]
 8009df8:	68b1      	ldr	r1, [r6, #8]
 8009dfa:	6091      	str	r1, [r2, #8]
 8009dfc:	463e      	mov	r6, r7
 8009dfe:	461c      	mov	r4, r3
 8009e00:	46d0      	mov	r8, sl
 8009e02:	1b63      	subs	r3, r4, r5
 8009e04:	2b0f      	cmp	r3, #15
 8009e06:	d81d      	bhi.n	8009e44 <_realloc_r+0x164>
 8009e08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	4323      	orrs	r3, r4
 8009e12:	4444      	add	r4, r8
 8009e14:	f8c8 3004 	str.w	r3, [r8, #4]
 8009e18:	6863      	ldr	r3, [r4, #4]
 8009e1a:	f043 0301 	orr.w	r3, r3, #1
 8009e1e:	6063      	str	r3, [r4, #4]
 8009e20:	4648      	mov	r0, r9
 8009e22:	f7ff fc4b 	bl	80096bc <__malloc_unlock>
 8009e26:	4630      	mov	r0, r6
 8009e28:	b003      	add	sp, #12
 8009e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e2e:	f021 0103 	bic.w	r1, r1, #3
 8009e32:	4421      	add	r1, r4
 8009e34:	4291      	cmp	r1, r2
 8009e36:	db21      	blt.n	8009e7c <_realloc_r+0x19c>
 8009e38:	68c3      	ldr	r3, [r0, #12]
 8009e3a:	6882      	ldr	r2, [r0, #8]
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	60d3      	str	r3, [r2, #12]
 8009e40:	609a      	str	r2, [r3, #8]
 8009e42:	e7de      	b.n	8009e02 <_realloc_r+0x122>
 8009e44:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009e48:	eb08 0105 	add.w	r1, r8, r5
 8009e4c:	f002 0201 	and.w	r2, r2, #1
 8009e50:	4315      	orrs	r5, r2
 8009e52:	f043 0201 	orr.w	r2, r3, #1
 8009e56:	440b      	add	r3, r1
 8009e58:	f8c8 5004 	str.w	r5, [r8, #4]
 8009e5c:	604a      	str	r2, [r1, #4]
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	f042 0201 	orr.w	r2, r2, #1
 8009e64:	3108      	adds	r1, #8
 8009e66:	605a      	str	r2, [r3, #4]
 8009e68:	4648      	mov	r0, r9
 8009e6a:	f7fe fd7b 	bl	8008964 <_free_r>
 8009e6e:	e7d7      	b.n	8009e20 <_realloc_r+0x140>
 8009e70:	4611      	mov	r1, r2
 8009e72:	b003      	add	sp, #12
 8009e74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e78:	f7ff b898 	b.w	8008fac <_malloc_r>
 8009e7c:	f01e 0f01 	tst.w	lr, #1
 8009e80:	f47f af5a 	bne.w	8009d38 <_realloc_r+0x58>
 8009e84:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009e88:	ebc3 0a08 	rsb	sl, r3, r8
 8009e8c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009e90:	f023 0c03 	bic.w	ip, r3, #3
 8009e94:	eb01 0e0c 	add.w	lr, r1, ip
 8009e98:	4596      	cmp	lr, r2
 8009e9a:	db8b      	blt.n	8009db4 <_realloc_r+0xd4>
 8009e9c:	68c3      	ldr	r3, [r0, #12]
 8009e9e:	6882      	ldr	r2, [r0, #8]
 8009ea0:	4657      	mov	r7, sl
 8009ea2:	60d3      	str	r3, [r2, #12]
 8009ea4:	609a      	str	r2, [r3, #8]
 8009ea6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009eaa:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009eae:	60cb      	str	r3, [r1, #12]
 8009eb0:	1f22      	subs	r2, r4, #4
 8009eb2:	2a24      	cmp	r2, #36	; 0x24
 8009eb4:	6099      	str	r1, [r3, #8]
 8009eb6:	f200 8099 	bhi.w	8009fec <_realloc_r+0x30c>
 8009eba:	2a13      	cmp	r2, #19
 8009ebc:	d962      	bls.n	8009f84 <_realloc_r+0x2a4>
 8009ebe:	6833      	ldr	r3, [r6, #0]
 8009ec0:	f8ca 3008 	str.w	r3, [sl, #8]
 8009ec4:	6873      	ldr	r3, [r6, #4]
 8009ec6:	f8ca 300c 	str.w	r3, [sl, #12]
 8009eca:	2a1b      	cmp	r2, #27
 8009ecc:	f200 80a0 	bhi.w	800a010 <_realloc_r+0x330>
 8009ed0:	3608      	adds	r6, #8
 8009ed2:	f10a 0310 	add.w	r3, sl, #16
 8009ed6:	e056      	b.n	8009f86 <_realloc_r+0x2a6>
 8009ed8:	f021 0b03 	bic.w	fp, r1, #3
 8009edc:	44a3      	add	fp, r4
 8009ede:	f105 0010 	add.w	r0, r5, #16
 8009ee2:	4583      	cmp	fp, r0
 8009ee4:	da59      	bge.n	8009f9a <_realloc_r+0x2ba>
 8009ee6:	f01e 0f01 	tst.w	lr, #1
 8009eea:	f47f af25 	bne.w	8009d38 <_realloc_r+0x58>
 8009eee:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8009ef2:	ebc1 0a08 	rsb	sl, r1, r8
 8009ef6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009efa:	f021 0c03 	bic.w	ip, r1, #3
 8009efe:	44e3      	add	fp, ip
 8009f00:	4558      	cmp	r0, fp
 8009f02:	f73f af57 	bgt.w	8009db4 <_realloc_r+0xd4>
 8009f06:	4657      	mov	r7, sl
 8009f08:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009f0c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009f10:	1f22      	subs	r2, r4, #4
 8009f12:	2a24      	cmp	r2, #36	; 0x24
 8009f14:	60c1      	str	r1, [r0, #12]
 8009f16:	6088      	str	r0, [r1, #8]
 8009f18:	f200 80b4 	bhi.w	800a084 <_realloc_r+0x3a4>
 8009f1c:	2a13      	cmp	r2, #19
 8009f1e:	f240 80a5 	bls.w	800a06c <_realloc_r+0x38c>
 8009f22:	6831      	ldr	r1, [r6, #0]
 8009f24:	f8ca 1008 	str.w	r1, [sl, #8]
 8009f28:	6871      	ldr	r1, [r6, #4]
 8009f2a:	f8ca 100c 	str.w	r1, [sl, #12]
 8009f2e:	2a1b      	cmp	r2, #27
 8009f30:	f200 80af 	bhi.w	800a092 <_realloc_r+0x3b2>
 8009f34:	3608      	adds	r6, #8
 8009f36:	f10a 0210 	add.w	r2, sl, #16
 8009f3a:	6831      	ldr	r1, [r6, #0]
 8009f3c:	6011      	str	r1, [r2, #0]
 8009f3e:	6871      	ldr	r1, [r6, #4]
 8009f40:	6051      	str	r1, [r2, #4]
 8009f42:	68b1      	ldr	r1, [r6, #8]
 8009f44:	6091      	str	r1, [r2, #8]
 8009f46:	eb0a 0105 	add.w	r1, sl, r5
 8009f4a:	ebc5 020b 	rsb	r2, r5, fp
 8009f4e:	f042 0201 	orr.w	r2, r2, #1
 8009f52:	6099      	str	r1, [r3, #8]
 8009f54:	604a      	str	r2, [r1, #4]
 8009f56:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009f5a:	f003 0301 	and.w	r3, r3, #1
 8009f5e:	431d      	orrs	r5, r3
 8009f60:	4648      	mov	r0, r9
 8009f62:	f8ca 5004 	str.w	r5, [sl, #4]
 8009f66:	f7ff fba9 	bl	80096bc <__malloc_unlock>
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	e75c      	b.n	8009e28 <_realloc_r+0x148>
 8009f6e:	6833      	ldr	r3, [r6, #0]
 8009f70:	6003      	str	r3, [r0, #0]
 8009f72:	6873      	ldr	r3, [r6, #4]
 8009f74:	6043      	str	r3, [r0, #4]
 8009f76:	2a1b      	cmp	r2, #27
 8009f78:	d827      	bhi.n	8009fca <_realloc_r+0x2ea>
 8009f7a:	f100 0308 	add.w	r3, r0, #8
 8009f7e:	f106 0208 	add.w	r2, r6, #8
 8009f82:	e6f2      	b.n	8009d6a <_realloc_r+0x8a>
 8009f84:	463b      	mov	r3, r7
 8009f86:	6832      	ldr	r2, [r6, #0]
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	6872      	ldr	r2, [r6, #4]
 8009f8c:	605a      	str	r2, [r3, #4]
 8009f8e:	68b2      	ldr	r2, [r6, #8]
 8009f90:	609a      	str	r2, [r3, #8]
 8009f92:	463e      	mov	r6, r7
 8009f94:	4674      	mov	r4, lr
 8009f96:	46d0      	mov	r8, sl
 8009f98:	e733      	b.n	8009e02 <_realloc_r+0x122>
 8009f9a:	eb08 0105 	add.w	r1, r8, r5
 8009f9e:	ebc5 0b0b 	rsb	fp, r5, fp
 8009fa2:	f04b 0201 	orr.w	r2, fp, #1
 8009fa6:	6099      	str	r1, [r3, #8]
 8009fa8:	604a      	str	r2, [r1, #4]
 8009faa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	431d      	orrs	r5, r3
 8009fb4:	4648      	mov	r0, r9
 8009fb6:	f846 5c04 	str.w	r5, [r6, #-4]
 8009fba:	f7ff fb7f 	bl	80096bc <__malloc_unlock>
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	e732      	b.n	8009e28 <_realloc_r+0x148>
 8009fc2:	4631      	mov	r1, r6
 8009fc4:	f7ff fb14 	bl	80095f0 <memmove>
 8009fc8:	e6d5      	b.n	8009d76 <_realloc_r+0x96>
 8009fca:	68b3      	ldr	r3, [r6, #8]
 8009fcc:	6083      	str	r3, [r0, #8]
 8009fce:	68f3      	ldr	r3, [r6, #12]
 8009fd0:	60c3      	str	r3, [r0, #12]
 8009fd2:	2a24      	cmp	r2, #36	; 0x24
 8009fd4:	d028      	beq.n	800a028 <_realloc_r+0x348>
 8009fd6:	f100 0310 	add.w	r3, r0, #16
 8009fda:	f106 0210 	add.w	r2, r6, #16
 8009fde:	e6c4      	b.n	8009d6a <_realloc_r+0x8a>
 8009fe0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009fe4:	f023 0303 	bic.w	r3, r3, #3
 8009fe8:	441c      	add	r4, r3
 8009fea:	e70a      	b.n	8009e02 <_realloc_r+0x122>
 8009fec:	4631      	mov	r1, r6
 8009fee:	4638      	mov	r0, r7
 8009ff0:	4674      	mov	r4, lr
 8009ff2:	46d0      	mov	r8, sl
 8009ff4:	f7ff fafc 	bl	80095f0 <memmove>
 8009ff8:	463e      	mov	r6, r7
 8009ffa:	e702      	b.n	8009e02 <_realloc_r+0x122>
 8009ffc:	463a      	mov	r2, r7
 8009ffe:	e6f7      	b.n	8009df0 <_realloc_r+0x110>
 800a000:	4631      	mov	r1, r6
 800a002:	4638      	mov	r0, r7
 800a004:	461c      	mov	r4, r3
 800a006:	46d0      	mov	r8, sl
 800a008:	f7ff faf2 	bl	80095f0 <memmove>
 800a00c:	463e      	mov	r6, r7
 800a00e:	e6f8      	b.n	8009e02 <_realloc_r+0x122>
 800a010:	68b3      	ldr	r3, [r6, #8]
 800a012:	f8ca 3010 	str.w	r3, [sl, #16]
 800a016:	68f3      	ldr	r3, [r6, #12]
 800a018:	f8ca 3014 	str.w	r3, [sl, #20]
 800a01c:	2a24      	cmp	r2, #36	; 0x24
 800a01e:	d01b      	beq.n	800a058 <_realloc_r+0x378>
 800a020:	3610      	adds	r6, #16
 800a022:	f10a 0318 	add.w	r3, sl, #24
 800a026:	e7ae      	b.n	8009f86 <_realloc_r+0x2a6>
 800a028:	6933      	ldr	r3, [r6, #16]
 800a02a:	6103      	str	r3, [r0, #16]
 800a02c:	6973      	ldr	r3, [r6, #20]
 800a02e:	6143      	str	r3, [r0, #20]
 800a030:	f106 0218 	add.w	r2, r6, #24
 800a034:	f100 0318 	add.w	r3, r0, #24
 800a038:	e697      	b.n	8009d6a <_realloc_r+0x8a>
 800a03a:	bf00      	nop
 800a03c:	200005d8 	.word	0x200005d8
 800a040:	68b1      	ldr	r1, [r6, #8]
 800a042:	f8ca 1010 	str.w	r1, [sl, #16]
 800a046:	68f1      	ldr	r1, [r6, #12]
 800a048:	f8ca 1014 	str.w	r1, [sl, #20]
 800a04c:	2a24      	cmp	r2, #36	; 0x24
 800a04e:	d00f      	beq.n	800a070 <_realloc_r+0x390>
 800a050:	3610      	adds	r6, #16
 800a052:	f10a 0218 	add.w	r2, sl, #24
 800a056:	e6cb      	b.n	8009df0 <_realloc_r+0x110>
 800a058:	6933      	ldr	r3, [r6, #16]
 800a05a:	f8ca 3018 	str.w	r3, [sl, #24]
 800a05e:	6973      	ldr	r3, [r6, #20]
 800a060:	f8ca 301c 	str.w	r3, [sl, #28]
 800a064:	3618      	adds	r6, #24
 800a066:	f10a 0320 	add.w	r3, sl, #32
 800a06a:	e78c      	b.n	8009f86 <_realloc_r+0x2a6>
 800a06c:	463a      	mov	r2, r7
 800a06e:	e764      	b.n	8009f3a <_realloc_r+0x25a>
 800a070:	6932      	ldr	r2, [r6, #16]
 800a072:	f8ca 2018 	str.w	r2, [sl, #24]
 800a076:	6972      	ldr	r2, [r6, #20]
 800a078:	f8ca 201c 	str.w	r2, [sl, #28]
 800a07c:	3618      	adds	r6, #24
 800a07e:	f10a 0220 	add.w	r2, sl, #32
 800a082:	e6b5      	b.n	8009df0 <_realloc_r+0x110>
 800a084:	4631      	mov	r1, r6
 800a086:	4638      	mov	r0, r7
 800a088:	9301      	str	r3, [sp, #4]
 800a08a:	f7ff fab1 	bl	80095f0 <memmove>
 800a08e:	9b01      	ldr	r3, [sp, #4]
 800a090:	e759      	b.n	8009f46 <_realloc_r+0x266>
 800a092:	68b1      	ldr	r1, [r6, #8]
 800a094:	f8ca 1010 	str.w	r1, [sl, #16]
 800a098:	68f1      	ldr	r1, [r6, #12]
 800a09a:	f8ca 1014 	str.w	r1, [sl, #20]
 800a09e:	2a24      	cmp	r2, #36	; 0x24
 800a0a0:	d003      	beq.n	800a0aa <_realloc_r+0x3ca>
 800a0a2:	3610      	adds	r6, #16
 800a0a4:	f10a 0218 	add.w	r2, sl, #24
 800a0a8:	e747      	b.n	8009f3a <_realloc_r+0x25a>
 800a0aa:	6932      	ldr	r2, [r6, #16]
 800a0ac:	f8ca 2018 	str.w	r2, [sl, #24]
 800a0b0:	6972      	ldr	r2, [r6, #20]
 800a0b2:	f8ca 201c 	str.w	r2, [sl, #28]
 800a0b6:	3618      	adds	r6, #24
 800a0b8:	f10a 0220 	add.w	r2, sl, #32
 800a0bc:	e73d      	b.n	8009f3a <_realloc_r+0x25a>
 800a0be:	bf00      	nop

0800a0c0 <_sbrk_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4c07      	ldr	r4, [pc, #28]	; (800a0e0 <_sbrk_r+0x20>)
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	4608      	mov	r0, r1
 800a0ca:	6023      	str	r3, [r4, #0]
 800a0cc:	f7f8 fac2 	bl	8002654 <_sbrk>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d000      	beq.n	800a0d6 <_sbrk_r+0x16>
 800a0d4:	bd38      	pop	{r3, r4, r5, pc}
 800a0d6:	6823      	ldr	r3, [r4, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d0fb      	beq.n	800a0d4 <_sbrk_r+0x14>
 800a0dc:	602b      	str	r3, [r5, #0]
 800a0de:	bd38      	pop	{r3, r4, r5, pc}
 800a0e0:	20000aec 	.word	0x20000aec

0800a0e4 <__sread>:
 800a0e4:	b510      	push	{r4, lr}
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ec:	f000 fa48 	bl	800a580 <_read_r>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	db03      	blt.n	800a0fc <__sread+0x18>
 800a0f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a0f6:	4403      	add	r3, r0
 800a0f8:	6523      	str	r3, [r4, #80]	; 0x50
 800a0fa:	bd10      	pop	{r4, pc}
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a102:	81a3      	strh	r3, [r4, #12]
 800a104:	bd10      	pop	{r4, pc}
 800a106:	bf00      	nop

0800a108 <__swrite>:
 800a108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a10c:	4616      	mov	r6, r2
 800a10e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a112:	461f      	mov	r7, r3
 800a114:	05d3      	lsls	r3, r2, #23
 800a116:	460c      	mov	r4, r1
 800a118:	4605      	mov	r5, r0
 800a11a:	d507      	bpl.n	800a12c <__swrite+0x24>
 800a11c:	2200      	movs	r2, #0
 800a11e:	2302      	movs	r3, #2
 800a120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a124:	f000 fa16 	bl	800a554 <_lseek_r>
 800a128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a12c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a130:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a134:	81a2      	strh	r2, [r4, #12]
 800a136:	463b      	mov	r3, r7
 800a138:	4632      	mov	r2, r6
 800a13a:	4628      	mov	r0, r5
 800a13c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a140:	f000 b8e8 	b.w	800a314 <_write_r>

0800a144 <__sseek>:
 800a144:	b510      	push	{r4, lr}
 800a146:	460c      	mov	r4, r1
 800a148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a14c:	f000 fa02 	bl	800a554 <_lseek_r>
 800a150:	89a3      	ldrh	r3, [r4, #12]
 800a152:	1c42      	adds	r2, r0, #1
 800a154:	bf0e      	itee	eq
 800a156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a15a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a15e:	6520      	strne	r0, [r4, #80]	; 0x50
 800a160:	81a3      	strh	r3, [r4, #12]
 800a162:	bd10      	pop	{r4, pc}

0800a164 <__sclose>:
 800a164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a168:	f000 b91a 	b.w	800a3a0 <_close_r>

0800a16c <__ssprint_r>:
 800a16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a170:	6893      	ldr	r3, [r2, #8]
 800a172:	b083      	sub	sp, #12
 800a174:	4690      	mov	r8, r2
 800a176:	2b00      	cmp	r3, #0
 800a178:	d072      	beq.n	800a260 <__ssprint_r+0xf4>
 800a17a:	4683      	mov	fp, r0
 800a17c:	f04f 0900 	mov.w	r9, #0
 800a180:	6816      	ldr	r6, [r2, #0]
 800a182:	6808      	ldr	r0, [r1, #0]
 800a184:	688b      	ldr	r3, [r1, #8]
 800a186:	460d      	mov	r5, r1
 800a188:	464c      	mov	r4, r9
 800a18a:	2c00      	cmp	r4, #0
 800a18c:	d045      	beq.n	800a21a <__ssprint_r+0xae>
 800a18e:	429c      	cmp	r4, r3
 800a190:	461f      	mov	r7, r3
 800a192:	469a      	mov	sl, r3
 800a194:	d346      	bcc.n	800a224 <__ssprint_r+0xb8>
 800a196:	89ab      	ldrh	r3, [r5, #12]
 800a198:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800a19c:	d02d      	beq.n	800a1fa <__ssprint_r+0x8e>
 800a19e:	696f      	ldr	r7, [r5, #20]
 800a1a0:	6929      	ldr	r1, [r5, #16]
 800a1a2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800a1a6:	ebc1 0a00 	rsb	sl, r1, r0
 800a1aa:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800a1ae:	1c60      	adds	r0, r4, #1
 800a1b0:	107f      	asrs	r7, r7, #1
 800a1b2:	4450      	add	r0, sl
 800a1b4:	42b8      	cmp	r0, r7
 800a1b6:	463a      	mov	r2, r7
 800a1b8:	bf84      	itt	hi
 800a1ba:	4607      	movhi	r7, r0
 800a1bc:	463a      	movhi	r2, r7
 800a1be:	055b      	lsls	r3, r3, #21
 800a1c0:	d533      	bpl.n	800a22a <__ssprint_r+0xbe>
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	4658      	mov	r0, fp
 800a1c6:	f7fe fef1 	bl	8008fac <_malloc_r>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d037      	beq.n	800a23e <__ssprint_r+0xd2>
 800a1ce:	4652      	mov	r2, sl
 800a1d0:	6929      	ldr	r1, [r5, #16]
 800a1d2:	9001      	str	r0, [sp, #4]
 800a1d4:	f7fa f88a 	bl	80042ec <memcpy>
 800a1d8:	89aa      	ldrh	r2, [r5, #12]
 800a1da:	9b01      	ldr	r3, [sp, #4]
 800a1dc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a1e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a1e4:	81aa      	strh	r2, [r5, #12]
 800a1e6:	ebca 0207 	rsb	r2, sl, r7
 800a1ea:	eb03 000a 	add.w	r0, r3, sl
 800a1ee:	616f      	str	r7, [r5, #20]
 800a1f0:	612b      	str	r3, [r5, #16]
 800a1f2:	6028      	str	r0, [r5, #0]
 800a1f4:	60aa      	str	r2, [r5, #8]
 800a1f6:	4627      	mov	r7, r4
 800a1f8:	46a2      	mov	sl, r4
 800a1fa:	4652      	mov	r2, sl
 800a1fc:	4649      	mov	r1, r9
 800a1fe:	f7ff f9f7 	bl	80095f0 <memmove>
 800a202:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800a206:	68ab      	ldr	r3, [r5, #8]
 800a208:	6828      	ldr	r0, [r5, #0]
 800a20a:	1bdb      	subs	r3, r3, r7
 800a20c:	4450      	add	r0, sl
 800a20e:	1b14      	subs	r4, r2, r4
 800a210:	60ab      	str	r3, [r5, #8]
 800a212:	6028      	str	r0, [r5, #0]
 800a214:	f8c8 4008 	str.w	r4, [r8, #8]
 800a218:	b314      	cbz	r4, 800a260 <__ssprint_r+0xf4>
 800a21a:	f8d6 9000 	ldr.w	r9, [r6]
 800a21e:	6874      	ldr	r4, [r6, #4]
 800a220:	3608      	adds	r6, #8
 800a222:	e7b2      	b.n	800a18a <__ssprint_r+0x1e>
 800a224:	4627      	mov	r7, r4
 800a226:	46a2      	mov	sl, r4
 800a228:	e7e7      	b.n	800a1fa <__ssprint_r+0x8e>
 800a22a:	4658      	mov	r0, fp
 800a22c:	f7ff fd58 	bl	8009ce0 <_realloc_r>
 800a230:	4603      	mov	r3, r0
 800a232:	2800      	cmp	r0, #0
 800a234:	d1d7      	bne.n	800a1e6 <__ssprint_r+0x7a>
 800a236:	6929      	ldr	r1, [r5, #16]
 800a238:	4658      	mov	r0, fp
 800a23a:	f7fe fb93 	bl	8008964 <_free_r>
 800a23e:	230c      	movs	r3, #12
 800a240:	f8cb 3000 	str.w	r3, [fp]
 800a244:	89ab      	ldrh	r3, [r5, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a24c:	f04f 30ff 	mov.w	r0, #4294967295
 800a250:	81ab      	strh	r3, [r5, #12]
 800a252:	f8c8 2008 	str.w	r2, [r8, #8]
 800a256:	f8c8 2004 	str.w	r2, [r8, #4]
 800a25a:	b003      	add	sp, #12
 800a25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a260:	2000      	movs	r0, #0
 800a262:	f8c8 0004 	str.w	r0, [r8, #4]
 800a266:	b003      	add	sp, #12
 800a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a26c <__sprint_r.part.0>:
 800a26c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a26e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a272:	049c      	lsls	r4, r3, #18
 800a274:	4692      	mov	sl, r2
 800a276:	d52c      	bpl.n	800a2d2 <__sprint_r.part.0+0x66>
 800a278:	6893      	ldr	r3, [r2, #8]
 800a27a:	6812      	ldr	r2, [r2, #0]
 800a27c:	b33b      	cbz	r3, 800a2ce <__sprint_r.part.0+0x62>
 800a27e:	460f      	mov	r7, r1
 800a280:	4680      	mov	r8, r0
 800a282:	f102 0908 	add.w	r9, r2, #8
 800a286:	e919 0060 	ldmdb	r9, {r5, r6}
 800a28a:	08b6      	lsrs	r6, r6, #2
 800a28c:	d017      	beq.n	800a2be <__sprint_r.part.0+0x52>
 800a28e:	3d04      	subs	r5, #4
 800a290:	2400      	movs	r4, #0
 800a292:	e001      	b.n	800a298 <__sprint_r.part.0+0x2c>
 800a294:	42a6      	cmp	r6, r4
 800a296:	d010      	beq.n	800a2ba <__sprint_r.part.0+0x4e>
 800a298:	463a      	mov	r2, r7
 800a29a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800a29e:	4640      	mov	r0, r8
 800a2a0:	f000 f91e 	bl	800a4e0 <_fputwc_r>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	f104 0401 	add.w	r4, r4, #1
 800a2aa:	d1f3      	bne.n	800a294 <__sprint_r.part.0+0x28>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	f8ca 3008 	str.w	r3, [sl, #8]
 800a2b2:	f8ca 3004 	str.w	r3, [sl, #4]
 800a2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ba:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a2be:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800a2c2:	f8ca 3008 	str.w	r3, [sl, #8]
 800a2c6:	f109 0908 	add.w	r9, r9, #8
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1db      	bne.n	800a286 <__sprint_r.part.0+0x1a>
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	e7ec      	b.n	800a2ac <__sprint_r.part.0+0x40>
 800a2d2:	f7fe fc2f 	bl	8008b34 <__sfvwrite_r>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f8ca 3008 	str.w	r3, [sl, #8]
 800a2dc:	f8ca 3004 	str.w	r3, [sl, #4]
 800a2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a2e4 <__sprint_r>:
 800a2e4:	6893      	ldr	r3, [r2, #8]
 800a2e6:	b10b      	cbz	r3, 800a2ec <__sprint_r+0x8>
 800a2e8:	f7ff bfc0 	b.w	800a26c <__sprint_r.part.0>
 800a2ec:	b410      	push	{r4}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	6053      	str	r3, [r2, #4]
 800a2f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <__ascii_wctomb>:
 800a2f8:	b121      	cbz	r1, 800a304 <__ascii_wctomb+0xc>
 800a2fa:	2aff      	cmp	r2, #255	; 0xff
 800a2fc:	d804      	bhi.n	800a308 <__ascii_wctomb+0x10>
 800a2fe:	700a      	strb	r2, [r1, #0]
 800a300:	2001      	movs	r0, #1
 800a302:	4770      	bx	lr
 800a304:	4608      	mov	r0, r1
 800a306:	4770      	bx	lr
 800a308:	238a      	movs	r3, #138	; 0x8a
 800a30a:	6003      	str	r3, [r0, #0]
 800a30c:	f04f 30ff 	mov.w	r0, #4294967295
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop

0800a314 <_write_r>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	460d      	mov	r5, r1
 800a318:	4c08      	ldr	r4, [pc, #32]	; (800a33c <_write_r+0x28>)
 800a31a:	4611      	mov	r1, r2
 800a31c:	4606      	mov	r6, r0
 800a31e:	461a      	mov	r2, r3
 800a320:	4628      	mov	r0, r5
 800a322:	2300      	movs	r3, #0
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	f7f7 f9c3 	bl	80016b0 <_write>
 800a32a:	1c43      	adds	r3, r0, #1
 800a32c:	d000      	beq.n	800a330 <_write_r+0x1c>
 800a32e:	bd70      	pop	{r4, r5, r6, pc}
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0fb      	beq.n	800a32e <_write_r+0x1a>
 800a336:	6033      	str	r3, [r6, #0]
 800a338:	bd70      	pop	{r4, r5, r6, pc}
 800a33a:	bf00      	nop
 800a33c:	20000aec 	.word	0x20000aec

0800a340 <_calloc_r>:
 800a340:	b510      	push	{r4, lr}
 800a342:	fb02 f101 	mul.w	r1, r2, r1
 800a346:	f7fe fe31 	bl	8008fac <_malloc_r>
 800a34a:	4604      	mov	r4, r0
 800a34c:	b1d8      	cbz	r0, 800a386 <_calloc_r+0x46>
 800a34e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a352:	f022 0203 	bic.w	r2, r2, #3
 800a356:	3a04      	subs	r2, #4
 800a358:	2a24      	cmp	r2, #36	; 0x24
 800a35a:	d818      	bhi.n	800a38e <_calloc_r+0x4e>
 800a35c:	2a13      	cmp	r2, #19
 800a35e:	d914      	bls.n	800a38a <_calloc_r+0x4a>
 800a360:	2300      	movs	r3, #0
 800a362:	2a1b      	cmp	r2, #27
 800a364:	6003      	str	r3, [r0, #0]
 800a366:	6043      	str	r3, [r0, #4]
 800a368:	d916      	bls.n	800a398 <_calloc_r+0x58>
 800a36a:	2a24      	cmp	r2, #36	; 0x24
 800a36c:	6083      	str	r3, [r0, #8]
 800a36e:	60c3      	str	r3, [r0, #12]
 800a370:	bf11      	iteee	ne
 800a372:	f100 0210 	addne.w	r2, r0, #16
 800a376:	6103      	streq	r3, [r0, #16]
 800a378:	6143      	streq	r3, [r0, #20]
 800a37a:	f100 0218 	addeq.w	r2, r0, #24
 800a37e:	2300      	movs	r3, #0
 800a380:	6013      	str	r3, [r2, #0]
 800a382:	6053      	str	r3, [r2, #4]
 800a384:	6093      	str	r3, [r2, #8]
 800a386:	4620      	mov	r0, r4
 800a388:	bd10      	pop	{r4, pc}
 800a38a:	4602      	mov	r2, r0
 800a38c:	e7f7      	b.n	800a37e <_calloc_r+0x3e>
 800a38e:	2100      	movs	r1, #0
 800a390:	f7fa f846 	bl	8004420 <memset>
 800a394:	4620      	mov	r0, r4
 800a396:	bd10      	pop	{r4, pc}
 800a398:	f100 0208 	add.w	r2, r0, #8
 800a39c:	e7ef      	b.n	800a37e <_calloc_r+0x3e>
 800a39e:	bf00      	nop

0800a3a0 <_close_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	4c07      	ldr	r4, [pc, #28]	; (800a3c0 <_close_r+0x20>)
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	6023      	str	r3, [r4, #0]
 800a3ac:	f7f8 f934 	bl	8002618 <_close>
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	d000      	beq.n	800a3b6 <_close_r+0x16>
 800a3b4:	bd38      	pop	{r3, r4, r5, pc}
 800a3b6:	6823      	ldr	r3, [r4, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d0fb      	beq.n	800a3b4 <_close_r+0x14>
 800a3bc:	602b      	str	r3, [r5, #0]
 800a3be:	bd38      	pop	{r3, r4, r5, pc}
 800a3c0:	20000aec 	.word	0x20000aec

0800a3c4 <_fclose_r>:
 800a3c4:	2900      	cmp	r1, #0
 800a3c6:	d03d      	beq.n	800a444 <_fclose_r+0x80>
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	4605      	mov	r5, r0
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	b108      	cbz	r0, 800a3d4 <_fclose_r+0x10>
 800a3d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a3d2:	b37b      	cbz	r3, 800a434 <_fclose_r+0x70>
 800a3d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3d8:	b90b      	cbnz	r3, 800a3de <_fclose_r+0x1a>
 800a3da:	2000      	movs	r0, #0
 800a3dc:	bd70      	pop	{r4, r5, r6, pc}
 800a3de:	4621      	mov	r1, r4
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	f7fe f92f 	bl	8008644 <__sflush_r>
 800a3e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	b133      	cbz	r3, 800a3fa <_fclose_r+0x36>
 800a3ec:	69e1      	ldr	r1, [r4, #28]
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	4798      	blx	r3
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	bfb8      	it	lt
 800a3f6:	f04f 36ff 	movlt.w	r6, #4294967295
 800a3fa:	89a3      	ldrh	r3, [r4, #12]
 800a3fc:	061b      	lsls	r3, r3, #24
 800a3fe:	d41c      	bmi.n	800a43a <_fclose_r+0x76>
 800a400:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a402:	b141      	cbz	r1, 800a416 <_fclose_r+0x52>
 800a404:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a408:	4299      	cmp	r1, r3
 800a40a:	d002      	beq.n	800a412 <_fclose_r+0x4e>
 800a40c:	4628      	mov	r0, r5
 800a40e:	f7fe faa9 	bl	8008964 <_free_r>
 800a412:	2300      	movs	r3, #0
 800a414:	6323      	str	r3, [r4, #48]	; 0x30
 800a416:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a418:	b121      	cbz	r1, 800a424 <_fclose_r+0x60>
 800a41a:	4628      	mov	r0, r5
 800a41c:	f7fe faa2 	bl	8008964 <_free_r>
 800a420:	2300      	movs	r3, #0
 800a422:	6463      	str	r3, [r4, #68]	; 0x44
 800a424:	f7fe fa4c 	bl	80088c0 <__sfp_lock_acquire>
 800a428:	2300      	movs	r3, #0
 800a42a:	81a3      	strh	r3, [r4, #12]
 800a42c:	f7fe fa4a 	bl	80088c4 <__sfp_lock_release>
 800a430:	4630      	mov	r0, r6
 800a432:	bd70      	pop	{r4, r5, r6, pc}
 800a434:	f7fe fa3e 	bl	80088b4 <__sinit>
 800a438:	e7cc      	b.n	800a3d4 <_fclose_r+0x10>
 800a43a:	6921      	ldr	r1, [r4, #16]
 800a43c:	4628      	mov	r0, r5
 800a43e:	f7fe fa91 	bl	8008964 <_free_r>
 800a442:	e7dd      	b.n	800a400 <_fclose_r+0x3c>
 800a444:	2000      	movs	r0, #0
 800a446:	4770      	bx	lr

0800a448 <__fputwc>:
 800a448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a44c:	b082      	sub	sp, #8
 800a44e:	4680      	mov	r8, r0
 800a450:	4689      	mov	r9, r1
 800a452:	4614      	mov	r4, r2
 800a454:	f7fe fd1a 	bl	8008e8c <__locale_mb_cur_max>
 800a458:	2801      	cmp	r0, #1
 800a45a:	d033      	beq.n	800a4c4 <__fputwc+0x7c>
 800a45c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800a460:	464a      	mov	r2, r9
 800a462:	a901      	add	r1, sp, #4
 800a464:	4640      	mov	r0, r8
 800a466:	f000 f8f7 	bl	800a658 <_wcrtomb_r>
 800a46a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a46e:	4682      	mov	sl, r0
 800a470:	d021      	beq.n	800a4b6 <__fputwc+0x6e>
 800a472:	b388      	cbz	r0, 800a4d8 <__fputwc+0x90>
 800a474:	f89d 6004 	ldrb.w	r6, [sp, #4]
 800a478:	2500      	movs	r5, #0
 800a47a:	e008      	b.n	800a48e <__fputwc+0x46>
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	1c5a      	adds	r2, r3, #1
 800a480:	6022      	str	r2, [r4, #0]
 800a482:	701e      	strb	r6, [r3, #0]
 800a484:	3501      	adds	r5, #1
 800a486:	4555      	cmp	r5, sl
 800a488:	d226      	bcs.n	800a4d8 <__fputwc+0x90>
 800a48a:	ab01      	add	r3, sp, #4
 800a48c:	5d5e      	ldrb	r6, [r3, r5]
 800a48e:	68a3      	ldr	r3, [r4, #8]
 800a490:	3b01      	subs	r3, #1
 800a492:	2b00      	cmp	r3, #0
 800a494:	60a3      	str	r3, [r4, #8]
 800a496:	daf1      	bge.n	800a47c <__fputwc+0x34>
 800a498:	69a7      	ldr	r7, [r4, #24]
 800a49a:	42bb      	cmp	r3, r7
 800a49c:	4631      	mov	r1, r6
 800a49e:	4622      	mov	r2, r4
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	db01      	blt.n	800a4a8 <__fputwc+0x60>
 800a4a4:	2e0a      	cmp	r6, #10
 800a4a6:	d1e9      	bne.n	800a47c <__fputwc+0x34>
 800a4a8:	f000 f880 	bl	800a5ac <__swbuf_r>
 800a4ac:	1c43      	adds	r3, r0, #1
 800a4ae:	d1e9      	bne.n	800a484 <__fputwc+0x3c>
 800a4b0:	b002      	add	sp, #8
 800a4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b6:	89a3      	ldrh	r3, [r4, #12]
 800a4b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4bc:	81a3      	strh	r3, [r4, #12]
 800a4be:	b002      	add	sp, #8
 800a4c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c4:	f109 33ff 	add.w	r3, r9, #4294967295
 800a4c8:	2bfe      	cmp	r3, #254	; 0xfe
 800a4ca:	d8c7      	bhi.n	800a45c <__fputwc+0x14>
 800a4cc:	fa5f f689 	uxtb.w	r6, r9
 800a4d0:	4682      	mov	sl, r0
 800a4d2:	f88d 6004 	strb.w	r6, [sp, #4]
 800a4d6:	e7cf      	b.n	800a478 <__fputwc+0x30>
 800a4d8:	4648      	mov	r0, r9
 800a4da:	b002      	add	sp, #8
 800a4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a4e0 <_fputwc_r>:
 800a4e0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800a4e4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800a4e8:	d10b      	bne.n	800a502 <_fputwc_r+0x22>
 800a4ea:	b410      	push	{r4}
 800a4ec:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800a4ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a4f2:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800a4f6:	6654      	str	r4, [r2, #100]	; 0x64
 800a4f8:	8193      	strh	r3, [r2, #12]
 800a4fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4fe:	f7ff bfa3 	b.w	800a448 <__fputwc>
 800a502:	f7ff bfa1 	b.w	800a448 <__fputwc>
 800a506:	bf00      	nop

0800a508 <_fstat_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	460b      	mov	r3, r1
 800a50c:	4c07      	ldr	r4, [pc, #28]	; (800a52c <_fstat_r+0x24>)
 800a50e:	4605      	mov	r5, r0
 800a510:	4611      	mov	r1, r2
 800a512:	4618      	mov	r0, r3
 800a514:	2300      	movs	r3, #0
 800a516:	6023      	str	r3, [r4, #0]
 800a518:	f7f8 f888 	bl	800262c <_fstat>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d000      	beq.n	800a522 <_fstat_r+0x1a>
 800a520:	bd38      	pop	{r3, r4, r5, pc}
 800a522:	6823      	ldr	r3, [r4, #0]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d0fb      	beq.n	800a520 <_fstat_r+0x18>
 800a528:	602b      	str	r3, [r5, #0]
 800a52a:	bd38      	pop	{r3, r4, r5, pc}
 800a52c:	20000aec 	.word	0x20000aec

0800a530 <_isatty_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	4c07      	ldr	r4, [pc, #28]	; (800a550 <_isatty_r+0x20>)
 800a534:	2300      	movs	r3, #0
 800a536:	4605      	mov	r5, r0
 800a538:	4608      	mov	r0, r1
 800a53a:	6023      	str	r3, [r4, #0]
 800a53c:	f7f8 f8ca 	bl	80026d4 <_isatty>
 800a540:	1c43      	adds	r3, r0, #1
 800a542:	d000      	beq.n	800a546 <_isatty_r+0x16>
 800a544:	bd38      	pop	{r3, r4, r5, pc}
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d0fb      	beq.n	800a544 <_isatty_r+0x14>
 800a54c:	602b      	str	r3, [r5, #0]
 800a54e:	bd38      	pop	{r3, r4, r5, pc}
 800a550:	20000aec 	.word	0x20000aec

0800a554 <_lseek_r>:
 800a554:	b570      	push	{r4, r5, r6, lr}
 800a556:	460d      	mov	r5, r1
 800a558:	4c08      	ldr	r4, [pc, #32]	; (800a57c <_lseek_r+0x28>)
 800a55a:	4611      	mov	r1, r2
 800a55c:	4606      	mov	r6, r0
 800a55e:	461a      	mov	r2, r3
 800a560:	4628      	mov	r0, r5
 800a562:	2300      	movs	r3, #0
 800a564:	6023      	str	r3, [r4, #0]
 800a566:	f7f8 f83b 	bl	80025e0 <_lseek>
 800a56a:	1c43      	adds	r3, r0, #1
 800a56c:	d000      	beq.n	800a570 <_lseek_r+0x1c>
 800a56e:	bd70      	pop	{r4, r5, r6, pc}
 800a570:	6823      	ldr	r3, [r4, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d0fb      	beq.n	800a56e <_lseek_r+0x1a>
 800a576:	6033      	str	r3, [r6, #0]
 800a578:	bd70      	pop	{r4, r5, r6, pc}
 800a57a:	bf00      	nop
 800a57c:	20000aec 	.word	0x20000aec

0800a580 <_read_r>:
 800a580:	b570      	push	{r4, r5, r6, lr}
 800a582:	460d      	mov	r5, r1
 800a584:	4c08      	ldr	r4, [pc, #32]	; (800a5a8 <_read_r+0x28>)
 800a586:	4611      	mov	r1, r2
 800a588:	4606      	mov	r6, r0
 800a58a:	461a      	mov	r2, r3
 800a58c:	4628      	mov	r0, r5
 800a58e:	2300      	movs	r3, #0
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	f7f8 f833 	bl	80025fc <_read>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	d000      	beq.n	800a59c <_read_r+0x1c>
 800a59a:	bd70      	pop	{r4, r5, r6, pc}
 800a59c:	6823      	ldr	r3, [r4, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0fb      	beq.n	800a59a <_read_r+0x1a>
 800a5a2:	6033      	str	r3, [r6, #0]
 800a5a4:	bd70      	pop	{r4, r5, r6, pc}
 800a5a6:	bf00      	nop
 800a5a8:	20000aec 	.word	0x20000aec

0800a5ac <__swbuf_r>:
 800a5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ae:	460d      	mov	r5, r1
 800a5b0:	4614      	mov	r4, r2
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	b110      	cbz	r0, 800a5bc <__swbuf_r+0x10>
 800a5b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d04a      	beq.n	800a652 <__swbuf_r+0xa6>
 800a5bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5c0:	69a3      	ldr	r3, [r4, #24]
 800a5c2:	60a3      	str	r3, [r4, #8]
 800a5c4:	b291      	uxth	r1, r2
 800a5c6:	0708      	lsls	r0, r1, #28
 800a5c8:	d538      	bpl.n	800a63c <__swbuf_r+0x90>
 800a5ca:	6923      	ldr	r3, [r4, #16]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d035      	beq.n	800a63c <__swbuf_r+0x90>
 800a5d0:	0489      	lsls	r1, r1, #18
 800a5d2:	b2ef      	uxtb	r7, r5
 800a5d4:	d515      	bpl.n	800a602 <__swbuf_r+0x56>
 800a5d6:	6822      	ldr	r2, [r4, #0]
 800a5d8:	6961      	ldr	r1, [r4, #20]
 800a5da:	1ad3      	subs	r3, r2, r3
 800a5dc:	428b      	cmp	r3, r1
 800a5de:	da1c      	bge.n	800a61a <__swbuf_r+0x6e>
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	68a1      	ldr	r1, [r4, #8]
 800a5e4:	1c50      	adds	r0, r2, #1
 800a5e6:	3901      	subs	r1, #1
 800a5e8:	60a1      	str	r1, [r4, #8]
 800a5ea:	6020      	str	r0, [r4, #0]
 800a5ec:	7015      	strb	r5, [r2, #0]
 800a5ee:	6962      	ldr	r2, [r4, #20]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d01a      	beq.n	800a62a <__swbuf_r+0x7e>
 800a5f4:	89a3      	ldrh	r3, [r4, #12]
 800a5f6:	07db      	lsls	r3, r3, #31
 800a5f8:	d501      	bpl.n	800a5fe <__swbuf_r+0x52>
 800a5fa:	2f0a      	cmp	r7, #10
 800a5fc:	d015      	beq.n	800a62a <__swbuf_r+0x7e>
 800a5fe:	4638      	mov	r0, r7
 800a600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a602:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a608:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800a60c:	81a2      	strh	r2, [r4, #12]
 800a60e:	6822      	ldr	r2, [r4, #0]
 800a610:	6661      	str	r1, [r4, #100]	; 0x64
 800a612:	6961      	ldr	r1, [r4, #20]
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	428b      	cmp	r3, r1
 800a618:	dbe2      	blt.n	800a5e0 <__swbuf_r+0x34>
 800a61a:	4621      	mov	r1, r4
 800a61c:	4630      	mov	r0, r6
 800a61e:	f7fe f8b5 	bl	800878c <_fflush_r>
 800a622:	b940      	cbnz	r0, 800a636 <__swbuf_r+0x8a>
 800a624:	6822      	ldr	r2, [r4, #0]
 800a626:	2301      	movs	r3, #1
 800a628:	e7db      	b.n	800a5e2 <__swbuf_r+0x36>
 800a62a:	4621      	mov	r1, r4
 800a62c:	4630      	mov	r0, r6
 800a62e:	f7fe f8ad 	bl	800878c <_fflush_r>
 800a632:	2800      	cmp	r0, #0
 800a634:	d0e3      	beq.n	800a5fe <__swbuf_r+0x52>
 800a636:	f04f 37ff 	mov.w	r7, #4294967295
 800a63a:	e7e0      	b.n	800a5fe <__swbuf_r+0x52>
 800a63c:	4621      	mov	r1, r4
 800a63e:	4630      	mov	r0, r6
 800a640:	f7fc fff2 	bl	8007628 <__swsetup_r>
 800a644:	2800      	cmp	r0, #0
 800a646:	d1f6      	bne.n	800a636 <__swbuf_r+0x8a>
 800a648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a64c:	6923      	ldr	r3, [r4, #16]
 800a64e:	b291      	uxth	r1, r2
 800a650:	e7be      	b.n	800a5d0 <__swbuf_r+0x24>
 800a652:	f7fe f92f 	bl	80088b4 <__sinit>
 800a656:	e7b1      	b.n	800a5bc <__swbuf_r+0x10>

0800a658 <_wcrtomb_r>:
 800a658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a65a:	4606      	mov	r6, r0
 800a65c:	b085      	sub	sp, #20
 800a65e:	461f      	mov	r7, r3
 800a660:	b189      	cbz	r1, 800a686 <_wcrtomb_r+0x2e>
 800a662:	4c10      	ldr	r4, [pc, #64]	; (800a6a4 <_wcrtomb_r+0x4c>)
 800a664:	4d10      	ldr	r5, [pc, #64]	; (800a6a8 <_wcrtomb_r+0x50>)
 800a666:	6824      	ldr	r4, [r4, #0]
 800a668:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800a66a:	2c00      	cmp	r4, #0
 800a66c:	bf08      	it	eq
 800a66e:	462c      	moveq	r4, r5
 800a670:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800a674:	47a0      	blx	r4
 800a676:	1c43      	adds	r3, r0, #1
 800a678:	d103      	bne.n	800a682 <_wcrtomb_r+0x2a>
 800a67a:	2200      	movs	r2, #0
 800a67c:	238a      	movs	r3, #138	; 0x8a
 800a67e:	603a      	str	r2, [r7, #0]
 800a680:	6033      	str	r3, [r6, #0]
 800a682:	b005      	add	sp, #20
 800a684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a686:	460c      	mov	r4, r1
 800a688:	4906      	ldr	r1, [pc, #24]	; (800a6a4 <_wcrtomb_r+0x4c>)
 800a68a:	4a07      	ldr	r2, [pc, #28]	; (800a6a8 <_wcrtomb_r+0x50>)
 800a68c:	6809      	ldr	r1, [r1, #0]
 800a68e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a690:	2900      	cmp	r1, #0
 800a692:	bf08      	it	eq
 800a694:	4611      	moveq	r1, r2
 800a696:	4622      	mov	r2, r4
 800a698:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 800a69c:	a901      	add	r1, sp, #4
 800a69e:	47a0      	blx	r4
 800a6a0:	e7e9      	b.n	800a676 <_wcrtomb_r+0x1e>
 800a6a2:	bf00      	nop
 800a6a4:	20000468 	.word	0x20000468
 800a6a8:	2000046c 	.word	0x2000046c

0800a6ac <__aeabi_uldivmod>:
 800a6ac:	b953      	cbnz	r3, 800a6c4 <__aeabi_uldivmod+0x18>
 800a6ae:	b94a      	cbnz	r2, 800a6c4 <__aeabi_uldivmod+0x18>
 800a6b0:	2900      	cmp	r1, #0
 800a6b2:	bf08      	it	eq
 800a6b4:	2800      	cmpeq	r0, #0
 800a6b6:	bf1c      	itt	ne
 800a6b8:	f04f 31ff 	movne.w	r1, #4294967295
 800a6bc:	f04f 30ff 	movne.w	r0, #4294967295
 800a6c0:	f000 b97e 	b.w	800a9c0 <__aeabi_idiv0>
 800a6c4:	f1ad 0c08 	sub.w	ip, sp, #8
 800a6c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800a6cc:	f000 f806 	bl	800a6dc <__udivmoddi4>
 800a6d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a6d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6d8:	b004      	add	sp, #16
 800a6da:	4770      	bx	lr

0800a6dc <__udivmoddi4>:
 800a6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e0:	468c      	mov	ip, r1
 800a6e2:	460e      	mov	r6, r1
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	9d08      	ldr	r5, [sp, #32]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d150      	bne.n	800a78e <__udivmoddi4+0xb2>
 800a6ec:	428a      	cmp	r2, r1
 800a6ee:	4617      	mov	r7, r2
 800a6f0:	d96c      	bls.n	800a7cc <__udivmoddi4+0xf0>
 800a6f2:	fab2 fe82 	clz	lr, r2
 800a6f6:	f1be 0f00 	cmp.w	lr, #0
 800a6fa:	d00b      	beq.n	800a714 <__udivmoddi4+0x38>
 800a6fc:	f1ce 0420 	rsb	r4, lr, #32
 800a700:	fa20 f404 	lsr.w	r4, r0, r4
 800a704:	fa01 f60e 	lsl.w	r6, r1, lr
 800a708:	ea44 0c06 	orr.w	ip, r4, r6
 800a70c:	fa02 f70e 	lsl.w	r7, r2, lr
 800a710:	fa00 f40e 	lsl.w	r4, r0, lr
 800a714:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800a718:	0c22      	lsrs	r2, r4, #16
 800a71a:	fbbc f0f9 	udiv	r0, ip, r9
 800a71e:	fa1f f887 	uxth.w	r8, r7
 800a722:	fb09 c610 	mls	r6, r9, r0, ip
 800a726:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a72a:	fb00 f308 	mul.w	r3, r0, r8
 800a72e:	42b3      	cmp	r3, r6
 800a730:	d909      	bls.n	800a746 <__udivmoddi4+0x6a>
 800a732:	19f6      	adds	r6, r6, r7
 800a734:	f100 32ff 	add.w	r2, r0, #4294967295
 800a738:	f080 8122 	bcs.w	800a980 <__udivmoddi4+0x2a4>
 800a73c:	42b3      	cmp	r3, r6
 800a73e:	f240 811f 	bls.w	800a980 <__udivmoddi4+0x2a4>
 800a742:	3802      	subs	r0, #2
 800a744:	443e      	add	r6, r7
 800a746:	1af6      	subs	r6, r6, r3
 800a748:	b2a2      	uxth	r2, r4
 800a74a:	fbb6 f3f9 	udiv	r3, r6, r9
 800a74e:	fb09 6613 	mls	r6, r9, r3, r6
 800a752:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800a756:	fb03 f808 	mul.w	r8, r3, r8
 800a75a:	45a0      	cmp	r8, r4
 800a75c:	d909      	bls.n	800a772 <__udivmoddi4+0x96>
 800a75e:	19e4      	adds	r4, r4, r7
 800a760:	f103 32ff 	add.w	r2, r3, #4294967295
 800a764:	f080 810a 	bcs.w	800a97c <__udivmoddi4+0x2a0>
 800a768:	45a0      	cmp	r8, r4
 800a76a:	f240 8107 	bls.w	800a97c <__udivmoddi4+0x2a0>
 800a76e:	3b02      	subs	r3, #2
 800a770:	443c      	add	r4, r7
 800a772:	ebc8 0404 	rsb	r4, r8, r4
 800a776:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a77a:	2100      	movs	r1, #0
 800a77c:	2d00      	cmp	r5, #0
 800a77e:	d062      	beq.n	800a846 <__udivmoddi4+0x16a>
 800a780:	fa24 f40e 	lsr.w	r4, r4, lr
 800a784:	2300      	movs	r3, #0
 800a786:	602c      	str	r4, [r5, #0]
 800a788:	606b      	str	r3, [r5, #4]
 800a78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a78e:	428b      	cmp	r3, r1
 800a790:	d907      	bls.n	800a7a2 <__udivmoddi4+0xc6>
 800a792:	2d00      	cmp	r5, #0
 800a794:	d055      	beq.n	800a842 <__udivmoddi4+0x166>
 800a796:	2100      	movs	r1, #0
 800a798:	e885 0041 	stmia.w	r5, {r0, r6}
 800a79c:	4608      	mov	r0, r1
 800a79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a2:	fab3 f183 	clz	r1, r3
 800a7a6:	2900      	cmp	r1, #0
 800a7a8:	f040 8090 	bne.w	800a8cc <__udivmoddi4+0x1f0>
 800a7ac:	42b3      	cmp	r3, r6
 800a7ae:	d302      	bcc.n	800a7b6 <__udivmoddi4+0xda>
 800a7b0:	4282      	cmp	r2, r0
 800a7b2:	f200 80f8 	bhi.w	800a9a6 <__udivmoddi4+0x2ca>
 800a7b6:	1a84      	subs	r4, r0, r2
 800a7b8:	eb66 0603 	sbc.w	r6, r6, r3
 800a7bc:	2001      	movs	r0, #1
 800a7be:	46b4      	mov	ip, r6
 800a7c0:	2d00      	cmp	r5, #0
 800a7c2:	d040      	beq.n	800a846 <__udivmoddi4+0x16a>
 800a7c4:	e885 1010 	stmia.w	r5, {r4, ip}
 800a7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7cc:	b912      	cbnz	r2, 800a7d4 <__udivmoddi4+0xf8>
 800a7ce:	2701      	movs	r7, #1
 800a7d0:	fbb7 f7f2 	udiv	r7, r7, r2
 800a7d4:	fab7 fe87 	clz	lr, r7
 800a7d8:	f1be 0f00 	cmp.w	lr, #0
 800a7dc:	d135      	bne.n	800a84a <__udivmoddi4+0x16e>
 800a7de:	1bf3      	subs	r3, r6, r7
 800a7e0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800a7e4:	fa1f fc87 	uxth.w	ip, r7
 800a7e8:	2101      	movs	r1, #1
 800a7ea:	fbb3 f0f8 	udiv	r0, r3, r8
 800a7ee:	0c22      	lsrs	r2, r4, #16
 800a7f0:	fb08 3610 	mls	r6, r8, r0, r3
 800a7f4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a7f8:	fb0c f300 	mul.w	r3, ip, r0
 800a7fc:	42b3      	cmp	r3, r6
 800a7fe:	d907      	bls.n	800a810 <__udivmoddi4+0x134>
 800a800:	19f6      	adds	r6, r6, r7
 800a802:	f100 32ff 	add.w	r2, r0, #4294967295
 800a806:	d202      	bcs.n	800a80e <__udivmoddi4+0x132>
 800a808:	42b3      	cmp	r3, r6
 800a80a:	f200 80ce 	bhi.w	800a9aa <__udivmoddi4+0x2ce>
 800a80e:	4610      	mov	r0, r2
 800a810:	1af6      	subs	r6, r6, r3
 800a812:	b2a2      	uxth	r2, r4
 800a814:	fbb6 f3f8 	udiv	r3, r6, r8
 800a818:	fb08 6613 	mls	r6, r8, r3, r6
 800a81c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800a820:	fb0c fc03 	mul.w	ip, ip, r3
 800a824:	45a4      	cmp	ip, r4
 800a826:	d907      	bls.n	800a838 <__udivmoddi4+0x15c>
 800a828:	19e4      	adds	r4, r4, r7
 800a82a:	f103 32ff 	add.w	r2, r3, #4294967295
 800a82e:	d202      	bcs.n	800a836 <__udivmoddi4+0x15a>
 800a830:	45a4      	cmp	ip, r4
 800a832:	f200 80b5 	bhi.w	800a9a0 <__udivmoddi4+0x2c4>
 800a836:	4613      	mov	r3, r2
 800a838:	ebcc 0404 	rsb	r4, ip, r4
 800a83c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a840:	e79c      	b.n	800a77c <__udivmoddi4+0xa0>
 800a842:	4629      	mov	r1, r5
 800a844:	4628      	mov	r0, r5
 800a846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a84a:	f1ce 0120 	rsb	r1, lr, #32
 800a84e:	fa06 f30e 	lsl.w	r3, r6, lr
 800a852:	fa07 f70e 	lsl.w	r7, r7, lr
 800a856:	fa20 f901 	lsr.w	r9, r0, r1
 800a85a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800a85e:	40ce      	lsrs	r6, r1
 800a860:	ea49 0903 	orr.w	r9, r9, r3
 800a864:	fbb6 faf8 	udiv	sl, r6, r8
 800a868:	ea4f 4419 	mov.w	r4, r9, lsr #16
 800a86c:	fb08 661a 	mls	r6, r8, sl, r6
 800a870:	fa1f fc87 	uxth.w	ip, r7
 800a874:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800a878:	fb0a f20c 	mul.w	r2, sl, ip
 800a87c:	429a      	cmp	r2, r3
 800a87e:	fa00 f40e 	lsl.w	r4, r0, lr
 800a882:	d90a      	bls.n	800a89a <__udivmoddi4+0x1be>
 800a884:	19db      	adds	r3, r3, r7
 800a886:	f10a 31ff 	add.w	r1, sl, #4294967295
 800a88a:	f080 8087 	bcs.w	800a99c <__udivmoddi4+0x2c0>
 800a88e:	429a      	cmp	r2, r3
 800a890:	f240 8084 	bls.w	800a99c <__udivmoddi4+0x2c0>
 800a894:	f1aa 0a02 	sub.w	sl, sl, #2
 800a898:	443b      	add	r3, r7
 800a89a:	1a9b      	subs	r3, r3, r2
 800a89c:	fa1f f989 	uxth.w	r9, r9
 800a8a0:	fbb3 f1f8 	udiv	r1, r3, r8
 800a8a4:	fb08 3311 	mls	r3, r8, r1, r3
 800a8a8:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800a8ac:	fb01 f60c 	mul.w	r6, r1, ip
 800a8b0:	429e      	cmp	r6, r3
 800a8b2:	d907      	bls.n	800a8c4 <__udivmoddi4+0x1e8>
 800a8b4:	19db      	adds	r3, r3, r7
 800a8b6:	f101 32ff 	add.w	r2, r1, #4294967295
 800a8ba:	d26b      	bcs.n	800a994 <__udivmoddi4+0x2b8>
 800a8bc:	429e      	cmp	r6, r3
 800a8be:	d969      	bls.n	800a994 <__udivmoddi4+0x2b8>
 800a8c0:	3902      	subs	r1, #2
 800a8c2:	443b      	add	r3, r7
 800a8c4:	1b9b      	subs	r3, r3, r6
 800a8c6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a8ca:	e78e      	b.n	800a7ea <__udivmoddi4+0x10e>
 800a8cc:	f1c1 0e20 	rsb	lr, r1, #32
 800a8d0:	fa22 f40e 	lsr.w	r4, r2, lr
 800a8d4:	408b      	lsls	r3, r1
 800a8d6:	4323      	orrs	r3, r4
 800a8d8:	fa20 f70e 	lsr.w	r7, r0, lr
 800a8dc:	fa06 f401 	lsl.w	r4, r6, r1
 800a8e0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800a8e4:	fa26 f60e 	lsr.w	r6, r6, lr
 800a8e8:	433c      	orrs	r4, r7
 800a8ea:	fbb6 f9fc 	udiv	r9, r6, ip
 800a8ee:	0c27      	lsrs	r7, r4, #16
 800a8f0:	fb0c 6619 	mls	r6, ip, r9, r6
 800a8f4:	fa1f f883 	uxth.w	r8, r3
 800a8f8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800a8fc:	fb09 f708 	mul.w	r7, r9, r8
 800a900:	42b7      	cmp	r7, r6
 800a902:	fa02 f201 	lsl.w	r2, r2, r1
 800a906:	fa00 fa01 	lsl.w	sl, r0, r1
 800a90a:	d908      	bls.n	800a91e <__udivmoddi4+0x242>
 800a90c:	18f6      	adds	r6, r6, r3
 800a90e:	f109 30ff 	add.w	r0, r9, #4294967295
 800a912:	d241      	bcs.n	800a998 <__udivmoddi4+0x2bc>
 800a914:	42b7      	cmp	r7, r6
 800a916:	d93f      	bls.n	800a998 <__udivmoddi4+0x2bc>
 800a918:	f1a9 0902 	sub.w	r9, r9, #2
 800a91c:	441e      	add	r6, r3
 800a91e:	1bf6      	subs	r6, r6, r7
 800a920:	b2a0      	uxth	r0, r4
 800a922:	fbb6 f4fc 	udiv	r4, r6, ip
 800a926:	fb0c 6614 	mls	r6, ip, r4, r6
 800a92a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 800a92e:	fb04 f808 	mul.w	r8, r4, r8
 800a932:	45b8      	cmp	r8, r7
 800a934:	d907      	bls.n	800a946 <__udivmoddi4+0x26a>
 800a936:	18ff      	adds	r7, r7, r3
 800a938:	f104 30ff 	add.w	r0, r4, #4294967295
 800a93c:	d228      	bcs.n	800a990 <__udivmoddi4+0x2b4>
 800a93e:	45b8      	cmp	r8, r7
 800a940:	d926      	bls.n	800a990 <__udivmoddi4+0x2b4>
 800a942:	3c02      	subs	r4, #2
 800a944:	441f      	add	r7, r3
 800a946:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800a94a:	ebc8 0707 	rsb	r7, r8, r7
 800a94e:	fba0 8902 	umull	r8, r9, r0, r2
 800a952:	454f      	cmp	r7, r9
 800a954:	4644      	mov	r4, r8
 800a956:	464e      	mov	r6, r9
 800a958:	d314      	bcc.n	800a984 <__udivmoddi4+0x2a8>
 800a95a:	d029      	beq.n	800a9b0 <__udivmoddi4+0x2d4>
 800a95c:	b365      	cbz	r5, 800a9b8 <__udivmoddi4+0x2dc>
 800a95e:	ebba 0304 	subs.w	r3, sl, r4
 800a962:	eb67 0706 	sbc.w	r7, r7, r6
 800a966:	fa07 fe0e 	lsl.w	lr, r7, lr
 800a96a:	40cb      	lsrs	r3, r1
 800a96c:	40cf      	lsrs	r7, r1
 800a96e:	ea4e 0303 	orr.w	r3, lr, r3
 800a972:	e885 0088 	stmia.w	r5, {r3, r7}
 800a976:	2100      	movs	r1, #0
 800a978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a97c:	4613      	mov	r3, r2
 800a97e:	e6f8      	b.n	800a772 <__udivmoddi4+0x96>
 800a980:	4610      	mov	r0, r2
 800a982:	e6e0      	b.n	800a746 <__udivmoddi4+0x6a>
 800a984:	ebb8 0402 	subs.w	r4, r8, r2
 800a988:	eb69 0603 	sbc.w	r6, r9, r3
 800a98c:	3801      	subs	r0, #1
 800a98e:	e7e5      	b.n	800a95c <__udivmoddi4+0x280>
 800a990:	4604      	mov	r4, r0
 800a992:	e7d8      	b.n	800a946 <__udivmoddi4+0x26a>
 800a994:	4611      	mov	r1, r2
 800a996:	e795      	b.n	800a8c4 <__udivmoddi4+0x1e8>
 800a998:	4681      	mov	r9, r0
 800a99a:	e7c0      	b.n	800a91e <__udivmoddi4+0x242>
 800a99c:	468a      	mov	sl, r1
 800a99e:	e77c      	b.n	800a89a <__udivmoddi4+0x1be>
 800a9a0:	3b02      	subs	r3, #2
 800a9a2:	443c      	add	r4, r7
 800a9a4:	e748      	b.n	800a838 <__udivmoddi4+0x15c>
 800a9a6:	4608      	mov	r0, r1
 800a9a8:	e70a      	b.n	800a7c0 <__udivmoddi4+0xe4>
 800a9aa:	3802      	subs	r0, #2
 800a9ac:	443e      	add	r6, r7
 800a9ae:	e72f      	b.n	800a810 <__udivmoddi4+0x134>
 800a9b0:	45c2      	cmp	sl, r8
 800a9b2:	d3e7      	bcc.n	800a984 <__udivmoddi4+0x2a8>
 800a9b4:	463e      	mov	r6, r7
 800a9b6:	e7d1      	b.n	800a95c <__udivmoddi4+0x280>
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9be:	bf00      	nop

0800a9c0 <__aeabi_idiv0>:
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	74747562 	.word	0x74747562
 800a9c8:	31206e6f 	.word	0x31206e6f
 800a9cc:	65727020 	.word	0x65727020
 800a9d0:	64657373 	.word	0x64657373
 800a9d4:	00000000 	.word	0x00000000
 800a9d8:	74747562 	.word	0x74747562
 800a9dc:	32206e6f 	.word	0x32206e6f
 800a9e0:	65727020 	.word	0x65727020
 800a9e4:	64657373 	.word	0x64657373
 800a9e8:	00000000 	.word	0x00000000
 800a9ec:	41545323 	.word	0x41545323
 800a9f0:	3031252c 	.word	0x3031252c
 800a9f4:	252c756c 	.word	0x252c756c
 800a9f8:	252c6433 	.word	0x252c6433
 800a9fc:	756c3031 	.word	0x756c3031
 800aa00:	00000a24 	.word	0x00000a24
 800aa04:	646e6573 	.word	0x646e6573
 800aa08:	00732520 	.word	0x00732520
 800aa0c:	00007325 	.word	0x00007325
 800aa10:	54554223 	.word	0x54554223
 800aa14:	0a24312c 	.word	0x0a24312c
 800aa18:	00000000 	.word	0x00000000
 800aa1c:	54554223 	.word	0x54554223
 800aa20:	0a24322c 	.word	0x0a24322c
 800aa24:	00000000 	.word	0x00000000
 800aa28:	37257325 	.word	0x37257325
 800aa2c:	25732564 	.word	0x25732564
 800aa30:	73256437 	.word	0x73256437
 800aa34:	24643725 	.word	0x24643725
 800aa38:	0000000a 	.word	0x0000000a
 800aa3c:	0000002c 	.word	0x0000002c
 800aa40:	58535523 	.word	0x58535523
 800aa44:	5523002c 	.word	0x5523002c
 800aa48:	002c5844 	.word	0x002c5844
 800aa4c:	58534423 	.word	0x58534423
 800aa50:	4423002c 	.word	0x4423002c
 800aa54:	002c5844 	.word	0x002c5844
 800aa58:	504f5423 	.word	0x504f5423
 800aa5c:	4223002c 	.word	0x4223002c
 800aa60:	002c544f 	.word	0x002c544f
 800aa64:	58585823 	.word	0x58585823
 800aa68:	4623002c 	.word	0x4623002c
 800aa6c:	002c4c41 	.word	0x002c4c41
 800aa70:	3353494c 	.word	0x3353494c
 800aa74:	535f4844 	.word	0x535f4844
 800aa78:	444f7465 	.word	0x444f7465
 800aa7c:	6f642052 	.word	0x6f642052
 800aa80:	2e2e656e 	.word	0x2e2e656e
 800aa84:	0000002e 	.word	0x0000002e
 800aa88:	3353494c 	.word	0x3353494c
 800aa8c:	535f4844 	.word	0x535f4844
 800aa90:	6f4d7465 	.word	0x6f4d7465
 800aa94:	64206564 	.word	0x64206564
 800aa98:	2e656e6f 	.word	0x2e656e6f
 800aa9c:	00002e2e 	.word	0x00002e2e
 800aaa0:	3353494c 	.word	0x3353494c
 800aaa4:	535f4844 	.word	0x535f4844
 800aaa8:	75467465 	.word	0x75467465
 800aaac:	63536c6c 	.word	0x63536c6c
 800aab0:	20656c61 	.word	0x20656c61
 800aab4:	656e6f64 	.word	0x656e6f64
 800aab8:	002e2e2e 	.word	0x002e2e2e
 800aabc:	3353494c 	.word	0x3353494c
 800aac0:	535f4844 	.word	0x535f4844
 800aac4:	78417465 	.word	0x78417465
 800aac8:	64207369 	.word	0x64207369
 800aacc:	2e656e6f 	.word	0x2e656e6f
 800aad0:	00002e2e 	.word	0x00002e2e
 800aad4:	3353494c 	.word	0x3353494c
 800aad8:	535f4844 	.word	0x535f4844
 800aadc:	6e497465 	.word	0x6e497465
 800aae0:	68543174 	.word	0x68543174
 800aae4:	68737265 	.word	0x68737265
 800aae8:	20646c6f 	.word	0x20646c6f
 800aaec:	656e6f64 	.word	0x656e6f64
 800aaf0:	002e2e2e 	.word	0x002e2e2e
 800aaf4:	3353494c 	.word	0x3353494c
 800aaf8:	535f4844 	.word	0x535f4844
 800aafc:	6e497465 	.word	0x6e497465
 800ab00:	6e6f4374 	.word	0x6e6f4374
 800ab04:	75676966 	.word	0x75676966
 800ab08:	69746172 	.word	0x69746172
 800ab0c:	64206e6f 	.word	0x64206e6f
 800ab10:	2e656e6f 	.word	0x2e656e6f
 800ab14:	00002e2e 	.word	0x00002e2e
 800ab18:	3353494c 	.word	0x3353494c
 800ab1c:	535f4844 	.word	0x535f4844
 800ab20:	6e497465 	.word	0x6e497465
 800ab24:	646f4d74 	.word	0x646f4d74
 800ab28:	6f642065 	.word	0x6f642065
 800ab2c:	2e2e656e 	.word	0x2e2e656e
 800ab30:	0000002e 	.word	0x0000002e
 800ab34:	3353494c 	.word	0x3353494c
 800ab38:	535f4844 	.word	0x535f4844
 800ab3c:	44417465 	.word	0x44417465
 800ab40:	78754143 	.word	0x78754143
 800ab44:	6e6f6420 	.word	0x6e6f6420
 800ab48:	2e2e2e65 	.word	0x2e2e2e65
 800ab4c:	00000000 	.word	0x00000000
 800ab50:	3353494c 	.word	0x3353494c
 800ab54:	535f4844 	.word	0x535f4844
 800ab58:	44427465 	.word	0x44427465
 800ab5c:	6f642055 	.word	0x6f642055
 800ab60:	2e2e656e 	.word	0x2e2e656e
 800ab64:	0000002e 	.word	0x0000002e
 800ab68:	3353494c 	.word	0x3353494c
 800ab6c:	535f4844 	.word	0x535f4844
 800ab70:	65547465 	.word	0x65547465
 800ab74:	7265706d 	.word	0x7265706d
 800ab78:	72757461 	.word	0x72757461
 800ab7c:	6f642065 	.word	0x6f642065
 800ab80:	2e2e656e 	.word	0x2e2e656e
 800ab84:	0000002e 	.word	0x0000002e
 800ab88:	55424544 	.word	0x55424544
 800ab8c:	32492b47 	.word	0x32492b47
 800ab90:	41552b43 	.word	0x41552b43
 800ab94:	502b5452 	.word	0x502b5452
 800ab98:	4c2b4d57 	.word	0x4c2b4d57
 800ab9c:	422b4445 	.word	0x422b4445
 800aba0:	4f545455 	.word	0x4f545455
 800aba4:	6e69204e 	.word	0x6e69204e
 800aba8:	64207469 	.word	0x64207469
 800abac:	2e656e6f 	.word	0x2e656e6f
 800abb0:	00002e2e 	.word	0x00002e2e
 800abb4:	534d454d 	.word	0x534d454d
 800abb8:	696e6920 	.word	0x696e6920
 800abbc:	6f642074 	.word	0x6f642074
 800abc0:	2e2e656e 	.word	0x2e2e656e
 800abc4:	0000002e 	.word	0x0000002e
 800abc8:	6f727245 	.word	0x6f727245
 800abcc:	454d2072 	.word	0x454d2072
 800abd0:	6920534d 	.word	0x6920534d
 800abd4:	2c74696e 	.word	0x2c74696e
 800abd8:	74657220 	.word	0x74657220
 800abdc:	2e2e7972 	.word	0x2e2e7972
 800abe0:	0000002e 	.word	0x0000002e
 800abe4:	534d454d 	.word	0x534d454d
 800abe8:	6e6f6320 	.word	0x6e6f6320
 800abec:	20676966 	.word	0x20676966
 800abf0:	656e6f64 	.word	0x656e6f64
 800abf4:	002e2e2e 	.word	0x002e2e2e
 800abf8:	6f727245 	.word	0x6f727245
 800abfc:	454d2072 	.word	0x454d2072
 800ac00:	6320534d 	.word	0x6320534d
 800ac04:	69666e6f 	.word	0x69666e6f
 800ac08:	72202c67 	.word	0x72202c67
 800ac0c:	79727465 	.word	0x79727465
 800ac10:	002e2e2e 	.word	0x002e2e2e
 800ac14:	65636572 	.word	0x65636572
 800ac18:	64657669 	.word	0x64657669
 800ac1c:	0a732520 	.word	0x0a732520
 800ac20:	00000000 	.word	0x00000000
 800ac24:	51455223 	.word	0x51455223
 800ac28:	0000002c 	.word	0x0000002c
 800ac2c:	444e4523 	.word	0x444e4523
 800ac30:	0000002c 	.word	0x0000002c
 800ac34:	4e4f4323 	.word	0x4e4f4323
 800ac38:	0000002c 	.word	0x0000002c
 800ac3c:	52455323 	.word	0x52455323
 800ac40:	0000662c 	.word	0x0000662c
 800ac44:	52455323 	.word	0x52455323
 800ac48:	00006e2c 	.word	0x00006e2c
 800ac4c:	41545323 	.word	0x41545323
 800ac50:	0000002c 	.word	0x0000002c
 800ac54:	47564123 	.word	0x47564123
 800ac58:	0000612c 	.word	0x0000612c
 800ac5c:	47564123 	.word	0x47564123
 800ac60:	0000702c 	.word	0x0000702c
 800ac64:	00000000 	.word	0x00000000

0800ac68 <atanlo>:
 800ac68:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 800ac78:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0800ac88 <atanhi>:
 800ac88:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 800ac98:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
 800aca8:	74727173 00000000 0000000a              sqrt........

0800acb4 <zeroes.7258>:
 800acb4:	30303030 30303030 30303030 30303030     0000000000000000
 800acc4:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800acd4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800ace4:	00000000 33323130 37363534 62613938     ....0123456789ab
 800acf4:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800ad04:	00000030                                0...

0800ad08 <blanks.7257>:
 800ad08:	20202020 20202020 20202020 20202020                     

0800ad18 <zeroes.7273>:
 800ad18:	30303030 30303030 30303030 30303030     0000000000000000

0800ad28 <blanks.7272>:
 800ad28:	20202020 20202020 20202020 20202020                     
 800ad38:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800ad48:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0800ad58 <__mprec_tens>:
 800ad58:	00000000 3ff00000 00000000 40240000     .......?......$@
 800ad68:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800ad78:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800ad88:	00000000 412e8480 00000000 416312d0     .......A......cA
 800ad98:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800ada8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800adb8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800adc8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800add8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800ade8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800adf8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800ae08:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800ae18:	79d99db4 44ea7843                       ...yCx.D

0800ae20 <__mprec_bigtens>:
 800ae20:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800ae30:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800ae40:	7f73bf3c 75154fdd                       <.s..O.u

0800ae48 <p05.6087>:
 800ae48:	00000005 00000019 0000007d              ........}...

0800ae54 <_ctype_>:
 800ae54:	20202000 20202020 28282020 20282828     .         ((((( 
 800ae64:	20202020 20202020 20202020 20202020                     
 800ae74:	10108820 10101010 10101010 10101010      ...............
 800ae84:	04040410 04040404 10040404 10101010     ................
 800ae94:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800aea4:	01010101 01010101 01010101 10101010     ................
 800aeb4:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800aec4:	02020202 02020202 02020202 10101010     ................
 800aed4:	00000020 00000000 00000000 00000000      ...............
	...
