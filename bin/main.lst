
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	1d 0b 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 e1 04 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00abc0 	.word	0x0c00abc0
 800024c:	20000000 	.word	0x20000000
 8000250:	000009e8 	.word	0x000009e8
 8000254:	0c00b5a8 	.word	0x0c00b5a8
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00abc0 	.word	0x0c00abc0
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00abc0 	.word	0x0c00abc0
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200009e8 	.word	0x200009e8
 800027c:	000000e8 	.word	0x000000e8
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000294:	08002451 	.word	0x08002451
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08003fd5 	.word	0x08003fd5
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08002175 	.word	0x08002175

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	db0b      	blt.n	80002de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c6:	4909      	ldr	r1, [pc, #36]	; (80002ec <__NVIC_EnableIRQ+0x38>)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	095b      	lsrs	r3, r3, #5
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	f002 021f 	and.w	r2, r2, #31
 80002d4:	2001      	movs	r0, #1
 80002d6:	fa00 f202 	lsl.w	r2, r0, r2
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	490d      	ldr	r1, [pc, #52]	; (800033c <__NVIC_SetPriority+0x4c>)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	0092      	lsls	r2, r2, #2
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	4909      	ldr	r1, [pc, #36]	; (8000340 <__NVIC_SetPriority+0x50>)
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f003 030f 	and.w	r3, r3, #15
 8000322:	3b04      	subs	r3, #4
 8000324:	683a      	ldr	r2, [r7, #0]
 8000326:	b2d2      	uxtb	r2, r2
 8000328:	0092      	lsls	r2, r2, #2
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
  }
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
 8000350:	4613      	mov	r3, r2
 8000352:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000354:	78f8      	ldrb	r0, [r7, #3]
 8000356:	78fb      	ldrb	r3, [r7, #3]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	3306      	adds	r3, #6
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	4413      	add	r3, r2
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000366:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000368:	431a      	orrs	r2, r3
 800036a:	6879      	ldr	r1, [r7, #4]
 800036c:	1d83      	adds	r3, r0, #6
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	440b      	add	r3, r1
 8000372:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800038c:	b2db      	uxtb	r3, r3
 800038e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000392:	b2db      	uxtb	r3, r3
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	431a      	orrs	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop

080003c8 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80003d6:	f003 0308 	and.w	r3, r3, #8
 80003da:	2b00      	cmp	r3, #0
 80003dc:	bf14      	ite	ne
 80003de:	2301      	movne	r3, #1
 80003e0:	2300      	moveq	r3, #0
 80003e2:	b2db      	uxtb	r3, r3
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003fc:	f023 030f 	bic.w	r3, r3, #15
 8000400:	f043 0202 	orr.w	r2, r3, #2
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	460b      	mov	r3, r1
 800041e:	70fb      	strb	r3, [r7, #3]
 8000420:	4613      	mov	r3, r2
 8000422:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
 8000424:	78f8      	ldrb	r0, [r7, #3]
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	3306      	adds	r3, #6
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	4413      	add	r3, r2
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	f023 0250 	bic.w	r2, r3, #80	; 0x50
 8000436:	6879      	ldr	r1, [r7, #4]
 8000438:	1d83      	adds	r3, r0, #6
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	440b      	add	r3, r1
 800043e:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000440:	78ba      	ldrb	r2, [r7, #2]
 8000442:	78fb      	ldrb	r3, [r7, #3]
 8000444:	4619      	mov	r1, r3
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f7ff ff7c 	bl	8000344 <XMC_USIC_CH_SetInputSource>
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <_init_uart0_ch0>:
    .stop_bits = 1U,
    .baudrate = 115200U
};
/****************************************************************** FUNCTIONS */
void _init_uart0_ch0()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
    /* USIC channels initialization */
    XMC_UART_CH_Init (XMC_UART0_CH0, &uart_config);
 8000458:	491c      	ldr	r1, [pc, #112]	; (80004cc <_init_uart0_ch0+0x78>)
 800045a:	481d      	ldr	r0, [pc, #116]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800045c:	f002 fa7a 	bl	8002954 <XMC_UART_CH_Init>

    XMC_UART_CH_SetInputSource (XMC_UART0_CH0, XMC_UART_CH_INPUT_RXD,
 8000460:	2201      	movs	r2, #1
 8000462:	2100      	movs	r1, #0
 8000464:	481a      	ldr	r0, [pc, #104]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000466:	f7ff ffd5 	bl	8000414 <XMC_UART_CH_SetInputSource>
    /* FIFOs initialization for both channels:
     *  8 entries for TxFIFO from point 0, LIMIT=1
     *  8 entries for RxFIFO from point 8, LIMIT=7 (SRBI is set if all 8*data have
     *                                              been received)
     *  */
    XMC_USIC_CH_TXFIFO_Configure (XMC_UART0_CH0, 0, XMC_USIC_CH_FIFO_SIZE_8WORDS, TX_FIFO_INITIAL_LIMIT);
 800046a:	2300      	movs	r3, #0
 800046c:	2203      	movs	r2, #3
 800046e:	2100      	movs	r1, #0
 8000470:	4817      	ldr	r0, [pc, #92]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000472:	f002 fd99 	bl	8002fa8 <XMC_USIC_CH_TXFIFO_Configure>
    XMC_USIC_CH_RXFIFO_Configure (XMC_UART0_CH0, 8, XMC_USIC_CH_FIFO_SIZE_8WORDS, RX_FIFO_INITIAL_LIMIT);
 8000476:	2300      	movs	r3, #0
 8000478:	2203      	movs	r2, #3
 800047a:	2108      	movs	r1, #8
 800047c:	4814      	ldr	r0, [pc, #80]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800047e:	f002 fdbb 	bl	8002ff8 <XMC_USIC_CH_RXFIFO_Configure>

    /* Enabling events for TX FIFO and RX FIFO */
    XMC_USIC_CH_RXFIFO_EnableEvent (XMC_UART0_CH0,
 8000482:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8000486:	4812      	ldr	r0, [pc, #72]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000488:	f7ff ff8a 	bl	80003a0 <XMC_USIC_CH_RXFIFO_EnableEvent>
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE);

    /* Connecting the previously enabled events to a Service Request line number */
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	2110      	movs	r1, #16
 8000490:	480f      	ldr	r0, [pc, #60]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000492:	f002 fddb 	bl	800304c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2113      	movs	r1, #19
 800049a:	480d      	ldr	r0, [pc, #52]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800049c:	f002 fdd6 	bl	800304c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>

    /* Start USIC operation as UART */
    XMC_UART_CH_Start (XMC_UART0_CH0);
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <_init_uart0_ch0+0x7c>)
 80004a2:	f7ff ffa5 	bl	80003f0 <XMC_UART_CH_Start>

    /*Initialization of the necessary ports*/
    XMC_GPIO_Init (UART_TX, &uart_tx);
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <_init_uart0_ch0+0x80>)
 80004a8:	2105      	movs	r1, #5
 80004aa:	480b      	ldr	r0, [pc, #44]	; (80004d8 <_init_uart0_ch0+0x84>)
 80004ac:	f002 f992 	bl	80027d4 <XMC_GPIO_Init>
    XMC_GPIO_Init (UART_RX, &uart_rx);
 80004b0:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <_init_uart0_ch0+0x88>)
 80004b2:	2104      	movs	r1, #4
 80004b4:	4808      	ldr	r0, [pc, #32]	; (80004d8 <_init_uart0_ch0+0x84>)
 80004b6:	f002 f98d 	bl	80027d4 <XMC_GPIO_Init>

    /* Configuring priority and enabling NVIC IRQ for the defined service request
    line number */
    NVIC_SetPriority (USIC0_0_IRQn, 63U);
 80004ba:	213f      	movs	r1, #63	; 0x3f
 80004bc:	2054      	movs	r0, #84	; 0x54
 80004be:	f7ff ff17 	bl	80002f0 <__NVIC_SetPriority>
    NVIC_EnableIRQ (USIC0_0_IRQn);
 80004c2:	2054      	movs	r0, #84	; 0x54
 80004c4:	f7ff fef6 	bl	80002b4 <__NVIC_EnableIRQ>

    return;
 80004c8:	bf00      	nop
}
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000000c 	.word	0x2000000c
 80004d0:	40030000 	.word	0x40030000
 80004d4:	20000000 	.word	0x20000000
 80004d8:	48028100 	.word	0x48028100
 80004dc:	20000a2c 	.word	0x20000a2c

080004e0 <USIC0_0_IRQHandler>:

void USIC0_0_IRQHandler (void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	71fb      	strb	r3, [r7, #7]

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 80004ea:	e01f      	b.n	800052c <USIC0_0_IRQHandler+0x4c>
        rx_tmp = XMC_UART_CH_GetReceivedData (XMC_UART0_CH0);
 80004ec:	4816      	ldr	r0, [pc, #88]	; (8000548 <USIC0_0_IRQHandler+0x68>)
 80004ee:	f002 faaf 	bl	8002a50 <XMC_UART_CH_GetReceivedData>
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]

        if ( (rx_tmp != STRING_CR) && (!str_available)) {
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b0d      	cmp	r3, #13
 80004fa:	d011      	beq.n	8000520 <USIC0_0_IRQHandler+0x40>
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <USIC0_0_IRQHandler+0x6c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	f083 0301 	eor.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d00a      	beq.n	8000520 <USIC0_0_IRQHandler+0x40>
            rx_buffer[rx_ctr++] = rx_tmp;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	b2d1      	uxtb	r1, r2
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 8000514:	7011      	strb	r1, [r2, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <USIC0_0_IRQHandler+0x74>)
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	5453      	strb	r3, [r2, r1]
 800051e:	e005      	b.n	800052c <USIC0_0_IRQHandler+0x4c>
        } else {
            rx_ctr = 0;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
            str_available = true;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <USIC0_0_IRQHandler+0x6c>)
 8000528:	2201      	movs	r2, #1
 800052a:	701a      	strb	r2, [r3, #0]
{
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 800052c:	4806      	ldr	r0, [pc, #24]	; (8000548 <USIC0_0_IRQHandler+0x68>)
 800052e:	f7ff ff4b 	bl	80003c8 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8000532:	4603      	mov	r3, r0
 8000534:	f083 0301 	eor.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1d6      	bne.n	80004ec <USIC0_0_IRQHandler+0xc>
        } else {
            rx_ctr = 0;
            str_available = true;
        }
    }
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40030000 	.word	0x40030000
 800054c:	200009e8 	.word	0x200009e8
 8000550:	20000a38 	.word	0x20000a38
 8000554:	200009ec 	.word	0x200009ec

08000558 <_uart_printf>:

    return 0;
}

uint8_t _uart_printf (char *fmt, ...)
{
 8000558:	b40f      	push	{r0, r1, r2, r3}
 800055a:	b580      	push	{r7, lr}
 800055c:	b0c2      	sub	sp, #264	; 0x108
 800055e:	af00      	add	r7, sp, #0
    va_list arg_ptr;
    char buffer[BUFFER_SIZE_PRINTF];

    if (fmt == NULL)  {
 8000560:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000564:	2b00      	cmp	r3, #0
 8000566:	d101      	bne.n	800056c <_uart_printf+0x14>
        return ERR_OUT_OF_MEMORY;
 8000568:	2364      	movs	r3, #100	; 0x64
 800056a:	e010      	b.n	800058e <_uart_printf+0x36>
    }

    va_start (arg_ptr, fmt);
 800056c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    vsprintf (buffer, fmt, arg_ptr);
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800057a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800057e:	4618      	mov	r0, r3
 8000580:	f006 fee6 	bl	8007350 <vsprintf>
    va_end (arg_ptr);

    _uart_send_string (buffer);
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f80a 	bl	80005a0 <_uart_send_string>
    return 0;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000594:	46bd      	mov	sp, r7
 8000596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800059a:	b004      	add	sp, #16
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <_uart_send_string>:

uint8_t _uart_send_string (char *str)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <_uart_send_string+0x12>
        return ERR_OUT_OF_MEMORY;
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	e01d      	b.n	80005ee <_uart_send_string+0x4e>
    }

    for (int i = 0; i < strlen (str); i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e012      	b.n	80005de <_uart_send_string+0x3e>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 80005b8:	bf00      	nop
 80005ba:	480f      	ldr	r0, [pc, #60]	; (80005f8 <_uart_send_string+0x58>)
 80005bc:	f7ff fee0 	bl	8000380 <XMC_USIC_CH_GetTransmitBufferStatus>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b80      	cmp	r3, #128	; 0x80
 80005c4:	d0f9      	beq.n	80005ba <_uart_send_string+0x1a>
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	4619      	mov	r1, r3
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <_uart_send_string+0x58>)
 80005d4:	f002 fa16 	bl	8002a04 <XMC_UART_CH_Transmit>
{
    if (str == NULL) {
        return ERR_OUT_OF_MEMORY;
    }

    for (int i = 0; i < strlen (str); i++) {
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f003 fe8e 	bl	8004300 <strlen>
 80005e4:	4602      	mov	r2, r0
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8e5      	bhi.n	80005b8 <_uart_send_string+0x18>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
    }
    return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40030000 	.word	0x40030000

080005fc <_uart_get_string>:

uint8_t _uart_get_string (char *str)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <_uart_get_string+0x12>
        return ERR_OUT_OF_MEMORY;
 800060a:	2364      	movs	r3, #100	; 0x64
 800060c:	e019      	b.n	8000642 <_uart_get_string+0x46>
    }

    while (!str_available);
 800060e:	bf00      	nop
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <_uart_get_string+0x50>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f083 0301 	eor.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f8      	bne.n	8000610 <_uart_get_string+0x14>
    memcpy (str, &rx_buffer, strlen (rx_buffer));
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <_uart_get_string+0x54>)
 8000620:	f003 fe6e 	bl	8004300 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4909      	ldr	r1, [pc, #36]	; (8000650 <_uart_get_string+0x54>)
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f003 fcfa 	bl	8004024 <memcpy>
    memset (&rx_buffer, 0x00, BUFFER_SIZE_RX);
 8000630:	2240      	movs	r2, #64	; 0x40
 8000632:	2100      	movs	r1, #0
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <_uart_get_string+0x54>)
 8000636:	f003 fd8f 	bl	8004158 <memset>

    str_available = false;
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <_uart_get_string+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
    return 0;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200009e8 	.word	0x200009e8
 8000650:	200009ec 	.word	0x200009ec

08000654 <initServoPWM>:
 * @param	none
 * @return	none
 *
 */
void initServoPWM()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    initServoPWMXMC();
 8000658:	f000 f8a0 	bl	800079c <initServoPWMXMC>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}

08000660 <pwm>:
 *			1 for lower servo <br>
 * @return	none
 *
 */
void pwm(double dutycycle, uint8_t out)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800066a:	4613      	mov	r3, r2
 800066c:	71fb      	strb	r3, [r7, #7]
    if (out == 0)
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d105      	bne.n	8000680 <pwm+0x20>
    {
        pwmXMC(dutycycle, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800067a:	f000 f90d 	bl	8000898 <pwmXMC>
    }
    else
    {
        pwmXMC(dutycycle, 1);
    }
}
 800067e:	e004      	b.n	800068a <pwm+0x2a>
    {
        pwmXMC(dutycycle, 0);
    }
    else
    {
        pwmXMC(dutycycle, 1);
 8000680:	2201      	movs	r2, #1
 8000682:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000686:	f000 f907 	bl	8000898 <pwmXMC>
    }
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop

08000694 <P1_1_set_mode>:

__STATIC_INLINE uint32_t P1_0_read(void){
    return(PORT1->IN & 0x00000001UL);
}

__STATIC_INLINE void P1_1_set_mode(uint8_t mode){
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
    PORT1->IOCR0 &= ~0x0000f800UL;
 800069e:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <P1_1_set_mode+0x30>)
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <P1_1_set_mode+0x30>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80006a8:	6113      	str	r3, [r2, #16]
    PORT1->IOCR0 |= mode << 8;
 80006aa:	4906      	ldr	r1, [pc, #24]	; (80006c4 <P1_1_set_mode+0x30>)
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <P1_1_set_mode+0x30>)
 80006ae:	691b      	ldr	r3, [r3, #16]
 80006b0:	79fa      	ldrb	r2, [r7, #7]
 80006b2:	0212      	lsls	r2, r2, #8
 80006b4:	4313      	orrs	r3, r2
 80006b6:	610b      	str	r3, [r1, #16]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	48028100 	.word	0x48028100

080006c8 <P1_1_set_driver_strength>:

__STATIC_INLINE void P1_1_set_driver_strength(uint8_t strength){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
    PORT1->PDR0 &= ~0x00000070UL;
 80006d2:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <P1_1_set_driver_strength+0x30>)
 80006d4:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <P1_1_set_driver_strength+0x30>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006dc:	6413      	str	r3, [r2, #64]	; 0x40
    PORT1->PDR0 |= strength << 4;
 80006de:	4906      	ldr	r1, [pc, #24]	; (80006f8 <P1_1_set_driver_strength+0x30>)
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <P1_1_set_driver_strength+0x30>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	79fa      	ldrb	r2, [r7, #7]
 80006e6:	0112      	lsls	r2, r2, #4
 80006e8:	4313      	orrs	r3, r2
 80006ea:	640b      	str	r3, [r1, #64]	; 0x40
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	48028100 	.word	0x48028100

080006fc <P1_1_reset>:

__STATIC_INLINE void P1_1_set(void){
    PORT1->OMR = 0x00000002UL;
}

__STATIC_INLINE void P1_1_reset(void){
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
    PORT1->OMR = 0x00020000UL;
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <P1_1_reset+0x18>)
 8000702:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000706:	605a      	str	r2, [r3, #4]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	48028100 	.word	0x48028100

08000718 <P1_2_set_mode>:

__STATIC_INLINE uint32_t P1_1_read(void){
    return(PORT1->IN & 0x00000002UL);
}

__STATIC_INLINE void P1_2_set_mode(uint8_t mode){
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
    PORT1->IOCR0 &= ~0x00f80000UL;
 8000722:	4a09      	ldr	r2, [pc, #36]	; (8000748 <P1_2_set_mode+0x30>)
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <P1_2_set_mode+0x30>)
 8000726:	691b      	ldr	r3, [r3, #16]
 8000728:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 800072c:	6113      	str	r3, [r2, #16]
    PORT1->IOCR0 |= mode << 16;
 800072e:	4906      	ldr	r1, [pc, #24]	; (8000748 <P1_2_set_mode+0x30>)
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <P1_2_set_mode+0x30>)
 8000732:	691b      	ldr	r3, [r3, #16]
 8000734:	79fa      	ldrb	r2, [r7, #7]
 8000736:	0412      	lsls	r2, r2, #16
 8000738:	4313      	orrs	r3, r2
 800073a:	610b      	str	r3, [r1, #16]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	48028100 	.word	0x48028100

0800074c <P1_2_set_driver_strength>:

__STATIC_INLINE void P1_2_set_driver_strength(uint8_t strength){
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
    PORT1->PDR0 &= ~0x00000700UL;
 8000756:	4a09      	ldr	r2, [pc, #36]	; (800077c <P1_2_set_driver_strength+0x30>)
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <P1_2_set_driver_strength+0x30>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000760:	6413      	str	r3, [r2, #64]	; 0x40
    PORT1->PDR0 |= strength << 8;
 8000762:	4906      	ldr	r1, [pc, #24]	; (800077c <P1_2_set_driver_strength+0x30>)
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <P1_2_set_driver_strength+0x30>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	0212      	lsls	r2, r2, #8
 800076c:	4313      	orrs	r3, r2
 800076e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	48028100 	.word	0x48028100

08000780 <P1_2_reset>:

__STATIC_INLINE void P1_2_set(void){
    PORT1->OMR = 0x00000004UL;
}

__STATIC_INLINE void P1_2_reset(void){
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
    PORT1->OMR = 0x00040000UL;
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <P1_2_reset+0x18>)
 8000786:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800078a:	605a      	str	r2, [r3, #4]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	48028100 	.word	0x48028100

0800079c <initServoPWMXMC>:
 * @param	none
 * @return	none
 *
 */
void initServoPWMXMC()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    // onboard alternate function 3 at CCU40 slice 1 = CCU40.OUT1 = CCU40.CC41
    // onboard alternate function 3 at CCU40 slice 2 = CCU40.OUT2 = CCU40.CC42

    P1_1_set_mode(OUTPUT_PP_AF3);
 80007a0:	2098      	movs	r0, #152	; 0x98
 80007a2:	f7ff ff77 	bl	8000694 <P1_1_set_mode>
    P1_1_set_driver_strength(STRONG);
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff ff8e 	bl	80006c8 <P1_1_set_driver_strength>
    P1_1_reset();
 80007ac:	f7ff ffa6 	bl	80006fc <P1_1_reset>

    P1_2_set_mode(OUTPUT_PP_AF3);
 80007b0:	2098      	movs	r0, #152	; 0x98
 80007b2:	f7ff ffb1 	bl	8000718 <P1_2_set_mode>
    P1_2_set_driver_strength(STRONG);
 80007b6:	2002      	movs	r0, #2
 80007b8:	f7ff ffc8 	bl	800074c <P1_2_set_driver_strength>
    P1_2_reset();
 80007bc:	f7ff ffe0 	bl	8000780 <P1_2_reset>

    // setup CC40 unit with shadow transfer

    SCU_RESET->PRSET0 |= (1 << SCU_RESET_PRSET0_CCU40RS_Pos);		// peripheral 0 reset set - CCU40RS - CCU40 timer
 80007c0:	4a2e      	ldr	r2, [pc, #184]	; (800087c <initServoPWMXMC+0xe0>)
 80007c2:	4b2e      	ldr	r3, [pc, #184]	; (800087c <initServoPWMXMC+0xe0>)
 80007c4:	691b      	ldr	r3, [r3, #16]
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6113      	str	r3, [r2, #16]
    SCU_RESET->PRCLR0 |= (1 << SCU_RESET_PRCLR0_CCU40RS_Pos);		// peripheral 0 reset clear - CCU40RS - CCU40 timer
 80007cc:	4a2b      	ldr	r2, [pc, #172]	; (800087c <initServoPWMXMC+0xe0>)
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <initServoPWMXMC+0xe0>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	6153      	str	r3, [r2, #20]
    SCU_CLK->CLKSET = (1 << SCU_CLK_CLKSET_CCUCEN_Pos); 			// clock enable register CCUCEN - CCU clock enabled
 80007d8:	4b29      	ldr	r3, [pc, #164]	; (8000880 <initServoPWMXMC+0xe4>)
 80007da:	2210      	movs	r2, #16
 80007dc:	605a      	str	r2, [r3, #4]
    CCU40->GIDLC |= (1 << CCU4_GIDLC_SPRB_Pos); 					// global idle clear - SPRB - prescaler run bit set
 80007de:	4a29      	ldr	r2, [pc, #164]	; (8000884 <initServoPWMXMC+0xe8>)
 80007e0:	4b28      	ldr	r3, [pc, #160]	; (8000884 <initServoPWMXMC+0xe8>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e8:	60d3      	str	r3, [r2, #12]

    CCU40_CC41->PSC = PRESCALER;
 80007ea:	4b27      	ldr	r3, [pc, #156]	; (8000888 <initServoPWMXMC+0xec>)
 80007ec:	2208      	movs	r2, #8
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
    CCU40_CC42->PSC = PRESCALER; 									// prescaler control - 0 - CCU40.OUT2
 80007f0:	4b26      	ldr	r3, [pc, #152]	; (800088c <initServoPWMXMC+0xf0>)
 80007f2:	2208      	movs	r2, #8
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24

    CCU40_CC41->TC |= (1 << CCU4_CC4_TC_CLST_Pos);
 80007f6:	4a24      	ldr	r2, [pc, #144]	; (8000888 <initServoPWMXMC+0xec>)
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <initServoPWMXMC+0xec>)
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6153      	str	r3, [r2, #20]
    CCU40_CC42->TC |= (1 << CCU4_CC4_TC_CLST_Pos); 					// slice timer control - CLST - shadow transfer on clear - CCU40.OUT2
 8000802:	4a22      	ldr	r2, [pc, #136]	; (800088c <initServoPWMXMC+0xf0>)
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <initServoPWMXMC+0xf0>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6153      	str	r3, [r2, #20]

    CCU40->GIDLC |= (1 << CCU4_GIDLC_CS1I_Pos);
 800080e:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <initServoPWMXMC+0xe8>)
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <initServoPWMXMC+0xe8>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	60d3      	str	r3, [r2, #12]
    CCU40->GIDLC |= (1 << CCU4_GIDLC_CS2I_Pos); 					// global idle clear - C2SI - CC43 idle mode clear - CCU40.OUT2
 800081a:	4a1a      	ldr	r2, [pc, #104]	; (8000884 <initServoPWMXMC+0xe8>)
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <initServoPWMXMC+0xe8>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	60d3      	str	r3, [r2, #12]

    SCU_GENERAL->CCUCON |= (1 << SCU_GENERAL_CCUCON_GSC40_Pos);		// CCU control register - GSC40 - global start control CCU40
 8000826:	4a1a      	ldr	r2, [pc, #104]	; (8000890 <initServoPWMXMC+0xf4>)
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <initServoPWMXMC+0xf4>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c

    CCU40_CC41->PRS = COUNTER;
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <initServoPWMXMC+0xec>)
 8000834:	f242 429f 	movw	r2, #9375	; 0x249f
 8000838:	635a      	str	r2, [r3, #52]	; 0x34
    CCU40_CC42->PRS = COUNTER; 										// period register - timer shadow period value - CCU40.OUT2
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <initServoPWMXMC+0xf0>)
 800083c:	f242 429f 	movw	r2, #9375	; 0x249f
 8000840:	635a      	str	r2, [r3, #52]	; 0x34

    CCU40_CC41->TCSET = 1;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <initServoPWMXMC+0xec>)
 8000844:	2201      	movs	r2, #1
 8000846:	60da      	str	r2, [r3, #12]
    CCU40_CC42->TCSET = 1;											// slice timer run set - CCU40.OUT2
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <initServoPWMXMC+0xf0>)
 800084a:	2201      	movs	r2, #1
 800084c:	60da      	str	r2, [r3, #12]

    CCU40_CC41->CRS = COUNTER;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <initServoPWMXMC+0xec>)
 8000850:	f242 429f 	movw	r2, #9375	; 0x249f
 8000854:	63da      	str	r2, [r3, #60]	; 0x3c
    CCU40_CC42->CRS = COUNTER;										// compare register - timer shadow compare value - CCU40.OUT2
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <initServoPWMXMC+0xf0>)
 8000858:	f242 429f 	movw	r2, #9375	; 0x249f
 800085c:	63da      	str	r2, [r3, #60]	; 0x3c

    CCU40->GCSS |= (1 << CCU4_GCSS_S1SE_Pos);
 800085e:	4a09      	ldr	r2, [pc, #36]	; (8000884 <initServoPWMXMC+0xe8>)
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <initServoPWMXMC+0xe8>)
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	f043 0310 	orr.w	r3, r3, #16
 8000868:	6113      	str	r3, [r2, #16]
    CCU40->GCSS |= (1 << CCU4_GCSS_S2SE_Pos); 						// global channel set - S3SE slice 2 shadow transfer set enable
 800086a:	4a06      	ldr	r2, [pc, #24]	; (8000884 <initServoPWMXMC+0xe8>)
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <initServoPWMXMC+0xe8>)
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000874:	6113      	str	r3, [r2, #16]
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	50004400 	.word	0x50004400
 8000880:	50004600 	.word	0x50004600
 8000884:	4000c000 	.word	0x4000c000
 8000888:	4000c200 	.word	0x4000c200
 800088c:	4000c300 	.word	0x4000c300
 8000890:	50004000 	.word	0x50004000
 8000894:	00000000 	.word	0x00000000

08000898 <pwmXMC>:
 * @return	1 if wrong PWM dutycycle given <br>
			0 if correct PWM dutycycle given <br>
 *
 */
uint8_t pwmXMC(double dutycycle, uint8_t out)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80008a2:	4613      	mov	r3, r2
 80008a4:	71fb      	strb	r3, [r7, #7]
    double dcCalc = 0;
 80008a6:	f04f 0300 	mov.w	r3, #0
 80008aa:	f04f 0400 	mov.w	r4, #0
 80008ae:	e9c7 3406 	strd	r3, r4, [r7, #24]
    uint32_t intdcCalc = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]

    if (dutycycle < 0 || dutycycle > 100)
 80008b6:	f04f 0200 	mov.w	r2, #0
 80008ba:	f04f 0300 	mov.w	r3, #0
 80008be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80008c2:	f003 fafb 	bl	8003ebc <__aeabi_dcmplt>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d109      	bne.n	80008e0 <pwmXMC+0x48>
 80008cc:	f04f 0200 	mov.w	r2, #0
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <pwmXMC+0xe0>)
 80008d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80008d6:	f003 fb0f 	bl	8003ef8 <__aeabi_dcmpgt>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <pwmXMC+0x4c>
    {
        return 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	e03a      	b.n	800095a <pwmXMC+0xc2>
    }

    dcCalc = COUNTER - (COUNTER * dutycycle * 0.01);
 80008e4:	a320      	add	r3, pc, #128	; (adr r3, 8000968 <pwmXMC+0xd0>)
 80008e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80008ee:	f003 f873 	bl	80039d8 <__aeabi_dmul>
 80008f2:	4603      	mov	r3, r0
 80008f4:	460c      	mov	r4, r1
 80008f6:	4618      	mov	r0, r3
 80008f8:	4621      	mov	r1, r4
 80008fa:	a31d      	add	r3, pc, #116	; (adr r3, 8000970 <pwmXMC+0xd8>)
 80008fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000900:	f003 f86a 	bl	80039d8 <__aeabi_dmul>
 8000904:	4603      	mov	r3, r0
 8000906:	460c      	mov	r4, r1
 8000908:	461a      	mov	r2, r3
 800090a:	4623      	mov	r3, r4
 800090c:	a116      	add	r1, pc, #88	; (adr r1, 8000968 <pwmXMC+0xd0>)
 800090e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000912:	f002 fead 	bl	8003670 <__aeabi_dsub>
 8000916:	4603      	mov	r3, r0
 8000918:	460c      	mov	r4, r1
 800091a:	e9c7 3406 	strd	r3, r4, [r7, #24]
    intdcCalc = (uint32_t)dcCalc;
 800091e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000922:	f003 fb31 	bl	8003f88 <__aeabi_d2uiz>
 8000926:	4603      	mov	r3, r0
 8000928:	617b      	str	r3, [r7, #20]

    if (out == 0)
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d10a      	bne.n	8000946 <pwmXMC+0xae>
    {
        CCU40_CC42->CRS = intdcCalc;									// compare register - timer shadow compare value - CCU40.OUT2
 8000930:	4a12      	ldr	r2, [pc, #72]	; (800097c <pwmXMC+0xe4>)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	63d3      	str	r3, [r2, #60]	; 0x3c
        CCU40->GCSS |= (1<<CCU4_GCSS_S2SE_Pos); 						// global channel set - S2SE slice 2 shadow transfer set enable
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <pwmXMC+0xe8>)
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <pwmXMC+0xe8>)
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000940:	6113      	str	r3, [r2, #16]
        return 0;
 8000942:	2300      	movs	r3, #0
 8000944:	e009      	b.n	800095a <pwmXMC+0xc2>
    }
    else
    {
        CCU40_CC41->CRS = intdcCalc;									// compare register - timer shadow compare value - CCU40.OUT1
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <pwmXMC+0xec>)
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	63d3      	str	r3, [r2, #60]	; 0x3c
        CCU40->GCSS |= (1<<CCU4_GCSS_S1SE_Pos);							// global channel set - S1SE slice 1 shadow transfer set enable
 800094c:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <pwmXMC+0xe8>)
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <pwmXMC+0xe8>)
 8000950:	691b      	ldr	r3, [r3, #16]
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6113      	str	r3, [r2, #16]
        return 0;
 8000958:	2300      	movs	r3, #0
    }
}
 800095a:	4618      	mov	r0, r3
 800095c:	3724      	adds	r7, #36	; 0x24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd90      	pop	{r4, r7, pc}
 8000962:	bf00      	nop
 8000964:	f3af 8000 	nop.w
 8000968:	00000000 	.word	0x00000000
 800096c:	40c24f80 	.word	0x40c24f80
 8000970:	47ae147b 	.word	0x47ae147b
 8000974:	3f847ae1 	.word	0x3f847ae1
 8000978:	40590000 	.word	0x40590000
 800097c:	4000c300 	.word	0x4000c300
 8000980:	4000c000 	.word	0x4000c000
 8000984:	4000c200 	.word	0x4000c200

08000988 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	2201      	movs	r2, #1
 8000998:	409a      	lsls	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	605a      	str	r2, [r3, #4]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009be:	409a      	lsls	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	605a      	str	r2, [r3, #4]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80009e2:	409a      	lsls	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	605a      	str	r2, [r3, #4]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a04:	78fb      	ldrb	r3, [r7, #3]
 8000a06:	fa22 f303 	lsr.w	r3, r2, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <initGlobals>:
 * @param	none
 * @return	none
 *
 */
void initGlobals()
{
 8000a1c:	b490      	push	{r4, r7}
 8000a1e:	af00      	add	r7, sp, #0
    readAxes.axisX = 0;
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <initGlobals+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	801a      	strh	r2, [r3, #0]
    readAxes.axisY = 0;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <initGlobals+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	805a      	strh	r2, [r3, #2]
    readAxes.axisZ = 0;
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <initGlobals+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	809a      	strh	r2, [r3, #4]
    direction = 6;
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <initGlobals+0x94>)
 8000a34:	2206      	movs	r2, #6
 8000a36:	701a      	strb	r2, [r3, #0]
    errorcount = 0;
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <initGlobals+0x98>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
    packagesSent = 0;
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <initGlobals+0x9c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
    position = 0;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <initGlobals+0xa0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
    old_position = 0;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <initGlobals+0xa4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
    signal1 = 0.00;
 8000a50:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <initGlobals+0xa8>)
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	f04f 0400 	mov.w	r4, #0
 8000a5a:	e9c2 3400 	strd	r3, r4, [r2]
    signal2 = 0.00;
 8000a5e:	4a1a      	ldr	r2, [pc, #104]	; (8000ac8 <initGlobals+0xac>)
 8000a60:	f04f 0300 	mov.w	r3, #0
 8000a64:	f04f 0400 	mov.w	r4, #0
 8000a68:	e9c2 3400 	strd	r3, r4, [r2]
    button1pressed = 0;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <initGlobals+0xb0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
    button2pressed = 0;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <initGlobals+0xb4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
    statisticSend = 0;
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <initGlobals+0xb8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
    servoEnable = 0;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <initGlobals+0xbc>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
    buttonSend = 0;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <initGlobals+0xc0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
    inix = 0;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <initGlobals+0xc4>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
    outix = 0;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <initGlobals+0xc8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
    full = 0;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <initGlobals+0xcc>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
    empty = 1;
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <initGlobals+0xd0>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc90      	pop	{r4, r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000ab8 	.word	0x20000ab8
 8000ab0:	20000ab1 	.word	0x20000ab1
 8000ab4:	20000a92 	.word	0x20000a92
 8000ab8:	20000aa0 	.word	0x20000aa0
 8000abc:	20000a9e 	.word	0x20000a9e
 8000ac0:	20000ab4 	.word	0x20000ab4
 8000ac4:	20000ac0 	.word	0x20000ac0
 8000ac8:	20000aa8 	.word	0x20000aa8
 8000acc:	20000ab0 	.word	0x20000ab0
 8000ad0:	20000aa4 	.word	0x20000aa4
 8000ad4:	20000a90 	.word	0x20000a90
 8000ad8:	20000ab3 	.word	0x20000ab3
 8000adc:	20000ab5 	.word	0x20000ab5
 8000ae0:	20000ab2 	.word	0x20000ab2
 8000ae4:	20000a91 	.word	0x20000a91
 8000ae8:	20000a93 	.word	0x20000a93
 8000aec:	20000ac8 	.word	0x20000ac8

08000af0 <outputInit>:
 * @param	none
 * @return	none
 *
 */
void outputInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
    XMC_GPIO_CONFIG_t config_out;
    config_out.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8000af6:	2380      	movs	r3, #128	; 0x80
 8000af8:	713b      	strb	r3, [r7, #4]
    config_out.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 8000afa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000afe:	60bb      	str	r3, [r7, #8]
    config_out.output_strength = XMC_GPIO_OUTPUT_STRENGTH_WEAK;
 8000b00:	2307      	movs	r3, #7
 8000b02:	733b      	strb	r3, [r7, #12]
    XMC_GPIO_Init(LED1, &config_out);
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	461a      	mov	r2, r3
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4803      	ldr	r0, [pc, #12]	; (8000b18 <outputInit+0x28>)
 8000b0c:	f001 fe62 	bl	80027d4 <XMC_GPIO_Init>
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	48028100 	.word	0x48028100

08000b1c <SysTick_Handler>:
 * @param	none
 * @return	none
 *
 */
void SysTick_Handler (void)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
	static double smoothSignal1 = 0.0, smoothSignal2 = 0.0;

    // read buttons and fill circular buffer

    readButtonDebounce();
 8000b22:	f000 fb4b 	bl	80011bc <readButtonDebounce>

    if (circularGet(&buttonIDpressed))
 8000b26:	485d      	ldr	r0, [pc, #372]	; (8000c9c <SysTick_Handler+0x180>)
 8000b28:	f000 fc0c 	bl	8001344 <circularGet>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d012      	beq.n	8000b58 <SysTick_Handler+0x3c>
    {
        switch (buttonIDpressed)
 8000b32:	4b5a      	ldr	r3, [pc, #360]	; (8000c9c <SysTick_Handler+0x180>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b0e      	cmp	r3, #14
 8000b38:	d002      	beq.n	8000b40 <SysTick_Handler+0x24>
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	d004      	beq.n	8000b48 <SysTick_Handler+0x2c>
 8000b3e:	e007      	b.n	8000b50 <SysTick_Handler+0x34>
        case BUTTON1INT:
        {
#if DEBUG
            printf("button 1 pressed\n");
#endif
            buttonSend = 1;
 8000b40:	4b57      	ldr	r3, [pc, #348]	; (8000ca0 <SysTick_Handler+0x184>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
            break;
 8000b46:	e007      	b.n	8000b58 <SysTick_Handler+0x3c>
        case BUTTON2INT:
        {
#if DEBUG
            printf("button 2 pressed\n");
#endif
            buttonSend = 2;
 8000b48:	4b55      	ldr	r3, [pc, #340]	; (8000ca0 <SysTick_Handler+0x184>)
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	701a      	strb	r2, [r3, #0]
            break;
 8000b4e:	e003      	b.n	8000b58 <SysTick_Handler+0x3c>
        }
        default:
        {
            buttonSend = 0;
 8000b50:	4b53      	ldr	r3, [pc, #332]	; (8000ca0 <SysTick_Handler+0x184>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
            break;
 8000b56:	bf00      	nop
        }
        }
    }

    ticks++;
 8000b58:	4b52      	ldr	r3, [pc, #328]	; (8000ca4 <SysTick_Handler+0x188>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	4a51      	ldr	r2, [pc, #324]	; (8000ca4 <SysTick_Handler+0x188>)
 8000b60:	6013      	str	r3, [r2, #0]
    if(ticks == SENSORTICKS)
 8000b62:	4b50      	ldr	r3, [pc, #320]	; (8000ca4 <SysTick_Handler+0x188>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b0a      	cmp	r3, #10
 8000b68:	d11f      	bne.n	8000baa <SysTick_Handler+0x8e>
    {
        // get 6D Position
        direction = get6Dposition();
 8000b6a:	f000 feef 	bl	800194c <get6Dposition>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b4d      	ldr	r3, [pc, #308]	; (8000ca8 <SysTick_Handler+0x18c>)
 8000b74:	701a      	strb	r2, [r3, #0]
        // get raw data
        readAxes = getAxesRawData();
 8000b76:	4c4d      	ldr	r4, [pc, #308]	; (8000cac <SysTick_Handler+0x190>)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 ff80 	bl	8001a80 <getAxesRawData>
 8000b80:	4622      	mov	r2, r4
 8000b82:	463b      	mov	r3, r7
 8000b84:	6819      	ldr	r1, [r3, #0]
 8000b86:	6011      	str	r1, [r2, #0]
 8000b88:	889b      	ldrh	r3, [r3, #4]
 8000b8a:	8093      	strh	r3, [r2, #4]
        // calculate servo output
        pwmAngleCalc(readAxes.axisX, readAxes.axisY, readAxes.axisZ);
 8000b8c:	4b47      	ldr	r3, [pc, #284]	; (8000cac <SysTick_Handler+0x190>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	b218      	sxth	r0, r3
 8000b92:	4b46      	ldr	r3, [pc, #280]	; (8000cac <SysTick_Handler+0x190>)
 8000b94:	885b      	ldrh	r3, [r3, #2]
 8000b96:	b219      	sxth	r1, r3
 8000b98:	4b44      	ldr	r3, [pc, #272]	; (8000cac <SysTick_Handler+0x190>)
 8000b9a:	889b      	ldrh	r3, [r3, #4]
 8000b9c:	b21b      	sxth	r3, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	f000 f996 	bl	8000ed0 <pwmAngleCalc>

        ticks = 0;
 8000ba4:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <SysTick_Handler+0x188>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
    }

    if (servoEnable == 1)
 8000baa:	4b41      	ldr	r3, [pc, #260]	; (8000cb0 <SysTick_Handler+0x194>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d163      	bne.n	8000c7a <SysTick_Handler+0x15e>
    {
		smoothSignal1 += signal1;
 8000bb2:	4b40      	ldr	r3, [pc, #256]	; (8000cb4 <SysTick_Handler+0x198>)
 8000bb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bb8:	4b3f      	ldr	r3, [pc, #252]	; (8000cb8 <SysTick_Handler+0x19c>)
 8000bba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4623      	mov	r3, r4
 8000bc2:	f002 fd57 	bl	8003674 <__adddf3>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460c      	mov	r4, r1
 8000bca:	4a3a      	ldr	r2, [pc, #232]	; (8000cb4 <SysTick_Handler+0x198>)
 8000bcc:	e9c2 3400 	strd	r3, r4, [r2]
		smoothSignal2 += signal2;
 8000bd0:	4b3a      	ldr	r3, [pc, #232]	; (8000cbc <SysTick_Handler+0x1a0>)
 8000bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bd6:	4b3a      	ldr	r3, [pc, #232]	; (8000cc0 <SysTick_Handler+0x1a4>)
 8000bd8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4623      	mov	r3, r4
 8000be0:	f002 fd48 	bl	8003674 <__adddf3>
 8000be4:	4603      	mov	r3, r0
 8000be6:	460c      	mov	r4, r1
 8000be8:	4a34      	ldr	r2, [pc, #208]	; (8000cbc <SysTick_Handler+0x1a0>)
 8000bea:	e9c2 3400 	strd	r3, r4, [r2]
		i++;
 8000bee:	4b35      	ldr	r3, [pc, #212]	; (8000cc4 <SysTick_Handler+0x1a8>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <SysTick_Handler+0x1a8>)
 8000bf8:	701a      	strb	r2, [r3, #0]
		if (i == PWMAVERAGE)
 8000bfa:	4b32      	ldr	r3, [pc, #200]	; (8000cc4 <SysTick_Handler+0x1a8>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b05      	cmp	r3, #5
 8000c00:	d147      	bne.n	8000c92 <SysTick_Handler+0x176>
		{
	        // set servo
			smoothSignal1 /= PWMAVERAGE;
 8000c02:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <SysTick_Handler+0x198>)
 8000c04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c08:	f04f 0200 	mov.w	r2, #0
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <SysTick_Handler+0x1ac>)
 8000c0e:	f003 f80d 	bl	8003c2c <__aeabi_ddiv>
 8000c12:	4603      	mov	r3, r0
 8000c14:	460c      	mov	r4, r1
 8000c16:	4a27      	ldr	r2, [pc, #156]	; (8000cb4 <SysTick_Handler+0x198>)
 8000c18:	e9c2 3400 	strd	r3, r4, [r2]
			smoothSignal2 /= PWMAVERAGE;
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <SysTick_Handler+0x1a0>)
 8000c1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c22:	f04f 0200 	mov.w	r2, #0
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <SysTick_Handler+0x1ac>)
 8000c28:	f003 f800 	bl	8003c2c <__aeabi_ddiv>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	460c      	mov	r4, r1
 8000c30:	4a22      	ldr	r2, [pc, #136]	; (8000cbc <SysTick_Handler+0x1a0>)
 8000c32:	e9c2 3400 	strd	r3, r4, [r2]
    	    pwm(smoothSignal1, 0);
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <SysTick_Handler+0x198>)
 8000c38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	4621      	mov	r1, r4
 8000c42:	f7ff fd0d 	bl	8000660 <pwm>
    	    pwm(smoothSignal2, 1);
 8000c46:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <SysTick_Handler+0x1a0>)
 8000c48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	4621      	mov	r1, r4
 8000c52:	f7ff fd05 	bl	8000660 <pwm>
			smoothSignal1 = 0.0;
 8000c56:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <SysTick_Handler+0x198>)
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	f04f 0400 	mov.w	r4, #0
 8000c60:	e9c2 3400 	strd	r3, r4, [r2]
			smoothSignal2 = 0.0;
 8000c64:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <SysTick_Handler+0x1a0>)
 8000c66:	f04f 0300 	mov.w	r3, #0
 8000c6a:	f04f 0400 	mov.w	r4, #0
 8000c6e:	e9c2 3400 	strd	r3, r4, [r2]
			i = 0;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <SysTick_Handler+0x1a8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
    {
        // reset servo
        pwm(SERVOUPCENTER, 0);
        pwm(SERVOLOCENTER, 1);
    }
}
 8000c78:	e00b      	b.n	8000c92 <SysTick_Handler+0x176>
		}
    }
    else
    {
        // reset servo
        pwm(SERVOUPCENTER, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f04f 0000 	mov.w	r0, #0
 8000c80:	4912      	ldr	r1, [pc, #72]	; (8000ccc <SysTick_Handler+0x1b0>)
 8000c82:	f7ff fced 	bl	8000660 <pwm>
        pwm(SERVOLOCENTER, 1);
 8000c86:	2201      	movs	r2, #1
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	490f      	ldr	r1, [pc, #60]	; (8000ccc <SysTick_Handler+0x1b0>)
 8000c8e:	f7ff fce7 	bl	8000660 <pwm>
    }
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd90      	pop	{r4, r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000a39 	.word	0x20000a39
 8000ca0:	20000ab5 	.word	0x20000ab5
 8000ca4:	20000a3c 	.word	0x20000a3c
 8000ca8:	20000ab1 	.word	0x20000ab1
 8000cac:	20000ab8 	.word	0x20000ab8
 8000cb0:	20000ab3 	.word	0x20000ab3
 8000cb4:	20000a40 	.word	0x20000a40
 8000cb8:	20000ac0 	.word	0x20000ac0
 8000cbc:	20000a48 	.word	0x20000a48
 8000cc0:	20000aa8 	.word	0x20000aa8
 8000cc4:	20000a50 	.word	0x20000a50
 8000cc8:	40140000 	.word	0x40140000
 8000ccc:	401e0000 	.word	0x401e0000

08000cd0 <protocolComplete>:
 *			temperature value <br>
 * @return	none
 *
 */
void protocolComplete(int16_t position6D, int16_t positionX, int16_t positionY, int16_t positionZ)
{
 8000cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd2:	b0a3      	sub	sp, #140	; 0x8c
 8000cd4:	af04      	add	r7, sp, #16
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	4608      	mov	r0, r1
 8000cda:	4611      	mov	r1, r2
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4623      	mov	r3, r4
 8000ce0:	80fb      	strh	r3, [r7, #6]
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	80bb      	strh	r3, [r7, #4]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	807b      	strh	r3, [r7, #2]
 8000cea:	4613      	mov	r3, r2
 8000cec:	803b      	strh	r3, [r7, #0]
    char string6D[8][6] = {"#USX,", "#UDX,", "#DSX,", "#DDX,", "#TOP,", "#BOT,", "#XXX,", "#FAL,"};
 8000cee:	4b5d      	ldr	r3, [pc, #372]	; (8000e64 <protocolComplete+0x194>)
 8000cf0:	461c      	mov	r4, r3
 8000cf2:	f107 0648 	add.w	r6, r7, #72	; 0x48
 8000cf6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000cfa:	4635      	mov	r5, r6
 8000cfc:	4623      	mov	r3, r4
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	6859      	ldr	r1, [r3, #4]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d08:	3410      	adds	r4, #16
 8000d0a:	3610      	adds	r6, #16
 8000d0c:	4574      	cmp	r4, lr
 8000d0e:	d1f4      	bne.n	8000cfa <protocolComplete+0x2a>
    char send[RXBUFFERSIZE];

    memset (&send, 0, sizeof (send));
 8000d10:	f107 0308 	add.w	r3, r7, #8
 8000d14:	2240      	movs	r2, #64	; 0x40
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f003 fa1d 	bl	8004158 <memset>

    if (statisticSend == 1)
 8000d1e:	4b52      	ldr	r3, [pc, #328]	; (8000e68 <protocolComplete+0x198>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d121      	bne.n	8000d6a <protocolComplete+0x9a>
    {
        // send statistic package if requested
        if (sprintf(send, "#STA,%10lu,%3d$\n", packagesSent, errorcount) < 0)
 8000d26:	4b51      	ldr	r3, [pc, #324]	; (8000e6c <protocolComplete+0x19c>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	4b51      	ldr	r3, [pc, #324]	; (8000e70 <protocolComplete+0x1a0>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	f107 0008 	add.w	r0, r7, #8
 8000d32:	4950      	ldr	r1, [pc, #320]	; (8000e74 <protocolComplete+0x1a4>)
 8000d34:	f003 faae 	bl	8004294 <sprintf>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	da06      	bge.n	8000d4c <protocolComplete+0x7c>
        {
            errorcount++;
 8000d3e:	4b4c      	ldr	r3, [pc, #304]	; (8000e70 <protocolComplete+0x1a0>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b4a      	ldr	r3, [pc, #296]	; (8000e70 <protocolComplete+0x1a0>)
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e00a      	b.n	8000d62 <protocolComplete+0x92>
        else
        {
#if DEBUG
            printf("send %s", send);
#endif
            _uart_printf("%s", send);
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	4619      	mov	r1, r3
 8000d52:	4849      	ldr	r0, [pc, #292]	; (8000e78 <protocolComplete+0x1a8>)
 8000d54:	f7ff fc00 	bl	8000558 <_uart_printf>
            packagesSent++;
 8000d58:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <protocolComplete+0x19c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4a43      	ldr	r2, [pc, #268]	; (8000e6c <protocolComplete+0x19c>)
 8000d60:	6013      	str	r3, [r2, #0]
        }
        statisticSend = 0;
 8000d62:	4b41      	ldr	r3, [pc, #260]	; (8000e68 <protocolComplete+0x198>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
        return;
 8000d68:	e079      	b.n	8000e5e <protocolComplete+0x18e>
    }
    else if (buttonSend == 1)
 8000d6a:	4b44      	ldr	r3, [pc, #272]	; (8000e7c <protocolComplete+0x1ac>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d11e      	bne.n	8000db0 <protocolComplete+0xe0>
    {
        // send button 1 pressed
        if (sprintf(send, "#BUT,1$\n") < 0)
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	4a42      	ldr	r2, [pc, #264]	; (8000e80 <protocolComplete+0x1b0>)
 8000d78:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d7a:	c303      	stmia	r3!, {r0, r1}
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	2308      	movs	r3, #8
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	da06      	bge.n	8000d92 <protocolComplete+0xc2>
        {
            errorcount++;
 8000d84:	4b3a      	ldr	r3, [pc, #232]	; (8000e70 <protocolComplete+0x1a0>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b38      	ldr	r3, [pc, #224]	; (8000e70 <protocolComplete+0x1a0>)
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	e00a      	b.n	8000da8 <protocolComplete+0xd8>
        else
        {
#if DEBUG
            printf("send %s", send);
#endif
            _uart_printf("%s", send);
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	4619      	mov	r1, r3
 8000d98:	4837      	ldr	r0, [pc, #220]	; (8000e78 <protocolComplete+0x1a8>)
 8000d9a:	f7ff fbdd 	bl	8000558 <_uart_printf>
            packagesSent++;
 8000d9e:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <protocolComplete+0x19c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a31      	ldr	r2, [pc, #196]	; (8000e6c <protocolComplete+0x19c>)
 8000da6:	6013      	str	r3, [r2, #0]
        }
        buttonSend = 0;
 8000da8:	4b34      	ldr	r3, [pc, #208]	; (8000e7c <protocolComplete+0x1ac>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
        return;
 8000dae:	e056      	b.n	8000e5e <protocolComplete+0x18e>
    }
    else if (buttonSend == 2)
 8000db0:	4b32      	ldr	r3, [pc, #200]	; (8000e7c <protocolComplete+0x1ac>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d11e      	bne.n	8000df6 <protocolComplete+0x126>
    {
        // send button 2 pressed
        if (sprintf(send, "#BUT,2$\n") < 0)
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4a31      	ldr	r2, [pc, #196]	; (8000e84 <protocolComplete+0x1b4>)
 8000dbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dc0:	c303      	stmia	r3!, {r0, r1}
 8000dc2:	701a      	strb	r2, [r3, #0]
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	da06      	bge.n	8000dd8 <protocolComplete+0x108>
        {
            errorcount++;
 8000dca:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <protocolComplete+0x1a0>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b27      	ldr	r3, [pc, #156]	; (8000e70 <protocolComplete+0x1a0>)
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e00a      	b.n	8000dee <protocolComplete+0x11e>
        else
        {
#if DEBUG
            printf("send %s", send);
#endif
            _uart_printf("%s", send);
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4826      	ldr	r0, [pc, #152]	; (8000e78 <protocolComplete+0x1a8>)
 8000de0:	f7ff fbba 	bl	8000558 <_uart_printf>
            packagesSent++;
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <protocolComplete+0x19c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <protocolComplete+0x19c>)
 8000dec:	6013      	str	r3, [r2, #0]
        }
        buttonSend = 0;
 8000dee:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <protocolComplete+0x1ac>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
        return;
 8000df4:	e033      	b.n	8000e5e <protocolComplete+0x18e>
    }
    else
    {
        // send acceleration data
        if (sprintf(send, "%s%7d%s%7d%s%7d$\n", string6D[position6D], positionX, ",", positionY, ",", positionZ) < 0)
 8000df6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000dfa:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4419      	add	r1, r3
 8000e08:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000e0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e10:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e14:	f107 0008 	add.w	r0, r7, #8
 8000e18:	9203      	str	r2, [sp, #12]
 8000e1a:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <protocolComplete+0x1b8>)
 8000e1c:	9202      	str	r2, [sp, #8]
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <protocolComplete+0x1b8>)
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	4623      	mov	r3, r4
 8000e26:	460a      	mov	r2, r1
 8000e28:	4918      	ldr	r1, [pc, #96]	; (8000e8c <protocolComplete+0x1bc>)
 8000e2a:	f003 fa33 	bl	8004294 <sprintf>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	da06      	bge.n	8000e42 <protocolComplete+0x172>
        {
            errorcount++;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <protocolComplete+0x1a0>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <protocolComplete+0x1a0>)
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e00d      	b.n	8000e5e <protocolComplete+0x18e>
        else
        {
#if DEBUG
            printf("send %s", send);
#endif
            _uart_printf("%s", send);
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4619      	mov	r1, r3
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <protocolComplete+0x1a8>)
 8000e4a:	f7ff fb85 	bl	8000558 <_uart_printf>
            ledSetting(3);
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f000 f81e 	bl	8000e90 <ledSetting>
            packagesSent++;
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <protocolComplete+0x19c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <protocolComplete+0x19c>)
 8000e5c:	6013      	str	r3, [r2, #0]
        }
    }
}
 8000e5e:	377c      	adds	r7, #124	; 0x7c
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e64:	0800a74c 	.word	0x0800a74c
 8000e68:	20000a90 	.word	0x20000a90
 8000e6c:	20000aa0 	.word	0x20000aa0
 8000e70:	20000a92 	.word	0x20000a92
 8000e74:	0800a704 	.word	0x0800a704
 8000e78:	0800a718 	.word	0x0800a718
 8000e7c:	20000ab5 	.word	0x20000ab5
 8000e80:	0800a71c 	.word	0x0800a71c
 8000e84:	0800a728 	.word	0x0800a728
 8000e88:	0800a748 	.word	0x0800a748
 8000e8c:	0800a734 	.word	0x0800a734

08000e90 <ledSetting>:
 *			other for LED toggle <br>
 * @return	none
 *
 */
void ledSetting(uint8_t ledState)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
    if (ledState == 0)
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d104      	bne.n	8000eaa <ledSetting+0x1a>
    {
        XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	480a      	ldr	r0, [pc, #40]	; (8000ecc <ledSetting+0x3c>)
 8000ea4:	f7ff fd82 	bl	80009ac <XMC_GPIO_SetOutputLow>
    }
    else
    {
        XMC_GPIO_ToggleOutput(LED1);
    }
}
 8000ea8:	e00b      	b.n	8000ec2 <ledSetting+0x32>
{
    if (ledState == 0)
    {
        XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
    }
    else if (ledState == 1)
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d104      	bne.n	8000eba <ledSetting+0x2a>
    {
        XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <ledSetting+0x3c>)
 8000eb4:	f7ff fd68 	bl	8000988 <XMC_GPIO_SetOutputHigh>
    }
    else
    {
        XMC_GPIO_ToggleOutput(LED1);
    }
}
 8000eb8:	e003      	b.n	8000ec2 <ledSetting+0x32>
    {
        XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
    }
    else
    {
        XMC_GPIO_ToggleOutput(LED1);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <ledSetting+0x3c>)
 8000ebe:	f7ff fd87 	bl	80009d0 <XMC_GPIO_ToggleOutput>
    }
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	48028100 	.word	0x48028100

08000ed0 <pwmAngleCalc>:
 *			raw Z acceleration value <br>
 * @return	none
 *
 */
void pwmAngleCalc(int16_t positionX, int16_t positionY, int16_t positionZ)
{
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b090      	sub	sp, #64	; 0x40
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
 8000eda:	460b      	mov	r3, r1
 8000edc:	80bb      	strh	r3, [r7, #4]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	807b      	strh	r3, [r7, #2]
    double pi = PI;
 8000ee2:	a4b2      	add	r4, pc, #712	; (adr r4, 80011ac <pwmAngleCalc+0x2dc>)
 8000ee4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000ee8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    double divider = GDIVIDER;
 8000eec:	a4b1      	add	r4, pc, #708	; (adr r4, 80011b4 <pwmAngleCalc+0x2e4>)
 8000eee:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000ef2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double roll, pitch;
    double gX, gY, gZ;

    gX = positionX / divider;
 8000ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fd06 	bl	800390c <__aeabi_i2d>
 8000f00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f04:	f002 fe92 	bl	8003c2c <__aeabi_ddiv>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	460c      	mov	r4, r1
 8000f0c:	e9c7 3408 	strd	r3, r4, [r7, #32]
    gY = positionY / divider;
 8000f10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f002 fcf9 	bl	800390c <__aeabi_i2d>
 8000f1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f1e:	f002 fe85 	bl	8003c2c <__aeabi_ddiv>
 8000f22:	4603      	mov	r3, r0
 8000f24:	460c      	mov	r4, r1
 8000f26:	e9c7 3406 	strd	r3, r4, [r7, #24]
    gZ = positionZ / divider;
 8000f2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 fcec 	bl	800390c <__aeabi_i2d>
 8000f34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000f38:	f002 fe78 	bl	8003c2c <__aeabi_ddiv>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	460c      	mov	r4, r1
 8000f40:	e9c7 3404 	strd	r3, r4, [r7, #16]

    roll = atan(gY/(sqrt((gX*gX)+(gZ*gZ)))) * 180 / pi;
 8000f44:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f4c:	f002 fd44 	bl	80039d8 <__aeabi_dmul>
 8000f50:	4603      	mov	r3, r0
 8000f52:	460c      	mov	r4, r1
 8000f54:	4625      	mov	r5, r4
 8000f56:	461c      	mov	r4, r3
 8000f58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f60:	f002 fd3a 	bl	80039d8 <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4620      	mov	r0, r4
 8000f6a:	4629      	mov	r1, r5
 8000f6c:	f002 fb82 	bl	8003674 <__adddf3>
 8000f70:	4603      	mov	r3, r0
 8000f72:	460c      	mov	r4, r1
 8000f74:	4618      	mov	r0, r3
 8000f76:	4621      	mov	r1, r4
 8000f78:	f002 fa56 	bl	8003428 <sqrt>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	460c      	mov	r4, r1
 8000f80:	461a      	mov	r2, r3
 8000f82:	4623      	mov	r3, r4
 8000f84:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f88:	f002 fe50 	bl	8003c2c <__aeabi_ddiv>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	460c      	mov	r4, r1
 8000f90:	4618      	mov	r0, r3
 8000f92:	4621      	mov	r1, r4
 8000f94:	f002 f8a4 	bl	80030e0 <atan>
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	4b7c      	ldr	r3, [pc, #496]	; (8001190 <pwmAngleCalc+0x2c0>)
 8000f9e:	f002 fd1b 	bl	80039d8 <__aeabi_dmul>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460c      	mov	r4, r1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	4621      	mov	r1, r4
 8000faa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fae:	f002 fe3d 	bl	8003c2c <__aeabi_ddiv>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460c      	mov	r4, r1
 8000fb6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    pitch = atan(gX/(sqrt((gY*gY)+(gZ*gZ)))) * 180 / pi;
 8000fba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fc2:	f002 fd09 	bl	80039d8 <__aeabi_dmul>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460c      	mov	r4, r1
 8000fca:	4625      	mov	r5, r4
 8000fcc:	461c      	mov	r4, r3
 8000fce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fd6:	f002 fcff 	bl	80039d8 <__aeabi_dmul>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4620      	mov	r0, r4
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	f002 fb47 	bl	8003674 <__adddf3>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	460c      	mov	r4, r1
 8000fea:	4618      	mov	r0, r3
 8000fec:	4621      	mov	r1, r4
 8000fee:	f002 fa1b 	bl	8003428 <sqrt>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	460c      	mov	r4, r1
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4623      	mov	r3, r4
 8000ffa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ffe:	f002 fe15 	bl	8003c2c <__aeabi_ddiv>
 8001002:	4603      	mov	r3, r0
 8001004:	460c      	mov	r4, r1
 8001006:	4618      	mov	r0, r3
 8001008:	4621      	mov	r1, r4
 800100a:	f002 f869 	bl	80030e0 <atan>
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	4b5f      	ldr	r3, [pc, #380]	; (8001190 <pwmAngleCalc+0x2c0>)
 8001014:	f002 fce0 	bl	80039d8 <__aeabi_dmul>
 8001018:	4603      	mov	r3, r0
 800101a:	460c      	mov	r4, r1
 800101c:	4618      	mov	r0, r3
 800101e:	4621      	mov	r1, r4
 8001020:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001024:	f002 fe02 	bl	8003c2c <__aeabi_ddiv>
 8001028:	4603      	mov	r3, r0
 800102a:	460c      	mov	r4, r1
 800102c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

	if (pitch >= 0.0)
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800103c:	f002 ff52 	bl	8003ee4 <__aeabi_dcmpge>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d012      	beq.n	800106c <pwmAngleCalc+0x19c>
	{
		pitch += pitch * PITCHCORRECTPOS;
 8001046:	a34e      	add	r3, pc, #312	; (adr r3, 8001180 <pwmAngleCalc+0x2b0>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001050:	f002 fcc2 	bl	80039d8 <__aeabi_dmul>
 8001054:	4603      	mov	r3, r0
 8001056:	460c      	mov	r4, r1
 8001058:	461a      	mov	r2, r3
 800105a:	4623      	mov	r3, r4
 800105c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001060:	f002 fb08 	bl	8003674 <__adddf3>
 8001064:	4603      	mov	r3, r0
 8001066:	460c      	mov	r4, r1
 8001068:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	}

    signal1 = (90.00+roll) * SERVOUOLINEAR + SERUPLO0;
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	4b48      	ldr	r3, [pc, #288]	; (8001194 <pwmAngleCalc+0x2c4>)
 8001072:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001076:	f002 fafd 	bl	8003674 <__adddf3>
 800107a:	4603      	mov	r3, r0
 800107c:	460c      	mov	r4, r1
 800107e:	4618      	mov	r0, r3
 8001080:	4621      	mov	r1, r4
 8001082:	a341      	add	r3, pc, #260	; (adr r3, 8001188 <pwmAngleCalc+0x2b8>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f002 fca6 	bl	80039d8 <__aeabi_dmul>
 800108c:	4603      	mov	r3, r0
 800108e:	460c      	mov	r4, r1
 8001090:	4618      	mov	r0, r3
 8001092:	4621      	mov	r1, r4
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <pwmAngleCalc+0x2c8>)
 800109a:	f002 faeb 	bl	8003674 <__adddf3>
 800109e:	4603      	mov	r3, r0
 80010a0:	460c      	mov	r4, r1
 80010a2:	4a3e      	ldr	r2, [pc, #248]	; (800119c <pwmAngleCalc+0x2cc>)
 80010a4:	e9c2 3400 	strd	r3, r4, [r2]
    signal2 = (90.00+pitch) * SERVOLOLINEAR + SERVOLO0;
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b39      	ldr	r3, [pc, #228]	; (8001194 <pwmAngleCalc+0x2c4>)
 80010ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80010b2:	f002 fadf 	bl	8003674 <__adddf3>
 80010b6:	4603      	mov	r3, r0
 80010b8:	460c      	mov	r4, r1
 80010ba:	4618      	mov	r0, r3
 80010bc:	4621      	mov	r1, r4
 80010be:	a332      	add	r3, pc, #200	; (adr r3, 8001188 <pwmAngleCalc+0x2b8>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	f002 fc88 	bl	80039d8 <__aeabi_dmul>
 80010c8:	4603      	mov	r3, r0
 80010ca:	460c      	mov	r4, r1
 80010cc:	4618      	mov	r0, r3
 80010ce:	4621      	mov	r1, r4
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b30      	ldr	r3, [pc, #192]	; (8001198 <pwmAngleCalc+0x2c8>)
 80010d6:	f002 facd 	bl	8003674 <__adddf3>
 80010da:	4603      	mov	r3, r0
 80010dc:	460c      	mov	r4, r1
 80010de:	4a30      	ldr	r2, [pc, #192]	; (80011a0 <pwmAngleCalc+0x2d0>)
 80010e0:	e9c2 3400 	strd	r3, r4, [r2]

    signal1 = (int)(signal1 * RNDFACTOR + 0.5) / RNDFACTOR;
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <pwmAngleCalc+0x2cc>)
 80010e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <pwmAngleCalc+0x2d4>)
 80010f0:	f002 fc72 	bl	80039d8 <__aeabi_dmul>
 80010f4:	4603      	mov	r3, r0
 80010f6:	460c      	mov	r4, r1
 80010f8:	4618      	mov	r0, r3
 80010fa:	4621      	mov	r1, r4
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <pwmAngleCalc+0x2d8>)
 8001102:	f002 fab7 	bl	8003674 <__adddf3>
 8001106:	4603      	mov	r3, r0
 8001108:	460c      	mov	r4, r1
 800110a:	4618      	mov	r0, r3
 800110c:	4621      	mov	r1, r4
 800110e:	f002 ff13 	bl	8003f38 <__aeabi_d2iz>
 8001112:	4603      	mov	r3, r0
 8001114:	4618      	mov	r0, r3
 8001116:	f002 fbf9 	bl	800390c <__aeabi_i2d>
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <pwmAngleCalc+0x2d4>)
 8001120:	f002 fd84 	bl	8003c2c <__aeabi_ddiv>
 8001124:	4603      	mov	r3, r0
 8001126:	460c      	mov	r4, r1
 8001128:	4a1c      	ldr	r2, [pc, #112]	; (800119c <pwmAngleCalc+0x2cc>)
 800112a:	e9c2 3400 	strd	r3, r4, [r2]
    signal2 = (int)(signal2 * RNDFACTOR + 0.5) / RNDFACTOR;
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <pwmAngleCalc+0x2d0>)
 8001130:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <pwmAngleCalc+0x2d4>)
 800113a:	f002 fc4d 	bl	80039d8 <__aeabi_dmul>
 800113e:	4603      	mov	r3, r0
 8001140:	460c      	mov	r4, r1
 8001142:	4618      	mov	r0, r3
 8001144:	4621      	mov	r1, r4
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <pwmAngleCalc+0x2d8>)
 800114c:	f002 fa92 	bl	8003674 <__adddf3>
 8001150:	4603      	mov	r3, r0
 8001152:	460c      	mov	r4, r1
 8001154:	4618      	mov	r0, r3
 8001156:	4621      	mov	r1, r4
 8001158:	f002 feee 	bl	8003f38 <__aeabi_d2iz>
 800115c:	4603      	mov	r3, r0
 800115e:	4618      	mov	r0, r3
 8001160:	f002 fbd4 	bl	800390c <__aeabi_i2d>
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <pwmAngleCalc+0x2d4>)
 800116a:	f002 fd5f 	bl	8003c2c <__aeabi_ddiv>
 800116e:	4603      	mov	r3, r0
 8001170:	460c      	mov	r4, r1
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <pwmAngleCalc+0x2d0>)
 8001174:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001178:	bf00      	nop
 800117a:	3740      	adds	r7, #64	; 0x40
 800117c:	46bd      	mov	sp, r7
 800117e:	bdb0      	pop	{r4, r5, r7, pc}
 8001180:	a14cec42 	.word	0xa14cec42
 8001184:	3fab1af3 	.word	0x3fab1af3
 8001188:	9999999a 	.word	0x9999999a
 800118c:	3fa99999 	.word	0x3fa99999
 8001190:	40668000 	.word	0x40668000
 8001194:	40568000 	.word	0x40568000
 8001198:	40080000 	.word	0x40080000
 800119c:	20000ac0 	.word	0x20000ac0
 80011a0:	20000aa8 	.word	0x20000aa8
 80011a4:	40590000 	.word	0x40590000
 80011a8:	3fe00000 	.word	0x3fe00000
 80011ac:	54524550 	.word	0x54524550
 80011b0:	400921fb 	.word	0x400921fb
 80011b4:	00000000 	.word	0x00000000
 80011b8:	40bffe00 	.word	0x40bffe00

080011bc <readButtonDebounce>:
 * @param	none
 * @return	none
 *
 */
void readButtonDebounce()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
    if ((XMC_GPIO_GetInput(BUTTON1) == 0) && (button1pressed == 0))
 80011c0:	210e      	movs	r1, #14
 80011c2:	4830      	ldr	r0, [pc, #192]	; (8001284 <readButtonDebounce+0xc8>)
 80011c4:	f7ff fc16 	bl	80009f4 <XMC_GPIO_GetInput>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d106      	bne.n	80011dc <readButtonDebounce+0x20>
 80011ce:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <readButtonDebounce+0xcc>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d102      	bne.n	80011dc <readButtonDebounce+0x20>
    {
        button1pressed = 1;
 80011d6:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <readButtonDebounce+0xcc>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON1) == 0) && (button1pressed == 1))
 80011dc:	210e      	movs	r1, #14
 80011de:	4829      	ldr	r0, [pc, #164]	; (8001284 <readButtonDebounce+0xc8>)
 80011e0:	f7ff fc08 	bl	80009f4 <XMC_GPIO_GetInput>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d106      	bne.n	80011f8 <readButtonDebounce+0x3c>
 80011ea:	4b27      	ldr	r3, [pc, #156]	; (8001288 <readButtonDebounce+0xcc>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d102      	bne.n	80011f8 <readButtonDebounce+0x3c>
    {
        button1pressed = 2;
 80011f2:	4b25      	ldr	r3, [pc, #148]	; (8001288 <readButtonDebounce+0xcc>)
 80011f4:	2202      	movs	r2, #2
 80011f6:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON1) == 1) && (button1pressed == 2))
 80011f8:	210e      	movs	r1, #14
 80011fa:	4822      	ldr	r0, [pc, #136]	; (8001284 <readButtonDebounce+0xc8>)
 80011fc:	f7ff fbfa 	bl	80009f4 <XMC_GPIO_GetInput>
 8001200:	4603      	mov	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d10c      	bne.n	8001220 <readButtonDebounce+0x64>
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <readButtonDebounce+0xcc>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d108      	bne.n	8001220 <readButtonDebounce+0x64>
    {
        if (circularAdd(BUTTON1INT) == 1)
 800120e:	200e      	movs	r0, #14
 8001210:	f000 f856 	bl	80012c0 <circularAdd>
 8001214:	4603      	mov	r3, r0
 8001216:	2b01      	cmp	r3, #1
 8001218:	d102      	bne.n	8001220 <readButtonDebounce+0x64>
        {
            button1pressed = 0;
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <readButtonDebounce+0xcc>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
        }
    }

    if ((XMC_GPIO_GetInput(BUTTON2) == 0) && (button2pressed == 0))
 8001220:	210f      	movs	r1, #15
 8001222:	4818      	ldr	r0, [pc, #96]	; (8001284 <readButtonDebounce+0xc8>)
 8001224:	f7ff fbe6 	bl	80009f4 <XMC_GPIO_GetInput>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d106      	bne.n	800123c <readButtonDebounce+0x80>
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <readButtonDebounce+0xd0>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <readButtonDebounce+0x80>
    {
        button2pressed = 1;
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <readButtonDebounce+0xd0>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON2) == 0) && (button2pressed == 1))
 800123c:	210f      	movs	r1, #15
 800123e:	4811      	ldr	r0, [pc, #68]	; (8001284 <readButtonDebounce+0xc8>)
 8001240:	f7ff fbd8 	bl	80009f4 <XMC_GPIO_GetInput>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d106      	bne.n	8001258 <readButtonDebounce+0x9c>
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <readButtonDebounce+0xd0>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d102      	bne.n	8001258 <readButtonDebounce+0x9c>
    {
        button2pressed = 2;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <readButtonDebounce+0xd0>)
 8001254:	2202      	movs	r2, #2
 8001256:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON2) == 1) && (button2pressed == 2))
 8001258:	210f      	movs	r1, #15
 800125a:	480a      	ldr	r0, [pc, #40]	; (8001284 <readButtonDebounce+0xc8>)
 800125c:	f7ff fbca 	bl	80009f4 <XMC_GPIO_GetInput>
 8001260:	4603      	mov	r3, r0
 8001262:	2b01      	cmp	r3, #1
 8001264:	d10c      	bne.n	8001280 <readButtonDebounce+0xc4>
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <readButtonDebounce+0xd0>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d108      	bne.n	8001280 <readButtonDebounce+0xc4>
    {
        if (circularAdd(BUTTON2INT) == 1)
 800126e:	200f      	movs	r0, #15
 8001270:	f000 f826 	bl	80012c0 <circularAdd>
 8001274:	4603      	mov	r3, r0
 8001276:	2b01      	cmp	r3, #1
 8001278:	d102      	bne.n	8001280 <readButtonDebounce+0xc4>
        {
            button2pressed = 0;
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <readButtonDebounce+0xd0>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	48028100 	.word	0x48028100
 8001288:	20000ab0 	.word	0x20000ab0
 800128c:	20000aa4 	.word	0x20000aa4

08001290 <inputInit>:
 * @param	none
 * @return	none
 *
 */
void inputInit()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
    XMC_GPIO_CONFIG_t config_in;
    config_in.mode = XMC_GPIO_MODE_INPUT_INVERTED_PULL_UP;
 8001296:	2330      	movs	r3, #48	; 0x30
 8001298:	713b      	strb	r3, [r7, #4]
    XMC_GPIO_Init(BUTTON1, &config_in);
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	461a      	mov	r2, r3
 800129e:	210e      	movs	r1, #14
 80012a0:	4806      	ldr	r0, [pc, #24]	; (80012bc <inputInit+0x2c>)
 80012a2:	f001 fa97 	bl	80027d4 <XMC_GPIO_Init>
    XMC_GPIO_Init(BUTTON2, &config_in);
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	461a      	mov	r2, r3
 80012aa:	210f      	movs	r1, #15
 80012ac:	4803      	ldr	r0, [pc, #12]	; (80012bc <inputInit+0x2c>)
 80012ae:	f001 fa91 	bl	80027d4 <XMC_GPIO_Init>
}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	48028100 	.word	0x48028100

080012c0 <circularAdd>:
 * @brief  	add element to circular buffer
 * @param  	8 bit value for buffer
 * @return 	1 if OK, 0 if KO
 */
uint8_t circularAdd (uint8_t item)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
    if (full)
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <circularAdd+0x6c>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <circularAdd+0x16>
    {
        return 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e023      	b.n	800131e <circularAdd+0x5e>
    }
    inix = (inix + 1) % CBSIZE;
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <circularAdd+0x70>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <circularAdd+0x74>)
 80012de:	fb83 1302 	smull	r1, r3, r3, r2
 80012e2:	1099      	asrs	r1, r3, #2
 80012e4:	17d3      	asrs	r3, r2, #31
 80012e6:	1ac9      	subs	r1, r1, r3
 80012e8:	460b      	mov	r3, r1
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	1ad1      	subs	r1, r2, r3
 80012f2:	b2ca      	uxtb	r2, r1
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <circularAdd+0x70>)
 80012f6:	701a      	strb	r2, [r3, #0]
    cb[inix] = item;
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <circularAdd+0x70>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <circularAdd+0x78>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	5453      	strb	r3, [r2, r1]
    if (inix == outix)
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <circularAdd+0x70>)
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <circularAdd+0x7c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d102      	bne.n	8001316 <circularAdd+0x56>
    {
        full = 1;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <circularAdd+0x6c>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
    }
    empty = 0;
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <circularAdd+0x80>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
    return 1;
 800131c:	2301      	movs	r3, #1
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000a93 	.word	0x20000a93
 8001330:	20000ab2 	.word	0x20000ab2
 8001334:	66666667 	.word	0x66666667
 8001338:	20000a94 	.word	0x20000a94
 800133c:	20000a91 	.word	0x20000a91
 8001340:	20000ac8 	.word	0x20000ac8

08001344 <circularGet>:
 * @brief 	read element from circular buffer
 * @param 	pointer to the 8-bit value
 * @return 	1 if OK, 0 if KO
 */
uint8_t circularGet (uint8_t *pItem)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    if (empty)
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <circularGet+0x6c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <circularGet+0x14>
    {
        return 0;
 8001354:	2300      	movs	r3, #0
 8001356:	e024      	b.n	80013a2 <circularGet+0x5e>
    }
    outix = (outix + 1) % CBSIZE;
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <circularGet+0x70>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <circularGet+0x74>)
 8001360:	fb83 1302 	smull	r1, r3, r3, r2
 8001364:	1099      	asrs	r1, r3, #2
 8001366:	17d3      	asrs	r3, r2, #31
 8001368:	1ac9      	subs	r1, r1, r3
 800136a:	460b      	mov	r3, r1
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	1ad1      	subs	r1, r2, r3
 8001374:	b2ca      	uxtb	r2, r1
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <circularGet+0x70>)
 8001378:	701a      	strb	r2, [r3, #0]
    *pItem = cb[outix];
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <circularGet+0x70>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <circularGet+0x78>)
 8001382:	5c9a      	ldrb	r2, [r3, r2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	701a      	strb	r2, [r3, #0]
    if (outix == inix)
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <circularGet+0x70>)
 800138a:	781a      	ldrb	r2, [r3, #0]
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <circularGet+0x7c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d102      	bne.n	800139a <circularGet+0x56>
    {
        empty = 1;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <circularGet+0x6c>)
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
    }
    full = 0;
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <circularGet+0x80>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
    return 1;
 80013a0:	2301      	movs	r3, #1
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000ac8 	.word	0x20000ac8
 80013b4:	20000a91 	.word	0x20000a91
 80013b8:	66666667 	.word	0x66666667
 80013bc:	20000a94 	.word	0x20000a94
 80013c0:	20000ab2 	.word	0x20000ab2
 80013c4:	20000a93 	.word	0x20000a93

080013c8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d013      	beq.n	8001408 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80013e8:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00b      	beq.n	8001408 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013f0:	e000      	b.n	80013f4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80013f2:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f9      	beq.n	80013f2 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001408:	687b      	ldr	r3, [r7, #4]
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
    // P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
    // PORT2->HWSEL ... clear bits [3:2]
    PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <initRetargetSwo+0x7c>)
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <initRetargetSwo+0x7c>)
 8001420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001422:	f023 030c 	bic.w	r3, r3, #12
 8001426:	6753      	str	r3, [r2, #116]	; 0x74
    // PORT2->HWSEL ... set bit [2] -> HWO0
    PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 8001428:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <initRetargetSwo+0x7c>)
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <initRetargetSwo+0x7c>)
 800142c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6753      	str	r3, [r2, #116]	; 0x74

    // Enable trace systems
    // Source: ARMv7-M Architecture Reference Manual
    // DEMCR = Debug Exception and Monitor Control Register
    //         TRCENA ... global enable for DWT and ITM blocks
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001434:	4a18      	ldr	r2, [pc, #96]	; (8001498 <initRetargetSwo+0x80>)
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <initRetargetSwo+0x80>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800143e:	60d3      	str	r3, [r2, #12]
    // SWO baud rate prescaler value
    // ACPR = Asynchronous Clock Prescaler Register
    //        fSWO = fCPU / (SWOSCALAR + 1)
    //        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
    //        fCPU = 120MHz
    TPI->ACPR = 119UL;
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <initRetargetSwo+0x84>)
 8001442:	2277      	movs	r2, #119	; 0x77
 8001444:	611a      	str	r2, [r3, #16]
    // Source: ARMv7-M Architecture Reference Manual
    // SPPR = Selected Pin Control Register
    //        0x0 ... Synchronous Trace Port Mode
    //        0x1 ... Asynchronous Serial Wire Output (Manchester)
    //        0x2 ... Asynchronous Serial Wire Output (NRZ)
    TPI->SPPR = 0x2UL;
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <initRetargetSwo+0x84>)
 8001448:	2202      	movs	r2, #2
 800144a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    // Source: ARM Cortex-M4 Processor Technical Reference Manual
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    // FFCR = Formatter and Flash Control Register
    //        0x0 ... continuous formatting disabled
    //        0x1 ... continuous formatting enabled
    TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 800144e:	4a13      	ldr	r2, [pc, #76]	; (800149c <initRetargetSwo+0x84>)
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <initRetargetSwo+0x84>)
 8001452:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8001456:	f023 0302 	bic.w	r3, r3, #2
 800145a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

    // Unlock ITM
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    ITM->LAR = 0xC5ACCE55;
 800145e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001462:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <initRetargetSwo+0x88>)
 8001464:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TCR = Trace Control Register
    //       ITMENA ... enable ITM
    ITM->TCR |= ITM_TCR_ITMENA_Msk;
 8001468:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800146c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001470:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TER = Trace Enable Register
    //       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
    ITM->TER = 0xFFFFFFFF;
 800147c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	48028200 	.word	0x48028200
 8001498:	e000edf0 	.word	0xe000edf0
 800149c:	e0040000 	.word	0xe0040000
 80014a0:	c5acce55 	.word	0xc5acce55

080014a4 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
    int i;

    for (i = 0; i < nbytes; i++) {
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	e009      	b.n	80014ca <_write+0x26>
        ITM_SendChar ( (*buf++));
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	60ba      	str	r2, [r7, #8]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ff82 	bl	80013c8 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
    int i;

    for (i = 0; i < nbytes; i++) {
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3301      	adds	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	dbf1      	blt.n	80014b6 <_write+0x12>
        ITM_SendChar ( (*buf++));
    }
    return nbytes;
 80014d2:	687b      	ldr	r3, [r7, #4]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
 80014e8:	4613      	mov	r3, r2
 80014ea:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80014ec:	78f8      	ldrb	r0, [r7, #3]
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	3306      	adds	r3, #6
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80014fe:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001500:	431a      	orrs	r2, r3
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	1d83      	adds	r3, r0, #6
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001524:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f023 020f 	bic.w	r2, r3, #15
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8001564:	2104      	movs	r1, #4
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffe4 	bl	8001534 <XMC_USIC_CH_SetMode>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <XMC_I2C_CH_SetInputSource>:
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 *
 */
__STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT_t input, const uint8_t source)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	70fb      	strb	r3, [r7, #3]
 8001580:	4613      	mov	r3, r2
 8001582:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX0CR_DSEN_Msk;
 8001584:	78f8      	ldrb	r0, [r7, #3]
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	3306      	adds	r3, #6
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8001596:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	1d83      	adds	r3, r0, #6
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 80015a4:	78ba      	ldrb	r2, [r7, #2]
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	4619      	mov	r1, r3
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff96 	bl	80014dc <XMC_USIC_CH_SetInputSource>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <_init_i2c1_ch0>:
 *         P0_5 & P0_11
 *  @param none
 *  @return on success this function returns 0
 */
uint8_t _init_i2c1_ch0 (void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
    XMC_I2C_CH_Init (XMC_I2C1_CH0, &i2c_cfg);
 80015f8:	490e      	ldr	r1, [pc, #56]	; (8001634 <_init_i2c1_ch0+0x40>)
 80015fa:	480f      	ldr	r0, [pc, #60]	; (8001638 <_init_i2c1_ch0+0x44>)
 80015fc:	f001 fa64 	bl	8002ac8 <XMC_I2C_CH_Init>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SDA, USIC1_C0_DX0_P0_5);
 8001600:	2201      	movs	r2, #1
 8001602:	2100      	movs	r1, #0
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <_init_i2c1_ch0+0x44>)
 8001606:	f7ff ffb5 	bl	8001574 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SCL, USIC1_C0_DX1_SCLKOUT);
 800160a:	2206      	movs	r2, #6
 800160c:	2101      	movs	r1, #1
 800160e:	480a      	ldr	r0, [pc, #40]	; (8001638 <_init_i2c1_ch0+0x44>)
 8001610:	f7ff ffb0 	bl	8001574 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_Start (XMC_I2C1_CH0);
 8001614:	4808      	ldr	r0, [pc, #32]	; (8001638 <_init_i2c1_ch0+0x44>)
 8001616:	f7ff ffa1 	bl	800155c <XMC_I2C_CH_Start>

    XMC_GPIO_Init (P0_11, &i2c_scl);
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <_init_i2c1_ch0+0x48>)
 800161c:	210b      	movs	r1, #11
 800161e:	4808      	ldr	r0, [pc, #32]	; (8001640 <_init_i2c1_ch0+0x4c>)
 8001620:	f001 f8d8 	bl	80027d4 <XMC_GPIO_Init>
    XMC_GPIO_Init (P0_5, &i2c_sda);
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <_init_i2c1_ch0+0x50>)
 8001626:	2105      	movs	r1, #5
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <_init_i2c1_ch0+0x4c>)
 800162a:	f001 f8d3 	bl	80027d4 <XMC_GPIO_Init>

    return 0;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000030 	.word	0x20000030
 8001638:	48020000 	.word	0x48020000
 800163c:	20000024 	.word	0x20000024
 8001640:	48028000 	.word	0x48028000
 8001644:	20000018 	.word	0x20000018

08001648 <_i2c_xfer>:
 *         rd_wr    ... I2C Read/Write direction
 *  @return read-value on a I2C read request or return write-value on I2C write
 *          request
 */
uint8_t _i2c_xfer (uint8_t id, uint8_t reg_addr, uint8_t i2c_data, _Bool rd_wr)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	4604      	mov	r4, r0
 8001650:	4608      	mov	r0, r1
 8001652:	4611      	mov	r1, r2
 8001654:	461a      	mov	r2, r3
 8001656:	4623      	mov	r3, r4
 8001658:	71fb      	strb	r3, [r7, #7]
 800165a:	4603      	mov	r3, r0
 800165c:	71bb      	strb	r3, [r7, #6]
 800165e:	460b      	mov	r3, r1
 8001660:	717b      	strb	r3, [r7, #5]
 8001662:	4613      	mov	r3, r2
 8001664:	713b      	strb	r3, [r7, #4]
    XMC_USIC_CH_t *channel;
    char _tmp_i2c_recv_ = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
    uint8_t id_tmp = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	73bb      	strb	r3, [r7, #14]

    channel = XMC_I2C1_CH0;
 800166e:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <_i2c_xfer+0x11c>)
 8001670:	60bb      	str	r3, [r7, #8]

    id_tmp = LIS3DH_RD_ADR;
 8001672:	2330      	movs	r3, #48	; 0x30
 8001674:	73bb      	strb	r3, [r7, #14]

    XMC_I2C_CH_MasterStart (channel, id_tmp, XMC_I2C_CH_CMD_WRITE);
 8001676:	7bbb      	ldrb	r3, [r7, #14]
 8001678:	b29b      	uxth	r3, r3
 800167a:	2200      	movs	r2, #0
 800167c:	4619      	mov	r1, r3
 800167e:	68b8      	ldr	r0, [r7, #8]
 8001680:	f001 faa6 	bl	8002bd0 <XMC_I2C_CH_MasterStart>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8001684:	bf00      	nop
 8001686:	68b8      	ldr	r0, [r7, #8]
 8001688:	f7ff ff96 	bl	80015b8 <XMC_I2C_CH_GetStatusFlag>
 800168c:	4603      	mov	r3, r0
 800168e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f7      	beq.n	8001686 <_i2c_xfer+0x3e>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8001696:	f44f 7100 	mov.w	r1, #512	; 0x200
 800169a:	68b8      	ldr	r0, [r7, #8]
 800169c:	f7ff ff98 	bl	80015d0 <XMC_I2C_CH_ClearStatusFlag>

    XMC_I2C_CH_MasterTransmit (channel, reg_addr);
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	4619      	mov	r1, r3
 80016a4:	68b8      	ldr	r0, [r7, #8]
 80016a6:	f001 fb21 	bl	8002cec <XMC_I2C_CH_MasterTransmit>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 80016aa:	bf00      	nop
 80016ac:	68b8      	ldr	r0, [r7, #8]
 80016ae:	f7ff ff83 	bl	80015b8 <XMC_I2C_CH_GetStatusFlag>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f7      	beq.n	80016ac <_i2c_xfer+0x64>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80016bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c0:	68b8      	ldr	r0, [r7, #8]
 80016c2:	f7ff ff85 	bl	80015d0 <XMC_I2C_CH_ClearStatusFlag>

    if (rd_wr) {
 80016c6:	793b      	ldrb	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d030      	beq.n	800172e <_i2c_xfer+0xe6>
        /* Read from REG */
        XMC_I2C_CH_MasterRepeatedStart (channel, id_tmp, XMC_I2C_CH_CMD_READ);
 80016cc:	7bbb      	ldrb	r3, [r7, #14]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2201      	movs	r2, #1
 80016d2:	4619      	mov	r1, r3
 80016d4:	68b8      	ldr	r0, [r7, #8]
 80016d6:	f001 faaf 	bl	8002c38 <XMC_I2C_CH_MasterRepeatedStart>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 80016da:	bf00      	nop
 80016dc:	68b8      	ldr	r0, [r7, #8]
 80016de:	f7ff ff6b 	bl	80015b8 <XMC_I2C_CH_GetStatusFlag>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f7      	beq.n	80016dc <_i2c_xfer+0x94>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80016ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f0:	68b8      	ldr	r0, [r7, #8]
 80016f2:	f7ff ff6d 	bl	80015d0 <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterReceiveNack (channel);
 80016f6:	68b8      	ldr	r0, [r7, #8]
 80016f8:	f001 fb1e 	bl	8002d38 <XMC_I2C_CH_MasterReceiveNack>

        while ( (XMC_USIC_CH_GetReceiveBufferStatus (channel) !=
 80016fc:	bf00      	nop
 80016fe:	68b8      	ldr	r0, [r7, #8]
 8001700:	f7ff ff0a 	bl	8001518 <XMC_USIC_CH_GetReceiveBufferStatus>
 8001704:	4603      	mov	r3, r0
 8001706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800170a:	d006      	beq.n	800171a <_i2c_xfer+0xd2>
                 (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) && ( (uint32_t) XMC_USIC_CH_GetReceiveBufferStatus (channel)
 800170c:	68b8      	ldr	r0, [r7, #8]
 800170e:	f7ff ff03 	bl	8001518 <XMC_USIC_CH_GetReceiveBufferStatus>
 8001712:	4603      	mov	r3, r0
 8001714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001718:	d1f1      	bne.n	80016fe <_i2c_xfer+0xb6>
                         != (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID0));

        _tmp_i2c_recv_ = XMC_I2C_CH_GetReceivedData (channel);
 800171a:	68b8      	ldr	r0, [r7, #8]
 800171c:	f001 fb32 	bl	8002d84 <XMC_I2C_CH_GetReceivedData>
 8001720:	4603      	mov	r3, r0
 8001722:	73fb      	strb	r3, [r7, #15]

        XMC_I2C_CH_MasterStop (channel);
 8001724:	68b8      	ldr	r0, [r7, #8]
 8001726:	f001 fabb 	bl	8002ca0 <XMC_I2C_CH_MasterStop>

        return _tmp_i2c_recv_;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	e016      	b.n	800175c <_i2c_xfer+0x114>
    } else {
        /* Write to REG */
        XMC_I2C_CH_MasterTransmit (channel, i2c_data);
 800172e:	797b      	ldrb	r3, [r7, #5]
 8001730:	4619      	mov	r1, r3
 8001732:	68b8      	ldr	r0, [r7, #8]
 8001734:	f001 fada 	bl	8002cec <XMC_I2C_CH_MasterTransmit>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8001738:	bf00      	nop
 800173a:	68b8      	ldr	r0, [r7, #8]
 800173c:	f7ff ff3c 	bl	80015b8 <XMC_I2C_CH_GetStatusFlag>
 8001740:	4603      	mov	r3, r0
 8001742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f7      	beq.n	800173a <_i2c_xfer+0xf2>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 800174a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800174e:	68b8      	ldr	r0, [r7, #8]
 8001750:	f7ff ff3e 	bl	80015d0 <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterStop (channel);
 8001754:	68b8      	ldr	r0, [r7, #8]
 8001756:	f001 faa3 	bl	8002ca0 <XMC_I2C_CH_MasterStop>

        return i2c_data;
 800175a:	797b      	ldrb	r3, [r7, #5]
    }
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	48020000 	.word	0x48020000

08001768 <initMEMSsensor>:
 * @param	none
 * @return	amount of errors if some occurred
 *
 */
uint8_t initMEMSsensor()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
    uint8_t error = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	71fb      	strb	r3, [r7, #7]
    uint8_t response = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	71bb      	strb	r3, [r7, #6]

    //set ODR (turn ON device)
    if(LIS3DH_SetODR(LIS3DH_ODR_100Hz) == 1)
 8001776:	2005      	movs	r0, #5
 8001778:	f000 f9e2 	bl	8001b40 <LIS3DH_SetODR>
 800177c:	4603      	mov	r3, r0
 800177e:	2b01      	cmp	r3, #1
 8001780:	d103      	bne.n	800178a <initMEMSsensor+0x22>
    {
        printf("LIS3DH_SetODR done...\n");
 8001782:	4826      	ldr	r0, [pc, #152]	; (800181c <initMEMSsensor+0xb4>)
 8001784:	f002 fd7e 	bl	8004284 <puts>
 8001788:	e008      	b.n	800179c <initMEMSsensor+0x34>
    }
    else
    {
        error++;
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	3301      	adds	r3, #1
 800178e:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001790:	4b23      	ldr	r3, [pc, #140]	; (8001820 <initMEMSsensor+0xb8>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b21      	ldr	r3, [pc, #132]	; (8001820 <initMEMSsensor+0xb8>)
 800179a:	701a      	strb	r2, [r3, #0]
    }

    //set PowerMode
    if(LIS3DH_SetMode(LIS3DH_NORMAL) == 1)
 800179c:	2002      	movs	r0, #2
 800179e:	f000 fa59 	bl	8001c54 <LIS3DH_SetMode>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d103      	bne.n	80017b0 <initMEMSsensor+0x48>
    {

        printf("LIS3DH_SetMode done...\n");
 80017a8:	481e      	ldr	r0, [pc, #120]	; (8001824 <initMEMSsensor+0xbc>)
 80017aa:	f002 fd6b 	bl	8004284 <puts>
 80017ae:	e008      	b.n	80017c2 <initMEMSsensor+0x5a>
    }
    else
    {
        error++;
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	3301      	adds	r3, #1
 80017b4:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <initMEMSsensor+0xb8>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <initMEMSsensor+0xb8>)
 80017c0:	701a      	strb	r2, [r3, #0]
    }

    //set Fullscale
    if(LIS3DH_SetFullScale(LIS3DH_FULLSCALE_4) == 1)
 80017c2:	2001      	movs	r0, #1
 80017c4:	f000 faf0 	bl	8001da8 <LIS3DH_SetFullScale>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d103      	bne.n	80017d6 <initMEMSsensor+0x6e>
    {

        printf("LIS3DH_SetFullScale done...\n");
 80017ce:	4816      	ldr	r0, [pc, #88]	; (8001828 <initMEMSsensor+0xc0>)
 80017d0:	f002 fd58 	bl	8004284 <puts>
 80017d4:	e008      	b.n	80017e8 <initMEMSsensor+0x80>
    }
    else
    {
        error++;
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	3301      	adds	r3, #1
 80017da:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <initMEMSsensor+0xb8>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <initMEMSsensor+0xb8>)
 80017e6:	701a      	strb	r2, [r3, #0]
    }

    //set axis Enable
    response = LIS3DH_SetAxis(LIS3DH_X_ENABLE | LIS3DH_Y_ENABLE | LIS3DH_Z_ENABLE);
 80017e8:	2007      	movs	r0, #7
 80017ea:	f000 fab1 	bl	8001d50 <LIS3DH_SetAxis>
 80017ee:	4603      	mov	r3, r0
 80017f0:	71bb      	strb	r3, [r7, #6]
    if(response == 1)
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d103      	bne.n	8001800 <initMEMSsensor+0x98>
    {
        printf("LIS3DH_SetAxis done...\n");
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <initMEMSsensor+0xc4>)
 80017fa:	f002 fd43 	bl	8004284 <puts>
 80017fe:	e008      	b.n	8001812 <initMEMSsensor+0xaa>
    }
    else
    {
        error++;
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	3301      	adds	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <initMEMSsensor+0xb8>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	3301      	adds	r3, #1
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b04      	ldr	r3, [pc, #16]	; (8001820 <initMEMSsensor+0xb8>)
 8001810:	701a      	strb	r2, [r3, #0]
    }

    return error;
 8001812:	79fb      	ldrb	r3, [r7, #7]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	0800a77c 	.word	0x0800a77c
 8001820:	20000a92 	.word	0x20000a92
 8001824:	0800a794 	.word	0x0800a794
 8001828:	0800a7ac 	.word	0x0800a7ac
 800182c:	0800a7c8 	.word	0x0800a7c8

08001830 <configMEMSsensor>:
 * @param	none
 * @return	amount of errors if some occurred
 *
 */
uint8_t configMEMSsensor()
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
    uint8_t error = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	71fb      	strb	r3, [r7, #7]
    uint8_t response = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	71bb      	strb	r3, [r7, #6]

    //set Interrupt Threshold
    if(LIS3DH_SetInt1Threshold(20) == 1)
 800183e:	2014      	movs	r0, #20
 8001840:	f000 fbe0 	bl	8002004 <LIS3DH_SetInt1Threshold>
 8001844:	4603      	mov	r3, r0
 8001846:	2b01      	cmp	r3, #1
 8001848:	d103      	bne.n	8001852 <configMEMSsensor+0x22>
    {
        printf("LIS3DH_SetInt1Thershold done...\n");
 800184a:	4839      	ldr	r0, [pc, #228]	; (8001930 <configMEMSsensor+0x100>)
 800184c:	f002 fd1a 	bl	8004284 <puts>
 8001850:	e008      	b.n	8001864 <configMEMSsensor+0x34>
    }
    else
    {
        error++;
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	3301      	adds	r3, #1
 8001856:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001858:	4b36      	ldr	r3, [pc, #216]	; (8001934 <configMEMSsensor+0x104>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b34      	ldr	r3, [pc, #208]	; (8001934 <configMEMSsensor+0x104>)
 8001862:	701a      	strb	r2, [r3, #0]
    }

    //set Interrupt configuration (all enabled)
    response = LIS3DH_SetIntConfiguration(LIS3DH_INT1_ZHIE_ENABLE | LIS3DH_INT1_ZLIE_ENABLE |
 8001864:	203f      	movs	r0, #63	; 0x3f
 8001866:	f000 fafb 	bl	8001e60 <LIS3DH_SetIntConfiguration>
 800186a:	4603      	mov	r3, r0
 800186c:	71bb      	strb	r3, [r7, #6]
                                          LIS3DH_INT1_YHIE_ENABLE | LIS3DH_INT1_YLIE_ENABLE |
                                          LIS3DH_INT1_XHIE_ENABLE | LIS3DH_INT1_XLIE_ENABLE );
    if(response == 1)
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d103      	bne.n	800187c <configMEMSsensor+0x4c>
    {
        printf("LIS3DH_SetIntConfiguration done...\n");
 8001874:	4830      	ldr	r0, [pc, #192]	; (8001938 <configMEMSsensor+0x108>)
 8001876:	f002 fd05 	bl	8004284 <puts>
 800187a:	e008      	b.n	800188e <configMEMSsensor+0x5e>
    }
    else
    {
        error++;
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	3301      	adds	r3, #1
 8001880:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001882:	4b2c      	ldr	r3, [pc, #176]	; (8001934 <configMEMSsensor+0x104>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	3301      	adds	r3, #1
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <configMEMSsensor+0x104>)
 800188c:	701a      	strb	r2, [r3, #0]
    }

    //set Interrupt Mode
    if(LIS3DH_SetIntMode(LIS3DH_INT_MODE_6D_POSITION) == 1)
 800188e:	2003      	movs	r0, #3
 8001890:	f000 fb10 	bl	8001eb4 <LIS3DH_SetIntMode>
 8001894:	4603      	mov	r3, r0
 8001896:	2b01      	cmp	r3, #1
 8001898:	d103      	bne.n	80018a2 <configMEMSsensor+0x72>
    {
        printf("LIS3DH_SetIntMode done...\n");
 800189a:	4828      	ldr	r0, [pc, #160]	; (800193c <configMEMSsensor+0x10c>)
 800189c:	f002 fcf2 	bl	8004284 <puts>
 80018a0:	e008      	b.n	80018b4 <configMEMSsensor+0x84>
    }
    else
    {
        error++;
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	3301      	adds	r3, #1
 80018a6:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <configMEMSsensor+0x104>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b20      	ldr	r3, [pc, #128]	; (8001934 <configMEMSsensor+0x104>)
 80018b2:	701a      	strb	r2, [r3, #0]
    }

    // internal temperature sensor
    if (LIS3DH_SetADCAux(MEMS_ENABLE) == 1)
 80018b4:	2001      	movs	r0, #1
 80018b6:	f000 f99f 	bl	8001bf8 <LIS3DH_SetADCAux>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d103      	bne.n	80018c8 <configMEMSsensor+0x98>
    {
        printf("LIS3DH_SetADCAux done...");
 80018c0:	481f      	ldr	r0, [pc, #124]	; (8001940 <configMEMSsensor+0x110>)
 80018c2:	f002 fc97 	bl	80041f4 <printf>
 80018c6:	e008      	b.n	80018da <configMEMSsensor+0xaa>
    }
    else
    {
        error++;
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	3301      	adds	r3, #1
 80018cc:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <configMEMSsensor+0x104>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	3301      	adds	r3, #1
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <configMEMSsensor+0x104>)
 80018d8:	701a      	strb	r2, [r3, #0]
    }

    if (LIS3DH_SetBDU(MEMS_ENABLE) == 1)
 80018da:	2001      	movs	r0, #1
 80018dc:	f000 fa92 	bl	8001e04 <LIS3DH_SetBDU>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d103      	bne.n	80018ee <configMEMSsensor+0xbe>
    {
        printf("LIS3DH_SetBDU done...\n");
 80018e6:	4817      	ldr	r0, [pc, #92]	; (8001944 <configMEMSsensor+0x114>)
 80018e8:	f002 fccc 	bl	8004284 <puts>
 80018ec:	e008      	b.n	8001900 <configMEMSsensor+0xd0>
    }
    else
    {
        error++;
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	3301      	adds	r3, #1
 80018f2:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <configMEMSsensor+0x104>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <configMEMSsensor+0x104>)
 80018fe:	701a      	strb	r2, [r3, #0]
    }

    if (LIS3DH_SetTemperature(MEMS_ENABLE) == 1)
 8001900:	2001      	movs	r0, #1
 8001902:	f000 f94b 	bl	8001b9c <LIS3DH_SetTemperature>
 8001906:	4603      	mov	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d103      	bne.n	8001914 <configMEMSsensor+0xe4>
    {
        printf("LIS3DH_SetTemperature done...\n");
 800190c:	480e      	ldr	r0, [pc, #56]	; (8001948 <configMEMSsensor+0x118>)
 800190e:	f002 fcb9 	bl	8004284 <puts>
 8001912:	e008      	b.n	8001926 <configMEMSsensor+0xf6>
    }
    else
    {
        error++;
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	3301      	adds	r3, #1
 8001918:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <configMEMSsensor+0x104>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b04      	ldr	r3, [pc, #16]	; (8001934 <configMEMSsensor+0x104>)
 8001924:	701a      	strb	r2, [r3, #0]
    }

    return error;
 8001926:	79fb      	ldrb	r3, [r7, #7]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	0800a7e0 	.word	0x0800a7e0
 8001934:	20000a92 	.word	0x20000a92
 8001938:	0800a800 	.word	0x0800a800
 800193c:	0800a824 	.word	0x0800a824
 8001940:	0800a840 	.word	0x0800a840
 8001944:	0800a85c 	.word	0x0800a85c
 8001948:	0800a874 	.word	0x0800a874

0800194c <get6Dposition>:
 * @param	none
 * @return	6D direction as integer 0 - 6
 *
 */
uint8_t get6Dposition()
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
    uint8_t response = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	71fb      	strb	r3, [r7, #7]

    response = LIS3DH_Get6DPosition(&position);
 8001956:	4846      	ldr	r0, [pc, #280]	; (8001a70 <get6Dposition+0x124>)
 8001958:	f000 fada 	bl	8001f10 <LIS3DH_Get6DPosition>
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]

    if((response == 1) && (old_position != position))
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d171      	bne.n	8001a4a <get6Dposition+0xfe>
 8001966:	4b43      	ldr	r3, [pc, #268]	; (8001a74 <get6Dposition+0x128>)
 8001968:	781a      	ldrb	r2, [r3, #0]
 800196a:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <get6Dposition+0x124>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d06b      	beq.n	8001a4a <get6Dposition+0xfe>
    {
        switch (position)
 8001972:	4b3f      	ldr	r3, [pc, #252]	; (8001a70 <get6Dposition+0x124>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	3b41      	subs	r3, #65	; 0x41
 8001978:	2b1f      	cmp	r3, #31
 800197a:	d85b      	bhi.n	8001a34 <get6Dposition+0xe8>
 800197c:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <get6Dposition+0x38>)
 800197e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001982:	bf00      	nop
 8001984:	08001a15 	.word	0x08001a15
 8001988:	08001a0d 	.word	0x08001a0d
 800198c:	08001a35 	.word	0x08001a35
 8001990:	08001a05 	.word	0x08001a05
 8001994:	08001a35 	.word	0x08001a35
 8001998:	08001a35 	.word	0x08001a35
 800199c:	08001a35 	.word	0x08001a35
 80019a0:	08001a1d 	.word	0x08001a1d
 80019a4:	08001a35 	.word	0x08001a35
 80019a8:	08001a35 	.word	0x08001a35
 80019ac:	08001a35 	.word	0x08001a35
 80019b0:	08001a35 	.word	0x08001a35
 80019b4:	08001a35 	.word	0x08001a35
 80019b8:	08001a35 	.word	0x08001a35
 80019bc:	08001a35 	.word	0x08001a35
 80019c0:	08001a2d 	.word	0x08001a2d
 80019c4:	08001a35 	.word	0x08001a35
 80019c8:	08001a35 	.word	0x08001a35
 80019cc:	08001a35 	.word	0x08001a35
 80019d0:	08001a35 	.word	0x08001a35
 80019d4:	08001a35 	.word	0x08001a35
 80019d8:	08001a35 	.word	0x08001a35
 80019dc:	08001a35 	.word	0x08001a35
 80019e0:	08001a35 	.word	0x08001a35
 80019e4:	08001a35 	.word	0x08001a35
 80019e8:	08001a35 	.word	0x08001a35
 80019ec:	08001a35 	.word	0x08001a35
 80019f0:	08001a35 	.word	0x08001a35
 80019f4:	08001a35 	.word	0x08001a35
 80019f8:	08001a35 	.word	0x08001a35
 80019fc:	08001a35 	.word	0x08001a35
 8001a00:	08001a25 	.word	0x08001a25
        {
        case LIS3DH_UP_SX:
        {
            direction = 0;
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <get6Dposition+0x12c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
            break;
 8001a0a:	e01d      	b.n	8001a48 <get6Dposition+0xfc>
        }
        case LIS3DH_UP_DX:
        {
            direction = 1;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <get6Dposition+0x12c>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
            break;
 8001a12:	e019      	b.n	8001a48 <get6Dposition+0xfc>
        }
        case LIS3DH_DW_SX:
        {
            direction = 2;
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <get6Dposition+0x12c>)
 8001a16:	2202      	movs	r2, #2
 8001a18:	701a      	strb	r2, [r3, #0]
            break;
 8001a1a:	e015      	b.n	8001a48 <get6Dposition+0xfc>
        }
        case LIS3DH_DW_DX:
        {
            direction = 3;
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <get6Dposition+0x12c>)
 8001a1e:	2203      	movs	r2, #3
 8001a20:	701a      	strb	r2, [r3, #0]
            break;
 8001a22:	e011      	b.n	8001a48 <get6Dposition+0xfc>
        }
        case LIS3DH_TOP:
        {
            direction = 4;
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <get6Dposition+0x12c>)
 8001a26:	2204      	movs	r2, #4
 8001a28:	701a      	strb	r2, [r3, #0]
            break;
 8001a2a:	e00d      	b.n	8001a48 <get6Dposition+0xfc>
        }
        case LIS3DH_BOTTOM:
        {
            direction = 5;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <get6Dposition+0x12c>)
 8001a2e:	2205      	movs	r2, #5
 8001a30:	701a      	strb	r2, [r3, #0]
            break;
 8001a32:	e009      	b.n	8001a48 <get6Dposition+0xfc>
        }
        default:
        {
            direction = 6;
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <get6Dposition+0x12c>)
 8001a36:	2206      	movs	r2, #6
 8001a38:	701a      	strb	r2, [r3, #0]
            errorcount++;
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <get6Dposition+0x130>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <get6Dposition+0x130>)
 8001a44:	701a      	strb	r2, [r3, #0]
            break;
 8001a46:	bf00      	nop
        }
        }
    }
 8001a48:	e008      	b.n	8001a5c <get6Dposition+0x110>
    else if(response != 1)
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d005      	beq.n	8001a5c <get6Dposition+0x110>
    {
        errorcount++;
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <get6Dposition+0x130>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	3301      	adds	r3, #1
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <get6Dposition+0x130>)
 8001a5a:	701a      	strb	r2, [r3, #0]
    }
    old_position = position;
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <get6Dposition+0x124>)
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <get6Dposition+0x128>)
 8001a62:	701a      	strb	r2, [r3, #0]

    return direction;
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <get6Dposition+0x12c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000a9e 	.word	0x20000a9e
 8001a74:	20000ab4 	.word	0x20000ab4
 8001a78:	20000ab1 	.word	0x20000ab1
 8001a7c:	20000a92 	.word	0x20000a92

08001a80 <getAxesRawData>:
 * @param	none
 * @return	acceleration data in structure
 *
 */
AXESRAWDATA getAxesRawData()
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
    uint8_t response = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	75fb      	strb	r3, [r7, #23]
    AxesRaw_t data;
    AXESRAWDATA dataOut;
    dataOut.axisX = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	813b      	strh	r3, [r7, #8]
    dataOut.axisY = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	817b      	strh	r3, [r7, #10]
    dataOut.axisZ = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	81bb      	strh	r3, [r7, #12]

    response = LIS3DH_GetAccAxesRaw(&data);
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 facb 	bl	8002038 <LIS3DH_GetAccAxesRaw>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	75fb      	strb	r3, [r7, #23]
    if(response != 1)
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d005      	beq.n	8001ab8 <getAxesRawData+0x38>
    {
        errorcount++;
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <getAxesRawData+0x68>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <getAxesRawData+0x68>)
 8001ab6:	701a      	strb	r2, [r3, #0]
    }

    dataOut.axisX = data.AXIS_X;
 8001ab8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	813b      	strh	r3, [r7, #8]
    dataOut.axisY = data.AXIS_Y;
 8001ac0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	817b      	strh	r3, [r7, #10]
    dataOut.axisZ = data.AXIS_Z;
 8001ac8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	81bb      	strh	r3, [r7, #12]

    return dataOut;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f107 0308 	add.w	r3, r7, #8
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	6010      	str	r0, [r2, #0]
 8001adc:	889b      	ldrh	r3, [r3, #4]
 8001ade:	8093      	strh	r3, [r2, #4]
}
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000a92 	.word	0x20000a92

08001aec <LIS3DH_ReadReg>:
*			: I2C or SPI reading functions
* Input			: Register Address
* Output		: Data REad
* Return		: None
*******************************************************************************/
u8_t LIS3DH_ReadReg(u8_t Reg, u8_t* Data) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]

    //To be completed with either I2c or SPI reading function
    //i.e. *Data = SPI_Mems_Read_Reg( Reg );

    *Data = _i2c_xfer (0, Reg, 0, 1);
 8001af8:	79f9      	ldrb	r1, [r7, #7]
 8001afa:	2301      	movs	r3, #1
 8001afc:	2200      	movs	r2, #0
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff fda2 	bl	8001648 <_i2c_xfer>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	701a      	strb	r2, [r3, #0]

    return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop

08001b18 <LIS3DH_WriteReg>:
*			: I2C or SPI writing function
* Input			: Register Address, Data to be written
* Output		: None
* Return		: None
*******************************************************************************/
u8_t LIS3DH_WriteReg(u8_t WriteAddr, u8_t Data) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460a      	mov	r2, r1
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	4613      	mov	r3, r2
 8001b26:	71bb      	strb	r3, [r7, #6]

    //To be completed with either I2c or SPI writing function
    //i.e. SPI_Mems_Write_Reg(WriteAddr, Data);

    _i2c_xfer (0, WriteAddr, Data, 0);
 8001b28:	79ba      	ldrb	r2, [r7, #6]
 8001b2a:	79f9      	ldrb	r1, [r7, #7]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f7ff fd8a 	bl	8001648 <_i2c_xfer>

    return 1;
 8001b34:	2301      	movs	r3, #1
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop

08001b40 <LIS3DH_SetODR>:
* Description    : Sets LIS3DH Output Data Rate
* Input          : Output Data Rate
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetODR(LIS3DH_ODR_t ov) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001b4a:	f107 030f 	add.w	r3, r7, #15
 8001b4e:	4619      	mov	r1, r3
 8001b50:	2020      	movs	r0, #32
 8001b52:	f7ff ffcb 	bl	8001aec <LIS3DH_ReadReg>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <LIS3DH_SetODR+0x20>
        return MEMS_ERROR;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e018      	b.n	8001b92 <LIS3DH_SetODR+0x52>

    value &= 0x0f;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	73fb      	strb	r3, [r7, #15]
    value |= ov<<LIS3DH_ODR_BIT;
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	b25a      	sxtb	r2, r3
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	b25b      	sxtb	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	2020      	movs	r0, #32
 8001b82:	f7ff ffc9 	bl	8001b18 <LIS3DH_WriteReg>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <LIS3DH_SetODR+0x50>
        return MEMS_ERROR;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e000      	b.n	8001b92 <LIS3DH_SetODR+0x52>

    return MEMS_SUCCESS;
 8001b90:	2301      	movs	r3, #1
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop

08001b9c <LIS3DH_SetTemperature>:
* Output         : None
* Note           : For Read Temperature by LIS3DH_OUT_AUX_3, LIS3DH_SetADCAux and LIS3DH_SetBDU
				   functions must be ENABLE
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetTemperature(State_t state) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
 8001ba6:	f107 030f 	add.w	r3, r7, #15
 8001baa:	4619      	mov	r1, r3
 8001bac:	201f      	movs	r0, #31
 8001bae:	f7ff ff9d 	bl	8001aec <LIS3DH_ReadReg>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <LIS3DH_SetTemperature+0x20>
        return MEMS_ERROR;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e018      	b.n	8001bee <LIS3DH_SetTemperature+0x52>

    value &= 0xBF;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	73fb      	strb	r3, [r7, #15]
    value |= state<<LIS3DH_TEMP_EN;
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	019b      	lsls	r3, r3, #6
 8001bca:	b25a      	sxtb	r2, r3
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	b25b      	sxtb	r3, r3
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	b25b      	sxtb	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	201f      	movs	r0, #31
 8001bde:	f7ff ff9b 	bl	8001b18 <LIS3DH_WriteReg>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <LIS3DH_SetTemperature+0x50>
        return MEMS_ERROR;
 8001be8:	2300      	movs	r3, #0
 8001bea:	e000      	b.n	8001bee <LIS3DH_SetTemperature+0x52>

    return MEMS_SUCCESS;
 8001bec:	2301      	movs	r3, #1
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop

08001bf8 <LIS3DH_SetADCAux>:
* Description    : Sets LIS3DH Output ADC
* Input          : MEMS_ENABLE, MEMS_DISABLE
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetADCAux(State_t state) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
 8001c02:	f107 030f 	add.w	r3, r7, #15
 8001c06:	4619      	mov	r1, r3
 8001c08:	201f      	movs	r0, #31
 8001c0a:	f7ff ff6f 	bl	8001aec <LIS3DH_ReadReg>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <LIS3DH_SetADCAux+0x20>
        return MEMS_ERROR;
 8001c14:	2300      	movs	r3, #0
 8001c16:	e018      	b.n	8001c4a <LIS3DH_SetADCAux+0x52>

    value &= 0x7F;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	73fb      	strb	r3, [r7, #15]
    value |= state<<LIS3DH_ADC_PD;
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	01db      	lsls	r3, r3, #7
 8001c26:	b25a      	sxtb	r2, r3
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	b25b      	sxtb	r3, r3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b25b      	sxtb	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	4619      	mov	r1, r3
 8001c38:	201f      	movs	r0, #31
 8001c3a:	f7ff ff6d 	bl	8001b18 <LIS3DH_WriteReg>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <LIS3DH_SetADCAux+0x50>
        return MEMS_ERROR;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e000      	b.n	8001c4a <LIS3DH_SetADCAux+0x52>

    return MEMS_SUCCESS;
 8001c48:	2301      	movs	r3, #1
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop

08001c54 <LIS3DH_SetMode>:
* Description    : Sets LIS3DH Operating Mode
* Input          : Modality (LIS3DH_NORMAL, LIS3DH_LOW_POWER, LIS3DH_POWER_DOWN)
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetMode(LIS3DH_Mode_t md) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
    u8_t value;
    u8_t value2;
    static   u8_t ODR_old_value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001c5e:	f107 030f 	add.w	r3, r7, #15
 8001c62:	4619      	mov	r1, r3
 8001c64:	2020      	movs	r0, #32
 8001c66:	f7ff ff41 	bl	8001aec <LIS3DH_ReadReg>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <LIS3DH_SetMode+0x20>
        return MEMS_ERROR;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e066      	b.n	8001d42 <LIS3DH_SetMode+0xee>

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value2) )
 8001c74:	f107 030e 	add.w	r3, r7, #14
 8001c78:	4619      	mov	r1, r3
 8001c7a:	2023      	movs	r0, #35	; 0x23
 8001c7c:	f7ff ff36 	bl	8001aec <LIS3DH_ReadReg>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <LIS3DH_SetMode+0x36>
        return MEMS_ERROR;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e05b      	b.n	8001d42 <LIS3DH_SetMode+0xee>

    if((value & 0xF0)==0)
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10b      	bne.n	8001cac <LIS3DH_SetMode+0x58>
        value = value | (ODR_old_value & 0xF0); //if it comes from POWERDOWN
 8001c94:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <LIS3DH_SetMode+0xf8>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	f023 030f 	bic.w	r3, r3, #15
 8001c9e:	b25a      	sxtb	r2, r3
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	73fb      	strb	r3, [r7, #15]

    switch(md) {
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d01e      	beq.n	8001cf0 <LIS3DH_SetMode+0x9c>
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d00a      	beq.n	8001ccc <LIS3DH_SetMode+0x78>
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d12c      	bne.n	8001d14 <LIS3DH_SetMode+0xc0>

    case LIS3DH_POWER_DOWN:
        ODR_old_value = value;
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <LIS3DH_SetMode+0xf8>)
 8001cbe:	701a      	strb	r2, [r3, #0]
        value &= 0x0F;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	73fb      	strb	r3, [r7, #15]
        break;
 8001cca:	e025      	b.n	8001d18 <LIS3DH_SetMode+0xc4>

    case LIS3DH_NORMAL:
        value &= 0xF7;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	f023 0308 	bic.w	r3, r3, #8
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	73fb      	strb	r3, [r7, #15]
        value |= (MEMS_RESET<<LIS3DH_LPEN);
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 8001cda:	7bbb      	ldrb	r3, [r7, #14]
 8001cdc:	f023 0308 	bic.w	r3, r3, #8
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_SET<<LIS3DH_HR);   //set HighResolution_BIT
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	f043 0308 	orr.w	r3, r3, #8
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	73bb      	strb	r3, [r7, #14]
        break;
 8001cee:	e013      	b.n	8001d18 <LIS3DH_SetMode+0xc4>

    case LIS3DH_LOW_POWER:
        value &= 0xF7;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	f023 0308 	bic.w	r3, r3, #8
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	73fb      	strb	r3, [r7, #15]
        value |=  (MEMS_SET<<LIS3DH_LPEN);
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	f043 0308 	orr.w	r3, r3, #8
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 8001d04:	7bbb      	ldrb	r3, [r7, #14]
 8001d06:	f023 0308 	bic.w	r3, r3, #8
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_RESET<<LIS3DH_HR); //reset HighResolution_BIT
 8001d0e:	7bbb      	ldrb	r3, [r7, #14]
 8001d10:	73bb      	strb	r3, [r7, #14]
        break;
 8001d12:	e001      	b.n	8001d18 <LIS3DH_SetMode+0xc4>

    default:
        return MEMS_ERROR;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e014      	b.n	8001d42 <LIS3DH_SetMode+0xee>
    }

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	2020      	movs	r0, #32
 8001d1e:	f7ff fefb 	bl	8001b18 <LIS3DH_WriteReg>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <LIS3DH_SetMode+0xd8>
        return MEMS_ERROR;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e00a      	b.n	8001d42 <LIS3DH_SetMode+0xee>

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value2) )
 8001d2c:	7bbb      	ldrb	r3, [r7, #14]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	2023      	movs	r0, #35	; 0x23
 8001d32:	f7ff fef1 	bl	8001b18 <LIS3DH_WriteReg>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <LIS3DH_SetMode+0xec>
        return MEMS_ERROR;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e000      	b.n	8001d42 <LIS3DH_SetMode+0xee>

    return MEMS_SUCCESS;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000a51 	.word	0x20000a51

08001d50 <LIS3DH_SetAxis>:
* Input          : LIS3DH_X_ENABLE/DISABLE | LIS3DH_Y_ENABLE/DISABLE | LIS3DH_Z_ENABLE/DISABLE
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetAxis(LIS3DH_Axis_t axis) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001d5a:	f107 030f 	add.w	r3, r7, #15
 8001d5e:	4619      	mov	r1, r3
 8001d60:	2020      	movs	r0, #32
 8001d62:	f7ff fec3 	bl	8001aec <LIS3DH_ReadReg>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <LIS3DH_SetAxis+0x20>
        return MEMS_ERROR;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e017      	b.n	8001da0 <LIS3DH_SetAxis+0x50>
    value &= 0xF8;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	f023 0307 	bic.w	r3, r3, #7
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	73fb      	strb	r3, [r7, #15]
    value |= (0x07 & axis);
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	2020      	movs	r0, #32
 8001d90:	f7ff fec2 	bl	8001b18 <LIS3DH_WriteReg>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <LIS3DH_SetAxis+0x4e>
        return MEMS_ERROR;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e000      	b.n	8001da0 <LIS3DH_SetAxis+0x50>

    return MEMS_SUCCESS;
 8001d9e:	2301      	movs	r3, #1
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <LIS3DH_SetFullScale>:
* Description    : Sets the LIS3DH FullScale
* Input          : LIS3DH_FULLSCALE_2/LIS3DH_FULLSCALE_4/LIS3DH_FULLSCALE_8/LIS3DH_FULLSCALE_16
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetFullScale(LIS3DH_Fullscale_t fs) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 8001db2:	f107 030f 	add.w	r3, r7, #15
 8001db6:	4619      	mov	r1, r3
 8001db8:	2023      	movs	r0, #35	; 0x23
 8001dba:	f7ff fe97 	bl	8001aec <LIS3DH_ReadReg>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <LIS3DH_SetFullScale+0x20>
        return MEMS_ERROR;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e018      	b.n	8001dfa <LIS3DH_SetFullScale+0x52>

    value &= 0xCF;
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	73fb      	strb	r3, [r7, #15]
    value |= (fs<<LIS3DH_FS);
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	b25a      	sxtb	r2, r3
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	b25b      	sxtb	r3, r3
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	4619      	mov	r1, r3
 8001de8:	2023      	movs	r0, #35	; 0x23
 8001dea:	f7ff fe95 	bl	8001b18 <LIS3DH_WriteReg>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <LIS3DH_SetFullScale+0x50>
        return MEMS_ERROR;
 8001df4:	2300      	movs	r3, #0
 8001df6:	e000      	b.n	8001dfa <LIS3DH_SetFullScale+0x52>

    return MEMS_SUCCESS;
 8001df8:	2301      	movs	r3, #1
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop

08001e04 <LIS3DH_SetBDU>:
* Description    : Enable/Disable Block Data Update Functionality
* Input          : ENABLE/DISABLE
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetBDU(State_t bdu) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 8001e0e:	f107 030f 	add.w	r3, r7, #15
 8001e12:	4619      	mov	r1, r3
 8001e14:	2023      	movs	r0, #35	; 0x23
 8001e16:	f7ff fe69 	bl	8001aec <LIS3DH_ReadReg>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <LIS3DH_SetBDU+0x20>
        return MEMS_ERROR;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e018      	b.n	8001e56 <LIS3DH_SetBDU+0x52>

    value &= 0x7F;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	73fb      	strb	r3, [r7, #15]
    value |= (bdu<<LIS3DH_BDU);
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	01db      	lsls	r3, r3, #7
 8001e32:	b25a      	sxtb	r2, r3
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	b25b      	sxtb	r3, r3
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	b25b      	sxtb	r3, r3
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	4619      	mov	r1, r3
 8001e44:	2023      	movs	r0, #35	; 0x23
 8001e46:	f7ff fe67 	bl	8001b18 <LIS3DH_WriteReg>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <LIS3DH_SetBDU+0x50>
        return MEMS_ERROR;
 8001e50:	2300      	movs	r3, #0
 8001e52:	e000      	b.n	8001e56 <LIS3DH_SetBDU+0x52>

    return MEMS_SUCCESS;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop

08001e60 <LIS3DH_SetIntConfiguration>:
* Input          : LIS3DH_INT1_AND/OR | LIS3DH_INT1_ZHIE_ENABLE/DISABLE | LIS3DH_INT1_ZLIE_ENABLE/DISABLE...
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntConfiguration(LIS3DH_Int1Conf_t ic) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 8001e6a:	f107 030f 	add.w	r3, r7, #15
 8001e6e:	4619      	mov	r1, r3
 8001e70:	2030      	movs	r0, #48	; 0x30
 8001e72:	f7ff fe3b 	bl	8001aec <LIS3DH_ReadReg>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <LIS3DH_SetIntConfiguration+0x20>
        return MEMS_ERROR;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e014      	b.n	8001eaa <LIS3DH_SetIntConfiguration+0x4a>

    value &= 0x40;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	73fb      	strb	r3, [r7, #15]
    value |= ic;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	4619      	mov	r1, r3
 8001e98:	2030      	movs	r0, #48	; 0x30
 8001e9a:	f7ff fe3d 	bl	8001b18 <LIS3DH_WriteReg>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <LIS3DH_SetIntConfiguration+0x48>
        return MEMS_ERROR;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e000      	b.n	8001eaa <LIS3DH_SetIntConfiguration+0x4a>

    return MEMS_SUCCESS;
 8001ea8:	2301      	movs	r3, #1
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop

08001eb4 <LIS3DH_SetIntMode>:
* Input          : LIS3DH_INT_MODE_OR, LIS3DH_INT_MODE_6D_MOVEMENT, LIS3DH_INT_MODE_AND,
				   LIS3DH_INT_MODE_6D_POSITION
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntMode(LIS3DH_Int1Mode_t int_mode) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 8001ebe:	f107 030f 	add.w	r3, r7, #15
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	2030      	movs	r0, #48	; 0x30
 8001ec6:	f7ff fe11 	bl	8001aec <LIS3DH_ReadReg>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <LIS3DH_SetIntMode+0x20>
        return MEMS_ERROR;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e018      	b.n	8001f06 <LIS3DH_SetIntMode+0x52>

    value &= 0x3F;
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	73fb      	strb	r3, [r7, #15]
    value |= (int_mode<<LIS3DH_INT_6D);
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	019b      	lsls	r3, r3, #6
 8001ee2:	b25a      	sxtb	r2, r3
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	b25b      	sxtb	r3, r3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	b25b      	sxtb	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	2030      	movs	r0, #48	; 0x30
 8001ef6:	f7ff fe0f 	bl	8001b18 <LIS3DH_WriteReg>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <LIS3DH_SetIntMode+0x50>
        return MEMS_ERROR;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e000      	b.n	8001f06 <LIS3DH_SetIntMode+0x52>

    return MEMS_SUCCESS;
 8001f04:	2301      	movs	r3, #1
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop

08001f10 <LIS3DH_Get6DPosition>:
* Description    : 6D, 4D Interrupt Position Detect
* Input          : Byte to empty by POSITION_6D_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_Get6DPosition(u8_t* val) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_SRC, &value) )
 8001f18:	f107 030f 	add.w	r3, r7, #15
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	2031      	movs	r0, #49	; 0x31
 8001f20:	f7ff fde4 	bl	8001aec <LIS3DH_ReadReg>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <LIS3DH_Get6DPosition+0x1e>
        return MEMS_ERROR;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e065      	b.n	8001ffa <LIS3DH_Get6DPosition+0xea>

    value &= 0x7F;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	73fb      	strb	r3, [r7, #15]

    switch (value) {
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	3b41      	subs	r3, #65	; 0x41
 8001f3c:	2b1f      	cmp	r3, #31
 8001f3e:	d85b      	bhi.n	8001ff8 <LIS3DH_Get6DPosition+0xe8>
 8001f40:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <LIS3DH_Get6DPosition+0x38>)
 8001f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f46:	bf00      	nop
 8001f48:	08001fd9 	.word	0x08001fd9
 8001f4c:	08001fd1 	.word	0x08001fd1
 8001f50:	08001ff9 	.word	0x08001ff9
 8001f54:	08001fc9 	.word	0x08001fc9
 8001f58:	08001ff9 	.word	0x08001ff9
 8001f5c:	08001ff9 	.word	0x08001ff9
 8001f60:	08001ff9 	.word	0x08001ff9
 8001f64:	08001fe1 	.word	0x08001fe1
 8001f68:	08001ff9 	.word	0x08001ff9
 8001f6c:	08001ff9 	.word	0x08001ff9
 8001f70:	08001ff9 	.word	0x08001ff9
 8001f74:	08001ff9 	.word	0x08001ff9
 8001f78:	08001ff9 	.word	0x08001ff9
 8001f7c:	08001ff9 	.word	0x08001ff9
 8001f80:	08001ff9 	.word	0x08001ff9
 8001f84:	08001ff1 	.word	0x08001ff1
 8001f88:	08001ff9 	.word	0x08001ff9
 8001f8c:	08001ff9 	.word	0x08001ff9
 8001f90:	08001ff9 	.word	0x08001ff9
 8001f94:	08001ff9 	.word	0x08001ff9
 8001f98:	08001ff9 	.word	0x08001ff9
 8001f9c:	08001ff9 	.word	0x08001ff9
 8001fa0:	08001ff9 	.word	0x08001ff9
 8001fa4:	08001ff9 	.word	0x08001ff9
 8001fa8:	08001ff9 	.word	0x08001ff9
 8001fac:	08001ff9 	.word	0x08001ff9
 8001fb0:	08001ff9 	.word	0x08001ff9
 8001fb4:	08001ff9 	.word	0x08001ff9
 8001fb8:	08001ff9 	.word	0x08001ff9
 8001fbc:	08001ff9 	.word	0x08001ff9
 8001fc0:	08001ff9 	.word	0x08001ff9
 8001fc4:	08001fe9 	.word	0x08001fe9
    case LIS3DH_UP_SX:
        *val = LIS3DH_UP_SX;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2244      	movs	r2, #68	; 0x44
 8001fcc:	701a      	strb	r2, [r3, #0]
        break;
 8001fce:	e013      	b.n	8001ff8 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_UP_DX:
        *val = LIS3DH_UP_DX;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2242      	movs	r2, #66	; 0x42
 8001fd4:	701a      	strb	r2, [r3, #0]
        break;
 8001fd6:	e00f      	b.n	8001ff8 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_SX:
        *val = LIS3DH_DW_SX;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2241      	movs	r2, #65	; 0x41
 8001fdc:	701a      	strb	r2, [r3, #0]
        break;
 8001fde:	e00b      	b.n	8001ff8 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_DX:
        *val = LIS3DH_DW_DX;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2248      	movs	r2, #72	; 0x48
 8001fe4:	701a      	strb	r2, [r3, #0]
        break;
 8001fe6:	e007      	b.n	8001ff8 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_TOP:
        *val = LIS3DH_TOP;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2260      	movs	r2, #96	; 0x60
 8001fec:	701a      	strb	r2, [r3, #0]
        break;
 8001fee:	e003      	b.n	8001ff8 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_BOTTOM:
        *val = LIS3DH_BOTTOM;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2250      	movs	r2, #80	; 0x50
 8001ff4:	701a      	strb	r2, [r3, #0]
        break;
 8001ff6:	bf00      	nop
    }

    return MEMS_SUCCESS;
 8001ff8:	2301      	movs	r3, #1
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop

08002004 <LIS3DH_SetInt1Threshold>:
* Description    : Sets Interrupt 1 Threshold
* Input          : Threshold = [0,31]
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetInt1Threshold(u8_t ths) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
    if (ths > 127)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	da01      	bge.n	800201a <LIS3DH_SetInt1Threshold+0x16>
        return MEMS_ERROR;
 8002016:	2300      	movs	r3, #0
 8002018:	e00a      	b.n	8002030 <LIS3DH_SetInt1Threshold+0x2c>

    if( !LIS3DH_WriteReg(LIS3DH_INT1_THS, ths) )
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	4619      	mov	r1, r3
 800201e:	2032      	movs	r0, #50	; 0x32
 8002020:	f7ff fd7a 	bl	8001b18 <LIS3DH_WriteReg>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <LIS3DH_SetInt1Threshold+0x2a>
        return MEMS_ERROR;
 800202a:	2300      	movs	r3, #0
 800202c:	e000      	b.n	8002030 <LIS3DH_SetInt1Threshold+0x2c>

    return MEMS_SUCCESS;
 800202e:	2301      	movs	r3, #1
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <LIS3DH_GetAccAxesRaw>:
* Description    : Read the Acceleration Values Output Registers
* Input          : buffer to empity by AxesRaw_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_GetAccAxesRaw(AxesRaw_t* buff) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    i16_t value;
    u8_t *valueL = (u8_t *)(&value);
 8002040:	f107 030e 	add.w	r3, r7, #14
 8002044:	617b      	str	r3, [r7, #20]
    u8_t *valueH = ((u8_t *)(&value)+1);
 8002046:	f107 030e 	add.w	r3, r7, #14
 800204a:	3301      	adds	r3, #1
 800204c:	613b      	str	r3, [r7, #16]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_L, valueL) )
 800204e:	6979      	ldr	r1, [r7, #20]
 8002050:	2028      	movs	r0, #40	; 0x28
 8002052:	f7ff fd4b 	bl	8001aec <LIS3DH_ReadReg>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <LIS3DH_GetAccAxesRaw+0x28>
        return MEMS_ERROR;
 800205c:	2300      	movs	r3, #0
 800205e:	e039      	b.n	80020d4 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_H, valueH) )
 8002060:	6939      	ldr	r1, [r7, #16]
 8002062:	2029      	movs	r0, #41	; 0x29
 8002064:	f7ff fd42 	bl	8001aec <LIS3DH_ReadReg>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <LIS3DH_GetAccAxesRaw+0x3a>
        return MEMS_ERROR;
 800206e:	2300      	movs	r3, #0
 8002070:	e030      	b.n	80020d4 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_X = value;
 8002072:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	801a      	strh	r2, [r3, #0]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_L, valueL) )
 800207a:	6979      	ldr	r1, [r7, #20]
 800207c:	202a      	movs	r0, #42	; 0x2a
 800207e:	f7ff fd35 	bl	8001aec <LIS3DH_ReadReg>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <LIS3DH_GetAccAxesRaw+0x54>
        return MEMS_ERROR;
 8002088:	2300      	movs	r3, #0
 800208a:	e023      	b.n	80020d4 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_H, valueH) )
 800208c:	6939      	ldr	r1, [r7, #16]
 800208e:	202b      	movs	r0, #43	; 0x2b
 8002090:	f7ff fd2c 	bl	8001aec <LIS3DH_ReadReg>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <LIS3DH_GetAccAxesRaw+0x66>
        return MEMS_ERROR;
 800209a:	2300      	movs	r3, #0
 800209c:	e01a      	b.n	80020d4 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Y = value;
 800209e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	805a      	strh	r2, [r3, #2]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_L, valueL) )
 80020a6:	6979      	ldr	r1, [r7, #20]
 80020a8:	202c      	movs	r0, #44	; 0x2c
 80020aa:	f7ff fd1f 	bl	8001aec <LIS3DH_ReadReg>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <LIS3DH_GetAccAxesRaw+0x80>
        return MEMS_ERROR;
 80020b4:	2300      	movs	r3, #0
 80020b6:	e00d      	b.n	80020d4 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_H, valueH) )
 80020b8:	6939      	ldr	r1, [r7, #16]
 80020ba:	202d      	movs	r0, #45	; 0x2d
 80020bc:	f7ff fd16 	bl	8001aec <LIS3DH_ReadReg>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <LIS3DH_GetAccAxesRaw+0x92>
        return MEMS_ERROR;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e004      	b.n	80020d4 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Z = value;
 80020ca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	809a      	strh	r2, [r3, #4]

    return MEMS_SUCCESS;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db0a      	blt.n	8002106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f0:	490d      	ldr	r1, [pc, #52]	; (8002128 <__NVIC_SetPriority+0x4c>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	440b      	add	r3, r1
 8002100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002104:	e00a      	b.n	800211c <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	4909      	ldr	r1, [pc, #36]	; (800212c <__NVIC_SetPriority+0x50>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3b04      	subs	r3, #4
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	0092      	lsls	r2, r2, #2
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	440b      	add	r3, r1
 800211a:	761a      	strb	r2, [r3, #24]
  }
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000e100 	.word	0xe000e100
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002140:	d301      	bcc.n	8002146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002142:	2301      	movs	r3, #1
 8002144:	e00f      	b.n	8002166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002146:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <SysTick_Config+0x40>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214e:	213f      	movs	r1, #63	; 0x3f
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f7ff ffc2 	bl	80020dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <SysTick_Config+0x40>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215e:	4b04      	ldr	r3, [pc, #16]	; (8002170 <SysTick_Config+0x40>)
 8002160:	2207      	movs	r2, #7
 8002162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	e000e010 	.word	0xe000e010

08002174 <main>:
/**
 * @brief	main routine
 *
 */
int main (void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b090      	sub	sp, #64	; 0x40
 8002178:	af00      	add	r7, sp, #0
    char rxBuff[RXBUFFERSIZE];

    // init receive buffer
    memset (&rxBuff, 0, sizeof (rxBuff));
 800217a:	463b      	mov	r3, r7
 800217c:	2240      	movs	r2, #64	; 0x40
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f001 ffe9 	bl	8004158 <memset>

    // init values for globals
    initGlobals();
 8002186:	f7fe fc49 	bl	8000a1c <initGlobals>

    // init DEBUG, UART, I2C, PWM
    initRetargetSwo();
 800218a:	f7ff f945 	bl	8001418 <initRetargetSwo>
    _init_uart0_ch0();
 800218e:	f7fe f961 	bl	8000454 <_init_uart0_ch0>
    _init_i2c1_ch0();
 8002192:	f7ff fa2f 	bl	80015f4 <_init_i2c1_ch0>
    initServoPWM();
 8002196:	f7fe fa5d 	bl	8000654 <initServoPWM>

    // center both servo
    pwm(SERVOUPCENTER, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	f04f 0000 	mov.w	r0, #0
 80021a0:	4950      	ldr	r1, [pc, #320]	; (80022e4 <main+0x170>)
 80021a2:	f7fe fa5d 	bl	8000660 <pwm>
    pwm(SERVOLOCENTER, 1);
 80021a6:	2201      	movs	r2, #1
 80021a8:	f04f 0000 	mov.w	r0, #0
 80021ac:	494d      	ldr	r1, [pc, #308]	; (80022e4 <main+0x170>)
 80021ae:	f7fe fa57 	bl	8000660 <pwm>

    // init LED output
    outputInit();
 80021b2:	f7fe fc9d 	bl	8000af0 <outputInit>
    ledSetting(0);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7fe fe6a 	bl	8000e90 <ledSetting>

    // init BUTTONS
    inputInit();
 80021bc:	f7ff f868 	bl	8001290 <inputInit>
#endif

    // init MEMS
    while (1)
    {
        if (initMEMSsensor() == 0)
 80021c0:	f7ff fad2 	bl	8001768 <initMEMSsensor>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1fa      	bne.n	80021c0 <main+0x4c>
    }

    // config MEMS
    while (1)
    {
        if (configMEMSsensor() == 0)
 80021ca:	f7ff fb31 	bl	8001830 <configMEMSsensor>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d000      	beq.n	80021d6 <main+0x62>
        {
#if DEBUG
            printf("Error MEMS config, retry...\n");
#endif
        }
    }
 80021d4:	e7f9      	b.n	80021ca <main+0x56>
        if (configMEMSsensor() == 0)
        {
#if DEBUG
            printf("MEMS config done...\n");
#endif
            break;
 80021d6:	bf00      	nop
#endif
        }
    }

    // set up SysTick
    SysTick_Config (SystemCoreClock / SYSTEMTICKDIVIDER);
 80021d8:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <main+0x174>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a43      	ldr	r2, [pc, #268]	; (80022ec <main+0x178>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	099b      	lsrs	r3, r3, #6
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ffa3 	bl	8002130 <SysTick_Config>

    // main loop
    while(1)
    {
        // clear buffer and receive incoming data
        memset (&rxBuff, 0, sizeof (rxBuff));
 80021ea:	463b      	mov	r3, r7
 80021ec:	2240      	movs	r2, #64	; 0x40
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 ffb1 	bl	8004158 <memset>
        _uart_get_string (rxBuff);
 80021f6:	463b      	mov	r3, r7
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f9ff 	bl	80005fc <_uart_get_string>
#if DEBUG
        printf("received %s\n", rxBuff);
#endif

        // check received command and react accodingly
        if (strncmp(rxBuff, "#REQ,", strlen(rxBuff)) == 0)
 80021fe:	463b      	mov	r3, r7
 8002200:	4618      	mov	r0, r3
 8002202:	f002 f87d 	bl	8004300 <strlen>
 8002206:	4602      	mov	r2, r0
 8002208:	463b      	mov	r3, r7
 800220a:	4939      	ldr	r1, [pc, #228]	; (80022f0 <main+0x17c>)
 800220c:	4618      	mov	r0, r3
 800220e:	f002 f8e5 	bl	80043dc <strncmp>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10e      	bne.n	8002236 <main+0xc2>
        {
            // send data to PC GUI
            protocolComplete(direction, readAxes.axisX, readAxes.axisY, readAxes.axisZ);
 8002218:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <main+0x180>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b218      	sxth	r0, r3
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <main+0x184>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	b219      	sxth	r1, r3
 8002224:	4b34      	ldr	r3, [pc, #208]	; (80022f8 <main+0x184>)
 8002226:	885b      	ldrh	r3, [r3, #2]
 8002228:	b21a      	sxth	r2, r3
 800222a:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <main+0x184>)
 800222c:	889b      	ldrh	r3, [r3, #4]
 800222e:	b21b      	sxth	r3, r3
 8002230:	f7fe fd4e 	bl	8000cd0 <protocolComplete>
 8002234:	e7d9      	b.n	80021ea <main+0x76>
        }
        else if (strncmp(rxBuff, "#END,", strlen(rxBuff)) == 0)
 8002236:	463b      	mov	r3, r7
 8002238:	4618      	mov	r0, r3
 800223a:	f002 f861 	bl	8004300 <strlen>
 800223e:	4602      	mov	r2, r0
 8002240:	463b      	mov	r3, r7
 8002242:	492e      	ldr	r1, [pc, #184]	; (80022fc <main+0x188>)
 8002244:	4618      	mov	r0, r3
 8002246:	f002 f8c9 	bl	80043dc <strncmp>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d103      	bne.n	8002258 <main+0xe4>
        {
            // LED off - connection END
            ledSetting(0);
 8002250:	2000      	movs	r0, #0
 8002252:	f7fe fe1d 	bl	8000e90 <ledSetting>
 8002256:	e7c8      	b.n	80021ea <main+0x76>
        }
        else if (strncmp(rxBuff, "#CON,", strlen(rxBuff)) == 0)
 8002258:	463b      	mov	r3, r7
 800225a:	4618      	mov	r0, r3
 800225c:	f002 f850 	bl	8004300 <strlen>
 8002260:	4602      	mov	r2, r0
 8002262:	463b      	mov	r3, r7
 8002264:	4926      	ldr	r1, [pc, #152]	; (8002300 <main+0x18c>)
 8002266:	4618      	mov	r0, r3
 8002268:	f002 f8b8 	bl	80043dc <strncmp>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d103      	bne.n	800227a <main+0x106>
        {
            // LED on - connection established
            ledSetting(1);
 8002272:	2001      	movs	r0, #1
 8002274:	f7fe fe0c 	bl	8000e90 <ledSetting>
 8002278:	e7b7      	b.n	80021ea <main+0x76>
        }
        else if (strncmp(rxBuff, "#SER,f", strlen(rxBuff)) == 0)
 800227a:	463b      	mov	r3, r7
 800227c:	4618      	mov	r0, r3
 800227e:	f002 f83f 	bl	8004300 <strlen>
 8002282:	4602      	mov	r2, r0
 8002284:	463b      	mov	r3, r7
 8002286:	491f      	ldr	r1, [pc, #124]	; (8002304 <main+0x190>)
 8002288:	4618      	mov	r0, r3
 800228a:	f002 f8a7 	bl	80043dc <strncmp>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d103      	bne.n	800229c <main+0x128>
        {
            // Servos off
            servoEnable = 0;
 8002294:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <main+0x194>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e7a6      	b.n	80021ea <main+0x76>
        }
        else if (strncmp(rxBuff, "#SER,n", strlen(rxBuff)) == 0)
 800229c:	463b      	mov	r3, r7
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 f82e 	bl	8004300 <strlen>
 80022a4:	4602      	mov	r2, r0
 80022a6:	463b      	mov	r3, r7
 80022a8:	4918      	ldr	r1, [pc, #96]	; (800230c <main+0x198>)
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 f896 	bl	80043dc <strncmp>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d103      	bne.n	80022be <main+0x14a>
        {
            // Servos on
            servoEnable = 1;
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <main+0x194>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	e795      	b.n	80021ea <main+0x76>
        }
        else if (strncmp(rxBuff, "#STA,", strlen(rxBuff)) == 0)
 80022be:	463b      	mov	r3, r7
 80022c0:	4618      	mov	r0, r3
 80022c2:	f002 f81d 	bl	8004300 <strlen>
 80022c6:	4602      	mov	r2, r0
 80022c8:	463b      	mov	r3, r7
 80022ca:	4911      	ldr	r1, [pc, #68]	; (8002310 <main+0x19c>)
 80022cc:	4618      	mov	r0, r3
 80022ce:	f002 f885 	bl	80043dc <strncmp>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d103      	bne.n	80022e0 <main+0x16c>
        {
            // send statistic package
            statisticSend = 1;
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <main+0x1a0>)
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	e784      	b.n	80021ea <main+0x76>
        }
        else
        {
            continue;
 80022e0:	bf00      	nop
        }
    }
 80022e2:	e782      	b.n	80021ea <main+0x76>
 80022e4:	401e0000 	.word	0x401e0000
 80022e8:	2000ffc0 	.word	0x2000ffc0
 80022ec:	10624dd3 	.word	0x10624dd3
 80022f0:	0800a894 	.word	0x0800a894
 80022f4:	20000ab1 	.word	0x20000ab1
 80022f8:	20000ab8 	.word	0x20000ab8
 80022fc:	0800a89c 	.word	0x0800a89c
 8002300:	0800a8a4 	.word	0x0800a8a4
 8002304:	0800a8ac 	.word	0x0800a8ac
 8002308:	20000ab3 	.word	0x20000ab3
 800230c:	0800a8b4 	.word	0x0800a8b4
 8002310:	0800a8bc 	.word	0x0800a8bc
 8002314:	20000a90 	.word	0x20000a90

08002318 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 8002324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop

08002350 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
 return -1;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop

08002364 <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <_fstat+0x16>
  return -1;
 8002374:	f04f 33ff 	mov.w	r3, #4294967295
 8002378:	e001      	b.n	800237e <_fstat+0x1a>
 else
  return -2;
 800237a:	f06f 0301 	mvn.w	r3, #1
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop

0800238c <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 8002394:	4b15      	ldr	r3, [pc, #84]	; (80023ec <_sbrk+0x60>)
 8002396:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d108      	bne.n	80023b2 <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <_sbrk+0x64>)
 80023a2:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <_sbrk+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 80023a6:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	4413      	add	r3, r2
 80023ae:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <_sbrk+0x6c>)
 80023b0:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <_sbrk+0x64>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 80023b8:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 80023c4:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 80023c8:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <_sbrk+0x6c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d301      	bcc.n	80023d8 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 80023d4:	2300      	movs	r3, #0
 80023d6:	e003      	b.n	80023e0 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 80023d8:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <_sbrk+0x64>)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 80023de:	693b      	ldr	r3, [r7, #16]
 }
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	0000f4f0 	.word	0x0000f4f0
 80023f0:	20000a54 	.word	0x20000a54
 80023f4:	20000ad0 	.word	0x20000ad0
 80023f8:	20000a58 	.word	0x20000a58

080023fc <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop

0800240c <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 8002414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e003      	b.n	800243a <delay+0x16>
  {
    __NOP();
 8002432:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	3301      	adds	r3, #1
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	429a      	cmp	r2, r3
 8002440:	d3f7      	bcc.n	8002432 <delay+0xe>
  {
    __NOP();
  }
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop

08002450 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8002450:	b598      	push	{r3, r4, r7, lr}
 8002452:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8002454:	4a06      	ldr	r2, [pc, #24]	; (8002470 <SystemInit+0x20>)
 8002456:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800245a:	4614      	mov	r4, r2
 800245c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800245e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8002462:	f000 f807 	bl	8002474 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8002466:	f000 f83d 	bl	80024e4 <SystemCoreClockSetup>
}
 800246a:	bf00      	nop
 800246c:	bd98      	pop	{r3, r4, r7, pc}
 800246e:	bf00      	nop
 8002470:	2000ffc4 	.word	0x2000ffc4

08002474 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800247a:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 800247c:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <SystemCoreSetup+0x64>)
 800247e:	4a17      	ldr	r2, [pc, #92]	; (80024dc <SystemCoreSetup+0x68>)
 8002480:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002482:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002486:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8002488:	4a13      	ldr	r2, [pc, #76]	; (80024d8 <SystemCoreSetup+0x64>)
 800248a:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <SystemCoreSetup+0x64>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8002498:	4a0f      	ldr	r2, [pc, #60]	; (80024d8 <SystemCoreSetup+0x64>)
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <SystemCoreSetup+0x64>)
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f023 0308 	bic.w	r3, r3, #8
 80024a2:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 80024a4:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <SystemCoreSetup+0x6c>)
 80024a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024aa:	3314      	adds	r3, #20
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f023 030f 	bic.w	r3, r3, #15
 80024b6:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f043 0303 	orr.w	r3, r3, #3
 80024be:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <SystemCoreSetup+0x6c>)
 80024c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c6:	3314      	adds	r3, #20
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	601a      	str	r2, [r3, #0]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00
 80024dc:	08000000 	.word	0x08000000
 80024e0:	58001000 	.word	0x58001000

080024e4 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80024e8:	4b75      	ldr	r3, [pc, #468]	; (80026c0 <SystemCoreClockSetup+0x1dc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10c      	bne.n	800250e <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 80024f4:	4a72      	ldr	r2, [pc, #456]	; (80026c0 <SystemCoreClockSetup+0x1dc>)
 80024f6:	4b72      	ldr	r3, [pc, #456]	; (80026c0 <SystemCoreClockSetup+0x1dc>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8002500:	bf00      	nop
 8002502:	4b6f      	ldr	r3, [pc, #444]	; (80026c0 <SystemCoreClockSetup+0x1dc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f9      	beq.n	8002502 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800250e:	4b6d      	ldr	r3, [pc, #436]	; (80026c4 <SystemCoreClockSetup+0x1e0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002516:	2b00      	cmp	r3, #0
 8002518:	d009      	beq.n	800252e <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 800251a:	4a6a      	ldr	r2, [pc, #424]	; (80026c4 <SystemCoreClockSetup+0x1e0>)
 800251c:	4b69      	ldr	r3, [pc, #420]	; (80026c4 <SystemCoreClockSetup+0x1e0>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002524:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8002526:	f641 504c 	movw	r0, #7500	; 0x1d4c
 800252a:	f7ff ff7b 	bl	8002424 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800252e:	4a66      	ldr	r2, [pc, #408]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 8002530:	4b65      	ldr	r3, [pc, #404]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002538:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 800253a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800253e:	f7ff ff71 	bl	8002424 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002542:	4a61      	ldr	r2, [pc, #388]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 8002544:	4b60      	ldr	r3, [pc, #384]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254c:	f023 0302 	bic.w	r3, r3, #2
 8002550:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8002552:	4b5e      	ldr	r3, [pc, #376]	; (80026cc <SystemCoreClockSetup+0x1e8>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800255a:	2b00      	cmp	r3, #0
 800255c:	d029      	beq.n	80025b2 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800255e:	4a5b      	ldr	r2, [pc, #364]	; (80026cc <SystemCoreClockSetup+0x1e8>)
 8002560:	4b5a      	ldr	r3, [pc, #360]	; (80026cc <SystemCoreClockSetup+0x1e8>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002568:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800256c:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800256e:	f000 f927 	bl	80027c0 <OSCHP_GetFrequency>
 8002572:	4602      	mov	r2, r0
 8002574:	4b56      	ldr	r3, [pc, #344]	; (80026d0 <SystemCoreClockSetup+0x1ec>)
 8002576:	fba3 2302 	umull	r2, r3, r3, r2
 800257a:	0d1b      	lsrs	r3, r3, #20
 800257c:	3b01      	subs	r3, #1
 800257e:	041b      	lsls	r3, r3, #16
 8002580:	4952      	ldr	r1, [pc, #328]	; (80026cc <SystemCoreClockSetup+0x1e8>)
 8002582:	4a52      	ldr	r2, [pc, #328]	; (80026cc <SystemCoreClockSetup+0x1e8>)
 8002584:	6852      	ldr	r2, [r2, #4]
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 800258a:	4a4f      	ldr	r2, [pc, #316]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 800258c:	4b4e      	ldr	r3, [pc, #312]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002596:	4a4c      	ldr	r2, [pc, #304]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 8002598:	4b4b      	ldr	r3, [pc, #300]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80025a0:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 80025a2:	bf00      	nop
 80025a4:	4b48      	ldr	r3, [pc, #288]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80025ac:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80025b0:	d1f8      	bne.n	80025a4 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 80025b2:	4a45      	ldr	r2, [pc, #276]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 80025b4:	4b44      	ldr	r3, [pc, #272]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 80025be:	4a42      	ldr	r2, [pc, #264]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 80025c0:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f043 0310 	orr.w	r3, r3, #16
 80025c8:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80025ca:	4b3f      	ldr	r3, [pc, #252]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 80025cc:	4a41      	ldr	r2, [pc, #260]	; (80026d4 <SystemCoreClockSetup+0x1f0>)
 80025ce:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80025d0:	4a3d      	ldr	r2, [pc, #244]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 80025d2:	4b3d      	ldr	r3, [pc, #244]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025da:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 80025dc:	4a3a      	ldr	r2, [pc, #232]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 80025de:	4b3a      	ldr	r3, [pc, #232]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f023 0310 	bic.w	r3, r3, #16
 80025e6:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 80025e8:	4a37      	ldr	r2, [pc, #220]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 80025ea:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f2:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80025f4:	bf00      	nop
 80025f6:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f9      	beq.n	80025f6 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002602:	4a31      	ldr	r2, [pc, #196]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 8002604:	4b30      	ldr	r3, [pc, #192]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800260e:	bf00      	nop
 8002610:	4b2d      	ldr	r3, [pc, #180]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f9      	bne.n	8002610 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 800261c:	4a2e      	ldr	r2, [pc, #184]	; (80026d8 <SystemCoreClockSetup+0x1f4>)
 800261e:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <SystemCoreClockSetup+0x1f4>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002626:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8002628:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <SystemCoreClockSetup+0x1f4>)
 800262a:	2200      	movs	r2, #0
 800262c:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 800262e:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <SystemCoreClockSetup+0x1f4>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8002634:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <SystemCoreClockSetup+0x1f4>)
 8002636:	2200      	movs	r2, #0
 8002638:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 800263a:	4b27      	ldr	r3, [pc, #156]	; (80026d8 <SystemCoreClockSetup+0x1f4>)
 800263c:	2200      	movs	r2, #0
 800263e:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8002640:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <SystemCoreClockSetup+0x1f4>)
 8002642:	2200      	movs	r2, #0
 8002644:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <SystemCoreClockSetup+0x1f4>)
 8002648:	2203      	movs	r2, #3
 800264a:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 800264c:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 800264e:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002656:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 800265a:	4a20      	ldr	r2, [pc, #128]	; (80026dc <SystemCoreClockSetup+0x1f8>)
 800265c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 800265e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002662:	f7ff fedf 	bl	8002424 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002666:	bf00      	nop
 8002668:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f9      	beq.n	8002668 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 8002676:	4a1a      	ldr	r2, [pc, #104]	; (80026e0 <SystemCoreClockSetup+0x1fc>)
 8002678:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 800267a:	f241 1094 	movw	r0, #4500	; 0x1194
 800267e:	f7ff fed1 	bl	8002424 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002682:	bf00      	nop
 8002684:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f9      	beq.n	8002684 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 8002692:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <SystemCoreClockSetup+0x200>)
 8002694:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8002696:	f241 7070 	movw	r0, #6000	; 0x1770
 800269a:	f7ff fec3 	bl	8002424 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800269e:	bf00      	nop
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <SystemCoreClockSetup+0x1e4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f9      	beq.n	80026a0 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 80026ac:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <SystemCoreClockSetup+0x204>)
 80026ae:	2205      	movs	r2, #5
 80026b0:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <SystemCoreClockSetup+0x1f4>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 80026b8:	f000 f818 	bl	80026ec <SystemCoreClockUpdate>
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	50004200 	.word	0x50004200
 80026c4:	50004400 	.word	0x50004400
 80026c8:	50004710 	.word	0x50004710
 80026cc:	50004700 	.word	0x50004700
 80026d0:	6b5fca6b 	.word	0x6b5fca6b
 80026d4:	01134f00 	.word	0x01134f00
 80026d8:	50004600 	.word	0x50004600
 80026dc:	01074f00 	.word	0x01074f00
 80026e0:	01044f00 	.word	0x01044f00
 80026e4:	01034f00 	.word	0x01034f00
 80026e8:	50004160 	.word	0x50004160

080026ec <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80026f2:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <SystemCoreClockUpdate+0xc4>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d03e      	beq.n	800277c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80026fe:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <SystemCoreClockUpdate+0xc8>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800270a:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <SystemCoreClockUpdate+0xcc>)
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	e002      	b.n	8002716 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8002710:	f000 f856 	bl	80027c0 <OSCHP_GetFrequency>
 8002714:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8002716:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <SystemCoreClockUpdate+0xc8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b00      	cmp	r3, #0
 8002720:	d020      	beq.n	8002764 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8002722:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <SystemCoreClockUpdate+0xc8>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800272a:	0e1b      	lsrs	r3, r3, #24
 800272c:	3301      	adds	r3, #1
 800272e:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8002730:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <SystemCoreClockUpdate+0xc8>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	3301      	adds	r3, #1
 800273c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <SystemCoreClockUpdate+0xc8>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002746:	0c1b      	lsrs	r3, r3, #16
 8002748:	3301      	adds	r3, #1
 800274a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	fb02 f303 	mul.w	r3, r2, r3
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	e00d      	b.n	8002780 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <SystemCoreClockUpdate+0xc8>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800276c:	3301      	adds	r3, #1
 800276e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	e001      	b.n	8002780 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <SystemCoreClockUpdate+0xcc>)
 800277e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <SystemCoreClockUpdate+0xc4>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	3301      	adds	r3, #1
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8002790:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <SystemCoreClockUpdate+0xc4>)
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	3301      	adds	r3, #1
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80027a2:	4a06      	ldr	r2, [pc, #24]	; (80027bc <SystemCoreClockUpdate+0xd0>)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	50004600 	.word	0x50004600
 80027b4:	50004710 	.word	0x50004710
 80027b8:	016e3600 	.word	0x016e3600
 80027bc:	2000ffc0 	.word	0x2000ffc0

080027c0 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 80027c4:	4b02      	ldr	r3, [pc, #8]	; (80027d0 <OSCHP_GetFrequency+0x10>)
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	00b71b00 	.word	0x00b71b00

080027d4 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	460b      	mov	r3, r1
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80027e2:	7afb      	ldrb	r3, [r7, #11]
 80027e4:	089b      	lsrs	r3, r3, #2
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	4618      	mov	r0, r3
 80027ea:	7afb      	ldrb	r3, [r7, #11]
 80027ec:	089b      	lsrs	r3, r3, #2
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	3204      	adds	r2, #4
 80027f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027fa:	7afb      	ldrb	r3, [r7, #11]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	21f8      	movs	r1, #248	; 0xf8
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	ea02 0103 	and.w	r1, r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1d02      	adds	r2, r0, #4
 8002812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800281a:	7afb      	ldrb	r3, [r7, #11]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2103      	movs	r1, #3
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	401a      	ands	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4a38      	ldr	r2, [pc, #224]	; (8002910 <XMC_GPIO_Init+0x13c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d003      	beq.n	800283c <XMC_GPIO_Init+0x68>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4a37      	ldr	r2, [pc, #220]	; (8002914 <XMC_GPIO_Init+0x140>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d10a      	bne.n	8002852 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002840:	7afb      	ldrb	r3, [r7, #11]
 8002842:	2101      	movs	r1, #1
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	401a      	ands	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	661a      	str	r2, [r3, #96]	; 0x60
 8002850:	e03c      	b.n	80028cc <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	7afb      	ldrb	r3, [r7, #11]
 8002858:	409a      	lsls	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800285e:	7afb      	ldrb	r3, [r7, #11]
 8002860:	08db      	lsrs	r3, r3, #3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	4618      	mov	r0, r3
 8002866:	7afb      	ldrb	r3, [r7, #11]
 8002868:	08db      	lsrs	r3, r3, #3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3210      	adds	r2, #16
 8002872:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002876:	7afb      	ldrb	r3, [r7, #11]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	2107      	movs	r1, #7
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	ea02 0103 	and.w	r1, r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f100 0210 	add.w	r2, r0, #16
 8002890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8002894:	7afb      	ldrb	r3, [r7, #11]
 8002896:	08db      	lsrs	r3, r3, #3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	4618      	mov	r0, r3
 800289c:	7afb      	ldrb	r3, [r7, #11]
 800289e:	08db      	lsrs	r3, r3, #3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3210      	adds	r2, #16
 80028a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7a1b      	ldrb	r3, [r3, #8]
 80028b0:	4619      	mov	r1, r3
 80028b2:	7afb      	ldrb	r3, [r7, #11]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	ea42 0103 	orr.w	r1, r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f100 0210 	add.w	r2, r0, #16
 80028c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80028cc:	7afb      	ldrb	r3, [r7, #11]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	4618      	mov	r0, r3
 80028d4:	7afb      	ldrb	r3, [r7, #11]
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	3204      	adds	r2, #4
 80028e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4619      	mov	r1, r3
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	ea42 0103 	orr.w	r1, r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1d02      	adds	r2, r0, #4
 80028fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	48028e00 	.word	0x48028e00
 8002914:	48028f00 	.word	0x48028f00

08002918 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	b2db      	uxtb	r3, r3
 8002926:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800292a:	b2db      	uxtb	r3, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 800295e:	2310      	movs	r3, #16
 8002960:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fa62 	bl	8002e2c <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	79db      	ldrb	r3, [r3, #7]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	79db      	ldrb	r3, [r3, #7]
 8002974:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 faa2 	bl	8002ec8 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	799b      	ldrb	r3, [r3, #6]
 8002988:	3b01      	subs	r3, #1
 800298a:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	085b      	lsrs	r3, r3, #1
 8002990:	3301      	adds	r3, #1
 8002992:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8002994:	4313      	orrs	r3, r2
 8002996:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	791b      	ldrb	r3, [r3, #4]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	061b      	lsls	r3, r3, #24
 80029aa:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	795b      	ldrb	r3, [r3, #5]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	795b      	ldrb	r3, [r3, #5]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	041b      	lsls	r3, r3, #16
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	635a      	str	r2, [r3, #52]	; 0x34
 80029cc:	e008      	b.n	80029e0 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	791b      	ldrb	r3, [r3, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80029e6:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f04f 32ff 	mov.w	r2, #4294967295
 80029ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	891b      	ldrh	r3, [r3, #8]
 80029f4:	461a      	mov	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop

08002a04 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a16:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d110      	bne.n	8002a40 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002a1e:	bf00      	nop
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff79 	bl	8002918 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	d0f9      	beq.n	8002a20 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002a2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff ff81 	bl	8002938 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 8002a3e:	e003      	b.n	8002a48 <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 8002a40:	887a      	ldrh	r2, [r7, #2]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002a5e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d103      	bne.n	8002a6e <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	81fb      	strh	r3, [r7, #14]
 8002a6c:	e003      	b.n	8002a76 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002a74:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8002a76:	89fb      	ldrh	r3, [r7, #14]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a96:	b2db      	uxtb	r3, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop

08002ac8 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f9aa 	bl	8002e2c <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <XMC_I2C_CH_Init+0x4c>)
 8002adc:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	889b      	ldrh	r3, [r3, #4]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f817 	bl	8002b18 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4619      	mov	r1, r3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f831 	bl	8002b58 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002afc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295
 8002b04:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	073f0303 	.word	0x073f0303

08002b18 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8002b24:	887b      	ldrh	r3, [r7, #2]
 8002b26:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8002b2a:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8002b2e:	d109      	bne.n	8002b44 <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 8002b30:	887b      	ldrh	r3, [r7, #2]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8002b42:	e003      	b.n	8002b4c <XMC_I2C_CH_SetSlaveAddress+0x34>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	021a      	lsls	r2, r3, #8
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <XMC_I2C_CH_SetBaudrate+0x70>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d810      	bhi.n	8002b90 <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 8002b7a:	220a      	movs	r2, #10
 8002b7c:	6839      	ldr	r1, [r7, #0]
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f9a2 	bl	8002ec8 <XMC_USIC_CH_SetBaudrate>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d119      	bne.n	8002bbe <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]
 8002b8e:	e016      	b.n	8002bbe <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4a0e      	ldr	r2, [pc, #56]	; (8002bcc <XMC_I2C_CH_SetBaudrate+0x74>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d810      	bhi.n	8002bba <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8002ba4:	2219      	movs	r2, #25
 8002ba6:	6839      	ldr	r1, [r7, #0]
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f98d 	bl	8002ec8 <XMC_USIC_CH_SetBaudrate>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e001      	b.n	8002bbe <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	000186a0 	.word	0x000186a0
 8002bcc:	00061a80 	.word	0x00061a80

08002bd0 <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8002be0:	887b      	ldrh	r3, [r7, #2]
 8002be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8002bea:	787b      	ldrb	r3, [r7, #1]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d103      	bne.n	8002bf8 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002bfe:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d110      	bne.n	8002c28 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002c06:	bf00      	nop
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ff3b 	bl	8002a84 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b80      	cmp	r3, #128	; 0x80
 8002c12:	d0f9      	beq.n	8002c08 <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002c14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff43 	bl	8002aa4 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = temp;
  }
}
 8002c26:	e003      	b.n	8002c30 <XMC_I2C_CH_MasterStart+0x60>

    channel->TBUF[0] = temp;
  }
  else
  {
    channel->IN[0U] = temp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	807b      	strh	r3, [r7, #2]
 8002c44:	4613      	mov	r3, r2
 8002c46:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8002c48:	887b      	ldrh	r3, [r7, #2]
 8002c4a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8002c52:	787b      	ldrb	r3, [r7, #1]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d103      	bne.n	8002c60 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c66:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d110      	bne.n	8002c90 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002c6e:	bf00      	nop
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff ff07 	bl	8002a84 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d0f9      	beq.n	8002c70 <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff0f 	bl	8002aa4 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = tmp;
  }
}
 8002c8e:	e003      	b.n	8002c98 <XMC_I2C_CH_MasterRepeatedStart+0x60>

    channel->TBUF[0] = tmp;
  }
  else
  {
    channel->IN[0U] = tmp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d111      	bne.n	8002cda <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002cb6:	bf00      	nop
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff fee3 	bl	8002a84 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b80      	cmp	r3, #128	; 0x80
 8002cc2:	d0f9      	beq.n	8002cb8 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002cc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff feeb 	bl	8002aa4 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
}
 8002cd8:	e004      	b.n	8002ce4 <XMC_I2C_CH_MasterStop+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002ce0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cfe:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d110      	bne.n	8002d28 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002d06:	bf00      	nop
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff febb 	bl	8002a84 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d0f9      	beq.n	8002d08 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002d14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff fec3 	bl	8002aa4 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
}
 8002d26:	e003      	b.n	8002d30 <XMC_I2C_CH_MasterTransmit+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <XMC_I2C_CH_MasterReceiveNack>:
  }
}

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d46:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d111      	bne.n	8002d72 <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002d4e:	bf00      	nop
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff fe97 	bl	8002a84 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b80      	cmp	r3, #128	; 0x80
 8002d5a:	d0f9      	beq.n	8002d50 <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff fe9f 	bl	8002aa4 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
}
 8002d70:	e004      	b.n	8002d7c <XMC_I2C_CH_MasterReceiveNack+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002d78:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002d92:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d103      	bne.n	8002da2 <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9e:	73fb      	strb	r3, [r7, #15]
 8002da0:	e003      	b.n	8002daa <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002da8:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	2000ffc0 	.word	0x2000ffc0

08002dd0 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	0f1b      	lsrs	r3, r3, #28
 8002ddc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002de4:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	461a      	mov	r2, r3
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8002df4:	4413      	add	r3, r2
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	601a      	str	r2, [r3, #0]
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	50004414 	.word	0x50004414

08002e0c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8002e10:	f7ff ffd2 	bl	8002db8 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8002e14:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8002e16:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8002e1e:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	50004600 	.word	0x50004600

08002e2c <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a1b      	ldr	r2, [pc, #108]	; (8002ea4 <XMC_USIC_CH_Enable+0x78>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d003      	beq.n	8002e44 <XMC_USIC_CH_Enable+0x18>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ea8 <XMC_USIC_CH_Enable+0x7c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d103      	bne.n	8002e4c <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8002e44:	4819      	ldr	r0, [pc, #100]	; (8002eac <XMC_USIC_CH_Enable+0x80>)
 8002e46:	f000 f91f 	bl	8003088 <XMC_USIC_Enable>
 8002e4a:	e016      	b.n	8002e7a <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <XMC_USIC_CH_Enable+0x84>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <XMC_USIC_CH_Enable+0x30>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <XMC_USIC_CH_Enable+0x88>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d103      	bne.n	8002e64 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8002e5c:	4816      	ldr	r0, [pc, #88]	; (8002eb8 <XMC_USIC_CH_Enable+0x8c>)
 8002e5e:	f000 f913 	bl	8003088 <XMC_USIC_Enable>
 8002e62:	e00a      	b.n	8002e7a <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a15      	ldr	r2, [pc, #84]	; (8002ebc <XMC_USIC_CH_Enable+0x90>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <XMC_USIC_CH_Enable+0x48>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <XMC_USIC_CH_Enable+0x94>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d102      	bne.n	8002e7a <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8002e74:	4813      	ldr	r0, [pc, #76]	; (8002ec4 <XMC_USIC_CH_Enable+0x98>)
 8002e76:	f000 f907 	bl	8003088 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8002e80:	bf00      	nop
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f9      	beq.n	8002e82 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f023 020f 	bic.w	r2, r3, #15
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40030000 	.word	0x40030000
 8002ea8:	40030200 	.word	0x40030200
 8002eac:	40030008 	.word	0x40030008
 8002eb0:	48020000 	.word	0x48020000
 8002eb4:	48020200 	.word	0x48020200
 8002eb8:	48020008 	.word	0x48020008
 8002ebc:	48024000 	.word	0x48024000
 8002ec0:	48024200 	.word	0x48024200
 8002ec4:	48024008 	.word	0x48024008

08002ec8 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08e      	sub	sp, #56	; 0x38
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b63      	cmp	r3, #99	; 0x63
 8002ed8:	d958      	bls.n	8002f8c <XMC_USIC_CH_SetBaudrate+0xc4>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d055      	beq.n	8002f8c <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8002ee0:	f7ff ff94 	bl	8002e0c <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8002ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4a2b      	ldr	r2, [pc, #172]	; (8002fa0 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8002efc:	2301      	movs	r3, #1
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8002f00:	2301      	movs	r3, #1
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8002f04:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8002f0a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002f0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f10:	e022      	b.n	8002f58 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f16:	fb02 f203 	mul.w	r2, r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f26:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	0a9b      	lsrs	r3, r3, #10
 8002f2c:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f34:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3c:	d209      	bcs.n	8002f52 <XMC_USIC_CH_SetBaudrate+0x8a>
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d205      	bcs.n	8002f52 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	3b01      	subs	r3, #1
 8002f56:	633b      	str	r3, [r7, #48]	; 0x30
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1d9      	bne.n	8002f12 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8002f6e:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	3a01      	subs	r2, #1
 8002f74:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8002f76:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002f7e:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002f8a:	e002      	b.n	8002f92 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8002f92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3738      	adds	r7, #56	; 0x38
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	51eb851f 	.word	0x51eb851f
 8002fa4:	fc0080ef 	.word	0xfc0080ef

08002fa8 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002fbe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8002fd0:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	0211      	lsls	r1, r2, #8
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8002fda:	79fa      	ldrb	r2, [r7, #7]
 8002fdc:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8002fde:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8002fe0:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	f8ffc0c0 	.word	0xf8ffc0c0

08002ff8 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800300e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8003020:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	0211      	lsls	r1, r2, #8
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 800302a:	79fa      	ldrb	r2, [r7, #7]
 800302c:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 800302e:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8003030:	4313      	orrs	r3, r2
 8003032:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	efffc0c0 	.word	0xefffc0c0

0800304c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	460b      	mov	r3, r1
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003060:	7afb      	ldrb	r3, [r7, #11]
 8003062:	2107      	movs	r1, #7
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 800306c:	7afb      	ldrb	r3, [r7, #11]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8003074:	431a      	orrs	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a0d      	ldr	r2, [pc, #52]	; (80030c8 <XMC_USIC_Enable+0x40>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d104      	bne.n	80030a2 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8003098:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800309c:	f7ff fe98 	bl	8002dd0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80030a0:	e00e      	b.n	80030c0 <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a09      	ldr	r2, [pc, #36]	; (80030cc <XMC_USIC_Enable+0x44>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d103      	bne.n	80030b2 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 80030aa:	4809      	ldr	r0, [pc, #36]	; (80030d0 <XMC_USIC_Enable+0x48>)
 80030ac:	f7ff fe90 	bl	8002dd0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80030b0:	e006      	b.n	80030c0 <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <XMC_USIC_Enable+0x4c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d102      	bne.n	80030c0 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 80030ba:	4807      	ldr	r0, [pc, #28]	; (80030d8 <XMC_USIC_Enable+0x50>)
 80030bc:	f7ff fe88 	bl	8002dd0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40030008 	.word	0x40030008
 80030cc:	48020008 	.word	0x48020008
 80030d0:	10000080 	.word	0x10000080
 80030d4:	48024008 	.word	0x48024008
 80030d8:	10000100 	.word	0x10000100
 80030dc:	00000000 	.word	0x00000000

080030e0 <atan>:
 80030e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e4:	4bc4      	ldr	r3, [pc, #784]	; (80033f8 <atan+0x318>)
 80030e6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80030ea:	429e      	cmp	r6, r3
 80030ec:	4604      	mov	r4, r0
 80030ee:	460d      	mov	r5, r1
 80030f0:	468b      	mov	fp, r1
 80030f2:	dd0e      	ble.n	8003112 <atan+0x32>
 80030f4:	4bc1      	ldr	r3, [pc, #772]	; (80033fc <atan+0x31c>)
 80030f6:	429e      	cmp	r6, r3
 80030f8:	f300 80ac 	bgt.w	8003254 <atan+0x174>
 80030fc:	f000 80a7 	beq.w	800324e <atan+0x16e>
 8003100:	f1bb 0f00 	cmp.w	fp, #0
 8003104:	f340 80e9 	ble.w	80032da <atan+0x1fa>
 8003108:	a19f      	add	r1, pc, #636	; (adr r1, 8003388 <atan+0x2a8>)
 800310a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800310e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003112:	4bbb      	ldr	r3, [pc, #748]	; (8003400 <atan+0x320>)
 8003114:	429e      	cmp	r6, r3
 8003116:	f300 80b5 	bgt.w	8003284 <atan+0x1a4>
 800311a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800311e:	429e      	cmp	r6, r3
 8003120:	f340 80a0 	ble.w	8003264 <atan+0x184>
 8003124:	f04f 3aff 	mov.w	sl, #4294967295
 8003128:	4622      	mov	r2, r4
 800312a:	462b      	mov	r3, r5
 800312c:	4620      	mov	r0, r4
 800312e:	4629      	mov	r1, r5
 8003130:	f000 fc52 	bl	80039d8 <__aeabi_dmul>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4680      	mov	r8, r0
 800313a:	4689      	mov	r9, r1
 800313c:	f000 fc4c 	bl	80039d8 <__aeabi_dmul>
 8003140:	a393      	add	r3, pc, #588	; (adr r3, 8003390 <atan+0x2b0>)
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	4606      	mov	r6, r0
 8003148:	460f      	mov	r7, r1
 800314a:	f000 fc45 	bl	80039d8 <__aeabi_dmul>
 800314e:	a392      	add	r3, pc, #584	; (adr r3, 8003398 <atan+0x2b8>)
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	f000 fa8e 	bl	8003674 <__adddf3>
 8003158:	4632      	mov	r2, r6
 800315a:	463b      	mov	r3, r7
 800315c:	f000 fc3c 	bl	80039d8 <__aeabi_dmul>
 8003160:	a38f      	add	r3, pc, #572	; (adr r3, 80033a0 <atan+0x2c0>)
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	f000 fa85 	bl	8003674 <__adddf3>
 800316a:	4632      	mov	r2, r6
 800316c:	463b      	mov	r3, r7
 800316e:	f000 fc33 	bl	80039d8 <__aeabi_dmul>
 8003172:	a38d      	add	r3, pc, #564	; (adr r3, 80033a8 <atan+0x2c8>)
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	f000 fa7c 	bl	8003674 <__adddf3>
 800317c:	4632      	mov	r2, r6
 800317e:	463b      	mov	r3, r7
 8003180:	f000 fc2a 	bl	80039d8 <__aeabi_dmul>
 8003184:	a38a      	add	r3, pc, #552	; (adr r3, 80033b0 <atan+0x2d0>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	f000 fa73 	bl	8003674 <__adddf3>
 800318e:	4632      	mov	r2, r6
 8003190:	463b      	mov	r3, r7
 8003192:	f000 fc21 	bl	80039d8 <__aeabi_dmul>
 8003196:	a388      	add	r3, pc, #544	; (adr r3, 80033b8 <atan+0x2d8>)
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f000 fa6a 	bl	8003674 <__adddf3>
 80031a0:	4642      	mov	r2, r8
 80031a2:	464b      	mov	r3, r9
 80031a4:	f000 fc18 	bl	80039d8 <__aeabi_dmul>
 80031a8:	a385      	add	r3, pc, #532	; (adr r3, 80033c0 <atan+0x2e0>)
 80031aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ae:	4680      	mov	r8, r0
 80031b0:	4689      	mov	r9, r1
 80031b2:	4630      	mov	r0, r6
 80031b4:	4639      	mov	r1, r7
 80031b6:	f000 fc0f 	bl	80039d8 <__aeabi_dmul>
 80031ba:	a383      	add	r3, pc, #524	; (adr r3, 80033c8 <atan+0x2e8>)
 80031bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c0:	f000 fa56 	bl	8003670 <__aeabi_dsub>
 80031c4:	4632      	mov	r2, r6
 80031c6:	463b      	mov	r3, r7
 80031c8:	f000 fc06 	bl	80039d8 <__aeabi_dmul>
 80031cc:	a380      	add	r3, pc, #512	; (adr r3, 80033d0 <atan+0x2f0>)
 80031ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d2:	f000 fa4d 	bl	8003670 <__aeabi_dsub>
 80031d6:	4632      	mov	r2, r6
 80031d8:	463b      	mov	r3, r7
 80031da:	f000 fbfd 	bl	80039d8 <__aeabi_dmul>
 80031de:	a37e      	add	r3, pc, #504	; (adr r3, 80033d8 <atan+0x2f8>)
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	f000 fa44 	bl	8003670 <__aeabi_dsub>
 80031e8:	4632      	mov	r2, r6
 80031ea:	463b      	mov	r3, r7
 80031ec:	f000 fbf4 	bl	80039d8 <__aeabi_dmul>
 80031f0:	a37b      	add	r3, pc, #492	; (adr r3, 80033e0 <atan+0x300>)
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	f000 fa3b 	bl	8003670 <__aeabi_dsub>
 80031fa:	4632      	mov	r2, r6
 80031fc:	463b      	mov	r3, r7
 80031fe:	f000 fbeb 	bl	80039d8 <__aeabi_dmul>
 8003202:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	d06b      	beq.n	80032e4 <atan+0x204>
 800320c:	4640      	mov	r0, r8
 800320e:	4649      	mov	r1, r9
 8003210:	f000 fa30 	bl	8003674 <__adddf3>
 8003214:	4622      	mov	r2, r4
 8003216:	462b      	mov	r3, r5
 8003218:	f000 fbde 	bl	80039d8 <__aeabi_dmul>
 800321c:	4e79      	ldr	r6, [pc, #484]	; (8003404 <atan+0x324>)
 800321e:	4b7a      	ldr	r3, [pc, #488]	; (8003408 <atan+0x328>)
 8003220:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8003224:	4456      	add	r6, sl
 8003226:	449a      	add	sl, r3
 8003228:	e9da 2300 	ldrd	r2, r3, [sl]
 800322c:	f000 fa20 	bl	8003670 <__aeabi_dsub>
 8003230:	4622      	mov	r2, r4
 8003232:	462b      	mov	r3, r5
 8003234:	f000 fa1c 	bl	8003670 <__aeabi_dsub>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003240:	f000 fa16 	bl	8003670 <__aeabi_dsub>
 8003244:	f1bb 0f00 	cmp.w	fp, #0
 8003248:	db43      	blt.n	80032d2 <atan+0x1f2>
 800324a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800324e:	2800      	cmp	r0, #0
 8003250:	f43f af56 	beq.w	8003100 <atan+0x20>
 8003254:	4622      	mov	r2, r4
 8003256:	462b      	mov	r3, r5
 8003258:	4620      	mov	r0, r4
 800325a:	4629      	mov	r1, r5
 800325c:	f000 fa0a 	bl	8003674 <__adddf3>
 8003260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003264:	a360      	add	r3, pc, #384	; (adr r3, 80033e8 <atan+0x308>)
 8003266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326a:	f000 fa03 	bl	8003674 <__adddf3>
 800326e:	2200      	movs	r2, #0
 8003270:	4b66      	ldr	r3, [pc, #408]	; (800340c <atan+0x32c>)
 8003272:	f000 fe41 	bl	8003ef8 <__aeabi_dcmpgt>
 8003276:	2800      	cmp	r0, #0
 8003278:	f43f af54 	beq.w	8003124 <atan+0x44>
 800327c:	4620      	mov	r0, r4
 800327e:	4629      	mov	r1, r5
 8003280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003284:	f000 f8cc 	bl	8003420 <fabs>
 8003288:	4b61      	ldr	r3, [pc, #388]	; (8003410 <atan+0x330>)
 800328a:	429e      	cmp	r6, r3
 800328c:	4604      	mov	r4, r0
 800328e:	460d      	mov	r5, r1
 8003290:	dc38      	bgt.n	8003304 <atan+0x224>
 8003292:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8003296:	429e      	cmp	r6, r3
 8003298:	dc5d      	bgt.n	8003356 <atan+0x276>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	f000 f9e9 	bl	8003674 <__adddf3>
 80032a2:	2200      	movs	r2, #0
 80032a4:	4b59      	ldr	r3, [pc, #356]	; (800340c <atan+0x32c>)
 80032a6:	f000 f9e3 	bl	8003670 <__aeabi_dsub>
 80032aa:	2200      	movs	r2, #0
 80032ac:	4606      	mov	r6, r0
 80032ae:	460f      	mov	r7, r1
 80032b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032b4:	4620      	mov	r0, r4
 80032b6:	4629      	mov	r1, r5
 80032b8:	f000 f9dc 	bl	8003674 <__adddf3>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4630      	mov	r0, r6
 80032c2:	4639      	mov	r1, r7
 80032c4:	f000 fcb2 	bl	8003c2c <__aeabi_ddiv>
 80032c8:	f04f 0a00 	mov.w	sl, #0
 80032cc:	4604      	mov	r4, r0
 80032ce:	460d      	mov	r5, r1
 80032d0:	e72a      	b.n	8003128 <atan+0x48>
 80032d2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80032d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032da:	a145      	add	r1, pc, #276	; (adr r1, 80033f0 <atan+0x310>)
 80032dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032e4:	4640      	mov	r0, r8
 80032e6:	4649      	mov	r1, r9
 80032e8:	f000 f9c4 	bl	8003674 <__adddf3>
 80032ec:	4622      	mov	r2, r4
 80032ee:	462b      	mov	r3, r5
 80032f0:	f000 fb72 	bl	80039d8 <__aeabi_dmul>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4620      	mov	r0, r4
 80032fa:	4629      	mov	r1, r5
 80032fc:	f000 f9b8 	bl	8003670 <__aeabi_dsub>
 8003300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003304:	4b43      	ldr	r3, [pc, #268]	; (8003414 <atan+0x334>)
 8003306:	429e      	cmp	r6, r3
 8003308:	dc1a      	bgt.n	8003340 <atan+0x260>
 800330a:	2200      	movs	r2, #0
 800330c:	4b42      	ldr	r3, [pc, #264]	; (8003418 <atan+0x338>)
 800330e:	f000 f9af 	bl	8003670 <__aeabi_dsub>
 8003312:	2200      	movs	r2, #0
 8003314:	4606      	mov	r6, r0
 8003316:	460f      	mov	r7, r1
 8003318:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <atan+0x338>)
 800331a:	4620      	mov	r0, r4
 800331c:	4629      	mov	r1, r5
 800331e:	f000 fb5b 	bl	80039d8 <__aeabi_dmul>
 8003322:	2200      	movs	r2, #0
 8003324:	4b39      	ldr	r3, [pc, #228]	; (800340c <atan+0x32c>)
 8003326:	f000 f9a5 	bl	8003674 <__adddf3>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4630      	mov	r0, r6
 8003330:	4639      	mov	r1, r7
 8003332:	f000 fc7b 	bl	8003c2c <__aeabi_ddiv>
 8003336:	f04f 0a02 	mov.w	sl, #2
 800333a:	4604      	mov	r4, r0
 800333c:	460d      	mov	r5, r1
 800333e:	e6f3      	b.n	8003128 <atan+0x48>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	2000      	movs	r0, #0
 8003346:	4935      	ldr	r1, [pc, #212]	; (800341c <atan+0x33c>)
 8003348:	f000 fc70 	bl	8003c2c <__aeabi_ddiv>
 800334c:	f04f 0a03 	mov.w	sl, #3
 8003350:	4604      	mov	r4, r0
 8003352:	460d      	mov	r5, r1
 8003354:	e6e8      	b.n	8003128 <atan+0x48>
 8003356:	2200      	movs	r2, #0
 8003358:	4b2c      	ldr	r3, [pc, #176]	; (800340c <atan+0x32c>)
 800335a:	f000 f989 	bl	8003670 <__aeabi_dsub>
 800335e:	2200      	movs	r2, #0
 8003360:	4606      	mov	r6, r0
 8003362:	460f      	mov	r7, r1
 8003364:	4b29      	ldr	r3, [pc, #164]	; (800340c <atan+0x32c>)
 8003366:	4620      	mov	r0, r4
 8003368:	4629      	mov	r1, r5
 800336a:	f000 f983 	bl	8003674 <__adddf3>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4630      	mov	r0, r6
 8003374:	4639      	mov	r1, r7
 8003376:	f000 fc59 	bl	8003c2c <__aeabi_ddiv>
 800337a:	f04f 0a01 	mov.w	sl, #1
 800337e:	4604      	mov	r4, r0
 8003380:	460d      	mov	r5, r1
 8003382:	e6d1      	b.n	8003128 <atan+0x48>
 8003384:	f3af 8000 	nop.w
 8003388:	54442d18 	.word	0x54442d18
 800338c:	3ff921fb 	.word	0x3ff921fb
 8003390:	e322da11 	.word	0xe322da11
 8003394:	3f90ad3a 	.word	0x3f90ad3a
 8003398:	24760deb 	.word	0x24760deb
 800339c:	3fa97b4b 	.word	0x3fa97b4b
 80033a0:	a0d03d51 	.word	0xa0d03d51
 80033a4:	3fb10d66 	.word	0x3fb10d66
 80033a8:	c54c206e 	.word	0xc54c206e
 80033ac:	3fb745cd 	.word	0x3fb745cd
 80033b0:	920083ff 	.word	0x920083ff
 80033b4:	3fc24924 	.word	0x3fc24924
 80033b8:	5555550d 	.word	0x5555550d
 80033bc:	3fd55555 	.word	0x3fd55555
 80033c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80033c4:	bfa2b444 	.word	0xbfa2b444
 80033c8:	52defd9a 	.word	0x52defd9a
 80033cc:	3fadde2d 	.word	0x3fadde2d
 80033d0:	af749a6d 	.word	0xaf749a6d
 80033d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80033d8:	fe231671 	.word	0xfe231671
 80033dc:	3fbc71c6 	.word	0x3fbc71c6
 80033e0:	9998ebc4 	.word	0x9998ebc4
 80033e4:	3fc99999 	.word	0x3fc99999
 80033e8:	8800759c 	.word	0x8800759c
 80033ec:	7e37e43c 	.word	0x7e37e43c
 80033f0:	54442d18 	.word	0x54442d18
 80033f4:	bff921fb 	.word	0xbff921fb
 80033f8:	440fffff 	.word	0x440fffff
 80033fc:	7ff00000 	.word	0x7ff00000
 8003400:	3fdbffff 	.word	0x3fdbffff
 8003404:	0800a8e8 	.word	0x0800a8e8
 8003408:	0800a8c8 	.word	0x0800a8c8
 800340c:	3ff00000 	.word	0x3ff00000
 8003410:	3ff2ffff 	.word	0x3ff2ffff
 8003414:	40037fff 	.word	0x40037fff
 8003418:	3ff80000 	.word	0x3ff80000
 800341c:	bff00000 	.word	0xbff00000

08003420 <fabs>:
 8003420:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop

08003428 <sqrt>:
 8003428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800342c:	b08b      	sub	sp, #44	; 0x2c
 800342e:	4604      	mov	r4, r0
 8003430:	460d      	mov	r5, r1
 8003432:	f000 f855 	bl	80034e0 <__ieee754_sqrt>
 8003436:	4b28      	ldr	r3, [pc, #160]	; (80034d8 <sqrt+0xb0>)
 8003438:	f993 a000 	ldrsb.w	sl, [r3]
 800343c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003440:	4606      	mov	r6, r0
 8003442:	460f      	mov	r7, r1
 8003444:	d012      	beq.n	800346c <sqrt+0x44>
 8003446:	4622      	mov	r2, r4
 8003448:	462b      	mov	r3, r5
 800344a:	4620      	mov	r0, r4
 800344c:	4629      	mov	r1, r5
 800344e:	f000 fd5d 	bl	8003f0c <__aeabi_dcmpun>
 8003452:	4683      	mov	fp, r0
 8003454:	b950      	cbnz	r0, 800346c <sqrt+0x44>
 8003456:	f04f 0800 	mov.w	r8, #0
 800345a:	f04f 0900 	mov.w	r9, #0
 800345e:	4620      	mov	r0, r4
 8003460:	4629      	mov	r1, r5
 8003462:	4642      	mov	r2, r8
 8003464:	464b      	mov	r3, r9
 8003466:	f000 fd29 	bl	8003ebc <__aeabi_dcmplt>
 800346a:	b920      	cbnz	r0, 8003476 <sqrt+0x4e>
 800346c:	4630      	mov	r0, r6
 800346e:	4639      	mov	r1, r7
 8003470:	b00b      	add	sp, #44	; 0x2c
 8003472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003476:	4b19      	ldr	r3, [pc, #100]	; (80034dc <sqrt+0xb4>)
 8003478:	f8cd b020 	str.w	fp, [sp, #32]
 800347c:	2201      	movs	r2, #1
 800347e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003482:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003486:	e88d 000c 	stmia.w	sp, {r2, r3}
 800348a:	f1ba 0f00 	cmp.w	sl, #0
 800348e:	d015      	beq.n	80034bc <sqrt+0x94>
 8003490:	4642      	mov	r2, r8
 8003492:	464b      	mov	r3, r9
 8003494:	4640      	mov	r0, r8
 8003496:	4649      	mov	r1, r9
 8003498:	f000 fbc8 	bl	8003c2c <__aeabi_ddiv>
 800349c:	f1ba 0f02 	cmp.w	sl, #2
 80034a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80034a4:	d10c      	bne.n	80034c0 <sqrt+0x98>
 80034a6:	f000 fd8f 	bl	8003fc8 <__errno>
 80034aa:	2321      	movs	r3, #33	; 0x21
 80034ac:	6003      	str	r3, [r0, #0]
 80034ae:	9b08      	ldr	r3, [sp, #32]
 80034b0:	b963      	cbnz	r3, 80034cc <sqrt+0xa4>
 80034b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80034b6:	b00b      	add	sp, #44	; 0x2c
 80034b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034bc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80034c0:	4668      	mov	r0, sp
 80034c2:	f000 f8cf 	bl	8003664 <matherr>
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d1f1      	bne.n	80034ae <sqrt+0x86>
 80034ca:	e7ec      	b.n	80034a6 <sqrt+0x7e>
 80034cc:	f000 fd7c 	bl	8003fc8 <__errno>
 80034d0:	9b08      	ldr	r3, [sp, #32]
 80034d2:	6003      	str	r3, [r0, #0]
 80034d4:	e7ed      	b.n	80034b2 <sqrt+0x8a>
 80034d6:	bf00      	nop
 80034d8:	20000038 	.word	0x20000038
 80034dc:	0800a908 	.word	0x0800a908

080034e0 <__ieee754_sqrt>:
 80034e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e4:	4e5e      	ldr	r6, [pc, #376]	; (8003660 <__ieee754_sqrt+0x180>)
 80034e6:	46b6      	mov	lr, r6
 80034e8:	400e      	ands	r6, r1
 80034ea:	4576      	cmp	r6, lr
 80034ec:	4604      	mov	r4, r0
 80034ee:	460d      	mov	r5, r1
 80034f0:	f000 8094 	beq.w	800361c <__ieee754_sqrt+0x13c>
 80034f4:	2900      	cmp	r1, #0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4602      	mov	r2, r0
 80034fa:	dd72      	ble.n	80035e2 <__ieee754_sqrt+0x102>
 80034fc:	150f      	asrs	r7, r1, #20
 80034fe:	d07d      	beq.n	80035fc <__ieee754_sqrt+0x11c>
 8003500:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 8003504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003508:	07f8      	lsls	r0, r7, #31
 800350a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800350e:	d463      	bmi.n	80035d8 <__ieee754_sqrt+0xf8>
 8003510:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 8003514:	2600      	movs	r6, #0
 8003516:	440b      	add	r3, r1
 8003518:	107f      	asrs	r7, r7, #1
 800351a:	0052      	lsls	r2, r2, #1
 800351c:	46b6      	mov	lr, r6
 800351e:	2016      	movs	r0, #22
 8003520:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003524:	eb0e 0401 	add.w	r4, lr, r1
 8003528:	429c      	cmp	r4, r3
 800352a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 800352e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003532:	dc03      	bgt.n	800353c <__ieee754_sqrt+0x5c>
 8003534:	1b1b      	subs	r3, r3, r4
 8003536:	eb04 0e01 	add.w	lr, r4, r1
 800353a:	440e      	add	r6, r1
 800353c:	3801      	subs	r0, #1
 800353e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8003542:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003546:	d1ed      	bne.n	8003524 <__ieee754_sqrt+0x44>
 8003548:	4684      	mov	ip, r0
 800354a:	2420      	movs	r4, #32
 800354c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003550:	e009      	b.n	8003566 <__ieee754_sqrt+0x86>
 8003552:	d020      	beq.n	8003596 <__ieee754_sqrt+0xb6>
 8003554:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 8003558:	3c01      	subs	r4, #1
 800355a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800355e:	442b      	add	r3, r5
 8003560:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003564:	d020      	beq.n	80035a8 <__ieee754_sqrt+0xc8>
 8003566:	459e      	cmp	lr, r3
 8003568:	eb01 050c 	add.w	r5, r1, ip
 800356c:	daf1      	bge.n	8003552 <__ieee754_sqrt+0x72>
 800356e:	2d00      	cmp	r5, #0
 8003570:	eb05 0c01 	add.w	ip, r5, r1
 8003574:	db09      	blt.n	800358a <__ieee754_sqrt+0xaa>
 8003576:	46f0      	mov	r8, lr
 8003578:	4295      	cmp	r5, r2
 800357a:	ebce 0303 	rsb	r3, lr, r3
 800357e:	d900      	bls.n	8003582 <__ieee754_sqrt+0xa2>
 8003580:	3b01      	subs	r3, #1
 8003582:	1b52      	subs	r2, r2, r5
 8003584:	4408      	add	r0, r1
 8003586:	46c6      	mov	lr, r8
 8003588:	e7e4      	b.n	8003554 <__ieee754_sqrt+0x74>
 800358a:	f1bc 0f00 	cmp.w	ip, #0
 800358e:	dbf2      	blt.n	8003576 <__ieee754_sqrt+0x96>
 8003590:	f10e 0801 	add.w	r8, lr, #1
 8003594:	e7f0      	b.n	8003578 <__ieee754_sqrt+0x98>
 8003596:	4295      	cmp	r5, r2
 8003598:	d81c      	bhi.n	80035d4 <__ieee754_sqrt+0xf4>
 800359a:	2d00      	cmp	r5, #0
 800359c:	eb05 0c01 	add.w	ip, r5, r1
 80035a0:	db48      	blt.n	8003634 <__ieee754_sqrt+0x154>
 80035a2:	4698      	mov	r8, r3
 80035a4:	2300      	movs	r3, #0
 80035a6:	e7ec      	b.n	8003582 <__ieee754_sqrt+0xa2>
 80035a8:	4313      	orrs	r3, r2
 80035aa:	d004      	beq.n	80035b6 <__ieee754_sqrt+0xd6>
 80035ac:	1c41      	adds	r1, r0, #1
 80035ae:	d045      	beq.n	800363c <__ieee754_sqrt+0x15c>
 80035b0:	f000 0401 	and.w	r4, r0, #1
 80035b4:	4420      	add	r0, r4
 80035b6:	0844      	lsrs	r4, r0, #1
 80035b8:	1073      	asrs	r3, r6, #1
 80035ba:	07f2      	lsls	r2, r6, #31
 80035bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80035c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80035c4:	bf48      	it	mi
 80035c6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80035ca:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80035ce:	4620      	mov	r0, r4
 80035d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035d4:	4673      	mov	r3, lr
 80035d6:	e7bd      	b.n	8003554 <__ieee754_sqrt+0x74>
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80035de:	0052      	lsls	r2, r2, #1
 80035e0:	e796      	b.n	8003510 <__ieee754_sqrt+0x30>
 80035e2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80035e6:	4306      	orrs	r6, r0
 80035e8:	d022      	beq.n	8003630 <__ieee754_sqrt+0x150>
 80035ea:	bb71      	cbnz	r1, 800364a <__ieee754_sqrt+0x16a>
 80035ec:	460f      	mov	r7, r1
 80035ee:	0ad3      	lsrs	r3, r2, #11
 80035f0:	3f15      	subs	r7, #21
 80035f2:	0552      	lsls	r2, r2, #21
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0fa      	beq.n	80035ee <__ieee754_sqrt+0x10e>
 80035f8:	02dd      	lsls	r5, r3, #11
 80035fa:	d421      	bmi.n	8003640 <__ieee754_sqrt+0x160>
 80035fc:	2100      	movs	r1, #0
 80035fe:	e000      	b.n	8003602 <__ieee754_sqrt+0x122>
 8003600:	4601      	mov	r1, r0
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	02dc      	lsls	r4, r3, #11
 8003606:	f101 0001 	add.w	r0, r1, #1
 800360a:	d5f9      	bpl.n	8003600 <__ieee754_sqrt+0x120>
 800360c:	f1c0 0420 	rsb	r4, r0, #32
 8003610:	fa22 f404 	lsr.w	r4, r2, r4
 8003614:	4323      	orrs	r3, r4
 8003616:	1a7f      	subs	r7, r7, r1
 8003618:	4082      	lsls	r2, r0
 800361a:	e771      	b.n	8003500 <__ieee754_sqrt+0x20>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	f000 f9da 	bl	80039d8 <__aeabi_dmul>
 8003624:	4622      	mov	r2, r4
 8003626:	462b      	mov	r3, r5
 8003628:	f000 f824 	bl	8003674 <__adddf3>
 800362c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003634:	f1bc 0f00 	cmp.w	ip, #0
 8003638:	daaa      	bge.n	8003590 <__ieee754_sqrt+0xb0>
 800363a:	e7b2      	b.n	80035a2 <__ieee754_sqrt+0xc2>
 800363c:	3601      	adds	r6, #1
 800363e:	e7bb      	b.n	80035b8 <__ieee754_sqrt+0xd8>
 8003640:	2420      	movs	r4, #32
 8003642:	f04f 31ff 	mov.w	r1, #4294967295
 8003646:	2000      	movs	r0, #0
 8003648:	e7e2      	b.n	8003610 <__ieee754_sqrt+0x130>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	f000 f80f 	bl	8003670 <__aeabi_dsub>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	f000 fae9 	bl	8003c2c <__aeabi_ddiv>
 800365a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800365e:	bf00      	nop
 8003660:	7ff00000 	.word	0x7ff00000

08003664 <matherr>:
 8003664:	2000      	movs	r0, #0
 8003666:	4770      	bx	lr

08003668 <__aeabi_drsub>:
 8003668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800366c:	e002      	b.n	8003674 <__adddf3>
 800366e:	bf00      	nop

08003670 <__aeabi_dsub>:
 8003670:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08003674 <__adddf3>:
 8003674:	b530      	push	{r4, r5, lr}
 8003676:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800367a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800367e:	ea94 0f05 	teq	r4, r5
 8003682:	bf08      	it	eq
 8003684:	ea90 0f02 	teqeq	r0, r2
 8003688:	bf1f      	itttt	ne
 800368a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800368e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003692:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003696:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800369a:	f000 80e2 	beq.w	8003862 <__adddf3+0x1ee>
 800369e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80036a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80036a6:	bfb8      	it	lt
 80036a8:	426d      	neglt	r5, r5
 80036aa:	dd0c      	ble.n	80036c6 <__adddf3+0x52>
 80036ac:	442c      	add	r4, r5
 80036ae:	ea80 0202 	eor.w	r2, r0, r2
 80036b2:	ea81 0303 	eor.w	r3, r1, r3
 80036b6:	ea82 0000 	eor.w	r0, r2, r0
 80036ba:	ea83 0101 	eor.w	r1, r3, r1
 80036be:	ea80 0202 	eor.w	r2, r0, r2
 80036c2:	ea81 0303 	eor.w	r3, r1, r3
 80036c6:	2d36      	cmp	r5, #54	; 0x36
 80036c8:	bf88      	it	hi
 80036ca:	bd30      	pophi	{r4, r5, pc}
 80036cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80036d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80036d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80036d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80036dc:	d002      	beq.n	80036e4 <__adddf3+0x70>
 80036de:	4240      	negs	r0, r0
 80036e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80036e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80036e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80036ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80036f0:	d002      	beq.n	80036f8 <__adddf3+0x84>
 80036f2:	4252      	negs	r2, r2
 80036f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80036f8:	ea94 0f05 	teq	r4, r5
 80036fc:	f000 80a7 	beq.w	800384e <__adddf3+0x1da>
 8003700:	f1a4 0401 	sub.w	r4, r4, #1
 8003704:	f1d5 0e20 	rsbs	lr, r5, #32
 8003708:	db0d      	blt.n	8003726 <__adddf3+0xb2>
 800370a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800370e:	fa22 f205 	lsr.w	r2, r2, r5
 8003712:	1880      	adds	r0, r0, r2
 8003714:	f141 0100 	adc.w	r1, r1, #0
 8003718:	fa03 f20e 	lsl.w	r2, r3, lr
 800371c:	1880      	adds	r0, r0, r2
 800371e:	fa43 f305 	asr.w	r3, r3, r5
 8003722:	4159      	adcs	r1, r3
 8003724:	e00e      	b.n	8003744 <__adddf3+0xd0>
 8003726:	f1a5 0520 	sub.w	r5, r5, #32
 800372a:	f10e 0e20 	add.w	lr, lr, #32
 800372e:	2a01      	cmp	r2, #1
 8003730:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003734:	bf28      	it	cs
 8003736:	f04c 0c02 	orrcs.w	ip, ip, #2
 800373a:	fa43 f305 	asr.w	r3, r3, r5
 800373e:	18c0      	adds	r0, r0, r3
 8003740:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003744:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003748:	d507      	bpl.n	800375a <__adddf3+0xe6>
 800374a:	f04f 0e00 	mov.w	lr, #0
 800374e:	f1dc 0c00 	rsbs	ip, ip, #0
 8003752:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003756:	eb6e 0101 	sbc.w	r1, lr, r1
 800375a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800375e:	d31b      	bcc.n	8003798 <__adddf3+0x124>
 8003760:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003764:	d30c      	bcc.n	8003780 <__adddf3+0x10c>
 8003766:	0849      	lsrs	r1, r1, #1
 8003768:	ea5f 0030 	movs.w	r0, r0, rrx
 800376c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003770:	f104 0401 	add.w	r4, r4, #1
 8003774:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003778:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800377c:	f080 809a 	bcs.w	80038b4 <__adddf3+0x240>
 8003780:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003784:	bf08      	it	eq
 8003786:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800378a:	f150 0000 	adcs.w	r0, r0, #0
 800378e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003792:	ea41 0105 	orr.w	r1, r1, r5
 8003796:	bd30      	pop	{r4, r5, pc}
 8003798:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800379c:	4140      	adcs	r0, r0
 800379e:	eb41 0101 	adc.w	r1, r1, r1
 80037a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80037a6:	f1a4 0401 	sub.w	r4, r4, #1
 80037aa:	d1e9      	bne.n	8003780 <__adddf3+0x10c>
 80037ac:	f091 0f00 	teq	r1, #0
 80037b0:	bf04      	itt	eq
 80037b2:	4601      	moveq	r1, r0
 80037b4:	2000      	moveq	r0, #0
 80037b6:	fab1 f381 	clz	r3, r1
 80037ba:	bf08      	it	eq
 80037bc:	3320      	addeq	r3, #32
 80037be:	f1a3 030b 	sub.w	r3, r3, #11
 80037c2:	f1b3 0220 	subs.w	r2, r3, #32
 80037c6:	da0c      	bge.n	80037e2 <__adddf3+0x16e>
 80037c8:	320c      	adds	r2, #12
 80037ca:	dd08      	ble.n	80037de <__adddf3+0x16a>
 80037cc:	f102 0c14 	add.w	ip, r2, #20
 80037d0:	f1c2 020c 	rsb	r2, r2, #12
 80037d4:	fa01 f00c 	lsl.w	r0, r1, ip
 80037d8:	fa21 f102 	lsr.w	r1, r1, r2
 80037dc:	e00c      	b.n	80037f8 <__adddf3+0x184>
 80037de:	f102 0214 	add.w	r2, r2, #20
 80037e2:	bfd8      	it	le
 80037e4:	f1c2 0c20 	rsble	ip, r2, #32
 80037e8:	fa01 f102 	lsl.w	r1, r1, r2
 80037ec:	fa20 fc0c 	lsr.w	ip, r0, ip
 80037f0:	bfdc      	itt	le
 80037f2:	ea41 010c 	orrle.w	r1, r1, ip
 80037f6:	4090      	lslle	r0, r2
 80037f8:	1ae4      	subs	r4, r4, r3
 80037fa:	bfa2      	ittt	ge
 80037fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003800:	4329      	orrge	r1, r5
 8003802:	bd30      	popge	{r4, r5, pc}
 8003804:	ea6f 0404 	mvn.w	r4, r4
 8003808:	3c1f      	subs	r4, #31
 800380a:	da1c      	bge.n	8003846 <__adddf3+0x1d2>
 800380c:	340c      	adds	r4, #12
 800380e:	dc0e      	bgt.n	800382e <__adddf3+0x1ba>
 8003810:	f104 0414 	add.w	r4, r4, #20
 8003814:	f1c4 0220 	rsb	r2, r4, #32
 8003818:	fa20 f004 	lsr.w	r0, r0, r4
 800381c:	fa01 f302 	lsl.w	r3, r1, r2
 8003820:	ea40 0003 	orr.w	r0, r0, r3
 8003824:	fa21 f304 	lsr.w	r3, r1, r4
 8003828:	ea45 0103 	orr.w	r1, r5, r3
 800382c:	bd30      	pop	{r4, r5, pc}
 800382e:	f1c4 040c 	rsb	r4, r4, #12
 8003832:	f1c4 0220 	rsb	r2, r4, #32
 8003836:	fa20 f002 	lsr.w	r0, r0, r2
 800383a:	fa01 f304 	lsl.w	r3, r1, r4
 800383e:	ea40 0003 	orr.w	r0, r0, r3
 8003842:	4629      	mov	r1, r5
 8003844:	bd30      	pop	{r4, r5, pc}
 8003846:	fa21 f004 	lsr.w	r0, r1, r4
 800384a:	4629      	mov	r1, r5
 800384c:	bd30      	pop	{r4, r5, pc}
 800384e:	f094 0f00 	teq	r4, #0
 8003852:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003856:	bf06      	itte	eq
 8003858:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800385c:	3401      	addeq	r4, #1
 800385e:	3d01      	subne	r5, #1
 8003860:	e74e      	b.n	8003700 <__adddf3+0x8c>
 8003862:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003866:	bf18      	it	ne
 8003868:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800386c:	d029      	beq.n	80038c2 <__adddf3+0x24e>
 800386e:	ea94 0f05 	teq	r4, r5
 8003872:	bf08      	it	eq
 8003874:	ea90 0f02 	teqeq	r0, r2
 8003878:	d005      	beq.n	8003886 <__adddf3+0x212>
 800387a:	ea54 0c00 	orrs.w	ip, r4, r0
 800387e:	bf04      	itt	eq
 8003880:	4619      	moveq	r1, r3
 8003882:	4610      	moveq	r0, r2
 8003884:	bd30      	pop	{r4, r5, pc}
 8003886:	ea91 0f03 	teq	r1, r3
 800388a:	bf1e      	ittt	ne
 800388c:	2100      	movne	r1, #0
 800388e:	2000      	movne	r0, #0
 8003890:	bd30      	popne	{r4, r5, pc}
 8003892:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003896:	d105      	bne.n	80038a4 <__adddf3+0x230>
 8003898:	0040      	lsls	r0, r0, #1
 800389a:	4149      	adcs	r1, r1
 800389c:	bf28      	it	cs
 800389e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80038a2:	bd30      	pop	{r4, r5, pc}
 80038a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80038a8:	bf3c      	itt	cc
 80038aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80038ae:	bd30      	popcc	{r4, r5, pc}
 80038b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80038b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80038b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80038bc:	f04f 0000 	mov.w	r0, #0
 80038c0:	bd30      	pop	{r4, r5, pc}
 80038c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80038c6:	bf1a      	itte	ne
 80038c8:	4619      	movne	r1, r3
 80038ca:	4610      	movne	r0, r2
 80038cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80038d0:	bf1c      	itt	ne
 80038d2:	460b      	movne	r3, r1
 80038d4:	4602      	movne	r2, r0
 80038d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80038da:	bf06      	itte	eq
 80038dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80038e0:	ea91 0f03 	teqeq	r1, r3
 80038e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80038e8:	bd30      	pop	{r4, r5, pc}
 80038ea:	bf00      	nop

080038ec <__aeabi_ui2d>:
 80038ec:	f090 0f00 	teq	r0, #0
 80038f0:	bf04      	itt	eq
 80038f2:	2100      	moveq	r1, #0
 80038f4:	4770      	bxeq	lr
 80038f6:	b530      	push	{r4, r5, lr}
 80038f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80038fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003900:	f04f 0500 	mov.w	r5, #0
 8003904:	f04f 0100 	mov.w	r1, #0
 8003908:	e750      	b.n	80037ac <__adddf3+0x138>
 800390a:	bf00      	nop

0800390c <__aeabi_i2d>:
 800390c:	f090 0f00 	teq	r0, #0
 8003910:	bf04      	itt	eq
 8003912:	2100      	moveq	r1, #0
 8003914:	4770      	bxeq	lr
 8003916:	b530      	push	{r4, r5, lr}
 8003918:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800391c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003920:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003924:	bf48      	it	mi
 8003926:	4240      	negmi	r0, r0
 8003928:	f04f 0100 	mov.w	r1, #0
 800392c:	e73e      	b.n	80037ac <__adddf3+0x138>
 800392e:	bf00      	nop

08003930 <__aeabi_f2d>:
 8003930:	0042      	lsls	r2, r0, #1
 8003932:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003936:	ea4f 0131 	mov.w	r1, r1, rrx
 800393a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800393e:	bf1f      	itttt	ne
 8003940:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003944:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003948:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800394c:	4770      	bxne	lr
 800394e:	f092 0f00 	teq	r2, #0
 8003952:	bf14      	ite	ne
 8003954:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003958:	4770      	bxeq	lr
 800395a:	b530      	push	{r4, r5, lr}
 800395c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003960:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003964:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003968:	e720      	b.n	80037ac <__adddf3+0x138>
 800396a:	bf00      	nop

0800396c <__aeabi_ul2d>:
 800396c:	ea50 0201 	orrs.w	r2, r0, r1
 8003970:	bf08      	it	eq
 8003972:	4770      	bxeq	lr
 8003974:	b530      	push	{r4, r5, lr}
 8003976:	f04f 0500 	mov.w	r5, #0
 800397a:	e00a      	b.n	8003992 <__aeabi_l2d+0x16>

0800397c <__aeabi_l2d>:
 800397c:	ea50 0201 	orrs.w	r2, r0, r1
 8003980:	bf08      	it	eq
 8003982:	4770      	bxeq	lr
 8003984:	b530      	push	{r4, r5, lr}
 8003986:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800398a:	d502      	bpl.n	8003992 <__aeabi_l2d+0x16>
 800398c:	4240      	negs	r0, r0
 800398e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003992:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003996:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800399a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800399e:	f43f aedc 	beq.w	800375a <__adddf3+0xe6>
 80039a2:	f04f 0203 	mov.w	r2, #3
 80039a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80039aa:	bf18      	it	ne
 80039ac:	3203      	addne	r2, #3
 80039ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80039b2:	bf18      	it	ne
 80039b4:	3203      	addne	r2, #3
 80039b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80039ba:	f1c2 0320 	rsb	r3, r2, #32
 80039be:	fa00 fc03 	lsl.w	ip, r0, r3
 80039c2:	fa20 f002 	lsr.w	r0, r0, r2
 80039c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80039ca:	ea40 000e 	orr.w	r0, r0, lr
 80039ce:	fa21 f102 	lsr.w	r1, r1, r2
 80039d2:	4414      	add	r4, r2
 80039d4:	e6c1      	b.n	800375a <__adddf3+0xe6>
 80039d6:	bf00      	nop

080039d8 <__aeabi_dmul>:
 80039d8:	b570      	push	{r4, r5, r6, lr}
 80039da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80039de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80039e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80039e6:	bf1d      	ittte	ne
 80039e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80039ec:	ea94 0f0c 	teqne	r4, ip
 80039f0:	ea95 0f0c 	teqne	r5, ip
 80039f4:	f000 f8de 	bleq	8003bb4 <__aeabi_dmul+0x1dc>
 80039f8:	442c      	add	r4, r5
 80039fa:	ea81 0603 	eor.w	r6, r1, r3
 80039fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003a02:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003a06:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003a0a:	bf18      	it	ne
 8003a0c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003a10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003a14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a18:	d038      	beq.n	8003a8c <__aeabi_dmul+0xb4>
 8003a1a:	fba0 ce02 	umull	ip, lr, r0, r2
 8003a1e:	f04f 0500 	mov.w	r5, #0
 8003a22:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003a26:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003a2a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003a2e:	f04f 0600 	mov.w	r6, #0
 8003a32:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003a36:	f09c 0f00 	teq	ip, #0
 8003a3a:	bf18      	it	ne
 8003a3c:	f04e 0e01 	orrne.w	lr, lr, #1
 8003a40:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003a44:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003a48:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003a4c:	d204      	bcs.n	8003a58 <__aeabi_dmul+0x80>
 8003a4e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003a52:	416d      	adcs	r5, r5
 8003a54:	eb46 0606 	adc.w	r6, r6, r6
 8003a58:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003a5c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003a60:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003a64:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003a68:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003a6c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003a70:	bf88      	it	hi
 8003a72:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003a76:	d81e      	bhi.n	8003ab6 <__aeabi_dmul+0xde>
 8003a78:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003a7c:	bf08      	it	eq
 8003a7e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003a82:	f150 0000 	adcs.w	r0, r0, #0
 8003a86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003a90:	ea46 0101 	orr.w	r1, r6, r1
 8003a94:	ea40 0002 	orr.w	r0, r0, r2
 8003a98:	ea81 0103 	eor.w	r1, r1, r3
 8003a9c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003aa0:	bfc2      	ittt	gt
 8003aa2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003aa6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003aaa:	bd70      	popgt	{r4, r5, r6, pc}
 8003aac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003ab0:	f04f 0e00 	mov.w	lr, #0
 8003ab4:	3c01      	subs	r4, #1
 8003ab6:	f300 80ab 	bgt.w	8003c10 <__aeabi_dmul+0x238>
 8003aba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003abe:	bfde      	ittt	le
 8003ac0:	2000      	movle	r0, #0
 8003ac2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003ac6:	bd70      	pople	{r4, r5, r6, pc}
 8003ac8:	f1c4 0400 	rsb	r4, r4, #0
 8003acc:	3c20      	subs	r4, #32
 8003ace:	da35      	bge.n	8003b3c <__aeabi_dmul+0x164>
 8003ad0:	340c      	adds	r4, #12
 8003ad2:	dc1b      	bgt.n	8003b0c <__aeabi_dmul+0x134>
 8003ad4:	f104 0414 	add.w	r4, r4, #20
 8003ad8:	f1c4 0520 	rsb	r5, r4, #32
 8003adc:	fa00 f305 	lsl.w	r3, r0, r5
 8003ae0:	fa20 f004 	lsr.w	r0, r0, r4
 8003ae4:	fa01 f205 	lsl.w	r2, r1, r5
 8003ae8:	ea40 0002 	orr.w	r0, r0, r2
 8003aec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8003af0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003af4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003af8:	fa21 f604 	lsr.w	r6, r1, r4
 8003afc:	eb42 0106 	adc.w	r1, r2, r6
 8003b00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003b04:	bf08      	it	eq
 8003b06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
 8003b0c:	f1c4 040c 	rsb	r4, r4, #12
 8003b10:	f1c4 0520 	rsb	r5, r4, #32
 8003b14:	fa00 f304 	lsl.w	r3, r0, r4
 8003b18:	fa20 f005 	lsr.w	r0, r0, r5
 8003b1c:	fa01 f204 	lsl.w	r2, r1, r4
 8003b20:	ea40 0002 	orr.w	r0, r0, r2
 8003b24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003b28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003b2c:	f141 0100 	adc.w	r1, r1, #0
 8003b30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003b34:	bf08      	it	eq
 8003b36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003b3a:	bd70      	pop	{r4, r5, r6, pc}
 8003b3c:	f1c4 0520 	rsb	r5, r4, #32
 8003b40:	fa00 f205 	lsl.w	r2, r0, r5
 8003b44:	ea4e 0e02 	orr.w	lr, lr, r2
 8003b48:	fa20 f304 	lsr.w	r3, r0, r4
 8003b4c:	fa01 f205 	lsl.w	r2, r1, r5
 8003b50:	ea43 0302 	orr.w	r3, r3, r2
 8003b54:	fa21 f004 	lsr.w	r0, r1, r4
 8003b58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003b5c:	fa21 f204 	lsr.w	r2, r1, r4
 8003b60:	ea20 0002 	bic.w	r0, r0, r2
 8003b64:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003b68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003b6c:	bf08      	it	eq
 8003b6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003b72:	bd70      	pop	{r4, r5, r6, pc}
 8003b74:	f094 0f00 	teq	r4, #0
 8003b78:	d10f      	bne.n	8003b9a <__aeabi_dmul+0x1c2>
 8003b7a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003b7e:	0040      	lsls	r0, r0, #1
 8003b80:	eb41 0101 	adc.w	r1, r1, r1
 8003b84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003b88:	bf08      	it	eq
 8003b8a:	3c01      	subeq	r4, #1
 8003b8c:	d0f7      	beq.n	8003b7e <__aeabi_dmul+0x1a6>
 8003b8e:	ea41 0106 	orr.w	r1, r1, r6
 8003b92:	f095 0f00 	teq	r5, #0
 8003b96:	bf18      	it	ne
 8003b98:	4770      	bxne	lr
 8003b9a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003b9e:	0052      	lsls	r2, r2, #1
 8003ba0:	eb43 0303 	adc.w	r3, r3, r3
 8003ba4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003ba8:	bf08      	it	eq
 8003baa:	3d01      	subeq	r5, #1
 8003bac:	d0f7      	beq.n	8003b9e <__aeabi_dmul+0x1c6>
 8003bae:	ea43 0306 	orr.w	r3, r3, r6
 8003bb2:	4770      	bx	lr
 8003bb4:	ea94 0f0c 	teq	r4, ip
 8003bb8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003bbc:	bf18      	it	ne
 8003bbe:	ea95 0f0c 	teqne	r5, ip
 8003bc2:	d00c      	beq.n	8003bde <__aeabi_dmul+0x206>
 8003bc4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003bc8:	bf18      	it	ne
 8003bca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003bce:	d1d1      	bne.n	8003b74 <__aeabi_dmul+0x19c>
 8003bd0:	ea81 0103 	eor.w	r1, r1, r3
 8003bd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003bd8:	f04f 0000 	mov.w	r0, #0
 8003bdc:	bd70      	pop	{r4, r5, r6, pc}
 8003bde:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003be2:	bf06      	itte	eq
 8003be4:	4610      	moveq	r0, r2
 8003be6:	4619      	moveq	r1, r3
 8003be8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003bec:	d019      	beq.n	8003c22 <__aeabi_dmul+0x24a>
 8003bee:	ea94 0f0c 	teq	r4, ip
 8003bf2:	d102      	bne.n	8003bfa <__aeabi_dmul+0x222>
 8003bf4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003bf8:	d113      	bne.n	8003c22 <__aeabi_dmul+0x24a>
 8003bfa:	ea95 0f0c 	teq	r5, ip
 8003bfe:	d105      	bne.n	8003c0c <__aeabi_dmul+0x234>
 8003c00:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8003c04:	bf1c      	itt	ne
 8003c06:	4610      	movne	r0, r2
 8003c08:	4619      	movne	r1, r3
 8003c0a:	d10a      	bne.n	8003c22 <__aeabi_dmul+0x24a>
 8003c0c:	ea81 0103 	eor.w	r1, r1, r3
 8003c10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003c14:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003c18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003c1c:	f04f 0000 	mov.w	r0, #0
 8003c20:	bd70      	pop	{r4, r5, r6, pc}
 8003c22:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003c26:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003c2a:	bd70      	pop	{r4, r5, r6, pc}

08003c2c <__aeabi_ddiv>:
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003c32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003c36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003c3a:	bf1d      	ittte	ne
 8003c3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003c40:	ea94 0f0c 	teqne	r4, ip
 8003c44:	ea95 0f0c 	teqne	r5, ip
 8003c48:	f000 f8a7 	bleq	8003d9a <__aeabi_ddiv+0x16e>
 8003c4c:	eba4 0405 	sub.w	r4, r4, r5
 8003c50:	ea81 0e03 	eor.w	lr, r1, r3
 8003c54:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003c58:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003c5c:	f000 8088 	beq.w	8003d70 <__aeabi_ddiv+0x144>
 8003c60:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003c64:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003c68:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003c6c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003c70:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003c74:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003c78:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003c7c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003c80:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003c84:	429d      	cmp	r5, r3
 8003c86:	bf08      	it	eq
 8003c88:	4296      	cmpeq	r6, r2
 8003c8a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8003c8e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003c92:	d202      	bcs.n	8003c9a <__aeabi_ddiv+0x6e>
 8003c94:	085b      	lsrs	r3, r3, #1
 8003c96:	ea4f 0232 	mov.w	r2, r2, rrx
 8003c9a:	1ab6      	subs	r6, r6, r2
 8003c9c:	eb65 0503 	sbc.w	r5, r5, r3
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	ea4f 0232 	mov.w	r2, r2, rrx
 8003ca6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003caa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8003cae:	ebb6 0e02 	subs.w	lr, r6, r2
 8003cb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003cb6:	bf22      	ittt	cs
 8003cb8:	1ab6      	subcs	r6, r6, r2
 8003cba:	4675      	movcs	r5, lr
 8003cbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	ea4f 0232 	mov.w	r2, r2, rrx
 8003cc6:	ebb6 0e02 	subs.w	lr, r6, r2
 8003cca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003cce:	bf22      	ittt	cs
 8003cd0:	1ab6      	subcs	r6, r6, r2
 8003cd2:	4675      	movcs	r5, lr
 8003cd4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	ea4f 0232 	mov.w	r2, r2, rrx
 8003cde:	ebb6 0e02 	subs.w	lr, r6, r2
 8003ce2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003ce6:	bf22      	ittt	cs
 8003ce8:	1ab6      	subcs	r6, r6, r2
 8003cea:	4675      	movcs	r5, lr
 8003cec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	ea4f 0232 	mov.w	r2, r2, rrx
 8003cf6:	ebb6 0e02 	subs.w	lr, r6, r2
 8003cfa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003cfe:	bf22      	ittt	cs
 8003d00:	1ab6      	subcs	r6, r6, r2
 8003d02:	4675      	movcs	r5, lr
 8003d04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003d08:	ea55 0e06 	orrs.w	lr, r5, r6
 8003d0c:	d018      	beq.n	8003d40 <__aeabi_ddiv+0x114>
 8003d0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8003d12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003d16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003d1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003d1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8003d22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003d26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003d2a:	d1c0      	bne.n	8003cae <__aeabi_ddiv+0x82>
 8003d2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003d30:	d10b      	bne.n	8003d4a <__aeabi_ddiv+0x11e>
 8003d32:	ea41 0100 	orr.w	r1, r1, r0
 8003d36:	f04f 0000 	mov.w	r0, #0
 8003d3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003d3e:	e7b6      	b.n	8003cae <__aeabi_ddiv+0x82>
 8003d40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003d44:	bf04      	itt	eq
 8003d46:	4301      	orreq	r1, r0
 8003d48:	2000      	moveq	r0, #0
 8003d4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003d4e:	bf88      	it	hi
 8003d50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003d54:	f63f aeaf 	bhi.w	8003ab6 <__aeabi_dmul+0xde>
 8003d58:	ebb5 0c03 	subs.w	ip, r5, r3
 8003d5c:	bf04      	itt	eq
 8003d5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8003d62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003d66:	f150 0000 	adcs.w	r0, r0, #0
 8003d6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003d6e:	bd70      	pop	{r4, r5, r6, pc}
 8003d70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003d74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003d78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003d7c:	bfc2      	ittt	gt
 8003d7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003d82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003d86:	bd70      	popgt	{r4, r5, r6, pc}
 8003d88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003d8c:	f04f 0e00 	mov.w	lr, #0
 8003d90:	3c01      	subs	r4, #1
 8003d92:	e690      	b.n	8003ab6 <__aeabi_dmul+0xde>
 8003d94:	ea45 0e06 	orr.w	lr, r5, r6
 8003d98:	e68d      	b.n	8003ab6 <__aeabi_dmul+0xde>
 8003d9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003d9e:	ea94 0f0c 	teq	r4, ip
 8003da2:	bf08      	it	eq
 8003da4:	ea95 0f0c 	teqeq	r5, ip
 8003da8:	f43f af3b 	beq.w	8003c22 <__aeabi_dmul+0x24a>
 8003dac:	ea94 0f0c 	teq	r4, ip
 8003db0:	d10a      	bne.n	8003dc8 <__aeabi_ddiv+0x19c>
 8003db2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003db6:	f47f af34 	bne.w	8003c22 <__aeabi_dmul+0x24a>
 8003dba:	ea95 0f0c 	teq	r5, ip
 8003dbe:	f47f af25 	bne.w	8003c0c <__aeabi_dmul+0x234>
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	e72c      	b.n	8003c22 <__aeabi_dmul+0x24a>
 8003dc8:	ea95 0f0c 	teq	r5, ip
 8003dcc:	d106      	bne.n	8003ddc <__aeabi_ddiv+0x1b0>
 8003dce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003dd2:	f43f aefd 	beq.w	8003bd0 <__aeabi_dmul+0x1f8>
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	e722      	b.n	8003c22 <__aeabi_dmul+0x24a>
 8003ddc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003de0:	bf18      	it	ne
 8003de2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003de6:	f47f aec5 	bne.w	8003b74 <__aeabi_dmul+0x19c>
 8003dea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8003dee:	f47f af0d 	bne.w	8003c0c <__aeabi_dmul+0x234>
 8003df2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8003df6:	f47f aeeb 	bne.w	8003bd0 <__aeabi_dmul+0x1f8>
 8003dfa:	e712      	b.n	8003c22 <__aeabi_dmul+0x24a>

08003dfc <__gedf2>:
 8003dfc:	f04f 3cff 	mov.w	ip, #4294967295
 8003e00:	e006      	b.n	8003e10 <__cmpdf2+0x4>
 8003e02:	bf00      	nop

08003e04 <__ledf2>:
 8003e04:	f04f 0c01 	mov.w	ip, #1
 8003e08:	e002      	b.n	8003e10 <__cmpdf2+0x4>
 8003e0a:	bf00      	nop

08003e0c <__cmpdf2>:
 8003e0c:	f04f 0c01 	mov.w	ip, #1
 8003e10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8003e14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003e18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003e1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003e20:	bf18      	it	ne
 8003e22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8003e26:	d01b      	beq.n	8003e60 <__cmpdf2+0x54>
 8003e28:	b001      	add	sp, #4
 8003e2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8003e2e:	bf0c      	ite	eq
 8003e30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8003e34:	ea91 0f03 	teqne	r1, r3
 8003e38:	bf02      	ittt	eq
 8003e3a:	ea90 0f02 	teqeq	r0, r2
 8003e3e:	2000      	moveq	r0, #0
 8003e40:	4770      	bxeq	lr
 8003e42:	f110 0f00 	cmn.w	r0, #0
 8003e46:	ea91 0f03 	teq	r1, r3
 8003e4a:	bf58      	it	pl
 8003e4c:	4299      	cmppl	r1, r3
 8003e4e:	bf08      	it	eq
 8003e50:	4290      	cmpeq	r0, r2
 8003e52:	bf2c      	ite	cs
 8003e54:	17d8      	asrcs	r0, r3, #31
 8003e56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8003e5a:	f040 0001 	orr.w	r0, r0, #1
 8003e5e:	4770      	bx	lr
 8003e60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003e64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003e68:	d102      	bne.n	8003e70 <__cmpdf2+0x64>
 8003e6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8003e6e:	d107      	bne.n	8003e80 <__cmpdf2+0x74>
 8003e70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003e74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003e78:	d1d6      	bne.n	8003e28 <__cmpdf2+0x1c>
 8003e7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8003e7e:	d0d3      	beq.n	8003e28 <__cmpdf2+0x1c>
 8003e80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop

08003e88 <__aeabi_cdrcmple>:
 8003e88:	4684      	mov	ip, r0
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	4662      	mov	r2, ip
 8003e8e:	468c      	mov	ip, r1
 8003e90:	4619      	mov	r1, r3
 8003e92:	4663      	mov	r3, ip
 8003e94:	e000      	b.n	8003e98 <__aeabi_cdcmpeq>
 8003e96:	bf00      	nop

08003e98 <__aeabi_cdcmpeq>:
 8003e98:	b501      	push	{r0, lr}
 8003e9a:	f7ff ffb7 	bl	8003e0c <__cmpdf2>
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	bf48      	it	mi
 8003ea2:	f110 0f00 	cmnmi.w	r0, #0
 8003ea6:	bd01      	pop	{r0, pc}

08003ea8 <__aeabi_dcmpeq>:
 8003ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003eac:	f7ff fff4 	bl	8003e98 <__aeabi_cdcmpeq>
 8003eb0:	bf0c      	ite	eq
 8003eb2:	2001      	moveq	r0, #1
 8003eb4:	2000      	movne	r0, #0
 8003eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8003eba:	bf00      	nop

08003ebc <__aeabi_dcmplt>:
 8003ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003ec0:	f7ff ffea 	bl	8003e98 <__aeabi_cdcmpeq>
 8003ec4:	bf34      	ite	cc
 8003ec6:	2001      	movcc	r0, #1
 8003ec8:	2000      	movcs	r0, #0
 8003eca:	f85d fb08 	ldr.w	pc, [sp], #8
 8003ece:	bf00      	nop

08003ed0 <__aeabi_dcmple>:
 8003ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003ed4:	f7ff ffe0 	bl	8003e98 <__aeabi_cdcmpeq>
 8003ed8:	bf94      	ite	ls
 8003eda:	2001      	movls	r0, #1
 8003edc:	2000      	movhi	r0, #0
 8003ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8003ee2:	bf00      	nop

08003ee4 <__aeabi_dcmpge>:
 8003ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003ee8:	f7ff ffce 	bl	8003e88 <__aeabi_cdrcmple>
 8003eec:	bf94      	ite	ls
 8003eee:	2001      	movls	r0, #1
 8003ef0:	2000      	movhi	r0, #0
 8003ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8003ef6:	bf00      	nop

08003ef8 <__aeabi_dcmpgt>:
 8003ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003efc:	f7ff ffc4 	bl	8003e88 <__aeabi_cdrcmple>
 8003f00:	bf34      	ite	cc
 8003f02:	2001      	movcc	r0, #1
 8003f04:	2000      	movcs	r0, #0
 8003f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8003f0a:	bf00      	nop

08003f0c <__aeabi_dcmpun>:
 8003f0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003f10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003f14:	d102      	bne.n	8003f1c <__aeabi_dcmpun+0x10>
 8003f16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8003f1a:	d10a      	bne.n	8003f32 <__aeabi_dcmpun+0x26>
 8003f1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003f20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003f24:	d102      	bne.n	8003f2c <__aeabi_dcmpun+0x20>
 8003f26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8003f2a:	d102      	bne.n	8003f32 <__aeabi_dcmpun+0x26>
 8003f2c:	f04f 0000 	mov.w	r0, #0
 8003f30:	4770      	bx	lr
 8003f32:	f04f 0001 	mov.w	r0, #1
 8003f36:	4770      	bx	lr

08003f38 <__aeabi_d2iz>:
 8003f38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003f3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8003f40:	d215      	bcs.n	8003f6e <__aeabi_d2iz+0x36>
 8003f42:	d511      	bpl.n	8003f68 <__aeabi_d2iz+0x30>
 8003f44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003f48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003f4c:	d912      	bls.n	8003f74 <__aeabi_d2iz+0x3c>
 8003f4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003f52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8003f5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003f5e:	fa23 f002 	lsr.w	r0, r3, r2
 8003f62:	bf18      	it	ne
 8003f64:	4240      	negne	r0, r0
 8003f66:	4770      	bx	lr
 8003f68:	f04f 0000 	mov.w	r0, #0
 8003f6c:	4770      	bx	lr
 8003f6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003f72:	d105      	bne.n	8003f80 <__aeabi_d2iz+0x48>
 8003f74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8003f78:	bf08      	it	eq
 8003f7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8003f7e:	4770      	bx	lr
 8003f80:	f04f 0000 	mov.w	r0, #0
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop

08003f88 <__aeabi_d2uiz>:
 8003f88:	004a      	lsls	r2, r1, #1
 8003f8a:	d211      	bcs.n	8003fb0 <__aeabi_d2uiz+0x28>
 8003f8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8003f90:	d211      	bcs.n	8003fb6 <__aeabi_d2uiz+0x2e>
 8003f92:	d50d      	bpl.n	8003fb0 <__aeabi_d2uiz+0x28>
 8003f94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003f98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003f9c:	d40e      	bmi.n	8003fbc <__aeabi_d2uiz+0x34>
 8003f9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003fa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8003faa:	fa23 f002 	lsr.w	r0, r3, r2
 8003fae:	4770      	bx	lr
 8003fb0:	f04f 0000 	mov.w	r0, #0
 8003fb4:	4770      	bx	lr
 8003fb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003fba:	d102      	bne.n	8003fc2 <__aeabi_d2uiz+0x3a>
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc0:	4770      	bx	lr
 8003fc2:	f04f 0000 	mov.w	r0, #0
 8003fc6:	4770      	bx	lr

08003fc8 <__errno>:
 8003fc8:	4b01      	ldr	r3, [pc, #4]	; (8003fd0 <__errno+0x8>)
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000468 	.word	0x20000468

08003fd4 <__libc_init_array>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	4e0f      	ldr	r6, [pc, #60]	; (8004014 <__libc_init_array+0x40>)
 8003fd8:	4d0f      	ldr	r5, [pc, #60]	; (8004018 <__libc_init_array+0x44>)
 8003fda:	1b76      	subs	r6, r6, r5
 8003fdc:	10b6      	asrs	r6, r6, #2
 8003fde:	bf18      	it	ne
 8003fe0:	2400      	movne	r4, #0
 8003fe2:	d005      	beq.n	8003ff0 <__libc_init_array+0x1c>
 8003fe4:	3401      	adds	r4, #1
 8003fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fea:	4798      	blx	r3
 8003fec:	42a6      	cmp	r6, r4
 8003fee:	d1f9      	bne.n	8003fe4 <__libc_init_array+0x10>
 8003ff0:	4e0a      	ldr	r6, [pc, #40]	; (800401c <__libc_init_array+0x48>)
 8003ff2:	4d0b      	ldr	r5, [pc, #44]	; (8004020 <__libc_init_array+0x4c>)
 8003ff4:	1b76      	subs	r6, r6, r5
 8003ff6:	f7fe fa01 	bl	80023fc <_init>
 8003ffa:	10b6      	asrs	r6, r6, #2
 8003ffc:	bf18      	it	ne
 8003ffe:	2400      	movne	r4, #0
 8004000:	d006      	beq.n	8004010 <__libc_init_array+0x3c>
 8004002:	3401      	adds	r4, #1
 8004004:	f855 3b04 	ldr.w	r3, [r5], #4
 8004008:	4798      	blx	r3
 800400a:	42a6      	cmp	r6, r4
 800400c:	d1f9      	bne.n	8004002 <__libc_init_array+0x2e>
 800400e:	bd70      	pop	{r4, r5, r6, pc}
 8004010:	bd70      	pop	{r4, r5, r6, pc}
 8004012:	bf00      	nop
 8004014:	200009e8 	.word	0x200009e8
 8004018:	200009e8 	.word	0x200009e8
 800401c:	200009e8 	.word	0x200009e8
 8004020:	200009e8 	.word	0x200009e8

08004024 <memcpy>:
 8004024:	4684      	mov	ip, r0
 8004026:	ea41 0300 	orr.w	r3, r1, r0
 800402a:	f013 0303 	ands.w	r3, r3, #3
 800402e:	d16d      	bne.n	800410c <memcpy+0xe8>
 8004030:	3a40      	subs	r2, #64	; 0x40
 8004032:	d341      	bcc.n	80040b8 <memcpy+0x94>
 8004034:	f851 3b04 	ldr.w	r3, [r1], #4
 8004038:	f840 3b04 	str.w	r3, [r0], #4
 800403c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004040:	f840 3b04 	str.w	r3, [r0], #4
 8004044:	f851 3b04 	ldr.w	r3, [r1], #4
 8004048:	f840 3b04 	str.w	r3, [r0], #4
 800404c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004050:	f840 3b04 	str.w	r3, [r0], #4
 8004054:	f851 3b04 	ldr.w	r3, [r1], #4
 8004058:	f840 3b04 	str.w	r3, [r0], #4
 800405c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004060:	f840 3b04 	str.w	r3, [r0], #4
 8004064:	f851 3b04 	ldr.w	r3, [r1], #4
 8004068:	f840 3b04 	str.w	r3, [r0], #4
 800406c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004070:	f840 3b04 	str.w	r3, [r0], #4
 8004074:	f851 3b04 	ldr.w	r3, [r1], #4
 8004078:	f840 3b04 	str.w	r3, [r0], #4
 800407c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004080:	f840 3b04 	str.w	r3, [r0], #4
 8004084:	f851 3b04 	ldr.w	r3, [r1], #4
 8004088:	f840 3b04 	str.w	r3, [r0], #4
 800408c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004090:	f840 3b04 	str.w	r3, [r0], #4
 8004094:	f851 3b04 	ldr.w	r3, [r1], #4
 8004098:	f840 3b04 	str.w	r3, [r0], #4
 800409c:	f851 3b04 	ldr.w	r3, [r1], #4
 80040a0:	f840 3b04 	str.w	r3, [r0], #4
 80040a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80040a8:	f840 3b04 	str.w	r3, [r0], #4
 80040ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80040b0:	f840 3b04 	str.w	r3, [r0], #4
 80040b4:	3a40      	subs	r2, #64	; 0x40
 80040b6:	d2bd      	bcs.n	8004034 <memcpy+0x10>
 80040b8:	3230      	adds	r2, #48	; 0x30
 80040ba:	d311      	bcc.n	80040e0 <memcpy+0xbc>
 80040bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80040c0:	f840 3b04 	str.w	r3, [r0], #4
 80040c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80040c8:	f840 3b04 	str.w	r3, [r0], #4
 80040cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80040d0:	f840 3b04 	str.w	r3, [r0], #4
 80040d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80040d8:	f840 3b04 	str.w	r3, [r0], #4
 80040dc:	3a10      	subs	r2, #16
 80040de:	d2ed      	bcs.n	80040bc <memcpy+0x98>
 80040e0:	320c      	adds	r2, #12
 80040e2:	d305      	bcc.n	80040f0 <memcpy+0xcc>
 80040e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80040e8:	f840 3b04 	str.w	r3, [r0], #4
 80040ec:	3a04      	subs	r2, #4
 80040ee:	d2f9      	bcs.n	80040e4 <memcpy+0xc0>
 80040f0:	3204      	adds	r2, #4
 80040f2:	d008      	beq.n	8004106 <memcpy+0xe2>
 80040f4:	07d2      	lsls	r2, r2, #31
 80040f6:	bf1c      	itt	ne
 80040f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80040fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8004100:	d301      	bcc.n	8004106 <memcpy+0xe2>
 8004102:	880b      	ldrh	r3, [r1, #0]
 8004104:	8003      	strh	r3, [r0, #0]
 8004106:	4660      	mov	r0, ip
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	2a08      	cmp	r2, #8
 800410e:	d313      	bcc.n	8004138 <memcpy+0x114>
 8004110:	078b      	lsls	r3, r1, #30
 8004112:	d08d      	beq.n	8004030 <memcpy+0xc>
 8004114:	f010 0303 	ands.w	r3, r0, #3
 8004118:	d08a      	beq.n	8004030 <memcpy+0xc>
 800411a:	f1c3 0304 	rsb	r3, r3, #4
 800411e:	1ad2      	subs	r2, r2, r3
 8004120:	07db      	lsls	r3, r3, #31
 8004122:	bf1c      	itt	ne
 8004124:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004128:	f800 3b01 	strbne.w	r3, [r0], #1
 800412c:	d380      	bcc.n	8004030 <memcpy+0xc>
 800412e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004132:	f820 3b02 	strh.w	r3, [r0], #2
 8004136:	e77b      	b.n	8004030 <memcpy+0xc>
 8004138:	3a04      	subs	r2, #4
 800413a:	d3d9      	bcc.n	80040f0 <memcpy+0xcc>
 800413c:	3a01      	subs	r2, #1
 800413e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004142:	f800 3b01 	strb.w	r3, [r0], #1
 8004146:	d2f9      	bcs.n	800413c <memcpy+0x118>
 8004148:	780b      	ldrb	r3, [r1, #0]
 800414a:	7003      	strb	r3, [r0, #0]
 800414c:	784b      	ldrb	r3, [r1, #1]
 800414e:	7043      	strb	r3, [r0, #1]
 8004150:	788b      	ldrb	r3, [r1, #2]
 8004152:	7083      	strb	r3, [r0, #2]
 8004154:	4660      	mov	r0, ip
 8004156:	4770      	bx	lr

08004158 <memset>:
 8004158:	b470      	push	{r4, r5, r6}
 800415a:	0784      	lsls	r4, r0, #30
 800415c:	d046      	beq.n	80041ec <memset+0x94>
 800415e:	1e54      	subs	r4, r2, #1
 8004160:	2a00      	cmp	r2, #0
 8004162:	d041      	beq.n	80041e8 <memset+0x90>
 8004164:	b2cd      	uxtb	r5, r1
 8004166:	4603      	mov	r3, r0
 8004168:	e002      	b.n	8004170 <memset+0x18>
 800416a:	1e62      	subs	r2, r4, #1
 800416c:	b3e4      	cbz	r4, 80041e8 <memset+0x90>
 800416e:	4614      	mov	r4, r2
 8004170:	f803 5b01 	strb.w	r5, [r3], #1
 8004174:	079a      	lsls	r2, r3, #30
 8004176:	d1f8      	bne.n	800416a <memset+0x12>
 8004178:	2c03      	cmp	r4, #3
 800417a:	d92e      	bls.n	80041da <memset+0x82>
 800417c:	b2cd      	uxtb	r5, r1
 800417e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004182:	2c0f      	cmp	r4, #15
 8004184:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004188:	d919      	bls.n	80041be <memset+0x66>
 800418a:	f103 0210 	add.w	r2, r3, #16
 800418e:	4626      	mov	r6, r4
 8004190:	3e10      	subs	r6, #16
 8004192:	2e0f      	cmp	r6, #15
 8004194:	f842 5c10 	str.w	r5, [r2, #-16]
 8004198:	f842 5c0c 	str.w	r5, [r2, #-12]
 800419c:	f842 5c08 	str.w	r5, [r2, #-8]
 80041a0:	f842 5c04 	str.w	r5, [r2, #-4]
 80041a4:	f102 0210 	add.w	r2, r2, #16
 80041a8:	d8f2      	bhi.n	8004190 <memset+0x38>
 80041aa:	f1a4 0210 	sub.w	r2, r4, #16
 80041ae:	f022 020f 	bic.w	r2, r2, #15
 80041b2:	f004 040f 	and.w	r4, r4, #15
 80041b6:	3210      	adds	r2, #16
 80041b8:	2c03      	cmp	r4, #3
 80041ba:	4413      	add	r3, r2
 80041bc:	d90d      	bls.n	80041da <memset+0x82>
 80041be:	461e      	mov	r6, r3
 80041c0:	4622      	mov	r2, r4
 80041c2:	3a04      	subs	r2, #4
 80041c4:	2a03      	cmp	r2, #3
 80041c6:	f846 5b04 	str.w	r5, [r6], #4
 80041ca:	d8fa      	bhi.n	80041c2 <memset+0x6a>
 80041cc:	1f22      	subs	r2, r4, #4
 80041ce:	f022 0203 	bic.w	r2, r2, #3
 80041d2:	3204      	adds	r2, #4
 80041d4:	4413      	add	r3, r2
 80041d6:	f004 0403 	and.w	r4, r4, #3
 80041da:	b12c      	cbz	r4, 80041e8 <memset+0x90>
 80041dc:	b2c9      	uxtb	r1, r1
 80041de:	441c      	add	r4, r3
 80041e0:	f803 1b01 	strb.w	r1, [r3], #1
 80041e4:	42a3      	cmp	r3, r4
 80041e6:	d1fb      	bne.n	80041e0 <memset+0x88>
 80041e8:	bc70      	pop	{r4, r5, r6}
 80041ea:	4770      	bx	lr
 80041ec:	4614      	mov	r4, r2
 80041ee:	4603      	mov	r3, r0
 80041f0:	e7c2      	b.n	8004178 <memset+0x20>
 80041f2:	bf00      	nop

080041f4 <printf>:
 80041f4:	b40f      	push	{r0, r1, r2, r3}
 80041f6:	b500      	push	{lr}
 80041f8:	4907      	ldr	r1, [pc, #28]	; (8004218 <printf+0x24>)
 80041fa:	b083      	sub	sp, #12
 80041fc:	ab04      	add	r3, sp, #16
 80041fe:	6808      	ldr	r0, [r1, #0]
 8004200:	f853 2b04 	ldr.w	r2, [r3], #4
 8004204:	6881      	ldr	r1, [r0, #8]
 8004206:	9301      	str	r3, [sp, #4]
 8004208:	f001 fcb6 	bl	8005b78 <_vfprintf_r>
 800420c:	b003      	add	sp, #12
 800420e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004212:	b004      	add	sp, #16
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000468 	.word	0x20000468

0800421c <_puts_r>:
 800421c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800421e:	4605      	mov	r5, r0
 8004220:	b089      	sub	sp, #36	; 0x24
 8004222:	4608      	mov	r0, r1
 8004224:	460c      	mov	r4, r1
 8004226:	f000 f86b 	bl	8004300 <strlen>
 800422a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800422c:	4f14      	ldr	r7, [pc, #80]	; (8004280 <_puts_r+0x64>)
 800422e:	9404      	str	r4, [sp, #16]
 8004230:	2601      	movs	r6, #1
 8004232:	1c44      	adds	r4, r0, #1
 8004234:	a904      	add	r1, sp, #16
 8004236:	2202      	movs	r2, #2
 8004238:	9403      	str	r4, [sp, #12]
 800423a:	9005      	str	r0, [sp, #20]
 800423c:	68ac      	ldr	r4, [r5, #8]
 800423e:	9706      	str	r7, [sp, #24]
 8004240:	9607      	str	r6, [sp, #28]
 8004242:	9101      	str	r1, [sp, #4]
 8004244:	9202      	str	r2, [sp, #8]
 8004246:	b1b3      	cbz	r3, 8004276 <_puts_r+0x5a>
 8004248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800424c:	049a      	lsls	r2, r3, #18
 800424e:	d406      	bmi.n	800425e <_puts_r+0x42>
 8004250:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004252:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004256:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800425a:	81a3      	strh	r3, [r4, #12]
 800425c:	6662      	str	r2, [r4, #100]	; 0x64
 800425e:	4621      	mov	r1, r4
 8004260:	4628      	mov	r0, r5
 8004262:	aa01      	add	r2, sp, #4
 8004264:	f004 fb06 	bl	8008874 <__sfvwrite_r>
 8004268:	2800      	cmp	r0, #0
 800426a:	bf14      	ite	ne
 800426c:	f04f 30ff 	movne.w	r0, #4294967295
 8004270:	200a      	moveq	r0, #10
 8004272:	b009      	add	sp, #36	; 0x24
 8004274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004276:	4628      	mov	r0, r5
 8004278:	f004 f9bc 	bl	80085f4 <__sinit>
 800427c:	e7e4      	b.n	8004248 <_puts_r+0x2c>
 800427e:	bf00      	nop
 8004280:	0800a910 	.word	0x0800a910

08004284 <puts>:
 8004284:	4b02      	ldr	r3, [pc, #8]	; (8004290 <puts+0xc>)
 8004286:	4601      	mov	r1, r0
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	f7ff bfc7 	b.w	800421c <_puts_r>
 800428e:	bf00      	nop
 8004290:	20000468 	.word	0x20000468

08004294 <sprintf>:
 8004294:	b40e      	push	{r1, r2, r3}
 8004296:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004298:	b09c      	sub	sp, #112	; 0x70
 800429a:	ab21      	add	r3, sp, #132	; 0x84
 800429c:	490f      	ldr	r1, [pc, #60]	; (80042dc <sprintf+0x48>)
 800429e:	f853 2b04 	ldr.w	r2, [r3], #4
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	4605      	mov	r5, r0
 80042a6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80042aa:	6808      	ldr	r0, [r1, #0]
 80042ac:	9502      	str	r5, [sp, #8]
 80042ae:	f44f 7702 	mov.w	r7, #520	; 0x208
 80042b2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80042b6:	a902      	add	r1, sp, #8
 80042b8:	9506      	str	r5, [sp, #24]
 80042ba:	f8ad 7014 	strh.w	r7, [sp, #20]
 80042be:	9404      	str	r4, [sp, #16]
 80042c0:	9407      	str	r4, [sp, #28]
 80042c2:	f8ad 6016 	strh.w	r6, [sp, #22]
 80042c6:	f000 f8db 	bl	8004480 <_svfprintf_r>
 80042ca:	9b02      	ldr	r3, [sp, #8]
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	b01c      	add	sp, #112	; 0x70
 80042d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80042d6:	b003      	add	sp, #12
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000468 	.word	0x20000468
	...

08004300 <strlen>:
 8004300:	f890 f000 	pld	[r0]
 8004304:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8004308:	f020 0107 	bic.w	r1, r0, #7
 800430c:	f06f 0c00 	mvn.w	ip, #0
 8004310:	f010 0407 	ands.w	r4, r0, #7
 8004314:	f891 f020 	pld	[r1, #32]
 8004318:	f040 8049 	bne.w	80043ae <strlen+0xae>
 800431c:	f04f 0400 	mov.w	r4, #0
 8004320:	f06f 0007 	mvn.w	r0, #7
 8004324:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004328:	f891 f040 	pld	[r1, #64]	; 0x40
 800432c:	f100 0008 	add.w	r0, r0, #8
 8004330:	fa82 f24c 	uadd8	r2, r2, ip
 8004334:	faa4 f28c 	sel	r2, r4, ip
 8004338:	fa83 f34c 	uadd8	r3, r3, ip
 800433c:	faa2 f38c 	sel	r3, r2, ip
 8004340:	bb4b      	cbnz	r3, 8004396 <strlen+0x96>
 8004342:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8004346:	fa82 f24c 	uadd8	r2, r2, ip
 800434a:	f100 0008 	add.w	r0, r0, #8
 800434e:	faa4 f28c 	sel	r2, r4, ip
 8004352:	fa83 f34c 	uadd8	r3, r3, ip
 8004356:	faa2 f38c 	sel	r3, r2, ip
 800435a:	b9e3      	cbnz	r3, 8004396 <strlen+0x96>
 800435c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8004360:	fa82 f24c 	uadd8	r2, r2, ip
 8004364:	f100 0008 	add.w	r0, r0, #8
 8004368:	faa4 f28c 	sel	r2, r4, ip
 800436c:	fa83 f34c 	uadd8	r3, r3, ip
 8004370:	faa2 f38c 	sel	r3, r2, ip
 8004374:	b97b      	cbnz	r3, 8004396 <strlen+0x96>
 8004376:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800437a:	f101 0120 	add.w	r1, r1, #32
 800437e:	fa82 f24c 	uadd8	r2, r2, ip
 8004382:	f100 0008 	add.w	r0, r0, #8
 8004386:	faa4 f28c 	sel	r2, r4, ip
 800438a:	fa83 f34c 	uadd8	r3, r3, ip
 800438e:	faa2 f38c 	sel	r3, r2, ip
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0c6      	beq.n	8004324 <strlen+0x24>
 8004396:	2a00      	cmp	r2, #0
 8004398:	bf04      	itt	eq
 800439a:	3004      	addeq	r0, #4
 800439c:	461a      	moveq	r2, r3
 800439e:	ba12      	rev	r2, r2
 80043a0:	fab2 f282 	clz	r2, r2
 80043a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80043a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80043ac:	4770      	bx	lr
 80043ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 80043b2:	f004 0503 	and.w	r5, r4, #3
 80043b6:	f1c4 0000 	rsb	r0, r4, #0
 80043ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80043be:	f014 0f04 	tst.w	r4, #4
 80043c2:	f891 f040 	pld	[r1, #64]	; 0x40
 80043c6:	fa0c f505 	lsl.w	r5, ip, r5
 80043ca:	ea62 0205 	orn	r2, r2, r5
 80043ce:	bf1c      	itt	ne
 80043d0:	ea63 0305 	ornne	r3, r3, r5
 80043d4:	4662      	movne	r2, ip
 80043d6:	f04f 0400 	mov.w	r4, #0
 80043da:	e7a9      	b.n	8004330 <strlen+0x30>

080043dc <strncmp>:
 80043dc:	2a00      	cmp	r2, #0
 80043de:	d041      	beq.n	8004464 <strncmp+0x88>
 80043e0:	ea40 0301 	orr.w	r3, r0, r1
 80043e4:	f013 0303 	ands.w	r3, r3, #3
 80043e8:	b4f0      	push	{r4, r5, r6, r7}
 80043ea:	d125      	bne.n	8004438 <strncmp+0x5c>
 80043ec:	2a03      	cmp	r2, #3
 80043ee:	d923      	bls.n	8004438 <strncmp+0x5c>
 80043f0:	6804      	ldr	r4, [r0, #0]
 80043f2:	680d      	ldr	r5, [r1, #0]
 80043f4:	42ac      	cmp	r4, r5
 80043f6:	d11f      	bne.n	8004438 <strncmp+0x5c>
 80043f8:	3a04      	subs	r2, #4
 80043fa:	d035      	beq.n	8004468 <strncmp+0x8c>
 80043fc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8004400:	ea25 0404 	bic.w	r4, r5, r4
 8004404:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8004408:	d131      	bne.n	800446e <strncmp+0x92>
 800440a:	1d07      	adds	r7, r0, #4
 800440c:	1d0d      	adds	r5, r1, #4
 800440e:	e00d      	b.n	800442c <strncmp+0x50>
 8004410:	f857 3b04 	ldr.w	r3, [r7], #4
 8004414:	680e      	ldr	r6, [r1, #0]
 8004416:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 800441a:	42b3      	cmp	r3, r6
 800441c:	ea24 0403 	bic.w	r4, r4, r3
 8004420:	d10a      	bne.n	8004438 <strncmp+0x5c>
 8004422:	3a04      	subs	r2, #4
 8004424:	d020      	beq.n	8004468 <strncmp+0x8c>
 8004426:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800442a:	d123      	bne.n	8004474 <strncmp+0x98>
 800442c:	2a03      	cmp	r2, #3
 800442e:	4629      	mov	r1, r5
 8004430:	4638      	mov	r0, r7
 8004432:	f105 0504 	add.w	r5, r5, #4
 8004436:	d8eb      	bhi.n	8004410 <strncmp+0x34>
 8004438:	7803      	ldrb	r3, [r0, #0]
 800443a:	780c      	ldrb	r4, [r1, #0]
 800443c:	429c      	cmp	r4, r3
 800443e:	f102 32ff 	add.w	r2, r2, #4294967295
 8004442:	d10c      	bne.n	800445e <strncmp+0x82>
 8004444:	b182      	cbz	r2, 8004468 <strncmp+0x8c>
 8004446:	b914      	cbnz	r4, 800444e <strncmp+0x72>
 8004448:	e016      	b.n	8004478 <strncmp+0x9c>
 800444a:	b16a      	cbz	r2, 8004468 <strncmp+0x8c>
 800444c:	b17b      	cbz	r3, 800446e <strncmp+0x92>
 800444e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004452:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004456:	42a3      	cmp	r3, r4
 8004458:	f102 32ff 	add.w	r2, r2, #4294967295
 800445c:	d0f5      	beq.n	800444a <strncmp+0x6e>
 800445e:	1b18      	subs	r0, r3, r4
 8004460:	bcf0      	pop	{r4, r5, r6, r7}
 8004462:	4770      	bx	lr
 8004464:	4610      	mov	r0, r2
 8004466:	4770      	bx	lr
 8004468:	4610      	mov	r0, r2
 800446a:	bcf0      	pop	{r4, r5, r6, r7}
 800446c:	4770      	bx	lr
 800446e:	4618      	mov	r0, r3
 8004470:	bcf0      	pop	{r4, r5, r6, r7}
 8004472:	4770      	bx	lr
 8004474:	2000      	movs	r0, #0
 8004476:	e7f3      	b.n	8004460 <strncmp+0x84>
 8004478:	4620      	mov	r0, r4
 800447a:	e7f1      	b.n	8004460 <strncmp+0x84>
 800447c:	0000      	movs	r0, r0
	...

08004480 <_svfprintf_r>:
 8004480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004484:	b0c5      	sub	sp, #276	; 0x114
 8004486:	460c      	mov	r4, r1
 8004488:	9109      	str	r1, [sp, #36]	; 0x24
 800448a:	4615      	mov	r5, r2
 800448c:	930e      	str	r3, [sp, #56]	; 0x38
 800448e:	900a      	str	r0, [sp, #40]	; 0x28
 8004490:	f004 fbaa 	bl	8008be8 <_localeconv_r>
 8004494:	6803      	ldr	r3, [r0, #0]
 8004496:	9317      	str	r3, [sp, #92]	; 0x5c
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff ff31 	bl	8004300 <strlen>
 800449e:	89a3      	ldrh	r3, [r4, #12]
 80044a0:	9016      	str	r0, [sp, #88]	; 0x58
 80044a2:	061e      	lsls	r6, r3, #24
 80044a4:	d503      	bpl.n	80044ae <_svfprintf_r+0x2e>
 80044a6:	6923      	ldr	r3, [r4, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f001 8133 	beq.w	8005714 <_svfprintf_r+0x1294>
 80044ae:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004748 <_svfprintf_r+0x2c8>
 80044b2:	2300      	movs	r3, #0
 80044b4:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80044b8:	9312      	str	r3, [sp, #72]	; 0x48
 80044ba:	9329      	str	r3, [sp, #164]	; 0xa4
 80044bc:	9328      	str	r3, [sp, #160]	; 0xa0
 80044be:	9319      	str	r3, [sp, #100]	; 0x64
 80044c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80044c2:	f8df a290 	ldr.w	sl, [pc, #656]	; 8004754 <_svfprintf_r+0x2d4>
 80044c6:	ab34      	add	r3, sp, #208	; 0xd0
 80044c8:	9327      	str	r3, [sp, #156]	; 0x9c
 80044ca:	4699      	mov	r9, r3
 80044cc:	46a8      	mov	r8, r5
 80044ce:	f898 3000 	ldrb.w	r3, [r8]
 80044d2:	4644      	mov	r4, r8
 80044d4:	b1eb      	cbz	r3, 8004512 <_svfprintf_r+0x92>
 80044d6:	2b25      	cmp	r3, #37	; 0x25
 80044d8:	d102      	bne.n	80044e0 <_svfprintf_r+0x60>
 80044da:	e01a      	b.n	8004512 <_svfprintf_r+0x92>
 80044dc:	2b25      	cmp	r3, #37	; 0x25
 80044de:	d003      	beq.n	80044e8 <_svfprintf_r+0x68>
 80044e0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f9      	bne.n	80044dc <_svfprintf_r+0x5c>
 80044e8:	ebc8 0504 	rsb	r5, r8, r4
 80044ec:	b18d      	cbz	r5, 8004512 <_svfprintf_r+0x92>
 80044ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80044f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80044f2:	f8c9 8000 	str.w	r8, [r9]
 80044f6:	3301      	adds	r3, #1
 80044f8:	442a      	add	r2, r5
 80044fa:	2b07      	cmp	r3, #7
 80044fc:	f8c9 5004 	str.w	r5, [r9, #4]
 8004500:	9229      	str	r2, [sp, #164]	; 0xa4
 8004502:	9328      	str	r3, [sp, #160]	; 0xa0
 8004504:	f300 80a6 	bgt.w	8004654 <_svfprintf_r+0x1d4>
 8004508:	f109 0908 	add.w	r9, r9, #8
 800450c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800450e:	442b      	add	r3, r5
 8004510:	930b      	str	r3, [sp, #44]	; 0x2c
 8004512:	7823      	ldrb	r3, [r4, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80a6 	beq.w	8004666 <_svfprintf_r+0x1e6>
 800451a:	2300      	movs	r3, #0
 800451c:	461a      	mov	r2, r3
 800451e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004522:	4619      	mov	r1, r3
 8004524:	930c      	str	r3, [sp, #48]	; 0x30
 8004526:	9307      	str	r3, [sp, #28]
 8004528:	f04f 3bff 	mov.w	fp, #4294967295
 800452c:	7863      	ldrb	r3, [r4, #1]
 800452e:	f104 0801 	add.w	r8, r4, #1
 8004532:	465d      	mov	r5, fp
 8004534:	f108 0801 	add.w	r8, r8, #1
 8004538:	f1a3 0020 	sub.w	r0, r3, #32
 800453c:	2858      	cmp	r0, #88	; 0x58
 800453e:	f200 8434 	bhi.w	8004daa <_svfprintf_r+0x92a>
 8004542:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004546:	03a0      	.short	0x03a0
 8004548:	04320432 	.word	0x04320432
 800454c:	043203a8 	.word	0x043203a8
 8004550:	04320432 	.word	0x04320432
 8004554:	04320432 	.word	0x04320432
 8004558:	03af0432 	.word	0x03af0432
 800455c:	043203bd 	.word	0x043203bd
 8004560:	00e2005d 	.word	0x00e2005d
 8004564:	01090432 	.word	0x01090432
 8004568:	01100110 	.word	0x01100110
 800456c:	01100110 	.word	0x01100110
 8004570:	01100110 	.word	0x01100110
 8004574:	01100110 	.word	0x01100110
 8004578:	04320110 	.word	0x04320110
 800457c:	04320432 	.word	0x04320432
 8004580:	04320432 	.word	0x04320432
 8004584:	04320432 	.word	0x04320432
 8004588:	04320432 	.word	0x04320432
 800458c:	01200432 	.word	0x01200432
 8004590:	04320286 	.word	0x04320286
 8004594:	04320286 	.word	0x04320286
 8004598:	04320432 	.word	0x04320432
 800459c:	02d40432 	.word	0x02d40432
 80045a0:	04320432 	.word	0x04320432
 80045a4:	043202e5 	.word	0x043202e5
 80045a8:	04320432 	.word	0x04320432
 80045ac:	04320432 	.word	0x04320432
 80045b0:	0432030f 	.word	0x0432030f
 80045b4:	033d0432 	.word	0x033d0432
 80045b8:	04320432 	.word	0x04320432
 80045bc:	04320432 	.word	0x04320432
 80045c0:	04320432 	.word	0x04320432
 80045c4:	04320432 	.word	0x04320432
 80045c8:	04320432 	.word	0x04320432
 80045cc:	0391037e 	.word	0x0391037e
 80045d0:	02860286 	.word	0x02860286
 80045d4:	03990286 	.word	0x03990286
 80045d8:	04320391 	.word	0x04320391
 80045dc:	04070432 	.word	0x04070432
 80045e0:	04120432 	.word	0x04120432
 80045e4:	006400a3 	.word	0x006400a3
 80045e8:	043203c2 	.word	0x043203c2
 80045ec:	043203c9 	.word	0x043203c9
 80045f0:	043203ea 	.word	0x043203ea
 80045f4:	03f20432 	.word	0x03f20432
 80045f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80045fa:	930e      	str	r3, [sp, #56]	; 0x38
 80045fc:	4240      	negs	r0, r0
 80045fe:	900c      	str	r0, [sp, #48]	; 0x30
 8004600:	9b07      	ldr	r3, [sp, #28]
 8004602:	f043 0304 	orr.w	r3, r3, #4
 8004606:	9307      	str	r3, [sp, #28]
 8004608:	f898 3000 	ldrb.w	r3, [r8]
 800460c:	e792      	b.n	8004534 <_svfprintf_r+0xb4>
 800460e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004610:	46ab      	mov	fp, r5
 8004612:	2100      	movs	r1, #0
 8004614:	6804      	ldr	r4, [r0, #0]
 8004616:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800461a:	1d07      	adds	r7, r0, #4
 800461c:	9807      	ldr	r0, [sp, #28]
 800461e:	2330      	movs	r3, #48	; 0x30
 8004620:	2278      	movs	r2, #120	; 0x78
 8004622:	458b      	cmp	fp, r1
 8004624:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8004628:	f04f 0500 	mov.w	r5, #0
 800462c:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8004630:	f040 0302 	orr.w	r3, r0, #2
 8004634:	f2c0 83d6 	blt.w	8004de4 <_svfprintf_r+0x964>
 8004638:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 800463c:	f043 0302 	orr.w	r3, r3, #2
 8004640:	9307      	str	r3, [sp, #28]
 8004642:	ea54 0305 	orrs.w	r3, r4, r5
 8004646:	970e      	str	r7, [sp, #56]	; 0x38
 8004648:	f000 83a2 	beq.w	8004d90 <_svfprintf_r+0x910>
 800464c:	460f      	mov	r7, r1
 800464e:	9211      	str	r2, [sp, #68]	; 0x44
 8004650:	483f      	ldr	r0, [pc, #252]	; (8004750 <_svfprintf_r+0x2d0>)
 8004652:	e2e6      	b.n	8004c22 <_svfprintf_r+0x7a2>
 8004654:	aa27      	add	r2, sp, #156	; 0x9c
 8004656:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004658:	980a      	ldr	r0, [sp, #40]	; 0x28
 800465a:	f005 fc27 	bl	8009eac <__ssprint_r>
 800465e:	b948      	cbnz	r0, 8004674 <_svfprintf_r+0x1f4>
 8004660:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004664:	e752      	b.n	800450c <_svfprintf_r+0x8c>
 8004666:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004668:	b123      	cbz	r3, 8004674 <_svfprintf_r+0x1f4>
 800466a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800466c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800466e:	aa27      	add	r2, sp, #156	; 0x9c
 8004670:	f005 fc1c 	bl	8009eac <__ssprint_r>
 8004674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004676:	899b      	ldrh	r3, [r3, #12]
 8004678:	f013 0f40 	tst.w	r3, #64	; 0x40
 800467c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800467e:	bf18      	it	ne
 8004680:	f04f 33ff 	movne.w	r3, #4294967295
 8004684:	4618      	mov	r0, r3
 8004686:	b045      	add	sp, #276	; 0x114
 8004688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800468c:	9311      	str	r3, [sp, #68]	; 0x44
 800468e:	46ab      	mov	fp, r5
 8004690:	2a00      	cmp	r2, #0
 8004692:	f041 823b 	bne.w	8005b0c <_svfprintf_r+0x168c>
 8004696:	9a07      	ldr	r2, [sp, #28]
 8004698:	f012 0320 	ands.w	r3, r2, #32
 800469c:	f000 8246 	beq.w	8004b2c <_svfprintf_r+0x6ac>
 80046a0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80046a2:	3707      	adds	r7, #7
 80046a4:	f027 0307 	bic.w	r3, r7, #7
 80046a8:	2700      	movs	r7, #0
 80046aa:	f103 0108 	add.w	r1, r3, #8
 80046ae:	45bb      	cmp	fp, r7
 80046b0:	910e      	str	r1, [sp, #56]	; 0x38
 80046b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80046b6:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80046ba:	f2c0 8764 	blt.w	8005586 <_svfprintf_r+0x1106>
 80046be:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80046c2:	9307      	str	r3, [sp, #28]
 80046c4:	ea54 0305 	orrs.w	r3, r4, r5
 80046c8:	f000 8384 	beq.w	8004dd4 <_svfprintf_r+0x954>
 80046cc:	ae34      	add	r6, sp, #208	; 0xd0
 80046ce:	08e2      	lsrs	r2, r4, #3
 80046d0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 80046d4:	08e9      	lsrs	r1, r5, #3
 80046d6:	f004 0307 	and.w	r3, r4, #7
 80046da:	460d      	mov	r5, r1
 80046dc:	4614      	mov	r4, r2
 80046de:	3330      	adds	r3, #48	; 0x30
 80046e0:	ea54 0205 	orrs.w	r2, r4, r5
 80046e4:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80046e8:	d1f1      	bne.n	80046ce <_svfprintf_r+0x24e>
 80046ea:	9a07      	ldr	r2, [sp, #28]
 80046ec:	07d1      	lsls	r1, r2, #31
 80046ee:	f140 808f 	bpl.w	8004810 <_svfprintf_r+0x390>
 80046f2:	2b30      	cmp	r3, #48	; 0x30
 80046f4:	f000 808c 	beq.w	8004810 <_svfprintf_r+0x390>
 80046f8:	2230      	movs	r2, #48	; 0x30
 80046fa:	1e73      	subs	r3, r6, #1
 80046fc:	f806 2c01 	strb.w	r2, [r6, #-1]
 8004700:	aa34      	add	r2, sp, #208	; 0xd0
 8004702:	1ad2      	subs	r2, r2, r3
 8004704:	920d      	str	r2, [sp, #52]	; 0x34
 8004706:	461e      	mov	r6, r3
 8004708:	e085      	b.n	8004816 <_svfprintf_r+0x396>
 800470a:	f898 3000 	ldrb.w	r3, [r8]
 800470e:	2b2a      	cmp	r3, #42	; 0x2a
 8004710:	f108 0401 	add.w	r4, r8, #1
 8004714:	f001 81ec 	beq.w	8005af0 <_svfprintf_r+0x1670>
 8004718:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800471c:	2809      	cmp	r0, #9
 800471e:	bf98      	it	ls
 8004720:	2500      	movls	r5, #0
 8004722:	f201 818e 	bhi.w	8005a42 <_svfprintf_r+0x15c2>
 8004726:	f814 3b01 	ldrb.w	r3, [r4], #1
 800472a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800472e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8004732:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004736:	2809      	cmp	r0, #9
 8004738:	d9f5      	bls.n	8004726 <_svfprintf_r+0x2a6>
 800473a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800473e:	46a0      	mov	r8, r4
 8004740:	e6fa      	b.n	8004538 <_svfprintf_r+0xb8>
 8004742:	bf00      	nop
 8004744:	f3af 8000 	nop.w
	...
 8004750:	0800a948 	.word	0x0800a948
 8004754:	0800a914 	.word	0x0800a914
 8004758:	9b07      	ldr	r3, [sp, #28]
 800475a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800475e:	9307      	str	r3, [sp, #28]
 8004760:	f898 3000 	ldrb.w	r3, [r8]
 8004764:	e6e6      	b.n	8004534 <_svfprintf_r+0xb4>
 8004766:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800476a:	2300      	movs	r3, #0
 800476c:	461c      	mov	r4, r3
 800476e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004772:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004776:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800477a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800477e:	2809      	cmp	r0, #9
 8004780:	d9f5      	bls.n	800476e <_svfprintf_r+0x2ee>
 8004782:	940c      	str	r4, [sp, #48]	; 0x30
 8004784:	e6d8      	b.n	8004538 <_svfprintf_r+0xb8>
 8004786:	9311      	str	r3, [sp, #68]	; 0x44
 8004788:	46ab      	mov	fp, r5
 800478a:	2a00      	cmp	r2, #0
 800478c:	f041 81cc 	bne.w	8005b28 <_svfprintf_r+0x16a8>
 8004790:	9b07      	ldr	r3, [sp, #28]
 8004792:	f043 0310 	orr.w	r3, r3, #16
 8004796:	9307      	str	r3, [sp, #28]
 8004798:	9b07      	ldr	r3, [sp, #28]
 800479a:	069c      	lsls	r4, r3, #26
 800479c:	f140 8537 	bpl.w	800520e <_svfprintf_r+0xd8e>
 80047a0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80047a2:	3707      	adds	r7, #7
 80047a4:	f027 0707 	bic.w	r7, r7, #7
 80047a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ac:	f107 0108 	add.w	r1, r7, #8
 80047b0:	910e      	str	r1, [sp, #56]	; 0x38
 80047b2:	4614      	mov	r4, r2
 80047b4:	461d      	mov	r5, r3
 80047b6:	2a00      	cmp	r2, #0
 80047b8:	f173 0300 	sbcs.w	r3, r3, #0
 80047bc:	f2c0 8562 	blt.w	8005284 <_svfprintf_r+0xe04>
 80047c0:	f1bb 0f00 	cmp.w	fp, #0
 80047c4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80047c8:	f2c0 853f 	blt.w	800524a <_svfprintf_r+0xdca>
 80047cc:	9b07      	ldr	r3, [sp, #28]
 80047ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d2:	9307      	str	r3, [sp, #28]
 80047d4:	ea54 0305 	orrs.w	r3, r4, r5
 80047d8:	f000 81e8 	beq.w	8004bac <_svfprintf_r+0x72c>
 80047dc:	2d00      	cmp	r5, #0
 80047de:	bf08      	it	eq
 80047e0:	2c0a      	cmpeq	r4, #10
 80047e2:	f0c0 81e8 	bcc.w	8004bb6 <_svfprintf_r+0x736>
 80047e6:	ae34      	add	r6, sp, #208	; 0xd0
 80047e8:	4620      	mov	r0, r4
 80047ea:	4629      	mov	r1, r5
 80047ec:	220a      	movs	r2, #10
 80047ee:	2300      	movs	r3, #0
 80047f0:	f005 fdfc 	bl	800a3ec <__aeabi_uldivmod>
 80047f4:	3230      	adds	r2, #48	; 0x30
 80047f6:	f806 2d01 	strb.w	r2, [r6, #-1]!
 80047fa:	4620      	mov	r0, r4
 80047fc:	4629      	mov	r1, r5
 80047fe:	2300      	movs	r3, #0
 8004800:	220a      	movs	r2, #10
 8004802:	f005 fdf3 	bl	800a3ec <__aeabi_uldivmod>
 8004806:	4604      	mov	r4, r0
 8004808:	460d      	mov	r5, r1
 800480a:	ea54 0305 	orrs.w	r3, r4, r5
 800480e:	d1eb      	bne.n	80047e8 <_svfprintf_r+0x368>
 8004810:	ab34      	add	r3, sp, #208	; 0xd0
 8004812:	1b9b      	subs	r3, r3, r6
 8004814:	930d      	str	r3, [sp, #52]	; 0x34
 8004816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004818:	455b      	cmp	r3, fp
 800481a:	bfb8      	it	lt
 800481c:	465b      	movlt	r3, fp
 800481e:	9308      	str	r3, [sp, #32]
 8004820:	2300      	movs	r3, #0
 8004822:	9313      	str	r3, [sp, #76]	; 0x4c
 8004824:	b117      	cbz	r7, 800482c <_svfprintf_r+0x3ac>
 8004826:	9b08      	ldr	r3, [sp, #32]
 8004828:	3301      	adds	r3, #1
 800482a:	9308      	str	r3, [sp, #32]
 800482c:	9b07      	ldr	r3, [sp, #28]
 800482e:	f013 0302 	ands.w	r3, r3, #2
 8004832:	930f      	str	r3, [sp, #60]	; 0x3c
 8004834:	d002      	beq.n	800483c <_svfprintf_r+0x3bc>
 8004836:	9b08      	ldr	r3, [sp, #32]
 8004838:	3302      	adds	r3, #2
 800483a:	9308      	str	r3, [sp, #32]
 800483c:	9b07      	ldr	r3, [sp, #28]
 800483e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8004842:	9310      	str	r3, [sp, #64]	; 0x40
 8004844:	f040 82db 	bne.w	8004dfe <_svfprintf_r+0x97e>
 8004848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800484a:	9a08      	ldr	r2, [sp, #32]
 800484c:	1a9d      	subs	r5, r3, r2
 800484e:	2d00      	cmp	r5, #0
 8004850:	f340 82d5 	ble.w	8004dfe <_svfprintf_r+0x97e>
 8004854:	2d10      	cmp	r5, #16
 8004856:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004858:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800485a:	4fa8      	ldr	r7, [pc, #672]	; (8004afc <_svfprintf_r+0x67c>)
 800485c:	dd27      	ble.n	80048ae <_svfprintf_r+0x42e>
 800485e:	9618      	str	r6, [sp, #96]	; 0x60
 8004860:	4648      	mov	r0, r9
 8004862:	2410      	movs	r4, #16
 8004864:	46b9      	mov	r9, r7
 8004866:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004868:	462f      	mov	r7, r5
 800486a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800486c:	e004      	b.n	8004878 <_svfprintf_r+0x3f8>
 800486e:	3f10      	subs	r7, #16
 8004870:	2f10      	cmp	r7, #16
 8004872:	f100 0008 	add.w	r0, r0, #8
 8004876:	dd16      	ble.n	80048a6 <_svfprintf_r+0x426>
 8004878:	3201      	adds	r2, #1
 800487a:	4ba0      	ldr	r3, [pc, #640]	; (8004afc <_svfprintf_r+0x67c>)
 800487c:	9228      	str	r2, [sp, #160]	; 0xa0
 800487e:	3110      	adds	r1, #16
 8004880:	2a07      	cmp	r2, #7
 8004882:	9129      	str	r1, [sp, #164]	; 0xa4
 8004884:	e880 0018 	stmia.w	r0, {r3, r4}
 8004888:	ddf1      	ble.n	800486e <_svfprintf_r+0x3ee>
 800488a:	aa27      	add	r2, sp, #156	; 0x9c
 800488c:	4631      	mov	r1, r6
 800488e:	4628      	mov	r0, r5
 8004890:	f005 fb0c 	bl	8009eac <__ssprint_r>
 8004894:	2800      	cmp	r0, #0
 8004896:	f47f aeed 	bne.w	8004674 <_svfprintf_r+0x1f4>
 800489a:	3f10      	subs	r7, #16
 800489c:	2f10      	cmp	r7, #16
 800489e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80048a0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80048a2:	a834      	add	r0, sp, #208	; 0xd0
 80048a4:	dce8      	bgt.n	8004878 <_svfprintf_r+0x3f8>
 80048a6:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80048a8:	463d      	mov	r5, r7
 80048aa:	464f      	mov	r7, r9
 80048ac:	4681      	mov	r9, r0
 80048ae:	3201      	adds	r2, #1
 80048b0:	186c      	adds	r4, r5, r1
 80048b2:	2a07      	cmp	r2, #7
 80048b4:	9429      	str	r4, [sp, #164]	; 0xa4
 80048b6:	9228      	str	r2, [sp, #160]	; 0xa0
 80048b8:	f8c9 7000 	str.w	r7, [r9]
 80048bc:	f8c9 5004 	str.w	r5, [r9, #4]
 80048c0:	f300 842d 	bgt.w	800511e <_svfprintf_r+0xc9e>
 80048c4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80048c8:	f109 0908 	add.w	r9, r9, #8
 80048cc:	b177      	cbz	r7, 80048ec <_svfprintf_r+0x46c>
 80048ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80048d0:	3301      	adds	r3, #1
 80048d2:	3401      	adds	r4, #1
 80048d4:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 80048d8:	2201      	movs	r2, #1
 80048da:	2b07      	cmp	r3, #7
 80048dc:	9429      	str	r4, [sp, #164]	; 0xa4
 80048de:	9328      	str	r3, [sp, #160]	; 0xa0
 80048e0:	e889 0006 	stmia.w	r9, {r1, r2}
 80048e4:	f300 83a5 	bgt.w	8005032 <_svfprintf_r+0xbb2>
 80048e8:	f109 0908 	add.w	r9, r9, #8
 80048ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048ee:	b16b      	cbz	r3, 800490c <_svfprintf_r+0x48c>
 80048f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80048f2:	3301      	adds	r3, #1
 80048f4:	3402      	adds	r4, #2
 80048f6:	a920      	add	r1, sp, #128	; 0x80
 80048f8:	2202      	movs	r2, #2
 80048fa:	2b07      	cmp	r3, #7
 80048fc:	9429      	str	r4, [sp, #164]	; 0xa4
 80048fe:	9328      	str	r3, [sp, #160]	; 0xa0
 8004900:	e889 0006 	stmia.w	r9, {r1, r2}
 8004904:	f300 83a1 	bgt.w	800504a <_svfprintf_r+0xbca>
 8004908:	f109 0908 	add.w	r9, r9, #8
 800490c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	f000 82e1 	beq.w	8004ed6 <_svfprintf_r+0xa56>
 8004914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004916:	ebc3 070b 	rsb	r7, r3, fp
 800491a:	2f00      	cmp	r7, #0
 800491c:	dd33      	ble.n	8004986 <_svfprintf_r+0x506>
 800491e:	4a78      	ldr	r2, [pc, #480]	; (8004b00 <_svfprintf_r+0x680>)
 8004920:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004922:	920f      	str	r2, [sp, #60]	; 0x3c
 8004924:	2f10      	cmp	r7, #16
 8004926:	dd22      	ble.n	800496e <_svfprintf_r+0x4ee>
 8004928:	4622      	mov	r2, r4
 800492a:	f04f 0b10 	mov.w	fp, #16
 800492e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004930:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004932:	e004      	b.n	800493e <_svfprintf_r+0x4be>
 8004934:	3f10      	subs	r7, #16
 8004936:	2f10      	cmp	r7, #16
 8004938:	f109 0908 	add.w	r9, r9, #8
 800493c:	dd16      	ble.n	800496c <_svfprintf_r+0x4ec>
 800493e:	3301      	adds	r3, #1
 8004940:	3210      	adds	r2, #16
 8004942:	2b07      	cmp	r3, #7
 8004944:	9229      	str	r2, [sp, #164]	; 0xa4
 8004946:	9328      	str	r3, [sp, #160]	; 0xa0
 8004948:	e889 0c00 	stmia.w	r9, {sl, fp}
 800494c:	ddf2      	ble.n	8004934 <_svfprintf_r+0x4b4>
 800494e:	aa27      	add	r2, sp, #156	; 0x9c
 8004950:	4621      	mov	r1, r4
 8004952:	4628      	mov	r0, r5
 8004954:	f005 faaa 	bl	8009eac <__ssprint_r>
 8004958:	2800      	cmp	r0, #0
 800495a:	f47f ae8b 	bne.w	8004674 <_svfprintf_r+0x1f4>
 800495e:	3f10      	subs	r7, #16
 8004960:	2f10      	cmp	r7, #16
 8004962:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004964:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004966:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800496a:	dce8      	bgt.n	800493e <_svfprintf_r+0x4be>
 800496c:	4614      	mov	r4, r2
 800496e:	3301      	adds	r3, #1
 8004970:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004972:	9328      	str	r3, [sp, #160]	; 0xa0
 8004974:	443c      	add	r4, r7
 8004976:	2b07      	cmp	r3, #7
 8004978:	9429      	str	r4, [sp, #164]	; 0xa4
 800497a:	e889 0084 	stmia.w	r9, {r2, r7}
 800497e:	f300 834c 	bgt.w	800501a <_svfprintf_r+0xb9a>
 8004982:	f109 0908 	add.w	r9, r9, #8
 8004986:	9b07      	ldr	r3, [sp, #28]
 8004988:	05da      	lsls	r2, r3, #23
 800498a:	f100 823a 	bmi.w	8004e02 <_svfprintf_r+0x982>
 800498e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004990:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004992:	f8c9 6000 	str.w	r6, [r9]
 8004996:	3301      	adds	r3, #1
 8004998:	440c      	add	r4, r1
 800499a:	2b07      	cmp	r3, #7
 800499c:	9429      	str	r4, [sp, #164]	; 0xa4
 800499e:	f8c9 1004 	str.w	r1, [r9, #4]
 80049a2:	9328      	str	r3, [sp, #160]	; 0xa0
 80049a4:	f300 8323 	bgt.w	8004fee <_svfprintf_r+0xb6e>
 80049a8:	f109 0908 	add.w	r9, r9, #8
 80049ac:	9b07      	ldr	r3, [sp, #28]
 80049ae:	0759      	lsls	r1, r3, #29
 80049b0:	d53f      	bpl.n	8004a32 <_svfprintf_r+0x5b2>
 80049b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049b4:	9a08      	ldr	r2, [sp, #32]
 80049b6:	1a9d      	subs	r5, r3, r2
 80049b8:	2d00      	cmp	r5, #0
 80049ba:	dd3a      	ble.n	8004a32 <_svfprintf_r+0x5b2>
 80049bc:	2d10      	cmp	r5, #16
 80049be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80049c0:	4f4e      	ldr	r7, [pc, #312]	; (8004afc <_svfprintf_r+0x67c>)
 80049c2:	dd23      	ble.n	8004a0c <_svfprintf_r+0x58c>
 80049c4:	4622      	mov	r2, r4
 80049c6:	2610      	movs	r6, #16
 80049c8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80049cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80049ce:	e004      	b.n	80049da <_svfprintf_r+0x55a>
 80049d0:	3d10      	subs	r5, #16
 80049d2:	2d10      	cmp	r5, #16
 80049d4:	f109 0908 	add.w	r9, r9, #8
 80049d8:	dd17      	ble.n	8004a0a <_svfprintf_r+0x58a>
 80049da:	3301      	adds	r3, #1
 80049dc:	4947      	ldr	r1, [pc, #284]	; (8004afc <_svfprintf_r+0x67c>)
 80049de:	9328      	str	r3, [sp, #160]	; 0xa0
 80049e0:	3210      	adds	r2, #16
 80049e2:	2b07      	cmp	r3, #7
 80049e4:	9229      	str	r2, [sp, #164]	; 0xa4
 80049e6:	e889 0042 	stmia.w	r9, {r1, r6}
 80049ea:	ddf1      	ble.n	80049d0 <_svfprintf_r+0x550>
 80049ec:	aa27      	add	r2, sp, #156	; 0x9c
 80049ee:	4621      	mov	r1, r4
 80049f0:	4658      	mov	r0, fp
 80049f2:	f005 fa5b 	bl	8009eac <__ssprint_r>
 80049f6:	2800      	cmp	r0, #0
 80049f8:	f47f ae3c 	bne.w	8004674 <_svfprintf_r+0x1f4>
 80049fc:	3d10      	subs	r5, #16
 80049fe:	2d10      	cmp	r5, #16
 8004a00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004a02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004a04:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004a08:	dce7      	bgt.n	80049da <_svfprintf_r+0x55a>
 8004a0a:	4614      	mov	r4, r2
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	442c      	add	r4, r5
 8004a10:	2b07      	cmp	r3, #7
 8004a12:	9429      	str	r4, [sp, #164]	; 0xa4
 8004a14:	9328      	str	r3, [sp, #160]	; 0xa0
 8004a16:	f8c9 7000 	str.w	r7, [r9]
 8004a1a:	f8c9 5004 	str.w	r5, [r9, #4]
 8004a1e:	dd08      	ble.n	8004a32 <_svfprintf_r+0x5b2>
 8004a20:	aa27      	add	r2, sp, #156	; 0x9c
 8004a22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a24:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004a26:	f005 fa41 	bl	8009eac <__ssprint_r>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	f47f ae22 	bne.w	8004674 <_svfprintf_r+0x1f4>
 8004a30:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a36:	9908      	ldr	r1, [sp, #32]
 8004a38:	428a      	cmp	r2, r1
 8004a3a:	bfac      	ite	ge
 8004a3c:	189b      	addge	r3, r3, r2
 8004a3e:	185b      	addlt	r3, r3, r1
 8004a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a42:	2c00      	cmp	r4, #0
 8004a44:	f040 82df 	bne.w	8005006 <_svfprintf_r+0xb86>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	9328      	str	r3, [sp, #160]	; 0xa0
 8004a4c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004a50:	e53d      	b.n	80044ce <_svfprintf_r+0x4e>
 8004a52:	9311      	str	r3, [sp, #68]	; 0x44
 8004a54:	46ab      	mov	fp, r5
 8004a56:	2a00      	cmp	r2, #0
 8004a58:	f041 806a 	bne.w	8005b30 <_svfprintf_r+0x16b0>
 8004a5c:	9b07      	ldr	r3, [sp, #28]
 8004a5e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004a60:	071a      	lsls	r2, r3, #28
 8004a62:	f107 0707 	add.w	r7, r7, #7
 8004a66:	f140 8576 	bpl.w	8005556 <_svfprintf_r+0x10d6>
 8004a6a:	f027 0307 	bic.w	r3, r7, #7
 8004a6e:	ed93 7b00 	vldr	d7, [r3]
 8004a72:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004a76:	f103 0208 	add.w	r2, r3, #8
 8004a7a:	920e      	str	r2, [sp, #56]	; 0x38
 8004a7c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8004a80:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8004a84:	911a      	str	r1, [sp, #104]	; 0x68
 8004a86:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a88:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a90:	4620      	mov	r0, r4
 8004a92:	4629      	mov	r1, r5
 8004a94:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <_svfprintf_r+0x684>)
 8004a96:	f7ff fa39 	bl	8003f0c <__aeabi_dcmpun>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	f040 84da 	bne.w	8005454 <_svfprintf_r+0xfd4>
 8004aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa4:	4b17      	ldr	r3, [pc, #92]	; (8004b04 <_svfprintf_r+0x684>)
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	f7ff fa11 	bl	8003ed0 <__aeabi_dcmple>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	f040 84d0 	bne.w	8005454 <_svfprintf_r+0xfd4>
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004abc:	f7ff f9fe 	bl	8003ebc <__aeabi_dcmplt>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	f040 875a 	bne.w	800597a <_svfprintf_r+0x14fa>
 8004ac6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004aca:	4e0f      	ldr	r6, [pc, #60]	; (8004b08 <_svfprintf_r+0x688>)
 8004acc:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <_svfprintf_r+0x68c>)
 8004ace:	9907      	ldr	r1, [sp, #28]
 8004ad0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004ad4:	9107      	str	r1, [sp, #28]
 8004ad6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004ad8:	2203      	movs	r2, #3
 8004ada:	f04f 0b00 	mov.w	fp, #0
 8004ade:	9208      	str	r2, [sp, #32]
 8004ae0:	2947      	cmp	r1, #71	; 0x47
 8004ae2:	bfd8      	it	le
 8004ae4:	461e      	movle	r6, r3
 8004ae6:	920d      	str	r2, [sp, #52]	; 0x34
 8004ae8:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8004aec:	e69a      	b.n	8004824 <_svfprintf_r+0x3a4>
 8004aee:	9b07      	ldr	r3, [sp, #28]
 8004af0:	f043 0308 	orr.w	r3, r3, #8
 8004af4:	9307      	str	r3, [sp, #28]
 8004af6:	f898 3000 	ldrb.w	r3, [r8]
 8004afa:	e51b      	b.n	8004534 <_svfprintf_r+0xb4>
 8004afc:	0800a968 	.word	0x0800a968
 8004b00:	0800a914 	.word	0x0800a914
 8004b04:	7fefffff 	.word	0x7fefffff
 8004b08:	0800a928 	.word	0x0800a928
 8004b0c:	0800a924 	.word	0x0800a924
 8004b10:	9311      	str	r3, [sp, #68]	; 0x44
 8004b12:	46ab      	mov	fp, r5
 8004b14:	2a00      	cmp	r2, #0
 8004b16:	f041 8017 	bne.w	8005b48 <_svfprintf_r+0x16c8>
 8004b1a:	9b07      	ldr	r3, [sp, #28]
 8004b1c:	f043 0310 	orr.w	r3, r3, #16
 8004b20:	9307      	str	r3, [sp, #28]
 8004b22:	9a07      	ldr	r2, [sp, #28]
 8004b24:	f012 0320 	ands.w	r3, r2, #32
 8004b28:	f47f adba 	bne.w	80046a0 <_svfprintf_r+0x220>
 8004b2c:	9907      	ldr	r1, [sp, #28]
 8004b2e:	f011 0210 	ands.w	r2, r1, #16
 8004b32:	f000 845b 	beq.w	80053ec <_svfprintf_r+0xf6c>
 8004b36:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004b38:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004b3c:	f1bb 0f00 	cmp.w	fp, #0
 8004b40:	6804      	ldr	r4, [r0, #0]
 8004b42:	f100 0704 	add.w	r7, r0, #4
 8004b46:	f04f 0500 	mov.w	r5, #0
 8004b4a:	f2c0 851b 	blt.w	8005584 <_svfprintf_r+0x1104>
 8004b4e:	460a      	mov	r2, r1
 8004b50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b54:	9207      	str	r2, [sp, #28]
 8004b56:	ea54 0205 	orrs.w	r2, r4, r5
 8004b5a:	970e      	str	r7, [sp, #56]	; 0x38
 8004b5c:	f000 813a 	beq.w	8004dd4 <_svfprintf_r+0x954>
 8004b60:	461f      	mov	r7, r3
 8004b62:	e5b3      	b.n	80046cc <_svfprintf_r+0x24c>
 8004b64:	9311      	str	r3, [sp, #68]	; 0x44
 8004b66:	46ab      	mov	fp, r5
 8004b68:	2a00      	cmp	r2, #0
 8004b6a:	f040 87e9 	bne.w	8005b40 <_svfprintf_r+0x16c0>
 8004b6e:	9b07      	ldr	r3, [sp, #28]
 8004b70:	f043 0310 	orr.w	r3, r3, #16
 8004b74:	9307      	str	r3, [sp, #28]
 8004b76:	9a07      	ldr	r2, [sp, #28]
 8004b78:	f012 0320 	ands.w	r3, r2, #32
 8004b7c:	f000 832c 	beq.w	80051d8 <_svfprintf_r+0xd58>
 8004b80:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004b82:	3707      	adds	r7, #7
 8004b84:	f027 0307 	bic.w	r3, r7, #7
 8004b88:	2700      	movs	r7, #0
 8004b8a:	f103 0108 	add.w	r1, r3, #8
 8004b8e:	45bb      	cmp	fp, r7
 8004b90:	910e      	str	r1, [sp, #56]	; 0x38
 8004b92:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004b96:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004b9a:	f2c0 8356 	blt.w	800524a <_svfprintf_r+0xdca>
 8004b9e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004ba2:	9307      	str	r3, [sp, #28]
 8004ba4:	ea54 0305 	orrs.w	r3, r4, r5
 8004ba8:	f47f ae18 	bne.w	80047dc <_svfprintf_r+0x35c>
 8004bac:	f1bb 0f00 	cmp.w	fp, #0
 8004bb0:	f000 80f5 	beq.w	8004d9e <_svfprintf_r+0x91e>
 8004bb4:	2400      	movs	r4, #0
 8004bb6:	ae44      	add	r6, sp, #272	; 0x110
 8004bb8:	3430      	adds	r4, #48	; 0x30
 8004bba:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8004bbe:	e627      	b.n	8004810 <_svfprintf_r+0x390>
 8004bc0:	9311      	str	r3, [sp, #68]	; 0x44
 8004bc2:	46ab      	mov	fp, r5
 8004bc4:	2a00      	cmp	r2, #0
 8004bc6:	f040 87b7 	bne.w	8005b38 <_svfprintf_r+0x16b8>
 8004bca:	9b07      	ldr	r3, [sp, #28]
 8004bcc:	48af      	ldr	r0, [pc, #700]	; (8004e8c <_svfprintf_r+0xa0c>)
 8004bce:	069d      	lsls	r5, r3, #26
 8004bd0:	f140 80b5 	bpl.w	8004d3e <_svfprintf_r+0x8be>
 8004bd4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004bd6:	3707      	adds	r7, #7
 8004bd8:	f027 0307 	bic.w	r3, r7, #7
 8004bdc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004be0:	f103 0208 	add.w	r2, r3, #8
 8004be4:	920e      	str	r2, [sp, #56]	; 0x38
 8004be6:	9a07      	ldr	r2, [sp, #28]
 8004be8:	f012 0701 	ands.w	r7, r2, #1
 8004bec:	f000 8239 	beq.w	8005062 <_svfprintf_r+0xbe2>
 8004bf0:	ea54 0305 	orrs.w	r3, r4, r5
 8004bf4:	f000 8504 	beq.w	8005600 <_svfprintf_r+0x1180>
 8004bf8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8004bfc:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8004c00:	2700      	movs	r7, #0
 8004c02:	9a07      	ldr	r2, [sp, #28]
 8004c04:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004c08:	2330      	movs	r3, #48	; 0x30
 8004c0a:	45bb      	cmp	fp, r7
 8004c0c:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8004c10:	f042 0302 	orr.w	r3, r2, #2
 8004c14:	f2c0 86b6 	blt.w	8005984 <_svfprintf_r+0x1504>
 8004c18:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004c1c:	f043 0302 	orr.w	r3, r3, #2
 8004c20:	9307      	str	r3, [sp, #28]
 8004c22:	ae34      	add	r6, sp, #208	; 0xd0
 8004c24:	0923      	lsrs	r3, r4, #4
 8004c26:	f004 010f 	and.w	r1, r4, #15
 8004c2a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8004c2e:	092a      	lsrs	r2, r5, #4
 8004c30:	461c      	mov	r4, r3
 8004c32:	4615      	mov	r5, r2
 8004c34:	5c43      	ldrb	r3, [r0, r1]
 8004c36:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8004c3a:	ea54 0305 	orrs.w	r3, r4, r5
 8004c3e:	d1f1      	bne.n	8004c24 <_svfprintf_r+0x7a4>
 8004c40:	e5e6      	b.n	8004810 <_svfprintf_r+0x390>
 8004c42:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004c44:	9311      	str	r3, [sp, #68]	; 0x44
 8004c46:	680a      	ldr	r2, [r1, #0]
 8004c48:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	460a      	mov	r2, r1
 8004c50:	461f      	mov	r7, r3
 8004c52:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004c56:	3204      	adds	r2, #4
 8004c58:	2301      	movs	r3, #1
 8004c5a:	9308      	str	r3, [sp, #32]
 8004c5c:	46bb      	mov	fp, r7
 8004c5e:	9713      	str	r7, [sp, #76]	; 0x4c
 8004c60:	920e      	str	r2, [sp, #56]	; 0x38
 8004c62:	930d      	str	r3, [sp, #52]	; 0x34
 8004c64:	ae2a      	add	r6, sp, #168	; 0xa8
 8004c66:	e5e1      	b.n	800482c <_svfprintf_r+0x3ac>
 8004c68:	9311      	str	r3, [sp, #68]	; 0x44
 8004c6a:	46ab      	mov	fp, r5
 8004c6c:	2a00      	cmp	r2, #0
 8004c6e:	f43f ad93 	beq.w	8004798 <_svfprintf_r+0x318>
 8004c72:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004c76:	e58f      	b.n	8004798 <_svfprintf_r+0x318>
 8004c78:	9b07      	ldr	r3, [sp, #28]
 8004c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c7e:	9307      	str	r3, [sp, #28]
 8004c80:	f898 3000 	ldrb.w	r3, [r8]
 8004c84:	e456      	b.n	8004534 <_svfprintf_r+0xb4>
 8004c86:	f898 3000 	ldrb.w	r3, [r8]
 8004c8a:	2900      	cmp	r1, #0
 8004c8c:	f47f ac52 	bne.w	8004534 <_svfprintf_r+0xb4>
 8004c90:	2201      	movs	r2, #1
 8004c92:	2120      	movs	r1, #32
 8004c94:	e44e      	b.n	8004534 <_svfprintf_r+0xb4>
 8004c96:	9b07      	ldr	r3, [sp, #28]
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	9307      	str	r3, [sp, #28]
 8004c9e:	f898 3000 	ldrb.w	r3, [r8]
 8004ca2:	e447      	b.n	8004534 <_svfprintf_r+0xb4>
 8004ca4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	930c      	str	r3, [sp, #48]	; 0x30
 8004caa:	4618      	mov	r0, r3
 8004cac:	2800      	cmp	r0, #0
 8004cae:	4623      	mov	r3, r4
 8004cb0:	f103 0304 	add.w	r3, r3, #4
 8004cb4:	f6ff aca0 	blt.w	80045f8 <_svfprintf_r+0x178>
 8004cb8:	930e      	str	r3, [sp, #56]	; 0x38
 8004cba:	f898 3000 	ldrb.w	r3, [r8]
 8004cbe:	e439      	b.n	8004534 <_svfprintf_r+0xb4>
 8004cc0:	f898 3000 	ldrb.w	r3, [r8]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	212b      	movs	r1, #43	; 0x2b
 8004cc8:	e434      	b.n	8004534 <_svfprintf_r+0xb4>
 8004cca:	9b07      	ldr	r3, [sp, #28]
 8004ccc:	f043 0320 	orr.w	r3, r3, #32
 8004cd0:	9307      	str	r3, [sp, #28]
 8004cd2:	f898 3000 	ldrb.w	r3, [r8]
 8004cd6:	e42d      	b.n	8004534 <_svfprintf_r+0xb4>
 8004cd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cda:	9311      	str	r3, [sp, #68]	; 0x44
 8004cdc:	6816      	ldr	r6, [r2, #0]
 8004cde:	2400      	movs	r4, #0
 8004ce0:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 8004ce4:	1d17      	adds	r7, r2, #4
 8004ce6:	2e00      	cmp	r6, #0
 8004ce8:	f000 8621 	beq.w	800592e <_svfprintf_r+0x14ae>
 8004cec:	2d00      	cmp	r5, #0
 8004cee:	f2c0 8566 	blt.w	80057be <_svfprintf_r+0x133e>
 8004cf2:	462a      	mov	r2, r5
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	f004 faca 	bl	8009290 <memchr>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	f000 866b 	beq.w	80059d8 <_svfprintf_r+0x1558>
 8004d02:	1b83      	subs	r3, r0, r6
 8004d04:	930d      	str	r3, [sp, #52]	; 0x34
 8004d06:	46a3      	mov	fp, r4
 8004d08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004d0c:	970e      	str	r7, [sp, #56]	; 0x38
 8004d0e:	9308      	str	r3, [sp, #32]
 8004d10:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8004d14:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004d18:	e584      	b.n	8004824 <_svfprintf_r+0x3a4>
 8004d1a:	9311      	str	r3, [sp, #68]	; 0x44
 8004d1c:	46ab      	mov	fp, r5
 8004d1e:	2a00      	cmp	r2, #0
 8004d20:	f43f af29 	beq.w	8004b76 <_svfprintf_r+0x6f6>
 8004d24:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004d28:	e725      	b.n	8004b76 <_svfprintf_r+0x6f6>
 8004d2a:	9311      	str	r3, [sp, #68]	; 0x44
 8004d2c:	46ab      	mov	fp, r5
 8004d2e:	2a00      	cmp	r2, #0
 8004d30:	f040 8716 	bne.w	8005b60 <_svfprintf_r+0x16e0>
 8004d34:	9b07      	ldr	r3, [sp, #28]
 8004d36:	4856      	ldr	r0, [pc, #344]	; (8004e90 <_svfprintf_r+0xa10>)
 8004d38:	069d      	lsls	r5, r3, #26
 8004d3a:	f53f af4b 	bmi.w	8004bd4 <_svfprintf_r+0x754>
 8004d3e:	9b07      	ldr	r3, [sp, #28]
 8004d40:	06dc      	lsls	r4, r3, #27
 8004d42:	f140 8440 	bpl.w	80055c6 <_svfprintf_r+0x1146>
 8004d46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d48:	4613      	mov	r3, r2
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	6814      	ldr	r4, [r2, #0]
 8004d4e:	930e      	str	r3, [sp, #56]	; 0x38
 8004d50:	2500      	movs	r5, #0
 8004d52:	e748      	b.n	8004be6 <_svfprintf_r+0x766>
 8004d54:	f898 3000 	ldrb.w	r3, [r8]
 8004d58:	2b6c      	cmp	r3, #108	; 0x6c
 8004d5a:	f000 84c4 	beq.w	80056e6 <_svfprintf_r+0x1266>
 8004d5e:	9807      	ldr	r0, [sp, #28]
 8004d60:	f040 0010 	orr.w	r0, r0, #16
 8004d64:	9007      	str	r0, [sp, #28]
 8004d66:	f7ff bbe5 	b.w	8004534 <_svfprintf_r+0xb4>
 8004d6a:	2a00      	cmp	r2, #0
 8004d6c:	f040 86f4 	bne.w	8005b58 <_svfprintf_r+0x16d8>
 8004d70:	9b07      	ldr	r3, [sp, #28]
 8004d72:	069b      	lsls	r3, r3, #26
 8004d74:	f140 8357 	bpl.w	8005426 <_svfprintf_r+0xfa6>
 8004d78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d7c:	6813      	ldr	r3, [r2, #0]
 8004d7e:	17cd      	asrs	r5, r1, #31
 8004d80:	4608      	mov	r0, r1
 8004d82:	3204      	adds	r2, #4
 8004d84:	4629      	mov	r1, r5
 8004d86:	920e      	str	r2, [sp, #56]	; 0x38
 8004d88:	e9c3 0100 	strd	r0, r1, [r3]
 8004d8c:	f7ff bb9f 	b.w	80044ce <_svfprintf_r+0x4e>
 8004d90:	483f      	ldr	r0, [pc, #252]	; (8004e90 <_svfprintf_r+0xa10>)
 8004d92:	9211      	str	r2, [sp, #68]	; 0x44
 8004d94:	f1bb 0f00 	cmp.w	fp, #0
 8004d98:	f040 8174 	bne.w	8005084 <_svfprintf_r+0xc04>
 8004d9c:	465f      	mov	r7, fp
 8004d9e:	f04f 0b00 	mov.w	fp, #0
 8004da2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8004da6:	ae34      	add	r6, sp, #208	; 0xd0
 8004da8:	e535      	b.n	8004816 <_svfprintf_r+0x396>
 8004daa:	9311      	str	r3, [sp, #68]	; 0x44
 8004dac:	2a00      	cmp	r2, #0
 8004dae:	f040 86cf 	bne.w	8005b50 <_svfprintf_r+0x16d0>
 8004db2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004db4:	2a00      	cmp	r2, #0
 8004db6:	f43f ac56 	beq.w	8004666 <_svfprintf_r+0x1e6>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	461f      	mov	r7, r3
 8004dc0:	9108      	str	r1, [sp, #32]
 8004dc2:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8004dc6:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004dca:	469b      	mov	fp, r3
 8004dcc:	9313      	str	r3, [sp, #76]	; 0x4c
 8004dce:	910d      	str	r1, [sp, #52]	; 0x34
 8004dd0:	ae2a      	add	r6, sp, #168	; 0xa8
 8004dd2:	e52b      	b.n	800482c <_svfprintf_r+0x3ac>
 8004dd4:	f1bb 0f00 	cmp.w	fp, #0
 8004dd8:	f000 8616 	beq.w	8005a08 <_svfprintf_r+0x1588>
 8004ddc:	2700      	movs	r7, #0
 8004dde:	2400      	movs	r4, #0
 8004de0:	2500      	movs	r5, #0
 8004de2:	e473      	b.n	80046cc <_svfprintf_r+0x24c>
 8004de4:	482a      	ldr	r0, [pc, #168]	; (8004e90 <_svfprintf_r+0xa10>)
 8004de6:	9307      	str	r3, [sp, #28]
 8004de8:	9211      	str	r2, [sp, #68]	; 0x44
 8004dea:	ea54 0305 	orrs.w	r3, r4, r5
 8004dee:	970e      	str	r7, [sp, #56]	; 0x38
 8004df0:	f04f 0700 	mov.w	r7, #0
 8004df4:	f47f af15 	bne.w	8004c22 <_svfprintf_r+0x7a2>
 8004df8:	2400      	movs	r4, #0
 8004dfa:	2500      	movs	r5, #0
 8004dfc:	e711      	b.n	8004c22 <_svfprintf_r+0x7a2>
 8004dfe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004e00:	e564      	b.n	80048cc <_svfprintf_r+0x44c>
 8004e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e04:	2b65      	cmp	r3, #101	; 0x65
 8004e06:	f340 80aa 	ble.w	8004f5e <_svfprintf_r+0xade>
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004e12:	f7ff f849 	bl	8003ea8 <__aeabi_dcmpeq>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	f000 8136 	beq.w	8005088 <_svfprintf_r+0xc08>
 8004e1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004e1e:	4a1d      	ldr	r2, [pc, #116]	; (8004e94 <_svfprintf_r+0xa14>)
 8004e20:	f8c9 2000 	str.w	r2, [r9]
 8004e24:	3301      	adds	r3, #1
 8004e26:	3401      	adds	r4, #1
 8004e28:	2201      	movs	r2, #1
 8004e2a:	2b07      	cmp	r3, #7
 8004e2c:	9429      	str	r4, [sp, #164]	; 0xa4
 8004e2e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004e30:	f8c9 2004 	str.w	r2, [r9, #4]
 8004e34:	f300 83f0 	bgt.w	8005618 <_svfprintf_r+0x1198>
 8004e38:	f109 0908 	add.w	r9, r9, #8
 8004e3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e40:	4293      	cmp	r3, r2
 8004e42:	db03      	blt.n	8004e4c <_svfprintf_r+0x9cc>
 8004e44:	9b07      	ldr	r3, [sp, #28]
 8004e46:	07db      	lsls	r3, r3, #31
 8004e48:	f57f adb0 	bpl.w	80049ac <_svfprintf_r+0x52c>
 8004e4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004e4e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004e50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004e52:	f8c9 2000 	str.w	r2, [r9]
 8004e56:	3301      	adds	r3, #1
 8004e58:	440c      	add	r4, r1
 8004e5a:	2b07      	cmp	r3, #7
 8004e5c:	9429      	str	r4, [sp, #164]	; 0xa4
 8004e5e:	f8c9 1004 	str.w	r1, [r9, #4]
 8004e62:	9328      	str	r3, [sp, #160]	; 0xa0
 8004e64:	f300 8449 	bgt.w	80056fa <_svfprintf_r+0x127a>
 8004e68:	f109 0908 	add.w	r9, r9, #8
 8004e6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e6e:	1e5d      	subs	r5, r3, #1
 8004e70:	2d00      	cmp	r5, #0
 8004e72:	f77f ad9b 	ble.w	80049ac <_svfprintf_r+0x52c>
 8004e76:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <_svfprintf_r+0xa18>)
 8004e78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004e7a:	920f      	str	r2, [sp, #60]	; 0x3c
 8004e7c:	2d10      	cmp	r5, #16
 8004e7e:	f340 81e9 	ble.w	8005254 <_svfprintf_r+0xdd4>
 8004e82:	2610      	movs	r6, #16
 8004e84:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004e86:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8004e8a:	e00d      	b.n	8004ea8 <_svfprintf_r+0xa28>
 8004e8c:	0800a934 	.word	0x0800a934
 8004e90:	0800a948 	.word	0x0800a948
 8004e94:	0800a964 	.word	0x0800a964
 8004e98:	0800a914 	.word	0x0800a914
 8004e9c:	f109 0908 	add.w	r9, r9, #8
 8004ea0:	3d10      	subs	r5, #16
 8004ea2:	2d10      	cmp	r5, #16
 8004ea4:	f340 81d6 	ble.w	8005254 <_svfprintf_r+0xdd4>
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	3410      	adds	r4, #16
 8004eac:	2b07      	cmp	r3, #7
 8004eae:	9429      	str	r4, [sp, #164]	; 0xa4
 8004eb0:	9328      	str	r3, [sp, #160]	; 0xa0
 8004eb2:	f8c9 a000 	str.w	sl, [r9]
 8004eb6:	f8c9 6004 	str.w	r6, [r9, #4]
 8004eba:	ddef      	ble.n	8004e9c <_svfprintf_r+0xa1c>
 8004ebc:	aa27      	add	r2, sp, #156	; 0x9c
 8004ebe:	4659      	mov	r1, fp
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	f004 fff3 	bl	8009eac <__ssprint_r>
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	f47f abd4 	bne.w	8004674 <_svfprintf_r+0x1f4>
 8004ecc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004ece:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004ed0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004ed4:	e7e4      	b.n	8004ea0 <_svfprintf_r+0xa20>
 8004ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ed8:	9a08      	ldr	r2, [sp, #32]
 8004eda:	1a9f      	subs	r7, r3, r2
 8004edc:	2f00      	cmp	r7, #0
 8004ede:	f77f ad19 	ble.w	8004914 <_svfprintf_r+0x494>
 8004ee2:	4abc      	ldr	r2, [pc, #752]	; (80051d4 <_svfprintf_r+0xd54>)
 8004ee4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004ee6:	920f      	str	r2, [sp, #60]	; 0x3c
 8004ee8:	2f10      	cmp	r7, #16
 8004eea:	dd2b      	ble.n	8004f44 <_svfprintf_r+0xac4>
 8004eec:	464a      	mov	r2, r9
 8004eee:	4621      	mov	r1, r4
 8004ef0:	46b9      	mov	r9, r7
 8004ef2:	2510      	movs	r5, #16
 8004ef4:	4637      	mov	r7, r6
 8004ef6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004ef8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004efa:	e006      	b.n	8004f0a <_svfprintf_r+0xa8a>
 8004efc:	f1a9 0910 	sub.w	r9, r9, #16
 8004f00:	f1b9 0f10 	cmp.w	r9, #16
 8004f04:	f102 0208 	add.w	r2, r2, #8
 8004f08:	dd18      	ble.n	8004f3c <_svfprintf_r+0xabc>
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	3110      	adds	r1, #16
 8004f0e:	2b07      	cmp	r3, #7
 8004f10:	9129      	str	r1, [sp, #164]	; 0xa4
 8004f12:	9328      	str	r3, [sp, #160]	; 0xa0
 8004f14:	f8c2 a000 	str.w	sl, [r2]
 8004f18:	6055      	str	r5, [r2, #4]
 8004f1a:	ddef      	ble.n	8004efc <_svfprintf_r+0xa7c>
 8004f1c:	aa27      	add	r2, sp, #156	; 0x9c
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4620      	mov	r0, r4
 8004f22:	f004 ffc3 	bl	8009eac <__ssprint_r>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	f47f aba4 	bne.w	8004674 <_svfprintf_r+0x1f4>
 8004f2c:	f1a9 0910 	sub.w	r9, r9, #16
 8004f30:	f1b9 0f10 	cmp.w	r9, #16
 8004f34:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004f36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004f38:	aa34      	add	r2, sp, #208	; 0xd0
 8004f3a:	dce6      	bgt.n	8004f0a <_svfprintf_r+0xa8a>
 8004f3c:	463e      	mov	r6, r7
 8004f3e:	460c      	mov	r4, r1
 8004f40:	464f      	mov	r7, r9
 8004f42:	4691      	mov	r9, r2
 8004f44:	3301      	adds	r3, #1
 8004f46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f48:	9328      	str	r3, [sp, #160]	; 0xa0
 8004f4a:	443c      	add	r4, r7
 8004f4c:	2b07      	cmp	r3, #7
 8004f4e:	9429      	str	r4, [sp, #164]	; 0xa4
 8004f50:	e889 0084 	stmia.w	r9, {r2, r7}
 8004f54:	f300 823d 	bgt.w	80053d2 <_svfprintf_r+0xf52>
 8004f58:	f109 0908 	add.w	r9, r9, #8
 8004f5c:	e4da      	b.n	8004914 <_svfprintf_r+0x494>
 8004f5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f60:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	f340 820a 	ble.w	800537c <_svfprintf_r+0xefc>
 8004f68:	3501      	adds	r5, #1
 8004f6a:	3401      	adds	r4, #1
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	2d07      	cmp	r5, #7
 8004f70:	9429      	str	r4, [sp, #164]	; 0xa4
 8004f72:	9528      	str	r5, [sp, #160]	; 0xa0
 8004f74:	f8c9 6000 	str.w	r6, [r9]
 8004f78:	f8c9 3004 	str.w	r3, [r9, #4]
 8004f7c:	f300 820f 	bgt.w	800539e <_svfprintf_r+0xf1e>
 8004f80:	f109 0908 	add.w	r9, r9, #8
 8004f84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004f86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f88:	f8c9 3000 	str.w	r3, [r9]
 8004f8c:	3501      	adds	r5, #1
 8004f8e:	4414      	add	r4, r2
 8004f90:	2d07      	cmp	r5, #7
 8004f92:	9429      	str	r4, [sp, #164]	; 0xa4
 8004f94:	9528      	str	r5, [sp, #160]	; 0xa0
 8004f96:	f8c9 2004 	str.w	r2, [r9, #4]
 8004f9a:	f300 820d 	bgt.w	80053b8 <_svfprintf_r+0xf38>
 8004f9e:	f109 0908 	add.w	r9, r9, #8
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004faa:	f7fe ff7d 	bl	8003ea8 <__aeabi_dcmpeq>
 8004fae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	f040 80c3 	bne.w	800513c <_svfprintf_r+0xcbc>
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	3501      	adds	r5, #1
 8004fba:	3601      	adds	r6, #1
 8004fbc:	441c      	add	r4, r3
 8004fbe:	2d07      	cmp	r5, #7
 8004fc0:	9528      	str	r5, [sp, #160]	; 0xa0
 8004fc2:	9429      	str	r4, [sp, #164]	; 0xa4
 8004fc4:	f8c9 6000 	str.w	r6, [r9]
 8004fc8:	f8c9 3004 	str.w	r3, [r9, #4]
 8004fcc:	f300 80f5 	bgt.w	80051ba <_svfprintf_r+0xd3a>
 8004fd0:	f109 0908 	add.w	r9, r9, #8
 8004fd4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004fd6:	f8c9 2004 	str.w	r2, [r9, #4]
 8004fda:	3501      	adds	r5, #1
 8004fdc:	4414      	add	r4, r2
 8004fde:	ab23      	add	r3, sp, #140	; 0x8c
 8004fe0:	2d07      	cmp	r5, #7
 8004fe2:	9429      	str	r4, [sp, #164]	; 0xa4
 8004fe4:	9528      	str	r5, [sp, #160]	; 0xa0
 8004fe6:	f8c9 3000 	str.w	r3, [r9]
 8004fea:	f77f acdd 	ble.w	80049a8 <_svfprintf_r+0x528>
 8004fee:	aa27      	add	r2, sp, #156	; 0x9c
 8004ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ff2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004ff4:	f004 ff5a 	bl	8009eac <__ssprint_r>
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	f47f ab3b 	bne.w	8004674 <_svfprintf_r+0x1f4>
 8004ffe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005000:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005004:	e4d2      	b.n	80049ac <_svfprintf_r+0x52c>
 8005006:	aa27      	add	r2, sp, #156	; 0x9c
 8005008:	9909      	ldr	r1, [sp, #36]	; 0x24
 800500a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800500c:	f004 ff4e 	bl	8009eac <__ssprint_r>
 8005010:	2800      	cmp	r0, #0
 8005012:	f43f ad19 	beq.w	8004a48 <_svfprintf_r+0x5c8>
 8005016:	f7ff bb2d 	b.w	8004674 <_svfprintf_r+0x1f4>
 800501a:	aa27      	add	r2, sp, #156	; 0x9c
 800501c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800501e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005020:	f004 ff44 	bl	8009eac <__ssprint_r>
 8005024:	2800      	cmp	r0, #0
 8005026:	f47f ab25 	bne.w	8004674 <_svfprintf_r+0x1f4>
 800502a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800502c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005030:	e4a9      	b.n	8004986 <_svfprintf_r+0x506>
 8005032:	aa27      	add	r2, sp, #156	; 0x9c
 8005034:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005036:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005038:	f004 ff38 	bl	8009eac <__ssprint_r>
 800503c:	2800      	cmp	r0, #0
 800503e:	f47f ab19 	bne.w	8004674 <_svfprintf_r+0x1f4>
 8005042:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005044:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005048:	e450      	b.n	80048ec <_svfprintf_r+0x46c>
 800504a:	aa27      	add	r2, sp, #156	; 0x9c
 800504c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800504e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005050:	f004 ff2c 	bl	8009eac <__ssprint_r>
 8005054:	2800      	cmp	r0, #0
 8005056:	f47f ab0d 	bne.w	8004674 <_svfprintf_r+0x1f4>
 800505a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800505c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005060:	e454      	b.n	800490c <_svfprintf_r+0x48c>
 8005062:	f1bb 0f00 	cmp.w	fp, #0
 8005066:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800506a:	f2c0 82e1 	blt.w	8005630 <_svfprintf_r+0x11b0>
 800506e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8005072:	9307      	str	r3, [sp, #28]
 8005074:	ea54 0305 	orrs.w	r3, r4, r5
 8005078:	f47f add3 	bne.w	8004c22 <_svfprintf_r+0x7a2>
 800507c:	f1bb 0f00 	cmp.w	fp, #0
 8005080:	f43f ae8c 	beq.w	8004d9c <_svfprintf_r+0x91c>
 8005084:	2700      	movs	r7, #0
 8005086:	e6b7      	b.n	8004df8 <_svfprintf_r+0x978>
 8005088:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800508a:	2d00      	cmp	r5, #0
 800508c:	f340 82d3 	ble.w	8005636 <_svfprintf_r+0x11b6>
 8005090:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005092:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005094:	4293      	cmp	r3, r2
 8005096:	bfa8      	it	ge
 8005098:	4613      	movge	r3, r2
 800509a:	2b00      	cmp	r3, #0
 800509c:	461d      	mov	r5, r3
 800509e:	dd0d      	ble.n	80050bc <_svfprintf_r+0xc3c>
 80050a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80050a2:	f8c9 6000 	str.w	r6, [r9]
 80050a6:	3301      	adds	r3, #1
 80050a8:	442c      	add	r4, r5
 80050aa:	2b07      	cmp	r3, #7
 80050ac:	9429      	str	r4, [sp, #164]	; 0xa4
 80050ae:	f8c9 5004 	str.w	r5, [r9, #4]
 80050b2:	9328      	str	r3, [sp, #160]	; 0xa0
 80050b4:	f300 83ae 	bgt.w	8005814 <_svfprintf_r+0x1394>
 80050b8:	f109 0908 	add.w	r9, r9, #8
 80050bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80050be:	2d00      	cmp	r5, #0
 80050c0:	bfa8      	it	ge
 80050c2:	1b5b      	subge	r3, r3, r5
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	461d      	mov	r5, r3
 80050c8:	f340 80f8 	ble.w	80052bc <_svfprintf_r+0xe3c>
 80050cc:	4a41      	ldr	r2, [pc, #260]	; (80051d4 <_svfprintf_r+0xd54>)
 80050ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80050d0:	920f      	str	r2, [sp, #60]	; 0x3c
 80050d2:	2d10      	cmp	r5, #16
 80050d4:	f340 8285 	ble.w	80055e2 <_svfprintf_r+0x1162>
 80050d8:	4622      	mov	r2, r4
 80050da:	2710      	movs	r7, #16
 80050dc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80050e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80050e2:	e005      	b.n	80050f0 <_svfprintf_r+0xc70>
 80050e4:	f109 0908 	add.w	r9, r9, #8
 80050e8:	3d10      	subs	r5, #16
 80050ea:	2d10      	cmp	r5, #16
 80050ec:	f340 8278 	ble.w	80055e0 <_svfprintf_r+0x1160>
 80050f0:	3301      	adds	r3, #1
 80050f2:	3210      	adds	r2, #16
 80050f4:	2b07      	cmp	r3, #7
 80050f6:	9229      	str	r2, [sp, #164]	; 0xa4
 80050f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80050fa:	f8c9 a000 	str.w	sl, [r9]
 80050fe:	f8c9 7004 	str.w	r7, [r9, #4]
 8005102:	ddef      	ble.n	80050e4 <_svfprintf_r+0xc64>
 8005104:	aa27      	add	r2, sp, #156	; 0x9c
 8005106:	4621      	mov	r1, r4
 8005108:	4658      	mov	r0, fp
 800510a:	f004 fecf 	bl	8009eac <__ssprint_r>
 800510e:	2800      	cmp	r0, #0
 8005110:	f47f aab0 	bne.w	8004674 <_svfprintf_r+0x1f4>
 8005114:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005116:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005118:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800511c:	e7e4      	b.n	80050e8 <_svfprintf_r+0xc68>
 800511e:	aa27      	add	r2, sp, #156	; 0x9c
 8005120:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005122:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005124:	f004 fec2 	bl	8009eac <__ssprint_r>
 8005128:	2800      	cmp	r0, #0
 800512a:	f47f aaa3 	bne.w	8004674 <_svfprintf_r+0x1f4>
 800512e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005132:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005134:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005138:	f7ff bbc8 	b.w	80048cc <_svfprintf_r+0x44c>
 800513c:	1e5e      	subs	r6, r3, #1
 800513e:	2e00      	cmp	r6, #0
 8005140:	f77f af48 	ble.w	8004fd4 <_svfprintf_r+0xb54>
 8005144:	4b23      	ldr	r3, [pc, #140]	; (80051d4 <_svfprintf_r+0xd54>)
 8005146:	930f      	str	r3, [sp, #60]	; 0x3c
 8005148:	2e10      	cmp	r6, #16
 800514a:	dd2c      	ble.n	80051a6 <_svfprintf_r+0xd26>
 800514c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8005150:	2710      	movs	r7, #16
 8005152:	46b0      	mov	r8, r6
 8005154:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005158:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800515a:	e006      	b.n	800516a <_svfprintf_r+0xcea>
 800515c:	f1a8 0810 	sub.w	r8, r8, #16
 8005160:	f1b8 0f10 	cmp.w	r8, #16
 8005164:	f109 0908 	add.w	r9, r9, #8
 8005168:	dd1a      	ble.n	80051a0 <_svfprintf_r+0xd20>
 800516a:	3501      	adds	r5, #1
 800516c:	3410      	adds	r4, #16
 800516e:	2d07      	cmp	r5, #7
 8005170:	9429      	str	r4, [sp, #164]	; 0xa4
 8005172:	9528      	str	r5, [sp, #160]	; 0xa0
 8005174:	f8c9 a000 	str.w	sl, [r9]
 8005178:	f8c9 7004 	str.w	r7, [r9, #4]
 800517c:	ddee      	ble.n	800515c <_svfprintf_r+0xcdc>
 800517e:	aa27      	add	r2, sp, #156	; 0x9c
 8005180:	4631      	mov	r1, r6
 8005182:	4658      	mov	r0, fp
 8005184:	f004 fe92 	bl	8009eac <__ssprint_r>
 8005188:	2800      	cmp	r0, #0
 800518a:	f47f aa73 	bne.w	8004674 <_svfprintf_r+0x1f4>
 800518e:	f1a8 0810 	sub.w	r8, r8, #16
 8005192:	f1b8 0f10 	cmp.w	r8, #16
 8005196:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005198:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800519a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800519e:	dce4      	bgt.n	800516a <_svfprintf_r+0xcea>
 80051a0:	4646      	mov	r6, r8
 80051a2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80051a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051a8:	3501      	adds	r5, #1
 80051aa:	4434      	add	r4, r6
 80051ac:	2d07      	cmp	r5, #7
 80051ae:	9429      	str	r4, [sp, #164]	; 0xa4
 80051b0:	9528      	str	r5, [sp, #160]	; 0xa0
 80051b2:	e889 0048 	stmia.w	r9, {r3, r6}
 80051b6:	f77f af0b 	ble.w	8004fd0 <_svfprintf_r+0xb50>
 80051ba:	aa27      	add	r2, sp, #156	; 0x9c
 80051bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051c0:	f004 fe74 	bl	8009eac <__ssprint_r>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	f47f aa55 	bne.w	8004674 <_svfprintf_r+0x1f4>
 80051ca:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80051cc:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80051ce:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80051d2:	e6ff      	b.n	8004fd4 <_svfprintf_r+0xb54>
 80051d4:	0800a914 	.word	0x0800a914
 80051d8:	9907      	ldr	r1, [sp, #28]
 80051da:	f011 0210 	ands.w	r2, r1, #16
 80051de:	f000 81d5 	beq.w	800558c <_svfprintf_r+0x110c>
 80051e2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80051e4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80051e8:	f1bb 0f00 	cmp.w	fp, #0
 80051ec:	6804      	ldr	r4, [r0, #0]
 80051ee:	f100 0704 	add.w	r7, r0, #4
 80051f2:	f04f 0500 	mov.w	r5, #0
 80051f6:	db26      	blt.n	8005246 <_svfprintf_r+0xdc6>
 80051f8:	460a      	mov	r2, r1
 80051fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051fe:	9207      	str	r2, [sp, #28]
 8005200:	ea54 0205 	orrs.w	r2, r4, r5
 8005204:	970e      	str	r7, [sp, #56]	; 0x38
 8005206:	461f      	mov	r7, r3
 8005208:	f47f aae8 	bne.w	80047dc <_svfprintf_r+0x35c>
 800520c:	e4ce      	b.n	8004bac <_svfprintf_r+0x72c>
 800520e:	9b07      	ldr	r3, [sp, #28]
 8005210:	06d8      	lsls	r0, r3, #27
 8005212:	d42a      	bmi.n	800526a <_svfprintf_r+0xdea>
 8005214:	9b07      	ldr	r3, [sp, #28]
 8005216:	0659      	lsls	r1, r3, #25
 8005218:	d527      	bpl.n	800526a <_svfprintf_r+0xdea>
 800521a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800521c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8005220:	3104      	adds	r1, #4
 8005222:	17e5      	asrs	r5, r4, #31
 8005224:	4622      	mov	r2, r4
 8005226:	462b      	mov	r3, r5
 8005228:	910e      	str	r1, [sp, #56]	; 0x38
 800522a:	f7ff bac4 	b.w	80047b6 <_svfprintf_r+0x336>
 800522e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005230:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005234:	f1bb 0f00 	cmp.w	fp, #0
 8005238:	680c      	ldr	r4, [r1, #0]
 800523a:	f101 0704 	add.w	r7, r1, #4
 800523e:	f04f 0500 	mov.w	r5, #0
 8005242:	f280 824e 	bge.w	80056e2 <_svfprintf_r+0x1262>
 8005246:	970e      	str	r7, [sp, #56]	; 0x38
 8005248:	461f      	mov	r7, r3
 800524a:	ea54 0305 	orrs.w	r3, r4, r5
 800524e:	f47f aac5 	bne.w	80047dc <_svfprintf_r+0x35c>
 8005252:	e4b0      	b.n	8004bb6 <_svfprintf_r+0x736>
 8005254:	3301      	adds	r3, #1
 8005256:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005258:	9328      	str	r3, [sp, #160]	; 0xa0
 800525a:	442c      	add	r4, r5
 800525c:	2b07      	cmp	r3, #7
 800525e:	9429      	str	r4, [sp, #164]	; 0xa4
 8005260:	e889 0024 	stmia.w	r9, {r2, r5}
 8005264:	f77f aba0 	ble.w	80049a8 <_svfprintf_r+0x528>
 8005268:	e6c1      	b.n	8004fee <_svfprintf_r+0xb6e>
 800526a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800526c:	6814      	ldr	r4, [r2, #0]
 800526e:	4613      	mov	r3, r2
 8005270:	3304      	adds	r3, #4
 8005272:	17e5      	asrs	r5, r4, #31
 8005274:	4622      	mov	r2, r4
 8005276:	930e      	str	r3, [sp, #56]	; 0x38
 8005278:	2a00      	cmp	r2, #0
 800527a:	462b      	mov	r3, r5
 800527c:	f173 0300 	sbcs.w	r3, r3, #0
 8005280:	f6bf aa9e 	bge.w	80047c0 <_svfprintf_r+0x340>
 8005284:	4264      	negs	r4, r4
 8005286:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800528a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800528e:	f1bb 0f00 	cmp.w	fp, #0
 8005292:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005296:	f6ff aaa1 	blt.w	80047dc <_svfprintf_r+0x35c>
 800529a:	9b07      	ldr	r3, [sp, #28]
 800529c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a0:	9307      	str	r3, [sp, #28]
 80052a2:	f7ff ba9b 	b.w	80047dc <_svfprintf_r+0x35c>
 80052a6:	aa27      	add	r2, sp, #156	; 0x9c
 80052a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80052ac:	f004 fdfe 	bl	8009eac <__ssprint_r>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	f47f a9df 	bne.w	8004674 <_svfprintf_r+0x1f4>
 80052b6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80052b8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80052bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80052be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052c0:	4432      	add	r2, r6
 80052c2:	4617      	mov	r7, r2
 80052c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052c6:	4293      	cmp	r3, r2
 80052c8:	db47      	blt.n	800535a <_svfprintf_r+0xeda>
 80052ca:	9a07      	ldr	r2, [sp, #28]
 80052cc:	07d5      	lsls	r5, r2, #31
 80052ce:	d444      	bmi.n	800535a <_svfprintf_r+0xeda>
 80052d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80052d2:	440e      	add	r6, r1
 80052d4:	1bf5      	subs	r5, r6, r7
 80052d6:	1acb      	subs	r3, r1, r3
 80052d8:	429d      	cmp	r5, r3
 80052da:	bfa8      	it	ge
 80052dc:	461d      	movge	r5, r3
 80052de:	2d00      	cmp	r5, #0
 80052e0:	462e      	mov	r6, r5
 80052e2:	dd0d      	ble.n	8005300 <_svfprintf_r+0xe80>
 80052e4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80052e6:	f8c9 7000 	str.w	r7, [r9]
 80052ea:	3201      	adds	r2, #1
 80052ec:	442c      	add	r4, r5
 80052ee:	2a07      	cmp	r2, #7
 80052f0:	9429      	str	r4, [sp, #164]	; 0xa4
 80052f2:	f8c9 5004 	str.w	r5, [r9, #4]
 80052f6:	9228      	str	r2, [sp, #160]	; 0xa0
 80052f8:	f300 830a 	bgt.w	8005910 <_svfprintf_r+0x1490>
 80052fc:	f109 0908 	add.w	r9, r9, #8
 8005300:	2e00      	cmp	r6, #0
 8005302:	bfac      	ite	ge
 8005304:	1b9d      	subge	r5, r3, r6
 8005306:	461d      	movlt	r5, r3
 8005308:	2d00      	cmp	r5, #0
 800530a:	f77f ab4f 	ble.w	80049ac <_svfprintf_r+0x52c>
 800530e:	4abb      	ldr	r2, [pc, #748]	; (80055fc <_svfprintf_r+0x117c>)
 8005310:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005312:	920f      	str	r2, [sp, #60]	; 0x3c
 8005314:	2d10      	cmp	r5, #16
 8005316:	dd9d      	ble.n	8005254 <_svfprintf_r+0xdd4>
 8005318:	2610      	movs	r6, #16
 800531a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800531c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8005320:	e004      	b.n	800532c <_svfprintf_r+0xeac>
 8005322:	f109 0908 	add.w	r9, r9, #8
 8005326:	3d10      	subs	r5, #16
 8005328:	2d10      	cmp	r5, #16
 800532a:	dd93      	ble.n	8005254 <_svfprintf_r+0xdd4>
 800532c:	3301      	adds	r3, #1
 800532e:	3410      	adds	r4, #16
 8005330:	2b07      	cmp	r3, #7
 8005332:	9429      	str	r4, [sp, #164]	; 0xa4
 8005334:	9328      	str	r3, [sp, #160]	; 0xa0
 8005336:	f8c9 a000 	str.w	sl, [r9]
 800533a:	f8c9 6004 	str.w	r6, [r9, #4]
 800533e:	ddf0      	ble.n	8005322 <_svfprintf_r+0xea2>
 8005340:	aa27      	add	r2, sp, #156	; 0x9c
 8005342:	4659      	mov	r1, fp
 8005344:	4638      	mov	r0, r7
 8005346:	f004 fdb1 	bl	8009eac <__ssprint_r>
 800534a:	2800      	cmp	r0, #0
 800534c:	f47f a992 	bne.w	8004674 <_svfprintf_r+0x1f4>
 8005350:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005352:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005354:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005358:	e7e5      	b.n	8005326 <_svfprintf_r+0xea6>
 800535a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800535c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800535e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005360:	f8c9 1000 	str.w	r1, [r9]
 8005364:	3201      	adds	r2, #1
 8005366:	4404      	add	r4, r0
 8005368:	2a07      	cmp	r2, #7
 800536a:	9429      	str	r4, [sp, #164]	; 0xa4
 800536c:	f8c9 0004 	str.w	r0, [r9, #4]
 8005370:	9228      	str	r2, [sp, #160]	; 0xa0
 8005372:	f300 82b9 	bgt.w	80058e8 <_svfprintf_r+0x1468>
 8005376:	f109 0908 	add.w	r9, r9, #8
 800537a:	e7a9      	b.n	80052d0 <_svfprintf_r+0xe50>
 800537c:	9b07      	ldr	r3, [sp, #28]
 800537e:	07d8      	lsls	r0, r3, #31
 8005380:	f53f adf2 	bmi.w	8004f68 <_svfprintf_r+0xae8>
 8005384:	3501      	adds	r5, #1
 8005386:	3401      	adds	r4, #1
 8005388:	2301      	movs	r3, #1
 800538a:	2d07      	cmp	r5, #7
 800538c:	9429      	str	r4, [sp, #164]	; 0xa4
 800538e:	9528      	str	r5, [sp, #160]	; 0xa0
 8005390:	f8c9 6000 	str.w	r6, [r9]
 8005394:	f8c9 3004 	str.w	r3, [r9, #4]
 8005398:	f77f ae1a 	ble.w	8004fd0 <_svfprintf_r+0xb50>
 800539c:	e70d      	b.n	80051ba <_svfprintf_r+0xd3a>
 800539e:	aa27      	add	r2, sp, #156	; 0x9c
 80053a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80053a4:	f004 fd82 	bl	8009eac <__ssprint_r>
 80053a8:	2800      	cmp	r0, #0
 80053aa:	f47f a963 	bne.w	8004674 <_svfprintf_r+0x1f4>
 80053ae:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80053b0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80053b2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80053b6:	e5e5      	b.n	8004f84 <_svfprintf_r+0xb04>
 80053b8:	aa27      	add	r2, sp, #156	; 0x9c
 80053ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80053be:	f004 fd75 	bl	8009eac <__ssprint_r>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	f47f a956 	bne.w	8004674 <_svfprintf_r+0x1f4>
 80053c8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80053ca:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80053cc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80053d0:	e5e7      	b.n	8004fa2 <_svfprintf_r+0xb22>
 80053d2:	aa27      	add	r2, sp, #156	; 0x9c
 80053d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80053d8:	f004 fd68 	bl	8009eac <__ssprint_r>
 80053dc:	2800      	cmp	r0, #0
 80053de:	f47f a949 	bne.w	8004674 <_svfprintf_r+0x1f4>
 80053e2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80053e4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80053e8:	f7ff ba94 	b.w	8004914 <_svfprintf_r+0x494>
 80053ec:	9907      	ldr	r1, [sp, #28]
 80053ee:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80053f2:	f000 80bb 	beq.w	800556c <_svfprintf_r+0x10ec>
 80053f6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80053f8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80053fc:	4603      	mov	r3, r0
 80053fe:	f1bb 0f00 	cmp.w	fp, #0
 8005402:	f103 0304 	add.w	r3, r3, #4
 8005406:	8804      	ldrh	r4, [r0, #0]
 8005408:	f04f 0500 	mov.w	r5, #0
 800540c:	f2c0 81c5 	blt.w	800579a <_svfprintf_r+0x131a>
 8005410:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005414:	9107      	str	r1, [sp, #28]
 8005416:	ea54 0105 	orrs.w	r1, r4, r5
 800541a:	930e      	str	r3, [sp, #56]	; 0x38
 800541c:	f43f acda 	beq.w	8004dd4 <_svfprintf_r+0x954>
 8005420:	4617      	mov	r7, r2
 8005422:	f7ff b953 	b.w	80046cc <_svfprintf_r+0x24c>
 8005426:	9b07      	ldr	r3, [sp, #28]
 8005428:	06df      	lsls	r7, r3, #27
 800542a:	d40b      	bmi.n	8005444 <_svfprintf_r+0xfc4>
 800542c:	9b07      	ldr	r3, [sp, #28]
 800542e:	065e      	lsls	r6, r3, #25
 8005430:	d508      	bpl.n	8005444 <_svfprintf_r+0xfc4>
 8005432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005434:	6813      	ldr	r3, [r2, #0]
 8005436:	3204      	adds	r2, #4
 8005438:	920e      	str	r2, [sp, #56]	; 0x38
 800543a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800543e:	801a      	strh	r2, [r3, #0]
 8005440:	f7ff b845 	b.w	80044ce <_svfprintf_r+0x4e>
 8005444:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005446:	6813      	ldr	r3, [r2, #0]
 8005448:	3204      	adds	r2, #4
 800544a:	920e      	str	r2, [sp, #56]	; 0x38
 800544c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	f7ff b83d 	b.w	80044ce <_svfprintf_r+0x4e>
 8005454:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	f7fe fd56 	bl	8003f0c <__aeabi_dcmpun>
 8005460:	2800      	cmp	r0, #0
 8005462:	f040 8305 	bne.w	8005a70 <_svfprintf_r+0x15f0>
 8005466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005468:	f1bb 3fff 	cmp.w	fp, #4294967295
 800546c:	f023 0720 	bic.w	r7, r3, #32
 8005470:	f000 826c 	beq.w	800594c <_svfprintf_r+0x14cc>
 8005474:	2f47      	cmp	r7, #71	; 0x47
 8005476:	f000 8187 	beq.w	8005788 <_svfprintf_r+0x1308>
 800547a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800547c:	9a07      	ldr	r2, [sp, #28]
 800547e:	2b00      	cmp	r3, #0
 8005480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005484:	920f      	str	r2, [sp, #60]	; 0x3c
 8005486:	f2c0 8280 	blt.w	800598a <_svfprintf_r+0x150a>
 800548a:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 800548e:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8005492:	2300      	movs	r3, #0
 8005494:	9308      	str	r3, [sp, #32]
 8005496:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005498:	2b66      	cmp	r3, #102	; 0x66
 800549a:	f000 825a 	beq.w	8005952 <_svfprintf_r+0x14d2>
 800549e:	2b46      	cmp	r3, #70	; 0x46
 80054a0:	f000 8147 	beq.w	8005732 <_svfprintf_r+0x12b2>
 80054a4:	2f45      	cmp	r7, #69	; 0x45
 80054a6:	bf0c      	ite	eq
 80054a8:	f10b 0501 	addeq.w	r5, fp, #1
 80054ac:	465d      	movne	r5, fp
 80054ae:	a825      	add	r0, sp, #148	; 0x94
 80054b0:	a922      	add	r1, sp, #136	; 0x88
 80054b2:	aa21      	add	r2, sp, #132	; 0x84
 80054b4:	2302      	movs	r3, #2
 80054b6:	9004      	str	r0, [sp, #16]
 80054b8:	9202      	str	r2, [sp, #8]
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	9501      	str	r5, [sp, #4]
 80054be:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80054c2:	9103      	str	r1, [sp, #12]
 80054c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80054c6:	f002 f847 	bl	8007558 <_dtoa_r>
 80054ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054cc:	2b67      	cmp	r3, #103	; 0x67
 80054ce:	4606      	mov	r6, r0
 80054d0:	f040 8271 	bne.w	80059b6 <_svfprintf_r+0x1536>
 80054d4:	9b07      	ldr	r3, [sp, #28]
 80054d6:	07da      	lsls	r2, r3, #31
 80054d8:	f140 82bf 	bpl.w	8005a5a <_svfprintf_r+0x15da>
 80054dc:	1974      	adds	r4, r6, r5
 80054de:	2200      	movs	r2, #0
 80054e0:	2300      	movs	r3, #0
 80054e2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80054e6:	f7fe fcdf 	bl	8003ea8 <__aeabi_dcmpeq>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	f040 8190 	bne.w	8005810 <_svfprintf_r+0x1390>
 80054f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80054f2:	429c      	cmp	r4, r3
 80054f4:	d906      	bls.n	8005504 <_svfprintf_r+0x1084>
 80054f6:	2130      	movs	r1, #48	; 0x30
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	9225      	str	r2, [sp, #148]	; 0x94
 80054fc:	7019      	strb	r1, [r3, #0]
 80054fe:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005500:	429c      	cmp	r4, r3
 8005502:	d8f9      	bhi.n	80054f8 <_svfprintf_r+0x1078>
 8005504:	1b9b      	subs	r3, r3, r6
 8005506:	2f47      	cmp	r7, #71	; 0x47
 8005508:	9312      	str	r3, [sp, #72]	; 0x48
 800550a:	f000 817a 	beq.w	8005802 <_svfprintf_r+0x1382>
 800550e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005510:	2b65      	cmp	r3, #101	; 0x65
 8005512:	f340 825f 	ble.w	80059d4 <_svfprintf_r+0x1554>
 8005516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005518:	2b66      	cmp	r3, #102	; 0x66
 800551a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800551c:	9313      	str	r3, [sp, #76]	; 0x4c
 800551e:	f000 8266 	beq.w	80059ee <_svfprintf_r+0x156e>
 8005522:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005524:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005526:	428a      	cmp	r2, r1
 8005528:	f2c0 8238 	blt.w	800599c <_svfprintf_r+0x151c>
 800552c:	9b07      	ldr	r3, [sp, #28]
 800552e:	07d9      	lsls	r1, r3, #31
 8005530:	f100 8295 	bmi.w	8005a5e <_svfprintf_r+0x15de>
 8005534:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005538:	920d      	str	r2, [sp, #52]	; 0x34
 800553a:	2267      	movs	r2, #103	; 0x67
 800553c:	9211      	str	r2, [sp, #68]	; 0x44
 800553e:	9a08      	ldr	r2, [sp, #32]
 8005540:	2a00      	cmp	r2, #0
 8005542:	f040 8132 	bne.w	80057aa <_svfprintf_r+0x132a>
 8005546:	9308      	str	r3, [sp, #32]
 8005548:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800554a:	9307      	str	r3, [sp, #28]
 800554c:	4693      	mov	fp, r2
 800554e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005552:	f7ff b967 	b.w	8004824 <_svfprintf_r+0x3a4>
 8005556:	f027 0707 	bic.w	r7, r7, #7
 800555a:	ed97 7b00 	vldr	d7, [r7]
 800555e:	f107 0308 	add.w	r3, r7, #8
 8005562:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005566:	930e      	str	r3, [sp, #56]	; 0x38
 8005568:	f7ff ba88 	b.w	8004a7c <_svfprintf_r+0x5fc>
 800556c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800556e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005572:	f1bb 0f00 	cmp.w	fp, #0
 8005576:	680c      	ldr	r4, [r1, #0]
 8005578:	f101 0704 	add.w	r7, r1, #4
 800557c:	f04f 0500 	mov.w	r5, #0
 8005580:	f280 80ac 	bge.w	80056dc <_svfprintf_r+0x125c>
 8005584:	970e      	str	r7, [sp, #56]	; 0x38
 8005586:	2700      	movs	r7, #0
 8005588:	f7ff b8a0 	b.w	80046cc <_svfprintf_r+0x24c>
 800558c:	9907      	ldr	r1, [sp, #28]
 800558e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8005592:	f43f ae4c 	beq.w	800522e <_svfprintf_r+0xdae>
 8005596:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005598:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800559c:	4603      	mov	r3, r0
 800559e:	f1bb 0f00 	cmp.w	fp, #0
 80055a2:	f103 0304 	add.w	r3, r3, #4
 80055a6:	8804      	ldrh	r4, [r0, #0]
 80055a8:	f04f 0500 	mov.w	r5, #0
 80055ac:	f2c0 80f2 	blt.w	8005794 <_svfprintf_r+0x1314>
 80055b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80055b4:	9107      	str	r1, [sp, #28]
 80055b6:	ea54 0105 	orrs.w	r1, r4, r5
 80055ba:	930e      	str	r3, [sp, #56]	; 0x38
 80055bc:	4617      	mov	r7, r2
 80055be:	f47f a90d 	bne.w	80047dc <_svfprintf_r+0x35c>
 80055c2:	f7ff baf3 	b.w	8004bac <_svfprintf_r+0x72c>
 80055c6:	9b07      	ldr	r3, [sp, #28]
 80055c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80055ce:	4613      	mov	r3, r2
 80055d0:	f000 80e5 	beq.w	800579e <_svfprintf_r+0x131e>
 80055d4:	3304      	adds	r3, #4
 80055d6:	8814      	ldrh	r4, [r2, #0]
 80055d8:	930e      	str	r3, [sp, #56]	; 0x38
 80055da:	2500      	movs	r5, #0
 80055dc:	f7ff bb03 	b.w	8004be6 <_svfprintf_r+0x766>
 80055e0:	4614      	mov	r4, r2
 80055e2:	3301      	adds	r3, #1
 80055e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055e6:	9328      	str	r3, [sp, #160]	; 0xa0
 80055e8:	442c      	add	r4, r5
 80055ea:	2b07      	cmp	r3, #7
 80055ec:	9429      	str	r4, [sp, #164]	; 0xa4
 80055ee:	e889 0024 	stmia.w	r9, {r2, r5}
 80055f2:	f73f ae58 	bgt.w	80052a6 <_svfprintf_r+0xe26>
 80055f6:	f109 0908 	add.w	r9, r9, #8
 80055fa:	e65f      	b.n	80052bc <_svfprintf_r+0xe3c>
 80055fc:	0800a914 	.word	0x0800a914
 8005600:	2700      	movs	r7, #0
 8005602:	45bb      	cmp	fp, r7
 8005604:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005608:	f6ff abf6 	blt.w	8004df8 <_svfprintf_r+0x978>
 800560c:	9b07      	ldr	r3, [sp, #28]
 800560e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005612:	9307      	str	r3, [sp, #28]
 8005614:	f7ff bbbe 	b.w	8004d94 <_svfprintf_r+0x914>
 8005618:	aa27      	add	r2, sp, #156	; 0x9c
 800561a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800561c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800561e:	f004 fc45 	bl	8009eac <__ssprint_r>
 8005622:	2800      	cmp	r0, #0
 8005624:	f47f a826 	bne.w	8004674 <_svfprintf_r+0x1f4>
 8005628:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800562a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800562e:	e405      	b.n	8004e3c <_svfprintf_r+0x9bc>
 8005630:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005632:	f7ff bbda 	b.w	8004dea <_svfprintf_r+0x96a>
 8005636:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005638:	4ab2      	ldr	r2, [pc, #712]	; (8005904 <_svfprintf_r+0x1484>)
 800563a:	f8c9 2000 	str.w	r2, [r9]
 800563e:	3301      	adds	r3, #1
 8005640:	3401      	adds	r4, #1
 8005642:	2201      	movs	r2, #1
 8005644:	2b07      	cmp	r3, #7
 8005646:	9429      	str	r4, [sp, #164]	; 0xa4
 8005648:	9328      	str	r3, [sp, #160]	; 0xa0
 800564a:	f8c9 2004 	str.w	r2, [r9, #4]
 800564e:	f300 808e 	bgt.w	800576e <_svfprintf_r+0x12ee>
 8005652:	f109 0908 	add.w	r9, r9, #8
 8005656:	b92d      	cbnz	r5, 8005664 <_svfprintf_r+0x11e4>
 8005658:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800565a:	b91b      	cbnz	r3, 8005664 <_svfprintf_r+0x11e4>
 800565c:	9b07      	ldr	r3, [sp, #28]
 800565e:	07df      	lsls	r7, r3, #31
 8005660:	f57f a9a4 	bpl.w	80049ac <_svfprintf_r+0x52c>
 8005664:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005666:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005668:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800566a:	f8c9 2000 	str.w	r2, [r9]
 800566e:	3301      	adds	r3, #1
 8005670:	440c      	add	r4, r1
 8005672:	2b07      	cmp	r3, #7
 8005674:	9429      	str	r4, [sp, #164]	; 0xa4
 8005676:	f8c9 1004 	str.w	r1, [r9, #4]
 800567a:	9328      	str	r3, [sp, #160]	; 0xa0
 800567c:	f300 81d3 	bgt.w	8005a26 <_svfprintf_r+0x15a6>
 8005680:	f109 0908 	add.w	r9, r9, #8
 8005684:	426d      	negs	r5, r5
 8005686:	2d00      	cmp	r5, #0
 8005688:	f340 80ad 	ble.w	80057e6 <_svfprintf_r+0x1366>
 800568c:	4a9e      	ldr	r2, [pc, #632]	; (8005908 <_svfprintf_r+0x1488>)
 800568e:	920f      	str	r2, [sp, #60]	; 0x3c
 8005690:	2d10      	cmp	r5, #16
 8005692:	f340 80cc 	ble.w	800582e <_svfprintf_r+0x13ae>
 8005696:	4622      	mov	r2, r4
 8005698:	2710      	movs	r7, #16
 800569a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800569e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80056a0:	e005      	b.n	80056ae <_svfprintf_r+0x122e>
 80056a2:	f109 0908 	add.w	r9, r9, #8
 80056a6:	3d10      	subs	r5, #16
 80056a8:	2d10      	cmp	r5, #16
 80056aa:	f340 80bf 	ble.w	800582c <_svfprintf_r+0x13ac>
 80056ae:	3301      	adds	r3, #1
 80056b0:	3210      	adds	r2, #16
 80056b2:	2b07      	cmp	r3, #7
 80056b4:	9229      	str	r2, [sp, #164]	; 0xa4
 80056b6:	9328      	str	r3, [sp, #160]	; 0xa0
 80056b8:	f8c9 a000 	str.w	sl, [r9]
 80056bc:	f8c9 7004 	str.w	r7, [r9, #4]
 80056c0:	ddef      	ble.n	80056a2 <_svfprintf_r+0x1222>
 80056c2:	aa27      	add	r2, sp, #156	; 0x9c
 80056c4:	4621      	mov	r1, r4
 80056c6:	4658      	mov	r0, fp
 80056c8:	f004 fbf0 	bl	8009eac <__ssprint_r>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	f47e afd1 	bne.w	8004674 <_svfprintf_r+0x1f4>
 80056d2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80056d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80056d6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80056da:	e7e4      	b.n	80056a6 <_svfprintf_r+0x1226>
 80056dc:	9a07      	ldr	r2, [sp, #28]
 80056de:	f7ff ba37 	b.w	8004b50 <_svfprintf_r+0x6d0>
 80056e2:	9a07      	ldr	r2, [sp, #28]
 80056e4:	e589      	b.n	80051fa <_svfprintf_r+0xd7a>
 80056e6:	9b07      	ldr	r3, [sp, #28]
 80056e8:	f043 0320 	orr.w	r3, r3, #32
 80056ec:	9307      	str	r3, [sp, #28]
 80056ee:	f108 0801 	add.w	r8, r8, #1
 80056f2:	f898 3000 	ldrb.w	r3, [r8]
 80056f6:	f7fe bf1d 	b.w	8004534 <_svfprintf_r+0xb4>
 80056fa:	aa27      	add	r2, sp, #156	; 0x9c
 80056fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005700:	f004 fbd4 	bl	8009eac <__ssprint_r>
 8005704:	2800      	cmp	r0, #0
 8005706:	f47e afb5 	bne.w	8004674 <_svfprintf_r+0x1f4>
 800570a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800570c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005710:	f7ff bbac 	b.w	8004e6c <_svfprintf_r+0x9ec>
 8005714:	2140      	movs	r1, #64	; 0x40
 8005716:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005718:	f003 fae8 	bl	8008cec <_malloc_r>
 800571c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800571e:	6010      	str	r0, [r2, #0]
 8005720:	6110      	str	r0, [r2, #16]
 8005722:	2800      	cmp	r0, #0
 8005724:	f000 81f9 	beq.w	8005b1a <_svfprintf_r+0x169a>
 8005728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800572a:	2340      	movs	r3, #64	; 0x40
 800572c:	6153      	str	r3, [r2, #20]
 800572e:	f7fe bebe 	b.w	80044ae <_svfprintf_r+0x2e>
 8005732:	a825      	add	r0, sp, #148	; 0x94
 8005734:	a922      	add	r1, sp, #136	; 0x88
 8005736:	aa21      	add	r2, sp, #132	; 0x84
 8005738:	2303      	movs	r3, #3
 800573a:	9004      	str	r0, [sp, #16]
 800573c:	9202      	str	r2, [sp, #8]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	f8cd b004 	str.w	fp, [sp, #4]
 8005744:	9103      	str	r1, [sp, #12]
 8005746:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800574a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800574c:	f001 ff04 	bl	8007558 <_dtoa_r>
 8005750:	465d      	mov	r5, fp
 8005752:	4606      	mov	r6, r0
 8005754:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005756:	2b46      	cmp	r3, #70	; 0x46
 8005758:	eb06 0405 	add.w	r4, r6, r5
 800575c:	f47f aebf 	bne.w	80054de <_svfprintf_r+0x105e>
 8005760:	7833      	ldrb	r3, [r6, #0]
 8005762:	2b30      	cmp	r3, #48	; 0x30
 8005764:	f000 818a 	beq.w	8005a7c <_svfprintf_r+0x15fc>
 8005768:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800576a:	442c      	add	r4, r5
 800576c:	e6b7      	b.n	80054de <_svfprintf_r+0x105e>
 800576e:	aa27      	add	r2, sp, #156	; 0x9c
 8005770:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005772:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005774:	f004 fb9a 	bl	8009eac <__ssprint_r>
 8005778:	2800      	cmp	r0, #0
 800577a:	f47e af7b 	bne.w	8004674 <_svfprintf_r+0x1f4>
 800577e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005780:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005782:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005786:	e766      	b.n	8005656 <_svfprintf_r+0x11d6>
 8005788:	f1bb 0f00 	cmp.w	fp, #0
 800578c:	bf08      	it	eq
 800578e:	f04f 0b01 	moveq.w	fp, #1
 8005792:	e672      	b.n	800547a <_svfprintf_r+0xffa>
 8005794:	930e      	str	r3, [sp, #56]	; 0x38
 8005796:	4617      	mov	r7, r2
 8005798:	e557      	b.n	800524a <_svfprintf_r+0xdca>
 800579a:	930e      	str	r3, [sp, #56]	; 0x38
 800579c:	e6f3      	b.n	8005586 <_svfprintf_r+0x1106>
 800579e:	3304      	adds	r3, #4
 80057a0:	6814      	ldr	r4, [r2, #0]
 80057a2:	930e      	str	r3, [sp, #56]	; 0x38
 80057a4:	2500      	movs	r5, #0
 80057a6:	f7ff ba1e 	b.w	8004be6 <_svfprintf_r+0x766>
 80057aa:	272d      	movs	r7, #45	; 0x2d
 80057ac:	9308      	str	r3, [sp, #32]
 80057ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057b0:	9307      	str	r3, [sp, #28]
 80057b2:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80057b6:	f04f 0b00 	mov.w	fp, #0
 80057ba:	f7ff b834 	b.w	8004826 <_svfprintf_r+0x3a6>
 80057be:	4630      	mov	r0, r6
 80057c0:	f7fe fd9e 	bl	8004300 <strlen>
 80057c4:	46a3      	mov	fp, r4
 80057c6:	4603      	mov	r3, r0
 80057c8:	900d      	str	r0, [sp, #52]	; 0x34
 80057ca:	f7ff ba9d 	b.w	8004d08 <_svfprintf_r+0x888>
 80057ce:	aa27      	add	r2, sp, #156	; 0x9c
 80057d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80057d4:	f004 fb6a 	bl	8009eac <__ssprint_r>
 80057d8:	2800      	cmp	r0, #0
 80057da:	f47e af4b 	bne.w	8004674 <_svfprintf_r+0x1f4>
 80057de:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80057e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80057e2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80057e6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80057e8:	f8c9 6000 	str.w	r6, [r9]
 80057ec:	3301      	adds	r3, #1
 80057ee:	440c      	add	r4, r1
 80057f0:	2b07      	cmp	r3, #7
 80057f2:	9429      	str	r4, [sp, #164]	; 0xa4
 80057f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80057f6:	f8c9 1004 	str.w	r1, [r9, #4]
 80057fa:	f77f a8d5 	ble.w	80049a8 <_svfprintf_r+0x528>
 80057fe:	f7ff bbf6 	b.w	8004fee <_svfprintf_r+0xb6e>
 8005802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005804:	1cdd      	adds	r5, r3, #3
 8005806:	db1e      	blt.n	8005846 <_svfprintf_r+0x13c6>
 8005808:	459b      	cmp	fp, r3
 800580a:	db1c      	blt.n	8005846 <_svfprintf_r+0x13c6>
 800580c:	9313      	str	r3, [sp, #76]	; 0x4c
 800580e:	e688      	b.n	8005522 <_svfprintf_r+0x10a2>
 8005810:	4623      	mov	r3, r4
 8005812:	e677      	b.n	8005504 <_svfprintf_r+0x1084>
 8005814:	aa27      	add	r2, sp, #156	; 0x9c
 8005816:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005818:	980a      	ldr	r0, [sp, #40]	; 0x28
 800581a:	f004 fb47 	bl	8009eac <__ssprint_r>
 800581e:	2800      	cmp	r0, #0
 8005820:	f47e af28 	bne.w	8004674 <_svfprintf_r+0x1f4>
 8005824:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005826:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800582a:	e447      	b.n	80050bc <_svfprintf_r+0xc3c>
 800582c:	4614      	mov	r4, r2
 800582e:	3301      	adds	r3, #1
 8005830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005832:	9328      	str	r3, [sp, #160]	; 0xa0
 8005834:	442c      	add	r4, r5
 8005836:	2b07      	cmp	r3, #7
 8005838:	9429      	str	r4, [sp, #164]	; 0xa4
 800583a:	e889 0024 	stmia.w	r9, {r2, r5}
 800583e:	dcc6      	bgt.n	80057ce <_svfprintf_r+0x134e>
 8005840:	f109 0908 	add.w	r9, r9, #8
 8005844:	e7cf      	b.n	80057e6 <_svfprintf_r+0x1366>
 8005846:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005848:	3a02      	subs	r2, #2
 800584a:	9211      	str	r2, [sp, #68]	; 0x44
 800584c:	3b01      	subs	r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8005854:	9321      	str	r3, [sp, #132]	; 0x84
 8005856:	bfb8      	it	lt
 8005858:	425b      	neglt	r3, r3
 800585a:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 800585e:	bfb4      	ite	lt
 8005860:	222d      	movlt	r2, #45	; 0x2d
 8005862:	222b      	movge	r2, #43	; 0x2b
 8005864:	2b09      	cmp	r3, #9
 8005866:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 800586a:	f340 80ee 	ble.w	8005a4a <_svfprintf_r+0x15ca>
 800586e:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 8005872:	4604      	mov	r4, r0
 8005874:	4a25      	ldr	r2, [pc, #148]	; (800590c <_svfprintf_r+0x148c>)
 8005876:	fb82 2103 	smull	r2, r1, r2, r3
 800587a:	17da      	asrs	r2, r3, #31
 800587c:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8005880:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005884:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8005888:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800588c:	2a09      	cmp	r2, #9
 800588e:	4613      	mov	r3, r2
 8005890:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8005894:	dcee      	bgt.n	8005874 <_svfprintf_r+0x13f4>
 8005896:	4621      	mov	r1, r4
 8005898:	3330      	adds	r3, #48	; 0x30
 800589a:	b2da      	uxtb	r2, r3
 800589c:	f801 2d01 	strb.w	r2, [r1, #-1]!
 80058a0:	4288      	cmp	r0, r1
 80058a2:	f240 8137 	bls.w	8005b14 <_svfprintf_r+0x1694>
 80058a6:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 80058aa:	4623      	mov	r3, r4
 80058ac:	e001      	b.n	80058b2 <_svfprintf_r+0x1432>
 80058ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058b2:	f801 2b01 	strb.w	r2, [r1], #1
 80058b6:	4298      	cmp	r0, r3
 80058b8:	d1f9      	bne.n	80058ae <_svfprintf_r+0x142e>
 80058ba:	1c43      	adds	r3, r0, #1
 80058bc:	1b1b      	subs	r3, r3, r4
 80058be:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 80058c2:	4413      	add	r3, r2
 80058c4:	aa23      	add	r2, sp, #140	; 0x8c
 80058c6:	1a9b      	subs	r3, r3, r2
 80058c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058ca:	9319      	str	r3, [sp, #100]	; 0x64
 80058cc:	2a01      	cmp	r2, #1
 80058ce:	4413      	add	r3, r2
 80058d0:	930d      	str	r3, [sp, #52]	; 0x34
 80058d2:	f340 80ea 	ble.w	8005aaa <_svfprintf_r+0x162a>
 80058d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80058da:	4413      	add	r3, r2
 80058dc:	2200      	movs	r2, #0
 80058de:	930d      	str	r3, [sp, #52]	; 0x34
 80058e0:	9213      	str	r2, [sp, #76]	; 0x4c
 80058e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80058e6:	e62a      	b.n	800553e <_svfprintf_r+0x10be>
 80058e8:	aa27      	add	r2, sp, #156	; 0x9c
 80058ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80058ee:	f004 fadd 	bl	8009eac <__ssprint_r>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	f47e aebe 	bne.w	8004674 <_svfprintf_r+0x1f4>
 80058f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058fa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80058fc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005900:	e4e6      	b.n	80052d0 <_svfprintf_r+0xe50>
 8005902:	bf00      	nop
 8005904:	0800a964 	.word	0x0800a964
 8005908:	0800a914 	.word	0x0800a914
 800590c:	66666667 	.word	0x66666667
 8005910:	aa27      	add	r2, sp, #156	; 0x9c
 8005912:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005914:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005916:	f004 fac9 	bl	8009eac <__ssprint_r>
 800591a:	2800      	cmp	r0, #0
 800591c:	f47e aeaa 	bne.w	8004674 <_svfprintf_r+0x1f4>
 8005920:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005922:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005924:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800592c:	e4e8      	b.n	8005300 <_svfprintf_r+0xe80>
 800592e:	2d06      	cmp	r5, #6
 8005930:	462b      	mov	r3, r5
 8005932:	bf28      	it	cs
 8005934:	2306      	movcs	r3, #6
 8005936:	930d      	str	r3, [sp, #52]	; 0x34
 8005938:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800593c:	46b3      	mov	fp, r6
 800593e:	970e      	str	r7, [sp, #56]	; 0x38
 8005940:	9613      	str	r6, [sp, #76]	; 0x4c
 8005942:	4637      	mov	r7, r6
 8005944:	9308      	str	r3, [sp, #32]
 8005946:	4e88      	ldr	r6, [pc, #544]	; (8005b68 <_svfprintf_r+0x16e8>)
 8005948:	f7fe bf6c 	b.w	8004824 <_svfprintf_r+0x3a4>
 800594c:	f04f 0b06 	mov.w	fp, #6
 8005950:	e593      	b.n	800547a <_svfprintf_r+0xffa>
 8005952:	a825      	add	r0, sp, #148	; 0x94
 8005954:	a922      	add	r1, sp, #136	; 0x88
 8005956:	aa21      	add	r2, sp, #132	; 0x84
 8005958:	2303      	movs	r3, #3
 800595a:	9004      	str	r0, [sp, #16]
 800595c:	9202      	str	r2, [sp, #8]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	f8cd b004 	str.w	fp, [sp, #4]
 8005964:	9103      	str	r1, [sp, #12]
 8005966:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800596a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800596c:	f001 fdf4 	bl	8007558 <_dtoa_r>
 8005970:	465d      	mov	r5, fp
 8005972:	4606      	mov	r6, r0
 8005974:	eb00 040b 	add.w	r4, r0, fp
 8005978:	e6f2      	b.n	8005760 <_svfprintf_r+0x12e0>
 800597a:	272d      	movs	r7, #45	; 0x2d
 800597c:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005980:	f7ff b8a3 	b.w	8004aca <_svfprintf_r+0x64a>
 8005984:	9307      	str	r3, [sp, #28]
 8005986:	f7ff b94c 	b.w	8004c22 <_svfprintf_r+0x7a2>
 800598a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800598e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8005992:	931d      	str	r3, [sp, #116]	; 0x74
 8005994:	232d      	movs	r3, #45	; 0x2d
 8005996:	911c      	str	r1, [sp, #112]	; 0x70
 8005998:	9308      	str	r3, [sp, #32]
 800599a:	e57c      	b.n	8005496 <_svfprintf_r+0x1016>
 800599c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800599e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059a0:	4413      	add	r3, r2
 80059a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059a4:	930d      	str	r3, [sp, #52]	; 0x34
 80059a6:	2a00      	cmp	r2, #0
 80059a8:	f340 8089 	ble.w	8005abe <_svfprintf_r+0x163e>
 80059ac:	2267      	movs	r2, #103	; 0x67
 80059ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80059b2:	9211      	str	r2, [sp, #68]	; 0x44
 80059b4:	e5c3      	b.n	800553e <_svfprintf_r+0x10be>
 80059b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059b8:	2b47      	cmp	r3, #71	; 0x47
 80059ba:	f47f ad8f 	bne.w	80054dc <_svfprintf_r+0x105c>
 80059be:	9b07      	ldr	r3, [sp, #28]
 80059c0:	07db      	lsls	r3, r3, #31
 80059c2:	f53f aec7 	bmi.w	8005754 <_svfprintf_r+0x12d4>
 80059c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80059c8:	2f47      	cmp	r7, #71	; 0x47
 80059ca:	eba3 0306 	sub.w	r3, r3, r6
 80059ce:	9312      	str	r3, [sp, #72]	; 0x48
 80059d0:	f43f af17 	beq.w	8005802 <_svfprintf_r+0x1382>
 80059d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059d6:	e739      	b.n	800584c <_svfprintf_r+0x13cc>
 80059d8:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 80059dc:	970e      	str	r7, [sp, #56]	; 0x38
 80059de:	9308      	str	r3, [sp, #32]
 80059e0:	950d      	str	r5, [sp, #52]	; 0x34
 80059e2:	4683      	mov	fp, r0
 80059e4:	9013      	str	r0, [sp, #76]	; 0x4c
 80059e6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80059ea:	f7fe bf1b 	b.w	8004824 <_svfprintf_r+0x3a4>
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	dd6d      	ble.n	8005ace <_svfprintf_r+0x164e>
 80059f2:	f1bb 0f00 	cmp.w	fp, #0
 80059f6:	d14f      	bne.n	8005a98 <_svfprintf_r+0x1618>
 80059f8:	9a07      	ldr	r2, [sp, #28]
 80059fa:	07d4      	lsls	r4, r2, #31
 80059fc:	d44c      	bmi.n	8005a98 <_svfprintf_r+0x1618>
 80059fe:	461a      	mov	r2, r3
 8005a00:	920d      	str	r2, [sp, #52]	; 0x34
 8005a02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005a06:	e59a      	b.n	800553e <_svfprintf_r+0x10be>
 8005a08:	9b07      	ldr	r3, [sp, #28]
 8005a0a:	07db      	lsls	r3, r3, #31
 8005a0c:	465f      	mov	r7, fp
 8005a0e:	d505      	bpl.n	8005a1c <_svfprintf_r+0x159c>
 8005a10:	ae44      	add	r6, sp, #272	; 0x110
 8005a12:	2330      	movs	r3, #48	; 0x30
 8005a14:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8005a18:	f7fe befa 	b.w	8004810 <_svfprintf_r+0x390>
 8005a1c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8005a20:	ae34      	add	r6, sp, #208	; 0xd0
 8005a22:	f7fe bef8 	b.w	8004816 <_svfprintf_r+0x396>
 8005a26:	aa27      	add	r2, sp, #156	; 0x9c
 8005a28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a2c:	f004 fa3e 	bl	8009eac <__ssprint_r>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	f47e ae1f 	bne.w	8004674 <_svfprintf_r+0x1f4>
 8005a36:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005a38:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005a3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005a3c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005a40:	e620      	b.n	8005684 <_svfprintf_r+0x1204>
 8005a42:	46a0      	mov	r8, r4
 8005a44:	2500      	movs	r5, #0
 8005a46:	f7fe bd77 	b.w	8004538 <_svfprintf_r+0xb8>
 8005a4a:	3330      	adds	r3, #48	; 0x30
 8005a4c:	2230      	movs	r2, #48	; 0x30
 8005a4e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8005a52:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8005a56:	ab24      	add	r3, sp, #144	; 0x90
 8005a58:	e734      	b.n	80058c4 <_svfprintf_r+0x1444>
 8005a5a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005a5c:	e552      	b.n	8005504 <_svfprintf_r+0x1084>
 8005a5e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005a60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a62:	4413      	add	r3, r2
 8005a64:	2267      	movs	r2, #103	; 0x67
 8005a66:	930d      	str	r3, [sp, #52]	; 0x34
 8005a68:	9211      	str	r2, [sp, #68]	; 0x44
 8005a6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005a6e:	e566      	b.n	800553e <_svfprintf_r+0x10be>
 8005a70:	4e3e      	ldr	r6, [pc, #248]	; (8005b6c <_svfprintf_r+0x16ec>)
 8005a72:	4b3f      	ldr	r3, [pc, #252]	; (8005b70 <_svfprintf_r+0x16f0>)
 8005a74:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005a78:	f7ff b829 	b.w	8004ace <_svfprintf_r+0x64e>
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8005a84:	f7fe fa10 	bl	8003ea8 <__aeabi_dcmpeq>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	f47f ae6d 	bne.w	8005768 <_svfprintf_r+0x12e8>
 8005a8e:	f1c5 0501 	rsb	r5, r5, #1
 8005a92:	9521      	str	r5, [sp, #132]	; 0x84
 8005a94:	442c      	add	r4, r5
 8005a96:	e522      	b.n	80054de <_svfprintf_r+0x105e>
 8005a98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005a9c:	189d      	adds	r5, r3, r2
 8005a9e:	eb05 030b 	add.w	r3, r5, fp
 8005aa2:	930d      	str	r3, [sp, #52]	; 0x34
 8005aa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005aa8:	e549      	b.n	800553e <_svfprintf_r+0x10be>
 8005aaa:	9b07      	ldr	r3, [sp, #28]
 8005aac:	f013 0301 	ands.w	r3, r3, #1
 8005ab0:	f47f af11 	bne.w	80058d6 <_svfprintf_r+0x1456>
 8005ab4:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ab8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005abc:	e53f      	b.n	800553e <_svfprintf_r+0x10be>
 8005abe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ac0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ac2:	f1c3 0301 	rsb	r3, r3, #1
 8005ac6:	441a      	add	r2, r3
 8005ac8:	4613      	mov	r3, r2
 8005aca:	920d      	str	r2, [sp, #52]	; 0x34
 8005acc:	e76e      	b.n	80059ac <_svfprintf_r+0x152c>
 8005ace:	f1bb 0f00 	cmp.w	fp, #0
 8005ad2:	d102      	bne.n	8005ada <_svfprintf_r+0x165a>
 8005ad4:	9b07      	ldr	r3, [sp, #28]
 8005ad6:	07d8      	lsls	r0, r3, #31
 8005ad8:	d507      	bpl.n	8005aea <_svfprintf_r+0x166a>
 8005ada:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005adc:	1c5d      	adds	r5, r3, #1
 8005ade:	eb05 030b 	add.w	r3, r5, fp
 8005ae2:	930d      	str	r3, [sp, #52]	; 0x34
 8005ae4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005ae8:	e529      	b.n	800553e <_svfprintf_r+0x10be>
 8005aea:	2301      	movs	r3, #1
 8005aec:	930d      	str	r3, [sp, #52]	; 0x34
 8005aee:	e526      	b.n	800553e <_svfprintf_r+0x10be>
 8005af0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005af2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005af6:	6805      	ldr	r5, [r0, #0]
 8005af8:	3004      	adds	r0, #4
 8005afa:	2d00      	cmp	r5, #0
 8005afc:	900e      	str	r0, [sp, #56]	; 0x38
 8005afe:	46a0      	mov	r8, r4
 8005b00:	f6be ad18 	bge.w	8004534 <_svfprintf_r+0xb4>
 8005b04:	f04f 35ff 	mov.w	r5, #4294967295
 8005b08:	f7fe bd14 	b.w	8004534 <_svfprintf_r+0xb4>
 8005b0c:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005b10:	f7fe bdc1 	b.w	8004696 <_svfprintf_r+0x216>
 8005b14:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8005b18:	e6d4      	b.n	80058c4 <_svfprintf_r+0x1444>
 8005b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b1c:	230c      	movs	r3, #12
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	f04f 30ff 	mov.w	r0, #4294967295
 8005b24:	f7fe bdaf 	b.w	8004686 <_svfprintf_r+0x206>
 8005b28:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005b2c:	f7fe be30 	b.w	8004790 <_svfprintf_r+0x310>
 8005b30:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005b34:	f7fe bf92 	b.w	8004a5c <_svfprintf_r+0x5dc>
 8005b38:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005b3c:	f7ff b845 	b.w	8004bca <_svfprintf_r+0x74a>
 8005b40:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005b44:	f7ff b813 	b.w	8004b6e <_svfprintf_r+0x6ee>
 8005b48:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005b4c:	f7fe bfe5 	b.w	8004b1a <_svfprintf_r+0x69a>
 8005b50:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005b54:	f7ff b92d 	b.w	8004db2 <_svfprintf_r+0x932>
 8005b58:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005b5c:	f7ff b908 	b.w	8004d70 <_svfprintf_r+0x8f0>
 8005b60:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005b64:	f7ff b8e6 	b.w	8004d34 <_svfprintf_r+0x8b4>
 8005b68:	0800a95c 	.word	0x0800a95c
 8005b6c:	0800a930 	.word	0x0800a930
 8005b70:	0800a92c 	.word	0x0800a92c
 8005b74:	00000000 	.word	0x00000000

08005b78 <_vfprintf_r>:
 8005b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7c:	b0c5      	sub	sp, #276	; 0x114
 8005b7e:	461c      	mov	r4, r3
 8005b80:	9108      	str	r1, [sp, #32]
 8005b82:	4616      	mov	r6, r2
 8005b84:	4605      	mov	r5, r0
 8005b86:	900a      	str	r0, [sp, #40]	; 0x28
 8005b88:	f003 f82e 	bl	8008be8 <_localeconv_r>
 8005b8c:	6803      	ldr	r3, [r0, #0]
 8005b8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fe fbb5 	bl	8004300 <strlen>
 8005b96:	940e      	str	r4, [sp, #56]	; 0x38
 8005b98:	9016      	str	r0, [sp, #88]	; 0x58
 8005b9a:	b11d      	cbz	r5, 8005ba4 <_vfprintf_r+0x2c>
 8005b9c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 8123 	beq.w	8005dea <_vfprintf_r+0x272>
 8005ba4:	9808      	ldr	r0, [sp, #32]
 8005ba6:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8005baa:	b293      	uxth	r3, r2
 8005bac:	0499      	lsls	r1, r3, #18
 8005bae:	d407      	bmi.n	8005bc0 <_vfprintf_r+0x48>
 8005bb0:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8005bb2:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8005bb6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8005bba:	8183      	strh	r3, [r0, #12]
 8005bbc:	6641      	str	r1, [r0, #100]	; 0x64
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	071a      	lsls	r2, r3, #28
 8005bc2:	f140 80dd 	bpl.w	8005d80 <_vfprintf_r+0x208>
 8005bc6:	9a08      	ldr	r2, [sp, #32]
 8005bc8:	6912      	ldr	r2, [r2, #16]
 8005bca:	2a00      	cmp	r2, #0
 8005bcc:	f000 80d8 	beq.w	8005d80 <_vfprintf_r+0x208>
 8005bd0:	f003 031a 	and.w	r3, r3, #26
 8005bd4:	2b0a      	cmp	r3, #10
 8005bd6:	f000 80e1 	beq.w	8005d9c <_vfprintf_r+0x224>
 8005bda:	ed9f 7b87 	vldr	d7, [pc, #540]	; 8005df8 <_vfprintf_r+0x280>
 8005bde:	2300      	movs	r3, #0
 8005be0:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005be4:	9312      	str	r3, [sp, #72]	; 0x48
 8005be6:	9329      	str	r3, [sp, #164]	; 0xa4
 8005be8:	9328      	str	r3, [sp, #160]	; 0xa0
 8005bea:	9319      	str	r3, [sp, #100]	; 0x64
 8005bec:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bee:	f8df a214 	ldr.w	sl, [pc, #532]	; 8005e04 <_vfprintf_r+0x28c>
 8005bf2:	ab34      	add	r3, sp, #208	; 0xd0
 8005bf4:	9327      	str	r3, [sp, #156]	; 0x9c
 8005bf6:	4699      	mov	r9, r3
 8005bf8:	46b0      	mov	r8, r6
 8005bfa:	f898 3000 	ldrb.w	r3, [r8]
 8005bfe:	4644      	mov	r4, r8
 8005c00:	b1eb      	cbz	r3, 8005c3e <_vfprintf_r+0xc6>
 8005c02:	2b25      	cmp	r3, #37	; 0x25
 8005c04:	d102      	bne.n	8005c0c <_vfprintf_r+0x94>
 8005c06:	e01a      	b.n	8005c3e <_vfprintf_r+0xc6>
 8005c08:	2b25      	cmp	r3, #37	; 0x25
 8005c0a:	d003      	beq.n	8005c14 <_vfprintf_r+0x9c>
 8005c0c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f9      	bne.n	8005c08 <_vfprintf_r+0x90>
 8005c14:	ebc8 0504 	rsb	r5, r8, r4
 8005c18:	b18d      	cbz	r5, 8005c3e <_vfprintf_r+0xc6>
 8005c1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005c1c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005c1e:	f8c9 8000 	str.w	r8, [r9]
 8005c22:	3301      	adds	r3, #1
 8005c24:	442a      	add	r2, r5
 8005c26:	2b07      	cmp	r3, #7
 8005c28:	f8c9 5004 	str.w	r5, [r9, #4]
 8005c2c:	9229      	str	r2, [sp, #164]	; 0xa4
 8005c2e:	9328      	str	r3, [sp, #160]	; 0xa0
 8005c30:	f300 80c2 	bgt.w	8005db8 <_vfprintf_r+0x240>
 8005c34:	f109 0908 	add.w	r9, r9, #8
 8005c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c3a:	442b      	add	r3, r5
 8005c3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c3e:	7823      	ldrb	r3, [r4, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 80c2 	beq.w	8005dca <_vfprintf_r+0x252>
 8005c46:	2300      	movs	r3, #0
 8005c48:	461a      	mov	r2, r3
 8005c4a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005c4e:	4619      	mov	r1, r3
 8005c50:	930c      	str	r3, [sp, #48]	; 0x30
 8005c52:	9307      	str	r3, [sp, #28]
 8005c54:	f04f 3bff 	mov.w	fp, #4294967295
 8005c58:	7863      	ldrb	r3, [r4, #1]
 8005c5a:	f104 0801 	add.w	r8, r4, #1
 8005c5e:	465d      	mov	r5, fp
 8005c60:	f108 0801 	add.w	r8, r8, #1
 8005c64:	f1a3 0020 	sub.w	r0, r3, #32
 8005c68:	2858      	cmp	r0, #88	; 0x58
 8005c6a:	f200 8459 	bhi.w	8006520 <_vfprintf_r+0x9a8>
 8005c6e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8005c72:	040f      	.short	0x040f
 8005c74:	04570457 	.word	0x04570457
 8005c78:	04570418 	.word	0x04570418
 8005c7c:	04570457 	.word	0x04570457
 8005c80:	04570457 	.word	0x04570457
 8005c84:	03620457 	.word	0x03620457
 8005c88:	04570449 	.word	0x04570449
 8005c8c:	0109005d 	.word	0x0109005d
 8005c90:	01250457 	.word	0x01250457
 8005c94:	03700370 	.word	0x03700370
 8005c98:	03700370 	.word	0x03700370
 8005c9c:	03700370 	.word	0x03700370
 8005ca0:	03700370 	.word	0x03700370
 8005ca4:	04570370 	.word	0x04570370
 8005ca8:	04570457 	.word	0x04570457
 8005cac:	04570457 	.word	0x04570457
 8005cb0:	04570457 	.word	0x04570457
 8005cb4:	04570457 	.word	0x04570457
 8005cb8:	03800457 	.word	0x03800457
 8005cbc:	0457039d 	.word	0x0457039d
 8005cc0:	0457039d 	.word	0x0457039d
 8005cc4:	04570457 	.word	0x04570457
 8005cc8:	03eb0457 	.word	0x03eb0457
 8005ccc:	04570457 	.word	0x04570457
 8005cd0:	0457012c 	.word	0x0457012c
 8005cd4:	04570457 	.word	0x04570457
 8005cd8:	04570457 	.word	0x04570457
 8005cdc:	04570155 	.word	0x04570155
 8005ce0:	02b40457 	.word	0x02b40457
 8005ce4:	04570457 	.word	0x04570457
 8005ce8:	04570457 	.word	0x04570457
 8005cec:	04570457 	.word	0x04570457
 8005cf0:	04570457 	.word	0x04570457
 8005cf4:	04570457 	.word	0x04570457
 8005cf8:	030f02f5 	.word	0x030f02f5
 8005cfc:	039d039d 	.word	0x039d039d
 8005d00:	033f039d 	.word	0x033f039d
 8005d04:	0457030f 	.word	0x0457030f
 8005d08:	03460457 	.word	0x03460457
 8005d0c:	03500457 	.word	0x03500457
 8005d10:	006400cb 	.word	0x006400cb
 8005d14:	04570420 	.word	0x04570420
 8005d18:	04570428 	.word	0x04570428
 8005d1c:	045703f2 	.word	0x045703f2
 8005d20:	03fa0457 	.word	0x03fa0457
 8005d24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005d26:	930e      	str	r3, [sp, #56]	; 0x38
 8005d28:	4240      	negs	r0, r0
 8005d2a:	900c      	str	r0, [sp, #48]	; 0x30
 8005d2c:	9b07      	ldr	r3, [sp, #28]
 8005d2e:	f043 0304 	orr.w	r3, r3, #4
 8005d32:	9307      	str	r3, [sp, #28]
 8005d34:	f898 3000 	ldrb.w	r3, [r8]
 8005d38:	e792      	b.n	8005c60 <_vfprintf_r+0xe8>
 8005d3a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005d3c:	46ab      	mov	fp, r5
 8005d3e:	2100      	movs	r1, #0
 8005d40:	6804      	ldr	r4, [r0, #0]
 8005d42:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005d46:	1d07      	adds	r7, r0, #4
 8005d48:	9807      	ldr	r0, [sp, #28]
 8005d4a:	2330      	movs	r3, #48	; 0x30
 8005d4c:	2278      	movs	r2, #120	; 0x78
 8005d4e:	458b      	cmp	fp, r1
 8005d50:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8005d54:	f04f 0500 	mov.w	r5, #0
 8005d58:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8005d5c:	f040 0302 	orr.w	r3, r0, #2
 8005d60:	f2c0 83fb 	blt.w	800655a <_vfprintf_r+0x9e2>
 8005d64:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8005d68:	f043 0302 	orr.w	r3, r3, #2
 8005d6c:	9307      	str	r3, [sp, #28]
 8005d6e:	ea54 0305 	orrs.w	r3, r4, r5
 8005d72:	970e      	str	r7, [sp, #56]	; 0x38
 8005d74:	f000 83cc 	beq.w	8006510 <_vfprintf_r+0x998>
 8005d78:	460f      	mov	r7, r1
 8005d7a:	9211      	str	r2, [sp, #68]	; 0x44
 8005d7c:	4820      	ldr	r0, [pc, #128]	; (8005e00 <_vfprintf_r+0x288>)
 8005d7e:	e25d      	b.n	800623c <_vfprintf_r+0x6c4>
 8005d80:	9908      	ldr	r1, [sp, #32]
 8005d82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d84:	f001 faf0 	bl	8007368 <__swsetup_r>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	f041 803f 	bne.w	8006e0c <_vfprintf_r+0x1294>
 8005d8e:	9b08      	ldr	r3, [sp, #32]
 8005d90:	899b      	ldrh	r3, [r3, #12]
 8005d92:	f003 031a 	and.w	r3, r3, #26
 8005d96:	2b0a      	cmp	r3, #10
 8005d98:	f47f af1f 	bne.w	8005bda <_vfprintf_r+0x62>
 8005d9c:	9908      	ldr	r1, [sp, #32]
 8005d9e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f6ff af19 	blt.w	8005bda <_vfprintf_r+0x62>
 8005da8:	4623      	mov	r3, r4
 8005daa:	4632      	mov	r2, r6
 8005dac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005dae:	f001 fa7f 	bl	80072b0 <__sbprintf>
 8005db2:	b045      	add	sp, #276	; 0x114
 8005db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db8:	aa27      	add	r2, sp, #156	; 0x9c
 8005dba:	9908      	ldr	r1, [sp, #32]
 8005dbc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005dbe:	f004 f931 	bl	800a024 <__sprint_r>
 8005dc2:	b948      	cbnz	r0, 8005dd8 <_vfprintf_r+0x260>
 8005dc4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005dc8:	e736      	b.n	8005c38 <_vfprintf_r+0xc0>
 8005dca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8005dcc:	b123      	cbz	r3, 8005dd8 <_vfprintf_r+0x260>
 8005dce:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005dd0:	9908      	ldr	r1, [sp, #32]
 8005dd2:	aa27      	add	r2, sp, #156	; 0x9c
 8005dd4:	f004 f926 	bl	800a024 <__sprint_r>
 8005dd8:	9b08      	ldr	r3, [sp, #32]
 8005dda:	899b      	ldrh	r3, [r3, #12]
 8005ddc:	0659      	lsls	r1, r3, #25
 8005dde:	f101 8015 	bmi.w	8006e0c <_vfprintf_r+0x1294>
 8005de2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005de4:	b045      	add	sp, #276	; 0x114
 8005de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005dec:	f002 fc02 	bl	80085f4 <__sinit>
 8005df0:	e6d8      	b.n	8005ba4 <_vfprintf_r+0x2c>
 8005df2:	bf00      	nop
 8005df4:	f3af 8000 	nop.w
	...
 8005e00:	0800a948 	.word	0x0800a948
 8005e04:	0800a978 	.word	0x0800a978
 8005e08:	9311      	str	r3, [sp, #68]	; 0x44
 8005e0a:	46ab      	mov	fp, r5
 8005e0c:	2a00      	cmp	r2, #0
 8005e0e:	f041 8232 	bne.w	8007276 <_vfprintf_r+0x16fe>
 8005e12:	9a07      	ldr	r2, [sp, #28]
 8005e14:	f012 0320 	ands.w	r3, r2, #32
 8005e18:	d064      	beq.n	8005ee4 <_vfprintf_r+0x36c>
 8005e1a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005e1c:	3707      	adds	r7, #7
 8005e1e:	f027 0307 	bic.w	r3, r7, #7
 8005e22:	2700      	movs	r7, #0
 8005e24:	f103 0108 	add.w	r1, r3, #8
 8005e28:	45bb      	cmp	fp, r7
 8005e2a:	910e      	str	r1, [sp, #56]	; 0x38
 8005e2c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005e30:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005e34:	f2c0 86ba 	blt.w	8006bac <_vfprintf_r+0x1034>
 8005e38:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8005e3c:	9307      	str	r3, [sp, #28]
 8005e3e:	ea54 0305 	orrs.w	r3, r4, r5
 8005e42:	f000 8382 	beq.w	800654a <_vfprintf_r+0x9d2>
 8005e46:	ae34      	add	r6, sp, #208	; 0xd0
 8005e48:	08e2      	lsrs	r2, r4, #3
 8005e4a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8005e4e:	08e9      	lsrs	r1, r5, #3
 8005e50:	f004 0307 	and.w	r3, r4, #7
 8005e54:	460d      	mov	r5, r1
 8005e56:	4614      	mov	r4, r2
 8005e58:	3330      	adds	r3, #48	; 0x30
 8005e5a:	ea54 0205 	orrs.w	r2, r4, r5
 8005e5e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8005e62:	d1f1      	bne.n	8005e48 <_vfprintf_r+0x2d0>
 8005e64:	9a07      	ldr	r2, [sp, #28]
 8005e66:	07d2      	lsls	r2, r2, #31
 8005e68:	f140 8096 	bpl.w	8005f98 <_vfprintf_r+0x420>
 8005e6c:	2b30      	cmp	r3, #48	; 0x30
 8005e6e:	f000 8093 	beq.w	8005f98 <_vfprintf_r+0x420>
 8005e72:	2230      	movs	r2, #48	; 0x30
 8005e74:	1e73      	subs	r3, r6, #1
 8005e76:	f806 2c01 	strb.w	r2, [r6, #-1]
 8005e7a:	aa34      	add	r2, sp, #208	; 0xd0
 8005e7c:	1ad2      	subs	r2, r2, r3
 8005e7e:	920d      	str	r2, [sp, #52]	; 0x34
 8005e80:	461e      	mov	r6, r3
 8005e82:	e08c      	b.n	8005f9e <_vfprintf_r+0x426>
 8005e84:	f898 3000 	ldrb.w	r3, [r8]
 8005e88:	2b2a      	cmp	r3, #42	; 0x2a
 8005e8a:	f108 0401 	add.w	r4, r8, #1
 8005e8e:	f001 81d0 	beq.w	8007232 <_vfprintf_r+0x16ba>
 8005e92:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8005e96:	2809      	cmp	r0, #9
 8005e98:	bf98      	it	ls
 8005e9a:	2500      	movls	r5, #0
 8005e9c:	f201 816c 	bhi.w	8007178 <_vfprintf_r+0x1600>
 8005ea0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ea4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005ea8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8005eac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8005eb0:	2809      	cmp	r0, #9
 8005eb2:	d9f5      	bls.n	8005ea0 <_vfprintf_r+0x328>
 8005eb4:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8005eb8:	46a0      	mov	r8, r4
 8005eba:	e6d3      	b.n	8005c64 <_vfprintf_r+0xec>
 8005ebc:	9b07      	ldr	r3, [sp, #28]
 8005ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec2:	9307      	str	r3, [sp, #28]
 8005ec4:	f898 3000 	ldrb.w	r3, [r8]
 8005ec8:	e6ca      	b.n	8005c60 <_vfprintf_r+0xe8>
 8005eca:	9311      	str	r3, [sp, #68]	; 0x44
 8005ecc:	46ab      	mov	fp, r5
 8005ece:	2a00      	cmp	r2, #0
 8005ed0:	f041 81d9 	bne.w	8007286 <_vfprintf_r+0x170e>
 8005ed4:	9b07      	ldr	r3, [sp, #28]
 8005ed6:	f043 0310 	orr.w	r3, r3, #16
 8005eda:	9307      	str	r3, [sp, #28]
 8005edc:	9a07      	ldr	r2, [sp, #28]
 8005ede:	f012 0320 	ands.w	r3, r2, #32
 8005ee2:	d19a      	bne.n	8005e1a <_vfprintf_r+0x2a2>
 8005ee4:	9907      	ldr	r1, [sp, #28]
 8005ee6:	f011 0210 	ands.w	r2, r1, #16
 8005eea:	f000 8634 	beq.w	8006b56 <_vfprintf_r+0xfde>
 8005eee:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005ef0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005ef4:	f1bb 0f00 	cmp.w	fp, #0
 8005ef8:	6804      	ldr	r4, [r0, #0]
 8005efa:	f100 0704 	add.w	r7, r0, #4
 8005efe:	f04f 0500 	mov.w	r5, #0
 8005f02:	f2c0 8652 	blt.w	8006baa <_vfprintf_r+0x1032>
 8005f06:	460a      	mov	r2, r1
 8005f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f0c:	9207      	str	r2, [sp, #28]
 8005f0e:	ea54 0205 	orrs.w	r2, r4, r5
 8005f12:	970e      	str	r7, [sp, #56]	; 0x38
 8005f14:	f000 8319 	beq.w	800654a <_vfprintf_r+0x9d2>
 8005f18:	461f      	mov	r7, r3
 8005f1a:	e794      	b.n	8005e46 <_vfprintf_r+0x2ce>
 8005f1c:	9311      	str	r3, [sp, #68]	; 0x44
 8005f1e:	46ab      	mov	fp, r5
 8005f20:	2a00      	cmp	r2, #0
 8005f22:	f041 81a0 	bne.w	8007266 <_vfprintf_r+0x16ee>
 8005f26:	9b07      	ldr	r3, [sp, #28]
 8005f28:	f043 0310 	orr.w	r3, r3, #16
 8005f2c:	9307      	str	r3, [sp, #28]
 8005f2e:	9a07      	ldr	r2, [sp, #28]
 8005f30:	f012 0320 	ands.w	r3, r2, #32
 8005f34:	f000 84fa 	beq.w	800692c <_vfprintf_r+0xdb4>
 8005f38:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005f3a:	3707      	adds	r7, #7
 8005f3c:	f027 0307 	bic.w	r3, r7, #7
 8005f40:	2700      	movs	r7, #0
 8005f42:	f103 0108 	add.w	r1, r3, #8
 8005f46:	45bb      	cmp	fp, r7
 8005f48:	910e      	str	r1, [sp, #56]	; 0x38
 8005f4a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005f4e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005f52:	f2c0 8523 	blt.w	800699c <_vfprintf_r+0xe24>
 8005f56:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8005f5a:	9307      	str	r3, [sp, #28]
 8005f5c:	ea54 0305 	orrs.w	r3, r4, r5
 8005f60:	f000 81bc 	beq.w	80062dc <_vfprintf_r+0x764>
 8005f64:	2d00      	cmp	r5, #0
 8005f66:	bf08      	it	eq
 8005f68:	2c0a      	cmpeq	r4, #10
 8005f6a:	f0c0 851b 	bcc.w	80069a4 <_vfprintf_r+0xe2c>
 8005f6e:	ae34      	add	r6, sp, #208	; 0xd0
 8005f70:	4620      	mov	r0, r4
 8005f72:	4629      	mov	r1, r5
 8005f74:	220a      	movs	r2, #10
 8005f76:	2300      	movs	r3, #0
 8005f78:	f004 fa38 	bl	800a3ec <__aeabi_uldivmod>
 8005f7c:	3230      	adds	r2, #48	; 0x30
 8005f7e:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8005f82:	4620      	mov	r0, r4
 8005f84:	4629      	mov	r1, r5
 8005f86:	2300      	movs	r3, #0
 8005f88:	220a      	movs	r2, #10
 8005f8a:	f004 fa2f 	bl	800a3ec <__aeabi_uldivmod>
 8005f8e:	4604      	mov	r4, r0
 8005f90:	460d      	mov	r5, r1
 8005f92:	ea54 0305 	orrs.w	r3, r4, r5
 8005f96:	d1eb      	bne.n	8005f70 <_vfprintf_r+0x3f8>
 8005f98:	ab34      	add	r3, sp, #208	; 0xd0
 8005f9a:	1b9b      	subs	r3, r3, r6
 8005f9c:	930d      	str	r3, [sp, #52]	; 0x34
 8005f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fa0:	455b      	cmp	r3, fp
 8005fa2:	bfb8      	it	lt
 8005fa4:	465b      	movlt	r3, fp
 8005fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9313      	str	r3, [sp, #76]	; 0x4c
 8005fac:	b117      	cbz	r7, 8005fb4 <_vfprintf_r+0x43c>
 8005fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fb4:	9b07      	ldr	r3, [sp, #28]
 8005fb6:	f013 0302 	ands.w	r3, r3, #2
 8005fba:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fbc:	d002      	beq.n	8005fc4 <_vfprintf_r+0x44c>
 8005fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fc4:	9b07      	ldr	r3, [sp, #28]
 8005fc6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8005fca:	9310      	str	r3, [sp, #64]	; 0x40
 8005fcc:	f040 82d2 	bne.w	8006574 <_vfprintf_r+0x9fc>
 8005fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fd4:	1a9d      	subs	r5, r3, r2
 8005fd6:	2d00      	cmp	r5, #0
 8005fd8:	f340 82cc 	ble.w	8006574 <_vfprintf_r+0x9fc>
 8005fdc:	2d10      	cmp	r5, #16
 8005fde:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8005fe0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8005fe2:	4fa8      	ldr	r7, [pc, #672]	; (8006284 <_vfprintf_r+0x70c>)
 8005fe4:	dd27      	ble.n	8006036 <_vfprintf_r+0x4be>
 8005fe6:	9618      	str	r6, [sp, #96]	; 0x60
 8005fe8:	4648      	mov	r0, r9
 8005fea:	2410      	movs	r4, #16
 8005fec:	46b9      	mov	r9, r7
 8005fee:	9e08      	ldr	r6, [sp, #32]
 8005ff0:	462f      	mov	r7, r5
 8005ff2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005ff4:	e004      	b.n	8006000 <_vfprintf_r+0x488>
 8005ff6:	3f10      	subs	r7, #16
 8005ff8:	2f10      	cmp	r7, #16
 8005ffa:	f100 0008 	add.w	r0, r0, #8
 8005ffe:	dd16      	ble.n	800602e <_vfprintf_r+0x4b6>
 8006000:	3201      	adds	r2, #1
 8006002:	4ba0      	ldr	r3, [pc, #640]	; (8006284 <_vfprintf_r+0x70c>)
 8006004:	9228      	str	r2, [sp, #160]	; 0xa0
 8006006:	3110      	adds	r1, #16
 8006008:	2a07      	cmp	r2, #7
 800600a:	9129      	str	r1, [sp, #164]	; 0xa4
 800600c:	e880 0018 	stmia.w	r0, {r3, r4}
 8006010:	ddf1      	ble.n	8005ff6 <_vfprintf_r+0x47e>
 8006012:	aa27      	add	r2, sp, #156	; 0x9c
 8006014:	4631      	mov	r1, r6
 8006016:	4628      	mov	r0, r5
 8006018:	f004 f804 	bl	800a024 <__sprint_r>
 800601c:	2800      	cmp	r0, #0
 800601e:	f47f aedb 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006022:	3f10      	subs	r7, #16
 8006024:	2f10      	cmp	r7, #16
 8006026:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8006028:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800602a:	a834      	add	r0, sp, #208	; 0xd0
 800602c:	dce8      	bgt.n	8006000 <_vfprintf_r+0x488>
 800602e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8006030:	463d      	mov	r5, r7
 8006032:	464f      	mov	r7, r9
 8006034:	4681      	mov	r9, r0
 8006036:	3201      	adds	r2, #1
 8006038:	186c      	adds	r4, r5, r1
 800603a:	2a07      	cmp	r2, #7
 800603c:	9429      	str	r4, [sp, #164]	; 0xa4
 800603e:	9228      	str	r2, [sp, #160]	; 0xa0
 8006040:	f8c9 7000 	str.w	r7, [r9]
 8006044:	f8c9 5004 	str.w	r5, [r9, #4]
 8006048:	f300 8428 	bgt.w	800689c <_vfprintf_r+0xd24>
 800604c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006050:	f109 0908 	add.w	r9, r9, #8
 8006054:	b177      	cbz	r7, 8006074 <_vfprintf_r+0x4fc>
 8006056:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006058:	3301      	adds	r3, #1
 800605a:	3401      	adds	r4, #1
 800605c:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8006060:	2201      	movs	r2, #1
 8006062:	2b07      	cmp	r3, #7
 8006064:	9429      	str	r4, [sp, #164]	; 0xa4
 8006066:	9328      	str	r3, [sp, #160]	; 0xa0
 8006068:	e889 0006 	stmia.w	r9, {r1, r2}
 800606c:	f300 83a0 	bgt.w	80067b0 <_vfprintf_r+0xc38>
 8006070:	f109 0908 	add.w	r9, r9, #8
 8006074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006076:	b16b      	cbz	r3, 8006094 <_vfprintf_r+0x51c>
 8006078:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800607a:	3301      	adds	r3, #1
 800607c:	3402      	adds	r4, #2
 800607e:	a920      	add	r1, sp, #128	; 0x80
 8006080:	2202      	movs	r2, #2
 8006082:	2b07      	cmp	r3, #7
 8006084:	9429      	str	r4, [sp, #164]	; 0xa4
 8006086:	9328      	str	r3, [sp, #160]	; 0xa0
 8006088:	e889 0006 	stmia.w	r9, {r1, r2}
 800608c:	f300 839c 	bgt.w	80067c8 <_vfprintf_r+0xc50>
 8006090:	f109 0908 	add.w	r9, r9, #8
 8006094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006096:	2b80      	cmp	r3, #128	; 0x80
 8006098:	f000 82d0 	beq.w	800663c <_vfprintf_r+0xac4>
 800609c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800609e:	ebc3 070b 	rsb	r7, r3, fp
 80060a2:	2f00      	cmp	r7, #0
 80060a4:	dd33      	ble.n	800610e <_vfprintf_r+0x596>
 80060a6:	4a78      	ldr	r2, [pc, #480]	; (8006288 <_vfprintf_r+0x710>)
 80060a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80060aa:	920f      	str	r2, [sp, #60]	; 0x3c
 80060ac:	2f10      	cmp	r7, #16
 80060ae:	dd22      	ble.n	80060f6 <_vfprintf_r+0x57e>
 80060b0:	4622      	mov	r2, r4
 80060b2:	f04f 0b10 	mov.w	fp, #16
 80060b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80060b8:	9c08      	ldr	r4, [sp, #32]
 80060ba:	e004      	b.n	80060c6 <_vfprintf_r+0x54e>
 80060bc:	3f10      	subs	r7, #16
 80060be:	2f10      	cmp	r7, #16
 80060c0:	f109 0908 	add.w	r9, r9, #8
 80060c4:	dd16      	ble.n	80060f4 <_vfprintf_r+0x57c>
 80060c6:	3301      	adds	r3, #1
 80060c8:	3210      	adds	r2, #16
 80060ca:	2b07      	cmp	r3, #7
 80060cc:	9229      	str	r2, [sp, #164]	; 0xa4
 80060ce:	9328      	str	r3, [sp, #160]	; 0xa0
 80060d0:	e889 0c00 	stmia.w	r9, {sl, fp}
 80060d4:	ddf2      	ble.n	80060bc <_vfprintf_r+0x544>
 80060d6:	aa27      	add	r2, sp, #156	; 0x9c
 80060d8:	4621      	mov	r1, r4
 80060da:	4628      	mov	r0, r5
 80060dc:	f003 ffa2 	bl	800a024 <__sprint_r>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	f47f ae79 	bne.w	8005dd8 <_vfprintf_r+0x260>
 80060e6:	3f10      	subs	r7, #16
 80060e8:	2f10      	cmp	r7, #16
 80060ea:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80060ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80060ee:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80060f2:	dce8      	bgt.n	80060c6 <_vfprintf_r+0x54e>
 80060f4:	4614      	mov	r4, r2
 80060f6:	3301      	adds	r3, #1
 80060f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80060fc:	443c      	add	r4, r7
 80060fe:	2b07      	cmp	r3, #7
 8006100:	9429      	str	r4, [sp, #164]	; 0xa4
 8006102:	e889 0084 	stmia.w	r9, {r2, r7}
 8006106:	f300 8347 	bgt.w	8006798 <_vfprintf_r+0xc20>
 800610a:	f109 0908 	add.w	r9, r9, #8
 800610e:	9b07      	ldr	r3, [sp, #28]
 8006110:	05dd      	lsls	r5, r3, #23
 8006112:	f100 8231 	bmi.w	8006578 <_vfprintf_r+0xa00>
 8006116:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006118:	990d      	ldr	r1, [sp, #52]	; 0x34
 800611a:	f8c9 6000 	str.w	r6, [r9]
 800611e:	3301      	adds	r3, #1
 8006120:	440c      	add	r4, r1
 8006122:	2b07      	cmp	r3, #7
 8006124:	9429      	str	r4, [sp, #164]	; 0xa4
 8006126:	f8c9 1004 	str.w	r1, [r9, #4]
 800612a:	9328      	str	r3, [sp, #160]	; 0xa0
 800612c:	f300 831e 	bgt.w	800676c <_vfprintf_r+0xbf4>
 8006130:	f109 0908 	add.w	r9, r9, #8
 8006134:	9b07      	ldr	r3, [sp, #28]
 8006136:	0758      	lsls	r0, r3, #29
 8006138:	d53f      	bpl.n	80061ba <_vfprintf_r+0x642>
 800613a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800613c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800613e:	1a9d      	subs	r5, r3, r2
 8006140:	2d00      	cmp	r5, #0
 8006142:	dd3a      	ble.n	80061ba <_vfprintf_r+0x642>
 8006144:	2d10      	cmp	r5, #16
 8006146:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006148:	4f4e      	ldr	r7, [pc, #312]	; (8006284 <_vfprintf_r+0x70c>)
 800614a:	dd23      	ble.n	8006194 <_vfprintf_r+0x61c>
 800614c:	4622      	mov	r2, r4
 800614e:	2610      	movs	r6, #16
 8006150:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006154:	9c08      	ldr	r4, [sp, #32]
 8006156:	e004      	b.n	8006162 <_vfprintf_r+0x5ea>
 8006158:	3d10      	subs	r5, #16
 800615a:	2d10      	cmp	r5, #16
 800615c:	f109 0908 	add.w	r9, r9, #8
 8006160:	dd17      	ble.n	8006192 <_vfprintf_r+0x61a>
 8006162:	3301      	adds	r3, #1
 8006164:	4947      	ldr	r1, [pc, #284]	; (8006284 <_vfprintf_r+0x70c>)
 8006166:	9328      	str	r3, [sp, #160]	; 0xa0
 8006168:	3210      	adds	r2, #16
 800616a:	2b07      	cmp	r3, #7
 800616c:	9229      	str	r2, [sp, #164]	; 0xa4
 800616e:	e889 0042 	stmia.w	r9, {r1, r6}
 8006172:	ddf1      	ble.n	8006158 <_vfprintf_r+0x5e0>
 8006174:	aa27      	add	r2, sp, #156	; 0x9c
 8006176:	4621      	mov	r1, r4
 8006178:	4658      	mov	r0, fp
 800617a:	f003 ff53 	bl	800a024 <__sprint_r>
 800617e:	2800      	cmp	r0, #0
 8006180:	f47f ae2a 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006184:	3d10      	subs	r5, #16
 8006186:	2d10      	cmp	r5, #16
 8006188:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800618a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800618c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006190:	dce7      	bgt.n	8006162 <_vfprintf_r+0x5ea>
 8006192:	4614      	mov	r4, r2
 8006194:	3301      	adds	r3, #1
 8006196:	442c      	add	r4, r5
 8006198:	2b07      	cmp	r3, #7
 800619a:	9429      	str	r4, [sp, #164]	; 0xa4
 800619c:	9328      	str	r3, [sp, #160]	; 0xa0
 800619e:	f8c9 7000 	str.w	r7, [r9]
 80061a2:	f8c9 5004 	str.w	r5, [r9, #4]
 80061a6:	dd08      	ble.n	80061ba <_vfprintf_r+0x642>
 80061a8:	aa27      	add	r2, sp, #156	; 0x9c
 80061aa:	9908      	ldr	r1, [sp, #32]
 80061ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80061ae:	f003 ff39 	bl	800a024 <__sprint_r>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	f47f ae10 	bne.w	8005dd8 <_vfprintf_r+0x260>
 80061b8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80061ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061c0:	428a      	cmp	r2, r1
 80061c2:	bfac      	ite	ge
 80061c4:	189b      	addge	r3, r3, r2
 80061c6:	185b      	addlt	r3, r3, r1
 80061c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80061ca:	2c00      	cmp	r4, #0
 80061cc:	f040 82da 	bne.w	8006784 <_vfprintf_r+0xc0c>
 80061d0:	2300      	movs	r3, #0
 80061d2:	9328      	str	r3, [sp, #160]	; 0xa0
 80061d4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80061d8:	e50f      	b.n	8005bfa <_vfprintf_r+0x82>
 80061da:	9311      	str	r3, [sp, #68]	; 0x44
 80061dc:	46ab      	mov	fp, r5
 80061de:	2a00      	cmp	r2, #0
 80061e0:	f041 803d 	bne.w	800725e <_vfprintf_r+0x16e6>
 80061e4:	9b07      	ldr	r3, [sp, #28]
 80061e6:	4829      	ldr	r0, [pc, #164]	; (800628c <_vfprintf_r+0x714>)
 80061e8:	069c      	lsls	r4, r3, #26
 80061ea:	f140 8146 	bpl.w	800647a <_vfprintf_r+0x902>
 80061ee:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80061f0:	3707      	adds	r7, #7
 80061f2:	f027 0307 	bic.w	r3, r7, #7
 80061f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80061fa:	f103 0208 	add.w	r2, r3, #8
 80061fe:	920e      	str	r2, [sp, #56]	; 0x38
 8006200:	9a07      	ldr	r2, [sp, #28]
 8006202:	f012 0701 	ands.w	r7, r2, #1
 8006206:	f000 82eb 	beq.w	80067e0 <_vfprintf_r+0xc68>
 800620a:	ea54 0305 	orrs.w	r3, r4, r5
 800620e:	f000 8582 	beq.w	8006d16 <_vfprintf_r+0x119e>
 8006212:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8006216:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 800621a:	2700      	movs	r7, #0
 800621c:	9a07      	ldr	r2, [sp, #28]
 800621e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006222:	2330      	movs	r3, #48	; 0x30
 8006224:	45bb      	cmp	fp, r7
 8006226:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 800622a:	f042 0302 	orr.w	r3, r2, #2
 800622e:	f2c0 873b 	blt.w	80070a8 <_vfprintf_r+0x1530>
 8006232:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006236:	f043 0302 	orr.w	r3, r3, #2
 800623a:	9307      	str	r3, [sp, #28]
 800623c:	ae34      	add	r6, sp, #208	; 0xd0
 800623e:	0923      	lsrs	r3, r4, #4
 8006240:	f004 010f 	and.w	r1, r4, #15
 8006244:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006248:	092a      	lsrs	r2, r5, #4
 800624a:	461c      	mov	r4, r3
 800624c:	4615      	mov	r5, r2
 800624e:	5c43      	ldrb	r3, [r0, r1]
 8006250:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8006254:	ea54 0305 	orrs.w	r3, r4, r5
 8006258:	d1f1      	bne.n	800623e <_vfprintf_r+0x6c6>
 800625a:	e69d      	b.n	8005f98 <_vfprintf_r+0x420>
 800625c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800625e:	9311      	str	r3, [sp, #68]	; 0x44
 8006260:	680a      	ldr	r2, [r1, #0]
 8006262:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8006266:	2300      	movs	r3, #0
 8006268:	460a      	mov	r2, r1
 800626a:	461f      	mov	r7, r3
 800626c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006270:	3204      	adds	r2, #4
 8006272:	2301      	movs	r3, #1
 8006274:	9309      	str	r3, [sp, #36]	; 0x24
 8006276:	46bb      	mov	fp, r7
 8006278:	9713      	str	r7, [sp, #76]	; 0x4c
 800627a:	920e      	str	r2, [sp, #56]	; 0x38
 800627c:	930d      	str	r3, [sp, #52]	; 0x34
 800627e:	ae2a      	add	r6, sp, #168	; 0xa8
 8006280:	e698      	b.n	8005fb4 <_vfprintf_r+0x43c>
 8006282:	bf00      	nop
 8006284:	0800a988 	.word	0x0800a988
 8006288:	0800a978 	.word	0x0800a978
 800628c:	0800a934 	.word	0x0800a934
 8006290:	9311      	str	r3, [sp, #68]	; 0x44
 8006292:	46ab      	mov	fp, r5
 8006294:	2a00      	cmp	r2, #0
 8006296:	f040 87ea 	bne.w	800726e <_vfprintf_r+0x16f6>
 800629a:	9b07      	ldr	r3, [sp, #28]
 800629c:	069b      	lsls	r3, r3, #26
 800629e:	d574      	bpl.n	800638a <_vfprintf_r+0x812>
 80062a0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80062a2:	3707      	adds	r7, #7
 80062a4:	f027 0707 	bic.w	r7, r7, #7
 80062a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062ac:	f107 0108 	add.w	r1, r7, #8
 80062b0:	910e      	str	r1, [sp, #56]	; 0x38
 80062b2:	4614      	mov	r4, r2
 80062b4:	461d      	mov	r5, r3
 80062b6:	2a00      	cmp	r2, #0
 80062b8:	f173 0300 	sbcs.w	r3, r3, #0
 80062bc:	f2c0 843a 	blt.w	8006b34 <_vfprintf_r+0xfbc>
 80062c0:	f1bb 0f00 	cmp.w	fp, #0
 80062c4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80062c8:	f2c0 8368 	blt.w	800699c <_vfprintf_r+0xe24>
 80062cc:	9b07      	ldr	r3, [sp, #28]
 80062ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062d2:	9307      	str	r3, [sp, #28]
 80062d4:	ea54 0305 	orrs.w	r3, r4, r5
 80062d8:	f47f ae44 	bne.w	8005f64 <_vfprintf_r+0x3ec>
 80062dc:	f1bb 0f00 	cmp.w	fp, #0
 80062e0:	f040 8408 	bne.w	8006af4 <_vfprintf_r+0xf7c>
 80062e4:	f04f 0b00 	mov.w	fp, #0
 80062e8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80062ec:	ae34      	add	r6, sp, #208	; 0xd0
 80062ee:	e656      	b.n	8005f9e <_vfprintf_r+0x426>
 80062f0:	9b07      	ldr	r3, [sp, #28]
 80062f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062f6:	9307      	str	r3, [sp, #28]
 80062f8:	f898 3000 	ldrb.w	r3, [r8]
 80062fc:	e4b0      	b.n	8005c60 <_vfprintf_r+0xe8>
 80062fe:	f898 3000 	ldrb.w	r3, [r8]
 8006302:	2b6c      	cmp	r3, #108	; 0x6c
 8006304:	f000 85d5 	beq.w	8006eb2 <_vfprintf_r+0x133a>
 8006308:	9807      	ldr	r0, [sp, #28]
 800630a:	f040 0010 	orr.w	r0, r0, #16
 800630e:	9007      	str	r0, [sp, #28]
 8006310:	e4a6      	b.n	8005c60 <_vfprintf_r+0xe8>
 8006312:	2a00      	cmp	r2, #0
 8006314:	f040 879f 	bne.w	8007256 <_vfprintf_r+0x16de>
 8006318:	9b07      	ldr	r3, [sp, #28]
 800631a:	069f      	lsls	r7, r3, #26
 800631c:	f140 84e4 	bpl.w	8006ce8 <_vfprintf_r+0x1170>
 8006320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006322:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006324:	6813      	ldr	r3, [r2, #0]
 8006326:	17cd      	asrs	r5, r1, #31
 8006328:	4608      	mov	r0, r1
 800632a:	3204      	adds	r2, #4
 800632c:	4629      	mov	r1, r5
 800632e:	920e      	str	r2, [sp, #56]	; 0x38
 8006330:	e9c3 0100 	strd	r0, r1, [r3]
 8006334:	e461      	b.n	8005bfa <_vfprintf_r+0x82>
 8006336:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	930c      	str	r3, [sp, #48]	; 0x30
 800633c:	4618      	mov	r0, r3
 800633e:	2800      	cmp	r0, #0
 8006340:	4623      	mov	r3, r4
 8006342:	f103 0304 	add.w	r3, r3, #4
 8006346:	f6ff aced 	blt.w	8005d24 <_vfprintf_r+0x1ac>
 800634a:	930e      	str	r3, [sp, #56]	; 0x38
 800634c:	f898 3000 	ldrb.w	r3, [r8]
 8006350:	e486      	b.n	8005c60 <_vfprintf_r+0xe8>
 8006352:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006356:	2300      	movs	r3, #0
 8006358:	461c      	mov	r4, r3
 800635a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800635e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006362:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8006366:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800636a:	2809      	cmp	r0, #9
 800636c:	d9f5      	bls.n	800635a <_vfprintf_r+0x7e2>
 800636e:	940c      	str	r4, [sp, #48]	; 0x30
 8006370:	e478      	b.n	8005c64 <_vfprintf_r+0xec>
 8006372:	9311      	str	r3, [sp, #68]	; 0x44
 8006374:	46ab      	mov	fp, r5
 8006376:	2a00      	cmp	r2, #0
 8006378:	f040 8769 	bne.w	800724e <_vfprintf_r+0x16d6>
 800637c:	9b07      	ldr	r3, [sp, #28]
 800637e:	f043 0310 	orr.w	r3, r3, #16
 8006382:	9307      	str	r3, [sp, #28]
 8006384:	9b07      	ldr	r3, [sp, #28]
 8006386:	069b      	lsls	r3, r3, #26
 8006388:	d48a      	bmi.n	80062a0 <_vfprintf_r+0x728>
 800638a:	9b07      	ldr	r3, [sp, #28]
 800638c:	06df      	lsls	r7, r3, #27
 800638e:	f100 8294 	bmi.w	80068ba <_vfprintf_r+0xd42>
 8006392:	9b07      	ldr	r3, [sp, #28]
 8006394:	065e      	lsls	r6, r3, #25
 8006396:	f140 8290 	bpl.w	80068ba <_vfprintf_r+0xd42>
 800639a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800639c:	f9b1 4000 	ldrsh.w	r4, [r1]
 80063a0:	3104      	adds	r1, #4
 80063a2:	17e5      	asrs	r5, r4, #31
 80063a4:	4622      	mov	r2, r4
 80063a6:	462b      	mov	r3, r5
 80063a8:	910e      	str	r1, [sp, #56]	; 0x38
 80063aa:	e784      	b.n	80062b6 <_vfprintf_r+0x73e>
 80063ac:	9311      	str	r3, [sp, #68]	; 0x44
 80063ae:	46ab      	mov	fp, r5
 80063b0:	2a00      	cmp	r2, #0
 80063b2:	f040 8770 	bne.w	8007296 <_vfprintf_r+0x171e>
 80063b6:	9b07      	ldr	r3, [sp, #28]
 80063b8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80063ba:	071d      	lsls	r5, r3, #28
 80063bc:	f107 0707 	add.w	r7, r7, #7
 80063c0:	f140 8487 	bpl.w	8006cd2 <_vfprintf_r+0x115a>
 80063c4:	f027 0307 	bic.w	r3, r7, #7
 80063c8:	ed93 7b00 	vldr	d7, [r3]
 80063cc:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80063d0:	f103 0208 	add.w	r2, r3, #8
 80063d4:	920e      	str	r2, [sp, #56]	; 0x38
 80063d6:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 80063da:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80063de:	911a      	str	r1, [sp, #104]	; 0x68
 80063e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80063e2:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 80063e6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ea:	4620      	mov	r0, r4
 80063ec:	4629      	mov	r1, r5
 80063ee:	4bb5      	ldr	r3, [pc, #724]	; (80066c4 <_vfprintf_r+0xb4c>)
 80063f0:	f7fd fd8c 	bl	8003f0c <__aeabi_dcmpun>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	f040 83eb 	bne.w	8006bd0 <_vfprintf_r+0x1058>
 80063fa:	f04f 32ff 	mov.w	r2, #4294967295
 80063fe:	4bb1      	ldr	r3, [pc, #708]	; (80066c4 <_vfprintf_r+0xb4c>)
 8006400:	4620      	mov	r0, r4
 8006402:	4629      	mov	r1, r5
 8006404:	f7fd fd64 	bl	8003ed0 <__aeabi_dcmple>
 8006408:	2800      	cmp	r0, #0
 800640a:	f040 83e1 	bne.w	8006bd0 <_vfprintf_r+0x1058>
 800640e:	2200      	movs	r2, #0
 8006410:	2300      	movs	r3, #0
 8006412:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006416:	f7fd fd51 	bl	8003ebc <__aeabi_dcmplt>
 800641a:	2800      	cmp	r0, #0
 800641c:	f040 864a 	bne.w	80070b4 <_vfprintf_r+0x153c>
 8006420:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006424:	4ea8      	ldr	r6, [pc, #672]	; (80066c8 <_vfprintf_r+0xb50>)
 8006426:	4ba9      	ldr	r3, [pc, #676]	; (80066cc <_vfprintf_r+0xb54>)
 8006428:	9907      	ldr	r1, [sp, #28]
 800642a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800642e:	9107      	str	r1, [sp, #28]
 8006430:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006432:	2203      	movs	r2, #3
 8006434:	f04f 0b00 	mov.w	fp, #0
 8006438:	9209      	str	r2, [sp, #36]	; 0x24
 800643a:	2947      	cmp	r1, #71	; 0x47
 800643c:	bfd8      	it	le
 800643e:	461e      	movle	r6, r3
 8006440:	920d      	str	r2, [sp, #52]	; 0x34
 8006442:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8006446:	e5b1      	b.n	8005fac <_vfprintf_r+0x434>
 8006448:	9b07      	ldr	r3, [sp, #28]
 800644a:	f043 0308 	orr.w	r3, r3, #8
 800644e:	9307      	str	r3, [sp, #28]
 8006450:	f898 3000 	ldrb.w	r3, [r8]
 8006454:	e404      	b.n	8005c60 <_vfprintf_r+0xe8>
 8006456:	9311      	str	r3, [sp, #68]	; 0x44
 8006458:	46ab      	mov	fp, r5
 800645a:	2a00      	cmp	r2, #0
 800645c:	f43f ad67 	beq.w	8005f2e <_vfprintf_r+0x3b6>
 8006460:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006464:	e563      	b.n	8005f2e <_vfprintf_r+0x3b6>
 8006466:	9311      	str	r3, [sp, #68]	; 0x44
 8006468:	46ab      	mov	fp, r5
 800646a:	2a00      	cmp	r2, #0
 800646c:	f040 870f 	bne.w	800728e <_vfprintf_r+0x1716>
 8006470:	9b07      	ldr	r3, [sp, #28]
 8006472:	4897      	ldr	r0, [pc, #604]	; (80066d0 <_vfprintf_r+0xb58>)
 8006474:	069c      	lsls	r4, r3, #26
 8006476:	f53f aeba 	bmi.w	80061ee <_vfprintf_r+0x676>
 800647a:	9b07      	ldr	r3, [sp, #28]
 800647c:	06d9      	lsls	r1, r3, #27
 800647e:	f140 8398 	bpl.w	8006bb2 <_vfprintf_r+0x103a>
 8006482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006484:	4613      	mov	r3, r2
 8006486:	3304      	adds	r3, #4
 8006488:	6814      	ldr	r4, [r2, #0]
 800648a:	930e      	str	r3, [sp, #56]	; 0x38
 800648c:	2500      	movs	r5, #0
 800648e:	e6b7      	b.n	8006200 <_vfprintf_r+0x688>
 8006490:	f898 3000 	ldrb.w	r3, [r8]
 8006494:	2900      	cmp	r1, #0
 8006496:	f47f abe3 	bne.w	8005c60 <_vfprintf_r+0xe8>
 800649a:	2201      	movs	r2, #1
 800649c:	2120      	movs	r1, #32
 800649e:	f7ff bbdf 	b.w	8005c60 <_vfprintf_r+0xe8>
 80064a2:	9b07      	ldr	r3, [sp, #28]
 80064a4:	f043 0301 	orr.w	r3, r3, #1
 80064a8:	9307      	str	r3, [sp, #28]
 80064aa:	f898 3000 	ldrb.w	r3, [r8]
 80064ae:	f7ff bbd7 	b.w	8005c60 <_vfprintf_r+0xe8>
 80064b2:	9b07      	ldr	r3, [sp, #28]
 80064b4:	f043 0320 	orr.w	r3, r3, #32
 80064b8:	9307      	str	r3, [sp, #28]
 80064ba:	f898 3000 	ldrb.w	r3, [r8]
 80064be:	f7ff bbcf 	b.w	8005c60 <_vfprintf_r+0xe8>
 80064c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064c4:	9311      	str	r3, [sp, #68]	; 0x44
 80064c6:	6816      	ldr	r6, [r2, #0]
 80064c8:	2400      	movs	r4, #0
 80064ca:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 80064ce:	1d17      	adds	r7, r2, #4
 80064d0:	2e00      	cmp	r6, #0
 80064d2:	f000 85b7 	beq.w	8007044 <_vfprintf_r+0x14cc>
 80064d6:	2d00      	cmp	r5, #0
 80064d8:	f2c0 8502 	blt.w	8006ee0 <_vfprintf_r+0x1368>
 80064dc:	462a      	mov	r2, r5
 80064de:	4621      	mov	r1, r4
 80064e0:	4630      	mov	r0, r6
 80064e2:	f002 fed5 	bl	8009290 <memchr>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	f000 861c 	beq.w	8007124 <_vfprintf_r+0x15ac>
 80064ec:	1b83      	subs	r3, r0, r6
 80064ee:	930d      	str	r3, [sp, #52]	; 0x34
 80064f0:	46a3      	mov	fp, r4
 80064f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80064f6:	970e      	str	r7, [sp, #56]	; 0x38
 80064f8:	9309      	str	r3, [sp, #36]	; 0x24
 80064fa:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 80064fe:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006502:	e553      	b.n	8005fac <_vfprintf_r+0x434>
 8006504:	f898 3000 	ldrb.w	r3, [r8]
 8006508:	2201      	movs	r2, #1
 800650a:	212b      	movs	r1, #43	; 0x2b
 800650c:	f7ff bba8 	b.w	8005c60 <_vfprintf_r+0xe8>
 8006510:	486f      	ldr	r0, [pc, #444]	; (80066d0 <_vfprintf_r+0xb58>)
 8006512:	9211      	str	r2, [sp, #68]	; 0x44
 8006514:	f1bb 0f00 	cmp.w	fp, #0
 8006518:	f040 8173 	bne.w	8006802 <_vfprintf_r+0xc8a>
 800651c:	465f      	mov	r7, fp
 800651e:	e6e1      	b.n	80062e4 <_vfprintf_r+0x76c>
 8006520:	9311      	str	r3, [sp, #68]	; 0x44
 8006522:	2a00      	cmp	r2, #0
 8006524:	f040 86ab 	bne.w	800727e <_vfprintf_r+0x1706>
 8006528:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800652a:	2a00      	cmp	r2, #0
 800652c:	f43f ac4d 	beq.w	8005dca <_vfprintf_r+0x252>
 8006530:	2300      	movs	r3, #0
 8006532:	2101      	movs	r1, #1
 8006534:	461f      	mov	r7, r3
 8006536:	9109      	str	r1, [sp, #36]	; 0x24
 8006538:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800653c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006540:	469b      	mov	fp, r3
 8006542:	9313      	str	r3, [sp, #76]	; 0x4c
 8006544:	910d      	str	r1, [sp, #52]	; 0x34
 8006546:	ae2a      	add	r6, sp, #168	; 0xa8
 8006548:	e534      	b.n	8005fb4 <_vfprintf_r+0x43c>
 800654a:	f1bb 0f00 	cmp.w	fp, #0
 800654e:	f000 85da 	beq.w	8007106 <_vfprintf_r+0x158e>
 8006552:	2700      	movs	r7, #0
 8006554:	2400      	movs	r4, #0
 8006556:	2500      	movs	r5, #0
 8006558:	e475      	b.n	8005e46 <_vfprintf_r+0x2ce>
 800655a:	485d      	ldr	r0, [pc, #372]	; (80066d0 <_vfprintf_r+0xb58>)
 800655c:	9307      	str	r3, [sp, #28]
 800655e:	9211      	str	r2, [sp, #68]	; 0x44
 8006560:	ea54 0305 	orrs.w	r3, r4, r5
 8006564:	970e      	str	r7, [sp, #56]	; 0x38
 8006566:	f04f 0700 	mov.w	r7, #0
 800656a:	f47f ae67 	bne.w	800623c <_vfprintf_r+0x6c4>
 800656e:	2400      	movs	r4, #0
 8006570:	2500      	movs	r5, #0
 8006572:	e663      	b.n	800623c <_vfprintf_r+0x6c4>
 8006574:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006576:	e56d      	b.n	8006054 <_vfprintf_r+0x4dc>
 8006578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800657a:	2b65      	cmp	r3, #101	; 0x65
 800657c:	f340 80ae 	ble.w	80066dc <_vfprintf_r+0xb64>
 8006580:	2200      	movs	r2, #0
 8006582:	2300      	movs	r3, #0
 8006584:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006588:	f7fd fc8e 	bl	8003ea8 <__aeabi_dcmpeq>
 800658c:	2800      	cmp	r0, #0
 800658e:	f000 813a 	beq.w	8006806 <_vfprintf_r+0xc8e>
 8006592:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006594:	4a4f      	ldr	r2, [pc, #316]	; (80066d4 <_vfprintf_r+0xb5c>)
 8006596:	f8c9 2000 	str.w	r2, [r9]
 800659a:	3301      	adds	r3, #1
 800659c:	3401      	adds	r4, #1
 800659e:	2201      	movs	r2, #1
 80065a0:	2b07      	cmp	r3, #7
 80065a2:	9429      	str	r4, [sp, #164]	; 0xa4
 80065a4:	9328      	str	r3, [sp, #160]	; 0xa0
 80065a6:	f8c9 2004 	str.w	r2, [r9, #4]
 80065aa:	f300 83ce 	bgt.w	8006d4a <_vfprintf_r+0x11d2>
 80065ae:	f109 0908 	add.w	r9, r9, #8
 80065b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065b6:	4293      	cmp	r3, r2
 80065b8:	db03      	blt.n	80065c2 <_vfprintf_r+0xa4a>
 80065ba:	9b07      	ldr	r3, [sp, #28]
 80065bc:	07d8      	lsls	r0, r3, #31
 80065be:	f57f adb9 	bpl.w	8006134 <_vfprintf_r+0x5bc>
 80065c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80065c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80065c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80065c8:	f8c9 2000 	str.w	r2, [r9]
 80065cc:	3301      	adds	r3, #1
 80065ce:	440c      	add	r4, r1
 80065d0:	2b07      	cmp	r3, #7
 80065d2:	9429      	str	r4, [sp, #164]	; 0xa4
 80065d4:	f8c9 1004 	str.w	r1, [r9, #4]
 80065d8:	9328      	str	r3, [sp, #160]	; 0xa0
 80065da:	f300 8474 	bgt.w	8006ec6 <_vfprintf_r+0x134e>
 80065de:	f109 0908 	add.w	r9, r9, #8
 80065e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065e4:	1e5d      	subs	r5, r3, #1
 80065e6:	2d00      	cmp	r5, #0
 80065e8:	f77f ada4 	ble.w	8006134 <_vfprintf_r+0x5bc>
 80065ec:	4a3a      	ldr	r2, [pc, #232]	; (80066d8 <_vfprintf_r+0xb60>)
 80065ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80065f0:	920f      	str	r2, [sp, #60]	; 0x3c
 80065f2:	2d10      	cmp	r5, #16
 80065f4:	f340 81b4 	ble.w	8006960 <_vfprintf_r+0xde8>
 80065f8:	2610      	movs	r6, #16
 80065fa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80065fc:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006600:	e005      	b.n	800660e <_vfprintf_r+0xa96>
 8006602:	f109 0908 	add.w	r9, r9, #8
 8006606:	3d10      	subs	r5, #16
 8006608:	2d10      	cmp	r5, #16
 800660a:	f340 81a9 	ble.w	8006960 <_vfprintf_r+0xde8>
 800660e:	3301      	adds	r3, #1
 8006610:	3410      	adds	r4, #16
 8006612:	2b07      	cmp	r3, #7
 8006614:	9429      	str	r4, [sp, #164]	; 0xa4
 8006616:	9328      	str	r3, [sp, #160]	; 0xa0
 8006618:	f8c9 a000 	str.w	sl, [r9]
 800661c:	f8c9 6004 	str.w	r6, [r9, #4]
 8006620:	ddef      	ble.n	8006602 <_vfprintf_r+0xa8a>
 8006622:	aa27      	add	r2, sp, #156	; 0x9c
 8006624:	4659      	mov	r1, fp
 8006626:	4638      	mov	r0, r7
 8006628:	f003 fcfc 	bl	800a024 <__sprint_r>
 800662c:	2800      	cmp	r0, #0
 800662e:	f47f abd3 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006632:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006634:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006636:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800663a:	e7e4      	b.n	8006606 <_vfprintf_r+0xa8e>
 800663c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800663e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006640:	1a9f      	subs	r7, r3, r2
 8006642:	2f00      	cmp	r7, #0
 8006644:	f77f ad2a 	ble.w	800609c <_vfprintf_r+0x524>
 8006648:	4a23      	ldr	r2, [pc, #140]	; (80066d8 <_vfprintf_r+0xb60>)
 800664a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800664c:	920f      	str	r2, [sp, #60]	; 0x3c
 800664e:	2f10      	cmp	r7, #16
 8006650:	dd2b      	ble.n	80066aa <_vfprintf_r+0xb32>
 8006652:	464a      	mov	r2, r9
 8006654:	4621      	mov	r1, r4
 8006656:	46b9      	mov	r9, r7
 8006658:	2510      	movs	r5, #16
 800665a:	4637      	mov	r7, r6
 800665c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800665e:	9e08      	ldr	r6, [sp, #32]
 8006660:	e006      	b.n	8006670 <_vfprintf_r+0xaf8>
 8006662:	f1a9 0910 	sub.w	r9, r9, #16
 8006666:	f1b9 0f10 	cmp.w	r9, #16
 800666a:	f102 0208 	add.w	r2, r2, #8
 800666e:	dd18      	ble.n	80066a2 <_vfprintf_r+0xb2a>
 8006670:	3301      	adds	r3, #1
 8006672:	3110      	adds	r1, #16
 8006674:	2b07      	cmp	r3, #7
 8006676:	9129      	str	r1, [sp, #164]	; 0xa4
 8006678:	9328      	str	r3, [sp, #160]	; 0xa0
 800667a:	f8c2 a000 	str.w	sl, [r2]
 800667e:	6055      	str	r5, [r2, #4]
 8006680:	ddef      	ble.n	8006662 <_vfprintf_r+0xaea>
 8006682:	aa27      	add	r2, sp, #156	; 0x9c
 8006684:	4631      	mov	r1, r6
 8006686:	4620      	mov	r0, r4
 8006688:	f003 fccc 	bl	800a024 <__sprint_r>
 800668c:	2800      	cmp	r0, #0
 800668e:	f47f aba3 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006692:	f1a9 0910 	sub.w	r9, r9, #16
 8006696:	f1b9 0f10 	cmp.w	r9, #16
 800669a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800669c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800669e:	aa34      	add	r2, sp, #208	; 0xd0
 80066a0:	dce6      	bgt.n	8006670 <_vfprintf_r+0xaf8>
 80066a2:	463e      	mov	r6, r7
 80066a4:	460c      	mov	r4, r1
 80066a6:	464f      	mov	r7, r9
 80066a8:	4691      	mov	r9, r2
 80066aa:	3301      	adds	r3, #1
 80066ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066ae:	9328      	str	r3, [sp, #160]	; 0xa0
 80066b0:	443c      	add	r4, r7
 80066b2:	2b07      	cmp	r3, #7
 80066b4:	9429      	str	r4, [sp, #164]	; 0xa4
 80066b6:	e889 0084 	stmia.w	r9, {r2, r7}
 80066ba:	f300 822b 	bgt.w	8006b14 <_vfprintf_r+0xf9c>
 80066be:	f109 0908 	add.w	r9, r9, #8
 80066c2:	e4eb      	b.n	800609c <_vfprintf_r+0x524>
 80066c4:	7fefffff 	.word	0x7fefffff
 80066c8:	0800a928 	.word	0x0800a928
 80066cc:	0800a924 	.word	0x0800a924
 80066d0:	0800a948 	.word	0x0800a948
 80066d4:	0800a964 	.word	0x0800a964
 80066d8:	0800a978 	.word	0x0800a978
 80066dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066de:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	f340 81d0 	ble.w	8006a86 <_vfprintf_r+0xf0e>
 80066e6:	3501      	adds	r5, #1
 80066e8:	3401      	adds	r4, #1
 80066ea:	2301      	movs	r3, #1
 80066ec:	2d07      	cmp	r5, #7
 80066ee:	9429      	str	r4, [sp, #164]	; 0xa4
 80066f0:	9528      	str	r5, [sp, #160]	; 0xa0
 80066f2:	f8c9 6000 	str.w	r6, [r9]
 80066f6:	f8c9 3004 	str.w	r3, [r9, #4]
 80066fa:	f300 81e1 	bgt.w	8006ac0 <_vfprintf_r+0xf48>
 80066fe:	f109 0908 	add.w	r9, r9, #8
 8006702:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006704:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006706:	f8c9 3000 	str.w	r3, [r9]
 800670a:	3501      	adds	r5, #1
 800670c:	4414      	add	r4, r2
 800670e:	2d07      	cmp	r5, #7
 8006710:	9429      	str	r4, [sp, #164]	; 0xa4
 8006712:	9528      	str	r5, [sp, #160]	; 0xa0
 8006714:	f8c9 2004 	str.w	r2, [r9, #4]
 8006718:	f300 81df 	bgt.w	8006ada <_vfprintf_r+0xf62>
 800671c:	f109 0908 	add.w	r9, r9, #8
 8006720:	2300      	movs	r3, #0
 8006722:	2200      	movs	r2, #0
 8006724:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006728:	f7fd fbbe 	bl	8003ea8 <__aeabi_dcmpeq>
 800672c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800672e:	2800      	cmp	r0, #0
 8006730:	f040 80cc 	bne.w	80068cc <_vfprintf_r+0xd54>
 8006734:	3b01      	subs	r3, #1
 8006736:	3501      	adds	r5, #1
 8006738:	3601      	adds	r6, #1
 800673a:	441c      	add	r4, r3
 800673c:	2d07      	cmp	r5, #7
 800673e:	9528      	str	r5, [sp, #160]	; 0xa0
 8006740:	9429      	str	r4, [sp, #164]	; 0xa4
 8006742:	f8c9 6000 	str.w	r6, [r9]
 8006746:	f8c9 3004 	str.w	r3, [r9, #4]
 800674a:	f300 81ac 	bgt.w	8006aa6 <_vfprintf_r+0xf2e>
 800674e:	f109 0908 	add.w	r9, r9, #8
 8006752:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006754:	f8c9 2004 	str.w	r2, [r9, #4]
 8006758:	3501      	adds	r5, #1
 800675a:	4414      	add	r4, r2
 800675c:	ab23      	add	r3, sp, #140	; 0x8c
 800675e:	2d07      	cmp	r5, #7
 8006760:	9429      	str	r4, [sp, #164]	; 0xa4
 8006762:	9528      	str	r5, [sp, #160]	; 0xa0
 8006764:	f8c9 3000 	str.w	r3, [r9]
 8006768:	f77f ace2 	ble.w	8006130 <_vfprintf_r+0x5b8>
 800676c:	aa27      	add	r2, sp, #156	; 0x9c
 800676e:	9908      	ldr	r1, [sp, #32]
 8006770:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006772:	f003 fc57 	bl	800a024 <__sprint_r>
 8006776:	2800      	cmp	r0, #0
 8006778:	f47f ab2e 	bne.w	8005dd8 <_vfprintf_r+0x260>
 800677c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800677e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006782:	e4d7      	b.n	8006134 <_vfprintf_r+0x5bc>
 8006784:	aa27      	add	r2, sp, #156	; 0x9c
 8006786:	9908      	ldr	r1, [sp, #32]
 8006788:	980a      	ldr	r0, [sp, #40]	; 0x28
 800678a:	f003 fc4b 	bl	800a024 <__sprint_r>
 800678e:	2800      	cmp	r0, #0
 8006790:	f43f ad1e 	beq.w	80061d0 <_vfprintf_r+0x658>
 8006794:	f7ff bb20 	b.w	8005dd8 <_vfprintf_r+0x260>
 8006798:	aa27      	add	r2, sp, #156	; 0x9c
 800679a:	9908      	ldr	r1, [sp, #32]
 800679c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800679e:	f003 fc41 	bl	800a024 <__sprint_r>
 80067a2:	2800      	cmp	r0, #0
 80067a4:	f47f ab18 	bne.w	8005dd8 <_vfprintf_r+0x260>
 80067a8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80067aa:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80067ae:	e4ae      	b.n	800610e <_vfprintf_r+0x596>
 80067b0:	aa27      	add	r2, sp, #156	; 0x9c
 80067b2:	9908      	ldr	r1, [sp, #32]
 80067b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80067b6:	f003 fc35 	bl	800a024 <__sprint_r>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	f47f ab0c 	bne.w	8005dd8 <_vfprintf_r+0x260>
 80067c0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80067c2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80067c6:	e455      	b.n	8006074 <_vfprintf_r+0x4fc>
 80067c8:	aa27      	add	r2, sp, #156	; 0x9c
 80067ca:	9908      	ldr	r1, [sp, #32]
 80067cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80067ce:	f003 fc29 	bl	800a024 <__sprint_r>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	f47f ab00 	bne.w	8005dd8 <_vfprintf_r+0x260>
 80067d8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80067da:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80067de:	e459      	b.n	8006094 <_vfprintf_r+0x51c>
 80067e0:	f1bb 0f00 	cmp.w	fp, #0
 80067e4:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80067e8:	f2c0 830d 	blt.w	8006e06 <_vfprintf_r+0x128e>
 80067ec:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80067f0:	9307      	str	r3, [sp, #28]
 80067f2:	ea54 0305 	orrs.w	r3, r4, r5
 80067f6:	f47f ad21 	bne.w	800623c <_vfprintf_r+0x6c4>
 80067fa:	f1bb 0f00 	cmp.w	fp, #0
 80067fe:	f43f ae8d 	beq.w	800651c <_vfprintf_r+0x9a4>
 8006802:	2700      	movs	r7, #0
 8006804:	e6b3      	b.n	800656e <_vfprintf_r+0x9f6>
 8006806:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006808:	2d00      	cmp	r5, #0
 800680a:	f340 82aa 	ble.w	8006d62 <_vfprintf_r+0x11ea>
 800680e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006810:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006812:	4293      	cmp	r3, r2
 8006814:	bfa8      	it	ge
 8006816:	4613      	movge	r3, r2
 8006818:	2b00      	cmp	r3, #0
 800681a:	461d      	mov	r5, r3
 800681c:	dd0d      	ble.n	800683a <_vfprintf_r+0xcc2>
 800681e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006820:	f8c9 6000 	str.w	r6, [r9]
 8006824:	3301      	adds	r3, #1
 8006826:	442c      	add	r4, r5
 8006828:	2b07      	cmp	r3, #7
 800682a:	9429      	str	r4, [sp, #164]	; 0xa4
 800682c:	f8c9 5004 	str.w	r5, [r9, #4]
 8006830:	9328      	str	r3, [sp, #160]	; 0xa0
 8006832:	f300 8387 	bgt.w	8006f44 <_vfprintf_r+0x13cc>
 8006836:	f109 0908 	add.w	r9, r9, #8
 800683a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800683c:	2d00      	cmp	r5, #0
 800683e:	bfa8      	it	ge
 8006840:	1b5b      	subge	r3, r3, r5
 8006842:	2b00      	cmp	r3, #0
 8006844:	461d      	mov	r5, r3
 8006846:	f340 80be 	ble.w	80069c6 <_vfprintf_r+0xe4e>
 800684a:	4ab9      	ldr	r2, [pc, #740]	; (8006b30 <_vfprintf_r+0xfb8>)
 800684c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800684e:	920f      	str	r2, [sp, #60]	; 0x3c
 8006850:	2d10      	cmp	r5, #16
 8006852:	f340 826d 	ble.w	8006d30 <_vfprintf_r+0x11b8>
 8006856:	4622      	mov	r2, r4
 8006858:	2710      	movs	r7, #16
 800685a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800685e:	9c08      	ldr	r4, [sp, #32]
 8006860:	e005      	b.n	800686e <_vfprintf_r+0xcf6>
 8006862:	f109 0908 	add.w	r9, r9, #8
 8006866:	3d10      	subs	r5, #16
 8006868:	2d10      	cmp	r5, #16
 800686a:	f340 8260 	ble.w	8006d2e <_vfprintf_r+0x11b6>
 800686e:	3301      	adds	r3, #1
 8006870:	3210      	adds	r2, #16
 8006872:	2b07      	cmp	r3, #7
 8006874:	9229      	str	r2, [sp, #164]	; 0xa4
 8006876:	9328      	str	r3, [sp, #160]	; 0xa0
 8006878:	f8c9 a000 	str.w	sl, [r9]
 800687c:	f8c9 7004 	str.w	r7, [r9, #4]
 8006880:	ddef      	ble.n	8006862 <_vfprintf_r+0xcea>
 8006882:	aa27      	add	r2, sp, #156	; 0x9c
 8006884:	4621      	mov	r1, r4
 8006886:	4658      	mov	r0, fp
 8006888:	f003 fbcc 	bl	800a024 <__sprint_r>
 800688c:	2800      	cmp	r0, #0
 800688e:	f47f aaa3 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006892:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006894:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006896:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800689a:	e7e4      	b.n	8006866 <_vfprintf_r+0xcee>
 800689c:	aa27      	add	r2, sp, #156	; 0x9c
 800689e:	9908      	ldr	r1, [sp, #32]
 80068a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80068a2:	f003 fbbf 	bl	800a024 <__sprint_r>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	f47f aa96 	bne.w	8005dd8 <_vfprintf_r+0x260>
 80068ac:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80068b0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80068b2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80068b6:	f7ff bbcd 	b.w	8006054 <_vfprintf_r+0x4dc>
 80068ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068bc:	6814      	ldr	r4, [r2, #0]
 80068be:	4613      	mov	r3, r2
 80068c0:	3304      	adds	r3, #4
 80068c2:	17e5      	asrs	r5, r4, #31
 80068c4:	930e      	str	r3, [sp, #56]	; 0x38
 80068c6:	4622      	mov	r2, r4
 80068c8:	462b      	mov	r3, r5
 80068ca:	e4f4      	b.n	80062b6 <_vfprintf_r+0x73e>
 80068cc:	1e5e      	subs	r6, r3, #1
 80068ce:	2e00      	cmp	r6, #0
 80068d0:	f77f af3f 	ble.w	8006752 <_vfprintf_r+0xbda>
 80068d4:	4b96      	ldr	r3, [pc, #600]	; (8006b30 <_vfprintf_r+0xfb8>)
 80068d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80068d8:	2e10      	cmp	r6, #16
 80068da:	f340 8110 	ble.w	8006afe <_vfprintf_r+0xf86>
 80068de:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80068e2:	2710      	movs	r7, #16
 80068e4:	46b0      	mov	r8, r6
 80068e6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80068ea:	9e08      	ldr	r6, [sp, #32]
 80068ec:	e007      	b.n	80068fe <_vfprintf_r+0xd86>
 80068ee:	f109 0908 	add.w	r9, r9, #8
 80068f2:	f1a8 0810 	sub.w	r8, r8, #16
 80068f6:	f1b8 0f10 	cmp.w	r8, #16
 80068fa:	f340 80fd 	ble.w	8006af8 <_vfprintf_r+0xf80>
 80068fe:	3501      	adds	r5, #1
 8006900:	3410      	adds	r4, #16
 8006902:	2d07      	cmp	r5, #7
 8006904:	9429      	str	r4, [sp, #164]	; 0xa4
 8006906:	9528      	str	r5, [sp, #160]	; 0xa0
 8006908:	f8c9 a000 	str.w	sl, [r9]
 800690c:	f8c9 7004 	str.w	r7, [r9, #4]
 8006910:	dded      	ble.n	80068ee <_vfprintf_r+0xd76>
 8006912:	aa27      	add	r2, sp, #156	; 0x9c
 8006914:	4631      	mov	r1, r6
 8006916:	4658      	mov	r0, fp
 8006918:	f003 fb84 	bl	800a024 <__sprint_r>
 800691c:	2800      	cmp	r0, #0
 800691e:	f47f aa5b 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006922:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006924:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006926:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800692a:	e7e2      	b.n	80068f2 <_vfprintf_r+0xd7a>
 800692c:	9907      	ldr	r1, [sp, #28]
 800692e:	f011 0210 	ands.w	r2, r1, #16
 8006932:	d020      	beq.n	8006976 <_vfprintf_r+0xdfe>
 8006934:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006936:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800693a:	f1bb 0f00 	cmp.w	fp, #0
 800693e:	6804      	ldr	r4, [r0, #0]
 8006940:	f100 0704 	add.w	r7, r0, #4
 8006944:	f04f 0500 	mov.w	r5, #0
 8006948:	db26      	blt.n	8006998 <_vfprintf_r+0xe20>
 800694a:	460a      	mov	r2, r1
 800694c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006950:	9207      	str	r2, [sp, #28]
 8006952:	ea54 0205 	orrs.w	r2, r4, r5
 8006956:	970e      	str	r7, [sp, #56]	; 0x38
 8006958:	461f      	mov	r7, r3
 800695a:	f47f ab03 	bne.w	8005f64 <_vfprintf_r+0x3ec>
 800695e:	e4bd      	b.n	80062dc <_vfprintf_r+0x764>
 8006960:	3301      	adds	r3, #1
 8006962:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006964:	9328      	str	r3, [sp, #160]	; 0xa0
 8006966:	442c      	add	r4, r5
 8006968:	2b07      	cmp	r3, #7
 800696a:	9429      	str	r4, [sp, #164]	; 0xa4
 800696c:	e889 0024 	stmia.w	r9, {r2, r5}
 8006970:	f77f abde 	ble.w	8006130 <_vfprintf_r+0x5b8>
 8006974:	e6fa      	b.n	800676c <_vfprintf_r+0xbf4>
 8006976:	9907      	ldr	r1, [sp, #28]
 8006978:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 800697c:	f040 824a 	bne.w	8006e14 <_vfprintf_r+0x129c>
 8006980:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006982:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006986:	f1bb 0f00 	cmp.w	fp, #0
 800698a:	680c      	ldr	r4, [r1, #0]
 800698c:	f101 0704 	add.w	r7, r1, #4
 8006990:	f04f 0500 	mov.w	r5, #0
 8006994:	f280 811a 	bge.w	8006bcc <_vfprintf_r+0x1054>
 8006998:	970e      	str	r7, [sp, #56]	; 0x38
 800699a:	461f      	mov	r7, r3
 800699c:	ea54 0305 	orrs.w	r3, r4, r5
 80069a0:	f47f aae0 	bne.w	8005f64 <_vfprintf_r+0x3ec>
 80069a4:	ae44      	add	r6, sp, #272	; 0x110
 80069a6:	3430      	adds	r4, #48	; 0x30
 80069a8:	f806 4d41 	strb.w	r4, [r6, #-65]!
 80069ac:	f7ff baf4 	b.w	8005f98 <_vfprintf_r+0x420>
 80069b0:	aa27      	add	r2, sp, #156	; 0x9c
 80069b2:	9908      	ldr	r1, [sp, #32]
 80069b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80069b6:	f003 fb35 	bl	800a024 <__sprint_r>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	f47f aa0c 	bne.w	8005dd8 <_vfprintf_r+0x260>
 80069c0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80069c2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80069c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80069c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069ca:	4432      	add	r2, r6
 80069cc:	4617      	mov	r7, r2
 80069ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069d0:	4293      	cmp	r3, r2
 80069d2:	db47      	blt.n	8006a64 <_vfprintf_r+0xeec>
 80069d4:	9a07      	ldr	r2, [sp, #28]
 80069d6:	07d2      	lsls	r2, r2, #31
 80069d8:	d444      	bmi.n	8006a64 <_vfprintf_r+0xeec>
 80069da:	9912      	ldr	r1, [sp, #72]	; 0x48
 80069dc:	440e      	add	r6, r1
 80069de:	1bf5      	subs	r5, r6, r7
 80069e0:	1acb      	subs	r3, r1, r3
 80069e2:	429d      	cmp	r5, r3
 80069e4:	bfa8      	it	ge
 80069e6:	461d      	movge	r5, r3
 80069e8:	2d00      	cmp	r5, #0
 80069ea:	462e      	mov	r6, r5
 80069ec:	dd0d      	ble.n	8006a0a <_vfprintf_r+0xe92>
 80069ee:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80069f0:	f8c9 7000 	str.w	r7, [r9]
 80069f4:	3201      	adds	r2, #1
 80069f6:	442c      	add	r4, r5
 80069f8:	2a07      	cmp	r2, #7
 80069fa:	9429      	str	r4, [sp, #164]	; 0xa4
 80069fc:	f8c9 5004 	str.w	r5, [r9, #4]
 8006a00:	9228      	str	r2, [sp, #160]	; 0xa0
 8006a02:	f300 832e 	bgt.w	8007062 <_vfprintf_r+0x14ea>
 8006a06:	f109 0908 	add.w	r9, r9, #8
 8006a0a:	2e00      	cmp	r6, #0
 8006a0c:	bfac      	ite	ge
 8006a0e:	1b9d      	subge	r5, r3, r6
 8006a10:	461d      	movlt	r5, r3
 8006a12:	2d00      	cmp	r5, #0
 8006a14:	f77f ab8e 	ble.w	8006134 <_vfprintf_r+0x5bc>
 8006a18:	4a45      	ldr	r2, [pc, #276]	; (8006b30 <_vfprintf_r+0xfb8>)
 8006a1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006a1c:	920f      	str	r2, [sp, #60]	; 0x3c
 8006a1e:	2d10      	cmp	r5, #16
 8006a20:	dd9e      	ble.n	8006960 <_vfprintf_r+0xde8>
 8006a22:	2610      	movs	r6, #16
 8006a24:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006a26:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006a2a:	e004      	b.n	8006a36 <_vfprintf_r+0xebe>
 8006a2c:	f109 0908 	add.w	r9, r9, #8
 8006a30:	3d10      	subs	r5, #16
 8006a32:	2d10      	cmp	r5, #16
 8006a34:	dd94      	ble.n	8006960 <_vfprintf_r+0xde8>
 8006a36:	3301      	adds	r3, #1
 8006a38:	3410      	adds	r4, #16
 8006a3a:	2b07      	cmp	r3, #7
 8006a3c:	9429      	str	r4, [sp, #164]	; 0xa4
 8006a3e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006a40:	f8c9 a000 	str.w	sl, [r9]
 8006a44:	f8c9 6004 	str.w	r6, [r9, #4]
 8006a48:	ddf0      	ble.n	8006a2c <_vfprintf_r+0xeb4>
 8006a4a:	aa27      	add	r2, sp, #156	; 0x9c
 8006a4c:	4659      	mov	r1, fp
 8006a4e:	4638      	mov	r0, r7
 8006a50:	f003 fae8 	bl	800a024 <__sprint_r>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	f47f a9bf 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006a5a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006a5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006a5e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006a62:	e7e5      	b.n	8006a30 <_vfprintf_r+0xeb8>
 8006a64:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8006a66:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006a68:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006a6a:	f8c9 1000 	str.w	r1, [r9]
 8006a6e:	3201      	adds	r2, #1
 8006a70:	4404      	add	r4, r0
 8006a72:	2a07      	cmp	r2, #7
 8006a74:	9429      	str	r4, [sp, #164]	; 0xa4
 8006a76:	f8c9 0004 	str.w	r0, [r9, #4]
 8006a7a:	9228      	str	r2, [sp, #160]	; 0xa0
 8006a7c:	f300 82cf 	bgt.w	800701e <_vfprintf_r+0x14a6>
 8006a80:	f109 0908 	add.w	r9, r9, #8
 8006a84:	e7a9      	b.n	80069da <_vfprintf_r+0xe62>
 8006a86:	9b07      	ldr	r3, [sp, #28]
 8006a88:	07df      	lsls	r7, r3, #31
 8006a8a:	f53f ae2c 	bmi.w	80066e6 <_vfprintf_r+0xb6e>
 8006a8e:	3501      	adds	r5, #1
 8006a90:	3401      	adds	r4, #1
 8006a92:	2301      	movs	r3, #1
 8006a94:	2d07      	cmp	r5, #7
 8006a96:	9429      	str	r4, [sp, #164]	; 0xa4
 8006a98:	9528      	str	r5, [sp, #160]	; 0xa0
 8006a9a:	f8c9 6000 	str.w	r6, [r9]
 8006a9e:	f8c9 3004 	str.w	r3, [r9, #4]
 8006aa2:	f77f ae54 	ble.w	800674e <_vfprintf_r+0xbd6>
 8006aa6:	aa27      	add	r2, sp, #156	; 0x9c
 8006aa8:	9908      	ldr	r1, [sp, #32]
 8006aaa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006aac:	f003 faba 	bl	800a024 <__sprint_r>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	f47f a991 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006ab6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006ab8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006aba:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006abe:	e648      	b.n	8006752 <_vfprintf_r+0xbda>
 8006ac0:	aa27      	add	r2, sp, #156	; 0x9c
 8006ac2:	9908      	ldr	r1, [sp, #32]
 8006ac4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ac6:	f003 faad 	bl	800a024 <__sprint_r>
 8006aca:	2800      	cmp	r0, #0
 8006acc:	f47f a984 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006ad0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006ad2:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006ad4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006ad8:	e613      	b.n	8006702 <_vfprintf_r+0xb8a>
 8006ada:	aa27      	add	r2, sp, #156	; 0x9c
 8006adc:	9908      	ldr	r1, [sp, #32]
 8006ade:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ae0:	f003 faa0 	bl	800a024 <__sprint_r>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	f47f a977 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006aea:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006aec:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006aee:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006af2:	e615      	b.n	8006720 <_vfprintf_r+0xba8>
 8006af4:	2400      	movs	r4, #0
 8006af6:	e755      	b.n	80069a4 <_vfprintf_r+0xe2c>
 8006af8:	4646      	mov	r6, r8
 8006afa:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8006afe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b00:	3501      	adds	r5, #1
 8006b02:	4434      	add	r4, r6
 8006b04:	2d07      	cmp	r5, #7
 8006b06:	9429      	str	r4, [sp, #164]	; 0xa4
 8006b08:	9528      	str	r5, [sp, #160]	; 0xa0
 8006b0a:	e889 0048 	stmia.w	r9, {r3, r6}
 8006b0e:	f77f ae1e 	ble.w	800674e <_vfprintf_r+0xbd6>
 8006b12:	e7c8      	b.n	8006aa6 <_vfprintf_r+0xf2e>
 8006b14:	aa27      	add	r2, sp, #156	; 0x9c
 8006b16:	9908      	ldr	r1, [sp, #32]
 8006b18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b1a:	f003 fa83 	bl	800a024 <__sprint_r>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f47f a95a 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006b24:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006b26:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006b2a:	f7ff bab7 	b.w	800609c <_vfprintf_r+0x524>
 8006b2e:	bf00      	nop
 8006b30:	0800a978 	.word	0x0800a978
 8006b34:	4264      	negs	r4, r4
 8006b36:	f04f 072d 	mov.w	r7, #45	; 0x2d
 8006b3a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8006b3e:	f1bb 0f00 	cmp.w	fp, #0
 8006b42:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006b46:	f6ff aa0d 	blt.w	8005f64 <_vfprintf_r+0x3ec>
 8006b4a:	9b07      	ldr	r3, [sp, #28]
 8006b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b50:	9307      	str	r3, [sp, #28]
 8006b52:	f7ff ba07 	b.w	8005f64 <_vfprintf_r+0x3ec>
 8006b56:	9907      	ldr	r1, [sp, #28]
 8006b58:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8006b5c:	d017      	beq.n	8006b8e <_vfprintf_r+0x1016>
 8006b5e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006b60:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8006b64:	4603      	mov	r3, r0
 8006b66:	f1bb 0f00 	cmp.w	fp, #0
 8006b6a:	f103 0304 	add.w	r3, r3, #4
 8006b6e:	8804      	ldrh	r4, [r0, #0]
 8006b70:	f04f 0500 	mov.w	r5, #0
 8006b74:	f2c0 831b 	blt.w	80071ae <_vfprintf_r+0x1636>
 8006b78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b7c:	9107      	str	r1, [sp, #28]
 8006b7e:	ea54 0105 	orrs.w	r1, r4, r5
 8006b82:	930e      	str	r3, [sp, #56]	; 0x38
 8006b84:	f43f ace1 	beq.w	800654a <_vfprintf_r+0x9d2>
 8006b88:	4617      	mov	r7, r2
 8006b8a:	f7ff b95c 	b.w	8005e46 <_vfprintf_r+0x2ce>
 8006b8e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006b90:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006b94:	f1bb 0f00 	cmp.w	fp, #0
 8006b98:	680c      	ldr	r4, [r1, #0]
 8006b9a:	f101 0704 	add.w	r7, r1, #4
 8006b9e:	f04f 0500 	mov.w	r5, #0
 8006ba2:	db02      	blt.n	8006baa <_vfprintf_r+0x1032>
 8006ba4:	9a07      	ldr	r2, [sp, #28]
 8006ba6:	f7ff b9af 	b.w	8005f08 <_vfprintf_r+0x390>
 8006baa:	970e      	str	r7, [sp, #56]	; 0x38
 8006bac:	2700      	movs	r7, #0
 8006bae:	f7ff b94a 	b.w	8005e46 <_vfprintf_r+0x2ce>
 8006bb2:	9b07      	ldr	r3, [sp, #28]
 8006bb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bb6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006bba:	4613      	mov	r3, r2
 8006bbc:	f000 8142 	beq.w	8006e44 <_vfprintf_r+0x12cc>
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	8814      	ldrh	r4, [r2, #0]
 8006bc4:	930e      	str	r3, [sp, #56]	; 0x38
 8006bc6:	2500      	movs	r5, #0
 8006bc8:	f7ff bb1a 	b.w	8006200 <_vfprintf_r+0x688>
 8006bcc:	9a07      	ldr	r2, [sp, #28]
 8006bce:	e6bd      	b.n	800694c <_vfprintf_r+0xdd4>
 8006bd0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	f7fd f998 	bl	8003f0c <__aeabi_dcmpun>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	f040 82e8 	bne.w	80071b2 <_vfprintf_r+0x163a>
 8006be2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006be4:	f1bb 3fff 	cmp.w	fp, #4294967295
 8006be8:	f023 0720 	bic.w	r7, r3, #32
 8006bec:	f000 825f 	beq.w	80070ae <_vfprintf_r+0x1536>
 8006bf0:	2f47      	cmp	r7, #71	; 0x47
 8006bf2:	f000 8158 	beq.w	8006ea6 <_vfprintf_r+0x132e>
 8006bf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bf8:	9a07      	ldr	r2, [sp, #28]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c00:	920f      	str	r2, [sp, #60]	; 0x3c
 8006c02:	f2c0 825c 	blt.w	80070be <_vfprintf_r+0x1546>
 8006c06:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8006c0a:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8006c0e:	2300      	movs	r3, #0
 8006c10:	9309      	str	r3, [sp, #36]	; 0x24
 8006c12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c14:	2b66      	cmp	r3, #102	; 0x66
 8006c16:	f000 8233 	beq.w	8007080 <_vfprintf_r+0x1508>
 8006c1a:	2b46      	cmp	r3, #70	; 0x46
 8006c1c:	f000 8125 	beq.w	8006e6a <_vfprintf_r+0x12f2>
 8006c20:	2f45      	cmp	r7, #69	; 0x45
 8006c22:	bf0c      	ite	eq
 8006c24:	f10b 0501 	addeq.w	r5, fp, #1
 8006c28:	465d      	movne	r5, fp
 8006c2a:	a825      	add	r0, sp, #148	; 0x94
 8006c2c:	a922      	add	r1, sp, #136	; 0x88
 8006c2e:	aa21      	add	r2, sp, #132	; 0x84
 8006c30:	2302      	movs	r3, #2
 8006c32:	9004      	str	r0, [sp, #16]
 8006c34:	9202      	str	r2, [sp, #8]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	9501      	str	r5, [sp, #4]
 8006c3a:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8006c3e:	9103      	str	r1, [sp, #12]
 8006c40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006c42:	f000 fc89 	bl	8007558 <_dtoa_r>
 8006c46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c48:	2b67      	cmp	r3, #103	; 0x67
 8006c4a:	4606      	mov	r6, r0
 8006c4c:	f040 8275 	bne.w	800713a <_vfprintf_r+0x15c2>
 8006c50:	9b07      	ldr	r3, [sp, #28]
 8006c52:	07da      	lsls	r2, r3, #31
 8006c54:	f140 8294 	bpl.w	8007180 <_vfprintf_r+0x1608>
 8006c58:	1974      	adds	r4, r6, r5
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8006c62:	f7fd f921 	bl	8003ea8 <__aeabi_dcmpeq>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	f040 8178 	bne.w	8006f5c <_vfprintf_r+0x13e4>
 8006c6c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006c6e:	429c      	cmp	r4, r3
 8006c70:	d906      	bls.n	8006c80 <_vfprintf_r+0x1108>
 8006c72:	2130      	movs	r1, #48	; 0x30
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	9225      	str	r2, [sp, #148]	; 0x94
 8006c78:	7019      	strb	r1, [r3, #0]
 8006c7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006c7c:	429c      	cmp	r4, r3
 8006c7e:	d8f9      	bhi.n	8006c74 <_vfprintf_r+0x10fc>
 8006c80:	1b9b      	subs	r3, r3, r6
 8006c82:	2f47      	cmp	r7, #71	; 0x47
 8006c84:	9312      	str	r3, [sp, #72]	; 0x48
 8006c86:	f000 8156 	beq.w	8006f36 <_vfprintf_r+0x13be>
 8006c8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c8c:	2b65      	cmp	r3, #101	; 0x65
 8006c8e:	f340 8263 	ble.w	8007158 <_vfprintf_r+0x15e0>
 8006c92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c94:	2b66      	cmp	r3, #102	; 0x66
 8006c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c98:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c9a:	f000 8226 	beq.w	80070ea <_vfprintf_r+0x1572>
 8006c9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ca0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006ca2:	428a      	cmp	r2, r1
 8006ca4:	f2c0 8214 	blt.w	80070d0 <_vfprintf_r+0x1558>
 8006ca8:	9b07      	ldr	r3, [sp, #28]
 8006caa:	07db      	lsls	r3, r3, #31
 8006cac:	f100 826a 	bmi.w	8007184 <_vfprintf_r+0x160c>
 8006cb0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006cb4:	920d      	str	r2, [sp, #52]	; 0x34
 8006cb6:	2267      	movs	r2, #103	; 0x67
 8006cb8:	9211      	str	r2, [sp, #68]	; 0x44
 8006cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cbc:	2a00      	cmp	r2, #0
 8006cbe:	f040 8117 	bne.w	8006ef0 <_vfprintf_r+0x1378>
 8006cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cc6:	9307      	str	r3, [sp, #28]
 8006cc8:	4693      	mov	fp, r2
 8006cca:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006cce:	f7ff b96d 	b.w	8005fac <_vfprintf_r+0x434>
 8006cd2:	f027 0707 	bic.w	r7, r7, #7
 8006cd6:	ed97 7b00 	vldr	d7, [r7]
 8006cda:	f107 0308 	add.w	r3, r7, #8
 8006cde:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006ce2:	930e      	str	r3, [sp, #56]	; 0x38
 8006ce4:	f7ff bb77 	b.w	80063d6 <_vfprintf_r+0x85e>
 8006ce8:	9b07      	ldr	r3, [sp, #28]
 8006cea:	06de      	lsls	r6, r3, #27
 8006cec:	d40b      	bmi.n	8006d06 <_vfprintf_r+0x118e>
 8006cee:	9b07      	ldr	r3, [sp, #28]
 8006cf0:	065d      	lsls	r5, r3, #25
 8006cf2:	d508      	bpl.n	8006d06 <_vfprintf_r+0x118e>
 8006cf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cf6:	6813      	ldr	r3, [r2, #0]
 8006cf8:	3204      	adds	r2, #4
 8006cfa:	920e      	str	r2, [sp, #56]	; 0x38
 8006cfc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	f7fe bf7a 	b.w	8005bfa <_vfprintf_r+0x82>
 8006d06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d08:	6813      	ldr	r3, [r2, #0]
 8006d0a:	3204      	adds	r2, #4
 8006d0c:	920e      	str	r2, [sp, #56]	; 0x38
 8006d0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	f7fe bf72 	b.w	8005bfa <_vfprintf_r+0x82>
 8006d16:	2700      	movs	r7, #0
 8006d18:	45bb      	cmp	fp, r7
 8006d1a:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006d1e:	f6ff ac26 	blt.w	800656e <_vfprintf_r+0x9f6>
 8006d22:	9b07      	ldr	r3, [sp, #28]
 8006d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d28:	9307      	str	r3, [sp, #28]
 8006d2a:	f7ff bbf3 	b.w	8006514 <_vfprintf_r+0x99c>
 8006d2e:	4614      	mov	r4, r2
 8006d30:	3301      	adds	r3, #1
 8006d32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d34:	9328      	str	r3, [sp, #160]	; 0xa0
 8006d36:	442c      	add	r4, r5
 8006d38:	2b07      	cmp	r3, #7
 8006d3a:	9429      	str	r4, [sp, #164]	; 0xa4
 8006d3c:	e889 0024 	stmia.w	r9, {r2, r5}
 8006d40:	f73f ae36 	bgt.w	80069b0 <_vfprintf_r+0xe38>
 8006d44:	f109 0908 	add.w	r9, r9, #8
 8006d48:	e63d      	b.n	80069c6 <_vfprintf_r+0xe4e>
 8006d4a:	aa27      	add	r2, sp, #156	; 0x9c
 8006d4c:	9908      	ldr	r1, [sp, #32]
 8006d4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006d50:	f003 f968 	bl	800a024 <__sprint_r>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	f47f a83f 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006d5a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006d5c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006d60:	e427      	b.n	80065b2 <_vfprintf_r+0xa3a>
 8006d62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006d64:	4ab4      	ldr	r2, [pc, #720]	; (8007038 <_vfprintf_r+0x14c0>)
 8006d66:	f8c9 2000 	str.w	r2, [r9]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	3401      	adds	r4, #1
 8006d6e:	2201      	movs	r2, #1
 8006d70:	2b07      	cmp	r3, #7
 8006d72:	9429      	str	r4, [sp, #164]	; 0xa4
 8006d74:	9328      	str	r3, [sp, #160]	; 0xa0
 8006d76:	f8c9 2004 	str.w	r2, [r9, #4]
 8006d7a:	dc69      	bgt.n	8006e50 <_vfprintf_r+0x12d8>
 8006d7c:	f109 0908 	add.w	r9, r9, #8
 8006d80:	b92d      	cbnz	r5, 8006d8e <_vfprintf_r+0x1216>
 8006d82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d84:	b91b      	cbnz	r3, 8006d8e <_vfprintf_r+0x1216>
 8006d86:	9b07      	ldr	r3, [sp, #28]
 8006d88:	07d9      	lsls	r1, r3, #31
 8006d8a:	f57f a9d3 	bpl.w	8006134 <_vfprintf_r+0x5bc>
 8006d8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006d90:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006d92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d94:	f8c9 2000 	str.w	r2, [r9]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	440c      	add	r4, r1
 8006d9c:	2b07      	cmp	r3, #7
 8006d9e:	9429      	str	r4, [sp, #164]	; 0xa4
 8006da0:	f8c9 1004 	str.w	r1, [r9, #4]
 8006da4:	9328      	str	r3, [sp, #160]	; 0xa0
 8006da6:	f300 81d9 	bgt.w	800715c <_vfprintf_r+0x15e4>
 8006daa:	f109 0908 	add.w	r9, r9, #8
 8006dae:	426d      	negs	r5, r5
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	f340 80b3 	ble.w	8006f1c <_vfprintf_r+0x13a4>
 8006db6:	4aa1      	ldr	r2, [pc, #644]	; (800703c <_vfprintf_r+0x14c4>)
 8006db8:	920f      	str	r2, [sp, #60]	; 0x3c
 8006dba:	2d10      	cmp	r5, #16
 8006dbc:	f340 8122 	ble.w	8007004 <_vfprintf_r+0x148c>
 8006dc0:	4622      	mov	r2, r4
 8006dc2:	2710      	movs	r7, #16
 8006dc4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006dc8:	9c08      	ldr	r4, [sp, #32]
 8006dca:	e005      	b.n	8006dd8 <_vfprintf_r+0x1260>
 8006dcc:	f109 0908 	add.w	r9, r9, #8
 8006dd0:	3d10      	subs	r5, #16
 8006dd2:	2d10      	cmp	r5, #16
 8006dd4:	f340 8115 	ble.w	8007002 <_vfprintf_r+0x148a>
 8006dd8:	3301      	adds	r3, #1
 8006dda:	3210      	adds	r2, #16
 8006ddc:	2b07      	cmp	r3, #7
 8006dde:	9229      	str	r2, [sp, #164]	; 0xa4
 8006de0:	9328      	str	r3, [sp, #160]	; 0xa0
 8006de2:	f8c9 a000 	str.w	sl, [r9]
 8006de6:	f8c9 7004 	str.w	r7, [r9, #4]
 8006dea:	ddef      	ble.n	8006dcc <_vfprintf_r+0x1254>
 8006dec:	aa27      	add	r2, sp, #156	; 0x9c
 8006dee:	4621      	mov	r1, r4
 8006df0:	4658      	mov	r0, fp
 8006df2:	f003 f917 	bl	800a024 <__sprint_r>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	f47e afee 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006dfc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006dfe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006e00:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006e04:	e7e4      	b.n	8006dd0 <_vfprintf_r+0x1258>
 8006e06:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006e08:	f7ff bbaa 	b.w	8006560 <_vfprintf_r+0x9e8>
 8006e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e10:	f7fe bfe8 	b.w	8005de4 <_vfprintf_r+0x26c>
 8006e14:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006e16:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	f1bb 0f00 	cmp.w	fp, #0
 8006e20:	f103 0304 	add.w	r3, r3, #4
 8006e24:	8804      	ldrh	r4, [r0, #0]
 8006e26:	f04f 0500 	mov.w	r5, #0
 8006e2a:	f2c0 81b4 	blt.w	8007196 <_vfprintf_r+0x161e>
 8006e2e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006e32:	9107      	str	r1, [sp, #28]
 8006e34:	ea54 0105 	orrs.w	r1, r4, r5
 8006e38:	930e      	str	r3, [sp, #56]	; 0x38
 8006e3a:	4617      	mov	r7, r2
 8006e3c:	f47f a892 	bne.w	8005f64 <_vfprintf_r+0x3ec>
 8006e40:	f7ff ba4c 	b.w	80062dc <_vfprintf_r+0x764>
 8006e44:	3304      	adds	r3, #4
 8006e46:	6814      	ldr	r4, [r2, #0]
 8006e48:	930e      	str	r3, [sp, #56]	; 0x38
 8006e4a:	2500      	movs	r5, #0
 8006e4c:	f7ff b9d8 	b.w	8006200 <_vfprintf_r+0x688>
 8006e50:	aa27      	add	r2, sp, #156	; 0x9c
 8006e52:	9908      	ldr	r1, [sp, #32]
 8006e54:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006e56:	f003 f8e5 	bl	800a024 <__sprint_r>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	f47e afbc 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006e60:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006e62:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006e64:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006e68:	e78a      	b.n	8006d80 <_vfprintf_r+0x1208>
 8006e6a:	a825      	add	r0, sp, #148	; 0x94
 8006e6c:	a922      	add	r1, sp, #136	; 0x88
 8006e6e:	aa21      	add	r2, sp, #132	; 0x84
 8006e70:	2303      	movs	r3, #3
 8006e72:	9004      	str	r0, [sp, #16]
 8006e74:	9202      	str	r2, [sp, #8]
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	f8cd b004 	str.w	fp, [sp, #4]
 8006e7c:	9103      	str	r1, [sp, #12]
 8006e7e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8006e82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006e84:	f000 fb68 	bl	8007558 <_dtoa_r>
 8006e88:	465d      	mov	r5, fp
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e8e:	2b46      	cmp	r3, #70	; 0x46
 8006e90:	eb06 0405 	add.w	r4, r6, r5
 8006e94:	f47f aee1 	bne.w	8006c5a <_vfprintf_r+0x10e2>
 8006e98:	7833      	ldrb	r3, [r6, #0]
 8006e9a:	2b30      	cmp	r3, #48	; 0x30
 8006e9c:	f000 8198 	beq.w	80071d0 <_vfprintf_r+0x1658>
 8006ea0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006ea2:	442c      	add	r4, r5
 8006ea4:	e6d9      	b.n	8006c5a <_vfprintf_r+0x10e2>
 8006ea6:	f1bb 0f00 	cmp.w	fp, #0
 8006eaa:	bf08      	it	eq
 8006eac:	f04f 0b01 	moveq.w	fp, #1
 8006eb0:	e6a1      	b.n	8006bf6 <_vfprintf_r+0x107e>
 8006eb2:	9b07      	ldr	r3, [sp, #28]
 8006eb4:	f043 0320 	orr.w	r3, r3, #32
 8006eb8:	9307      	str	r3, [sp, #28]
 8006eba:	f108 0801 	add.w	r8, r8, #1
 8006ebe:	f898 3000 	ldrb.w	r3, [r8]
 8006ec2:	f7fe becd 	b.w	8005c60 <_vfprintf_r+0xe8>
 8006ec6:	aa27      	add	r2, sp, #156	; 0x9c
 8006ec8:	9908      	ldr	r1, [sp, #32]
 8006eca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ecc:	f003 f8aa 	bl	800a024 <__sprint_r>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	f47e af81 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006ed6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006ed8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006edc:	f7ff bb81 	b.w	80065e2 <_vfprintf_r+0xa6a>
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	f7fd fa0d 	bl	8004300 <strlen>
 8006ee6:	46a3      	mov	fp, r4
 8006ee8:	4603      	mov	r3, r0
 8006eea:	900d      	str	r0, [sp, #52]	; 0x34
 8006eec:	f7ff bb01 	b.w	80064f2 <_vfprintf_r+0x97a>
 8006ef0:	272d      	movs	r7, #45	; 0x2d
 8006ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ef6:	9307      	str	r3, [sp, #28]
 8006ef8:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006efc:	f04f 0b00 	mov.w	fp, #0
 8006f00:	f7ff b855 	b.w	8005fae <_vfprintf_r+0x436>
 8006f04:	aa27      	add	r2, sp, #156	; 0x9c
 8006f06:	9908      	ldr	r1, [sp, #32]
 8006f08:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f0a:	f003 f88b 	bl	800a024 <__sprint_r>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	f47e af62 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006f14:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006f16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006f18:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006f1c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006f1e:	f8c9 6000 	str.w	r6, [r9]
 8006f22:	3301      	adds	r3, #1
 8006f24:	440c      	add	r4, r1
 8006f26:	2b07      	cmp	r3, #7
 8006f28:	9429      	str	r4, [sp, #164]	; 0xa4
 8006f2a:	9328      	str	r3, [sp, #160]	; 0xa0
 8006f2c:	f8c9 1004 	str.w	r1, [r9, #4]
 8006f30:	f77f a8fe 	ble.w	8006130 <_vfprintf_r+0x5b8>
 8006f34:	e41a      	b.n	800676c <_vfprintf_r+0xbf4>
 8006f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f38:	1cd8      	adds	r0, r3, #3
 8006f3a:	db11      	blt.n	8006f60 <_vfprintf_r+0x13e8>
 8006f3c:	459b      	cmp	fp, r3
 8006f3e:	db0f      	blt.n	8006f60 <_vfprintf_r+0x13e8>
 8006f40:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f42:	e6ac      	b.n	8006c9e <_vfprintf_r+0x1126>
 8006f44:	aa27      	add	r2, sp, #156	; 0x9c
 8006f46:	9908      	ldr	r1, [sp, #32]
 8006f48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f4a:	f003 f86b 	bl	800a024 <__sprint_r>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	f47e af42 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8006f54:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006f56:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006f5a:	e46e      	b.n	800683a <_vfprintf_r+0xcc2>
 8006f5c:	4623      	mov	r3, r4
 8006f5e:	e68f      	b.n	8006c80 <_vfprintf_r+0x1108>
 8006f60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006f62:	3a02      	subs	r2, #2
 8006f64:	9211      	str	r2, [sp, #68]	; 0x44
 8006f66:	3b01      	subs	r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8006f6e:	9321      	str	r3, [sp, #132]	; 0x84
 8006f70:	bfb8      	it	lt
 8006f72:	425b      	neglt	r3, r3
 8006f74:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8006f78:	bfb4      	ite	lt
 8006f7a:	222d      	movlt	r2, #45	; 0x2d
 8006f7c:	222b      	movge	r2, #43	; 0x2b
 8006f7e:	2b09      	cmp	r3, #9
 8006f80:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8006f84:	f340 810b 	ble.w	800719e <_vfprintf_r+0x1626>
 8006f88:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	4a2c      	ldr	r2, [pc, #176]	; (8007040 <_vfprintf_r+0x14c8>)
 8006f90:	fb82 2103 	smull	r2, r1, r2, r3
 8006f94:	17da      	asrs	r2, r3, #31
 8006f96:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8006f9a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006f9e:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8006fa2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006fa6:	2a09      	cmp	r2, #9
 8006fa8:	4613      	mov	r3, r2
 8006faa:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8006fae:	dcee      	bgt.n	8006f8e <_vfprintf_r+0x1416>
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	3330      	adds	r3, #48	; 0x30
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8006fba:	4288      	cmp	r0, r1
 8006fbc:	f240 816f 	bls.w	800729e <_vfprintf_r+0x1726>
 8006fc0:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8006fc4:	4623      	mov	r3, r4
 8006fc6:	e001      	b.n	8006fcc <_vfprintf_r+0x1454>
 8006fc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fcc:	f801 2b01 	strb.w	r2, [r1], #1
 8006fd0:	4298      	cmp	r0, r3
 8006fd2:	d1f9      	bne.n	8006fc8 <_vfprintf_r+0x1450>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	1b1b      	subs	r3, r3, r4
 8006fd8:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 8006fdc:	4413      	add	r3, r2
 8006fde:	aa23      	add	r2, sp, #140	; 0x8c
 8006fe0:	1a9b      	subs	r3, r3, r2
 8006fe2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fe4:	9319      	str	r3, [sp, #100]	; 0x64
 8006fe6:	2a01      	cmp	r2, #1
 8006fe8:	4413      	add	r3, r2
 8006fea:	930d      	str	r3, [sp, #52]	; 0x34
 8006fec:	f340 80fe 	ble.w	80071ec <_vfprintf_r+0x1674>
 8006ff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ff2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006ff4:	4413      	add	r3, r2
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	930d      	str	r3, [sp, #52]	; 0x34
 8006ffa:	9213      	str	r2, [sp, #76]	; 0x4c
 8006ffc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007000:	e65b      	b.n	8006cba <_vfprintf_r+0x1142>
 8007002:	4614      	mov	r4, r2
 8007004:	3301      	adds	r3, #1
 8007006:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007008:	9328      	str	r3, [sp, #160]	; 0xa0
 800700a:	442c      	add	r4, r5
 800700c:	2b07      	cmp	r3, #7
 800700e:	9429      	str	r4, [sp, #164]	; 0xa4
 8007010:	e889 0024 	stmia.w	r9, {r2, r5}
 8007014:	f73f af76 	bgt.w	8006f04 <_vfprintf_r+0x138c>
 8007018:	f109 0908 	add.w	r9, r9, #8
 800701c:	e77e      	b.n	8006f1c <_vfprintf_r+0x13a4>
 800701e:	aa27      	add	r2, sp, #156	; 0x9c
 8007020:	9908      	ldr	r1, [sp, #32]
 8007022:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007024:	f002 fffe 	bl	800a024 <__sprint_r>
 8007028:	2800      	cmp	r0, #0
 800702a:	f47e aed5 	bne.w	8005dd8 <_vfprintf_r+0x260>
 800702e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007030:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007032:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007036:	e4d0      	b.n	80069da <_vfprintf_r+0xe62>
 8007038:	0800a964 	.word	0x0800a964
 800703c:	0800a978 	.word	0x0800a978
 8007040:	66666667 	.word	0x66666667
 8007044:	2d06      	cmp	r5, #6
 8007046:	462b      	mov	r3, r5
 8007048:	bf28      	it	cs
 800704a:	2306      	movcs	r3, #6
 800704c:	930d      	str	r3, [sp, #52]	; 0x34
 800704e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007052:	46b3      	mov	fp, r6
 8007054:	970e      	str	r7, [sp, #56]	; 0x38
 8007056:	9613      	str	r6, [sp, #76]	; 0x4c
 8007058:	4637      	mov	r7, r6
 800705a:	9309      	str	r3, [sp, #36]	; 0x24
 800705c:	4e91      	ldr	r6, [pc, #580]	; (80072a4 <_vfprintf_r+0x172c>)
 800705e:	f7fe bfa5 	b.w	8005fac <_vfprintf_r+0x434>
 8007062:	aa27      	add	r2, sp, #156	; 0x9c
 8007064:	9908      	ldr	r1, [sp, #32]
 8007066:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007068:	f002 ffdc 	bl	800a024 <__sprint_r>
 800706c:	2800      	cmp	r0, #0
 800706e:	f47e aeb3 	bne.w	8005dd8 <_vfprintf_r+0x260>
 8007072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007074:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007076:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800707e:	e4c4      	b.n	8006a0a <_vfprintf_r+0xe92>
 8007080:	a825      	add	r0, sp, #148	; 0x94
 8007082:	a922      	add	r1, sp, #136	; 0x88
 8007084:	aa21      	add	r2, sp, #132	; 0x84
 8007086:	2303      	movs	r3, #3
 8007088:	9004      	str	r0, [sp, #16]
 800708a:	9202      	str	r2, [sp, #8]
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	f8cd b004 	str.w	fp, [sp, #4]
 8007092:	9103      	str	r1, [sp, #12]
 8007094:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8007098:	980a      	ldr	r0, [sp, #40]	; 0x28
 800709a:	f000 fa5d 	bl	8007558 <_dtoa_r>
 800709e:	465d      	mov	r5, fp
 80070a0:	4606      	mov	r6, r0
 80070a2:	eb00 040b 	add.w	r4, r0, fp
 80070a6:	e6f7      	b.n	8006e98 <_vfprintf_r+0x1320>
 80070a8:	9307      	str	r3, [sp, #28]
 80070aa:	f7ff b8c7 	b.w	800623c <_vfprintf_r+0x6c4>
 80070ae:	f04f 0b06 	mov.w	fp, #6
 80070b2:	e5a0      	b.n	8006bf6 <_vfprintf_r+0x107e>
 80070b4:	272d      	movs	r7, #45	; 0x2d
 80070b6:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80070ba:	f7ff b9b3 	b.w	8006424 <_vfprintf_r+0x8ac>
 80070be:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 80070c2:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 80070c6:	931d      	str	r3, [sp, #116]	; 0x74
 80070c8:	232d      	movs	r3, #45	; 0x2d
 80070ca:	911c      	str	r1, [sp, #112]	; 0x70
 80070cc:	9309      	str	r3, [sp, #36]	; 0x24
 80070ce:	e5a0      	b.n	8006c12 <_vfprintf_r+0x109a>
 80070d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80070d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070d4:	4413      	add	r3, r2
 80070d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070d8:	930d      	str	r3, [sp, #52]	; 0x34
 80070da:	2a00      	cmp	r2, #0
 80070dc:	f340 8090 	ble.w	8007200 <_vfprintf_r+0x1688>
 80070e0:	2267      	movs	r2, #103	; 0x67
 80070e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80070e6:	9211      	str	r2, [sp, #68]	; 0x44
 80070e8:	e5e7      	b.n	8006cba <_vfprintf_r+0x1142>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f340 8090 	ble.w	8007210 <_vfprintf_r+0x1698>
 80070f0:	f1bb 0f00 	cmp.w	fp, #0
 80070f4:	d163      	bne.n	80071be <_vfprintf_r+0x1646>
 80070f6:	9a07      	ldr	r2, [sp, #28]
 80070f8:	07d1      	lsls	r1, r2, #31
 80070fa:	d460      	bmi.n	80071be <_vfprintf_r+0x1646>
 80070fc:	461a      	mov	r2, r3
 80070fe:	920d      	str	r2, [sp, #52]	; 0x34
 8007100:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007104:	e5d9      	b.n	8006cba <_vfprintf_r+0x1142>
 8007106:	9b07      	ldr	r3, [sp, #28]
 8007108:	07db      	lsls	r3, r3, #31
 800710a:	465f      	mov	r7, fp
 800710c:	d505      	bpl.n	800711a <_vfprintf_r+0x15a2>
 800710e:	ae44      	add	r6, sp, #272	; 0x110
 8007110:	2330      	movs	r3, #48	; 0x30
 8007112:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8007116:	f7fe bf3f 	b.w	8005f98 <_vfprintf_r+0x420>
 800711a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 800711e:	ae34      	add	r6, sp, #208	; 0xd0
 8007120:	f7fe bf3d 	b.w	8005f9e <_vfprintf_r+0x426>
 8007124:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007128:	970e      	str	r7, [sp, #56]	; 0x38
 800712a:	9309      	str	r3, [sp, #36]	; 0x24
 800712c:	950d      	str	r5, [sp, #52]	; 0x34
 800712e:	4683      	mov	fp, r0
 8007130:	9013      	str	r0, [sp, #76]	; 0x4c
 8007132:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8007136:	f7fe bf39 	b.w	8005fac <_vfprintf_r+0x434>
 800713a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800713c:	2b47      	cmp	r3, #71	; 0x47
 800713e:	f47f ad8b 	bne.w	8006c58 <_vfprintf_r+0x10e0>
 8007142:	9b07      	ldr	r3, [sp, #28]
 8007144:	07dc      	lsls	r4, r3, #31
 8007146:	f53f aea1 	bmi.w	8006e8c <_vfprintf_r+0x1314>
 800714a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800714c:	2f47      	cmp	r7, #71	; 0x47
 800714e:	eba3 0306 	sub.w	r3, r3, r6
 8007152:	9312      	str	r3, [sp, #72]	; 0x48
 8007154:	f43f aeef 	beq.w	8006f36 <_vfprintf_r+0x13be>
 8007158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800715a:	e704      	b.n	8006f66 <_vfprintf_r+0x13ee>
 800715c:	aa27      	add	r2, sp, #156	; 0x9c
 800715e:	9908      	ldr	r1, [sp, #32]
 8007160:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007162:	f002 ff5f 	bl	800a024 <__sprint_r>
 8007166:	2800      	cmp	r0, #0
 8007168:	f47e ae36 	bne.w	8005dd8 <_vfprintf_r+0x260>
 800716c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800716e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007170:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007172:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007176:	e61a      	b.n	8006dae <_vfprintf_r+0x1236>
 8007178:	46a0      	mov	r8, r4
 800717a:	2500      	movs	r5, #0
 800717c:	f7fe bd72 	b.w	8005c64 <_vfprintf_r+0xec>
 8007180:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007182:	e57d      	b.n	8006c80 <_vfprintf_r+0x1108>
 8007184:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007186:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007188:	4413      	add	r3, r2
 800718a:	2267      	movs	r2, #103	; 0x67
 800718c:	930d      	str	r3, [sp, #52]	; 0x34
 800718e:	9211      	str	r2, [sp, #68]	; 0x44
 8007190:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007194:	e591      	b.n	8006cba <_vfprintf_r+0x1142>
 8007196:	930e      	str	r3, [sp, #56]	; 0x38
 8007198:	4617      	mov	r7, r2
 800719a:	f7ff bbff 	b.w	800699c <_vfprintf_r+0xe24>
 800719e:	3330      	adds	r3, #48	; 0x30
 80071a0:	2230      	movs	r2, #48	; 0x30
 80071a2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 80071a6:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 80071aa:	ab24      	add	r3, sp, #144	; 0x90
 80071ac:	e717      	b.n	8006fde <_vfprintf_r+0x1466>
 80071ae:	930e      	str	r3, [sp, #56]	; 0x38
 80071b0:	e4fc      	b.n	8006bac <_vfprintf_r+0x1034>
 80071b2:	4e3d      	ldr	r6, [pc, #244]	; (80072a8 <_vfprintf_r+0x1730>)
 80071b4:	4b3d      	ldr	r3, [pc, #244]	; (80072ac <_vfprintf_r+0x1734>)
 80071b6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80071ba:	f7ff b935 	b.w	8006428 <_vfprintf_r+0x8b0>
 80071be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80071c2:	189d      	adds	r5, r3, r2
 80071c4:	eb05 030b 	add.w	r3, r5, fp
 80071c8:	930d      	str	r3, [sp, #52]	; 0x34
 80071ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80071ce:	e574      	b.n	8006cba <_vfprintf_r+0x1142>
 80071d0:	2200      	movs	r2, #0
 80071d2:	2300      	movs	r3, #0
 80071d4:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80071d8:	f7fc fe66 	bl	8003ea8 <__aeabi_dcmpeq>
 80071dc:	2800      	cmp	r0, #0
 80071de:	f47f ae5f 	bne.w	8006ea0 <_vfprintf_r+0x1328>
 80071e2:	f1c5 0501 	rsb	r5, r5, #1
 80071e6:	9521      	str	r5, [sp, #132]	; 0x84
 80071e8:	442c      	add	r4, r5
 80071ea:	e536      	b.n	8006c5a <_vfprintf_r+0x10e2>
 80071ec:	9b07      	ldr	r3, [sp, #28]
 80071ee:	f013 0301 	ands.w	r3, r3, #1
 80071f2:	f47f aefd 	bne.w	8006ff0 <_vfprintf_r+0x1478>
 80071f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80071f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80071fe:	e55c      	b.n	8006cba <_vfprintf_r+0x1142>
 8007200:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007202:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007204:	f1c3 0301 	rsb	r3, r3, #1
 8007208:	441a      	add	r2, r3
 800720a:	4613      	mov	r3, r2
 800720c:	920d      	str	r2, [sp, #52]	; 0x34
 800720e:	e767      	b.n	80070e0 <_vfprintf_r+0x1568>
 8007210:	f1bb 0f00 	cmp.w	fp, #0
 8007214:	d102      	bne.n	800721c <_vfprintf_r+0x16a4>
 8007216:	9b07      	ldr	r3, [sp, #28]
 8007218:	07da      	lsls	r2, r3, #31
 800721a:	d507      	bpl.n	800722c <_vfprintf_r+0x16b4>
 800721c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800721e:	1c5d      	adds	r5, r3, #1
 8007220:	eb05 030b 	add.w	r3, r5, fp
 8007224:	930d      	str	r3, [sp, #52]	; 0x34
 8007226:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800722a:	e546      	b.n	8006cba <_vfprintf_r+0x1142>
 800722c:	2301      	movs	r3, #1
 800722e:	930d      	str	r3, [sp, #52]	; 0x34
 8007230:	e543      	b.n	8006cba <_vfprintf_r+0x1142>
 8007232:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007234:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007238:	6805      	ldr	r5, [r0, #0]
 800723a:	3004      	adds	r0, #4
 800723c:	2d00      	cmp	r5, #0
 800723e:	900e      	str	r0, [sp, #56]	; 0x38
 8007240:	46a0      	mov	r8, r4
 8007242:	f6be ad0d 	bge.w	8005c60 <_vfprintf_r+0xe8>
 8007246:	f04f 35ff 	mov.w	r5, #4294967295
 800724a:	f7fe bd09 	b.w	8005c60 <_vfprintf_r+0xe8>
 800724e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007252:	f7ff b893 	b.w	800637c <_vfprintf_r+0x804>
 8007256:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800725a:	f7ff b85d 	b.w	8006318 <_vfprintf_r+0x7a0>
 800725e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007262:	f7fe bfbf 	b.w	80061e4 <_vfprintf_r+0x66c>
 8007266:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800726a:	f7fe be5c 	b.w	8005f26 <_vfprintf_r+0x3ae>
 800726e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007272:	f7ff b812 	b.w	800629a <_vfprintf_r+0x722>
 8007276:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800727a:	f7fe bdca 	b.w	8005e12 <_vfprintf_r+0x29a>
 800727e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007282:	f7ff b951 	b.w	8006528 <_vfprintf_r+0x9b0>
 8007286:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800728a:	f7fe be23 	b.w	8005ed4 <_vfprintf_r+0x35c>
 800728e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007292:	f7ff b8ed 	b.w	8006470 <_vfprintf_r+0x8f8>
 8007296:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800729a:	f7ff b88c 	b.w	80063b6 <_vfprintf_r+0x83e>
 800729e:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 80072a2:	e69c      	b.n	8006fde <_vfprintf_r+0x1466>
 80072a4:	0800a95c 	.word	0x0800a95c
 80072a8:	0800a930 	.word	0x0800a930
 80072ac:	0800a92c 	.word	0x0800a92c

080072b0 <__sbprintf>:
 80072b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072b2:	460c      	mov	r4, r1
 80072b4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80072b8:	8989      	ldrh	r1, [r1, #12]
 80072ba:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80072bc:	89e5      	ldrh	r5, [r4, #14]
 80072be:	9619      	str	r6, [sp, #100]	; 0x64
 80072c0:	f021 0102 	bic.w	r1, r1, #2
 80072c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80072c6:	f8ad 500e 	strh.w	r5, [sp, #14]
 80072ca:	2500      	movs	r5, #0
 80072cc:	69e7      	ldr	r7, [r4, #28]
 80072ce:	f8ad 100c 	strh.w	r1, [sp, #12]
 80072d2:	9609      	str	r6, [sp, #36]	; 0x24
 80072d4:	9506      	str	r5, [sp, #24]
 80072d6:	ae1a      	add	r6, sp, #104	; 0x68
 80072d8:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80072dc:	4669      	mov	r1, sp
 80072de:	9600      	str	r6, [sp, #0]
 80072e0:	9604      	str	r6, [sp, #16]
 80072e2:	9502      	str	r5, [sp, #8]
 80072e4:	9505      	str	r5, [sp, #20]
 80072e6:	9707      	str	r7, [sp, #28]
 80072e8:	4606      	mov	r6, r0
 80072ea:	f7fe fc45 	bl	8005b78 <_vfprintf_r>
 80072ee:	1e05      	subs	r5, r0, #0
 80072f0:	db07      	blt.n	8007302 <__sbprintf+0x52>
 80072f2:	4630      	mov	r0, r6
 80072f4:	4669      	mov	r1, sp
 80072f6:	f001 f8e9 	bl	80084cc <_fflush_r>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	bf18      	it	ne
 80072fe:	f04f 35ff 	movne.w	r5, #4294967295
 8007302:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007306:	065b      	lsls	r3, r3, #25
 8007308:	d503      	bpl.n	8007312 <__sbprintf+0x62>
 800730a:	89a3      	ldrh	r3, [r4, #12]
 800730c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007310:	81a3      	strh	r3, [r4, #12]
 8007312:	4628      	mov	r0, r5
 8007314:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8007318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800731a:	bf00      	nop

0800731c <_vsprintf_r>:
 800731c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800731e:	b09b      	sub	sp, #108	; 0x6c
 8007320:	460d      	mov	r5, r1
 8007322:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8007326:	f44f 7702 	mov.w	r7, #520	; 0x208
 800732a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800732e:	4669      	mov	r1, sp
 8007330:	9500      	str	r5, [sp, #0]
 8007332:	9504      	str	r5, [sp, #16]
 8007334:	f8ad 700c 	strh.w	r7, [sp, #12]
 8007338:	9402      	str	r4, [sp, #8]
 800733a:	9405      	str	r4, [sp, #20]
 800733c:	f8ad 600e 	strh.w	r6, [sp, #14]
 8007340:	f7fd f89e 	bl	8004480 <_svfprintf_r>
 8007344:	9b00      	ldr	r3, [sp, #0]
 8007346:	2200      	movs	r2, #0
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	b01b      	add	sp, #108	; 0x6c
 800734c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800734e:	bf00      	nop

08007350 <vsprintf>:
 8007350:	b410      	push	{r4}
 8007352:	4c04      	ldr	r4, [pc, #16]	; (8007364 <vsprintf+0x14>)
 8007354:	4613      	mov	r3, r2
 8007356:	460a      	mov	r2, r1
 8007358:	4601      	mov	r1, r0
 800735a:	6820      	ldr	r0, [r4, #0]
 800735c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007360:	f7ff bfdc 	b.w	800731c <_vsprintf_r>
 8007364:	20000468 	.word	0x20000468

08007368 <__swsetup_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4b30      	ldr	r3, [pc, #192]	; (800742c <__swsetup_r+0xc4>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4605      	mov	r5, r0
 8007370:	460c      	mov	r4, r1
 8007372:	b113      	cbz	r3, 800737a <__swsetup_r+0x12>
 8007374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007376:	2a00      	cmp	r2, #0
 8007378:	d038      	beq.n	80073ec <__swsetup_r+0x84>
 800737a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800737e:	b293      	uxth	r3, r2
 8007380:	0718      	lsls	r0, r3, #28
 8007382:	d50c      	bpl.n	800739e <__swsetup_r+0x36>
 8007384:	6920      	ldr	r0, [r4, #16]
 8007386:	b1a8      	cbz	r0, 80073b4 <__swsetup_r+0x4c>
 8007388:	f013 0201 	ands.w	r2, r3, #1
 800738c:	d01e      	beq.n	80073cc <__swsetup_r+0x64>
 800738e:	6963      	ldr	r3, [r4, #20]
 8007390:	2200      	movs	r2, #0
 8007392:	425b      	negs	r3, r3
 8007394:	61a3      	str	r3, [r4, #24]
 8007396:	60a2      	str	r2, [r4, #8]
 8007398:	b1f0      	cbz	r0, 80073d8 <__swsetup_r+0x70>
 800739a:	2000      	movs	r0, #0
 800739c:	bd38      	pop	{r3, r4, r5, pc}
 800739e:	06d9      	lsls	r1, r3, #27
 80073a0:	d53c      	bpl.n	800741c <__swsetup_r+0xb4>
 80073a2:	0758      	lsls	r0, r3, #29
 80073a4:	d426      	bmi.n	80073f4 <__swsetup_r+0x8c>
 80073a6:	6920      	ldr	r0, [r4, #16]
 80073a8:	f042 0308 	orr.w	r3, r2, #8
 80073ac:	81a3      	strh	r3, [r4, #12]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d1e9      	bne.n	8007388 <__swsetup_r+0x20>
 80073b4:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80073b8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80073bc:	d0e4      	beq.n	8007388 <__swsetup_r+0x20>
 80073be:	4628      	mov	r0, r5
 80073c0:	4621      	mov	r1, r4
 80073c2:	f001 fc4f 	bl	8008c64 <__smakebuf_r>
 80073c6:	89a3      	ldrh	r3, [r4, #12]
 80073c8:	6920      	ldr	r0, [r4, #16]
 80073ca:	e7dd      	b.n	8007388 <__swsetup_r+0x20>
 80073cc:	0799      	lsls	r1, r3, #30
 80073ce:	bf58      	it	pl
 80073d0:	6962      	ldrpl	r2, [r4, #20]
 80073d2:	60a2      	str	r2, [r4, #8]
 80073d4:	2800      	cmp	r0, #0
 80073d6:	d1e0      	bne.n	800739a <__swsetup_r+0x32>
 80073d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073dc:	061a      	lsls	r2, r3, #24
 80073de:	d5dd      	bpl.n	800739c <__swsetup_r+0x34>
 80073e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073e4:	81a3      	strh	r3, [r4, #12]
 80073e6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	4618      	mov	r0, r3
 80073ee:	f001 f901 	bl	80085f4 <__sinit>
 80073f2:	e7c2      	b.n	800737a <__swsetup_r+0x12>
 80073f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80073f6:	b151      	cbz	r1, 800740e <__swsetup_r+0xa6>
 80073f8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80073fc:	4299      	cmp	r1, r3
 80073fe:	d004      	beq.n	800740a <__swsetup_r+0xa2>
 8007400:	4628      	mov	r0, r5
 8007402:	f001 f94f 	bl	80086a4 <_free_r>
 8007406:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800740a:	2300      	movs	r3, #0
 800740c:	6323      	str	r3, [r4, #48]	; 0x30
 800740e:	2300      	movs	r3, #0
 8007410:	6920      	ldr	r0, [r4, #16]
 8007412:	6063      	str	r3, [r4, #4]
 8007414:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8007418:	6020      	str	r0, [r4, #0]
 800741a:	e7c5      	b.n	80073a8 <__swsetup_r+0x40>
 800741c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007420:	2309      	movs	r3, #9
 8007422:	602b      	str	r3, [r5, #0]
 8007424:	f04f 30ff 	mov.w	r0, #4294967295
 8007428:	81a2      	strh	r2, [r4, #12]
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	20000468 	.word	0x20000468

08007430 <quorem>:
 8007430:	6902      	ldr	r2, [r0, #16]
 8007432:	690b      	ldr	r3, [r1, #16]
 8007434:	4293      	cmp	r3, r2
 8007436:	f300 808d 	bgt.w	8007554 <quorem+0x124>
 800743a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743e:	f103 38ff 	add.w	r8, r3, #4294967295
 8007442:	f101 0714 	add.w	r7, r1, #20
 8007446:	f100 0b14 	add.w	fp, r0, #20
 800744a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800744e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8007452:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8007456:	b083      	sub	sp, #12
 8007458:	3201      	adds	r2, #1
 800745a:	fbb3 f9f2 	udiv	r9, r3, r2
 800745e:	eb0b 0304 	add.w	r3, fp, r4
 8007462:	9400      	str	r4, [sp, #0]
 8007464:	eb07 0a04 	add.w	sl, r7, r4
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	f1b9 0f00 	cmp.w	r9, #0
 800746e:	d039      	beq.n	80074e4 <quorem+0xb4>
 8007470:	2500      	movs	r5, #0
 8007472:	46bc      	mov	ip, r7
 8007474:	46de      	mov	lr, fp
 8007476:	462b      	mov	r3, r5
 8007478:	f85c 6b04 	ldr.w	r6, [ip], #4
 800747c:	f8de 2000 	ldr.w	r2, [lr]
 8007480:	b2b4      	uxth	r4, r6
 8007482:	fb09 5504 	mla	r5, r9, r4, r5
 8007486:	0c36      	lsrs	r6, r6, #16
 8007488:	0c2c      	lsrs	r4, r5, #16
 800748a:	fb09 4406 	mla	r4, r9, r6, r4
 800748e:	b2ad      	uxth	r5, r5
 8007490:	1b5b      	subs	r3, r3, r5
 8007492:	b2a6      	uxth	r6, r4
 8007494:	fa13 f382 	uxtah	r3, r3, r2
 8007498:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 800749c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80074a6:	45e2      	cmp	sl, ip
 80074a8:	f84e 3b04 	str.w	r3, [lr], #4
 80074ac:	ea4f 4514 	mov.w	r5, r4, lsr #16
 80074b0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80074b4:	d2e0      	bcs.n	8007478 <quorem+0x48>
 80074b6:	9b00      	ldr	r3, [sp, #0]
 80074b8:	f85b 3003 	ldr.w	r3, [fp, r3]
 80074bc:	b993      	cbnz	r3, 80074e4 <quorem+0xb4>
 80074be:	9c01      	ldr	r4, [sp, #4]
 80074c0:	1f23      	subs	r3, r4, #4
 80074c2:	459b      	cmp	fp, r3
 80074c4:	d20c      	bcs.n	80074e0 <quorem+0xb0>
 80074c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80074ca:	b94b      	cbnz	r3, 80074e0 <quorem+0xb0>
 80074cc:	f1a4 0308 	sub.w	r3, r4, #8
 80074d0:	e002      	b.n	80074d8 <quorem+0xa8>
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	3b04      	subs	r3, #4
 80074d6:	b91a      	cbnz	r2, 80074e0 <quorem+0xb0>
 80074d8:	459b      	cmp	fp, r3
 80074da:	f108 38ff 	add.w	r8, r8, #4294967295
 80074de:	d3f8      	bcc.n	80074d2 <quorem+0xa2>
 80074e0:	f8c0 8010 	str.w	r8, [r0, #16]
 80074e4:	4604      	mov	r4, r0
 80074e6:	f002 f993 	bl	8009810 <__mcmp>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	db2e      	blt.n	800754c <quorem+0x11c>
 80074ee:	f109 0901 	add.w	r9, r9, #1
 80074f2:	465d      	mov	r5, fp
 80074f4:	2300      	movs	r3, #0
 80074f6:	f857 1b04 	ldr.w	r1, [r7], #4
 80074fa:	6828      	ldr	r0, [r5, #0]
 80074fc:	b28a      	uxth	r2, r1
 80074fe:	1a9a      	subs	r2, r3, r2
 8007500:	0c09      	lsrs	r1, r1, #16
 8007502:	fa12 f280 	uxtah	r2, r2, r0
 8007506:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 800750a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800750e:	b291      	uxth	r1, r2
 8007510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007514:	45ba      	cmp	sl, r7
 8007516:	f845 1b04 	str.w	r1, [r5], #4
 800751a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800751e:	d2ea      	bcs.n	80074f6 <quorem+0xc6>
 8007520:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8007524:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8007528:	b982      	cbnz	r2, 800754c <quorem+0x11c>
 800752a:	1f1a      	subs	r2, r3, #4
 800752c:	4593      	cmp	fp, r2
 800752e:	d20b      	bcs.n	8007548 <quorem+0x118>
 8007530:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8007534:	b942      	cbnz	r2, 8007548 <quorem+0x118>
 8007536:	3b08      	subs	r3, #8
 8007538:	e002      	b.n	8007540 <quorem+0x110>
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	3b04      	subs	r3, #4
 800753e:	b91a      	cbnz	r2, 8007548 <quorem+0x118>
 8007540:	459b      	cmp	fp, r3
 8007542:	f108 38ff 	add.w	r8, r8, #4294967295
 8007546:	d3f8      	bcc.n	800753a <quorem+0x10a>
 8007548:	f8c4 8010 	str.w	r8, [r4, #16]
 800754c:	4648      	mov	r0, r9
 800754e:	b003      	add	sp, #12
 8007550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007554:	2000      	movs	r0, #0
 8007556:	4770      	bx	lr

08007558 <_dtoa_r>:
 8007558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800755e:	b099      	sub	sp, #100	; 0x64
 8007560:	4681      	mov	r9, r0
 8007562:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8007564:	4692      	mov	sl, r2
 8007566:	469b      	mov	fp, r3
 8007568:	b149      	cbz	r1, 800757e <_dtoa_r+0x26>
 800756a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800756c:	604a      	str	r2, [r1, #4]
 800756e:	2301      	movs	r3, #1
 8007570:	4093      	lsls	r3, r2
 8007572:	608b      	str	r3, [r1, #8]
 8007574:	f001 ff6a 	bl	800944c <_Bfree>
 8007578:	2300      	movs	r3, #0
 800757a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800757e:	f1bb 0f00 	cmp.w	fp, #0
 8007582:	46d8      	mov	r8, fp
 8007584:	db33      	blt.n	80075ee <_dtoa_r+0x96>
 8007586:	2300      	movs	r3, #0
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	4ba3      	ldr	r3, [pc, #652]	; (8007818 <_dtoa_r+0x2c0>)
 800758c:	461a      	mov	r2, r3
 800758e:	ea08 0303 	and.w	r3, r8, r3
 8007592:	4293      	cmp	r3, r2
 8007594:	d014      	beq.n	80075c0 <_dtoa_r+0x68>
 8007596:	2200      	movs	r2, #0
 8007598:	2300      	movs	r3, #0
 800759a:	4650      	mov	r0, sl
 800759c:	4659      	mov	r1, fp
 800759e:	f7fc fc83 	bl	8003ea8 <__aeabi_dcmpeq>
 80075a2:	4605      	mov	r5, r0
 80075a4:	b348      	cbz	r0, 80075fa <_dtoa_r+0xa2>
 80075a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80075a8:	2301      	movs	r3, #1
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 80c2 	beq.w	8007738 <_dtoa_r+0x1e0>
 80075b4:	4899      	ldr	r0, [pc, #612]	; (800781c <_dtoa_r+0x2c4>)
 80075b6:	6018      	str	r0, [r3, #0]
 80075b8:	3801      	subs	r0, #1
 80075ba:	b019      	add	sp, #100	; 0x64
 80075bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80075c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	f1ba 0f00 	cmp.w	sl, #0
 80075cc:	f000 809f 	beq.w	800770e <_dtoa_r+0x1b6>
 80075d0:	4893      	ldr	r0, [pc, #588]	; (8007820 <_dtoa_r+0x2c8>)
 80075d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0f0      	beq.n	80075ba <_dtoa_r+0x62>
 80075d8:	78c3      	ldrb	r3, [r0, #3]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	f000 80ae 	beq.w	800773c <_dtoa_r+0x1e4>
 80075e0:	f100 0308 	add.w	r3, r0, #8
 80075e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	b019      	add	sp, #100	; 0x64
 80075ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ee:	2301      	movs	r3, #1
 80075f0:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	46c3      	mov	fp, r8
 80075f8:	e7c7      	b.n	800758a <_dtoa_r+0x32>
 80075fa:	aa16      	add	r2, sp, #88	; 0x58
 80075fc:	ab17      	add	r3, sp, #92	; 0x5c
 80075fe:	9201      	str	r2, [sp, #4]
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	4652      	mov	r2, sl
 8007604:	465b      	mov	r3, fp
 8007606:	4648      	mov	r0, r9
 8007608:	f002 f9ae 	bl	8009968 <__d2b>
 800760c:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8007610:	9008      	str	r0, [sp, #32]
 8007612:	f040 8085 	bne.w	8007720 <_dtoa_r+0x1c8>
 8007616:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8007618:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800761a:	442c      	add	r4, r5
 800761c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007620:	2b20      	cmp	r3, #32
 8007622:	f340 8289 	ble.w	8007b38 <_dtoa_r+0x5e0>
 8007626:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800762a:	f204 4012 	addw	r0, r4, #1042	; 0x412
 800762e:	fa08 f803 	lsl.w	r8, r8, r3
 8007632:	fa2a f000 	lsr.w	r0, sl, r0
 8007636:	ea40 0008 	orr.w	r0, r0, r8
 800763a:	f7fc f957 	bl	80038ec <__aeabi_ui2d>
 800763e:	2301      	movs	r3, #1
 8007640:	3c01      	subs	r4, #1
 8007642:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007646:	930d      	str	r3, [sp, #52]	; 0x34
 8007648:	2200      	movs	r2, #0
 800764a:	4b76      	ldr	r3, [pc, #472]	; (8007824 <_dtoa_r+0x2cc>)
 800764c:	f7fc f810 	bl	8003670 <__aeabi_dsub>
 8007650:	a36b      	add	r3, pc, #428	; (adr r3, 8007800 <_dtoa_r+0x2a8>)
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	f7fc f9bf 	bl	80039d8 <__aeabi_dmul>
 800765a:	a36b      	add	r3, pc, #428	; (adr r3, 8007808 <_dtoa_r+0x2b0>)
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	f7fc f808 	bl	8003674 <__adddf3>
 8007664:	4606      	mov	r6, r0
 8007666:	4620      	mov	r0, r4
 8007668:	460f      	mov	r7, r1
 800766a:	f7fc f94f 	bl	800390c <__aeabi_i2d>
 800766e:	a368      	add	r3, pc, #416	; (adr r3, 8007810 <_dtoa_r+0x2b8>)
 8007670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007674:	f7fc f9b0 	bl	80039d8 <__aeabi_dmul>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	4630      	mov	r0, r6
 800767e:	4639      	mov	r1, r7
 8007680:	f7fb fff8 	bl	8003674 <__adddf3>
 8007684:	4606      	mov	r6, r0
 8007686:	460f      	mov	r7, r1
 8007688:	f7fc fc56 	bl	8003f38 <__aeabi_d2iz>
 800768c:	2200      	movs	r2, #0
 800768e:	9004      	str	r0, [sp, #16]
 8007690:	2300      	movs	r3, #0
 8007692:	4630      	mov	r0, r6
 8007694:	4639      	mov	r1, r7
 8007696:	f7fc fc11 	bl	8003ebc <__aeabi_dcmplt>
 800769a:	2800      	cmp	r0, #0
 800769c:	f040 8227 	bne.w	8007aee <_dtoa_r+0x596>
 80076a0:	9e04      	ldr	r6, [sp, #16]
 80076a2:	2e16      	cmp	r6, #22
 80076a4:	f200 8220 	bhi.w	8007ae8 <_dtoa_r+0x590>
 80076a8:	4b5f      	ldr	r3, [pc, #380]	; (8007828 <_dtoa_r+0x2d0>)
 80076aa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80076ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076b2:	4652      	mov	r2, sl
 80076b4:	465b      	mov	r3, fp
 80076b6:	f7fc fc1f 	bl	8003ef8 <__aeabi_dcmpgt>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	f000 8241 	beq.w	8007b42 <_dtoa_r+0x5ea>
 80076c0:	1e73      	subs	r3, r6, #1
 80076c2:	9304      	str	r3, [sp, #16]
 80076c4:	2300      	movs	r3, #0
 80076c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80076c8:	1b2c      	subs	r4, r5, r4
 80076ca:	f1b4 0801 	subs.w	r8, r4, #1
 80076ce:	f100 8229 	bmi.w	8007b24 <_dtoa_r+0x5cc>
 80076d2:	2300      	movs	r3, #0
 80076d4:	9305      	str	r3, [sp, #20]
 80076d6:	9b04      	ldr	r3, [sp, #16]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f2c0 821a 	blt.w	8007b12 <_dtoa_r+0x5ba>
 80076de:	4498      	add	r8, r3
 80076e0:	930a      	str	r3, [sp, #40]	; 0x28
 80076e2:	2300      	movs	r3, #0
 80076e4:	9302      	str	r3, [sp, #8]
 80076e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076e8:	2b09      	cmp	r3, #9
 80076ea:	d829      	bhi.n	8007740 <_dtoa_r+0x1e8>
 80076ec:	2b05      	cmp	r3, #5
 80076ee:	f340 8643 	ble.w	8008378 <_dtoa_r+0xe20>
 80076f2:	3b04      	subs	r3, #4
 80076f4:	9322      	str	r3, [sp, #136]	; 0x88
 80076f6:	2500      	movs	r5, #0
 80076f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076fa:	3b02      	subs	r3, #2
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	f200 8622 	bhi.w	8008346 <_dtoa_r+0xdee>
 8007702:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007706:	032a      	.short	0x032a
 8007708:	03350223 	.word	0x03350223
 800770c:	044f      	.short	0x044f
 800770e:	4b44      	ldr	r3, [pc, #272]	; (8007820 <_dtoa_r+0x2c8>)
 8007710:	4a46      	ldr	r2, [pc, #280]	; (800782c <_dtoa_r+0x2d4>)
 8007712:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007716:	2800      	cmp	r0, #0
 8007718:	bf14      	ite	ne
 800771a:	4618      	movne	r0, r3
 800771c:	4610      	moveq	r0, r2
 800771e:	e758      	b.n	80075d2 <_dtoa_r+0x7a>
 8007720:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007724:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007728:	950d      	str	r5, [sp, #52]	; 0x34
 800772a:	4650      	mov	r0, sl
 800772c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007730:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007734:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8007736:	e787      	b.n	8007648 <_dtoa_r+0xf0>
 8007738:	483d      	ldr	r0, [pc, #244]	; (8007830 <_dtoa_r+0x2d8>)
 800773a:	e73e      	b.n	80075ba <_dtoa_r+0x62>
 800773c:	1cc3      	adds	r3, r0, #3
 800773e:	e751      	b.n	80075e4 <_dtoa_r+0x8c>
 8007740:	2100      	movs	r1, #0
 8007742:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007746:	4648      	mov	r0, r9
 8007748:	9122      	str	r1, [sp, #136]	; 0x88
 800774a:	f001 fe59 	bl	8009400 <_Balloc>
 800774e:	f04f 33ff 	mov.w	r3, #4294967295
 8007752:	9306      	str	r3, [sp, #24]
 8007754:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007756:	930c      	str	r3, [sp, #48]	; 0x30
 8007758:	2301      	movs	r3, #1
 800775a:	9007      	str	r0, [sp, #28]
 800775c:	9223      	str	r2, [sp, #140]	; 0x8c
 800775e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8007762:	9309      	str	r3, [sp, #36]	; 0x24
 8007764:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007766:	2b00      	cmp	r3, #0
 8007768:	f2c0 80d0 	blt.w	800790c <_dtoa_r+0x3b4>
 800776c:	9a04      	ldr	r2, [sp, #16]
 800776e:	2a0e      	cmp	r2, #14
 8007770:	f300 80cc 	bgt.w	800790c <_dtoa_r+0x3b4>
 8007774:	4b2c      	ldr	r3, [pc, #176]	; (8007828 <_dtoa_r+0x2d0>)
 8007776:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800777a:	ed93 7b00 	vldr	d7, [r3]
 800777e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007780:	2b00      	cmp	r3, #0
 8007782:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007786:	f2c0 82fe 	blt.w	8007d86 <_dtoa_r+0x82e>
 800778a:	4656      	mov	r6, sl
 800778c:	465f      	mov	r7, fp
 800778e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8007792:	4630      	mov	r0, r6
 8007794:	4652      	mov	r2, sl
 8007796:	465b      	mov	r3, fp
 8007798:	4639      	mov	r1, r7
 800779a:	f7fc fa47 	bl	8003c2c <__aeabi_ddiv>
 800779e:	f7fc fbcb 	bl	8003f38 <__aeabi_d2iz>
 80077a2:	4604      	mov	r4, r0
 80077a4:	f7fc f8b2 	bl	800390c <__aeabi_i2d>
 80077a8:	4652      	mov	r2, sl
 80077aa:	465b      	mov	r3, fp
 80077ac:	f7fc f914 	bl	80039d8 <__aeabi_dmul>
 80077b0:	460b      	mov	r3, r1
 80077b2:	4602      	mov	r2, r0
 80077b4:	4639      	mov	r1, r7
 80077b6:	4630      	mov	r0, r6
 80077b8:	f7fb ff5a 	bl	8003670 <__aeabi_dsub>
 80077bc:	9d07      	ldr	r5, [sp, #28]
 80077be:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80077c2:	702b      	strb	r3, [r5, #0]
 80077c4:	9b06      	ldr	r3, [sp, #24]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	4606      	mov	r6, r0
 80077ca:	460f      	mov	r7, r1
 80077cc:	f105 0501 	add.w	r5, r5, #1
 80077d0:	d061      	beq.n	8007896 <_dtoa_r+0x33e>
 80077d2:	2200      	movs	r2, #0
 80077d4:	4b17      	ldr	r3, [pc, #92]	; (8007834 <_dtoa_r+0x2dc>)
 80077d6:	f7fc f8ff 	bl	80039d8 <__aeabi_dmul>
 80077da:	2200      	movs	r2, #0
 80077dc:	2300      	movs	r3, #0
 80077de:	4606      	mov	r6, r0
 80077e0:	460f      	mov	r7, r1
 80077e2:	f7fc fb61 	bl	8003ea8 <__aeabi_dcmpeq>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d17d      	bne.n	80078e6 <_dtoa_r+0x38e>
 80077ea:	f8cd 9014 	str.w	r9, [sp, #20]
 80077ee:	f8dd a018 	ldr.w	sl, [sp, #24]
 80077f2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80077f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80077fa:	e028      	b.n	800784e <_dtoa_r+0x2f6>
 80077fc:	f3af 8000 	nop.w
 8007800:	636f4361 	.word	0x636f4361
 8007804:	3fd287a7 	.word	0x3fd287a7
 8007808:	8b60c8b3 	.word	0x8b60c8b3
 800780c:	3fc68a28 	.word	0x3fc68a28
 8007810:	509f79fb 	.word	0x509f79fb
 8007814:	3fd34413 	.word	0x3fd34413
 8007818:	7ff00000 	.word	0x7ff00000
 800781c:	0800a965 	.word	0x0800a965
 8007820:	0800a9a4 	.word	0x0800a9a4
 8007824:	3ff80000 	.word	0x3ff80000
 8007828:	0800a9b8 	.word	0x0800a9b8
 800782c:	0800a998 	.word	0x0800a998
 8007830:	0800a964 	.word	0x0800a964
 8007834:	40240000 	.word	0x40240000
 8007838:	f7fc f8ce 	bl	80039d8 <__aeabi_dmul>
 800783c:	2200      	movs	r2, #0
 800783e:	2300      	movs	r3, #0
 8007840:	4606      	mov	r6, r0
 8007842:	460f      	mov	r7, r1
 8007844:	f7fc fb30 	bl	8003ea8 <__aeabi_dcmpeq>
 8007848:	2800      	cmp	r0, #0
 800784a:	f040 83ae 	bne.w	8007faa <_dtoa_r+0xa52>
 800784e:	4642      	mov	r2, r8
 8007850:	464b      	mov	r3, r9
 8007852:	4630      	mov	r0, r6
 8007854:	4639      	mov	r1, r7
 8007856:	f7fc f9e9 	bl	8003c2c <__aeabi_ddiv>
 800785a:	f7fc fb6d 	bl	8003f38 <__aeabi_d2iz>
 800785e:	4604      	mov	r4, r0
 8007860:	f7fc f854 	bl	800390c <__aeabi_i2d>
 8007864:	4642      	mov	r2, r8
 8007866:	464b      	mov	r3, r9
 8007868:	f7fc f8b6 	bl	80039d8 <__aeabi_dmul>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4630      	mov	r0, r6
 8007872:	4639      	mov	r1, r7
 8007874:	f7fb fefc 	bl	8003670 <__aeabi_dsub>
 8007878:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800787c:	f805 eb01 	strb.w	lr, [r5], #1
 8007880:	ebcb 0e05 	rsb	lr, fp, r5
 8007884:	45d6      	cmp	lr, sl
 8007886:	4606      	mov	r6, r0
 8007888:	460f      	mov	r7, r1
 800788a:	f04f 0200 	mov.w	r2, #0
 800788e:	4bae      	ldr	r3, [pc, #696]	; (8007b48 <_dtoa_r+0x5f0>)
 8007890:	d1d2      	bne.n	8007838 <_dtoa_r+0x2e0>
 8007892:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007896:	4632      	mov	r2, r6
 8007898:	463b      	mov	r3, r7
 800789a:	4630      	mov	r0, r6
 800789c:	4639      	mov	r1, r7
 800789e:	f7fb fee9 	bl	8003674 <__adddf3>
 80078a2:	4606      	mov	r6, r0
 80078a4:	460f      	mov	r7, r1
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ae:	f7fc fb05 	bl	8003ebc <__aeabi_dcmplt>
 80078b2:	b940      	cbnz	r0, 80078c6 <_dtoa_r+0x36e>
 80078b4:	4632      	mov	r2, r6
 80078b6:	463b      	mov	r3, r7
 80078b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078bc:	f7fc faf4 	bl	8003ea8 <__aeabi_dcmpeq>
 80078c0:	b188      	cbz	r0, 80078e6 <_dtoa_r+0x38e>
 80078c2:	07e3      	lsls	r3, r4, #31
 80078c4:	d50f      	bpl.n	80078e6 <_dtoa_r+0x38e>
 80078c6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 80078ca:	9a07      	ldr	r2, [sp, #28]
 80078cc:	1e6b      	subs	r3, r5, #1
 80078ce:	e004      	b.n	80078da <_dtoa_r+0x382>
 80078d0:	429a      	cmp	r2, r3
 80078d2:	f000 83fc 	beq.w	80080ce <_dtoa_r+0xb76>
 80078d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078da:	2c39      	cmp	r4, #57	; 0x39
 80078dc:	f103 0501 	add.w	r5, r3, #1
 80078e0:	d0f6      	beq.n	80078d0 <_dtoa_r+0x378>
 80078e2:	3401      	adds	r4, #1
 80078e4:	701c      	strb	r4, [r3, #0]
 80078e6:	9908      	ldr	r1, [sp, #32]
 80078e8:	4648      	mov	r0, r9
 80078ea:	f001 fdaf 	bl	800944c <_Bfree>
 80078ee:	2200      	movs	r2, #0
 80078f0:	9b04      	ldr	r3, [sp, #16]
 80078f2:	702a      	strb	r2, [r5, #0]
 80078f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80078f6:	3301      	adds	r3, #1
 80078f8:	6013      	str	r3, [r2, #0]
 80078fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 839b 	beq.w	8008038 <_dtoa_r+0xae0>
 8007902:	9807      	ldr	r0, [sp, #28]
 8007904:	601d      	str	r5, [r3, #0]
 8007906:	b019      	add	sp, #100	; 0x64
 8007908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800790e:	2a00      	cmp	r2, #0
 8007910:	f000 810e 	beq.w	8007b30 <_dtoa_r+0x5d8>
 8007914:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007916:	2a01      	cmp	r2, #1
 8007918:	f340 8257 	ble.w	8007dca <_dtoa_r+0x872>
 800791c:	9b06      	ldr	r3, [sp, #24]
 800791e:	9a02      	ldr	r2, [sp, #8]
 8007920:	1e5f      	subs	r7, r3, #1
 8007922:	42ba      	cmp	r2, r7
 8007924:	f2c0 838b 	blt.w	800803e <_dtoa_r+0xae6>
 8007928:	1bd7      	subs	r7, r2, r7
 800792a:	9b06      	ldr	r3, [sp, #24]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f2c0 8480 	blt.w	8008232 <_dtoa_r+0xcda>
 8007932:	9d05      	ldr	r5, [sp, #20]
 8007934:	9b06      	ldr	r3, [sp, #24]
 8007936:	9a05      	ldr	r2, [sp, #20]
 8007938:	2101      	movs	r1, #1
 800793a:	441a      	add	r2, r3
 800793c:	4648      	mov	r0, r9
 800793e:	9205      	str	r2, [sp, #20]
 8007940:	4498      	add	r8, r3
 8007942:	f001 fe1b 	bl	800957c <__i2b>
 8007946:	4606      	mov	r6, r0
 8007948:	b165      	cbz	r5, 8007964 <_dtoa_r+0x40c>
 800794a:	f1b8 0f00 	cmp.w	r8, #0
 800794e:	dd09      	ble.n	8007964 <_dtoa_r+0x40c>
 8007950:	4545      	cmp	r5, r8
 8007952:	9a05      	ldr	r2, [sp, #20]
 8007954:	462b      	mov	r3, r5
 8007956:	bfa8      	it	ge
 8007958:	4643      	movge	r3, r8
 800795a:	1ad2      	subs	r2, r2, r3
 800795c:	9205      	str	r2, [sp, #20]
 800795e:	1aed      	subs	r5, r5, r3
 8007960:	ebc3 0808 	rsb	r8, r3, r8
 8007964:	9b02      	ldr	r3, [sp, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	f340 82f5 	ble.w	8007f56 <_dtoa_r+0x9fe>
 800796c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800796e:	2a00      	cmp	r2, #0
 8007970:	f000 8202 	beq.w	8007d78 <_dtoa_r+0x820>
 8007974:	2f00      	cmp	r7, #0
 8007976:	f000 81ff 	beq.w	8007d78 <_dtoa_r+0x820>
 800797a:	4631      	mov	r1, r6
 800797c:	463a      	mov	r2, r7
 800797e:	4648      	mov	r0, r9
 8007980:	f001 fe9e 	bl	80096c0 <__pow5mult>
 8007984:	9a08      	ldr	r2, [sp, #32]
 8007986:	4601      	mov	r1, r0
 8007988:	4606      	mov	r6, r0
 800798a:	4648      	mov	r0, r9
 800798c:	f001 fe00 	bl	8009590 <__multiply>
 8007990:	9908      	ldr	r1, [sp, #32]
 8007992:	4604      	mov	r4, r0
 8007994:	4648      	mov	r0, r9
 8007996:	f001 fd59 	bl	800944c <_Bfree>
 800799a:	9b02      	ldr	r3, [sp, #8]
 800799c:	1bdb      	subs	r3, r3, r7
 800799e:	9302      	str	r3, [sp, #8]
 80079a0:	f040 81e9 	bne.w	8007d76 <_dtoa_r+0x81e>
 80079a4:	2101      	movs	r1, #1
 80079a6:	4648      	mov	r0, r9
 80079a8:	f001 fde8 	bl	800957c <__i2b>
 80079ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ae:	9002      	str	r0, [sp, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 8215 	beq.w	8007de0 <_dtoa_r+0x888>
 80079b6:	4601      	mov	r1, r0
 80079b8:	461a      	mov	r2, r3
 80079ba:	4648      	mov	r0, r9
 80079bc:	f001 fe80 	bl	80096c0 <__pow5mult>
 80079c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079c2:	9002      	str	r0, [sp, #8]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	f340 82f3 	ble.w	8007fb0 <_dtoa_r+0xa58>
 80079ca:	2700      	movs	r7, #0
 80079cc:	9a02      	ldr	r2, [sp, #8]
 80079ce:	6913      	ldr	r3, [r2, #16]
 80079d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079d4:	6918      	ldr	r0, [r3, #16]
 80079d6:	f001 fd83 	bl	80094e0 <__hi0bits>
 80079da:	f1c0 0020 	rsb	r0, r0, #32
 80079de:	4440      	add	r0, r8
 80079e0:	f010 001f 	ands.w	r0, r0, #31
 80079e4:	f000 81fa 	beq.w	8007ddc <_dtoa_r+0x884>
 80079e8:	f1c0 0320 	rsb	r3, r0, #32
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	f340 84bd 	ble.w	800836c <_dtoa_r+0xe14>
 80079f2:	f1c0 001c 	rsb	r0, r0, #28
 80079f6:	9b05      	ldr	r3, [sp, #20]
 80079f8:	4403      	add	r3, r0
 80079fa:	9305      	str	r3, [sp, #20]
 80079fc:	4405      	add	r5, r0
 80079fe:	4480      	add	r8, r0
 8007a00:	9b05      	ldr	r3, [sp, #20]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	dd05      	ble.n	8007a12 <_dtoa_r+0x4ba>
 8007a06:	4621      	mov	r1, r4
 8007a08:	461a      	mov	r2, r3
 8007a0a:	4648      	mov	r0, r9
 8007a0c:	f001 fea8 	bl	8009760 <__lshift>
 8007a10:	4604      	mov	r4, r0
 8007a12:	f1b8 0f00 	cmp.w	r8, #0
 8007a16:	dd05      	ble.n	8007a24 <_dtoa_r+0x4cc>
 8007a18:	4642      	mov	r2, r8
 8007a1a:	9902      	ldr	r1, [sp, #8]
 8007a1c:	4648      	mov	r0, r9
 8007a1e:	f001 fe9f 	bl	8009760 <__lshift>
 8007a22:	9002      	str	r0, [sp, #8]
 8007a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f040 827a 	bne.w	8007f20 <_dtoa_r+0x9c8>
 8007a2c:	9b06      	ldr	r3, [sp, #24]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f340 8293 	ble.w	8007f5a <_dtoa_r+0xa02>
 8007a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f040 81f4 	bne.w	8007e24 <_dtoa_r+0x8cc>
 8007a3c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8007a40:	9f06      	ldr	r7, [sp, #24]
 8007a42:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007a46:	465d      	mov	r5, fp
 8007a48:	e002      	b.n	8007a50 <_dtoa_r+0x4f8>
 8007a4a:	f001 fd09 	bl	8009460 <__multadd>
 8007a4e:	4604      	mov	r4, r0
 8007a50:	4641      	mov	r1, r8
 8007a52:	4620      	mov	r0, r4
 8007a54:	f7ff fcec 	bl	8007430 <quorem>
 8007a58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a5c:	f805 ab01 	strb.w	sl, [r5], #1
 8007a60:	ebcb 0305 	rsb	r3, fp, r5
 8007a64:	42bb      	cmp	r3, r7
 8007a66:	f04f 020a 	mov.w	r2, #10
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4648      	mov	r0, r9
 8007a72:	dbea      	blt.n	8007a4a <_dtoa_r+0x4f2>
 8007a74:	9b07      	ldr	r3, [sp, #28]
 8007a76:	9a06      	ldr	r2, [sp, #24]
 8007a78:	2a01      	cmp	r2, #1
 8007a7a:	bfac      	ite	ge
 8007a7c:	189b      	addge	r3, r3, r2
 8007a7e:	3301      	addlt	r3, #1
 8007a80:	461d      	mov	r5, r3
 8007a82:	f04f 0b00 	mov.w	fp, #0
 8007a86:	4621      	mov	r1, r4
 8007a88:	2201      	movs	r2, #1
 8007a8a:	4648      	mov	r0, r9
 8007a8c:	f001 fe68 	bl	8009760 <__lshift>
 8007a90:	9902      	ldr	r1, [sp, #8]
 8007a92:	9008      	str	r0, [sp, #32]
 8007a94:	f001 febc 	bl	8009810 <__mcmp>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	f340 8305 	ble.w	80080a8 <_dtoa_r+0xb50>
 8007a9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007aa2:	9907      	ldr	r1, [sp, #28]
 8007aa4:	1e6b      	subs	r3, r5, #1
 8007aa6:	e004      	b.n	8007ab2 <_dtoa_r+0x55a>
 8007aa8:	428b      	cmp	r3, r1
 8007aaa:	f000 8274 	beq.w	8007f96 <_dtoa_r+0xa3e>
 8007aae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ab2:	2a39      	cmp	r2, #57	; 0x39
 8007ab4:	f103 0501 	add.w	r5, r3, #1
 8007ab8:	d0f6      	beq.n	8007aa8 <_dtoa_r+0x550>
 8007aba:	3201      	adds	r2, #1
 8007abc:	701a      	strb	r2, [r3, #0]
 8007abe:	9902      	ldr	r1, [sp, #8]
 8007ac0:	4648      	mov	r0, r9
 8007ac2:	f001 fcc3 	bl	800944c <_Bfree>
 8007ac6:	2e00      	cmp	r6, #0
 8007ac8:	f43f af0d 	beq.w	80078e6 <_dtoa_r+0x38e>
 8007acc:	f1bb 0f00 	cmp.w	fp, #0
 8007ad0:	d005      	beq.n	8007ade <_dtoa_r+0x586>
 8007ad2:	45b3      	cmp	fp, r6
 8007ad4:	d003      	beq.n	8007ade <_dtoa_r+0x586>
 8007ad6:	4659      	mov	r1, fp
 8007ad8:	4648      	mov	r0, r9
 8007ada:	f001 fcb7 	bl	800944c <_Bfree>
 8007ade:	4631      	mov	r1, r6
 8007ae0:	4648      	mov	r0, r9
 8007ae2:	f001 fcb3 	bl	800944c <_Bfree>
 8007ae6:	e6fe      	b.n	80078e6 <_dtoa_r+0x38e>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aec:	e5ec      	b.n	80076c8 <_dtoa_r+0x170>
 8007aee:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007af2:	4640      	mov	r0, r8
 8007af4:	f7fb ff0a 	bl	800390c <__aeabi_i2d>
 8007af8:	4602      	mov	r2, r0
 8007afa:	460b      	mov	r3, r1
 8007afc:	4630      	mov	r0, r6
 8007afe:	4639      	mov	r1, r7
 8007b00:	f7fc f9d2 	bl	8003ea8 <__aeabi_dcmpeq>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	f47f adcb 	bne.w	80076a0 <_dtoa_r+0x148>
 8007b0a:	f108 33ff 	add.w	r3, r8, #4294967295
 8007b0e:	9304      	str	r3, [sp, #16]
 8007b10:	e5c6      	b.n	80076a0 <_dtoa_r+0x148>
 8007b12:	9a05      	ldr	r2, [sp, #20]
 8007b14:	9b04      	ldr	r3, [sp, #16]
 8007b16:	1ad2      	subs	r2, r2, r3
 8007b18:	425b      	negs	r3, r3
 8007b1a:	9302      	str	r3, [sp, #8]
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	9205      	str	r2, [sp, #20]
 8007b20:	930a      	str	r3, [sp, #40]	; 0x28
 8007b22:	e5e0      	b.n	80076e6 <_dtoa_r+0x18e>
 8007b24:	f1c8 0300 	rsb	r3, r8, #0
 8007b28:	9305      	str	r3, [sp, #20]
 8007b2a:	f04f 0800 	mov.w	r8, #0
 8007b2e:	e5d2      	b.n	80076d6 <_dtoa_r+0x17e>
 8007b30:	9f02      	ldr	r7, [sp, #8]
 8007b32:	9d05      	ldr	r5, [sp, #20]
 8007b34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007b36:	e707      	b.n	8007948 <_dtoa_r+0x3f0>
 8007b38:	f1c3 0820 	rsb	r8, r3, #32
 8007b3c:	fa0a f008 	lsl.w	r0, sl, r8
 8007b40:	e57b      	b.n	800763a <_dtoa_r+0xe2>
 8007b42:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b44:	e5c0      	b.n	80076c8 <_dtoa_r+0x170>
 8007b46:	bf00      	nop
 8007b48:	40240000 	.word	0x40240000
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b50:	9b04      	ldr	r3, [sp, #16]
 8007b52:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007b54:	4413      	add	r3, r2
 8007b56:	930c      	str	r3, [sp, #48]	; 0x30
 8007b58:	3301      	adds	r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	9306      	str	r3, [sp, #24]
 8007b5e:	f340 827d 	ble.w	800805c <_dtoa_r+0xb04>
 8007b62:	9c06      	ldr	r4, [sp, #24]
 8007b64:	4626      	mov	r6, r4
 8007b66:	2100      	movs	r1, #0
 8007b68:	2e17      	cmp	r6, #23
 8007b6a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007b6e:	d90b      	bls.n	8007b88 <_dtoa_r+0x630>
 8007b70:	2201      	movs	r2, #1
 8007b72:	2304      	movs	r3, #4
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	f103 0014 	add.w	r0, r3, #20
 8007b7a:	42b0      	cmp	r0, r6
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	f102 0201 	add.w	r2, r2, #1
 8007b82:	d9f7      	bls.n	8007b74 <_dtoa_r+0x61c>
 8007b84:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007b88:	4648      	mov	r0, r9
 8007b8a:	f001 fc39 	bl	8009400 <_Balloc>
 8007b8e:	2c0e      	cmp	r4, #14
 8007b90:	9007      	str	r0, [sp, #28]
 8007b92:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8007b96:	f63f ade5 	bhi.w	8007764 <_dtoa_r+0x20c>
 8007b9a:	2d00      	cmp	r5, #0
 8007b9c:	f43f ade2 	beq.w	8007764 <_dtoa_r+0x20c>
 8007ba0:	9904      	ldr	r1, [sp, #16]
 8007ba2:	2900      	cmp	r1, #0
 8007ba4:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8007ba8:	f340 829a 	ble.w	80080e0 <_dtoa_r+0xb88>
 8007bac:	4b90      	ldr	r3, [pc, #576]	; (8007df0 <_dtoa_r+0x898>)
 8007bae:	f001 020f 	and.w	r2, r1, #15
 8007bb2:	110e      	asrs	r6, r1, #4
 8007bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bb8:	06f0      	lsls	r0, r6, #27
 8007bba:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007bbe:	f140 8246 	bpl.w	800804e <_dtoa_r+0xaf6>
 8007bc2:	4b8c      	ldr	r3, [pc, #560]	; (8007df4 <_dtoa_r+0x89c>)
 8007bc4:	4650      	mov	r0, sl
 8007bc6:	4659      	mov	r1, fp
 8007bc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bcc:	f7fc f82e 	bl	8003c2c <__aeabi_ddiv>
 8007bd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007bd4:	f006 060f 	and.w	r6, r6, #15
 8007bd8:	f04f 0a03 	mov.w	sl, #3
 8007bdc:	b186      	cbz	r6, 8007c00 <_dtoa_r+0x6a8>
 8007bde:	4f85      	ldr	r7, [pc, #532]	; (8007df4 <_dtoa_r+0x89c>)
 8007be0:	07f1      	lsls	r1, r6, #31
 8007be2:	d509      	bpl.n	8007bf8 <_dtoa_r+0x6a0>
 8007be4:	4620      	mov	r0, r4
 8007be6:	4629      	mov	r1, r5
 8007be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bec:	f7fb fef4 	bl	80039d8 <__aeabi_dmul>
 8007bf0:	f10a 0a01 	add.w	sl, sl, #1
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	460d      	mov	r5, r1
 8007bf8:	1076      	asrs	r6, r6, #1
 8007bfa:	f107 0708 	add.w	r7, r7, #8
 8007bfe:	d1ef      	bne.n	8007be0 <_dtoa_r+0x688>
 8007c00:	4622      	mov	r2, r4
 8007c02:	462b      	mov	r3, r5
 8007c04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c08:	f7fc f810 	bl	8003c2c <__aeabi_ddiv>
 8007c0c:	4606      	mov	r6, r0
 8007c0e:	460f      	mov	r7, r1
 8007c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c12:	b143      	cbz	r3, 8007c26 <_dtoa_r+0x6ce>
 8007c14:	2200      	movs	r2, #0
 8007c16:	4b78      	ldr	r3, [pc, #480]	; (8007df8 <_dtoa_r+0x8a0>)
 8007c18:	4630      	mov	r0, r6
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	f7fc f94e 	bl	8003ebc <__aeabi_dcmplt>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	f040 831a 	bne.w	800825a <_dtoa_r+0xd02>
 8007c26:	4650      	mov	r0, sl
 8007c28:	f7fb fe70 	bl	800390c <__aeabi_i2d>
 8007c2c:	4632      	mov	r2, r6
 8007c2e:	463b      	mov	r3, r7
 8007c30:	f7fb fed2 	bl	80039d8 <__aeabi_dmul>
 8007c34:	4b71      	ldr	r3, [pc, #452]	; (8007dfc <_dtoa_r+0x8a4>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	f7fb fd1c 	bl	8003674 <__adddf3>
 8007c3c:	9b06      	ldr	r3, [sp, #24]
 8007c3e:	4604      	mov	r4, r0
 8007c40:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 81db 	beq.w	8008000 <_dtoa_r+0xaa8>
 8007c4a:	9b04      	ldr	r3, [sp, #16]
 8007c4c:	9314      	str	r3, [sp, #80]	; 0x50
 8007c4e:	9b06      	ldr	r3, [sp, #24]
 8007c50:	9310      	str	r3, [sp, #64]	; 0x40
 8007c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 8294 	beq.w	8008182 <_dtoa_r+0xc2a>
 8007c5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c5c:	4b64      	ldr	r3, [pc, #400]	; (8007df0 <_dtoa_r+0x898>)
 8007c5e:	4968      	ldr	r1, [pc, #416]	; (8007e00 <_dtoa_r+0x8a8>)
 8007c60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c64:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c68:	2000      	movs	r0, #0
 8007c6a:	f7fb ffdf 	bl	8003c2c <__aeabi_ddiv>
 8007c6e:	4622      	mov	r2, r4
 8007c70:	462b      	mov	r3, r5
 8007c72:	f7fb fcfd 	bl	8003670 <__aeabi_dsub>
 8007c76:	4682      	mov	sl, r0
 8007c78:	468b      	mov	fp, r1
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	4639      	mov	r1, r7
 8007c7e:	f7fc f95b 	bl	8003f38 <__aeabi_d2iz>
 8007c82:	4604      	mov	r4, r0
 8007c84:	f7fb fe42 	bl	800390c <__aeabi_i2d>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	4639      	mov	r1, r7
 8007c90:	f7fb fcee 	bl	8003670 <__aeabi_dsub>
 8007c94:	3430      	adds	r4, #48	; 0x30
 8007c96:	9d07      	ldr	r5, [sp, #28]
 8007c98:	b2e4      	uxtb	r4, r4
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	460f      	mov	r7, r1
 8007c9e:	702c      	strb	r4, [r5, #0]
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4650      	mov	r0, sl
 8007ca6:	4659      	mov	r1, fp
 8007ca8:	3501      	adds	r5, #1
 8007caa:	f7fc f925 	bl	8003ef8 <__aeabi_dcmpgt>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d150      	bne.n	8007d54 <_dtoa_r+0x7fc>
 8007cb2:	4632      	mov	r2, r6
 8007cb4:	463b      	mov	r3, r7
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	494f      	ldr	r1, [pc, #316]	; (8007df8 <_dtoa_r+0x8a0>)
 8007cba:	f7fb fcd9 	bl	8003670 <__aeabi_dsub>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4650      	mov	r0, sl
 8007cc4:	4659      	mov	r1, fp
 8007cc6:	f7fc f917 	bl	8003ef8 <__aeabi_dcmpgt>
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	f040 8308 	bne.w	80082e0 <_dtoa_r+0xd88>
 8007cd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007cd2:	2a01      	cmp	r2, #1
 8007cd4:	f340 81f7 	ble.w	80080c6 <_dtoa_r+0xb6e>
 8007cd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cda:	9a07      	ldr	r2, [sp, #28]
 8007cdc:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007ce0:	4413      	add	r3, r2
 8007ce2:	4698      	mov	r8, r3
 8007ce4:	e00d      	b.n	8007d02 <_dtoa_r+0x7aa>
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	4943      	ldr	r1, [pc, #268]	; (8007df8 <_dtoa_r+0x8a0>)
 8007cea:	f7fb fcc1 	bl	8003670 <__aeabi_dsub>
 8007cee:	4652      	mov	r2, sl
 8007cf0:	465b      	mov	r3, fp
 8007cf2:	f7fc f8e3 	bl	8003ebc <__aeabi_dcmplt>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	f040 82f2 	bne.w	80082e0 <_dtoa_r+0xd88>
 8007cfc:	4545      	cmp	r5, r8
 8007cfe:	f000 81e0 	beq.w	80080c2 <_dtoa_r+0xb6a>
 8007d02:	4650      	mov	r0, sl
 8007d04:	4659      	mov	r1, fp
 8007d06:	2200      	movs	r2, #0
 8007d08:	4b3e      	ldr	r3, [pc, #248]	; (8007e04 <_dtoa_r+0x8ac>)
 8007d0a:	f7fb fe65 	bl	80039d8 <__aeabi_dmul>
 8007d0e:	2200      	movs	r2, #0
 8007d10:	4b3c      	ldr	r3, [pc, #240]	; (8007e04 <_dtoa_r+0x8ac>)
 8007d12:	4682      	mov	sl, r0
 8007d14:	468b      	mov	fp, r1
 8007d16:	4630      	mov	r0, r6
 8007d18:	4639      	mov	r1, r7
 8007d1a:	f7fb fe5d 	bl	80039d8 <__aeabi_dmul>
 8007d1e:	460f      	mov	r7, r1
 8007d20:	4606      	mov	r6, r0
 8007d22:	f7fc f909 	bl	8003f38 <__aeabi_d2iz>
 8007d26:	4604      	mov	r4, r0
 8007d28:	f7fb fdf0 	bl	800390c <__aeabi_i2d>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4630      	mov	r0, r6
 8007d32:	4639      	mov	r1, r7
 8007d34:	f7fb fc9c 	bl	8003670 <__aeabi_dsub>
 8007d38:	3430      	adds	r4, #48	; 0x30
 8007d3a:	b2e4      	uxtb	r4, r4
 8007d3c:	4652      	mov	r2, sl
 8007d3e:	465b      	mov	r3, fp
 8007d40:	f805 4b01 	strb.w	r4, [r5], #1
 8007d44:	4606      	mov	r6, r0
 8007d46:	460f      	mov	r7, r1
 8007d48:	f7fc f8b8 	bl	8003ebc <__aeabi_dcmplt>
 8007d4c:	4632      	mov	r2, r6
 8007d4e:	463b      	mov	r3, r7
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d0c8      	beq.n	8007ce6 <_dtoa_r+0x78e>
 8007d54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d56:	9304      	str	r3, [sp, #16]
 8007d58:	e5c5      	b.n	80078e6 <_dtoa_r+0x38e>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f340 8180 	ble.w	8008066 <_dtoa_r+0xb0e>
 8007d66:	461e      	mov	r6, r3
 8007d68:	461c      	mov	r4, r3
 8007d6a:	930c      	str	r3, [sp, #48]	; 0x30
 8007d6c:	9306      	str	r3, [sp, #24]
 8007d6e:	e6fa      	b.n	8007b66 <_dtoa_r+0x60e>
 8007d70:	2301      	movs	r3, #1
 8007d72:	9309      	str	r3, [sp, #36]	; 0x24
 8007d74:	e7f3      	b.n	8007d5e <_dtoa_r+0x806>
 8007d76:	9408      	str	r4, [sp, #32]
 8007d78:	9a02      	ldr	r2, [sp, #8]
 8007d7a:	9908      	ldr	r1, [sp, #32]
 8007d7c:	4648      	mov	r0, r9
 8007d7e:	f001 fc9f 	bl	80096c0 <__pow5mult>
 8007d82:	4604      	mov	r4, r0
 8007d84:	e60e      	b.n	80079a4 <_dtoa_r+0x44c>
 8007d86:	9b06      	ldr	r3, [sp, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f73f acfe 	bgt.w	800778a <_dtoa_r+0x232>
 8007d8e:	f040 814f 	bne.w	8008030 <_dtoa_r+0xad8>
 8007d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d96:	2200      	movs	r2, #0
 8007d98:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <_dtoa_r+0x8b0>)
 8007d9a:	f7fb fe1d 	bl	80039d8 <__aeabi_dmul>
 8007d9e:	465b      	mov	r3, fp
 8007da0:	4652      	mov	r2, sl
 8007da2:	f7fc f89f 	bl	8003ee4 <__aeabi_dcmpge>
 8007da6:	9b06      	ldr	r3, [sp, #24]
 8007da8:	9302      	str	r3, [sp, #8]
 8007daa:	461e      	mov	r6, r3
 8007dac:	2800      	cmp	r0, #0
 8007dae:	f000 80ea 	beq.w	8007f86 <_dtoa_r+0xa2e>
 8007db2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007db4:	9d07      	ldr	r5, [sp, #28]
 8007db6:	43db      	mvns	r3, r3
 8007db8:	9304      	str	r3, [sp, #16]
 8007dba:	9902      	ldr	r1, [sp, #8]
 8007dbc:	4648      	mov	r0, r9
 8007dbe:	f001 fb45 	bl	800944c <_Bfree>
 8007dc2:	2e00      	cmp	r6, #0
 8007dc4:	f43f ad8f 	beq.w	80078e6 <_dtoa_r+0x38e>
 8007dc8:	e689      	b.n	8007ade <_dtoa_r+0x586>
 8007dca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dcc:	2a00      	cmp	r2, #0
 8007dce:	f000 8238 	beq.w	8008242 <_dtoa_r+0xcea>
 8007dd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007dd6:	9f02      	ldr	r7, [sp, #8]
 8007dd8:	9d05      	ldr	r5, [sp, #20]
 8007dda:	e5ac      	b.n	8007936 <_dtoa_r+0x3de>
 8007ddc:	201c      	movs	r0, #28
 8007dde:	e60a      	b.n	80079f6 <_dtoa_r+0x49e>
 8007de0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	f340 8280 	ble.w	80082e8 <_dtoa_r+0xd90>
 8007de8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007dea:	2001      	movs	r0, #1
 8007dec:	e5f7      	b.n	80079de <_dtoa_r+0x486>
 8007dee:	bf00      	nop
 8007df0:	0800a9b8 	.word	0x0800a9b8
 8007df4:	0800aa80 	.word	0x0800aa80
 8007df8:	3ff00000 	.word	0x3ff00000
 8007dfc:	401c0000 	.word	0x401c0000
 8007e00:	3fe00000 	.word	0x3fe00000
 8007e04:	40240000 	.word	0x40240000
 8007e08:	40140000 	.word	0x40140000
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	2300      	movs	r3, #0
 8007e10:	220a      	movs	r2, #10
 8007e12:	4648      	mov	r0, r9
 8007e14:	f001 fb24 	bl	8009460 <__multadd>
 8007e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	f340 828d 	ble.w	800833c <_dtoa_r+0xde4>
 8007e22:	9306      	str	r3, [sp, #24]
 8007e24:	2d00      	cmp	r5, #0
 8007e26:	dd05      	ble.n	8007e34 <_dtoa_r+0x8dc>
 8007e28:	4631      	mov	r1, r6
 8007e2a:	462a      	mov	r2, r5
 8007e2c:	4648      	mov	r0, r9
 8007e2e:	f001 fc97 	bl	8009760 <__lshift>
 8007e32:	4606      	mov	r6, r0
 8007e34:	2f00      	cmp	r7, #0
 8007e36:	f040 817c 	bne.w	8008132 <_dtoa_r+0xbda>
 8007e3a:	46b0      	mov	r8, r6
 8007e3c:	9b06      	ldr	r3, [sp, #24]
 8007e3e:	9a07      	ldr	r2, [sp, #28]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	18d3      	adds	r3, r2, r3
 8007e44:	9308      	str	r3, [sp, #32]
 8007e46:	f00a 0301 	and.w	r3, sl, #1
 8007e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e4c:	4617      	mov	r7, r2
 8007e4e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007e52:	4620      	mov	r0, r4
 8007e54:	4659      	mov	r1, fp
 8007e56:	f7ff faeb 	bl	8007430 <quorem>
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4605      	mov	r5, r0
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f001 fcd6 	bl	8009810 <__mcmp>
 8007e64:	4642      	mov	r2, r8
 8007e66:	4659      	mov	r1, fp
 8007e68:	4682      	mov	sl, r0
 8007e6a:	4648      	mov	r0, r9
 8007e6c:	f001 fcf2 	bl	8009854 <__mdiff>
 8007e70:	68c2      	ldr	r2, [r0, #12]
 8007e72:	4683      	mov	fp, r0
 8007e74:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8007e78:	2a00      	cmp	r2, #0
 8007e7a:	d149      	bne.n	8007f10 <_dtoa_r+0x9b8>
 8007e7c:	4601      	mov	r1, r0
 8007e7e:	4620      	mov	r0, r4
 8007e80:	9306      	str	r3, [sp, #24]
 8007e82:	f001 fcc5 	bl	8009810 <__mcmp>
 8007e86:	4659      	mov	r1, fp
 8007e88:	9005      	str	r0, [sp, #20]
 8007e8a:	4648      	mov	r0, r9
 8007e8c:	f001 fade 	bl	800944c <_Bfree>
 8007e90:	9a05      	ldr	r2, [sp, #20]
 8007e92:	9b06      	ldr	r3, [sp, #24]
 8007e94:	b92a      	cbnz	r2, 8007ea2 <_dtoa_r+0x94a>
 8007e96:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007e98:	b919      	cbnz	r1, 8007ea2 <_dtoa_r+0x94a>
 8007e9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e9c:	2900      	cmp	r1, #0
 8007e9e:	f000 8235 	beq.w	800830c <_dtoa_r+0xdb4>
 8007ea2:	f1ba 0f00 	cmp.w	sl, #0
 8007ea6:	f2c0 80e3 	blt.w	8008070 <_dtoa_r+0xb18>
 8007eaa:	d105      	bne.n	8007eb8 <_dtoa_r+0x960>
 8007eac:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007eae:	b919      	cbnz	r1, 8007eb8 <_dtoa_r+0x960>
 8007eb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007eb2:	2900      	cmp	r1, #0
 8007eb4:	f000 80dc 	beq.w	8008070 <_dtoa_r+0xb18>
 8007eb8:	2a00      	cmp	r2, #0
 8007eba:	f300 814e 	bgt.w	800815a <_dtoa_r+0xc02>
 8007ebe:	9a08      	ldr	r2, [sp, #32]
 8007ec0:	703b      	strb	r3, [r7, #0]
 8007ec2:	f107 0a01 	add.w	sl, r7, #1
 8007ec6:	4297      	cmp	r7, r2
 8007ec8:	4655      	mov	r5, sl
 8007eca:	f000 8152 	beq.w	8008172 <_dtoa_r+0xc1a>
 8007ece:	4621      	mov	r1, r4
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	220a      	movs	r2, #10
 8007ed4:	4648      	mov	r0, r9
 8007ed6:	f001 fac3 	bl	8009460 <__multadd>
 8007eda:	4546      	cmp	r6, r8
 8007edc:	4604      	mov	r4, r0
 8007ede:	4631      	mov	r1, r6
 8007ee0:	f04f 0300 	mov.w	r3, #0
 8007ee4:	f04f 020a 	mov.w	r2, #10
 8007ee8:	4648      	mov	r0, r9
 8007eea:	d00b      	beq.n	8007f04 <_dtoa_r+0x9ac>
 8007eec:	f001 fab8 	bl	8009460 <__multadd>
 8007ef0:	4641      	mov	r1, r8
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	220a      	movs	r2, #10
 8007ef8:	4648      	mov	r0, r9
 8007efa:	f001 fab1 	bl	8009460 <__multadd>
 8007efe:	4657      	mov	r7, sl
 8007f00:	4680      	mov	r8, r0
 8007f02:	e7a4      	b.n	8007e4e <_dtoa_r+0x8f6>
 8007f04:	f001 faac 	bl	8009460 <__multadd>
 8007f08:	4657      	mov	r7, sl
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	4680      	mov	r8, r0
 8007f0e:	e79e      	b.n	8007e4e <_dtoa_r+0x8f6>
 8007f10:	4601      	mov	r1, r0
 8007f12:	4648      	mov	r0, r9
 8007f14:	9305      	str	r3, [sp, #20]
 8007f16:	f001 fa99 	bl	800944c <_Bfree>
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	9b05      	ldr	r3, [sp, #20]
 8007f1e:	e7c0      	b.n	8007ea2 <_dtoa_r+0x94a>
 8007f20:	9902      	ldr	r1, [sp, #8]
 8007f22:	4620      	mov	r0, r4
 8007f24:	f001 fc74 	bl	8009810 <__mcmp>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	f6bf ad7f 	bge.w	8007a2c <_dtoa_r+0x4d4>
 8007f2e:	4621      	mov	r1, r4
 8007f30:	9c04      	ldr	r4, [sp, #16]
 8007f32:	2300      	movs	r3, #0
 8007f34:	3c01      	subs	r4, #1
 8007f36:	220a      	movs	r2, #10
 8007f38:	4648      	mov	r0, r9
 8007f3a:	9404      	str	r4, [sp, #16]
 8007f3c:	f001 fa90 	bl	8009460 <__multadd>
 8007f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f42:	4604      	mov	r4, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f47f af61 	bne.w	8007e0c <_dtoa_r+0x8b4>
 8007f4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f340 81ed 	ble.w	800832c <_dtoa_r+0xdd4>
 8007f52:	9306      	str	r3, [sp, #24]
 8007f54:	e572      	b.n	8007a3c <_dtoa_r+0x4e4>
 8007f56:	9c08      	ldr	r4, [sp, #32]
 8007f58:	e524      	b.n	80079a4 <_dtoa_r+0x44c>
 8007f5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	f77f ad69 	ble.w	8007a34 <_dtoa_r+0x4dc>
 8007f62:	9b06      	ldr	r3, [sp, #24]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f040 819d 	bne.w	80082a4 <_dtoa_r+0xd4c>
 8007f6a:	9902      	ldr	r1, [sp, #8]
 8007f6c:	2205      	movs	r2, #5
 8007f6e:	4648      	mov	r0, r9
 8007f70:	f001 fa76 	bl	8009460 <__multadd>
 8007f74:	4601      	mov	r1, r0
 8007f76:	9002      	str	r0, [sp, #8]
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f001 fc49 	bl	8009810 <__mcmp>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	9408      	str	r4, [sp, #32]
 8007f82:	f77f af16 	ble.w	8007db2 <_dtoa_r+0x85a>
 8007f86:	9a04      	ldr	r2, [sp, #16]
 8007f88:	9907      	ldr	r1, [sp, #28]
 8007f8a:	2331      	movs	r3, #49	; 0x31
 8007f8c:	3201      	adds	r2, #1
 8007f8e:	9204      	str	r2, [sp, #16]
 8007f90:	700b      	strb	r3, [r1, #0]
 8007f92:	1c4d      	adds	r5, r1, #1
 8007f94:	e711      	b.n	8007dba <_dtoa_r+0x862>
 8007f96:	9a04      	ldr	r2, [sp, #16]
 8007f98:	3201      	adds	r2, #1
 8007f9a:	9204      	str	r2, [sp, #16]
 8007f9c:	9a07      	ldr	r2, [sp, #28]
 8007f9e:	2331      	movs	r3, #49	; 0x31
 8007fa0:	7013      	strb	r3, [r2, #0]
 8007fa2:	e58c      	b.n	8007abe <_dtoa_r+0x566>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa8:	e5d2      	b.n	8007b50 <_dtoa_r+0x5f8>
 8007faa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007fae:	e49a      	b.n	80078e6 <_dtoa_r+0x38e>
 8007fb0:	f1ba 0f00 	cmp.w	sl, #0
 8007fb4:	f47f ad09 	bne.w	80079ca <_dtoa_r+0x472>
 8007fb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f040 813e 	bne.w	800823e <_dtoa_r+0xce6>
 8007fc2:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8007fc6:	0d3f      	lsrs	r7, r7, #20
 8007fc8:	053f      	lsls	r7, r7, #20
 8007fca:	b12f      	cbz	r7, 8007fd8 <_dtoa_r+0xa80>
 8007fcc:	9b05      	ldr	r3, [sp, #20]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	9305      	str	r3, [sp, #20]
 8007fd2:	f108 0801 	add.w	r8, r8, #1
 8007fd6:	2701      	movs	r7, #1
 8007fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fda:	2001      	movs	r0, #1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f43f acfe 	beq.w	80079de <_dtoa_r+0x486>
 8007fe2:	e4f3      	b.n	80079cc <_dtoa_r+0x474>
 8007fe4:	4650      	mov	r0, sl
 8007fe6:	f7fb fc91 	bl	800390c <__aeabi_i2d>
 8007fea:	4632      	mov	r2, r6
 8007fec:	463b      	mov	r3, r7
 8007fee:	f7fb fcf3 	bl	80039d8 <__aeabi_dmul>
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	4bbf      	ldr	r3, [pc, #764]	; (80082f4 <_dtoa_r+0xd9c>)
 8007ff6:	f7fb fb3d 	bl	8003674 <__adddf3>
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008000:	4630      	mov	r0, r6
 8008002:	4639      	mov	r1, r7
 8008004:	2200      	movs	r2, #0
 8008006:	4bbc      	ldr	r3, [pc, #752]	; (80082f8 <_dtoa_r+0xda0>)
 8008008:	f7fb fb32 	bl	8003670 <__aeabi_dsub>
 800800c:	4622      	mov	r2, r4
 800800e:	462b      	mov	r3, r5
 8008010:	4606      	mov	r6, r0
 8008012:	460f      	mov	r7, r1
 8008014:	f7fb ff70 	bl	8003ef8 <__aeabi_dcmpgt>
 8008018:	2800      	cmp	r0, #0
 800801a:	f040 80ae 	bne.w	800817a <_dtoa_r+0xc22>
 800801e:	4622      	mov	r2, r4
 8008020:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008024:	4630      	mov	r0, r6
 8008026:	4639      	mov	r1, r7
 8008028:	f7fb ff48 	bl	8003ebc <__aeabi_dcmplt>
 800802c:	2800      	cmp	r0, #0
 800802e:	d04a      	beq.n	80080c6 <_dtoa_r+0xb6e>
 8008030:	2300      	movs	r3, #0
 8008032:	9302      	str	r3, [sp, #8]
 8008034:	461e      	mov	r6, r3
 8008036:	e6bc      	b.n	8007db2 <_dtoa_r+0x85a>
 8008038:	9807      	ldr	r0, [sp, #28]
 800803a:	f7ff babe 	b.w	80075ba <_dtoa_r+0x62>
 800803e:	9b02      	ldr	r3, [sp, #8]
 8008040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008042:	9702      	str	r7, [sp, #8]
 8008044:	1afb      	subs	r3, r7, r3
 8008046:	441a      	add	r2, r3
 8008048:	920a      	str	r2, [sp, #40]	; 0x28
 800804a:	2700      	movs	r7, #0
 800804c:	e46d      	b.n	800792a <_dtoa_r+0x3d2>
 800804e:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8008052:	f04f 0a02 	mov.w	sl, #2
 8008056:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800805a:	e5bf      	b.n	8007bdc <_dtoa_r+0x684>
 800805c:	461c      	mov	r4, r3
 800805e:	2100      	movs	r1, #0
 8008060:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8008064:	e590      	b.n	8007b88 <_dtoa_r+0x630>
 8008066:	2401      	movs	r4, #1
 8008068:	9423      	str	r4, [sp, #140]	; 0x8c
 800806a:	940c      	str	r4, [sp, #48]	; 0x30
 800806c:	9406      	str	r4, [sp, #24]
 800806e:	e7f6      	b.n	800805e <_dtoa_r+0xb06>
 8008070:	2a00      	cmp	r2, #0
 8008072:	469a      	mov	sl, r3
 8008074:	dd11      	ble.n	800809a <_dtoa_r+0xb42>
 8008076:	4621      	mov	r1, r4
 8008078:	2201      	movs	r2, #1
 800807a:	4648      	mov	r0, r9
 800807c:	f001 fb70 	bl	8009760 <__lshift>
 8008080:	9902      	ldr	r1, [sp, #8]
 8008082:	4604      	mov	r4, r0
 8008084:	f001 fbc4 	bl	8009810 <__mcmp>
 8008088:	2800      	cmp	r0, #0
 800808a:	f340 8148 	ble.w	800831e <_dtoa_r+0xdc6>
 800808e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008092:	f000 8109 	beq.w	80082a8 <_dtoa_r+0xd50>
 8008096:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 800809a:	46b3      	mov	fp, r6
 800809c:	f887 a000 	strb.w	sl, [r7]
 80080a0:	1c7d      	adds	r5, r7, #1
 80080a2:	4646      	mov	r6, r8
 80080a4:	9408      	str	r4, [sp, #32]
 80080a6:	e50a      	b.n	8007abe <_dtoa_r+0x566>
 80080a8:	d104      	bne.n	80080b4 <_dtoa_r+0xb5c>
 80080aa:	f01a 0f01 	tst.w	sl, #1
 80080ae:	d001      	beq.n	80080b4 <_dtoa_r+0xb5c>
 80080b0:	e4f5      	b.n	8007a9e <_dtoa_r+0x546>
 80080b2:	4615      	mov	r5, r2
 80080b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080b8:	2b30      	cmp	r3, #48	; 0x30
 80080ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80080be:	d0f8      	beq.n	80080b2 <_dtoa_r+0xb5a>
 80080c0:	e4fd      	b.n	8007abe <_dtoa_r+0x566>
 80080c2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80080c6:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 80080ca:	f7ff bb4b 	b.w	8007764 <_dtoa_r+0x20c>
 80080ce:	9907      	ldr	r1, [sp, #28]
 80080d0:	2230      	movs	r2, #48	; 0x30
 80080d2:	700a      	strb	r2, [r1, #0]
 80080d4:	9a04      	ldr	r2, [sp, #16]
 80080d6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 80080da:	3201      	adds	r2, #1
 80080dc:	9204      	str	r2, [sp, #16]
 80080de:	e400      	b.n	80078e2 <_dtoa_r+0x38a>
 80080e0:	9b04      	ldr	r3, [sp, #16]
 80080e2:	425c      	negs	r4, r3
 80080e4:	2c00      	cmp	r4, #0
 80080e6:	f000 80b3 	beq.w	8008250 <_dtoa_r+0xcf8>
 80080ea:	4b84      	ldr	r3, [pc, #528]	; (80082fc <_dtoa_r+0xda4>)
 80080ec:	f004 020f 	and.w	r2, r4, #15
 80080f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80080fc:	f7fb fc6c 	bl	80039d8 <__aeabi_dmul>
 8008100:	1124      	asrs	r4, r4, #4
 8008102:	4606      	mov	r6, r0
 8008104:	460f      	mov	r7, r1
 8008106:	f000 8116 	beq.w	8008336 <_dtoa_r+0xdde>
 800810a:	4d7d      	ldr	r5, [pc, #500]	; (8008300 <_dtoa_r+0xda8>)
 800810c:	f04f 0a02 	mov.w	sl, #2
 8008110:	07e2      	lsls	r2, r4, #31
 8008112:	d509      	bpl.n	8008128 <_dtoa_r+0xbd0>
 8008114:	4630      	mov	r0, r6
 8008116:	4639      	mov	r1, r7
 8008118:	e9d5 2300 	ldrd	r2, r3, [r5]
 800811c:	f7fb fc5c 	bl	80039d8 <__aeabi_dmul>
 8008120:	f10a 0a01 	add.w	sl, sl, #1
 8008124:	4606      	mov	r6, r0
 8008126:	460f      	mov	r7, r1
 8008128:	1064      	asrs	r4, r4, #1
 800812a:	f105 0508 	add.w	r5, r5, #8
 800812e:	d1ef      	bne.n	8008110 <_dtoa_r+0xbb8>
 8008130:	e56e      	b.n	8007c10 <_dtoa_r+0x6b8>
 8008132:	6871      	ldr	r1, [r6, #4]
 8008134:	4648      	mov	r0, r9
 8008136:	f001 f963 	bl	8009400 <_Balloc>
 800813a:	6933      	ldr	r3, [r6, #16]
 800813c:	1c9a      	adds	r2, r3, #2
 800813e:	4605      	mov	r5, r0
 8008140:	0092      	lsls	r2, r2, #2
 8008142:	f106 010c 	add.w	r1, r6, #12
 8008146:	300c      	adds	r0, #12
 8008148:	f7fb ff6c 	bl	8004024 <memcpy>
 800814c:	4629      	mov	r1, r5
 800814e:	2201      	movs	r2, #1
 8008150:	4648      	mov	r0, r9
 8008152:	f001 fb05 	bl	8009760 <__lshift>
 8008156:	4680      	mov	r8, r0
 8008158:	e670      	b.n	8007e3c <_dtoa_r+0x8e4>
 800815a:	2b39      	cmp	r3, #57	; 0x39
 800815c:	f000 80a4 	beq.w	80082a8 <_dtoa_r+0xd50>
 8008160:	f103 0a01 	add.w	sl, r3, #1
 8008164:	46b3      	mov	fp, r6
 8008166:	f887 a000 	strb.w	sl, [r7]
 800816a:	1c7d      	adds	r5, r7, #1
 800816c:	4646      	mov	r6, r8
 800816e:	9408      	str	r4, [sp, #32]
 8008170:	e4a5      	b.n	8007abe <_dtoa_r+0x566>
 8008172:	46b3      	mov	fp, r6
 8008174:	469a      	mov	sl, r3
 8008176:	4646      	mov	r6, r8
 8008178:	e485      	b.n	8007a86 <_dtoa_r+0x52e>
 800817a:	2300      	movs	r3, #0
 800817c:	9302      	str	r3, [sp, #8]
 800817e:	461e      	mov	r6, r3
 8008180:	e701      	b.n	8007f86 <_dtoa_r+0xa2e>
 8008182:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008184:	495d      	ldr	r1, [pc, #372]	; (80082fc <_dtoa_r+0xda4>)
 8008186:	1e5a      	subs	r2, r3, #1
 8008188:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800818c:	462b      	mov	r3, r5
 800818e:	9215      	str	r2, [sp, #84]	; 0x54
 8008190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008194:	4622      	mov	r2, r4
 8008196:	f7fb fc1f 	bl	80039d8 <__aeabi_dmul>
 800819a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800819e:	4639      	mov	r1, r7
 80081a0:	4630      	mov	r0, r6
 80081a2:	f7fb fec9 	bl	8003f38 <__aeabi_d2iz>
 80081a6:	4604      	mov	r4, r0
 80081a8:	f7fb fbb0 	bl	800390c <__aeabi_i2d>
 80081ac:	460b      	mov	r3, r1
 80081ae:	4602      	mov	r2, r0
 80081b0:	4639      	mov	r1, r7
 80081b2:	4630      	mov	r0, r6
 80081b4:	f7fb fa5c 	bl	8003670 <__aeabi_dsub>
 80081b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081ba:	460f      	mov	r7, r1
 80081bc:	9907      	ldr	r1, [sp, #28]
 80081be:	3430      	adds	r4, #48	; 0x30
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	4606      	mov	r6, r0
 80081c4:	700c      	strb	r4, [r1, #0]
 80081c6:	f101 0501 	add.w	r5, r1, #1
 80081ca:	d020      	beq.n	800820e <_dtoa_r+0xcb6>
 80081cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081ce:	9a07      	ldr	r2, [sp, #28]
 80081d0:	4413      	add	r3, r2
 80081d2:	469a      	mov	sl, r3
 80081d4:	46ab      	mov	fp, r5
 80081d6:	2200      	movs	r2, #0
 80081d8:	4b4a      	ldr	r3, [pc, #296]	; (8008304 <_dtoa_r+0xdac>)
 80081da:	4630      	mov	r0, r6
 80081dc:	4639      	mov	r1, r7
 80081de:	f7fb fbfb 	bl	80039d8 <__aeabi_dmul>
 80081e2:	460f      	mov	r7, r1
 80081e4:	4606      	mov	r6, r0
 80081e6:	f7fb fea7 	bl	8003f38 <__aeabi_d2iz>
 80081ea:	4604      	mov	r4, r0
 80081ec:	f7fb fb8e 	bl	800390c <__aeabi_i2d>
 80081f0:	3430      	adds	r4, #48	; 0x30
 80081f2:	4602      	mov	r2, r0
 80081f4:	460b      	mov	r3, r1
 80081f6:	4630      	mov	r0, r6
 80081f8:	4639      	mov	r1, r7
 80081fa:	f7fb fa39 	bl	8003670 <__aeabi_dsub>
 80081fe:	f80b 4b01 	strb.w	r4, [fp], #1
 8008202:	45da      	cmp	sl, fp
 8008204:	4606      	mov	r6, r0
 8008206:	460f      	mov	r7, r1
 8008208:	d1e5      	bne.n	80081d6 <_dtoa_r+0xc7e>
 800820a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800820c:	441d      	add	r5, r3
 800820e:	2200      	movs	r2, #0
 8008210:	4b3d      	ldr	r3, [pc, #244]	; (8008308 <_dtoa_r+0xdb0>)
 8008212:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008216:	f7fb fa2d 	bl	8003674 <__adddf3>
 800821a:	4632      	mov	r2, r6
 800821c:	463b      	mov	r3, r7
 800821e:	f7fb fe4d 	bl	8003ebc <__aeabi_dcmplt>
 8008222:	2800      	cmp	r0, #0
 8008224:	d048      	beq.n	80082b8 <_dtoa_r+0xd60>
 8008226:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008228:	9304      	str	r3, [sp, #16]
 800822a:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800822e:	f7ff bb4c 	b.w	80078ca <_dtoa_r+0x372>
 8008232:	9b05      	ldr	r3, [sp, #20]
 8008234:	9a06      	ldr	r2, [sp, #24]
 8008236:	1a9d      	subs	r5, r3, r2
 8008238:	2300      	movs	r3, #0
 800823a:	f7ff bb7c 	b.w	8007936 <_dtoa_r+0x3de>
 800823e:	2700      	movs	r7, #0
 8008240:	e6ca      	b.n	8007fd8 <_dtoa_r+0xa80>
 8008242:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008244:	9f02      	ldr	r7, [sp, #8]
 8008246:	9d05      	ldr	r5, [sp, #20]
 8008248:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800824c:	f7ff bb73 	b.w	8007936 <_dtoa_r+0x3de>
 8008250:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8008254:	f04f 0a02 	mov.w	sl, #2
 8008258:	e4da      	b.n	8007c10 <_dtoa_r+0x6b8>
 800825a:	9b06      	ldr	r3, [sp, #24]
 800825c:	2b00      	cmp	r3, #0
 800825e:	f43f aec1 	beq.w	8007fe4 <_dtoa_r+0xa8c>
 8008262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008264:	2b00      	cmp	r3, #0
 8008266:	f77f af2e 	ble.w	80080c6 <_dtoa_r+0xb6e>
 800826a:	2200      	movs	r2, #0
 800826c:	4b25      	ldr	r3, [pc, #148]	; (8008304 <_dtoa_r+0xdac>)
 800826e:	4630      	mov	r0, r6
 8008270:	4639      	mov	r1, r7
 8008272:	f7fb fbb1 	bl	80039d8 <__aeabi_dmul>
 8008276:	4606      	mov	r6, r0
 8008278:	460f      	mov	r7, r1
 800827a:	f10a 0001 	add.w	r0, sl, #1
 800827e:	f7fb fb45 	bl	800390c <__aeabi_i2d>
 8008282:	4632      	mov	r2, r6
 8008284:	463b      	mov	r3, r7
 8008286:	f7fb fba7 	bl	80039d8 <__aeabi_dmul>
 800828a:	2200      	movs	r2, #0
 800828c:	4b19      	ldr	r3, [pc, #100]	; (80082f4 <_dtoa_r+0xd9c>)
 800828e:	f7fb f9f1 	bl	8003674 <__adddf3>
 8008292:	9a04      	ldr	r2, [sp, #16]
 8008294:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008296:	9310      	str	r3, [sp, #64]	; 0x40
 8008298:	3a01      	subs	r2, #1
 800829a:	4604      	mov	r4, r0
 800829c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80082a0:	9214      	str	r2, [sp, #80]	; 0x50
 80082a2:	e4d6      	b.n	8007c52 <_dtoa_r+0x6fa>
 80082a4:	9408      	str	r4, [sp, #32]
 80082a6:	e584      	b.n	8007db2 <_dtoa_r+0x85a>
 80082a8:	2239      	movs	r2, #57	; 0x39
 80082aa:	46b3      	mov	fp, r6
 80082ac:	9408      	str	r4, [sp, #32]
 80082ae:	4646      	mov	r6, r8
 80082b0:	703a      	strb	r2, [r7, #0]
 80082b2:	1c7d      	adds	r5, r7, #1
 80082b4:	f7ff bbf5 	b.w	8007aa2 <_dtoa_r+0x54a>
 80082b8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80082bc:	2000      	movs	r0, #0
 80082be:	4912      	ldr	r1, [pc, #72]	; (8008308 <_dtoa_r+0xdb0>)
 80082c0:	f7fb f9d6 	bl	8003670 <__aeabi_dsub>
 80082c4:	4632      	mov	r2, r6
 80082c6:	463b      	mov	r3, r7
 80082c8:	f7fb fe16 	bl	8003ef8 <__aeabi_dcmpgt>
 80082cc:	b908      	cbnz	r0, 80082d2 <_dtoa_r+0xd7a>
 80082ce:	e6fa      	b.n	80080c6 <_dtoa_r+0xb6e>
 80082d0:	4615      	mov	r5, r2
 80082d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082d6:	2b30      	cmp	r3, #48	; 0x30
 80082d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80082dc:	d0f8      	beq.n	80082d0 <_dtoa_r+0xd78>
 80082de:	e539      	b.n	8007d54 <_dtoa_r+0x7fc>
 80082e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082e2:	9304      	str	r3, [sp, #16]
 80082e4:	f7ff baf1 	b.w	80078ca <_dtoa_r+0x372>
 80082e8:	f1ba 0f00 	cmp.w	sl, #0
 80082ec:	f47f ad7c 	bne.w	8007de8 <_dtoa_r+0x890>
 80082f0:	e662      	b.n	8007fb8 <_dtoa_r+0xa60>
 80082f2:	bf00      	nop
 80082f4:	401c0000 	.word	0x401c0000
 80082f8:	40140000 	.word	0x40140000
 80082fc:	0800a9b8 	.word	0x0800a9b8
 8008300:	0800aa80 	.word	0x0800aa80
 8008304:	40240000 	.word	0x40240000
 8008308:	3fe00000 	.word	0x3fe00000
 800830c:	2b39      	cmp	r3, #57	; 0x39
 800830e:	46d3      	mov	fp, sl
 8008310:	469a      	mov	sl, r3
 8008312:	d0c9      	beq.n	80082a8 <_dtoa_r+0xd50>
 8008314:	f1bb 0f00 	cmp.w	fp, #0
 8008318:	f73f aebd 	bgt.w	8008096 <_dtoa_r+0xb3e>
 800831c:	e6bd      	b.n	800809a <_dtoa_r+0xb42>
 800831e:	f47f aebc 	bne.w	800809a <_dtoa_r+0xb42>
 8008322:	f01a 0f01 	tst.w	sl, #1
 8008326:	f43f aeb8 	beq.w	800809a <_dtoa_r+0xb42>
 800832a:	e6b0      	b.n	800808e <_dtoa_r+0xb36>
 800832c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800832e:	2b02      	cmp	r3, #2
 8008330:	dc25      	bgt.n	800837e <_dtoa_r+0xe26>
 8008332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008334:	e60d      	b.n	8007f52 <_dtoa_r+0x9fa>
 8008336:	f04f 0a02 	mov.w	sl, #2
 800833a:	e469      	b.n	8007c10 <_dtoa_r+0x6b8>
 800833c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800833e:	2b02      	cmp	r3, #2
 8008340:	dc1d      	bgt.n	800837e <_dtoa_r+0xe26>
 8008342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008344:	e56d      	b.n	8007e22 <_dtoa_r+0x8ca>
 8008346:	2400      	movs	r4, #0
 8008348:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800834c:	4621      	mov	r1, r4
 800834e:	4648      	mov	r0, r9
 8008350:	f001 f856 	bl	8009400 <_Balloc>
 8008354:	f04f 33ff 	mov.w	r3, #4294967295
 8008358:	9306      	str	r3, [sp, #24]
 800835a:	930c      	str	r3, [sp, #48]	; 0x30
 800835c:	2301      	movs	r3, #1
 800835e:	9007      	str	r0, [sp, #28]
 8008360:	9423      	str	r4, [sp, #140]	; 0x8c
 8008362:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8008366:	9309      	str	r3, [sp, #36]	; 0x24
 8008368:	f7ff b9fc 	b.w	8007764 <_dtoa_r+0x20c>
 800836c:	f43f ab48 	beq.w	8007a00 <_dtoa_r+0x4a8>
 8008370:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8008374:	f7ff bb3f 	b.w	80079f6 <_dtoa_r+0x49e>
 8008378:	2501      	movs	r5, #1
 800837a:	f7ff b9bd 	b.w	80076f8 <_dtoa_r+0x1a0>
 800837e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008380:	9306      	str	r3, [sp, #24]
 8008382:	e5ee      	b.n	8007f62 <_dtoa_r+0xa0a>

08008384 <__sflush_r>:
 8008384:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8008388:	b29a      	uxth	r2, r3
 800838a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800838e:	460d      	mov	r5, r1
 8008390:	0711      	lsls	r1, r2, #28
 8008392:	4680      	mov	r8, r0
 8008394:	d43c      	bmi.n	8008410 <__sflush_r+0x8c>
 8008396:	686a      	ldr	r2, [r5, #4]
 8008398:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800839c:	2a00      	cmp	r2, #0
 800839e:	81ab      	strh	r3, [r5, #12]
 80083a0:	dd73      	ble.n	800848a <__sflush_r+0x106>
 80083a2:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80083a4:	2c00      	cmp	r4, #0
 80083a6:	d04b      	beq.n	8008440 <__sflush_r+0xbc>
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80083ae:	2100      	movs	r1, #0
 80083b0:	b292      	uxth	r2, r2
 80083b2:	f8d8 6000 	ldr.w	r6, [r8]
 80083b6:	f8c8 1000 	str.w	r1, [r8]
 80083ba:	2a00      	cmp	r2, #0
 80083bc:	d069      	beq.n	8008492 <__sflush_r+0x10e>
 80083be:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80083c0:	075f      	lsls	r7, r3, #29
 80083c2:	d505      	bpl.n	80083d0 <__sflush_r+0x4c>
 80083c4:	6869      	ldr	r1, [r5, #4]
 80083c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80083c8:	1a52      	subs	r2, r2, r1
 80083ca:	b10b      	cbz	r3, 80083d0 <__sflush_r+0x4c>
 80083cc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80083ce:	1ad2      	subs	r2, r2, r3
 80083d0:	2300      	movs	r3, #0
 80083d2:	69e9      	ldr	r1, [r5, #28]
 80083d4:	4640      	mov	r0, r8
 80083d6:	47a0      	blx	r4
 80083d8:	1c44      	adds	r4, r0, #1
 80083da:	d03c      	beq.n	8008456 <__sflush_r+0xd2>
 80083dc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80083e0:	692a      	ldr	r2, [r5, #16]
 80083e2:	602a      	str	r2, [r5, #0]
 80083e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083e8:	2200      	movs	r2, #0
 80083ea:	81ab      	strh	r3, [r5, #12]
 80083ec:	04db      	lsls	r3, r3, #19
 80083ee:	606a      	str	r2, [r5, #4]
 80083f0:	d449      	bmi.n	8008486 <__sflush_r+0x102>
 80083f2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80083f4:	f8c8 6000 	str.w	r6, [r8]
 80083f8:	b311      	cbz	r1, 8008440 <__sflush_r+0xbc>
 80083fa:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80083fe:	4299      	cmp	r1, r3
 8008400:	d002      	beq.n	8008408 <__sflush_r+0x84>
 8008402:	4640      	mov	r0, r8
 8008404:	f000 f94e 	bl	80086a4 <_free_r>
 8008408:	2000      	movs	r0, #0
 800840a:	6328      	str	r0, [r5, #48]	; 0x30
 800840c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008410:	692e      	ldr	r6, [r5, #16]
 8008412:	b1ae      	cbz	r6, 8008440 <__sflush_r+0xbc>
 8008414:	682c      	ldr	r4, [r5, #0]
 8008416:	602e      	str	r6, [r5, #0]
 8008418:	0790      	lsls	r0, r2, #30
 800841a:	bf0c      	ite	eq
 800841c:	696b      	ldreq	r3, [r5, #20]
 800841e:	2300      	movne	r3, #0
 8008420:	1ba4      	subs	r4, r4, r6
 8008422:	60ab      	str	r3, [r5, #8]
 8008424:	e00a      	b.n	800843c <__sflush_r+0xb8>
 8008426:	4623      	mov	r3, r4
 8008428:	4632      	mov	r2, r6
 800842a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800842c:	69e9      	ldr	r1, [r5, #28]
 800842e:	4640      	mov	r0, r8
 8008430:	47b8      	blx	r7
 8008432:	2800      	cmp	r0, #0
 8008434:	eba4 0400 	sub.w	r4, r4, r0
 8008438:	4406      	add	r6, r0
 800843a:	dd04      	ble.n	8008446 <__sflush_r+0xc2>
 800843c:	2c00      	cmp	r4, #0
 800843e:	dcf2      	bgt.n	8008426 <__sflush_r+0xa2>
 8008440:	2000      	movs	r0, #0
 8008442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008446:	89ab      	ldrh	r3, [r5, #12]
 8008448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800844c:	81ab      	strh	r3, [r5, #12]
 800844e:	f04f 30ff 	mov.w	r0, #4294967295
 8008452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008456:	f8d8 2000 	ldr.w	r2, [r8]
 800845a:	2a1d      	cmp	r2, #29
 800845c:	d8f3      	bhi.n	8008446 <__sflush_r+0xc2>
 800845e:	4b1a      	ldr	r3, [pc, #104]	; (80084c8 <__sflush_r+0x144>)
 8008460:	40d3      	lsrs	r3, r2
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	f083 0401 	eor.w	r4, r3, #1
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0eb      	beq.n	8008446 <__sflush_r+0xc2>
 800846e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8008472:	6929      	ldr	r1, [r5, #16]
 8008474:	6029      	str	r1, [r5, #0]
 8008476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800847a:	04d9      	lsls	r1, r3, #19
 800847c:	606c      	str	r4, [r5, #4]
 800847e:	81ab      	strh	r3, [r5, #12]
 8008480:	d5b7      	bpl.n	80083f2 <__sflush_r+0x6e>
 8008482:	2a00      	cmp	r2, #0
 8008484:	d1b5      	bne.n	80083f2 <__sflush_r+0x6e>
 8008486:	6528      	str	r0, [r5, #80]	; 0x50
 8008488:	e7b3      	b.n	80083f2 <__sflush_r+0x6e>
 800848a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800848c:	2a00      	cmp	r2, #0
 800848e:	dc88      	bgt.n	80083a2 <__sflush_r+0x1e>
 8008490:	e7d6      	b.n	8008440 <__sflush_r+0xbc>
 8008492:	2301      	movs	r3, #1
 8008494:	69e9      	ldr	r1, [r5, #28]
 8008496:	4640      	mov	r0, r8
 8008498:	47a0      	blx	r4
 800849a:	1c43      	adds	r3, r0, #1
 800849c:	4602      	mov	r2, r0
 800849e:	d002      	beq.n	80084a6 <__sflush_r+0x122>
 80084a0:	89ab      	ldrh	r3, [r5, #12]
 80084a2:	6aac      	ldr	r4, [r5, #40]	; 0x28
 80084a4:	e78c      	b.n	80083c0 <__sflush_r+0x3c>
 80084a6:	f8d8 3000 	ldr.w	r3, [r8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d0f8      	beq.n	80084a0 <__sflush_r+0x11c>
 80084ae:	2b1d      	cmp	r3, #29
 80084b0:	d001      	beq.n	80084b6 <__sflush_r+0x132>
 80084b2:	2b16      	cmp	r3, #22
 80084b4:	d102      	bne.n	80084bc <__sflush_r+0x138>
 80084b6:	f8c8 6000 	str.w	r6, [r8]
 80084ba:	e7c1      	b.n	8008440 <__sflush_r+0xbc>
 80084bc:	89ab      	ldrh	r3, [r5, #12]
 80084be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084c2:	81ab      	strh	r3, [r5, #12]
 80084c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c8:	20400001 	.word	0x20400001

080084cc <_fflush_r>:
 80084cc:	b510      	push	{r4, lr}
 80084ce:	4604      	mov	r4, r0
 80084d0:	b082      	sub	sp, #8
 80084d2:	b108      	cbz	r0, 80084d8 <_fflush_r+0xc>
 80084d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80084d6:	b153      	cbz	r3, 80084ee <_fflush_r+0x22>
 80084d8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80084dc:	b908      	cbnz	r0, 80084e2 <_fflush_r+0x16>
 80084de:	b002      	add	sp, #8
 80084e0:	bd10      	pop	{r4, pc}
 80084e2:	4620      	mov	r0, r4
 80084e4:	b002      	add	sp, #8
 80084e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ea:	f7ff bf4b 	b.w	8008384 <__sflush_r>
 80084ee:	9101      	str	r1, [sp, #4]
 80084f0:	f000 f880 	bl	80085f4 <__sinit>
 80084f4:	9901      	ldr	r1, [sp, #4]
 80084f6:	e7ef      	b.n	80084d8 <_fflush_r+0xc>

080084f8 <_cleanup_r>:
 80084f8:	4901      	ldr	r1, [pc, #4]	; (8008500 <_cleanup_r+0x8>)
 80084fa:	f000 bb3d 	b.w	8008b78 <_fwalk_reent>
 80084fe:	bf00      	nop
 8008500:	0800a105 	.word	0x0800a105

08008504 <__sinit.part.1>:
 8008504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008508:	4b35      	ldr	r3, [pc, #212]	; (80085e0 <__sinit.part.1+0xdc>)
 800850a:	6845      	ldr	r5, [r0, #4]
 800850c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800850e:	2400      	movs	r4, #0
 8008510:	4607      	mov	r7, r0
 8008512:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8008516:	2304      	movs	r3, #4
 8008518:	2103      	movs	r1, #3
 800851a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 800851e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8008522:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8008526:	b083      	sub	sp, #12
 8008528:	602c      	str	r4, [r5, #0]
 800852a:	606c      	str	r4, [r5, #4]
 800852c:	60ac      	str	r4, [r5, #8]
 800852e:	666c      	str	r4, [r5, #100]	; 0x64
 8008530:	81ec      	strh	r4, [r5, #14]
 8008532:	612c      	str	r4, [r5, #16]
 8008534:	616c      	str	r4, [r5, #20]
 8008536:	61ac      	str	r4, [r5, #24]
 8008538:	81ab      	strh	r3, [r5, #12]
 800853a:	4621      	mov	r1, r4
 800853c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8008540:	2208      	movs	r2, #8
 8008542:	f7fb fe09 	bl	8004158 <memset>
 8008546:	68be      	ldr	r6, [r7, #8]
 8008548:	f8df b098 	ldr.w	fp, [pc, #152]	; 80085e4 <__sinit.part.1+0xe0>
 800854c:	f8df a098 	ldr.w	sl, [pc, #152]	; 80085e8 <__sinit.part.1+0xe4>
 8008550:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80085ec <__sinit.part.1+0xe8>
 8008554:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80085f0 <__sinit.part.1+0xec>
 8008558:	f8c5 b020 	str.w	fp, [r5, #32]
 800855c:	2301      	movs	r3, #1
 800855e:	2209      	movs	r2, #9
 8008560:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8008564:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8008568:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800856c:	61ed      	str	r5, [r5, #28]
 800856e:	4621      	mov	r1, r4
 8008570:	81f3      	strh	r3, [r6, #14]
 8008572:	81b2      	strh	r2, [r6, #12]
 8008574:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8008578:	6034      	str	r4, [r6, #0]
 800857a:	6074      	str	r4, [r6, #4]
 800857c:	60b4      	str	r4, [r6, #8]
 800857e:	6674      	str	r4, [r6, #100]	; 0x64
 8008580:	6134      	str	r4, [r6, #16]
 8008582:	6174      	str	r4, [r6, #20]
 8008584:	61b4      	str	r4, [r6, #24]
 8008586:	2208      	movs	r2, #8
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	f7fb fde5 	bl	8004158 <memset>
 800858e:	68fd      	ldr	r5, [r7, #12]
 8008590:	61f6      	str	r6, [r6, #28]
 8008592:	2012      	movs	r0, #18
 8008594:	2202      	movs	r2, #2
 8008596:	f8c6 b020 	str.w	fp, [r6, #32]
 800859a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800859e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 80085a2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 80085a6:	4621      	mov	r1, r4
 80085a8:	81a8      	strh	r0, [r5, #12]
 80085aa:	81ea      	strh	r2, [r5, #14]
 80085ac:	602c      	str	r4, [r5, #0]
 80085ae:	606c      	str	r4, [r5, #4]
 80085b0:	60ac      	str	r4, [r5, #8]
 80085b2:	666c      	str	r4, [r5, #100]	; 0x64
 80085b4:	612c      	str	r4, [r5, #16]
 80085b6:	616c      	str	r4, [r5, #20]
 80085b8:	61ac      	str	r4, [r5, #24]
 80085ba:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80085be:	2208      	movs	r2, #8
 80085c0:	f7fb fdca 	bl	8004158 <memset>
 80085c4:	9b01      	ldr	r3, [sp, #4]
 80085c6:	61ed      	str	r5, [r5, #28]
 80085c8:	f8c5 b020 	str.w	fp, [r5, #32]
 80085cc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 80085d0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 80085d4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80085d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80085da:	b003      	add	sp, #12
 80085dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e0:	080084f9 	.word	0x080084f9
 80085e4:	08009e25 	.word	0x08009e25
 80085e8:	08009e49 	.word	0x08009e49
 80085ec:	08009e85 	.word	0x08009e85
 80085f0:	08009ea5 	.word	0x08009ea5

080085f4 <__sinit>:
 80085f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80085f6:	b103      	cbz	r3, 80085fa <__sinit+0x6>
 80085f8:	4770      	bx	lr
 80085fa:	f7ff bf83 	b.w	8008504 <__sinit.part.1>
 80085fe:	bf00      	nop

08008600 <__sfp_lock_acquire>:
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop

08008604 <__sfp_lock_release>:
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop

08008608 <_malloc_trim_r>:
 8008608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860a:	4f23      	ldr	r7, [pc, #140]	; (8008698 <_malloc_trim_r+0x90>)
 800860c:	460c      	mov	r4, r1
 800860e:	4606      	mov	r6, r0
 8008610:	f000 fef2 	bl	80093f8 <__malloc_lock>
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	685d      	ldr	r5, [r3, #4]
 8008618:	f025 0503 	bic.w	r5, r5, #3
 800861c:	1b29      	subs	r1, r5, r4
 800861e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8008622:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8008626:	f021 010f 	bic.w	r1, r1, #15
 800862a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800862e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8008632:	db07      	blt.n	8008644 <_malloc_trim_r+0x3c>
 8008634:	2100      	movs	r1, #0
 8008636:	4630      	mov	r0, r6
 8008638:	f001 fbe2 	bl	8009e00 <_sbrk_r>
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	442b      	add	r3, r5
 8008640:	4298      	cmp	r0, r3
 8008642:	d004      	beq.n	800864e <_malloc_trim_r+0x46>
 8008644:	4630      	mov	r0, r6
 8008646:	f000 fed9 	bl	80093fc <__malloc_unlock>
 800864a:	2000      	movs	r0, #0
 800864c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800864e:	4261      	negs	r1, r4
 8008650:	4630      	mov	r0, r6
 8008652:	f001 fbd5 	bl	8009e00 <_sbrk_r>
 8008656:	3001      	adds	r0, #1
 8008658:	d00d      	beq.n	8008676 <_malloc_trim_r+0x6e>
 800865a:	4b10      	ldr	r3, [pc, #64]	; (800869c <_malloc_trim_r+0x94>)
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	6819      	ldr	r1, [r3, #0]
 8008660:	1b2d      	subs	r5, r5, r4
 8008662:	f045 0501 	orr.w	r5, r5, #1
 8008666:	4630      	mov	r0, r6
 8008668:	1b09      	subs	r1, r1, r4
 800866a:	6055      	str	r5, [r2, #4]
 800866c:	6019      	str	r1, [r3, #0]
 800866e:	f000 fec5 	bl	80093fc <__malloc_unlock>
 8008672:	2001      	movs	r0, #1
 8008674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008676:	2100      	movs	r1, #0
 8008678:	4630      	mov	r0, r6
 800867a:	f001 fbc1 	bl	8009e00 <_sbrk_r>
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	1a83      	subs	r3, r0, r2
 8008682:	2b0f      	cmp	r3, #15
 8008684:	ddde      	ble.n	8008644 <_malloc_trim_r+0x3c>
 8008686:	4c06      	ldr	r4, [pc, #24]	; (80086a0 <_malloc_trim_r+0x98>)
 8008688:	4904      	ldr	r1, [pc, #16]	; (800869c <_malloc_trim_r+0x94>)
 800868a:	6824      	ldr	r4, [r4, #0]
 800868c:	f043 0301 	orr.w	r3, r3, #1
 8008690:	1b00      	subs	r0, r0, r4
 8008692:	6053      	str	r3, [r2, #4]
 8008694:	6008      	str	r0, [r1, #0]
 8008696:	e7d5      	b.n	8008644 <_malloc_trim_r+0x3c>
 8008698:	200005d8 	.word	0x200005d8
 800869c:	20000a68 	.word	0x20000a68
 80086a0:	200009e4 	.word	0x200009e4

080086a4 <_free_r>:
 80086a4:	2900      	cmp	r1, #0
 80086a6:	d045      	beq.n	8008734 <_free_r+0x90>
 80086a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ac:	460d      	mov	r5, r1
 80086ae:	4680      	mov	r8, r0
 80086b0:	f000 fea2 	bl	80093f8 <__malloc_lock>
 80086b4:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80086b8:	496a      	ldr	r1, [pc, #424]	; (8008864 <_free_r+0x1c0>)
 80086ba:	f027 0301 	bic.w	r3, r7, #1
 80086be:	f1a5 0408 	sub.w	r4, r5, #8
 80086c2:	18e2      	adds	r2, r4, r3
 80086c4:	688e      	ldr	r6, [r1, #8]
 80086c6:	6850      	ldr	r0, [r2, #4]
 80086c8:	42b2      	cmp	r2, r6
 80086ca:	f020 0003 	bic.w	r0, r0, #3
 80086ce:	d062      	beq.n	8008796 <_free_r+0xf2>
 80086d0:	07fe      	lsls	r6, r7, #31
 80086d2:	6050      	str	r0, [r2, #4]
 80086d4:	d40b      	bmi.n	80086ee <_free_r+0x4a>
 80086d6:	f855 7c08 	ldr.w	r7, [r5, #-8]
 80086da:	1be4      	subs	r4, r4, r7
 80086dc:	f101 0e08 	add.w	lr, r1, #8
 80086e0:	68a5      	ldr	r5, [r4, #8]
 80086e2:	4575      	cmp	r5, lr
 80086e4:	443b      	add	r3, r7
 80086e6:	d06f      	beq.n	80087c8 <_free_r+0x124>
 80086e8:	68e7      	ldr	r7, [r4, #12]
 80086ea:	60ef      	str	r7, [r5, #12]
 80086ec:	60bd      	str	r5, [r7, #8]
 80086ee:	1815      	adds	r5, r2, r0
 80086f0:	686d      	ldr	r5, [r5, #4]
 80086f2:	07ed      	lsls	r5, r5, #31
 80086f4:	d542      	bpl.n	800877c <_free_r+0xd8>
 80086f6:	f043 0201 	orr.w	r2, r3, #1
 80086fa:	6062      	str	r2, [r4, #4]
 80086fc:	50e3      	str	r3, [r4, r3]
 80086fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008702:	d218      	bcs.n	8008736 <_free_r+0x92>
 8008704:	08db      	lsrs	r3, r3, #3
 8008706:	1c5a      	adds	r2, r3, #1
 8008708:	684d      	ldr	r5, [r1, #4]
 800870a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 800870e:	60a7      	str	r7, [r4, #8]
 8008710:	2001      	movs	r0, #1
 8008712:	109b      	asrs	r3, r3, #2
 8008714:	fa00 f303 	lsl.w	r3, r0, r3
 8008718:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 800871c:	431d      	orrs	r5, r3
 800871e:	3808      	subs	r0, #8
 8008720:	60e0      	str	r0, [r4, #12]
 8008722:	604d      	str	r5, [r1, #4]
 8008724:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 8008728:	60fc      	str	r4, [r7, #12]
 800872a:	4640      	mov	r0, r8
 800872c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008730:	f000 be64 	b.w	80093fc <__malloc_unlock>
 8008734:	4770      	bx	lr
 8008736:	0a5a      	lsrs	r2, r3, #9
 8008738:	2a04      	cmp	r2, #4
 800873a:	d853      	bhi.n	80087e4 <_free_r+0x140>
 800873c:	099a      	lsrs	r2, r3, #6
 800873e:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8008742:	007f      	lsls	r7, r7, #1
 8008744:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8008748:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 800874c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8008750:	4944      	ldr	r1, [pc, #272]	; (8008864 <_free_r+0x1c0>)
 8008752:	3808      	subs	r0, #8
 8008754:	4290      	cmp	r0, r2
 8008756:	d04d      	beq.n	80087f4 <_free_r+0x150>
 8008758:	6851      	ldr	r1, [r2, #4]
 800875a:	f021 0103 	bic.w	r1, r1, #3
 800875e:	428b      	cmp	r3, r1
 8008760:	d202      	bcs.n	8008768 <_free_r+0xc4>
 8008762:	6892      	ldr	r2, [r2, #8]
 8008764:	4290      	cmp	r0, r2
 8008766:	d1f7      	bne.n	8008758 <_free_r+0xb4>
 8008768:	68d0      	ldr	r0, [r2, #12]
 800876a:	60e0      	str	r0, [r4, #12]
 800876c:	60a2      	str	r2, [r4, #8]
 800876e:	6084      	str	r4, [r0, #8]
 8008770:	60d4      	str	r4, [r2, #12]
 8008772:	4640      	mov	r0, r8
 8008774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008778:	f000 be40 	b.w	80093fc <__malloc_unlock>
 800877c:	6895      	ldr	r5, [r2, #8]
 800877e:	4f3a      	ldr	r7, [pc, #232]	; (8008868 <_free_r+0x1c4>)
 8008780:	42bd      	cmp	r5, r7
 8008782:	4403      	add	r3, r0
 8008784:	d03f      	beq.n	8008806 <_free_r+0x162>
 8008786:	68d0      	ldr	r0, [r2, #12]
 8008788:	60e8      	str	r0, [r5, #12]
 800878a:	f043 0201 	orr.w	r2, r3, #1
 800878e:	6085      	str	r5, [r0, #8]
 8008790:	6062      	str	r2, [r4, #4]
 8008792:	50e3      	str	r3, [r4, r3]
 8008794:	e7b3      	b.n	80086fe <_free_r+0x5a>
 8008796:	07ff      	lsls	r7, r7, #31
 8008798:	4403      	add	r3, r0
 800879a:	d407      	bmi.n	80087ac <_free_r+0x108>
 800879c:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80087a0:	1aa4      	subs	r4, r4, r2
 80087a2:	4413      	add	r3, r2
 80087a4:	68a0      	ldr	r0, [r4, #8]
 80087a6:	68e2      	ldr	r2, [r4, #12]
 80087a8:	60c2      	str	r2, [r0, #12]
 80087aa:	6090      	str	r0, [r2, #8]
 80087ac:	4a2f      	ldr	r2, [pc, #188]	; (800886c <_free_r+0x1c8>)
 80087ae:	6812      	ldr	r2, [r2, #0]
 80087b0:	f043 0001 	orr.w	r0, r3, #1
 80087b4:	4293      	cmp	r3, r2
 80087b6:	6060      	str	r0, [r4, #4]
 80087b8:	608c      	str	r4, [r1, #8]
 80087ba:	d3b6      	bcc.n	800872a <_free_r+0x86>
 80087bc:	4b2c      	ldr	r3, [pc, #176]	; (8008870 <_free_r+0x1cc>)
 80087be:	4640      	mov	r0, r8
 80087c0:	6819      	ldr	r1, [r3, #0]
 80087c2:	f7ff ff21 	bl	8008608 <_malloc_trim_r>
 80087c6:	e7b0      	b.n	800872a <_free_r+0x86>
 80087c8:	1811      	adds	r1, r2, r0
 80087ca:	6849      	ldr	r1, [r1, #4]
 80087cc:	07c9      	lsls	r1, r1, #31
 80087ce:	d444      	bmi.n	800885a <_free_r+0x1b6>
 80087d0:	6891      	ldr	r1, [r2, #8]
 80087d2:	68d2      	ldr	r2, [r2, #12]
 80087d4:	60ca      	str	r2, [r1, #12]
 80087d6:	4403      	add	r3, r0
 80087d8:	f043 0001 	orr.w	r0, r3, #1
 80087dc:	6091      	str	r1, [r2, #8]
 80087de:	6060      	str	r0, [r4, #4]
 80087e0:	50e3      	str	r3, [r4, r3]
 80087e2:	e7a2      	b.n	800872a <_free_r+0x86>
 80087e4:	2a14      	cmp	r2, #20
 80087e6:	d817      	bhi.n	8008818 <_free_r+0x174>
 80087e8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 80087ec:	007f      	lsls	r7, r7, #1
 80087ee:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 80087f2:	e7a9      	b.n	8008748 <_free_r+0xa4>
 80087f4:	10aa      	asrs	r2, r5, #2
 80087f6:	684b      	ldr	r3, [r1, #4]
 80087f8:	2501      	movs	r5, #1
 80087fa:	fa05 f202 	lsl.w	r2, r5, r2
 80087fe:	4313      	orrs	r3, r2
 8008800:	604b      	str	r3, [r1, #4]
 8008802:	4602      	mov	r2, r0
 8008804:	e7b1      	b.n	800876a <_free_r+0xc6>
 8008806:	f043 0201 	orr.w	r2, r3, #1
 800880a:	614c      	str	r4, [r1, #20]
 800880c:	610c      	str	r4, [r1, #16]
 800880e:	60e5      	str	r5, [r4, #12]
 8008810:	60a5      	str	r5, [r4, #8]
 8008812:	6062      	str	r2, [r4, #4]
 8008814:	50e3      	str	r3, [r4, r3]
 8008816:	e788      	b.n	800872a <_free_r+0x86>
 8008818:	2a54      	cmp	r2, #84	; 0x54
 800881a:	d806      	bhi.n	800882a <_free_r+0x186>
 800881c:	0b1a      	lsrs	r2, r3, #12
 800881e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8008822:	007f      	lsls	r7, r7, #1
 8008824:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 8008828:	e78e      	b.n	8008748 <_free_r+0xa4>
 800882a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800882e:	d806      	bhi.n	800883e <_free_r+0x19a>
 8008830:	0bda      	lsrs	r2, r3, #15
 8008832:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8008836:	007f      	lsls	r7, r7, #1
 8008838:	f102 0577 	add.w	r5, r2, #119	; 0x77
 800883c:	e784      	b.n	8008748 <_free_r+0xa4>
 800883e:	f240 5054 	movw	r0, #1364	; 0x554
 8008842:	4282      	cmp	r2, r0
 8008844:	d806      	bhi.n	8008854 <_free_r+0x1b0>
 8008846:	0c9a      	lsrs	r2, r3, #18
 8008848:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800884c:	007f      	lsls	r7, r7, #1
 800884e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 8008852:	e779      	b.n	8008748 <_free_r+0xa4>
 8008854:	27fe      	movs	r7, #254	; 0xfe
 8008856:	257e      	movs	r5, #126	; 0x7e
 8008858:	e776      	b.n	8008748 <_free_r+0xa4>
 800885a:	f043 0201 	orr.w	r2, r3, #1
 800885e:	6062      	str	r2, [r4, #4]
 8008860:	50e3      	str	r3, [r4, r3]
 8008862:	e762      	b.n	800872a <_free_r+0x86>
 8008864:	200005d8 	.word	0x200005d8
 8008868:	200005e0 	.word	0x200005e0
 800886c:	200009e0 	.word	0x200009e0
 8008870:	20000a64 	.word	0x20000a64

08008874 <__sfvwrite_r>:
 8008874:	6893      	ldr	r3, [r2, #8]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d076      	beq.n	8008968 <__sfvwrite_r+0xf4>
 800887a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887e:	898b      	ldrh	r3, [r1, #12]
 8008880:	b085      	sub	sp, #20
 8008882:	460c      	mov	r4, r1
 8008884:	0719      	lsls	r1, r3, #28
 8008886:	9001      	str	r0, [sp, #4]
 8008888:	4616      	mov	r6, r2
 800888a:	d529      	bpl.n	80088e0 <__sfvwrite_r+0x6c>
 800888c:	6922      	ldr	r2, [r4, #16]
 800888e:	b33a      	cbz	r2, 80088e0 <__sfvwrite_r+0x6c>
 8008890:	f003 0802 	and.w	r8, r3, #2
 8008894:	fa1f f088 	uxth.w	r0, r8
 8008898:	6835      	ldr	r5, [r6, #0]
 800889a:	2800      	cmp	r0, #0
 800889c:	d02f      	beq.n	80088fe <__sfvwrite_r+0x8a>
 800889e:	f04f 0900 	mov.w	r9, #0
 80088a2:	4fb4      	ldr	r7, [pc, #720]	; (8008b74 <__sfvwrite_r+0x300>)
 80088a4:	46c8      	mov	r8, r9
 80088a6:	46b2      	mov	sl, r6
 80088a8:	45b8      	cmp	r8, r7
 80088aa:	4643      	mov	r3, r8
 80088ac:	464a      	mov	r2, r9
 80088ae:	bf28      	it	cs
 80088b0:	463b      	movcs	r3, r7
 80088b2:	9801      	ldr	r0, [sp, #4]
 80088b4:	f1b8 0f00 	cmp.w	r8, #0
 80088b8:	d050      	beq.n	800895c <__sfvwrite_r+0xe8>
 80088ba:	69e1      	ldr	r1, [r4, #28]
 80088bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80088be:	47b0      	blx	r6
 80088c0:	2800      	cmp	r0, #0
 80088c2:	dd71      	ble.n	80089a8 <__sfvwrite_r+0x134>
 80088c4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80088c8:	1a1b      	subs	r3, r3, r0
 80088ca:	4481      	add	r9, r0
 80088cc:	ebc0 0808 	rsb	r8, r0, r8
 80088d0:	f8ca 3008 	str.w	r3, [sl, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e7      	bne.n	80088a8 <__sfvwrite_r+0x34>
 80088d8:	2000      	movs	r0, #0
 80088da:	b005      	add	sp, #20
 80088dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e0:	4621      	mov	r1, r4
 80088e2:	9801      	ldr	r0, [sp, #4]
 80088e4:	f7fe fd40 	bl	8007368 <__swsetup_r>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	f040 813a 	bne.w	8008b62 <__sfvwrite_r+0x2ee>
 80088ee:	89a3      	ldrh	r3, [r4, #12]
 80088f0:	6835      	ldr	r5, [r6, #0]
 80088f2:	f003 0802 	and.w	r8, r3, #2
 80088f6:	fa1f f088 	uxth.w	r0, r8
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d1cf      	bne.n	800889e <__sfvwrite_r+0x2a>
 80088fe:	f013 0901 	ands.w	r9, r3, #1
 8008902:	d15b      	bne.n	80089bc <__sfvwrite_r+0x148>
 8008904:	464f      	mov	r7, r9
 8008906:	9602      	str	r6, [sp, #8]
 8008908:	b31f      	cbz	r7, 8008952 <__sfvwrite_r+0xde>
 800890a:	059a      	lsls	r2, r3, #22
 800890c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8008910:	d52c      	bpl.n	800896c <__sfvwrite_r+0xf8>
 8008912:	4547      	cmp	r7, r8
 8008914:	46c2      	mov	sl, r8
 8008916:	f0c0 80a4 	bcc.w	8008a62 <__sfvwrite_r+0x1ee>
 800891a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800891e:	f040 80b1 	bne.w	8008a84 <__sfvwrite_r+0x210>
 8008922:	6820      	ldr	r0, [r4, #0]
 8008924:	4652      	mov	r2, sl
 8008926:	4649      	mov	r1, r9
 8008928:	f000 fd02 	bl	8009330 <memmove>
 800892c:	68a0      	ldr	r0, [r4, #8]
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	ebc8 0000 	rsb	r0, r8, r0
 8008934:	4453      	add	r3, sl
 8008936:	60a0      	str	r0, [r4, #8]
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	4638      	mov	r0, r7
 800893c:	9a02      	ldr	r2, [sp, #8]
 800893e:	6893      	ldr	r3, [r2, #8]
 8008940:	1a1b      	subs	r3, r3, r0
 8008942:	4481      	add	r9, r0
 8008944:	1a3f      	subs	r7, r7, r0
 8008946:	6093      	str	r3, [r2, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d0c5      	beq.n	80088d8 <__sfvwrite_r+0x64>
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	2f00      	cmp	r7, #0
 8008950:	d1db      	bne.n	800890a <__sfvwrite_r+0x96>
 8008952:	f8d5 9000 	ldr.w	r9, [r5]
 8008956:	686f      	ldr	r7, [r5, #4]
 8008958:	3508      	adds	r5, #8
 800895a:	e7d5      	b.n	8008908 <__sfvwrite_r+0x94>
 800895c:	f8d5 9000 	ldr.w	r9, [r5]
 8008960:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8008964:	3508      	adds	r5, #8
 8008966:	e79f      	b.n	80088a8 <__sfvwrite_r+0x34>
 8008968:	2000      	movs	r0, #0
 800896a:	4770      	bx	lr
 800896c:	6820      	ldr	r0, [r4, #0]
 800896e:	6923      	ldr	r3, [r4, #16]
 8008970:	4298      	cmp	r0, r3
 8008972:	d803      	bhi.n	800897c <__sfvwrite_r+0x108>
 8008974:	6961      	ldr	r1, [r4, #20]
 8008976:	428f      	cmp	r7, r1
 8008978:	f080 80b7 	bcs.w	8008aea <__sfvwrite_r+0x276>
 800897c:	45b8      	cmp	r8, r7
 800897e:	bf28      	it	cs
 8008980:	46b8      	movcs	r8, r7
 8008982:	4642      	mov	r2, r8
 8008984:	4649      	mov	r1, r9
 8008986:	f000 fcd3 	bl	8009330 <memmove>
 800898a:	68a3      	ldr	r3, [r4, #8]
 800898c:	6822      	ldr	r2, [r4, #0]
 800898e:	ebc8 0303 	rsb	r3, r8, r3
 8008992:	4442      	add	r2, r8
 8008994:	60a3      	str	r3, [r4, #8]
 8008996:	6022      	str	r2, [r4, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d149      	bne.n	8008a30 <__sfvwrite_r+0x1bc>
 800899c:	4621      	mov	r1, r4
 800899e:	9801      	ldr	r0, [sp, #4]
 80089a0:	f7ff fd94 	bl	80084cc <_fflush_r>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d043      	beq.n	8008a30 <__sfvwrite_r+0x1bc>
 80089a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
 80089b4:	81a3      	strh	r3, [r4, #12]
 80089b6:	b005      	add	sp, #20
 80089b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089bc:	4680      	mov	r8, r0
 80089be:	9002      	str	r0, [sp, #8]
 80089c0:	4682      	mov	sl, r0
 80089c2:	4681      	mov	r9, r0
 80089c4:	f1b9 0f00 	cmp.w	r9, #0
 80089c8:	d02a      	beq.n	8008a20 <__sfvwrite_r+0x1ac>
 80089ca:	9b02      	ldr	r3, [sp, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d04c      	beq.n	8008a6a <__sfvwrite_r+0x1f6>
 80089d0:	6820      	ldr	r0, [r4, #0]
 80089d2:	6923      	ldr	r3, [r4, #16]
 80089d4:	6962      	ldr	r2, [r4, #20]
 80089d6:	45c8      	cmp	r8, r9
 80089d8:	46c3      	mov	fp, r8
 80089da:	bf28      	it	cs
 80089dc:	46cb      	movcs	fp, r9
 80089de:	4298      	cmp	r0, r3
 80089e0:	465f      	mov	r7, fp
 80089e2:	d904      	bls.n	80089ee <__sfvwrite_r+0x17a>
 80089e4:	68a3      	ldr	r3, [r4, #8]
 80089e6:	4413      	add	r3, r2
 80089e8:	459b      	cmp	fp, r3
 80089ea:	f300 8090 	bgt.w	8008b0e <__sfvwrite_r+0x29a>
 80089ee:	4593      	cmp	fp, r2
 80089f0:	db20      	blt.n	8008a34 <__sfvwrite_r+0x1c0>
 80089f2:	4613      	mov	r3, r2
 80089f4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80089f6:	69e1      	ldr	r1, [r4, #28]
 80089f8:	9801      	ldr	r0, [sp, #4]
 80089fa:	4652      	mov	r2, sl
 80089fc:	47b8      	blx	r7
 80089fe:	1e07      	subs	r7, r0, #0
 8008a00:	ddd2      	ble.n	80089a8 <__sfvwrite_r+0x134>
 8008a02:	ebb8 0807 	subs.w	r8, r8, r7
 8008a06:	d023      	beq.n	8008a50 <__sfvwrite_r+0x1dc>
 8008a08:	68b3      	ldr	r3, [r6, #8]
 8008a0a:	1bdb      	subs	r3, r3, r7
 8008a0c:	44ba      	add	sl, r7
 8008a0e:	ebc7 0909 	rsb	r9, r7, r9
 8008a12:	60b3      	str	r3, [r6, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f43f af5f 	beq.w	80088d8 <__sfvwrite_r+0x64>
 8008a1a:	f1b9 0f00 	cmp.w	r9, #0
 8008a1e:	d1d4      	bne.n	80089ca <__sfvwrite_r+0x156>
 8008a20:	2300      	movs	r3, #0
 8008a22:	f8d5 a000 	ldr.w	sl, [r5]
 8008a26:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8008a2a:	9302      	str	r3, [sp, #8]
 8008a2c:	3508      	adds	r5, #8
 8008a2e:	e7c9      	b.n	80089c4 <__sfvwrite_r+0x150>
 8008a30:	4640      	mov	r0, r8
 8008a32:	e783      	b.n	800893c <__sfvwrite_r+0xc8>
 8008a34:	465a      	mov	r2, fp
 8008a36:	4651      	mov	r1, sl
 8008a38:	f000 fc7a 	bl	8009330 <memmove>
 8008a3c:	68a2      	ldr	r2, [r4, #8]
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	ebcb 0202 	rsb	r2, fp, r2
 8008a44:	445b      	add	r3, fp
 8008a46:	ebb8 0807 	subs.w	r8, r8, r7
 8008a4a:	60a2      	str	r2, [r4, #8]
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	d1db      	bne.n	8008a08 <__sfvwrite_r+0x194>
 8008a50:	4621      	mov	r1, r4
 8008a52:	9801      	ldr	r0, [sp, #4]
 8008a54:	f7ff fd3a 	bl	80084cc <_fflush_r>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d1a5      	bne.n	80089a8 <__sfvwrite_r+0x134>
 8008a5c:	f8cd 8008 	str.w	r8, [sp, #8]
 8008a60:	e7d2      	b.n	8008a08 <__sfvwrite_r+0x194>
 8008a62:	6820      	ldr	r0, [r4, #0]
 8008a64:	46b8      	mov	r8, r7
 8008a66:	46ba      	mov	sl, r7
 8008a68:	e75c      	b.n	8008924 <__sfvwrite_r+0xb0>
 8008a6a:	464a      	mov	r2, r9
 8008a6c:	210a      	movs	r1, #10
 8008a6e:	4650      	mov	r0, sl
 8008a70:	f000 fc0e 	bl	8009290 <memchr>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	d06f      	beq.n	8008b58 <__sfvwrite_r+0x2e4>
 8008a78:	3001      	adds	r0, #1
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	ebca 0800 	rsb	r8, sl, r0
 8008a80:	9302      	str	r3, [sp, #8]
 8008a82:	e7a5      	b.n	80089d0 <__sfvwrite_r+0x15c>
 8008a84:	6962      	ldr	r2, [r4, #20]
 8008a86:	6820      	ldr	r0, [r4, #0]
 8008a88:	6921      	ldr	r1, [r4, #16]
 8008a8a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 8008a8e:	ebc1 0a00 	rsb	sl, r1, r0
 8008a92:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8008a96:	f10a 0001 	add.w	r0, sl, #1
 8008a9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008a9e:	4438      	add	r0, r7
 8008aa0:	4540      	cmp	r0, r8
 8008aa2:	4642      	mov	r2, r8
 8008aa4:	bf84      	itt	hi
 8008aa6:	4680      	movhi	r8, r0
 8008aa8:	4642      	movhi	r2, r8
 8008aaa:	055b      	lsls	r3, r3, #21
 8008aac:	d542      	bpl.n	8008b34 <__sfvwrite_r+0x2c0>
 8008aae:	4611      	mov	r1, r2
 8008ab0:	9801      	ldr	r0, [sp, #4]
 8008ab2:	f000 f91b 	bl	8008cec <_malloc_r>
 8008ab6:	4683      	mov	fp, r0
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d055      	beq.n	8008b68 <__sfvwrite_r+0x2f4>
 8008abc:	4652      	mov	r2, sl
 8008abe:	6921      	ldr	r1, [r4, #16]
 8008ac0:	f7fb fab0 	bl	8004024 <memcpy>
 8008ac4:	89a3      	ldrh	r3, [r4, #12]
 8008ac6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ace:	81a3      	strh	r3, [r4, #12]
 8008ad0:	ebca 0308 	rsb	r3, sl, r8
 8008ad4:	eb0b 000a 	add.w	r0, fp, sl
 8008ad8:	f8c4 8014 	str.w	r8, [r4, #20]
 8008adc:	f8c4 b010 	str.w	fp, [r4, #16]
 8008ae0:	6020      	str	r0, [r4, #0]
 8008ae2:	60a3      	str	r3, [r4, #8]
 8008ae4:	46b8      	mov	r8, r7
 8008ae6:	46ba      	mov	sl, r7
 8008ae8:	e71c      	b.n	8008924 <__sfvwrite_r+0xb0>
 8008aea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008aee:	42bb      	cmp	r3, r7
 8008af0:	bf28      	it	cs
 8008af2:	463b      	movcs	r3, r7
 8008af4:	464a      	mov	r2, r9
 8008af6:	fb93 f3f1 	sdiv	r3, r3, r1
 8008afa:	9801      	ldr	r0, [sp, #4]
 8008afc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008afe:	fb01 f303 	mul.w	r3, r1, r3
 8008b02:	69e1      	ldr	r1, [r4, #28]
 8008b04:	47b0      	blx	r6
 8008b06:	2800      	cmp	r0, #0
 8008b08:	f73f af18 	bgt.w	800893c <__sfvwrite_r+0xc8>
 8008b0c:	e74c      	b.n	80089a8 <__sfvwrite_r+0x134>
 8008b0e:	461a      	mov	r2, r3
 8008b10:	4651      	mov	r1, sl
 8008b12:	9303      	str	r3, [sp, #12]
 8008b14:	f000 fc0c 	bl	8009330 <memmove>
 8008b18:	6822      	ldr	r2, [r4, #0]
 8008b1a:	9b03      	ldr	r3, [sp, #12]
 8008b1c:	9801      	ldr	r0, [sp, #4]
 8008b1e:	441a      	add	r2, r3
 8008b20:	6022      	str	r2, [r4, #0]
 8008b22:	4621      	mov	r1, r4
 8008b24:	f7ff fcd2 	bl	80084cc <_fflush_r>
 8008b28:	9b03      	ldr	r3, [sp, #12]
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	f47f af3c 	bne.w	80089a8 <__sfvwrite_r+0x134>
 8008b30:	461f      	mov	r7, r3
 8008b32:	e766      	b.n	8008a02 <__sfvwrite_r+0x18e>
 8008b34:	9801      	ldr	r0, [sp, #4]
 8008b36:	f000 ff73 	bl	8009a20 <_realloc_r>
 8008b3a:	4683      	mov	fp, r0
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d1c7      	bne.n	8008ad0 <__sfvwrite_r+0x25c>
 8008b40:	9d01      	ldr	r5, [sp, #4]
 8008b42:	6921      	ldr	r1, [r4, #16]
 8008b44:	4628      	mov	r0, r5
 8008b46:	f7ff fdad 	bl	80086a4 <_free_r>
 8008b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4e:	220c      	movs	r2, #12
 8008b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b54:	602a      	str	r2, [r5, #0]
 8008b56:	e729      	b.n	80089ac <__sfvwrite_r+0x138>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	f109 0801 	add.w	r8, r9, #1
 8008b5e:	9302      	str	r3, [sp, #8]
 8008b60:	e736      	b.n	80089d0 <__sfvwrite_r+0x15c>
 8008b62:	f04f 30ff 	mov.w	r0, #4294967295
 8008b66:	e6b8      	b.n	80088da <__sfvwrite_r+0x66>
 8008b68:	9a01      	ldr	r2, [sp, #4]
 8008b6a:	230c      	movs	r3, #12
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b72:	e71b      	b.n	80089ac <__sfvwrite_r+0x138>
 8008b74:	7ffffc00 	.word	0x7ffffc00

08008b78 <_fwalk_reent>:
 8008b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b7c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8008b80:	d01f      	beq.n	8008bc2 <_fwalk_reent+0x4a>
 8008b82:	4688      	mov	r8, r1
 8008b84:	4606      	mov	r6, r0
 8008b86:	f04f 0900 	mov.w	r9, #0
 8008b8a:	687d      	ldr	r5, [r7, #4]
 8008b8c:	68bc      	ldr	r4, [r7, #8]
 8008b8e:	3d01      	subs	r5, #1
 8008b90:	d411      	bmi.n	8008bb6 <_fwalk_reent+0x3e>
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	f105 35ff 	add.w	r5, r5, #4294967295
 8008b9a:	d908      	bls.n	8008bae <_fwalk_reent+0x36>
 8008b9c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	d002      	beq.n	8008bae <_fwalk_reent+0x36>
 8008ba8:	47c0      	blx	r8
 8008baa:	ea49 0900 	orr.w	r9, r9, r0
 8008bae:	1c6b      	adds	r3, r5, #1
 8008bb0:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8008bb4:	d1ed      	bne.n	8008b92 <_fwalk_reent+0x1a>
 8008bb6:	683f      	ldr	r7, [r7, #0]
 8008bb8:	2f00      	cmp	r7, #0
 8008bba:	d1e6      	bne.n	8008b8a <_fwalk_reent+0x12>
 8008bbc:	4648      	mov	r0, r9
 8008bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bc2:	46b9      	mov	r9, r7
 8008bc4:	4648      	mov	r0, r9
 8008bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bca:	bf00      	nop

08008bcc <__locale_mb_cur_max>:
 8008bcc:	4b04      	ldr	r3, [pc, #16]	; (8008be0 <__locale_mb_cur_max+0x14>)
 8008bce:	4a05      	ldr	r2, [pc, #20]	; (8008be4 <__locale_mb_cur_max+0x18>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bf08      	it	eq
 8008bd8:	4613      	moveq	r3, r2
 8008bda:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8008bde:	4770      	bx	lr
 8008be0:	20000468 	.word	0x20000468
 8008be4:	2000046c 	.word	0x2000046c

08008be8 <_localeconv_r>:
 8008be8:	4a04      	ldr	r2, [pc, #16]	; (8008bfc <_localeconv_r+0x14>)
 8008bea:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <_localeconv_r+0x18>)
 8008bec:	6812      	ldr	r2, [r2, #0]
 8008bee:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	bf08      	it	eq
 8008bf4:	4618      	moveq	r0, r3
 8008bf6:	30f0      	adds	r0, #240	; 0xf0
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	20000468 	.word	0x20000468
 8008c00:	2000046c 	.word	0x2000046c

08008c04 <__swhatbuf_r>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	460d      	mov	r5, r1
 8008c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c0c:	2900      	cmp	r1, #0
 8008c0e:	b090      	sub	sp, #64	; 0x40
 8008c10:	4614      	mov	r4, r2
 8008c12:	461e      	mov	r6, r3
 8008c14:	db14      	blt.n	8008c40 <__swhatbuf_r+0x3c>
 8008c16:	aa01      	add	r2, sp, #4
 8008c18:	f001 fb16 	bl	800a248 <_fstat_r>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	db0f      	blt.n	8008c40 <__swhatbuf_r+0x3c>
 8008c20:	9a02      	ldr	r2, [sp, #8]
 8008c22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c26:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8008c2a:	fab2 f282 	clz	r2, r2
 8008c2e:	0952      	lsrs	r2, r2, #5
 8008c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c34:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008c38:	6032      	str	r2, [r6, #0]
 8008c3a:	6023      	str	r3, [r4, #0]
 8008c3c:	b010      	add	sp, #64	; 0x40
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}
 8008c40:	89a8      	ldrh	r0, [r5, #12]
 8008c42:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8008c46:	b282      	uxth	r2, r0
 8008c48:	2000      	movs	r0, #0
 8008c4a:	6030      	str	r0, [r6, #0]
 8008c4c:	b11a      	cbz	r2, 8008c56 <__swhatbuf_r+0x52>
 8008c4e:	2340      	movs	r3, #64	; 0x40
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	b010      	add	sp, #64	; 0x40
 8008c54:	bd70      	pop	{r4, r5, r6, pc}
 8008c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	6023      	str	r3, [r4, #0]
 8008c5e:	b010      	add	sp, #64	; 0x40
 8008c60:	bd70      	pop	{r4, r5, r6, pc}
 8008c62:	bf00      	nop

08008c64 <__smakebuf_r>:
 8008c64:	898a      	ldrh	r2, [r1, #12]
 8008c66:	0792      	lsls	r2, r2, #30
 8008c68:	460b      	mov	r3, r1
 8008c6a:	d506      	bpl.n	8008c7a <__smakebuf_r+0x16>
 8008c6c:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c70:	2101      	movs	r1, #1
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	611a      	str	r2, [r3, #16]
 8008c76:	6159      	str	r1, [r3, #20]
 8008c78:	4770      	bx	lr
 8008c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	ab01      	add	r3, sp, #4
 8008c80:	466a      	mov	r2, sp
 8008c82:	460c      	mov	r4, r1
 8008c84:	4605      	mov	r5, r0
 8008c86:	f7ff ffbd 	bl	8008c04 <__swhatbuf_r>
 8008c8a:	9900      	ldr	r1, [sp, #0]
 8008c8c:	4606      	mov	r6, r0
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f000 f82c 	bl	8008cec <_malloc_r>
 8008c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c98:	b1d0      	cbz	r0, 8008cd0 <__smakebuf_r+0x6c>
 8008c9a:	9a01      	ldr	r2, [sp, #4]
 8008c9c:	4f12      	ldr	r7, [pc, #72]	; (8008ce8 <__smakebuf_r+0x84>)
 8008c9e:	9900      	ldr	r1, [sp, #0]
 8008ca0:	63ef      	str	r7, [r5, #60]	; 0x3c
 8008ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca6:	81a3      	strh	r3, [r4, #12]
 8008ca8:	6020      	str	r0, [r4, #0]
 8008caa:	6120      	str	r0, [r4, #16]
 8008cac:	6161      	str	r1, [r4, #20]
 8008cae:	b91a      	cbnz	r2, 8008cb8 <__smakebuf_r+0x54>
 8008cb0:	4333      	orrs	r3, r6
 8008cb2:	81a3      	strh	r3, [r4, #12]
 8008cb4:	b003      	add	sp, #12
 8008cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cb8:	4628      	mov	r0, r5
 8008cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cbe:	f001 fad7 	bl	800a270 <_isatty_r>
 8008cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	d0f2      	beq.n	8008cb0 <__smakebuf_r+0x4c>
 8008cca:	f043 0301 	orr.w	r3, r3, #1
 8008cce:	e7ef      	b.n	8008cb0 <__smakebuf_r+0x4c>
 8008cd0:	059a      	lsls	r2, r3, #22
 8008cd2:	d4ef      	bmi.n	8008cb4 <__smakebuf_r+0x50>
 8008cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cd8:	f043 0302 	orr.w	r3, r3, #2
 8008cdc:	2101      	movs	r1, #1
 8008cde:	81a3      	strh	r3, [r4, #12]
 8008ce0:	6022      	str	r2, [r4, #0]
 8008ce2:	6122      	str	r2, [r4, #16]
 8008ce4:	6161      	str	r1, [r4, #20]
 8008ce6:	e7e5      	b.n	8008cb4 <__smakebuf_r+0x50>
 8008ce8:	080084f9 	.word	0x080084f9

08008cec <_malloc_r>:
 8008cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf0:	f101 050b 	add.w	r5, r1, #11
 8008cf4:	2d16      	cmp	r5, #22
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	4606      	mov	r6, r0
 8008cfa:	f240 809f 	bls.w	8008e3c <_malloc_r+0x150>
 8008cfe:	f035 0507 	bics.w	r5, r5, #7
 8008d02:	f100 80bf 	bmi.w	8008e84 <_malloc_r+0x198>
 8008d06:	42a9      	cmp	r1, r5
 8008d08:	f200 80bc 	bhi.w	8008e84 <_malloc_r+0x198>
 8008d0c:	f000 fb74 	bl	80093f8 <__malloc_lock>
 8008d10:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8008d14:	f0c0 829c 	bcc.w	8009250 <_malloc_r+0x564>
 8008d18:	0a6b      	lsrs	r3, r5, #9
 8008d1a:	f000 80ba 	beq.w	8008e92 <_malloc_r+0x1a6>
 8008d1e:	2b04      	cmp	r3, #4
 8008d20:	f200 8183 	bhi.w	800902a <_malloc_r+0x33e>
 8008d24:	09a8      	lsrs	r0, r5, #6
 8008d26:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 8008d2a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8008d2e:	3038      	adds	r0, #56	; 0x38
 8008d30:	4fc4      	ldr	r7, [pc, #784]	; (8009044 <_malloc_r+0x358>)
 8008d32:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008d36:	f1a3 0108 	sub.w	r1, r3, #8
 8008d3a:	685c      	ldr	r4, [r3, #4]
 8008d3c:	42a1      	cmp	r1, r4
 8008d3e:	d107      	bne.n	8008d50 <_malloc_r+0x64>
 8008d40:	e0ac      	b.n	8008e9c <_malloc_r+0x1b0>
 8008d42:	2a00      	cmp	r2, #0
 8008d44:	f280 80ac 	bge.w	8008ea0 <_malloc_r+0x1b4>
 8008d48:	68e4      	ldr	r4, [r4, #12]
 8008d4a:	42a1      	cmp	r1, r4
 8008d4c:	f000 80a6 	beq.w	8008e9c <_malloc_r+0x1b0>
 8008d50:	6863      	ldr	r3, [r4, #4]
 8008d52:	f023 0303 	bic.w	r3, r3, #3
 8008d56:	1b5a      	subs	r2, r3, r5
 8008d58:	2a0f      	cmp	r2, #15
 8008d5a:	ddf2      	ble.n	8008d42 <_malloc_r+0x56>
 8008d5c:	49b9      	ldr	r1, [pc, #740]	; (8009044 <_malloc_r+0x358>)
 8008d5e:	693c      	ldr	r4, [r7, #16]
 8008d60:	f101 0e08 	add.w	lr, r1, #8
 8008d64:	4574      	cmp	r4, lr
 8008d66:	f000 81b3 	beq.w	80090d0 <_malloc_r+0x3e4>
 8008d6a:	6863      	ldr	r3, [r4, #4]
 8008d6c:	f023 0303 	bic.w	r3, r3, #3
 8008d70:	1b5a      	subs	r2, r3, r5
 8008d72:	2a0f      	cmp	r2, #15
 8008d74:	f300 8199 	bgt.w	80090aa <_malloc_r+0x3be>
 8008d78:	2a00      	cmp	r2, #0
 8008d7a:	f8c1 e014 	str.w	lr, [r1, #20]
 8008d7e:	f8c1 e010 	str.w	lr, [r1, #16]
 8008d82:	f280 809e 	bge.w	8008ec2 <_malloc_r+0x1d6>
 8008d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d8a:	f080 8167 	bcs.w	800905c <_malloc_r+0x370>
 8008d8e:	08db      	lsrs	r3, r3, #3
 8008d90:	f103 0c01 	add.w	ip, r3, #1
 8008d94:	2201      	movs	r2, #1
 8008d96:	109b      	asrs	r3, r3, #2
 8008d98:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9c:	684a      	ldr	r2, [r1, #4]
 8008d9e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 8008da2:	f8c4 8008 	str.w	r8, [r4, #8]
 8008da6:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 8008daa:	431a      	orrs	r2, r3
 8008dac:	f1a9 0308 	sub.w	r3, r9, #8
 8008db0:	60e3      	str	r3, [r4, #12]
 8008db2:	604a      	str	r2, [r1, #4]
 8008db4:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8008db8:	f8c8 400c 	str.w	r4, [r8, #12]
 8008dbc:	1083      	asrs	r3, r0, #2
 8008dbe:	2401      	movs	r4, #1
 8008dc0:	409c      	lsls	r4, r3
 8008dc2:	4294      	cmp	r4, r2
 8008dc4:	f200 808a 	bhi.w	8008edc <_malloc_r+0x1f0>
 8008dc8:	4214      	tst	r4, r2
 8008dca:	d106      	bne.n	8008dda <_malloc_r+0xee>
 8008dcc:	f020 0003 	bic.w	r0, r0, #3
 8008dd0:	0064      	lsls	r4, r4, #1
 8008dd2:	4214      	tst	r4, r2
 8008dd4:	f100 0004 	add.w	r0, r0, #4
 8008dd8:	d0fa      	beq.n	8008dd0 <_malloc_r+0xe4>
 8008dda:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8008dde:	46cc      	mov	ip, r9
 8008de0:	4680      	mov	r8, r0
 8008de2:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8008de6:	458c      	cmp	ip, r1
 8008de8:	d107      	bne.n	8008dfa <_malloc_r+0x10e>
 8008dea:	e173      	b.n	80090d4 <_malloc_r+0x3e8>
 8008dec:	2a00      	cmp	r2, #0
 8008dee:	f280 8181 	bge.w	80090f4 <_malloc_r+0x408>
 8008df2:	68c9      	ldr	r1, [r1, #12]
 8008df4:	458c      	cmp	ip, r1
 8008df6:	f000 816d 	beq.w	80090d4 <_malloc_r+0x3e8>
 8008dfa:	684b      	ldr	r3, [r1, #4]
 8008dfc:	f023 0303 	bic.w	r3, r3, #3
 8008e00:	1b5a      	subs	r2, r3, r5
 8008e02:	2a0f      	cmp	r2, #15
 8008e04:	ddf2      	ble.n	8008dec <_malloc_r+0x100>
 8008e06:	460c      	mov	r4, r1
 8008e08:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8008e0c:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8008e10:	194b      	adds	r3, r1, r5
 8008e12:	f045 0501 	orr.w	r5, r5, #1
 8008e16:	604d      	str	r5, [r1, #4]
 8008e18:	f042 0101 	orr.w	r1, r2, #1
 8008e1c:	f8c8 c00c 	str.w	ip, [r8, #12]
 8008e20:	4630      	mov	r0, r6
 8008e22:	f8cc 8008 	str.w	r8, [ip, #8]
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	613b      	str	r3, [r7, #16]
 8008e2a:	f8c3 e00c 	str.w	lr, [r3, #12]
 8008e2e:	f8c3 e008 	str.w	lr, [r3, #8]
 8008e32:	6059      	str	r1, [r3, #4]
 8008e34:	509a      	str	r2, [r3, r2]
 8008e36:	f000 fae1 	bl	80093fc <__malloc_unlock>
 8008e3a:	e01f      	b.n	8008e7c <_malloc_r+0x190>
 8008e3c:	2910      	cmp	r1, #16
 8008e3e:	d821      	bhi.n	8008e84 <_malloc_r+0x198>
 8008e40:	f000 fada 	bl	80093f8 <__malloc_lock>
 8008e44:	2510      	movs	r5, #16
 8008e46:	2306      	movs	r3, #6
 8008e48:	2002      	movs	r0, #2
 8008e4a:	4f7e      	ldr	r7, [pc, #504]	; (8009044 <_malloc_r+0x358>)
 8008e4c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008e50:	f1a3 0208 	sub.w	r2, r3, #8
 8008e54:	685c      	ldr	r4, [r3, #4]
 8008e56:	4294      	cmp	r4, r2
 8008e58:	f000 8145 	beq.w	80090e6 <_malloc_r+0x3fa>
 8008e5c:	6863      	ldr	r3, [r4, #4]
 8008e5e:	68e1      	ldr	r1, [r4, #12]
 8008e60:	68a5      	ldr	r5, [r4, #8]
 8008e62:	f023 0303 	bic.w	r3, r3, #3
 8008e66:	4423      	add	r3, r4
 8008e68:	4630      	mov	r0, r6
 8008e6a:	685a      	ldr	r2, [r3, #4]
 8008e6c:	60e9      	str	r1, [r5, #12]
 8008e6e:	f042 0201 	orr.w	r2, r2, #1
 8008e72:	608d      	str	r5, [r1, #8]
 8008e74:	605a      	str	r2, [r3, #4]
 8008e76:	f000 fac1 	bl	80093fc <__malloc_unlock>
 8008e7a:	3408      	adds	r4, #8
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	b003      	add	sp, #12
 8008e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e84:	2400      	movs	r4, #0
 8008e86:	230c      	movs	r3, #12
 8008e88:	4620      	mov	r0, r4
 8008e8a:	6033      	str	r3, [r6, #0]
 8008e8c:	b003      	add	sp, #12
 8008e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e92:	2380      	movs	r3, #128	; 0x80
 8008e94:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8008e98:	203f      	movs	r0, #63	; 0x3f
 8008e9a:	e749      	b.n	8008d30 <_malloc_r+0x44>
 8008e9c:	4670      	mov	r0, lr
 8008e9e:	e75d      	b.n	8008d5c <_malloc_r+0x70>
 8008ea0:	4423      	add	r3, r4
 8008ea2:	68e1      	ldr	r1, [r4, #12]
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	68a5      	ldr	r5, [r4, #8]
 8008ea8:	f042 0201 	orr.w	r2, r2, #1
 8008eac:	60e9      	str	r1, [r5, #12]
 8008eae:	4630      	mov	r0, r6
 8008eb0:	608d      	str	r5, [r1, #8]
 8008eb2:	605a      	str	r2, [r3, #4]
 8008eb4:	f000 faa2 	bl	80093fc <__malloc_unlock>
 8008eb8:	3408      	adds	r4, #8
 8008eba:	4620      	mov	r0, r4
 8008ebc:	b003      	add	sp, #12
 8008ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec2:	4423      	add	r3, r4
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	f042 0201 	orr.w	r2, r2, #1
 8008ecc:	605a      	str	r2, [r3, #4]
 8008ece:	f000 fa95 	bl	80093fc <__malloc_unlock>
 8008ed2:	3408      	adds	r4, #8
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	b003      	add	sp, #12
 8008ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008edc:	68bc      	ldr	r4, [r7, #8]
 8008ede:	6863      	ldr	r3, [r4, #4]
 8008ee0:	f023 0803 	bic.w	r8, r3, #3
 8008ee4:	45a8      	cmp	r8, r5
 8008ee6:	d304      	bcc.n	8008ef2 <_malloc_r+0x206>
 8008ee8:	ebc5 0308 	rsb	r3, r5, r8
 8008eec:	2b0f      	cmp	r3, #15
 8008eee:	f300 808c 	bgt.w	800900a <_malloc_r+0x31e>
 8008ef2:	4b55      	ldr	r3, [pc, #340]	; (8009048 <_malloc_r+0x35c>)
 8008ef4:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8009058 <_malloc_r+0x36c>
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	f8d9 3000 	ldr.w	r3, [r9]
 8008efe:	3301      	adds	r3, #1
 8008f00:	442a      	add	r2, r5
 8008f02:	eb04 0a08 	add.w	sl, r4, r8
 8008f06:	f000 8160 	beq.w	80091ca <_malloc_r+0x4de>
 8008f0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f0e:	320f      	adds	r2, #15
 8008f10:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8008f14:	f022 020f 	bic.w	r2, r2, #15
 8008f18:	4611      	mov	r1, r2
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	9201      	str	r2, [sp, #4]
 8008f1e:	f000 ff6f 	bl	8009e00 <_sbrk_r>
 8008f22:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008f26:	4683      	mov	fp, r0
 8008f28:	9a01      	ldr	r2, [sp, #4]
 8008f2a:	f000 8158 	beq.w	80091de <_malloc_r+0x4f2>
 8008f2e:	4582      	cmp	sl, r0
 8008f30:	f200 80fc 	bhi.w	800912c <_malloc_r+0x440>
 8008f34:	4b45      	ldr	r3, [pc, #276]	; (800904c <_malloc_r+0x360>)
 8008f36:	6819      	ldr	r1, [r3, #0]
 8008f38:	45da      	cmp	sl, fp
 8008f3a:	4411      	add	r1, r2
 8008f3c:	6019      	str	r1, [r3, #0]
 8008f3e:	f000 8153 	beq.w	80091e8 <_malloc_r+0x4fc>
 8008f42:	f8d9 0000 	ldr.w	r0, [r9]
 8008f46:	f8df e110 	ldr.w	lr, [pc, #272]	; 8009058 <_malloc_r+0x36c>
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	bf1b      	ittet	ne
 8008f4e:	ebca 0a0b 	rsbne	sl, sl, fp
 8008f52:	4451      	addne	r1, sl
 8008f54:	f8ce b000 	streq.w	fp, [lr]
 8008f58:	6019      	strne	r1, [r3, #0]
 8008f5a:	f01b 0107 	ands.w	r1, fp, #7
 8008f5e:	f000 8117 	beq.w	8009190 <_malloc_r+0x4a4>
 8008f62:	f1c1 0008 	rsb	r0, r1, #8
 8008f66:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8008f6a:	4483      	add	fp, r0
 8008f6c:	3108      	adds	r1, #8
 8008f6e:	445a      	add	r2, fp
 8008f70:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008f74:	ebc2 0901 	rsb	r9, r2, r1
 8008f78:	4649      	mov	r1, r9
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	9301      	str	r3, [sp, #4]
 8008f7e:	f000 ff3f 	bl	8009e00 <_sbrk_r>
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	9b01      	ldr	r3, [sp, #4]
 8008f86:	f000 813f 	beq.w	8009208 <_malloc_r+0x51c>
 8008f8a:	ebcb 0200 	rsb	r2, fp, r0
 8008f8e:	444a      	add	r2, r9
 8008f90:	f042 0201 	orr.w	r2, r2, #1
 8008f94:	6819      	ldr	r1, [r3, #0]
 8008f96:	f8c7 b008 	str.w	fp, [r7, #8]
 8008f9a:	4449      	add	r1, r9
 8008f9c:	42bc      	cmp	r4, r7
 8008f9e:	f8cb 2004 	str.w	r2, [fp, #4]
 8008fa2:	6019      	str	r1, [r3, #0]
 8008fa4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800904c <_malloc_r+0x360>
 8008fa8:	d016      	beq.n	8008fd8 <_malloc_r+0x2ec>
 8008faa:	f1b8 0f0f 	cmp.w	r8, #15
 8008fae:	f240 80fd 	bls.w	80091ac <_malloc_r+0x4c0>
 8008fb2:	6862      	ldr	r2, [r4, #4]
 8008fb4:	f1a8 030c 	sub.w	r3, r8, #12
 8008fb8:	f023 0307 	bic.w	r3, r3, #7
 8008fbc:	18e0      	adds	r0, r4, r3
 8008fbe:	f002 0201 	and.w	r2, r2, #1
 8008fc2:	f04f 0e05 	mov.w	lr, #5
 8008fc6:	431a      	orrs	r2, r3
 8008fc8:	2b0f      	cmp	r3, #15
 8008fca:	6062      	str	r2, [r4, #4]
 8008fcc:	f8c0 e004 	str.w	lr, [r0, #4]
 8008fd0:	f8c0 e008 	str.w	lr, [r0, #8]
 8008fd4:	f200 811c 	bhi.w	8009210 <_malloc_r+0x524>
 8008fd8:	4b1d      	ldr	r3, [pc, #116]	; (8009050 <_malloc_r+0x364>)
 8008fda:	68bc      	ldr	r4, [r7, #8]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	4291      	cmp	r1, r2
 8008fe0:	bf88      	it	hi
 8008fe2:	6019      	strhi	r1, [r3, #0]
 8008fe4:	4b1b      	ldr	r3, [pc, #108]	; (8009054 <_malloc_r+0x368>)
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	4291      	cmp	r1, r2
 8008fea:	6862      	ldr	r2, [r4, #4]
 8008fec:	bf88      	it	hi
 8008fee:	6019      	strhi	r1, [r3, #0]
 8008ff0:	f022 0203 	bic.w	r2, r2, #3
 8008ff4:	4295      	cmp	r5, r2
 8008ff6:	eba2 0305 	sub.w	r3, r2, r5
 8008ffa:	d801      	bhi.n	8009000 <_malloc_r+0x314>
 8008ffc:	2b0f      	cmp	r3, #15
 8008ffe:	dc04      	bgt.n	800900a <_malloc_r+0x31e>
 8009000:	4630      	mov	r0, r6
 8009002:	f000 f9fb 	bl	80093fc <__malloc_unlock>
 8009006:	2400      	movs	r4, #0
 8009008:	e738      	b.n	8008e7c <_malloc_r+0x190>
 800900a:	1962      	adds	r2, r4, r5
 800900c:	f043 0301 	orr.w	r3, r3, #1
 8009010:	f045 0501 	orr.w	r5, r5, #1
 8009014:	6065      	str	r5, [r4, #4]
 8009016:	4630      	mov	r0, r6
 8009018:	60ba      	str	r2, [r7, #8]
 800901a:	6053      	str	r3, [r2, #4]
 800901c:	f000 f9ee 	bl	80093fc <__malloc_unlock>
 8009020:	3408      	adds	r4, #8
 8009022:	4620      	mov	r0, r4
 8009024:	b003      	add	sp, #12
 8009026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902a:	2b14      	cmp	r3, #20
 800902c:	d971      	bls.n	8009112 <_malloc_r+0x426>
 800902e:	2b54      	cmp	r3, #84	; 0x54
 8009030:	f200 80a4 	bhi.w	800917c <_malloc_r+0x490>
 8009034:	0b28      	lsrs	r0, r5, #12
 8009036:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 800903a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800903e:	306e      	adds	r0, #110	; 0x6e
 8009040:	e676      	b.n	8008d30 <_malloc_r+0x44>
 8009042:	bf00      	nop
 8009044:	200005d8 	.word	0x200005d8
 8009048:	20000a64 	.word	0x20000a64
 800904c:	20000a68 	.word	0x20000a68
 8009050:	20000a60 	.word	0x20000a60
 8009054:	20000a5c 	.word	0x20000a5c
 8009058:	200009e4 	.word	0x200009e4
 800905c:	0a5a      	lsrs	r2, r3, #9
 800905e:	2a04      	cmp	r2, #4
 8009060:	d95e      	bls.n	8009120 <_malloc_r+0x434>
 8009062:	2a14      	cmp	r2, #20
 8009064:	f200 80b3 	bhi.w	80091ce <_malloc_r+0x4e2>
 8009068:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800906c:	0049      	lsls	r1, r1, #1
 800906e:	325b      	adds	r2, #91	; 0x5b
 8009070:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 8009074:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8009078:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8009258 <_malloc_r+0x56c>
 800907c:	f1ac 0c08 	sub.w	ip, ip, #8
 8009080:	458c      	cmp	ip, r1
 8009082:	f000 8088 	beq.w	8009196 <_malloc_r+0x4aa>
 8009086:	684a      	ldr	r2, [r1, #4]
 8009088:	f022 0203 	bic.w	r2, r2, #3
 800908c:	4293      	cmp	r3, r2
 800908e:	d202      	bcs.n	8009096 <_malloc_r+0x3aa>
 8009090:	6889      	ldr	r1, [r1, #8]
 8009092:	458c      	cmp	ip, r1
 8009094:	d1f7      	bne.n	8009086 <_malloc_r+0x39a>
 8009096:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	f8c4 c00c 	str.w	ip, [r4, #12]
 80090a0:	60a1      	str	r1, [r4, #8]
 80090a2:	f8cc 4008 	str.w	r4, [ip, #8]
 80090a6:	60cc      	str	r4, [r1, #12]
 80090a8:	e688      	b.n	8008dbc <_malloc_r+0xd0>
 80090aa:	1963      	adds	r3, r4, r5
 80090ac:	f042 0701 	orr.w	r7, r2, #1
 80090b0:	f045 0501 	orr.w	r5, r5, #1
 80090b4:	6065      	str	r5, [r4, #4]
 80090b6:	4630      	mov	r0, r6
 80090b8:	614b      	str	r3, [r1, #20]
 80090ba:	610b      	str	r3, [r1, #16]
 80090bc:	f8c3 e00c 	str.w	lr, [r3, #12]
 80090c0:	f8c3 e008 	str.w	lr, [r3, #8]
 80090c4:	605f      	str	r7, [r3, #4]
 80090c6:	509a      	str	r2, [r3, r2]
 80090c8:	3408      	adds	r4, #8
 80090ca:	f000 f997 	bl	80093fc <__malloc_unlock>
 80090ce:	e6d5      	b.n	8008e7c <_malloc_r+0x190>
 80090d0:	684a      	ldr	r2, [r1, #4]
 80090d2:	e673      	b.n	8008dbc <_malloc_r+0xd0>
 80090d4:	f108 0801 	add.w	r8, r8, #1
 80090d8:	f018 0f03 	tst.w	r8, #3
 80090dc:	f10c 0c08 	add.w	ip, ip, #8
 80090e0:	f47f ae7f 	bne.w	8008de2 <_malloc_r+0xf6>
 80090e4:	e030      	b.n	8009148 <_malloc_r+0x45c>
 80090e6:	68dc      	ldr	r4, [r3, #12]
 80090e8:	42a3      	cmp	r3, r4
 80090ea:	bf08      	it	eq
 80090ec:	3002      	addeq	r0, #2
 80090ee:	f43f ae35 	beq.w	8008d5c <_malloc_r+0x70>
 80090f2:	e6b3      	b.n	8008e5c <_malloc_r+0x170>
 80090f4:	440b      	add	r3, r1
 80090f6:	460c      	mov	r4, r1
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	68c9      	ldr	r1, [r1, #12]
 80090fc:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8009100:	f042 0201 	orr.w	r2, r2, #1
 8009104:	605a      	str	r2, [r3, #4]
 8009106:	4630      	mov	r0, r6
 8009108:	60e9      	str	r1, [r5, #12]
 800910a:	608d      	str	r5, [r1, #8]
 800910c:	f000 f976 	bl	80093fc <__malloc_unlock>
 8009110:	e6b4      	b.n	8008e7c <_malloc_r+0x190>
 8009112:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 8009116:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 800911a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800911e:	e607      	b.n	8008d30 <_malloc_r+0x44>
 8009120:	099a      	lsrs	r2, r3, #6
 8009122:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8009126:	0049      	lsls	r1, r1, #1
 8009128:	3238      	adds	r2, #56	; 0x38
 800912a:	e7a1      	b.n	8009070 <_malloc_r+0x384>
 800912c:	42bc      	cmp	r4, r7
 800912e:	4b4a      	ldr	r3, [pc, #296]	; (8009258 <_malloc_r+0x56c>)
 8009130:	f43f af00 	beq.w	8008f34 <_malloc_r+0x248>
 8009134:	689c      	ldr	r4, [r3, #8]
 8009136:	6862      	ldr	r2, [r4, #4]
 8009138:	f022 0203 	bic.w	r2, r2, #3
 800913c:	e75a      	b.n	8008ff4 <_malloc_r+0x308>
 800913e:	f859 3908 	ldr.w	r3, [r9], #-8
 8009142:	4599      	cmp	r9, r3
 8009144:	f040 8082 	bne.w	800924c <_malloc_r+0x560>
 8009148:	f010 0f03 	tst.w	r0, #3
 800914c:	f100 30ff 	add.w	r0, r0, #4294967295
 8009150:	d1f5      	bne.n	800913e <_malloc_r+0x452>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	ea23 0304 	bic.w	r3, r3, r4
 8009158:	607b      	str	r3, [r7, #4]
 800915a:	0064      	lsls	r4, r4, #1
 800915c:	429c      	cmp	r4, r3
 800915e:	f63f aebd 	bhi.w	8008edc <_malloc_r+0x1f0>
 8009162:	2c00      	cmp	r4, #0
 8009164:	f43f aeba 	beq.w	8008edc <_malloc_r+0x1f0>
 8009168:	421c      	tst	r4, r3
 800916a:	4640      	mov	r0, r8
 800916c:	f47f ae35 	bne.w	8008dda <_malloc_r+0xee>
 8009170:	0064      	lsls	r4, r4, #1
 8009172:	421c      	tst	r4, r3
 8009174:	f100 0004 	add.w	r0, r0, #4
 8009178:	d0fa      	beq.n	8009170 <_malloc_r+0x484>
 800917a:	e62e      	b.n	8008dda <_malloc_r+0xee>
 800917c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009180:	d818      	bhi.n	80091b4 <_malloc_r+0x4c8>
 8009182:	0be8      	lsrs	r0, r5, #15
 8009184:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 8009188:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800918c:	3077      	adds	r0, #119	; 0x77
 800918e:	e5cf      	b.n	8008d30 <_malloc_r+0x44>
 8009190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009194:	e6eb      	b.n	8008f6e <_malloc_r+0x282>
 8009196:	2101      	movs	r1, #1
 8009198:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800919c:	1092      	asrs	r2, r2, #2
 800919e:	fa01 f202 	lsl.w	r2, r1, r2
 80091a2:	431a      	orrs	r2, r3
 80091a4:	f8c8 2004 	str.w	r2, [r8, #4]
 80091a8:	4661      	mov	r1, ip
 80091aa:	e777      	b.n	800909c <_malloc_r+0x3b0>
 80091ac:	2301      	movs	r3, #1
 80091ae:	f8cb 3004 	str.w	r3, [fp, #4]
 80091b2:	e725      	b.n	8009000 <_malloc_r+0x314>
 80091b4:	f240 5254 	movw	r2, #1364	; 0x554
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d820      	bhi.n	80091fe <_malloc_r+0x512>
 80091bc:	0ca8      	lsrs	r0, r5, #18
 80091be:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 80091c2:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80091c6:	307c      	adds	r0, #124	; 0x7c
 80091c8:	e5b2      	b.n	8008d30 <_malloc_r+0x44>
 80091ca:	3210      	adds	r2, #16
 80091cc:	e6a4      	b.n	8008f18 <_malloc_r+0x22c>
 80091ce:	2a54      	cmp	r2, #84	; 0x54
 80091d0:	d826      	bhi.n	8009220 <_malloc_r+0x534>
 80091d2:	0b1a      	lsrs	r2, r3, #12
 80091d4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 80091d8:	0049      	lsls	r1, r1, #1
 80091da:	326e      	adds	r2, #110	; 0x6e
 80091dc:	e748      	b.n	8009070 <_malloc_r+0x384>
 80091de:	68bc      	ldr	r4, [r7, #8]
 80091e0:	6862      	ldr	r2, [r4, #4]
 80091e2:	f022 0203 	bic.w	r2, r2, #3
 80091e6:	e705      	b.n	8008ff4 <_malloc_r+0x308>
 80091e8:	f3ca 000b 	ubfx	r0, sl, #0, #12
 80091ec:	2800      	cmp	r0, #0
 80091ee:	f47f aea8 	bne.w	8008f42 <_malloc_r+0x256>
 80091f2:	4442      	add	r2, r8
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	f042 0201 	orr.w	r2, r2, #1
 80091fa:	605a      	str	r2, [r3, #4]
 80091fc:	e6ec      	b.n	8008fd8 <_malloc_r+0x2ec>
 80091fe:	23fe      	movs	r3, #254	; 0xfe
 8009200:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 8009204:	207e      	movs	r0, #126	; 0x7e
 8009206:	e593      	b.n	8008d30 <_malloc_r+0x44>
 8009208:	2201      	movs	r2, #1
 800920a:	f04f 0900 	mov.w	r9, #0
 800920e:	e6c1      	b.n	8008f94 <_malloc_r+0x2a8>
 8009210:	f104 0108 	add.w	r1, r4, #8
 8009214:	4630      	mov	r0, r6
 8009216:	f7ff fa45 	bl	80086a4 <_free_r>
 800921a:	f8d9 1000 	ldr.w	r1, [r9]
 800921e:	e6db      	b.n	8008fd8 <_malloc_r+0x2ec>
 8009220:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009224:	d805      	bhi.n	8009232 <_malloc_r+0x546>
 8009226:	0bda      	lsrs	r2, r3, #15
 8009228:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800922c:	0049      	lsls	r1, r1, #1
 800922e:	3277      	adds	r2, #119	; 0x77
 8009230:	e71e      	b.n	8009070 <_malloc_r+0x384>
 8009232:	f240 5154 	movw	r1, #1364	; 0x554
 8009236:	428a      	cmp	r2, r1
 8009238:	d805      	bhi.n	8009246 <_malloc_r+0x55a>
 800923a:	0c9a      	lsrs	r2, r3, #18
 800923c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8009240:	0049      	lsls	r1, r1, #1
 8009242:	327c      	adds	r2, #124	; 0x7c
 8009244:	e714      	b.n	8009070 <_malloc_r+0x384>
 8009246:	21fe      	movs	r1, #254	; 0xfe
 8009248:	227e      	movs	r2, #126	; 0x7e
 800924a:	e711      	b.n	8009070 <_malloc_r+0x384>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	e784      	b.n	800915a <_malloc_r+0x46e>
 8009250:	08e8      	lsrs	r0, r5, #3
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	e5f8      	b.n	8008e4a <_malloc_r+0x15e>
 8009258:	200005d8 	.word	0x200005d8

0800925c <__ascii_mbtowc>:
 800925c:	b082      	sub	sp, #8
 800925e:	b149      	cbz	r1, 8009274 <__ascii_mbtowc+0x18>
 8009260:	b15a      	cbz	r2, 800927a <__ascii_mbtowc+0x1e>
 8009262:	b16b      	cbz	r3, 8009280 <__ascii_mbtowc+0x24>
 8009264:	7813      	ldrb	r3, [r2, #0]
 8009266:	600b      	str	r3, [r1, #0]
 8009268:	7812      	ldrb	r2, [r2, #0]
 800926a:	1c10      	adds	r0, r2, #0
 800926c:	bf18      	it	ne
 800926e:	2001      	movne	r0, #1
 8009270:	b002      	add	sp, #8
 8009272:	4770      	bx	lr
 8009274:	a901      	add	r1, sp, #4
 8009276:	2a00      	cmp	r2, #0
 8009278:	d1f3      	bne.n	8009262 <__ascii_mbtowc+0x6>
 800927a:	4610      	mov	r0, r2
 800927c:	b002      	add	sp, #8
 800927e:	4770      	bx	lr
 8009280:	f06f 0001 	mvn.w	r0, #1
 8009284:	e7f4      	b.n	8009270 <__ascii_mbtowc+0x14>
 8009286:	bf00      	nop
	...

08009290 <memchr>:
 8009290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8009294:	2a10      	cmp	r2, #16
 8009296:	db2b      	blt.n	80092f0 <memchr+0x60>
 8009298:	f010 0f07 	tst.w	r0, #7
 800929c:	d008      	beq.n	80092b0 <memchr+0x20>
 800929e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80092a2:	3a01      	subs	r2, #1
 80092a4:	428b      	cmp	r3, r1
 80092a6:	d02d      	beq.n	8009304 <memchr+0x74>
 80092a8:	f010 0f07 	tst.w	r0, #7
 80092ac:	b342      	cbz	r2, 8009300 <memchr+0x70>
 80092ae:	d1f6      	bne.n	800929e <memchr+0xe>
 80092b0:	b4f0      	push	{r4, r5, r6, r7}
 80092b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80092b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80092ba:	f022 0407 	bic.w	r4, r2, #7
 80092be:	f07f 0700 	mvns.w	r7, #0
 80092c2:	2300      	movs	r3, #0
 80092c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80092c8:	3c08      	subs	r4, #8
 80092ca:	ea85 0501 	eor.w	r5, r5, r1
 80092ce:	ea86 0601 	eor.w	r6, r6, r1
 80092d2:	fa85 f547 	uadd8	r5, r5, r7
 80092d6:	faa3 f587 	sel	r5, r3, r7
 80092da:	fa86 f647 	uadd8	r6, r6, r7
 80092de:	faa5 f687 	sel	r6, r5, r7
 80092e2:	b98e      	cbnz	r6, 8009308 <memchr+0x78>
 80092e4:	d1ee      	bne.n	80092c4 <memchr+0x34>
 80092e6:	bcf0      	pop	{r4, r5, r6, r7}
 80092e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80092ec:	f002 0207 	and.w	r2, r2, #7
 80092f0:	b132      	cbz	r2, 8009300 <memchr+0x70>
 80092f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80092f6:	3a01      	subs	r2, #1
 80092f8:	ea83 0301 	eor.w	r3, r3, r1
 80092fc:	b113      	cbz	r3, 8009304 <memchr+0x74>
 80092fe:	d1f8      	bne.n	80092f2 <memchr+0x62>
 8009300:	2000      	movs	r0, #0
 8009302:	4770      	bx	lr
 8009304:	3801      	subs	r0, #1
 8009306:	4770      	bx	lr
 8009308:	2d00      	cmp	r5, #0
 800930a:	bf06      	itte	eq
 800930c:	4635      	moveq	r5, r6
 800930e:	3803      	subeq	r0, #3
 8009310:	3807      	subne	r0, #7
 8009312:	f015 0f01 	tst.w	r5, #1
 8009316:	d107      	bne.n	8009328 <memchr+0x98>
 8009318:	3001      	adds	r0, #1
 800931a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800931e:	bf02      	ittt	eq
 8009320:	3001      	addeq	r0, #1
 8009322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8009326:	3001      	addeq	r0, #1
 8009328:	bcf0      	pop	{r4, r5, r6, r7}
 800932a:	3801      	subs	r0, #1
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop

08009330 <memmove>:
 8009330:	4288      	cmp	r0, r1
 8009332:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009334:	d90d      	bls.n	8009352 <memmove+0x22>
 8009336:	188b      	adds	r3, r1, r2
 8009338:	4298      	cmp	r0, r3
 800933a:	d20a      	bcs.n	8009352 <memmove+0x22>
 800933c:	1881      	adds	r1, r0, r2
 800933e:	2a00      	cmp	r2, #0
 8009340:	d051      	beq.n	80093e6 <memmove+0xb6>
 8009342:	1a9a      	subs	r2, r3, r2
 8009344:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009348:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800934c:	4293      	cmp	r3, r2
 800934e:	d1f9      	bne.n	8009344 <memmove+0x14>
 8009350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009352:	2a0f      	cmp	r2, #15
 8009354:	d948      	bls.n	80093e8 <memmove+0xb8>
 8009356:	ea41 0300 	orr.w	r3, r1, r0
 800935a:	079b      	lsls	r3, r3, #30
 800935c:	d146      	bne.n	80093ec <memmove+0xbc>
 800935e:	f100 0410 	add.w	r4, r0, #16
 8009362:	f101 0310 	add.w	r3, r1, #16
 8009366:	4615      	mov	r5, r2
 8009368:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800936c:	f844 6c10 	str.w	r6, [r4, #-16]
 8009370:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8009374:	f844 6c0c 	str.w	r6, [r4, #-12]
 8009378:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800937c:	f844 6c08 	str.w	r6, [r4, #-8]
 8009380:	3d10      	subs	r5, #16
 8009382:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8009386:	f844 6c04 	str.w	r6, [r4, #-4]
 800938a:	2d0f      	cmp	r5, #15
 800938c:	f103 0310 	add.w	r3, r3, #16
 8009390:	f104 0410 	add.w	r4, r4, #16
 8009394:	d8e8      	bhi.n	8009368 <memmove+0x38>
 8009396:	f1a2 0310 	sub.w	r3, r2, #16
 800939a:	f023 030f 	bic.w	r3, r3, #15
 800939e:	f002 0e0f 	and.w	lr, r2, #15
 80093a2:	3310      	adds	r3, #16
 80093a4:	f1be 0f03 	cmp.w	lr, #3
 80093a8:	4419      	add	r1, r3
 80093aa:	4403      	add	r3, r0
 80093ac:	d921      	bls.n	80093f2 <memmove+0xc2>
 80093ae:	1f1e      	subs	r6, r3, #4
 80093b0:	460d      	mov	r5, r1
 80093b2:	4674      	mov	r4, lr
 80093b4:	3c04      	subs	r4, #4
 80093b6:	f855 7b04 	ldr.w	r7, [r5], #4
 80093ba:	f846 7f04 	str.w	r7, [r6, #4]!
 80093be:	2c03      	cmp	r4, #3
 80093c0:	d8f8      	bhi.n	80093b4 <memmove+0x84>
 80093c2:	f1ae 0404 	sub.w	r4, lr, #4
 80093c6:	f024 0403 	bic.w	r4, r4, #3
 80093ca:	3404      	adds	r4, #4
 80093cc:	4423      	add	r3, r4
 80093ce:	4421      	add	r1, r4
 80093d0:	f002 0203 	and.w	r2, r2, #3
 80093d4:	b162      	cbz	r2, 80093f0 <memmove+0xc0>
 80093d6:	3b01      	subs	r3, #1
 80093d8:	440a      	add	r2, r1
 80093da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093e2:	428a      	cmp	r2, r1
 80093e4:	d1f9      	bne.n	80093da <memmove+0xaa>
 80093e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e8:	4603      	mov	r3, r0
 80093ea:	e7f3      	b.n	80093d4 <memmove+0xa4>
 80093ec:	4603      	mov	r3, r0
 80093ee:	e7f2      	b.n	80093d6 <memmove+0xa6>
 80093f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f2:	4672      	mov	r2, lr
 80093f4:	e7ee      	b.n	80093d4 <memmove+0xa4>
 80093f6:	bf00      	nop

080093f8 <__malloc_lock>:
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop

080093fc <__malloc_unlock>:
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop

08009400 <_Balloc>:
 8009400:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009402:	b570      	push	{r4, r5, r6, lr}
 8009404:	4605      	mov	r5, r0
 8009406:	460c      	mov	r4, r1
 8009408:	b14b      	cbz	r3, 800941e <_Balloc+0x1e>
 800940a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800940e:	b180      	cbz	r0, 8009432 <_Balloc+0x32>
 8009410:	6802      	ldr	r2, [r0, #0]
 8009412:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8009416:	2300      	movs	r3, #0
 8009418:	6103      	str	r3, [r0, #16]
 800941a:	60c3      	str	r3, [r0, #12]
 800941c:	bd70      	pop	{r4, r5, r6, pc}
 800941e:	2221      	movs	r2, #33	; 0x21
 8009420:	2104      	movs	r1, #4
 8009422:	f000 fe2d 	bl	800a080 <_calloc_r>
 8009426:	64e8      	str	r0, [r5, #76]	; 0x4c
 8009428:	4603      	mov	r3, r0
 800942a:	2800      	cmp	r0, #0
 800942c:	d1ed      	bne.n	800940a <_Balloc+0xa>
 800942e:	2000      	movs	r0, #0
 8009430:	bd70      	pop	{r4, r5, r6, pc}
 8009432:	2101      	movs	r1, #1
 8009434:	fa01 f604 	lsl.w	r6, r1, r4
 8009438:	1d72      	adds	r2, r6, #5
 800943a:	4628      	mov	r0, r5
 800943c:	0092      	lsls	r2, r2, #2
 800943e:	f000 fe1f 	bl	800a080 <_calloc_r>
 8009442:	2800      	cmp	r0, #0
 8009444:	d0f3      	beq.n	800942e <_Balloc+0x2e>
 8009446:	6044      	str	r4, [r0, #4]
 8009448:	6086      	str	r6, [r0, #8]
 800944a:	e7e4      	b.n	8009416 <_Balloc+0x16>

0800944c <_Bfree>:
 800944c:	b131      	cbz	r1, 800945c <_Bfree+0x10>
 800944e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009450:	684a      	ldr	r2, [r1, #4]
 8009452:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009456:	6008      	str	r0, [r1, #0]
 8009458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop

08009460 <__multadd>:
 8009460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009462:	690c      	ldr	r4, [r1, #16]
 8009464:	b083      	sub	sp, #12
 8009466:	460d      	mov	r5, r1
 8009468:	4606      	mov	r6, r0
 800946a:	f101 0e14 	add.w	lr, r1, #20
 800946e:	2700      	movs	r7, #0
 8009470:	f8de 0000 	ldr.w	r0, [lr]
 8009474:	b281      	uxth	r1, r0
 8009476:	fb02 3101 	mla	r1, r2, r1, r3
 800947a:	0c0b      	lsrs	r3, r1, #16
 800947c:	0c00      	lsrs	r0, r0, #16
 800947e:	fb02 3300 	mla	r3, r2, r0, r3
 8009482:	b289      	uxth	r1, r1
 8009484:	3701      	adds	r7, #1
 8009486:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800948a:	42bc      	cmp	r4, r7
 800948c:	f84e 1b04 	str.w	r1, [lr], #4
 8009490:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009494:	dcec      	bgt.n	8009470 <__multadd+0x10>
 8009496:	b13b      	cbz	r3, 80094a8 <__multadd+0x48>
 8009498:	68aa      	ldr	r2, [r5, #8]
 800949a:	4294      	cmp	r4, r2
 800949c:	da07      	bge.n	80094ae <__multadd+0x4e>
 800949e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80094a2:	3401      	adds	r4, #1
 80094a4:	6153      	str	r3, [r2, #20]
 80094a6:	612c      	str	r4, [r5, #16]
 80094a8:	4628      	mov	r0, r5
 80094aa:	b003      	add	sp, #12
 80094ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ae:	6869      	ldr	r1, [r5, #4]
 80094b0:	9301      	str	r3, [sp, #4]
 80094b2:	3101      	adds	r1, #1
 80094b4:	4630      	mov	r0, r6
 80094b6:	f7ff ffa3 	bl	8009400 <_Balloc>
 80094ba:	692a      	ldr	r2, [r5, #16]
 80094bc:	3202      	adds	r2, #2
 80094be:	f105 010c 	add.w	r1, r5, #12
 80094c2:	4607      	mov	r7, r0
 80094c4:	0092      	lsls	r2, r2, #2
 80094c6:	300c      	adds	r0, #12
 80094c8:	f7fa fdac 	bl	8004024 <memcpy>
 80094cc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80094ce:	6869      	ldr	r1, [r5, #4]
 80094d0:	9b01      	ldr	r3, [sp, #4]
 80094d2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80094d6:	6028      	str	r0, [r5, #0]
 80094d8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80094dc:	463d      	mov	r5, r7
 80094de:	e7de      	b.n	800949e <__multadd+0x3e>

080094e0 <__hi0bits>:
 80094e0:	0c03      	lsrs	r3, r0, #16
 80094e2:	041b      	lsls	r3, r3, #16
 80094e4:	b9b3      	cbnz	r3, 8009514 <__hi0bits+0x34>
 80094e6:	0400      	lsls	r0, r0, #16
 80094e8:	2310      	movs	r3, #16
 80094ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80094ee:	bf04      	itt	eq
 80094f0:	0200      	lsleq	r0, r0, #8
 80094f2:	3308      	addeq	r3, #8
 80094f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094f8:	bf04      	itt	eq
 80094fa:	0100      	lsleq	r0, r0, #4
 80094fc:	3304      	addeq	r3, #4
 80094fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009502:	bf04      	itt	eq
 8009504:	0080      	lsleq	r0, r0, #2
 8009506:	3302      	addeq	r3, #2
 8009508:	2800      	cmp	r0, #0
 800950a:	db07      	blt.n	800951c <__hi0bits+0x3c>
 800950c:	0042      	lsls	r2, r0, #1
 800950e:	d403      	bmi.n	8009518 <__hi0bits+0x38>
 8009510:	2020      	movs	r0, #32
 8009512:	4770      	bx	lr
 8009514:	2300      	movs	r3, #0
 8009516:	e7e8      	b.n	80094ea <__hi0bits+0xa>
 8009518:	1c58      	adds	r0, r3, #1
 800951a:	4770      	bx	lr
 800951c:	4618      	mov	r0, r3
 800951e:	4770      	bx	lr

08009520 <__lo0bits>:
 8009520:	6803      	ldr	r3, [r0, #0]
 8009522:	f013 0207 	ands.w	r2, r3, #7
 8009526:	d007      	beq.n	8009538 <__lo0bits+0x18>
 8009528:	07d9      	lsls	r1, r3, #31
 800952a:	d420      	bmi.n	800956e <__lo0bits+0x4e>
 800952c:	079a      	lsls	r2, r3, #30
 800952e:	d420      	bmi.n	8009572 <__lo0bits+0x52>
 8009530:	089b      	lsrs	r3, r3, #2
 8009532:	6003      	str	r3, [r0, #0]
 8009534:	2002      	movs	r0, #2
 8009536:	4770      	bx	lr
 8009538:	b299      	uxth	r1, r3
 800953a:	b909      	cbnz	r1, 8009540 <__lo0bits+0x20>
 800953c:	0c1b      	lsrs	r3, r3, #16
 800953e:	2210      	movs	r2, #16
 8009540:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009544:	bf04      	itt	eq
 8009546:	0a1b      	lsreq	r3, r3, #8
 8009548:	3208      	addeq	r2, #8
 800954a:	0719      	lsls	r1, r3, #28
 800954c:	bf04      	itt	eq
 800954e:	091b      	lsreq	r3, r3, #4
 8009550:	3204      	addeq	r2, #4
 8009552:	0799      	lsls	r1, r3, #30
 8009554:	bf04      	itt	eq
 8009556:	089b      	lsreq	r3, r3, #2
 8009558:	3202      	addeq	r2, #2
 800955a:	07d9      	lsls	r1, r3, #31
 800955c:	d404      	bmi.n	8009568 <__lo0bits+0x48>
 800955e:	085b      	lsrs	r3, r3, #1
 8009560:	d101      	bne.n	8009566 <__lo0bits+0x46>
 8009562:	2020      	movs	r0, #32
 8009564:	4770      	bx	lr
 8009566:	3201      	adds	r2, #1
 8009568:	6003      	str	r3, [r0, #0]
 800956a:	4610      	mov	r0, r2
 800956c:	4770      	bx	lr
 800956e:	2000      	movs	r0, #0
 8009570:	4770      	bx	lr
 8009572:	085b      	lsrs	r3, r3, #1
 8009574:	6003      	str	r3, [r0, #0]
 8009576:	2001      	movs	r0, #1
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop

0800957c <__i2b>:
 800957c:	b510      	push	{r4, lr}
 800957e:	460c      	mov	r4, r1
 8009580:	2101      	movs	r1, #1
 8009582:	f7ff ff3d 	bl	8009400 <_Balloc>
 8009586:	2201      	movs	r2, #1
 8009588:	6144      	str	r4, [r0, #20]
 800958a:	6102      	str	r2, [r0, #16]
 800958c:	bd10      	pop	{r4, pc}
 800958e:	bf00      	nop

08009590 <__multiply>:
 8009590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009594:	690d      	ldr	r5, [r1, #16]
 8009596:	6917      	ldr	r7, [r2, #16]
 8009598:	42bd      	cmp	r5, r7
 800959a:	b083      	sub	sp, #12
 800959c:	460c      	mov	r4, r1
 800959e:	4616      	mov	r6, r2
 80095a0:	da04      	bge.n	80095ac <__multiply+0x1c>
 80095a2:	462a      	mov	r2, r5
 80095a4:	4634      	mov	r4, r6
 80095a6:	463d      	mov	r5, r7
 80095a8:	460e      	mov	r6, r1
 80095aa:	4617      	mov	r7, r2
 80095ac:	68a3      	ldr	r3, [r4, #8]
 80095ae:	6861      	ldr	r1, [r4, #4]
 80095b0:	eb05 0807 	add.w	r8, r5, r7
 80095b4:	4598      	cmp	r8, r3
 80095b6:	bfc8      	it	gt
 80095b8:	3101      	addgt	r1, #1
 80095ba:	f7ff ff21 	bl	8009400 <_Balloc>
 80095be:	f100 0c14 	add.w	ip, r0, #20
 80095c2:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 80095c6:	45cc      	cmp	ip, r9
 80095c8:	9000      	str	r0, [sp, #0]
 80095ca:	d205      	bcs.n	80095d8 <__multiply+0x48>
 80095cc:	4663      	mov	r3, ip
 80095ce:	2100      	movs	r1, #0
 80095d0:	f843 1b04 	str.w	r1, [r3], #4
 80095d4:	4599      	cmp	r9, r3
 80095d6:	d8fb      	bhi.n	80095d0 <__multiply+0x40>
 80095d8:	f106 0214 	add.w	r2, r6, #20
 80095dc:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80095e0:	f104 0314 	add.w	r3, r4, #20
 80095e4:	4552      	cmp	r2, sl
 80095e6:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 80095ea:	d254      	bcs.n	8009696 <__multiply+0x106>
 80095ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80095f0:	4699      	mov	r9, r3
 80095f2:	f852 3b04 	ldr.w	r3, [r2], #4
 80095f6:	fa1f fb83 	uxth.w	fp, r3
 80095fa:	f1bb 0f00 	cmp.w	fp, #0
 80095fe:	d020      	beq.n	8009642 <__multiply+0xb2>
 8009600:	2000      	movs	r0, #0
 8009602:	464f      	mov	r7, r9
 8009604:	4666      	mov	r6, ip
 8009606:	4605      	mov	r5, r0
 8009608:	e000      	b.n	800960c <__multiply+0x7c>
 800960a:	461e      	mov	r6, r3
 800960c:	f857 4b04 	ldr.w	r4, [r7], #4
 8009610:	6830      	ldr	r0, [r6, #0]
 8009612:	b2a1      	uxth	r1, r4
 8009614:	b283      	uxth	r3, r0
 8009616:	fb0b 3101 	mla	r1, fp, r1, r3
 800961a:	0c24      	lsrs	r4, r4, #16
 800961c:	0c00      	lsrs	r0, r0, #16
 800961e:	194b      	adds	r3, r1, r5
 8009620:	fb0b 0004 	mla	r0, fp, r4, r0
 8009624:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8009628:	b299      	uxth	r1, r3
 800962a:	4633      	mov	r3, r6
 800962c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009630:	45be      	cmp	lr, r7
 8009632:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8009636:	f843 1b04 	str.w	r1, [r3], #4
 800963a:	d8e6      	bhi.n	800960a <__multiply+0x7a>
 800963c:	6075      	str	r5, [r6, #4]
 800963e:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8009642:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8009646:	d020      	beq.n	800968a <__multiply+0xfa>
 8009648:	f8dc 3000 	ldr.w	r3, [ip]
 800964c:	4667      	mov	r7, ip
 800964e:	4618      	mov	r0, r3
 8009650:	464d      	mov	r5, r9
 8009652:	2100      	movs	r1, #0
 8009654:	e000      	b.n	8009658 <__multiply+0xc8>
 8009656:	4637      	mov	r7, r6
 8009658:	882c      	ldrh	r4, [r5, #0]
 800965a:	0c00      	lsrs	r0, r0, #16
 800965c:	fb0b 0004 	mla	r0, fp, r4, r0
 8009660:	4401      	add	r1, r0
 8009662:	b29c      	uxth	r4, r3
 8009664:	463e      	mov	r6, r7
 8009666:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800966a:	f846 3b04 	str.w	r3, [r6], #4
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f855 4b04 	ldr.w	r4, [r5], #4
 8009674:	b283      	uxth	r3, r0
 8009676:	0c24      	lsrs	r4, r4, #16
 8009678:	fb0b 3404 	mla	r4, fp, r4, r3
 800967c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8009680:	45ae      	cmp	lr, r5
 8009682:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8009686:	d8e6      	bhi.n	8009656 <__multiply+0xc6>
 8009688:	607b      	str	r3, [r7, #4]
 800968a:	4592      	cmp	sl, r2
 800968c:	f10c 0c04 	add.w	ip, ip, #4
 8009690:	d8af      	bhi.n	80095f2 <__multiply+0x62>
 8009692:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009696:	f1b8 0f00 	cmp.w	r8, #0
 800969a:	dd0b      	ble.n	80096b4 <__multiply+0x124>
 800969c:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80096a0:	f1a9 0904 	sub.w	r9, r9, #4
 80096a4:	b11b      	cbz	r3, 80096ae <__multiply+0x11e>
 80096a6:	e005      	b.n	80096b4 <__multiply+0x124>
 80096a8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 80096ac:	b913      	cbnz	r3, 80096b4 <__multiply+0x124>
 80096ae:	f1b8 0801 	subs.w	r8, r8, #1
 80096b2:	d1f9      	bne.n	80096a8 <__multiply+0x118>
 80096b4:	9800      	ldr	r0, [sp, #0]
 80096b6:	f8c0 8010 	str.w	r8, [r0, #16]
 80096ba:	b003      	add	sp, #12
 80096bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096c0 <__pow5mult>:
 80096c0:	f012 0303 	ands.w	r3, r2, #3
 80096c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c8:	4614      	mov	r4, r2
 80096ca:	4607      	mov	r7, r0
 80096cc:	d12e      	bne.n	800972c <__pow5mult+0x6c>
 80096ce:	460e      	mov	r6, r1
 80096d0:	10a4      	asrs	r4, r4, #2
 80096d2:	d01c      	beq.n	800970e <__pow5mult+0x4e>
 80096d4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80096d6:	b395      	cbz	r5, 800973e <__pow5mult+0x7e>
 80096d8:	07e3      	lsls	r3, r4, #31
 80096da:	f04f 0800 	mov.w	r8, #0
 80096de:	d406      	bmi.n	80096ee <__pow5mult+0x2e>
 80096e0:	1064      	asrs	r4, r4, #1
 80096e2:	d014      	beq.n	800970e <__pow5mult+0x4e>
 80096e4:	6828      	ldr	r0, [r5, #0]
 80096e6:	b1a8      	cbz	r0, 8009714 <__pow5mult+0x54>
 80096e8:	4605      	mov	r5, r0
 80096ea:	07e3      	lsls	r3, r4, #31
 80096ec:	d5f8      	bpl.n	80096e0 <__pow5mult+0x20>
 80096ee:	462a      	mov	r2, r5
 80096f0:	4631      	mov	r1, r6
 80096f2:	4638      	mov	r0, r7
 80096f4:	f7ff ff4c 	bl	8009590 <__multiply>
 80096f8:	b1b6      	cbz	r6, 8009728 <__pow5mult+0x68>
 80096fa:	6872      	ldr	r2, [r6, #4]
 80096fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096fe:	1064      	asrs	r4, r4, #1
 8009700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009704:	6031      	str	r1, [r6, #0]
 8009706:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800970a:	4606      	mov	r6, r0
 800970c:	d1ea      	bne.n	80096e4 <__pow5mult+0x24>
 800970e:	4630      	mov	r0, r6
 8009710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009714:	462a      	mov	r2, r5
 8009716:	4629      	mov	r1, r5
 8009718:	4638      	mov	r0, r7
 800971a:	f7ff ff39 	bl	8009590 <__multiply>
 800971e:	6028      	str	r0, [r5, #0]
 8009720:	f8c0 8000 	str.w	r8, [r0]
 8009724:	4605      	mov	r5, r0
 8009726:	e7e0      	b.n	80096ea <__pow5mult+0x2a>
 8009728:	4606      	mov	r6, r0
 800972a:	e7d9      	b.n	80096e0 <__pow5mult+0x20>
 800972c:	1e5a      	subs	r2, r3, #1
 800972e:	4d0b      	ldr	r5, [pc, #44]	; (800975c <__pow5mult+0x9c>)
 8009730:	2300      	movs	r3, #0
 8009732:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8009736:	f7ff fe93 	bl	8009460 <__multadd>
 800973a:	4606      	mov	r6, r0
 800973c:	e7c8      	b.n	80096d0 <__pow5mult+0x10>
 800973e:	2101      	movs	r1, #1
 8009740:	4638      	mov	r0, r7
 8009742:	f7ff fe5d 	bl	8009400 <_Balloc>
 8009746:	f240 2171 	movw	r1, #625	; 0x271
 800974a:	2201      	movs	r2, #1
 800974c:	2300      	movs	r3, #0
 800974e:	6141      	str	r1, [r0, #20]
 8009750:	6102      	str	r2, [r0, #16]
 8009752:	4605      	mov	r5, r0
 8009754:	64b8      	str	r0, [r7, #72]	; 0x48
 8009756:	6003      	str	r3, [r0, #0]
 8009758:	e7be      	b.n	80096d8 <__pow5mult+0x18>
 800975a:	bf00      	nop
 800975c:	0800aaa8 	.word	0x0800aaa8

08009760 <__lshift>:
 8009760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009764:	4691      	mov	r9, r2
 8009766:	690a      	ldr	r2, [r1, #16]
 8009768:	688b      	ldr	r3, [r1, #8]
 800976a:	ea4f 1469 	mov.w	r4, r9, asr #5
 800976e:	eb04 0802 	add.w	r8, r4, r2
 8009772:	f108 0501 	add.w	r5, r8, #1
 8009776:	429d      	cmp	r5, r3
 8009778:	460e      	mov	r6, r1
 800977a:	4682      	mov	sl, r0
 800977c:	6849      	ldr	r1, [r1, #4]
 800977e:	dd04      	ble.n	800978a <__lshift+0x2a>
 8009780:	005b      	lsls	r3, r3, #1
 8009782:	429d      	cmp	r5, r3
 8009784:	f101 0101 	add.w	r1, r1, #1
 8009788:	dcfa      	bgt.n	8009780 <__lshift+0x20>
 800978a:	4650      	mov	r0, sl
 800978c:	f7ff fe38 	bl	8009400 <_Balloc>
 8009790:	2c00      	cmp	r4, #0
 8009792:	f100 0214 	add.w	r2, r0, #20
 8009796:	dd38      	ble.n	800980a <__lshift+0xaa>
 8009798:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 800979c:	2100      	movs	r1, #0
 800979e:	f842 1b04 	str.w	r1, [r2], #4
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d1fb      	bne.n	800979e <__lshift+0x3e>
 80097a6:	6934      	ldr	r4, [r6, #16]
 80097a8:	f106 0114 	add.w	r1, r6, #20
 80097ac:	f019 091f 	ands.w	r9, r9, #31
 80097b0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 80097b4:	d021      	beq.n	80097fa <__lshift+0x9a>
 80097b6:	f1c9 0220 	rsb	r2, r9, #32
 80097ba:	2400      	movs	r4, #0
 80097bc:	680f      	ldr	r7, [r1, #0]
 80097be:	fa07 fc09 	lsl.w	ip, r7, r9
 80097c2:	ea4c 0404 	orr.w	r4, ip, r4
 80097c6:	469c      	mov	ip, r3
 80097c8:	f843 4b04 	str.w	r4, [r3], #4
 80097cc:	f851 4b04 	ldr.w	r4, [r1], #4
 80097d0:	458e      	cmp	lr, r1
 80097d2:	fa24 f402 	lsr.w	r4, r4, r2
 80097d6:	d8f1      	bhi.n	80097bc <__lshift+0x5c>
 80097d8:	f8cc 4004 	str.w	r4, [ip, #4]
 80097dc:	b10c      	cbz	r4, 80097e2 <__lshift+0x82>
 80097de:	f108 0502 	add.w	r5, r8, #2
 80097e2:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80097e6:	6872      	ldr	r2, [r6, #4]
 80097e8:	3d01      	subs	r5, #1
 80097ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097ee:	6105      	str	r5, [r0, #16]
 80097f0:	6031      	str	r1, [r6, #0]
 80097f2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80097f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097fa:	3b04      	subs	r3, #4
 80097fc:	f851 2b04 	ldr.w	r2, [r1], #4
 8009800:	f843 2f04 	str.w	r2, [r3, #4]!
 8009804:	458e      	cmp	lr, r1
 8009806:	d8f9      	bhi.n	80097fc <__lshift+0x9c>
 8009808:	e7eb      	b.n	80097e2 <__lshift+0x82>
 800980a:	4613      	mov	r3, r2
 800980c:	e7cb      	b.n	80097a6 <__lshift+0x46>
 800980e:	bf00      	nop

08009810 <__mcmp>:
 8009810:	6902      	ldr	r2, [r0, #16]
 8009812:	690b      	ldr	r3, [r1, #16]
 8009814:	1ad2      	subs	r2, r2, r3
 8009816:	d113      	bne.n	8009840 <__mcmp+0x30>
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	3014      	adds	r0, #20
 800981c:	3114      	adds	r1, #20
 800981e:	4419      	add	r1, r3
 8009820:	b410      	push	{r4}
 8009822:	4403      	add	r3, r0
 8009824:	e001      	b.n	800982a <__mcmp+0x1a>
 8009826:	4298      	cmp	r0, r3
 8009828:	d20c      	bcs.n	8009844 <__mcmp+0x34>
 800982a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800982e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009832:	4294      	cmp	r4, r2
 8009834:	d0f7      	beq.n	8009826 <__mcmp+0x16>
 8009836:	d309      	bcc.n	800984c <__mcmp+0x3c>
 8009838:	2001      	movs	r0, #1
 800983a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	4610      	mov	r0, r2
 8009842:	4770      	bx	lr
 8009844:	2000      	movs	r0, #0
 8009846:	f85d 4b04 	ldr.w	r4, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	f04f 30ff 	mov.w	r0, #4294967295
 8009850:	e7f3      	b.n	800983a <__mcmp+0x2a>
 8009852:	bf00      	nop

08009854 <__mdiff>:
 8009854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009858:	690b      	ldr	r3, [r1, #16]
 800985a:	460f      	mov	r7, r1
 800985c:	6911      	ldr	r1, [r2, #16]
 800985e:	1a5b      	subs	r3, r3, r1
 8009860:	2b00      	cmp	r3, #0
 8009862:	4690      	mov	r8, r2
 8009864:	d117      	bne.n	8009896 <__mdiff+0x42>
 8009866:	0089      	lsls	r1, r1, #2
 8009868:	f107 0214 	add.w	r2, r7, #20
 800986c:	f108 0514 	add.w	r5, r8, #20
 8009870:	1853      	adds	r3, r2, r1
 8009872:	4429      	add	r1, r5
 8009874:	e001      	b.n	800987a <__mdiff+0x26>
 8009876:	429a      	cmp	r2, r3
 8009878:	d25e      	bcs.n	8009938 <__mdiff+0xe4>
 800987a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 800987e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009882:	42a6      	cmp	r6, r4
 8009884:	d0f7      	beq.n	8009876 <__mdiff+0x22>
 8009886:	d260      	bcs.n	800994a <__mdiff+0xf6>
 8009888:	463b      	mov	r3, r7
 800988a:	4614      	mov	r4, r2
 800988c:	4647      	mov	r7, r8
 800988e:	f04f 0901 	mov.w	r9, #1
 8009892:	4698      	mov	r8, r3
 8009894:	e006      	b.n	80098a4 <__mdiff+0x50>
 8009896:	db5d      	blt.n	8009954 <__mdiff+0x100>
 8009898:	f107 0514 	add.w	r5, r7, #20
 800989c:	f102 0414 	add.w	r4, r2, #20
 80098a0:	f04f 0900 	mov.w	r9, #0
 80098a4:	6879      	ldr	r1, [r7, #4]
 80098a6:	f7ff fdab 	bl	8009400 <_Balloc>
 80098aa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80098ae:	693e      	ldr	r6, [r7, #16]
 80098b0:	f8c0 900c 	str.w	r9, [r0, #12]
 80098b4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 80098b8:	46a6      	mov	lr, r4
 80098ba:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 80098be:	f100 0414 	add.w	r4, r0, #20
 80098c2:	2300      	movs	r3, #0
 80098c4:	f85e 1b04 	ldr.w	r1, [lr], #4
 80098c8:	f855 8b04 	ldr.w	r8, [r5], #4
 80098cc:	b28a      	uxth	r2, r1
 80098ce:	fa13 f388 	uxtah	r3, r3, r8
 80098d2:	0c09      	lsrs	r1, r1, #16
 80098d4:	1a9a      	subs	r2, r3, r2
 80098d6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 80098da:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80098de:	b292      	uxth	r2, r2
 80098e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80098e4:	45f4      	cmp	ip, lr
 80098e6:	f844 2b04 	str.w	r2, [r4], #4
 80098ea:	ea4f 4323 	mov.w	r3, r3, asr #16
 80098ee:	d8e9      	bhi.n	80098c4 <__mdiff+0x70>
 80098f0:	42af      	cmp	r7, r5
 80098f2:	d917      	bls.n	8009924 <__mdiff+0xd0>
 80098f4:	46a4      	mov	ip, r4
 80098f6:	4629      	mov	r1, r5
 80098f8:	f851 eb04 	ldr.w	lr, [r1], #4
 80098fc:	fa13 f28e 	uxtah	r2, r3, lr
 8009900:	1413      	asrs	r3, r2, #16
 8009902:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 8009906:	b292      	uxth	r2, r2
 8009908:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800990c:	428f      	cmp	r7, r1
 800990e:	f84c 2b04 	str.w	r2, [ip], #4
 8009912:	ea4f 4323 	mov.w	r3, r3, asr #16
 8009916:	d8ef      	bhi.n	80098f8 <__mdiff+0xa4>
 8009918:	43ed      	mvns	r5, r5
 800991a:	443d      	add	r5, r7
 800991c:	f025 0503 	bic.w	r5, r5, #3
 8009920:	3504      	adds	r5, #4
 8009922:	442c      	add	r4, r5
 8009924:	3c04      	subs	r4, #4
 8009926:	b922      	cbnz	r2, 8009932 <__mdiff+0xde>
 8009928:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800992c:	3e01      	subs	r6, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0fa      	beq.n	8009928 <__mdiff+0xd4>
 8009932:	6106      	str	r6, [r0, #16]
 8009934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009938:	2100      	movs	r1, #0
 800993a:	f7ff fd61 	bl	8009400 <_Balloc>
 800993e:	2201      	movs	r2, #1
 8009940:	2300      	movs	r3, #0
 8009942:	6102      	str	r2, [r0, #16]
 8009944:	6143      	str	r3, [r0, #20]
 8009946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800994a:	462c      	mov	r4, r5
 800994c:	f04f 0900 	mov.w	r9, #0
 8009950:	4615      	mov	r5, r2
 8009952:	e7a7      	b.n	80098a4 <__mdiff+0x50>
 8009954:	463b      	mov	r3, r7
 8009956:	f107 0414 	add.w	r4, r7, #20
 800995a:	f108 0514 	add.w	r5, r8, #20
 800995e:	4647      	mov	r7, r8
 8009960:	f04f 0901 	mov.w	r9, #1
 8009964:	4698      	mov	r8, r3
 8009966:	e79d      	b.n	80098a4 <__mdiff+0x50>

08009968 <__d2b>:
 8009968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800996c:	b083      	sub	sp, #12
 800996e:	2101      	movs	r1, #1
 8009970:	461c      	mov	r4, r3
 8009972:	f3c3 550a 	ubfx	r5, r3, #20, #11
 8009976:	4617      	mov	r7, r2
 8009978:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800997a:	f7ff fd41 	bl	8009400 <_Balloc>
 800997e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009982:	4681      	mov	r9, r0
 8009984:	b10d      	cbz	r5, 800998a <__d2b+0x22>
 8009986:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800998a:	9401      	str	r4, [sp, #4]
 800998c:	b31f      	cbz	r7, 80099d6 <__d2b+0x6e>
 800998e:	a802      	add	r0, sp, #8
 8009990:	f840 7d08 	str.w	r7, [r0, #-8]!
 8009994:	f7ff fdc4 	bl	8009520 <__lo0bits>
 8009998:	2800      	cmp	r0, #0
 800999a:	d135      	bne.n	8009a08 <__d2b+0xa0>
 800999c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80099a0:	f8c9 2014 	str.w	r2, [r9, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	bf0c      	ite	eq
 80099a8:	2101      	moveq	r1, #1
 80099aa:	2102      	movne	r1, #2
 80099ac:	f8c9 3018 	str.w	r3, [r9, #24]
 80099b0:	f8c9 1010 	str.w	r1, [r9, #16]
 80099b4:	b9dd      	cbnz	r5, 80099ee <__d2b+0x86>
 80099b6:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 80099ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099be:	6030      	str	r0, [r6, #0]
 80099c0:	6918      	ldr	r0, [r3, #16]
 80099c2:	f7ff fd8d 	bl	80094e0 <__hi0bits>
 80099c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099c8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80099cc:	6018      	str	r0, [r3, #0]
 80099ce:	4648      	mov	r0, r9
 80099d0:	b003      	add	sp, #12
 80099d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099d6:	a801      	add	r0, sp, #4
 80099d8:	f7ff fda2 	bl	8009520 <__lo0bits>
 80099dc:	9b01      	ldr	r3, [sp, #4]
 80099de:	f8c9 3014 	str.w	r3, [r9, #20]
 80099e2:	2101      	movs	r1, #1
 80099e4:	3020      	adds	r0, #32
 80099e6:	f8c9 1010 	str.w	r1, [r9, #16]
 80099ea:	2d00      	cmp	r5, #0
 80099ec:	d0e3      	beq.n	80099b6 <__d2b+0x4e>
 80099ee:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 80099f2:	eb08 0300 	add.w	r3, r8, r0
 80099f6:	6033      	str	r3, [r6, #0]
 80099f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099fe:	6018      	str	r0, [r3, #0]
 8009a00:	4648      	mov	r0, r9
 8009a02:	b003      	add	sp, #12
 8009a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a08:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009a0c:	f1c0 0120 	rsb	r1, r0, #32
 8009a10:	fa03 f101 	lsl.w	r1, r3, r1
 8009a14:	430a      	orrs	r2, r1
 8009a16:	40c3      	lsrs	r3, r0
 8009a18:	9301      	str	r3, [sp, #4]
 8009a1a:	f8c9 2014 	str.w	r2, [r9, #20]
 8009a1e:	e7c1      	b.n	80099a4 <__d2b+0x3c>

08009a20 <_realloc_r>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	4617      	mov	r7, r2
 8009a26:	b083      	sub	sp, #12
 8009a28:	2900      	cmp	r1, #0
 8009a2a:	f000 80c1 	beq.w	8009bb0 <_realloc_r+0x190>
 8009a2e:	460e      	mov	r6, r1
 8009a30:	4681      	mov	r9, r0
 8009a32:	f107 050b 	add.w	r5, r7, #11
 8009a36:	f7ff fcdf 	bl	80093f8 <__malloc_lock>
 8009a3a:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8009a3e:	2d16      	cmp	r5, #22
 8009a40:	f02e 0403 	bic.w	r4, lr, #3
 8009a44:	f1a6 0808 	sub.w	r8, r6, #8
 8009a48:	d840      	bhi.n	8009acc <_realloc_r+0xac>
 8009a4a:	2210      	movs	r2, #16
 8009a4c:	4615      	mov	r5, r2
 8009a4e:	42af      	cmp	r7, r5
 8009a50:	d841      	bhi.n	8009ad6 <_realloc_r+0xb6>
 8009a52:	4294      	cmp	r4, r2
 8009a54:	da75      	bge.n	8009b42 <_realloc_r+0x122>
 8009a56:	4bc9      	ldr	r3, [pc, #804]	; (8009d7c <_realloc_r+0x35c>)
 8009a58:	6899      	ldr	r1, [r3, #8]
 8009a5a:	eb08 0004 	add.w	r0, r8, r4
 8009a5e:	4288      	cmp	r0, r1
 8009a60:	6841      	ldr	r1, [r0, #4]
 8009a62:	f000 80d9 	beq.w	8009c18 <_realloc_r+0x1f8>
 8009a66:	f021 0301 	bic.w	r3, r1, #1
 8009a6a:	4403      	add	r3, r0
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	07db      	lsls	r3, r3, #31
 8009a70:	d57d      	bpl.n	8009b6e <_realloc_r+0x14e>
 8009a72:	f01e 0f01 	tst.w	lr, #1
 8009a76:	d035      	beq.n	8009ae4 <_realloc_r+0xc4>
 8009a78:	4639      	mov	r1, r7
 8009a7a:	4648      	mov	r0, r9
 8009a7c:	f7ff f936 	bl	8008cec <_malloc_r>
 8009a80:	4607      	mov	r7, r0
 8009a82:	b1e0      	cbz	r0, 8009abe <_realloc_r+0x9e>
 8009a84:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a88:	f023 0301 	bic.w	r3, r3, #1
 8009a8c:	4443      	add	r3, r8
 8009a8e:	f1a0 0208 	sub.w	r2, r0, #8
 8009a92:	429a      	cmp	r2, r3
 8009a94:	f000 8144 	beq.w	8009d20 <_realloc_r+0x300>
 8009a98:	1f22      	subs	r2, r4, #4
 8009a9a:	2a24      	cmp	r2, #36	; 0x24
 8009a9c:	f200 8131 	bhi.w	8009d02 <_realloc_r+0x2e2>
 8009aa0:	2a13      	cmp	r2, #19
 8009aa2:	f200 8104 	bhi.w	8009cae <_realloc_r+0x28e>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	4632      	mov	r2, r6
 8009aaa:	6811      	ldr	r1, [r2, #0]
 8009aac:	6019      	str	r1, [r3, #0]
 8009aae:	6851      	ldr	r1, [r2, #4]
 8009ab0:	6059      	str	r1, [r3, #4]
 8009ab2:	6892      	ldr	r2, [r2, #8]
 8009ab4:	609a      	str	r2, [r3, #8]
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	4648      	mov	r0, r9
 8009aba:	f7fe fdf3 	bl	80086a4 <_free_r>
 8009abe:	4648      	mov	r0, r9
 8009ac0:	f7ff fc9c 	bl	80093fc <__malloc_unlock>
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	b003      	add	sp, #12
 8009ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009acc:	f025 0507 	bic.w	r5, r5, #7
 8009ad0:	2d00      	cmp	r5, #0
 8009ad2:	462a      	mov	r2, r5
 8009ad4:	dabb      	bge.n	8009a4e <_realloc_r+0x2e>
 8009ad6:	230c      	movs	r3, #12
 8009ad8:	2000      	movs	r0, #0
 8009ada:	f8c9 3000 	str.w	r3, [r9]
 8009ade:	b003      	add	sp, #12
 8009ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009ae8:	ebc3 0a08 	rsb	sl, r3, r8
 8009aec:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009af0:	f023 0c03 	bic.w	ip, r3, #3
 8009af4:	eb04 030c 	add.w	r3, r4, ip
 8009af8:	4293      	cmp	r3, r2
 8009afa:	dbbd      	blt.n	8009a78 <_realloc_r+0x58>
 8009afc:	4657      	mov	r7, sl
 8009afe:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009b02:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009b06:	1f22      	subs	r2, r4, #4
 8009b08:	2a24      	cmp	r2, #36	; 0x24
 8009b0a:	60c1      	str	r1, [r0, #12]
 8009b0c:	6088      	str	r0, [r1, #8]
 8009b0e:	f200 8117 	bhi.w	8009d40 <_realloc_r+0x320>
 8009b12:	2a13      	cmp	r2, #19
 8009b14:	f240 8112 	bls.w	8009d3c <_realloc_r+0x31c>
 8009b18:	6831      	ldr	r1, [r6, #0]
 8009b1a:	f8ca 1008 	str.w	r1, [sl, #8]
 8009b1e:	6871      	ldr	r1, [r6, #4]
 8009b20:	f8ca 100c 	str.w	r1, [sl, #12]
 8009b24:	2a1b      	cmp	r2, #27
 8009b26:	f200 812b 	bhi.w	8009d80 <_realloc_r+0x360>
 8009b2a:	3608      	adds	r6, #8
 8009b2c:	f10a 0210 	add.w	r2, sl, #16
 8009b30:	6831      	ldr	r1, [r6, #0]
 8009b32:	6011      	str	r1, [r2, #0]
 8009b34:	6871      	ldr	r1, [r6, #4]
 8009b36:	6051      	str	r1, [r2, #4]
 8009b38:	68b1      	ldr	r1, [r6, #8]
 8009b3a:	6091      	str	r1, [r2, #8]
 8009b3c:	463e      	mov	r6, r7
 8009b3e:	461c      	mov	r4, r3
 8009b40:	46d0      	mov	r8, sl
 8009b42:	1b63      	subs	r3, r4, r5
 8009b44:	2b0f      	cmp	r3, #15
 8009b46:	d81d      	bhi.n	8009b84 <_realloc_r+0x164>
 8009b48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	4323      	orrs	r3, r4
 8009b52:	4444      	add	r4, r8
 8009b54:	f8c8 3004 	str.w	r3, [r8, #4]
 8009b58:	6863      	ldr	r3, [r4, #4]
 8009b5a:	f043 0301 	orr.w	r3, r3, #1
 8009b5e:	6063      	str	r3, [r4, #4]
 8009b60:	4648      	mov	r0, r9
 8009b62:	f7ff fc4b 	bl	80093fc <__malloc_unlock>
 8009b66:	4630      	mov	r0, r6
 8009b68:	b003      	add	sp, #12
 8009b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6e:	f021 0103 	bic.w	r1, r1, #3
 8009b72:	4421      	add	r1, r4
 8009b74:	4291      	cmp	r1, r2
 8009b76:	db21      	blt.n	8009bbc <_realloc_r+0x19c>
 8009b78:	68c3      	ldr	r3, [r0, #12]
 8009b7a:	6882      	ldr	r2, [r0, #8]
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	60d3      	str	r3, [r2, #12]
 8009b80:	609a      	str	r2, [r3, #8]
 8009b82:	e7de      	b.n	8009b42 <_realloc_r+0x122>
 8009b84:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009b88:	eb08 0105 	add.w	r1, r8, r5
 8009b8c:	f002 0201 	and.w	r2, r2, #1
 8009b90:	4315      	orrs	r5, r2
 8009b92:	f043 0201 	orr.w	r2, r3, #1
 8009b96:	440b      	add	r3, r1
 8009b98:	f8c8 5004 	str.w	r5, [r8, #4]
 8009b9c:	604a      	str	r2, [r1, #4]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	f042 0201 	orr.w	r2, r2, #1
 8009ba4:	3108      	adds	r1, #8
 8009ba6:	605a      	str	r2, [r3, #4]
 8009ba8:	4648      	mov	r0, r9
 8009baa:	f7fe fd7b 	bl	80086a4 <_free_r>
 8009bae:	e7d7      	b.n	8009b60 <_realloc_r+0x140>
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	b003      	add	sp, #12
 8009bb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb8:	f7ff b898 	b.w	8008cec <_malloc_r>
 8009bbc:	f01e 0f01 	tst.w	lr, #1
 8009bc0:	f47f af5a 	bne.w	8009a78 <_realloc_r+0x58>
 8009bc4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009bc8:	ebc3 0a08 	rsb	sl, r3, r8
 8009bcc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009bd0:	f023 0c03 	bic.w	ip, r3, #3
 8009bd4:	eb01 0e0c 	add.w	lr, r1, ip
 8009bd8:	4596      	cmp	lr, r2
 8009bda:	db8b      	blt.n	8009af4 <_realloc_r+0xd4>
 8009bdc:	68c3      	ldr	r3, [r0, #12]
 8009bde:	6882      	ldr	r2, [r0, #8]
 8009be0:	4657      	mov	r7, sl
 8009be2:	60d3      	str	r3, [r2, #12]
 8009be4:	609a      	str	r2, [r3, #8]
 8009be6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009bea:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009bee:	60cb      	str	r3, [r1, #12]
 8009bf0:	1f22      	subs	r2, r4, #4
 8009bf2:	2a24      	cmp	r2, #36	; 0x24
 8009bf4:	6099      	str	r1, [r3, #8]
 8009bf6:	f200 8099 	bhi.w	8009d2c <_realloc_r+0x30c>
 8009bfa:	2a13      	cmp	r2, #19
 8009bfc:	d962      	bls.n	8009cc4 <_realloc_r+0x2a4>
 8009bfe:	6833      	ldr	r3, [r6, #0]
 8009c00:	f8ca 3008 	str.w	r3, [sl, #8]
 8009c04:	6873      	ldr	r3, [r6, #4]
 8009c06:	f8ca 300c 	str.w	r3, [sl, #12]
 8009c0a:	2a1b      	cmp	r2, #27
 8009c0c:	f200 80a0 	bhi.w	8009d50 <_realloc_r+0x330>
 8009c10:	3608      	adds	r6, #8
 8009c12:	f10a 0310 	add.w	r3, sl, #16
 8009c16:	e056      	b.n	8009cc6 <_realloc_r+0x2a6>
 8009c18:	f021 0b03 	bic.w	fp, r1, #3
 8009c1c:	44a3      	add	fp, r4
 8009c1e:	f105 0010 	add.w	r0, r5, #16
 8009c22:	4583      	cmp	fp, r0
 8009c24:	da59      	bge.n	8009cda <_realloc_r+0x2ba>
 8009c26:	f01e 0f01 	tst.w	lr, #1
 8009c2a:	f47f af25 	bne.w	8009a78 <_realloc_r+0x58>
 8009c2e:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8009c32:	ebc1 0a08 	rsb	sl, r1, r8
 8009c36:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009c3a:	f021 0c03 	bic.w	ip, r1, #3
 8009c3e:	44e3      	add	fp, ip
 8009c40:	4558      	cmp	r0, fp
 8009c42:	f73f af57 	bgt.w	8009af4 <_realloc_r+0xd4>
 8009c46:	4657      	mov	r7, sl
 8009c48:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009c4c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009c50:	1f22      	subs	r2, r4, #4
 8009c52:	2a24      	cmp	r2, #36	; 0x24
 8009c54:	60c1      	str	r1, [r0, #12]
 8009c56:	6088      	str	r0, [r1, #8]
 8009c58:	f200 80b4 	bhi.w	8009dc4 <_realloc_r+0x3a4>
 8009c5c:	2a13      	cmp	r2, #19
 8009c5e:	f240 80a5 	bls.w	8009dac <_realloc_r+0x38c>
 8009c62:	6831      	ldr	r1, [r6, #0]
 8009c64:	f8ca 1008 	str.w	r1, [sl, #8]
 8009c68:	6871      	ldr	r1, [r6, #4]
 8009c6a:	f8ca 100c 	str.w	r1, [sl, #12]
 8009c6e:	2a1b      	cmp	r2, #27
 8009c70:	f200 80af 	bhi.w	8009dd2 <_realloc_r+0x3b2>
 8009c74:	3608      	adds	r6, #8
 8009c76:	f10a 0210 	add.w	r2, sl, #16
 8009c7a:	6831      	ldr	r1, [r6, #0]
 8009c7c:	6011      	str	r1, [r2, #0]
 8009c7e:	6871      	ldr	r1, [r6, #4]
 8009c80:	6051      	str	r1, [r2, #4]
 8009c82:	68b1      	ldr	r1, [r6, #8]
 8009c84:	6091      	str	r1, [r2, #8]
 8009c86:	eb0a 0105 	add.w	r1, sl, r5
 8009c8a:	ebc5 020b 	rsb	r2, r5, fp
 8009c8e:	f042 0201 	orr.w	r2, r2, #1
 8009c92:	6099      	str	r1, [r3, #8]
 8009c94:	604a      	str	r2, [r1, #4]
 8009c96:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	431d      	orrs	r5, r3
 8009ca0:	4648      	mov	r0, r9
 8009ca2:	f8ca 5004 	str.w	r5, [sl, #4]
 8009ca6:	f7ff fba9 	bl	80093fc <__malloc_unlock>
 8009caa:	4638      	mov	r0, r7
 8009cac:	e75c      	b.n	8009b68 <_realloc_r+0x148>
 8009cae:	6833      	ldr	r3, [r6, #0]
 8009cb0:	6003      	str	r3, [r0, #0]
 8009cb2:	6873      	ldr	r3, [r6, #4]
 8009cb4:	6043      	str	r3, [r0, #4]
 8009cb6:	2a1b      	cmp	r2, #27
 8009cb8:	d827      	bhi.n	8009d0a <_realloc_r+0x2ea>
 8009cba:	f100 0308 	add.w	r3, r0, #8
 8009cbe:	f106 0208 	add.w	r2, r6, #8
 8009cc2:	e6f2      	b.n	8009aaa <_realloc_r+0x8a>
 8009cc4:	463b      	mov	r3, r7
 8009cc6:	6832      	ldr	r2, [r6, #0]
 8009cc8:	601a      	str	r2, [r3, #0]
 8009cca:	6872      	ldr	r2, [r6, #4]
 8009ccc:	605a      	str	r2, [r3, #4]
 8009cce:	68b2      	ldr	r2, [r6, #8]
 8009cd0:	609a      	str	r2, [r3, #8]
 8009cd2:	463e      	mov	r6, r7
 8009cd4:	4674      	mov	r4, lr
 8009cd6:	46d0      	mov	r8, sl
 8009cd8:	e733      	b.n	8009b42 <_realloc_r+0x122>
 8009cda:	eb08 0105 	add.w	r1, r8, r5
 8009cde:	ebc5 0b0b 	rsb	fp, r5, fp
 8009ce2:	f04b 0201 	orr.w	r2, fp, #1
 8009ce6:	6099      	str	r1, [r3, #8]
 8009ce8:	604a      	str	r2, [r1, #4]
 8009cea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	431d      	orrs	r5, r3
 8009cf4:	4648      	mov	r0, r9
 8009cf6:	f846 5c04 	str.w	r5, [r6, #-4]
 8009cfa:	f7ff fb7f 	bl	80093fc <__malloc_unlock>
 8009cfe:	4630      	mov	r0, r6
 8009d00:	e732      	b.n	8009b68 <_realloc_r+0x148>
 8009d02:	4631      	mov	r1, r6
 8009d04:	f7ff fb14 	bl	8009330 <memmove>
 8009d08:	e6d5      	b.n	8009ab6 <_realloc_r+0x96>
 8009d0a:	68b3      	ldr	r3, [r6, #8]
 8009d0c:	6083      	str	r3, [r0, #8]
 8009d0e:	68f3      	ldr	r3, [r6, #12]
 8009d10:	60c3      	str	r3, [r0, #12]
 8009d12:	2a24      	cmp	r2, #36	; 0x24
 8009d14:	d028      	beq.n	8009d68 <_realloc_r+0x348>
 8009d16:	f100 0310 	add.w	r3, r0, #16
 8009d1a:	f106 0210 	add.w	r2, r6, #16
 8009d1e:	e6c4      	b.n	8009aaa <_realloc_r+0x8a>
 8009d20:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009d24:	f023 0303 	bic.w	r3, r3, #3
 8009d28:	441c      	add	r4, r3
 8009d2a:	e70a      	b.n	8009b42 <_realloc_r+0x122>
 8009d2c:	4631      	mov	r1, r6
 8009d2e:	4638      	mov	r0, r7
 8009d30:	4674      	mov	r4, lr
 8009d32:	46d0      	mov	r8, sl
 8009d34:	f7ff fafc 	bl	8009330 <memmove>
 8009d38:	463e      	mov	r6, r7
 8009d3a:	e702      	b.n	8009b42 <_realloc_r+0x122>
 8009d3c:	463a      	mov	r2, r7
 8009d3e:	e6f7      	b.n	8009b30 <_realloc_r+0x110>
 8009d40:	4631      	mov	r1, r6
 8009d42:	4638      	mov	r0, r7
 8009d44:	461c      	mov	r4, r3
 8009d46:	46d0      	mov	r8, sl
 8009d48:	f7ff faf2 	bl	8009330 <memmove>
 8009d4c:	463e      	mov	r6, r7
 8009d4e:	e6f8      	b.n	8009b42 <_realloc_r+0x122>
 8009d50:	68b3      	ldr	r3, [r6, #8]
 8009d52:	f8ca 3010 	str.w	r3, [sl, #16]
 8009d56:	68f3      	ldr	r3, [r6, #12]
 8009d58:	f8ca 3014 	str.w	r3, [sl, #20]
 8009d5c:	2a24      	cmp	r2, #36	; 0x24
 8009d5e:	d01b      	beq.n	8009d98 <_realloc_r+0x378>
 8009d60:	3610      	adds	r6, #16
 8009d62:	f10a 0318 	add.w	r3, sl, #24
 8009d66:	e7ae      	b.n	8009cc6 <_realloc_r+0x2a6>
 8009d68:	6933      	ldr	r3, [r6, #16]
 8009d6a:	6103      	str	r3, [r0, #16]
 8009d6c:	6973      	ldr	r3, [r6, #20]
 8009d6e:	6143      	str	r3, [r0, #20]
 8009d70:	f106 0218 	add.w	r2, r6, #24
 8009d74:	f100 0318 	add.w	r3, r0, #24
 8009d78:	e697      	b.n	8009aaa <_realloc_r+0x8a>
 8009d7a:	bf00      	nop
 8009d7c:	200005d8 	.word	0x200005d8
 8009d80:	68b1      	ldr	r1, [r6, #8]
 8009d82:	f8ca 1010 	str.w	r1, [sl, #16]
 8009d86:	68f1      	ldr	r1, [r6, #12]
 8009d88:	f8ca 1014 	str.w	r1, [sl, #20]
 8009d8c:	2a24      	cmp	r2, #36	; 0x24
 8009d8e:	d00f      	beq.n	8009db0 <_realloc_r+0x390>
 8009d90:	3610      	adds	r6, #16
 8009d92:	f10a 0218 	add.w	r2, sl, #24
 8009d96:	e6cb      	b.n	8009b30 <_realloc_r+0x110>
 8009d98:	6933      	ldr	r3, [r6, #16]
 8009d9a:	f8ca 3018 	str.w	r3, [sl, #24]
 8009d9e:	6973      	ldr	r3, [r6, #20]
 8009da0:	f8ca 301c 	str.w	r3, [sl, #28]
 8009da4:	3618      	adds	r6, #24
 8009da6:	f10a 0320 	add.w	r3, sl, #32
 8009daa:	e78c      	b.n	8009cc6 <_realloc_r+0x2a6>
 8009dac:	463a      	mov	r2, r7
 8009dae:	e764      	b.n	8009c7a <_realloc_r+0x25a>
 8009db0:	6932      	ldr	r2, [r6, #16]
 8009db2:	f8ca 2018 	str.w	r2, [sl, #24]
 8009db6:	6972      	ldr	r2, [r6, #20]
 8009db8:	f8ca 201c 	str.w	r2, [sl, #28]
 8009dbc:	3618      	adds	r6, #24
 8009dbe:	f10a 0220 	add.w	r2, sl, #32
 8009dc2:	e6b5      	b.n	8009b30 <_realloc_r+0x110>
 8009dc4:	4631      	mov	r1, r6
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	9301      	str	r3, [sp, #4]
 8009dca:	f7ff fab1 	bl	8009330 <memmove>
 8009dce:	9b01      	ldr	r3, [sp, #4]
 8009dd0:	e759      	b.n	8009c86 <_realloc_r+0x266>
 8009dd2:	68b1      	ldr	r1, [r6, #8]
 8009dd4:	f8ca 1010 	str.w	r1, [sl, #16]
 8009dd8:	68f1      	ldr	r1, [r6, #12]
 8009dda:	f8ca 1014 	str.w	r1, [sl, #20]
 8009dde:	2a24      	cmp	r2, #36	; 0x24
 8009de0:	d003      	beq.n	8009dea <_realloc_r+0x3ca>
 8009de2:	3610      	adds	r6, #16
 8009de4:	f10a 0218 	add.w	r2, sl, #24
 8009de8:	e747      	b.n	8009c7a <_realloc_r+0x25a>
 8009dea:	6932      	ldr	r2, [r6, #16]
 8009dec:	f8ca 2018 	str.w	r2, [sl, #24]
 8009df0:	6972      	ldr	r2, [r6, #20]
 8009df2:	f8ca 201c 	str.w	r2, [sl, #28]
 8009df6:	3618      	adds	r6, #24
 8009df8:	f10a 0220 	add.w	r2, sl, #32
 8009dfc:	e73d      	b.n	8009c7a <_realloc_r+0x25a>
 8009dfe:	bf00      	nop

08009e00 <_sbrk_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4c07      	ldr	r4, [pc, #28]	; (8009e20 <_sbrk_r+0x20>)
 8009e04:	2300      	movs	r3, #0
 8009e06:	4605      	mov	r5, r0
 8009e08:	4608      	mov	r0, r1
 8009e0a:	6023      	str	r3, [r4, #0]
 8009e0c:	f7f8 fabe 	bl	800238c <_sbrk>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d000      	beq.n	8009e16 <_sbrk_r+0x16>
 8009e14:	bd38      	pop	{r3, r4, r5, pc}
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d0fb      	beq.n	8009e14 <_sbrk_r+0x14>
 8009e1c:	602b      	str	r3, [r5, #0]
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}
 8009e20:	20000acc 	.word	0x20000acc

08009e24 <__sread>:
 8009e24:	b510      	push	{r4, lr}
 8009e26:	460c      	mov	r4, r1
 8009e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e2c:	f000 fa48 	bl	800a2c0 <_read_r>
 8009e30:	2800      	cmp	r0, #0
 8009e32:	db03      	blt.n	8009e3c <__sread+0x18>
 8009e34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009e36:	4403      	add	r3, r0
 8009e38:	6523      	str	r3, [r4, #80]	; 0x50
 8009e3a:	bd10      	pop	{r4, pc}
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e42:	81a3      	strh	r3, [r4, #12]
 8009e44:	bd10      	pop	{r4, pc}
 8009e46:	bf00      	nop

08009e48 <__swrite>:
 8009e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4c:	4616      	mov	r6, r2
 8009e4e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e52:	461f      	mov	r7, r3
 8009e54:	05d3      	lsls	r3, r2, #23
 8009e56:	460c      	mov	r4, r1
 8009e58:	4605      	mov	r5, r0
 8009e5a:	d507      	bpl.n	8009e6c <__swrite+0x24>
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2302      	movs	r3, #2
 8009e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e64:	f000 fa16 	bl	800a294 <_lseek_r>
 8009e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e74:	81a2      	strh	r2, [r4, #12]
 8009e76:	463b      	mov	r3, r7
 8009e78:	4632      	mov	r2, r6
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e80:	f000 b8e8 	b.w	800a054 <_write_r>

08009e84 <__sseek>:
 8009e84:	b510      	push	{r4, lr}
 8009e86:	460c      	mov	r4, r1
 8009e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8c:	f000 fa02 	bl	800a294 <_lseek_r>
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	1c42      	adds	r2, r0, #1
 8009e94:	bf0e      	itee	eq
 8009e96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e9e:	6520      	strne	r0, [r4, #80]	; 0x50
 8009ea0:	81a3      	strh	r3, [r4, #12]
 8009ea2:	bd10      	pop	{r4, pc}

08009ea4 <__sclose>:
 8009ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ea8:	f000 b91a 	b.w	800a0e0 <_close_r>

08009eac <__ssprint_r>:
 8009eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb0:	6893      	ldr	r3, [r2, #8]
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	4690      	mov	r8, r2
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d072      	beq.n	8009fa0 <__ssprint_r+0xf4>
 8009eba:	4683      	mov	fp, r0
 8009ebc:	f04f 0900 	mov.w	r9, #0
 8009ec0:	6816      	ldr	r6, [r2, #0]
 8009ec2:	6808      	ldr	r0, [r1, #0]
 8009ec4:	688b      	ldr	r3, [r1, #8]
 8009ec6:	460d      	mov	r5, r1
 8009ec8:	464c      	mov	r4, r9
 8009eca:	2c00      	cmp	r4, #0
 8009ecc:	d045      	beq.n	8009f5a <__ssprint_r+0xae>
 8009ece:	429c      	cmp	r4, r3
 8009ed0:	461f      	mov	r7, r3
 8009ed2:	469a      	mov	sl, r3
 8009ed4:	d346      	bcc.n	8009f64 <__ssprint_r+0xb8>
 8009ed6:	89ab      	ldrh	r3, [r5, #12]
 8009ed8:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8009edc:	d02d      	beq.n	8009f3a <__ssprint_r+0x8e>
 8009ede:	696f      	ldr	r7, [r5, #20]
 8009ee0:	6929      	ldr	r1, [r5, #16]
 8009ee2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8009ee6:	ebc1 0a00 	rsb	sl, r1, r0
 8009eea:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8009eee:	1c60      	adds	r0, r4, #1
 8009ef0:	107f      	asrs	r7, r7, #1
 8009ef2:	4450      	add	r0, sl
 8009ef4:	42b8      	cmp	r0, r7
 8009ef6:	463a      	mov	r2, r7
 8009ef8:	bf84      	itt	hi
 8009efa:	4607      	movhi	r7, r0
 8009efc:	463a      	movhi	r2, r7
 8009efe:	055b      	lsls	r3, r3, #21
 8009f00:	d533      	bpl.n	8009f6a <__ssprint_r+0xbe>
 8009f02:	4611      	mov	r1, r2
 8009f04:	4658      	mov	r0, fp
 8009f06:	f7fe fef1 	bl	8008cec <_malloc_r>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d037      	beq.n	8009f7e <__ssprint_r+0xd2>
 8009f0e:	4652      	mov	r2, sl
 8009f10:	6929      	ldr	r1, [r5, #16]
 8009f12:	9001      	str	r0, [sp, #4]
 8009f14:	f7fa f886 	bl	8004024 <memcpy>
 8009f18:	89aa      	ldrh	r2, [r5, #12]
 8009f1a:	9b01      	ldr	r3, [sp, #4]
 8009f1c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009f20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f24:	81aa      	strh	r2, [r5, #12]
 8009f26:	ebca 0207 	rsb	r2, sl, r7
 8009f2a:	eb03 000a 	add.w	r0, r3, sl
 8009f2e:	616f      	str	r7, [r5, #20]
 8009f30:	612b      	str	r3, [r5, #16]
 8009f32:	6028      	str	r0, [r5, #0]
 8009f34:	60aa      	str	r2, [r5, #8]
 8009f36:	4627      	mov	r7, r4
 8009f38:	46a2      	mov	sl, r4
 8009f3a:	4652      	mov	r2, sl
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	f7ff f9f7 	bl	8009330 <memmove>
 8009f42:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8009f46:	68ab      	ldr	r3, [r5, #8]
 8009f48:	6828      	ldr	r0, [r5, #0]
 8009f4a:	1bdb      	subs	r3, r3, r7
 8009f4c:	4450      	add	r0, sl
 8009f4e:	1b14      	subs	r4, r2, r4
 8009f50:	60ab      	str	r3, [r5, #8]
 8009f52:	6028      	str	r0, [r5, #0]
 8009f54:	f8c8 4008 	str.w	r4, [r8, #8]
 8009f58:	b314      	cbz	r4, 8009fa0 <__ssprint_r+0xf4>
 8009f5a:	f8d6 9000 	ldr.w	r9, [r6]
 8009f5e:	6874      	ldr	r4, [r6, #4]
 8009f60:	3608      	adds	r6, #8
 8009f62:	e7b2      	b.n	8009eca <__ssprint_r+0x1e>
 8009f64:	4627      	mov	r7, r4
 8009f66:	46a2      	mov	sl, r4
 8009f68:	e7e7      	b.n	8009f3a <__ssprint_r+0x8e>
 8009f6a:	4658      	mov	r0, fp
 8009f6c:	f7ff fd58 	bl	8009a20 <_realloc_r>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d1d7      	bne.n	8009f26 <__ssprint_r+0x7a>
 8009f76:	6929      	ldr	r1, [r5, #16]
 8009f78:	4658      	mov	r0, fp
 8009f7a:	f7fe fb93 	bl	80086a4 <_free_r>
 8009f7e:	230c      	movs	r3, #12
 8009f80:	f8cb 3000 	str.w	r3, [fp]
 8009f84:	89ab      	ldrh	r3, [r5, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f90:	81ab      	strh	r3, [r5, #12]
 8009f92:	f8c8 2008 	str.w	r2, [r8, #8]
 8009f96:	f8c8 2004 	str.w	r2, [r8, #4]
 8009f9a:	b003      	add	sp, #12
 8009f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	f8c8 0004 	str.w	r0, [r8, #4]
 8009fa6:	b003      	add	sp, #12
 8009fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fac <__sprint_r.part.0>:
 8009fac:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009fae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb2:	049c      	lsls	r4, r3, #18
 8009fb4:	4692      	mov	sl, r2
 8009fb6:	d52c      	bpl.n	800a012 <__sprint_r.part.0+0x66>
 8009fb8:	6893      	ldr	r3, [r2, #8]
 8009fba:	6812      	ldr	r2, [r2, #0]
 8009fbc:	b33b      	cbz	r3, 800a00e <__sprint_r.part.0+0x62>
 8009fbe:	460f      	mov	r7, r1
 8009fc0:	4680      	mov	r8, r0
 8009fc2:	f102 0908 	add.w	r9, r2, #8
 8009fc6:	e919 0060 	ldmdb	r9, {r5, r6}
 8009fca:	08b6      	lsrs	r6, r6, #2
 8009fcc:	d017      	beq.n	8009ffe <__sprint_r.part.0+0x52>
 8009fce:	3d04      	subs	r5, #4
 8009fd0:	2400      	movs	r4, #0
 8009fd2:	e001      	b.n	8009fd8 <__sprint_r.part.0+0x2c>
 8009fd4:	42a6      	cmp	r6, r4
 8009fd6:	d010      	beq.n	8009ffa <__sprint_r.part.0+0x4e>
 8009fd8:	463a      	mov	r2, r7
 8009fda:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8009fde:	4640      	mov	r0, r8
 8009fe0:	f000 f91e 	bl	800a220 <_fputwc_r>
 8009fe4:	1c43      	adds	r3, r0, #1
 8009fe6:	f104 0401 	add.w	r4, r4, #1
 8009fea:	d1f3      	bne.n	8009fd4 <__sprint_r.part.0+0x28>
 8009fec:	2300      	movs	r3, #0
 8009fee:	f8ca 3008 	str.w	r3, [sl, #8]
 8009ff2:	f8ca 3004 	str.w	r3, [sl, #4]
 8009ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ffa:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009ffe:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800a002:	f8ca 3008 	str.w	r3, [sl, #8]
 800a006:	f109 0908 	add.w	r9, r9, #8
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1db      	bne.n	8009fc6 <__sprint_r.part.0+0x1a>
 800a00e:	2000      	movs	r0, #0
 800a010:	e7ec      	b.n	8009fec <__sprint_r.part.0+0x40>
 800a012:	f7fe fc2f 	bl	8008874 <__sfvwrite_r>
 800a016:	2300      	movs	r3, #0
 800a018:	f8ca 3008 	str.w	r3, [sl, #8]
 800a01c:	f8ca 3004 	str.w	r3, [sl, #4]
 800a020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a024 <__sprint_r>:
 800a024:	6893      	ldr	r3, [r2, #8]
 800a026:	b10b      	cbz	r3, 800a02c <__sprint_r+0x8>
 800a028:	f7ff bfc0 	b.w	8009fac <__sprint_r.part.0>
 800a02c:	b410      	push	{r4}
 800a02e:	4618      	mov	r0, r3
 800a030:	6053      	str	r3, [r2, #4]
 800a032:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <__ascii_wctomb>:
 800a038:	b121      	cbz	r1, 800a044 <__ascii_wctomb+0xc>
 800a03a:	2aff      	cmp	r2, #255	; 0xff
 800a03c:	d804      	bhi.n	800a048 <__ascii_wctomb+0x10>
 800a03e:	700a      	strb	r2, [r1, #0]
 800a040:	2001      	movs	r0, #1
 800a042:	4770      	bx	lr
 800a044:	4608      	mov	r0, r1
 800a046:	4770      	bx	lr
 800a048:	238a      	movs	r3, #138	; 0x8a
 800a04a:	6003      	str	r3, [r0, #0]
 800a04c:	f04f 30ff 	mov.w	r0, #4294967295
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop

0800a054 <_write_r>:
 800a054:	b570      	push	{r4, r5, r6, lr}
 800a056:	460d      	mov	r5, r1
 800a058:	4c08      	ldr	r4, [pc, #32]	; (800a07c <_write_r+0x28>)
 800a05a:	4611      	mov	r1, r2
 800a05c:	4606      	mov	r6, r0
 800a05e:	461a      	mov	r2, r3
 800a060:	4628      	mov	r0, r5
 800a062:	2300      	movs	r3, #0
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	f7f7 fa1d 	bl	80014a4 <_write>
 800a06a:	1c43      	adds	r3, r0, #1
 800a06c:	d000      	beq.n	800a070 <_write_r+0x1c>
 800a06e:	bd70      	pop	{r4, r5, r6, pc}
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d0fb      	beq.n	800a06e <_write_r+0x1a>
 800a076:	6033      	str	r3, [r6, #0]
 800a078:	bd70      	pop	{r4, r5, r6, pc}
 800a07a:	bf00      	nop
 800a07c:	20000acc 	.word	0x20000acc

0800a080 <_calloc_r>:
 800a080:	b510      	push	{r4, lr}
 800a082:	fb02 f101 	mul.w	r1, r2, r1
 800a086:	f7fe fe31 	bl	8008cec <_malloc_r>
 800a08a:	4604      	mov	r4, r0
 800a08c:	b1d8      	cbz	r0, 800a0c6 <_calloc_r+0x46>
 800a08e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a092:	f022 0203 	bic.w	r2, r2, #3
 800a096:	3a04      	subs	r2, #4
 800a098:	2a24      	cmp	r2, #36	; 0x24
 800a09a:	d818      	bhi.n	800a0ce <_calloc_r+0x4e>
 800a09c:	2a13      	cmp	r2, #19
 800a09e:	d914      	bls.n	800a0ca <_calloc_r+0x4a>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	2a1b      	cmp	r2, #27
 800a0a4:	6003      	str	r3, [r0, #0]
 800a0a6:	6043      	str	r3, [r0, #4]
 800a0a8:	d916      	bls.n	800a0d8 <_calloc_r+0x58>
 800a0aa:	2a24      	cmp	r2, #36	; 0x24
 800a0ac:	6083      	str	r3, [r0, #8]
 800a0ae:	60c3      	str	r3, [r0, #12]
 800a0b0:	bf11      	iteee	ne
 800a0b2:	f100 0210 	addne.w	r2, r0, #16
 800a0b6:	6103      	streq	r3, [r0, #16]
 800a0b8:	6143      	streq	r3, [r0, #20]
 800a0ba:	f100 0218 	addeq.w	r2, r0, #24
 800a0be:	2300      	movs	r3, #0
 800a0c0:	6013      	str	r3, [r2, #0]
 800a0c2:	6053      	str	r3, [r2, #4]
 800a0c4:	6093      	str	r3, [r2, #8]
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	bd10      	pop	{r4, pc}
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	e7f7      	b.n	800a0be <_calloc_r+0x3e>
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	f7fa f842 	bl	8004158 <memset>
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	bd10      	pop	{r4, pc}
 800a0d8:	f100 0208 	add.w	r2, r0, #8
 800a0dc:	e7ef      	b.n	800a0be <_calloc_r+0x3e>
 800a0de:	bf00      	nop

0800a0e0 <_close_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4c07      	ldr	r4, [pc, #28]	; (800a100 <_close_r+0x20>)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	6023      	str	r3, [r4, #0]
 800a0ec:	f7f8 f930 	bl	8002350 <_close>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d000      	beq.n	800a0f6 <_close_r+0x16>
 800a0f4:	bd38      	pop	{r3, r4, r5, pc}
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d0fb      	beq.n	800a0f4 <_close_r+0x14>
 800a0fc:	602b      	str	r3, [r5, #0]
 800a0fe:	bd38      	pop	{r3, r4, r5, pc}
 800a100:	20000acc 	.word	0x20000acc

0800a104 <_fclose_r>:
 800a104:	2900      	cmp	r1, #0
 800a106:	d03d      	beq.n	800a184 <_fclose_r+0x80>
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	4605      	mov	r5, r0
 800a10c:	460c      	mov	r4, r1
 800a10e:	b108      	cbz	r0, 800a114 <_fclose_r+0x10>
 800a110:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a112:	b37b      	cbz	r3, 800a174 <_fclose_r+0x70>
 800a114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a118:	b90b      	cbnz	r3, 800a11e <_fclose_r+0x1a>
 800a11a:	2000      	movs	r0, #0
 800a11c:	bd70      	pop	{r4, r5, r6, pc}
 800a11e:	4621      	mov	r1, r4
 800a120:	4628      	mov	r0, r5
 800a122:	f7fe f92f 	bl	8008384 <__sflush_r>
 800a126:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a128:	4606      	mov	r6, r0
 800a12a:	b133      	cbz	r3, 800a13a <_fclose_r+0x36>
 800a12c:	69e1      	ldr	r1, [r4, #28]
 800a12e:	4628      	mov	r0, r5
 800a130:	4798      	blx	r3
 800a132:	2800      	cmp	r0, #0
 800a134:	bfb8      	it	lt
 800a136:	f04f 36ff 	movlt.w	r6, #4294967295
 800a13a:	89a3      	ldrh	r3, [r4, #12]
 800a13c:	061b      	lsls	r3, r3, #24
 800a13e:	d41c      	bmi.n	800a17a <_fclose_r+0x76>
 800a140:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a142:	b141      	cbz	r1, 800a156 <_fclose_r+0x52>
 800a144:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a148:	4299      	cmp	r1, r3
 800a14a:	d002      	beq.n	800a152 <_fclose_r+0x4e>
 800a14c:	4628      	mov	r0, r5
 800a14e:	f7fe faa9 	bl	80086a4 <_free_r>
 800a152:	2300      	movs	r3, #0
 800a154:	6323      	str	r3, [r4, #48]	; 0x30
 800a156:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a158:	b121      	cbz	r1, 800a164 <_fclose_r+0x60>
 800a15a:	4628      	mov	r0, r5
 800a15c:	f7fe faa2 	bl	80086a4 <_free_r>
 800a160:	2300      	movs	r3, #0
 800a162:	6463      	str	r3, [r4, #68]	; 0x44
 800a164:	f7fe fa4c 	bl	8008600 <__sfp_lock_acquire>
 800a168:	2300      	movs	r3, #0
 800a16a:	81a3      	strh	r3, [r4, #12]
 800a16c:	f7fe fa4a 	bl	8008604 <__sfp_lock_release>
 800a170:	4630      	mov	r0, r6
 800a172:	bd70      	pop	{r4, r5, r6, pc}
 800a174:	f7fe fa3e 	bl	80085f4 <__sinit>
 800a178:	e7cc      	b.n	800a114 <_fclose_r+0x10>
 800a17a:	6921      	ldr	r1, [r4, #16]
 800a17c:	4628      	mov	r0, r5
 800a17e:	f7fe fa91 	bl	80086a4 <_free_r>
 800a182:	e7dd      	b.n	800a140 <_fclose_r+0x3c>
 800a184:	2000      	movs	r0, #0
 800a186:	4770      	bx	lr

0800a188 <__fputwc>:
 800a188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a18c:	b082      	sub	sp, #8
 800a18e:	4680      	mov	r8, r0
 800a190:	4689      	mov	r9, r1
 800a192:	4614      	mov	r4, r2
 800a194:	f7fe fd1a 	bl	8008bcc <__locale_mb_cur_max>
 800a198:	2801      	cmp	r0, #1
 800a19a:	d033      	beq.n	800a204 <__fputwc+0x7c>
 800a19c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800a1a0:	464a      	mov	r2, r9
 800a1a2:	a901      	add	r1, sp, #4
 800a1a4:	4640      	mov	r0, r8
 800a1a6:	f000 f8f7 	bl	800a398 <_wcrtomb_r>
 800a1aa:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a1ae:	4682      	mov	sl, r0
 800a1b0:	d021      	beq.n	800a1f6 <__fputwc+0x6e>
 800a1b2:	b388      	cbz	r0, 800a218 <__fputwc+0x90>
 800a1b4:	f89d 6004 	ldrb.w	r6, [sp, #4]
 800a1b8:	2500      	movs	r5, #0
 800a1ba:	e008      	b.n	800a1ce <__fputwc+0x46>
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	1c5a      	adds	r2, r3, #1
 800a1c0:	6022      	str	r2, [r4, #0]
 800a1c2:	701e      	strb	r6, [r3, #0]
 800a1c4:	3501      	adds	r5, #1
 800a1c6:	4555      	cmp	r5, sl
 800a1c8:	d226      	bcs.n	800a218 <__fputwc+0x90>
 800a1ca:	ab01      	add	r3, sp, #4
 800a1cc:	5d5e      	ldrb	r6, [r3, r5]
 800a1ce:	68a3      	ldr	r3, [r4, #8]
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	60a3      	str	r3, [r4, #8]
 800a1d6:	daf1      	bge.n	800a1bc <__fputwc+0x34>
 800a1d8:	69a7      	ldr	r7, [r4, #24]
 800a1da:	42bb      	cmp	r3, r7
 800a1dc:	4631      	mov	r1, r6
 800a1de:	4622      	mov	r2, r4
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	db01      	blt.n	800a1e8 <__fputwc+0x60>
 800a1e4:	2e0a      	cmp	r6, #10
 800a1e6:	d1e9      	bne.n	800a1bc <__fputwc+0x34>
 800a1e8:	f000 f880 	bl	800a2ec <__swbuf_r>
 800a1ec:	1c43      	adds	r3, r0, #1
 800a1ee:	d1e9      	bne.n	800a1c4 <__fputwc+0x3c>
 800a1f0:	b002      	add	sp, #8
 800a1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f6:	89a3      	ldrh	r3, [r4, #12]
 800a1f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1fc:	81a3      	strh	r3, [r4, #12]
 800a1fe:	b002      	add	sp, #8
 800a200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a204:	f109 33ff 	add.w	r3, r9, #4294967295
 800a208:	2bfe      	cmp	r3, #254	; 0xfe
 800a20a:	d8c7      	bhi.n	800a19c <__fputwc+0x14>
 800a20c:	fa5f f689 	uxtb.w	r6, r9
 800a210:	4682      	mov	sl, r0
 800a212:	f88d 6004 	strb.w	r6, [sp, #4]
 800a216:	e7cf      	b.n	800a1b8 <__fputwc+0x30>
 800a218:	4648      	mov	r0, r9
 800a21a:	b002      	add	sp, #8
 800a21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a220 <_fputwc_r>:
 800a220:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800a224:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800a228:	d10b      	bne.n	800a242 <_fputwc_r+0x22>
 800a22a:	b410      	push	{r4}
 800a22c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800a22e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a232:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800a236:	6654      	str	r4, [r2, #100]	; 0x64
 800a238:	8193      	strh	r3, [r2, #12]
 800a23a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a23e:	f7ff bfa3 	b.w	800a188 <__fputwc>
 800a242:	f7ff bfa1 	b.w	800a188 <__fputwc>
 800a246:	bf00      	nop

0800a248 <_fstat_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	460b      	mov	r3, r1
 800a24c:	4c07      	ldr	r4, [pc, #28]	; (800a26c <_fstat_r+0x24>)
 800a24e:	4605      	mov	r5, r0
 800a250:	4611      	mov	r1, r2
 800a252:	4618      	mov	r0, r3
 800a254:	2300      	movs	r3, #0
 800a256:	6023      	str	r3, [r4, #0]
 800a258:	f7f8 f884 	bl	8002364 <_fstat>
 800a25c:	1c43      	adds	r3, r0, #1
 800a25e:	d000      	beq.n	800a262 <_fstat_r+0x1a>
 800a260:	bd38      	pop	{r3, r4, r5, pc}
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d0fb      	beq.n	800a260 <_fstat_r+0x18>
 800a268:	602b      	str	r3, [r5, #0]
 800a26a:	bd38      	pop	{r3, r4, r5, pc}
 800a26c:	20000acc 	.word	0x20000acc

0800a270 <_isatty_r>:
 800a270:	b538      	push	{r3, r4, r5, lr}
 800a272:	4c07      	ldr	r4, [pc, #28]	; (800a290 <_isatty_r+0x20>)
 800a274:	2300      	movs	r3, #0
 800a276:	4605      	mov	r5, r0
 800a278:	4608      	mov	r0, r1
 800a27a:	6023      	str	r3, [r4, #0]
 800a27c:	f7f8 f8c6 	bl	800240c <_isatty>
 800a280:	1c43      	adds	r3, r0, #1
 800a282:	d000      	beq.n	800a286 <_isatty_r+0x16>
 800a284:	bd38      	pop	{r3, r4, r5, pc}
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d0fb      	beq.n	800a284 <_isatty_r+0x14>
 800a28c:	602b      	str	r3, [r5, #0]
 800a28e:	bd38      	pop	{r3, r4, r5, pc}
 800a290:	20000acc 	.word	0x20000acc

0800a294 <_lseek_r>:
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	460d      	mov	r5, r1
 800a298:	4c08      	ldr	r4, [pc, #32]	; (800a2bc <_lseek_r+0x28>)
 800a29a:	4611      	mov	r1, r2
 800a29c:	4606      	mov	r6, r0
 800a29e:	461a      	mov	r2, r3
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	f7f8 f837 	bl	8002318 <_lseek>
 800a2aa:	1c43      	adds	r3, r0, #1
 800a2ac:	d000      	beq.n	800a2b0 <_lseek_r+0x1c>
 800a2ae:	bd70      	pop	{r4, r5, r6, pc}
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0fb      	beq.n	800a2ae <_lseek_r+0x1a>
 800a2b6:	6033      	str	r3, [r6, #0]
 800a2b8:	bd70      	pop	{r4, r5, r6, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20000acc 	.word	0x20000acc

0800a2c0 <_read_r>:
 800a2c0:	b570      	push	{r4, r5, r6, lr}
 800a2c2:	460d      	mov	r5, r1
 800a2c4:	4c08      	ldr	r4, [pc, #32]	; (800a2e8 <_read_r+0x28>)
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	4606      	mov	r6, r0
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	6023      	str	r3, [r4, #0]
 800a2d2:	f7f8 f82f 	bl	8002334 <_read>
 800a2d6:	1c43      	adds	r3, r0, #1
 800a2d8:	d000      	beq.n	800a2dc <_read_r+0x1c>
 800a2da:	bd70      	pop	{r4, r5, r6, pc}
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0fb      	beq.n	800a2da <_read_r+0x1a>
 800a2e2:	6033      	str	r3, [r6, #0]
 800a2e4:	bd70      	pop	{r4, r5, r6, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000acc 	.word	0x20000acc

0800a2ec <__swbuf_r>:
 800a2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ee:	460d      	mov	r5, r1
 800a2f0:	4614      	mov	r4, r2
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	b110      	cbz	r0, 800a2fc <__swbuf_r+0x10>
 800a2f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d04a      	beq.n	800a392 <__swbuf_r+0xa6>
 800a2fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a300:	69a3      	ldr	r3, [r4, #24]
 800a302:	60a3      	str	r3, [r4, #8]
 800a304:	b291      	uxth	r1, r2
 800a306:	0708      	lsls	r0, r1, #28
 800a308:	d538      	bpl.n	800a37c <__swbuf_r+0x90>
 800a30a:	6923      	ldr	r3, [r4, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d035      	beq.n	800a37c <__swbuf_r+0x90>
 800a310:	0489      	lsls	r1, r1, #18
 800a312:	b2ef      	uxtb	r7, r5
 800a314:	d515      	bpl.n	800a342 <__swbuf_r+0x56>
 800a316:	6822      	ldr	r2, [r4, #0]
 800a318:	6961      	ldr	r1, [r4, #20]
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	428b      	cmp	r3, r1
 800a31e:	da1c      	bge.n	800a35a <__swbuf_r+0x6e>
 800a320:	3301      	adds	r3, #1
 800a322:	68a1      	ldr	r1, [r4, #8]
 800a324:	1c50      	adds	r0, r2, #1
 800a326:	3901      	subs	r1, #1
 800a328:	60a1      	str	r1, [r4, #8]
 800a32a:	6020      	str	r0, [r4, #0]
 800a32c:	7015      	strb	r5, [r2, #0]
 800a32e:	6962      	ldr	r2, [r4, #20]
 800a330:	429a      	cmp	r2, r3
 800a332:	d01a      	beq.n	800a36a <__swbuf_r+0x7e>
 800a334:	89a3      	ldrh	r3, [r4, #12]
 800a336:	07db      	lsls	r3, r3, #31
 800a338:	d501      	bpl.n	800a33e <__swbuf_r+0x52>
 800a33a:	2f0a      	cmp	r7, #10
 800a33c:	d015      	beq.n	800a36a <__swbuf_r+0x7e>
 800a33e:	4638      	mov	r0, r7
 800a340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a342:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a348:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800a34c:	81a2      	strh	r2, [r4, #12]
 800a34e:	6822      	ldr	r2, [r4, #0]
 800a350:	6661      	str	r1, [r4, #100]	; 0x64
 800a352:	6961      	ldr	r1, [r4, #20]
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	428b      	cmp	r3, r1
 800a358:	dbe2      	blt.n	800a320 <__swbuf_r+0x34>
 800a35a:	4621      	mov	r1, r4
 800a35c:	4630      	mov	r0, r6
 800a35e:	f7fe f8b5 	bl	80084cc <_fflush_r>
 800a362:	b940      	cbnz	r0, 800a376 <__swbuf_r+0x8a>
 800a364:	6822      	ldr	r2, [r4, #0]
 800a366:	2301      	movs	r3, #1
 800a368:	e7db      	b.n	800a322 <__swbuf_r+0x36>
 800a36a:	4621      	mov	r1, r4
 800a36c:	4630      	mov	r0, r6
 800a36e:	f7fe f8ad 	bl	80084cc <_fflush_r>
 800a372:	2800      	cmp	r0, #0
 800a374:	d0e3      	beq.n	800a33e <__swbuf_r+0x52>
 800a376:	f04f 37ff 	mov.w	r7, #4294967295
 800a37a:	e7e0      	b.n	800a33e <__swbuf_r+0x52>
 800a37c:	4621      	mov	r1, r4
 800a37e:	4630      	mov	r0, r6
 800a380:	f7fc fff2 	bl	8007368 <__swsetup_r>
 800a384:	2800      	cmp	r0, #0
 800a386:	d1f6      	bne.n	800a376 <__swbuf_r+0x8a>
 800a388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a38c:	6923      	ldr	r3, [r4, #16]
 800a38e:	b291      	uxth	r1, r2
 800a390:	e7be      	b.n	800a310 <__swbuf_r+0x24>
 800a392:	f7fe f92f 	bl	80085f4 <__sinit>
 800a396:	e7b1      	b.n	800a2fc <__swbuf_r+0x10>

0800a398 <_wcrtomb_r>:
 800a398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a39a:	4606      	mov	r6, r0
 800a39c:	b085      	sub	sp, #20
 800a39e:	461f      	mov	r7, r3
 800a3a0:	b189      	cbz	r1, 800a3c6 <_wcrtomb_r+0x2e>
 800a3a2:	4c10      	ldr	r4, [pc, #64]	; (800a3e4 <_wcrtomb_r+0x4c>)
 800a3a4:	4d10      	ldr	r5, [pc, #64]	; (800a3e8 <_wcrtomb_r+0x50>)
 800a3a6:	6824      	ldr	r4, [r4, #0]
 800a3a8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800a3aa:	2c00      	cmp	r4, #0
 800a3ac:	bf08      	it	eq
 800a3ae:	462c      	moveq	r4, r5
 800a3b0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800a3b4:	47a0      	blx	r4
 800a3b6:	1c43      	adds	r3, r0, #1
 800a3b8:	d103      	bne.n	800a3c2 <_wcrtomb_r+0x2a>
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	238a      	movs	r3, #138	; 0x8a
 800a3be:	603a      	str	r2, [r7, #0]
 800a3c0:	6033      	str	r3, [r6, #0]
 800a3c2:	b005      	add	sp, #20
 800a3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	4906      	ldr	r1, [pc, #24]	; (800a3e4 <_wcrtomb_r+0x4c>)
 800a3ca:	4a07      	ldr	r2, [pc, #28]	; (800a3e8 <_wcrtomb_r+0x50>)
 800a3cc:	6809      	ldr	r1, [r1, #0]
 800a3ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a3d0:	2900      	cmp	r1, #0
 800a3d2:	bf08      	it	eq
 800a3d4:	4611      	moveq	r1, r2
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 800a3dc:	a901      	add	r1, sp, #4
 800a3de:	47a0      	blx	r4
 800a3e0:	e7e9      	b.n	800a3b6 <_wcrtomb_r+0x1e>
 800a3e2:	bf00      	nop
 800a3e4:	20000468 	.word	0x20000468
 800a3e8:	2000046c 	.word	0x2000046c

0800a3ec <__aeabi_uldivmod>:
 800a3ec:	b953      	cbnz	r3, 800a404 <__aeabi_uldivmod+0x18>
 800a3ee:	b94a      	cbnz	r2, 800a404 <__aeabi_uldivmod+0x18>
 800a3f0:	2900      	cmp	r1, #0
 800a3f2:	bf08      	it	eq
 800a3f4:	2800      	cmpeq	r0, #0
 800a3f6:	bf1c      	itt	ne
 800a3f8:	f04f 31ff 	movne.w	r1, #4294967295
 800a3fc:	f04f 30ff 	movne.w	r0, #4294967295
 800a400:	f000 b97e 	b.w	800a700 <__aeabi_idiv0>
 800a404:	f1ad 0c08 	sub.w	ip, sp, #8
 800a408:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800a40c:	f000 f806 	bl	800a41c <__udivmoddi4>
 800a410:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a418:	b004      	add	sp, #16
 800a41a:	4770      	bx	lr

0800a41c <__udivmoddi4>:
 800a41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a420:	468c      	mov	ip, r1
 800a422:	460e      	mov	r6, r1
 800a424:	4604      	mov	r4, r0
 800a426:	9d08      	ldr	r5, [sp, #32]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d150      	bne.n	800a4ce <__udivmoddi4+0xb2>
 800a42c:	428a      	cmp	r2, r1
 800a42e:	4617      	mov	r7, r2
 800a430:	d96c      	bls.n	800a50c <__udivmoddi4+0xf0>
 800a432:	fab2 fe82 	clz	lr, r2
 800a436:	f1be 0f00 	cmp.w	lr, #0
 800a43a:	d00b      	beq.n	800a454 <__udivmoddi4+0x38>
 800a43c:	f1ce 0420 	rsb	r4, lr, #32
 800a440:	fa20 f404 	lsr.w	r4, r0, r4
 800a444:	fa01 f60e 	lsl.w	r6, r1, lr
 800a448:	ea44 0c06 	orr.w	ip, r4, r6
 800a44c:	fa02 f70e 	lsl.w	r7, r2, lr
 800a450:	fa00 f40e 	lsl.w	r4, r0, lr
 800a454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800a458:	0c22      	lsrs	r2, r4, #16
 800a45a:	fbbc f0f9 	udiv	r0, ip, r9
 800a45e:	fa1f f887 	uxth.w	r8, r7
 800a462:	fb09 c610 	mls	r6, r9, r0, ip
 800a466:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a46a:	fb00 f308 	mul.w	r3, r0, r8
 800a46e:	42b3      	cmp	r3, r6
 800a470:	d909      	bls.n	800a486 <__udivmoddi4+0x6a>
 800a472:	19f6      	adds	r6, r6, r7
 800a474:	f100 32ff 	add.w	r2, r0, #4294967295
 800a478:	f080 8122 	bcs.w	800a6c0 <__udivmoddi4+0x2a4>
 800a47c:	42b3      	cmp	r3, r6
 800a47e:	f240 811f 	bls.w	800a6c0 <__udivmoddi4+0x2a4>
 800a482:	3802      	subs	r0, #2
 800a484:	443e      	add	r6, r7
 800a486:	1af6      	subs	r6, r6, r3
 800a488:	b2a2      	uxth	r2, r4
 800a48a:	fbb6 f3f9 	udiv	r3, r6, r9
 800a48e:	fb09 6613 	mls	r6, r9, r3, r6
 800a492:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800a496:	fb03 f808 	mul.w	r8, r3, r8
 800a49a:	45a0      	cmp	r8, r4
 800a49c:	d909      	bls.n	800a4b2 <__udivmoddi4+0x96>
 800a49e:	19e4      	adds	r4, r4, r7
 800a4a0:	f103 32ff 	add.w	r2, r3, #4294967295
 800a4a4:	f080 810a 	bcs.w	800a6bc <__udivmoddi4+0x2a0>
 800a4a8:	45a0      	cmp	r8, r4
 800a4aa:	f240 8107 	bls.w	800a6bc <__udivmoddi4+0x2a0>
 800a4ae:	3b02      	subs	r3, #2
 800a4b0:	443c      	add	r4, r7
 800a4b2:	ebc8 0404 	rsb	r4, r8, r4
 800a4b6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	2d00      	cmp	r5, #0
 800a4be:	d062      	beq.n	800a586 <__udivmoddi4+0x16a>
 800a4c0:	fa24 f40e 	lsr.w	r4, r4, lr
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	602c      	str	r4, [r5, #0]
 800a4c8:	606b      	str	r3, [r5, #4]
 800a4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ce:	428b      	cmp	r3, r1
 800a4d0:	d907      	bls.n	800a4e2 <__udivmoddi4+0xc6>
 800a4d2:	2d00      	cmp	r5, #0
 800a4d4:	d055      	beq.n	800a582 <__udivmoddi4+0x166>
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	e885 0041 	stmia.w	r5, {r0, r6}
 800a4dc:	4608      	mov	r0, r1
 800a4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e2:	fab3 f183 	clz	r1, r3
 800a4e6:	2900      	cmp	r1, #0
 800a4e8:	f040 8090 	bne.w	800a60c <__udivmoddi4+0x1f0>
 800a4ec:	42b3      	cmp	r3, r6
 800a4ee:	d302      	bcc.n	800a4f6 <__udivmoddi4+0xda>
 800a4f0:	4282      	cmp	r2, r0
 800a4f2:	f200 80f8 	bhi.w	800a6e6 <__udivmoddi4+0x2ca>
 800a4f6:	1a84      	subs	r4, r0, r2
 800a4f8:	eb66 0603 	sbc.w	r6, r6, r3
 800a4fc:	2001      	movs	r0, #1
 800a4fe:	46b4      	mov	ip, r6
 800a500:	2d00      	cmp	r5, #0
 800a502:	d040      	beq.n	800a586 <__udivmoddi4+0x16a>
 800a504:	e885 1010 	stmia.w	r5, {r4, ip}
 800a508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50c:	b912      	cbnz	r2, 800a514 <__udivmoddi4+0xf8>
 800a50e:	2701      	movs	r7, #1
 800a510:	fbb7 f7f2 	udiv	r7, r7, r2
 800a514:	fab7 fe87 	clz	lr, r7
 800a518:	f1be 0f00 	cmp.w	lr, #0
 800a51c:	d135      	bne.n	800a58a <__udivmoddi4+0x16e>
 800a51e:	1bf3      	subs	r3, r6, r7
 800a520:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800a524:	fa1f fc87 	uxth.w	ip, r7
 800a528:	2101      	movs	r1, #1
 800a52a:	fbb3 f0f8 	udiv	r0, r3, r8
 800a52e:	0c22      	lsrs	r2, r4, #16
 800a530:	fb08 3610 	mls	r6, r8, r0, r3
 800a534:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800a538:	fb0c f300 	mul.w	r3, ip, r0
 800a53c:	42b3      	cmp	r3, r6
 800a53e:	d907      	bls.n	800a550 <__udivmoddi4+0x134>
 800a540:	19f6      	adds	r6, r6, r7
 800a542:	f100 32ff 	add.w	r2, r0, #4294967295
 800a546:	d202      	bcs.n	800a54e <__udivmoddi4+0x132>
 800a548:	42b3      	cmp	r3, r6
 800a54a:	f200 80ce 	bhi.w	800a6ea <__udivmoddi4+0x2ce>
 800a54e:	4610      	mov	r0, r2
 800a550:	1af6      	subs	r6, r6, r3
 800a552:	b2a2      	uxth	r2, r4
 800a554:	fbb6 f3f8 	udiv	r3, r6, r8
 800a558:	fb08 6613 	mls	r6, r8, r3, r6
 800a55c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800a560:	fb0c fc03 	mul.w	ip, ip, r3
 800a564:	45a4      	cmp	ip, r4
 800a566:	d907      	bls.n	800a578 <__udivmoddi4+0x15c>
 800a568:	19e4      	adds	r4, r4, r7
 800a56a:	f103 32ff 	add.w	r2, r3, #4294967295
 800a56e:	d202      	bcs.n	800a576 <__udivmoddi4+0x15a>
 800a570:	45a4      	cmp	ip, r4
 800a572:	f200 80b5 	bhi.w	800a6e0 <__udivmoddi4+0x2c4>
 800a576:	4613      	mov	r3, r2
 800a578:	ebcc 0404 	rsb	r4, ip, r4
 800a57c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800a580:	e79c      	b.n	800a4bc <__udivmoddi4+0xa0>
 800a582:	4629      	mov	r1, r5
 800a584:	4628      	mov	r0, r5
 800a586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a58a:	f1ce 0120 	rsb	r1, lr, #32
 800a58e:	fa06 f30e 	lsl.w	r3, r6, lr
 800a592:	fa07 f70e 	lsl.w	r7, r7, lr
 800a596:	fa20 f901 	lsr.w	r9, r0, r1
 800a59a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800a59e:	40ce      	lsrs	r6, r1
 800a5a0:	ea49 0903 	orr.w	r9, r9, r3
 800a5a4:	fbb6 faf8 	udiv	sl, r6, r8
 800a5a8:	ea4f 4419 	mov.w	r4, r9, lsr #16
 800a5ac:	fb08 661a 	mls	r6, r8, sl, r6
 800a5b0:	fa1f fc87 	uxth.w	ip, r7
 800a5b4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800a5b8:	fb0a f20c 	mul.w	r2, sl, ip
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	fa00 f40e 	lsl.w	r4, r0, lr
 800a5c2:	d90a      	bls.n	800a5da <__udivmoddi4+0x1be>
 800a5c4:	19db      	adds	r3, r3, r7
 800a5c6:	f10a 31ff 	add.w	r1, sl, #4294967295
 800a5ca:	f080 8087 	bcs.w	800a6dc <__udivmoddi4+0x2c0>
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	f240 8084 	bls.w	800a6dc <__udivmoddi4+0x2c0>
 800a5d4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a5d8:	443b      	add	r3, r7
 800a5da:	1a9b      	subs	r3, r3, r2
 800a5dc:	fa1f f989 	uxth.w	r9, r9
 800a5e0:	fbb3 f1f8 	udiv	r1, r3, r8
 800a5e4:	fb08 3311 	mls	r3, r8, r1, r3
 800a5e8:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800a5ec:	fb01 f60c 	mul.w	r6, r1, ip
 800a5f0:	429e      	cmp	r6, r3
 800a5f2:	d907      	bls.n	800a604 <__udivmoddi4+0x1e8>
 800a5f4:	19db      	adds	r3, r3, r7
 800a5f6:	f101 32ff 	add.w	r2, r1, #4294967295
 800a5fa:	d26b      	bcs.n	800a6d4 <__udivmoddi4+0x2b8>
 800a5fc:	429e      	cmp	r6, r3
 800a5fe:	d969      	bls.n	800a6d4 <__udivmoddi4+0x2b8>
 800a600:	3902      	subs	r1, #2
 800a602:	443b      	add	r3, r7
 800a604:	1b9b      	subs	r3, r3, r6
 800a606:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a60a:	e78e      	b.n	800a52a <__udivmoddi4+0x10e>
 800a60c:	f1c1 0e20 	rsb	lr, r1, #32
 800a610:	fa22 f40e 	lsr.w	r4, r2, lr
 800a614:	408b      	lsls	r3, r1
 800a616:	4323      	orrs	r3, r4
 800a618:	fa20 f70e 	lsr.w	r7, r0, lr
 800a61c:	fa06 f401 	lsl.w	r4, r6, r1
 800a620:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800a624:	fa26 f60e 	lsr.w	r6, r6, lr
 800a628:	433c      	orrs	r4, r7
 800a62a:	fbb6 f9fc 	udiv	r9, r6, ip
 800a62e:	0c27      	lsrs	r7, r4, #16
 800a630:	fb0c 6619 	mls	r6, ip, r9, r6
 800a634:	fa1f f883 	uxth.w	r8, r3
 800a638:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800a63c:	fb09 f708 	mul.w	r7, r9, r8
 800a640:	42b7      	cmp	r7, r6
 800a642:	fa02 f201 	lsl.w	r2, r2, r1
 800a646:	fa00 fa01 	lsl.w	sl, r0, r1
 800a64a:	d908      	bls.n	800a65e <__udivmoddi4+0x242>
 800a64c:	18f6      	adds	r6, r6, r3
 800a64e:	f109 30ff 	add.w	r0, r9, #4294967295
 800a652:	d241      	bcs.n	800a6d8 <__udivmoddi4+0x2bc>
 800a654:	42b7      	cmp	r7, r6
 800a656:	d93f      	bls.n	800a6d8 <__udivmoddi4+0x2bc>
 800a658:	f1a9 0902 	sub.w	r9, r9, #2
 800a65c:	441e      	add	r6, r3
 800a65e:	1bf6      	subs	r6, r6, r7
 800a660:	b2a0      	uxth	r0, r4
 800a662:	fbb6 f4fc 	udiv	r4, r6, ip
 800a666:	fb0c 6614 	mls	r6, ip, r4, r6
 800a66a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 800a66e:	fb04 f808 	mul.w	r8, r4, r8
 800a672:	45b8      	cmp	r8, r7
 800a674:	d907      	bls.n	800a686 <__udivmoddi4+0x26a>
 800a676:	18ff      	adds	r7, r7, r3
 800a678:	f104 30ff 	add.w	r0, r4, #4294967295
 800a67c:	d228      	bcs.n	800a6d0 <__udivmoddi4+0x2b4>
 800a67e:	45b8      	cmp	r8, r7
 800a680:	d926      	bls.n	800a6d0 <__udivmoddi4+0x2b4>
 800a682:	3c02      	subs	r4, #2
 800a684:	441f      	add	r7, r3
 800a686:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800a68a:	ebc8 0707 	rsb	r7, r8, r7
 800a68e:	fba0 8902 	umull	r8, r9, r0, r2
 800a692:	454f      	cmp	r7, r9
 800a694:	4644      	mov	r4, r8
 800a696:	464e      	mov	r6, r9
 800a698:	d314      	bcc.n	800a6c4 <__udivmoddi4+0x2a8>
 800a69a:	d029      	beq.n	800a6f0 <__udivmoddi4+0x2d4>
 800a69c:	b365      	cbz	r5, 800a6f8 <__udivmoddi4+0x2dc>
 800a69e:	ebba 0304 	subs.w	r3, sl, r4
 800a6a2:	eb67 0706 	sbc.w	r7, r7, r6
 800a6a6:	fa07 fe0e 	lsl.w	lr, r7, lr
 800a6aa:	40cb      	lsrs	r3, r1
 800a6ac:	40cf      	lsrs	r7, r1
 800a6ae:	ea4e 0303 	orr.w	r3, lr, r3
 800a6b2:	e885 0088 	stmia.w	r5, {r3, r7}
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6bc:	4613      	mov	r3, r2
 800a6be:	e6f8      	b.n	800a4b2 <__udivmoddi4+0x96>
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	e6e0      	b.n	800a486 <__udivmoddi4+0x6a>
 800a6c4:	ebb8 0402 	subs.w	r4, r8, r2
 800a6c8:	eb69 0603 	sbc.w	r6, r9, r3
 800a6cc:	3801      	subs	r0, #1
 800a6ce:	e7e5      	b.n	800a69c <__udivmoddi4+0x280>
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	e7d8      	b.n	800a686 <__udivmoddi4+0x26a>
 800a6d4:	4611      	mov	r1, r2
 800a6d6:	e795      	b.n	800a604 <__udivmoddi4+0x1e8>
 800a6d8:	4681      	mov	r9, r0
 800a6da:	e7c0      	b.n	800a65e <__udivmoddi4+0x242>
 800a6dc:	468a      	mov	sl, r1
 800a6de:	e77c      	b.n	800a5da <__udivmoddi4+0x1be>
 800a6e0:	3b02      	subs	r3, #2
 800a6e2:	443c      	add	r4, r7
 800a6e4:	e748      	b.n	800a578 <__udivmoddi4+0x15c>
 800a6e6:	4608      	mov	r0, r1
 800a6e8:	e70a      	b.n	800a500 <__udivmoddi4+0xe4>
 800a6ea:	3802      	subs	r0, #2
 800a6ec:	443e      	add	r6, r7
 800a6ee:	e72f      	b.n	800a550 <__udivmoddi4+0x134>
 800a6f0:	45c2      	cmp	sl, r8
 800a6f2:	d3e7      	bcc.n	800a6c4 <__udivmoddi4+0x2a8>
 800a6f4:	463e      	mov	r6, r7
 800a6f6:	e7d1      	b.n	800a69c <__udivmoddi4+0x280>
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6fe:	bf00      	nop

0800a700 <__aeabi_idiv0>:
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	41545323 	.word	0x41545323
 800a708:	3031252c 	.word	0x3031252c
 800a70c:	252c756c 	.word	0x252c756c
 800a710:	0a246433 	.word	0x0a246433
 800a714:	00000000 	.word	0x00000000
 800a718:	00007325 	.word	0x00007325
 800a71c:	54554223 	.word	0x54554223
 800a720:	0a24312c 	.word	0x0a24312c
 800a724:	00000000 	.word	0x00000000
 800a728:	54554223 	.word	0x54554223
 800a72c:	0a24322c 	.word	0x0a24322c
 800a730:	00000000 	.word	0x00000000
 800a734:	37257325 	.word	0x37257325
 800a738:	25732564 	.word	0x25732564
 800a73c:	73256437 	.word	0x73256437
 800a740:	24643725 	.word	0x24643725
 800a744:	0000000a 	.word	0x0000000a
 800a748:	0000002c 	.word	0x0000002c
 800a74c:	58535523 	.word	0x58535523
 800a750:	5523002c 	.word	0x5523002c
 800a754:	002c5844 	.word	0x002c5844
 800a758:	58534423 	.word	0x58534423
 800a75c:	4423002c 	.word	0x4423002c
 800a760:	002c5844 	.word	0x002c5844
 800a764:	504f5423 	.word	0x504f5423
 800a768:	4223002c 	.word	0x4223002c
 800a76c:	002c544f 	.word	0x002c544f
 800a770:	58585823 	.word	0x58585823
 800a774:	4623002c 	.word	0x4623002c
 800a778:	002c4c41 	.word	0x002c4c41
 800a77c:	3353494c 	.word	0x3353494c
 800a780:	535f4844 	.word	0x535f4844
 800a784:	444f7465 	.word	0x444f7465
 800a788:	6f642052 	.word	0x6f642052
 800a78c:	2e2e656e 	.word	0x2e2e656e
 800a790:	0000002e 	.word	0x0000002e
 800a794:	3353494c 	.word	0x3353494c
 800a798:	535f4844 	.word	0x535f4844
 800a79c:	6f4d7465 	.word	0x6f4d7465
 800a7a0:	64206564 	.word	0x64206564
 800a7a4:	2e656e6f 	.word	0x2e656e6f
 800a7a8:	00002e2e 	.word	0x00002e2e
 800a7ac:	3353494c 	.word	0x3353494c
 800a7b0:	535f4844 	.word	0x535f4844
 800a7b4:	75467465 	.word	0x75467465
 800a7b8:	63536c6c 	.word	0x63536c6c
 800a7bc:	20656c61 	.word	0x20656c61
 800a7c0:	656e6f64 	.word	0x656e6f64
 800a7c4:	002e2e2e 	.word	0x002e2e2e
 800a7c8:	3353494c 	.word	0x3353494c
 800a7cc:	535f4844 	.word	0x535f4844
 800a7d0:	78417465 	.word	0x78417465
 800a7d4:	64207369 	.word	0x64207369
 800a7d8:	2e656e6f 	.word	0x2e656e6f
 800a7dc:	00002e2e 	.word	0x00002e2e
 800a7e0:	3353494c 	.word	0x3353494c
 800a7e4:	535f4844 	.word	0x535f4844
 800a7e8:	6e497465 	.word	0x6e497465
 800a7ec:	68543174 	.word	0x68543174
 800a7f0:	68737265 	.word	0x68737265
 800a7f4:	20646c6f 	.word	0x20646c6f
 800a7f8:	656e6f64 	.word	0x656e6f64
 800a7fc:	002e2e2e 	.word	0x002e2e2e
 800a800:	3353494c 	.word	0x3353494c
 800a804:	535f4844 	.word	0x535f4844
 800a808:	6e497465 	.word	0x6e497465
 800a80c:	6e6f4374 	.word	0x6e6f4374
 800a810:	75676966 	.word	0x75676966
 800a814:	69746172 	.word	0x69746172
 800a818:	64206e6f 	.word	0x64206e6f
 800a81c:	2e656e6f 	.word	0x2e656e6f
 800a820:	00002e2e 	.word	0x00002e2e
 800a824:	3353494c 	.word	0x3353494c
 800a828:	535f4844 	.word	0x535f4844
 800a82c:	6e497465 	.word	0x6e497465
 800a830:	646f4d74 	.word	0x646f4d74
 800a834:	6f642065 	.word	0x6f642065
 800a838:	2e2e656e 	.word	0x2e2e656e
 800a83c:	0000002e 	.word	0x0000002e
 800a840:	3353494c 	.word	0x3353494c
 800a844:	535f4844 	.word	0x535f4844
 800a848:	44417465 	.word	0x44417465
 800a84c:	78754143 	.word	0x78754143
 800a850:	6e6f6420 	.word	0x6e6f6420
 800a854:	2e2e2e65 	.word	0x2e2e2e65
 800a858:	00000000 	.word	0x00000000
 800a85c:	3353494c 	.word	0x3353494c
 800a860:	535f4844 	.word	0x535f4844
 800a864:	44427465 	.word	0x44427465
 800a868:	6f642055 	.word	0x6f642055
 800a86c:	2e2e656e 	.word	0x2e2e656e
 800a870:	0000002e 	.word	0x0000002e
 800a874:	3353494c 	.word	0x3353494c
 800a878:	535f4844 	.word	0x535f4844
 800a87c:	65547465 	.word	0x65547465
 800a880:	7265706d 	.word	0x7265706d
 800a884:	72757461 	.word	0x72757461
 800a888:	6f642065 	.word	0x6f642065
 800a88c:	2e2e656e 	.word	0x2e2e656e
 800a890:	0000002e 	.word	0x0000002e
 800a894:	51455223 	.word	0x51455223
 800a898:	0000002c 	.word	0x0000002c
 800a89c:	444e4523 	.word	0x444e4523
 800a8a0:	0000002c 	.word	0x0000002c
 800a8a4:	4e4f4323 	.word	0x4e4f4323
 800a8a8:	0000002c 	.word	0x0000002c
 800a8ac:	52455323 	.word	0x52455323
 800a8b0:	0000662c 	.word	0x0000662c
 800a8b4:	52455323 	.word	0x52455323
 800a8b8:	00006e2c 	.word	0x00006e2c
 800a8bc:	41545323 	.word	0x41545323
 800a8c0:	0000002c 	.word	0x0000002c
 800a8c4:	00000000 	.word	0x00000000

0800a8c8 <atanlo>:
 800a8c8:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 800a8d8:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0800a8e8 <atanhi>:
 800a8e8:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 800a8f8:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
 800a908:	74727173 00000000 0000000a              sqrt........

0800a914 <zeroes.7258>:
 800a914:	30303030 30303030 30303030 30303030     0000000000000000
 800a924:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800a934:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800a944:	00000000 33323130 37363534 62613938     ....0123456789ab
 800a954:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800a964:	00000030                                0...

0800a968 <blanks.7257>:
 800a968:	20202020 20202020 20202020 20202020                     

0800a978 <zeroes.7273>:
 800a978:	30303030 30303030 30303030 30303030     0000000000000000

0800a988 <blanks.7272>:
 800a988:	20202020 20202020 20202020 20202020                     
 800a998:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800a9a8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0800a9b8 <__mprec_tens>:
 800a9b8:	00000000 3ff00000 00000000 40240000     .......?......$@
 800a9c8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800a9d8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800a9e8:	00000000 412e8480 00000000 416312d0     .......A......cA
 800a9f8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800aa08:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800aa18:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800aa28:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800aa38:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800aa48:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800aa58:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800aa68:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800aa78:	79d99db4 44ea7843                       ...yCx.D

0800aa80 <__mprec_bigtens>:
 800aa80:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800aa90:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800aaa0:	7f73bf3c 75154fdd                       <.s..O.u

0800aaa8 <p05.6087>:
 800aaa8:	00000005 00000019 0000007d              ........}...

0800aab4 <_ctype_>:
 800aab4:	20202000 20202020 28282020 20282828     .         ((((( 
 800aac4:	20202020 20202020 20202020 20202020                     
 800aad4:	10108820 10101010 10101010 10101010      ...............
 800aae4:	04040410 04040404 10040404 10101010     ................
 800aaf4:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800ab04:	01010101 01010101 01010101 10101010     ................
 800ab14:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800ab24:	02020202 02020202 02020202 10101010     ................
 800ab34:	00000020 00000000 00000000 00000000      ...............
	...
