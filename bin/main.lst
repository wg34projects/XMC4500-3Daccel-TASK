
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	6d 0d 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     m...............
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 19 0b 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0098b8 	.word	0x0c0098b8
 800024c:	20000000 	.word	0x20000000
 8000250:	000009e0 	.word	0x000009e0
 8000254:	0c00a298 	.word	0x0c00a298
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0098b8 	.word	0x0c0098b8
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0098b8 	.word	0x0c0098b8
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200009e0 	.word	0x200009e0
 800027c:	000000a0 	.word	0x000000a0
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000294:	08001715 	.word	0x08001715
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	080023a1 	.word	0x080023a1
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	080011d1 	.word	0x080011d1

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <LIS3DH_ReadReg>:
*			: I2C or SPI reading functions
* Input			: Register Address
* Output		: Data REad
* Return		: None
*******************************************************************************/
u8_t LIS3DH_ReadReg(u8_t Reg, u8_t* Data) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]

    //To be completed with either I2c or SPI reading function
    //i.e. *Data = SPI_Mems_Read_Reg( Reg );

    *Data = _i2c_xfer (0, Reg, 0, 1);
 80002c0:	79f9      	ldrb	r1, [r7, #7]
 80002c2:	2301      	movs	r3, #1
 80002c4:	2200      	movs	r2, #0
 80002c6:	2000      	movs	r0, #0
 80002c8:	f000 fea6 	bl	8001018 <_i2c_xfer>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	701a      	strb	r2, [r3, #0]

    return 1;
 80002d4:	2301      	movs	r3, #1
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop

080002e0 <LIS3DH_WriteReg>:
*			: I2C or SPI writing function
* Input			: Register Address, Data to be written
* Output		: None
* Return		: None
*******************************************************************************/
u8_t LIS3DH_WriteReg(u8_t WriteAddr, u8_t Data) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	460a      	mov	r2, r1
 80002ea:	71fb      	strb	r3, [r7, #7]
 80002ec:	4613      	mov	r3, r2
 80002ee:	71bb      	strb	r3, [r7, #6]

    //To be completed with either I2c or SPI writing function
    //i.e. SPI_Mems_Write_Reg(WriteAddr, Data);

    _i2c_xfer (0, WriteAddr, Data, 0);
 80002f0:	79ba      	ldrb	r2, [r7, #6]
 80002f2:	79f9      	ldrb	r1, [r7, #7]
 80002f4:	2300      	movs	r3, #0
 80002f6:	2000      	movs	r0, #0
 80002f8:	f000 fe8e 	bl	8001018 <_i2c_xfer>

    return 1;
 80002fc:	2301      	movs	r3, #1
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop

08000308 <LIS3DH_SetODR>:
* Description    : Sets LIS3DH Output Data Rate
* Input          : Output Data Rate
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetODR(LIS3DH_ODR_t ov) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8000312:	f107 030f 	add.w	r3, r7, #15
 8000316:	4619      	mov	r1, r3
 8000318:	2020      	movs	r0, #32
 800031a:	f7ff ffcb 	bl	80002b4 <LIS3DH_ReadReg>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d101      	bne.n	8000328 <LIS3DH_SetODR+0x20>
        return MEMS_ERROR;
 8000324:	2300      	movs	r3, #0
 8000326:	e018      	b.n	800035a <LIS3DH_SetODR+0x52>

    value &= 0x0f;
 8000328:	7bfb      	ldrb	r3, [r7, #15]
 800032a:	f003 030f 	and.w	r3, r3, #15
 800032e:	b2db      	uxtb	r3, r3
 8000330:	73fb      	strb	r3, [r7, #15]
    value |= ov<<LIS3DH_ODR_BIT;
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	011b      	lsls	r3, r3, #4
 8000336:	b25a      	sxtb	r2, r3
 8000338:	7bfb      	ldrb	r3, [r7, #15]
 800033a:	b25b      	sxtb	r3, r3
 800033c:	4313      	orrs	r3, r2
 800033e:	b25b      	sxtb	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8000344:	7bfb      	ldrb	r3, [r7, #15]
 8000346:	4619      	mov	r1, r3
 8000348:	2020      	movs	r0, #32
 800034a:	f7ff ffc9 	bl	80002e0 <LIS3DH_WriteReg>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d101      	bne.n	8000358 <LIS3DH_SetODR+0x50>
        return MEMS_ERROR;
 8000354:	2300      	movs	r3, #0
 8000356:	e000      	b.n	800035a <LIS3DH_SetODR+0x52>

    return MEMS_SUCCESS;
 8000358:	2301      	movs	r3, #1
}
 800035a:	4618      	mov	r0, r3
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop

08000364 <LIS3DH_SetTemperature>:
* Output         : None
* Note           : For Read Temperature by LIS3DH_OUT_AUX_3, LIS3DH_SetADCAux and LIS3DH_SetBDU
				   functions must be ENABLE
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetTemperature(State_t state) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
 800036e:	f107 030f 	add.w	r3, r7, #15
 8000372:	4619      	mov	r1, r3
 8000374:	201f      	movs	r0, #31
 8000376:	f7ff ff9d 	bl	80002b4 <LIS3DH_ReadReg>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d101      	bne.n	8000384 <LIS3DH_SetTemperature+0x20>
        return MEMS_ERROR;
 8000380:	2300      	movs	r3, #0
 8000382:	e018      	b.n	80003b6 <LIS3DH_SetTemperature+0x52>

    value &= 0xBF;
 8000384:	7bfb      	ldrb	r3, [r7, #15]
 8000386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800038a:	b2db      	uxtb	r3, r3
 800038c:	73fb      	strb	r3, [r7, #15]
    value |= state<<LIS3DH_TEMP_EN;
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	019b      	lsls	r3, r3, #6
 8000392:	b25a      	sxtb	r2, r3
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	b25b      	sxtb	r3, r3
 8000398:	4313      	orrs	r3, r2
 800039a:	b25b      	sxtb	r3, r3
 800039c:	b2db      	uxtb	r3, r3
 800039e:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	4619      	mov	r1, r3
 80003a4:	201f      	movs	r0, #31
 80003a6:	f7ff ff9b 	bl	80002e0 <LIS3DH_WriteReg>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d101      	bne.n	80003b4 <LIS3DH_SetTemperature+0x50>
        return MEMS_ERROR;
 80003b0:	2300      	movs	r3, #0
 80003b2:	e000      	b.n	80003b6 <LIS3DH_SetTemperature+0x52>

    return MEMS_SUCCESS;
 80003b4:	2301      	movs	r3, #1
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop

080003c0 <LIS3DH_SetADCAux>:
* Description    : Sets LIS3DH Output ADC
* Input          : MEMS_ENABLE, MEMS_DISABLE
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetADCAux(State_t state) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
 80003ca:	f107 030f 	add.w	r3, r7, #15
 80003ce:	4619      	mov	r1, r3
 80003d0:	201f      	movs	r0, #31
 80003d2:	f7ff ff6f 	bl	80002b4 <LIS3DH_ReadReg>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d101      	bne.n	80003e0 <LIS3DH_SetADCAux+0x20>
        return MEMS_ERROR;
 80003dc:	2300      	movs	r3, #0
 80003de:	e018      	b.n	8000412 <LIS3DH_SetADCAux+0x52>

    value &= 0x7F;
 80003e0:	7bfb      	ldrb	r3, [r7, #15]
 80003e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	73fb      	strb	r3, [r7, #15]
    value |= state<<LIS3DH_ADC_PD;
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	01db      	lsls	r3, r3, #7
 80003ee:	b25a      	sxtb	r2, r3
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	b25b      	sxtb	r3, r3
 80003f4:	4313      	orrs	r3, r2
 80003f6:	b25b      	sxtb	r3, r3
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	4619      	mov	r1, r3
 8000400:	201f      	movs	r0, #31
 8000402:	f7ff ff6d 	bl	80002e0 <LIS3DH_WriteReg>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d101      	bne.n	8000410 <LIS3DH_SetADCAux+0x50>
        return MEMS_ERROR;
 800040c:	2300      	movs	r3, #0
 800040e:	e000      	b.n	8000412 <LIS3DH_SetADCAux+0x52>

    return MEMS_SUCCESS;
 8000410:	2301      	movs	r3, #1
}
 8000412:	4618      	mov	r0, r3
 8000414:	3710      	adds	r7, #16
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop

0800041c <LIS3DH_GetTempRaw>:
* Description    : Read the Temperature Values by AUX Output Registers OUT_3_H
* Input          : Buffer to empty
* Output         : Temperature Values Registers buffer
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_GetTempRaw(i8_t* buff) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
    u8_t valueL;
    u8_t valueH;

    if( !LIS3DH_ReadReg(LIS3DH_OUT_3_L, &valueL) )
 8000424:	f107 030f 	add.w	r3, r7, #15
 8000428:	4619      	mov	r1, r3
 800042a:	200c      	movs	r0, #12
 800042c:	f7ff ff42 	bl	80002b4 <LIS3DH_ReadReg>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d101      	bne.n	800043a <LIS3DH_GetTempRaw+0x1e>
        return MEMS_ERROR;
 8000436:	2300      	movs	r3, #0
 8000438:	e00f      	b.n	800045a <LIS3DH_GetTempRaw+0x3e>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_3_H, &valueH) )
 800043a:	f107 030e 	add.w	r3, r7, #14
 800043e:	4619      	mov	r1, r3
 8000440:	200d      	movs	r0, #13
 8000442:	f7ff ff37 	bl	80002b4 <LIS3DH_ReadReg>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d101      	bne.n	8000450 <LIS3DH_GetTempRaw+0x34>
        return MEMS_ERROR;
 800044c:	2300      	movs	r3, #0
 800044e:	e004      	b.n	800045a <LIS3DH_GetTempRaw+0x3e>

    *buff = (i8_t)( valueH );
 8000450:	7bbb      	ldrb	r3, [r7, #14]
 8000452:	b25a      	sxtb	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	701a      	strb	r2, [r3, #0]

    return MEMS_SUCCESS;
 8000458:	2301      	movs	r3, #1
}
 800045a:	4618      	mov	r0, r3
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop

08000464 <LIS3DH_SetMode>:
* Description    : Sets LIS3DH Operating Mode
* Input          : Modality (LIS3DH_NORMAL, LIS3DH_LOW_POWER, LIS3DH_POWER_DOWN)
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetMode(LIS3DH_Mode_t md) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
    u8_t value;
    u8_t value2;
    static   u8_t ODR_old_value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 800046e:	f107 030f 	add.w	r3, r7, #15
 8000472:	4619      	mov	r1, r3
 8000474:	2020      	movs	r0, #32
 8000476:	f7ff ff1d 	bl	80002b4 <LIS3DH_ReadReg>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d101      	bne.n	8000484 <LIS3DH_SetMode+0x20>
        return MEMS_ERROR;
 8000480:	2300      	movs	r3, #0
 8000482:	e066      	b.n	8000552 <LIS3DH_SetMode+0xee>

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value2) )
 8000484:	f107 030e 	add.w	r3, r7, #14
 8000488:	4619      	mov	r1, r3
 800048a:	2023      	movs	r0, #35	; 0x23
 800048c:	f7ff ff12 	bl	80002b4 <LIS3DH_ReadReg>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d101      	bne.n	800049a <LIS3DH_SetMode+0x36>
        return MEMS_ERROR;
 8000496:	2300      	movs	r3, #0
 8000498:	e05b      	b.n	8000552 <LIS3DH_SetMode+0xee>

    if((value & 0xF0)==0)
 800049a:	7bfb      	ldrb	r3, [r7, #15]
 800049c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d10b      	bne.n	80004bc <LIS3DH_SetMode+0x58>
        value = value | (ODR_old_value & 0xF0); //if it comes from POWERDOWN
 80004a4:	4b2d      	ldr	r3, [pc, #180]	; (800055c <LIS3DH_SetMode+0xf8>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	b25b      	sxtb	r3, r3
 80004aa:	f023 030f 	bic.w	r3, r3, #15
 80004ae:	b25a      	sxtb	r2, r3
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
 80004b2:	b25b      	sxtb	r3, r3
 80004b4:	4313      	orrs	r3, r2
 80004b6:	b25b      	sxtb	r3, r3
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	73fb      	strb	r3, [r7, #15]

    switch(md) {
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d01e      	beq.n	8000500 <LIS3DH_SetMode+0x9c>
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d00a      	beq.n	80004dc <LIS3DH_SetMode+0x78>
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d12c      	bne.n	8000524 <LIS3DH_SetMode+0xc0>

    case LIS3DH_POWER_DOWN:
        ODR_old_value = value;
 80004ca:	7bfa      	ldrb	r2, [r7, #15]
 80004cc:	4b23      	ldr	r3, [pc, #140]	; (800055c <LIS3DH_SetMode+0xf8>)
 80004ce:	701a      	strb	r2, [r3, #0]
        value &= 0x0F;
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	f003 030f 	and.w	r3, r3, #15
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	73fb      	strb	r3, [r7, #15]
        break;
 80004da:	e025      	b.n	8000528 <LIS3DH_SetMode+0xc4>

    case LIS3DH_NORMAL:
        value &= 0xF7;
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
 80004de:	f023 0308 	bic.w	r3, r3, #8
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	73fb      	strb	r3, [r7, #15]
        value |= (MEMS_RESET<<LIS3DH_LPEN);
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 80004ea:	7bbb      	ldrb	r3, [r7, #14]
 80004ec:	f023 0308 	bic.w	r3, r3, #8
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_SET<<LIS3DH_HR);   //set HighResolution_BIT
 80004f4:	7bbb      	ldrb	r3, [r7, #14]
 80004f6:	f043 0308 	orr.w	r3, r3, #8
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	73bb      	strb	r3, [r7, #14]
        break;
 80004fe:	e013      	b.n	8000528 <LIS3DH_SetMode+0xc4>

    case LIS3DH_LOW_POWER:
        value &= 0xF7;
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	f023 0308 	bic.w	r3, r3, #8
 8000506:	b2db      	uxtb	r3, r3
 8000508:	73fb      	strb	r3, [r7, #15]
        value |=  (MEMS_SET<<LIS3DH_LPEN);
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	f043 0308 	orr.w	r3, r3, #8
 8000510:	b2db      	uxtb	r3, r3
 8000512:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 8000514:	7bbb      	ldrb	r3, [r7, #14]
 8000516:	f023 0308 	bic.w	r3, r3, #8
 800051a:	b2db      	uxtb	r3, r3
 800051c:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_RESET<<LIS3DH_HR); //reset HighResolution_BIT
 800051e:	7bbb      	ldrb	r3, [r7, #14]
 8000520:	73bb      	strb	r3, [r7, #14]
        break;
 8000522:	e001      	b.n	8000528 <LIS3DH_SetMode+0xc4>

    default:
        return MEMS_ERROR;
 8000524:	2300      	movs	r3, #0
 8000526:	e014      	b.n	8000552 <LIS3DH_SetMode+0xee>
    }

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	4619      	mov	r1, r3
 800052c:	2020      	movs	r0, #32
 800052e:	f7ff fed7 	bl	80002e0 <LIS3DH_WriteReg>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d101      	bne.n	800053c <LIS3DH_SetMode+0xd8>
        return MEMS_ERROR;
 8000538:	2300      	movs	r3, #0
 800053a:	e00a      	b.n	8000552 <LIS3DH_SetMode+0xee>

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value2) )
 800053c:	7bbb      	ldrb	r3, [r7, #14]
 800053e:	4619      	mov	r1, r3
 8000540:	2023      	movs	r0, #35	; 0x23
 8000542:	f7ff fecd 	bl	80002e0 <LIS3DH_WriteReg>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d101      	bne.n	8000550 <LIS3DH_SetMode+0xec>
        return MEMS_ERROR;
 800054c:	2300      	movs	r3, #0
 800054e:	e000      	b.n	8000552 <LIS3DH_SetMode+0xee>

    return MEMS_SUCCESS;
 8000550:	2301      	movs	r3, #1
}
 8000552:	4618      	mov	r0, r3
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200009e0 	.word	0x200009e0

08000560 <LIS3DH_SetAxis>:
* Input          : LIS3DH_X_ENABLE/DISABLE | LIS3DH_Y_ENABLE/DISABLE | LIS3DH_Z_ENABLE/DISABLE
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetAxis(LIS3DH_Axis_t axis) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 800056a:	f107 030f 	add.w	r3, r7, #15
 800056e:	4619      	mov	r1, r3
 8000570:	2020      	movs	r0, #32
 8000572:	f7ff fe9f 	bl	80002b4 <LIS3DH_ReadReg>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d101      	bne.n	8000580 <LIS3DH_SetAxis+0x20>
        return MEMS_ERROR;
 800057c:	2300      	movs	r3, #0
 800057e:	e017      	b.n	80005b0 <LIS3DH_SetAxis+0x50>
    value &= 0xF8;
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	f023 0307 	bic.w	r3, r3, #7
 8000586:	b2db      	uxtb	r3, r3
 8000588:	73fb      	strb	r3, [r7, #15]
    value |= (0x07 & axis);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f003 0307 	and.w	r3, r3, #7
 8000590:	b2da      	uxtb	r2, r3
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	4313      	orrs	r3, r2
 8000596:	b2db      	uxtb	r3, r3
 8000598:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	4619      	mov	r1, r3
 800059e:	2020      	movs	r0, #32
 80005a0:	f7ff fe9e 	bl	80002e0 <LIS3DH_WriteReg>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d101      	bne.n	80005ae <LIS3DH_SetAxis+0x4e>
        return MEMS_ERROR;
 80005aa:	2300      	movs	r3, #0
 80005ac:	e000      	b.n	80005b0 <LIS3DH_SetAxis+0x50>

    return MEMS_SUCCESS;
 80005ae:	2301      	movs	r3, #1
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <LIS3DH_SetFullScale>:
* Description    : Sets the LIS3DH FullScale
* Input          : LIS3DH_FULLSCALE_2/LIS3DH_FULLSCALE_4/LIS3DH_FULLSCALE_8/LIS3DH_FULLSCALE_16
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetFullScale(LIS3DH_Fullscale_t fs) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 80005c2:	f107 030f 	add.w	r3, r7, #15
 80005c6:	4619      	mov	r1, r3
 80005c8:	2023      	movs	r0, #35	; 0x23
 80005ca:	f7ff fe73 	bl	80002b4 <LIS3DH_ReadReg>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d101      	bne.n	80005d8 <LIS3DH_SetFullScale+0x20>
        return MEMS_ERROR;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e018      	b.n	800060a <LIS3DH_SetFullScale+0x52>

    value &= 0xCF;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]
    value |= (fs<<LIS3DH_FS);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	b25a      	sxtb	r2, r3
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	b25b      	sxtb	r3, r3
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	4619      	mov	r1, r3
 80005f8:	2023      	movs	r0, #35	; 0x23
 80005fa:	f7ff fe71 	bl	80002e0 <LIS3DH_WriteReg>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d101      	bne.n	8000608 <LIS3DH_SetFullScale+0x50>
        return MEMS_ERROR;
 8000604:	2300      	movs	r3, #0
 8000606:	e000      	b.n	800060a <LIS3DH_SetFullScale+0x52>

    return MEMS_SUCCESS;
 8000608:	2301      	movs	r3, #1
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop

08000614 <LIS3DH_SetBDU>:
* Description    : Enable/Disable Block Data Update Functionality
* Input          : ENABLE/DISABLE
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetBDU(State_t bdu) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 800061e:	f107 030f 	add.w	r3, r7, #15
 8000622:	4619      	mov	r1, r3
 8000624:	2023      	movs	r0, #35	; 0x23
 8000626:	f7ff fe45 	bl	80002b4 <LIS3DH_ReadReg>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d101      	bne.n	8000634 <LIS3DH_SetBDU+0x20>
        return MEMS_ERROR;
 8000630:	2300      	movs	r3, #0
 8000632:	e018      	b.n	8000666 <LIS3DH_SetBDU+0x52>

    value &= 0x7F;
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800063a:	b2db      	uxtb	r3, r3
 800063c:	73fb      	strb	r3, [r7, #15]
    value |= (bdu<<LIS3DH_BDU);
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	01db      	lsls	r3, r3, #7
 8000642:	b25a      	sxtb	r2, r3
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	b25b      	sxtb	r3, r3
 8000648:	4313      	orrs	r3, r2
 800064a:	b25b      	sxtb	r3, r3
 800064c:	b2db      	uxtb	r3, r3
 800064e:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	4619      	mov	r1, r3
 8000654:	2023      	movs	r0, #35	; 0x23
 8000656:	f7ff fe43 	bl	80002e0 <LIS3DH_WriteReg>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d101      	bne.n	8000664 <LIS3DH_SetBDU+0x50>
        return MEMS_ERROR;
 8000660:	2300      	movs	r3, #0
 8000662:	e000      	b.n	8000666 <LIS3DH_SetBDU+0x52>

    return MEMS_SUCCESS;
 8000664:	2301      	movs	r3, #1
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop

08000670 <LIS3DH_SetIntConfiguration>:
* Input          : LIS3DH_INT1_AND/OR | LIS3DH_INT1_ZHIE_ENABLE/DISABLE | LIS3DH_INT1_ZLIE_ENABLE/DISABLE...
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntConfiguration(LIS3DH_Int1Conf_t ic) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 800067a:	f107 030f 	add.w	r3, r7, #15
 800067e:	4619      	mov	r1, r3
 8000680:	2030      	movs	r0, #48	; 0x30
 8000682:	f7ff fe17 	bl	80002b4 <LIS3DH_ReadReg>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d101      	bne.n	8000690 <LIS3DH_SetIntConfiguration+0x20>
        return MEMS_ERROR;
 800068c:	2300      	movs	r3, #0
 800068e:	e014      	b.n	80006ba <LIS3DH_SetIntConfiguration+0x4a>

    value &= 0x40;
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000696:	b2db      	uxtb	r3, r3
 8000698:	73fb      	strb	r3, [r7, #15]
    value |= ic;
 800069a:	7bfa      	ldrb	r2, [r7, #15]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	4313      	orrs	r3, r2
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	4619      	mov	r1, r3
 80006a8:	2030      	movs	r0, #48	; 0x30
 80006aa:	f7ff fe19 	bl	80002e0 <LIS3DH_WriteReg>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d101      	bne.n	80006b8 <LIS3DH_SetIntConfiguration+0x48>
        return MEMS_ERROR;
 80006b4:	2300      	movs	r3, #0
 80006b6:	e000      	b.n	80006ba <LIS3DH_SetIntConfiguration+0x4a>

    return MEMS_SUCCESS;
 80006b8:	2301      	movs	r3, #1
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop

080006c4 <LIS3DH_SetIntMode>:
* Input          : LIS3DH_INT_MODE_OR, LIS3DH_INT_MODE_6D_MOVEMENT, LIS3DH_INT_MODE_AND,
				   LIS3DH_INT_MODE_6D_POSITION
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntMode(LIS3DH_Int1Mode_t int_mode) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 80006ce:	f107 030f 	add.w	r3, r7, #15
 80006d2:	4619      	mov	r1, r3
 80006d4:	2030      	movs	r0, #48	; 0x30
 80006d6:	f7ff fded 	bl	80002b4 <LIS3DH_ReadReg>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d101      	bne.n	80006e4 <LIS3DH_SetIntMode+0x20>
        return MEMS_ERROR;
 80006e0:	2300      	movs	r3, #0
 80006e2:	e018      	b.n	8000716 <LIS3DH_SetIntMode+0x52>

    value &= 0x3F;
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	73fb      	strb	r3, [r7, #15]
    value |= (int_mode<<LIS3DH_INT_6D);
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	019b      	lsls	r3, r3, #6
 80006f2:	b25a      	sxtb	r2, r3
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	4313      	orrs	r3, r2
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	4619      	mov	r1, r3
 8000704:	2030      	movs	r0, #48	; 0x30
 8000706:	f7ff fdeb 	bl	80002e0 <LIS3DH_WriteReg>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <LIS3DH_SetIntMode+0x50>
        return MEMS_ERROR;
 8000710:	2300      	movs	r3, #0
 8000712:	e000      	b.n	8000716 <LIS3DH_SetIntMode+0x52>

    return MEMS_SUCCESS;
 8000714:	2301      	movs	r3, #1
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop

08000720 <LIS3DH_Get6DPosition>:
* Description    : 6D, 4D Interrupt Position Detect
* Input          : Byte to empty by POSITION_6D_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_Get6DPosition(u8_t* val) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_SRC, &value) )
 8000728:	f107 030f 	add.w	r3, r7, #15
 800072c:	4619      	mov	r1, r3
 800072e:	2031      	movs	r0, #49	; 0x31
 8000730:	f7ff fdc0 	bl	80002b4 <LIS3DH_ReadReg>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d101      	bne.n	800073e <LIS3DH_Get6DPosition+0x1e>
        return MEMS_ERROR;
 800073a:	2300      	movs	r3, #0
 800073c:	e065      	b.n	800080a <LIS3DH_Get6DPosition+0xea>

    value &= 0x7F;
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000744:	b2db      	uxtb	r3, r3
 8000746:	73fb      	strb	r3, [r7, #15]

    switch (value) {
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	3b41      	subs	r3, #65	; 0x41
 800074c:	2b1f      	cmp	r3, #31
 800074e:	d85b      	bhi.n	8000808 <LIS3DH_Get6DPosition+0xe8>
 8000750:	a201      	add	r2, pc, #4	; (adr r2, 8000758 <LIS3DH_Get6DPosition+0x38>)
 8000752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000756:	bf00      	nop
 8000758:	080007e9 	.word	0x080007e9
 800075c:	080007e1 	.word	0x080007e1
 8000760:	08000809 	.word	0x08000809
 8000764:	080007d9 	.word	0x080007d9
 8000768:	08000809 	.word	0x08000809
 800076c:	08000809 	.word	0x08000809
 8000770:	08000809 	.word	0x08000809
 8000774:	080007f1 	.word	0x080007f1
 8000778:	08000809 	.word	0x08000809
 800077c:	08000809 	.word	0x08000809
 8000780:	08000809 	.word	0x08000809
 8000784:	08000809 	.word	0x08000809
 8000788:	08000809 	.word	0x08000809
 800078c:	08000809 	.word	0x08000809
 8000790:	08000809 	.word	0x08000809
 8000794:	08000801 	.word	0x08000801
 8000798:	08000809 	.word	0x08000809
 800079c:	08000809 	.word	0x08000809
 80007a0:	08000809 	.word	0x08000809
 80007a4:	08000809 	.word	0x08000809
 80007a8:	08000809 	.word	0x08000809
 80007ac:	08000809 	.word	0x08000809
 80007b0:	08000809 	.word	0x08000809
 80007b4:	08000809 	.word	0x08000809
 80007b8:	08000809 	.word	0x08000809
 80007bc:	08000809 	.word	0x08000809
 80007c0:	08000809 	.word	0x08000809
 80007c4:	08000809 	.word	0x08000809
 80007c8:	08000809 	.word	0x08000809
 80007cc:	08000809 	.word	0x08000809
 80007d0:	08000809 	.word	0x08000809
 80007d4:	080007f9 	.word	0x080007f9
    case LIS3DH_UP_SX:
        *val = LIS3DH_UP_SX;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2244      	movs	r2, #68	; 0x44
 80007dc:	701a      	strb	r2, [r3, #0]
        break;
 80007de:	e013      	b.n	8000808 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_UP_DX:
        *val = LIS3DH_UP_DX;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2242      	movs	r2, #66	; 0x42
 80007e4:	701a      	strb	r2, [r3, #0]
        break;
 80007e6:	e00f      	b.n	8000808 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_SX:
        *val = LIS3DH_DW_SX;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2241      	movs	r2, #65	; 0x41
 80007ec:	701a      	strb	r2, [r3, #0]
        break;
 80007ee:	e00b      	b.n	8000808 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_DX:
        *val = LIS3DH_DW_DX;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2248      	movs	r2, #72	; 0x48
 80007f4:	701a      	strb	r2, [r3, #0]
        break;
 80007f6:	e007      	b.n	8000808 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_TOP:
        *val = LIS3DH_TOP;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2260      	movs	r2, #96	; 0x60
 80007fc:	701a      	strb	r2, [r3, #0]
        break;
 80007fe:	e003      	b.n	8000808 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_BOTTOM:
        *val = LIS3DH_BOTTOM;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2250      	movs	r2, #80	; 0x50
 8000804:	701a      	strb	r2, [r3, #0]
        break;
 8000806:	bf00      	nop
    }

    return MEMS_SUCCESS;
 8000808:	2301      	movs	r3, #1
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop

08000814 <LIS3DH_SetInt1Threshold>:
* Description    : Sets Interrupt 1 Threshold
* Input          : Threshold = [0,31]
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetInt1Threshold(u8_t ths) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
    if (ths > 127)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	da01      	bge.n	800082a <LIS3DH_SetInt1Threshold+0x16>
        return MEMS_ERROR;
 8000826:	2300      	movs	r3, #0
 8000828:	e00a      	b.n	8000840 <LIS3DH_SetInt1Threshold+0x2c>

    if( !LIS3DH_WriteReg(LIS3DH_INT1_THS, ths) )
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	4619      	mov	r1, r3
 800082e:	2032      	movs	r0, #50	; 0x32
 8000830:	f7ff fd56 	bl	80002e0 <LIS3DH_WriteReg>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d101      	bne.n	800083e <LIS3DH_SetInt1Threshold+0x2a>
        return MEMS_ERROR;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <LIS3DH_SetInt1Threshold+0x2c>

    return MEMS_SUCCESS;
 800083e:	2301      	movs	r3, #1
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <LIS3DH_GetAccAxesRaw>:
* Description    : Read the Acceleration Values Output Registers
* Input          : buffer to empity by AxesRaw_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_GetAccAxesRaw(AxesRaw_t* buff) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
    i16_t value;
    u8_t *valueL = (u8_t *)(&value);
 8000850:	f107 030e 	add.w	r3, r7, #14
 8000854:	617b      	str	r3, [r7, #20]
    u8_t *valueH = ((u8_t *)(&value)+1);
 8000856:	f107 030e 	add.w	r3, r7, #14
 800085a:	3301      	adds	r3, #1
 800085c:	613b      	str	r3, [r7, #16]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_L, valueL) )
 800085e:	6979      	ldr	r1, [r7, #20]
 8000860:	2028      	movs	r0, #40	; 0x28
 8000862:	f7ff fd27 	bl	80002b4 <LIS3DH_ReadReg>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d101      	bne.n	8000870 <LIS3DH_GetAccAxesRaw+0x28>
        return MEMS_ERROR;
 800086c:	2300      	movs	r3, #0
 800086e:	e039      	b.n	80008e4 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_H, valueH) )
 8000870:	6939      	ldr	r1, [r7, #16]
 8000872:	2029      	movs	r0, #41	; 0x29
 8000874:	f7ff fd1e 	bl	80002b4 <LIS3DH_ReadReg>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d101      	bne.n	8000882 <LIS3DH_GetAccAxesRaw+0x3a>
        return MEMS_ERROR;
 800087e:	2300      	movs	r3, #0
 8000880:	e030      	b.n	80008e4 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_X = value;
 8000882:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	801a      	strh	r2, [r3, #0]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_L, valueL) )
 800088a:	6979      	ldr	r1, [r7, #20]
 800088c:	202a      	movs	r0, #42	; 0x2a
 800088e:	f7ff fd11 	bl	80002b4 <LIS3DH_ReadReg>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d101      	bne.n	800089c <LIS3DH_GetAccAxesRaw+0x54>
        return MEMS_ERROR;
 8000898:	2300      	movs	r3, #0
 800089a:	e023      	b.n	80008e4 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_H, valueH) )
 800089c:	6939      	ldr	r1, [r7, #16]
 800089e:	202b      	movs	r0, #43	; 0x2b
 80008a0:	f7ff fd08 	bl	80002b4 <LIS3DH_ReadReg>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d101      	bne.n	80008ae <LIS3DH_GetAccAxesRaw+0x66>
        return MEMS_ERROR;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e01a      	b.n	80008e4 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Y = value;
 80008ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	805a      	strh	r2, [r3, #2]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_L, valueL) )
 80008b6:	6979      	ldr	r1, [r7, #20]
 80008b8:	202c      	movs	r0, #44	; 0x2c
 80008ba:	f7ff fcfb 	bl	80002b4 <LIS3DH_ReadReg>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d101      	bne.n	80008c8 <LIS3DH_GetAccAxesRaw+0x80>
        return MEMS_ERROR;
 80008c4:	2300      	movs	r3, #0
 80008c6:	e00d      	b.n	80008e4 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_H, valueH) )
 80008c8:	6939      	ldr	r1, [r7, #16]
 80008ca:	202d      	movs	r0, #45	; 0x2d
 80008cc:	f7ff fcf2 	bl	80002b4 <LIS3DH_ReadReg>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d101      	bne.n	80008da <LIS3DH_GetAccAxesRaw+0x92>
        return MEMS_ERROR;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e004      	b.n	80008e4 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Z = value;
 80008da:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	809a      	strh	r2, [r3, #4]

    return MEMS_SUCCESS;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	db0b      	blt.n	8000916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008fe:	4909      	ldr	r1, [pc, #36]	; (8000924 <__NVIC_EnableIRQ+0x38>)
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	095b      	lsrs	r3, r3, #5
 8000906:	79fa      	ldrb	r2, [r7, #7]
 8000908:	f002 021f 	and.w	r2, r2, #31
 800090c:	2001      	movs	r0, #1
 800090e:	fa00 f202 	lsl.w	r2, r0, r2
 8000912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e100 	.word	0xe000e100

08000928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	db0a      	blt.n	8000952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093c:	490d      	ldr	r1, [pc, #52]	; (8000974 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	0092      	lsls	r2, r2, #2
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	440b      	add	r3, r1
 800094c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000950:	e00a      	b.n	8000968 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	4909      	ldr	r1, [pc, #36]	; (8000978 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	683a      	ldr	r2, [r7, #0]
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	0092      	lsls	r2, r2, #2
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	440b      	add	r3, r1
 8000966:	761a      	strb	r2, [r3, #24]
  }
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000e100 	.word	0xe000e100
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	460b      	mov	r3, r1
 8000986:	70fb      	strb	r3, [r7, #3]
 8000988:	4613      	mov	r3, r2
 800098a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800098c:	78f8      	ldrb	r0, [r7, #3]
 800098e:	78fb      	ldrb	r3, [r7, #3]
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	3306      	adds	r3, #6
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800099e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80009a0:	431a      	orrs	r2, r3
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	1d83      	adds	r3, r0, #6
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	440b      	add	r3, r1
 80009aa:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80009ca:	b2db      	uxtb	r3, r3
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	431a      	orrs	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	bf14      	ite	ne
 8000a16:	2301      	movne	r3, #1
 8000a18:	2300      	moveq	r3, #0
 8000a1a:	b2db      	uxtb	r3, r3
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f023 030f 	bic.w	r3, r3, #15
 8000a38:	f043 0202 	orr.w	r2, r3, #2
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
 8000a5c:	78f8      	ldrb	r0, [r7, #3]
 8000a5e:	78fb      	ldrb	r3, [r7, #3]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	3306      	adds	r3, #6
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f023 0250 	bic.w	r2, r3, #80	; 0x50
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	1d83      	adds	r3, r0, #6
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	440b      	add	r3, r1
 8000a76:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000a78:	78ba      	ldrb	r2, [r7, #2]
 8000a7a:	78fb      	ldrb	r3, [r7, #3]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ff7c 	bl	800097c <XMC_USIC_CH_SetInputSource>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_init_uart0_ch0>:
    .stop_bits = 1U,
    .baudrate = 115200U
};
/****************************************************************** FUNCTIONS */
void _init_uart0_ch0()
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
    /* USIC channels initialization */
    XMC_UART_CH_Init (XMC_UART0_CH0, &uart_config);
 8000a90:	491c      	ldr	r1, [pc, #112]	; (8000b04 <_init_uart0_ch0+0x78>)
 8000a92:	481d      	ldr	r0, [pc, #116]	; (8000b08 <_init_uart0_ch0+0x7c>)
 8000a94:	f001 f8c0 	bl	8001c18 <XMC_UART_CH_Init>

    XMC_UART_CH_SetInputSource (XMC_UART0_CH0, XMC_UART_CH_INPUT_RXD,
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	481a      	ldr	r0, [pc, #104]	; (8000b08 <_init_uart0_ch0+0x7c>)
 8000a9e:	f7ff ffd5 	bl	8000a4c <XMC_UART_CH_SetInputSource>
    /* FIFOs initialization for both channels:
     *  8 entries for TxFIFO from point 0, LIMIT=1
     *  8 entries for RxFIFO from point 8, LIMIT=7 (SRBI is set if all 8*data have
     *                                              been received)
     *  */
    XMC_USIC_CH_TXFIFO_Configure (XMC_UART0_CH0, 0, XMC_USIC_CH_FIFO_SIZE_8WORDS, TX_FIFO_INITIAL_LIMIT);
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	2203      	movs	r2, #3
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4817      	ldr	r0, [pc, #92]	; (8000b08 <_init_uart0_ch0+0x7c>)
 8000aaa:	f001 fbdf 	bl	800226c <XMC_USIC_CH_TXFIFO_Configure>
    XMC_USIC_CH_RXFIFO_Configure (XMC_UART0_CH0, 8, XMC_USIC_CH_FIFO_SIZE_8WORDS, RX_FIFO_INITIAL_LIMIT);
 8000aae:	2301      	movs	r3, #1
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	4814      	ldr	r0, [pc, #80]	; (8000b08 <_init_uart0_ch0+0x7c>)
 8000ab6:	f001 fc01 	bl	80022bc <XMC_USIC_CH_RXFIFO_Configure>

    /* Enabling events for TX FIFO and RX FIFO */
    XMC_USIC_CH_RXFIFO_EnableEvent (XMC_UART0_CH0,
 8000aba:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8000abe:	4812      	ldr	r0, [pc, #72]	; (8000b08 <_init_uart0_ch0+0x7c>)
 8000ac0:	f7ff ff8a 	bl	80009d8 <XMC_USIC_CH_RXFIFO_EnableEvent>
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE);

    /* Connecting the previously enabled events to a Service Request line number */
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	480f      	ldr	r0, [pc, #60]	; (8000b08 <_init_uart0_ch0+0x7c>)
 8000aca:	f001 fc21 	bl	8002310 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2113      	movs	r1, #19
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <_init_uart0_ch0+0x7c>)
 8000ad4:	f001 fc1c 	bl	8002310 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>

    /* Start USIC operation as UART */
    XMC_UART_CH_Start (XMC_UART0_CH0);
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <_init_uart0_ch0+0x7c>)
 8000ada:	f7ff ffa5 	bl	8000a28 <XMC_UART_CH_Start>

    /*Initialization of the necessary ports*/
    XMC_GPIO_Init (UART_TX, &uart_tx);
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <_init_uart0_ch0+0x80>)
 8000ae0:	2105      	movs	r1, #5
 8000ae2:	480b      	ldr	r0, [pc, #44]	; (8000b10 <_init_uart0_ch0+0x84>)
 8000ae4:	f000 ffd8 	bl	8001a98 <XMC_GPIO_Init>
    XMC_GPIO_Init (UART_RX, &uart_rx);
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <_init_uart0_ch0+0x88>)
 8000aea:	2104      	movs	r1, #4
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <_init_uart0_ch0+0x84>)
 8000aee:	f000 ffd3 	bl	8001a98 <XMC_GPIO_Init>

    /* Configuring priority and enabling NVIC IRQ for the defined service request
    line number */
    NVIC_SetPriority (USIC0_0_IRQn, 63U);
 8000af2:	213f      	movs	r1, #63	; 0x3f
 8000af4:	2054      	movs	r0, #84	; 0x54
 8000af6:	f7ff ff17 	bl	8000928 <__NVIC_SetPriority>
    NVIC_EnableIRQ (USIC0_0_IRQn);
 8000afa:	2054      	movs	r0, #84	; 0x54
 8000afc:	f7ff fef6 	bl	80008ec <__NVIC_EnableIRQ>

    return;
 8000b00:	bf00      	nop
}
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000000c 	.word	0x2000000c
 8000b08:	40030000 	.word	0x40030000
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	48028100 	.word	0x48028100
 8000b14:	20000a24 	.word	0x20000a24

08000b18 <USIC0_0_IRQHandler>:

void USIC0_0_IRQHandler (void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	71fb      	strb	r3, [r7, #7]

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 8000b22:	e01f      	b.n	8000b64 <USIC0_0_IRQHandler+0x4c>
        rx_tmp = XMC_UART_CH_GetReceivedData (XMC_UART0_CH0);
 8000b24:	4816      	ldr	r0, [pc, #88]	; (8000b80 <USIC0_0_IRQHandler+0x68>)
 8000b26:	f001 f8f5 	bl	8001d14 <XMC_UART_CH_GetReceivedData>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]

        if ( (rx_tmp != STRING_CR) && (!str_available)) {
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b0d      	cmp	r3, #13
 8000b32:	d011      	beq.n	8000b58 <USIC0_0_IRQHandler+0x40>
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <USIC0_0_IRQHandler+0x6c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	f083 0301 	eor.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d00a      	beq.n	8000b58 <USIC0_0_IRQHandler+0x40>
            rx_buffer[rx_ctr++] = rx_tmp;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <USIC0_0_IRQHandler+0x70>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	b2d1      	uxtb	r1, r2
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <USIC0_0_IRQHandler+0x70>)
 8000b4c:	7011      	strb	r1, [r2, #0]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <USIC0_0_IRQHandler+0x74>)
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	5453      	strb	r3, [r2, r1]
 8000b56:	e005      	b.n	8000b64 <USIC0_0_IRQHandler+0x4c>
        } else {
            rx_ctr = 0;
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <USIC0_0_IRQHandler+0x70>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
            str_available = true;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <USIC0_0_IRQHandler+0x6c>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
{
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <USIC0_0_IRQHandler+0x68>)
 8000b66:	f7ff ff4b 	bl	8000a00 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	f083 0301 	eor.w	r3, r3, #1
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1d6      	bne.n	8000b24 <USIC0_0_IRQHandler+0xc>
        } else {
            rx_ctr = 0;
            str_available = true;
        }
    }
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40030000 	.word	0x40030000
 8000b84:	200009e1 	.word	0x200009e1
 8000b88:	20000a30 	.word	0x20000a30
 8000b8c:	200009e4 	.word	0x200009e4

08000b90 <_uart_printf>:

    return 0;
}

uint8_t _uart_printf (char *fmt, ...)
{
 8000b90:	b40f      	push	{r0, r1, r2, r3}
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b0c2      	sub	sp, #264	; 0x108
 8000b96:	af00      	add	r7, sp, #0
    va_list arg_ptr;
    char buffer[BUFFER_SIZE_PRINTF];

    if (fmt == NULL)  {
 8000b98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d101      	bne.n	8000ba4 <_uart_printf+0x14>
        return ERR_OUT_OF_MEMORY;
 8000ba0:	2364      	movs	r3, #100	; 0x64
 8000ba2:	e010      	b.n	8000bc6 <_uart_printf+0x36>
    }

    va_start (arg_ptr, fmt);
 8000ba4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000ba8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    vsprintf (buffer, fmt, arg_ptr);
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000bb2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f004 fdaa 	bl	8005710 <vsprintf>
    va_end (arg_ptr);

    _uart_send_string (buffer);
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f80a 	bl	8000bd8 <_uart_send_string>
    return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bd2:	b004      	add	sp, #16
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <_uart_send_string>:

uint8_t _uart_send_string (char *str)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <_uart_send_string+0x12>
        return ERR_OUT_OF_MEMORY;
 8000be6:	2364      	movs	r3, #100	; 0x64
 8000be8:	e01d      	b.n	8000c26 <_uart_send_string+0x4e>
    }

    for (int i = 0; i < strlen (str); i++) {
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e012      	b.n	8000c16 <_uart_send_string+0x3e>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 8000bf0:	bf00      	nop
 8000bf2:	480f      	ldr	r0, [pc, #60]	; (8000c30 <_uart_send_string+0x58>)
 8000bf4:	f7ff fee0 	bl	80009b8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b80      	cmp	r3, #128	; 0x80
 8000bfc:	d0f9      	beq.n	8000bf2 <_uart_send_string+0x1a>
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	4413      	add	r3, r2
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4809      	ldr	r0, [pc, #36]	; (8000c30 <_uart_send_string+0x58>)
 8000c0c:	f001 f85c 	bl	8001cc8 <XMC_UART_CH_Transmit>
{
    if (str == NULL) {
        return ERR_OUT_OF_MEMORY;
    }

    for (int i = 0; i < strlen (str); i++) {
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3301      	adds	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f001 fd52 	bl	80026c0 <strlen>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8e5      	bhi.n	8000bf0 <_uart_send_string+0x18>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
    }
    return 0;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40030000 	.word	0x40030000

08000c34 <_uart_get_string>:

uint8_t _uart_get_string (char *str)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <_uart_get_string+0x12>
        return ERR_OUT_OF_MEMORY;
 8000c42:	2364      	movs	r3, #100	; 0x64
 8000c44:	e019      	b.n	8000c7a <_uart_get_string+0x46>
    }

    while (!str_available);
 8000c46:	bf00      	nop
 8000c48:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <_uart_get_string+0x50>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	f083 0301 	eor.w	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f8      	bne.n	8000c48 <_uart_get_string+0x14>
    memcpy (str, &rx_buffer, strlen (rx_buffer));
 8000c56:	480c      	ldr	r0, [pc, #48]	; (8000c88 <_uart_get_string+0x54>)
 8000c58:	f001 fd32 	bl	80026c0 <strlen>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4909      	ldr	r1, [pc, #36]	; (8000c88 <_uart_get_string+0x54>)
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f001 fbc4 	bl	80023f0 <memcpy>
    memset (&rx_buffer, 0x00, BUFFER_SIZE_RX);
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4806      	ldr	r0, [pc, #24]	; (8000c88 <_uart_get_string+0x54>)
 8000c6e:	f001 fc59 	bl	8002524 <memset>

    str_available = false;
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <_uart_get_string+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
    return 0;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200009e1 	.word	0x200009e1
 8000c88:	200009e4 	.word	0x200009e4

08000c8c <protocolComplete>:
#include "3Daccel_out_library.h"
#include "3Daccel_app.h"

uint8_t protocolComplete(int16_t position6D, int16_t positionX, int16_t positionY, int16_t positionZ, int8_t temperature)
{
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8e:	b0a5      	sub	sp, #148	; 0x94
 8000c90:	af06      	add	r7, sp, #24
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	80fb      	strh	r3, [r7, #6]
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80bb      	strh	r3, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	807b      	strh	r3, [r7, #2]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	803b      	strh	r3, [r7, #0]
	char string6D[8][6] = {"#USX,", "#UDX,", "#DSX,", "#DDX,", "#TOP,", "#BOT,", "#XXX,", "#FAL,"};
 8000caa:	4b2b      	ldr	r3, [pc, #172]	; (8000d58 <protocolComplete+0xcc>)
 8000cac:	461c      	mov	r4, r3
 8000cae:	f107 0648 	add.w	r6, r7, #72	; 0x48
 8000cb2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000cb6:	4635      	mov	r5, r6
 8000cb8:	4623      	mov	r3, r4
 8000cba:	6818      	ldr	r0, [r3, #0]
 8000cbc:	6859      	ldr	r1, [r3, #4]
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc4:	3410      	adds	r4, #16
 8000cc6:	3610      	adds	r6, #16
 8000cc8:	4574      	cmp	r4, lr
 8000cca:	d1f4      	bne.n	8000cb6 <protocolComplete+0x2a>
	char send[RX_BUFFER_SIZE];
	memset (&send, 0, sizeof (send));
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	2240      	movs	r2, #64	; 0x40
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 fc25 	bl	8002524 <memset>

	if (sprintf(send, "%s%7d%s%7d%s%7d%s%02d$\n", string6D[position6D], positionX, ",", positionY, ",", positionZ, ",", temperature* 2 + 6) < 0)
 8000cda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000cde:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4413      	add	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	18cc      	adds	r4, r1, r3
 8000cec:	f9b7 5004 	ldrsh.w	r5, [r7, #4]
 8000cf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cf4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000cf8:	f997 1090 	ldrsb.w	r1, [r7, #144]	; 0x90
 8000cfc:	3103      	adds	r1, #3
 8000cfe:	0049      	lsls	r1, r1, #1
 8000d00:	f107 0008 	add.w	r0, r7, #8
 8000d04:	9105      	str	r1, [sp, #20]
 8000d06:	4915      	ldr	r1, [pc, #84]	; (8000d5c <protocolComplete+0xd0>)
 8000d08:	9104      	str	r1, [sp, #16]
 8000d0a:	9203      	str	r2, [sp, #12]
 8000d0c:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <protocolComplete+0xd0>)
 8000d0e:	9202      	str	r2, [sp, #8]
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <protocolComplete+0xd0>)
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	462b      	mov	r3, r5
 8000d18:	4622      	mov	r2, r4
 8000d1a:	4911      	ldr	r1, [pc, #68]	; (8000d60 <protocolComplete+0xd4>)
 8000d1c:	f001 fca0 	bl	8002660 <sprintf>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	da07      	bge.n	8000d36 <protocolComplete+0xaa>
//	if (sprintf(send, "%s%d%s%d%s%d$\n", string6D[position6D], positionX, ",", positionY, ",", positionZ) < 0)
	{
		errorcountInternal++;
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <protocolComplete+0xd8>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <protocolComplete+0xd8>)
 8000d30:	701a      	strb	r2, [r3, #0]
		return 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00c      	b.n	8000d50 <protocolComplete+0xc4>
	}
	else
	{
		printf("%s", send);
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480a      	ldr	r0, [pc, #40]	; (8000d68 <protocolComplete+0xdc>)
 8000d3e:	f001 fc3f 	bl	80025c0 <printf>
		_uart_printf("%s", send);	
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	4619      	mov	r1, r3
 8000d48:	4807      	ldr	r0, [pc, #28]	; (8000d68 <protocolComplete+0xdc>)
 8000d4a:	f7ff ff21 	bl	8000b90 <_uart_printf>
		return 0;
 8000d4e:	2300      	movs	r3, #0
	}	
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	377c      	adds	r7, #124	; 0x7c
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d58:	080093fc 	.word	0x080093fc
 8000d5c:	080093f4 	.word	0x080093f4
 8000d60:	080093dc 	.word	0x080093dc
 8000d64:	20000a78 	.word	0x20000a78
 8000d68:	080093f8 	.word	0x080093f8

08000d6c <SysTick_Handler>:

void SysTick_Handler (void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
    static uint32_t ticks = 0;

    ticks++;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <SysTick_Handler+0x28>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <SysTick_Handler+0x28>)
 8000d78:	6013      	str	r3, [r2, #0]
    if (ticks == TICKS_WAIT)
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SysTick_Handler+0x28>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b64      	cmp	r3, #100	; 0x64
 8000d80:	d102      	bne.n	8000d88 <SysTick_Handler+0x1c>
    {
        ticks = 0;
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SysTick_Handler+0x28>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
//		printf("\nerrorcountRAW = %d errorcount6D = %d | errorcountSETUP = %d | errorcountInternal = %d\n", errorcountRAW, errorcount6D, errorcountSetup, errorcountInternal);
    }
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000a34 	.word	0x20000a34

08000d98 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000da0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000da4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d013      	beq.n	8000dd8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000db0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000db4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000db8:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00b      	beq.n	8000dd8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000dc0:	e000      	b.n	8000dc4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000dc2:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000dc4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0f9      	beq.n	8000dc2 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000dce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000dd8:	687b      	ldr	r3, [r7, #4]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
    // P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
    // PORT2->HWSEL ... clear bits [3:2]
    PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 8000dec:	4a1d      	ldr	r2, [pc, #116]	; (8000e64 <initRetargetSwo+0x7c>)
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <initRetargetSwo+0x7c>)
 8000df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000df2:	f023 030c 	bic.w	r3, r3, #12
 8000df6:	6753      	str	r3, [r2, #116]	; 0x74
    // PORT2->HWSEL ... set bit [2] -> HWO0
    PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 8000df8:	4a1a      	ldr	r2, [pc, #104]	; (8000e64 <initRetargetSwo+0x7c>)
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <initRetargetSwo+0x7c>)
 8000dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	6753      	str	r3, [r2, #116]	; 0x74

    // Enable trace systems
    // Source: ARMv7-M Architecture Reference Manual
    // DEMCR = Debug Exception and Monitor Control Register
    //         TRCENA ... global enable for DWT and ITM blocks
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000e04:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <initRetargetSwo+0x80>)
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <initRetargetSwo+0x80>)
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e0e:	60d3      	str	r3, [r2, #12]
    // SWO baud rate prescaler value
    // ACPR = Asynchronous Clock Prescaler Register
    //        fSWO = fCPU / (SWOSCALAR + 1)
    //        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
    //        fCPU = 120MHz
    TPI->ACPR = 119UL;
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <initRetargetSwo+0x84>)
 8000e12:	2277      	movs	r2, #119	; 0x77
 8000e14:	611a      	str	r2, [r3, #16]
    // Source: ARMv7-M Architecture Reference Manual
    // SPPR = Selected Pin Control Register
    //        0x0 ... Synchronous Trace Port Mode
    //        0x1 ... Asynchronous Serial Wire Output (Manchester)
    //        0x2 ... Asynchronous Serial Wire Output (NRZ)
    TPI->SPPR = 0x2UL;
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <initRetargetSwo+0x84>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    // Source: ARM Cortex-M4 Processor Technical Reference Manual
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    // FFCR = Formatter and Flash Control Register
    //        0x0 ... continuous formatting disabled
    //        0x1 ... continuous formatting enabled
    TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 8000e1e:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <initRetargetSwo+0x84>)
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <initRetargetSwo+0x84>)
 8000e22:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8000e26:	f023 0302 	bic.w	r3, r3, #2
 8000e2a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

    // Unlock ITM
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    ITM->LAR = 0xC5ACCE55;
 8000e2e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <initRetargetSwo+0x88>)
 8000e34:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TCR = Trace Control Register
    //       ITMENA ... enable ITM
    ITM->TCR |= ITM_TCR_ITMENA_Msk;
 8000e38:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000e3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e40:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TER = Trace Enable Register
    //       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
    ITM->TER = 0xFFFFFFFF;
 8000e4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	48028200 	.word	0x48028200
 8000e68:	e000edf0 	.word	0xe000edf0
 8000e6c:	e0040000 	.word	0xe0040000
 8000e70:	c5acce55 	.word	0xc5acce55

08000e74 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
    int i;

    for (i = 0; i < nbytes; i++) {
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	e009      	b.n	8000e9a <_write+0x26>
        ITM_SendChar ( (*buf++));
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1c5a      	adds	r2, r3, #1
 8000e8a:	60ba      	str	r2, [r7, #8]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff82 	bl	8000d98 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
    int i;

    for (i = 0; i < nbytes; i++) {
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3301      	adds	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	dbf1      	blt.n	8000e86 <_write+0x12>
        ITM_SendChar ( (*buf++));
    }
    return nbytes;
 8000ea2:	687b      	ldr	r3, [r7, #4]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	70fb      	strb	r3, [r7, #3]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000ebc:	78f8      	ldrb	r0, [r7, #3]
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	3306      	adds	r3, #6
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000ece:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	1d83      	adds	r3, r0, #6
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ef4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f023 020f 	bic.w	r2, r3, #15
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8000f34:	2104      	movs	r1, #4
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffe4 	bl	8000f04 <XMC_USIC_CH_SetMode>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <XMC_I2C_CH_SetInputSource>:
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 *
 */
__STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT_t input, const uint8_t source)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
 8000f50:	4613      	mov	r3, r2
 8000f52:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX0CR_DSEN_Msk;
 8000f54:	78f8      	ldrb	r0, [r7, #3]
 8000f56:	78fb      	ldrb	r3, [r7, #3]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	3306      	adds	r3, #6
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8000f66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	1d83      	adds	r3, r0, #6
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000f74:	78ba      	ldrb	r2, [r7, #2]
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ff96 	bl	8000eac <XMC_USIC_CH_SetInputSource>
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <_init_i2c1_ch0>:
 *         P0_5 & P0_11
 *  @param none
 *  @return on success this function returns 0
 */
uint8_t _init_i2c1_ch0 (void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
    XMC_I2C_CH_Init (XMC_I2C1_CH0, &i2c_cfg);
 8000fc8:	490e      	ldr	r1, [pc, #56]	; (8001004 <_init_i2c1_ch0+0x40>)
 8000fca:	480f      	ldr	r0, [pc, #60]	; (8001008 <_init_i2c1_ch0+0x44>)
 8000fcc:	f000 fede 	bl	8001d8c <XMC_I2C_CH_Init>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SDA, USIC1_C0_DX0_P0_5);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <_init_i2c1_ch0+0x44>)
 8000fd6:	f7ff ffb5 	bl	8000f44 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SCL, USIC1_C0_DX1_SCLKOUT);
 8000fda:	2206      	movs	r2, #6
 8000fdc:	2101      	movs	r1, #1
 8000fde:	480a      	ldr	r0, [pc, #40]	; (8001008 <_init_i2c1_ch0+0x44>)
 8000fe0:	f7ff ffb0 	bl	8000f44 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_Start (XMC_I2C1_CH0);
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <_init_i2c1_ch0+0x44>)
 8000fe6:	f7ff ffa1 	bl	8000f2c <XMC_I2C_CH_Start>

    XMC_GPIO_Init (P0_11, &i2c_scl);
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <_init_i2c1_ch0+0x48>)
 8000fec:	210b      	movs	r1, #11
 8000fee:	4808      	ldr	r0, [pc, #32]	; (8001010 <_init_i2c1_ch0+0x4c>)
 8000ff0:	f000 fd52 	bl	8001a98 <XMC_GPIO_Init>
    XMC_GPIO_Init (P0_5, &i2c_sda);
 8000ff4:	4a07      	ldr	r2, [pc, #28]	; (8001014 <_init_i2c1_ch0+0x50>)
 8000ff6:	2105      	movs	r1, #5
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <_init_i2c1_ch0+0x4c>)
 8000ffa:	f000 fd4d 	bl	8001a98 <XMC_GPIO_Init>

    return 0;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000030 	.word	0x20000030
 8001008:	48020000 	.word	0x48020000
 800100c:	20000024 	.word	0x20000024
 8001010:	48028000 	.word	0x48028000
 8001014:	20000018 	.word	0x20000018

08001018 <_i2c_xfer>:
 *         rd_wr    ... I2C Read/Write direction
 *  @return read-value on a I2C read request or return write-value on I2C write
 *          request
 */
uint8_t _i2c_xfer (uint8_t id, uint8_t reg_addr, uint8_t i2c_data, _Bool rd_wr)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	4604      	mov	r4, r0
 8001020:	4608      	mov	r0, r1
 8001022:	4611      	mov	r1, r2
 8001024:	461a      	mov	r2, r3
 8001026:	4623      	mov	r3, r4
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	4603      	mov	r3, r0
 800102c:	71bb      	strb	r3, [r7, #6]
 800102e:	460b      	mov	r3, r1
 8001030:	717b      	strb	r3, [r7, #5]
 8001032:	4613      	mov	r3, r2
 8001034:	713b      	strb	r3, [r7, #4]
    XMC_USIC_CH_t *channel;
    char _tmp_i2c_recv_ = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]
    uint8_t id_tmp = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	73bb      	strb	r3, [r7, #14]

    channel = XMC_I2C1_CH0;
 800103e:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <_i2c_xfer+0x11c>)
 8001040:	60bb      	str	r3, [r7, #8]

    id_tmp = LIS3DH_RD_ADR;
 8001042:	2330      	movs	r3, #48	; 0x30
 8001044:	73bb      	strb	r3, [r7, #14]

    XMC_I2C_CH_MasterStart (channel, id_tmp, XMC_I2C_CH_CMD_WRITE);
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	b29b      	uxth	r3, r3
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	68b8      	ldr	r0, [r7, #8]
 8001050:	f000 ff20 	bl	8001e94 <XMC_I2C_CH_MasterStart>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8001054:	bf00      	nop
 8001056:	68b8      	ldr	r0, [r7, #8]
 8001058:	f7ff ff96 	bl	8000f88 <XMC_I2C_CH_GetStatusFlag>
 800105c:	4603      	mov	r3, r0
 800105e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f7      	beq.n	8001056 <_i2c_xfer+0x3e>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8001066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106a:	68b8      	ldr	r0, [r7, #8]
 800106c:	f7ff ff98 	bl	8000fa0 <XMC_I2C_CH_ClearStatusFlag>

    XMC_I2C_CH_MasterTransmit (channel, reg_addr);
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	4619      	mov	r1, r3
 8001074:	68b8      	ldr	r0, [r7, #8]
 8001076:	f000 ff9b 	bl	8001fb0 <XMC_I2C_CH_MasterTransmit>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 800107a:	bf00      	nop
 800107c:	68b8      	ldr	r0, [r7, #8]
 800107e:	f7ff ff83 	bl	8000f88 <XMC_I2C_CH_GetStatusFlag>
 8001082:	4603      	mov	r3, r0
 8001084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f7      	beq.n	800107c <_i2c_xfer+0x64>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 800108c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001090:	68b8      	ldr	r0, [r7, #8]
 8001092:	f7ff ff85 	bl	8000fa0 <XMC_I2C_CH_ClearStatusFlag>

    if (rd_wr) {
 8001096:	793b      	ldrb	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d030      	beq.n	80010fe <_i2c_xfer+0xe6>
        /* Read from REG */
        XMC_I2C_CH_MasterRepeatedStart (channel, id_tmp, XMC_I2C_CH_CMD_READ);
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2201      	movs	r2, #1
 80010a2:	4619      	mov	r1, r3
 80010a4:	68b8      	ldr	r0, [r7, #8]
 80010a6:	f000 ff29 	bl	8001efc <XMC_I2C_CH_MasterRepeatedStart>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 80010aa:	bf00      	nop
 80010ac:	68b8      	ldr	r0, [r7, #8]
 80010ae:	f7ff ff6b 	bl	8000f88 <XMC_I2C_CH_GetStatusFlag>
 80010b2:	4603      	mov	r3, r0
 80010b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f7      	beq.n	80010ac <_i2c_xfer+0x94>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80010bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c0:	68b8      	ldr	r0, [r7, #8]
 80010c2:	f7ff ff6d 	bl	8000fa0 <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterReceiveNack (channel);
 80010c6:	68b8      	ldr	r0, [r7, #8]
 80010c8:	f000 ff98 	bl	8001ffc <XMC_I2C_CH_MasterReceiveNack>

        while ( (XMC_USIC_CH_GetReceiveBufferStatus (channel) !=
 80010cc:	bf00      	nop
 80010ce:	68b8      	ldr	r0, [r7, #8]
 80010d0:	f7ff ff0a 	bl	8000ee8 <XMC_USIC_CH_GetReceiveBufferStatus>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010da:	d006      	beq.n	80010ea <_i2c_xfer+0xd2>
                 (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) && ( (uint32_t) XMC_USIC_CH_GetReceiveBufferStatus (channel)
 80010dc:	68b8      	ldr	r0, [r7, #8]
 80010de:	f7ff ff03 	bl	8000ee8 <XMC_USIC_CH_GetReceiveBufferStatus>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010e8:	d1f1      	bne.n	80010ce <_i2c_xfer+0xb6>
                         != (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID0));

        _tmp_i2c_recv_ = XMC_I2C_CH_GetReceivedData (channel);
 80010ea:	68b8      	ldr	r0, [r7, #8]
 80010ec:	f000 ffac 	bl	8002048 <XMC_I2C_CH_GetReceivedData>
 80010f0:	4603      	mov	r3, r0
 80010f2:	73fb      	strb	r3, [r7, #15]

        XMC_I2C_CH_MasterStop (channel);
 80010f4:	68b8      	ldr	r0, [r7, #8]
 80010f6:	f000 ff35 	bl	8001f64 <XMC_I2C_CH_MasterStop>

        return _tmp_i2c_recv_;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	e016      	b.n	800112c <_i2c_xfer+0x114>
    } else {
        /* Write to REG */
        XMC_I2C_CH_MasterTransmit (channel, i2c_data);
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	4619      	mov	r1, r3
 8001102:	68b8      	ldr	r0, [r7, #8]
 8001104:	f000 ff54 	bl	8001fb0 <XMC_I2C_CH_MasterTransmit>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8001108:	bf00      	nop
 800110a:	68b8      	ldr	r0, [r7, #8]
 800110c:	f7ff ff3c 	bl	8000f88 <XMC_I2C_CH_GetStatusFlag>
 8001110:	4603      	mov	r3, r0
 8001112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0f7      	beq.n	800110a <_i2c_xfer+0xf2>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 800111a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111e:	68b8      	ldr	r0, [r7, #8]
 8001120:	f7ff ff3e 	bl	8000fa0 <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterStop (channel);
 8001124:	68b8      	ldr	r0, [r7, #8]
 8001126:	f000 ff1d 	bl	8001f64 <XMC_I2C_CH_MasterStop>

        return i2c_data;
 800112a:	797b      	ldrb	r3, [r7, #5]
    }
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}
 8001134:	48020000 	.word	0x48020000

08001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db0a      	blt.n	8001162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	490d      	ldr	r1, [pc, #52]	; (8001184 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001160:	e00a      	b.n	8001178 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	4909      	ldr	r1, [pc, #36]	; (8001188 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	440b      	add	r3, r1
 8001176:	761a      	strb	r2, [r3, #24]
  }
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	213f      	movs	r1, #63	; 0x3f
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f7ff ffc2 	bl	8001138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <main>:
#include "3Daccel_app.h"
#include "3Daccel_out_library.h"

int main (void)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b097      	sub	sp, #92	; 0x5c
 80011d4:	af02      	add	r7, sp, #8
	uint8_t position = 0, old_position = 0, direction = 6;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80011e2:	2306      	movs	r3, #6
 80011e4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	char rx_buff[RX_BUFFER_SIZE] = {0};
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2240      	movs	r2, #64	; 0x40
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 f997 	bl	8002524 <memset>
	AxesRaw_t data;
	i8_t temp = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	70fb      	strb	r3, [r7, #3]
	
	errorcountRAW = 0, errorcount6D = 0, errorcountInternal = 0, errorcountSetup = 0;
 80011fa:	4bbb      	ldr	r3, [pc, #748]	; (80014e8 <main+0x318>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	4bba      	ldr	r3, [pc, #744]	; (80014ec <main+0x31c>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	4bba      	ldr	r3, [pc, #744]	; (80014f0 <main+0x320>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	4bb9      	ldr	r3, [pc, #740]	; (80014f4 <main+0x324>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]

    initRetargetSwo();
 8001212:	f7ff fde9 	bl	8000de8 <initRetargetSwo>

    _init_uart0_ch0();
 8001216:	f7ff fc39 	bl	8000a8c <_init_uart0_ch0>
    _init_i2c1_ch0();
 800121a:	f7ff fed3 	bl	8000fc4 <_init_i2c1_ch0>

    printf("I2C+UART init done...\n");
 800121e:	48b6      	ldr	r0, [pc, #728]	; (80014f8 <main+0x328>)
 8001220:	f001 fa16 	bl	8002650 <puts>

    SysTick_Config (SystemCoreClock / TICKS_PER_SECOND);
 8001224:	4bb5      	ldr	r3, [pc, #724]	; (80014fc <main+0x32c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4ab5      	ldr	r2, [pc, #724]	; (8001500 <main+0x330>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	099b      	lsrs	r3, r3, #6
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ffab 	bl	800118c <SysTick_Config>

    //Inizialize MEMS Sensor

    //set ODR (turn ON device)
    if(LIS3DH_SetODR(LIS3DH_ODR_100Hz) == 1)
 8001236:	2005      	movs	r0, #5
 8001238:	f7ff f866 	bl	8000308 <LIS3DH_SetODR>
 800123c:	4603      	mov	r3, r0
 800123e:	2b01      	cmp	r3, #1
 8001240:	d103      	bne.n	800124a <main+0x7a>
    {
        printf("LIS3DH_SetODR done...\n");
 8001242:	48b0      	ldr	r0, [pc, #704]	; (8001504 <main+0x334>)
 8001244:	f001 fa04 	bl	8002650 <puts>
 8001248:	e005      	b.n	8001256 <main+0x86>
    }
	else
	{
		errorcountSetup++;
 800124a:	4baa      	ldr	r3, [pc, #680]	; (80014f4 <main+0x324>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	3301      	adds	r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4ba8      	ldr	r3, [pc, #672]	; (80014f4 <main+0x324>)
 8001254:	701a      	strb	r2, [r3, #0]
	}

    //set PowerMode
    if(LIS3DH_SetMode(LIS3DH_NORMAL) == 1)
 8001256:	2002      	movs	r0, #2
 8001258:	f7ff f904 	bl	8000464 <LIS3DH_SetMode>
 800125c:	4603      	mov	r3, r0
 800125e:	2b01      	cmp	r3, #1
 8001260:	d103      	bne.n	800126a <main+0x9a>
    {

        printf("LIS3DH_SetMode done...\n");
 8001262:	48a9      	ldr	r0, [pc, #676]	; (8001508 <main+0x338>)
 8001264:	f001 f9f4 	bl	8002650 <puts>
 8001268:	e005      	b.n	8001276 <main+0xa6>
    }
	else
	{
		errorcountSetup++;
 800126a:	4ba2      	ldr	r3, [pc, #648]	; (80014f4 <main+0x324>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4ba0      	ldr	r3, [pc, #640]	; (80014f4 <main+0x324>)
 8001274:	701a      	strb	r2, [r3, #0]
	}

    //set Fullscale
    if(LIS3DH_SetFullScale(LIS3DH_FULLSCALE_2) == 1)
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff f99e 	bl	80005b8 <LIS3DH_SetFullScale>
 800127c:	4603      	mov	r3, r0
 800127e:	2b01      	cmp	r3, #1
 8001280:	d103      	bne.n	800128a <main+0xba>
    {

        printf("LIS3DH_SetFullScale done...\n");
 8001282:	48a2      	ldr	r0, [pc, #648]	; (800150c <main+0x33c>)
 8001284:	f001 f9e4 	bl	8002650 <puts>
 8001288:	e005      	b.n	8001296 <main+0xc6>
    }
	else
	{
		errorcountSetup++;
 800128a:	4b9a      	ldr	r3, [pc, #616]	; (80014f4 <main+0x324>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b98      	ldr	r3, [pc, #608]	; (80014f4 <main+0x324>)
 8001294:	701a      	strb	r2, [r3, #0]
	}

    //set axis Enable
    response = LIS3DH_SetAxis(LIS3DH_X_ENABLE | LIS3DH_Y_ENABLE | LIS3DH_Z_ENABLE);
 8001296:	2007      	movs	r0, #7
 8001298:	f7ff f962 	bl	8000560 <LIS3DH_SetAxis>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b9b      	ldr	r3, [pc, #620]	; (8001510 <main+0x340>)
 80012a2:	701a      	strb	r2, [r3, #0]
    if(response == 1)
 80012a4:	4b9a      	ldr	r3, [pc, #616]	; (8001510 <main+0x340>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d103      	bne.n	80012b4 <main+0xe4>
    {
        printf("LIS3DH_SetAxis done...\n");
 80012ac:	4899      	ldr	r0, [pc, #612]	; (8001514 <main+0x344>)
 80012ae:	f001 f9cf 	bl	8002650 <puts>
 80012b2:	e005      	b.n	80012c0 <main+0xf0>
    }
	else
	{
		errorcountSetup++;
 80012b4:	4b8f      	ldr	r3, [pc, #572]	; (80014f4 <main+0x324>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b8d      	ldr	r3, [pc, #564]	; (80014f4 <main+0x324>)
 80012be:	701a      	strb	r2, [r3, #0]
	}

	//configure Mems Sensor
	//set Interrupt Threshold 
	if(LIS3DH_SetInt1Threshold(20) == 1)
 80012c0:	2014      	movs	r0, #20
 80012c2:	f7ff faa7 	bl	8000814 <LIS3DH_SetInt1Threshold>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d103      	bne.n	80012d4 <main+0x104>
	{
    	printf("LIS3DH_SetInt1Thershold done...\n");
 80012cc:	4892      	ldr	r0, [pc, #584]	; (8001518 <main+0x348>)
 80012ce:	f001 f9bf 	bl	8002650 <puts>
 80012d2:	e005      	b.n	80012e0 <main+0x110>
	}
	else
	{
		errorcountSetup++;
 80012d4:	4b87      	ldr	r3, [pc, #540]	; (80014f4 <main+0x324>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b85      	ldr	r3, [pc, #532]	; (80014f4 <main+0x324>)
 80012de:	701a      	strb	r2, [r3, #0]
	}
	
	//set Interrupt configuration (all enabled)
	response = LIS3DH_SetIntConfiguration(LIS3DH_INT1_ZHIE_ENABLE | LIS3DH_INT1_ZLIE_ENABLE |
 80012e0:	203f      	movs	r0, #63	; 0x3f
 80012e2:	f7ff f9c5 	bl	8000670 <LIS3DH_SetIntConfiguration>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b89      	ldr	r3, [pc, #548]	; (8001510 <main+0x340>)
 80012ec:	701a      	strb	r2, [r3, #0]
			   LIS3DH_INT1_YHIE_ENABLE | LIS3DH_INT1_YLIE_ENABLE |
			   LIS3DH_INT1_XHIE_ENABLE | LIS3DH_INT1_XLIE_ENABLE ); 
	if(response == 1)
 80012ee:	4b88      	ldr	r3, [pc, #544]	; (8001510 <main+0x340>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d103      	bne.n	80012fe <main+0x12e>
	{
		printf("LIS3DH_SetIntConfiguration done...\n");
 80012f6:	4889      	ldr	r0, [pc, #548]	; (800151c <main+0x34c>)
 80012f8:	f001 f9aa 	bl	8002650 <puts>
 80012fc:	e005      	b.n	800130a <main+0x13a>
  	}
	else
	{
		errorcountSetup++;
 80012fe:	4b7d      	ldr	r3, [pc, #500]	; (80014f4 <main+0x324>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b7b      	ldr	r3, [pc, #492]	; (80014f4 <main+0x324>)
 8001308:	701a      	strb	r2, [r3, #0]
	}

	 //set Interrupt Mode
	if(LIS3DH_SetIntMode(LIS3DH_INT_MODE_6D_POSITION) == 1)
 800130a:	2003      	movs	r0, #3
 800130c:	f7ff f9da 	bl	80006c4 <LIS3DH_SetIntMode>
 8001310:	4603      	mov	r3, r0
 8001312:	2b01      	cmp	r3, #1
 8001314:	d103      	bne.n	800131e <main+0x14e>
	{
		printf("LIS3DH_SetIntMode done...\n");
 8001316:	4882      	ldr	r0, [pc, #520]	; (8001520 <main+0x350>)
 8001318:	f001 f99a 	bl	8002650 <puts>
 800131c:	e005      	b.n	800132a <main+0x15a>
    }
	else
	{
		errorcountSetup++;
 800131e:	4b75      	ldr	r3, [pc, #468]	; (80014f4 <main+0x324>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b73      	ldr	r3, [pc, #460]	; (80014f4 <main+0x324>)
 8001328:	701a      	strb	r2, [r3, #0]
	}

	// internal temperature sensor -- check accuracy!!!
	if (LIS3DH_SetADCAux(MEMS_ENABLE) == 1)
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff f848 	bl	80003c0 <LIS3DH_SetADCAux>
 8001330:	4603      	mov	r3, r0
 8001332:	2b01      	cmp	r3, #1
 8001334:	d103      	bne.n	800133e <main+0x16e>
	{
		printf("LIS3DH_SetADCAux done...");
 8001336:	487b      	ldr	r0, [pc, #492]	; (8001524 <main+0x354>)
 8001338:	f001 f942 	bl	80025c0 <printf>
 800133c:	e005      	b.n	800134a <main+0x17a>
	}
	else
	{
		errorcountSetup++;
 800133e:	4b6d      	ldr	r3, [pc, #436]	; (80014f4 <main+0x324>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b6b      	ldr	r3, [pc, #428]	; (80014f4 <main+0x324>)
 8001348:	701a      	strb	r2, [r3, #0]
	}

	if (LIS3DH_SetBDU(MEMS_ENABLE) == 1)
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff f962 	bl	8000614 <LIS3DH_SetBDU>
 8001350:	4603      	mov	r3, r0
 8001352:	2b01      	cmp	r3, #1
 8001354:	d103      	bne.n	800135e <main+0x18e>
	{
		printf("LIS3DH_SetBDU done...\n");
 8001356:	4874      	ldr	r0, [pc, #464]	; (8001528 <main+0x358>)
 8001358:	f001 f97a 	bl	8002650 <puts>
 800135c:	e005      	b.n	800136a <main+0x19a>
	}
	else
	{
		errorcountSetup++;
 800135e:	4b65      	ldr	r3, [pc, #404]	; (80014f4 <main+0x324>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b63      	ldr	r3, [pc, #396]	; (80014f4 <main+0x324>)
 8001368:	701a      	strb	r2, [r3, #0]
	}

	if (LIS3DH_SetTemperature(MEMS_ENABLE) == 1)
 800136a:	2001      	movs	r0, #1
 800136c:	f7fe fffa 	bl	8000364 <LIS3DH_SetTemperature>
 8001370:	4603      	mov	r3, r0
 8001372:	2b01      	cmp	r3, #1
 8001374:	d103      	bne.n	800137e <main+0x1ae>
	{
		printf("LIS3DH_SetTemperature done...");
 8001376:	486d      	ldr	r0, [pc, #436]	; (800152c <main+0x35c>)
 8001378:	f001 f922 	bl	80025c0 <printf>
 800137c:	e005      	b.n	800138a <main+0x1ba>
	}
	else
	{
		errorcountSetup++;
 800137e:	4b5d      	ldr	r3, [pc, #372]	; (80014f4 <main+0x324>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	3301      	adds	r3, #1
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b5b      	ldr	r3, [pc, #364]	; (80014f4 <main+0x324>)
 8001388:	701a      	strb	r2, [r3, #0]
	}

	while(1)
	{
		memset (&rx_buff, 0, sizeof (rx_buff));
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	2240      	movs	r2, #64	; 0x40
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f001 f8c6 	bl	8002524 <memset>
		_uart_get_string (rx_buff);
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fc49 	bl	8000c34 <_uart_get_string>

        if (strncmp(rx_buff, "REQUEST", strlen(rx_buff)) == 0)
 80013a2:	f107 030c 	add.w	r3, r7, #12
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 f98a 	bl	80026c0 <strlen>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	495f      	ldr	r1, [pc, #380]	; (8001530 <main+0x360>)
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 f9f1 	bl	800279c <strncmp>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f040 8103 	bne.w	80015c8 <main+0x3f8>
        {
			// get temperature
			LIS3DH_GetTempRaw(&temp);
 80013c2:	1cfb      	adds	r3, r7, #3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f829 	bl	800041c <LIS3DH_GetTempRaw>

			//get 6D Position
	  		response = LIS3DH_Get6DPosition(&position);
 80013ca:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f9a6 	bl	8000720 <LIS3DH_Get6DPosition>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <main+0x340>)
 80013da:	701a      	strb	r2, [r3, #0]
	  		if((response == 1) && (old_position != position))
 80013dc:	4b4c      	ldr	r3, [pc, #304]	; (8001510 <main+0x340>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	f040 80b5 	bne.w	8001550 <main+0x380>
 80013e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013ea:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80013ee:	429a      	cmp	r2, r3
 80013f0:	f000 80ae 	beq.w	8001550 <main+0x380>
			{
				switch (position)
 80013f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013f8:	3b41      	subs	r3, #65	; 0x41
 80013fa:	2b1f      	cmp	r3, #31
 80013fc:	d86c      	bhi.n	80014d8 <main+0x308>
 80013fe:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <main+0x234>)
 8001400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001404:	080014a1 	.word	0x080014a1
 8001408:	08001493 	.word	0x08001493
 800140c:	080014d9 	.word	0x080014d9
 8001410:	08001485 	.word	0x08001485
 8001414:	080014d9 	.word	0x080014d9
 8001418:	080014d9 	.word	0x080014d9
 800141c:	080014d9 	.word	0x080014d9
 8001420:	080014af 	.word	0x080014af
 8001424:	080014d9 	.word	0x080014d9
 8001428:	080014d9 	.word	0x080014d9
 800142c:	080014d9 	.word	0x080014d9
 8001430:	080014d9 	.word	0x080014d9
 8001434:	080014d9 	.word	0x080014d9
 8001438:	080014d9 	.word	0x080014d9
 800143c:	080014d9 	.word	0x080014d9
 8001440:	080014cb 	.word	0x080014cb
 8001444:	080014d9 	.word	0x080014d9
 8001448:	080014d9 	.word	0x080014d9
 800144c:	080014d9 	.word	0x080014d9
 8001450:	080014d9 	.word	0x080014d9
 8001454:	080014d9 	.word	0x080014d9
 8001458:	080014d9 	.word	0x080014d9
 800145c:	080014d9 	.word	0x080014d9
 8001460:	080014d9 	.word	0x080014d9
 8001464:	080014d9 	.word	0x080014d9
 8001468:	080014d9 	.word	0x080014d9
 800146c:	080014d9 	.word	0x080014d9
 8001470:	080014d9 	.word	0x080014d9
 8001474:	080014d9 	.word	0x080014d9
 8001478:	080014d9 	.word	0x080014d9
 800147c:	080014d9 	.word	0x080014d9
 8001480:	080014bd 	.word	0x080014bd
				{
					case LIS3DH_UP_SX:
					{
						printf("\nposition = UP_SX  \n");
 8001484:	482b      	ldr	r0, [pc, #172]	; (8001534 <main+0x364>)
 8001486:	f001 f8e3 	bl	8002650 <puts>
						direction = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
						break;
 8001490:	e029      	b.n	80014e6 <main+0x316>
					}
					case LIS3DH_UP_DX:
					{
						printf("\nposition = UP_DX  \n");
 8001492:	4829      	ldr	r0, [pc, #164]	; (8001538 <main+0x368>)
 8001494:	f001 f8dc 	bl	8002650 <puts>
						direction = 1;
 8001498:	2301      	movs	r3, #1
 800149a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
						break;
 800149e:	e022      	b.n	80014e6 <main+0x316>
					}
					case LIS3DH_DW_SX:
					{
						printf("\nposition = DW_SX  \n");
 80014a0:	4826      	ldr	r0, [pc, #152]	; (800153c <main+0x36c>)
 80014a2:	f001 f8d5 	bl	8002650 <puts>
						direction = 2;
 80014a6:	2302      	movs	r3, #2
 80014a8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
						break;
 80014ac:	e01b      	b.n	80014e6 <main+0x316>
					}
					case LIS3DH_DW_DX:
					{
						printf("\nposition = DW_DX  \n");
 80014ae:	4824      	ldr	r0, [pc, #144]	; (8001540 <main+0x370>)
 80014b0:	f001 f8ce 	bl	8002650 <puts>
						direction = 3;
 80014b4:	2303      	movs	r3, #3
 80014b6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
						break; 
 80014ba:	e014      	b.n	80014e6 <main+0x316>
					}
					case LIS3DH_TOP:    
					{
						printf("\nposition = TOP    \n");
 80014bc:	4821      	ldr	r0, [pc, #132]	; (8001544 <main+0x374>)
 80014be:	f001 f8c7 	bl	8002650 <puts>
						direction = 4;
 80014c2:	2304      	movs	r3, #4
 80014c4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
						break; 
 80014c8:	e00d      	b.n	80014e6 <main+0x316>
					}
					case LIS3DH_BOTTOM: 
					{
						printf("\nposition = BOTTOM \n");   
 80014ca:	481f      	ldr	r0, [pc, #124]	; (8001548 <main+0x378>)
 80014cc:	f001 f8c0 	bl	8002650 <puts>
						direction = 5;
 80014d0:	2305      	movs	r3, #5
 80014d2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
						break; 
 80014d6:	e006      	b.n	80014e6 <main+0x316>
					}
					default:
					{
						printf("\nposition = unknown\n");
 80014d8:	481c      	ldr	r0, [pc, #112]	; (800154c <main+0x37c>)
 80014da:	f001 f8b9 	bl	8002650 <puts>
						direction = 6;
 80014de:	2306      	movs	r3, #6
 80014e0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
						break;
 80014e4:	bf00      	nop
					}
				}
			}
 80014e6:	e03d      	b.n	8001564 <main+0x394>
 80014e8:	20000a77 	.word	0x20000a77
 80014ec:	20000a76 	.word	0x20000a76
 80014f0:	20000a78 	.word	0x20000a78
 80014f4:	20000a75 	.word	0x20000a75
 80014f8:	0800942c 	.word	0x0800942c
 80014fc:	2000ffc0 	.word	0x2000ffc0
 8001500:	10624dd3 	.word	0x10624dd3
 8001504:	08009444 	.word	0x08009444
 8001508:	0800945c 	.word	0x0800945c
 800150c:	08009474 	.word	0x08009474
 8001510:	20000a74 	.word	0x20000a74
 8001514:	08009490 	.word	0x08009490
 8001518:	080094a8 	.word	0x080094a8
 800151c:	080094c8 	.word	0x080094c8
 8001520:	080094ec 	.word	0x080094ec
 8001524:	08009508 	.word	0x08009508
 8001528:	08009524 	.word	0x08009524
 800152c:	0800953c 	.word	0x0800953c
 8001530:	0800955c 	.word	0x0800955c
 8001534:	08009564 	.word	0x08009564
 8001538:	08009578 	.word	0x08009578
 800153c:	0800958c 	.word	0x0800958c
 8001540:	080095a0 	.word	0x080095a0
 8001544:	080095b4 	.word	0x080095b4
 8001548:	080095c8 	.word	0x080095c8
 800154c:	080095dc 	.word	0x080095dc
			else if(response != 1)
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <main+0x3fc>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d005      	beq.n	8001564 <main+0x394>
			{
				errorcount6D++;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <main+0x400>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <main+0x400>)
 8001562:	701a      	strb	r2, [r3, #0]
			}
			old_position = position;
 8001564:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001568:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

			//get raw data
			response = LIS3DH_GetAccAxesRaw(&data);
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff f96a 	bl	8000848 <LIS3DH_GetAccAxesRaw>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <main+0x3fc>)
 800157a:	701a      	strb	r2, [r3, #0]
			if(response == 1)
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <main+0x3fc>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d11a      	bne.n	80015ba <main+0x3ea>
			{
			   	printf("X=%6d Y=%6d Z=%6d\r", data.AXIS_X, data.AXIS_Y, data.AXIS_Z);
 8001584:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001588:	4619      	mov	r1, r3
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	461a      	mov	r2, r3
 8001590:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001594:	480f      	ldr	r0, [pc, #60]	; (80015d4 <main+0x404>)
 8001596:	f001 f813 	bl	80025c0 <printf>
				protocolComplete(direction, data.AXIS_X, data.AXIS_Y, data.AXIS_Z, temp);
 800159a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800159e:	b218      	sxth	r0, r3
 80015a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015a8:	f9b7 4008 	ldrsh.w	r4, [r7, #8]
 80015ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	4623      	mov	r3, r4
 80015b4:	f7ff fb6a 	bl	8000c8c <protocolComplete>
 80015b8:	e6e7      	b.n	800138a <main+0x1ba>
			}
			else
			{
				errorcountRAW++;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <main+0x408>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <main+0x408>)
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	e6e0      	b.n	800138a <main+0x1ba>
			}
		}
		else
		{
			continue;
 80015c8:	bf00      	nop
		}
	}
 80015ca:	e6de      	b.n	800138a <main+0x1ba>
 80015cc:	20000a74 	.word	0x20000a74
 80015d0:	20000a76 	.word	0x20000a76
 80015d4:	080095f0 	.word	0x080095f0
 80015d8:	20000a77 	.word	0x20000a77

080015dc <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop

08001614 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
 return -1;
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop

08001628 <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d002      	beq.n	800163e <_fstat+0x16>
  return -1;
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
 800163c:	e001      	b.n	8001642 <_fstat+0x1a>
 else
  return -2;
 800163e:	f06f 0301 	mvn.w	r3, #1
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop

08001650 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <_sbrk+0x60>)
 800165a:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d108      	bne.n	8001676 <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <_sbrk+0x64>)
 8001666:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	4413      	add	r3, r2
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <_sbrk+0x6c>)
 8001674:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <_sbrk+0x64>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 8001688:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 800168c:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <_sbrk+0x6c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d301      	bcc.n	800169c <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 8001698:	2300      	movs	r3, #0
 800169a:	e003      	b.n	80016a4 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 800169c:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <_sbrk+0x64>)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 80016a2:	693b      	ldr	r3, [r7, #16]
 }
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	0000f540 	.word	0x0000f540
 80016b4:	20000a38 	.word	0x20000a38
 80016b8:	20000a80 	.word	0x20000a80
 80016bc:	20000a3c 	.word	0x20000a3c

080016c0 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop

080016d0 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 80016d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	e003      	b.n	80016fe <delay+0x16>
  {
    __NOP();
 80016f6:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3301      	adds	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	429a      	cmp	r2, r3
 8001704:	d3f7      	bcc.n	80016f6 <delay+0xe>
  {
    __NOP();
  }
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop

08001714 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8001714:	b598      	push	{r3, r4, r7, lr}
 8001716:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8001718:	4a06      	ldr	r2, [pc, #24]	; (8001734 <SystemInit+0x20>)
 800171a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800171e:	4614      	mov	r4, r2
 8001720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8001726:	f000 f807 	bl	8001738 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 800172a:	f000 f83d 	bl	80017a8 <SystemCoreClockSetup>
}
 800172e:	bf00      	nop
 8001730:	bd98      	pop	{r3, r4, r7, pc}
 8001732:	bf00      	nop
 8001734:	2000ffc4 	.word	0x2000ffc4

08001738 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173e:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001740:	4b16      	ldr	r3, [pc, #88]	; (800179c <SystemCoreSetup+0x64>)
 8001742:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <SystemCoreSetup+0x68>)
 8001744:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001746:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800174a:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800174c:	4a13      	ldr	r2, [pc, #76]	; (800179c <SystemCoreSetup+0x64>)
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <SystemCoreSetup+0x64>)
 8001750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 800175c:	4a0f      	ldr	r2, [pc, #60]	; (800179c <SystemCoreSetup+0x64>)
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <SystemCoreSetup+0x64>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f023 0308 	bic.w	r3, r3, #8
 8001766:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <SystemCoreSetup+0x6c>)
 800176a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176e:	3314      	adds	r3, #20
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f023 030f 	bic.w	r3, r3, #15
 800177a:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f043 0303 	orr.w	r3, r3, #3
 8001782:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <SystemCoreSetup+0x6c>)
 8001786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178a:	3314      	adds	r3, #20
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00
 80017a0:	08000000 	.word	0x08000000
 80017a4:	58001000 	.word	0x58001000

080017a8 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80017ac:	4b75      	ldr	r3, [pc, #468]	; (8001984 <SystemCoreClockSetup+0x1dc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10c      	bne.n	80017d2 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 80017b8:	4a72      	ldr	r2, [pc, #456]	; (8001984 <SystemCoreClockSetup+0x1dc>)
 80017ba:	4b72      	ldr	r3, [pc, #456]	; (8001984 <SystemCoreClockSetup+0x1dc>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80017c4:	bf00      	nop
 80017c6:	4b6f      	ldr	r3, [pc, #444]	; (8001984 <SystemCoreClockSetup+0x1dc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f9      	beq.n	80017c6 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80017d2:	4b6d      	ldr	r3, [pc, #436]	; (8001988 <SystemCoreClockSetup+0x1e0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80017de:	4a6a      	ldr	r2, [pc, #424]	; (8001988 <SystemCoreClockSetup+0x1e0>)
 80017e0:	4b69      	ldr	r3, [pc, #420]	; (8001988 <SystemCoreClockSetup+0x1e0>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e8:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80017ea:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80017ee:	f7ff ff7b 	bl	80016e8 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80017f2:	4a66      	ldr	r2, [pc, #408]	; (800198c <SystemCoreClockSetup+0x1e4>)
 80017f4:	4b65      	ldr	r3, [pc, #404]	; (800198c <SystemCoreClockSetup+0x1e4>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017fc:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80017fe:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001802:	f7ff ff71 	bl	80016e8 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8001806:	4a61      	ldr	r2, [pc, #388]	; (800198c <SystemCoreClockSetup+0x1e4>)
 8001808:	4b60      	ldr	r3, [pc, #384]	; (800198c <SystemCoreClockSetup+0x1e4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001810:	f023 0302 	bic.w	r3, r3, #2
 8001814:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8001816:	4b5e      	ldr	r3, [pc, #376]	; (8001990 <SystemCoreClockSetup+0x1e8>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800181e:	2b00      	cmp	r3, #0
 8001820:	d029      	beq.n	8001876 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8001822:	4a5b      	ldr	r2, [pc, #364]	; (8001990 <SystemCoreClockSetup+0x1e8>)
 8001824:	4b5a      	ldr	r3, [pc, #360]	; (8001990 <SystemCoreClockSetup+0x1e8>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800182c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001830:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8001832:	f000 f927 	bl	8001a84 <OSCHP_GetFrequency>
 8001836:	4602      	mov	r2, r0
 8001838:	4b56      	ldr	r3, [pc, #344]	; (8001994 <SystemCoreClockSetup+0x1ec>)
 800183a:	fba3 2302 	umull	r2, r3, r3, r2
 800183e:	0d1b      	lsrs	r3, r3, #20
 8001840:	3b01      	subs	r3, #1
 8001842:	041b      	lsls	r3, r3, #16
 8001844:	4952      	ldr	r1, [pc, #328]	; (8001990 <SystemCoreClockSetup+0x1e8>)
 8001846:	4a52      	ldr	r2, [pc, #328]	; (8001990 <SystemCoreClockSetup+0x1e8>)
 8001848:	6852      	ldr	r2, [r2, #4]
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 800184e:	4a4f      	ldr	r2, [pc, #316]	; (800198c <SystemCoreClockSetup+0x1e4>)
 8001850:	4b4e      	ldr	r3, [pc, #312]	; (800198c <SystemCoreClockSetup+0x1e4>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800185a:	4a4c      	ldr	r2, [pc, #304]	; (800198c <SystemCoreClockSetup+0x1e4>)
 800185c:	4b4b      	ldr	r3, [pc, #300]	; (800198c <SystemCoreClockSetup+0x1e4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001864:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8001866:	bf00      	nop
 8001868:	4b48      	ldr	r3, [pc, #288]	; (800198c <SystemCoreClockSetup+0x1e4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001870:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8001874:	d1f8      	bne.n	8001868 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001876:	4a45      	ldr	r2, [pc, #276]	; (800198c <SystemCoreClockSetup+0x1e4>)
 8001878:	4b44      	ldr	r3, [pc, #272]	; (800198c <SystemCoreClockSetup+0x1e4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8001882:	4a42      	ldr	r2, [pc, #264]	; (800198c <SystemCoreClockSetup+0x1e4>)
 8001884:	4b41      	ldr	r3, [pc, #260]	; (800198c <SystemCoreClockSetup+0x1e4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f043 0310 	orr.w	r3, r3, #16
 800188c:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800188e:	4b3f      	ldr	r3, [pc, #252]	; (800198c <SystemCoreClockSetup+0x1e4>)
 8001890:	4a41      	ldr	r2, [pc, #260]	; (8001998 <SystemCoreClockSetup+0x1f0>)
 8001892:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001894:	4a3d      	ldr	r2, [pc, #244]	; (800198c <SystemCoreClockSetup+0x1e4>)
 8001896:	4b3d      	ldr	r3, [pc, #244]	; (800198c <SystemCoreClockSetup+0x1e4>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800189e:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 80018a0:	4a3a      	ldr	r2, [pc, #232]	; (800198c <SystemCoreClockSetup+0x1e4>)
 80018a2:	4b3a      	ldr	r3, [pc, #232]	; (800198c <SystemCoreClockSetup+0x1e4>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f023 0310 	bic.w	r3, r3, #16
 80018aa:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 80018ac:	4a37      	ldr	r2, [pc, #220]	; (800198c <SystemCoreClockSetup+0x1e4>)
 80018ae:	4b37      	ldr	r3, [pc, #220]	; (800198c <SystemCoreClockSetup+0x1e4>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b6:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80018b8:	bf00      	nop
 80018ba:	4b34      	ldr	r3, [pc, #208]	; (800198c <SystemCoreClockSetup+0x1e4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f9      	beq.n	80018ba <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80018c6:	4a31      	ldr	r2, [pc, #196]	; (800198c <SystemCoreClockSetup+0x1e4>)
 80018c8:	4b30      	ldr	r3, [pc, #192]	; (800198c <SystemCoreClockSetup+0x1e4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80018d2:	bf00      	nop
 80018d4:	4b2d      	ldr	r3, [pc, #180]	; (800198c <SystemCoreClockSetup+0x1e4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f9      	bne.n	80018d4 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80018e0:	4a2e      	ldr	r2, [pc, #184]	; (800199c <SystemCoreClockSetup+0x1f4>)
 80018e2:	4b2e      	ldr	r3, [pc, #184]	; (800199c <SystemCoreClockSetup+0x1f4>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ea:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <SystemCoreClockSetup+0x1f4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <SystemCoreClockSetup+0x1f4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <SystemCoreClockSetup+0x1f4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80018fe:	4b27      	ldr	r3, [pc, #156]	; (800199c <SystemCoreClockSetup+0x1f4>)
 8001900:	2200      	movs	r2, #0
 8001902:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <SystemCoreClockSetup+0x1f4>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <SystemCoreClockSetup+0x1f4>)
 800190c:	2203      	movs	r2, #3
 800190e:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001910:	4a1e      	ldr	r2, [pc, #120]	; (800198c <SystemCoreClockSetup+0x1e4>)
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <SystemCoreClockSetup+0x1e4>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800191a:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <SystemCoreClockSetup+0x1e4>)
 800191e:	4a20      	ldr	r2, [pc, #128]	; (80019a0 <SystemCoreClockSetup+0x1f8>)
 8001920:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8001922:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001926:	f7ff fedf 	bl	80016e8 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800192a:	bf00      	nop
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <SystemCoreClockSetup+0x1e4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f9      	beq.n	800192c <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <SystemCoreClockSetup+0x1e4>)
 800193a:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <SystemCoreClockSetup+0x1fc>)
 800193c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 800193e:	f241 1094 	movw	r0, #4500	; 0x1194
 8001942:	f7ff fed1 	bl	80016e8 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001946:	bf00      	nop
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <SystemCoreClockSetup+0x1e4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f9      	beq.n	8001948 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <SystemCoreClockSetup+0x1e4>)
 8001956:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <SystemCoreClockSetup+0x200>)
 8001958:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 800195a:	f241 7070 	movw	r0, #6000	; 0x1770
 800195e:	f7ff fec3 	bl	80016e8 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001962:	bf00      	nop
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <SystemCoreClockSetup+0x1e4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f9      	beq.n	8001964 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <SystemCoreClockSetup+0x204>)
 8001972:	2205      	movs	r2, #5
 8001974:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <SystemCoreClockSetup+0x1f4>)
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 800197c:	f000 f818 	bl	80019b0 <SystemCoreClockUpdate>
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	50004200 	.word	0x50004200
 8001988:	50004400 	.word	0x50004400
 800198c:	50004710 	.word	0x50004710
 8001990:	50004700 	.word	0x50004700
 8001994:	6b5fca6b 	.word	0x6b5fca6b
 8001998:	01134f00 	.word	0x01134f00
 800199c:	50004600 	.word	0x50004600
 80019a0:	01074f00 	.word	0x01074f00
 80019a4:	01044f00 	.word	0x01044f00
 80019a8:	01034f00 	.word	0x01034f00
 80019ac:	50004160 	.word	0x50004160

080019b0 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80019b6:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <SystemCoreClockUpdate+0xc4>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d03e      	beq.n	8001a40 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <SystemCoreClockUpdate+0xc8>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d002      	beq.n	80019d4 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80019ce:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <SystemCoreClockUpdate+0xcc>)
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	e002      	b.n	80019da <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80019d4:	f000 f856 	bl	8001a84 <OSCHP_GetFrequency>
 80019d8:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80019da:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <SystemCoreClockUpdate+0xc8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d020      	beq.n	8001a28 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <SystemCoreClockUpdate+0xc8>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80019ee:	0e1b      	lsrs	r3, r3, #24
 80019f0:	3301      	adds	r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <SystemCoreClockUpdate+0xc8>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80019fc:	0a1b      	lsrs	r3, r3, #8
 80019fe:	3301      	adds	r3, #1
 8001a00:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <SystemCoreClockUpdate+0xc8>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a0a:	0c1b      	lsrs	r3, r3, #16
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	fb02 f303 	mul.w	r3, r2, r3
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	fb02 f303 	mul.w	r3, r2, r3
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	e00d      	b.n	8001a44 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <SystemCoreClockUpdate+0xc8>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a30:	3301      	adds	r3, #1
 8001a32:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	e001      	b.n	8001a44 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <SystemCoreClockUpdate+0xcc>)
 8001a42:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <SystemCoreClockUpdate+0xc4>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <SystemCoreClockUpdate+0xc4>)
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a64:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8001a66:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <SystemCoreClockUpdate+0xd0>)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	50004600 	.word	0x50004600
 8001a78:	50004710 	.word	0x50004710
 8001a7c:	016e3600 	.word	0x016e3600
 8001a80:	2000ffc0 	.word	0x2000ffc0

08001a84 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8001a88:	4b02      	ldr	r3, [pc, #8]	; (8001a94 <OSCHP_GetFrequency+0x10>)
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	00b71b00 	.word	0x00b71b00

08001a98 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8001aa6:	7afb      	ldrb	r3, [r7, #11]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3204      	adds	r2, #4
 8001aba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001abe:	7afb      	ldrb	r3, [r7, #11]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	21f8      	movs	r1, #248	; 0xf8
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	ea02 0103 	and.w	r1, r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1d02      	adds	r2, r0, #4
 8001ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001ade:	7afb      	ldrb	r3, [r7, #11]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4a38      	ldr	r2, [pc, #224]	; (8001bd4 <XMC_GPIO_Init+0x13c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d003      	beq.n	8001b00 <XMC_GPIO_Init+0x68>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4a37      	ldr	r2, [pc, #220]	; (8001bd8 <XMC_GPIO_Init+0x140>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d10a      	bne.n	8001b16 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b04:	7afb      	ldrb	r3, [r7, #11]
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	401a      	ands	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	661a      	str	r2, [r3, #96]	; 0x60
 8001b14:	e03c      	b.n	8001b90 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	7afb      	ldrb	r3, [r7, #11]
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8001b22:	7afb      	ldrb	r3, [r7, #11]
 8001b24:	08db      	lsrs	r3, r3, #3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	461a      	mov	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3210      	adds	r2, #16
 8001b36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	2107      	movs	r1, #7
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	ea02 0103 	and.w	r1, r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f100 0210 	add.w	r2, r0, #16
 8001b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8001b58:	7afb      	ldrb	r3, [r7, #11]
 8001b5a:	08db      	lsrs	r3, r3, #3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	7afb      	ldrb	r3, [r7, #11]
 8001b62:	08db      	lsrs	r3, r3, #3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	3210      	adds	r2, #16
 8001b6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7a1b      	ldrb	r3, [r3, #8]
 8001b74:	4619      	mov	r1, r3
 8001b76:	7afb      	ldrb	r3, [r7, #11]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	ea42 0103 	orr.w	r1, r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f100 0210 	add.w	r2, r0, #16
 8001b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	7afb      	ldrb	r3, [r7, #11]
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	3204      	adds	r2, #4
 8001ba4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	7afb      	ldrb	r3, [r7, #11]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	ea42 0103 	orr.w	r1, r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1d02      	adds	r2, r0, #4
 8001bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	48028e00 	.word	0x48028e00
 8001bd8:	48028f00 	.word	0x48028f00

08001bdc <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001bee:	b2db      	uxtb	r3, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8001c22:	2310      	movs	r3, #16
 8001c24:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fa62 	bl	80020f0 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	79db      	ldrb	r3, [r3, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	79db      	ldrb	r3, [r3, #7]
 8001c38:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4619      	mov	r1, r3
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 faa2 	bl	800218c <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	799b      	ldrb	r3, [r3, #6]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	085b      	lsrs	r3, r3, #1
 8001c54:	3301      	adds	r3, #1
 8001c56:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	791b      	ldrb	r3, [r3, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	061b      	lsls	r3, r3, #24
 8001c6e:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	795b      	ldrb	r3, [r3, #5]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d009      	beq.n	8001c92 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	795b      	ldrb	r3, [r3, #5]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	041b      	lsls	r3, r3, #16
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c90:	e008      	b.n	8001ca4 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	791b      	ldrb	r3, [r3, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	041b      	lsls	r3, r3, #16
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001caa:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	891b      	ldrh	r3, [r3, #8]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop

08001cc8 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cda:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d110      	bne.n	8001d04 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001ce2:	bf00      	nop
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff79 	bl	8001bdc <XMC_USIC_CH_GetTransmitBufferStatus>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b80      	cmp	r3, #128	; 0x80
 8001cee:	d0f9      	beq.n	8001ce4 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001cf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ff81 	bl	8001bfc <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8001cfa:	887a      	ldrh	r2, [r7, #2]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 8001d02:	e003      	b.n	8001d0c <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 8001d04:	887a      	ldrh	r2, [r7, #2]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001d22:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d103      	bne.n	8001d32 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	81fb      	strh	r3, [r7, #14]
 8001d30:	e003      	b.n	8001d3a <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001d38:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8001d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d5a:	b2db      	uxtb	r3, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop

08001d8c <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f9aa 	bl	80020f0 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a0e      	ldr	r2, [pc, #56]	; (8001dd8 <XMC_I2C_CH_Init+0x4c>)
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	889b      	ldrh	r3, [r3, #4]
 8001da6:	4619      	mov	r1, r3
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f817 	bl	8001ddc <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4619      	mov	r1, r3
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f831 	bl	8001e1c <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001dc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	073f0303 	.word	0x073f0303

08001ddc <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8001dee:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8001df2:	d109      	bne.n	8001e08 <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	887b      	ldrh	r3, [r7, #2]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8001e06:	e003      	b.n	8001e10 <XMC_I2C_CH_SetSlaveAddress+0x34>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8001e08:	887b      	ldrh	r3, [r7, #2]
 8001e0a:	021a      	lsls	r2, r3, #8
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <XMC_I2C_CH_SetBaudrate+0x70>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d810      	bhi.n	8001e54 <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 8001e3e:	220a      	movs	r2, #10
 8001e40:	6839      	ldr	r1, [r7, #0]
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f9a2 	bl	800218c <XMC_USIC_CH_SetBaudrate>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d119      	bne.n	8001e82 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e016      	b.n	8001e82 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <XMC_I2C_CH_SetBaudrate+0x74>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d810      	bhi.n	8001e7e <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e60:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8001e68:	2219      	movs	r2, #25
 8001e6a:	6839      	ldr	r1, [r7, #0]
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f98d 	bl	800218c <XMC_USIC_CH_SetBaudrate>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d104      	bne.n	8001e82 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e001      	b.n	8001e82 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	000186a0 	.word	0x000186a0
 8001e90:	00061a80 	.word	0x00061a80

08001e94 <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8001ea4:	887b      	ldrh	r3, [r7, #2]
 8001ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8001eae:	787b      	ldrb	r3, [r7, #1]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d103      	bne.n	8001ebc <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ec2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d110      	bne.n	8001eec <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001eca:	bf00      	nop
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff3b 	bl	8001d48 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b80      	cmp	r3, #128	; 0x80
 8001ed6:	d0f9      	beq.n	8001ecc <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001ed8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff43 	bl	8001d68 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = temp;
  }
}
 8001eea:	e003      	b.n	8001ef4 <XMC_I2C_CH_MasterStart+0x60>

    channel->TBUF[0] = temp;
  }
  else
  {
    channel->IN[0U] = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	807b      	strh	r3, [r7, #2]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8001f16:	787b      	ldrb	r3, [r7, #1]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d103      	bne.n	8001f24 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f2a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d110      	bne.n	8001f54 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001f32:	bf00      	nop
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff07 	bl	8001d48 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d0f9      	beq.n	8001f34 <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001f40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff0f 	bl	8001d68 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = tmp;
  }
}
 8001f52:	e003      	b.n	8001f5c <XMC_I2C_CH_MasterRepeatedStart+0x60>

    channel->TBUF[0] = tmp;
  }
  else
  {
    channel->IN[0U] = tmp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f72:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d111      	bne.n	8001f9e <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001f7a:	bf00      	nop
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff fee3 	bl	8001d48 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b80      	cmp	r3, #128	; 0x80
 8001f86:	d0f9      	beq.n	8001f7c <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001f88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff feeb 	bl	8001d68 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
}
 8001f9c:	e004      	b.n	8001fa8 <XMC_I2C_CH_MasterStop+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001fa4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fc2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d110      	bne.n	8001fec <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001fca:	bf00      	nop
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff febb 	bl	8001d48 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b80      	cmp	r3, #128	; 0x80
 8001fd6:	d0f9      	beq.n	8001fcc <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001fd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff fec3 	bl	8001d68 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
}
 8001fea:	e003      	b.n	8001ff4 <XMC_I2C_CH_MasterTransmit+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001fec:	78fa      	ldrb	r2, [r7, #3]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <XMC_I2C_CH_MasterReceiveNack>:
  }
}

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800200a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d111      	bne.n	8002036 <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002012:	bf00      	nop
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff fe97 	bl	8001d48 <XMC_USIC_CH_GetTransmitBufferStatus>
 800201a:	4603      	mov	r3, r0
 800201c:	2b80      	cmp	r3, #128	; 0x80
 800201e:	d0f9      	beq.n	8002014 <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002020:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff fe9f 	bl	8001d68 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
}
 8002034:	e004      	b.n	8002040 <XMC_I2C_CH_MasterReceiveNack+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f44f 7240 	mov.w	r2, #768	; 0x300
 800203c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002056:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d103      	bne.n	8002066 <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	e003      	b.n	800206e <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800206c:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	2000ffc0 	.word	0x2000ffc0

08002094 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	0f1b      	lsrs	r3, r3, #28
 80020a0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80020a8:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 80020b8:	4413      	add	r3, r2
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	601a      	str	r2, [r3, #0]
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	50004414 	.word	0x50004414

080020d0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80020d4:	f7ff ffd2 	bl	800207c <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80020d8:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80020da:	4b04      	ldr	r3, [pc, #16]	; (80020ec <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80020e2:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	50004600 	.word	0x50004600

080020f0 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a1b      	ldr	r2, [pc, #108]	; (8002168 <XMC_USIC_CH_Enable+0x78>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d003      	beq.n	8002108 <XMC_USIC_CH_Enable+0x18>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a1a      	ldr	r2, [pc, #104]	; (800216c <XMC_USIC_CH_Enable+0x7c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d103      	bne.n	8002110 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8002108:	4819      	ldr	r0, [pc, #100]	; (8002170 <XMC_USIC_CH_Enable+0x80>)
 800210a:	f000 f91f 	bl	800234c <XMC_USIC_Enable>
 800210e:	e016      	b.n	800213e <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a18      	ldr	r2, [pc, #96]	; (8002174 <XMC_USIC_CH_Enable+0x84>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d003      	beq.n	8002120 <XMC_USIC_CH_Enable+0x30>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a17      	ldr	r2, [pc, #92]	; (8002178 <XMC_USIC_CH_Enable+0x88>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d103      	bne.n	8002128 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8002120:	4816      	ldr	r0, [pc, #88]	; (800217c <XMC_USIC_CH_Enable+0x8c>)
 8002122:	f000 f913 	bl	800234c <XMC_USIC_Enable>
 8002126:	e00a      	b.n	800213e <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a15      	ldr	r2, [pc, #84]	; (8002180 <XMC_USIC_CH_Enable+0x90>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d003      	beq.n	8002138 <XMC_USIC_CH_Enable+0x48>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a14      	ldr	r2, [pc, #80]	; (8002184 <XMC_USIC_CH_Enable+0x94>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d102      	bne.n	800213e <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8002138:	4813      	ldr	r0, [pc, #76]	; (8002188 <XMC_USIC_CH_Enable+0x98>)
 800213a:	f000 f907 	bl	800234c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2203      	movs	r2, #3
 8002142:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8002144:	bf00      	nop
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f9      	beq.n	8002146 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f023 020f 	bic.w	r2, r3, #15
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40030000 	.word	0x40030000
 800216c:	40030200 	.word	0x40030200
 8002170:	40030008 	.word	0x40030008
 8002174:	48020000 	.word	0x48020000
 8002178:	48020200 	.word	0x48020200
 800217c:	48020008 	.word	0x48020008
 8002180:	48024000 	.word	0x48024000
 8002184:	48024200 	.word	0x48024200
 8002188:	48024008 	.word	0x48024008

0800218c <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	; 0x38
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b63      	cmp	r3, #99	; 0x63
 800219c:	d958      	bls.n	8002250 <XMC_USIC_CH_SetBaudrate+0xc4>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d055      	beq.n	8002250 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80021a4:	f7ff ff94 	bl	80020d0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80021ac:	fba3 2302 	umull	r2, r3, r3, r2
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4a2b      	ldr	r2, [pc, #172]	; (8002264 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80021c4:	2301      	movs	r3, #1
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80021c8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80021ce:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80021d2:	633b      	str	r3, [r7, #48]	; 0x30
 80021d4:	e022      	b.n	800221c <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021da:	fb02 f203 	mul.w	r2, r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	0a9b      	lsrs	r3, r3, #10
 80021f0:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f8:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002200:	d209      	bcs.n	8002216 <XMC_USIC_CH_SetBaudrate+0x8a>
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	429a      	cmp	r2, r3
 8002208:	d205      	bcs.n	8002216 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8002212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	3b01      	subs	r3, #1
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
 800221c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1d9      	bne.n	80021d6 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8002222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002224:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8002232:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	3a01      	subs	r2, #1
 8002238:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800223a:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 800223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223e:	3b01      	subs	r3, #1
 8002240:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002242:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800224e:	e002      	b.n	8002256 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8002256:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800225a:	4618      	mov	r0, r3
 800225c:	3738      	adds	r7, #56	; 0x38
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	51eb851f 	.word	0x51eb851f
 8002268:	fc0080ef 	.word	0xfc0080ef

0800226c <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002282:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8002294:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	0211      	lsls	r1, r2, #8
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 800229e:	79fa      	ldrb	r2, [r7, #7]
 80022a0:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80022a2:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 80022a4:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	f8ffc0c0 	.word	0xf8ffc0c0

080022bc <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80022d2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 80022e4:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	0211      	lsls	r1, r2, #8
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 80022ee:	79fa      	ldrb	r2, [r7, #7]
 80022f0:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 80022f2:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	efffc0c0 	.word	0xefffc0c0

08002310 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	460b      	mov	r3, r1
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002324:	7afb      	ldrb	r3, [r7, #11]
 8002326:	2107      	movs	r1, #7
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8002330:	7afb      	ldrb	r3, [r7, #11]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8002338:	431a      	orrs	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a0d      	ldr	r2, [pc, #52]	; (800238c <XMC_USIC_Enable+0x40>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d104      	bne.n	8002366 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 800235c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002360:	f7ff fe98 	bl	8002094 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8002364:	e00e      	b.n	8002384 <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a09      	ldr	r2, [pc, #36]	; (8002390 <XMC_USIC_Enable+0x44>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d103      	bne.n	8002376 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800236e:	4809      	ldr	r0, [pc, #36]	; (8002394 <XMC_USIC_Enable+0x48>)
 8002370:	f7ff fe90 	bl	8002094 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8002374:	e006      	b.n	8002384 <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <XMC_USIC_Enable+0x4c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d102      	bne.n	8002384 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 800237e:	4807      	ldr	r0, [pc, #28]	; (800239c <XMC_USIC_Enable+0x50>)
 8002380:	f7ff fe88 	bl	8002094 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40030008 	.word	0x40030008
 8002390:	48020008 	.word	0x48020008
 8002394:	10000080 	.word	0x10000080
 8002398:	48024008 	.word	0x48024008
 800239c:	10000100 	.word	0x10000100

080023a0 <__libc_init_array>:
 80023a0:	b570      	push	{r4, r5, r6, lr}
 80023a2:	4e0f      	ldr	r6, [pc, #60]	; (80023e0 <__libc_init_array+0x40>)
 80023a4:	4d0f      	ldr	r5, [pc, #60]	; (80023e4 <__libc_init_array+0x44>)
 80023a6:	1b76      	subs	r6, r6, r5
 80023a8:	10b6      	asrs	r6, r6, #2
 80023aa:	bf18      	it	ne
 80023ac:	2400      	movne	r4, #0
 80023ae:	d005      	beq.n	80023bc <__libc_init_array+0x1c>
 80023b0:	3401      	adds	r4, #1
 80023b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b6:	4798      	blx	r3
 80023b8:	42a6      	cmp	r6, r4
 80023ba:	d1f9      	bne.n	80023b0 <__libc_init_array+0x10>
 80023bc:	4e0a      	ldr	r6, [pc, #40]	; (80023e8 <__libc_init_array+0x48>)
 80023be:	4d0b      	ldr	r5, [pc, #44]	; (80023ec <__libc_init_array+0x4c>)
 80023c0:	1b76      	subs	r6, r6, r5
 80023c2:	f7ff f97d 	bl	80016c0 <_init>
 80023c6:	10b6      	asrs	r6, r6, #2
 80023c8:	bf18      	it	ne
 80023ca:	2400      	movne	r4, #0
 80023cc:	d006      	beq.n	80023dc <__libc_init_array+0x3c>
 80023ce:	3401      	adds	r4, #1
 80023d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d4:	4798      	blx	r3
 80023d6:	42a6      	cmp	r6, r4
 80023d8:	d1f9      	bne.n	80023ce <__libc_init_array+0x2e>
 80023da:	bd70      	pop	{r4, r5, r6, pc}
 80023dc:	bd70      	pop	{r4, r5, r6, pc}
 80023de:	bf00      	nop
 80023e0:	200009e0 	.word	0x200009e0
 80023e4:	200009e0 	.word	0x200009e0
 80023e8:	200009e0 	.word	0x200009e0
 80023ec:	200009e0 	.word	0x200009e0

080023f0 <memcpy>:
 80023f0:	4684      	mov	ip, r0
 80023f2:	ea41 0300 	orr.w	r3, r1, r0
 80023f6:	f013 0303 	ands.w	r3, r3, #3
 80023fa:	d16d      	bne.n	80024d8 <memcpy+0xe8>
 80023fc:	3a40      	subs	r2, #64	; 0x40
 80023fe:	d341      	bcc.n	8002484 <memcpy+0x94>
 8002400:	f851 3b04 	ldr.w	r3, [r1], #4
 8002404:	f840 3b04 	str.w	r3, [r0], #4
 8002408:	f851 3b04 	ldr.w	r3, [r1], #4
 800240c:	f840 3b04 	str.w	r3, [r0], #4
 8002410:	f851 3b04 	ldr.w	r3, [r1], #4
 8002414:	f840 3b04 	str.w	r3, [r0], #4
 8002418:	f851 3b04 	ldr.w	r3, [r1], #4
 800241c:	f840 3b04 	str.w	r3, [r0], #4
 8002420:	f851 3b04 	ldr.w	r3, [r1], #4
 8002424:	f840 3b04 	str.w	r3, [r0], #4
 8002428:	f851 3b04 	ldr.w	r3, [r1], #4
 800242c:	f840 3b04 	str.w	r3, [r0], #4
 8002430:	f851 3b04 	ldr.w	r3, [r1], #4
 8002434:	f840 3b04 	str.w	r3, [r0], #4
 8002438:	f851 3b04 	ldr.w	r3, [r1], #4
 800243c:	f840 3b04 	str.w	r3, [r0], #4
 8002440:	f851 3b04 	ldr.w	r3, [r1], #4
 8002444:	f840 3b04 	str.w	r3, [r0], #4
 8002448:	f851 3b04 	ldr.w	r3, [r1], #4
 800244c:	f840 3b04 	str.w	r3, [r0], #4
 8002450:	f851 3b04 	ldr.w	r3, [r1], #4
 8002454:	f840 3b04 	str.w	r3, [r0], #4
 8002458:	f851 3b04 	ldr.w	r3, [r1], #4
 800245c:	f840 3b04 	str.w	r3, [r0], #4
 8002460:	f851 3b04 	ldr.w	r3, [r1], #4
 8002464:	f840 3b04 	str.w	r3, [r0], #4
 8002468:	f851 3b04 	ldr.w	r3, [r1], #4
 800246c:	f840 3b04 	str.w	r3, [r0], #4
 8002470:	f851 3b04 	ldr.w	r3, [r1], #4
 8002474:	f840 3b04 	str.w	r3, [r0], #4
 8002478:	f851 3b04 	ldr.w	r3, [r1], #4
 800247c:	f840 3b04 	str.w	r3, [r0], #4
 8002480:	3a40      	subs	r2, #64	; 0x40
 8002482:	d2bd      	bcs.n	8002400 <memcpy+0x10>
 8002484:	3230      	adds	r2, #48	; 0x30
 8002486:	d311      	bcc.n	80024ac <memcpy+0xbc>
 8002488:	f851 3b04 	ldr.w	r3, [r1], #4
 800248c:	f840 3b04 	str.w	r3, [r0], #4
 8002490:	f851 3b04 	ldr.w	r3, [r1], #4
 8002494:	f840 3b04 	str.w	r3, [r0], #4
 8002498:	f851 3b04 	ldr.w	r3, [r1], #4
 800249c:	f840 3b04 	str.w	r3, [r0], #4
 80024a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80024a4:	f840 3b04 	str.w	r3, [r0], #4
 80024a8:	3a10      	subs	r2, #16
 80024aa:	d2ed      	bcs.n	8002488 <memcpy+0x98>
 80024ac:	320c      	adds	r2, #12
 80024ae:	d305      	bcc.n	80024bc <memcpy+0xcc>
 80024b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80024b4:	f840 3b04 	str.w	r3, [r0], #4
 80024b8:	3a04      	subs	r2, #4
 80024ba:	d2f9      	bcs.n	80024b0 <memcpy+0xc0>
 80024bc:	3204      	adds	r2, #4
 80024be:	d008      	beq.n	80024d2 <memcpy+0xe2>
 80024c0:	07d2      	lsls	r2, r2, #31
 80024c2:	bf1c      	itt	ne
 80024c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80024c8:	f800 3b01 	strbne.w	r3, [r0], #1
 80024cc:	d301      	bcc.n	80024d2 <memcpy+0xe2>
 80024ce:	880b      	ldrh	r3, [r1, #0]
 80024d0:	8003      	strh	r3, [r0, #0]
 80024d2:	4660      	mov	r0, ip
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	2a08      	cmp	r2, #8
 80024da:	d313      	bcc.n	8002504 <memcpy+0x114>
 80024dc:	078b      	lsls	r3, r1, #30
 80024de:	d08d      	beq.n	80023fc <memcpy+0xc>
 80024e0:	f010 0303 	ands.w	r3, r0, #3
 80024e4:	d08a      	beq.n	80023fc <memcpy+0xc>
 80024e6:	f1c3 0304 	rsb	r3, r3, #4
 80024ea:	1ad2      	subs	r2, r2, r3
 80024ec:	07db      	lsls	r3, r3, #31
 80024ee:	bf1c      	itt	ne
 80024f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80024f4:	f800 3b01 	strbne.w	r3, [r0], #1
 80024f8:	d380      	bcc.n	80023fc <memcpy+0xc>
 80024fa:	f831 3b02 	ldrh.w	r3, [r1], #2
 80024fe:	f820 3b02 	strh.w	r3, [r0], #2
 8002502:	e77b      	b.n	80023fc <memcpy+0xc>
 8002504:	3a04      	subs	r2, #4
 8002506:	d3d9      	bcc.n	80024bc <memcpy+0xcc>
 8002508:	3a01      	subs	r2, #1
 800250a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800250e:	f800 3b01 	strb.w	r3, [r0], #1
 8002512:	d2f9      	bcs.n	8002508 <memcpy+0x118>
 8002514:	780b      	ldrb	r3, [r1, #0]
 8002516:	7003      	strb	r3, [r0, #0]
 8002518:	784b      	ldrb	r3, [r1, #1]
 800251a:	7043      	strb	r3, [r0, #1]
 800251c:	788b      	ldrb	r3, [r1, #2]
 800251e:	7083      	strb	r3, [r0, #2]
 8002520:	4660      	mov	r0, ip
 8002522:	4770      	bx	lr

08002524 <memset>:
 8002524:	b470      	push	{r4, r5, r6}
 8002526:	0784      	lsls	r4, r0, #30
 8002528:	d046      	beq.n	80025b8 <memset+0x94>
 800252a:	1e54      	subs	r4, r2, #1
 800252c:	2a00      	cmp	r2, #0
 800252e:	d041      	beq.n	80025b4 <memset+0x90>
 8002530:	b2cd      	uxtb	r5, r1
 8002532:	4603      	mov	r3, r0
 8002534:	e002      	b.n	800253c <memset+0x18>
 8002536:	1e62      	subs	r2, r4, #1
 8002538:	b3e4      	cbz	r4, 80025b4 <memset+0x90>
 800253a:	4614      	mov	r4, r2
 800253c:	f803 5b01 	strb.w	r5, [r3], #1
 8002540:	079a      	lsls	r2, r3, #30
 8002542:	d1f8      	bne.n	8002536 <memset+0x12>
 8002544:	2c03      	cmp	r4, #3
 8002546:	d92e      	bls.n	80025a6 <memset+0x82>
 8002548:	b2cd      	uxtb	r5, r1
 800254a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800254e:	2c0f      	cmp	r4, #15
 8002550:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8002554:	d919      	bls.n	800258a <memset+0x66>
 8002556:	f103 0210 	add.w	r2, r3, #16
 800255a:	4626      	mov	r6, r4
 800255c:	3e10      	subs	r6, #16
 800255e:	2e0f      	cmp	r6, #15
 8002560:	f842 5c10 	str.w	r5, [r2, #-16]
 8002564:	f842 5c0c 	str.w	r5, [r2, #-12]
 8002568:	f842 5c08 	str.w	r5, [r2, #-8]
 800256c:	f842 5c04 	str.w	r5, [r2, #-4]
 8002570:	f102 0210 	add.w	r2, r2, #16
 8002574:	d8f2      	bhi.n	800255c <memset+0x38>
 8002576:	f1a4 0210 	sub.w	r2, r4, #16
 800257a:	f022 020f 	bic.w	r2, r2, #15
 800257e:	f004 040f 	and.w	r4, r4, #15
 8002582:	3210      	adds	r2, #16
 8002584:	2c03      	cmp	r4, #3
 8002586:	4413      	add	r3, r2
 8002588:	d90d      	bls.n	80025a6 <memset+0x82>
 800258a:	461e      	mov	r6, r3
 800258c:	4622      	mov	r2, r4
 800258e:	3a04      	subs	r2, #4
 8002590:	2a03      	cmp	r2, #3
 8002592:	f846 5b04 	str.w	r5, [r6], #4
 8002596:	d8fa      	bhi.n	800258e <memset+0x6a>
 8002598:	1f22      	subs	r2, r4, #4
 800259a:	f022 0203 	bic.w	r2, r2, #3
 800259e:	3204      	adds	r2, #4
 80025a0:	4413      	add	r3, r2
 80025a2:	f004 0403 	and.w	r4, r4, #3
 80025a6:	b12c      	cbz	r4, 80025b4 <memset+0x90>
 80025a8:	b2c9      	uxtb	r1, r1
 80025aa:	441c      	add	r4, r3
 80025ac:	f803 1b01 	strb.w	r1, [r3], #1
 80025b0:	42a3      	cmp	r3, r4
 80025b2:	d1fb      	bne.n	80025ac <memset+0x88>
 80025b4:	bc70      	pop	{r4, r5, r6}
 80025b6:	4770      	bx	lr
 80025b8:	4614      	mov	r4, r2
 80025ba:	4603      	mov	r3, r0
 80025bc:	e7c2      	b.n	8002544 <memset+0x20>
 80025be:	bf00      	nop

080025c0 <printf>:
 80025c0:	b40f      	push	{r0, r1, r2, r3}
 80025c2:	b500      	push	{lr}
 80025c4:	4907      	ldr	r1, [pc, #28]	; (80025e4 <printf+0x24>)
 80025c6:	b083      	sub	sp, #12
 80025c8:	ab04      	add	r3, sp, #16
 80025ca:	6808      	ldr	r0, [r1, #0]
 80025cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80025d0:	6881      	ldr	r1, [r0, #8]
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	f001 fcb0 	bl	8003f38 <_vfprintf_r>
 80025d8:	b003      	add	sp, #12
 80025da:	f85d eb04 	ldr.w	lr, [sp], #4
 80025de:	b004      	add	sp, #16
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000460 	.word	0x20000460

080025e8 <_puts_r>:
 80025e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ea:	4605      	mov	r5, r0
 80025ec:	b089      	sub	sp, #36	; 0x24
 80025ee:	4608      	mov	r0, r1
 80025f0:	460c      	mov	r4, r1
 80025f2:	f000 f865 	bl	80026c0 <strlen>
 80025f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80025f8:	4f14      	ldr	r7, [pc, #80]	; (800264c <_puts_r+0x64>)
 80025fa:	9404      	str	r4, [sp, #16]
 80025fc:	2601      	movs	r6, #1
 80025fe:	1c44      	adds	r4, r0, #1
 8002600:	a904      	add	r1, sp, #16
 8002602:	2202      	movs	r2, #2
 8002604:	9403      	str	r4, [sp, #12]
 8002606:	9005      	str	r0, [sp, #20]
 8002608:	68ac      	ldr	r4, [r5, #8]
 800260a:	9706      	str	r7, [sp, #24]
 800260c:	9607      	str	r6, [sp, #28]
 800260e:	9101      	str	r1, [sp, #4]
 8002610:	9202      	str	r2, [sp, #8]
 8002612:	b1b3      	cbz	r3, 8002642 <_puts_r+0x5a>
 8002614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002618:	049a      	lsls	r2, r3, #18
 800261a:	d406      	bmi.n	800262a <_puts_r+0x42>
 800261c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800261e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002626:	81a3      	strh	r3, [r4, #12]
 8002628:	6662      	str	r2, [r4, #100]	; 0x64
 800262a:	4621      	mov	r1, r4
 800262c:	4628      	mov	r0, r5
 800262e:	aa01      	add	r2, sp, #4
 8002630:	f004 fb00 	bl	8006c34 <__sfvwrite_r>
 8002634:	2800      	cmp	r0, #0
 8002636:	bf14      	ite	ne
 8002638:	f04f 30ff 	movne.w	r0, #4294967295
 800263c:	200a      	moveq	r0, #10
 800263e:	b009      	add	sp, #36	; 0x24
 8002640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002642:	4628      	mov	r0, r5
 8002644:	f004 f9b6 	bl	80069b4 <__sinit>
 8002648:	e7e4      	b.n	8002614 <_puts_r+0x2c>
 800264a:	bf00      	nop
 800264c:	08009604 	.word	0x08009604

08002650 <puts>:
 8002650:	4b02      	ldr	r3, [pc, #8]	; (800265c <puts+0xc>)
 8002652:	4601      	mov	r1, r0
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	f7ff bfc7 	b.w	80025e8 <_puts_r>
 800265a:	bf00      	nop
 800265c:	20000460 	.word	0x20000460

08002660 <sprintf>:
 8002660:	b40e      	push	{r1, r2, r3}
 8002662:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002664:	b09c      	sub	sp, #112	; 0x70
 8002666:	ab21      	add	r3, sp, #132	; 0x84
 8002668:	490f      	ldr	r1, [pc, #60]	; (80026a8 <sprintf+0x48>)
 800266a:	f853 2b04 	ldr.w	r2, [r3], #4
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	4605      	mov	r5, r0
 8002672:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8002676:	6808      	ldr	r0, [r1, #0]
 8002678:	9502      	str	r5, [sp, #8]
 800267a:	f44f 7702 	mov.w	r7, #520	; 0x208
 800267e:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8002682:	a902      	add	r1, sp, #8
 8002684:	9506      	str	r5, [sp, #24]
 8002686:	f8ad 7014 	strh.w	r7, [sp, #20]
 800268a:	9404      	str	r4, [sp, #16]
 800268c:	9407      	str	r4, [sp, #28]
 800268e:	f8ad 6016 	strh.w	r6, [sp, #22]
 8002692:	f000 f8d5 	bl	8002840 <_svfprintf_r>
 8002696:	9b02      	ldr	r3, [sp, #8]
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	b01c      	add	sp, #112	; 0x70
 800269e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80026a2:	b003      	add	sp, #12
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000460 	.word	0x20000460
	...

080026c0 <strlen>:
 80026c0:	f890 f000 	pld	[r0]
 80026c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 80026c8:	f020 0107 	bic.w	r1, r0, #7
 80026cc:	f06f 0c00 	mvn.w	ip, #0
 80026d0:	f010 0407 	ands.w	r4, r0, #7
 80026d4:	f891 f020 	pld	[r1, #32]
 80026d8:	f040 8049 	bne.w	800276e <strlen+0xae>
 80026dc:	f04f 0400 	mov.w	r4, #0
 80026e0:	f06f 0007 	mvn.w	r0, #7
 80026e4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80026e8:	f891 f040 	pld	[r1, #64]	; 0x40
 80026ec:	f100 0008 	add.w	r0, r0, #8
 80026f0:	fa82 f24c 	uadd8	r2, r2, ip
 80026f4:	faa4 f28c 	sel	r2, r4, ip
 80026f8:	fa83 f34c 	uadd8	r3, r3, ip
 80026fc:	faa2 f38c 	sel	r3, r2, ip
 8002700:	bb4b      	cbnz	r3, 8002756 <strlen+0x96>
 8002702:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8002706:	fa82 f24c 	uadd8	r2, r2, ip
 800270a:	f100 0008 	add.w	r0, r0, #8
 800270e:	faa4 f28c 	sel	r2, r4, ip
 8002712:	fa83 f34c 	uadd8	r3, r3, ip
 8002716:	faa2 f38c 	sel	r3, r2, ip
 800271a:	b9e3      	cbnz	r3, 8002756 <strlen+0x96>
 800271c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8002720:	fa82 f24c 	uadd8	r2, r2, ip
 8002724:	f100 0008 	add.w	r0, r0, #8
 8002728:	faa4 f28c 	sel	r2, r4, ip
 800272c:	fa83 f34c 	uadd8	r3, r3, ip
 8002730:	faa2 f38c 	sel	r3, r2, ip
 8002734:	b97b      	cbnz	r3, 8002756 <strlen+0x96>
 8002736:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800273a:	f101 0120 	add.w	r1, r1, #32
 800273e:	fa82 f24c 	uadd8	r2, r2, ip
 8002742:	f100 0008 	add.w	r0, r0, #8
 8002746:	faa4 f28c 	sel	r2, r4, ip
 800274a:	fa83 f34c 	uadd8	r3, r3, ip
 800274e:	faa2 f38c 	sel	r3, r2, ip
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0c6      	beq.n	80026e4 <strlen+0x24>
 8002756:	2a00      	cmp	r2, #0
 8002758:	bf04      	itt	eq
 800275a:	3004      	addeq	r0, #4
 800275c:	461a      	moveq	r2, r3
 800275e:	ba12      	rev	r2, r2
 8002760:	fab2 f282 	clz	r2, r2
 8002764:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8002768:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800276c:	4770      	bx	lr
 800276e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002772:	f004 0503 	and.w	r5, r4, #3
 8002776:	f1c4 0000 	rsb	r0, r4, #0
 800277a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800277e:	f014 0f04 	tst.w	r4, #4
 8002782:	f891 f040 	pld	[r1, #64]	; 0x40
 8002786:	fa0c f505 	lsl.w	r5, ip, r5
 800278a:	ea62 0205 	orn	r2, r2, r5
 800278e:	bf1c      	itt	ne
 8002790:	ea63 0305 	ornne	r3, r3, r5
 8002794:	4662      	movne	r2, ip
 8002796:	f04f 0400 	mov.w	r4, #0
 800279a:	e7a9      	b.n	80026f0 <strlen+0x30>

0800279c <strncmp>:
 800279c:	2a00      	cmp	r2, #0
 800279e:	d041      	beq.n	8002824 <strncmp+0x88>
 80027a0:	ea40 0301 	orr.w	r3, r0, r1
 80027a4:	f013 0303 	ands.w	r3, r3, #3
 80027a8:	b4f0      	push	{r4, r5, r6, r7}
 80027aa:	d125      	bne.n	80027f8 <strncmp+0x5c>
 80027ac:	2a03      	cmp	r2, #3
 80027ae:	d923      	bls.n	80027f8 <strncmp+0x5c>
 80027b0:	6804      	ldr	r4, [r0, #0]
 80027b2:	680d      	ldr	r5, [r1, #0]
 80027b4:	42ac      	cmp	r4, r5
 80027b6:	d11f      	bne.n	80027f8 <strncmp+0x5c>
 80027b8:	3a04      	subs	r2, #4
 80027ba:	d035      	beq.n	8002828 <strncmp+0x8c>
 80027bc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 80027c0:	ea25 0404 	bic.w	r4, r5, r4
 80027c4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80027c8:	d131      	bne.n	800282e <strncmp+0x92>
 80027ca:	1d07      	adds	r7, r0, #4
 80027cc:	1d0d      	adds	r5, r1, #4
 80027ce:	e00d      	b.n	80027ec <strncmp+0x50>
 80027d0:	f857 3b04 	ldr.w	r3, [r7], #4
 80027d4:	680e      	ldr	r6, [r1, #0]
 80027d6:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 80027da:	42b3      	cmp	r3, r6
 80027dc:	ea24 0403 	bic.w	r4, r4, r3
 80027e0:	d10a      	bne.n	80027f8 <strncmp+0x5c>
 80027e2:	3a04      	subs	r2, #4
 80027e4:	d020      	beq.n	8002828 <strncmp+0x8c>
 80027e6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80027ea:	d123      	bne.n	8002834 <strncmp+0x98>
 80027ec:	2a03      	cmp	r2, #3
 80027ee:	4629      	mov	r1, r5
 80027f0:	4638      	mov	r0, r7
 80027f2:	f105 0504 	add.w	r5, r5, #4
 80027f6:	d8eb      	bhi.n	80027d0 <strncmp+0x34>
 80027f8:	7803      	ldrb	r3, [r0, #0]
 80027fa:	780c      	ldrb	r4, [r1, #0]
 80027fc:	429c      	cmp	r4, r3
 80027fe:	f102 32ff 	add.w	r2, r2, #4294967295
 8002802:	d10c      	bne.n	800281e <strncmp+0x82>
 8002804:	b182      	cbz	r2, 8002828 <strncmp+0x8c>
 8002806:	b914      	cbnz	r4, 800280e <strncmp+0x72>
 8002808:	e016      	b.n	8002838 <strncmp+0x9c>
 800280a:	b16a      	cbz	r2, 8002828 <strncmp+0x8c>
 800280c:	b17b      	cbz	r3, 800282e <strncmp+0x92>
 800280e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002812:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002816:	42a3      	cmp	r3, r4
 8002818:	f102 32ff 	add.w	r2, r2, #4294967295
 800281c:	d0f5      	beq.n	800280a <strncmp+0x6e>
 800281e:	1b18      	subs	r0, r3, r4
 8002820:	bcf0      	pop	{r4, r5, r6, r7}
 8002822:	4770      	bx	lr
 8002824:	4610      	mov	r0, r2
 8002826:	4770      	bx	lr
 8002828:	4610      	mov	r0, r2
 800282a:	bcf0      	pop	{r4, r5, r6, r7}
 800282c:	4770      	bx	lr
 800282e:	4618      	mov	r0, r3
 8002830:	bcf0      	pop	{r4, r5, r6, r7}
 8002832:	4770      	bx	lr
 8002834:	2000      	movs	r0, #0
 8002836:	e7f3      	b.n	8002820 <strncmp+0x84>
 8002838:	4620      	mov	r0, r4
 800283a:	e7f1      	b.n	8002820 <strncmp+0x84>
 800283c:	0000      	movs	r0, r0
	...

08002840 <_svfprintf_r>:
 8002840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002844:	b0c5      	sub	sp, #276	; 0x114
 8002846:	460c      	mov	r4, r1
 8002848:	9109      	str	r1, [sp, #36]	; 0x24
 800284a:	4615      	mov	r5, r2
 800284c:	930e      	str	r3, [sp, #56]	; 0x38
 800284e:	900a      	str	r0, [sp, #40]	; 0x28
 8002850:	f004 fb9c 	bl	8006f8c <_localeconv_r>
 8002854:	6803      	ldr	r3, [r0, #0]
 8002856:	9317      	str	r3, [sp, #92]	; 0x5c
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff31 	bl	80026c0 <strlen>
 800285e:	89a3      	ldrh	r3, [r4, #12]
 8002860:	9016      	str	r0, [sp, #88]	; 0x58
 8002862:	061e      	lsls	r6, r3, #24
 8002864:	d503      	bpl.n	800286e <_svfprintf_r+0x2e>
 8002866:	6923      	ldr	r3, [r4, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	f001 8133 	beq.w	8003ad4 <_svfprintf_r+0x1294>
 800286e:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8002b08 <_svfprintf_r+0x2c8>
 8002872:	2300      	movs	r3, #0
 8002874:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002878:	9312      	str	r3, [sp, #72]	; 0x48
 800287a:	9329      	str	r3, [sp, #164]	; 0xa4
 800287c:	9328      	str	r3, [sp, #160]	; 0xa0
 800287e:	9319      	str	r3, [sp, #100]	; 0x64
 8002880:	930b      	str	r3, [sp, #44]	; 0x2c
 8002882:	f8df a290 	ldr.w	sl, [pc, #656]	; 8002b14 <_svfprintf_r+0x2d4>
 8002886:	ab34      	add	r3, sp, #208	; 0xd0
 8002888:	9327      	str	r3, [sp, #156]	; 0x9c
 800288a:	4699      	mov	r9, r3
 800288c:	46a8      	mov	r8, r5
 800288e:	f898 3000 	ldrb.w	r3, [r8]
 8002892:	4644      	mov	r4, r8
 8002894:	b1eb      	cbz	r3, 80028d2 <_svfprintf_r+0x92>
 8002896:	2b25      	cmp	r3, #37	; 0x25
 8002898:	d102      	bne.n	80028a0 <_svfprintf_r+0x60>
 800289a:	e01a      	b.n	80028d2 <_svfprintf_r+0x92>
 800289c:	2b25      	cmp	r3, #37	; 0x25
 800289e:	d003      	beq.n	80028a8 <_svfprintf_r+0x68>
 80028a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f9      	bne.n	800289c <_svfprintf_r+0x5c>
 80028a8:	ebc8 0504 	rsb	r5, r8, r4
 80028ac:	b18d      	cbz	r5, 80028d2 <_svfprintf_r+0x92>
 80028ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80028b0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80028b2:	f8c9 8000 	str.w	r8, [r9]
 80028b6:	3301      	adds	r3, #1
 80028b8:	442a      	add	r2, r5
 80028ba:	2b07      	cmp	r3, #7
 80028bc:	f8c9 5004 	str.w	r5, [r9, #4]
 80028c0:	9229      	str	r2, [sp, #164]	; 0xa4
 80028c2:	9328      	str	r3, [sp, #160]	; 0xa0
 80028c4:	f300 80a6 	bgt.w	8002a14 <_svfprintf_r+0x1d4>
 80028c8:	f109 0908 	add.w	r9, r9, #8
 80028cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80028ce:	442b      	add	r3, r5
 80028d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80028d2:	7823      	ldrb	r3, [r4, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80a6 	beq.w	8002a26 <_svfprintf_r+0x1e6>
 80028da:	2300      	movs	r3, #0
 80028dc:	461a      	mov	r2, r3
 80028de:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80028e2:	4619      	mov	r1, r3
 80028e4:	930c      	str	r3, [sp, #48]	; 0x30
 80028e6:	9307      	str	r3, [sp, #28]
 80028e8:	f04f 3bff 	mov.w	fp, #4294967295
 80028ec:	7863      	ldrb	r3, [r4, #1]
 80028ee:	f104 0801 	add.w	r8, r4, #1
 80028f2:	465d      	mov	r5, fp
 80028f4:	f108 0801 	add.w	r8, r8, #1
 80028f8:	f1a3 0020 	sub.w	r0, r3, #32
 80028fc:	2858      	cmp	r0, #88	; 0x58
 80028fe:	f200 8434 	bhi.w	800316a <_svfprintf_r+0x92a>
 8002902:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002906:	03a0      	.short	0x03a0
 8002908:	04320432 	.word	0x04320432
 800290c:	043203a8 	.word	0x043203a8
 8002910:	04320432 	.word	0x04320432
 8002914:	04320432 	.word	0x04320432
 8002918:	03af0432 	.word	0x03af0432
 800291c:	043203bd 	.word	0x043203bd
 8002920:	00e2005d 	.word	0x00e2005d
 8002924:	01090432 	.word	0x01090432
 8002928:	01100110 	.word	0x01100110
 800292c:	01100110 	.word	0x01100110
 8002930:	01100110 	.word	0x01100110
 8002934:	01100110 	.word	0x01100110
 8002938:	04320110 	.word	0x04320110
 800293c:	04320432 	.word	0x04320432
 8002940:	04320432 	.word	0x04320432
 8002944:	04320432 	.word	0x04320432
 8002948:	04320432 	.word	0x04320432
 800294c:	01200432 	.word	0x01200432
 8002950:	04320286 	.word	0x04320286
 8002954:	04320286 	.word	0x04320286
 8002958:	04320432 	.word	0x04320432
 800295c:	02d40432 	.word	0x02d40432
 8002960:	04320432 	.word	0x04320432
 8002964:	043202e5 	.word	0x043202e5
 8002968:	04320432 	.word	0x04320432
 800296c:	04320432 	.word	0x04320432
 8002970:	0432030f 	.word	0x0432030f
 8002974:	033d0432 	.word	0x033d0432
 8002978:	04320432 	.word	0x04320432
 800297c:	04320432 	.word	0x04320432
 8002980:	04320432 	.word	0x04320432
 8002984:	04320432 	.word	0x04320432
 8002988:	04320432 	.word	0x04320432
 800298c:	0391037e 	.word	0x0391037e
 8002990:	02860286 	.word	0x02860286
 8002994:	03990286 	.word	0x03990286
 8002998:	04320391 	.word	0x04320391
 800299c:	04070432 	.word	0x04070432
 80029a0:	04120432 	.word	0x04120432
 80029a4:	006400a3 	.word	0x006400a3
 80029a8:	043203c2 	.word	0x043203c2
 80029ac:	043203c9 	.word	0x043203c9
 80029b0:	043203ea 	.word	0x043203ea
 80029b4:	03f20432 	.word	0x03f20432
 80029b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80029ba:	930e      	str	r3, [sp, #56]	; 0x38
 80029bc:	4240      	negs	r0, r0
 80029be:	900c      	str	r0, [sp, #48]	; 0x30
 80029c0:	9b07      	ldr	r3, [sp, #28]
 80029c2:	f043 0304 	orr.w	r3, r3, #4
 80029c6:	9307      	str	r3, [sp, #28]
 80029c8:	f898 3000 	ldrb.w	r3, [r8]
 80029cc:	e792      	b.n	80028f4 <_svfprintf_r+0xb4>
 80029ce:	980e      	ldr	r0, [sp, #56]	; 0x38
 80029d0:	46ab      	mov	fp, r5
 80029d2:	2100      	movs	r1, #0
 80029d4:	6804      	ldr	r4, [r0, #0]
 80029d6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80029da:	1d07      	adds	r7, r0, #4
 80029dc:	9807      	ldr	r0, [sp, #28]
 80029de:	2330      	movs	r3, #48	; 0x30
 80029e0:	2278      	movs	r2, #120	; 0x78
 80029e2:	458b      	cmp	fp, r1
 80029e4:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 80029e8:	f04f 0500 	mov.w	r5, #0
 80029ec:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 80029f0:	f040 0302 	orr.w	r3, r0, #2
 80029f4:	f2c0 83d6 	blt.w	80031a4 <_svfprintf_r+0x964>
 80029f8:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	9307      	str	r3, [sp, #28]
 8002a02:	ea54 0305 	orrs.w	r3, r4, r5
 8002a06:	970e      	str	r7, [sp, #56]	; 0x38
 8002a08:	f000 83a2 	beq.w	8003150 <_svfprintf_r+0x910>
 8002a0c:	460f      	mov	r7, r1
 8002a0e:	9211      	str	r2, [sp, #68]	; 0x44
 8002a10:	483f      	ldr	r0, [pc, #252]	; (8002b10 <_svfprintf_r+0x2d0>)
 8002a12:	e2e6      	b.n	8002fe2 <_svfprintf_r+0x7a2>
 8002a14:	aa27      	add	r2, sp, #156	; 0x9c
 8002a16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002a18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002a1a:	f005 fbff 	bl	800821c <__ssprint_r>
 8002a1e:	b948      	cbnz	r0, 8002a34 <_svfprintf_r+0x1f4>
 8002a20:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002a24:	e752      	b.n	80028cc <_svfprintf_r+0x8c>
 8002a26:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002a28:	b123      	cbz	r3, 8002a34 <_svfprintf_r+0x1f4>
 8002a2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002a2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002a2e:	aa27      	add	r2, sp, #156	; 0x9c
 8002a30:	f005 fbf4 	bl	800821c <__ssprint_r>
 8002a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a36:	899b      	ldrh	r3, [r3, #12]
 8002a38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a3e:	bf18      	it	ne
 8002a40:	f04f 33ff 	movne.w	r3, #4294967295
 8002a44:	4618      	mov	r0, r3
 8002a46:	b045      	add	sp, #276	; 0x114
 8002a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a4c:	9311      	str	r3, [sp, #68]	; 0x44
 8002a4e:	46ab      	mov	fp, r5
 8002a50:	2a00      	cmp	r2, #0
 8002a52:	f041 823b 	bne.w	8003ecc <_svfprintf_r+0x168c>
 8002a56:	9a07      	ldr	r2, [sp, #28]
 8002a58:	f012 0320 	ands.w	r3, r2, #32
 8002a5c:	f000 8246 	beq.w	8002eec <_svfprintf_r+0x6ac>
 8002a60:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002a62:	3707      	adds	r7, #7
 8002a64:	f027 0307 	bic.w	r3, r7, #7
 8002a68:	2700      	movs	r7, #0
 8002a6a:	f103 0108 	add.w	r1, r3, #8
 8002a6e:	45bb      	cmp	fp, r7
 8002a70:	910e      	str	r1, [sp, #56]	; 0x38
 8002a72:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a76:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8002a7a:	f2c0 8764 	blt.w	8003946 <_svfprintf_r+0x1106>
 8002a7e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8002a82:	9307      	str	r3, [sp, #28]
 8002a84:	ea54 0305 	orrs.w	r3, r4, r5
 8002a88:	f000 8384 	beq.w	8003194 <_svfprintf_r+0x954>
 8002a8c:	ae34      	add	r6, sp, #208	; 0xd0
 8002a8e:	08e2      	lsrs	r2, r4, #3
 8002a90:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8002a94:	08e9      	lsrs	r1, r5, #3
 8002a96:	f004 0307 	and.w	r3, r4, #7
 8002a9a:	460d      	mov	r5, r1
 8002a9c:	4614      	mov	r4, r2
 8002a9e:	3330      	adds	r3, #48	; 0x30
 8002aa0:	ea54 0205 	orrs.w	r2, r4, r5
 8002aa4:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8002aa8:	d1f1      	bne.n	8002a8e <_svfprintf_r+0x24e>
 8002aaa:	9a07      	ldr	r2, [sp, #28]
 8002aac:	07d1      	lsls	r1, r2, #31
 8002aae:	f140 808f 	bpl.w	8002bd0 <_svfprintf_r+0x390>
 8002ab2:	2b30      	cmp	r3, #48	; 0x30
 8002ab4:	f000 808c 	beq.w	8002bd0 <_svfprintf_r+0x390>
 8002ab8:	2230      	movs	r2, #48	; 0x30
 8002aba:	1e73      	subs	r3, r6, #1
 8002abc:	f806 2c01 	strb.w	r2, [r6, #-1]
 8002ac0:	aa34      	add	r2, sp, #208	; 0xd0
 8002ac2:	1ad2      	subs	r2, r2, r3
 8002ac4:	920d      	str	r2, [sp, #52]	; 0x34
 8002ac6:	461e      	mov	r6, r3
 8002ac8:	e085      	b.n	8002bd6 <_svfprintf_r+0x396>
 8002aca:	f898 3000 	ldrb.w	r3, [r8]
 8002ace:	2b2a      	cmp	r3, #42	; 0x2a
 8002ad0:	f108 0401 	add.w	r4, r8, #1
 8002ad4:	f001 81ec 	beq.w	8003eb0 <_svfprintf_r+0x1670>
 8002ad8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002adc:	2809      	cmp	r0, #9
 8002ade:	bf98      	it	ls
 8002ae0:	2500      	movls	r5, #0
 8002ae2:	f201 818e 	bhi.w	8003e02 <_svfprintf_r+0x15c2>
 8002ae6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002aea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002aee:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8002af2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002af6:	2809      	cmp	r0, #9
 8002af8:	d9f5      	bls.n	8002ae6 <_svfprintf_r+0x2a6>
 8002afa:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8002afe:	46a0      	mov	r8, r4
 8002b00:	e6fa      	b.n	80028f8 <_svfprintf_r+0xb8>
 8002b02:	bf00      	nop
 8002b04:	f3af 8000 	nop.w
	...
 8002b10:	0800963c 	.word	0x0800963c
 8002b14:	08009608 	.word	0x08009608
 8002b18:	9b07      	ldr	r3, [sp, #28]
 8002b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1e:	9307      	str	r3, [sp, #28]
 8002b20:	f898 3000 	ldrb.w	r3, [r8]
 8002b24:	e6e6      	b.n	80028f4 <_svfprintf_r+0xb4>
 8002b26:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	461c      	mov	r4, r3
 8002b2e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8002b32:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002b36:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8002b3a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002b3e:	2809      	cmp	r0, #9
 8002b40:	d9f5      	bls.n	8002b2e <_svfprintf_r+0x2ee>
 8002b42:	940c      	str	r4, [sp, #48]	; 0x30
 8002b44:	e6d8      	b.n	80028f8 <_svfprintf_r+0xb8>
 8002b46:	9311      	str	r3, [sp, #68]	; 0x44
 8002b48:	46ab      	mov	fp, r5
 8002b4a:	2a00      	cmp	r2, #0
 8002b4c:	f041 81cc 	bne.w	8003ee8 <_svfprintf_r+0x16a8>
 8002b50:	9b07      	ldr	r3, [sp, #28]
 8002b52:	f043 0310 	orr.w	r3, r3, #16
 8002b56:	9307      	str	r3, [sp, #28]
 8002b58:	9b07      	ldr	r3, [sp, #28]
 8002b5a:	069c      	lsls	r4, r3, #26
 8002b5c:	f140 8537 	bpl.w	80035ce <_svfprintf_r+0xd8e>
 8002b60:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002b62:	3707      	adds	r7, #7
 8002b64:	f027 0707 	bic.w	r7, r7, #7
 8002b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b6c:	f107 0108 	add.w	r1, r7, #8
 8002b70:	910e      	str	r1, [sp, #56]	; 0x38
 8002b72:	4614      	mov	r4, r2
 8002b74:	461d      	mov	r5, r3
 8002b76:	2a00      	cmp	r2, #0
 8002b78:	f173 0300 	sbcs.w	r3, r3, #0
 8002b7c:	f2c0 8562 	blt.w	8003644 <_svfprintf_r+0xe04>
 8002b80:	f1bb 0f00 	cmp.w	fp, #0
 8002b84:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8002b88:	f2c0 853f 	blt.w	800360a <_svfprintf_r+0xdca>
 8002b8c:	9b07      	ldr	r3, [sp, #28]
 8002b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b92:	9307      	str	r3, [sp, #28]
 8002b94:	ea54 0305 	orrs.w	r3, r4, r5
 8002b98:	f000 81e8 	beq.w	8002f6c <_svfprintf_r+0x72c>
 8002b9c:	2d00      	cmp	r5, #0
 8002b9e:	bf08      	it	eq
 8002ba0:	2c0a      	cmpeq	r4, #10
 8002ba2:	f0c0 81e8 	bcc.w	8002f76 <_svfprintf_r+0x736>
 8002ba6:	ae34      	add	r6, sp, #208	; 0xd0
 8002ba8:	4620      	mov	r0, r4
 8002baa:	4629      	mov	r1, r5
 8002bac:	220a      	movs	r2, #10
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f006 fa88 	bl	80090c4 <__aeabi_uldivmod>
 8002bb4:	3230      	adds	r2, #48	; 0x30
 8002bb6:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8002bba:	4620      	mov	r0, r4
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	220a      	movs	r2, #10
 8002bc2:	f006 fa7f 	bl	80090c4 <__aeabi_uldivmod>
 8002bc6:	4604      	mov	r4, r0
 8002bc8:	460d      	mov	r5, r1
 8002bca:	ea54 0305 	orrs.w	r3, r4, r5
 8002bce:	d1eb      	bne.n	8002ba8 <_svfprintf_r+0x368>
 8002bd0:	ab34      	add	r3, sp, #208	; 0xd0
 8002bd2:	1b9b      	subs	r3, r3, r6
 8002bd4:	930d      	str	r3, [sp, #52]	; 0x34
 8002bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bd8:	455b      	cmp	r3, fp
 8002bda:	bfb8      	it	lt
 8002bdc:	465b      	movlt	r3, fp
 8002bde:	9308      	str	r3, [sp, #32]
 8002be0:	2300      	movs	r3, #0
 8002be2:	9313      	str	r3, [sp, #76]	; 0x4c
 8002be4:	b117      	cbz	r7, 8002bec <_svfprintf_r+0x3ac>
 8002be6:	9b08      	ldr	r3, [sp, #32]
 8002be8:	3301      	adds	r3, #1
 8002bea:	9308      	str	r3, [sp, #32]
 8002bec:	9b07      	ldr	r3, [sp, #28]
 8002bee:	f013 0302 	ands.w	r3, r3, #2
 8002bf2:	930f      	str	r3, [sp, #60]	; 0x3c
 8002bf4:	d002      	beq.n	8002bfc <_svfprintf_r+0x3bc>
 8002bf6:	9b08      	ldr	r3, [sp, #32]
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	9308      	str	r3, [sp, #32]
 8002bfc:	9b07      	ldr	r3, [sp, #28]
 8002bfe:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8002c02:	9310      	str	r3, [sp, #64]	; 0x40
 8002c04:	f040 82db 	bne.w	80031be <_svfprintf_r+0x97e>
 8002c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c0a:	9a08      	ldr	r2, [sp, #32]
 8002c0c:	1a9d      	subs	r5, r3, r2
 8002c0e:	2d00      	cmp	r5, #0
 8002c10:	f340 82d5 	ble.w	80031be <_svfprintf_r+0x97e>
 8002c14:	2d10      	cmp	r5, #16
 8002c16:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8002c18:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002c1a:	4fa8      	ldr	r7, [pc, #672]	; (8002ebc <_svfprintf_r+0x67c>)
 8002c1c:	dd27      	ble.n	8002c6e <_svfprintf_r+0x42e>
 8002c1e:	9618      	str	r6, [sp, #96]	; 0x60
 8002c20:	4648      	mov	r0, r9
 8002c22:	2410      	movs	r4, #16
 8002c24:	46b9      	mov	r9, r7
 8002c26:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002c28:	462f      	mov	r7, r5
 8002c2a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002c2c:	e004      	b.n	8002c38 <_svfprintf_r+0x3f8>
 8002c2e:	3f10      	subs	r7, #16
 8002c30:	2f10      	cmp	r7, #16
 8002c32:	f100 0008 	add.w	r0, r0, #8
 8002c36:	dd16      	ble.n	8002c66 <_svfprintf_r+0x426>
 8002c38:	3201      	adds	r2, #1
 8002c3a:	4ba0      	ldr	r3, [pc, #640]	; (8002ebc <_svfprintf_r+0x67c>)
 8002c3c:	9228      	str	r2, [sp, #160]	; 0xa0
 8002c3e:	3110      	adds	r1, #16
 8002c40:	2a07      	cmp	r2, #7
 8002c42:	9129      	str	r1, [sp, #164]	; 0xa4
 8002c44:	e880 0018 	stmia.w	r0, {r3, r4}
 8002c48:	ddf1      	ble.n	8002c2e <_svfprintf_r+0x3ee>
 8002c4a:	aa27      	add	r2, sp, #156	; 0x9c
 8002c4c:	4631      	mov	r1, r6
 8002c4e:	4628      	mov	r0, r5
 8002c50:	f005 fae4 	bl	800821c <__ssprint_r>
 8002c54:	2800      	cmp	r0, #0
 8002c56:	f47f aeed 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8002c5a:	3f10      	subs	r7, #16
 8002c5c:	2f10      	cmp	r7, #16
 8002c5e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8002c60:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002c62:	a834      	add	r0, sp, #208	; 0xd0
 8002c64:	dce8      	bgt.n	8002c38 <_svfprintf_r+0x3f8>
 8002c66:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8002c68:	463d      	mov	r5, r7
 8002c6a:	464f      	mov	r7, r9
 8002c6c:	4681      	mov	r9, r0
 8002c6e:	3201      	adds	r2, #1
 8002c70:	186c      	adds	r4, r5, r1
 8002c72:	2a07      	cmp	r2, #7
 8002c74:	9429      	str	r4, [sp, #164]	; 0xa4
 8002c76:	9228      	str	r2, [sp, #160]	; 0xa0
 8002c78:	f8c9 7000 	str.w	r7, [r9]
 8002c7c:	f8c9 5004 	str.w	r5, [r9, #4]
 8002c80:	f300 842d 	bgt.w	80034de <_svfprintf_r+0xc9e>
 8002c84:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8002c88:	f109 0908 	add.w	r9, r9, #8
 8002c8c:	b177      	cbz	r7, 8002cac <_svfprintf_r+0x46c>
 8002c8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002c90:	3301      	adds	r3, #1
 8002c92:	3401      	adds	r4, #1
 8002c94:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8002c98:	2201      	movs	r2, #1
 8002c9a:	2b07      	cmp	r3, #7
 8002c9c:	9429      	str	r4, [sp, #164]	; 0xa4
 8002c9e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002ca0:	e889 0006 	stmia.w	r9, {r1, r2}
 8002ca4:	f300 83a5 	bgt.w	80033f2 <_svfprintf_r+0xbb2>
 8002ca8:	f109 0908 	add.w	r9, r9, #8
 8002cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002cae:	b16b      	cbz	r3, 8002ccc <_svfprintf_r+0x48c>
 8002cb0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	3402      	adds	r4, #2
 8002cb6:	a920      	add	r1, sp, #128	; 0x80
 8002cb8:	2202      	movs	r2, #2
 8002cba:	2b07      	cmp	r3, #7
 8002cbc:	9429      	str	r4, [sp, #164]	; 0xa4
 8002cbe:	9328      	str	r3, [sp, #160]	; 0xa0
 8002cc0:	e889 0006 	stmia.w	r9, {r1, r2}
 8002cc4:	f300 83a1 	bgt.w	800340a <_svfprintf_r+0xbca>
 8002cc8:	f109 0908 	add.w	r9, r9, #8
 8002ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002cce:	2b80      	cmp	r3, #128	; 0x80
 8002cd0:	f000 82e1 	beq.w	8003296 <_svfprintf_r+0xa56>
 8002cd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cd6:	ebc3 070b 	rsb	r7, r3, fp
 8002cda:	2f00      	cmp	r7, #0
 8002cdc:	dd33      	ble.n	8002d46 <_svfprintf_r+0x506>
 8002cde:	4a78      	ldr	r2, [pc, #480]	; (8002ec0 <_svfprintf_r+0x680>)
 8002ce0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002ce2:	920f      	str	r2, [sp, #60]	; 0x3c
 8002ce4:	2f10      	cmp	r7, #16
 8002ce6:	dd22      	ble.n	8002d2e <_svfprintf_r+0x4ee>
 8002ce8:	4622      	mov	r2, r4
 8002cea:	f04f 0b10 	mov.w	fp, #16
 8002cee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002cf0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002cf2:	e004      	b.n	8002cfe <_svfprintf_r+0x4be>
 8002cf4:	3f10      	subs	r7, #16
 8002cf6:	2f10      	cmp	r7, #16
 8002cf8:	f109 0908 	add.w	r9, r9, #8
 8002cfc:	dd16      	ble.n	8002d2c <_svfprintf_r+0x4ec>
 8002cfe:	3301      	adds	r3, #1
 8002d00:	3210      	adds	r2, #16
 8002d02:	2b07      	cmp	r3, #7
 8002d04:	9229      	str	r2, [sp, #164]	; 0xa4
 8002d06:	9328      	str	r3, [sp, #160]	; 0xa0
 8002d08:	e889 0c00 	stmia.w	r9, {sl, fp}
 8002d0c:	ddf2      	ble.n	8002cf4 <_svfprintf_r+0x4b4>
 8002d0e:	aa27      	add	r2, sp, #156	; 0x9c
 8002d10:	4621      	mov	r1, r4
 8002d12:	4628      	mov	r0, r5
 8002d14:	f005 fa82 	bl	800821c <__ssprint_r>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	f47f ae8b 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8002d1e:	3f10      	subs	r7, #16
 8002d20:	2f10      	cmp	r7, #16
 8002d22:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002d24:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002d26:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002d2a:	dce8      	bgt.n	8002cfe <_svfprintf_r+0x4be>
 8002d2c:	4614      	mov	r4, r2
 8002d2e:	3301      	adds	r3, #1
 8002d30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002d32:	9328      	str	r3, [sp, #160]	; 0xa0
 8002d34:	443c      	add	r4, r7
 8002d36:	2b07      	cmp	r3, #7
 8002d38:	9429      	str	r4, [sp, #164]	; 0xa4
 8002d3a:	e889 0084 	stmia.w	r9, {r2, r7}
 8002d3e:	f300 834c 	bgt.w	80033da <_svfprintf_r+0xb9a>
 8002d42:	f109 0908 	add.w	r9, r9, #8
 8002d46:	9b07      	ldr	r3, [sp, #28]
 8002d48:	05da      	lsls	r2, r3, #23
 8002d4a:	f100 823a 	bmi.w	80031c2 <_svfprintf_r+0x982>
 8002d4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002d50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002d52:	f8c9 6000 	str.w	r6, [r9]
 8002d56:	3301      	adds	r3, #1
 8002d58:	440c      	add	r4, r1
 8002d5a:	2b07      	cmp	r3, #7
 8002d5c:	9429      	str	r4, [sp, #164]	; 0xa4
 8002d5e:	f8c9 1004 	str.w	r1, [r9, #4]
 8002d62:	9328      	str	r3, [sp, #160]	; 0xa0
 8002d64:	f300 8323 	bgt.w	80033ae <_svfprintf_r+0xb6e>
 8002d68:	f109 0908 	add.w	r9, r9, #8
 8002d6c:	9b07      	ldr	r3, [sp, #28]
 8002d6e:	0759      	lsls	r1, r3, #29
 8002d70:	d53f      	bpl.n	8002df2 <_svfprintf_r+0x5b2>
 8002d72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d74:	9a08      	ldr	r2, [sp, #32]
 8002d76:	1a9d      	subs	r5, r3, r2
 8002d78:	2d00      	cmp	r5, #0
 8002d7a:	dd3a      	ble.n	8002df2 <_svfprintf_r+0x5b2>
 8002d7c:	2d10      	cmp	r5, #16
 8002d7e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002d80:	4f4e      	ldr	r7, [pc, #312]	; (8002ebc <_svfprintf_r+0x67c>)
 8002d82:	dd23      	ble.n	8002dcc <_svfprintf_r+0x58c>
 8002d84:	4622      	mov	r2, r4
 8002d86:	2610      	movs	r6, #16
 8002d88:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8002d8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002d8e:	e004      	b.n	8002d9a <_svfprintf_r+0x55a>
 8002d90:	3d10      	subs	r5, #16
 8002d92:	2d10      	cmp	r5, #16
 8002d94:	f109 0908 	add.w	r9, r9, #8
 8002d98:	dd17      	ble.n	8002dca <_svfprintf_r+0x58a>
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	4947      	ldr	r1, [pc, #284]	; (8002ebc <_svfprintf_r+0x67c>)
 8002d9e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002da0:	3210      	adds	r2, #16
 8002da2:	2b07      	cmp	r3, #7
 8002da4:	9229      	str	r2, [sp, #164]	; 0xa4
 8002da6:	e889 0042 	stmia.w	r9, {r1, r6}
 8002daa:	ddf1      	ble.n	8002d90 <_svfprintf_r+0x550>
 8002dac:	aa27      	add	r2, sp, #156	; 0x9c
 8002dae:	4621      	mov	r1, r4
 8002db0:	4658      	mov	r0, fp
 8002db2:	f005 fa33 	bl	800821c <__ssprint_r>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	f47f ae3c 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8002dbc:	3d10      	subs	r5, #16
 8002dbe:	2d10      	cmp	r5, #16
 8002dc0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002dc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002dc4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002dc8:	dce7      	bgt.n	8002d9a <_svfprintf_r+0x55a>
 8002dca:	4614      	mov	r4, r2
 8002dcc:	3301      	adds	r3, #1
 8002dce:	442c      	add	r4, r5
 8002dd0:	2b07      	cmp	r3, #7
 8002dd2:	9429      	str	r4, [sp, #164]	; 0xa4
 8002dd4:	9328      	str	r3, [sp, #160]	; 0xa0
 8002dd6:	f8c9 7000 	str.w	r7, [r9]
 8002dda:	f8c9 5004 	str.w	r5, [r9, #4]
 8002dde:	dd08      	ble.n	8002df2 <_svfprintf_r+0x5b2>
 8002de0:	aa27      	add	r2, sp, #156	; 0x9c
 8002de2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002de4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002de6:	f005 fa19 	bl	800821c <__ssprint_r>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	f47f ae22 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8002df0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002df4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002df6:	9908      	ldr	r1, [sp, #32]
 8002df8:	428a      	cmp	r2, r1
 8002dfa:	bfac      	ite	ge
 8002dfc:	189b      	addge	r3, r3, r2
 8002dfe:	185b      	addlt	r3, r3, r1
 8002e00:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e02:	2c00      	cmp	r4, #0
 8002e04:	f040 82df 	bne.w	80033c6 <_svfprintf_r+0xb86>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	9328      	str	r3, [sp, #160]	; 0xa0
 8002e0c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002e10:	e53d      	b.n	800288e <_svfprintf_r+0x4e>
 8002e12:	9311      	str	r3, [sp, #68]	; 0x44
 8002e14:	46ab      	mov	fp, r5
 8002e16:	2a00      	cmp	r2, #0
 8002e18:	f041 806a 	bne.w	8003ef0 <_svfprintf_r+0x16b0>
 8002e1c:	9b07      	ldr	r3, [sp, #28]
 8002e1e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002e20:	071a      	lsls	r2, r3, #28
 8002e22:	f107 0707 	add.w	r7, r7, #7
 8002e26:	f140 8576 	bpl.w	8003916 <_svfprintf_r+0x10d6>
 8002e2a:	f027 0307 	bic.w	r3, r7, #7
 8002e2e:	ed93 7b00 	vldr	d7, [r3]
 8002e32:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002e36:	f103 0208 	add.w	r2, r3, #8
 8002e3a:	920e      	str	r2, [sp, #56]	; 0x38
 8002e3c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8002e40:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8002e44:	911a      	str	r1, [sp, #104]	; 0x68
 8002e46:	931b      	str	r3, [sp, #108]	; 0x6c
 8002e48:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e50:	4620      	mov	r0, r4
 8002e52:	4629      	mov	r1, r5
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <_svfprintf_r+0x684>)
 8002e56:	f006 f8f7 	bl	8009048 <__aeabi_dcmpun>
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	f040 84da 	bne.w	8003814 <_svfprintf_r+0xfd4>
 8002e60:	f04f 32ff 	mov.w	r2, #4294967295
 8002e64:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <_svfprintf_r+0x684>)
 8002e66:	4620      	mov	r0, r4
 8002e68:	4629      	mov	r1, r5
 8002e6a:	f006 f8cf 	bl	800900c <__aeabi_dcmple>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	f040 84d0 	bne.w	8003814 <_svfprintf_r+0xfd4>
 8002e74:	2200      	movs	r2, #0
 8002e76:	2300      	movs	r3, #0
 8002e78:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8002e7c:	f006 f8bc 	bl	8008ff8 <__aeabi_dcmplt>
 8002e80:	2800      	cmp	r0, #0
 8002e82:	f040 875a 	bne.w	8003d3a <_svfprintf_r+0x14fa>
 8002e86:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8002e8a:	4e0f      	ldr	r6, [pc, #60]	; (8002ec8 <_svfprintf_r+0x688>)
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <_svfprintf_r+0x68c>)
 8002e8e:	9907      	ldr	r1, [sp, #28]
 8002e90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002e94:	9107      	str	r1, [sp, #28]
 8002e96:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002e98:	2203      	movs	r2, #3
 8002e9a:	f04f 0b00 	mov.w	fp, #0
 8002e9e:	9208      	str	r2, [sp, #32]
 8002ea0:	2947      	cmp	r1, #71	; 0x47
 8002ea2:	bfd8      	it	le
 8002ea4:	461e      	movle	r6, r3
 8002ea6:	920d      	str	r2, [sp, #52]	; 0x34
 8002ea8:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8002eac:	e69a      	b.n	8002be4 <_svfprintf_r+0x3a4>
 8002eae:	9b07      	ldr	r3, [sp, #28]
 8002eb0:	f043 0308 	orr.w	r3, r3, #8
 8002eb4:	9307      	str	r3, [sp, #28]
 8002eb6:	f898 3000 	ldrb.w	r3, [r8]
 8002eba:	e51b      	b.n	80028f4 <_svfprintf_r+0xb4>
 8002ebc:	0800965c 	.word	0x0800965c
 8002ec0:	08009608 	.word	0x08009608
 8002ec4:	7fefffff 	.word	0x7fefffff
 8002ec8:	0800961c 	.word	0x0800961c
 8002ecc:	08009618 	.word	0x08009618
 8002ed0:	9311      	str	r3, [sp, #68]	; 0x44
 8002ed2:	46ab      	mov	fp, r5
 8002ed4:	2a00      	cmp	r2, #0
 8002ed6:	f041 8017 	bne.w	8003f08 <_svfprintf_r+0x16c8>
 8002eda:	9b07      	ldr	r3, [sp, #28]
 8002edc:	f043 0310 	orr.w	r3, r3, #16
 8002ee0:	9307      	str	r3, [sp, #28]
 8002ee2:	9a07      	ldr	r2, [sp, #28]
 8002ee4:	f012 0320 	ands.w	r3, r2, #32
 8002ee8:	f47f adba 	bne.w	8002a60 <_svfprintf_r+0x220>
 8002eec:	9907      	ldr	r1, [sp, #28]
 8002eee:	f011 0210 	ands.w	r2, r1, #16
 8002ef2:	f000 845b 	beq.w	80037ac <_svfprintf_r+0xf6c>
 8002ef6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002ef8:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002efc:	f1bb 0f00 	cmp.w	fp, #0
 8002f00:	6804      	ldr	r4, [r0, #0]
 8002f02:	f100 0704 	add.w	r7, r0, #4
 8002f06:	f04f 0500 	mov.w	r5, #0
 8002f0a:	f2c0 851b 	blt.w	8003944 <_svfprintf_r+0x1104>
 8002f0e:	460a      	mov	r2, r1
 8002f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f14:	9207      	str	r2, [sp, #28]
 8002f16:	ea54 0205 	orrs.w	r2, r4, r5
 8002f1a:	970e      	str	r7, [sp, #56]	; 0x38
 8002f1c:	f000 813a 	beq.w	8003194 <_svfprintf_r+0x954>
 8002f20:	461f      	mov	r7, r3
 8002f22:	e5b3      	b.n	8002a8c <_svfprintf_r+0x24c>
 8002f24:	9311      	str	r3, [sp, #68]	; 0x44
 8002f26:	46ab      	mov	fp, r5
 8002f28:	2a00      	cmp	r2, #0
 8002f2a:	f040 87e9 	bne.w	8003f00 <_svfprintf_r+0x16c0>
 8002f2e:	9b07      	ldr	r3, [sp, #28]
 8002f30:	f043 0310 	orr.w	r3, r3, #16
 8002f34:	9307      	str	r3, [sp, #28]
 8002f36:	9a07      	ldr	r2, [sp, #28]
 8002f38:	f012 0320 	ands.w	r3, r2, #32
 8002f3c:	f000 832c 	beq.w	8003598 <_svfprintf_r+0xd58>
 8002f40:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002f42:	3707      	adds	r7, #7
 8002f44:	f027 0307 	bic.w	r3, r7, #7
 8002f48:	2700      	movs	r7, #0
 8002f4a:	f103 0108 	add.w	r1, r3, #8
 8002f4e:	45bb      	cmp	fp, r7
 8002f50:	910e      	str	r1, [sp, #56]	; 0x38
 8002f52:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002f56:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8002f5a:	f2c0 8356 	blt.w	800360a <_svfprintf_r+0xdca>
 8002f5e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8002f62:	9307      	str	r3, [sp, #28]
 8002f64:	ea54 0305 	orrs.w	r3, r4, r5
 8002f68:	f47f ae18 	bne.w	8002b9c <_svfprintf_r+0x35c>
 8002f6c:	f1bb 0f00 	cmp.w	fp, #0
 8002f70:	f000 80f5 	beq.w	800315e <_svfprintf_r+0x91e>
 8002f74:	2400      	movs	r4, #0
 8002f76:	ae44      	add	r6, sp, #272	; 0x110
 8002f78:	3430      	adds	r4, #48	; 0x30
 8002f7a:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8002f7e:	e627      	b.n	8002bd0 <_svfprintf_r+0x390>
 8002f80:	9311      	str	r3, [sp, #68]	; 0x44
 8002f82:	46ab      	mov	fp, r5
 8002f84:	2a00      	cmp	r2, #0
 8002f86:	f040 87b7 	bne.w	8003ef8 <_svfprintf_r+0x16b8>
 8002f8a:	9b07      	ldr	r3, [sp, #28]
 8002f8c:	48af      	ldr	r0, [pc, #700]	; (800324c <_svfprintf_r+0xa0c>)
 8002f8e:	069d      	lsls	r5, r3, #26
 8002f90:	f140 80b5 	bpl.w	80030fe <_svfprintf_r+0x8be>
 8002f94:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002f96:	3707      	adds	r7, #7
 8002f98:	f027 0307 	bic.w	r3, r7, #7
 8002f9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002fa0:	f103 0208 	add.w	r2, r3, #8
 8002fa4:	920e      	str	r2, [sp, #56]	; 0x38
 8002fa6:	9a07      	ldr	r2, [sp, #28]
 8002fa8:	f012 0701 	ands.w	r7, r2, #1
 8002fac:	f000 8239 	beq.w	8003422 <_svfprintf_r+0xbe2>
 8002fb0:	ea54 0305 	orrs.w	r3, r4, r5
 8002fb4:	f000 8504 	beq.w	80039c0 <_svfprintf_r+0x1180>
 8002fb8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8002fbc:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8002fc0:	2700      	movs	r7, #0
 8002fc2:	9a07      	ldr	r2, [sp, #28]
 8002fc4:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8002fc8:	2330      	movs	r3, #48	; 0x30
 8002fca:	45bb      	cmp	fp, r7
 8002fcc:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8002fd0:	f042 0302 	orr.w	r3, r2, #2
 8002fd4:	f2c0 86b6 	blt.w	8003d44 <_svfprintf_r+0x1504>
 8002fd8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	9307      	str	r3, [sp, #28]
 8002fe2:	ae34      	add	r6, sp, #208	; 0xd0
 8002fe4:	0923      	lsrs	r3, r4, #4
 8002fe6:	f004 010f 	and.w	r1, r4, #15
 8002fea:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8002fee:	092a      	lsrs	r2, r5, #4
 8002ff0:	461c      	mov	r4, r3
 8002ff2:	4615      	mov	r5, r2
 8002ff4:	5c43      	ldrb	r3, [r0, r1]
 8002ff6:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8002ffa:	ea54 0305 	orrs.w	r3, r4, r5
 8002ffe:	d1f1      	bne.n	8002fe4 <_svfprintf_r+0x7a4>
 8003000:	e5e6      	b.n	8002bd0 <_svfprintf_r+0x390>
 8003002:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003004:	9311      	str	r3, [sp, #68]	; 0x44
 8003006:	680a      	ldr	r2, [r1, #0]
 8003008:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800300c:	2300      	movs	r3, #0
 800300e:	460a      	mov	r2, r1
 8003010:	461f      	mov	r7, r3
 8003012:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8003016:	3204      	adds	r2, #4
 8003018:	2301      	movs	r3, #1
 800301a:	9308      	str	r3, [sp, #32]
 800301c:	46bb      	mov	fp, r7
 800301e:	9713      	str	r7, [sp, #76]	; 0x4c
 8003020:	920e      	str	r2, [sp, #56]	; 0x38
 8003022:	930d      	str	r3, [sp, #52]	; 0x34
 8003024:	ae2a      	add	r6, sp, #168	; 0xa8
 8003026:	e5e1      	b.n	8002bec <_svfprintf_r+0x3ac>
 8003028:	9311      	str	r3, [sp, #68]	; 0x44
 800302a:	46ab      	mov	fp, r5
 800302c:	2a00      	cmp	r2, #0
 800302e:	f43f ad93 	beq.w	8002b58 <_svfprintf_r+0x318>
 8003032:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003036:	e58f      	b.n	8002b58 <_svfprintf_r+0x318>
 8003038:	9b07      	ldr	r3, [sp, #28]
 800303a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800303e:	9307      	str	r3, [sp, #28]
 8003040:	f898 3000 	ldrb.w	r3, [r8]
 8003044:	e456      	b.n	80028f4 <_svfprintf_r+0xb4>
 8003046:	f898 3000 	ldrb.w	r3, [r8]
 800304a:	2900      	cmp	r1, #0
 800304c:	f47f ac52 	bne.w	80028f4 <_svfprintf_r+0xb4>
 8003050:	2201      	movs	r2, #1
 8003052:	2120      	movs	r1, #32
 8003054:	e44e      	b.n	80028f4 <_svfprintf_r+0xb4>
 8003056:	9b07      	ldr	r3, [sp, #28]
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	9307      	str	r3, [sp, #28]
 800305e:	f898 3000 	ldrb.w	r3, [r8]
 8003062:	e447      	b.n	80028f4 <_svfprintf_r+0xb4>
 8003064:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	930c      	str	r3, [sp, #48]	; 0x30
 800306a:	4618      	mov	r0, r3
 800306c:	2800      	cmp	r0, #0
 800306e:	4623      	mov	r3, r4
 8003070:	f103 0304 	add.w	r3, r3, #4
 8003074:	f6ff aca0 	blt.w	80029b8 <_svfprintf_r+0x178>
 8003078:	930e      	str	r3, [sp, #56]	; 0x38
 800307a:	f898 3000 	ldrb.w	r3, [r8]
 800307e:	e439      	b.n	80028f4 <_svfprintf_r+0xb4>
 8003080:	f898 3000 	ldrb.w	r3, [r8]
 8003084:	2201      	movs	r2, #1
 8003086:	212b      	movs	r1, #43	; 0x2b
 8003088:	e434      	b.n	80028f4 <_svfprintf_r+0xb4>
 800308a:	9b07      	ldr	r3, [sp, #28]
 800308c:	f043 0320 	orr.w	r3, r3, #32
 8003090:	9307      	str	r3, [sp, #28]
 8003092:	f898 3000 	ldrb.w	r3, [r8]
 8003096:	e42d      	b.n	80028f4 <_svfprintf_r+0xb4>
 8003098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800309a:	9311      	str	r3, [sp, #68]	; 0x44
 800309c:	6816      	ldr	r6, [r2, #0]
 800309e:	2400      	movs	r4, #0
 80030a0:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 80030a4:	1d17      	adds	r7, r2, #4
 80030a6:	2e00      	cmp	r6, #0
 80030a8:	f000 8621 	beq.w	8003cee <_svfprintf_r+0x14ae>
 80030ac:	2d00      	cmp	r5, #0
 80030ae:	f2c0 8566 	blt.w	8003b7e <_svfprintf_r+0x133e>
 80030b2:	462a      	mov	r2, r5
 80030b4:	4621      	mov	r1, r4
 80030b6:	4630      	mov	r0, r6
 80030b8:	f004 faa2 	bl	8007600 <memchr>
 80030bc:	2800      	cmp	r0, #0
 80030be:	f000 866b 	beq.w	8003d98 <_svfprintf_r+0x1558>
 80030c2:	1b83      	subs	r3, r0, r6
 80030c4:	930d      	str	r3, [sp, #52]	; 0x34
 80030c6:	46a3      	mov	fp, r4
 80030c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80030cc:	970e      	str	r7, [sp, #56]	; 0x38
 80030ce:	9308      	str	r3, [sp, #32]
 80030d0:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 80030d4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80030d8:	e584      	b.n	8002be4 <_svfprintf_r+0x3a4>
 80030da:	9311      	str	r3, [sp, #68]	; 0x44
 80030dc:	46ab      	mov	fp, r5
 80030de:	2a00      	cmp	r2, #0
 80030e0:	f43f af29 	beq.w	8002f36 <_svfprintf_r+0x6f6>
 80030e4:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80030e8:	e725      	b.n	8002f36 <_svfprintf_r+0x6f6>
 80030ea:	9311      	str	r3, [sp, #68]	; 0x44
 80030ec:	46ab      	mov	fp, r5
 80030ee:	2a00      	cmp	r2, #0
 80030f0:	f040 8716 	bne.w	8003f20 <_svfprintf_r+0x16e0>
 80030f4:	9b07      	ldr	r3, [sp, #28]
 80030f6:	4856      	ldr	r0, [pc, #344]	; (8003250 <_svfprintf_r+0xa10>)
 80030f8:	069d      	lsls	r5, r3, #26
 80030fa:	f53f af4b 	bmi.w	8002f94 <_svfprintf_r+0x754>
 80030fe:	9b07      	ldr	r3, [sp, #28]
 8003100:	06dc      	lsls	r4, r3, #27
 8003102:	f140 8440 	bpl.w	8003986 <_svfprintf_r+0x1146>
 8003106:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003108:	4613      	mov	r3, r2
 800310a:	3304      	adds	r3, #4
 800310c:	6814      	ldr	r4, [r2, #0]
 800310e:	930e      	str	r3, [sp, #56]	; 0x38
 8003110:	2500      	movs	r5, #0
 8003112:	e748      	b.n	8002fa6 <_svfprintf_r+0x766>
 8003114:	f898 3000 	ldrb.w	r3, [r8]
 8003118:	2b6c      	cmp	r3, #108	; 0x6c
 800311a:	f000 84c4 	beq.w	8003aa6 <_svfprintf_r+0x1266>
 800311e:	9807      	ldr	r0, [sp, #28]
 8003120:	f040 0010 	orr.w	r0, r0, #16
 8003124:	9007      	str	r0, [sp, #28]
 8003126:	f7ff bbe5 	b.w	80028f4 <_svfprintf_r+0xb4>
 800312a:	2a00      	cmp	r2, #0
 800312c:	f040 86f4 	bne.w	8003f18 <_svfprintf_r+0x16d8>
 8003130:	9b07      	ldr	r3, [sp, #28]
 8003132:	069b      	lsls	r3, r3, #26
 8003134:	f140 8357 	bpl.w	80037e6 <_svfprintf_r+0xfa6>
 8003138:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800313a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800313c:	6813      	ldr	r3, [r2, #0]
 800313e:	17cd      	asrs	r5, r1, #31
 8003140:	4608      	mov	r0, r1
 8003142:	3204      	adds	r2, #4
 8003144:	4629      	mov	r1, r5
 8003146:	920e      	str	r2, [sp, #56]	; 0x38
 8003148:	e9c3 0100 	strd	r0, r1, [r3]
 800314c:	f7ff bb9f 	b.w	800288e <_svfprintf_r+0x4e>
 8003150:	483f      	ldr	r0, [pc, #252]	; (8003250 <_svfprintf_r+0xa10>)
 8003152:	9211      	str	r2, [sp, #68]	; 0x44
 8003154:	f1bb 0f00 	cmp.w	fp, #0
 8003158:	f040 8174 	bne.w	8003444 <_svfprintf_r+0xc04>
 800315c:	465f      	mov	r7, fp
 800315e:	f04f 0b00 	mov.w	fp, #0
 8003162:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8003166:	ae34      	add	r6, sp, #208	; 0xd0
 8003168:	e535      	b.n	8002bd6 <_svfprintf_r+0x396>
 800316a:	9311      	str	r3, [sp, #68]	; 0x44
 800316c:	2a00      	cmp	r2, #0
 800316e:	f040 86cf 	bne.w	8003f10 <_svfprintf_r+0x16d0>
 8003172:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003174:	2a00      	cmp	r2, #0
 8003176:	f43f ac56 	beq.w	8002a26 <_svfprintf_r+0x1e6>
 800317a:	2300      	movs	r3, #0
 800317c:	2101      	movs	r1, #1
 800317e:	461f      	mov	r7, r3
 8003180:	9108      	str	r1, [sp, #32]
 8003182:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8003186:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800318a:	469b      	mov	fp, r3
 800318c:	9313      	str	r3, [sp, #76]	; 0x4c
 800318e:	910d      	str	r1, [sp, #52]	; 0x34
 8003190:	ae2a      	add	r6, sp, #168	; 0xa8
 8003192:	e52b      	b.n	8002bec <_svfprintf_r+0x3ac>
 8003194:	f1bb 0f00 	cmp.w	fp, #0
 8003198:	f000 8616 	beq.w	8003dc8 <_svfprintf_r+0x1588>
 800319c:	2700      	movs	r7, #0
 800319e:	2400      	movs	r4, #0
 80031a0:	2500      	movs	r5, #0
 80031a2:	e473      	b.n	8002a8c <_svfprintf_r+0x24c>
 80031a4:	482a      	ldr	r0, [pc, #168]	; (8003250 <_svfprintf_r+0xa10>)
 80031a6:	9307      	str	r3, [sp, #28]
 80031a8:	9211      	str	r2, [sp, #68]	; 0x44
 80031aa:	ea54 0305 	orrs.w	r3, r4, r5
 80031ae:	970e      	str	r7, [sp, #56]	; 0x38
 80031b0:	f04f 0700 	mov.w	r7, #0
 80031b4:	f47f af15 	bne.w	8002fe2 <_svfprintf_r+0x7a2>
 80031b8:	2400      	movs	r4, #0
 80031ba:	2500      	movs	r5, #0
 80031bc:	e711      	b.n	8002fe2 <_svfprintf_r+0x7a2>
 80031be:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80031c0:	e564      	b.n	8002c8c <_svfprintf_r+0x44c>
 80031c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80031c4:	2b65      	cmp	r3, #101	; 0x65
 80031c6:	f340 80aa 	ble.w	800331e <_svfprintf_r+0xade>
 80031ca:	2200      	movs	r2, #0
 80031cc:	2300      	movs	r3, #0
 80031ce:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80031d2:	f005 ff07 	bl	8008fe4 <__aeabi_dcmpeq>
 80031d6:	2800      	cmp	r0, #0
 80031d8:	f000 8136 	beq.w	8003448 <_svfprintf_r+0xc08>
 80031dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80031de:	4a1d      	ldr	r2, [pc, #116]	; (8003254 <_svfprintf_r+0xa14>)
 80031e0:	f8c9 2000 	str.w	r2, [r9]
 80031e4:	3301      	adds	r3, #1
 80031e6:	3401      	adds	r4, #1
 80031e8:	2201      	movs	r2, #1
 80031ea:	2b07      	cmp	r3, #7
 80031ec:	9429      	str	r4, [sp, #164]	; 0xa4
 80031ee:	9328      	str	r3, [sp, #160]	; 0xa0
 80031f0:	f8c9 2004 	str.w	r2, [r9, #4]
 80031f4:	f300 83f0 	bgt.w	80039d8 <_svfprintf_r+0x1198>
 80031f8:	f109 0908 	add.w	r9, r9, #8
 80031fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003200:	4293      	cmp	r3, r2
 8003202:	db03      	blt.n	800320c <_svfprintf_r+0x9cc>
 8003204:	9b07      	ldr	r3, [sp, #28]
 8003206:	07db      	lsls	r3, r3, #31
 8003208:	f57f adb0 	bpl.w	8002d6c <_svfprintf_r+0x52c>
 800320c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800320e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003210:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003212:	f8c9 2000 	str.w	r2, [r9]
 8003216:	3301      	adds	r3, #1
 8003218:	440c      	add	r4, r1
 800321a:	2b07      	cmp	r3, #7
 800321c:	9429      	str	r4, [sp, #164]	; 0xa4
 800321e:	f8c9 1004 	str.w	r1, [r9, #4]
 8003222:	9328      	str	r3, [sp, #160]	; 0xa0
 8003224:	f300 8449 	bgt.w	8003aba <_svfprintf_r+0x127a>
 8003228:	f109 0908 	add.w	r9, r9, #8
 800322c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800322e:	1e5d      	subs	r5, r3, #1
 8003230:	2d00      	cmp	r5, #0
 8003232:	f77f ad9b 	ble.w	8002d6c <_svfprintf_r+0x52c>
 8003236:	4a08      	ldr	r2, [pc, #32]	; (8003258 <_svfprintf_r+0xa18>)
 8003238:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800323a:	920f      	str	r2, [sp, #60]	; 0x3c
 800323c:	2d10      	cmp	r5, #16
 800323e:	f340 81e9 	ble.w	8003614 <_svfprintf_r+0xdd4>
 8003242:	2610      	movs	r6, #16
 8003244:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8003246:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800324a:	e00d      	b.n	8003268 <_svfprintf_r+0xa28>
 800324c:	08009628 	.word	0x08009628
 8003250:	0800963c 	.word	0x0800963c
 8003254:	08009658 	.word	0x08009658
 8003258:	08009608 	.word	0x08009608
 800325c:	f109 0908 	add.w	r9, r9, #8
 8003260:	3d10      	subs	r5, #16
 8003262:	2d10      	cmp	r5, #16
 8003264:	f340 81d6 	ble.w	8003614 <_svfprintf_r+0xdd4>
 8003268:	3301      	adds	r3, #1
 800326a:	3410      	adds	r4, #16
 800326c:	2b07      	cmp	r3, #7
 800326e:	9429      	str	r4, [sp, #164]	; 0xa4
 8003270:	9328      	str	r3, [sp, #160]	; 0xa0
 8003272:	f8c9 a000 	str.w	sl, [r9]
 8003276:	f8c9 6004 	str.w	r6, [r9, #4]
 800327a:	ddef      	ble.n	800325c <_svfprintf_r+0xa1c>
 800327c:	aa27      	add	r2, sp, #156	; 0x9c
 800327e:	4659      	mov	r1, fp
 8003280:	4638      	mov	r0, r7
 8003282:	f004 ffcb 	bl	800821c <__ssprint_r>
 8003286:	2800      	cmp	r0, #0
 8003288:	f47f abd4 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 800328c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800328e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003290:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003294:	e7e4      	b.n	8003260 <_svfprintf_r+0xa20>
 8003296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003298:	9a08      	ldr	r2, [sp, #32]
 800329a:	1a9f      	subs	r7, r3, r2
 800329c:	2f00      	cmp	r7, #0
 800329e:	f77f ad19 	ble.w	8002cd4 <_svfprintf_r+0x494>
 80032a2:	4abc      	ldr	r2, [pc, #752]	; (8003594 <_svfprintf_r+0xd54>)
 80032a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80032a6:	920f      	str	r2, [sp, #60]	; 0x3c
 80032a8:	2f10      	cmp	r7, #16
 80032aa:	dd2b      	ble.n	8003304 <_svfprintf_r+0xac4>
 80032ac:	464a      	mov	r2, r9
 80032ae:	4621      	mov	r1, r4
 80032b0:	46b9      	mov	r9, r7
 80032b2:	2510      	movs	r5, #16
 80032b4:	4637      	mov	r7, r6
 80032b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80032b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80032ba:	e006      	b.n	80032ca <_svfprintf_r+0xa8a>
 80032bc:	f1a9 0910 	sub.w	r9, r9, #16
 80032c0:	f1b9 0f10 	cmp.w	r9, #16
 80032c4:	f102 0208 	add.w	r2, r2, #8
 80032c8:	dd18      	ble.n	80032fc <_svfprintf_r+0xabc>
 80032ca:	3301      	adds	r3, #1
 80032cc:	3110      	adds	r1, #16
 80032ce:	2b07      	cmp	r3, #7
 80032d0:	9129      	str	r1, [sp, #164]	; 0xa4
 80032d2:	9328      	str	r3, [sp, #160]	; 0xa0
 80032d4:	f8c2 a000 	str.w	sl, [r2]
 80032d8:	6055      	str	r5, [r2, #4]
 80032da:	ddef      	ble.n	80032bc <_svfprintf_r+0xa7c>
 80032dc:	aa27      	add	r2, sp, #156	; 0x9c
 80032de:	4631      	mov	r1, r6
 80032e0:	4620      	mov	r0, r4
 80032e2:	f004 ff9b 	bl	800821c <__ssprint_r>
 80032e6:	2800      	cmp	r0, #0
 80032e8:	f47f aba4 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 80032ec:	f1a9 0910 	sub.w	r9, r9, #16
 80032f0:	f1b9 0f10 	cmp.w	r9, #16
 80032f4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80032f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80032f8:	aa34      	add	r2, sp, #208	; 0xd0
 80032fa:	dce6      	bgt.n	80032ca <_svfprintf_r+0xa8a>
 80032fc:	463e      	mov	r6, r7
 80032fe:	460c      	mov	r4, r1
 8003300:	464f      	mov	r7, r9
 8003302:	4691      	mov	r9, r2
 8003304:	3301      	adds	r3, #1
 8003306:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003308:	9328      	str	r3, [sp, #160]	; 0xa0
 800330a:	443c      	add	r4, r7
 800330c:	2b07      	cmp	r3, #7
 800330e:	9429      	str	r4, [sp, #164]	; 0xa4
 8003310:	e889 0084 	stmia.w	r9, {r2, r7}
 8003314:	f300 823d 	bgt.w	8003792 <_svfprintf_r+0xf52>
 8003318:	f109 0908 	add.w	r9, r9, #8
 800331c:	e4da      	b.n	8002cd4 <_svfprintf_r+0x494>
 800331e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003320:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8003322:	2b01      	cmp	r3, #1
 8003324:	f340 820a 	ble.w	800373c <_svfprintf_r+0xefc>
 8003328:	3501      	adds	r5, #1
 800332a:	3401      	adds	r4, #1
 800332c:	2301      	movs	r3, #1
 800332e:	2d07      	cmp	r5, #7
 8003330:	9429      	str	r4, [sp, #164]	; 0xa4
 8003332:	9528      	str	r5, [sp, #160]	; 0xa0
 8003334:	f8c9 6000 	str.w	r6, [r9]
 8003338:	f8c9 3004 	str.w	r3, [r9, #4]
 800333c:	f300 820f 	bgt.w	800375e <_svfprintf_r+0xf1e>
 8003340:	f109 0908 	add.w	r9, r9, #8
 8003344:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003346:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003348:	f8c9 3000 	str.w	r3, [r9]
 800334c:	3501      	adds	r5, #1
 800334e:	4414      	add	r4, r2
 8003350:	2d07      	cmp	r5, #7
 8003352:	9429      	str	r4, [sp, #164]	; 0xa4
 8003354:	9528      	str	r5, [sp, #160]	; 0xa0
 8003356:	f8c9 2004 	str.w	r2, [r9, #4]
 800335a:	f300 820d 	bgt.w	8003778 <_svfprintf_r+0xf38>
 800335e:	f109 0908 	add.w	r9, r9, #8
 8003362:	2300      	movs	r3, #0
 8003364:	2200      	movs	r2, #0
 8003366:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800336a:	f005 fe3b 	bl	8008fe4 <__aeabi_dcmpeq>
 800336e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003370:	2800      	cmp	r0, #0
 8003372:	f040 80c3 	bne.w	80034fc <_svfprintf_r+0xcbc>
 8003376:	3b01      	subs	r3, #1
 8003378:	3501      	adds	r5, #1
 800337a:	3601      	adds	r6, #1
 800337c:	441c      	add	r4, r3
 800337e:	2d07      	cmp	r5, #7
 8003380:	9528      	str	r5, [sp, #160]	; 0xa0
 8003382:	9429      	str	r4, [sp, #164]	; 0xa4
 8003384:	f8c9 6000 	str.w	r6, [r9]
 8003388:	f8c9 3004 	str.w	r3, [r9, #4]
 800338c:	f300 80f5 	bgt.w	800357a <_svfprintf_r+0xd3a>
 8003390:	f109 0908 	add.w	r9, r9, #8
 8003394:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003396:	f8c9 2004 	str.w	r2, [r9, #4]
 800339a:	3501      	adds	r5, #1
 800339c:	4414      	add	r4, r2
 800339e:	ab23      	add	r3, sp, #140	; 0x8c
 80033a0:	2d07      	cmp	r5, #7
 80033a2:	9429      	str	r4, [sp, #164]	; 0xa4
 80033a4:	9528      	str	r5, [sp, #160]	; 0xa0
 80033a6:	f8c9 3000 	str.w	r3, [r9]
 80033aa:	f77f acdd 	ble.w	8002d68 <_svfprintf_r+0x528>
 80033ae:	aa27      	add	r2, sp, #156	; 0x9c
 80033b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80033b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80033b4:	f004 ff32 	bl	800821c <__ssprint_r>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	f47f ab3b 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 80033be:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80033c0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80033c4:	e4d2      	b.n	8002d6c <_svfprintf_r+0x52c>
 80033c6:	aa27      	add	r2, sp, #156	; 0x9c
 80033c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80033ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80033cc:	f004 ff26 	bl	800821c <__ssprint_r>
 80033d0:	2800      	cmp	r0, #0
 80033d2:	f43f ad19 	beq.w	8002e08 <_svfprintf_r+0x5c8>
 80033d6:	f7ff bb2d 	b.w	8002a34 <_svfprintf_r+0x1f4>
 80033da:	aa27      	add	r2, sp, #156	; 0x9c
 80033dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80033de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80033e0:	f004 ff1c 	bl	800821c <__ssprint_r>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	f47f ab25 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 80033ea:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80033ec:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80033f0:	e4a9      	b.n	8002d46 <_svfprintf_r+0x506>
 80033f2:	aa27      	add	r2, sp, #156	; 0x9c
 80033f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80033f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80033f8:	f004 ff10 	bl	800821c <__ssprint_r>
 80033fc:	2800      	cmp	r0, #0
 80033fe:	f47f ab19 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8003402:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003404:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003408:	e450      	b.n	8002cac <_svfprintf_r+0x46c>
 800340a:	aa27      	add	r2, sp, #156	; 0x9c
 800340c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800340e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003410:	f004 ff04 	bl	800821c <__ssprint_r>
 8003414:	2800      	cmp	r0, #0
 8003416:	f47f ab0d 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 800341a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800341c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003420:	e454      	b.n	8002ccc <_svfprintf_r+0x48c>
 8003422:	f1bb 0f00 	cmp.w	fp, #0
 8003426:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800342a:	f2c0 82e1 	blt.w	80039f0 <_svfprintf_r+0x11b0>
 800342e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8003432:	9307      	str	r3, [sp, #28]
 8003434:	ea54 0305 	orrs.w	r3, r4, r5
 8003438:	f47f add3 	bne.w	8002fe2 <_svfprintf_r+0x7a2>
 800343c:	f1bb 0f00 	cmp.w	fp, #0
 8003440:	f43f ae8c 	beq.w	800315c <_svfprintf_r+0x91c>
 8003444:	2700      	movs	r7, #0
 8003446:	e6b7      	b.n	80031b8 <_svfprintf_r+0x978>
 8003448:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800344a:	2d00      	cmp	r5, #0
 800344c:	f340 82d3 	ble.w	80039f6 <_svfprintf_r+0x11b6>
 8003450:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003452:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003454:	4293      	cmp	r3, r2
 8003456:	bfa8      	it	ge
 8003458:	4613      	movge	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	461d      	mov	r5, r3
 800345e:	dd0d      	ble.n	800347c <_svfprintf_r+0xc3c>
 8003460:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003462:	f8c9 6000 	str.w	r6, [r9]
 8003466:	3301      	adds	r3, #1
 8003468:	442c      	add	r4, r5
 800346a:	2b07      	cmp	r3, #7
 800346c:	9429      	str	r4, [sp, #164]	; 0xa4
 800346e:	f8c9 5004 	str.w	r5, [r9, #4]
 8003472:	9328      	str	r3, [sp, #160]	; 0xa0
 8003474:	f300 83ae 	bgt.w	8003bd4 <_svfprintf_r+0x1394>
 8003478:	f109 0908 	add.w	r9, r9, #8
 800347c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800347e:	2d00      	cmp	r5, #0
 8003480:	bfa8      	it	ge
 8003482:	1b5b      	subge	r3, r3, r5
 8003484:	2b00      	cmp	r3, #0
 8003486:	461d      	mov	r5, r3
 8003488:	f340 80f8 	ble.w	800367c <_svfprintf_r+0xe3c>
 800348c:	4a41      	ldr	r2, [pc, #260]	; (8003594 <_svfprintf_r+0xd54>)
 800348e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003490:	920f      	str	r2, [sp, #60]	; 0x3c
 8003492:	2d10      	cmp	r5, #16
 8003494:	f340 8285 	ble.w	80039a2 <_svfprintf_r+0x1162>
 8003498:	4622      	mov	r2, r4
 800349a:	2710      	movs	r7, #16
 800349c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80034a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80034a2:	e005      	b.n	80034b0 <_svfprintf_r+0xc70>
 80034a4:	f109 0908 	add.w	r9, r9, #8
 80034a8:	3d10      	subs	r5, #16
 80034aa:	2d10      	cmp	r5, #16
 80034ac:	f340 8278 	ble.w	80039a0 <_svfprintf_r+0x1160>
 80034b0:	3301      	adds	r3, #1
 80034b2:	3210      	adds	r2, #16
 80034b4:	2b07      	cmp	r3, #7
 80034b6:	9229      	str	r2, [sp, #164]	; 0xa4
 80034b8:	9328      	str	r3, [sp, #160]	; 0xa0
 80034ba:	f8c9 a000 	str.w	sl, [r9]
 80034be:	f8c9 7004 	str.w	r7, [r9, #4]
 80034c2:	ddef      	ble.n	80034a4 <_svfprintf_r+0xc64>
 80034c4:	aa27      	add	r2, sp, #156	; 0x9c
 80034c6:	4621      	mov	r1, r4
 80034c8:	4658      	mov	r0, fp
 80034ca:	f004 fea7 	bl	800821c <__ssprint_r>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	f47f aab0 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 80034d4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80034d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80034d8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80034dc:	e7e4      	b.n	80034a8 <_svfprintf_r+0xc68>
 80034de:	aa27      	add	r2, sp, #156	; 0x9c
 80034e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80034e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80034e4:	f004 fe9a 	bl	800821c <__ssprint_r>
 80034e8:	2800      	cmp	r0, #0
 80034ea:	f47f aaa3 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 80034ee:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80034f2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80034f4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80034f8:	f7ff bbc8 	b.w	8002c8c <_svfprintf_r+0x44c>
 80034fc:	1e5e      	subs	r6, r3, #1
 80034fe:	2e00      	cmp	r6, #0
 8003500:	f77f af48 	ble.w	8003394 <_svfprintf_r+0xb54>
 8003504:	4b23      	ldr	r3, [pc, #140]	; (8003594 <_svfprintf_r+0xd54>)
 8003506:	930f      	str	r3, [sp, #60]	; 0x3c
 8003508:	2e10      	cmp	r6, #16
 800350a:	dd2c      	ble.n	8003566 <_svfprintf_r+0xd26>
 800350c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8003510:	2710      	movs	r7, #16
 8003512:	46b0      	mov	r8, r6
 8003514:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8003518:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800351a:	e006      	b.n	800352a <_svfprintf_r+0xcea>
 800351c:	f1a8 0810 	sub.w	r8, r8, #16
 8003520:	f1b8 0f10 	cmp.w	r8, #16
 8003524:	f109 0908 	add.w	r9, r9, #8
 8003528:	dd1a      	ble.n	8003560 <_svfprintf_r+0xd20>
 800352a:	3501      	adds	r5, #1
 800352c:	3410      	adds	r4, #16
 800352e:	2d07      	cmp	r5, #7
 8003530:	9429      	str	r4, [sp, #164]	; 0xa4
 8003532:	9528      	str	r5, [sp, #160]	; 0xa0
 8003534:	f8c9 a000 	str.w	sl, [r9]
 8003538:	f8c9 7004 	str.w	r7, [r9, #4]
 800353c:	ddee      	ble.n	800351c <_svfprintf_r+0xcdc>
 800353e:	aa27      	add	r2, sp, #156	; 0x9c
 8003540:	4631      	mov	r1, r6
 8003542:	4658      	mov	r0, fp
 8003544:	f004 fe6a 	bl	800821c <__ssprint_r>
 8003548:	2800      	cmp	r0, #0
 800354a:	f47f aa73 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 800354e:	f1a8 0810 	sub.w	r8, r8, #16
 8003552:	f1b8 0f10 	cmp.w	r8, #16
 8003556:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003558:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800355a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800355e:	dce4      	bgt.n	800352a <_svfprintf_r+0xcea>
 8003560:	4646      	mov	r6, r8
 8003562:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8003566:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003568:	3501      	adds	r5, #1
 800356a:	4434      	add	r4, r6
 800356c:	2d07      	cmp	r5, #7
 800356e:	9429      	str	r4, [sp, #164]	; 0xa4
 8003570:	9528      	str	r5, [sp, #160]	; 0xa0
 8003572:	e889 0048 	stmia.w	r9, {r3, r6}
 8003576:	f77f af0b 	ble.w	8003390 <_svfprintf_r+0xb50>
 800357a:	aa27      	add	r2, sp, #156	; 0x9c
 800357c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800357e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003580:	f004 fe4c 	bl	800821c <__ssprint_r>
 8003584:	2800      	cmp	r0, #0
 8003586:	f47f aa55 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 800358a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800358c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800358e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003592:	e6ff      	b.n	8003394 <_svfprintf_r+0xb54>
 8003594:	08009608 	.word	0x08009608
 8003598:	9907      	ldr	r1, [sp, #28]
 800359a:	f011 0210 	ands.w	r2, r1, #16
 800359e:	f000 81d5 	beq.w	800394c <_svfprintf_r+0x110c>
 80035a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80035a4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80035a8:	f1bb 0f00 	cmp.w	fp, #0
 80035ac:	6804      	ldr	r4, [r0, #0]
 80035ae:	f100 0704 	add.w	r7, r0, #4
 80035b2:	f04f 0500 	mov.w	r5, #0
 80035b6:	db26      	blt.n	8003606 <_svfprintf_r+0xdc6>
 80035b8:	460a      	mov	r2, r1
 80035ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035be:	9207      	str	r2, [sp, #28]
 80035c0:	ea54 0205 	orrs.w	r2, r4, r5
 80035c4:	970e      	str	r7, [sp, #56]	; 0x38
 80035c6:	461f      	mov	r7, r3
 80035c8:	f47f aae8 	bne.w	8002b9c <_svfprintf_r+0x35c>
 80035cc:	e4ce      	b.n	8002f6c <_svfprintf_r+0x72c>
 80035ce:	9b07      	ldr	r3, [sp, #28]
 80035d0:	06d8      	lsls	r0, r3, #27
 80035d2:	d42a      	bmi.n	800362a <_svfprintf_r+0xdea>
 80035d4:	9b07      	ldr	r3, [sp, #28]
 80035d6:	0659      	lsls	r1, r3, #25
 80035d8:	d527      	bpl.n	800362a <_svfprintf_r+0xdea>
 80035da:	990e      	ldr	r1, [sp, #56]	; 0x38
 80035dc:	f9b1 4000 	ldrsh.w	r4, [r1]
 80035e0:	3104      	adds	r1, #4
 80035e2:	17e5      	asrs	r5, r4, #31
 80035e4:	4622      	mov	r2, r4
 80035e6:	462b      	mov	r3, r5
 80035e8:	910e      	str	r1, [sp, #56]	; 0x38
 80035ea:	f7ff bac4 	b.w	8002b76 <_svfprintf_r+0x336>
 80035ee:	990e      	ldr	r1, [sp, #56]	; 0x38
 80035f0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80035f4:	f1bb 0f00 	cmp.w	fp, #0
 80035f8:	680c      	ldr	r4, [r1, #0]
 80035fa:	f101 0704 	add.w	r7, r1, #4
 80035fe:	f04f 0500 	mov.w	r5, #0
 8003602:	f280 824e 	bge.w	8003aa2 <_svfprintf_r+0x1262>
 8003606:	970e      	str	r7, [sp, #56]	; 0x38
 8003608:	461f      	mov	r7, r3
 800360a:	ea54 0305 	orrs.w	r3, r4, r5
 800360e:	f47f aac5 	bne.w	8002b9c <_svfprintf_r+0x35c>
 8003612:	e4b0      	b.n	8002f76 <_svfprintf_r+0x736>
 8003614:	3301      	adds	r3, #1
 8003616:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003618:	9328      	str	r3, [sp, #160]	; 0xa0
 800361a:	442c      	add	r4, r5
 800361c:	2b07      	cmp	r3, #7
 800361e:	9429      	str	r4, [sp, #164]	; 0xa4
 8003620:	e889 0024 	stmia.w	r9, {r2, r5}
 8003624:	f77f aba0 	ble.w	8002d68 <_svfprintf_r+0x528>
 8003628:	e6c1      	b.n	80033ae <_svfprintf_r+0xb6e>
 800362a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800362c:	6814      	ldr	r4, [r2, #0]
 800362e:	4613      	mov	r3, r2
 8003630:	3304      	adds	r3, #4
 8003632:	17e5      	asrs	r5, r4, #31
 8003634:	4622      	mov	r2, r4
 8003636:	930e      	str	r3, [sp, #56]	; 0x38
 8003638:	2a00      	cmp	r2, #0
 800363a:	462b      	mov	r3, r5
 800363c:	f173 0300 	sbcs.w	r3, r3, #0
 8003640:	f6bf aa9e 	bge.w	8002b80 <_svfprintf_r+0x340>
 8003644:	4264      	negs	r4, r4
 8003646:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800364a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800364e:	f1bb 0f00 	cmp.w	fp, #0
 8003652:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8003656:	f6ff aaa1 	blt.w	8002b9c <_svfprintf_r+0x35c>
 800365a:	9b07      	ldr	r3, [sp, #28]
 800365c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003660:	9307      	str	r3, [sp, #28]
 8003662:	f7ff ba9b 	b.w	8002b9c <_svfprintf_r+0x35c>
 8003666:	aa27      	add	r2, sp, #156	; 0x9c
 8003668:	9909      	ldr	r1, [sp, #36]	; 0x24
 800366a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800366c:	f004 fdd6 	bl	800821c <__ssprint_r>
 8003670:	2800      	cmp	r0, #0
 8003672:	f47f a9df 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8003676:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003678:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800367c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800367e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003680:	4432      	add	r2, r6
 8003682:	4617      	mov	r7, r2
 8003684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003686:	4293      	cmp	r3, r2
 8003688:	db47      	blt.n	800371a <_svfprintf_r+0xeda>
 800368a:	9a07      	ldr	r2, [sp, #28]
 800368c:	07d5      	lsls	r5, r2, #31
 800368e:	d444      	bmi.n	800371a <_svfprintf_r+0xeda>
 8003690:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003692:	440e      	add	r6, r1
 8003694:	1bf5      	subs	r5, r6, r7
 8003696:	1acb      	subs	r3, r1, r3
 8003698:	429d      	cmp	r5, r3
 800369a:	bfa8      	it	ge
 800369c:	461d      	movge	r5, r3
 800369e:	2d00      	cmp	r5, #0
 80036a0:	462e      	mov	r6, r5
 80036a2:	dd0d      	ble.n	80036c0 <_svfprintf_r+0xe80>
 80036a4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80036a6:	f8c9 7000 	str.w	r7, [r9]
 80036aa:	3201      	adds	r2, #1
 80036ac:	442c      	add	r4, r5
 80036ae:	2a07      	cmp	r2, #7
 80036b0:	9429      	str	r4, [sp, #164]	; 0xa4
 80036b2:	f8c9 5004 	str.w	r5, [r9, #4]
 80036b6:	9228      	str	r2, [sp, #160]	; 0xa0
 80036b8:	f300 830a 	bgt.w	8003cd0 <_svfprintf_r+0x1490>
 80036bc:	f109 0908 	add.w	r9, r9, #8
 80036c0:	2e00      	cmp	r6, #0
 80036c2:	bfac      	ite	ge
 80036c4:	1b9d      	subge	r5, r3, r6
 80036c6:	461d      	movlt	r5, r3
 80036c8:	2d00      	cmp	r5, #0
 80036ca:	f77f ab4f 	ble.w	8002d6c <_svfprintf_r+0x52c>
 80036ce:	4abb      	ldr	r2, [pc, #748]	; (80039bc <_svfprintf_r+0x117c>)
 80036d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80036d2:	920f      	str	r2, [sp, #60]	; 0x3c
 80036d4:	2d10      	cmp	r5, #16
 80036d6:	dd9d      	ble.n	8003614 <_svfprintf_r+0xdd4>
 80036d8:	2610      	movs	r6, #16
 80036da:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80036dc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80036e0:	e004      	b.n	80036ec <_svfprintf_r+0xeac>
 80036e2:	f109 0908 	add.w	r9, r9, #8
 80036e6:	3d10      	subs	r5, #16
 80036e8:	2d10      	cmp	r5, #16
 80036ea:	dd93      	ble.n	8003614 <_svfprintf_r+0xdd4>
 80036ec:	3301      	adds	r3, #1
 80036ee:	3410      	adds	r4, #16
 80036f0:	2b07      	cmp	r3, #7
 80036f2:	9429      	str	r4, [sp, #164]	; 0xa4
 80036f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80036f6:	f8c9 a000 	str.w	sl, [r9]
 80036fa:	f8c9 6004 	str.w	r6, [r9, #4]
 80036fe:	ddf0      	ble.n	80036e2 <_svfprintf_r+0xea2>
 8003700:	aa27      	add	r2, sp, #156	; 0x9c
 8003702:	4659      	mov	r1, fp
 8003704:	4638      	mov	r0, r7
 8003706:	f004 fd89 	bl	800821c <__ssprint_r>
 800370a:	2800      	cmp	r0, #0
 800370c:	f47f a992 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8003710:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003712:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003714:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003718:	e7e5      	b.n	80036e6 <_svfprintf_r+0xea6>
 800371a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800371c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800371e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003720:	f8c9 1000 	str.w	r1, [r9]
 8003724:	3201      	adds	r2, #1
 8003726:	4404      	add	r4, r0
 8003728:	2a07      	cmp	r2, #7
 800372a:	9429      	str	r4, [sp, #164]	; 0xa4
 800372c:	f8c9 0004 	str.w	r0, [r9, #4]
 8003730:	9228      	str	r2, [sp, #160]	; 0xa0
 8003732:	f300 82b9 	bgt.w	8003ca8 <_svfprintf_r+0x1468>
 8003736:	f109 0908 	add.w	r9, r9, #8
 800373a:	e7a9      	b.n	8003690 <_svfprintf_r+0xe50>
 800373c:	9b07      	ldr	r3, [sp, #28]
 800373e:	07d8      	lsls	r0, r3, #31
 8003740:	f53f adf2 	bmi.w	8003328 <_svfprintf_r+0xae8>
 8003744:	3501      	adds	r5, #1
 8003746:	3401      	adds	r4, #1
 8003748:	2301      	movs	r3, #1
 800374a:	2d07      	cmp	r5, #7
 800374c:	9429      	str	r4, [sp, #164]	; 0xa4
 800374e:	9528      	str	r5, [sp, #160]	; 0xa0
 8003750:	f8c9 6000 	str.w	r6, [r9]
 8003754:	f8c9 3004 	str.w	r3, [r9, #4]
 8003758:	f77f ae1a 	ble.w	8003390 <_svfprintf_r+0xb50>
 800375c:	e70d      	b.n	800357a <_svfprintf_r+0xd3a>
 800375e:	aa27      	add	r2, sp, #156	; 0x9c
 8003760:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003762:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003764:	f004 fd5a 	bl	800821c <__ssprint_r>
 8003768:	2800      	cmp	r0, #0
 800376a:	f47f a963 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 800376e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003770:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8003772:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003776:	e5e5      	b.n	8003344 <_svfprintf_r+0xb04>
 8003778:	aa27      	add	r2, sp, #156	; 0x9c
 800377a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800377c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800377e:	f004 fd4d 	bl	800821c <__ssprint_r>
 8003782:	2800      	cmp	r0, #0
 8003784:	f47f a956 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8003788:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800378a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800378c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003790:	e5e7      	b.n	8003362 <_svfprintf_r+0xb22>
 8003792:	aa27      	add	r2, sp, #156	; 0x9c
 8003794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003796:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003798:	f004 fd40 	bl	800821c <__ssprint_r>
 800379c:	2800      	cmp	r0, #0
 800379e:	f47f a949 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 80037a2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80037a4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80037a8:	f7ff ba94 	b.w	8002cd4 <_svfprintf_r+0x494>
 80037ac:	9907      	ldr	r1, [sp, #28]
 80037ae:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80037b2:	f000 80bb 	beq.w	800392c <_svfprintf_r+0x10ec>
 80037b6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80037b8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80037bc:	4603      	mov	r3, r0
 80037be:	f1bb 0f00 	cmp.w	fp, #0
 80037c2:	f103 0304 	add.w	r3, r3, #4
 80037c6:	8804      	ldrh	r4, [r0, #0]
 80037c8:	f04f 0500 	mov.w	r5, #0
 80037cc:	f2c0 81c5 	blt.w	8003b5a <_svfprintf_r+0x131a>
 80037d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80037d4:	9107      	str	r1, [sp, #28]
 80037d6:	ea54 0105 	orrs.w	r1, r4, r5
 80037da:	930e      	str	r3, [sp, #56]	; 0x38
 80037dc:	f43f acda 	beq.w	8003194 <_svfprintf_r+0x954>
 80037e0:	4617      	mov	r7, r2
 80037e2:	f7ff b953 	b.w	8002a8c <_svfprintf_r+0x24c>
 80037e6:	9b07      	ldr	r3, [sp, #28]
 80037e8:	06df      	lsls	r7, r3, #27
 80037ea:	d40b      	bmi.n	8003804 <_svfprintf_r+0xfc4>
 80037ec:	9b07      	ldr	r3, [sp, #28]
 80037ee:	065e      	lsls	r6, r3, #25
 80037f0:	d508      	bpl.n	8003804 <_svfprintf_r+0xfc4>
 80037f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037f4:	6813      	ldr	r3, [r2, #0]
 80037f6:	3204      	adds	r2, #4
 80037f8:	920e      	str	r2, [sp, #56]	; 0x38
 80037fa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80037fe:	801a      	strh	r2, [r3, #0]
 8003800:	f7ff b845 	b.w	800288e <_svfprintf_r+0x4e>
 8003804:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003806:	6813      	ldr	r3, [r2, #0]
 8003808:	3204      	adds	r2, #4
 800380a:	920e      	str	r2, [sp, #56]	; 0x38
 800380c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	f7ff b83d 	b.w	800288e <_svfprintf_r+0x4e>
 8003814:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	f005 fc14 	bl	8009048 <__aeabi_dcmpun>
 8003820:	2800      	cmp	r0, #0
 8003822:	f040 8305 	bne.w	8003e30 <_svfprintf_r+0x15f0>
 8003826:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003828:	f1bb 3fff 	cmp.w	fp, #4294967295
 800382c:	f023 0720 	bic.w	r7, r3, #32
 8003830:	f000 826c 	beq.w	8003d0c <_svfprintf_r+0x14cc>
 8003834:	2f47      	cmp	r7, #71	; 0x47
 8003836:	f000 8187 	beq.w	8003b48 <_svfprintf_r+0x1308>
 800383a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800383c:	9a07      	ldr	r2, [sp, #28]
 800383e:	2b00      	cmp	r3, #0
 8003840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003844:	920f      	str	r2, [sp, #60]	; 0x3c
 8003846:	f2c0 8280 	blt.w	8003d4a <_svfprintf_r+0x150a>
 800384a:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 800384e:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8003852:	2300      	movs	r3, #0
 8003854:	9308      	str	r3, [sp, #32]
 8003856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003858:	2b66      	cmp	r3, #102	; 0x66
 800385a:	f000 825a 	beq.w	8003d12 <_svfprintf_r+0x14d2>
 800385e:	2b46      	cmp	r3, #70	; 0x46
 8003860:	f000 8147 	beq.w	8003af2 <_svfprintf_r+0x12b2>
 8003864:	2f45      	cmp	r7, #69	; 0x45
 8003866:	bf0c      	ite	eq
 8003868:	f10b 0501 	addeq.w	r5, fp, #1
 800386c:	465d      	movne	r5, fp
 800386e:	a825      	add	r0, sp, #148	; 0x94
 8003870:	a922      	add	r1, sp, #136	; 0x88
 8003872:	aa21      	add	r2, sp, #132	; 0x84
 8003874:	2302      	movs	r3, #2
 8003876:	9004      	str	r0, [sp, #16]
 8003878:	9202      	str	r2, [sp, #8]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	9501      	str	r5, [sp, #4]
 800387e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8003882:	9103      	str	r1, [sp, #12]
 8003884:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003886:	f002 f847 	bl	8005918 <_dtoa_r>
 800388a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800388c:	2b67      	cmp	r3, #103	; 0x67
 800388e:	4606      	mov	r6, r0
 8003890:	f040 8271 	bne.w	8003d76 <_svfprintf_r+0x1536>
 8003894:	9b07      	ldr	r3, [sp, #28]
 8003896:	07da      	lsls	r2, r3, #31
 8003898:	f140 82bf 	bpl.w	8003e1a <_svfprintf_r+0x15da>
 800389c:	1974      	adds	r4, r6, r5
 800389e:	2200      	movs	r2, #0
 80038a0:	2300      	movs	r3, #0
 80038a2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80038a6:	f005 fb9d 	bl	8008fe4 <__aeabi_dcmpeq>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	f040 8190 	bne.w	8003bd0 <_svfprintf_r+0x1390>
 80038b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80038b2:	429c      	cmp	r4, r3
 80038b4:	d906      	bls.n	80038c4 <_svfprintf_r+0x1084>
 80038b6:	2130      	movs	r1, #48	; 0x30
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	9225      	str	r2, [sp, #148]	; 0x94
 80038bc:	7019      	strb	r1, [r3, #0]
 80038be:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80038c0:	429c      	cmp	r4, r3
 80038c2:	d8f9      	bhi.n	80038b8 <_svfprintf_r+0x1078>
 80038c4:	1b9b      	subs	r3, r3, r6
 80038c6:	2f47      	cmp	r7, #71	; 0x47
 80038c8:	9312      	str	r3, [sp, #72]	; 0x48
 80038ca:	f000 817a 	beq.w	8003bc2 <_svfprintf_r+0x1382>
 80038ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80038d0:	2b65      	cmp	r3, #101	; 0x65
 80038d2:	f340 825f 	ble.w	8003d94 <_svfprintf_r+0x1554>
 80038d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80038d8:	2b66      	cmp	r3, #102	; 0x66
 80038da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80038de:	f000 8266 	beq.w	8003dae <_svfprintf_r+0x156e>
 80038e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80038e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80038e6:	428a      	cmp	r2, r1
 80038e8:	f2c0 8238 	blt.w	8003d5c <_svfprintf_r+0x151c>
 80038ec:	9b07      	ldr	r3, [sp, #28]
 80038ee:	07d9      	lsls	r1, r3, #31
 80038f0:	f100 8295 	bmi.w	8003e1e <_svfprintf_r+0x15de>
 80038f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80038f8:	920d      	str	r2, [sp, #52]	; 0x34
 80038fa:	2267      	movs	r2, #103	; 0x67
 80038fc:	9211      	str	r2, [sp, #68]	; 0x44
 80038fe:	9a08      	ldr	r2, [sp, #32]
 8003900:	2a00      	cmp	r2, #0
 8003902:	f040 8132 	bne.w	8003b6a <_svfprintf_r+0x132a>
 8003906:	9308      	str	r3, [sp, #32]
 8003908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800390a:	9307      	str	r3, [sp, #28]
 800390c:	4693      	mov	fp, r2
 800390e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8003912:	f7ff b967 	b.w	8002be4 <_svfprintf_r+0x3a4>
 8003916:	f027 0707 	bic.w	r7, r7, #7
 800391a:	ed97 7b00 	vldr	d7, [r7]
 800391e:	f107 0308 	add.w	r3, r7, #8
 8003922:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003926:	930e      	str	r3, [sp, #56]	; 0x38
 8003928:	f7ff ba88 	b.w	8002e3c <_svfprintf_r+0x5fc>
 800392c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800392e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8003932:	f1bb 0f00 	cmp.w	fp, #0
 8003936:	680c      	ldr	r4, [r1, #0]
 8003938:	f101 0704 	add.w	r7, r1, #4
 800393c:	f04f 0500 	mov.w	r5, #0
 8003940:	f280 80ac 	bge.w	8003a9c <_svfprintf_r+0x125c>
 8003944:	970e      	str	r7, [sp, #56]	; 0x38
 8003946:	2700      	movs	r7, #0
 8003948:	f7ff b8a0 	b.w	8002a8c <_svfprintf_r+0x24c>
 800394c:	9907      	ldr	r1, [sp, #28]
 800394e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8003952:	f43f ae4c 	beq.w	80035ee <_svfprintf_r+0xdae>
 8003956:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003958:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800395c:	4603      	mov	r3, r0
 800395e:	f1bb 0f00 	cmp.w	fp, #0
 8003962:	f103 0304 	add.w	r3, r3, #4
 8003966:	8804      	ldrh	r4, [r0, #0]
 8003968:	f04f 0500 	mov.w	r5, #0
 800396c:	f2c0 80f2 	blt.w	8003b54 <_svfprintf_r+0x1314>
 8003970:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003974:	9107      	str	r1, [sp, #28]
 8003976:	ea54 0105 	orrs.w	r1, r4, r5
 800397a:	930e      	str	r3, [sp, #56]	; 0x38
 800397c:	4617      	mov	r7, r2
 800397e:	f47f a90d 	bne.w	8002b9c <_svfprintf_r+0x35c>
 8003982:	f7ff baf3 	b.w	8002f6c <_svfprintf_r+0x72c>
 8003986:	9b07      	ldr	r3, [sp, #28]
 8003988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800398a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800398e:	4613      	mov	r3, r2
 8003990:	f000 80e5 	beq.w	8003b5e <_svfprintf_r+0x131e>
 8003994:	3304      	adds	r3, #4
 8003996:	8814      	ldrh	r4, [r2, #0]
 8003998:	930e      	str	r3, [sp, #56]	; 0x38
 800399a:	2500      	movs	r5, #0
 800399c:	f7ff bb03 	b.w	8002fa6 <_svfprintf_r+0x766>
 80039a0:	4614      	mov	r4, r2
 80039a2:	3301      	adds	r3, #1
 80039a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80039a6:	9328      	str	r3, [sp, #160]	; 0xa0
 80039a8:	442c      	add	r4, r5
 80039aa:	2b07      	cmp	r3, #7
 80039ac:	9429      	str	r4, [sp, #164]	; 0xa4
 80039ae:	e889 0024 	stmia.w	r9, {r2, r5}
 80039b2:	f73f ae58 	bgt.w	8003666 <_svfprintf_r+0xe26>
 80039b6:	f109 0908 	add.w	r9, r9, #8
 80039ba:	e65f      	b.n	800367c <_svfprintf_r+0xe3c>
 80039bc:	08009608 	.word	0x08009608
 80039c0:	2700      	movs	r7, #0
 80039c2:	45bb      	cmp	fp, r7
 80039c4:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80039c8:	f6ff abf6 	blt.w	80031b8 <_svfprintf_r+0x978>
 80039cc:	9b07      	ldr	r3, [sp, #28]
 80039ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039d2:	9307      	str	r3, [sp, #28]
 80039d4:	f7ff bbbe 	b.w	8003154 <_svfprintf_r+0x914>
 80039d8:	aa27      	add	r2, sp, #156	; 0x9c
 80039da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80039dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80039de:	f004 fc1d 	bl	800821c <__ssprint_r>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	f47f a826 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 80039e8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80039ea:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80039ee:	e405      	b.n	80031fc <_svfprintf_r+0x9bc>
 80039f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80039f2:	f7ff bbda 	b.w	80031aa <_svfprintf_r+0x96a>
 80039f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80039f8:	4ab2      	ldr	r2, [pc, #712]	; (8003cc4 <_svfprintf_r+0x1484>)
 80039fa:	f8c9 2000 	str.w	r2, [r9]
 80039fe:	3301      	adds	r3, #1
 8003a00:	3401      	adds	r4, #1
 8003a02:	2201      	movs	r2, #1
 8003a04:	2b07      	cmp	r3, #7
 8003a06:	9429      	str	r4, [sp, #164]	; 0xa4
 8003a08:	9328      	str	r3, [sp, #160]	; 0xa0
 8003a0a:	f8c9 2004 	str.w	r2, [r9, #4]
 8003a0e:	f300 808e 	bgt.w	8003b2e <_svfprintf_r+0x12ee>
 8003a12:	f109 0908 	add.w	r9, r9, #8
 8003a16:	b92d      	cbnz	r5, 8003a24 <_svfprintf_r+0x11e4>
 8003a18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a1a:	b91b      	cbnz	r3, 8003a24 <_svfprintf_r+0x11e4>
 8003a1c:	9b07      	ldr	r3, [sp, #28]
 8003a1e:	07df      	lsls	r7, r3, #31
 8003a20:	f57f a9a4 	bpl.w	8002d6c <_svfprintf_r+0x52c>
 8003a24:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003a26:	9916      	ldr	r1, [sp, #88]	; 0x58
 8003a28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003a2a:	f8c9 2000 	str.w	r2, [r9]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	440c      	add	r4, r1
 8003a32:	2b07      	cmp	r3, #7
 8003a34:	9429      	str	r4, [sp, #164]	; 0xa4
 8003a36:	f8c9 1004 	str.w	r1, [r9, #4]
 8003a3a:	9328      	str	r3, [sp, #160]	; 0xa0
 8003a3c:	f300 81d3 	bgt.w	8003de6 <_svfprintf_r+0x15a6>
 8003a40:	f109 0908 	add.w	r9, r9, #8
 8003a44:	426d      	negs	r5, r5
 8003a46:	2d00      	cmp	r5, #0
 8003a48:	f340 80ad 	ble.w	8003ba6 <_svfprintf_r+0x1366>
 8003a4c:	4a9e      	ldr	r2, [pc, #632]	; (8003cc8 <_svfprintf_r+0x1488>)
 8003a4e:	920f      	str	r2, [sp, #60]	; 0x3c
 8003a50:	2d10      	cmp	r5, #16
 8003a52:	f340 80cc 	ble.w	8003bee <_svfprintf_r+0x13ae>
 8003a56:	4622      	mov	r2, r4
 8003a58:	2710      	movs	r7, #16
 8003a5a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8003a5e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003a60:	e005      	b.n	8003a6e <_svfprintf_r+0x122e>
 8003a62:	f109 0908 	add.w	r9, r9, #8
 8003a66:	3d10      	subs	r5, #16
 8003a68:	2d10      	cmp	r5, #16
 8003a6a:	f340 80bf 	ble.w	8003bec <_svfprintf_r+0x13ac>
 8003a6e:	3301      	adds	r3, #1
 8003a70:	3210      	adds	r2, #16
 8003a72:	2b07      	cmp	r3, #7
 8003a74:	9229      	str	r2, [sp, #164]	; 0xa4
 8003a76:	9328      	str	r3, [sp, #160]	; 0xa0
 8003a78:	f8c9 a000 	str.w	sl, [r9]
 8003a7c:	f8c9 7004 	str.w	r7, [r9, #4]
 8003a80:	ddef      	ble.n	8003a62 <_svfprintf_r+0x1222>
 8003a82:	aa27      	add	r2, sp, #156	; 0x9c
 8003a84:	4621      	mov	r1, r4
 8003a86:	4658      	mov	r0, fp
 8003a88:	f004 fbc8 	bl	800821c <__ssprint_r>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	f47e afd1 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8003a92:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003a94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003a96:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003a9a:	e7e4      	b.n	8003a66 <_svfprintf_r+0x1226>
 8003a9c:	9a07      	ldr	r2, [sp, #28]
 8003a9e:	f7ff ba37 	b.w	8002f10 <_svfprintf_r+0x6d0>
 8003aa2:	9a07      	ldr	r2, [sp, #28]
 8003aa4:	e589      	b.n	80035ba <_svfprintf_r+0xd7a>
 8003aa6:	9b07      	ldr	r3, [sp, #28]
 8003aa8:	f043 0320 	orr.w	r3, r3, #32
 8003aac:	9307      	str	r3, [sp, #28]
 8003aae:	f108 0801 	add.w	r8, r8, #1
 8003ab2:	f898 3000 	ldrb.w	r3, [r8]
 8003ab6:	f7fe bf1d 	b.w	80028f4 <_svfprintf_r+0xb4>
 8003aba:	aa27      	add	r2, sp, #156	; 0x9c
 8003abc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003abe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003ac0:	f004 fbac 	bl	800821c <__ssprint_r>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	f47e afb5 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8003aca:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003acc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003ad0:	f7ff bbac 	b.w	800322c <_svfprintf_r+0x9ec>
 8003ad4:	2140      	movs	r1, #64	; 0x40
 8003ad6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003ad8:	f003 fada 	bl	8007090 <_malloc_r>
 8003adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ade:	6010      	str	r0, [r2, #0]
 8003ae0:	6110      	str	r0, [r2, #16]
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	f000 81f9 	beq.w	8003eda <_svfprintf_r+0x169a>
 8003ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003aea:	2340      	movs	r3, #64	; 0x40
 8003aec:	6153      	str	r3, [r2, #20]
 8003aee:	f7fe bebe 	b.w	800286e <_svfprintf_r+0x2e>
 8003af2:	a825      	add	r0, sp, #148	; 0x94
 8003af4:	a922      	add	r1, sp, #136	; 0x88
 8003af6:	aa21      	add	r2, sp, #132	; 0x84
 8003af8:	2303      	movs	r3, #3
 8003afa:	9004      	str	r0, [sp, #16]
 8003afc:	9202      	str	r2, [sp, #8]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	f8cd b004 	str.w	fp, [sp, #4]
 8003b04:	9103      	str	r1, [sp, #12]
 8003b06:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8003b0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003b0c:	f001 ff04 	bl	8005918 <_dtoa_r>
 8003b10:	465d      	mov	r5, fp
 8003b12:	4606      	mov	r6, r0
 8003b14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003b16:	2b46      	cmp	r3, #70	; 0x46
 8003b18:	eb06 0405 	add.w	r4, r6, r5
 8003b1c:	f47f aebf 	bne.w	800389e <_svfprintf_r+0x105e>
 8003b20:	7833      	ldrb	r3, [r6, #0]
 8003b22:	2b30      	cmp	r3, #48	; 0x30
 8003b24:	f000 818a 	beq.w	8003e3c <_svfprintf_r+0x15fc>
 8003b28:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003b2a:	442c      	add	r4, r5
 8003b2c:	e6b7      	b.n	800389e <_svfprintf_r+0x105e>
 8003b2e:	aa27      	add	r2, sp, #156	; 0x9c
 8003b30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003b34:	f004 fb72 	bl	800821c <__ssprint_r>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	f47e af7b 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8003b3e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003b40:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003b42:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003b46:	e766      	b.n	8003a16 <_svfprintf_r+0x11d6>
 8003b48:	f1bb 0f00 	cmp.w	fp, #0
 8003b4c:	bf08      	it	eq
 8003b4e:	f04f 0b01 	moveq.w	fp, #1
 8003b52:	e672      	b.n	800383a <_svfprintf_r+0xffa>
 8003b54:	930e      	str	r3, [sp, #56]	; 0x38
 8003b56:	4617      	mov	r7, r2
 8003b58:	e557      	b.n	800360a <_svfprintf_r+0xdca>
 8003b5a:	930e      	str	r3, [sp, #56]	; 0x38
 8003b5c:	e6f3      	b.n	8003946 <_svfprintf_r+0x1106>
 8003b5e:	3304      	adds	r3, #4
 8003b60:	6814      	ldr	r4, [r2, #0]
 8003b62:	930e      	str	r3, [sp, #56]	; 0x38
 8003b64:	2500      	movs	r5, #0
 8003b66:	f7ff ba1e 	b.w	8002fa6 <_svfprintf_r+0x766>
 8003b6a:	272d      	movs	r7, #45	; 0x2d
 8003b6c:	9308      	str	r3, [sp, #32]
 8003b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b70:	9307      	str	r3, [sp, #28]
 8003b72:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8003b76:	f04f 0b00 	mov.w	fp, #0
 8003b7a:	f7ff b834 	b.w	8002be6 <_svfprintf_r+0x3a6>
 8003b7e:	4630      	mov	r0, r6
 8003b80:	f7fe fd9e 	bl	80026c0 <strlen>
 8003b84:	46a3      	mov	fp, r4
 8003b86:	4603      	mov	r3, r0
 8003b88:	900d      	str	r0, [sp, #52]	; 0x34
 8003b8a:	f7ff ba9d 	b.w	80030c8 <_svfprintf_r+0x888>
 8003b8e:	aa27      	add	r2, sp, #156	; 0x9c
 8003b90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003b94:	f004 fb42 	bl	800821c <__ssprint_r>
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	f47e af4b 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8003b9e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003ba0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003ba2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003ba6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003ba8:	f8c9 6000 	str.w	r6, [r9]
 8003bac:	3301      	adds	r3, #1
 8003bae:	440c      	add	r4, r1
 8003bb0:	2b07      	cmp	r3, #7
 8003bb2:	9429      	str	r4, [sp, #164]	; 0xa4
 8003bb4:	9328      	str	r3, [sp, #160]	; 0xa0
 8003bb6:	f8c9 1004 	str.w	r1, [r9, #4]
 8003bba:	f77f a8d5 	ble.w	8002d68 <_svfprintf_r+0x528>
 8003bbe:	f7ff bbf6 	b.w	80033ae <_svfprintf_r+0xb6e>
 8003bc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003bc4:	1cdd      	adds	r5, r3, #3
 8003bc6:	db1e      	blt.n	8003c06 <_svfprintf_r+0x13c6>
 8003bc8:	459b      	cmp	fp, r3
 8003bca:	db1c      	blt.n	8003c06 <_svfprintf_r+0x13c6>
 8003bcc:	9313      	str	r3, [sp, #76]	; 0x4c
 8003bce:	e688      	b.n	80038e2 <_svfprintf_r+0x10a2>
 8003bd0:	4623      	mov	r3, r4
 8003bd2:	e677      	b.n	80038c4 <_svfprintf_r+0x1084>
 8003bd4:	aa27      	add	r2, sp, #156	; 0x9c
 8003bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003bd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003bda:	f004 fb1f 	bl	800821c <__ssprint_r>
 8003bde:	2800      	cmp	r0, #0
 8003be0:	f47e af28 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8003be4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003be6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003bea:	e447      	b.n	800347c <_svfprintf_r+0xc3c>
 8003bec:	4614      	mov	r4, r2
 8003bee:	3301      	adds	r3, #1
 8003bf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003bf2:	9328      	str	r3, [sp, #160]	; 0xa0
 8003bf4:	442c      	add	r4, r5
 8003bf6:	2b07      	cmp	r3, #7
 8003bf8:	9429      	str	r4, [sp, #164]	; 0xa4
 8003bfa:	e889 0024 	stmia.w	r9, {r2, r5}
 8003bfe:	dcc6      	bgt.n	8003b8e <_svfprintf_r+0x134e>
 8003c00:	f109 0908 	add.w	r9, r9, #8
 8003c04:	e7cf      	b.n	8003ba6 <_svfprintf_r+0x1366>
 8003c06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003c08:	3a02      	subs	r2, #2
 8003c0a:	9211      	str	r2, [sp, #68]	; 0x44
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8003c14:	9321      	str	r3, [sp, #132]	; 0x84
 8003c16:	bfb8      	it	lt
 8003c18:	425b      	neglt	r3, r3
 8003c1a:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8003c1e:	bfb4      	ite	lt
 8003c20:	222d      	movlt	r2, #45	; 0x2d
 8003c22:	222b      	movge	r2, #43	; 0x2b
 8003c24:	2b09      	cmp	r3, #9
 8003c26:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8003c2a:	f340 80ee 	ble.w	8003e0a <_svfprintf_r+0x15ca>
 8003c2e:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 8003c32:	4604      	mov	r4, r0
 8003c34:	4a25      	ldr	r2, [pc, #148]	; (8003ccc <_svfprintf_r+0x148c>)
 8003c36:	fb82 2103 	smull	r2, r1, r2, r3
 8003c3a:	17da      	asrs	r2, r3, #31
 8003c3c:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8003c40:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003c44:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8003c48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003c4c:	2a09      	cmp	r2, #9
 8003c4e:	4613      	mov	r3, r2
 8003c50:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8003c54:	dcee      	bgt.n	8003c34 <_svfprintf_r+0x13f4>
 8003c56:	4621      	mov	r1, r4
 8003c58:	3330      	adds	r3, #48	; 0x30
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8003c60:	4288      	cmp	r0, r1
 8003c62:	f240 8137 	bls.w	8003ed4 <_svfprintf_r+0x1694>
 8003c66:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	e001      	b.n	8003c72 <_svfprintf_r+0x1432>
 8003c6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c72:	f801 2b01 	strb.w	r2, [r1], #1
 8003c76:	4298      	cmp	r0, r3
 8003c78:	d1f9      	bne.n	8003c6e <_svfprintf_r+0x142e>
 8003c7a:	1c43      	adds	r3, r0, #1
 8003c7c:	1b1b      	subs	r3, r3, r4
 8003c7e:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 8003c82:	4413      	add	r3, r2
 8003c84:	aa23      	add	r2, sp, #140	; 0x8c
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003c8a:	9319      	str	r3, [sp, #100]	; 0x64
 8003c8c:	2a01      	cmp	r2, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	930d      	str	r3, [sp, #52]	; 0x34
 8003c92:	f340 80ea 	ble.w	8003e6a <_svfprintf_r+0x162a>
 8003c96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c98:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003c9a:	4413      	add	r3, r2
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	930d      	str	r3, [sp, #52]	; 0x34
 8003ca0:	9213      	str	r2, [sp, #76]	; 0x4c
 8003ca2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003ca6:	e62a      	b.n	80038fe <_svfprintf_r+0x10be>
 8003ca8:	aa27      	add	r2, sp, #156	; 0x9c
 8003caa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003cac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003cae:	f004 fab5 	bl	800821c <__ssprint_r>
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	f47e aebe 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8003cb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003cba:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003cbc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003cc0:	e4e6      	b.n	8003690 <_svfprintf_r+0xe50>
 8003cc2:	bf00      	nop
 8003cc4:	08009658 	.word	0x08009658
 8003cc8:	08009608 	.word	0x08009608
 8003ccc:	66666667 	.word	0x66666667
 8003cd0:	aa27      	add	r2, sp, #156	; 0x9c
 8003cd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003cd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003cd6:	f004 faa1 	bl	800821c <__ssprint_r>
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	f47e aeaa 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8003ce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ce2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003ce4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003cec:	e4e8      	b.n	80036c0 <_svfprintf_r+0xe80>
 8003cee:	2d06      	cmp	r5, #6
 8003cf0:	462b      	mov	r3, r5
 8003cf2:	bf28      	it	cs
 8003cf4:	2306      	movcs	r3, #6
 8003cf6:	930d      	str	r3, [sp, #52]	; 0x34
 8003cf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003cfc:	46b3      	mov	fp, r6
 8003cfe:	970e      	str	r7, [sp, #56]	; 0x38
 8003d00:	9613      	str	r6, [sp, #76]	; 0x4c
 8003d02:	4637      	mov	r7, r6
 8003d04:	9308      	str	r3, [sp, #32]
 8003d06:	4e88      	ldr	r6, [pc, #544]	; (8003f28 <_svfprintf_r+0x16e8>)
 8003d08:	f7fe bf6c 	b.w	8002be4 <_svfprintf_r+0x3a4>
 8003d0c:	f04f 0b06 	mov.w	fp, #6
 8003d10:	e593      	b.n	800383a <_svfprintf_r+0xffa>
 8003d12:	a825      	add	r0, sp, #148	; 0x94
 8003d14:	a922      	add	r1, sp, #136	; 0x88
 8003d16:	aa21      	add	r2, sp, #132	; 0x84
 8003d18:	2303      	movs	r3, #3
 8003d1a:	9004      	str	r0, [sp, #16]
 8003d1c:	9202      	str	r2, [sp, #8]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	f8cd b004 	str.w	fp, [sp, #4]
 8003d24:	9103      	str	r1, [sp, #12]
 8003d26:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8003d2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003d2c:	f001 fdf4 	bl	8005918 <_dtoa_r>
 8003d30:	465d      	mov	r5, fp
 8003d32:	4606      	mov	r6, r0
 8003d34:	eb00 040b 	add.w	r4, r0, fp
 8003d38:	e6f2      	b.n	8003b20 <_svfprintf_r+0x12e0>
 8003d3a:	272d      	movs	r7, #45	; 0x2d
 8003d3c:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8003d40:	f7ff b8a3 	b.w	8002e8a <_svfprintf_r+0x64a>
 8003d44:	9307      	str	r3, [sp, #28]
 8003d46:	f7ff b94c 	b.w	8002fe2 <_svfprintf_r+0x7a2>
 8003d4a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8003d4e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8003d52:	931d      	str	r3, [sp, #116]	; 0x74
 8003d54:	232d      	movs	r3, #45	; 0x2d
 8003d56:	911c      	str	r1, [sp, #112]	; 0x70
 8003d58:	9308      	str	r3, [sp, #32]
 8003d5a:	e57c      	b.n	8003856 <_svfprintf_r+0x1016>
 8003d5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003d5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d60:	4413      	add	r3, r2
 8003d62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003d64:	930d      	str	r3, [sp, #52]	; 0x34
 8003d66:	2a00      	cmp	r2, #0
 8003d68:	f340 8089 	ble.w	8003e7e <_svfprintf_r+0x163e>
 8003d6c:	2267      	movs	r2, #103	; 0x67
 8003d6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003d72:	9211      	str	r2, [sp, #68]	; 0x44
 8003d74:	e5c3      	b.n	80038fe <_svfprintf_r+0x10be>
 8003d76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d78:	2b47      	cmp	r3, #71	; 0x47
 8003d7a:	f47f ad8f 	bne.w	800389c <_svfprintf_r+0x105c>
 8003d7e:	9b07      	ldr	r3, [sp, #28]
 8003d80:	07db      	lsls	r3, r3, #31
 8003d82:	f53f aec7 	bmi.w	8003b14 <_svfprintf_r+0x12d4>
 8003d86:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003d88:	2f47      	cmp	r7, #71	; 0x47
 8003d8a:	eba3 0306 	sub.w	r3, r3, r6
 8003d8e:	9312      	str	r3, [sp, #72]	; 0x48
 8003d90:	f43f af17 	beq.w	8003bc2 <_svfprintf_r+0x1382>
 8003d94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d96:	e739      	b.n	8003c0c <_svfprintf_r+0x13cc>
 8003d98:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8003d9c:	970e      	str	r7, [sp, #56]	; 0x38
 8003d9e:	9308      	str	r3, [sp, #32]
 8003da0:	950d      	str	r5, [sp, #52]	; 0x34
 8003da2:	4683      	mov	fp, r0
 8003da4:	9013      	str	r0, [sp, #76]	; 0x4c
 8003da6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8003daa:	f7fe bf1b 	b.w	8002be4 <_svfprintf_r+0x3a4>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	dd6d      	ble.n	8003e8e <_svfprintf_r+0x164e>
 8003db2:	f1bb 0f00 	cmp.w	fp, #0
 8003db6:	d14f      	bne.n	8003e58 <_svfprintf_r+0x1618>
 8003db8:	9a07      	ldr	r2, [sp, #28]
 8003dba:	07d4      	lsls	r4, r2, #31
 8003dbc:	d44c      	bmi.n	8003e58 <_svfprintf_r+0x1618>
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	920d      	str	r2, [sp, #52]	; 0x34
 8003dc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003dc6:	e59a      	b.n	80038fe <_svfprintf_r+0x10be>
 8003dc8:	9b07      	ldr	r3, [sp, #28]
 8003dca:	07db      	lsls	r3, r3, #31
 8003dcc:	465f      	mov	r7, fp
 8003dce:	d505      	bpl.n	8003ddc <_svfprintf_r+0x159c>
 8003dd0:	ae44      	add	r6, sp, #272	; 0x110
 8003dd2:	2330      	movs	r3, #48	; 0x30
 8003dd4:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8003dd8:	f7fe befa 	b.w	8002bd0 <_svfprintf_r+0x390>
 8003ddc:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8003de0:	ae34      	add	r6, sp, #208	; 0xd0
 8003de2:	f7fe bef8 	b.w	8002bd6 <_svfprintf_r+0x396>
 8003de6:	aa27      	add	r2, sp, #156	; 0x9c
 8003de8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003dec:	f004 fa16 	bl	800821c <__ssprint_r>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	f47e ae1f 	bne.w	8002a34 <_svfprintf_r+0x1f4>
 8003df6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003df8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003dfa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003dfc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003e00:	e620      	b.n	8003a44 <_svfprintf_r+0x1204>
 8003e02:	46a0      	mov	r8, r4
 8003e04:	2500      	movs	r5, #0
 8003e06:	f7fe bd77 	b.w	80028f8 <_svfprintf_r+0xb8>
 8003e0a:	3330      	adds	r3, #48	; 0x30
 8003e0c:	2230      	movs	r2, #48	; 0x30
 8003e0e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8003e12:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8003e16:	ab24      	add	r3, sp, #144	; 0x90
 8003e18:	e734      	b.n	8003c84 <_svfprintf_r+0x1444>
 8003e1a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8003e1c:	e552      	b.n	80038c4 <_svfprintf_r+0x1084>
 8003e1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003e20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003e22:	4413      	add	r3, r2
 8003e24:	2267      	movs	r2, #103	; 0x67
 8003e26:	930d      	str	r3, [sp, #52]	; 0x34
 8003e28:	9211      	str	r2, [sp, #68]	; 0x44
 8003e2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003e2e:	e566      	b.n	80038fe <_svfprintf_r+0x10be>
 8003e30:	4e3e      	ldr	r6, [pc, #248]	; (8003f2c <_svfprintf_r+0x16ec>)
 8003e32:	4b3f      	ldr	r3, [pc, #252]	; (8003f30 <_svfprintf_r+0x16f0>)
 8003e34:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8003e38:	f7ff b829 	b.w	8002e8e <_svfprintf_r+0x64e>
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8003e44:	f005 f8ce 	bl	8008fe4 <__aeabi_dcmpeq>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	f47f ae6d 	bne.w	8003b28 <_svfprintf_r+0x12e8>
 8003e4e:	f1c5 0501 	rsb	r5, r5, #1
 8003e52:	9521      	str	r5, [sp, #132]	; 0x84
 8003e54:	442c      	add	r4, r5
 8003e56:	e522      	b.n	800389e <_svfprintf_r+0x105e>
 8003e58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003e5a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003e5c:	189d      	adds	r5, r3, r2
 8003e5e:	eb05 030b 	add.w	r3, r5, fp
 8003e62:	930d      	str	r3, [sp, #52]	; 0x34
 8003e64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003e68:	e549      	b.n	80038fe <_svfprintf_r+0x10be>
 8003e6a:	9b07      	ldr	r3, [sp, #28]
 8003e6c:	f013 0301 	ands.w	r3, r3, #1
 8003e70:	f47f af11 	bne.w	8003c96 <_svfprintf_r+0x1456>
 8003e74:	9313      	str	r3, [sp, #76]	; 0x4c
 8003e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003e7c:	e53f      	b.n	80038fe <_svfprintf_r+0x10be>
 8003e7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003e80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e82:	f1c3 0301 	rsb	r3, r3, #1
 8003e86:	441a      	add	r2, r3
 8003e88:	4613      	mov	r3, r2
 8003e8a:	920d      	str	r2, [sp, #52]	; 0x34
 8003e8c:	e76e      	b.n	8003d6c <_svfprintf_r+0x152c>
 8003e8e:	f1bb 0f00 	cmp.w	fp, #0
 8003e92:	d102      	bne.n	8003e9a <_svfprintf_r+0x165a>
 8003e94:	9b07      	ldr	r3, [sp, #28]
 8003e96:	07d8      	lsls	r0, r3, #31
 8003e98:	d507      	bpl.n	8003eaa <_svfprintf_r+0x166a>
 8003e9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003e9c:	1c5d      	adds	r5, r3, #1
 8003e9e:	eb05 030b 	add.w	r3, r5, fp
 8003ea2:	930d      	str	r3, [sp, #52]	; 0x34
 8003ea4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003ea8:	e529      	b.n	80038fe <_svfprintf_r+0x10be>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	930d      	str	r3, [sp, #52]	; 0x34
 8003eae:	e526      	b.n	80038fe <_svfprintf_r+0x10be>
 8003eb0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003eb2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003eb6:	6805      	ldr	r5, [r0, #0]
 8003eb8:	3004      	adds	r0, #4
 8003eba:	2d00      	cmp	r5, #0
 8003ebc:	900e      	str	r0, [sp, #56]	; 0x38
 8003ebe:	46a0      	mov	r8, r4
 8003ec0:	f6be ad18 	bge.w	80028f4 <_svfprintf_r+0xb4>
 8003ec4:	f04f 35ff 	mov.w	r5, #4294967295
 8003ec8:	f7fe bd14 	b.w	80028f4 <_svfprintf_r+0xb4>
 8003ecc:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003ed0:	f7fe bdc1 	b.w	8002a56 <_svfprintf_r+0x216>
 8003ed4:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8003ed8:	e6d4      	b.n	8003c84 <_svfprintf_r+0x1444>
 8003eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003edc:	230c      	movs	r3, #12
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee4:	f7fe bdaf 	b.w	8002a46 <_svfprintf_r+0x206>
 8003ee8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003eec:	f7fe be30 	b.w	8002b50 <_svfprintf_r+0x310>
 8003ef0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003ef4:	f7fe bf92 	b.w	8002e1c <_svfprintf_r+0x5dc>
 8003ef8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003efc:	f7ff b845 	b.w	8002f8a <_svfprintf_r+0x74a>
 8003f00:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003f04:	f7ff b813 	b.w	8002f2e <_svfprintf_r+0x6ee>
 8003f08:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003f0c:	f7fe bfe5 	b.w	8002eda <_svfprintf_r+0x69a>
 8003f10:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003f14:	f7ff b92d 	b.w	8003172 <_svfprintf_r+0x932>
 8003f18:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003f1c:	f7ff b908 	b.w	8003130 <_svfprintf_r+0x8f0>
 8003f20:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003f24:	f7ff b8e6 	b.w	80030f4 <_svfprintf_r+0x8b4>
 8003f28:	08009650 	.word	0x08009650
 8003f2c:	08009624 	.word	0x08009624
 8003f30:	08009620 	.word	0x08009620
 8003f34:	00000000 	.word	0x00000000

08003f38 <_vfprintf_r>:
 8003f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3c:	b0c5      	sub	sp, #276	; 0x114
 8003f3e:	461c      	mov	r4, r3
 8003f40:	9108      	str	r1, [sp, #32]
 8003f42:	4616      	mov	r6, r2
 8003f44:	4605      	mov	r5, r0
 8003f46:	900a      	str	r0, [sp, #40]	; 0x28
 8003f48:	f003 f820 	bl	8006f8c <_localeconv_r>
 8003f4c:	6803      	ldr	r3, [r0, #0]
 8003f4e:	9317      	str	r3, [sp, #92]	; 0x5c
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fe fbb5 	bl	80026c0 <strlen>
 8003f56:	940e      	str	r4, [sp, #56]	; 0x38
 8003f58:	9016      	str	r0, [sp, #88]	; 0x58
 8003f5a:	b11d      	cbz	r5, 8003f64 <_vfprintf_r+0x2c>
 8003f5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 8123 	beq.w	80041aa <_vfprintf_r+0x272>
 8003f64:	9808      	ldr	r0, [sp, #32]
 8003f66:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8003f6a:	b293      	uxth	r3, r2
 8003f6c:	0499      	lsls	r1, r3, #18
 8003f6e:	d407      	bmi.n	8003f80 <_vfprintf_r+0x48>
 8003f70:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8003f72:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8003f76:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8003f7a:	8183      	strh	r3, [r0, #12]
 8003f7c:	6641      	str	r1, [r0, #100]	; 0x64
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	071a      	lsls	r2, r3, #28
 8003f82:	f140 80dd 	bpl.w	8004140 <_vfprintf_r+0x208>
 8003f86:	9a08      	ldr	r2, [sp, #32]
 8003f88:	6912      	ldr	r2, [r2, #16]
 8003f8a:	2a00      	cmp	r2, #0
 8003f8c:	f000 80d8 	beq.w	8004140 <_vfprintf_r+0x208>
 8003f90:	f003 031a 	and.w	r3, r3, #26
 8003f94:	2b0a      	cmp	r3, #10
 8003f96:	f000 80e1 	beq.w	800415c <_vfprintf_r+0x224>
 8003f9a:	ed9f 7b87 	vldr	d7, [pc, #540]	; 80041b8 <_vfprintf_r+0x280>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003fa4:	9312      	str	r3, [sp, #72]	; 0x48
 8003fa6:	9329      	str	r3, [sp, #164]	; 0xa4
 8003fa8:	9328      	str	r3, [sp, #160]	; 0xa0
 8003faa:	9319      	str	r3, [sp, #100]	; 0x64
 8003fac:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fae:	f8df a214 	ldr.w	sl, [pc, #532]	; 80041c4 <_vfprintf_r+0x28c>
 8003fb2:	ab34      	add	r3, sp, #208	; 0xd0
 8003fb4:	9327      	str	r3, [sp, #156]	; 0x9c
 8003fb6:	4699      	mov	r9, r3
 8003fb8:	46b0      	mov	r8, r6
 8003fba:	f898 3000 	ldrb.w	r3, [r8]
 8003fbe:	4644      	mov	r4, r8
 8003fc0:	b1eb      	cbz	r3, 8003ffe <_vfprintf_r+0xc6>
 8003fc2:	2b25      	cmp	r3, #37	; 0x25
 8003fc4:	d102      	bne.n	8003fcc <_vfprintf_r+0x94>
 8003fc6:	e01a      	b.n	8003ffe <_vfprintf_r+0xc6>
 8003fc8:	2b25      	cmp	r3, #37	; 0x25
 8003fca:	d003      	beq.n	8003fd4 <_vfprintf_r+0x9c>
 8003fcc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f9      	bne.n	8003fc8 <_vfprintf_r+0x90>
 8003fd4:	ebc8 0504 	rsb	r5, r8, r4
 8003fd8:	b18d      	cbz	r5, 8003ffe <_vfprintf_r+0xc6>
 8003fda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003fdc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003fde:	f8c9 8000 	str.w	r8, [r9]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	442a      	add	r2, r5
 8003fe6:	2b07      	cmp	r3, #7
 8003fe8:	f8c9 5004 	str.w	r5, [r9, #4]
 8003fec:	9229      	str	r2, [sp, #164]	; 0xa4
 8003fee:	9328      	str	r3, [sp, #160]	; 0xa0
 8003ff0:	f300 80c2 	bgt.w	8004178 <_vfprintf_r+0x240>
 8003ff4:	f109 0908 	add.w	r9, r9, #8
 8003ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ffa:	442b      	add	r3, r5
 8003ffc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ffe:	7823      	ldrb	r3, [r4, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 80c2 	beq.w	800418a <_vfprintf_r+0x252>
 8004006:	2300      	movs	r3, #0
 8004008:	461a      	mov	r2, r3
 800400a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800400e:	4619      	mov	r1, r3
 8004010:	930c      	str	r3, [sp, #48]	; 0x30
 8004012:	9307      	str	r3, [sp, #28]
 8004014:	f04f 3bff 	mov.w	fp, #4294967295
 8004018:	7863      	ldrb	r3, [r4, #1]
 800401a:	f104 0801 	add.w	r8, r4, #1
 800401e:	465d      	mov	r5, fp
 8004020:	f108 0801 	add.w	r8, r8, #1
 8004024:	f1a3 0020 	sub.w	r0, r3, #32
 8004028:	2858      	cmp	r0, #88	; 0x58
 800402a:	f200 8459 	bhi.w	80048e0 <_vfprintf_r+0x9a8>
 800402e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004032:	040f      	.short	0x040f
 8004034:	04570457 	.word	0x04570457
 8004038:	04570418 	.word	0x04570418
 800403c:	04570457 	.word	0x04570457
 8004040:	04570457 	.word	0x04570457
 8004044:	03620457 	.word	0x03620457
 8004048:	04570449 	.word	0x04570449
 800404c:	0109005d 	.word	0x0109005d
 8004050:	01250457 	.word	0x01250457
 8004054:	03700370 	.word	0x03700370
 8004058:	03700370 	.word	0x03700370
 800405c:	03700370 	.word	0x03700370
 8004060:	03700370 	.word	0x03700370
 8004064:	04570370 	.word	0x04570370
 8004068:	04570457 	.word	0x04570457
 800406c:	04570457 	.word	0x04570457
 8004070:	04570457 	.word	0x04570457
 8004074:	04570457 	.word	0x04570457
 8004078:	03800457 	.word	0x03800457
 800407c:	0457039d 	.word	0x0457039d
 8004080:	0457039d 	.word	0x0457039d
 8004084:	04570457 	.word	0x04570457
 8004088:	03eb0457 	.word	0x03eb0457
 800408c:	04570457 	.word	0x04570457
 8004090:	0457012c 	.word	0x0457012c
 8004094:	04570457 	.word	0x04570457
 8004098:	04570457 	.word	0x04570457
 800409c:	04570155 	.word	0x04570155
 80040a0:	02b40457 	.word	0x02b40457
 80040a4:	04570457 	.word	0x04570457
 80040a8:	04570457 	.word	0x04570457
 80040ac:	04570457 	.word	0x04570457
 80040b0:	04570457 	.word	0x04570457
 80040b4:	04570457 	.word	0x04570457
 80040b8:	030f02f5 	.word	0x030f02f5
 80040bc:	039d039d 	.word	0x039d039d
 80040c0:	033f039d 	.word	0x033f039d
 80040c4:	0457030f 	.word	0x0457030f
 80040c8:	03460457 	.word	0x03460457
 80040cc:	03500457 	.word	0x03500457
 80040d0:	006400cb 	.word	0x006400cb
 80040d4:	04570420 	.word	0x04570420
 80040d8:	04570428 	.word	0x04570428
 80040dc:	045703f2 	.word	0x045703f2
 80040e0:	03fa0457 	.word	0x03fa0457
 80040e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80040e6:	930e      	str	r3, [sp, #56]	; 0x38
 80040e8:	4240      	negs	r0, r0
 80040ea:	900c      	str	r0, [sp, #48]	; 0x30
 80040ec:	9b07      	ldr	r3, [sp, #28]
 80040ee:	f043 0304 	orr.w	r3, r3, #4
 80040f2:	9307      	str	r3, [sp, #28]
 80040f4:	f898 3000 	ldrb.w	r3, [r8]
 80040f8:	e792      	b.n	8004020 <_vfprintf_r+0xe8>
 80040fa:	980e      	ldr	r0, [sp, #56]	; 0x38
 80040fc:	46ab      	mov	fp, r5
 80040fe:	2100      	movs	r1, #0
 8004100:	6804      	ldr	r4, [r0, #0]
 8004102:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004106:	1d07      	adds	r7, r0, #4
 8004108:	9807      	ldr	r0, [sp, #28]
 800410a:	2330      	movs	r3, #48	; 0x30
 800410c:	2278      	movs	r2, #120	; 0x78
 800410e:	458b      	cmp	fp, r1
 8004110:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8004114:	f04f 0500 	mov.w	r5, #0
 8004118:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 800411c:	f040 0302 	orr.w	r3, r0, #2
 8004120:	f2c0 83fb 	blt.w	800491a <_vfprintf_r+0x9e2>
 8004124:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8004128:	f043 0302 	orr.w	r3, r3, #2
 800412c:	9307      	str	r3, [sp, #28]
 800412e:	ea54 0305 	orrs.w	r3, r4, r5
 8004132:	970e      	str	r7, [sp, #56]	; 0x38
 8004134:	f000 83cc 	beq.w	80048d0 <_vfprintf_r+0x998>
 8004138:	460f      	mov	r7, r1
 800413a:	9211      	str	r2, [sp, #68]	; 0x44
 800413c:	4820      	ldr	r0, [pc, #128]	; (80041c0 <_vfprintf_r+0x288>)
 800413e:	e25d      	b.n	80045fc <_vfprintf_r+0x6c4>
 8004140:	9908      	ldr	r1, [sp, #32]
 8004142:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004144:	f001 faf0 	bl	8005728 <__swsetup_r>
 8004148:	2800      	cmp	r0, #0
 800414a:	f041 803f 	bne.w	80051cc <_vfprintf_r+0x1294>
 800414e:	9b08      	ldr	r3, [sp, #32]
 8004150:	899b      	ldrh	r3, [r3, #12]
 8004152:	f003 031a 	and.w	r3, r3, #26
 8004156:	2b0a      	cmp	r3, #10
 8004158:	f47f af1f 	bne.w	8003f9a <_vfprintf_r+0x62>
 800415c:	9908      	ldr	r1, [sp, #32]
 800415e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f6ff af19 	blt.w	8003f9a <_vfprintf_r+0x62>
 8004168:	4623      	mov	r3, r4
 800416a:	4632      	mov	r2, r6
 800416c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800416e:	f001 fa7f 	bl	8005670 <__sbprintf>
 8004172:	b045      	add	sp, #276	; 0x114
 8004174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004178:	aa27      	add	r2, sp, #156	; 0x9c
 800417a:	9908      	ldr	r1, [sp, #32]
 800417c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800417e:	f004 f909 	bl	8008394 <__sprint_r>
 8004182:	b948      	cbnz	r0, 8004198 <_vfprintf_r+0x260>
 8004184:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004188:	e736      	b.n	8003ff8 <_vfprintf_r+0xc0>
 800418a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800418c:	b123      	cbz	r3, 8004198 <_vfprintf_r+0x260>
 800418e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004190:	9908      	ldr	r1, [sp, #32]
 8004192:	aa27      	add	r2, sp, #156	; 0x9c
 8004194:	f004 f8fe 	bl	8008394 <__sprint_r>
 8004198:	9b08      	ldr	r3, [sp, #32]
 800419a:	899b      	ldrh	r3, [r3, #12]
 800419c:	0659      	lsls	r1, r3, #25
 800419e:	f101 8015 	bmi.w	80051cc <_vfprintf_r+0x1294>
 80041a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80041a4:	b045      	add	sp, #276	; 0x114
 80041a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80041ac:	f002 fc02 	bl	80069b4 <__sinit>
 80041b0:	e6d8      	b.n	8003f64 <_vfprintf_r+0x2c>
 80041b2:	bf00      	nop
 80041b4:	f3af 8000 	nop.w
	...
 80041c0:	0800963c 	.word	0x0800963c
 80041c4:	0800966c 	.word	0x0800966c
 80041c8:	9311      	str	r3, [sp, #68]	; 0x44
 80041ca:	46ab      	mov	fp, r5
 80041cc:	2a00      	cmp	r2, #0
 80041ce:	f041 8232 	bne.w	8005636 <_vfprintf_r+0x16fe>
 80041d2:	9a07      	ldr	r2, [sp, #28]
 80041d4:	f012 0320 	ands.w	r3, r2, #32
 80041d8:	d064      	beq.n	80042a4 <_vfprintf_r+0x36c>
 80041da:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80041dc:	3707      	adds	r7, #7
 80041de:	f027 0307 	bic.w	r3, r7, #7
 80041e2:	2700      	movs	r7, #0
 80041e4:	f103 0108 	add.w	r1, r3, #8
 80041e8:	45bb      	cmp	fp, r7
 80041ea:	910e      	str	r1, [sp, #56]	; 0x38
 80041ec:	e9d3 4500 	ldrd	r4, r5, [r3]
 80041f0:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80041f4:	f2c0 86ba 	blt.w	8004f6c <_vfprintf_r+0x1034>
 80041f8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80041fc:	9307      	str	r3, [sp, #28]
 80041fe:	ea54 0305 	orrs.w	r3, r4, r5
 8004202:	f000 8382 	beq.w	800490a <_vfprintf_r+0x9d2>
 8004206:	ae34      	add	r6, sp, #208	; 0xd0
 8004208:	08e2      	lsrs	r2, r4, #3
 800420a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800420e:	08e9      	lsrs	r1, r5, #3
 8004210:	f004 0307 	and.w	r3, r4, #7
 8004214:	460d      	mov	r5, r1
 8004216:	4614      	mov	r4, r2
 8004218:	3330      	adds	r3, #48	; 0x30
 800421a:	ea54 0205 	orrs.w	r2, r4, r5
 800421e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8004222:	d1f1      	bne.n	8004208 <_vfprintf_r+0x2d0>
 8004224:	9a07      	ldr	r2, [sp, #28]
 8004226:	07d2      	lsls	r2, r2, #31
 8004228:	f140 8096 	bpl.w	8004358 <_vfprintf_r+0x420>
 800422c:	2b30      	cmp	r3, #48	; 0x30
 800422e:	f000 8093 	beq.w	8004358 <_vfprintf_r+0x420>
 8004232:	2230      	movs	r2, #48	; 0x30
 8004234:	1e73      	subs	r3, r6, #1
 8004236:	f806 2c01 	strb.w	r2, [r6, #-1]
 800423a:	aa34      	add	r2, sp, #208	; 0xd0
 800423c:	1ad2      	subs	r2, r2, r3
 800423e:	920d      	str	r2, [sp, #52]	; 0x34
 8004240:	461e      	mov	r6, r3
 8004242:	e08c      	b.n	800435e <_vfprintf_r+0x426>
 8004244:	f898 3000 	ldrb.w	r3, [r8]
 8004248:	2b2a      	cmp	r3, #42	; 0x2a
 800424a:	f108 0401 	add.w	r4, r8, #1
 800424e:	f001 81d0 	beq.w	80055f2 <_vfprintf_r+0x16ba>
 8004252:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004256:	2809      	cmp	r0, #9
 8004258:	bf98      	it	ls
 800425a:	2500      	movls	r5, #0
 800425c:	f201 816c 	bhi.w	8005538 <_vfprintf_r+0x1600>
 8004260:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004264:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004268:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800426c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004270:	2809      	cmp	r0, #9
 8004272:	d9f5      	bls.n	8004260 <_vfprintf_r+0x328>
 8004274:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8004278:	46a0      	mov	r8, r4
 800427a:	e6d3      	b.n	8004024 <_vfprintf_r+0xec>
 800427c:	9b07      	ldr	r3, [sp, #28]
 800427e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004282:	9307      	str	r3, [sp, #28]
 8004284:	f898 3000 	ldrb.w	r3, [r8]
 8004288:	e6ca      	b.n	8004020 <_vfprintf_r+0xe8>
 800428a:	9311      	str	r3, [sp, #68]	; 0x44
 800428c:	46ab      	mov	fp, r5
 800428e:	2a00      	cmp	r2, #0
 8004290:	f041 81d9 	bne.w	8005646 <_vfprintf_r+0x170e>
 8004294:	9b07      	ldr	r3, [sp, #28]
 8004296:	f043 0310 	orr.w	r3, r3, #16
 800429a:	9307      	str	r3, [sp, #28]
 800429c:	9a07      	ldr	r2, [sp, #28]
 800429e:	f012 0320 	ands.w	r3, r2, #32
 80042a2:	d19a      	bne.n	80041da <_vfprintf_r+0x2a2>
 80042a4:	9907      	ldr	r1, [sp, #28]
 80042a6:	f011 0210 	ands.w	r2, r1, #16
 80042aa:	f000 8634 	beq.w	8004f16 <_vfprintf_r+0xfde>
 80042ae:	980e      	ldr	r0, [sp, #56]	; 0x38
 80042b0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80042b4:	f1bb 0f00 	cmp.w	fp, #0
 80042b8:	6804      	ldr	r4, [r0, #0]
 80042ba:	f100 0704 	add.w	r7, r0, #4
 80042be:	f04f 0500 	mov.w	r5, #0
 80042c2:	f2c0 8652 	blt.w	8004f6a <_vfprintf_r+0x1032>
 80042c6:	460a      	mov	r2, r1
 80042c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042cc:	9207      	str	r2, [sp, #28]
 80042ce:	ea54 0205 	orrs.w	r2, r4, r5
 80042d2:	970e      	str	r7, [sp, #56]	; 0x38
 80042d4:	f000 8319 	beq.w	800490a <_vfprintf_r+0x9d2>
 80042d8:	461f      	mov	r7, r3
 80042da:	e794      	b.n	8004206 <_vfprintf_r+0x2ce>
 80042dc:	9311      	str	r3, [sp, #68]	; 0x44
 80042de:	46ab      	mov	fp, r5
 80042e0:	2a00      	cmp	r2, #0
 80042e2:	f041 81a0 	bne.w	8005626 <_vfprintf_r+0x16ee>
 80042e6:	9b07      	ldr	r3, [sp, #28]
 80042e8:	f043 0310 	orr.w	r3, r3, #16
 80042ec:	9307      	str	r3, [sp, #28]
 80042ee:	9a07      	ldr	r2, [sp, #28]
 80042f0:	f012 0320 	ands.w	r3, r2, #32
 80042f4:	f000 84fa 	beq.w	8004cec <_vfprintf_r+0xdb4>
 80042f8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80042fa:	3707      	adds	r7, #7
 80042fc:	f027 0307 	bic.w	r3, r7, #7
 8004300:	2700      	movs	r7, #0
 8004302:	f103 0108 	add.w	r1, r3, #8
 8004306:	45bb      	cmp	fp, r7
 8004308:	910e      	str	r1, [sp, #56]	; 0x38
 800430a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800430e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004312:	f2c0 8523 	blt.w	8004d5c <_vfprintf_r+0xe24>
 8004316:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800431a:	9307      	str	r3, [sp, #28]
 800431c:	ea54 0305 	orrs.w	r3, r4, r5
 8004320:	f000 81bc 	beq.w	800469c <_vfprintf_r+0x764>
 8004324:	2d00      	cmp	r5, #0
 8004326:	bf08      	it	eq
 8004328:	2c0a      	cmpeq	r4, #10
 800432a:	f0c0 851b 	bcc.w	8004d64 <_vfprintf_r+0xe2c>
 800432e:	ae34      	add	r6, sp, #208	; 0xd0
 8004330:	4620      	mov	r0, r4
 8004332:	4629      	mov	r1, r5
 8004334:	220a      	movs	r2, #10
 8004336:	2300      	movs	r3, #0
 8004338:	f004 fec4 	bl	80090c4 <__aeabi_uldivmod>
 800433c:	3230      	adds	r2, #48	; 0x30
 800433e:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8004342:	4620      	mov	r0, r4
 8004344:	4629      	mov	r1, r5
 8004346:	2300      	movs	r3, #0
 8004348:	220a      	movs	r2, #10
 800434a:	f004 febb 	bl	80090c4 <__aeabi_uldivmod>
 800434e:	4604      	mov	r4, r0
 8004350:	460d      	mov	r5, r1
 8004352:	ea54 0305 	orrs.w	r3, r4, r5
 8004356:	d1eb      	bne.n	8004330 <_vfprintf_r+0x3f8>
 8004358:	ab34      	add	r3, sp, #208	; 0xd0
 800435a:	1b9b      	subs	r3, r3, r6
 800435c:	930d      	str	r3, [sp, #52]	; 0x34
 800435e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004360:	455b      	cmp	r3, fp
 8004362:	bfb8      	it	lt
 8004364:	465b      	movlt	r3, fp
 8004366:	9309      	str	r3, [sp, #36]	; 0x24
 8004368:	2300      	movs	r3, #0
 800436a:	9313      	str	r3, [sp, #76]	; 0x4c
 800436c:	b117      	cbz	r7, 8004374 <_vfprintf_r+0x43c>
 800436e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004370:	3301      	adds	r3, #1
 8004372:	9309      	str	r3, [sp, #36]	; 0x24
 8004374:	9b07      	ldr	r3, [sp, #28]
 8004376:	f013 0302 	ands.w	r3, r3, #2
 800437a:	930f      	str	r3, [sp, #60]	; 0x3c
 800437c:	d002      	beq.n	8004384 <_vfprintf_r+0x44c>
 800437e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004380:	3302      	adds	r3, #2
 8004382:	9309      	str	r3, [sp, #36]	; 0x24
 8004384:	9b07      	ldr	r3, [sp, #28]
 8004386:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800438a:	9310      	str	r3, [sp, #64]	; 0x40
 800438c:	f040 82d2 	bne.w	8004934 <_vfprintf_r+0x9fc>
 8004390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004394:	1a9d      	subs	r5, r3, r2
 8004396:	2d00      	cmp	r5, #0
 8004398:	f340 82cc 	ble.w	8004934 <_vfprintf_r+0x9fc>
 800439c:	2d10      	cmp	r5, #16
 800439e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80043a0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80043a2:	4fa8      	ldr	r7, [pc, #672]	; (8004644 <_vfprintf_r+0x70c>)
 80043a4:	dd27      	ble.n	80043f6 <_vfprintf_r+0x4be>
 80043a6:	9618      	str	r6, [sp, #96]	; 0x60
 80043a8:	4648      	mov	r0, r9
 80043aa:	2410      	movs	r4, #16
 80043ac:	46b9      	mov	r9, r7
 80043ae:	9e08      	ldr	r6, [sp, #32]
 80043b0:	462f      	mov	r7, r5
 80043b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80043b4:	e004      	b.n	80043c0 <_vfprintf_r+0x488>
 80043b6:	3f10      	subs	r7, #16
 80043b8:	2f10      	cmp	r7, #16
 80043ba:	f100 0008 	add.w	r0, r0, #8
 80043be:	dd16      	ble.n	80043ee <_vfprintf_r+0x4b6>
 80043c0:	3201      	adds	r2, #1
 80043c2:	4ba0      	ldr	r3, [pc, #640]	; (8004644 <_vfprintf_r+0x70c>)
 80043c4:	9228      	str	r2, [sp, #160]	; 0xa0
 80043c6:	3110      	adds	r1, #16
 80043c8:	2a07      	cmp	r2, #7
 80043ca:	9129      	str	r1, [sp, #164]	; 0xa4
 80043cc:	e880 0018 	stmia.w	r0, {r3, r4}
 80043d0:	ddf1      	ble.n	80043b6 <_vfprintf_r+0x47e>
 80043d2:	aa27      	add	r2, sp, #156	; 0x9c
 80043d4:	4631      	mov	r1, r6
 80043d6:	4628      	mov	r0, r5
 80043d8:	f003 ffdc 	bl	8008394 <__sprint_r>
 80043dc:	2800      	cmp	r0, #0
 80043de:	f47f aedb 	bne.w	8004198 <_vfprintf_r+0x260>
 80043e2:	3f10      	subs	r7, #16
 80043e4:	2f10      	cmp	r7, #16
 80043e6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80043e8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80043ea:	a834      	add	r0, sp, #208	; 0xd0
 80043ec:	dce8      	bgt.n	80043c0 <_vfprintf_r+0x488>
 80043ee:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80043f0:	463d      	mov	r5, r7
 80043f2:	464f      	mov	r7, r9
 80043f4:	4681      	mov	r9, r0
 80043f6:	3201      	adds	r2, #1
 80043f8:	186c      	adds	r4, r5, r1
 80043fa:	2a07      	cmp	r2, #7
 80043fc:	9429      	str	r4, [sp, #164]	; 0xa4
 80043fe:	9228      	str	r2, [sp, #160]	; 0xa0
 8004400:	f8c9 7000 	str.w	r7, [r9]
 8004404:	f8c9 5004 	str.w	r5, [r9, #4]
 8004408:	f300 8428 	bgt.w	8004c5c <_vfprintf_r+0xd24>
 800440c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004410:	f109 0908 	add.w	r9, r9, #8
 8004414:	b177      	cbz	r7, 8004434 <_vfprintf_r+0x4fc>
 8004416:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004418:	3301      	adds	r3, #1
 800441a:	3401      	adds	r4, #1
 800441c:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8004420:	2201      	movs	r2, #1
 8004422:	2b07      	cmp	r3, #7
 8004424:	9429      	str	r4, [sp, #164]	; 0xa4
 8004426:	9328      	str	r3, [sp, #160]	; 0xa0
 8004428:	e889 0006 	stmia.w	r9, {r1, r2}
 800442c:	f300 83a0 	bgt.w	8004b70 <_vfprintf_r+0xc38>
 8004430:	f109 0908 	add.w	r9, r9, #8
 8004434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004436:	b16b      	cbz	r3, 8004454 <_vfprintf_r+0x51c>
 8004438:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800443a:	3301      	adds	r3, #1
 800443c:	3402      	adds	r4, #2
 800443e:	a920      	add	r1, sp, #128	; 0x80
 8004440:	2202      	movs	r2, #2
 8004442:	2b07      	cmp	r3, #7
 8004444:	9429      	str	r4, [sp, #164]	; 0xa4
 8004446:	9328      	str	r3, [sp, #160]	; 0xa0
 8004448:	e889 0006 	stmia.w	r9, {r1, r2}
 800444c:	f300 839c 	bgt.w	8004b88 <_vfprintf_r+0xc50>
 8004450:	f109 0908 	add.w	r9, r9, #8
 8004454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	f000 82d0 	beq.w	80049fc <_vfprintf_r+0xac4>
 800445c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800445e:	ebc3 070b 	rsb	r7, r3, fp
 8004462:	2f00      	cmp	r7, #0
 8004464:	dd33      	ble.n	80044ce <_vfprintf_r+0x596>
 8004466:	4a78      	ldr	r2, [pc, #480]	; (8004648 <_vfprintf_r+0x710>)
 8004468:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800446a:	920f      	str	r2, [sp, #60]	; 0x3c
 800446c:	2f10      	cmp	r7, #16
 800446e:	dd22      	ble.n	80044b6 <_vfprintf_r+0x57e>
 8004470:	4622      	mov	r2, r4
 8004472:	f04f 0b10 	mov.w	fp, #16
 8004476:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004478:	9c08      	ldr	r4, [sp, #32]
 800447a:	e004      	b.n	8004486 <_vfprintf_r+0x54e>
 800447c:	3f10      	subs	r7, #16
 800447e:	2f10      	cmp	r7, #16
 8004480:	f109 0908 	add.w	r9, r9, #8
 8004484:	dd16      	ble.n	80044b4 <_vfprintf_r+0x57c>
 8004486:	3301      	adds	r3, #1
 8004488:	3210      	adds	r2, #16
 800448a:	2b07      	cmp	r3, #7
 800448c:	9229      	str	r2, [sp, #164]	; 0xa4
 800448e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004490:	e889 0c00 	stmia.w	r9, {sl, fp}
 8004494:	ddf2      	ble.n	800447c <_vfprintf_r+0x544>
 8004496:	aa27      	add	r2, sp, #156	; 0x9c
 8004498:	4621      	mov	r1, r4
 800449a:	4628      	mov	r0, r5
 800449c:	f003 ff7a 	bl	8008394 <__sprint_r>
 80044a0:	2800      	cmp	r0, #0
 80044a2:	f47f ae79 	bne.w	8004198 <_vfprintf_r+0x260>
 80044a6:	3f10      	subs	r7, #16
 80044a8:	2f10      	cmp	r7, #16
 80044aa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80044ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80044ae:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80044b2:	dce8      	bgt.n	8004486 <_vfprintf_r+0x54e>
 80044b4:	4614      	mov	r4, r2
 80044b6:	3301      	adds	r3, #1
 80044b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80044ba:	9328      	str	r3, [sp, #160]	; 0xa0
 80044bc:	443c      	add	r4, r7
 80044be:	2b07      	cmp	r3, #7
 80044c0:	9429      	str	r4, [sp, #164]	; 0xa4
 80044c2:	e889 0084 	stmia.w	r9, {r2, r7}
 80044c6:	f300 8347 	bgt.w	8004b58 <_vfprintf_r+0xc20>
 80044ca:	f109 0908 	add.w	r9, r9, #8
 80044ce:	9b07      	ldr	r3, [sp, #28]
 80044d0:	05dd      	lsls	r5, r3, #23
 80044d2:	f100 8231 	bmi.w	8004938 <_vfprintf_r+0xa00>
 80044d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80044d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044da:	f8c9 6000 	str.w	r6, [r9]
 80044de:	3301      	adds	r3, #1
 80044e0:	440c      	add	r4, r1
 80044e2:	2b07      	cmp	r3, #7
 80044e4:	9429      	str	r4, [sp, #164]	; 0xa4
 80044e6:	f8c9 1004 	str.w	r1, [r9, #4]
 80044ea:	9328      	str	r3, [sp, #160]	; 0xa0
 80044ec:	f300 831e 	bgt.w	8004b2c <_vfprintf_r+0xbf4>
 80044f0:	f109 0908 	add.w	r9, r9, #8
 80044f4:	9b07      	ldr	r3, [sp, #28]
 80044f6:	0758      	lsls	r0, r3, #29
 80044f8:	d53f      	bpl.n	800457a <_vfprintf_r+0x642>
 80044fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044fe:	1a9d      	subs	r5, r3, r2
 8004500:	2d00      	cmp	r5, #0
 8004502:	dd3a      	ble.n	800457a <_vfprintf_r+0x642>
 8004504:	2d10      	cmp	r5, #16
 8004506:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004508:	4f4e      	ldr	r7, [pc, #312]	; (8004644 <_vfprintf_r+0x70c>)
 800450a:	dd23      	ble.n	8004554 <_vfprintf_r+0x61c>
 800450c:	4622      	mov	r2, r4
 800450e:	2610      	movs	r6, #16
 8004510:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004514:	9c08      	ldr	r4, [sp, #32]
 8004516:	e004      	b.n	8004522 <_vfprintf_r+0x5ea>
 8004518:	3d10      	subs	r5, #16
 800451a:	2d10      	cmp	r5, #16
 800451c:	f109 0908 	add.w	r9, r9, #8
 8004520:	dd17      	ble.n	8004552 <_vfprintf_r+0x61a>
 8004522:	3301      	adds	r3, #1
 8004524:	4947      	ldr	r1, [pc, #284]	; (8004644 <_vfprintf_r+0x70c>)
 8004526:	9328      	str	r3, [sp, #160]	; 0xa0
 8004528:	3210      	adds	r2, #16
 800452a:	2b07      	cmp	r3, #7
 800452c:	9229      	str	r2, [sp, #164]	; 0xa4
 800452e:	e889 0042 	stmia.w	r9, {r1, r6}
 8004532:	ddf1      	ble.n	8004518 <_vfprintf_r+0x5e0>
 8004534:	aa27      	add	r2, sp, #156	; 0x9c
 8004536:	4621      	mov	r1, r4
 8004538:	4658      	mov	r0, fp
 800453a:	f003 ff2b 	bl	8008394 <__sprint_r>
 800453e:	2800      	cmp	r0, #0
 8004540:	f47f ae2a 	bne.w	8004198 <_vfprintf_r+0x260>
 8004544:	3d10      	subs	r5, #16
 8004546:	2d10      	cmp	r5, #16
 8004548:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800454a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800454c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004550:	dce7      	bgt.n	8004522 <_vfprintf_r+0x5ea>
 8004552:	4614      	mov	r4, r2
 8004554:	3301      	adds	r3, #1
 8004556:	442c      	add	r4, r5
 8004558:	2b07      	cmp	r3, #7
 800455a:	9429      	str	r4, [sp, #164]	; 0xa4
 800455c:	9328      	str	r3, [sp, #160]	; 0xa0
 800455e:	f8c9 7000 	str.w	r7, [r9]
 8004562:	f8c9 5004 	str.w	r5, [r9, #4]
 8004566:	dd08      	ble.n	800457a <_vfprintf_r+0x642>
 8004568:	aa27      	add	r2, sp, #156	; 0x9c
 800456a:	9908      	ldr	r1, [sp, #32]
 800456c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800456e:	f003 ff11 	bl	8008394 <__sprint_r>
 8004572:	2800      	cmp	r0, #0
 8004574:	f47f ae10 	bne.w	8004198 <_vfprintf_r+0x260>
 8004578:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800457a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800457c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800457e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004580:	428a      	cmp	r2, r1
 8004582:	bfac      	ite	ge
 8004584:	189b      	addge	r3, r3, r2
 8004586:	185b      	addlt	r3, r3, r1
 8004588:	930b      	str	r3, [sp, #44]	; 0x2c
 800458a:	2c00      	cmp	r4, #0
 800458c:	f040 82da 	bne.w	8004b44 <_vfprintf_r+0xc0c>
 8004590:	2300      	movs	r3, #0
 8004592:	9328      	str	r3, [sp, #160]	; 0xa0
 8004594:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004598:	e50f      	b.n	8003fba <_vfprintf_r+0x82>
 800459a:	9311      	str	r3, [sp, #68]	; 0x44
 800459c:	46ab      	mov	fp, r5
 800459e:	2a00      	cmp	r2, #0
 80045a0:	f041 803d 	bne.w	800561e <_vfprintf_r+0x16e6>
 80045a4:	9b07      	ldr	r3, [sp, #28]
 80045a6:	4829      	ldr	r0, [pc, #164]	; (800464c <_vfprintf_r+0x714>)
 80045a8:	069c      	lsls	r4, r3, #26
 80045aa:	f140 8146 	bpl.w	800483a <_vfprintf_r+0x902>
 80045ae:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80045b0:	3707      	adds	r7, #7
 80045b2:	f027 0307 	bic.w	r3, r7, #7
 80045b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80045ba:	f103 0208 	add.w	r2, r3, #8
 80045be:	920e      	str	r2, [sp, #56]	; 0x38
 80045c0:	9a07      	ldr	r2, [sp, #28]
 80045c2:	f012 0701 	ands.w	r7, r2, #1
 80045c6:	f000 82eb 	beq.w	8004ba0 <_vfprintf_r+0xc68>
 80045ca:	ea54 0305 	orrs.w	r3, r4, r5
 80045ce:	f000 8582 	beq.w	80050d6 <_vfprintf_r+0x119e>
 80045d2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80045d6:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 80045da:	2700      	movs	r7, #0
 80045dc:	9a07      	ldr	r2, [sp, #28]
 80045de:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80045e2:	2330      	movs	r3, #48	; 0x30
 80045e4:	45bb      	cmp	fp, r7
 80045e6:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 80045ea:	f042 0302 	orr.w	r3, r2, #2
 80045ee:	f2c0 873b 	blt.w	8005468 <_vfprintf_r+0x1530>
 80045f2:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80045f6:	f043 0302 	orr.w	r3, r3, #2
 80045fa:	9307      	str	r3, [sp, #28]
 80045fc:	ae34      	add	r6, sp, #208	; 0xd0
 80045fe:	0923      	lsrs	r3, r4, #4
 8004600:	f004 010f 	and.w	r1, r4, #15
 8004604:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8004608:	092a      	lsrs	r2, r5, #4
 800460a:	461c      	mov	r4, r3
 800460c:	4615      	mov	r5, r2
 800460e:	5c43      	ldrb	r3, [r0, r1]
 8004610:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8004614:	ea54 0305 	orrs.w	r3, r4, r5
 8004618:	d1f1      	bne.n	80045fe <_vfprintf_r+0x6c6>
 800461a:	e69d      	b.n	8004358 <_vfprintf_r+0x420>
 800461c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800461e:	9311      	str	r3, [sp, #68]	; 0x44
 8004620:	680a      	ldr	r2, [r1, #0]
 8004622:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8004626:	2300      	movs	r3, #0
 8004628:	460a      	mov	r2, r1
 800462a:	461f      	mov	r7, r3
 800462c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004630:	3204      	adds	r2, #4
 8004632:	2301      	movs	r3, #1
 8004634:	9309      	str	r3, [sp, #36]	; 0x24
 8004636:	46bb      	mov	fp, r7
 8004638:	9713      	str	r7, [sp, #76]	; 0x4c
 800463a:	920e      	str	r2, [sp, #56]	; 0x38
 800463c:	930d      	str	r3, [sp, #52]	; 0x34
 800463e:	ae2a      	add	r6, sp, #168	; 0xa8
 8004640:	e698      	b.n	8004374 <_vfprintf_r+0x43c>
 8004642:	bf00      	nop
 8004644:	0800967c 	.word	0x0800967c
 8004648:	0800966c 	.word	0x0800966c
 800464c:	08009628 	.word	0x08009628
 8004650:	9311      	str	r3, [sp, #68]	; 0x44
 8004652:	46ab      	mov	fp, r5
 8004654:	2a00      	cmp	r2, #0
 8004656:	f040 87ea 	bne.w	800562e <_vfprintf_r+0x16f6>
 800465a:	9b07      	ldr	r3, [sp, #28]
 800465c:	069b      	lsls	r3, r3, #26
 800465e:	d574      	bpl.n	800474a <_vfprintf_r+0x812>
 8004660:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004662:	3707      	adds	r7, #7
 8004664:	f027 0707 	bic.w	r7, r7, #7
 8004668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800466c:	f107 0108 	add.w	r1, r7, #8
 8004670:	910e      	str	r1, [sp, #56]	; 0x38
 8004672:	4614      	mov	r4, r2
 8004674:	461d      	mov	r5, r3
 8004676:	2a00      	cmp	r2, #0
 8004678:	f173 0300 	sbcs.w	r3, r3, #0
 800467c:	f2c0 843a 	blt.w	8004ef4 <_vfprintf_r+0xfbc>
 8004680:	f1bb 0f00 	cmp.w	fp, #0
 8004684:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004688:	f2c0 8368 	blt.w	8004d5c <_vfprintf_r+0xe24>
 800468c:	9b07      	ldr	r3, [sp, #28]
 800468e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004692:	9307      	str	r3, [sp, #28]
 8004694:	ea54 0305 	orrs.w	r3, r4, r5
 8004698:	f47f ae44 	bne.w	8004324 <_vfprintf_r+0x3ec>
 800469c:	f1bb 0f00 	cmp.w	fp, #0
 80046a0:	f040 8408 	bne.w	8004eb4 <_vfprintf_r+0xf7c>
 80046a4:	f04f 0b00 	mov.w	fp, #0
 80046a8:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80046ac:	ae34      	add	r6, sp, #208	; 0xd0
 80046ae:	e656      	b.n	800435e <_vfprintf_r+0x426>
 80046b0:	9b07      	ldr	r3, [sp, #28]
 80046b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b6:	9307      	str	r3, [sp, #28]
 80046b8:	f898 3000 	ldrb.w	r3, [r8]
 80046bc:	e4b0      	b.n	8004020 <_vfprintf_r+0xe8>
 80046be:	f898 3000 	ldrb.w	r3, [r8]
 80046c2:	2b6c      	cmp	r3, #108	; 0x6c
 80046c4:	f000 85d5 	beq.w	8005272 <_vfprintf_r+0x133a>
 80046c8:	9807      	ldr	r0, [sp, #28]
 80046ca:	f040 0010 	orr.w	r0, r0, #16
 80046ce:	9007      	str	r0, [sp, #28]
 80046d0:	e4a6      	b.n	8004020 <_vfprintf_r+0xe8>
 80046d2:	2a00      	cmp	r2, #0
 80046d4:	f040 879f 	bne.w	8005616 <_vfprintf_r+0x16de>
 80046d8:	9b07      	ldr	r3, [sp, #28]
 80046da:	069f      	lsls	r7, r3, #26
 80046dc:	f140 84e4 	bpl.w	80050a8 <_vfprintf_r+0x1170>
 80046e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046e4:	6813      	ldr	r3, [r2, #0]
 80046e6:	17cd      	asrs	r5, r1, #31
 80046e8:	4608      	mov	r0, r1
 80046ea:	3204      	adds	r2, #4
 80046ec:	4629      	mov	r1, r5
 80046ee:	920e      	str	r2, [sp, #56]	; 0x38
 80046f0:	e9c3 0100 	strd	r0, r1, [r3]
 80046f4:	e461      	b.n	8003fba <_vfprintf_r+0x82>
 80046f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	930c      	str	r3, [sp, #48]	; 0x30
 80046fc:	4618      	mov	r0, r3
 80046fe:	2800      	cmp	r0, #0
 8004700:	4623      	mov	r3, r4
 8004702:	f103 0304 	add.w	r3, r3, #4
 8004706:	f6ff aced 	blt.w	80040e4 <_vfprintf_r+0x1ac>
 800470a:	930e      	str	r3, [sp, #56]	; 0x38
 800470c:	f898 3000 	ldrb.w	r3, [r8]
 8004710:	e486      	b.n	8004020 <_vfprintf_r+0xe8>
 8004712:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004716:	2300      	movs	r3, #0
 8004718:	461c      	mov	r4, r3
 800471a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800471e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004722:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8004726:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800472a:	2809      	cmp	r0, #9
 800472c:	d9f5      	bls.n	800471a <_vfprintf_r+0x7e2>
 800472e:	940c      	str	r4, [sp, #48]	; 0x30
 8004730:	e478      	b.n	8004024 <_vfprintf_r+0xec>
 8004732:	9311      	str	r3, [sp, #68]	; 0x44
 8004734:	46ab      	mov	fp, r5
 8004736:	2a00      	cmp	r2, #0
 8004738:	f040 8769 	bne.w	800560e <_vfprintf_r+0x16d6>
 800473c:	9b07      	ldr	r3, [sp, #28]
 800473e:	f043 0310 	orr.w	r3, r3, #16
 8004742:	9307      	str	r3, [sp, #28]
 8004744:	9b07      	ldr	r3, [sp, #28]
 8004746:	069b      	lsls	r3, r3, #26
 8004748:	d48a      	bmi.n	8004660 <_vfprintf_r+0x728>
 800474a:	9b07      	ldr	r3, [sp, #28]
 800474c:	06df      	lsls	r7, r3, #27
 800474e:	f100 8294 	bmi.w	8004c7a <_vfprintf_r+0xd42>
 8004752:	9b07      	ldr	r3, [sp, #28]
 8004754:	065e      	lsls	r6, r3, #25
 8004756:	f140 8290 	bpl.w	8004c7a <_vfprintf_r+0xd42>
 800475a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800475c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8004760:	3104      	adds	r1, #4
 8004762:	17e5      	asrs	r5, r4, #31
 8004764:	4622      	mov	r2, r4
 8004766:	462b      	mov	r3, r5
 8004768:	910e      	str	r1, [sp, #56]	; 0x38
 800476a:	e784      	b.n	8004676 <_vfprintf_r+0x73e>
 800476c:	9311      	str	r3, [sp, #68]	; 0x44
 800476e:	46ab      	mov	fp, r5
 8004770:	2a00      	cmp	r2, #0
 8004772:	f040 8770 	bne.w	8005656 <_vfprintf_r+0x171e>
 8004776:	9b07      	ldr	r3, [sp, #28]
 8004778:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800477a:	071d      	lsls	r5, r3, #28
 800477c:	f107 0707 	add.w	r7, r7, #7
 8004780:	f140 8487 	bpl.w	8005092 <_vfprintf_r+0x115a>
 8004784:	f027 0307 	bic.w	r3, r7, #7
 8004788:	ed93 7b00 	vldr	d7, [r3]
 800478c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004790:	f103 0208 	add.w	r2, r3, #8
 8004794:	920e      	str	r2, [sp, #56]	; 0x38
 8004796:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800479a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800479e:	911a      	str	r1, [sp, #104]	; 0x68
 80047a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80047a2:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 80047a6:	f04f 32ff 	mov.w	r2, #4294967295
 80047aa:	4620      	mov	r0, r4
 80047ac:	4629      	mov	r1, r5
 80047ae:	4bb5      	ldr	r3, [pc, #724]	; (8004a84 <_vfprintf_r+0xb4c>)
 80047b0:	f004 fc4a 	bl	8009048 <__aeabi_dcmpun>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	f040 83eb 	bne.w	8004f90 <_vfprintf_r+0x1058>
 80047ba:	f04f 32ff 	mov.w	r2, #4294967295
 80047be:	4bb1      	ldr	r3, [pc, #708]	; (8004a84 <_vfprintf_r+0xb4c>)
 80047c0:	4620      	mov	r0, r4
 80047c2:	4629      	mov	r1, r5
 80047c4:	f004 fc22 	bl	800900c <__aeabi_dcmple>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	f040 83e1 	bne.w	8004f90 <_vfprintf_r+0x1058>
 80047ce:	2200      	movs	r2, #0
 80047d0:	2300      	movs	r3, #0
 80047d2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80047d6:	f004 fc0f 	bl	8008ff8 <__aeabi_dcmplt>
 80047da:	2800      	cmp	r0, #0
 80047dc:	f040 864a 	bne.w	8005474 <_vfprintf_r+0x153c>
 80047e0:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80047e4:	4ea8      	ldr	r6, [pc, #672]	; (8004a88 <_vfprintf_r+0xb50>)
 80047e6:	4ba9      	ldr	r3, [pc, #676]	; (8004a8c <_vfprintf_r+0xb54>)
 80047e8:	9907      	ldr	r1, [sp, #28]
 80047ea:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80047ee:	9107      	str	r1, [sp, #28]
 80047f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80047f2:	2203      	movs	r2, #3
 80047f4:	f04f 0b00 	mov.w	fp, #0
 80047f8:	9209      	str	r2, [sp, #36]	; 0x24
 80047fa:	2947      	cmp	r1, #71	; 0x47
 80047fc:	bfd8      	it	le
 80047fe:	461e      	movle	r6, r3
 8004800:	920d      	str	r2, [sp, #52]	; 0x34
 8004802:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8004806:	e5b1      	b.n	800436c <_vfprintf_r+0x434>
 8004808:	9b07      	ldr	r3, [sp, #28]
 800480a:	f043 0308 	orr.w	r3, r3, #8
 800480e:	9307      	str	r3, [sp, #28]
 8004810:	f898 3000 	ldrb.w	r3, [r8]
 8004814:	e404      	b.n	8004020 <_vfprintf_r+0xe8>
 8004816:	9311      	str	r3, [sp, #68]	; 0x44
 8004818:	46ab      	mov	fp, r5
 800481a:	2a00      	cmp	r2, #0
 800481c:	f43f ad67 	beq.w	80042ee <_vfprintf_r+0x3b6>
 8004820:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004824:	e563      	b.n	80042ee <_vfprintf_r+0x3b6>
 8004826:	9311      	str	r3, [sp, #68]	; 0x44
 8004828:	46ab      	mov	fp, r5
 800482a:	2a00      	cmp	r2, #0
 800482c:	f040 870f 	bne.w	800564e <_vfprintf_r+0x1716>
 8004830:	9b07      	ldr	r3, [sp, #28]
 8004832:	4897      	ldr	r0, [pc, #604]	; (8004a90 <_vfprintf_r+0xb58>)
 8004834:	069c      	lsls	r4, r3, #26
 8004836:	f53f aeba 	bmi.w	80045ae <_vfprintf_r+0x676>
 800483a:	9b07      	ldr	r3, [sp, #28]
 800483c:	06d9      	lsls	r1, r3, #27
 800483e:	f140 8398 	bpl.w	8004f72 <_vfprintf_r+0x103a>
 8004842:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004844:	4613      	mov	r3, r2
 8004846:	3304      	adds	r3, #4
 8004848:	6814      	ldr	r4, [r2, #0]
 800484a:	930e      	str	r3, [sp, #56]	; 0x38
 800484c:	2500      	movs	r5, #0
 800484e:	e6b7      	b.n	80045c0 <_vfprintf_r+0x688>
 8004850:	f898 3000 	ldrb.w	r3, [r8]
 8004854:	2900      	cmp	r1, #0
 8004856:	f47f abe3 	bne.w	8004020 <_vfprintf_r+0xe8>
 800485a:	2201      	movs	r2, #1
 800485c:	2120      	movs	r1, #32
 800485e:	f7ff bbdf 	b.w	8004020 <_vfprintf_r+0xe8>
 8004862:	9b07      	ldr	r3, [sp, #28]
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	9307      	str	r3, [sp, #28]
 800486a:	f898 3000 	ldrb.w	r3, [r8]
 800486e:	f7ff bbd7 	b.w	8004020 <_vfprintf_r+0xe8>
 8004872:	9b07      	ldr	r3, [sp, #28]
 8004874:	f043 0320 	orr.w	r3, r3, #32
 8004878:	9307      	str	r3, [sp, #28]
 800487a:	f898 3000 	ldrb.w	r3, [r8]
 800487e:	f7ff bbcf 	b.w	8004020 <_vfprintf_r+0xe8>
 8004882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004884:	9311      	str	r3, [sp, #68]	; 0x44
 8004886:	6816      	ldr	r6, [r2, #0]
 8004888:	2400      	movs	r4, #0
 800488a:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 800488e:	1d17      	adds	r7, r2, #4
 8004890:	2e00      	cmp	r6, #0
 8004892:	f000 85b7 	beq.w	8005404 <_vfprintf_r+0x14cc>
 8004896:	2d00      	cmp	r5, #0
 8004898:	f2c0 8502 	blt.w	80052a0 <_vfprintf_r+0x1368>
 800489c:	462a      	mov	r2, r5
 800489e:	4621      	mov	r1, r4
 80048a0:	4630      	mov	r0, r6
 80048a2:	f002 fead 	bl	8007600 <memchr>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	f000 861c 	beq.w	80054e4 <_vfprintf_r+0x15ac>
 80048ac:	1b83      	subs	r3, r0, r6
 80048ae:	930d      	str	r3, [sp, #52]	; 0x34
 80048b0:	46a3      	mov	fp, r4
 80048b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80048b6:	970e      	str	r7, [sp, #56]	; 0x38
 80048b8:	9309      	str	r3, [sp, #36]	; 0x24
 80048ba:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 80048be:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80048c2:	e553      	b.n	800436c <_vfprintf_r+0x434>
 80048c4:	f898 3000 	ldrb.w	r3, [r8]
 80048c8:	2201      	movs	r2, #1
 80048ca:	212b      	movs	r1, #43	; 0x2b
 80048cc:	f7ff bba8 	b.w	8004020 <_vfprintf_r+0xe8>
 80048d0:	486f      	ldr	r0, [pc, #444]	; (8004a90 <_vfprintf_r+0xb58>)
 80048d2:	9211      	str	r2, [sp, #68]	; 0x44
 80048d4:	f1bb 0f00 	cmp.w	fp, #0
 80048d8:	f040 8173 	bne.w	8004bc2 <_vfprintf_r+0xc8a>
 80048dc:	465f      	mov	r7, fp
 80048de:	e6e1      	b.n	80046a4 <_vfprintf_r+0x76c>
 80048e0:	9311      	str	r3, [sp, #68]	; 0x44
 80048e2:	2a00      	cmp	r2, #0
 80048e4:	f040 86ab 	bne.w	800563e <_vfprintf_r+0x1706>
 80048e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80048ea:	2a00      	cmp	r2, #0
 80048ec:	f43f ac4d 	beq.w	800418a <_vfprintf_r+0x252>
 80048f0:	2300      	movs	r3, #0
 80048f2:	2101      	movs	r1, #1
 80048f4:	461f      	mov	r7, r3
 80048f6:	9109      	str	r1, [sp, #36]	; 0x24
 80048f8:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 80048fc:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004900:	469b      	mov	fp, r3
 8004902:	9313      	str	r3, [sp, #76]	; 0x4c
 8004904:	910d      	str	r1, [sp, #52]	; 0x34
 8004906:	ae2a      	add	r6, sp, #168	; 0xa8
 8004908:	e534      	b.n	8004374 <_vfprintf_r+0x43c>
 800490a:	f1bb 0f00 	cmp.w	fp, #0
 800490e:	f000 85da 	beq.w	80054c6 <_vfprintf_r+0x158e>
 8004912:	2700      	movs	r7, #0
 8004914:	2400      	movs	r4, #0
 8004916:	2500      	movs	r5, #0
 8004918:	e475      	b.n	8004206 <_vfprintf_r+0x2ce>
 800491a:	485d      	ldr	r0, [pc, #372]	; (8004a90 <_vfprintf_r+0xb58>)
 800491c:	9307      	str	r3, [sp, #28]
 800491e:	9211      	str	r2, [sp, #68]	; 0x44
 8004920:	ea54 0305 	orrs.w	r3, r4, r5
 8004924:	970e      	str	r7, [sp, #56]	; 0x38
 8004926:	f04f 0700 	mov.w	r7, #0
 800492a:	f47f ae67 	bne.w	80045fc <_vfprintf_r+0x6c4>
 800492e:	2400      	movs	r4, #0
 8004930:	2500      	movs	r5, #0
 8004932:	e663      	b.n	80045fc <_vfprintf_r+0x6c4>
 8004934:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004936:	e56d      	b.n	8004414 <_vfprintf_r+0x4dc>
 8004938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800493a:	2b65      	cmp	r3, #101	; 0x65
 800493c:	f340 80ae 	ble.w	8004a9c <_vfprintf_r+0xb64>
 8004940:	2200      	movs	r2, #0
 8004942:	2300      	movs	r3, #0
 8004944:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004948:	f004 fb4c 	bl	8008fe4 <__aeabi_dcmpeq>
 800494c:	2800      	cmp	r0, #0
 800494e:	f000 813a 	beq.w	8004bc6 <_vfprintf_r+0xc8e>
 8004952:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004954:	4a4f      	ldr	r2, [pc, #316]	; (8004a94 <_vfprintf_r+0xb5c>)
 8004956:	f8c9 2000 	str.w	r2, [r9]
 800495a:	3301      	adds	r3, #1
 800495c:	3401      	adds	r4, #1
 800495e:	2201      	movs	r2, #1
 8004960:	2b07      	cmp	r3, #7
 8004962:	9429      	str	r4, [sp, #164]	; 0xa4
 8004964:	9328      	str	r3, [sp, #160]	; 0xa0
 8004966:	f8c9 2004 	str.w	r2, [r9, #4]
 800496a:	f300 83ce 	bgt.w	800510a <_vfprintf_r+0x11d2>
 800496e:	f109 0908 	add.w	r9, r9, #8
 8004972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004974:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004976:	4293      	cmp	r3, r2
 8004978:	db03      	blt.n	8004982 <_vfprintf_r+0xa4a>
 800497a:	9b07      	ldr	r3, [sp, #28]
 800497c:	07d8      	lsls	r0, r3, #31
 800497e:	f57f adb9 	bpl.w	80044f4 <_vfprintf_r+0x5bc>
 8004982:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004984:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004986:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004988:	f8c9 2000 	str.w	r2, [r9]
 800498c:	3301      	adds	r3, #1
 800498e:	440c      	add	r4, r1
 8004990:	2b07      	cmp	r3, #7
 8004992:	9429      	str	r4, [sp, #164]	; 0xa4
 8004994:	f8c9 1004 	str.w	r1, [r9, #4]
 8004998:	9328      	str	r3, [sp, #160]	; 0xa0
 800499a:	f300 8474 	bgt.w	8005286 <_vfprintf_r+0x134e>
 800499e:	f109 0908 	add.w	r9, r9, #8
 80049a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049a4:	1e5d      	subs	r5, r3, #1
 80049a6:	2d00      	cmp	r5, #0
 80049a8:	f77f ada4 	ble.w	80044f4 <_vfprintf_r+0x5bc>
 80049ac:	4a3a      	ldr	r2, [pc, #232]	; (8004a98 <_vfprintf_r+0xb60>)
 80049ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80049b0:	920f      	str	r2, [sp, #60]	; 0x3c
 80049b2:	2d10      	cmp	r5, #16
 80049b4:	f340 81b4 	ble.w	8004d20 <_vfprintf_r+0xde8>
 80049b8:	2610      	movs	r6, #16
 80049ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80049bc:	f8dd b020 	ldr.w	fp, [sp, #32]
 80049c0:	e005      	b.n	80049ce <_vfprintf_r+0xa96>
 80049c2:	f109 0908 	add.w	r9, r9, #8
 80049c6:	3d10      	subs	r5, #16
 80049c8:	2d10      	cmp	r5, #16
 80049ca:	f340 81a9 	ble.w	8004d20 <_vfprintf_r+0xde8>
 80049ce:	3301      	adds	r3, #1
 80049d0:	3410      	adds	r4, #16
 80049d2:	2b07      	cmp	r3, #7
 80049d4:	9429      	str	r4, [sp, #164]	; 0xa4
 80049d6:	9328      	str	r3, [sp, #160]	; 0xa0
 80049d8:	f8c9 a000 	str.w	sl, [r9]
 80049dc:	f8c9 6004 	str.w	r6, [r9, #4]
 80049e0:	ddef      	ble.n	80049c2 <_vfprintf_r+0xa8a>
 80049e2:	aa27      	add	r2, sp, #156	; 0x9c
 80049e4:	4659      	mov	r1, fp
 80049e6:	4638      	mov	r0, r7
 80049e8:	f003 fcd4 	bl	8008394 <__sprint_r>
 80049ec:	2800      	cmp	r0, #0
 80049ee:	f47f abd3 	bne.w	8004198 <_vfprintf_r+0x260>
 80049f2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80049f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80049f6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80049fa:	e7e4      	b.n	80049c6 <_vfprintf_r+0xa8e>
 80049fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a00:	1a9f      	subs	r7, r3, r2
 8004a02:	2f00      	cmp	r7, #0
 8004a04:	f77f ad2a 	ble.w	800445c <_vfprintf_r+0x524>
 8004a08:	4a23      	ldr	r2, [pc, #140]	; (8004a98 <_vfprintf_r+0xb60>)
 8004a0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004a0c:	920f      	str	r2, [sp, #60]	; 0x3c
 8004a0e:	2f10      	cmp	r7, #16
 8004a10:	dd2b      	ble.n	8004a6a <_vfprintf_r+0xb32>
 8004a12:	464a      	mov	r2, r9
 8004a14:	4621      	mov	r1, r4
 8004a16:	46b9      	mov	r9, r7
 8004a18:	2510      	movs	r5, #16
 8004a1a:	4637      	mov	r7, r6
 8004a1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004a1e:	9e08      	ldr	r6, [sp, #32]
 8004a20:	e006      	b.n	8004a30 <_vfprintf_r+0xaf8>
 8004a22:	f1a9 0910 	sub.w	r9, r9, #16
 8004a26:	f1b9 0f10 	cmp.w	r9, #16
 8004a2a:	f102 0208 	add.w	r2, r2, #8
 8004a2e:	dd18      	ble.n	8004a62 <_vfprintf_r+0xb2a>
 8004a30:	3301      	adds	r3, #1
 8004a32:	3110      	adds	r1, #16
 8004a34:	2b07      	cmp	r3, #7
 8004a36:	9129      	str	r1, [sp, #164]	; 0xa4
 8004a38:	9328      	str	r3, [sp, #160]	; 0xa0
 8004a3a:	f8c2 a000 	str.w	sl, [r2]
 8004a3e:	6055      	str	r5, [r2, #4]
 8004a40:	ddef      	ble.n	8004a22 <_vfprintf_r+0xaea>
 8004a42:	aa27      	add	r2, sp, #156	; 0x9c
 8004a44:	4631      	mov	r1, r6
 8004a46:	4620      	mov	r0, r4
 8004a48:	f003 fca4 	bl	8008394 <__sprint_r>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	f47f aba3 	bne.w	8004198 <_vfprintf_r+0x260>
 8004a52:	f1a9 0910 	sub.w	r9, r9, #16
 8004a56:	f1b9 0f10 	cmp.w	r9, #16
 8004a5a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004a5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004a5e:	aa34      	add	r2, sp, #208	; 0xd0
 8004a60:	dce6      	bgt.n	8004a30 <_vfprintf_r+0xaf8>
 8004a62:	463e      	mov	r6, r7
 8004a64:	460c      	mov	r4, r1
 8004a66:	464f      	mov	r7, r9
 8004a68:	4691      	mov	r9, r2
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a6e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004a70:	443c      	add	r4, r7
 8004a72:	2b07      	cmp	r3, #7
 8004a74:	9429      	str	r4, [sp, #164]	; 0xa4
 8004a76:	e889 0084 	stmia.w	r9, {r2, r7}
 8004a7a:	f300 822b 	bgt.w	8004ed4 <_vfprintf_r+0xf9c>
 8004a7e:	f109 0908 	add.w	r9, r9, #8
 8004a82:	e4eb      	b.n	800445c <_vfprintf_r+0x524>
 8004a84:	7fefffff 	.word	0x7fefffff
 8004a88:	0800961c 	.word	0x0800961c
 8004a8c:	08009618 	.word	0x08009618
 8004a90:	0800963c 	.word	0x0800963c
 8004a94:	08009658 	.word	0x08009658
 8004a98:	0800966c 	.word	0x0800966c
 8004a9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a9e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	f340 81d0 	ble.w	8004e46 <_vfprintf_r+0xf0e>
 8004aa6:	3501      	adds	r5, #1
 8004aa8:	3401      	adds	r4, #1
 8004aaa:	2301      	movs	r3, #1
 8004aac:	2d07      	cmp	r5, #7
 8004aae:	9429      	str	r4, [sp, #164]	; 0xa4
 8004ab0:	9528      	str	r5, [sp, #160]	; 0xa0
 8004ab2:	f8c9 6000 	str.w	r6, [r9]
 8004ab6:	f8c9 3004 	str.w	r3, [r9, #4]
 8004aba:	f300 81e1 	bgt.w	8004e80 <_vfprintf_r+0xf48>
 8004abe:	f109 0908 	add.w	r9, r9, #8
 8004ac2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004ac4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ac6:	f8c9 3000 	str.w	r3, [r9]
 8004aca:	3501      	adds	r5, #1
 8004acc:	4414      	add	r4, r2
 8004ace:	2d07      	cmp	r5, #7
 8004ad0:	9429      	str	r4, [sp, #164]	; 0xa4
 8004ad2:	9528      	str	r5, [sp, #160]	; 0xa0
 8004ad4:	f8c9 2004 	str.w	r2, [r9, #4]
 8004ad8:	f300 81df 	bgt.w	8004e9a <_vfprintf_r+0xf62>
 8004adc:	f109 0908 	add.w	r9, r9, #8
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004ae8:	f004 fa7c 	bl	8008fe4 <__aeabi_dcmpeq>
 8004aec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004aee:	2800      	cmp	r0, #0
 8004af0:	f040 80cc 	bne.w	8004c8c <_vfprintf_r+0xd54>
 8004af4:	3b01      	subs	r3, #1
 8004af6:	3501      	adds	r5, #1
 8004af8:	3601      	adds	r6, #1
 8004afa:	441c      	add	r4, r3
 8004afc:	2d07      	cmp	r5, #7
 8004afe:	9528      	str	r5, [sp, #160]	; 0xa0
 8004b00:	9429      	str	r4, [sp, #164]	; 0xa4
 8004b02:	f8c9 6000 	str.w	r6, [r9]
 8004b06:	f8c9 3004 	str.w	r3, [r9, #4]
 8004b0a:	f300 81ac 	bgt.w	8004e66 <_vfprintf_r+0xf2e>
 8004b0e:	f109 0908 	add.w	r9, r9, #8
 8004b12:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004b14:	f8c9 2004 	str.w	r2, [r9, #4]
 8004b18:	3501      	adds	r5, #1
 8004b1a:	4414      	add	r4, r2
 8004b1c:	ab23      	add	r3, sp, #140	; 0x8c
 8004b1e:	2d07      	cmp	r5, #7
 8004b20:	9429      	str	r4, [sp, #164]	; 0xa4
 8004b22:	9528      	str	r5, [sp, #160]	; 0xa0
 8004b24:	f8c9 3000 	str.w	r3, [r9]
 8004b28:	f77f ace2 	ble.w	80044f0 <_vfprintf_r+0x5b8>
 8004b2c:	aa27      	add	r2, sp, #156	; 0x9c
 8004b2e:	9908      	ldr	r1, [sp, #32]
 8004b30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004b32:	f003 fc2f 	bl	8008394 <__sprint_r>
 8004b36:	2800      	cmp	r0, #0
 8004b38:	f47f ab2e 	bne.w	8004198 <_vfprintf_r+0x260>
 8004b3c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004b3e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004b42:	e4d7      	b.n	80044f4 <_vfprintf_r+0x5bc>
 8004b44:	aa27      	add	r2, sp, #156	; 0x9c
 8004b46:	9908      	ldr	r1, [sp, #32]
 8004b48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004b4a:	f003 fc23 	bl	8008394 <__sprint_r>
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	f43f ad1e 	beq.w	8004590 <_vfprintf_r+0x658>
 8004b54:	f7ff bb20 	b.w	8004198 <_vfprintf_r+0x260>
 8004b58:	aa27      	add	r2, sp, #156	; 0x9c
 8004b5a:	9908      	ldr	r1, [sp, #32]
 8004b5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004b5e:	f003 fc19 	bl	8008394 <__sprint_r>
 8004b62:	2800      	cmp	r0, #0
 8004b64:	f47f ab18 	bne.w	8004198 <_vfprintf_r+0x260>
 8004b68:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004b6a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004b6e:	e4ae      	b.n	80044ce <_vfprintf_r+0x596>
 8004b70:	aa27      	add	r2, sp, #156	; 0x9c
 8004b72:	9908      	ldr	r1, [sp, #32]
 8004b74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004b76:	f003 fc0d 	bl	8008394 <__sprint_r>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	f47f ab0c 	bne.w	8004198 <_vfprintf_r+0x260>
 8004b80:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004b82:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004b86:	e455      	b.n	8004434 <_vfprintf_r+0x4fc>
 8004b88:	aa27      	add	r2, sp, #156	; 0x9c
 8004b8a:	9908      	ldr	r1, [sp, #32]
 8004b8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004b8e:	f003 fc01 	bl	8008394 <__sprint_r>
 8004b92:	2800      	cmp	r0, #0
 8004b94:	f47f ab00 	bne.w	8004198 <_vfprintf_r+0x260>
 8004b98:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004b9a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004b9e:	e459      	b.n	8004454 <_vfprintf_r+0x51c>
 8004ba0:	f1bb 0f00 	cmp.w	fp, #0
 8004ba4:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004ba8:	f2c0 830d 	blt.w	80051c6 <_vfprintf_r+0x128e>
 8004bac:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004bb0:	9307      	str	r3, [sp, #28]
 8004bb2:	ea54 0305 	orrs.w	r3, r4, r5
 8004bb6:	f47f ad21 	bne.w	80045fc <_vfprintf_r+0x6c4>
 8004bba:	f1bb 0f00 	cmp.w	fp, #0
 8004bbe:	f43f ae8d 	beq.w	80048dc <_vfprintf_r+0x9a4>
 8004bc2:	2700      	movs	r7, #0
 8004bc4:	e6b3      	b.n	800492e <_vfprintf_r+0x9f6>
 8004bc6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8004bc8:	2d00      	cmp	r5, #0
 8004bca:	f340 82aa 	ble.w	8005122 <_vfprintf_r+0x11ea>
 8004bce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004bd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	bfa8      	it	ge
 8004bd6:	4613      	movge	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	461d      	mov	r5, r3
 8004bdc:	dd0d      	ble.n	8004bfa <_vfprintf_r+0xcc2>
 8004bde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004be0:	f8c9 6000 	str.w	r6, [r9]
 8004be4:	3301      	adds	r3, #1
 8004be6:	442c      	add	r4, r5
 8004be8:	2b07      	cmp	r3, #7
 8004bea:	9429      	str	r4, [sp, #164]	; 0xa4
 8004bec:	f8c9 5004 	str.w	r5, [r9, #4]
 8004bf0:	9328      	str	r3, [sp, #160]	; 0xa0
 8004bf2:	f300 8387 	bgt.w	8005304 <_vfprintf_r+0x13cc>
 8004bf6:	f109 0908 	add.w	r9, r9, #8
 8004bfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004bfc:	2d00      	cmp	r5, #0
 8004bfe:	bfa8      	it	ge
 8004c00:	1b5b      	subge	r3, r3, r5
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	461d      	mov	r5, r3
 8004c06:	f340 80be 	ble.w	8004d86 <_vfprintf_r+0xe4e>
 8004c0a:	4ab9      	ldr	r2, [pc, #740]	; (8004ef0 <_vfprintf_r+0xfb8>)
 8004c0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004c0e:	920f      	str	r2, [sp, #60]	; 0x3c
 8004c10:	2d10      	cmp	r5, #16
 8004c12:	f340 826d 	ble.w	80050f0 <_vfprintf_r+0x11b8>
 8004c16:	4622      	mov	r2, r4
 8004c18:	2710      	movs	r7, #16
 8004c1a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004c1e:	9c08      	ldr	r4, [sp, #32]
 8004c20:	e005      	b.n	8004c2e <_vfprintf_r+0xcf6>
 8004c22:	f109 0908 	add.w	r9, r9, #8
 8004c26:	3d10      	subs	r5, #16
 8004c28:	2d10      	cmp	r5, #16
 8004c2a:	f340 8260 	ble.w	80050ee <_vfprintf_r+0x11b6>
 8004c2e:	3301      	adds	r3, #1
 8004c30:	3210      	adds	r2, #16
 8004c32:	2b07      	cmp	r3, #7
 8004c34:	9229      	str	r2, [sp, #164]	; 0xa4
 8004c36:	9328      	str	r3, [sp, #160]	; 0xa0
 8004c38:	f8c9 a000 	str.w	sl, [r9]
 8004c3c:	f8c9 7004 	str.w	r7, [r9, #4]
 8004c40:	ddef      	ble.n	8004c22 <_vfprintf_r+0xcea>
 8004c42:	aa27      	add	r2, sp, #156	; 0x9c
 8004c44:	4621      	mov	r1, r4
 8004c46:	4658      	mov	r0, fp
 8004c48:	f003 fba4 	bl	8008394 <__sprint_r>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	f47f aaa3 	bne.w	8004198 <_vfprintf_r+0x260>
 8004c52:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004c54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004c56:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004c5a:	e7e4      	b.n	8004c26 <_vfprintf_r+0xcee>
 8004c5c:	aa27      	add	r2, sp, #156	; 0x9c
 8004c5e:	9908      	ldr	r1, [sp, #32]
 8004c60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004c62:	f003 fb97 	bl	8008394 <__sprint_r>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	f47f aa96 	bne.w	8004198 <_vfprintf_r+0x260>
 8004c6c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004c70:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004c72:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004c76:	f7ff bbcd 	b.w	8004414 <_vfprintf_r+0x4dc>
 8004c7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c7c:	6814      	ldr	r4, [r2, #0]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	3304      	adds	r3, #4
 8004c82:	17e5      	asrs	r5, r4, #31
 8004c84:	930e      	str	r3, [sp, #56]	; 0x38
 8004c86:	4622      	mov	r2, r4
 8004c88:	462b      	mov	r3, r5
 8004c8a:	e4f4      	b.n	8004676 <_vfprintf_r+0x73e>
 8004c8c:	1e5e      	subs	r6, r3, #1
 8004c8e:	2e00      	cmp	r6, #0
 8004c90:	f77f af3f 	ble.w	8004b12 <_vfprintf_r+0xbda>
 8004c94:	4b96      	ldr	r3, [pc, #600]	; (8004ef0 <_vfprintf_r+0xfb8>)
 8004c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c98:	2e10      	cmp	r6, #16
 8004c9a:	f340 8110 	ble.w	8004ebe <_vfprintf_r+0xf86>
 8004c9e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8004ca2:	2710      	movs	r7, #16
 8004ca4:	46b0      	mov	r8, r6
 8004ca6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004caa:	9e08      	ldr	r6, [sp, #32]
 8004cac:	e007      	b.n	8004cbe <_vfprintf_r+0xd86>
 8004cae:	f109 0908 	add.w	r9, r9, #8
 8004cb2:	f1a8 0810 	sub.w	r8, r8, #16
 8004cb6:	f1b8 0f10 	cmp.w	r8, #16
 8004cba:	f340 80fd 	ble.w	8004eb8 <_vfprintf_r+0xf80>
 8004cbe:	3501      	adds	r5, #1
 8004cc0:	3410      	adds	r4, #16
 8004cc2:	2d07      	cmp	r5, #7
 8004cc4:	9429      	str	r4, [sp, #164]	; 0xa4
 8004cc6:	9528      	str	r5, [sp, #160]	; 0xa0
 8004cc8:	f8c9 a000 	str.w	sl, [r9]
 8004ccc:	f8c9 7004 	str.w	r7, [r9, #4]
 8004cd0:	dded      	ble.n	8004cae <_vfprintf_r+0xd76>
 8004cd2:	aa27      	add	r2, sp, #156	; 0x9c
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4658      	mov	r0, fp
 8004cd8:	f003 fb5c 	bl	8008394 <__sprint_r>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	f47f aa5b 	bne.w	8004198 <_vfprintf_r+0x260>
 8004ce2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004ce4:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004ce6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004cea:	e7e2      	b.n	8004cb2 <_vfprintf_r+0xd7a>
 8004cec:	9907      	ldr	r1, [sp, #28]
 8004cee:	f011 0210 	ands.w	r2, r1, #16
 8004cf2:	d020      	beq.n	8004d36 <_vfprintf_r+0xdfe>
 8004cf4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004cf6:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004cfa:	f1bb 0f00 	cmp.w	fp, #0
 8004cfe:	6804      	ldr	r4, [r0, #0]
 8004d00:	f100 0704 	add.w	r7, r0, #4
 8004d04:	f04f 0500 	mov.w	r5, #0
 8004d08:	db26      	blt.n	8004d58 <_vfprintf_r+0xe20>
 8004d0a:	460a      	mov	r2, r1
 8004d0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d10:	9207      	str	r2, [sp, #28]
 8004d12:	ea54 0205 	orrs.w	r2, r4, r5
 8004d16:	970e      	str	r7, [sp, #56]	; 0x38
 8004d18:	461f      	mov	r7, r3
 8004d1a:	f47f ab03 	bne.w	8004324 <_vfprintf_r+0x3ec>
 8004d1e:	e4bd      	b.n	800469c <_vfprintf_r+0x764>
 8004d20:	3301      	adds	r3, #1
 8004d22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d24:	9328      	str	r3, [sp, #160]	; 0xa0
 8004d26:	442c      	add	r4, r5
 8004d28:	2b07      	cmp	r3, #7
 8004d2a:	9429      	str	r4, [sp, #164]	; 0xa4
 8004d2c:	e889 0024 	stmia.w	r9, {r2, r5}
 8004d30:	f77f abde 	ble.w	80044f0 <_vfprintf_r+0x5b8>
 8004d34:	e6fa      	b.n	8004b2c <_vfprintf_r+0xbf4>
 8004d36:	9907      	ldr	r1, [sp, #28]
 8004d38:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8004d3c:	f040 824a 	bne.w	80051d4 <_vfprintf_r+0x129c>
 8004d40:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004d42:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004d46:	f1bb 0f00 	cmp.w	fp, #0
 8004d4a:	680c      	ldr	r4, [r1, #0]
 8004d4c:	f101 0704 	add.w	r7, r1, #4
 8004d50:	f04f 0500 	mov.w	r5, #0
 8004d54:	f280 811a 	bge.w	8004f8c <_vfprintf_r+0x1054>
 8004d58:	970e      	str	r7, [sp, #56]	; 0x38
 8004d5a:	461f      	mov	r7, r3
 8004d5c:	ea54 0305 	orrs.w	r3, r4, r5
 8004d60:	f47f aae0 	bne.w	8004324 <_vfprintf_r+0x3ec>
 8004d64:	ae44      	add	r6, sp, #272	; 0x110
 8004d66:	3430      	adds	r4, #48	; 0x30
 8004d68:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8004d6c:	f7ff baf4 	b.w	8004358 <_vfprintf_r+0x420>
 8004d70:	aa27      	add	r2, sp, #156	; 0x9c
 8004d72:	9908      	ldr	r1, [sp, #32]
 8004d74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004d76:	f003 fb0d 	bl	8008394 <__sprint_r>
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	f47f aa0c 	bne.w	8004198 <_vfprintf_r+0x260>
 8004d80:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004d82:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004d86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004d88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d8a:	4432      	add	r2, r6
 8004d8c:	4617      	mov	r7, r2
 8004d8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d90:	4293      	cmp	r3, r2
 8004d92:	db47      	blt.n	8004e24 <_vfprintf_r+0xeec>
 8004d94:	9a07      	ldr	r2, [sp, #28]
 8004d96:	07d2      	lsls	r2, r2, #31
 8004d98:	d444      	bmi.n	8004e24 <_vfprintf_r+0xeec>
 8004d9a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004d9c:	440e      	add	r6, r1
 8004d9e:	1bf5      	subs	r5, r6, r7
 8004da0:	1acb      	subs	r3, r1, r3
 8004da2:	429d      	cmp	r5, r3
 8004da4:	bfa8      	it	ge
 8004da6:	461d      	movge	r5, r3
 8004da8:	2d00      	cmp	r5, #0
 8004daa:	462e      	mov	r6, r5
 8004dac:	dd0d      	ble.n	8004dca <_vfprintf_r+0xe92>
 8004dae:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004db0:	f8c9 7000 	str.w	r7, [r9]
 8004db4:	3201      	adds	r2, #1
 8004db6:	442c      	add	r4, r5
 8004db8:	2a07      	cmp	r2, #7
 8004dba:	9429      	str	r4, [sp, #164]	; 0xa4
 8004dbc:	f8c9 5004 	str.w	r5, [r9, #4]
 8004dc0:	9228      	str	r2, [sp, #160]	; 0xa0
 8004dc2:	f300 832e 	bgt.w	8005422 <_vfprintf_r+0x14ea>
 8004dc6:	f109 0908 	add.w	r9, r9, #8
 8004dca:	2e00      	cmp	r6, #0
 8004dcc:	bfac      	ite	ge
 8004dce:	1b9d      	subge	r5, r3, r6
 8004dd0:	461d      	movlt	r5, r3
 8004dd2:	2d00      	cmp	r5, #0
 8004dd4:	f77f ab8e 	ble.w	80044f4 <_vfprintf_r+0x5bc>
 8004dd8:	4a45      	ldr	r2, [pc, #276]	; (8004ef0 <_vfprintf_r+0xfb8>)
 8004dda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004ddc:	920f      	str	r2, [sp, #60]	; 0x3c
 8004dde:	2d10      	cmp	r5, #16
 8004de0:	dd9e      	ble.n	8004d20 <_vfprintf_r+0xde8>
 8004de2:	2610      	movs	r6, #16
 8004de4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004de6:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004dea:	e004      	b.n	8004df6 <_vfprintf_r+0xebe>
 8004dec:	f109 0908 	add.w	r9, r9, #8
 8004df0:	3d10      	subs	r5, #16
 8004df2:	2d10      	cmp	r5, #16
 8004df4:	dd94      	ble.n	8004d20 <_vfprintf_r+0xde8>
 8004df6:	3301      	adds	r3, #1
 8004df8:	3410      	adds	r4, #16
 8004dfa:	2b07      	cmp	r3, #7
 8004dfc:	9429      	str	r4, [sp, #164]	; 0xa4
 8004dfe:	9328      	str	r3, [sp, #160]	; 0xa0
 8004e00:	f8c9 a000 	str.w	sl, [r9]
 8004e04:	f8c9 6004 	str.w	r6, [r9, #4]
 8004e08:	ddf0      	ble.n	8004dec <_vfprintf_r+0xeb4>
 8004e0a:	aa27      	add	r2, sp, #156	; 0x9c
 8004e0c:	4659      	mov	r1, fp
 8004e0e:	4638      	mov	r0, r7
 8004e10:	f003 fac0 	bl	8008394 <__sprint_r>
 8004e14:	2800      	cmp	r0, #0
 8004e16:	f47f a9bf 	bne.w	8004198 <_vfprintf_r+0x260>
 8004e1a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004e1c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004e1e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004e22:	e7e5      	b.n	8004df0 <_vfprintf_r+0xeb8>
 8004e24:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004e26:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004e28:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004e2a:	f8c9 1000 	str.w	r1, [r9]
 8004e2e:	3201      	adds	r2, #1
 8004e30:	4404      	add	r4, r0
 8004e32:	2a07      	cmp	r2, #7
 8004e34:	9429      	str	r4, [sp, #164]	; 0xa4
 8004e36:	f8c9 0004 	str.w	r0, [r9, #4]
 8004e3a:	9228      	str	r2, [sp, #160]	; 0xa0
 8004e3c:	f300 82cf 	bgt.w	80053de <_vfprintf_r+0x14a6>
 8004e40:	f109 0908 	add.w	r9, r9, #8
 8004e44:	e7a9      	b.n	8004d9a <_vfprintf_r+0xe62>
 8004e46:	9b07      	ldr	r3, [sp, #28]
 8004e48:	07df      	lsls	r7, r3, #31
 8004e4a:	f53f ae2c 	bmi.w	8004aa6 <_vfprintf_r+0xb6e>
 8004e4e:	3501      	adds	r5, #1
 8004e50:	3401      	adds	r4, #1
 8004e52:	2301      	movs	r3, #1
 8004e54:	2d07      	cmp	r5, #7
 8004e56:	9429      	str	r4, [sp, #164]	; 0xa4
 8004e58:	9528      	str	r5, [sp, #160]	; 0xa0
 8004e5a:	f8c9 6000 	str.w	r6, [r9]
 8004e5e:	f8c9 3004 	str.w	r3, [r9, #4]
 8004e62:	f77f ae54 	ble.w	8004b0e <_vfprintf_r+0xbd6>
 8004e66:	aa27      	add	r2, sp, #156	; 0x9c
 8004e68:	9908      	ldr	r1, [sp, #32]
 8004e6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004e6c:	f003 fa92 	bl	8008394 <__sprint_r>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	f47f a991 	bne.w	8004198 <_vfprintf_r+0x260>
 8004e76:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004e78:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004e7a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004e7e:	e648      	b.n	8004b12 <_vfprintf_r+0xbda>
 8004e80:	aa27      	add	r2, sp, #156	; 0x9c
 8004e82:	9908      	ldr	r1, [sp, #32]
 8004e84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004e86:	f003 fa85 	bl	8008394 <__sprint_r>
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	f47f a984 	bne.w	8004198 <_vfprintf_r+0x260>
 8004e90:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004e92:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004e94:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004e98:	e613      	b.n	8004ac2 <_vfprintf_r+0xb8a>
 8004e9a:	aa27      	add	r2, sp, #156	; 0x9c
 8004e9c:	9908      	ldr	r1, [sp, #32]
 8004e9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004ea0:	f003 fa78 	bl	8008394 <__sprint_r>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	f47f a977 	bne.w	8004198 <_vfprintf_r+0x260>
 8004eaa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004eac:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004eae:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004eb2:	e615      	b.n	8004ae0 <_vfprintf_r+0xba8>
 8004eb4:	2400      	movs	r4, #0
 8004eb6:	e755      	b.n	8004d64 <_vfprintf_r+0xe2c>
 8004eb8:	4646      	mov	r6, r8
 8004eba:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8004ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ec0:	3501      	adds	r5, #1
 8004ec2:	4434      	add	r4, r6
 8004ec4:	2d07      	cmp	r5, #7
 8004ec6:	9429      	str	r4, [sp, #164]	; 0xa4
 8004ec8:	9528      	str	r5, [sp, #160]	; 0xa0
 8004eca:	e889 0048 	stmia.w	r9, {r3, r6}
 8004ece:	f77f ae1e 	ble.w	8004b0e <_vfprintf_r+0xbd6>
 8004ed2:	e7c8      	b.n	8004e66 <_vfprintf_r+0xf2e>
 8004ed4:	aa27      	add	r2, sp, #156	; 0x9c
 8004ed6:	9908      	ldr	r1, [sp, #32]
 8004ed8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004eda:	f003 fa5b 	bl	8008394 <__sprint_r>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	f47f a95a 	bne.w	8004198 <_vfprintf_r+0x260>
 8004ee4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004ee6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004eea:	f7ff bab7 	b.w	800445c <_vfprintf_r+0x524>
 8004eee:	bf00      	nop
 8004ef0:	0800966c 	.word	0x0800966c
 8004ef4:	4264      	negs	r4, r4
 8004ef6:	f04f 072d 	mov.w	r7, #45	; 0x2d
 8004efa:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8004efe:	f1bb 0f00 	cmp.w	fp, #0
 8004f02:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004f06:	f6ff aa0d 	blt.w	8004324 <_vfprintf_r+0x3ec>
 8004f0a:	9b07      	ldr	r3, [sp, #28]
 8004f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f10:	9307      	str	r3, [sp, #28]
 8004f12:	f7ff ba07 	b.w	8004324 <_vfprintf_r+0x3ec>
 8004f16:	9907      	ldr	r1, [sp, #28]
 8004f18:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8004f1c:	d017      	beq.n	8004f4e <_vfprintf_r+0x1016>
 8004f1e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004f20:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8004f24:	4603      	mov	r3, r0
 8004f26:	f1bb 0f00 	cmp.w	fp, #0
 8004f2a:	f103 0304 	add.w	r3, r3, #4
 8004f2e:	8804      	ldrh	r4, [r0, #0]
 8004f30:	f04f 0500 	mov.w	r5, #0
 8004f34:	f2c0 831b 	blt.w	800556e <_vfprintf_r+0x1636>
 8004f38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004f3c:	9107      	str	r1, [sp, #28]
 8004f3e:	ea54 0105 	orrs.w	r1, r4, r5
 8004f42:	930e      	str	r3, [sp, #56]	; 0x38
 8004f44:	f43f ace1 	beq.w	800490a <_vfprintf_r+0x9d2>
 8004f48:	4617      	mov	r7, r2
 8004f4a:	f7ff b95c 	b.w	8004206 <_vfprintf_r+0x2ce>
 8004f4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004f50:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004f54:	f1bb 0f00 	cmp.w	fp, #0
 8004f58:	680c      	ldr	r4, [r1, #0]
 8004f5a:	f101 0704 	add.w	r7, r1, #4
 8004f5e:	f04f 0500 	mov.w	r5, #0
 8004f62:	db02      	blt.n	8004f6a <_vfprintf_r+0x1032>
 8004f64:	9a07      	ldr	r2, [sp, #28]
 8004f66:	f7ff b9af 	b.w	80042c8 <_vfprintf_r+0x390>
 8004f6a:	970e      	str	r7, [sp, #56]	; 0x38
 8004f6c:	2700      	movs	r7, #0
 8004f6e:	f7ff b94a 	b.w	8004206 <_vfprintf_r+0x2ce>
 8004f72:	9b07      	ldr	r3, [sp, #28]
 8004f74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f76:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	f000 8142 	beq.w	8005204 <_vfprintf_r+0x12cc>
 8004f80:	3304      	adds	r3, #4
 8004f82:	8814      	ldrh	r4, [r2, #0]
 8004f84:	930e      	str	r3, [sp, #56]	; 0x38
 8004f86:	2500      	movs	r5, #0
 8004f88:	f7ff bb1a 	b.w	80045c0 <_vfprintf_r+0x688>
 8004f8c:	9a07      	ldr	r2, [sp, #28]
 8004f8e:	e6bd      	b.n	8004d0c <_vfprintf_r+0xdd4>
 8004f90:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	f004 f856 	bl	8009048 <__aeabi_dcmpun>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	f040 82e8 	bne.w	8005572 <_vfprintf_r+0x163a>
 8004fa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fa4:	f1bb 3fff 	cmp.w	fp, #4294967295
 8004fa8:	f023 0720 	bic.w	r7, r3, #32
 8004fac:	f000 825f 	beq.w	800546e <_vfprintf_r+0x1536>
 8004fb0:	2f47      	cmp	r7, #71	; 0x47
 8004fb2:	f000 8158 	beq.w	8005266 <_vfprintf_r+0x132e>
 8004fb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004fb8:	9a07      	ldr	r2, [sp, #28]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc0:	920f      	str	r2, [sp, #60]	; 0x3c
 8004fc2:	f2c0 825c 	blt.w	800547e <_vfprintf_r+0x1546>
 8004fc6:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8004fca:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8004fce:	2300      	movs	r3, #0
 8004fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8004fd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fd4:	2b66      	cmp	r3, #102	; 0x66
 8004fd6:	f000 8233 	beq.w	8005440 <_vfprintf_r+0x1508>
 8004fda:	2b46      	cmp	r3, #70	; 0x46
 8004fdc:	f000 8125 	beq.w	800522a <_vfprintf_r+0x12f2>
 8004fe0:	2f45      	cmp	r7, #69	; 0x45
 8004fe2:	bf0c      	ite	eq
 8004fe4:	f10b 0501 	addeq.w	r5, fp, #1
 8004fe8:	465d      	movne	r5, fp
 8004fea:	a825      	add	r0, sp, #148	; 0x94
 8004fec:	a922      	add	r1, sp, #136	; 0x88
 8004fee:	aa21      	add	r2, sp, #132	; 0x84
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	9004      	str	r0, [sp, #16]
 8004ff4:	9202      	str	r2, [sp, #8]
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	9501      	str	r5, [sp, #4]
 8004ffa:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8004ffe:	9103      	str	r1, [sp, #12]
 8005000:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005002:	f000 fc89 	bl	8005918 <_dtoa_r>
 8005006:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005008:	2b67      	cmp	r3, #103	; 0x67
 800500a:	4606      	mov	r6, r0
 800500c:	f040 8275 	bne.w	80054fa <_vfprintf_r+0x15c2>
 8005010:	9b07      	ldr	r3, [sp, #28]
 8005012:	07da      	lsls	r2, r3, #31
 8005014:	f140 8294 	bpl.w	8005540 <_vfprintf_r+0x1608>
 8005018:	1974      	adds	r4, r6, r5
 800501a:	2200      	movs	r2, #0
 800501c:	2300      	movs	r3, #0
 800501e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8005022:	f003 ffdf 	bl	8008fe4 <__aeabi_dcmpeq>
 8005026:	2800      	cmp	r0, #0
 8005028:	f040 8178 	bne.w	800531c <_vfprintf_r+0x13e4>
 800502c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800502e:	429c      	cmp	r4, r3
 8005030:	d906      	bls.n	8005040 <_vfprintf_r+0x1108>
 8005032:	2130      	movs	r1, #48	; 0x30
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	9225      	str	r2, [sp, #148]	; 0x94
 8005038:	7019      	strb	r1, [r3, #0]
 800503a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800503c:	429c      	cmp	r4, r3
 800503e:	d8f9      	bhi.n	8005034 <_vfprintf_r+0x10fc>
 8005040:	1b9b      	subs	r3, r3, r6
 8005042:	2f47      	cmp	r7, #71	; 0x47
 8005044:	9312      	str	r3, [sp, #72]	; 0x48
 8005046:	f000 8156 	beq.w	80052f6 <_vfprintf_r+0x13be>
 800504a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800504c:	2b65      	cmp	r3, #101	; 0x65
 800504e:	f340 8263 	ble.w	8005518 <_vfprintf_r+0x15e0>
 8005052:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005054:	2b66      	cmp	r3, #102	; 0x66
 8005056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005058:	9313      	str	r3, [sp, #76]	; 0x4c
 800505a:	f000 8226 	beq.w	80054aa <_vfprintf_r+0x1572>
 800505e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005060:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005062:	428a      	cmp	r2, r1
 8005064:	f2c0 8214 	blt.w	8005490 <_vfprintf_r+0x1558>
 8005068:	9b07      	ldr	r3, [sp, #28]
 800506a:	07db      	lsls	r3, r3, #31
 800506c:	f100 826a 	bmi.w	8005544 <_vfprintf_r+0x160c>
 8005070:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005074:	920d      	str	r2, [sp, #52]	; 0x34
 8005076:	2267      	movs	r2, #103	; 0x67
 8005078:	9211      	str	r2, [sp, #68]	; 0x44
 800507a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800507c:	2a00      	cmp	r2, #0
 800507e:	f040 8117 	bne.w	80052b0 <_vfprintf_r+0x1378>
 8005082:	9309      	str	r3, [sp, #36]	; 0x24
 8005084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005086:	9307      	str	r3, [sp, #28]
 8005088:	4693      	mov	fp, r2
 800508a:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800508e:	f7ff b96d 	b.w	800436c <_vfprintf_r+0x434>
 8005092:	f027 0707 	bic.w	r7, r7, #7
 8005096:	ed97 7b00 	vldr	d7, [r7]
 800509a:	f107 0308 	add.w	r3, r7, #8
 800509e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80050a2:	930e      	str	r3, [sp, #56]	; 0x38
 80050a4:	f7ff bb77 	b.w	8004796 <_vfprintf_r+0x85e>
 80050a8:	9b07      	ldr	r3, [sp, #28]
 80050aa:	06de      	lsls	r6, r3, #27
 80050ac:	d40b      	bmi.n	80050c6 <_vfprintf_r+0x118e>
 80050ae:	9b07      	ldr	r3, [sp, #28]
 80050b0:	065d      	lsls	r5, r3, #25
 80050b2:	d508      	bpl.n	80050c6 <_vfprintf_r+0x118e>
 80050b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	3204      	adds	r2, #4
 80050ba:	920e      	str	r2, [sp, #56]	; 0x38
 80050bc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80050c0:	801a      	strh	r2, [r3, #0]
 80050c2:	f7fe bf7a 	b.w	8003fba <_vfprintf_r+0x82>
 80050c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050c8:	6813      	ldr	r3, [r2, #0]
 80050ca:	3204      	adds	r2, #4
 80050cc:	920e      	str	r2, [sp, #56]	; 0x38
 80050ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	f7fe bf72 	b.w	8003fba <_vfprintf_r+0x82>
 80050d6:	2700      	movs	r7, #0
 80050d8:	45bb      	cmp	fp, r7
 80050da:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80050de:	f6ff ac26 	blt.w	800492e <_vfprintf_r+0x9f6>
 80050e2:	9b07      	ldr	r3, [sp, #28]
 80050e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e8:	9307      	str	r3, [sp, #28]
 80050ea:	f7ff bbf3 	b.w	80048d4 <_vfprintf_r+0x99c>
 80050ee:	4614      	mov	r4, r2
 80050f0:	3301      	adds	r3, #1
 80050f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80050f6:	442c      	add	r4, r5
 80050f8:	2b07      	cmp	r3, #7
 80050fa:	9429      	str	r4, [sp, #164]	; 0xa4
 80050fc:	e889 0024 	stmia.w	r9, {r2, r5}
 8005100:	f73f ae36 	bgt.w	8004d70 <_vfprintf_r+0xe38>
 8005104:	f109 0908 	add.w	r9, r9, #8
 8005108:	e63d      	b.n	8004d86 <_vfprintf_r+0xe4e>
 800510a:	aa27      	add	r2, sp, #156	; 0x9c
 800510c:	9908      	ldr	r1, [sp, #32]
 800510e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005110:	f003 f940 	bl	8008394 <__sprint_r>
 8005114:	2800      	cmp	r0, #0
 8005116:	f47f a83f 	bne.w	8004198 <_vfprintf_r+0x260>
 800511a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800511c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005120:	e427      	b.n	8004972 <_vfprintf_r+0xa3a>
 8005122:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005124:	4ab4      	ldr	r2, [pc, #720]	; (80053f8 <_vfprintf_r+0x14c0>)
 8005126:	f8c9 2000 	str.w	r2, [r9]
 800512a:	3301      	adds	r3, #1
 800512c:	3401      	adds	r4, #1
 800512e:	2201      	movs	r2, #1
 8005130:	2b07      	cmp	r3, #7
 8005132:	9429      	str	r4, [sp, #164]	; 0xa4
 8005134:	9328      	str	r3, [sp, #160]	; 0xa0
 8005136:	f8c9 2004 	str.w	r2, [r9, #4]
 800513a:	dc69      	bgt.n	8005210 <_vfprintf_r+0x12d8>
 800513c:	f109 0908 	add.w	r9, r9, #8
 8005140:	b92d      	cbnz	r5, 800514e <_vfprintf_r+0x1216>
 8005142:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005144:	b91b      	cbnz	r3, 800514e <_vfprintf_r+0x1216>
 8005146:	9b07      	ldr	r3, [sp, #28]
 8005148:	07d9      	lsls	r1, r3, #31
 800514a:	f57f a9d3 	bpl.w	80044f4 <_vfprintf_r+0x5bc>
 800514e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005150:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005152:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005154:	f8c9 2000 	str.w	r2, [r9]
 8005158:	3301      	adds	r3, #1
 800515a:	440c      	add	r4, r1
 800515c:	2b07      	cmp	r3, #7
 800515e:	9429      	str	r4, [sp, #164]	; 0xa4
 8005160:	f8c9 1004 	str.w	r1, [r9, #4]
 8005164:	9328      	str	r3, [sp, #160]	; 0xa0
 8005166:	f300 81d9 	bgt.w	800551c <_vfprintf_r+0x15e4>
 800516a:	f109 0908 	add.w	r9, r9, #8
 800516e:	426d      	negs	r5, r5
 8005170:	2d00      	cmp	r5, #0
 8005172:	f340 80b3 	ble.w	80052dc <_vfprintf_r+0x13a4>
 8005176:	4aa1      	ldr	r2, [pc, #644]	; (80053fc <_vfprintf_r+0x14c4>)
 8005178:	920f      	str	r2, [sp, #60]	; 0x3c
 800517a:	2d10      	cmp	r5, #16
 800517c:	f340 8122 	ble.w	80053c4 <_vfprintf_r+0x148c>
 8005180:	4622      	mov	r2, r4
 8005182:	2710      	movs	r7, #16
 8005184:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005188:	9c08      	ldr	r4, [sp, #32]
 800518a:	e005      	b.n	8005198 <_vfprintf_r+0x1260>
 800518c:	f109 0908 	add.w	r9, r9, #8
 8005190:	3d10      	subs	r5, #16
 8005192:	2d10      	cmp	r5, #16
 8005194:	f340 8115 	ble.w	80053c2 <_vfprintf_r+0x148a>
 8005198:	3301      	adds	r3, #1
 800519a:	3210      	adds	r2, #16
 800519c:	2b07      	cmp	r3, #7
 800519e:	9229      	str	r2, [sp, #164]	; 0xa4
 80051a0:	9328      	str	r3, [sp, #160]	; 0xa0
 80051a2:	f8c9 a000 	str.w	sl, [r9]
 80051a6:	f8c9 7004 	str.w	r7, [r9, #4]
 80051aa:	ddef      	ble.n	800518c <_vfprintf_r+0x1254>
 80051ac:	aa27      	add	r2, sp, #156	; 0x9c
 80051ae:	4621      	mov	r1, r4
 80051b0:	4658      	mov	r0, fp
 80051b2:	f003 f8ef 	bl	8008394 <__sprint_r>
 80051b6:	2800      	cmp	r0, #0
 80051b8:	f47e afee 	bne.w	8004198 <_vfprintf_r+0x260>
 80051bc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80051be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80051c0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80051c4:	e7e4      	b.n	8005190 <_vfprintf_r+0x1258>
 80051c6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80051c8:	f7ff bbaa 	b.w	8004920 <_vfprintf_r+0x9e8>
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295
 80051d0:	f7fe bfe8 	b.w	80041a4 <_vfprintf_r+0x26c>
 80051d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80051d6:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80051da:	4603      	mov	r3, r0
 80051dc:	f1bb 0f00 	cmp.w	fp, #0
 80051e0:	f103 0304 	add.w	r3, r3, #4
 80051e4:	8804      	ldrh	r4, [r0, #0]
 80051e6:	f04f 0500 	mov.w	r5, #0
 80051ea:	f2c0 81b4 	blt.w	8005556 <_vfprintf_r+0x161e>
 80051ee:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80051f2:	9107      	str	r1, [sp, #28]
 80051f4:	ea54 0105 	orrs.w	r1, r4, r5
 80051f8:	930e      	str	r3, [sp, #56]	; 0x38
 80051fa:	4617      	mov	r7, r2
 80051fc:	f47f a892 	bne.w	8004324 <_vfprintf_r+0x3ec>
 8005200:	f7ff ba4c 	b.w	800469c <_vfprintf_r+0x764>
 8005204:	3304      	adds	r3, #4
 8005206:	6814      	ldr	r4, [r2, #0]
 8005208:	930e      	str	r3, [sp, #56]	; 0x38
 800520a:	2500      	movs	r5, #0
 800520c:	f7ff b9d8 	b.w	80045c0 <_vfprintf_r+0x688>
 8005210:	aa27      	add	r2, sp, #156	; 0x9c
 8005212:	9908      	ldr	r1, [sp, #32]
 8005214:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005216:	f003 f8bd 	bl	8008394 <__sprint_r>
 800521a:	2800      	cmp	r0, #0
 800521c:	f47e afbc 	bne.w	8004198 <_vfprintf_r+0x260>
 8005220:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005222:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005224:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005228:	e78a      	b.n	8005140 <_vfprintf_r+0x1208>
 800522a:	a825      	add	r0, sp, #148	; 0x94
 800522c:	a922      	add	r1, sp, #136	; 0x88
 800522e:	aa21      	add	r2, sp, #132	; 0x84
 8005230:	2303      	movs	r3, #3
 8005232:	9004      	str	r0, [sp, #16]
 8005234:	9202      	str	r2, [sp, #8]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	f8cd b004 	str.w	fp, [sp, #4]
 800523c:	9103      	str	r1, [sp, #12]
 800523e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005242:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005244:	f000 fb68 	bl	8005918 <_dtoa_r>
 8005248:	465d      	mov	r5, fp
 800524a:	4606      	mov	r6, r0
 800524c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800524e:	2b46      	cmp	r3, #70	; 0x46
 8005250:	eb06 0405 	add.w	r4, r6, r5
 8005254:	f47f aee1 	bne.w	800501a <_vfprintf_r+0x10e2>
 8005258:	7833      	ldrb	r3, [r6, #0]
 800525a:	2b30      	cmp	r3, #48	; 0x30
 800525c:	f000 8198 	beq.w	8005590 <_vfprintf_r+0x1658>
 8005260:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005262:	442c      	add	r4, r5
 8005264:	e6d9      	b.n	800501a <_vfprintf_r+0x10e2>
 8005266:	f1bb 0f00 	cmp.w	fp, #0
 800526a:	bf08      	it	eq
 800526c:	f04f 0b01 	moveq.w	fp, #1
 8005270:	e6a1      	b.n	8004fb6 <_vfprintf_r+0x107e>
 8005272:	9b07      	ldr	r3, [sp, #28]
 8005274:	f043 0320 	orr.w	r3, r3, #32
 8005278:	9307      	str	r3, [sp, #28]
 800527a:	f108 0801 	add.w	r8, r8, #1
 800527e:	f898 3000 	ldrb.w	r3, [r8]
 8005282:	f7fe becd 	b.w	8004020 <_vfprintf_r+0xe8>
 8005286:	aa27      	add	r2, sp, #156	; 0x9c
 8005288:	9908      	ldr	r1, [sp, #32]
 800528a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800528c:	f003 f882 	bl	8008394 <__sprint_r>
 8005290:	2800      	cmp	r0, #0
 8005292:	f47e af81 	bne.w	8004198 <_vfprintf_r+0x260>
 8005296:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005298:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800529c:	f7ff bb81 	b.w	80049a2 <_vfprintf_r+0xa6a>
 80052a0:	4630      	mov	r0, r6
 80052a2:	f7fd fa0d 	bl	80026c0 <strlen>
 80052a6:	46a3      	mov	fp, r4
 80052a8:	4603      	mov	r3, r0
 80052aa:	900d      	str	r0, [sp, #52]	; 0x34
 80052ac:	f7ff bb01 	b.w	80048b2 <_vfprintf_r+0x97a>
 80052b0:	272d      	movs	r7, #45	; 0x2d
 80052b2:	9309      	str	r3, [sp, #36]	; 0x24
 80052b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052b6:	9307      	str	r3, [sp, #28]
 80052b8:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80052bc:	f04f 0b00 	mov.w	fp, #0
 80052c0:	f7ff b855 	b.w	800436e <_vfprintf_r+0x436>
 80052c4:	aa27      	add	r2, sp, #156	; 0x9c
 80052c6:	9908      	ldr	r1, [sp, #32]
 80052c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80052ca:	f003 f863 	bl	8008394 <__sprint_r>
 80052ce:	2800      	cmp	r0, #0
 80052d0:	f47e af62 	bne.w	8004198 <_vfprintf_r+0x260>
 80052d4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80052d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80052d8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80052dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80052de:	f8c9 6000 	str.w	r6, [r9]
 80052e2:	3301      	adds	r3, #1
 80052e4:	440c      	add	r4, r1
 80052e6:	2b07      	cmp	r3, #7
 80052e8:	9429      	str	r4, [sp, #164]	; 0xa4
 80052ea:	9328      	str	r3, [sp, #160]	; 0xa0
 80052ec:	f8c9 1004 	str.w	r1, [r9, #4]
 80052f0:	f77f a8fe 	ble.w	80044f0 <_vfprintf_r+0x5b8>
 80052f4:	e41a      	b.n	8004b2c <_vfprintf_r+0xbf4>
 80052f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052f8:	1cd8      	adds	r0, r3, #3
 80052fa:	db11      	blt.n	8005320 <_vfprintf_r+0x13e8>
 80052fc:	459b      	cmp	fp, r3
 80052fe:	db0f      	blt.n	8005320 <_vfprintf_r+0x13e8>
 8005300:	9313      	str	r3, [sp, #76]	; 0x4c
 8005302:	e6ac      	b.n	800505e <_vfprintf_r+0x1126>
 8005304:	aa27      	add	r2, sp, #156	; 0x9c
 8005306:	9908      	ldr	r1, [sp, #32]
 8005308:	980a      	ldr	r0, [sp, #40]	; 0x28
 800530a:	f003 f843 	bl	8008394 <__sprint_r>
 800530e:	2800      	cmp	r0, #0
 8005310:	f47e af42 	bne.w	8004198 <_vfprintf_r+0x260>
 8005314:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005316:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800531a:	e46e      	b.n	8004bfa <_vfprintf_r+0xcc2>
 800531c:	4623      	mov	r3, r4
 800531e:	e68f      	b.n	8005040 <_vfprintf_r+0x1108>
 8005320:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005322:	3a02      	subs	r2, #2
 8005324:	9211      	str	r2, [sp, #68]	; 0x44
 8005326:	3b01      	subs	r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800532e:	9321      	str	r3, [sp, #132]	; 0x84
 8005330:	bfb8      	it	lt
 8005332:	425b      	neglt	r3, r3
 8005334:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8005338:	bfb4      	ite	lt
 800533a:	222d      	movlt	r2, #45	; 0x2d
 800533c:	222b      	movge	r2, #43	; 0x2b
 800533e:	2b09      	cmp	r3, #9
 8005340:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8005344:	f340 810b 	ble.w	800555e <_vfprintf_r+0x1626>
 8005348:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 800534c:	4604      	mov	r4, r0
 800534e:	4a2c      	ldr	r2, [pc, #176]	; (8005400 <_vfprintf_r+0x14c8>)
 8005350:	fb82 2103 	smull	r2, r1, r2, r3
 8005354:	17da      	asrs	r2, r3, #31
 8005356:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800535a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800535e:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8005362:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005366:	2a09      	cmp	r2, #9
 8005368:	4613      	mov	r3, r2
 800536a:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800536e:	dcee      	bgt.n	800534e <_vfprintf_r+0x1416>
 8005370:	4621      	mov	r1, r4
 8005372:	3330      	adds	r3, #48	; 0x30
 8005374:	b2da      	uxtb	r2, r3
 8005376:	f801 2d01 	strb.w	r2, [r1, #-1]!
 800537a:	4288      	cmp	r0, r1
 800537c:	f240 816f 	bls.w	800565e <_vfprintf_r+0x1726>
 8005380:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8005384:	4623      	mov	r3, r4
 8005386:	e001      	b.n	800538c <_vfprintf_r+0x1454>
 8005388:	f813 2b01 	ldrb.w	r2, [r3], #1
 800538c:	f801 2b01 	strb.w	r2, [r1], #1
 8005390:	4298      	cmp	r0, r3
 8005392:	d1f9      	bne.n	8005388 <_vfprintf_r+0x1450>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	1b1b      	subs	r3, r3, r4
 8005398:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 800539c:	4413      	add	r3, r2
 800539e:	aa23      	add	r2, sp, #140	; 0x8c
 80053a0:	1a9b      	subs	r3, r3, r2
 80053a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053a4:	9319      	str	r3, [sp, #100]	; 0x64
 80053a6:	2a01      	cmp	r2, #1
 80053a8:	4413      	add	r3, r2
 80053aa:	930d      	str	r3, [sp, #52]	; 0x34
 80053ac:	f340 80fe 	ble.w	80055ac <_vfprintf_r+0x1674>
 80053b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80053b4:	4413      	add	r3, r2
 80053b6:	2200      	movs	r2, #0
 80053b8:	930d      	str	r3, [sp, #52]	; 0x34
 80053ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80053bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80053c0:	e65b      	b.n	800507a <_vfprintf_r+0x1142>
 80053c2:	4614      	mov	r4, r2
 80053c4:	3301      	adds	r3, #1
 80053c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80053c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80053ca:	442c      	add	r4, r5
 80053cc:	2b07      	cmp	r3, #7
 80053ce:	9429      	str	r4, [sp, #164]	; 0xa4
 80053d0:	e889 0024 	stmia.w	r9, {r2, r5}
 80053d4:	f73f af76 	bgt.w	80052c4 <_vfprintf_r+0x138c>
 80053d8:	f109 0908 	add.w	r9, r9, #8
 80053dc:	e77e      	b.n	80052dc <_vfprintf_r+0x13a4>
 80053de:	aa27      	add	r2, sp, #156	; 0x9c
 80053e0:	9908      	ldr	r1, [sp, #32]
 80053e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80053e4:	f002 ffd6 	bl	8008394 <__sprint_r>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	f47e aed5 	bne.w	8004198 <_vfprintf_r+0x260>
 80053ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053f0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80053f2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80053f6:	e4d0      	b.n	8004d9a <_vfprintf_r+0xe62>
 80053f8:	08009658 	.word	0x08009658
 80053fc:	0800966c 	.word	0x0800966c
 8005400:	66666667 	.word	0x66666667
 8005404:	2d06      	cmp	r5, #6
 8005406:	462b      	mov	r3, r5
 8005408:	bf28      	it	cs
 800540a:	2306      	movcs	r3, #6
 800540c:	930d      	str	r3, [sp, #52]	; 0x34
 800540e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005412:	46b3      	mov	fp, r6
 8005414:	970e      	str	r7, [sp, #56]	; 0x38
 8005416:	9613      	str	r6, [sp, #76]	; 0x4c
 8005418:	4637      	mov	r7, r6
 800541a:	9309      	str	r3, [sp, #36]	; 0x24
 800541c:	4e91      	ldr	r6, [pc, #580]	; (8005664 <_vfprintf_r+0x172c>)
 800541e:	f7fe bfa5 	b.w	800436c <_vfprintf_r+0x434>
 8005422:	aa27      	add	r2, sp, #156	; 0x9c
 8005424:	9908      	ldr	r1, [sp, #32]
 8005426:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005428:	f002 ffb4 	bl	8008394 <__sprint_r>
 800542c:	2800      	cmp	r0, #0
 800542e:	f47e aeb3 	bne.w	8004198 <_vfprintf_r+0x260>
 8005432:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005434:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005436:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800543e:	e4c4      	b.n	8004dca <_vfprintf_r+0xe92>
 8005440:	a825      	add	r0, sp, #148	; 0x94
 8005442:	a922      	add	r1, sp, #136	; 0x88
 8005444:	aa21      	add	r2, sp, #132	; 0x84
 8005446:	2303      	movs	r3, #3
 8005448:	9004      	str	r0, [sp, #16]
 800544a:	9202      	str	r2, [sp, #8]
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	f8cd b004 	str.w	fp, [sp, #4]
 8005452:	9103      	str	r1, [sp, #12]
 8005454:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005458:	980a      	ldr	r0, [sp, #40]	; 0x28
 800545a:	f000 fa5d 	bl	8005918 <_dtoa_r>
 800545e:	465d      	mov	r5, fp
 8005460:	4606      	mov	r6, r0
 8005462:	eb00 040b 	add.w	r4, r0, fp
 8005466:	e6f7      	b.n	8005258 <_vfprintf_r+0x1320>
 8005468:	9307      	str	r3, [sp, #28]
 800546a:	f7ff b8c7 	b.w	80045fc <_vfprintf_r+0x6c4>
 800546e:	f04f 0b06 	mov.w	fp, #6
 8005472:	e5a0      	b.n	8004fb6 <_vfprintf_r+0x107e>
 8005474:	272d      	movs	r7, #45	; 0x2d
 8005476:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800547a:	f7ff b9b3 	b.w	80047e4 <_vfprintf_r+0x8ac>
 800547e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8005482:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8005486:	931d      	str	r3, [sp, #116]	; 0x74
 8005488:	232d      	movs	r3, #45	; 0x2d
 800548a:	911c      	str	r1, [sp, #112]	; 0x70
 800548c:	9309      	str	r3, [sp, #36]	; 0x24
 800548e:	e5a0      	b.n	8004fd2 <_vfprintf_r+0x109a>
 8005490:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005492:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005494:	4413      	add	r3, r2
 8005496:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005498:	930d      	str	r3, [sp, #52]	; 0x34
 800549a:	2a00      	cmp	r2, #0
 800549c:	f340 8090 	ble.w	80055c0 <_vfprintf_r+0x1688>
 80054a0:	2267      	movs	r2, #103	; 0x67
 80054a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80054a6:	9211      	str	r2, [sp, #68]	; 0x44
 80054a8:	e5e7      	b.n	800507a <_vfprintf_r+0x1142>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f340 8090 	ble.w	80055d0 <_vfprintf_r+0x1698>
 80054b0:	f1bb 0f00 	cmp.w	fp, #0
 80054b4:	d163      	bne.n	800557e <_vfprintf_r+0x1646>
 80054b6:	9a07      	ldr	r2, [sp, #28]
 80054b8:	07d1      	lsls	r1, r2, #31
 80054ba:	d460      	bmi.n	800557e <_vfprintf_r+0x1646>
 80054bc:	461a      	mov	r2, r3
 80054be:	920d      	str	r2, [sp, #52]	; 0x34
 80054c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80054c4:	e5d9      	b.n	800507a <_vfprintf_r+0x1142>
 80054c6:	9b07      	ldr	r3, [sp, #28]
 80054c8:	07db      	lsls	r3, r3, #31
 80054ca:	465f      	mov	r7, fp
 80054cc:	d505      	bpl.n	80054da <_vfprintf_r+0x15a2>
 80054ce:	ae44      	add	r6, sp, #272	; 0x110
 80054d0:	2330      	movs	r3, #48	; 0x30
 80054d2:	f806 3d41 	strb.w	r3, [r6, #-65]!
 80054d6:	f7fe bf3f 	b.w	8004358 <_vfprintf_r+0x420>
 80054da:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80054de:	ae34      	add	r6, sp, #208	; 0xd0
 80054e0:	f7fe bf3d 	b.w	800435e <_vfprintf_r+0x426>
 80054e4:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 80054e8:	970e      	str	r7, [sp, #56]	; 0x38
 80054ea:	9309      	str	r3, [sp, #36]	; 0x24
 80054ec:	950d      	str	r5, [sp, #52]	; 0x34
 80054ee:	4683      	mov	fp, r0
 80054f0:	9013      	str	r0, [sp, #76]	; 0x4c
 80054f2:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80054f6:	f7fe bf39 	b.w	800436c <_vfprintf_r+0x434>
 80054fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80054fc:	2b47      	cmp	r3, #71	; 0x47
 80054fe:	f47f ad8b 	bne.w	8005018 <_vfprintf_r+0x10e0>
 8005502:	9b07      	ldr	r3, [sp, #28]
 8005504:	07dc      	lsls	r4, r3, #31
 8005506:	f53f aea1 	bmi.w	800524c <_vfprintf_r+0x1314>
 800550a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800550c:	2f47      	cmp	r7, #71	; 0x47
 800550e:	eba3 0306 	sub.w	r3, r3, r6
 8005512:	9312      	str	r3, [sp, #72]	; 0x48
 8005514:	f43f aeef 	beq.w	80052f6 <_vfprintf_r+0x13be>
 8005518:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800551a:	e704      	b.n	8005326 <_vfprintf_r+0x13ee>
 800551c:	aa27      	add	r2, sp, #156	; 0x9c
 800551e:	9908      	ldr	r1, [sp, #32]
 8005520:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005522:	f002 ff37 	bl	8008394 <__sprint_r>
 8005526:	2800      	cmp	r0, #0
 8005528:	f47e ae36 	bne.w	8004198 <_vfprintf_r+0x260>
 800552c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800552e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005530:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005532:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005536:	e61a      	b.n	800516e <_vfprintf_r+0x1236>
 8005538:	46a0      	mov	r8, r4
 800553a:	2500      	movs	r5, #0
 800553c:	f7fe bd72 	b.w	8004024 <_vfprintf_r+0xec>
 8005540:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005542:	e57d      	b.n	8005040 <_vfprintf_r+0x1108>
 8005544:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005546:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005548:	4413      	add	r3, r2
 800554a:	2267      	movs	r2, #103	; 0x67
 800554c:	930d      	str	r3, [sp, #52]	; 0x34
 800554e:	9211      	str	r2, [sp, #68]	; 0x44
 8005550:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005554:	e591      	b.n	800507a <_vfprintf_r+0x1142>
 8005556:	930e      	str	r3, [sp, #56]	; 0x38
 8005558:	4617      	mov	r7, r2
 800555a:	f7ff bbff 	b.w	8004d5c <_vfprintf_r+0xe24>
 800555e:	3330      	adds	r3, #48	; 0x30
 8005560:	2230      	movs	r2, #48	; 0x30
 8005562:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8005566:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 800556a:	ab24      	add	r3, sp, #144	; 0x90
 800556c:	e717      	b.n	800539e <_vfprintf_r+0x1466>
 800556e:	930e      	str	r3, [sp, #56]	; 0x38
 8005570:	e4fc      	b.n	8004f6c <_vfprintf_r+0x1034>
 8005572:	4e3d      	ldr	r6, [pc, #244]	; (8005668 <_vfprintf_r+0x1730>)
 8005574:	4b3d      	ldr	r3, [pc, #244]	; (800566c <_vfprintf_r+0x1734>)
 8005576:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800557a:	f7ff b935 	b.w	80047e8 <_vfprintf_r+0x8b0>
 800557e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005580:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005582:	189d      	adds	r5, r3, r2
 8005584:	eb05 030b 	add.w	r3, r5, fp
 8005588:	930d      	str	r3, [sp, #52]	; 0x34
 800558a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800558e:	e574      	b.n	800507a <_vfprintf_r+0x1142>
 8005590:	2200      	movs	r2, #0
 8005592:	2300      	movs	r3, #0
 8005594:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8005598:	f003 fd24 	bl	8008fe4 <__aeabi_dcmpeq>
 800559c:	2800      	cmp	r0, #0
 800559e:	f47f ae5f 	bne.w	8005260 <_vfprintf_r+0x1328>
 80055a2:	f1c5 0501 	rsb	r5, r5, #1
 80055a6:	9521      	str	r5, [sp, #132]	; 0x84
 80055a8:	442c      	add	r4, r5
 80055aa:	e536      	b.n	800501a <_vfprintf_r+0x10e2>
 80055ac:	9b07      	ldr	r3, [sp, #28]
 80055ae:	f013 0301 	ands.w	r3, r3, #1
 80055b2:	f47f aefd 	bne.w	80053b0 <_vfprintf_r+0x1478>
 80055b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80055b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80055be:	e55c      	b.n	800507a <_vfprintf_r+0x1142>
 80055c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055c4:	f1c3 0301 	rsb	r3, r3, #1
 80055c8:	441a      	add	r2, r3
 80055ca:	4613      	mov	r3, r2
 80055cc:	920d      	str	r2, [sp, #52]	; 0x34
 80055ce:	e767      	b.n	80054a0 <_vfprintf_r+0x1568>
 80055d0:	f1bb 0f00 	cmp.w	fp, #0
 80055d4:	d102      	bne.n	80055dc <_vfprintf_r+0x16a4>
 80055d6:	9b07      	ldr	r3, [sp, #28]
 80055d8:	07da      	lsls	r2, r3, #31
 80055da:	d507      	bpl.n	80055ec <_vfprintf_r+0x16b4>
 80055dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80055de:	1c5d      	adds	r5, r3, #1
 80055e0:	eb05 030b 	add.w	r3, r5, fp
 80055e4:	930d      	str	r3, [sp, #52]	; 0x34
 80055e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80055ea:	e546      	b.n	800507a <_vfprintf_r+0x1142>
 80055ec:	2301      	movs	r3, #1
 80055ee:	930d      	str	r3, [sp, #52]	; 0x34
 80055f0:	e543      	b.n	800507a <_vfprintf_r+0x1142>
 80055f2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80055f4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80055f8:	6805      	ldr	r5, [r0, #0]
 80055fa:	3004      	adds	r0, #4
 80055fc:	2d00      	cmp	r5, #0
 80055fe:	900e      	str	r0, [sp, #56]	; 0x38
 8005600:	46a0      	mov	r8, r4
 8005602:	f6be ad0d 	bge.w	8004020 <_vfprintf_r+0xe8>
 8005606:	f04f 35ff 	mov.w	r5, #4294967295
 800560a:	f7fe bd09 	b.w	8004020 <_vfprintf_r+0xe8>
 800560e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005612:	f7ff b893 	b.w	800473c <_vfprintf_r+0x804>
 8005616:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800561a:	f7ff b85d 	b.w	80046d8 <_vfprintf_r+0x7a0>
 800561e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005622:	f7fe bfbf 	b.w	80045a4 <_vfprintf_r+0x66c>
 8005626:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800562a:	f7fe be5c 	b.w	80042e6 <_vfprintf_r+0x3ae>
 800562e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005632:	f7ff b812 	b.w	800465a <_vfprintf_r+0x722>
 8005636:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800563a:	f7fe bdca 	b.w	80041d2 <_vfprintf_r+0x29a>
 800563e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005642:	f7ff b951 	b.w	80048e8 <_vfprintf_r+0x9b0>
 8005646:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800564a:	f7fe be23 	b.w	8004294 <_vfprintf_r+0x35c>
 800564e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005652:	f7ff b8ed 	b.w	8004830 <_vfprintf_r+0x8f8>
 8005656:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800565a:	f7ff b88c 	b.w	8004776 <_vfprintf_r+0x83e>
 800565e:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8005662:	e69c      	b.n	800539e <_vfprintf_r+0x1466>
 8005664:	08009650 	.word	0x08009650
 8005668:	08009624 	.word	0x08009624
 800566c:	08009620 	.word	0x08009620

08005670 <__sbprintf>:
 8005670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005672:	460c      	mov	r4, r1
 8005674:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8005678:	8989      	ldrh	r1, [r1, #12]
 800567a:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800567c:	89e5      	ldrh	r5, [r4, #14]
 800567e:	9619      	str	r6, [sp, #100]	; 0x64
 8005680:	f021 0102 	bic.w	r1, r1, #2
 8005684:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005686:	f8ad 500e 	strh.w	r5, [sp, #14]
 800568a:	2500      	movs	r5, #0
 800568c:	69e7      	ldr	r7, [r4, #28]
 800568e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8005692:	9609      	str	r6, [sp, #36]	; 0x24
 8005694:	9506      	str	r5, [sp, #24]
 8005696:	ae1a      	add	r6, sp, #104	; 0x68
 8005698:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800569c:	4669      	mov	r1, sp
 800569e:	9600      	str	r6, [sp, #0]
 80056a0:	9604      	str	r6, [sp, #16]
 80056a2:	9502      	str	r5, [sp, #8]
 80056a4:	9505      	str	r5, [sp, #20]
 80056a6:	9707      	str	r7, [sp, #28]
 80056a8:	4606      	mov	r6, r0
 80056aa:	f7fe fc45 	bl	8003f38 <_vfprintf_r>
 80056ae:	1e05      	subs	r5, r0, #0
 80056b0:	db07      	blt.n	80056c2 <__sbprintf+0x52>
 80056b2:	4630      	mov	r0, r6
 80056b4:	4669      	mov	r1, sp
 80056b6:	f001 f8e9 	bl	800688c <_fflush_r>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	bf18      	it	ne
 80056be:	f04f 35ff 	movne.w	r5, #4294967295
 80056c2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80056c6:	065b      	lsls	r3, r3, #25
 80056c8:	d503      	bpl.n	80056d2 <__sbprintf+0x62>
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d0:	81a3      	strh	r3, [r4, #12]
 80056d2:	4628      	mov	r0, r5
 80056d4:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80056d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056da:	bf00      	nop

080056dc <_vsprintf_r>:
 80056dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056de:	b09b      	sub	sp, #108	; 0x6c
 80056e0:	460d      	mov	r5, r1
 80056e2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80056e6:	f44f 7702 	mov.w	r7, #520	; 0x208
 80056ea:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80056ee:	4669      	mov	r1, sp
 80056f0:	9500      	str	r5, [sp, #0]
 80056f2:	9504      	str	r5, [sp, #16]
 80056f4:	f8ad 700c 	strh.w	r7, [sp, #12]
 80056f8:	9402      	str	r4, [sp, #8]
 80056fa:	9405      	str	r4, [sp, #20]
 80056fc:	f8ad 600e 	strh.w	r6, [sp, #14]
 8005700:	f7fd f89e 	bl	8002840 <_svfprintf_r>
 8005704:	9b00      	ldr	r3, [sp, #0]
 8005706:	2200      	movs	r2, #0
 8005708:	701a      	strb	r2, [r3, #0]
 800570a:	b01b      	add	sp, #108	; 0x6c
 800570c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570e:	bf00      	nop

08005710 <vsprintf>:
 8005710:	b410      	push	{r4}
 8005712:	4c04      	ldr	r4, [pc, #16]	; (8005724 <vsprintf+0x14>)
 8005714:	4613      	mov	r3, r2
 8005716:	460a      	mov	r2, r1
 8005718:	4601      	mov	r1, r0
 800571a:	6820      	ldr	r0, [r4, #0]
 800571c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005720:	f7ff bfdc 	b.w	80056dc <_vsprintf_r>
 8005724:	20000460 	.word	0x20000460

08005728 <__swsetup_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4b30      	ldr	r3, [pc, #192]	; (80057ec <__swsetup_r+0xc4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4605      	mov	r5, r0
 8005730:	460c      	mov	r4, r1
 8005732:	b113      	cbz	r3, 800573a <__swsetup_r+0x12>
 8005734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005736:	2a00      	cmp	r2, #0
 8005738:	d038      	beq.n	80057ac <__swsetup_r+0x84>
 800573a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800573e:	b293      	uxth	r3, r2
 8005740:	0718      	lsls	r0, r3, #28
 8005742:	d50c      	bpl.n	800575e <__swsetup_r+0x36>
 8005744:	6920      	ldr	r0, [r4, #16]
 8005746:	b1a8      	cbz	r0, 8005774 <__swsetup_r+0x4c>
 8005748:	f013 0201 	ands.w	r2, r3, #1
 800574c:	d01e      	beq.n	800578c <__swsetup_r+0x64>
 800574e:	6963      	ldr	r3, [r4, #20]
 8005750:	2200      	movs	r2, #0
 8005752:	425b      	negs	r3, r3
 8005754:	61a3      	str	r3, [r4, #24]
 8005756:	60a2      	str	r2, [r4, #8]
 8005758:	b1f0      	cbz	r0, 8005798 <__swsetup_r+0x70>
 800575a:	2000      	movs	r0, #0
 800575c:	bd38      	pop	{r3, r4, r5, pc}
 800575e:	06d9      	lsls	r1, r3, #27
 8005760:	d53c      	bpl.n	80057dc <__swsetup_r+0xb4>
 8005762:	0758      	lsls	r0, r3, #29
 8005764:	d426      	bmi.n	80057b4 <__swsetup_r+0x8c>
 8005766:	6920      	ldr	r0, [r4, #16]
 8005768:	f042 0308 	orr.w	r3, r2, #8
 800576c:	81a3      	strh	r3, [r4, #12]
 800576e:	b29b      	uxth	r3, r3
 8005770:	2800      	cmp	r0, #0
 8005772:	d1e9      	bne.n	8005748 <__swsetup_r+0x20>
 8005774:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8005778:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800577c:	d0e4      	beq.n	8005748 <__swsetup_r+0x20>
 800577e:	4628      	mov	r0, r5
 8005780:	4621      	mov	r1, r4
 8005782:	f001 fc41 	bl	8007008 <__smakebuf_r>
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	6920      	ldr	r0, [r4, #16]
 800578a:	e7dd      	b.n	8005748 <__swsetup_r+0x20>
 800578c:	0799      	lsls	r1, r3, #30
 800578e:	bf58      	it	pl
 8005790:	6962      	ldrpl	r2, [r4, #20]
 8005792:	60a2      	str	r2, [r4, #8]
 8005794:	2800      	cmp	r0, #0
 8005796:	d1e0      	bne.n	800575a <__swsetup_r+0x32>
 8005798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800579c:	061a      	lsls	r2, r3, #24
 800579e:	d5dd      	bpl.n	800575c <__swsetup_r+0x34>
 80057a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057a4:	81a3      	strh	r3, [r4, #12]
 80057a6:	f04f 30ff 	mov.w	r0, #4294967295
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	4618      	mov	r0, r3
 80057ae:	f001 f901 	bl	80069b4 <__sinit>
 80057b2:	e7c2      	b.n	800573a <__swsetup_r+0x12>
 80057b4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80057b6:	b151      	cbz	r1, 80057ce <__swsetup_r+0xa6>
 80057b8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80057bc:	4299      	cmp	r1, r3
 80057be:	d004      	beq.n	80057ca <__swsetup_r+0xa2>
 80057c0:	4628      	mov	r0, r5
 80057c2:	f001 f94f 	bl	8006a64 <_free_r>
 80057c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057ca:	2300      	movs	r3, #0
 80057cc:	6323      	str	r3, [r4, #48]	; 0x30
 80057ce:	2300      	movs	r3, #0
 80057d0:	6920      	ldr	r0, [r4, #16]
 80057d2:	6063      	str	r3, [r4, #4]
 80057d4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 80057d8:	6020      	str	r0, [r4, #0]
 80057da:	e7c5      	b.n	8005768 <__swsetup_r+0x40>
 80057dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057e0:	2309      	movs	r3, #9
 80057e2:	602b      	str	r3, [r5, #0]
 80057e4:	f04f 30ff 	mov.w	r0, #4294967295
 80057e8:	81a2      	strh	r2, [r4, #12]
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
 80057ec:	20000460 	.word	0x20000460

080057f0 <quorem>:
 80057f0:	6902      	ldr	r2, [r0, #16]
 80057f2:	690b      	ldr	r3, [r1, #16]
 80057f4:	4293      	cmp	r3, r2
 80057f6:	f300 808d 	bgt.w	8005914 <quorem+0x124>
 80057fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8005802:	f101 0714 	add.w	r7, r1, #20
 8005806:	f100 0b14 	add.w	fp, r0, #20
 800580a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 800580e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8005812:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8005816:	b083      	sub	sp, #12
 8005818:	3201      	adds	r2, #1
 800581a:	fbb3 f9f2 	udiv	r9, r3, r2
 800581e:	eb0b 0304 	add.w	r3, fp, r4
 8005822:	9400      	str	r4, [sp, #0]
 8005824:	eb07 0a04 	add.w	sl, r7, r4
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	f1b9 0f00 	cmp.w	r9, #0
 800582e:	d039      	beq.n	80058a4 <quorem+0xb4>
 8005830:	2500      	movs	r5, #0
 8005832:	46bc      	mov	ip, r7
 8005834:	46de      	mov	lr, fp
 8005836:	462b      	mov	r3, r5
 8005838:	f85c 6b04 	ldr.w	r6, [ip], #4
 800583c:	f8de 2000 	ldr.w	r2, [lr]
 8005840:	b2b4      	uxth	r4, r6
 8005842:	fb09 5504 	mla	r5, r9, r4, r5
 8005846:	0c36      	lsrs	r6, r6, #16
 8005848:	0c2c      	lsrs	r4, r5, #16
 800584a:	fb09 4406 	mla	r4, r9, r6, r4
 800584e:	b2ad      	uxth	r5, r5
 8005850:	1b5b      	subs	r3, r3, r5
 8005852:	b2a6      	uxth	r6, r4
 8005854:	fa13 f382 	uxtah	r3, r3, r2
 8005858:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 800585c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8005860:	b29b      	uxth	r3, r3
 8005862:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005866:	45e2      	cmp	sl, ip
 8005868:	f84e 3b04 	str.w	r3, [lr], #4
 800586c:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8005870:	ea4f 4326 	mov.w	r3, r6, asr #16
 8005874:	d2e0      	bcs.n	8005838 <quorem+0x48>
 8005876:	9b00      	ldr	r3, [sp, #0]
 8005878:	f85b 3003 	ldr.w	r3, [fp, r3]
 800587c:	b993      	cbnz	r3, 80058a4 <quorem+0xb4>
 800587e:	9c01      	ldr	r4, [sp, #4]
 8005880:	1f23      	subs	r3, r4, #4
 8005882:	459b      	cmp	fp, r3
 8005884:	d20c      	bcs.n	80058a0 <quorem+0xb0>
 8005886:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800588a:	b94b      	cbnz	r3, 80058a0 <quorem+0xb0>
 800588c:	f1a4 0308 	sub.w	r3, r4, #8
 8005890:	e002      	b.n	8005898 <quorem+0xa8>
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	3b04      	subs	r3, #4
 8005896:	b91a      	cbnz	r2, 80058a0 <quorem+0xb0>
 8005898:	459b      	cmp	fp, r3
 800589a:	f108 38ff 	add.w	r8, r8, #4294967295
 800589e:	d3f8      	bcc.n	8005892 <quorem+0xa2>
 80058a0:	f8c0 8010 	str.w	r8, [r0, #16]
 80058a4:	4604      	mov	r4, r0
 80058a6:	f002 f96b 	bl	8007b80 <__mcmp>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	db2e      	blt.n	800590c <quorem+0x11c>
 80058ae:	f109 0901 	add.w	r9, r9, #1
 80058b2:	465d      	mov	r5, fp
 80058b4:	2300      	movs	r3, #0
 80058b6:	f857 1b04 	ldr.w	r1, [r7], #4
 80058ba:	6828      	ldr	r0, [r5, #0]
 80058bc:	b28a      	uxth	r2, r1
 80058be:	1a9a      	subs	r2, r3, r2
 80058c0:	0c09      	lsrs	r1, r1, #16
 80058c2:	fa12 f280 	uxtah	r2, r2, r0
 80058c6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 80058ca:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80058ce:	b291      	uxth	r1, r2
 80058d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80058d4:	45ba      	cmp	sl, r7
 80058d6:	f845 1b04 	str.w	r1, [r5], #4
 80058da:	ea4f 4323 	mov.w	r3, r3, asr #16
 80058de:	d2ea      	bcs.n	80058b6 <quorem+0xc6>
 80058e0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 80058e4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 80058e8:	b982      	cbnz	r2, 800590c <quorem+0x11c>
 80058ea:	1f1a      	subs	r2, r3, #4
 80058ec:	4593      	cmp	fp, r2
 80058ee:	d20b      	bcs.n	8005908 <quorem+0x118>
 80058f0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80058f4:	b942      	cbnz	r2, 8005908 <quorem+0x118>
 80058f6:	3b08      	subs	r3, #8
 80058f8:	e002      	b.n	8005900 <quorem+0x110>
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	3b04      	subs	r3, #4
 80058fe:	b91a      	cbnz	r2, 8005908 <quorem+0x118>
 8005900:	459b      	cmp	fp, r3
 8005902:	f108 38ff 	add.w	r8, r8, #4294967295
 8005906:	d3f8      	bcc.n	80058fa <quorem+0x10a>
 8005908:	f8c4 8010 	str.w	r8, [r4, #16]
 800590c:	4648      	mov	r0, r9
 800590e:	b003      	add	sp, #12
 8005910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005914:	2000      	movs	r0, #0
 8005916:	4770      	bx	lr

08005918 <_dtoa_r>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800591e:	b099      	sub	sp, #100	; 0x64
 8005920:	4681      	mov	r9, r0
 8005922:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8005924:	4692      	mov	sl, r2
 8005926:	469b      	mov	fp, r3
 8005928:	b149      	cbz	r1, 800593e <_dtoa_r+0x26>
 800592a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800592c:	604a      	str	r2, [r1, #4]
 800592e:	2301      	movs	r3, #1
 8005930:	4093      	lsls	r3, r2
 8005932:	608b      	str	r3, [r1, #8]
 8005934:	f001 ff42 	bl	80077bc <_Bfree>
 8005938:	2300      	movs	r3, #0
 800593a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 800593e:	f1bb 0f00 	cmp.w	fp, #0
 8005942:	46d8      	mov	r8, fp
 8005944:	db33      	blt.n	80059ae <_dtoa_r+0x96>
 8005946:	2300      	movs	r3, #0
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	4ba3      	ldr	r3, [pc, #652]	; (8005bd8 <_dtoa_r+0x2c0>)
 800594c:	461a      	mov	r2, r3
 800594e:	ea08 0303 	and.w	r3, r8, r3
 8005952:	4293      	cmp	r3, r2
 8005954:	d014      	beq.n	8005980 <_dtoa_r+0x68>
 8005956:	2200      	movs	r2, #0
 8005958:	2300      	movs	r3, #0
 800595a:	4650      	mov	r0, sl
 800595c:	4659      	mov	r1, fp
 800595e:	f003 fb41 	bl	8008fe4 <__aeabi_dcmpeq>
 8005962:	4605      	mov	r5, r0
 8005964:	b348      	cbz	r0, 80059ba <_dtoa_r+0xa2>
 8005966:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005968:	2301      	movs	r3, #1
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 80c2 	beq.w	8005af8 <_dtoa_r+0x1e0>
 8005974:	4899      	ldr	r0, [pc, #612]	; (8005bdc <_dtoa_r+0x2c4>)
 8005976:	6018      	str	r0, [r3, #0]
 8005978:	3801      	subs	r0, #1
 800597a:	b019      	add	sp, #100	; 0x64
 800597c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005980:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005982:	f242 730f 	movw	r3, #9999	; 0x270f
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	f1ba 0f00 	cmp.w	sl, #0
 800598c:	f000 809f 	beq.w	8005ace <_dtoa_r+0x1b6>
 8005990:	4893      	ldr	r0, [pc, #588]	; (8005be0 <_dtoa_r+0x2c8>)
 8005992:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f0      	beq.n	800597a <_dtoa_r+0x62>
 8005998:	78c3      	ldrb	r3, [r0, #3]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 80ae 	beq.w	8005afc <_dtoa_r+0x1e4>
 80059a0:	f100 0308 	add.w	r3, r0, #8
 80059a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	b019      	add	sp, #100	; 0x64
 80059aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ae:	2301      	movs	r3, #1
 80059b0:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	46c3      	mov	fp, r8
 80059b8:	e7c7      	b.n	800594a <_dtoa_r+0x32>
 80059ba:	aa16      	add	r2, sp, #88	; 0x58
 80059bc:	ab17      	add	r3, sp, #92	; 0x5c
 80059be:	9201      	str	r2, [sp, #4]
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	4652      	mov	r2, sl
 80059c4:	465b      	mov	r3, fp
 80059c6:	4648      	mov	r0, r9
 80059c8:	f002 f986 	bl	8007cd8 <__d2b>
 80059cc:	ea5f 5418 	movs.w	r4, r8, lsr #20
 80059d0:	9008      	str	r0, [sp, #32]
 80059d2:	f040 8085 	bne.w	8005ae0 <_dtoa_r+0x1c8>
 80059d6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80059d8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80059da:	442c      	add	r4, r5
 80059dc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80059e0:	2b20      	cmp	r3, #32
 80059e2:	f340 8289 	ble.w	8005ef8 <_dtoa_r+0x5e0>
 80059e6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80059ea:	f204 4012 	addw	r0, r4, #1042	; 0x412
 80059ee:	fa08 f803 	lsl.w	r8, r8, r3
 80059f2:	fa2a f000 	lsr.w	r0, sl, r0
 80059f6:	ea40 0008 	orr.w	r0, r0, r8
 80059fa:	f003 f815 	bl	8008a28 <__aeabi_ui2d>
 80059fe:	2301      	movs	r3, #1
 8005a00:	3c01      	subs	r4, #1
 8005a02:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005a06:	930d      	str	r3, [sp, #52]	; 0x34
 8005a08:	2200      	movs	r2, #0
 8005a0a:	4b76      	ldr	r3, [pc, #472]	; (8005be4 <_dtoa_r+0x2cc>)
 8005a0c:	f002 fece 	bl	80087ac <__aeabi_dsub>
 8005a10:	a36b      	add	r3, pc, #428	; (adr r3, 8005bc0 <_dtoa_r+0x2a8>)
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	f003 f87d 	bl	8008b14 <__aeabi_dmul>
 8005a1a:	a36b      	add	r3, pc, #428	; (adr r3, 8005bc8 <_dtoa_r+0x2b0>)
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	f002 fec6 	bl	80087b0 <__adddf3>
 8005a24:	4606      	mov	r6, r0
 8005a26:	4620      	mov	r0, r4
 8005a28:	460f      	mov	r7, r1
 8005a2a:	f003 f80d 	bl	8008a48 <__aeabi_i2d>
 8005a2e:	a368      	add	r3, pc, #416	; (adr r3, 8005bd0 <_dtoa_r+0x2b8>)
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f003 f86e 	bl	8008b14 <__aeabi_dmul>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	4639      	mov	r1, r7
 8005a40:	f002 feb6 	bl	80087b0 <__adddf3>
 8005a44:	4606      	mov	r6, r0
 8005a46:	460f      	mov	r7, r1
 8005a48:	f003 fb14 	bl	8009074 <__aeabi_d2iz>
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	9004      	str	r0, [sp, #16]
 8005a50:	2300      	movs	r3, #0
 8005a52:	4630      	mov	r0, r6
 8005a54:	4639      	mov	r1, r7
 8005a56:	f003 facf 	bl	8008ff8 <__aeabi_dcmplt>
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	f040 8227 	bne.w	8005eae <_dtoa_r+0x596>
 8005a60:	9e04      	ldr	r6, [sp, #16]
 8005a62:	2e16      	cmp	r6, #22
 8005a64:	f200 8220 	bhi.w	8005ea8 <_dtoa_r+0x590>
 8005a68:	4b5f      	ldr	r3, [pc, #380]	; (8005be8 <_dtoa_r+0x2d0>)
 8005a6a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005a6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a72:	4652      	mov	r2, sl
 8005a74:	465b      	mov	r3, fp
 8005a76:	f003 fadd 	bl	8009034 <__aeabi_dcmpgt>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	f000 8241 	beq.w	8005f02 <_dtoa_r+0x5ea>
 8005a80:	1e73      	subs	r3, r6, #1
 8005a82:	9304      	str	r3, [sp, #16]
 8005a84:	2300      	movs	r3, #0
 8005a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a88:	1b2c      	subs	r4, r5, r4
 8005a8a:	f1b4 0801 	subs.w	r8, r4, #1
 8005a8e:	f100 8229 	bmi.w	8005ee4 <_dtoa_r+0x5cc>
 8005a92:	2300      	movs	r3, #0
 8005a94:	9305      	str	r3, [sp, #20]
 8005a96:	9b04      	ldr	r3, [sp, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f2c0 821a 	blt.w	8005ed2 <_dtoa_r+0x5ba>
 8005a9e:	4498      	add	r8, r3
 8005aa0:	930a      	str	r3, [sp, #40]	; 0x28
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	9302      	str	r3, [sp, #8]
 8005aa6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aa8:	2b09      	cmp	r3, #9
 8005aaa:	d829      	bhi.n	8005b00 <_dtoa_r+0x1e8>
 8005aac:	2b05      	cmp	r3, #5
 8005aae:	f340 8643 	ble.w	8006738 <_dtoa_r+0xe20>
 8005ab2:	3b04      	subs	r3, #4
 8005ab4:	9322      	str	r3, [sp, #136]	; 0x88
 8005ab6:	2500      	movs	r5, #0
 8005ab8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aba:	3b02      	subs	r3, #2
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	f200 8622 	bhi.w	8006706 <_dtoa_r+0xdee>
 8005ac2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005ac6:	032a      	.short	0x032a
 8005ac8:	03350223 	.word	0x03350223
 8005acc:	044f      	.short	0x044f
 8005ace:	4b44      	ldr	r3, [pc, #272]	; (8005be0 <_dtoa_r+0x2c8>)
 8005ad0:	4a46      	ldr	r2, [pc, #280]	; (8005bec <_dtoa_r+0x2d4>)
 8005ad2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	bf14      	ite	ne
 8005ada:	4618      	movne	r0, r3
 8005adc:	4610      	moveq	r0, r2
 8005ade:	e758      	b.n	8005992 <_dtoa_r+0x7a>
 8005ae0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ae4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005ae8:	950d      	str	r5, [sp, #52]	; 0x34
 8005aea:	4650      	mov	r0, sl
 8005aec:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005af0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005af4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8005af6:	e787      	b.n	8005a08 <_dtoa_r+0xf0>
 8005af8:	483d      	ldr	r0, [pc, #244]	; (8005bf0 <_dtoa_r+0x2d8>)
 8005afa:	e73e      	b.n	800597a <_dtoa_r+0x62>
 8005afc:	1cc3      	adds	r3, r0, #3
 8005afe:	e751      	b.n	80059a4 <_dtoa_r+0x8c>
 8005b00:	2100      	movs	r1, #0
 8005b02:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8005b06:	4648      	mov	r0, r9
 8005b08:	9122      	str	r1, [sp, #136]	; 0x88
 8005b0a:	f001 fe31 	bl	8007770 <_Balloc>
 8005b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b12:	9306      	str	r3, [sp, #24]
 8005b14:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005b16:	930c      	str	r3, [sp, #48]	; 0x30
 8005b18:	2301      	movs	r3, #1
 8005b1a:	9007      	str	r0, [sp, #28]
 8005b1c:	9223      	str	r2, [sp, #140]	; 0x8c
 8005b1e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8005b22:	9309      	str	r3, [sp, #36]	; 0x24
 8005b24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f2c0 80d0 	blt.w	8005ccc <_dtoa_r+0x3b4>
 8005b2c:	9a04      	ldr	r2, [sp, #16]
 8005b2e:	2a0e      	cmp	r2, #14
 8005b30:	f300 80cc 	bgt.w	8005ccc <_dtoa_r+0x3b4>
 8005b34:	4b2c      	ldr	r3, [pc, #176]	; (8005be8 <_dtoa_r+0x2d0>)
 8005b36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b3a:	ed93 7b00 	vldr	d7, [r3]
 8005b3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b46:	f2c0 82fe 	blt.w	8006146 <_dtoa_r+0x82e>
 8005b4a:	4656      	mov	r6, sl
 8005b4c:	465f      	mov	r7, fp
 8005b4e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8005b52:	4630      	mov	r0, r6
 8005b54:	4652      	mov	r2, sl
 8005b56:	465b      	mov	r3, fp
 8005b58:	4639      	mov	r1, r7
 8005b5a:	f003 f905 	bl	8008d68 <__aeabi_ddiv>
 8005b5e:	f003 fa89 	bl	8009074 <__aeabi_d2iz>
 8005b62:	4604      	mov	r4, r0
 8005b64:	f002 ff70 	bl	8008a48 <__aeabi_i2d>
 8005b68:	4652      	mov	r2, sl
 8005b6a:	465b      	mov	r3, fp
 8005b6c:	f002 ffd2 	bl	8008b14 <__aeabi_dmul>
 8005b70:	460b      	mov	r3, r1
 8005b72:	4602      	mov	r2, r0
 8005b74:	4639      	mov	r1, r7
 8005b76:	4630      	mov	r0, r6
 8005b78:	f002 fe18 	bl	80087ac <__aeabi_dsub>
 8005b7c:	9d07      	ldr	r5, [sp, #28]
 8005b7e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8005b82:	702b      	strb	r3, [r5, #0]
 8005b84:	9b06      	ldr	r3, [sp, #24]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	4606      	mov	r6, r0
 8005b8a:	460f      	mov	r7, r1
 8005b8c:	f105 0501 	add.w	r5, r5, #1
 8005b90:	d061      	beq.n	8005c56 <_dtoa_r+0x33e>
 8005b92:	2200      	movs	r2, #0
 8005b94:	4b17      	ldr	r3, [pc, #92]	; (8005bf4 <_dtoa_r+0x2dc>)
 8005b96:	f002 ffbd 	bl	8008b14 <__aeabi_dmul>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	460f      	mov	r7, r1
 8005ba2:	f003 fa1f 	bl	8008fe4 <__aeabi_dcmpeq>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	d17d      	bne.n	8005ca6 <_dtoa_r+0x38e>
 8005baa:	f8cd 9014 	str.w	r9, [sp, #20]
 8005bae:	f8dd a018 	ldr.w	sl, [sp, #24]
 8005bb2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8005bb6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005bba:	e028      	b.n	8005c0e <_dtoa_r+0x2f6>
 8005bbc:	f3af 8000 	nop.w
 8005bc0:	636f4361 	.word	0x636f4361
 8005bc4:	3fd287a7 	.word	0x3fd287a7
 8005bc8:	8b60c8b3 	.word	0x8b60c8b3
 8005bcc:	3fc68a28 	.word	0x3fc68a28
 8005bd0:	509f79fb 	.word	0x509f79fb
 8005bd4:	3fd34413 	.word	0x3fd34413
 8005bd8:	7ff00000 	.word	0x7ff00000
 8005bdc:	08009659 	.word	0x08009659
 8005be0:	08009698 	.word	0x08009698
 8005be4:	3ff80000 	.word	0x3ff80000
 8005be8:	080096a0 	.word	0x080096a0
 8005bec:	0800968c 	.word	0x0800968c
 8005bf0:	08009658 	.word	0x08009658
 8005bf4:	40240000 	.word	0x40240000
 8005bf8:	f002 ff8c 	bl	8008b14 <__aeabi_dmul>
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2300      	movs	r3, #0
 8005c00:	4606      	mov	r6, r0
 8005c02:	460f      	mov	r7, r1
 8005c04:	f003 f9ee 	bl	8008fe4 <__aeabi_dcmpeq>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	f040 83ae 	bne.w	800636a <_dtoa_r+0xa52>
 8005c0e:	4642      	mov	r2, r8
 8005c10:	464b      	mov	r3, r9
 8005c12:	4630      	mov	r0, r6
 8005c14:	4639      	mov	r1, r7
 8005c16:	f003 f8a7 	bl	8008d68 <__aeabi_ddiv>
 8005c1a:	f003 fa2b 	bl	8009074 <__aeabi_d2iz>
 8005c1e:	4604      	mov	r4, r0
 8005c20:	f002 ff12 	bl	8008a48 <__aeabi_i2d>
 8005c24:	4642      	mov	r2, r8
 8005c26:	464b      	mov	r3, r9
 8005c28:	f002 ff74 	bl	8008b14 <__aeabi_dmul>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4630      	mov	r0, r6
 8005c32:	4639      	mov	r1, r7
 8005c34:	f002 fdba 	bl	80087ac <__aeabi_dsub>
 8005c38:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8005c3c:	f805 eb01 	strb.w	lr, [r5], #1
 8005c40:	ebcb 0e05 	rsb	lr, fp, r5
 8005c44:	45d6      	cmp	lr, sl
 8005c46:	4606      	mov	r6, r0
 8005c48:	460f      	mov	r7, r1
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	4bae      	ldr	r3, [pc, #696]	; (8005f08 <_dtoa_r+0x5f0>)
 8005c50:	d1d2      	bne.n	8005bf8 <_dtoa_r+0x2e0>
 8005c52:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005c56:	4632      	mov	r2, r6
 8005c58:	463b      	mov	r3, r7
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	f002 fda7 	bl	80087b0 <__adddf3>
 8005c62:	4606      	mov	r6, r0
 8005c64:	460f      	mov	r7, r1
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c6e:	f003 f9c3 	bl	8008ff8 <__aeabi_dcmplt>
 8005c72:	b940      	cbnz	r0, 8005c86 <_dtoa_r+0x36e>
 8005c74:	4632      	mov	r2, r6
 8005c76:	463b      	mov	r3, r7
 8005c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c7c:	f003 f9b2 	bl	8008fe4 <__aeabi_dcmpeq>
 8005c80:	b188      	cbz	r0, 8005ca6 <_dtoa_r+0x38e>
 8005c82:	07e3      	lsls	r3, r4, #31
 8005c84:	d50f      	bpl.n	8005ca6 <_dtoa_r+0x38e>
 8005c86:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8005c8a:	9a07      	ldr	r2, [sp, #28]
 8005c8c:	1e6b      	subs	r3, r5, #1
 8005c8e:	e004      	b.n	8005c9a <_dtoa_r+0x382>
 8005c90:	429a      	cmp	r2, r3
 8005c92:	f000 83fc 	beq.w	800648e <_dtoa_r+0xb76>
 8005c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c9a:	2c39      	cmp	r4, #57	; 0x39
 8005c9c:	f103 0501 	add.w	r5, r3, #1
 8005ca0:	d0f6      	beq.n	8005c90 <_dtoa_r+0x378>
 8005ca2:	3401      	adds	r4, #1
 8005ca4:	701c      	strb	r4, [r3, #0]
 8005ca6:	9908      	ldr	r1, [sp, #32]
 8005ca8:	4648      	mov	r0, r9
 8005caa:	f001 fd87 	bl	80077bc <_Bfree>
 8005cae:	2200      	movs	r2, #0
 8005cb0:	9b04      	ldr	r3, [sp, #16]
 8005cb2:	702a      	strb	r2, [r5, #0]
 8005cb4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 839b 	beq.w	80063f8 <_dtoa_r+0xae0>
 8005cc2:	9807      	ldr	r0, [sp, #28]
 8005cc4:	601d      	str	r5, [r3, #0]
 8005cc6:	b019      	add	sp, #100	; 0x64
 8005cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cce:	2a00      	cmp	r2, #0
 8005cd0:	f000 810e 	beq.w	8005ef0 <_dtoa_r+0x5d8>
 8005cd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005cd6:	2a01      	cmp	r2, #1
 8005cd8:	f340 8257 	ble.w	800618a <_dtoa_r+0x872>
 8005cdc:	9b06      	ldr	r3, [sp, #24]
 8005cde:	9a02      	ldr	r2, [sp, #8]
 8005ce0:	1e5f      	subs	r7, r3, #1
 8005ce2:	42ba      	cmp	r2, r7
 8005ce4:	f2c0 838b 	blt.w	80063fe <_dtoa_r+0xae6>
 8005ce8:	1bd7      	subs	r7, r2, r7
 8005cea:	9b06      	ldr	r3, [sp, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f2c0 8480 	blt.w	80065f2 <_dtoa_r+0xcda>
 8005cf2:	9d05      	ldr	r5, [sp, #20]
 8005cf4:	9b06      	ldr	r3, [sp, #24]
 8005cf6:	9a05      	ldr	r2, [sp, #20]
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	441a      	add	r2, r3
 8005cfc:	4648      	mov	r0, r9
 8005cfe:	9205      	str	r2, [sp, #20]
 8005d00:	4498      	add	r8, r3
 8005d02:	f001 fdf3 	bl	80078ec <__i2b>
 8005d06:	4606      	mov	r6, r0
 8005d08:	b165      	cbz	r5, 8005d24 <_dtoa_r+0x40c>
 8005d0a:	f1b8 0f00 	cmp.w	r8, #0
 8005d0e:	dd09      	ble.n	8005d24 <_dtoa_r+0x40c>
 8005d10:	4545      	cmp	r5, r8
 8005d12:	9a05      	ldr	r2, [sp, #20]
 8005d14:	462b      	mov	r3, r5
 8005d16:	bfa8      	it	ge
 8005d18:	4643      	movge	r3, r8
 8005d1a:	1ad2      	subs	r2, r2, r3
 8005d1c:	9205      	str	r2, [sp, #20]
 8005d1e:	1aed      	subs	r5, r5, r3
 8005d20:	ebc3 0808 	rsb	r8, r3, r8
 8005d24:	9b02      	ldr	r3, [sp, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f340 82f5 	ble.w	8006316 <_dtoa_r+0x9fe>
 8005d2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d2e:	2a00      	cmp	r2, #0
 8005d30:	f000 8202 	beq.w	8006138 <_dtoa_r+0x820>
 8005d34:	2f00      	cmp	r7, #0
 8005d36:	f000 81ff 	beq.w	8006138 <_dtoa_r+0x820>
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	463a      	mov	r2, r7
 8005d3e:	4648      	mov	r0, r9
 8005d40:	f001 fe76 	bl	8007a30 <__pow5mult>
 8005d44:	9a08      	ldr	r2, [sp, #32]
 8005d46:	4601      	mov	r1, r0
 8005d48:	4606      	mov	r6, r0
 8005d4a:	4648      	mov	r0, r9
 8005d4c:	f001 fdd8 	bl	8007900 <__multiply>
 8005d50:	9908      	ldr	r1, [sp, #32]
 8005d52:	4604      	mov	r4, r0
 8005d54:	4648      	mov	r0, r9
 8005d56:	f001 fd31 	bl	80077bc <_Bfree>
 8005d5a:	9b02      	ldr	r3, [sp, #8]
 8005d5c:	1bdb      	subs	r3, r3, r7
 8005d5e:	9302      	str	r3, [sp, #8]
 8005d60:	f040 81e9 	bne.w	8006136 <_dtoa_r+0x81e>
 8005d64:	2101      	movs	r1, #1
 8005d66:	4648      	mov	r0, r9
 8005d68:	f001 fdc0 	bl	80078ec <__i2b>
 8005d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d6e:	9002      	str	r0, [sp, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 8215 	beq.w	80061a0 <_dtoa_r+0x888>
 8005d76:	4601      	mov	r1, r0
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4648      	mov	r0, r9
 8005d7c:	f001 fe58 	bl	8007a30 <__pow5mult>
 8005d80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d82:	9002      	str	r0, [sp, #8]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	f340 82f3 	ble.w	8006370 <_dtoa_r+0xa58>
 8005d8a:	2700      	movs	r7, #0
 8005d8c:	9a02      	ldr	r2, [sp, #8]
 8005d8e:	6913      	ldr	r3, [r2, #16]
 8005d90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005d94:	6918      	ldr	r0, [r3, #16]
 8005d96:	f001 fd5b 	bl	8007850 <__hi0bits>
 8005d9a:	f1c0 0020 	rsb	r0, r0, #32
 8005d9e:	4440      	add	r0, r8
 8005da0:	f010 001f 	ands.w	r0, r0, #31
 8005da4:	f000 81fa 	beq.w	800619c <_dtoa_r+0x884>
 8005da8:	f1c0 0320 	rsb	r3, r0, #32
 8005dac:	2b04      	cmp	r3, #4
 8005dae:	f340 84bd 	ble.w	800672c <_dtoa_r+0xe14>
 8005db2:	f1c0 001c 	rsb	r0, r0, #28
 8005db6:	9b05      	ldr	r3, [sp, #20]
 8005db8:	4403      	add	r3, r0
 8005dba:	9305      	str	r3, [sp, #20]
 8005dbc:	4405      	add	r5, r0
 8005dbe:	4480      	add	r8, r0
 8005dc0:	9b05      	ldr	r3, [sp, #20]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	dd05      	ble.n	8005dd2 <_dtoa_r+0x4ba>
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4648      	mov	r0, r9
 8005dcc:	f001 fe80 	bl	8007ad0 <__lshift>
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	f1b8 0f00 	cmp.w	r8, #0
 8005dd6:	dd05      	ble.n	8005de4 <_dtoa_r+0x4cc>
 8005dd8:	4642      	mov	r2, r8
 8005dda:	9902      	ldr	r1, [sp, #8]
 8005ddc:	4648      	mov	r0, r9
 8005dde:	f001 fe77 	bl	8007ad0 <__lshift>
 8005de2:	9002      	str	r0, [sp, #8]
 8005de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 827a 	bne.w	80062e0 <_dtoa_r+0x9c8>
 8005dec:	9b06      	ldr	r3, [sp, #24]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f340 8293 	ble.w	800631a <_dtoa_r+0xa02>
 8005df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f040 81f4 	bne.w	80061e4 <_dtoa_r+0x8cc>
 8005dfc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8005e00:	9f06      	ldr	r7, [sp, #24]
 8005e02:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005e06:	465d      	mov	r5, fp
 8005e08:	e002      	b.n	8005e10 <_dtoa_r+0x4f8>
 8005e0a:	f001 fce1 	bl	80077d0 <__multadd>
 8005e0e:	4604      	mov	r4, r0
 8005e10:	4641      	mov	r1, r8
 8005e12:	4620      	mov	r0, r4
 8005e14:	f7ff fcec 	bl	80057f0 <quorem>
 8005e18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005e1c:	f805 ab01 	strb.w	sl, [r5], #1
 8005e20:	ebcb 0305 	rsb	r3, fp, r5
 8005e24:	42bb      	cmp	r3, r7
 8005e26:	f04f 020a 	mov.w	r2, #10
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	4621      	mov	r1, r4
 8005e30:	4648      	mov	r0, r9
 8005e32:	dbea      	blt.n	8005e0a <_dtoa_r+0x4f2>
 8005e34:	9b07      	ldr	r3, [sp, #28]
 8005e36:	9a06      	ldr	r2, [sp, #24]
 8005e38:	2a01      	cmp	r2, #1
 8005e3a:	bfac      	ite	ge
 8005e3c:	189b      	addge	r3, r3, r2
 8005e3e:	3301      	addlt	r3, #1
 8005e40:	461d      	mov	r5, r3
 8005e42:	f04f 0b00 	mov.w	fp, #0
 8005e46:	4621      	mov	r1, r4
 8005e48:	2201      	movs	r2, #1
 8005e4a:	4648      	mov	r0, r9
 8005e4c:	f001 fe40 	bl	8007ad0 <__lshift>
 8005e50:	9902      	ldr	r1, [sp, #8]
 8005e52:	9008      	str	r0, [sp, #32]
 8005e54:	f001 fe94 	bl	8007b80 <__mcmp>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	f340 8305 	ble.w	8006468 <_dtoa_r+0xb50>
 8005e5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e62:	9907      	ldr	r1, [sp, #28]
 8005e64:	1e6b      	subs	r3, r5, #1
 8005e66:	e004      	b.n	8005e72 <_dtoa_r+0x55a>
 8005e68:	428b      	cmp	r3, r1
 8005e6a:	f000 8274 	beq.w	8006356 <_dtoa_r+0xa3e>
 8005e6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e72:	2a39      	cmp	r2, #57	; 0x39
 8005e74:	f103 0501 	add.w	r5, r3, #1
 8005e78:	d0f6      	beq.n	8005e68 <_dtoa_r+0x550>
 8005e7a:	3201      	adds	r2, #1
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	9902      	ldr	r1, [sp, #8]
 8005e80:	4648      	mov	r0, r9
 8005e82:	f001 fc9b 	bl	80077bc <_Bfree>
 8005e86:	2e00      	cmp	r6, #0
 8005e88:	f43f af0d 	beq.w	8005ca6 <_dtoa_r+0x38e>
 8005e8c:	f1bb 0f00 	cmp.w	fp, #0
 8005e90:	d005      	beq.n	8005e9e <_dtoa_r+0x586>
 8005e92:	45b3      	cmp	fp, r6
 8005e94:	d003      	beq.n	8005e9e <_dtoa_r+0x586>
 8005e96:	4659      	mov	r1, fp
 8005e98:	4648      	mov	r0, r9
 8005e9a:	f001 fc8f 	bl	80077bc <_Bfree>
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4648      	mov	r0, r9
 8005ea2:	f001 fc8b 	bl	80077bc <_Bfree>
 8005ea6:	e6fe      	b.n	8005ca6 <_dtoa_r+0x38e>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eac:	e5ec      	b.n	8005a88 <_dtoa_r+0x170>
 8005eae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	f002 fdc8 	bl	8008a48 <__aeabi_i2d>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	f003 f890 	bl	8008fe4 <__aeabi_dcmpeq>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	f47f adcb 	bne.w	8005a60 <_dtoa_r+0x148>
 8005eca:	f108 33ff 	add.w	r3, r8, #4294967295
 8005ece:	9304      	str	r3, [sp, #16]
 8005ed0:	e5c6      	b.n	8005a60 <_dtoa_r+0x148>
 8005ed2:	9a05      	ldr	r2, [sp, #20]
 8005ed4:	9b04      	ldr	r3, [sp, #16]
 8005ed6:	1ad2      	subs	r2, r2, r3
 8005ed8:	425b      	negs	r3, r3
 8005eda:	9302      	str	r3, [sp, #8]
 8005edc:	2300      	movs	r3, #0
 8005ede:	9205      	str	r2, [sp, #20]
 8005ee0:	930a      	str	r3, [sp, #40]	; 0x28
 8005ee2:	e5e0      	b.n	8005aa6 <_dtoa_r+0x18e>
 8005ee4:	f1c8 0300 	rsb	r3, r8, #0
 8005ee8:	9305      	str	r3, [sp, #20]
 8005eea:	f04f 0800 	mov.w	r8, #0
 8005eee:	e5d2      	b.n	8005a96 <_dtoa_r+0x17e>
 8005ef0:	9f02      	ldr	r7, [sp, #8]
 8005ef2:	9d05      	ldr	r5, [sp, #20]
 8005ef4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005ef6:	e707      	b.n	8005d08 <_dtoa_r+0x3f0>
 8005ef8:	f1c3 0820 	rsb	r8, r3, #32
 8005efc:	fa0a f008 	lsl.w	r0, sl, r8
 8005f00:	e57b      	b.n	80059fa <_dtoa_r+0xe2>
 8005f02:	900b      	str	r0, [sp, #44]	; 0x2c
 8005f04:	e5c0      	b.n	8005a88 <_dtoa_r+0x170>
 8005f06:	bf00      	nop
 8005f08:	40240000 	.word	0x40240000
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f10:	9b04      	ldr	r3, [sp, #16]
 8005f12:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005f14:	4413      	add	r3, r2
 8005f16:	930c      	str	r3, [sp, #48]	; 0x30
 8005f18:	3301      	adds	r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	9306      	str	r3, [sp, #24]
 8005f1e:	f340 827d 	ble.w	800641c <_dtoa_r+0xb04>
 8005f22:	9c06      	ldr	r4, [sp, #24]
 8005f24:	4626      	mov	r6, r4
 8005f26:	2100      	movs	r1, #0
 8005f28:	2e17      	cmp	r6, #23
 8005f2a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8005f2e:	d90b      	bls.n	8005f48 <_dtoa_r+0x630>
 8005f30:	2201      	movs	r2, #1
 8005f32:	2304      	movs	r3, #4
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	f103 0014 	add.w	r0, r3, #20
 8005f3a:	42b0      	cmp	r0, r6
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	f102 0201 	add.w	r2, r2, #1
 8005f42:	d9f7      	bls.n	8005f34 <_dtoa_r+0x61c>
 8005f44:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8005f48:	4648      	mov	r0, r9
 8005f4a:	f001 fc11 	bl	8007770 <_Balloc>
 8005f4e:	2c0e      	cmp	r4, #14
 8005f50:	9007      	str	r0, [sp, #28]
 8005f52:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8005f56:	f63f ade5 	bhi.w	8005b24 <_dtoa_r+0x20c>
 8005f5a:	2d00      	cmp	r5, #0
 8005f5c:	f43f ade2 	beq.w	8005b24 <_dtoa_r+0x20c>
 8005f60:	9904      	ldr	r1, [sp, #16]
 8005f62:	2900      	cmp	r1, #0
 8005f64:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8005f68:	f340 829a 	ble.w	80064a0 <_dtoa_r+0xb88>
 8005f6c:	4b90      	ldr	r3, [pc, #576]	; (80061b0 <_dtoa_r+0x898>)
 8005f6e:	f001 020f 	and.w	r2, r1, #15
 8005f72:	110e      	asrs	r6, r1, #4
 8005f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f78:	06f0      	lsls	r0, r6, #27
 8005f7a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005f7e:	f140 8246 	bpl.w	800640e <_dtoa_r+0xaf6>
 8005f82:	4b8c      	ldr	r3, [pc, #560]	; (80061b4 <_dtoa_r+0x89c>)
 8005f84:	4650      	mov	r0, sl
 8005f86:	4659      	mov	r1, fp
 8005f88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f8c:	f002 feec 	bl	8008d68 <__aeabi_ddiv>
 8005f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005f94:	f006 060f 	and.w	r6, r6, #15
 8005f98:	f04f 0a03 	mov.w	sl, #3
 8005f9c:	b186      	cbz	r6, 8005fc0 <_dtoa_r+0x6a8>
 8005f9e:	4f85      	ldr	r7, [pc, #532]	; (80061b4 <_dtoa_r+0x89c>)
 8005fa0:	07f1      	lsls	r1, r6, #31
 8005fa2:	d509      	bpl.n	8005fb8 <_dtoa_r+0x6a0>
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fac:	f002 fdb2 	bl	8008b14 <__aeabi_dmul>
 8005fb0:	f10a 0a01 	add.w	sl, sl, #1
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	460d      	mov	r5, r1
 8005fb8:	1076      	asrs	r6, r6, #1
 8005fba:	f107 0708 	add.w	r7, r7, #8
 8005fbe:	d1ef      	bne.n	8005fa0 <_dtoa_r+0x688>
 8005fc0:	4622      	mov	r2, r4
 8005fc2:	462b      	mov	r3, r5
 8005fc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005fc8:	f002 fece 	bl	8008d68 <__aeabi_ddiv>
 8005fcc:	4606      	mov	r6, r0
 8005fce:	460f      	mov	r7, r1
 8005fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fd2:	b143      	cbz	r3, 8005fe6 <_dtoa_r+0x6ce>
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	4b78      	ldr	r3, [pc, #480]	; (80061b8 <_dtoa_r+0x8a0>)
 8005fd8:	4630      	mov	r0, r6
 8005fda:	4639      	mov	r1, r7
 8005fdc:	f003 f80c 	bl	8008ff8 <__aeabi_dcmplt>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	f040 831a 	bne.w	800661a <_dtoa_r+0xd02>
 8005fe6:	4650      	mov	r0, sl
 8005fe8:	f002 fd2e 	bl	8008a48 <__aeabi_i2d>
 8005fec:	4632      	mov	r2, r6
 8005fee:	463b      	mov	r3, r7
 8005ff0:	f002 fd90 	bl	8008b14 <__aeabi_dmul>
 8005ff4:	4b71      	ldr	r3, [pc, #452]	; (80061bc <_dtoa_r+0x8a4>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f002 fbda 	bl	80087b0 <__adddf3>
 8005ffc:	9b06      	ldr	r3, [sp, #24]
 8005ffe:	4604      	mov	r4, r0
 8006000:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 81db 	beq.w	80063c0 <_dtoa_r+0xaa8>
 800600a:	9b04      	ldr	r3, [sp, #16]
 800600c:	9314      	str	r3, [sp, #80]	; 0x50
 800600e:	9b06      	ldr	r3, [sp, #24]
 8006010:	9310      	str	r3, [sp, #64]	; 0x40
 8006012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8294 	beq.w	8006542 <_dtoa_r+0xc2a>
 800601a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800601c:	4b64      	ldr	r3, [pc, #400]	; (80061b0 <_dtoa_r+0x898>)
 800601e:	4968      	ldr	r1, [pc, #416]	; (80061c0 <_dtoa_r+0x8a8>)
 8006020:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006024:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006028:	2000      	movs	r0, #0
 800602a:	f002 fe9d 	bl	8008d68 <__aeabi_ddiv>
 800602e:	4622      	mov	r2, r4
 8006030:	462b      	mov	r3, r5
 8006032:	f002 fbbb 	bl	80087ac <__aeabi_dsub>
 8006036:	4682      	mov	sl, r0
 8006038:	468b      	mov	fp, r1
 800603a:	4630      	mov	r0, r6
 800603c:	4639      	mov	r1, r7
 800603e:	f003 f819 	bl	8009074 <__aeabi_d2iz>
 8006042:	4604      	mov	r4, r0
 8006044:	f002 fd00 	bl	8008a48 <__aeabi_i2d>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	4630      	mov	r0, r6
 800604e:	4639      	mov	r1, r7
 8006050:	f002 fbac 	bl	80087ac <__aeabi_dsub>
 8006054:	3430      	adds	r4, #48	; 0x30
 8006056:	9d07      	ldr	r5, [sp, #28]
 8006058:	b2e4      	uxtb	r4, r4
 800605a:	4606      	mov	r6, r0
 800605c:	460f      	mov	r7, r1
 800605e:	702c      	strb	r4, [r5, #0]
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4650      	mov	r0, sl
 8006066:	4659      	mov	r1, fp
 8006068:	3501      	adds	r5, #1
 800606a:	f002 ffe3 	bl	8009034 <__aeabi_dcmpgt>
 800606e:	2800      	cmp	r0, #0
 8006070:	d150      	bne.n	8006114 <_dtoa_r+0x7fc>
 8006072:	4632      	mov	r2, r6
 8006074:	463b      	mov	r3, r7
 8006076:	2000      	movs	r0, #0
 8006078:	494f      	ldr	r1, [pc, #316]	; (80061b8 <_dtoa_r+0x8a0>)
 800607a:	f002 fb97 	bl	80087ac <__aeabi_dsub>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4650      	mov	r0, sl
 8006084:	4659      	mov	r1, fp
 8006086:	f002 ffd5 	bl	8009034 <__aeabi_dcmpgt>
 800608a:	2800      	cmp	r0, #0
 800608c:	f040 8308 	bne.w	80066a0 <_dtoa_r+0xd88>
 8006090:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006092:	2a01      	cmp	r2, #1
 8006094:	f340 81f7 	ble.w	8006486 <_dtoa_r+0xb6e>
 8006098:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800609a:	9a07      	ldr	r2, [sp, #28]
 800609c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80060a0:	4413      	add	r3, r2
 80060a2:	4698      	mov	r8, r3
 80060a4:	e00d      	b.n	80060c2 <_dtoa_r+0x7aa>
 80060a6:	2000      	movs	r0, #0
 80060a8:	4943      	ldr	r1, [pc, #268]	; (80061b8 <_dtoa_r+0x8a0>)
 80060aa:	f002 fb7f 	bl	80087ac <__aeabi_dsub>
 80060ae:	4652      	mov	r2, sl
 80060b0:	465b      	mov	r3, fp
 80060b2:	f002 ffa1 	bl	8008ff8 <__aeabi_dcmplt>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	f040 82f2 	bne.w	80066a0 <_dtoa_r+0xd88>
 80060bc:	4545      	cmp	r5, r8
 80060be:	f000 81e0 	beq.w	8006482 <_dtoa_r+0xb6a>
 80060c2:	4650      	mov	r0, sl
 80060c4:	4659      	mov	r1, fp
 80060c6:	2200      	movs	r2, #0
 80060c8:	4b3e      	ldr	r3, [pc, #248]	; (80061c4 <_dtoa_r+0x8ac>)
 80060ca:	f002 fd23 	bl	8008b14 <__aeabi_dmul>
 80060ce:	2200      	movs	r2, #0
 80060d0:	4b3c      	ldr	r3, [pc, #240]	; (80061c4 <_dtoa_r+0x8ac>)
 80060d2:	4682      	mov	sl, r0
 80060d4:	468b      	mov	fp, r1
 80060d6:	4630      	mov	r0, r6
 80060d8:	4639      	mov	r1, r7
 80060da:	f002 fd1b 	bl	8008b14 <__aeabi_dmul>
 80060de:	460f      	mov	r7, r1
 80060e0:	4606      	mov	r6, r0
 80060e2:	f002 ffc7 	bl	8009074 <__aeabi_d2iz>
 80060e6:	4604      	mov	r4, r0
 80060e8:	f002 fcae 	bl	8008a48 <__aeabi_i2d>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	4630      	mov	r0, r6
 80060f2:	4639      	mov	r1, r7
 80060f4:	f002 fb5a 	bl	80087ac <__aeabi_dsub>
 80060f8:	3430      	adds	r4, #48	; 0x30
 80060fa:	b2e4      	uxtb	r4, r4
 80060fc:	4652      	mov	r2, sl
 80060fe:	465b      	mov	r3, fp
 8006100:	f805 4b01 	strb.w	r4, [r5], #1
 8006104:	4606      	mov	r6, r0
 8006106:	460f      	mov	r7, r1
 8006108:	f002 ff76 	bl	8008ff8 <__aeabi_dcmplt>
 800610c:	4632      	mov	r2, r6
 800610e:	463b      	mov	r3, r7
 8006110:	2800      	cmp	r0, #0
 8006112:	d0c8      	beq.n	80060a6 <_dtoa_r+0x78e>
 8006114:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006116:	9304      	str	r3, [sp, #16]
 8006118:	e5c5      	b.n	8005ca6 <_dtoa_r+0x38e>
 800611a:	2300      	movs	r3, #0
 800611c:	9309      	str	r3, [sp, #36]	; 0x24
 800611e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006120:	2b00      	cmp	r3, #0
 8006122:	f340 8180 	ble.w	8006426 <_dtoa_r+0xb0e>
 8006126:	461e      	mov	r6, r3
 8006128:	461c      	mov	r4, r3
 800612a:	930c      	str	r3, [sp, #48]	; 0x30
 800612c:	9306      	str	r3, [sp, #24]
 800612e:	e6fa      	b.n	8005f26 <_dtoa_r+0x60e>
 8006130:	2301      	movs	r3, #1
 8006132:	9309      	str	r3, [sp, #36]	; 0x24
 8006134:	e7f3      	b.n	800611e <_dtoa_r+0x806>
 8006136:	9408      	str	r4, [sp, #32]
 8006138:	9a02      	ldr	r2, [sp, #8]
 800613a:	9908      	ldr	r1, [sp, #32]
 800613c:	4648      	mov	r0, r9
 800613e:	f001 fc77 	bl	8007a30 <__pow5mult>
 8006142:	4604      	mov	r4, r0
 8006144:	e60e      	b.n	8005d64 <_dtoa_r+0x44c>
 8006146:	9b06      	ldr	r3, [sp, #24]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f73f acfe 	bgt.w	8005b4a <_dtoa_r+0x232>
 800614e:	f040 814f 	bne.w	80063f0 <_dtoa_r+0xad8>
 8006152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006156:	2200      	movs	r2, #0
 8006158:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <_dtoa_r+0x8b0>)
 800615a:	f002 fcdb 	bl	8008b14 <__aeabi_dmul>
 800615e:	465b      	mov	r3, fp
 8006160:	4652      	mov	r2, sl
 8006162:	f002 ff5d 	bl	8009020 <__aeabi_dcmpge>
 8006166:	9b06      	ldr	r3, [sp, #24]
 8006168:	9302      	str	r3, [sp, #8]
 800616a:	461e      	mov	r6, r3
 800616c:	2800      	cmp	r0, #0
 800616e:	f000 80ea 	beq.w	8006346 <_dtoa_r+0xa2e>
 8006172:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006174:	9d07      	ldr	r5, [sp, #28]
 8006176:	43db      	mvns	r3, r3
 8006178:	9304      	str	r3, [sp, #16]
 800617a:	9902      	ldr	r1, [sp, #8]
 800617c:	4648      	mov	r0, r9
 800617e:	f001 fb1d 	bl	80077bc <_Bfree>
 8006182:	2e00      	cmp	r6, #0
 8006184:	f43f ad8f 	beq.w	8005ca6 <_dtoa_r+0x38e>
 8006188:	e689      	b.n	8005e9e <_dtoa_r+0x586>
 800618a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800618c:	2a00      	cmp	r2, #0
 800618e:	f000 8238 	beq.w	8006602 <_dtoa_r+0xcea>
 8006192:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006196:	9f02      	ldr	r7, [sp, #8]
 8006198:	9d05      	ldr	r5, [sp, #20]
 800619a:	e5ac      	b.n	8005cf6 <_dtoa_r+0x3de>
 800619c:	201c      	movs	r0, #28
 800619e:	e60a      	b.n	8005db6 <_dtoa_r+0x49e>
 80061a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	f340 8280 	ble.w	80066a8 <_dtoa_r+0xd90>
 80061a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80061aa:	2001      	movs	r0, #1
 80061ac:	e5f7      	b.n	8005d9e <_dtoa_r+0x486>
 80061ae:	bf00      	nop
 80061b0:	080096a0 	.word	0x080096a0
 80061b4:	08009768 	.word	0x08009768
 80061b8:	3ff00000 	.word	0x3ff00000
 80061bc:	401c0000 	.word	0x401c0000
 80061c0:	3fe00000 	.word	0x3fe00000
 80061c4:	40240000 	.word	0x40240000
 80061c8:	40140000 	.word	0x40140000
 80061cc:	4631      	mov	r1, r6
 80061ce:	2300      	movs	r3, #0
 80061d0:	220a      	movs	r2, #10
 80061d2:	4648      	mov	r0, r9
 80061d4:	f001 fafc 	bl	80077d0 <__multadd>
 80061d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061da:	2b00      	cmp	r3, #0
 80061dc:	4606      	mov	r6, r0
 80061de:	f340 828d 	ble.w	80066fc <_dtoa_r+0xde4>
 80061e2:	9306      	str	r3, [sp, #24]
 80061e4:	2d00      	cmp	r5, #0
 80061e6:	dd05      	ble.n	80061f4 <_dtoa_r+0x8dc>
 80061e8:	4631      	mov	r1, r6
 80061ea:	462a      	mov	r2, r5
 80061ec:	4648      	mov	r0, r9
 80061ee:	f001 fc6f 	bl	8007ad0 <__lshift>
 80061f2:	4606      	mov	r6, r0
 80061f4:	2f00      	cmp	r7, #0
 80061f6:	f040 817c 	bne.w	80064f2 <_dtoa_r+0xbda>
 80061fa:	46b0      	mov	r8, r6
 80061fc:	9b06      	ldr	r3, [sp, #24]
 80061fe:	9a07      	ldr	r2, [sp, #28]
 8006200:	3b01      	subs	r3, #1
 8006202:	18d3      	adds	r3, r2, r3
 8006204:	9308      	str	r3, [sp, #32]
 8006206:	f00a 0301 	and.w	r3, sl, #1
 800620a:	9309      	str	r3, [sp, #36]	; 0x24
 800620c:	4617      	mov	r7, r2
 800620e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006212:	4620      	mov	r0, r4
 8006214:	4659      	mov	r1, fp
 8006216:	f7ff faeb 	bl	80057f0 <quorem>
 800621a:	4631      	mov	r1, r6
 800621c:	4605      	mov	r5, r0
 800621e:	4620      	mov	r0, r4
 8006220:	f001 fcae 	bl	8007b80 <__mcmp>
 8006224:	4642      	mov	r2, r8
 8006226:	4659      	mov	r1, fp
 8006228:	4682      	mov	sl, r0
 800622a:	4648      	mov	r0, r9
 800622c:	f001 fcca 	bl	8007bc4 <__mdiff>
 8006230:	68c2      	ldr	r2, [r0, #12]
 8006232:	4683      	mov	fp, r0
 8006234:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8006238:	2a00      	cmp	r2, #0
 800623a:	d149      	bne.n	80062d0 <_dtoa_r+0x9b8>
 800623c:	4601      	mov	r1, r0
 800623e:	4620      	mov	r0, r4
 8006240:	9306      	str	r3, [sp, #24]
 8006242:	f001 fc9d 	bl	8007b80 <__mcmp>
 8006246:	4659      	mov	r1, fp
 8006248:	9005      	str	r0, [sp, #20]
 800624a:	4648      	mov	r0, r9
 800624c:	f001 fab6 	bl	80077bc <_Bfree>
 8006250:	9a05      	ldr	r2, [sp, #20]
 8006252:	9b06      	ldr	r3, [sp, #24]
 8006254:	b92a      	cbnz	r2, 8006262 <_dtoa_r+0x94a>
 8006256:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006258:	b919      	cbnz	r1, 8006262 <_dtoa_r+0x94a>
 800625a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800625c:	2900      	cmp	r1, #0
 800625e:	f000 8235 	beq.w	80066cc <_dtoa_r+0xdb4>
 8006262:	f1ba 0f00 	cmp.w	sl, #0
 8006266:	f2c0 80e3 	blt.w	8006430 <_dtoa_r+0xb18>
 800626a:	d105      	bne.n	8006278 <_dtoa_r+0x960>
 800626c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800626e:	b919      	cbnz	r1, 8006278 <_dtoa_r+0x960>
 8006270:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006272:	2900      	cmp	r1, #0
 8006274:	f000 80dc 	beq.w	8006430 <_dtoa_r+0xb18>
 8006278:	2a00      	cmp	r2, #0
 800627a:	f300 814e 	bgt.w	800651a <_dtoa_r+0xc02>
 800627e:	9a08      	ldr	r2, [sp, #32]
 8006280:	703b      	strb	r3, [r7, #0]
 8006282:	f107 0a01 	add.w	sl, r7, #1
 8006286:	4297      	cmp	r7, r2
 8006288:	4655      	mov	r5, sl
 800628a:	f000 8152 	beq.w	8006532 <_dtoa_r+0xc1a>
 800628e:	4621      	mov	r1, r4
 8006290:	2300      	movs	r3, #0
 8006292:	220a      	movs	r2, #10
 8006294:	4648      	mov	r0, r9
 8006296:	f001 fa9b 	bl	80077d0 <__multadd>
 800629a:	4546      	cmp	r6, r8
 800629c:	4604      	mov	r4, r0
 800629e:	4631      	mov	r1, r6
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	f04f 020a 	mov.w	r2, #10
 80062a8:	4648      	mov	r0, r9
 80062aa:	d00b      	beq.n	80062c4 <_dtoa_r+0x9ac>
 80062ac:	f001 fa90 	bl	80077d0 <__multadd>
 80062b0:	4641      	mov	r1, r8
 80062b2:	4606      	mov	r6, r0
 80062b4:	2300      	movs	r3, #0
 80062b6:	220a      	movs	r2, #10
 80062b8:	4648      	mov	r0, r9
 80062ba:	f001 fa89 	bl	80077d0 <__multadd>
 80062be:	4657      	mov	r7, sl
 80062c0:	4680      	mov	r8, r0
 80062c2:	e7a4      	b.n	800620e <_dtoa_r+0x8f6>
 80062c4:	f001 fa84 	bl	80077d0 <__multadd>
 80062c8:	4657      	mov	r7, sl
 80062ca:	4606      	mov	r6, r0
 80062cc:	4680      	mov	r8, r0
 80062ce:	e79e      	b.n	800620e <_dtoa_r+0x8f6>
 80062d0:	4601      	mov	r1, r0
 80062d2:	4648      	mov	r0, r9
 80062d4:	9305      	str	r3, [sp, #20]
 80062d6:	f001 fa71 	bl	80077bc <_Bfree>
 80062da:	2201      	movs	r2, #1
 80062dc:	9b05      	ldr	r3, [sp, #20]
 80062de:	e7c0      	b.n	8006262 <_dtoa_r+0x94a>
 80062e0:	9902      	ldr	r1, [sp, #8]
 80062e2:	4620      	mov	r0, r4
 80062e4:	f001 fc4c 	bl	8007b80 <__mcmp>
 80062e8:	2800      	cmp	r0, #0
 80062ea:	f6bf ad7f 	bge.w	8005dec <_dtoa_r+0x4d4>
 80062ee:	4621      	mov	r1, r4
 80062f0:	9c04      	ldr	r4, [sp, #16]
 80062f2:	2300      	movs	r3, #0
 80062f4:	3c01      	subs	r4, #1
 80062f6:	220a      	movs	r2, #10
 80062f8:	4648      	mov	r0, r9
 80062fa:	9404      	str	r4, [sp, #16]
 80062fc:	f001 fa68 	bl	80077d0 <__multadd>
 8006300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006302:	4604      	mov	r4, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	f47f af61 	bne.w	80061cc <_dtoa_r+0x8b4>
 800630a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800630c:	2b00      	cmp	r3, #0
 800630e:	f340 81ed 	ble.w	80066ec <_dtoa_r+0xdd4>
 8006312:	9306      	str	r3, [sp, #24]
 8006314:	e572      	b.n	8005dfc <_dtoa_r+0x4e4>
 8006316:	9c08      	ldr	r4, [sp, #32]
 8006318:	e524      	b.n	8005d64 <_dtoa_r+0x44c>
 800631a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800631c:	2b02      	cmp	r3, #2
 800631e:	f77f ad69 	ble.w	8005df4 <_dtoa_r+0x4dc>
 8006322:	9b06      	ldr	r3, [sp, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	f040 819d 	bne.w	8006664 <_dtoa_r+0xd4c>
 800632a:	9902      	ldr	r1, [sp, #8]
 800632c:	2205      	movs	r2, #5
 800632e:	4648      	mov	r0, r9
 8006330:	f001 fa4e 	bl	80077d0 <__multadd>
 8006334:	4601      	mov	r1, r0
 8006336:	9002      	str	r0, [sp, #8]
 8006338:	4620      	mov	r0, r4
 800633a:	f001 fc21 	bl	8007b80 <__mcmp>
 800633e:	2800      	cmp	r0, #0
 8006340:	9408      	str	r4, [sp, #32]
 8006342:	f77f af16 	ble.w	8006172 <_dtoa_r+0x85a>
 8006346:	9a04      	ldr	r2, [sp, #16]
 8006348:	9907      	ldr	r1, [sp, #28]
 800634a:	2331      	movs	r3, #49	; 0x31
 800634c:	3201      	adds	r2, #1
 800634e:	9204      	str	r2, [sp, #16]
 8006350:	700b      	strb	r3, [r1, #0]
 8006352:	1c4d      	adds	r5, r1, #1
 8006354:	e711      	b.n	800617a <_dtoa_r+0x862>
 8006356:	9a04      	ldr	r2, [sp, #16]
 8006358:	3201      	adds	r2, #1
 800635a:	9204      	str	r2, [sp, #16]
 800635c:	9a07      	ldr	r2, [sp, #28]
 800635e:	2331      	movs	r3, #49	; 0x31
 8006360:	7013      	strb	r3, [r2, #0]
 8006362:	e58c      	b.n	8005e7e <_dtoa_r+0x566>
 8006364:	2301      	movs	r3, #1
 8006366:	9309      	str	r3, [sp, #36]	; 0x24
 8006368:	e5d2      	b.n	8005f10 <_dtoa_r+0x5f8>
 800636a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800636e:	e49a      	b.n	8005ca6 <_dtoa_r+0x38e>
 8006370:	f1ba 0f00 	cmp.w	sl, #0
 8006374:	f47f ad09 	bne.w	8005d8a <_dtoa_r+0x472>
 8006378:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800637c:	2b00      	cmp	r3, #0
 800637e:	f040 813e 	bne.w	80065fe <_dtoa_r+0xce6>
 8006382:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8006386:	0d3f      	lsrs	r7, r7, #20
 8006388:	053f      	lsls	r7, r7, #20
 800638a:	b12f      	cbz	r7, 8006398 <_dtoa_r+0xa80>
 800638c:	9b05      	ldr	r3, [sp, #20]
 800638e:	3301      	adds	r3, #1
 8006390:	9305      	str	r3, [sp, #20]
 8006392:	f108 0801 	add.w	r8, r8, #1
 8006396:	2701      	movs	r7, #1
 8006398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800639a:	2001      	movs	r0, #1
 800639c:	2b00      	cmp	r3, #0
 800639e:	f43f acfe 	beq.w	8005d9e <_dtoa_r+0x486>
 80063a2:	e4f3      	b.n	8005d8c <_dtoa_r+0x474>
 80063a4:	4650      	mov	r0, sl
 80063a6:	f002 fb4f 	bl	8008a48 <__aeabi_i2d>
 80063aa:	4632      	mov	r2, r6
 80063ac:	463b      	mov	r3, r7
 80063ae:	f002 fbb1 	bl	8008b14 <__aeabi_dmul>
 80063b2:	2200      	movs	r2, #0
 80063b4:	4bbf      	ldr	r3, [pc, #764]	; (80066b4 <_dtoa_r+0xd9c>)
 80063b6:	f002 f9fb 	bl	80087b0 <__adddf3>
 80063ba:	4604      	mov	r4, r0
 80063bc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80063c0:	4630      	mov	r0, r6
 80063c2:	4639      	mov	r1, r7
 80063c4:	2200      	movs	r2, #0
 80063c6:	4bbc      	ldr	r3, [pc, #752]	; (80066b8 <_dtoa_r+0xda0>)
 80063c8:	f002 f9f0 	bl	80087ac <__aeabi_dsub>
 80063cc:	4622      	mov	r2, r4
 80063ce:	462b      	mov	r3, r5
 80063d0:	4606      	mov	r6, r0
 80063d2:	460f      	mov	r7, r1
 80063d4:	f002 fe2e 	bl	8009034 <__aeabi_dcmpgt>
 80063d8:	2800      	cmp	r0, #0
 80063da:	f040 80ae 	bne.w	800653a <_dtoa_r+0xc22>
 80063de:	4622      	mov	r2, r4
 80063e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80063e4:	4630      	mov	r0, r6
 80063e6:	4639      	mov	r1, r7
 80063e8:	f002 fe06 	bl	8008ff8 <__aeabi_dcmplt>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d04a      	beq.n	8006486 <_dtoa_r+0xb6e>
 80063f0:	2300      	movs	r3, #0
 80063f2:	9302      	str	r3, [sp, #8]
 80063f4:	461e      	mov	r6, r3
 80063f6:	e6bc      	b.n	8006172 <_dtoa_r+0x85a>
 80063f8:	9807      	ldr	r0, [sp, #28]
 80063fa:	f7ff babe 	b.w	800597a <_dtoa_r+0x62>
 80063fe:	9b02      	ldr	r3, [sp, #8]
 8006400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006402:	9702      	str	r7, [sp, #8]
 8006404:	1afb      	subs	r3, r7, r3
 8006406:	441a      	add	r2, r3
 8006408:	920a      	str	r2, [sp, #40]	; 0x28
 800640a:	2700      	movs	r7, #0
 800640c:	e46d      	b.n	8005cea <_dtoa_r+0x3d2>
 800640e:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8006412:	f04f 0a02 	mov.w	sl, #2
 8006416:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800641a:	e5bf      	b.n	8005f9c <_dtoa_r+0x684>
 800641c:	461c      	mov	r4, r3
 800641e:	2100      	movs	r1, #0
 8006420:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8006424:	e590      	b.n	8005f48 <_dtoa_r+0x630>
 8006426:	2401      	movs	r4, #1
 8006428:	9423      	str	r4, [sp, #140]	; 0x8c
 800642a:	940c      	str	r4, [sp, #48]	; 0x30
 800642c:	9406      	str	r4, [sp, #24]
 800642e:	e7f6      	b.n	800641e <_dtoa_r+0xb06>
 8006430:	2a00      	cmp	r2, #0
 8006432:	469a      	mov	sl, r3
 8006434:	dd11      	ble.n	800645a <_dtoa_r+0xb42>
 8006436:	4621      	mov	r1, r4
 8006438:	2201      	movs	r2, #1
 800643a:	4648      	mov	r0, r9
 800643c:	f001 fb48 	bl	8007ad0 <__lshift>
 8006440:	9902      	ldr	r1, [sp, #8]
 8006442:	4604      	mov	r4, r0
 8006444:	f001 fb9c 	bl	8007b80 <__mcmp>
 8006448:	2800      	cmp	r0, #0
 800644a:	f340 8148 	ble.w	80066de <_dtoa_r+0xdc6>
 800644e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006452:	f000 8109 	beq.w	8006668 <_dtoa_r+0xd50>
 8006456:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 800645a:	46b3      	mov	fp, r6
 800645c:	f887 a000 	strb.w	sl, [r7]
 8006460:	1c7d      	adds	r5, r7, #1
 8006462:	4646      	mov	r6, r8
 8006464:	9408      	str	r4, [sp, #32]
 8006466:	e50a      	b.n	8005e7e <_dtoa_r+0x566>
 8006468:	d104      	bne.n	8006474 <_dtoa_r+0xb5c>
 800646a:	f01a 0f01 	tst.w	sl, #1
 800646e:	d001      	beq.n	8006474 <_dtoa_r+0xb5c>
 8006470:	e4f5      	b.n	8005e5e <_dtoa_r+0x546>
 8006472:	4615      	mov	r5, r2
 8006474:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006478:	2b30      	cmp	r3, #48	; 0x30
 800647a:	f105 32ff 	add.w	r2, r5, #4294967295
 800647e:	d0f8      	beq.n	8006472 <_dtoa_r+0xb5a>
 8006480:	e4fd      	b.n	8005e7e <_dtoa_r+0x566>
 8006482:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8006486:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 800648a:	f7ff bb4b 	b.w	8005b24 <_dtoa_r+0x20c>
 800648e:	9907      	ldr	r1, [sp, #28]
 8006490:	2230      	movs	r2, #48	; 0x30
 8006492:	700a      	strb	r2, [r1, #0]
 8006494:	9a04      	ldr	r2, [sp, #16]
 8006496:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800649a:	3201      	adds	r2, #1
 800649c:	9204      	str	r2, [sp, #16]
 800649e:	e400      	b.n	8005ca2 <_dtoa_r+0x38a>
 80064a0:	9b04      	ldr	r3, [sp, #16]
 80064a2:	425c      	negs	r4, r3
 80064a4:	2c00      	cmp	r4, #0
 80064a6:	f000 80b3 	beq.w	8006610 <_dtoa_r+0xcf8>
 80064aa:	4b84      	ldr	r3, [pc, #528]	; (80066bc <_dtoa_r+0xda4>)
 80064ac:	f004 020f 	and.w	r2, r4, #15
 80064b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80064bc:	f002 fb2a 	bl	8008b14 <__aeabi_dmul>
 80064c0:	1124      	asrs	r4, r4, #4
 80064c2:	4606      	mov	r6, r0
 80064c4:	460f      	mov	r7, r1
 80064c6:	f000 8116 	beq.w	80066f6 <_dtoa_r+0xdde>
 80064ca:	4d7d      	ldr	r5, [pc, #500]	; (80066c0 <_dtoa_r+0xda8>)
 80064cc:	f04f 0a02 	mov.w	sl, #2
 80064d0:	07e2      	lsls	r2, r4, #31
 80064d2:	d509      	bpl.n	80064e8 <_dtoa_r+0xbd0>
 80064d4:	4630      	mov	r0, r6
 80064d6:	4639      	mov	r1, r7
 80064d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064dc:	f002 fb1a 	bl	8008b14 <__aeabi_dmul>
 80064e0:	f10a 0a01 	add.w	sl, sl, #1
 80064e4:	4606      	mov	r6, r0
 80064e6:	460f      	mov	r7, r1
 80064e8:	1064      	asrs	r4, r4, #1
 80064ea:	f105 0508 	add.w	r5, r5, #8
 80064ee:	d1ef      	bne.n	80064d0 <_dtoa_r+0xbb8>
 80064f0:	e56e      	b.n	8005fd0 <_dtoa_r+0x6b8>
 80064f2:	6871      	ldr	r1, [r6, #4]
 80064f4:	4648      	mov	r0, r9
 80064f6:	f001 f93b 	bl	8007770 <_Balloc>
 80064fa:	6933      	ldr	r3, [r6, #16]
 80064fc:	1c9a      	adds	r2, r3, #2
 80064fe:	4605      	mov	r5, r0
 8006500:	0092      	lsls	r2, r2, #2
 8006502:	f106 010c 	add.w	r1, r6, #12
 8006506:	300c      	adds	r0, #12
 8006508:	f7fb ff72 	bl	80023f0 <memcpy>
 800650c:	4629      	mov	r1, r5
 800650e:	2201      	movs	r2, #1
 8006510:	4648      	mov	r0, r9
 8006512:	f001 fadd 	bl	8007ad0 <__lshift>
 8006516:	4680      	mov	r8, r0
 8006518:	e670      	b.n	80061fc <_dtoa_r+0x8e4>
 800651a:	2b39      	cmp	r3, #57	; 0x39
 800651c:	f000 80a4 	beq.w	8006668 <_dtoa_r+0xd50>
 8006520:	f103 0a01 	add.w	sl, r3, #1
 8006524:	46b3      	mov	fp, r6
 8006526:	f887 a000 	strb.w	sl, [r7]
 800652a:	1c7d      	adds	r5, r7, #1
 800652c:	4646      	mov	r6, r8
 800652e:	9408      	str	r4, [sp, #32]
 8006530:	e4a5      	b.n	8005e7e <_dtoa_r+0x566>
 8006532:	46b3      	mov	fp, r6
 8006534:	469a      	mov	sl, r3
 8006536:	4646      	mov	r6, r8
 8006538:	e485      	b.n	8005e46 <_dtoa_r+0x52e>
 800653a:	2300      	movs	r3, #0
 800653c:	9302      	str	r3, [sp, #8]
 800653e:	461e      	mov	r6, r3
 8006540:	e701      	b.n	8006346 <_dtoa_r+0xa2e>
 8006542:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006544:	495d      	ldr	r1, [pc, #372]	; (80066bc <_dtoa_r+0xda4>)
 8006546:	1e5a      	subs	r2, r3, #1
 8006548:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800654c:	462b      	mov	r3, r5
 800654e:	9215      	str	r2, [sp, #84]	; 0x54
 8006550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006554:	4622      	mov	r2, r4
 8006556:	f002 fadd 	bl	8008b14 <__aeabi_dmul>
 800655a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800655e:	4639      	mov	r1, r7
 8006560:	4630      	mov	r0, r6
 8006562:	f002 fd87 	bl	8009074 <__aeabi_d2iz>
 8006566:	4604      	mov	r4, r0
 8006568:	f002 fa6e 	bl	8008a48 <__aeabi_i2d>
 800656c:	460b      	mov	r3, r1
 800656e:	4602      	mov	r2, r0
 8006570:	4639      	mov	r1, r7
 8006572:	4630      	mov	r0, r6
 8006574:	f002 f91a 	bl	80087ac <__aeabi_dsub>
 8006578:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800657a:	460f      	mov	r7, r1
 800657c:	9907      	ldr	r1, [sp, #28]
 800657e:	3430      	adds	r4, #48	; 0x30
 8006580:	2b01      	cmp	r3, #1
 8006582:	4606      	mov	r6, r0
 8006584:	700c      	strb	r4, [r1, #0]
 8006586:	f101 0501 	add.w	r5, r1, #1
 800658a:	d020      	beq.n	80065ce <_dtoa_r+0xcb6>
 800658c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800658e:	9a07      	ldr	r2, [sp, #28]
 8006590:	4413      	add	r3, r2
 8006592:	469a      	mov	sl, r3
 8006594:	46ab      	mov	fp, r5
 8006596:	2200      	movs	r2, #0
 8006598:	4b4a      	ldr	r3, [pc, #296]	; (80066c4 <_dtoa_r+0xdac>)
 800659a:	4630      	mov	r0, r6
 800659c:	4639      	mov	r1, r7
 800659e:	f002 fab9 	bl	8008b14 <__aeabi_dmul>
 80065a2:	460f      	mov	r7, r1
 80065a4:	4606      	mov	r6, r0
 80065a6:	f002 fd65 	bl	8009074 <__aeabi_d2iz>
 80065aa:	4604      	mov	r4, r0
 80065ac:	f002 fa4c 	bl	8008a48 <__aeabi_i2d>
 80065b0:	3430      	adds	r4, #48	; 0x30
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4630      	mov	r0, r6
 80065b8:	4639      	mov	r1, r7
 80065ba:	f002 f8f7 	bl	80087ac <__aeabi_dsub>
 80065be:	f80b 4b01 	strb.w	r4, [fp], #1
 80065c2:	45da      	cmp	sl, fp
 80065c4:	4606      	mov	r6, r0
 80065c6:	460f      	mov	r7, r1
 80065c8:	d1e5      	bne.n	8006596 <_dtoa_r+0xc7e>
 80065ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80065cc:	441d      	add	r5, r3
 80065ce:	2200      	movs	r2, #0
 80065d0:	4b3d      	ldr	r3, [pc, #244]	; (80066c8 <_dtoa_r+0xdb0>)
 80065d2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80065d6:	f002 f8eb 	bl	80087b0 <__adddf3>
 80065da:	4632      	mov	r2, r6
 80065dc:	463b      	mov	r3, r7
 80065de:	f002 fd0b 	bl	8008ff8 <__aeabi_dcmplt>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d048      	beq.n	8006678 <_dtoa_r+0xd60>
 80065e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065e8:	9304      	str	r3, [sp, #16]
 80065ea:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 80065ee:	f7ff bb4c 	b.w	8005c8a <_dtoa_r+0x372>
 80065f2:	9b05      	ldr	r3, [sp, #20]
 80065f4:	9a06      	ldr	r2, [sp, #24]
 80065f6:	1a9d      	subs	r5, r3, r2
 80065f8:	2300      	movs	r3, #0
 80065fa:	f7ff bb7c 	b.w	8005cf6 <_dtoa_r+0x3de>
 80065fe:	2700      	movs	r7, #0
 8006600:	e6ca      	b.n	8006398 <_dtoa_r+0xa80>
 8006602:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006604:	9f02      	ldr	r7, [sp, #8]
 8006606:	9d05      	ldr	r5, [sp, #20]
 8006608:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800660c:	f7ff bb73 	b.w	8005cf6 <_dtoa_r+0x3de>
 8006610:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8006614:	f04f 0a02 	mov.w	sl, #2
 8006618:	e4da      	b.n	8005fd0 <_dtoa_r+0x6b8>
 800661a:	9b06      	ldr	r3, [sp, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f43f aec1 	beq.w	80063a4 <_dtoa_r+0xa8c>
 8006622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006624:	2b00      	cmp	r3, #0
 8006626:	f77f af2e 	ble.w	8006486 <_dtoa_r+0xb6e>
 800662a:	2200      	movs	r2, #0
 800662c:	4b25      	ldr	r3, [pc, #148]	; (80066c4 <_dtoa_r+0xdac>)
 800662e:	4630      	mov	r0, r6
 8006630:	4639      	mov	r1, r7
 8006632:	f002 fa6f 	bl	8008b14 <__aeabi_dmul>
 8006636:	4606      	mov	r6, r0
 8006638:	460f      	mov	r7, r1
 800663a:	f10a 0001 	add.w	r0, sl, #1
 800663e:	f002 fa03 	bl	8008a48 <__aeabi_i2d>
 8006642:	4632      	mov	r2, r6
 8006644:	463b      	mov	r3, r7
 8006646:	f002 fa65 	bl	8008b14 <__aeabi_dmul>
 800664a:	2200      	movs	r2, #0
 800664c:	4b19      	ldr	r3, [pc, #100]	; (80066b4 <_dtoa_r+0xd9c>)
 800664e:	f002 f8af 	bl	80087b0 <__adddf3>
 8006652:	9a04      	ldr	r2, [sp, #16]
 8006654:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006656:	9310      	str	r3, [sp, #64]	; 0x40
 8006658:	3a01      	subs	r2, #1
 800665a:	4604      	mov	r4, r0
 800665c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006660:	9214      	str	r2, [sp, #80]	; 0x50
 8006662:	e4d6      	b.n	8006012 <_dtoa_r+0x6fa>
 8006664:	9408      	str	r4, [sp, #32]
 8006666:	e584      	b.n	8006172 <_dtoa_r+0x85a>
 8006668:	2239      	movs	r2, #57	; 0x39
 800666a:	46b3      	mov	fp, r6
 800666c:	9408      	str	r4, [sp, #32]
 800666e:	4646      	mov	r6, r8
 8006670:	703a      	strb	r2, [r7, #0]
 8006672:	1c7d      	adds	r5, r7, #1
 8006674:	f7ff bbf5 	b.w	8005e62 <_dtoa_r+0x54a>
 8006678:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800667c:	2000      	movs	r0, #0
 800667e:	4912      	ldr	r1, [pc, #72]	; (80066c8 <_dtoa_r+0xdb0>)
 8006680:	f002 f894 	bl	80087ac <__aeabi_dsub>
 8006684:	4632      	mov	r2, r6
 8006686:	463b      	mov	r3, r7
 8006688:	f002 fcd4 	bl	8009034 <__aeabi_dcmpgt>
 800668c:	b908      	cbnz	r0, 8006692 <_dtoa_r+0xd7a>
 800668e:	e6fa      	b.n	8006486 <_dtoa_r+0xb6e>
 8006690:	4615      	mov	r5, r2
 8006692:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006696:	2b30      	cmp	r3, #48	; 0x30
 8006698:	f105 32ff 	add.w	r2, r5, #4294967295
 800669c:	d0f8      	beq.n	8006690 <_dtoa_r+0xd78>
 800669e:	e539      	b.n	8006114 <_dtoa_r+0x7fc>
 80066a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066a2:	9304      	str	r3, [sp, #16]
 80066a4:	f7ff baf1 	b.w	8005c8a <_dtoa_r+0x372>
 80066a8:	f1ba 0f00 	cmp.w	sl, #0
 80066ac:	f47f ad7c 	bne.w	80061a8 <_dtoa_r+0x890>
 80066b0:	e662      	b.n	8006378 <_dtoa_r+0xa60>
 80066b2:	bf00      	nop
 80066b4:	401c0000 	.word	0x401c0000
 80066b8:	40140000 	.word	0x40140000
 80066bc:	080096a0 	.word	0x080096a0
 80066c0:	08009768 	.word	0x08009768
 80066c4:	40240000 	.word	0x40240000
 80066c8:	3fe00000 	.word	0x3fe00000
 80066cc:	2b39      	cmp	r3, #57	; 0x39
 80066ce:	46d3      	mov	fp, sl
 80066d0:	469a      	mov	sl, r3
 80066d2:	d0c9      	beq.n	8006668 <_dtoa_r+0xd50>
 80066d4:	f1bb 0f00 	cmp.w	fp, #0
 80066d8:	f73f aebd 	bgt.w	8006456 <_dtoa_r+0xb3e>
 80066dc:	e6bd      	b.n	800645a <_dtoa_r+0xb42>
 80066de:	f47f aebc 	bne.w	800645a <_dtoa_r+0xb42>
 80066e2:	f01a 0f01 	tst.w	sl, #1
 80066e6:	f43f aeb8 	beq.w	800645a <_dtoa_r+0xb42>
 80066ea:	e6b0      	b.n	800644e <_dtoa_r+0xb36>
 80066ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	dc25      	bgt.n	800673e <_dtoa_r+0xe26>
 80066f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066f4:	e60d      	b.n	8006312 <_dtoa_r+0x9fa>
 80066f6:	f04f 0a02 	mov.w	sl, #2
 80066fa:	e469      	b.n	8005fd0 <_dtoa_r+0x6b8>
 80066fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066fe:	2b02      	cmp	r3, #2
 8006700:	dc1d      	bgt.n	800673e <_dtoa_r+0xe26>
 8006702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006704:	e56d      	b.n	80061e2 <_dtoa_r+0x8ca>
 8006706:	2400      	movs	r4, #0
 8006708:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800670c:	4621      	mov	r1, r4
 800670e:	4648      	mov	r0, r9
 8006710:	f001 f82e 	bl	8007770 <_Balloc>
 8006714:	f04f 33ff 	mov.w	r3, #4294967295
 8006718:	9306      	str	r3, [sp, #24]
 800671a:	930c      	str	r3, [sp, #48]	; 0x30
 800671c:	2301      	movs	r3, #1
 800671e:	9007      	str	r0, [sp, #28]
 8006720:	9423      	str	r4, [sp, #140]	; 0x8c
 8006722:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8006726:	9309      	str	r3, [sp, #36]	; 0x24
 8006728:	f7ff b9fc 	b.w	8005b24 <_dtoa_r+0x20c>
 800672c:	f43f ab48 	beq.w	8005dc0 <_dtoa_r+0x4a8>
 8006730:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8006734:	f7ff bb3f 	b.w	8005db6 <_dtoa_r+0x49e>
 8006738:	2501      	movs	r5, #1
 800673a:	f7ff b9bd 	b.w	8005ab8 <_dtoa_r+0x1a0>
 800673e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006740:	9306      	str	r3, [sp, #24]
 8006742:	e5ee      	b.n	8006322 <_dtoa_r+0xa0a>

08006744 <__sflush_r>:
 8006744:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8006748:	b29a      	uxth	r2, r3
 800674a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800674e:	460d      	mov	r5, r1
 8006750:	0711      	lsls	r1, r2, #28
 8006752:	4680      	mov	r8, r0
 8006754:	d43c      	bmi.n	80067d0 <__sflush_r+0x8c>
 8006756:	686a      	ldr	r2, [r5, #4]
 8006758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800675c:	2a00      	cmp	r2, #0
 800675e:	81ab      	strh	r3, [r5, #12]
 8006760:	dd73      	ble.n	800684a <__sflush_r+0x106>
 8006762:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8006764:	2c00      	cmp	r4, #0
 8006766:	d04b      	beq.n	8006800 <__sflush_r+0xbc>
 8006768:	b29b      	uxth	r3, r3
 800676a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800676e:	2100      	movs	r1, #0
 8006770:	b292      	uxth	r2, r2
 8006772:	f8d8 6000 	ldr.w	r6, [r8]
 8006776:	f8c8 1000 	str.w	r1, [r8]
 800677a:	2a00      	cmp	r2, #0
 800677c:	d069      	beq.n	8006852 <__sflush_r+0x10e>
 800677e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8006780:	075f      	lsls	r7, r3, #29
 8006782:	d505      	bpl.n	8006790 <__sflush_r+0x4c>
 8006784:	6869      	ldr	r1, [r5, #4]
 8006786:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006788:	1a52      	subs	r2, r2, r1
 800678a:	b10b      	cbz	r3, 8006790 <__sflush_r+0x4c>
 800678c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800678e:	1ad2      	subs	r2, r2, r3
 8006790:	2300      	movs	r3, #0
 8006792:	69e9      	ldr	r1, [r5, #28]
 8006794:	4640      	mov	r0, r8
 8006796:	47a0      	blx	r4
 8006798:	1c44      	adds	r4, r0, #1
 800679a:	d03c      	beq.n	8006816 <__sflush_r+0xd2>
 800679c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80067a0:	692a      	ldr	r2, [r5, #16]
 80067a2:	602a      	str	r2, [r5, #0]
 80067a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067a8:	2200      	movs	r2, #0
 80067aa:	81ab      	strh	r3, [r5, #12]
 80067ac:	04db      	lsls	r3, r3, #19
 80067ae:	606a      	str	r2, [r5, #4]
 80067b0:	d449      	bmi.n	8006846 <__sflush_r+0x102>
 80067b2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80067b4:	f8c8 6000 	str.w	r6, [r8]
 80067b8:	b311      	cbz	r1, 8006800 <__sflush_r+0xbc>
 80067ba:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80067be:	4299      	cmp	r1, r3
 80067c0:	d002      	beq.n	80067c8 <__sflush_r+0x84>
 80067c2:	4640      	mov	r0, r8
 80067c4:	f000 f94e 	bl	8006a64 <_free_r>
 80067c8:	2000      	movs	r0, #0
 80067ca:	6328      	str	r0, [r5, #48]	; 0x30
 80067cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d0:	692e      	ldr	r6, [r5, #16]
 80067d2:	b1ae      	cbz	r6, 8006800 <__sflush_r+0xbc>
 80067d4:	682c      	ldr	r4, [r5, #0]
 80067d6:	602e      	str	r6, [r5, #0]
 80067d8:	0790      	lsls	r0, r2, #30
 80067da:	bf0c      	ite	eq
 80067dc:	696b      	ldreq	r3, [r5, #20]
 80067de:	2300      	movne	r3, #0
 80067e0:	1ba4      	subs	r4, r4, r6
 80067e2:	60ab      	str	r3, [r5, #8]
 80067e4:	e00a      	b.n	80067fc <__sflush_r+0xb8>
 80067e6:	4623      	mov	r3, r4
 80067e8:	4632      	mov	r2, r6
 80067ea:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80067ec:	69e9      	ldr	r1, [r5, #28]
 80067ee:	4640      	mov	r0, r8
 80067f0:	47b8      	blx	r7
 80067f2:	2800      	cmp	r0, #0
 80067f4:	eba4 0400 	sub.w	r4, r4, r0
 80067f8:	4406      	add	r6, r0
 80067fa:	dd04      	ble.n	8006806 <__sflush_r+0xc2>
 80067fc:	2c00      	cmp	r4, #0
 80067fe:	dcf2      	bgt.n	80067e6 <__sflush_r+0xa2>
 8006800:	2000      	movs	r0, #0
 8006802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006806:	89ab      	ldrh	r3, [r5, #12]
 8006808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800680c:	81ab      	strh	r3, [r5, #12]
 800680e:	f04f 30ff 	mov.w	r0, #4294967295
 8006812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006816:	f8d8 2000 	ldr.w	r2, [r8]
 800681a:	2a1d      	cmp	r2, #29
 800681c:	d8f3      	bhi.n	8006806 <__sflush_r+0xc2>
 800681e:	4b1a      	ldr	r3, [pc, #104]	; (8006888 <__sflush_r+0x144>)
 8006820:	40d3      	lsrs	r3, r2
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	f083 0401 	eor.w	r4, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0eb      	beq.n	8006806 <__sflush_r+0xc2>
 800682e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8006832:	6929      	ldr	r1, [r5, #16]
 8006834:	6029      	str	r1, [r5, #0]
 8006836:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800683a:	04d9      	lsls	r1, r3, #19
 800683c:	606c      	str	r4, [r5, #4]
 800683e:	81ab      	strh	r3, [r5, #12]
 8006840:	d5b7      	bpl.n	80067b2 <__sflush_r+0x6e>
 8006842:	2a00      	cmp	r2, #0
 8006844:	d1b5      	bne.n	80067b2 <__sflush_r+0x6e>
 8006846:	6528      	str	r0, [r5, #80]	; 0x50
 8006848:	e7b3      	b.n	80067b2 <__sflush_r+0x6e>
 800684a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800684c:	2a00      	cmp	r2, #0
 800684e:	dc88      	bgt.n	8006762 <__sflush_r+0x1e>
 8006850:	e7d6      	b.n	8006800 <__sflush_r+0xbc>
 8006852:	2301      	movs	r3, #1
 8006854:	69e9      	ldr	r1, [r5, #28]
 8006856:	4640      	mov	r0, r8
 8006858:	47a0      	blx	r4
 800685a:	1c43      	adds	r3, r0, #1
 800685c:	4602      	mov	r2, r0
 800685e:	d002      	beq.n	8006866 <__sflush_r+0x122>
 8006860:	89ab      	ldrh	r3, [r5, #12]
 8006862:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8006864:	e78c      	b.n	8006780 <__sflush_r+0x3c>
 8006866:	f8d8 3000 	ldr.w	r3, [r8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0f8      	beq.n	8006860 <__sflush_r+0x11c>
 800686e:	2b1d      	cmp	r3, #29
 8006870:	d001      	beq.n	8006876 <__sflush_r+0x132>
 8006872:	2b16      	cmp	r3, #22
 8006874:	d102      	bne.n	800687c <__sflush_r+0x138>
 8006876:	f8c8 6000 	str.w	r6, [r8]
 800687a:	e7c1      	b.n	8006800 <__sflush_r+0xbc>
 800687c:	89ab      	ldrh	r3, [r5, #12]
 800687e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006882:	81ab      	strh	r3, [r5, #12]
 8006884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006888:	20400001 	.word	0x20400001

0800688c <_fflush_r>:
 800688c:	b510      	push	{r4, lr}
 800688e:	4604      	mov	r4, r0
 8006890:	b082      	sub	sp, #8
 8006892:	b108      	cbz	r0, 8006898 <_fflush_r+0xc>
 8006894:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006896:	b153      	cbz	r3, 80068ae <_fflush_r+0x22>
 8006898:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800689c:	b908      	cbnz	r0, 80068a2 <_fflush_r+0x16>
 800689e:	b002      	add	sp, #8
 80068a0:	bd10      	pop	{r4, pc}
 80068a2:	4620      	mov	r0, r4
 80068a4:	b002      	add	sp, #8
 80068a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068aa:	f7ff bf4b 	b.w	8006744 <__sflush_r>
 80068ae:	9101      	str	r1, [sp, #4]
 80068b0:	f000 f880 	bl	80069b4 <__sinit>
 80068b4:	9901      	ldr	r1, [sp, #4]
 80068b6:	e7ef      	b.n	8006898 <_fflush_r+0xc>

080068b8 <_cleanup_r>:
 80068b8:	4901      	ldr	r1, [pc, #4]	; (80068c0 <_cleanup_r+0x8>)
 80068ba:	f000 bb3d 	b.w	8006f38 <_fwalk_reent>
 80068be:	bf00      	nop
 80068c0:	08008459 	.word	0x08008459

080068c4 <__sinit.part.1>:
 80068c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c8:	4b35      	ldr	r3, [pc, #212]	; (80069a0 <__sinit.part.1+0xdc>)
 80068ca:	6845      	ldr	r5, [r0, #4]
 80068cc:	63c3      	str	r3, [r0, #60]	; 0x3c
 80068ce:	2400      	movs	r4, #0
 80068d0:	4607      	mov	r7, r0
 80068d2:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 80068d6:	2304      	movs	r3, #4
 80068d8:	2103      	movs	r1, #3
 80068da:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 80068de:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 80068e2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 80068e6:	b083      	sub	sp, #12
 80068e8:	602c      	str	r4, [r5, #0]
 80068ea:	606c      	str	r4, [r5, #4]
 80068ec:	60ac      	str	r4, [r5, #8]
 80068ee:	666c      	str	r4, [r5, #100]	; 0x64
 80068f0:	81ec      	strh	r4, [r5, #14]
 80068f2:	612c      	str	r4, [r5, #16]
 80068f4:	616c      	str	r4, [r5, #20]
 80068f6:	61ac      	str	r4, [r5, #24]
 80068f8:	81ab      	strh	r3, [r5, #12]
 80068fa:	4621      	mov	r1, r4
 80068fc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8006900:	2208      	movs	r2, #8
 8006902:	f7fb fe0f 	bl	8002524 <memset>
 8006906:	68be      	ldr	r6, [r7, #8]
 8006908:	f8df b098 	ldr.w	fp, [pc, #152]	; 80069a4 <__sinit.part.1+0xe0>
 800690c:	f8df a098 	ldr.w	sl, [pc, #152]	; 80069a8 <__sinit.part.1+0xe4>
 8006910:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80069ac <__sinit.part.1+0xe8>
 8006914:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80069b0 <__sinit.part.1+0xec>
 8006918:	f8c5 b020 	str.w	fp, [r5, #32]
 800691c:	2301      	movs	r3, #1
 800691e:	2209      	movs	r2, #9
 8006920:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8006924:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8006928:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800692c:	61ed      	str	r5, [r5, #28]
 800692e:	4621      	mov	r1, r4
 8006930:	81f3      	strh	r3, [r6, #14]
 8006932:	81b2      	strh	r2, [r6, #12]
 8006934:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8006938:	6034      	str	r4, [r6, #0]
 800693a:	6074      	str	r4, [r6, #4]
 800693c:	60b4      	str	r4, [r6, #8]
 800693e:	6674      	str	r4, [r6, #100]	; 0x64
 8006940:	6134      	str	r4, [r6, #16]
 8006942:	6174      	str	r4, [r6, #20]
 8006944:	61b4      	str	r4, [r6, #24]
 8006946:	2208      	movs	r2, #8
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	f7fb fdeb 	bl	8002524 <memset>
 800694e:	68fd      	ldr	r5, [r7, #12]
 8006950:	61f6      	str	r6, [r6, #28]
 8006952:	2012      	movs	r0, #18
 8006954:	2202      	movs	r2, #2
 8006956:	f8c6 b020 	str.w	fp, [r6, #32]
 800695a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 800695e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8006962:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8006966:	4621      	mov	r1, r4
 8006968:	81a8      	strh	r0, [r5, #12]
 800696a:	81ea      	strh	r2, [r5, #14]
 800696c:	602c      	str	r4, [r5, #0]
 800696e:	606c      	str	r4, [r5, #4]
 8006970:	60ac      	str	r4, [r5, #8]
 8006972:	666c      	str	r4, [r5, #100]	; 0x64
 8006974:	612c      	str	r4, [r5, #16]
 8006976:	616c      	str	r4, [r5, #20]
 8006978:	61ac      	str	r4, [r5, #24]
 800697a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800697e:	2208      	movs	r2, #8
 8006980:	f7fb fdd0 	bl	8002524 <memset>
 8006984:	9b01      	ldr	r3, [sp, #4]
 8006986:	61ed      	str	r5, [r5, #28]
 8006988:	f8c5 b020 	str.w	fp, [r5, #32]
 800698c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8006990:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8006994:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8006998:	63bb      	str	r3, [r7, #56]	; 0x38
 800699a:	b003      	add	sp, #12
 800699c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a0:	080068b9 	.word	0x080068b9
 80069a4:	08008195 	.word	0x08008195
 80069a8:	080081b9 	.word	0x080081b9
 80069ac:	080081f5 	.word	0x080081f5
 80069b0:	08008215 	.word	0x08008215

080069b4 <__sinit>:
 80069b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80069b6:	b103      	cbz	r3, 80069ba <__sinit+0x6>
 80069b8:	4770      	bx	lr
 80069ba:	f7ff bf83 	b.w	80068c4 <__sinit.part.1>
 80069be:	bf00      	nop

080069c0 <__sfp_lock_acquire>:
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop

080069c4 <__sfp_lock_release>:
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop

080069c8 <_malloc_trim_r>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	4f23      	ldr	r7, [pc, #140]	; (8006a58 <_malloc_trim_r+0x90>)
 80069cc:	460c      	mov	r4, r1
 80069ce:	4606      	mov	r6, r0
 80069d0:	f000 feca 	bl	8007768 <__malloc_lock>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	685d      	ldr	r5, [r3, #4]
 80069d8:	f025 0503 	bic.w	r5, r5, #3
 80069dc:	1b29      	subs	r1, r5, r4
 80069de:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 80069e2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 80069e6:	f021 010f 	bic.w	r1, r1, #15
 80069ea:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 80069ee:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80069f2:	db07      	blt.n	8006a04 <_malloc_trim_r+0x3c>
 80069f4:	2100      	movs	r1, #0
 80069f6:	4630      	mov	r0, r6
 80069f8:	f001 fbba 	bl	8008170 <_sbrk_r>
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	442b      	add	r3, r5
 8006a00:	4298      	cmp	r0, r3
 8006a02:	d004      	beq.n	8006a0e <_malloc_trim_r+0x46>
 8006a04:	4630      	mov	r0, r6
 8006a06:	f000 feb1 	bl	800776c <__malloc_unlock>
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a0e:	4261      	negs	r1, r4
 8006a10:	4630      	mov	r0, r6
 8006a12:	f001 fbad 	bl	8008170 <_sbrk_r>
 8006a16:	3001      	adds	r0, #1
 8006a18:	d00d      	beq.n	8006a36 <_malloc_trim_r+0x6e>
 8006a1a:	4b10      	ldr	r3, [pc, #64]	; (8006a5c <_malloc_trim_r+0x94>)
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	6819      	ldr	r1, [r3, #0]
 8006a20:	1b2d      	subs	r5, r5, r4
 8006a22:	f045 0501 	orr.w	r5, r5, #1
 8006a26:	4630      	mov	r0, r6
 8006a28:	1b09      	subs	r1, r1, r4
 8006a2a:	6055      	str	r5, [r2, #4]
 8006a2c:	6019      	str	r1, [r3, #0]
 8006a2e:	f000 fe9d 	bl	800776c <__malloc_unlock>
 8006a32:	2001      	movs	r0, #1
 8006a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a36:	2100      	movs	r1, #0
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f001 fb99 	bl	8008170 <_sbrk_r>
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	1a83      	subs	r3, r0, r2
 8006a42:	2b0f      	cmp	r3, #15
 8006a44:	ddde      	ble.n	8006a04 <_malloc_trim_r+0x3c>
 8006a46:	4c06      	ldr	r4, [pc, #24]	; (8006a60 <_malloc_trim_r+0x98>)
 8006a48:	4904      	ldr	r1, [pc, #16]	; (8006a5c <_malloc_trim_r+0x94>)
 8006a4a:	6824      	ldr	r4, [r4, #0]
 8006a4c:	f043 0301 	orr.w	r3, r3, #1
 8006a50:	1b00      	subs	r0, r0, r4
 8006a52:	6053      	str	r3, [r2, #4]
 8006a54:	6008      	str	r0, [r1, #0]
 8006a56:	e7d5      	b.n	8006a04 <_malloc_trim_r+0x3c>
 8006a58:	20000464 	.word	0x20000464
 8006a5c:	20000a4c 	.word	0x20000a4c
 8006a60:	20000870 	.word	0x20000870

08006a64 <_free_r>:
 8006a64:	2900      	cmp	r1, #0
 8006a66:	d045      	beq.n	8006af4 <_free_r+0x90>
 8006a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6c:	460d      	mov	r5, r1
 8006a6e:	4680      	mov	r8, r0
 8006a70:	f000 fe7a 	bl	8007768 <__malloc_lock>
 8006a74:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8006a78:	496a      	ldr	r1, [pc, #424]	; (8006c24 <_free_r+0x1c0>)
 8006a7a:	f027 0301 	bic.w	r3, r7, #1
 8006a7e:	f1a5 0408 	sub.w	r4, r5, #8
 8006a82:	18e2      	adds	r2, r4, r3
 8006a84:	688e      	ldr	r6, [r1, #8]
 8006a86:	6850      	ldr	r0, [r2, #4]
 8006a88:	42b2      	cmp	r2, r6
 8006a8a:	f020 0003 	bic.w	r0, r0, #3
 8006a8e:	d062      	beq.n	8006b56 <_free_r+0xf2>
 8006a90:	07fe      	lsls	r6, r7, #31
 8006a92:	6050      	str	r0, [r2, #4]
 8006a94:	d40b      	bmi.n	8006aae <_free_r+0x4a>
 8006a96:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8006a9a:	1be4      	subs	r4, r4, r7
 8006a9c:	f101 0e08 	add.w	lr, r1, #8
 8006aa0:	68a5      	ldr	r5, [r4, #8]
 8006aa2:	4575      	cmp	r5, lr
 8006aa4:	443b      	add	r3, r7
 8006aa6:	d06f      	beq.n	8006b88 <_free_r+0x124>
 8006aa8:	68e7      	ldr	r7, [r4, #12]
 8006aaa:	60ef      	str	r7, [r5, #12]
 8006aac:	60bd      	str	r5, [r7, #8]
 8006aae:	1815      	adds	r5, r2, r0
 8006ab0:	686d      	ldr	r5, [r5, #4]
 8006ab2:	07ed      	lsls	r5, r5, #31
 8006ab4:	d542      	bpl.n	8006b3c <_free_r+0xd8>
 8006ab6:	f043 0201 	orr.w	r2, r3, #1
 8006aba:	6062      	str	r2, [r4, #4]
 8006abc:	50e3      	str	r3, [r4, r3]
 8006abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac2:	d218      	bcs.n	8006af6 <_free_r+0x92>
 8006ac4:	08db      	lsrs	r3, r3, #3
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	684d      	ldr	r5, [r1, #4]
 8006aca:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 8006ace:	60a7      	str	r7, [r4, #8]
 8006ad0:	2001      	movs	r0, #1
 8006ad2:	109b      	asrs	r3, r3, #2
 8006ad4:	fa00 f303 	lsl.w	r3, r0, r3
 8006ad8:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 8006adc:	431d      	orrs	r5, r3
 8006ade:	3808      	subs	r0, #8
 8006ae0:	60e0      	str	r0, [r4, #12]
 8006ae2:	604d      	str	r5, [r1, #4]
 8006ae4:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 8006ae8:	60fc      	str	r4, [r7, #12]
 8006aea:	4640      	mov	r0, r8
 8006aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006af0:	f000 be3c 	b.w	800776c <__malloc_unlock>
 8006af4:	4770      	bx	lr
 8006af6:	0a5a      	lsrs	r2, r3, #9
 8006af8:	2a04      	cmp	r2, #4
 8006afa:	d853      	bhi.n	8006ba4 <_free_r+0x140>
 8006afc:	099a      	lsrs	r2, r3, #6
 8006afe:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8006b02:	007f      	lsls	r7, r7, #1
 8006b04:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8006b08:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8006b0c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8006b10:	4944      	ldr	r1, [pc, #272]	; (8006c24 <_free_r+0x1c0>)
 8006b12:	3808      	subs	r0, #8
 8006b14:	4290      	cmp	r0, r2
 8006b16:	d04d      	beq.n	8006bb4 <_free_r+0x150>
 8006b18:	6851      	ldr	r1, [r2, #4]
 8006b1a:	f021 0103 	bic.w	r1, r1, #3
 8006b1e:	428b      	cmp	r3, r1
 8006b20:	d202      	bcs.n	8006b28 <_free_r+0xc4>
 8006b22:	6892      	ldr	r2, [r2, #8]
 8006b24:	4290      	cmp	r0, r2
 8006b26:	d1f7      	bne.n	8006b18 <_free_r+0xb4>
 8006b28:	68d0      	ldr	r0, [r2, #12]
 8006b2a:	60e0      	str	r0, [r4, #12]
 8006b2c:	60a2      	str	r2, [r4, #8]
 8006b2e:	6084      	str	r4, [r0, #8]
 8006b30:	60d4      	str	r4, [r2, #12]
 8006b32:	4640      	mov	r0, r8
 8006b34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b38:	f000 be18 	b.w	800776c <__malloc_unlock>
 8006b3c:	6895      	ldr	r5, [r2, #8]
 8006b3e:	4f3a      	ldr	r7, [pc, #232]	; (8006c28 <_free_r+0x1c4>)
 8006b40:	42bd      	cmp	r5, r7
 8006b42:	4403      	add	r3, r0
 8006b44:	d03f      	beq.n	8006bc6 <_free_r+0x162>
 8006b46:	68d0      	ldr	r0, [r2, #12]
 8006b48:	60e8      	str	r0, [r5, #12]
 8006b4a:	f043 0201 	orr.w	r2, r3, #1
 8006b4e:	6085      	str	r5, [r0, #8]
 8006b50:	6062      	str	r2, [r4, #4]
 8006b52:	50e3      	str	r3, [r4, r3]
 8006b54:	e7b3      	b.n	8006abe <_free_r+0x5a>
 8006b56:	07ff      	lsls	r7, r7, #31
 8006b58:	4403      	add	r3, r0
 8006b5a:	d407      	bmi.n	8006b6c <_free_r+0x108>
 8006b5c:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8006b60:	1aa4      	subs	r4, r4, r2
 8006b62:	4413      	add	r3, r2
 8006b64:	68a0      	ldr	r0, [r4, #8]
 8006b66:	68e2      	ldr	r2, [r4, #12]
 8006b68:	60c2      	str	r2, [r0, #12]
 8006b6a:	6090      	str	r0, [r2, #8]
 8006b6c:	4a2f      	ldr	r2, [pc, #188]	; (8006c2c <_free_r+0x1c8>)
 8006b6e:	6812      	ldr	r2, [r2, #0]
 8006b70:	f043 0001 	orr.w	r0, r3, #1
 8006b74:	4293      	cmp	r3, r2
 8006b76:	6060      	str	r0, [r4, #4]
 8006b78:	608c      	str	r4, [r1, #8]
 8006b7a:	d3b6      	bcc.n	8006aea <_free_r+0x86>
 8006b7c:	4b2c      	ldr	r3, [pc, #176]	; (8006c30 <_free_r+0x1cc>)
 8006b7e:	4640      	mov	r0, r8
 8006b80:	6819      	ldr	r1, [r3, #0]
 8006b82:	f7ff ff21 	bl	80069c8 <_malloc_trim_r>
 8006b86:	e7b0      	b.n	8006aea <_free_r+0x86>
 8006b88:	1811      	adds	r1, r2, r0
 8006b8a:	6849      	ldr	r1, [r1, #4]
 8006b8c:	07c9      	lsls	r1, r1, #31
 8006b8e:	d444      	bmi.n	8006c1a <_free_r+0x1b6>
 8006b90:	6891      	ldr	r1, [r2, #8]
 8006b92:	68d2      	ldr	r2, [r2, #12]
 8006b94:	60ca      	str	r2, [r1, #12]
 8006b96:	4403      	add	r3, r0
 8006b98:	f043 0001 	orr.w	r0, r3, #1
 8006b9c:	6091      	str	r1, [r2, #8]
 8006b9e:	6060      	str	r0, [r4, #4]
 8006ba0:	50e3      	str	r3, [r4, r3]
 8006ba2:	e7a2      	b.n	8006aea <_free_r+0x86>
 8006ba4:	2a14      	cmp	r2, #20
 8006ba6:	d817      	bhi.n	8006bd8 <_free_r+0x174>
 8006ba8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 8006bac:	007f      	lsls	r7, r7, #1
 8006bae:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8006bb2:	e7a9      	b.n	8006b08 <_free_r+0xa4>
 8006bb4:	10aa      	asrs	r2, r5, #2
 8006bb6:	684b      	ldr	r3, [r1, #4]
 8006bb8:	2501      	movs	r5, #1
 8006bba:	fa05 f202 	lsl.w	r2, r5, r2
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	604b      	str	r3, [r1, #4]
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	e7b1      	b.n	8006b2a <_free_r+0xc6>
 8006bc6:	f043 0201 	orr.w	r2, r3, #1
 8006bca:	614c      	str	r4, [r1, #20]
 8006bcc:	610c      	str	r4, [r1, #16]
 8006bce:	60e5      	str	r5, [r4, #12]
 8006bd0:	60a5      	str	r5, [r4, #8]
 8006bd2:	6062      	str	r2, [r4, #4]
 8006bd4:	50e3      	str	r3, [r4, r3]
 8006bd6:	e788      	b.n	8006aea <_free_r+0x86>
 8006bd8:	2a54      	cmp	r2, #84	; 0x54
 8006bda:	d806      	bhi.n	8006bea <_free_r+0x186>
 8006bdc:	0b1a      	lsrs	r2, r3, #12
 8006bde:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8006be2:	007f      	lsls	r7, r7, #1
 8006be4:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 8006be8:	e78e      	b.n	8006b08 <_free_r+0xa4>
 8006bea:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006bee:	d806      	bhi.n	8006bfe <_free_r+0x19a>
 8006bf0:	0bda      	lsrs	r2, r3, #15
 8006bf2:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8006bf6:	007f      	lsls	r7, r7, #1
 8006bf8:	f102 0577 	add.w	r5, r2, #119	; 0x77
 8006bfc:	e784      	b.n	8006b08 <_free_r+0xa4>
 8006bfe:	f240 5054 	movw	r0, #1364	; 0x554
 8006c02:	4282      	cmp	r2, r0
 8006c04:	d806      	bhi.n	8006c14 <_free_r+0x1b0>
 8006c06:	0c9a      	lsrs	r2, r3, #18
 8006c08:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8006c0c:	007f      	lsls	r7, r7, #1
 8006c0e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 8006c12:	e779      	b.n	8006b08 <_free_r+0xa4>
 8006c14:	27fe      	movs	r7, #254	; 0xfe
 8006c16:	257e      	movs	r5, #126	; 0x7e
 8006c18:	e776      	b.n	8006b08 <_free_r+0xa4>
 8006c1a:	f043 0201 	orr.w	r2, r3, #1
 8006c1e:	6062      	str	r2, [r4, #4]
 8006c20:	50e3      	str	r3, [r4, r3]
 8006c22:	e762      	b.n	8006aea <_free_r+0x86>
 8006c24:	20000464 	.word	0x20000464
 8006c28:	2000046c 	.word	0x2000046c
 8006c2c:	2000086c 	.word	0x2000086c
 8006c30:	20000a48 	.word	0x20000a48

08006c34 <__sfvwrite_r>:
 8006c34:	6893      	ldr	r3, [r2, #8]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d076      	beq.n	8006d28 <__sfvwrite_r+0xf4>
 8006c3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3e:	898b      	ldrh	r3, [r1, #12]
 8006c40:	b085      	sub	sp, #20
 8006c42:	460c      	mov	r4, r1
 8006c44:	0719      	lsls	r1, r3, #28
 8006c46:	9001      	str	r0, [sp, #4]
 8006c48:	4616      	mov	r6, r2
 8006c4a:	d529      	bpl.n	8006ca0 <__sfvwrite_r+0x6c>
 8006c4c:	6922      	ldr	r2, [r4, #16]
 8006c4e:	b33a      	cbz	r2, 8006ca0 <__sfvwrite_r+0x6c>
 8006c50:	f003 0802 	and.w	r8, r3, #2
 8006c54:	fa1f f088 	uxth.w	r0, r8
 8006c58:	6835      	ldr	r5, [r6, #0]
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d02f      	beq.n	8006cbe <__sfvwrite_r+0x8a>
 8006c5e:	f04f 0900 	mov.w	r9, #0
 8006c62:	4fb4      	ldr	r7, [pc, #720]	; (8006f34 <__sfvwrite_r+0x300>)
 8006c64:	46c8      	mov	r8, r9
 8006c66:	46b2      	mov	sl, r6
 8006c68:	45b8      	cmp	r8, r7
 8006c6a:	4643      	mov	r3, r8
 8006c6c:	464a      	mov	r2, r9
 8006c6e:	bf28      	it	cs
 8006c70:	463b      	movcs	r3, r7
 8006c72:	9801      	ldr	r0, [sp, #4]
 8006c74:	f1b8 0f00 	cmp.w	r8, #0
 8006c78:	d050      	beq.n	8006d1c <__sfvwrite_r+0xe8>
 8006c7a:	69e1      	ldr	r1, [r4, #28]
 8006c7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c7e:	47b0      	blx	r6
 8006c80:	2800      	cmp	r0, #0
 8006c82:	dd71      	ble.n	8006d68 <__sfvwrite_r+0x134>
 8006c84:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006c88:	1a1b      	subs	r3, r3, r0
 8006c8a:	4481      	add	r9, r0
 8006c8c:	ebc0 0808 	rsb	r8, r0, r8
 8006c90:	f8ca 3008 	str.w	r3, [sl, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1e7      	bne.n	8006c68 <__sfvwrite_r+0x34>
 8006c98:	2000      	movs	r0, #0
 8006c9a:	b005      	add	sp, #20
 8006c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	9801      	ldr	r0, [sp, #4]
 8006ca4:	f7fe fd40 	bl	8005728 <__swsetup_r>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	f040 813a 	bne.w	8006f22 <__sfvwrite_r+0x2ee>
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	6835      	ldr	r5, [r6, #0]
 8006cb2:	f003 0802 	and.w	r8, r3, #2
 8006cb6:	fa1f f088 	uxth.w	r0, r8
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d1cf      	bne.n	8006c5e <__sfvwrite_r+0x2a>
 8006cbe:	f013 0901 	ands.w	r9, r3, #1
 8006cc2:	d15b      	bne.n	8006d7c <__sfvwrite_r+0x148>
 8006cc4:	464f      	mov	r7, r9
 8006cc6:	9602      	str	r6, [sp, #8]
 8006cc8:	b31f      	cbz	r7, 8006d12 <__sfvwrite_r+0xde>
 8006cca:	059a      	lsls	r2, r3, #22
 8006ccc:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8006cd0:	d52c      	bpl.n	8006d2c <__sfvwrite_r+0xf8>
 8006cd2:	4547      	cmp	r7, r8
 8006cd4:	46c2      	mov	sl, r8
 8006cd6:	f0c0 80a4 	bcc.w	8006e22 <__sfvwrite_r+0x1ee>
 8006cda:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006cde:	f040 80b1 	bne.w	8006e44 <__sfvwrite_r+0x210>
 8006ce2:	6820      	ldr	r0, [r4, #0]
 8006ce4:	4652      	mov	r2, sl
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	f000 fcda 	bl	80076a0 <memmove>
 8006cec:	68a0      	ldr	r0, [r4, #8]
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	ebc8 0000 	rsb	r0, r8, r0
 8006cf4:	4453      	add	r3, sl
 8006cf6:	60a0      	str	r0, [r4, #8]
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	9a02      	ldr	r2, [sp, #8]
 8006cfe:	6893      	ldr	r3, [r2, #8]
 8006d00:	1a1b      	subs	r3, r3, r0
 8006d02:	4481      	add	r9, r0
 8006d04:	1a3f      	subs	r7, r7, r0
 8006d06:	6093      	str	r3, [r2, #8]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0c5      	beq.n	8006c98 <__sfvwrite_r+0x64>
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	2f00      	cmp	r7, #0
 8006d10:	d1db      	bne.n	8006cca <__sfvwrite_r+0x96>
 8006d12:	f8d5 9000 	ldr.w	r9, [r5]
 8006d16:	686f      	ldr	r7, [r5, #4]
 8006d18:	3508      	adds	r5, #8
 8006d1a:	e7d5      	b.n	8006cc8 <__sfvwrite_r+0x94>
 8006d1c:	f8d5 9000 	ldr.w	r9, [r5]
 8006d20:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006d24:	3508      	adds	r5, #8
 8006d26:	e79f      	b.n	8006c68 <__sfvwrite_r+0x34>
 8006d28:	2000      	movs	r0, #0
 8006d2a:	4770      	bx	lr
 8006d2c:	6820      	ldr	r0, [r4, #0]
 8006d2e:	6923      	ldr	r3, [r4, #16]
 8006d30:	4298      	cmp	r0, r3
 8006d32:	d803      	bhi.n	8006d3c <__sfvwrite_r+0x108>
 8006d34:	6961      	ldr	r1, [r4, #20]
 8006d36:	428f      	cmp	r7, r1
 8006d38:	f080 80b7 	bcs.w	8006eaa <__sfvwrite_r+0x276>
 8006d3c:	45b8      	cmp	r8, r7
 8006d3e:	bf28      	it	cs
 8006d40:	46b8      	movcs	r8, r7
 8006d42:	4642      	mov	r2, r8
 8006d44:	4649      	mov	r1, r9
 8006d46:	f000 fcab 	bl	80076a0 <memmove>
 8006d4a:	68a3      	ldr	r3, [r4, #8]
 8006d4c:	6822      	ldr	r2, [r4, #0]
 8006d4e:	ebc8 0303 	rsb	r3, r8, r3
 8006d52:	4442      	add	r2, r8
 8006d54:	60a3      	str	r3, [r4, #8]
 8006d56:	6022      	str	r2, [r4, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d149      	bne.n	8006df0 <__sfvwrite_r+0x1bc>
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	9801      	ldr	r0, [sp, #4]
 8006d60:	f7ff fd94 	bl	800688c <_fflush_r>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	d043      	beq.n	8006df0 <__sfvwrite_r+0x1bc>
 8006d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	b005      	add	sp, #20
 8006d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7c:	4680      	mov	r8, r0
 8006d7e:	9002      	str	r0, [sp, #8]
 8006d80:	4682      	mov	sl, r0
 8006d82:	4681      	mov	r9, r0
 8006d84:	f1b9 0f00 	cmp.w	r9, #0
 8006d88:	d02a      	beq.n	8006de0 <__sfvwrite_r+0x1ac>
 8006d8a:	9b02      	ldr	r3, [sp, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d04c      	beq.n	8006e2a <__sfvwrite_r+0x1f6>
 8006d90:	6820      	ldr	r0, [r4, #0]
 8006d92:	6923      	ldr	r3, [r4, #16]
 8006d94:	6962      	ldr	r2, [r4, #20]
 8006d96:	45c8      	cmp	r8, r9
 8006d98:	46c3      	mov	fp, r8
 8006d9a:	bf28      	it	cs
 8006d9c:	46cb      	movcs	fp, r9
 8006d9e:	4298      	cmp	r0, r3
 8006da0:	465f      	mov	r7, fp
 8006da2:	d904      	bls.n	8006dae <__sfvwrite_r+0x17a>
 8006da4:	68a3      	ldr	r3, [r4, #8]
 8006da6:	4413      	add	r3, r2
 8006da8:	459b      	cmp	fp, r3
 8006daa:	f300 8090 	bgt.w	8006ece <__sfvwrite_r+0x29a>
 8006dae:	4593      	cmp	fp, r2
 8006db0:	db20      	blt.n	8006df4 <__sfvwrite_r+0x1c0>
 8006db2:	4613      	mov	r3, r2
 8006db4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006db6:	69e1      	ldr	r1, [r4, #28]
 8006db8:	9801      	ldr	r0, [sp, #4]
 8006dba:	4652      	mov	r2, sl
 8006dbc:	47b8      	blx	r7
 8006dbe:	1e07      	subs	r7, r0, #0
 8006dc0:	ddd2      	ble.n	8006d68 <__sfvwrite_r+0x134>
 8006dc2:	ebb8 0807 	subs.w	r8, r8, r7
 8006dc6:	d023      	beq.n	8006e10 <__sfvwrite_r+0x1dc>
 8006dc8:	68b3      	ldr	r3, [r6, #8]
 8006dca:	1bdb      	subs	r3, r3, r7
 8006dcc:	44ba      	add	sl, r7
 8006dce:	ebc7 0909 	rsb	r9, r7, r9
 8006dd2:	60b3      	str	r3, [r6, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f43f af5f 	beq.w	8006c98 <__sfvwrite_r+0x64>
 8006dda:	f1b9 0f00 	cmp.w	r9, #0
 8006dde:	d1d4      	bne.n	8006d8a <__sfvwrite_r+0x156>
 8006de0:	2300      	movs	r3, #0
 8006de2:	f8d5 a000 	ldr.w	sl, [r5]
 8006de6:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8006dea:	9302      	str	r3, [sp, #8]
 8006dec:	3508      	adds	r5, #8
 8006dee:	e7c9      	b.n	8006d84 <__sfvwrite_r+0x150>
 8006df0:	4640      	mov	r0, r8
 8006df2:	e783      	b.n	8006cfc <__sfvwrite_r+0xc8>
 8006df4:	465a      	mov	r2, fp
 8006df6:	4651      	mov	r1, sl
 8006df8:	f000 fc52 	bl	80076a0 <memmove>
 8006dfc:	68a2      	ldr	r2, [r4, #8]
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	ebcb 0202 	rsb	r2, fp, r2
 8006e04:	445b      	add	r3, fp
 8006e06:	ebb8 0807 	subs.w	r8, r8, r7
 8006e0a:	60a2      	str	r2, [r4, #8]
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	d1db      	bne.n	8006dc8 <__sfvwrite_r+0x194>
 8006e10:	4621      	mov	r1, r4
 8006e12:	9801      	ldr	r0, [sp, #4]
 8006e14:	f7ff fd3a 	bl	800688c <_fflush_r>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d1a5      	bne.n	8006d68 <__sfvwrite_r+0x134>
 8006e1c:	f8cd 8008 	str.w	r8, [sp, #8]
 8006e20:	e7d2      	b.n	8006dc8 <__sfvwrite_r+0x194>
 8006e22:	6820      	ldr	r0, [r4, #0]
 8006e24:	46b8      	mov	r8, r7
 8006e26:	46ba      	mov	sl, r7
 8006e28:	e75c      	b.n	8006ce4 <__sfvwrite_r+0xb0>
 8006e2a:	464a      	mov	r2, r9
 8006e2c:	210a      	movs	r1, #10
 8006e2e:	4650      	mov	r0, sl
 8006e30:	f000 fbe6 	bl	8007600 <memchr>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d06f      	beq.n	8006f18 <__sfvwrite_r+0x2e4>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	ebca 0800 	rsb	r8, sl, r0
 8006e40:	9302      	str	r3, [sp, #8]
 8006e42:	e7a5      	b.n	8006d90 <__sfvwrite_r+0x15c>
 8006e44:	6962      	ldr	r2, [r4, #20]
 8006e46:	6820      	ldr	r0, [r4, #0]
 8006e48:	6921      	ldr	r1, [r4, #16]
 8006e4a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 8006e4e:	ebc1 0a00 	rsb	sl, r1, r0
 8006e52:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8006e56:	f10a 0001 	add.w	r0, sl, #1
 8006e5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006e5e:	4438      	add	r0, r7
 8006e60:	4540      	cmp	r0, r8
 8006e62:	4642      	mov	r2, r8
 8006e64:	bf84      	itt	hi
 8006e66:	4680      	movhi	r8, r0
 8006e68:	4642      	movhi	r2, r8
 8006e6a:	055b      	lsls	r3, r3, #21
 8006e6c:	d542      	bpl.n	8006ef4 <__sfvwrite_r+0x2c0>
 8006e6e:	4611      	mov	r1, r2
 8006e70:	9801      	ldr	r0, [sp, #4]
 8006e72:	f000 f90d 	bl	8007090 <_malloc_r>
 8006e76:	4683      	mov	fp, r0
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d055      	beq.n	8006f28 <__sfvwrite_r+0x2f4>
 8006e7c:	4652      	mov	r2, sl
 8006e7e:	6921      	ldr	r1, [r4, #16]
 8006e80:	f7fb fab6 	bl	80023f0 <memcpy>
 8006e84:	89a3      	ldrh	r3, [r4, #12]
 8006e86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8e:	81a3      	strh	r3, [r4, #12]
 8006e90:	ebca 0308 	rsb	r3, sl, r8
 8006e94:	eb0b 000a 	add.w	r0, fp, sl
 8006e98:	f8c4 8014 	str.w	r8, [r4, #20]
 8006e9c:	f8c4 b010 	str.w	fp, [r4, #16]
 8006ea0:	6020      	str	r0, [r4, #0]
 8006ea2:	60a3      	str	r3, [r4, #8]
 8006ea4:	46b8      	mov	r8, r7
 8006ea6:	46ba      	mov	sl, r7
 8006ea8:	e71c      	b.n	8006ce4 <__sfvwrite_r+0xb0>
 8006eaa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006eae:	42bb      	cmp	r3, r7
 8006eb0:	bf28      	it	cs
 8006eb2:	463b      	movcs	r3, r7
 8006eb4:	464a      	mov	r2, r9
 8006eb6:	fb93 f3f1 	sdiv	r3, r3, r1
 8006eba:	9801      	ldr	r0, [sp, #4]
 8006ebc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ebe:	fb01 f303 	mul.w	r3, r1, r3
 8006ec2:	69e1      	ldr	r1, [r4, #28]
 8006ec4:	47b0      	blx	r6
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f73f af18 	bgt.w	8006cfc <__sfvwrite_r+0xc8>
 8006ecc:	e74c      	b.n	8006d68 <__sfvwrite_r+0x134>
 8006ece:	461a      	mov	r2, r3
 8006ed0:	4651      	mov	r1, sl
 8006ed2:	9303      	str	r3, [sp, #12]
 8006ed4:	f000 fbe4 	bl	80076a0 <memmove>
 8006ed8:	6822      	ldr	r2, [r4, #0]
 8006eda:	9b03      	ldr	r3, [sp, #12]
 8006edc:	9801      	ldr	r0, [sp, #4]
 8006ede:	441a      	add	r2, r3
 8006ee0:	6022      	str	r2, [r4, #0]
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	f7ff fcd2 	bl	800688c <_fflush_r>
 8006ee8:	9b03      	ldr	r3, [sp, #12]
 8006eea:	2800      	cmp	r0, #0
 8006eec:	f47f af3c 	bne.w	8006d68 <__sfvwrite_r+0x134>
 8006ef0:	461f      	mov	r7, r3
 8006ef2:	e766      	b.n	8006dc2 <__sfvwrite_r+0x18e>
 8006ef4:	9801      	ldr	r0, [sp, #4]
 8006ef6:	f000 ff4b 	bl	8007d90 <_realloc_r>
 8006efa:	4683      	mov	fp, r0
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d1c7      	bne.n	8006e90 <__sfvwrite_r+0x25c>
 8006f00:	9d01      	ldr	r5, [sp, #4]
 8006f02:	6921      	ldr	r1, [r4, #16]
 8006f04:	4628      	mov	r0, r5
 8006f06:	f7ff fdad 	bl	8006a64 <_free_r>
 8006f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f0e:	220c      	movs	r2, #12
 8006f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f14:	602a      	str	r2, [r5, #0]
 8006f16:	e729      	b.n	8006d6c <__sfvwrite_r+0x138>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	f109 0801 	add.w	r8, r9, #1
 8006f1e:	9302      	str	r3, [sp, #8]
 8006f20:	e736      	b.n	8006d90 <__sfvwrite_r+0x15c>
 8006f22:	f04f 30ff 	mov.w	r0, #4294967295
 8006f26:	e6b8      	b.n	8006c9a <__sfvwrite_r+0x66>
 8006f28:	9a01      	ldr	r2, [sp, #4]
 8006f2a:	230c      	movs	r3, #12
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f32:	e71b      	b.n	8006d6c <__sfvwrite_r+0x138>
 8006f34:	7ffffc00 	.word	0x7ffffc00

08006f38 <_fwalk_reent>:
 8006f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f3c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8006f40:	d01f      	beq.n	8006f82 <_fwalk_reent+0x4a>
 8006f42:	4688      	mov	r8, r1
 8006f44:	4606      	mov	r6, r0
 8006f46:	f04f 0900 	mov.w	r9, #0
 8006f4a:	687d      	ldr	r5, [r7, #4]
 8006f4c:	68bc      	ldr	r4, [r7, #8]
 8006f4e:	3d01      	subs	r5, #1
 8006f50:	d411      	bmi.n	8006f76 <_fwalk_reent+0x3e>
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	f105 35ff 	add.w	r5, r5, #4294967295
 8006f5a:	d908      	bls.n	8006f6e <_fwalk_reent+0x36>
 8006f5c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8006f60:	3301      	adds	r3, #1
 8006f62:	4621      	mov	r1, r4
 8006f64:	4630      	mov	r0, r6
 8006f66:	d002      	beq.n	8006f6e <_fwalk_reent+0x36>
 8006f68:	47c0      	blx	r8
 8006f6a:	ea49 0900 	orr.w	r9, r9, r0
 8006f6e:	1c6b      	adds	r3, r5, #1
 8006f70:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8006f74:	d1ed      	bne.n	8006f52 <_fwalk_reent+0x1a>
 8006f76:	683f      	ldr	r7, [r7, #0]
 8006f78:	2f00      	cmp	r7, #0
 8006f7a:	d1e6      	bne.n	8006f4a <_fwalk_reent+0x12>
 8006f7c:	4648      	mov	r0, r9
 8006f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f82:	46b9      	mov	r9, r7
 8006f84:	4648      	mov	r0, r9
 8006f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f8a:	bf00      	nop

08006f8c <_localeconv_r>:
 8006f8c:	4a04      	ldr	r2, [pc, #16]	; (8006fa0 <_localeconv_r+0x14>)
 8006f8e:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <_localeconv_r+0x18>)
 8006f90:	6812      	ldr	r2, [r2, #0]
 8006f92:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8006f94:	2800      	cmp	r0, #0
 8006f96:	bf08      	it	eq
 8006f98:	4618      	moveq	r0, r3
 8006f9a:	30f0      	adds	r0, #240	; 0xf0
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	20000460 	.word	0x20000460
 8006fa4:	20000874 	.word	0x20000874

08006fa8 <__swhatbuf_r>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	460d      	mov	r5, r1
 8006fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb0:	2900      	cmp	r1, #0
 8006fb2:	b090      	sub	sp, #64	; 0x40
 8006fb4:	4614      	mov	r4, r2
 8006fb6:	461e      	mov	r6, r3
 8006fb8:	db14      	blt.n	8006fe4 <__swhatbuf_r+0x3c>
 8006fba:	aa01      	add	r2, sp, #4
 8006fbc:	f001 faee 	bl	800859c <_fstat_r>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	db0f      	blt.n	8006fe4 <__swhatbuf_r+0x3c>
 8006fc4:	9a02      	ldr	r2, [sp, #8]
 8006fc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fca:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8006fce:	fab2 f282 	clz	r2, r2
 8006fd2:	0952      	lsrs	r2, r2, #5
 8006fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fd8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006fdc:	6032      	str	r2, [r6, #0]
 8006fde:	6023      	str	r3, [r4, #0]
 8006fe0:	b010      	add	sp, #64	; 0x40
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	89a8      	ldrh	r0, [r5, #12]
 8006fe6:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8006fea:	b282      	uxth	r2, r0
 8006fec:	2000      	movs	r0, #0
 8006fee:	6030      	str	r0, [r6, #0]
 8006ff0:	b11a      	cbz	r2, 8006ffa <__swhatbuf_r+0x52>
 8006ff2:	2340      	movs	r3, #64	; 0x40
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	b010      	add	sp, #64	; 0x40
 8006ff8:	bd70      	pop	{r4, r5, r6, pc}
 8006ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ffe:	4610      	mov	r0, r2
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	b010      	add	sp, #64	; 0x40
 8007004:	bd70      	pop	{r4, r5, r6, pc}
 8007006:	bf00      	nop

08007008 <__smakebuf_r>:
 8007008:	898a      	ldrh	r2, [r1, #12]
 800700a:	0792      	lsls	r2, r2, #30
 800700c:	460b      	mov	r3, r1
 800700e:	d506      	bpl.n	800701e <__smakebuf_r+0x16>
 8007010:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007014:	2101      	movs	r1, #1
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	611a      	str	r2, [r3, #16]
 800701a:	6159      	str	r1, [r3, #20]
 800701c:	4770      	bx	lr
 800701e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007020:	b083      	sub	sp, #12
 8007022:	ab01      	add	r3, sp, #4
 8007024:	466a      	mov	r2, sp
 8007026:	460c      	mov	r4, r1
 8007028:	4605      	mov	r5, r0
 800702a:	f7ff ffbd 	bl	8006fa8 <__swhatbuf_r>
 800702e:	9900      	ldr	r1, [sp, #0]
 8007030:	4606      	mov	r6, r0
 8007032:	4628      	mov	r0, r5
 8007034:	f000 f82c 	bl	8007090 <_malloc_r>
 8007038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800703c:	b1d0      	cbz	r0, 8007074 <__smakebuf_r+0x6c>
 800703e:	9a01      	ldr	r2, [sp, #4]
 8007040:	4f12      	ldr	r7, [pc, #72]	; (800708c <__smakebuf_r+0x84>)
 8007042:	9900      	ldr	r1, [sp, #0]
 8007044:	63ef      	str	r7, [r5, #60]	; 0x3c
 8007046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800704a:	81a3      	strh	r3, [r4, #12]
 800704c:	6020      	str	r0, [r4, #0]
 800704e:	6120      	str	r0, [r4, #16]
 8007050:	6161      	str	r1, [r4, #20]
 8007052:	b91a      	cbnz	r2, 800705c <__smakebuf_r+0x54>
 8007054:	4333      	orrs	r3, r6
 8007056:	81a3      	strh	r3, [r4, #12]
 8007058:	b003      	add	sp, #12
 800705a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800705c:	4628      	mov	r0, r5
 800705e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007062:	f001 faaf 	bl	80085c4 <_isatty_r>
 8007066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800706a:	2800      	cmp	r0, #0
 800706c:	d0f2      	beq.n	8007054 <__smakebuf_r+0x4c>
 800706e:	f043 0301 	orr.w	r3, r3, #1
 8007072:	e7ef      	b.n	8007054 <__smakebuf_r+0x4c>
 8007074:	059a      	lsls	r2, r3, #22
 8007076:	d4ef      	bmi.n	8007058 <__smakebuf_r+0x50>
 8007078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800707c:	f043 0302 	orr.w	r3, r3, #2
 8007080:	2101      	movs	r1, #1
 8007082:	81a3      	strh	r3, [r4, #12]
 8007084:	6022      	str	r2, [r4, #0]
 8007086:	6122      	str	r2, [r4, #16]
 8007088:	6161      	str	r1, [r4, #20]
 800708a:	e7e5      	b.n	8007058 <__smakebuf_r+0x50>
 800708c:	080068b9 	.word	0x080068b9

08007090 <_malloc_r>:
 8007090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	f101 050b 	add.w	r5, r1, #11
 8007098:	2d16      	cmp	r5, #22
 800709a:	b083      	sub	sp, #12
 800709c:	4606      	mov	r6, r0
 800709e:	f240 809f 	bls.w	80071e0 <_malloc_r+0x150>
 80070a2:	f035 0507 	bics.w	r5, r5, #7
 80070a6:	f100 80bf 	bmi.w	8007228 <_malloc_r+0x198>
 80070aa:	42a9      	cmp	r1, r5
 80070ac:	f200 80bc 	bhi.w	8007228 <_malloc_r+0x198>
 80070b0:	f000 fb5a 	bl	8007768 <__malloc_lock>
 80070b4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80070b8:	f0c0 829c 	bcc.w	80075f4 <_malloc_r+0x564>
 80070bc:	0a6b      	lsrs	r3, r5, #9
 80070be:	f000 80ba 	beq.w	8007236 <_malloc_r+0x1a6>
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	f200 8183 	bhi.w	80073ce <_malloc_r+0x33e>
 80070c8:	09a8      	lsrs	r0, r5, #6
 80070ca:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 80070ce:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80070d2:	3038      	adds	r0, #56	; 0x38
 80070d4:	4fc4      	ldr	r7, [pc, #784]	; (80073e8 <_malloc_r+0x358>)
 80070d6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80070da:	f1a3 0108 	sub.w	r1, r3, #8
 80070de:	685c      	ldr	r4, [r3, #4]
 80070e0:	42a1      	cmp	r1, r4
 80070e2:	d107      	bne.n	80070f4 <_malloc_r+0x64>
 80070e4:	e0ac      	b.n	8007240 <_malloc_r+0x1b0>
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	f280 80ac 	bge.w	8007244 <_malloc_r+0x1b4>
 80070ec:	68e4      	ldr	r4, [r4, #12]
 80070ee:	42a1      	cmp	r1, r4
 80070f0:	f000 80a6 	beq.w	8007240 <_malloc_r+0x1b0>
 80070f4:	6863      	ldr	r3, [r4, #4]
 80070f6:	f023 0303 	bic.w	r3, r3, #3
 80070fa:	1b5a      	subs	r2, r3, r5
 80070fc:	2a0f      	cmp	r2, #15
 80070fe:	ddf2      	ble.n	80070e6 <_malloc_r+0x56>
 8007100:	49b9      	ldr	r1, [pc, #740]	; (80073e8 <_malloc_r+0x358>)
 8007102:	693c      	ldr	r4, [r7, #16]
 8007104:	f101 0e08 	add.w	lr, r1, #8
 8007108:	4574      	cmp	r4, lr
 800710a:	f000 81b3 	beq.w	8007474 <_malloc_r+0x3e4>
 800710e:	6863      	ldr	r3, [r4, #4]
 8007110:	f023 0303 	bic.w	r3, r3, #3
 8007114:	1b5a      	subs	r2, r3, r5
 8007116:	2a0f      	cmp	r2, #15
 8007118:	f300 8199 	bgt.w	800744e <_malloc_r+0x3be>
 800711c:	2a00      	cmp	r2, #0
 800711e:	f8c1 e014 	str.w	lr, [r1, #20]
 8007122:	f8c1 e010 	str.w	lr, [r1, #16]
 8007126:	f280 809e 	bge.w	8007266 <_malloc_r+0x1d6>
 800712a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800712e:	f080 8167 	bcs.w	8007400 <_malloc_r+0x370>
 8007132:	08db      	lsrs	r3, r3, #3
 8007134:	f103 0c01 	add.w	ip, r3, #1
 8007138:	2201      	movs	r2, #1
 800713a:	109b      	asrs	r3, r3, #2
 800713c:	fa02 f303 	lsl.w	r3, r2, r3
 8007140:	684a      	ldr	r2, [r1, #4]
 8007142:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 8007146:	f8c4 8008 	str.w	r8, [r4, #8]
 800714a:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 800714e:	431a      	orrs	r2, r3
 8007150:	f1a9 0308 	sub.w	r3, r9, #8
 8007154:	60e3      	str	r3, [r4, #12]
 8007156:	604a      	str	r2, [r1, #4]
 8007158:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 800715c:	f8c8 400c 	str.w	r4, [r8, #12]
 8007160:	1083      	asrs	r3, r0, #2
 8007162:	2401      	movs	r4, #1
 8007164:	409c      	lsls	r4, r3
 8007166:	4294      	cmp	r4, r2
 8007168:	f200 808a 	bhi.w	8007280 <_malloc_r+0x1f0>
 800716c:	4214      	tst	r4, r2
 800716e:	d106      	bne.n	800717e <_malloc_r+0xee>
 8007170:	f020 0003 	bic.w	r0, r0, #3
 8007174:	0064      	lsls	r4, r4, #1
 8007176:	4214      	tst	r4, r2
 8007178:	f100 0004 	add.w	r0, r0, #4
 800717c:	d0fa      	beq.n	8007174 <_malloc_r+0xe4>
 800717e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8007182:	46cc      	mov	ip, r9
 8007184:	4680      	mov	r8, r0
 8007186:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800718a:	458c      	cmp	ip, r1
 800718c:	d107      	bne.n	800719e <_malloc_r+0x10e>
 800718e:	e173      	b.n	8007478 <_malloc_r+0x3e8>
 8007190:	2a00      	cmp	r2, #0
 8007192:	f280 8181 	bge.w	8007498 <_malloc_r+0x408>
 8007196:	68c9      	ldr	r1, [r1, #12]
 8007198:	458c      	cmp	ip, r1
 800719a:	f000 816d 	beq.w	8007478 <_malloc_r+0x3e8>
 800719e:	684b      	ldr	r3, [r1, #4]
 80071a0:	f023 0303 	bic.w	r3, r3, #3
 80071a4:	1b5a      	subs	r2, r3, r5
 80071a6:	2a0f      	cmp	r2, #15
 80071a8:	ddf2      	ble.n	8007190 <_malloc_r+0x100>
 80071aa:	460c      	mov	r4, r1
 80071ac:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80071b0:	f854 8f08 	ldr.w	r8, [r4, #8]!
 80071b4:	194b      	adds	r3, r1, r5
 80071b6:	f045 0501 	orr.w	r5, r5, #1
 80071ba:	604d      	str	r5, [r1, #4]
 80071bc:	f042 0101 	orr.w	r1, r2, #1
 80071c0:	f8c8 c00c 	str.w	ip, [r8, #12]
 80071c4:	4630      	mov	r0, r6
 80071c6:	f8cc 8008 	str.w	r8, [ip, #8]
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	613b      	str	r3, [r7, #16]
 80071ce:	f8c3 e00c 	str.w	lr, [r3, #12]
 80071d2:	f8c3 e008 	str.w	lr, [r3, #8]
 80071d6:	6059      	str	r1, [r3, #4]
 80071d8:	509a      	str	r2, [r3, r2]
 80071da:	f000 fac7 	bl	800776c <__malloc_unlock>
 80071de:	e01f      	b.n	8007220 <_malloc_r+0x190>
 80071e0:	2910      	cmp	r1, #16
 80071e2:	d821      	bhi.n	8007228 <_malloc_r+0x198>
 80071e4:	f000 fac0 	bl	8007768 <__malloc_lock>
 80071e8:	2510      	movs	r5, #16
 80071ea:	2306      	movs	r3, #6
 80071ec:	2002      	movs	r0, #2
 80071ee:	4f7e      	ldr	r7, [pc, #504]	; (80073e8 <_malloc_r+0x358>)
 80071f0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80071f4:	f1a3 0208 	sub.w	r2, r3, #8
 80071f8:	685c      	ldr	r4, [r3, #4]
 80071fa:	4294      	cmp	r4, r2
 80071fc:	f000 8145 	beq.w	800748a <_malloc_r+0x3fa>
 8007200:	6863      	ldr	r3, [r4, #4]
 8007202:	68e1      	ldr	r1, [r4, #12]
 8007204:	68a5      	ldr	r5, [r4, #8]
 8007206:	f023 0303 	bic.w	r3, r3, #3
 800720a:	4423      	add	r3, r4
 800720c:	4630      	mov	r0, r6
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	60e9      	str	r1, [r5, #12]
 8007212:	f042 0201 	orr.w	r2, r2, #1
 8007216:	608d      	str	r5, [r1, #8]
 8007218:	605a      	str	r2, [r3, #4]
 800721a:	f000 faa7 	bl	800776c <__malloc_unlock>
 800721e:	3408      	adds	r4, #8
 8007220:	4620      	mov	r0, r4
 8007222:	b003      	add	sp, #12
 8007224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007228:	2400      	movs	r4, #0
 800722a:	230c      	movs	r3, #12
 800722c:	4620      	mov	r0, r4
 800722e:	6033      	str	r3, [r6, #0]
 8007230:	b003      	add	sp, #12
 8007232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007236:	2380      	movs	r3, #128	; 0x80
 8007238:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800723c:	203f      	movs	r0, #63	; 0x3f
 800723e:	e749      	b.n	80070d4 <_malloc_r+0x44>
 8007240:	4670      	mov	r0, lr
 8007242:	e75d      	b.n	8007100 <_malloc_r+0x70>
 8007244:	4423      	add	r3, r4
 8007246:	68e1      	ldr	r1, [r4, #12]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	68a5      	ldr	r5, [r4, #8]
 800724c:	f042 0201 	orr.w	r2, r2, #1
 8007250:	60e9      	str	r1, [r5, #12]
 8007252:	4630      	mov	r0, r6
 8007254:	608d      	str	r5, [r1, #8]
 8007256:	605a      	str	r2, [r3, #4]
 8007258:	f000 fa88 	bl	800776c <__malloc_unlock>
 800725c:	3408      	adds	r4, #8
 800725e:	4620      	mov	r0, r4
 8007260:	b003      	add	sp, #12
 8007262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007266:	4423      	add	r3, r4
 8007268:	4630      	mov	r0, r6
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	f042 0201 	orr.w	r2, r2, #1
 8007270:	605a      	str	r2, [r3, #4]
 8007272:	f000 fa7b 	bl	800776c <__malloc_unlock>
 8007276:	3408      	adds	r4, #8
 8007278:	4620      	mov	r0, r4
 800727a:	b003      	add	sp, #12
 800727c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007280:	68bc      	ldr	r4, [r7, #8]
 8007282:	6863      	ldr	r3, [r4, #4]
 8007284:	f023 0803 	bic.w	r8, r3, #3
 8007288:	45a8      	cmp	r8, r5
 800728a:	d304      	bcc.n	8007296 <_malloc_r+0x206>
 800728c:	ebc5 0308 	rsb	r3, r5, r8
 8007290:	2b0f      	cmp	r3, #15
 8007292:	f300 808c 	bgt.w	80073ae <_malloc_r+0x31e>
 8007296:	4b55      	ldr	r3, [pc, #340]	; (80073ec <_malloc_r+0x35c>)
 8007298:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80073fc <_malloc_r+0x36c>
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	f8d9 3000 	ldr.w	r3, [r9]
 80072a2:	3301      	adds	r3, #1
 80072a4:	442a      	add	r2, r5
 80072a6:	eb04 0a08 	add.w	sl, r4, r8
 80072aa:	f000 8160 	beq.w	800756e <_malloc_r+0x4de>
 80072ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80072b2:	320f      	adds	r2, #15
 80072b4:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80072b8:	f022 020f 	bic.w	r2, r2, #15
 80072bc:	4611      	mov	r1, r2
 80072be:	4630      	mov	r0, r6
 80072c0:	9201      	str	r2, [sp, #4]
 80072c2:	f000 ff55 	bl	8008170 <_sbrk_r>
 80072c6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80072ca:	4683      	mov	fp, r0
 80072cc:	9a01      	ldr	r2, [sp, #4]
 80072ce:	f000 8158 	beq.w	8007582 <_malloc_r+0x4f2>
 80072d2:	4582      	cmp	sl, r0
 80072d4:	f200 80fc 	bhi.w	80074d0 <_malloc_r+0x440>
 80072d8:	4b45      	ldr	r3, [pc, #276]	; (80073f0 <_malloc_r+0x360>)
 80072da:	6819      	ldr	r1, [r3, #0]
 80072dc:	45da      	cmp	sl, fp
 80072de:	4411      	add	r1, r2
 80072e0:	6019      	str	r1, [r3, #0]
 80072e2:	f000 8153 	beq.w	800758c <_malloc_r+0x4fc>
 80072e6:	f8d9 0000 	ldr.w	r0, [r9]
 80072ea:	f8df e110 	ldr.w	lr, [pc, #272]	; 80073fc <_malloc_r+0x36c>
 80072ee:	3001      	adds	r0, #1
 80072f0:	bf1b      	ittet	ne
 80072f2:	ebca 0a0b 	rsbne	sl, sl, fp
 80072f6:	4451      	addne	r1, sl
 80072f8:	f8ce b000 	streq.w	fp, [lr]
 80072fc:	6019      	strne	r1, [r3, #0]
 80072fe:	f01b 0107 	ands.w	r1, fp, #7
 8007302:	f000 8117 	beq.w	8007534 <_malloc_r+0x4a4>
 8007306:	f1c1 0008 	rsb	r0, r1, #8
 800730a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800730e:	4483      	add	fp, r0
 8007310:	3108      	adds	r1, #8
 8007312:	445a      	add	r2, fp
 8007314:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007318:	ebc2 0901 	rsb	r9, r2, r1
 800731c:	4649      	mov	r1, r9
 800731e:	4630      	mov	r0, r6
 8007320:	9301      	str	r3, [sp, #4]
 8007322:	f000 ff25 	bl	8008170 <_sbrk_r>
 8007326:	1c43      	adds	r3, r0, #1
 8007328:	9b01      	ldr	r3, [sp, #4]
 800732a:	f000 813f 	beq.w	80075ac <_malloc_r+0x51c>
 800732e:	ebcb 0200 	rsb	r2, fp, r0
 8007332:	444a      	add	r2, r9
 8007334:	f042 0201 	orr.w	r2, r2, #1
 8007338:	6819      	ldr	r1, [r3, #0]
 800733a:	f8c7 b008 	str.w	fp, [r7, #8]
 800733e:	4449      	add	r1, r9
 8007340:	42bc      	cmp	r4, r7
 8007342:	f8cb 2004 	str.w	r2, [fp, #4]
 8007346:	6019      	str	r1, [r3, #0]
 8007348:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80073f0 <_malloc_r+0x360>
 800734c:	d016      	beq.n	800737c <_malloc_r+0x2ec>
 800734e:	f1b8 0f0f 	cmp.w	r8, #15
 8007352:	f240 80fd 	bls.w	8007550 <_malloc_r+0x4c0>
 8007356:	6862      	ldr	r2, [r4, #4]
 8007358:	f1a8 030c 	sub.w	r3, r8, #12
 800735c:	f023 0307 	bic.w	r3, r3, #7
 8007360:	18e0      	adds	r0, r4, r3
 8007362:	f002 0201 	and.w	r2, r2, #1
 8007366:	f04f 0e05 	mov.w	lr, #5
 800736a:	431a      	orrs	r2, r3
 800736c:	2b0f      	cmp	r3, #15
 800736e:	6062      	str	r2, [r4, #4]
 8007370:	f8c0 e004 	str.w	lr, [r0, #4]
 8007374:	f8c0 e008 	str.w	lr, [r0, #8]
 8007378:	f200 811c 	bhi.w	80075b4 <_malloc_r+0x524>
 800737c:	4b1d      	ldr	r3, [pc, #116]	; (80073f4 <_malloc_r+0x364>)
 800737e:	68bc      	ldr	r4, [r7, #8]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4291      	cmp	r1, r2
 8007384:	bf88      	it	hi
 8007386:	6019      	strhi	r1, [r3, #0]
 8007388:	4b1b      	ldr	r3, [pc, #108]	; (80073f8 <_malloc_r+0x368>)
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	4291      	cmp	r1, r2
 800738e:	6862      	ldr	r2, [r4, #4]
 8007390:	bf88      	it	hi
 8007392:	6019      	strhi	r1, [r3, #0]
 8007394:	f022 0203 	bic.w	r2, r2, #3
 8007398:	4295      	cmp	r5, r2
 800739a:	eba2 0305 	sub.w	r3, r2, r5
 800739e:	d801      	bhi.n	80073a4 <_malloc_r+0x314>
 80073a0:	2b0f      	cmp	r3, #15
 80073a2:	dc04      	bgt.n	80073ae <_malloc_r+0x31e>
 80073a4:	4630      	mov	r0, r6
 80073a6:	f000 f9e1 	bl	800776c <__malloc_unlock>
 80073aa:	2400      	movs	r4, #0
 80073ac:	e738      	b.n	8007220 <_malloc_r+0x190>
 80073ae:	1962      	adds	r2, r4, r5
 80073b0:	f043 0301 	orr.w	r3, r3, #1
 80073b4:	f045 0501 	orr.w	r5, r5, #1
 80073b8:	6065      	str	r5, [r4, #4]
 80073ba:	4630      	mov	r0, r6
 80073bc:	60ba      	str	r2, [r7, #8]
 80073be:	6053      	str	r3, [r2, #4]
 80073c0:	f000 f9d4 	bl	800776c <__malloc_unlock>
 80073c4:	3408      	adds	r4, #8
 80073c6:	4620      	mov	r0, r4
 80073c8:	b003      	add	sp, #12
 80073ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ce:	2b14      	cmp	r3, #20
 80073d0:	d971      	bls.n	80074b6 <_malloc_r+0x426>
 80073d2:	2b54      	cmp	r3, #84	; 0x54
 80073d4:	f200 80a4 	bhi.w	8007520 <_malloc_r+0x490>
 80073d8:	0b28      	lsrs	r0, r5, #12
 80073da:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 80073de:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80073e2:	306e      	adds	r0, #110	; 0x6e
 80073e4:	e676      	b.n	80070d4 <_malloc_r+0x44>
 80073e6:	bf00      	nop
 80073e8:	20000464 	.word	0x20000464
 80073ec:	20000a48 	.word	0x20000a48
 80073f0:	20000a4c 	.word	0x20000a4c
 80073f4:	20000a44 	.word	0x20000a44
 80073f8:	20000a40 	.word	0x20000a40
 80073fc:	20000870 	.word	0x20000870
 8007400:	0a5a      	lsrs	r2, r3, #9
 8007402:	2a04      	cmp	r2, #4
 8007404:	d95e      	bls.n	80074c4 <_malloc_r+0x434>
 8007406:	2a14      	cmp	r2, #20
 8007408:	f200 80b3 	bhi.w	8007572 <_malloc_r+0x4e2>
 800740c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8007410:	0049      	lsls	r1, r1, #1
 8007412:	325b      	adds	r2, #91	; 0x5b
 8007414:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 8007418:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800741c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80075fc <_malloc_r+0x56c>
 8007420:	f1ac 0c08 	sub.w	ip, ip, #8
 8007424:	458c      	cmp	ip, r1
 8007426:	f000 8088 	beq.w	800753a <_malloc_r+0x4aa>
 800742a:	684a      	ldr	r2, [r1, #4]
 800742c:	f022 0203 	bic.w	r2, r2, #3
 8007430:	4293      	cmp	r3, r2
 8007432:	d202      	bcs.n	800743a <_malloc_r+0x3aa>
 8007434:	6889      	ldr	r1, [r1, #8]
 8007436:	458c      	cmp	ip, r1
 8007438:	d1f7      	bne.n	800742a <_malloc_r+0x39a>
 800743a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	f8c4 c00c 	str.w	ip, [r4, #12]
 8007444:	60a1      	str	r1, [r4, #8]
 8007446:	f8cc 4008 	str.w	r4, [ip, #8]
 800744a:	60cc      	str	r4, [r1, #12]
 800744c:	e688      	b.n	8007160 <_malloc_r+0xd0>
 800744e:	1963      	adds	r3, r4, r5
 8007450:	f042 0701 	orr.w	r7, r2, #1
 8007454:	f045 0501 	orr.w	r5, r5, #1
 8007458:	6065      	str	r5, [r4, #4]
 800745a:	4630      	mov	r0, r6
 800745c:	614b      	str	r3, [r1, #20]
 800745e:	610b      	str	r3, [r1, #16]
 8007460:	f8c3 e00c 	str.w	lr, [r3, #12]
 8007464:	f8c3 e008 	str.w	lr, [r3, #8]
 8007468:	605f      	str	r7, [r3, #4]
 800746a:	509a      	str	r2, [r3, r2]
 800746c:	3408      	adds	r4, #8
 800746e:	f000 f97d 	bl	800776c <__malloc_unlock>
 8007472:	e6d5      	b.n	8007220 <_malloc_r+0x190>
 8007474:	684a      	ldr	r2, [r1, #4]
 8007476:	e673      	b.n	8007160 <_malloc_r+0xd0>
 8007478:	f108 0801 	add.w	r8, r8, #1
 800747c:	f018 0f03 	tst.w	r8, #3
 8007480:	f10c 0c08 	add.w	ip, ip, #8
 8007484:	f47f ae7f 	bne.w	8007186 <_malloc_r+0xf6>
 8007488:	e030      	b.n	80074ec <_malloc_r+0x45c>
 800748a:	68dc      	ldr	r4, [r3, #12]
 800748c:	42a3      	cmp	r3, r4
 800748e:	bf08      	it	eq
 8007490:	3002      	addeq	r0, #2
 8007492:	f43f ae35 	beq.w	8007100 <_malloc_r+0x70>
 8007496:	e6b3      	b.n	8007200 <_malloc_r+0x170>
 8007498:	440b      	add	r3, r1
 800749a:	460c      	mov	r4, r1
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	68c9      	ldr	r1, [r1, #12]
 80074a0:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80074a4:	f042 0201 	orr.w	r2, r2, #1
 80074a8:	605a      	str	r2, [r3, #4]
 80074aa:	4630      	mov	r0, r6
 80074ac:	60e9      	str	r1, [r5, #12]
 80074ae:	608d      	str	r5, [r1, #8]
 80074b0:	f000 f95c 	bl	800776c <__malloc_unlock>
 80074b4:	e6b4      	b.n	8007220 <_malloc_r+0x190>
 80074b6:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 80074ba:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 80074be:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80074c2:	e607      	b.n	80070d4 <_malloc_r+0x44>
 80074c4:	099a      	lsrs	r2, r3, #6
 80074c6:	f102 0139 	add.w	r1, r2, #57	; 0x39
 80074ca:	0049      	lsls	r1, r1, #1
 80074cc:	3238      	adds	r2, #56	; 0x38
 80074ce:	e7a1      	b.n	8007414 <_malloc_r+0x384>
 80074d0:	42bc      	cmp	r4, r7
 80074d2:	4b4a      	ldr	r3, [pc, #296]	; (80075fc <_malloc_r+0x56c>)
 80074d4:	f43f af00 	beq.w	80072d8 <_malloc_r+0x248>
 80074d8:	689c      	ldr	r4, [r3, #8]
 80074da:	6862      	ldr	r2, [r4, #4]
 80074dc:	f022 0203 	bic.w	r2, r2, #3
 80074e0:	e75a      	b.n	8007398 <_malloc_r+0x308>
 80074e2:	f859 3908 	ldr.w	r3, [r9], #-8
 80074e6:	4599      	cmp	r9, r3
 80074e8:	f040 8082 	bne.w	80075f0 <_malloc_r+0x560>
 80074ec:	f010 0f03 	tst.w	r0, #3
 80074f0:	f100 30ff 	add.w	r0, r0, #4294967295
 80074f4:	d1f5      	bne.n	80074e2 <_malloc_r+0x452>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	ea23 0304 	bic.w	r3, r3, r4
 80074fc:	607b      	str	r3, [r7, #4]
 80074fe:	0064      	lsls	r4, r4, #1
 8007500:	429c      	cmp	r4, r3
 8007502:	f63f aebd 	bhi.w	8007280 <_malloc_r+0x1f0>
 8007506:	2c00      	cmp	r4, #0
 8007508:	f43f aeba 	beq.w	8007280 <_malloc_r+0x1f0>
 800750c:	421c      	tst	r4, r3
 800750e:	4640      	mov	r0, r8
 8007510:	f47f ae35 	bne.w	800717e <_malloc_r+0xee>
 8007514:	0064      	lsls	r4, r4, #1
 8007516:	421c      	tst	r4, r3
 8007518:	f100 0004 	add.w	r0, r0, #4
 800751c:	d0fa      	beq.n	8007514 <_malloc_r+0x484>
 800751e:	e62e      	b.n	800717e <_malloc_r+0xee>
 8007520:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007524:	d818      	bhi.n	8007558 <_malloc_r+0x4c8>
 8007526:	0be8      	lsrs	r0, r5, #15
 8007528:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 800752c:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8007530:	3077      	adds	r0, #119	; 0x77
 8007532:	e5cf      	b.n	80070d4 <_malloc_r+0x44>
 8007534:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007538:	e6eb      	b.n	8007312 <_malloc_r+0x282>
 800753a:	2101      	movs	r1, #1
 800753c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007540:	1092      	asrs	r2, r2, #2
 8007542:	fa01 f202 	lsl.w	r2, r1, r2
 8007546:	431a      	orrs	r2, r3
 8007548:	f8c8 2004 	str.w	r2, [r8, #4]
 800754c:	4661      	mov	r1, ip
 800754e:	e777      	b.n	8007440 <_malloc_r+0x3b0>
 8007550:	2301      	movs	r3, #1
 8007552:	f8cb 3004 	str.w	r3, [fp, #4]
 8007556:	e725      	b.n	80073a4 <_malloc_r+0x314>
 8007558:	f240 5254 	movw	r2, #1364	; 0x554
 800755c:	4293      	cmp	r3, r2
 800755e:	d820      	bhi.n	80075a2 <_malloc_r+0x512>
 8007560:	0ca8      	lsrs	r0, r5, #18
 8007562:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 8007566:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800756a:	307c      	adds	r0, #124	; 0x7c
 800756c:	e5b2      	b.n	80070d4 <_malloc_r+0x44>
 800756e:	3210      	adds	r2, #16
 8007570:	e6a4      	b.n	80072bc <_malloc_r+0x22c>
 8007572:	2a54      	cmp	r2, #84	; 0x54
 8007574:	d826      	bhi.n	80075c4 <_malloc_r+0x534>
 8007576:	0b1a      	lsrs	r2, r3, #12
 8007578:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800757c:	0049      	lsls	r1, r1, #1
 800757e:	326e      	adds	r2, #110	; 0x6e
 8007580:	e748      	b.n	8007414 <_malloc_r+0x384>
 8007582:	68bc      	ldr	r4, [r7, #8]
 8007584:	6862      	ldr	r2, [r4, #4]
 8007586:	f022 0203 	bic.w	r2, r2, #3
 800758a:	e705      	b.n	8007398 <_malloc_r+0x308>
 800758c:	f3ca 000b 	ubfx	r0, sl, #0, #12
 8007590:	2800      	cmp	r0, #0
 8007592:	f47f aea8 	bne.w	80072e6 <_malloc_r+0x256>
 8007596:	4442      	add	r2, r8
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	f042 0201 	orr.w	r2, r2, #1
 800759e:	605a      	str	r2, [r3, #4]
 80075a0:	e6ec      	b.n	800737c <_malloc_r+0x2ec>
 80075a2:	23fe      	movs	r3, #254	; 0xfe
 80075a4:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 80075a8:	207e      	movs	r0, #126	; 0x7e
 80075aa:	e593      	b.n	80070d4 <_malloc_r+0x44>
 80075ac:	2201      	movs	r2, #1
 80075ae:	f04f 0900 	mov.w	r9, #0
 80075b2:	e6c1      	b.n	8007338 <_malloc_r+0x2a8>
 80075b4:	f104 0108 	add.w	r1, r4, #8
 80075b8:	4630      	mov	r0, r6
 80075ba:	f7ff fa53 	bl	8006a64 <_free_r>
 80075be:	f8d9 1000 	ldr.w	r1, [r9]
 80075c2:	e6db      	b.n	800737c <_malloc_r+0x2ec>
 80075c4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80075c8:	d805      	bhi.n	80075d6 <_malloc_r+0x546>
 80075ca:	0bda      	lsrs	r2, r3, #15
 80075cc:	f102 0178 	add.w	r1, r2, #120	; 0x78
 80075d0:	0049      	lsls	r1, r1, #1
 80075d2:	3277      	adds	r2, #119	; 0x77
 80075d4:	e71e      	b.n	8007414 <_malloc_r+0x384>
 80075d6:	f240 5154 	movw	r1, #1364	; 0x554
 80075da:	428a      	cmp	r2, r1
 80075dc:	d805      	bhi.n	80075ea <_malloc_r+0x55a>
 80075de:	0c9a      	lsrs	r2, r3, #18
 80075e0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 80075e4:	0049      	lsls	r1, r1, #1
 80075e6:	327c      	adds	r2, #124	; 0x7c
 80075e8:	e714      	b.n	8007414 <_malloc_r+0x384>
 80075ea:	21fe      	movs	r1, #254	; 0xfe
 80075ec:	227e      	movs	r2, #126	; 0x7e
 80075ee:	e711      	b.n	8007414 <_malloc_r+0x384>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	e784      	b.n	80074fe <_malloc_r+0x46e>
 80075f4:	08e8      	lsrs	r0, r5, #3
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	e5f8      	b.n	80071ee <_malloc_r+0x15e>
 80075fc:	20000464 	.word	0x20000464

08007600 <memchr>:
 8007600:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8007604:	2a10      	cmp	r2, #16
 8007606:	db2b      	blt.n	8007660 <memchr+0x60>
 8007608:	f010 0f07 	tst.w	r0, #7
 800760c:	d008      	beq.n	8007620 <memchr+0x20>
 800760e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007612:	3a01      	subs	r2, #1
 8007614:	428b      	cmp	r3, r1
 8007616:	d02d      	beq.n	8007674 <memchr+0x74>
 8007618:	f010 0f07 	tst.w	r0, #7
 800761c:	b342      	cbz	r2, 8007670 <memchr+0x70>
 800761e:	d1f6      	bne.n	800760e <memchr+0xe>
 8007620:	b4f0      	push	{r4, r5, r6, r7}
 8007622:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8007626:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800762a:	f022 0407 	bic.w	r4, r2, #7
 800762e:	f07f 0700 	mvns.w	r7, #0
 8007632:	2300      	movs	r3, #0
 8007634:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8007638:	3c08      	subs	r4, #8
 800763a:	ea85 0501 	eor.w	r5, r5, r1
 800763e:	ea86 0601 	eor.w	r6, r6, r1
 8007642:	fa85 f547 	uadd8	r5, r5, r7
 8007646:	faa3 f587 	sel	r5, r3, r7
 800764a:	fa86 f647 	uadd8	r6, r6, r7
 800764e:	faa5 f687 	sel	r6, r5, r7
 8007652:	b98e      	cbnz	r6, 8007678 <memchr+0x78>
 8007654:	d1ee      	bne.n	8007634 <memchr+0x34>
 8007656:	bcf0      	pop	{r4, r5, r6, r7}
 8007658:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800765c:	f002 0207 	and.w	r2, r2, #7
 8007660:	b132      	cbz	r2, 8007670 <memchr+0x70>
 8007662:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007666:	3a01      	subs	r2, #1
 8007668:	ea83 0301 	eor.w	r3, r3, r1
 800766c:	b113      	cbz	r3, 8007674 <memchr+0x74>
 800766e:	d1f8      	bne.n	8007662 <memchr+0x62>
 8007670:	2000      	movs	r0, #0
 8007672:	4770      	bx	lr
 8007674:	3801      	subs	r0, #1
 8007676:	4770      	bx	lr
 8007678:	2d00      	cmp	r5, #0
 800767a:	bf06      	itte	eq
 800767c:	4635      	moveq	r5, r6
 800767e:	3803      	subeq	r0, #3
 8007680:	3807      	subne	r0, #7
 8007682:	f015 0f01 	tst.w	r5, #1
 8007686:	d107      	bne.n	8007698 <memchr+0x98>
 8007688:	3001      	adds	r0, #1
 800768a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800768e:	bf02      	ittt	eq
 8007690:	3001      	addeq	r0, #1
 8007692:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8007696:	3001      	addeq	r0, #1
 8007698:	bcf0      	pop	{r4, r5, r6, r7}
 800769a:	3801      	subs	r0, #1
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop

080076a0 <memmove>:
 80076a0:	4288      	cmp	r0, r1
 80076a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076a4:	d90d      	bls.n	80076c2 <memmove+0x22>
 80076a6:	188b      	adds	r3, r1, r2
 80076a8:	4298      	cmp	r0, r3
 80076aa:	d20a      	bcs.n	80076c2 <memmove+0x22>
 80076ac:	1881      	adds	r1, r0, r2
 80076ae:	2a00      	cmp	r2, #0
 80076b0:	d051      	beq.n	8007756 <memmove+0xb6>
 80076b2:	1a9a      	subs	r2, r3, r2
 80076b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80076bc:	4293      	cmp	r3, r2
 80076be:	d1f9      	bne.n	80076b4 <memmove+0x14>
 80076c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c2:	2a0f      	cmp	r2, #15
 80076c4:	d948      	bls.n	8007758 <memmove+0xb8>
 80076c6:	ea41 0300 	orr.w	r3, r1, r0
 80076ca:	079b      	lsls	r3, r3, #30
 80076cc:	d146      	bne.n	800775c <memmove+0xbc>
 80076ce:	f100 0410 	add.w	r4, r0, #16
 80076d2:	f101 0310 	add.w	r3, r1, #16
 80076d6:	4615      	mov	r5, r2
 80076d8:	f853 6c10 	ldr.w	r6, [r3, #-16]
 80076dc:	f844 6c10 	str.w	r6, [r4, #-16]
 80076e0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 80076e4:	f844 6c0c 	str.w	r6, [r4, #-12]
 80076e8:	f853 6c08 	ldr.w	r6, [r3, #-8]
 80076ec:	f844 6c08 	str.w	r6, [r4, #-8]
 80076f0:	3d10      	subs	r5, #16
 80076f2:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80076f6:	f844 6c04 	str.w	r6, [r4, #-4]
 80076fa:	2d0f      	cmp	r5, #15
 80076fc:	f103 0310 	add.w	r3, r3, #16
 8007700:	f104 0410 	add.w	r4, r4, #16
 8007704:	d8e8      	bhi.n	80076d8 <memmove+0x38>
 8007706:	f1a2 0310 	sub.w	r3, r2, #16
 800770a:	f023 030f 	bic.w	r3, r3, #15
 800770e:	f002 0e0f 	and.w	lr, r2, #15
 8007712:	3310      	adds	r3, #16
 8007714:	f1be 0f03 	cmp.w	lr, #3
 8007718:	4419      	add	r1, r3
 800771a:	4403      	add	r3, r0
 800771c:	d921      	bls.n	8007762 <memmove+0xc2>
 800771e:	1f1e      	subs	r6, r3, #4
 8007720:	460d      	mov	r5, r1
 8007722:	4674      	mov	r4, lr
 8007724:	3c04      	subs	r4, #4
 8007726:	f855 7b04 	ldr.w	r7, [r5], #4
 800772a:	f846 7f04 	str.w	r7, [r6, #4]!
 800772e:	2c03      	cmp	r4, #3
 8007730:	d8f8      	bhi.n	8007724 <memmove+0x84>
 8007732:	f1ae 0404 	sub.w	r4, lr, #4
 8007736:	f024 0403 	bic.w	r4, r4, #3
 800773a:	3404      	adds	r4, #4
 800773c:	4423      	add	r3, r4
 800773e:	4421      	add	r1, r4
 8007740:	f002 0203 	and.w	r2, r2, #3
 8007744:	b162      	cbz	r2, 8007760 <memmove+0xc0>
 8007746:	3b01      	subs	r3, #1
 8007748:	440a      	add	r2, r1
 800774a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800774e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007752:	428a      	cmp	r2, r1
 8007754:	d1f9      	bne.n	800774a <memmove+0xaa>
 8007756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007758:	4603      	mov	r3, r0
 800775a:	e7f3      	b.n	8007744 <memmove+0xa4>
 800775c:	4603      	mov	r3, r0
 800775e:	e7f2      	b.n	8007746 <memmove+0xa6>
 8007760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007762:	4672      	mov	r2, lr
 8007764:	e7ee      	b.n	8007744 <memmove+0xa4>
 8007766:	bf00      	nop

08007768 <__malloc_lock>:
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop

0800776c <__malloc_unlock>:
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop

08007770 <_Balloc>:
 8007770:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007772:	b570      	push	{r4, r5, r6, lr}
 8007774:	4605      	mov	r5, r0
 8007776:	460c      	mov	r4, r1
 8007778:	b14b      	cbz	r3, 800778e <_Balloc+0x1e>
 800777a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800777e:	b180      	cbz	r0, 80077a2 <_Balloc+0x32>
 8007780:	6802      	ldr	r2, [r0, #0]
 8007782:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8007786:	2300      	movs	r3, #0
 8007788:	6103      	str	r3, [r0, #16]
 800778a:	60c3      	str	r3, [r0, #12]
 800778c:	bd70      	pop	{r4, r5, r6, pc}
 800778e:	2221      	movs	r2, #33	; 0x21
 8007790:	2104      	movs	r1, #4
 8007792:	f000 fe1f 	bl	80083d4 <_calloc_r>
 8007796:	64e8      	str	r0, [r5, #76]	; 0x4c
 8007798:	4603      	mov	r3, r0
 800779a:	2800      	cmp	r0, #0
 800779c:	d1ed      	bne.n	800777a <_Balloc+0xa>
 800779e:	2000      	movs	r0, #0
 80077a0:	bd70      	pop	{r4, r5, r6, pc}
 80077a2:	2101      	movs	r1, #1
 80077a4:	fa01 f604 	lsl.w	r6, r1, r4
 80077a8:	1d72      	adds	r2, r6, #5
 80077aa:	4628      	mov	r0, r5
 80077ac:	0092      	lsls	r2, r2, #2
 80077ae:	f000 fe11 	bl	80083d4 <_calloc_r>
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d0f3      	beq.n	800779e <_Balloc+0x2e>
 80077b6:	6044      	str	r4, [r0, #4]
 80077b8:	6086      	str	r6, [r0, #8]
 80077ba:	e7e4      	b.n	8007786 <_Balloc+0x16>

080077bc <_Bfree>:
 80077bc:	b131      	cbz	r1, 80077cc <_Bfree+0x10>
 80077be:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80077c0:	684a      	ldr	r2, [r1, #4]
 80077c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80077c6:	6008      	str	r0, [r1, #0]
 80077c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop

080077d0 <__multadd>:
 80077d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077d2:	690c      	ldr	r4, [r1, #16]
 80077d4:	b083      	sub	sp, #12
 80077d6:	460d      	mov	r5, r1
 80077d8:	4606      	mov	r6, r0
 80077da:	f101 0e14 	add.w	lr, r1, #20
 80077de:	2700      	movs	r7, #0
 80077e0:	f8de 0000 	ldr.w	r0, [lr]
 80077e4:	b281      	uxth	r1, r0
 80077e6:	fb02 3101 	mla	r1, r2, r1, r3
 80077ea:	0c0b      	lsrs	r3, r1, #16
 80077ec:	0c00      	lsrs	r0, r0, #16
 80077ee:	fb02 3300 	mla	r3, r2, r0, r3
 80077f2:	b289      	uxth	r1, r1
 80077f4:	3701      	adds	r7, #1
 80077f6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077fa:	42bc      	cmp	r4, r7
 80077fc:	f84e 1b04 	str.w	r1, [lr], #4
 8007800:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8007804:	dcec      	bgt.n	80077e0 <__multadd+0x10>
 8007806:	b13b      	cbz	r3, 8007818 <__multadd+0x48>
 8007808:	68aa      	ldr	r2, [r5, #8]
 800780a:	4294      	cmp	r4, r2
 800780c:	da07      	bge.n	800781e <__multadd+0x4e>
 800780e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8007812:	3401      	adds	r4, #1
 8007814:	6153      	str	r3, [r2, #20]
 8007816:	612c      	str	r4, [r5, #16]
 8007818:	4628      	mov	r0, r5
 800781a:	b003      	add	sp, #12
 800781c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800781e:	6869      	ldr	r1, [r5, #4]
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	3101      	adds	r1, #1
 8007824:	4630      	mov	r0, r6
 8007826:	f7ff ffa3 	bl	8007770 <_Balloc>
 800782a:	692a      	ldr	r2, [r5, #16]
 800782c:	3202      	adds	r2, #2
 800782e:	f105 010c 	add.w	r1, r5, #12
 8007832:	4607      	mov	r7, r0
 8007834:	0092      	lsls	r2, r2, #2
 8007836:	300c      	adds	r0, #12
 8007838:	f7fa fdda 	bl	80023f0 <memcpy>
 800783c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800783e:	6869      	ldr	r1, [r5, #4]
 8007840:	9b01      	ldr	r3, [sp, #4]
 8007842:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8007846:	6028      	str	r0, [r5, #0]
 8007848:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800784c:	463d      	mov	r5, r7
 800784e:	e7de      	b.n	800780e <__multadd+0x3e>

08007850 <__hi0bits>:
 8007850:	0c03      	lsrs	r3, r0, #16
 8007852:	041b      	lsls	r3, r3, #16
 8007854:	b9b3      	cbnz	r3, 8007884 <__hi0bits+0x34>
 8007856:	0400      	lsls	r0, r0, #16
 8007858:	2310      	movs	r3, #16
 800785a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800785e:	bf04      	itt	eq
 8007860:	0200      	lsleq	r0, r0, #8
 8007862:	3308      	addeq	r3, #8
 8007864:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007868:	bf04      	itt	eq
 800786a:	0100      	lsleq	r0, r0, #4
 800786c:	3304      	addeq	r3, #4
 800786e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007872:	bf04      	itt	eq
 8007874:	0080      	lsleq	r0, r0, #2
 8007876:	3302      	addeq	r3, #2
 8007878:	2800      	cmp	r0, #0
 800787a:	db07      	blt.n	800788c <__hi0bits+0x3c>
 800787c:	0042      	lsls	r2, r0, #1
 800787e:	d403      	bmi.n	8007888 <__hi0bits+0x38>
 8007880:	2020      	movs	r0, #32
 8007882:	4770      	bx	lr
 8007884:	2300      	movs	r3, #0
 8007886:	e7e8      	b.n	800785a <__hi0bits+0xa>
 8007888:	1c58      	adds	r0, r3, #1
 800788a:	4770      	bx	lr
 800788c:	4618      	mov	r0, r3
 800788e:	4770      	bx	lr

08007890 <__lo0bits>:
 8007890:	6803      	ldr	r3, [r0, #0]
 8007892:	f013 0207 	ands.w	r2, r3, #7
 8007896:	d007      	beq.n	80078a8 <__lo0bits+0x18>
 8007898:	07d9      	lsls	r1, r3, #31
 800789a:	d420      	bmi.n	80078de <__lo0bits+0x4e>
 800789c:	079a      	lsls	r2, r3, #30
 800789e:	d420      	bmi.n	80078e2 <__lo0bits+0x52>
 80078a0:	089b      	lsrs	r3, r3, #2
 80078a2:	6003      	str	r3, [r0, #0]
 80078a4:	2002      	movs	r0, #2
 80078a6:	4770      	bx	lr
 80078a8:	b299      	uxth	r1, r3
 80078aa:	b909      	cbnz	r1, 80078b0 <__lo0bits+0x20>
 80078ac:	0c1b      	lsrs	r3, r3, #16
 80078ae:	2210      	movs	r2, #16
 80078b0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80078b4:	bf04      	itt	eq
 80078b6:	0a1b      	lsreq	r3, r3, #8
 80078b8:	3208      	addeq	r2, #8
 80078ba:	0719      	lsls	r1, r3, #28
 80078bc:	bf04      	itt	eq
 80078be:	091b      	lsreq	r3, r3, #4
 80078c0:	3204      	addeq	r2, #4
 80078c2:	0799      	lsls	r1, r3, #30
 80078c4:	bf04      	itt	eq
 80078c6:	089b      	lsreq	r3, r3, #2
 80078c8:	3202      	addeq	r2, #2
 80078ca:	07d9      	lsls	r1, r3, #31
 80078cc:	d404      	bmi.n	80078d8 <__lo0bits+0x48>
 80078ce:	085b      	lsrs	r3, r3, #1
 80078d0:	d101      	bne.n	80078d6 <__lo0bits+0x46>
 80078d2:	2020      	movs	r0, #32
 80078d4:	4770      	bx	lr
 80078d6:	3201      	adds	r2, #1
 80078d8:	6003      	str	r3, [r0, #0]
 80078da:	4610      	mov	r0, r2
 80078dc:	4770      	bx	lr
 80078de:	2000      	movs	r0, #0
 80078e0:	4770      	bx	lr
 80078e2:	085b      	lsrs	r3, r3, #1
 80078e4:	6003      	str	r3, [r0, #0]
 80078e6:	2001      	movs	r0, #1
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop

080078ec <__i2b>:
 80078ec:	b510      	push	{r4, lr}
 80078ee:	460c      	mov	r4, r1
 80078f0:	2101      	movs	r1, #1
 80078f2:	f7ff ff3d 	bl	8007770 <_Balloc>
 80078f6:	2201      	movs	r2, #1
 80078f8:	6144      	str	r4, [r0, #20]
 80078fa:	6102      	str	r2, [r0, #16]
 80078fc:	bd10      	pop	{r4, pc}
 80078fe:	bf00      	nop

08007900 <__multiply>:
 8007900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	690d      	ldr	r5, [r1, #16]
 8007906:	6917      	ldr	r7, [r2, #16]
 8007908:	42bd      	cmp	r5, r7
 800790a:	b083      	sub	sp, #12
 800790c:	460c      	mov	r4, r1
 800790e:	4616      	mov	r6, r2
 8007910:	da04      	bge.n	800791c <__multiply+0x1c>
 8007912:	462a      	mov	r2, r5
 8007914:	4634      	mov	r4, r6
 8007916:	463d      	mov	r5, r7
 8007918:	460e      	mov	r6, r1
 800791a:	4617      	mov	r7, r2
 800791c:	68a3      	ldr	r3, [r4, #8]
 800791e:	6861      	ldr	r1, [r4, #4]
 8007920:	eb05 0807 	add.w	r8, r5, r7
 8007924:	4598      	cmp	r8, r3
 8007926:	bfc8      	it	gt
 8007928:	3101      	addgt	r1, #1
 800792a:	f7ff ff21 	bl	8007770 <_Balloc>
 800792e:	f100 0c14 	add.w	ip, r0, #20
 8007932:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8007936:	45cc      	cmp	ip, r9
 8007938:	9000      	str	r0, [sp, #0]
 800793a:	d205      	bcs.n	8007948 <__multiply+0x48>
 800793c:	4663      	mov	r3, ip
 800793e:	2100      	movs	r1, #0
 8007940:	f843 1b04 	str.w	r1, [r3], #4
 8007944:	4599      	cmp	r9, r3
 8007946:	d8fb      	bhi.n	8007940 <__multiply+0x40>
 8007948:	f106 0214 	add.w	r2, r6, #20
 800794c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8007950:	f104 0314 	add.w	r3, r4, #20
 8007954:	4552      	cmp	r2, sl
 8007956:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 800795a:	d254      	bcs.n	8007a06 <__multiply+0x106>
 800795c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007960:	4699      	mov	r9, r3
 8007962:	f852 3b04 	ldr.w	r3, [r2], #4
 8007966:	fa1f fb83 	uxth.w	fp, r3
 800796a:	f1bb 0f00 	cmp.w	fp, #0
 800796e:	d020      	beq.n	80079b2 <__multiply+0xb2>
 8007970:	2000      	movs	r0, #0
 8007972:	464f      	mov	r7, r9
 8007974:	4666      	mov	r6, ip
 8007976:	4605      	mov	r5, r0
 8007978:	e000      	b.n	800797c <__multiply+0x7c>
 800797a:	461e      	mov	r6, r3
 800797c:	f857 4b04 	ldr.w	r4, [r7], #4
 8007980:	6830      	ldr	r0, [r6, #0]
 8007982:	b2a1      	uxth	r1, r4
 8007984:	b283      	uxth	r3, r0
 8007986:	fb0b 3101 	mla	r1, fp, r1, r3
 800798a:	0c24      	lsrs	r4, r4, #16
 800798c:	0c00      	lsrs	r0, r0, #16
 800798e:	194b      	adds	r3, r1, r5
 8007990:	fb0b 0004 	mla	r0, fp, r4, r0
 8007994:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8007998:	b299      	uxth	r1, r3
 800799a:	4633      	mov	r3, r6
 800799c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80079a0:	45be      	cmp	lr, r7
 80079a2:	ea4f 4510 	mov.w	r5, r0, lsr #16
 80079a6:	f843 1b04 	str.w	r1, [r3], #4
 80079aa:	d8e6      	bhi.n	800797a <__multiply+0x7a>
 80079ac:	6075      	str	r5, [r6, #4]
 80079ae:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80079b2:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 80079b6:	d020      	beq.n	80079fa <__multiply+0xfa>
 80079b8:	f8dc 3000 	ldr.w	r3, [ip]
 80079bc:	4667      	mov	r7, ip
 80079be:	4618      	mov	r0, r3
 80079c0:	464d      	mov	r5, r9
 80079c2:	2100      	movs	r1, #0
 80079c4:	e000      	b.n	80079c8 <__multiply+0xc8>
 80079c6:	4637      	mov	r7, r6
 80079c8:	882c      	ldrh	r4, [r5, #0]
 80079ca:	0c00      	lsrs	r0, r0, #16
 80079cc:	fb0b 0004 	mla	r0, fp, r4, r0
 80079d0:	4401      	add	r1, r0
 80079d2:	b29c      	uxth	r4, r3
 80079d4:	463e      	mov	r6, r7
 80079d6:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 80079da:	f846 3b04 	str.w	r3, [r6], #4
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f855 4b04 	ldr.w	r4, [r5], #4
 80079e4:	b283      	uxth	r3, r0
 80079e6:	0c24      	lsrs	r4, r4, #16
 80079e8:	fb0b 3404 	mla	r4, fp, r4, r3
 80079ec:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 80079f0:	45ae      	cmp	lr, r5
 80079f2:	ea4f 4113 	mov.w	r1, r3, lsr #16
 80079f6:	d8e6      	bhi.n	80079c6 <__multiply+0xc6>
 80079f8:	607b      	str	r3, [r7, #4]
 80079fa:	4592      	cmp	sl, r2
 80079fc:	f10c 0c04 	add.w	ip, ip, #4
 8007a00:	d8af      	bhi.n	8007962 <__multiply+0x62>
 8007a02:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007a06:	f1b8 0f00 	cmp.w	r8, #0
 8007a0a:	dd0b      	ble.n	8007a24 <__multiply+0x124>
 8007a0c:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8007a10:	f1a9 0904 	sub.w	r9, r9, #4
 8007a14:	b11b      	cbz	r3, 8007a1e <__multiply+0x11e>
 8007a16:	e005      	b.n	8007a24 <__multiply+0x124>
 8007a18:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8007a1c:	b913      	cbnz	r3, 8007a24 <__multiply+0x124>
 8007a1e:	f1b8 0801 	subs.w	r8, r8, #1
 8007a22:	d1f9      	bne.n	8007a18 <__multiply+0x118>
 8007a24:	9800      	ldr	r0, [sp, #0]
 8007a26:	f8c0 8010 	str.w	r8, [r0, #16]
 8007a2a:	b003      	add	sp, #12
 8007a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a30 <__pow5mult>:
 8007a30:	f012 0303 	ands.w	r3, r2, #3
 8007a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a38:	4614      	mov	r4, r2
 8007a3a:	4607      	mov	r7, r0
 8007a3c:	d12e      	bne.n	8007a9c <__pow5mult+0x6c>
 8007a3e:	460e      	mov	r6, r1
 8007a40:	10a4      	asrs	r4, r4, #2
 8007a42:	d01c      	beq.n	8007a7e <__pow5mult+0x4e>
 8007a44:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8007a46:	b395      	cbz	r5, 8007aae <__pow5mult+0x7e>
 8007a48:	07e3      	lsls	r3, r4, #31
 8007a4a:	f04f 0800 	mov.w	r8, #0
 8007a4e:	d406      	bmi.n	8007a5e <__pow5mult+0x2e>
 8007a50:	1064      	asrs	r4, r4, #1
 8007a52:	d014      	beq.n	8007a7e <__pow5mult+0x4e>
 8007a54:	6828      	ldr	r0, [r5, #0]
 8007a56:	b1a8      	cbz	r0, 8007a84 <__pow5mult+0x54>
 8007a58:	4605      	mov	r5, r0
 8007a5a:	07e3      	lsls	r3, r4, #31
 8007a5c:	d5f8      	bpl.n	8007a50 <__pow5mult+0x20>
 8007a5e:	462a      	mov	r2, r5
 8007a60:	4631      	mov	r1, r6
 8007a62:	4638      	mov	r0, r7
 8007a64:	f7ff ff4c 	bl	8007900 <__multiply>
 8007a68:	b1b6      	cbz	r6, 8007a98 <__pow5mult+0x68>
 8007a6a:	6872      	ldr	r2, [r6, #4]
 8007a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a6e:	1064      	asrs	r4, r4, #1
 8007a70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a74:	6031      	str	r1, [r6, #0]
 8007a76:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	d1ea      	bne.n	8007a54 <__pow5mult+0x24>
 8007a7e:	4630      	mov	r0, r6
 8007a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a84:	462a      	mov	r2, r5
 8007a86:	4629      	mov	r1, r5
 8007a88:	4638      	mov	r0, r7
 8007a8a:	f7ff ff39 	bl	8007900 <__multiply>
 8007a8e:	6028      	str	r0, [r5, #0]
 8007a90:	f8c0 8000 	str.w	r8, [r0]
 8007a94:	4605      	mov	r5, r0
 8007a96:	e7e0      	b.n	8007a5a <__pow5mult+0x2a>
 8007a98:	4606      	mov	r6, r0
 8007a9a:	e7d9      	b.n	8007a50 <__pow5mult+0x20>
 8007a9c:	1e5a      	subs	r2, r3, #1
 8007a9e:	4d0b      	ldr	r5, [pc, #44]	; (8007acc <__pow5mult+0x9c>)
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8007aa6:	f7ff fe93 	bl	80077d0 <__multadd>
 8007aaa:	4606      	mov	r6, r0
 8007aac:	e7c8      	b.n	8007a40 <__pow5mult+0x10>
 8007aae:	2101      	movs	r1, #1
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	f7ff fe5d 	bl	8007770 <_Balloc>
 8007ab6:	f240 2171 	movw	r1, #625	; 0x271
 8007aba:	2201      	movs	r2, #1
 8007abc:	2300      	movs	r3, #0
 8007abe:	6141      	str	r1, [r0, #20]
 8007ac0:	6102      	str	r2, [r0, #16]
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	64b8      	str	r0, [r7, #72]	; 0x48
 8007ac6:	6003      	str	r3, [r0, #0]
 8007ac8:	e7be      	b.n	8007a48 <__pow5mult+0x18>
 8007aca:	bf00      	nop
 8007acc:	08009790 	.word	0x08009790

08007ad0 <__lshift>:
 8007ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad4:	4691      	mov	r9, r2
 8007ad6:	690a      	ldr	r2, [r1, #16]
 8007ad8:	688b      	ldr	r3, [r1, #8]
 8007ada:	ea4f 1469 	mov.w	r4, r9, asr #5
 8007ade:	eb04 0802 	add.w	r8, r4, r2
 8007ae2:	f108 0501 	add.w	r5, r8, #1
 8007ae6:	429d      	cmp	r5, r3
 8007ae8:	460e      	mov	r6, r1
 8007aea:	4682      	mov	sl, r0
 8007aec:	6849      	ldr	r1, [r1, #4]
 8007aee:	dd04      	ble.n	8007afa <__lshift+0x2a>
 8007af0:	005b      	lsls	r3, r3, #1
 8007af2:	429d      	cmp	r5, r3
 8007af4:	f101 0101 	add.w	r1, r1, #1
 8007af8:	dcfa      	bgt.n	8007af0 <__lshift+0x20>
 8007afa:	4650      	mov	r0, sl
 8007afc:	f7ff fe38 	bl	8007770 <_Balloc>
 8007b00:	2c00      	cmp	r4, #0
 8007b02:	f100 0214 	add.w	r2, r0, #20
 8007b06:	dd38      	ble.n	8007b7a <__lshift+0xaa>
 8007b08:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	f842 1b04 	str.w	r1, [r2], #4
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d1fb      	bne.n	8007b0e <__lshift+0x3e>
 8007b16:	6934      	ldr	r4, [r6, #16]
 8007b18:	f106 0114 	add.w	r1, r6, #20
 8007b1c:	f019 091f 	ands.w	r9, r9, #31
 8007b20:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8007b24:	d021      	beq.n	8007b6a <__lshift+0x9a>
 8007b26:	f1c9 0220 	rsb	r2, r9, #32
 8007b2a:	2400      	movs	r4, #0
 8007b2c:	680f      	ldr	r7, [r1, #0]
 8007b2e:	fa07 fc09 	lsl.w	ip, r7, r9
 8007b32:	ea4c 0404 	orr.w	r4, ip, r4
 8007b36:	469c      	mov	ip, r3
 8007b38:	f843 4b04 	str.w	r4, [r3], #4
 8007b3c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007b40:	458e      	cmp	lr, r1
 8007b42:	fa24 f402 	lsr.w	r4, r4, r2
 8007b46:	d8f1      	bhi.n	8007b2c <__lshift+0x5c>
 8007b48:	f8cc 4004 	str.w	r4, [ip, #4]
 8007b4c:	b10c      	cbz	r4, 8007b52 <__lshift+0x82>
 8007b4e:	f108 0502 	add.w	r5, r8, #2
 8007b52:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8007b56:	6872      	ldr	r2, [r6, #4]
 8007b58:	3d01      	subs	r5, #1
 8007b5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b5e:	6105      	str	r5, [r0, #16]
 8007b60:	6031      	str	r1, [r6, #0]
 8007b62:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8007b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b6a:	3b04      	subs	r3, #4
 8007b6c:	f851 2b04 	ldr.w	r2, [r1], #4
 8007b70:	f843 2f04 	str.w	r2, [r3, #4]!
 8007b74:	458e      	cmp	lr, r1
 8007b76:	d8f9      	bhi.n	8007b6c <__lshift+0x9c>
 8007b78:	e7eb      	b.n	8007b52 <__lshift+0x82>
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	e7cb      	b.n	8007b16 <__lshift+0x46>
 8007b7e:	bf00      	nop

08007b80 <__mcmp>:
 8007b80:	6902      	ldr	r2, [r0, #16]
 8007b82:	690b      	ldr	r3, [r1, #16]
 8007b84:	1ad2      	subs	r2, r2, r3
 8007b86:	d113      	bne.n	8007bb0 <__mcmp+0x30>
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	3014      	adds	r0, #20
 8007b8c:	3114      	adds	r1, #20
 8007b8e:	4419      	add	r1, r3
 8007b90:	b410      	push	{r4}
 8007b92:	4403      	add	r3, r0
 8007b94:	e001      	b.n	8007b9a <__mcmp+0x1a>
 8007b96:	4298      	cmp	r0, r3
 8007b98:	d20c      	bcs.n	8007bb4 <__mcmp+0x34>
 8007b9a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007b9e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ba2:	4294      	cmp	r4, r2
 8007ba4:	d0f7      	beq.n	8007b96 <__mcmp+0x16>
 8007ba6:	d309      	bcc.n	8007bbc <__mcmp+0x3c>
 8007ba8:	2001      	movs	r0, #1
 8007baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4770      	bx	lr
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc0:	e7f3      	b.n	8007baa <__mcmp+0x2a>
 8007bc2:	bf00      	nop

08007bc4 <__mdiff>:
 8007bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bc8:	690b      	ldr	r3, [r1, #16]
 8007bca:	460f      	mov	r7, r1
 8007bcc:	6911      	ldr	r1, [r2, #16]
 8007bce:	1a5b      	subs	r3, r3, r1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	4690      	mov	r8, r2
 8007bd4:	d117      	bne.n	8007c06 <__mdiff+0x42>
 8007bd6:	0089      	lsls	r1, r1, #2
 8007bd8:	f107 0214 	add.w	r2, r7, #20
 8007bdc:	f108 0514 	add.w	r5, r8, #20
 8007be0:	1853      	adds	r3, r2, r1
 8007be2:	4429      	add	r1, r5
 8007be4:	e001      	b.n	8007bea <__mdiff+0x26>
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d25e      	bcs.n	8007ca8 <__mdiff+0xe4>
 8007bea:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 8007bee:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007bf2:	42a6      	cmp	r6, r4
 8007bf4:	d0f7      	beq.n	8007be6 <__mdiff+0x22>
 8007bf6:	d260      	bcs.n	8007cba <__mdiff+0xf6>
 8007bf8:	463b      	mov	r3, r7
 8007bfa:	4614      	mov	r4, r2
 8007bfc:	4647      	mov	r7, r8
 8007bfe:	f04f 0901 	mov.w	r9, #1
 8007c02:	4698      	mov	r8, r3
 8007c04:	e006      	b.n	8007c14 <__mdiff+0x50>
 8007c06:	db5d      	blt.n	8007cc4 <__mdiff+0x100>
 8007c08:	f107 0514 	add.w	r5, r7, #20
 8007c0c:	f102 0414 	add.w	r4, r2, #20
 8007c10:	f04f 0900 	mov.w	r9, #0
 8007c14:	6879      	ldr	r1, [r7, #4]
 8007c16:	f7ff fdab 	bl	8007770 <_Balloc>
 8007c1a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007c1e:	693e      	ldr	r6, [r7, #16]
 8007c20:	f8c0 900c 	str.w	r9, [r0, #12]
 8007c24:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8007c28:	46a6      	mov	lr, r4
 8007c2a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8007c2e:	f100 0414 	add.w	r4, r0, #20
 8007c32:	2300      	movs	r3, #0
 8007c34:	f85e 1b04 	ldr.w	r1, [lr], #4
 8007c38:	f855 8b04 	ldr.w	r8, [r5], #4
 8007c3c:	b28a      	uxth	r2, r1
 8007c3e:	fa13 f388 	uxtah	r3, r3, r8
 8007c42:	0c09      	lsrs	r1, r1, #16
 8007c44:	1a9a      	subs	r2, r3, r2
 8007c46:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 8007c4a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8007c4e:	b292      	uxth	r2, r2
 8007c50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c54:	45f4      	cmp	ip, lr
 8007c56:	f844 2b04 	str.w	r2, [r4], #4
 8007c5a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8007c5e:	d8e9      	bhi.n	8007c34 <__mdiff+0x70>
 8007c60:	42af      	cmp	r7, r5
 8007c62:	d917      	bls.n	8007c94 <__mdiff+0xd0>
 8007c64:	46a4      	mov	ip, r4
 8007c66:	4629      	mov	r1, r5
 8007c68:	f851 eb04 	ldr.w	lr, [r1], #4
 8007c6c:	fa13 f28e 	uxtah	r2, r3, lr
 8007c70:	1413      	asrs	r3, r2, #16
 8007c72:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 8007c76:	b292      	uxth	r2, r2
 8007c78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c7c:	428f      	cmp	r7, r1
 8007c7e:	f84c 2b04 	str.w	r2, [ip], #4
 8007c82:	ea4f 4323 	mov.w	r3, r3, asr #16
 8007c86:	d8ef      	bhi.n	8007c68 <__mdiff+0xa4>
 8007c88:	43ed      	mvns	r5, r5
 8007c8a:	443d      	add	r5, r7
 8007c8c:	f025 0503 	bic.w	r5, r5, #3
 8007c90:	3504      	adds	r5, #4
 8007c92:	442c      	add	r4, r5
 8007c94:	3c04      	subs	r4, #4
 8007c96:	b922      	cbnz	r2, 8007ca2 <__mdiff+0xde>
 8007c98:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8007c9c:	3e01      	subs	r6, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0fa      	beq.n	8007c98 <__mdiff+0xd4>
 8007ca2:	6106      	str	r6, [r0, #16]
 8007ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ca8:	2100      	movs	r1, #0
 8007caa:	f7ff fd61 	bl	8007770 <_Balloc>
 8007cae:	2201      	movs	r2, #1
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	6102      	str	r2, [r0, #16]
 8007cb4:	6143      	str	r3, [r0, #20]
 8007cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cba:	462c      	mov	r4, r5
 8007cbc:	f04f 0900 	mov.w	r9, #0
 8007cc0:	4615      	mov	r5, r2
 8007cc2:	e7a7      	b.n	8007c14 <__mdiff+0x50>
 8007cc4:	463b      	mov	r3, r7
 8007cc6:	f107 0414 	add.w	r4, r7, #20
 8007cca:	f108 0514 	add.w	r5, r8, #20
 8007cce:	4647      	mov	r7, r8
 8007cd0:	f04f 0901 	mov.w	r9, #1
 8007cd4:	4698      	mov	r8, r3
 8007cd6:	e79d      	b.n	8007c14 <__mdiff+0x50>

08007cd8 <__d2b>:
 8007cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	2101      	movs	r1, #1
 8007ce0:	461c      	mov	r4, r3
 8007ce2:	f3c3 550a 	ubfx	r5, r3, #20, #11
 8007ce6:	4617      	mov	r7, r2
 8007ce8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007cea:	f7ff fd41 	bl	8007770 <_Balloc>
 8007cee:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007cf2:	4681      	mov	r9, r0
 8007cf4:	b10d      	cbz	r5, 8007cfa <__d2b+0x22>
 8007cf6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8007cfa:	9401      	str	r4, [sp, #4]
 8007cfc:	b31f      	cbz	r7, 8007d46 <__d2b+0x6e>
 8007cfe:	a802      	add	r0, sp, #8
 8007d00:	f840 7d08 	str.w	r7, [r0, #-8]!
 8007d04:	f7ff fdc4 	bl	8007890 <__lo0bits>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d135      	bne.n	8007d78 <__d2b+0xa0>
 8007d0c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007d10:	f8c9 2014 	str.w	r2, [r9, #20]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	bf0c      	ite	eq
 8007d18:	2101      	moveq	r1, #1
 8007d1a:	2102      	movne	r1, #2
 8007d1c:	f8c9 3018 	str.w	r3, [r9, #24]
 8007d20:	f8c9 1010 	str.w	r1, [r9, #16]
 8007d24:	b9dd      	cbnz	r5, 8007d5e <__d2b+0x86>
 8007d26:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 8007d2a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d2e:	6030      	str	r0, [r6, #0]
 8007d30:	6918      	ldr	r0, [r3, #16]
 8007d32:	f7ff fd8d 	bl	8007850 <__hi0bits>
 8007d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d38:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007d3c:	6018      	str	r0, [r3, #0]
 8007d3e:	4648      	mov	r0, r9
 8007d40:	b003      	add	sp, #12
 8007d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d46:	a801      	add	r0, sp, #4
 8007d48:	f7ff fda2 	bl	8007890 <__lo0bits>
 8007d4c:	9b01      	ldr	r3, [sp, #4]
 8007d4e:	f8c9 3014 	str.w	r3, [r9, #20]
 8007d52:	2101      	movs	r1, #1
 8007d54:	3020      	adds	r0, #32
 8007d56:	f8c9 1010 	str.w	r1, [r9, #16]
 8007d5a:	2d00      	cmp	r5, #0
 8007d5c:	d0e3      	beq.n	8007d26 <__d2b+0x4e>
 8007d5e:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 8007d62:	eb08 0300 	add.w	r3, r8, r0
 8007d66:	6033      	str	r3, [r6, #0]
 8007d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d6a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d6e:	6018      	str	r0, [r3, #0]
 8007d70:	4648      	mov	r0, r9
 8007d72:	b003      	add	sp, #12
 8007d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d78:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007d7c:	f1c0 0120 	rsb	r1, r0, #32
 8007d80:	fa03 f101 	lsl.w	r1, r3, r1
 8007d84:	430a      	orrs	r2, r1
 8007d86:	40c3      	lsrs	r3, r0
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	f8c9 2014 	str.w	r2, [r9, #20]
 8007d8e:	e7c1      	b.n	8007d14 <__d2b+0x3c>

08007d90 <_realloc_r>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	4617      	mov	r7, r2
 8007d96:	b083      	sub	sp, #12
 8007d98:	2900      	cmp	r1, #0
 8007d9a:	f000 80c1 	beq.w	8007f20 <_realloc_r+0x190>
 8007d9e:	460e      	mov	r6, r1
 8007da0:	4681      	mov	r9, r0
 8007da2:	f107 050b 	add.w	r5, r7, #11
 8007da6:	f7ff fcdf 	bl	8007768 <__malloc_lock>
 8007daa:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8007dae:	2d16      	cmp	r5, #22
 8007db0:	f02e 0403 	bic.w	r4, lr, #3
 8007db4:	f1a6 0808 	sub.w	r8, r6, #8
 8007db8:	d840      	bhi.n	8007e3c <_realloc_r+0xac>
 8007dba:	2210      	movs	r2, #16
 8007dbc:	4615      	mov	r5, r2
 8007dbe:	42af      	cmp	r7, r5
 8007dc0:	d841      	bhi.n	8007e46 <_realloc_r+0xb6>
 8007dc2:	4294      	cmp	r4, r2
 8007dc4:	da75      	bge.n	8007eb2 <_realloc_r+0x122>
 8007dc6:	4bc9      	ldr	r3, [pc, #804]	; (80080ec <_realloc_r+0x35c>)
 8007dc8:	6899      	ldr	r1, [r3, #8]
 8007dca:	eb08 0004 	add.w	r0, r8, r4
 8007dce:	4288      	cmp	r0, r1
 8007dd0:	6841      	ldr	r1, [r0, #4]
 8007dd2:	f000 80d9 	beq.w	8007f88 <_realloc_r+0x1f8>
 8007dd6:	f021 0301 	bic.w	r3, r1, #1
 8007dda:	4403      	add	r3, r0
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	07db      	lsls	r3, r3, #31
 8007de0:	d57d      	bpl.n	8007ede <_realloc_r+0x14e>
 8007de2:	f01e 0f01 	tst.w	lr, #1
 8007de6:	d035      	beq.n	8007e54 <_realloc_r+0xc4>
 8007de8:	4639      	mov	r1, r7
 8007dea:	4648      	mov	r0, r9
 8007dec:	f7ff f950 	bl	8007090 <_malloc_r>
 8007df0:	4607      	mov	r7, r0
 8007df2:	b1e0      	cbz	r0, 8007e2e <_realloc_r+0x9e>
 8007df4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007df8:	f023 0301 	bic.w	r3, r3, #1
 8007dfc:	4443      	add	r3, r8
 8007dfe:	f1a0 0208 	sub.w	r2, r0, #8
 8007e02:	429a      	cmp	r2, r3
 8007e04:	f000 8144 	beq.w	8008090 <_realloc_r+0x300>
 8007e08:	1f22      	subs	r2, r4, #4
 8007e0a:	2a24      	cmp	r2, #36	; 0x24
 8007e0c:	f200 8131 	bhi.w	8008072 <_realloc_r+0x2e2>
 8007e10:	2a13      	cmp	r2, #19
 8007e12:	f200 8104 	bhi.w	800801e <_realloc_r+0x28e>
 8007e16:	4603      	mov	r3, r0
 8007e18:	4632      	mov	r2, r6
 8007e1a:	6811      	ldr	r1, [r2, #0]
 8007e1c:	6019      	str	r1, [r3, #0]
 8007e1e:	6851      	ldr	r1, [r2, #4]
 8007e20:	6059      	str	r1, [r3, #4]
 8007e22:	6892      	ldr	r2, [r2, #8]
 8007e24:	609a      	str	r2, [r3, #8]
 8007e26:	4631      	mov	r1, r6
 8007e28:	4648      	mov	r0, r9
 8007e2a:	f7fe fe1b 	bl	8006a64 <_free_r>
 8007e2e:	4648      	mov	r0, r9
 8007e30:	f7ff fc9c 	bl	800776c <__malloc_unlock>
 8007e34:	4638      	mov	r0, r7
 8007e36:	b003      	add	sp, #12
 8007e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3c:	f025 0507 	bic.w	r5, r5, #7
 8007e40:	2d00      	cmp	r5, #0
 8007e42:	462a      	mov	r2, r5
 8007e44:	dabb      	bge.n	8007dbe <_realloc_r+0x2e>
 8007e46:	230c      	movs	r3, #12
 8007e48:	2000      	movs	r0, #0
 8007e4a:	f8c9 3000 	str.w	r3, [r9]
 8007e4e:	b003      	add	sp, #12
 8007e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e54:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007e58:	ebc3 0a08 	rsb	sl, r3, r8
 8007e5c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007e60:	f023 0c03 	bic.w	ip, r3, #3
 8007e64:	eb04 030c 	add.w	r3, r4, ip
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	dbbd      	blt.n	8007de8 <_realloc_r+0x58>
 8007e6c:	4657      	mov	r7, sl
 8007e6e:	f8da 100c 	ldr.w	r1, [sl, #12]
 8007e72:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8007e76:	1f22      	subs	r2, r4, #4
 8007e78:	2a24      	cmp	r2, #36	; 0x24
 8007e7a:	60c1      	str	r1, [r0, #12]
 8007e7c:	6088      	str	r0, [r1, #8]
 8007e7e:	f200 8117 	bhi.w	80080b0 <_realloc_r+0x320>
 8007e82:	2a13      	cmp	r2, #19
 8007e84:	f240 8112 	bls.w	80080ac <_realloc_r+0x31c>
 8007e88:	6831      	ldr	r1, [r6, #0]
 8007e8a:	f8ca 1008 	str.w	r1, [sl, #8]
 8007e8e:	6871      	ldr	r1, [r6, #4]
 8007e90:	f8ca 100c 	str.w	r1, [sl, #12]
 8007e94:	2a1b      	cmp	r2, #27
 8007e96:	f200 812b 	bhi.w	80080f0 <_realloc_r+0x360>
 8007e9a:	3608      	adds	r6, #8
 8007e9c:	f10a 0210 	add.w	r2, sl, #16
 8007ea0:	6831      	ldr	r1, [r6, #0]
 8007ea2:	6011      	str	r1, [r2, #0]
 8007ea4:	6871      	ldr	r1, [r6, #4]
 8007ea6:	6051      	str	r1, [r2, #4]
 8007ea8:	68b1      	ldr	r1, [r6, #8]
 8007eaa:	6091      	str	r1, [r2, #8]
 8007eac:	463e      	mov	r6, r7
 8007eae:	461c      	mov	r4, r3
 8007eb0:	46d0      	mov	r8, sl
 8007eb2:	1b63      	subs	r3, r4, r5
 8007eb4:	2b0f      	cmp	r3, #15
 8007eb6:	d81d      	bhi.n	8007ef4 <_realloc_r+0x164>
 8007eb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	4323      	orrs	r3, r4
 8007ec2:	4444      	add	r4, r8
 8007ec4:	f8c8 3004 	str.w	r3, [r8, #4]
 8007ec8:	6863      	ldr	r3, [r4, #4]
 8007eca:	f043 0301 	orr.w	r3, r3, #1
 8007ece:	6063      	str	r3, [r4, #4]
 8007ed0:	4648      	mov	r0, r9
 8007ed2:	f7ff fc4b 	bl	800776c <__malloc_unlock>
 8007ed6:	4630      	mov	r0, r6
 8007ed8:	b003      	add	sp, #12
 8007eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ede:	f021 0103 	bic.w	r1, r1, #3
 8007ee2:	4421      	add	r1, r4
 8007ee4:	4291      	cmp	r1, r2
 8007ee6:	db21      	blt.n	8007f2c <_realloc_r+0x19c>
 8007ee8:	68c3      	ldr	r3, [r0, #12]
 8007eea:	6882      	ldr	r2, [r0, #8]
 8007eec:	460c      	mov	r4, r1
 8007eee:	60d3      	str	r3, [r2, #12]
 8007ef0:	609a      	str	r2, [r3, #8]
 8007ef2:	e7de      	b.n	8007eb2 <_realloc_r+0x122>
 8007ef4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007ef8:	eb08 0105 	add.w	r1, r8, r5
 8007efc:	f002 0201 	and.w	r2, r2, #1
 8007f00:	4315      	orrs	r5, r2
 8007f02:	f043 0201 	orr.w	r2, r3, #1
 8007f06:	440b      	add	r3, r1
 8007f08:	f8c8 5004 	str.w	r5, [r8, #4]
 8007f0c:	604a      	str	r2, [r1, #4]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	f042 0201 	orr.w	r2, r2, #1
 8007f14:	3108      	adds	r1, #8
 8007f16:	605a      	str	r2, [r3, #4]
 8007f18:	4648      	mov	r0, r9
 8007f1a:	f7fe fda3 	bl	8006a64 <_free_r>
 8007f1e:	e7d7      	b.n	8007ed0 <_realloc_r+0x140>
 8007f20:	4611      	mov	r1, r2
 8007f22:	b003      	add	sp, #12
 8007f24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f28:	f7ff b8b2 	b.w	8007090 <_malloc_r>
 8007f2c:	f01e 0f01 	tst.w	lr, #1
 8007f30:	f47f af5a 	bne.w	8007de8 <_realloc_r+0x58>
 8007f34:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007f38:	ebc3 0a08 	rsb	sl, r3, r8
 8007f3c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007f40:	f023 0c03 	bic.w	ip, r3, #3
 8007f44:	eb01 0e0c 	add.w	lr, r1, ip
 8007f48:	4596      	cmp	lr, r2
 8007f4a:	db8b      	blt.n	8007e64 <_realloc_r+0xd4>
 8007f4c:	68c3      	ldr	r3, [r0, #12]
 8007f4e:	6882      	ldr	r2, [r0, #8]
 8007f50:	4657      	mov	r7, sl
 8007f52:	60d3      	str	r3, [r2, #12]
 8007f54:	609a      	str	r2, [r3, #8]
 8007f56:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8007f5a:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007f5e:	60cb      	str	r3, [r1, #12]
 8007f60:	1f22      	subs	r2, r4, #4
 8007f62:	2a24      	cmp	r2, #36	; 0x24
 8007f64:	6099      	str	r1, [r3, #8]
 8007f66:	f200 8099 	bhi.w	800809c <_realloc_r+0x30c>
 8007f6a:	2a13      	cmp	r2, #19
 8007f6c:	d962      	bls.n	8008034 <_realloc_r+0x2a4>
 8007f6e:	6833      	ldr	r3, [r6, #0]
 8007f70:	f8ca 3008 	str.w	r3, [sl, #8]
 8007f74:	6873      	ldr	r3, [r6, #4]
 8007f76:	f8ca 300c 	str.w	r3, [sl, #12]
 8007f7a:	2a1b      	cmp	r2, #27
 8007f7c:	f200 80a0 	bhi.w	80080c0 <_realloc_r+0x330>
 8007f80:	3608      	adds	r6, #8
 8007f82:	f10a 0310 	add.w	r3, sl, #16
 8007f86:	e056      	b.n	8008036 <_realloc_r+0x2a6>
 8007f88:	f021 0b03 	bic.w	fp, r1, #3
 8007f8c:	44a3      	add	fp, r4
 8007f8e:	f105 0010 	add.w	r0, r5, #16
 8007f92:	4583      	cmp	fp, r0
 8007f94:	da59      	bge.n	800804a <_realloc_r+0x2ba>
 8007f96:	f01e 0f01 	tst.w	lr, #1
 8007f9a:	f47f af25 	bne.w	8007de8 <_realloc_r+0x58>
 8007f9e:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8007fa2:	ebc1 0a08 	rsb	sl, r1, r8
 8007fa6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007faa:	f021 0c03 	bic.w	ip, r1, #3
 8007fae:	44e3      	add	fp, ip
 8007fb0:	4558      	cmp	r0, fp
 8007fb2:	f73f af57 	bgt.w	8007e64 <_realloc_r+0xd4>
 8007fb6:	4657      	mov	r7, sl
 8007fb8:	f8da 100c 	ldr.w	r1, [sl, #12]
 8007fbc:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8007fc0:	1f22      	subs	r2, r4, #4
 8007fc2:	2a24      	cmp	r2, #36	; 0x24
 8007fc4:	60c1      	str	r1, [r0, #12]
 8007fc6:	6088      	str	r0, [r1, #8]
 8007fc8:	f200 80b4 	bhi.w	8008134 <_realloc_r+0x3a4>
 8007fcc:	2a13      	cmp	r2, #19
 8007fce:	f240 80a5 	bls.w	800811c <_realloc_r+0x38c>
 8007fd2:	6831      	ldr	r1, [r6, #0]
 8007fd4:	f8ca 1008 	str.w	r1, [sl, #8]
 8007fd8:	6871      	ldr	r1, [r6, #4]
 8007fda:	f8ca 100c 	str.w	r1, [sl, #12]
 8007fde:	2a1b      	cmp	r2, #27
 8007fe0:	f200 80af 	bhi.w	8008142 <_realloc_r+0x3b2>
 8007fe4:	3608      	adds	r6, #8
 8007fe6:	f10a 0210 	add.w	r2, sl, #16
 8007fea:	6831      	ldr	r1, [r6, #0]
 8007fec:	6011      	str	r1, [r2, #0]
 8007fee:	6871      	ldr	r1, [r6, #4]
 8007ff0:	6051      	str	r1, [r2, #4]
 8007ff2:	68b1      	ldr	r1, [r6, #8]
 8007ff4:	6091      	str	r1, [r2, #8]
 8007ff6:	eb0a 0105 	add.w	r1, sl, r5
 8007ffa:	ebc5 020b 	rsb	r2, r5, fp
 8007ffe:	f042 0201 	orr.w	r2, r2, #1
 8008002:	6099      	str	r1, [r3, #8]
 8008004:	604a      	str	r2, [r1, #4]
 8008006:	f8da 3004 	ldr.w	r3, [sl, #4]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	431d      	orrs	r5, r3
 8008010:	4648      	mov	r0, r9
 8008012:	f8ca 5004 	str.w	r5, [sl, #4]
 8008016:	f7ff fba9 	bl	800776c <__malloc_unlock>
 800801a:	4638      	mov	r0, r7
 800801c:	e75c      	b.n	8007ed8 <_realloc_r+0x148>
 800801e:	6833      	ldr	r3, [r6, #0]
 8008020:	6003      	str	r3, [r0, #0]
 8008022:	6873      	ldr	r3, [r6, #4]
 8008024:	6043      	str	r3, [r0, #4]
 8008026:	2a1b      	cmp	r2, #27
 8008028:	d827      	bhi.n	800807a <_realloc_r+0x2ea>
 800802a:	f100 0308 	add.w	r3, r0, #8
 800802e:	f106 0208 	add.w	r2, r6, #8
 8008032:	e6f2      	b.n	8007e1a <_realloc_r+0x8a>
 8008034:	463b      	mov	r3, r7
 8008036:	6832      	ldr	r2, [r6, #0]
 8008038:	601a      	str	r2, [r3, #0]
 800803a:	6872      	ldr	r2, [r6, #4]
 800803c:	605a      	str	r2, [r3, #4]
 800803e:	68b2      	ldr	r2, [r6, #8]
 8008040:	609a      	str	r2, [r3, #8]
 8008042:	463e      	mov	r6, r7
 8008044:	4674      	mov	r4, lr
 8008046:	46d0      	mov	r8, sl
 8008048:	e733      	b.n	8007eb2 <_realloc_r+0x122>
 800804a:	eb08 0105 	add.w	r1, r8, r5
 800804e:	ebc5 0b0b 	rsb	fp, r5, fp
 8008052:	f04b 0201 	orr.w	r2, fp, #1
 8008056:	6099      	str	r1, [r3, #8]
 8008058:	604a      	str	r2, [r1, #4]
 800805a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	431d      	orrs	r5, r3
 8008064:	4648      	mov	r0, r9
 8008066:	f846 5c04 	str.w	r5, [r6, #-4]
 800806a:	f7ff fb7f 	bl	800776c <__malloc_unlock>
 800806e:	4630      	mov	r0, r6
 8008070:	e732      	b.n	8007ed8 <_realloc_r+0x148>
 8008072:	4631      	mov	r1, r6
 8008074:	f7ff fb14 	bl	80076a0 <memmove>
 8008078:	e6d5      	b.n	8007e26 <_realloc_r+0x96>
 800807a:	68b3      	ldr	r3, [r6, #8]
 800807c:	6083      	str	r3, [r0, #8]
 800807e:	68f3      	ldr	r3, [r6, #12]
 8008080:	60c3      	str	r3, [r0, #12]
 8008082:	2a24      	cmp	r2, #36	; 0x24
 8008084:	d028      	beq.n	80080d8 <_realloc_r+0x348>
 8008086:	f100 0310 	add.w	r3, r0, #16
 800808a:	f106 0210 	add.w	r2, r6, #16
 800808e:	e6c4      	b.n	8007e1a <_realloc_r+0x8a>
 8008090:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008094:	f023 0303 	bic.w	r3, r3, #3
 8008098:	441c      	add	r4, r3
 800809a:	e70a      	b.n	8007eb2 <_realloc_r+0x122>
 800809c:	4631      	mov	r1, r6
 800809e:	4638      	mov	r0, r7
 80080a0:	4674      	mov	r4, lr
 80080a2:	46d0      	mov	r8, sl
 80080a4:	f7ff fafc 	bl	80076a0 <memmove>
 80080a8:	463e      	mov	r6, r7
 80080aa:	e702      	b.n	8007eb2 <_realloc_r+0x122>
 80080ac:	463a      	mov	r2, r7
 80080ae:	e6f7      	b.n	8007ea0 <_realloc_r+0x110>
 80080b0:	4631      	mov	r1, r6
 80080b2:	4638      	mov	r0, r7
 80080b4:	461c      	mov	r4, r3
 80080b6:	46d0      	mov	r8, sl
 80080b8:	f7ff faf2 	bl	80076a0 <memmove>
 80080bc:	463e      	mov	r6, r7
 80080be:	e6f8      	b.n	8007eb2 <_realloc_r+0x122>
 80080c0:	68b3      	ldr	r3, [r6, #8]
 80080c2:	f8ca 3010 	str.w	r3, [sl, #16]
 80080c6:	68f3      	ldr	r3, [r6, #12]
 80080c8:	f8ca 3014 	str.w	r3, [sl, #20]
 80080cc:	2a24      	cmp	r2, #36	; 0x24
 80080ce:	d01b      	beq.n	8008108 <_realloc_r+0x378>
 80080d0:	3610      	adds	r6, #16
 80080d2:	f10a 0318 	add.w	r3, sl, #24
 80080d6:	e7ae      	b.n	8008036 <_realloc_r+0x2a6>
 80080d8:	6933      	ldr	r3, [r6, #16]
 80080da:	6103      	str	r3, [r0, #16]
 80080dc:	6973      	ldr	r3, [r6, #20]
 80080de:	6143      	str	r3, [r0, #20]
 80080e0:	f106 0218 	add.w	r2, r6, #24
 80080e4:	f100 0318 	add.w	r3, r0, #24
 80080e8:	e697      	b.n	8007e1a <_realloc_r+0x8a>
 80080ea:	bf00      	nop
 80080ec:	20000464 	.word	0x20000464
 80080f0:	68b1      	ldr	r1, [r6, #8]
 80080f2:	f8ca 1010 	str.w	r1, [sl, #16]
 80080f6:	68f1      	ldr	r1, [r6, #12]
 80080f8:	f8ca 1014 	str.w	r1, [sl, #20]
 80080fc:	2a24      	cmp	r2, #36	; 0x24
 80080fe:	d00f      	beq.n	8008120 <_realloc_r+0x390>
 8008100:	3610      	adds	r6, #16
 8008102:	f10a 0218 	add.w	r2, sl, #24
 8008106:	e6cb      	b.n	8007ea0 <_realloc_r+0x110>
 8008108:	6933      	ldr	r3, [r6, #16]
 800810a:	f8ca 3018 	str.w	r3, [sl, #24]
 800810e:	6973      	ldr	r3, [r6, #20]
 8008110:	f8ca 301c 	str.w	r3, [sl, #28]
 8008114:	3618      	adds	r6, #24
 8008116:	f10a 0320 	add.w	r3, sl, #32
 800811a:	e78c      	b.n	8008036 <_realloc_r+0x2a6>
 800811c:	463a      	mov	r2, r7
 800811e:	e764      	b.n	8007fea <_realloc_r+0x25a>
 8008120:	6932      	ldr	r2, [r6, #16]
 8008122:	f8ca 2018 	str.w	r2, [sl, #24]
 8008126:	6972      	ldr	r2, [r6, #20]
 8008128:	f8ca 201c 	str.w	r2, [sl, #28]
 800812c:	3618      	adds	r6, #24
 800812e:	f10a 0220 	add.w	r2, sl, #32
 8008132:	e6b5      	b.n	8007ea0 <_realloc_r+0x110>
 8008134:	4631      	mov	r1, r6
 8008136:	4638      	mov	r0, r7
 8008138:	9301      	str	r3, [sp, #4]
 800813a:	f7ff fab1 	bl	80076a0 <memmove>
 800813e:	9b01      	ldr	r3, [sp, #4]
 8008140:	e759      	b.n	8007ff6 <_realloc_r+0x266>
 8008142:	68b1      	ldr	r1, [r6, #8]
 8008144:	f8ca 1010 	str.w	r1, [sl, #16]
 8008148:	68f1      	ldr	r1, [r6, #12]
 800814a:	f8ca 1014 	str.w	r1, [sl, #20]
 800814e:	2a24      	cmp	r2, #36	; 0x24
 8008150:	d003      	beq.n	800815a <_realloc_r+0x3ca>
 8008152:	3610      	adds	r6, #16
 8008154:	f10a 0218 	add.w	r2, sl, #24
 8008158:	e747      	b.n	8007fea <_realloc_r+0x25a>
 800815a:	6932      	ldr	r2, [r6, #16]
 800815c:	f8ca 2018 	str.w	r2, [sl, #24]
 8008160:	6972      	ldr	r2, [r6, #20]
 8008162:	f8ca 201c 	str.w	r2, [sl, #28]
 8008166:	3618      	adds	r6, #24
 8008168:	f10a 0220 	add.w	r2, sl, #32
 800816c:	e73d      	b.n	8007fea <_realloc_r+0x25a>
 800816e:	bf00      	nop

08008170 <_sbrk_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4c07      	ldr	r4, [pc, #28]	; (8008190 <_sbrk_r+0x20>)
 8008174:	2300      	movs	r3, #0
 8008176:	4605      	mov	r5, r0
 8008178:	4608      	mov	r0, r1
 800817a:	6023      	str	r3, [r4, #0]
 800817c:	f7f9 fa68 	bl	8001650 <_sbrk>
 8008180:	1c43      	adds	r3, r0, #1
 8008182:	d000      	beq.n	8008186 <_sbrk_r+0x16>
 8008184:	bd38      	pop	{r3, r4, r5, pc}
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d0fb      	beq.n	8008184 <_sbrk_r+0x14>
 800818c:	602b      	str	r3, [r5, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	20000a7c 	.word	0x20000a7c

08008194 <__sread>:
 8008194:	b510      	push	{r4, lr}
 8008196:	460c      	mov	r4, r1
 8008198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800819c:	f000 fa5e 	bl	800865c <_read_r>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	db03      	blt.n	80081ac <__sread+0x18>
 80081a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80081a6:	4403      	add	r3, r0
 80081a8:	6523      	str	r3, [r4, #80]	; 0x50
 80081aa:	bd10      	pop	{r4, pc}
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081b2:	81a3      	strh	r3, [r4, #12]
 80081b4:	bd10      	pop	{r4, pc}
 80081b6:	bf00      	nop

080081b8 <__swrite>:
 80081b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081bc:	4616      	mov	r6, r2
 80081be:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081c2:	461f      	mov	r7, r3
 80081c4:	05d3      	lsls	r3, r2, #23
 80081c6:	460c      	mov	r4, r1
 80081c8:	4605      	mov	r5, r0
 80081ca:	d507      	bpl.n	80081dc <__swrite+0x24>
 80081cc:	2200      	movs	r2, #0
 80081ce:	2302      	movs	r3, #2
 80081d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d4:	f000 fa16 	bl	8008604 <_lseek_r>
 80081d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081e4:	81a2      	strh	r2, [r4, #12]
 80081e6:	463b      	mov	r3, r7
 80081e8:	4632      	mov	r2, r6
 80081ea:	4628      	mov	r0, r5
 80081ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081f0:	f000 b8da 	b.w	80083a8 <_write_r>

080081f4 <__sseek>:
 80081f4:	b510      	push	{r4, lr}
 80081f6:	460c      	mov	r4, r1
 80081f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081fc:	f000 fa02 	bl	8008604 <_lseek_r>
 8008200:	89a3      	ldrh	r3, [r4, #12]
 8008202:	1c42      	adds	r2, r0, #1
 8008204:	bf0e      	itee	eq
 8008206:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800820a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800820e:	6520      	strne	r0, [r4, #80]	; 0x50
 8008210:	81a3      	strh	r3, [r4, #12]
 8008212:	bd10      	pop	{r4, pc}

08008214 <__sclose>:
 8008214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008218:	f000 b90c 	b.w	8008434 <_close_r>

0800821c <__ssprint_r>:
 800821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008220:	6893      	ldr	r3, [r2, #8]
 8008222:	b083      	sub	sp, #12
 8008224:	4690      	mov	r8, r2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d072      	beq.n	8008310 <__ssprint_r+0xf4>
 800822a:	4683      	mov	fp, r0
 800822c:	f04f 0900 	mov.w	r9, #0
 8008230:	6816      	ldr	r6, [r2, #0]
 8008232:	6808      	ldr	r0, [r1, #0]
 8008234:	688b      	ldr	r3, [r1, #8]
 8008236:	460d      	mov	r5, r1
 8008238:	464c      	mov	r4, r9
 800823a:	2c00      	cmp	r4, #0
 800823c:	d045      	beq.n	80082ca <__ssprint_r+0xae>
 800823e:	429c      	cmp	r4, r3
 8008240:	461f      	mov	r7, r3
 8008242:	469a      	mov	sl, r3
 8008244:	d346      	bcc.n	80082d4 <__ssprint_r+0xb8>
 8008246:	89ab      	ldrh	r3, [r5, #12]
 8008248:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800824c:	d02d      	beq.n	80082aa <__ssprint_r+0x8e>
 800824e:	696f      	ldr	r7, [r5, #20]
 8008250:	6929      	ldr	r1, [r5, #16]
 8008252:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8008256:	ebc1 0a00 	rsb	sl, r1, r0
 800825a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800825e:	1c60      	adds	r0, r4, #1
 8008260:	107f      	asrs	r7, r7, #1
 8008262:	4450      	add	r0, sl
 8008264:	42b8      	cmp	r0, r7
 8008266:	463a      	mov	r2, r7
 8008268:	bf84      	itt	hi
 800826a:	4607      	movhi	r7, r0
 800826c:	463a      	movhi	r2, r7
 800826e:	055b      	lsls	r3, r3, #21
 8008270:	d533      	bpl.n	80082da <__ssprint_r+0xbe>
 8008272:	4611      	mov	r1, r2
 8008274:	4658      	mov	r0, fp
 8008276:	f7fe ff0b 	bl	8007090 <_malloc_r>
 800827a:	2800      	cmp	r0, #0
 800827c:	d037      	beq.n	80082ee <__ssprint_r+0xd2>
 800827e:	4652      	mov	r2, sl
 8008280:	6929      	ldr	r1, [r5, #16]
 8008282:	9001      	str	r0, [sp, #4]
 8008284:	f7fa f8b4 	bl	80023f0 <memcpy>
 8008288:	89aa      	ldrh	r2, [r5, #12]
 800828a:	9b01      	ldr	r3, [sp, #4]
 800828c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008290:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008294:	81aa      	strh	r2, [r5, #12]
 8008296:	ebca 0207 	rsb	r2, sl, r7
 800829a:	eb03 000a 	add.w	r0, r3, sl
 800829e:	616f      	str	r7, [r5, #20]
 80082a0:	612b      	str	r3, [r5, #16]
 80082a2:	6028      	str	r0, [r5, #0]
 80082a4:	60aa      	str	r2, [r5, #8]
 80082a6:	4627      	mov	r7, r4
 80082a8:	46a2      	mov	sl, r4
 80082aa:	4652      	mov	r2, sl
 80082ac:	4649      	mov	r1, r9
 80082ae:	f7ff f9f7 	bl	80076a0 <memmove>
 80082b2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80082b6:	68ab      	ldr	r3, [r5, #8]
 80082b8:	6828      	ldr	r0, [r5, #0]
 80082ba:	1bdb      	subs	r3, r3, r7
 80082bc:	4450      	add	r0, sl
 80082be:	1b14      	subs	r4, r2, r4
 80082c0:	60ab      	str	r3, [r5, #8]
 80082c2:	6028      	str	r0, [r5, #0]
 80082c4:	f8c8 4008 	str.w	r4, [r8, #8]
 80082c8:	b314      	cbz	r4, 8008310 <__ssprint_r+0xf4>
 80082ca:	f8d6 9000 	ldr.w	r9, [r6]
 80082ce:	6874      	ldr	r4, [r6, #4]
 80082d0:	3608      	adds	r6, #8
 80082d2:	e7b2      	b.n	800823a <__ssprint_r+0x1e>
 80082d4:	4627      	mov	r7, r4
 80082d6:	46a2      	mov	sl, r4
 80082d8:	e7e7      	b.n	80082aa <__ssprint_r+0x8e>
 80082da:	4658      	mov	r0, fp
 80082dc:	f7ff fd58 	bl	8007d90 <_realloc_r>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d1d7      	bne.n	8008296 <__ssprint_r+0x7a>
 80082e6:	6929      	ldr	r1, [r5, #16]
 80082e8:	4658      	mov	r0, fp
 80082ea:	f7fe fbbb 	bl	8006a64 <_free_r>
 80082ee:	230c      	movs	r3, #12
 80082f0:	f8cb 3000 	str.w	r3, [fp]
 80082f4:	89ab      	ldrh	r3, [r5, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008300:	81ab      	strh	r3, [r5, #12]
 8008302:	f8c8 2008 	str.w	r2, [r8, #8]
 8008306:	f8c8 2004 	str.w	r2, [r8, #4]
 800830a:	b003      	add	sp, #12
 800830c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008310:	2000      	movs	r0, #0
 8008312:	f8c8 0004 	str.w	r0, [r8, #4]
 8008316:	b003      	add	sp, #12
 8008318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800831c <__sprint_r.part.0>:
 800831c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800831e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008322:	049c      	lsls	r4, r3, #18
 8008324:	4692      	mov	sl, r2
 8008326:	d52c      	bpl.n	8008382 <__sprint_r.part.0+0x66>
 8008328:	6893      	ldr	r3, [r2, #8]
 800832a:	6812      	ldr	r2, [r2, #0]
 800832c:	b33b      	cbz	r3, 800837e <__sprint_r.part.0+0x62>
 800832e:	460f      	mov	r7, r1
 8008330:	4680      	mov	r8, r0
 8008332:	f102 0908 	add.w	r9, r2, #8
 8008336:	e919 0060 	ldmdb	r9, {r5, r6}
 800833a:	08b6      	lsrs	r6, r6, #2
 800833c:	d017      	beq.n	800836e <__sprint_r.part.0+0x52>
 800833e:	3d04      	subs	r5, #4
 8008340:	2400      	movs	r4, #0
 8008342:	e001      	b.n	8008348 <__sprint_r.part.0+0x2c>
 8008344:	42a6      	cmp	r6, r4
 8008346:	d010      	beq.n	800836a <__sprint_r.part.0+0x4e>
 8008348:	463a      	mov	r2, r7
 800834a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800834e:	4640      	mov	r0, r8
 8008350:	f000 f910 	bl	8008574 <_fputwc_r>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	f104 0401 	add.w	r4, r4, #1
 800835a:	d1f3      	bne.n	8008344 <__sprint_r.part.0+0x28>
 800835c:	2300      	movs	r3, #0
 800835e:	f8ca 3008 	str.w	r3, [sl, #8]
 8008362:	f8ca 3004 	str.w	r3, [sl, #4]
 8008366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800836a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800836e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 8008372:	f8ca 3008 	str.w	r3, [sl, #8]
 8008376:	f109 0908 	add.w	r9, r9, #8
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1db      	bne.n	8008336 <__sprint_r.part.0+0x1a>
 800837e:	2000      	movs	r0, #0
 8008380:	e7ec      	b.n	800835c <__sprint_r.part.0+0x40>
 8008382:	f7fe fc57 	bl	8006c34 <__sfvwrite_r>
 8008386:	2300      	movs	r3, #0
 8008388:	f8ca 3008 	str.w	r3, [sl, #8]
 800838c:	f8ca 3004 	str.w	r3, [sl, #4]
 8008390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008394 <__sprint_r>:
 8008394:	6893      	ldr	r3, [r2, #8]
 8008396:	b10b      	cbz	r3, 800839c <__sprint_r+0x8>
 8008398:	f7ff bfc0 	b.w	800831c <__sprint_r.part.0>
 800839c:	b410      	push	{r4}
 800839e:	4618      	mov	r0, r3
 80083a0:	6053      	str	r3, [r2, #4]
 80083a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <_write_r>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	460d      	mov	r5, r1
 80083ac:	4c08      	ldr	r4, [pc, #32]	; (80083d0 <_write_r+0x28>)
 80083ae:	4611      	mov	r1, r2
 80083b0:	4606      	mov	r6, r0
 80083b2:	461a      	mov	r2, r3
 80083b4:	4628      	mov	r0, r5
 80083b6:	2300      	movs	r3, #0
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	f7f8 fd5b 	bl	8000e74 <_write>
 80083be:	1c43      	adds	r3, r0, #1
 80083c0:	d000      	beq.n	80083c4 <_write_r+0x1c>
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d0fb      	beq.n	80083c2 <_write_r+0x1a>
 80083ca:	6033      	str	r3, [r6, #0]
 80083cc:	bd70      	pop	{r4, r5, r6, pc}
 80083ce:	bf00      	nop
 80083d0:	20000a7c 	.word	0x20000a7c

080083d4 <_calloc_r>:
 80083d4:	b510      	push	{r4, lr}
 80083d6:	fb02 f101 	mul.w	r1, r2, r1
 80083da:	f7fe fe59 	bl	8007090 <_malloc_r>
 80083de:	4604      	mov	r4, r0
 80083e0:	b1d8      	cbz	r0, 800841a <_calloc_r+0x46>
 80083e2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80083e6:	f022 0203 	bic.w	r2, r2, #3
 80083ea:	3a04      	subs	r2, #4
 80083ec:	2a24      	cmp	r2, #36	; 0x24
 80083ee:	d818      	bhi.n	8008422 <_calloc_r+0x4e>
 80083f0:	2a13      	cmp	r2, #19
 80083f2:	d914      	bls.n	800841e <_calloc_r+0x4a>
 80083f4:	2300      	movs	r3, #0
 80083f6:	2a1b      	cmp	r2, #27
 80083f8:	6003      	str	r3, [r0, #0]
 80083fa:	6043      	str	r3, [r0, #4]
 80083fc:	d916      	bls.n	800842c <_calloc_r+0x58>
 80083fe:	2a24      	cmp	r2, #36	; 0x24
 8008400:	6083      	str	r3, [r0, #8]
 8008402:	60c3      	str	r3, [r0, #12]
 8008404:	bf11      	iteee	ne
 8008406:	f100 0210 	addne.w	r2, r0, #16
 800840a:	6103      	streq	r3, [r0, #16]
 800840c:	6143      	streq	r3, [r0, #20]
 800840e:	f100 0218 	addeq.w	r2, r0, #24
 8008412:	2300      	movs	r3, #0
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	6053      	str	r3, [r2, #4]
 8008418:	6093      	str	r3, [r2, #8]
 800841a:	4620      	mov	r0, r4
 800841c:	bd10      	pop	{r4, pc}
 800841e:	4602      	mov	r2, r0
 8008420:	e7f7      	b.n	8008412 <_calloc_r+0x3e>
 8008422:	2100      	movs	r1, #0
 8008424:	f7fa f87e 	bl	8002524 <memset>
 8008428:	4620      	mov	r0, r4
 800842a:	bd10      	pop	{r4, pc}
 800842c:	f100 0208 	add.w	r2, r0, #8
 8008430:	e7ef      	b.n	8008412 <_calloc_r+0x3e>
 8008432:	bf00      	nop

08008434 <_close_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4c07      	ldr	r4, [pc, #28]	; (8008454 <_close_r+0x20>)
 8008438:	2300      	movs	r3, #0
 800843a:	4605      	mov	r5, r0
 800843c:	4608      	mov	r0, r1
 800843e:	6023      	str	r3, [r4, #0]
 8008440:	f7f9 f8e8 	bl	8001614 <_close>
 8008444:	1c43      	adds	r3, r0, #1
 8008446:	d000      	beq.n	800844a <_close_r+0x16>
 8008448:	bd38      	pop	{r3, r4, r5, pc}
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0fb      	beq.n	8008448 <_close_r+0x14>
 8008450:	602b      	str	r3, [r5, #0]
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	20000a7c 	.word	0x20000a7c

08008458 <_fclose_r>:
 8008458:	2900      	cmp	r1, #0
 800845a:	d03d      	beq.n	80084d8 <_fclose_r+0x80>
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	4605      	mov	r5, r0
 8008460:	460c      	mov	r4, r1
 8008462:	b108      	cbz	r0, 8008468 <_fclose_r+0x10>
 8008464:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008466:	b37b      	cbz	r3, 80084c8 <_fclose_r+0x70>
 8008468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846c:	b90b      	cbnz	r3, 8008472 <_fclose_r+0x1a>
 800846e:	2000      	movs	r0, #0
 8008470:	bd70      	pop	{r4, r5, r6, pc}
 8008472:	4621      	mov	r1, r4
 8008474:	4628      	mov	r0, r5
 8008476:	f7fe f965 	bl	8006744 <__sflush_r>
 800847a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800847c:	4606      	mov	r6, r0
 800847e:	b133      	cbz	r3, 800848e <_fclose_r+0x36>
 8008480:	69e1      	ldr	r1, [r4, #28]
 8008482:	4628      	mov	r0, r5
 8008484:	4798      	blx	r3
 8008486:	2800      	cmp	r0, #0
 8008488:	bfb8      	it	lt
 800848a:	f04f 36ff 	movlt.w	r6, #4294967295
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	061b      	lsls	r3, r3, #24
 8008492:	d41c      	bmi.n	80084ce <_fclose_r+0x76>
 8008494:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008496:	b141      	cbz	r1, 80084aa <_fclose_r+0x52>
 8008498:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800849c:	4299      	cmp	r1, r3
 800849e:	d002      	beq.n	80084a6 <_fclose_r+0x4e>
 80084a0:	4628      	mov	r0, r5
 80084a2:	f7fe fadf 	bl	8006a64 <_free_r>
 80084a6:	2300      	movs	r3, #0
 80084a8:	6323      	str	r3, [r4, #48]	; 0x30
 80084aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80084ac:	b121      	cbz	r1, 80084b8 <_fclose_r+0x60>
 80084ae:	4628      	mov	r0, r5
 80084b0:	f7fe fad8 	bl	8006a64 <_free_r>
 80084b4:	2300      	movs	r3, #0
 80084b6:	6463      	str	r3, [r4, #68]	; 0x44
 80084b8:	f7fe fa82 	bl	80069c0 <__sfp_lock_acquire>
 80084bc:	2300      	movs	r3, #0
 80084be:	81a3      	strh	r3, [r4, #12]
 80084c0:	f7fe fa80 	bl	80069c4 <__sfp_lock_release>
 80084c4:	4630      	mov	r0, r6
 80084c6:	bd70      	pop	{r4, r5, r6, pc}
 80084c8:	f7fe fa74 	bl	80069b4 <__sinit>
 80084cc:	e7cc      	b.n	8008468 <_fclose_r+0x10>
 80084ce:	6921      	ldr	r1, [r4, #16]
 80084d0:	4628      	mov	r0, r5
 80084d2:	f7fe fac7 	bl	8006a64 <_free_r>
 80084d6:	e7dd      	b.n	8008494 <_fclose_r+0x3c>
 80084d8:	2000      	movs	r0, #0
 80084da:	4770      	bx	lr

080084dc <__fputwc>:
 80084dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	4680      	mov	r8, r0
 80084e4:	4689      	mov	r9, r1
 80084e6:	4614      	mov	r4, r2
 80084e8:	f000 f87e 	bl	80085e8 <__locale_mb_cur_max>
 80084ec:	2801      	cmp	r0, #1
 80084ee:	d033      	beq.n	8008558 <__fputwc+0x7c>
 80084f0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80084f4:	464a      	mov	r2, r9
 80084f6:	a901      	add	r1, sp, #4
 80084f8:	4640      	mov	r0, r8
 80084fa:	f000 f91b 	bl	8008734 <_wcrtomb_r>
 80084fe:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008502:	4682      	mov	sl, r0
 8008504:	d021      	beq.n	800854a <__fputwc+0x6e>
 8008506:	b388      	cbz	r0, 800856c <__fputwc+0x90>
 8008508:	f89d 6004 	ldrb.w	r6, [sp, #4]
 800850c:	2500      	movs	r5, #0
 800850e:	e008      	b.n	8008522 <__fputwc+0x46>
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	6022      	str	r2, [r4, #0]
 8008516:	701e      	strb	r6, [r3, #0]
 8008518:	3501      	adds	r5, #1
 800851a:	4555      	cmp	r5, sl
 800851c:	d226      	bcs.n	800856c <__fputwc+0x90>
 800851e:	ab01      	add	r3, sp, #4
 8008520:	5d5e      	ldrb	r6, [r3, r5]
 8008522:	68a3      	ldr	r3, [r4, #8]
 8008524:	3b01      	subs	r3, #1
 8008526:	2b00      	cmp	r3, #0
 8008528:	60a3      	str	r3, [r4, #8]
 800852a:	daf1      	bge.n	8008510 <__fputwc+0x34>
 800852c:	69a7      	ldr	r7, [r4, #24]
 800852e:	42bb      	cmp	r3, r7
 8008530:	4631      	mov	r1, r6
 8008532:	4622      	mov	r2, r4
 8008534:	4640      	mov	r0, r8
 8008536:	db01      	blt.n	800853c <__fputwc+0x60>
 8008538:	2e0a      	cmp	r6, #10
 800853a:	d1e9      	bne.n	8008510 <__fputwc+0x34>
 800853c:	f000 f8a4 	bl	8008688 <__swbuf_r>
 8008540:	1c43      	adds	r3, r0, #1
 8008542:	d1e9      	bne.n	8008518 <__fputwc+0x3c>
 8008544:	b002      	add	sp, #8
 8008546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854a:	89a3      	ldrh	r3, [r4, #12]
 800854c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008550:	81a3      	strh	r3, [r4, #12]
 8008552:	b002      	add	sp, #8
 8008554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008558:	f109 33ff 	add.w	r3, r9, #4294967295
 800855c:	2bfe      	cmp	r3, #254	; 0xfe
 800855e:	d8c7      	bhi.n	80084f0 <__fputwc+0x14>
 8008560:	fa5f f689 	uxtb.w	r6, r9
 8008564:	4682      	mov	sl, r0
 8008566:	f88d 6004 	strb.w	r6, [sp, #4]
 800856a:	e7cf      	b.n	800850c <__fputwc+0x30>
 800856c:	4648      	mov	r0, r9
 800856e:	b002      	add	sp, #8
 8008570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008574 <_fputwc_r>:
 8008574:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8008578:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800857c:	d10b      	bne.n	8008596 <_fputwc_r+0x22>
 800857e:	b410      	push	{r4}
 8008580:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8008582:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008586:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800858a:	6654      	str	r4, [r2, #100]	; 0x64
 800858c:	8193      	strh	r3, [r2, #12]
 800858e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008592:	f7ff bfa3 	b.w	80084dc <__fputwc>
 8008596:	f7ff bfa1 	b.w	80084dc <__fputwc>
 800859a:	bf00      	nop

0800859c <_fstat_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	460b      	mov	r3, r1
 80085a0:	4c07      	ldr	r4, [pc, #28]	; (80085c0 <_fstat_r+0x24>)
 80085a2:	4605      	mov	r5, r0
 80085a4:	4611      	mov	r1, r2
 80085a6:	4618      	mov	r0, r3
 80085a8:	2300      	movs	r3, #0
 80085aa:	6023      	str	r3, [r4, #0]
 80085ac:	f7f9 f83c 	bl	8001628 <_fstat>
 80085b0:	1c43      	adds	r3, r0, #1
 80085b2:	d000      	beq.n	80085b6 <_fstat_r+0x1a>
 80085b4:	bd38      	pop	{r3, r4, r5, pc}
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0fb      	beq.n	80085b4 <_fstat_r+0x18>
 80085bc:	602b      	str	r3, [r5, #0]
 80085be:	bd38      	pop	{r3, r4, r5, pc}
 80085c0:	20000a7c 	.word	0x20000a7c

080085c4 <_isatty_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	4c07      	ldr	r4, [pc, #28]	; (80085e4 <_isatty_r+0x20>)
 80085c8:	2300      	movs	r3, #0
 80085ca:	4605      	mov	r5, r0
 80085cc:	4608      	mov	r0, r1
 80085ce:	6023      	str	r3, [r4, #0]
 80085d0:	f7f9 f87e 	bl	80016d0 <_isatty>
 80085d4:	1c43      	adds	r3, r0, #1
 80085d6:	d000      	beq.n	80085da <_isatty_r+0x16>
 80085d8:	bd38      	pop	{r3, r4, r5, pc}
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d0fb      	beq.n	80085d8 <_isatty_r+0x14>
 80085e0:	602b      	str	r3, [r5, #0]
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	20000a7c 	.word	0x20000a7c

080085e8 <__locale_mb_cur_max>:
 80085e8:	4b04      	ldr	r3, [pc, #16]	; (80085fc <__locale_mb_cur_max+0x14>)
 80085ea:	4a05      	ldr	r2, [pc, #20]	; (8008600 <__locale_mb_cur_max+0x18>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	bf08      	it	eq
 80085f4:	4613      	moveq	r3, r2
 80085f6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80085fa:	4770      	bx	lr
 80085fc:	20000460 	.word	0x20000460
 8008600:	20000874 	.word	0x20000874

08008604 <_lseek_r>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	460d      	mov	r5, r1
 8008608:	4c08      	ldr	r4, [pc, #32]	; (800862c <_lseek_r+0x28>)
 800860a:	4611      	mov	r1, r2
 800860c:	4606      	mov	r6, r0
 800860e:	461a      	mov	r2, r3
 8008610:	4628      	mov	r0, r5
 8008612:	2300      	movs	r3, #0
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	f7f8 ffe1 	bl	80015dc <_lseek>
 800861a:	1c43      	adds	r3, r0, #1
 800861c:	d000      	beq.n	8008620 <_lseek_r+0x1c>
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d0fb      	beq.n	800861e <_lseek_r+0x1a>
 8008626:	6033      	str	r3, [r6, #0]
 8008628:	bd70      	pop	{r4, r5, r6, pc}
 800862a:	bf00      	nop
 800862c:	20000a7c 	.word	0x20000a7c

08008630 <__ascii_mbtowc>:
 8008630:	b082      	sub	sp, #8
 8008632:	b149      	cbz	r1, 8008648 <__ascii_mbtowc+0x18>
 8008634:	b15a      	cbz	r2, 800864e <__ascii_mbtowc+0x1e>
 8008636:	b16b      	cbz	r3, 8008654 <__ascii_mbtowc+0x24>
 8008638:	7813      	ldrb	r3, [r2, #0]
 800863a:	600b      	str	r3, [r1, #0]
 800863c:	7812      	ldrb	r2, [r2, #0]
 800863e:	1c10      	adds	r0, r2, #0
 8008640:	bf18      	it	ne
 8008642:	2001      	movne	r0, #1
 8008644:	b002      	add	sp, #8
 8008646:	4770      	bx	lr
 8008648:	a901      	add	r1, sp, #4
 800864a:	2a00      	cmp	r2, #0
 800864c:	d1f3      	bne.n	8008636 <__ascii_mbtowc+0x6>
 800864e:	4610      	mov	r0, r2
 8008650:	b002      	add	sp, #8
 8008652:	4770      	bx	lr
 8008654:	f06f 0001 	mvn.w	r0, #1
 8008658:	e7f4      	b.n	8008644 <__ascii_mbtowc+0x14>
 800865a:	bf00      	nop

0800865c <_read_r>:
 800865c:	b570      	push	{r4, r5, r6, lr}
 800865e:	460d      	mov	r5, r1
 8008660:	4c08      	ldr	r4, [pc, #32]	; (8008684 <_read_r+0x28>)
 8008662:	4611      	mov	r1, r2
 8008664:	4606      	mov	r6, r0
 8008666:	461a      	mov	r2, r3
 8008668:	4628      	mov	r0, r5
 800866a:	2300      	movs	r3, #0
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	f7f8 ffc3 	bl	80015f8 <_read>
 8008672:	1c43      	adds	r3, r0, #1
 8008674:	d000      	beq.n	8008678 <_read_r+0x1c>
 8008676:	bd70      	pop	{r4, r5, r6, pc}
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0fb      	beq.n	8008676 <_read_r+0x1a>
 800867e:	6033      	str	r3, [r6, #0]
 8008680:	bd70      	pop	{r4, r5, r6, pc}
 8008682:	bf00      	nop
 8008684:	20000a7c 	.word	0x20000a7c

08008688 <__swbuf_r>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	460d      	mov	r5, r1
 800868c:	4614      	mov	r4, r2
 800868e:	4606      	mov	r6, r0
 8008690:	b110      	cbz	r0, 8008698 <__swbuf_r+0x10>
 8008692:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008694:	2b00      	cmp	r3, #0
 8008696:	d04a      	beq.n	800872e <__swbuf_r+0xa6>
 8008698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800869c:	69a3      	ldr	r3, [r4, #24]
 800869e:	60a3      	str	r3, [r4, #8]
 80086a0:	b291      	uxth	r1, r2
 80086a2:	0708      	lsls	r0, r1, #28
 80086a4:	d538      	bpl.n	8008718 <__swbuf_r+0x90>
 80086a6:	6923      	ldr	r3, [r4, #16]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d035      	beq.n	8008718 <__swbuf_r+0x90>
 80086ac:	0489      	lsls	r1, r1, #18
 80086ae:	b2ef      	uxtb	r7, r5
 80086b0:	d515      	bpl.n	80086de <__swbuf_r+0x56>
 80086b2:	6822      	ldr	r2, [r4, #0]
 80086b4:	6961      	ldr	r1, [r4, #20]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	428b      	cmp	r3, r1
 80086ba:	da1c      	bge.n	80086f6 <__swbuf_r+0x6e>
 80086bc:	3301      	adds	r3, #1
 80086be:	68a1      	ldr	r1, [r4, #8]
 80086c0:	1c50      	adds	r0, r2, #1
 80086c2:	3901      	subs	r1, #1
 80086c4:	60a1      	str	r1, [r4, #8]
 80086c6:	6020      	str	r0, [r4, #0]
 80086c8:	7015      	strb	r5, [r2, #0]
 80086ca:	6962      	ldr	r2, [r4, #20]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d01a      	beq.n	8008706 <__swbuf_r+0x7e>
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	07db      	lsls	r3, r3, #31
 80086d4:	d501      	bpl.n	80086da <__swbuf_r+0x52>
 80086d6:	2f0a      	cmp	r7, #10
 80086d8:	d015      	beq.n	8008706 <__swbuf_r+0x7e>
 80086da:	4638      	mov	r0, r7
 80086dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086de:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80086e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086e4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80086e8:	81a2      	strh	r2, [r4, #12]
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	6661      	str	r1, [r4, #100]	; 0x64
 80086ee:	6961      	ldr	r1, [r4, #20]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	428b      	cmp	r3, r1
 80086f4:	dbe2      	blt.n	80086bc <__swbuf_r+0x34>
 80086f6:	4621      	mov	r1, r4
 80086f8:	4630      	mov	r0, r6
 80086fa:	f7fe f8c7 	bl	800688c <_fflush_r>
 80086fe:	b940      	cbnz	r0, 8008712 <__swbuf_r+0x8a>
 8008700:	6822      	ldr	r2, [r4, #0]
 8008702:	2301      	movs	r3, #1
 8008704:	e7db      	b.n	80086be <__swbuf_r+0x36>
 8008706:	4621      	mov	r1, r4
 8008708:	4630      	mov	r0, r6
 800870a:	f7fe f8bf 	bl	800688c <_fflush_r>
 800870e:	2800      	cmp	r0, #0
 8008710:	d0e3      	beq.n	80086da <__swbuf_r+0x52>
 8008712:	f04f 37ff 	mov.w	r7, #4294967295
 8008716:	e7e0      	b.n	80086da <__swbuf_r+0x52>
 8008718:	4621      	mov	r1, r4
 800871a:	4630      	mov	r0, r6
 800871c:	f7fd f804 	bl	8005728 <__swsetup_r>
 8008720:	2800      	cmp	r0, #0
 8008722:	d1f6      	bne.n	8008712 <__swbuf_r+0x8a>
 8008724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008728:	6923      	ldr	r3, [r4, #16]
 800872a:	b291      	uxth	r1, r2
 800872c:	e7be      	b.n	80086ac <__swbuf_r+0x24>
 800872e:	f7fe f941 	bl	80069b4 <__sinit>
 8008732:	e7b1      	b.n	8008698 <__swbuf_r+0x10>

08008734 <_wcrtomb_r>:
 8008734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008736:	4606      	mov	r6, r0
 8008738:	b085      	sub	sp, #20
 800873a:	461f      	mov	r7, r3
 800873c:	b189      	cbz	r1, 8008762 <_wcrtomb_r+0x2e>
 800873e:	4c10      	ldr	r4, [pc, #64]	; (8008780 <_wcrtomb_r+0x4c>)
 8008740:	4d10      	ldr	r5, [pc, #64]	; (8008784 <_wcrtomb_r+0x50>)
 8008742:	6824      	ldr	r4, [r4, #0]
 8008744:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8008746:	2c00      	cmp	r4, #0
 8008748:	bf08      	it	eq
 800874a:	462c      	moveq	r4, r5
 800874c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8008750:	47a0      	blx	r4
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	d103      	bne.n	800875e <_wcrtomb_r+0x2a>
 8008756:	2200      	movs	r2, #0
 8008758:	238a      	movs	r3, #138	; 0x8a
 800875a:	603a      	str	r2, [r7, #0]
 800875c:	6033      	str	r3, [r6, #0]
 800875e:	b005      	add	sp, #20
 8008760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008762:	460c      	mov	r4, r1
 8008764:	4906      	ldr	r1, [pc, #24]	; (8008780 <_wcrtomb_r+0x4c>)
 8008766:	4a07      	ldr	r2, [pc, #28]	; (8008784 <_wcrtomb_r+0x50>)
 8008768:	6809      	ldr	r1, [r1, #0]
 800876a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800876c:	2900      	cmp	r1, #0
 800876e:	bf08      	it	eq
 8008770:	4611      	moveq	r1, r2
 8008772:	4622      	mov	r2, r4
 8008774:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 8008778:	a901      	add	r1, sp, #4
 800877a:	47a0      	blx	r4
 800877c:	e7e9      	b.n	8008752 <_wcrtomb_r+0x1e>
 800877e:	bf00      	nop
 8008780:	20000460 	.word	0x20000460
 8008784:	20000874 	.word	0x20000874

08008788 <__ascii_wctomb>:
 8008788:	b121      	cbz	r1, 8008794 <__ascii_wctomb+0xc>
 800878a:	2aff      	cmp	r2, #255	; 0xff
 800878c:	d804      	bhi.n	8008798 <__ascii_wctomb+0x10>
 800878e:	700a      	strb	r2, [r1, #0]
 8008790:	2001      	movs	r0, #1
 8008792:	4770      	bx	lr
 8008794:	4608      	mov	r0, r1
 8008796:	4770      	bx	lr
 8008798:	238a      	movs	r3, #138	; 0x8a
 800879a:	6003      	str	r3, [r0, #0]
 800879c:	f04f 30ff 	mov.w	r0, #4294967295
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop

080087a4 <__aeabi_drsub>:
 80087a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80087a8:	e002      	b.n	80087b0 <__adddf3>
 80087aa:	bf00      	nop

080087ac <__aeabi_dsub>:
 80087ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080087b0 <__adddf3>:
 80087b0:	b530      	push	{r4, r5, lr}
 80087b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80087b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80087ba:	ea94 0f05 	teq	r4, r5
 80087be:	bf08      	it	eq
 80087c0:	ea90 0f02 	teqeq	r0, r2
 80087c4:	bf1f      	itttt	ne
 80087c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80087ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80087ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80087d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80087d6:	f000 80e2 	beq.w	800899e <__adddf3+0x1ee>
 80087da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80087de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80087e2:	bfb8      	it	lt
 80087e4:	426d      	neglt	r5, r5
 80087e6:	dd0c      	ble.n	8008802 <__adddf3+0x52>
 80087e8:	442c      	add	r4, r5
 80087ea:	ea80 0202 	eor.w	r2, r0, r2
 80087ee:	ea81 0303 	eor.w	r3, r1, r3
 80087f2:	ea82 0000 	eor.w	r0, r2, r0
 80087f6:	ea83 0101 	eor.w	r1, r3, r1
 80087fa:	ea80 0202 	eor.w	r2, r0, r2
 80087fe:	ea81 0303 	eor.w	r3, r1, r3
 8008802:	2d36      	cmp	r5, #54	; 0x36
 8008804:	bf88      	it	hi
 8008806:	bd30      	pophi	{r4, r5, pc}
 8008808:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800880c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008810:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008814:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008818:	d002      	beq.n	8008820 <__adddf3+0x70>
 800881a:	4240      	negs	r0, r0
 800881c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008820:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008824:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008828:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800882c:	d002      	beq.n	8008834 <__adddf3+0x84>
 800882e:	4252      	negs	r2, r2
 8008830:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008834:	ea94 0f05 	teq	r4, r5
 8008838:	f000 80a7 	beq.w	800898a <__adddf3+0x1da>
 800883c:	f1a4 0401 	sub.w	r4, r4, #1
 8008840:	f1d5 0e20 	rsbs	lr, r5, #32
 8008844:	db0d      	blt.n	8008862 <__adddf3+0xb2>
 8008846:	fa02 fc0e 	lsl.w	ip, r2, lr
 800884a:	fa22 f205 	lsr.w	r2, r2, r5
 800884e:	1880      	adds	r0, r0, r2
 8008850:	f141 0100 	adc.w	r1, r1, #0
 8008854:	fa03 f20e 	lsl.w	r2, r3, lr
 8008858:	1880      	adds	r0, r0, r2
 800885a:	fa43 f305 	asr.w	r3, r3, r5
 800885e:	4159      	adcs	r1, r3
 8008860:	e00e      	b.n	8008880 <__adddf3+0xd0>
 8008862:	f1a5 0520 	sub.w	r5, r5, #32
 8008866:	f10e 0e20 	add.w	lr, lr, #32
 800886a:	2a01      	cmp	r2, #1
 800886c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008870:	bf28      	it	cs
 8008872:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008876:	fa43 f305 	asr.w	r3, r3, r5
 800887a:	18c0      	adds	r0, r0, r3
 800887c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008880:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008884:	d507      	bpl.n	8008896 <__adddf3+0xe6>
 8008886:	f04f 0e00 	mov.w	lr, #0
 800888a:	f1dc 0c00 	rsbs	ip, ip, #0
 800888e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008892:	eb6e 0101 	sbc.w	r1, lr, r1
 8008896:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800889a:	d31b      	bcc.n	80088d4 <__adddf3+0x124>
 800889c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80088a0:	d30c      	bcc.n	80088bc <__adddf3+0x10c>
 80088a2:	0849      	lsrs	r1, r1, #1
 80088a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80088a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80088ac:	f104 0401 	add.w	r4, r4, #1
 80088b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80088b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80088b8:	f080 809a 	bcs.w	80089f0 <__adddf3+0x240>
 80088bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80088c0:	bf08      	it	eq
 80088c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80088c6:	f150 0000 	adcs.w	r0, r0, #0
 80088ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80088ce:	ea41 0105 	orr.w	r1, r1, r5
 80088d2:	bd30      	pop	{r4, r5, pc}
 80088d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80088d8:	4140      	adcs	r0, r0
 80088da:	eb41 0101 	adc.w	r1, r1, r1
 80088de:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80088e2:	f1a4 0401 	sub.w	r4, r4, #1
 80088e6:	d1e9      	bne.n	80088bc <__adddf3+0x10c>
 80088e8:	f091 0f00 	teq	r1, #0
 80088ec:	bf04      	itt	eq
 80088ee:	4601      	moveq	r1, r0
 80088f0:	2000      	moveq	r0, #0
 80088f2:	fab1 f381 	clz	r3, r1
 80088f6:	bf08      	it	eq
 80088f8:	3320      	addeq	r3, #32
 80088fa:	f1a3 030b 	sub.w	r3, r3, #11
 80088fe:	f1b3 0220 	subs.w	r2, r3, #32
 8008902:	da0c      	bge.n	800891e <__adddf3+0x16e>
 8008904:	320c      	adds	r2, #12
 8008906:	dd08      	ble.n	800891a <__adddf3+0x16a>
 8008908:	f102 0c14 	add.w	ip, r2, #20
 800890c:	f1c2 020c 	rsb	r2, r2, #12
 8008910:	fa01 f00c 	lsl.w	r0, r1, ip
 8008914:	fa21 f102 	lsr.w	r1, r1, r2
 8008918:	e00c      	b.n	8008934 <__adddf3+0x184>
 800891a:	f102 0214 	add.w	r2, r2, #20
 800891e:	bfd8      	it	le
 8008920:	f1c2 0c20 	rsble	ip, r2, #32
 8008924:	fa01 f102 	lsl.w	r1, r1, r2
 8008928:	fa20 fc0c 	lsr.w	ip, r0, ip
 800892c:	bfdc      	itt	le
 800892e:	ea41 010c 	orrle.w	r1, r1, ip
 8008932:	4090      	lslle	r0, r2
 8008934:	1ae4      	subs	r4, r4, r3
 8008936:	bfa2      	ittt	ge
 8008938:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800893c:	4329      	orrge	r1, r5
 800893e:	bd30      	popge	{r4, r5, pc}
 8008940:	ea6f 0404 	mvn.w	r4, r4
 8008944:	3c1f      	subs	r4, #31
 8008946:	da1c      	bge.n	8008982 <__adddf3+0x1d2>
 8008948:	340c      	adds	r4, #12
 800894a:	dc0e      	bgt.n	800896a <__adddf3+0x1ba>
 800894c:	f104 0414 	add.w	r4, r4, #20
 8008950:	f1c4 0220 	rsb	r2, r4, #32
 8008954:	fa20 f004 	lsr.w	r0, r0, r4
 8008958:	fa01 f302 	lsl.w	r3, r1, r2
 800895c:	ea40 0003 	orr.w	r0, r0, r3
 8008960:	fa21 f304 	lsr.w	r3, r1, r4
 8008964:	ea45 0103 	orr.w	r1, r5, r3
 8008968:	bd30      	pop	{r4, r5, pc}
 800896a:	f1c4 040c 	rsb	r4, r4, #12
 800896e:	f1c4 0220 	rsb	r2, r4, #32
 8008972:	fa20 f002 	lsr.w	r0, r0, r2
 8008976:	fa01 f304 	lsl.w	r3, r1, r4
 800897a:	ea40 0003 	orr.w	r0, r0, r3
 800897e:	4629      	mov	r1, r5
 8008980:	bd30      	pop	{r4, r5, pc}
 8008982:	fa21 f004 	lsr.w	r0, r1, r4
 8008986:	4629      	mov	r1, r5
 8008988:	bd30      	pop	{r4, r5, pc}
 800898a:	f094 0f00 	teq	r4, #0
 800898e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008992:	bf06      	itte	eq
 8008994:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008998:	3401      	addeq	r4, #1
 800899a:	3d01      	subne	r5, #1
 800899c:	e74e      	b.n	800883c <__adddf3+0x8c>
 800899e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80089a2:	bf18      	it	ne
 80089a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80089a8:	d029      	beq.n	80089fe <__adddf3+0x24e>
 80089aa:	ea94 0f05 	teq	r4, r5
 80089ae:	bf08      	it	eq
 80089b0:	ea90 0f02 	teqeq	r0, r2
 80089b4:	d005      	beq.n	80089c2 <__adddf3+0x212>
 80089b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80089ba:	bf04      	itt	eq
 80089bc:	4619      	moveq	r1, r3
 80089be:	4610      	moveq	r0, r2
 80089c0:	bd30      	pop	{r4, r5, pc}
 80089c2:	ea91 0f03 	teq	r1, r3
 80089c6:	bf1e      	ittt	ne
 80089c8:	2100      	movne	r1, #0
 80089ca:	2000      	movne	r0, #0
 80089cc:	bd30      	popne	{r4, r5, pc}
 80089ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80089d2:	d105      	bne.n	80089e0 <__adddf3+0x230>
 80089d4:	0040      	lsls	r0, r0, #1
 80089d6:	4149      	adcs	r1, r1
 80089d8:	bf28      	it	cs
 80089da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80089de:	bd30      	pop	{r4, r5, pc}
 80089e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80089e4:	bf3c      	itt	cc
 80089e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80089ea:	bd30      	popcc	{r4, r5, pc}
 80089ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80089f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80089f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	bd30      	pop	{r4, r5, pc}
 80089fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008a02:	bf1a      	itte	ne
 8008a04:	4619      	movne	r1, r3
 8008a06:	4610      	movne	r0, r2
 8008a08:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008a0c:	bf1c      	itt	ne
 8008a0e:	460b      	movne	r3, r1
 8008a10:	4602      	movne	r2, r0
 8008a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008a16:	bf06      	itte	eq
 8008a18:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008a1c:	ea91 0f03 	teqeq	r1, r3
 8008a20:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008a24:	bd30      	pop	{r4, r5, pc}
 8008a26:	bf00      	nop

08008a28 <__aeabi_ui2d>:
 8008a28:	f090 0f00 	teq	r0, #0
 8008a2c:	bf04      	itt	eq
 8008a2e:	2100      	moveq	r1, #0
 8008a30:	4770      	bxeq	lr
 8008a32:	b530      	push	{r4, r5, lr}
 8008a34:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008a38:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008a3c:	f04f 0500 	mov.w	r5, #0
 8008a40:	f04f 0100 	mov.w	r1, #0
 8008a44:	e750      	b.n	80088e8 <__adddf3+0x138>
 8008a46:	bf00      	nop

08008a48 <__aeabi_i2d>:
 8008a48:	f090 0f00 	teq	r0, #0
 8008a4c:	bf04      	itt	eq
 8008a4e:	2100      	moveq	r1, #0
 8008a50:	4770      	bxeq	lr
 8008a52:	b530      	push	{r4, r5, lr}
 8008a54:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008a58:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008a5c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008a60:	bf48      	it	mi
 8008a62:	4240      	negmi	r0, r0
 8008a64:	f04f 0100 	mov.w	r1, #0
 8008a68:	e73e      	b.n	80088e8 <__adddf3+0x138>
 8008a6a:	bf00      	nop

08008a6c <__aeabi_f2d>:
 8008a6c:	0042      	lsls	r2, r0, #1
 8008a6e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008a72:	ea4f 0131 	mov.w	r1, r1, rrx
 8008a76:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008a7a:	bf1f      	itttt	ne
 8008a7c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008a80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008a84:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008a88:	4770      	bxne	lr
 8008a8a:	f092 0f00 	teq	r2, #0
 8008a8e:	bf14      	ite	ne
 8008a90:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008a94:	4770      	bxeq	lr
 8008a96:	b530      	push	{r4, r5, lr}
 8008a98:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008a9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008aa0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008aa4:	e720      	b.n	80088e8 <__adddf3+0x138>
 8008aa6:	bf00      	nop

08008aa8 <__aeabi_ul2d>:
 8008aa8:	ea50 0201 	orrs.w	r2, r0, r1
 8008aac:	bf08      	it	eq
 8008aae:	4770      	bxeq	lr
 8008ab0:	b530      	push	{r4, r5, lr}
 8008ab2:	f04f 0500 	mov.w	r5, #0
 8008ab6:	e00a      	b.n	8008ace <__aeabi_l2d+0x16>

08008ab8 <__aeabi_l2d>:
 8008ab8:	ea50 0201 	orrs.w	r2, r0, r1
 8008abc:	bf08      	it	eq
 8008abe:	4770      	bxeq	lr
 8008ac0:	b530      	push	{r4, r5, lr}
 8008ac2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008ac6:	d502      	bpl.n	8008ace <__aeabi_l2d+0x16>
 8008ac8:	4240      	negs	r0, r0
 8008aca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008ace:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008ad2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008ad6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8008ada:	f43f aedc 	beq.w	8008896 <__adddf3+0xe6>
 8008ade:	f04f 0203 	mov.w	r2, #3
 8008ae2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008ae6:	bf18      	it	ne
 8008ae8:	3203      	addne	r2, #3
 8008aea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008aee:	bf18      	it	ne
 8008af0:	3203      	addne	r2, #3
 8008af2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008af6:	f1c2 0320 	rsb	r3, r2, #32
 8008afa:	fa00 fc03 	lsl.w	ip, r0, r3
 8008afe:	fa20 f002 	lsr.w	r0, r0, r2
 8008b02:	fa01 fe03 	lsl.w	lr, r1, r3
 8008b06:	ea40 000e 	orr.w	r0, r0, lr
 8008b0a:	fa21 f102 	lsr.w	r1, r1, r2
 8008b0e:	4414      	add	r4, r2
 8008b10:	e6c1      	b.n	8008896 <__adddf3+0xe6>
 8008b12:	bf00      	nop

08008b14 <__aeabi_dmul>:
 8008b14:	b570      	push	{r4, r5, r6, lr}
 8008b16:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008b1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008b1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008b22:	bf1d      	ittte	ne
 8008b24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008b28:	ea94 0f0c 	teqne	r4, ip
 8008b2c:	ea95 0f0c 	teqne	r5, ip
 8008b30:	f000 f8de 	bleq	8008cf0 <__aeabi_dmul+0x1dc>
 8008b34:	442c      	add	r4, r5
 8008b36:	ea81 0603 	eor.w	r6, r1, r3
 8008b3a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008b3e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008b42:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008b46:	bf18      	it	ne
 8008b48:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008b4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b54:	d038      	beq.n	8008bc8 <__aeabi_dmul+0xb4>
 8008b56:	fba0 ce02 	umull	ip, lr, r0, r2
 8008b5a:	f04f 0500 	mov.w	r5, #0
 8008b5e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008b62:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008b66:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008b6a:	f04f 0600 	mov.w	r6, #0
 8008b6e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008b72:	f09c 0f00 	teq	ip, #0
 8008b76:	bf18      	it	ne
 8008b78:	f04e 0e01 	orrne.w	lr, lr, #1
 8008b7c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008b80:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008b84:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008b88:	d204      	bcs.n	8008b94 <__aeabi_dmul+0x80>
 8008b8a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008b8e:	416d      	adcs	r5, r5
 8008b90:	eb46 0606 	adc.w	r6, r6, r6
 8008b94:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008b98:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008b9c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008ba0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008ba4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008ba8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008bac:	bf88      	it	hi
 8008bae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008bb2:	d81e      	bhi.n	8008bf2 <__aeabi_dmul+0xde>
 8008bb4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008bb8:	bf08      	it	eq
 8008bba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008bbe:	f150 0000 	adcs.w	r0, r0, #0
 8008bc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008bcc:	ea46 0101 	orr.w	r1, r6, r1
 8008bd0:	ea40 0002 	orr.w	r0, r0, r2
 8008bd4:	ea81 0103 	eor.w	r1, r1, r3
 8008bd8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008bdc:	bfc2      	ittt	gt
 8008bde:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008be2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008be6:	bd70      	popgt	{r4, r5, r6, pc}
 8008be8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008bec:	f04f 0e00 	mov.w	lr, #0
 8008bf0:	3c01      	subs	r4, #1
 8008bf2:	f300 80ab 	bgt.w	8008d4c <__aeabi_dmul+0x238>
 8008bf6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008bfa:	bfde      	ittt	le
 8008bfc:	2000      	movle	r0, #0
 8008bfe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008c02:	bd70      	pople	{r4, r5, r6, pc}
 8008c04:	f1c4 0400 	rsb	r4, r4, #0
 8008c08:	3c20      	subs	r4, #32
 8008c0a:	da35      	bge.n	8008c78 <__aeabi_dmul+0x164>
 8008c0c:	340c      	adds	r4, #12
 8008c0e:	dc1b      	bgt.n	8008c48 <__aeabi_dmul+0x134>
 8008c10:	f104 0414 	add.w	r4, r4, #20
 8008c14:	f1c4 0520 	rsb	r5, r4, #32
 8008c18:	fa00 f305 	lsl.w	r3, r0, r5
 8008c1c:	fa20 f004 	lsr.w	r0, r0, r4
 8008c20:	fa01 f205 	lsl.w	r2, r1, r5
 8008c24:	ea40 0002 	orr.w	r0, r0, r2
 8008c28:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008c2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008c30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008c34:	fa21 f604 	lsr.w	r6, r1, r4
 8008c38:	eb42 0106 	adc.w	r1, r2, r6
 8008c3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008c40:	bf08      	it	eq
 8008c42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008c46:	bd70      	pop	{r4, r5, r6, pc}
 8008c48:	f1c4 040c 	rsb	r4, r4, #12
 8008c4c:	f1c4 0520 	rsb	r5, r4, #32
 8008c50:	fa00 f304 	lsl.w	r3, r0, r4
 8008c54:	fa20 f005 	lsr.w	r0, r0, r5
 8008c58:	fa01 f204 	lsl.w	r2, r1, r4
 8008c5c:	ea40 0002 	orr.w	r0, r0, r2
 8008c60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008c64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008c68:	f141 0100 	adc.w	r1, r1, #0
 8008c6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008c70:	bf08      	it	eq
 8008c72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008c76:	bd70      	pop	{r4, r5, r6, pc}
 8008c78:	f1c4 0520 	rsb	r5, r4, #32
 8008c7c:	fa00 f205 	lsl.w	r2, r0, r5
 8008c80:	ea4e 0e02 	orr.w	lr, lr, r2
 8008c84:	fa20 f304 	lsr.w	r3, r0, r4
 8008c88:	fa01 f205 	lsl.w	r2, r1, r5
 8008c8c:	ea43 0302 	orr.w	r3, r3, r2
 8008c90:	fa21 f004 	lsr.w	r0, r1, r4
 8008c94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008c98:	fa21 f204 	lsr.w	r2, r1, r4
 8008c9c:	ea20 0002 	bic.w	r0, r0, r2
 8008ca0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008ca8:	bf08      	it	eq
 8008caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008cae:	bd70      	pop	{r4, r5, r6, pc}
 8008cb0:	f094 0f00 	teq	r4, #0
 8008cb4:	d10f      	bne.n	8008cd6 <__aeabi_dmul+0x1c2>
 8008cb6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008cba:	0040      	lsls	r0, r0, #1
 8008cbc:	eb41 0101 	adc.w	r1, r1, r1
 8008cc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008cc4:	bf08      	it	eq
 8008cc6:	3c01      	subeq	r4, #1
 8008cc8:	d0f7      	beq.n	8008cba <__aeabi_dmul+0x1a6>
 8008cca:	ea41 0106 	orr.w	r1, r1, r6
 8008cce:	f095 0f00 	teq	r5, #0
 8008cd2:	bf18      	it	ne
 8008cd4:	4770      	bxne	lr
 8008cd6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008cda:	0052      	lsls	r2, r2, #1
 8008cdc:	eb43 0303 	adc.w	r3, r3, r3
 8008ce0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008ce4:	bf08      	it	eq
 8008ce6:	3d01      	subeq	r5, #1
 8008ce8:	d0f7      	beq.n	8008cda <__aeabi_dmul+0x1c6>
 8008cea:	ea43 0306 	orr.w	r3, r3, r6
 8008cee:	4770      	bx	lr
 8008cf0:	ea94 0f0c 	teq	r4, ip
 8008cf4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008cf8:	bf18      	it	ne
 8008cfa:	ea95 0f0c 	teqne	r5, ip
 8008cfe:	d00c      	beq.n	8008d1a <__aeabi_dmul+0x206>
 8008d00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008d04:	bf18      	it	ne
 8008d06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008d0a:	d1d1      	bne.n	8008cb0 <__aeabi_dmul+0x19c>
 8008d0c:	ea81 0103 	eor.w	r1, r1, r3
 8008d10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008d14:	f04f 0000 	mov.w	r0, #0
 8008d18:	bd70      	pop	{r4, r5, r6, pc}
 8008d1a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008d1e:	bf06      	itte	eq
 8008d20:	4610      	moveq	r0, r2
 8008d22:	4619      	moveq	r1, r3
 8008d24:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008d28:	d019      	beq.n	8008d5e <__aeabi_dmul+0x24a>
 8008d2a:	ea94 0f0c 	teq	r4, ip
 8008d2e:	d102      	bne.n	8008d36 <__aeabi_dmul+0x222>
 8008d30:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008d34:	d113      	bne.n	8008d5e <__aeabi_dmul+0x24a>
 8008d36:	ea95 0f0c 	teq	r5, ip
 8008d3a:	d105      	bne.n	8008d48 <__aeabi_dmul+0x234>
 8008d3c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008d40:	bf1c      	itt	ne
 8008d42:	4610      	movne	r0, r2
 8008d44:	4619      	movne	r1, r3
 8008d46:	d10a      	bne.n	8008d5e <__aeabi_dmul+0x24a>
 8008d48:	ea81 0103 	eor.w	r1, r1, r3
 8008d4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008d50:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008d54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d58:	f04f 0000 	mov.w	r0, #0
 8008d5c:	bd70      	pop	{r4, r5, r6, pc}
 8008d5e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008d62:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008d66:	bd70      	pop	{r4, r5, r6, pc}

08008d68 <__aeabi_ddiv>:
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008d6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008d72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008d76:	bf1d      	ittte	ne
 8008d78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008d7c:	ea94 0f0c 	teqne	r4, ip
 8008d80:	ea95 0f0c 	teqne	r5, ip
 8008d84:	f000 f8a7 	bleq	8008ed6 <__aeabi_ddiv+0x16e>
 8008d88:	eba4 0405 	sub.w	r4, r4, r5
 8008d8c:	ea81 0e03 	eor.w	lr, r1, r3
 8008d90:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008d94:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008d98:	f000 8088 	beq.w	8008eac <__aeabi_ddiv+0x144>
 8008d9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008da0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008da4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008da8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008dac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008db0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008db4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008db8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008dbc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008dc0:	429d      	cmp	r5, r3
 8008dc2:	bf08      	it	eq
 8008dc4:	4296      	cmpeq	r6, r2
 8008dc6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008dca:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008dce:	d202      	bcs.n	8008dd6 <__aeabi_ddiv+0x6e>
 8008dd0:	085b      	lsrs	r3, r3, #1
 8008dd2:	ea4f 0232 	mov.w	r2, r2, rrx
 8008dd6:	1ab6      	subs	r6, r6, r2
 8008dd8:	eb65 0503 	sbc.w	r5, r5, r3
 8008ddc:	085b      	lsrs	r3, r3, #1
 8008dde:	ea4f 0232 	mov.w	r2, r2, rrx
 8008de2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008de6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8008dea:	ebb6 0e02 	subs.w	lr, r6, r2
 8008dee:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008df2:	bf22      	ittt	cs
 8008df4:	1ab6      	subcs	r6, r6, r2
 8008df6:	4675      	movcs	r5, lr
 8008df8:	ea40 000c 	orrcs.w	r0, r0, ip
 8008dfc:	085b      	lsrs	r3, r3, #1
 8008dfe:	ea4f 0232 	mov.w	r2, r2, rrx
 8008e02:	ebb6 0e02 	subs.w	lr, r6, r2
 8008e06:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008e0a:	bf22      	ittt	cs
 8008e0c:	1ab6      	subcs	r6, r6, r2
 8008e0e:	4675      	movcs	r5, lr
 8008e10:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008e14:	085b      	lsrs	r3, r3, #1
 8008e16:	ea4f 0232 	mov.w	r2, r2, rrx
 8008e1a:	ebb6 0e02 	subs.w	lr, r6, r2
 8008e1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008e22:	bf22      	ittt	cs
 8008e24:	1ab6      	subcs	r6, r6, r2
 8008e26:	4675      	movcs	r5, lr
 8008e28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008e2c:	085b      	lsrs	r3, r3, #1
 8008e2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008e32:	ebb6 0e02 	subs.w	lr, r6, r2
 8008e36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008e3a:	bf22      	ittt	cs
 8008e3c:	1ab6      	subcs	r6, r6, r2
 8008e3e:	4675      	movcs	r5, lr
 8008e40:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008e44:	ea55 0e06 	orrs.w	lr, r5, r6
 8008e48:	d018      	beq.n	8008e7c <__aeabi_ddiv+0x114>
 8008e4a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008e4e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008e52:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008e56:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008e5a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008e5e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008e62:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008e66:	d1c0      	bne.n	8008dea <__aeabi_ddiv+0x82>
 8008e68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008e6c:	d10b      	bne.n	8008e86 <__aeabi_ddiv+0x11e>
 8008e6e:	ea41 0100 	orr.w	r1, r1, r0
 8008e72:	f04f 0000 	mov.w	r0, #0
 8008e76:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008e7a:	e7b6      	b.n	8008dea <__aeabi_ddiv+0x82>
 8008e7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008e80:	bf04      	itt	eq
 8008e82:	4301      	orreq	r1, r0
 8008e84:	2000      	moveq	r0, #0
 8008e86:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008e8a:	bf88      	it	hi
 8008e8c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008e90:	f63f aeaf 	bhi.w	8008bf2 <__aeabi_dmul+0xde>
 8008e94:	ebb5 0c03 	subs.w	ip, r5, r3
 8008e98:	bf04      	itt	eq
 8008e9a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008e9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008ea2:	f150 0000 	adcs.w	r0, r0, #0
 8008ea6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}
 8008eac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008eb0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008eb4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008eb8:	bfc2      	ittt	gt
 8008eba:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008ebe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008ec2:	bd70      	popgt	{r4, r5, r6, pc}
 8008ec4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008ec8:	f04f 0e00 	mov.w	lr, #0
 8008ecc:	3c01      	subs	r4, #1
 8008ece:	e690      	b.n	8008bf2 <__aeabi_dmul+0xde>
 8008ed0:	ea45 0e06 	orr.w	lr, r5, r6
 8008ed4:	e68d      	b.n	8008bf2 <__aeabi_dmul+0xde>
 8008ed6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008eda:	ea94 0f0c 	teq	r4, ip
 8008ede:	bf08      	it	eq
 8008ee0:	ea95 0f0c 	teqeq	r5, ip
 8008ee4:	f43f af3b 	beq.w	8008d5e <__aeabi_dmul+0x24a>
 8008ee8:	ea94 0f0c 	teq	r4, ip
 8008eec:	d10a      	bne.n	8008f04 <__aeabi_ddiv+0x19c>
 8008eee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008ef2:	f47f af34 	bne.w	8008d5e <__aeabi_dmul+0x24a>
 8008ef6:	ea95 0f0c 	teq	r5, ip
 8008efa:	f47f af25 	bne.w	8008d48 <__aeabi_dmul+0x234>
 8008efe:	4610      	mov	r0, r2
 8008f00:	4619      	mov	r1, r3
 8008f02:	e72c      	b.n	8008d5e <__aeabi_dmul+0x24a>
 8008f04:	ea95 0f0c 	teq	r5, ip
 8008f08:	d106      	bne.n	8008f18 <__aeabi_ddiv+0x1b0>
 8008f0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008f0e:	f43f aefd 	beq.w	8008d0c <__aeabi_dmul+0x1f8>
 8008f12:	4610      	mov	r0, r2
 8008f14:	4619      	mov	r1, r3
 8008f16:	e722      	b.n	8008d5e <__aeabi_dmul+0x24a>
 8008f18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008f1c:	bf18      	it	ne
 8008f1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008f22:	f47f aec5 	bne.w	8008cb0 <__aeabi_dmul+0x19c>
 8008f26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008f2a:	f47f af0d 	bne.w	8008d48 <__aeabi_dmul+0x234>
 8008f2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008f32:	f47f aeeb 	bne.w	8008d0c <__aeabi_dmul+0x1f8>
 8008f36:	e712      	b.n	8008d5e <__aeabi_dmul+0x24a>

08008f38 <__gedf2>:
 8008f38:	f04f 3cff 	mov.w	ip, #4294967295
 8008f3c:	e006      	b.n	8008f4c <__cmpdf2+0x4>
 8008f3e:	bf00      	nop

08008f40 <__ledf2>:
 8008f40:	f04f 0c01 	mov.w	ip, #1
 8008f44:	e002      	b.n	8008f4c <__cmpdf2+0x4>
 8008f46:	bf00      	nop

08008f48 <__cmpdf2>:
 8008f48:	f04f 0c01 	mov.w	ip, #1
 8008f4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008f50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008f54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008f58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008f5c:	bf18      	it	ne
 8008f5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008f62:	d01b      	beq.n	8008f9c <__cmpdf2+0x54>
 8008f64:	b001      	add	sp, #4
 8008f66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008f6a:	bf0c      	ite	eq
 8008f6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008f70:	ea91 0f03 	teqne	r1, r3
 8008f74:	bf02      	ittt	eq
 8008f76:	ea90 0f02 	teqeq	r0, r2
 8008f7a:	2000      	moveq	r0, #0
 8008f7c:	4770      	bxeq	lr
 8008f7e:	f110 0f00 	cmn.w	r0, #0
 8008f82:	ea91 0f03 	teq	r1, r3
 8008f86:	bf58      	it	pl
 8008f88:	4299      	cmppl	r1, r3
 8008f8a:	bf08      	it	eq
 8008f8c:	4290      	cmpeq	r0, r2
 8008f8e:	bf2c      	ite	cs
 8008f90:	17d8      	asrcs	r0, r3, #31
 8008f92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008f96:	f040 0001 	orr.w	r0, r0, #1
 8008f9a:	4770      	bx	lr
 8008f9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008fa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008fa4:	d102      	bne.n	8008fac <__cmpdf2+0x64>
 8008fa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008faa:	d107      	bne.n	8008fbc <__cmpdf2+0x74>
 8008fac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008fb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008fb4:	d1d6      	bne.n	8008f64 <__cmpdf2+0x1c>
 8008fb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008fba:	d0d3      	beq.n	8008f64 <__cmpdf2+0x1c>
 8008fbc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop

08008fc4 <__aeabi_cdrcmple>:
 8008fc4:	4684      	mov	ip, r0
 8008fc6:	4610      	mov	r0, r2
 8008fc8:	4662      	mov	r2, ip
 8008fca:	468c      	mov	ip, r1
 8008fcc:	4619      	mov	r1, r3
 8008fce:	4663      	mov	r3, ip
 8008fd0:	e000      	b.n	8008fd4 <__aeabi_cdcmpeq>
 8008fd2:	bf00      	nop

08008fd4 <__aeabi_cdcmpeq>:
 8008fd4:	b501      	push	{r0, lr}
 8008fd6:	f7ff ffb7 	bl	8008f48 <__cmpdf2>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	bf48      	it	mi
 8008fde:	f110 0f00 	cmnmi.w	r0, #0
 8008fe2:	bd01      	pop	{r0, pc}

08008fe4 <__aeabi_dcmpeq>:
 8008fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008fe8:	f7ff fff4 	bl	8008fd4 <__aeabi_cdcmpeq>
 8008fec:	bf0c      	ite	eq
 8008fee:	2001      	moveq	r0, #1
 8008ff0:	2000      	movne	r0, #0
 8008ff2:	f85d fb08 	ldr.w	pc, [sp], #8
 8008ff6:	bf00      	nop

08008ff8 <__aeabi_dcmplt>:
 8008ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ffc:	f7ff ffea 	bl	8008fd4 <__aeabi_cdcmpeq>
 8009000:	bf34      	ite	cc
 8009002:	2001      	movcc	r0, #1
 8009004:	2000      	movcs	r0, #0
 8009006:	f85d fb08 	ldr.w	pc, [sp], #8
 800900a:	bf00      	nop

0800900c <__aeabi_dcmple>:
 800900c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009010:	f7ff ffe0 	bl	8008fd4 <__aeabi_cdcmpeq>
 8009014:	bf94      	ite	ls
 8009016:	2001      	movls	r0, #1
 8009018:	2000      	movhi	r0, #0
 800901a:	f85d fb08 	ldr.w	pc, [sp], #8
 800901e:	bf00      	nop

08009020 <__aeabi_dcmpge>:
 8009020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009024:	f7ff ffce 	bl	8008fc4 <__aeabi_cdrcmple>
 8009028:	bf94      	ite	ls
 800902a:	2001      	movls	r0, #1
 800902c:	2000      	movhi	r0, #0
 800902e:	f85d fb08 	ldr.w	pc, [sp], #8
 8009032:	bf00      	nop

08009034 <__aeabi_dcmpgt>:
 8009034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009038:	f7ff ffc4 	bl	8008fc4 <__aeabi_cdrcmple>
 800903c:	bf34      	ite	cc
 800903e:	2001      	movcc	r0, #1
 8009040:	2000      	movcs	r0, #0
 8009042:	f85d fb08 	ldr.w	pc, [sp], #8
 8009046:	bf00      	nop

08009048 <__aeabi_dcmpun>:
 8009048:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800904c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009050:	d102      	bne.n	8009058 <__aeabi_dcmpun+0x10>
 8009052:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8009056:	d10a      	bne.n	800906e <__aeabi_dcmpun+0x26>
 8009058:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800905c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009060:	d102      	bne.n	8009068 <__aeabi_dcmpun+0x20>
 8009062:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8009066:	d102      	bne.n	800906e <__aeabi_dcmpun+0x26>
 8009068:	f04f 0000 	mov.w	r0, #0
 800906c:	4770      	bx	lr
 800906e:	f04f 0001 	mov.w	r0, #1
 8009072:	4770      	bx	lr

08009074 <__aeabi_d2iz>:
 8009074:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8009078:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800907c:	d215      	bcs.n	80090aa <__aeabi_d2iz+0x36>
 800907e:	d511      	bpl.n	80090a4 <__aeabi_d2iz+0x30>
 8009080:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8009084:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8009088:	d912      	bls.n	80090b0 <__aeabi_d2iz+0x3c>
 800908a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800908e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009092:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8009096:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800909a:	fa23 f002 	lsr.w	r0, r3, r2
 800909e:	bf18      	it	ne
 80090a0:	4240      	negne	r0, r0
 80090a2:	4770      	bx	lr
 80090a4:	f04f 0000 	mov.w	r0, #0
 80090a8:	4770      	bx	lr
 80090aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80090ae:	d105      	bne.n	80090bc <__aeabi_d2iz+0x48>
 80090b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80090b4:	bf08      	it	eq
 80090b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80090ba:	4770      	bx	lr
 80090bc:	f04f 0000 	mov.w	r0, #0
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop

080090c4 <__aeabi_uldivmod>:
 80090c4:	b953      	cbnz	r3, 80090dc <__aeabi_uldivmod+0x18>
 80090c6:	b94a      	cbnz	r2, 80090dc <__aeabi_uldivmod+0x18>
 80090c8:	2900      	cmp	r1, #0
 80090ca:	bf08      	it	eq
 80090cc:	2800      	cmpeq	r0, #0
 80090ce:	bf1c      	itt	ne
 80090d0:	f04f 31ff 	movne.w	r1, #4294967295
 80090d4:	f04f 30ff 	movne.w	r0, #4294967295
 80090d8:	f000 b97e 	b.w	80093d8 <__aeabi_idiv0>
 80090dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80090e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80090e4:	f000 f806 	bl	80090f4 <__udivmoddi4>
 80090e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80090ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090f0:	b004      	add	sp, #16
 80090f2:	4770      	bx	lr

080090f4 <__udivmoddi4>:
 80090f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f8:	468c      	mov	ip, r1
 80090fa:	460e      	mov	r6, r1
 80090fc:	4604      	mov	r4, r0
 80090fe:	9d08      	ldr	r5, [sp, #32]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d150      	bne.n	80091a6 <__udivmoddi4+0xb2>
 8009104:	428a      	cmp	r2, r1
 8009106:	4617      	mov	r7, r2
 8009108:	d96c      	bls.n	80091e4 <__udivmoddi4+0xf0>
 800910a:	fab2 fe82 	clz	lr, r2
 800910e:	f1be 0f00 	cmp.w	lr, #0
 8009112:	d00b      	beq.n	800912c <__udivmoddi4+0x38>
 8009114:	f1ce 0420 	rsb	r4, lr, #32
 8009118:	fa20 f404 	lsr.w	r4, r0, r4
 800911c:	fa01 f60e 	lsl.w	r6, r1, lr
 8009120:	ea44 0c06 	orr.w	ip, r4, r6
 8009124:	fa02 f70e 	lsl.w	r7, r2, lr
 8009128:	fa00 f40e 	lsl.w	r4, r0, lr
 800912c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8009130:	0c22      	lsrs	r2, r4, #16
 8009132:	fbbc f0f9 	udiv	r0, ip, r9
 8009136:	fa1f f887 	uxth.w	r8, r7
 800913a:	fb09 c610 	mls	r6, r9, r0, ip
 800913e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8009142:	fb00 f308 	mul.w	r3, r0, r8
 8009146:	42b3      	cmp	r3, r6
 8009148:	d909      	bls.n	800915e <__udivmoddi4+0x6a>
 800914a:	19f6      	adds	r6, r6, r7
 800914c:	f100 32ff 	add.w	r2, r0, #4294967295
 8009150:	f080 8122 	bcs.w	8009398 <__udivmoddi4+0x2a4>
 8009154:	42b3      	cmp	r3, r6
 8009156:	f240 811f 	bls.w	8009398 <__udivmoddi4+0x2a4>
 800915a:	3802      	subs	r0, #2
 800915c:	443e      	add	r6, r7
 800915e:	1af6      	subs	r6, r6, r3
 8009160:	b2a2      	uxth	r2, r4
 8009162:	fbb6 f3f9 	udiv	r3, r6, r9
 8009166:	fb09 6613 	mls	r6, r9, r3, r6
 800916a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800916e:	fb03 f808 	mul.w	r8, r3, r8
 8009172:	45a0      	cmp	r8, r4
 8009174:	d909      	bls.n	800918a <__udivmoddi4+0x96>
 8009176:	19e4      	adds	r4, r4, r7
 8009178:	f103 32ff 	add.w	r2, r3, #4294967295
 800917c:	f080 810a 	bcs.w	8009394 <__udivmoddi4+0x2a0>
 8009180:	45a0      	cmp	r8, r4
 8009182:	f240 8107 	bls.w	8009394 <__udivmoddi4+0x2a0>
 8009186:	3b02      	subs	r3, #2
 8009188:	443c      	add	r4, r7
 800918a:	ebc8 0404 	rsb	r4, r8, r4
 800918e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009192:	2100      	movs	r1, #0
 8009194:	2d00      	cmp	r5, #0
 8009196:	d062      	beq.n	800925e <__udivmoddi4+0x16a>
 8009198:	fa24 f40e 	lsr.w	r4, r4, lr
 800919c:	2300      	movs	r3, #0
 800919e:	602c      	str	r4, [r5, #0]
 80091a0:	606b      	str	r3, [r5, #4]
 80091a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a6:	428b      	cmp	r3, r1
 80091a8:	d907      	bls.n	80091ba <__udivmoddi4+0xc6>
 80091aa:	2d00      	cmp	r5, #0
 80091ac:	d055      	beq.n	800925a <__udivmoddi4+0x166>
 80091ae:	2100      	movs	r1, #0
 80091b0:	e885 0041 	stmia.w	r5, {r0, r6}
 80091b4:	4608      	mov	r0, r1
 80091b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ba:	fab3 f183 	clz	r1, r3
 80091be:	2900      	cmp	r1, #0
 80091c0:	f040 8090 	bne.w	80092e4 <__udivmoddi4+0x1f0>
 80091c4:	42b3      	cmp	r3, r6
 80091c6:	d302      	bcc.n	80091ce <__udivmoddi4+0xda>
 80091c8:	4282      	cmp	r2, r0
 80091ca:	f200 80f8 	bhi.w	80093be <__udivmoddi4+0x2ca>
 80091ce:	1a84      	subs	r4, r0, r2
 80091d0:	eb66 0603 	sbc.w	r6, r6, r3
 80091d4:	2001      	movs	r0, #1
 80091d6:	46b4      	mov	ip, r6
 80091d8:	2d00      	cmp	r5, #0
 80091da:	d040      	beq.n	800925e <__udivmoddi4+0x16a>
 80091dc:	e885 1010 	stmia.w	r5, {r4, ip}
 80091e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e4:	b912      	cbnz	r2, 80091ec <__udivmoddi4+0xf8>
 80091e6:	2701      	movs	r7, #1
 80091e8:	fbb7 f7f2 	udiv	r7, r7, r2
 80091ec:	fab7 fe87 	clz	lr, r7
 80091f0:	f1be 0f00 	cmp.w	lr, #0
 80091f4:	d135      	bne.n	8009262 <__udivmoddi4+0x16e>
 80091f6:	1bf3      	subs	r3, r6, r7
 80091f8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80091fc:	fa1f fc87 	uxth.w	ip, r7
 8009200:	2101      	movs	r1, #1
 8009202:	fbb3 f0f8 	udiv	r0, r3, r8
 8009206:	0c22      	lsrs	r2, r4, #16
 8009208:	fb08 3610 	mls	r6, r8, r0, r3
 800920c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8009210:	fb0c f300 	mul.w	r3, ip, r0
 8009214:	42b3      	cmp	r3, r6
 8009216:	d907      	bls.n	8009228 <__udivmoddi4+0x134>
 8009218:	19f6      	adds	r6, r6, r7
 800921a:	f100 32ff 	add.w	r2, r0, #4294967295
 800921e:	d202      	bcs.n	8009226 <__udivmoddi4+0x132>
 8009220:	42b3      	cmp	r3, r6
 8009222:	f200 80ce 	bhi.w	80093c2 <__udivmoddi4+0x2ce>
 8009226:	4610      	mov	r0, r2
 8009228:	1af6      	subs	r6, r6, r3
 800922a:	b2a2      	uxth	r2, r4
 800922c:	fbb6 f3f8 	udiv	r3, r6, r8
 8009230:	fb08 6613 	mls	r6, r8, r3, r6
 8009234:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8009238:	fb0c fc03 	mul.w	ip, ip, r3
 800923c:	45a4      	cmp	ip, r4
 800923e:	d907      	bls.n	8009250 <__udivmoddi4+0x15c>
 8009240:	19e4      	adds	r4, r4, r7
 8009242:	f103 32ff 	add.w	r2, r3, #4294967295
 8009246:	d202      	bcs.n	800924e <__udivmoddi4+0x15a>
 8009248:	45a4      	cmp	ip, r4
 800924a:	f200 80b5 	bhi.w	80093b8 <__udivmoddi4+0x2c4>
 800924e:	4613      	mov	r3, r2
 8009250:	ebcc 0404 	rsb	r4, ip, r4
 8009254:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009258:	e79c      	b.n	8009194 <__udivmoddi4+0xa0>
 800925a:	4629      	mov	r1, r5
 800925c:	4628      	mov	r0, r5
 800925e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009262:	f1ce 0120 	rsb	r1, lr, #32
 8009266:	fa06 f30e 	lsl.w	r3, r6, lr
 800926a:	fa07 f70e 	lsl.w	r7, r7, lr
 800926e:	fa20 f901 	lsr.w	r9, r0, r1
 8009272:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8009276:	40ce      	lsrs	r6, r1
 8009278:	ea49 0903 	orr.w	r9, r9, r3
 800927c:	fbb6 faf8 	udiv	sl, r6, r8
 8009280:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8009284:	fb08 661a 	mls	r6, r8, sl, r6
 8009288:	fa1f fc87 	uxth.w	ip, r7
 800928c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8009290:	fb0a f20c 	mul.w	r2, sl, ip
 8009294:	429a      	cmp	r2, r3
 8009296:	fa00 f40e 	lsl.w	r4, r0, lr
 800929a:	d90a      	bls.n	80092b2 <__udivmoddi4+0x1be>
 800929c:	19db      	adds	r3, r3, r7
 800929e:	f10a 31ff 	add.w	r1, sl, #4294967295
 80092a2:	f080 8087 	bcs.w	80093b4 <__udivmoddi4+0x2c0>
 80092a6:	429a      	cmp	r2, r3
 80092a8:	f240 8084 	bls.w	80093b4 <__udivmoddi4+0x2c0>
 80092ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80092b0:	443b      	add	r3, r7
 80092b2:	1a9b      	subs	r3, r3, r2
 80092b4:	fa1f f989 	uxth.w	r9, r9
 80092b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80092bc:	fb08 3311 	mls	r3, r8, r1, r3
 80092c0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80092c4:	fb01 f60c 	mul.w	r6, r1, ip
 80092c8:	429e      	cmp	r6, r3
 80092ca:	d907      	bls.n	80092dc <__udivmoddi4+0x1e8>
 80092cc:	19db      	adds	r3, r3, r7
 80092ce:	f101 32ff 	add.w	r2, r1, #4294967295
 80092d2:	d26b      	bcs.n	80093ac <__udivmoddi4+0x2b8>
 80092d4:	429e      	cmp	r6, r3
 80092d6:	d969      	bls.n	80093ac <__udivmoddi4+0x2b8>
 80092d8:	3902      	subs	r1, #2
 80092da:	443b      	add	r3, r7
 80092dc:	1b9b      	subs	r3, r3, r6
 80092de:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80092e2:	e78e      	b.n	8009202 <__udivmoddi4+0x10e>
 80092e4:	f1c1 0e20 	rsb	lr, r1, #32
 80092e8:	fa22 f40e 	lsr.w	r4, r2, lr
 80092ec:	408b      	lsls	r3, r1
 80092ee:	4323      	orrs	r3, r4
 80092f0:	fa20 f70e 	lsr.w	r7, r0, lr
 80092f4:	fa06 f401 	lsl.w	r4, r6, r1
 80092f8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80092fc:	fa26 f60e 	lsr.w	r6, r6, lr
 8009300:	433c      	orrs	r4, r7
 8009302:	fbb6 f9fc 	udiv	r9, r6, ip
 8009306:	0c27      	lsrs	r7, r4, #16
 8009308:	fb0c 6619 	mls	r6, ip, r9, r6
 800930c:	fa1f f883 	uxth.w	r8, r3
 8009310:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8009314:	fb09 f708 	mul.w	r7, r9, r8
 8009318:	42b7      	cmp	r7, r6
 800931a:	fa02 f201 	lsl.w	r2, r2, r1
 800931e:	fa00 fa01 	lsl.w	sl, r0, r1
 8009322:	d908      	bls.n	8009336 <__udivmoddi4+0x242>
 8009324:	18f6      	adds	r6, r6, r3
 8009326:	f109 30ff 	add.w	r0, r9, #4294967295
 800932a:	d241      	bcs.n	80093b0 <__udivmoddi4+0x2bc>
 800932c:	42b7      	cmp	r7, r6
 800932e:	d93f      	bls.n	80093b0 <__udivmoddi4+0x2bc>
 8009330:	f1a9 0902 	sub.w	r9, r9, #2
 8009334:	441e      	add	r6, r3
 8009336:	1bf6      	subs	r6, r6, r7
 8009338:	b2a0      	uxth	r0, r4
 800933a:	fbb6 f4fc 	udiv	r4, r6, ip
 800933e:	fb0c 6614 	mls	r6, ip, r4, r6
 8009342:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8009346:	fb04 f808 	mul.w	r8, r4, r8
 800934a:	45b8      	cmp	r8, r7
 800934c:	d907      	bls.n	800935e <__udivmoddi4+0x26a>
 800934e:	18ff      	adds	r7, r7, r3
 8009350:	f104 30ff 	add.w	r0, r4, #4294967295
 8009354:	d228      	bcs.n	80093a8 <__udivmoddi4+0x2b4>
 8009356:	45b8      	cmp	r8, r7
 8009358:	d926      	bls.n	80093a8 <__udivmoddi4+0x2b4>
 800935a:	3c02      	subs	r4, #2
 800935c:	441f      	add	r7, r3
 800935e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8009362:	ebc8 0707 	rsb	r7, r8, r7
 8009366:	fba0 8902 	umull	r8, r9, r0, r2
 800936a:	454f      	cmp	r7, r9
 800936c:	4644      	mov	r4, r8
 800936e:	464e      	mov	r6, r9
 8009370:	d314      	bcc.n	800939c <__udivmoddi4+0x2a8>
 8009372:	d029      	beq.n	80093c8 <__udivmoddi4+0x2d4>
 8009374:	b365      	cbz	r5, 80093d0 <__udivmoddi4+0x2dc>
 8009376:	ebba 0304 	subs.w	r3, sl, r4
 800937a:	eb67 0706 	sbc.w	r7, r7, r6
 800937e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8009382:	40cb      	lsrs	r3, r1
 8009384:	40cf      	lsrs	r7, r1
 8009386:	ea4e 0303 	orr.w	r3, lr, r3
 800938a:	e885 0088 	stmia.w	r5, {r3, r7}
 800938e:	2100      	movs	r1, #0
 8009390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009394:	4613      	mov	r3, r2
 8009396:	e6f8      	b.n	800918a <__udivmoddi4+0x96>
 8009398:	4610      	mov	r0, r2
 800939a:	e6e0      	b.n	800915e <__udivmoddi4+0x6a>
 800939c:	ebb8 0402 	subs.w	r4, r8, r2
 80093a0:	eb69 0603 	sbc.w	r6, r9, r3
 80093a4:	3801      	subs	r0, #1
 80093a6:	e7e5      	b.n	8009374 <__udivmoddi4+0x280>
 80093a8:	4604      	mov	r4, r0
 80093aa:	e7d8      	b.n	800935e <__udivmoddi4+0x26a>
 80093ac:	4611      	mov	r1, r2
 80093ae:	e795      	b.n	80092dc <__udivmoddi4+0x1e8>
 80093b0:	4681      	mov	r9, r0
 80093b2:	e7c0      	b.n	8009336 <__udivmoddi4+0x242>
 80093b4:	468a      	mov	sl, r1
 80093b6:	e77c      	b.n	80092b2 <__udivmoddi4+0x1be>
 80093b8:	3b02      	subs	r3, #2
 80093ba:	443c      	add	r4, r7
 80093bc:	e748      	b.n	8009250 <__udivmoddi4+0x15c>
 80093be:	4608      	mov	r0, r1
 80093c0:	e70a      	b.n	80091d8 <__udivmoddi4+0xe4>
 80093c2:	3802      	subs	r0, #2
 80093c4:	443e      	add	r6, r7
 80093c6:	e72f      	b.n	8009228 <__udivmoddi4+0x134>
 80093c8:	45c2      	cmp	sl, r8
 80093ca:	d3e7      	bcc.n	800939c <__udivmoddi4+0x2a8>
 80093cc:	463e      	mov	r6, r7
 80093ce:	e7d1      	b.n	8009374 <__udivmoddi4+0x280>
 80093d0:	4629      	mov	r1, r5
 80093d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d6:	bf00      	nop

080093d8 <__aeabi_idiv0>:
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	37257325 	.word	0x37257325
 80093e0:	25732564 	.word	0x25732564
 80093e4:	73256437 	.word	0x73256437
 80093e8:	25643725 	.word	0x25643725
 80093ec:	32302573 	.word	0x32302573
 80093f0:	000a2464 	.word	0x000a2464
 80093f4:	0000002c 	.word	0x0000002c
 80093f8:	00007325 	.word	0x00007325
 80093fc:	58535523 	.word	0x58535523
 8009400:	5523002c 	.word	0x5523002c
 8009404:	002c5844 	.word	0x002c5844
 8009408:	58534423 	.word	0x58534423
 800940c:	4423002c 	.word	0x4423002c
 8009410:	002c5844 	.word	0x002c5844
 8009414:	504f5423 	.word	0x504f5423
 8009418:	4223002c 	.word	0x4223002c
 800941c:	002c544f 	.word	0x002c544f
 8009420:	58585823 	.word	0x58585823
 8009424:	4623002c 	.word	0x4623002c
 8009428:	002c4c41 	.word	0x002c4c41
 800942c:	2b433249 	.word	0x2b433249
 8009430:	54524155 	.word	0x54524155
 8009434:	696e6920 	.word	0x696e6920
 8009438:	6f642074 	.word	0x6f642074
 800943c:	2e2e656e 	.word	0x2e2e656e
 8009440:	0000002e 	.word	0x0000002e
 8009444:	3353494c 	.word	0x3353494c
 8009448:	535f4844 	.word	0x535f4844
 800944c:	444f7465 	.word	0x444f7465
 8009450:	6f642052 	.word	0x6f642052
 8009454:	2e2e656e 	.word	0x2e2e656e
 8009458:	0000002e 	.word	0x0000002e
 800945c:	3353494c 	.word	0x3353494c
 8009460:	535f4844 	.word	0x535f4844
 8009464:	6f4d7465 	.word	0x6f4d7465
 8009468:	64206564 	.word	0x64206564
 800946c:	2e656e6f 	.word	0x2e656e6f
 8009470:	00002e2e 	.word	0x00002e2e
 8009474:	3353494c 	.word	0x3353494c
 8009478:	535f4844 	.word	0x535f4844
 800947c:	75467465 	.word	0x75467465
 8009480:	63536c6c 	.word	0x63536c6c
 8009484:	20656c61 	.word	0x20656c61
 8009488:	656e6f64 	.word	0x656e6f64
 800948c:	002e2e2e 	.word	0x002e2e2e
 8009490:	3353494c 	.word	0x3353494c
 8009494:	535f4844 	.word	0x535f4844
 8009498:	78417465 	.word	0x78417465
 800949c:	64207369 	.word	0x64207369
 80094a0:	2e656e6f 	.word	0x2e656e6f
 80094a4:	00002e2e 	.word	0x00002e2e
 80094a8:	3353494c 	.word	0x3353494c
 80094ac:	535f4844 	.word	0x535f4844
 80094b0:	6e497465 	.word	0x6e497465
 80094b4:	68543174 	.word	0x68543174
 80094b8:	68737265 	.word	0x68737265
 80094bc:	20646c6f 	.word	0x20646c6f
 80094c0:	656e6f64 	.word	0x656e6f64
 80094c4:	002e2e2e 	.word	0x002e2e2e
 80094c8:	3353494c 	.word	0x3353494c
 80094cc:	535f4844 	.word	0x535f4844
 80094d0:	6e497465 	.word	0x6e497465
 80094d4:	6e6f4374 	.word	0x6e6f4374
 80094d8:	75676966 	.word	0x75676966
 80094dc:	69746172 	.word	0x69746172
 80094e0:	64206e6f 	.word	0x64206e6f
 80094e4:	2e656e6f 	.word	0x2e656e6f
 80094e8:	00002e2e 	.word	0x00002e2e
 80094ec:	3353494c 	.word	0x3353494c
 80094f0:	535f4844 	.word	0x535f4844
 80094f4:	6e497465 	.word	0x6e497465
 80094f8:	646f4d74 	.word	0x646f4d74
 80094fc:	6f642065 	.word	0x6f642065
 8009500:	2e2e656e 	.word	0x2e2e656e
 8009504:	0000002e 	.word	0x0000002e
 8009508:	3353494c 	.word	0x3353494c
 800950c:	535f4844 	.word	0x535f4844
 8009510:	44417465 	.word	0x44417465
 8009514:	78754143 	.word	0x78754143
 8009518:	6e6f6420 	.word	0x6e6f6420
 800951c:	2e2e2e65 	.word	0x2e2e2e65
 8009520:	00000000 	.word	0x00000000
 8009524:	3353494c 	.word	0x3353494c
 8009528:	535f4844 	.word	0x535f4844
 800952c:	44427465 	.word	0x44427465
 8009530:	6f642055 	.word	0x6f642055
 8009534:	2e2e656e 	.word	0x2e2e656e
 8009538:	0000002e 	.word	0x0000002e
 800953c:	3353494c 	.word	0x3353494c
 8009540:	535f4844 	.word	0x535f4844
 8009544:	65547465 	.word	0x65547465
 8009548:	7265706d 	.word	0x7265706d
 800954c:	72757461 	.word	0x72757461
 8009550:	6f642065 	.word	0x6f642065
 8009554:	2e2e656e 	.word	0x2e2e656e
 8009558:	0000002e 	.word	0x0000002e
 800955c:	55514552 	.word	0x55514552
 8009560:	00545345 	.word	0x00545345
 8009564:	736f700a 	.word	0x736f700a
 8009568:	6f697469 	.word	0x6f697469
 800956c:	203d206e 	.word	0x203d206e
 8009570:	535f5055 	.word	0x535f5055
 8009574:	00202058 	.word	0x00202058
 8009578:	736f700a 	.word	0x736f700a
 800957c:	6f697469 	.word	0x6f697469
 8009580:	203d206e 	.word	0x203d206e
 8009584:	445f5055 	.word	0x445f5055
 8009588:	00202058 	.word	0x00202058
 800958c:	736f700a 	.word	0x736f700a
 8009590:	6f697469 	.word	0x6f697469
 8009594:	203d206e 	.word	0x203d206e
 8009598:	535f5744 	.word	0x535f5744
 800959c:	00202058 	.word	0x00202058
 80095a0:	736f700a 	.word	0x736f700a
 80095a4:	6f697469 	.word	0x6f697469
 80095a8:	203d206e 	.word	0x203d206e
 80095ac:	445f5744 	.word	0x445f5744
 80095b0:	00202058 	.word	0x00202058
 80095b4:	736f700a 	.word	0x736f700a
 80095b8:	6f697469 	.word	0x6f697469
 80095bc:	203d206e 	.word	0x203d206e
 80095c0:	20504f54 	.word	0x20504f54
 80095c4:	00202020 	.word	0x00202020
 80095c8:	736f700a 	.word	0x736f700a
 80095cc:	6f697469 	.word	0x6f697469
 80095d0:	203d206e 	.word	0x203d206e
 80095d4:	54544f42 	.word	0x54544f42
 80095d8:	00204d4f 	.word	0x00204d4f
 80095dc:	736f700a 	.word	0x736f700a
 80095e0:	6f697469 	.word	0x6f697469
 80095e4:	203d206e 	.word	0x203d206e
 80095e8:	6e6b6e75 	.word	0x6e6b6e75
 80095ec:	006e776f 	.word	0x006e776f
 80095f0:	36253d58 	.word	0x36253d58
 80095f4:	3d592064 	.word	0x3d592064
 80095f8:	20643625 	.word	0x20643625
 80095fc:	36253d5a 	.word	0x36253d5a
 8009600:	00000d64 	.word	0x00000d64
 8009604:	0000000a 	.word	0x0000000a

08009608 <zeroes.7258>:
 8009608:	30303030 30303030 30303030 30303030     0000000000000000
 8009618:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8009628:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8009638:	00000000 33323130 37363534 62613938     ....0123456789ab
 8009648:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8009658:	00000030                                0...

0800965c <blanks.7257>:
 800965c:	20202020 20202020 20202020 20202020                     

0800966c <zeroes.7273>:
 800966c:	30303030 30303030 30303030 30303030     0000000000000000

0800967c <blanks.7272>:
 800967c:	20202020 20202020 20202020 20202020                     
 800968c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800969c:	00000000                                ....

080096a0 <__mprec_tens>:
 80096a0:	00000000 3ff00000 00000000 40240000     .......?......$@
 80096b0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 80096c0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 80096d0:	00000000 412e8480 00000000 416312d0     .......A......cA
 80096e0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 80096f0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8009700:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8009710:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8009720:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8009730:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8009740:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8009750:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8009760:	79d99db4 44ea7843                       ...yCx.D

08009768 <__mprec_bigtens>:
 8009768:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8009778:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8009788:	7f73bf3c 75154fdd                       <.s..O.u

08009790 <p05.6087>:
 8009790:	00000005 00000019 0000007d 00000043     ........}...C...
 80097a0:	49534f50 00000058 0000002e              POSIX.......

080097ac <_ctype_>:
 80097ac:	20202000 20202020 28282020 20282828     .         ((((( 
 80097bc:	20202020 20202020 20202020 20202020                     
 80097cc:	10108820 10101010 10101010 10101010      ...............
 80097dc:	04040410 04040404 10040404 10101010     ................
 80097ec:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80097fc:	01010101 01010101 01010101 10101010     ................
 800980c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800981c:	02020202 02020202 02020202 10101010     ................
 800982c:	00000020 00000000 00000000 00000000      ...............
	...
