
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	c5 0b 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 e1 04 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00a5e0 	.word	0x0c00a5e0
 800024c:	20000000 	.word	0x20000000
 8000250:	000009e8 	.word	0x000009e8
 8000254:	0c00afc8 	.word	0x0c00afc8
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00a5e0 	.word	0x0c00a5e0
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00a5e0 	.word	0x0c00a5e0
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200009e8 	.word	0x200009e8
 800027c:	000000c0 	.word	0x000000c0
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000294:	08001e09 	.word	0x08001e09
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800393d 	.word	0x0800393d
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08001ab5 	.word	0x08001ab5

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	db0b      	blt.n	80002de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c6:	4909      	ldr	r1, [pc, #36]	; (80002ec <__NVIC_EnableIRQ+0x38>)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	095b      	lsrs	r3, r3, #5
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	f002 021f 	and.w	r2, r2, #31
 80002d4:	2001      	movs	r0, #1
 80002d6:	fa00 f202 	lsl.w	r2, r0, r2
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	490d      	ldr	r1, [pc, #52]	; (800033c <__NVIC_SetPriority+0x4c>)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	0092      	lsls	r2, r2, #2
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	4909      	ldr	r1, [pc, #36]	; (8000340 <__NVIC_SetPriority+0x50>)
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f003 030f 	and.w	r3, r3, #15
 8000322:	3b04      	subs	r3, #4
 8000324:	683a      	ldr	r2, [r7, #0]
 8000326:	b2d2      	uxtb	r2, r2
 8000328:	0092      	lsls	r2, r2, #2
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
  }
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
 8000350:	4613      	mov	r3, r2
 8000352:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000354:	78f8      	ldrb	r0, [r7, #3]
 8000356:	78fb      	ldrb	r3, [r7, #3]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	3306      	adds	r3, #6
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	4413      	add	r3, r2
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000366:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000368:	431a      	orrs	r2, r3
 800036a:	6879      	ldr	r1, [r7, #4]
 800036c:	1d83      	adds	r3, r0, #6
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	440b      	add	r3, r1
 8000372:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800038c:	b2db      	uxtb	r3, r3
 800038e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000392:	b2db      	uxtb	r3, r3
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	431a      	orrs	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop

080003c8 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80003d6:	f003 0308 	and.w	r3, r3, #8
 80003da:	2b00      	cmp	r3, #0
 80003dc:	bf14      	ite	ne
 80003de:	2301      	movne	r3, #1
 80003e0:	2300      	moveq	r3, #0
 80003e2:	b2db      	uxtb	r3, r3
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003fc:	f023 030f 	bic.w	r3, r3, #15
 8000400:	f043 0202 	orr.w	r2, r3, #2
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	460b      	mov	r3, r1
 800041e:	70fb      	strb	r3, [r7, #3]
 8000420:	4613      	mov	r3, r2
 8000422:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
 8000424:	78f8      	ldrb	r0, [r7, #3]
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	3306      	adds	r3, #6
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	4413      	add	r3, r2
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	f023 0250 	bic.w	r2, r3, #80	; 0x50
 8000436:	6879      	ldr	r1, [r7, #4]
 8000438:	1d83      	adds	r3, r0, #6
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	440b      	add	r3, r1
 800043e:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000440:	78ba      	ldrb	r2, [r7, #2]
 8000442:	78fb      	ldrb	r3, [r7, #3]
 8000444:	4619      	mov	r1, r3
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f7ff ff7c 	bl	8000344 <XMC_USIC_CH_SetInputSource>
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <_init_uart0_ch0>:
    .stop_bits = 1U,
    .baudrate = 115200U
};
/****************************************************************** FUNCTIONS */
void _init_uart0_ch0()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
    /* USIC channels initialization */
    XMC_UART_CH_Init (XMC_UART0_CH0, &uart_config);
 8000458:	491c      	ldr	r1, [pc, #112]	; (80004cc <_init_uart0_ch0+0x78>)
 800045a:	481d      	ldr	r0, [pc, #116]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800045c:	f001 ff56 	bl	800230c <XMC_UART_CH_Init>

    XMC_UART_CH_SetInputSource (XMC_UART0_CH0, XMC_UART_CH_INPUT_RXD,
 8000460:	2201      	movs	r2, #1
 8000462:	2100      	movs	r1, #0
 8000464:	481a      	ldr	r0, [pc, #104]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000466:	f7ff ffd5 	bl	8000414 <XMC_UART_CH_SetInputSource>
    /* FIFOs initialization for both channels:
     *  8 entries for TxFIFO from point 0, LIMIT=1
     *  8 entries for RxFIFO from point 8, LIMIT=7 (SRBI is set if all 8*data have
     *                                              been received)
     *  */
    XMC_USIC_CH_TXFIFO_Configure (XMC_UART0_CH0, 0, XMC_USIC_CH_FIFO_SIZE_8WORDS, TX_FIFO_INITIAL_LIMIT);
 800046a:	2301      	movs	r3, #1
 800046c:	2203      	movs	r2, #3
 800046e:	2100      	movs	r1, #0
 8000470:	4817      	ldr	r0, [pc, #92]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000472:	f002 fa75 	bl	8002960 <XMC_USIC_CH_TXFIFO_Configure>
    XMC_USIC_CH_RXFIFO_Configure (XMC_UART0_CH0, 8, XMC_USIC_CH_FIFO_SIZE_8WORDS, RX_FIFO_INITIAL_LIMIT);
 8000476:	2301      	movs	r3, #1
 8000478:	2203      	movs	r2, #3
 800047a:	2108      	movs	r1, #8
 800047c:	4814      	ldr	r0, [pc, #80]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800047e:	f002 fa97 	bl	80029b0 <XMC_USIC_CH_RXFIFO_Configure>

    /* Enabling events for TX FIFO and RX FIFO */
    XMC_USIC_CH_RXFIFO_EnableEvent (XMC_UART0_CH0,
 8000482:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8000486:	4812      	ldr	r0, [pc, #72]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000488:	f7ff ff8a 	bl	80003a0 <XMC_USIC_CH_RXFIFO_EnableEvent>
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE);

    /* Connecting the previously enabled events to a Service Request line number */
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	2110      	movs	r1, #16
 8000490:	480f      	ldr	r0, [pc, #60]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000492:	f002 fab7 	bl	8002a04 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2113      	movs	r1, #19
 800049a:	480d      	ldr	r0, [pc, #52]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800049c:	f002 fab2 	bl	8002a04 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>

    /* Start USIC operation as UART */
    XMC_UART_CH_Start (XMC_UART0_CH0);
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <_init_uart0_ch0+0x7c>)
 80004a2:	f7ff ffa5 	bl	80003f0 <XMC_UART_CH_Start>

    /*Initialization of the necessary ports*/
    XMC_GPIO_Init (UART_TX, &uart_tx);
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <_init_uart0_ch0+0x80>)
 80004a8:	2105      	movs	r1, #5
 80004aa:	480b      	ldr	r0, [pc, #44]	; (80004d8 <_init_uart0_ch0+0x84>)
 80004ac:	f001 fe6e 	bl	800218c <XMC_GPIO_Init>
    XMC_GPIO_Init (UART_RX, &uart_rx);
 80004b0:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <_init_uart0_ch0+0x88>)
 80004b2:	2104      	movs	r1, #4
 80004b4:	4808      	ldr	r0, [pc, #32]	; (80004d8 <_init_uart0_ch0+0x84>)
 80004b6:	f001 fe69 	bl	800218c <XMC_GPIO_Init>

    /* Configuring priority and enabling NVIC IRQ for the defined service request
    line number */
    NVIC_SetPriority (USIC0_0_IRQn, 63U);
 80004ba:	213f      	movs	r1, #63	; 0x3f
 80004bc:	2054      	movs	r0, #84	; 0x54
 80004be:	f7ff ff17 	bl	80002f0 <__NVIC_SetPriority>
    NVIC_EnableIRQ (USIC0_0_IRQn);
 80004c2:	2054      	movs	r0, #84	; 0x54
 80004c4:	f7ff fef6 	bl	80002b4 <__NVIC_EnableIRQ>

    return;
 80004c8:	bf00      	nop
}
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000000c 	.word	0x2000000c
 80004d0:	40030000 	.word	0x40030000
 80004d4:	20000000 	.word	0x20000000
 80004d8:	48028100 	.word	0x48028100
 80004dc:	20000a2c 	.word	0x20000a2c

080004e0 <USIC0_0_IRQHandler>:

void USIC0_0_IRQHandler (void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	71fb      	strb	r3, [r7, #7]

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 80004ea:	e01f      	b.n	800052c <USIC0_0_IRQHandler+0x4c>
        rx_tmp = XMC_UART_CH_GetReceivedData (XMC_UART0_CH0);
 80004ec:	4816      	ldr	r0, [pc, #88]	; (8000548 <USIC0_0_IRQHandler+0x68>)
 80004ee:	f001 ff8b 	bl	8002408 <XMC_UART_CH_GetReceivedData>
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]

        if ( (rx_tmp != STRING_CR) && (!str_available)) {
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b0d      	cmp	r3, #13
 80004fa:	d011      	beq.n	8000520 <USIC0_0_IRQHandler+0x40>
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <USIC0_0_IRQHandler+0x6c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	f083 0301 	eor.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d00a      	beq.n	8000520 <USIC0_0_IRQHandler+0x40>
            rx_buffer[rx_ctr++] = rx_tmp;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	b2d1      	uxtb	r1, r2
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 8000514:	7011      	strb	r1, [r2, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <USIC0_0_IRQHandler+0x74>)
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	5453      	strb	r3, [r2, r1]
 800051e:	e005      	b.n	800052c <USIC0_0_IRQHandler+0x4c>
        } else {
            rx_ctr = 0;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
            str_available = true;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <USIC0_0_IRQHandler+0x6c>)
 8000528:	2201      	movs	r2, #1
 800052a:	701a      	strb	r2, [r3, #0]
{
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 800052c:	4806      	ldr	r0, [pc, #24]	; (8000548 <USIC0_0_IRQHandler+0x68>)
 800052e:	f7ff ff4b 	bl	80003c8 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8000532:	4603      	mov	r3, r0
 8000534:	f083 0301 	eor.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1d6      	bne.n	80004ec <USIC0_0_IRQHandler+0xc>
        } else {
            rx_ctr = 0;
            str_available = true;
        }
    }
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40030000 	.word	0x40030000
 800054c:	200009e8 	.word	0x200009e8
 8000550:	20000a38 	.word	0x20000a38
 8000554:	200009ec 	.word	0x200009ec

08000558 <_uart_printf>:

    return 0;
}

uint8_t _uart_printf (char *fmt, ...)
{
 8000558:	b40f      	push	{r0, r1, r2, r3}
 800055a:	b580      	push	{r7, lr}
 800055c:	b0c2      	sub	sp, #264	; 0x108
 800055e:	af00      	add	r7, sp, #0
    va_list arg_ptr;
    char buffer[BUFFER_SIZE_PRINTF];

    if (fmt == NULL)  {
 8000560:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000564:	2b00      	cmp	r3, #0
 8000566:	d101      	bne.n	800056c <_uart_printf+0x14>
        return ERR_OUT_OF_MEMORY;
 8000568:	2364      	movs	r3, #100	; 0x64
 800056a:	e010      	b.n	800058e <_uart_printf+0x36>
    }

    va_start (arg_ptr, fmt);
 800056c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    vsprintf (buffer, fmt, arg_ptr);
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800057a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800057e:	4618      	mov	r0, r3
 8000580:	f006 fba6 	bl	8006cd0 <vsprintf>
    va_end (arg_ptr);

    _uart_send_string (buffer);
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f80a 	bl	80005a0 <_uart_send_string>
    return 0;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000594:	46bd      	mov	sp, r7
 8000596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800059a:	b004      	add	sp, #16
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <_uart_send_string>:

uint8_t _uart_send_string (char *str)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <_uart_send_string+0x12>
        return ERR_OUT_OF_MEMORY;
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	e01d      	b.n	80005ee <_uart_send_string+0x4e>
    }

    for (int i = 0; i < strlen (str); i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e012      	b.n	80005de <_uart_send_string+0x3e>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 80005b8:	bf00      	nop
 80005ba:	480f      	ldr	r0, [pc, #60]	; (80005f8 <_uart_send_string+0x58>)
 80005bc:	f7ff fee0 	bl	8000380 <XMC_USIC_CH_GetTransmitBufferStatus>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b80      	cmp	r3, #128	; 0x80
 80005c4:	d0f9      	beq.n	80005ba <_uart_send_string+0x1a>
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	4619      	mov	r1, r3
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <_uart_send_string+0x58>)
 80005d4:	f001 fef2 	bl	80023bc <XMC_UART_CH_Transmit>
{
    if (str == NULL) {
        return ERR_OUT_OF_MEMORY;
    }

    for (int i = 0; i < strlen (str); i++) {
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f003 fb4e 	bl	8003c80 <strlen>
 80005e4:	4602      	mov	r2, r0
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8e5      	bhi.n	80005b8 <_uart_send_string+0x18>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
    }
    return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40030000 	.word	0x40030000

080005fc <_uart_get_string>:

uint8_t _uart_get_string (char *str)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <_uart_get_string+0x12>
        return ERR_OUT_OF_MEMORY;
 800060a:	2364      	movs	r3, #100	; 0x64
 800060c:	e019      	b.n	8000642 <_uart_get_string+0x46>
    }

    while (!str_available);
 800060e:	bf00      	nop
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <_uart_get_string+0x50>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f083 0301 	eor.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f8      	bne.n	8000610 <_uart_get_string+0x14>
    memcpy (str, &rx_buffer, strlen (rx_buffer));
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <_uart_get_string+0x54>)
 8000620:	f003 fb2e 	bl	8003c80 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4909      	ldr	r1, [pc, #36]	; (8000650 <_uart_get_string+0x54>)
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f003 f9ae 	bl	800398c <memcpy>
    memset (&rx_buffer, 0x00, BUFFER_SIZE_RX);
 8000630:	2240      	movs	r2, #64	; 0x40
 8000632:	2100      	movs	r1, #0
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <_uart_get_string+0x54>)
 8000636:	f003 fa43 	bl	8003ac0 <memset>

    str_available = false;
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <_uart_get_string+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
    return 0;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200009e8 	.word	0x200009e8
 8000650:	200009ec 	.word	0x200009ec

08000654 <P1_1_set_mode>:

__STATIC_INLINE uint32_t P1_0_read(void){
    return(PORT1->IN & 0x00000001UL);
}

__STATIC_INLINE void P1_1_set_mode(uint8_t mode){
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
    PORT1->IOCR0 &= ~0x0000f800UL;
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <P1_1_set_mode+0x30>)
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <P1_1_set_mode+0x30>)
 8000662:	691b      	ldr	r3, [r3, #16]
 8000664:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8000668:	6113      	str	r3, [r2, #16]
    PORT1->IOCR0 |= mode << 8;
 800066a:	4906      	ldr	r1, [pc, #24]	; (8000684 <P1_1_set_mode+0x30>)
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <P1_1_set_mode+0x30>)
 800066e:	691b      	ldr	r3, [r3, #16]
 8000670:	79fa      	ldrb	r2, [r7, #7]
 8000672:	0212      	lsls	r2, r2, #8
 8000674:	4313      	orrs	r3, r2
 8000676:	610b      	str	r3, [r1, #16]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	48028100 	.word	0x48028100

08000688 <P1_1_set_driver_strength>:

__STATIC_INLINE void P1_1_set_driver_strength(uint8_t strength){
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
    PORT1->PDR0 &= ~0x00000070UL;
 8000692:	4a09      	ldr	r2, [pc, #36]	; (80006b8 <P1_1_set_driver_strength+0x30>)
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <P1_1_set_driver_strength+0x30>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800069c:	6413      	str	r3, [r2, #64]	; 0x40
    PORT1->PDR0 |= strength << 4;
 800069e:	4906      	ldr	r1, [pc, #24]	; (80006b8 <P1_1_set_driver_strength+0x30>)
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <P1_1_set_driver_strength+0x30>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	79fa      	ldrb	r2, [r7, #7]
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	4313      	orrs	r3, r2
 80006aa:	640b      	str	r3, [r1, #64]	; 0x40
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	48028100 	.word	0x48028100

080006bc <P1_1_reset>:

__STATIC_INLINE void P1_1_set(void){
    PORT1->OMR = 0x00000002UL;
}

__STATIC_INLINE void P1_1_reset(void){
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
    PORT1->OMR = 0x00020000UL;
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <P1_1_reset+0x18>)
 80006c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80006c6:	605a      	str	r2, [r3, #4]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	48028100 	.word	0x48028100

080006d8 <initServoPWM>:
#include "servo_driver.h"
#include "servo_library.h"

void initServoPWM()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
    // onboard alternate function 3 at CCU40 slice 2 = CCU40.OUT2 = CCU40.CC42
    P1_1_set_mode(OUTPUT_PP_AF3);
 80006dc:	2098      	movs	r0, #152	; 0x98
 80006de:	f7ff ffb9 	bl	8000654 <P1_1_set_mode>
    P1_1_set_driver_strength(STRONG);
 80006e2:	2002      	movs	r0, #2
 80006e4:	f7ff ffd0 	bl	8000688 <P1_1_set_driver_strength>
    P1_1_reset();
 80006e8:	f7ff ffe8 	bl	80006bc <P1_1_reset>

    // setup CC40 unit with shadow transfer
    SCU_RESET->PRSET0 |= (1 << SCU_RESET_PRSET0_CCU40RS_Pos);		// peripheral 0 reset set - CCU40RS - CCU40 timer
 80006ec:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <initServoPWM+0x90>)
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <initServoPWM+0x90>)
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6113      	str	r3, [r2, #16]
    SCU_RESET->PRCLR0 |= (1 << SCU_RESET_PRCLR0_CCU40RS_Pos);		// peripheral 0 reset clear - CCU40RS - CCU40 timer
 80006f8:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <initServoPWM+0x90>)
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <initServoPWM+0x90>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6153      	str	r3, [r2, #20]
    SCU_CLK->CLKSET = (1 << SCU_CLK_CLKSET_CCUCEN_Pos); 			// clock enable register CCUCEN - CCU clock enabled
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <initServoPWM+0x94>)
 8000706:	2210      	movs	r2, #16
 8000708:	605a      	str	r2, [r3, #4]
    CCU40->GIDLC |= (1 << CCU4_GIDLC_SPRB_Pos); 					// global idle clear - SPRB - prescaler run bit set
 800070a:	4a19      	ldr	r2, [pc, #100]	; (8000770 <initServoPWM+0x98>)
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <initServoPWM+0x98>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000714:	60d3      	str	r3, [r2, #12]
    CCU40_CC42->PSC = 6; 											// prescaler control - 0 - CCU40.OUT2
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <initServoPWM+0x9c>)
 8000718:	2206      	movs	r2, #6
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
    CCU40_CC42->TC |= (1 << CCU4_CC4_TC_CLST_Pos); 					// slice timer control - CLST - shadow transfer on clear - CCU40.OUT2
 800071c:	4a15      	ldr	r2, [pc, #84]	; (8000774 <initServoPWM+0x9c>)
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <initServoPWM+0x9c>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	6153      	str	r3, [r2, #20]
    CCU40->GIDLC |= (1 << CCU4_GIDLC_CS2I_Pos); 					// global idle clear - C2SI - CC43 idle mode clear - CCU40.OUT2
 8000728:	4a11      	ldr	r2, [pc, #68]	; (8000770 <initServoPWM+0x98>)
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <initServoPWM+0x98>)
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	60d3      	str	r3, [r2, #12]
    SCU_GENERAL->CCUCON |= (1 << SCU_GENERAL_CCUCON_GSC40_Pos);		// CCU control register - GSC40 - global start control CCU40
 8000734:	4a10      	ldr	r2, [pc, #64]	; (8000778 <initServoPWM+0xa0>)
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <initServoPWM+0xa0>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	64d3      	str	r3, [r2, #76]	; 0x4c
    CCU40_CC42->PRS = 37500; 										// period register - timer shadow period value - CCU40.OUT2
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <initServoPWM+0x9c>)
 8000742:	f249 227c 	movw	r2, #37500	; 0x927c
 8000746:	635a      	str	r2, [r3, #52]	; 0x34
    CCU40_CC42->TCSET = 1;											// slice timer run set - CCU40.OUT2
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <initServoPWM+0x9c>)
 800074a:	2201      	movs	r2, #1
 800074c:	60da      	str	r2, [r3, #12]

    // initial output values
    CCU40_CC42->CRS = 37500;										// compare register - timer shadow compare value - CCU40.OUT2
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <initServoPWM+0x9c>)
 8000750:	f249 227c 	movw	r2, #37500	; 0x927c
 8000754:	63da      	str	r2, [r3, #60]	; 0x3c
    CCU40->GCSS |= (1 << CCU4_GCSS_S2SE_Pos); 						// global channel set - S3SE slice 2 shadow transfer set enable
 8000756:	4a06      	ldr	r2, [pc, #24]	; (8000770 <initServoPWM+0x98>)
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <initServoPWM+0x98>)
 800075a:	691b      	ldr	r3, [r3, #16]
 800075c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000760:	6113      	str	r3, [r2, #16]
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	50004400 	.word	0x50004400
 800076c:	50004600 	.word	0x50004600
 8000770:	4000c000 	.word	0x4000c000
 8000774:	4000c300 	.word	0x4000c300
 8000778:	50004000 	.word	0x50004000
 800077c:	00000000 	.word	0x00000000

08000780 <pwmXMC>:

uint8_t pwmXMC(double dutycycle)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b087      	sub	sp, #28
 8000784:	af00      	add	r7, sp, #0
 8000786:	e9c7 0100 	strd	r0, r1, [r7]
    double dcCalc = 0;
 800078a:	f04f 0300 	mov.w	r3, #0
 800078e:	f04f 0400 	mov.w	r4, #0
 8000792:	e9c7 3404 	strd	r3, r4, [r7, #16]
    uint32_t intdcCalc = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]

    if (dutycycle < 0 || dutycycle > 100)
 800079a:	f04f 0200 	mov.w	r2, #0
 800079e:	f04f 0300 	mov.w	r3, #0
 80007a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80007a6:	f003 f865 	bl	8003874 <__aeabi_dcmplt>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d109      	bne.n	80007c4 <pwmXMC+0x44>
 80007b0:	f04f 0200 	mov.w	r2, #0
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <pwmXMC+0xc0>)
 80007b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80007ba:	f003 f879 	bl	80038b0 <__aeabi_dcmpgt>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <pwmXMC+0x48>
    {
        return 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	e02c      	b.n	8000822 <pwmXMC+0xa2>
    }

    dcCalc = 37500 - (37500 * dutycycle * 0.01);
 80007c8:	a319      	add	r3, pc, #100	; (adr r3, 8000830 <pwmXMC+0xb0>)
 80007ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80007d2:	f002 fddd 	bl	8003390 <__aeabi_dmul>
 80007d6:	4603      	mov	r3, r0
 80007d8:	460c      	mov	r4, r1
 80007da:	4618      	mov	r0, r3
 80007dc:	4621      	mov	r1, r4
 80007de:	a316      	add	r3, pc, #88	; (adr r3, 8000838 <pwmXMC+0xb8>)
 80007e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007e4:	f002 fdd4 	bl	8003390 <__aeabi_dmul>
 80007e8:	4603      	mov	r3, r0
 80007ea:	460c      	mov	r4, r1
 80007ec:	461a      	mov	r2, r3
 80007ee:	4623      	mov	r3, r4
 80007f0:	a10f      	add	r1, pc, #60	; (adr r1, 8000830 <pwmXMC+0xb0>)
 80007f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80007f6:	f002 fc17 	bl	8003028 <__aeabi_dsub>
 80007fa:	4603      	mov	r3, r0
 80007fc:	460c      	mov	r4, r1
 80007fe:	e9c7 3404 	strd	r3, r4, [r7, #16]
    intdcCalc = (uint32_t)dcCalc;
 8000802:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000806:	f003 f873 	bl	80038f0 <__aeabi_d2uiz>
 800080a:	4603      	mov	r3, r0
 800080c:	60fb      	str	r3, [r7, #12]
    CCU40_CC42->CRS = intdcCalc;									// compare register . timer shadow compare value - CCU40.OUT2
 800080e:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <pwmXMC+0xc4>)
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	63d3      	str	r3, [r2, #60]	; 0x3c
    CCU40->GCSS |= (1<<CCU4_GCSS_S2SE_Pos); 						// global channel set - S2SE slice 2 shadow transfer set enable
 8000814:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <pwmXMC+0xc8>)
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <pwmXMC+0xc8>)
 8000818:	691b      	ldr	r3, [r3, #16]
 800081a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800081e:	6113      	str	r3, [r2, #16]

    return 0;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	371c      	adds	r7, #28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd90      	pop	{r4, r7, pc}
 800082a:	bf00      	nop
 800082c:	f3af 8000 	nop.w
 8000830:	00000000 	.word	0x00000000
 8000834:	40e24f80 	.word	0x40e24f80
 8000838:	47ae147b 	.word	0x47ae147b
 800083c:	3f847ae1 	.word	0x3f847ae1
 8000840:	40590000 	.word	0x40590000
 8000844:	4000c300 	.word	0x4000c300
 8000848:	4000c000 	.word	0x4000c000

0800084c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	2201      	movs	r2, #1
 800085c:	409a      	lsls	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	605a      	str	r2, [r3, #4]
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000882:	409a      	lsls	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	605a      	str	r2, [r3, #4]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80008a6:	409a      	lsls	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	605a      	str	r2, [r3, #4]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <protocolComplete>:
#include "3Daccel_out_library.h"

void protocolComplete(int16_t position6D, int16_t positionX, int16_t positionY, int16_t positionZ, uint8_t temperature)
{
 80008b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ba:	b0a5      	sub	sp, #148	; 0x94
 80008bc:	af06      	add	r7, sp, #24
 80008be:	4604      	mov	r4, r0
 80008c0:	4608      	mov	r0, r1
 80008c2:	4611      	mov	r1, r2
 80008c4:	461a      	mov	r2, r3
 80008c6:	4623      	mov	r3, r4
 80008c8:	80fb      	strh	r3, [r7, #6]
 80008ca:	4603      	mov	r3, r0
 80008cc:	80bb      	strh	r3, [r7, #4]
 80008ce:	460b      	mov	r3, r1
 80008d0:	807b      	strh	r3, [r7, #2]
 80008d2:	4613      	mov	r3, r2
 80008d4:	803b      	strh	r3, [r7, #0]
	char string6D[8][6] = {"#USX,", "#UDX,", "#DSX,", "#DDX,", "#TOP,", "#BOT,", "#XXX,", "#FAL,"};
 80008d6:	4b2c      	ldr	r3, [pc, #176]	; (8000988 <protocolComplete+0xd0>)
 80008d8:	461c      	mov	r4, r3
 80008da:	f107 0648 	add.w	r6, r7, #72	; 0x48
 80008de:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80008e2:	4635      	mov	r5, r6
 80008e4:	4623      	mov	r3, r4
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	6859      	ldr	r1, [r3, #4]
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f0:	3410      	adds	r4, #16
 80008f2:	3610      	adds	r6, #16
 80008f4:	4574      	cmp	r4, lr
 80008f6:	d1f4      	bne.n	80008e2 <protocolComplete+0x2a>
	char send[RX_BUFFER_SIZE];

	memset (&send, 0, sizeof (send));
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	2240      	movs	r2, #64	; 0x40
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f003 f8dd 	bl	8003ac0 <memset>
/*			statisticSend = 0;*/
/*		}*/
/*	}*/
/*	else*/
	{
		if (sprintf(send, "%s%7d%s%7d%s%7d%s%02d$\n", string6D[position6D], positionX, ",", positionY, ",", positionZ, ",", temperature* 2 + 6) < 0)
 8000906:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800090a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	18cc      	adds	r4, r1, r3
 8000918:	f9b7 5004 	ldrsh.w	r5, [r7, #4]
 800091c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000920:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000924:	f897 1090 	ldrb.w	r1, [r7, #144]	; 0x90
 8000928:	3103      	adds	r1, #3
 800092a:	0049      	lsls	r1, r1, #1
 800092c:	f107 0008 	add.w	r0, r7, #8
 8000930:	9105      	str	r1, [sp, #20]
 8000932:	4916      	ldr	r1, [pc, #88]	; (800098c <protocolComplete+0xd4>)
 8000934:	9104      	str	r1, [sp, #16]
 8000936:	9203      	str	r2, [sp, #12]
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <protocolComplete+0xd4>)
 800093a:	9202      	str	r2, [sp, #8]
 800093c:	9301      	str	r3, [sp, #4]
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <protocolComplete+0xd4>)
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	462b      	mov	r3, r5
 8000944:	4622      	mov	r2, r4
 8000946:	4912      	ldr	r1, [pc, #72]	; (8000990 <protocolComplete+0xd8>)
 8000948:	f003 f958 	bl	8003bfc <sprintf>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	da06      	bge.n	8000960 <protocolComplete+0xa8>
		{
			errorcount++;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <protocolComplete+0xdc>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <protocolComplete+0xdc>)
 800095c:	701a      	strb	r2, [r3, #0]
			_uart_printf("%s", send);
			ledSetting(0, 3);
			packagesSent++;
		}
	}
}
 800095e:	e00e      	b.n	800097e <protocolComplete+0xc6>
		{
			errorcount++;
		}
		else
		{
			_uart_printf("%s", send);
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	4619      	mov	r1, r3
 8000966:	480c      	ldr	r0, [pc, #48]	; (8000998 <protocolComplete+0xe0>)
 8000968:	f7ff fdf6 	bl	8000558 <_uart_printf>
			ledSetting(0, 3);
 800096c:	2103      	movs	r1, #3
 800096e:	2000      	movs	r0, #0
 8000970:	f000 f82c 	bl	80009cc <ledSetting>
			packagesSent++;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <protocolComplete+0xe4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <protocolComplete+0xe4>)
 800097c:	6013      	str	r3, [r2, #0]
		}
	}
}
 800097e:	bf00      	nop
 8000980:	377c      	adds	r7, #124	; 0x7c
 8000982:	46bd      	mov	sp, r7
 8000984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000986:	bf00      	nop
 8000988:	0800a0f4 	.word	0x0800a0f4
 800098c:	0800a0ec 	.word	0x0800a0ec
 8000990:	0800a0d4 	.word	0x0800a0d4
 8000994:	20000a82 	.word	0x20000a82
 8000998:	0800a0f0 	.word	0x0800a0f0
 800099c:	20000a88 	.word	0x20000a88

080009a0 <outputInit>:
        *numDouble = (double)number;
    }
}

void outputInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
    XMC_GPIO_CONFIG_t config_out;
    config_out.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	713b      	strb	r3, [r7, #4]
    config_out.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 80009aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ae:	60bb      	str	r3, [r7, #8]
    config_out.output_strength = XMC_GPIO_OUTPUT_STRENGTH_WEAK;
 80009b0:	2307      	movs	r3, #7
 80009b2:	733b      	strb	r3, [r7, #12]
    XMC_GPIO_Init(LED1, &config_out);
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	461a      	mov	r2, r3
 80009b8:	2100      	movs	r1, #0
 80009ba:	4803      	ldr	r0, [pc, #12]	; (80009c8 <outputInit+0x28>)
 80009bc:	f001 fbe6 	bl	800218c <XMC_GPIO_Init>
/*    XMC_GPIO_Init(LED2, &config_out);*/
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	48028100 	.word	0x48028100

080009cc <ledSetting>:

void ledSetting(uint8_t ledID, uint8_t ledState)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	460a      	mov	r2, r1
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	4613      	mov	r3, r2
 80009da:	71bb      	strb	r3, [r7, #6]
	switch (ledID)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <ledSetting+0x1c>
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d015      	beq.n	8000a12 <ledSetting+0x46>
			}
			break;
		}
		default:
		{
			break;
 80009e6:	e029      	b.n	8000a3c <ledSetting+0x70>
{
	switch (ledID)
	{
		case 0:
		{
			if (ledState == 0)
 80009e8:	79bb      	ldrb	r3, [r7, #6]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d104      	bne.n	80009f8 <ledSetting+0x2c>
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
 80009ee:	2100      	movs	r1, #0
 80009f0:	4814      	ldr	r0, [pc, #80]	; (8000a44 <ledSetting+0x78>)
 80009f2:	f7ff ff3d 	bl	8000870 <XMC_GPIO_SetOutputLow>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED1);
			}
			break;
 80009f6:	e021      	b.n	8000a3c <ledSetting+0x70>
		{
			if (ledState == 0)
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
			}
			else if (ledState == 1)
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d104      	bne.n	8000a08 <ledSetting+0x3c>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
 80009fe:	2100      	movs	r1, #0
 8000a00:	4810      	ldr	r0, [pc, #64]	; (8000a44 <ledSetting+0x78>)
 8000a02:	f7ff ff23 	bl	800084c <XMC_GPIO_SetOutputHigh>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED1);
			}
			break;
 8000a06:	e019      	b.n	8000a3c <ledSetting+0x70>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED1);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <ledSetting+0x78>)
 8000a0c:	f7ff ff42 	bl	8000894 <XMC_GPIO_ToggleOutput>
			}
			break;
 8000a10:	e014      	b.n	8000a3c <ledSetting+0x70>
		}
		case 1:
		{
			if (ledState == 0)
 8000a12:	79bb      	ldrb	r3, [r7, #6]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d104      	bne.n	8000a22 <ledSetting+0x56>
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 1);
 8000a18:	2101      	movs	r1, #1
 8000a1a:	480a      	ldr	r0, [pc, #40]	; (8000a44 <ledSetting+0x78>)
 8000a1c:	f7ff ff28 	bl	8000870 <XMC_GPIO_SetOutputLow>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED2);
			}
			break;
 8000a20:	e00b      	b.n	8000a3a <ledSetting+0x6e>
		{
			if (ledState == 0)
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 1);
			}
			else if (ledState == 1)
 8000a22:	79bb      	ldrb	r3, [r7, #6]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d104      	bne.n	8000a32 <ledSetting+0x66>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 1);
 8000a28:	2101      	movs	r1, #1
 8000a2a:	4806      	ldr	r0, [pc, #24]	; (8000a44 <ledSetting+0x78>)
 8000a2c:	f7ff ff0e 	bl	800084c <XMC_GPIO_SetOutputHigh>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED2);
			}
			break;
 8000a30:	e003      	b.n	8000a3a <ledSetting+0x6e>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 1);
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED2);
 8000a32:	2101      	movs	r1, #1
 8000a34:	4803      	ldr	r0, [pc, #12]	; (8000a44 <ledSetting+0x78>)
 8000a36:	f7ff ff2d 	bl	8000894 <XMC_GPIO_ToggleOutput>
			}
			break;
 8000a3a:	bf00      	nop
		default:
		{
			break;
		}
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	48028100 	.word	0x48028100

08000a48 <pwm>:

void pwm(double dutycycle)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	e9c7 0100 	strd	r0, r1, [r7]
	pwmXMC(dutycycle);
 8000a52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000a56:	f7ff fe93 	bl	8000780 <pwmXMC>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	0000      	movs	r0, r0
	...

08000a68 <pwmAngleCalc>:

double pwmAngleCalc(int16_t positionX, int16_t positionY, int16_t positionZ)
{
 8000a68:	b5b0      	push	{r4, r5, r7, lr}
 8000a6a:	b090      	sub	sp, #64	; 0x40
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	80fb      	strh	r3, [r7, #6]
 8000a72:	460b      	mov	r3, r1
 8000a74:	80bb      	strh	r3, [r7, #4]
 8000a76:	4613      	mov	r3, r2
 8000a78:	807b      	strh	r3, [r7, #2]
	double pitch, pitchOut;
//	double roll;
	double pi = 3.141592654;
 8000a7a:	a44e      	add	r4, pc, #312	; (adr r4, 8000bb4 <pwmAngleCalc+0x14c>)
 8000a7c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000a80:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	double divider = 8190.0;
 8000a84:	a44d      	add	r4, pc, #308	; (adr r4, 8000bbc <pwmAngleCalc+0x154>)
 8000a86:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000a8a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	double gX, gY, gZ;

	gX = positionX/divider;
 8000a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 fc16 	bl	80032c4 <__aeabi_i2d>
 8000a98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000a9c:	f002 fda2 	bl	80035e4 <__aeabi_ddiv>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	gY = positionY/divider;
 8000aa8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f002 fc09 	bl	80032c4 <__aeabi_i2d>
 8000ab2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ab6:	f002 fd95 	bl	80035e4 <__aeabi_ddiv>
 8000aba:	4603      	mov	r3, r0
 8000abc:	460c      	mov	r4, r1
 8000abe:	e9c7 3408 	strd	r3, r4, [r7, #32]
	gZ = positionZ/divider;
 8000ac2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 fbfc 	bl	80032c4 <__aeabi_i2d>
 8000acc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ad0:	f002 fd88 	bl	80035e4 <__aeabi_ddiv>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	460c      	mov	r4, r1
 8000ad8:	e9c7 3406 	strd	r3, r4, [r7, #24]

	pitch = atan(gX/(sqrt((gY*gY)+(gZ*gZ)))) * 180 / pi;
 8000adc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ae0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000ae4:	f002 fc54 	bl	8003390 <__aeabi_dmul>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	460c      	mov	r4, r1
 8000aec:	4625      	mov	r5, r4
 8000aee:	461c      	mov	r4, r3
 8000af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000af4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000af8:	f002 fc4a 	bl	8003390 <__aeabi_dmul>
 8000afc:	4602      	mov	r2, r0
 8000afe:	460b      	mov	r3, r1
 8000b00:	4620      	mov	r0, r4
 8000b02:	4629      	mov	r1, r5
 8000b04:	f002 fa92 	bl	800302c <__adddf3>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	460c      	mov	r4, r1
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	4621      	mov	r1, r4
 8000b10:	f002 f966 	bl	8002de0 <sqrt>
 8000b14:	4603      	mov	r3, r0
 8000b16:	460c      	mov	r4, r1
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4623      	mov	r3, r4
 8000b1c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000b20:	f002 fd60 	bl	80035e4 <__aeabi_ddiv>
 8000b24:	4603      	mov	r3, r0
 8000b26:	460c      	mov	r4, r1
 8000b28:	4618      	mov	r0, r3
 8000b2a:	4621      	mov	r1, r4
 8000b2c:	f001 ffb4 	bl	8002a98 <atan>
 8000b30:	f04f 0200 	mov.w	r2, #0
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <pwmAngleCalc+0x140>)
 8000b36:	f002 fc2b 	bl	8003390 <__aeabi_dmul>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	460c      	mov	r4, r1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	4621      	mov	r1, r4
 8000b42:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000b46:	f002 fd4d 	bl	80035e4 <__aeabi_ddiv>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	460c      	mov	r4, r1
 8000b4e:	e9c7 3404 	strd	r3, r4, [r7, #16]
//	roll = atan(gY/(sqrt((gX*gX)+(gZ*gZ)))) * 180 / pi;

	pitchOut = (90.00+pitch) * 0.05 + 3.00;
 8000b52:	f04f 0200 	mov.w	r2, #0
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <pwmAngleCalc+0x144>)
 8000b58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000b5c:	f002 fa66 	bl	800302c <__adddf3>
 8000b60:	4603      	mov	r3, r0
 8000b62:	460c      	mov	r4, r1
 8000b64:	4618      	mov	r0, r3
 8000b66:	4621      	mov	r1, r4
 8000b68:	a30d      	add	r3, pc, #52	; (adr r3, 8000ba0 <pwmAngleCalc+0x138>)
 8000b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6e:	f002 fc0f 	bl	8003390 <__aeabi_dmul>
 8000b72:	4603      	mov	r3, r0
 8000b74:	460c      	mov	r4, r1
 8000b76:	4618      	mov	r0, r3
 8000b78:	4621      	mov	r1, r4
 8000b7a:	f04f 0200 	mov.w	r2, #0
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <pwmAngleCalc+0x148>)
 8000b80:	f002 fa54 	bl	800302c <__adddf3>
 8000b84:	4603      	mov	r3, r0
 8000b86:	460c      	mov	r4, r1
 8000b88:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return pitchOut;
 8000b8c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	4621      	mov	r1, r4
 8000b94:	3740      	adds	r7, #64	; 0x40
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bdb0      	pop	{r4, r5, r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	f3af 8000 	nop.w
 8000ba0:	9999999a 	.word	0x9999999a
 8000ba4:	3fa99999 	.word	0x3fa99999
 8000ba8:	40668000 	.word	0x40668000
 8000bac:	40568000 	.word	0x40568000
 8000bb0:	40080000 	.word	0x40080000
 8000bb4:	54524550 	.word	0x54524550
 8000bb8:	400921fb 	.word	0x400921fb
 8000bbc:	00000000 	.word	0x00000000
 8000bc0:	40bffe00 	.word	0x40bffe00

08000bc4 <SysTick_Handler>:

void SysTick_Handler (void)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
    static uint32_t ticks = 0, howMuchTicks = 5;

	ticks++;
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <SysTick_Handler+0xa0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	4a24      	ldr	r2, [pc, #144]	; (8000c64 <SysTick_Handler+0xa0>)
 8000bd2:	6013      	str	r3, [r2, #0]
	if(ticks == howMuchTicks)
 8000bd4:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <SysTick_Handler+0xa0>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <SysTick_Handler+0xa4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d12b      	bne.n	8000c38 <SysTick_Handler+0x74>
	{
		// get temperature
		temperature = getTemperature(&temperature);
 8000be0:	4822      	ldr	r0, [pc, #136]	; (8000c6c <SysTick_Handler+0xa8>)
 8000be2:	f000 fb19 	bl	8001218 <getTemperature>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b25a      	sxtb	r2, r3
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <SysTick_Handler+0xa8>)
 8000bec:	701a      	strb	r2, [r3, #0]
		// get 6D Position
		direction = get6Dposition();
 8000bee:	f000 fb2f 	bl	8001250 <get6Dposition>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <SysTick_Handler+0xac>)
 8000bf8:	701a      	strb	r2, [r3, #0]
		// get raw data
		readAxes = getAxesRawData();
 8000bfa:	4c1e      	ldr	r4, [pc, #120]	; (8000c74 <SysTick_Handler+0xb0>)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 fbc0 	bl	8001384 <getAxesRawData>
 8000c04:	4622      	mov	r2, r4
 8000c06:	463b      	mov	r3, r7
 8000c08:	6819      	ldr	r1, [r3, #0]
 8000c0a:	6011      	str	r1, [r2, #0]
 8000c0c:	889b      	ldrh	r3, [r3, #4]
 8000c0e:	8093      	strh	r3, [r2, #4]
		// calculate angle for servo output
		signal = pwmAngleCalc(readAxes.axisX, readAxes.axisY, readAxes.axisZ);
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <SysTick_Handler+0xb0>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	b218      	sxth	r0, r3
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <SysTick_Handler+0xb0>)
 8000c18:	885b      	ldrh	r3, [r3, #2]
 8000c1a:	b219      	sxth	r1, r3
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <SysTick_Handler+0xb0>)
 8000c1e:	889b      	ldrh	r3, [r3, #4]
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	f7ff ff20 	bl	8000a68 <pwmAngleCalc>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <SysTick_Handler+0xb4>)
 8000c2e:	e9c2 3400 	strd	r3, r4, [r2]
		ticks = 0;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <SysTick_Handler+0xa0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
	}

	if (servoEnable == 1)
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <SysTick_Handler+0xb8>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d107      	bne.n	8000c50 <SysTick_Handler+0x8c>
	{
		// set servo
		pwm(signal);
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <SysTick_Handler+0xb4>)
 8000c42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c46:	4618      	mov	r0, r3
 8000c48:	4621      	mov	r1, r4
 8000c4a:	f7ff fefd 	bl	8000a48 <pwm>
	}
	else
	{
		pwm(7.00);
	}
}
 8000c4e:	e004      	b.n	8000c5a <SysTick_Handler+0x96>
		// set servo
		pwm(signal);
	}
	else
	{
		pwm(7.00);
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	490a      	ldr	r1, [pc, #40]	; (8000c80 <SysTick_Handler+0xbc>)
 8000c56:	f7ff fef7 	bl	8000a48 <pwm>
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd90      	pop	{r4, r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000a3c 	.word	0x20000a3c
 8000c68:	20000018 	.word	0x20000018
 8000c6c:	20000a84 	.word	0x20000a84
 8000c70:	20000a8c 	.word	0x20000a8c
 8000c74:	20000a9c 	.word	0x20000a9c
 8000c78:	20000a90 	.word	0x20000a90
 8000c7c:	20000a98 	.word	0x20000a98
 8000c80:	401c0000 	.word	0x401c0000

08000c84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d013      	beq.n	8000cc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ca0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ca4:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d00b      	beq.n	8000cc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000cac:	e000      	b.n	8000cb0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000cae:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000cb0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f9      	beq.n	8000cae <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000cba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000cc4:	687b      	ldr	r3, [r7, #4]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
    // P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
    // PORT2->HWSEL ... clear bits [3:2]
    PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 8000cd8:	4a1d      	ldr	r2, [pc, #116]	; (8000d50 <initRetargetSwo+0x7c>)
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <initRetargetSwo+0x7c>)
 8000cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cde:	f023 030c 	bic.w	r3, r3, #12
 8000ce2:	6753      	str	r3, [r2, #116]	; 0x74
    // PORT2->HWSEL ... set bit [2] -> HWO0
    PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 8000ce4:	4a1a      	ldr	r2, [pc, #104]	; (8000d50 <initRetargetSwo+0x7c>)
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <initRetargetSwo+0x7c>)
 8000ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	6753      	str	r3, [r2, #116]	; 0x74

    // Enable trace systems
    // Source: ARMv7-M Architecture Reference Manual
    // DEMCR = Debug Exception and Monitor Control Register
    //         TRCENA ... global enable for DWT and ITM blocks
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000cf0:	4a18      	ldr	r2, [pc, #96]	; (8000d54 <initRetargetSwo+0x80>)
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <initRetargetSwo+0x80>)
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cfa:	60d3      	str	r3, [r2, #12]
    // SWO baud rate prescaler value
    // ACPR = Asynchronous Clock Prescaler Register
    //        fSWO = fCPU / (SWOSCALAR + 1)
    //        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
    //        fCPU = 120MHz
    TPI->ACPR = 119UL;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <initRetargetSwo+0x84>)
 8000cfe:	2277      	movs	r2, #119	; 0x77
 8000d00:	611a      	str	r2, [r3, #16]
    // Source: ARMv7-M Architecture Reference Manual
    // SPPR = Selected Pin Control Register
    //        0x0 ... Synchronous Trace Port Mode
    //        0x1 ... Asynchronous Serial Wire Output (Manchester)
    //        0x2 ... Asynchronous Serial Wire Output (NRZ)
    TPI->SPPR = 0x2UL;
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <initRetargetSwo+0x84>)
 8000d04:	2202      	movs	r2, #2
 8000d06:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    // Source: ARM Cortex-M4 Processor Technical Reference Manual
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    // FFCR = Formatter and Flash Control Register
    //        0x0 ... continuous formatting disabled
    //        0x1 ... continuous formatting enabled
    TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 8000d0a:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <initRetargetSwo+0x84>)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <initRetargetSwo+0x84>)
 8000d0e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8000d12:	f023 0302 	bic.w	r3, r3, #2
 8000d16:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

    // Unlock ITM
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    ITM->LAR = 0xC5ACCE55;
 8000d1a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d1e:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <initRetargetSwo+0x88>)
 8000d20:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TCR = Trace Control Register
    //       ITMENA ... enable ITM
    ITM->TCR |= ITM_TCR_ITMENA_Msk;
 8000d24:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000d28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d2c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TER = Trace Enable Register
    //       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
    ITM->TER = 0xFFFFFFFF;
 8000d38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	48028200 	.word	0x48028200
 8000d54:	e000edf0 	.word	0xe000edf0
 8000d58:	e0040000 	.word	0xe0040000
 8000d5c:	c5acce55 	.word	0xc5acce55

08000d60 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
    int i;

    for (i = 0; i < nbytes; i++) {
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	e009      	b.n	8000d86 <_write+0x26>
        ITM_SendChar ( (*buf++));
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	1c5a      	adds	r2, r3, #1
 8000d76:	60ba      	str	r2, [r7, #8]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff82 	bl	8000c84 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
    int i;

    for (i = 0; i < nbytes; i++) {
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3301      	adds	r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	dbf1      	blt.n	8000d72 <_write+0x12>
        ITM_SendChar ( (*buf++));
    }
    return nbytes;
 8000d8e:	687b      	ldr	r3, [r7, #4]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	70fb      	strb	r3, [r7, #3]
 8000da4:	4613      	mov	r3, r2
 8000da6:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000da8:	78f8      	ldrb	r0, [r7, #3]
 8000daa:	78fb      	ldrb	r3, [r7, #3]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	3306      	adds	r3, #6
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000dba:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000dbc:	431a      	orrs	r2, r3
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	1d83      	adds	r3, r0, #6
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000de0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f023 020f 	bic.w	r2, r3, #15
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	431a      	orrs	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8000e20:	2104      	movs	r1, #4
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffe4 	bl	8000df0 <XMC_USIC_CH_SetMode>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <XMC_I2C_CH_SetInputSource>:
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 *
 */
__STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT_t input, const uint8_t source)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX0CR_DSEN_Msk;
 8000e40:	78f8      	ldrb	r0, [r7, #3]
 8000e42:	78fb      	ldrb	r3, [r7, #3]
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	3306      	adds	r3, #6
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8000e52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	1d83      	adds	r3, r0, #6
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000e60:	78ba      	ldrb	r2, [r7, #2]
 8000e62:	78fb      	ldrb	r3, [r7, #3]
 8000e64:	4619      	mov	r1, r3
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ff96 	bl	8000d98 <XMC_USIC_CH_SetInputSource>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <_init_i2c1_ch0>:
 *         P0_5 & P0_11
 *  @param none
 *  @return on success this function returns 0
 */
uint8_t _init_i2c1_ch0 (void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    XMC_I2C_CH_Init (XMC_I2C1_CH0, &i2c_cfg);
 8000eb4:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <_init_i2c1_ch0+0x40>)
 8000eb6:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <_init_i2c1_ch0+0x44>)
 8000eb8:	f001 fae2 	bl	8002480 <XMC_I2C_CH_Init>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SDA, USIC1_C0_DX0_P0_5);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <_init_i2c1_ch0+0x44>)
 8000ec2:	f7ff ffb5 	bl	8000e30 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SCL, USIC1_C0_DX1_SCLKOUT);
 8000ec6:	2206      	movs	r2, #6
 8000ec8:	2101      	movs	r1, #1
 8000eca:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <_init_i2c1_ch0+0x44>)
 8000ecc:	f7ff ffb0 	bl	8000e30 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_Start (XMC_I2C1_CH0);
 8000ed0:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <_init_i2c1_ch0+0x44>)
 8000ed2:	f7ff ffa1 	bl	8000e18 <XMC_I2C_CH_Start>

    XMC_GPIO_Init (P0_11, &i2c_scl);
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <_init_i2c1_ch0+0x48>)
 8000ed8:	210b      	movs	r1, #11
 8000eda:	4808      	ldr	r0, [pc, #32]	; (8000efc <_init_i2c1_ch0+0x4c>)
 8000edc:	f001 f956 	bl	800218c <XMC_GPIO_Init>
    XMC_GPIO_Init (P0_5, &i2c_sda);
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <_init_i2c1_ch0+0x50>)
 8000ee2:	2105      	movs	r1, #5
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <_init_i2c1_ch0+0x4c>)
 8000ee6:	f001 f951 	bl	800218c <XMC_GPIO_Init>

    return 0;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000034 	.word	0x20000034
 8000ef4:	48020000 	.word	0x48020000
 8000ef8:	20000028 	.word	0x20000028
 8000efc:	48028000 	.word	0x48028000
 8000f00:	2000001c 	.word	0x2000001c

08000f04 <_i2c_xfer>:
 *         rd_wr    ... I2C Read/Write direction
 *  @return read-value on a I2C read request or return write-value on I2C write
 *          request
 */
uint8_t _i2c_xfer (uint8_t id, uint8_t reg_addr, uint8_t i2c_data, _Bool rd_wr)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	4611      	mov	r1, r2
 8000f10:	461a      	mov	r2, r3
 8000f12:	4623      	mov	r3, r4
 8000f14:	71fb      	strb	r3, [r7, #7]
 8000f16:	4603      	mov	r3, r0
 8000f18:	71bb      	strb	r3, [r7, #6]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	717b      	strb	r3, [r7, #5]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	713b      	strb	r3, [r7, #4]
    XMC_USIC_CH_t *channel;
    char _tmp_i2c_recv_ = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]
    uint8_t id_tmp = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73bb      	strb	r3, [r7, #14]

    channel = XMC_I2C1_CH0;
 8000f2a:	4b3d      	ldr	r3, [pc, #244]	; (8001020 <_i2c_xfer+0x11c>)
 8000f2c:	60bb      	str	r3, [r7, #8]

    id_tmp = LIS3DH_RD_ADR;
 8000f2e:	2330      	movs	r3, #48	; 0x30
 8000f30:	73bb      	strb	r3, [r7, #14]

    XMC_I2C_CH_MasterStart (channel, id_tmp, XMC_I2C_CH_CMD_WRITE);
 8000f32:	7bbb      	ldrb	r3, [r7, #14]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	2200      	movs	r2, #0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	68b8      	ldr	r0, [r7, #8]
 8000f3c:	f001 fb24 	bl	8002588 <XMC_I2C_CH_MasterStart>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8000f40:	bf00      	nop
 8000f42:	68b8      	ldr	r0, [r7, #8]
 8000f44:	f7ff ff96 	bl	8000e74 <XMC_I2C_CH_GetStatusFlag>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f7      	beq.n	8000f42 <_i2c_xfer+0x3e>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000f52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f56:	68b8      	ldr	r0, [r7, #8]
 8000f58:	f7ff ff98 	bl	8000e8c <XMC_I2C_CH_ClearStatusFlag>

    XMC_I2C_CH_MasterTransmit (channel, reg_addr);
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	68b8      	ldr	r0, [r7, #8]
 8000f62:	f001 fb9f 	bl	80026a4 <XMC_I2C_CH_MasterTransmit>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8000f66:	bf00      	nop
 8000f68:	68b8      	ldr	r0, [r7, #8]
 8000f6a:	f7ff ff83 	bl	8000e74 <XMC_I2C_CH_GetStatusFlag>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f7      	beq.n	8000f68 <_i2c_xfer+0x64>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7c:	68b8      	ldr	r0, [r7, #8]
 8000f7e:	f7ff ff85 	bl	8000e8c <XMC_I2C_CH_ClearStatusFlag>

    if (rd_wr) {
 8000f82:	793b      	ldrb	r3, [r7, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d030      	beq.n	8000fea <_i2c_xfer+0xe6>
        /* Read from REG */
        XMC_I2C_CH_MasterRepeatedStart (channel, id_tmp, XMC_I2C_CH_CMD_READ);
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4619      	mov	r1, r3
 8000f90:	68b8      	ldr	r0, [r7, #8]
 8000f92:	f001 fb2d 	bl	80025f0 <XMC_I2C_CH_MasterRepeatedStart>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8000f96:	bf00      	nop
 8000f98:	68b8      	ldr	r0, [r7, #8]
 8000f9a:	f7ff ff6b 	bl	8000e74 <XMC_I2C_CH_GetStatusFlag>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0f7      	beq.n	8000f98 <_i2c_xfer+0x94>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000fa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fac:	68b8      	ldr	r0, [r7, #8]
 8000fae:	f7ff ff6d 	bl	8000e8c <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterReceiveNack (channel);
 8000fb2:	68b8      	ldr	r0, [r7, #8]
 8000fb4:	f001 fb9c 	bl	80026f0 <XMC_I2C_CH_MasterReceiveNack>

        while ( (XMC_USIC_CH_GetReceiveBufferStatus (channel) !=
 8000fb8:	bf00      	nop
 8000fba:	68b8      	ldr	r0, [r7, #8]
 8000fbc:	f7ff ff0a 	bl	8000dd4 <XMC_USIC_CH_GetReceiveBufferStatus>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fc6:	d006      	beq.n	8000fd6 <_i2c_xfer+0xd2>
                 (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) && ( (uint32_t) XMC_USIC_CH_GetReceiveBufferStatus (channel)
 8000fc8:	68b8      	ldr	r0, [r7, #8]
 8000fca:	f7ff ff03 	bl	8000dd4 <XMC_USIC_CH_GetReceiveBufferStatus>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fd4:	d1f1      	bne.n	8000fba <_i2c_xfer+0xb6>
                         != (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID0));

        _tmp_i2c_recv_ = XMC_I2C_CH_GetReceivedData (channel);
 8000fd6:	68b8      	ldr	r0, [r7, #8]
 8000fd8:	f001 fbb0 	bl	800273c <XMC_I2C_CH_GetReceivedData>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	73fb      	strb	r3, [r7, #15]

        XMC_I2C_CH_MasterStop (channel);
 8000fe0:	68b8      	ldr	r0, [r7, #8]
 8000fe2:	f001 fb39 	bl	8002658 <XMC_I2C_CH_MasterStop>

        return _tmp_i2c_recv_;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	e016      	b.n	8001018 <_i2c_xfer+0x114>
    } else {
        /* Write to REG */
        XMC_I2C_CH_MasterTransmit (channel, i2c_data);
 8000fea:	797b      	ldrb	r3, [r7, #5]
 8000fec:	4619      	mov	r1, r3
 8000fee:	68b8      	ldr	r0, [r7, #8]
 8000ff0:	f001 fb58 	bl	80026a4 <XMC_I2C_CH_MasterTransmit>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8000ff4:	bf00      	nop
 8000ff6:	68b8      	ldr	r0, [r7, #8]
 8000ff8:	f7ff ff3c 	bl	8000e74 <XMC_I2C_CH_GetStatusFlag>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0f7      	beq.n	8000ff6 <_i2c_xfer+0xf2>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8001006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100a:	68b8      	ldr	r0, [r7, #8]
 800100c:	f7ff ff3e 	bl	8000e8c <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterStop (channel);
 8001010:	68b8      	ldr	r0, [r7, #8]
 8001012:	f001 fb21 	bl	8002658 <XMC_I2C_CH_MasterStop>

        return i2c_data;
 8001016:	797b      	ldrb	r3, [r7, #5]
    }
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	bd90      	pop	{r4, r7, pc}
 8001020:	48020000 	.word	0x48020000

08001024 <initMEMSsensor>:
#include "lis3dh_library.h"

uint8_t initMEMSsensor()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
	uint8_t error = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	71fb      	strb	r3, [r7, #7]

    //set ODR (turn ON device)
    if(LIS3DH_SetODR(LIS3DH_ODR_100Hz) == 1)
 800102e:	2005      	movs	r0, #5
 8001030:	f000 fa02 	bl	8001438 <LIS3DH_SetODR>
 8001034:	4603      	mov	r3, r0
 8001036:	2b01      	cmp	r3, #1
 8001038:	d103      	bne.n	8001042 <initMEMSsensor+0x1e>
    {
        printf("LIS3DH_SetODR done...\n");
 800103a:	4828      	ldr	r0, [pc, #160]	; (80010dc <initMEMSsensor+0xb8>)
 800103c:	f002 fdd6 	bl	8003bec <puts>
 8001040:	e008      	b.n	8001054 <initMEMSsensor+0x30>
    }
	else
	{
		error++;
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	3301      	adds	r3, #1
 8001046:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <initMEMSsensor+0xbc>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <initMEMSsensor+0xbc>)
 8001052:	701a      	strb	r2, [r3, #0]
	}

    //set PowerMode
    if(LIS3DH_SetMode(LIS3DH_NORMAL) == 1)
 8001054:	2002      	movs	r0, #2
 8001056:	f000 fa9d 	bl	8001594 <LIS3DH_SetMode>
 800105a:	4603      	mov	r3, r0
 800105c:	2b01      	cmp	r3, #1
 800105e:	d103      	bne.n	8001068 <initMEMSsensor+0x44>
    {

        printf("LIS3DH_SetMode done...\n");
 8001060:	4820      	ldr	r0, [pc, #128]	; (80010e4 <initMEMSsensor+0xc0>)
 8001062:	f002 fdc3 	bl	8003bec <puts>
 8001066:	e008      	b.n	800107a <initMEMSsensor+0x56>
    }
	else
	{
		error++;
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	3301      	adds	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <initMEMSsensor+0xbc>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <initMEMSsensor+0xbc>)
 8001078:	701a      	strb	r2, [r3, #0]
	}

    //set Fullscale
    if(LIS3DH_SetFullScale(LIS3DH_FULLSCALE_4) == 1)
 800107a:	2001      	movs	r0, #1
 800107c:	f000 fb34 	bl	80016e8 <LIS3DH_SetFullScale>
 8001080:	4603      	mov	r3, r0
 8001082:	2b01      	cmp	r3, #1
 8001084:	d103      	bne.n	800108e <initMEMSsensor+0x6a>
    {

        printf("LIS3DH_SetFullScale done...\n");
 8001086:	4818      	ldr	r0, [pc, #96]	; (80010e8 <initMEMSsensor+0xc4>)
 8001088:	f002 fdb0 	bl	8003bec <puts>
 800108c:	e008      	b.n	80010a0 <initMEMSsensor+0x7c>
    }
	else
	{
		error++;
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	3301      	adds	r3, #1
 8001092:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <initMEMSsensor+0xbc>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <initMEMSsensor+0xbc>)
 800109e:	701a      	strb	r2, [r3, #0]
	}

    //set axis Enable
    response = LIS3DH_SetAxis(LIS3DH_X_ENABLE | LIS3DH_Y_ENABLE | LIS3DH_Z_ENABLE);
 80010a0:	2007      	movs	r0, #7
 80010a2:	f000 faf5 	bl	8001690 <LIS3DH_SetAxis>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <initMEMSsensor+0xc8>)
 80010ac:	701a      	strb	r2, [r3, #0]
    if(response == 1)
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <initMEMSsensor+0xc8>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d103      	bne.n	80010be <initMEMSsensor+0x9a>
    {
        printf("LIS3DH_SetAxis done...\n");
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <initMEMSsensor+0xcc>)
 80010b8:	f002 fd98 	bl	8003bec <puts>
 80010bc:	e008      	b.n	80010d0 <initMEMSsensor+0xac>
    }
	else
	{
		error++;
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	3301      	adds	r3, #1
 80010c2:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <initMEMSsensor+0xbc>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <initMEMSsensor+0xbc>)
 80010ce:	701a      	strb	r2, [r3, #0]
	}

	return error;
 80010d0:	79fb      	ldrb	r3, [r7, #7]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	0800a124 	.word	0x0800a124
 80010e0:	20000a82 	.word	0x20000a82
 80010e4:	0800a13c 	.word	0x0800a13c
 80010e8:	0800a154 	.word	0x0800a154
 80010ec:	20000a81 	.word	0x20000a81
 80010f0:	0800a170 	.word	0x0800a170

080010f4 <configMEMSsensor>:

uint8_t configMEMSsensor()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
	uint8_t error = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	71fb      	strb	r3, [r7, #7]

	//set Interrupt Threshold 
	if(LIS3DH_SetInt1Threshold(20) == 1)
 80010fe:	2014      	movs	r0, #20
 8001100:	f000 fc20 	bl	8001944 <LIS3DH_SetInt1Threshold>
 8001104:	4603      	mov	r3, r0
 8001106:	2b01      	cmp	r3, #1
 8001108:	d103      	bne.n	8001112 <configMEMSsensor+0x1e>
	{
    	printf("LIS3DH_SetInt1Thershold done...\n");
 800110a:	483b      	ldr	r0, [pc, #236]	; (80011f8 <configMEMSsensor+0x104>)
 800110c:	f002 fd6e 	bl	8003bec <puts>
 8001110:	e008      	b.n	8001124 <configMEMSsensor+0x30>
	}
	else
	{
		error++;
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	3301      	adds	r3, #1
 8001116:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 8001118:	4b38      	ldr	r3, [pc, #224]	; (80011fc <configMEMSsensor+0x108>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	3301      	adds	r3, #1
 800111e:	b2da      	uxtb	r2, r3
 8001120:	4b36      	ldr	r3, [pc, #216]	; (80011fc <configMEMSsensor+0x108>)
 8001122:	701a      	strb	r2, [r3, #0]
	}
	
	//set Interrupt configuration (all enabled)
	response = LIS3DH_SetIntConfiguration(LIS3DH_INT1_ZHIE_ENABLE | LIS3DH_INT1_ZLIE_ENABLE |
 8001124:	203f      	movs	r0, #63	; 0x3f
 8001126:	f000 fb3b 	bl	80017a0 <LIS3DH_SetIntConfiguration>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b34      	ldr	r3, [pc, #208]	; (8001200 <configMEMSsensor+0x10c>)
 8001130:	701a      	strb	r2, [r3, #0]
			   LIS3DH_INT1_YHIE_ENABLE | LIS3DH_INT1_YLIE_ENABLE |
			   LIS3DH_INT1_XHIE_ENABLE | LIS3DH_INT1_XLIE_ENABLE ); 
	if(response == 1)
 8001132:	4b33      	ldr	r3, [pc, #204]	; (8001200 <configMEMSsensor+0x10c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d103      	bne.n	8001142 <configMEMSsensor+0x4e>
	{
		printf("LIS3DH_SetIntConfiguration done...\n");
 800113a:	4832      	ldr	r0, [pc, #200]	; (8001204 <configMEMSsensor+0x110>)
 800113c:	f002 fd56 	bl	8003bec <puts>
 8001140:	e008      	b.n	8001154 <configMEMSsensor+0x60>
  	}
	else
	{
		error++;
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	3301      	adds	r3, #1
 8001146:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 8001148:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <configMEMSsensor+0x108>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b2a      	ldr	r3, [pc, #168]	; (80011fc <configMEMSsensor+0x108>)
 8001152:	701a      	strb	r2, [r3, #0]
	}

	 //set Interrupt Mode
	if(LIS3DH_SetIntMode(LIS3DH_INT_MODE_6D_POSITION) == 1)
 8001154:	2003      	movs	r0, #3
 8001156:	f000 fb4d 	bl	80017f4 <LIS3DH_SetIntMode>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	d103      	bne.n	8001168 <configMEMSsensor+0x74>
	{
		printf("LIS3DH_SetIntMode done...\n");
 8001160:	4829      	ldr	r0, [pc, #164]	; (8001208 <configMEMSsensor+0x114>)
 8001162:	f002 fd43 	bl	8003bec <puts>
 8001166:	e008      	b.n	800117a <configMEMSsensor+0x86>
    }
	else
	{
		error++;
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	3301      	adds	r3, #1
 800116c:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <configMEMSsensor+0x108>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <configMEMSsensor+0x108>)
 8001178:	701a      	strb	r2, [r3, #0]
	}

	// internal temperature sensor
	if (LIS3DH_SetADCAux(MEMS_ENABLE) == 1)
 800117a:	2001      	movs	r0, #1
 800117c:	f000 f9b8 	bl	80014f0 <LIS3DH_SetADCAux>
 8001180:	4603      	mov	r3, r0
 8001182:	2b01      	cmp	r3, #1
 8001184:	d103      	bne.n	800118e <configMEMSsensor+0x9a>
	{
		printf("LIS3DH_SetADCAux done...");
 8001186:	4821      	ldr	r0, [pc, #132]	; (800120c <configMEMSsensor+0x118>)
 8001188:	f002 fce8 	bl	8003b5c <printf>
 800118c:	e008      	b.n	80011a0 <configMEMSsensor+0xac>
	}
	else
	{
		error++;
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	3301      	adds	r3, #1
 8001192:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <configMEMSsensor+0x108>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <configMEMSsensor+0x108>)
 800119e:	701a      	strb	r2, [r3, #0]
	}

	if (LIS3DH_SetBDU(MEMS_ENABLE) == 1)
 80011a0:	2001      	movs	r0, #1
 80011a2:	f000 facf 	bl	8001744 <LIS3DH_SetBDU>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d103      	bne.n	80011b4 <configMEMSsensor+0xc0>
	{
		printf("LIS3DH_SetBDU done...\n");
 80011ac:	4818      	ldr	r0, [pc, #96]	; (8001210 <configMEMSsensor+0x11c>)
 80011ae:	f002 fd1d 	bl	8003bec <puts>
 80011b2:	e008      	b.n	80011c6 <configMEMSsensor+0xd2>
	}
	else
	{
		error++;
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	3301      	adds	r3, #1
 80011b8:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <configMEMSsensor+0x108>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <configMEMSsensor+0x108>)
 80011c4:	701a      	strb	r2, [r3, #0]
	}

	if (LIS3DH_SetTemperature(MEMS_ENABLE) == 1)
 80011c6:	2001      	movs	r0, #1
 80011c8:	f000 f964 	bl	8001494 <LIS3DH_SetTemperature>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d103      	bne.n	80011da <configMEMSsensor+0xe6>
	{
		printf("LIS3DH_SetTemperature done...\n");
 80011d2:	4810      	ldr	r0, [pc, #64]	; (8001214 <configMEMSsensor+0x120>)
 80011d4:	f002 fd0a 	bl	8003bec <puts>
 80011d8:	e008      	b.n	80011ec <configMEMSsensor+0xf8>
	}
	else
	{
		error++;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	3301      	adds	r3, #1
 80011de:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <configMEMSsensor+0x108>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <configMEMSsensor+0x108>)
 80011ea:	701a      	strb	r2, [r3, #0]
	}
	
	return error;
 80011ec:	79fb      	ldrb	r3, [r7, #7]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	0800a188 	.word	0x0800a188
 80011fc:	20000a82 	.word	0x20000a82
 8001200:	20000a81 	.word	0x20000a81
 8001204:	0800a1a8 	.word	0x0800a1a8
 8001208:	0800a1cc 	.word	0x0800a1cc
 800120c:	0800a1e8 	.word	0x0800a1e8
 8001210:	0800a204 	.word	0x0800a204
 8001214:	0800a21c 	.word	0x0800a21c

08001218 <getTemperature>:

uint8_t getTemperature()
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
	int8_t temperature = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	71fb      	strb	r3, [r7, #7]

	if (LIS3DH_GetTempRaw(&temperature) != 1)
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	4618      	mov	r0, r3
 8001226:	f000 f991 	bl	800154c <LIS3DH_GetTempRaw>
 800122a:	4603      	mov	r3, r0
 800122c:	2b01      	cmp	r3, #1
 800122e:	d005      	beq.n	800123c <getTemperature+0x24>
	{
		errorcount++;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <getTemperature+0x34>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <getTemperature+0x34>)
 800123a:	701a      	strb	r2, [r3, #0]
	}

	return temperature;
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	b2db      	uxtb	r3, r3
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000a82 	.word	0x20000a82

08001250 <get6Dposition>:

uint8_t get6Dposition()
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
	uint8_t response = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	71fb      	strb	r3, [r7, #7]

	response = LIS3DH_Get6DPosition(&position);
 800125a:	4846      	ldr	r0, [pc, #280]	; (8001374 <get6Dposition+0x124>)
 800125c:	f000 faf8 	bl	8001850 <LIS3DH_Get6DPosition>
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]

	if((response == 1) && (old_position != position))
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d171      	bne.n	800134e <get6Dposition+0xfe>
 800126a:	4b43      	ldr	r3, [pc, #268]	; (8001378 <get6Dposition+0x128>)
 800126c:	781a      	ldrb	r2, [r3, #0]
 800126e:	4b41      	ldr	r3, [pc, #260]	; (8001374 <get6Dposition+0x124>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d06b      	beq.n	800134e <get6Dposition+0xfe>
	{
		switch (position)
 8001276:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <get6Dposition+0x124>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	3b41      	subs	r3, #65	; 0x41
 800127c:	2b1f      	cmp	r3, #31
 800127e:	d85b      	bhi.n	8001338 <get6Dposition+0xe8>
 8001280:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <get6Dposition+0x38>)
 8001282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001286:	bf00      	nop
 8001288:	08001319 	.word	0x08001319
 800128c:	08001311 	.word	0x08001311
 8001290:	08001339 	.word	0x08001339
 8001294:	08001309 	.word	0x08001309
 8001298:	08001339 	.word	0x08001339
 800129c:	08001339 	.word	0x08001339
 80012a0:	08001339 	.word	0x08001339
 80012a4:	08001321 	.word	0x08001321
 80012a8:	08001339 	.word	0x08001339
 80012ac:	08001339 	.word	0x08001339
 80012b0:	08001339 	.word	0x08001339
 80012b4:	08001339 	.word	0x08001339
 80012b8:	08001339 	.word	0x08001339
 80012bc:	08001339 	.word	0x08001339
 80012c0:	08001339 	.word	0x08001339
 80012c4:	08001331 	.word	0x08001331
 80012c8:	08001339 	.word	0x08001339
 80012cc:	08001339 	.word	0x08001339
 80012d0:	08001339 	.word	0x08001339
 80012d4:	08001339 	.word	0x08001339
 80012d8:	08001339 	.word	0x08001339
 80012dc:	08001339 	.word	0x08001339
 80012e0:	08001339 	.word	0x08001339
 80012e4:	08001339 	.word	0x08001339
 80012e8:	08001339 	.word	0x08001339
 80012ec:	08001339 	.word	0x08001339
 80012f0:	08001339 	.word	0x08001339
 80012f4:	08001339 	.word	0x08001339
 80012f8:	08001339 	.word	0x08001339
 80012fc:	08001339 	.word	0x08001339
 8001300:	08001339 	.word	0x08001339
 8001304:	08001329 	.word	0x08001329
		{
			case LIS3DH_UP_SX:
			{
				direction = 0;
 8001308:	4b1c      	ldr	r3, [pc, #112]	; (800137c <get6Dposition+0x12c>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
				break;
 800130e:	e01d      	b.n	800134c <get6Dposition+0xfc>
			}
			case LIS3DH_UP_DX:
			{
				direction = 1;
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <get6Dposition+0x12c>)
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
				break;
 8001316:	e019      	b.n	800134c <get6Dposition+0xfc>
			}
			case LIS3DH_DW_SX:
			{
				direction = 2;
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <get6Dposition+0x12c>)
 800131a:	2202      	movs	r2, #2
 800131c:	701a      	strb	r2, [r3, #0]
				break;
 800131e:	e015      	b.n	800134c <get6Dposition+0xfc>
			}
			case LIS3DH_DW_DX:
			{
				direction = 3;
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <get6Dposition+0x12c>)
 8001322:	2203      	movs	r2, #3
 8001324:	701a      	strb	r2, [r3, #0]
				break; 
 8001326:	e011      	b.n	800134c <get6Dposition+0xfc>
			}
			case LIS3DH_TOP:    
			{
				direction = 4;
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <get6Dposition+0x12c>)
 800132a:	2204      	movs	r2, #4
 800132c:	701a      	strb	r2, [r3, #0]
				break; 
 800132e:	e00d      	b.n	800134c <get6Dposition+0xfc>
			}
			case LIS3DH_BOTTOM: 
			{
				direction = 5;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <get6Dposition+0x12c>)
 8001332:	2205      	movs	r2, #5
 8001334:	701a      	strb	r2, [r3, #0]
				break; 
 8001336:	e009      	b.n	800134c <get6Dposition+0xfc>
			}
			default:
			{
				direction = 6;
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <get6Dposition+0x12c>)
 800133a:	2206      	movs	r2, #6
 800133c:	701a      	strb	r2, [r3, #0]
				errorcount++;
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <get6Dposition+0x130>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <get6Dposition+0x130>)
 8001348:	701a      	strb	r2, [r3, #0]
				break;
 800134a:	bf00      	nop
			}
		}
	}
 800134c:	e008      	b.n	8001360 <get6Dposition+0x110>
	else if(response != 1)
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d005      	beq.n	8001360 <get6Dposition+0x110>
	{
		errorcount++;
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <get6Dposition+0x130>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	b2da      	uxtb	r2, r3
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <get6Dposition+0x130>)
 800135e:	701a      	strb	r2, [r3, #0]
	}
	old_position = position;
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <get6Dposition+0x124>)
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <get6Dposition+0x128>)
 8001366:	701a      	strb	r2, [r3, #0]

	return direction;
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <get6Dposition+0x12c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000a83 	.word	0x20000a83
 8001378:	20000a99 	.word	0x20000a99
 800137c:	20000a8c 	.word	0x20000a8c
 8001380:	20000a82 	.word	0x20000a82

08001384 <getAxesRawData>:

AXESRAWDATA getAxesRawData()
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	uint8_t response = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	75fb      	strb	r3, [r7, #23]
	AxesRaw_t data;
	AXESRAWDATA dataOut;

	response = LIS3DH_GetAccAxesRaw(&data);
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4618      	mov	r0, r3
 8001396:	f000 faef 	bl	8001978 <LIS3DH_GetAccAxesRaw>
 800139a:	4603      	mov	r3, r0
 800139c:	75fb      	strb	r3, [r7, #23]

	if(response != 1)
 800139e:	7dfb      	ldrb	r3, [r7, #23]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d005      	beq.n	80013b0 <getAxesRawData+0x2c>
	{
		errorcount++;
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <getAxesRawData+0x5c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <getAxesRawData+0x5c>)
 80013ae:	701a      	strb	r2, [r3, #0]
	}

	dataOut.axisX = data.AXIS_X;
 80013b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	813b      	strh	r3, [r7, #8]
	dataOut.axisY = data.AXIS_Y;
 80013b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	817b      	strh	r3, [r7, #10]
	dataOut.axisZ = data.AXIS_Z;
 80013c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	81bb      	strh	r3, [r7, #12]

	return dataOut;	
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	461a      	mov	r2, r3
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	6010      	str	r0, [r2, #0]
 80013d4:	889b      	ldrh	r3, [r3, #4]
 80013d6:	8093      	strh	r3, [r2, #4]
}
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000a82 	.word	0x20000a82

080013e4 <LIS3DH_ReadReg>:
*			: I2C or SPI reading functions
* Input			: Register Address
* Output		: Data REad
* Return		: None
*******************************************************************************/
u8_t LIS3DH_ReadReg(u8_t Reg, u8_t* Data) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]

    //To be completed with either I2c or SPI reading function
    //i.e. *Data = SPI_Mems_Read_Reg( Reg );

    *Data = _i2c_xfer (0, Reg, 0, 1);
 80013f0:	79f9      	ldrb	r1, [r7, #7]
 80013f2:	2301      	movs	r3, #1
 80013f4:	2200      	movs	r2, #0
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff fd84 	bl	8000f04 <_i2c_xfer>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	701a      	strb	r2, [r3, #0]

    return 1;
 8001404:	2301      	movs	r3, #1
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop

08001410 <LIS3DH_WriteReg>:
*			: I2C or SPI writing function
* Input			: Register Address, Data to be written
* Output		: None
* Return		: None
*******************************************************************************/
u8_t LIS3DH_WriteReg(u8_t WriteAddr, u8_t Data) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	460a      	mov	r2, r1
 800141a:	71fb      	strb	r3, [r7, #7]
 800141c:	4613      	mov	r3, r2
 800141e:	71bb      	strb	r3, [r7, #6]

    //To be completed with either I2c or SPI writing function
    //i.e. SPI_Mems_Write_Reg(WriteAddr, Data);

    _i2c_xfer (0, WriteAddr, Data, 0);
 8001420:	79ba      	ldrb	r2, [r7, #6]
 8001422:	79f9      	ldrb	r1, [r7, #7]
 8001424:	2300      	movs	r3, #0
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff fd6c 	bl	8000f04 <_i2c_xfer>

    return 1;
 800142c:	2301      	movs	r3, #1
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop

08001438 <LIS3DH_SetODR>:
* Description    : Sets LIS3DH Output Data Rate
* Input          : Output Data Rate
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetODR(LIS3DH_ODR_t ov) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001442:	f107 030f 	add.w	r3, r7, #15
 8001446:	4619      	mov	r1, r3
 8001448:	2020      	movs	r0, #32
 800144a:	f7ff ffcb 	bl	80013e4 <LIS3DH_ReadReg>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <LIS3DH_SetODR+0x20>
        return MEMS_ERROR;
 8001454:	2300      	movs	r3, #0
 8001456:	e018      	b.n	800148a <LIS3DH_SetODR+0x52>

    value &= 0x0f;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	b2db      	uxtb	r3, r3
 8001460:	73fb      	strb	r3, [r7, #15]
    value |= ov<<LIS3DH_ODR_BIT;
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	b25a      	sxtb	r2, r3
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	b25b      	sxtb	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b25b      	sxtb	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	4619      	mov	r1, r3
 8001478:	2020      	movs	r0, #32
 800147a:	f7ff ffc9 	bl	8001410 <LIS3DH_WriteReg>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <LIS3DH_SetODR+0x50>
        return MEMS_ERROR;
 8001484:	2300      	movs	r3, #0
 8001486:	e000      	b.n	800148a <LIS3DH_SetODR+0x52>

    return MEMS_SUCCESS;
 8001488:	2301      	movs	r3, #1
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop

08001494 <LIS3DH_SetTemperature>:
* Output         : None
* Note           : For Read Temperature by LIS3DH_OUT_AUX_3, LIS3DH_SetADCAux and LIS3DH_SetBDU
				   functions must be ENABLE
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetTemperature(State_t state) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
 800149e:	f107 030f 	add.w	r3, r7, #15
 80014a2:	4619      	mov	r1, r3
 80014a4:	201f      	movs	r0, #31
 80014a6:	f7ff ff9d 	bl	80013e4 <LIS3DH_ReadReg>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <LIS3DH_SetTemperature+0x20>
        return MEMS_ERROR;
 80014b0:	2300      	movs	r3, #0
 80014b2:	e018      	b.n	80014e6 <LIS3DH_SetTemperature+0x52>

    value &= 0xBF;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	73fb      	strb	r3, [r7, #15]
    value |= state<<LIS3DH_TEMP_EN;
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	019b      	lsls	r3, r3, #6
 80014c2:	b25a      	sxtb	r2, r3
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	4619      	mov	r1, r3
 80014d4:	201f      	movs	r0, #31
 80014d6:	f7ff ff9b 	bl	8001410 <LIS3DH_WriteReg>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <LIS3DH_SetTemperature+0x50>
        return MEMS_ERROR;
 80014e0:	2300      	movs	r3, #0
 80014e2:	e000      	b.n	80014e6 <LIS3DH_SetTemperature+0x52>

    return MEMS_SUCCESS;
 80014e4:	2301      	movs	r3, #1
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop

080014f0 <LIS3DH_SetADCAux>:
* Description    : Sets LIS3DH Output ADC
* Input          : MEMS_ENABLE, MEMS_DISABLE
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetADCAux(State_t state) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
 80014fa:	f107 030f 	add.w	r3, r7, #15
 80014fe:	4619      	mov	r1, r3
 8001500:	201f      	movs	r0, #31
 8001502:	f7ff ff6f 	bl	80013e4 <LIS3DH_ReadReg>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <LIS3DH_SetADCAux+0x20>
        return MEMS_ERROR;
 800150c:	2300      	movs	r3, #0
 800150e:	e018      	b.n	8001542 <LIS3DH_SetADCAux+0x52>

    value &= 0x7F;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001516:	b2db      	uxtb	r3, r3
 8001518:	73fb      	strb	r3, [r7, #15]
    value |= state<<LIS3DH_ADC_PD;
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	01db      	lsls	r3, r3, #7
 800151e:	b25a      	sxtb	r2, r3
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	b25b      	sxtb	r3, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	b25b      	sxtb	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	4619      	mov	r1, r3
 8001530:	201f      	movs	r0, #31
 8001532:	f7ff ff6d 	bl	8001410 <LIS3DH_WriteReg>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <LIS3DH_SetADCAux+0x50>
        return MEMS_ERROR;
 800153c:	2300      	movs	r3, #0
 800153e:	e000      	b.n	8001542 <LIS3DH_SetADCAux+0x52>

    return MEMS_SUCCESS;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop

0800154c <LIS3DH_GetTempRaw>:
* Description    : Read the Temperature Values by AUX Output Registers OUT_3_H
* Input          : Buffer to empty
* Output         : Temperature Values Registers buffer
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_GetTempRaw(i8_t* buff) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
    u8_t valueL;
    u8_t valueH;

    if( !LIS3DH_ReadReg(LIS3DH_OUT_3_L, &valueL) )
 8001554:	f107 030f 	add.w	r3, r7, #15
 8001558:	4619      	mov	r1, r3
 800155a:	200c      	movs	r0, #12
 800155c:	f7ff ff42 	bl	80013e4 <LIS3DH_ReadReg>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <LIS3DH_GetTempRaw+0x1e>
        return MEMS_ERROR;
 8001566:	2300      	movs	r3, #0
 8001568:	e00f      	b.n	800158a <LIS3DH_GetTempRaw+0x3e>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_3_H, &valueH) )
 800156a:	f107 030e 	add.w	r3, r7, #14
 800156e:	4619      	mov	r1, r3
 8001570:	200d      	movs	r0, #13
 8001572:	f7ff ff37 	bl	80013e4 <LIS3DH_ReadReg>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <LIS3DH_GetTempRaw+0x34>
        return MEMS_ERROR;
 800157c:	2300      	movs	r3, #0
 800157e:	e004      	b.n	800158a <LIS3DH_GetTempRaw+0x3e>

    *buff = (i8_t)( valueH );
 8001580:	7bbb      	ldrb	r3, [r7, #14]
 8001582:	b25a      	sxtb	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	701a      	strb	r2, [r3, #0]

    return MEMS_SUCCESS;
 8001588:	2301      	movs	r3, #1
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop

08001594 <LIS3DH_SetMode>:
* Description    : Sets LIS3DH Operating Mode
* Input          : Modality (LIS3DH_NORMAL, LIS3DH_LOW_POWER, LIS3DH_POWER_DOWN)
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetMode(LIS3DH_Mode_t md) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
    u8_t value;
    u8_t value2;
    static   u8_t ODR_old_value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 800159e:	f107 030f 	add.w	r3, r7, #15
 80015a2:	4619      	mov	r1, r3
 80015a4:	2020      	movs	r0, #32
 80015a6:	f7ff ff1d 	bl	80013e4 <LIS3DH_ReadReg>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <LIS3DH_SetMode+0x20>
        return MEMS_ERROR;
 80015b0:	2300      	movs	r3, #0
 80015b2:	e066      	b.n	8001682 <LIS3DH_SetMode+0xee>

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value2) )
 80015b4:	f107 030e 	add.w	r3, r7, #14
 80015b8:	4619      	mov	r1, r3
 80015ba:	2023      	movs	r0, #35	; 0x23
 80015bc:	f7ff ff12 	bl	80013e4 <LIS3DH_ReadReg>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <LIS3DH_SetMode+0x36>
        return MEMS_ERROR;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e05b      	b.n	8001682 <LIS3DH_SetMode+0xee>

    if((value & 0xF0)==0)
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10b      	bne.n	80015ec <LIS3DH_SetMode+0x58>
        value = value | (ODR_old_value & 0xF0); //if it comes from POWERDOWN
 80015d4:	4b2d      	ldr	r3, [pc, #180]	; (800168c <LIS3DH_SetMode+0xf8>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	f023 030f 	bic.w	r3, r3, #15
 80015de:	b25a      	sxtb	r2, r3
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	73fb      	strb	r3, [r7, #15]

    switch(md) {
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d01e      	beq.n	8001630 <LIS3DH_SetMode+0x9c>
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d00a      	beq.n	800160c <LIS3DH_SetMode+0x78>
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d12c      	bne.n	8001654 <LIS3DH_SetMode+0xc0>

    case LIS3DH_POWER_DOWN:
        ODR_old_value = value;
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	4b23      	ldr	r3, [pc, #140]	; (800168c <LIS3DH_SetMode+0xf8>)
 80015fe:	701a      	strb	r2, [r3, #0]
        value &= 0x0F;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	b2db      	uxtb	r3, r3
 8001608:	73fb      	strb	r3, [r7, #15]
        break;
 800160a:	e025      	b.n	8001658 <LIS3DH_SetMode+0xc4>

    case LIS3DH_NORMAL:
        value &= 0xF7;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f023 0308 	bic.w	r3, r3, #8
 8001612:	b2db      	uxtb	r3, r3
 8001614:	73fb      	strb	r3, [r7, #15]
        value |= (MEMS_RESET<<LIS3DH_LPEN);
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 800161a:	7bbb      	ldrb	r3, [r7, #14]
 800161c:	f023 0308 	bic.w	r3, r3, #8
 8001620:	b2db      	uxtb	r3, r3
 8001622:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_SET<<LIS3DH_HR);   //set HighResolution_BIT
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	b2db      	uxtb	r3, r3
 800162c:	73bb      	strb	r3, [r7, #14]
        break;
 800162e:	e013      	b.n	8001658 <LIS3DH_SetMode+0xc4>

    case LIS3DH_LOW_POWER:
        value &= 0xF7;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	f023 0308 	bic.w	r3, r3, #8
 8001636:	b2db      	uxtb	r3, r3
 8001638:	73fb      	strb	r3, [r7, #15]
        value |=  (MEMS_SET<<LIS3DH_LPEN);
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	b2db      	uxtb	r3, r3
 8001642:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 8001644:	7bbb      	ldrb	r3, [r7, #14]
 8001646:	f023 0308 	bic.w	r3, r3, #8
 800164a:	b2db      	uxtb	r3, r3
 800164c:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_RESET<<LIS3DH_HR); //reset HighResolution_BIT
 800164e:	7bbb      	ldrb	r3, [r7, #14]
 8001650:	73bb      	strb	r3, [r7, #14]
        break;
 8001652:	e001      	b.n	8001658 <LIS3DH_SetMode+0xc4>

    default:
        return MEMS_ERROR;
 8001654:	2300      	movs	r3, #0
 8001656:	e014      	b.n	8001682 <LIS3DH_SetMode+0xee>
    }

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	4619      	mov	r1, r3
 800165c:	2020      	movs	r0, #32
 800165e:	f7ff fed7 	bl	8001410 <LIS3DH_WriteReg>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <LIS3DH_SetMode+0xd8>
        return MEMS_ERROR;
 8001668:	2300      	movs	r3, #0
 800166a:	e00a      	b.n	8001682 <LIS3DH_SetMode+0xee>

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value2) )
 800166c:	7bbb      	ldrb	r3, [r7, #14]
 800166e:	4619      	mov	r1, r3
 8001670:	2023      	movs	r0, #35	; 0x23
 8001672:	f7ff fecd 	bl	8001410 <LIS3DH_WriteReg>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <LIS3DH_SetMode+0xec>
        return MEMS_ERROR;
 800167c:	2300      	movs	r3, #0
 800167e:	e000      	b.n	8001682 <LIS3DH_SetMode+0xee>

    return MEMS_SUCCESS;
 8001680:	2301      	movs	r3, #1
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000a40 	.word	0x20000a40

08001690 <LIS3DH_SetAxis>:
* Input          : LIS3DH_X_ENABLE/DISABLE | LIS3DH_Y_ENABLE/DISABLE | LIS3DH_Z_ENABLE/DISABLE
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetAxis(LIS3DH_Axis_t axis) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 800169a:	f107 030f 	add.w	r3, r7, #15
 800169e:	4619      	mov	r1, r3
 80016a0:	2020      	movs	r0, #32
 80016a2:	f7ff fe9f 	bl	80013e4 <LIS3DH_ReadReg>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <LIS3DH_SetAxis+0x20>
        return MEMS_ERROR;
 80016ac:	2300      	movs	r3, #0
 80016ae:	e017      	b.n	80016e0 <LIS3DH_SetAxis+0x50>
    value &= 0xF8;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	f023 0307 	bic.w	r3, r3, #7
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	73fb      	strb	r3, [r7, #15]
    value |= (0x07 & axis);
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	4619      	mov	r1, r3
 80016ce:	2020      	movs	r0, #32
 80016d0:	f7ff fe9e 	bl	8001410 <LIS3DH_WriteReg>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <LIS3DH_SetAxis+0x4e>
        return MEMS_ERROR;
 80016da:	2300      	movs	r3, #0
 80016dc:	e000      	b.n	80016e0 <LIS3DH_SetAxis+0x50>

    return MEMS_SUCCESS;
 80016de:	2301      	movs	r3, #1
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <LIS3DH_SetFullScale>:
* Description    : Sets the LIS3DH FullScale
* Input          : LIS3DH_FULLSCALE_2/LIS3DH_FULLSCALE_4/LIS3DH_FULLSCALE_8/LIS3DH_FULLSCALE_16
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetFullScale(LIS3DH_Fullscale_t fs) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 80016f2:	f107 030f 	add.w	r3, r7, #15
 80016f6:	4619      	mov	r1, r3
 80016f8:	2023      	movs	r0, #35	; 0x23
 80016fa:	f7ff fe73 	bl	80013e4 <LIS3DH_ReadReg>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <LIS3DH_SetFullScale+0x20>
        return MEMS_ERROR;
 8001704:	2300      	movs	r3, #0
 8001706:	e018      	b.n	800173a <LIS3DH_SetFullScale+0x52>

    value &= 0xCF;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800170e:	b2db      	uxtb	r3, r3
 8001710:	73fb      	strb	r3, [r7, #15]
    value |= (fs<<LIS3DH_FS);
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	011b      	lsls	r3, r3, #4
 8001716:	b25a      	sxtb	r2, r3
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	b25b      	sxtb	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	b25b      	sxtb	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	4619      	mov	r1, r3
 8001728:	2023      	movs	r0, #35	; 0x23
 800172a:	f7ff fe71 	bl	8001410 <LIS3DH_WriteReg>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <LIS3DH_SetFullScale+0x50>
        return MEMS_ERROR;
 8001734:	2300      	movs	r3, #0
 8001736:	e000      	b.n	800173a <LIS3DH_SetFullScale+0x52>

    return MEMS_SUCCESS;
 8001738:	2301      	movs	r3, #1
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop

08001744 <LIS3DH_SetBDU>:
* Description    : Enable/Disable Block Data Update Functionality
* Input          : ENABLE/DISABLE
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetBDU(State_t bdu) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 800174e:	f107 030f 	add.w	r3, r7, #15
 8001752:	4619      	mov	r1, r3
 8001754:	2023      	movs	r0, #35	; 0x23
 8001756:	f7ff fe45 	bl	80013e4 <LIS3DH_ReadReg>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <LIS3DH_SetBDU+0x20>
        return MEMS_ERROR;
 8001760:	2300      	movs	r3, #0
 8001762:	e018      	b.n	8001796 <LIS3DH_SetBDU+0x52>

    value &= 0x7F;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800176a:	b2db      	uxtb	r3, r3
 800176c:	73fb      	strb	r3, [r7, #15]
    value |= (bdu<<LIS3DH_BDU);
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	01db      	lsls	r3, r3, #7
 8001772:	b25a      	sxtb	r2, r3
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	b25b      	sxtb	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b25b      	sxtb	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	4619      	mov	r1, r3
 8001784:	2023      	movs	r0, #35	; 0x23
 8001786:	f7ff fe43 	bl	8001410 <LIS3DH_WriteReg>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <LIS3DH_SetBDU+0x50>
        return MEMS_ERROR;
 8001790:	2300      	movs	r3, #0
 8001792:	e000      	b.n	8001796 <LIS3DH_SetBDU+0x52>

    return MEMS_SUCCESS;
 8001794:	2301      	movs	r3, #1
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop

080017a0 <LIS3DH_SetIntConfiguration>:
* Input          : LIS3DH_INT1_AND/OR | LIS3DH_INT1_ZHIE_ENABLE/DISABLE | LIS3DH_INT1_ZLIE_ENABLE/DISABLE...
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntConfiguration(LIS3DH_Int1Conf_t ic) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 80017aa:	f107 030f 	add.w	r3, r7, #15
 80017ae:	4619      	mov	r1, r3
 80017b0:	2030      	movs	r0, #48	; 0x30
 80017b2:	f7ff fe17 	bl	80013e4 <LIS3DH_ReadReg>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <LIS3DH_SetIntConfiguration+0x20>
        return MEMS_ERROR;
 80017bc:	2300      	movs	r3, #0
 80017be:	e014      	b.n	80017ea <LIS3DH_SetIntConfiguration+0x4a>

    value &= 0x40;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	73fb      	strb	r3, [r7, #15]
    value |= ic;
 80017ca:	7bfa      	ldrb	r2, [r7, #15]
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	4619      	mov	r1, r3
 80017d8:	2030      	movs	r0, #48	; 0x30
 80017da:	f7ff fe19 	bl	8001410 <LIS3DH_WriteReg>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <LIS3DH_SetIntConfiguration+0x48>
        return MEMS_ERROR;
 80017e4:	2300      	movs	r3, #0
 80017e6:	e000      	b.n	80017ea <LIS3DH_SetIntConfiguration+0x4a>

    return MEMS_SUCCESS;
 80017e8:	2301      	movs	r3, #1
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop

080017f4 <LIS3DH_SetIntMode>:
* Input          : LIS3DH_INT_MODE_OR, LIS3DH_INT_MODE_6D_MOVEMENT, LIS3DH_INT_MODE_AND,
				   LIS3DH_INT_MODE_6D_POSITION
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntMode(LIS3DH_Int1Mode_t int_mode) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 80017fe:	f107 030f 	add.w	r3, r7, #15
 8001802:	4619      	mov	r1, r3
 8001804:	2030      	movs	r0, #48	; 0x30
 8001806:	f7ff fded 	bl	80013e4 <LIS3DH_ReadReg>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <LIS3DH_SetIntMode+0x20>
        return MEMS_ERROR;
 8001810:	2300      	movs	r3, #0
 8001812:	e018      	b.n	8001846 <LIS3DH_SetIntMode+0x52>

    value &= 0x3F;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800181a:	b2db      	uxtb	r3, r3
 800181c:	73fb      	strb	r3, [r7, #15]
    value |= (int_mode<<LIS3DH_INT_6D);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	019b      	lsls	r3, r3, #6
 8001822:	b25a      	sxtb	r2, r3
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	b25b      	sxtb	r3, r3
 8001828:	4313      	orrs	r3, r2
 800182a:	b25b      	sxtb	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	4619      	mov	r1, r3
 8001834:	2030      	movs	r0, #48	; 0x30
 8001836:	f7ff fdeb 	bl	8001410 <LIS3DH_WriteReg>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <LIS3DH_SetIntMode+0x50>
        return MEMS_ERROR;
 8001840:	2300      	movs	r3, #0
 8001842:	e000      	b.n	8001846 <LIS3DH_SetIntMode+0x52>

    return MEMS_SUCCESS;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop

08001850 <LIS3DH_Get6DPosition>:
* Description    : 6D, 4D Interrupt Position Detect
* Input          : Byte to empty by POSITION_6D_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_Get6DPosition(u8_t* val) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_SRC, &value) )
 8001858:	f107 030f 	add.w	r3, r7, #15
 800185c:	4619      	mov	r1, r3
 800185e:	2031      	movs	r0, #49	; 0x31
 8001860:	f7ff fdc0 	bl	80013e4 <LIS3DH_ReadReg>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <LIS3DH_Get6DPosition+0x1e>
        return MEMS_ERROR;
 800186a:	2300      	movs	r3, #0
 800186c:	e065      	b.n	800193a <LIS3DH_Get6DPosition+0xea>

    value &= 0x7F;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001874:	b2db      	uxtb	r3, r3
 8001876:	73fb      	strb	r3, [r7, #15]

    switch (value) {
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	3b41      	subs	r3, #65	; 0x41
 800187c:	2b1f      	cmp	r3, #31
 800187e:	d85b      	bhi.n	8001938 <LIS3DH_Get6DPosition+0xe8>
 8001880:	a201      	add	r2, pc, #4	; (adr r2, 8001888 <LIS3DH_Get6DPosition+0x38>)
 8001882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001886:	bf00      	nop
 8001888:	08001919 	.word	0x08001919
 800188c:	08001911 	.word	0x08001911
 8001890:	08001939 	.word	0x08001939
 8001894:	08001909 	.word	0x08001909
 8001898:	08001939 	.word	0x08001939
 800189c:	08001939 	.word	0x08001939
 80018a0:	08001939 	.word	0x08001939
 80018a4:	08001921 	.word	0x08001921
 80018a8:	08001939 	.word	0x08001939
 80018ac:	08001939 	.word	0x08001939
 80018b0:	08001939 	.word	0x08001939
 80018b4:	08001939 	.word	0x08001939
 80018b8:	08001939 	.word	0x08001939
 80018bc:	08001939 	.word	0x08001939
 80018c0:	08001939 	.word	0x08001939
 80018c4:	08001931 	.word	0x08001931
 80018c8:	08001939 	.word	0x08001939
 80018cc:	08001939 	.word	0x08001939
 80018d0:	08001939 	.word	0x08001939
 80018d4:	08001939 	.word	0x08001939
 80018d8:	08001939 	.word	0x08001939
 80018dc:	08001939 	.word	0x08001939
 80018e0:	08001939 	.word	0x08001939
 80018e4:	08001939 	.word	0x08001939
 80018e8:	08001939 	.word	0x08001939
 80018ec:	08001939 	.word	0x08001939
 80018f0:	08001939 	.word	0x08001939
 80018f4:	08001939 	.word	0x08001939
 80018f8:	08001939 	.word	0x08001939
 80018fc:	08001939 	.word	0x08001939
 8001900:	08001939 	.word	0x08001939
 8001904:	08001929 	.word	0x08001929
    case LIS3DH_UP_SX:
        *val = LIS3DH_UP_SX;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2244      	movs	r2, #68	; 0x44
 800190c:	701a      	strb	r2, [r3, #0]
        break;
 800190e:	e013      	b.n	8001938 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_UP_DX:
        *val = LIS3DH_UP_DX;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2242      	movs	r2, #66	; 0x42
 8001914:	701a      	strb	r2, [r3, #0]
        break;
 8001916:	e00f      	b.n	8001938 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_SX:
        *val = LIS3DH_DW_SX;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2241      	movs	r2, #65	; 0x41
 800191c:	701a      	strb	r2, [r3, #0]
        break;
 800191e:	e00b      	b.n	8001938 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_DX:
        *val = LIS3DH_DW_DX;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2248      	movs	r2, #72	; 0x48
 8001924:	701a      	strb	r2, [r3, #0]
        break;
 8001926:	e007      	b.n	8001938 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_TOP:
        *val = LIS3DH_TOP;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2260      	movs	r2, #96	; 0x60
 800192c:	701a      	strb	r2, [r3, #0]
        break;
 800192e:	e003      	b.n	8001938 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_BOTTOM:
        *val = LIS3DH_BOTTOM;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2250      	movs	r2, #80	; 0x50
 8001934:	701a      	strb	r2, [r3, #0]
        break;
 8001936:	bf00      	nop
    }

    return MEMS_SUCCESS;
 8001938:	2301      	movs	r3, #1
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop

08001944 <LIS3DH_SetInt1Threshold>:
* Description    : Sets Interrupt 1 Threshold
* Input          : Threshold = [0,31]
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetInt1Threshold(u8_t ths) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
    if (ths > 127)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	da01      	bge.n	800195a <LIS3DH_SetInt1Threshold+0x16>
        return MEMS_ERROR;
 8001956:	2300      	movs	r3, #0
 8001958:	e00a      	b.n	8001970 <LIS3DH_SetInt1Threshold+0x2c>

    if( !LIS3DH_WriteReg(LIS3DH_INT1_THS, ths) )
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	4619      	mov	r1, r3
 800195e:	2032      	movs	r0, #50	; 0x32
 8001960:	f7ff fd56 	bl	8001410 <LIS3DH_WriteReg>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <LIS3DH_SetInt1Threshold+0x2a>
        return MEMS_ERROR;
 800196a:	2300      	movs	r3, #0
 800196c:	e000      	b.n	8001970 <LIS3DH_SetInt1Threshold+0x2c>

    return MEMS_SUCCESS;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <LIS3DH_GetAccAxesRaw>:
* Description    : Read the Acceleration Values Output Registers
* Input          : buffer to empity by AxesRaw_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_GetAccAxesRaw(AxesRaw_t* buff) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    i16_t value;
    u8_t *valueL = (u8_t *)(&value);
 8001980:	f107 030e 	add.w	r3, r7, #14
 8001984:	617b      	str	r3, [r7, #20]
    u8_t *valueH = ((u8_t *)(&value)+1);
 8001986:	f107 030e 	add.w	r3, r7, #14
 800198a:	3301      	adds	r3, #1
 800198c:	613b      	str	r3, [r7, #16]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_L, valueL) )
 800198e:	6979      	ldr	r1, [r7, #20]
 8001990:	2028      	movs	r0, #40	; 0x28
 8001992:	f7ff fd27 	bl	80013e4 <LIS3DH_ReadReg>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <LIS3DH_GetAccAxesRaw+0x28>
        return MEMS_ERROR;
 800199c:	2300      	movs	r3, #0
 800199e:	e039      	b.n	8001a14 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_H, valueH) )
 80019a0:	6939      	ldr	r1, [r7, #16]
 80019a2:	2029      	movs	r0, #41	; 0x29
 80019a4:	f7ff fd1e 	bl	80013e4 <LIS3DH_ReadReg>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <LIS3DH_GetAccAxesRaw+0x3a>
        return MEMS_ERROR;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e030      	b.n	8001a14 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_X = value;
 80019b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	801a      	strh	r2, [r3, #0]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_L, valueL) )
 80019ba:	6979      	ldr	r1, [r7, #20]
 80019bc:	202a      	movs	r0, #42	; 0x2a
 80019be:	f7ff fd11 	bl	80013e4 <LIS3DH_ReadReg>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <LIS3DH_GetAccAxesRaw+0x54>
        return MEMS_ERROR;
 80019c8:	2300      	movs	r3, #0
 80019ca:	e023      	b.n	8001a14 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_H, valueH) )
 80019cc:	6939      	ldr	r1, [r7, #16]
 80019ce:	202b      	movs	r0, #43	; 0x2b
 80019d0:	f7ff fd08 	bl	80013e4 <LIS3DH_ReadReg>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <LIS3DH_GetAccAxesRaw+0x66>
        return MEMS_ERROR;
 80019da:	2300      	movs	r3, #0
 80019dc:	e01a      	b.n	8001a14 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Y = value;
 80019de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	805a      	strh	r2, [r3, #2]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_L, valueL) )
 80019e6:	6979      	ldr	r1, [r7, #20]
 80019e8:	202c      	movs	r0, #44	; 0x2c
 80019ea:	f7ff fcfb 	bl	80013e4 <LIS3DH_ReadReg>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <LIS3DH_GetAccAxesRaw+0x80>
        return MEMS_ERROR;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e00d      	b.n	8001a14 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_H, valueH) )
 80019f8:	6939      	ldr	r1, [r7, #16]
 80019fa:	202d      	movs	r0, #45	; 0x2d
 80019fc:	f7ff fcf2 	bl	80013e4 <LIS3DH_ReadReg>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <LIS3DH_GetAccAxesRaw+0x92>
        return MEMS_ERROR;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e004      	b.n	8001a14 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Z = value;
 8001a0a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	809a      	strh	r2, [r3, #4]

    return MEMS_SUCCESS;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db0a      	blt.n	8001a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	490d      	ldr	r1, [pc, #52]	; (8001a68 <__NVIC_SetPriority+0x4c>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	0092      	lsls	r2, r2, #2
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a44:	e00a      	b.n	8001a5c <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	4909      	ldr	r1, [pc, #36]	; (8001a6c <__NVIC_SetPriority+0x50>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	440b      	add	r3, r1
 8001a5a:	761a      	strb	r2, [r3, #24]
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000e100 	.word	0xe000e100
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a80:	d301      	bcc.n	8001a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00f      	b.n	8001aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <SysTick_Config+0x40>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8e:	213f      	movs	r1, #63	; 0x3f
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f7ff ffc2 	bl	8001a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <SysTick_Config+0x40>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9e:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <SysTick_Config+0x40>)
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	e000e010 	.word	0xe000e010

08001ab4 <main>:
#include "3Daccel_app.h"
#include "3Daccel_out_library.h"
#include "lis3dh_library.h"

int main (void)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b093      	sub	sp, #76	; 0x4c
 8001ab8:	af02      	add	r7, sp, #8

	char rx_buff[RX_BUFFER_SIZE] = {0};
 8001aba:	463b      	mov	r3, r7
 8001abc:	2240      	movs	r2, #64	; 0x40
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f001 fffd 	bl	8003ac0 <memset>

	direction = 6;
 8001ac6:	4b6b      	ldr	r3, [pc, #428]	; (8001c74 <main+0x1c0>)
 8001ac8:	2206      	movs	r2, #6
 8001aca:	701a      	strb	r2, [r3, #0]
	temperature = 0;
 8001acc:	4b6a      	ldr	r3, [pc, #424]	; (8001c78 <main+0x1c4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
	errorcount = 0;
 8001ad2:	4b6a      	ldr	r3, [pc, #424]	; (8001c7c <main+0x1c8>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
	packagesSent = 0;
 8001ad8:	4b69      	ldr	r3, [pc, #420]	; (8001c80 <main+0x1cc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
	position = 0;
 8001ade:	4b69      	ldr	r3, [pc, #420]	; (8001c84 <main+0x1d0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
	old_position = 0;
 8001ae4:	4b68      	ldr	r3, [pc, #416]	; (8001c88 <main+0x1d4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
	readAxes.axisX = 0;
 8001aea:	4b68      	ldr	r3, [pc, #416]	; (8001c8c <main+0x1d8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	801a      	strh	r2, [r3, #0]
	readAxes.axisY = 0;
 8001af0:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <main+0x1d8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	805a      	strh	r2, [r3, #2]
	readAxes.axisZ = 0;
 8001af6:	4b65      	ldr	r3, [pc, #404]	; (8001c8c <main+0x1d8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	809a      	strh	r2, [r3, #4]
	statisticSend = 0;
 8001afc:	4b64      	ldr	r3, [pc, #400]	; (8001c90 <main+0x1dc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
	signal = 7.00;
 8001b02:	4a64      	ldr	r2, [pc, #400]	; (8001c94 <main+0x1e0>)
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	4c63      	ldr	r4, [pc, #396]	; (8001c98 <main+0x1e4>)
 8001b0a:	e9c2 3400 	strd	r3, r4, [r2]
	servoEnable = 0;
 8001b0e:	4b63      	ldr	r3, [pc, #396]	; (8001c9c <main+0x1e8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]

	// init DEBUG, UART, I2C
    initRetargetSwo();
 8001b14:	f7ff f8de 	bl	8000cd4 <initRetargetSwo>
    _init_uart0_ch0();
 8001b18:	f7fe fc9c 	bl	8000454 <_init_uart0_ch0>
    _init_i2c1_ch0();
 8001b1c:	f7ff f9c8 	bl	8000eb0 <_init_i2c1_ch0>
	initServoPWM();
 8001b20:	f7fe fdda 	bl	80006d8 <initServoPWM>
	

#if DEBUG
    printf("DEBUG+I2C+UART init done...\n");
 8001b24:	485e      	ldr	r0, [pc, #376]	; (8001ca0 <main+0x1ec>)
 8001b26:	f002 f861 	bl	8003bec <puts>
#endif

	// init LED output
	outputInit();
 8001b2a:	f7fe ff39 	bl	80009a0 <outputInit>

    // init MEMS
	while (1)
	{
		if (initMEMSsensor() == 0)
 8001b2e:	f7ff fa79 	bl	8001024 <initMEMSsensor>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d103      	bne.n	8001b40 <main+0x8c>
		{
#if DEBUG
			printf("MEMS init done...\n");
 8001b38:	485a      	ldr	r0, [pc, #360]	; (8001ca4 <main+0x1f0>)
 8001b3a:	f002 f857 	bl	8003bec <puts>
#endif
			break;
 8001b3e:	e007      	b.n	8001b50 <main+0x9c>
		}
		else
		{
#if DEBUG
			printf("Error MEMS init, retry...\n");
 8001b40:	4859      	ldr	r0, [pc, #356]	; (8001ca8 <main+0x1f4>)
 8001b42:	f002 f853 	bl	8003bec <puts>
#endif
			ledSetting(0, 1);
 8001b46:	2101      	movs	r1, #1
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7fe ff3f 	bl	80009cc <ledSetting>
		}
	}
 8001b4e:	e7ee      	b.n	8001b2e <main+0x7a>

	// config MEMS
	while (1)
	{
		if (configMEMSsensor() == 0)
 8001b50:	f7ff fad0 	bl	80010f4 <configMEMSsensor>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d114      	bne.n	8001b84 <main+0xd0>
		{
#if DEBUG
			printf("MEMS config done...\n");
 8001b5a:	4854      	ldr	r0, [pc, #336]	; (8001cac <main+0x1f8>)
 8001b5c:	f002 f846 	bl	8003bec <puts>
#endif
			break;
 8001b60:	bf00      	nop
#endif
			ledSetting(0, 1);
		}
	}

	pwm(signal);
 8001b62:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <main+0x1e0>)
 8001b64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	f7fe ff6c 	bl	8000a48 <pwm>

	// set up SysTick
    SysTick_Config (SystemCoreClock / 1000);
 8001b70:	4b4f      	ldr	r3, [pc, #316]	; (8001cb0 <main+0x1fc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a4f      	ldr	r2, [pc, #316]	; (8001cb4 <main+0x200>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	099b      	lsrs	r3, r3, #6
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff77 	bl	8001a70 <SysTick_Config>
 8001b82:	e007      	b.n	8001b94 <main+0xe0>
			break;
		}
		else
		{
#if DEBUG
			printf("Error MEMS config, retry...\n");
 8001b84:	484c      	ldr	r0, [pc, #304]	; (8001cb8 <main+0x204>)
 8001b86:	f002 f831 	bl	8003bec <puts>
#endif
			ledSetting(0, 1);
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f7fe ff1d 	bl	80009cc <ledSetting>
		}
	}
 8001b92:	e7dd      	b.n	8001b50 <main+0x9c>

	// main loop
	while(1)
	{
		// clear buffer and receie incoming data
		memset (&rx_buff, 0, sizeof (rx_buff));
 8001b94:	463b      	mov	r3, r7
 8001b96:	2240      	movs	r2, #64	; 0x40
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f001 ff90 	bl	8003ac0 <memset>
		_uart_get_string (rx_buff);
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fd2a 	bl	80005fc <_uart_get_string>
#if DEBUG
		printf("received %s\n", rx_buff);
 8001ba8:	463b      	mov	r3, r7
 8001baa:	4619      	mov	r1, r3
 8001bac:	4843      	ldr	r0, [pc, #268]	; (8001cbc <main+0x208>)
 8001bae:	f001 ffd5 	bl	8003b5c <printf>
/*		// get raw data*/
/*		readAxes = getAxesRawData();*/
/*		// calculate angle for servo output*/
/*		signal = pwmAngleCalc(readAxes.axisX, readAxes.axisY, readAxes.axisZ);*/

        if (strncmp(rx_buff, "#REQ,", strlen(rx_buff)) == 0)
 8001bb2:	463b      	mov	r3, r7
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 f863 	bl	8003c80 <strlen>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	4940      	ldr	r1, [pc, #256]	; (8001cc0 <main+0x20c>)
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f002 f8cb 	bl	8003d5c <strncmp>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d114      	bne.n	8001bf6 <main+0x142>
        {
			// send data over UART
			protocolComplete(direction, readAxes.axisX, readAxes.axisY, readAxes.axisZ, temperature);
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <main+0x1c0>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	b218      	sxth	r0, r3
 8001bd2:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <main+0x1d8>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	b219      	sxth	r1, r3
 8001bd8:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <main+0x1d8>)
 8001bda:	885b      	ldrh	r3, [r3, #2]
 8001bdc:	b21a      	sxth	r2, r3
 8001bde:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <main+0x1d8>)
 8001be0:	889b      	ldrh	r3, [r3, #4]
 8001be2:	b21c      	sxth	r4, r3
 8001be4:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <main+0x1c4>)
 8001be6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	4623      	mov	r3, r4
 8001bf0:	f7fe fe62 	bl	80008b8 <protocolComplete>
 8001bf4:	e7ce      	b.n	8001b94 <main+0xe0>
		}
		else if (strncmp(rx_buff, "#END,", strlen(rx_buff)) == 0)
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 f841 	bl	8003c80 <strlen>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	463b      	mov	r3, r7
 8001c02:	4930      	ldr	r1, [pc, #192]	; (8001cc4 <main+0x210>)
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 f8a9 	bl	8003d5c <strncmp>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d104      	bne.n	8001c1a <main+0x166>
		{
			ledSetting(0, 0);
 8001c10:	2100      	movs	r1, #0
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7fe feda 	bl	80009cc <ledSetting>
 8001c18:	e7bc      	b.n	8001b94 <main+0xe0>
		}
		else if (strncmp(rx_buff, "#CON,", strlen(rx_buff)) == 0)
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 f82f 	bl	8003c80 <strlen>
 8001c22:	4602      	mov	r2, r0
 8001c24:	463b      	mov	r3, r7
 8001c26:	4928      	ldr	r1, [pc, #160]	; (8001cc8 <main+0x214>)
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f002 f897 	bl	8003d5c <strncmp>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d104      	bne.n	8001c3e <main+0x18a>
		{
			ledSetting(0, 1);
 8001c34:	2101      	movs	r1, #1
 8001c36:	2000      	movs	r0, #0
 8001c38:	f7fe fec8 	bl	80009cc <ledSetting>
 8001c3c:	e7aa      	b.n	8001b94 <main+0xe0>
		}
		else if (strncmp(rx_buff, "#SER,", strlen(rx_buff)) == 0)
 8001c3e:	463b      	mov	r3, r7
 8001c40:	4618      	mov	r0, r3
 8001c42:	f002 f81d 	bl	8003c80 <strlen>
 8001c46:	4602      	mov	r2, r0
 8001c48:	463b      	mov	r3, r7
 8001c4a:	4920      	ldr	r1, [pc, #128]	; (8001ccc <main+0x218>)
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 f885 	bl	8003d5c <strncmp>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10b      	bne.n	8001c70 <main+0x1bc>
		{
			if (servoEnable == 0)
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <main+0x1e8>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d103      	bne.n	8001c68 <main+0x1b4>
			{
				servoEnable = 1;
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <main+0x1e8>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
 8001c66:	e795      	b.n	8001b94 <main+0xe0>
			}
			else
			{
				servoEnable = 0;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <main+0x1e8>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	e791      	b.n	8001b94 <main+0xe0>
			}
		}
		else
		{
			continue;
 8001c70:	bf00      	nop
		}
	}
 8001c72:	e78f      	b.n	8001b94 <main+0xe0>
 8001c74:	20000a8c 	.word	0x20000a8c
 8001c78:	20000a84 	.word	0x20000a84
 8001c7c:	20000a82 	.word	0x20000a82
 8001c80:	20000a88 	.word	0x20000a88
 8001c84:	20000a83 	.word	0x20000a83
 8001c88:	20000a99 	.word	0x20000a99
 8001c8c:	20000a9c 	.word	0x20000a9c
 8001c90:	20000a80 	.word	0x20000a80
 8001c94:	20000a90 	.word	0x20000a90
 8001c98:	401c0000 	.word	0x401c0000
 8001c9c:	20000a98 	.word	0x20000a98
 8001ca0:	0800a23c 	.word	0x0800a23c
 8001ca4:	0800a258 	.word	0x0800a258
 8001ca8:	0800a26c 	.word	0x0800a26c
 8001cac:	0800a288 	.word	0x0800a288
 8001cb0:	2000ffc0 	.word	0x2000ffc0
 8001cb4:	10624dd3 	.word	0x10624dd3
 8001cb8:	0800a29c 	.word	0x0800a29c
 8001cbc:	0800a2b8 	.word	0x0800a2b8
 8001cc0:	0800a2c8 	.word	0x0800a2c8
 8001cc4:	0800a2d0 	.word	0x0800a2d0
 8001cc8:	0800a2d8 	.word	0x0800a2d8
 8001ccc:	0800a2e0 	.word	0x0800a2e0

08001cd0 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop

08001d08 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
 return -1;
 8001d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop

08001d1c <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <_fstat+0x16>
  return -1;
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d30:	e001      	b.n	8001d36 <_fstat+0x1a>
 else
  return -2;
 8001d32:	f06f 0301 	mvn.w	r3, #1
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop

08001d44 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 8001d4c:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <_sbrk+0x60>)
 8001d4e:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 8001d50:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d108      	bne.n	8001d6a <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8001d58:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <_sbrk+0x64>)
 8001d5a:	4a14      	ldr	r2, [pc, #80]	; (8001dac <_sbrk+0x68>)
 8001d5c:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	4413      	add	r3, r2
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <_sbrk+0x6c>)
 8001d68:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <_sbrk+0x64>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8001d70:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 8001d7c:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8001d80:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <_sbrk+0x6c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d301      	bcc.n	8001d90 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e003      	b.n	8001d98 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 8001d90:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <_sbrk+0x64>)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 8001d96:	693b      	ldr	r3, [r7, #16]
 }
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	371c      	adds	r7, #28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	0000f518 	.word	0x0000f518
 8001da8:	20000a44 	.word	0x20000a44
 8001dac:	20000aa8 	.word	0x20000aa8
 8001db0:	20000a48 	.word	0x20000a48

08001db4 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop

08001dc4 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	e003      	b.n	8001df2 <delay+0x16>
  {
    __NOP();
 8001dea:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3301      	adds	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3f7      	bcc.n	8001dea <delay+0xe>
  {
    __NOP();
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop

08001e08 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8001e08:	b598      	push	{r3, r4, r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8001e0c:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <SystemInit+0x20>)
 8001e0e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e12:	4614      	mov	r4, r2
 8001e14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8001e1a:	f000 f807 	bl	8001e2c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8001e1e:	f000 f83d 	bl	8001e9c <SystemCoreClockSetup>
}
 8001e22:	bf00      	nop
 8001e24:	bd98      	pop	{r3, r4, r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000ffc4 	.word	0x2000ffc4

08001e2c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e32:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001e34:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <SystemCoreSetup+0x64>)
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <SystemCoreSetup+0x68>)
 8001e38:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3a:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001e3e:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001e40:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <SystemCoreSetup+0x64>)
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <SystemCoreSetup+0x64>)
 8001e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8001e50:	4a0f      	ldr	r2, [pc, #60]	; (8001e90 <SystemCoreSetup+0x64>)
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <SystemCoreSetup+0x64>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f023 0308 	bic.w	r3, r3, #8
 8001e5a:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <SystemCoreSetup+0x6c>)
 8001e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e62:	3314      	adds	r3, #20
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f023 030f 	bic.w	r3, r3, #15
 8001e6e:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f043 0303 	orr.w	r3, r3, #3
 8001e76:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <SystemCoreSetup+0x6c>)
 8001e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7e:	3314      	adds	r3, #20
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	601a      	str	r2, [r3, #0]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00
 8001e94:	08000000 	.word	0x08000000
 8001e98:	58001000 	.word	0x58001000

08001e9c <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8001ea0:	4b75      	ldr	r3, [pc, #468]	; (8002078 <SystemCoreClockSetup+0x1dc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10c      	bne.n	8001ec6 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8001eac:	4a72      	ldr	r2, [pc, #456]	; (8002078 <SystemCoreClockSetup+0x1dc>)
 8001eae:	4b72      	ldr	r3, [pc, #456]	; (8002078 <SystemCoreClockSetup+0x1dc>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8001eb8:	bf00      	nop
 8001eba:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <SystemCoreClockSetup+0x1dc>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f9      	beq.n	8001eba <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8001ec6:	4b6d      	ldr	r3, [pc, #436]	; (800207c <SystemCoreClockSetup+0x1e0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8001ed2:	4a6a      	ldr	r2, [pc, #424]	; (800207c <SystemCoreClockSetup+0x1e0>)
 8001ed4:	4b69      	ldr	r3, [pc, #420]	; (800207c <SystemCoreClockSetup+0x1e0>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001edc:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8001ede:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8001ee2:	f7ff ff7b 	bl	8001ddc <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8001ee6:	4a66      	ldr	r2, [pc, #408]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001ee8:	4b65      	ldr	r3, [pc, #404]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ef0:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8001ef2:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001ef6:	f7ff ff71 	bl	8001ddc <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8001efa:	4a61      	ldr	r2, [pc, #388]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001efc:	4b60      	ldr	r3, [pc, #384]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f04:	f023 0302 	bic.w	r3, r3, #2
 8001f08:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8001f0a:	4b5e      	ldr	r3, [pc, #376]	; (8002084 <SystemCoreClockSetup+0x1e8>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d029      	beq.n	8001f6a <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8001f16:	4a5b      	ldr	r2, [pc, #364]	; (8002084 <SystemCoreClockSetup+0x1e8>)
 8001f18:	4b5a      	ldr	r3, [pc, #360]	; (8002084 <SystemCoreClockSetup+0x1e8>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001f20:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f24:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8001f26:	f000 f927 	bl	8002178 <OSCHP_GetFrequency>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	4b56      	ldr	r3, [pc, #344]	; (8002088 <SystemCoreClockSetup+0x1ec>)
 8001f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f32:	0d1b      	lsrs	r3, r3, #20
 8001f34:	3b01      	subs	r3, #1
 8001f36:	041b      	lsls	r3, r3, #16
 8001f38:	4952      	ldr	r1, [pc, #328]	; (8002084 <SystemCoreClockSetup+0x1e8>)
 8001f3a:	4a52      	ldr	r2, [pc, #328]	; (8002084 <SystemCoreClockSetup+0x1e8>)
 8001f3c:	6852      	ldr	r2, [r2, #4]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8001f42:	4a4f      	ldr	r2, [pc, #316]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001f44:	4b4e      	ldr	r3, [pc, #312]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8001f4e:	4a4c      	ldr	r2, [pc, #304]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001f50:	4b4b      	ldr	r3, [pc, #300]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001f58:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8001f5a:	bf00      	nop
 8001f5c:	4b48      	ldr	r3, [pc, #288]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001f64:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8001f68:	d1f8      	bne.n	8001f5c <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001f6a:	4a45      	ldr	r2, [pc, #276]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001f6c:	4b44      	ldr	r3, [pc, #272]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8001f76:	4a42      	ldr	r2, [pc, #264]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001f78:	4b41      	ldr	r3, [pc, #260]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f043 0310 	orr.w	r3, r3, #16
 8001f80:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001f82:	4b3f      	ldr	r3, [pc, #252]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001f84:	4a41      	ldr	r2, [pc, #260]	; (800208c <SystemCoreClockSetup+0x1f0>)
 8001f86:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001f88:	4a3d      	ldr	r2, [pc, #244]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f92:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8001f94:	4a3a      	ldr	r2, [pc, #232]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001f96:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f023 0310 	bic.w	r3, r3, #16
 8001f9e:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8001fa0:	4a37      	ldr	r2, [pc, #220]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001fa2:	4b37      	ldr	r3, [pc, #220]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001faa:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001fac:	bf00      	nop
 8001fae:	4b34      	ldr	r3, [pc, #208]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f9      	beq.n	8001fae <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001fba:	4a31      	ldr	r2, [pc, #196]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001fbc:	4b30      	ldr	r3, [pc, #192]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8001fc6:	bf00      	nop
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1f9      	bne.n	8001fc8 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8001fd4:	4a2e      	ldr	r2, [pc, #184]	; (8002090 <SystemCoreClockSetup+0x1f4>)
 8001fd6:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <SystemCoreClockSetup+0x1f4>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fde:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <SystemCoreClockSetup+0x1f4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <SystemCoreClockSetup+0x1f4>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8001fec:	4b28      	ldr	r3, [pc, #160]	; (8002090 <SystemCoreClockSetup+0x1f4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8001ff2:	4b27      	ldr	r3, [pc, #156]	; (8002090 <SystemCoreClockSetup+0x1f4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8001ff8:	4b25      	ldr	r3, [pc, #148]	; (8002090 <SystemCoreClockSetup+0x1f4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8001ffe:	4b24      	ldr	r3, [pc, #144]	; (8002090 <SystemCoreClockSetup+0x1f4>)
 8002000:	2203      	movs	r2, #3
 8002002:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002004:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8002006:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800200e:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8002012:	4a20      	ldr	r2, [pc, #128]	; (8002094 <SystemCoreClockSetup+0x1f8>)
 8002014:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8002016:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800201a:	f7ff fedf 	bl	8001ddc <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800201e:	bf00      	nop
 8002020:	4b17      	ldr	r3, [pc, #92]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f9      	beq.n	8002020 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 800202e:	4a1a      	ldr	r2, [pc, #104]	; (8002098 <SystemCoreClockSetup+0x1fc>)
 8002030:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8002032:	f241 1094 	movw	r0, #4500	; 0x1194
 8002036:	f7ff fed1 	bl	8001ddc <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800203a:	bf00      	nop
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f9      	beq.n	800203c <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002048:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 800204a:	4a14      	ldr	r2, [pc, #80]	; (800209c <SystemCoreClockSetup+0x200>)
 800204c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 800204e:	f241 7070 	movw	r0, #6000	; 0x1770
 8002052:	f7ff fec3 	bl	8001ddc <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002056:	bf00      	nop
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <SystemCoreClockSetup+0x1e4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f9      	beq.n	8002058 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <SystemCoreClockSetup+0x204>)
 8002066:	2205      	movs	r2, #5
 8002068:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <SystemCoreClockSetup+0x1f4>)
 800206c:	2200      	movs	r2, #0
 800206e:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8002070:	f000 f818 	bl	80020a4 <SystemCoreClockUpdate>
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	50004200 	.word	0x50004200
 800207c:	50004400 	.word	0x50004400
 8002080:	50004710 	.word	0x50004710
 8002084:	50004700 	.word	0x50004700
 8002088:	6b5fca6b 	.word	0x6b5fca6b
 800208c:	01134f00 	.word	0x01134f00
 8002090:	50004600 	.word	0x50004600
 8002094:	01074f00 	.word	0x01074f00
 8002098:	01044f00 	.word	0x01044f00
 800209c:	01034f00 	.word	0x01034f00
 80020a0:	50004160 	.word	0x50004160

080020a4 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80020aa:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <SystemCoreClockUpdate+0xc4>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d03e      	beq.n	8002134 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80020b6:	4b2d      	ldr	r3, [pc, #180]	; (800216c <SystemCoreClockUpdate+0xc8>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80020c2:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <SystemCoreClockUpdate+0xcc>)
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	e002      	b.n	80020ce <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80020c8:	f000 f856 	bl	8002178 <OSCHP_GetFrequency>
 80020cc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80020ce:	4b27      	ldr	r3, [pc, #156]	; (800216c <SystemCoreClockUpdate+0xc8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d020      	beq.n	800211c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80020da:	4b24      	ldr	r3, [pc, #144]	; (800216c <SystemCoreClockUpdate+0xc8>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80020e2:	0e1b      	lsrs	r3, r3, #24
 80020e4:	3301      	adds	r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80020e8:	4b20      	ldr	r3, [pc, #128]	; (800216c <SystemCoreClockUpdate+0xc8>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	3301      	adds	r3, #1
 80020f4:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80020f6:	4b1d      	ldr	r3, [pc, #116]	; (800216c <SystemCoreClockUpdate+0xc8>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80020fe:	0c1b      	lsrs	r3, r3, #16
 8002100:	3301      	adds	r3, #1
 8002102:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	fb02 f303 	mul.w	r3, r2, r3
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	e00d      	b.n	8002138 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <SystemCoreClockUpdate+0xc8>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002124:	3301      	adds	r3, #1
 8002126:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	e001      	b.n	8002138 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <SystemCoreClockUpdate+0xcc>)
 8002136:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <SystemCoreClockUpdate+0xc4>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	3301      	adds	r3, #1
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <SystemCoreClockUpdate+0xc4>)
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	3301      	adds	r3, #1
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	fbb2 f3f3 	udiv	r3, r2, r3
 8002158:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800215a:	4a06      	ldr	r2, [pc, #24]	; (8002174 <SystemCoreClockUpdate+0xd0>)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	50004600 	.word	0x50004600
 800216c:	50004710 	.word	0x50004710
 8002170:	016e3600 	.word	0x016e3600
 8002174:	2000ffc0 	.word	0x2000ffc0

08002178 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 800217c:	4b02      	ldr	r3, [pc, #8]	; (8002188 <OSCHP_GetFrequency+0x10>)
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	00b71b00 	.word	0x00b71b00

0800218c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	460b      	mov	r3, r1
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800219a:	7afb      	ldrb	r3, [r7, #11]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	4618      	mov	r0, r3
 80021a2:	7afb      	ldrb	r3, [r7, #11]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3204      	adds	r2, #4
 80021ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021b2:	7afb      	ldrb	r3, [r7, #11]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	21f8      	movs	r1, #248	; 0xf8
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	ea02 0103 	and.w	r1, r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1d02      	adds	r2, r0, #4
 80021ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80021d2:	7afb      	ldrb	r3, [r7, #11]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2103      	movs	r1, #3
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	401a      	ands	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4a38      	ldr	r2, [pc, #224]	; (80022c8 <XMC_GPIO_Init+0x13c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d003      	beq.n	80021f4 <XMC_GPIO_Init+0x68>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4a37      	ldr	r2, [pc, #220]	; (80022cc <XMC_GPIO_Init+0x140>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d10a      	bne.n	800220a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021f8:	7afb      	ldrb	r3, [r7, #11]
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	401a      	ands	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	661a      	str	r2, [r3, #96]	; 0x60
 8002208:	e03c      	b.n	8002284 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	409a      	lsls	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8002216:	7afb      	ldrb	r3, [r7, #11]
 8002218:	08db      	lsrs	r3, r3, #3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	4618      	mov	r0, r3
 800221e:	7afb      	ldrb	r3, [r7, #11]
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3210      	adds	r2, #16
 800222a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800222e:	7afb      	ldrb	r3, [r7, #11]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	2107      	movs	r1, #7
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	ea02 0103 	and.w	r1, r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f100 0210 	add.w	r2, r0, #16
 8002248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800224c:	7afb      	ldrb	r3, [r7, #11]
 800224e:	08db      	lsrs	r3, r3, #3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	4618      	mov	r0, r3
 8002254:	7afb      	ldrb	r3, [r7, #11]
 8002256:	08db      	lsrs	r3, r3, #3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3210      	adds	r2, #16
 8002260:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7a1b      	ldrb	r3, [r3, #8]
 8002268:	4619      	mov	r1, r3
 800226a:	7afb      	ldrb	r3, [r7, #11]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	ea42 0103 	orr.w	r1, r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f100 0210 	add.w	r2, r0, #16
 8002280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8002284:	7afb      	ldrb	r3, [r7, #11]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	b2db      	uxtb	r3, r3
 800228a:	4618      	mov	r0, r3
 800228c:	7afb      	ldrb	r3, [r7, #11]
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3204      	adds	r2, #4
 8002298:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	7afb      	ldrb	r3, [r7, #11]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	ea42 0103 	orr.w	r1, r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1d02      	adds	r2, r0, #4
 80022b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	48028e00 	.word	0x48028e00
 80022cc:	48028f00 	.word	0x48028f00

080022d0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80022e2:	b2db      	uxtb	r3, r3
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8002316:	2310      	movs	r3, #16
 8002318:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fa62 	bl	80027e4 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	79db      	ldrb	r3, [r3, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	79db      	ldrb	r3, [r3, #7]
 800232c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4619      	mov	r1, r3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 faa2 	bl	8002880 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	799b      	ldrb	r3, [r3, #6]
 8002340:	3b01      	subs	r3, #1
 8002342:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	3301      	adds	r3, #1
 800234a:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 800234c:	4313      	orrs	r3, r2
 800234e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	791b      	ldrb	r3, [r3, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	061b      	lsls	r3, r3, #24
 8002362:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	795b      	ldrb	r3, [r3, #5]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d009      	beq.n	8002386 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	795b      	ldrb	r3, [r3, #5]
 800237a:	3b01      	subs	r3, #1
 800237c:	041b      	lsls	r3, r3, #16
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	635a      	str	r2, [r3, #52]	; 0x34
 8002384:	e008      	b.n	8002398 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	791b      	ldrb	r3, [r3, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	041b      	lsls	r3, r3, #16
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800239e:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f04f 32ff 	mov.w	r2, #4294967295
 80023a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	891b      	ldrh	r3, [r3, #8]
 80023ac:	461a      	mov	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop

080023bc <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023ce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d110      	bne.n	80023f8 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80023d6:	bf00      	nop
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff ff79 	bl	80022d0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b80      	cmp	r3, #128	; 0x80
 80023e2:	d0f9      	beq.n	80023d8 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80023e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff81 	bl	80022f0 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 80023ee:	887a      	ldrh	r2, [r7, #2]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 80023f6:	e003      	b.n	8002400 <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 80023f8:	887a      	ldrh	r2, [r7, #2]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002416:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d103      	bne.n	8002426 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	81fb      	strh	r3, [r7, #14]
 8002424:	e003      	b.n	800242e <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800242c:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800242e:	89fb      	ldrh	r3, [r7, #14]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	b2db      	uxtb	r3, r3
 800244a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800244e:	b2db      	uxtb	r3, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop

08002480 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f9aa 	bl	80027e4 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <XMC_I2C_CH_Init+0x4c>)
 8002494:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	889b      	ldrh	r3, [r3, #4]
 800249a:	4619      	mov	r1, r3
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f817 	bl	80024d0 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4619      	mov	r1, r3
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f831 	bl	8002510 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295
 80024bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	073f0303 	.word	0x073f0303

080024d0 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 80024dc:	887b      	ldrh	r3, [r7, #2]
 80024de:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 80024e2:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80024e6:	d109      	bne.n	80024fc <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 80024e8:	887b      	ldrh	r3, [r7, #2]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	887b      	ldrh	r3, [r7, #2]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 80024fa:	e003      	b.n	8002504 <XMC_I2C_CH_SetSlaveAddress+0x34>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 80024fc:	887b      	ldrh	r3, [r7, #2]
 80024fe:	021a      	lsls	r2, r3, #8
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	4a17      	ldr	r2, [pc, #92]	; (8002580 <XMC_I2C_CH_SetBaudrate+0x70>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d810      	bhi.n	8002548 <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 8002532:	220a      	movs	r2, #10
 8002534:	6839      	ldr	r1, [r7, #0]
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f9a2 	bl	8002880 <XMC_USIC_CH_SetBaudrate>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d119      	bne.n	8002576 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	e016      	b.n	8002576 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <XMC_I2C_CH_SetBaudrate+0x74>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d810      	bhi.n	8002572 <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002554:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 800255c:	2219      	movs	r2, #25
 800255e:	6839      	ldr	r1, [r7, #0]
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f98d 	bl	8002880 <XMC_USIC_CH_SetBaudrate>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d104      	bne.n	8002576 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e001      	b.n	8002576 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	000186a0 	.word	0x000186a0
 8002584:	00061a80 	.word	0x00061a80

08002588 <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
 8002594:	4613      	mov	r3, r2
 8002596:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8002598:	887b      	ldrh	r3, [r7, #2]
 800259a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800259e:	b29b      	uxth	r3, r3
 80025a0:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 80025a2:	787b      	ldrb	r3, [r7, #1]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d103      	bne.n	80025b0 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025b6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d110      	bne.n	80025e0 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80025be:	bf00      	nop
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ff3b 	bl	800243c <XMC_USIC_CH_GetTransmitBufferStatus>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b80      	cmp	r3, #128	; 0x80
 80025ca:	d0f9      	beq.n	80025c0 <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80025cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ff43 	bl	800245c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = temp;
  }
}
 80025de:	e003      	b.n	80025e8 <XMC_I2C_CH_MasterStart+0x60>

    channel->TBUF[0] = temp;
  }
  else
  {
    channel->IN[0U] = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80025e8:	bf00      	nop
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	4613      	mov	r3, r2
 80025fe:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002606:	b29b      	uxth	r3, r3
 8002608:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 800260a:	787b      	ldrb	r3, [r7, #1]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d103      	bne.n	8002618 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800261e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d110      	bne.n	8002648 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002626:	bf00      	nop
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff07 	bl	800243c <XMC_USIC_CH_GetTransmitBufferStatus>
 800262e:	4603      	mov	r3, r0
 8002630:	2b80      	cmp	r3, #128	; 0x80
 8002632:	d0f9      	beq.n	8002628 <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff ff0f 	bl	800245c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = tmp;
  }
}
 8002646:	e003      	b.n	8002650 <XMC_I2C_CH_MasterRepeatedStart+0x60>

    channel->TBUF[0] = tmp;
  }
  else
  {
    channel->IN[0U] = tmp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002666:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d111      	bne.n	8002692 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800266e:	bf00      	nop
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff fee3 	bl	800243c <XMC_USIC_CH_GetTransmitBufferStatus>
 8002676:	4603      	mov	r3, r0
 8002678:	2b80      	cmp	r3, #128	; 0x80
 800267a:	d0f9      	beq.n	8002670 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800267c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff feeb 	bl	800245c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800268c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
}
 8002690:	e004      	b.n	800269c <XMC_I2C_CH_MasterStop+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002698:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026b6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d110      	bne.n	80026e0 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80026be:	bf00      	nop
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff febb 	bl	800243c <XMC_USIC_CH_GetTransmitBufferStatus>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b80      	cmp	r3, #128	; 0x80
 80026ca:	d0f9      	beq.n	80026c0 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80026cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff fec3 	bl	800245c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
}
 80026de:	e003      	b.n	80026e8 <XMC_I2C_CH_MasterTransmit+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <XMC_I2C_CH_MasterReceiveNack>:
  }
}

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026fe:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d111      	bne.n	800272a <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002706:	bf00      	nop
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff fe97 	bl	800243c <XMC_USIC_CH_GetTransmitBufferStatus>
 800270e:	4603      	mov	r3, r0
 8002710:	2b80      	cmp	r3, #128	; 0x80
 8002712:	d0f9      	beq.n	8002708 <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff fe9f 	bl	800245c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
}
 8002728:	e004      	b.n	8002734 <XMC_I2C_CH_MasterReceiveNack+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002730:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800274a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d103      	bne.n	800275a <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	73fb      	strb	r3, [r7, #15]
 8002758:	e003      	b.n	8002762 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002760:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8002762:	7bfb      	ldrb	r3, [r7, #15]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	2000ffc0 	.word	0x2000ffc0

08002788 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	0f1b      	lsrs	r3, r3, #28
 8002794:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800279c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 80027ac:	4413      	add	r3, r2
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	601a      	str	r2, [r3, #0]
}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	50004414 	.word	0x50004414

080027c4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80027c8:	f7ff ffd2 	bl	8002770 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80027cc:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80027ce:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80027da:	4618      	mov	r0, r3
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	50004600 	.word	0x50004600

080027e4 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a1b      	ldr	r2, [pc, #108]	; (800285c <XMC_USIC_CH_Enable+0x78>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d003      	beq.n	80027fc <XMC_USIC_CH_Enable+0x18>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a1a      	ldr	r2, [pc, #104]	; (8002860 <XMC_USIC_CH_Enable+0x7c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d103      	bne.n	8002804 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 80027fc:	4819      	ldr	r0, [pc, #100]	; (8002864 <XMC_USIC_CH_Enable+0x80>)
 80027fe:	f000 f91f 	bl	8002a40 <XMC_USIC_Enable>
 8002802:	e016      	b.n	8002832 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a18      	ldr	r2, [pc, #96]	; (8002868 <XMC_USIC_CH_Enable+0x84>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d003      	beq.n	8002814 <XMC_USIC_CH_Enable+0x30>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a17      	ldr	r2, [pc, #92]	; (800286c <XMC_USIC_CH_Enable+0x88>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d103      	bne.n	800281c <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8002814:	4816      	ldr	r0, [pc, #88]	; (8002870 <XMC_USIC_CH_Enable+0x8c>)
 8002816:	f000 f913 	bl	8002a40 <XMC_USIC_Enable>
 800281a:	e00a      	b.n	8002832 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a15      	ldr	r2, [pc, #84]	; (8002874 <XMC_USIC_CH_Enable+0x90>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d003      	beq.n	800282c <XMC_USIC_CH_Enable+0x48>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a14      	ldr	r2, [pc, #80]	; (8002878 <XMC_USIC_CH_Enable+0x94>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d102      	bne.n	8002832 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 800282c:	4813      	ldr	r0, [pc, #76]	; (800287c <XMC_USIC_CH_Enable+0x98>)
 800282e:	f000 f907 	bl	8002a40 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2203      	movs	r2, #3
 8002836:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8002838:	bf00      	nop
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f9      	beq.n	800283a <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f023 020f 	bic.w	r2, r3, #15
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40030000 	.word	0x40030000
 8002860:	40030200 	.word	0x40030200
 8002864:	40030008 	.word	0x40030008
 8002868:	48020000 	.word	0x48020000
 800286c:	48020200 	.word	0x48020200
 8002870:	48020008 	.word	0x48020008
 8002874:	48024000 	.word	0x48024000
 8002878:	48024200 	.word	0x48024200
 800287c:	48024008 	.word	0x48024008

08002880 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08e      	sub	sp, #56	; 0x38
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b63      	cmp	r3, #99	; 0x63
 8002890:	d958      	bls.n	8002944 <XMC_USIC_CH_SetBaudrate+0xc4>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d055      	beq.n	8002944 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8002898:	f7ff ff94 	bl	80027c4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800289c:	4602      	mov	r2, r0
 800289e:	4b2e      	ldr	r3, [pc, #184]	; (8002958 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80028a0:	fba3 2302 	umull	r2, r3, r3, r2
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4a2b      	ldr	r2, [pc, #172]	; (8002958 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 80028b4:	2301      	movs	r3, #1
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80028b8:	2301      	movs	r3, #1
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80028bc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80028c2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
 80028c8:	e022      	b.n	8002910 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ce:	fb02 f203 	mul.w	r2, r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	fbb2 f3f3 	udiv	r3, r2, r3
 80028de:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	0a9b      	lsrs	r3, r3, #10
 80028e4:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ec:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f4:	d209      	bcs.n	800290a <XMC_USIC_CH_SetBaudrate+0x8a>
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d205      	bcs.n	800290a <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	3b01      	subs	r3, #1
 800290e:	633b      	str	r3, [r7, #48]	; 0x30
 8002910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1d9      	bne.n	80028ca <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8002916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002918:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	4b0d      	ldr	r3, [pc, #52]	; (800295c <XMC_USIC_CH_SetBaudrate+0xdc>)
 8002926:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	3a01      	subs	r2, #1
 800292c:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800292e:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	3b01      	subs	r3, #1
 8002934:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002936:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002942:	e002      	b.n	800294a <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 800294a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800294e:	4618      	mov	r0, r3
 8002950:	3738      	adds	r7, #56	; 0x38
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	51eb851f 	.word	0x51eb851f
 800295c:	fc0080ef 	.word	0xfc0080ef

08002960 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002976:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8002988:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	0211      	lsls	r1, r2, #8
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8002992:	79fa      	ldrb	r2, [r7, #7]
 8002994:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8002996:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8002998:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	f8ffc0c0 	.word	0xf8ffc0c0

080029b0 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80029c6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 80029d8:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	0211      	lsls	r1, r2, #8
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 80029e2:	79fa      	ldrb	r2, [r7, #7]
 80029e4:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 80029e6:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	efffc0c0 	.word	0xefffc0c0

08002a04 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002a18:	7afb      	ldrb	r3, [r7, #11]
 8002a1a:	2107      	movs	r1, #7
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8002a24:	7afb      	ldrb	r3, [r7, #11]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <XMC_USIC_Enable+0x40>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d104      	bne.n	8002a5a <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8002a50:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002a54:	f7ff fe98 	bl	8002788 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8002a58:	e00e      	b.n	8002a78 <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <XMC_USIC_Enable+0x44>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d103      	bne.n	8002a6a <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8002a62:	4809      	ldr	r0, [pc, #36]	; (8002a88 <XMC_USIC_Enable+0x48>)
 8002a64:	f7ff fe90 	bl	8002788 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8002a68:	e006      	b.n	8002a78 <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <XMC_USIC_Enable+0x4c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d102      	bne.n	8002a78 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8002a72:	4807      	ldr	r0, [pc, #28]	; (8002a90 <XMC_USIC_Enable+0x50>)
 8002a74:	f7ff fe88 	bl	8002788 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40030008 	.word	0x40030008
 8002a84:	48020008 	.word	0x48020008
 8002a88:	10000080 	.word	0x10000080
 8002a8c:	48024008 	.word	0x48024008
 8002a90:	10000100 	.word	0x10000100
 8002a94:	00000000 	.word	0x00000000

08002a98 <atan>:
 8002a98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a9c:	4bc4      	ldr	r3, [pc, #784]	; (8002db0 <atan+0x318>)
 8002a9e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8002aa2:	429e      	cmp	r6, r3
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	460d      	mov	r5, r1
 8002aa8:	468b      	mov	fp, r1
 8002aaa:	dd0e      	ble.n	8002aca <atan+0x32>
 8002aac:	4bc1      	ldr	r3, [pc, #772]	; (8002db4 <atan+0x31c>)
 8002aae:	429e      	cmp	r6, r3
 8002ab0:	f300 80ac 	bgt.w	8002c0c <atan+0x174>
 8002ab4:	f000 80a7 	beq.w	8002c06 <atan+0x16e>
 8002ab8:	f1bb 0f00 	cmp.w	fp, #0
 8002abc:	f340 80e9 	ble.w	8002c92 <atan+0x1fa>
 8002ac0:	a19f      	add	r1, pc, #636	; (adr r1, 8002d40 <atan+0x2a8>)
 8002ac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ac6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aca:	4bbb      	ldr	r3, [pc, #748]	; (8002db8 <atan+0x320>)
 8002acc:	429e      	cmp	r6, r3
 8002ace:	f300 80b5 	bgt.w	8002c3c <atan+0x1a4>
 8002ad2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8002ad6:	429e      	cmp	r6, r3
 8002ad8:	f340 80a0 	ble.w	8002c1c <atan+0x184>
 8002adc:	f04f 3aff 	mov.w	sl, #4294967295
 8002ae0:	4622      	mov	r2, r4
 8002ae2:	462b      	mov	r3, r5
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	f000 fc52 	bl	8003390 <__aeabi_dmul>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4680      	mov	r8, r0
 8002af2:	4689      	mov	r9, r1
 8002af4:	f000 fc4c 	bl	8003390 <__aeabi_dmul>
 8002af8:	a393      	add	r3, pc, #588	; (adr r3, 8002d48 <atan+0x2b0>)
 8002afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afe:	4606      	mov	r6, r0
 8002b00:	460f      	mov	r7, r1
 8002b02:	f000 fc45 	bl	8003390 <__aeabi_dmul>
 8002b06:	a392      	add	r3, pc, #584	; (adr r3, 8002d50 <atan+0x2b8>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f000 fa8e 	bl	800302c <__adddf3>
 8002b10:	4632      	mov	r2, r6
 8002b12:	463b      	mov	r3, r7
 8002b14:	f000 fc3c 	bl	8003390 <__aeabi_dmul>
 8002b18:	a38f      	add	r3, pc, #572	; (adr r3, 8002d58 <atan+0x2c0>)
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	f000 fa85 	bl	800302c <__adddf3>
 8002b22:	4632      	mov	r2, r6
 8002b24:	463b      	mov	r3, r7
 8002b26:	f000 fc33 	bl	8003390 <__aeabi_dmul>
 8002b2a:	a38d      	add	r3, pc, #564	; (adr r3, 8002d60 <atan+0x2c8>)
 8002b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b30:	f000 fa7c 	bl	800302c <__adddf3>
 8002b34:	4632      	mov	r2, r6
 8002b36:	463b      	mov	r3, r7
 8002b38:	f000 fc2a 	bl	8003390 <__aeabi_dmul>
 8002b3c:	a38a      	add	r3, pc, #552	; (adr r3, 8002d68 <atan+0x2d0>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f000 fa73 	bl	800302c <__adddf3>
 8002b46:	4632      	mov	r2, r6
 8002b48:	463b      	mov	r3, r7
 8002b4a:	f000 fc21 	bl	8003390 <__aeabi_dmul>
 8002b4e:	a388      	add	r3, pc, #544	; (adr r3, 8002d70 <atan+0x2d8>)
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f000 fa6a 	bl	800302c <__adddf3>
 8002b58:	4642      	mov	r2, r8
 8002b5a:	464b      	mov	r3, r9
 8002b5c:	f000 fc18 	bl	8003390 <__aeabi_dmul>
 8002b60:	a385      	add	r3, pc, #532	; (adr r3, 8002d78 <atan+0x2e0>)
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	4680      	mov	r8, r0
 8002b68:	4689      	mov	r9, r1
 8002b6a:	4630      	mov	r0, r6
 8002b6c:	4639      	mov	r1, r7
 8002b6e:	f000 fc0f 	bl	8003390 <__aeabi_dmul>
 8002b72:	a383      	add	r3, pc, #524	; (adr r3, 8002d80 <atan+0x2e8>)
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	f000 fa56 	bl	8003028 <__aeabi_dsub>
 8002b7c:	4632      	mov	r2, r6
 8002b7e:	463b      	mov	r3, r7
 8002b80:	f000 fc06 	bl	8003390 <__aeabi_dmul>
 8002b84:	a380      	add	r3, pc, #512	; (adr r3, 8002d88 <atan+0x2f0>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f000 fa4d 	bl	8003028 <__aeabi_dsub>
 8002b8e:	4632      	mov	r2, r6
 8002b90:	463b      	mov	r3, r7
 8002b92:	f000 fbfd 	bl	8003390 <__aeabi_dmul>
 8002b96:	a37e      	add	r3, pc, #504	; (adr r3, 8002d90 <atan+0x2f8>)
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	f000 fa44 	bl	8003028 <__aeabi_dsub>
 8002ba0:	4632      	mov	r2, r6
 8002ba2:	463b      	mov	r3, r7
 8002ba4:	f000 fbf4 	bl	8003390 <__aeabi_dmul>
 8002ba8:	a37b      	add	r3, pc, #492	; (adr r3, 8002d98 <atan+0x300>)
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	f000 fa3b 	bl	8003028 <__aeabi_dsub>
 8002bb2:	4632      	mov	r2, r6
 8002bb4:	463b      	mov	r3, r7
 8002bb6:	f000 fbeb 	bl	8003390 <__aeabi_dmul>
 8002bba:	f1ba 3fff 	cmp.w	sl, #4294967295
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	d06b      	beq.n	8002c9c <atan+0x204>
 8002bc4:	4640      	mov	r0, r8
 8002bc6:	4649      	mov	r1, r9
 8002bc8:	f000 fa30 	bl	800302c <__adddf3>
 8002bcc:	4622      	mov	r2, r4
 8002bce:	462b      	mov	r3, r5
 8002bd0:	f000 fbde 	bl	8003390 <__aeabi_dmul>
 8002bd4:	4e79      	ldr	r6, [pc, #484]	; (8002dbc <atan+0x324>)
 8002bd6:	4b7a      	ldr	r3, [pc, #488]	; (8002dc0 <atan+0x328>)
 8002bd8:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8002bdc:	4456      	add	r6, sl
 8002bde:	449a      	add	sl, r3
 8002be0:	e9da 2300 	ldrd	r2, r3, [sl]
 8002be4:	f000 fa20 	bl	8003028 <__aeabi_dsub>
 8002be8:	4622      	mov	r2, r4
 8002bea:	462b      	mov	r3, r5
 8002bec:	f000 fa1c 	bl	8003028 <__aeabi_dsub>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	e9d6 0100 	ldrd	r0, r1, [r6]
 8002bf8:	f000 fa16 	bl	8003028 <__aeabi_dsub>
 8002bfc:	f1bb 0f00 	cmp.w	fp, #0
 8002c00:	db43      	blt.n	8002c8a <atan+0x1f2>
 8002c02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c06:	2800      	cmp	r0, #0
 8002c08:	f43f af56 	beq.w	8002ab8 <atan+0x20>
 8002c0c:	4622      	mov	r2, r4
 8002c0e:	462b      	mov	r3, r5
 8002c10:	4620      	mov	r0, r4
 8002c12:	4629      	mov	r1, r5
 8002c14:	f000 fa0a 	bl	800302c <__adddf3>
 8002c18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c1c:	a360      	add	r3, pc, #384	; (adr r3, 8002da0 <atan+0x308>)
 8002c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c22:	f000 fa03 	bl	800302c <__adddf3>
 8002c26:	2200      	movs	r2, #0
 8002c28:	4b66      	ldr	r3, [pc, #408]	; (8002dc4 <atan+0x32c>)
 8002c2a:	f000 fe41 	bl	80038b0 <__aeabi_dcmpgt>
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	f43f af54 	beq.w	8002adc <atan+0x44>
 8002c34:	4620      	mov	r0, r4
 8002c36:	4629      	mov	r1, r5
 8002c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c3c:	f000 f8cc 	bl	8002dd8 <fabs>
 8002c40:	4b61      	ldr	r3, [pc, #388]	; (8002dc8 <atan+0x330>)
 8002c42:	429e      	cmp	r6, r3
 8002c44:	4604      	mov	r4, r0
 8002c46:	460d      	mov	r5, r1
 8002c48:	dc38      	bgt.n	8002cbc <atan+0x224>
 8002c4a:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8002c4e:	429e      	cmp	r6, r3
 8002c50:	dc5d      	bgt.n	8002d0e <atan+0x276>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	f000 f9e9 	bl	800302c <__adddf3>
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	4b59      	ldr	r3, [pc, #356]	; (8002dc4 <atan+0x32c>)
 8002c5e:	f000 f9e3 	bl	8003028 <__aeabi_dsub>
 8002c62:	2200      	movs	r2, #0
 8002c64:	4606      	mov	r6, r0
 8002c66:	460f      	mov	r7, r1
 8002c68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	4629      	mov	r1, r5
 8002c70:	f000 f9dc 	bl	800302c <__adddf3>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4630      	mov	r0, r6
 8002c7a:	4639      	mov	r1, r7
 8002c7c:	f000 fcb2 	bl	80035e4 <__aeabi_ddiv>
 8002c80:	f04f 0a00 	mov.w	sl, #0
 8002c84:	4604      	mov	r4, r0
 8002c86:	460d      	mov	r5, r1
 8002c88:	e72a      	b.n	8002ae0 <atan+0x48>
 8002c8a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002c8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c92:	a145      	add	r1, pc, #276	; (adr r1, 8002da8 <atan+0x310>)
 8002c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c9c:	4640      	mov	r0, r8
 8002c9e:	4649      	mov	r1, r9
 8002ca0:	f000 f9c4 	bl	800302c <__adddf3>
 8002ca4:	4622      	mov	r2, r4
 8002ca6:	462b      	mov	r3, r5
 8002ca8:	f000 fb72 	bl	8003390 <__aeabi_dmul>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	f000 f9b8 	bl	8003028 <__aeabi_dsub>
 8002cb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cbc:	4b43      	ldr	r3, [pc, #268]	; (8002dcc <atan+0x334>)
 8002cbe:	429e      	cmp	r6, r3
 8002cc0:	dc1a      	bgt.n	8002cf8 <atan+0x260>
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4b42      	ldr	r3, [pc, #264]	; (8002dd0 <atan+0x338>)
 8002cc6:	f000 f9af 	bl	8003028 <__aeabi_dsub>
 8002cca:	2200      	movs	r2, #0
 8002ccc:	4606      	mov	r6, r0
 8002cce:	460f      	mov	r7, r1
 8002cd0:	4b3f      	ldr	r3, [pc, #252]	; (8002dd0 <atan+0x338>)
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	f000 fb5b 	bl	8003390 <__aeabi_dmul>
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <atan+0x32c>)
 8002cde:	f000 f9a5 	bl	800302c <__adddf3>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4630      	mov	r0, r6
 8002ce8:	4639      	mov	r1, r7
 8002cea:	f000 fc7b 	bl	80035e4 <__aeabi_ddiv>
 8002cee:	f04f 0a02 	mov.w	sl, #2
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	460d      	mov	r5, r1
 8002cf6:	e6f3      	b.n	8002ae0 <atan+0x48>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	4935      	ldr	r1, [pc, #212]	; (8002dd4 <atan+0x33c>)
 8002d00:	f000 fc70 	bl	80035e4 <__aeabi_ddiv>
 8002d04:	f04f 0a03 	mov.w	sl, #3
 8002d08:	4604      	mov	r4, r0
 8002d0a:	460d      	mov	r5, r1
 8002d0c:	e6e8      	b.n	8002ae0 <atan+0x48>
 8002d0e:	2200      	movs	r2, #0
 8002d10:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <atan+0x32c>)
 8002d12:	f000 f989 	bl	8003028 <__aeabi_dsub>
 8002d16:	2200      	movs	r2, #0
 8002d18:	4606      	mov	r6, r0
 8002d1a:	460f      	mov	r7, r1
 8002d1c:	4b29      	ldr	r3, [pc, #164]	; (8002dc4 <atan+0x32c>)
 8002d1e:	4620      	mov	r0, r4
 8002d20:	4629      	mov	r1, r5
 8002d22:	f000 f983 	bl	800302c <__adddf3>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4630      	mov	r0, r6
 8002d2c:	4639      	mov	r1, r7
 8002d2e:	f000 fc59 	bl	80035e4 <__aeabi_ddiv>
 8002d32:	f04f 0a01 	mov.w	sl, #1
 8002d36:	4604      	mov	r4, r0
 8002d38:	460d      	mov	r5, r1
 8002d3a:	e6d1      	b.n	8002ae0 <atan+0x48>
 8002d3c:	f3af 8000 	nop.w
 8002d40:	54442d18 	.word	0x54442d18
 8002d44:	3ff921fb 	.word	0x3ff921fb
 8002d48:	e322da11 	.word	0xe322da11
 8002d4c:	3f90ad3a 	.word	0x3f90ad3a
 8002d50:	24760deb 	.word	0x24760deb
 8002d54:	3fa97b4b 	.word	0x3fa97b4b
 8002d58:	a0d03d51 	.word	0xa0d03d51
 8002d5c:	3fb10d66 	.word	0x3fb10d66
 8002d60:	c54c206e 	.word	0xc54c206e
 8002d64:	3fb745cd 	.word	0x3fb745cd
 8002d68:	920083ff 	.word	0x920083ff
 8002d6c:	3fc24924 	.word	0x3fc24924
 8002d70:	5555550d 	.word	0x5555550d
 8002d74:	3fd55555 	.word	0x3fd55555
 8002d78:	2c6a6c2f 	.word	0x2c6a6c2f
 8002d7c:	bfa2b444 	.word	0xbfa2b444
 8002d80:	52defd9a 	.word	0x52defd9a
 8002d84:	3fadde2d 	.word	0x3fadde2d
 8002d88:	af749a6d 	.word	0xaf749a6d
 8002d8c:	3fb3b0f2 	.word	0x3fb3b0f2
 8002d90:	fe231671 	.word	0xfe231671
 8002d94:	3fbc71c6 	.word	0x3fbc71c6
 8002d98:	9998ebc4 	.word	0x9998ebc4
 8002d9c:	3fc99999 	.word	0x3fc99999
 8002da0:	8800759c 	.word	0x8800759c
 8002da4:	7e37e43c 	.word	0x7e37e43c
 8002da8:	54442d18 	.word	0x54442d18
 8002dac:	bff921fb 	.word	0xbff921fb
 8002db0:	440fffff 	.word	0x440fffff
 8002db4:	7ff00000 	.word	0x7ff00000
 8002db8:	3fdbffff 	.word	0x3fdbffff
 8002dbc:	0800a308 	.word	0x0800a308
 8002dc0:	0800a2e8 	.word	0x0800a2e8
 8002dc4:	3ff00000 	.word	0x3ff00000
 8002dc8:	3ff2ffff 	.word	0x3ff2ffff
 8002dcc:	40037fff 	.word	0x40037fff
 8002dd0:	3ff80000 	.word	0x3ff80000
 8002dd4:	bff00000 	.word	0xbff00000

08002dd8 <fabs>:
 8002dd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop

08002de0 <sqrt>:
 8002de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de4:	b08b      	sub	sp, #44	; 0x2c
 8002de6:	4604      	mov	r4, r0
 8002de8:	460d      	mov	r5, r1
 8002dea:	f000 f855 	bl	8002e98 <__ieee754_sqrt>
 8002dee:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <sqrt+0xb0>)
 8002df0:	f993 a000 	ldrsb.w	sl, [r3]
 8002df4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8002df8:	4606      	mov	r6, r0
 8002dfa:	460f      	mov	r7, r1
 8002dfc:	d012      	beq.n	8002e24 <sqrt+0x44>
 8002dfe:	4622      	mov	r2, r4
 8002e00:	462b      	mov	r3, r5
 8002e02:	4620      	mov	r0, r4
 8002e04:	4629      	mov	r1, r5
 8002e06:	f000 fd5d 	bl	80038c4 <__aeabi_dcmpun>
 8002e0a:	4683      	mov	fp, r0
 8002e0c:	b950      	cbnz	r0, 8002e24 <sqrt+0x44>
 8002e0e:	f04f 0800 	mov.w	r8, #0
 8002e12:	f04f 0900 	mov.w	r9, #0
 8002e16:	4620      	mov	r0, r4
 8002e18:	4629      	mov	r1, r5
 8002e1a:	4642      	mov	r2, r8
 8002e1c:	464b      	mov	r3, r9
 8002e1e:	f000 fd29 	bl	8003874 <__aeabi_dcmplt>
 8002e22:	b920      	cbnz	r0, 8002e2e <sqrt+0x4e>
 8002e24:	4630      	mov	r0, r6
 8002e26:	4639      	mov	r1, r7
 8002e28:	b00b      	add	sp, #44	; 0x2c
 8002e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <sqrt+0xb4>)
 8002e30:	f8cd b020 	str.w	fp, [sp, #32]
 8002e34:	2201      	movs	r2, #1
 8002e36:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002e3a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002e3e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002e42:	f1ba 0f00 	cmp.w	sl, #0
 8002e46:	d015      	beq.n	8002e74 <sqrt+0x94>
 8002e48:	4642      	mov	r2, r8
 8002e4a:	464b      	mov	r3, r9
 8002e4c:	4640      	mov	r0, r8
 8002e4e:	4649      	mov	r1, r9
 8002e50:	f000 fbc8 	bl	80035e4 <__aeabi_ddiv>
 8002e54:	f1ba 0f02 	cmp.w	sl, #2
 8002e58:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002e5c:	d10c      	bne.n	8002e78 <sqrt+0x98>
 8002e5e:	f000 fd67 	bl	8003930 <__errno>
 8002e62:	2321      	movs	r3, #33	; 0x21
 8002e64:	6003      	str	r3, [r0, #0]
 8002e66:	9b08      	ldr	r3, [sp, #32]
 8002e68:	b963      	cbnz	r3, 8002e84 <sqrt+0xa4>
 8002e6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e6e:	b00b      	add	sp, #44	; 0x2c
 8002e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e74:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002e78:	4668      	mov	r0, sp
 8002e7a:	f000 f8cf 	bl	800301c <matherr>
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	d1f1      	bne.n	8002e66 <sqrt+0x86>
 8002e82:	e7ec      	b.n	8002e5e <sqrt+0x7e>
 8002e84:	f000 fd54 	bl	8003930 <__errno>
 8002e88:	9b08      	ldr	r3, [sp, #32]
 8002e8a:	6003      	str	r3, [r0, #0]
 8002e8c:	e7ed      	b.n	8002e6a <sqrt+0x8a>
 8002e8e:	bf00      	nop
 8002e90:	2000003c 	.word	0x2000003c
 8002e94:	0800a328 	.word	0x0800a328

08002e98 <__ieee754_sqrt>:
 8002e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e9c:	4e5e      	ldr	r6, [pc, #376]	; (8003018 <__ieee754_sqrt+0x180>)
 8002e9e:	46b6      	mov	lr, r6
 8002ea0:	400e      	ands	r6, r1
 8002ea2:	4576      	cmp	r6, lr
 8002ea4:	4604      	mov	r4, r0
 8002ea6:	460d      	mov	r5, r1
 8002ea8:	f000 8094 	beq.w	8002fd4 <__ieee754_sqrt+0x13c>
 8002eac:	2900      	cmp	r1, #0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	dd72      	ble.n	8002f9a <__ieee754_sqrt+0x102>
 8002eb4:	150f      	asrs	r7, r1, #20
 8002eb6:	d07d      	beq.n	8002fb4 <__ieee754_sqrt+0x11c>
 8002eb8:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 8002ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ec0:	07f8      	lsls	r0, r7, #31
 8002ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ec6:	d463      	bmi.n	8002f90 <__ieee754_sqrt+0xf8>
 8002ec8:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 8002ecc:	2600      	movs	r6, #0
 8002ece:	440b      	add	r3, r1
 8002ed0:	107f      	asrs	r7, r7, #1
 8002ed2:	0052      	lsls	r2, r2, #1
 8002ed4:	46b6      	mov	lr, r6
 8002ed6:	2016      	movs	r0, #22
 8002ed8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002edc:	eb0e 0401 	add.w	r4, lr, r1
 8002ee0:	429c      	cmp	r4, r3
 8002ee2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 8002ee6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8002eea:	dc03      	bgt.n	8002ef4 <__ieee754_sqrt+0x5c>
 8002eec:	1b1b      	subs	r3, r3, r4
 8002eee:	eb04 0e01 	add.w	lr, r4, r1
 8002ef2:	440e      	add	r6, r1
 8002ef4:	3801      	subs	r0, #1
 8002ef6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002efa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002efe:	d1ed      	bne.n	8002edc <__ieee754_sqrt+0x44>
 8002f00:	4684      	mov	ip, r0
 8002f02:	2420      	movs	r4, #32
 8002f04:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f08:	e009      	b.n	8002f1e <__ieee754_sqrt+0x86>
 8002f0a:	d020      	beq.n	8002f4e <__ieee754_sqrt+0xb6>
 8002f0c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 8002f10:	3c01      	subs	r4, #1
 8002f12:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002f16:	442b      	add	r3, r5
 8002f18:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8002f1c:	d020      	beq.n	8002f60 <__ieee754_sqrt+0xc8>
 8002f1e:	459e      	cmp	lr, r3
 8002f20:	eb01 050c 	add.w	r5, r1, ip
 8002f24:	daf1      	bge.n	8002f0a <__ieee754_sqrt+0x72>
 8002f26:	2d00      	cmp	r5, #0
 8002f28:	eb05 0c01 	add.w	ip, r5, r1
 8002f2c:	db09      	blt.n	8002f42 <__ieee754_sqrt+0xaa>
 8002f2e:	46f0      	mov	r8, lr
 8002f30:	4295      	cmp	r5, r2
 8002f32:	ebce 0303 	rsb	r3, lr, r3
 8002f36:	d900      	bls.n	8002f3a <__ieee754_sqrt+0xa2>
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	1b52      	subs	r2, r2, r5
 8002f3c:	4408      	add	r0, r1
 8002f3e:	46c6      	mov	lr, r8
 8002f40:	e7e4      	b.n	8002f0c <__ieee754_sqrt+0x74>
 8002f42:	f1bc 0f00 	cmp.w	ip, #0
 8002f46:	dbf2      	blt.n	8002f2e <__ieee754_sqrt+0x96>
 8002f48:	f10e 0801 	add.w	r8, lr, #1
 8002f4c:	e7f0      	b.n	8002f30 <__ieee754_sqrt+0x98>
 8002f4e:	4295      	cmp	r5, r2
 8002f50:	d81c      	bhi.n	8002f8c <__ieee754_sqrt+0xf4>
 8002f52:	2d00      	cmp	r5, #0
 8002f54:	eb05 0c01 	add.w	ip, r5, r1
 8002f58:	db48      	blt.n	8002fec <__ieee754_sqrt+0x154>
 8002f5a:	4698      	mov	r8, r3
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e7ec      	b.n	8002f3a <__ieee754_sqrt+0xa2>
 8002f60:	4313      	orrs	r3, r2
 8002f62:	d004      	beq.n	8002f6e <__ieee754_sqrt+0xd6>
 8002f64:	1c41      	adds	r1, r0, #1
 8002f66:	d045      	beq.n	8002ff4 <__ieee754_sqrt+0x15c>
 8002f68:	f000 0401 	and.w	r4, r0, #1
 8002f6c:	4420      	add	r0, r4
 8002f6e:	0844      	lsrs	r4, r0, #1
 8002f70:	1073      	asrs	r3, r6, #1
 8002f72:	07f2      	lsls	r2, r6, #31
 8002f74:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002f78:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002f7c:	bf48      	it	mi
 8002f7e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8002f82:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8002f86:	4620      	mov	r0, r4
 8002f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f8c:	4673      	mov	r3, lr
 8002f8e:	e7bd      	b.n	8002f0c <__ieee754_sqrt+0x74>
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8002f96:	0052      	lsls	r2, r2, #1
 8002f98:	e796      	b.n	8002ec8 <__ieee754_sqrt+0x30>
 8002f9a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8002f9e:	4306      	orrs	r6, r0
 8002fa0:	d022      	beq.n	8002fe8 <__ieee754_sqrt+0x150>
 8002fa2:	bb71      	cbnz	r1, 8003002 <__ieee754_sqrt+0x16a>
 8002fa4:	460f      	mov	r7, r1
 8002fa6:	0ad3      	lsrs	r3, r2, #11
 8002fa8:	3f15      	subs	r7, #21
 8002faa:	0552      	lsls	r2, r2, #21
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0fa      	beq.n	8002fa6 <__ieee754_sqrt+0x10e>
 8002fb0:	02dd      	lsls	r5, r3, #11
 8002fb2:	d421      	bmi.n	8002ff8 <__ieee754_sqrt+0x160>
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	e000      	b.n	8002fba <__ieee754_sqrt+0x122>
 8002fb8:	4601      	mov	r1, r0
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	02dc      	lsls	r4, r3, #11
 8002fbe:	f101 0001 	add.w	r0, r1, #1
 8002fc2:	d5f9      	bpl.n	8002fb8 <__ieee754_sqrt+0x120>
 8002fc4:	f1c0 0420 	rsb	r4, r0, #32
 8002fc8:	fa22 f404 	lsr.w	r4, r2, r4
 8002fcc:	4323      	orrs	r3, r4
 8002fce:	1a7f      	subs	r7, r7, r1
 8002fd0:	4082      	lsls	r2, r0
 8002fd2:	e771      	b.n	8002eb8 <__ieee754_sqrt+0x20>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	f000 f9da 	bl	8003390 <__aeabi_dmul>
 8002fdc:	4622      	mov	r2, r4
 8002fde:	462b      	mov	r3, r5
 8002fe0:	f000 f824 	bl	800302c <__adddf3>
 8002fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fec:	f1bc 0f00 	cmp.w	ip, #0
 8002ff0:	daaa      	bge.n	8002f48 <__ieee754_sqrt+0xb0>
 8002ff2:	e7b2      	b.n	8002f5a <__ieee754_sqrt+0xc2>
 8002ff4:	3601      	adds	r6, #1
 8002ff6:	e7bb      	b.n	8002f70 <__ieee754_sqrt+0xd8>
 8002ff8:	2420      	movs	r4, #32
 8002ffa:	f04f 31ff 	mov.w	r1, #4294967295
 8002ffe:	2000      	movs	r0, #0
 8003000:	e7e2      	b.n	8002fc8 <__ieee754_sqrt+0x130>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	f000 f80f 	bl	8003028 <__aeabi_dsub>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	f000 fae9 	bl	80035e4 <__aeabi_ddiv>
 8003012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003016:	bf00      	nop
 8003018:	7ff00000 	.word	0x7ff00000

0800301c <matherr>:
 800301c:	2000      	movs	r0, #0
 800301e:	4770      	bx	lr

08003020 <__aeabi_drsub>:
 8003020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003024:	e002      	b.n	800302c <__adddf3>
 8003026:	bf00      	nop

08003028 <__aeabi_dsub>:
 8003028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800302c <__adddf3>:
 800302c:	b530      	push	{r4, r5, lr}
 800302e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003032:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003036:	ea94 0f05 	teq	r4, r5
 800303a:	bf08      	it	eq
 800303c:	ea90 0f02 	teqeq	r0, r2
 8003040:	bf1f      	itttt	ne
 8003042:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003046:	ea55 0c02 	orrsne.w	ip, r5, r2
 800304a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800304e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003052:	f000 80e2 	beq.w	800321a <__adddf3+0x1ee>
 8003056:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800305a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800305e:	bfb8      	it	lt
 8003060:	426d      	neglt	r5, r5
 8003062:	dd0c      	ble.n	800307e <__adddf3+0x52>
 8003064:	442c      	add	r4, r5
 8003066:	ea80 0202 	eor.w	r2, r0, r2
 800306a:	ea81 0303 	eor.w	r3, r1, r3
 800306e:	ea82 0000 	eor.w	r0, r2, r0
 8003072:	ea83 0101 	eor.w	r1, r3, r1
 8003076:	ea80 0202 	eor.w	r2, r0, r2
 800307a:	ea81 0303 	eor.w	r3, r1, r3
 800307e:	2d36      	cmp	r5, #54	; 0x36
 8003080:	bf88      	it	hi
 8003082:	bd30      	pophi	{r4, r5, pc}
 8003084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003088:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800308c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003094:	d002      	beq.n	800309c <__adddf3+0x70>
 8003096:	4240      	negs	r0, r0
 8003098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800309c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80030a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80030a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80030a8:	d002      	beq.n	80030b0 <__adddf3+0x84>
 80030aa:	4252      	negs	r2, r2
 80030ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80030b0:	ea94 0f05 	teq	r4, r5
 80030b4:	f000 80a7 	beq.w	8003206 <__adddf3+0x1da>
 80030b8:	f1a4 0401 	sub.w	r4, r4, #1
 80030bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80030c0:	db0d      	blt.n	80030de <__adddf3+0xb2>
 80030c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80030c6:	fa22 f205 	lsr.w	r2, r2, r5
 80030ca:	1880      	adds	r0, r0, r2
 80030cc:	f141 0100 	adc.w	r1, r1, #0
 80030d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80030d4:	1880      	adds	r0, r0, r2
 80030d6:	fa43 f305 	asr.w	r3, r3, r5
 80030da:	4159      	adcs	r1, r3
 80030dc:	e00e      	b.n	80030fc <__adddf3+0xd0>
 80030de:	f1a5 0520 	sub.w	r5, r5, #32
 80030e2:	f10e 0e20 	add.w	lr, lr, #32
 80030e6:	2a01      	cmp	r2, #1
 80030e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80030ec:	bf28      	it	cs
 80030ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80030f2:	fa43 f305 	asr.w	r3, r3, r5
 80030f6:	18c0      	adds	r0, r0, r3
 80030f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80030fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003100:	d507      	bpl.n	8003112 <__adddf3+0xe6>
 8003102:	f04f 0e00 	mov.w	lr, #0
 8003106:	f1dc 0c00 	rsbs	ip, ip, #0
 800310a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800310e:	eb6e 0101 	sbc.w	r1, lr, r1
 8003112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003116:	d31b      	bcc.n	8003150 <__adddf3+0x124>
 8003118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800311c:	d30c      	bcc.n	8003138 <__adddf3+0x10c>
 800311e:	0849      	lsrs	r1, r1, #1
 8003120:	ea5f 0030 	movs.w	r0, r0, rrx
 8003124:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003128:	f104 0401 	add.w	r4, r4, #1
 800312c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003134:	f080 809a 	bcs.w	800326c <__adddf3+0x240>
 8003138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800313c:	bf08      	it	eq
 800313e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003142:	f150 0000 	adcs.w	r0, r0, #0
 8003146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800314a:	ea41 0105 	orr.w	r1, r1, r5
 800314e:	bd30      	pop	{r4, r5, pc}
 8003150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003154:	4140      	adcs	r0, r0
 8003156:	eb41 0101 	adc.w	r1, r1, r1
 800315a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800315e:	f1a4 0401 	sub.w	r4, r4, #1
 8003162:	d1e9      	bne.n	8003138 <__adddf3+0x10c>
 8003164:	f091 0f00 	teq	r1, #0
 8003168:	bf04      	itt	eq
 800316a:	4601      	moveq	r1, r0
 800316c:	2000      	moveq	r0, #0
 800316e:	fab1 f381 	clz	r3, r1
 8003172:	bf08      	it	eq
 8003174:	3320      	addeq	r3, #32
 8003176:	f1a3 030b 	sub.w	r3, r3, #11
 800317a:	f1b3 0220 	subs.w	r2, r3, #32
 800317e:	da0c      	bge.n	800319a <__adddf3+0x16e>
 8003180:	320c      	adds	r2, #12
 8003182:	dd08      	ble.n	8003196 <__adddf3+0x16a>
 8003184:	f102 0c14 	add.w	ip, r2, #20
 8003188:	f1c2 020c 	rsb	r2, r2, #12
 800318c:	fa01 f00c 	lsl.w	r0, r1, ip
 8003190:	fa21 f102 	lsr.w	r1, r1, r2
 8003194:	e00c      	b.n	80031b0 <__adddf3+0x184>
 8003196:	f102 0214 	add.w	r2, r2, #20
 800319a:	bfd8      	it	le
 800319c:	f1c2 0c20 	rsble	ip, r2, #32
 80031a0:	fa01 f102 	lsl.w	r1, r1, r2
 80031a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80031a8:	bfdc      	itt	le
 80031aa:	ea41 010c 	orrle.w	r1, r1, ip
 80031ae:	4090      	lslle	r0, r2
 80031b0:	1ae4      	subs	r4, r4, r3
 80031b2:	bfa2      	ittt	ge
 80031b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80031b8:	4329      	orrge	r1, r5
 80031ba:	bd30      	popge	{r4, r5, pc}
 80031bc:	ea6f 0404 	mvn.w	r4, r4
 80031c0:	3c1f      	subs	r4, #31
 80031c2:	da1c      	bge.n	80031fe <__adddf3+0x1d2>
 80031c4:	340c      	adds	r4, #12
 80031c6:	dc0e      	bgt.n	80031e6 <__adddf3+0x1ba>
 80031c8:	f104 0414 	add.w	r4, r4, #20
 80031cc:	f1c4 0220 	rsb	r2, r4, #32
 80031d0:	fa20 f004 	lsr.w	r0, r0, r4
 80031d4:	fa01 f302 	lsl.w	r3, r1, r2
 80031d8:	ea40 0003 	orr.w	r0, r0, r3
 80031dc:	fa21 f304 	lsr.w	r3, r1, r4
 80031e0:	ea45 0103 	orr.w	r1, r5, r3
 80031e4:	bd30      	pop	{r4, r5, pc}
 80031e6:	f1c4 040c 	rsb	r4, r4, #12
 80031ea:	f1c4 0220 	rsb	r2, r4, #32
 80031ee:	fa20 f002 	lsr.w	r0, r0, r2
 80031f2:	fa01 f304 	lsl.w	r3, r1, r4
 80031f6:	ea40 0003 	orr.w	r0, r0, r3
 80031fa:	4629      	mov	r1, r5
 80031fc:	bd30      	pop	{r4, r5, pc}
 80031fe:	fa21 f004 	lsr.w	r0, r1, r4
 8003202:	4629      	mov	r1, r5
 8003204:	bd30      	pop	{r4, r5, pc}
 8003206:	f094 0f00 	teq	r4, #0
 800320a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800320e:	bf06      	itte	eq
 8003210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003214:	3401      	addeq	r4, #1
 8003216:	3d01      	subne	r5, #1
 8003218:	e74e      	b.n	80030b8 <__adddf3+0x8c>
 800321a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800321e:	bf18      	it	ne
 8003220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003224:	d029      	beq.n	800327a <__adddf3+0x24e>
 8003226:	ea94 0f05 	teq	r4, r5
 800322a:	bf08      	it	eq
 800322c:	ea90 0f02 	teqeq	r0, r2
 8003230:	d005      	beq.n	800323e <__adddf3+0x212>
 8003232:	ea54 0c00 	orrs.w	ip, r4, r0
 8003236:	bf04      	itt	eq
 8003238:	4619      	moveq	r1, r3
 800323a:	4610      	moveq	r0, r2
 800323c:	bd30      	pop	{r4, r5, pc}
 800323e:	ea91 0f03 	teq	r1, r3
 8003242:	bf1e      	ittt	ne
 8003244:	2100      	movne	r1, #0
 8003246:	2000      	movne	r0, #0
 8003248:	bd30      	popne	{r4, r5, pc}
 800324a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800324e:	d105      	bne.n	800325c <__adddf3+0x230>
 8003250:	0040      	lsls	r0, r0, #1
 8003252:	4149      	adcs	r1, r1
 8003254:	bf28      	it	cs
 8003256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800325a:	bd30      	pop	{r4, r5, pc}
 800325c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003260:	bf3c      	itt	cc
 8003262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003266:	bd30      	popcc	{r4, r5, pc}
 8003268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800326c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003274:	f04f 0000 	mov.w	r0, #0
 8003278:	bd30      	pop	{r4, r5, pc}
 800327a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800327e:	bf1a      	itte	ne
 8003280:	4619      	movne	r1, r3
 8003282:	4610      	movne	r0, r2
 8003284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003288:	bf1c      	itt	ne
 800328a:	460b      	movne	r3, r1
 800328c:	4602      	movne	r2, r0
 800328e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003292:	bf06      	itte	eq
 8003294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003298:	ea91 0f03 	teqeq	r1, r3
 800329c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80032a0:	bd30      	pop	{r4, r5, pc}
 80032a2:	bf00      	nop

080032a4 <__aeabi_ui2d>:
 80032a4:	f090 0f00 	teq	r0, #0
 80032a8:	bf04      	itt	eq
 80032aa:	2100      	moveq	r1, #0
 80032ac:	4770      	bxeq	lr
 80032ae:	b530      	push	{r4, r5, lr}
 80032b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80032b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80032b8:	f04f 0500 	mov.w	r5, #0
 80032bc:	f04f 0100 	mov.w	r1, #0
 80032c0:	e750      	b.n	8003164 <__adddf3+0x138>
 80032c2:	bf00      	nop

080032c4 <__aeabi_i2d>:
 80032c4:	f090 0f00 	teq	r0, #0
 80032c8:	bf04      	itt	eq
 80032ca:	2100      	moveq	r1, #0
 80032cc:	4770      	bxeq	lr
 80032ce:	b530      	push	{r4, r5, lr}
 80032d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80032d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80032d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80032dc:	bf48      	it	mi
 80032de:	4240      	negmi	r0, r0
 80032e0:	f04f 0100 	mov.w	r1, #0
 80032e4:	e73e      	b.n	8003164 <__adddf3+0x138>
 80032e6:	bf00      	nop

080032e8 <__aeabi_f2d>:
 80032e8:	0042      	lsls	r2, r0, #1
 80032ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80032ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80032f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80032f6:	bf1f      	itttt	ne
 80032f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80032fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003304:	4770      	bxne	lr
 8003306:	f092 0f00 	teq	r2, #0
 800330a:	bf14      	ite	ne
 800330c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003310:	4770      	bxeq	lr
 8003312:	b530      	push	{r4, r5, lr}
 8003314:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003318:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800331c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003320:	e720      	b.n	8003164 <__adddf3+0x138>
 8003322:	bf00      	nop

08003324 <__aeabi_ul2d>:
 8003324:	ea50 0201 	orrs.w	r2, r0, r1
 8003328:	bf08      	it	eq
 800332a:	4770      	bxeq	lr
 800332c:	b530      	push	{r4, r5, lr}
 800332e:	f04f 0500 	mov.w	r5, #0
 8003332:	e00a      	b.n	800334a <__aeabi_l2d+0x16>

08003334 <__aeabi_l2d>:
 8003334:	ea50 0201 	orrs.w	r2, r0, r1
 8003338:	bf08      	it	eq
 800333a:	4770      	bxeq	lr
 800333c:	b530      	push	{r4, r5, lr}
 800333e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003342:	d502      	bpl.n	800334a <__aeabi_l2d+0x16>
 8003344:	4240      	negs	r0, r0
 8003346:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800334a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800334e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003352:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003356:	f43f aedc 	beq.w	8003112 <__adddf3+0xe6>
 800335a:	f04f 0203 	mov.w	r2, #3
 800335e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003362:	bf18      	it	ne
 8003364:	3203      	addne	r2, #3
 8003366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800336a:	bf18      	it	ne
 800336c:	3203      	addne	r2, #3
 800336e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003372:	f1c2 0320 	rsb	r3, r2, #32
 8003376:	fa00 fc03 	lsl.w	ip, r0, r3
 800337a:	fa20 f002 	lsr.w	r0, r0, r2
 800337e:	fa01 fe03 	lsl.w	lr, r1, r3
 8003382:	ea40 000e 	orr.w	r0, r0, lr
 8003386:	fa21 f102 	lsr.w	r1, r1, r2
 800338a:	4414      	add	r4, r2
 800338c:	e6c1      	b.n	8003112 <__adddf3+0xe6>
 800338e:	bf00      	nop

08003390 <__aeabi_dmul>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003396:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800339a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800339e:	bf1d      	ittte	ne
 80033a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80033a4:	ea94 0f0c 	teqne	r4, ip
 80033a8:	ea95 0f0c 	teqne	r5, ip
 80033ac:	f000 f8de 	bleq	800356c <__aeabi_dmul+0x1dc>
 80033b0:	442c      	add	r4, r5
 80033b2:	ea81 0603 	eor.w	r6, r1, r3
 80033b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80033ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80033be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80033c2:	bf18      	it	ne
 80033c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80033c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80033cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d0:	d038      	beq.n	8003444 <__aeabi_dmul+0xb4>
 80033d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80033d6:	f04f 0500 	mov.w	r5, #0
 80033da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80033de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80033e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80033e6:	f04f 0600 	mov.w	r6, #0
 80033ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80033ee:	f09c 0f00 	teq	ip, #0
 80033f2:	bf18      	it	ne
 80033f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80033f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80033fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003400:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003404:	d204      	bcs.n	8003410 <__aeabi_dmul+0x80>
 8003406:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800340a:	416d      	adcs	r5, r5
 800340c:	eb46 0606 	adc.w	r6, r6, r6
 8003410:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003414:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003418:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800341c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003420:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003424:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003428:	bf88      	it	hi
 800342a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800342e:	d81e      	bhi.n	800346e <__aeabi_dmul+0xde>
 8003430:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003434:	bf08      	it	eq
 8003436:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800343a:	f150 0000 	adcs.w	r0, r0, #0
 800343e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003442:	bd70      	pop	{r4, r5, r6, pc}
 8003444:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003448:	ea46 0101 	orr.w	r1, r6, r1
 800344c:	ea40 0002 	orr.w	r0, r0, r2
 8003450:	ea81 0103 	eor.w	r1, r1, r3
 8003454:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003458:	bfc2      	ittt	gt
 800345a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800345e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003462:	bd70      	popgt	{r4, r5, r6, pc}
 8003464:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003468:	f04f 0e00 	mov.w	lr, #0
 800346c:	3c01      	subs	r4, #1
 800346e:	f300 80ab 	bgt.w	80035c8 <__aeabi_dmul+0x238>
 8003472:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003476:	bfde      	ittt	le
 8003478:	2000      	movle	r0, #0
 800347a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800347e:	bd70      	pople	{r4, r5, r6, pc}
 8003480:	f1c4 0400 	rsb	r4, r4, #0
 8003484:	3c20      	subs	r4, #32
 8003486:	da35      	bge.n	80034f4 <__aeabi_dmul+0x164>
 8003488:	340c      	adds	r4, #12
 800348a:	dc1b      	bgt.n	80034c4 <__aeabi_dmul+0x134>
 800348c:	f104 0414 	add.w	r4, r4, #20
 8003490:	f1c4 0520 	rsb	r5, r4, #32
 8003494:	fa00 f305 	lsl.w	r3, r0, r5
 8003498:	fa20 f004 	lsr.w	r0, r0, r4
 800349c:	fa01 f205 	lsl.w	r2, r1, r5
 80034a0:	ea40 0002 	orr.w	r0, r0, r2
 80034a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80034a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80034ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80034b0:	fa21 f604 	lsr.w	r6, r1, r4
 80034b4:	eb42 0106 	adc.w	r1, r2, r6
 80034b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80034bc:	bf08      	it	eq
 80034be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
 80034c4:	f1c4 040c 	rsb	r4, r4, #12
 80034c8:	f1c4 0520 	rsb	r5, r4, #32
 80034cc:	fa00 f304 	lsl.w	r3, r0, r4
 80034d0:	fa20 f005 	lsr.w	r0, r0, r5
 80034d4:	fa01 f204 	lsl.w	r2, r1, r4
 80034d8:	ea40 0002 	orr.w	r0, r0, r2
 80034dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80034e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80034e4:	f141 0100 	adc.w	r1, r1, #0
 80034e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80034ec:	bf08      	it	eq
 80034ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80034f2:	bd70      	pop	{r4, r5, r6, pc}
 80034f4:	f1c4 0520 	rsb	r5, r4, #32
 80034f8:	fa00 f205 	lsl.w	r2, r0, r5
 80034fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8003500:	fa20 f304 	lsr.w	r3, r0, r4
 8003504:	fa01 f205 	lsl.w	r2, r1, r5
 8003508:	ea43 0302 	orr.w	r3, r3, r2
 800350c:	fa21 f004 	lsr.w	r0, r1, r4
 8003510:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003514:	fa21 f204 	lsr.w	r2, r1, r4
 8003518:	ea20 0002 	bic.w	r0, r0, r2
 800351c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003520:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003524:	bf08      	it	eq
 8003526:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	f094 0f00 	teq	r4, #0
 8003530:	d10f      	bne.n	8003552 <__aeabi_dmul+0x1c2>
 8003532:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003536:	0040      	lsls	r0, r0, #1
 8003538:	eb41 0101 	adc.w	r1, r1, r1
 800353c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003540:	bf08      	it	eq
 8003542:	3c01      	subeq	r4, #1
 8003544:	d0f7      	beq.n	8003536 <__aeabi_dmul+0x1a6>
 8003546:	ea41 0106 	orr.w	r1, r1, r6
 800354a:	f095 0f00 	teq	r5, #0
 800354e:	bf18      	it	ne
 8003550:	4770      	bxne	lr
 8003552:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003556:	0052      	lsls	r2, r2, #1
 8003558:	eb43 0303 	adc.w	r3, r3, r3
 800355c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003560:	bf08      	it	eq
 8003562:	3d01      	subeq	r5, #1
 8003564:	d0f7      	beq.n	8003556 <__aeabi_dmul+0x1c6>
 8003566:	ea43 0306 	orr.w	r3, r3, r6
 800356a:	4770      	bx	lr
 800356c:	ea94 0f0c 	teq	r4, ip
 8003570:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003574:	bf18      	it	ne
 8003576:	ea95 0f0c 	teqne	r5, ip
 800357a:	d00c      	beq.n	8003596 <__aeabi_dmul+0x206>
 800357c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003580:	bf18      	it	ne
 8003582:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003586:	d1d1      	bne.n	800352c <__aeabi_dmul+0x19c>
 8003588:	ea81 0103 	eor.w	r1, r1, r3
 800358c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003590:	f04f 0000 	mov.w	r0, #0
 8003594:	bd70      	pop	{r4, r5, r6, pc}
 8003596:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800359a:	bf06      	itte	eq
 800359c:	4610      	moveq	r0, r2
 800359e:	4619      	moveq	r1, r3
 80035a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80035a4:	d019      	beq.n	80035da <__aeabi_dmul+0x24a>
 80035a6:	ea94 0f0c 	teq	r4, ip
 80035aa:	d102      	bne.n	80035b2 <__aeabi_dmul+0x222>
 80035ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80035b0:	d113      	bne.n	80035da <__aeabi_dmul+0x24a>
 80035b2:	ea95 0f0c 	teq	r5, ip
 80035b6:	d105      	bne.n	80035c4 <__aeabi_dmul+0x234>
 80035b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80035bc:	bf1c      	itt	ne
 80035be:	4610      	movne	r0, r2
 80035c0:	4619      	movne	r1, r3
 80035c2:	d10a      	bne.n	80035da <__aeabi_dmul+0x24a>
 80035c4:	ea81 0103 	eor.w	r1, r1, r3
 80035c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80035cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80035d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80035d4:	f04f 0000 	mov.w	r0, #0
 80035d8:	bd70      	pop	{r4, r5, r6, pc}
 80035da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80035de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80035e2:	bd70      	pop	{r4, r5, r6, pc}

080035e4 <__aeabi_ddiv>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80035ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80035ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80035f2:	bf1d      	ittte	ne
 80035f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80035f8:	ea94 0f0c 	teqne	r4, ip
 80035fc:	ea95 0f0c 	teqne	r5, ip
 8003600:	f000 f8a7 	bleq	8003752 <__aeabi_ddiv+0x16e>
 8003604:	eba4 0405 	sub.w	r4, r4, r5
 8003608:	ea81 0e03 	eor.w	lr, r1, r3
 800360c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003610:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003614:	f000 8088 	beq.w	8003728 <__aeabi_ddiv+0x144>
 8003618:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800361c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003620:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003624:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003628:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800362c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003630:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003634:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003638:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800363c:	429d      	cmp	r5, r3
 800363e:	bf08      	it	eq
 8003640:	4296      	cmpeq	r6, r2
 8003642:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8003646:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800364a:	d202      	bcs.n	8003652 <__aeabi_ddiv+0x6e>
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	ea4f 0232 	mov.w	r2, r2, rrx
 8003652:	1ab6      	subs	r6, r6, r2
 8003654:	eb65 0503 	sbc.w	r5, r5, r3
 8003658:	085b      	lsrs	r3, r3, #1
 800365a:	ea4f 0232 	mov.w	r2, r2, rrx
 800365e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003662:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8003666:	ebb6 0e02 	subs.w	lr, r6, r2
 800366a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800366e:	bf22      	ittt	cs
 8003670:	1ab6      	subcs	r6, r6, r2
 8003672:	4675      	movcs	r5, lr
 8003674:	ea40 000c 	orrcs.w	r0, r0, ip
 8003678:	085b      	lsrs	r3, r3, #1
 800367a:	ea4f 0232 	mov.w	r2, r2, rrx
 800367e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003682:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003686:	bf22      	ittt	cs
 8003688:	1ab6      	subcs	r6, r6, r2
 800368a:	4675      	movcs	r5, lr
 800368c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	ea4f 0232 	mov.w	r2, r2, rrx
 8003696:	ebb6 0e02 	subs.w	lr, r6, r2
 800369a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800369e:	bf22      	ittt	cs
 80036a0:	1ab6      	subcs	r6, r6, r2
 80036a2:	4675      	movcs	r5, lr
 80036a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80036ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80036b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80036b6:	bf22      	ittt	cs
 80036b8:	1ab6      	subcs	r6, r6, r2
 80036ba:	4675      	movcs	r5, lr
 80036bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80036c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80036c4:	d018      	beq.n	80036f8 <__aeabi_ddiv+0x114>
 80036c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80036ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80036ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80036d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80036d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80036da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80036de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80036e2:	d1c0      	bne.n	8003666 <__aeabi_ddiv+0x82>
 80036e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80036e8:	d10b      	bne.n	8003702 <__aeabi_ddiv+0x11e>
 80036ea:	ea41 0100 	orr.w	r1, r1, r0
 80036ee:	f04f 0000 	mov.w	r0, #0
 80036f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80036f6:	e7b6      	b.n	8003666 <__aeabi_ddiv+0x82>
 80036f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80036fc:	bf04      	itt	eq
 80036fe:	4301      	orreq	r1, r0
 8003700:	2000      	moveq	r0, #0
 8003702:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003706:	bf88      	it	hi
 8003708:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800370c:	f63f aeaf 	bhi.w	800346e <__aeabi_dmul+0xde>
 8003710:	ebb5 0c03 	subs.w	ip, r5, r3
 8003714:	bf04      	itt	eq
 8003716:	ebb6 0c02 	subseq.w	ip, r6, r2
 800371a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800371e:	f150 0000 	adcs.w	r0, r0, #0
 8003722:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003726:	bd70      	pop	{r4, r5, r6, pc}
 8003728:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800372c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003730:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003734:	bfc2      	ittt	gt
 8003736:	ebd4 050c 	rsbsgt	r5, r4, ip
 800373a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800373e:	bd70      	popgt	{r4, r5, r6, pc}
 8003740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003744:	f04f 0e00 	mov.w	lr, #0
 8003748:	3c01      	subs	r4, #1
 800374a:	e690      	b.n	800346e <__aeabi_dmul+0xde>
 800374c:	ea45 0e06 	orr.w	lr, r5, r6
 8003750:	e68d      	b.n	800346e <__aeabi_dmul+0xde>
 8003752:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003756:	ea94 0f0c 	teq	r4, ip
 800375a:	bf08      	it	eq
 800375c:	ea95 0f0c 	teqeq	r5, ip
 8003760:	f43f af3b 	beq.w	80035da <__aeabi_dmul+0x24a>
 8003764:	ea94 0f0c 	teq	r4, ip
 8003768:	d10a      	bne.n	8003780 <__aeabi_ddiv+0x19c>
 800376a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800376e:	f47f af34 	bne.w	80035da <__aeabi_dmul+0x24a>
 8003772:	ea95 0f0c 	teq	r5, ip
 8003776:	f47f af25 	bne.w	80035c4 <__aeabi_dmul+0x234>
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	e72c      	b.n	80035da <__aeabi_dmul+0x24a>
 8003780:	ea95 0f0c 	teq	r5, ip
 8003784:	d106      	bne.n	8003794 <__aeabi_ddiv+0x1b0>
 8003786:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800378a:	f43f aefd 	beq.w	8003588 <__aeabi_dmul+0x1f8>
 800378e:	4610      	mov	r0, r2
 8003790:	4619      	mov	r1, r3
 8003792:	e722      	b.n	80035da <__aeabi_dmul+0x24a>
 8003794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003798:	bf18      	it	ne
 800379a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800379e:	f47f aec5 	bne.w	800352c <__aeabi_dmul+0x19c>
 80037a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80037a6:	f47f af0d 	bne.w	80035c4 <__aeabi_dmul+0x234>
 80037aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80037ae:	f47f aeeb 	bne.w	8003588 <__aeabi_dmul+0x1f8>
 80037b2:	e712      	b.n	80035da <__aeabi_dmul+0x24a>

080037b4 <__gedf2>:
 80037b4:	f04f 3cff 	mov.w	ip, #4294967295
 80037b8:	e006      	b.n	80037c8 <__cmpdf2+0x4>
 80037ba:	bf00      	nop

080037bc <__ledf2>:
 80037bc:	f04f 0c01 	mov.w	ip, #1
 80037c0:	e002      	b.n	80037c8 <__cmpdf2+0x4>
 80037c2:	bf00      	nop

080037c4 <__cmpdf2>:
 80037c4:	f04f 0c01 	mov.w	ip, #1
 80037c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80037cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80037d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80037d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80037d8:	bf18      	it	ne
 80037da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80037de:	d01b      	beq.n	8003818 <__cmpdf2+0x54>
 80037e0:	b001      	add	sp, #4
 80037e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80037e6:	bf0c      	ite	eq
 80037e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80037ec:	ea91 0f03 	teqne	r1, r3
 80037f0:	bf02      	ittt	eq
 80037f2:	ea90 0f02 	teqeq	r0, r2
 80037f6:	2000      	moveq	r0, #0
 80037f8:	4770      	bxeq	lr
 80037fa:	f110 0f00 	cmn.w	r0, #0
 80037fe:	ea91 0f03 	teq	r1, r3
 8003802:	bf58      	it	pl
 8003804:	4299      	cmppl	r1, r3
 8003806:	bf08      	it	eq
 8003808:	4290      	cmpeq	r0, r2
 800380a:	bf2c      	ite	cs
 800380c:	17d8      	asrcs	r0, r3, #31
 800380e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8003812:	f040 0001 	orr.w	r0, r0, #1
 8003816:	4770      	bx	lr
 8003818:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800381c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003820:	d102      	bne.n	8003828 <__cmpdf2+0x64>
 8003822:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8003826:	d107      	bne.n	8003838 <__cmpdf2+0x74>
 8003828:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800382c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003830:	d1d6      	bne.n	80037e0 <__cmpdf2+0x1c>
 8003832:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8003836:	d0d3      	beq.n	80037e0 <__cmpdf2+0x1c>
 8003838:	f85d 0b04 	ldr.w	r0, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop

08003840 <__aeabi_cdrcmple>:
 8003840:	4684      	mov	ip, r0
 8003842:	4610      	mov	r0, r2
 8003844:	4662      	mov	r2, ip
 8003846:	468c      	mov	ip, r1
 8003848:	4619      	mov	r1, r3
 800384a:	4663      	mov	r3, ip
 800384c:	e000      	b.n	8003850 <__aeabi_cdcmpeq>
 800384e:	bf00      	nop

08003850 <__aeabi_cdcmpeq>:
 8003850:	b501      	push	{r0, lr}
 8003852:	f7ff ffb7 	bl	80037c4 <__cmpdf2>
 8003856:	2800      	cmp	r0, #0
 8003858:	bf48      	it	mi
 800385a:	f110 0f00 	cmnmi.w	r0, #0
 800385e:	bd01      	pop	{r0, pc}

08003860 <__aeabi_dcmpeq>:
 8003860:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003864:	f7ff fff4 	bl	8003850 <__aeabi_cdcmpeq>
 8003868:	bf0c      	ite	eq
 800386a:	2001      	moveq	r0, #1
 800386c:	2000      	movne	r0, #0
 800386e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003872:	bf00      	nop

08003874 <__aeabi_dcmplt>:
 8003874:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003878:	f7ff ffea 	bl	8003850 <__aeabi_cdcmpeq>
 800387c:	bf34      	ite	cc
 800387e:	2001      	movcc	r0, #1
 8003880:	2000      	movcs	r0, #0
 8003882:	f85d fb08 	ldr.w	pc, [sp], #8
 8003886:	bf00      	nop

08003888 <__aeabi_dcmple>:
 8003888:	f84d ed08 	str.w	lr, [sp, #-8]!
 800388c:	f7ff ffe0 	bl	8003850 <__aeabi_cdcmpeq>
 8003890:	bf94      	ite	ls
 8003892:	2001      	movls	r0, #1
 8003894:	2000      	movhi	r0, #0
 8003896:	f85d fb08 	ldr.w	pc, [sp], #8
 800389a:	bf00      	nop

0800389c <__aeabi_dcmpge>:
 800389c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80038a0:	f7ff ffce 	bl	8003840 <__aeabi_cdrcmple>
 80038a4:	bf94      	ite	ls
 80038a6:	2001      	movls	r0, #1
 80038a8:	2000      	movhi	r0, #0
 80038aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80038ae:	bf00      	nop

080038b0 <__aeabi_dcmpgt>:
 80038b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80038b4:	f7ff ffc4 	bl	8003840 <__aeabi_cdrcmple>
 80038b8:	bf34      	ite	cc
 80038ba:	2001      	movcc	r0, #1
 80038bc:	2000      	movcs	r0, #0
 80038be:	f85d fb08 	ldr.w	pc, [sp], #8
 80038c2:	bf00      	nop

080038c4 <__aeabi_dcmpun>:
 80038c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80038c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80038cc:	d102      	bne.n	80038d4 <__aeabi_dcmpun+0x10>
 80038ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80038d2:	d10a      	bne.n	80038ea <__aeabi_dcmpun+0x26>
 80038d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80038d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80038dc:	d102      	bne.n	80038e4 <__aeabi_dcmpun+0x20>
 80038de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80038e2:	d102      	bne.n	80038ea <__aeabi_dcmpun+0x26>
 80038e4:	f04f 0000 	mov.w	r0, #0
 80038e8:	4770      	bx	lr
 80038ea:	f04f 0001 	mov.w	r0, #1
 80038ee:	4770      	bx	lr

080038f0 <__aeabi_d2uiz>:
 80038f0:	004a      	lsls	r2, r1, #1
 80038f2:	d211      	bcs.n	8003918 <__aeabi_d2uiz+0x28>
 80038f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80038f8:	d211      	bcs.n	800391e <__aeabi_d2uiz+0x2e>
 80038fa:	d50d      	bpl.n	8003918 <__aeabi_d2uiz+0x28>
 80038fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003900:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003904:	d40e      	bmi.n	8003924 <__aeabi_d2uiz+0x34>
 8003906:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800390a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800390e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8003912:	fa23 f002 	lsr.w	r0, r3, r2
 8003916:	4770      	bx	lr
 8003918:	f04f 0000 	mov.w	r0, #0
 800391c:	4770      	bx	lr
 800391e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003922:	d102      	bne.n	800392a <__aeabi_d2uiz+0x3a>
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	4770      	bx	lr
 800392a:	f04f 0000 	mov.w	r0, #0
 800392e:	4770      	bx	lr

08003930 <__errno>:
 8003930:	4b01      	ldr	r3, [pc, #4]	; (8003938 <__errno+0x8>)
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20000468 	.word	0x20000468

0800393c <__libc_init_array>:
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	4e0f      	ldr	r6, [pc, #60]	; (800397c <__libc_init_array+0x40>)
 8003940:	4d0f      	ldr	r5, [pc, #60]	; (8003980 <__libc_init_array+0x44>)
 8003942:	1b76      	subs	r6, r6, r5
 8003944:	10b6      	asrs	r6, r6, #2
 8003946:	bf18      	it	ne
 8003948:	2400      	movne	r4, #0
 800394a:	d005      	beq.n	8003958 <__libc_init_array+0x1c>
 800394c:	3401      	adds	r4, #1
 800394e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003952:	4798      	blx	r3
 8003954:	42a6      	cmp	r6, r4
 8003956:	d1f9      	bne.n	800394c <__libc_init_array+0x10>
 8003958:	4e0a      	ldr	r6, [pc, #40]	; (8003984 <__libc_init_array+0x48>)
 800395a:	4d0b      	ldr	r5, [pc, #44]	; (8003988 <__libc_init_array+0x4c>)
 800395c:	1b76      	subs	r6, r6, r5
 800395e:	f7fe fa29 	bl	8001db4 <_init>
 8003962:	10b6      	asrs	r6, r6, #2
 8003964:	bf18      	it	ne
 8003966:	2400      	movne	r4, #0
 8003968:	d006      	beq.n	8003978 <__libc_init_array+0x3c>
 800396a:	3401      	adds	r4, #1
 800396c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003970:	4798      	blx	r3
 8003972:	42a6      	cmp	r6, r4
 8003974:	d1f9      	bne.n	800396a <__libc_init_array+0x2e>
 8003976:	bd70      	pop	{r4, r5, r6, pc}
 8003978:	bd70      	pop	{r4, r5, r6, pc}
 800397a:	bf00      	nop
 800397c:	200009e8 	.word	0x200009e8
 8003980:	200009e8 	.word	0x200009e8
 8003984:	200009e8 	.word	0x200009e8
 8003988:	200009e8 	.word	0x200009e8

0800398c <memcpy>:
 800398c:	4684      	mov	ip, r0
 800398e:	ea41 0300 	orr.w	r3, r1, r0
 8003992:	f013 0303 	ands.w	r3, r3, #3
 8003996:	d16d      	bne.n	8003a74 <memcpy+0xe8>
 8003998:	3a40      	subs	r2, #64	; 0x40
 800399a:	d341      	bcc.n	8003a20 <memcpy+0x94>
 800399c:	f851 3b04 	ldr.w	r3, [r1], #4
 80039a0:	f840 3b04 	str.w	r3, [r0], #4
 80039a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80039a8:	f840 3b04 	str.w	r3, [r0], #4
 80039ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80039b0:	f840 3b04 	str.w	r3, [r0], #4
 80039b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80039b8:	f840 3b04 	str.w	r3, [r0], #4
 80039bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80039c0:	f840 3b04 	str.w	r3, [r0], #4
 80039c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80039c8:	f840 3b04 	str.w	r3, [r0], #4
 80039cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80039d0:	f840 3b04 	str.w	r3, [r0], #4
 80039d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80039d8:	f840 3b04 	str.w	r3, [r0], #4
 80039dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80039e0:	f840 3b04 	str.w	r3, [r0], #4
 80039e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80039e8:	f840 3b04 	str.w	r3, [r0], #4
 80039ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80039f0:	f840 3b04 	str.w	r3, [r0], #4
 80039f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80039f8:	f840 3b04 	str.w	r3, [r0], #4
 80039fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a00:	f840 3b04 	str.w	r3, [r0], #4
 8003a04:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a08:	f840 3b04 	str.w	r3, [r0], #4
 8003a0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a10:	f840 3b04 	str.w	r3, [r0], #4
 8003a14:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a18:	f840 3b04 	str.w	r3, [r0], #4
 8003a1c:	3a40      	subs	r2, #64	; 0x40
 8003a1e:	d2bd      	bcs.n	800399c <memcpy+0x10>
 8003a20:	3230      	adds	r2, #48	; 0x30
 8003a22:	d311      	bcc.n	8003a48 <memcpy+0xbc>
 8003a24:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a28:	f840 3b04 	str.w	r3, [r0], #4
 8003a2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a30:	f840 3b04 	str.w	r3, [r0], #4
 8003a34:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a38:	f840 3b04 	str.w	r3, [r0], #4
 8003a3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a40:	f840 3b04 	str.w	r3, [r0], #4
 8003a44:	3a10      	subs	r2, #16
 8003a46:	d2ed      	bcs.n	8003a24 <memcpy+0x98>
 8003a48:	320c      	adds	r2, #12
 8003a4a:	d305      	bcc.n	8003a58 <memcpy+0xcc>
 8003a4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a50:	f840 3b04 	str.w	r3, [r0], #4
 8003a54:	3a04      	subs	r2, #4
 8003a56:	d2f9      	bcs.n	8003a4c <memcpy+0xc0>
 8003a58:	3204      	adds	r2, #4
 8003a5a:	d008      	beq.n	8003a6e <memcpy+0xe2>
 8003a5c:	07d2      	lsls	r2, r2, #31
 8003a5e:	bf1c      	itt	ne
 8003a60:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003a64:	f800 3b01 	strbne.w	r3, [r0], #1
 8003a68:	d301      	bcc.n	8003a6e <memcpy+0xe2>
 8003a6a:	880b      	ldrh	r3, [r1, #0]
 8003a6c:	8003      	strh	r3, [r0, #0]
 8003a6e:	4660      	mov	r0, ip
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	2a08      	cmp	r2, #8
 8003a76:	d313      	bcc.n	8003aa0 <memcpy+0x114>
 8003a78:	078b      	lsls	r3, r1, #30
 8003a7a:	d08d      	beq.n	8003998 <memcpy+0xc>
 8003a7c:	f010 0303 	ands.w	r3, r0, #3
 8003a80:	d08a      	beq.n	8003998 <memcpy+0xc>
 8003a82:	f1c3 0304 	rsb	r3, r3, #4
 8003a86:	1ad2      	subs	r2, r2, r3
 8003a88:	07db      	lsls	r3, r3, #31
 8003a8a:	bf1c      	itt	ne
 8003a8c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003a90:	f800 3b01 	strbne.w	r3, [r0], #1
 8003a94:	d380      	bcc.n	8003998 <memcpy+0xc>
 8003a96:	f831 3b02 	ldrh.w	r3, [r1], #2
 8003a9a:	f820 3b02 	strh.w	r3, [r0], #2
 8003a9e:	e77b      	b.n	8003998 <memcpy+0xc>
 8003aa0:	3a04      	subs	r2, #4
 8003aa2:	d3d9      	bcc.n	8003a58 <memcpy+0xcc>
 8003aa4:	3a01      	subs	r2, #1
 8003aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aaa:	f800 3b01 	strb.w	r3, [r0], #1
 8003aae:	d2f9      	bcs.n	8003aa4 <memcpy+0x118>
 8003ab0:	780b      	ldrb	r3, [r1, #0]
 8003ab2:	7003      	strb	r3, [r0, #0]
 8003ab4:	784b      	ldrb	r3, [r1, #1]
 8003ab6:	7043      	strb	r3, [r0, #1]
 8003ab8:	788b      	ldrb	r3, [r1, #2]
 8003aba:	7083      	strb	r3, [r0, #2]
 8003abc:	4660      	mov	r0, ip
 8003abe:	4770      	bx	lr

08003ac0 <memset>:
 8003ac0:	b470      	push	{r4, r5, r6}
 8003ac2:	0784      	lsls	r4, r0, #30
 8003ac4:	d046      	beq.n	8003b54 <memset+0x94>
 8003ac6:	1e54      	subs	r4, r2, #1
 8003ac8:	2a00      	cmp	r2, #0
 8003aca:	d041      	beq.n	8003b50 <memset+0x90>
 8003acc:	b2cd      	uxtb	r5, r1
 8003ace:	4603      	mov	r3, r0
 8003ad0:	e002      	b.n	8003ad8 <memset+0x18>
 8003ad2:	1e62      	subs	r2, r4, #1
 8003ad4:	b3e4      	cbz	r4, 8003b50 <memset+0x90>
 8003ad6:	4614      	mov	r4, r2
 8003ad8:	f803 5b01 	strb.w	r5, [r3], #1
 8003adc:	079a      	lsls	r2, r3, #30
 8003ade:	d1f8      	bne.n	8003ad2 <memset+0x12>
 8003ae0:	2c03      	cmp	r4, #3
 8003ae2:	d92e      	bls.n	8003b42 <memset+0x82>
 8003ae4:	b2cd      	uxtb	r5, r1
 8003ae6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003aea:	2c0f      	cmp	r4, #15
 8003aec:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003af0:	d919      	bls.n	8003b26 <memset+0x66>
 8003af2:	f103 0210 	add.w	r2, r3, #16
 8003af6:	4626      	mov	r6, r4
 8003af8:	3e10      	subs	r6, #16
 8003afa:	2e0f      	cmp	r6, #15
 8003afc:	f842 5c10 	str.w	r5, [r2, #-16]
 8003b00:	f842 5c0c 	str.w	r5, [r2, #-12]
 8003b04:	f842 5c08 	str.w	r5, [r2, #-8]
 8003b08:	f842 5c04 	str.w	r5, [r2, #-4]
 8003b0c:	f102 0210 	add.w	r2, r2, #16
 8003b10:	d8f2      	bhi.n	8003af8 <memset+0x38>
 8003b12:	f1a4 0210 	sub.w	r2, r4, #16
 8003b16:	f022 020f 	bic.w	r2, r2, #15
 8003b1a:	f004 040f 	and.w	r4, r4, #15
 8003b1e:	3210      	adds	r2, #16
 8003b20:	2c03      	cmp	r4, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	d90d      	bls.n	8003b42 <memset+0x82>
 8003b26:	461e      	mov	r6, r3
 8003b28:	4622      	mov	r2, r4
 8003b2a:	3a04      	subs	r2, #4
 8003b2c:	2a03      	cmp	r2, #3
 8003b2e:	f846 5b04 	str.w	r5, [r6], #4
 8003b32:	d8fa      	bhi.n	8003b2a <memset+0x6a>
 8003b34:	1f22      	subs	r2, r4, #4
 8003b36:	f022 0203 	bic.w	r2, r2, #3
 8003b3a:	3204      	adds	r2, #4
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f004 0403 	and.w	r4, r4, #3
 8003b42:	b12c      	cbz	r4, 8003b50 <memset+0x90>
 8003b44:	b2c9      	uxtb	r1, r1
 8003b46:	441c      	add	r4, r3
 8003b48:	f803 1b01 	strb.w	r1, [r3], #1
 8003b4c:	42a3      	cmp	r3, r4
 8003b4e:	d1fb      	bne.n	8003b48 <memset+0x88>
 8003b50:	bc70      	pop	{r4, r5, r6}
 8003b52:	4770      	bx	lr
 8003b54:	4614      	mov	r4, r2
 8003b56:	4603      	mov	r3, r0
 8003b58:	e7c2      	b.n	8003ae0 <memset+0x20>
 8003b5a:	bf00      	nop

08003b5c <printf>:
 8003b5c:	b40f      	push	{r0, r1, r2, r3}
 8003b5e:	b500      	push	{lr}
 8003b60:	4907      	ldr	r1, [pc, #28]	; (8003b80 <printf+0x24>)
 8003b62:	b083      	sub	sp, #12
 8003b64:	ab04      	add	r3, sp, #16
 8003b66:	6808      	ldr	r0, [r1, #0]
 8003b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b6c:	6881      	ldr	r1, [r0, #8]
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	f001 fcc2 	bl	80054f8 <_vfprintf_r>
 8003b74:	b003      	add	sp, #12
 8003b76:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b7a:	b004      	add	sp, #16
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000468 	.word	0x20000468

08003b84 <_puts_r>:
 8003b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b86:	4605      	mov	r5, r0
 8003b88:	b089      	sub	sp, #36	; 0x24
 8003b8a:	4608      	mov	r0, r1
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	f000 f877 	bl	8003c80 <strlen>
 8003b92:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003b94:	4f14      	ldr	r7, [pc, #80]	; (8003be8 <_puts_r+0x64>)
 8003b96:	9404      	str	r4, [sp, #16]
 8003b98:	2601      	movs	r6, #1
 8003b9a:	1c44      	adds	r4, r0, #1
 8003b9c:	a904      	add	r1, sp, #16
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	9403      	str	r4, [sp, #12]
 8003ba2:	9005      	str	r0, [sp, #20]
 8003ba4:	68ac      	ldr	r4, [r5, #8]
 8003ba6:	9706      	str	r7, [sp, #24]
 8003ba8:	9607      	str	r6, [sp, #28]
 8003baa:	9101      	str	r1, [sp, #4]
 8003bac:	9202      	str	r2, [sp, #8]
 8003bae:	b1b3      	cbz	r3, 8003bde <_puts_r+0x5a>
 8003bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bb4:	049a      	lsls	r2, r3, #18
 8003bb6:	d406      	bmi.n	8003bc6 <_puts_r+0x42>
 8003bb8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bc2:	81a3      	strh	r3, [r4, #12]
 8003bc4:	6662      	str	r2, [r4, #100]	; 0x64
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	4628      	mov	r0, r5
 8003bca:	aa01      	add	r2, sp, #4
 8003bcc:	f004 fb12 	bl	80081f4 <__sfvwrite_r>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	bf14      	ite	ne
 8003bd4:	f04f 30ff 	movne.w	r0, #4294967295
 8003bd8:	200a      	moveq	r0, #10
 8003bda:	b009      	add	sp, #36	; 0x24
 8003bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bde:	4628      	mov	r0, r5
 8003be0:	f004 f9c8 	bl	8007f74 <__sinit>
 8003be4:	e7e4      	b.n	8003bb0 <_puts_r+0x2c>
 8003be6:	bf00      	nop
 8003be8:	0800a330 	.word	0x0800a330

08003bec <puts>:
 8003bec:	4b02      	ldr	r3, [pc, #8]	; (8003bf8 <puts+0xc>)
 8003bee:	4601      	mov	r1, r0
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	f7ff bfc7 	b.w	8003b84 <_puts_r>
 8003bf6:	bf00      	nop
 8003bf8:	20000468 	.word	0x20000468

08003bfc <sprintf>:
 8003bfc:	b40e      	push	{r1, r2, r3}
 8003bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c00:	b09c      	sub	sp, #112	; 0x70
 8003c02:	ab21      	add	r3, sp, #132	; 0x84
 8003c04:	490f      	ldr	r1, [pc, #60]	; (8003c44 <sprintf+0x48>)
 8003c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c0a:	9301      	str	r3, [sp, #4]
 8003c0c:	4605      	mov	r5, r0
 8003c0e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8003c12:	6808      	ldr	r0, [r1, #0]
 8003c14:	9502      	str	r5, [sp, #8]
 8003c16:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003c1a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003c1e:	a902      	add	r1, sp, #8
 8003c20:	9506      	str	r5, [sp, #24]
 8003c22:	f8ad 7014 	strh.w	r7, [sp, #20]
 8003c26:	9404      	str	r4, [sp, #16]
 8003c28:	9407      	str	r4, [sp, #28]
 8003c2a:	f8ad 6016 	strh.w	r6, [sp, #22]
 8003c2e:	f000 f8e7 	bl	8003e00 <_svfprintf_r>
 8003c32:	9b02      	ldr	r3, [sp, #8]
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	b01c      	add	sp, #112	; 0x70
 8003c3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003c3e:	b003      	add	sp, #12
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000468 	.word	0x20000468
	...

08003c80 <strlen>:
 8003c80:	f890 f000 	pld	[r0]
 8003c84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8003c88:	f020 0107 	bic.w	r1, r0, #7
 8003c8c:	f06f 0c00 	mvn.w	ip, #0
 8003c90:	f010 0407 	ands.w	r4, r0, #7
 8003c94:	f891 f020 	pld	[r1, #32]
 8003c98:	f040 8049 	bne.w	8003d2e <strlen+0xae>
 8003c9c:	f04f 0400 	mov.w	r4, #0
 8003ca0:	f06f 0007 	mvn.w	r0, #7
 8003ca4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8003ca8:	f891 f040 	pld	[r1, #64]	; 0x40
 8003cac:	f100 0008 	add.w	r0, r0, #8
 8003cb0:	fa82 f24c 	uadd8	r2, r2, ip
 8003cb4:	faa4 f28c 	sel	r2, r4, ip
 8003cb8:	fa83 f34c 	uadd8	r3, r3, ip
 8003cbc:	faa2 f38c 	sel	r3, r2, ip
 8003cc0:	bb4b      	cbnz	r3, 8003d16 <strlen+0x96>
 8003cc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8003cc6:	fa82 f24c 	uadd8	r2, r2, ip
 8003cca:	f100 0008 	add.w	r0, r0, #8
 8003cce:	faa4 f28c 	sel	r2, r4, ip
 8003cd2:	fa83 f34c 	uadd8	r3, r3, ip
 8003cd6:	faa2 f38c 	sel	r3, r2, ip
 8003cda:	b9e3      	cbnz	r3, 8003d16 <strlen+0x96>
 8003cdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8003ce0:	fa82 f24c 	uadd8	r2, r2, ip
 8003ce4:	f100 0008 	add.w	r0, r0, #8
 8003ce8:	faa4 f28c 	sel	r2, r4, ip
 8003cec:	fa83 f34c 	uadd8	r3, r3, ip
 8003cf0:	faa2 f38c 	sel	r3, r2, ip
 8003cf4:	b97b      	cbnz	r3, 8003d16 <strlen+0x96>
 8003cf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8003cfa:	f101 0120 	add.w	r1, r1, #32
 8003cfe:	fa82 f24c 	uadd8	r2, r2, ip
 8003d02:	f100 0008 	add.w	r0, r0, #8
 8003d06:	faa4 f28c 	sel	r2, r4, ip
 8003d0a:	fa83 f34c 	uadd8	r3, r3, ip
 8003d0e:	faa2 f38c 	sel	r3, r2, ip
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0c6      	beq.n	8003ca4 <strlen+0x24>
 8003d16:	2a00      	cmp	r2, #0
 8003d18:	bf04      	itt	eq
 8003d1a:	3004      	addeq	r0, #4
 8003d1c:	461a      	moveq	r2, r3
 8003d1e:	ba12      	rev	r2, r2
 8003d20:	fab2 f282 	clz	r2, r2
 8003d24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8003d28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8003d2c:	4770      	bx	lr
 8003d2e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8003d32:	f004 0503 	and.w	r5, r4, #3
 8003d36:	f1c4 0000 	rsb	r0, r4, #0
 8003d3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8003d3e:	f014 0f04 	tst.w	r4, #4
 8003d42:	f891 f040 	pld	[r1, #64]	; 0x40
 8003d46:	fa0c f505 	lsl.w	r5, ip, r5
 8003d4a:	ea62 0205 	orn	r2, r2, r5
 8003d4e:	bf1c      	itt	ne
 8003d50:	ea63 0305 	ornne	r3, r3, r5
 8003d54:	4662      	movne	r2, ip
 8003d56:	f04f 0400 	mov.w	r4, #0
 8003d5a:	e7a9      	b.n	8003cb0 <strlen+0x30>

08003d5c <strncmp>:
 8003d5c:	2a00      	cmp	r2, #0
 8003d5e:	d041      	beq.n	8003de4 <strncmp+0x88>
 8003d60:	ea40 0301 	orr.w	r3, r0, r1
 8003d64:	f013 0303 	ands.w	r3, r3, #3
 8003d68:	b4f0      	push	{r4, r5, r6, r7}
 8003d6a:	d125      	bne.n	8003db8 <strncmp+0x5c>
 8003d6c:	2a03      	cmp	r2, #3
 8003d6e:	d923      	bls.n	8003db8 <strncmp+0x5c>
 8003d70:	6804      	ldr	r4, [r0, #0]
 8003d72:	680d      	ldr	r5, [r1, #0]
 8003d74:	42ac      	cmp	r4, r5
 8003d76:	d11f      	bne.n	8003db8 <strncmp+0x5c>
 8003d78:	3a04      	subs	r2, #4
 8003d7a:	d035      	beq.n	8003de8 <strncmp+0x8c>
 8003d7c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8003d80:	ea25 0404 	bic.w	r4, r5, r4
 8003d84:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8003d88:	d131      	bne.n	8003dee <strncmp+0x92>
 8003d8a:	1d07      	adds	r7, r0, #4
 8003d8c:	1d0d      	adds	r5, r1, #4
 8003d8e:	e00d      	b.n	8003dac <strncmp+0x50>
 8003d90:	f857 3b04 	ldr.w	r3, [r7], #4
 8003d94:	680e      	ldr	r6, [r1, #0]
 8003d96:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 8003d9a:	42b3      	cmp	r3, r6
 8003d9c:	ea24 0403 	bic.w	r4, r4, r3
 8003da0:	d10a      	bne.n	8003db8 <strncmp+0x5c>
 8003da2:	3a04      	subs	r2, #4
 8003da4:	d020      	beq.n	8003de8 <strncmp+0x8c>
 8003da6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8003daa:	d123      	bne.n	8003df4 <strncmp+0x98>
 8003dac:	2a03      	cmp	r2, #3
 8003dae:	4629      	mov	r1, r5
 8003db0:	4638      	mov	r0, r7
 8003db2:	f105 0504 	add.w	r5, r5, #4
 8003db6:	d8eb      	bhi.n	8003d90 <strncmp+0x34>
 8003db8:	7803      	ldrb	r3, [r0, #0]
 8003dba:	780c      	ldrb	r4, [r1, #0]
 8003dbc:	429c      	cmp	r4, r3
 8003dbe:	f102 32ff 	add.w	r2, r2, #4294967295
 8003dc2:	d10c      	bne.n	8003dde <strncmp+0x82>
 8003dc4:	b182      	cbz	r2, 8003de8 <strncmp+0x8c>
 8003dc6:	b914      	cbnz	r4, 8003dce <strncmp+0x72>
 8003dc8:	e016      	b.n	8003df8 <strncmp+0x9c>
 8003dca:	b16a      	cbz	r2, 8003de8 <strncmp+0x8c>
 8003dcc:	b17b      	cbz	r3, 8003dee <strncmp+0x92>
 8003dce:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003dd2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003dd6:	42a3      	cmp	r3, r4
 8003dd8:	f102 32ff 	add.w	r2, r2, #4294967295
 8003ddc:	d0f5      	beq.n	8003dca <strncmp+0x6e>
 8003dde:	1b18      	subs	r0, r3, r4
 8003de0:	bcf0      	pop	{r4, r5, r6, r7}
 8003de2:	4770      	bx	lr
 8003de4:	4610      	mov	r0, r2
 8003de6:	4770      	bx	lr
 8003de8:	4610      	mov	r0, r2
 8003dea:	bcf0      	pop	{r4, r5, r6, r7}
 8003dec:	4770      	bx	lr
 8003dee:	4618      	mov	r0, r3
 8003df0:	bcf0      	pop	{r4, r5, r6, r7}
 8003df2:	4770      	bx	lr
 8003df4:	2000      	movs	r0, #0
 8003df6:	e7f3      	b.n	8003de0 <strncmp+0x84>
 8003df8:	4620      	mov	r0, r4
 8003dfa:	e7f1      	b.n	8003de0 <strncmp+0x84>
 8003dfc:	0000      	movs	r0, r0
	...

08003e00 <_svfprintf_r>:
 8003e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e04:	b0c5      	sub	sp, #276	; 0x114
 8003e06:	460c      	mov	r4, r1
 8003e08:	9109      	str	r1, [sp, #36]	; 0x24
 8003e0a:	4615      	mov	r5, r2
 8003e0c:	930e      	str	r3, [sp, #56]	; 0x38
 8003e0e:	900a      	str	r0, [sp, #40]	; 0x28
 8003e10:	f004 fbaa 	bl	8008568 <_localeconv_r>
 8003e14:	6803      	ldr	r3, [r0, #0]
 8003e16:	9317      	str	r3, [sp, #92]	; 0x5c
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ff31 	bl	8003c80 <strlen>
 8003e1e:	89a3      	ldrh	r3, [r4, #12]
 8003e20:	9016      	str	r0, [sp, #88]	; 0x58
 8003e22:	061e      	lsls	r6, r3, #24
 8003e24:	d503      	bpl.n	8003e2e <_svfprintf_r+0x2e>
 8003e26:	6923      	ldr	r3, [r4, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f001 8133 	beq.w	8005094 <_svfprintf_r+0x1294>
 8003e2e:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80040c8 <_svfprintf_r+0x2c8>
 8003e32:	2300      	movs	r3, #0
 8003e34:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003e38:	9312      	str	r3, [sp, #72]	; 0x48
 8003e3a:	9329      	str	r3, [sp, #164]	; 0xa4
 8003e3c:	9328      	str	r3, [sp, #160]	; 0xa0
 8003e3e:	9319      	str	r3, [sp, #100]	; 0x64
 8003e40:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e42:	f8df a290 	ldr.w	sl, [pc, #656]	; 80040d4 <_svfprintf_r+0x2d4>
 8003e46:	ab34      	add	r3, sp, #208	; 0xd0
 8003e48:	9327      	str	r3, [sp, #156]	; 0x9c
 8003e4a:	4699      	mov	r9, r3
 8003e4c:	46a8      	mov	r8, r5
 8003e4e:	f898 3000 	ldrb.w	r3, [r8]
 8003e52:	4644      	mov	r4, r8
 8003e54:	b1eb      	cbz	r3, 8003e92 <_svfprintf_r+0x92>
 8003e56:	2b25      	cmp	r3, #37	; 0x25
 8003e58:	d102      	bne.n	8003e60 <_svfprintf_r+0x60>
 8003e5a:	e01a      	b.n	8003e92 <_svfprintf_r+0x92>
 8003e5c:	2b25      	cmp	r3, #37	; 0x25
 8003e5e:	d003      	beq.n	8003e68 <_svfprintf_r+0x68>
 8003e60:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f9      	bne.n	8003e5c <_svfprintf_r+0x5c>
 8003e68:	ebc8 0504 	rsb	r5, r8, r4
 8003e6c:	b18d      	cbz	r5, 8003e92 <_svfprintf_r+0x92>
 8003e6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003e70:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003e72:	f8c9 8000 	str.w	r8, [r9]
 8003e76:	3301      	adds	r3, #1
 8003e78:	442a      	add	r2, r5
 8003e7a:	2b07      	cmp	r3, #7
 8003e7c:	f8c9 5004 	str.w	r5, [r9, #4]
 8003e80:	9229      	str	r2, [sp, #164]	; 0xa4
 8003e82:	9328      	str	r3, [sp, #160]	; 0xa0
 8003e84:	f300 80a6 	bgt.w	8003fd4 <_svfprintf_r+0x1d4>
 8003e88:	f109 0908 	add.w	r9, r9, #8
 8003e8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e8e:	442b      	add	r3, r5
 8003e90:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e92:	7823      	ldrb	r3, [r4, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 80a6 	beq.w	8003fe6 <_svfprintf_r+0x1e6>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	930c      	str	r3, [sp, #48]	; 0x30
 8003ea6:	9307      	str	r3, [sp, #28]
 8003ea8:	f04f 3bff 	mov.w	fp, #4294967295
 8003eac:	7863      	ldrb	r3, [r4, #1]
 8003eae:	f104 0801 	add.w	r8, r4, #1
 8003eb2:	465d      	mov	r5, fp
 8003eb4:	f108 0801 	add.w	r8, r8, #1
 8003eb8:	f1a3 0020 	sub.w	r0, r3, #32
 8003ebc:	2858      	cmp	r0, #88	; 0x58
 8003ebe:	f200 8434 	bhi.w	800472a <_svfprintf_r+0x92a>
 8003ec2:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003ec6:	03a0      	.short	0x03a0
 8003ec8:	04320432 	.word	0x04320432
 8003ecc:	043203a8 	.word	0x043203a8
 8003ed0:	04320432 	.word	0x04320432
 8003ed4:	04320432 	.word	0x04320432
 8003ed8:	03af0432 	.word	0x03af0432
 8003edc:	043203bd 	.word	0x043203bd
 8003ee0:	00e2005d 	.word	0x00e2005d
 8003ee4:	01090432 	.word	0x01090432
 8003ee8:	01100110 	.word	0x01100110
 8003eec:	01100110 	.word	0x01100110
 8003ef0:	01100110 	.word	0x01100110
 8003ef4:	01100110 	.word	0x01100110
 8003ef8:	04320110 	.word	0x04320110
 8003efc:	04320432 	.word	0x04320432
 8003f00:	04320432 	.word	0x04320432
 8003f04:	04320432 	.word	0x04320432
 8003f08:	04320432 	.word	0x04320432
 8003f0c:	01200432 	.word	0x01200432
 8003f10:	04320286 	.word	0x04320286
 8003f14:	04320286 	.word	0x04320286
 8003f18:	04320432 	.word	0x04320432
 8003f1c:	02d40432 	.word	0x02d40432
 8003f20:	04320432 	.word	0x04320432
 8003f24:	043202e5 	.word	0x043202e5
 8003f28:	04320432 	.word	0x04320432
 8003f2c:	04320432 	.word	0x04320432
 8003f30:	0432030f 	.word	0x0432030f
 8003f34:	033d0432 	.word	0x033d0432
 8003f38:	04320432 	.word	0x04320432
 8003f3c:	04320432 	.word	0x04320432
 8003f40:	04320432 	.word	0x04320432
 8003f44:	04320432 	.word	0x04320432
 8003f48:	04320432 	.word	0x04320432
 8003f4c:	0391037e 	.word	0x0391037e
 8003f50:	02860286 	.word	0x02860286
 8003f54:	03990286 	.word	0x03990286
 8003f58:	04320391 	.word	0x04320391
 8003f5c:	04070432 	.word	0x04070432
 8003f60:	04120432 	.word	0x04120432
 8003f64:	006400a3 	.word	0x006400a3
 8003f68:	043203c2 	.word	0x043203c2
 8003f6c:	043203c9 	.word	0x043203c9
 8003f70:	043203ea 	.word	0x043203ea
 8003f74:	03f20432 	.word	0x03f20432
 8003f78:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003f7a:	930e      	str	r3, [sp, #56]	; 0x38
 8003f7c:	4240      	negs	r0, r0
 8003f7e:	900c      	str	r0, [sp, #48]	; 0x30
 8003f80:	9b07      	ldr	r3, [sp, #28]
 8003f82:	f043 0304 	orr.w	r3, r3, #4
 8003f86:	9307      	str	r3, [sp, #28]
 8003f88:	f898 3000 	ldrb.w	r3, [r8]
 8003f8c:	e792      	b.n	8003eb4 <_svfprintf_r+0xb4>
 8003f8e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003f90:	46ab      	mov	fp, r5
 8003f92:	2100      	movs	r1, #0
 8003f94:	6804      	ldr	r4, [r0, #0]
 8003f96:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003f9a:	1d07      	adds	r7, r0, #4
 8003f9c:	9807      	ldr	r0, [sp, #28]
 8003f9e:	2330      	movs	r3, #48	; 0x30
 8003fa0:	2278      	movs	r2, #120	; 0x78
 8003fa2:	458b      	cmp	fp, r1
 8003fa4:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8003fa8:	f04f 0500 	mov.w	r5, #0
 8003fac:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8003fb0:	f040 0302 	orr.w	r3, r0, #2
 8003fb4:	f2c0 83d6 	blt.w	8004764 <_svfprintf_r+0x964>
 8003fb8:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8003fbc:	f043 0302 	orr.w	r3, r3, #2
 8003fc0:	9307      	str	r3, [sp, #28]
 8003fc2:	ea54 0305 	orrs.w	r3, r4, r5
 8003fc6:	970e      	str	r7, [sp, #56]	; 0x38
 8003fc8:	f000 83a2 	beq.w	8004710 <_svfprintf_r+0x910>
 8003fcc:	460f      	mov	r7, r1
 8003fce:	9211      	str	r2, [sp, #68]	; 0x44
 8003fd0:	483f      	ldr	r0, [pc, #252]	; (80040d0 <_svfprintf_r+0x2d0>)
 8003fd2:	e2e6      	b.n	80045a2 <_svfprintf_r+0x7a2>
 8003fd4:	aa27      	add	r2, sp, #156	; 0x9c
 8003fd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003fda:	f005 fc27 	bl	800982c <__ssprint_r>
 8003fde:	b948      	cbnz	r0, 8003ff4 <_svfprintf_r+0x1f4>
 8003fe0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003fe4:	e752      	b.n	8003e8c <_svfprintf_r+0x8c>
 8003fe6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003fe8:	b123      	cbz	r3, 8003ff4 <_svfprintf_r+0x1f4>
 8003fea:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fee:	aa27      	add	r2, sp, #156	; 0x9c
 8003ff0:	f005 fc1c 	bl	800982c <__ssprint_r>
 8003ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ff6:	899b      	ldrh	r3, [r3, #12]
 8003ff8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003ffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ffe:	bf18      	it	ne
 8004000:	f04f 33ff 	movne.w	r3, #4294967295
 8004004:	4618      	mov	r0, r3
 8004006:	b045      	add	sp, #276	; 0x114
 8004008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800400c:	9311      	str	r3, [sp, #68]	; 0x44
 800400e:	46ab      	mov	fp, r5
 8004010:	2a00      	cmp	r2, #0
 8004012:	f041 823b 	bne.w	800548c <_svfprintf_r+0x168c>
 8004016:	9a07      	ldr	r2, [sp, #28]
 8004018:	f012 0320 	ands.w	r3, r2, #32
 800401c:	f000 8246 	beq.w	80044ac <_svfprintf_r+0x6ac>
 8004020:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004022:	3707      	adds	r7, #7
 8004024:	f027 0307 	bic.w	r3, r7, #7
 8004028:	2700      	movs	r7, #0
 800402a:	f103 0108 	add.w	r1, r3, #8
 800402e:	45bb      	cmp	fp, r7
 8004030:	910e      	str	r1, [sp, #56]	; 0x38
 8004032:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004036:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800403a:	f2c0 8764 	blt.w	8004f06 <_svfprintf_r+0x1106>
 800403e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004042:	9307      	str	r3, [sp, #28]
 8004044:	ea54 0305 	orrs.w	r3, r4, r5
 8004048:	f000 8384 	beq.w	8004754 <_svfprintf_r+0x954>
 800404c:	ae34      	add	r6, sp, #208	; 0xd0
 800404e:	08e2      	lsrs	r2, r4, #3
 8004050:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8004054:	08e9      	lsrs	r1, r5, #3
 8004056:	f004 0307 	and.w	r3, r4, #7
 800405a:	460d      	mov	r5, r1
 800405c:	4614      	mov	r4, r2
 800405e:	3330      	adds	r3, #48	; 0x30
 8004060:	ea54 0205 	orrs.w	r2, r4, r5
 8004064:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8004068:	d1f1      	bne.n	800404e <_svfprintf_r+0x24e>
 800406a:	9a07      	ldr	r2, [sp, #28]
 800406c:	07d1      	lsls	r1, r2, #31
 800406e:	f140 808f 	bpl.w	8004190 <_svfprintf_r+0x390>
 8004072:	2b30      	cmp	r3, #48	; 0x30
 8004074:	f000 808c 	beq.w	8004190 <_svfprintf_r+0x390>
 8004078:	2230      	movs	r2, #48	; 0x30
 800407a:	1e73      	subs	r3, r6, #1
 800407c:	f806 2c01 	strb.w	r2, [r6, #-1]
 8004080:	aa34      	add	r2, sp, #208	; 0xd0
 8004082:	1ad2      	subs	r2, r2, r3
 8004084:	920d      	str	r2, [sp, #52]	; 0x34
 8004086:	461e      	mov	r6, r3
 8004088:	e085      	b.n	8004196 <_svfprintf_r+0x396>
 800408a:	f898 3000 	ldrb.w	r3, [r8]
 800408e:	2b2a      	cmp	r3, #42	; 0x2a
 8004090:	f108 0401 	add.w	r4, r8, #1
 8004094:	f001 81ec 	beq.w	8005470 <_svfprintf_r+0x1670>
 8004098:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800409c:	2809      	cmp	r0, #9
 800409e:	bf98      	it	ls
 80040a0:	2500      	movls	r5, #0
 80040a2:	f201 818e 	bhi.w	80053c2 <_svfprintf_r+0x15c2>
 80040a6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80040aa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80040ae:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80040b2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80040b6:	2809      	cmp	r0, #9
 80040b8:	d9f5      	bls.n	80040a6 <_svfprintf_r+0x2a6>
 80040ba:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80040be:	46a0      	mov	r8, r4
 80040c0:	e6fa      	b.n	8003eb8 <_svfprintf_r+0xb8>
 80040c2:	bf00      	nop
 80040c4:	f3af 8000 	nop.w
	...
 80040d0:	0800a368 	.word	0x0800a368
 80040d4:	0800a334 	.word	0x0800a334
 80040d8:	9b07      	ldr	r3, [sp, #28]
 80040da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040de:	9307      	str	r3, [sp, #28]
 80040e0:	f898 3000 	ldrb.w	r3, [r8]
 80040e4:	e6e6      	b.n	8003eb4 <_svfprintf_r+0xb4>
 80040e6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80040ea:	2300      	movs	r3, #0
 80040ec:	461c      	mov	r4, r3
 80040ee:	f818 3b01 	ldrb.w	r3, [r8], #1
 80040f2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80040f6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80040fa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80040fe:	2809      	cmp	r0, #9
 8004100:	d9f5      	bls.n	80040ee <_svfprintf_r+0x2ee>
 8004102:	940c      	str	r4, [sp, #48]	; 0x30
 8004104:	e6d8      	b.n	8003eb8 <_svfprintf_r+0xb8>
 8004106:	9311      	str	r3, [sp, #68]	; 0x44
 8004108:	46ab      	mov	fp, r5
 800410a:	2a00      	cmp	r2, #0
 800410c:	f041 81cc 	bne.w	80054a8 <_svfprintf_r+0x16a8>
 8004110:	9b07      	ldr	r3, [sp, #28]
 8004112:	f043 0310 	orr.w	r3, r3, #16
 8004116:	9307      	str	r3, [sp, #28]
 8004118:	9b07      	ldr	r3, [sp, #28]
 800411a:	069c      	lsls	r4, r3, #26
 800411c:	f140 8537 	bpl.w	8004b8e <_svfprintf_r+0xd8e>
 8004120:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004122:	3707      	adds	r7, #7
 8004124:	f027 0707 	bic.w	r7, r7, #7
 8004128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800412c:	f107 0108 	add.w	r1, r7, #8
 8004130:	910e      	str	r1, [sp, #56]	; 0x38
 8004132:	4614      	mov	r4, r2
 8004134:	461d      	mov	r5, r3
 8004136:	2a00      	cmp	r2, #0
 8004138:	f173 0300 	sbcs.w	r3, r3, #0
 800413c:	f2c0 8562 	blt.w	8004c04 <_svfprintf_r+0xe04>
 8004140:	f1bb 0f00 	cmp.w	fp, #0
 8004144:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004148:	f2c0 853f 	blt.w	8004bca <_svfprintf_r+0xdca>
 800414c:	9b07      	ldr	r3, [sp, #28]
 800414e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004152:	9307      	str	r3, [sp, #28]
 8004154:	ea54 0305 	orrs.w	r3, r4, r5
 8004158:	f000 81e8 	beq.w	800452c <_svfprintf_r+0x72c>
 800415c:	2d00      	cmp	r5, #0
 800415e:	bf08      	it	eq
 8004160:	2c0a      	cmpeq	r4, #10
 8004162:	f0c0 81e8 	bcc.w	8004536 <_svfprintf_r+0x736>
 8004166:	ae34      	add	r6, sp, #208	; 0xd0
 8004168:	4620      	mov	r0, r4
 800416a:	4629      	mov	r1, r5
 800416c:	220a      	movs	r2, #10
 800416e:	2300      	movs	r3, #0
 8004170:	f005 fe24 	bl	8009dbc <__aeabi_uldivmod>
 8004174:	3230      	adds	r2, #48	; 0x30
 8004176:	f806 2d01 	strb.w	r2, [r6, #-1]!
 800417a:	4620      	mov	r0, r4
 800417c:	4629      	mov	r1, r5
 800417e:	2300      	movs	r3, #0
 8004180:	220a      	movs	r2, #10
 8004182:	f005 fe1b 	bl	8009dbc <__aeabi_uldivmod>
 8004186:	4604      	mov	r4, r0
 8004188:	460d      	mov	r5, r1
 800418a:	ea54 0305 	orrs.w	r3, r4, r5
 800418e:	d1eb      	bne.n	8004168 <_svfprintf_r+0x368>
 8004190:	ab34      	add	r3, sp, #208	; 0xd0
 8004192:	1b9b      	subs	r3, r3, r6
 8004194:	930d      	str	r3, [sp, #52]	; 0x34
 8004196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004198:	455b      	cmp	r3, fp
 800419a:	bfb8      	it	lt
 800419c:	465b      	movlt	r3, fp
 800419e:	9308      	str	r3, [sp, #32]
 80041a0:	2300      	movs	r3, #0
 80041a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80041a4:	b117      	cbz	r7, 80041ac <_svfprintf_r+0x3ac>
 80041a6:	9b08      	ldr	r3, [sp, #32]
 80041a8:	3301      	adds	r3, #1
 80041aa:	9308      	str	r3, [sp, #32]
 80041ac:	9b07      	ldr	r3, [sp, #28]
 80041ae:	f013 0302 	ands.w	r3, r3, #2
 80041b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80041b4:	d002      	beq.n	80041bc <_svfprintf_r+0x3bc>
 80041b6:	9b08      	ldr	r3, [sp, #32]
 80041b8:	3302      	adds	r3, #2
 80041ba:	9308      	str	r3, [sp, #32]
 80041bc:	9b07      	ldr	r3, [sp, #28]
 80041be:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80041c2:	9310      	str	r3, [sp, #64]	; 0x40
 80041c4:	f040 82db 	bne.w	800477e <_svfprintf_r+0x97e>
 80041c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041ca:	9a08      	ldr	r2, [sp, #32]
 80041cc:	1a9d      	subs	r5, r3, r2
 80041ce:	2d00      	cmp	r5, #0
 80041d0:	f340 82d5 	ble.w	800477e <_svfprintf_r+0x97e>
 80041d4:	2d10      	cmp	r5, #16
 80041d6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80041d8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80041da:	4fa8      	ldr	r7, [pc, #672]	; (800447c <_svfprintf_r+0x67c>)
 80041dc:	dd27      	ble.n	800422e <_svfprintf_r+0x42e>
 80041de:	9618      	str	r6, [sp, #96]	; 0x60
 80041e0:	4648      	mov	r0, r9
 80041e2:	2410      	movs	r4, #16
 80041e4:	46b9      	mov	r9, r7
 80041e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80041e8:	462f      	mov	r7, r5
 80041ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80041ec:	e004      	b.n	80041f8 <_svfprintf_r+0x3f8>
 80041ee:	3f10      	subs	r7, #16
 80041f0:	2f10      	cmp	r7, #16
 80041f2:	f100 0008 	add.w	r0, r0, #8
 80041f6:	dd16      	ble.n	8004226 <_svfprintf_r+0x426>
 80041f8:	3201      	adds	r2, #1
 80041fa:	4ba0      	ldr	r3, [pc, #640]	; (800447c <_svfprintf_r+0x67c>)
 80041fc:	9228      	str	r2, [sp, #160]	; 0xa0
 80041fe:	3110      	adds	r1, #16
 8004200:	2a07      	cmp	r2, #7
 8004202:	9129      	str	r1, [sp, #164]	; 0xa4
 8004204:	e880 0018 	stmia.w	r0, {r3, r4}
 8004208:	ddf1      	ble.n	80041ee <_svfprintf_r+0x3ee>
 800420a:	aa27      	add	r2, sp, #156	; 0x9c
 800420c:	4631      	mov	r1, r6
 800420e:	4628      	mov	r0, r5
 8004210:	f005 fb0c 	bl	800982c <__ssprint_r>
 8004214:	2800      	cmp	r0, #0
 8004216:	f47f aeed 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 800421a:	3f10      	subs	r7, #16
 800421c:	2f10      	cmp	r7, #16
 800421e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004220:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004222:	a834      	add	r0, sp, #208	; 0xd0
 8004224:	dce8      	bgt.n	80041f8 <_svfprintf_r+0x3f8>
 8004226:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8004228:	463d      	mov	r5, r7
 800422a:	464f      	mov	r7, r9
 800422c:	4681      	mov	r9, r0
 800422e:	3201      	adds	r2, #1
 8004230:	186c      	adds	r4, r5, r1
 8004232:	2a07      	cmp	r2, #7
 8004234:	9429      	str	r4, [sp, #164]	; 0xa4
 8004236:	9228      	str	r2, [sp, #160]	; 0xa0
 8004238:	f8c9 7000 	str.w	r7, [r9]
 800423c:	f8c9 5004 	str.w	r5, [r9, #4]
 8004240:	f300 842d 	bgt.w	8004a9e <_svfprintf_r+0xc9e>
 8004244:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004248:	f109 0908 	add.w	r9, r9, #8
 800424c:	b177      	cbz	r7, 800426c <_svfprintf_r+0x46c>
 800424e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004250:	3301      	adds	r3, #1
 8004252:	3401      	adds	r4, #1
 8004254:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8004258:	2201      	movs	r2, #1
 800425a:	2b07      	cmp	r3, #7
 800425c:	9429      	str	r4, [sp, #164]	; 0xa4
 800425e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004260:	e889 0006 	stmia.w	r9, {r1, r2}
 8004264:	f300 83a5 	bgt.w	80049b2 <_svfprintf_r+0xbb2>
 8004268:	f109 0908 	add.w	r9, r9, #8
 800426c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800426e:	b16b      	cbz	r3, 800428c <_svfprintf_r+0x48c>
 8004270:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004272:	3301      	adds	r3, #1
 8004274:	3402      	adds	r4, #2
 8004276:	a920      	add	r1, sp, #128	; 0x80
 8004278:	2202      	movs	r2, #2
 800427a:	2b07      	cmp	r3, #7
 800427c:	9429      	str	r4, [sp, #164]	; 0xa4
 800427e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004280:	e889 0006 	stmia.w	r9, {r1, r2}
 8004284:	f300 83a1 	bgt.w	80049ca <_svfprintf_r+0xbca>
 8004288:	f109 0908 	add.w	r9, r9, #8
 800428c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800428e:	2b80      	cmp	r3, #128	; 0x80
 8004290:	f000 82e1 	beq.w	8004856 <_svfprintf_r+0xa56>
 8004294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004296:	ebc3 070b 	rsb	r7, r3, fp
 800429a:	2f00      	cmp	r7, #0
 800429c:	dd33      	ble.n	8004306 <_svfprintf_r+0x506>
 800429e:	4a78      	ldr	r2, [pc, #480]	; (8004480 <_svfprintf_r+0x680>)
 80042a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80042a2:	920f      	str	r2, [sp, #60]	; 0x3c
 80042a4:	2f10      	cmp	r7, #16
 80042a6:	dd22      	ble.n	80042ee <_svfprintf_r+0x4ee>
 80042a8:	4622      	mov	r2, r4
 80042aa:	f04f 0b10 	mov.w	fp, #16
 80042ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80042b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80042b2:	e004      	b.n	80042be <_svfprintf_r+0x4be>
 80042b4:	3f10      	subs	r7, #16
 80042b6:	2f10      	cmp	r7, #16
 80042b8:	f109 0908 	add.w	r9, r9, #8
 80042bc:	dd16      	ble.n	80042ec <_svfprintf_r+0x4ec>
 80042be:	3301      	adds	r3, #1
 80042c0:	3210      	adds	r2, #16
 80042c2:	2b07      	cmp	r3, #7
 80042c4:	9229      	str	r2, [sp, #164]	; 0xa4
 80042c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80042c8:	e889 0c00 	stmia.w	r9, {sl, fp}
 80042cc:	ddf2      	ble.n	80042b4 <_svfprintf_r+0x4b4>
 80042ce:	aa27      	add	r2, sp, #156	; 0x9c
 80042d0:	4621      	mov	r1, r4
 80042d2:	4628      	mov	r0, r5
 80042d4:	f005 faaa 	bl	800982c <__ssprint_r>
 80042d8:	2800      	cmp	r0, #0
 80042da:	f47f ae8b 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 80042de:	3f10      	subs	r7, #16
 80042e0:	2f10      	cmp	r7, #16
 80042e2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80042e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80042e6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80042ea:	dce8      	bgt.n	80042be <_svfprintf_r+0x4be>
 80042ec:	4614      	mov	r4, r2
 80042ee:	3301      	adds	r3, #1
 80042f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80042f2:	9328      	str	r3, [sp, #160]	; 0xa0
 80042f4:	443c      	add	r4, r7
 80042f6:	2b07      	cmp	r3, #7
 80042f8:	9429      	str	r4, [sp, #164]	; 0xa4
 80042fa:	e889 0084 	stmia.w	r9, {r2, r7}
 80042fe:	f300 834c 	bgt.w	800499a <_svfprintf_r+0xb9a>
 8004302:	f109 0908 	add.w	r9, r9, #8
 8004306:	9b07      	ldr	r3, [sp, #28]
 8004308:	05da      	lsls	r2, r3, #23
 800430a:	f100 823a 	bmi.w	8004782 <_svfprintf_r+0x982>
 800430e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004310:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004312:	f8c9 6000 	str.w	r6, [r9]
 8004316:	3301      	adds	r3, #1
 8004318:	440c      	add	r4, r1
 800431a:	2b07      	cmp	r3, #7
 800431c:	9429      	str	r4, [sp, #164]	; 0xa4
 800431e:	f8c9 1004 	str.w	r1, [r9, #4]
 8004322:	9328      	str	r3, [sp, #160]	; 0xa0
 8004324:	f300 8323 	bgt.w	800496e <_svfprintf_r+0xb6e>
 8004328:	f109 0908 	add.w	r9, r9, #8
 800432c:	9b07      	ldr	r3, [sp, #28]
 800432e:	0759      	lsls	r1, r3, #29
 8004330:	d53f      	bpl.n	80043b2 <_svfprintf_r+0x5b2>
 8004332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004334:	9a08      	ldr	r2, [sp, #32]
 8004336:	1a9d      	subs	r5, r3, r2
 8004338:	2d00      	cmp	r5, #0
 800433a:	dd3a      	ble.n	80043b2 <_svfprintf_r+0x5b2>
 800433c:	2d10      	cmp	r5, #16
 800433e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004340:	4f4e      	ldr	r7, [pc, #312]	; (800447c <_svfprintf_r+0x67c>)
 8004342:	dd23      	ble.n	800438c <_svfprintf_r+0x58c>
 8004344:	4622      	mov	r2, r4
 8004346:	2610      	movs	r6, #16
 8004348:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800434c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800434e:	e004      	b.n	800435a <_svfprintf_r+0x55a>
 8004350:	3d10      	subs	r5, #16
 8004352:	2d10      	cmp	r5, #16
 8004354:	f109 0908 	add.w	r9, r9, #8
 8004358:	dd17      	ble.n	800438a <_svfprintf_r+0x58a>
 800435a:	3301      	adds	r3, #1
 800435c:	4947      	ldr	r1, [pc, #284]	; (800447c <_svfprintf_r+0x67c>)
 800435e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004360:	3210      	adds	r2, #16
 8004362:	2b07      	cmp	r3, #7
 8004364:	9229      	str	r2, [sp, #164]	; 0xa4
 8004366:	e889 0042 	stmia.w	r9, {r1, r6}
 800436a:	ddf1      	ble.n	8004350 <_svfprintf_r+0x550>
 800436c:	aa27      	add	r2, sp, #156	; 0x9c
 800436e:	4621      	mov	r1, r4
 8004370:	4658      	mov	r0, fp
 8004372:	f005 fa5b 	bl	800982c <__ssprint_r>
 8004376:	2800      	cmp	r0, #0
 8004378:	f47f ae3c 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 800437c:	3d10      	subs	r5, #16
 800437e:	2d10      	cmp	r5, #16
 8004380:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004382:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004384:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004388:	dce7      	bgt.n	800435a <_svfprintf_r+0x55a>
 800438a:	4614      	mov	r4, r2
 800438c:	3301      	adds	r3, #1
 800438e:	442c      	add	r4, r5
 8004390:	2b07      	cmp	r3, #7
 8004392:	9429      	str	r4, [sp, #164]	; 0xa4
 8004394:	9328      	str	r3, [sp, #160]	; 0xa0
 8004396:	f8c9 7000 	str.w	r7, [r9]
 800439a:	f8c9 5004 	str.w	r5, [r9, #4]
 800439e:	dd08      	ble.n	80043b2 <_svfprintf_r+0x5b2>
 80043a0:	aa27      	add	r2, sp, #156	; 0x9c
 80043a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80043a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80043a6:	f005 fa41 	bl	800982c <__ssprint_r>
 80043aa:	2800      	cmp	r0, #0
 80043ac:	f47f ae22 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 80043b0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80043b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043b6:	9908      	ldr	r1, [sp, #32]
 80043b8:	428a      	cmp	r2, r1
 80043ba:	bfac      	ite	ge
 80043bc:	189b      	addge	r3, r3, r2
 80043be:	185b      	addlt	r3, r3, r1
 80043c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80043c2:	2c00      	cmp	r4, #0
 80043c4:	f040 82df 	bne.w	8004986 <_svfprintf_r+0xb86>
 80043c8:	2300      	movs	r3, #0
 80043ca:	9328      	str	r3, [sp, #160]	; 0xa0
 80043cc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80043d0:	e53d      	b.n	8003e4e <_svfprintf_r+0x4e>
 80043d2:	9311      	str	r3, [sp, #68]	; 0x44
 80043d4:	46ab      	mov	fp, r5
 80043d6:	2a00      	cmp	r2, #0
 80043d8:	f041 806a 	bne.w	80054b0 <_svfprintf_r+0x16b0>
 80043dc:	9b07      	ldr	r3, [sp, #28]
 80043de:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80043e0:	071a      	lsls	r2, r3, #28
 80043e2:	f107 0707 	add.w	r7, r7, #7
 80043e6:	f140 8576 	bpl.w	8004ed6 <_svfprintf_r+0x10d6>
 80043ea:	f027 0307 	bic.w	r3, r7, #7
 80043ee:	ed93 7b00 	vldr	d7, [r3]
 80043f2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80043f6:	f103 0208 	add.w	r2, r3, #8
 80043fa:	920e      	str	r2, [sp, #56]	; 0x38
 80043fc:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8004400:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8004404:	911a      	str	r1, [sp, #104]	; 0x68
 8004406:	931b      	str	r3, [sp, #108]	; 0x6c
 8004408:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 800440c:	f04f 32ff 	mov.w	r2, #4294967295
 8004410:	4620      	mov	r0, r4
 8004412:	4629      	mov	r1, r5
 8004414:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <_svfprintf_r+0x684>)
 8004416:	f7ff fa55 	bl	80038c4 <__aeabi_dcmpun>
 800441a:	2800      	cmp	r0, #0
 800441c:	f040 84da 	bne.w	8004dd4 <_svfprintf_r+0xfd4>
 8004420:	f04f 32ff 	mov.w	r2, #4294967295
 8004424:	4b17      	ldr	r3, [pc, #92]	; (8004484 <_svfprintf_r+0x684>)
 8004426:	4620      	mov	r0, r4
 8004428:	4629      	mov	r1, r5
 800442a:	f7ff fa2d 	bl	8003888 <__aeabi_dcmple>
 800442e:	2800      	cmp	r0, #0
 8004430:	f040 84d0 	bne.w	8004dd4 <_svfprintf_r+0xfd4>
 8004434:	2200      	movs	r2, #0
 8004436:	2300      	movs	r3, #0
 8004438:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800443c:	f7ff fa1a 	bl	8003874 <__aeabi_dcmplt>
 8004440:	2800      	cmp	r0, #0
 8004442:	f040 875a 	bne.w	80052fa <_svfprintf_r+0x14fa>
 8004446:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800444a:	4e0f      	ldr	r6, [pc, #60]	; (8004488 <_svfprintf_r+0x688>)
 800444c:	4b0f      	ldr	r3, [pc, #60]	; (800448c <_svfprintf_r+0x68c>)
 800444e:	9907      	ldr	r1, [sp, #28]
 8004450:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004454:	9107      	str	r1, [sp, #28]
 8004456:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004458:	2203      	movs	r2, #3
 800445a:	f04f 0b00 	mov.w	fp, #0
 800445e:	9208      	str	r2, [sp, #32]
 8004460:	2947      	cmp	r1, #71	; 0x47
 8004462:	bfd8      	it	le
 8004464:	461e      	movle	r6, r3
 8004466:	920d      	str	r2, [sp, #52]	; 0x34
 8004468:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800446c:	e69a      	b.n	80041a4 <_svfprintf_r+0x3a4>
 800446e:	9b07      	ldr	r3, [sp, #28]
 8004470:	f043 0308 	orr.w	r3, r3, #8
 8004474:	9307      	str	r3, [sp, #28]
 8004476:	f898 3000 	ldrb.w	r3, [r8]
 800447a:	e51b      	b.n	8003eb4 <_svfprintf_r+0xb4>
 800447c:	0800a388 	.word	0x0800a388
 8004480:	0800a334 	.word	0x0800a334
 8004484:	7fefffff 	.word	0x7fefffff
 8004488:	0800a348 	.word	0x0800a348
 800448c:	0800a344 	.word	0x0800a344
 8004490:	9311      	str	r3, [sp, #68]	; 0x44
 8004492:	46ab      	mov	fp, r5
 8004494:	2a00      	cmp	r2, #0
 8004496:	f041 8017 	bne.w	80054c8 <_svfprintf_r+0x16c8>
 800449a:	9b07      	ldr	r3, [sp, #28]
 800449c:	f043 0310 	orr.w	r3, r3, #16
 80044a0:	9307      	str	r3, [sp, #28]
 80044a2:	9a07      	ldr	r2, [sp, #28]
 80044a4:	f012 0320 	ands.w	r3, r2, #32
 80044a8:	f47f adba 	bne.w	8004020 <_svfprintf_r+0x220>
 80044ac:	9907      	ldr	r1, [sp, #28]
 80044ae:	f011 0210 	ands.w	r2, r1, #16
 80044b2:	f000 845b 	beq.w	8004d6c <_svfprintf_r+0xf6c>
 80044b6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80044b8:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80044bc:	f1bb 0f00 	cmp.w	fp, #0
 80044c0:	6804      	ldr	r4, [r0, #0]
 80044c2:	f100 0704 	add.w	r7, r0, #4
 80044c6:	f04f 0500 	mov.w	r5, #0
 80044ca:	f2c0 851b 	blt.w	8004f04 <_svfprintf_r+0x1104>
 80044ce:	460a      	mov	r2, r1
 80044d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044d4:	9207      	str	r2, [sp, #28]
 80044d6:	ea54 0205 	orrs.w	r2, r4, r5
 80044da:	970e      	str	r7, [sp, #56]	; 0x38
 80044dc:	f000 813a 	beq.w	8004754 <_svfprintf_r+0x954>
 80044e0:	461f      	mov	r7, r3
 80044e2:	e5b3      	b.n	800404c <_svfprintf_r+0x24c>
 80044e4:	9311      	str	r3, [sp, #68]	; 0x44
 80044e6:	46ab      	mov	fp, r5
 80044e8:	2a00      	cmp	r2, #0
 80044ea:	f040 87e9 	bne.w	80054c0 <_svfprintf_r+0x16c0>
 80044ee:	9b07      	ldr	r3, [sp, #28]
 80044f0:	f043 0310 	orr.w	r3, r3, #16
 80044f4:	9307      	str	r3, [sp, #28]
 80044f6:	9a07      	ldr	r2, [sp, #28]
 80044f8:	f012 0320 	ands.w	r3, r2, #32
 80044fc:	f000 832c 	beq.w	8004b58 <_svfprintf_r+0xd58>
 8004500:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004502:	3707      	adds	r7, #7
 8004504:	f027 0307 	bic.w	r3, r7, #7
 8004508:	2700      	movs	r7, #0
 800450a:	f103 0108 	add.w	r1, r3, #8
 800450e:	45bb      	cmp	fp, r7
 8004510:	910e      	str	r1, [sp, #56]	; 0x38
 8004512:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004516:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800451a:	f2c0 8356 	blt.w	8004bca <_svfprintf_r+0xdca>
 800451e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004522:	9307      	str	r3, [sp, #28]
 8004524:	ea54 0305 	orrs.w	r3, r4, r5
 8004528:	f47f ae18 	bne.w	800415c <_svfprintf_r+0x35c>
 800452c:	f1bb 0f00 	cmp.w	fp, #0
 8004530:	f000 80f5 	beq.w	800471e <_svfprintf_r+0x91e>
 8004534:	2400      	movs	r4, #0
 8004536:	ae44      	add	r6, sp, #272	; 0x110
 8004538:	3430      	adds	r4, #48	; 0x30
 800453a:	f806 4d41 	strb.w	r4, [r6, #-65]!
 800453e:	e627      	b.n	8004190 <_svfprintf_r+0x390>
 8004540:	9311      	str	r3, [sp, #68]	; 0x44
 8004542:	46ab      	mov	fp, r5
 8004544:	2a00      	cmp	r2, #0
 8004546:	f040 87b7 	bne.w	80054b8 <_svfprintf_r+0x16b8>
 800454a:	9b07      	ldr	r3, [sp, #28]
 800454c:	48af      	ldr	r0, [pc, #700]	; (800480c <_svfprintf_r+0xa0c>)
 800454e:	069d      	lsls	r5, r3, #26
 8004550:	f140 80b5 	bpl.w	80046be <_svfprintf_r+0x8be>
 8004554:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004556:	3707      	adds	r7, #7
 8004558:	f027 0307 	bic.w	r3, r7, #7
 800455c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004560:	f103 0208 	add.w	r2, r3, #8
 8004564:	920e      	str	r2, [sp, #56]	; 0x38
 8004566:	9a07      	ldr	r2, [sp, #28]
 8004568:	f012 0701 	ands.w	r7, r2, #1
 800456c:	f000 8239 	beq.w	80049e2 <_svfprintf_r+0xbe2>
 8004570:	ea54 0305 	orrs.w	r3, r4, r5
 8004574:	f000 8504 	beq.w	8004f80 <_svfprintf_r+0x1180>
 8004578:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800457c:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8004580:	2700      	movs	r7, #0
 8004582:	9a07      	ldr	r2, [sp, #28]
 8004584:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004588:	2330      	movs	r3, #48	; 0x30
 800458a:	45bb      	cmp	fp, r7
 800458c:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8004590:	f042 0302 	orr.w	r3, r2, #2
 8004594:	f2c0 86b6 	blt.w	8005304 <_svfprintf_r+0x1504>
 8004598:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800459c:	f043 0302 	orr.w	r3, r3, #2
 80045a0:	9307      	str	r3, [sp, #28]
 80045a2:	ae34      	add	r6, sp, #208	; 0xd0
 80045a4:	0923      	lsrs	r3, r4, #4
 80045a6:	f004 010f 	and.w	r1, r4, #15
 80045aa:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80045ae:	092a      	lsrs	r2, r5, #4
 80045b0:	461c      	mov	r4, r3
 80045b2:	4615      	mov	r5, r2
 80045b4:	5c43      	ldrb	r3, [r0, r1]
 80045b6:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80045ba:	ea54 0305 	orrs.w	r3, r4, r5
 80045be:	d1f1      	bne.n	80045a4 <_svfprintf_r+0x7a4>
 80045c0:	e5e6      	b.n	8004190 <_svfprintf_r+0x390>
 80045c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80045c4:	9311      	str	r3, [sp, #68]	; 0x44
 80045c6:	680a      	ldr	r2, [r1, #0]
 80045c8:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 80045cc:	2300      	movs	r3, #0
 80045ce:	460a      	mov	r2, r1
 80045d0:	461f      	mov	r7, r3
 80045d2:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80045d6:	3204      	adds	r2, #4
 80045d8:	2301      	movs	r3, #1
 80045da:	9308      	str	r3, [sp, #32]
 80045dc:	46bb      	mov	fp, r7
 80045de:	9713      	str	r7, [sp, #76]	; 0x4c
 80045e0:	920e      	str	r2, [sp, #56]	; 0x38
 80045e2:	930d      	str	r3, [sp, #52]	; 0x34
 80045e4:	ae2a      	add	r6, sp, #168	; 0xa8
 80045e6:	e5e1      	b.n	80041ac <_svfprintf_r+0x3ac>
 80045e8:	9311      	str	r3, [sp, #68]	; 0x44
 80045ea:	46ab      	mov	fp, r5
 80045ec:	2a00      	cmp	r2, #0
 80045ee:	f43f ad93 	beq.w	8004118 <_svfprintf_r+0x318>
 80045f2:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80045f6:	e58f      	b.n	8004118 <_svfprintf_r+0x318>
 80045f8:	9b07      	ldr	r3, [sp, #28]
 80045fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045fe:	9307      	str	r3, [sp, #28]
 8004600:	f898 3000 	ldrb.w	r3, [r8]
 8004604:	e456      	b.n	8003eb4 <_svfprintf_r+0xb4>
 8004606:	f898 3000 	ldrb.w	r3, [r8]
 800460a:	2900      	cmp	r1, #0
 800460c:	f47f ac52 	bne.w	8003eb4 <_svfprintf_r+0xb4>
 8004610:	2201      	movs	r2, #1
 8004612:	2120      	movs	r1, #32
 8004614:	e44e      	b.n	8003eb4 <_svfprintf_r+0xb4>
 8004616:	9b07      	ldr	r3, [sp, #28]
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	9307      	str	r3, [sp, #28]
 800461e:	f898 3000 	ldrb.w	r3, [r8]
 8004622:	e447      	b.n	8003eb4 <_svfprintf_r+0xb4>
 8004624:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	930c      	str	r3, [sp, #48]	; 0x30
 800462a:	4618      	mov	r0, r3
 800462c:	2800      	cmp	r0, #0
 800462e:	4623      	mov	r3, r4
 8004630:	f103 0304 	add.w	r3, r3, #4
 8004634:	f6ff aca0 	blt.w	8003f78 <_svfprintf_r+0x178>
 8004638:	930e      	str	r3, [sp, #56]	; 0x38
 800463a:	f898 3000 	ldrb.w	r3, [r8]
 800463e:	e439      	b.n	8003eb4 <_svfprintf_r+0xb4>
 8004640:	f898 3000 	ldrb.w	r3, [r8]
 8004644:	2201      	movs	r2, #1
 8004646:	212b      	movs	r1, #43	; 0x2b
 8004648:	e434      	b.n	8003eb4 <_svfprintf_r+0xb4>
 800464a:	9b07      	ldr	r3, [sp, #28]
 800464c:	f043 0320 	orr.w	r3, r3, #32
 8004650:	9307      	str	r3, [sp, #28]
 8004652:	f898 3000 	ldrb.w	r3, [r8]
 8004656:	e42d      	b.n	8003eb4 <_svfprintf_r+0xb4>
 8004658:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800465a:	9311      	str	r3, [sp, #68]	; 0x44
 800465c:	6816      	ldr	r6, [r2, #0]
 800465e:	2400      	movs	r4, #0
 8004660:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 8004664:	1d17      	adds	r7, r2, #4
 8004666:	2e00      	cmp	r6, #0
 8004668:	f000 8621 	beq.w	80052ae <_svfprintf_r+0x14ae>
 800466c:	2d00      	cmp	r5, #0
 800466e:	f2c0 8566 	blt.w	800513e <_svfprintf_r+0x133e>
 8004672:	462a      	mov	r2, r5
 8004674:	4621      	mov	r1, r4
 8004676:	4630      	mov	r0, r6
 8004678:	f004 faca 	bl	8008c10 <memchr>
 800467c:	2800      	cmp	r0, #0
 800467e:	f000 866b 	beq.w	8005358 <_svfprintf_r+0x1558>
 8004682:	1b83      	subs	r3, r0, r6
 8004684:	930d      	str	r3, [sp, #52]	; 0x34
 8004686:	46a3      	mov	fp, r4
 8004688:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800468c:	970e      	str	r7, [sp, #56]	; 0x38
 800468e:	9308      	str	r3, [sp, #32]
 8004690:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8004694:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004698:	e584      	b.n	80041a4 <_svfprintf_r+0x3a4>
 800469a:	9311      	str	r3, [sp, #68]	; 0x44
 800469c:	46ab      	mov	fp, r5
 800469e:	2a00      	cmp	r2, #0
 80046a0:	f43f af29 	beq.w	80044f6 <_svfprintf_r+0x6f6>
 80046a4:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80046a8:	e725      	b.n	80044f6 <_svfprintf_r+0x6f6>
 80046aa:	9311      	str	r3, [sp, #68]	; 0x44
 80046ac:	46ab      	mov	fp, r5
 80046ae:	2a00      	cmp	r2, #0
 80046b0:	f040 8716 	bne.w	80054e0 <_svfprintf_r+0x16e0>
 80046b4:	9b07      	ldr	r3, [sp, #28]
 80046b6:	4856      	ldr	r0, [pc, #344]	; (8004810 <_svfprintf_r+0xa10>)
 80046b8:	069d      	lsls	r5, r3, #26
 80046ba:	f53f af4b 	bmi.w	8004554 <_svfprintf_r+0x754>
 80046be:	9b07      	ldr	r3, [sp, #28]
 80046c0:	06dc      	lsls	r4, r3, #27
 80046c2:	f140 8440 	bpl.w	8004f46 <_svfprintf_r+0x1146>
 80046c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046c8:	4613      	mov	r3, r2
 80046ca:	3304      	adds	r3, #4
 80046cc:	6814      	ldr	r4, [r2, #0]
 80046ce:	930e      	str	r3, [sp, #56]	; 0x38
 80046d0:	2500      	movs	r5, #0
 80046d2:	e748      	b.n	8004566 <_svfprintf_r+0x766>
 80046d4:	f898 3000 	ldrb.w	r3, [r8]
 80046d8:	2b6c      	cmp	r3, #108	; 0x6c
 80046da:	f000 84c4 	beq.w	8005066 <_svfprintf_r+0x1266>
 80046de:	9807      	ldr	r0, [sp, #28]
 80046e0:	f040 0010 	orr.w	r0, r0, #16
 80046e4:	9007      	str	r0, [sp, #28]
 80046e6:	f7ff bbe5 	b.w	8003eb4 <_svfprintf_r+0xb4>
 80046ea:	2a00      	cmp	r2, #0
 80046ec:	f040 86f4 	bne.w	80054d8 <_svfprintf_r+0x16d8>
 80046f0:	9b07      	ldr	r3, [sp, #28]
 80046f2:	069b      	lsls	r3, r3, #26
 80046f4:	f140 8357 	bpl.w	8004da6 <_svfprintf_r+0xfa6>
 80046f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046fc:	6813      	ldr	r3, [r2, #0]
 80046fe:	17cd      	asrs	r5, r1, #31
 8004700:	4608      	mov	r0, r1
 8004702:	3204      	adds	r2, #4
 8004704:	4629      	mov	r1, r5
 8004706:	920e      	str	r2, [sp, #56]	; 0x38
 8004708:	e9c3 0100 	strd	r0, r1, [r3]
 800470c:	f7ff bb9f 	b.w	8003e4e <_svfprintf_r+0x4e>
 8004710:	483f      	ldr	r0, [pc, #252]	; (8004810 <_svfprintf_r+0xa10>)
 8004712:	9211      	str	r2, [sp, #68]	; 0x44
 8004714:	f1bb 0f00 	cmp.w	fp, #0
 8004718:	f040 8174 	bne.w	8004a04 <_svfprintf_r+0xc04>
 800471c:	465f      	mov	r7, fp
 800471e:	f04f 0b00 	mov.w	fp, #0
 8004722:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8004726:	ae34      	add	r6, sp, #208	; 0xd0
 8004728:	e535      	b.n	8004196 <_svfprintf_r+0x396>
 800472a:	9311      	str	r3, [sp, #68]	; 0x44
 800472c:	2a00      	cmp	r2, #0
 800472e:	f040 86cf 	bne.w	80054d0 <_svfprintf_r+0x16d0>
 8004732:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004734:	2a00      	cmp	r2, #0
 8004736:	f43f ac56 	beq.w	8003fe6 <_svfprintf_r+0x1e6>
 800473a:	2300      	movs	r3, #0
 800473c:	2101      	movs	r1, #1
 800473e:	461f      	mov	r7, r3
 8004740:	9108      	str	r1, [sp, #32]
 8004742:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8004746:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800474a:	469b      	mov	fp, r3
 800474c:	9313      	str	r3, [sp, #76]	; 0x4c
 800474e:	910d      	str	r1, [sp, #52]	; 0x34
 8004750:	ae2a      	add	r6, sp, #168	; 0xa8
 8004752:	e52b      	b.n	80041ac <_svfprintf_r+0x3ac>
 8004754:	f1bb 0f00 	cmp.w	fp, #0
 8004758:	f000 8616 	beq.w	8005388 <_svfprintf_r+0x1588>
 800475c:	2700      	movs	r7, #0
 800475e:	2400      	movs	r4, #0
 8004760:	2500      	movs	r5, #0
 8004762:	e473      	b.n	800404c <_svfprintf_r+0x24c>
 8004764:	482a      	ldr	r0, [pc, #168]	; (8004810 <_svfprintf_r+0xa10>)
 8004766:	9307      	str	r3, [sp, #28]
 8004768:	9211      	str	r2, [sp, #68]	; 0x44
 800476a:	ea54 0305 	orrs.w	r3, r4, r5
 800476e:	970e      	str	r7, [sp, #56]	; 0x38
 8004770:	f04f 0700 	mov.w	r7, #0
 8004774:	f47f af15 	bne.w	80045a2 <_svfprintf_r+0x7a2>
 8004778:	2400      	movs	r4, #0
 800477a:	2500      	movs	r5, #0
 800477c:	e711      	b.n	80045a2 <_svfprintf_r+0x7a2>
 800477e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004780:	e564      	b.n	800424c <_svfprintf_r+0x44c>
 8004782:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004784:	2b65      	cmp	r3, #101	; 0x65
 8004786:	f340 80aa 	ble.w	80048de <_svfprintf_r+0xade>
 800478a:	2200      	movs	r2, #0
 800478c:	2300      	movs	r3, #0
 800478e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004792:	f7ff f865 	bl	8003860 <__aeabi_dcmpeq>
 8004796:	2800      	cmp	r0, #0
 8004798:	f000 8136 	beq.w	8004a08 <_svfprintf_r+0xc08>
 800479c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800479e:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <_svfprintf_r+0xa14>)
 80047a0:	f8c9 2000 	str.w	r2, [r9]
 80047a4:	3301      	adds	r3, #1
 80047a6:	3401      	adds	r4, #1
 80047a8:	2201      	movs	r2, #1
 80047aa:	2b07      	cmp	r3, #7
 80047ac:	9429      	str	r4, [sp, #164]	; 0xa4
 80047ae:	9328      	str	r3, [sp, #160]	; 0xa0
 80047b0:	f8c9 2004 	str.w	r2, [r9, #4]
 80047b4:	f300 83f0 	bgt.w	8004f98 <_svfprintf_r+0x1198>
 80047b8:	f109 0908 	add.w	r9, r9, #8
 80047bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80047c0:	4293      	cmp	r3, r2
 80047c2:	db03      	blt.n	80047cc <_svfprintf_r+0x9cc>
 80047c4:	9b07      	ldr	r3, [sp, #28]
 80047c6:	07db      	lsls	r3, r3, #31
 80047c8:	f57f adb0 	bpl.w	800432c <_svfprintf_r+0x52c>
 80047cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80047ce:	9916      	ldr	r1, [sp, #88]	; 0x58
 80047d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80047d2:	f8c9 2000 	str.w	r2, [r9]
 80047d6:	3301      	adds	r3, #1
 80047d8:	440c      	add	r4, r1
 80047da:	2b07      	cmp	r3, #7
 80047dc:	9429      	str	r4, [sp, #164]	; 0xa4
 80047de:	f8c9 1004 	str.w	r1, [r9, #4]
 80047e2:	9328      	str	r3, [sp, #160]	; 0xa0
 80047e4:	f300 8449 	bgt.w	800507a <_svfprintf_r+0x127a>
 80047e8:	f109 0908 	add.w	r9, r9, #8
 80047ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80047ee:	1e5d      	subs	r5, r3, #1
 80047f0:	2d00      	cmp	r5, #0
 80047f2:	f77f ad9b 	ble.w	800432c <_svfprintf_r+0x52c>
 80047f6:	4a08      	ldr	r2, [pc, #32]	; (8004818 <_svfprintf_r+0xa18>)
 80047f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80047fa:	920f      	str	r2, [sp, #60]	; 0x3c
 80047fc:	2d10      	cmp	r5, #16
 80047fe:	f340 81e9 	ble.w	8004bd4 <_svfprintf_r+0xdd4>
 8004802:	2610      	movs	r6, #16
 8004804:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004806:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800480a:	e00d      	b.n	8004828 <_svfprintf_r+0xa28>
 800480c:	0800a354 	.word	0x0800a354
 8004810:	0800a368 	.word	0x0800a368
 8004814:	0800a384 	.word	0x0800a384
 8004818:	0800a334 	.word	0x0800a334
 800481c:	f109 0908 	add.w	r9, r9, #8
 8004820:	3d10      	subs	r5, #16
 8004822:	2d10      	cmp	r5, #16
 8004824:	f340 81d6 	ble.w	8004bd4 <_svfprintf_r+0xdd4>
 8004828:	3301      	adds	r3, #1
 800482a:	3410      	adds	r4, #16
 800482c:	2b07      	cmp	r3, #7
 800482e:	9429      	str	r4, [sp, #164]	; 0xa4
 8004830:	9328      	str	r3, [sp, #160]	; 0xa0
 8004832:	f8c9 a000 	str.w	sl, [r9]
 8004836:	f8c9 6004 	str.w	r6, [r9, #4]
 800483a:	ddef      	ble.n	800481c <_svfprintf_r+0xa1c>
 800483c:	aa27      	add	r2, sp, #156	; 0x9c
 800483e:	4659      	mov	r1, fp
 8004840:	4638      	mov	r0, r7
 8004842:	f004 fff3 	bl	800982c <__ssprint_r>
 8004846:	2800      	cmp	r0, #0
 8004848:	f47f abd4 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 800484c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800484e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004850:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004854:	e7e4      	b.n	8004820 <_svfprintf_r+0xa20>
 8004856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004858:	9a08      	ldr	r2, [sp, #32]
 800485a:	1a9f      	subs	r7, r3, r2
 800485c:	2f00      	cmp	r7, #0
 800485e:	f77f ad19 	ble.w	8004294 <_svfprintf_r+0x494>
 8004862:	4abc      	ldr	r2, [pc, #752]	; (8004b54 <_svfprintf_r+0xd54>)
 8004864:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004866:	920f      	str	r2, [sp, #60]	; 0x3c
 8004868:	2f10      	cmp	r7, #16
 800486a:	dd2b      	ble.n	80048c4 <_svfprintf_r+0xac4>
 800486c:	464a      	mov	r2, r9
 800486e:	4621      	mov	r1, r4
 8004870:	46b9      	mov	r9, r7
 8004872:	2510      	movs	r5, #16
 8004874:	4637      	mov	r7, r6
 8004876:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004878:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800487a:	e006      	b.n	800488a <_svfprintf_r+0xa8a>
 800487c:	f1a9 0910 	sub.w	r9, r9, #16
 8004880:	f1b9 0f10 	cmp.w	r9, #16
 8004884:	f102 0208 	add.w	r2, r2, #8
 8004888:	dd18      	ble.n	80048bc <_svfprintf_r+0xabc>
 800488a:	3301      	adds	r3, #1
 800488c:	3110      	adds	r1, #16
 800488e:	2b07      	cmp	r3, #7
 8004890:	9129      	str	r1, [sp, #164]	; 0xa4
 8004892:	9328      	str	r3, [sp, #160]	; 0xa0
 8004894:	f8c2 a000 	str.w	sl, [r2]
 8004898:	6055      	str	r5, [r2, #4]
 800489a:	ddef      	ble.n	800487c <_svfprintf_r+0xa7c>
 800489c:	aa27      	add	r2, sp, #156	; 0x9c
 800489e:	4631      	mov	r1, r6
 80048a0:	4620      	mov	r0, r4
 80048a2:	f004 ffc3 	bl	800982c <__ssprint_r>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	f47f aba4 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 80048ac:	f1a9 0910 	sub.w	r9, r9, #16
 80048b0:	f1b9 0f10 	cmp.w	r9, #16
 80048b4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80048b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80048b8:	aa34      	add	r2, sp, #208	; 0xd0
 80048ba:	dce6      	bgt.n	800488a <_svfprintf_r+0xa8a>
 80048bc:	463e      	mov	r6, r7
 80048be:	460c      	mov	r4, r1
 80048c0:	464f      	mov	r7, r9
 80048c2:	4691      	mov	r9, r2
 80048c4:	3301      	adds	r3, #1
 80048c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048c8:	9328      	str	r3, [sp, #160]	; 0xa0
 80048ca:	443c      	add	r4, r7
 80048cc:	2b07      	cmp	r3, #7
 80048ce:	9429      	str	r4, [sp, #164]	; 0xa4
 80048d0:	e889 0084 	stmia.w	r9, {r2, r7}
 80048d4:	f300 823d 	bgt.w	8004d52 <_svfprintf_r+0xf52>
 80048d8:	f109 0908 	add.w	r9, r9, #8
 80048dc:	e4da      	b.n	8004294 <_svfprintf_r+0x494>
 80048de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048e0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	f340 820a 	ble.w	8004cfc <_svfprintf_r+0xefc>
 80048e8:	3501      	adds	r5, #1
 80048ea:	3401      	adds	r4, #1
 80048ec:	2301      	movs	r3, #1
 80048ee:	2d07      	cmp	r5, #7
 80048f0:	9429      	str	r4, [sp, #164]	; 0xa4
 80048f2:	9528      	str	r5, [sp, #160]	; 0xa0
 80048f4:	f8c9 6000 	str.w	r6, [r9]
 80048f8:	f8c9 3004 	str.w	r3, [r9, #4]
 80048fc:	f300 820f 	bgt.w	8004d1e <_svfprintf_r+0xf1e>
 8004900:	f109 0908 	add.w	r9, r9, #8
 8004904:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004906:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004908:	f8c9 3000 	str.w	r3, [r9]
 800490c:	3501      	adds	r5, #1
 800490e:	4414      	add	r4, r2
 8004910:	2d07      	cmp	r5, #7
 8004912:	9429      	str	r4, [sp, #164]	; 0xa4
 8004914:	9528      	str	r5, [sp, #160]	; 0xa0
 8004916:	f8c9 2004 	str.w	r2, [r9, #4]
 800491a:	f300 820d 	bgt.w	8004d38 <_svfprintf_r+0xf38>
 800491e:	f109 0908 	add.w	r9, r9, #8
 8004922:	2300      	movs	r3, #0
 8004924:	2200      	movs	r2, #0
 8004926:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800492a:	f7fe ff99 	bl	8003860 <__aeabi_dcmpeq>
 800492e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004930:	2800      	cmp	r0, #0
 8004932:	f040 80c3 	bne.w	8004abc <_svfprintf_r+0xcbc>
 8004936:	3b01      	subs	r3, #1
 8004938:	3501      	adds	r5, #1
 800493a:	3601      	adds	r6, #1
 800493c:	441c      	add	r4, r3
 800493e:	2d07      	cmp	r5, #7
 8004940:	9528      	str	r5, [sp, #160]	; 0xa0
 8004942:	9429      	str	r4, [sp, #164]	; 0xa4
 8004944:	f8c9 6000 	str.w	r6, [r9]
 8004948:	f8c9 3004 	str.w	r3, [r9, #4]
 800494c:	f300 80f5 	bgt.w	8004b3a <_svfprintf_r+0xd3a>
 8004950:	f109 0908 	add.w	r9, r9, #8
 8004954:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004956:	f8c9 2004 	str.w	r2, [r9, #4]
 800495a:	3501      	adds	r5, #1
 800495c:	4414      	add	r4, r2
 800495e:	ab23      	add	r3, sp, #140	; 0x8c
 8004960:	2d07      	cmp	r5, #7
 8004962:	9429      	str	r4, [sp, #164]	; 0xa4
 8004964:	9528      	str	r5, [sp, #160]	; 0xa0
 8004966:	f8c9 3000 	str.w	r3, [r9]
 800496a:	f77f acdd 	ble.w	8004328 <_svfprintf_r+0x528>
 800496e:	aa27      	add	r2, sp, #156	; 0x9c
 8004970:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004972:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004974:	f004 ff5a 	bl	800982c <__ssprint_r>
 8004978:	2800      	cmp	r0, #0
 800497a:	f47f ab3b 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 800497e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004980:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004984:	e4d2      	b.n	800432c <_svfprintf_r+0x52c>
 8004986:	aa27      	add	r2, sp, #156	; 0x9c
 8004988:	9909      	ldr	r1, [sp, #36]	; 0x24
 800498a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800498c:	f004 ff4e 	bl	800982c <__ssprint_r>
 8004990:	2800      	cmp	r0, #0
 8004992:	f43f ad19 	beq.w	80043c8 <_svfprintf_r+0x5c8>
 8004996:	f7ff bb2d 	b.w	8003ff4 <_svfprintf_r+0x1f4>
 800499a:	aa27      	add	r2, sp, #156	; 0x9c
 800499c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800499e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80049a0:	f004 ff44 	bl	800982c <__ssprint_r>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	f47f ab25 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 80049aa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80049ac:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80049b0:	e4a9      	b.n	8004306 <_svfprintf_r+0x506>
 80049b2:	aa27      	add	r2, sp, #156	; 0x9c
 80049b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80049b8:	f004 ff38 	bl	800982c <__ssprint_r>
 80049bc:	2800      	cmp	r0, #0
 80049be:	f47f ab19 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 80049c2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80049c4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80049c8:	e450      	b.n	800426c <_svfprintf_r+0x46c>
 80049ca:	aa27      	add	r2, sp, #156	; 0x9c
 80049cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80049d0:	f004 ff2c 	bl	800982c <__ssprint_r>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	f47f ab0d 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 80049da:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80049dc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80049e0:	e454      	b.n	800428c <_svfprintf_r+0x48c>
 80049e2:	f1bb 0f00 	cmp.w	fp, #0
 80049e6:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80049ea:	f2c0 82e1 	blt.w	8004fb0 <_svfprintf_r+0x11b0>
 80049ee:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80049f2:	9307      	str	r3, [sp, #28]
 80049f4:	ea54 0305 	orrs.w	r3, r4, r5
 80049f8:	f47f add3 	bne.w	80045a2 <_svfprintf_r+0x7a2>
 80049fc:	f1bb 0f00 	cmp.w	fp, #0
 8004a00:	f43f ae8c 	beq.w	800471c <_svfprintf_r+0x91c>
 8004a04:	2700      	movs	r7, #0
 8004a06:	e6b7      	b.n	8004778 <_svfprintf_r+0x978>
 8004a08:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8004a0a:	2d00      	cmp	r5, #0
 8004a0c:	f340 82d3 	ble.w	8004fb6 <_svfprintf_r+0x11b6>
 8004a10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004a12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a14:	4293      	cmp	r3, r2
 8004a16:	bfa8      	it	ge
 8004a18:	4613      	movge	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	461d      	mov	r5, r3
 8004a1e:	dd0d      	ble.n	8004a3c <_svfprintf_r+0xc3c>
 8004a20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004a22:	f8c9 6000 	str.w	r6, [r9]
 8004a26:	3301      	adds	r3, #1
 8004a28:	442c      	add	r4, r5
 8004a2a:	2b07      	cmp	r3, #7
 8004a2c:	9429      	str	r4, [sp, #164]	; 0xa4
 8004a2e:	f8c9 5004 	str.w	r5, [r9, #4]
 8004a32:	9328      	str	r3, [sp, #160]	; 0xa0
 8004a34:	f300 83ae 	bgt.w	8005194 <_svfprintf_r+0x1394>
 8004a38:	f109 0908 	add.w	r9, r9, #8
 8004a3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004a3e:	2d00      	cmp	r5, #0
 8004a40:	bfa8      	it	ge
 8004a42:	1b5b      	subge	r3, r3, r5
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	461d      	mov	r5, r3
 8004a48:	f340 80f8 	ble.w	8004c3c <_svfprintf_r+0xe3c>
 8004a4c:	4a41      	ldr	r2, [pc, #260]	; (8004b54 <_svfprintf_r+0xd54>)
 8004a4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004a50:	920f      	str	r2, [sp, #60]	; 0x3c
 8004a52:	2d10      	cmp	r5, #16
 8004a54:	f340 8285 	ble.w	8004f62 <_svfprintf_r+0x1162>
 8004a58:	4622      	mov	r2, r4
 8004a5a:	2710      	movs	r7, #16
 8004a5c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004a60:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004a62:	e005      	b.n	8004a70 <_svfprintf_r+0xc70>
 8004a64:	f109 0908 	add.w	r9, r9, #8
 8004a68:	3d10      	subs	r5, #16
 8004a6a:	2d10      	cmp	r5, #16
 8004a6c:	f340 8278 	ble.w	8004f60 <_svfprintf_r+0x1160>
 8004a70:	3301      	adds	r3, #1
 8004a72:	3210      	adds	r2, #16
 8004a74:	2b07      	cmp	r3, #7
 8004a76:	9229      	str	r2, [sp, #164]	; 0xa4
 8004a78:	9328      	str	r3, [sp, #160]	; 0xa0
 8004a7a:	f8c9 a000 	str.w	sl, [r9]
 8004a7e:	f8c9 7004 	str.w	r7, [r9, #4]
 8004a82:	ddef      	ble.n	8004a64 <_svfprintf_r+0xc64>
 8004a84:	aa27      	add	r2, sp, #156	; 0x9c
 8004a86:	4621      	mov	r1, r4
 8004a88:	4658      	mov	r0, fp
 8004a8a:	f004 fecf 	bl	800982c <__ssprint_r>
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	f47f aab0 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 8004a94:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004a96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004a98:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004a9c:	e7e4      	b.n	8004a68 <_svfprintf_r+0xc68>
 8004a9e:	aa27      	add	r2, sp, #156	; 0x9c
 8004aa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004aa2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004aa4:	f004 fec2 	bl	800982c <__ssprint_r>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	f47f aaa3 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 8004aae:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004ab2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004ab4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004ab8:	f7ff bbc8 	b.w	800424c <_svfprintf_r+0x44c>
 8004abc:	1e5e      	subs	r6, r3, #1
 8004abe:	2e00      	cmp	r6, #0
 8004ac0:	f77f af48 	ble.w	8004954 <_svfprintf_r+0xb54>
 8004ac4:	4b23      	ldr	r3, [pc, #140]	; (8004b54 <_svfprintf_r+0xd54>)
 8004ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ac8:	2e10      	cmp	r6, #16
 8004aca:	dd2c      	ble.n	8004b26 <_svfprintf_r+0xd26>
 8004acc:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8004ad0:	2710      	movs	r7, #16
 8004ad2:	46b0      	mov	r8, r6
 8004ad4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004ad8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004ada:	e006      	b.n	8004aea <_svfprintf_r+0xcea>
 8004adc:	f1a8 0810 	sub.w	r8, r8, #16
 8004ae0:	f1b8 0f10 	cmp.w	r8, #16
 8004ae4:	f109 0908 	add.w	r9, r9, #8
 8004ae8:	dd1a      	ble.n	8004b20 <_svfprintf_r+0xd20>
 8004aea:	3501      	adds	r5, #1
 8004aec:	3410      	adds	r4, #16
 8004aee:	2d07      	cmp	r5, #7
 8004af0:	9429      	str	r4, [sp, #164]	; 0xa4
 8004af2:	9528      	str	r5, [sp, #160]	; 0xa0
 8004af4:	f8c9 a000 	str.w	sl, [r9]
 8004af8:	f8c9 7004 	str.w	r7, [r9, #4]
 8004afc:	ddee      	ble.n	8004adc <_svfprintf_r+0xcdc>
 8004afe:	aa27      	add	r2, sp, #156	; 0x9c
 8004b00:	4631      	mov	r1, r6
 8004b02:	4658      	mov	r0, fp
 8004b04:	f004 fe92 	bl	800982c <__ssprint_r>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	f47f aa73 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 8004b0e:	f1a8 0810 	sub.w	r8, r8, #16
 8004b12:	f1b8 0f10 	cmp.w	r8, #16
 8004b16:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004b18:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004b1a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004b1e:	dce4      	bgt.n	8004aea <_svfprintf_r+0xcea>
 8004b20:	4646      	mov	r6, r8
 8004b22:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8004b26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b28:	3501      	adds	r5, #1
 8004b2a:	4434      	add	r4, r6
 8004b2c:	2d07      	cmp	r5, #7
 8004b2e:	9429      	str	r4, [sp, #164]	; 0xa4
 8004b30:	9528      	str	r5, [sp, #160]	; 0xa0
 8004b32:	e889 0048 	stmia.w	r9, {r3, r6}
 8004b36:	f77f af0b 	ble.w	8004950 <_svfprintf_r+0xb50>
 8004b3a:	aa27      	add	r2, sp, #156	; 0x9c
 8004b3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004b40:	f004 fe74 	bl	800982c <__ssprint_r>
 8004b44:	2800      	cmp	r0, #0
 8004b46:	f47f aa55 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 8004b4a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004b4c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004b4e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004b52:	e6ff      	b.n	8004954 <_svfprintf_r+0xb54>
 8004b54:	0800a334 	.word	0x0800a334
 8004b58:	9907      	ldr	r1, [sp, #28]
 8004b5a:	f011 0210 	ands.w	r2, r1, #16
 8004b5e:	f000 81d5 	beq.w	8004f0c <_svfprintf_r+0x110c>
 8004b62:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004b64:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004b68:	f1bb 0f00 	cmp.w	fp, #0
 8004b6c:	6804      	ldr	r4, [r0, #0]
 8004b6e:	f100 0704 	add.w	r7, r0, #4
 8004b72:	f04f 0500 	mov.w	r5, #0
 8004b76:	db26      	blt.n	8004bc6 <_svfprintf_r+0xdc6>
 8004b78:	460a      	mov	r2, r1
 8004b7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b7e:	9207      	str	r2, [sp, #28]
 8004b80:	ea54 0205 	orrs.w	r2, r4, r5
 8004b84:	970e      	str	r7, [sp, #56]	; 0x38
 8004b86:	461f      	mov	r7, r3
 8004b88:	f47f aae8 	bne.w	800415c <_svfprintf_r+0x35c>
 8004b8c:	e4ce      	b.n	800452c <_svfprintf_r+0x72c>
 8004b8e:	9b07      	ldr	r3, [sp, #28]
 8004b90:	06d8      	lsls	r0, r3, #27
 8004b92:	d42a      	bmi.n	8004bea <_svfprintf_r+0xdea>
 8004b94:	9b07      	ldr	r3, [sp, #28]
 8004b96:	0659      	lsls	r1, r3, #25
 8004b98:	d527      	bpl.n	8004bea <_svfprintf_r+0xdea>
 8004b9a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004b9c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8004ba0:	3104      	adds	r1, #4
 8004ba2:	17e5      	asrs	r5, r4, #31
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	462b      	mov	r3, r5
 8004ba8:	910e      	str	r1, [sp, #56]	; 0x38
 8004baa:	f7ff bac4 	b.w	8004136 <_svfprintf_r+0x336>
 8004bae:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004bb0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004bb4:	f1bb 0f00 	cmp.w	fp, #0
 8004bb8:	680c      	ldr	r4, [r1, #0]
 8004bba:	f101 0704 	add.w	r7, r1, #4
 8004bbe:	f04f 0500 	mov.w	r5, #0
 8004bc2:	f280 824e 	bge.w	8005062 <_svfprintf_r+0x1262>
 8004bc6:	970e      	str	r7, [sp, #56]	; 0x38
 8004bc8:	461f      	mov	r7, r3
 8004bca:	ea54 0305 	orrs.w	r3, r4, r5
 8004bce:	f47f aac5 	bne.w	800415c <_svfprintf_r+0x35c>
 8004bd2:	e4b0      	b.n	8004536 <_svfprintf_r+0x736>
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004bd8:	9328      	str	r3, [sp, #160]	; 0xa0
 8004bda:	442c      	add	r4, r5
 8004bdc:	2b07      	cmp	r3, #7
 8004bde:	9429      	str	r4, [sp, #164]	; 0xa4
 8004be0:	e889 0024 	stmia.w	r9, {r2, r5}
 8004be4:	f77f aba0 	ble.w	8004328 <_svfprintf_r+0x528>
 8004be8:	e6c1      	b.n	800496e <_svfprintf_r+0xb6e>
 8004bea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bec:	6814      	ldr	r4, [r2, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	17e5      	asrs	r5, r4, #31
 8004bf4:	4622      	mov	r2, r4
 8004bf6:	930e      	str	r3, [sp, #56]	; 0x38
 8004bf8:	2a00      	cmp	r2, #0
 8004bfa:	462b      	mov	r3, r5
 8004bfc:	f173 0300 	sbcs.w	r3, r3, #0
 8004c00:	f6bf aa9e 	bge.w	8004140 <_svfprintf_r+0x340>
 8004c04:	4264      	negs	r4, r4
 8004c06:	f04f 072d 	mov.w	r7, #45	; 0x2d
 8004c0a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8004c0e:	f1bb 0f00 	cmp.w	fp, #0
 8004c12:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004c16:	f6ff aaa1 	blt.w	800415c <_svfprintf_r+0x35c>
 8004c1a:	9b07      	ldr	r3, [sp, #28]
 8004c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c20:	9307      	str	r3, [sp, #28]
 8004c22:	f7ff ba9b 	b.w	800415c <_svfprintf_r+0x35c>
 8004c26:	aa27      	add	r2, sp, #156	; 0x9c
 8004c28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004c2c:	f004 fdfe 	bl	800982c <__ssprint_r>
 8004c30:	2800      	cmp	r0, #0
 8004c32:	f47f a9df 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 8004c36:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004c38:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004c3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c40:	4432      	add	r2, r6
 8004c42:	4617      	mov	r7, r2
 8004c44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004c46:	4293      	cmp	r3, r2
 8004c48:	db47      	blt.n	8004cda <_svfprintf_r+0xeda>
 8004c4a:	9a07      	ldr	r2, [sp, #28]
 8004c4c:	07d5      	lsls	r5, r2, #31
 8004c4e:	d444      	bmi.n	8004cda <_svfprintf_r+0xeda>
 8004c50:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004c52:	440e      	add	r6, r1
 8004c54:	1bf5      	subs	r5, r6, r7
 8004c56:	1acb      	subs	r3, r1, r3
 8004c58:	429d      	cmp	r5, r3
 8004c5a:	bfa8      	it	ge
 8004c5c:	461d      	movge	r5, r3
 8004c5e:	2d00      	cmp	r5, #0
 8004c60:	462e      	mov	r6, r5
 8004c62:	dd0d      	ble.n	8004c80 <_svfprintf_r+0xe80>
 8004c64:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004c66:	f8c9 7000 	str.w	r7, [r9]
 8004c6a:	3201      	adds	r2, #1
 8004c6c:	442c      	add	r4, r5
 8004c6e:	2a07      	cmp	r2, #7
 8004c70:	9429      	str	r4, [sp, #164]	; 0xa4
 8004c72:	f8c9 5004 	str.w	r5, [r9, #4]
 8004c76:	9228      	str	r2, [sp, #160]	; 0xa0
 8004c78:	f300 830a 	bgt.w	8005290 <_svfprintf_r+0x1490>
 8004c7c:	f109 0908 	add.w	r9, r9, #8
 8004c80:	2e00      	cmp	r6, #0
 8004c82:	bfac      	ite	ge
 8004c84:	1b9d      	subge	r5, r3, r6
 8004c86:	461d      	movlt	r5, r3
 8004c88:	2d00      	cmp	r5, #0
 8004c8a:	f77f ab4f 	ble.w	800432c <_svfprintf_r+0x52c>
 8004c8e:	4abb      	ldr	r2, [pc, #748]	; (8004f7c <_svfprintf_r+0x117c>)
 8004c90:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004c92:	920f      	str	r2, [sp, #60]	; 0x3c
 8004c94:	2d10      	cmp	r5, #16
 8004c96:	dd9d      	ble.n	8004bd4 <_svfprintf_r+0xdd4>
 8004c98:	2610      	movs	r6, #16
 8004c9a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004c9c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8004ca0:	e004      	b.n	8004cac <_svfprintf_r+0xeac>
 8004ca2:	f109 0908 	add.w	r9, r9, #8
 8004ca6:	3d10      	subs	r5, #16
 8004ca8:	2d10      	cmp	r5, #16
 8004caa:	dd93      	ble.n	8004bd4 <_svfprintf_r+0xdd4>
 8004cac:	3301      	adds	r3, #1
 8004cae:	3410      	adds	r4, #16
 8004cb0:	2b07      	cmp	r3, #7
 8004cb2:	9429      	str	r4, [sp, #164]	; 0xa4
 8004cb4:	9328      	str	r3, [sp, #160]	; 0xa0
 8004cb6:	f8c9 a000 	str.w	sl, [r9]
 8004cba:	f8c9 6004 	str.w	r6, [r9, #4]
 8004cbe:	ddf0      	ble.n	8004ca2 <_svfprintf_r+0xea2>
 8004cc0:	aa27      	add	r2, sp, #156	; 0x9c
 8004cc2:	4659      	mov	r1, fp
 8004cc4:	4638      	mov	r0, r7
 8004cc6:	f004 fdb1 	bl	800982c <__ssprint_r>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	f47f a992 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 8004cd0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004cd2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004cd4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004cd8:	e7e5      	b.n	8004ca6 <_svfprintf_r+0xea6>
 8004cda:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004cdc:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004cde:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004ce0:	f8c9 1000 	str.w	r1, [r9]
 8004ce4:	3201      	adds	r2, #1
 8004ce6:	4404      	add	r4, r0
 8004ce8:	2a07      	cmp	r2, #7
 8004cea:	9429      	str	r4, [sp, #164]	; 0xa4
 8004cec:	f8c9 0004 	str.w	r0, [r9, #4]
 8004cf0:	9228      	str	r2, [sp, #160]	; 0xa0
 8004cf2:	f300 82b9 	bgt.w	8005268 <_svfprintf_r+0x1468>
 8004cf6:	f109 0908 	add.w	r9, r9, #8
 8004cfa:	e7a9      	b.n	8004c50 <_svfprintf_r+0xe50>
 8004cfc:	9b07      	ldr	r3, [sp, #28]
 8004cfe:	07d8      	lsls	r0, r3, #31
 8004d00:	f53f adf2 	bmi.w	80048e8 <_svfprintf_r+0xae8>
 8004d04:	3501      	adds	r5, #1
 8004d06:	3401      	adds	r4, #1
 8004d08:	2301      	movs	r3, #1
 8004d0a:	2d07      	cmp	r5, #7
 8004d0c:	9429      	str	r4, [sp, #164]	; 0xa4
 8004d0e:	9528      	str	r5, [sp, #160]	; 0xa0
 8004d10:	f8c9 6000 	str.w	r6, [r9]
 8004d14:	f8c9 3004 	str.w	r3, [r9, #4]
 8004d18:	f77f ae1a 	ble.w	8004950 <_svfprintf_r+0xb50>
 8004d1c:	e70d      	b.n	8004b3a <_svfprintf_r+0xd3a>
 8004d1e:	aa27      	add	r2, sp, #156	; 0x9c
 8004d20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004d24:	f004 fd82 	bl	800982c <__ssprint_r>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	f47f a963 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 8004d2e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004d30:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004d32:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004d36:	e5e5      	b.n	8004904 <_svfprintf_r+0xb04>
 8004d38:	aa27      	add	r2, sp, #156	; 0x9c
 8004d3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004d3e:	f004 fd75 	bl	800982c <__ssprint_r>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	f47f a956 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 8004d48:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004d4a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004d4c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004d50:	e5e7      	b.n	8004922 <_svfprintf_r+0xb22>
 8004d52:	aa27      	add	r2, sp, #156	; 0x9c
 8004d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004d58:	f004 fd68 	bl	800982c <__ssprint_r>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	f47f a949 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 8004d62:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004d64:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004d68:	f7ff ba94 	b.w	8004294 <_svfprintf_r+0x494>
 8004d6c:	9907      	ldr	r1, [sp, #28]
 8004d6e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8004d72:	f000 80bb 	beq.w	8004eec <_svfprintf_r+0x10ec>
 8004d76:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004d78:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f1bb 0f00 	cmp.w	fp, #0
 8004d82:	f103 0304 	add.w	r3, r3, #4
 8004d86:	8804      	ldrh	r4, [r0, #0]
 8004d88:	f04f 0500 	mov.w	r5, #0
 8004d8c:	f2c0 81c5 	blt.w	800511a <_svfprintf_r+0x131a>
 8004d90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004d94:	9107      	str	r1, [sp, #28]
 8004d96:	ea54 0105 	orrs.w	r1, r4, r5
 8004d9a:	930e      	str	r3, [sp, #56]	; 0x38
 8004d9c:	f43f acda 	beq.w	8004754 <_svfprintf_r+0x954>
 8004da0:	4617      	mov	r7, r2
 8004da2:	f7ff b953 	b.w	800404c <_svfprintf_r+0x24c>
 8004da6:	9b07      	ldr	r3, [sp, #28]
 8004da8:	06df      	lsls	r7, r3, #27
 8004daa:	d40b      	bmi.n	8004dc4 <_svfprintf_r+0xfc4>
 8004dac:	9b07      	ldr	r3, [sp, #28]
 8004dae:	065e      	lsls	r6, r3, #25
 8004db0:	d508      	bpl.n	8004dc4 <_svfprintf_r+0xfc4>
 8004db2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004db4:	6813      	ldr	r3, [r2, #0]
 8004db6:	3204      	adds	r2, #4
 8004db8:	920e      	str	r2, [sp, #56]	; 0x38
 8004dba:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8004dbe:	801a      	strh	r2, [r3, #0]
 8004dc0:	f7ff b845 	b.w	8003e4e <_svfprintf_r+0x4e>
 8004dc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dc6:	6813      	ldr	r3, [r2, #0]
 8004dc8:	3204      	adds	r2, #4
 8004dca:	920e      	str	r2, [sp, #56]	; 0x38
 8004dcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f7ff b83d 	b.w	8003e4e <_svfprintf_r+0x4e>
 8004dd4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	f7fe fd72 	bl	80038c4 <__aeabi_dcmpun>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	f040 8305 	bne.w	80053f0 <_svfprintf_r+0x15f0>
 8004de6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004de8:	f1bb 3fff 	cmp.w	fp, #4294967295
 8004dec:	f023 0720 	bic.w	r7, r3, #32
 8004df0:	f000 826c 	beq.w	80052cc <_svfprintf_r+0x14cc>
 8004df4:	2f47      	cmp	r7, #71	; 0x47
 8004df6:	f000 8187 	beq.w	8005108 <_svfprintf_r+0x1308>
 8004dfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004dfc:	9a07      	ldr	r2, [sp, #28]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e04:	920f      	str	r2, [sp, #60]	; 0x3c
 8004e06:	f2c0 8280 	blt.w	800530a <_svfprintf_r+0x150a>
 8004e0a:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8004e0e:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8004e12:	2300      	movs	r3, #0
 8004e14:	9308      	str	r3, [sp, #32]
 8004e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e18:	2b66      	cmp	r3, #102	; 0x66
 8004e1a:	f000 825a 	beq.w	80052d2 <_svfprintf_r+0x14d2>
 8004e1e:	2b46      	cmp	r3, #70	; 0x46
 8004e20:	f000 8147 	beq.w	80050b2 <_svfprintf_r+0x12b2>
 8004e24:	2f45      	cmp	r7, #69	; 0x45
 8004e26:	bf0c      	ite	eq
 8004e28:	f10b 0501 	addeq.w	r5, fp, #1
 8004e2c:	465d      	movne	r5, fp
 8004e2e:	a825      	add	r0, sp, #148	; 0x94
 8004e30:	a922      	add	r1, sp, #136	; 0x88
 8004e32:	aa21      	add	r2, sp, #132	; 0x84
 8004e34:	2302      	movs	r3, #2
 8004e36:	9004      	str	r0, [sp, #16]
 8004e38:	9202      	str	r2, [sp, #8]
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	9501      	str	r5, [sp, #4]
 8004e3e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8004e42:	9103      	str	r1, [sp, #12]
 8004e44:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004e46:	f002 f847 	bl	8006ed8 <_dtoa_r>
 8004e4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e4c:	2b67      	cmp	r3, #103	; 0x67
 8004e4e:	4606      	mov	r6, r0
 8004e50:	f040 8271 	bne.w	8005336 <_svfprintf_r+0x1536>
 8004e54:	9b07      	ldr	r3, [sp, #28]
 8004e56:	07da      	lsls	r2, r3, #31
 8004e58:	f140 82bf 	bpl.w	80053da <_svfprintf_r+0x15da>
 8004e5c:	1974      	adds	r4, r6, r5
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2300      	movs	r3, #0
 8004e62:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8004e66:	f7fe fcfb 	bl	8003860 <__aeabi_dcmpeq>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	f040 8190 	bne.w	8005190 <_svfprintf_r+0x1390>
 8004e70:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8004e72:	429c      	cmp	r4, r3
 8004e74:	d906      	bls.n	8004e84 <_svfprintf_r+0x1084>
 8004e76:	2130      	movs	r1, #48	; 0x30
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	9225      	str	r2, [sp, #148]	; 0x94
 8004e7c:	7019      	strb	r1, [r3, #0]
 8004e7e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8004e80:	429c      	cmp	r4, r3
 8004e82:	d8f9      	bhi.n	8004e78 <_svfprintf_r+0x1078>
 8004e84:	1b9b      	subs	r3, r3, r6
 8004e86:	2f47      	cmp	r7, #71	; 0x47
 8004e88:	9312      	str	r3, [sp, #72]	; 0x48
 8004e8a:	f000 817a 	beq.w	8005182 <_svfprintf_r+0x1382>
 8004e8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e90:	2b65      	cmp	r3, #101	; 0x65
 8004e92:	f340 825f 	ble.w	8005354 <_svfprintf_r+0x1554>
 8004e96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e98:	2b66      	cmp	r3, #102	; 0x66
 8004e9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e9e:	f000 8266 	beq.w	800536e <_svfprintf_r+0x156e>
 8004ea2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004ea4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004ea6:	428a      	cmp	r2, r1
 8004ea8:	f2c0 8238 	blt.w	800531c <_svfprintf_r+0x151c>
 8004eac:	9b07      	ldr	r3, [sp, #28]
 8004eae:	07d9      	lsls	r1, r3, #31
 8004eb0:	f100 8295 	bmi.w	80053de <_svfprintf_r+0x15de>
 8004eb4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004eb8:	920d      	str	r2, [sp, #52]	; 0x34
 8004eba:	2267      	movs	r2, #103	; 0x67
 8004ebc:	9211      	str	r2, [sp, #68]	; 0x44
 8004ebe:	9a08      	ldr	r2, [sp, #32]
 8004ec0:	2a00      	cmp	r2, #0
 8004ec2:	f040 8132 	bne.w	800512a <_svfprintf_r+0x132a>
 8004ec6:	9308      	str	r3, [sp, #32]
 8004ec8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004eca:	9307      	str	r3, [sp, #28]
 8004ecc:	4693      	mov	fp, r2
 8004ece:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004ed2:	f7ff b967 	b.w	80041a4 <_svfprintf_r+0x3a4>
 8004ed6:	f027 0707 	bic.w	r7, r7, #7
 8004eda:	ed97 7b00 	vldr	d7, [r7]
 8004ede:	f107 0308 	add.w	r3, r7, #8
 8004ee2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004ee6:	930e      	str	r3, [sp, #56]	; 0x38
 8004ee8:	f7ff ba88 	b.w	80043fc <_svfprintf_r+0x5fc>
 8004eec:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004eee:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004ef2:	f1bb 0f00 	cmp.w	fp, #0
 8004ef6:	680c      	ldr	r4, [r1, #0]
 8004ef8:	f101 0704 	add.w	r7, r1, #4
 8004efc:	f04f 0500 	mov.w	r5, #0
 8004f00:	f280 80ac 	bge.w	800505c <_svfprintf_r+0x125c>
 8004f04:	970e      	str	r7, [sp, #56]	; 0x38
 8004f06:	2700      	movs	r7, #0
 8004f08:	f7ff b8a0 	b.w	800404c <_svfprintf_r+0x24c>
 8004f0c:	9907      	ldr	r1, [sp, #28]
 8004f0e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8004f12:	f43f ae4c 	beq.w	8004bae <_svfprintf_r+0xdae>
 8004f16:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004f18:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f1bb 0f00 	cmp.w	fp, #0
 8004f22:	f103 0304 	add.w	r3, r3, #4
 8004f26:	8804      	ldrh	r4, [r0, #0]
 8004f28:	f04f 0500 	mov.w	r5, #0
 8004f2c:	f2c0 80f2 	blt.w	8005114 <_svfprintf_r+0x1314>
 8004f30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004f34:	9107      	str	r1, [sp, #28]
 8004f36:	ea54 0105 	orrs.w	r1, r4, r5
 8004f3a:	930e      	str	r3, [sp, #56]	; 0x38
 8004f3c:	4617      	mov	r7, r2
 8004f3e:	f47f a90d 	bne.w	800415c <_svfprintf_r+0x35c>
 8004f42:	f7ff baf3 	b.w	800452c <_svfprintf_r+0x72c>
 8004f46:	9b07      	ldr	r3, [sp, #28]
 8004f48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f4e:	4613      	mov	r3, r2
 8004f50:	f000 80e5 	beq.w	800511e <_svfprintf_r+0x131e>
 8004f54:	3304      	adds	r3, #4
 8004f56:	8814      	ldrh	r4, [r2, #0]
 8004f58:	930e      	str	r3, [sp, #56]	; 0x38
 8004f5a:	2500      	movs	r5, #0
 8004f5c:	f7ff bb03 	b.w	8004566 <_svfprintf_r+0x766>
 8004f60:	4614      	mov	r4, r2
 8004f62:	3301      	adds	r3, #1
 8004f64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f66:	9328      	str	r3, [sp, #160]	; 0xa0
 8004f68:	442c      	add	r4, r5
 8004f6a:	2b07      	cmp	r3, #7
 8004f6c:	9429      	str	r4, [sp, #164]	; 0xa4
 8004f6e:	e889 0024 	stmia.w	r9, {r2, r5}
 8004f72:	f73f ae58 	bgt.w	8004c26 <_svfprintf_r+0xe26>
 8004f76:	f109 0908 	add.w	r9, r9, #8
 8004f7a:	e65f      	b.n	8004c3c <_svfprintf_r+0xe3c>
 8004f7c:	0800a334 	.word	0x0800a334
 8004f80:	2700      	movs	r7, #0
 8004f82:	45bb      	cmp	fp, r7
 8004f84:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004f88:	f6ff abf6 	blt.w	8004778 <_svfprintf_r+0x978>
 8004f8c:	9b07      	ldr	r3, [sp, #28]
 8004f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f92:	9307      	str	r3, [sp, #28]
 8004f94:	f7ff bbbe 	b.w	8004714 <_svfprintf_r+0x914>
 8004f98:	aa27      	add	r2, sp, #156	; 0x9c
 8004f9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004f9e:	f004 fc45 	bl	800982c <__ssprint_r>
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	f47f a826 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 8004fa8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004faa:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004fae:	e405      	b.n	80047bc <_svfprintf_r+0x9bc>
 8004fb0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004fb2:	f7ff bbda 	b.w	800476a <_svfprintf_r+0x96a>
 8004fb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004fb8:	4ab2      	ldr	r2, [pc, #712]	; (8005284 <_svfprintf_r+0x1484>)
 8004fba:	f8c9 2000 	str.w	r2, [r9]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	3401      	adds	r4, #1
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	2b07      	cmp	r3, #7
 8004fc6:	9429      	str	r4, [sp, #164]	; 0xa4
 8004fc8:	9328      	str	r3, [sp, #160]	; 0xa0
 8004fca:	f8c9 2004 	str.w	r2, [r9, #4]
 8004fce:	f300 808e 	bgt.w	80050ee <_svfprintf_r+0x12ee>
 8004fd2:	f109 0908 	add.w	r9, r9, #8
 8004fd6:	b92d      	cbnz	r5, 8004fe4 <_svfprintf_r+0x11e4>
 8004fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fda:	b91b      	cbnz	r3, 8004fe4 <_svfprintf_r+0x11e4>
 8004fdc:	9b07      	ldr	r3, [sp, #28]
 8004fde:	07df      	lsls	r7, r3, #31
 8004fe0:	f57f a9a4 	bpl.w	800432c <_svfprintf_r+0x52c>
 8004fe4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004fe6:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004fe8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004fea:	f8c9 2000 	str.w	r2, [r9]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	440c      	add	r4, r1
 8004ff2:	2b07      	cmp	r3, #7
 8004ff4:	9429      	str	r4, [sp, #164]	; 0xa4
 8004ff6:	f8c9 1004 	str.w	r1, [r9, #4]
 8004ffa:	9328      	str	r3, [sp, #160]	; 0xa0
 8004ffc:	f300 81d3 	bgt.w	80053a6 <_svfprintf_r+0x15a6>
 8005000:	f109 0908 	add.w	r9, r9, #8
 8005004:	426d      	negs	r5, r5
 8005006:	2d00      	cmp	r5, #0
 8005008:	f340 80ad 	ble.w	8005166 <_svfprintf_r+0x1366>
 800500c:	4a9e      	ldr	r2, [pc, #632]	; (8005288 <_svfprintf_r+0x1488>)
 800500e:	920f      	str	r2, [sp, #60]	; 0x3c
 8005010:	2d10      	cmp	r5, #16
 8005012:	f340 80cc 	ble.w	80051ae <_svfprintf_r+0x13ae>
 8005016:	4622      	mov	r2, r4
 8005018:	2710      	movs	r7, #16
 800501a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800501e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005020:	e005      	b.n	800502e <_svfprintf_r+0x122e>
 8005022:	f109 0908 	add.w	r9, r9, #8
 8005026:	3d10      	subs	r5, #16
 8005028:	2d10      	cmp	r5, #16
 800502a:	f340 80bf 	ble.w	80051ac <_svfprintf_r+0x13ac>
 800502e:	3301      	adds	r3, #1
 8005030:	3210      	adds	r2, #16
 8005032:	2b07      	cmp	r3, #7
 8005034:	9229      	str	r2, [sp, #164]	; 0xa4
 8005036:	9328      	str	r3, [sp, #160]	; 0xa0
 8005038:	f8c9 a000 	str.w	sl, [r9]
 800503c:	f8c9 7004 	str.w	r7, [r9, #4]
 8005040:	ddef      	ble.n	8005022 <_svfprintf_r+0x1222>
 8005042:	aa27      	add	r2, sp, #156	; 0x9c
 8005044:	4621      	mov	r1, r4
 8005046:	4658      	mov	r0, fp
 8005048:	f004 fbf0 	bl	800982c <__ssprint_r>
 800504c:	2800      	cmp	r0, #0
 800504e:	f47e afd1 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 8005052:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005054:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005056:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800505a:	e7e4      	b.n	8005026 <_svfprintf_r+0x1226>
 800505c:	9a07      	ldr	r2, [sp, #28]
 800505e:	f7ff ba37 	b.w	80044d0 <_svfprintf_r+0x6d0>
 8005062:	9a07      	ldr	r2, [sp, #28]
 8005064:	e589      	b.n	8004b7a <_svfprintf_r+0xd7a>
 8005066:	9b07      	ldr	r3, [sp, #28]
 8005068:	f043 0320 	orr.w	r3, r3, #32
 800506c:	9307      	str	r3, [sp, #28]
 800506e:	f108 0801 	add.w	r8, r8, #1
 8005072:	f898 3000 	ldrb.w	r3, [r8]
 8005076:	f7fe bf1d 	b.w	8003eb4 <_svfprintf_r+0xb4>
 800507a:	aa27      	add	r2, sp, #156	; 0x9c
 800507c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800507e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005080:	f004 fbd4 	bl	800982c <__ssprint_r>
 8005084:	2800      	cmp	r0, #0
 8005086:	f47e afb5 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 800508a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800508c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005090:	f7ff bbac 	b.w	80047ec <_svfprintf_r+0x9ec>
 8005094:	2140      	movs	r1, #64	; 0x40
 8005096:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005098:	f003 fae8 	bl	800866c <_malloc_r>
 800509c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800509e:	6010      	str	r0, [r2, #0]
 80050a0:	6110      	str	r0, [r2, #16]
 80050a2:	2800      	cmp	r0, #0
 80050a4:	f000 81f9 	beq.w	800549a <_svfprintf_r+0x169a>
 80050a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050aa:	2340      	movs	r3, #64	; 0x40
 80050ac:	6153      	str	r3, [r2, #20]
 80050ae:	f7fe bebe 	b.w	8003e2e <_svfprintf_r+0x2e>
 80050b2:	a825      	add	r0, sp, #148	; 0x94
 80050b4:	a922      	add	r1, sp, #136	; 0x88
 80050b6:	aa21      	add	r2, sp, #132	; 0x84
 80050b8:	2303      	movs	r3, #3
 80050ba:	9004      	str	r0, [sp, #16]
 80050bc:	9202      	str	r2, [sp, #8]
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	f8cd b004 	str.w	fp, [sp, #4]
 80050c4:	9103      	str	r1, [sp, #12]
 80050c6:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80050ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80050cc:	f001 ff04 	bl	8006ed8 <_dtoa_r>
 80050d0:	465d      	mov	r5, fp
 80050d2:	4606      	mov	r6, r0
 80050d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050d6:	2b46      	cmp	r3, #70	; 0x46
 80050d8:	eb06 0405 	add.w	r4, r6, r5
 80050dc:	f47f aebf 	bne.w	8004e5e <_svfprintf_r+0x105e>
 80050e0:	7833      	ldrb	r3, [r6, #0]
 80050e2:	2b30      	cmp	r3, #48	; 0x30
 80050e4:	f000 818a 	beq.w	80053fc <_svfprintf_r+0x15fc>
 80050e8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80050ea:	442c      	add	r4, r5
 80050ec:	e6b7      	b.n	8004e5e <_svfprintf_r+0x105e>
 80050ee:	aa27      	add	r2, sp, #156	; 0x9c
 80050f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80050f4:	f004 fb9a 	bl	800982c <__ssprint_r>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	f47e af7b 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 80050fe:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005100:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005102:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005106:	e766      	b.n	8004fd6 <_svfprintf_r+0x11d6>
 8005108:	f1bb 0f00 	cmp.w	fp, #0
 800510c:	bf08      	it	eq
 800510e:	f04f 0b01 	moveq.w	fp, #1
 8005112:	e672      	b.n	8004dfa <_svfprintf_r+0xffa>
 8005114:	930e      	str	r3, [sp, #56]	; 0x38
 8005116:	4617      	mov	r7, r2
 8005118:	e557      	b.n	8004bca <_svfprintf_r+0xdca>
 800511a:	930e      	str	r3, [sp, #56]	; 0x38
 800511c:	e6f3      	b.n	8004f06 <_svfprintf_r+0x1106>
 800511e:	3304      	adds	r3, #4
 8005120:	6814      	ldr	r4, [r2, #0]
 8005122:	930e      	str	r3, [sp, #56]	; 0x38
 8005124:	2500      	movs	r5, #0
 8005126:	f7ff ba1e 	b.w	8004566 <_svfprintf_r+0x766>
 800512a:	272d      	movs	r7, #45	; 0x2d
 800512c:	9308      	str	r3, [sp, #32]
 800512e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005130:	9307      	str	r3, [sp, #28]
 8005132:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005136:	f04f 0b00 	mov.w	fp, #0
 800513a:	f7ff b834 	b.w	80041a6 <_svfprintf_r+0x3a6>
 800513e:	4630      	mov	r0, r6
 8005140:	f7fe fd9e 	bl	8003c80 <strlen>
 8005144:	46a3      	mov	fp, r4
 8005146:	4603      	mov	r3, r0
 8005148:	900d      	str	r0, [sp, #52]	; 0x34
 800514a:	f7ff ba9d 	b.w	8004688 <_svfprintf_r+0x888>
 800514e:	aa27      	add	r2, sp, #156	; 0x9c
 8005150:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005152:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005154:	f004 fb6a 	bl	800982c <__ssprint_r>
 8005158:	2800      	cmp	r0, #0
 800515a:	f47e af4b 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 800515e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005160:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005162:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005166:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005168:	f8c9 6000 	str.w	r6, [r9]
 800516c:	3301      	adds	r3, #1
 800516e:	440c      	add	r4, r1
 8005170:	2b07      	cmp	r3, #7
 8005172:	9429      	str	r4, [sp, #164]	; 0xa4
 8005174:	9328      	str	r3, [sp, #160]	; 0xa0
 8005176:	f8c9 1004 	str.w	r1, [r9, #4]
 800517a:	f77f a8d5 	ble.w	8004328 <_svfprintf_r+0x528>
 800517e:	f7ff bbf6 	b.w	800496e <_svfprintf_r+0xb6e>
 8005182:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005184:	1cdd      	adds	r5, r3, #3
 8005186:	db1e      	blt.n	80051c6 <_svfprintf_r+0x13c6>
 8005188:	459b      	cmp	fp, r3
 800518a:	db1c      	blt.n	80051c6 <_svfprintf_r+0x13c6>
 800518c:	9313      	str	r3, [sp, #76]	; 0x4c
 800518e:	e688      	b.n	8004ea2 <_svfprintf_r+0x10a2>
 8005190:	4623      	mov	r3, r4
 8005192:	e677      	b.n	8004e84 <_svfprintf_r+0x1084>
 8005194:	aa27      	add	r2, sp, #156	; 0x9c
 8005196:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005198:	980a      	ldr	r0, [sp, #40]	; 0x28
 800519a:	f004 fb47 	bl	800982c <__ssprint_r>
 800519e:	2800      	cmp	r0, #0
 80051a0:	f47e af28 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 80051a4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80051a6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80051aa:	e447      	b.n	8004a3c <_svfprintf_r+0xc3c>
 80051ac:	4614      	mov	r4, r2
 80051ae:	3301      	adds	r3, #1
 80051b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80051b2:	9328      	str	r3, [sp, #160]	; 0xa0
 80051b4:	442c      	add	r4, r5
 80051b6:	2b07      	cmp	r3, #7
 80051b8:	9429      	str	r4, [sp, #164]	; 0xa4
 80051ba:	e889 0024 	stmia.w	r9, {r2, r5}
 80051be:	dcc6      	bgt.n	800514e <_svfprintf_r+0x134e>
 80051c0:	f109 0908 	add.w	r9, r9, #8
 80051c4:	e7cf      	b.n	8005166 <_svfprintf_r+0x1366>
 80051c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80051c8:	3a02      	subs	r2, #2
 80051ca:	9211      	str	r2, [sp, #68]	; 0x44
 80051cc:	3b01      	subs	r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80051d4:	9321      	str	r3, [sp, #132]	; 0x84
 80051d6:	bfb8      	it	lt
 80051d8:	425b      	neglt	r3, r3
 80051da:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 80051de:	bfb4      	ite	lt
 80051e0:	222d      	movlt	r2, #45	; 0x2d
 80051e2:	222b      	movge	r2, #43	; 0x2b
 80051e4:	2b09      	cmp	r3, #9
 80051e6:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 80051ea:	f340 80ee 	ble.w	80053ca <_svfprintf_r+0x15ca>
 80051ee:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 80051f2:	4604      	mov	r4, r0
 80051f4:	4a25      	ldr	r2, [pc, #148]	; (800528c <_svfprintf_r+0x148c>)
 80051f6:	fb82 2103 	smull	r2, r1, r2, r3
 80051fa:	17da      	asrs	r2, r3, #31
 80051fc:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8005200:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005204:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8005208:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800520c:	2a09      	cmp	r2, #9
 800520e:	4613      	mov	r3, r2
 8005210:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8005214:	dcee      	bgt.n	80051f4 <_svfprintf_r+0x13f4>
 8005216:	4621      	mov	r1, r4
 8005218:	3330      	adds	r3, #48	; 0x30
 800521a:	b2da      	uxtb	r2, r3
 800521c:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8005220:	4288      	cmp	r0, r1
 8005222:	f240 8137 	bls.w	8005494 <_svfprintf_r+0x1694>
 8005226:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 800522a:	4623      	mov	r3, r4
 800522c:	e001      	b.n	8005232 <_svfprintf_r+0x1432>
 800522e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005232:	f801 2b01 	strb.w	r2, [r1], #1
 8005236:	4298      	cmp	r0, r3
 8005238:	d1f9      	bne.n	800522e <_svfprintf_r+0x142e>
 800523a:	1c43      	adds	r3, r0, #1
 800523c:	1b1b      	subs	r3, r3, r4
 800523e:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 8005242:	4413      	add	r3, r2
 8005244:	aa23      	add	r2, sp, #140	; 0x8c
 8005246:	1a9b      	subs	r3, r3, r2
 8005248:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800524a:	9319      	str	r3, [sp, #100]	; 0x64
 800524c:	2a01      	cmp	r2, #1
 800524e:	4413      	add	r3, r2
 8005250:	930d      	str	r3, [sp, #52]	; 0x34
 8005252:	f340 80ea 	ble.w	800542a <_svfprintf_r+0x162a>
 8005256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005258:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800525a:	4413      	add	r3, r2
 800525c:	2200      	movs	r2, #0
 800525e:	930d      	str	r3, [sp, #52]	; 0x34
 8005260:	9213      	str	r2, [sp, #76]	; 0x4c
 8005262:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005266:	e62a      	b.n	8004ebe <_svfprintf_r+0x10be>
 8005268:	aa27      	add	r2, sp, #156	; 0x9c
 800526a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800526c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800526e:	f004 fadd 	bl	800982c <__ssprint_r>
 8005272:	2800      	cmp	r0, #0
 8005274:	f47e aebe 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 8005278:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800527a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800527c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005280:	e4e6      	b.n	8004c50 <_svfprintf_r+0xe50>
 8005282:	bf00      	nop
 8005284:	0800a384 	.word	0x0800a384
 8005288:	0800a334 	.word	0x0800a334
 800528c:	66666667 	.word	0x66666667
 8005290:	aa27      	add	r2, sp, #156	; 0x9c
 8005292:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005294:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005296:	f004 fac9 	bl	800982c <__ssprint_r>
 800529a:	2800      	cmp	r0, #0
 800529c:	f47e aeaa 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 80052a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052a4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80052ac:	e4e8      	b.n	8004c80 <_svfprintf_r+0xe80>
 80052ae:	2d06      	cmp	r5, #6
 80052b0:	462b      	mov	r3, r5
 80052b2:	bf28      	it	cs
 80052b4:	2306      	movcs	r3, #6
 80052b6:	930d      	str	r3, [sp, #52]	; 0x34
 80052b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80052bc:	46b3      	mov	fp, r6
 80052be:	970e      	str	r7, [sp, #56]	; 0x38
 80052c0:	9613      	str	r6, [sp, #76]	; 0x4c
 80052c2:	4637      	mov	r7, r6
 80052c4:	9308      	str	r3, [sp, #32]
 80052c6:	4e88      	ldr	r6, [pc, #544]	; (80054e8 <_svfprintf_r+0x16e8>)
 80052c8:	f7fe bf6c 	b.w	80041a4 <_svfprintf_r+0x3a4>
 80052cc:	f04f 0b06 	mov.w	fp, #6
 80052d0:	e593      	b.n	8004dfa <_svfprintf_r+0xffa>
 80052d2:	a825      	add	r0, sp, #148	; 0x94
 80052d4:	a922      	add	r1, sp, #136	; 0x88
 80052d6:	aa21      	add	r2, sp, #132	; 0x84
 80052d8:	2303      	movs	r3, #3
 80052da:	9004      	str	r0, [sp, #16]
 80052dc:	9202      	str	r2, [sp, #8]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	f8cd b004 	str.w	fp, [sp, #4]
 80052e4:	9103      	str	r1, [sp, #12]
 80052e6:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80052ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80052ec:	f001 fdf4 	bl	8006ed8 <_dtoa_r>
 80052f0:	465d      	mov	r5, fp
 80052f2:	4606      	mov	r6, r0
 80052f4:	eb00 040b 	add.w	r4, r0, fp
 80052f8:	e6f2      	b.n	80050e0 <_svfprintf_r+0x12e0>
 80052fa:	272d      	movs	r7, #45	; 0x2d
 80052fc:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005300:	f7ff b8a3 	b.w	800444a <_svfprintf_r+0x64a>
 8005304:	9307      	str	r3, [sp, #28]
 8005306:	f7ff b94c 	b.w	80045a2 <_svfprintf_r+0x7a2>
 800530a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800530e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8005312:	931d      	str	r3, [sp, #116]	; 0x74
 8005314:	232d      	movs	r3, #45	; 0x2d
 8005316:	911c      	str	r1, [sp, #112]	; 0x70
 8005318:	9308      	str	r3, [sp, #32]
 800531a:	e57c      	b.n	8004e16 <_svfprintf_r+0x1016>
 800531c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800531e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005320:	4413      	add	r3, r2
 8005322:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005324:	930d      	str	r3, [sp, #52]	; 0x34
 8005326:	2a00      	cmp	r2, #0
 8005328:	f340 8089 	ble.w	800543e <_svfprintf_r+0x163e>
 800532c:	2267      	movs	r2, #103	; 0x67
 800532e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005332:	9211      	str	r2, [sp, #68]	; 0x44
 8005334:	e5c3      	b.n	8004ebe <_svfprintf_r+0x10be>
 8005336:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005338:	2b47      	cmp	r3, #71	; 0x47
 800533a:	f47f ad8f 	bne.w	8004e5c <_svfprintf_r+0x105c>
 800533e:	9b07      	ldr	r3, [sp, #28]
 8005340:	07db      	lsls	r3, r3, #31
 8005342:	f53f aec7 	bmi.w	80050d4 <_svfprintf_r+0x12d4>
 8005346:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005348:	2f47      	cmp	r7, #71	; 0x47
 800534a:	eba3 0306 	sub.w	r3, r3, r6
 800534e:	9312      	str	r3, [sp, #72]	; 0x48
 8005350:	f43f af17 	beq.w	8005182 <_svfprintf_r+0x1382>
 8005354:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005356:	e739      	b.n	80051cc <_svfprintf_r+0x13cc>
 8005358:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800535c:	970e      	str	r7, [sp, #56]	; 0x38
 800535e:	9308      	str	r3, [sp, #32]
 8005360:	950d      	str	r5, [sp, #52]	; 0x34
 8005362:	4683      	mov	fp, r0
 8005364:	9013      	str	r0, [sp, #76]	; 0x4c
 8005366:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800536a:	f7fe bf1b 	b.w	80041a4 <_svfprintf_r+0x3a4>
 800536e:	2b00      	cmp	r3, #0
 8005370:	dd6d      	ble.n	800544e <_svfprintf_r+0x164e>
 8005372:	f1bb 0f00 	cmp.w	fp, #0
 8005376:	d14f      	bne.n	8005418 <_svfprintf_r+0x1618>
 8005378:	9a07      	ldr	r2, [sp, #28]
 800537a:	07d4      	lsls	r4, r2, #31
 800537c:	d44c      	bmi.n	8005418 <_svfprintf_r+0x1618>
 800537e:	461a      	mov	r2, r3
 8005380:	920d      	str	r2, [sp, #52]	; 0x34
 8005382:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005386:	e59a      	b.n	8004ebe <_svfprintf_r+0x10be>
 8005388:	9b07      	ldr	r3, [sp, #28]
 800538a:	07db      	lsls	r3, r3, #31
 800538c:	465f      	mov	r7, fp
 800538e:	d505      	bpl.n	800539c <_svfprintf_r+0x159c>
 8005390:	ae44      	add	r6, sp, #272	; 0x110
 8005392:	2330      	movs	r3, #48	; 0x30
 8005394:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8005398:	f7fe befa 	b.w	8004190 <_svfprintf_r+0x390>
 800539c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80053a0:	ae34      	add	r6, sp, #208	; 0xd0
 80053a2:	f7fe bef8 	b.w	8004196 <_svfprintf_r+0x396>
 80053a6:	aa27      	add	r2, sp, #156	; 0x9c
 80053a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80053ac:	f004 fa3e 	bl	800982c <__ssprint_r>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	f47e ae1f 	bne.w	8003ff4 <_svfprintf_r+0x1f4>
 80053b6:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80053b8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80053ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80053bc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80053c0:	e620      	b.n	8005004 <_svfprintf_r+0x1204>
 80053c2:	46a0      	mov	r8, r4
 80053c4:	2500      	movs	r5, #0
 80053c6:	f7fe bd77 	b.w	8003eb8 <_svfprintf_r+0xb8>
 80053ca:	3330      	adds	r3, #48	; 0x30
 80053cc:	2230      	movs	r2, #48	; 0x30
 80053ce:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 80053d2:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 80053d6:	ab24      	add	r3, sp, #144	; 0x90
 80053d8:	e734      	b.n	8005244 <_svfprintf_r+0x1444>
 80053da:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80053dc:	e552      	b.n	8004e84 <_svfprintf_r+0x1084>
 80053de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80053e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80053e2:	4413      	add	r3, r2
 80053e4:	2267      	movs	r2, #103	; 0x67
 80053e6:	930d      	str	r3, [sp, #52]	; 0x34
 80053e8:	9211      	str	r2, [sp, #68]	; 0x44
 80053ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80053ee:	e566      	b.n	8004ebe <_svfprintf_r+0x10be>
 80053f0:	4e3e      	ldr	r6, [pc, #248]	; (80054ec <_svfprintf_r+0x16ec>)
 80053f2:	4b3f      	ldr	r3, [pc, #252]	; (80054f0 <_svfprintf_r+0x16f0>)
 80053f4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80053f8:	f7ff b829 	b.w	800444e <_svfprintf_r+0x64e>
 80053fc:	2200      	movs	r2, #0
 80053fe:	2300      	movs	r3, #0
 8005400:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8005404:	f7fe fa2c 	bl	8003860 <__aeabi_dcmpeq>
 8005408:	2800      	cmp	r0, #0
 800540a:	f47f ae6d 	bne.w	80050e8 <_svfprintf_r+0x12e8>
 800540e:	f1c5 0501 	rsb	r5, r5, #1
 8005412:	9521      	str	r5, [sp, #132]	; 0x84
 8005414:	442c      	add	r4, r5
 8005416:	e522      	b.n	8004e5e <_svfprintf_r+0x105e>
 8005418:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800541a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800541c:	189d      	adds	r5, r3, r2
 800541e:	eb05 030b 	add.w	r3, r5, fp
 8005422:	930d      	str	r3, [sp, #52]	; 0x34
 8005424:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005428:	e549      	b.n	8004ebe <_svfprintf_r+0x10be>
 800542a:	9b07      	ldr	r3, [sp, #28]
 800542c:	f013 0301 	ands.w	r3, r3, #1
 8005430:	f47f af11 	bne.w	8005256 <_svfprintf_r+0x1456>
 8005434:	9313      	str	r3, [sp, #76]	; 0x4c
 8005436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005438:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800543c:	e53f      	b.n	8004ebe <_svfprintf_r+0x10be>
 800543e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005440:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005442:	f1c3 0301 	rsb	r3, r3, #1
 8005446:	441a      	add	r2, r3
 8005448:	4613      	mov	r3, r2
 800544a:	920d      	str	r2, [sp, #52]	; 0x34
 800544c:	e76e      	b.n	800532c <_svfprintf_r+0x152c>
 800544e:	f1bb 0f00 	cmp.w	fp, #0
 8005452:	d102      	bne.n	800545a <_svfprintf_r+0x165a>
 8005454:	9b07      	ldr	r3, [sp, #28]
 8005456:	07d8      	lsls	r0, r3, #31
 8005458:	d507      	bpl.n	800546a <_svfprintf_r+0x166a>
 800545a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800545c:	1c5d      	adds	r5, r3, #1
 800545e:	eb05 030b 	add.w	r3, r5, fp
 8005462:	930d      	str	r3, [sp, #52]	; 0x34
 8005464:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005468:	e529      	b.n	8004ebe <_svfprintf_r+0x10be>
 800546a:	2301      	movs	r3, #1
 800546c:	930d      	str	r3, [sp, #52]	; 0x34
 800546e:	e526      	b.n	8004ebe <_svfprintf_r+0x10be>
 8005470:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005472:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005476:	6805      	ldr	r5, [r0, #0]
 8005478:	3004      	adds	r0, #4
 800547a:	2d00      	cmp	r5, #0
 800547c:	900e      	str	r0, [sp, #56]	; 0x38
 800547e:	46a0      	mov	r8, r4
 8005480:	f6be ad18 	bge.w	8003eb4 <_svfprintf_r+0xb4>
 8005484:	f04f 35ff 	mov.w	r5, #4294967295
 8005488:	f7fe bd14 	b.w	8003eb4 <_svfprintf_r+0xb4>
 800548c:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005490:	f7fe bdc1 	b.w	8004016 <_svfprintf_r+0x216>
 8005494:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8005498:	e6d4      	b.n	8005244 <_svfprintf_r+0x1444>
 800549a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800549c:	230c      	movs	r3, #12
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295
 80054a4:	f7fe bdaf 	b.w	8004006 <_svfprintf_r+0x206>
 80054a8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80054ac:	f7fe be30 	b.w	8004110 <_svfprintf_r+0x310>
 80054b0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80054b4:	f7fe bf92 	b.w	80043dc <_svfprintf_r+0x5dc>
 80054b8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80054bc:	f7ff b845 	b.w	800454a <_svfprintf_r+0x74a>
 80054c0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80054c4:	f7ff b813 	b.w	80044ee <_svfprintf_r+0x6ee>
 80054c8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80054cc:	f7fe bfe5 	b.w	800449a <_svfprintf_r+0x69a>
 80054d0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80054d4:	f7ff b92d 	b.w	8004732 <_svfprintf_r+0x932>
 80054d8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80054dc:	f7ff b908 	b.w	80046f0 <_svfprintf_r+0x8f0>
 80054e0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80054e4:	f7ff b8e6 	b.w	80046b4 <_svfprintf_r+0x8b4>
 80054e8:	0800a37c 	.word	0x0800a37c
 80054ec:	0800a350 	.word	0x0800a350
 80054f0:	0800a34c 	.word	0x0800a34c
 80054f4:	00000000 	.word	0x00000000

080054f8 <_vfprintf_r>:
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	b0c5      	sub	sp, #276	; 0x114
 80054fe:	461c      	mov	r4, r3
 8005500:	9108      	str	r1, [sp, #32]
 8005502:	4616      	mov	r6, r2
 8005504:	4605      	mov	r5, r0
 8005506:	900a      	str	r0, [sp, #40]	; 0x28
 8005508:	f003 f82e 	bl	8008568 <_localeconv_r>
 800550c:	6803      	ldr	r3, [r0, #0]
 800550e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005510:	4618      	mov	r0, r3
 8005512:	f7fe fbb5 	bl	8003c80 <strlen>
 8005516:	940e      	str	r4, [sp, #56]	; 0x38
 8005518:	9016      	str	r0, [sp, #88]	; 0x58
 800551a:	b11d      	cbz	r5, 8005524 <_vfprintf_r+0x2c>
 800551c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 8123 	beq.w	800576a <_vfprintf_r+0x272>
 8005524:	9808      	ldr	r0, [sp, #32]
 8005526:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 800552a:	b293      	uxth	r3, r2
 800552c:	0499      	lsls	r1, r3, #18
 800552e:	d407      	bmi.n	8005540 <_vfprintf_r+0x48>
 8005530:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8005532:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8005536:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800553a:	8183      	strh	r3, [r0, #12]
 800553c:	6641      	str	r1, [r0, #100]	; 0x64
 800553e:	b29b      	uxth	r3, r3
 8005540:	071a      	lsls	r2, r3, #28
 8005542:	f140 80dd 	bpl.w	8005700 <_vfprintf_r+0x208>
 8005546:	9a08      	ldr	r2, [sp, #32]
 8005548:	6912      	ldr	r2, [r2, #16]
 800554a:	2a00      	cmp	r2, #0
 800554c:	f000 80d8 	beq.w	8005700 <_vfprintf_r+0x208>
 8005550:	f003 031a 	and.w	r3, r3, #26
 8005554:	2b0a      	cmp	r3, #10
 8005556:	f000 80e1 	beq.w	800571c <_vfprintf_r+0x224>
 800555a:	ed9f 7b87 	vldr	d7, [pc, #540]	; 8005778 <_vfprintf_r+0x280>
 800555e:	2300      	movs	r3, #0
 8005560:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005564:	9312      	str	r3, [sp, #72]	; 0x48
 8005566:	9329      	str	r3, [sp, #164]	; 0xa4
 8005568:	9328      	str	r3, [sp, #160]	; 0xa0
 800556a:	9319      	str	r3, [sp, #100]	; 0x64
 800556c:	930b      	str	r3, [sp, #44]	; 0x2c
 800556e:	f8df a214 	ldr.w	sl, [pc, #532]	; 8005784 <_vfprintf_r+0x28c>
 8005572:	ab34      	add	r3, sp, #208	; 0xd0
 8005574:	9327      	str	r3, [sp, #156]	; 0x9c
 8005576:	4699      	mov	r9, r3
 8005578:	46b0      	mov	r8, r6
 800557a:	f898 3000 	ldrb.w	r3, [r8]
 800557e:	4644      	mov	r4, r8
 8005580:	b1eb      	cbz	r3, 80055be <_vfprintf_r+0xc6>
 8005582:	2b25      	cmp	r3, #37	; 0x25
 8005584:	d102      	bne.n	800558c <_vfprintf_r+0x94>
 8005586:	e01a      	b.n	80055be <_vfprintf_r+0xc6>
 8005588:	2b25      	cmp	r3, #37	; 0x25
 800558a:	d003      	beq.n	8005594 <_vfprintf_r+0x9c>
 800558c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f9      	bne.n	8005588 <_vfprintf_r+0x90>
 8005594:	ebc8 0504 	rsb	r5, r8, r4
 8005598:	b18d      	cbz	r5, 80055be <_vfprintf_r+0xc6>
 800559a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800559c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800559e:	f8c9 8000 	str.w	r8, [r9]
 80055a2:	3301      	adds	r3, #1
 80055a4:	442a      	add	r2, r5
 80055a6:	2b07      	cmp	r3, #7
 80055a8:	f8c9 5004 	str.w	r5, [r9, #4]
 80055ac:	9229      	str	r2, [sp, #164]	; 0xa4
 80055ae:	9328      	str	r3, [sp, #160]	; 0xa0
 80055b0:	f300 80c2 	bgt.w	8005738 <_vfprintf_r+0x240>
 80055b4:	f109 0908 	add.w	r9, r9, #8
 80055b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ba:	442b      	add	r3, r5
 80055bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80055be:	7823      	ldrb	r3, [r4, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 80c2 	beq.w	800574a <_vfprintf_r+0x252>
 80055c6:	2300      	movs	r3, #0
 80055c8:	461a      	mov	r2, r3
 80055ca:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80055ce:	4619      	mov	r1, r3
 80055d0:	930c      	str	r3, [sp, #48]	; 0x30
 80055d2:	9307      	str	r3, [sp, #28]
 80055d4:	f04f 3bff 	mov.w	fp, #4294967295
 80055d8:	7863      	ldrb	r3, [r4, #1]
 80055da:	f104 0801 	add.w	r8, r4, #1
 80055de:	465d      	mov	r5, fp
 80055e0:	f108 0801 	add.w	r8, r8, #1
 80055e4:	f1a3 0020 	sub.w	r0, r3, #32
 80055e8:	2858      	cmp	r0, #88	; 0x58
 80055ea:	f200 8459 	bhi.w	8005ea0 <_vfprintf_r+0x9a8>
 80055ee:	e8df f010 	tbh	[pc, r0, lsl #1]
 80055f2:	040f      	.short	0x040f
 80055f4:	04570457 	.word	0x04570457
 80055f8:	04570418 	.word	0x04570418
 80055fc:	04570457 	.word	0x04570457
 8005600:	04570457 	.word	0x04570457
 8005604:	03620457 	.word	0x03620457
 8005608:	04570449 	.word	0x04570449
 800560c:	0109005d 	.word	0x0109005d
 8005610:	01250457 	.word	0x01250457
 8005614:	03700370 	.word	0x03700370
 8005618:	03700370 	.word	0x03700370
 800561c:	03700370 	.word	0x03700370
 8005620:	03700370 	.word	0x03700370
 8005624:	04570370 	.word	0x04570370
 8005628:	04570457 	.word	0x04570457
 800562c:	04570457 	.word	0x04570457
 8005630:	04570457 	.word	0x04570457
 8005634:	04570457 	.word	0x04570457
 8005638:	03800457 	.word	0x03800457
 800563c:	0457039d 	.word	0x0457039d
 8005640:	0457039d 	.word	0x0457039d
 8005644:	04570457 	.word	0x04570457
 8005648:	03eb0457 	.word	0x03eb0457
 800564c:	04570457 	.word	0x04570457
 8005650:	0457012c 	.word	0x0457012c
 8005654:	04570457 	.word	0x04570457
 8005658:	04570457 	.word	0x04570457
 800565c:	04570155 	.word	0x04570155
 8005660:	02b40457 	.word	0x02b40457
 8005664:	04570457 	.word	0x04570457
 8005668:	04570457 	.word	0x04570457
 800566c:	04570457 	.word	0x04570457
 8005670:	04570457 	.word	0x04570457
 8005674:	04570457 	.word	0x04570457
 8005678:	030f02f5 	.word	0x030f02f5
 800567c:	039d039d 	.word	0x039d039d
 8005680:	033f039d 	.word	0x033f039d
 8005684:	0457030f 	.word	0x0457030f
 8005688:	03460457 	.word	0x03460457
 800568c:	03500457 	.word	0x03500457
 8005690:	006400cb 	.word	0x006400cb
 8005694:	04570420 	.word	0x04570420
 8005698:	04570428 	.word	0x04570428
 800569c:	045703f2 	.word	0x045703f2
 80056a0:	03fa0457 	.word	0x03fa0457
 80056a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80056a6:	930e      	str	r3, [sp, #56]	; 0x38
 80056a8:	4240      	negs	r0, r0
 80056aa:	900c      	str	r0, [sp, #48]	; 0x30
 80056ac:	9b07      	ldr	r3, [sp, #28]
 80056ae:	f043 0304 	orr.w	r3, r3, #4
 80056b2:	9307      	str	r3, [sp, #28]
 80056b4:	f898 3000 	ldrb.w	r3, [r8]
 80056b8:	e792      	b.n	80055e0 <_vfprintf_r+0xe8>
 80056ba:	980e      	ldr	r0, [sp, #56]	; 0x38
 80056bc:	46ab      	mov	fp, r5
 80056be:	2100      	movs	r1, #0
 80056c0:	6804      	ldr	r4, [r0, #0]
 80056c2:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80056c6:	1d07      	adds	r7, r0, #4
 80056c8:	9807      	ldr	r0, [sp, #28]
 80056ca:	2330      	movs	r3, #48	; 0x30
 80056cc:	2278      	movs	r2, #120	; 0x78
 80056ce:	458b      	cmp	fp, r1
 80056d0:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 80056d4:	f04f 0500 	mov.w	r5, #0
 80056d8:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 80056dc:	f040 0302 	orr.w	r3, r0, #2
 80056e0:	f2c0 83fb 	blt.w	8005eda <_vfprintf_r+0x9e2>
 80056e4:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	9307      	str	r3, [sp, #28]
 80056ee:	ea54 0305 	orrs.w	r3, r4, r5
 80056f2:	970e      	str	r7, [sp, #56]	; 0x38
 80056f4:	f000 83cc 	beq.w	8005e90 <_vfprintf_r+0x998>
 80056f8:	460f      	mov	r7, r1
 80056fa:	9211      	str	r2, [sp, #68]	; 0x44
 80056fc:	4820      	ldr	r0, [pc, #128]	; (8005780 <_vfprintf_r+0x288>)
 80056fe:	e25d      	b.n	8005bbc <_vfprintf_r+0x6c4>
 8005700:	9908      	ldr	r1, [sp, #32]
 8005702:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005704:	f001 faf0 	bl	8006ce8 <__swsetup_r>
 8005708:	2800      	cmp	r0, #0
 800570a:	f041 803f 	bne.w	800678c <_vfprintf_r+0x1294>
 800570e:	9b08      	ldr	r3, [sp, #32]
 8005710:	899b      	ldrh	r3, [r3, #12]
 8005712:	f003 031a 	and.w	r3, r3, #26
 8005716:	2b0a      	cmp	r3, #10
 8005718:	f47f af1f 	bne.w	800555a <_vfprintf_r+0x62>
 800571c:	9908      	ldr	r1, [sp, #32]
 800571e:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8005722:	2b00      	cmp	r3, #0
 8005724:	f6ff af19 	blt.w	800555a <_vfprintf_r+0x62>
 8005728:	4623      	mov	r3, r4
 800572a:	4632      	mov	r2, r6
 800572c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800572e:	f001 fa7f 	bl	8006c30 <__sbprintf>
 8005732:	b045      	add	sp, #276	; 0x114
 8005734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005738:	aa27      	add	r2, sp, #156	; 0x9c
 800573a:	9908      	ldr	r1, [sp, #32]
 800573c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800573e:	f004 f931 	bl	80099a4 <__sprint_r>
 8005742:	b948      	cbnz	r0, 8005758 <_vfprintf_r+0x260>
 8005744:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005748:	e736      	b.n	80055b8 <_vfprintf_r+0xc0>
 800574a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800574c:	b123      	cbz	r3, 8005758 <_vfprintf_r+0x260>
 800574e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005750:	9908      	ldr	r1, [sp, #32]
 8005752:	aa27      	add	r2, sp, #156	; 0x9c
 8005754:	f004 f926 	bl	80099a4 <__sprint_r>
 8005758:	9b08      	ldr	r3, [sp, #32]
 800575a:	899b      	ldrh	r3, [r3, #12]
 800575c:	0659      	lsls	r1, r3, #25
 800575e:	f101 8015 	bmi.w	800678c <_vfprintf_r+0x1294>
 8005762:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005764:	b045      	add	sp, #276	; 0x114
 8005766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800576a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800576c:	f002 fc02 	bl	8007f74 <__sinit>
 8005770:	e6d8      	b.n	8005524 <_vfprintf_r+0x2c>
 8005772:	bf00      	nop
 8005774:	f3af 8000 	nop.w
	...
 8005780:	0800a368 	.word	0x0800a368
 8005784:	0800a398 	.word	0x0800a398
 8005788:	9311      	str	r3, [sp, #68]	; 0x44
 800578a:	46ab      	mov	fp, r5
 800578c:	2a00      	cmp	r2, #0
 800578e:	f041 8232 	bne.w	8006bf6 <_vfprintf_r+0x16fe>
 8005792:	9a07      	ldr	r2, [sp, #28]
 8005794:	f012 0320 	ands.w	r3, r2, #32
 8005798:	d064      	beq.n	8005864 <_vfprintf_r+0x36c>
 800579a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800579c:	3707      	adds	r7, #7
 800579e:	f027 0307 	bic.w	r3, r7, #7
 80057a2:	2700      	movs	r7, #0
 80057a4:	f103 0108 	add.w	r1, r3, #8
 80057a8:	45bb      	cmp	fp, r7
 80057aa:	910e      	str	r1, [sp, #56]	; 0x38
 80057ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80057b0:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80057b4:	f2c0 86ba 	blt.w	800652c <_vfprintf_r+0x1034>
 80057b8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80057bc:	9307      	str	r3, [sp, #28]
 80057be:	ea54 0305 	orrs.w	r3, r4, r5
 80057c2:	f000 8382 	beq.w	8005eca <_vfprintf_r+0x9d2>
 80057c6:	ae34      	add	r6, sp, #208	; 0xd0
 80057c8:	08e2      	lsrs	r2, r4, #3
 80057ca:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 80057ce:	08e9      	lsrs	r1, r5, #3
 80057d0:	f004 0307 	and.w	r3, r4, #7
 80057d4:	460d      	mov	r5, r1
 80057d6:	4614      	mov	r4, r2
 80057d8:	3330      	adds	r3, #48	; 0x30
 80057da:	ea54 0205 	orrs.w	r2, r4, r5
 80057de:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80057e2:	d1f1      	bne.n	80057c8 <_vfprintf_r+0x2d0>
 80057e4:	9a07      	ldr	r2, [sp, #28]
 80057e6:	07d2      	lsls	r2, r2, #31
 80057e8:	f140 8096 	bpl.w	8005918 <_vfprintf_r+0x420>
 80057ec:	2b30      	cmp	r3, #48	; 0x30
 80057ee:	f000 8093 	beq.w	8005918 <_vfprintf_r+0x420>
 80057f2:	2230      	movs	r2, #48	; 0x30
 80057f4:	1e73      	subs	r3, r6, #1
 80057f6:	f806 2c01 	strb.w	r2, [r6, #-1]
 80057fa:	aa34      	add	r2, sp, #208	; 0xd0
 80057fc:	1ad2      	subs	r2, r2, r3
 80057fe:	920d      	str	r2, [sp, #52]	; 0x34
 8005800:	461e      	mov	r6, r3
 8005802:	e08c      	b.n	800591e <_vfprintf_r+0x426>
 8005804:	f898 3000 	ldrb.w	r3, [r8]
 8005808:	2b2a      	cmp	r3, #42	; 0x2a
 800580a:	f108 0401 	add.w	r4, r8, #1
 800580e:	f001 81d0 	beq.w	8006bb2 <_vfprintf_r+0x16ba>
 8005812:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8005816:	2809      	cmp	r0, #9
 8005818:	bf98      	it	ls
 800581a:	2500      	movls	r5, #0
 800581c:	f201 816c 	bhi.w	8006af8 <_vfprintf_r+0x1600>
 8005820:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005824:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005828:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800582c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8005830:	2809      	cmp	r0, #9
 8005832:	d9f5      	bls.n	8005820 <_vfprintf_r+0x328>
 8005834:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8005838:	46a0      	mov	r8, r4
 800583a:	e6d3      	b.n	80055e4 <_vfprintf_r+0xec>
 800583c:	9b07      	ldr	r3, [sp, #28]
 800583e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005842:	9307      	str	r3, [sp, #28]
 8005844:	f898 3000 	ldrb.w	r3, [r8]
 8005848:	e6ca      	b.n	80055e0 <_vfprintf_r+0xe8>
 800584a:	9311      	str	r3, [sp, #68]	; 0x44
 800584c:	46ab      	mov	fp, r5
 800584e:	2a00      	cmp	r2, #0
 8005850:	f041 81d9 	bne.w	8006c06 <_vfprintf_r+0x170e>
 8005854:	9b07      	ldr	r3, [sp, #28]
 8005856:	f043 0310 	orr.w	r3, r3, #16
 800585a:	9307      	str	r3, [sp, #28]
 800585c:	9a07      	ldr	r2, [sp, #28]
 800585e:	f012 0320 	ands.w	r3, r2, #32
 8005862:	d19a      	bne.n	800579a <_vfprintf_r+0x2a2>
 8005864:	9907      	ldr	r1, [sp, #28]
 8005866:	f011 0210 	ands.w	r2, r1, #16
 800586a:	f000 8634 	beq.w	80064d6 <_vfprintf_r+0xfde>
 800586e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005870:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005874:	f1bb 0f00 	cmp.w	fp, #0
 8005878:	6804      	ldr	r4, [r0, #0]
 800587a:	f100 0704 	add.w	r7, r0, #4
 800587e:	f04f 0500 	mov.w	r5, #0
 8005882:	f2c0 8652 	blt.w	800652a <_vfprintf_r+0x1032>
 8005886:	460a      	mov	r2, r1
 8005888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800588c:	9207      	str	r2, [sp, #28]
 800588e:	ea54 0205 	orrs.w	r2, r4, r5
 8005892:	970e      	str	r7, [sp, #56]	; 0x38
 8005894:	f000 8319 	beq.w	8005eca <_vfprintf_r+0x9d2>
 8005898:	461f      	mov	r7, r3
 800589a:	e794      	b.n	80057c6 <_vfprintf_r+0x2ce>
 800589c:	9311      	str	r3, [sp, #68]	; 0x44
 800589e:	46ab      	mov	fp, r5
 80058a0:	2a00      	cmp	r2, #0
 80058a2:	f041 81a0 	bne.w	8006be6 <_vfprintf_r+0x16ee>
 80058a6:	9b07      	ldr	r3, [sp, #28]
 80058a8:	f043 0310 	orr.w	r3, r3, #16
 80058ac:	9307      	str	r3, [sp, #28]
 80058ae:	9a07      	ldr	r2, [sp, #28]
 80058b0:	f012 0320 	ands.w	r3, r2, #32
 80058b4:	f000 84fa 	beq.w	80062ac <_vfprintf_r+0xdb4>
 80058b8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80058ba:	3707      	adds	r7, #7
 80058bc:	f027 0307 	bic.w	r3, r7, #7
 80058c0:	2700      	movs	r7, #0
 80058c2:	f103 0108 	add.w	r1, r3, #8
 80058c6:	45bb      	cmp	fp, r7
 80058c8:	910e      	str	r1, [sp, #56]	; 0x38
 80058ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80058ce:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80058d2:	f2c0 8523 	blt.w	800631c <_vfprintf_r+0xe24>
 80058d6:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80058da:	9307      	str	r3, [sp, #28]
 80058dc:	ea54 0305 	orrs.w	r3, r4, r5
 80058e0:	f000 81bc 	beq.w	8005c5c <_vfprintf_r+0x764>
 80058e4:	2d00      	cmp	r5, #0
 80058e6:	bf08      	it	eq
 80058e8:	2c0a      	cmpeq	r4, #10
 80058ea:	f0c0 851b 	bcc.w	8006324 <_vfprintf_r+0xe2c>
 80058ee:	ae34      	add	r6, sp, #208	; 0xd0
 80058f0:	4620      	mov	r0, r4
 80058f2:	4629      	mov	r1, r5
 80058f4:	220a      	movs	r2, #10
 80058f6:	2300      	movs	r3, #0
 80058f8:	f004 fa60 	bl	8009dbc <__aeabi_uldivmod>
 80058fc:	3230      	adds	r2, #48	; 0x30
 80058fe:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8005902:	4620      	mov	r0, r4
 8005904:	4629      	mov	r1, r5
 8005906:	2300      	movs	r3, #0
 8005908:	220a      	movs	r2, #10
 800590a:	f004 fa57 	bl	8009dbc <__aeabi_uldivmod>
 800590e:	4604      	mov	r4, r0
 8005910:	460d      	mov	r5, r1
 8005912:	ea54 0305 	orrs.w	r3, r4, r5
 8005916:	d1eb      	bne.n	80058f0 <_vfprintf_r+0x3f8>
 8005918:	ab34      	add	r3, sp, #208	; 0xd0
 800591a:	1b9b      	subs	r3, r3, r6
 800591c:	930d      	str	r3, [sp, #52]	; 0x34
 800591e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005920:	455b      	cmp	r3, fp
 8005922:	bfb8      	it	lt
 8005924:	465b      	movlt	r3, fp
 8005926:	9309      	str	r3, [sp, #36]	; 0x24
 8005928:	2300      	movs	r3, #0
 800592a:	9313      	str	r3, [sp, #76]	; 0x4c
 800592c:	b117      	cbz	r7, 8005934 <_vfprintf_r+0x43c>
 800592e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005930:	3301      	adds	r3, #1
 8005932:	9309      	str	r3, [sp, #36]	; 0x24
 8005934:	9b07      	ldr	r3, [sp, #28]
 8005936:	f013 0302 	ands.w	r3, r3, #2
 800593a:	930f      	str	r3, [sp, #60]	; 0x3c
 800593c:	d002      	beq.n	8005944 <_vfprintf_r+0x44c>
 800593e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005940:	3302      	adds	r3, #2
 8005942:	9309      	str	r3, [sp, #36]	; 0x24
 8005944:	9b07      	ldr	r3, [sp, #28]
 8005946:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800594a:	9310      	str	r3, [sp, #64]	; 0x40
 800594c:	f040 82d2 	bne.w	8005ef4 <_vfprintf_r+0x9fc>
 8005950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005954:	1a9d      	subs	r5, r3, r2
 8005956:	2d00      	cmp	r5, #0
 8005958:	f340 82cc 	ble.w	8005ef4 <_vfprintf_r+0x9fc>
 800595c:	2d10      	cmp	r5, #16
 800595e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8005960:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8005962:	4fa8      	ldr	r7, [pc, #672]	; (8005c04 <_vfprintf_r+0x70c>)
 8005964:	dd27      	ble.n	80059b6 <_vfprintf_r+0x4be>
 8005966:	9618      	str	r6, [sp, #96]	; 0x60
 8005968:	4648      	mov	r0, r9
 800596a:	2410      	movs	r4, #16
 800596c:	46b9      	mov	r9, r7
 800596e:	9e08      	ldr	r6, [sp, #32]
 8005970:	462f      	mov	r7, r5
 8005972:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005974:	e004      	b.n	8005980 <_vfprintf_r+0x488>
 8005976:	3f10      	subs	r7, #16
 8005978:	2f10      	cmp	r7, #16
 800597a:	f100 0008 	add.w	r0, r0, #8
 800597e:	dd16      	ble.n	80059ae <_vfprintf_r+0x4b6>
 8005980:	3201      	adds	r2, #1
 8005982:	4ba0      	ldr	r3, [pc, #640]	; (8005c04 <_vfprintf_r+0x70c>)
 8005984:	9228      	str	r2, [sp, #160]	; 0xa0
 8005986:	3110      	adds	r1, #16
 8005988:	2a07      	cmp	r2, #7
 800598a:	9129      	str	r1, [sp, #164]	; 0xa4
 800598c:	e880 0018 	stmia.w	r0, {r3, r4}
 8005990:	ddf1      	ble.n	8005976 <_vfprintf_r+0x47e>
 8005992:	aa27      	add	r2, sp, #156	; 0x9c
 8005994:	4631      	mov	r1, r6
 8005996:	4628      	mov	r0, r5
 8005998:	f004 f804 	bl	80099a4 <__sprint_r>
 800599c:	2800      	cmp	r0, #0
 800599e:	f47f aedb 	bne.w	8005758 <_vfprintf_r+0x260>
 80059a2:	3f10      	subs	r7, #16
 80059a4:	2f10      	cmp	r7, #16
 80059a6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80059a8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80059aa:	a834      	add	r0, sp, #208	; 0xd0
 80059ac:	dce8      	bgt.n	8005980 <_vfprintf_r+0x488>
 80059ae:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80059b0:	463d      	mov	r5, r7
 80059b2:	464f      	mov	r7, r9
 80059b4:	4681      	mov	r9, r0
 80059b6:	3201      	adds	r2, #1
 80059b8:	186c      	adds	r4, r5, r1
 80059ba:	2a07      	cmp	r2, #7
 80059bc:	9429      	str	r4, [sp, #164]	; 0xa4
 80059be:	9228      	str	r2, [sp, #160]	; 0xa0
 80059c0:	f8c9 7000 	str.w	r7, [r9]
 80059c4:	f8c9 5004 	str.w	r5, [r9, #4]
 80059c8:	f300 8428 	bgt.w	800621c <_vfprintf_r+0xd24>
 80059cc:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80059d0:	f109 0908 	add.w	r9, r9, #8
 80059d4:	b177      	cbz	r7, 80059f4 <_vfprintf_r+0x4fc>
 80059d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80059d8:	3301      	adds	r3, #1
 80059da:	3401      	adds	r4, #1
 80059dc:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 80059e0:	2201      	movs	r2, #1
 80059e2:	2b07      	cmp	r3, #7
 80059e4:	9429      	str	r4, [sp, #164]	; 0xa4
 80059e6:	9328      	str	r3, [sp, #160]	; 0xa0
 80059e8:	e889 0006 	stmia.w	r9, {r1, r2}
 80059ec:	f300 83a0 	bgt.w	8006130 <_vfprintf_r+0xc38>
 80059f0:	f109 0908 	add.w	r9, r9, #8
 80059f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059f6:	b16b      	cbz	r3, 8005a14 <_vfprintf_r+0x51c>
 80059f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80059fa:	3301      	adds	r3, #1
 80059fc:	3402      	adds	r4, #2
 80059fe:	a920      	add	r1, sp, #128	; 0x80
 8005a00:	2202      	movs	r2, #2
 8005a02:	2b07      	cmp	r3, #7
 8005a04:	9429      	str	r4, [sp, #164]	; 0xa4
 8005a06:	9328      	str	r3, [sp, #160]	; 0xa0
 8005a08:	e889 0006 	stmia.w	r9, {r1, r2}
 8005a0c:	f300 839c 	bgt.w	8006148 <_vfprintf_r+0xc50>
 8005a10:	f109 0908 	add.w	r9, r9, #8
 8005a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	f000 82d0 	beq.w	8005fbc <_vfprintf_r+0xac4>
 8005a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a1e:	ebc3 070b 	rsb	r7, r3, fp
 8005a22:	2f00      	cmp	r7, #0
 8005a24:	dd33      	ble.n	8005a8e <_vfprintf_r+0x596>
 8005a26:	4a78      	ldr	r2, [pc, #480]	; (8005c08 <_vfprintf_r+0x710>)
 8005a28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005a2a:	920f      	str	r2, [sp, #60]	; 0x3c
 8005a2c:	2f10      	cmp	r7, #16
 8005a2e:	dd22      	ble.n	8005a76 <_vfprintf_r+0x57e>
 8005a30:	4622      	mov	r2, r4
 8005a32:	f04f 0b10 	mov.w	fp, #16
 8005a36:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005a38:	9c08      	ldr	r4, [sp, #32]
 8005a3a:	e004      	b.n	8005a46 <_vfprintf_r+0x54e>
 8005a3c:	3f10      	subs	r7, #16
 8005a3e:	2f10      	cmp	r7, #16
 8005a40:	f109 0908 	add.w	r9, r9, #8
 8005a44:	dd16      	ble.n	8005a74 <_vfprintf_r+0x57c>
 8005a46:	3301      	adds	r3, #1
 8005a48:	3210      	adds	r2, #16
 8005a4a:	2b07      	cmp	r3, #7
 8005a4c:	9229      	str	r2, [sp, #164]	; 0xa4
 8005a4e:	9328      	str	r3, [sp, #160]	; 0xa0
 8005a50:	e889 0c00 	stmia.w	r9, {sl, fp}
 8005a54:	ddf2      	ble.n	8005a3c <_vfprintf_r+0x544>
 8005a56:	aa27      	add	r2, sp, #156	; 0x9c
 8005a58:	4621      	mov	r1, r4
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	f003 ffa2 	bl	80099a4 <__sprint_r>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	f47f ae79 	bne.w	8005758 <_vfprintf_r+0x260>
 8005a66:	3f10      	subs	r7, #16
 8005a68:	2f10      	cmp	r7, #16
 8005a6a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005a6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005a6e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005a72:	dce8      	bgt.n	8005a46 <_vfprintf_r+0x54e>
 8005a74:	4614      	mov	r4, r2
 8005a76:	3301      	adds	r3, #1
 8005a78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a7a:	9328      	str	r3, [sp, #160]	; 0xa0
 8005a7c:	443c      	add	r4, r7
 8005a7e:	2b07      	cmp	r3, #7
 8005a80:	9429      	str	r4, [sp, #164]	; 0xa4
 8005a82:	e889 0084 	stmia.w	r9, {r2, r7}
 8005a86:	f300 8347 	bgt.w	8006118 <_vfprintf_r+0xc20>
 8005a8a:	f109 0908 	add.w	r9, r9, #8
 8005a8e:	9b07      	ldr	r3, [sp, #28]
 8005a90:	05dd      	lsls	r5, r3, #23
 8005a92:	f100 8231 	bmi.w	8005ef8 <_vfprintf_r+0xa00>
 8005a96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005a98:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005a9a:	f8c9 6000 	str.w	r6, [r9]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	440c      	add	r4, r1
 8005aa2:	2b07      	cmp	r3, #7
 8005aa4:	9429      	str	r4, [sp, #164]	; 0xa4
 8005aa6:	f8c9 1004 	str.w	r1, [r9, #4]
 8005aaa:	9328      	str	r3, [sp, #160]	; 0xa0
 8005aac:	f300 831e 	bgt.w	80060ec <_vfprintf_r+0xbf4>
 8005ab0:	f109 0908 	add.w	r9, r9, #8
 8005ab4:	9b07      	ldr	r3, [sp, #28]
 8005ab6:	0758      	lsls	r0, r3, #29
 8005ab8:	d53f      	bpl.n	8005b3a <_vfprintf_r+0x642>
 8005aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005abe:	1a9d      	subs	r5, r3, r2
 8005ac0:	2d00      	cmp	r5, #0
 8005ac2:	dd3a      	ble.n	8005b3a <_vfprintf_r+0x642>
 8005ac4:	2d10      	cmp	r5, #16
 8005ac6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005ac8:	4f4e      	ldr	r7, [pc, #312]	; (8005c04 <_vfprintf_r+0x70c>)
 8005aca:	dd23      	ble.n	8005b14 <_vfprintf_r+0x61c>
 8005acc:	4622      	mov	r2, r4
 8005ace:	2610      	movs	r6, #16
 8005ad0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005ad4:	9c08      	ldr	r4, [sp, #32]
 8005ad6:	e004      	b.n	8005ae2 <_vfprintf_r+0x5ea>
 8005ad8:	3d10      	subs	r5, #16
 8005ada:	2d10      	cmp	r5, #16
 8005adc:	f109 0908 	add.w	r9, r9, #8
 8005ae0:	dd17      	ble.n	8005b12 <_vfprintf_r+0x61a>
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	4947      	ldr	r1, [pc, #284]	; (8005c04 <_vfprintf_r+0x70c>)
 8005ae6:	9328      	str	r3, [sp, #160]	; 0xa0
 8005ae8:	3210      	adds	r2, #16
 8005aea:	2b07      	cmp	r3, #7
 8005aec:	9229      	str	r2, [sp, #164]	; 0xa4
 8005aee:	e889 0042 	stmia.w	r9, {r1, r6}
 8005af2:	ddf1      	ble.n	8005ad8 <_vfprintf_r+0x5e0>
 8005af4:	aa27      	add	r2, sp, #156	; 0x9c
 8005af6:	4621      	mov	r1, r4
 8005af8:	4658      	mov	r0, fp
 8005afa:	f003 ff53 	bl	80099a4 <__sprint_r>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	f47f ae2a 	bne.w	8005758 <_vfprintf_r+0x260>
 8005b04:	3d10      	subs	r5, #16
 8005b06:	2d10      	cmp	r5, #16
 8005b08:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005b0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005b0c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005b10:	dce7      	bgt.n	8005ae2 <_vfprintf_r+0x5ea>
 8005b12:	4614      	mov	r4, r2
 8005b14:	3301      	adds	r3, #1
 8005b16:	442c      	add	r4, r5
 8005b18:	2b07      	cmp	r3, #7
 8005b1a:	9429      	str	r4, [sp, #164]	; 0xa4
 8005b1c:	9328      	str	r3, [sp, #160]	; 0xa0
 8005b1e:	f8c9 7000 	str.w	r7, [r9]
 8005b22:	f8c9 5004 	str.w	r5, [r9, #4]
 8005b26:	dd08      	ble.n	8005b3a <_vfprintf_r+0x642>
 8005b28:	aa27      	add	r2, sp, #156	; 0x9c
 8005b2a:	9908      	ldr	r1, [sp, #32]
 8005b2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005b2e:	f003 ff39 	bl	80099a4 <__sprint_r>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	f47f ae10 	bne.w	8005758 <_vfprintf_r+0x260>
 8005b38:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b40:	428a      	cmp	r2, r1
 8005b42:	bfac      	ite	ge
 8005b44:	189b      	addge	r3, r3, r2
 8005b46:	185b      	addlt	r3, r3, r1
 8005b48:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b4a:	2c00      	cmp	r4, #0
 8005b4c:	f040 82da 	bne.w	8006104 <_vfprintf_r+0xc0c>
 8005b50:	2300      	movs	r3, #0
 8005b52:	9328      	str	r3, [sp, #160]	; 0xa0
 8005b54:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005b58:	e50f      	b.n	800557a <_vfprintf_r+0x82>
 8005b5a:	9311      	str	r3, [sp, #68]	; 0x44
 8005b5c:	46ab      	mov	fp, r5
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	f041 803d 	bne.w	8006bde <_vfprintf_r+0x16e6>
 8005b64:	9b07      	ldr	r3, [sp, #28]
 8005b66:	4829      	ldr	r0, [pc, #164]	; (8005c0c <_vfprintf_r+0x714>)
 8005b68:	069c      	lsls	r4, r3, #26
 8005b6a:	f140 8146 	bpl.w	8005dfa <_vfprintf_r+0x902>
 8005b6e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005b70:	3707      	adds	r7, #7
 8005b72:	f027 0307 	bic.w	r3, r7, #7
 8005b76:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005b7a:	f103 0208 	add.w	r2, r3, #8
 8005b7e:	920e      	str	r2, [sp, #56]	; 0x38
 8005b80:	9a07      	ldr	r2, [sp, #28]
 8005b82:	f012 0701 	ands.w	r7, r2, #1
 8005b86:	f000 82eb 	beq.w	8006160 <_vfprintf_r+0xc68>
 8005b8a:	ea54 0305 	orrs.w	r3, r4, r5
 8005b8e:	f000 8582 	beq.w	8006696 <_vfprintf_r+0x119e>
 8005b92:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8005b96:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8005b9a:	2700      	movs	r7, #0
 8005b9c:	9a07      	ldr	r2, [sp, #28]
 8005b9e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005ba2:	2330      	movs	r3, #48	; 0x30
 8005ba4:	45bb      	cmp	fp, r7
 8005ba6:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8005baa:	f042 0302 	orr.w	r3, r2, #2
 8005bae:	f2c0 873b 	blt.w	8006a28 <_vfprintf_r+0x1530>
 8005bb2:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8005bb6:	f043 0302 	orr.w	r3, r3, #2
 8005bba:	9307      	str	r3, [sp, #28]
 8005bbc:	ae34      	add	r6, sp, #208	; 0xd0
 8005bbe:	0923      	lsrs	r3, r4, #4
 8005bc0:	f004 010f 	and.w	r1, r4, #15
 8005bc4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8005bc8:	092a      	lsrs	r2, r5, #4
 8005bca:	461c      	mov	r4, r3
 8005bcc:	4615      	mov	r5, r2
 8005bce:	5c43      	ldrb	r3, [r0, r1]
 8005bd0:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8005bd4:	ea54 0305 	orrs.w	r3, r4, r5
 8005bd8:	d1f1      	bne.n	8005bbe <_vfprintf_r+0x6c6>
 8005bda:	e69d      	b.n	8005918 <_vfprintf_r+0x420>
 8005bdc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005bde:	9311      	str	r3, [sp, #68]	; 0x44
 8005be0:	680a      	ldr	r2, [r1, #0]
 8005be2:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8005be6:	2300      	movs	r3, #0
 8005be8:	460a      	mov	r2, r1
 8005bea:	461f      	mov	r7, r3
 8005bec:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005bf0:	3204      	adds	r2, #4
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bf6:	46bb      	mov	fp, r7
 8005bf8:	9713      	str	r7, [sp, #76]	; 0x4c
 8005bfa:	920e      	str	r2, [sp, #56]	; 0x38
 8005bfc:	930d      	str	r3, [sp, #52]	; 0x34
 8005bfe:	ae2a      	add	r6, sp, #168	; 0xa8
 8005c00:	e698      	b.n	8005934 <_vfprintf_r+0x43c>
 8005c02:	bf00      	nop
 8005c04:	0800a3a8 	.word	0x0800a3a8
 8005c08:	0800a398 	.word	0x0800a398
 8005c0c:	0800a354 	.word	0x0800a354
 8005c10:	9311      	str	r3, [sp, #68]	; 0x44
 8005c12:	46ab      	mov	fp, r5
 8005c14:	2a00      	cmp	r2, #0
 8005c16:	f040 87ea 	bne.w	8006bee <_vfprintf_r+0x16f6>
 8005c1a:	9b07      	ldr	r3, [sp, #28]
 8005c1c:	069b      	lsls	r3, r3, #26
 8005c1e:	d574      	bpl.n	8005d0a <_vfprintf_r+0x812>
 8005c20:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005c22:	3707      	adds	r7, #7
 8005c24:	f027 0707 	bic.w	r7, r7, #7
 8005c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c2c:	f107 0108 	add.w	r1, r7, #8
 8005c30:	910e      	str	r1, [sp, #56]	; 0x38
 8005c32:	4614      	mov	r4, r2
 8005c34:	461d      	mov	r5, r3
 8005c36:	2a00      	cmp	r2, #0
 8005c38:	f173 0300 	sbcs.w	r3, r3, #0
 8005c3c:	f2c0 843a 	blt.w	80064b4 <_vfprintf_r+0xfbc>
 8005c40:	f1bb 0f00 	cmp.w	fp, #0
 8005c44:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005c48:	f2c0 8368 	blt.w	800631c <_vfprintf_r+0xe24>
 8005c4c:	9b07      	ldr	r3, [sp, #28]
 8005c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c52:	9307      	str	r3, [sp, #28]
 8005c54:	ea54 0305 	orrs.w	r3, r4, r5
 8005c58:	f47f ae44 	bne.w	80058e4 <_vfprintf_r+0x3ec>
 8005c5c:	f1bb 0f00 	cmp.w	fp, #0
 8005c60:	f040 8408 	bne.w	8006474 <_vfprintf_r+0xf7c>
 8005c64:	f04f 0b00 	mov.w	fp, #0
 8005c68:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8005c6c:	ae34      	add	r6, sp, #208	; 0xd0
 8005c6e:	e656      	b.n	800591e <_vfprintf_r+0x426>
 8005c70:	9b07      	ldr	r3, [sp, #28]
 8005c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c76:	9307      	str	r3, [sp, #28]
 8005c78:	f898 3000 	ldrb.w	r3, [r8]
 8005c7c:	e4b0      	b.n	80055e0 <_vfprintf_r+0xe8>
 8005c7e:	f898 3000 	ldrb.w	r3, [r8]
 8005c82:	2b6c      	cmp	r3, #108	; 0x6c
 8005c84:	f000 85d5 	beq.w	8006832 <_vfprintf_r+0x133a>
 8005c88:	9807      	ldr	r0, [sp, #28]
 8005c8a:	f040 0010 	orr.w	r0, r0, #16
 8005c8e:	9007      	str	r0, [sp, #28]
 8005c90:	e4a6      	b.n	80055e0 <_vfprintf_r+0xe8>
 8005c92:	2a00      	cmp	r2, #0
 8005c94:	f040 879f 	bne.w	8006bd6 <_vfprintf_r+0x16de>
 8005c98:	9b07      	ldr	r3, [sp, #28]
 8005c9a:	069f      	lsls	r7, r3, #26
 8005c9c:	f140 84e4 	bpl.w	8006668 <_vfprintf_r+0x1170>
 8005ca0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ca2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ca4:	6813      	ldr	r3, [r2, #0]
 8005ca6:	17cd      	asrs	r5, r1, #31
 8005ca8:	4608      	mov	r0, r1
 8005caa:	3204      	adds	r2, #4
 8005cac:	4629      	mov	r1, r5
 8005cae:	920e      	str	r2, [sp, #56]	; 0x38
 8005cb0:	e9c3 0100 	strd	r0, r1, [r3]
 8005cb4:	e461      	b.n	800557a <_vfprintf_r+0x82>
 8005cb6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	930c      	str	r3, [sp, #48]	; 0x30
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	4623      	mov	r3, r4
 8005cc2:	f103 0304 	add.w	r3, r3, #4
 8005cc6:	f6ff aced 	blt.w	80056a4 <_vfprintf_r+0x1ac>
 8005cca:	930e      	str	r3, [sp, #56]	; 0x38
 8005ccc:	f898 3000 	ldrb.w	r3, [r8]
 8005cd0:	e486      	b.n	80055e0 <_vfprintf_r+0xe8>
 8005cd2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	461c      	mov	r4, r3
 8005cda:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005cde:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005ce2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8005ce6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8005cea:	2809      	cmp	r0, #9
 8005cec:	d9f5      	bls.n	8005cda <_vfprintf_r+0x7e2>
 8005cee:	940c      	str	r4, [sp, #48]	; 0x30
 8005cf0:	e478      	b.n	80055e4 <_vfprintf_r+0xec>
 8005cf2:	9311      	str	r3, [sp, #68]	; 0x44
 8005cf4:	46ab      	mov	fp, r5
 8005cf6:	2a00      	cmp	r2, #0
 8005cf8:	f040 8769 	bne.w	8006bce <_vfprintf_r+0x16d6>
 8005cfc:	9b07      	ldr	r3, [sp, #28]
 8005cfe:	f043 0310 	orr.w	r3, r3, #16
 8005d02:	9307      	str	r3, [sp, #28]
 8005d04:	9b07      	ldr	r3, [sp, #28]
 8005d06:	069b      	lsls	r3, r3, #26
 8005d08:	d48a      	bmi.n	8005c20 <_vfprintf_r+0x728>
 8005d0a:	9b07      	ldr	r3, [sp, #28]
 8005d0c:	06df      	lsls	r7, r3, #27
 8005d0e:	f100 8294 	bmi.w	800623a <_vfprintf_r+0xd42>
 8005d12:	9b07      	ldr	r3, [sp, #28]
 8005d14:	065e      	lsls	r6, r3, #25
 8005d16:	f140 8290 	bpl.w	800623a <_vfprintf_r+0xd42>
 8005d1a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005d1c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8005d20:	3104      	adds	r1, #4
 8005d22:	17e5      	asrs	r5, r4, #31
 8005d24:	4622      	mov	r2, r4
 8005d26:	462b      	mov	r3, r5
 8005d28:	910e      	str	r1, [sp, #56]	; 0x38
 8005d2a:	e784      	b.n	8005c36 <_vfprintf_r+0x73e>
 8005d2c:	9311      	str	r3, [sp, #68]	; 0x44
 8005d2e:	46ab      	mov	fp, r5
 8005d30:	2a00      	cmp	r2, #0
 8005d32:	f040 8770 	bne.w	8006c16 <_vfprintf_r+0x171e>
 8005d36:	9b07      	ldr	r3, [sp, #28]
 8005d38:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005d3a:	071d      	lsls	r5, r3, #28
 8005d3c:	f107 0707 	add.w	r7, r7, #7
 8005d40:	f140 8487 	bpl.w	8006652 <_vfprintf_r+0x115a>
 8005d44:	f027 0307 	bic.w	r3, r7, #7
 8005d48:	ed93 7b00 	vldr	d7, [r3]
 8005d4c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005d50:	f103 0208 	add.w	r2, r3, #8
 8005d54:	920e      	str	r2, [sp, #56]	; 0x38
 8005d56:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8005d5a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8005d5e:	911a      	str	r1, [sp, #104]	; 0x68
 8005d60:	931b      	str	r3, [sp, #108]	; 0x6c
 8005d62:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8005d66:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	4bb5      	ldr	r3, [pc, #724]	; (8006044 <_vfprintf_r+0xb4c>)
 8005d70:	f7fd fda8 	bl	80038c4 <__aeabi_dcmpun>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	f040 83eb 	bne.w	8006550 <_vfprintf_r+0x1058>
 8005d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7e:	4bb1      	ldr	r3, [pc, #708]	; (8006044 <_vfprintf_r+0xb4c>)
 8005d80:	4620      	mov	r0, r4
 8005d82:	4629      	mov	r1, r5
 8005d84:	f7fd fd80 	bl	8003888 <__aeabi_dcmple>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	f040 83e1 	bne.w	8006550 <_vfprintf_r+0x1058>
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2300      	movs	r3, #0
 8005d92:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005d96:	f7fd fd6d 	bl	8003874 <__aeabi_dcmplt>
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	f040 864a 	bne.w	8006a34 <_vfprintf_r+0x153c>
 8005da0:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005da4:	4ea8      	ldr	r6, [pc, #672]	; (8006048 <_vfprintf_r+0xb50>)
 8005da6:	4ba9      	ldr	r3, [pc, #676]	; (800604c <_vfprintf_r+0xb54>)
 8005da8:	9907      	ldr	r1, [sp, #28]
 8005daa:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005dae:	9107      	str	r1, [sp, #28]
 8005db0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005db2:	2203      	movs	r2, #3
 8005db4:	f04f 0b00 	mov.w	fp, #0
 8005db8:	9209      	str	r2, [sp, #36]	; 0x24
 8005dba:	2947      	cmp	r1, #71	; 0x47
 8005dbc:	bfd8      	it	le
 8005dbe:	461e      	movle	r6, r3
 8005dc0:	920d      	str	r2, [sp, #52]	; 0x34
 8005dc2:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8005dc6:	e5b1      	b.n	800592c <_vfprintf_r+0x434>
 8005dc8:	9b07      	ldr	r3, [sp, #28]
 8005dca:	f043 0308 	orr.w	r3, r3, #8
 8005dce:	9307      	str	r3, [sp, #28]
 8005dd0:	f898 3000 	ldrb.w	r3, [r8]
 8005dd4:	e404      	b.n	80055e0 <_vfprintf_r+0xe8>
 8005dd6:	9311      	str	r3, [sp, #68]	; 0x44
 8005dd8:	46ab      	mov	fp, r5
 8005dda:	2a00      	cmp	r2, #0
 8005ddc:	f43f ad67 	beq.w	80058ae <_vfprintf_r+0x3b6>
 8005de0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005de4:	e563      	b.n	80058ae <_vfprintf_r+0x3b6>
 8005de6:	9311      	str	r3, [sp, #68]	; 0x44
 8005de8:	46ab      	mov	fp, r5
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	f040 870f 	bne.w	8006c0e <_vfprintf_r+0x1716>
 8005df0:	9b07      	ldr	r3, [sp, #28]
 8005df2:	4897      	ldr	r0, [pc, #604]	; (8006050 <_vfprintf_r+0xb58>)
 8005df4:	069c      	lsls	r4, r3, #26
 8005df6:	f53f aeba 	bmi.w	8005b6e <_vfprintf_r+0x676>
 8005dfa:	9b07      	ldr	r3, [sp, #28]
 8005dfc:	06d9      	lsls	r1, r3, #27
 8005dfe:	f140 8398 	bpl.w	8006532 <_vfprintf_r+0x103a>
 8005e02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e04:	4613      	mov	r3, r2
 8005e06:	3304      	adds	r3, #4
 8005e08:	6814      	ldr	r4, [r2, #0]
 8005e0a:	930e      	str	r3, [sp, #56]	; 0x38
 8005e0c:	2500      	movs	r5, #0
 8005e0e:	e6b7      	b.n	8005b80 <_vfprintf_r+0x688>
 8005e10:	f898 3000 	ldrb.w	r3, [r8]
 8005e14:	2900      	cmp	r1, #0
 8005e16:	f47f abe3 	bne.w	80055e0 <_vfprintf_r+0xe8>
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	2120      	movs	r1, #32
 8005e1e:	f7ff bbdf 	b.w	80055e0 <_vfprintf_r+0xe8>
 8005e22:	9b07      	ldr	r3, [sp, #28]
 8005e24:	f043 0301 	orr.w	r3, r3, #1
 8005e28:	9307      	str	r3, [sp, #28]
 8005e2a:	f898 3000 	ldrb.w	r3, [r8]
 8005e2e:	f7ff bbd7 	b.w	80055e0 <_vfprintf_r+0xe8>
 8005e32:	9b07      	ldr	r3, [sp, #28]
 8005e34:	f043 0320 	orr.w	r3, r3, #32
 8005e38:	9307      	str	r3, [sp, #28]
 8005e3a:	f898 3000 	ldrb.w	r3, [r8]
 8005e3e:	f7ff bbcf 	b.w	80055e0 <_vfprintf_r+0xe8>
 8005e42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e44:	9311      	str	r3, [sp, #68]	; 0x44
 8005e46:	6816      	ldr	r6, [r2, #0]
 8005e48:	2400      	movs	r4, #0
 8005e4a:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 8005e4e:	1d17      	adds	r7, r2, #4
 8005e50:	2e00      	cmp	r6, #0
 8005e52:	f000 85b7 	beq.w	80069c4 <_vfprintf_r+0x14cc>
 8005e56:	2d00      	cmp	r5, #0
 8005e58:	f2c0 8502 	blt.w	8006860 <_vfprintf_r+0x1368>
 8005e5c:	462a      	mov	r2, r5
 8005e5e:	4621      	mov	r1, r4
 8005e60:	4630      	mov	r0, r6
 8005e62:	f002 fed5 	bl	8008c10 <memchr>
 8005e66:	2800      	cmp	r0, #0
 8005e68:	f000 861c 	beq.w	8006aa4 <_vfprintf_r+0x15ac>
 8005e6c:	1b83      	subs	r3, r0, r6
 8005e6e:	930d      	str	r3, [sp, #52]	; 0x34
 8005e70:	46a3      	mov	fp, r4
 8005e72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005e76:	970e      	str	r7, [sp, #56]	; 0x38
 8005e78:	9309      	str	r3, [sp, #36]	; 0x24
 8005e7a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8005e7e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005e82:	e553      	b.n	800592c <_vfprintf_r+0x434>
 8005e84:	f898 3000 	ldrb.w	r3, [r8]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	212b      	movs	r1, #43	; 0x2b
 8005e8c:	f7ff bba8 	b.w	80055e0 <_vfprintf_r+0xe8>
 8005e90:	486f      	ldr	r0, [pc, #444]	; (8006050 <_vfprintf_r+0xb58>)
 8005e92:	9211      	str	r2, [sp, #68]	; 0x44
 8005e94:	f1bb 0f00 	cmp.w	fp, #0
 8005e98:	f040 8173 	bne.w	8006182 <_vfprintf_r+0xc8a>
 8005e9c:	465f      	mov	r7, fp
 8005e9e:	e6e1      	b.n	8005c64 <_vfprintf_r+0x76c>
 8005ea0:	9311      	str	r3, [sp, #68]	; 0x44
 8005ea2:	2a00      	cmp	r2, #0
 8005ea4:	f040 86ab 	bne.w	8006bfe <_vfprintf_r+0x1706>
 8005ea8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005eaa:	2a00      	cmp	r2, #0
 8005eac:	f43f ac4d 	beq.w	800574a <_vfprintf_r+0x252>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	461f      	mov	r7, r3
 8005eb6:	9109      	str	r1, [sp, #36]	; 0x24
 8005eb8:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8005ebc:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005ec0:	469b      	mov	fp, r3
 8005ec2:	9313      	str	r3, [sp, #76]	; 0x4c
 8005ec4:	910d      	str	r1, [sp, #52]	; 0x34
 8005ec6:	ae2a      	add	r6, sp, #168	; 0xa8
 8005ec8:	e534      	b.n	8005934 <_vfprintf_r+0x43c>
 8005eca:	f1bb 0f00 	cmp.w	fp, #0
 8005ece:	f000 85da 	beq.w	8006a86 <_vfprintf_r+0x158e>
 8005ed2:	2700      	movs	r7, #0
 8005ed4:	2400      	movs	r4, #0
 8005ed6:	2500      	movs	r5, #0
 8005ed8:	e475      	b.n	80057c6 <_vfprintf_r+0x2ce>
 8005eda:	485d      	ldr	r0, [pc, #372]	; (8006050 <_vfprintf_r+0xb58>)
 8005edc:	9307      	str	r3, [sp, #28]
 8005ede:	9211      	str	r2, [sp, #68]	; 0x44
 8005ee0:	ea54 0305 	orrs.w	r3, r4, r5
 8005ee4:	970e      	str	r7, [sp, #56]	; 0x38
 8005ee6:	f04f 0700 	mov.w	r7, #0
 8005eea:	f47f ae67 	bne.w	8005bbc <_vfprintf_r+0x6c4>
 8005eee:	2400      	movs	r4, #0
 8005ef0:	2500      	movs	r5, #0
 8005ef2:	e663      	b.n	8005bbc <_vfprintf_r+0x6c4>
 8005ef4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005ef6:	e56d      	b.n	80059d4 <_vfprintf_r+0x4dc>
 8005ef8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005efa:	2b65      	cmp	r3, #101	; 0x65
 8005efc:	f340 80ae 	ble.w	800605c <_vfprintf_r+0xb64>
 8005f00:	2200      	movs	r2, #0
 8005f02:	2300      	movs	r3, #0
 8005f04:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005f08:	f7fd fcaa 	bl	8003860 <__aeabi_dcmpeq>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	f000 813a 	beq.w	8006186 <_vfprintf_r+0xc8e>
 8005f12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005f14:	4a4f      	ldr	r2, [pc, #316]	; (8006054 <_vfprintf_r+0xb5c>)
 8005f16:	f8c9 2000 	str.w	r2, [r9]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	3401      	adds	r4, #1
 8005f1e:	2201      	movs	r2, #1
 8005f20:	2b07      	cmp	r3, #7
 8005f22:	9429      	str	r4, [sp, #164]	; 0xa4
 8005f24:	9328      	str	r3, [sp, #160]	; 0xa0
 8005f26:	f8c9 2004 	str.w	r2, [r9, #4]
 8005f2a:	f300 83ce 	bgt.w	80066ca <_vfprintf_r+0x11d2>
 8005f2e:	f109 0908 	add.w	r9, r9, #8
 8005f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f36:	4293      	cmp	r3, r2
 8005f38:	db03      	blt.n	8005f42 <_vfprintf_r+0xa4a>
 8005f3a:	9b07      	ldr	r3, [sp, #28]
 8005f3c:	07d8      	lsls	r0, r3, #31
 8005f3e:	f57f adb9 	bpl.w	8005ab4 <_vfprintf_r+0x5bc>
 8005f42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005f44:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005f46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f48:	f8c9 2000 	str.w	r2, [r9]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	440c      	add	r4, r1
 8005f50:	2b07      	cmp	r3, #7
 8005f52:	9429      	str	r4, [sp, #164]	; 0xa4
 8005f54:	f8c9 1004 	str.w	r1, [r9, #4]
 8005f58:	9328      	str	r3, [sp, #160]	; 0xa0
 8005f5a:	f300 8474 	bgt.w	8006846 <_vfprintf_r+0x134e>
 8005f5e:	f109 0908 	add.w	r9, r9, #8
 8005f62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f64:	1e5d      	subs	r5, r3, #1
 8005f66:	2d00      	cmp	r5, #0
 8005f68:	f77f ada4 	ble.w	8005ab4 <_vfprintf_r+0x5bc>
 8005f6c:	4a3a      	ldr	r2, [pc, #232]	; (8006058 <_vfprintf_r+0xb60>)
 8005f6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005f70:	920f      	str	r2, [sp, #60]	; 0x3c
 8005f72:	2d10      	cmp	r5, #16
 8005f74:	f340 81b4 	ble.w	80062e0 <_vfprintf_r+0xde8>
 8005f78:	2610      	movs	r6, #16
 8005f7a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005f7c:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005f80:	e005      	b.n	8005f8e <_vfprintf_r+0xa96>
 8005f82:	f109 0908 	add.w	r9, r9, #8
 8005f86:	3d10      	subs	r5, #16
 8005f88:	2d10      	cmp	r5, #16
 8005f8a:	f340 81a9 	ble.w	80062e0 <_vfprintf_r+0xde8>
 8005f8e:	3301      	adds	r3, #1
 8005f90:	3410      	adds	r4, #16
 8005f92:	2b07      	cmp	r3, #7
 8005f94:	9429      	str	r4, [sp, #164]	; 0xa4
 8005f96:	9328      	str	r3, [sp, #160]	; 0xa0
 8005f98:	f8c9 a000 	str.w	sl, [r9]
 8005f9c:	f8c9 6004 	str.w	r6, [r9, #4]
 8005fa0:	ddef      	ble.n	8005f82 <_vfprintf_r+0xa8a>
 8005fa2:	aa27      	add	r2, sp, #156	; 0x9c
 8005fa4:	4659      	mov	r1, fp
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	f003 fcfc 	bl	80099a4 <__sprint_r>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	f47f abd3 	bne.w	8005758 <_vfprintf_r+0x260>
 8005fb2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005fb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005fb6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005fba:	e7e4      	b.n	8005f86 <_vfprintf_r+0xa8e>
 8005fbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fc0:	1a9f      	subs	r7, r3, r2
 8005fc2:	2f00      	cmp	r7, #0
 8005fc4:	f77f ad2a 	ble.w	8005a1c <_vfprintf_r+0x524>
 8005fc8:	4a23      	ldr	r2, [pc, #140]	; (8006058 <_vfprintf_r+0xb60>)
 8005fca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005fcc:	920f      	str	r2, [sp, #60]	; 0x3c
 8005fce:	2f10      	cmp	r7, #16
 8005fd0:	dd2b      	ble.n	800602a <_vfprintf_r+0xb32>
 8005fd2:	464a      	mov	r2, r9
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	46b9      	mov	r9, r7
 8005fd8:	2510      	movs	r5, #16
 8005fda:	4637      	mov	r7, r6
 8005fdc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005fde:	9e08      	ldr	r6, [sp, #32]
 8005fe0:	e006      	b.n	8005ff0 <_vfprintf_r+0xaf8>
 8005fe2:	f1a9 0910 	sub.w	r9, r9, #16
 8005fe6:	f1b9 0f10 	cmp.w	r9, #16
 8005fea:	f102 0208 	add.w	r2, r2, #8
 8005fee:	dd18      	ble.n	8006022 <_vfprintf_r+0xb2a>
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	3110      	adds	r1, #16
 8005ff4:	2b07      	cmp	r3, #7
 8005ff6:	9129      	str	r1, [sp, #164]	; 0xa4
 8005ff8:	9328      	str	r3, [sp, #160]	; 0xa0
 8005ffa:	f8c2 a000 	str.w	sl, [r2]
 8005ffe:	6055      	str	r5, [r2, #4]
 8006000:	ddef      	ble.n	8005fe2 <_vfprintf_r+0xaea>
 8006002:	aa27      	add	r2, sp, #156	; 0x9c
 8006004:	4631      	mov	r1, r6
 8006006:	4620      	mov	r0, r4
 8006008:	f003 fccc 	bl	80099a4 <__sprint_r>
 800600c:	2800      	cmp	r0, #0
 800600e:	f47f aba3 	bne.w	8005758 <_vfprintf_r+0x260>
 8006012:	f1a9 0910 	sub.w	r9, r9, #16
 8006016:	f1b9 0f10 	cmp.w	r9, #16
 800601a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800601c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800601e:	aa34      	add	r2, sp, #208	; 0xd0
 8006020:	dce6      	bgt.n	8005ff0 <_vfprintf_r+0xaf8>
 8006022:	463e      	mov	r6, r7
 8006024:	460c      	mov	r4, r1
 8006026:	464f      	mov	r7, r9
 8006028:	4691      	mov	r9, r2
 800602a:	3301      	adds	r3, #1
 800602c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800602e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006030:	443c      	add	r4, r7
 8006032:	2b07      	cmp	r3, #7
 8006034:	9429      	str	r4, [sp, #164]	; 0xa4
 8006036:	e889 0084 	stmia.w	r9, {r2, r7}
 800603a:	f300 822b 	bgt.w	8006494 <_vfprintf_r+0xf9c>
 800603e:	f109 0908 	add.w	r9, r9, #8
 8006042:	e4eb      	b.n	8005a1c <_vfprintf_r+0x524>
 8006044:	7fefffff 	.word	0x7fefffff
 8006048:	0800a348 	.word	0x0800a348
 800604c:	0800a344 	.word	0x0800a344
 8006050:	0800a368 	.word	0x0800a368
 8006054:	0800a384 	.word	0x0800a384
 8006058:	0800a398 	.word	0x0800a398
 800605c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800605e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006060:	2b01      	cmp	r3, #1
 8006062:	f340 81d0 	ble.w	8006406 <_vfprintf_r+0xf0e>
 8006066:	3501      	adds	r5, #1
 8006068:	3401      	adds	r4, #1
 800606a:	2301      	movs	r3, #1
 800606c:	2d07      	cmp	r5, #7
 800606e:	9429      	str	r4, [sp, #164]	; 0xa4
 8006070:	9528      	str	r5, [sp, #160]	; 0xa0
 8006072:	f8c9 6000 	str.w	r6, [r9]
 8006076:	f8c9 3004 	str.w	r3, [r9, #4]
 800607a:	f300 81e1 	bgt.w	8006440 <_vfprintf_r+0xf48>
 800607e:	f109 0908 	add.w	r9, r9, #8
 8006082:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006084:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006086:	f8c9 3000 	str.w	r3, [r9]
 800608a:	3501      	adds	r5, #1
 800608c:	4414      	add	r4, r2
 800608e:	2d07      	cmp	r5, #7
 8006090:	9429      	str	r4, [sp, #164]	; 0xa4
 8006092:	9528      	str	r5, [sp, #160]	; 0xa0
 8006094:	f8c9 2004 	str.w	r2, [r9, #4]
 8006098:	f300 81df 	bgt.w	800645a <_vfprintf_r+0xf62>
 800609c:	f109 0908 	add.w	r9, r9, #8
 80060a0:	2300      	movs	r3, #0
 80060a2:	2200      	movs	r2, #0
 80060a4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80060a8:	f7fd fbda 	bl	8003860 <__aeabi_dcmpeq>
 80060ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f040 80cc 	bne.w	800624c <_vfprintf_r+0xd54>
 80060b4:	3b01      	subs	r3, #1
 80060b6:	3501      	adds	r5, #1
 80060b8:	3601      	adds	r6, #1
 80060ba:	441c      	add	r4, r3
 80060bc:	2d07      	cmp	r5, #7
 80060be:	9528      	str	r5, [sp, #160]	; 0xa0
 80060c0:	9429      	str	r4, [sp, #164]	; 0xa4
 80060c2:	f8c9 6000 	str.w	r6, [r9]
 80060c6:	f8c9 3004 	str.w	r3, [r9, #4]
 80060ca:	f300 81ac 	bgt.w	8006426 <_vfprintf_r+0xf2e>
 80060ce:	f109 0908 	add.w	r9, r9, #8
 80060d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80060d4:	f8c9 2004 	str.w	r2, [r9, #4]
 80060d8:	3501      	adds	r5, #1
 80060da:	4414      	add	r4, r2
 80060dc:	ab23      	add	r3, sp, #140	; 0x8c
 80060de:	2d07      	cmp	r5, #7
 80060e0:	9429      	str	r4, [sp, #164]	; 0xa4
 80060e2:	9528      	str	r5, [sp, #160]	; 0xa0
 80060e4:	f8c9 3000 	str.w	r3, [r9]
 80060e8:	f77f ace2 	ble.w	8005ab0 <_vfprintf_r+0x5b8>
 80060ec:	aa27      	add	r2, sp, #156	; 0x9c
 80060ee:	9908      	ldr	r1, [sp, #32]
 80060f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80060f2:	f003 fc57 	bl	80099a4 <__sprint_r>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	f47f ab2e 	bne.w	8005758 <_vfprintf_r+0x260>
 80060fc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80060fe:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006102:	e4d7      	b.n	8005ab4 <_vfprintf_r+0x5bc>
 8006104:	aa27      	add	r2, sp, #156	; 0x9c
 8006106:	9908      	ldr	r1, [sp, #32]
 8006108:	980a      	ldr	r0, [sp, #40]	; 0x28
 800610a:	f003 fc4b 	bl	80099a4 <__sprint_r>
 800610e:	2800      	cmp	r0, #0
 8006110:	f43f ad1e 	beq.w	8005b50 <_vfprintf_r+0x658>
 8006114:	f7ff bb20 	b.w	8005758 <_vfprintf_r+0x260>
 8006118:	aa27      	add	r2, sp, #156	; 0x9c
 800611a:	9908      	ldr	r1, [sp, #32]
 800611c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800611e:	f003 fc41 	bl	80099a4 <__sprint_r>
 8006122:	2800      	cmp	r0, #0
 8006124:	f47f ab18 	bne.w	8005758 <_vfprintf_r+0x260>
 8006128:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800612a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800612e:	e4ae      	b.n	8005a8e <_vfprintf_r+0x596>
 8006130:	aa27      	add	r2, sp, #156	; 0x9c
 8006132:	9908      	ldr	r1, [sp, #32]
 8006134:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006136:	f003 fc35 	bl	80099a4 <__sprint_r>
 800613a:	2800      	cmp	r0, #0
 800613c:	f47f ab0c 	bne.w	8005758 <_vfprintf_r+0x260>
 8006140:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006142:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006146:	e455      	b.n	80059f4 <_vfprintf_r+0x4fc>
 8006148:	aa27      	add	r2, sp, #156	; 0x9c
 800614a:	9908      	ldr	r1, [sp, #32]
 800614c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800614e:	f003 fc29 	bl	80099a4 <__sprint_r>
 8006152:	2800      	cmp	r0, #0
 8006154:	f47f ab00 	bne.w	8005758 <_vfprintf_r+0x260>
 8006158:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800615a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800615e:	e459      	b.n	8005a14 <_vfprintf_r+0x51c>
 8006160:	f1bb 0f00 	cmp.w	fp, #0
 8006164:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006168:	f2c0 830d 	blt.w	8006786 <_vfprintf_r+0x128e>
 800616c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006170:	9307      	str	r3, [sp, #28]
 8006172:	ea54 0305 	orrs.w	r3, r4, r5
 8006176:	f47f ad21 	bne.w	8005bbc <_vfprintf_r+0x6c4>
 800617a:	f1bb 0f00 	cmp.w	fp, #0
 800617e:	f43f ae8d 	beq.w	8005e9c <_vfprintf_r+0x9a4>
 8006182:	2700      	movs	r7, #0
 8006184:	e6b3      	b.n	8005eee <_vfprintf_r+0x9f6>
 8006186:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006188:	2d00      	cmp	r5, #0
 800618a:	f340 82aa 	ble.w	80066e2 <_vfprintf_r+0x11ea>
 800618e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006190:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006192:	4293      	cmp	r3, r2
 8006194:	bfa8      	it	ge
 8006196:	4613      	movge	r3, r2
 8006198:	2b00      	cmp	r3, #0
 800619a:	461d      	mov	r5, r3
 800619c:	dd0d      	ble.n	80061ba <_vfprintf_r+0xcc2>
 800619e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80061a0:	f8c9 6000 	str.w	r6, [r9]
 80061a4:	3301      	adds	r3, #1
 80061a6:	442c      	add	r4, r5
 80061a8:	2b07      	cmp	r3, #7
 80061aa:	9429      	str	r4, [sp, #164]	; 0xa4
 80061ac:	f8c9 5004 	str.w	r5, [r9, #4]
 80061b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80061b2:	f300 8387 	bgt.w	80068c4 <_vfprintf_r+0x13cc>
 80061b6:	f109 0908 	add.w	r9, r9, #8
 80061ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061bc:	2d00      	cmp	r5, #0
 80061be:	bfa8      	it	ge
 80061c0:	1b5b      	subge	r3, r3, r5
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	461d      	mov	r5, r3
 80061c6:	f340 80be 	ble.w	8006346 <_vfprintf_r+0xe4e>
 80061ca:	4ab9      	ldr	r2, [pc, #740]	; (80064b0 <_vfprintf_r+0xfb8>)
 80061cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80061ce:	920f      	str	r2, [sp, #60]	; 0x3c
 80061d0:	2d10      	cmp	r5, #16
 80061d2:	f340 826d 	ble.w	80066b0 <_vfprintf_r+0x11b8>
 80061d6:	4622      	mov	r2, r4
 80061d8:	2710      	movs	r7, #16
 80061da:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80061de:	9c08      	ldr	r4, [sp, #32]
 80061e0:	e005      	b.n	80061ee <_vfprintf_r+0xcf6>
 80061e2:	f109 0908 	add.w	r9, r9, #8
 80061e6:	3d10      	subs	r5, #16
 80061e8:	2d10      	cmp	r5, #16
 80061ea:	f340 8260 	ble.w	80066ae <_vfprintf_r+0x11b6>
 80061ee:	3301      	adds	r3, #1
 80061f0:	3210      	adds	r2, #16
 80061f2:	2b07      	cmp	r3, #7
 80061f4:	9229      	str	r2, [sp, #164]	; 0xa4
 80061f6:	9328      	str	r3, [sp, #160]	; 0xa0
 80061f8:	f8c9 a000 	str.w	sl, [r9]
 80061fc:	f8c9 7004 	str.w	r7, [r9, #4]
 8006200:	ddef      	ble.n	80061e2 <_vfprintf_r+0xcea>
 8006202:	aa27      	add	r2, sp, #156	; 0x9c
 8006204:	4621      	mov	r1, r4
 8006206:	4658      	mov	r0, fp
 8006208:	f003 fbcc 	bl	80099a4 <__sprint_r>
 800620c:	2800      	cmp	r0, #0
 800620e:	f47f aaa3 	bne.w	8005758 <_vfprintf_r+0x260>
 8006212:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006214:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006216:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800621a:	e7e4      	b.n	80061e6 <_vfprintf_r+0xcee>
 800621c:	aa27      	add	r2, sp, #156	; 0x9c
 800621e:	9908      	ldr	r1, [sp, #32]
 8006220:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006222:	f003 fbbf 	bl	80099a4 <__sprint_r>
 8006226:	2800      	cmp	r0, #0
 8006228:	f47f aa96 	bne.w	8005758 <_vfprintf_r+0x260>
 800622c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006230:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006232:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006236:	f7ff bbcd 	b.w	80059d4 <_vfprintf_r+0x4dc>
 800623a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800623c:	6814      	ldr	r4, [r2, #0]
 800623e:	4613      	mov	r3, r2
 8006240:	3304      	adds	r3, #4
 8006242:	17e5      	asrs	r5, r4, #31
 8006244:	930e      	str	r3, [sp, #56]	; 0x38
 8006246:	4622      	mov	r2, r4
 8006248:	462b      	mov	r3, r5
 800624a:	e4f4      	b.n	8005c36 <_vfprintf_r+0x73e>
 800624c:	1e5e      	subs	r6, r3, #1
 800624e:	2e00      	cmp	r6, #0
 8006250:	f77f af3f 	ble.w	80060d2 <_vfprintf_r+0xbda>
 8006254:	4b96      	ldr	r3, [pc, #600]	; (80064b0 <_vfprintf_r+0xfb8>)
 8006256:	930f      	str	r3, [sp, #60]	; 0x3c
 8006258:	2e10      	cmp	r6, #16
 800625a:	f340 8110 	ble.w	800647e <_vfprintf_r+0xf86>
 800625e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8006262:	2710      	movs	r7, #16
 8006264:	46b0      	mov	r8, r6
 8006266:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800626a:	9e08      	ldr	r6, [sp, #32]
 800626c:	e007      	b.n	800627e <_vfprintf_r+0xd86>
 800626e:	f109 0908 	add.w	r9, r9, #8
 8006272:	f1a8 0810 	sub.w	r8, r8, #16
 8006276:	f1b8 0f10 	cmp.w	r8, #16
 800627a:	f340 80fd 	ble.w	8006478 <_vfprintf_r+0xf80>
 800627e:	3501      	adds	r5, #1
 8006280:	3410      	adds	r4, #16
 8006282:	2d07      	cmp	r5, #7
 8006284:	9429      	str	r4, [sp, #164]	; 0xa4
 8006286:	9528      	str	r5, [sp, #160]	; 0xa0
 8006288:	f8c9 a000 	str.w	sl, [r9]
 800628c:	f8c9 7004 	str.w	r7, [r9, #4]
 8006290:	dded      	ble.n	800626e <_vfprintf_r+0xd76>
 8006292:	aa27      	add	r2, sp, #156	; 0x9c
 8006294:	4631      	mov	r1, r6
 8006296:	4658      	mov	r0, fp
 8006298:	f003 fb84 	bl	80099a4 <__sprint_r>
 800629c:	2800      	cmp	r0, #0
 800629e:	f47f aa5b 	bne.w	8005758 <_vfprintf_r+0x260>
 80062a2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80062a4:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80062a6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80062aa:	e7e2      	b.n	8006272 <_vfprintf_r+0xd7a>
 80062ac:	9907      	ldr	r1, [sp, #28]
 80062ae:	f011 0210 	ands.w	r2, r1, #16
 80062b2:	d020      	beq.n	80062f6 <_vfprintf_r+0xdfe>
 80062b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80062b6:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80062ba:	f1bb 0f00 	cmp.w	fp, #0
 80062be:	6804      	ldr	r4, [r0, #0]
 80062c0:	f100 0704 	add.w	r7, r0, #4
 80062c4:	f04f 0500 	mov.w	r5, #0
 80062c8:	db26      	blt.n	8006318 <_vfprintf_r+0xe20>
 80062ca:	460a      	mov	r2, r1
 80062cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062d0:	9207      	str	r2, [sp, #28]
 80062d2:	ea54 0205 	orrs.w	r2, r4, r5
 80062d6:	970e      	str	r7, [sp, #56]	; 0x38
 80062d8:	461f      	mov	r7, r3
 80062da:	f47f ab03 	bne.w	80058e4 <_vfprintf_r+0x3ec>
 80062de:	e4bd      	b.n	8005c5c <_vfprintf_r+0x764>
 80062e0:	3301      	adds	r3, #1
 80062e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062e4:	9328      	str	r3, [sp, #160]	; 0xa0
 80062e6:	442c      	add	r4, r5
 80062e8:	2b07      	cmp	r3, #7
 80062ea:	9429      	str	r4, [sp, #164]	; 0xa4
 80062ec:	e889 0024 	stmia.w	r9, {r2, r5}
 80062f0:	f77f abde 	ble.w	8005ab0 <_vfprintf_r+0x5b8>
 80062f4:	e6fa      	b.n	80060ec <_vfprintf_r+0xbf4>
 80062f6:	9907      	ldr	r1, [sp, #28]
 80062f8:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80062fc:	f040 824a 	bne.w	8006794 <_vfprintf_r+0x129c>
 8006300:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006302:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006306:	f1bb 0f00 	cmp.w	fp, #0
 800630a:	680c      	ldr	r4, [r1, #0]
 800630c:	f101 0704 	add.w	r7, r1, #4
 8006310:	f04f 0500 	mov.w	r5, #0
 8006314:	f280 811a 	bge.w	800654c <_vfprintf_r+0x1054>
 8006318:	970e      	str	r7, [sp, #56]	; 0x38
 800631a:	461f      	mov	r7, r3
 800631c:	ea54 0305 	orrs.w	r3, r4, r5
 8006320:	f47f aae0 	bne.w	80058e4 <_vfprintf_r+0x3ec>
 8006324:	ae44      	add	r6, sp, #272	; 0x110
 8006326:	3430      	adds	r4, #48	; 0x30
 8006328:	f806 4d41 	strb.w	r4, [r6, #-65]!
 800632c:	f7ff baf4 	b.w	8005918 <_vfprintf_r+0x420>
 8006330:	aa27      	add	r2, sp, #156	; 0x9c
 8006332:	9908      	ldr	r1, [sp, #32]
 8006334:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006336:	f003 fb35 	bl	80099a4 <__sprint_r>
 800633a:	2800      	cmp	r0, #0
 800633c:	f47f aa0c 	bne.w	8005758 <_vfprintf_r+0x260>
 8006340:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006342:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006346:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006348:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800634a:	4432      	add	r2, r6
 800634c:	4617      	mov	r7, r2
 800634e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006350:	4293      	cmp	r3, r2
 8006352:	db47      	blt.n	80063e4 <_vfprintf_r+0xeec>
 8006354:	9a07      	ldr	r2, [sp, #28]
 8006356:	07d2      	lsls	r2, r2, #31
 8006358:	d444      	bmi.n	80063e4 <_vfprintf_r+0xeec>
 800635a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800635c:	440e      	add	r6, r1
 800635e:	1bf5      	subs	r5, r6, r7
 8006360:	1acb      	subs	r3, r1, r3
 8006362:	429d      	cmp	r5, r3
 8006364:	bfa8      	it	ge
 8006366:	461d      	movge	r5, r3
 8006368:	2d00      	cmp	r5, #0
 800636a:	462e      	mov	r6, r5
 800636c:	dd0d      	ble.n	800638a <_vfprintf_r+0xe92>
 800636e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8006370:	f8c9 7000 	str.w	r7, [r9]
 8006374:	3201      	adds	r2, #1
 8006376:	442c      	add	r4, r5
 8006378:	2a07      	cmp	r2, #7
 800637a:	9429      	str	r4, [sp, #164]	; 0xa4
 800637c:	f8c9 5004 	str.w	r5, [r9, #4]
 8006380:	9228      	str	r2, [sp, #160]	; 0xa0
 8006382:	f300 832e 	bgt.w	80069e2 <_vfprintf_r+0x14ea>
 8006386:	f109 0908 	add.w	r9, r9, #8
 800638a:	2e00      	cmp	r6, #0
 800638c:	bfac      	ite	ge
 800638e:	1b9d      	subge	r5, r3, r6
 8006390:	461d      	movlt	r5, r3
 8006392:	2d00      	cmp	r5, #0
 8006394:	f77f ab8e 	ble.w	8005ab4 <_vfprintf_r+0x5bc>
 8006398:	4a45      	ldr	r2, [pc, #276]	; (80064b0 <_vfprintf_r+0xfb8>)
 800639a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800639c:	920f      	str	r2, [sp, #60]	; 0x3c
 800639e:	2d10      	cmp	r5, #16
 80063a0:	dd9e      	ble.n	80062e0 <_vfprintf_r+0xde8>
 80063a2:	2610      	movs	r6, #16
 80063a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80063a6:	f8dd b020 	ldr.w	fp, [sp, #32]
 80063aa:	e004      	b.n	80063b6 <_vfprintf_r+0xebe>
 80063ac:	f109 0908 	add.w	r9, r9, #8
 80063b0:	3d10      	subs	r5, #16
 80063b2:	2d10      	cmp	r5, #16
 80063b4:	dd94      	ble.n	80062e0 <_vfprintf_r+0xde8>
 80063b6:	3301      	adds	r3, #1
 80063b8:	3410      	adds	r4, #16
 80063ba:	2b07      	cmp	r3, #7
 80063bc:	9429      	str	r4, [sp, #164]	; 0xa4
 80063be:	9328      	str	r3, [sp, #160]	; 0xa0
 80063c0:	f8c9 a000 	str.w	sl, [r9]
 80063c4:	f8c9 6004 	str.w	r6, [r9, #4]
 80063c8:	ddf0      	ble.n	80063ac <_vfprintf_r+0xeb4>
 80063ca:	aa27      	add	r2, sp, #156	; 0x9c
 80063cc:	4659      	mov	r1, fp
 80063ce:	4638      	mov	r0, r7
 80063d0:	f003 fae8 	bl	80099a4 <__sprint_r>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	f47f a9bf 	bne.w	8005758 <_vfprintf_r+0x260>
 80063da:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80063dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80063de:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80063e2:	e7e5      	b.n	80063b0 <_vfprintf_r+0xeb8>
 80063e4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80063e6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80063e8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80063ea:	f8c9 1000 	str.w	r1, [r9]
 80063ee:	3201      	adds	r2, #1
 80063f0:	4404      	add	r4, r0
 80063f2:	2a07      	cmp	r2, #7
 80063f4:	9429      	str	r4, [sp, #164]	; 0xa4
 80063f6:	f8c9 0004 	str.w	r0, [r9, #4]
 80063fa:	9228      	str	r2, [sp, #160]	; 0xa0
 80063fc:	f300 82cf 	bgt.w	800699e <_vfprintf_r+0x14a6>
 8006400:	f109 0908 	add.w	r9, r9, #8
 8006404:	e7a9      	b.n	800635a <_vfprintf_r+0xe62>
 8006406:	9b07      	ldr	r3, [sp, #28]
 8006408:	07df      	lsls	r7, r3, #31
 800640a:	f53f ae2c 	bmi.w	8006066 <_vfprintf_r+0xb6e>
 800640e:	3501      	adds	r5, #1
 8006410:	3401      	adds	r4, #1
 8006412:	2301      	movs	r3, #1
 8006414:	2d07      	cmp	r5, #7
 8006416:	9429      	str	r4, [sp, #164]	; 0xa4
 8006418:	9528      	str	r5, [sp, #160]	; 0xa0
 800641a:	f8c9 6000 	str.w	r6, [r9]
 800641e:	f8c9 3004 	str.w	r3, [r9, #4]
 8006422:	f77f ae54 	ble.w	80060ce <_vfprintf_r+0xbd6>
 8006426:	aa27      	add	r2, sp, #156	; 0x9c
 8006428:	9908      	ldr	r1, [sp, #32]
 800642a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800642c:	f003 faba 	bl	80099a4 <__sprint_r>
 8006430:	2800      	cmp	r0, #0
 8006432:	f47f a991 	bne.w	8005758 <_vfprintf_r+0x260>
 8006436:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006438:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800643a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800643e:	e648      	b.n	80060d2 <_vfprintf_r+0xbda>
 8006440:	aa27      	add	r2, sp, #156	; 0x9c
 8006442:	9908      	ldr	r1, [sp, #32]
 8006444:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006446:	f003 faad 	bl	80099a4 <__sprint_r>
 800644a:	2800      	cmp	r0, #0
 800644c:	f47f a984 	bne.w	8005758 <_vfprintf_r+0x260>
 8006450:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006452:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8006454:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006458:	e613      	b.n	8006082 <_vfprintf_r+0xb8a>
 800645a:	aa27      	add	r2, sp, #156	; 0x9c
 800645c:	9908      	ldr	r1, [sp, #32]
 800645e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006460:	f003 faa0 	bl	80099a4 <__sprint_r>
 8006464:	2800      	cmp	r0, #0
 8006466:	f47f a977 	bne.w	8005758 <_vfprintf_r+0x260>
 800646a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800646c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800646e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006472:	e615      	b.n	80060a0 <_vfprintf_r+0xba8>
 8006474:	2400      	movs	r4, #0
 8006476:	e755      	b.n	8006324 <_vfprintf_r+0xe2c>
 8006478:	4646      	mov	r6, r8
 800647a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800647e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006480:	3501      	adds	r5, #1
 8006482:	4434      	add	r4, r6
 8006484:	2d07      	cmp	r5, #7
 8006486:	9429      	str	r4, [sp, #164]	; 0xa4
 8006488:	9528      	str	r5, [sp, #160]	; 0xa0
 800648a:	e889 0048 	stmia.w	r9, {r3, r6}
 800648e:	f77f ae1e 	ble.w	80060ce <_vfprintf_r+0xbd6>
 8006492:	e7c8      	b.n	8006426 <_vfprintf_r+0xf2e>
 8006494:	aa27      	add	r2, sp, #156	; 0x9c
 8006496:	9908      	ldr	r1, [sp, #32]
 8006498:	980a      	ldr	r0, [sp, #40]	; 0x28
 800649a:	f003 fa83 	bl	80099a4 <__sprint_r>
 800649e:	2800      	cmp	r0, #0
 80064a0:	f47f a95a 	bne.w	8005758 <_vfprintf_r+0x260>
 80064a4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80064a6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80064aa:	f7ff bab7 	b.w	8005a1c <_vfprintf_r+0x524>
 80064ae:	bf00      	nop
 80064b0:	0800a398 	.word	0x0800a398
 80064b4:	4264      	negs	r4, r4
 80064b6:	f04f 072d 	mov.w	r7, #45	; 0x2d
 80064ba:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80064be:	f1bb 0f00 	cmp.w	fp, #0
 80064c2:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80064c6:	f6ff aa0d 	blt.w	80058e4 <_vfprintf_r+0x3ec>
 80064ca:	9b07      	ldr	r3, [sp, #28]
 80064cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d0:	9307      	str	r3, [sp, #28]
 80064d2:	f7ff ba07 	b.w	80058e4 <_vfprintf_r+0x3ec>
 80064d6:	9907      	ldr	r1, [sp, #28]
 80064d8:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80064dc:	d017      	beq.n	800650e <_vfprintf_r+0x1016>
 80064de:	980e      	ldr	r0, [sp, #56]	; 0x38
 80064e0:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80064e4:	4603      	mov	r3, r0
 80064e6:	f1bb 0f00 	cmp.w	fp, #0
 80064ea:	f103 0304 	add.w	r3, r3, #4
 80064ee:	8804      	ldrh	r4, [r0, #0]
 80064f0:	f04f 0500 	mov.w	r5, #0
 80064f4:	f2c0 831b 	blt.w	8006b2e <_vfprintf_r+0x1636>
 80064f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80064fc:	9107      	str	r1, [sp, #28]
 80064fe:	ea54 0105 	orrs.w	r1, r4, r5
 8006502:	930e      	str	r3, [sp, #56]	; 0x38
 8006504:	f43f ace1 	beq.w	8005eca <_vfprintf_r+0x9d2>
 8006508:	4617      	mov	r7, r2
 800650a:	f7ff b95c 	b.w	80057c6 <_vfprintf_r+0x2ce>
 800650e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006510:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006514:	f1bb 0f00 	cmp.w	fp, #0
 8006518:	680c      	ldr	r4, [r1, #0]
 800651a:	f101 0704 	add.w	r7, r1, #4
 800651e:	f04f 0500 	mov.w	r5, #0
 8006522:	db02      	blt.n	800652a <_vfprintf_r+0x1032>
 8006524:	9a07      	ldr	r2, [sp, #28]
 8006526:	f7ff b9af 	b.w	8005888 <_vfprintf_r+0x390>
 800652a:	970e      	str	r7, [sp, #56]	; 0x38
 800652c:	2700      	movs	r7, #0
 800652e:	f7ff b94a 	b.w	80057c6 <_vfprintf_r+0x2ce>
 8006532:	9b07      	ldr	r3, [sp, #28]
 8006534:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006536:	f013 0f40 	tst.w	r3, #64	; 0x40
 800653a:	4613      	mov	r3, r2
 800653c:	f000 8142 	beq.w	80067c4 <_vfprintf_r+0x12cc>
 8006540:	3304      	adds	r3, #4
 8006542:	8814      	ldrh	r4, [r2, #0]
 8006544:	930e      	str	r3, [sp, #56]	; 0x38
 8006546:	2500      	movs	r5, #0
 8006548:	f7ff bb1a 	b.w	8005b80 <_vfprintf_r+0x688>
 800654c:	9a07      	ldr	r2, [sp, #28]
 800654e:	e6bd      	b.n	80062cc <_vfprintf_r+0xdd4>
 8006550:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	f7fd f9b4 	bl	80038c4 <__aeabi_dcmpun>
 800655c:	2800      	cmp	r0, #0
 800655e:	f040 82e8 	bne.w	8006b32 <_vfprintf_r+0x163a>
 8006562:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006564:	f1bb 3fff 	cmp.w	fp, #4294967295
 8006568:	f023 0720 	bic.w	r7, r3, #32
 800656c:	f000 825f 	beq.w	8006a2e <_vfprintf_r+0x1536>
 8006570:	2f47      	cmp	r7, #71	; 0x47
 8006572:	f000 8158 	beq.w	8006826 <_vfprintf_r+0x132e>
 8006576:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006578:	9a07      	ldr	r2, [sp, #28]
 800657a:	2b00      	cmp	r3, #0
 800657c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006580:	920f      	str	r2, [sp, #60]	; 0x3c
 8006582:	f2c0 825c 	blt.w	8006a3e <_vfprintf_r+0x1546>
 8006586:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 800658a:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800658e:	2300      	movs	r3, #0
 8006590:	9309      	str	r3, [sp, #36]	; 0x24
 8006592:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006594:	2b66      	cmp	r3, #102	; 0x66
 8006596:	f000 8233 	beq.w	8006a00 <_vfprintf_r+0x1508>
 800659a:	2b46      	cmp	r3, #70	; 0x46
 800659c:	f000 8125 	beq.w	80067ea <_vfprintf_r+0x12f2>
 80065a0:	2f45      	cmp	r7, #69	; 0x45
 80065a2:	bf0c      	ite	eq
 80065a4:	f10b 0501 	addeq.w	r5, fp, #1
 80065a8:	465d      	movne	r5, fp
 80065aa:	a825      	add	r0, sp, #148	; 0x94
 80065ac:	a922      	add	r1, sp, #136	; 0x88
 80065ae:	aa21      	add	r2, sp, #132	; 0x84
 80065b0:	2302      	movs	r3, #2
 80065b2:	9004      	str	r0, [sp, #16]
 80065b4:	9202      	str	r2, [sp, #8]
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	9501      	str	r5, [sp, #4]
 80065ba:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80065be:	9103      	str	r1, [sp, #12]
 80065c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80065c2:	f000 fc89 	bl	8006ed8 <_dtoa_r>
 80065c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065c8:	2b67      	cmp	r3, #103	; 0x67
 80065ca:	4606      	mov	r6, r0
 80065cc:	f040 8275 	bne.w	8006aba <_vfprintf_r+0x15c2>
 80065d0:	9b07      	ldr	r3, [sp, #28]
 80065d2:	07da      	lsls	r2, r3, #31
 80065d4:	f140 8294 	bpl.w	8006b00 <_vfprintf_r+0x1608>
 80065d8:	1974      	adds	r4, r6, r5
 80065da:	2200      	movs	r2, #0
 80065dc:	2300      	movs	r3, #0
 80065de:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80065e2:	f7fd f93d 	bl	8003860 <__aeabi_dcmpeq>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	f040 8178 	bne.w	80068dc <_vfprintf_r+0x13e4>
 80065ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80065ee:	429c      	cmp	r4, r3
 80065f0:	d906      	bls.n	8006600 <_vfprintf_r+0x1108>
 80065f2:	2130      	movs	r1, #48	; 0x30
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	9225      	str	r2, [sp, #148]	; 0x94
 80065f8:	7019      	strb	r1, [r3, #0]
 80065fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80065fc:	429c      	cmp	r4, r3
 80065fe:	d8f9      	bhi.n	80065f4 <_vfprintf_r+0x10fc>
 8006600:	1b9b      	subs	r3, r3, r6
 8006602:	2f47      	cmp	r7, #71	; 0x47
 8006604:	9312      	str	r3, [sp, #72]	; 0x48
 8006606:	f000 8156 	beq.w	80068b6 <_vfprintf_r+0x13be>
 800660a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800660c:	2b65      	cmp	r3, #101	; 0x65
 800660e:	f340 8263 	ble.w	8006ad8 <_vfprintf_r+0x15e0>
 8006612:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006614:	2b66      	cmp	r3, #102	; 0x66
 8006616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006618:	9313      	str	r3, [sp, #76]	; 0x4c
 800661a:	f000 8226 	beq.w	8006a6a <_vfprintf_r+0x1572>
 800661e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006620:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006622:	428a      	cmp	r2, r1
 8006624:	f2c0 8214 	blt.w	8006a50 <_vfprintf_r+0x1558>
 8006628:	9b07      	ldr	r3, [sp, #28]
 800662a:	07db      	lsls	r3, r3, #31
 800662c:	f100 826a 	bmi.w	8006b04 <_vfprintf_r+0x160c>
 8006630:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006634:	920d      	str	r2, [sp, #52]	; 0x34
 8006636:	2267      	movs	r2, #103	; 0x67
 8006638:	9211      	str	r2, [sp, #68]	; 0x44
 800663a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800663c:	2a00      	cmp	r2, #0
 800663e:	f040 8117 	bne.w	8006870 <_vfprintf_r+0x1378>
 8006642:	9309      	str	r3, [sp, #36]	; 0x24
 8006644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006646:	9307      	str	r3, [sp, #28]
 8006648:	4693      	mov	fp, r2
 800664a:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800664e:	f7ff b96d 	b.w	800592c <_vfprintf_r+0x434>
 8006652:	f027 0707 	bic.w	r7, r7, #7
 8006656:	ed97 7b00 	vldr	d7, [r7]
 800665a:	f107 0308 	add.w	r3, r7, #8
 800665e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006662:	930e      	str	r3, [sp, #56]	; 0x38
 8006664:	f7ff bb77 	b.w	8005d56 <_vfprintf_r+0x85e>
 8006668:	9b07      	ldr	r3, [sp, #28]
 800666a:	06de      	lsls	r6, r3, #27
 800666c:	d40b      	bmi.n	8006686 <_vfprintf_r+0x118e>
 800666e:	9b07      	ldr	r3, [sp, #28]
 8006670:	065d      	lsls	r5, r3, #25
 8006672:	d508      	bpl.n	8006686 <_vfprintf_r+0x118e>
 8006674:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006676:	6813      	ldr	r3, [r2, #0]
 8006678:	3204      	adds	r2, #4
 800667a:	920e      	str	r2, [sp, #56]	; 0x38
 800667c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8006680:	801a      	strh	r2, [r3, #0]
 8006682:	f7fe bf7a 	b.w	800557a <_vfprintf_r+0x82>
 8006686:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006688:	6813      	ldr	r3, [r2, #0]
 800668a:	3204      	adds	r2, #4
 800668c:	920e      	str	r2, [sp, #56]	; 0x38
 800668e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	f7fe bf72 	b.w	800557a <_vfprintf_r+0x82>
 8006696:	2700      	movs	r7, #0
 8006698:	45bb      	cmp	fp, r7
 800669a:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800669e:	f6ff ac26 	blt.w	8005eee <_vfprintf_r+0x9f6>
 80066a2:	9b07      	ldr	r3, [sp, #28]
 80066a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066a8:	9307      	str	r3, [sp, #28]
 80066aa:	f7ff bbf3 	b.w	8005e94 <_vfprintf_r+0x99c>
 80066ae:	4614      	mov	r4, r2
 80066b0:	3301      	adds	r3, #1
 80066b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066b4:	9328      	str	r3, [sp, #160]	; 0xa0
 80066b6:	442c      	add	r4, r5
 80066b8:	2b07      	cmp	r3, #7
 80066ba:	9429      	str	r4, [sp, #164]	; 0xa4
 80066bc:	e889 0024 	stmia.w	r9, {r2, r5}
 80066c0:	f73f ae36 	bgt.w	8006330 <_vfprintf_r+0xe38>
 80066c4:	f109 0908 	add.w	r9, r9, #8
 80066c8:	e63d      	b.n	8006346 <_vfprintf_r+0xe4e>
 80066ca:	aa27      	add	r2, sp, #156	; 0x9c
 80066cc:	9908      	ldr	r1, [sp, #32]
 80066ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80066d0:	f003 f968 	bl	80099a4 <__sprint_r>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	f47f a83f 	bne.w	8005758 <_vfprintf_r+0x260>
 80066da:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80066dc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80066e0:	e427      	b.n	8005f32 <_vfprintf_r+0xa3a>
 80066e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80066e4:	4ab4      	ldr	r2, [pc, #720]	; (80069b8 <_vfprintf_r+0x14c0>)
 80066e6:	f8c9 2000 	str.w	r2, [r9]
 80066ea:	3301      	adds	r3, #1
 80066ec:	3401      	adds	r4, #1
 80066ee:	2201      	movs	r2, #1
 80066f0:	2b07      	cmp	r3, #7
 80066f2:	9429      	str	r4, [sp, #164]	; 0xa4
 80066f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80066f6:	f8c9 2004 	str.w	r2, [r9, #4]
 80066fa:	dc69      	bgt.n	80067d0 <_vfprintf_r+0x12d8>
 80066fc:	f109 0908 	add.w	r9, r9, #8
 8006700:	b92d      	cbnz	r5, 800670e <_vfprintf_r+0x1216>
 8006702:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006704:	b91b      	cbnz	r3, 800670e <_vfprintf_r+0x1216>
 8006706:	9b07      	ldr	r3, [sp, #28]
 8006708:	07d9      	lsls	r1, r3, #31
 800670a:	f57f a9d3 	bpl.w	8005ab4 <_vfprintf_r+0x5bc>
 800670e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006710:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006712:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006714:	f8c9 2000 	str.w	r2, [r9]
 8006718:	3301      	adds	r3, #1
 800671a:	440c      	add	r4, r1
 800671c:	2b07      	cmp	r3, #7
 800671e:	9429      	str	r4, [sp, #164]	; 0xa4
 8006720:	f8c9 1004 	str.w	r1, [r9, #4]
 8006724:	9328      	str	r3, [sp, #160]	; 0xa0
 8006726:	f300 81d9 	bgt.w	8006adc <_vfprintf_r+0x15e4>
 800672a:	f109 0908 	add.w	r9, r9, #8
 800672e:	426d      	negs	r5, r5
 8006730:	2d00      	cmp	r5, #0
 8006732:	f340 80b3 	ble.w	800689c <_vfprintf_r+0x13a4>
 8006736:	4aa1      	ldr	r2, [pc, #644]	; (80069bc <_vfprintf_r+0x14c4>)
 8006738:	920f      	str	r2, [sp, #60]	; 0x3c
 800673a:	2d10      	cmp	r5, #16
 800673c:	f340 8122 	ble.w	8006984 <_vfprintf_r+0x148c>
 8006740:	4622      	mov	r2, r4
 8006742:	2710      	movs	r7, #16
 8006744:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006748:	9c08      	ldr	r4, [sp, #32]
 800674a:	e005      	b.n	8006758 <_vfprintf_r+0x1260>
 800674c:	f109 0908 	add.w	r9, r9, #8
 8006750:	3d10      	subs	r5, #16
 8006752:	2d10      	cmp	r5, #16
 8006754:	f340 8115 	ble.w	8006982 <_vfprintf_r+0x148a>
 8006758:	3301      	adds	r3, #1
 800675a:	3210      	adds	r2, #16
 800675c:	2b07      	cmp	r3, #7
 800675e:	9229      	str	r2, [sp, #164]	; 0xa4
 8006760:	9328      	str	r3, [sp, #160]	; 0xa0
 8006762:	f8c9 a000 	str.w	sl, [r9]
 8006766:	f8c9 7004 	str.w	r7, [r9, #4]
 800676a:	ddef      	ble.n	800674c <_vfprintf_r+0x1254>
 800676c:	aa27      	add	r2, sp, #156	; 0x9c
 800676e:	4621      	mov	r1, r4
 8006770:	4658      	mov	r0, fp
 8006772:	f003 f917 	bl	80099a4 <__sprint_r>
 8006776:	2800      	cmp	r0, #0
 8006778:	f47e afee 	bne.w	8005758 <_vfprintf_r+0x260>
 800677c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800677e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006780:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006784:	e7e4      	b.n	8006750 <_vfprintf_r+0x1258>
 8006786:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006788:	f7ff bbaa 	b.w	8005ee0 <_vfprintf_r+0x9e8>
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	f7fe bfe8 	b.w	8005764 <_vfprintf_r+0x26c>
 8006794:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006796:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800679a:	4603      	mov	r3, r0
 800679c:	f1bb 0f00 	cmp.w	fp, #0
 80067a0:	f103 0304 	add.w	r3, r3, #4
 80067a4:	8804      	ldrh	r4, [r0, #0]
 80067a6:	f04f 0500 	mov.w	r5, #0
 80067aa:	f2c0 81b4 	blt.w	8006b16 <_vfprintf_r+0x161e>
 80067ae:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80067b2:	9107      	str	r1, [sp, #28]
 80067b4:	ea54 0105 	orrs.w	r1, r4, r5
 80067b8:	930e      	str	r3, [sp, #56]	; 0x38
 80067ba:	4617      	mov	r7, r2
 80067bc:	f47f a892 	bne.w	80058e4 <_vfprintf_r+0x3ec>
 80067c0:	f7ff ba4c 	b.w	8005c5c <_vfprintf_r+0x764>
 80067c4:	3304      	adds	r3, #4
 80067c6:	6814      	ldr	r4, [r2, #0]
 80067c8:	930e      	str	r3, [sp, #56]	; 0x38
 80067ca:	2500      	movs	r5, #0
 80067cc:	f7ff b9d8 	b.w	8005b80 <_vfprintf_r+0x688>
 80067d0:	aa27      	add	r2, sp, #156	; 0x9c
 80067d2:	9908      	ldr	r1, [sp, #32]
 80067d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80067d6:	f003 f8e5 	bl	80099a4 <__sprint_r>
 80067da:	2800      	cmp	r0, #0
 80067dc:	f47e afbc 	bne.w	8005758 <_vfprintf_r+0x260>
 80067e0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80067e2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80067e4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80067e8:	e78a      	b.n	8006700 <_vfprintf_r+0x1208>
 80067ea:	a825      	add	r0, sp, #148	; 0x94
 80067ec:	a922      	add	r1, sp, #136	; 0x88
 80067ee:	aa21      	add	r2, sp, #132	; 0x84
 80067f0:	2303      	movs	r3, #3
 80067f2:	9004      	str	r0, [sp, #16]
 80067f4:	9202      	str	r2, [sp, #8]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	f8cd b004 	str.w	fp, [sp, #4]
 80067fc:	9103      	str	r1, [sp, #12]
 80067fe:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8006802:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006804:	f000 fb68 	bl	8006ed8 <_dtoa_r>
 8006808:	465d      	mov	r5, fp
 800680a:	4606      	mov	r6, r0
 800680c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800680e:	2b46      	cmp	r3, #70	; 0x46
 8006810:	eb06 0405 	add.w	r4, r6, r5
 8006814:	f47f aee1 	bne.w	80065da <_vfprintf_r+0x10e2>
 8006818:	7833      	ldrb	r3, [r6, #0]
 800681a:	2b30      	cmp	r3, #48	; 0x30
 800681c:	f000 8198 	beq.w	8006b50 <_vfprintf_r+0x1658>
 8006820:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006822:	442c      	add	r4, r5
 8006824:	e6d9      	b.n	80065da <_vfprintf_r+0x10e2>
 8006826:	f1bb 0f00 	cmp.w	fp, #0
 800682a:	bf08      	it	eq
 800682c:	f04f 0b01 	moveq.w	fp, #1
 8006830:	e6a1      	b.n	8006576 <_vfprintf_r+0x107e>
 8006832:	9b07      	ldr	r3, [sp, #28]
 8006834:	f043 0320 	orr.w	r3, r3, #32
 8006838:	9307      	str	r3, [sp, #28]
 800683a:	f108 0801 	add.w	r8, r8, #1
 800683e:	f898 3000 	ldrb.w	r3, [r8]
 8006842:	f7fe becd 	b.w	80055e0 <_vfprintf_r+0xe8>
 8006846:	aa27      	add	r2, sp, #156	; 0x9c
 8006848:	9908      	ldr	r1, [sp, #32]
 800684a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800684c:	f003 f8aa 	bl	80099a4 <__sprint_r>
 8006850:	2800      	cmp	r0, #0
 8006852:	f47e af81 	bne.w	8005758 <_vfprintf_r+0x260>
 8006856:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006858:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800685c:	f7ff bb81 	b.w	8005f62 <_vfprintf_r+0xa6a>
 8006860:	4630      	mov	r0, r6
 8006862:	f7fd fa0d 	bl	8003c80 <strlen>
 8006866:	46a3      	mov	fp, r4
 8006868:	4603      	mov	r3, r0
 800686a:	900d      	str	r0, [sp, #52]	; 0x34
 800686c:	f7ff bb01 	b.w	8005e72 <_vfprintf_r+0x97a>
 8006870:	272d      	movs	r7, #45	; 0x2d
 8006872:	9309      	str	r3, [sp, #36]	; 0x24
 8006874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006876:	9307      	str	r3, [sp, #28]
 8006878:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800687c:	f04f 0b00 	mov.w	fp, #0
 8006880:	f7ff b855 	b.w	800592e <_vfprintf_r+0x436>
 8006884:	aa27      	add	r2, sp, #156	; 0x9c
 8006886:	9908      	ldr	r1, [sp, #32]
 8006888:	980a      	ldr	r0, [sp, #40]	; 0x28
 800688a:	f003 f88b 	bl	80099a4 <__sprint_r>
 800688e:	2800      	cmp	r0, #0
 8006890:	f47e af62 	bne.w	8005758 <_vfprintf_r+0x260>
 8006894:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006896:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006898:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800689c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800689e:	f8c9 6000 	str.w	r6, [r9]
 80068a2:	3301      	adds	r3, #1
 80068a4:	440c      	add	r4, r1
 80068a6:	2b07      	cmp	r3, #7
 80068a8:	9429      	str	r4, [sp, #164]	; 0xa4
 80068aa:	9328      	str	r3, [sp, #160]	; 0xa0
 80068ac:	f8c9 1004 	str.w	r1, [r9, #4]
 80068b0:	f77f a8fe 	ble.w	8005ab0 <_vfprintf_r+0x5b8>
 80068b4:	e41a      	b.n	80060ec <_vfprintf_r+0xbf4>
 80068b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068b8:	1cd8      	adds	r0, r3, #3
 80068ba:	db11      	blt.n	80068e0 <_vfprintf_r+0x13e8>
 80068bc:	459b      	cmp	fp, r3
 80068be:	db0f      	blt.n	80068e0 <_vfprintf_r+0x13e8>
 80068c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80068c2:	e6ac      	b.n	800661e <_vfprintf_r+0x1126>
 80068c4:	aa27      	add	r2, sp, #156	; 0x9c
 80068c6:	9908      	ldr	r1, [sp, #32]
 80068c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80068ca:	f003 f86b 	bl	80099a4 <__sprint_r>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	f47e af42 	bne.w	8005758 <_vfprintf_r+0x260>
 80068d4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80068d6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80068da:	e46e      	b.n	80061ba <_vfprintf_r+0xcc2>
 80068dc:	4623      	mov	r3, r4
 80068de:	e68f      	b.n	8006600 <_vfprintf_r+0x1108>
 80068e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80068e2:	3a02      	subs	r2, #2
 80068e4:	9211      	str	r2, [sp, #68]	; 0x44
 80068e6:	3b01      	subs	r3, #1
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80068ee:	9321      	str	r3, [sp, #132]	; 0x84
 80068f0:	bfb8      	it	lt
 80068f2:	425b      	neglt	r3, r3
 80068f4:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 80068f8:	bfb4      	ite	lt
 80068fa:	222d      	movlt	r2, #45	; 0x2d
 80068fc:	222b      	movge	r2, #43	; 0x2b
 80068fe:	2b09      	cmp	r3, #9
 8006900:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8006904:	f340 810b 	ble.w	8006b1e <_vfprintf_r+0x1626>
 8006908:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 800690c:	4604      	mov	r4, r0
 800690e:	4a2c      	ldr	r2, [pc, #176]	; (80069c0 <_vfprintf_r+0x14c8>)
 8006910:	fb82 2103 	smull	r2, r1, r2, r3
 8006914:	17da      	asrs	r2, r3, #31
 8006916:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800691a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800691e:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8006922:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006926:	2a09      	cmp	r2, #9
 8006928:	4613      	mov	r3, r2
 800692a:	f804 1d01 	strb.w	r1, [r4, #-1]!
 800692e:	dcee      	bgt.n	800690e <_vfprintf_r+0x1416>
 8006930:	4621      	mov	r1, r4
 8006932:	3330      	adds	r3, #48	; 0x30
 8006934:	b2da      	uxtb	r2, r3
 8006936:	f801 2d01 	strb.w	r2, [r1, #-1]!
 800693a:	4288      	cmp	r0, r1
 800693c:	f240 816f 	bls.w	8006c1e <_vfprintf_r+0x1726>
 8006940:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8006944:	4623      	mov	r3, r4
 8006946:	e001      	b.n	800694c <_vfprintf_r+0x1454>
 8006948:	f813 2b01 	ldrb.w	r2, [r3], #1
 800694c:	f801 2b01 	strb.w	r2, [r1], #1
 8006950:	4298      	cmp	r0, r3
 8006952:	d1f9      	bne.n	8006948 <_vfprintf_r+0x1450>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	1b1b      	subs	r3, r3, r4
 8006958:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 800695c:	4413      	add	r3, r2
 800695e:	aa23      	add	r2, sp, #140	; 0x8c
 8006960:	1a9b      	subs	r3, r3, r2
 8006962:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006964:	9319      	str	r3, [sp, #100]	; 0x64
 8006966:	2a01      	cmp	r2, #1
 8006968:	4413      	add	r3, r2
 800696a:	930d      	str	r3, [sp, #52]	; 0x34
 800696c:	f340 80fe 	ble.w	8006b6c <_vfprintf_r+0x1674>
 8006970:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006972:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006974:	4413      	add	r3, r2
 8006976:	2200      	movs	r2, #0
 8006978:	930d      	str	r3, [sp, #52]	; 0x34
 800697a:	9213      	str	r2, [sp, #76]	; 0x4c
 800697c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006980:	e65b      	b.n	800663a <_vfprintf_r+0x1142>
 8006982:	4614      	mov	r4, r2
 8006984:	3301      	adds	r3, #1
 8006986:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006988:	9328      	str	r3, [sp, #160]	; 0xa0
 800698a:	442c      	add	r4, r5
 800698c:	2b07      	cmp	r3, #7
 800698e:	9429      	str	r4, [sp, #164]	; 0xa4
 8006990:	e889 0024 	stmia.w	r9, {r2, r5}
 8006994:	f73f af76 	bgt.w	8006884 <_vfprintf_r+0x138c>
 8006998:	f109 0908 	add.w	r9, r9, #8
 800699c:	e77e      	b.n	800689c <_vfprintf_r+0x13a4>
 800699e:	aa27      	add	r2, sp, #156	; 0x9c
 80069a0:	9908      	ldr	r1, [sp, #32]
 80069a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80069a4:	f002 fffe 	bl	80099a4 <__sprint_r>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	f47e aed5 	bne.w	8005758 <_vfprintf_r+0x260>
 80069ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069b0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80069b2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80069b6:	e4d0      	b.n	800635a <_vfprintf_r+0xe62>
 80069b8:	0800a384 	.word	0x0800a384
 80069bc:	0800a398 	.word	0x0800a398
 80069c0:	66666667 	.word	0x66666667
 80069c4:	2d06      	cmp	r5, #6
 80069c6:	462b      	mov	r3, r5
 80069c8:	bf28      	it	cs
 80069ca:	2306      	movcs	r3, #6
 80069cc:	930d      	str	r3, [sp, #52]	; 0x34
 80069ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80069d2:	46b3      	mov	fp, r6
 80069d4:	970e      	str	r7, [sp, #56]	; 0x38
 80069d6:	9613      	str	r6, [sp, #76]	; 0x4c
 80069d8:	4637      	mov	r7, r6
 80069da:	9309      	str	r3, [sp, #36]	; 0x24
 80069dc:	4e91      	ldr	r6, [pc, #580]	; (8006c24 <_vfprintf_r+0x172c>)
 80069de:	f7fe bfa5 	b.w	800592c <_vfprintf_r+0x434>
 80069e2:	aa27      	add	r2, sp, #156	; 0x9c
 80069e4:	9908      	ldr	r1, [sp, #32]
 80069e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80069e8:	f002 ffdc 	bl	80099a4 <__sprint_r>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	f47e aeb3 	bne.w	8005758 <_vfprintf_r+0x260>
 80069f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069f6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80069fe:	e4c4      	b.n	800638a <_vfprintf_r+0xe92>
 8006a00:	a825      	add	r0, sp, #148	; 0x94
 8006a02:	a922      	add	r1, sp, #136	; 0x88
 8006a04:	aa21      	add	r2, sp, #132	; 0x84
 8006a06:	2303      	movs	r3, #3
 8006a08:	9004      	str	r0, [sp, #16]
 8006a0a:	9202      	str	r2, [sp, #8]
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	f8cd b004 	str.w	fp, [sp, #4]
 8006a12:	9103      	str	r1, [sp, #12]
 8006a14:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8006a18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006a1a:	f000 fa5d 	bl	8006ed8 <_dtoa_r>
 8006a1e:	465d      	mov	r5, fp
 8006a20:	4606      	mov	r6, r0
 8006a22:	eb00 040b 	add.w	r4, r0, fp
 8006a26:	e6f7      	b.n	8006818 <_vfprintf_r+0x1320>
 8006a28:	9307      	str	r3, [sp, #28]
 8006a2a:	f7ff b8c7 	b.w	8005bbc <_vfprintf_r+0x6c4>
 8006a2e:	f04f 0b06 	mov.w	fp, #6
 8006a32:	e5a0      	b.n	8006576 <_vfprintf_r+0x107e>
 8006a34:	272d      	movs	r7, #45	; 0x2d
 8006a36:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006a3a:	f7ff b9b3 	b.w	8005da4 <_vfprintf_r+0x8ac>
 8006a3e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8006a42:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8006a46:	931d      	str	r3, [sp, #116]	; 0x74
 8006a48:	232d      	movs	r3, #45	; 0x2d
 8006a4a:	911c      	str	r1, [sp, #112]	; 0x70
 8006a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a4e:	e5a0      	b.n	8006592 <_vfprintf_r+0x109a>
 8006a50:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006a52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a54:	4413      	add	r3, r2
 8006a56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a58:	930d      	str	r3, [sp, #52]	; 0x34
 8006a5a:	2a00      	cmp	r2, #0
 8006a5c:	f340 8090 	ble.w	8006b80 <_vfprintf_r+0x1688>
 8006a60:	2267      	movs	r2, #103	; 0x67
 8006a62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006a66:	9211      	str	r2, [sp, #68]	; 0x44
 8006a68:	e5e7      	b.n	800663a <_vfprintf_r+0x1142>
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f340 8090 	ble.w	8006b90 <_vfprintf_r+0x1698>
 8006a70:	f1bb 0f00 	cmp.w	fp, #0
 8006a74:	d163      	bne.n	8006b3e <_vfprintf_r+0x1646>
 8006a76:	9a07      	ldr	r2, [sp, #28]
 8006a78:	07d1      	lsls	r1, r2, #31
 8006a7a:	d460      	bmi.n	8006b3e <_vfprintf_r+0x1646>
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	920d      	str	r2, [sp, #52]	; 0x34
 8006a80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006a84:	e5d9      	b.n	800663a <_vfprintf_r+0x1142>
 8006a86:	9b07      	ldr	r3, [sp, #28]
 8006a88:	07db      	lsls	r3, r3, #31
 8006a8a:	465f      	mov	r7, fp
 8006a8c:	d505      	bpl.n	8006a9a <_vfprintf_r+0x15a2>
 8006a8e:	ae44      	add	r6, sp, #272	; 0x110
 8006a90:	2330      	movs	r3, #48	; 0x30
 8006a92:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8006a96:	f7fe bf3f 	b.w	8005918 <_vfprintf_r+0x420>
 8006a9a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8006a9e:	ae34      	add	r6, sp, #208	; 0xd0
 8006aa0:	f7fe bf3d 	b.w	800591e <_vfprintf_r+0x426>
 8006aa4:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8006aa8:	970e      	str	r7, [sp, #56]	; 0x38
 8006aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8006aac:	950d      	str	r5, [sp, #52]	; 0x34
 8006aae:	4683      	mov	fp, r0
 8006ab0:	9013      	str	r0, [sp, #76]	; 0x4c
 8006ab2:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006ab6:	f7fe bf39 	b.w	800592c <_vfprintf_r+0x434>
 8006aba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006abc:	2b47      	cmp	r3, #71	; 0x47
 8006abe:	f47f ad8b 	bne.w	80065d8 <_vfprintf_r+0x10e0>
 8006ac2:	9b07      	ldr	r3, [sp, #28]
 8006ac4:	07dc      	lsls	r4, r3, #31
 8006ac6:	f53f aea1 	bmi.w	800680c <_vfprintf_r+0x1314>
 8006aca:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006acc:	2f47      	cmp	r7, #71	; 0x47
 8006ace:	eba3 0306 	sub.w	r3, r3, r6
 8006ad2:	9312      	str	r3, [sp, #72]	; 0x48
 8006ad4:	f43f aeef 	beq.w	80068b6 <_vfprintf_r+0x13be>
 8006ad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ada:	e704      	b.n	80068e6 <_vfprintf_r+0x13ee>
 8006adc:	aa27      	add	r2, sp, #156	; 0x9c
 8006ade:	9908      	ldr	r1, [sp, #32]
 8006ae0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006ae2:	f002 ff5f 	bl	80099a4 <__sprint_r>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	f47e ae36 	bne.w	8005758 <_vfprintf_r+0x260>
 8006aec:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006aee:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006af0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006af2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006af6:	e61a      	b.n	800672e <_vfprintf_r+0x1236>
 8006af8:	46a0      	mov	r8, r4
 8006afa:	2500      	movs	r5, #0
 8006afc:	f7fe bd72 	b.w	80055e4 <_vfprintf_r+0xec>
 8006b00:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006b02:	e57d      	b.n	8006600 <_vfprintf_r+0x1108>
 8006b04:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006b06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b08:	4413      	add	r3, r2
 8006b0a:	2267      	movs	r2, #103	; 0x67
 8006b0c:	930d      	str	r3, [sp, #52]	; 0x34
 8006b0e:	9211      	str	r2, [sp, #68]	; 0x44
 8006b10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006b14:	e591      	b.n	800663a <_vfprintf_r+0x1142>
 8006b16:	930e      	str	r3, [sp, #56]	; 0x38
 8006b18:	4617      	mov	r7, r2
 8006b1a:	f7ff bbff 	b.w	800631c <_vfprintf_r+0xe24>
 8006b1e:	3330      	adds	r3, #48	; 0x30
 8006b20:	2230      	movs	r2, #48	; 0x30
 8006b22:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8006b26:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8006b2a:	ab24      	add	r3, sp, #144	; 0x90
 8006b2c:	e717      	b.n	800695e <_vfprintf_r+0x1466>
 8006b2e:	930e      	str	r3, [sp, #56]	; 0x38
 8006b30:	e4fc      	b.n	800652c <_vfprintf_r+0x1034>
 8006b32:	4e3d      	ldr	r6, [pc, #244]	; (8006c28 <_vfprintf_r+0x1730>)
 8006b34:	4b3d      	ldr	r3, [pc, #244]	; (8006c2c <_vfprintf_r+0x1734>)
 8006b36:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006b3a:	f7ff b935 	b.w	8005da8 <_vfprintf_r+0x8b0>
 8006b3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b40:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006b42:	189d      	adds	r5, r3, r2
 8006b44:	eb05 030b 	add.w	r3, r5, fp
 8006b48:	930d      	str	r3, [sp, #52]	; 0x34
 8006b4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006b4e:	e574      	b.n	800663a <_vfprintf_r+0x1142>
 8006b50:	2200      	movs	r2, #0
 8006b52:	2300      	movs	r3, #0
 8006b54:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8006b58:	f7fc fe82 	bl	8003860 <__aeabi_dcmpeq>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	f47f ae5f 	bne.w	8006820 <_vfprintf_r+0x1328>
 8006b62:	f1c5 0501 	rsb	r5, r5, #1
 8006b66:	9521      	str	r5, [sp, #132]	; 0x84
 8006b68:	442c      	add	r4, r5
 8006b6a:	e536      	b.n	80065da <_vfprintf_r+0x10e2>
 8006b6c:	9b07      	ldr	r3, [sp, #28]
 8006b6e:	f013 0301 	ands.w	r3, r3, #1
 8006b72:	f47f aefd 	bne.w	8006970 <_vfprintf_r+0x1478>
 8006b76:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006b7e:	e55c      	b.n	800663a <_vfprintf_r+0x1142>
 8006b80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b84:	f1c3 0301 	rsb	r3, r3, #1
 8006b88:	441a      	add	r2, r3
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	920d      	str	r2, [sp, #52]	; 0x34
 8006b8e:	e767      	b.n	8006a60 <_vfprintf_r+0x1568>
 8006b90:	f1bb 0f00 	cmp.w	fp, #0
 8006b94:	d102      	bne.n	8006b9c <_vfprintf_r+0x16a4>
 8006b96:	9b07      	ldr	r3, [sp, #28]
 8006b98:	07da      	lsls	r2, r3, #31
 8006b9a:	d507      	bpl.n	8006bac <_vfprintf_r+0x16b4>
 8006b9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b9e:	1c5d      	adds	r5, r3, #1
 8006ba0:	eb05 030b 	add.w	r3, r5, fp
 8006ba4:	930d      	str	r3, [sp, #52]	; 0x34
 8006ba6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006baa:	e546      	b.n	800663a <_vfprintf_r+0x1142>
 8006bac:	2301      	movs	r3, #1
 8006bae:	930d      	str	r3, [sp, #52]	; 0x34
 8006bb0:	e543      	b.n	800663a <_vfprintf_r+0x1142>
 8006bb2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006bb4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006bb8:	6805      	ldr	r5, [r0, #0]
 8006bba:	3004      	adds	r0, #4
 8006bbc:	2d00      	cmp	r5, #0
 8006bbe:	900e      	str	r0, [sp, #56]	; 0x38
 8006bc0:	46a0      	mov	r8, r4
 8006bc2:	f6be ad0d 	bge.w	80055e0 <_vfprintf_r+0xe8>
 8006bc6:	f04f 35ff 	mov.w	r5, #4294967295
 8006bca:	f7fe bd09 	b.w	80055e0 <_vfprintf_r+0xe8>
 8006bce:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006bd2:	f7ff b893 	b.w	8005cfc <_vfprintf_r+0x804>
 8006bd6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006bda:	f7ff b85d 	b.w	8005c98 <_vfprintf_r+0x7a0>
 8006bde:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006be2:	f7fe bfbf 	b.w	8005b64 <_vfprintf_r+0x66c>
 8006be6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006bea:	f7fe be5c 	b.w	80058a6 <_vfprintf_r+0x3ae>
 8006bee:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006bf2:	f7ff b812 	b.w	8005c1a <_vfprintf_r+0x722>
 8006bf6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006bfa:	f7fe bdca 	b.w	8005792 <_vfprintf_r+0x29a>
 8006bfe:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006c02:	f7ff b951 	b.w	8005ea8 <_vfprintf_r+0x9b0>
 8006c06:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006c0a:	f7fe be23 	b.w	8005854 <_vfprintf_r+0x35c>
 8006c0e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006c12:	f7ff b8ed 	b.w	8005df0 <_vfprintf_r+0x8f8>
 8006c16:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006c1a:	f7ff b88c 	b.w	8005d36 <_vfprintf_r+0x83e>
 8006c1e:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8006c22:	e69c      	b.n	800695e <_vfprintf_r+0x1466>
 8006c24:	0800a37c 	.word	0x0800a37c
 8006c28:	0800a350 	.word	0x0800a350
 8006c2c:	0800a34c 	.word	0x0800a34c

08006c30 <__sbprintf>:
 8006c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c32:	460c      	mov	r4, r1
 8006c34:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8006c38:	8989      	ldrh	r1, [r1, #12]
 8006c3a:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8006c3c:	89e5      	ldrh	r5, [r4, #14]
 8006c3e:	9619      	str	r6, [sp, #100]	; 0x64
 8006c40:	f021 0102 	bic.w	r1, r1, #2
 8006c44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c46:	f8ad 500e 	strh.w	r5, [sp, #14]
 8006c4a:	2500      	movs	r5, #0
 8006c4c:	69e7      	ldr	r7, [r4, #28]
 8006c4e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8006c52:	9609      	str	r6, [sp, #36]	; 0x24
 8006c54:	9506      	str	r5, [sp, #24]
 8006c56:	ae1a      	add	r6, sp, #104	; 0x68
 8006c58:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8006c5c:	4669      	mov	r1, sp
 8006c5e:	9600      	str	r6, [sp, #0]
 8006c60:	9604      	str	r6, [sp, #16]
 8006c62:	9502      	str	r5, [sp, #8]
 8006c64:	9505      	str	r5, [sp, #20]
 8006c66:	9707      	str	r7, [sp, #28]
 8006c68:	4606      	mov	r6, r0
 8006c6a:	f7fe fc45 	bl	80054f8 <_vfprintf_r>
 8006c6e:	1e05      	subs	r5, r0, #0
 8006c70:	db07      	blt.n	8006c82 <__sbprintf+0x52>
 8006c72:	4630      	mov	r0, r6
 8006c74:	4669      	mov	r1, sp
 8006c76:	f001 f8e9 	bl	8007e4c <_fflush_r>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	bf18      	it	ne
 8006c7e:	f04f 35ff 	movne.w	r5, #4294967295
 8006c82:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006c86:	065b      	lsls	r3, r3, #25
 8006c88:	d503      	bpl.n	8006c92 <__sbprintf+0x62>
 8006c8a:	89a3      	ldrh	r3, [r4, #12]
 8006c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c90:	81a3      	strh	r3, [r4, #12]
 8006c92:	4628      	mov	r0, r5
 8006c94:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8006c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c9a:	bf00      	nop

08006c9c <_vsprintf_r>:
 8006c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c9e:	b09b      	sub	sp, #108	; 0x6c
 8006ca0:	460d      	mov	r5, r1
 8006ca2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8006ca6:	f44f 7702 	mov.w	r7, #520	; 0x208
 8006caa:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8006cae:	4669      	mov	r1, sp
 8006cb0:	9500      	str	r5, [sp, #0]
 8006cb2:	9504      	str	r5, [sp, #16]
 8006cb4:	f8ad 700c 	strh.w	r7, [sp, #12]
 8006cb8:	9402      	str	r4, [sp, #8]
 8006cba:	9405      	str	r4, [sp, #20]
 8006cbc:	f8ad 600e 	strh.w	r6, [sp, #14]
 8006cc0:	f7fd f89e 	bl	8003e00 <_svfprintf_r>
 8006cc4:	9b00      	ldr	r3, [sp, #0]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	701a      	strb	r2, [r3, #0]
 8006cca:	b01b      	add	sp, #108	; 0x6c
 8006ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cce:	bf00      	nop

08006cd0 <vsprintf>:
 8006cd0:	b410      	push	{r4}
 8006cd2:	4c04      	ldr	r4, [pc, #16]	; (8006ce4 <vsprintf+0x14>)
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	460a      	mov	r2, r1
 8006cd8:	4601      	mov	r1, r0
 8006cda:	6820      	ldr	r0, [r4, #0]
 8006cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ce0:	f7ff bfdc 	b.w	8006c9c <_vsprintf_r>
 8006ce4:	20000468 	.word	0x20000468

08006ce8 <__swsetup_r>:
 8006ce8:	b538      	push	{r3, r4, r5, lr}
 8006cea:	4b30      	ldr	r3, [pc, #192]	; (8006dac <__swsetup_r+0xc4>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4605      	mov	r5, r0
 8006cf0:	460c      	mov	r4, r1
 8006cf2:	b113      	cbz	r3, 8006cfa <__swsetup_r+0x12>
 8006cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cf6:	2a00      	cmp	r2, #0
 8006cf8:	d038      	beq.n	8006d6c <__swsetup_r+0x84>
 8006cfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cfe:	b293      	uxth	r3, r2
 8006d00:	0718      	lsls	r0, r3, #28
 8006d02:	d50c      	bpl.n	8006d1e <__swsetup_r+0x36>
 8006d04:	6920      	ldr	r0, [r4, #16]
 8006d06:	b1a8      	cbz	r0, 8006d34 <__swsetup_r+0x4c>
 8006d08:	f013 0201 	ands.w	r2, r3, #1
 8006d0c:	d01e      	beq.n	8006d4c <__swsetup_r+0x64>
 8006d0e:	6963      	ldr	r3, [r4, #20]
 8006d10:	2200      	movs	r2, #0
 8006d12:	425b      	negs	r3, r3
 8006d14:	61a3      	str	r3, [r4, #24]
 8006d16:	60a2      	str	r2, [r4, #8]
 8006d18:	b1f0      	cbz	r0, 8006d58 <__swsetup_r+0x70>
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	bd38      	pop	{r3, r4, r5, pc}
 8006d1e:	06d9      	lsls	r1, r3, #27
 8006d20:	d53c      	bpl.n	8006d9c <__swsetup_r+0xb4>
 8006d22:	0758      	lsls	r0, r3, #29
 8006d24:	d426      	bmi.n	8006d74 <__swsetup_r+0x8c>
 8006d26:	6920      	ldr	r0, [r4, #16]
 8006d28:	f042 0308 	orr.w	r3, r2, #8
 8006d2c:	81a3      	strh	r3, [r4, #12]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d1e9      	bne.n	8006d08 <__swsetup_r+0x20>
 8006d34:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8006d38:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006d3c:	d0e4      	beq.n	8006d08 <__swsetup_r+0x20>
 8006d3e:	4628      	mov	r0, r5
 8006d40:	4621      	mov	r1, r4
 8006d42:	f001 fc4f 	bl	80085e4 <__smakebuf_r>
 8006d46:	89a3      	ldrh	r3, [r4, #12]
 8006d48:	6920      	ldr	r0, [r4, #16]
 8006d4a:	e7dd      	b.n	8006d08 <__swsetup_r+0x20>
 8006d4c:	0799      	lsls	r1, r3, #30
 8006d4e:	bf58      	it	pl
 8006d50:	6962      	ldrpl	r2, [r4, #20]
 8006d52:	60a2      	str	r2, [r4, #8]
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d1e0      	bne.n	8006d1a <__swsetup_r+0x32>
 8006d58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d5c:	061a      	lsls	r2, r3, #24
 8006d5e:	d5dd      	bpl.n	8006d1c <__swsetup_r+0x34>
 8006d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d64:	81a3      	strh	r3, [r4, #12]
 8006d66:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6a:	bd38      	pop	{r3, r4, r5, pc}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f001 f901 	bl	8007f74 <__sinit>
 8006d72:	e7c2      	b.n	8006cfa <__swsetup_r+0x12>
 8006d74:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d76:	b151      	cbz	r1, 8006d8e <__swsetup_r+0xa6>
 8006d78:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006d7c:	4299      	cmp	r1, r3
 8006d7e:	d004      	beq.n	8006d8a <__swsetup_r+0xa2>
 8006d80:	4628      	mov	r0, r5
 8006d82:	f001 f94f 	bl	8008024 <_free_r>
 8006d86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	6323      	str	r3, [r4, #48]	; 0x30
 8006d8e:	2300      	movs	r3, #0
 8006d90:	6920      	ldr	r0, [r4, #16]
 8006d92:	6063      	str	r3, [r4, #4]
 8006d94:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8006d98:	6020      	str	r0, [r4, #0]
 8006d9a:	e7c5      	b.n	8006d28 <__swsetup_r+0x40>
 8006d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006da0:	2309      	movs	r3, #9
 8006da2:	602b      	str	r3, [r5, #0]
 8006da4:	f04f 30ff 	mov.w	r0, #4294967295
 8006da8:	81a2      	strh	r2, [r4, #12]
 8006daa:	bd38      	pop	{r3, r4, r5, pc}
 8006dac:	20000468 	.word	0x20000468

08006db0 <quorem>:
 8006db0:	6902      	ldr	r2, [r0, #16]
 8006db2:	690b      	ldr	r3, [r1, #16]
 8006db4:	4293      	cmp	r3, r2
 8006db6:	f300 808d 	bgt.w	8006ed4 <quorem+0x124>
 8006dba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dbe:	f103 38ff 	add.w	r8, r3, #4294967295
 8006dc2:	f101 0714 	add.w	r7, r1, #20
 8006dc6:	f100 0b14 	add.w	fp, r0, #20
 8006dca:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8006dce:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8006dd2:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	3201      	adds	r2, #1
 8006dda:	fbb3 f9f2 	udiv	r9, r3, r2
 8006dde:	eb0b 0304 	add.w	r3, fp, r4
 8006de2:	9400      	str	r4, [sp, #0]
 8006de4:	eb07 0a04 	add.w	sl, r7, r4
 8006de8:	9301      	str	r3, [sp, #4]
 8006dea:	f1b9 0f00 	cmp.w	r9, #0
 8006dee:	d039      	beq.n	8006e64 <quorem+0xb4>
 8006df0:	2500      	movs	r5, #0
 8006df2:	46bc      	mov	ip, r7
 8006df4:	46de      	mov	lr, fp
 8006df6:	462b      	mov	r3, r5
 8006df8:	f85c 6b04 	ldr.w	r6, [ip], #4
 8006dfc:	f8de 2000 	ldr.w	r2, [lr]
 8006e00:	b2b4      	uxth	r4, r6
 8006e02:	fb09 5504 	mla	r5, r9, r4, r5
 8006e06:	0c36      	lsrs	r6, r6, #16
 8006e08:	0c2c      	lsrs	r4, r5, #16
 8006e0a:	fb09 4406 	mla	r4, r9, r6, r4
 8006e0e:	b2ad      	uxth	r5, r5
 8006e10:	1b5b      	subs	r3, r3, r5
 8006e12:	b2a6      	uxth	r6, r4
 8006e14:	fa13 f382 	uxtah	r3, r3, r2
 8006e18:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 8006e1c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006e26:	45e2      	cmp	sl, ip
 8006e28:	f84e 3b04 	str.w	r3, [lr], #4
 8006e2c:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8006e30:	ea4f 4326 	mov.w	r3, r6, asr #16
 8006e34:	d2e0      	bcs.n	8006df8 <quorem+0x48>
 8006e36:	9b00      	ldr	r3, [sp, #0]
 8006e38:	f85b 3003 	ldr.w	r3, [fp, r3]
 8006e3c:	b993      	cbnz	r3, 8006e64 <quorem+0xb4>
 8006e3e:	9c01      	ldr	r4, [sp, #4]
 8006e40:	1f23      	subs	r3, r4, #4
 8006e42:	459b      	cmp	fp, r3
 8006e44:	d20c      	bcs.n	8006e60 <quorem+0xb0>
 8006e46:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006e4a:	b94b      	cbnz	r3, 8006e60 <quorem+0xb0>
 8006e4c:	f1a4 0308 	sub.w	r3, r4, #8
 8006e50:	e002      	b.n	8006e58 <quorem+0xa8>
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	3b04      	subs	r3, #4
 8006e56:	b91a      	cbnz	r2, 8006e60 <quorem+0xb0>
 8006e58:	459b      	cmp	fp, r3
 8006e5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e5e:	d3f8      	bcc.n	8006e52 <quorem+0xa2>
 8006e60:	f8c0 8010 	str.w	r8, [r0, #16]
 8006e64:	4604      	mov	r4, r0
 8006e66:	f002 f993 	bl	8009190 <__mcmp>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	db2e      	blt.n	8006ecc <quorem+0x11c>
 8006e6e:	f109 0901 	add.w	r9, r9, #1
 8006e72:	465d      	mov	r5, fp
 8006e74:	2300      	movs	r3, #0
 8006e76:	f857 1b04 	ldr.w	r1, [r7], #4
 8006e7a:	6828      	ldr	r0, [r5, #0]
 8006e7c:	b28a      	uxth	r2, r1
 8006e7e:	1a9a      	subs	r2, r3, r2
 8006e80:	0c09      	lsrs	r1, r1, #16
 8006e82:	fa12 f280 	uxtah	r2, r2, r0
 8006e86:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8006e8a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8006e8e:	b291      	uxth	r1, r2
 8006e90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006e94:	45ba      	cmp	sl, r7
 8006e96:	f845 1b04 	str.w	r1, [r5], #4
 8006e9a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8006e9e:	d2ea      	bcs.n	8006e76 <quorem+0xc6>
 8006ea0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8006ea4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8006ea8:	b982      	cbnz	r2, 8006ecc <quorem+0x11c>
 8006eaa:	1f1a      	subs	r2, r3, #4
 8006eac:	4593      	cmp	fp, r2
 8006eae:	d20b      	bcs.n	8006ec8 <quorem+0x118>
 8006eb0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8006eb4:	b942      	cbnz	r2, 8006ec8 <quorem+0x118>
 8006eb6:	3b08      	subs	r3, #8
 8006eb8:	e002      	b.n	8006ec0 <quorem+0x110>
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	3b04      	subs	r3, #4
 8006ebe:	b91a      	cbnz	r2, 8006ec8 <quorem+0x118>
 8006ec0:	459b      	cmp	fp, r3
 8006ec2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ec6:	d3f8      	bcc.n	8006eba <quorem+0x10a>
 8006ec8:	f8c4 8010 	str.w	r8, [r4, #16]
 8006ecc:	4648      	mov	r0, r9
 8006ece:	b003      	add	sp, #12
 8006ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	4770      	bx	lr

08006ed8 <_dtoa_r>:
 8006ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006ede:	b099      	sub	sp, #100	; 0x64
 8006ee0:	4681      	mov	r9, r0
 8006ee2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8006ee4:	4692      	mov	sl, r2
 8006ee6:	469b      	mov	fp, r3
 8006ee8:	b149      	cbz	r1, 8006efe <_dtoa_r+0x26>
 8006eea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006eec:	604a      	str	r2, [r1, #4]
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4093      	lsls	r3, r2
 8006ef2:	608b      	str	r3, [r1, #8]
 8006ef4:	f001 ff6a 	bl	8008dcc <_Bfree>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8006efe:	f1bb 0f00 	cmp.w	fp, #0
 8006f02:	46d8      	mov	r8, fp
 8006f04:	db33      	blt.n	8006f6e <_dtoa_r+0x96>
 8006f06:	2300      	movs	r3, #0
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	4ba3      	ldr	r3, [pc, #652]	; (8007198 <_dtoa_r+0x2c0>)
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	ea08 0303 	and.w	r3, r8, r3
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d014      	beq.n	8006f40 <_dtoa_r+0x68>
 8006f16:	2200      	movs	r2, #0
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4650      	mov	r0, sl
 8006f1c:	4659      	mov	r1, fp
 8006f1e:	f7fc fc9f 	bl	8003860 <__aeabi_dcmpeq>
 8006f22:	4605      	mov	r5, r0
 8006f24:	b348      	cbz	r0, 8006f7a <_dtoa_r+0xa2>
 8006f26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f28:	2301      	movs	r3, #1
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 80c2 	beq.w	80070b8 <_dtoa_r+0x1e0>
 8006f34:	4899      	ldr	r0, [pc, #612]	; (800719c <_dtoa_r+0x2c4>)
 8006f36:	6018      	str	r0, [r3, #0]
 8006f38:	3801      	subs	r0, #1
 8006f3a:	b019      	add	sp, #100	; 0x64
 8006f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f40:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f42:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	f1ba 0f00 	cmp.w	sl, #0
 8006f4c:	f000 809f 	beq.w	800708e <_dtoa_r+0x1b6>
 8006f50:	4893      	ldr	r0, [pc, #588]	; (80071a0 <_dtoa_r+0x2c8>)
 8006f52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0f0      	beq.n	8006f3a <_dtoa_r+0x62>
 8006f58:	78c3      	ldrb	r3, [r0, #3]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 80ae 	beq.w	80070bc <_dtoa_r+0x1e4>
 8006f60:	f100 0308 	add.w	r3, r0, #8
 8006f64:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	b019      	add	sp, #100	; 0x64
 8006f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6e:	2301      	movs	r3, #1
 8006f70:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 8006f74:	6023      	str	r3, [r4, #0]
 8006f76:	46c3      	mov	fp, r8
 8006f78:	e7c7      	b.n	8006f0a <_dtoa_r+0x32>
 8006f7a:	aa16      	add	r2, sp, #88	; 0x58
 8006f7c:	ab17      	add	r3, sp, #92	; 0x5c
 8006f7e:	9201      	str	r2, [sp, #4]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	4652      	mov	r2, sl
 8006f84:	465b      	mov	r3, fp
 8006f86:	4648      	mov	r0, r9
 8006f88:	f002 f9ae 	bl	80092e8 <__d2b>
 8006f8c:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8006f90:	9008      	str	r0, [sp, #32]
 8006f92:	f040 8085 	bne.w	80070a0 <_dtoa_r+0x1c8>
 8006f96:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8006f98:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8006f9a:	442c      	add	r4, r5
 8006f9c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	f340 8289 	ble.w	80074b8 <_dtoa_r+0x5e0>
 8006fa6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006faa:	f204 4012 	addw	r0, r4, #1042	; 0x412
 8006fae:	fa08 f803 	lsl.w	r8, r8, r3
 8006fb2:	fa2a f000 	lsr.w	r0, sl, r0
 8006fb6:	ea40 0008 	orr.w	r0, r0, r8
 8006fba:	f7fc f973 	bl	80032a4 <__aeabi_ui2d>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	3c01      	subs	r4, #1
 8006fc2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006fc6:	930d      	str	r3, [sp, #52]	; 0x34
 8006fc8:	2200      	movs	r2, #0
 8006fca:	4b76      	ldr	r3, [pc, #472]	; (80071a4 <_dtoa_r+0x2cc>)
 8006fcc:	f7fc f82c 	bl	8003028 <__aeabi_dsub>
 8006fd0:	a36b      	add	r3, pc, #428	; (adr r3, 8007180 <_dtoa_r+0x2a8>)
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	f7fc f9db 	bl	8003390 <__aeabi_dmul>
 8006fda:	a36b      	add	r3, pc, #428	; (adr r3, 8007188 <_dtoa_r+0x2b0>)
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f7fc f824 	bl	800302c <__adddf3>
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	460f      	mov	r7, r1
 8006fea:	f7fc f96b 	bl	80032c4 <__aeabi_i2d>
 8006fee:	a368      	add	r3, pc, #416	; (adr r3, 8007190 <_dtoa_r+0x2b8>)
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	f7fc f9cc 	bl	8003390 <__aeabi_dmul>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	4639      	mov	r1, r7
 8007000:	f7fc f814 	bl	800302c <__adddf3>
 8007004:	4606      	mov	r6, r0
 8007006:	460f      	mov	r7, r1
 8007008:	f002 feb0 	bl	8009d6c <__aeabi_d2iz>
 800700c:	2200      	movs	r2, #0
 800700e:	9004      	str	r0, [sp, #16]
 8007010:	2300      	movs	r3, #0
 8007012:	4630      	mov	r0, r6
 8007014:	4639      	mov	r1, r7
 8007016:	f7fc fc2d 	bl	8003874 <__aeabi_dcmplt>
 800701a:	2800      	cmp	r0, #0
 800701c:	f040 8227 	bne.w	800746e <_dtoa_r+0x596>
 8007020:	9e04      	ldr	r6, [sp, #16]
 8007022:	2e16      	cmp	r6, #22
 8007024:	f200 8220 	bhi.w	8007468 <_dtoa_r+0x590>
 8007028:	4b5f      	ldr	r3, [pc, #380]	; (80071a8 <_dtoa_r+0x2d0>)
 800702a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800702e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007032:	4652      	mov	r2, sl
 8007034:	465b      	mov	r3, fp
 8007036:	f7fc fc3b 	bl	80038b0 <__aeabi_dcmpgt>
 800703a:	2800      	cmp	r0, #0
 800703c:	f000 8241 	beq.w	80074c2 <_dtoa_r+0x5ea>
 8007040:	1e73      	subs	r3, r6, #1
 8007042:	9304      	str	r3, [sp, #16]
 8007044:	2300      	movs	r3, #0
 8007046:	930b      	str	r3, [sp, #44]	; 0x2c
 8007048:	1b2c      	subs	r4, r5, r4
 800704a:	f1b4 0801 	subs.w	r8, r4, #1
 800704e:	f100 8229 	bmi.w	80074a4 <_dtoa_r+0x5cc>
 8007052:	2300      	movs	r3, #0
 8007054:	9305      	str	r3, [sp, #20]
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f2c0 821a 	blt.w	8007492 <_dtoa_r+0x5ba>
 800705e:	4498      	add	r8, r3
 8007060:	930a      	str	r3, [sp, #40]	; 0x28
 8007062:	2300      	movs	r3, #0
 8007064:	9302      	str	r3, [sp, #8]
 8007066:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007068:	2b09      	cmp	r3, #9
 800706a:	d829      	bhi.n	80070c0 <_dtoa_r+0x1e8>
 800706c:	2b05      	cmp	r3, #5
 800706e:	f340 8643 	ble.w	8007cf8 <_dtoa_r+0xe20>
 8007072:	3b04      	subs	r3, #4
 8007074:	9322      	str	r3, [sp, #136]	; 0x88
 8007076:	2500      	movs	r5, #0
 8007078:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800707a:	3b02      	subs	r3, #2
 800707c:	2b03      	cmp	r3, #3
 800707e:	f200 8622 	bhi.w	8007cc6 <_dtoa_r+0xdee>
 8007082:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007086:	032a      	.short	0x032a
 8007088:	03350223 	.word	0x03350223
 800708c:	044f      	.short	0x044f
 800708e:	4b44      	ldr	r3, [pc, #272]	; (80071a0 <_dtoa_r+0x2c8>)
 8007090:	4a46      	ldr	r2, [pc, #280]	; (80071ac <_dtoa_r+0x2d4>)
 8007092:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007096:	2800      	cmp	r0, #0
 8007098:	bf14      	ite	ne
 800709a:	4618      	movne	r0, r3
 800709c:	4610      	moveq	r0, r2
 800709e:	e758      	b.n	8006f52 <_dtoa_r+0x7a>
 80070a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070a4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80070a8:	950d      	str	r5, [sp, #52]	; 0x34
 80070aa:	4650      	mov	r0, sl
 80070ac:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80070b0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80070b4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80070b6:	e787      	b.n	8006fc8 <_dtoa_r+0xf0>
 80070b8:	483d      	ldr	r0, [pc, #244]	; (80071b0 <_dtoa_r+0x2d8>)
 80070ba:	e73e      	b.n	8006f3a <_dtoa_r+0x62>
 80070bc:	1cc3      	adds	r3, r0, #3
 80070be:	e751      	b.n	8006f64 <_dtoa_r+0x8c>
 80070c0:	2100      	movs	r1, #0
 80070c2:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80070c6:	4648      	mov	r0, r9
 80070c8:	9122      	str	r1, [sp, #136]	; 0x88
 80070ca:	f001 fe59 	bl	8008d80 <_Balloc>
 80070ce:	f04f 33ff 	mov.w	r3, #4294967295
 80070d2:	9306      	str	r3, [sp, #24]
 80070d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80070d6:	930c      	str	r3, [sp, #48]	; 0x30
 80070d8:	2301      	movs	r3, #1
 80070da:	9007      	str	r0, [sp, #28]
 80070dc:	9223      	str	r2, [sp, #140]	; 0x8c
 80070de:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 80070e2:	9309      	str	r3, [sp, #36]	; 0x24
 80070e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f2c0 80d0 	blt.w	800728c <_dtoa_r+0x3b4>
 80070ec:	9a04      	ldr	r2, [sp, #16]
 80070ee:	2a0e      	cmp	r2, #14
 80070f0:	f300 80cc 	bgt.w	800728c <_dtoa_r+0x3b4>
 80070f4:	4b2c      	ldr	r3, [pc, #176]	; (80071a8 <_dtoa_r+0x2d0>)
 80070f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070fa:	ed93 7b00 	vldr	d7, [r3]
 80070fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007100:	2b00      	cmp	r3, #0
 8007102:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007106:	f2c0 82fe 	blt.w	8007706 <_dtoa_r+0x82e>
 800710a:	4656      	mov	r6, sl
 800710c:	465f      	mov	r7, fp
 800710e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8007112:	4630      	mov	r0, r6
 8007114:	4652      	mov	r2, sl
 8007116:	465b      	mov	r3, fp
 8007118:	4639      	mov	r1, r7
 800711a:	f7fc fa63 	bl	80035e4 <__aeabi_ddiv>
 800711e:	f002 fe25 	bl	8009d6c <__aeabi_d2iz>
 8007122:	4604      	mov	r4, r0
 8007124:	f7fc f8ce 	bl	80032c4 <__aeabi_i2d>
 8007128:	4652      	mov	r2, sl
 800712a:	465b      	mov	r3, fp
 800712c:	f7fc f930 	bl	8003390 <__aeabi_dmul>
 8007130:	460b      	mov	r3, r1
 8007132:	4602      	mov	r2, r0
 8007134:	4639      	mov	r1, r7
 8007136:	4630      	mov	r0, r6
 8007138:	f7fb ff76 	bl	8003028 <__aeabi_dsub>
 800713c:	9d07      	ldr	r5, [sp, #28]
 800713e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8007142:	702b      	strb	r3, [r5, #0]
 8007144:	9b06      	ldr	r3, [sp, #24]
 8007146:	2b01      	cmp	r3, #1
 8007148:	4606      	mov	r6, r0
 800714a:	460f      	mov	r7, r1
 800714c:	f105 0501 	add.w	r5, r5, #1
 8007150:	d061      	beq.n	8007216 <_dtoa_r+0x33e>
 8007152:	2200      	movs	r2, #0
 8007154:	4b17      	ldr	r3, [pc, #92]	; (80071b4 <_dtoa_r+0x2dc>)
 8007156:	f7fc f91b 	bl	8003390 <__aeabi_dmul>
 800715a:	2200      	movs	r2, #0
 800715c:	2300      	movs	r3, #0
 800715e:	4606      	mov	r6, r0
 8007160:	460f      	mov	r7, r1
 8007162:	f7fc fb7d 	bl	8003860 <__aeabi_dcmpeq>
 8007166:	2800      	cmp	r0, #0
 8007168:	d17d      	bne.n	8007266 <_dtoa_r+0x38e>
 800716a:	f8cd 9014 	str.w	r9, [sp, #20]
 800716e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8007172:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8007176:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800717a:	e028      	b.n	80071ce <_dtoa_r+0x2f6>
 800717c:	f3af 8000 	nop.w
 8007180:	636f4361 	.word	0x636f4361
 8007184:	3fd287a7 	.word	0x3fd287a7
 8007188:	8b60c8b3 	.word	0x8b60c8b3
 800718c:	3fc68a28 	.word	0x3fc68a28
 8007190:	509f79fb 	.word	0x509f79fb
 8007194:	3fd34413 	.word	0x3fd34413
 8007198:	7ff00000 	.word	0x7ff00000
 800719c:	0800a385 	.word	0x0800a385
 80071a0:	0800a3c4 	.word	0x0800a3c4
 80071a4:	3ff80000 	.word	0x3ff80000
 80071a8:	0800a3d8 	.word	0x0800a3d8
 80071ac:	0800a3b8 	.word	0x0800a3b8
 80071b0:	0800a384 	.word	0x0800a384
 80071b4:	40240000 	.word	0x40240000
 80071b8:	f7fc f8ea 	bl	8003390 <__aeabi_dmul>
 80071bc:	2200      	movs	r2, #0
 80071be:	2300      	movs	r3, #0
 80071c0:	4606      	mov	r6, r0
 80071c2:	460f      	mov	r7, r1
 80071c4:	f7fc fb4c 	bl	8003860 <__aeabi_dcmpeq>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	f040 83ae 	bne.w	800792a <_dtoa_r+0xa52>
 80071ce:	4642      	mov	r2, r8
 80071d0:	464b      	mov	r3, r9
 80071d2:	4630      	mov	r0, r6
 80071d4:	4639      	mov	r1, r7
 80071d6:	f7fc fa05 	bl	80035e4 <__aeabi_ddiv>
 80071da:	f002 fdc7 	bl	8009d6c <__aeabi_d2iz>
 80071de:	4604      	mov	r4, r0
 80071e0:	f7fc f870 	bl	80032c4 <__aeabi_i2d>
 80071e4:	4642      	mov	r2, r8
 80071e6:	464b      	mov	r3, r9
 80071e8:	f7fc f8d2 	bl	8003390 <__aeabi_dmul>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4630      	mov	r0, r6
 80071f2:	4639      	mov	r1, r7
 80071f4:	f7fb ff18 	bl	8003028 <__aeabi_dsub>
 80071f8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80071fc:	f805 eb01 	strb.w	lr, [r5], #1
 8007200:	ebcb 0e05 	rsb	lr, fp, r5
 8007204:	45d6      	cmp	lr, sl
 8007206:	4606      	mov	r6, r0
 8007208:	460f      	mov	r7, r1
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	4bae      	ldr	r3, [pc, #696]	; (80074c8 <_dtoa_r+0x5f0>)
 8007210:	d1d2      	bne.n	80071b8 <_dtoa_r+0x2e0>
 8007212:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007216:	4632      	mov	r2, r6
 8007218:	463b      	mov	r3, r7
 800721a:	4630      	mov	r0, r6
 800721c:	4639      	mov	r1, r7
 800721e:	f7fb ff05 	bl	800302c <__adddf3>
 8007222:	4606      	mov	r6, r0
 8007224:	460f      	mov	r7, r1
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800722e:	f7fc fb21 	bl	8003874 <__aeabi_dcmplt>
 8007232:	b940      	cbnz	r0, 8007246 <_dtoa_r+0x36e>
 8007234:	4632      	mov	r2, r6
 8007236:	463b      	mov	r3, r7
 8007238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800723c:	f7fc fb10 	bl	8003860 <__aeabi_dcmpeq>
 8007240:	b188      	cbz	r0, 8007266 <_dtoa_r+0x38e>
 8007242:	07e3      	lsls	r3, r4, #31
 8007244:	d50f      	bpl.n	8007266 <_dtoa_r+0x38e>
 8007246:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800724a:	9a07      	ldr	r2, [sp, #28]
 800724c:	1e6b      	subs	r3, r5, #1
 800724e:	e004      	b.n	800725a <_dtoa_r+0x382>
 8007250:	429a      	cmp	r2, r3
 8007252:	f000 83fc 	beq.w	8007a4e <_dtoa_r+0xb76>
 8007256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800725a:	2c39      	cmp	r4, #57	; 0x39
 800725c:	f103 0501 	add.w	r5, r3, #1
 8007260:	d0f6      	beq.n	8007250 <_dtoa_r+0x378>
 8007262:	3401      	adds	r4, #1
 8007264:	701c      	strb	r4, [r3, #0]
 8007266:	9908      	ldr	r1, [sp, #32]
 8007268:	4648      	mov	r0, r9
 800726a:	f001 fdaf 	bl	8008dcc <_Bfree>
 800726e:	2200      	movs	r2, #0
 8007270:	9b04      	ldr	r3, [sp, #16]
 8007272:	702a      	strb	r2, [r5, #0]
 8007274:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007276:	3301      	adds	r3, #1
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 839b 	beq.w	80079b8 <_dtoa_r+0xae0>
 8007282:	9807      	ldr	r0, [sp, #28]
 8007284:	601d      	str	r5, [r3, #0]
 8007286:	b019      	add	sp, #100	; 0x64
 8007288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800728e:	2a00      	cmp	r2, #0
 8007290:	f000 810e 	beq.w	80074b0 <_dtoa_r+0x5d8>
 8007294:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007296:	2a01      	cmp	r2, #1
 8007298:	f340 8257 	ble.w	800774a <_dtoa_r+0x872>
 800729c:	9b06      	ldr	r3, [sp, #24]
 800729e:	9a02      	ldr	r2, [sp, #8]
 80072a0:	1e5f      	subs	r7, r3, #1
 80072a2:	42ba      	cmp	r2, r7
 80072a4:	f2c0 838b 	blt.w	80079be <_dtoa_r+0xae6>
 80072a8:	1bd7      	subs	r7, r2, r7
 80072aa:	9b06      	ldr	r3, [sp, #24]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f2c0 8480 	blt.w	8007bb2 <_dtoa_r+0xcda>
 80072b2:	9d05      	ldr	r5, [sp, #20]
 80072b4:	9b06      	ldr	r3, [sp, #24]
 80072b6:	9a05      	ldr	r2, [sp, #20]
 80072b8:	2101      	movs	r1, #1
 80072ba:	441a      	add	r2, r3
 80072bc:	4648      	mov	r0, r9
 80072be:	9205      	str	r2, [sp, #20]
 80072c0:	4498      	add	r8, r3
 80072c2:	f001 fe1b 	bl	8008efc <__i2b>
 80072c6:	4606      	mov	r6, r0
 80072c8:	b165      	cbz	r5, 80072e4 <_dtoa_r+0x40c>
 80072ca:	f1b8 0f00 	cmp.w	r8, #0
 80072ce:	dd09      	ble.n	80072e4 <_dtoa_r+0x40c>
 80072d0:	4545      	cmp	r5, r8
 80072d2:	9a05      	ldr	r2, [sp, #20]
 80072d4:	462b      	mov	r3, r5
 80072d6:	bfa8      	it	ge
 80072d8:	4643      	movge	r3, r8
 80072da:	1ad2      	subs	r2, r2, r3
 80072dc:	9205      	str	r2, [sp, #20]
 80072de:	1aed      	subs	r5, r5, r3
 80072e0:	ebc3 0808 	rsb	r8, r3, r8
 80072e4:	9b02      	ldr	r3, [sp, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f340 82f5 	ble.w	80078d6 <_dtoa_r+0x9fe>
 80072ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072ee:	2a00      	cmp	r2, #0
 80072f0:	f000 8202 	beq.w	80076f8 <_dtoa_r+0x820>
 80072f4:	2f00      	cmp	r7, #0
 80072f6:	f000 81ff 	beq.w	80076f8 <_dtoa_r+0x820>
 80072fa:	4631      	mov	r1, r6
 80072fc:	463a      	mov	r2, r7
 80072fe:	4648      	mov	r0, r9
 8007300:	f001 fe9e 	bl	8009040 <__pow5mult>
 8007304:	9a08      	ldr	r2, [sp, #32]
 8007306:	4601      	mov	r1, r0
 8007308:	4606      	mov	r6, r0
 800730a:	4648      	mov	r0, r9
 800730c:	f001 fe00 	bl	8008f10 <__multiply>
 8007310:	9908      	ldr	r1, [sp, #32]
 8007312:	4604      	mov	r4, r0
 8007314:	4648      	mov	r0, r9
 8007316:	f001 fd59 	bl	8008dcc <_Bfree>
 800731a:	9b02      	ldr	r3, [sp, #8]
 800731c:	1bdb      	subs	r3, r3, r7
 800731e:	9302      	str	r3, [sp, #8]
 8007320:	f040 81e9 	bne.w	80076f6 <_dtoa_r+0x81e>
 8007324:	2101      	movs	r1, #1
 8007326:	4648      	mov	r0, r9
 8007328:	f001 fde8 	bl	8008efc <__i2b>
 800732c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800732e:	9002      	str	r0, [sp, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 8215 	beq.w	8007760 <_dtoa_r+0x888>
 8007336:	4601      	mov	r1, r0
 8007338:	461a      	mov	r2, r3
 800733a:	4648      	mov	r0, r9
 800733c:	f001 fe80 	bl	8009040 <__pow5mult>
 8007340:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007342:	9002      	str	r0, [sp, #8]
 8007344:	2b01      	cmp	r3, #1
 8007346:	f340 82f3 	ble.w	8007930 <_dtoa_r+0xa58>
 800734a:	2700      	movs	r7, #0
 800734c:	9a02      	ldr	r2, [sp, #8]
 800734e:	6913      	ldr	r3, [r2, #16]
 8007350:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007354:	6918      	ldr	r0, [r3, #16]
 8007356:	f001 fd83 	bl	8008e60 <__hi0bits>
 800735a:	f1c0 0020 	rsb	r0, r0, #32
 800735e:	4440      	add	r0, r8
 8007360:	f010 001f 	ands.w	r0, r0, #31
 8007364:	f000 81fa 	beq.w	800775c <_dtoa_r+0x884>
 8007368:	f1c0 0320 	rsb	r3, r0, #32
 800736c:	2b04      	cmp	r3, #4
 800736e:	f340 84bd 	ble.w	8007cec <_dtoa_r+0xe14>
 8007372:	f1c0 001c 	rsb	r0, r0, #28
 8007376:	9b05      	ldr	r3, [sp, #20]
 8007378:	4403      	add	r3, r0
 800737a:	9305      	str	r3, [sp, #20]
 800737c:	4405      	add	r5, r0
 800737e:	4480      	add	r8, r0
 8007380:	9b05      	ldr	r3, [sp, #20]
 8007382:	2b00      	cmp	r3, #0
 8007384:	dd05      	ble.n	8007392 <_dtoa_r+0x4ba>
 8007386:	4621      	mov	r1, r4
 8007388:	461a      	mov	r2, r3
 800738a:	4648      	mov	r0, r9
 800738c:	f001 fea8 	bl	80090e0 <__lshift>
 8007390:	4604      	mov	r4, r0
 8007392:	f1b8 0f00 	cmp.w	r8, #0
 8007396:	dd05      	ble.n	80073a4 <_dtoa_r+0x4cc>
 8007398:	4642      	mov	r2, r8
 800739a:	9902      	ldr	r1, [sp, #8]
 800739c:	4648      	mov	r0, r9
 800739e:	f001 fe9f 	bl	80090e0 <__lshift>
 80073a2:	9002      	str	r0, [sp, #8]
 80073a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f040 827a 	bne.w	80078a0 <_dtoa_r+0x9c8>
 80073ac:	9b06      	ldr	r3, [sp, #24]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f340 8293 	ble.w	80078da <_dtoa_r+0xa02>
 80073b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f040 81f4 	bne.w	80077a4 <_dtoa_r+0x8cc>
 80073bc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80073c0:	9f06      	ldr	r7, [sp, #24]
 80073c2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80073c6:	465d      	mov	r5, fp
 80073c8:	e002      	b.n	80073d0 <_dtoa_r+0x4f8>
 80073ca:	f001 fd09 	bl	8008de0 <__multadd>
 80073ce:	4604      	mov	r4, r0
 80073d0:	4641      	mov	r1, r8
 80073d2:	4620      	mov	r0, r4
 80073d4:	f7ff fcec 	bl	8006db0 <quorem>
 80073d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80073dc:	f805 ab01 	strb.w	sl, [r5], #1
 80073e0:	ebcb 0305 	rsb	r3, fp, r5
 80073e4:	42bb      	cmp	r3, r7
 80073e6:	f04f 020a 	mov.w	r2, #10
 80073ea:	f04f 0300 	mov.w	r3, #0
 80073ee:	4621      	mov	r1, r4
 80073f0:	4648      	mov	r0, r9
 80073f2:	dbea      	blt.n	80073ca <_dtoa_r+0x4f2>
 80073f4:	9b07      	ldr	r3, [sp, #28]
 80073f6:	9a06      	ldr	r2, [sp, #24]
 80073f8:	2a01      	cmp	r2, #1
 80073fa:	bfac      	ite	ge
 80073fc:	189b      	addge	r3, r3, r2
 80073fe:	3301      	addlt	r3, #1
 8007400:	461d      	mov	r5, r3
 8007402:	f04f 0b00 	mov.w	fp, #0
 8007406:	4621      	mov	r1, r4
 8007408:	2201      	movs	r2, #1
 800740a:	4648      	mov	r0, r9
 800740c:	f001 fe68 	bl	80090e0 <__lshift>
 8007410:	9902      	ldr	r1, [sp, #8]
 8007412:	9008      	str	r0, [sp, #32]
 8007414:	f001 febc 	bl	8009190 <__mcmp>
 8007418:	2800      	cmp	r0, #0
 800741a:	f340 8305 	ble.w	8007a28 <_dtoa_r+0xb50>
 800741e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007422:	9907      	ldr	r1, [sp, #28]
 8007424:	1e6b      	subs	r3, r5, #1
 8007426:	e004      	b.n	8007432 <_dtoa_r+0x55a>
 8007428:	428b      	cmp	r3, r1
 800742a:	f000 8274 	beq.w	8007916 <_dtoa_r+0xa3e>
 800742e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007432:	2a39      	cmp	r2, #57	; 0x39
 8007434:	f103 0501 	add.w	r5, r3, #1
 8007438:	d0f6      	beq.n	8007428 <_dtoa_r+0x550>
 800743a:	3201      	adds	r2, #1
 800743c:	701a      	strb	r2, [r3, #0]
 800743e:	9902      	ldr	r1, [sp, #8]
 8007440:	4648      	mov	r0, r9
 8007442:	f001 fcc3 	bl	8008dcc <_Bfree>
 8007446:	2e00      	cmp	r6, #0
 8007448:	f43f af0d 	beq.w	8007266 <_dtoa_r+0x38e>
 800744c:	f1bb 0f00 	cmp.w	fp, #0
 8007450:	d005      	beq.n	800745e <_dtoa_r+0x586>
 8007452:	45b3      	cmp	fp, r6
 8007454:	d003      	beq.n	800745e <_dtoa_r+0x586>
 8007456:	4659      	mov	r1, fp
 8007458:	4648      	mov	r0, r9
 800745a:	f001 fcb7 	bl	8008dcc <_Bfree>
 800745e:	4631      	mov	r1, r6
 8007460:	4648      	mov	r0, r9
 8007462:	f001 fcb3 	bl	8008dcc <_Bfree>
 8007466:	e6fe      	b.n	8007266 <_dtoa_r+0x38e>
 8007468:	2301      	movs	r3, #1
 800746a:	930b      	str	r3, [sp, #44]	; 0x2c
 800746c:	e5ec      	b.n	8007048 <_dtoa_r+0x170>
 800746e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007472:	4640      	mov	r0, r8
 8007474:	f7fb ff26 	bl	80032c4 <__aeabi_i2d>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4630      	mov	r0, r6
 800747e:	4639      	mov	r1, r7
 8007480:	f7fc f9ee 	bl	8003860 <__aeabi_dcmpeq>
 8007484:	2800      	cmp	r0, #0
 8007486:	f47f adcb 	bne.w	8007020 <_dtoa_r+0x148>
 800748a:	f108 33ff 	add.w	r3, r8, #4294967295
 800748e:	9304      	str	r3, [sp, #16]
 8007490:	e5c6      	b.n	8007020 <_dtoa_r+0x148>
 8007492:	9a05      	ldr	r2, [sp, #20]
 8007494:	9b04      	ldr	r3, [sp, #16]
 8007496:	1ad2      	subs	r2, r2, r3
 8007498:	425b      	negs	r3, r3
 800749a:	9302      	str	r3, [sp, #8]
 800749c:	2300      	movs	r3, #0
 800749e:	9205      	str	r2, [sp, #20]
 80074a0:	930a      	str	r3, [sp, #40]	; 0x28
 80074a2:	e5e0      	b.n	8007066 <_dtoa_r+0x18e>
 80074a4:	f1c8 0300 	rsb	r3, r8, #0
 80074a8:	9305      	str	r3, [sp, #20]
 80074aa:	f04f 0800 	mov.w	r8, #0
 80074ae:	e5d2      	b.n	8007056 <_dtoa_r+0x17e>
 80074b0:	9f02      	ldr	r7, [sp, #8]
 80074b2:	9d05      	ldr	r5, [sp, #20]
 80074b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80074b6:	e707      	b.n	80072c8 <_dtoa_r+0x3f0>
 80074b8:	f1c3 0820 	rsb	r8, r3, #32
 80074bc:	fa0a f008 	lsl.w	r0, sl, r8
 80074c0:	e57b      	b.n	8006fba <_dtoa_r+0xe2>
 80074c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80074c4:	e5c0      	b.n	8007048 <_dtoa_r+0x170>
 80074c6:	bf00      	nop
 80074c8:	40240000 	.word	0x40240000
 80074cc:	2300      	movs	r3, #0
 80074ce:	9309      	str	r3, [sp, #36]	; 0x24
 80074d0:	9b04      	ldr	r3, [sp, #16]
 80074d2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80074d4:	4413      	add	r3, r2
 80074d6:	930c      	str	r3, [sp, #48]	; 0x30
 80074d8:	3301      	adds	r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	9306      	str	r3, [sp, #24]
 80074de:	f340 827d 	ble.w	80079dc <_dtoa_r+0xb04>
 80074e2:	9c06      	ldr	r4, [sp, #24]
 80074e4:	4626      	mov	r6, r4
 80074e6:	2100      	movs	r1, #0
 80074e8:	2e17      	cmp	r6, #23
 80074ea:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80074ee:	d90b      	bls.n	8007508 <_dtoa_r+0x630>
 80074f0:	2201      	movs	r2, #1
 80074f2:	2304      	movs	r3, #4
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	f103 0014 	add.w	r0, r3, #20
 80074fa:	42b0      	cmp	r0, r6
 80074fc:	4611      	mov	r1, r2
 80074fe:	f102 0201 	add.w	r2, r2, #1
 8007502:	d9f7      	bls.n	80074f4 <_dtoa_r+0x61c>
 8007504:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8007508:	4648      	mov	r0, r9
 800750a:	f001 fc39 	bl	8008d80 <_Balloc>
 800750e:	2c0e      	cmp	r4, #14
 8007510:	9007      	str	r0, [sp, #28]
 8007512:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8007516:	f63f ade5 	bhi.w	80070e4 <_dtoa_r+0x20c>
 800751a:	2d00      	cmp	r5, #0
 800751c:	f43f ade2 	beq.w	80070e4 <_dtoa_r+0x20c>
 8007520:	9904      	ldr	r1, [sp, #16]
 8007522:	2900      	cmp	r1, #0
 8007524:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8007528:	f340 829a 	ble.w	8007a60 <_dtoa_r+0xb88>
 800752c:	4b90      	ldr	r3, [pc, #576]	; (8007770 <_dtoa_r+0x898>)
 800752e:	f001 020f 	and.w	r2, r1, #15
 8007532:	110e      	asrs	r6, r1, #4
 8007534:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007538:	06f0      	lsls	r0, r6, #27
 800753a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800753e:	f140 8246 	bpl.w	80079ce <_dtoa_r+0xaf6>
 8007542:	4b8c      	ldr	r3, [pc, #560]	; (8007774 <_dtoa_r+0x89c>)
 8007544:	4650      	mov	r0, sl
 8007546:	4659      	mov	r1, fp
 8007548:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800754c:	f7fc f84a 	bl	80035e4 <__aeabi_ddiv>
 8007550:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007554:	f006 060f 	and.w	r6, r6, #15
 8007558:	f04f 0a03 	mov.w	sl, #3
 800755c:	b186      	cbz	r6, 8007580 <_dtoa_r+0x6a8>
 800755e:	4f85      	ldr	r7, [pc, #532]	; (8007774 <_dtoa_r+0x89c>)
 8007560:	07f1      	lsls	r1, r6, #31
 8007562:	d509      	bpl.n	8007578 <_dtoa_r+0x6a0>
 8007564:	4620      	mov	r0, r4
 8007566:	4629      	mov	r1, r5
 8007568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800756c:	f7fb ff10 	bl	8003390 <__aeabi_dmul>
 8007570:	f10a 0a01 	add.w	sl, sl, #1
 8007574:	4604      	mov	r4, r0
 8007576:	460d      	mov	r5, r1
 8007578:	1076      	asrs	r6, r6, #1
 800757a:	f107 0708 	add.w	r7, r7, #8
 800757e:	d1ef      	bne.n	8007560 <_dtoa_r+0x688>
 8007580:	4622      	mov	r2, r4
 8007582:	462b      	mov	r3, r5
 8007584:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007588:	f7fc f82c 	bl	80035e4 <__aeabi_ddiv>
 800758c:	4606      	mov	r6, r0
 800758e:	460f      	mov	r7, r1
 8007590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007592:	b143      	cbz	r3, 80075a6 <_dtoa_r+0x6ce>
 8007594:	2200      	movs	r2, #0
 8007596:	4b78      	ldr	r3, [pc, #480]	; (8007778 <_dtoa_r+0x8a0>)
 8007598:	4630      	mov	r0, r6
 800759a:	4639      	mov	r1, r7
 800759c:	f7fc f96a 	bl	8003874 <__aeabi_dcmplt>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	f040 831a 	bne.w	8007bda <_dtoa_r+0xd02>
 80075a6:	4650      	mov	r0, sl
 80075a8:	f7fb fe8c 	bl	80032c4 <__aeabi_i2d>
 80075ac:	4632      	mov	r2, r6
 80075ae:	463b      	mov	r3, r7
 80075b0:	f7fb feee 	bl	8003390 <__aeabi_dmul>
 80075b4:	4b71      	ldr	r3, [pc, #452]	; (800777c <_dtoa_r+0x8a4>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	f7fb fd38 	bl	800302c <__adddf3>
 80075bc:	9b06      	ldr	r3, [sp, #24]
 80075be:	4604      	mov	r4, r0
 80075c0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 81db 	beq.w	8007980 <_dtoa_r+0xaa8>
 80075ca:	9b04      	ldr	r3, [sp, #16]
 80075cc:	9314      	str	r3, [sp, #80]	; 0x50
 80075ce:	9b06      	ldr	r3, [sp, #24]
 80075d0:	9310      	str	r3, [sp, #64]	; 0x40
 80075d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 8294 	beq.w	8007b02 <_dtoa_r+0xc2a>
 80075da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075dc:	4b64      	ldr	r3, [pc, #400]	; (8007770 <_dtoa_r+0x898>)
 80075de:	4968      	ldr	r1, [pc, #416]	; (8007780 <_dtoa_r+0x8a8>)
 80075e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075e8:	2000      	movs	r0, #0
 80075ea:	f7fb fffb 	bl	80035e4 <__aeabi_ddiv>
 80075ee:	4622      	mov	r2, r4
 80075f0:	462b      	mov	r3, r5
 80075f2:	f7fb fd19 	bl	8003028 <__aeabi_dsub>
 80075f6:	4682      	mov	sl, r0
 80075f8:	468b      	mov	fp, r1
 80075fa:	4630      	mov	r0, r6
 80075fc:	4639      	mov	r1, r7
 80075fe:	f002 fbb5 	bl	8009d6c <__aeabi_d2iz>
 8007602:	4604      	mov	r4, r0
 8007604:	f7fb fe5e 	bl	80032c4 <__aeabi_i2d>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	4630      	mov	r0, r6
 800760e:	4639      	mov	r1, r7
 8007610:	f7fb fd0a 	bl	8003028 <__aeabi_dsub>
 8007614:	3430      	adds	r4, #48	; 0x30
 8007616:	9d07      	ldr	r5, [sp, #28]
 8007618:	b2e4      	uxtb	r4, r4
 800761a:	4606      	mov	r6, r0
 800761c:	460f      	mov	r7, r1
 800761e:	702c      	strb	r4, [r5, #0]
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4650      	mov	r0, sl
 8007626:	4659      	mov	r1, fp
 8007628:	3501      	adds	r5, #1
 800762a:	f7fc f941 	bl	80038b0 <__aeabi_dcmpgt>
 800762e:	2800      	cmp	r0, #0
 8007630:	d150      	bne.n	80076d4 <_dtoa_r+0x7fc>
 8007632:	4632      	mov	r2, r6
 8007634:	463b      	mov	r3, r7
 8007636:	2000      	movs	r0, #0
 8007638:	494f      	ldr	r1, [pc, #316]	; (8007778 <_dtoa_r+0x8a0>)
 800763a:	f7fb fcf5 	bl	8003028 <__aeabi_dsub>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	4650      	mov	r0, sl
 8007644:	4659      	mov	r1, fp
 8007646:	f7fc f933 	bl	80038b0 <__aeabi_dcmpgt>
 800764a:	2800      	cmp	r0, #0
 800764c:	f040 8308 	bne.w	8007c60 <_dtoa_r+0xd88>
 8007650:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007652:	2a01      	cmp	r2, #1
 8007654:	f340 81f7 	ble.w	8007a46 <_dtoa_r+0xb6e>
 8007658:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800765a:	9a07      	ldr	r2, [sp, #28]
 800765c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007660:	4413      	add	r3, r2
 8007662:	4698      	mov	r8, r3
 8007664:	e00d      	b.n	8007682 <_dtoa_r+0x7aa>
 8007666:	2000      	movs	r0, #0
 8007668:	4943      	ldr	r1, [pc, #268]	; (8007778 <_dtoa_r+0x8a0>)
 800766a:	f7fb fcdd 	bl	8003028 <__aeabi_dsub>
 800766e:	4652      	mov	r2, sl
 8007670:	465b      	mov	r3, fp
 8007672:	f7fc f8ff 	bl	8003874 <__aeabi_dcmplt>
 8007676:	2800      	cmp	r0, #0
 8007678:	f040 82f2 	bne.w	8007c60 <_dtoa_r+0xd88>
 800767c:	4545      	cmp	r5, r8
 800767e:	f000 81e0 	beq.w	8007a42 <_dtoa_r+0xb6a>
 8007682:	4650      	mov	r0, sl
 8007684:	4659      	mov	r1, fp
 8007686:	2200      	movs	r2, #0
 8007688:	4b3e      	ldr	r3, [pc, #248]	; (8007784 <_dtoa_r+0x8ac>)
 800768a:	f7fb fe81 	bl	8003390 <__aeabi_dmul>
 800768e:	2200      	movs	r2, #0
 8007690:	4b3c      	ldr	r3, [pc, #240]	; (8007784 <_dtoa_r+0x8ac>)
 8007692:	4682      	mov	sl, r0
 8007694:	468b      	mov	fp, r1
 8007696:	4630      	mov	r0, r6
 8007698:	4639      	mov	r1, r7
 800769a:	f7fb fe79 	bl	8003390 <__aeabi_dmul>
 800769e:	460f      	mov	r7, r1
 80076a0:	4606      	mov	r6, r0
 80076a2:	f002 fb63 	bl	8009d6c <__aeabi_d2iz>
 80076a6:	4604      	mov	r4, r0
 80076a8:	f7fb fe0c 	bl	80032c4 <__aeabi_i2d>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4630      	mov	r0, r6
 80076b2:	4639      	mov	r1, r7
 80076b4:	f7fb fcb8 	bl	8003028 <__aeabi_dsub>
 80076b8:	3430      	adds	r4, #48	; 0x30
 80076ba:	b2e4      	uxtb	r4, r4
 80076bc:	4652      	mov	r2, sl
 80076be:	465b      	mov	r3, fp
 80076c0:	f805 4b01 	strb.w	r4, [r5], #1
 80076c4:	4606      	mov	r6, r0
 80076c6:	460f      	mov	r7, r1
 80076c8:	f7fc f8d4 	bl	8003874 <__aeabi_dcmplt>
 80076cc:	4632      	mov	r2, r6
 80076ce:	463b      	mov	r3, r7
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d0c8      	beq.n	8007666 <_dtoa_r+0x78e>
 80076d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076d6:	9304      	str	r3, [sp, #16]
 80076d8:	e5c5      	b.n	8007266 <_dtoa_r+0x38e>
 80076da:	2300      	movs	r3, #0
 80076dc:	9309      	str	r3, [sp, #36]	; 0x24
 80076de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f340 8180 	ble.w	80079e6 <_dtoa_r+0xb0e>
 80076e6:	461e      	mov	r6, r3
 80076e8:	461c      	mov	r4, r3
 80076ea:	930c      	str	r3, [sp, #48]	; 0x30
 80076ec:	9306      	str	r3, [sp, #24]
 80076ee:	e6fa      	b.n	80074e6 <_dtoa_r+0x60e>
 80076f0:	2301      	movs	r3, #1
 80076f2:	9309      	str	r3, [sp, #36]	; 0x24
 80076f4:	e7f3      	b.n	80076de <_dtoa_r+0x806>
 80076f6:	9408      	str	r4, [sp, #32]
 80076f8:	9a02      	ldr	r2, [sp, #8]
 80076fa:	9908      	ldr	r1, [sp, #32]
 80076fc:	4648      	mov	r0, r9
 80076fe:	f001 fc9f 	bl	8009040 <__pow5mult>
 8007702:	4604      	mov	r4, r0
 8007704:	e60e      	b.n	8007324 <_dtoa_r+0x44c>
 8007706:	9b06      	ldr	r3, [sp, #24]
 8007708:	2b00      	cmp	r3, #0
 800770a:	f73f acfe 	bgt.w	800710a <_dtoa_r+0x232>
 800770e:	f040 814f 	bne.w	80079b0 <_dtoa_r+0xad8>
 8007712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007716:	2200      	movs	r2, #0
 8007718:	4b1b      	ldr	r3, [pc, #108]	; (8007788 <_dtoa_r+0x8b0>)
 800771a:	f7fb fe39 	bl	8003390 <__aeabi_dmul>
 800771e:	465b      	mov	r3, fp
 8007720:	4652      	mov	r2, sl
 8007722:	f7fc f8bb 	bl	800389c <__aeabi_dcmpge>
 8007726:	9b06      	ldr	r3, [sp, #24]
 8007728:	9302      	str	r3, [sp, #8]
 800772a:	461e      	mov	r6, r3
 800772c:	2800      	cmp	r0, #0
 800772e:	f000 80ea 	beq.w	8007906 <_dtoa_r+0xa2e>
 8007732:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007734:	9d07      	ldr	r5, [sp, #28]
 8007736:	43db      	mvns	r3, r3
 8007738:	9304      	str	r3, [sp, #16]
 800773a:	9902      	ldr	r1, [sp, #8]
 800773c:	4648      	mov	r0, r9
 800773e:	f001 fb45 	bl	8008dcc <_Bfree>
 8007742:	2e00      	cmp	r6, #0
 8007744:	f43f ad8f 	beq.w	8007266 <_dtoa_r+0x38e>
 8007748:	e689      	b.n	800745e <_dtoa_r+0x586>
 800774a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800774c:	2a00      	cmp	r2, #0
 800774e:	f000 8238 	beq.w	8007bc2 <_dtoa_r+0xcea>
 8007752:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007756:	9f02      	ldr	r7, [sp, #8]
 8007758:	9d05      	ldr	r5, [sp, #20]
 800775a:	e5ac      	b.n	80072b6 <_dtoa_r+0x3de>
 800775c:	201c      	movs	r0, #28
 800775e:	e60a      	b.n	8007376 <_dtoa_r+0x49e>
 8007760:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007762:	2b01      	cmp	r3, #1
 8007764:	f340 8280 	ble.w	8007c68 <_dtoa_r+0xd90>
 8007768:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800776a:	2001      	movs	r0, #1
 800776c:	e5f7      	b.n	800735e <_dtoa_r+0x486>
 800776e:	bf00      	nop
 8007770:	0800a3d8 	.word	0x0800a3d8
 8007774:	0800a4a0 	.word	0x0800a4a0
 8007778:	3ff00000 	.word	0x3ff00000
 800777c:	401c0000 	.word	0x401c0000
 8007780:	3fe00000 	.word	0x3fe00000
 8007784:	40240000 	.word	0x40240000
 8007788:	40140000 	.word	0x40140000
 800778c:	4631      	mov	r1, r6
 800778e:	2300      	movs	r3, #0
 8007790:	220a      	movs	r2, #10
 8007792:	4648      	mov	r0, r9
 8007794:	f001 fb24 	bl	8008de0 <__multadd>
 8007798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800779a:	2b00      	cmp	r3, #0
 800779c:	4606      	mov	r6, r0
 800779e:	f340 828d 	ble.w	8007cbc <_dtoa_r+0xde4>
 80077a2:	9306      	str	r3, [sp, #24]
 80077a4:	2d00      	cmp	r5, #0
 80077a6:	dd05      	ble.n	80077b4 <_dtoa_r+0x8dc>
 80077a8:	4631      	mov	r1, r6
 80077aa:	462a      	mov	r2, r5
 80077ac:	4648      	mov	r0, r9
 80077ae:	f001 fc97 	bl	80090e0 <__lshift>
 80077b2:	4606      	mov	r6, r0
 80077b4:	2f00      	cmp	r7, #0
 80077b6:	f040 817c 	bne.w	8007ab2 <_dtoa_r+0xbda>
 80077ba:	46b0      	mov	r8, r6
 80077bc:	9b06      	ldr	r3, [sp, #24]
 80077be:	9a07      	ldr	r2, [sp, #28]
 80077c0:	3b01      	subs	r3, #1
 80077c2:	18d3      	adds	r3, r2, r3
 80077c4:	9308      	str	r3, [sp, #32]
 80077c6:	f00a 0301 	and.w	r3, sl, #1
 80077ca:	9309      	str	r3, [sp, #36]	; 0x24
 80077cc:	4617      	mov	r7, r2
 80077ce:	f8dd b008 	ldr.w	fp, [sp, #8]
 80077d2:	4620      	mov	r0, r4
 80077d4:	4659      	mov	r1, fp
 80077d6:	f7ff faeb 	bl	8006db0 <quorem>
 80077da:	4631      	mov	r1, r6
 80077dc:	4605      	mov	r5, r0
 80077de:	4620      	mov	r0, r4
 80077e0:	f001 fcd6 	bl	8009190 <__mcmp>
 80077e4:	4642      	mov	r2, r8
 80077e6:	4659      	mov	r1, fp
 80077e8:	4682      	mov	sl, r0
 80077ea:	4648      	mov	r0, r9
 80077ec:	f001 fcf2 	bl	80091d4 <__mdiff>
 80077f0:	68c2      	ldr	r2, [r0, #12]
 80077f2:	4683      	mov	fp, r0
 80077f4:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80077f8:	2a00      	cmp	r2, #0
 80077fa:	d149      	bne.n	8007890 <_dtoa_r+0x9b8>
 80077fc:	4601      	mov	r1, r0
 80077fe:	4620      	mov	r0, r4
 8007800:	9306      	str	r3, [sp, #24]
 8007802:	f001 fcc5 	bl	8009190 <__mcmp>
 8007806:	4659      	mov	r1, fp
 8007808:	9005      	str	r0, [sp, #20]
 800780a:	4648      	mov	r0, r9
 800780c:	f001 fade 	bl	8008dcc <_Bfree>
 8007810:	9a05      	ldr	r2, [sp, #20]
 8007812:	9b06      	ldr	r3, [sp, #24]
 8007814:	b92a      	cbnz	r2, 8007822 <_dtoa_r+0x94a>
 8007816:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007818:	b919      	cbnz	r1, 8007822 <_dtoa_r+0x94a>
 800781a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800781c:	2900      	cmp	r1, #0
 800781e:	f000 8235 	beq.w	8007c8c <_dtoa_r+0xdb4>
 8007822:	f1ba 0f00 	cmp.w	sl, #0
 8007826:	f2c0 80e3 	blt.w	80079f0 <_dtoa_r+0xb18>
 800782a:	d105      	bne.n	8007838 <_dtoa_r+0x960>
 800782c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800782e:	b919      	cbnz	r1, 8007838 <_dtoa_r+0x960>
 8007830:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007832:	2900      	cmp	r1, #0
 8007834:	f000 80dc 	beq.w	80079f0 <_dtoa_r+0xb18>
 8007838:	2a00      	cmp	r2, #0
 800783a:	f300 814e 	bgt.w	8007ada <_dtoa_r+0xc02>
 800783e:	9a08      	ldr	r2, [sp, #32]
 8007840:	703b      	strb	r3, [r7, #0]
 8007842:	f107 0a01 	add.w	sl, r7, #1
 8007846:	4297      	cmp	r7, r2
 8007848:	4655      	mov	r5, sl
 800784a:	f000 8152 	beq.w	8007af2 <_dtoa_r+0xc1a>
 800784e:	4621      	mov	r1, r4
 8007850:	2300      	movs	r3, #0
 8007852:	220a      	movs	r2, #10
 8007854:	4648      	mov	r0, r9
 8007856:	f001 fac3 	bl	8008de0 <__multadd>
 800785a:	4546      	cmp	r6, r8
 800785c:	4604      	mov	r4, r0
 800785e:	4631      	mov	r1, r6
 8007860:	f04f 0300 	mov.w	r3, #0
 8007864:	f04f 020a 	mov.w	r2, #10
 8007868:	4648      	mov	r0, r9
 800786a:	d00b      	beq.n	8007884 <_dtoa_r+0x9ac>
 800786c:	f001 fab8 	bl	8008de0 <__multadd>
 8007870:	4641      	mov	r1, r8
 8007872:	4606      	mov	r6, r0
 8007874:	2300      	movs	r3, #0
 8007876:	220a      	movs	r2, #10
 8007878:	4648      	mov	r0, r9
 800787a:	f001 fab1 	bl	8008de0 <__multadd>
 800787e:	4657      	mov	r7, sl
 8007880:	4680      	mov	r8, r0
 8007882:	e7a4      	b.n	80077ce <_dtoa_r+0x8f6>
 8007884:	f001 faac 	bl	8008de0 <__multadd>
 8007888:	4657      	mov	r7, sl
 800788a:	4606      	mov	r6, r0
 800788c:	4680      	mov	r8, r0
 800788e:	e79e      	b.n	80077ce <_dtoa_r+0x8f6>
 8007890:	4601      	mov	r1, r0
 8007892:	4648      	mov	r0, r9
 8007894:	9305      	str	r3, [sp, #20]
 8007896:	f001 fa99 	bl	8008dcc <_Bfree>
 800789a:	2201      	movs	r2, #1
 800789c:	9b05      	ldr	r3, [sp, #20]
 800789e:	e7c0      	b.n	8007822 <_dtoa_r+0x94a>
 80078a0:	9902      	ldr	r1, [sp, #8]
 80078a2:	4620      	mov	r0, r4
 80078a4:	f001 fc74 	bl	8009190 <__mcmp>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	f6bf ad7f 	bge.w	80073ac <_dtoa_r+0x4d4>
 80078ae:	4621      	mov	r1, r4
 80078b0:	9c04      	ldr	r4, [sp, #16]
 80078b2:	2300      	movs	r3, #0
 80078b4:	3c01      	subs	r4, #1
 80078b6:	220a      	movs	r2, #10
 80078b8:	4648      	mov	r0, r9
 80078ba:	9404      	str	r4, [sp, #16]
 80078bc:	f001 fa90 	bl	8008de0 <__multadd>
 80078c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c2:	4604      	mov	r4, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f47f af61 	bne.w	800778c <_dtoa_r+0x8b4>
 80078ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f340 81ed 	ble.w	8007cac <_dtoa_r+0xdd4>
 80078d2:	9306      	str	r3, [sp, #24]
 80078d4:	e572      	b.n	80073bc <_dtoa_r+0x4e4>
 80078d6:	9c08      	ldr	r4, [sp, #32]
 80078d8:	e524      	b.n	8007324 <_dtoa_r+0x44c>
 80078da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078dc:	2b02      	cmp	r3, #2
 80078de:	f77f ad69 	ble.w	80073b4 <_dtoa_r+0x4dc>
 80078e2:	9b06      	ldr	r3, [sp, #24]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f040 819d 	bne.w	8007c24 <_dtoa_r+0xd4c>
 80078ea:	9902      	ldr	r1, [sp, #8]
 80078ec:	2205      	movs	r2, #5
 80078ee:	4648      	mov	r0, r9
 80078f0:	f001 fa76 	bl	8008de0 <__multadd>
 80078f4:	4601      	mov	r1, r0
 80078f6:	9002      	str	r0, [sp, #8]
 80078f8:	4620      	mov	r0, r4
 80078fa:	f001 fc49 	bl	8009190 <__mcmp>
 80078fe:	2800      	cmp	r0, #0
 8007900:	9408      	str	r4, [sp, #32]
 8007902:	f77f af16 	ble.w	8007732 <_dtoa_r+0x85a>
 8007906:	9a04      	ldr	r2, [sp, #16]
 8007908:	9907      	ldr	r1, [sp, #28]
 800790a:	2331      	movs	r3, #49	; 0x31
 800790c:	3201      	adds	r2, #1
 800790e:	9204      	str	r2, [sp, #16]
 8007910:	700b      	strb	r3, [r1, #0]
 8007912:	1c4d      	adds	r5, r1, #1
 8007914:	e711      	b.n	800773a <_dtoa_r+0x862>
 8007916:	9a04      	ldr	r2, [sp, #16]
 8007918:	3201      	adds	r2, #1
 800791a:	9204      	str	r2, [sp, #16]
 800791c:	9a07      	ldr	r2, [sp, #28]
 800791e:	2331      	movs	r3, #49	; 0x31
 8007920:	7013      	strb	r3, [r2, #0]
 8007922:	e58c      	b.n	800743e <_dtoa_r+0x566>
 8007924:	2301      	movs	r3, #1
 8007926:	9309      	str	r3, [sp, #36]	; 0x24
 8007928:	e5d2      	b.n	80074d0 <_dtoa_r+0x5f8>
 800792a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800792e:	e49a      	b.n	8007266 <_dtoa_r+0x38e>
 8007930:	f1ba 0f00 	cmp.w	sl, #0
 8007934:	f47f ad09 	bne.w	800734a <_dtoa_r+0x472>
 8007938:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800793c:	2b00      	cmp	r3, #0
 800793e:	f040 813e 	bne.w	8007bbe <_dtoa_r+0xce6>
 8007942:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8007946:	0d3f      	lsrs	r7, r7, #20
 8007948:	053f      	lsls	r7, r7, #20
 800794a:	b12f      	cbz	r7, 8007958 <_dtoa_r+0xa80>
 800794c:	9b05      	ldr	r3, [sp, #20]
 800794e:	3301      	adds	r3, #1
 8007950:	9305      	str	r3, [sp, #20]
 8007952:	f108 0801 	add.w	r8, r8, #1
 8007956:	2701      	movs	r7, #1
 8007958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800795a:	2001      	movs	r0, #1
 800795c:	2b00      	cmp	r3, #0
 800795e:	f43f acfe 	beq.w	800735e <_dtoa_r+0x486>
 8007962:	e4f3      	b.n	800734c <_dtoa_r+0x474>
 8007964:	4650      	mov	r0, sl
 8007966:	f7fb fcad 	bl	80032c4 <__aeabi_i2d>
 800796a:	4632      	mov	r2, r6
 800796c:	463b      	mov	r3, r7
 800796e:	f7fb fd0f 	bl	8003390 <__aeabi_dmul>
 8007972:	2200      	movs	r2, #0
 8007974:	4bbf      	ldr	r3, [pc, #764]	; (8007c74 <_dtoa_r+0xd9c>)
 8007976:	f7fb fb59 	bl	800302c <__adddf3>
 800797a:	4604      	mov	r4, r0
 800797c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007980:	4630      	mov	r0, r6
 8007982:	4639      	mov	r1, r7
 8007984:	2200      	movs	r2, #0
 8007986:	4bbc      	ldr	r3, [pc, #752]	; (8007c78 <_dtoa_r+0xda0>)
 8007988:	f7fb fb4e 	bl	8003028 <__aeabi_dsub>
 800798c:	4622      	mov	r2, r4
 800798e:	462b      	mov	r3, r5
 8007990:	4606      	mov	r6, r0
 8007992:	460f      	mov	r7, r1
 8007994:	f7fb ff8c 	bl	80038b0 <__aeabi_dcmpgt>
 8007998:	2800      	cmp	r0, #0
 800799a:	f040 80ae 	bne.w	8007afa <_dtoa_r+0xc22>
 800799e:	4622      	mov	r2, r4
 80079a0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80079a4:	4630      	mov	r0, r6
 80079a6:	4639      	mov	r1, r7
 80079a8:	f7fb ff64 	bl	8003874 <__aeabi_dcmplt>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	d04a      	beq.n	8007a46 <_dtoa_r+0xb6e>
 80079b0:	2300      	movs	r3, #0
 80079b2:	9302      	str	r3, [sp, #8]
 80079b4:	461e      	mov	r6, r3
 80079b6:	e6bc      	b.n	8007732 <_dtoa_r+0x85a>
 80079b8:	9807      	ldr	r0, [sp, #28]
 80079ba:	f7ff babe 	b.w	8006f3a <_dtoa_r+0x62>
 80079be:	9b02      	ldr	r3, [sp, #8]
 80079c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079c2:	9702      	str	r7, [sp, #8]
 80079c4:	1afb      	subs	r3, r7, r3
 80079c6:	441a      	add	r2, r3
 80079c8:	920a      	str	r2, [sp, #40]	; 0x28
 80079ca:	2700      	movs	r7, #0
 80079cc:	e46d      	b.n	80072aa <_dtoa_r+0x3d2>
 80079ce:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 80079d2:	f04f 0a02 	mov.w	sl, #2
 80079d6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80079da:	e5bf      	b.n	800755c <_dtoa_r+0x684>
 80079dc:	461c      	mov	r4, r3
 80079de:	2100      	movs	r1, #0
 80079e0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80079e4:	e590      	b.n	8007508 <_dtoa_r+0x630>
 80079e6:	2401      	movs	r4, #1
 80079e8:	9423      	str	r4, [sp, #140]	; 0x8c
 80079ea:	940c      	str	r4, [sp, #48]	; 0x30
 80079ec:	9406      	str	r4, [sp, #24]
 80079ee:	e7f6      	b.n	80079de <_dtoa_r+0xb06>
 80079f0:	2a00      	cmp	r2, #0
 80079f2:	469a      	mov	sl, r3
 80079f4:	dd11      	ble.n	8007a1a <_dtoa_r+0xb42>
 80079f6:	4621      	mov	r1, r4
 80079f8:	2201      	movs	r2, #1
 80079fa:	4648      	mov	r0, r9
 80079fc:	f001 fb70 	bl	80090e0 <__lshift>
 8007a00:	9902      	ldr	r1, [sp, #8]
 8007a02:	4604      	mov	r4, r0
 8007a04:	f001 fbc4 	bl	8009190 <__mcmp>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	f340 8148 	ble.w	8007c9e <_dtoa_r+0xdc6>
 8007a0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a12:	f000 8109 	beq.w	8007c28 <_dtoa_r+0xd50>
 8007a16:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 8007a1a:	46b3      	mov	fp, r6
 8007a1c:	f887 a000 	strb.w	sl, [r7]
 8007a20:	1c7d      	adds	r5, r7, #1
 8007a22:	4646      	mov	r6, r8
 8007a24:	9408      	str	r4, [sp, #32]
 8007a26:	e50a      	b.n	800743e <_dtoa_r+0x566>
 8007a28:	d104      	bne.n	8007a34 <_dtoa_r+0xb5c>
 8007a2a:	f01a 0f01 	tst.w	sl, #1
 8007a2e:	d001      	beq.n	8007a34 <_dtoa_r+0xb5c>
 8007a30:	e4f5      	b.n	800741e <_dtoa_r+0x546>
 8007a32:	4615      	mov	r5, r2
 8007a34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a38:	2b30      	cmp	r3, #48	; 0x30
 8007a3a:	f105 32ff 	add.w	r2, r5, #4294967295
 8007a3e:	d0f8      	beq.n	8007a32 <_dtoa_r+0xb5a>
 8007a40:	e4fd      	b.n	800743e <_dtoa_r+0x566>
 8007a42:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8007a46:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8007a4a:	f7ff bb4b 	b.w	80070e4 <_dtoa_r+0x20c>
 8007a4e:	9907      	ldr	r1, [sp, #28]
 8007a50:	2230      	movs	r2, #48	; 0x30
 8007a52:	700a      	strb	r2, [r1, #0]
 8007a54:	9a04      	ldr	r2, [sp, #16]
 8007a56:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8007a5a:	3201      	adds	r2, #1
 8007a5c:	9204      	str	r2, [sp, #16]
 8007a5e:	e400      	b.n	8007262 <_dtoa_r+0x38a>
 8007a60:	9b04      	ldr	r3, [sp, #16]
 8007a62:	425c      	negs	r4, r3
 8007a64:	2c00      	cmp	r4, #0
 8007a66:	f000 80b3 	beq.w	8007bd0 <_dtoa_r+0xcf8>
 8007a6a:	4b84      	ldr	r3, [pc, #528]	; (8007c7c <_dtoa_r+0xda4>)
 8007a6c:	f004 020f 	and.w	r2, r4, #15
 8007a70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a78:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007a7c:	f7fb fc88 	bl	8003390 <__aeabi_dmul>
 8007a80:	1124      	asrs	r4, r4, #4
 8007a82:	4606      	mov	r6, r0
 8007a84:	460f      	mov	r7, r1
 8007a86:	f000 8116 	beq.w	8007cb6 <_dtoa_r+0xdde>
 8007a8a:	4d7d      	ldr	r5, [pc, #500]	; (8007c80 <_dtoa_r+0xda8>)
 8007a8c:	f04f 0a02 	mov.w	sl, #2
 8007a90:	07e2      	lsls	r2, r4, #31
 8007a92:	d509      	bpl.n	8007aa8 <_dtoa_r+0xbd0>
 8007a94:	4630      	mov	r0, r6
 8007a96:	4639      	mov	r1, r7
 8007a98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a9c:	f7fb fc78 	bl	8003390 <__aeabi_dmul>
 8007aa0:	f10a 0a01 	add.w	sl, sl, #1
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	460f      	mov	r7, r1
 8007aa8:	1064      	asrs	r4, r4, #1
 8007aaa:	f105 0508 	add.w	r5, r5, #8
 8007aae:	d1ef      	bne.n	8007a90 <_dtoa_r+0xbb8>
 8007ab0:	e56e      	b.n	8007590 <_dtoa_r+0x6b8>
 8007ab2:	6871      	ldr	r1, [r6, #4]
 8007ab4:	4648      	mov	r0, r9
 8007ab6:	f001 f963 	bl	8008d80 <_Balloc>
 8007aba:	6933      	ldr	r3, [r6, #16]
 8007abc:	1c9a      	adds	r2, r3, #2
 8007abe:	4605      	mov	r5, r0
 8007ac0:	0092      	lsls	r2, r2, #2
 8007ac2:	f106 010c 	add.w	r1, r6, #12
 8007ac6:	300c      	adds	r0, #12
 8007ac8:	f7fb ff60 	bl	800398c <memcpy>
 8007acc:	4629      	mov	r1, r5
 8007ace:	2201      	movs	r2, #1
 8007ad0:	4648      	mov	r0, r9
 8007ad2:	f001 fb05 	bl	80090e0 <__lshift>
 8007ad6:	4680      	mov	r8, r0
 8007ad8:	e670      	b.n	80077bc <_dtoa_r+0x8e4>
 8007ada:	2b39      	cmp	r3, #57	; 0x39
 8007adc:	f000 80a4 	beq.w	8007c28 <_dtoa_r+0xd50>
 8007ae0:	f103 0a01 	add.w	sl, r3, #1
 8007ae4:	46b3      	mov	fp, r6
 8007ae6:	f887 a000 	strb.w	sl, [r7]
 8007aea:	1c7d      	adds	r5, r7, #1
 8007aec:	4646      	mov	r6, r8
 8007aee:	9408      	str	r4, [sp, #32]
 8007af0:	e4a5      	b.n	800743e <_dtoa_r+0x566>
 8007af2:	46b3      	mov	fp, r6
 8007af4:	469a      	mov	sl, r3
 8007af6:	4646      	mov	r6, r8
 8007af8:	e485      	b.n	8007406 <_dtoa_r+0x52e>
 8007afa:	2300      	movs	r3, #0
 8007afc:	9302      	str	r3, [sp, #8]
 8007afe:	461e      	mov	r6, r3
 8007b00:	e701      	b.n	8007906 <_dtoa_r+0xa2e>
 8007b02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b04:	495d      	ldr	r1, [pc, #372]	; (8007c7c <_dtoa_r+0xda4>)
 8007b06:	1e5a      	subs	r2, r3, #1
 8007b08:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007b0c:	462b      	mov	r3, r5
 8007b0e:	9215      	str	r2, [sp, #84]	; 0x54
 8007b10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b14:	4622      	mov	r2, r4
 8007b16:	f7fb fc3b 	bl	8003390 <__aeabi_dmul>
 8007b1a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8007b1e:	4639      	mov	r1, r7
 8007b20:	4630      	mov	r0, r6
 8007b22:	f002 f923 	bl	8009d6c <__aeabi_d2iz>
 8007b26:	4604      	mov	r4, r0
 8007b28:	f7fb fbcc 	bl	80032c4 <__aeabi_i2d>
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4602      	mov	r2, r0
 8007b30:	4639      	mov	r1, r7
 8007b32:	4630      	mov	r0, r6
 8007b34:	f7fb fa78 	bl	8003028 <__aeabi_dsub>
 8007b38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b3a:	460f      	mov	r7, r1
 8007b3c:	9907      	ldr	r1, [sp, #28]
 8007b3e:	3430      	adds	r4, #48	; 0x30
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	4606      	mov	r6, r0
 8007b44:	700c      	strb	r4, [r1, #0]
 8007b46:	f101 0501 	add.w	r5, r1, #1
 8007b4a:	d020      	beq.n	8007b8e <_dtoa_r+0xcb6>
 8007b4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b4e:	9a07      	ldr	r2, [sp, #28]
 8007b50:	4413      	add	r3, r2
 8007b52:	469a      	mov	sl, r3
 8007b54:	46ab      	mov	fp, r5
 8007b56:	2200      	movs	r2, #0
 8007b58:	4b4a      	ldr	r3, [pc, #296]	; (8007c84 <_dtoa_r+0xdac>)
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	f7fb fc17 	bl	8003390 <__aeabi_dmul>
 8007b62:	460f      	mov	r7, r1
 8007b64:	4606      	mov	r6, r0
 8007b66:	f002 f901 	bl	8009d6c <__aeabi_d2iz>
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	f7fb fbaa 	bl	80032c4 <__aeabi_i2d>
 8007b70:	3430      	adds	r4, #48	; 0x30
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4630      	mov	r0, r6
 8007b78:	4639      	mov	r1, r7
 8007b7a:	f7fb fa55 	bl	8003028 <__aeabi_dsub>
 8007b7e:	f80b 4b01 	strb.w	r4, [fp], #1
 8007b82:	45da      	cmp	sl, fp
 8007b84:	4606      	mov	r6, r0
 8007b86:	460f      	mov	r7, r1
 8007b88:	d1e5      	bne.n	8007b56 <_dtoa_r+0xc7e>
 8007b8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b8c:	441d      	add	r5, r3
 8007b8e:	2200      	movs	r2, #0
 8007b90:	4b3d      	ldr	r3, [pc, #244]	; (8007c88 <_dtoa_r+0xdb0>)
 8007b92:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8007b96:	f7fb fa49 	bl	800302c <__adddf3>
 8007b9a:	4632      	mov	r2, r6
 8007b9c:	463b      	mov	r3, r7
 8007b9e:	f7fb fe69 	bl	8003874 <__aeabi_dcmplt>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d048      	beq.n	8007c38 <_dtoa_r+0xd60>
 8007ba6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ba8:	9304      	str	r3, [sp, #16]
 8007baa:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8007bae:	f7ff bb4c 	b.w	800724a <_dtoa_r+0x372>
 8007bb2:	9b05      	ldr	r3, [sp, #20]
 8007bb4:	9a06      	ldr	r2, [sp, #24]
 8007bb6:	1a9d      	subs	r5, r3, r2
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f7ff bb7c 	b.w	80072b6 <_dtoa_r+0x3de>
 8007bbe:	2700      	movs	r7, #0
 8007bc0:	e6ca      	b.n	8007958 <_dtoa_r+0xa80>
 8007bc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007bc4:	9f02      	ldr	r7, [sp, #8]
 8007bc6:	9d05      	ldr	r5, [sp, #20]
 8007bc8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007bcc:	f7ff bb73 	b.w	80072b6 <_dtoa_r+0x3de>
 8007bd0:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8007bd4:	f04f 0a02 	mov.w	sl, #2
 8007bd8:	e4da      	b.n	8007590 <_dtoa_r+0x6b8>
 8007bda:	9b06      	ldr	r3, [sp, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f43f aec1 	beq.w	8007964 <_dtoa_r+0xa8c>
 8007be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f77f af2e 	ble.w	8007a46 <_dtoa_r+0xb6e>
 8007bea:	2200      	movs	r2, #0
 8007bec:	4b25      	ldr	r3, [pc, #148]	; (8007c84 <_dtoa_r+0xdac>)
 8007bee:	4630      	mov	r0, r6
 8007bf0:	4639      	mov	r1, r7
 8007bf2:	f7fb fbcd 	bl	8003390 <__aeabi_dmul>
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	460f      	mov	r7, r1
 8007bfa:	f10a 0001 	add.w	r0, sl, #1
 8007bfe:	f7fb fb61 	bl	80032c4 <__aeabi_i2d>
 8007c02:	4632      	mov	r2, r6
 8007c04:	463b      	mov	r3, r7
 8007c06:	f7fb fbc3 	bl	8003390 <__aeabi_dmul>
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	4b19      	ldr	r3, [pc, #100]	; (8007c74 <_dtoa_r+0xd9c>)
 8007c0e:	f7fb fa0d 	bl	800302c <__adddf3>
 8007c12:	9a04      	ldr	r2, [sp, #16]
 8007c14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c16:	9310      	str	r3, [sp, #64]	; 0x40
 8007c18:	3a01      	subs	r2, #1
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007c20:	9214      	str	r2, [sp, #80]	; 0x50
 8007c22:	e4d6      	b.n	80075d2 <_dtoa_r+0x6fa>
 8007c24:	9408      	str	r4, [sp, #32]
 8007c26:	e584      	b.n	8007732 <_dtoa_r+0x85a>
 8007c28:	2239      	movs	r2, #57	; 0x39
 8007c2a:	46b3      	mov	fp, r6
 8007c2c:	9408      	str	r4, [sp, #32]
 8007c2e:	4646      	mov	r6, r8
 8007c30:	703a      	strb	r2, [r7, #0]
 8007c32:	1c7d      	adds	r5, r7, #1
 8007c34:	f7ff bbf5 	b.w	8007422 <_dtoa_r+0x54a>
 8007c38:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	4912      	ldr	r1, [pc, #72]	; (8007c88 <_dtoa_r+0xdb0>)
 8007c40:	f7fb f9f2 	bl	8003028 <__aeabi_dsub>
 8007c44:	4632      	mov	r2, r6
 8007c46:	463b      	mov	r3, r7
 8007c48:	f7fb fe32 	bl	80038b0 <__aeabi_dcmpgt>
 8007c4c:	b908      	cbnz	r0, 8007c52 <_dtoa_r+0xd7a>
 8007c4e:	e6fa      	b.n	8007a46 <_dtoa_r+0xb6e>
 8007c50:	4615      	mov	r5, r2
 8007c52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c56:	2b30      	cmp	r3, #48	; 0x30
 8007c58:	f105 32ff 	add.w	r2, r5, #4294967295
 8007c5c:	d0f8      	beq.n	8007c50 <_dtoa_r+0xd78>
 8007c5e:	e539      	b.n	80076d4 <_dtoa_r+0x7fc>
 8007c60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c62:	9304      	str	r3, [sp, #16]
 8007c64:	f7ff baf1 	b.w	800724a <_dtoa_r+0x372>
 8007c68:	f1ba 0f00 	cmp.w	sl, #0
 8007c6c:	f47f ad7c 	bne.w	8007768 <_dtoa_r+0x890>
 8007c70:	e662      	b.n	8007938 <_dtoa_r+0xa60>
 8007c72:	bf00      	nop
 8007c74:	401c0000 	.word	0x401c0000
 8007c78:	40140000 	.word	0x40140000
 8007c7c:	0800a3d8 	.word	0x0800a3d8
 8007c80:	0800a4a0 	.word	0x0800a4a0
 8007c84:	40240000 	.word	0x40240000
 8007c88:	3fe00000 	.word	0x3fe00000
 8007c8c:	2b39      	cmp	r3, #57	; 0x39
 8007c8e:	46d3      	mov	fp, sl
 8007c90:	469a      	mov	sl, r3
 8007c92:	d0c9      	beq.n	8007c28 <_dtoa_r+0xd50>
 8007c94:	f1bb 0f00 	cmp.w	fp, #0
 8007c98:	f73f aebd 	bgt.w	8007a16 <_dtoa_r+0xb3e>
 8007c9c:	e6bd      	b.n	8007a1a <_dtoa_r+0xb42>
 8007c9e:	f47f aebc 	bne.w	8007a1a <_dtoa_r+0xb42>
 8007ca2:	f01a 0f01 	tst.w	sl, #1
 8007ca6:	f43f aeb8 	beq.w	8007a1a <_dtoa_r+0xb42>
 8007caa:	e6b0      	b.n	8007a0e <_dtoa_r+0xb36>
 8007cac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	dc25      	bgt.n	8007cfe <_dtoa_r+0xe26>
 8007cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb4:	e60d      	b.n	80078d2 <_dtoa_r+0x9fa>
 8007cb6:	f04f 0a02 	mov.w	sl, #2
 8007cba:	e469      	b.n	8007590 <_dtoa_r+0x6b8>
 8007cbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	dc1d      	bgt.n	8007cfe <_dtoa_r+0xe26>
 8007cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cc4:	e56d      	b.n	80077a2 <_dtoa_r+0x8ca>
 8007cc6:	2400      	movs	r4, #0
 8007cc8:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8007ccc:	4621      	mov	r1, r4
 8007cce:	4648      	mov	r0, r9
 8007cd0:	f001 f856 	bl	8008d80 <_Balloc>
 8007cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd8:	9306      	str	r3, [sp, #24]
 8007cda:	930c      	str	r3, [sp, #48]	; 0x30
 8007cdc:	2301      	movs	r3, #1
 8007cde:	9007      	str	r0, [sp, #28]
 8007ce0:	9423      	str	r4, [sp, #140]	; 0x8c
 8007ce2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8007ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce8:	f7ff b9fc 	b.w	80070e4 <_dtoa_r+0x20c>
 8007cec:	f43f ab48 	beq.w	8007380 <_dtoa_r+0x4a8>
 8007cf0:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8007cf4:	f7ff bb3f 	b.w	8007376 <_dtoa_r+0x49e>
 8007cf8:	2501      	movs	r5, #1
 8007cfa:	f7ff b9bd 	b.w	8007078 <_dtoa_r+0x1a0>
 8007cfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d00:	9306      	str	r3, [sp, #24]
 8007d02:	e5ee      	b.n	80078e2 <_dtoa_r+0xa0a>

08007d04 <__sflush_r>:
 8007d04:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d0e:	460d      	mov	r5, r1
 8007d10:	0711      	lsls	r1, r2, #28
 8007d12:	4680      	mov	r8, r0
 8007d14:	d43c      	bmi.n	8007d90 <__sflush_r+0x8c>
 8007d16:	686a      	ldr	r2, [r5, #4]
 8007d18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007d1c:	2a00      	cmp	r2, #0
 8007d1e:	81ab      	strh	r3, [r5, #12]
 8007d20:	dd73      	ble.n	8007e0a <__sflush_r+0x106>
 8007d22:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8007d24:	2c00      	cmp	r4, #0
 8007d26:	d04b      	beq.n	8007dc0 <__sflush_r+0xbc>
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007d2e:	2100      	movs	r1, #0
 8007d30:	b292      	uxth	r2, r2
 8007d32:	f8d8 6000 	ldr.w	r6, [r8]
 8007d36:	f8c8 1000 	str.w	r1, [r8]
 8007d3a:	2a00      	cmp	r2, #0
 8007d3c:	d069      	beq.n	8007e12 <__sflush_r+0x10e>
 8007d3e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8007d40:	075f      	lsls	r7, r3, #29
 8007d42:	d505      	bpl.n	8007d50 <__sflush_r+0x4c>
 8007d44:	6869      	ldr	r1, [r5, #4]
 8007d46:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8007d48:	1a52      	subs	r2, r2, r1
 8007d4a:	b10b      	cbz	r3, 8007d50 <__sflush_r+0x4c>
 8007d4c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007d4e:	1ad2      	subs	r2, r2, r3
 8007d50:	2300      	movs	r3, #0
 8007d52:	69e9      	ldr	r1, [r5, #28]
 8007d54:	4640      	mov	r0, r8
 8007d56:	47a0      	blx	r4
 8007d58:	1c44      	adds	r4, r0, #1
 8007d5a:	d03c      	beq.n	8007dd6 <__sflush_r+0xd2>
 8007d5c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8007d60:	692a      	ldr	r2, [r5, #16]
 8007d62:	602a      	str	r2, [r5, #0]
 8007d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d68:	2200      	movs	r2, #0
 8007d6a:	81ab      	strh	r3, [r5, #12]
 8007d6c:	04db      	lsls	r3, r3, #19
 8007d6e:	606a      	str	r2, [r5, #4]
 8007d70:	d449      	bmi.n	8007e06 <__sflush_r+0x102>
 8007d72:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8007d74:	f8c8 6000 	str.w	r6, [r8]
 8007d78:	b311      	cbz	r1, 8007dc0 <__sflush_r+0xbc>
 8007d7a:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8007d7e:	4299      	cmp	r1, r3
 8007d80:	d002      	beq.n	8007d88 <__sflush_r+0x84>
 8007d82:	4640      	mov	r0, r8
 8007d84:	f000 f94e 	bl	8008024 <_free_r>
 8007d88:	2000      	movs	r0, #0
 8007d8a:	6328      	str	r0, [r5, #48]	; 0x30
 8007d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d90:	692e      	ldr	r6, [r5, #16]
 8007d92:	b1ae      	cbz	r6, 8007dc0 <__sflush_r+0xbc>
 8007d94:	682c      	ldr	r4, [r5, #0]
 8007d96:	602e      	str	r6, [r5, #0]
 8007d98:	0790      	lsls	r0, r2, #30
 8007d9a:	bf0c      	ite	eq
 8007d9c:	696b      	ldreq	r3, [r5, #20]
 8007d9e:	2300      	movne	r3, #0
 8007da0:	1ba4      	subs	r4, r4, r6
 8007da2:	60ab      	str	r3, [r5, #8]
 8007da4:	e00a      	b.n	8007dbc <__sflush_r+0xb8>
 8007da6:	4623      	mov	r3, r4
 8007da8:	4632      	mov	r2, r6
 8007daa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8007dac:	69e9      	ldr	r1, [r5, #28]
 8007dae:	4640      	mov	r0, r8
 8007db0:	47b8      	blx	r7
 8007db2:	2800      	cmp	r0, #0
 8007db4:	eba4 0400 	sub.w	r4, r4, r0
 8007db8:	4406      	add	r6, r0
 8007dba:	dd04      	ble.n	8007dc6 <__sflush_r+0xc2>
 8007dbc:	2c00      	cmp	r4, #0
 8007dbe:	dcf2      	bgt.n	8007da6 <__sflush_r+0xa2>
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc6:	89ab      	ldrh	r3, [r5, #12]
 8007dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dcc:	81ab      	strh	r3, [r5, #12]
 8007dce:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd6:	f8d8 2000 	ldr.w	r2, [r8]
 8007dda:	2a1d      	cmp	r2, #29
 8007ddc:	d8f3      	bhi.n	8007dc6 <__sflush_r+0xc2>
 8007dde:	4b1a      	ldr	r3, [pc, #104]	; (8007e48 <__sflush_r+0x144>)
 8007de0:	40d3      	lsrs	r3, r2
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	f083 0401 	eor.w	r4, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0eb      	beq.n	8007dc6 <__sflush_r+0xc2>
 8007dee:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8007df2:	6929      	ldr	r1, [r5, #16]
 8007df4:	6029      	str	r1, [r5, #0]
 8007df6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dfa:	04d9      	lsls	r1, r3, #19
 8007dfc:	606c      	str	r4, [r5, #4]
 8007dfe:	81ab      	strh	r3, [r5, #12]
 8007e00:	d5b7      	bpl.n	8007d72 <__sflush_r+0x6e>
 8007e02:	2a00      	cmp	r2, #0
 8007e04:	d1b5      	bne.n	8007d72 <__sflush_r+0x6e>
 8007e06:	6528      	str	r0, [r5, #80]	; 0x50
 8007e08:	e7b3      	b.n	8007d72 <__sflush_r+0x6e>
 8007e0a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8007e0c:	2a00      	cmp	r2, #0
 8007e0e:	dc88      	bgt.n	8007d22 <__sflush_r+0x1e>
 8007e10:	e7d6      	b.n	8007dc0 <__sflush_r+0xbc>
 8007e12:	2301      	movs	r3, #1
 8007e14:	69e9      	ldr	r1, [r5, #28]
 8007e16:	4640      	mov	r0, r8
 8007e18:	47a0      	blx	r4
 8007e1a:	1c43      	adds	r3, r0, #1
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	d002      	beq.n	8007e26 <__sflush_r+0x122>
 8007e20:	89ab      	ldrh	r3, [r5, #12]
 8007e22:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8007e24:	e78c      	b.n	8007d40 <__sflush_r+0x3c>
 8007e26:	f8d8 3000 	ldr.w	r3, [r8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d0f8      	beq.n	8007e20 <__sflush_r+0x11c>
 8007e2e:	2b1d      	cmp	r3, #29
 8007e30:	d001      	beq.n	8007e36 <__sflush_r+0x132>
 8007e32:	2b16      	cmp	r3, #22
 8007e34:	d102      	bne.n	8007e3c <__sflush_r+0x138>
 8007e36:	f8c8 6000 	str.w	r6, [r8]
 8007e3a:	e7c1      	b.n	8007dc0 <__sflush_r+0xbc>
 8007e3c:	89ab      	ldrh	r3, [r5, #12]
 8007e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e42:	81ab      	strh	r3, [r5, #12]
 8007e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e48:	20400001 	.word	0x20400001

08007e4c <_fflush_r>:
 8007e4c:	b510      	push	{r4, lr}
 8007e4e:	4604      	mov	r4, r0
 8007e50:	b082      	sub	sp, #8
 8007e52:	b108      	cbz	r0, 8007e58 <_fflush_r+0xc>
 8007e54:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007e56:	b153      	cbz	r3, 8007e6e <_fflush_r+0x22>
 8007e58:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8007e5c:	b908      	cbnz	r0, 8007e62 <_fflush_r+0x16>
 8007e5e:	b002      	add	sp, #8
 8007e60:	bd10      	pop	{r4, pc}
 8007e62:	4620      	mov	r0, r4
 8007e64:	b002      	add	sp, #8
 8007e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e6a:	f7ff bf4b 	b.w	8007d04 <__sflush_r>
 8007e6e:	9101      	str	r1, [sp, #4]
 8007e70:	f000 f880 	bl	8007f74 <__sinit>
 8007e74:	9901      	ldr	r1, [sp, #4]
 8007e76:	e7ef      	b.n	8007e58 <_fflush_r+0xc>

08007e78 <_cleanup_r>:
 8007e78:	4901      	ldr	r1, [pc, #4]	; (8007e80 <_cleanup_r+0x8>)
 8007e7a:	f000 bb3d 	b.w	80084f8 <_fwalk_reent>
 8007e7e:	bf00      	nop
 8007e80:	08009a85 	.word	0x08009a85

08007e84 <__sinit.part.1>:
 8007e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	4b35      	ldr	r3, [pc, #212]	; (8007f60 <__sinit.part.1+0xdc>)
 8007e8a:	6845      	ldr	r5, [r0, #4]
 8007e8c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8007e8e:	2400      	movs	r4, #0
 8007e90:	4607      	mov	r7, r0
 8007e92:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8007e96:	2304      	movs	r3, #4
 8007e98:	2103      	movs	r1, #3
 8007e9a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8007e9e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8007ea2:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	602c      	str	r4, [r5, #0]
 8007eaa:	606c      	str	r4, [r5, #4]
 8007eac:	60ac      	str	r4, [r5, #8]
 8007eae:	666c      	str	r4, [r5, #100]	; 0x64
 8007eb0:	81ec      	strh	r4, [r5, #14]
 8007eb2:	612c      	str	r4, [r5, #16]
 8007eb4:	616c      	str	r4, [r5, #20]
 8007eb6:	61ac      	str	r4, [r5, #24]
 8007eb8:	81ab      	strh	r3, [r5, #12]
 8007eba:	4621      	mov	r1, r4
 8007ebc:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8007ec0:	2208      	movs	r2, #8
 8007ec2:	f7fb fdfd 	bl	8003ac0 <memset>
 8007ec6:	68be      	ldr	r6, [r7, #8]
 8007ec8:	f8df b098 	ldr.w	fp, [pc, #152]	; 8007f64 <__sinit.part.1+0xe0>
 8007ecc:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007f68 <__sinit.part.1+0xe4>
 8007ed0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8007f6c <__sinit.part.1+0xe8>
 8007ed4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007f70 <__sinit.part.1+0xec>
 8007ed8:	f8c5 b020 	str.w	fp, [r5, #32]
 8007edc:	2301      	movs	r3, #1
 8007ede:	2209      	movs	r2, #9
 8007ee0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8007ee4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8007ee8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8007eec:	61ed      	str	r5, [r5, #28]
 8007eee:	4621      	mov	r1, r4
 8007ef0:	81f3      	strh	r3, [r6, #14]
 8007ef2:	81b2      	strh	r2, [r6, #12]
 8007ef4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8007ef8:	6034      	str	r4, [r6, #0]
 8007efa:	6074      	str	r4, [r6, #4]
 8007efc:	60b4      	str	r4, [r6, #8]
 8007efe:	6674      	str	r4, [r6, #100]	; 0x64
 8007f00:	6134      	str	r4, [r6, #16]
 8007f02:	6174      	str	r4, [r6, #20]
 8007f04:	61b4      	str	r4, [r6, #24]
 8007f06:	2208      	movs	r2, #8
 8007f08:	9301      	str	r3, [sp, #4]
 8007f0a:	f7fb fdd9 	bl	8003ac0 <memset>
 8007f0e:	68fd      	ldr	r5, [r7, #12]
 8007f10:	61f6      	str	r6, [r6, #28]
 8007f12:	2012      	movs	r0, #18
 8007f14:	2202      	movs	r2, #2
 8007f16:	f8c6 b020 	str.w	fp, [r6, #32]
 8007f1a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8007f1e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8007f22:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8007f26:	4621      	mov	r1, r4
 8007f28:	81a8      	strh	r0, [r5, #12]
 8007f2a:	81ea      	strh	r2, [r5, #14]
 8007f2c:	602c      	str	r4, [r5, #0]
 8007f2e:	606c      	str	r4, [r5, #4]
 8007f30:	60ac      	str	r4, [r5, #8]
 8007f32:	666c      	str	r4, [r5, #100]	; 0x64
 8007f34:	612c      	str	r4, [r5, #16]
 8007f36:	616c      	str	r4, [r5, #20]
 8007f38:	61ac      	str	r4, [r5, #24]
 8007f3a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8007f3e:	2208      	movs	r2, #8
 8007f40:	f7fb fdbe 	bl	8003ac0 <memset>
 8007f44:	9b01      	ldr	r3, [sp, #4]
 8007f46:	61ed      	str	r5, [r5, #28]
 8007f48:	f8c5 b020 	str.w	fp, [r5, #32]
 8007f4c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8007f50:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8007f54:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8007f58:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f5a:	b003      	add	sp, #12
 8007f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f60:	08007e79 	.word	0x08007e79
 8007f64:	080097a5 	.word	0x080097a5
 8007f68:	080097c9 	.word	0x080097c9
 8007f6c:	08009805 	.word	0x08009805
 8007f70:	08009825 	.word	0x08009825

08007f74 <__sinit>:
 8007f74:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007f76:	b103      	cbz	r3, 8007f7a <__sinit+0x6>
 8007f78:	4770      	bx	lr
 8007f7a:	f7ff bf83 	b.w	8007e84 <__sinit.part.1>
 8007f7e:	bf00      	nop

08007f80 <__sfp_lock_acquire>:
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop

08007f84 <__sfp_lock_release>:
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop

08007f88 <_malloc_trim_r>:
 8007f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8a:	4f23      	ldr	r7, [pc, #140]	; (8008018 <_malloc_trim_r+0x90>)
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	4606      	mov	r6, r0
 8007f90:	f000 fef2 	bl	8008d78 <__malloc_lock>
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	685d      	ldr	r5, [r3, #4]
 8007f98:	f025 0503 	bic.w	r5, r5, #3
 8007f9c:	1b29      	subs	r1, r5, r4
 8007f9e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8007fa2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8007fa6:	f021 010f 	bic.w	r1, r1, #15
 8007faa:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8007fae:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8007fb2:	db07      	blt.n	8007fc4 <_malloc_trim_r+0x3c>
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	f001 fbe2 	bl	8009780 <_sbrk_r>
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	442b      	add	r3, r5
 8007fc0:	4298      	cmp	r0, r3
 8007fc2:	d004      	beq.n	8007fce <_malloc_trim_r+0x46>
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	f000 fed9 	bl	8008d7c <__malloc_unlock>
 8007fca:	2000      	movs	r0, #0
 8007fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fce:	4261      	negs	r1, r4
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f001 fbd5 	bl	8009780 <_sbrk_r>
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	d00d      	beq.n	8007ff6 <_malloc_trim_r+0x6e>
 8007fda:	4b10      	ldr	r3, [pc, #64]	; (800801c <_malloc_trim_r+0x94>)
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	6819      	ldr	r1, [r3, #0]
 8007fe0:	1b2d      	subs	r5, r5, r4
 8007fe2:	f045 0501 	orr.w	r5, r5, #1
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	1b09      	subs	r1, r1, r4
 8007fea:	6055      	str	r5, [r2, #4]
 8007fec:	6019      	str	r1, [r3, #0]
 8007fee:	f000 fec5 	bl	8008d7c <__malloc_unlock>
 8007ff2:	2001      	movs	r0, #1
 8007ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	f001 fbc1 	bl	8009780 <_sbrk_r>
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	1a83      	subs	r3, r0, r2
 8008002:	2b0f      	cmp	r3, #15
 8008004:	ddde      	ble.n	8007fc4 <_malloc_trim_r+0x3c>
 8008006:	4c06      	ldr	r4, [pc, #24]	; (8008020 <_malloc_trim_r+0x98>)
 8008008:	4904      	ldr	r1, [pc, #16]	; (800801c <_malloc_trim_r+0x94>)
 800800a:	6824      	ldr	r4, [r4, #0]
 800800c:	f043 0301 	orr.w	r3, r3, #1
 8008010:	1b00      	subs	r0, r0, r4
 8008012:	6053      	str	r3, [r2, #4]
 8008014:	6008      	str	r0, [r1, #0]
 8008016:	e7d5      	b.n	8007fc4 <_malloc_trim_r+0x3c>
 8008018:	200005d8 	.word	0x200005d8
 800801c:	20000a58 	.word	0x20000a58
 8008020:	200009e4 	.word	0x200009e4

08008024 <_free_r>:
 8008024:	2900      	cmp	r1, #0
 8008026:	d045      	beq.n	80080b4 <_free_r+0x90>
 8008028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800802c:	460d      	mov	r5, r1
 800802e:	4680      	mov	r8, r0
 8008030:	f000 fea2 	bl	8008d78 <__malloc_lock>
 8008034:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8008038:	496a      	ldr	r1, [pc, #424]	; (80081e4 <_free_r+0x1c0>)
 800803a:	f027 0301 	bic.w	r3, r7, #1
 800803e:	f1a5 0408 	sub.w	r4, r5, #8
 8008042:	18e2      	adds	r2, r4, r3
 8008044:	688e      	ldr	r6, [r1, #8]
 8008046:	6850      	ldr	r0, [r2, #4]
 8008048:	42b2      	cmp	r2, r6
 800804a:	f020 0003 	bic.w	r0, r0, #3
 800804e:	d062      	beq.n	8008116 <_free_r+0xf2>
 8008050:	07fe      	lsls	r6, r7, #31
 8008052:	6050      	str	r0, [r2, #4]
 8008054:	d40b      	bmi.n	800806e <_free_r+0x4a>
 8008056:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800805a:	1be4      	subs	r4, r4, r7
 800805c:	f101 0e08 	add.w	lr, r1, #8
 8008060:	68a5      	ldr	r5, [r4, #8]
 8008062:	4575      	cmp	r5, lr
 8008064:	443b      	add	r3, r7
 8008066:	d06f      	beq.n	8008148 <_free_r+0x124>
 8008068:	68e7      	ldr	r7, [r4, #12]
 800806a:	60ef      	str	r7, [r5, #12]
 800806c:	60bd      	str	r5, [r7, #8]
 800806e:	1815      	adds	r5, r2, r0
 8008070:	686d      	ldr	r5, [r5, #4]
 8008072:	07ed      	lsls	r5, r5, #31
 8008074:	d542      	bpl.n	80080fc <_free_r+0xd8>
 8008076:	f043 0201 	orr.w	r2, r3, #1
 800807a:	6062      	str	r2, [r4, #4]
 800807c:	50e3      	str	r3, [r4, r3]
 800807e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008082:	d218      	bcs.n	80080b6 <_free_r+0x92>
 8008084:	08db      	lsrs	r3, r3, #3
 8008086:	1c5a      	adds	r2, r3, #1
 8008088:	684d      	ldr	r5, [r1, #4]
 800808a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 800808e:	60a7      	str	r7, [r4, #8]
 8008090:	2001      	movs	r0, #1
 8008092:	109b      	asrs	r3, r3, #2
 8008094:	fa00 f303 	lsl.w	r3, r0, r3
 8008098:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 800809c:	431d      	orrs	r5, r3
 800809e:	3808      	subs	r0, #8
 80080a0:	60e0      	str	r0, [r4, #12]
 80080a2:	604d      	str	r5, [r1, #4]
 80080a4:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 80080a8:	60fc      	str	r4, [r7, #12]
 80080aa:	4640      	mov	r0, r8
 80080ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080b0:	f000 be64 	b.w	8008d7c <__malloc_unlock>
 80080b4:	4770      	bx	lr
 80080b6:	0a5a      	lsrs	r2, r3, #9
 80080b8:	2a04      	cmp	r2, #4
 80080ba:	d853      	bhi.n	8008164 <_free_r+0x140>
 80080bc:	099a      	lsrs	r2, r3, #6
 80080be:	f102 0739 	add.w	r7, r2, #57	; 0x39
 80080c2:	007f      	lsls	r7, r7, #1
 80080c4:	f102 0538 	add.w	r5, r2, #56	; 0x38
 80080c8:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 80080cc:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 80080d0:	4944      	ldr	r1, [pc, #272]	; (80081e4 <_free_r+0x1c0>)
 80080d2:	3808      	subs	r0, #8
 80080d4:	4290      	cmp	r0, r2
 80080d6:	d04d      	beq.n	8008174 <_free_r+0x150>
 80080d8:	6851      	ldr	r1, [r2, #4]
 80080da:	f021 0103 	bic.w	r1, r1, #3
 80080de:	428b      	cmp	r3, r1
 80080e0:	d202      	bcs.n	80080e8 <_free_r+0xc4>
 80080e2:	6892      	ldr	r2, [r2, #8]
 80080e4:	4290      	cmp	r0, r2
 80080e6:	d1f7      	bne.n	80080d8 <_free_r+0xb4>
 80080e8:	68d0      	ldr	r0, [r2, #12]
 80080ea:	60e0      	str	r0, [r4, #12]
 80080ec:	60a2      	str	r2, [r4, #8]
 80080ee:	6084      	str	r4, [r0, #8]
 80080f0:	60d4      	str	r4, [r2, #12]
 80080f2:	4640      	mov	r0, r8
 80080f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080f8:	f000 be40 	b.w	8008d7c <__malloc_unlock>
 80080fc:	6895      	ldr	r5, [r2, #8]
 80080fe:	4f3a      	ldr	r7, [pc, #232]	; (80081e8 <_free_r+0x1c4>)
 8008100:	42bd      	cmp	r5, r7
 8008102:	4403      	add	r3, r0
 8008104:	d03f      	beq.n	8008186 <_free_r+0x162>
 8008106:	68d0      	ldr	r0, [r2, #12]
 8008108:	60e8      	str	r0, [r5, #12]
 800810a:	f043 0201 	orr.w	r2, r3, #1
 800810e:	6085      	str	r5, [r0, #8]
 8008110:	6062      	str	r2, [r4, #4]
 8008112:	50e3      	str	r3, [r4, r3]
 8008114:	e7b3      	b.n	800807e <_free_r+0x5a>
 8008116:	07ff      	lsls	r7, r7, #31
 8008118:	4403      	add	r3, r0
 800811a:	d407      	bmi.n	800812c <_free_r+0x108>
 800811c:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8008120:	1aa4      	subs	r4, r4, r2
 8008122:	4413      	add	r3, r2
 8008124:	68a0      	ldr	r0, [r4, #8]
 8008126:	68e2      	ldr	r2, [r4, #12]
 8008128:	60c2      	str	r2, [r0, #12]
 800812a:	6090      	str	r0, [r2, #8]
 800812c:	4a2f      	ldr	r2, [pc, #188]	; (80081ec <_free_r+0x1c8>)
 800812e:	6812      	ldr	r2, [r2, #0]
 8008130:	f043 0001 	orr.w	r0, r3, #1
 8008134:	4293      	cmp	r3, r2
 8008136:	6060      	str	r0, [r4, #4]
 8008138:	608c      	str	r4, [r1, #8]
 800813a:	d3b6      	bcc.n	80080aa <_free_r+0x86>
 800813c:	4b2c      	ldr	r3, [pc, #176]	; (80081f0 <_free_r+0x1cc>)
 800813e:	4640      	mov	r0, r8
 8008140:	6819      	ldr	r1, [r3, #0]
 8008142:	f7ff ff21 	bl	8007f88 <_malloc_trim_r>
 8008146:	e7b0      	b.n	80080aa <_free_r+0x86>
 8008148:	1811      	adds	r1, r2, r0
 800814a:	6849      	ldr	r1, [r1, #4]
 800814c:	07c9      	lsls	r1, r1, #31
 800814e:	d444      	bmi.n	80081da <_free_r+0x1b6>
 8008150:	6891      	ldr	r1, [r2, #8]
 8008152:	68d2      	ldr	r2, [r2, #12]
 8008154:	60ca      	str	r2, [r1, #12]
 8008156:	4403      	add	r3, r0
 8008158:	f043 0001 	orr.w	r0, r3, #1
 800815c:	6091      	str	r1, [r2, #8]
 800815e:	6060      	str	r0, [r4, #4]
 8008160:	50e3      	str	r3, [r4, r3]
 8008162:	e7a2      	b.n	80080aa <_free_r+0x86>
 8008164:	2a14      	cmp	r2, #20
 8008166:	d817      	bhi.n	8008198 <_free_r+0x174>
 8008168:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800816c:	007f      	lsls	r7, r7, #1
 800816e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8008172:	e7a9      	b.n	80080c8 <_free_r+0xa4>
 8008174:	10aa      	asrs	r2, r5, #2
 8008176:	684b      	ldr	r3, [r1, #4]
 8008178:	2501      	movs	r5, #1
 800817a:	fa05 f202 	lsl.w	r2, r5, r2
 800817e:	4313      	orrs	r3, r2
 8008180:	604b      	str	r3, [r1, #4]
 8008182:	4602      	mov	r2, r0
 8008184:	e7b1      	b.n	80080ea <_free_r+0xc6>
 8008186:	f043 0201 	orr.w	r2, r3, #1
 800818a:	614c      	str	r4, [r1, #20]
 800818c:	610c      	str	r4, [r1, #16]
 800818e:	60e5      	str	r5, [r4, #12]
 8008190:	60a5      	str	r5, [r4, #8]
 8008192:	6062      	str	r2, [r4, #4]
 8008194:	50e3      	str	r3, [r4, r3]
 8008196:	e788      	b.n	80080aa <_free_r+0x86>
 8008198:	2a54      	cmp	r2, #84	; 0x54
 800819a:	d806      	bhi.n	80081aa <_free_r+0x186>
 800819c:	0b1a      	lsrs	r2, r3, #12
 800819e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 80081a2:	007f      	lsls	r7, r7, #1
 80081a4:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 80081a8:	e78e      	b.n	80080c8 <_free_r+0xa4>
 80081aa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80081ae:	d806      	bhi.n	80081be <_free_r+0x19a>
 80081b0:	0bda      	lsrs	r2, r3, #15
 80081b2:	f102 0778 	add.w	r7, r2, #120	; 0x78
 80081b6:	007f      	lsls	r7, r7, #1
 80081b8:	f102 0577 	add.w	r5, r2, #119	; 0x77
 80081bc:	e784      	b.n	80080c8 <_free_r+0xa4>
 80081be:	f240 5054 	movw	r0, #1364	; 0x554
 80081c2:	4282      	cmp	r2, r0
 80081c4:	d806      	bhi.n	80081d4 <_free_r+0x1b0>
 80081c6:	0c9a      	lsrs	r2, r3, #18
 80081c8:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 80081cc:	007f      	lsls	r7, r7, #1
 80081ce:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 80081d2:	e779      	b.n	80080c8 <_free_r+0xa4>
 80081d4:	27fe      	movs	r7, #254	; 0xfe
 80081d6:	257e      	movs	r5, #126	; 0x7e
 80081d8:	e776      	b.n	80080c8 <_free_r+0xa4>
 80081da:	f043 0201 	orr.w	r2, r3, #1
 80081de:	6062      	str	r2, [r4, #4]
 80081e0:	50e3      	str	r3, [r4, r3]
 80081e2:	e762      	b.n	80080aa <_free_r+0x86>
 80081e4:	200005d8 	.word	0x200005d8
 80081e8:	200005e0 	.word	0x200005e0
 80081ec:	200009e0 	.word	0x200009e0
 80081f0:	20000a54 	.word	0x20000a54

080081f4 <__sfvwrite_r>:
 80081f4:	6893      	ldr	r3, [r2, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d076      	beq.n	80082e8 <__sfvwrite_r+0xf4>
 80081fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fe:	898b      	ldrh	r3, [r1, #12]
 8008200:	b085      	sub	sp, #20
 8008202:	460c      	mov	r4, r1
 8008204:	0719      	lsls	r1, r3, #28
 8008206:	9001      	str	r0, [sp, #4]
 8008208:	4616      	mov	r6, r2
 800820a:	d529      	bpl.n	8008260 <__sfvwrite_r+0x6c>
 800820c:	6922      	ldr	r2, [r4, #16]
 800820e:	b33a      	cbz	r2, 8008260 <__sfvwrite_r+0x6c>
 8008210:	f003 0802 	and.w	r8, r3, #2
 8008214:	fa1f f088 	uxth.w	r0, r8
 8008218:	6835      	ldr	r5, [r6, #0]
 800821a:	2800      	cmp	r0, #0
 800821c:	d02f      	beq.n	800827e <__sfvwrite_r+0x8a>
 800821e:	f04f 0900 	mov.w	r9, #0
 8008222:	4fb4      	ldr	r7, [pc, #720]	; (80084f4 <__sfvwrite_r+0x300>)
 8008224:	46c8      	mov	r8, r9
 8008226:	46b2      	mov	sl, r6
 8008228:	45b8      	cmp	r8, r7
 800822a:	4643      	mov	r3, r8
 800822c:	464a      	mov	r2, r9
 800822e:	bf28      	it	cs
 8008230:	463b      	movcs	r3, r7
 8008232:	9801      	ldr	r0, [sp, #4]
 8008234:	f1b8 0f00 	cmp.w	r8, #0
 8008238:	d050      	beq.n	80082dc <__sfvwrite_r+0xe8>
 800823a:	69e1      	ldr	r1, [r4, #28]
 800823c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800823e:	47b0      	blx	r6
 8008240:	2800      	cmp	r0, #0
 8008242:	dd71      	ble.n	8008328 <__sfvwrite_r+0x134>
 8008244:	f8da 3008 	ldr.w	r3, [sl, #8]
 8008248:	1a1b      	subs	r3, r3, r0
 800824a:	4481      	add	r9, r0
 800824c:	ebc0 0808 	rsb	r8, r0, r8
 8008250:	f8ca 3008 	str.w	r3, [sl, #8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1e7      	bne.n	8008228 <__sfvwrite_r+0x34>
 8008258:	2000      	movs	r0, #0
 800825a:	b005      	add	sp, #20
 800825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008260:	4621      	mov	r1, r4
 8008262:	9801      	ldr	r0, [sp, #4]
 8008264:	f7fe fd40 	bl	8006ce8 <__swsetup_r>
 8008268:	2800      	cmp	r0, #0
 800826a:	f040 813a 	bne.w	80084e2 <__sfvwrite_r+0x2ee>
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	6835      	ldr	r5, [r6, #0]
 8008272:	f003 0802 	and.w	r8, r3, #2
 8008276:	fa1f f088 	uxth.w	r0, r8
 800827a:	2800      	cmp	r0, #0
 800827c:	d1cf      	bne.n	800821e <__sfvwrite_r+0x2a>
 800827e:	f013 0901 	ands.w	r9, r3, #1
 8008282:	d15b      	bne.n	800833c <__sfvwrite_r+0x148>
 8008284:	464f      	mov	r7, r9
 8008286:	9602      	str	r6, [sp, #8]
 8008288:	b31f      	cbz	r7, 80082d2 <__sfvwrite_r+0xde>
 800828a:	059a      	lsls	r2, r3, #22
 800828c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8008290:	d52c      	bpl.n	80082ec <__sfvwrite_r+0xf8>
 8008292:	4547      	cmp	r7, r8
 8008294:	46c2      	mov	sl, r8
 8008296:	f0c0 80a4 	bcc.w	80083e2 <__sfvwrite_r+0x1ee>
 800829a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800829e:	f040 80b1 	bne.w	8008404 <__sfvwrite_r+0x210>
 80082a2:	6820      	ldr	r0, [r4, #0]
 80082a4:	4652      	mov	r2, sl
 80082a6:	4649      	mov	r1, r9
 80082a8:	f000 fd02 	bl	8008cb0 <memmove>
 80082ac:	68a0      	ldr	r0, [r4, #8]
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	ebc8 0000 	rsb	r0, r8, r0
 80082b4:	4453      	add	r3, sl
 80082b6:	60a0      	str	r0, [r4, #8]
 80082b8:	6023      	str	r3, [r4, #0]
 80082ba:	4638      	mov	r0, r7
 80082bc:	9a02      	ldr	r2, [sp, #8]
 80082be:	6893      	ldr	r3, [r2, #8]
 80082c0:	1a1b      	subs	r3, r3, r0
 80082c2:	4481      	add	r9, r0
 80082c4:	1a3f      	subs	r7, r7, r0
 80082c6:	6093      	str	r3, [r2, #8]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0c5      	beq.n	8008258 <__sfvwrite_r+0x64>
 80082cc:	89a3      	ldrh	r3, [r4, #12]
 80082ce:	2f00      	cmp	r7, #0
 80082d0:	d1db      	bne.n	800828a <__sfvwrite_r+0x96>
 80082d2:	f8d5 9000 	ldr.w	r9, [r5]
 80082d6:	686f      	ldr	r7, [r5, #4]
 80082d8:	3508      	adds	r5, #8
 80082da:	e7d5      	b.n	8008288 <__sfvwrite_r+0x94>
 80082dc:	f8d5 9000 	ldr.w	r9, [r5]
 80082e0:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80082e4:	3508      	adds	r5, #8
 80082e6:	e79f      	b.n	8008228 <__sfvwrite_r+0x34>
 80082e8:	2000      	movs	r0, #0
 80082ea:	4770      	bx	lr
 80082ec:	6820      	ldr	r0, [r4, #0]
 80082ee:	6923      	ldr	r3, [r4, #16]
 80082f0:	4298      	cmp	r0, r3
 80082f2:	d803      	bhi.n	80082fc <__sfvwrite_r+0x108>
 80082f4:	6961      	ldr	r1, [r4, #20]
 80082f6:	428f      	cmp	r7, r1
 80082f8:	f080 80b7 	bcs.w	800846a <__sfvwrite_r+0x276>
 80082fc:	45b8      	cmp	r8, r7
 80082fe:	bf28      	it	cs
 8008300:	46b8      	movcs	r8, r7
 8008302:	4642      	mov	r2, r8
 8008304:	4649      	mov	r1, r9
 8008306:	f000 fcd3 	bl	8008cb0 <memmove>
 800830a:	68a3      	ldr	r3, [r4, #8]
 800830c:	6822      	ldr	r2, [r4, #0]
 800830e:	ebc8 0303 	rsb	r3, r8, r3
 8008312:	4442      	add	r2, r8
 8008314:	60a3      	str	r3, [r4, #8]
 8008316:	6022      	str	r2, [r4, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d149      	bne.n	80083b0 <__sfvwrite_r+0x1bc>
 800831c:	4621      	mov	r1, r4
 800831e:	9801      	ldr	r0, [sp, #4]
 8008320:	f7ff fd94 	bl	8007e4c <_fflush_r>
 8008324:	2800      	cmp	r0, #0
 8008326:	d043      	beq.n	80083b0 <__sfvwrite_r+0x1bc>
 8008328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800832c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008330:	f04f 30ff 	mov.w	r0, #4294967295
 8008334:	81a3      	strh	r3, [r4, #12]
 8008336:	b005      	add	sp, #20
 8008338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833c:	4680      	mov	r8, r0
 800833e:	9002      	str	r0, [sp, #8]
 8008340:	4682      	mov	sl, r0
 8008342:	4681      	mov	r9, r0
 8008344:	f1b9 0f00 	cmp.w	r9, #0
 8008348:	d02a      	beq.n	80083a0 <__sfvwrite_r+0x1ac>
 800834a:	9b02      	ldr	r3, [sp, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d04c      	beq.n	80083ea <__sfvwrite_r+0x1f6>
 8008350:	6820      	ldr	r0, [r4, #0]
 8008352:	6923      	ldr	r3, [r4, #16]
 8008354:	6962      	ldr	r2, [r4, #20]
 8008356:	45c8      	cmp	r8, r9
 8008358:	46c3      	mov	fp, r8
 800835a:	bf28      	it	cs
 800835c:	46cb      	movcs	fp, r9
 800835e:	4298      	cmp	r0, r3
 8008360:	465f      	mov	r7, fp
 8008362:	d904      	bls.n	800836e <__sfvwrite_r+0x17a>
 8008364:	68a3      	ldr	r3, [r4, #8]
 8008366:	4413      	add	r3, r2
 8008368:	459b      	cmp	fp, r3
 800836a:	f300 8090 	bgt.w	800848e <__sfvwrite_r+0x29a>
 800836e:	4593      	cmp	fp, r2
 8008370:	db20      	blt.n	80083b4 <__sfvwrite_r+0x1c0>
 8008372:	4613      	mov	r3, r2
 8008374:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008376:	69e1      	ldr	r1, [r4, #28]
 8008378:	9801      	ldr	r0, [sp, #4]
 800837a:	4652      	mov	r2, sl
 800837c:	47b8      	blx	r7
 800837e:	1e07      	subs	r7, r0, #0
 8008380:	ddd2      	ble.n	8008328 <__sfvwrite_r+0x134>
 8008382:	ebb8 0807 	subs.w	r8, r8, r7
 8008386:	d023      	beq.n	80083d0 <__sfvwrite_r+0x1dc>
 8008388:	68b3      	ldr	r3, [r6, #8]
 800838a:	1bdb      	subs	r3, r3, r7
 800838c:	44ba      	add	sl, r7
 800838e:	ebc7 0909 	rsb	r9, r7, r9
 8008392:	60b3      	str	r3, [r6, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	f43f af5f 	beq.w	8008258 <__sfvwrite_r+0x64>
 800839a:	f1b9 0f00 	cmp.w	r9, #0
 800839e:	d1d4      	bne.n	800834a <__sfvwrite_r+0x156>
 80083a0:	2300      	movs	r3, #0
 80083a2:	f8d5 a000 	ldr.w	sl, [r5]
 80083a6:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80083aa:	9302      	str	r3, [sp, #8]
 80083ac:	3508      	adds	r5, #8
 80083ae:	e7c9      	b.n	8008344 <__sfvwrite_r+0x150>
 80083b0:	4640      	mov	r0, r8
 80083b2:	e783      	b.n	80082bc <__sfvwrite_r+0xc8>
 80083b4:	465a      	mov	r2, fp
 80083b6:	4651      	mov	r1, sl
 80083b8:	f000 fc7a 	bl	8008cb0 <memmove>
 80083bc:	68a2      	ldr	r2, [r4, #8]
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	ebcb 0202 	rsb	r2, fp, r2
 80083c4:	445b      	add	r3, fp
 80083c6:	ebb8 0807 	subs.w	r8, r8, r7
 80083ca:	60a2      	str	r2, [r4, #8]
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	d1db      	bne.n	8008388 <__sfvwrite_r+0x194>
 80083d0:	4621      	mov	r1, r4
 80083d2:	9801      	ldr	r0, [sp, #4]
 80083d4:	f7ff fd3a 	bl	8007e4c <_fflush_r>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d1a5      	bne.n	8008328 <__sfvwrite_r+0x134>
 80083dc:	f8cd 8008 	str.w	r8, [sp, #8]
 80083e0:	e7d2      	b.n	8008388 <__sfvwrite_r+0x194>
 80083e2:	6820      	ldr	r0, [r4, #0]
 80083e4:	46b8      	mov	r8, r7
 80083e6:	46ba      	mov	sl, r7
 80083e8:	e75c      	b.n	80082a4 <__sfvwrite_r+0xb0>
 80083ea:	464a      	mov	r2, r9
 80083ec:	210a      	movs	r1, #10
 80083ee:	4650      	mov	r0, sl
 80083f0:	f000 fc0e 	bl	8008c10 <memchr>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	d06f      	beq.n	80084d8 <__sfvwrite_r+0x2e4>
 80083f8:	3001      	adds	r0, #1
 80083fa:	2301      	movs	r3, #1
 80083fc:	ebca 0800 	rsb	r8, sl, r0
 8008400:	9302      	str	r3, [sp, #8]
 8008402:	e7a5      	b.n	8008350 <__sfvwrite_r+0x15c>
 8008404:	6962      	ldr	r2, [r4, #20]
 8008406:	6820      	ldr	r0, [r4, #0]
 8008408:	6921      	ldr	r1, [r4, #16]
 800840a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 800840e:	ebc1 0a00 	rsb	sl, r1, r0
 8008412:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8008416:	f10a 0001 	add.w	r0, sl, #1
 800841a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800841e:	4438      	add	r0, r7
 8008420:	4540      	cmp	r0, r8
 8008422:	4642      	mov	r2, r8
 8008424:	bf84      	itt	hi
 8008426:	4680      	movhi	r8, r0
 8008428:	4642      	movhi	r2, r8
 800842a:	055b      	lsls	r3, r3, #21
 800842c:	d542      	bpl.n	80084b4 <__sfvwrite_r+0x2c0>
 800842e:	4611      	mov	r1, r2
 8008430:	9801      	ldr	r0, [sp, #4]
 8008432:	f000 f91b 	bl	800866c <_malloc_r>
 8008436:	4683      	mov	fp, r0
 8008438:	2800      	cmp	r0, #0
 800843a:	d055      	beq.n	80084e8 <__sfvwrite_r+0x2f4>
 800843c:	4652      	mov	r2, sl
 800843e:	6921      	ldr	r1, [r4, #16]
 8008440:	f7fb faa4 	bl	800398c <memcpy>
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800844a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800844e:	81a3      	strh	r3, [r4, #12]
 8008450:	ebca 0308 	rsb	r3, sl, r8
 8008454:	eb0b 000a 	add.w	r0, fp, sl
 8008458:	f8c4 8014 	str.w	r8, [r4, #20]
 800845c:	f8c4 b010 	str.w	fp, [r4, #16]
 8008460:	6020      	str	r0, [r4, #0]
 8008462:	60a3      	str	r3, [r4, #8]
 8008464:	46b8      	mov	r8, r7
 8008466:	46ba      	mov	sl, r7
 8008468:	e71c      	b.n	80082a4 <__sfvwrite_r+0xb0>
 800846a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800846e:	42bb      	cmp	r3, r7
 8008470:	bf28      	it	cs
 8008472:	463b      	movcs	r3, r7
 8008474:	464a      	mov	r2, r9
 8008476:	fb93 f3f1 	sdiv	r3, r3, r1
 800847a:	9801      	ldr	r0, [sp, #4]
 800847c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800847e:	fb01 f303 	mul.w	r3, r1, r3
 8008482:	69e1      	ldr	r1, [r4, #28]
 8008484:	47b0      	blx	r6
 8008486:	2800      	cmp	r0, #0
 8008488:	f73f af18 	bgt.w	80082bc <__sfvwrite_r+0xc8>
 800848c:	e74c      	b.n	8008328 <__sfvwrite_r+0x134>
 800848e:	461a      	mov	r2, r3
 8008490:	4651      	mov	r1, sl
 8008492:	9303      	str	r3, [sp, #12]
 8008494:	f000 fc0c 	bl	8008cb0 <memmove>
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	9b03      	ldr	r3, [sp, #12]
 800849c:	9801      	ldr	r0, [sp, #4]
 800849e:	441a      	add	r2, r3
 80084a0:	6022      	str	r2, [r4, #0]
 80084a2:	4621      	mov	r1, r4
 80084a4:	f7ff fcd2 	bl	8007e4c <_fflush_r>
 80084a8:	9b03      	ldr	r3, [sp, #12]
 80084aa:	2800      	cmp	r0, #0
 80084ac:	f47f af3c 	bne.w	8008328 <__sfvwrite_r+0x134>
 80084b0:	461f      	mov	r7, r3
 80084b2:	e766      	b.n	8008382 <__sfvwrite_r+0x18e>
 80084b4:	9801      	ldr	r0, [sp, #4]
 80084b6:	f000 ff73 	bl	80093a0 <_realloc_r>
 80084ba:	4683      	mov	fp, r0
 80084bc:	2800      	cmp	r0, #0
 80084be:	d1c7      	bne.n	8008450 <__sfvwrite_r+0x25c>
 80084c0:	9d01      	ldr	r5, [sp, #4]
 80084c2:	6921      	ldr	r1, [r4, #16]
 80084c4:	4628      	mov	r0, r5
 80084c6:	f7ff fdad 	bl	8008024 <_free_r>
 80084ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ce:	220c      	movs	r2, #12
 80084d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084d4:	602a      	str	r2, [r5, #0]
 80084d6:	e729      	b.n	800832c <__sfvwrite_r+0x138>
 80084d8:	2301      	movs	r3, #1
 80084da:	f109 0801 	add.w	r8, r9, #1
 80084de:	9302      	str	r3, [sp, #8]
 80084e0:	e736      	b.n	8008350 <__sfvwrite_r+0x15c>
 80084e2:	f04f 30ff 	mov.w	r0, #4294967295
 80084e6:	e6b8      	b.n	800825a <__sfvwrite_r+0x66>
 80084e8:	9a01      	ldr	r2, [sp, #4]
 80084ea:	230c      	movs	r3, #12
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084f2:	e71b      	b.n	800832c <__sfvwrite_r+0x138>
 80084f4:	7ffffc00 	.word	0x7ffffc00

080084f8 <_fwalk_reent>:
 80084f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084fc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8008500:	d01f      	beq.n	8008542 <_fwalk_reent+0x4a>
 8008502:	4688      	mov	r8, r1
 8008504:	4606      	mov	r6, r0
 8008506:	f04f 0900 	mov.w	r9, #0
 800850a:	687d      	ldr	r5, [r7, #4]
 800850c:	68bc      	ldr	r4, [r7, #8]
 800850e:	3d01      	subs	r5, #1
 8008510:	d411      	bmi.n	8008536 <_fwalk_reent+0x3e>
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	2b01      	cmp	r3, #1
 8008516:	f105 35ff 	add.w	r5, r5, #4294967295
 800851a:	d908      	bls.n	800852e <_fwalk_reent+0x36>
 800851c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8008520:	3301      	adds	r3, #1
 8008522:	4621      	mov	r1, r4
 8008524:	4630      	mov	r0, r6
 8008526:	d002      	beq.n	800852e <_fwalk_reent+0x36>
 8008528:	47c0      	blx	r8
 800852a:	ea49 0900 	orr.w	r9, r9, r0
 800852e:	1c6b      	adds	r3, r5, #1
 8008530:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8008534:	d1ed      	bne.n	8008512 <_fwalk_reent+0x1a>
 8008536:	683f      	ldr	r7, [r7, #0]
 8008538:	2f00      	cmp	r7, #0
 800853a:	d1e6      	bne.n	800850a <_fwalk_reent+0x12>
 800853c:	4648      	mov	r0, r9
 800853e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008542:	46b9      	mov	r9, r7
 8008544:	4648      	mov	r0, r9
 8008546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800854a:	bf00      	nop

0800854c <__locale_mb_cur_max>:
 800854c:	4b04      	ldr	r3, [pc, #16]	; (8008560 <__locale_mb_cur_max+0x14>)
 800854e:	4a05      	ldr	r2, [pc, #20]	; (8008564 <__locale_mb_cur_max+0x18>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008554:	2b00      	cmp	r3, #0
 8008556:	bf08      	it	eq
 8008558:	4613      	moveq	r3, r2
 800855a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800855e:	4770      	bx	lr
 8008560:	20000468 	.word	0x20000468
 8008564:	2000046c 	.word	0x2000046c

08008568 <_localeconv_r>:
 8008568:	4a04      	ldr	r2, [pc, #16]	; (800857c <_localeconv_r+0x14>)
 800856a:	4b05      	ldr	r3, [pc, #20]	; (8008580 <_localeconv_r+0x18>)
 800856c:	6812      	ldr	r2, [r2, #0]
 800856e:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8008570:	2800      	cmp	r0, #0
 8008572:	bf08      	it	eq
 8008574:	4618      	moveq	r0, r3
 8008576:	30f0      	adds	r0, #240	; 0xf0
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	20000468 	.word	0x20000468
 8008580:	2000046c 	.word	0x2000046c

08008584 <__swhatbuf_r>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	460d      	mov	r5, r1
 8008588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800858c:	2900      	cmp	r1, #0
 800858e:	b090      	sub	sp, #64	; 0x40
 8008590:	4614      	mov	r4, r2
 8008592:	461e      	mov	r6, r3
 8008594:	db14      	blt.n	80085c0 <__swhatbuf_r+0x3c>
 8008596:	aa01      	add	r2, sp, #4
 8008598:	f001 fb16 	bl	8009bc8 <_fstat_r>
 800859c:	2800      	cmp	r0, #0
 800859e:	db0f      	blt.n	80085c0 <__swhatbuf_r+0x3c>
 80085a0:	9a02      	ldr	r2, [sp, #8]
 80085a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085a6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 80085aa:	fab2 f282 	clz	r2, r2
 80085ae:	0952      	lsrs	r2, r2, #5
 80085b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80085b8:	6032      	str	r2, [r6, #0]
 80085ba:	6023      	str	r3, [r4, #0]
 80085bc:	b010      	add	sp, #64	; 0x40
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	89a8      	ldrh	r0, [r5, #12]
 80085c2:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80085c6:	b282      	uxth	r2, r0
 80085c8:	2000      	movs	r0, #0
 80085ca:	6030      	str	r0, [r6, #0]
 80085cc:	b11a      	cbz	r2, 80085d6 <__swhatbuf_r+0x52>
 80085ce:	2340      	movs	r3, #64	; 0x40
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	b010      	add	sp, #64	; 0x40
 80085d4:	bd70      	pop	{r4, r5, r6, pc}
 80085d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085da:	4610      	mov	r0, r2
 80085dc:	6023      	str	r3, [r4, #0]
 80085de:	b010      	add	sp, #64	; 0x40
 80085e0:	bd70      	pop	{r4, r5, r6, pc}
 80085e2:	bf00      	nop

080085e4 <__smakebuf_r>:
 80085e4:	898a      	ldrh	r2, [r1, #12]
 80085e6:	0792      	lsls	r2, r2, #30
 80085e8:	460b      	mov	r3, r1
 80085ea:	d506      	bpl.n	80085fa <__smakebuf_r+0x16>
 80085ec:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085f0:	2101      	movs	r1, #1
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	611a      	str	r2, [r3, #16]
 80085f6:	6159      	str	r1, [r3, #20]
 80085f8:	4770      	bx	lr
 80085fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085fc:	b083      	sub	sp, #12
 80085fe:	ab01      	add	r3, sp, #4
 8008600:	466a      	mov	r2, sp
 8008602:	460c      	mov	r4, r1
 8008604:	4605      	mov	r5, r0
 8008606:	f7ff ffbd 	bl	8008584 <__swhatbuf_r>
 800860a:	9900      	ldr	r1, [sp, #0]
 800860c:	4606      	mov	r6, r0
 800860e:	4628      	mov	r0, r5
 8008610:	f000 f82c 	bl	800866c <_malloc_r>
 8008614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008618:	b1d0      	cbz	r0, 8008650 <__smakebuf_r+0x6c>
 800861a:	9a01      	ldr	r2, [sp, #4]
 800861c:	4f12      	ldr	r7, [pc, #72]	; (8008668 <__smakebuf_r+0x84>)
 800861e:	9900      	ldr	r1, [sp, #0]
 8008620:	63ef      	str	r7, [r5, #60]	; 0x3c
 8008622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008626:	81a3      	strh	r3, [r4, #12]
 8008628:	6020      	str	r0, [r4, #0]
 800862a:	6120      	str	r0, [r4, #16]
 800862c:	6161      	str	r1, [r4, #20]
 800862e:	b91a      	cbnz	r2, 8008638 <__smakebuf_r+0x54>
 8008630:	4333      	orrs	r3, r6
 8008632:	81a3      	strh	r3, [r4, #12]
 8008634:	b003      	add	sp, #12
 8008636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008638:	4628      	mov	r0, r5
 800863a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800863e:	f001 fad7 	bl	8009bf0 <_isatty_r>
 8008642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008646:	2800      	cmp	r0, #0
 8008648:	d0f2      	beq.n	8008630 <__smakebuf_r+0x4c>
 800864a:	f043 0301 	orr.w	r3, r3, #1
 800864e:	e7ef      	b.n	8008630 <__smakebuf_r+0x4c>
 8008650:	059a      	lsls	r2, r3, #22
 8008652:	d4ef      	bmi.n	8008634 <__smakebuf_r+0x50>
 8008654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008658:	f043 0302 	orr.w	r3, r3, #2
 800865c:	2101      	movs	r1, #1
 800865e:	81a3      	strh	r3, [r4, #12]
 8008660:	6022      	str	r2, [r4, #0]
 8008662:	6122      	str	r2, [r4, #16]
 8008664:	6161      	str	r1, [r4, #20]
 8008666:	e7e5      	b.n	8008634 <__smakebuf_r+0x50>
 8008668:	08007e79 	.word	0x08007e79

0800866c <_malloc_r>:
 800866c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008670:	f101 050b 	add.w	r5, r1, #11
 8008674:	2d16      	cmp	r5, #22
 8008676:	b083      	sub	sp, #12
 8008678:	4606      	mov	r6, r0
 800867a:	f240 809f 	bls.w	80087bc <_malloc_r+0x150>
 800867e:	f035 0507 	bics.w	r5, r5, #7
 8008682:	f100 80bf 	bmi.w	8008804 <_malloc_r+0x198>
 8008686:	42a9      	cmp	r1, r5
 8008688:	f200 80bc 	bhi.w	8008804 <_malloc_r+0x198>
 800868c:	f000 fb74 	bl	8008d78 <__malloc_lock>
 8008690:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8008694:	f0c0 829c 	bcc.w	8008bd0 <_malloc_r+0x564>
 8008698:	0a6b      	lsrs	r3, r5, #9
 800869a:	f000 80ba 	beq.w	8008812 <_malloc_r+0x1a6>
 800869e:	2b04      	cmp	r3, #4
 80086a0:	f200 8183 	bhi.w	80089aa <_malloc_r+0x33e>
 80086a4:	09a8      	lsrs	r0, r5, #6
 80086a6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 80086aa:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80086ae:	3038      	adds	r0, #56	; 0x38
 80086b0:	4fc4      	ldr	r7, [pc, #784]	; (80089c4 <_malloc_r+0x358>)
 80086b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80086b6:	f1a3 0108 	sub.w	r1, r3, #8
 80086ba:	685c      	ldr	r4, [r3, #4]
 80086bc:	42a1      	cmp	r1, r4
 80086be:	d107      	bne.n	80086d0 <_malloc_r+0x64>
 80086c0:	e0ac      	b.n	800881c <_malloc_r+0x1b0>
 80086c2:	2a00      	cmp	r2, #0
 80086c4:	f280 80ac 	bge.w	8008820 <_malloc_r+0x1b4>
 80086c8:	68e4      	ldr	r4, [r4, #12]
 80086ca:	42a1      	cmp	r1, r4
 80086cc:	f000 80a6 	beq.w	800881c <_malloc_r+0x1b0>
 80086d0:	6863      	ldr	r3, [r4, #4]
 80086d2:	f023 0303 	bic.w	r3, r3, #3
 80086d6:	1b5a      	subs	r2, r3, r5
 80086d8:	2a0f      	cmp	r2, #15
 80086da:	ddf2      	ble.n	80086c2 <_malloc_r+0x56>
 80086dc:	49b9      	ldr	r1, [pc, #740]	; (80089c4 <_malloc_r+0x358>)
 80086de:	693c      	ldr	r4, [r7, #16]
 80086e0:	f101 0e08 	add.w	lr, r1, #8
 80086e4:	4574      	cmp	r4, lr
 80086e6:	f000 81b3 	beq.w	8008a50 <_malloc_r+0x3e4>
 80086ea:	6863      	ldr	r3, [r4, #4]
 80086ec:	f023 0303 	bic.w	r3, r3, #3
 80086f0:	1b5a      	subs	r2, r3, r5
 80086f2:	2a0f      	cmp	r2, #15
 80086f4:	f300 8199 	bgt.w	8008a2a <_malloc_r+0x3be>
 80086f8:	2a00      	cmp	r2, #0
 80086fa:	f8c1 e014 	str.w	lr, [r1, #20]
 80086fe:	f8c1 e010 	str.w	lr, [r1, #16]
 8008702:	f280 809e 	bge.w	8008842 <_malloc_r+0x1d6>
 8008706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800870a:	f080 8167 	bcs.w	80089dc <_malloc_r+0x370>
 800870e:	08db      	lsrs	r3, r3, #3
 8008710:	f103 0c01 	add.w	ip, r3, #1
 8008714:	2201      	movs	r2, #1
 8008716:	109b      	asrs	r3, r3, #2
 8008718:	fa02 f303 	lsl.w	r3, r2, r3
 800871c:	684a      	ldr	r2, [r1, #4]
 800871e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 8008722:	f8c4 8008 	str.w	r8, [r4, #8]
 8008726:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 800872a:	431a      	orrs	r2, r3
 800872c:	f1a9 0308 	sub.w	r3, r9, #8
 8008730:	60e3      	str	r3, [r4, #12]
 8008732:	604a      	str	r2, [r1, #4]
 8008734:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8008738:	f8c8 400c 	str.w	r4, [r8, #12]
 800873c:	1083      	asrs	r3, r0, #2
 800873e:	2401      	movs	r4, #1
 8008740:	409c      	lsls	r4, r3
 8008742:	4294      	cmp	r4, r2
 8008744:	f200 808a 	bhi.w	800885c <_malloc_r+0x1f0>
 8008748:	4214      	tst	r4, r2
 800874a:	d106      	bne.n	800875a <_malloc_r+0xee>
 800874c:	f020 0003 	bic.w	r0, r0, #3
 8008750:	0064      	lsls	r4, r4, #1
 8008752:	4214      	tst	r4, r2
 8008754:	f100 0004 	add.w	r0, r0, #4
 8008758:	d0fa      	beq.n	8008750 <_malloc_r+0xe4>
 800875a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800875e:	46cc      	mov	ip, r9
 8008760:	4680      	mov	r8, r0
 8008762:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8008766:	458c      	cmp	ip, r1
 8008768:	d107      	bne.n	800877a <_malloc_r+0x10e>
 800876a:	e173      	b.n	8008a54 <_malloc_r+0x3e8>
 800876c:	2a00      	cmp	r2, #0
 800876e:	f280 8181 	bge.w	8008a74 <_malloc_r+0x408>
 8008772:	68c9      	ldr	r1, [r1, #12]
 8008774:	458c      	cmp	ip, r1
 8008776:	f000 816d 	beq.w	8008a54 <_malloc_r+0x3e8>
 800877a:	684b      	ldr	r3, [r1, #4]
 800877c:	f023 0303 	bic.w	r3, r3, #3
 8008780:	1b5a      	subs	r2, r3, r5
 8008782:	2a0f      	cmp	r2, #15
 8008784:	ddf2      	ble.n	800876c <_malloc_r+0x100>
 8008786:	460c      	mov	r4, r1
 8008788:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800878c:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8008790:	194b      	adds	r3, r1, r5
 8008792:	f045 0501 	orr.w	r5, r5, #1
 8008796:	604d      	str	r5, [r1, #4]
 8008798:	f042 0101 	orr.w	r1, r2, #1
 800879c:	f8c8 c00c 	str.w	ip, [r8, #12]
 80087a0:	4630      	mov	r0, r6
 80087a2:	f8cc 8008 	str.w	r8, [ip, #8]
 80087a6:	617b      	str	r3, [r7, #20]
 80087a8:	613b      	str	r3, [r7, #16]
 80087aa:	f8c3 e00c 	str.w	lr, [r3, #12]
 80087ae:	f8c3 e008 	str.w	lr, [r3, #8]
 80087b2:	6059      	str	r1, [r3, #4]
 80087b4:	509a      	str	r2, [r3, r2]
 80087b6:	f000 fae1 	bl	8008d7c <__malloc_unlock>
 80087ba:	e01f      	b.n	80087fc <_malloc_r+0x190>
 80087bc:	2910      	cmp	r1, #16
 80087be:	d821      	bhi.n	8008804 <_malloc_r+0x198>
 80087c0:	f000 fada 	bl	8008d78 <__malloc_lock>
 80087c4:	2510      	movs	r5, #16
 80087c6:	2306      	movs	r3, #6
 80087c8:	2002      	movs	r0, #2
 80087ca:	4f7e      	ldr	r7, [pc, #504]	; (80089c4 <_malloc_r+0x358>)
 80087cc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80087d0:	f1a3 0208 	sub.w	r2, r3, #8
 80087d4:	685c      	ldr	r4, [r3, #4]
 80087d6:	4294      	cmp	r4, r2
 80087d8:	f000 8145 	beq.w	8008a66 <_malloc_r+0x3fa>
 80087dc:	6863      	ldr	r3, [r4, #4]
 80087de:	68e1      	ldr	r1, [r4, #12]
 80087e0:	68a5      	ldr	r5, [r4, #8]
 80087e2:	f023 0303 	bic.w	r3, r3, #3
 80087e6:	4423      	add	r3, r4
 80087e8:	4630      	mov	r0, r6
 80087ea:	685a      	ldr	r2, [r3, #4]
 80087ec:	60e9      	str	r1, [r5, #12]
 80087ee:	f042 0201 	orr.w	r2, r2, #1
 80087f2:	608d      	str	r5, [r1, #8]
 80087f4:	605a      	str	r2, [r3, #4]
 80087f6:	f000 fac1 	bl	8008d7c <__malloc_unlock>
 80087fa:	3408      	adds	r4, #8
 80087fc:	4620      	mov	r0, r4
 80087fe:	b003      	add	sp, #12
 8008800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008804:	2400      	movs	r4, #0
 8008806:	230c      	movs	r3, #12
 8008808:	4620      	mov	r0, r4
 800880a:	6033      	str	r3, [r6, #0]
 800880c:	b003      	add	sp, #12
 800880e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008812:	2380      	movs	r3, #128	; 0x80
 8008814:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8008818:	203f      	movs	r0, #63	; 0x3f
 800881a:	e749      	b.n	80086b0 <_malloc_r+0x44>
 800881c:	4670      	mov	r0, lr
 800881e:	e75d      	b.n	80086dc <_malloc_r+0x70>
 8008820:	4423      	add	r3, r4
 8008822:	68e1      	ldr	r1, [r4, #12]
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	68a5      	ldr	r5, [r4, #8]
 8008828:	f042 0201 	orr.w	r2, r2, #1
 800882c:	60e9      	str	r1, [r5, #12]
 800882e:	4630      	mov	r0, r6
 8008830:	608d      	str	r5, [r1, #8]
 8008832:	605a      	str	r2, [r3, #4]
 8008834:	f000 faa2 	bl	8008d7c <__malloc_unlock>
 8008838:	3408      	adds	r4, #8
 800883a:	4620      	mov	r0, r4
 800883c:	b003      	add	sp, #12
 800883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008842:	4423      	add	r3, r4
 8008844:	4630      	mov	r0, r6
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	f042 0201 	orr.w	r2, r2, #1
 800884c:	605a      	str	r2, [r3, #4]
 800884e:	f000 fa95 	bl	8008d7c <__malloc_unlock>
 8008852:	3408      	adds	r4, #8
 8008854:	4620      	mov	r0, r4
 8008856:	b003      	add	sp, #12
 8008858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885c:	68bc      	ldr	r4, [r7, #8]
 800885e:	6863      	ldr	r3, [r4, #4]
 8008860:	f023 0803 	bic.w	r8, r3, #3
 8008864:	45a8      	cmp	r8, r5
 8008866:	d304      	bcc.n	8008872 <_malloc_r+0x206>
 8008868:	ebc5 0308 	rsb	r3, r5, r8
 800886c:	2b0f      	cmp	r3, #15
 800886e:	f300 808c 	bgt.w	800898a <_malloc_r+0x31e>
 8008872:	4b55      	ldr	r3, [pc, #340]	; (80089c8 <_malloc_r+0x35c>)
 8008874:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80089d8 <_malloc_r+0x36c>
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	f8d9 3000 	ldr.w	r3, [r9]
 800887e:	3301      	adds	r3, #1
 8008880:	442a      	add	r2, r5
 8008882:	eb04 0a08 	add.w	sl, r4, r8
 8008886:	f000 8160 	beq.w	8008b4a <_malloc_r+0x4de>
 800888a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800888e:	320f      	adds	r2, #15
 8008890:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8008894:	f022 020f 	bic.w	r2, r2, #15
 8008898:	4611      	mov	r1, r2
 800889a:	4630      	mov	r0, r6
 800889c:	9201      	str	r2, [sp, #4]
 800889e:	f000 ff6f 	bl	8009780 <_sbrk_r>
 80088a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80088a6:	4683      	mov	fp, r0
 80088a8:	9a01      	ldr	r2, [sp, #4]
 80088aa:	f000 8158 	beq.w	8008b5e <_malloc_r+0x4f2>
 80088ae:	4582      	cmp	sl, r0
 80088b0:	f200 80fc 	bhi.w	8008aac <_malloc_r+0x440>
 80088b4:	4b45      	ldr	r3, [pc, #276]	; (80089cc <_malloc_r+0x360>)
 80088b6:	6819      	ldr	r1, [r3, #0]
 80088b8:	45da      	cmp	sl, fp
 80088ba:	4411      	add	r1, r2
 80088bc:	6019      	str	r1, [r3, #0]
 80088be:	f000 8153 	beq.w	8008b68 <_malloc_r+0x4fc>
 80088c2:	f8d9 0000 	ldr.w	r0, [r9]
 80088c6:	f8df e110 	ldr.w	lr, [pc, #272]	; 80089d8 <_malloc_r+0x36c>
 80088ca:	3001      	adds	r0, #1
 80088cc:	bf1b      	ittet	ne
 80088ce:	ebca 0a0b 	rsbne	sl, sl, fp
 80088d2:	4451      	addne	r1, sl
 80088d4:	f8ce b000 	streq.w	fp, [lr]
 80088d8:	6019      	strne	r1, [r3, #0]
 80088da:	f01b 0107 	ands.w	r1, fp, #7
 80088de:	f000 8117 	beq.w	8008b10 <_malloc_r+0x4a4>
 80088e2:	f1c1 0008 	rsb	r0, r1, #8
 80088e6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 80088ea:	4483      	add	fp, r0
 80088ec:	3108      	adds	r1, #8
 80088ee:	445a      	add	r2, fp
 80088f0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80088f4:	ebc2 0901 	rsb	r9, r2, r1
 80088f8:	4649      	mov	r1, r9
 80088fa:	4630      	mov	r0, r6
 80088fc:	9301      	str	r3, [sp, #4]
 80088fe:	f000 ff3f 	bl	8009780 <_sbrk_r>
 8008902:	1c43      	adds	r3, r0, #1
 8008904:	9b01      	ldr	r3, [sp, #4]
 8008906:	f000 813f 	beq.w	8008b88 <_malloc_r+0x51c>
 800890a:	ebcb 0200 	rsb	r2, fp, r0
 800890e:	444a      	add	r2, r9
 8008910:	f042 0201 	orr.w	r2, r2, #1
 8008914:	6819      	ldr	r1, [r3, #0]
 8008916:	f8c7 b008 	str.w	fp, [r7, #8]
 800891a:	4449      	add	r1, r9
 800891c:	42bc      	cmp	r4, r7
 800891e:	f8cb 2004 	str.w	r2, [fp, #4]
 8008922:	6019      	str	r1, [r3, #0]
 8008924:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80089cc <_malloc_r+0x360>
 8008928:	d016      	beq.n	8008958 <_malloc_r+0x2ec>
 800892a:	f1b8 0f0f 	cmp.w	r8, #15
 800892e:	f240 80fd 	bls.w	8008b2c <_malloc_r+0x4c0>
 8008932:	6862      	ldr	r2, [r4, #4]
 8008934:	f1a8 030c 	sub.w	r3, r8, #12
 8008938:	f023 0307 	bic.w	r3, r3, #7
 800893c:	18e0      	adds	r0, r4, r3
 800893e:	f002 0201 	and.w	r2, r2, #1
 8008942:	f04f 0e05 	mov.w	lr, #5
 8008946:	431a      	orrs	r2, r3
 8008948:	2b0f      	cmp	r3, #15
 800894a:	6062      	str	r2, [r4, #4]
 800894c:	f8c0 e004 	str.w	lr, [r0, #4]
 8008950:	f8c0 e008 	str.w	lr, [r0, #8]
 8008954:	f200 811c 	bhi.w	8008b90 <_malloc_r+0x524>
 8008958:	4b1d      	ldr	r3, [pc, #116]	; (80089d0 <_malloc_r+0x364>)
 800895a:	68bc      	ldr	r4, [r7, #8]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	4291      	cmp	r1, r2
 8008960:	bf88      	it	hi
 8008962:	6019      	strhi	r1, [r3, #0]
 8008964:	4b1b      	ldr	r3, [pc, #108]	; (80089d4 <_malloc_r+0x368>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	4291      	cmp	r1, r2
 800896a:	6862      	ldr	r2, [r4, #4]
 800896c:	bf88      	it	hi
 800896e:	6019      	strhi	r1, [r3, #0]
 8008970:	f022 0203 	bic.w	r2, r2, #3
 8008974:	4295      	cmp	r5, r2
 8008976:	eba2 0305 	sub.w	r3, r2, r5
 800897a:	d801      	bhi.n	8008980 <_malloc_r+0x314>
 800897c:	2b0f      	cmp	r3, #15
 800897e:	dc04      	bgt.n	800898a <_malloc_r+0x31e>
 8008980:	4630      	mov	r0, r6
 8008982:	f000 f9fb 	bl	8008d7c <__malloc_unlock>
 8008986:	2400      	movs	r4, #0
 8008988:	e738      	b.n	80087fc <_malloc_r+0x190>
 800898a:	1962      	adds	r2, r4, r5
 800898c:	f043 0301 	orr.w	r3, r3, #1
 8008990:	f045 0501 	orr.w	r5, r5, #1
 8008994:	6065      	str	r5, [r4, #4]
 8008996:	4630      	mov	r0, r6
 8008998:	60ba      	str	r2, [r7, #8]
 800899a:	6053      	str	r3, [r2, #4]
 800899c:	f000 f9ee 	bl	8008d7c <__malloc_unlock>
 80089a0:	3408      	adds	r4, #8
 80089a2:	4620      	mov	r0, r4
 80089a4:	b003      	add	sp, #12
 80089a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089aa:	2b14      	cmp	r3, #20
 80089ac:	d971      	bls.n	8008a92 <_malloc_r+0x426>
 80089ae:	2b54      	cmp	r3, #84	; 0x54
 80089b0:	f200 80a4 	bhi.w	8008afc <_malloc_r+0x490>
 80089b4:	0b28      	lsrs	r0, r5, #12
 80089b6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 80089ba:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80089be:	306e      	adds	r0, #110	; 0x6e
 80089c0:	e676      	b.n	80086b0 <_malloc_r+0x44>
 80089c2:	bf00      	nop
 80089c4:	200005d8 	.word	0x200005d8
 80089c8:	20000a54 	.word	0x20000a54
 80089cc:	20000a58 	.word	0x20000a58
 80089d0:	20000a50 	.word	0x20000a50
 80089d4:	20000a4c 	.word	0x20000a4c
 80089d8:	200009e4 	.word	0x200009e4
 80089dc:	0a5a      	lsrs	r2, r3, #9
 80089de:	2a04      	cmp	r2, #4
 80089e0:	d95e      	bls.n	8008aa0 <_malloc_r+0x434>
 80089e2:	2a14      	cmp	r2, #20
 80089e4:	f200 80b3 	bhi.w	8008b4e <_malloc_r+0x4e2>
 80089e8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 80089ec:	0049      	lsls	r1, r1, #1
 80089ee:	325b      	adds	r2, #91	; 0x5b
 80089f0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 80089f4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80089f8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8008bd8 <_malloc_r+0x56c>
 80089fc:	f1ac 0c08 	sub.w	ip, ip, #8
 8008a00:	458c      	cmp	ip, r1
 8008a02:	f000 8088 	beq.w	8008b16 <_malloc_r+0x4aa>
 8008a06:	684a      	ldr	r2, [r1, #4]
 8008a08:	f022 0203 	bic.w	r2, r2, #3
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d202      	bcs.n	8008a16 <_malloc_r+0x3aa>
 8008a10:	6889      	ldr	r1, [r1, #8]
 8008a12:	458c      	cmp	ip, r1
 8008a14:	d1f7      	bne.n	8008a06 <_malloc_r+0x39a>
 8008a16:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8008a20:	60a1      	str	r1, [r4, #8]
 8008a22:	f8cc 4008 	str.w	r4, [ip, #8]
 8008a26:	60cc      	str	r4, [r1, #12]
 8008a28:	e688      	b.n	800873c <_malloc_r+0xd0>
 8008a2a:	1963      	adds	r3, r4, r5
 8008a2c:	f042 0701 	orr.w	r7, r2, #1
 8008a30:	f045 0501 	orr.w	r5, r5, #1
 8008a34:	6065      	str	r5, [r4, #4]
 8008a36:	4630      	mov	r0, r6
 8008a38:	614b      	str	r3, [r1, #20]
 8008a3a:	610b      	str	r3, [r1, #16]
 8008a3c:	f8c3 e00c 	str.w	lr, [r3, #12]
 8008a40:	f8c3 e008 	str.w	lr, [r3, #8]
 8008a44:	605f      	str	r7, [r3, #4]
 8008a46:	509a      	str	r2, [r3, r2]
 8008a48:	3408      	adds	r4, #8
 8008a4a:	f000 f997 	bl	8008d7c <__malloc_unlock>
 8008a4e:	e6d5      	b.n	80087fc <_malloc_r+0x190>
 8008a50:	684a      	ldr	r2, [r1, #4]
 8008a52:	e673      	b.n	800873c <_malloc_r+0xd0>
 8008a54:	f108 0801 	add.w	r8, r8, #1
 8008a58:	f018 0f03 	tst.w	r8, #3
 8008a5c:	f10c 0c08 	add.w	ip, ip, #8
 8008a60:	f47f ae7f 	bne.w	8008762 <_malloc_r+0xf6>
 8008a64:	e030      	b.n	8008ac8 <_malloc_r+0x45c>
 8008a66:	68dc      	ldr	r4, [r3, #12]
 8008a68:	42a3      	cmp	r3, r4
 8008a6a:	bf08      	it	eq
 8008a6c:	3002      	addeq	r0, #2
 8008a6e:	f43f ae35 	beq.w	80086dc <_malloc_r+0x70>
 8008a72:	e6b3      	b.n	80087dc <_malloc_r+0x170>
 8008a74:	440b      	add	r3, r1
 8008a76:	460c      	mov	r4, r1
 8008a78:	685a      	ldr	r2, [r3, #4]
 8008a7a:	68c9      	ldr	r1, [r1, #12]
 8008a7c:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8008a80:	f042 0201 	orr.w	r2, r2, #1
 8008a84:	605a      	str	r2, [r3, #4]
 8008a86:	4630      	mov	r0, r6
 8008a88:	60e9      	str	r1, [r5, #12]
 8008a8a:	608d      	str	r5, [r1, #8]
 8008a8c:	f000 f976 	bl	8008d7c <__malloc_unlock>
 8008a90:	e6b4      	b.n	80087fc <_malloc_r+0x190>
 8008a92:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 8008a96:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 8008a9a:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8008a9e:	e607      	b.n	80086b0 <_malloc_r+0x44>
 8008aa0:	099a      	lsrs	r2, r3, #6
 8008aa2:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8008aa6:	0049      	lsls	r1, r1, #1
 8008aa8:	3238      	adds	r2, #56	; 0x38
 8008aaa:	e7a1      	b.n	80089f0 <_malloc_r+0x384>
 8008aac:	42bc      	cmp	r4, r7
 8008aae:	4b4a      	ldr	r3, [pc, #296]	; (8008bd8 <_malloc_r+0x56c>)
 8008ab0:	f43f af00 	beq.w	80088b4 <_malloc_r+0x248>
 8008ab4:	689c      	ldr	r4, [r3, #8]
 8008ab6:	6862      	ldr	r2, [r4, #4]
 8008ab8:	f022 0203 	bic.w	r2, r2, #3
 8008abc:	e75a      	b.n	8008974 <_malloc_r+0x308>
 8008abe:	f859 3908 	ldr.w	r3, [r9], #-8
 8008ac2:	4599      	cmp	r9, r3
 8008ac4:	f040 8082 	bne.w	8008bcc <_malloc_r+0x560>
 8008ac8:	f010 0f03 	tst.w	r0, #3
 8008acc:	f100 30ff 	add.w	r0, r0, #4294967295
 8008ad0:	d1f5      	bne.n	8008abe <_malloc_r+0x452>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	ea23 0304 	bic.w	r3, r3, r4
 8008ad8:	607b      	str	r3, [r7, #4]
 8008ada:	0064      	lsls	r4, r4, #1
 8008adc:	429c      	cmp	r4, r3
 8008ade:	f63f aebd 	bhi.w	800885c <_malloc_r+0x1f0>
 8008ae2:	2c00      	cmp	r4, #0
 8008ae4:	f43f aeba 	beq.w	800885c <_malloc_r+0x1f0>
 8008ae8:	421c      	tst	r4, r3
 8008aea:	4640      	mov	r0, r8
 8008aec:	f47f ae35 	bne.w	800875a <_malloc_r+0xee>
 8008af0:	0064      	lsls	r4, r4, #1
 8008af2:	421c      	tst	r4, r3
 8008af4:	f100 0004 	add.w	r0, r0, #4
 8008af8:	d0fa      	beq.n	8008af0 <_malloc_r+0x484>
 8008afa:	e62e      	b.n	800875a <_malloc_r+0xee>
 8008afc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008b00:	d818      	bhi.n	8008b34 <_malloc_r+0x4c8>
 8008b02:	0be8      	lsrs	r0, r5, #15
 8008b04:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 8008b08:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8008b0c:	3077      	adds	r0, #119	; 0x77
 8008b0e:	e5cf      	b.n	80086b0 <_malloc_r+0x44>
 8008b10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008b14:	e6eb      	b.n	80088ee <_malloc_r+0x282>
 8008b16:	2101      	movs	r1, #1
 8008b18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b1c:	1092      	asrs	r2, r2, #2
 8008b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8008b22:	431a      	orrs	r2, r3
 8008b24:	f8c8 2004 	str.w	r2, [r8, #4]
 8008b28:	4661      	mov	r1, ip
 8008b2a:	e777      	b.n	8008a1c <_malloc_r+0x3b0>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	f8cb 3004 	str.w	r3, [fp, #4]
 8008b32:	e725      	b.n	8008980 <_malloc_r+0x314>
 8008b34:	f240 5254 	movw	r2, #1364	; 0x554
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d820      	bhi.n	8008b7e <_malloc_r+0x512>
 8008b3c:	0ca8      	lsrs	r0, r5, #18
 8008b3e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 8008b42:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8008b46:	307c      	adds	r0, #124	; 0x7c
 8008b48:	e5b2      	b.n	80086b0 <_malloc_r+0x44>
 8008b4a:	3210      	adds	r2, #16
 8008b4c:	e6a4      	b.n	8008898 <_malloc_r+0x22c>
 8008b4e:	2a54      	cmp	r2, #84	; 0x54
 8008b50:	d826      	bhi.n	8008ba0 <_malloc_r+0x534>
 8008b52:	0b1a      	lsrs	r2, r3, #12
 8008b54:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8008b58:	0049      	lsls	r1, r1, #1
 8008b5a:	326e      	adds	r2, #110	; 0x6e
 8008b5c:	e748      	b.n	80089f0 <_malloc_r+0x384>
 8008b5e:	68bc      	ldr	r4, [r7, #8]
 8008b60:	6862      	ldr	r2, [r4, #4]
 8008b62:	f022 0203 	bic.w	r2, r2, #3
 8008b66:	e705      	b.n	8008974 <_malloc_r+0x308>
 8008b68:	f3ca 000b 	ubfx	r0, sl, #0, #12
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	f47f aea8 	bne.w	80088c2 <_malloc_r+0x256>
 8008b72:	4442      	add	r2, r8
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	f042 0201 	orr.w	r2, r2, #1
 8008b7a:	605a      	str	r2, [r3, #4]
 8008b7c:	e6ec      	b.n	8008958 <_malloc_r+0x2ec>
 8008b7e:	23fe      	movs	r3, #254	; 0xfe
 8008b80:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 8008b84:	207e      	movs	r0, #126	; 0x7e
 8008b86:	e593      	b.n	80086b0 <_malloc_r+0x44>
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f04f 0900 	mov.w	r9, #0
 8008b8e:	e6c1      	b.n	8008914 <_malloc_r+0x2a8>
 8008b90:	f104 0108 	add.w	r1, r4, #8
 8008b94:	4630      	mov	r0, r6
 8008b96:	f7ff fa45 	bl	8008024 <_free_r>
 8008b9a:	f8d9 1000 	ldr.w	r1, [r9]
 8008b9e:	e6db      	b.n	8008958 <_malloc_r+0x2ec>
 8008ba0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008ba4:	d805      	bhi.n	8008bb2 <_malloc_r+0x546>
 8008ba6:	0bda      	lsrs	r2, r3, #15
 8008ba8:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8008bac:	0049      	lsls	r1, r1, #1
 8008bae:	3277      	adds	r2, #119	; 0x77
 8008bb0:	e71e      	b.n	80089f0 <_malloc_r+0x384>
 8008bb2:	f240 5154 	movw	r1, #1364	; 0x554
 8008bb6:	428a      	cmp	r2, r1
 8008bb8:	d805      	bhi.n	8008bc6 <_malloc_r+0x55a>
 8008bba:	0c9a      	lsrs	r2, r3, #18
 8008bbc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8008bc0:	0049      	lsls	r1, r1, #1
 8008bc2:	327c      	adds	r2, #124	; 0x7c
 8008bc4:	e714      	b.n	80089f0 <_malloc_r+0x384>
 8008bc6:	21fe      	movs	r1, #254	; 0xfe
 8008bc8:	227e      	movs	r2, #126	; 0x7e
 8008bca:	e711      	b.n	80089f0 <_malloc_r+0x384>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	e784      	b.n	8008ada <_malloc_r+0x46e>
 8008bd0:	08e8      	lsrs	r0, r5, #3
 8008bd2:	1c43      	adds	r3, r0, #1
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	e5f8      	b.n	80087ca <_malloc_r+0x15e>
 8008bd8:	200005d8 	.word	0x200005d8

08008bdc <__ascii_mbtowc>:
 8008bdc:	b082      	sub	sp, #8
 8008bde:	b149      	cbz	r1, 8008bf4 <__ascii_mbtowc+0x18>
 8008be0:	b15a      	cbz	r2, 8008bfa <__ascii_mbtowc+0x1e>
 8008be2:	b16b      	cbz	r3, 8008c00 <__ascii_mbtowc+0x24>
 8008be4:	7813      	ldrb	r3, [r2, #0]
 8008be6:	600b      	str	r3, [r1, #0]
 8008be8:	7812      	ldrb	r2, [r2, #0]
 8008bea:	1c10      	adds	r0, r2, #0
 8008bec:	bf18      	it	ne
 8008bee:	2001      	movne	r0, #1
 8008bf0:	b002      	add	sp, #8
 8008bf2:	4770      	bx	lr
 8008bf4:	a901      	add	r1, sp, #4
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	d1f3      	bne.n	8008be2 <__ascii_mbtowc+0x6>
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	b002      	add	sp, #8
 8008bfe:	4770      	bx	lr
 8008c00:	f06f 0001 	mvn.w	r0, #1
 8008c04:	e7f4      	b.n	8008bf0 <__ascii_mbtowc+0x14>
 8008c06:	bf00      	nop
	...

08008c10 <memchr>:
 8008c10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008c14:	2a10      	cmp	r2, #16
 8008c16:	db2b      	blt.n	8008c70 <memchr+0x60>
 8008c18:	f010 0f07 	tst.w	r0, #7
 8008c1c:	d008      	beq.n	8008c30 <memchr+0x20>
 8008c1e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c22:	3a01      	subs	r2, #1
 8008c24:	428b      	cmp	r3, r1
 8008c26:	d02d      	beq.n	8008c84 <memchr+0x74>
 8008c28:	f010 0f07 	tst.w	r0, #7
 8008c2c:	b342      	cbz	r2, 8008c80 <memchr+0x70>
 8008c2e:	d1f6      	bne.n	8008c1e <memchr+0xe>
 8008c30:	b4f0      	push	{r4, r5, r6, r7}
 8008c32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008c36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8008c3a:	f022 0407 	bic.w	r4, r2, #7
 8008c3e:	f07f 0700 	mvns.w	r7, #0
 8008c42:	2300      	movs	r3, #0
 8008c44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008c48:	3c08      	subs	r4, #8
 8008c4a:	ea85 0501 	eor.w	r5, r5, r1
 8008c4e:	ea86 0601 	eor.w	r6, r6, r1
 8008c52:	fa85 f547 	uadd8	r5, r5, r7
 8008c56:	faa3 f587 	sel	r5, r3, r7
 8008c5a:	fa86 f647 	uadd8	r6, r6, r7
 8008c5e:	faa5 f687 	sel	r6, r5, r7
 8008c62:	b98e      	cbnz	r6, 8008c88 <memchr+0x78>
 8008c64:	d1ee      	bne.n	8008c44 <memchr+0x34>
 8008c66:	bcf0      	pop	{r4, r5, r6, r7}
 8008c68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008c6c:	f002 0207 	and.w	r2, r2, #7
 8008c70:	b132      	cbz	r2, 8008c80 <memchr+0x70>
 8008c72:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c76:	3a01      	subs	r2, #1
 8008c78:	ea83 0301 	eor.w	r3, r3, r1
 8008c7c:	b113      	cbz	r3, 8008c84 <memchr+0x74>
 8008c7e:	d1f8      	bne.n	8008c72 <memchr+0x62>
 8008c80:	2000      	movs	r0, #0
 8008c82:	4770      	bx	lr
 8008c84:	3801      	subs	r0, #1
 8008c86:	4770      	bx	lr
 8008c88:	2d00      	cmp	r5, #0
 8008c8a:	bf06      	itte	eq
 8008c8c:	4635      	moveq	r5, r6
 8008c8e:	3803      	subeq	r0, #3
 8008c90:	3807      	subne	r0, #7
 8008c92:	f015 0f01 	tst.w	r5, #1
 8008c96:	d107      	bne.n	8008ca8 <memchr+0x98>
 8008c98:	3001      	adds	r0, #1
 8008c9a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8008c9e:	bf02      	ittt	eq
 8008ca0:	3001      	addeq	r0, #1
 8008ca2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008ca6:	3001      	addeq	r0, #1
 8008ca8:	bcf0      	pop	{r4, r5, r6, r7}
 8008caa:	3801      	subs	r0, #1
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop

08008cb0 <memmove>:
 8008cb0:	4288      	cmp	r0, r1
 8008cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cb4:	d90d      	bls.n	8008cd2 <memmove+0x22>
 8008cb6:	188b      	adds	r3, r1, r2
 8008cb8:	4298      	cmp	r0, r3
 8008cba:	d20a      	bcs.n	8008cd2 <memmove+0x22>
 8008cbc:	1881      	adds	r1, r0, r2
 8008cbe:	2a00      	cmp	r2, #0
 8008cc0:	d051      	beq.n	8008d66 <memmove+0xb6>
 8008cc2:	1a9a      	subs	r2, r3, r2
 8008cc4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cc8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d1f9      	bne.n	8008cc4 <memmove+0x14>
 8008cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cd2:	2a0f      	cmp	r2, #15
 8008cd4:	d948      	bls.n	8008d68 <memmove+0xb8>
 8008cd6:	ea41 0300 	orr.w	r3, r1, r0
 8008cda:	079b      	lsls	r3, r3, #30
 8008cdc:	d146      	bne.n	8008d6c <memmove+0xbc>
 8008cde:	f100 0410 	add.w	r4, r0, #16
 8008ce2:	f101 0310 	add.w	r3, r1, #16
 8008ce6:	4615      	mov	r5, r2
 8008ce8:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8008cec:	f844 6c10 	str.w	r6, [r4, #-16]
 8008cf0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8008cf4:	f844 6c0c 	str.w	r6, [r4, #-12]
 8008cf8:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8008cfc:	f844 6c08 	str.w	r6, [r4, #-8]
 8008d00:	3d10      	subs	r5, #16
 8008d02:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8008d06:	f844 6c04 	str.w	r6, [r4, #-4]
 8008d0a:	2d0f      	cmp	r5, #15
 8008d0c:	f103 0310 	add.w	r3, r3, #16
 8008d10:	f104 0410 	add.w	r4, r4, #16
 8008d14:	d8e8      	bhi.n	8008ce8 <memmove+0x38>
 8008d16:	f1a2 0310 	sub.w	r3, r2, #16
 8008d1a:	f023 030f 	bic.w	r3, r3, #15
 8008d1e:	f002 0e0f 	and.w	lr, r2, #15
 8008d22:	3310      	adds	r3, #16
 8008d24:	f1be 0f03 	cmp.w	lr, #3
 8008d28:	4419      	add	r1, r3
 8008d2a:	4403      	add	r3, r0
 8008d2c:	d921      	bls.n	8008d72 <memmove+0xc2>
 8008d2e:	1f1e      	subs	r6, r3, #4
 8008d30:	460d      	mov	r5, r1
 8008d32:	4674      	mov	r4, lr
 8008d34:	3c04      	subs	r4, #4
 8008d36:	f855 7b04 	ldr.w	r7, [r5], #4
 8008d3a:	f846 7f04 	str.w	r7, [r6, #4]!
 8008d3e:	2c03      	cmp	r4, #3
 8008d40:	d8f8      	bhi.n	8008d34 <memmove+0x84>
 8008d42:	f1ae 0404 	sub.w	r4, lr, #4
 8008d46:	f024 0403 	bic.w	r4, r4, #3
 8008d4a:	3404      	adds	r4, #4
 8008d4c:	4423      	add	r3, r4
 8008d4e:	4421      	add	r1, r4
 8008d50:	f002 0203 	and.w	r2, r2, #3
 8008d54:	b162      	cbz	r2, 8008d70 <memmove+0xc0>
 8008d56:	3b01      	subs	r3, #1
 8008d58:	440a      	add	r2, r1
 8008d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d62:	428a      	cmp	r2, r1
 8008d64:	d1f9      	bne.n	8008d5a <memmove+0xaa>
 8008d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d68:	4603      	mov	r3, r0
 8008d6a:	e7f3      	b.n	8008d54 <memmove+0xa4>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	e7f2      	b.n	8008d56 <memmove+0xa6>
 8008d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d72:	4672      	mov	r2, lr
 8008d74:	e7ee      	b.n	8008d54 <memmove+0xa4>
 8008d76:	bf00      	nop

08008d78 <__malloc_lock>:
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop

08008d7c <__malloc_unlock>:
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop

08008d80 <_Balloc>:
 8008d80:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008d82:	b570      	push	{r4, r5, r6, lr}
 8008d84:	4605      	mov	r5, r0
 8008d86:	460c      	mov	r4, r1
 8008d88:	b14b      	cbz	r3, 8008d9e <_Balloc+0x1e>
 8008d8a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008d8e:	b180      	cbz	r0, 8008db2 <_Balloc+0x32>
 8008d90:	6802      	ldr	r2, [r0, #0]
 8008d92:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008d96:	2300      	movs	r3, #0
 8008d98:	6103      	str	r3, [r0, #16]
 8008d9a:	60c3      	str	r3, [r0, #12]
 8008d9c:	bd70      	pop	{r4, r5, r6, pc}
 8008d9e:	2221      	movs	r2, #33	; 0x21
 8008da0:	2104      	movs	r1, #4
 8008da2:	f000 fe2d 	bl	8009a00 <_calloc_r>
 8008da6:	64e8      	str	r0, [r5, #76]	; 0x4c
 8008da8:	4603      	mov	r3, r0
 8008daa:	2800      	cmp	r0, #0
 8008dac:	d1ed      	bne.n	8008d8a <_Balloc+0xa>
 8008dae:	2000      	movs	r0, #0
 8008db0:	bd70      	pop	{r4, r5, r6, pc}
 8008db2:	2101      	movs	r1, #1
 8008db4:	fa01 f604 	lsl.w	r6, r1, r4
 8008db8:	1d72      	adds	r2, r6, #5
 8008dba:	4628      	mov	r0, r5
 8008dbc:	0092      	lsls	r2, r2, #2
 8008dbe:	f000 fe1f 	bl	8009a00 <_calloc_r>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d0f3      	beq.n	8008dae <_Balloc+0x2e>
 8008dc6:	6044      	str	r4, [r0, #4]
 8008dc8:	6086      	str	r6, [r0, #8]
 8008dca:	e7e4      	b.n	8008d96 <_Balloc+0x16>

08008dcc <_Bfree>:
 8008dcc:	b131      	cbz	r1, 8008ddc <_Bfree+0x10>
 8008dce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008dd0:	684a      	ldr	r2, [r1, #4]
 8008dd2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008dd6:	6008      	str	r0, [r1, #0]
 8008dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop

08008de0 <__multadd>:
 8008de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008de2:	690c      	ldr	r4, [r1, #16]
 8008de4:	b083      	sub	sp, #12
 8008de6:	460d      	mov	r5, r1
 8008de8:	4606      	mov	r6, r0
 8008dea:	f101 0e14 	add.w	lr, r1, #20
 8008dee:	2700      	movs	r7, #0
 8008df0:	f8de 0000 	ldr.w	r0, [lr]
 8008df4:	b281      	uxth	r1, r0
 8008df6:	fb02 3101 	mla	r1, r2, r1, r3
 8008dfa:	0c0b      	lsrs	r3, r1, #16
 8008dfc:	0c00      	lsrs	r0, r0, #16
 8008dfe:	fb02 3300 	mla	r3, r2, r0, r3
 8008e02:	b289      	uxth	r1, r1
 8008e04:	3701      	adds	r7, #1
 8008e06:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e0a:	42bc      	cmp	r4, r7
 8008e0c:	f84e 1b04 	str.w	r1, [lr], #4
 8008e10:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8008e14:	dcec      	bgt.n	8008df0 <__multadd+0x10>
 8008e16:	b13b      	cbz	r3, 8008e28 <__multadd+0x48>
 8008e18:	68aa      	ldr	r2, [r5, #8]
 8008e1a:	4294      	cmp	r4, r2
 8008e1c:	da07      	bge.n	8008e2e <__multadd+0x4e>
 8008e1e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8008e22:	3401      	adds	r4, #1
 8008e24:	6153      	str	r3, [r2, #20]
 8008e26:	612c      	str	r4, [r5, #16]
 8008e28:	4628      	mov	r0, r5
 8008e2a:	b003      	add	sp, #12
 8008e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e2e:	6869      	ldr	r1, [r5, #4]
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	3101      	adds	r1, #1
 8008e34:	4630      	mov	r0, r6
 8008e36:	f7ff ffa3 	bl	8008d80 <_Balloc>
 8008e3a:	692a      	ldr	r2, [r5, #16]
 8008e3c:	3202      	adds	r2, #2
 8008e3e:	f105 010c 	add.w	r1, r5, #12
 8008e42:	4607      	mov	r7, r0
 8008e44:	0092      	lsls	r2, r2, #2
 8008e46:	300c      	adds	r0, #12
 8008e48:	f7fa fda0 	bl	800398c <memcpy>
 8008e4c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8008e4e:	6869      	ldr	r1, [r5, #4]
 8008e50:	9b01      	ldr	r3, [sp, #4]
 8008e52:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8008e56:	6028      	str	r0, [r5, #0]
 8008e58:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8008e5c:	463d      	mov	r5, r7
 8008e5e:	e7de      	b.n	8008e1e <__multadd+0x3e>

08008e60 <__hi0bits>:
 8008e60:	0c03      	lsrs	r3, r0, #16
 8008e62:	041b      	lsls	r3, r3, #16
 8008e64:	b9b3      	cbnz	r3, 8008e94 <__hi0bits+0x34>
 8008e66:	0400      	lsls	r0, r0, #16
 8008e68:	2310      	movs	r3, #16
 8008e6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e6e:	bf04      	itt	eq
 8008e70:	0200      	lsleq	r0, r0, #8
 8008e72:	3308      	addeq	r3, #8
 8008e74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e78:	bf04      	itt	eq
 8008e7a:	0100      	lsleq	r0, r0, #4
 8008e7c:	3304      	addeq	r3, #4
 8008e7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e82:	bf04      	itt	eq
 8008e84:	0080      	lsleq	r0, r0, #2
 8008e86:	3302      	addeq	r3, #2
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	db07      	blt.n	8008e9c <__hi0bits+0x3c>
 8008e8c:	0042      	lsls	r2, r0, #1
 8008e8e:	d403      	bmi.n	8008e98 <__hi0bits+0x38>
 8008e90:	2020      	movs	r0, #32
 8008e92:	4770      	bx	lr
 8008e94:	2300      	movs	r3, #0
 8008e96:	e7e8      	b.n	8008e6a <__hi0bits+0xa>
 8008e98:	1c58      	adds	r0, r3, #1
 8008e9a:	4770      	bx	lr
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	4770      	bx	lr

08008ea0 <__lo0bits>:
 8008ea0:	6803      	ldr	r3, [r0, #0]
 8008ea2:	f013 0207 	ands.w	r2, r3, #7
 8008ea6:	d007      	beq.n	8008eb8 <__lo0bits+0x18>
 8008ea8:	07d9      	lsls	r1, r3, #31
 8008eaa:	d420      	bmi.n	8008eee <__lo0bits+0x4e>
 8008eac:	079a      	lsls	r2, r3, #30
 8008eae:	d420      	bmi.n	8008ef2 <__lo0bits+0x52>
 8008eb0:	089b      	lsrs	r3, r3, #2
 8008eb2:	6003      	str	r3, [r0, #0]
 8008eb4:	2002      	movs	r0, #2
 8008eb6:	4770      	bx	lr
 8008eb8:	b299      	uxth	r1, r3
 8008eba:	b909      	cbnz	r1, 8008ec0 <__lo0bits+0x20>
 8008ebc:	0c1b      	lsrs	r3, r3, #16
 8008ebe:	2210      	movs	r2, #16
 8008ec0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008ec4:	bf04      	itt	eq
 8008ec6:	0a1b      	lsreq	r3, r3, #8
 8008ec8:	3208      	addeq	r2, #8
 8008eca:	0719      	lsls	r1, r3, #28
 8008ecc:	bf04      	itt	eq
 8008ece:	091b      	lsreq	r3, r3, #4
 8008ed0:	3204      	addeq	r2, #4
 8008ed2:	0799      	lsls	r1, r3, #30
 8008ed4:	bf04      	itt	eq
 8008ed6:	089b      	lsreq	r3, r3, #2
 8008ed8:	3202      	addeq	r2, #2
 8008eda:	07d9      	lsls	r1, r3, #31
 8008edc:	d404      	bmi.n	8008ee8 <__lo0bits+0x48>
 8008ede:	085b      	lsrs	r3, r3, #1
 8008ee0:	d101      	bne.n	8008ee6 <__lo0bits+0x46>
 8008ee2:	2020      	movs	r0, #32
 8008ee4:	4770      	bx	lr
 8008ee6:	3201      	adds	r2, #1
 8008ee8:	6003      	str	r3, [r0, #0]
 8008eea:	4610      	mov	r0, r2
 8008eec:	4770      	bx	lr
 8008eee:	2000      	movs	r0, #0
 8008ef0:	4770      	bx	lr
 8008ef2:	085b      	lsrs	r3, r3, #1
 8008ef4:	6003      	str	r3, [r0, #0]
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop

08008efc <__i2b>:
 8008efc:	b510      	push	{r4, lr}
 8008efe:	460c      	mov	r4, r1
 8008f00:	2101      	movs	r1, #1
 8008f02:	f7ff ff3d 	bl	8008d80 <_Balloc>
 8008f06:	2201      	movs	r2, #1
 8008f08:	6144      	str	r4, [r0, #20]
 8008f0a:	6102      	str	r2, [r0, #16]
 8008f0c:	bd10      	pop	{r4, pc}
 8008f0e:	bf00      	nop

08008f10 <__multiply>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	690d      	ldr	r5, [r1, #16]
 8008f16:	6917      	ldr	r7, [r2, #16]
 8008f18:	42bd      	cmp	r5, r7
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	4616      	mov	r6, r2
 8008f20:	da04      	bge.n	8008f2c <__multiply+0x1c>
 8008f22:	462a      	mov	r2, r5
 8008f24:	4634      	mov	r4, r6
 8008f26:	463d      	mov	r5, r7
 8008f28:	460e      	mov	r6, r1
 8008f2a:	4617      	mov	r7, r2
 8008f2c:	68a3      	ldr	r3, [r4, #8]
 8008f2e:	6861      	ldr	r1, [r4, #4]
 8008f30:	eb05 0807 	add.w	r8, r5, r7
 8008f34:	4598      	cmp	r8, r3
 8008f36:	bfc8      	it	gt
 8008f38:	3101      	addgt	r1, #1
 8008f3a:	f7ff ff21 	bl	8008d80 <_Balloc>
 8008f3e:	f100 0c14 	add.w	ip, r0, #20
 8008f42:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8008f46:	45cc      	cmp	ip, r9
 8008f48:	9000      	str	r0, [sp, #0]
 8008f4a:	d205      	bcs.n	8008f58 <__multiply+0x48>
 8008f4c:	4663      	mov	r3, ip
 8008f4e:	2100      	movs	r1, #0
 8008f50:	f843 1b04 	str.w	r1, [r3], #4
 8008f54:	4599      	cmp	r9, r3
 8008f56:	d8fb      	bhi.n	8008f50 <__multiply+0x40>
 8008f58:	f106 0214 	add.w	r2, r6, #20
 8008f5c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8008f60:	f104 0314 	add.w	r3, r4, #20
 8008f64:	4552      	cmp	r2, sl
 8008f66:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 8008f6a:	d254      	bcs.n	8009016 <__multiply+0x106>
 8008f6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f70:	4699      	mov	r9, r3
 8008f72:	f852 3b04 	ldr.w	r3, [r2], #4
 8008f76:	fa1f fb83 	uxth.w	fp, r3
 8008f7a:	f1bb 0f00 	cmp.w	fp, #0
 8008f7e:	d020      	beq.n	8008fc2 <__multiply+0xb2>
 8008f80:	2000      	movs	r0, #0
 8008f82:	464f      	mov	r7, r9
 8008f84:	4666      	mov	r6, ip
 8008f86:	4605      	mov	r5, r0
 8008f88:	e000      	b.n	8008f8c <__multiply+0x7c>
 8008f8a:	461e      	mov	r6, r3
 8008f8c:	f857 4b04 	ldr.w	r4, [r7], #4
 8008f90:	6830      	ldr	r0, [r6, #0]
 8008f92:	b2a1      	uxth	r1, r4
 8008f94:	b283      	uxth	r3, r0
 8008f96:	fb0b 3101 	mla	r1, fp, r1, r3
 8008f9a:	0c24      	lsrs	r4, r4, #16
 8008f9c:	0c00      	lsrs	r0, r0, #16
 8008f9e:	194b      	adds	r3, r1, r5
 8008fa0:	fb0b 0004 	mla	r0, fp, r4, r0
 8008fa4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8008fa8:	b299      	uxth	r1, r3
 8008faa:	4633      	mov	r3, r6
 8008fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008fb0:	45be      	cmp	lr, r7
 8008fb2:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8008fb6:	f843 1b04 	str.w	r1, [r3], #4
 8008fba:	d8e6      	bhi.n	8008f8a <__multiply+0x7a>
 8008fbc:	6075      	str	r5, [r6, #4]
 8008fbe:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8008fc2:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8008fc6:	d020      	beq.n	800900a <__multiply+0xfa>
 8008fc8:	f8dc 3000 	ldr.w	r3, [ip]
 8008fcc:	4667      	mov	r7, ip
 8008fce:	4618      	mov	r0, r3
 8008fd0:	464d      	mov	r5, r9
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	e000      	b.n	8008fd8 <__multiply+0xc8>
 8008fd6:	4637      	mov	r7, r6
 8008fd8:	882c      	ldrh	r4, [r5, #0]
 8008fda:	0c00      	lsrs	r0, r0, #16
 8008fdc:	fb0b 0004 	mla	r0, fp, r4, r0
 8008fe0:	4401      	add	r1, r0
 8008fe2:	b29c      	uxth	r4, r3
 8008fe4:	463e      	mov	r6, r7
 8008fe6:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8008fea:	f846 3b04 	str.w	r3, [r6], #4
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f855 4b04 	ldr.w	r4, [r5], #4
 8008ff4:	b283      	uxth	r3, r0
 8008ff6:	0c24      	lsrs	r4, r4, #16
 8008ff8:	fb0b 3404 	mla	r4, fp, r4, r3
 8008ffc:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8009000:	45ae      	cmp	lr, r5
 8009002:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8009006:	d8e6      	bhi.n	8008fd6 <__multiply+0xc6>
 8009008:	607b      	str	r3, [r7, #4]
 800900a:	4592      	cmp	sl, r2
 800900c:	f10c 0c04 	add.w	ip, ip, #4
 8009010:	d8af      	bhi.n	8008f72 <__multiply+0x62>
 8009012:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009016:	f1b8 0f00 	cmp.w	r8, #0
 800901a:	dd0b      	ble.n	8009034 <__multiply+0x124>
 800901c:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8009020:	f1a9 0904 	sub.w	r9, r9, #4
 8009024:	b11b      	cbz	r3, 800902e <__multiply+0x11e>
 8009026:	e005      	b.n	8009034 <__multiply+0x124>
 8009028:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 800902c:	b913      	cbnz	r3, 8009034 <__multiply+0x124>
 800902e:	f1b8 0801 	subs.w	r8, r8, #1
 8009032:	d1f9      	bne.n	8009028 <__multiply+0x118>
 8009034:	9800      	ldr	r0, [sp, #0]
 8009036:	f8c0 8010 	str.w	r8, [r0, #16]
 800903a:	b003      	add	sp, #12
 800903c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009040 <__pow5mult>:
 8009040:	f012 0303 	ands.w	r3, r2, #3
 8009044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009048:	4614      	mov	r4, r2
 800904a:	4607      	mov	r7, r0
 800904c:	d12e      	bne.n	80090ac <__pow5mult+0x6c>
 800904e:	460e      	mov	r6, r1
 8009050:	10a4      	asrs	r4, r4, #2
 8009052:	d01c      	beq.n	800908e <__pow5mult+0x4e>
 8009054:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8009056:	b395      	cbz	r5, 80090be <__pow5mult+0x7e>
 8009058:	07e3      	lsls	r3, r4, #31
 800905a:	f04f 0800 	mov.w	r8, #0
 800905e:	d406      	bmi.n	800906e <__pow5mult+0x2e>
 8009060:	1064      	asrs	r4, r4, #1
 8009062:	d014      	beq.n	800908e <__pow5mult+0x4e>
 8009064:	6828      	ldr	r0, [r5, #0]
 8009066:	b1a8      	cbz	r0, 8009094 <__pow5mult+0x54>
 8009068:	4605      	mov	r5, r0
 800906a:	07e3      	lsls	r3, r4, #31
 800906c:	d5f8      	bpl.n	8009060 <__pow5mult+0x20>
 800906e:	462a      	mov	r2, r5
 8009070:	4631      	mov	r1, r6
 8009072:	4638      	mov	r0, r7
 8009074:	f7ff ff4c 	bl	8008f10 <__multiply>
 8009078:	b1b6      	cbz	r6, 80090a8 <__pow5mult+0x68>
 800907a:	6872      	ldr	r2, [r6, #4]
 800907c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800907e:	1064      	asrs	r4, r4, #1
 8009080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009084:	6031      	str	r1, [r6, #0]
 8009086:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800908a:	4606      	mov	r6, r0
 800908c:	d1ea      	bne.n	8009064 <__pow5mult+0x24>
 800908e:	4630      	mov	r0, r6
 8009090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009094:	462a      	mov	r2, r5
 8009096:	4629      	mov	r1, r5
 8009098:	4638      	mov	r0, r7
 800909a:	f7ff ff39 	bl	8008f10 <__multiply>
 800909e:	6028      	str	r0, [r5, #0]
 80090a0:	f8c0 8000 	str.w	r8, [r0]
 80090a4:	4605      	mov	r5, r0
 80090a6:	e7e0      	b.n	800906a <__pow5mult+0x2a>
 80090a8:	4606      	mov	r6, r0
 80090aa:	e7d9      	b.n	8009060 <__pow5mult+0x20>
 80090ac:	1e5a      	subs	r2, r3, #1
 80090ae:	4d0b      	ldr	r5, [pc, #44]	; (80090dc <__pow5mult+0x9c>)
 80090b0:	2300      	movs	r3, #0
 80090b2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80090b6:	f7ff fe93 	bl	8008de0 <__multadd>
 80090ba:	4606      	mov	r6, r0
 80090bc:	e7c8      	b.n	8009050 <__pow5mult+0x10>
 80090be:	2101      	movs	r1, #1
 80090c0:	4638      	mov	r0, r7
 80090c2:	f7ff fe5d 	bl	8008d80 <_Balloc>
 80090c6:	f240 2171 	movw	r1, #625	; 0x271
 80090ca:	2201      	movs	r2, #1
 80090cc:	2300      	movs	r3, #0
 80090ce:	6141      	str	r1, [r0, #20]
 80090d0:	6102      	str	r2, [r0, #16]
 80090d2:	4605      	mov	r5, r0
 80090d4:	64b8      	str	r0, [r7, #72]	; 0x48
 80090d6:	6003      	str	r3, [r0, #0]
 80090d8:	e7be      	b.n	8009058 <__pow5mult+0x18>
 80090da:	bf00      	nop
 80090dc:	0800a4c8 	.word	0x0800a4c8

080090e0 <__lshift>:
 80090e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e4:	4691      	mov	r9, r2
 80090e6:	690a      	ldr	r2, [r1, #16]
 80090e8:	688b      	ldr	r3, [r1, #8]
 80090ea:	ea4f 1469 	mov.w	r4, r9, asr #5
 80090ee:	eb04 0802 	add.w	r8, r4, r2
 80090f2:	f108 0501 	add.w	r5, r8, #1
 80090f6:	429d      	cmp	r5, r3
 80090f8:	460e      	mov	r6, r1
 80090fa:	4682      	mov	sl, r0
 80090fc:	6849      	ldr	r1, [r1, #4]
 80090fe:	dd04      	ble.n	800910a <__lshift+0x2a>
 8009100:	005b      	lsls	r3, r3, #1
 8009102:	429d      	cmp	r5, r3
 8009104:	f101 0101 	add.w	r1, r1, #1
 8009108:	dcfa      	bgt.n	8009100 <__lshift+0x20>
 800910a:	4650      	mov	r0, sl
 800910c:	f7ff fe38 	bl	8008d80 <_Balloc>
 8009110:	2c00      	cmp	r4, #0
 8009112:	f100 0214 	add.w	r2, r0, #20
 8009116:	dd38      	ble.n	800918a <__lshift+0xaa>
 8009118:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 800911c:	2100      	movs	r1, #0
 800911e:	f842 1b04 	str.w	r1, [r2], #4
 8009122:	4293      	cmp	r3, r2
 8009124:	d1fb      	bne.n	800911e <__lshift+0x3e>
 8009126:	6934      	ldr	r4, [r6, #16]
 8009128:	f106 0114 	add.w	r1, r6, #20
 800912c:	f019 091f 	ands.w	r9, r9, #31
 8009130:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8009134:	d021      	beq.n	800917a <__lshift+0x9a>
 8009136:	f1c9 0220 	rsb	r2, r9, #32
 800913a:	2400      	movs	r4, #0
 800913c:	680f      	ldr	r7, [r1, #0]
 800913e:	fa07 fc09 	lsl.w	ip, r7, r9
 8009142:	ea4c 0404 	orr.w	r4, ip, r4
 8009146:	469c      	mov	ip, r3
 8009148:	f843 4b04 	str.w	r4, [r3], #4
 800914c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009150:	458e      	cmp	lr, r1
 8009152:	fa24 f402 	lsr.w	r4, r4, r2
 8009156:	d8f1      	bhi.n	800913c <__lshift+0x5c>
 8009158:	f8cc 4004 	str.w	r4, [ip, #4]
 800915c:	b10c      	cbz	r4, 8009162 <__lshift+0x82>
 800915e:	f108 0502 	add.w	r5, r8, #2
 8009162:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8009166:	6872      	ldr	r2, [r6, #4]
 8009168:	3d01      	subs	r5, #1
 800916a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800916e:	6105      	str	r5, [r0, #16]
 8009170:	6031      	str	r1, [r6, #0]
 8009172:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8009176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800917a:	3b04      	subs	r3, #4
 800917c:	f851 2b04 	ldr.w	r2, [r1], #4
 8009180:	f843 2f04 	str.w	r2, [r3, #4]!
 8009184:	458e      	cmp	lr, r1
 8009186:	d8f9      	bhi.n	800917c <__lshift+0x9c>
 8009188:	e7eb      	b.n	8009162 <__lshift+0x82>
 800918a:	4613      	mov	r3, r2
 800918c:	e7cb      	b.n	8009126 <__lshift+0x46>
 800918e:	bf00      	nop

08009190 <__mcmp>:
 8009190:	6902      	ldr	r2, [r0, #16]
 8009192:	690b      	ldr	r3, [r1, #16]
 8009194:	1ad2      	subs	r2, r2, r3
 8009196:	d113      	bne.n	80091c0 <__mcmp+0x30>
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	3014      	adds	r0, #20
 800919c:	3114      	adds	r1, #20
 800919e:	4419      	add	r1, r3
 80091a0:	b410      	push	{r4}
 80091a2:	4403      	add	r3, r0
 80091a4:	e001      	b.n	80091aa <__mcmp+0x1a>
 80091a6:	4298      	cmp	r0, r3
 80091a8:	d20c      	bcs.n	80091c4 <__mcmp+0x34>
 80091aa:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80091ae:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80091b2:	4294      	cmp	r4, r2
 80091b4:	d0f7      	beq.n	80091a6 <__mcmp+0x16>
 80091b6:	d309      	bcc.n	80091cc <__mcmp+0x3c>
 80091b8:	2001      	movs	r0, #1
 80091ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	4610      	mov	r0, r2
 80091c2:	4770      	bx	lr
 80091c4:	2000      	movs	r0, #0
 80091c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	f04f 30ff 	mov.w	r0, #4294967295
 80091d0:	e7f3      	b.n	80091ba <__mcmp+0x2a>
 80091d2:	bf00      	nop

080091d4 <__mdiff>:
 80091d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d8:	690b      	ldr	r3, [r1, #16]
 80091da:	460f      	mov	r7, r1
 80091dc:	6911      	ldr	r1, [r2, #16]
 80091de:	1a5b      	subs	r3, r3, r1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	4690      	mov	r8, r2
 80091e4:	d117      	bne.n	8009216 <__mdiff+0x42>
 80091e6:	0089      	lsls	r1, r1, #2
 80091e8:	f107 0214 	add.w	r2, r7, #20
 80091ec:	f108 0514 	add.w	r5, r8, #20
 80091f0:	1853      	adds	r3, r2, r1
 80091f2:	4429      	add	r1, r5
 80091f4:	e001      	b.n	80091fa <__mdiff+0x26>
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d25e      	bcs.n	80092b8 <__mdiff+0xe4>
 80091fa:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 80091fe:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009202:	42a6      	cmp	r6, r4
 8009204:	d0f7      	beq.n	80091f6 <__mdiff+0x22>
 8009206:	d260      	bcs.n	80092ca <__mdiff+0xf6>
 8009208:	463b      	mov	r3, r7
 800920a:	4614      	mov	r4, r2
 800920c:	4647      	mov	r7, r8
 800920e:	f04f 0901 	mov.w	r9, #1
 8009212:	4698      	mov	r8, r3
 8009214:	e006      	b.n	8009224 <__mdiff+0x50>
 8009216:	db5d      	blt.n	80092d4 <__mdiff+0x100>
 8009218:	f107 0514 	add.w	r5, r7, #20
 800921c:	f102 0414 	add.w	r4, r2, #20
 8009220:	f04f 0900 	mov.w	r9, #0
 8009224:	6879      	ldr	r1, [r7, #4]
 8009226:	f7ff fdab 	bl	8008d80 <_Balloc>
 800922a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800922e:	693e      	ldr	r6, [r7, #16]
 8009230:	f8c0 900c 	str.w	r9, [r0, #12]
 8009234:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8009238:	46a6      	mov	lr, r4
 800923a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800923e:	f100 0414 	add.w	r4, r0, #20
 8009242:	2300      	movs	r3, #0
 8009244:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009248:	f855 8b04 	ldr.w	r8, [r5], #4
 800924c:	b28a      	uxth	r2, r1
 800924e:	fa13 f388 	uxtah	r3, r3, r8
 8009252:	0c09      	lsrs	r1, r1, #16
 8009254:	1a9a      	subs	r2, r3, r2
 8009256:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 800925a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800925e:	b292      	uxth	r2, r2
 8009260:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009264:	45f4      	cmp	ip, lr
 8009266:	f844 2b04 	str.w	r2, [r4], #4
 800926a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800926e:	d8e9      	bhi.n	8009244 <__mdiff+0x70>
 8009270:	42af      	cmp	r7, r5
 8009272:	d917      	bls.n	80092a4 <__mdiff+0xd0>
 8009274:	46a4      	mov	ip, r4
 8009276:	4629      	mov	r1, r5
 8009278:	f851 eb04 	ldr.w	lr, [r1], #4
 800927c:	fa13 f28e 	uxtah	r2, r3, lr
 8009280:	1413      	asrs	r3, r2, #16
 8009282:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 8009286:	b292      	uxth	r2, r2
 8009288:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800928c:	428f      	cmp	r7, r1
 800928e:	f84c 2b04 	str.w	r2, [ip], #4
 8009292:	ea4f 4323 	mov.w	r3, r3, asr #16
 8009296:	d8ef      	bhi.n	8009278 <__mdiff+0xa4>
 8009298:	43ed      	mvns	r5, r5
 800929a:	443d      	add	r5, r7
 800929c:	f025 0503 	bic.w	r5, r5, #3
 80092a0:	3504      	adds	r5, #4
 80092a2:	442c      	add	r4, r5
 80092a4:	3c04      	subs	r4, #4
 80092a6:	b922      	cbnz	r2, 80092b2 <__mdiff+0xde>
 80092a8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 80092ac:	3e01      	subs	r6, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d0fa      	beq.n	80092a8 <__mdiff+0xd4>
 80092b2:	6106      	str	r6, [r0, #16]
 80092b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092b8:	2100      	movs	r1, #0
 80092ba:	f7ff fd61 	bl	8008d80 <_Balloc>
 80092be:	2201      	movs	r2, #1
 80092c0:	2300      	movs	r3, #0
 80092c2:	6102      	str	r2, [r0, #16]
 80092c4:	6143      	str	r3, [r0, #20]
 80092c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ca:	462c      	mov	r4, r5
 80092cc:	f04f 0900 	mov.w	r9, #0
 80092d0:	4615      	mov	r5, r2
 80092d2:	e7a7      	b.n	8009224 <__mdiff+0x50>
 80092d4:	463b      	mov	r3, r7
 80092d6:	f107 0414 	add.w	r4, r7, #20
 80092da:	f108 0514 	add.w	r5, r8, #20
 80092de:	4647      	mov	r7, r8
 80092e0:	f04f 0901 	mov.w	r9, #1
 80092e4:	4698      	mov	r8, r3
 80092e6:	e79d      	b.n	8009224 <__mdiff+0x50>

080092e8 <__d2b>:
 80092e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092ec:	b083      	sub	sp, #12
 80092ee:	2101      	movs	r1, #1
 80092f0:	461c      	mov	r4, r3
 80092f2:	f3c3 550a 	ubfx	r5, r3, #20, #11
 80092f6:	4617      	mov	r7, r2
 80092f8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80092fa:	f7ff fd41 	bl	8008d80 <_Balloc>
 80092fe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009302:	4681      	mov	r9, r0
 8009304:	b10d      	cbz	r5, 800930a <__d2b+0x22>
 8009306:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800930a:	9401      	str	r4, [sp, #4]
 800930c:	b31f      	cbz	r7, 8009356 <__d2b+0x6e>
 800930e:	a802      	add	r0, sp, #8
 8009310:	f840 7d08 	str.w	r7, [r0, #-8]!
 8009314:	f7ff fdc4 	bl	8008ea0 <__lo0bits>
 8009318:	2800      	cmp	r0, #0
 800931a:	d135      	bne.n	8009388 <__d2b+0xa0>
 800931c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8009320:	f8c9 2014 	str.w	r2, [r9, #20]
 8009324:	2b00      	cmp	r3, #0
 8009326:	bf0c      	ite	eq
 8009328:	2101      	moveq	r1, #1
 800932a:	2102      	movne	r1, #2
 800932c:	f8c9 3018 	str.w	r3, [r9, #24]
 8009330:	f8c9 1010 	str.w	r1, [r9, #16]
 8009334:	b9dd      	cbnz	r5, 800936e <__d2b+0x86>
 8009336:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 800933a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800933e:	6030      	str	r0, [r6, #0]
 8009340:	6918      	ldr	r0, [r3, #16]
 8009342:	f7ff fd8d 	bl	8008e60 <__hi0bits>
 8009346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009348:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800934c:	6018      	str	r0, [r3, #0]
 800934e:	4648      	mov	r0, r9
 8009350:	b003      	add	sp, #12
 8009352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009356:	a801      	add	r0, sp, #4
 8009358:	f7ff fda2 	bl	8008ea0 <__lo0bits>
 800935c:	9b01      	ldr	r3, [sp, #4]
 800935e:	f8c9 3014 	str.w	r3, [r9, #20]
 8009362:	2101      	movs	r1, #1
 8009364:	3020      	adds	r0, #32
 8009366:	f8c9 1010 	str.w	r1, [r9, #16]
 800936a:	2d00      	cmp	r5, #0
 800936c:	d0e3      	beq.n	8009336 <__d2b+0x4e>
 800936e:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 8009372:	eb08 0300 	add.w	r3, r8, r0
 8009376:	6033      	str	r3, [r6, #0]
 8009378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800937a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800937e:	6018      	str	r0, [r3, #0]
 8009380:	4648      	mov	r0, r9
 8009382:	b003      	add	sp, #12
 8009384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009388:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800938c:	f1c0 0120 	rsb	r1, r0, #32
 8009390:	fa03 f101 	lsl.w	r1, r3, r1
 8009394:	430a      	orrs	r2, r1
 8009396:	40c3      	lsrs	r3, r0
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	f8c9 2014 	str.w	r2, [r9, #20]
 800939e:	e7c1      	b.n	8009324 <__d2b+0x3c>

080093a0 <_realloc_r>:
 80093a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a4:	4617      	mov	r7, r2
 80093a6:	b083      	sub	sp, #12
 80093a8:	2900      	cmp	r1, #0
 80093aa:	f000 80c1 	beq.w	8009530 <_realloc_r+0x190>
 80093ae:	460e      	mov	r6, r1
 80093b0:	4681      	mov	r9, r0
 80093b2:	f107 050b 	add.w	r5, r7, #11
 80093b6:	f7ff fcdf 	bl	8008d78 <__malloc_lock>
 80093ba:	f856 ec04 	ldr.w	lr, [r6, #-4]
 80093be:	2d16      	cmp	r5, #22
 80093c0:	f02e 0403 	bic.w	r4, lr, #3
 80093c4:	f1a6 0808 	sub.w	r8, r6, #8
 80093c8:	d840      	bhi.n	800944c <_realloc_r+0xac>
 80093ca:	2210      	movs	r2, #16
 80093cc:	4615      	mov	r5, r2
 80093ce:	42af      	cmp	r7, r5
 80093d0:	d841      	bhi.n	8009456 <_realloc_r+0xb6>
 80093d2:	4294      	cmp	r4, r2
 80093d4:	da75      	bge.n	80094c2 <_realloc_r+0x122>
 80093d6:	4bc9      	ldr	r3, [pc, #804]	; (80096fc <_realloc_r+0x35c>)
 80093d8:	6899      	ldr	r1, [r3, #8]
 80093da:	eb08 0004 	add.w	r0, r8, r4
 80093de:	4288      	cmp	r0, r1
 80093e0:	6841      	ldr	r1, [r0, #4]
 80093e2:	f000 80d9 	beq.w	8009598 <_realloc_r+0x1f8>
 80093e6:	f021 0301 	bic.w	r3, r1, #1
 80093ea:	4403      	add	r3, r0
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	07db      	lsls	r3, r3, #31
 80093f0:	d57d      	bpl.n	80094ee <_realloc_r+0x14e>
 80093f2:	f01e 0f01 	tst.w	lr, #1
 80093f6:	d035      	beq.n	8009464 <_realloc_r+0xc4>
 80093f8:	4639      	mov	r1, r7
 80093fa:	4648      	mov	r0, r9
 80093fc:	f7ff f936 	bl	800866c <_malloc_r>
 8009400:	4607      	mov	r7, r0
 8009402:	b1e0      	cbz	r0, 800943e <_realloc_r+0x9e>
 8009404:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009408:	f023 0301 	bic.w	r3, r3, #1
 800940c:	4443      	add	r3, r8
 800940e:	f1a0 0208 	sub.w	r2, r0, #8
 8009412:	429a      	cmp	r2, r3
 8009414:	f000 8144 	beq.w	80096a0 <_realloc_r+0x300>
 8009418:	1f22      	subs	r2, r4, #4
 800941a:	2a24      	cmp	r2, #36	; 0x24
 800941c:	f200 8131 	bhi.w	8009682 <_realloc_r+0x2e2>
 8009420:	2a13      	cmp	r2, #19
 8009422:	f200 8104 	bhi.w	800962e <_realloc_r+0x28e>
 8009426:	4603      	mov	r3, r0
 8009428:	4632      	mov	r2, r6
 800942a:	6811      	ldr	r1, [r2, #0]
 800942c:	6019      	str	r1, [r3, #0]
 800942e:	6851      	ldr	r1, [r2, #4]
 8009430:	6059      	str	r1, [r3, #4]
 8009432:	6892      	ldr	r2, [r2, #8]
 8009434:	609a      	str	r2, [r3, #8]
 8009436:	4631      	mov	r1, r6
 8009438:	4648      	mov	r0, r9
 800943a:	f7fe fdf3 	bl	8008024 <_free_r>
 800943e:	4648      	mov	r0, r9
 8009440:	f7ff fc9c 	bl	8008d7c <__malloc_unlock>
 8009444:	4638      	mov	r0, r7
 8009446:	b003      	add	sp, #12
 8009448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944c:	f025 0507 	bic.w	r5, r5, #7
 8009450:	2d00      	cmp	r5, #0
 8009452:	462a      	mov	r2, r5
 8009454:	dabb      	bge.n	80093ce <_realloc_r+0x2e>
 8009456:	230c      	movs	r3, #12
 8009458:	2000      	movs	r0, #0
 800945a:	f8c9 3000 	str.w	r3, [r9]
 800945e:	b003      	add	sp, #12
 8009460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009464:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009468:	ebc3 0a08 	rsb	sl, r3, r8
 800946c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009470:	f023 0c03 	bic.w	ip, r3, #3
 8009474:	eb04 030c 	add.w	r3, r4, ip
 8009478:	4293      	cmp	r3, r2
 800947a:	dbbd      	blt.n	80093f8 <_realloc_r+0x58>
 800947c:	4657      	mov	r7, sl
 800947e:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009482:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009486:	1f22      	subs	r2, r4, #4
 8009488:	2a24      	cmp	r2, #36	; 0x24
 800948a:	60c1      	str	r1, [r0, #12]
 800948c:	6088      	str	r0, [r1, #8]
 800948e:	f200 8117 	bhi.w	80096c0 <_realloc_r+0x320>
 8009492:	2a13      	cmp	r2, #19
 8009494:	f240 8112 	bls.w	80096bc <_realloc_r+0x31c>
 8009498:	6831      	ldr	r1, [r6, #0]
 800949a:	f8ca 1008 	str.w	r1, [sl, #8]
 800949e:	6871      	ldr	r1, [r6, #4]
 80094a0:	f8ca 100c 	str.w	r1, [sl, #12]
 80094a4:	2a1b      	cmp	r2, #27
 80094a6:	f200 812b 	bhi.w	8009700 <_realloc_r+0x360>
 80094aa:	3608      	adds	r6, #8
 80094ac:	f10a 0210 	add.w	r2, sl, #16
 80094b0:	6831      	ldr	r1, [r6, #0]
 80094b2:	6011      	str	r1, [r2, #0]
 80094b4:	6871      	ldr	r1, [r6, #4]
 80094b6:	6051      	str	r1, [r2, #4]
 80094b8:	68b1      	ldr	r1, [r6, #8]
 80094ba:	6091      	str	r1, [r2, #8]
 80094bc:	463e      	mov	r6, r7
 80094be:	461c      	mov	r4, r3
 80094c0:	46d0      	mov	r8, sl
 80094c2:	1b63      	subs	r3, r4, r5
 80094c4:	2b0f      	cmp	r3, #15
 80094c6:	d81d      	bhi.n	8009504 <_realloc_r+0x164>
 80094c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	4323      	orrs	r3, r4
 80094d2:	4444      	add	r4, r8
 80094d4:	f8c8 3004 	str.w	r3, [r8, #4]
 80094d8:	6863      	ldr	r3, [r4, #4]
 80094da:	f043 0301 	orr.w	r3, r3, #1
 80094de:	6063      	str	r3, [r4, #4]
 80094e0:	4648      	mov	r0, r9
 80094e2:	f7ff fc4b 	bl	8008d7c <__malloc_unlock>
 80094e6:	4630      	mov	r0, r6
 80094e8:	b003      	add	sp, #12
 80094ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ee:	f021 0103 	bic.w	r1, r1, #3
 80094f2:	4421      	add	r1, r4
 80094f4:	4291      	cmp	r1, r2
 80094f6:	db21      	blt.n	800953c <_realloc_r+0x19c>
 80094f8:	68c3      	ldr	r3, [r0, #12]
 80094fa:	6882      	ldr	r2, [r0, #8]
 80094fc:	460c      	mov	r4, r1
 80094fe:	60d3      	str	r3, [r2, #12]
 8009500:	609a      	str	r2, [r3, #8]
 8009502:	e7de      	b.n	80094c2 <_realloc_r+0x122>
 8009504:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009508:	eb08 0105 	add.w	r1, r8, r5
 800950c:	f002 0201 	and.w	r2, r2, #1
 8009510:	4315      	orrs	r5, r2
 8009512:	f043 0201 	orr.w	r2, r3, #1
 8009516:	440b      	add	r3, r1
 8009518:	f8c8 5004 	str.w	r5, [r8, #4]
 800951c:	604a      	str	r2, [r1, #4]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	f042 0201 	orr.w	r2, r2, #1
 8009524:	3108      	adds	r1, #8
 8009526:	605a      	str	r2, [r3, #4]
 8009528:	4648      	mov	r0, r9
 800952a:	f7fe fd7b 	bl	8008024 <_free_r>
 800952e:	e7d7      	b.n	80094e0 <_realloc_r+0x140>
 8009530:	4611      	mov	r1, r2
 8009532:	b003      	add	sp, #12
 8009534:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009538:	f7ff b898 	b.w	800866c <_malloc_r>
 800953c:	f01e 0f01 	tst.w	lr, #1
 8009540:	f47f af5a 	bne.w	80093f8 <_realloc_r+0x58>
 8009544:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009548:	ebc3 0a08 	rsb	sl, r3, r8
 800954c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009550:	f023 0c03 	bic.w	ip, r3, #3
 8009554:	eb01 0e0c 	add.w	lr, r1, ip
 8009558:	4596      	cmp	lr, r2
 800955a:	db8b      	blt.n	8009474 <_realloc_r+0xd4>
 800955c:	68c3      	ldr	r3, [r0, #12]
 800955e:	6882      	ldr	r2, [r0, #8]
 8009560:	4657      	mov	r7, sl
 8009562:	60d3      	str	r3, [r2, #12]
 8009564:	609a      	str	r2, [r3, #8]
 8009566:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800956a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800956e:	60cb      	str	r3, [r1, #12]
 8009570:	1f22      	subs	r2, r4, #4
 8009572:	2a24      	cmp	r2, #36	; 0x24
 8009574:	6099      	str	r1, [r3, #8]
 8009576:	f200 8099 	bhi.w	80096ac <_realloc_r+0x30c>
 800957a:	2a13      	cmp	r2, #19
 800957c:	d962      	bls.n	8009644 <_realloc_r+0x2a4>
 800957e:	6833      	ldr	r3, [r6, #0]
 8009580:	f8ca 3008 	str.w	r3, [sl, #8]
 8009584:	6873      	ldr	r3, [r6, #4]
 8009586:	f8ca 300c 	str.w	r3, [sl, #12]
 800958a:	2a1b      	cmp	r2, #27
 800958c:	f200 80a0 	bhi.w	80096d0 <_realloc_r+0x330>
 8009590:	3608      	adds	r6, #8
 8009592:	f10a 0310 	add.w	r3, sl, #16
 8009596:	e056      	b.n	8009646 <_realloc_r+0x2a6>
 8009598:	f021 0b03 	bic.w	fp, r1, #3
 800959c:	44a3      	add	fp, r4
 800959e:	f105 0010 	add.w	r0, r5, #16
 80095a2:	4583      	cmp	fp, r0
 80095a4:	da59      	bge.n	800965a <_realloc_r+0x2ba>
 80095a6:	f01e 0f01 	tst.w	lr, #1
 80095aa:	f47f af25 	bne.w	80093f8 <_realloc_r+0x58>
 80095ae:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80095b2:	ebc1 0a08 	rsb	sl, r1, r8
 80095b6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80095ba:	f021 0c03 	bic.w	ip, r1, #3
 80095be:	44e3      	add	fp, ip
 80095c0:	4558      	cmp	r0, fp
 80095c2:	f73f af57 	bgt.w	8009474 <_realloc_r+0xd4>
 80095c6:	4657      	mov	r7, sl
 80095c8:	f8da 100c 	ldr.w	r1, [sl, #12]
 80095cc:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80095d0:	1f22      	subs	r2, r4, #4
 80095d2:	2a24      	cmp	r2, #36	; 0x24
 80095d4:	60c1      	str	r1, [r0, #12]
 80095d6:	6088      	str	r0, [r1, #8]
 80095d8:	f200 80b4 	bhi.w	8009744 <_realloc_r+0x3a4>
 80095dc:	2a13      	cmp	r2, #19
 80095de:	f240 80a5 	bls.w	800972c <_realloc_r+0x38c>
 80095e2:	6831      	ldr	r1, [r6, #0]
 80095e4:	f8ca 1008 	str.w	r1, [sl, #8]
 80095e8:	6871      	ldr	r1, [r6, #4]
 80095ea:	f8ca 100c 	str.w	r1, [sl, #12]
 80095ee:	2a1b      	cmp	r2, #27
 80095f0:	f200 80af 	bhi.w	8009752 <_realloc_r+0x3b2>
 80095f4:	3608      	adds	r6, #8
 80095f6:	f10a 0210 	add.w	r2, sl, #16
 80095fa:	6831      	ldr	r1, [r6, #0]
 80095fc:	6011      	str	r1, [r2, #0]
 80095fe:	6871      	ldr	r1, [r6, #4]
 8009600:	6051      	str	r1, [r2, #4]
 8009602:	68b1      	ldr	r1, [r6, #8]
 8009604:	6091      	str	r1, [r2, #8]
 8009606:	eb0a 0105 	add.w	r1, sl, r5
 800960a:	ebc5 020b 	rsb	r2, r5, fp
 800960e:	f042 0201 	orr.w	r2, r2, #1
 8009612:	6099      	str	r1, [r3, #8]
 8009614:	604a      	str	r2, [r1, #4]
 8009616:	f8da 3004 	ldr.w	r3, [sl, #4]
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	431d      	orrs	r5, r3
 8009620:	4648      	mov	r0, r9
 8009622:	f8ca 5004 	str.w	r5, [sl, #4]
 8009626:	f7ff fba9 	bl	8008d7c <__malloc_unlock>
 800962a:	4638      	mov	r0, r7
 800962c:	e75c      	b.n	80094e8 <_realloc_r+0x148>
 800962e:	6833      	ldr	r3, [r6, #0]
 8009630:	6003      	str	r3, [r0, #0]
 8009632:	6873      	ldr	r3, [r6, #4]
 8009634:	6043      	str	r3, [r0, #4]
 8009636:	2a1b      	cmp	r2, #27
 8009638:	d827      	bhi.n	800968a <_realloc_r+0x2ea>
 800963a:	f100 0308 	add.w	r3, r0, #8
 800963e:	f106 0208 	add.w	r2, r6, #8
 8009642:	e6f2      	b.n	800942a <_realloc_r+0x8a>
 8009644:	463b      	mov	r3, r7
 8009646:	6832      	ldr	r2, [r6, #0]
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	6872      	ldr	r2, [r6, #4]
 800964c:	605a      	str	r2, [r3, #4]
 800964e:	68b2      	ldr	r2, [r6, #8]
 8009650:	609a      	str	r2, [r3, #8]
 8009652:	463e      	mov	r6, r7
 8009654:	4674      	mov	r4, lr
 8009656:	46d0      	mov	r8, sl
 8009658:	e733      	b.n	80094c2 <_realloc_r+0x122>
 800965a:	eb08 0105 	add.w	r1, r8, r5
 800965e:	ebc5 0b0b 	rsb	fp, r5, fp
 8009662:	f04b 0201 	orr.w	r2, fp, #1
 8009666:	6099      	str	r1, [r3, #8]
 8009668:	604a      	str	r2, [r1, #4]
 800966a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	431d      	orrs	r5, r3
 8009674:	4648      	mov	r0, r9
 8009676:	f846 5c04 	str.w	r5, [r6, #-4]
 800967a:	f7ff fb7f 	bl	8008d7c <__malloc_unlock>
 800967e:	4630      	mov	r0, r6
 8009680:	e732      	b.n	80094e8 <_realloc_r+0x148>
 8009682:	4631      	mov	r1, r6
 8009684:	f7ff fb14 	bl	8008cb0 <memmove>
 8009688:	e6d5      	b.n	8009436 <_realloc_r+0x96>
 800968a:	68b3      	ldr	r3, [r6, #8]
 800968c:	6083      	str	r3, [r0, #8]
 800968e:	68f3      	ldr	r3, [r6, #12]
 8009690:	60c3      	str	r3, [r0, #12]
 8009692:	2a24      	cmp	r2, #36	; 0x24
 8009694:	d028      	beq.n	80096e8 <_realloc_r+0x348>
 8009696:	f100 0310 	add.w	r3, r0, #16
 800969a:	f106 0210 	add.w	r2, r6, #16
 800969e:	e6c4      	b.n	800942a <_realloc_r+0x8a>
 80096a0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80096a4:	f023 0303 	bic.w	r3, r3, #3
 80096a8:	441c      	add	r4, r3
 80096aa:	e70a      	b.n	80094c2 <_realloc_r+0x122>
 80096ac:	4631      	mov	r1, r6
 80096ae:	4638      	mov	r0, r7
 80096b0:	4674      	mov	r4, lr
 80096b2:	46d0      	mov	r8, sl
 80096b4:	f7ff fafc 	bl	8008cb0 <memmove>
 80096b8:	463e      	mov	r6, r7
 80096ba:	e702      	b.n	80094c2 <_realloc_r+0x122>
 80096bc:	463a      	mov	r2, r7
 80096be:	e6f7      	b.n	80094b0 <_realloc_r+0x110>
 80096c0:	4631      	mov	r1, r6
 80096c2:	4638      	mov	r0, r7
 80096c4:	461c      	mov	r4, r3
 80096c6:	46d0      	mov	r8, sl
 80096c8:	f7ff faf2 	bl	8008cb0 <memmove>
 80096cc:	463e      	mov	r6, r7
 80096ce:	e6f8      	b.n	80094c2 <_realloc_r+0x122>
 80096d0:	68b3      	ldr	r3, [r6, #8]
 80096d2:	f8ca 3010 	str.w	r3, [sl, #16]
 80096d6:	68f3      	ldr	r3, [r6, #12]
 80096d8:	f8ca 3014 	str.w	r3, [sl, #20]
 80096dc:	2a24      	cmp	r2, #36	; 0x24
 80096de:	d01b      	beq.n	8009718 <_realloc_r+0x378>
 80096e0:	3610      	adds	r6, #16
 80096e2:	f10a 0318 	add.w	r3, sl, #24
 80096e6:	e7ae      	b.n	8009646 <_realloc_r+0x2a6>
 80096e8:	6933      	ldr	r3, [r6, #16]
 80096ea:	6103      	str	r3, [r0, #16]
 80096ec:	6973      	ldr	r3, [r6, #20]
 80096ee:	6143      	str	r3, [r0, #20]
 80096f0:	f106 0218 	add.w	r2, r6, #24
 80096f4:	f100 0318 	add.w	r3, r0, #24
 80096f8:	e697      	b.n	800942a <_realloc_r+0x8a>
 80096fa:	bf00      	nop
 80096fc:	200005d8 	.word	0x200005d8
 8009700:	68b1      	ldr	r1, [r6, #8]
 8009702:	f8ca 1010 	str.w	r1, [sl, #16]
 8009706:	68f1      	ldr	r1, [r6, #12]
 8009708:	f8ca 1014 	str.w	r1, [sl, #20]
 800970c:	2a24      	cmp	r2, #36	; 0x24
 800970e:	d00f      	beq.n	8009730 <_realloc_r+0x390>
 8009710:	3610      	adds	r6, #16
 8009712:	f10a 0218 	add.w	r2, sl, #24
 8009716:	e6cb      	b.n	80094b0 <_realloc_r+0x110>
 8009718:	6933      	ldr	r3, [r6, #16]
 800971a:	f8ca 3018 	str.w	r3, [sl, #24]
 800971e:	6973      	ldr	r3, [r6, #20]
 8009720:	f8ca 301c 	str.w	r3, [sl, #28]
 8009724:	3618      	adds	r6, #24
 8009726:	f10a 0320 	add.w	r3, sl, #32
 800972a:	e78c      	b.n	8009646 <_realloc_r+0x2a6>
 800972c:	463a      	mov	r2, r7
 800972e:	e764      	b.n	80095fa <_realloc_r+0x25a>
 8009730:	6932      	ldr	r2, [r6, #16]
 8009732:	f8ca 2018 	str.w	r2, [sl, #24]
 8009736:	6972      	ldr	r2, [r6, #20]
 8009738:	f8ca 201c 	str.w	r2, [sl, #28]
 800973c:	3618      	adds	r6, #24
 800973e:	f10a 0220 	add.w	r2, sl, #32
 8009742:	e6b5      	b.n	80094b0 <_realloc_r+0x110>
 8009744:	4631      	mov	r1, r6
 8009746:	4638      	mov	r0, r7
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	f7ff fab1 	bl	8008cb0 <memmove>
 800974e:	9b01      	ldr	r3, [sp, #4]
 8009750:	e759      	b.n	8009606 <_realloc_r+0x266>
 8009752:	68b1      	ldr	r1, [r6, #8]
 8009754:	f8ca 1010 	str.w	r1, [sl, #16]
 8009758:	68f1      	ldr	r1, [r6, #12]
 800975a:	f8ca 1014 	str.w	r1, [sl, #20]
 800975e:	2a24      	cmp	r2, #36	; 0x24
 8009760:	d003      	beq.n	800976a <_realloc_r+0x3ca>
 8009762:	3610      	adds	r6, #16
 8009764:	f10a 0218 	add.w	r2, sl, #24
 8009768:	e747      	b.n	80095fa <_realloc_r+0x25a>
 800976a:	6932      	ldr	r2, [r6, #16]
 800976c:	f8ca 2018 	str.w	r2, [sl, #24]
 8009770:	6972      	ldr	r2, [r6, #20]
 8009772:	f8ca 201c 	str.w	r2, [sl, #28]
 8009776:	3618      	adds	r6, #24
 8009778:	f10a 0220 	add.w	r2, sl, #32
 800977c:	e73d      	b.n	80095fa <_realloc_r+0x25a>
 800977e:	bf00      	nop

08009780 <_sbrk_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4c07      	ldr	r4, [pc, #28]	; (80097a0 <_sbrk_r+0x20>)
 8009784:	2300      	movs	r3, #0
 8009786:	4605      	mov	r5, r0
 8009788:	4608      	mov	r0, r1
 800978a:	6023      	str	r3, [r4, #0]
 800978c:	f7f8 fada 	bl	8001d44 <_sbrk>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d000      	beq.n	8009796 <_sbrk_r+0x16>
 8009794:	bd38      	pop	{r3, r4, r5, pc}
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d0fb      	beq.n	8009794 <_sbrk_r+0x14>
 800979c:	602b      	str	r3, [r5, #0]
 800979e:	bd38      	pop	{r3, r4, r5, pc}
 80097a0:	20000aa4 	.word	0x20000aa4

080097a4 <__sread>:
 80097a4:	b510      	push	{r4, lr}
 80097a6:	460c      	mov	r4, r1
 80097a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ac:	f000 fa48 	bl	8009c40 <_read_r>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	db03      	blt.n	80097bc <__sread+0x18>
 80097b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80097b6:	4403      	add	r3, r0
 80097b8:	6523      	str	r3, [r4, #80]	; 0x50
 80097ba:	bd10      	pop	{r4, pc}
 80097bc:	89a3      	ldrh	r3, [r4, #12]
 80097be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097c2:	81a3      	strh	r3, [r4, #12]
 80097c4:	bd10      	pop	{r4, pc}
 80097c6:	bf00      	nop

080097c8 <__swrite>:
 80097c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097cc:	4616      	mov	r6, r2
 80097ce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097d2:	461f      	mov	r7, r3
 80097d4:	05d3      	lsls	r3, r2, #23
 80097d6:	460c      	mov	r4, r1
 80097d8:	4605      	mov	r5, r0
 80097da:	d507      	bpl.n	80097ec <__swrite+0x24>
 80097dc:	2200      	movs	r2, #0
 80097de:	2302      	movs	r3, #2
 80097e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e4:	f000 fa16 	bl	8009c14 <_lseek_r>
 80097e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80097f4:	81a2      	strh	r2, [r4, #12]
 80097f6:	463b      	mov	r3, r7
 80097f8:	4632      	mov	r2, r6
 80097fa:	4628      	mov	r0, r5
 80097fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009800:	f000 b8e8 	b.w	80099d4 <_write_r>

08009804 <__sseek>:
 8009804:	b510      	push	{r4, lr}
 8009806:	460c      	mov	r4, r1
 8009808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800980c:	f000 fa02 	bl	8009c14 <_lseek_r>
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	1c42      	adds	r2, r0, #1
 8009814:	bf0e      	itee	eq
 8009816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800981a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800981e:	6520      	strne	r0, [r4, #80]	; 0x50
 8009820:	81a3      	strh	r3, [r4, #12]
 8009822:	bd10      	pop	{r4, pc}

08009824 <__sclose>:
 8009824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009828:	f000 b91a 	b.w	8009a60 <_close_r>

0800982c <__ssprint_r>:
 800982c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009830:	6893      	ldr	r3, [r2, #8]
 8009832:	b083      	sub	sp, #12
 8009834:	4690      	mov	r8, r2
 8009836:	2b00      	cmp	r3, #0
 8009838:	d072      	beq.n	8009920 <__ssprint_r+0xf4>
 800983a:	4683      	mov	fp, r0
 800983c:	f04f 0900 	mov.w	r9, #0
 8009840:	6816      	ldr	r6, [r2, #0]
 8009842:	6808      	ldr	r0, [r1, #0]
 8009844:	688b      	ldr	r3, [r1, #8]
 8009846:	460d      	mov	r5, r1
 8009848:	464c      	mov	r4, r9
 800984a:	2c00      	cmp	r4, #0
 800984c:	d045      	beq.n	80098da <__ssprint_r+0xae>
 800984e:	429c      	cmp	r4, r3
 8009850:	461f      	mov	r7, r3
 8009852:	469a      	mov	sl, r3
 8009854:	d346      	bcc.n	80098e4 <__ssprint_r+0xb8>
 8009856:	89ab      	ldrh	r3, [r5, #12]
 8009858:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800985c:	d02d      	beq.n	80098ba <__ssprint_r+0x8e>
 800985e:	696f      	ldr	r7, [r5, #20]
 8009860:	6929      	ldr	r1, [r5, #16]
 8009862:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8009866:	ebc1 0a00 	rsb	sl, r1, r0
 800986a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800986e:	1c60      	adds	r0, r4, #1
 8009870:	107f      	asrs	r7, r7, #1
 8009872:	4450      	add	r0, sl
 8009874:	42b8      	cmp	r0, r7
 8009876:	463a      	mov	r2, r7
 8009878:	bf84      	itt	hi
 800987a:	4607      	movhi	r7, r0
 800987c:	463a      	movhi	r2, r7
 800987e:	055b      	lsls	r3, r3, #21
 8009880:	d533      	bpl.n	80098ea <__ssprint_r+0xbe>
 8009882:	4611      	mov	r1, r2
 8009884:	4658      	mov	r0, fp
 8009886:	f7fe fef1 	bl	800866c <_malloc_r>
 800988a:	2800      	cmp	r0, #0
 800988c:	d037      	beq.n	80098fe <__ssprint_r+0xd2>
 800988e:	4652      	mov	r2, sl
 8009890:	6929      	ldr	r1, [r5, #16]
 8009892:	9001      	str	r0, [sp, #4]
 8009894:	f7fa f87a 	bl	800398c <memcpy>
 8009898:	89aa      	ldrh	r2, [r5, #12]
 800989a:	9b01      	ldr	r3, [sp, #4]
 800989c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80098a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80098a4:	81aa      	strh	r2, [r5, #12]
 80098a6:	ebca 0207 	rsb	r2, sl, r7
 80098aa:	eb03 000a 	add.w	r0, r3, sl
 80098ae:	616f      	str	r7, [r5, #20]
 80098b0:	612b      	str	r3, [r5, #16]
 80098b2:	6028      	str	r0, [r5, #0]
 80098b4:	60aa      	str	r2, [r5, #8]
 80098b6:	4627      	mov	r7, r4
 80098b8:	46a2      	mov	sl, r4
 80098ba:	4652      	mov	r2, sl
 80098bc:	4649      	mov	r1, r9
 80098be:	f7ff f9f7 	bl	8008cb0 <memmove>
 80098c2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80098c6:	68ab      	ldr	r3, [r5, #8]
 80098c8:	6828      	ldr	r0, [r5, #0]
 80098ca:	1bdb      	subs	r3, r3, r7
 80098cc:	4450      	add	r0, sl
 80098ce:	1b14      	subs	r4, r2, r4
 80098d0:	60ab      	str	r3, [r5, #8]
 80098d2:	6028      	str	r0, [r5, #0]
 80098d4:	f8c8 4008 	str.w	r4, [r8, #8]
 80098d8:	b314      	cbz	r4, 8009920 <__ssprint_r+0xf4>
 80098da:	f8d6 9000 	ldr.w	r9, [r6]
 80098de:	6874      	ldr	r4, [r6, #4]
 80098e0:	3608      	adds	r6, #8
 80098e2:	e7b2      	b.n	800984a <__ssprint_r+0x1e>
 80098e4:	4627      	mov	r7, r4
 80098e6:	46a2      	mov	sl, r4
 80098e8:	e7e7      	b.n	80098ba <__ssprint_r+0x8e>
 80098ea:	4658      	mov	r0, fp
 80098ec:	f7ff fd58 	bl	80093a0 <_realloc_r>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d1d7      	bne.n	80098a6 <__ssprint_r+0x7a>
 80098f6:	6929      	ldr	r1, [r5, #16]
 80098f8:	4658      	mov	r0, fp
 80098fa:	f7fe fb93 	bl	8008024 <_free_r>
 80098fe:	230c      	movs	r3, #12
 8009900:	f8cb 3000 	str.w	r3, [fp]
 8009904:	89ab      	ldrh	r3, [r5, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800990c:	f04f 30ff 	mov.w	r0, #4294967295
 8009910:	81ab      	strh	r3, [r5, #12]
 8009912:	f8c8 2008 	str.w	r2, [r8, #8]
 8009916:	f8c8 2004 	str.w	r2, [r8, #4]
 800991a:	b003      	add	sp, #12
 800991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009920:	2000      	movs	r0, #0
 8009922:	f8c8 0004 	str.w	r0, [r8, #4]
 8009926:	b003      	add	sp, #12
 8009928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800992c <__sprint_r.part.0>:
 800992c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800992e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009932:	049c      	lsls	r4, r3, #18
 8009934:	4692      	mov	sl, r2
 8009936:	d52c      	bpl.n	8009992 <__sprint_r.part.0+0x66>
 8009938:	6893      	ldr	r3, [r2, #8]
 800993a:	6812      	ldr	r2, [r2, #0]
 800993c:	b33b      	cbz	r3, 800998e <__sprint_r.part.0+0x62>
 800993e:	460f      	mov	r7, r1
 8009940:	4680      	mov	r8, r0
 8009942:	f102 0908 	add.w	r9, r2, #8
 8009946:	e919 0060 	ldmdb	r9, {r5, r6}
 800994a:	08b6      	lsrs	r6, r6, #2
 800994c:	d017      	beq.n	800997e <__sprint_r.part.0+0x52>
 800994e:	3d04      	subs	r5, #4
 8009950:	2400      	movs	r4, #0
 8009952:	e001      	b.n	8009958 <__sprint_r.part.0+0x2c>
 8009954:	42a6      	cmp	r6, r4
 8009956:	d010      	beq.n	800997a <__sprint_r.part.0+0x4e>
 8009958:	463a      	mov	r2, r7
 800995a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800995e:	4640      	mov	r0, r8
 8009960:	f000 f91e 	bl	8009ba0 <_fputwc_r>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	f104 0401 	add.w	r4, r4, #1
 800996a:	d1f3      	bne.n	8009954 <__sprint_r.part.0+0x28>
 800996c:	2300      	movs	r3, #0
 800996e:	f8ca 3008 	str.w	r3, [sl, #8]
 8009972:	f8ca 3004 	str.w	r3, [sl, #4]
 8009976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800997a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800997e:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 8009982:	f8ca 3008 	str.w	r3, [sl, #8]
 8009986:	f109 0908 	add.w	r9, r9, #8
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1db      	bne.n	8009946 <__sprint_r.part.0+0x1a>
 800998e:	2000      	movs	r0, #0
 8009990:	e7ec      	b.n	800996c <__sprint_r.part.0+0x40>
 8009992:	f7fe fc2f 	bl	80081f4 <__sfvwrite_r>
 8009996:	2300      	movs	r3, #0
 8009998:	f8ca 3008 	str.w	r3, [sl, #8]
 800999c:	f8ca 3004 	str.w	r3, [sl, #4]
 80099a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080099a4 <__sprint_r>:
 80099a4:	6893      	ldr	r3, [r2, #8]
 80099a6:	b10b      	cbz	r3, 80099ac <__sprint_r+0x8>
 80099a8:	f7ff bfc0 	b.w	800992c <__sprint_r.part.0>
 80099ac:	b410      	push	{r4}
 80099ae:	4618      	mov	r0, r3
 80099b0:	6053      	str	r3, [r2, #4]
 80099b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <__ascii_wctomb>:
 80099b8:	b121      	cbz	r1, 80099c4 <__ascii_wctomb+0xc>
 80099ba:	2aff      	cmp	r2, #255	; 0xff
 80099bc:	d804      	bhi.n	80099c8 <__ascii_wctomb+0x10>
 80099be:	700a      	strb	r2, [r1, #0]
 80099c0:	2001      	movs	r0, #1
 80099c2:	4770      	bx	lr
 80099c4:	4608      	mov	r0, r1
 80099c6:	4770      	bx	lr
 80099c8:	238a      	movs	r3, #138	; 0x8a
 80099ca:	6003      	str	r3, [r0, #0]
 80099cc:	f04f 30ff 	mov.w	r0, #4294967295
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop

080099d4 <_write_r>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	460d      	mov	r5, r1
 80099d8:	4c08      	ldr	r4, [pc, #32]	; (80099fc <_write_r+0x28>)
 80099da:	4611      	mov	r1, r2
 80099dc:	4606      	mov	r6, r0
 80099de:	461a      	mov	r2, r3
 80099e0:	4628      	mov	r0, r5
 80099e2:	2300      	movs	r3, #0
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	f7f7 f9bb 	bl	8000d60 <_write>
 80099ea:	1c43      	adds	r3, r0, #1
 80099ec:	d000      	beq.n	80099f0 <_write_r+0x1c>
 80099ee:	bd70      	pop	{r4, r5, r6, pc}
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d0fb      	beq.n	80099ee <_write_r+0x1a>
 80099f6:	6033      	str	r3, [r6, #0]
 80099f8:	bd70      	pop	{r4, r5, r6, pc}
 80099fa:	bf00      	nop
 80099fc:	20000aa4 	.word	0x20000aa4

08009a00 <_calloc_r>:
 8009a00:	b510      	push	{r4, lr}
 8009a02:	fb02 f101 	mul.w	r1, r2, r1
 8009a06:	f7fe fe31 	bl	800866c <_malloc_r>
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	b1d8      	cbz	r0, 8009a46 <_calloc_r+0x46>
 8009a0e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009a12:	f022 0203 	bic.w	r2, r2, #3
 8009a16:	3a04      	subs	r2, #4
 8009a18:	2a24      	cmp	r2, #36	; 0x24
 8009a1a:	d818      	bhi.n	8009a4e <_calloc_r+0x4e>
 8009a1c:	2a13      	cmp	r2, #19
 8009a1e:	d914      	bls.n	8009a4a <_calloc_r+0x4a>
 8009a20:	2300      	movs	r3, #0
 8009a22:	2a1b      	cmp	r2, #27
 8009a24:	6003      	str	r3, [r0, #0]
 8009a26:	6043      	str	r3, [r0, #4]
 8009a28:	d916      	bls.n	8009a58 <_calloc_r+0x58>
 8009a2a:	2a24      	cmp	r2, #36	; 0x24
 8009a2c:	6083      	str	r3, [r0, #8]
 8009a2e:	60c3      	str	r3, [r0, #12]
 8009a30:	bf11      	iteee	ne
 8009a32:	f100 0210 	addne.w	r2, r0, #16
 8009a36:	6103      	streq	r3, [r0, #16]
 8009a38:	6143      	streq	r3, [r0, #20]
 8009a3a:	f100 0218 	addeq.w	r2, r0, #24
 8009a3e:	2300      	movs	r3, #0
 8009a40:	6013      	str	r3, [r2, #0]
 8009a42:	6053      	str	r3, [r2, #4]
 8009a44:	6093      	str	r3, [r2, #8]
 8009a46:	4620      	mov	r0, r4
 8009a48:	bd10      	pop	{r4, pc}
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	e7f7      	b.n	8009a3e <_calloc_r+0x3e>
 8009a4e:	2100      	movs	r1, #0
 8009a50:	f7fa f836 	bl	8003ac0 <memset>
 8009a54:	4620      	mov	r0, r4
 8009a56:	bd10      	pop	{r4, pc}
 8009a58:	f100 0208 	add.w	r2, r0, #8
 8009a5c:	e7ef      	b.n	8009a3e <_calloc_r+0x3e>
 8009a5e:	bf00      	nop

08009a60 <_close_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4c07      	ldr	r4, [pc, #28]	; (8009a80 <_close_r+0x20>)
 8009a64:	2300      	movs	r3, #0
 8009a66:	4605      	mov	r5, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	6023      	str	r3, [r4, #0]
 8009a6c:	f7f8 f94c 	bl	8001d08 <_close>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d000      	beq.n	8009a76 <_close_r+0x16>
 8009a74:	bd38      	pop	{r3, r4, r5, pc}
 8009a76:	6823      	ldr	r3, [r4, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d0fb      	beq.n	8009a74 <_close_r+0x14>
 8009a7c:	602b      	str	r3, [r5, #0]
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}
 8009a80:	20000aa4 	.word	0x20000aa4

08009a84 <_fclose_r>:
 8009a84:	2900      	cmp	r1, #0
 8009a86:	d03d      	beq.n	8009b04 <_fclose_r+0x80>
 8009a88:	b570      	push	{r4, r5, r6, lr}
 8009a8a:	4605      	mov	r5, r0
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	b108      	cbz	r0, 8009a94 <_fclose_r+0x10>
 8009a90:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009a92:	b37b      	cbz	r3, 8009af4 <_fclose_r+0x70>
 8009a94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a98:	b90b      	cbnz	r3, 8009a9e <_fclose_r+0x1a>
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	f7fe f92f 	bl	8007d04 <__sflush_r>
 8009aa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009aa8:	4606      	mov	r6, r0
 8009aaa:	b133      	cbz	r3, 8009aba <_fclose_r+0x36>
 8009aac:	69e1      	ldr	r1, [r4, #28]
 8009aae:	4628      	mov	r0, r5
 8009ab0:	4798      	blx	r3
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	bfb8      	it	lt
 8009ab6:	f04f 36ff 	movlt.w	r6, #4294967295
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	061b      	lsls	r3, r3, #24
 8009abe:	d41c      	bmi.n	8009afa <_fclose_r+0x76>
 8009ac0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009ac2:	b141      	cbz	r1, 8009ad6 <_fclose_r+0x52>
 8009ac4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009ac8:	4299      	cmp	r1, r3
 8009aca:	d002      	beq.n	8009ad2 <_fclose_r+0x4e>
 8009acc:	4628      	mov	r0, r5
 8009ace:	f7fe faa9 	bl	8008024 <_free_r>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	6323      	str	r3, [r4, #48]	; 0x30
 8009ad6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009ad8:	b121      	cbz	r1, 8009ae4 <_fclose_r+0x60>
 8009ada:	4628      	mov	r0, r5
 8009adc:	f7fe faa2 	bl	8008024 <_free_r>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	6463      	str	r3, [r4, #68]	; 0x44
 8009ae4:	f7fe fa4c 	bl	8007f80 <__sfp_lock_acquire>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	81a3      	strh	r3, [r4, #12]
 8009aec:	f7fe fa4a 	bl	8007f84 <__sfp_lock_release>
 8009af0:	4630      	mov	r0, r6
 8009af2:	bd70      	pop	{r4, r5, r6, pc}
 8009af4:	f7fe fa3e 	bl	8007f74 <__sinit>
 8009af8:	e7cc      	b.n	8009a94 <_fclose_r+0x10>
 8009afa:	6921      	ldr	r1, [r4, #16]
 8009afc:	4628      	mov	r0, r5
 8009afe:	f7fe fa91 	bl	8008024 <_free_r>
 8009b02:	e7dd      	b.n	8009ac0 <_fclose_r+0x3c>
 8009b04:	2000      	movs	r0, #0
 8009b06:	4770      	bx	lr

08009b08 <__fputwc>:
 8009b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	4680      	mov	r8, r0
 8009b10:	4689      	mov	r9, r1
 8009b12:	4614      	mov	r4, r2
 8009b14:	f7fe fd1a 	bl	800854c <__locale_mb_cur_max>
 8009b18:	2801      	cmp	r0, #1
 8009b1a:	d033      	beq.n	8009b84 <__fputwc+0x7c>
 8009b1c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8009b20:	464a      	mov	r2, r9
 8009b22:	a901      	add	r1, sp, #4
 8009b24:	4640      	mov	r0, r8
 8009b26:	f000 f8f7 	bl	8009d18 <_wcrtomb_r>
 8009b2a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009b2e:	4682      	mov	sl, r0
 8009b30:	d021      	beq.n	8009b76 <__fputwc+0x6e>
 8009b32:	b388      	cbz	r0, 8009b98 <__fputwc+0x90>
 8009b34:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8009b38:	2500      	movs	r5, #0
 8009b3a:	e008      	b.n	8009b4e <__fputwc+0x46>
 8009b3c:	6823      	ldr	r3, [r4, #0]
 8009b3e:	1c5a      	adds	r2, r3, #1
 8009b40:	6022      	str	r2, [r4, #0]
 8009b42:	701e      	strb	r6, [r3, #0]
 8009b44:	3501      	adds	r5, #1
 8009b46:	4555      	cmp	r5, sl
 8009b48:	d226      	bcs.n	8009b98 <__fputwc+0x90>
 8009b4a:	ab01      	add	r3, sp, #4
 8009b4c:	5d5e      	ldrb	r6, [r3, r5]
 8009b4e:	68a3      	ldr	r3, [r4, #8]
 8009b50:	3b01      	subs	r3, #1
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	60a3      	str	r3, [r4, #8]
 8009b56:	daf1      	bge.n	8009b3c <__fputwc+0x34>
 8009b58:	69a7      	ldr	r7, [r4, #24]
 8009b5a:	42bb      	cmp	r3, r7
 8009b5c:	4631      	mov	r1, r6
 8009b5e:	4622      	mov	r2, r4
 8009b60:	4640      	mov	r0, r8
 8009b62:	db01      	blt.n	8009b68 <__fputwc+0x60>
 8009b64:	2e0a      	cmp	r6, #10
 8009b66:	d1e9      	bne.n	8009b3c <__fputwc+0x34>
 8009b68:	f000 f880 	bl	8009c6c <__swbuf_r>
 8009b6c:	1c43      	adds	r3, r0, #1
 8009b6e:	d1e9      	bne.n	8009b44 <__fputwc+0x3c>
 8009b70:	b002      	add	sp, #8
 8009b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b76:	89a3      	ldrh	r3, [r4, #12]
 8009b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b7c:	81a3      	strh	r3, [r4, #12]
 8009b7e:	b002      	add	sp, #8
 8009b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b84:	f109 33ff 	add.w	r3, r9, #4294967295
 8009b88:	2bfe      	cmp	r3, #254	; 0xfe
 8009b8a:	d8c7      	bhi.n	8009b1c <__fputwc+0x14>
 8009b8c:	fa5f f689 	uxtb.w	r6, r9
 8009b90:	4682      	mov	sl, r0
 8009b92:	f88d 6004 	strb.w	r6, [sp, #4]
 8009b96:	e7cf      	b.n	8009b38 <__fputwc+0x30>
 8009b98:	4648      	mov	r0, r9
 8009b9a:	b002      	add	sp, #8
 8009b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009ba0 <_fputwc_r>:
 8009ba0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8009ba4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8009ba8:	d10b      	bne.n	8009bc2 <_fputwc_r+0x22>
 8009baa:	b410      	push	{r4}
 8009bac:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8009bae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009bb2:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8009bb6:	6654      	str	r4, [r2, #100]	; 0x64
 8009bb8:	8193      	strh	r3, [r2, #12]
 8009bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bbe:	f7ff bfa3 	b.w	8009b08 <__fputwc>
 8009bc2:	f7ff bfa1 	b.w	8009b08 <__fputwc>
 8009bc6:	bf00      	nop

08009bc8 <_fstat_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4c07      	ldr	r4, [pc, #28]	; (8009bec <_fstat_r+0x24>)
 8009bce:	4605      	mov	r5, r0
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	6023      	str	r3, [r4, #0]
 8009bd8:	f7f8 f8a0 	bl	8001d1c <_fstat>
 8009bdc:	1c43      	adds	r3, r0, #1
 8009bde:	d000      	beq.n	8009be2 <_fstat_r+0x1a>
 8009be0:	bd38      	pop	{r3, r4, r5, pc}
 8009be2:	6823      	ldr	r3, [r4, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d0fb      	beq.n	8009be0 <_fstat_r+0x18>
 8009be8:	602b      	str	r3, [r5, #0]
 8009bea:	bd38      	pop	{r3, r4, r5, pc}
 8009bec:	20000aa4 	.word	0x20000aa4

08009bf0 <_isatty_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	4c07      	ldr	r4, [pc, #28]	; (8009c10 <_isatty_r+0x20>)
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	4605      	mov	r5, r0
 8009bf8:	4608      	mov	r0, r1
 8009bfa:	6023      	str	r3, [r4, #0]
 8009bfc:	f7f8 f8e2 	bl	8001dc4 <_isatty>
 8009c00:	1c43      	adds	r3, r0, #1
 8009c02:	d000      	beq.n	8009c06 <_isatty_r+0x16>
 8009c04:	bd38      	pop	{r3, r4, r5, pc}
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d0fb      	beq.n	8009c04 <_isatty_r+0x14>
 8009c0c:	602b      	str	r3, [r5, #0]
 8009c0e:	bd38      	pop	{r3, r4, r5, pc}
 8009c10:	20000aa4 	.word	0x20000aa4

08009c14 <_lseek_r>:
 8009c14:	b570      	push	{r4, r5, r6, lr}
 8009c16:	460d      	mov	r5, r1
 8009c18:	4c08      	ldr	r4, [pc, #32]	; (8009c3c <_lseek_r+0x28>)
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	4606      	mov	r6, r0
 8009c1e:	461a      	mov	r2, r3
 8009c20:	4628      	mov	r0, r5
 8009c22:	2300      	movs	r3, #0
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	f7f8 f853 	bl	8001cd0 <_lseek>
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	d000      	beq.n	8009c30 <_lseek_r+0x1c>
 8009c2e:	bd70      	pop	{r4, r5, r6, pc}
 8009c30:	6823      	ldr	r3, [r4, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d0fb      	beq.n	8009c2e <_lseek_r+0x1a>
 8009c36:	6033      	str	r3, [r6, #0]
 8009c38:	bd70      	pop	{r4, r5, r6, pc}
 8009c3a:	bf00      	nop
 8009c3c:	20000aa4 	.word	0x20000aa4

08009c40 <_read_r>:
 8009c40:	b570      	push	{r4, r5, r6, lr}
 8009c42:	460d      	mov	r5, r1
 8009c44:	4c08      	ldr	r4, [pc, #32]	; (8009c68 <_read_r+0x28>)
 8009c46:	4611      	mov	r1, r2
 8009c48:	4606      	mov	r6, r0
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	2300      	movs	r3, #0
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	f7f8 f84b 	bl	8001cec <_read>
 8009c56:	1c43      	adds	r3, r0, #1
 8009c58:	d000      	beq.n	8009c5c <_read_r+0x1c>
 8009c5a:	bd70      	pop	{r4, r5, r6, pc}
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d0fb      	beq.n	8009c5a <_read_r+0x1a>
 8009c62:	6033      	str	r3, [r6, #0]
 8009c64:	bd70      	pop	{r4, r5, r6, pc}
 8009c66:	bf00      	nop
 8009c68:	20000aa4 	.word	0x20000aa4

08009c6c <__swbuf_r>:
 8009c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6e:	460d      	mov	r5, r1
 8009c70:	4614      	mov	r4, r2
 8009c72:	4606      	mov	r6, r0
 8009c74:	b110      	cbz	r0, 8009c7c <__swbuf_r+0x10>
 8009c76:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d04a      	beq.n	8009d12 <__swbuf_r+0xa6>
 8009c7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c80:	69a3      	ldr	r3, [r4, #24]
 8009c82:	60a3      	str	r3, [r4, #8]
 8009c84:	b291      	uxth	r1, r2
 8009c86:	0708      	lsls	r0, r1, #28
 8009c88:	d538      	bpl.n	8009cfc <__swbuf_r+0x90>
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d035      	beq.n	8009cfc <__swbuf_r+0x90>
 8009c90:	0489      	lsls	r1, r1, #18
 8009c92:	b2ef      	uxtb	r7, r5
 8009c94:	d515      	bpl.n	8009cc2 <__swbuf_r+0x56>
 8009c96:	6822      	ldr	r2, [r4, #0]
 8009c98:	6961      	ldr	r1, [r4, #20]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	428b      	cmp	r3, r1
 8009c9e:	da1c      	bge.n	8009cda <__swbuf_r+0x6e>
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	68a1      	ldr	r1, [r4, #8]
 8009ca4:	1c50      	adds	r0, r2, #1
 8009ca6:	3901      	subs	r1, #1
 8009ca8:	60a1      	str	r1, [r4, #8]
 8009caa:	6020      	str	r0, [r4, #0]
 8009cac:	7015      	strb	r5, [r2, #0]
 8009cae:	6962      	ldr	r2, [r4, #20]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d01a      	beq.n	8009cea <__swbuf_r+0x7e>
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	07db      	lsls	r3, r3, #31
 8009cb8:	d501      	bpl.n	8009cbe <__swbuf_r+0x52>
 8009cba:	2f0a      	cmp	r7, #10
 8009cbc:	d015      	beq.n	8009cea <__swbuf_r+0x7e>
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cc8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8009ccc:	81a2      	strh	r2, [r4, #12]
 8009cce:	6822      	ldr	r2, [r4, #0]
 8009cd0:	6661      	str	r1, [r4, #100]	; 0x64
 8009cd2:	6961      	ldr	r1, [r4, #20]
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	428b      	cmp	r3, r1
 8009cd8:	dbe2      	blt.n	8009ca0 <__swbuf_r+0x34>
 8009cda:	4621      	mov	r1, r4
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f7fe f8b5 	bl	8007e4c <_fflush_r>
 8009ce2:	b940      	cbnz	r0, 8009cf6 <__swbuf_r+0x8a>
 8009ce4:	6822      	ldr	r2, [r4, #0]
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e7db      	b.n	8009ca2 <__swbuf_r+0x36>
 8009cea:	4621      	mov	r1, r4
 8009cec:	4630      	mov	r0, r6
 8009cee:	f7fe f8ad 	bl	8007e4c <_fflush_r>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d0e3      	beq.n	8009cbe <__swbuf_r+0x52>
 8009cf6:	f04f 37ff 	mov.w	r7, #4294967295
 8009cfa:	e7e0      	b.n	8009cbe <__swbuf_r+0x52>
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	4630      	mov	r0, r6
 8009d00:	f7fc fff2 	bl	8006ce8 <__swsetup_r>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d1f6      	bne.n	8009cf6 <__swbuf_r+0x8a>
 8009d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d0c:	6923      	ldr	r3, [r4, #16]
 8009d0e:	b291      	uxth	r1, r2
 8009d10:	e7be      	b.n	8009c90 <__swbuf_r+0x24>
 8009d12:	f7fe f92f 	bl	8007f74 <__sinit>
 8009d16:	e7b1      	b.n	8009c7c <__swbuf_r+0x10>

08009d18 <_wcrtomb_r>:
 8009d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	b085      	sub	sp, #20
 8009d1e:	461f      	mov	r7, r3
 8009d20:	b189      	cbz	r1, 8009d46 <_wcrtomb_r+0x2e>
 8009d22:	4c10      	ldr	r4, [pc, #64]	; (8009d64 <_wcrtomb_r+0x4c>)
 8009d24:	4d10      	ldr	r5, [pc, #64]	; (8009d68 <_wcrtomb_r+0x50>)
 8009d26:	6824      	ldr	r4, [r4, #0]
 8009d28:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8009d2a:	2c00      	cmp	r4, #0
 8009d2c:	bf08      	it	eq
 8009d2e:	462c      	moveq	r4, r5
 8009d30:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8009d34:	47a0      	blx	r4
 8009d36:	1c43      	adds	r3, r0, #1
 8009d38:	d103      	bne.n	8009d42 <_wcrtomb_r+0x2a>
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	238a      	movs	r3, #138	; 0x8a
 8009d3e:	603a      	str	r2, [r7, #0]
 8009d40:	6033      	str	r3, [r6, #0]
 8009d42:	b005      	add	sp, #20
 8009d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d46:	460c      	mov	r4, r1
 8009d48:	4906      	ldr	r1, [pc, #24]	; (8009d64 <_wcrtomb_r+0x4c>)
 8009d4a:	4a07      	ldr	r2, [pc, #28]	; (8009d68 <_wcrtomb_r+0x50>)
 8009d4c:	6809      	ldr	r1, [r1, #0]
 8009d4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009d50:	2900      	cmp	r1, #0
 8009d52:	bf08      	it	eq
 8009d54:	4611      	moveq	r1, r2
 8009d56:	4622      	mov	r2, r4
 8009d58:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 8009d5c:	a901      	add	r1, sp, #4
 8009d5e:	47a0      	blx	r4
 8009d60:	e7e9      	b.n	8009d36 <_wcrtomb_r+0x1e>
 8009d62:	bf00      	nop
 8009d64:	20000468 	.word	0x20000468
 8009d68:	2000046c 	.word	0x2000046c

08009d6c <__aeabi_d2iz>:
 8009d6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8009d70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8009d74:	d215      	bcs.n	8009da2 <__aeabi_d2iz+0x36>
 8009d76:	d511      	bpl.n	8009d9c <__aeabi_d2iz+0x30>
 8009d78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8009d7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8009d80:	d912      	bls.n	8009da8 <__aeabi_d2iz+0x3c>
 8009d82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8009d86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8009d8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8009d92:	fa23 f002 	lsr.w	r0, r3, r2
 8009d96:	bf18      	it	ne
 8009d98:	4240      	negne	r0, r0
 8009d9a:	4770      	bx	lr
 8009d9c:	f04f 0000 	mov.w	r0, #0
 8009da0:	4770      	bx	lr
 8009da2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8009da6:	d105      	bne.n	8009db4 <__aeabi_d2iz+0x48>
 8009da8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8009dac:	bf08      	it	eq
 8009dae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8009db2:	4770      	bx	lr
 8009db4:	f04f 0000 	mov.w	r0, #0
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop

08009dbc <__aeabi_uldivmod>:
 8009dbc:	b953      	cbnz	r3, 8009dd4 <__aeabi_uldivmod+0x18>
 8009dbe:	b94a      	cbnz	r2, 8009dd4 <__aeabi_uldivmod+0x18>
 8009dc0:	2900      	cmp	r1, #0
 8009dc2:	bf08      	it	eq
 8009dc4:	2800      	cmpeq	r0, #0
 8009dc6:	bf1c      	itt	ne
 8009dc8:	f04f 31ff 	movne.w	r1, #4294967295
 8009dcc:	f04f 30ff 	movne.w	r0, #4294967295
 8009dd0:	f000 b97e 	b.w	800a0d0 <__aeabi_idiv0>
 8009dd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8009dd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8009ddc:	f000 f806 	bl	8009dec <__udivmoddi4>
 8009de0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009de8:	b004      	add	sp, #16
 8009dea:	4770      	bx	lr

08009dec <__udivmoddi4>:
 8009dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df0:	468c      	mov	ip, r1
 8009df2:	460e      	mov	r6, r1
 8009df4:	4604      	mov	r4, r0
 8009df6:	9d08      	ldr	r5, [sp, #32]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d150      	bne.n	8009e9e <__udivmoddi4+0xb2>
 8009dfc:	428a      	cmp	r2, r1
 8009dfe:	4617      	mov	r7, r2
 8009e00:	d96c      	bls.n	8009edc <__udivmoddi4+0xf0>
 8009e02:	fab2 fe82 	clz	lr, r2
 8009e06:	f1be 0f00 	cmp.w	lr, #0
 8009e0a:	d00b      	beq.n	8009e24 <__udivmoddi4+0x38>
 8009e0c:	f1ce 0420 	rsb	r4, lr, #32
 8009e10:	fa20 f404 	lsr.w	r4, r0, r4
 8009e14:	fa01 f60e 	lsl.w	r6, r1, lr
 8009e18:	ea44 0c06 	orr.w	ip, r4, r6
 8009e1c:	fa02 f70e 	lsl.w	r7, r2, lr
 8009e20:	fa00 f40e 	lsl.w	r4, r0, lr
 8009e24:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8009e28:	0c22      	lsrs	r2, r4, #16
 8009e2a:	fbbc f0f9 	udiv	r0, ip, r9
 8009e2e:	fa1f f887 	uxth.w	r8, r7
 8009e32:	fb09 c610 	mls	r6, r9, r0, ip
 8009e36:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8009e3a:	fb00 f308 	mul.w	r3, r0, r8
 8009e3e:	42b3      	cmp	r3, r6
 8009e40:	d909      	bls.n	8009e56 <__udivmoddi4+0x6a>
 8009e42:	19f6      	adds	r6, r6, r7
 8009e44:	f100 32ff 	add.w	r2, r0, #4294967295
 8009e48:	f080 8122 	bcs.w	800a090 <__udivmoddi4+0x2a4>
 8009e4c:	42b3      	cmp	r3, r6
 8009e4e:	f240 811f 	bls.w	800a090 <__udivmoddi4+0x2a4>
 8009e52:	3802      	subs	r0, #2
 8009e54:	443e      	add	r6, r7
 8009e56:	1af6      	subs	r6, r6, r3
 8009e58:	b2a2      	uxth	r2, r4
 8009e5a:	fbb6 f3f9 	udiv	r3, r6, r9
 8009e5e:	fb09 6613 	mls	r6, r9, r3, r6
 8009e62:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8009e66:	fb03 f808 	mul.w	r8, r3, r8
 8009e6a:	45a0      	cmp	r8, r4
 8009e6c:	d909      	bls.n	8009e82 <__udivmoddi4+0x96>
 8009e6e:	19e4      	adds	r4, r4, r7
 8009e70:	f103 32ff 	add.w	r2, r3, #4294967295
 8009e74:	f080 810a 	bcs.w	800a08c <__udivmoddi4+0x2a0>
 8009e78:	45a0      	cmp	r8, r4
 8009e7a:	f240 8107 	bls.w	800a08c <__udivmoddi4+0x2a0>
 8009e7e:	3b02      	subs	r3, #2
 8009e80:	443c      	add	r4, r7
 8009e82:	ebc8 0404 	rsb	r4, r8, r4
 8009e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	2d00      	cmp	r5, #0
 8009e8e:	d062      	beq.n	8009f56 <__udivmoddi4+0x16a>
 8009e90:	fa24 f40e 	lsr.w	r4, r4, lr
 8009e94:	2300      	movs	r3, #0
 8009e96:	602c      	str	r4, [r5, #0]
 8009e98:	606b      	str	r3, [r5, #4]
 8009e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e9e:	428b      	cmp	r3, r1
 8009ea0:	d907      	bls.n	8009eb2 <__udivmoddi4+0xc6>
 8009ea2:	2d00      	cmp	r5, #0
 8009ea4:	d055      	beq.n	8009f52 <__udivmoddi4+0x166>
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	e885 0041 	stmia.w	r5, {r0, r6}
 8009eac:	4608      	mov	r0, r1
 8009eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb2:	fab3 f183 	clz	r1, r3
 8009eb6:	2900      	cmp	r1, #0
 8009eb8:	f040 8090 	bne.w	8009fdc <__udivmoddi4+0x1f0>
 8009ebc:	42b3      	cmp	r3, r6
 8009ebe:	d302      	bcc.n	8009ec6 <__udivmoddi4+0xda>
 8009ec0:	4282      	cmp	r2, r0
 8009ec2:	f200 80f8 	bhi.w	800a0b6 <__udivmoddi4+0x2ca>
 8009ec6:	1a84      	subs	r4, r0, r2
 8009ec8:	eb66 0603 	sbc.w	r6, r6, r3
 8009ecc:	2001      	movs	r0, #1
 8009ece:	46b4      	mov	ip, r6
 8009ed0:	2d00      	cmp	r5, #0
 8009ed2:	d040      	beq.n	8009f56 <__udivmoddi4+0x16a>
 8009ed4:	e885 1010 	stmia.w	r5, {r4, ip}
 8009ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009edc:	b912      	cbnz	r2, 8009ee4 <__udivmoddi4+0xf8>
 8009ede:	2701      	movs	r7, #1
 8009ee0:	fbb7 f7f2 	udiv	r7, r7, r2
 8009ee4:	fab7 fe87 	clz	lr, r7
 8009ee8:	f1be 0f00 	cmp.w	lr, #0
 8009eec:	d135      	bne.n	8009f5a <__udivmoddi4+0x16e>
 8009eee:	1bf3      	subs	r3, r6, r7
 8009ef0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8009ef4:	fa1f fc87 	uxth.w	ip, r7
 8009ef8:	2101      	movs	r1, #1
 8009efa:	fbb3 f0f8 	udiv	r0, r3, r8
 8009efe:	0c22      	lsrs	r2, r4, #16
 8009f00:	fb08 3610 	mls	r6, r8, r0, r3
 8009f04:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8009f08:	fb0c f300 	mul.w	r3, ip, r0
 8009f0c:	42b3      	cmp	r3, r6
 8009f0e:	d907      	bls.n	8009f20 <__udivmoddi4+0x134>
 8009f10:	19f6      	adds	r6, r6, r7
 8009f12:	f100 32ff 	add.w	r2, r0, #4294967295
 8009f16:	d202      	bcs.n	8009f1e <__udivmoddi4+0x132>
 8009f18:	42b3      	cmp	r3, r6
 8009f1a:	f200 80ce 	bhi.w	800a0ba <__udivmoddi4+0x2ce>
 8009f1e:	4610      	mov	r0, r2
 8009f20:	1af6      	subs	r6, r6, r3
 8009f22:	b2a2      	uxth	r2, r4
 8009f24:	fbb6 f3f8 	udiv	r3, r6, r8
 8009f28:	fb08 6613 	mls	r6, r8, r3, r6
 8009f2c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8009f30:	fb0c fc03 	mul.w	ip, ip, r3
 8009f34:	45a4      	cmp	ip, r4
 8009f36:	d907      	bls.n	8009f48 <__udivmoddi4+0x15c>
 8009f38:	19e4      	adds	r4, r4, r7
 8009f3a:	f103 32ff 	add.w	r2, r3, #4294967295
 8009f3e:	d202      	bcs.n	8009f46 <__udivmoddi4+0x15a>
 8009f40:	45a4      	cmp	ip, r4
 8009f42:	f200 80b5 	bhi.w	800a0b0 <__udivmoddi4+0x2c4>
 8009f46:	4613      	mov	r3, r2
 8009f48:	ebcc 0404 	rsb	r4, ip, r4
 8009f4c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009f50:	e79c      	b.n	8009e8c <__udivmoddi4+0xa0>
 8009f52:	4629      	mov	r1, r5
 8009f54:	4628      	mov	r0, r5
 8009f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f5a:	f1ce 0120 	rsb	r1, lr, #32
 8009f5e:	fa06 f30e 	lsl.w	r3, r6, lr
 8009f62:	fa07 f70e 	lsl.w	r7, r7, lr
 8009f66:	fa20 f901 	lsr.w	r9, r0, r1
 8009f6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8009f6e:	40ce      	lsrs	r6, r1
 8009f70:	ea49 0903 	orr.w	r9, r9, r3
 8009f74:	fbb6 faf8 	udiv	sl, r6, r8
 8009f78:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8009f7c:	fb08 661a 	mls	r6, r8, sl, r6
 8009f80:	fa1f fc87 	uxth.w	ip, r7
 8009f84:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8009f88:	fb0a f20c 	mul.w	r2, sl, ip
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	fa00 f40e 	lsl.w	r4, r0, lr
 8009f92:	d90a      	bls.n	8009faa <__udivmoddi4+0x1be>
 8009f94:	19db      	adds	r3, r3, r7
 8009f96:	f10a 31ff 	add.w	r1, sl, #4294967295
 8009f9a:	f080 8087 	bcs.w	800a0ac <__udivmoddi4+0x2c0>
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	f240 8084 	bls.w	800a0ac <__udivmoddi4+0x2c0>
 8009fa4:	f1aa 0a02 	sub.w	sl, sl, #2
 8009fa8:	443b      	add	r3, r7
 8009faa:	1a9b      	subs	r3, r3, r2
 8009fac:	fa1f f989 	uxth.w	r9, r9
 8009fb0:	fbb3 f1f8 	udiv	r1, r3, r8
 8009fb4:	fb08 3311 	mls	r3, r8, r1, r3
 8009fb8:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8009fbc:	fb01 f60c 	mul.w	r6, r1, ip
 8009fc0:	429e      	cmp	r6, r3
 8009fc2:	d907      	bls.n	8009fd4 <__udivmoddi4+0x1e8>
 8009fc4:	19db      	adds	r3, r3, r7
 8009fc6:	f101 32ff 	add.w	r2, r1, #4294967295
 8009fca:	d26b      	bcs.n	800a0a4 <__udivmoddi4+0x2b8>
 8009fcc:	429e      	cmp	r6, r3
 8009fce:	d969      	bls.n	800a0a4 <__udivmoddi4+0x2b8>
 8009fd0:	3902      	subs	r1, #2
 8009fd2:	443b      	add	r3, r7
 8009fd4:	1b9b      	subs	r3, r3, r6
 8009fd6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009fda:	e78e      	b.n	8009efa <__udivmoddi4+0x10e>
 8009fdc:	f1c1 0e20 	rsb	lr, r1, #32
 8009fe0:	fa22 f40e 	lsr.w	r4, r2, lr
 8009fe4:	408b      	lsls	r3, r1
 8009fe6:	4323      	orrs	r3, r4
 8009fe8:	fa20 f70e 	lsr.w	r7, r0, lr
 8009fec:	fa06 f401 	lsl.w	r4, r6, r1
 8009ff0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8009ff4:	fa26 f60e 	lsr.w	r6, r6, lr
 8009ff8:	433c      	orrs	r4, r7
 8009ffa:	fbb6 f9fc 	udiv	r9, r6, ip
 8009ffe:	0c27      	lsrs	r7, r4, #16
 800a000:	fb0c 6619 	mls	r6, ip, r9, r6
 800a004:	fa1f f883 	uxth.w	r8, r3
 800a008:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800a00c:	fb09 f708 	mul.w	r7, r9, r8
 800a010:	42b7      	cmp	r7, r6
 800a012:	fa02 f201 	lsl.w	r2, r2, r1
 800a016:	fa00 fa01 	lsl.w	sl, r0, r1
 800a01a:	d908      	bls.n	800a02e <__udivmoddi4+0x242>
 800a01c:	18f6      	adds	r6, r6, r3
 800a01e:	f109 30ff 	add.w	r0, r9, #4294967295
 800a022:	d241      	bcs.n	800a0a8 <__udivmoddi4+0x2bc>
 800a024:	42b7      	cmp	r7, r6
 800a026:	d93f      	bls.n	800a0a8 <__udivmoddi4+0x2bc>
 800a028:	f1a9 0902 	sub.w	r9, r9, #2
 800a02c:	441e      	add	r6, r3
 800a02e:	1bf6      	subs	r6, r6, r7
 800a030:	b2a0      	uxth	r0, r4
 800a032:	fbb6 f4fc 	udiv	r4, r6, ip
 800a036:	fb0c 6614 	mls	r6, ip, r4, r6
 800a03a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 800a03e:	fb04 f808 	mul.w	r8, r4, r8
 800a042:	45b8      	cmp	r8, r7
 800a044:	d907      	bls.n	800a056 <__udivmoddi4+0x26a>
 800a046:	18ff      	adds	r7, r7, r3
 800a048:	f104 30ff 	add.w	r0, r4, #4294967295
 800a04c:	d228      	bcs.n	800a0a0 <__udivmoddi4+0x2b4>
 800a04e:	45b8      	cmp	r8, r7
 800a050:	d926      	bls.n	800a0a0 <__udivmoddi4+0x2b4>
 800a052:	3c02      	subs	r4, #2
 800a054:	441f      	add	r7, r3
 800a056:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800a05a:	ebc8 0707 	rsb	r7, r8, r7
 800a05e:	fba0 8902 	umull	r8, r9, r0, r2
 800a062:	454f      	cmp	r7, r9
 800a064:	4644      	mov	r4, r8
 800a066:	464e      	mov	r6, r9
 800a068:	d314      	bcc.n	800a094 <__udivmoddi4+0x2a8>
 800a06a:	d029      	beq.n	800a0c0 <__udivmoddi4+0x2d4>
 800a06c:	b365      	cbz	r5, 800a0c8 <__udivmoddi4+0x2dc>
 800a06e:	ebba 0304 	subs.w	r3, sl, r4
 800a072:	eb67 0706 	sbc.w	r7, r7, r6
 800a076:	fa07 fe0e 	lsl.w	lr, r7, lr
 800a07a:	40cb      	lsrs	r3, r1
 800a07c:	40cf      	lsrs	r7, r1
 800a07e:	ea4e 0303 	orr.w	r3, lr, r3
 800a082:	e885 0088 	stmia.w	r5, {r3, r7}
 800a086:	2100      	movs	r1, #0
 800a088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a08c:	4613      	mov	r3, r2
 800a08e:	e6f8      	b.n	8009e82 <__udivmoddi4+0x96>
 800a090:	4610      	mov	r0, r2
 800a092:	e6e0      	b.n	8009e56 <__udivmoddi4+0x6a>
 800a094:	ebb8 0402 	subs.w	r4, r8, r2
 800a098:	eb69 0603 	sbc.w	r6, r9, r3
 800a09c:	3801      	subs	r0, #1
 800a09e:	e7e5      	b.n	800a06c <__udivmoddi4+0x280>
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	e7d8      	b.n	800a056 <__udivmoddi4+0x26a>
 800a0a4:	4611      	mov	r1, r2
 800a0a6:	e795      	b.n	8009fd4 <__udivmoddi4+0x1e8>
 800a0a8:	4681      	mov	r9, r0
 800a0aa:	e7c0      	b.n	800a02e <__udivmoddi4+0x242>
 800a0ac:	468a      	mov	sl, r1
 800a0ae:	e77c      	b.n	8009faa <__udivmoddi4+0x1be>
 800a0b0:	3b02      	subs	r3, #2
 800a0b2:	443c      	add	r4, r7
 800a0b4:	e748      	b.n	8009f48 <__udivmoddi4+0x15c>
 800a0b6:	4608      	mov	r0, r1
 800a0b8:	e70a      	b.n	8009ed0 <__udivmoddi4+0xe4>
 800a0ba:	3802      	subs	r0, #2
 800a0bc:	443e      	add	r6, r7
 800a0be:	e72f      	b.n	8009f20 <__udivmoddi4+0x134>
 800a0c0:	45c2      	cmp	sl, r8
 800a0c2:	d3e7      	bcc.n	800a094 <__udivmoddi4+0x2a8>
 800a0c4:	463e      	mov	r6, r7
 800a0c6:	e7d1      	b.n	800a06c <__udivmoddi4+0x280>
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ce:	bf00      	nop

0800a0d0 <__aeabi_idiv0>:
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	37257325 	.word	0x37257325
 800a0d8:	25732564 	.word	0x25732564
 800a0dc:	73256437 	.word	0x73256437
 800a0e0:	25643725 	.word	0x25643725
 800a0e4:	32302573 	.word	0x32302573
 800a0e8:	000a2464 	.word	0x000a2464
 800a0ec:	0000002c 	.word	0x0000002c
 800a0f0:	00007325 	.word	0x00007325
 800a0f4:	58535523 	.word	0x58535523
 800a0f8:	5523002c 	.word	0x5523002c
 800a0fc:	002c5844 	.word	0x002c5844
 800a100:	58534423 	.word	0x58534423
 800a104:	4423002c 	.word	0x4423002c
 800a108:	002c5844 	.word	0x002c5844
 800a10c:	504f5423 	.word	0x504f5423
 800a110:	4223002c 	.word	0x4223002c
 800a114:	002c544f 	.word	0x002c544f
 800a118:	58585823 	.word	0x58585823
 800a11c:	4623002c 	.word	0x4623002c
 800a120:	002c4c41 	.word	0x002c4c41
 800a124:	3353494c 	.word	0x3353494c
 800a128:	535f4844 	.word	0x535f4844
 800a12c:	444f7465 	.word	0x444f7465
 800a130:	6f642052 	.word	0x6f642052
 800a134:	2e2e656e 	.word	0x2e2e656e
 800a138:	0000002e 	.word	0x0000002e
 800a13c:	3353494c 	.word	0x3353494c
 800a140:	535f4844 	.word	0x535f4844
 800a144:	6f4d7465 	.word	0x6f4d7465
 800a148:	64206564 	.word	0x64206564
 800a14c:	2e656e6f 	.word	0x2e656e6f
 800a150:	00002e2e 	.word	0x00002e2e
 800a154:	3353494c 	.word	0x3353494c
 800a158:	535f4844 	.word	0x535f4844
 800a15c:	75467465 	.word	0x75467465
 800a160:	63536c6c 	.word	0x63536c6c
 800a164:	20656c61 	.word	0x20656c61
 800a168:	656e6f64 	.word	0x656e6f64
 800a16c:	002e2e2e 	.word	0x002e2e2e
 800a170:	3353494c 	.word	0x3353494c
 800a174:	535f4844 	.word	0x535f4844
 800a178:	78417465 	.word	0x78417465
 800a17c:	64207369 	.word	0x64207369
 800a180:	2e656e6f 	.word	0x2e656e6f
 800a184:	00002e2e 	.word	0x00002e2e
 800a188:	3353494c 	.word	0x3353494c
 800a18c:	535f4844 	.word	0x535f4844
 800a190:	6e497465 	.word	0x6e497465
 800a194:	68543174 	.word	0x68543174
 800a198:	68737265 	.word	0x68737265
 800a19c:	20646c6f 	.word	0x20646c6f
 800a1a0:	656e6f64 	.word	0x656e6f64
 800a1a4:	002e2e2e 	.word	0x002e2e2e
 800a1a8:	3353494c 	.word	0x3353494c
 800a1ac:	535f4844 	.word	0x535f4844
 800a1b0:	6e497465 	.word	0x6e497465
 800a1b4:	6e6f4374 	.word	0x6e6f4374
 800a1b8:	75676966 	.word	0x75676966
 800a1bc:	69746172 	.word	0x69746172
 800a1c0:	64206e6f 	.word	0x64206e6f
 800a1c4:	2e656e6f 	.word	0x2e656e6f
 800a1c8:	00002e2e 	.word	0x00002e2e
 800a1cc:	3353494c 	.word	0x3353494c
 800a1d0:	535f4844 	.word	0x535f4844
 800a1d4:	6e497465 	.word	0x6e497465
 800a1d8:	646f4d74 	.word	0x646f4d74
 800a1dc:	6f642065 	.word	0x6f642065
 800a1e0:	2e2e656e 	.word	0x2e2e656e
 800a1e4:	0000002e 	.word	0x0000002e
 800a1e8:	3353494c 	.word	0x3353494c
 800a1ec:	535f4844 	.word	0x535f4844
 800a1f0:	44417465 	.word	0x44417465
 800a1f4:	78754143 	.word	0x78754143
 800a1f8:	6e6f6420 	.word	0x6e6f6420
 800a1fc:	2e2e2e65 	.word	0x2e2e2e65
 800a200:	00000000 	.word	0x00000000
 800a204:	3353494c 	.word	0x3353494c
 800a208:	535f4844 	.word	0x535f4844
 800a20c:	44427465 	.word	0x44427465
 800a210:	6f642055 	.word	0x6f642055
 800a214:	2e2e656e 	.word	0x2e2e656e
 800a218:	0000002e 	.word	0x0000002e
 800a21c:	3353494c 	.word	0x3353494c
 800a220:	535f4844 	.word	0x535f4844
 800a224:	65547465 	.word	0x65547465
 800a228:	7265706d 	.word	0x7265706d
 800a22c:	72757461 	.word	0x72757461
 800a230:	6f642065 	.word	0x6f642065
 800a234:	2e2e656e 	.word	0x2e2e656e
 800a238:	0000002e 	.word	0x0000002e
 800a23c:	55424544 	.word	0x55424544
 800a240:	32492b47 	.word	0x32492b47
 800a244:	41552b43 	.word	0x41552b43
 800a248:	69205452 	.word	0x69205452
 800a24c:	2074696e 	.word	0x2074696e
 800a250:	656e6f64 	.word	0x656e6f64
 800a254:	002e2e2e 	.word	0x002e2e2e
 800a258:	534d454d 	.word	0x534d454d
 800a25c:	696e6920 	.word	0x696e6920
 800a260:	6f642074 	.word	0x6f642074
 800a264:	2e2e656e 	.word	0x2e2e656e
 800a268:	0000002e 	.word	0x0000002e
 800a26c:	6f727245 	.word	0x6f727245
 800a270:	454d2072 	.word	0x454d2072
 800a274:	6920534d 	.word	0x6920534d
 800a278:	2c74696e 	.word	0x2c74696e
 800a27c:	74657220 	.word	0x74657220
 800a280:	2e2e7972 	.word	0x2e2e7972
 800a284:	0000002e 	.word	0x0000002e
 800a288:	534d454d 	.word	0x534d454d
 800a28c:	6e6f6320 	.word	0x6e6f6320
 800a290:	20676966 	.word	0x20676966
 800a294:	656e6f64 	.word	0x656e6f64
 800a298:	002e2e2e 	.word	0x002e2e2e
 800a29c:	6f727245 	.word	0x6f727245
 800a2a0:	454d2072 	.word	0x454d2072
 800a2a4:	6320534d 	.word	0x6320534d
 800a2a8:	69666e6f 	.word	0x69666e6f
 800a2ac:	72202c67 	.word	0x72202c67
 800a2b0:	79727465 	.word	0x79727465
 800a2b4:	002e2e2e 	.word	0x002e2e2e
 800a2b8:	65636572 	.word	0x65636572
 800a2bc:	64657669 	.word	0x64657669
 800a2c0:	0a732520 	.word	0x0a732520
 800a2c4:	00000000 	.word	0x00000000
 800a2c8:	51455223 	.word	0x51455223
 800a2cc:	0000002c 	.word	0x0000002c
 800a2d0:	444e4523 	.word	0x444e4523
 800a2d4:	0000002c 	.word	0x0000002c
 800a2d8:	4e4f4323 	.word	0x4e4f4323
 800a2dc:	0000002c 	.word	0x0000002c
 800a2e0:	52455323 	.word	0x52455323
 800a2e4:	0000002c 	.word	0x0000002c

0800a2e8 <atanlo>:
 800a2e8:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 800a2f8:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0800a308 <atanhi>:
 800a308:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 800a318:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
 800a328:	74727173 00000000 0000000a              sqrt........

0800a334 <zeroes.7258>:
 800a334:	30303030 30303030 30303030 30303030     0000000000000000
 800a344:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800a354:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800a364:	00000000 33323130 37363534 62613938     ....0123456789ab
 800a374:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800a384:	00000030                                0...

0800a388 <blanks.7257>:
 800a388:	20202020 20202020 20202020 20202020                     

0800a398 <zeroes.7273>:
 800a398:	30303030 30303030 30303030 30303030     0000000000000000

0800a3a8 <blanks.7272>:
 800a3a8:	20202020 20202020 20202020 20202020                     
 800a3b8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800a3c8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0800a3d8 <__mprec_tens>:
 800a3d8:	00000000 3ff00000 00000000 40240000     .......?......$@
 800a3e8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800a3f8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800a408:	00000000 412e8480 00000000 416312d0     .......A......cA
 800a418:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800a428:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800a438:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800a448:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800a458:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800a468:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800a478:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800a488:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800a498:	79d99db4 44ea7843                       ...yCx.D

0800a4a0 <__mprec_bigtens>:
 800a4a0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800a4b0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800a4c0:	7f73bf3c 75154fdd                       <.s..O.u

0800a4c8 <p05.6087>:
 800a4c8:	00000005 00000019 0000007d              ........}...

0800a4d4 <_ctype_>:
 800a4d4:	20202000 20202020 28282020 20282828     .         ((((( 
 800a4e4:	20202020 20202020 20202020 20202020                     
 800a4f4:	10108820 10101010 10101010 10101010      ...............
 800a504:	04040410 04040404 10040404 10101010     ................
 800a514:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800a524:	01010101 01010101 01010101 10101010     ................
 800a534:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800a544:	02020202 02020202 02020202 10101010     ................
 800a554:	00000020 00000000 00000000 00000000      ...............
	...
