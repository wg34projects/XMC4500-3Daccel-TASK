
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	11 0f 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 bd 09 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0093f8 	.word	0x0c0093f8
 800024c:	20000000 	.word	0x20000000
 8000250:	000009e0 	.word	0x000009e0
 8000254:	0c009dd8 	.word	0x0c009dd8
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0093f8 	.word	0x0c0093f8
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0093f8 	.word	0x0c0093f8
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200009e0 	.word	0x200009e0
 800027c:	000000a0 	.word	0x000000a0
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000294:	0800137d 	.word	0x0800137d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08002009 	.word	0x08002009
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08000f69 	.word	0x08000f69

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <LIS3DH_ReadReg>:
*			: I2C or SPI reading functions
* Input			: Register Address
* Output		: Data REad
* Return		: None
*******************************************************************************/
u8_t LIS3DH_ReadReg(u8_t Reg, u8_t* Data) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]

    //To be completed with either I2c or SPI reading function
    //i.e. *Data = SPI_Mems_Read_Reg( Reg );

    *Data = _i2c_xfer (0, Reg, 0, 1);
 80002c0:	79f9      	ldrb	r1, [r7, #7]
 80002c2:	2301      	movs	r3, #1
 80002c4:	2200      	movs	r2, #0
 80002c6:	2000      	movs	r0, #0
 80002c8:	f000 fd46 	bl	8000d58 <_i2c_xfer>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	701a      	strb	r2, [r3, #0]

    return 1;
 80002d4:	2301      	movs	r3, #1
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop

080002e0 <LIS3DH_WriteReg>:
*			: I2C or SPI writing function
* Input			: Register Address, Data to be written
* Output		: None
* Return		: None
*******************************************************************************/
u8_t LIS3DH_WriteReg(u8_t WriteAddr, u8_t Data) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	460a      	mov	r2, r1
 80002ea:	71fb      	strb	r3, [r7, #7]
 80002ec:	4613      	mov	r3, r2
 80002ee:	71bb      	strb	r3, [r7, #6]

    //To be completed with either I2c or SPI writing function
    //i.e. SPI_Mems_Write_Reg(WriteAddr, Data);

    _i2c_xfer (0, WriteAddr, Data, 0);
 80002f0:	79ba      	ldrb	r2, [r7, #6]
 80002f2:	79f9      	ldrb	r1, [r7, #7]
 80002f4:	2300      	movs	r3, #0
 80002f6:	2000      	movs	r0, #0
 80002f8:	f000 fd2e 	bl	8000d58 <_i2c_xfer>

    return 1;
 80002fc:	2301      	movs	r3, #1
}
 80002fe:	4618      	mov	r0, r3
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop

08000308 <LIS3DH_SetODR>:
* Description    : Sets LIS3DH Output Data Rate
* Input          : Output Data Rate
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetODR(LIS3DH_ODR_t ov) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8000312:	f107 030f 	add.w	r3, r7, #15
 8000316:	4619      	mov	r1, r3
 8000318:	2020      	movs	r0, #32
 800031a:	f7ff ffcb 	bl	80002b4 <LIS3DH_ReadReg>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d101      	bne.n	8000328 <LIS3DH_SetODR+0x20>
        return MEMS_ERROR;
 8000324:	2300      	movs	r3, #0
 8000326:	e018      	b.n	800035a <LIS3DH_SetODR+0x52>

    value &= 0x0f;
 8000328:	7bfb      	ldrb	r3, [r7, #15]
 800032a:	f003 030f 	and.w	r3, r3, #15
 800032e:	b2db      	uxtb	r3, r3
 8000330:	73fb      	strb	r3, [r7, #15]
    value |= ov<<LIS3DH_ODR_BIT;
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	011b      	lsls	r3, r3, #4
 8000336:	b25a      	sxtb	r2, r3
 8000338:	7bfb      	ldrb	r3, [r7, #15]
 800033a:	b25b      	sxtb	r3, r3
 800033c:	4313      	orrs	r3, r2
 800033e:	b25b      	sxtb	r3, r3
 8000340:	b2db      	uxtb	r3, r3
 8000342:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8000344:	7bfb      	ldrb	r3, [r7, #15]
 8000346:	4619      	mov	r1, r3
 8000348:	2020      	movs	r0, #32
 800034a:	f7ff ffc9 	bl	80002e0 <LIS3DH_WriteReg>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d101      	bne.n	8000358 <LIS3DH_SetODR+0x50>
        return MEMS_ERROR;
 8000354:	2300      	movs	r3, #0
 8000356:	e000      	b.n	800035a <LIS3DH_SetODR+0x52>

    return MEMS_SUCCESS;
 8000358:	2301      	movs	r3, #1
}
 800035a:	4618      	mov	r0, r3
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop

08000364 <LIS3DH_SetMode>:
* Description    : Sets LIS3DH Operating Mode
* Input          : Modality (LIS3DH_NORMAL, LIS3DH_LOW_POWER, LIS3DH_POWER_DOWN)
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetMode(LIS3DH_Mode_t md) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
    u8_t value;
    u8_t value2;
    static   u8_t ODR_old_value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 800036e:	f107 030f 	add.w	r3, r7, #15
 8000372:	4619      	mov	r1, r3
 8000374:	2020      	movs	r0, #32
 8000376:	f7ff ff9d 	bl	80002b4 <LIS3DH_ReadReg>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d101      	bne.n	8000384 <LIS3DH_SetMode+0x20>
        return MEMS_ERROR;
 8000380:	2300      	movs	r3, #0
 8000382:	e066      	b.n	8000452 <LIS3DH_SetMode+0xee>

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value2) )
 8000384:	f107 030e 	add.w	r3, r7, #14
 8000388:	4619      	mov	r1, r3
 800038a:	2023      	movs	r0, #35	; 0x23
 800038c:	f7ff ff92 	bl	80002b4 <LIS3DH_ReadReg>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d101      	bne.n	800039a <LIS3DH_SetMode+0x36>
        return MEMS_ERROR;
 8000396:	2300      	movs	r3, #0
 8000398:	e05b      	b.n	8000452 <LIS3DH_SetMode+0xee>

    if((value & 0xF0)==0)
 800039a:	7bfb      	ldrb	r3, [r7, #15]
 800039c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d10b      	bne.n	80003bc <LIS3DH_SetMode+0x58>
        value = value | (ODR_old_value & 0xF0); //if it comes from POWERDOWN
 80003a4:	4b2d      	ldr	r3, [pc, #180]	; (800045c <LIS3DH_SetMode+0xf8>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	b25b      	sxtb	r3, r3
 80003aa:	f023 030f 	bic.w	r3, r3, #15
 80003ae:	b25a      	sxtb	r2, r3
 80003b0:	7bfb      	ldrb	r3, [r7, #15]
 80003b2:	b25b      	sxtb	r3, r3
 80003b4:	4313      	orrs	r3, r2
 80003b6:	b25b      	sxtb	r3, r3
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	73fb      	strb	r3, [r7, #15]

    switch(md) {
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d01e      	beq.n	8000400 <LIS3DH_SetMode+0x9c>
 80003c2:	2b02      	cmp	r3, #2
 80003c4:	d00a      	beq.n	80003dc <LIS3DH_SetMode+0x78>
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d12c      	bne.n	8000424 <LIS3DH_SetMode+0xc0>

    case LIS3DH_POWER_DOWN:
        ODR_old_value = value;
 80003ca:	7bfa      	ldrb	r2, [r7, #15]
 80003cc:	4b23      	ldr	r3, [pc, #140]	; (800045c <LIS3DH_SetMode+0xf8>)
 80003ce:	701a      	strb	r2, [r3, #0]
        value &= 0x0F;
 80003d0:	7bfb      	ldrb	r3, [r7, #15]
 80003d2:	f003 030f 	and.w	r3, r3, #15
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	73fb      	strb	r3, [r7, #15]
        break;
 80003da:	e025      	b.n	8000428 <LIS3DH_SetMode+0xc4>

    case LIS3DH_NORMAL:
        value &= 0xF7;
 80003dc:	7bfb      	ldrb	r3, [r7, #15]
 80003de:	f023 0308 	bic.w	r3, r3, #8
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	73fb      	strb	r3, [r7, #15]
        value |= (MEMS_RESET<<LIS3DH_LPEN);
 80003e6:	7bfb      	ldrb	r3, [r7, #15]
 80003e8:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 80003ea:	7bbb      	ldrb	r3, [r7, #14]
 80003ec:	f023 0308 	bic.w	r3, r3, #8
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_SET<<LIS3DH_HR);   //set HighResolution_BIT
 80003f4:	7bbb      	ldrb	r3, [r7, #14]
 80003f6:	f043 0308 	orr.w	r3, r3, #8
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	73bb      	strb	r3, [r7, #14]
        break;
 80003fe:	e013      	b.n	8000428 <LIS3DH_SetMode+0xc4>

    case LIS3DH_LOW_POWER:
        value &= 0xF7;
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	f023 0308 	bic.w	r3, r3, #8
 8000406:	b2db      	uxtb	r3, r3
 8000408:	73fb      	strb	r3, [r7, #15]
        value |=  (MEMS_SET<<LIS3DH_LPEN);
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	f043 0308 	orr.w	r3, r3, #8
 8000410:	b2db      	uxtb	r3, r3
 8000412:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 8000414:	7bbb      	ldrb	r3, [r7, #14]
 8000416:	f023 0308 	bic.w	r3, r3, #8
 800041a:	b2db      	uxtb	r3, r3
 800041c:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_RESET<<LIS3DH_HR); //reset HighResolution_BIT
 800041e:	7bbb      	ldrb	r3, [r7, #14]
 8000420:	73bb      	strb	r3, [r7, #14]
        break;
 8000422:	e001      	b.n	8000428 <LIS3DH_SetMode+0xc4>

    default:
        return MEMS_ERROR;
 8000424:	2300      	movs	r3, #0
 8000426:	e014      	b.n	8000452 <LIS3DH_SetMode+0xee>
    }

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	4619      	mov	r1, r3
 800042c:	2020      	movs	r0, #32
 800042e:	f7ff ff57 	bl	80002e0 <LIS3DH_WriteReg>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d101      	bne.n	800043c <LIS3DH_SetMode+0xd8>
        return MEMS_ERROR;
 8000438:	2300      	movs	r3, #0
 800043a:	e00a      	b.n	8000452 <LIS3DH_SetMode+0xee>

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value2) )
 800043c:	7bbb      	ldrb	r3, [r7, #14]
 800043e:	4619      	mov	r1, r3
 8000440:	2023      	movs	r0, #35	; 0x23
 8000442:	f7ff ff4d 	bl	80002e0 <LIS3DH_WriteReg>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d101      	bne.n	8000450 <LIS3DH_SetMode+0xec>
        return MEMS_ERROR;
 800044c:	2300      	movs	r3, #0
 800044e:	e000      	b.n	8000452 <LIS3DH_SetMode+0xee>

    return MEMS_SUCCESS;
 8000450:	2301      	movs	r3, #1
}
 8000452:	4618      	mov	r0, r3
 8000454:	3710      	adds	r7, #16
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	200009e0 	.word	0x200009e0

08000460 <LIS3DH_SetAxis>:
* Input          : LIS3DH_X_ENABLE/DISABLE | LIS3DH_Y_ENABLE/DISABLE | LIS3DH_Z_ENABLE/DISABLE
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetAxis(LIS3DH_Axis_t axis) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 800046a:	f107 030f 	add.w	r3, r7, #15
 800046e:	4619      	mov	r1, r3
 8000470:	2020      	movs	r0, #32
 8000472:	f7ff ff1f 	bl	80002b4 <LIS3DH_ReadReg>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d101      	bne.n	8000480 <LIS3DH_SetAxis+0x20>
        return MEMS_ERROR;
 800047c:	2300      	movs	r3, #0
 800047e:	e017      	b.n	80004b0 <LIS3DH_SetAxis+0x50>
    value &= 0xF8;
 8000480:	7bfb      	ldrb	r3, [r7, #15]
 8000482:	f023 0307 	bic.w	r3, r3, #7
 8000486:	b2db      	uxtb	r3, r3
 8000488:	73fb      	strb	r3, [r7, #15]
    value |= (0x07 & axis);
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	f003 0307 	and.w	r3, r3, #7
 8000490:	b2da      	uxtb	r2, r3
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	4313      	orrs	r3, r2
 8000496:	b2db      	uxtb	r3, r3
 8000498:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 800049a:	7bfb      	ldrb	r3, [r7, #15]
 800049c:	4619      	mov	r1, r3
 800049e:	2020      	movs	r0, #32
 80004a0:	f7ff ff1e 	bl	80002e0 <LIS3DH_WriteReg>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d101      	bne.n	80004ae <LIS3DH_SetAxis+0x4e>
        return MEMS_ERROR;
 80004aa:	2300      	movs	r3, #0
 80004ac:	e000      	b.n	80004b0 <LIS3DH_SetAxis+0x50>

    return MEMS_SUCCESS;
 80004ae:	2301      	movs	r3, #1
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <LIS3DH_SetFullScale>:
* Description    : Sets the LIS3DH FullScale
* Input          : LIS3DH_FULLSCALE_2/LIS3DH_FULLSCALE_4/LIS3DH_FULLSCALE_8/LIS3DH_FULLSCALE_16
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetFullScale(LIS3DH_Fullscale_t fs) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 80004c2:	f107 030f 	add.w	r3, r7, #15
 80004c6:	4619      	mov	r1, r3
 80004c8:	2023      	movs	r0, #35	; 0x23
 80004ca:	f7ff fef3 	bl	80002b4 <LIS3DH_ReadReg>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d101      	bne.n	80004d8 <LIS3DH_SetFullScale+0x20>
        return MEMS_ERROR;
 80004d4:	2300      	movs	r3, #0
 80004d6:	e018      	b.n	800050a <LIS3DH_SetFullScale+0x52>

    value &= 0xCF;
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	73fb      	strb	r3, [r7, #15]
    value |= (fs<<LIS3DH_FS);
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	011b      	lsls	r3, r3, #4
 80004e6:	b25a      	sxtb	r2, r3
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	b25b      	sxtb	r3, r3
 80004ec:	4313      	orrs	r3, r2
 80004ee:	b25b      	sxtb	r3, r3
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 80004f4:	7bfb      	ldrb	r3, [r7, #15]
 80004f6:	4619      	mov	r1, r3
 80004f8:	2023      	movs	r0, #35	; 0x23
 80004fa:	f7ff fef1 	bl	80002e0 <LIS3DH_WriteReg>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d101      	bne.n	8000508 <LIS3DH_SetFullScale+0x50>
        return MEMS_ERROR;
 8000504:	2300      	movs	r3, #0
 8000506:	e000      	b.n	800050a <LIS3DH_SetFullScale+0x52>

    return MEMS_SUCCESS;
 8000508:	2301      	movs	r3, #1
}
 800050a:	4618      	mov	r0, r3
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop

08000514 <LIS3DH_SetIntConfiguration>:
* Input          : LIS3DH_INT1_AND/OR | LIS3DH_INT1_ZHIE_ENABLE/DISABLE | LIS3DH_INT1_ZLIE_ENABLE/DISABLE...
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntConfiguration(LIS3DH_Int1Conf_t ic) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 800051e:	f107 030f 	add.w	r3, r7, #15
 8000522:	4619      	mov	r1, r3
 8000524:	2030      	movs	r0, #48	; 0x30
 8000526:	f7ff fec5 	bl	80002b4 <LIS3DH_ReadReg>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d101      	bne.n	8000534 <LIS3DH_SetIntConfiguration+0x20>
        return MEMS_ERROR;
 8000530:	2300      	movs	r3, #0
 8000532:	e014      	b.n	800055e <LIS3DH_SetIntConfiguration+0x4a>

    value &= 0x40;
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800053a:	b2db      	uxtb	r3, r3
 800053c:	73fb      	strb	r3, [r7, #15]
    value |= ic;
 800053e:	7bfa      	ldrb	r2, [r7, #15]
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	4313      	orrs	r3, r2
 8000544:	b2db      	uxtb	r3, r3
 8000546:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	4619      	mov	r1, r3
 800054c:	2030      	movs	r0, #48	; 0x30
 800054e:	f7ff fec7 	bl	80002e0 <LIS3DH_WriteReg>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d101      	bne.n	800055c <LIS3DH_SetIntConfiguration+0x48>
        return MEMS_ERROR;
 8000558:	2300      	movs	r3, #0
 800055a:	e000      	b.n	800055e <LIS3DH_SetIntConfiguration+0x4a>

    return MEMS_SUCCESS;
 800055c:	2301      	movs	r3, #1
}
 800055e:	4618      	mov	r0, r3
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop

08000568 <LIS3DH_SetIntMode>:
* Input          : LIS3DH_INT_MODE_OR, LIS3DH_INT_MODE_6D_MOVEMENT, LIS3DH_INT_MODE_AND,
				   LIS3DH_INT_MODE_6D_POSITION
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntMode(LIS3DH_Int1Mode_t int_mode) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 8000572:	f107 030f 	add.w	r3, r7, #15
 8000576:	4619      	mov	r1, r3
 8000578:	2030      	movs	r0, #48	; 0x30
 800057a:	f7ff fe9b 	bl	80002b4 <LIS3DH_ReadReg>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d101      	bne.n	8000588 <LIS3DH_SetIntMode+0x20>
        return MEMS_ERROR;
 8000584:	2300      	movs	r3, #0
 8000586:	e018      	b.n	80005ba <LIS3DH_SetIntMode+0x52>

    value &= 0x3F;
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800058e:	b2db      	uxtb	r3, r3
 8000590:	73fb      	strb	r3, [r7, #15]
    value |= (int_mode<<LIS3DH_INT_6D);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	019b      	lsls	r3, r3, #6
 8000596:	b25a      	sxtb	r2, r3
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	b25b      	sxtb	r3, r3
 800059c:	4313      	orrs	r3, r2
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	4619      	mov	r1, r3
 80005a8:	2030      	movs	r0, #48	; 0x30
 80005aa:	f7ff fe99 	bl	80002e0 <LIS3DH_WriteReg>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d101      	bne.n	80005b8 <LIS3DH_SetIntMode+0x50>
        return MEMS_ERROR;
 80005b4:	2300      	movs	r3, #0
 80005b6:	e000      	b.n	80005ba <LIS3DH_SetIntMode+0x52>

    return MEMS_SUCCESS;
 80005b8:	2301      	movs	r3, #1
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop

080005c4 <LIS3DH_Get6DPosition>:
* Description    : 6D, 4D Interrupt Position Detect
* Input          : Byte to empty by POSITION_6D_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_Get6DPosition(u8_t* val) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_SRC, &value) )
 80005cc:	f107 030f 	add.w	r3, r7, #15
 80005d0:	4619      	mov	r1, r3
 80005d2:	2031      	movs	r0, #49	; 0x31
 80005d4:	f7ff fe6e 	bl	80002b4 <LIS3DH_ReadReg>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d101      	bne.n	80005e2 <LIS3DH_Get6DPosition+0x1e>
        return MEMS_ERROR;
 80005de:	2300      	movs	r3, #0
 80005e0:	e065      	b.n	80006ae <LIS3DH_Get6DPosition+0xea>

    value &= 0x7F;
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	73fb      	strb	r3, [r7, #15]

    switch (value) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3b41      	subs	r3, #65	; 0x41
 80005f0:	2b1f      	cmp	r3, #31
 80005f2:	d85b      	bhi.n	80006ac <LIS3DH_Get6DPosition+0xe8>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <LIS3DH_Get6DPosition+0x38>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	0800068d 	.word	0x0800068d
 8000600:	08000685 	.word	0x08000685
 8000604:	080006ad 	.word	0x080006ad
 8000608:	0800067d 	.word	0x0800067d
 800060c:	080006ad 	.word	0x080006ad
 8000610:	080006ad 	.word	0x080006ad
 8000614:	080006ad 	.word	0x080006ad
 8000618:	08000695 	.word	0x08000695
 800061c:	080006ad 	.word	0x080006ad
 8000620:	080006ad 	.word	0x080006ad
 8000624:	080006ad 	.word	0x080006ad
 8000628:	080006ad 	.word	0x080006ad
 800062c:	080006ad 	.word	0x080006ad
 8000630:	080006ad 	.word	0x080006ad
 8000634:	080006ad 	.word	0x080006ad
 8000638:	080006a5 	.word	0x080006a5
 800063c:	080006ad 	.word	0x080006ad
 8000640:	080006ad 	.word	0x080006ad
 8000644:	080006ad 	.word	0x080006ad
 8000648:	080006ad 	.word	0x080006ad
 800064c:	080006ad 	.word	0x080006ad
 8000650:	080006ad 	.word	0x080006ad
 8000654:	080006ad 	.word	0x080006ad
 8000658:	080006ad 	.word	0x080006ad
 800065c:	080006ad 	.word	0x080006ad
 8000660:	080006ad 	.word	0x080006ad
 8000664:	080006ad 	.word	0x080006ad
 8000668:	080006ad 	.word	0x080006ad
 800066c:	080006ad 	.word	0x080006ad
 8000670:	080006ad 	.word	0x080006ad
 8000674:	080006ad 	.word	0x080006ad
 8000678:	0800069d 	.word	0x0800069d
    case LIS3DH_UP_SX:
        *val = LIS3DH_UP_SX;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2244      	movs	r2, #68	; 0x44
 8000680:	701a      	strb	r2, [r3, #0]
        break;
 8000682:	e013      	b.n	80006ac <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_UP_DX:
        *val = LIS3DH_UP_DX;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2242      	movs	r2, #66	; 0x42
 8000688:	701a      	strb	r2, [r3, #0]
        break;
 800068a:	e00f      	b.n	80006ac <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_SX:
        *val = LIS3DH_DW_SX;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2241      	movs	r2, #65	; 0x41
 8000690:	701a      	strb	r2, [r3, #0]
        break;
 8000692:	e00b      	b.n	80006ac <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_DX:
        *val = LIS3DH_DW_DX;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2248      	movs	r2, #72	; 0x48
 8000698:	701a      	strb	r2, [r3, #0]
        break;
 800069a:	e007      	b.n	80006ac <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_TOP:
        *val = LIS3DH_TOP;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2260      	movs	r2, #96	; 0x60
 80006a0:	701a      	strb	r2, [r3, #0]
        break;
 80006a2:	e003      	b.n	80006ac <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_BOTTOM:
        *val = LIS3DH_BOTTOM;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2250      	movs	r2, #80	; 0x50
 80006a8:	701a      	strb	r2, [r3, #0]
        break;
 80006aa:	bf00      	nop
    }

    return MEMS_SUCCESS;
 80006ac:	2301      	movs	r3, #1
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop

080006b8 <LIS3DH_SetInt1Threshold>:
* Description    : Sets Interrupt 1 Threshold
* Input          : Threshold = [0,31]
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetInt1Threshold(u8_t ths) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
    if (ths > 127)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	da01      	bge.n	80006ce <LIS3DH_SetInt1Threshold+0x16>
        return MEMS_ERROR;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e00a      	b.n	80006e4 <LIS3DH_SetInt1Threshold+0x2c>

    if( !LIS3DH_WriteReg(LIS3DH_INT1_THS, ths) )
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4619      	mov	r1, r3
 80006d2:	2032      	movs	r0, #50	; 0x32
 80006d4:	f7ff fe04 	bl	80002e0 <LIS3DH_WriteReg>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d101      	bne.n	80006e2 <LIS3DH_SetInt1Threshold+0x2a>
        return MEMS_ERROR;
 80006de:	2300      	movs	r3, #0
 80006e0:	e000      	b.n	80006e4 <LIS3DH_SetInt1Threshold+0x2c>

    return MEMS_SUCCESS;
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <LIS3DH_GetAccAxesRaw>:
* Description    : Read the Acceleration Values Output Registers
* Input          : buffer to empity by AxesRaw_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_GetAccAxesRaw(AxesRaw_t* buff) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    i16_t value;
    u8_t *valueL = (u8_t *)(&value);
 80006f4:	f107 030e 	add.w	r3, r7, #14
 80006f8:	617b      	str	r3, [r7, #20]
    u8_t *valueH = ((u8_t *)(&value)+1);
 80006fa:	f107 030e 	add.w	r3, r7, #14
 80006fe:	3301      	adds	r3, #1
 8000700:	613b      	str	r3, [r7, #16]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_L, valueL) )
 8000702:	6979      	ldr	r1, [r7, #20]
 8000704:	2028      	movs	r0, #40	; 0x28
 8000706:	f7ff fdd5 	bl	80002b4 <LIS3DH_ReadReg>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <LIS3DH_GetAccAxesRaw+0x28>
        return MEMS_ERROR;
 8000710:	2300      	movs	r3, #0
 8000712:	e039      	b.n	8000788 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_H, valueH) )
 8000714:	6939      	ldr	r1, [r7, #16]
 8000716:	2029      	movs	r0, #41	; 0x29
 8000718:	f7ff fdcc 	bl	80002b4 <LIS3DH_ReadReg>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d101      	bne.n	8000726 <LIS3DH_GetAccAxesRaw+0x3a>
        return MEMS_ERROR;
 8000722:	2300      	movs	r3, #0
 8000724:	e030      	b.n	8000788 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_X = value;
 8000726:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	801a      	strh	r2, [r3, #0]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_L, valueL) )
 800072e:	6979      	ldr	r1, [r7, #20]
 8000730:	202a      	movs	r0, #42	; 0x2a
 8000732:	f7ff fdbf 	bl	80002b4 <LIS3DH_ReadReg>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d101      	bne.n	8000740 <LIS3DH_GetAccAxesRaw+0x54>
        return MEMS_ERROR;
 800073c:	2300      	movs	r3, #0
 800073e:	e023      	b.n	8000788 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_H, valueH) )
 8000740:	6939      	ldr	r1, [r7, #16]
 8000742:	202b      	movs	r0, #43	; 0x2b
 8000744:	f7ff fdb6 	bl	80002b4 <LIS3DH_ReadReg>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d101      	bne.n	8000752 <LIS3DH_GetAccAxesRaw+0x66>
        return MEMS_ERROR;
 800074e:	2300      	movs	r3, #0
 8000750:	e01a      	b.n	8000788 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Y = value;
 8000752:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	805a      	strh	r2, [r3, #2]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_L, valueL) )
 800075a:	6979      	ldr	r1, [r7, #20]
 800075c:	202c      	movs	r0, #44	; 0x2c
 800075e:	f7ff fda9 	bl	80002b4 <LIS3DH_ReadReg>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d101      	bne.n	800076c <LIS3DH_GetAccAxesRaw+0x80>
        return MEMS_ERROR;
 8000768:	2300      	movs	r3, #0
 800076a:	e00d      	b.n	8000788 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_H, valueH) )
 800076c:	6939      	ldr	r1, [r7, #16]
 800076e:	202d      	movs	r0, #45	; 0x2d
 8000770:	f7ff fda0 	bl	80002b4 <LIS3DH_ReadReg>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d101      	bne.n	800077e <LIS3DH_GetAccAxesRaw+0x92>
        return MEMS_ERROR;
 800077a:	2300      	movs	r3, #0
 800077c:	e004      	b.n	8000788 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Z = value;
 800077e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	809a      	strh	r2, [r3, #4]

    return MEMS_SUCCESS;
 8000786:	2301      	movs	r3, #1
}
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	db0b      	blt.n	80007ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007a2:	4909      	ldr	r1, [pc, #36]	; (80007c8 <__NVIC_EnableIRQ+0x38>)
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	095b      	lsrs	r3, r3, #5
 80007aa:	79fa      	ldrb	r2, [r7, #7]
 80007ac:	f002 021f 	and.w	r2, r2, #31
 80007b0:	2001      	movs	r0, #1
 80007b2:	fa00 f202 	lsl.w	r2, r0, r2
 80007b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000e100 	.word	0xe000e100

080007cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	db0a      	blt.n	80007f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e0:	490d      	ldr	r1, [pc, #52]	; (8000818 <__NVIC_SetPriority+0x4c>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	0092      	lsls	r2, r2, #2
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	440b      	add	r3, r1
 80007f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f4:	e00a      	b.n	800080c <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f6:	4909      	ldr	r1, [pc, #36]	; (800081c <__NVIC_SetPriority+0x50>)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f003 030f 	and.w	r3, r3, #15
 80007fe:	3b04      	subs	r3, #4
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	0092      	lsls	r2, r2, #2
 8000806:	b2d2      	uxtb	r2, r2
 8000808:	440b      	add	r3, r1
 800080a:	761a      	strb	r2, [r3, #24]
  }
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	e000e100 	.word	0xe000e100
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]
 800082c:	4613      	mov	r3, r2
 800082e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000830:	78f8      	ldrb	r0, [r7, #3]
 8000832:	78fb      	ldrb	r3, [r7, #3]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	3306      	adds	r3, #6
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000842:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000844:	431a      	orrs	r2, r3
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	1d83      	adds	r3, r0, #6
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	440b      	add	r3, r1
 800084e:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000868:	b2db      	uxtb	r3, r3
 800086a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800086e:	b2db      	uxtb	r3, r3
}
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	431a      	orrs	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop

080008a4 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	f023 030f 	bic.w	r3, r3, #15
 80008dc:	f043 0202 	orr.w	r2, r3, #2
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	460b      	mov	r3, r1
 80008fa:	70fb      	strb	r3, [r7, #3]
 80008fc:	4613      	mov	r3, r2
 80008fe:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
 8000900:	78f8      	ldrb	r0, [r7, #3]
 8000902:	78fb      	ldrb	r3, [r7, #3]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	3306      	adds	r3, #6
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f023 0250 	bic.w	r2, r3, #80	; 0x50
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	1d83      	adds	r3, r0, #6
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	440b      	add	r3, r1
 800091a:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 800091c:	78ba      	ldrb	r2, [r7, #2]
 800091e:	78fb      	ldrb	r3, [r7, #3]
 8000920:	4619      	mov	r1, r3
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ff7c 	bl	8000820 <XMC_USIC_CH_SetInputSource>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <_init_uart0_ch0>:
    .stop_bits = 1U,
    .baudrate = 115200U
};
/****************************************************************** FUNCTIONS */
void _init_uart0_ch0()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    /* USIC channels initialization */
    XMC_UART_CH_Init (XMC_UART0_CH0, &uart_config);
 8000934:	491c      	ldr	r1, [pc, #112]	; (80009a8 <_init_uart0_ch0+0x78>)
 8000936:	481d      	ldr	r0, [pc, #116]	; (80009ac <_init_uart0_ch0+0x7c>)
 8000938:	f000 ffa2 	bl	8001880 <XMC_UART_CH_Init>

    XMC_UART_CH_SetInputSource (XMC_UART0_CH0, XMC_UART_CH_INPUT_RXD,
 800093c:	2201      	movs	r2, #1
 800093e:	2100      	movs	r1, #0
 8000940:	481a      	ldr	r0, [pc, #104]	; (80009ac <_init_uart0_ch0+0x7c>)
 8000942:	f7ff ffd5 	bl	80008f0 <XMC_UART_CH_SetInputSource>
    /* FIFOs initialization for both channels:
     *  8 entries for TxFIFO from point 0, LIMIT=1
     *  8 entries for RxFIFO from point 8, LIMIT=7 (SRBI is set if all 8*data have
     *                                              been received)
     *  */
    XMC_USIC_CH_TXFIFO_Configure (XMC_UART0_CH0, 0, XMC_USIC_CH_FIFO_SIZE_8WORDS, TX_FIFO_INITIAL_LIMIT);
 8000946:	2301      	movs	r3, #1
 8000948:	2203      	movs	r2, #3
 800094a:	2100      	movs	r1, #0
 800094c:	4817      	ldr	r0, [pc, #92]	; (80009ac <_init_uart0_ch0+0x7c>)
 800094e:	f001 fac1 	bl	8001ed4 <XMC_USIC_CH_TXFIFO_Configure>
    XMC_USIC_CH_RXFIFO_Configure (XMC_UART0_CH0, 8, XMC_USIC_CH_FIFO_SIZE_8WORDS, RX_FIFO_INITIAL_LIMIT);
 8000952:	2301      	movs	r3, #1
 8000954:	2203      	movs	r2, #3
 8000956:	2108      	movs	r1, #8
 8000958:	4814      	ldr	r0, [pc, #80]	; (80009ac <_init_uart0_ch0+0x7c>)
 800095a:	f001 fae3 	bl	8001f24 <XMC_USIC_CH_RXFIFO_Configure>

    /* Enabling events for TX FIFO and RX FIFO */
    XMC_USIC_CH_RXFIFO_EnableEvent (XMC_UART0_CH0,
 800095e:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8000962:	4812      	ldr	r0, [pc, #72]	; (80009ac <_init_uart0_ch0+0x7c>)
 8000964:	f7ff ff8a 	bl	800087c <XMC_USIC_CH_RXFIFO_EnableEvent>
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE);

    /* Connecting the previously enabled events to a Service Request line number */
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2110      	movs	r1, #16
 800096c:	480f      	ldr	r0, [pc, #60]	; (80009ac <_init_uart0_ch0+0x7c>)
 800096e:	f001 fb03 	bl	8001f78 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2113      	movs	r1, #19
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <_init_uart0_ch0+0x7c>)
 8000978:	f001 fafe 	bl	8001f78 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>

    /* Start USIC operation as UART */
    XMC_UART_CH_Start (XMC_UART0_CH0);
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <_init_uart0_ch0+0x7c>)
 800097e:	f7ff ffa5 	bl	80008cc <XMC_UART_CH_Start>

    /*Initialization of the necessary ports*/
    XMC_GPIO_Init (UART_TX, &uart_tx);
 8000982:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <_init_uart0_ch0+0x80>)
 8000984:	2105      	movs	r1, #5
 8000986:	480b      	ldr	r0, [pc, #44]	; (80009b4 <_init_uart0_ch0+0x84>)
 8000988:	f000 feba 	bl	8001700 <XMC_GPIO_Init>
    XMC_GPIO_Init (UART_RX, &uart_rx);
 800098c:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <_init_uart0_ch0+0x88>)
 800098e:	2104      	movs	r1, #4
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <_init_uart0_ch0+0x84>)
 8000992:	f000 feb5 	bl	8001700 <XMC_GPIO_Init>

    /* Configuring priority and enabling NVIC IRQ for the defined service request
    line number */
    NVIC_SetPriority (USIC0_0_IRQn, 63U);
 8000996:	213f      	movs	r1, #63	; 0x3f
 8000998:	2054      	movs	r0, #84	; 0x54
 800099a:	f7ff ff17 	bl	80007cc <__NVIC_SetPriority>
    NVIC_EnableIRQ (USIC0_0_IRQn);
 800099e:	2054      	movs	r0, #84	; 0x54
 80009a0:	f7ff fef6 	bl	8000790 <__NVIC_EnableIRQ>

    return;
 80009a4:	bf00      	nop
}
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000000c 	.word	0x2000000c
 80009ac:	40030000 	.word	0x40030000
 80009b0:	20000000 	.word	0x20000000
 80009b4:	48028100 	.word	0x48028100
 80009b8:	20000a24 	.word	0x20000a24

080009bc <USIC0_0_IRQHandler>:

void USIC0_0_IRQHandler (void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	71fb      	strb	r3, [r7, #7]

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 80009c6:	e01f      	b.n	8000a08 <USIC0_0_IRQHandler+0x4c>
        rx_tmp = XMC_UART_CH_GetReceivedData (XMC_UART0_CH0);
 80009c8:	4816      	ldr	r0, [pc, #88]	; (8000a24 <USIC0_0_IRQHandler+0x68>)
 80009ca:	f000 ffd7 	bl	800197c <XMC_UART_CH_GetReceivedData>
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]

        if ( (rx_tmp != STRING_CR) && (!str_available)) {
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b0d      	cmp	r3, #13
 80009d6:	d011      	beq.n	80009fc <USIC0_0_IRQHandler+0x40>
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <USIC0_0_IRQHandler+0x6c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	f083 0301 	eor.w	r3, r3, #1
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d00a      	beq.n	80009fc <USIC0_0_IRQHandler+0x40>
            rx_buffer[rx_ctr++] = rx_tmp;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <USIC0_0_IRQHandler+0x70>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	b2d1      	uxtb	r1, r2
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <USIC0_0_IRQHandler+0x70>)
 80009f0:	7011      	strb	r1, [r2, #0]
 80009f2:	4619      	mov	r1, r3
 80009f4:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <USIC0_0_IRQHandler+0x74>)
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	5453      	strb	r3, [r2, r1]
 80009fa:	e005      	b.n	8000a08 <USIC0_0_IRQHandler+0x4c>
        } else {
            rx_ctr = 0;
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <USIC0_0_IRQHandler+0x70>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
            str_available = true;
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <USIC0_0_IRQHandler+0x6c>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
{
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 8000a08:	4806      	ldr	r0, [pc, #24]	; (8000a24 <USIC0_0_IRQHandler+0x68>)
 8000a0a:	f7ff ff4b 	bl	80008a4 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	f083 0301 	eor.w	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d1d6      	bne.n	80009c8 <USIC0_0_IRQHandler+0xc>
        } else {
            rx_ctr = 0;
            str_available = true;
        }
    }
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40030000 	.word	0x40030000
 8000a28:	200009e1 	.word	0x200009e1
 8000a2c:	20000a30 	.word	0x20000a30
 8000a30:	200009e4 	.word	0x200009e4

08000a34 <_uart_printf>:

    return 0;
}

uint8_t _uart_printf (char *fmt, ...)
{
 8000a34:	b40f      	push	{r0, r1, r2, r3}
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b0c2      	sub	sp, #264	; 0x108
 8000a3a:	af00      	add	r7, sp, #0
    va_list arg_ptr;
    char buffer[BUFFER_SIZE_PRINTF];

    if (fmt == NULL)  {
 8000a3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d101      	bne.n	8000a48 <_uart_printf+0x14>
        return ERR_OUT_OF_MEMORY;
 8000a44:	2364      	movs	r3, #100	; 0x64
 8000a46:	e010      	b.n	8000a6a <_uart_printf+0x36>
    }

    va_start (arg_ptr, fmt);
 8000a48:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000a4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    vsprintf (buffer, fmt, arg_ptr);
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000a56:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 f8ac 	bl	8003bb8 <vsprintf>
    va_end (arg_ptr);

    _uart_send_string (buffer);
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f80a 	bl	8000a7c <_uart_send_string>
    return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000a70:	46bd      	mov	sp, r7
 8000a72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a76:	b004      	add	sp, #16
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <_uart_send_string>:

uint8_t _uart_send_string (char *str)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d101      	bne.n	8000a8e <_uart_send_string+0x12>
        return ERR_OUT_OF_MEMORY;
 8000a8a:	2364      	movs	r3, #100	; 0x64
 8000a8c:	e01d      	b.n	8000aca <_uart_send_string+0x4e>
    }

    for (int i = 0; i < strlen (str); i++) {
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	e012      	b.n	8000aba <_uart_send_string+0x3e>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 8000a94:	bf00      	nop
 8000a96:	480f      	ldr	r0, [pc, #60]	; (8000ad4 <_uart_send_string+0x58>)
 8000a98:	f7ff fee0 	bl	800085c <XMC_USIC_CH_GetTransmitBufferStatus>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b80      	cmp	r3, #128	; 0x80
 8000aa0:	d0f9      	beq.n	8000a96 <_uart_send_string+0x1a>
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	4619      	mov	r1, r3
 8000aae:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <_uart_send_string+0x58>)
 8000ab0:	f000 ff3e 	bl	8001930 <XMC_UART_CH_Transmit>
{
    if (str == NULL) {
        return ERR_OUT_OF_MEMORY;
    }

    for (int i = 0; i < strlen (str); i++) {
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f001 fc20 	bl	8002300 <strlen>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d8e5      	bhi.n	8000a94 <_uart_send_string+0x18>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
    }
    return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40030000 	.word	0x40030000

08000ad8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ae0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ae4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d013      	beq.n	8000b18 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000af0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000af4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000af8:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b00:	e000      	b.n	8000b04 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b02:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0f9      	beq.n	8000b02 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b0e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	b2d2      	uxtb	r2, r2
 8000b16:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
    // P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
    // PORT2->HWSEL ... clear bits [3:2]
    PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <initRetargetSwo+0x7c>)
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <initRetargetSwo+0x7c>)
 8000b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b32:	f023 030c 	bic.w	r3, r3, #12
 8000b36:	6753      	str	r3, [r2, #116]	; 0x74
    // PORT2->HWSEL ... set bit [2] -> HWO0
    PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 8000b38:	4a1a      	ldr	r2, [pc, #104]	; (8000ba4 <initRetargetSwo+0x7c>)
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <initRetargetSwo+0x7c>)
 8000b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6753      	str	r3, [r2, #116]	; 0x74

    // Enable trace systems
    // Source: ARMv7-M Architecture Reference Manual
    // DEMCR = Debug Exception and Monitor Control Register
    //         TRCENA ... global enable for DWT and ITM blocks
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000b44:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <initRetargetSwo+0x80>)
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <initRetargetSwo+0x80>)
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b4e:	60d3      	str	r3, [r2, #12]
    // SWO baud rate prescaler value
    // ACPR = Asynchronous Clock Prescaler Register
    //        fSWO = fCPU / (SWOSCALAR + 1)
    //        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
    //        fCPU = 120MHz
    TPI->ACPR = 119UL;
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <initRetargetSwo+0x84>)
 8000b52:	2277      	movs	r2, #119	; 0x77
 8000b54:	611a      	str	r2, [r3, #16]
    // Source: ARMv7-M Architecture Reference Manual
    // SPPR = Selected Pin Control Register
    //        0x0 ... Synchronous Trace Port Mode
    //        0x1 ... Asynchronous Serial Wire Output (Manchester)
    //        0x2 ... Asynchronous Serial Wire Output (NRZ)
    TPI->SPPR = 0x2UL;
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <initRetargetSwo+0x84>)
 8000b58:	2202      	movs	r2, #2
 8000b5a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    // Source: ARM Cortex-M4 Processor Technical Reference Manual
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    // FFCR = Formatter and Flash Control Register
    //        0x0 ... continuous formatting disabled
    //        0x1 ... continuous formatting enabled
    TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 8000b5e:	4a13      	ldr	r2, [pc, #76]	; (8000bac <initRetargetSwo+0x84>)
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <initRetargetSwo+0x84>)
 8000b62:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8000b66:	f023 0302 	bic.w	r3, r3, #2
 8000b6a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

    // Unlock ITM
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    ITM->LAR = 0xC5ACCE55;
 8000b6e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b72:	4a0f      	ldr	r2, [pc, #60]	; (8000bb0 <initRetargetSwo+0x88>)
 8000b74:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TCR = Trace Control Register
    //       ITMENA ... enable ITM
    ITM->TCR |= ITM_TCR_ITMENA_Msk;
 8000b78:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000b7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b80:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TER = Trace Enable Register
    //       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
    ITM->TER = 0xFFFFFFFF;
 8000b8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	48028200 	.word	0x48028200
 8000ba8:	e000edf0 	.word	0xe000edf0
 8000bac:	e0040000 	.word	0xe0040000
 8000bb0:	c5acce55 	.word	0xc5acce55

08000bb4 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
    int i;

    for (i = 0; i < nbytes; i++) {
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	e009      	b.n	8000bda <_write+0x26>
        ITM_SendChar ( (*buf++));
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	1c5a      	adds	r2, r3, #1
 8000bca:	60ba      	str	r2, [r7, #8]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff82 	bl	8000ad8 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
    int i;

    for (i = 0; i < nbytes; i++) {
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	dbf1      	blt.n	8000bc6 <_write+0x12>
        ITM_SendChar ( (*buf++));
    }
    return nbytes;
 8000be2:	687b      	ldr	r3, [r7, #4]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	70fb      	strb	r3, [r7, #3]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000bfc:	78f8      	ldrb	r0, [r7, #3]
 8000bfe:	78fb      	ldrb	r3, [r7, #3]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	3306      	adds	r3, #6
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4413      	add	r3, r2
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000c0e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000c10:	431a      	orrs	r2, r3
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	1d83      	adds	r3, r0, #6
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	440b      	add	r3, r1
 8000c1a:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c34:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f023 020f 	bic.w	r2, r3, #15
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8000c74:	2104      	movs	r1, #4
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffe4 	bl	8000c44 <XMC_USIC_CH_SetMode>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <XMC_I2C_CH_SetInputSource>:
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 *
 */
__STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT_t input, const uint8_t source)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
 8000c90:	4613      	mov	r3, r2
 8000c92:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX0CR_DSEN_Msk;
 8000c94:	78f8      	ldrb	r0, [r7, #3]
 8000c96:	78fb      	ldrb	r3, [r7, #3]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	3306      	adds	r3, #6
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8000ca6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	1d83      	adds	r3, r0, #6
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000cb4:	78ba      	ldrb	r2, [r7, #2]
 8000cb6:	78fb      	ldrb	r3, [r7, #3]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ff96 	bl	8000bec <XMC_USIC_CH_SetInputSource>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <_init_i2c1_ch0>:
 *         P0_5 & P0_11
 *  @param none
 *  @return on success this function returns 0
 */
uint8_t _init_i2c1_ch0 (void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
    XMC_I2C_CH_Init (XMC_I2C1_CH0, &i2c_cfg);
 8000d08:	490e      	ldr	r1, [pc, #56]	; (8000d44 <_init_i2c1_ch0+0x40>)
 8000d0a:	480f      	ldr	r0, [pc, #60]	; (8000d48 <_init_i2c1_ch0+0x44>)
 8000d0c:	f000 fe72 	bl	80019f4 <XMC_I2C_CH_Init>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SDA, USIC1_C0_DX0_P0_5);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2100      	movs	r1, #0
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <_init_i2c1_ch0+0x44>)
 8000d16:	f7ff ffb5 	bl	8000c84 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SCL, USIC1_C0_DX1_SCLKOUT);
 8000d1a:	2206      	movs	r2, #6
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	480a      	ldr	r0, [pc, #40]	; (8000d48 <_init_i2c1_ch0+0x44>)
 8000d20:	f7ff ffb0 	bl	8000c84 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_Start (XMC_I2C1_CH0);
 8000d24:	4808      	ldr	r0, [pc, #32]	; (8000d48 <_init_i2c1_ch0+0x44>)
 8000d26:	f7ff ffa1 	bl	8000c6c <XMC_I2C_CH_Start>

    XMC_GPIO_Init (P0_11, &i2c_scl);
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <_init_i2c1_ch0+0x48>)
 8000d2c:	210b      	movs	r1, #11
 8000d2e:	4808      	ldr	r0, [pc, #32]	; (8000d50 <_init_i2c1_ch0+0x4c>)
 8000d30:	f000 fce6 	bl	8001700 <XMC_GPIO_Init>
    XMC_GPIO_Init (P0_5, &i2c_sda);
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <_init_i2c1_ch0+0x50>)
 8000d36:	2105      	movs	r1, #5
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <_init_i2c1_ch0+0x4c>)
 8000d3a:	f000 fce1 	bl	8001700 <XMC_GPIO_Init>


    return 0;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000030 	.word	0x20000030
 8000d48:	48020000 	.word	0x48020000
 8000d4c:	20000024 	.word	0x20000024
 8000d50:	48028000 	.word	0x48028000
 8000d54:	20000018 	.word	0x20000018

08000d58 <_i2c_xfer>:
 *         rd_wr    ... I2C Read/Write direction
 *  @return read-value on a I2C read request or return write-value on I2C write
 *          request
 */
uint8_t _i2c_xfer (uint8_t id, uint8_t reg_addr, uint8_t i2c_data, _Bool rd_wr)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4608      	mov	r0, r1
 8000d62:	4611      	mov	r1, r2
 8000d64:	461a      	mov	r2, r3
 8000d66:	4623      	mov	r3, r4
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	717b      	strb	r3, [r7, #5]
 8000d72:	4613      	mov	r3, r2
 8000d74:	713b      	strb	r3, [r7, #4]
    XMC_USIC_CH_t *channel;
    char _tmp_i2c_recv_ = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]
    uint8_t id_tmp = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73bb      	strb	r3, [r7, #14]

    channel = XMC_I2C1_CH0;
 8000d7e:	4b3d      	ldr	r3, [pc, #244]	; (8000e74 <_i2c_xfer+0x11c>)
 8000d80:	60bb      	str	r3, [r7, #8]
/*	printf("\n");*/

    id_tmp = LIS3DH_RD_ADR;
 8000d82:	2330      	movs	r3, #48	; 0x30
 8000d84:	73bb      	strb	r3, [r7, #14]

    XMC_I2C_CH_MasterStart (channel, id_tmp, XMC_I2C_CH_CMD_WRITE);
 8000d86:	7bbb      	ldrb	r3, [r7, #14]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	68b8      	ldr	r0, [r7, #8]
 8000d90:	f000 feb4 	bl	8001afc <XMC_I2C_CH_MasterStart>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8000d94:	bf00      	nop
 8000d96:	68b8      	ldr	r0, [r7, #8]
 8000d98:	f7ff ff96 	bl	8000cc8 <XMC_I2C_CH_GetStatusFlag>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0f7      	beq.n	8000d96 <_i2c_xfer+0x3e>
        /* wait for ACK */
/*		printf("ACK1\r");*/
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000da6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000daa:	68b8      	ldr	r0, [r7, #8]
 8000dac:	f7ff ff98 	bl	8000ce0 <XMC_I2C_CH_ClearStatusFlag>

    XMC_I2C_CH_MasterTransmit (channel, reg_addr);
 8000db0:	79bb      	ldrb	r3, [r7, #6]
 8000db2:	4619      	mov	r1, r3
 8000db4:	68b8      	ldr	r0, [r7, #8]
 8000db6:	f000 ff2f 	bl	8001c18 <XMC_I2C_CH_MasterTransmit>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8000dba:	bf00      	nop
 8000dbc:	68b8      	ldr	r0, [r7, #8]
 8000dbe:	f7ff ff83 	bl	8000cc8 <XMC_I2C_CH_GetStatusFlag>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f7      	beq.n	8000dbc <_i2c_xfer+0x64>
        /* wait for ACK */
/*		printf("ACK2\r");*/
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000dcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd0:	68b8      	ldr	r0, [r7, #8]
 8000dd2:	f7ff ff85 	bl	8000ce0 <XMC_I2C_CH_ClearStatusFlag>

    if (rd_wr) {
 8000dd6:	793b      	ldrb	r3, [r7, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d030      	beq.n	8000e3e <_i2c_xfer+0xe6>
        /* Read from REG */
        XMC_I2C_CH_MasterRepeatedStart (channel, id_tmp, XMC_I2C_CH_CMD_READ);
 8000ddc:	7bbb      	ldrb	r3, [r7, #14]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	2201      	movs	r2, #1
 8000de2:	4619      	mov	r1, r3
 8000de4:	68b8      	ldr	r0, [r7, #8]
 8000de6:	f000 febd 	bl	8001b64 <XMC_I2C_CH_MasterRepeatedStart>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8000dea:	bf00      	nop
 8000dec:	68b8      	ldr	r0, [r7, #8]
 8000dee:	f7ff ff6b 	bl	8000cc8 <XMC_I2C_CH_GetStatusFlag>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0f7      	beq.n	8000dec <_i2c_xfer+0x94>
            /* wait for ACK */
/*			printf("ACK3\r");*/
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e00:	68b8      	ldr	r0, [r7, #8]
 8000e02:	f7ff ff6d 	bl	8000ce0 <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterReceiveNack (channel);
 8000e06:	68b8      	ldr	r0, [r7, #8]
 8000e08:	f000 ff2c 	bl	8001c64 <XMC_I2C_CH_MasterReceiveNack>

        while ( (XMC_USIC_CH_GetReceiveBufferStatus (channel) !=
 8000e0c:	bf00      	nop
 8000e0e:	68b8      	ldr	r0, [r7, #8]
 8000e10:	f7ff ff0a 	bl	8000c28 <XMC_USIC_CH_GetReceiveBufferStatus>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e1a:	d006      	beq.n	8000e2a <_i2c_xfer+0xd2>
                 (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) && ( (uint32_t) XMC_USIC_CH_GetReceiveBufferStatus (channel)
 8000e1c:	68b8      	ldr	r0, [r7, #8]
 8000e1e:	f7ff ff03 	bl	8000c28 <XMC_USIC_CH_GetReceiveBufferStatus>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e28:	d1f1      	bne.n	8000e0e <_i2c_xfer+0xb6>
                         != (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID0));

        _tmp_i2c_recv_ = XMC_I2C_CH_GetReceivedData (channel);
 8000e2a:	68b8      	ldr	r0, [r7, #8]
 8000e2c:	f000 ff40 	bl	8001cb0 <XMC_I2C_CH_GetReceivedData>
 8000e30:	4603      	mov	r3, r0
 8000e32:	73fb      	strb	r3, [r7, #15]

        XMC_I2C_CH_MasterStop (channel);
 8000e34:	68b8      	ldr	r0, [r7, #8]
 8000e36:	f000 fec9 	bl	8001bcc <XMC_I2C_CH_MasterStop>

        return _tmp_i2c_recv_;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	e016      	b.n	8000e6c <_i2c_xfer+0x114>
    } else {
        /* Write to REG */
        XMC_I2C_CH_MasterTransmit (channel, i2c_data);
 8000e3e:	797b      	ldrb	r3, [r7, #5]
 8000e40:	4619      	mov	r1, r3
 8000e42:	68b8      	ldr	r0, [r7, #8]
 8000e44:	f000 fee8 	bl	8001c18 <XMC_I2C_CH_MasterTransmit>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8000e48:	bf00      	nop
 8000e4a:	68b8      	ldr	r0, [r7, #8]
 8000e4c:	f7ff ff3c 	bl	8000cc8 <XMC_I2C_CH_GetStatusFlag>
 8000e50:	4603      	mov	r3, r0
 8000e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f7      	beq.n	8000e4a <_i2c_xfer+0xf2>
            /* wait for ACK */
/*			printf("ACK4\rS");*/
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8000e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5e:	68b8      	ldr	r0, [r7, #8]
 8000e60:	f7ff ff3e 	bl	8000ce0 <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterStop (channel);
 8000e64:	68b8      	ldr	r0, [r7, #8]
 8000e66:	f000 feb1 	bl	8001bcc <XMC_I2C_CH_MasterStop>

        return i2c_data;
 8000e6a:	797b      	ldrb	r3, [r7, #5]
    }
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd90      	pop	{r4, r7, pc}
 8000e74:	48020000 	.word	0x48020000

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	0092      	lsls	r2, r2, #2
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	4909      	ldr	r1, [pc, #36]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
  }
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	213f      	movs	r1, #63	; 0x3f
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ffc2 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <SysTick_Handler>:
#include "3Daccel_app.h"

void SysTick_Handler (void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    static uint32_t ticks = 0;
    static int32_t cnt = 0;

    ticks++;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <SysTick_Handler+0x44>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <SysTick_Handler+0x44>)
 8000f1c:	6013      	str	r3, [r2, #0]
    if (ticks == TICKS_WAIT)
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <SysTick_Handler+0x44>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10d      	bne.n	8000f46 <SysTick_Handler+0x36>
    {
        ticks = 0;
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <SysTick_Handler+0x44>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
		printf("\nerrorcount6D = %d | errorcount = %d | totalcount = %ld\n", errorcount6D, errorcount, cnt);
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <SysTick_Handler+0x48>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <SysTick_Handler+0x4c>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <SysTick_Handler+0x50>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4808      	ldr	r0, [pc, #32]	; (8000f64 <SysTick_Handler+0x54>)
 8000f42:	f001 f971 	bl	8002228 <printf>
    }
	cnt++;
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <SysTick_Handler+0x50>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <SysTick_Handler+0x50>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000a34 	.word	0x20000a34
 8000f58:	20000a7a 	.word	0x20000a7a
 8000f5c:	20000a79 	.word	0x20000a79
 8000f60:	20000a38 	.word	0x20000a38
 8000f64:	08008f84 	.word	0x08008f84

08000f68 <main>:

int main (void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
    AxesRaw_t data;
	errorcount = 0, errorcount6D = 0;
 8000f6e:	4b9f      	ldr	r3, [pc, #636]	; (80011ec <main+0x284>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	4b9e      	ldr	r3, [pc, #632]	; (80011f0 <main+0x288>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
	uint8_t position=0, old_position=0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]

    initRetargetSwo();
 8000f82:	f7ff fdd1 	bl	8000b28 <initRetargetSwo>

    _init_i2c1_ch0();
 8000f86:	f7ff febd 	bl	8000d04 <_init_i2c1_ch0>

    printf("init done...\n");
 8000f8a:	489a      	ldr	r0, [pc, #616]	; (80011f4 <main+0x28c>)
 8000f8c:	f001 f994 	bl	80022b8 <puts>

    _init_uart0_ch0();
 8000f90:	f7ff fcce 	bl	8000930 <_init_uart0_ch0>
    SysTick_Config (SystemCoreClock / TICKS_PER_SECOND);
 8000f94:	4b98      	ldr	r3, [pc, #608]	; (80011f8 <main+0x290>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a98      	ldr	r2, [pc, #608]	; (80011fc <main+0x294>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	099b      	lsrs	r3, r3, #6
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff93 	bl	8000ecc <SysTick_Config>

    //Inizialize MEMS Sensor
    //set ODR (turn ON device)
    response = LIS3DH_SetODR(LIS3DH_ODR_100Hz);
 8000fa6:	2005      	movs	r0, #5
 8000fa8:	f7ff f9ae 	bl	8000308 <LIS3DH_SetODR>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b93      	ldr	r3, [pc, #588]	; (8001200 <main+0x298>)
 8000fb2:	701a      	strb	r2, [r3, #0]
    if(response == 1)
 8000fb4:	4b92      	ldr	r3, [pc, #584]	; (8001200 <main+0x298>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d103      	bne.n	8000fc4 <main+0x5c>
    {
        printf("LIS3DH_SetODR done...\n");
 8000fbc:	4891      	ldr	r0, [pc, #580]	; (8001204 <main+0x29c>)
 8000fbe:	f001 f97b 	bl	80022b8 <puts>
 8000fc2:	e005      	b.n	8000fd0 <main+0x68>
    }
	else
	{
		errorcount++;
 8000fc4:	4b89      	ldr	r3, [pc, #548]	; (80011ec <main+0x284>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b87      	ldr	r3, [pc, #540]	; (80011ec <main+0x284>)
 8000fce:	701a      	strb	r2, [r3, #0]
	}

    //set PowerMode
    response = LIS3DH_SetMode(LIS3DH_NORMAL);
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f7ff f9c7 	bl	8000364 <LIS3DH_SetMode>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b89      	ldr	r3, [pc, #548]	; (8001200 <main+0x298>)
 8000fdc:	701a      	strb	r2, [r3, #0]
    if(response == 1)
 8000fde:	4b88      	ldr	r3, [pc, #544]	; (8001200 <main+0x298>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d103      	bne.n	8000fee <main+0x86>
    {

        printf("LIS3DH_SetMode done...\n");
 8000fe6:	4888      	ldr	r0, [pc, #544]	; (8001208 <main+0x2a0>)
 8000fe8:	f001 f966 	bl	80022b8 <puts>
 8000fec:	e005      	b.n	8000ffa <main+0x92>
    }
	else
	{
		errorcount++;
 8000fee:	4b7f      	ldr	r3, [pc, #508]	; (80011ec <main+0x284>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b7d      	ldr	r3, [pc, #500]	; (80011ec <main+0x284>)
 8000ff8:	701a      	strb	r2, [r3, #0]
	}

    //set Fullscale
    response = LIS3DH_SetFullScale(LIS3DH_FULLSCALE_2);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff fa5c 	bl	80004b8 <LIS3DH_SetFullScale>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	4b7e      	ldr	r3, [pc, #504]	; (8001200 <main+0x298>)
 8001006:	701a      	strb	r2, [r3, #0]
    if(response == 1)
 8001008:	4b7d      	ldr	r3, [pc, #500]	; (8001200 <main+0x298>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d103      	bne.n	8001018 <main+0xb0>
    {

        printf("LIS3DH_SetFullScale done...\n");
 8001010:	487e      	ldr	r0, [pc, #504]	; (800120c <main+0x2a4>)
 8001012:	f001 f951 	bl	80022b8 <puts>
 8001016:	e005      	b.n	8001024 <main+0xbc>
    }
	else
	{
		errorcount++;
 8001018:	4b74      	ldr	r3, [pc, #464]	; (80011ec <main+0x284>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b72      	ldr	r3, [pc, #456]	; (80011ec <main+0x284>)
 8001022:	701a      	strb	r2, [r3, #0]
	}

    //set axis Enable
    response = LIS3DH_SetAxis(LIS3DH_X_ENABLE | LIS3DH_Y_ENABLE | LIS3DH_Z_ENABLE);
 8001024:	2007      	movs	r0, #7
 8001026:	f7ff fa1b 	bl	8000460 <LIS3DH_SetAxis>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b74      	ldr	r3, [pc, #464]	; (8001200 <main+0x298>)
 8001030:	701a      	strb	r2, [r3, #0]
    if(response == 1)
 8001032:	4b73      	ldr	r3, [pc, #460]	; (8001200 <main+0x298>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d103      	bne.n	8001042 <main+0xda>
    {
        printf("LIS3DH_SetAxis done...\n");
 800103a:	4875      	ldr	r0, [pc, #468]	; (8001210 <main+0x2a8>)
 800103c:	f001 f93c 	bl	80022b8 <puts>
 8001040:	e005      	b.n	800104e <main+0xe6>
    }
	else
	{
		errorcount++;
 8001042:	4b6a      	ldr	r3, [pc, #424]	; (80011ec <main+0x284>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b68      	ldr	r3, [pc, #416]	; (80011ec <main+0x284>)
 800104c:	701a      	strb	r2, [r3, #0]
	}

	//configure Mems Sensor
	//set Interrupt Threshold 
	response = LIS3DH_SetInt1Threshold(20);
 800104e:	2014      	movs	r0, #20
 8001050:	f7ff fb32 	bl	80006b8 <LIS3DH_SetInt1Threshold>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	4b69      	ldr	r3, [pc, #420]	; (8001200 <main+0x298>)
 800105a:	701a      	strb	r2, [r3, #0]
	if(response == 1)
 800105c:	4b68      	ldr	r3, [pc, #416]	; (8001200 <main+0x298>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d102      	bne.n	800106a <main+0x102>
	{
    	printf("LIS3DH_SetInt1Thershold done...\n");
 8001064:	486b      	ldr	r0, [pc, #428]	; (8001214 <main+0x2ac>)
 8001066:	f001 f927 	bl	80022b8 <puts>
	}
	//set Interrupt configuration (all enabled)
	response = LIS3DH_SetIntConfiguration(LIS3DH_INT1_ZHIE_ENABLE | LIS3DH_INT1_ZLIE_ENABLE |
 800106a:	203f      	movs	r0, #63	; 0x3f
 800106c:	f7ff fa52 	bl	8000514 <LIS3DH_SetIntConfiguration>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b62      	ldr	r3, [pc, #392]	; (8001200 <main+0x298>)
 8001076:	701a      	strb	r2, [r3, #0]
			   LIS3DH_INT1_YHIE_ENABLE | LIS3DH_INT1_YLIE_ENABLE |
			   LIS3DH_INT1_XHIE_ENABLE | LIS3DH_INT1_XLIE_ENABLE ); 
	if(response == 1)
 8001078:	4b61      	ldr	r3, [pc, #388]	; (8001200 <main+0x298>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d102      	bne.n	8001086 <main+0x11e>
	{
		printf("LIS3DH_SetIntConfiguration done...\n");
 8001080:	4865      	ldr	r0, [pc, #404]	; (8001218 <main+0x2b0>)
 8001082:	f001 f919 	bl	80022b8 <puts>
  	}
	 //set Interrupt Mode
	response = LIS3DH_SetIntMode(LIS3DH_INT_MODE_6D_POSITION);
 8001086:	2003      	movs	r0, #3
 8001088:	f7ff fa6e 	bl	8000568 <LIS3DH_SetIntMode>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	4b5b      	ldr	r3, [pc, #364]	; (8001200 <main+0x298>)
 8001092:	701a      	strb	r2, [r3, #0]
	if(response == 1)
 8001094:	4b5a      	ldr	r3, [pc, #360]	; (8001200 <main+0x298>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d102      	bne.n	80010a2 <main+0x13a>
	{
		printf("LIS3DH_SetIntMode done...\n");
 800109c:	485f      	ldr	r0, [pc, #380]	; (800121c <main+0x2b4>)
 800109e:	f001 f90b 	bl	80022b8 <puts>
    }

	while(1)
	{
		//get raw data
		response = LIS3DH_GetAccAxesRaw(&data);
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fb20 	bl	80006ec <LIS3DH_GetAccAxesRaw>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b53      	ldr	r3, [pc, #332]	; (8001200 <main+0x298>)
 80010b2:	701a      	strb	r2, [r3, #0]
		if(response == 1)
 80010b4:	4b52      	ldr	r3, [pc, #328]	; (8001200 <main+0x298>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d115      	bne.n	80010e8 <main+0x180>
		{
        	printf("X=%6d Y=%6d Z=%6d\r", data.AXIS_X, data.AXIS_Y, data.AXIS_Z);
 80010bc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010c6:	461a      	mov	r2, r3
 80010c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010cc:	4854      	ldr	r0, [pc, #336]	; (8001220 <main+0x2b8>)
 80010ce:	f001 f8ab 	bl	8002228 <printf>
			_uart_printf ("%d\r\n%d\r\n%d\r\n", data.AXIS_X, data.AXIS_Y, data.AXIS_Z);
 80010d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80010d6:	4619      	mov	r1, r3
 80010d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010dc:	461a      	mov	r2, r3
 80010de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010e2:	4850      	ldr	r0, [pc, #320]	; (8001224 <main+0x2bc>)
 80010e4:	f7ff fca6 	bl	8000a34 <_uart_printf>
		}
		//get 6D Position
  		response = LIS3DH_Get6DPosition(&position);
 80010e8:	1dfb      	adds	r3, r7, #7
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa6a 	bl	80005c4 <LIS3DH_Get6DPosition>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b42      	ldr	r3, [pc, #264]	; (8001200 <main+0x298>)
 80010f6:	701a      	strb	r2, [r3, #0]
  		if((response == 1) && (old_position != position))
 80010f8:	4b41      	ldr	r3, [pc, #260]	; (8001200 <main+0x298>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d168      	bne.n	80011d2 <main+0x26a>
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	429a      	cmp	r2, r3
 8001106:	d064      	beq.n	80011d2 <main+0x26a>
		{
		    switch (position)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	3b41      	subs	r3, #65	; 0x41
 800110c:	2b1f      	cmp	r3, #31
 800110e:	d85b      	bhi.n	80011c8 <main+0x260>
 8001110:	a201      	add	r2, pc, #4	; (adr r2, 8001118 <main+0x1b0>)
 8001112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001116:	bf00      	nop
 8001118:	080011a9 	.word	0x080011a9
 800111c:	080011a1 	.word	0x080011a1
 8001120:	080011c9 	.word	0x080011c9
 8001124:	08001199 	.word	0x08001199
 8001128:	080011c9 	.word	0x080011c9
 800112c:	080011c9 	.word	0x080011c9
 8001130:	080011c9 	.word	0x080011c9
 8001134:	080011b1 	.word	0x080011b1
 8001138:	080011c9 	.word	0x080011c9
 800113c:	080011c9 	.word	0x080011c9
 8001140:	080011c9 	.word	0x080011c9
 8001144:	080011c9 	.word	0x080011c9
 8001148:	080011c9 	.word	0x080011c9
 800114c:	080011c9 	.word	0x080011c9
 8001150:	080011c9 	.word	0x080011c9
 8001154:	080011c1 	.word	0x080011c1
 8001158:	080011c9 	.word	0x080011c9
 800115c:	080011c9 	.word	0x080011c9
 8001160:	080011c9 	.word	0x080011c9
 8001164:	080011c9 	.word	0x080011c9
 8001168:	080011c9 	.word	0x080011c9
 800116c:	080011c9 	.word	0x080011c9
 8001170:	080011c9 	.word	0x080011c9
 8001174:	080011c9 	.word	0x080011c9
 8001178:	080011c9 	.word	0x080011c9
 800117c:	080011c9 	.word	0x080011c9
 8001180:	080011c9 	.word	0x080011c9
 8001184:	080011c9 	.word	0x080011c9
 8001188:	080011c9 	.word	0x080011c9
 800118c:	080011c9 	.word	0x080011c9
 8001190:	080011c9 	.word	0x080011c9
 8001194:	080011b9 	.word	0x080011b9
			{
				case LIS3DH_UP_SX:
				{
					printf("\nposition = UP_SX  \n");   	
 8001198:	4823      	ldr	r0, [pc, #140]	; (8001228 <main+0x2c0>)
 800119a:	f001 f88d 	bl	80022b8 <puts>
					break;
 800119e:	e017      	b.n	80011d0 <main+0x268>
				}
				case LIS3DH_UP_DX:
				{
					printf("\nposition = UP_DX  \n");
 80011a0:	4822      	ldr	r0, [pc, #136]	; (800122c <main+0x2c4>)
 80011a2:	f001 f889 	bl	80022b8 <puts>
					break;
 80011a6:	e013      	b.n	80011d0 <main+0x268>
				}
				case LIS3DH_DW_SX:
				{
					printf("\nposition = DW_SX  \n");
 80011a8:	4821      	ldr	r0, [pc, #132]	; (8001230 <main+0x2c8>)
 80011aa:	f001 f885 	bl	80022b8 <puts>
					break;
 80011ae:	e00f      	b.n	80011d0 <main+0x268>
				}
				case LIS3DH_DW_DX:
				{
					printf("\nposition = DW_DX  \n");
 80011b0:	4820      	ldr	r0, [pc, #128]	; (8001234 <main+0x2cc>)
 80011b2:	f001 f881 	bl	80022b8 <puts>
					break; 
 80011b6:	e00b      	b.n	80011d0 <main+0x268>
				}
				case LIS3DH_TOP:    
				{
					printf("\nposition = TOP    \n");
 80011b8:	481f      	ldr	r0, [pc, #124]	; (8001238 <main+0x2d0>)
 80011ba:	f001 f87d 	bl	80022b8 <puts>
					break; 
 80011be:	e007      	b.n	80011d0 <main+0x268>
				}
				case LIS3DH_BOTTOM: 
				{
					printf("\nposition = BOTTOM \n");   	
 80011c0:	481e      	ldr	r0, [pc, #120]	; (800123c <main+0x2d4>)
 80011c2:	f001 f879 	bl	80022b8 <puts>
					break; 
 80011c6:	e003      	b.n	80011d0 <main+0x268>
				}
				default:
				{
					printf("\nposition = unknown\n");
 80011c8:	481d      	ldr	r0, [pc, #116]	; (8001240 <main+0x2d8>)
 80011ca:	f001 f875 	bl	80022b8 <puts>
					break;
 80011ce:	bf00      	nop
				}
    		}
		}
 80011d0:	e009      	b.n	80011e6 <main+0x27e>
		else if(response != 1)
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <main+0x298>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d005      	beq.n	80011e6 <main+0x27e>
		{
			errorcount6D++;
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <main+0x288>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <main+0x288>)
 80011e4:	701a      	strb	r2, [r3, #0]
		}
		old_position = position;
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	73fb      	strb	r3, [r7, #15]
  }
 80011ea:	e75a      	b.n	80010a2 <main+0x13a>
 80011ec:	20000a79 	.word	0x20000a79
 80011f0:	20000a7a 	.word	0x20000a7a
 80011f4:	08008fc0 	.word	0x08008fc0
 80011f8:	2000ffc0 	.word	0x2000ffc0
 80011fc:	10624dd3 	.word	0x10624dd3
 8001200:	20000a78 	.word	0x20000a78
 8001204:	08008fd0 	.word	0x08008fd0
 8001208:	08008fe8 	.word	0x08008fe8
 800120c:	08009000 	.word	0x08009000
 8001210:	0800901c 	.word	0x0800901c
 8001214:	08009034 	.word	0x08009034
 8001218:	08009054 	.word	0x08009054
 800121c:	08009078 	.word	0x08009078
 8001220:	08009094 	.word	0x08009094
 8001224:	080090a8 	.word	0x080090a8
 8001228:	080090b8 	.word	0x080090b8
 800122c:	080090cc 	.word	0x080090cc
 8001230:	080090e0 	.word	0x080090e0
 8001234:	080090f4 	.word	0x080090f4
 8001238:	08009108 	.word	0x08009108
 800123c:	0800911c 	.word	0x0800911c
 8001240:	08009130 	.word	0x08009130

08001244 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 8001250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop

0800127c <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
 return -1;
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop

08001290 <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <_fstat+0x16>
  return -1;
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	e001      	b.n	80012aa <_fstat+0x1a>
 else
  return -2;
 80012a6:	f06f 0301 	mvn.w	r3, #1
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop

080012b8 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <_sbrk+0x60>)
 80012c2:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d108      	bne.n	80012de <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <_sbrk+0x64>)
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <_sbrk+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	4413      	add	r3, r2
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <_sbrk+0x6c>)
 80012dc:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <_sbrk+0x64>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 80012e4:	4b0d      	ldr	r3, [pc, #52]	; (800131c <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 80012f0:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 80012f4:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <_sbrk+0x6c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d301      	bcc.n	8001304 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 8001300:	2300      	movs	r3, #0
 8001302:	e003      	b.n	800130c <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 8001304:	4a05      	ldr	r2, [pc, #20]	; (800131c <_sbrk+0x64>)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 800130a:	693b      	ldr	r3, [r7, #16]
 }
}
 800130c:	4618      	mov	r0, r3
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	0000f540 	.word	0x0000f540
 800131c:	20000a3c 	.word	0x20000a3c
 8001320:	20000a80 	.word	0x20000a80
 8001324:	20000a40 	.word	0x20000a40

08001328 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop

08001338 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e003      	b.n	8001366 <delay+0x16>
  {
    __NOP();
 800135e:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3301      	adds	r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	429a      	cmp	r2, r3
 800136c:	d3f7      	bcc.n	800135e <delay+0xe>
  {
    __NOP();
  }
}
 800136e:	bf00      	nop
 8001370:	3714      	adds	r7, #20
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop

0800137c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800137c:	b598      	push	{r3, r4, r7, lr}
 800137e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8001380:	4a06      	ldr	r2, [pc, #24]	; (800139c <SystemInit+0x20>)
 8001382:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001386:	4614      	mov	r4, r2
 8001388:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800138a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 800138e:	f000 f807 	bl	80013a0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8001392:	f000 f83d 	bl	8001410 <SystemCoreClockSetup>
}
 8001396:	bf00      	nop
 8001398:	bd98      	pop	{r3, r4, r7, pc}
 800139a:	bf00      	nop
 800139c:	2000ffc4 	.word	0x2000ffc4

080013a0 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a6:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <SystemCoreSetup+0x64>)
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <SystemCoreSetup+0x68>)
 80013ac:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013ae:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80013b2:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80013b4:	4a13      	ldr	r2, [pc, #76]	; (8001404 <SystemCoreSetup+0x64>)
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <SystemCoreSetup+0x64>)
 80013b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 80013c4:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <SystemCoreSetup+0x64>)
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <SystemCoreSetup+0x64>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	f023 0308 	bic.w	r3, r3, #8
 80013ce:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <SystemCoreSetup+0x6c>)
 80013d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d6:	3314      	adds	r3, #20
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f023 030f 	bic.w	r3, r3, #15
 80013e2:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f043 0303 	orr.w	r3, r3, #3
 80013ea:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <SystemCoreSetup+0x6c>)
 80013ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013f2:	3314      	adds	r3, #20
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00
 8001408:	08000000 	.word	0x08000000
 800140c:	58001000 	.word	0x58001000

08001410 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8001414:	4b75      	ldr	r3, [pc, #468]	; (80015ec <SystemCoreClockSetup+0x1dc>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10c      	bne.n	800143a <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8001420:	4a72      	ldr	r2, [pc, #456]	; (80015ec <SystemCoreClockSetup+0x1dc>)
 8001422:	4b72      	ldr	r3, [pc, #456]	; (80015ec <SystemCoreClockSetup+0x1dc>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 800142c:	bf00      	nop
 800142e:	4b6f      	ldr	r3, [pc, #444]	; (80015ec <SystemCoreClockSetup+0x1dc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f9      	beq.n	800142e <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800143a:	4b6d      	ldr	r3, [pc, #436]	; (80015f0 <SystemCoreClockSetup+0x1e0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8001446:	4a6a      	ldr	r2, [pc, #424]	; (80015f0 <SystemCoreClockSetup+0x1e0>)
 8001448:	4b69      	ldr	r3, [pc, #420]	; (80015f0 <SystemCoreClockSetup+0x1e0>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001450:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8001452:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8001456:	f7ff ff7b 	bl	8001350 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 800145a:	4a66      	ldr	r2, [pc, #408]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 800145c:	4b65      	ldr	r3, [pc, #404]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001464:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8001466:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800146a:	f7ff ff71 	bl	8001350 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800146e:	4a61      	ldr	r2, [pc, #388]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 8001470:	4b60      	ldr	r3, [pc, #384]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001478:	f023 0302 	bic.w	r3, r3, #2
 800147c:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 800147e:	4b5e      	ldr	r3, [pc, #376]	; (80015f8 <SystemCoreClockSetup+0x1e8>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001486:	2b00      	cmp	r3, #0
 8001488:	d029      	beq.n	80014de <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800148a:	4a5b      	ldr	r2, [pc, #364]	; (80015f8 <SystemCoreClockSetup+0x1e8>)
 800148c:	4b5a      	ldr	r3, [pc, #360]	; (80015f8 <SystemCoreClockSetup+0x1e8>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001494:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001498:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800149a:	f000 f927 	bl	80016ec <OSCHP_GetFrequency>
 800149e:	4602      	mov	r2, r0
 80014a0:	4b56      	ldr	r3, [pc, #344]	; (80015fc <SystemCoreClockSetup+0x1ec>)
 80014a2:	fba3 2302 	umull	r2, r3, r3, r2
 80014a6:	0d1b      	lsrs	r3, r3, #20
 80014a8:	3b01      	subs	r3, #1
 80014aa:	041b      	lsls	r3, r3, #16
 80014ac:	4952      	ldr	r1, [pc, #328]	; (80015f8 <SystemCoreClockSetup+0x1e8>)
 80014ae:	4a52      	ldr	r2, [pc, #328]	; (80015f8 <SystemCoreClockSetup+0x1e8>)
 80014b0:	6852      	ldr	r2, [r2, #4]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 80014b6:	4a4f      	ldr	r2, [pc, #316]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 80014b8:	4b4e      	ldr	r3, [pc, #312]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 80014c2:	4a4c      	ldr	r2, [pc, #304]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 80014c4:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80014cc:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 80014ce:	bf00      	nop
 80014d0:	4b48      	ldr	r3, [pc, #288]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80014d8:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80014dc:	d1f8      	bne.n	80014d0 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 80014de:	4a45      	ldr	r2, [pc, #276]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 80014e0:	4b44      	ldr	r3, [pc, #272]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 80014ea:	4a42      	ldr	r2, [pc, #264]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 80014ec:	4b41      	ldr	r3, [pc, #260]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f043 0310 	orr.w	r3, r3, #16
 80014f4:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80014f6:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 80014f8:	4a41      	ldr	r2, [pc, #260]	; (8001600 <SystemCoreClockSetup+0x1f0>)
 80014fa:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80014fc:	4a3d      	ldr	r2, [pc, #244]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 80014fe:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001506:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8001508:	4a3a      	ldr	r2, [pc, #232]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 800150a:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f023 0310 	bic.w	r3, r3, #16
 8001512:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8001514:	4a37      	ldr	r2, [pc, #220]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 8001516:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151e:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001520:	bf00      	nop
 8001522:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f9      	beq.n	8001522 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800152e:	4a31      	ldr	r2, [pc, #196]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 8001530:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800153a:	bf00      	nop
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f9      	bne.n	800153c <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8001548:	4a2e      	ldr	r2, [pc, #184]	; (8001604 <SystemCoreClockSetup+0x1f4>)
 800154a:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <SystemCoreClockSetup+0x1f4>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001552:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8001554:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <SystemCoreClockSetup+0x1f4>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <SystemCoreClockSetup+0x1f4>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8001560:	4b28      	ldr	r3, [pc, #160]	; (8001604 <SystemCoreClockSetup+0x1f4>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8001566:	4b27      	ldr	r3, [pc, #156]	; (8001604 <SystemCoreClockSetup+0x1f4>)
 8001568:	2200      	movs	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <SystemCoreClockSetup+0x1f4>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8001572:	4b24      	ldr	r3, [pc, #144]	; (8001604 <SystemCoreClockSetup+0x1f4>)
 8001574:	2203      	movs	r2, #3
 8001576:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001578:	4a1e      	ldr	r2, [pc, #120]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001582:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 8001586:	4a20      	ldr	r2, [pc, #128]	; (8001608 <SystemCoreClockSetup+0x1f8>)
 8001588:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 800158a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800158e:	f7ff fedf 	bl	8001350 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001592:	bf00      	nop
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f9      	beq.n	8001594 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 80015a2:	4a1a      	ldr	r2, [pc, #104]	; (800160c <SystemCoreClockSetup+0x1fc>)
 80015a4:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 80015a6:	f241 1094 	movw	r0, #4500	; 0x1194
 80015aa:	f7ff fed1 	bl	8001350 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80015ae:	bf00      	nop
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f9      	beq.n	80015b0 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 80015be:	4a14      	ldr	r2, [pc, #80]	; (8001610 <SystemCoreClockSetup+0x200>)
 80015c0:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 80015c2:	f241 7070 	movw	r0, #6000	; 0x1770
 80015c6:	f7ff fec3 	bl	8001350 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80015ca:	bf00      	nop
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <SystemCoreClockSetup+0x1e4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f9      	beq.n	80015cc <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <SystemCoreClockSetup+0x204>)
 80015da:	2205      	movs	r2, #5
 80015dc:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <SystemCoreClockSetup+0x1f4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 80015e4:	f000 f818 	bl	8001618 <SystemCoreClockUpdate>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	50004200 	.word	0x50004200
 80015f0:	50004400 	.word	0x50004400
 80015f4:	50004710 	.word	0x50004710
 80015f8:	50004700 	.word	0x50004700
 80015fc:	6b5fca6b 	.word	0x6b5fca6b
 8001600:	01134f00 	.word	0x01134f00
 8001604:	50004600 	.word	0x50004600
 8001608:	01074f00 	.word	0x01074f00
 800160c:	01044f00 	.word	0x01044f00
 8001610:	01034f00 	.word	0x01034f00
 8001614:	50004160 	.word	0x50004160

08001618 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800161e:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <SystemCoreClockUpdate+0xc4>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d03e      	beq.n	80016a8 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <SystemCoreClockUpdate+0xc8>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8001636:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <SystemCoreClockUpdate+0xcc>)
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	e002      	b.n	8001642 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 800163c:	f000 f856 	bl	80016ec <OSCHP_GetFrequency>
 8001640:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8001642:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <SystemCoreClockUpdate+0xc8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b00      	cmp	r3, #0
 800164c:	d020      	beq.n	8001690 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <SystemCoreClockUpdate+0xc8>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001656:	0e1b      	lsrs	r3, r3, #24
 8001658:	3301      	adds	r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <SystemCoreClockUpdate+0xc8>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	3301      	adds	r3, #1
 8001668:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <SystemCoreClockUpdate+0xc8>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001672:	0c1b      	lsrs	r3, r3, #16
 8001674:	3301      	adds	r3, #1
 8001676:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	fb02 f303 	mul.w	r3, r2, r3
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	fb02 f303 	mul.w	r3, r2, r3
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	e00d      	b.n	80016ac <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <SystemCoreClockUpdate+0xc8>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001698:	3301      	adds	r3, #1
 800169a:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	e001      	b.n	80016ac <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <SystemCoreClockUpdate+0xcc>)
 80016aa:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <SystemCoreClockUpdate+0xc4>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <SystemCoreClockUpdate+0xc4>)
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	3301      	adds	r3, #1
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016cc:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80016ce:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <SystemCoreClockUpdate+0xd0>)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	50004600 	.word	0x50004600
 80016e0:	50004710 	.word	0x50004710
 80016e4:	016e3600 	.word	0x016e3600
 80016e8:	2000ffc0 	.word	0x2000ffc0

080016ec <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 80016f0:	4b02      	ldr	r3, [pc, #8]	; (80016fc <OSCHP_GetFrequency+0x10>)
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	00b71b00 	.word	0x00b71b00

08001700 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	460b      	mov	r3, r1
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800170e:	7afb      	ldrb	r3, [r7, #11]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	b2db      	uxtb	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	7afb      	ldrb	r3, [r7, #11]
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3204      	adds	r2, #4
 8001722:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001726:	7afb      	ldrb	r3, [r7, #11]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	21f8      	movs	r1, #248	; 0xf8
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	ea02 0103 	and.w	r1, r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1d02      	adds	r2, r0, #4
 800173e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001746:	7afb      	ldrb	r3, [r7, #11]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2103      	movs	r1, #3
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	401a      	ands	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4a38      	ldr	r2, [pc, #224]	; (800183c <XMC_GPIO_Init+0x13c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d003      	beq.n	8001768 <XMC_GPIO_Init+0x68>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4a37      	ldr	r2, [pc, #220]	; (8001840 <XMC_GPIO_Init+0x140>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d10a      	bne.n	800177e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800176c:	7afb      	ldrb	r3, [r7, #11]
 800176e:	2101      	movs	r1, #1
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	401a      	ands	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	661a      	str	r2, [r3, #96]	; 0x60
 800177c:	e03c      	b.n	80017f8 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	7afb      	ldrb	r3, [r7, #11]
 8001784:	409a      	lsls	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800178a:	7afb      	ldrb	r3, [r7, #11]
 800178c:	08db      	lsrs	r3, r3, #3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4618      	mov	r0, r3
 8001792:	7afb      	ldrb	r3, [r7, #11]
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3210      	adds	r2, #16
 800179e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017a2:	7afb      	ldrb	r3, [r7, #11]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	2107      	movs	r1, #7
 80017ac:	fa01 f303 	lsl.w	r3, r1, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	ea02 0103 	and.w	r1, r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f100 0210 	add.w	r2, r0, #16
 80017bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80017c0:	7afb      	ldrb	r3, [r7, #11]
 80017c2:	08db      	lsrs	r3, r3, #3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	7afb      	ldrb	r3, [r7, #11]
 80017ca:	08db      	lsrs	r3, r3, #3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	3210      	adds	r2, #16
 80017d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7a1b      	ldrb	r3, [r3, #8]
 80017dc:	4619      	mov	r1, r3
 80017de:	7afb      	ldrb	r3, [r7, #11]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	ea42 0103 	orr.w	r1, r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f100 0210 	add.w	r2, r0, #16
 80017f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80017f8:	7afb      	ldrb	r3, [r7, #11]
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	7afb      	ldrb	r3, [r7, #11]
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	b2db      	uxtb	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3204      	adds	r2, #4
 800180c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	7afb      	ldrb	r3, [r7, #11]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	ea42 0103 	orr.w	r1, r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1d02      	adds	r2, r0, #4
 800182a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	48028e00 	.word	0x48028e00
 8001840:	48028f00 	.word	0x48028f00

08001844 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001856:	b2db      	uxtb	r3, r3
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 800188a:	2310      	movs	r3, #16
 800188c:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 fa62 	bl	8001d58 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	79db      	ldrb	r3, [r3, #7]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d002      	beq.n	80018a2 <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	79db      	ldrb	r3, [r3, #7]
 80018a0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4619      	mov	r1, r3
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 faa2 	bl	8001df4 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	799b      	ldrb	r3, [r3, #6]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	085b      	lsrs	r3, r3, #1
 80018bc:	3301      	adds	r3, #1
 80018be:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80018c0:	4313      	orrs	r3, r2
 80018c2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	791b      	ldrb	r3, [r3, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	061b      	lsls	r3, r3, #24
 80018d6:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	795b      	ldrb	r3, [r3, #5]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	795b      	ldrb	r3, [r3, #5]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	041b      	lsls	r3, r3, #16
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34
 80018f8:	e008      	b.n	800190c <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	791b      	ldrb	r3, [r3, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	041b      	lsls	r3, r3, #16
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001912:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f04f 32ff 	mov.w	r2, #4294967295
 800191a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	891b      	ldrh	r3, [r3, #8]
 8001920:	461a      	mov	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop

08001930 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001942:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d110      	bne.n	800196c <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800194a:	bf00      	nop
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff79 	bl	8001844 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001952:	4603      	mov	r3, r0
 8001954:	2b80      	cmp	r3, #128	; 0x80
 8001956:	d0f9      	beq.n	800194c <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001958:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff81 	bl	8001864 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8001962:	887a      	ldrh	r2, [r7, #2]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 800196a:	e003      	b.n	8001974 <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 800196c:	887a      	ldrh	r2, [r7, #2]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800198a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d103      	bne.n	800199a <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001996:	81fb      	strh	r3, [r7, #14]
 8001998:	e003      	b.n	80019a2 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80019a0:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 80019a2:	89fb      	ldrh	r3, [r7, #14]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80019c2:	b2db      	uxtb	r3, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop

080019f4 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f9aa 	bl	8001d58 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <XMC_I2C_CH_Init+0x4c>)
 8001a08:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	889b      	ldrh	r3, [r3, #4]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f817 	bl	8001a44 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f831 	bl	8001a84 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001a28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	073f0303 	.word	0x073f0303

08001a44 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8001a50:	887b      	ldrh	r3, [r7, #2]
 8001a52:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8001a56:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8001a5a:	d109      	bne.n	8001a70 <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 8001a5c:	887b      	ldrh	r3, [r7, #2]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	887b      	ldrh	r3, [r7, #2]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8001a6e:	e003      	b.n	8001a78 <XMC_I2C_CH_SetSlaveAddress+0x34>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8001a70:	887b      	ldrh	r3, [r7, #2]
 8001a72:	021a      	lsls	r2, r3, #8
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <XMC_I2C_CH_SetBaudrate+0x70>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d810      	bhi.n	8001abc <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 8001aa6:	220a      	movs	r2, #10
 8001aa8:	6839      	ldr	r1, [r7, #0]
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f9a2 	bl	8001df4 <XMC_USIC_CH_SetBaudrate>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d119      	bne.n	8001aea <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	e016      	b.n	8001aea <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <XMC_I2C_CH_SetBaudrate+0x74>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d810      	bhi.n	8001ae6 <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8001ad0:	2219      	movs	r2, #25
 8001ad2:	6839      	ldr	r1, [r7, #0]
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f98d 	bl	8001df4 <XMC_USIC_CH_SetBaudrate>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d104      	bne.n	8001aea <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e001      	b.n	8001aea <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	000186a0 	.word	0x000186a0
 8001af8:	00061a80 	.word	0x00061a80

08001afc <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8001b16:	787b      	ldrb	r3, [r7, #1]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d103      	bne.n	8001b24 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b2a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d110      	bne.n	8001b54 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001b32:	bf00      	nop
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff3b 	bl	80019b0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b80      	cmp	r3, #128	; 0x80
 8001b3e:	d0f9      	beq.n	8001b34 <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001b40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff43 	bl	80019d0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = temp;
  }
}
 8001b52:	e003      	b.n	8001b5c <XMC_I2C_CH_MasterStart+0x60>

    channel->TBUF[0] = temp;
  }
  else
  {
    channel->IN[0U] = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]
 8001b70:	4613      	mov	r3, r2
 8001b72:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8001b74:	887b      	ldrh	r3, [r7, #2]
 8001b76:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8001b7e:	787b      	ldrb	r3, [r7, #1]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d103      	bne.n	8001b8c <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b92:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d110      	bne.n	8001bbc <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001b9a:	bf00      	nop
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff07 	bl	80019b0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b80      	cmp	r3, #128	; 0x80
 8001ba6:	d0f9      	beq.n	8001b9c <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001ba8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff0f 	bl	80019d0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = tmp;
  }
}
 8001bba:	e003      	b.n	8001bc4 <XMC_I2C_CH_MasterRepeatedStart+0x60>

    channel->TBUF[0] = tmp;
  }
  else
  {
    channel->IN[0U] = tmp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bda:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d111      	bne.n	8001c06 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001be2:	bf00      	nop
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff fee3 	bl	80019b0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b80      	cmp	r3, #128	; 0x80
 8001bee:	d0f9      	beq.n	8001be4 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff feeb 	bl	80019d0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
}
 8001c04:	e004      	b.n	8001c10 <XMC_I2C_CH_MasterStop+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001c0c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c2a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d110      	bne.n	8001c54 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001c32:	bf00      	nop
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff febb 	bl	80019b0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b80      	cmp	r3, #128	; 0x80
 8001c3e:	d0f9      	beq.n	8001c34 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001c40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fec3 	bl	80019d0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
}
 8001c52:	e003      	b.n	8001c5c <XMC_I2C_CH_MasterTransmit+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8001c54:	78fa      	ldrb	r2, [r7, #3]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <XMC_I2C_CH_MasterReceiveNack>:
  }
}

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c72:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d111      	bne.n	8001c9e <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001c7a:	bf00      	nop
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff fe97 	bl	80019b0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b80      	cmp	r3, #128	; 0x80
 8001c86:	d0f9      	beq.n	8001c7c <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fe9f 	bl	80019d0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
}
 8001c9c:	e004      	b.n	8001ca8 <XMC_I2C_CH_MasterReceiveNack+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001ca4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001cbe:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d103      	bne.n	8001cce <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e003      	b.n	8001cd6 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001cd4:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	2000ffc0 	.word	0x2000ffc0

08001cfc <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	0f1b      	lsrs	r3, r3, #28
 8001d08:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001d10:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8001d20:	4413      	add	r3, r2
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	601a      	str	r2, [r3, #0]
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	50004414 	.word	0x50004414

08001d38 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001d3c:	f7ff ffd2 	bl	8001ce4 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8001d40:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	50004600 	.word	0x50004600

08001d58 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <XMC_USIC_CH_Enable+0x78>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d003      	beq.n	8001d70 <XMC_USIC_CH_Enable+0x18>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a1a      	ldr	r2, [pc, #104]	; (8001dd4 <XMC_USIC_CH_Enable+0x7c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d103      	bne.n	8001d78 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001d70:	4819      	ldr	r0, [pc, #100]	; (8001dd8 <XMC_USIC_CH_Enable+0x80>)
 8001d72:	f000 f91f 	bl	8001fb4 <XMC_USIC_Enable>
 8001d76:	e016      	b.n	8001da6 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <XMC_USIC_CH_Enable+0x84>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d003      	beq.n	8001d88 <XMC_USIC_CH_Enable+0x30>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a17      	ldr	r2, [pc, #92]	; (8001de0 <XMC_USIC_CH_Enable+0x88>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d103      	bne.n	8001d90 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001d88:	4816      	ldr	r0, [pc, #88]	; (8001de4 <XMC_USIC_CH_Enable+0x8c>)
 8001d8a:	f000 f913 	bl	8001fb4 <XMC_USIC_Enable>
 8001d8e:	e00a      	b.n	8001da6 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a15      	ldr	r2, [pc, #84]	; (8001de8 <XMC_USIC_CH_Enable+0x90>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d003      	beq.n	8001da0 <XMC_USIC_CH_Enable+0x48>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a14      	ldr	r2, [pc, #80]	; (8001dec <XMC_USIC_CH_Enable+0x94>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d102      	bne.n	8001da6 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001da0:	4813      	ldr	r0, [pc, #76]	; (8001df0 <XMC_USIC_CH_Enable+0x98>)
 8001da2:	f000 f907 	bl	8001fb4 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2203      	movs	r2, #3
 8001daa:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001dac:	bf00      	nop
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f9      	beq.n	8001dae <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f023 020f 	bic.w	r2, r3, #15
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40030000 	.word	0x40030000
 8001dd4:	40030200 	.word	0x40030200
 8001dd8:	40030008 	.word	0x40030008
 8001ddc:	48020000 	.word	0x48020000
 8001de0:	48020200 	.word	0x48020200
 8001de4:	48020008 	.word	0x48020008
 8001de8:	48024000 	.word	0x48024000
 8001dec:	48024200 	.word	0x48024200
 8001df0:	48024008 	.word	0x48024008

08001df4 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08e      	sub	sp, #56	; 0x38
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b63      	cmp	r3, #99	; 0x63
 8001e04:	d958      	bls.n	8001eb8 <XMC_USIC_CH_SetBaudrate+0xc4>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d055      	beq.n	8001eb8 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001e0c:	f7ff ff94 	bl	8001d38 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001e14:	fba3 2302 	umull	r2, r3, r3, r2
 8001e18:	095b      	lsrs	r3, r3, #5
 8001e1a:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	4a2b      	ldr	r2, [pc, #172]	; (8001ecc <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	095b      	lsrs	r3, r3, #5
 8001e26:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001e30:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001e36:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e3c:	e022      	b.n	8001e84 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e42:	fb02 f203 	mul.w	r2, r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	fb01 f303 	mul.w	r3, r1, r3
 8001e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e52:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	0a9b      	lsrs	r3, r3, #10
 8001e58:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e60:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e68:	d209      	bcs.n	8001e7e <XMC_USIC_CH_SetBaudrate+0x8a>
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d205      	bcs.n	8001e7e <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e80:	3b01      	subs	r3, #1
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
 8001e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1d9      	bne.n	8001e3e <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001e9a:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	3a01      	subs	r2, #1
 8001ea0:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001ea2:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001eaa:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001eb6:	e002      	b.n	8001ebe <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8001ebe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3738      	adds	r7, #56	; 0x38
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	51eb851f 	.word	0x51eb851f
 8001ed0:	fc0080ef 	.word	0xfc0080ef

08001ed4 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001eea:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001efc:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	0211      	lsls	r1, r2, #8
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001f06:	79fa      	ldrb	r2, [r7, #7]
 8001f08:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001f0a:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001f0c:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	f8ffc0c0 	.word	0xf8ffc0c0

08001f24 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	4613      	mov	r3, r2
 8001f32:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f3a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001f4c:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	0211      	lsls	r1, r2, #8
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001f56:	79fa      	ldrb	r2, [r7, #7]
 8001f58:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001f5a:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	efffc0c0 	.word	0xefffc0c0

08001f78 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	460b      	mov	r3, r1
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001f8c:	7afb      	ldrb	r3, [r7, #11]
 8001f8e:	2107      	movs	r1, #7
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8001f98:	7afb      	ldrb	r3, [r7, #11]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <XMC_USIC_Enable+0x40>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d104      	bne.n	8001fce <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001fc4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001fc8:	f7ff fe98 	bl	8001cfc <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001fcc:	e00e      	b.n	8001fec <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <XMC_USIC_Enable+0x44>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d103      	bne.n	8001fde <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001fd6:	4809      	ldr	r0, [pc, #36]	; (8001ffc <XMC_USIC_Enable+0x48>)
 8001fd8:	f7ff fe90 	bl	8001cfc <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001fdc:	e006      	b.n	8001fec <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a07      	ldr	r2, [pc, #28]	; (8002000 <XMC_USIC_Enable+0x4c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d102      	bne.n	8001fec <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001fe6:	4807      	ldr	r0, [pc, #28]	; (8002004 <XMC_USIC_Enable+0x50>)
 8001fe8:	f7ff fe88 	bl	8001cfc <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40030008 	.word	0x40030008
 8001ff8:	48020008 	.word	0x48020008
 8001ffc:	10000080 	.word	0x10000080
 8002000:	48024008 	.word	0x48024008
 8002004:	10000100 	.word	0x10000100

08002008 <__libc_init_array>:
 8002008:	b570      	push	{r4, r5, r6, lr}
 800200a:	4e0f      	ldr	r6, [pc, #60]	; (8002048 <__libc_init_array+0x40>)
 800200c:	4d0f      	ldr	r5, [pc, #60]	; (800204c <__libc_init_array+0x44>)
 800200e:	1b76      	subs	r6, r6, r5
 8002010:	10b6      	asrs	r6, r6, #2
 8002012:	bf18      	it	ne
 8002014:	2400      	movne	r4, #0
 8002016:	d005      	beq.n	8002024 <__libc_init_array+0x1c>
 8002018:	3401      	adds	r4, #1
 800201a:	f855 3b04 	ldr.w	r3, [r5], #4
 800201e:	4798      	blx	r3
 8002020:	42a6      	cmp	r6, r4
 8002022:	d1f9      	bne.n	8002018 <__libc_init_array+0x10>
 8002024:	4e0a      	ldr	r6, [pc, #40]	; (8002050 <__libc_init_array+0x48>)
 8002026:	4d0b      	ldr	r5, [pc, #44]	; (8002054 <__libc_init_array+0x4c>)
 8002028:	1b76      	subs	r6, r6, r5
 800202a:	f7ff f97d 	bl	8001328 <_init>
 800202e:	10b6      	asrs	r6, r6, #2
 8002030:	bf18      	it	ne
 8002032:	2400      	movne	r4, #0
 8002034:	d006      	beq.n	8002044 <__libc_init_array+0x3c>
 8002036:	3401      	adds	r4, #1
 8002038:	f855 3b04 	ldr.w	r3, [r5], #4
 800203c:	4798      	blx	r3
 800203e:	42a6      	cmp	r6, r4
 8002040:	d1f9      	bne.n	8002036 <__libc_init_array+0x2e>
 8002042:	bd70      	pop	{r4, r5, r6, pc}
 8002044:	bd70      	pop	{r4, r5, r6, pc}
 8002046:	bf00      	nop
 8002048:	200009e0 	.word	0x200009e0
 800204c:	200009e0 	.word	0x200009e0
 8002050:	200009e0 	.word	0x200009e0
 8002054:	200009e0 	.word	0x200009e0

08002058 <memcpy>:
 8002058:	4684      	mov	ip, r0
 800205a:	ea41 0300 	orr.w	r3, r1, r0
 800205e:	f013 0303 	ands.w	r3, r3, #3
 8002062:	d16d      	bne.n	8002140 <memcpy+0xe8>
 8002064:	3a40      	subs	r2, #64	; 0x40
 8002066:	d341      	bcc.n	80020ec <memcpy+0x94>
 8002068:	f851 3b04 	ldr.w	r3, [r1], #4
 800206c:	f840 3b04 	str.w	r3, [r0], #4
 8002070:	f851 3b04 	ldr.w	r3, [r1], #4
 8002074:	f840 3b04 	str.w	r3, [r0], #4
 8002078:	f851 3b04 	ldr.w	r3, [r1], #4
 800207c:	f840 3b04 	str.w	r3, [r0], #4
 8002080:	f851 3b04 	ldr.w	r3, [r1], #4
 8002084:	f840 3b04 	str.w	r3, [r0], #4
 8002088:	f851 3b04 	ldr.w	r3, [r1], #4
 800208c:	f840 3b04 	str.w	r3, [r0], #4
 8002090:	f851 3b04 	ldr.w	r3, [r1], #4
 8002094:	f840 3b04 	str.w	r3, [r0], #4
 8002098:	f851 3b04 	ldr.w	r3, [r1], #4
 800209c:	f840 3b04 	str.w	r3, [r0], #4
 80020a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80020a4:	f840 3b04 	str.w	r3, [r0], #4
 80020a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80020ac:	f840 3b04 	str.w	r3, [r0], #4
 80020b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80020b4:	f840 3b04 	str.w	r3, [r0], #4
 80020b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80020bc:	f840 3b04 	str.w	r3, [r0], #4
 80020c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80020c4:	f840 3b04 	str.w	r3, [r0], #4
 80020c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80020cc:	f840 3b04 	str.w	r3, [r0], #4
 80020d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80020d4:	f840 3b04 	str.w	r3, [r0], #4
 80020d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80020dc:	f840 3b04 	str.w	r3, [r0], #4
 80020e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80020e4:	f840 3b04 	str.w	r3, [r0], #4
 80020e8:	3a40      	subs	r2, #64	; 0x40
 80020ea:	d2bd      	bcs.n	8002068 <memcpy+0x10>
 80020ec:	3230      	adds	r2, #48	; 0x30
 80020ee:	d311      	bcc.n	8002114 <memcpy+0xbc>
 80020f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80020f4:	f840 3b04 	str.w	r3, [r0], #4
 80020f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80020fc:	f840 3b04 	str.w	r3, [r0], #4
 8002100:	f851 3b04 	ldr.w	r3, [r1], #4
 8002104:	f840 3b04 	str.w	r3, [r0], #4
 8002108:	f851 3b04 	ldr.w	r3, [r1], #4
 800210c:	f840 3b04 	str.w	r3, [r0], #4
 8002110:	3a10      	subs	r2, #16
 8002112:	d2ed      	bcs.n	80020f0 <memcpy+0x98>
 8002114:	320c      	adds	r2, #12
 8002116:	d305      	bcc.n	8002124 <memcpy+0xcc>
 8002118:	f851 3b04 	ldr.w	r3, [r1], #4
 800211c:	f840 3b04 	str.w	r3, [r0], #4
 8002120:	3a04      	subs	r2, #4
 8002122:	d2f9      	bcs.n	8002118 <memcpy+0xc0>
 8002124:	3204      	adds	r2, #4
 8002126:	d008      	beq.n	800213a <memcpy+0xe2>
 8002128:	07d2      	lsls	r2, r2, #31
 800212a:	bf1c      	itt	ne
 800212c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002130:	f800 3b01 	strbne.w	r3, [r0], #1
 8002134:	d301      	bcc.n	800213a <memcpy+0xe2>
 8002136:	880b      	ldrh	r3, [r1, #0]
 8002138:	8003      	strh	r3, [r0, #0]
 800213a:	4660      	mov	r0, ip
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	2a08      	cmp	r2, #8
 8002142:	d313      	bcc.n	800216c <memcpy+0x114>
 8002144:	078b      	lsls	r3, r1, #30
 8002146:	d08d      	beq.n	8002064 <memcpy+0xc>
 8002148:	f010 0303 	ands.w	r3, r0, #3
 800214c:	d08a      	beq.n	8002064 <memcpy+0xc>
 800214e:	f1c3 0304 	rsb	r3, r3, #4
 8002152:	1ad2      	subs	r2, r2, r3
 8002154:	07db      	lsls	r3, r3, #31
 8002156:	bf1c      	itt	ne
 8002158:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800215c:	f800 3b01 	strbne.w	r3, [r0], #1
 8002160:	d380      	bcc.n	8002064 <memcpy+0xc>
 8002162:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002166:	f820 3b02 	strh.w	r3, [r0], #2
 800216a:	e77b      	b.n	8002064 <memcpy+0xc>
 800216c:	3a04      	subs	r2, #4
 800216e:	d3d9      	bcc.n	8002124 <memcpy+0xcc>
 8002170:	3a01      	subs	r2, #1
 8002172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002176:	f800 3b01 	strb.w	r3, [r0], #1
 800217a:	d2f9      	bcs.n	8002170 <memcpy+0x118>
 800217c:	780b      	ldrb	r3, [r1, #0]
 800217e:	7003      	strb	r3, [r0, #0]
 8002180:	784b      	ldrb	r3, [r1, #1]
 8002182:	7043      	strb	r3, [r0, #1]
 8002184:	788b      	ldrb	r3, [r1, #2]
 8002186:	7083      	strb	r3, [r0, #2]
 8002188:	4660      	mov	r0, ip
 800218a:	4770      	bx	lr

0800218c <memset>:
 800218c:	b470      	push	{r4, r5, r6}
 800218e:	0784      	lsls	r4, r0, #30
 8002190:	d046      	beq.n	8002220 <memset+0x94>
 8002192:	1e54      	subs	r4, r2, #1
 8002194:	2a00      	cmp	r2, #0
 8002196:	d041      	beq.n	800221c <memset+0x90>
 8002198:	b2cd      	uxtb	r5, r1
 800219a:	4603      	mov	r3, r0
 800219c:	e002      	b.n	80021a4 <memset+0x18>
 800219e:	1e62      	subs	r2, r4, #1
 80021a0:	b3e4      	cbz	r4, 800221c <memset+0x90>
 80021a2:	4614      	mov	r4, r2
 80021a4:	f803 5b01 	strb.w	r5, [r3], #1
 80021a8:	079a      	lsls	r2, r3, #30
 80021aa:	d1f8      	bne.n	800219e <memset+0x12>
 80021ac:	2c03      	cmp	r4, #3
 80021ae:	d92e      	bls.n	800220e <memset+0x82>
 80021b0:	b2cd      	uxtb	r5, r1
 80021b2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80021b6:	2c0f      	cmp	r4, #15
 80021b8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80021bc:	d919      	bls.n	80021f2 <memset+0x66>
 80021be:	f103 0210 	add.w	r2, r3, #16
 80021c2:	4626      	mov	r6, r4
 80021c4:	3e10      	subs	r6, #16
 80021c6:	2e0f      	cmp	r6, #15
 80021c8:	f842 5c10 	str.w	r5, [r2, #-16]
 80021cc:	f842 5c0c 	str.w	r5, [r2, #-12]
 80021d0:	f842 5c08 	str.w	r5, [r2, #-8]
 80021d4:	f842 5c04 	str.w	r5, [r2, #-4]
 80021d8:	f102 0210 	add.w	r2, r2, #16
 80021dc:	d8f2      	bhi.n	80021c4 <memset+0x38>
 80021de:	f1a4 0210 	sub.w	r2, r4, #16
 80021e2:	f022 020f 	bic.w	r2, r2, #15
 80021e6:	f004 040f 	and.w	r4, r4, #15
 80021ea:	3210      	adds	r2, #16
 80021ec:	2c03      	cmp	r4, #3
 80021ee:	4413      	add	r3, r2
 80021f0:	d90d      	bls.n	800220e <memset+0x82>
 80021f2:	461e      	mov	r6, r3
 80021f4:	4622      	mov	r2, r4
 80021f6:	3a04      	subs	r2, #4
 80021f8:	2a03      	cmp	r2, #3
 80021fa:	f846 5b04 	str.w	r5, [r6], #4
 80021fe:	d8fa      	bhi.n	80021f6 <memset+0x6a>
 8002200:	1f22      	subs	r2, r4, #4
 8002202:	f022 0203 	bic.w	r2, r2, #3
 8002206:	3204      	adds	r2, #4
 8002208:	4413      	add	r3, r2
 800220a:	f004 0403 	and.w	r4, r4, #3
 800220e:	b12c      	cbz	r4, 800221c <memset+0x90>
 8002210:	b2c9      	uxtb	r1, r1
 8002212:	441c      	add	r4, r3
 8002214:	f803 1b01 	strb.w	r1, [r3], #1
 8002218:	42a3      	cmp	r3, r4
 800221a:	d1fb      	bne.n	8002214 <memset+0x88>
 800221c:	bc70      	pop	{r4, r5, r6}
 800221e:	4770      	bx	lr
 8002220:	4614      	mov	r4, r2
 8002222:	4603      	mov	r3, r0
 8002224:	e7c2      	b.n	80021ac <memset+0x20>
 8002226:	bf00      	nop

08002228 <printf>:
 8002228:	b40f      	push	{r0, r1, r2, r3}
 800222a:	b500      	push	{lr}
 800222c:	4907      	ldr	r1, [pc, #28]	; (800224c <printf+0x24>)
 800222e:	b083      	sub	sp, #12
 8002230:	ab04      	add	r3, sp, #16
 8002232:	6808      	ldr	r0, [r1, #0]
 8002234:	f853 2b04 	ldr.w	r2, [r3], #4
 8002238:	6881      	ldr	r1, [r0, #8]
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	f000 f8d0 	bl	80023e0 <_vfprintf_r>
 8002240:	b003      	add	sp, #12
 8002242:	f85d eb04 	ldr.w	lr, [sp], #4
 8002246:	b004      	add	sp, #16
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000460 	.word	0x20000460

08002250 <_puts_r>:
 8002250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002252:	4605      	mov	r5, r0
 8002254:	b089      	sub	sp, #36	; 0x24
 8002256:	4608      	mov	r0, r1
 8002258:	460c      	mov	r4, r1
 800225a:	f000 f851 	bl	8002300 <strlen>
 800225e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002260:	4f14      	ldr	r7, [pc, #80]	; (80022b4 <_puts_r+0x64>)
 8002262:	9404      	str	r4, [sp, #16]
 8002264:	2601      	movs	r6, #1
 8002266:	1c44      	adds	r4, r0, #1
 8002268:	a904      	add	r1, sp, #16
 800226a:	2202      	movs	r2, #2
 800226c:	9403      	str	r4, [sp, #12]
 800226e:	9005      	str	r0, [sp, #20]
 8002270:	68ac      	ldr	r4, [r5, #8]
 8002272:	9706      	str	r7, [sp, #24]
 8002274:	9607      	str	r6, [sp, #28]
 8002276:	9101      	str	r1, [sp, #4]
 8002278:	9202      	str	r2, [sp, #8]
 800227a:	b1b3      	cbz	r3, 80022aa <_puts_r+0x5a>
 800227c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002280:	049a      	lsls	r2, r3, #18
 8002282:	d406      	bmi.n	8002292 <_puts_r+0x42>
 8002284:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800228a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800228e:	81a3      	strh	r3, [r4, #12]
 8002290:	6662      	str	r2, [r4, #100]	; 0x64
 8002292:	4621      	mov	r1, r4
 8002294:	4628      	mov	r0, r5
 8002296:	aa01      	add	r2, sp, #4
 8002298:	f002 ff20 	bl	80050dc <__sfvwrite_r>
 800229c:	2800      	cmp	r0, #0
 800229e:	bf14      	ite	ne
 80022a0:	f04f 30ff 	movne.w	r0, #4294967295
 80022a4:	200a      	moveq	r0, #10
 80022a6:	b009      	add	sp, #36	; 0x24
 80022a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022aa:	4628      	mov	r0, r5
 80022ac:	f002 fdd6 	bl	8004e5c <__sinit>
 80022b0:	e7e4      	b.n	800227c <_puts_r+0x2c>
 80022b2:	bf00      	nop
 80022b4:	08009144 	.word	0x08009144

080022b8 <puts>:
 80022b8:	4b02      	ldr	r3, [pc, #8]	; (80022c4 <puts+0xc>)
 80022ba:	4601      	mov	r1, r0
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	f7ff bfc7 	b.w	8002250 <_puts_r>
 80022c2:	bf00      	nop
 80022c4:	20000460 	.word	0x20000460
	...

08002300 <strlen>:
 8002300:	f890 f000 	pld	[r0]
 8002304:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8002308:	f020 0107 	bic.w	r1, r0, #7
 800230c:	f06f 0c00 	mvn.w	ip, #0
 8002310:	f010 0407 	ands.w	r4, r0, #7
 8002314:	f891 f020 	pld	[r1, #32]
 8002318:	f040 8049 	bne.w	80023ae <strlen+0xae>
 800231c:	f04f 0400 	mov.w	r4, #0
 8002320:	f06f 0007 	mvn.w	r0, #7
 8002324:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002328:	f891 f040 	pld	[r1, #64]	; 0x40
 800232c:	f100 0008 	add.w	r0, r0, #8
 8002330:	fa82 f24c 	uadd8	r2, r2, ip
 8002334:	faa4 f28c 	sel	r2, r4, ip
 8002338:	fa83 f34c 	uadd8	r3, r3, ip
 800233c:	faa2 f38c 	sel	r3, r2, ip
 8002340:	bb4b      	cbnz	r3, 8002396 <strlen+0x96>
 8002342:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8002346:	fa82 f24c 	uadd8	r2, r2, ip
 800234a:	f100 0008 	add.w	r0, r0, #8
 800234e:	faa4 f28c 	sel	r2, r4, ip
 8002352:	fa83 f34c 	uadd8	r3, r3, ip
 8002356:	faa2 f38c 	sel	r3, r2, ip
 800235a:	b9e3      	cbnz	r3, 8002396 <strlen+0x96>
 800235c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8002360:	fa82 f24c 	uadd8	r2, r2, ip
 8002364:	f100 0008 	add.w	r0, r0, #8
 8002368:	faa4 f28c 	sel	r2, r4, ip
 800236c:	fa83 f34c 	uadd8	r3, r3, ip
 8002370:	faa2 f38c 	sel	r3, r2, ip
 8002374:	b97b      	cbnz	r3, 8002396 <strlen+0x96>
 8002376:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800237a:	f101 0120 	add.w	r1, r1, #32
 800237e:	fa82 f24c 	uadd8	r2, r2, ip
 8002382:	f100 0008 	add.w	r0, r0, #8
 8002386:	faa4 f28c 	sel	r2, r4, ip
 800238a:	fa83 f34c 	uadd8	r3, r3, ip
 800238e:	faa2 f38c 	sel	r3, r2, ip
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0c6      	beq.n	8002324 <strlen+0x24>
 8002396:	2a00      	cmp	r2, #0
 8002398:	bf04      	itt	eq
 800239a:	3004      	addeq	r0, #4
 800239c:	461a      	moveq	r2, r3
 800239e:	ba12      	rev	r2, r2
 80023a0:	fab2 f282 	clz	r2, r2
 80023a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80023a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80023ac:	4770      	bx	lr
 80023ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 80023b2:	f004 0503 	and.w	r5, r4, #3
 80023b6:	f1c4 0000 	rsb	r0, r4, #0
 80023ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80023be:	f014 0f04 	tst.w	r4, #4
 80023c2:	f891 f040 	pld	[r1, #64]	; 0x40
 80023c6:	fa0c f505 	lsl.w	r5, ip, r5
 80023ca:	ea62 0205 	orn	r2, r2, r5
 80023ce:	bf1c      	itt	ne
 80023d0:	ea63 0305 	ornne	r3, r3, r5
 80023d4:	4662      	movne	r2, ip
 80023d6:	f04f 0400 	mov.w	r4, #0
 80023da:	e7a9      	b.n	8002330 <strlen+0x30>
 80023dc:	0000      	movs	r0, r0
	...

080023e0 <_vfprintf_r>:
 80023e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e4:	b0c5      	sub	sp, #276	; 0x114
 80023e6:	461c      	mov	r4, r3
 80023e8:	9108      	str	r1, [sp, #32]
 80023ea:	4616      	mov	r6, r2
 80023ec:	4605      	mov	r5, r0
 80023ee:	900a      	str	r0, [sp, #40]	; 0x28
 80023f0:	f003 f820 	bl	8005434 <_localeconv_r>
 80023f4:	6803      	ldr	r3, [r0, #0]
 80023f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff81 	bl	8002300 <strlen>
 80023fe:	940e      	str	r4, [sp, #56]	; 0x38
 8002400:	9016      	str	r0, [sp, #88]	; 0x58
 8002402:	b11d      	cbz	r5, 800240c <_vfprintf_r+0x2c>
 8002404:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8123 	beq.w	8002652 <_vfprintf_r+0x272>
 800240c:	9808      	ldr	r0, [sp, #32]
 800240e:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8002412:	b293      	uxth	r3, r2
 8002414:	0499      	lsls	r1, r3, #18
 8002416:	d407      	bmi.n	8002428 <_vfprintf_r+0x48>
 8002418:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800241a:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 800241e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002422:	8183      	strh	r3, [r0, #12]
 8002424:	6641      	str	r1, [r0, #100]	; 0x64
 8002426:	b29b      	uxth	r3, r3
 8002428:	071a      	lsls	r2, r3, #28
 800242a:	f140 80dd 	bpl.w	80025e8 <_vfprintf_r+0x208>
 800242e:	9a08      	ldr	r2, [sp, #32]
 8002430:	6912      	ldr	r2, [r2, #16]
 8002432:	2a00      	cmp	r2, #0
 8002434:	f000 80d8 	beq.w	80025e8 <_vfprintf_r+0x208>
 8002438:	f003 031a 	and.w	r3, r3, #26
 800243c:	2b0a      	cmp	r3, #10
 800243e:	f000 80e1 	beq.w	8002604 <_vfprintf_r+0x224>
 8002442:	ed9f 7b87 	vldr	d7, [pc, #540]	; 8002660 <_vfprintf_r+0x280>
 8002446:	2300      	movs	r3, #0
 8002448:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800244c:	9312      	str	r3, [sp, #72]	; 0x48
 800244e:	9329      	str	r3, [sp, #164]	; 0xa4
 8002450:	9328      	str	r3, [sp, #160]	; 0xa0
 8002452:	9319      	str	r3, [sp, #100]	; 0x64
 8002454:	930b      	str	r3, [sp, #44]	; 0x2c
 8002456:	f8df a214 	ldr.w	sl, [pc, #532]	; 800266c <_vfprintf_r+0x28c>
 800245a:	ab34      	add	r3, sp, #208	; 0xd0
 800245c:	9327      	str	r3, [sp, #156]	; 0x9c
 800245e:	4699      	mov	r9, r3
 8002460:	46b0      	mov	r8, r6
 8002462:	f898 3000 	ldrb.w	r3, [r8]
 8002466:	4644      	mov	r4, r8
 8002468:	b1eb      	cbz	r3, 80024a6 <_vfprintf_r+0xc6>
 800246a:	2b25      	cmp	r3, #37	; 0x25
 800246c:	d102      	bne.n	8002474 <_vfprintf_r+0x94>
 800246e:	e01a      	b.n	80024a6 <_vfprintf_r+0xc6>
 8002470:	2b25      	cmp	r3, #37	; 0x25
 8002472:	d003      	beq.n	800247c <_vfprintf_r+0x9c>
 8002474:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1f9      	bne.n	8002470 <_vfprintf_r+0x90>
 800247c:	ebc8 0504 	rsb	r5, r8, r4
 8002480:	b18d      	cbz	r5, 80024a6 <_vfprintf_r+0xc6>
 8002482:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002484:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002486:	f8c9 8000 	str.w	r8, [r9]
 800248a:	3301      	adds	r3, #1
 800248c:	442a      	add	r2, r5
 800248e:	2b07      	cmp	r3, #7
 8002490:	f8c9 5004 	str.w	r5, [r9, #4]
 8002494:	9229      	str	r2, [sp, #164]	; 0xa4
 8002496:	9328      	str	r3, [sp, #160]	; 0xa0
 8002498:	f300 80c2 	bgt.w	8002620 <_vfprintf_r+0x240>
 800249c:	f109 0908 	add.w	r9, r9, #8
 80024a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80024a2:	442b      	add	r3, r5
 80024a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80024a6:	7823      	ldrb	r3, [r4, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80c2 	beq.w	8002632 <_vfprintf_r+0x252>
 80024ae:	2300      	movs	r3, #0
 80024b0:	461a      	mov	r2, r3
 80024b2:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80024b6:	4619      	mov	r1, r3
 80024b8:	930c      	str	r3, [sp, #48]	; 0x30
 80024ba:	9307      	str	r3, [sp, #28]
 80024bc:	f04f 3bff 	mov.w	fp, #4294967295
 80024c0:	7863      	ldrb	r3, [r4, #1]
 80024c2:	f104 0801 	add.w	r8, r4, #1
 80024c6:	465d      	mov	r5, fp
 80024c8:	f108 0801 	add.w	r8, r8, #1
 80024cc:	f1a3 0020 	sub.w	r0, r3, #32
 80024d0:	2858      	cmp	r0, #88	; 0x58
 80024d2:	f200 8459 	bhi.w	8002d88 <_vfprintf_r+0x9a8>
 80024d6:	e8df f010 	tbh	[pc, r0, lsl #1]
 80024da:	040f      	.short	0x040f
 80024dc:	04570457 	.word	0x04570457
 80024e0:	04570418 	.word	0x04570418
 80024e4:	04570457 	.word	0x04570457
 80024e8:	04570457 	.word	0x04570457
 80024ec:	03620457 	.word	0x03620457
 80024f0:	04570449 	.word	0x04570449
 80024f4:	0109005d 	.word	0x0109005d
 80024f8:	01250457 	.word	0x01250457
 80024fc:	03700370 	.word	0x03700370
 8002500:	03700370 	.word	0x03700370
 8002504:	03700370 	.word	0x03700370
 8002508:	03700370 	.word	0x03700370
 800250c:	04570370 	.word	0x04570370
 8002510:	04570457 	.word	0x04570457
 8002514:	04570457 	.word	0x04570457
 8002518:	04570457 	.word	0x04570457
 800251c:	04570457 	.word	0x04570457
 8002520:	03800457 	.word	0x03800457
 8002524:	0457039d 	.word	0x0457039d
 8002528:	0457039d 	.word	0x0457039d
 800252c:	04570457 	.word	0x04570457
 8002530:	03eb0457 	.word	0x03eb0457
 8002534:	04570457 	.word	0x04570457
 8002538:	0457012c 	.word	0x0457012c
 800253c:	04570457 	.word	0x04570457
 8002540:	04570457 	.word	0x04570457
 8002544:	04570155 	.word	0x04570155
 8002548:	02b40457 	.word	0x02b40457
 800254c:	04570457 	.word	0x04570457
 8002550:	04570457 	.word	0x04570457
 8002554:	04570457 	.word	0x04570457
 8002558:	04570457 	.word	0x04570457
 800255c:	04570457 	.word	0x04570457
 8002560:	030f02f5 	.word	0x030f02f5
 8002564:	039d039d 	.word	0x039d039d
 8002568:	033f039d 	.word	0x033f039d
 800256c:	0457030f 	.word	0x0457030f
 8002570:	03460457 	.word	0x03460457
 8002574:	03500457 	.word	0x03500457
 8002578:	006400cb 	.word	0x006400cb
 800257c:	04570420 	.word	0x04570420
 8002580:	04570428 	.word	0x04570428
 8002584:	045703f2 	.word	0x045703f2
 8002588:	03fa0457 	.word	0x03fa0457
 800258c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800258e:	930e      	str	r3, [sp, #56]	; 0x38
 8002590:	4240      	negs	r0, r0
 8002592:	900c      	str	r0, [sp, #48]	; 0x30
 8002594:	9b07      	ldr	r3, [sp, #28]
 8002596:	f043 0304 	orr.w	r3, r3, #4
 800259a:	9307      	str	r3, [sp, #28]
 800259c:	f898 3000 	ldrb.w	r3, [r8]
 80025a0:	e792      	b.n	80024c8 <_vfprintf_r+0xe8>
 80025a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80025a4:	46ab      	mov	fp, r5
 80025a6:	2100      	movs	r1, #0
 80025a8:	6804      	ldr	r4, [r0, #0]
 80025aa:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80025ae:	1d07      	adds	r7, r0, #4
 80025b0:	9807      	ldr	r0, [sp, #28]
 80025b2:	2330      	movs	r3, #48	; 0x30
 80025b4:	2278      	movs	r2, #120	; 0x78
 80025b6:	458b      	cmp	fp, r1
 80025b8:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 80025bc:	f04f 0500 	mov.w	r5, #0
 80025c0:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 80025c4:	f040 0302 	orr.w	r3, r0, #2
 80025c8:	f2c0 83fb 	blt.w	8002dc2 <_vfprintf_r+0x9e2>
 80025cc:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	9307      	str	r3, [sp, #28]
 80025d6:	ea54 0305 	orrs.w	r3, r4, r5
 80025da:	970e      	str	r7, [sp, #56]	; 0x38
 80025dc:	f000 83cc 	beq.w	8002d78 <_vfprintf_r+0x998>
 80025e0:	460f      	mov	r7, r1
 80025e2:	9211      	str	r2, [sp, #68]	; 0x44
 80025e4:	4820      	ldr	r0, [pc, #128]	; (8002668 <_vfprintf_r+0x288>)
 80025e6:	e25d      	b.n	8002aa4 <_vfprintf_r+0x6c4>
 80025e8:	9908      	ldr	r1, [sp, #32]
 80025ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80025ec:	f001 faf0 	bl	8003bd0 <__swsetup_r>
 80025f0:	2800      	cmp	r0, #0
 80025f2:	f041 803f 	bne.w	8003674 <_vfprintf_r+0x1294>
 80025f6:	9b08      	ldr	r3, [sp, #32]
 80025f8:	899b      	ldrh	r3, [r3, #12]
 80025fa:	f003 031a 	and.w	r3, r3, #26
 80025fe:	2b0a      	cmp	r3, #10
 8002600:	f47f af1f 	bne.w	8002442 <_vfprintf_r+0x62>
 8002604:	9908      	ldr	r1, [sp, #32]
 8002606:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f6ff af19 	blt.w	8002442 <_vfprintf_r+0x62>
 8002610:	4623      	mov	r3, r4
 8002612:	4632      	mov	r2, r6
 8002614:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002616:	f001 fa7f 	bl	8003b18 <__sbprintf>
 800261a:	b045      	add	sp, #276	; 0x114
 800261c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002620:	aa27      	add	r2, sp, #156	; 0x9c
 8002622:	9908      	ldr	r1, [sp, #32]
 8002624:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002626:	f005 fc09 	bl	8007e3c <__sprint_r>
 800262a:	b948      	cbnz	r0, 8002640 <_vfprintf_r+0x260>
 800262c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002630:	e736      	b.n	80024a0 <_vfprintf_r+0xc0>
 8002632:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002634:	b123      	cbz	r3, 8002640 <_vfprintf_r+0x260>
 8002636:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002638:	9908      	ldr	r1, [sp, #32]
 800263a:	aa27      	add	r2, sp, #156	; 0x9c
 800263c:	f005 fbfe 	bl	8007e3c <__sprint_r>
 8002640:	9b08      	ldr	r3, [sp, #32]
 8002642:	899b      	ldrh	r3, [r3, #12]
 8002644:	0659      	lsls	r1, r3, #25
 8002646:	f101 8015 	bmi.w	8003674 <_vfprintf_r+0x1294>
 800264a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800264c:	b045      	add	sp, #276	; 0x114
 800264e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002652:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002654:	f002 fc02 	bl	8004e5c <__sinit>
 8002658:	e6d8      	b.n	800240c <_vfprintf_r+0x2c>
 800265a:	bf00      	nop
 800265c:	f3af 8000 	nop.w
	...
 8002668:	0800917c 	.word	0x0800917c
 800266c:	08009148 	.word	0x08009148
 8002670:	9311      	str	r3, [sp, #68]	; 0x44
 8002672:	46ab      	mov	fp, r5
 8002674:	2a00      	cmp	r2, #0
 8002676:	f041 8232 	bne.w	8003ade <_vfprintf_r+0x16fe>
 800267a:	9a07      	ldr	r2, [sp, #28]
 800267c:	f012 0320 	ands.w	r3, r2, #32
 8002680:	d064      	beq.n	800274c <_vfprintf_r+0x36c>
 8002682:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002684:	3707      	adds	r7, #7
 8002686:	f027 0307 	bic.w	r3, r7, #7
 800268a:	2700      	movs	r7, #0
 800268c:	f103 0108 	add.w	r1, r3, #8
 8002690:	45bb      	cmp	fp, r7
 8002692:	910e      	str	r1, [sp, #56]	; 0x38
 8002694:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002698:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800269c:	f2c0 86ba 	blt.w	8003414 <_vfprintf_r+0x1034>
 80026a0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80026a4:	9307      	str	r3, [sp, #28]
 80026a6:	ea54 0305 	orrs.w	r3, r4, r5
 80026aa:	f000 8382 	beq.w	8002db2 <_vfprintf_r+0x9d2>
 80026ae:	ae34      	add	r6, sp, #208	; 0xd0
 80026b0:	08e2      	lsrs	r2, r4, #3
 80026b2:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 80026b6:	08e9      	lsrs	r1, r5, #3
 80026b8:	f004 0307 	and.w	r3, r4, #7
 80026bc:	460d      	mov	r5, r1
 80026be:	4614      	mov	r4, r2
 80026c0:	3330      	adds	r3, #48	; 0x30
 80026c2:	ea54 0205 	orrs.w	r2, r4, r5
 80026c6:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80026ca:	d1f1      	bne.n	80026b0 <_vfprintf_r+0x2d0>
 80026cc:	9a07      	ldr	r2, [sp, #28]
 80026ce:	07d2      	lsls	r2, r2, #31
 80026d0:	f140 8096 	bpl.w	8002800 <_vfprintf_r+0x420>
 80026d4:	2b30      	cmp	r3, #48	; 0x30
 80026d6:	f000 8093 	beq.w	8002800 <_vfprintf_r+0x420>
 80026da:	2230      	movs	r2, #48	; 0x30
 80026dc:	1e73      	subs	r3, r6, #1
 80026de:	f806 2c01 	strb.w	r2, [r6, #-1]
 80026e2:	aa34      	add	r2, sp, #208	; 0xd0
 80026e4:	1ad2      	subs	r2, r2, r3
 80026e6:	920d      	str	r2, [sp, #52]	; 0x34
 80026e8:	461e      	mov	r6, r3
 80026ea:	e08c      	b.n	8002806 <_vfprintf_r+0x426>
 80026ec:	f898 3000 	ldrb.w	r3, [r8]
 80026f0:	2b2a      	cmp	r3, #42	; 0x2a
 80026f2:	f108 0401 	add.w	r4, r8, #1
 80026f6:	f001 81d0 	beq.w	8003a9a <_vfprintf_r+0x16ba>
 80026fa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80026fe:	2809      	cmp	r0, #9
 8002700:	bf98      	it	ls
 8002702:	2500      	movls	r5, #0
 8002704:	f201 816c 	bhi.w	80039e0 <_vfprintf_r+0x1600>
 8002708:	f814 3b01 	ldrb.w	r3, [r4], #1
 800270c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002710:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8002714:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002718:	2809      	cmp	r0, #9
 800271a:	d9f5      	bls.n	8002708 <_vfprintf_r+0x328>
 800271c:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8002720:	46a0      	mov	r8, r4
 8002722:	e6d3      	b.n	80024cc <_vfprintf_r+0xec>
 8002724:	9b07      	ldr	r3, [sp, #28]
 8002726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272a:	9307      	str	r3, [sp, #28]
 800272c:	f898 3000 	ldrb.w	r3, [r8]
 8002730:	e6ca      	b.n	80024c8 <_vfprintf_r+0xe8>
 8002732:	9311      	str	r3, [sp, #68]	; 0x44
 8002734:	46ab      	mov	fp, r5
 8002736:	2a00      	cmp	r2, #0
 8002738:	f041 81d9 	bne.w	8003aee <_vfprintf_r+0x170e>
 800273c:	9b07      	ldr	r3, [sp, #28]
 800273e:	f043 0310 	orr.w	r3, r3, #16
 8002742:	9307      	str	r3, [sp, #28]
 8002744:	9a07      	ldr	r2, [sp, #28]
 8002746:	f012 0320 	ands.w	r3, r2, #32
 800274a:	d19a      	bne.n	8002682 <_vfprintf_r+0x2a2>
 800274c:	9907      	ldr	r1, [sp, #28]
 800274e:	f011 0210 	ands.w	r2, r1, #16
 8002752:	f000 8634 	beq.w	80033be <_vfprintf_r+0xfde>
 8002756:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002758:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800275c:	f1bb 0f00 	cmp.w	fp, #0
 8002760:	6804      	ldr	r4, [r0, #0]
 8002762:	f100 0704 	add.w	r7, r0, #4
 8002766:	f04f 0500 	mov.w	r5, #0
 800276a:	f2c0 8652 	blt.w	8003412 <_vfprintf_r+0x1032>
 800276e:	460a      	mov	r2, r1
 8002770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002774:	9207      	str	r2, [sp, #28]
 8002776:	ea54 0205 	orrs.w	r2, r4, r5
 800277a:	970e      	str	r7, [sp, #56]	; 0x38
 800277c:	f000 8319 	beq.w	8002db2 <_vfprintf_r+0x9d2>
 8002780:	461f      	mov	r7, r3
 8002782:	e794      	b.n	80026ae <_vfprintf_r+0x2ce>
 8002784:	9311      	str	r3, [sp, #68]	; 0x44
 8002786:	46ab      	mov	fp, r5
 8002788:	2a00      	cmp	r2, #0
 800278a:	f041 81a0 	bne.w	8003ace <_vfprintf_r+0x16ee>
 800278e:	9b07      	ldr	r3, [sp, #28]
 8002790:	f043 0310 	orr.w	r3, r3, #16
 8002794:	9307      	str	r3, [sp, #28]
 8002796:	9a07      	ldr	r2, [sp, #28]
 8002798:	f012 0320 	ands.w	r3, r2, #32
 800279c:	f000 84fa 	beq.w	8003194 <_vfprintf_r+0xdb4>
 80027a0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80027a2:	3707      	adds	r7, #7
 80027a4:	f027 0307 	bic.w	r3, r7, #7
 80027a8:	2700      	movs	r7, #0
 80027aa:	f103 0108 	add.w	r1, r3, #8
 80027ae:	45bb      	cmp	fp, r7
 80027b0:	910e      	str	r1, [sp, #56]	; 0x38
 80027b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027b6:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80027ba:	f2c0 8523 	blt.w	8003204 <_vfprintf_r+0xe24>
 80027be:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80027c2:	9307      	str	r3, [sp, #28]
 80027c4:	ea54 0305 	orrs.w	r3, r4, r5
 80027c8:	f000 81bc 	beq.w	8002b44 <_vfprintf_r+0x764>
 80027cc:	2d00      	cmp	r5, #0
 80027ce:	bf08      	it	eq
 80027d0:	2c0a      	cmpeq	r4, #10
 80027d2:	f0c0 851b 	bcc.w	800320c <_vfprintf_r+0xe2c>
 80027d6:	ae34      	add	r6, sp, #208	; 0xd0
 80027d8:	4620      	mov	r0, r4
 80027da:	4629      	mov	r1, r5
 80027dc:	220a      	movs	r2, #10
 80027de:	2300      	movs	r3, #0
 80027e0:	f006 fa44 	bl	8008c6c <__aeabi_uldivmod>
 80027e4:	3230      	adds	r2, #48	; 0x30
 80027e6:	f806 2d01 	strb.w	r2, [r6, #-1]!
 80027ea:	4620      	mov	r0, r4
 80027ec:	4629      	mov	r1, r5
 80027ee:	2300      	movs	r3, #0
 80027f0:	220a      	movs	r2, #10
 80027f2:	f006 fa3b 	bl	8008c6c <__aeabi_uldivmod>
 80027f6:	4604      	mov	r4, r0
 80027f8:	460d      	mov	r5, r1
 80027fa:	ea54 0305 	orrs.w	r3, r4, r5
 80027fe:	d1eb      	bne.n	80027d8 <_vfprintf_r+0x3f8>
 8002800:	ab34      	add	r3, sp, #208	; 0xd0
 8002802:	1b9b      	subs	r3, r3, r6
 8002804:	930d      	str	r3, [sp, #52]	; 0x34
 8002806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002808:	455b      	cmp	r3, fp
 800280a:	bfb8      	it	lt
 800280c:	465b      	movlt	r3, fp
 800280e:	9309      	str	r3, [sp, #36]	; 0x24
 8002810:	2300      	movs	r3, #0
 8002812:	9313      	str	r3, [sp, #76]	; 0x4c
 8002814:	b117      	cbz	r7, 800281c <_vfprintf_r+0x43c>
 8002816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002818:	3301      	adds	r3, #1
 800281a:	9309      	str	r3, [sp, #36]	; 0x24
 800281c:	9b07      	ldr	r3, [sp, #28]
 800281e:	f013 0302 	ands.w	r3, r3, #2
 8002822:	930f      	str	r3, [sp, #60]	; 0x3c
 8002824:	d002      	beq.n	800282c <_vfprintf_r+0x44c>
 8002826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002828:	3302      	adds	r3, #2
 800282a:	9309      	str	r3, [sp, #36]	; 0x24
 800282c:	9b07      	ldr	r3, [sp, #28]
 800282e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8002832:	9310      	str	r3, [sp, #64]	; 0x40
 8002834:	f040 82d2 	bne.w	8002ddc <_vfprintf_r+0x9fc>
 8002838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800283a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800283c:	1a9d      	subs	r5, r3, r2
 800283e:	2d00      	cmp	r5, #0
 8002840:	f340 82cc 	ble.w	8002ddc <_vfprintf_r+0x9fc>
 8002844:	2d10      	cmp	r5, #16
 8002846:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8002848:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800284a:	4fa8      	ldr	r7, [pc, #672]	; (8002aec <_vfprintf_r+0x70c>)
 800284c:	dd27      	ble.n	800289e <_vfprintf_r+0x4be>
 800284e:	9618      	str	r6, [sp, #96]	; 0x60
 8002850:	4648      	mov	r0, r9
 8002852:	2410      	movs	r4, #16
 8002854:	46b9      	mov	r9, r7
 8002856:	9e08      	ldr	r6, [sp, #32]
 8002858:	462f      	mov	r7, r5
 800285a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800285c:	e004      	b.n	8002868 <_vfprintf_r+0x488>
 800285e:	3f10      	subs	r7, #16
 8002860:	2f10      	cmp	r7, #16
 8002862:	f100 0008 	add.w	r0, r0, #8
 8002866:	dd16      	ble.n	8002896 <_vfprintf_r+0x4b6>
 8002868:	3201      	adds	r2, #1
 800286a:	4ba0      	ldr	r3, [pc, #640]	; (8002aec <_vfprintf_r+0x70c>)
 800286c:	9228      	str	r2, [sp, #160]	; 0xa0
 800286e:	3110      	adds	r1, #16
 8002870:	2a07      	cmp	r2, #7
 8002872:	9129      	str	r1, [sp, #164]	; 0xa4
 8002874:	e880 0018 	stmia.w	r0, {r3, r4}
 8002878:	ddf1      	ble.n	800285e <_vfprintf_r+0x47e>
 800287a:	aa27      	add	r2, sp, #156	; 0x9c
 800287c:	4631      	mov	r1, r6
 800287e:	4628      	mov	r0, r5
 8002880:	f005 fadc 	bl	8007e3c <__sprint_r>
 8002884:	2800      	cmp	r0, #0
 8002886:	f47f aedb 	bne.w	8002640 <_vfprintf_r+0x260>
 800288a:	3f10      	subs	r7, #16
 800288c:	2f10      	cmp	r7, #16
 800288e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8002890:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8002892:	a834      	add	r0, sp, #208	; 0xd0
 8002894:	dce8      	bgt.n	8002868 <_vfprintf_r+0x488>
 8002896:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8002898:	463d      	mov	r5, r7
 800289a:	464f      	mov	r7, r9
 800289c:	4681      	mov	r9, r0
 800289e:	3201      	adds	r2, #1
 80028a0:	186c      	adds	r4, r5, r1
 80028a2:	2a07      	cmp	r2, #7
 80028a4:	9429      	str	r4, [sp, #164]	; 0xa4
 80028a6:	9228      	str	r2, [sp, #160]	; 0xa0
 80028a8:	f8c9 7000 	str.w	r7, [r9]
 80028ac:	f8c9 5004 	str.w	r5, [r9, #4]
 80028b0:	f300 8428 	bgt.w	8003104 <_vfprintf_r+0xd24>
 80028b4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80028b8:	f109 0908 	add.w	r9, r9, #8
 80028bc:	b177      	cbz	r7, 80028dc <_vfprintf_r+0x4fc>
 80028be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80028c0:	3301      	adds	r3, #1
 80028c2:	3401      	adds	r4, #1
 80028c4:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 80028c8:	2201      	movs	r2, #1
 80028ca:	2b07      	cmp	r3, #7
 80028cc:	9429      	str	r4, [sp, #164]	; 0xa4
 80028ce:	9328      	str	r3, [sp, #160]	; 0xa0
 80028d0:	e889 0006 	stmia.w	r9, {r1, r2}
 80028d4:	f300 83a0 	bgt.w	8003018 <_vfprintf_r+0xc38>
 80028d8:	f109 0908 	add.w	r9, r9, #8
 80028dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80028de:	b16b      	cbz	r3, 80028fc <_vfprintf_r+0x51c>
 80028e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80028e2:	3301      	adds	r3, #1
 80028e4:	3402      	adds	r4, #2
 80028e6:	a920      	add	r1, sp, #128	; 0x80
 80028e8:	2202      	movs	r2, #2
 80028ea:	2b07      	cmp	r3, #7
 80028ec:	9429      	str	r4, [sp, #164]	; 0xa4
 80028ee:	9328      	str	r3, [sp, #160]	; 0xa0
 80028f0:	e889 0006 	stmia.w	r9, {r1, r2}
 80028f4:	f300 839c 	bgt.w	8003030 <_vfprintf_r+0xc50>
 80028f8:	f109 0908 	add.w	r9, r9, #8
 80028fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80028fe:	2b80      	cmp	r3, #128	; 0x80
 8002900:	f000 82d0 	beq.w	8002ea4 <_vfprintf_r+0xac4>
 8002904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002906:	ebc3 070b 	rsb	r7, r3, fp
 800290a:	2f00      	cmp	r7, #0
 800290c:	dd33      	ble.n	8002976 <_vfprintf_r+0x596>
 800290e:	4a78      	ldr	r2, [pc, #480]	; (8002af0 <_vfprintf_r+0x710>)
 8002910:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002912:	920f      	str	r2, [sp, #60]	; 0x3c
 8002914:	2f10      	cmp	r7, #16
 8002916:	dd22      	ble.n	800295e <_vfprintf_r+0x57e>
 8002918:	4622      	mov	r2, r4
 800291a:	f04f 0b10 	mov.w	fp, #16
 800291e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002920:	9c08      	ldr	r4, [sp, #32]
 8002922:	e004      	b.n	800292e <_vfprintf_r+0x54e>
 8002924:	3f10      	subs	r7, #16
 8002926:	2f10      	cmp	r7, #16
 8002928:	f109 0908 	add.w	r9, r9, #8
 800292c:	dd16      	ble.n	800295c <_vfprintf_r+0x57c>
 800292e:	3301      	adds	r3, #1
 8002930:	3210      	adds	r2, #16
 8002932:	2b07      	cmp	r3, #7
 8002934:	9229      	str	r2, [sp, #164]	; 0xa4
 8002936:	9328      	str	r3, [sp, #160]	; 0xa0
 8002938:	e889 0c00 	stmia.w	r9, {sl, fp}
 800293c:	ddf2      	ble.n	8002924 <_vfprintf_r+0x544>
 800293e:	aa27      	add	r2, sp, #156	; 0x9c
 8002940:	4621      	mov	r1, r4
 8002942:	4628      	mov	r0, r5
 8002944:	f005 fa7a 	bl	8007e3c <__sprint_r>
 8002948:	2800      	cmp	r0, #0
 800294a:	f47f ae79 	bne.w	8002640 <_vfprintf_r+0x260>
 800294e:	3f10      	subs	r7, #16
 8002950:	2f10      	cmp	r7, #16
 8002952:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8002954:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002956:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800295a:	dce8      	bgt.n	800292e <_vfprintf_r+0x54e>
 800295c:	4614      	mov	r4, r2
 800295e:	3301      	adds	r3, #1
 8002960:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002962:	9328      	str	r3, [sp, #160]	; 0xa0
 8002964:	443c      	add	r4, r7
 8002966:	2b07      	cmp	r3, #7
 8002968:	9429      	str	r4, [sp, #164]	; 0xa4
 800296a:	e889 0084 	stmia.w	r9, {r2, r7}
 800296e:	f300 8347 	bgt.w	8003000 <_vfprintf_r+0xc20>
 8002972:	f109 0908 	add.w	r9, r9, #8
 8002976:	9b07      	ldr	r3, [sp, #28]
 8002978:	05dd      	lsls	r5, r3, #23
 800297a:	f100 8231 	bmi.w	8002de0 <_vfprintf_r+0xa00>
 800297e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002980:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002982:	f8c9 6000 	str.w	r6, [r9]
 8002986:	3301      	adds	r3, #1
 8002988:	440c      	add	r4, r1
 800298a:	2b07      	cmp	r3, #7
 800298c:	9429      	str	r4, [sp, #164]	; 0xa4
 800298e:	f8c9 1004 	str.w	r1, [r9, #4]
 8002992:	9328      	str	r3, [sp, #160]	; 0xa0
 8002994:	f300 831e 	bgt.w	8002fd4 <_vfprintf_r+0xbf4>
 8002998:	f109 0908 	add.w	r9, r9, #8
 800299c:	9b07      	ldr	r3, [sp, #28]
 800299e:	0758      	lsls	r0, r3, #29
 80029a0:	d53f      	bpl.n	8002a22 <_vfprintf_r+0x642>
 80029a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80029a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029a6:	1a9d      	subs	r5, r3, r2
 80029a8:	2d00      	cmp	r5, #0
 80029aa:	dd3a      	ble.n	8002a22 <_vfprintf_r+0x642>
 80029ac:	2d10      	cmp	r5, #16
 80029ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80029b0:	4f4e      	ldr	r7, [pc, #312]	; (8002aec <_vfprintf_r+0x70c>)
 80029b2:	dd23      	ble.n	80029fc <_vfprintf_r+0x61c>
 80029b4:	4622      	mov	r2, r4
 80029b6:	2610      	movs	r6, #16
 80029b8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80029bc:	9c08      	ldr	r4, [sp, #32]
 80029be:	e004      	b.n	80029ca <_vfprintf_r+0x5ea>
 80029c0:	3d10      	subs	r5, #16
 80029c2:	2d10      	cmp	r5, #16
 80029c4:	f109 0908 	add.w	r9, r9, #8
 80029c8:	dd17      	ble.n	80029fa <_vfprintf_r+0x61a>
 80029ca:	3301      	adds	r3, #1
 80029cc:	4947      	ldr	r1, [pc, #284]	; (8002aec <_vfprintf_r+0x70c>)
 80029ce:	9328      	str	r3, [sp, #160]	; 0xa0
 80029d0:	3210      	adds	r2, #16
 80029d2:	2b07      	cmp	r3, #7
 80029d4:	9229      	str	r2, [sp, #164]	; 0xa4
 80029d6:	e889 0042 	stmia.w	r9, {r1, r6}
 80029da:	ddf1      	ble.n	80029c0 <_vfprintf_r+0x5e0>
 80029dc:	aa27      	add	r2, sp, #156	; 0x9c
 80029de:	4621      	mov	r1, r4
 80029e0:	4658      	mov	r0, fp
 80029e2:	f005 fa2b 	bl	8007e3c <__sprint_r>
 80029e6:	2800      	cmp	r0, #0
 80029e8:	f47f ae2a 	bne.w	8002640 <_vfprintf_r+0x260>
 80029ec:	3d10      	subs	r5, #16
 80029ee:	2d10      	cmp	r5, #16
 80029f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80029f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80029f4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80029f8:	dce7      	bgt.n	80029ca <_vfprintf_r+0x5ea>
 80029fa:	4614      	mov	r4, r2
 80029fc:	3301      	adds	r3, #1
 80029fe:	442c      	add	r4, r5
 8002a00:	2b07      	cmp	r3, #7
 8002a02:	9429      	str	r4, [sp, #164]	; 0xa4
 8002a04:	9328      	str	r3, [sp, #160]	; 0xa0
 8002a06:	f8c9 7000 	str.w	r7, [r9]
 8002a0a:	f8c9 5004 	str.w	r5, [r9, #4]
 8002a0e:	dd08      	ble.n	8002a22 <_vfprintf_r+0x642>
 8002a10:	aa27      	add	r2, sp, #156	; 0x9c
 8002a12:	9908      	ldr	r1, [sp, #32]
 8002a14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002a16:	f005 fa11 	bl	8007e3c <__sprint_r>
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	f47f ae10 	bne.w	8002640 <_vfprintf_r+0x260>
 8002a20:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002a28:	428a      	cmp	r2, r1
 8002a2a:	bfac      	ite	ge
 8002a2c:	189b      	addge	r3, r3, r2
 8002a2e:	185b      	addlt	r3, r3, r1
 8002a30:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a32:	2c00      	cmp	r4, #0
 8002a34:	f040 82da 	bne.w	8002fec <_vfprintf_r+0xc0c>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9328      	str	r3, [sp, #160]	; 0xa0
 8002a3c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002a40:	e50f      	b.n	8002462 <_vfprintf_r+0x82>
 8002a42:	9311      	str	r3, [sp, #68]	; 0x44
 8002a44:	46ab      	mov	fp, r5
 8002a46:	2a00      	cmp	r2, #0
 8002a48:	f041 803d 	bne.w	8003ac6 <_vfprintf_r+0x16e6>
 8002a4c:	9b07      	ldr	r3, [sp, #28]
 8002a4e:	4829      	ldr	r0, [pc, #164]	; (8002af4 <_vfprintf_r+0x714>)
 8002a50:	069c      	lsls	r4, r3, #26
 8002a52:	f140 8146 	bpl.w	8002ce2 <_vfprintf_r+0x902>
 8002a56:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002a58:	3707      	adds	r7, #7
 8002a5a:	f027 0307 	bic.w	r3, r7, #7
 8002a5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a62:	f103 0208 	add.w	r2, r3, #8
 8002a66:	920e      	str	r2, [sp, #56]	; 0x38
 8002a68:	9a07      	ldr	r2, [sp, #28]
 8002a6a:	f012 0701 	ands.w	r7, r2, #1
 8002a6e:	f000 82eb 	beq.w	8003048 <_vfprintf_r+0xc68>
 8002a72:	ea54 0305 	orrs.w	r3, r4, r5
 8002a76:	f000 8582 	beq.w	800357e <_vfprintf_r+0x119e>
 8002a7a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8002a7e:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8002a82:	2700      	movs	r7, #0
 8002a84:	9a07      	ldr	r2, [sp, #28]
 8002a86:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8002a8a:	2330      	movs	r3, #48	; 0x30
 8002a8c:	45bb      	cmp	fp, r7
 8002a8e:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8002a92:	f042 0302 	orr.w	r3, r2, #2
 8002a96:	f2c0 873b 	blt.w	8003910 <_vfprintf_r+0x1530>
 8002a9a:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8002a9e:	f043 0302 	orr.w	r3, r3, #2
 8002aa2:	9307      	str	r3, [sp, #28]
 8002aa4:	ae34      	add	r6, sp, #208	; 0xd0
 8002aa6:	0923      	lsrs	r3, r4, #4
 8002aa8:	f004 010f 	and.w	r1, r4, #15
 8002aac:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8002ab0:	092a      	lsrs	r2, r5, #4
 8002ab2:	461c      	mov	r4, r3
 8002ab4:	4615      	mov	r5, r2
 8002ab6:	5c43      	ldrb	r3, [r0, r1]
 8002ab8:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8002abc:	ea54 0305 	orrs.w	r3, r4, r5
 8002ac0:	d1f1      	bne.n	8002aa6 <_vfprintf_r+0x6c6>
 8002ac2:	e69d      	b.n	8002800 <_vfprintf_r+0x420>
 8002ac4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002ac6:	9311      	str	r3, [sp, #68]	; 0x44
 8002ac8:	680a      	ldr	r2, [r1, #0]
 8002aca:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8002ace:	2300      	movs	r3, #0
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	461f      	mov	r7, r3
 8002ad4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002ad8:	3204      	adds	r2, #4
 8002ada:	2301      	movs	r3, #1
 8002adc:	9309      	str	r3, [sp, #36]	; 0x24
 8002ade:	46bb      	mov	fp, r7
 8002ae0:	9713      	str	r7, [sp, #76]	; 0x4c
 8002ae2:	920e      	str	r2, [sp, #56]	; 0x38
 8002ae4:	930d      	str	r3, [sp, #52]	; 0x34
 8002ae6:	ae2a      	add	r6, sp, #168	; 0xa8
 8002ae8:	e698      	b.n	800281c <_vfprintf_r+0x43c>
 8002aea:	bf00      	nop
 8002aec:	0800919c 	.word	0x0800919c
 8002af0:	08009148 	.word	0x08009148
 8002af4:	08009168 	.word	0x08009168
 8002af8:	9311      	str	r3, [sp, #68]	; 0x44
 8002afa:	46ab      	mov	fp, r5
 8002afc:	2a00      	cmp	r2, #0
 8002afe:	f040 87ea 	bne.w	8003ad6 <_vfprintf_r+0x16f6>
 8002b02:	9b07      	ldr	r3, [sp, #28]
 8002b04:	069b      	lsls	r3, r3, #26
 8002b06:	d574      	bpl.n	8002bf2 <_vfprintf_r+0x812>
 8002b08:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002b0a:	3707      	adds	r7, #7
 8002b0c:	f027 0707 	bic.w	r7, r7, #7
 8002b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b14:	f107 0108 	add.w	r1, r7, #8
 8002b18:	910e      	str	r1, [sp, #56]	; 0x38
 8002b1a:	4614      	mov	r4, r2
 8002b1c:	461d      	mov	r5, r3
 8002b1e:	2a00      	cmp	r2, #0
 8002b20:	f173 0300 	sbcs.w	r3, r3, #0
 8002b24:	f2c0 843a 	blt.w	800339c <_vfprintf_r+0xfbc>
 8002b28:	f1bb 0f00 	cmp.w	fp, #0
 8002b2c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8002b30:	f2c0 8368 	blt.w	8003204 <_vfprintf_r+0xe24>
 8002b34:	9b07      	ldr	r3, [sp, #28]
 8002b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3a:	9307      	str	r3, [sp, #28]
 8002b3c:	ea54 0305 	orrs.w	r3, r4, r5
 8002b40:	f47f ae44 	bne.w	80027cc <_vfprintf_r+0x3ec>
 8002b44:	f1bb 0f00 	cmp.w	fp, #0
 8002b48:	f040 8408 	bne.w	800335c <_vfprintf_r+0xf7c>
 8002b4c:	f04f 0b00 	mov.w	fp, #0
 8002b50:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8002b54:	ae34      	add	r6, sp, #208	; 0xd0
 8002b56:	e656      	b.n	8002806 <_vfprintf_r+0x426>
 8002b58:	9b07      	ldr	r3, [sp, #28]
 8002b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b5e:	9307      	str	r3, [sp, #28]
 8002b60:	f898 3000 	ldrb.w	r3, [r8]
 8002b64:	e4b0      	b.n	80024c8 <_vfprintf_r+0xe8>
 8002b66:	f898 3000 	ldrb.w	r3, [r8]
 8002b6a:	2b6c      	cmp	r3, #108	; 0x6c
 8002b6c:	f000 85d5 	beq.w	800371a <_vfprintf_r+0x133a>
 8002b70:	9807      	ldr	r0, [sp, #28]
 8002b72:	f040 0010 	orr.w	r0, r0, #16
 8002b76:	9007      	str	r0, [sp, #28]
 8002b78:	e4a6      	b.n	80024c8 <_vfprintf_r+0xe8>
 8002b7a:	2a00      	cmp	r2, #0
 8002b7c:	f040 879f 	bne.w	8003abe <_vfprintf_r+0x16de>
 8002b80:	9b07      	ldr	r3, [sp, #28]
 8002b82:	069f      	lsls	r7, r3, #26
 8002b84:	f140 84e4 	bpl.w	8003550 <_vfprintf_r+0x1170>
 8002b88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002b8c:	6813      	ldr	r3, [r2, #0]
 8002b8e:	17cd      	asrs	r5, r1, #31
 8002b90:	4608      	mov	r0, r1
 8002b92:	3204      	adds	r2, #4
 8002b94:	4629      	mov	r1, r5
 8002b96:	920e      	str	r2, [sp, #56]	; 0x38
 8002b98:	e9c3 0100 	strd	r0, r1, [r3]
 8002b9c:	e461      	b.n	8002462 <_vfprintf_r+0x82>
 8002b9e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	930c      	str	r3, [sp, #48]	; 0x30
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	4623      	mov	r3, r4
 8002baa:	f103 0304 	add.w	r3, r3, #4
 8002bae:	f6ff aced 	blt.w	800258c <_vfprintf_r+0x1ac>
 8002bb2:	930e      	str	r3, [sp, #56]	; 0x38
 8002bb4:	f898 3000 	ldrb.w	r3, [r8]
 8002bb8:	e486      	b.n	80024c8 <_vfprintf_r+0xe8>
 8002bba:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	461c      	mov	r4, r3
 8002bc2:	f818 3b01 	ldrb.w	r3, [r8], #1
 8002bc6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002bca:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8002bce:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8002bd2:	2809      	cmp	r0, #9
 8002bd4:	d9f5      	bls.n	8002bc2 <_vfprintf_r+0x7e2>
 8002bd6:	940c      	str	r4, [sp, #48]	; 0x30
 8002bd8:	e478      	b.n	80024cc <_vfprintf_r+0xec>
 8002bda:	9311      	str	r3, [sp, #68]	; 0x44
 8002bdc:	46ab      	mov	fp, r5
 8002bde:	2a00      	cmp	r2, #0
 8002be0:	f040 8769 	bne.w	8003ab6 <_vfprintf_r+0x16d6>
 8002be4:	9b07      	ldr	r3, [sp, #28]
 8002be6:	f043 0310 	orr.w	r3, r3, #16
 8002bea:	9307      	str	r3, [sp, #28]
 8002bec:	9b07      	ldr	r3, [sp, #28]
 8002bee:	069b      	lsls	r3, r3, #26
 8002bf0:	d48a      	bmi.n	8002b08 <_vfprintf_r+0x728>
 8002bf2:	9b07      	ldr	r3, [sp, #28]
 8002bf4:	06df      	lsls	r7, r3, #27
 8002bf6:	f100 8294 	bmi.w	8003122 <_vfprintf_r+0xd42>
 8002bfa:	9b07      	ldr	r3, [sp, #28]
 8002bfc:	065e      	lsls	r6, r3, #25
 8002bfe:	f140 8290 	bpl.w	8003122 <_vfprintf_r+0xd42>
 8002c02:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002c04:	f9b1 4000 	ldrsh.w	r4, [r1]
 8002c08:	3104      	adds	r1, #4
 8002c0a:	17e5      	asrs	r5, r4, #31
 8002c0c:	4622      	mov	r2, r4
 8002c0e:	462b      	mov	r3, r5
 8002c10:	910e      	str	r1, [sp, #56]	; 0x38
 8002c12:	e784      	b.n	8002b1e <_vfprintf_r+0x73e>
 8002c14:	9311      	str	r3, [sp, #68]	; 0x44
 8002c16:	46ab      	mov	fp, r5
 8002c18:	2a00      	cmp	r2, #0
 8002c1a:	f040 8770 	bne.w	8003afe <_vfprintf_r+0x171e>
 8002c1e:	9b07      	ldr	r3, [sp, #28]
 8002c20:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002c22:	071d      	lsls	r5, r3, #28
 8002c24:	f107 0707 	add.w	r7, r7, #7
 8002c28:	f140 8487 	bpl.w	800353a <_vfprintf_r+0x115a>
 8002c2c:	f027 0307 	bic.w	r3, r7, #7
 8002c30:	ed93 7b00 	vldr	d7, [r3]
 8002c34:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002c38:	f103 0208 	add.w	r2, r3, #8
 8002c3c:	920e      	str	r2, [sp, #56]	; 0x38
 8002c3e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8002c42:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8002c46:	911a      	str	r1, [sp, #104]	; 0x68
 8002c48:	931b      	str	r3, [sp, #108]	; 0x6c
 8002c4a:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8002c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c52:	4620      	mov	r0, r4
 8002c54:	4629      	mov	r1, r5
 8002c56:	4bb5      	ldr	r3, [pc, #724]	; (8002f2c <_vfprintf_r+0xb4c>)
 8002c58:	f005 ffca 	bl	8008bf0 <__aeabi_dcmpun>
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	f040 83eb 	bne.w	8003438 <_vfprintf_r+0x1058>
 8002c62:	f04f 32ff 	mov.w	r2, #4294967295
 8002c66:	4bb1      	ldr	r3, [pc, #708]	; (8002f2c <_vfprintf_r+0xb4c>)
 8002c68:	4620      	mov	r0, r4
 8002c6a:	4629      	mov	r1, r5
 8002c6c:	f005 ffa2 	bl	8008bb4 <__aeabi_dcmple>
 8002c70:	2800      	cmp	r0, #0
 8002c72:	f040 83e1 	bne.w	8003438 <_vfprintf_r+0x1058>
 8002c76:	2200      	movs	r2, #0
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8002c7e:	f005 ff8f 	bl	8008ba0 <__aeabi_dcmplt>
 8002c82:	2800      	cmp	r0, #0
 8002c84:	f040 864a 	bne.w	800391c <_vfprintf_r+0x153c>
 8002c88:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8002c8c:	4ea8      	ldr	r6, [pc, #672]	; (8002f30 <_vfprintf_r+0xb50>)
 8002c8e:	4ba9      	ldr	r3, [pc, #676]	; (8002f34 <_vfprintf_r+0xb54>)
 8002c90:	9907      	ldr	r1, [sp, #28]
 8002c92:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002c96:	9107      	str	r1, [sp, #28]
 8002c98:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	f04f 0b00 	mov.w	fp, #0
 8002ca0:	9209      	str	r2, [sp, #36]	; 0x24
 8002ca2:	2947      	cmp	r1, #71	; 0x47
 8002ca4:	bfd8      	it	le
 8002ca6:	461e      	movle	r6, r3
 8002ca8:	920d      	str	r2, [sp, #52]	; 0x34
 8002caa:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8002cae:	e5b1      	b.n	8002814 <_vfprintf_r+0x434>
 8002cb0:	9b07      	ldr	r3, [sp, #28]
 8002cb2:	f043 0308 	orr.w	r3, r3, #8
 8002cb6:	9307      	str	r3, [sp, #28]
 8002cb8:	f898 3000 	ldrb.w	r3, [r8]
 8002cbc:	e404      	b.n	80024c8 <_vfprintf_r+0xe8>
 8002cbe:	9311      	str	r3, [sp, #68]	; 0x44
 8002cc0:	46ab      	mov	fp, r5
 8002cc2:	2a00      	cmp	r2, #0
 8002cc4:	f43f ad67 	beq.w	8002796 <_vfprintf_r+0x3b6>
 8002cc8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8002ccc:	e563      	b.n	8002796 <_vfprintf_r+0x3b6>
 8002cce:	9311      	str	r3, [sp, #68]	; 0x44
 8002cd0:	46ab      	mov	fp, r5
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	f040 870f 	bne.w	8003af6 <_vfprintf_r+0x1716>
 8002cd8:	9b07      	ldr	r3, [sp, #28]
 8002cda:	4897      	ldr	r0, [pc, #604]	; (8002f38 <_vfprintf_r+0xb58>)
 8002cdc:	069c      	lsls	r4, r3, #26
 8002cde:	f53f aeba 	bmi.w	8002a56 <_vfprintf_r+0x676>
 8002ce2:	9b07      	ldr	r3, [sp, #28]
 8002ce4:	06d9      	lsls	r1, r3, #27
 8002ce6:	f140 8398 	bpl.w	800341a <_vfprintf_r+0x103a>
 8002cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002cec:	4613      	mov	r3, r2
 8002cee:	3304      	adds	r3, #4
 8002cf0:	6814      	ldr	r4, [r2, #0]
 8002cf2:	930e      	str	r3, [sp, #56]	; 0x38
 8002cf4:	2500      	movs	r5, #0
 8002cf6:	e6b7      	b.n	8002a68 <_vfprintf_r+0x688>
 8002cf8:	f898 3000 	ldrb.w	r3, [r8]
 8002cfc:	2900      	cmp	r1, #0
 8002cfe:	f47f abe3 	bne.w	80024c8 <_vfprintf_r+0xe8>
 8002d02:	2201      	movs	r2, #1
 8002d04:	2120      	movs	r1, #32
 8002d06:	f7ff bbdf 	b.w	80024c8 <_vfprintf_r+0xe8>
 8002d0a:	9b07      	ldr	r3, [sp, #28]
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	9307      	str	r3, [sp, #28]
 8002d12:	f898 3000 	ldrb.w	r3, [r8]
 8002d16:	f7ff bbd7 	b.w	80024c8 <_vfprintf_r+0xe8>
 8002d1a:	9b07      	ldr	r3, [sp, #28]
 8002d1c:	f043 0320 	orr.w	r3, r3, #32
 8002d20:	9307      	str	r3, [sp, #28]
 8002d22:	f898 3000 	ldrb.w	r3, [r8]
 8002d26:	f7ff bbcf 	b.w	80024c8 <_vfprintf_r+0xe8>
 8002d2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d2c:	9311      	str	r3, [sp, #68]	; 0x44
 8002d2e:	6816      	ldr	r6, [r2, #0]
 8002d30:	2400      	movs	r4, #0
 8002d32:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 8002d36:	1d17      	adds	r7, r2, #4
 8002d38:	2e00      	cmp	r6, #0
 8002d3a:	f000 85b7 	beq.w	80038ac <_vfprintf_r+0x14cc>
 8002d3e:	2d00      	cmp	r5, #0
 8002d40:	f2c0 8502 	blt.w	8003748 <_vfprintf_r+0x1368>
 8002d44:	462a      	mov	r2, r5
 8002d46:	4621      	mov	r1, r4
 8002d48:	4630      	mov	r0, r6
 8002d4a:	f002 feb1 	bl	8005ab0 <memchr>
 8002d4e:	2800      	cmp	r0, #0
 8002d50:	f000 861c 	beq.w	800398c <_vfprintf_r+0x15ac>
 8002d54:	1b83      	subs	r3, r0, r6
 8002d56:	930d      	str	r3, [sp, #52]	; 0x34
 8002d58:	46a3      	mov	fp, r4
 8002d5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002d5e:	970e      	str	r7, [sp, #56]	; 0x38
 8002d60:	9309      	str	r3, [sp, #36]	; 0x24
 8002d62:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8002d66:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8002d6a:	e553      	b.n	8002814 <_vfprintf_r+0x434>
 8002d6c:	f898 3000 	ldrb.w	r3, [r8]
 8002d70:	2201      	movs	r2, #1
 8002d72:	212b      	movs	r1, #43	; 0x2b
 8002d74:	f7ff bba8 	b.w	80024c8 <_vfprintf_r+0xe8>
 8002d78:	486f      	ldr	r0, [pc, #444]	; (8002f38 <_vfprintf_r+0xb58>)
 8002d7a:	9211      	str	r2, [sp, #68]	; 0x44
 8002d7c:	f1bb 0f00 	cmp.w	fp, #0
 8002d80:	f040 8173 	bne.w	800306a <_vfprintf_r+0xc8a>
 8002d84:	465f      	mov	r7, fp
 8002d86:	e6e1      	b.n	8002b4c <_vfprintf_r+0x76c>
 8002d88:	9311      	str	r3, [sp, #68]	; 0x44
 8002d8a:	2a00      	cmp	r2, #0
 8002d8c:	f040 86ab 	bne.w	8003ae6 <_vfprintf_r+0x1706>
 8002d90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002d92:	2a00      	cmp	r2, #0
 8002d94:	f43f ac4d 	beq.w	8002632 <_vfprintf_r+0x252>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	461f      	mov	r7, r3
 8002d9e:	9109      	str	r1, [sp, #36]	; 0x24
 8002da0:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8002da4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8002da8:	469b      	mov	fp, r3
 8002daa:	9313      	str	r3, [sp, #76]	; 0x4c
 8002dac:	910d      	str	r1, [sp, #52]	; 0x34
 8002dae:	ae2a      	add	r6, sp, #168	; 0xa8
 8002db0:	e534      	b.n	800281c <_vfprintf_r+0x43c>
 8002db2:	f1bb 0f00 	cmp.w	fp, #0
 8002db6:	f000 85da 	beq.w	800396e <_vfprintf_r+0x158e>
 8002dba:	2700      	movs	r7, #0
 8002dbc:	2400      	movs	r4, #0
 8002dbe:	2500      	movs	r5, #0
 8002dc0:	e475      	b.n	80026ae <_vfprintf_r+0x2ce>
 8002dc2:	485d      	ldr	r0, [pc, #372]	; (8002f38 <_vfprintf_r+0xb58>)
 8002dc4:	9307      	str	r3, [sp, #28]
 8002dc6:	9211      	str	r2, [sp, #68]	; 0x44
 8002dc8:	ea54 0305 	orrs.w	r3, r4, r5
 8002dcc:	970e      	str	r7, [sp, #56]	; 0x38
 8002dce:	f04f 0700 	mov.w	r7, #0
 8002dd2:	f47f ae67 	bne.w	8002aa4 <_vfprintf_r+0x6c4>
 8002dd6:	2400      	movs	r4, #0
 8002dd8:	2500      	movs	r5, #0
 8002dda:	e663      	b.n	8002aa4 <_vfprintf_r+0x6c4>
 8002ddc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002dde:	e56d      	b.n	80028bc <_vfprintf_r+0x4dc>
 8002de0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002de2:	2b65      	cmp	r3, #101	; 0x65
 8002de4:	f340 80ae 	ble.w	8002f44 <_vfprintf_r+0xb64>
 8002de8:	2200      	movs	r2, #0
 8002dea:	2300      	movs	r3, #0
 8002dec:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8002df0:	f005 fecc 	bl	8008b8c <__aeabi_dcmpeq>
 8002df4:	2800      	cmp	r0, #0
 8002df6:	f000 813a 	beq.w	800306e <_vfprintf_r+0xc8e>
 8002dfa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002dfc:	4a4f      	ldr	r2, [pc, #316]	; (8002f3c <_vfprintf_r+0xb5c>)
 8002dfe:	f8c9 2000 	str.w	r2, [r9]
 8002e02:	3301      	adds	r3, #1
 8002e04:	3401      	adds	r4, #1
 8002e06:	2201      	movs	r2, #1
 8002e08:	2b07      	cmp	r3, #7
 8002e0a:	9429      	str	r4, [sp, #164]	; 0xa4
 8002e0c:	9328      	str	r3, [sp, #160]	; 0xa0
 8002e0e:	f8c9 2004 	str.w	r2, [r9, #4]
 8002e12:	f300 83ce 	bgt.w	80035b2 <_vfprintf_r+0x11d2>
 8002e16:	f109 0908 	add.w	r9, r9, #8
 8002e1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	db03      	blt.n	8002e2a <_vfprintf_r+0xa4a>
 8002e22:	9b07      	ldr	r3, [sp, #28]
 8002e24:	07d8      	lsls	r0, r3, #31
 8002e26:	f57f adb9 	bpl.w	800299c <_vfprintf_r+0x5bc>
 8002e2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002e2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8002e2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002e30:	f8c9 2000 	str.w	r2, [r9]
 8002e34:	3301      	adds	r3, #1
 8002e36:	440c      	add	r4, r1
 8002e38:	2b07      	cmp	r3, #7
 8002e3a:	9429      	str	r4, [sp, #164]	; 0xa4
 8002e3c:	f8c9 1004 	str.w	r1, [r9, #4]
 8002e40:	9328      	str	r3, [sp, #160]	; 0xa0
 8002e42:	f300 8474 	bgt.w	800372e <_vfprintf_r+0x134e>
 8002e46:	f109 0908 	add.w	r9, r9, #8
 8002e4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002e4c:	1e5d      	subs	r5, r3, #1
 8002e4e:	2d00      	cmp	r5, #0
 8002e50:	f77f ada4 	ble.w	800299c <_vfprintf_r+0x5bc>
 8002e54:	4a3a      	ldr	r2, [pc, #232]	; (8002f40 <_vfprintf_r+0xb60>)
 8002e56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002e58:	920f      	str	r2, [sp, #60]	; 0x3c
 8002e5a:	2d10      	cmp	r5, #16
 8002e5c:	f340 81b4 	ble.w	80031c8 <_vfprintf_r+0xde8>
 8002e60:	2610      	movs	r6, #16
 8002e62:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002e64:	f8dd b020 	ldr.w	fp, [sp, #32]
 8002e68:	e005      	b.n	8002e76 <_vfprintf_r+0xa96>
 8002e6a:	f109 0908 	add.w	r9, r9, #8
 8002e6e:	3d10      	subs	r5, #16
 8002e70:	2d10      	cmp	r5, #16
 8002e72:	f340 81a9 	ble.w	80031c8 <_vfprintf_r+0xde8>
 8002e76:	3301      	adds	r3, #1
 8002e78:	3410      	adds	r4, #16
 8002e7a:	2b07      	cmp	r3, #7
 8002e7c:	9429      	str	r4, [sp, #164]	; 0xa4
 8002e7e:	9328      	str	r3, [sp, #160]	; 0xa0
 8002e80:	f8c9 a000 	str.w	sl, [r9]
 8002e84:	f8c9 6004 	str.w	r6, [r9, #4]
 8002e88:	ddef      	ble.n	8002e6a <_vfprintf_r+0xa8a>
 8002e8a:	aa27      	add	r2, sp, #156	; 0x9c
 8002e8c:	4659      	mov	r1, fp
 8002e8e:	4638      	mov	r0, r7
 8002e90:	f004 ffd4 	bl	8007e3c <__sprint_r>
 8002e94:	2800      	cmp	r0, #0
 8002e96:	f47f abd3 	bne.w	8002640 <_vfprintf_r+0x260>
 8002e9a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002e9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002e9e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002ea2:	e7e4      	b.n	8002e6e <_vfprintf_r+0xa8e>
 8002ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ea8:	1a9f      	subs	r7, r3, r2
 8002eaa:	2f00      	cmp	r7, #0
 8002eac:	f77f ad2a 	ble.w	8002904 <_vfprintf_r+0x524>
 8002eb0:	4a23      	ldr	r2, [pc, #140]	; (8002f40 <_vfprintf_r+0xb60>)
 8002eb2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002eb4:	920f      	str	r2, [sp, #60]	; 0x3c
 8002eb6:	2f10      	cmp	r7, #16
 8002eb8:	dd2b      	ble.n	8002f12 <_vfprintf_r+0xb32>
 8002eba:	464a      	mov	r2, r9
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	46b9      	mov	r9, r7
 8002ec0:	2510      	movs	r5, #16
 8002ec2:	4637      	mov	r7, r6
 8002ec4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002ec6:	9e08      	ldr	r6, [sp, #32]
 8002ec8:	e006      	b.n	8002ed8 <_vfprintf_r+0xaf8>
 8002eca:	f1a9 0910 	sub.w	r9, r9, #16
 8002ece:	f1b9 0f10 	cmp.w	r9, #16
 8002ed2:	f102 0208 	add.w	r2, r2, #8
 8002ed6:	dd18      	ble.n	8002f0a <_vfprintf_r+0xb2a>
 8002ed8:	3301      	adds	r3, #1
 8002eda:	3110      	adds	r1, #16
 8002edc:	2b07      	cmp	r3, #7
 8002ede:	9129      	str	r1, [sp, #164]	; 0xa4
 8002ee0:	9328      	str	r3, [sp, #160]	; 0xa0
 8002ee2:	f8c2 a000 	str.w	sl, [r2]
 8002ee6:	6055      	str	r5, [r2, #4]
 8002ee8:	ddef      	ble.n	8002eca <_vfprintf_r+0xaea>
 8002eea:	aa27      	add	r2, sp, #156	; 0x9c
 8002eec:	4631      	mov	r1, r6
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f004 ffa4 	bl	8007e3c <__sprint_r>
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	f47f aba3 	bne.w	8002640 <_vfprintf_r+0x260>
 8002efa:	f1a9 0910 	sub.w	r9, r9, #16
 8002efe:	f1b9 0f10 	cmp.w	r9, #16
 8002f02:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8002f04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002f06:	aa34      	add	r2, sp, #208	; 0xd0
 8002f08:	dce6      	bgt.n	8002ed8 <_vfprintf_r+0xaf8>
 8002f0a:	463e      	mov	r6, r7
 8002f0c:	460c      	mov	r4, r1
 8002f0e:	464f      	mov	r7, r9
 8002f10:	4691      	mov	r9, r2
 8002f12:	3301      	adds	r3, #1
 8002f14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002f16:	9328      	str	r3, [sp, #160]	; 0xa0
 8002f18:	443c      	add	r4, r7
 8002f1a:	2b07      	cmp	r3, #7
 8002f1c:	9429      	str	r4, [sp, #164]	; 0xa4
 8002f1e:	e889 0084 	stmia.w	r9, {r2, r7}
 8002f22:	f300 822b 	bgt.w	800337c <_vfprintf_r+0xf9c>
 8002f26:	f109 0908 	add.w	r9, r9, #8
 8002f2a:	e4eb      	b.n	8002904 <_vfprintf_r+0x524>
 8002f2c:	7fefffff 	.word	0x7fefffff
 8002f30:	0800915c 	.word	0x0800915c
 8002f34:	08009158 	.word	0x08009158
 8002f38:	0800917c 	.word	0x0800917c
 8002f3c:	08009198 	.word	0x08009198
 8002f40:	08009148 	.word	0x08009148
 8002f44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002f46:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	f340 81d0 	ble.w	80032ee <_vfprintf_r+0xf0e>
 8002f4e:	3501      	adds	r5, #1
 8002f50:	3401      	adds	r4, #1
 8002f52:	2301      	movs	r3, #1
 8002f54:	2d07      	cmp	r5, #7
 8002f56:	9429      	str	r4, [sp, #164]	; 0xa4
 8002f58:	9528      	str	r5, [sp, #160]	; 0xa0
 8002f5a:	f8c9 6000 	str.w	r6, [r9]
 8002f5e:	f8c9 3004 	str.w	r3, [r9, #4]
 8002f62:	f300 81e1 	bgt.w	8003328 <_vfprintf_r+0xf48>
 8002f66:	f109 0908 	add.w	r9, r9, #8
 8002f6a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002f6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002f6e:	f8c9 3000 	str.w	r3, [r9]
 8002f72:	3501      	adds	r5, #1
 8002f74:	4414      	add	r4, r2
 8002f76:	2d07      	cmp	r5, #7
 8002f78:	9429      	str	r4, [sp, #164]	; 0xa4
 8002f7a:	9528      	str	r5, [sp, #160]	; 0xa0
 8002f7c:	f8c9 2004 	str.w	r2, [r9, #4]
 8002f80:	f300 81df 	bgt.w	8003342 <_vfprintf_r+0xf62>
 8002f84:	f109 0908 	add.w	r9, r9, #8
 8002f88:	2300      	movs	r3, #0
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8002f90:	f005 fdfc 	bl	8008b8c <__aeabi_dcmpeq>
 8002f94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002f96:	2800      	cmp	r0, #0
 8002f98:	f040 80cc 	bne.w	8003134 <_vfprintf_r+0xd54>
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	3501      	adds	r5, #1
 8002fa0:	3601      	adds	r6, #1
 8002fa2:	441c      	add	r4, r3
 8002fa4:	2d07      	cmp	r5, #7
 8002fa6:	9528      	str	r5, [sp, #160]	; 0xa0
 8002fa8:	9429      	str	r4, [sp, #164]	; 0xa4
 8002faa:	f8c9 6000 	str.w	r6, [r9]
 8002fae:	f8c9 3004 	str.w	r3, [r9, #4]
 8002fb2:	f300 81ac 	bgt.w	800330e <_vfprintf_r+0xf2e>
 8002fb6:	f109 0908 	add.w	r9, r9, #8
 8002fba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002fbc:	f8c9 2004 	str.w	r2, [r9, #4]
 8002fc0:	3501      	adds	r5, #1
 8002fc2:	4414      	add	r4, r2
 8002fc4:	ab23      	add	r3, sp, #140	; 0x8c
 8002fc6:	2d07      	cmp	r5, #7
 8002fc8:	9429      	str	r4, [sp, #164]	; 0xa4
 8002fca:	9528      	str	r5, [sp, #160]	; 0xa0
 8002fcc:	f8c9 3000 	str.w	r3, [r9]
 8002fd0:	f77f ace2 	ble.w	8002998 <_vfprintf_r+0x5b8>
 8002fd4:	aa27      	add	r2, sp, #156	; 0x9c
 8002fd6:	9908      	ldr	r1, [sp, #32]
 8002fd8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002fda:	f004 ff2f 	bl	8007e3c <__sprint_r>
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	f47f ab2e 	bne.w	8002640 <_vfprintf_r+0x260>
 8002fe4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8002fe6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8002fea:	e4d7      	b.n	800299c <_vfprintf_r+0x5bc>
 8002fec:	aa27      	add	r2, sp, #156	; 0x9c
 8002fee:	9908      	ldr	r1, [sp, #32]
 8002ff0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002ff2:	f004 ff23 	bl	8007e3c <__sprint_r>
 8002ff6:	2800      	cmp	r0, #0
 8002ff8:	f43f ad1e 	beq.w	8002a38 <_vfprintf_r+0x658>
 8002ffc:	f7ff bb20 	b.w	8002640 <_vfprintf_r+0x260>
 8003000:	aa27      	add	r2, sp, #156	; 0x9c
 8003002:	9908      	ldr	r1, [sp, #32]
 8003004:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003006:	f004 ff19 	bl	8007e3c <__sprint_r>
 800300a:	2800      	cmp	r0, #0
 800300c:	f47f ab18 	bne.w	8002640 <_vfprintf_r+0x260>
 8003010:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003012:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003016:	e4ae      	b.n	8002976 <_vfprintf_r+0x596>
 8003018:	aa27      	add	r2, sp, #156	; 0x9c
 800301a:	9908      	ldr	r1, [sp, #32]
 800301c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800301e:	f004 ff0d 	bl	8007e3c <__sprint_r>
 8003022:	2800      	cmp	r0, #0
 8003024:	f47f ab0c 	bne.w	8002640 <_vfprintf_r+0x260>
 8003028:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800302a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800302e:	e455      	b.n	80028dc <_vfprintf_r+0x4fc>
 8003030:	aa27      	add	r2, sp, #156	; 0x9c
 8003032:	9908      	ldr	r1, [sp, #32]
 8003034:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003036:	f004 ff01 	bl	8007e3c <__sprint_r>
 800303a:	2800      	cmp	r0, #0
 800303c:	f47f ab00 	bne.w	8002640 <_vfprintf_r+0x260>
 8003040:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003042:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003046:	e459      	b.n	80028fc <_vfprintf_r+0x51c>
 8003048:	f1bb 0f00 	cmp.w	fp, #0
 800304c:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8003050:	f2c0 830d 	blt.w	800366e <_vfprintf_r+0x128e>
 8003054:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8003058:	9307      	str	r3, [sp, #28]
 800305a:	ea54 0305 	orrs.w	r3, r4, r5
 800305e:	f47f ad21 	bne.w	8002aa4 <_vfprintf_r+0x6c4>
 8003062:	f1bb 0f00 	cmp.w	fp, #0
 8003066:	f43f ae8d 	beq.w	8002d84 <_vfprintf_r+0x9a4>
 800306a:	2700      	movs	r7, #0
 800306c:	e6b3      	b.n	8002dd6 <_vfprintf_r+0x9f6>
 800306e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003070:	2d00      	cmp	r5, #0
 8003072:	f340 82aa 	ble.w	80035ca <_vfprintf_r+0x11ea>
 8003076:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003078:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800307a:	4293      	cmp	r3, r2
 800307c:	bfa8      	it	ge
 800307e:	4613      	movge	r3, r2
 8003080:	2b00      	cmp	r3, #0
 8003082:	461d      	mov	r5, r3
 8003084:	dd0d      	ble.n	80030a2 <_vfprintf_r+0xcc2>
 8003086:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003088:	f8c9 6000 	str.w	r6, [r9]
 800308c:	3301      	adds	r3, #1
 800308e:	442c      	add	r4, r5
 8003090:	2b07      	cmp	r3, #7
 8003092:	9429      	str	r4, [sp, #164]	; 0xa4
 8003094:	f8c9 5004 	str.w	r5, [r9, #4]
 8003098:	9328      	str	r3, [sp, #160]	; 0xa0
 800309a:	f300 8387 	bgt.w	80037ac <_vfprintf_r+0x13cc>
 800309e:	f109 0908 	add.w	r9, r9, #8
 80030a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80030a4:	2d00      	cmp	r5, #0
 80030a6:	bfa8      	it	ge
 80030a8:	1b5b      	subge	r3, r3, r5
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	461d      	mov	r5, r3
 80030ae:	f340 80be 	ble.w	800322e <_vfprintf_r+0xe4e>
 80030b2:	4ab9      	ldr	r2, [pc, #740]	; (8003398 <_vfprintf_r+0xfb8>)
 80030b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80030b6:	920f      	str	r2, [sp, #60]	; 0x3c
 80030b8:	2d10      	cmp	r5, #16
 80030ba:	f340 826d 	ble.w	8003598 <_vfprintf_r+0x11b8>
 80030be:	4622      	mov	r2, r4
 80030c0:	2710      	movs	r7, #16
 80030c2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80030c6:	9c08      	ldr	r4, [sp, #32]
 80030c8:	e005      	b.n	80030d6 <_vfprintf_r+0xcf6>
 80030ca:	f109 0908 	add.w	r9, r9, #8
 80030ce:	3d10      	subs	r5, #16
 80030d0:	2d10      	cmp	r5, #16
 80030d2:	f340 8260 	ble.w	8003596 <_vfprintf_r+0x11b6>
 80030d6:	3301      	adds	r3, #1
 80030d8:	3210      	adds	r2, #16
 80030da:	2b07      	cmp	r3, #7
 80030dc:	9229      	str	r2, [sp, #164]	; 0xa4
 80030de:	9328      	str	r3, [sp, #160]	; 0xa0
 80030e0:	f8c9 a000 	str.w	sl, [r9]
 80030e4:	f8c9 7004 	str.w	r7, [r9, #4]
 80030e8:	ddef      	ble.n	80030ca <_vfprintf_r+0xcea>
 80030ea:	aa27      	add	r2, sp, #156	; 0x9c
 80030ec:	4621      	mov	r1, r4
 80030ee:	4658      	mov	r0, fp
 80030f0:	f004 fea4 	bl	8007e3c <__sprint_r>
 80030f4:	2800      	cmp	r0, #0
 80030f6:	f47f aaa3 	bne.w	8002640 <_vfprintf_r+0x260>
 80030fa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80030fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80030fe:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003102:	e7e4      	b.n	80030ce <_vfprintf_r+0xcee>
 8003104:	aa27      	add	r2, sp, #156	; 0x9c
 8003106:	9908      	ldr	r1, [sp, #32]
 8003108:	980a      	ldr	r0, [sp, #40]	; 0x28
 800310a:	f004 fe97 	bl	8007e3c <__sprint_r>
 800310e:	2800      	cmp	r0, #0
 8003110:	f47f aa96 	bne.w	8002640 <_vfprintf_r+0x260>
 8003114:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8003118:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800311a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800311e:	f7ff bbcd 	b.w	80028bc <_vfprintf_r+0x4dc>
 8003122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003124:	6814      	ldr	r4, [r2, #0]
 8003126:	4613      	mov	r3, r2
 8003128:	3304      	adds	r3, #4
 800312a:	17e5      	asrs	r5, r4, #31
 800312c:	930e      	str	r3, [sp, #56]	; 0x38
 800312e:	4622      	mov	r2, r4
 8003130:	462b      	mov	r3, r5
 8003132:	e4f4      	b.n	8002b1e <_vfprintf_r+0x73e>
 8003134:	1e5e      	subs	r6, r3, #1
 8003136:	2e00      	cmp	r6, #0
 8003138:	f77f af3f 	ble.w	8002fba <_vfprintf_r+0xbda>
 800313c:	4b96      	ldr	r3, [pc, #600]	; (8003398 <_vfprintf_r+0xfb8>)
 800313e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003140:	2e10      	cmp	r6, #16
 8003142:	f340 8110 	ble.w	8003366 <_vfprintf_r+0xf86>
 8003146:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800314a:	2710      	movs	r7, #16
 800314c:	46b0      	mov	r8, r6
 800314e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8003152:	9e08      	ldr	r6, [sp, #32]
 8003154:	e007      	b.n	8003166 <_vfprintf_r+0xd86>
 8003156:	f109 0908 	add.w	r9, r9, #8
 800315a:	f1a8 0810 	sub.w	r8, r8, #16
 800315e:	f1b8 0f10 	cmp.w	r8, #16
 8003162:	f340 80fd 	ble.w	8003360 <_vfprintf_r+0xf80>
 8003166:	3501      	adds	r5, #1
 8003168:	3410      	adds	r4, #16
 800316a:	2d07      	cmp	r5, #7
 800316c:	9429      	str	r4, [sp, #164]	; 0xa4
 800316e:	9528      	str	r5, [sp, #160]	; 0xa0
 8003170:	f8c9 a000 	str.w	sl, [r9]
 8003174:	f8c9 7004 	str.w	r7, [r9, #4]
 8003178:	dded      	ble.n	8003156 <_vfprintf_r+0xd76>
 800317a:	aa27      	add	r2, sp, #156	; 0x9c
 800317c:	4631      	mov	r1, r6
 800317e:	4658      	mov	r0, fp
 8003180:	f004 fe5c 	bl	8007e3c <__sprint_r>
 8003184:	2800      	cmp	r0, #0
 8003186:	f47f aa5b 	bne.w	8002640 <_vfprintf_r+0x260>
 800318a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800318c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800318e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003192:	e7e2      	b.n	800315a <_vfprintf_r+0xd7a>
 8003194:	9907      	ldr	r1, [sp, #28]
 8003196:	f011 0210 	ands.w	r2, r1, #16
 800319a:	d020      	beq.n	80031de <_vfprintf_r+0xdfe>
 800319c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800319e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80031a2:	f1bb 0f00 	cmp.w	fp, #0
 80031a6:	6804      	ldr	r4, [r0, #0]
 80031a8:	f100 0704 	add.w	r7, r0, #4
 80031ac:	f04f 0500 	mov.w	r5, #0
 80031b0:	db26      	blt.n	8003200 <_vfprintf_r+0xe20>
 80031b2:	460a      	mov	r2, r1
 80031b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031b8:	9207      	str	r2, [sp, #28]
 80031ba:	ea54 0205 	orrs.w	r2, r4, r5
 80031be:	970e      	str	r7, [sp, #56]	; 0x38
 80031c0:	461f      	mov	r7, r3
 80031c2:	f47f ab03 	bne.w	80027cc <_vfprintf_r+0x3ec>
 80031c6:	e4bd      	b.n	8002b44 <_vfprintf_r+0x764>
 80031c8:	3301      	adds	r3, #1
 80031ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80031cc:	9328      	str	r3, [sp, #160]	; 0xa0
 80031ce:	442c      	add	r4, r5
 80031d0:	2b07      	cmp	r3, #7
 80031d2:	9429      	str	r4, [sp, #164]	; 0xa4
 80031d4:	e889 0024 	stmia.w	r9, {r2, r5}
 80031d8:	f77f abde 	ble.w	8002998 <_vfprintf_r+0x5b8>
 80031dc:	e6fa      	b.n	8002fd4 <_vfprintf_r+0xbf4>
 80031de:	9907      	ldr	r1, [sp, #28]
 80031e0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80031e4:	f040 824a 	bne.w	800367c <_vfprintf_r+0x129c>
 80031e8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80031ea:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80031ee:	f1bb 0f00 	cmp.w	fp, #0
 80031f2:	680c      	ldr	r4, [r1, #0]
 80031f4:	f101 0704 	add.w	r7, r1, #4
 80031f8:	f04f 0500 	mov.w	r5, #0
 80031fc:	f280 811a 	bge.w	8003434 <_vfprintf_r+0x1054>
 8003200:	970e      	str	r7, [sp, #56]	; 0x38
 8003202:	461f      	mov	r7, r3
 8003204:	ea54 0305 	orrs.w	r3, r4, r5
 8003208:	f47f aae0 	bne.w	80027cc <_vfprintf_r+0x3ec>
 800320c:	ae44      	add	r6, sp, #272	; 0x110
 800320e:	3430      	adds	r4, #48	; 0x30
 8003210:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8003214:	f7ff baf4 	b.w	8002800 <_vfprintf_r+0x420>
 8003218:	aa27      	add	r2, sp, #156	; 0x9c
 800321a:	9908      	ldr	r1, [sp, #32]
 800321c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800321e:	f004 fe0d 	bl	8007e3c <__sprint_r>
 8003222:	2800      	cmp	r0, #0
 8003224:	f47f aa0c 	bne.w	8002640 <_vfprintf_r+0x260>
 8003228:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800322a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800322e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003230:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003232:	4432      	add	r2, r6
 8003234:	4617      	mov	r7, r2
 8003236:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003238:	4293      	cmp	r3, r2
 800323a:	db47      	blt.n	80032cc <_vfprintf_r+0xeec>
 800323c:	9a07      	ldr	r2, [sp, #28]
 800323e:	07d2      	lsls	r2, r2, #31
 8003240:	d444      	bmi.n	80032cc <_vfprintf_r+0xeec>
 8003242:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003244:	440e      	add	r6, r1
 8003246:	1bf5      	subs	r5, r6, r7
 8003248:	1acb      	subs	r3, r1, r3
 800324a:	429d      	cmp	r5, r3
 800324c:	bfa8      	it	ge
 800324e:	461d      	movge	r5, r3
 8003250:	2d00      	cmp	r5, #0
 8003252:	462e      	mov	r6, r5
 8003254:	dd0d      	ble.n	8003272 <_vfprintf_r+0xe92>
 8003256:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8003258:	f8c9 7000 	str.w	r7, [r9]
 800325c:	3201      	adds	r2, #1
 800325e:	442c      	add	r4, r5
 8003260:	2a07      	cmp	r2, #7
 8003262:	9429      	str	r4, [sp, #164]	; 0xa4
 8003264:	f8c9 5004 	str.w	r5, [r9, #4]
 8003268:	9228      	str	r2, [sp, #160]	; 0xa0
 800326a:	f300 832e 	bgt.w	80038ca <_vfprintf_r+0x14ea>
 800326e:	f109 0908 	add.w	r9, r9, #8
 8003272:	2e00      	cmp	r6, #0
 8003274:	bfac      	ite	ge
 8003276:	1b9d      	subge	r5, r3, r6
 8003278:	461d      	movlt	r5, r3
 800327a:	2d00      	cmp	r5, #0
 800327c:	f77f ab8e 	ble.w	800299c <_vfprintf_r+0x5bc>
 8003280:	4a45      	ldr	r2, [pc, #276]	; (8003398 <_vfprintf_r+0xfb8>)
 8003282:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003284:	920f      	str	r2, [sp, #60]	; 0x3c
 8003286:	2d10      	cmp	r5, #16
 8003288:	dd9e      	ble.n	80031c8 <_vfprintf_r+0xde8>
 800328a:	2610      	movs	r6, #16
 800328c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800328e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8003292:	e004      	b.n	800329e <_vfprintf_r+0xebe>
 8003294:	f109 0908 	add.w	r9, r9, #8
 8003298:	3d10      	subs	r5, #16
 800329a:	2d10      	cmp	r5, #16
 800329c:	dd94      	ble.n	80031c8 <_vfprintf_r+0xde8>
 800329e:	3301      	adds	r3, #1
 80032a0:	3410      	adds	r4, #16
 80032a2:	2b07      	cmp	r3, #7
 80032a4:	9429      	str	r4, [sp, #164]	; 0xa4
 80032a6:	9328      	str	r3, [sp, #160]	; 0xa0
 80032a8:	f8c9 a000 	str.w	sl, [r9]
 80032ac:	f8c9 6004 	str.w	r6, [r9, #4]
 80032b0:	ddf0      	ble.n	8003294 <_vfprintf_r+0xeb4>
 80032b2:	aa27      	add	r2, sp, #156	; 0x9c
 80032b4:	4659      	mov	r1, fp
 80032b6:	4638      	mov	r0, r7
 80032b8:	f004 fdc0 	bl	8007e3c <__sprint_r>
 80032bc:	2800      	cmp	r0, #0
 80032be:	f47f a9bf 	bne.w	8002640 <_vfprintf_r+0x260>
 80032c2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80032c4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80032c6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80032ca:	e7e5      	b.n	8003298 <_vfprintf_r+0xeb8>
 80032cc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80032ce:	9816      	ldr	r0, [sp, #88]	; 0x58
 80032d0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80032d2:	f8c9 1000 	str.w	r1, [r9]
 80032d6:	3201      	adds	r2, #1
 80032d8:	4404      	add	r4, r0
 80032da:	2a07      	cmp	r2, #7
 80032dc:	9429      	str	r4, [sp, #164]	; 0xa4
 80032de:	f8c9 0004 	str.w	r0, [r9, #4]
 80032e2:	9228      	str	r2, [sp, #160]	; 0xa0
 80032e4:	f300 82cf 	bgt.w	8003886 <_vfprintf_r+0x14a6>
 80032e8:	f109 0908 	add.w	r9, r9, #8
 80032ec:	e7a9      	b.n	8003242 <_vfprintf_r+0xe62>
 80032ee:	9b07      	ldr	r3, [sp, #28]
 80032f0:	07df      	lsls	r7, r3, #31
 80032f2:	f53f ae2c 	bmi.w	8002f4e <_vfprintf_r+0xb6e>
 80032f6:	3501      	adds	r5, #1
 80032f8:	3401      	adds	r4, #1
 80032fa:	2301      	movs	r3, #1
 80032fc:	2d07      	cmp	r5, #7
 80032fe:	9429      	str	r4, [sp, #164]	; 0xa4
 8003300:	9528      	str	r5, [sp, #160]	; 0xa0
 8003302:	f8c9 6000 	str.w	r6, [r9]
 8003306:	f8c9 3004 	str.w	r3, [r9, #4]
 800330a:	f77f ae54 	ble.w	8002fb6 <_vfprintf_r+0xbd6>
 800330e:	aa27      	add	r2, sp, #156	; 0x9c
 8003310:	9908      	ldr	r1, [sp, #32]
 8003312:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003314:	f004 fd92 	bl	8007e3c <__sprint_r>
 8003318:	2800      	cmp	r0, #0
 800331a:	f47f a991 	bne.w	8002640 <_vfprintf_r+0x260>
 800331e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003320:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8003322:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003326:	e648      	b.n	8002fba <_vfprintf_r+0xbda>
 8003328:	aa27      	add	r2, sp, #156	; 0x9c
 800332a:	9908      	ldr	r1, [sp, #32]
 800332c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800332e:	f004 fd85 	bl	8007e3c <__sprint_r>
 8003332:	2800      	cmp	r0, #0
 8003334:	f47f a984 	bne.w	8002640 <_vfprintf_r+0x260>
 8003338:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800333a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800333c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003340:	e613      	b.n	8002f6a <_vfprintf_r+0xb8a>
 8003342:	aa27      	add	r2, sp, #156	; 0x9c
 8003344:	9908      	ldr	r1, [sp, #32]
 8003346:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003348:	f004 fd78 	bl	8007e3c <__sprint_r>
 800334c:	2800      	cmp	r0, #0
 800334e:	f47f a977 	bne.w	8002640 <_vfprintf_r+0x260>
 8003352:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003354:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8003356:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800335a:	e615      	b.n	8002f88 <_vfprintf_r+0xba8>
 800335c:	2400      	movs	r4, #0
 800335e:	e755      	b.n	800320c <_vfprintf_r+0xe2c>
 8003360:	4646      	mov	r6, r8
 8003362:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8003366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003368:	3501      	adds	r5, #1
 800336a:	4434      	add	r4, r6
 800336c:	2d07      	cmp	r5, #7
 800336e:	9429      	str	r4, [sp, #164]	; 0xa4
 8003370:	9528      	str	r5, [sp, #160]	; 0xa0
 8003372:	e889 0048 	stmia.w	r9, {r3, r6}
 8003376:	f77f ae1e 	ble.w	8002fb6 <_vfprintf_r+0xbd6>
 800337a:	e7c8      	b.n	800330e <_vfprintf_r+0xf2e>
 800337c:	aa27      	add	r2, sp, #156	; 0x9c
 800337e:	9908      	ldr	r1, [sp, #32]
 8003380:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003382:	f004 fd5b 	bl	8007e3c <__sprint_r>
 8003386:	2800      	cmp	r0, #0
 8003388:	f47f a95a 	bne.w	8002640 <_vfprintf_r+0x260>
 800338c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800338e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003392:	f7ff bab7 	b.w	8002904 <_vfprintf_r+0x524>
 8003396:	bf00      	nop
 8003398:	08009148 	.word	0x08009148
 800339c:	4264      	negs	r4, r4
 800339e:	f04f 072d 	mov.w	r7, #45	; 0x2d
 80033a2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80033a6:	f1bb 0f00 	cmp.w	fp, #0
 80033aa:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80033ae:	f6ff aa0d 	blt.w	80027cc <_vfprintf_r+0x3ec>
 80033b2:	9b07      	ldr	r3, [sp, #28]
 80033b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b8:	9307      	str	r3, [sp, #28]
 80033ba:	f7ff ba07 	b.w	80027cc <_vfprintf_r+0x3ec>
 80033be:	9907      	ldr	r1, [sp, #28]
 80033c0:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80033c4:	d017      	beq.n	80033f6 <_vfprintf_r+0x1016>
 80033c6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80033c8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80033cc:	4603      	mov	r3, r0
 80033ce:	f1bb 0f00 	cmp.w	fp, #0
 80033d2:	f103 0304 	add.w	r3, r3, #4
 80033d6:	8804      	ldrh	r4, [r0, #0]
 80033d8:	f04f 0500 	mov.w	r5, #0
 80033dc:	f2c0 831b 	blt.w	8003a16 <_vfprintf_r+0x1636>
 80033e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80033e4:	9107      	str	r1, [sp, #28]
 80033e6:	ea54 0105 	orrs.w	r1, r4, r5
 80033ea:	930e      	str	r3, [sp, #56]	; 0x38
 80033ec:	f43f ace1 	beq.w	8002db2 <_vfprintf_r+0x9d2>
 80033f0:	4617      	mov	r7, r2
 80033f2:	f7ff b95c 	b.w	80026ae <_vfprintf_r+0x2ce>
 80033f6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80033f8:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80033fc:	f1bb 0f00 	cmp.w	fp, #0
 8003400:	680c      	ldr	r4, [r1, #0]
 8003402:	f101 0704 	add.w	r7, r1, #4
 8003406:	f04f 0500 	mov.w	r5, #0
 800340a:	db02      	blt.n	8003412 <_vfprintf_r+0x1032>
 800340c:	9a07      	ldr	r2, [sp, #28]
 800340e:	f7ff b9af 	b.w	8002770 <_vfprintf_r+0x390>
 8003412:	970e      	str	r7, [sp, #56]	; 0x38
 8003414:	2700      	movs	r7, #0
 8003416:	f7ff b94a 	b.w	80026ae <_vfprintf_r+0x2ce>
 800341a:	9b07      	ldr	r3, [sp, #28]
 800341c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800341e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003422:	4613      	mov	r3, r2
 8003424:	f000 8142 	beq.w	80036ac <_vfprintf_r+0x12cc>
 8003428:	3304      	adds	r3, #4
 800342a:	8814      	ldrh	r4, [r2, #0]
 800342c:	930e      	str	r3, [sp, #56]	; 0x38
 800342e:	2500      	movs	r5, #0
 8003430:	f7ff bb1a 	b.w	8002a68 <_vfprintf_r+0x688>
 8003434:	9a07      	ldr	r2, [sp, #28]
 8003436:	e6bd      	b.n	80031b4 <_vfprintf_r+0xdd4>
 8003438:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	f005 fbd6 	bl	8008bf0 <__aeabi_dcmpun>
 8003444:	2800      	cmp	r0, #0
 8003446:	f040 82e8 	bne.w	8003a1a <_vfprintf_r+0x163a>
 800344a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800344c:	f1bb 3fff 	cmp.w	fp, #4294967295
 8003450:	f023 0720 	bic.w	r7, r3, #32
 8003454:	f000 825f 	beq.w	8003916 <_vfprintf_r+0x1536>
 8003458:	2f47      	cmp	r7, #71	; 0x47
 800345a:	f000 8158 	beq.w	800370e <_vfprintf_r+0x132e>
 800345e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003460:	9a07      	ldr	r2, [sp, #28]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003468:	920f      	str	r2, [sp, #60]	; 0x3c
 800346a:	f2c0 825c 	blt.w	8003926 <_vfprintf_r+0x1546>
 800346e:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8003472:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8003476:	2300      	movs	r3, #0
 8003478:	9309      	str	r3, [sp, #36]	; 0x24
 800347a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800347c:	2b66      	cmp	r3, #102	; 0x66
 800347e:	f000 8233 	beq.w	80038e8 <_vfprintf_r+0x1508>
 8003482:	2b46      	cmp	r3, #70	; 0x46
 8003484:	f000 8125 	beq.w	80036d2 <_vfprintf_r+0x12f2>
 8003488:	2f45      	cmp	r7, #69	; 0x45
 800348a:	bf0c      	ite	eq
 800348c:	f10b 0501 	addeq.w	r5, fp, #1
 8003490:	465d      	movne	r5, fp
 8003492:	a825      	add	r0, sp, #148	; 0x94
 8003494:	a922      	add	r1, sp, #136	; 0x88
 8003496:	aa21      	add	r2, sp, #132	; 0x84
 8003498:	2302      	movs	r3, #2
 800349a:	9004      	str	r0, [sp, #16]
 800349c:	9202      	str	r2, [sp, #8]
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	9501      	str	r5, [sp, #4]
 80034a2:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80034a6:	9103      	str	r1, [sp, #12]
 80034a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80034aa:	f000 fc89 	bl	8003dc0 <_dtoa_r>
 80034ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80034b0:	2b67      	cmp	r3, #103	; 0x67
 80034b2:	4606      	mov	r6, r0
 80034b4:	f040 8275 	bne.w	80039a2 <_vfprintf_r+0x15c2>
 80034b8:	9b07      	ldr	r3, [sp, #28]
 80034ba:	07da      	lsls	r2, r3, #31
 80034bc:	f140 8294 	bpl.w	80039e8 <_vfprintf_r+0x1608>
 80034c0:	1974      	adds	r4, r6, r5
 80034c2:	2200      	movs	r2, #0
 80034c4:	2300      	movs	r3, #0
 80034c6:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80034ca:	f005 fb5f 	bl	8008b8c <__aeabi_dcmpeq>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	f040 8178 	bne.w	80037c4 <_vfprintf_r+0x13e4>
 80034d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80034d6:	429c      	cmp	r4, r3
 80034d8:	d906      	bls.n	80034e8 <_vfprintf_r+0x1108>
 80034da:	2130      	movs	r1, #48	; 0x30
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	9225      	str	r2, [sp, #148]	; 0x94
 80034e0:	7019      	strb	r1, [r3, #0]
 80034e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80034e4:	429c      	cmp	r4, r3
 80034e6:	d8f9      	bhi.n	80034dc <_vfprintf_r+0x10fc>
 80034e8:	1b9b      	subs	r3, r3, r6
 80034ea:	2f47      	cmp	r7, #71	; 0x47
 80034ec:	9312      	str	r3, [sp, #72]	; 0x48
 80034ee:	f000 8156 	beq.w	800379e <_vfprintf_r+0x13be>
 80034f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80034f4:	2b65      	cmp	r3, #101	; 0x65
 80034f6:	f340 8263 	ble.w	80039c0 <_vfprintf_r+0x15e0>
 80034fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80034fc:	2b66      	cmp	r3, #102	; 0x66
 80034fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003500:	9313      	str	r3, [sp, #76]	; 0x4c
 8003502:	f000 8226 	beq.w	8003952 <_vfprintf_r+0x1572>
 8003506:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003508:	9912      	ldr	r1, [sp, #72]	; 0x48
 800350a:	428a      	cmp	r2, r1
 800350c:	f2c0 8214 	blt.w	8003938 <_vfprintf_r+0x1558>
 8003510:	9b07      	ldr	r3, [sp, #28]
 8003512:	07db      	lsls	r3, r3, #31
 8003514:	f100 826a 	bmi.w	80039ec <_vfprintf_r+0x160c>
 8003518:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800351c:	920d      	str	r2, [sp, #52]	; 0x34
 800351e:	2267      	movs	r2, #103	; 0x67
 8003520:	9211      	str	r2, [sp, #68]	; 0x44
 8003522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003524:	2a00      	cmp	r2, #0
 8003526:	f040 8117 	bne.w	8003758 <_vfprintf_r+0x1378>
 800352a:	9309      	str	r3, [sp, #36]	; 0x24
 800352c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800352e:	9307      	str	r3, [sp, #28]
 8003530:	4693      	mov	fp, r2
 8003532:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8003536:	f7ff b96d 	b.w	8002814 <_vfprintf_r+0x434>
 800353a:	f027 0707 	bic.w	r7, r7, #7
 800353e:	ed97 7b00 	vldr	d7, [r7]
 8003542:	f107 0308 	add.w	r3, r7, #8
 8003546:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800354a:	930e      	str	r3, [sp, #56]	; 0x38
 800354c:	f7ff bb77 	b.w	8002c3e <_vfprintf_r+0x85e>
 8003550:	9b07      	ldr	r3, [sp, #28]
 8003552:	06de      	lsls	r6, r3, #27
 8003554:	d40b      	bmi.n	800356e <_vfprintf_r+0x118e>
 8003556:	9b07      	ldr	r3, [sp, #28]
 8003558:	065d      	lsls	r5, r3, #25
 800355a:	d508      	bpl.n	800356e <_vfprintf_r+0x118e>
 800355c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800355e:	6813      	ldr	r3, [r2, #0]
 8003560:	3204      	adds	r2, #4
 8003562:	920e      	str	r2, [sp, #56]	; 0x38
 8003564:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8003568:	801a      	strh	r2, [r3, #0]
 800356a:	f7fe bf7a 	b.w	8002462 <_vfprintf_r+0x82>
 800356e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003570:	6813      	ldr	r3, [r2, #0]
 8003572:	3204      	adds	r2, #4
 8003574:	920e      	str	r2, [sp, #56]	; 0x38
 8003576:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	f7fe bf72 	b.w	8002462 <_vfprintf_r+0x82>
 800357e:	2700      	movs	r7, #0
 8003580:	45bb      	cmp	fp, r7
 8003582:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8003586:	f6ff ac26 	blt.w	8002dd6 <_vfprintf_r+0x9f6>
 800358a:	9b07      	ldr	r3, [sp, #28]
 800358c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003590:	9307      	str	r3, [sp, #28]
 8003592:	f7ff bbf3 	b.w	8002d7c <_vfprintf_r+0x99c>
 8003596:	4614      	mov	r4, r2
 8003598:	3301      	adds	r3, #1
 800359a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800359c:	9328      	str	r3, [sp, #160]	; 0xa0
 800359e:	442c      	add	r4, r5
 80035a0:	2b07      	cmp	r3, #7
 80035a2:	9429      	str	r4, [sp, #164]	; 0xa4
 80035a4:	e889 0024 	stmia.w	r9, {r2, r5}
 80035a8:	f73f ae36 	bgt.w	8003218 <_vfprintf_r+0xe38>
 80035ac:	f109 0908 	add.w	r9, r9, #8
 80035b0:	e63d      	b.n	800322e <_vfprintf_r+0xe4e>
 80035b2:	aa27      	add	r2, sp, #156	; 0x9c
 80035b4:	9908      	ldr	r1, [sp, #32]
 80035b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80035b8:	f004 fc40 	bl	8007e3c <__sprint_r>
 80035bc:	2800      	cmp	r0, #0
 80035be:	f47f a83f 	bne.w	8002640 <_vfprintf_r+0x260>
 80035c2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80035c4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80035c8:	e427      	b.n	8002e1a <_vfprintf_r+0xa3a>
 80035ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80035cc:	4ab4      	ldr	r2, [pc, #720]	; (80038a0 <_vfprintf_r+0x14c0>)
 80035ce:	f8c9 2000 	str.w	r2, [r9]
 80035d2:	3301      	adds	r3, #1
 80035d4:	3401      	adds	r4, #1
 80035d6:	2201      	movs	r2, #1
 80035d8:	2b07      	cmp	r3, #7
 80035da:	9429      	str	r4, [sp, #164]	; 0xa4
 80035dc:	9328      	str	r3, [sp, #160]	; 0xa0
 80035de:	f8c9 2004 	str.w	r2, [r9, #4]
 80035e2:	dc69      	bgt.n	80036b8 <_vfprintf_r+0x12d8>
 80035e4:	f109 0908 	add.w	r9, r9, #8
 80035e8:	b92d      	cbnz	r5, 80035f6 <_vfprintf_r+0x1216>
 80035ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80035ec:	b91b      	cbnz	r3, 80035f6 <_vfprintf_r+0x1216>
 80035ee:	9b07      	ldr	r3, [sp, #28]
 80035f0:	07d9      	lsls	r1, r3, #31
 80035f2:	f57f a9d3 	bpl.w	800299c <_vfprintf_r+0x5bc>
 80035f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80035f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80035fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80035fc:	f8c9 2000 	str.w	r2, [r9]
 8003600:	3301      	adds	r3, #1
 8003602:	440c      	add	r4, r1
 8003604:	2b07      	cmp	r3, #7
 8003606:	9429      	str	r4, [sp, #164]	; 0xa4
 8003608:	f8c9 1004 	str.w	r1, [r9, #4]
 800360c:	9328      	str	r3, [sp, #160]	; 0xa0
 800360e:	f300 81d9 	bgt.w	80039c4 <_vfprintf_r+0x15e4>
 8003612:	f109 0908 	add.w	r9, r9, #8
 8003616:	426d      	negs	r5, r5
 8003618:	2d00      	cmp	r5, #0
 800361a:	f340 80b3 	ble.w	8003784 <_vfprintf_r+0x13a4>
 800361e:	4aa1      	ldr	r2, [pc, #644]	; (80038a4 <_vfprintf_r+0x14c4>)
 8003620:	920f      	str	r2, [sp, #60]	; 0x3c
 8003622:	2d10      	cmp	r5, #16
 8003624:	f340 8122 	ble.w	800386c <_vfprintf_r+0x148c>
 8003628:	4622      	mov	r2, r4
 800362a:	2710      	movs	r7, #16
 800362c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8003630:	9c08      	ldr	r4, [sp, #32]
 8003632:	e005      	b.n	8003640 <_vfprintf_r+0x1260>
 8003634:	f109 0908 	add.w	r9, r9, #8
 8003638:	3d10      	subs	r5, #16
 800363a:	2d10      	cmp	r5, #16
 800363c:	f340 8115 	ble.w	800386a <_vfprintf_r+0x148a>
 8003640:	3301      	adds	r3, #1
 8003642:	3210      	adds	r2, #16
 8003644:	2b07      	cmp	r3, #7
 8003646:	9229      	str	r2, [sp, #164]	; 0xa4
 8003648:	9328      	str	r3, [sp, #160]	; 0xa0
 800364a:	f8c9 a000 	str.w	sl, [r9]
 800364e:	f8c9 7004 	str.w	r7, [r9, #4]
 8003652:	ddef      	ble.n	8003634 <_vfprintf_r+0x1254>
 8003654:	aa27      	add	r2, sp, #156	; 0x9c
 8003656:	4621      	mov	r1, r4
 8003658:	4658      	mov	r0, fp
 800365a:	f004 fbef 	bl	8007e3c <__sprint_r>
 800365e:	2800      	cmp	r0, #0
 8003660:	f47e afee 	bne.w	8002640 <_vfprintf_r+0x260>
 8003664:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003666:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003668:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800366c:	e7e4      	b.n	8003638 <_vfprintf_r+0x1258>
 800366e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8003670:	f7ff bbaa 	b.w	8002dc8 <_vfprintf_r+0x9e8>
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	f7fe bfe8 	b.w	800264c <_vfprintf_r+0x26c>
 800367c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800367e:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8003682:	4603      	mov	r3, r0
 8003684:	f1bb 0f00 	cmp.w	fp, #0
 8003688:	f103 0304 	add.w	r3, r3, #4
 800368c:	8804      	ldrh	r4, [r0, #0]
 800368e:	f04f 0500 	mov.w	r5, #0
 8003692:	f2c0 81b4 	blt.w	80039fe <_vfprintf_r+0x161e>
 8003696:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800369a:	9107      	str	r1, [sp, #28]
 800369c:	ea54 0105 	orrs.w	r1, r4, r5
 80036a0:	930e      	str	r3, [sp, #56]	; 0x38
 80036a2:	4617      	mov	r7, r2
 80036a4:	f47f a892 	bne.w	80027cc <_vfprintf_r+0x3ec>
 80036a8:	f7ff ba4c 	b.w	8002b44 <_vfprintf_r+0x764>
 80036ac:	3304      	adds	r3, #4
 80036ae:	6814      	ldr	r4, [r2, #0]
 80036b0:	930e      	str	r3, [sp, #56]	; 0x38
 80036b2:	2500      	movs	r5, #0
 80036b4:	f7ff b9d8 	b.w	8002a68 <_vfprintf_r+0x688>
 80036b8:	aa27      	add	r2, sp, #156	; 0x9c
 80036ba:	9908      	ldr	r1, [sp, #32]
 80036bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80036be:	f004 fbbd 	bl	8007e3c <__sprint_r>
 80036c2:	2800      	cmp	r0, #0
 80036c4:	f47e afbc 	bne.w	8002640 <_vfprintf_r+0x260>
 80036c8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80036ca:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80036cc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80036d0:	e78a      	b.n	80035e8 <_vfprintf_r+0x1208>
 80036d2:	a825      	add	r0, sp, #148	; 0x94
 80036d4:	a922      	add	r1, sp, #136	; 0x88
 80036d6:	aa21      	add	r2, sp, #132	; 0x84
 80036d8:	2303      	movs	r3, #3
 80036da:	9004      	str	r0, [sp, #16]
 80036dc:	9202      	str	r2, [sp, #8]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	f8cd b004 	str.w	fp, [sp, #4]
 80036e4:	9103      	str	r1, [sp, #12]
 80036e6:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80036ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80036ec:	f000 fb68 	bl	8003dc0 <_dtoa_r>
 80036f0:	465d      	mov	r5, fp
 80036f2:	4606      	mov	r6, r0
 80036f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80036f6:	2b46      	cmp	r3, #70	; 0x46
 80036f8:	eb06 0405 	add.w	r4, r6, r5
 80036fc:	f47f aee1 	bne.w	80034c2 <_vfprintf_r+0x10e2>
 8003700:	7833      	ldrb	r3, [r6, #0]
 8003702:	2b30      	cmp	r3, #48	; 0x30
 8003704:	f000 8198 	beq.w	8003a38 <_vfprintf_r+0x1658>
 8003708:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800370a:	442c      	add	r4, r5
 800370c:	e6d9      	b.n	80034c2 <_vfprintf_r+0x10e2>
 800370e:	f1bb 0f00 	cmp.w	fp, #0
 8003712:	bf08      	it	eq
 8003714:	f04f 0b01 	moveq.w	fp, #1
 8003718:	e6a1      	b.n	800345e <_vfprintf_r+0x107e>
 800371a:	9b07      	ldr	r3, [sp, #28]
 800371c:	f043 0320 	orr.w	r3, r3, #32
 8003720:	9307      	str	r3, [sp, #28]
 8003722:	f108 0801 	add.w	r8, r8, #1
 8003726:	f898 3000 	ldrb.w	r3, [r8]
 800372a:	f7fe becd 	b.w	80024c8 <_vfprintf_r+0xe8>
 800372e:	aa27      	add	r2, sp, #156	; 0x9c
 8003730:	9908      	ldr	r1, [sp, #32]
 8003732:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003734:	f004 fb82 	bl	8007e3c <__sprint_r>
 8003738:	2800      	cmp	r0, #0
 800373a:	f47e af81 	bne.w	8002640 <_vfprintf_r+0x260>
 800373e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8003740:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003744:	f7ff bb81 	b.w	8002e4a <_vfprintf_r+0xa6a>
 8003748:	4630      	mov	r0, r6
 800374a:	f7fe fdd9 	bl	8002300 <strlen>
 800374e:	46a3      	mov	fp, r4
 8003750:	4603      	mov	r3, r0
 8003752:	900d      	str	r0, [sp, #52]	; 0x34
 8003754:	f7ff bb01 	b.w	8002d5a <_vfprintf_r+0x97a>
 8003758:	272d      	movs	r7, #45	; 0x2d
 800375a:	9309      	str	r3, [sp, #36]	; 0x24
 800375c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800375e:	9307      	str	r3, [sp, #28]
 8003760:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8003764:	f04f 0b00 	mov.w	fp, #0
 8003768:	f7ff b855 	b.w	8002816 <_vfprintf_r+0x436>
 800376c:	aa27      	add	r2, sp, #156	; 0x9c
 800376e:	9908      	ldr	r1, [sp, #32]
 8003770:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003772:	f004 fb63 	bl	8007e3c <__sprint_r>
 8003776:	2800      	cmp	r0, #0
 8003778:	f47e af62 	bne.w	8002640 <_vfprintf_r+0x260>
 800377c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800377e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003780:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8003784:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003786:	f8c9 6000 	str.w	r6, [r9]
 800378a:	3301      	adds	r3, #1
 800378c:	440c      	add	r4, r1
 800378e:	2b07      	cmp	r3, #7
 8003790:	9429      	str	r4, [sp, #164]	; 0xa4
 8003792:	9328      	str	r3, [sp, #160]	; 0xa0
 8003794:	f8c9 1004 	str.w	r1, [r9, #4]
 8003798:	f77f a8fe 	ble.w	8002998 <_vfprintf_r+0x5b8>
 800379c:	e41a      	b.n	8002fd4 <_vfprintf_r+0xbf4>
 800379e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80037a0:	1cd8      	adds	r0, r3, #3
 80037a2:	db11      	blt.n	80037c8 <_vfprintf_r+0x13e8>
 80037a4:	459b      	cmp	fp, r3
 80037a6:	db0f      	blt.n	80037c8 <_vfprintf_r+0x13e8>
 80037a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80037aa:	e6ac      	b.n	8003506 <_vfprintf_r+0x1126>
 80037ac:	aa27      	add	r2, sp, #156	; 0x9c
 80037ae:	9908      	ldr	r1, [sp, #32]
 80037b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80037b2:	f004 fb43 	bl	8007e3c <__sprint_r>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	f47e af42 	bne.w	8002640 <_vfprintf_r+0x260>
 80037bc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80037be:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80037c2:	e46e      	b.n	80030a2 <_vfprintf_r+0xcc2>
 80037c4:	4623      	mov	r3, r4
 80037c6:	e68f      	b.n	80034e8 <_vfprintf_r+0x1108>
 80037c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80037ca:	3a02      	subs	r2, #2
 80037cc:	9211      	str	r2, [sp, #68]	; 0x44
 80037ce:	3b01      	subs	r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80037d6:	9321      	str	r3, [sp, #132]	; 0x84
 80037d8:	bfb8      	it	lt
 80037da:	425b      	neglt	r3, r3
 80037dc:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 80037e0:	bfb4      	ite	lt
 80037e2:	222d      	movlt	r2, #45	; 0x2d
 80037e4:	222b      	movge	r2, #43	; 0x2b
 80037e6:	2b09      	cmp	r3, #9
 80037e8:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 80037ec:	f340 810b 	ble.w	8003a06 <_vfprintf_r+0x1626>
 80037f0:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 80037f4:	4604      	mov	r4, r0
 80037f6:	4a2c      	ldr	r2, [pc, #176]	; (80038a8 <_vfprintf_r+0x14c8>)
 80037f8:	fb82 2103 	smull	r2, r1, r2, r3
 80037fc:	17da      	asrs	r2, r3, #31
 80037fe:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8003802:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003806:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800380a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800380e:	2a09      	cmp	r2, #9
 8003810:	4613      	mov	r3, r2
 8003812:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8003816:	dcee      	bgt.n	80037f6 <_vfprintf_r+0x1416>
 8003818:	4621      	mov	r1, r4
 800381a:	3330      	adds	r3, #48	; 0x30
 800381c:	b2da      	uxtb	r2, r3
 800381e:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8003822:	4288      	cmp	r0, r1
 8003824:	f240 816f 	bls.w	8003b06 <_vfprintf_r+0x1726>
 8003828:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 800382c:	4623      	mov	r3, r4
 800382e:	e001      	b.n	8003834 <_vfprintf_r+0x1454>
 8003830:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003834:	f801 2b01 	strb.w	r2, [r1], #1
 8003838:	4298      	cmp	r0, r3
 800383a:	d1f9      	bne.n	8003830 <_vfprintf_r+0x1450>
 800383c:	1c43      	adds	r3, r0, #1
 800383e:	1b1b      	subs	r3, r3, r4
 8003840:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 8003844:	4413      	add	r3, r2
 8003846:	aa23      	add	r2, sp, #140	; 0x8c
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800384c:	9319      	str	r3, [sp, #100]	; 0x64
 800384e:	2a01      	cmp	r2, #1
 8003850:	4413      	add	r3, r2
 8003852:	930d      	str	r3, [sp, #52]	; 0x34
 8003854:	f340 80fe 	ble.w	8003a54 <_vfprintf_r+0x1674>
 8003858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800385a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800385c:	4413      	add	r3, r2
 800385e:	2200      	movs	r2, #0
 8003860:	930d      	str	r3, [sp, #52]	; 0x34
 8003862:	9213      	str	r2, [sp, #76]	; 0x4c
 8003864:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003868:	e65b      	b.n	8003522 <_vfprintf_r+0x1142>
 800386a:	4614      	mov	r4, r2
 800386c:	3301      	adds	r3, #1
 800386e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003870:	9328      	str	r3, [sp, #160]	; 0xa0
 8003872:	442c      	add	r4, r5
 8003874:	2b07      	cmp	r3, #7
 8003876:	9429      	str	r4, [sp, #164]	; 0xa4
 8003878:	e889 0024 	stmia.w	r9, {r2, r5}
 800387c:	f73f af76 	bgt.w	800376c <_vfprintf_r+0x138c>
 8003880:	f109 0908 	add.w	r9, r9, #8
 8003884:	e77e      	b.n	8003784 <_vfprintf_r+0x13a4>
 8003886:	aa27      	add	r2, sp, #156	; 0x9c
 8003888:	9908      	ldr	r1, [sp, #32]
 800388a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800388c:	f004 fad6 	bl	8007e3c <__sprint_r>
 8003890:	2800      	cmp	r0, #0
 8003892:	f47e aed5 	bne.w	8002640 <_vfprintf_r+0x260>
 8003896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003898:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800389a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800389e:	e4d0      	b.n	8003242 <_vfprintf_r+0xe62>
 80038a0:	08009198 	.word	0x08009198
 80038a4:	08009148 	.word	0x08009148
 80038a8:	66666667 	.word	0x66666667
 80038ac:	2d06      	cmp	r5, #6
 80038ae:	462b      	mov	r3, r5
 80038b0:	bf28      	it	cs
 80038b2:	2306      	movcs	r3, #6
 80038b4:	930d      	str	r3, [sp, #52]	; 0x34
 80038b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80038ba:	46b3      	mov	fp, r6
 80038bc:	970e      	str	r7, [sp, #56]	; 0x38
 80038be:	9613      	str	r6, [sp, #76]	; 0x4c
 80038c0:	4637      	mov	r7, r6
 80038c2:	9309      	str	r3, [sp, #36]	; 0x24
 80038c4:	4e91      	ldr	r6, [pc, #580]	; (8003b0c <_vfprintf_r+0x172c>)
 80038c6:	f7fe bfa5 	b.w	8002814 <_vfprintf_r+0x434>
 80038ca:	aa27      	add	r2, sp, #156	; 0x9c
 80038cc:	9908      	ldr	r1, [sp, #32]
 80038ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80038d0:	f004 fab4 	bl	8007e3c <__sprint_r>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	f47e aeb3 	bne.w	8002640 <_vfprintf_r+0x260>
 80038da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80038de:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80038e6:	e4c4      	b.n	8003272 <_vfprintf_r+0xe92>
 80038e8:	a825      	add	r0, sp, #148	; 0x94
 80038ea:	a922      	add	r1, sp, #136	; 0x88
 80038ec:	aa21      	add	r2, sp, #132	; 0x84
 80038ee:	2303      	movs	r3, #3
 80038f0:	9004      	str	r0, [sp, #16]
 80038f2:	9202      	str	r2, [sp, #8]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	f8cd b004 	str.w	fp, [sp, #4]
 80038fa:	9103      	str	r1, [sp, #12]
 80038fc:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8003900:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003902:	f000 fa5d 	bl	8003dc0 <_dtoa_r>
 8003906:	465d      	mov	r5, fp
 8003908:	4606      	mov	r6, r0
 800390a:	eb00 040b 	add.w	r4, r0, fp
 800390e:	e6f7      	b.n	8003700 <_vfprintf_r+0x1320>
 8003910:	9307      	str	r3, [sp, #28]
 8003912:	f7ff b8c7 	b.w	8002aa4 <_vfprintf_r+0x6c4>
 8003916:	f04f 0b06 	mov.w	fp, #6
 800391a:	e5a0      	b.n	800345e <_vfprintf_r+0x107e>
 800391c:	272d      	movs	r7, #45	; 0x2d
 800391e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8003922:	f7ff b9b3 	b.w	8002c8c <_vfprintf_r+0x8ac>
 8003926:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 800392a:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 800392e:	931d      	str	r3, [sp, #116]	; 0x74
 8003930:	232d      	movs	r3, #45	; 0x2d
 8003932:	911c      	str	r1, [sp, #112]	; 0x70
 8003934:	9309      	str	r3, [sp, #36]	; 0x24
 8003936:	e5a0      	b.n	800347a <_vfprintf_r+0x109a>
 8003938:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800393a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800393c:	4413      	add	r3, r2
 800393e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003940:	930d      	str	r3, [sp, #52]	; 0x34
 8003942:	2a00      	cmp	r2, #0
 8003944:	f340 8090 	ble.w	8003a68 <_vfprintf_r+0x1688>
 8003948:	2267      	movs	r2, #103	; 0x67
 800394a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800394e:	9211      	str	r2, [sp, #68]	; 0x44
 8003950:	e5e7      	b.n	8003522 <_vfprintf_r+0x1142>
 8003952:	2b00      	cmp	r3, #0
 8003954:	f340 8090 	ble.w	8003a78 <_vfprintf_r+0x1698>
 8003958:	f1bb 0f00 	cmp.w	fp, #0
 800395c:	d163      	bne.n	8003a26 <_vfprintf_r+0x1646>
 800395e:	9a07      	ldr	r2, [sp, #28]
 8003960:	07d1      	lsls	r1, r2, #31
 8003962:	d460      	bmi.n	8003a26 <_vfprintf_r+0x1646>
 8003964:	461a      	mov	r2, r3
 8003966:	920d      	str	r2, [sp, #52]	; 0x34
 8003968:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800396c:	e5d9      	b.n	8003522 <_vfprintf_r+0x1142>
 800396e:	9b07      	ldr	r3, [sp, #28]
 8003970:	07db      	lsls	r3, r3, #31
 8003972:	465f      	mov	r7, fp
 8003974:	d505      	bpl.n	8003982 <_vfprintf_r+0x15a2>
 8003976:	ae44      	add	r6, sp, #272	; 0x110
 8003978:	2330      	movs	r3, #48	; 0x30
 800397a:	f806 3d41 	strb.w	r3, [r6, #-65]!
 800397e:	f7fe bf3f 	b.w	8002800 <_vfprintf_r+0x420>
 8003982:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8003986:	ae34      	add	r6, sp, #208	; 0xd0
 8003988:	f7fe bf3d 	b.w	8002806 <_vfprintf_r+0x426>
 800398c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8003990:	970e      	str	r7, [sp, #56]	; 0x38
 8003992:	9309      	str	r3, [sp, #36]	; 0x24
 8003994:	950d      	str	r5, [sp, #52]	; 0x34
 8003996:	4683      	mov	fp, r0
 8003998:	9013      	str	r0, [sp, #76]	; 0x4c
 800399a:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800399e:	f7fe bf39 	b.w	8002814 <_vfprintf_r+0x434>
 80039a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039a4:	2b47      	cmp	r3, #71	; 0x47
 80039a6:	f47f ad8b 	bne.w	80034c0 <_vfprintf_r+0x10e0>
 80039aa:	9b07      	ldr	r3, [sp, #28]
 80039ac:	07dc      	lsls	r4, r3, #31
 80039ae:	f53f aea1 	bmi.w	80036f4 <_vfprintf_r+0x1314>
 80039b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80039b4:	2f47      	cmp	r7, #71	; 0x47
 80039b6:	eba3 0306 	sub.w	r3, r3, r6
 80039ba:	9312      	str	r3, [sp, #72]	; 0x48
 80039bc:	f43f aeef 	beq.w	800379e <_vfprintf_r+0x13be>
 80039c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039c2:	e704      	b.n	80037ce <_vfprintf_r+0x13ee>
 80039c4:	aa27      	add	r2, sp, #156	; 0x9c
 80039c6:	9908      	ldr	r1, [sp, #32]
 80039c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80039ca:	f004 fa37 	bl	8007e3c <__sprint_r>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	f47e ae36 	bne.w	8002640 <_vfprintf_r+0x260>
 80039d4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80039d6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80039d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80039da:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80039de:	e61a      	b.n	8003616 <_vfprintf_r+0x1236>
 80039e0:	46a0      	mov	r8, r4
 80039e2:	2500      	movs	r5, #0
 80039e4:	f7fe bd72 	b.w	80024cc <_vfprintf_r+0xec>
 80039e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80039ea:	e57d      	b.n	80034e8 <_vfprintf_r+0x1108>
 80039ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80039ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80039f0:	4413      	add	r3, r2
 80039f2:	2267      	movs	r2, #103	; 0x67
 80039f4:	930d      	str	r3, [sp, #52]	; 0x34
 80039f6:	9211      	str	r2, [sp, #68]	; 0x44
 80039f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80039fc:	e591      	b.n	8003522 <_vfprintf_r+0x1142>
 80039fe:	930e      	str	r3, [sp, #56]	; 0x38
 8003a00:	4617      	mov	r7, r2
 8003a02:	f7ff bbff 	b.w	8003204 <_vfprintf_r+0xe24>
 8003a06:	3330      	adds	r3, #48	; 0x30
 8003a08:	2230      	movs	r2, #48	; 0x30
 8003a0a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8003a0e:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8003a12:	ab24      	add	r3, sp, #144	; 0x90
 8003a14:	e717      	b.n	8003846 <_vfprintf_r+0x1466>
 8003a16:	930e      	str	r3, [sp, #56]	; 0x38
 8003a18:	e4fc      	b.n	8003414 <_vfprintf_r+0x1034>
 8003a1a:	4e3d      	ldr	r6, [pc, #244]	; (8003b10 <_vfprintf_r+0x1730>)
 8003a1c:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <_vfprintf_r+0x1734>)
 8003a1e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8003a22:	f7ff b935 	b.w	8002c90 <_vfprintf_r+0x8b0>
 8003a26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003a28:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003a2a:	189d      	adds	r5, r3, r2
 8003a2c:	eb05 030b 	add.w	r3, r5, fp
 8003a30:	930d      	str	r3, [sp, #52]	; 0x34
 8003a32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003a36:	e574      	b.n	8003522 <_vfprintf_r+0x1142>
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8003a40:	f005 f8a4 	bl	8008b8c <__aeabi_dcmpeq>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	f47f ae5f 	bne.w	8003708 <_vfprintf_r+0x1328>
 8003a4a:	f1c5 0501 	rsb	r5, r5, #1
 8003a4e:	9521      	str	r5, [sp, #132]	; 0x84
 8003a50:	442c      	add	r4, r5
 8003a52:	e536      	b.n	80034c2 <_vfprintf_r+0x10e2>
 8003a54:	9b07      	ldr	r3, [sp, #28]
 8003a56:	f013 0301 	ands.w	r3, r3, #1
 8003a5a:	f47f aefd 	bne.w	8003858 <_vfprintf_r+0x1478>
 8003a5e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003a66:	e55c      	b.n	8003522 <_vfprintf_r+0x1142>
 8003a68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003a6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003a6c:	f1c3 0301 	rsb	r3, r3, #1
 8003a70:	441a      	add	r2, r3
 8003a72:	4613      	mov	r3, r2
 8003a74:	920d      	str	r2, [sp, #52]	; 0x34
 8003a76:	e767      	b.n	8003948 <_vfprintf_r+0x1568>
 8003a78:	f1bb 0f00 	cmp.w	fp, #0
 8003a7c:	d102      	bne.n	8003a84 <_vfprintf_r+0x16a4>
 8003a7e:	9b07      	ldr	r3, [sp, #28]
 8003a80:	07da      	lsls	r2, r3, #31
 8003a82:	d507      	bpl.n	8003a94 <_vfprintf_r+0x16b4>
 8003a84:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003a86:	1c5d      	adds	r5, r3, #1
 8003a88:	eb05 030b 	add.w	r3, r5, fp
 8003a8c:	930d      	str	r3, [sp, #52]	; 0x34
 8003a8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003a92:	e546      	b.n	8003522 <_vfprintf_r+0x1142>
 8003a94:	2301      	movs	r3, #1
 8003a96:	930d      	str	r3, [sp, #52]	; 0x34
 8003a98:	e543      	b.n	8003522 <_vfprintf_r+0x1142>
 8003a9a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003a9c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003aa0:	6805      	ldr	r5, [r0, #0]
 8003aa2:	3004      	adds	r0, #4
 8003aa4:	2d00      	cmp	r5, #0
 8003aa6:	900e      	str	r0, [sp, #56]	; 0x38
 8003aa8:	46a0      	mov	r8, r4
 8003aaa:	f6be ad0d 	bge.w	80024c8 <_vfprintf_r+0xe8>
 8003aae:	f04f 35ff 	mov.w	r5, #4294967295
 8003ab2:	f7fe bd09 	b.w	80024c8 <_vfprintf_r+0xe8>
 8003ab6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003aba:	f7ff b893 	b.w	8002be4 <_vfprintf_r+0x804>
 8003abe:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003ac2:	f7ff b85d 	b.w	8002b80 <_vfprintf_r+0x7a0>
 8003ac6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003aca:	f7fe bfbf 	b.w	8002a4c <_vfprintf_r+0x66c>
 8003ace:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003ad2:	f7fe be5c 	b.w	800278e <_vfprintf_r+0x3ae>
 8003ad6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003ada:	f7ff b812 	b.w	8002b02 <_vfprintf_r+0x722>
 8003ade:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003ae2:	f7fe bdca 	b.w	800267a <_vfprintf_r+0x29a>
 8003ae6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003aea:	f7ff b951 	b.w	8002d90 <_vfprintf_r+0x9b0>
 8003aee:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003af2:	f7fe be23 	b.w	800273c <_vfprintf_r+0x35c>
 8003af6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003afa:	f7ff b8ed 	b.w	8002cd8 <_vfprintf_r+0x8f8>
 8003afe:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8003b02:	f7ff b88c 	b.w	8002c1e <_vfprintf_r+0x83e>
 8003b06:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8003b0a:	e69c      	b.n	8003846 <_vfprintf_r+0x1466>
 8003b0c:	08009190 	.word	0x08009190
 8003b10:	08009164 	.word	0x08009164
 8003b14:	08009160 	.word	0x08009160

08003b18 <__sbprintf>:
 8003b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8003b20:	8989      	ldrh	r1, [r1, #12]
 8003b22:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8003b24:	89e5      	ldrh	r5, [r4, #14]
 8003b26:	9619      	str	r6, [sp, #100]	; 0x64
 8003b28:	f021 0102 	bic.w	r1, r1, #2
 8003b2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003b2e:	f8ad 500e 	strh.w	r5, [sp, #14]
 8003b32:	2500      	movs	r5, #0
 8003b34:	69e7      	ldr	r7, [r4, #28]
 8003b36:	f8ad 100c 	strh.w	r1, [sp, #12]
 8003b3a:	9609      	str	r6, [sp, #36]	; 0x24
 8003b3c:	9506      	str	r5, [sp, #24]
 8003b3e:	ae1a      	add	r6, sp, #104	; 0x68
 8003b40:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8003b44:	4669      	mov	r1, sp
 8003b46:	9600      	str	r6, [sp, #0]
 8003b48:	9604      	str	r6, [sp, #16]
 8003b4a:	9502      	str	r5, [sp, #8]
 8003b4c:	9505      	str	r5, [sp, #20]
 8003b4e:	9707      	str	r7, [sp, #28]
 8003b50:	4606      	mov	r6, r0
 8003b52:	f7fe fc45 	bl	80023e0 <_vfprintf_r>
 8003b56:	1e05      	subs	r5, r0, #0
 8003b58:	db07      	blt.n	8003b6a <__sbprintf+0x52>
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	4669      	mov	r1, sp
 8003b5e:	f001 f8e9 	bl	8004d34 <_fflush_r>
 8003b62:	2800      	cmp	r0, #0
 8003b64:	bf18      	it	ne
 8003b66:	f04f 35ff 	movne.w	r5, #4294967295
 8003b6a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8003b6e:	065b      	lsls	r3, r3, #25
 8003b70:	d503      	bpl.n	8003b7a <__sbprintf+0x62>
 8003b72:	89a3      	ldrh	r3, [r4, #12]
 8003b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b78:	81a3      	strh	r3, [r4, #12]
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8003b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b82:	bf00      	nop

08003b84 <_vsprintf_r>:
 8003b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b86:	b09b      	sub	sp, #108	; 0x6c
 8003b88:	460d      	mov	r5, r1
 8003b8a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8003b8e:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003b92:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003b96:	4669      	mov	r1, sp
 8003b98:	9500      	str	r5, [sp, #0]
 8003b9a:	9504      	str	r5, [sp, #16]
 8003b9c:	f8ad 700c 	strh.w	r7, [sp, #12]
 8003ba0:	9402      	str	r4, [sp, #8]
 8003ba2:	9405      	str	r4, [sp, #20]
 8003ba4:	f8ad 600e 	strh.w	r6, [sp, #14]
 8003ba8:	f002 fd92 	bl	80066d0 <_svfprintf_r>
 8003bac:	9b00      	ldr	r3, [sp, #0]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
 8003bb2:	b01b      	add	sp, #108	; 0x6c
 8003bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bb6:	bf00      	nop

08003bb8 <vsprintf>:
 8003bb8:	b410      	push	{r4}
 8003bba:	4c04      	ldr	r4, [pc, #16]	; (8003bcc <vsprintf+0x14>)
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	460a      	mov	r2, r1
 8003bc0:	4601      	mov	r1, r0
 8003bc2:	6820      	ldr	r0, [r4, #0]
 8003bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bc8:	f7ff bfdc 	b.w	8003b84 <_vsprintf_r>
 8003bcc:	20000460 	.word	0x20000460

08003bd0 <__swsetup_r>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	4b30      	ldr	r3, [pc, #192]	; (8003c94 <__swsetup_r+0xc4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4605      	mov	r5, r0
 8003bd8:	460c      	mov	r4, r1
 8003bda:	b113      	cbz	r3, 8003be2 <__swsetup_r+0x12>
 8003bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bde:	2a00      	cmp	r2, #0
 8003be0:	d038      	beq.n	8003c54 <__swsetup_r+0x84>
 8003be2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003be6:	b293      	uxth	r3, r2
 8003be8:	0718      	lsls	r0, r3, #28
 8003bea:	d50c      	bpl.n	8003c06 <__swsetup_r+0x36>
 8003bec:	6920      	ldr	r0, [r4, #16]
 8003bee:	b1a8      	cbz	r0, 8003c1c <__swsetup_r+0x4c>
 8003bf0:	f013 0201 	ands.w	r2, r3, #1
 8003bf4:	d01e      	beq.n	8003c34 <__swsetup_r+0x64>
 8003bf6:	6963      	ldr	r3, [r4, #20]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	425b      	negs	r3, r3
 8003bfc:	61a3      	str	r3, [r4, #24]
 8003bfe:	60a2      	str	r2, [r4, #8]
 8003c00:	b1f0      	cbz	r0, 8003c40 <__swsetup_r+0x70>
 8003c02:	2000      	movs	r0, #0
 8003c04:	bd38      	pop	{r3, r4, r5, pc}
 8003c06:	06d9      	lsls	r1, r3, #27
 8003c08:	d53c      	bpl.n	8003c84 <__swsetup_r+0xb4>
 8003c0a:	0758      	lsls	r0, r3, #29
 8003c0c:	d426      	bmi.n	8003c5c <__swsetup_r+0x8c>
 8003c0e:	6920      	ldr	r0, [r4, #16]
 8003c10:	f042 0308 	orr.w	r3, r2, #8
 8003c14:	81a3      	strh	r3, [r4, #12]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d1e9      	bne.n	8003bf0 <__swsetup_r+0x20>
 8003c1c:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8003c20:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003c24:	d0e4      	beq.n	8003bf0 <__swsetup_r+0x20>
 8003c26:	4628      	mov	r0, r5
 8003c28:	4621      	mov	r1, r4
 8003c2a:	f001 fc41 	bl	80054b0 <__smakebuf_r>
 8003c2e:	89a3      	ldrh	r3, [r4, #12]
 8003c30:	6920      	ldr	r0, [r4, #16]
 8003c32:	e7dd      	b.n	8003bf0 <__swsetup_r+0x20>
 8003c34:	0799      	lsls	r1, r3, #30
 8003c36:	bf58      	it	pl
 8003c38:	6962      	ldrpl	r2, [r4, #20]
 8003c3a:	60a2      	str	r2, [r4, #8]
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	d1e0      	bne.n	8003c02 <__swsetup_r+0x32>
 8003c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c44:	061a      	lsls	r2, r3, #24
 8003c46:	d5dd      	bpl.n	8003c04 <__swsetup_r+0x34>
 8003c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c4c:	81a3      	strh	r3, [r4, #12]
 8003c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c52:	bd38      	pop	{r3, r4, r5, pc}
 8003c54:	4618      	mov	r0, r3
 8003c56:	f001 f901 	bl	8004e5c <__sinit>
 8003c5a:	e7c2      	b.n	8003be2 <__swsetup_r+0x12>
 8003c5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c5e:	b151      	cbz	r1, 8003c76 <__swsetup_r+0xa6>
 8003c60:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8003c64:	4299      	cmp	r1, r3
 8003c66:	d004      	beq.n	8003c72 <__swsetup_r+0xa2>
 8003c68:	4628      	mov	r0, r5
 8003c6a:	f001 f94f 	bl	8004f0c <_free_r>
 8003c6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c72:	2300      	movs	r3, #0
 8003c74:	6323      	str	r3, [r4, #48]	; 0x30
 8003c76:	2300      	movs	r3, #0
 8003c78:	6920      	ldr	r0, [r4, #16]
 8003c7a:	6063      	str	r3, [r4, #4]
 8003c7c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8003c80:	6020      	str	r0, [r4, #0]
 8003c82:	e7c5      	b.n	8003c10 <__swsetup_r+0x40>
 8003c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c88:	2309      	movs	r3, #9
 8003c8a:	602b      	str	r3, [r5, #0]
 8003c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c90:	81a2      	strh	r2, [r4, #12]
 8003c92:	bd38      	pop	{r3, r4, r5, pc}
 8003c94:	20000460 	.word	0x20000460

08003c98 <quorem>:
 8003c98:	6902      	ldr	r2, [r0, #16]
 8003c9a:	690b      	ldr	r3, [r1, #16]
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	f300 808d 	bgt.w	8003dbc <quorem+0x124>
 8003ca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca6:	f103 38ff 	add.w	r8, r3, #4294967295
 8003caa:	f101 0714 	add.w	r7, r1, #20
 8003cae:	f100 0b14 	add.w	fp, r0, #20
 8003cb2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8003cb6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8003cba:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	3201      	adds	r2, #1
 8003cc2:	fbb3 f9f2 	udiv	r9, r3, r2
 8003cc6:	eb0b 0304 	add.w	r3, fp, r4
 8003cca:	9400      	str	r4, [sp, #0]
 8003ccc:	eb07 0a04 	add.w	sl, r7, r4
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	f1b9 0f00 	cmp.w	r9, #0
 8003cd6:	d039      	beq.n	8003d4c <quorem+0xb4>
 8003cd8:	2500      	movs	r5, #0
 8003cda:	46bc      	mov	ip, r7
 8003cdc:	46de      	mov	lr, fp
 8003cde:	462b      	mov	r3, r5
 8003ce0:	f85c 6b04 	ldr.w	r6, [ip], #4
 8003ce4:	f8de 2000 	ldr.w	r2, [lr]
 8003ce8:	b2b4      	uxth	r4, r6
 8003cea:	fb09 5504 	mla	r5, r9, r4, r5
 8003cee:	0c36      	lsrs	r6, r6, #16
 8003cf0:	0c2c      	lsrs	r4, r5, #16
 8003cf2:	fb09 4406 	mla	r4, r9, r6, r4
 8003cf6:	b2ad      	uxth	r5, r5
 8003cf8:	1b5b      	subs	r3, r3, r5
 8003cfa:	b2a6      	uxth	r6, r4
 8003cfc:	fa13 f382 	uxtah	r3, r3, r2
 8003d00:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 8003d04:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003d0e:	45e2      	cmp	sl, ip
 8003d10:	f84e 3b04 	str.w	r3, [lr], #4
 8003d14:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8003d18:	ea4f 4326 	mov.w	r3, r6, asr #16
 8003d1c:	d2e0      	bcs.n	8003ce0 <quorem+0x48>
 8003d1e:	9b00      	ldr	r3, [sp, #0]
 8003d20:	f85b 3003 	ldr.w	r3, [fp, r3]
 8003d24:	b993      	cbnz	r3, 8003d4c <quorem+0xb4>
 8003d26:	9c01      	ldr	r4, [sp, #4]
 8003d28:	1f23      	subs	r3, r4, #4
 8003d2a:	459b      	cmp	fp, r3
 8003d2c:	d20c      	bcs.n	8003d48 <quorem+0xb0>
 8003d2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003d32:	b94b      	cbnz	r3, 8003d48 <quorem+0xb0>
 8003d34:	f1a4 0308 	sub.w	r3, r4, #8
 8003d38:	e002      	b.n	8003d40 <quorem+0xa8>
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	3b04      	subs	r3, #4
 8003d3e:	b91a      	cbnz	r2, 8003d48 <quorem+0xb0>
 8003d40:	459b      	cmp	fp, r3
 8003d42:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d46:	d3f8      	bcc.n	8003d3a <quorem+0xa2>
 8003d48:	f8c0 8010 	str.w	r8, [r0, #16]
 8003d4c:	4604      	mov	r4, r0
 8003d4e:	f002 f96f 	bl	8006030 <__mcmp>
 8003d52:	2800      	cmp	r0, #0
 8003d54:	db2e      	blt.n	8003db4 <quorem+0x11c>
 8003d56:	f109 0901 	add.w	r9, r9, #1
 8003d5a:	465d      	mov	r5, fp
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f857 1b04 	ldr.w	r1, [r7], #4
 8003d62:	6828      	ldr	r0, [r5, #0]
 8003d64:	b28a      	uxth	r2, r1
 8003d66:	1a9a      	subs	r2, r3, r2
 8003d68:	0c09      	lsrs	r1, r1, #16
 8003d6a:	fa12 f280 	uxtah	r2, r2, r0
 8003d6e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8003d72:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8003d76:	b291      	uxth	r1, r2
 8003d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8003d7c:	45ba      	cmp	sl, r7
 8003d7e:	f845 1b04 	str.w	r1, [r5], #4
 8003d82:	ea4f 4323 	mov.w	r3, r3, asr #16
 8003d86:	d2ea      	bcs.n	8003d5e <quorem+0xc6>
 8003d88:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8003d8c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8003d90:	b982      	cbnz	r2, 8003db4 <quorem+0x11c>
 8003d92:	1f1a      	subs	r2, r3, #4
 8003d94:	4593      	cmp	fp, r2
 8003d96:	d20b      	bcs.n	8003db0 <quorem+0x118>
 8003d98:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8003d9c:	b942      	cbnz	r2, 8003db0 <quorem+0x118>
 8003d9e:	3b08      	subs	r3, #8
 8003da0:	e002      	b.n	8003da8 <quorem+0x110>
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	3b04      	subs	r3, #4
 8003da6:	b91a      	cbnz	r2, 8003db0 <quorem+0x118>
 8003da8:	459b      	cmp	fp, r3
 8003daa:	f108 38ff 	add.w	r8, r8, #4294967295
 8003dae:	d3f8      	bcc.n	8003da2 <quorem+0x10a>
 8003db0:	f8c4 8010 	str.w	r8, [r4, #16]
 8003db4:	4648      	mov	r0, r9
 8003db6:	b003      	add	sp, #12
 8003db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	4770      	bx	lr

08003dc0 <_dtoa_r>:
 8003dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003dc6:	b099      	sub	sp, #100	; 0x64
 8003dc8:	4681      	mov	r9, r0
 8003dca:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8003dcc:	4692      	mov	sl, r2
 8003dce:	469b      	mov	fp, r3
 8003dd0:	b149      	cbz	r1, 8003de6 <_dtoa_r+0x26>
 8003dd2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003dd4:	604a      	str	r2, [r1, #4]
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	4093      	lsls	r3, r2
 8003dda:	608b      	str	r3, [r1, #8]
 8003ddc:	f001 ff46 	bl	8005c6c <_Bfree>
 8003de0:	2300      	movs	r3, #0
 8003de2:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8003de6:	f1bb 0f00 	cmp.w	fp, #0
 8003dea:	46d8      	mov	r8, fp
 8003dec:	db33      	blt.n	8003e56 <_dtoa_r+0x96>
 8003dee:	2300      	movs	r3, #0
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	4ba3      	ldr	r3, [pc, #652]	; (8004080 <_dtoa_r+0x2c0>)
 8003df4:	461a      	mov	r2, r3
 8003df6:	ea08 0303 	and.w	r3, r8, r3
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d014      	beq.n	8003e28 <_dtoa_r+0x68>
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2300      	movs	r3, #0
 8003e02:	4650      	mov	r0, sl
 8003e04:	4659      	mov	r1, fp
 8003e06:	f004 fec1 	bl	8008b8c <__aeabi_dcmpeq>
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	b348      	cbz	r0, 8003e62 <_dtoa_r+0xa2>
 8003e0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003e10:	2301      	movs	r3, #1
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80c2 	beq.w	8003fa0 <_dtoa_r+0x1e0>
 8003e1c:	4899      	ldr	r0, [pc, #612]	; (8004084 <_dtoa_r+0x2c4>)
 8003e1e:	6018      	str	r0, [r3, #0]
 8003e20:	3801      	subs	r0, #1
 8003e22:	b019      	add	sp, #100	; 0x64
 8003e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e28:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003e2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	f1ba 0f00 	cmp.w	sl, #0
 8003e34:	f000 809f 	beq.w	8003f76 <_dtoa_r+0x1b6>
 8003e38:	4893      	ldr	r0, [pc, #588]	; (8004088 <_dtoa_r+0x2c8>)
 8003e3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <_dtoa_r+0x62>
 8003e40:	78c3      	ldrb	r3, [r0, #3]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 80ae 	beq.w	8003fa4 <_dtoa_r+0x1e4>
 8003e48:	f100 0308 	add.w	r3, r0, #8
 8003e4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	b019      	add	sp, #100	; 0x64
 8003e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e56:	2301      	movs	r3, #1
 8003e58:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 8003e5c:	6023      	str	r3, [r4, #0]
 8003e5e:	46c3      	mov	fp, r8
 8003e60:	e7c7      	b.n	8003df2 <_dtoa_r+0x32>
 8003e62:	aa16      	add	r2, sp, #88	; 0x58
 8003e64:	ab17      	add	r3, sp, #92	; 0x5c
 8003e66:	9201      	str	r2, [sp, #4]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	4652      	mov	r2, sl
 8003e6c:	465b      	mov	r3, fp
 8003e6e:	4648      	mov	r0, r9
 8003e70:	f002 f98a 	bl	8006188 <__d2b>
 8003e74:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8003e78:	9008      	str	r0, [sp, #32]
 8003e7a:	f040 8085 	bne.w	8003f88 <_dtoa_r+0x1c8>
 8003e7e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8003e80:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8003e82:	442c      	add	r4, r5
 8003e84:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	f340 8289 	ble.w	80043a0 <_dtoa_r+0x5e0>
 8003e8e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003e92:	f204 4012 	addw	r0, r4, #1042	; 0x412
 8003e96:	fa08 f803 	lsl.w	r8, r8, r3
 8003e9a:	fa2a f000 	lsr.w	r0, sl, r0
 8003e9e:	ea40 0008 	orr.w	r0, r0, r8
 8003ea2:	f004 fb95 	bl	80085d0 <__aeabi_ui2d>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	3c01      	subs	r4, #1
 8003eaa:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003eae:	930d      	str	r3, [sp, #52]	; 0x34
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	4b76      	ldr	r3, [pc, #472]	; (800408c <_dtoa_r+0x2cc>)
 8003eb4:	f004 fa4e 	bl	8008354 <__aeabi_dsub>
 8003eb8:	a36b      	add	r3, pc, #428	; (adr r3, 8004068 <_dtoa_r+0x2a8>)
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f004 fbfd 	bl	80086bc <__aeabi_dmul>
 8003ec2:	a36b      	add	r3, pc, #428	; (adr r3, 8004070 <_dtoa_r+0x2b0>)
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	f004 fa46 	bl	8008358 <__adddf3>
 8003ecc:	4606      	mov	r6, r0
 8003ece:	4620      	mov	r0, r4
 8003ed0:	460f      	mov	r7, r1
 8003ed2:	f004 fb8d 	bl	80085f0 <__aeabi_i2d>
 8003ed6:	a368      	add	r3, pc, #416	; (adr r3, 8004078 <_dtoa_r+0x2b8>)
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f004 fbee 	bl	80086bc <__aeabi_dmul>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	4639      	mov	r1, r7
 8003ee8:	f004 fa36 	bl	8008358 <__adddf3>
 8003eec:	4606      	mov	r6, r0
 8003eee:	460f      	mov	r7, r1
 8003ef0:	f004 fe94 	bl	8008c1c <__aeabi_d2iz>
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	9004      	str	r0, [sp, #16]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	4630      	mov	r0, r6
 8003efc:	4639      	mov	r1, r7
 8003efe:	f004 fe4f 	bl	8008ba0 <__aeabi_dcmplt>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	f040 8227 	bne.w	8004356 <_dtoa_r+0x596>
 8003f08:	9e04      	ldr	r6, [sp, #16]
 8003f0a:	2e16      	cmp	r6, #22
 8003f0c:	f200 8220 	bhi.w	8004350 <_dtoa_r+0x590>
 8003f10:	4b5f      	ldr	r3, [pc, #380]	; (8004090 <_dtoa_r+0x2d0>)
 8003f12:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f1a:	4652      	mov	r2, sl
 8003f1c:	465b      	mov	r3, fp
 8003f1e:	f004 fe5d 	bl	8008bdc <__aeabi_dcmpgt>
 8003f22:	2800      	cmp	r0, #0
 8003f24:	f000 8241 	beq.w	80043aa <_dtoa_r+0x5ea>
 8003f28:	1e73      	subs	r3, r6, #1
 8003f2a:	9304      	str	r3, [sp, #16]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f30:	1b2c      	subs	r4, r5, r4
 8003f32:	f1b4 0801 	subs.w	r8, r4, #1
 8003f36:	f100 8229 	bmi.w	800438c <_dtoa_r+0x5cc>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9305      	str	r3, [sp, #20]
 8003f3e:	9b04      	ldr	r3, [sp, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f2c0 821a 	blt.w	800437a <_dtoa_r+0x5ba>
 8003f46:	4498      	add	r8, r3
 8003f48:	930a      	str	r3, [sp, #40]	; 0x28
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9302      	str	r3, [sp, #8]
 8003f4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f50:	2b09      	cmp	r3, #9
 8003f52:	d829      	bhi.n	8003fa8 <_dtoa_r+0x1e8>
 8003f54:	2b05      	cmp	r3, #5
 8003f56:	f340 8643 	ble.w	8004be0 <_dtoa_r+0xe20>
 8003f5a:	3b04      	subs	r3, #4
 8003f5c:	9322      	str	r3, [sp, #136]	; 0x88
 8003f5e:	2500      	movs	r5, #0
 8003f60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f62:	3b02      	subs	r3, #2
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	f200 8622 	bhi.w	8004bae <_dtoa_r+0xdee>
 8003f6a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003f6e:	032a      	.short	0x032a
 8003f70:	03350223 	.word	0x03350223
 8003f74:	044f      	.short	0x044f
 8003f76:	4b44      	ldr	r3, [pc, #272]	; (8004088 <_dtoa_r+0x2c8>)
 8003f78:	4a46      	ldr	r2, [pc, #280]	; (8004094 <_dtoa_r+0x2d4>)
 8003f7a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	bf14      	ite	ne
 8003f82:	4618      	movne	r0, r3
 8003f84:	4610      	moveq	r0, r2
 8003f86:	e758      	b.n	8003e3a <_dtoa_r+0x7a>
 8003f88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003f8c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003f90:	950d      	str	r5, [sp, #52]	; 0x34
 8003f92:	4650      	mov	r0, sl
 8003f94:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003f98:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003f9c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8003f9e:	e787      	b.n	8003eb0 <_dtoa_r+0xf0>
 8003fa0:	483d      	ldr	r0, [pc, #244]	; (8004098 <_dtoa_r+0x2d8>)
 8003fa2:	e73e      	b.n	8003e22 <_dtoa_r+0x62>
 8003fa4:	1cc3      	adds	r3, r0, #3
 8003fa6:	e751      	b.n	8003e4c <_dtoa_r+0x8c>
 8003fa8:	2100      	movs	r1, #0
 8003faa:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8003fae:	4648      	mov	r0, r9
 8003fb0:	9122      	str	r1, [sp, #136]	; 0x88
 8003fb2:	f001 fe35 	bl	8005c20 <_Balloc>
 8003fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fba:	9306      	str	r3, [sp, #24]
 8003fbc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003fbe:	930c      	str	r3, [sp, #48]	; 0x30
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	9007      	str	r0, [sp, #28]
 8003fc4:	9223      	str	r2, [sp, #140]	; 0x8c
 8003fc6:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8003fca:	9309      	str	r3, [sp, #36]	; 0x24
 8003fcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f2c0 80d0 	blt.w	8004174 <_dtoa_r+0x3b4>
 8003fd4:	9a04      	ldr	r2, [sp, #16]
 8003fd6:	2a0e      	cmp	r2, #14
 8003fd8:	f300 80cc 	bgt.w	8004174 <_dtoa_r+0x3b4>
 8003fdc:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <_dtoa_r+0x2d0>)
 8003fde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fe2:	ed93 7b00 	vldr	d7, [r3]
 8003fe6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003fee:	f2c0 82fe 	blt.w	80045ee <_dtoa_r+0x82e>
 8003ff2:	4656      	mov	r6, sl
 8003ff4:	465f      	mov	r7, fp
 8003ff6:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	4652      	mov	r2, sl
 8003ffe:	465b      	mov	r3, fp
 8004000:	4639      	mov	r1, r7
 8004002:	f004 fc85 	bl	8008910 <__aeabi_ddiv>
 8004006:	f004 fe09 	bl	8008c1c <__aeabi_d2iz>
 800400a:	4604      	mov	r4, r0
 800400c:	f004 faf0 	bl	80085f0 <__aeabi_i2d>
 8004010:	4652      	mov	r2, sl
 8004012:	465b      	mov	r3, fp
 8004014:	f004 fb52 	bl	80086bc <__aeabi_dmul>
 8004018:	460b      	mov	r3, r1
 800401a:	4602      	mov	r2, r0
 800401c:	4639      	mov	r1, r7
 800401e:	4630      	mov	r0, r6
 8004020:	f004 f998 	bl	8008354 <__aeabi_dsub>
 8004024:	9d07      	ldr	r5, [sp, #28]
 8004026:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800402a:	702b      	strb	r3, [r5, #0]
 800402c:	9b06      	ldr	r3, [sp, #24]
 800402e:	2b01      	cmp	r3, #1
 8004030:	4606      	mov	r6, r0
 8004032:	460f      	mov	r7, r1
 8004034:	f105 0501 	add.w	r5, r5, #1
 8004038:	d061      	beq.n	80040fe <_dtoa_r+0x33e>
 800403a:	2200      	movs	r2, #0
 800403c:	4b17      	ldr	r3, [pc, #92]	; (800409c <_dtoa_r+0x2dc>)
 800403e:	f004 fb3d 	bl	80086bc <__aeabi_dmul>
 8004042:	2200      	movs	r2, #0
 8004044:	2300      	movs	r3, #0
 8004046:	4606      	mov	r6, r0
 8004048:	460f      	mov	r7, r1
 800404a:	f004 fd9f 	bl	8008b8c <__aeabi_dcmpeq>
 800404e:	2800      	cmp	r0, #0
 8004050:	d17d      	bne.n	800414e <_dtoa_r+0x38e>
 8004052:	f8cd 9014 	str.w	r9, [sp, #20]
 8004056:	f8dd a018 	ldr.w	sl, [sp, #24]
 800405a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800405e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004062:	e028      	b.n	80040b6 <_dtoa_r+0x2f6>
 8004064:	f3af 8000 	nop.w
 8004068:	636f4361 	.word	0x636f4361
 800406c:	3fd287a7 	.word	0x3fd287a7
 8004070:	8b60c8b3 	.word	0x8b60c8b3
 8004074:	3fc68a28 	.word	0x3fc68a28
 8004078:	509f79fb 	.word	0x509f79fb
 800407c:	3fd34413 	.word	0x3fd34413
 8004080:	7ff00000 	.word	0x7ff00000
 8004084:	08009199 	.word	0x08009199
 8004088:	080091b8 	.word	0x080091b8
 800408c:	3ff80000 	.word	0x3ff80000
 8004090:	080091c0 	.word	0x080091c0
 8004094:	080091ac 	.word	0x080091ac
 8004098:	08009198 	.word	0x08009198
 800409c:	40240000 	.word	0x40240000
 80040a0:	f004 fb0c 	bl	80086bc <__aeabi_dmul>
 80040a4:	2200      	movs	r2, #0
 80040a6:	2300      	movs	r3, #0
 80040a8:	4606      	mov	r6, r0
 80040aa:	460f      	mov	r7, r1
 80040ac:	f004 fd6e 	bl	8008b8c <__aeabi_dcmpeq>
 80040b0:	2800      	cmp	r0, #0
 80040b2:	f040 83ae 	bne.w	8004812 <_dtoa_r+0xa52>
 80040b6:	4642      	mov	r2, r8
 80040b8:	464b      	mov	r3, r9
 80040ba:	4630      	mov	r0, r6
 80040bc:	4639      	mov	r1, r7
 80040be:	f004 fc27 	bl	8008910 <__aeabi_ddiv>
 80040c2:	f004 fdab 	bl	8008c1c <__aeabi_d2iz>
 80040c6:	4604      	mov	r4, r0
 80040c8:	f004 fa92 	bl	80085f0 <__aeabi_i2d>
 80040cc:	4642      	mov	r2, r8
 80040ce:	464b      	mov	r3, r9
 80040d0:	f004 faf4 	bl	80086bc <__aeabi_dmul>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4630      	mov	r0, r6
 80040da:	4639      	mov	r1, r7
 80040dc:	f004 f93a 	bl	8008354 <__aeabi_dsub>
 80040e0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80040e4:	f805 eb01 	strb.w	lr, [r5], #1
 80040e8:	ebcb 0e05 	rsb	lr, fp, r5
 80040ec:	45d6      	cmp	lr, sl
 80040ee:	4606      	mov	r6, r0
 80040f0:	460f      	mov	r7, r1
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	4bae      	ldr	r3, [pc, #696]	; (80043b0 <_dtoa_r+0x5f0>)
 80040f8:	d1d2      	bne.n	80040a0 <_dtoa_r+0x2e0>
 80040fa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80040fe:	4632      	mov	r2, r6
 8004100:	463b      	mov	r3, r7
 8004102:	4630      	mov	r0, r6
 8004104:	4639      	mov	r1, r7
 8004106:	f004 f927 	bl	8008358 <__adddf3>
 800410a:	4606      	mov	r6, r0
 800410c:	460f      	mov	r7, r1
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004116:	f004 fd43 	bl	8008ba0 <__aeabi_dcmplt>
 800411a:	b940      	cbnz	r0, 800412e <_dtoa_r+0x36e>
 800411c:	4632      	mov	r2, r6
 800411e:	463b      	mov	r3, r7
 8004120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004124:	f004 fd32 	bl	8008b8c <__aeabi_dcmpeq>
 8004128:	b188      	cbz	r0, 800414e <_dtoa_r+0x38e>
 800412a:	07e3      	lsls	r3, r4, #31
 800412c:	d50f      	bpl.n	800414e <_dtoa_r+0x38e>
 800412e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8004132:	9a07      	ldr	r2, [sp, #28]
 8004134:	1e6b      	subs	r3, r5, #1
 8004136:	e004      	b.n	8004142 <_dtoa_r+0x382>
 8004138:	429a      	cmp	r2, r3
 800413a:	f000 83fc 	beq.w	8004936 <_dtoa_r+0xb76>
 800413e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004142:	2c39      	cmp	r4, #57	; 0x39
 8004144:	f103 0501 	add.w	r5, r3, #1
 8004148:	d0f6      	beq.n	8004138 <_dtoa_r+0x378>
 800414a:	3401      	adds	r4, #1
 800414c:	701c      	strb	r4, [r3, #0]
 800414e:	9908      	ldr	r1, [sp, #32]
 8004150:	4648      	mov	r0, r9
 8004152:	f001 fd8b 	bl	8005c6c <_Bfree>
 8004156:	2200      	movs	r2, #0
 8004158:	9b04      	ldr	r3, [sp, #16]
 800415a:	702a      	strb	r2, [r5, #0]
 800415c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800415e:	3301      	adds	r3, #1
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 839b 	beq.w	80048a0 <_dtoa_r+0xae0>
 800416a:	9807      	ldr	r0, [sp, #28]
 800416c:	601d      	str	r5, [r3, #0]
 800416e:	b019      	add	sp, #100	; 0x64
 8004170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004176:	2a00      	cmp	r2, #0
 8004178:	f000 810e 	beq.w	8004398 <_dtoa_r+0x5d8>
 800417c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800417e:	2a01      	cmp	r2, #1
 8004180:	f340 8257 	ble.w	8004632 <_dtoa_r+0x872>
 8004184:	9b06      	ldr	r3, [sp, #24]
 8004186:	9a02      	ldr	r2, [sp, #8]
 8004188:	1e5f      	subs	r7, r3, #1
 800418a:	42ba      	cmp	r2, r7
 800418c:	f2c0 838b 	blt.w	80048a6 <_dtoa_r+0xae6>
 8004190:	1bd7      	subs	r7, r2, r7
 8004192:	9b06      	ldr	r3, [sp, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	f2c0 8480 	blt.w	8004a9a <_dtoa_r+0xcda>
 800419a:	9d05      	ldr	r5, [sp, #20]
 800419c:	9b06      	ldr	r3, [sp, #24]
 800419e:	9a05      	ldr	r2, [sp, #20]
 80041a0:	2101      	movs	r1, #1
 80041a2:	441a      	add	r2, r3
 80041a4:	4648      	mov	r0, r9
 80041a6:	9205      	str	r2, [sp, #20]
 80041a8:	4498      	add	r8, r3
 80041aa:	f001 fdf7 	bl	8005d9c <__i2b>
 80041ae:	4606      	mov	r6, r0
 80041b0:	b165      	cbz	r5, 80041cc <_dtoa_r+0x40c>
 80041b2:	f1b8 0f00 	cmp.w	r8, #0
 80041b6:	dd09      	ble.n	80041cc <_dtoa_r+0x40c>
 80041b8:	4545      	cmp	r5, r8
 80041ba:	9a05      	ldr	r2, [sp, #20]
 80041bc:	462b      	mov	r3, r5
 80041be:	bfa8      	it	ge
 80041c0:	4643      	movge	r3, r8
 80041c2:	1ad2      	subs	r2, r2, r3
 80041c4:	9205      	str	r2, [sp, #20]
 80041c6:	1aed      	subs	r5, r5, r3
 80041c8:	ebc3 0808 	rsb	r8, r3, r8
 80041cc:	9b02      	ldr	r3, [sp, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f340 82f5 	ble.w	80047be <_dtoa_r+0x9fe>
 80041d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041d6:	2a00      	cmp	r2, #0
 80041d8:	f000 8202 	beq.w	80045e0 <_dtoa_r+0x820>
 80041dc:	2f00      	cmp	r7, #0
 80041de:	f000 81ff 	beq.w	80045e0 <_dtoa_r+0x820>
 80041e2:	4631      	mov	r1, r6
 80041e4:	463a      	mov	r2, r7
 80041e6:	4648      	mov	r0, r9
 80041e8:	f001 fe7a 	bl	8005ee0 <__pow5mult>
 80041ec:	9a08      	ldr	r2, [sp, #32]
 80041ee:	4601      	mov	r1, r0
 80041f0:	4606      	mov	r6, r0
 80041f2:	4648      	mov	r0, r9
 80041f4:	f001 fddc 	bl	8005db0 <__multiply>
 80041f8:	9908      	ldr	r1, [sp, #32]
 80041fa:	4604      	mov	r4, r0
 80041fc:	4648      	mov	r0, r9
 80041fe:	f001 fd35 	bl	8005c6c <_Bfree>
 8004202:	9b02      	ldr	r3, [sp, #8]
 8004204:	1bdb      	subs	r3, r3, r7
 8004206:	9302      	str	r3, [sp, #8]
 8004208:	f040 81e9 	bne.w	80045de <_dtoa_r+0x81e>
 800420c:	2101      	movs	r1, #1
 800420e:	4648      	mov	r0, r9
 8004210:	f001 fdc4 	bl	8005d9c <__i2b>
 8004214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004216:	9002      	str	r0, [sp, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 8215 	beq.w	8004648 <_dtoa_r+0x888>
 800421e:	4601      	mov	r1, r0
 8004220:	461a      	mov	r2, r3
 8004222:	4648      	mov	r0, r9
 8004224:	f001 fe5c 	bl	8005ee0 <__pow5mult>
 8004228:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800422a:	9002      	str	r0, [sp, #8]
 800422c:	2b01      	cmp	r3, #1
 800422e:	f340 82f3 	ble.w	8004818 <_dtoa_r+0xa58>
 8004232:	2700      	movs	r7, #0
 8004234:	9a02      	ldr	r2, [sp, #8]
 8004236:	6913      	ldr	r3, [r2, #16]
 8004238:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800423c:	6918      	ldr	r0, [r3, #16]
 800423e:	f001 fd5f 	bl	8005d00 <__hi0bits>
 8004242:	f1c0 0020 	rsb	r0, r0, #32
 8004246:	4440      	add	r0, r8
 8004248:	f010 001f 	ands.w	r0, r0, #31
 800424c:	f000 81fa 	beq.w	8004644 <_dtoa_r+0x884>
 8004250:	f1c0 0320 	rsb	r3, r0, #32
 8004254:	2b04      	cmp	r3, #4
 8004256:	f340 84bd 	ble.w	8004bd4 <_dtoa_r+0xe14>
 800425a:	f1c0 001c 	rsb	r0, r0, #28
 800425e:	9b05      	ldr	r3, [sp, #20]
 8004260:	4403      	add	r3, r0
 8004262:	9305      	str	r3, [sp, #20]
 8004264:	4405      	add	r5, r0
 8004266:	4480      	add	r8, r0
 8004268:	9b05      	ldr	r3, [sp, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	dd05      	ble.n	800427a <_dtoa_r+0x4ba>
 800426e:	4621      	mov	r1, r4
 8004270:	461a      	mov	r2, r3
 8004272:	4648      	mov	r0, r9
 8004274:	f001 fe84 	bl	8005f80 <__lshift>
 8004278:	4604      	mov	r4, r0
 800427a:	f1b8 0f00 	cmp.w	r8, #0
 800427e:	dd05      	ble.n	800428c <_dtoa_r+0x4cc>
 8004280:	4642      	mov	r2, r8
 8004282:	9902      	ldr	r1, [sp, #8]
 8004284:	4648      	mov	r0, r9
 8004286:	f001 fe7b 	bl	8005f80 <__lshift>
 800428a:	9002      	str	r0, [sp, #8]
 800428c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800428e:	2b00      	cmp	r3, #0
 8004290:	f040 827a 	bne.w	8004788 <_dtoa_r+0x9c8>
 8004294:	9b06      	ldr	r3, [sp, #24]
 8004296:	2b00      	cmp	r3, #0
 8004298:	f340 8293 	ble.w	80047c2 <_dtoa_r+0xa02>
 800429c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f040 81f4 	bne.w	800468c <_dtoa_r+0x8cc>
 80042a4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80042a8:	9f06      	ldr	r7, [sp, #24]
 80042aa:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80042ae:	465d      	mov	r5, fp
 80042b0:	e002      	b.n	80042b8 <_dtoa_r+0x4f8>
 80042b2:	f001 fce5 	bl	8005c80 <__multadd>
 80042b6:	4604      	mov	r4, r0
 80042b8:	4641      	mov	r1, r8
 80042ba:	4620      	mov	r0, r4
 80042bc:	f7ff fcec 	bl	8003c98 <quorem>
 80042c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80042c4:	f805 ab01 	strb.w	sl, [r5], #1
 80042c8:	ebcb 0305 	rsb	r3, fp, r5
 80042cc:	42bb      	cmp	r3, r7
 80042ce:	f04f 020a 	mov.w	r2, #10
 80042d2:	f04f 0300 	mov.w	r3, #0
 80042d6:	4621      	mov	r1, r4
 80042d8:	4648      	mov	r0, r9
 80042da:	dbea      	blt.n	80042b2 <_dtoa_r+0x4f2>
 80042dc:	9b07      	ldr	r3, [sp, #28]
 80042de:	9a06      	ldr	r2, [sp, #24]
 80042e0:	2a01      	cmp	r2, #1
 80042e2:	bfac      	ite	ge
 80042e4:	189b      	addge	r3, r3, r2
 80042e6:	3301      	addlt	r3, #1
 80042e8:	461d      	mov	r5, r3
 80042ea:	f04f 0b00 	mov.w	fp, #0
 80042ee:	4621      	mov	r1, r4
 80042f0:	2201      	movs	r2, #1
 80042f2:	4648      	mov	r0, r9
 80042f4:	f001 fe44 	bl	8005f80 <__lshift>
 80042f8:	9902      	ldr	r1, [sp, #8]
 80042fa:	9008      	str	r0, [sp, #32]
 80042fc:	f001 fe98 	bl	8006030 <__mcmp>
 8004300:	2800      	cmp	r0, #0
 8004302:	f340 8305 	ble.w	8004910 <_dtoa_r+0xb50>
 8004306:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800430a:	9907      	ldr	r1, [sp, #28]
 800430c:	1e6b      	subs	r3, r5, #1
 800430e:	e004      	b.n	800431a <_dtoa_r+0x55a>
 8004310:	428b      	cmp	r3, r1
 8004312:	f000 8274 	beq.w	80047fe <_dtoa_r+0xa3e>
 8004316:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800431a:	2a39      	cmp	r2, #57	; 0x39
 800431c:	f103 0501 	add.w	r5, r3, #1
 8004320:	d0f6      	beq.n	8004310 <_dtoa_r+0x550>
 8004322:	3201      	adds	r2, #1
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	9902      	ldr	r1, [sp, #8]
 8004328:	4648      	mov	r0, r9
 800432a:	f001 fc9f 	bl	8005c6c <_Bfree>
 800432e:	2e00      	cmp	r6, #0
 8004330:	f43f af0d 	beq.w	800414e <_dtoa_r+0x38e>
 8004334:	f1bb 0f00 	cmp.w	fp, #0
 8004338:	d005      	beq.n	8004346 <_dtoa_r+0x586>
 800433a:	45b3      	cmp	fp, r6
 800433c:	d003      	beq.n	8004346 <_dtoa_r+0x586>
 800433e:	4659      	mov	r1, fp
 8004340:	4648      	mov	r0, r9
 8004342:	f001 fc93 	bl	8005c6c <_Bfree>
 8004346:	4631      	mov	r1, r6
 8004348:	4648      	mov	r0, r9
 800434a:	f001 fc8f 	bl	8005c6c <_Bfree>
 800434e:	e6fe      	b.n	800414e <_dtoa_r+0x38e>
 8004350:	2301      	movs	r3, #1
 8004352:	930b      	str	r3, [sp, #44]	; 0x2c
 8004354:	e5ec      	b.n	8003f30 <_dtoa_r+0x170>
 8004356:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800435a:	4640      	mov	r0, r8
 800435c:	f004 f948 	bl	80085f0 <__aeabi_i2d>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4630      	mov	r0, r6
 8004366:	4639      	mov	r1, r7
 8004368:	f004 fc10 	bl	8008b8c <__aeabi_dcmpeq>
 800436c:	2800      	cmp	r0, #0
 800436e:	f47f adcb 	bne.w	8003f08 <_dtoa_r+0x148>
 8004372:	f108 33ff 	add.w	r3, r8, #4294967295
 8004376:	9304      	str	r3, [sp, #16]
 8004378:	e5c6      	b.n	8003f08 <_dtoa_r+0x148>
 800437a:	9a05      	ldr	r2, [sp, #20]
 800437c:	9b04      	ldr	r3, [sp, #16]
 800437e:	1ad2      	subs	r2, r2, r3
 8004380:	425b      	negs	r3, r3
 8004382:	9302      	str	r3, [sp, #8]
 8004384:	2300      	movs	r3, #0
 8004386:	9205      	str	r2, [sp, #20]
 8004388:	930a      	str	r3, [sp, #40]	; 0x28
 800438a:	e5e0      	b.n	8003f4e <_dtoa_r+0x18e>
 800438c:	f1c8 0300 	rsb	r3, r8, #0
 8004390:	9305      	str	r3, [sp, #20]
 8004392:	f04f 0800 	mov.w	r8, #0
 8004396:	e5d2      	b.n	8003f3e <_dtoa_r+0x17e>
 8004398:	9f02      	ldr	r7, [sp, #8]
 800439a:	9d05      	ldr	r5, [sp, #20]
 800439c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800439e:	e707      	b.n	80041b0 <_dtoa_r+0x3f0>
 80043a0:	f1c3 0820 	rsb	r8, r3, #32
 80043a4:	fa0a f008 	lsl.w	r0, sl, r8
 80043a8:	e57b      	b.n	8003ea2 <_dtoa_r+0xe2>
 80043aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80043ac:	e5c0      	b.n	8003f30 <_dtoa_r+0x170>
 80043ae:	bf00      	nop
 80043b0:	40240000 	.word	0x40240000
 80043b4:	2300      	movs	r3, #0
 80043b6:	9309      	str	r3, [sp, #36]	; 0x24
 80043b8:	9b04      	ldr	r3, [sp, #16]
 80043ba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80043bc:	4413      	add	r3, r2
 80043be:	930c      	str	r3, [sp, #48]	; 0x30
 80043c0:	3301      	adds	r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	9306      	str	r3, [sp, #24]
 80043c6:	f340 827d 	ble.w	80048c4 <_dtoa_r+0xb04>
 80043ca:	9c06      	ldr	r4, [sp, #24]
 80043cc:	4626      	mov	r6, r4
 80043ce:	2100      	movs	r1, #0
 80043d0:	2e17      	cmp	r6, #23
 80043d2:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80043d6:	d90b      	bls.n	80043f0 <_dtoa_r+0x630>
 80043d8:	2201      	movs	r2, #1
 80043da:	2304      	movs	r3, #4
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	f103 0014 	add.w	r0, r3, #20
 80043e2:	42b0      	cmp	r0, r6
 80043e4:	4611      	mov	r1, r2
 80043e6:	f102 0201 	add.w	r2, r2, #1
 80043ea:	d9f7      	bls.n	80043dc <_dtoa_r+0x61c>
 80043ec:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80043f0:	4648      	mov	r0, r9
 80043f2:	f001 fc15 	bl	8005c20 <_Balloc>
 80043f6:	2c0e      	cmp	r4, #14
 80043f8:	9007      	str	r0, [sp, #28]
 80043fa:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 80043fe:	f63f ade5 	bhi.w	8003fcc <_dtoa_r+0x20c>
 8004402:	2d00      	cmp	r5, #0
 8004404:	f43f ade2 	beq.w	8003fcc <_dtoa_r+0x20c>
 8004408:	9904      	ldr	r1, [sp, #16]
 800440a:	2900      	cmp	r1, #0
 800440c:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8004410:	f340 829a 	ble.w	8004948 <_dtoa_r+0xb88>
 8004414:	4b90      	ldr	r3, [pc, #576]	; (8004658 <_dtoa_r+0x898>)
 8004416:	f001 020f 	and.w	r2, r1, #15
 800441a:	110e      	asrs	r6, r1, #4
 800441c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004420:	06f0      	lsls	r0, r6, #27
 8004422:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004426:	f140 8246 	bpl.w	80048b6 <_dtoa_r+0xaf6>
 800442a:	4b8c      	ldr	r3, [pc, #560]	; (800465c <_dtoa_r+0x89c>)
 800442c:	4650      	mov	r0, sl
 800442e:	4659      	mov	r1, fp
 8004430:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004434:	f004 fa6c 	bl	8008910 <__aeabi_ddiv>
 8004438:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800443c:	f006 060f 	and.w	r6, r6, #15
 8004440:	f04f 0a03 	mov.w	sl, #3
 8004444:	b186      	cbz	r6, 8004468 <_dtoa_r+0x6a8>
 8004446:	4f85      	ldr	r7, [pc, #532]	; (800465c <_dtoa_r+0x89c>)
 8004448:	07f1      	lsls	r1, r6, #31
 800444a:	d509      	bpl.n	8004460 <_dtoa_r+0x6a0>
 800444c:	4620      	mov	r0, r4
 800444e:	4629      	mov	r1, r5
 8004450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004454:	f004 f932 	bl	80086bc <__aeabi_dmul>
 8004458:	f10a 0a01 	add.w	sl, sl, #1
 800445c:	4604      	mov	r4, r0
 800445e:	460d      	mov	r5, r1
 8004460:	1076      	asrs	r6, r6, #1
 8004462:	f107 0708 	add.w	r7, r7, #8
 8004466:	d1ef      	bne.n	8004448 <_dtoa_r+0x688>
 8004468:	4622      	mov	r2, r4
 800446a:	462b      	mov	r3, r5
 800446c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004470:	f004 fa4e 	bl	8008910 <__aeabi_ddiv>
 8004474:	4606      	mov	r6, r0
 8004476:	460f      	mov	r7, r1
 8004478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800447a:	b143      	cbz	r3, 800448e <_dtoa_r+0x6ce>
 800447c:	2200      	movs	r2, #0
 800447e:	4b78      	ldr	r3, [pc, #480]	; (8004660 <_dtoa_r+0x8a0>)
 8004480:	4630      	mov	r0, r6
 8004482:	4639      	mov	r1, r7
 8004484:	f004 fb8c 	bl	8008ba0 <__aeabi_dcmplt>
 8004488:	2800      	cmp	r0, #0
 800448a:	f040 831a 	bne.w	8004ac2 <_dtoa_r+0xd02>
 800448e:	4650      	mov	r0, sl
 8004490:	f004 f8ae 	bl	80085f0 <__aeabi_i2d>
 8004494:	4632      	mov	r2, r6
 8004496:	463b      	mov	r3, r7
 8004498:	f004 f910 	bl	80086bc <__aeabi_dmul>
 800449c:	4b71      	ldr	r3, [pc, #452]	; (8004664 <_dtoa_r+0x8a4>)
 800449e:	2200      	movs	r2, #0
 80044a0:	f003 ff5a 	bl	8008358 <__adddf3>
 80044a4:	9b06      	ldr	r3, [sp, #24]
 80044a6:	4604      	mov	r4, r0
 80044a8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 81db 	beq.w	8004868 <_dtoa_r+0xaa8>
 80044b2:	9b04      	ldr	r3, [sp, #16]
 80044b4:	9314      	str	r3, [sp, #80]	; 0x50
 80044b6:	9b06      	ldr	r3, [sp, #24]
 80044b8:	9310      	str	r3, [sp, #64]	; 0x40
 80044ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8294 	beq.w	80049ea <_dtoa_r+0xc2a>
 80044c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80044c4:	4b64      	ldr	r3, [pc, #400]	; (8004658 <_dtoa_r+0x898>)
 80044c6:	4968      	ldr	r1, [pc, #416]	; (8004668 <_dtoa_r+0x8a8>)
 80044c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80044d0:	2000      	movs	r0, #0
 80044d2:	f004 fa1d 	bl	8008910 <__aeabi_ddiv>
 80044d6:	4622      	mov	r2, r4
 80044d8:	462b      	mov	r3, r5
 80044da:	f003 ff3b 	bl	8008354 <__aeabi_dsub>
 80044de:	4682      	mov	sl, r0
 80044e0:	468b      	mov	fp, r1
 80044e2:	4630      	mov	r0, r6
 80044e4:	4639      	mov	r1, r7
 80044e6:	f004 fb99 	bl	8008c1c <__aeabi_d2iz>
 80044ea:	4604      	mov	r4, r0
 80044ec:	f004 f880 	bl	80085f0 <__aeabi_i2d>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4630      	mov	r0, r6
 80044f6:	4639      	mov	r1, r7
 80044f8:	f003 ff2c 	bl	8008354 <__aeabi_dsub>
 80044fc:	3430      	adds	r4, #48	; 0x30
 80044fe:	9d07      	ldr	r5, [sp, #28]
 8004500:	b2e4      	uxtb	r4, r4
 8004502:	4606      	mov	r6, r0
 8004504:	460f      	mov	r7, r1
 8004506:	702c      	strb	r4, [r5, #0]
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4650      	mov	r0, sl
 800450e:	4659      	mov	r1, fp
 8004510:	3501      	adds	r5, #1
 8004512:	f004 fb63 	bl	8008bdc <__aeabi_dcmpgt>
 8004516:	2800      	cmp	r0, #0
 8004518:	d150      	bne.n	80045bc <_dtoa_r+0x7fc>
 800451a:	4632      	mov	r2, r6
 800451c:	463b      	mov	r3, r7
 800451e:	2000      	movs	r0, #0
 8004520:	494f      	ldr	r1, [pc, #316]	; (8004660 <_dtoa_r+0x8a0>)
 8004522:	f003 ff17 	bl	8008354 <__aeabi_dsub>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4650      	mov	r0, sl
 800452c:	4659      	mov	r1, fp
 800452e:	f004 fb55 	bl	8008bdc <__aeabi_dcmpgt>
 8004532:	2800      	cmp	r0, #0
 8004534:	f040 8308 	bne.w	8004b48 <_dtoa_r+0xd88>
 8004538:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800453a:	2a01      	cmp	r2, #1
 800453c:	f340 81f7 	ble.w	800492e <_dtoa_r+0xb6e>
 8004540:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004542:	9a07      	ldr	r2, [sp, #28]
 8004544:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004548:	4413      	add	r3, r2
 800454a:	4698      	mov	r8, r3
 800454c:	e00d      	b.n	800456a <_dtoa_r+0x7aa>
 800454e:	2000      	movs	r0, #0
 8004550:	4943      	ldr	r1, [pc, #268]	; (8004660 <_dtoa_r+0x8a0>)
 8004552:	f003 feff 	bl	8008354 <__aeabi_dsub>
 8004556:	4652      	mov	r2, sl
 8004558:	465b      	mov	r3, fp
 800455a:	f004 fb21 	bl	8008ba0 <__aeabi_dcmplt>
 800455e:	2800      	cmp	r0, #0
 8004560:	f040 82f2 	bne.w	8004b48 <_dtoa_r+0xd88>
 8004564:	4545      	cmp	r5, r8
 8004566:	f000 81e0 	beq.w	800492a <_dtoa_r+0xb6a>
 800456a:	4650      	mov	r0, sl
 800456c:	4659      	mov	r1, fp
 800456e:	2200      	movs	r2, #0
 8004570:	4b3e      	ldr	r3, [pc, #248]	; (800466c <_dtoa_r+0x8ac>)
 8004572:	f004 f8a3 	bl	80086bc <__aeabi_dmul>
 8004576:	2200      	movs	r2, #0
 8004578:	4b3c      	ldr	r3, [pc, #240]	; (800466c <_dtoa_r+0x8ac>)
 800457a:	4682      	mov	sl, r0
 800457c:	468b      	mov	fp, r1
 800457e:	4630      	mov	r0, r6
 8004580:	4639      	mov	r1, r7
 8004582:	f004 f89b 	bl	80086bc <__aeabi_dmul>
 8004586:	460f      	mov	r7, r1
 8004588:	4606      	mov	r6, r0
 800458a:	f004 fb47 	bl	8008c1c <__aeabi_d2iz>
 800458e:	4604      	mov	r4, r0
 8004590:	f004 f82e 	bl	80085f0 <__aeabi_i2d>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4630      	mov	r0, r6
 800459a:	4639      	mov	r1, r7
 800459c:	f003 feda 	bl	8008354 <__aeabi_dsub>
 80045a0:	3430      	adds	r4, #48	; 0x30
 80045a2:	b2e4      	uxtb	r4, r4
 80045a4:	4652      	mov	r2, sl
 80045a6:	465b      	mov	r3, fp
 80045a8:	f805 4b01 	strb.w	r4, [r5], #1
 80045ac:	4606      	mov	r6, r0
 80045ae:	460f      	mov	r7, r1
 80045b0:	f004 faf6 	bl	8008ba0 <__aeabi_dcmplt>
 80045b4:	4632      	mov	r2, r6
 80045b6:	463b      	mov	r3, r7
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d0c8      	beq.n	800454e <_dtoa_r+0x78e>
 80045bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80045be:	9304      	str	r3, [sp, #16]
 80045c0:	e5c5      	b.n	800414e <_dtoa_r+0x38e>
 80045c2:	2300      	movs	r3, #0
 80045c4:	9309      	str	r3, [sp, #36]	; 0x24
 80045c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f340 8180 	ble.w	80048ce <_dtoa_r+0xb0e>
 80045ce:	461e      	mov	r6, r3
 80045d0:	461c      	mov	r4, r3
 80045d2:	930c      	str	r3, [sp, #48]	; 0x30
 80045d4:	9306      	str	r3, [sp, #24]
 80045d6:	e6fa      	b.n	80043ce <_dtoa_r+0x60e>
 80045d8:	2301      	movs	r3, #1
 80045da:	9309      	str	r3, [sp, #36]	; 0x24
 80045dc:	e7f3      	b.n	80045c6 <_dtoa_r+0x806>
 80045de:	9408      	str	r4, [sp, #32]
 80045e0:	9a02      	ldr	r2, [sp, #8]
 80045e2:	9908      	ldr	r1, [sp, #32]
 80045e4:	4648      	mov	r0, r9
 80045e6:	f001 fc7b 	bl	8005ee0 <__pow5mult>
 80045ea:	4604      	mov	r4, r0
 80045ec:	e60e      	b.n	800420c <_dtoa_r+0x44c>
 80045ee:	9b06      	ldr	r3, [sp, #24]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f73f acfe 	bgt.w	8003ff2 <_dtoa_r+0x232>
 80045f6:	f040 814f 	bne.w	8004898 <_dtoa_r+0xad8>
 80045fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045fe:	2200      	movs	r2, #0
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <_dtoa_r+0x8b0>)
 8004602:	f004 f85b 	bl	80086bc <__aeabi_dmul>
 8004606:	465b      	mov	r3, fp
 8004608:	4652      	mov	r2, sl
 800460a:	f004 fadd 	bl	8008bc8 <__aeabi_dcmpge>
 800460e:	9b06      	ldr	r3, [sp, #24]
 8004610:	9302      	str	r3, [sp, #8]
 8004612:	461e      	mov	r6, r3
 8004614:	2800      	cmp	r0, #0
 8004616:	f000 80ea 	beq.w	80047ee <_dtoa_r+0xa2e>
 800461a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800461c:	9d07      	ldr	r5, [sp, #28]
 800461e:	43db      	mvns	r3, r3
 8004620:	9304      	str	r3, [sp, #16]
 8004622:	9902      	ldr	r1, [sp, #8]
 8004624:	4648      	mov	r0, r9
 8004626:	f001 fb21 	bl	8005c6c <_Bfree>
 800462a:	2e00      	cmp	r6, #0
 800462c:	f43f ad8f 	beq.w	800414e <_dtoa_r+0x38e>
 8004630:	e689      	b.n	8004346 <_dtoa_r+0x586>
 8004632:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004634:	2a00      	cmp	r2, #0
 8004636:	f000 8238 	beq.w	8004aaa <_dtoa_r+0xcea>
 800463a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800463e:	9f02      	ldr	r7, [sp, #8]
 8004640:	9d05      	ldr	r5, [sp, #20]
 8004642:	e5ac      	b.n	800419e <_dtoa_r+0x3de>
 8004644:	201c      	movs	r0, #28
 8004646:	e60a      	b.n	800425e <_dtoa_r+0x49e>
 8004648:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800464a:	2b01      	cmp	r3, #1
 800464c:	f340 8280 	ble.w	8004b50 <_dtoa_r+0xd90>
 8004650:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004652:	2001      	movs	r0, #1
 8004654:	e5f7      	b.n	8004246 <_dtoa_r+0x486>
 8004656:	bf00      	nop
 8004658:	080091c0 	.word	0x080091c0
 800465c:	08009288 	.word	0x08009288
 8004660:	3ff00000 	.word	0x3ff00000
 8004664:	401c0000 	.word	0x401c0000
 8004668:	3fe00000 	.word	0x3fe00000
 800466c:	40240000 	.word	0x40240000
 8004670:	40140000 	.word	0x40140000
 8004674:	4631      	mov	r1, r6
 8004676:	2300      	movs	r3, #0
 8004678:	220a      	movs	r2, #10
 800467a:	4648      	mov	r0, r9
 800467c:	f001 fb00 	bl	8005c80 <__multadd>
 8004680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004682:	2b00      	cmp	r3, #0
 8004684:	4606      	mov	r6, r0
 8004686:	f340 828d 	ble.w	8004ba4 <_dtoa_r+0xde4>
 800468a:	9306      	str	r3, [sp, #24]
 800468c:	2d00      	cmp	r5, #0
 800468e:	dd05      	ble.n	800469c <_dtoa_r+0x8dc>
 8004690:	4631      	mov	r1, r6
 8004692:	462a      	mov	r2, r5
 8004694:	4648      	mov	r0, r9
 8004696:	f001 fc73 	bl	8005f80 <__lshift>
 800469a:	4606      	mov	r6, r0
 800469c:	2f00      	cmp	r7, #0
 800469e:	f040 817c 	bne.w	800499a <_dtoa_r+0xbda>
 80046a2:	46b0      	mov	r8, r6
 80046a4:	9b06      	ldr	r3, [sp, #24]
 80046a6:	9a07      	ldr	r2, [sp, #28]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	18d3      	adds	r3, r2, r3
 80046ac:	9308      	str	r3, [sp, #32]
 80046ae:	f00a 0301 	and.w	r3, sl, #1
 80046b2:	9309      	str	r3, [sp, #36]	; 0x24
 80046b4:	4617      	mov	r7, r2
 80046b6:	f8dd b008 	ldr.w	fp, [sp, #8]
 80046ba:	4620      	mov	r0, r4
 80046bc:	4659      	mov	r1, fp
 80046be:	f7ff faeb 	bl	8003c98 <quorem>
 80046c2:	4631      	mov	r1, r6
 80046c4:	4605      	mov	r5, r0
 80046c6:	4620      	mov	r0, r4
 80046c8:	f001 fcb2 	bl	8006030 <__mcmp>
 80046cc:	4642      	mov	r2, r8
 80046ce:	4659      	mov	r1, fp
 80046d0:	4682      	mov	sl, r0
 80046d2:	4648      	mov	r0, r9
 80046d4:	f001 fcce 	bl	8006074 <__mdiff>
 80046d8:	68c2      	ldr	r2, [r0, #12]
 80046da:	4683      	mov	fp, r0
 80046dc:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80046e0:	2a00      	cmp	r2, #0
 80046e2:	d149      	bne.n	8004778 <_dtoa_r+0x9b8>
 80046e4:	4601      	mov	r1, r0
 80046e6:	4620      	mov	r0, r4
 80046e8:	9306      	str	r3, [sp, #24]
 80046ea:	f001 fca1 	bl	8006030 <__mcmp>
 80046ee:	4659      	mov	r1, fp
 80046f0:	9005      	str	r0, [sp, #20]
 80046f2:	4648      	mov	r0, r9
 80046f4:	f001 faba 	bl	8005c6c <_Bfree>
 80046f8:	9a05      	ldr	r2, [sp, #20]
 80046fa:	9b06      	ldr	r3, [sp, #24]
 80046fc:	b92a      	cbnz	r2, 800470a <_dtoa_r+0x94a>
 80046fe:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004700:	b919      	cbnz	r1, 800470a <_dtoa_r+0x94a>
 8004702:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004704:	2900      	cmp	r1, #0
 8004706:	f000 8235 	beq.w	8004b74 <_dtoa_r+0xdb4>
 800470a:	f1ba 0f00 	cmp.w	sl, #0
 800470e:	f2c0 80e3 	blt.w	80048d8 <_dtoa_r+0xb18>
 8004712:	d105      	bne.n	8004720 <_dtoa_r+0x960>
 8004714:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004716:	b919      	cbnz	r1, 8004720 <_dtoa_r+0x960>
 8004718:	9909      	ldr	r1, [sp, #36]	; 0x24
 800471a:	2900      	cmp	r1, #0
 800471c:	f000 80dc 	beq.w	80048d8 <_dtoa_r+0xb18>
 8004720:	2a00      	cmp	r2, #0
 8004722:	f300 814e 	bgt.w	80049c2 <_dtoa_r+0xc02>
 8004726:	9a08      	ldr	r2, [sp, #32]
 8004728:	703b      	strb	r3, [r7, #0]
 800472a:	f107 0a01 	add.w	sl, r7, #1
 800472e:	4297      	cmp	r7, r2
 8004730:	4655      	mov	r5, sl
 8004732:	f000 8152 	beq.w	80049da <_dtoa_r+0xc1a>
 8004736:	4621      	mov	r1, r4
 8004738:	2300      	movs	r3, #0
 800473a:	220a      	movs	r2, #10
 800473c:	4648      	mov	r0, r9
 800473e:	f001 fa9f 	bl	8005c80 <__multadd>
 8004742:	4546      	cmp	r6, r8
 8004744:	4604      	mov	r4, r0
 8004746:	4631      	mov	r1, r6
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	f04f 020a 	mov.w	r2, #10
 8004750:	4648      	mov	r0, r9
 8004752:	d00b      	beq.n	800476c <_dtoa_r+0x9ac>
 8004754:	f001 fa94 	bl	8005c80 <__multadd>
 8004758:	4641      	mov	r1, r8
 800475a:	4606      	mov	r6, r0
 800475c:	2300      	movs	r3, #0
 800475e:	220a      	movs	r2, #10
 8004760:	4648      	mov	r0, r9
 8004762:	f001 fa8d 	bl	8005c80 <__multadd>
 8004766:	4657      	mov	r7, sl
 8004768:	4680      	mov	r8, r0
 800476a:	e7a4      	b.n	80046b6 <_dtoa_r+0x8f6>
 800476c:	f001 fa88 	bl	8005c80 <__multadd>
 8004770:	4657      	mov	r7, sl
 8004772:	4606      	mov	r6, r0
 8004774:	4680      	mov	r8, r0
 8004776:	e79e      	b.n	80046b6 <_dtoa_r+0x8f6>
 8004778:	4601      	mov	r1, r0
 800477a:	4648      	mov	r0, r9
 800477c:	9305      	str	r3, [sp, #20]
 800477e:	f001 fa75 	bl	8005c6c <_Bfree>
 8004782:	2201      	movs	r2, #1
 8004784:	9b05      	ldr	r3, [sp, #20]
 8004786:	e7c0      	b.n	800470a <_dtoa_r+0x94a>
 8004788:	9902      	ldr	r1, [sp, #8]
 800478a:	4620      	mov	r0, r4
 800478c:	f001 fc50 	bl	8006030 <__mcmp>
 8004790:	2800      	cmp	r0, #0
 8004792:	f6bf ad7f 	bge.w	8004294 <_dtoa_r+0x4d4>
 8004796:	4621      	mov	r1, r4
 8004798:	9c04      	ldr	r4, [sp, #16]
 800479a:	2300      	movs	r3, #0
 800479c:	3c01      	subs	r4, #1
 800479e:	220a      	movs	r2, #10
 80047a0:	4648      	mov	r0, r9
 80047a2:	9404      	str	r4, [sp, #16]
 80047a4:	f001 fa6c 	bl	8005c80 <__multadd>
 80047a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047aa:	4604      	mov	r4, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f47f af61 	bne.w	8004674 <_dtoa_r+0x8b4>
 80047b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f340 81ed 	ble.w	8004b94 <_dtoa_r+0xdd4>
 80047ba:	9306      	str	r3, [sp, #24]
 80047bc:	e572      	b.n	80042a4 <_dtoa_r+0x4e4>
 80047be:	9c08      	ldr	r4, [sp, #32]
 80047c0:	e524      	b.n	800420c <_dtoa_r+0x44c>
 80047c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	f77f ad69 	ble.w	800429c <_dtoa_r+0x4dc>
 80047ca:	9b06      	ldr	r3, [sp, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f040 819d 	bne.w	8004b0c <_dtoa_r+0xd4c>
 80047d2:	9902      	ldr	r1, [sp, #8]
 80047d4:	2205      	movs	r2, #5
 80047d6:	4648      	mov	r0, r9
 80047d8:	f001 fa52 	bl	8005c80 <__multadd>
 80047dc:	4601      	mov	r1, r0
 80047de:	9002      	str	r0, [sp, #8]
 80047e0:	4620      	mov	r0, r4
 80047e2:	f001 fc25 	bl	8006030 <__mcmp>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	9408      	str	r4, [sp, #32]
 80047ea:	f77f af16 	ble.w	800461a <_dtoa_r+0x85a>
 80047ee:	9a04      	ldr	r2, [sp, #16]
 80047f0:	9907      	ldr	r1, [sp, #28]
 80047f2:	2331      	movs	r3, #49	; 0x31
 80047f4:	3201      	adds	r2, #1
 80047f6:	9204      	str	r2, [sp, #16]
 80047f8:	700b      	strb	r3, [r1, #0]
 80047fa:	1c4d      	adds	r5, r1, #1
 80047fc:	e711      	b.n	8004622 <_dtoa_r+0x862>
 80047fe:	9a04      	ldr	r2, [sp, #16]
 8004800:	3201      	adds	r2, #1
 8004802:	9204      	str	r2, [sp, #16]
 8004804:	9a07      	ldr	r2, [sp, #28]
 8004806:	2331      	movs	r3, #49	; 0x31
 8004808:	7013      	strb	r3, [r2, #0]
 800480a:	e58c      	b.n	8004326 <_dtoa_r+0x566>
 800480c:	2301      	movs	r3, #1
 800480e:	9309      	str	r3, [sp, #36]	; 0x24
 8004810:	e5d2      	b.n	80043b8 <_dtoa_r+0x5f8>
 8004812:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004816:	e49a      	b.n	800414e <_dtoa_r+0x38e>
 8004818:	f1ba 0f00 	cmp.w	sl, #0
 800481c:	f47f ad09 	bne.w	8004232 <_dtoa_r+0x472>
 8004820:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004824:	2b00      	cmp	r3, #0
 8004826:	f040 813e 	bne.w	8004aa6 <_dtoa_r+0xce6>
 800482a:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800482e:	0d3f      	lsrs	r7, r7, #20
 8004830:	053f      	lsls	r7, r7, #20
 8004832:	b12f      	cbz	r7, 8004840 <_dtoa_r+0xa80>
 8004834:	9b05      	ldr	r3, [sp, #20]
 8004836:	3301      	adds	r3, #1
 8004838:	9305      	str	r3, [sp, #20]
 800483a:	f108 0801 	add.w	r8, r8, #1
 800483e:	2701      	movs	r7, #1
 8004840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004842:	2001      	movs	r0, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	f43f acfe 	beq.w	8004246 <_dtoa_r+0x486>
 800484a:	e4f3      	b.n	8004234 <_dtoa_r+0x474>
 800484c:	4650      	mov	r0, sl
 800484e:	f003 fecf 	bl	80085f0 <__aeabi_i2d>
 8004852:	4632      	mov	r2, r6
 8004854:	463b      	mov	r3, r7
 8004856:	f003 ff31 	bl	80086bc <__aeabi_dmul>
 800485a:	2200      	movs	r2, #0
 800485c:	4bbf      	ldr	r3, [pc, #764]	; (8004b5c <_dtoa_r+0xd9c>)
 800485e:	f003 fd7b 	bl	8008358 <__adddf3>
 8004862:	4604      	mov	r4, r0
 8004864:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004868:	4630      	mov	r0, r6
 800486a:	4639      	mov	r1, r7
 800486c:	2200      	movs	r2, #0
 800486e:	4bbc      	ldr	r3, [pc, #752]	; (8004b60 <_dtoa_r+0xda0>)
 8004870:	f003 fd70 	bl	8008354 <__aeabi_dsub>
 8004874:	4622      	mov	r2, r4
 8004876:	462b      	mov	r3, r5
 8004878:	4606      	mov	r6, r0
 800487a:	460f      	mov	r7, r1
 800487c:	f004 f9ae 	bl	8008bdc <__aeabi_dcmpgt>
 8004880:	2800      	cmp	r0, #0
 8004882:	f040 80ae 	bne.w	80049e2 <_dtoa_r+0xc22>
 8004886:	4622      	mov	r2, r4
 8004888:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800488c:	4630      	mov	r0, r6
 800488e:	4639      	mov	r1, r7
 8004890:	f004 f986 	bl	8008ba0 <__aeabi_dcmplt>
 8004894:	2800      	cmp	r0, #0
 8004896:	d04a      	beq.n	800492e <_dtoa_r+0xb6e>
 8004898:	2300      	movs	r3, #0
 800489a:	9302      	str	r3, [sp, #8]
 800489c:	461e      	mov	r6, r3
 800489e:	e6bc      	b.n	800461a <_dtoa_r+0x85a>
 80048a0:	9807      	ldr	r0, [sp, #28]
 80048a2:	f7ff babe 	b.w	8003e22 <_dtoa_r+0x62>
 80048a6:	9b02      	ldr	r3, [sp, #8]
 80048a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048aa:	9702      	str	r7, [sp, #8]
 80048ac:	1afb      	subs	r3, r7, r3
 80048ae:	441a      	add	r2, r3
 80048b0:	920a      	str	r2, [sp, #40]	; 0x28
 80048b2:	2700      	movs	r7, #0
 80048b4:	e46d      	b.n	8004192 <_dtoa_r+0x3d2>
 80048b6:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 80048ba:	f04f 0a02 	mov.w	sl, #2
 80048be:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80048c2:	e5bf      	b.n	8004444 <_dtoa_r+0x684>
 80048c4:	461c      	mov	r4, r3
 80048c6:	2100      	movs	r1, #0
 80048c8:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80048cc:	e590      	b.n	80043f0 <_dtoa_r+0x630>
 80048ce:	2401      	movs	r4, #1
 80048d0:	9423      	str	r4, [sp, #140]	; 0x8c
 80048d2:	940c      	str	r4, [sp, #48]	; 0x30
 80048d4:	9406      	str	r4, [sp, #24]
 80048d6:	e7f6      	b.n	80048c6 <_dtoa_r+0xb06>
 80048d8:	2a00      	cmp	r2, #0
 80048da:	469a      	mov	sl, r3
 80048dc:	dd11      	ble.n	8004902 <_dtoa_r+0xb42>
 80048de:	4621      	mov	r1, r4
 80048e0:	2201      	movs	r2, #1
 80048e2:	4648      	mov	r0, r9
 80048e4:	f001 fb4c 	bl	8005f80 <__lshift>
 80048e8:	9902      	ldr	r1, [sp, #8]
 80048ea:	4604      	mov	r4, r0
 80048ec:	f001 fba0 	bl	8006030 <__mcmp>
 80048f0:	2800      	cmp	r0, #0
 80048f2:	f340 8148 	ble.w	8004b86 <_dtoa_r+0xdc6>
 80048f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80048fa:	f000 8109 	beq.w	8004b10 <_dtoa_r+0xd50>
 80048fe:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 8004902:	46b3      	mov	fp, r6
 8004904:	f887 a000 	strb.w	sl, [r7]
 8004908:	1c7d      	adds	r5, r7, #1
 800490a:	4646      	mov	r6, r8
 800490c:	9408      	str	r4, [sp, #32]
 800490e:	e50a      	b.n	8004326 <_dtoa_r+0x566>
 8004910:	d104      	bne.n	800491c <_dtoa_r+0xb5c>
 8004912:	f01a 0f01 	tst.w	sl, #1
 8004916:	d001      	beq.n	800491c <_dtoa_r+0xb5c>
 8004918:	e4f5      	b.n	8004306 <_dtoa_r+0x546>
 800491a:	4615      	mov	r5, r2
 800491c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004920:	2b30      	cmp	r3, #48	; 0x30
 8004922:	f105 32ff 	add.w	r2, r5, #4294967295
 8004926:	d0f8      	beq.n	800491a <_dtoa_r+0xb5a>
 8004928:	e4fd      	b.n	8004326 <_dtoa_r+0x566>
 800492a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800492e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8004932:	f7ff bb4b 	b.w	8003fcc <_dtoa_r+0x20c>
 8004936:	9907      	ldr	r1, [sp, #28]
 8004938:	2230      	movs	r2, #48	; 0x30
 800493a:	700a      	strb	r2, [r1, #0]
 800493c:	9a04      	ldr	r2, [sp, #16]
 800493e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8004942:	3201      	adds	r2, #1
 8004944:	9204      	str	r2, [sp, #16]
 8004946:	e400      	b.n	800414a <_dtoa_r+0x38a>
 8004948:	9b04      	ldr	r3, [sp, #16]
 800494a:	425c      	negs	r4, r3
 800494c:	2c00      	cmp	r4, #0
 800494e:	f000 80b3 	beq.w	8004ab8 <_dtoa_r+0xcf8>
 8004952:	4b84      	ldr	r3, [pc, #528]	; (8004b64 <_dtoa_r+0xda4>)
 8004954:	f004 020f 	and.w	r2, r4, #15
 8004958:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004964:	f003 feaa 	bl	80086bc <__aeabi_dmul>
 8004968:	1124      	asrs	r4, r4, #4
 800496a:	4606      	mov	r6, r0
 800496c:	460f      	mov	r7, r1
 800496e:	f000 8116 	beq.w	8004b9e <_dtoa_r+0xdde>
 8004972:	4d7d      	ldr	r5, [pc, #500]	; (8004b68 <_dtoa_r+0xda8>)
 8004974:	f04f 0a02 	mov.w	sl, #2
 8004978:	07e2      	lsls	r2, r4, #31
 800497a:	d509      	bpl.n	8004990 <_dtoa_r+0xbd0>
 800497c:	4630      	mov	r0, r6
 800497e:	4639      	mov	r1, r7
 8004980:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004984:	f003 fe9a 	bl	80086bc <__aeabi_dmul>
 8004988:	f10a 0a01 	add.w	sl, sl, #1
 800498c:	4606      	mov	r6, r0
 800498e:	460f      	mov	r7, r1
 8004990:	1064      	asrs	r4, r4, #1
 8004992:	f105 0508 	add.w	r5, r5, #8
 8004996:	d1ef      	bne.n	8004978 <_dtoa_r+0xbb8>
 8004998:	e56e      	b.n	8004478 <_dtoa_r+0x6b8>
 800499a:	6871      	ldr	r1, [r6, #4]
 800499c:	4648      	mov	r0, r9
 800499e:	f001 f93f 	bl	8005c20 <_Balloc>
 80049a2:	6933      	ldr	r3, [r6, #16]
 80049a4:	1c9a      	adds	r2, r3, #2
 80049a6:	4605      	mov	r5, r0
 80049a8:	0092      	lsls	r2, r2, #2
 80049aa:	f106 010c 	add.w	r1, r6, #12
 80049ae:	300c      	adds	r0, #12
 80049b0:	f7fd fb52 	bl	8002058 <memcpy>
 80049b4:	4629      	mov	r1, r5
 80049b6:	2201      	movs	r2, #1
 80049b8:	4648      	mov	r0, r9
 80049ba:	f001 fae1 	bl	8005f80 <__lshift>
 80049be:	4680      	mov	r8, r0
 80049c0:	e670      	b.n	80046a4 <_dtoa_r+0x8e4>
 80049c2:	2b39      	cmp	r3, #57	; 0x39
 80049c4:	f000 80a4 	beq.w	8004b10 <_dtoa_r+0xd50>
 80049c8:	f103 0a01 	add.w	sl, r3, #1
 80049cc:	46b3      	mov	fp, r6
 80049ce:	f887 a000 	strb.w	sl, [r7]
 80049d2:	1c7d      	adds	r5, r7, #1
 80049d4:	4646      	mov	r6, r8
 80049d6:	9408      	str	r4, [sp, #32]
 80049d8:	e4a5      	b.n	8004326 <_dtoa_r+0x566>
 80049da:	46b3      	mov	fp, r6
 80049dc:	469a      	mov	sl, r3
 80049de:	4646      	mov	r6, r8
 80049e0:	e485      	b.n	80042ee <_dtoa_r+0x52e>
 80049e2:	2300      	movs	r3, #0
 80049e4:	9302      	str	r3, [sp, #8]
 80049e6:	461e      	mov	r6, r3
 80049e8:	e701      	b.n	80047ee <_dtoa_r+0xa2e>
 80049ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049ec:	495d      	ldr	r1, [pc, #372]	; (8004b64 <_dtoa_r+0xda4>)
 80049ee:	1e5a      	subs	r2, r3, #1
 80049f0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80049f4:	462b      	mov	r3, r5
 80049f6:	9215      	str	r2, [sp, #84]	; 0x54
 80049f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049fc:	4622      	mov	r2, r4
 80049fe:	f003 fe5d 	bl	80086bc <__aeabi_dmul>
 8004a02:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8004a06:	4639      	mov	r1, r7
 8004a08:	4630      	mov	r0, r6
 8004a0a:	f004 f907 	bl	8008c1c <__aeabi_d2iz>
 8004a0e:	4604      	mov	r4, r0
 8004a10:	f003 fdee 	bl	80085f0 <__aeabi_i2d>
 8004a14:	460b      	mov	r3, r1
 8004a16:	4602      	mov	r2, r0
 8004a18:	4639      	mov	r1, r7
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	f003 fc9a 	bl	8008354 <__aeabi_dsub>
 8004a20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a22:	460f      	mov	r7, r1
 8004a24:	9907      	ldr	r1, [sp, #28]
 8004a26:	3430      	adds	r4, #48	; 0x30
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	4606      	mov	r6, r0
 8004a2c:	700c      	strb	r4, [r1, #0]
 8004a2e:	f101 0501 	add.w	r5, r1, #1
 8004a32:	d020      	beq.n	8004a76 <_dtoa_r+0xcb6>
 8004a34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a36:	9a07      	ldr	r2, [sp, #28]
 8004a38:	4413      	add	r3, r2
 8004a3a:	469a      	mov	sl, r3
 8004a3c:	46ab      	mov	fp, r5
 8004a3e:	2200      	movs	r2, #0
 8004a40:	4b4a      	ldr	r3, [pc, #296]	; (8004b6c <_dtoa_r+0xdac>)
 8004a42:	4630      	mov	r0, r6
 8004a44:	4639      	mov	r1, r7
 8004a46:	f003 fe39 	bl	80086bc <__aeabi_dmul>
 8004a4a:	460f      	mov	r7, r1
 8004a4c:	4606      	mov	r6, r0
 8004a4e:	f004 f8e5 	bl	8008c1c <__aeabi_d2iz>
 8004a52:	4604      	mov	r4, r0
 8004a54:	f003 fdcc 	bl	80085f0 <__aeabi_i2d>
 8004a58:	3430      	adds	r4, #48	; 0x30
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4630      	mov	r0, r6
 8004a60:	4639      	mov	r1, r7
 8004a62:	f003 fc77 	bl	8008354 <__aeabi_dsub>
 8004a66:	f80b 4b01 	strb.w	r4, [fp], #1
 8004a6a:	45da      	cmp	sl, fp
 8004a6c:	4606      	mov	r6, r0
 8004a6e:	460f      	mov	r7, r1
 8004a70:	d1e5      	bne.n	8004a3e <_dtoa_r+0xc7e>
 8004a72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004a74:	441d      	add	r5, r3
 8004a76:	2200      	movs	r2, #0
 8004a78:	4b3d      	ldr	r3, [pc, #244]	; (8004b70 <_dtoa_r+0xdb0>)
 8004a7a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004a7e:	f003 fc6b 	bl	8008358 <__adddf3>
 8004a82:	4632      	mov	r2, r6
 8004a84:	463b      	mov	r3, r7
 8004a86:	f004 f88b 	bl	8008ba0 <__aeabi_dcmplt>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d048      	beq.n	8004b20 <_dtoa_r+0xd60>
 8004a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a90:	9304      	str	r3, [sp, #16]
 8004a92:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8004a96:	f7ff bb4c 	b.w	8004132 <_dtoa_r+0x372>
 8004a9a:	9b05      	ldr	r3, [sp, #20]
 8004a9c:	9a06      	ldr	r2, [sp, #24]
 8004a9e:	1a9d      	subs	r5, r3, r2
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f7ff bb7c 	b.w	800419e <_dtoa_r+0x3de>
 8004aa6:	2700      	movs	r7, #0
 8004aa8:	e6ca      	b.n	8004840 <_dtoa_r+0xa80>
 8004aaa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004aac:	9f02      	ldr	r7, [sp, #8]
 8004aae:	9d05      	ldr	r5, [sp, #20]
 8004ab0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004ab4:	f7ff bb73 	b.w	800419e <_dtoa_r+0x3de>
 8004ab8:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8004abc:	f04f 0a02 	mov.w	sl, #2
 8004ac0:	e4da      	b.n	8004478 <_dtoa_r+0x6b8>
 8004ac2:	9b06      	ldr	r3, [sp, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f43f aec1 	beq.w	800484c <_dtoa_r+0xa8c>
 8004aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f77f af2e 	ble.w	800492e <_dtoa_r+0xb6e>
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	4b25      	ldr	r3, [pc, #148]	; (8004b6c <_dtoa_r+0xdac>)
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	4639      	mov	r1, r7
 8004ada:	f003 fdef 	bl	80086bc <__aeabi_dmul>
 8004ade:	4606      	mov	r6, r0
 8004ae0:	460f      	mov	r7, r1
 8004ae2:	f10a 0001 	add.w	r0, sl, #1
 8004ae6:	f003 fd83 	bl	80085f0 <__aeabi_i2d>
 8004aea:	4632      	mov	r2, r6
 8004aec:	463b      	mov	r3, r7
 8004aee:	f003 fde5 	bl	80086bc <__aeabi_dmul>
 8004af2:	2200      	movs	r2, #0
 8004af4:	4b19      	ldr	r3, [pc, #100]	; (8004b5c <_dtoa_r+0xd9c>)
 8004af6:	f003 fc2f 	bl	8008358 <__adddf3>
 8004afa:	9a04      	ldr	r2, [sp, #16]
 8004afc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004afe:	9310      	str	r3, [sp, #64]	; 0x40
 8004b00:	3a01      	subs	r2, #1
 8004b02:	4604      	mov	r4, r0
 8004b04:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004b08:	9214      	str	r2, [sp, #80]	; 0x50
 8004b0a:	e4d6      	b.n	80044ba <_dtoa_r+0x6fa>
 8004b0c:	9408      	str	r4, [sp, #32]
 8004b0e:	e584      	b.n	800461a <_dtoa_r+0x85a>
 8004b10:	2239      	movs	r2, #57	; 0x39
 8004b12:	46b3      	mov	fp, r6
 8004b14:	9408      	str	r4, [sp, #32]
 8004b16:	4646      	mov	r6, r8
 8004b18:	703a      	strb	r2, [r7, #0]
 8004b1a:	1c7d      	adds	r5, r7, #1
 8004b1c:	f7ff bbf5 	b.w	800430a <_dtoa_r+0x54a>
 8004b20:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8004b24:	2000      	movs	r0, #0
 8004b26:	4912      	ldr	r1, [pc, #72]	; (8004b70 <_dtoa_r+0xdb0>)
 8004b28:	f003 fc14 	bl	8008354 <__aeabi_dsub>
 8004b2c:	4632      	mov	r2, r6
 8004b2e:	463b      	mov	r3, r7
 8004b30:	f004 f854 	bl	8008bdc <__aeabi_dcmpgt>
 8004b34:	b908      	cbnz	r0, 8004b3a <_dtoa_r+0xd7a>
 8004b36:	e6fa      	b.n	800492e <_dtoa_r+0xb6e>
 8004b38:	4615      	mov	r5, r2
 8004b3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004b3e:	2b30      	cmp	r3, #48	; 0x30
 8004b40:	f105 32ff 	add.w	r2, r5, #4294967295
 8004b44:	d0f8      	beq.n	8004b38 <_dtoa_r+0xd78>
 8004b46:	e539      	b.n	80045bc <_dtoa_r+0x7fc>
 8004b48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b4a:	9304      	str	r3, [sp, #16]
 8004b4c:	f7ff baf1 	b.w	8004132 <_dtoa_r+0x372>
 8004b50:	f1ba 0f00 	cmp.w	sl, #0
 8004b54:	f47f ad7c 	bne.w	8004650 <_dtoa_r+0x890>
 8004b58:	e662      	b.n	8004820 <_dtoa_r+0xa60>
 8004b5a:	bf00      	nop
 8004b5c:	401c0000 	.word	0x401c0000
 8004b60:	40140000 	.word	0x40140000
 8004b64:	080091c0 	.word	0x080091c0
 8004b68:	08009288 	.word	0x08009288
 8004b6c:	40240000 	.word	0x40240000
 8004b70:	3fe00000 	.word	0x3fe00000
 8004b74:	2b39      	cmp	r3, #57	; 0x39
 8004b76:	46d3      	mov	fp, sl
 8004b78:	469a      	mov	sl, r3
 8004b7a:	d0c9      	beq.n	8004b10 <_dtoa_r+0xd50>
 8004b7c:	f1bb 0f00 	cmp.w	fp, #0
 8004b80:	f73f aebd 	bgt.w	80048fe <_dtoa_r+0xb3e>
 8004b84:	e6bd      	b.n	8004902 <_dtoa_r+0xb42>
 8004b86:	f47f aebc 	bne.w	8004902 <_dtoa_r+0xb42>
 8004b8a:	f01a 0f01 	tst.w	sl, #1
 8004b8e:	f43f aeb8 	beq.w	8004902 <_dtoa_r+0xb42>
 8004b92:	e6b0      	b.n	80048f6 <_dtoa_r+0xb36>
 8004b94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	dc25      	bgt.n	8004be6 <_dtoa_r+0xe26>
 8004b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b9c:	e60d      	b.n	80047ba <_dtoa_r+0x9fa>
 8004b9e:	f04f 0a02 	mov.w	sl, #2
 8004ba2:	e469      	b.n	8004478 <_dtoa_r+0x6b8>
 8004ba4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	dc1d      	bgt.n	8004be6 <_dtoa_r+0xe26>
 8004baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bac:	e56d      	b.n	800468a <_dtoa_r+0x8ca>
 8004bae:	2400      	movs	r4, #0
 8004bb0:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4648      	mov	r0, r9
 8004bb8:	f001 f832 	bl	8005c20 <_Balloc>
 8004bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc0:	9306      	str	r3, [sp, #24]
 8004bc2:	930c      	str	r3, [sp, #48]	; 0x30
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	9007      	str	r0, [sp, #28]
 8004bc8:	9423      	str	r4, [sp, #140]	; 0x8c
 8004bca:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8004bce:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd0:	f7ff b9fc 	b.w	8003fcc <_dtoa_r+0x20c>
 8004bd4:	f43f ab48 	beq.w	8004268 <_dtoa_r+0x4a8>
 8004bd8:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8004bdc:	f7ff bb3f 	b.w	800425e <_dtoa_r+0x49e>
 8004be0:	2501      	movs	r5, #1
 8004be2:	f7ff b9bd 	b.w	8003f60 <_dtoa_r+0x1a0>
 8004be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004be8:	9306      	str	r3, [sp, #24]
 8004bea:	e5ee      	b.n	80047ca <_dtoa_r+0xa0a>

08004bec <__sflush_r>:
 8004bec:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf6:	460d      	mov	r5, r1
 8004bf8:	0711      	lsls	r1, r2, #28
 8004bfa:	4680      	mov	r8, r0
 8004bfc:	d43c      	bmi.n	8004c78 <__sflush_r+0x8c>
 8004bfe:	686a      	ldr	r2, [r5, #4]
 8004c00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c04:	2a00      	cmp	r2, #0
 8004c06:	81ab      	strh	r3, [r5, #12]
 8004c08:	dd73      	ble.n	8004cf2 <__sflush_r+0x106>
 8004c0a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8004c0c:	2c00      	cmp	r4, #0
 8004c0e:	d04b      	beq.n	8004ca8 <__sflush_r+0xbc>
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c16:	2100      	movs	r1, #0
 8004c18:	b292      	uxth	r2, r2
 8004c1a:	f8d8 6000 	ldr.w	r6, [r8]
 8004c1e:	f8c8 1000 	str.w	r1, [r8]
 8004c22:	2a00      	cmp	r2, #0
 8004c24:	d069      	beq.n	8004cfa <__sflush_r+0x10e>
 8004c26:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8004c28:	075f      	lsls	r7, r3, #29
 8004c2a:	d505      	bpl.n	8004c38 <__sflush_r+0x4c>
 8004c2c:	6869      	ldr	r1, [r5, #4]
 8004c2e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004c30:	1a52      	subs	r2, r2, r1
 8004c32:	b10b      	cbz	r3, 8004c38 <__sflush_r+0x4c>
 8004c34:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004c36:	1ad2      	subs	r2, r2, r3
 8004c38:	2300      	movs	r3, #0
 8004c3a:	69e9      	ldr	r1, [r5, #28]
 8004c3c:	4640      	mov	r0, r8
 8004c3e:	47a0      	blx	r4
 8004c40:	1c44      	adds	r4, r0, #1
 8004c42:	d03c      	beq.n	8004cbe <__sflush_r+0xd2>
 8004c44:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8004c48:	692a      	ldr	r2, [r5, #16]
 8004c4a:	602a      	str	r2, [r5, #0]
 8004c4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c50:	2200      	movs	r2, #0
 8004c52:	81ab      	strh	r3, [r5, #12]
 8004c54:	04db      	lsls	r3, r3, #19
 8004c56:	606a      	str	r2, [r5, #4]
 8004c58:	d449      	bmi.n	8004cee <__sflush_r+0x102>
 8004c5a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004c5c:	f8c8 6000 	str.w	r6, [r8]
 8004c60:	b311      	cbz	r1, 8004ca8 <__sflush_r+0xbc>
 8004c62:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8004c66:	4299      	cmp	r1, r3
 8004c68:	d002      	beq.n	8004c70 <__sflush_r+0x84>
 8004c6a:	4640      	mov	r0, r8
 8004c6c:	f000 f94e 	bl	8004f0c <_free_r>
 8004c70:	2000      	movs	r0, #0
 8004c72:	6328      	str	r0, [r5, #48]	; 0x30
 8004c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c78:	692e      	ldr	r6, [r5, #16]
 8004c7a:	b1ae      	cbz	r6, 8004ca8 <__sflush_r+0xbc>
 8004c7c:	682c      	ldr	r4, [r5, #0]
 8004c7e:	602e      	str	r6, [r5, #0]
 8004c80:	0790      	lsls	r0, r2, #30
 8004c82:	bf0c      	ite	eq
 8004c84:	696b      	ldreq	r3, [r5, #20]
 8004c86:	2300      	movne	r3, #0
 8004c88:	1ba4      	subs	r4, r4, r6
 8004c8a:	60ab      	str	r3, [r5, #8]
 8004c8c:	e00a      	b.n	8004ca4 <__sflush_r+0xb8>
 8004c8e:	4623      	mov	r3, r4
 8004c90:	4632      	mov	r2, r6
 8004c92:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8004c94:	69e9      	ldr	r1, [r5, #28]
 8004c96:	4640      	mov	r0, r8
 8004c98:	47b8      	blx	r7
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	eba4 0400 	sub.w	r4, r4, r0
 8004ca0:	4406      	add	r6, r0
 8004ca2:	dd04      	ble.n	8004cae <__sflush_r+0xc2>
 8004ca4:	2c00      	cmp	r4, #0
 8004ca6:	dcf2      	bgt.n	8004c8e <__sflush_r+0xa2>
 8004ca8:	2000      	movs	r0, #0
 8004caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cae:	89ab      	ldrh	r3, [r5, #12]
 8004cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cb4:	81ab      	strh	r3, [r5, #12]
 8004cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cbe:	f8d8 2000 	ldr.w	r2, [r8]
 8004cc2:	2a1d      	cmp	r2, #29
 8004cc4:	d8f3      	bhi.n	8004cae <__sflush_r+0xc2>
 8004cc6:	4b1a      	ldr	r3, [pc, #104]	; (8004d30 <__sflush_r+0x144>)
 8004cc8:	40d3      	lsrs	r3, r2
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	f083 0401 	eor.w	r4, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0eb      	beq.n	8004cae <__sflush_r+0xc2>
 8004cd6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8004cda:	6929      	ldr	r1, [r5, #16]
 8004cdc:	6029      	str	r1, [r5, #0]
 8004cde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ce2:	04d9      	lsls	r1, r3, #19
 8004ce4:	606c      	str	r4, [r5, #4]
 8004ce6:	81ab      	strh	r3, [r5, #12]
 8004ce8:	d5b7      	bpl.n	8004c5a <__sflush_r+0x6e>
 8004cea:	2a00      	cmp	r2, #0
 8004cec:	d1b5      	bne.n	8004c5a <__sflush_r+0x6e>
 8004cee:	6528      	str	r0, [r5, #80]	; 0x50
 8004cf0:	e7b3      	b.n	8004c5a <__sflush_r+0x6e>
 8004cf2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004cf4:	2a00      	cmp	r2, #0
 8004cf6:	dc88      	bgt.n	8004c0a <__sflush_r+0x1e>
 8004cf8:	e7d6      	b.n	8004ca8 <__sflush_r+0xbc>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	69e9      	ldr	r1, [r5, #28]
 8004cfe:	4640      	mov	r0, r8
 8004d00:	47a0      	blx	r4
 8004d02:	1c43      	adds	r3, r0, #1
 8004d04:	4602      	mov	r2, r0
 8004d06:	d002      	beq.n	8004d0e <__sflush_r+0x122>
 8004d08:	89ab      	ldrh	r3, [r5, #12]
 8004d0a:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8004d0c:	e78c      	b.n	8004c28 <__sflush_r+0x3c>
 8004d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f8      	beq.n	8004d08 <__sflush_r+0x11c>
 8004d16:	2b1d      	cmp	r3, #29
 8004d18:	d001      	beq.n	8004d1e <__sflush_r+0x132>
 8004d1a:	2b16      	cmp	r3, #22
 8004d1c:	d102      	bne.n	8004d24 <__sflush_r+0x138>
 8004d1e:	f8c8 6000 	str.w	r6, [r8]
 8004d22:	e7c1      	b.n	8004ca8 <__sflush_r+0xbc>
 8004d24:	89ab      	ldrh	r3, [r5, #12]
 8004d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d2a:	81ab      	strh	r3, [r5, #12]
 8004d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d30:	20400001 	.word	0x20400001

08004d34 <_fflush_r>:
 8004d34:	b510      	push	{r4, lr}
 8004d36:	4604      	mov	r4, r0
 8004d38:	b082      	sub	sp, #8
 8004d3a:	b108      	cbz	r0, 8004d40 <_fflush_r+0xc>
 8004d3c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004d3e:	b153      	cbz	r3, 8004d56 <_fflush_r+0x22>
 8004d40:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8004d44:	b908      	cbnz	r0, 8004d4a <_fflush_r+0x16>
 8004d46:	b002      	add	sp, #8
 8004d48:	bd10      	pop	{r4, pc}
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	b002      	add	sp, #8
 8004d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d52:	f7ff bf4b 	b.w	8004bec <__sflush_r>
 8004d56:	9101      	str	r1, [sp, #4]
 8004d58:	f000 f880 	bl	8004e5c <__sinit>
 8004d5c:	9901      	ldr	r1, [sp, #4]
 8004d5e:	e7ef      	b.n	8004d40 <_fflush_r+0xc>

08004d60 <_cleanup_r>:
 8004d60:	4901      	ldr	r1, [pc, #4]	; (8004d68 <_cleanup_r+0x8>)
 8004d62:	f000 bb3d 	b.w	80053e0 <_fwalk_reent>
 8004d66:	bf00      	nop
 8004d68:	08007f01 	.word	0x08007f01

08004d6c <__sinit.part.1>:
 8004d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d70:	4b35      	ldr	r3, [pc, #212]	; (8004e48 <__sinit.part.1+0xdc>)
 8004d72:	6845      	ldr	r5, [r0, #4]
 8004d74:	63c3      	str	r3, [r0, #60]	; 0x3c
 8004d76:	2400      	movs	r4, #0
 8004d78:	4607      	mov	r7, r0
 8004d7a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8004d7e:	2304      	movs	r3, #4
 8004d80:	2103      	movs	r1, #3
 8004d82:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8004d86:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8004d8a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8004d8e:	b083      	sub	sp, #12
 8004d90:	602c      	str	r4, [r5, #0]
 8004d92:	606c      	str	r4, [r5, #4]
 8004d94:	60ac      	str	r4, [r5, #8]
 8004d96:	666c      	str	r4, [r5, #100]	; 0x64
 8004d98:	81ec      	strh	r4, [r5, #14]
 8004d9a:	612c      	str	r4, [r5, #16]
 8004d9c:	616c      	str	r4, [r5, #20]
 8004d9e:	61ac      	str	r4, [r5, #24]
 8004da0:	81ab      	strh	r3, [r5, #12]
 8004da2:	4621      	mov	r1, r4
 8004da4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8004da8:	2208      	movs	r2, #8
 8004daa:	f7fd f9ef 	bl	800218c <memset>
 8004dae:	68be      	ldr	r6, [r7, #8]
 8004db0:	f8df b098 	ldr.w	fp, [pc, #152]	; 8004e4c <__sinit.part.1+0xe0>
 8004db4:	f8df a098 	ldr.w	sl, [pc, #152]	; 8004e50 <__sinit.part.1+0xe4>
 8004db8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004e54 <__sinit.part.1+0xe8>
 8004dbc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8004e58 <__sinit.part.1+0xec>
 8004dc0:	f8c5 b020 	str.w	fp, [r5, #32]
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	2209      	movs	r2, #9
 8004dc8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8004dcc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8004dd0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8004dd4:	61ed      	str	r5, [r5, #28]
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	81f3      	strh	r3, [r6, #14]
 8004dda:	81b2      	strh	r2, [r6, #12]
 8004ddc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8004de0:	6034      	str	r4, [r6, #0]
 8004de2:	6074      	str	r4, [r6, #4]
 8004de4:	60b4      	str	r4, [r6, #8]
 8004de6:	6674      	str	r4, [r6, #100]	; 0x64
 8004de8:	6134      	str	r4, [r6, #16]
 8004dea:	6174      	str	r4, [r6, #20]
 8004dec:	61b4      	str	r4, [r6, #24]
 8004dee:	2208      	movs	r2, #8
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	f7fd f9cb 	bl	800218c <memset>
 8004df6:	68fd      	ldr	r5, [r7, #12]
 8004df8:	61f6      	str	r6, [r6, #28]
 8004dfa:	2012      	movs	r0, #18
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	f8c6 b020 	str.w	fp, [r6, #32]
 8004e02:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8004e06:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8004e0a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8004e0e:	4621      	mov	r1, r4
 8004e10:	81a8      	strh	r0, [r5, #12]
 8004e12:	81ea      	strh	r2, [r5, #14]
 8004e14:	602c      	str	r4, [r5, #0]
 8004e16:	606c      	str	r4, [r5, #4]
 8004e18:	60ac      	str	r4, [r5, #8]
 8004e1a:	666c      	str	r4, [r5, #100]	; 0x64
 8004e1c:	612c      	str	r4, [r5, #16]
 8004e1e:	616c      	str	r4, [r5, #20]
 8004e20:	61ac      	str	r4, [r5, #24]
 8004e22:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8004e26:	2208      	movs	r2, #8
 8004e28:	f7fd f9b0 	bl	800218c <memset>
 8004e2c:	9b01      	ldr	r3, [sp, #4]
 8004e2e:	61ed      	str	r5, [r5, #28]
 8004e30:	f8c5 b020 	str.w	fp, [r5, #32]
 8004e34:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8004e38:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8004e3c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8004e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e42:	b003      	add	sp, #12
 8004e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e48:	08004d61 	.word	0x08004d61
 8004e4c:	08006645 	.word	0x08006645
 8004e50:	08006669 	.word	0x08006669
 8004e54:	080066a5 	.word	0x080066a5
 8004e58:	080066c5 	.word	0x080066c5

08004e5c <__sinit>:
 8004e5c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004e5e:	b103      	cbz	r3, 8004e62 <__sinit+0x6>
 8004e60:	4770      	bx	lr
 8004e62:	f7ff bf83 	b.w	8004d6c <__sinit.part.1>
 8004e66:	bf00      	nop

08004e68 <__sfp_lock_acquire>:
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop

08004e6c <__sfp_lock_release>:
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop

08004e70 <_malloc_trim_r>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	4f23      	ldr	r7, [pc, #140]	; (8004f00 <_malloc_trim_r+0x90>)
 8004e74:	460c      	mov	r4, r1
 8004e76:	4606      	mov	r6, r0
 8004e78:	f000 fece 	bl	8005c18 <__malloc_lock>
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	685d      	ldr	r5, [r3, #4]
 8004e80:	f025 0503 	bic.w	r5, r5, #3
 8004e84:	1b29      	subs	r1, r5, r4
 8004e86:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8004e8a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8004e8e:	f021 010f 	bic.w	r1, r1, #15
 8004e92:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8004e96:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004e9a:	db07      	blt.n	8004eac <_malloc_trim_r+0x3c>
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	f001 fbbe 	bl	8006620 <_sbrk_r>
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	442b      	add	r3, r5
 8004ea8:	4298      	cmp	r0, r3
 8004eaa:	d004      	beq.n	8004eb6 <_malloc_trim_r+0x46>
 8004eac:	4630      	mov	r0, r6
 8004eae:	f000 feb5 	bl	8005c1c <__malloc_unlock>
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb6:	4261      	negs	r1, r4
 8004eb8:	4630      	mov	r0, r6
 8004eba:	f001 fbb1 	bl	8006620 <_sbrk_r>
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	d00d      	beq.n	8004ede <_malloc_trim_r+0x6e>
 8004ec2:	4b10      	ldr	r3, [pc, #64]	; (8004f04 <_malloc_trim_r+0x94>)
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	6819      	ldr	r1, [r3, #0]
 8004ec8:	1b2d      	subs	r5, r5, r4
 8004eca:	f045 0501 	orr.w	r5, r5, #1
 8004ece:	4630      	mov	r0, r6
 8004ed0:	1b09      	subs	r1, r1, r4
 8004ed2:	6055      	str	r5, [r2, #4]
 8004ed4:	6019      	str	r1, [r3, #0]
 8004ed6:	f000 fea1 	bl	8005c1c <__malloc_unlock>
 8004eda:	2001      	movs	r0, #1
 8004edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f001 fb9d 	bl	8006620 <_sbrk_r>
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	1a83      	subs	r3, r0, r2
 8004eea:	2b0f      	cmp	r3, #15
 8004eec:	ddde      	ble.n	8004eac <_malloc_trim_r+0x3c>
 8004eee:	4c06      	ldr	r4, [pc, #24]	; (8004f08 <_malloc_trim_r+0x98>)
 8004ef0:	4904      	ldr	r1, [pc, #16]	; (8004f04 <_malloc_trim_r+0x94>)
 8004ef2:	6824      	ldr	r4, [r4, #0]
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	1b00      	subs	r0, r0, r4
 8004efa:	6053      	str	r3, [r2, #4]
 8004efc:	6008      	str	r0, [r1, #0]
 8004efe:	e7d5      	b.n	8004eac <_malloc_trim_r+0x3c>
 8004f00:	20000464 	.word	0x20000464
 8004f04:	20000a50 	.word	0x20000a50
 8004f08:	20000870 	.word	0x20000870

08004f0c <_free_r>:
 8004f0c:	2900      	cmp	r1, #0
 8004f0e:	d045      	beq.n	8004f9c <_free_r+0x90>
 8004f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f14:	460d      	mov	r5, r1
 8004f16:	4680      	mov	r8, r0
 8004f18:	f000 fe7e 	bl	8005c18 <__malloc_lock>
 8004f1c:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8004f20:	496a      	ldr	r1, [pc, #424]	; (80050cc <_free_r+0x1c0>)
 8004f22:	f027 0301 	bic.w	r3, r7, #1
 8004f26:	f1a5 0408 	sub.w	r4, r5, #8
 8004f2a:	18e2      	adds	r2, r4, r3
 8004f2c:	688e      	ldr	r6, [r1, #8]
 8004f2e:	6850      	ldr	r0, [r2, #4]
 8004f30:	42b2      	cmp	r2, r6
 8004f32:	f020 0003 	bic.w	r0, r0, #3
 8004f36:	d062      	beq.n	8004ffe <_free_r+0xf2>
 8004f38:	07fe      	lsls	r6, r7, #31
 8004f3a:	6050      	str	r0, [r2, #4]
 8004f3c:	d40b      	bmi.n	8004f56 <_free_r+0x4a>
 8004f3e:	f855 7c08 	ldr.w	r7, [r5, #-8]
 8004f42:	1be4      	subs	r4, r4, r7
 8004f44:	f101 0e08 	add.w	lr, r1, #8
 8004f48:	68a5      	ldr	r5, [r4, #8]
 8004f4a:	4575      	cmp	r5, lr
 8004f4c:	443b      	add	r3, r7
 8004f4e:	d06f      	beq.n	8005030 <_free_r+0x124>
 8004f50:	68e7      	ldr	r7, [r4, #12]
 8004f52:	60ef      	str	r7, [r5, #12]
 8004f54:	60bd      	str	r5, [r7, #8]
 8004f56:	1815      	adds	r5, r2, r0
 8004f58:	686d      	ldr	r5, [r5, #4]
 8004f5a:	07ed      	lsls	r5, r5, #31
 8004f5c:	d542      	bpl.n	8004fe4 <_free_r+0xd8>
 8004f5e:	f043 0201 	orr.w	r2, r3, #1
 8004f62:	6062      	str	r2, [r4, #4]
 8004f64:	50e3      	str	r3, [r4, r3]
 8004f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f6a:	d218      	bcs.n	8004f9e <_free_r+0x92>
 8004f6c:	08db      	lsrs	r3, r3, #3
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	684d      	ldr	r5, [r1, #4]
 8004f72:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 8004f76:	60a7      	str	r7, [r4, #8]
 8004f78:	2001      	movs	r0, #1
 8004f7a:	109b      	asrs	r3, r3, #2
 8004f7c:	fa00 f303 	lsl.w	r3, r0, r3
 8004f80:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 8004f84:	431d      	orrs	r5, r3
 8004f86:	3808      	subs	r0, #8
 8004f88:	60e0      	str	r0, [r4, #12]
 8004f8a:	604d      	str	r5, [r1, #4]
 8004f8c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 8004f90:	60fc      	str	r4, [r7, #12]
 8004f92:	4640      	mov	r0, r8
 8004f94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f98:	f000 be40 	b.w	8005c1c <__malloc_unlock>
 8004f9c:	4770      	bx	lr
 8004f9e:	0a5a      	lsrs	r2, r3, #9
 8004fa0:	2a04      	cmp	r2, #4
 8004fa2:	d853      	bhi.n	800504c <_free_r+0x140>
 8004fa4:	099a      	lsrs	r2, r3, #6
 8004fa6:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8004faa:	007f      	lsls	r7, r7, #1
 8004fac:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8004fb0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 8004fb4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8004fb8:	4944      	ldr	r1, [pc, #272]	; (80050cc <_free_r+0x1c0>)
 8004fba:	3808      	subs	r0, #8
 8004fbc:	4290      	cmp	r0, r2
 8004fbe:	d04d      	beq.n	800505c <_free_r+0x150>
 8004fc0:	6851      	ldr	r1, [r2, #4]
 8004fc2:	f021 0103 	bic.w	r1, r1, #3
 8004fc6:	428b      	cmp	r3, r1
 8004fc8:	d202      	bcs.n	8004fd0 <_free_r+0xc4>
 8004fca:	6892      	ldr	r2, [r2, #8]
 8004fcc:	4290      	cmp	r0, r2
 8004fce:	d1f7      	bne.n	8004fc0 <_free_r+0xb4>
 8004fd0:	68d0      	ldr	r0, [r2, #12]
 8004fd2:	60e0      	str	r0, [r4, #12]
 8004fd4:	60a2      	str	r2, [r4, #8]
 8004fd6:	6084      	str	r4, [r0, #8]
 8004fd8:	60d4      	str	r4, [r2, #12]
 8004fda:	4640      	mov	r0, r8
 8004fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe0:	f000 be1c 	b.w	8005c1c <__malloc_unlock>
 8004fe4:	6895      	ldr	r5, [r2, #8]
 8004fe6:	4f3a      	ldr	r7, [pc, #232]	; (80050d0 <_free_r+0x1c4>)
 8004fe8:	42bd      	cmp	r5, r7
 8004fea:	4403      	add	r3, r0
 8004fec:	d03f      	beq.n	800506e <_free_r+0x162>
 8004fee:	68d0      	ldr	r0, [r2, #12]
 8004ff0:	60e8      	str	r0, [r5, #12]
 8004ff2:	f043 0201 	orr.w	r2, r3, #1
 8004ff6:	6085      	str	r5, [r0, #8]
 8004ff8:	6062      	str	r2, [r4, #4]
 8004ffa:	50e3      	str	r3, [r4, r3]
 8004ffc:	e7b3      	b.n	8004f66 <_free_r+0x5a>
 8004ffe:	07ff      	lsls	r7, r7, #31
 8005000:	4403      	add	r3, r0
 8005002:	d407      	bmi.n	8005014 <_free_r+0x108>
 8005004:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8005008:	1aa4      	subs	r4, r4, r2
 800500a:	4413      	add	r3, r2
 800500c:	68a0      	ldr	r0, [r4, #8]
 800500e:	68e2      	ldr	r2, [r4, #12]
 8005010:	60c2      	str	r2, [r0, #12]
 8005012:	6090      	str	r0, [r2, #8]
 8005014:	4a2f      	ldr	r2, [pc, #188]	; (80050d4 <_free_r+0x1c8>)
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	f043 0001 	orr.w	r0, r3, #1
 800501c:	4293      	cmp	r3, r2
 800501e:	6060      	str	r0, [r4, #4]
 8005020:	608c      	str	r4, [r1, #8]
 8005022:	d3b6      	bcc.n	8004f92 <_free_r+0x86>
 8005024:	4b2c      	ldr	r3, [pc, #176]	; (80050d8 <_free_r+0x1cc>)
 8005026:	4640      	mov	r0, r8
 8005028:	6819      	ldr	r1, [r3, #0]
 800502a:	f7ff ff21 	bl	8004e70 <_malloc_trim_r>
 800502e:	e7b0      	b.n	8004f92 <_free_r+0x86>
 8005030:	1811      	adds	r1, r2, r0
 8005032:	6849      	ldr	r1, [r1, #4]
 8005034:	07c9      	lsls	r1, r1, #31
 8005036:	d444      	bmi.n	80050c2 <_free_r+0x1b6>
 8005038:	6891      	ldr	r1, [r2, #8]
 800503a:	68d2      	ldr	r2, [r2, #12]
 800503c:	60ca      	str	r2, [r1, #12]
 800503e:	4403      	add	r3, r0
 8005040:	f043 0001 	orr.w	r0, r3, #1
 8005044:	6091      	str	r1, [r2, #8]
 8005046:	6060      	str	r0, [r4, #4]
 8005048:	50e3      	str	r3, [r4, r3]
 800504a:	e7a2      	b.n	8004f92 <_free_r+0x86>
 800504c:	2a14      	cmp	r2, #20
 800504e:	d817      	bhi.n	8005080 <_free_r+0x174>
 8005050:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 8005054:	007f      	lsls	r7, r7, #1
 8005056:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 800505a:	e7a9      	b.n	8004fb0 <_free_r+0xa4>
 800505c:	10aa      	asrs	r2, r5, #2
 800505e:	684b      	ldr	r3, [r1, #4]
 8005060:	2501      	movs	r5, #1
 8005062:	fa05 f202 	lsl.w	r2, r5, r2
 8005066:	4313      	orrs	r3, r2
 8005068:	604b      	str	r3, [r1, #4]
 800506a:	4602      	mov	r2, r0
 800506c:	e7b1      	b.n	8004fd2 <_free_r+0xc6>
 800506e:	f043 0201 	orr.w	r2, r3, #1
 8005072:	614c      	str	r4, [r1, #20]
 8005074:	610c      	str	r4, [r1, #16]
 8005076:	60e5      	str	r5, [r4, #12]
 8005078:	60a5      	str	r5, [r4, #8]
 800507a:	6062      	str	r2, [r4, #4]
 800507c:	50e3      	str	r3, [r4, r3]
 800507e:	e788      	b.n	8004f92 <_free_r+0x86>
 8005080:	2a54      	cmp	r2, #84	; 0x54
 8005082:	d806      	bhi.n	8005092 <_free_r+0x186>
 8005084:	0b1a      	lsrs	r2, r3, #12
 8005086:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800508a:	007f      	lsls	r7, r7, #1
 800508c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 8005090:	e78e      	b.n	8004fb0 <_free_r+0xa4>
 8005092:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005096:	d806      	bhi.n	80050a6 <_free_r+0x19a>
 8005098:	0bda      	lsrs	r2, r3, #15
 800509a:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800509e:	007f      	lsls	r7, r7, #1
 80050a0:	f102 0577 	add.w	r5, r2, #119	; 0x77
 80050a4:	e784      	b.n	8004fb0 <_free_r+0xa4>
 80050a6:	f240 5054 	movw	r0, #1364	; 0x554
 80050aa:	4282      	cmp	r2, r0
 80050ac:	d806      	bhi.n	80050bc <_free_r+0x1b0>
 80050ae:	0c9a      	lsrs	r2, r3, #18
 80050b0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 80050b4:	007f      	lsls	r7, r7, #1
 80050b6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 80050ba:	e779      	b.n	8004fb0 <_free_r+0xa4>
 80050bc:	27fe      	movs	r7, #254	; 0xfe
 80050be:	257e      	movs	r5, #126	; 0x7e
 80050c0:	e776      	b.n	8004fb0 <_free_r+0xa4>
 80050c2:	f043 0201 	orr.w	r2, r3, #1
 80050c6:	6062      	str	r2, [r4, #4]
 80050c8:	50e3      	str	r3, [r4, r3]
 80050ca:	e762      	b.n	8004f92 <_free_r+0x86>
 80050cc:	20000464 	.word	0x20000464
 80050d0:	2000046c 	.word	0x2000046c
 80050d4:	2000086c 	.word	0x2000086c
 80050d8:	20000a4c 	.word	0x20000a4c

080050dc <__sfvwrite_r>:
 80050dc:	6893      	ldr	r3, [r2, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d076      	beq.n	80051d0 <__sfvwrite_r+0xf4>
 80050e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e6:	898b      	ldrh	r3, [r1, #12]
 80050e8:	b085      	sub	sp, #20
 80050ea:	460c      	mov	r4, r1
 80050ec:	0719      	lsls	r1, r3, #28
 80050ee:	9001      	str	r0, [sp, #4]
 80050f0:	4616      	mov	r6, r2
 80050f2:	d529      	bpl.n	8005148 <__sfvwrite_r+0x6c>
 80050f4:	6922      	ldr	r2, [r4, #16]
 80050f6:	b33a      	cbz	r2, 8005148 <__sfvwrite_r+0x6c>
 80050f8:	f003 0802 	and.w	r8, r3, #2
 80050fc:	fa1f f088 	uxth.w	r0, r8
 8005100:	6835      	ldr	r5, [r6, #0]
 8005102:	2800      	cmp	r0, #0
 8005104:	d02f      	beq.n	8005166 <__sfvwrite_r+0x8a>
 8005106:	f04f 0900 	mov.w	r9, #0
 800510a:	4fb4      	ldr	r7, [pc, #720]	; (80053dc <__sfvwrite_r+0x300>)
 800510c:	46c8      	mov	r8, r9
 800510e:	46b2      	mov	sl, r6
 8005110:	45b8      	cmp	r8, r7
 8005112:	4643      	mov	r3, r8
 8005114:	464a      	mov	r2, r9
 8005116:	bf28      	it	cs
 8005118:	463b      	movcs	r3, r7
 800511a:	9801      	ldr	r0, [sp, #4]
 800511c:	f1b8 0f00 	cmp.w	r8, #0
 8005120:	d050      	beq.n	80051c4 <__sfvwrite_r+0xe8>
 8005122:	69e1      	ldr	r1, [r4, #28]
 8005124:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005126:	47b0      	blx	r6
 8005128:	2800      	cmp	r0, #0
 800512a:	dd71      	ble.n	8005210 <__sfvwrite_r+0x134>
 800512c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005130:	1a1b      	subs	r3, r3, r0
 8005132:	4481      	add	r9, r0
 8005134:	ebc0 0808 	rsb	r8, r0, r8
 8005138:	f8ca 3008 	str.w	r3, [sl, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e7      	bne.n	8005110 <__sfvwrite_r+0x34>
 8005140:	2000      	movs	r0, #0
 8005142:	b005      	add	sp, #20
 8005144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005148:	4621      	mov	r1, r4
 800514a:	9801      	ldr	r0, [sp, #4]
 800514c:	f7fe fd40 	bl	8003bd0 <__swsetup_r>
 8005150:	2800      	cmp	r0, #0
 8005152:	f040 813a 	bne.w	80053ca <__sfvwrite_r+0x2ee>
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	6835      	ldr	r5, [r6, #0]
 800515a:	f003 0802 	and.w	r8, r3, #2
 800515e:	fa1f f088 	uxth.w	r0, r8
 8005162:	2800      	cmp	r0, #0
 8005164:	d1cf      	bne.n	8005106 <__sfvwrite_r+0x2a>
 8005166:	f013 0901 	ands.w	r9, r3, #1
 800516a:	d15b      	bne.n	8005224 <__sfvwrite_r+0x148>
 800516c:	464f      	mov	r7, r9
 800516e:	9602      	str	r6, [sp, #8]
 8005170:	b31f      	cbz	r7, 80051ba <__sfvwrite_r+0xde>
 8005172:	059a      	lsls	r2, r3, #22
 8005174:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8005178:	d52c      	bpl.n	80051d4 <__sfvwrite_r+0xf8>
 800517a:	4547      	cmp	r7, r8
 800517c:	46c2      	mov	sl, r8
 800517e:	f0c0 80a4 	bcc.w	80052ca <__sfvwrite_r+0x1ee>
 8005182:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8005186:	f040 80b1 	bne.w	80052ec <__sfvwrite_r+0x210>
 800518a:	6820      	ldr	r0, [r4, #0]
 800518c:	4652      	mov	r2, sl
 800518e:	4649      	mov	r1, r9
 8005190:	f000 fcde 	bl	8005b50 <memmove>
 8005194:	68a0      	ldr	r0, [r4, #8]
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	ebc8 0000 	rsb	r0, r8, r0
 800519c:	4453      	add	r3, sl
 800519e:	60a0      	str	r0, [r4, #8]
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	4638      	mov	r0, r7
 80051a4:	9a02      	ldr	r2, [sp, #8]
 80051a6:	6893      	ldr	r3, [r2, #8]
 80051a8:	1a1b      	subs	r3, r3, r0
 80051aa:	4481      	add	r9, r0
 80051ac:	1a3f      	subs	r7, r7, r0
 80051ae:	6093      	str	r3, [r2, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0c5      	beq.n	8005140 <__sfvwrite_r+0x64>
 80051b4:	89a3      	ldrh	r3, [r4, #12]
 80051b6:	2f00      	cmp	r7, #0
 80051b8:	d1db      	bne.n	8005172 <__sfvwrite_r+0x96>
 80051ba:	f8d5 9000 	ldr.w	r9, [r5]
 80051be:	686f      	ldr	r7, [r5, #4]
 80051c0:	3508      	adds	r5, #8
 80051c2:	e7d5      	b.n	8005170 <__sfvwrite_r+0x94>
 80051c4:	f8d5 9000 	ldr.w	r9, [r5]
 80051c8:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80051cc:	3508      	adds	r5, #8
 80051ce:	e79f      	b.n	8005110 <__sfvwrite_r+0x34>
 80051d0:	2000      	movs	r0, #0
 80051d2:	4770      	bx	lr
 80051d4:	6820      	ldr	r0, [r4, #0]
 80051d6:	6923      	ldr	r3, [r4, #16]
 80051d8:	4298      	cmp	r0, r3
 80051da:	d803      	bhi.n	80051e4 <__sfvwrite_r+0x108>
 80051dc:	6961      	ldr	r1, [r4, #20]
 80051de:	428f      	cmp	r7, r1
 80051e0:	f080 80b7 	bcs.w	8005352 <__sfvwrite_r+0x276>
 80051e4:	45b8      	cmp	r8, r7
 80051e6:	bf28      	it	cs
 80051e8:	46b8      	movcs	r8, r7
 80051ea:	4642      	mov	r2, r8
 80051ec:	4649      	mov	r1, r9
 80051ee:	f000 fcaf 	bl	8005b50 <memmove>
 80051f2:	68a3      	ldr	r3, [r4, #8]
 80051f4:	6822      	ldr	r2, [r4, #0]
 80051f6:	ebc8 0303 	rsb	r3, r8, r3
 80051fa:	4442      	add	r2, r8
 80051fc:	60a3      	str	r3, [r4, #8]
 80051fe:	6022      	str	r2, [r4, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d149      	bne.n	8005298 <__sfvwrite_r+0x1bc>
 8005204:	4621      	mov	r1, r4
 8005206:	9801      	ldr	r0, [sp, #4]
 8005208:	f7ff fd94 	bl	8004d34 <_fflush_r>
 800520c:	2800      	cmp	r0, #0
 800520e:	d043      	beq.n	8005298 <__sfvwrite_r+0x1bc>
 8005210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005218:	f04f 30ff 	mov.w	r0, #4294967295
 800521c:	81a3      	strh	r3, [r4, #12]
 800521e:	b005      	add	sp, #20
 8005220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005224:	4680      	mov	r8, r0
 8005226:	9002      	str	r0, [sp, #8]
 8005228:	4682      	mov	sl, r0
 800522a:	4681      	mov	r9, r0
 800522c:	f1b9 0f00 	cmp.w	r9, #0
 8005230:	d02a      	beq.n	8005288 <__sfvwrite_r+0x1ac>
 8005232:	9b02      	ldr	r3, [sp, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d04c      	beq.n	80052d2 <__sfvwrite_r+0x1f6>
 8005238:	6820      	ldr	r0, [r4, #0]
 800523a:	6923      	ldr	r3, [r4, #16]
 800523c:	6962      	ldr	r2, [r4, #20]
 800523e:	45c8      	cmp	r8, r9
 8005240:	46c3      	mov	fp, r8
 8005242:	bf28      	it	cs
 8005244:	46cb      	movcs	fp, r9
 8005246:	4298      	cmp	r0, r3
 8005248:	465f      	mov	r7, fp
 800524a:	d904      	bls.n	8005256 <__sfvwrite_r+0x17a>
 800524c:	68a3      	ldr	r3, [r4, #8]
 800524e:	4413      	add	r3, r2
 8005250:	459b      	cmp	fp, r3
 8005252:	f300 8090 	bgt.w	8005376 <__sfvwrite_r+0x29a>
 8005256:	4593      	cmp	fp, r2
 8005258:	db20      	blt.n	800529c <__sfvwrite_r+0x1c0>
 800525a:	4613      	mov	r3, r2
 800525c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800525e:	69e1      	ldr	r1, [r4, #28]
 8005260:	9801      	ldr	r0, [sp, #4]
 8005262:	4652      	mov	r2, sl
 8005264:	47b8      	blx	r7
 8005266:	1e07      	subs	r7, r0, #0
 8005268:	ddd2      	ble.n	8005210 <__sfvwrite_r+0x134>
 800526a:	ebb8 0807 	subs.w	r8, r8, r7
 800526e:	d023      	beq.n	80052b8 <__sfvwrite_r+0x1dc>
 8005270:	68b3      	ldr	r3, [r6, #8]
 8005272:	1bdb      	subs	r3, r3, r7
 8005274:	44ba      	add	sl, r7
 8005276:	ebc7 0909 	rsb	r9, r7, r9
 800527a:	60b3      	str	r3, [r6, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	f43f af5f 	beq.w	8005140 <__sfvwrite_r+0x64>
 8005282:	f1b9 0f00 	cmp.w	r9, #0
 8005286:	d1d4      	bne.n	8005232 <__sfvwrite_r+0x156>
 8005288:	2300      	movs	r3, #0
 800528a:	f8d5 a000 	ldr.w	sl, [r5]
 800528e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8005292:	9302      	str	r3, [sp, #8]
 8005294:	3508      	adds	r5, #8
 8005296:	e7c9      	b.n	800522c <__sfvwrite_r+0x150>
 8005298:	4640      	mov	r0, r8
 800529a:	e783      	b.n	80051a4 <__sfvwrite_r+0xc8>
 800529c:	465a      	mov	r2, fp
 800529e:	4651      	mov	r1, sl
 80052a0:	f000 fc56 	bl	8005b50 <memmove>
 80052a4:	68a2      	ldr	r2, [r4, #8]
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	ebcb 0202 	rsb	r2, fp, r2
 80052ac:	445b      	add	r3, fp
 80052ae:	ebb8 0807 	subs.w	r8, r8, r7
 80052b2:	60a2      	str	r2, [r4, #8]
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	d1db      	bne.n	8005270 <__sfvwrite_r+0x194>
 80052b8:	4621      	mov	r1, r4
 80052ba:	9801      	ldr	r0, [sp, #4]
 80052bc:	f7ff fd3a 	bl	8004d34 <_fflush_r>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d1a5      	bne.n	8005210 <__sfvwrite_r+0x134>
 80052c4:	f8cd 8008 	str.w	r8, [sp, #8]
 80052c8:	e7d2      	b.n	8005270 <__sfvwrite_r+0x194>
 80052ca:	6820      	ldr	r0, [r4, #0]
 80052cc:	46b8      	mov	r8, r7
 80052ce:	46ba      	mov	sl, r7
 80052d0:	e75c      	b.n	800518c <__sfvwrite_r+0xb0>
 80052d2:	464a      	mov	r2, r9
 80052d4:	210a      	movs	r1, #10
 80052d6:	4650      	mov	r0, sl
 80052d8:	f000 fbea 	bl	8005ab0 <memchr>
 80052dc:	2800      	cmp	r0, #0
 80052de:	d06f      	beq.n	80053c0 <__sfvwrite_r+0x2e4>
 80052e0:	3001      	adds	r0, #1
 80052e2:	2301      	movs	r3, #1
 80052e4:	ebca 0800 	rsb	r8, sl, r0
 80052e8:	9302      	str	r3, [sp, #8]
 80052ea:	e7a5      	b.n	8005238 <__sfvwrite_r+0x15c>
 80052ec:	6962      	ldr	r2, [r4, #20]
 80052ee:	6820      	ldr	r0, [r4, #0]
 80052f0:	6921      	ldr	r1, [r4, #16]
 80052f2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 80052f6:	ebc1 0a00 	rsb	sl, r1, r0
 80052fa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 80052fe:	f10a 0001 	add.w	r0, sl, #1
 8005302:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005306:	4438      	add	r0, r7
 8005308:	4540      	cmp	r0, r8
 800530a:	4642      	mov	r2, r8
 800530c:	bf84      	itt	hi
 800530e:	4680      	movhi	r8, r0
 8005310:	4642      	movhi	r2, r8
 8005312:	055b      	lsls	r3, r3, #21
 8005314:	d542      	bpl.n	800539c <__sfvwrite_r+0x2c0>
 8005316:	4611      	mov	r1, r2
 8005318:	9801      	ldr	r0, [sp, #4]
 800531a:	f000 f90d 	bl	8005538 <_malloc_r>
 800531e:	4683      	mov	fp, r0
 8005320:	2800      	cmp	r0, #0
 8005322:	d055      	beq.n	80053d0 <__sfvwrite_r+0x2f4>
 8005324:	4652      	mov	r2, sl
 8005326:	6921      	ldr	r1, [r4, #16]
 8005328:	f7fc fe96 	bl	8002058 <memcpy>
 800532c:	89a3      	ldrh	r3, [r4, #12]
 800532e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005336:	81a3      	strh	r3, [r4, #12]
 8005338:	ebca 0308 	rsb	r3, sl, r8
 800533c:	eb0b 000a 	add.w	r0, fp, sl
 8005340:	f8c4 8014 	str.w	r8, [r4, #20]
 8005344:	f8c4 b010 	str.w	fp, [r4, #16]
 8005348:	6020      	str	r0, [r4, #0]
 800534a:	60a3      	str	r3, [r4, #8]
 800534c:	46b8      	mov	r8, r7
 800534e:	46ba      	mov	sl, r7
 8005350:	e71c      	b.n	800518c <__sfvwrite_r+0xb0>
 8005352:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005356:	42bb      	cmp	r3, r7
 8005358:	bf28      	it	cs
 800535a:	463b      	movcs	r3, r7
 800535c:	464a      	mov	r2, r9
 800535e:	fb93 f3f1 	sdiv	r3, r3, r1
 8005362:	9801      	ldr	r0, [sp, #4]
 8005364:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005366:	fb01 f303 	mul.w	r3, r1, r3
 800536a:	69e1      	ldr	r1, [r4, #28]
 800536c:	47b0      	blx	r6
 800536e:	2800      	cmp	r0, #0
 8005370:	f73f af18 	bgt.w	80051a4 <__sfvwrite_r+0xc8>
 8005374:	e74c      	b.n	8005210 <__sfvwrite_r+0x134>
 8005376:	461a      	mov	r2, r3
 8005378:	4651      	mov	r1, sl
 800537a:	9303      	str	r3, [sp, #12]
 800537c:	f000 fbe8 	bl	8005b50 <memmove>
 8005380:	6822      	ldr	r2, [r4, #0]
 8005382:	9b03      	ldr	r3, [sp, #12]
 8005384:	9801      	ldr	r0, [sp, #4]
 8005386:	441a      	add	r2, r3
 8005388:	6022      	str	r2, [r4, #0]
 800538a:	4621      	mov	r1, r4
 800538c:	f7ff fcd2 	bl	8004d34 <_fflush_r>
 8005390:	9b03      	ldr	r3, [sp, #12]
 8005392:	2800      	cmp	r0, #0
 8005394:	f47f af3c 	bne.w	8005210 <__sfvwrite_r+0x134>
 8005398:	461f      	mov	r7, r3
 800539a:	e766      	b.n	800526a <__sfvwrite_r+0x18e>
 800539c:	9801      	ldr	r0, [sp, #4]
 800539e:	f000 ff4f 	bl	8006240 <_realloc_r>
 80053a2:	4683      	mov	fp, r0
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d1c7      	bne.n	8005338 <__sfvwrite_r+0x25c>
 80053a8:	9d01      	ldr	r5, [sp, #4]
 80053aa:	6921      	ldr	r1, [r4, #16]
 80053ac:	4628      	mov	r0, r5
 80053ae:	f7ff fdad 	bl	8004f0c <_free_r>
 80053b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053b6:	220c      	movs	r2, #12
 80053b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053bc:	602a      	str	r2, [r5, #0]
 80053be:	e729      	b.n	8005214 <__sfvwrite_r+0x138>
 80053c0:	2301      	movs	r3, #1
 80053c2:	f109 0801 	add.w	r8, r9, #1
 80053c6:	9302      	str	r3, [sp, #8]
 80053c8:	e736      	b.n	8005238 <__sfvwrite_r+0x15c>
 80053ca:	f04f 30ff 	mov.w	r0, #4294967295
 80053ce:	e6b8      	b.n	8005142 <__sfvwrite_r+0x66>
 80053d0:	9a01      	ldr	r2, [sp, #4]
 80053d2:	230c      	movs	r3, #12
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053da:	e71b      	b.n	8005214 <__sfvwrite_r+0x138>
 80053dc:	7ffffc00 	.word	0x7ffffc00

080053e0 <_fwalk_reent>:
 80053e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 80053e8:	d01f      	beq.n	800542a <_fwalk_reent+0x4a>
 80053ea:	4688      	mov	r8, r1
 80053ec:	4606      	mov	r6, r0
 80053ee:	f04f 0900 	mov.w	r9, #0
 80053f2:	687d      	ldr	r5, [r7, #4]
 80053f4:	68bc      	ldr	r4, [r7, #8]
 80053f6:	3d01      	subs	r5, #1
 80053f8:	d411      	bmi.n	800541e <_fwalk_reent+0x3e>
 80053fa:	89a3      	ldrh	r3, [r4, #12]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	f105 35ff 	add.w	r5, r5, #4294967295
 8005402:	d908      	bls.n	8005416 <_fwalk_reent+0x36>
 8005404:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8005408:	3301      	adds	r3, #1
 800540a:	4621      	mov	r1, r4
 800540c:	4630      	mov	r0, r6
 800540e:	d002      	beq.n	8005416 <_fwalk_reent+0x36>
 8005410:	47c0      	blx	r8
 8005412:	ea49 0900 	orr.w	r9, r9, r0
 8005416:	1c6b      	adds	r3, r5, #1
 8005418:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800541c:	d1ed      	bne.n	80053fa <_fwalk_reent+0x1a>
 800541e:	683f      	ldr	r7, [r7, #0]
 8005420:	2f00      	cmp	r7, #0
 8005422:	d1e6      	bne.n	80053f2 <_fwalk_reent+0x12>
 8005424:	4648      	mov	r0, r9
 8005426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800542a:	46b9      	mov	r9, r7
 800542c:	4648      	mov	r0, r9
 800542e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005432:	bf00      	nop

08005434 <_localeconv_r>:
 8005434:	4a04      	ldr	r2, [pc, #16]	; (8005448 <_localeconv_r+0x14>)
 8005436:	4b05      	ldr	r3, [pc, #20]	; (800544c <_localeconv_r+0x18>)
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800543c:	2800      	cmp	r0, #0
 800543e:	bf08      	it	eq
 8005440:	4618      	moveq	r0, r3
 8005442:	30f0      	adds	r0, #240	; 0xf0
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000460 	.word	0x20000460
 800544c:	20000874 	.word	0x20000874

08005450 <__swhatbuf_r>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	460d      	mov	r5, r1
 8005454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005458:	2900      	cmp	r1, #0
 800545a:	b090      	sub	sp, #64	; 0x40
 800545c:	4614      	mov	r4, r2
 800545e:	461e      	mov	r6, r3
 8005460:	db14      	blt.n	800548c <__swhatbuf_r+0x3c>
 8005462:	aa01      	add	r2, sp, #4
 8005464:	f002 fdee 	bl	8008044 <_fstat_r>
 8005468:	2800      	cmp	r0, #0
 800546a:	db0f      	blt.n	800548c <__swhatbuf_r+0x3c>
 800546c:	9a02      	ldr	r2, [sp, #8]
 800546e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005472:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8005476:	fab2 f282 	clz	r2, r2
 800547a:	0952      	lsrs	r2, r2, #5
 800547c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005480:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005484:	6032      	str	r2, [r6, #0]
 8005486:	6023      	str	r3, [r4, #0]
 8005488:	b010      	add	sp, #64	; 0x40
 800548a:	bd70      	pop	{r4, r5, r6, pc}
 800548c:	89a8      	ldrh	r0, [r5, #12]
 800548e:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8005492:	b282      	uxth	r2, r0
 8005494:	2000      	movs	r0, #0
 8005496:	6030      	str	r0, [r6, #0]
 8005498:	b11a      	cbz	r2, 80054a2 <__swhatbuf_r+0x52>
 800549a:	2340      	movs	r3, #64	; 0x40
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	b010      	add	sp, #64	; 0x40
 80054a0:	bd70      	pop	{r4, r5, r6, pc}
 80054a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a6:	4610      	mov	r0, r2
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	b010      	add	sp, #64	; 0x40
 80054ac:	bd70      	pop	{r4, r5, r6, pc}
 80054ae:	bf00      	nop

080054b0 <__smakebuf_r>:
 80054b0:	898a      	ldrh	r2, [r1, #12]
 80054b2:	0792      	lsls	r2, r2, #30
 80054b4:	460b      	mov	r3, r1
 80054b6:	d506      	bpl.n	80054c6 <__smakebuf_r+0x16>
 80054b8:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054bc:	2101      	movs	r1, #1
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	611a      	str	r2, [r3, #16]
 80054c2:	6159      	str	r1, [r3, #20]
 80054c4:	4770      	bx	lr
 80054c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054c8:	b083      	sub	sp, #12
 80054ca:	ab01      	add	r3, sp, #4
 80054cc:	466a      	mov	r2, sp
 80054ce:	460c      	mov	r4, r1
 80054d0:	4605      	mov	r5, r0
 80054d2:	f7ff ffbd 	bl	8005450 <__swhatbuf_r>
 80054d6:	9900      	ldr	r1, [sp, #0]
 80054d8:	4606      	mov	r6, r0
 80054da:	4628      	mov	r0, r5
 80054dc:	f000 f82c 	bl	8005538 <_malloc_r>
 80054e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054e4:	b1d0      	cbz	r0, 800551c <__smakebuf_r+0x6c>
 80054e6:	9a01      	ldr	r2, [sp, #4]
 80054e8:	4f12      	ldr	r7, [pc, #72]	; (8005534 <__smakebuf_r+0x84>)
 80054ea:	9900      	ldr	r1, [sp, #0]
 80054ec:	63ef      	str	r7, [r5, #60]	; 0x3c
 80054ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f2:	81a3      	strh	r3, [r4, #12]
 80054f4:	6020      	str	r0, [r4, #0]
 80054f6:	6120      	str	r0, [r4, #16]
 80054f8:	6161      	str	r1, [r4, #20]
 80054fa:	b91a      	cbnz	r2, 8005504 <__smakebuf_r+0x54>
 80054fc:	4333      	orrs	r3, r6
 80054fe:	81a3      	strh	r3, [r4, #12]
 8005500:	b003      	add	sp, #12
 8005502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005504:	4628      	mov	r0, r5
 8005506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800550a:	f002 fdaf 	bl	800806c <_isatty_r>
 800550e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005512:	2800      	cmp	r0, #0
 8005514:	d0f2      	beq.n	80054fc <__smakebuf_r+0x4c>
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	e7ef      	b.n	80054fc <__smakebuf_r+0x4c>
 800551c:	059a      	lsls	r2, r3, #22
 800551e:	d4ef      	bmi.n	8005500 <__smakebuf_r+0x50>
 8005520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005524:	f043 0302 	orr.w	r3, r3, #2
 8005528:	2101      	movs	r1, #1
 800552a:	81a3      	strh	r3, [r4, #12]
 800552c:	6022      	str	r2, [r4, #0]
 800552e:	6122      	str	r2, [r4, #16]
 8005530:	6161      	str	r1, [r4, #20]
 8005532:	e7e5      	b.n	8005500 <__smakebuf_r+0x50>
 8005534:	08004d61 	.word	0x08004d61

08005538 <_malloc_r>:
 8005538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553c:	f101 050b 	add.w	r5, r1, #11
 8005540:	2d16      	cmp	r5, #22
 8005542:	b083      	sub	sp, #12
 8005544:	4606      	mov	r6, r0
 8005546:	f240 809f 	bls.w	8005688 <_malloc_r+0x150>
 800554a:	f035 0507 	bics.w	r5, r5, #7
 800554e:	f100 80bf 	bmi.w	80056d0 <_malloc_r+0x198>
 8005552:	42a9      	cmp	r1, r5
 8005554:	f200 80bc 	bhi.w	80056d0 <_malloc_r+0x198>
 8005558:	f000 fb5e 	bl	8005c18 <__malloc_lock>
 800555c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8005560:	f0c0 829c 	bcc.w	8005a9c <_malloc_r+0x564>
 8005564:	0a6b      	lsrs	r3, r5, #9
 8005566:	f000 80ba 	beq.w	80056de <_malloc_r+0x1a6>
 800556a:	2b04      	cmp	r3, #4
 800556c:	f200 8183 	bhi.w	8005876 <_malloc_r+0x33e>
 8005570:	09a8      	lsrs	r0, r5, #6
 8005572:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 8005576:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800557a:	3038      	adds	r0, #56	; 0x38
 800557c:	4fc4      	ldr	r7, [pc, #784]	; (8005890 <_malloc_r+0x358>)
 800557e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005582:	f1a3 0108 	sub.w	r1, r3, #8
 8005586:	685c      	ldr	r4, [r3, #4]
 8005588:	42a1      	cmp	r1, r4
 800558a:	d107      	bne.n	800559c <_malloc_r+0x64>
 800558c:	e0ac      	b.n	80056e8 <_malloc_r+0x1b0>
 800558e:	2a00      	cmp	r2, #0
 8005590:	f280 80ac 	bge.w	80056ec <_malloc_r+0x1b4>
 8005594:	68e4      	ldr	r4, [r4, #12]
 8005596:	42a1      	cmp	r1, r4
 8005598:	f000 80a6 	beq.w	80056e8 <_malloc_r+0x1b0>
 800559c:	6863      	ldr	r3, [r4, #4]
 800559e:	f023 0303 	bic.w	r3, r3, #3
 80055a2:	1b5a      	subs	r2, r3, r5
 80055a4:	2a0f      	cmp	r2, #15
 80055a6:	ddf2      	ble.n	800558e <_malloc_r+0x56>
 80055a8:	49b9      	ldr	r1, [pc, #740]	; (8005890 <_malloc_r+0x358>)
 80055aa:	693c      	ldr	r4, [r7, #16]
 80055ac:	f101 0e08 	add.w	lr, r1, #8
 80055b0:	4574      	cmp	r4, lr
 80055b2:	f000 81b3 	beq.w	800591c <_malloc_r+0x3e4>
 80055b6:	6863      	ldr	r3, [r4, #4]
 80055b8:	f023 0303 	bic.w	r3, r3, #3
 80055bc:	1b5a      	subs	r2, r3, r5
 80055be:	2a0f      	cmp	r2, #15
 80055c0:	f300 8199 	bgt.w	80058f6 <_malloc_r+0x3be>
 80055c4:	2a00      	cmp	r2, #0
 80055c6:	f8c1 e014 	str.w	lr, [r1, #20]
 80055ca:	f8c1 e010 	str.w	lr, [r1, #16]
 80055ce:	f280 809e 	bge.w	800570e <_malloc_r+0x1d6>
 80055d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d6:	f080 8167 	bcs.w	80058a8 <_malloc_r+0x370>
 80055da:	08db      	lsrs	r3, r3, #3
 80055dc:	f103 0c01 	add.w	ip, r3, #1
 80055e0:	2201      	movs	r2, #1
 80055e2:	109b      	asrs	r3, r3, #2
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	684a      	ldr	r2, [r1, #4]
 80055ea:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 80055ee:	f8c4 8008 	str.w	r8, [r4, #8]
 80055f2:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 80055f6:	431a      	orrs	r2, r3
 80055f8:	f1a9 0308 	sub.w	r3, r9, #8
 80055fc:	60e3      	str	r3, [r4, #12]
 80055fe:	604a      	str	r2, [r1, #4]
 8005600:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8005604:	f8c8 400c 	str.w	r4, [r8, #12]
 8005608:	1083      	asrs	r3, r0, #2
 800560a:	2401      	movs	r4, #1
 800560c:	409c      	lsls	r4, r3
 800560e:	4294      	cmp	r4, r2
 8005610:	f200 808a 	bhi.w	8005728 <_malloc_r+0x1f0>
 8005614:	4214      	tst	r4, r2
 8005616:	d106      	bne.n	8005626 <_malloc_r+0xee>
 8005618:	f020 0003 	bic.w	r0, r0, #3
 800561c:	0064      	lsls	r4, r4, #1
 800561e:	4214      	tst	r4, r2
 8005620:	f100 0004 	add.w	r0, r0, #4
 8005624:	d0fa      	beq.n	800561c <_malloc_r+0xe4>
 8005626:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800562a:	46cc      	mov	ip, r9
 800562c:	4680      	mov	r8, r0
 800562e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8005632:	458c      	cmp	ip, r1
 8005634:	d107      	bne.n	8005646 <_malloc_r+0x10e>
 8005636:	e173      	b.n	8005920 <_malloc_r+0x3e8>
 8005638:	2a00      	cmp	r2, #0
 800563a:	f280 8181 	bge.w	8005940 <_malloc_r+0x408>
 800563e:	68c9      	ldr	r1, [r1, #12]
 8005640:	458c      	cmp	ip, r1
 8005642:	f000 816d 	beq.w	8005920 <_malloc_r+0x3e8>
 8005646:	684b      	ldr	r3, [r1, #4]
 8005648:	f023 0303 	bic.w	r3, r3, #3
 800564c:	1b5a      	subs	r2, r3, r5
 800564e:	2a0f      	cmp	r2, #15
 8005650:	ddf2      	ble.n	8005638 <_malloc_r+0x100>
 8005652:	460c      	mov	r4, r1
 8005654:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8005658:	f854 8f08 	ldr.w	r8, [r4, #8]!
 800565c:	194b      	adds	r3, r1, r5
 800565e:	f045 0501 	orr.w	r5, r5, #1
 8005662:	604d      	str	r5, [r1, #4]
 8005664:	f042 0101 	orr.w	r1, r2, #1
 8005668:	f8c8 c00c 	str.w	ip, [r8, #12]
 800566c:	4630      	mov	r0, r6
 800566e:	f8cc 8008 	str.w	r8, [ip, #8]
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	f8c3 e00c 	str.w	lr, [r3, #12]
 800567a:	f8c3 e008 	str.w	lr, [r3, #8]
 800567e:	6059      	str	r1, [r3, #4]
 8005680:	509a      	str	r2, [r3, r2]
 8005682:	f000 facb 	bl	8005c1c <__malloc_unlock>
 8005686:	e01f      	b.n	80056c8 <_malloc_r+0x190>
 8005688:	2910      	cmp	r1, #16
 800568a:	d821      	bhi.n	80056d0 <_malloc_r+0x198>
 800568c:	f000 fac4 	bl	8005c18 <__malloc_lock>
 8005690:	2510      	movs	r5, #16
 8005692:	2306      	movs	r3, #6
 8005694:	2002      	movs	r0, #2
 8005696:	4f7e      	ldr	r7, [pc, #504]	; (8005890 <_malloc_r+0x358>)
 8005698:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800569c:	f1a3 0208 	sub.w	r2, r3, #8
 80056a0:	685c      	ldr	r4, [r3, #4]
 80056a2:	4294      	cmp	r4, r2
 80056a4:	f000 8145 	beq.w	8005932 <_malloc_r+0x3fa>
 80056a8:	6863      	ldr	r3, [r4, #4]
 80056aa:	68e1      	ldr	r1, [r4, #12]
 80056ac:	68a5      	ldr	r5, [r4, #8]
 80056ae:	f023 0303 	bic.w	r3, r3, #3
 80056b2:	4423      	add	r3, r4
 80056b4:	4630      	mov	r0, r6
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	60e9      	str	r1, [r5, #12]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	608d      	str	r5, [r1, #8]
 80056c0:	605a      	str	r2, [r3, #4]
 80056c2:	f000 faab 	bl	8005c1c <__malloc_unlock>
 80056c6:	3408      	adds	r4, #8
 80056c8:	4620      	mov	r0, r4
 80056ca:	b003      	add	sp, #12
 80056cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d0:	2400      	movs	r4, #0
 80056d2:	230c      	movs	r3, #12
 80056d4:	4620      	mov	r0, r4
 80056d6:	6033      	str	r3, [r6, #0]
 80056d8:	b003      	add	sp, #12
 80056da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056de:	2380      	movs	r3, #128	; 0x80
 80056e0:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80056e4:	203f      	movs	r0, #63	; 0x3f
 80056e6:	e749      	b.n	800557c <_malloc_r+0x44>
 80056e8:	4670      	mov	r0, lr
 80056ea:	e75d      	b.n	80055a8 <_malloc_r+0x70>
 80056ec:	4423      	add	r3, r4
 80056ee:	68e1      	ldr	r1, [r4, #12]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	68a5      	ldr	r5, [r4, #8]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	60e9      	str	r1, [r5, #12]
 80056fa:	4630      	mov	r0, r6
 80056fc:	608d      	str	r5, [r1, #8]
 80056fe:	605a      	str	r2, [r3, #4]
 8005700:	f000 fa8c 	bl	8005c1c <__malloc_unlock>
 8005704:	3408      	adds	r4, #8
 8005706:	4620      	mov	r0, r4
 8005708:	b003      	add	sp, #12
 800570a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800570e:	4423      	add	r3, r4
 8005710:	4630      	mov	r0, r6
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	f042 0201 	orr.w	r2, r2, #1
 8005718:	605a      	str	r2, [r3, #4]
 800571a:	f000 fa7f 	bl	8005c1c <__malloc_unlock>
 800571e:	3408      	adds	r4, #8
 8005720:	4620      	mov	r0, r4
 8005722:	b003      	add	sp, #12
 8005724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005728:	68bc      	ldr	r4, [r7, #8]
 800572a:	6863      	ldr	r3, [r4, #4]
 800572c:	f023 0803 	bic.w	r8, r3, #3
 8005730:	45a8      	cmp	r8, r5
 8005732:	d304      	bcc.n	800573e <_malloc_r+0x206>
 8005734:	ebc5 0308 	rsb	r3, r5, r8
 8005738:	2b0f      	cmp	r3, #15
 800573a:	f300 808c 	bgt.w	8005856 <_malloc_r+0x31e>
 800573e:	4b55      	ldr	r3, [pc, #340]	; (8005894 <_malloc_r+0x35c>)
 8005740:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80058a4 <_malloc_r+0x36c>
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	f8d9 3000 	ldr.w	r3, [r9]
 800574a:	3301      	adds	r3, #1
 800574c:	442a      	add	r2, r5
 800574e:	eb04 0a08 	add.w	sl, r4, r8
 8005752:	f000 8160 	beq.w	8005a16 <_malloc_r+0x4de>
 8005756:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800575a:	320f      	adds	r2, #15
 800575c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8005760:	f022 020f 	bic.w	r2, r2, #15
 8005764:	4611      	mov	r1, r2
 8005766:	4630      	mov	r0, r6
 8005768:	9201      	str	r2, [sp, #4]
 800576a:	f000 ff59 	bl	8006620 <_sbrk_r>
 800576e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005772:	4683      	mov	fp, r0
 8005774:	9a01      	ldr	r2, [sp, #4]
 8005776:	f000 8158 	beq.w	8005a2a <_malloc_r+0x4f2>
 800577a:	4582      	cmp	sl, r0
 800577c:	f200 80fc 	bhi.w	8005978 <_malloc_r+0x440>
 8005780:	4b45      	ldr	r3, [pc, #276]	; (8005898 <_malloc_r+0x360>)
 8005782:	6819      	ldr	r1, [r3, #0]
 8005784:	45da      	cmp	sl, fp
 8005786:	4411      	add	r1, r2
 8005788:	6019      	str	r1, [r3, #0]
 800578a:	f000 8153 	beq.w	8005a34 <_malloc_r+0x4fc>
 800578e:	f8d9 0000 	ldr.w	r0, [r9]
 8005792:	f8df e110 	ldr.w	lr, [pc, #272]	; 80058a4 <_malloc_r+0x36c>
 8005796:	3001      	adds	r0, #1
 8005798:	bf1b      	ittet	ne
 800579a:	ebca 0a0b 	rsbne	sl, sl, fp
 800579e:	4451      	addne	r1, sl
 80057a0:	f8ce b000 	streq.w	fp, [lr]
 80057a4:	6019      	strne	r1, [r3, #0]
 80057a6:	f01b 0107 	ands.w	r1, fp, #7
 80057aa:	f000 8117 	beq.w	80059dc <_malloc_r+0x4a4>
 80057ae:	f1c1 0008 	rsb	r0, r1, #8
 80057b2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 80057b6:	4483      	add	fp, r0
 80057b8:	3108      	adds	r1, #8
 80057ba:	445a      	add	r2, fp
 80057bc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80057c0:	ebc2 0901 	rsb	r9, r2, r1
 80057c4:	4649      	mov	r1, r9
 80057c6:	4630      	mov	r0, r6
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	f000 ff29 	bl	8006620 <_sbrk_r>
 80057ce:	1c43      	adds	r3, r0, #1
 80057d0:	9b01      	ldr	r3, [sp, #4]
 80057d2:	f000 813f 	beq.w	8005a54 <_malloc_r+0x51c>
 80057d6:	ebcb 0200 	rsb	r2, fp, r0
 80057da:	444a      	add	r2, r9
 80057dc:	f042 0201 	orr.w	r2, r2, #1
 80057e0:	6819      	ldr	r1, [r3, #0]
 80057e2:	f8c7 b008 	str.w	fp, [r7, #8]
 80057e6:	4449      	add	r1, r9
 80057e8:	42bc      	cmp	r4, r7
 80057ea:	f8cb 2004 	str.w	r2, [fp, #4]
 80057ee:	6019      	str	r1, [r3, #0]
 80057f0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8005898 <_malloc_r+0x360>
 80057f4:	d016      	beq.n	8005824 <_malloc_r+0x2ec>
 80057f6:	f1b8 0f0f 	cmp.w	r8, #15
 80057fa:	f240 80fd 	bls.w	80059f8 <_malloc_r+0x4c0>
 80057fe:	6862      	ldr	r2, [r4, #4]
 8005800:	f1a8 030c 	sub.w	r3, r8, #12
 8005804:	f023 0307 	bic.w	r3, r3, #7
 8005808:	18e0      	adds	r0, r4, r3
 800580a:	f002 0201 	and.w	r2, r2, #1
 800580e:	f04f 0e05 	mov.w	lr, #5
 8005812:	431a      	orrs	r2, r3
 8005814:	2b0f      	cmp	r3, #15
 8005816:	6062      	str	r2, [r4, #4]
 8005818:	f8c0 e004 	str.w	lr, [r0, #4]
 800581c:	f8c0 e008 	str.w	lr, [r0, #8]
 8005820:	f200 811c 	bhi.w	8005a5c <_malloc_r+0x524>
 8005824:	4b1d      	ldr	r3, [pc, #116]	; (800589c <_malloc_r+0x364>)
 8005826:	68bc      	ldr	r4, [r7, #8]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	4291      	cmp	r1, r2
 800582c:	bf88      	it	hi
 800582e:	6019      	strhi	r1, [r3, #0]
 8005830:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <_malloc_r+0x368>)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	4291      	cmp	r1, r2
 8005836:	6862      	ldr	r2, [r4, #4]
 8005838:	bf88      	it	hi
 800583a:	6019      	strhi	r1, [r3, #0]
 800583c:	f022 0203 	bic.w	r2, r2, #3
 8005840:	4295      	cmp	r5, r2
 8005842:	eba2 0305 	sub.w	r3, r2, r5
 8005846:	d801      	bhi.n	800584c <_malloc_r+0x314>
 8005848:	2b0f      	cmp	r3, #15
 800584a:	dc04      	bgt.n	8005856 <_malloc_r+0x31e>
 800584c:	4630      	mov	r0, r6
 800584e:	f000 f9e5 	bl	8005c1c <__malloc_unlock>
 8005852:	2400      	movs	r4, #0
 8005854:	e738      	b.n	80056c8 <_malloc_r+0x190>
 8005856:	1962      	adds	r2, r4, r5
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	f045 0501 	orr.w	r5, r5, #1
 8005860:	6065      	str	r5, [r4, #4]
 8005862:	4630      	mov	r0, r6
 8005864:	60ba      	str	r2, [r7, #8]
 8005866:	6053      	str	r3, [r2, #4]
 8005868:	f000 f9d8 	bl	8005c1c <__malloc_unlock>
 800586c:	3408      	adds	r4, #8
 800586e:	4620      	mov	r0, r4
 8005870:	b003      	add	sp, #12
 8005872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005876:	2b14      	cmp	r3, #20
 8005878:	d971      	bls.n	800595e <_malloc_r+0x426>
 800587a:	2b54      	cmp	r3, #84	; 0x54
 800587c:	f200 80a4 	bhi.w	80059c8 <_malloc_r+0x490>
 8005880:	0b28      	lsrs	r0, r5, #12
 8005882:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 8005886:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800588a:	306e      	adds	r0, #110	; 0x6e
 800588c:	e676      	b.n	800557c <_malloc_r+0x44>
 800588e:	bf00      	nop
 8005890:	20000464 	.word	0x20000464
 8005894:	20000a4c 	.word	0x20000a4c
 8005898:	20000a50 	.word	0x20000a50
 800589c:	20000a48 	.word	0x20000a48
 80058a0:	20000a44 	.word	0x20000a44
 80058a4:	20000870 	.word	0x20000870
 80058a8:	0a5a      	lsrs	r2, r3, #9
 80058aa:	2a04      	cmp	r2, #4
 80058ac:	d95e      	bls.n	800596c <_malloc_r+0x434>
 80058ae:	2a14      	cmp	r2, #20
 80058b0:	f200 80b3 	bhi.w	8005a1a <_malloc_r+0x4e2>
 80058b4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 80058b8:	0049      	lsls	r1, r1, #1
 80058ba:	325b      	adds	r2, #91	; 0x5b
 80058bc:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 80058c0:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80058c4:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8005aa4 <_malloc_r+0x56c>
 80058c8:	f1ac 0c08 	sub.w	ip, ip, #8
 80058cc:	458c      	cmp	ip, r1
 80058ce:	f000 8088 	beq.w	80059e2 <_malloc_r+0x4aa>
 80058d2:	684a      	ldr	r2, [r1, #4]
 80058d4:	f022 0203 	bic.w	r2, r2, #3
 80058d8:	4293      	cmp	r3, r2
 80058da:	d202      	bcs.n	80058e2 <_malloc_r+0x3aa>
 80058dc:	6889      	ldr	r1, [r1, #8]
 80058de:	458c      	cmp	ip, r1
 80058e0:	d1f7      	bne.n	80058d2 <_malloc_r+0x39a>
 80058e2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	f8c4 c00c 	str.w	ip, [r4, #12]
 80058ec:	60a1      	str	r1, [r4, #8]
 80058ee:	f8cc 4008 	str.w	r4, [ip, #8]
 80058f2:	60cc      	str	r4, [r1, #12]
 80058f4:	e688      	b.n	8005608 <_malloc_r+0xd0>
 80058f6:	1963      	adds	r3, r4, r5
 80058f8:	f042 0701 	orr.w	r7, r2, #1
 80058fc:	f045 0501 	orr.w	r5, r5, #1
 8005900:	6065      	str	r5, [r4, #4]
 8005902:	4630      	mov	r0, r6
 8005904:	614b      	str	r3, [r1, #20]
 8005906:	610b      	str	r3, [r1, #16]
 8005908:	f8c3 e00c 	str.w	lr, [r3, #12]
 800590c:	f8c3 e008 	str.w	lr, [r3, #8]
 8005910:	605f      	str	r7, [r3, #4]
 8005912:	509a      	str	r2, [r3, r2]
 8005914:	3408      	adds	r4, #8
 8005916:	f000 f981 	bl	8005c1c <__malloc_unlock>
 800591a:	e6d5      	b.n	80056c8 <_malloc_r+0x190>
 800591c:	684a      	ldr	r2, [r1, #4]
 800591e:	e673      	b.n	8005608 <_malloc_r+0xd0>
 8005920:	f108 0801 	add.w	r8, r8, #1
 8005924:	f018 0f03 	tst.w	r8, #3
 8005928:	f10c 0c08 	add.w	ip, ip, #8
 800592c:	f47f ae7f 	bne.w	800562e <_malloc_r+0xf6>
 8005930:	e030      	b.n	8005994 <_malloc_r+0x45c>
 8005932:	68dc      	ldr	r4, [r3, #12]
 8005934:	42a3      	cmp	r3, r4
 8005936:	bf08      	it	eq
 8005938:	3002      	addeq	r0, #2
 800593a:	f43f ae35 	beq.w	80055a8 <_malloc_r+0x70>
 800593e:	e6b3      	b.n	80056a8 <_malloc_r+0x170>
 8005940:	440b      	add	r3, r1
 8005942:	460c      	mov	r4, r1
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	68c9      	ldr	r1, [r1, #12]
 8005948:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800594c:	f042 0201 	orr.w	r2, r2, #1
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	4630      	mov	r0, r6
 8005954:	60e9      	str	r1, [r5, #12]
 8005956:	608d      	str	r5, [r1, #8]
 8005958:	f000 f960 	bl	8005c1c <__malloc_unlock>
 800595c:	e6b4      	b.n	80056c8 <_malloc_r+0x190>
 800595e:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 8005962:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 8005966:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800596a:	e607      	b.n	800557c <_malloc_r+0x44>
 800596c:	099a      	lsrs	r2, r3, #6
 800596e:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8005972:	0049      	lsls	r1, r1, #1
 8005974:	3238      	adds	r2, #56	; 0x38
 8005976:	e7a1      	b.n	80058bc <_malloc_r+0x384>
 8005978:	42bc      	cmp	r4, r7
 800597a:	4b4a      	ldr	r3, [pc, #296]	; (8005aa4 <_malloc_r+0x56c>)
 800597c:	f43f af00 	beq.w	8005780 <_malloc_r+0x248>
 8005980:	689c      	ldr	r4, [r3, #8]
 8005982:	6862      	ldr	r2, [r4, #4]
 8005984:	f022 0203 	bic.w	r2, r2, #3
 8005988:	e75a      	b.n	8005840 <_malloc_r+0x308>
 800598a:	f859 3908 	ldr.w	r3, [r9], #-8
 800598e:	4599      	cmp	r9, r3
 8005990:	f040 8082 	bne.w	8005a98 <_malloc_r+0x560>
 8005994:	f010 0f03 	tst.w	r0, #3
 8005998:	f100 30ff 	add.w	r0, r0, #4294967295
 800599c:	d1f5      	bne.n	800598a <_malloc_r+0x452>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	ea23 0304 	bic.w	r3, r3, r4
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	0064      	lsls	r4, r4, #1
 80059a8:	429c      	cmp	r4, r3
 80059aa:	f63f aebd 	bhi.w	8005728 <_malloc_r+0x1f0>
 80059ae:	2c00      	cmp	r4, #0
 80059b0:	f43f aeba 	beq.w	8005728 <_malloc_r+0x1f0>
 80059b4:	421c      	tst	r4, r3
 80059b6:	4640      	mov	r0, r8
 80059b8:	f47f ae35 	bne.w	8005626 <_malloc_r+0xee>
 80059bc:	0064      	lsls	r4, r4, #1
 80059be:	421c      	tst	r4, r3
 80059c0:	f100 0004 	add.w	r0, r0, #4
 80059c4:	d0fa      	beq.n	80059bc <_malloc_r+0x484>
 80059c6:	e62e      	b.n	8005626 <_malloc_r+0xee>
 80059c8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80059cc:	d818      	bhi.n	8005a00 <_malloc_r+0x4c8>
 80059ce:	0be8      	lsrs	r0, r5, #15
 80059d0:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 80059d4:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80059d8:	3077      	adds	r0, #119	; 0x77
 80059da:	e5cf      	b.n	800557c <_malloc_r+0x44>
 80059dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80059e0:	e6eb      	b.n	80057ba <_malloc_r+0x282>
 80059e2:	2101      	movs	r1, #1
 80059e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80059e8:	1092      	asrs	r2, r2, #2
 80059ea:	fa01 f202 	lsl.w	r2, r1, r2
 80059ee:	431a      	orrs	r2, r3
 80059f0:	f8c8 2004 	str.w	r2, [r8, #4]
 80059f4:	4661      	mov	r1, ip
 80059f6:	e777      	b.n	80058e8 <_malloc_r+0x3b0>
 80059f8:	2301      	movs	r3, #1
 80059fa:	f8cb 3004 	str.w	r3, [fp, #4]
 80059fe:	e725      	b.n	800584c <_malloc_r+0x314>
 8005a00:	f240 5254 	movw	r2, #1364	; 0x554
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d820      	bhi.n	8005a4a <_malloc_r+0x512>
 8005a08:	0ca8      	lsrs	r0, r5, #18
 8005a0a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 8005a0e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8005a12:	307c      	adds	r0, #124	; 0x7c
 8005a14:	e5b2      	b.n	800557c <_malloc_r+0x44>
 8005a16:	3210      	adds	r2, #16
 8005a18:	e6a4      	b.n	8005764 <_malloc_r+0x22c>
 8005a1a:	2a54      	cmp	r2, #84	; 0x54
 8005a1c:	d826      	bhi.n	8005a6c <_malloc_r+0x534>
 8005a1e:	0b1a      	lsrs	r2, r3, #12
 8005a20:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8005a24:	0049      	lsls	r1, r1, #1
 8005a26:	326e      	adds	r2, #110	; 0x6e
 8005a28:	e748      	b.n	80058bc <_malloc_r+0x384>
 8005a2a:	68bc      	ldr	r4, [r7, #8]
 8005a2c:	6862      	ldr	r2, [r4, #4]
 8005a2e:	f022 0203 	bic.w	r2, r2, #3
 8005a32:	e705      	b.n	8005840 <_malloc_r+0x308>
 8005a34:	f3ca 000b 	ubfx	r0, sl, #0, #12
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f47f aea8 	bne.w	800578e <_malloc_r+0x256>
 8005a3e:	4442      	add	r2, r8
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	605a      	str	r2, [r3, #4]
 8005a48:	e6ec      	b.n	8005824 <_malloc_r+0x2ec>
 8005a4a:	23fe      	movs	r3, #254	; 0xfe
 8005a4c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 8005a50:	207e      	movs	r0, #126	; 0x7e
 8005a52:	e593      	b.n	800557c <_malloc_r+0x44>
 8005a54:	2201      	movs	r2, #1
 8005a56:	f04f 0900 	mov.w	r9, #0
 8005a5a:	e6c1      	b.n	80057e0 <_malloc_r+0x2a8>
 8005a5c:	f104 0108 	add.w	r1, r4, #8
 8005a60:	4630      	mov	r0, r6
 8005a62:	f7ff fa53 	bl	8004f0c <_free_r>
 8005a66:	f8d9 1000 	ldr.w	r1, [r9]
 8005a6a:	e6db      	b.n	8005824 <_malloc_r+0x2ec>
 8005a6c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005a70:	d805      	bhi.n	8005a7e <_malloc_r+0x546>
 8005a72:	0bda      	lsrs	r2, r3, #15
 8005a74:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8005a78:	0049      	lsls	r1, r1, #1
 8005a7a:	3277      	adds	r2, #119	; 0x77
 8005a7c:	e71e      	b.n	80058bc <_malloc_r+0x384>
 8005a7e:	f240 5154 	movw	r1, #1364	; 0x554
 8005a82:	428a      	cmp	r2, r1
 8005a84:	d805      	bhi.n	8005a92 <_malloc_r+0x55a>
 8005a86:	0c9a      	lsrs	r2, r3, #18
 8005a88:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8005a8c:	0049      	lsls	r1, r1, #1
 8005a8e:	327c      	adds	r2, #124	; 0x7c
 8005a90:	e714      	b.n	80058bc <_malloc_r+0x384>
 8005a92:	21fe      	movs	r1, #254	; 0xfe
 8005a94:	227e      	movs	r2, #126	; 0x7e
 8005a96:	e711      	b.n	80058bc <_malloc_r+0x384>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	e784      	b.n	80059a6 <_malloc_r+0x46e>
 8005a9c:	08e8      	lsrs	r0, r5, #3
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	e5f8      	b.n	8005696 <_malloc_r+0x15e>
 8005aa4:	20000464 	.word	0x20000464
	...

08005ab0 <memchr>:
 8005ab0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005ab4:	2a10      	cmp	r2, #16
 8005ab6:	db2b      	blt.n	8005b10 <memchr+0x60>
 8005ab8:	f010 0f07 	tst.w	r0, #7
 8005abc:	d008      	beq.n	8005ad0 <memchr+0x20>
 8005abe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005ac2:	3a01      	subs	r2, #1
 8005ac4:	428b      	cmp	r3, r1
 8005ac6:	d02d      	beq.n	8005b24 <memchr+0x74>
 8005ac8:	f010 0f07 	tst.w	r0, #7
 8005acc:	b342      	cbz	r2, 8005b20 <memchr+0x70>
 8005ace:	d1f6      	bne.n	8005abe <memchr+0xe>
 8005ad0:	b4f0      	push	{r4, r5, r6, r7}
 8005ad2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005ad6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005ada:	f022 0407 	bic.w	r4, r2, #7
 8005ade:	f07f 0700 	mvns.w	r7, #0
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005ae8:	3c08      	subs	r4, #8
 8005aea:	ea85 0501 	eor.w	r5, r5, r1
 8005aee:	ea86 0601 	eor.w	r6, r6, r1
 8005af2:	fa85 f547 	uadd8	r5, r5, r7
 8005af6:	faa3 f587 	sel	r5, r3, r7
 8005afa:	fa86 f647 	uadd8	r6, r6, r7
 8005afe:	faa5 f687 	sel	r6, r5, r7
 8005b02:	b98e      	cbnz	r6, 8005b28 <memchr+0x78>
 8005b04:	d1ee      	bne.n	8005ae4 <memchr+0x34>
 8005b06:	bcf0      	pop	{r4, r5, r6, r7}
 8005b08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8005b0c:	f002 0207 	and.w	r2, r2, #7
 8005b10:	b132      	cbz	r2, 8005b20 <memchr+0x70>
 8005b12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005b16:	3a01      	subs	r2, #1
 8005b18:	ea83 0301 	eor.w	r3, r3, r1
 8005b1c:	b113      	cbz	r3, 8005b24 <memchr+0x74>
 8005b1e:	d1f8      	bne.n	8005b12 <memchr+0x62>
 8005b20:	2000      	movs	r0, #0
 8005b22:	4770      	bx	lr
 8005b24:	3801      	subs	r0, #1
 8005b26:	4770      	bx	lr
 8005b28:	2d00      	cmp	r5, #0
 8005b2a:	bf06      	itte	eq
 8005b2c:	4635      	moveq	r5, r6
 8005b2e:	3803      	subeq	r0, #3
 8005b30:	3807      	subne	r0, #7
 8005b32:	f015 0f01 	tst.w	r5, #1
 8005b36:	d107      	bne.n	8005b48 <memchr+0x98>
 8005b38:	3001      	adds	r0, #1
 8005b3a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8005b3e:	bf02      	ittt	eq
 8005b40:	3001      	addeq	r0, #1
 8005b42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8005b46:	3001      	addeq	r0, #1
 8005b48:	bcf0      	pop	{r4, r5, r6, r7}
 8005b4a:	3801      	subs	r0, #1
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop

08005b50 <memmove>:
 8005b50:	4288      	cmp	r0, r1
 8005b52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b54:	d90d      	bls.n	8005b72 <memmove+0x22>
 8005b56:	188b      	adds	r3, r1, r2
 8005b58:	4298      	cmp	r0, r3
 8005b5a:	d20a      	bcs.n	8005b72 <memmove+0x22>
 8005b5c:	1881      	adds	r1, r0, r2
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	d051      	beq.n	8005c06 <memmove+0xb6>
 8005b62:	1a9a      	subs	r2, r3, r2
 8005b64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b68:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d1f9      	bne.n	8005b64 <memmove+0x14>
 8005b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b72:	2a0f      	cmp	r2, #15
 8005b74:	d948      	bls.n	8005c08 <memmove+0xb8>
 8005b76:	ea41 0300 	orr.w	r3, r1, r0
 8005b7a:	079b      	lsls	r3, r3, #30
 8005b7c:	d146      	bne.n	8005c0c <memmove+0xbc>
 8005b7e:	f100 0410 	add.w	r4, r0, #16
 8005b82:	f101 0310 	add.w	r3, r1, #16
 8005b86:	4615      	mov	r5, r2
 8005b88:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8005b8c:	f844 6c10 	str.w	r6, [r4, #-16]
 8005b90:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8005b94:	f844 6c0c 	str.w	r6, [r4, #-12]
 8005b98:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8005b9c:	f844 6c08 	str.w	r6, [r4, #-8]
 8005ba0:	3d10      	subs	r5, #16
 8005ba2:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8005ba6:	f844 6c04 	str.w	r6, [r4, #-4]
 8005baa:	2d0f      	cmp	r5, #15
 8005bac:	f103 0310 	add.w	r3, r3, #16
 8005bb0:	f104 0410 	add.w	r4, r4, #16
 8005bb4:	d8e8      	bhi.n	8005b88 <memmove+0x38>
 8005bb6:	f1a2 0310 	sub.w	r3, r2, #16
 8005bba:	f023 030f 	bic.w	r3, r3, #15
 8005bbe:	f002 0e0f 	and.w	lr, r2, #15
 8005bc2:	3310      	adds	r3, #16
 8005bc4:	f1be 0f03 	cmp.w	lr, #3
 8005bc8:	4419      	add	r1, r3
 8005bca:	4403      	add	r3, r0
 8005bcc:	d921      	bls.n	8005c12 <memmove+0xc2>
 8005bce:	1f1e      	subs	r6, r3, #4
 8005bd0:	460d      	mov	r5, r1
 8005bd2:	4674      	mov	r4, lr
 8005bd4:	3c04      	subs	r4, #4
 8005bd6:	f855 7b04 	ldr.w	r7, [r5], #4
 8005bda:	f846 7f04 	str.w	r7, [r6, #4]!
 8005bde:	2c03      	cmp	r4, #3
 8005be0:	d8f8      	bhi.n	8005bd4 <memmove+0x84>
 8005be2:	f1ae 0404 	sub.w	r4, lr, #4
 8005be6:	f024 0403 	bic.w	r4, r4, #3
 8005bea:	3404      	adds	r4, #4
 8005bec:	4423      	add	r3, r4
 8005bee:	4421      	add	r1, r4
 8005bf0:	f002 0203 	and.w	r2, r2, #3
 8005bf4:	b162      	cbz	r2, 8005c10 <memmove+0xc0>
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c02:	428a      	cmp	r2, r1
 8005c04:	d1f9      	bne.n	8005bfa <memmove+0xaa>
 8005c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c08:	4603      	mov	r3, r0
 8005c0a:	e7f3      	b.n	8005bf4 <memmove+0xa4>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	e7f2      	b.n	8005bf6 <memmove+0xa6>
 8005c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c12:	4672      	mov	r2, lr
 8005c14:	e7ee      	b.n	8005bf4 <memmove+0xa4>
 8005c16:	bf00      	nop

08005c18 <__malloc_lock>:
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop

08005c1c <__malloc_unlock>:
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop

08005c20 <_Balloc>:
 8005c20:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005c22:	b570      	push	{r4, r5, r6, lr}
 8005c24:	4605      	mov	r5, r0
 8005c26:	460c      	mov	r4, r1
 8005c28:	b14b      	cbz	r3, 8005c3e <_Balloc+0x1e>
 8005c2a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005c2e:	b180      	cbz	r0, 8005c52 <_Balloc+0x32>
 8005c30:	6802      	ldr	r2, [r0, #0]
 8005c32:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8005c36:	2300      	movs	r3, #0
 8005c38:	6103      	str	r3, [r0, #16]
 8005c3a:	60c3      	str	r3, [r0, #12]
 8005c3c:	bd70      	pop	{r4, r5, r6, pc}
 8005c3e:	2221      	movs	r2, #33	; 0x21
 8005c40:	2104      	movs	r1, #4
 8005c42:	f002 f91b 	bl	8007e7c <_calloc_r>
 8005c46:	64e8      	str	r0, [r5, #76]	; 0x4c
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d1ed      	bne.n	8005c2a <_Balloc+0xa>
 8005c4e:	2000      	movs	r0, #0
 8005c50:	bd70      	pop	{r4, r5, r6, pc}
 8005c52:	2101      	movs	r1, #1
 8005c54:	fa01 f604 	lsl.w	r6, r1, r4
 8005c58:	1d72      	adds	r2, r6, #5
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	0092      	lsls	r2, r2, #2
 8005c5e:	f002 f90d 	bl	8007e7c <_calloc_r>
 8005c62:	2800      	cmp	r0, #0
 8005c64:	d0f3      	beq.n	8005c4e <_Balloc+0x2e>
 8005c66:	6044      	str	r4, [r0, #4]
 8005c68:	6086      	str	r6, [r0, #8]
 8005c6a:	e7e4      	b.n	8005c36 <_Balloc+0x16>

08005c6c <_Bfree>:
 8005c6c:	b131      	cbz	r1, 8005c7c <_Bfree+0x10>
 8005c6e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005c70:	684a      	ldr	r2, [r1, #4]
 8005c72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005c76:	6008      	str	r0, [r1, #0]
 8005c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop

08005c80 <__multadd>:
 8005c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c82:	690c      	ldr	r4, [r1, #16]
 8005c84:	b083      	sub	sp, #12
 8005c86:	460d      	mov	r5, r1
 8005c88:	4606      	mov	r6, r0
 8005c8a:	f101 0e14 	add.w	lr, r1, #20
 8005c8e:	2700      	movs	r7, #0
 8005c90:	f8de 0000 	ldr.w	r0, [lr]
 8005c94:	b281      	uxth	r1, r0
 8005c96:	fb02 3101 	mla	r1, r2, r1, r3
 8005c9a:	0c0b      	lsrs	r3, r1, #16
 8005c9c:	0c00      	lsrs	r0, r0, #16
 8005c9e:	fb02 3300 	mla	r3, r2, r0, r3
 8005ca2:	b289      	uxth	r1, r1
 8005ca4:	3701      	adds	r7, #1
 8005ca6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005caa:	42bc      	cmp	r4, r7
 8005cac:	f84e 1b04 	str.w	r1, [lr], #4
 8005cb0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8005cb4:	dcec      	bgt.n	8005c90 <__multadd+0x10>
 8005cb6:	b13b      	cbz	r3, 8005cc8 <__multadd+0x48>
 8005cb8:	68aa      	ldr	r2, [r5, #8]
 8005cba:	4294      	cmp	r4, r2
 8005cbc:	da07      	bge.n	8005cce <__multadd+0x4e>
 8005cbe:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8005cc2:	3401      	adds	r4, #1
 8005cc4:	6153      	str	r3, [r2, #20]
 8005cc6:	612c      	str	r4, [r5, #16]
 8005cc8:	4628      	mov	r0, r5
 8005cca:	b003      	add	sp, #12
 8005ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cce:	6869      	ldr	r1, [r5, #4]
 8005cd0:	9301      	str	r3, [sp, #4]
 8005cd2:	3101      	adds	r1, #1
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	f7ff ffa3 	bl	8005c20 <_Balloc>
 8005cda:	692a      	ldr	r2, [r5, #16]
 8005cdc:	3202      	adds	r2, #2
 8005cde:	f105 010c 	add.w	r1, r5, #12
 8005ce2:	4607      	mov	r7, r0
 8005ce4:	0092      	lsls	r2, r2, #2
 8005ce6:	300c      	adds	r0, #12
 8005ce8:	f7fc f9b6 	bl	8002058 <memcpy>
 8005cec:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8005cee:	6869      	ldr	r1, [r5, #4]
 8005cf0:	9b01      	ldr	r3, [sp, #4]
 8005cf2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8005cf6:	6028      	str	r0, [r5, #0]
 8005cf8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8005cfc:	463d      	mov	r5, r7
 8005cfe:	e7de      	b.n	8005cbe <__multadd+0x3e>

08005d00 <__hi0bits>:
 8005d00:	0c03      	lsrs	r3, r0, #16
 8005d02:	041b      	lsls	r3, r3, #16
 8005d04:	b9b3      	cbnz	r3, 8005d34 <__hi0bits+0x34>
 8005d06:	0400      	lsls	r0, r0, #16
 8005d08:	2310      	movs	r3, #16
 8005d0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005d0e:	bf04      	itt	eq
 8005d10:	0200      	lsleq	r0, r0, #8
 8005d12:	3308      	addeq	r3, #8
 8005d14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005d18:	bf04      	itt	eq
 8005d1a:	0100      	lsleq	r0, r0, #4
 8005d1c:	3304      	addeq	r3, #4
 8005d1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005d22:	bf04      	itt	eq
 8005d24:	0080      	lsleq	r0, r0, #2
 8005d26:	3302      	addeq	r3, #2
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	db07      	blt.n	8005d3c <__hi0bits+0x3c>
 8005d2c:	0042      	lsls	r2, r0, #1
 8005d2e:	d403      	bmi.n	8005d38 <__hi0bits+0x38>
 8005d30:	2020      	movs	r0, #32
 8005d32:	4770      	bx	lr
 8005d34:	2300      	movs	r3, #0
 8005d36:	e7e8      	b.n	8005d0a <__hi0bits+0xa>
 8005d38:	1c58      	adds	r0, r3, #1
 8005d3a:	4770      	bx	lr
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	4770      	bx	lr

08005d40 <__lo0bits>:
 8005d40:	6803      	ldr	r3, [r0, #0]
 8005d42:	f013 0207 	ands.w	r2, r3, #7
 8005d46:	d007      	beq.n	8005d58 <__lo0bits+0x18>
 8005d48:	07d9      	lsls	r1, r3, #31
 8005d4a:	d420      	bmi.n	8005d8e <__lo0bits+0x4e>
 8005d4c:	079a      	lsls	r2, r3, #30
 8005d4e:	d420      	bmi.n	8005d92 <__lo0bits+0x52>
 8005d50:	089b      	lsrs	r3, r3, #2
 8005d52:	6003      	str	r3, [r0, #0]
 8005d54:	2002      	movs	r0, #2
 8005d56:	4770      	bx	lr
 8005d58:	b299      	uxth	r1, r3
 8005d5a:	b909      	cbnz	r1, 8005d60 <__lo0bits+0x20>
 8005d5c:	0c1b      	lsrs	r3, r3, #16
 8005d5e:	2210      	movs	r2, #16
 8005d60:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005d64:	bf04      	itt	eq
 8005d66:	0a1b      	lsreq	r3, r3, #8
 8005d68:	3208      	addeq	r2, #8
 8005d6a:	0719      	lsls	r1, r3, #28
 8005d6c:	bf04      	itt	eq
 8005d6e:	091b      	lsreq	r3, r3, #4
 8005d70:	3204      	addeq	r2, #4
 8005d72:	0799      	lsls	r1, r3, #30
 8005d74:	bf04      	itt	eq
 8005d76:	089b      	lsreq	r3, r3, #2
 8005d78:	3202      	addeq	r2, #2
 8005d7a:	07d9      	lsls	r1, r3, #31
 8005d7c:	d404      	bmi.n	8005d88 <__lo0bits+0x48>
 8005d7e:	085b      	lsrs	r3, r3, #1
 8005d80:	d101      	bne.n	8005d86 <__lo0bits+0x46>
 8005d82:	2020      	movs	r0, #32
 8005d84:	4770      	bx	lr
 8005d86:	3201      	adds	r2, #1
 8005d88:	6003      	str	r3, [r0, #0]
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4770      	bx	lr
 8005d8e:	2000      	movs	r0, #0
 8005d90:	4770      	bx	lr
 8005d92:	085b      	lsrs	r3, r3, #1
 8005d94:	6003      	str	r3, [r0, #0]
 8005d96:	2001      	movs	r0, #1
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop

08005d9c <__i2b>:
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	460c      	mov	r4, r1
 8005da0:	2101      	movs	r1, #1
 8005da2:	f7ff ff3d 	bl	8005c20 <_Balloc>
 8005da6:	2201      	movs	r2, #1
 8005da8:	6144      	str	r4, [r0, #20]
 8005daa:	6102      	str	r2, [r0, #16]
 8005dac:	bd10      	pop	{r4, pc}
 8005dae:	bf00      	nop

08005db0 <__multiply>:
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	690d      	ldr	r5, [r1, #16]
 8005db6:	6917      	ldr	r7, [r2, #16]
 8005db8:	42bd      	cmp	r5, r7
 8005dba:	b083      	sub	sp, #12
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	4616      	mov	r6, r2
 8005dc0:	da04      	bge.n	8005dcc <__multiply+0x1c>
 8005dc2:	462a      	mov	r2, r5
 8005dc4:	4634      	mov	r4, r6
 8005dc6:	463d      	mov	r5, r7
 8005dc8:	460e      	mov	r6, r1
 8005dca:	4617      	mov	r7, r2
 8005dcc:	68a3      	ldr	r3, [r4, #8]
 8005dce:	6861      	ldr	r1, [r4, #4]
 8005dd0:	eb05 0807 	add.w	r8, r5, r7
 8005dd4:	4598      	cmp	r8, r3
 8005dd6:	bfc8      	it	gt
 8005dd8:	3101      	addgt	r1, #1
 8005dda:	f7ff ff21 	bl	8005c20 <_Balloc>
 8005dde:	f100 0c14 	add.w	ip, r0, #20
 8005de2:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8005de6:	45cc      	cmp	ip, r9
 8005de8:	9000      	str	r0, [sp, #0]
 8005dea:	d205      	bcs.n	8005df8 <__multiply+0x48>
 8005dec:	4663      	mov	r3, ip
 8005dee:	2100      	movs	r1, #0
 8005df0:	f843 1b04 	str.w	r1, [r3], #4
 8005df4:	4599      	cmp	r9, r3
 8005df6:	d8fb      	bhi.n	8005df0 <__multiply+0x40>
 8005df8:	f106 0214 	add.w	r2, r6, #20
 8005dfc:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8005e00:	f104 0314 	add.w	r3, r4, #20
 8005e04:	4552      	cmp	r2, sl
 8005e06:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 8005e0a:	d254      	bcs.n	8005eb6 <__multiply+0x106>
 8005e0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005e10:	4699      	mov	r9, r3
 8005e12:	f852 3b04 	ldr.w	r3, [r2], #4
 8005e16:	fa1f fb83 	uxth.w	fp, r3
 8005e1a:	f1bb 0f00 	cmp.w	fp, #0
 8005e1e:	d020      	beq.n	8005e62 <__multiply+0xb2>
 8005e20:	2000      	movs	r0, #0
 8005e22:	464f      	mov	r7, r9
 8005e24:	4666      	mov	r6, ip
 8005e26:	4605      	mov	r5, r0
 8005e28:	e000      	b.n	8005e2c <__multiply+0x7c>
 8005e2a:	461e      	mov	r6, r3
 8005e2c:	f857 4b04 	ldr.w	r4, [r7], #4
 8005e30:	6830      	ldr	r0, [r6, #0]
 8005e32:	b2a1      	uxth	r1, r4
 8005e34:	b283      	uxth	r3, r0
 8005e36:	fb0b 3101 	mla	r1, fp, r1, r3
 8005e3a:	0c24      	lsrs	r4, r4, #16
 8005e3c:	0c00      	lsrs	r0, r0, #16
 8005e3e:	194b      	adds	r3, r1, r5
 8005e40:	fb0b 0004 	mla	r0, fp, r4, r0
 8005e44:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8005e48:	b299      	uxth	r1, r3
 8005e4a:	4633      	mov	r3, r6
 8005e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005e50:	45be      	cmp	lr, r7
 8005e52:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8005e56:	f843 1b04 	str.w	r1, [r3], #4
 8005e5a:	d8e6      	bhi.n	8005e2a <__multiply+0x7a>
 8005e5c:	6075      	str	r5, [r6, #4]
 8005e5e:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8005e62:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8005e66:	d020      	beq.n	8005eaa <__multiply+0xfa>
 8005e68:	f8dc 3000 	ldr.w	r3, [ip]
 8005e6c:	4667      	mov	r7, ip
 8005e6e:	4618      	mov	r0, r3
 8005e70:	464d      	mov	r5, r9
 8005e72:	2100      	movs	r1, #0
 8005e74:	e000      	b.n	8005e78 <__multiply+0xc8>
 8005e76:	4637      	mov	r7, r6
 8005e78:	882c      	ldrh	r4, [r5, #0]
 8005e7a:	0c00      	lsrs	r0, r0, #16
 8005e7c:	fb0b 0004 	mla	r0, fp, r4, r0
 8005e80:	4401      	add	r1, r0
 8005e82:	b29c      	uxth	r4, r3
 8005e84:	463e      	mov	r6, r7
 8005e86:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8005e8a:	f846 3b04 	str.w	r3, [r6], #4
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f855 4b04 	ldr.w	r4, [r5], #4
 8005e94:	b283      	uxth	r3, r0
 8005e96:	0c24      	lsrs	r4, r4, #16
 8005e98:	fb0b 3404 	mla	r4, fp, r4, r3
 8005e9c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8005ea0:	45ae      	cmp	lr, r5
 8005ea2:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8005ea6:	d8e6      	bhi.n	8005e76 <__multiply+0xc6>
 8005ea8:	607b      	str	r3, [r7, #4]
 8005eaa:	4592      	cmp	sl, r2
 8005eac:	f10c 0c04 	add.w	ip, ip, #4
 8005eb0:	d8af      	bhi.n	8005e12 <__multiply+0x62>
 8005eb2:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005eb6:	f1b8 0f00 	cmp.w	r8, #0
 8005eba:	dd0b      	ble.n	8005ed4 <__multiply+0x124>
 8005ebc:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8005ec0:	f1a9 0904 	sub.w	r9, r9, #4
 8005ec4:	b11b      	cbz	r3, 8005ece <__multiply+0x11e>
 8005ec6:	e005      	b.n	8005ed4 <__multiply+0x124>
 8005ec8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8005ecc:	b913      	cbnz	r3, 8005ed4 <__multiply+0x124>
 8005ece:	f1b8 0801 	subs.w	r8, r8, #1
 8005ed2:	d1f9      	bne.n	8005ec8 <__multiply+0x118>
 8005ed4:	9800      	ldr	r0, [sp, #0]
 8005ed6:	f8c0 8010 	str.w	r8, [r0, #16]
 8005eda:	b003      	add	sp, #12
 8005edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ee0 <__pow5mult>:
 8005ee0:	f012 0303 	ands.w	r3, r2, #3
 8005ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee8:	4614      	mov	r4, r2
 8005eea:	4607      	mov	r7, r0
 8005eec:	d12e      	bne.n	8005f4c <__pow5mult+0x6c>
 8005eee:	460e      	mov	r6, r1
 8005ef0:	10a4      	asrs	r4, r4, #2
 8005ef2:	d01c      	beq.n	8005f2e <__pow5mult+0x4e>
 8005ef4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8005ef6:	b395      	cbz	r5, 8005f5e <__pow5mult+0x7e>
 8005ef8:	07e3      	lsls	r3, r4, #31
 8005efa:	f04f 0800 	mov.w	r8, #0
 8005efe:	d406      	bmi.n	8005f0e <__pow5mult+0x2e>
 8005f00:	1064      	asrs	r4, r4, #1
 8005f02:	d014      	beq.n	8005f2e <__pow5mult+0x4e>
 8005f04:	6828      	ldr	r0, [r5, #0]
 8005f06:	b1a8      	cbz	r0, 8005f34 <__pow5mult+0x54>
 8005f08:	4605      	mov	r5, r0
 8005f0a:	07e3      	lsls	r3, r4, #31
 8005f0c:	d5f8      	bpl.n	8005f00 <__pow5mult+0x20>
 8005f0e:	462a      	mov	r2, r5
 8005f10:	4631      	mov	r1, r6
 8005f12:	4638      	mov	r0, r7
 8005f14:	f7ff ff4c 	bl	8005db0 <__multiply>
 8005f18:	b1b6      	cbz	r6, 8005f48 <__pow5mult+0x68>
 8005f1a:	6872      	ldr	r2, [r6, #4]
 8005f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f1e:	1064      	asrs	r4, r4, #1
 8005f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f24:	6031      	str	r1, [r6, #0]
 8005f26:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	d1ea      	bne.n	8005f04 <__pow5mult+0x24>
 8005f2e:	4630      	mov	r0, r6
 8005f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f34:	462a      	mov	r2, r5
 8005f36:	4629      	mov	r1, r5
 8005f38:	4638      	mov	r0, r7
 8005f3a:	f7ff ff39 	bl	8005db0 <__multiply>
 8005f3e:	6028      	str	r0, [r5, #0]
 8005f40:	f8c0 8000 	str.w	r8, [r0]
 8005f44:	4605      	mov	r5, r0
 8005f46:	e7e0      	b.n	8005f0a <__pow5mult+0x2a>
 8005f48:	4606      	mov	r6, r0
 8005f4a:	e7d9      	b.n	8005f00 <__pow5mult+0x20>
 8005f4c:	1e5a      	subs	r2, r3, #1
 8005f4e:	4d0b      	ldr	r5, [pc, #44]	; (8005f7c <__pow5mult+0x9c>)
 8005f50:	2300      	movs	r3, #0
 8005f52:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8005f56:	f7ff fe93 	bl	8005c80 <__multadd>
 8005f5a:	4606      	mov	r6, r0
 8005f5c:	e7c8      	b.n	8005ef0 <__pow5mult+0x10>
 8005f5e:	2101      	movs	r1, #1
 8005f60:	4638      	mov	r0, r7
 8005f62:	f7ff fe5d 	bl	8005c20 <_Balloc>
 8005f66:	f240 2171 	movw	r1, #625	; 0x271
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	6141      	str	r1, [r0, #20]
 8005f70:	6102      	str	r2, [r0, #16]
 8005f72:	4605      	mov	r5, r0
 8005f74:	64b8      	str	r0, [r7, #72]	; 0x48
 8005f76:	6003      	str	r3, [r0, #0]
 8005f78:	e7be      	b.n	8005ef8 <__pow5mult+0x18>
 8005f7a:	bf00      	nop
 8005f7c:	080092b0 	.word	0x080092b0

08005f80 <__lshift>:
 8005f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f84:	4691      	mov	r9, r2
 8005f86:	690a      	ldr	r2, [r1, #16]
 8005f88:	688b      	ldr	r3, [r1, #8]
 8005f8a:	ea4f 1469 	mov.w	r4, r9, asr #5
 8005f8e:	eb04 0802 	add.w	r8, r4, r2
 8005f92:	f108 0501 	add.w	r5, r8, #1
 8005f96:	429d      	cmp	r5, r3
 8005f98:	460e      	mov	r6, r1
 8005f9a:	4682      	mov	sl, r0
 8005f9c:	6849      	ldr	r1, [r1, #4]
 8005f9e:	dd04      	ble.n	8005faa <__lshift+0x2a>
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	429d      	cmp	r5, r3
 8005fa4:	f101 0101 	add.w	r1, r1, #1
 8005fa8:	dcfa      	bgt.n	8005fa0 <__lshift+0x20>
 8005faa:	4650      	mov	r0, sl
 8005fac:	f7ff fe38 	bl	8005c20 <_Balloc>
 8005fb0:	2c00      	cmp	r4, #0
 8005fb2:	f100 0214 	add.w	r2, r0, #20
 8005fb6:	dd38      	ble.n	800602a <__lshift+0xaa>
 8005fb8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	f842 1b04 	str.w	r1, [r2], #4
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d1fb      	bne.n	8005fbe <__lshift+0x3e>
 8005fc6:	6934      	ldr	r4, [r6, #16]
 8005fc8:	f106 0114 	add.w	r1, r6, #20
 8005fcc:	f019 091f 	ands.w	r9, r9, #31
 8005fd0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8005fd4:	d021      	beq.n	800601a <__lshift+0x9a>
 8005fd6:	f1c9 0220 	rsb	r2, r9, #32
 8005fda:	2400      	movs	r4, #0
 8005fdc:	680f      	ldr	r7, [r1, #0]
 8005fde:	fa07 fc09 	lsl.w	ip, r7, r9
 8005fe2:	ea4c 0404 	orr.w	r4, ip, r4
 8005fe6:	469c      	mov	ip, r3
 8005fe8:	f843 4b04 	str.w	r4, [r3], #4
 8005fec:	f851 4b04 	ldr.w	r4, [r1], #4
 8005ff0:	458e      	cmp	lr, r1
 8005ff2:	fa24 f402 	lsr.w	r4, r4, r2
 8005ff6:	d8f1      	bhi.n	8005fdc <__lshift+0x5c>
 8005ff8:	f8cc 4004 	str.w	r4, [ip, #4]
 8005ffc:	b10c      	cbz	r4, 8006002 <__lshift+0x82>
 8005ffe:	f108 0502 	add.w	r5, r8, #2
 8006002:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8006006:	6872      	ldr	r2, [r6, #4]
 8006008:	3d01      	subs	r5, #1
 800600a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800600e:	6105      	str	r5, [r0, #16]
 8006010:	6031      	str	r1, [r6, #0]
 8006012:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8006016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601a:	3b04      	subs	r3, #4
 800601c:	f851 2b04 	ldr.w	r2, [r1], #4
 8006020:	f843 2f04 	str.w	r2, [r3, #4]!
 8006024:	458e      	cmp	lr, r1
 8006026:	d8f9      	bhi.n	800601c <__lshift+0x9c>
 8006028:	e7eb      	b.n	8006002 <__lshift+0x82>
 800602a:	4613      	mov	r3, r2
 800602c:	e7cb      	b.n	8005fc6 <__lshift+0x46>
 800602e:	bf00      	nop

08006030 <__mcmp>:
 8006030:	6902      	ldr	r2, [r0, #16]
 8006032:	690b      	ldr	r3, [r1, #16]
 8006034:	1ad2      	subs	r2, r2, r3
 8006036:	d113      	bne.n	8006060 <__mcmp+0x30>
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	3014      	adds	r0, #20
 800603c:	3114      	adds	r1, #20
 800603e:	4419      	add	r1, r3
 8006040:	b410      	push	{r4}
 8006042:	4403      	add	r3, r0
 8006044:	e001      	b.n	800604a <__mcmp+0x1a>
 8006046:	4298      	cmp	r0, r3
 8006048:	d20c      	bcs.n	8006064 <__mcmp+0x34>
 800604a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800604e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006052:	4294      	cmp	r4, r2
 8006054:	d0f7      	beq.n	8006046 <__mcmp+0x16>
 8006056:	d309      	bcc.n	800606c <__mcmp+0x3c>
 8006058:	2001      	movs	r0, #1
 800605a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	4610      	mov	r0, r2
 8006062:	4770      	bx	lr
 8006064:	2000      	movs	r0, #0
 8006066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	f04f 30ff 	mov.w	r0, #4294967295
 8006070:	e7f3      	b.n	800605a <__mcmp+0x2a>
 8006072:	bf00      	nop

08006074 <__mdiff>:
 8006074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006078:	690b      	ldr	r3, [r1, #16]
 800607a:	460f      	mov	r7, r1
 800607c:	6911      	ldr	r1, [r2, #16]
 800607e:	1a5b      	subs	r3, r3, r1
 8006080:	2b00      	cmp	r3, #0
 8006082:	4690      	mov	r8, r2
 8006084:	d117      	bne.n	80060b6 <__mdiff+0x42>
 8006086:	0089      	lsls	r1, r1, #2
 8006088:	f107 0214 	add.w	r2, r7, #20
 800608c:	f108 0514 	add.w	r5, r8, #20
 8006090:	1853      	adds	r3, r2, r1
 8006092:	4429      	add	r1, r5
 8006094:	e001      	b.n	800609a <__mdiff+0x26>
 8006096:	429a      	cmp	r2, r3
 8006098:	d25e      	bcs.n	8006158 <__mdiff+0xe4>
 800609a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 800609e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80060a2:	42a6      	cmp	r6, r4
 80060a4:	d0f7      	beq.n	8006096 <__mdiff+0x22>
 80060a6:	d260      	bcs.n	800616a <__mdiff+0xf6>
 80060a8:	463b      	mov	r3, r7
 80060aa:	4614      	mov	r4, r2
 80060ac:	4647      	mov	r7, r8
 80060ae:	f04f 0901 	mov.w	r9, #1
 80060b2:	4698      	mov	r8, r3
 80060b4:	e006      	b.n	80060c4 <__mdiff+0x50>
 80060b6:	db5d      	blt.n	8006174 <__mdiff+0x100>
 80060b8:	f107 0514 	add.w	r5, r7, #20
 80060bc:	f102 0414 	add.w	r4, r2, #20
 80060c0:	f04f 0900 	mov.w	r9, #0
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	f7ff fdab 	bl	8005c20 <_Balloc>
 80060ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80060ce:	693e      	ldr	r6, [r7, #16]
 80060d0:	f8c0 900c 	str.w	r9, [r0, #12]
 80060d4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 80060d8:	46a6      	mov	lr, r4
 80060da:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 80060de:	f100 0414 	add.w	r4, r0, #20
 80060e2:	2300      	movs	r3, #0
 80060e4:	f85e 1b04 	ldr.w	r1, [lr], #4
 80060e8:	f855 8b04 	ldr.w	r8, [r5], #4
 80060ec:	b28a      	uxth	r2, r1
 80060ee:	fa13 f388 	uxtah	r3, r3, r8
 80060f2:	0c09      	lsrs	r1, r1, #16
 80060f4:	1a9a      	subs	r2, r3, r2
 80060f6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 80060fa:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80060fe:	b292      	uxth	r2, r2
 8006100:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006104:	45f4      	cmp	ip, lr
 8006106:	f844 2b04 	str.w	r2, [r4], #4
 800610a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800610e:	d8e9      	bhi.n	80060e4 <__mdiff+0x70>
 8006110:	42af      	cmp	r7, r5
 8006112:	d917      	bls.n	8006144 <__mdiff+0xd0>
 8006114:	46a4      	mov	ip, r4
 8006116:	4629      	mov	r1, r5
 8006118:	f851 eb04 	ldr.w	lr, [r1], #4
 800611c:	fa13 f28e 	uxtah	r2, r3, lr
 8006120:	1413      	asrs	r3, r2, #16
 8006122:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 8006126:	b292      	uxth	r2, r2
 8006128:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800612c:	428f      	cmp	r7, r1
 800612e:	f84c 2b04 	str.w	r2, [ip], #4
 8006132:	ea4f 4323 	mov.w	r3, r3, asr #16
 8006136:	d8ef      	bhi.n	8006118 <__mdiff+0xa4>
 8006138:	43ed      	mvns	r5, r5
 800613a:	443d      	add	r5, r7
 800613c:	f025 0503 	bic.w	r5, r5, #3
 8006140:	3504      	adds	r5, #4
 8006142:	442c      	add	r4, r5
 8006144:	3c04      	subs	r4, #4
 8006146:	b922      	cbnz	r2, 8006152 <__mdiff+0xde>
 8006148:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800614c:	3e01      	subs	r6, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0fa      	beq.n	8006148 <__mdiff+0xd4>
 8006152:	6106      	str	r6, [r0, #16]
 8006154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006158:	2100      	movs	r1, #0
 800615a:	f7ff fd61 	bl	8005c20 <_Balloc>
 800615e:	2201      	movs	r2, #1
 8006160:	2300      	movs	r3, #0
 8006162:	6102      	str	r2, [r0, #16]
 8006164:	6143      	str	r3, [r0, #20]
 8006166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800616a:	462c      	mov	r4, r5
 800616c:	f04f 0900 	mov.w	r9, #0
 8006170:	4615      	mov	r5, r2
 8006172:	e7a7      	b.n	80060c4 <__mdiff+0x50>
 8006174:	463b      	mov	r3, r7
 8006176:	f107 0414 	add.w	r4, r7, #20
 800617a:	f108 0514 	add.w	r5, r8, #20
 800617e:	4647      	mov	r7, r8
 8006180:	f04f 0901 	mov.w	r9, #1
 8006184:	4698      	mov	r8, r3
 8006186:	e79d      	b.n	80060c4 <__mdiff+0x50>

08006188 <__d2b>:
 8006188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800618c:	b083      	sub	sp, #12
 800618e:	2101      	movs	r1, #1
 8006190:	461c      	mov	r4, r3
 8006192:	f3c3 550a 	ubfx	r5, r3, #20, #11
 8006196:	4617      	mov	r7, r2
 8006198:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800619a:	f7ff fd41 	bl	8005c20 <_Balloc>
 800619e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80061a2:	4681      	mov	r9, r0
 80061a4:	b10d      	cbz	r5, 80061aa <__d2b+0x22>
 80061a6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80061aa:	9401      	str	r4, [sp, #4]
 80061ac:	b31f      	cbz	r7, 80061f6 <__d2b+0x6e>
 80061ae:	a802      	add	r0, sp, #8
 80061b0:	f840 7d08 	str.w	r7, [r0, #-8]!
 80061b4:	f7ff fdc4 	bl	8005d40 <__lo0bits>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d135      	bne.n	8006228 <__d2b+0xa0>
 80061bc:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80061c0:	f8c9 2014 	str.w	r2, [r9, #20]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	bf0c      	ite	eq
 80061c8:	2101      	moveq	r1, #1
 80061ca:	2102      	movne	r1, #2
 80061cc:	f8c9 3018 	str.w	r3, [r9, #24]
 80061d0:	f8c9 1010 	str.w	r1, [r9, #16]
 80061d4:	b9dd      	cbnz	r5, 800620e <__d2b+0x86>
 80061d6:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 80061da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80061de:	6030      	str	r0, [r6, #0]
 80061e0:	6918      	ldr	r0, [r3, #16]
 80061e2:	f7ff fd8d 	bl	8005d00 <__hi0bits>
 80061e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061e8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80061ec:	6018      	str	r0, [r3, #0]
 80061ee:	4648      	mov	r0, r9
 80061f0:	b003      	add	sp, #12
 80061f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061f6:	a801      	add	r0, sp, #4
 80061f8:	f7ff fda2 	bl	8005d40 <__lo0bits>
 80061fc:	9b01      	ldr	r3, [sp, #4]
 80061fe:	f8c9 3014 	str.w	r3, [r9, #20]
 8006202:	2101      	movs	r1, #1
 8006204:	3020      	adds	r0, #32
 8006206:	f8c9 1010 	str.w	r1, [r9, #16]
 800620a:	2d00      	cmp	r5, #0
 800620c:	d0e3      	beq.n	80061d6 <__d2b+0x4e>
 800620e:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 8006212:	eb08 0300 	add.w	r3, r8, r0
 8006216:	6033      	str	r3, [r6, #0]
 8006218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800621a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800621e:	6018      	str	r0, [r3, #0]
 8006220:	4648      	mov	r0, r9
 8006222:	b003      	add	sp, #12
 8006224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006228:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800622c:	f1c0 0120 	rsb	r1, r0, #32
 8006230:	fa03 f101 	lsl.w	r1, r3, r1
 8006234:	430a      	orrs	r2, r1
 8006236:	40c3      	lsrs	r3, r0
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	f8c9 2014 	str.w	r2, [r9, #20]
 800623e:	e7c1      	b.n	80061c4 <__d2b+0x3c>

08006240 <_realloc_r>:
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	4617      	mov	r7, r2
 8006246:	b083      	sub	sp, #12
 8006248:	2900      	cmp	r1, #0
 800624a:	f000 80c1 	beq.w	80063d0 <_realloc_r+0x190>
 800624e:	460e      	mov	r6, r1
 8006250:	4681      	mov	r9, r0
 8006252:	f107 050b 	add.w	r5, r7, #11
 8006256:	f7ff fcdf 	bl	8005c18 <__malloc_lock>
 800625a:	f856 ec04 	ldr.w	lr, [r6, #-4]
 800625e:	2d16      	cmp	r5, #22
 8006260:	f02e 0403 	bic.w	r4, lr, #3
 8006264:	f1a6 0808 	sub.w	r8, r6, #8
 8006268:	d840      	bhi.n	80062ec <_realloc_r+0xac>
 800626a:	2210      	movs	r2, #16
 800626c:	4615      	mov	r5, r2
 800626e:	42af      	cmp	r7, r5
 8006270:	d841      	bhi.n	80062f6 <_realloc_r+0xb6>
 8006272:	4294      	cmp	r4, r2
 8006274:	da75      	bge.n	8006362 <_realloc_r+0x122>
 8006276:	4bc9      	ldr	r3, [pc, #804]	; (800659c <_realloc_r+0x35c>)
 8006278:	6899      	ldr	r1, [r3, #8]
 800627a:	eb08 0004 	add.w	r0, r8, r4
 800627e:	4288      	cmp	r0, r1
 8006280:	6841      	ldr	r1, [r0, #4]
 8006282:	f000 80d9 	beq.w	8006438 <_realloc_r+0x1f8>
 8006286:	f021 0301 	bic.w	r3, r1, #1
 800628a:	4403      	add	r3, r0
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	07db      	lsls	r3, r3, #31
 8006290:	d57d      	bpl.n	800638e <_realloc_r+0x14e>
 8006292:	f01e 0f01 	tst.w	lr, #1
 8006296:	d035      	beq.n	8006304 <_realloc_r+0xc4>
 8006298:	4639      	mov	r1, r7
 800629a:	4648      	mov	r0, r9
 800629c:	f7ff f94c 	bl	8005538 <_malloc_r>
 80062a0:	4607      	mov	r7, r0
 80062a2:	b1e0      	cbz	r0, 80062de <_realloc_r+0x9e>
 80062a4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80062a8:	f023 0301 	bic.w	r3, r3, #1
 80062ac:	4443      	add	r3, r8
 80062ae:	f1a0 0208 	sub.w	r2, r0, #8
 80062b2:	429a      	cmp	r2, r3
 80062b4:	f000 8144 	beq.w	8006540 <_realloc_r+0x300>
 80062b8:	1f22      	subs	r2, r4, #4
 80062ba:	2a24      	cmp	r2, #36	; 0x24
 80062bc:	f200 8131 	bhi.w	8006522 <_realloc_r+0x2e2>
 80062c0:	2a13      	cmp	r2, #19
 80062c2:	f200 8104 	bhi.w	80064ce <_realloc_r+0x28e>
 80062c6:	4603      	mov	r3, r0
 80062c8:	4632      	mov	r2, r6
 80062ca:	6811      	ldr	r1, [r2, #0]
 80062cc:	6019      	str	r1, [r3, #0]
 80062ce:	6851      	ldr	r1, [r2, #4]
 80062d0:	6059      	str	r1, [r3, #4]
 80062d2:	6892      	ldr	r2, [r2, #8]
 80062d4:	609a      	str	r2, [r3, #8]
 80062d6:	4631      	mov	r1, r6
 80062d8:	4648      	mov	r0, r9
 80062da:	f7fe fe17 	bl	8004f0c <_free_r>
 80062de:	4648      	mov	r0, r9
 80062e0:	f7ff fc9c 	bl	8005c1c <__malloc_unlock>
 80062e4:	4638      	mov	r0, r7
 80062e6:	b003      	add	sp, #12
 80062e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ec:	f025 0507 	bic.w	r5, r5, #7
 80062f0:	2d00      	cmp	r5, #0
 80062f2:	462a      	mov	r2, r5
 80062f4:	dabb      	bge.n	800626e <_realloc_r+0x2e>
 80062f6:	230c      	movs	r3, #12
 80062f8:	2000      	movs	r0, #0
 80062fa:	f8c9 3000 	str.w	r3, [r9]
 80062fe:	b003      	add	sp, #12
 8006300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006304:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8006308:	ebc3 0a08 	rsb	sl, r3, r8
 800630c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006310:	f023 0c03 	bic.w	ip, r3, #3
 8006314:	eb04 030c 	add.w	r3, r4, ip
 8006318:	4293      	cmp	r3, r2
 800631a:	dbbd      	blt.n	8006298 <_realloc_r+0x58>
 800631c:	4657      	mov	r7, sl
 800631e:	f8da 100c 	ldr.w	r1, [sl, #12]
 8006322:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8006326:	1f22      	subs	r2, r4, #4
 8006328:	2a24      	cmp	r2, #36	; 0x24
 800632a:	60c1      	str	r1, [r0, #12]
 800632c:	6088      	str	r0, [r1, #8]
 800632e:	f200 8117 	bhi.w	8006560 <_realloc_r+0x320>
 8006332:	2a13      	cmp	r2, #19
 8006334:	f240 8112 	bls.w	800655c <_realloc_r+0x31c>
 8006338:	6831      	ldr	r1, [r6, #0]
 800633a:	f8ca 1008 	str.w	r1, [sl, #8]
 800633e:	6871      	ldr	r1, [r6, #4]
 8006340:	f8ca 100c 	str.w	r1, [sl, #12]
 8006344:	2a1b      	cmp	r2, #27
 8006346:	f200 812b 	bhi.w	80065a0 <_realloc_r+0x360>
 800634a:	3608      	adds	r6, #8
 800634c:	f10a 0210 	add.w	r2, sl, #16
 8006350:	6831      	ldr	r1, [r6, #0]
 8006352:	6011      	str	r1, [r2, #0]
 8006354:	6871      	ldr	r1, [r6, #4]
 8006356:	6051      	str	r1, [r2, #4]
 8006358:	68b1      	ldr	r1, [r6, #8]
 800635a:	6091      	str	r1, [r2, #8]
 800635c:	463e      	mov	r6, r7
 800635e:	461c      	mov	r4, r3
 8006360:	46d0      	mov	r8, sl
 8006362:	1b63      	subs	r3, r4, r5
 8006364:	2b0f      	cmp	r3, #15
 8006366:	d81d      	bhi.n	80063a4 <_realloc_r+0x164>
 8006368:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	4323      	orrs	r3, r4
 8006372:	4444      	add	r4, r8
 8006374:	f8c8 3004 	str.w	r3, [r8, #4]
 8006378:	6863      	ldr	r3, [r4, #4]
 800637a:	f043 0301 	orr.w	r3, r3, #1
 800637e:	6063      	str	r3, [r4, #4]
 8006380:	4648      	mov	r0, r9
 8006382:	f7ff fc4b 	bl	8005c1c <__malloc_unlock>
 8006386:	4630      	mov	r0, r6
 8006388:	b003      	add	sp, #12
 800638a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800638e:	f021 0103 	bic.w	r1, r1, #3
 8006392:	4421      	add	r1, r4
 8006394:	4291      	cmp	r1, r2
 8006396:	db21      	blt.n	80063dc <_realloc_r+0x19c>
 8006398:	68c3      	ldr	r3, [r0, #12]
 800639a:	6882      	ldr	r2, [r0, #8]
 800639c:	460c      	mov	r4, r1
 800639e:	60d3      	str	r3, [r2, #12]
 80063a0:	609a      	str	r2, [r3, #8]
 80063a2:	e7de      	b.n	8006362 <_realloc_r+0x122>
 80063a4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80063a8:	eb08 0105 	add.w	r1, r8, r5
 80063ac:	f002 0201 	and.w	r2, r2, #1
 80063b0:	4315      	orrs	r5, r2
 80063b2:	f043 0201 	orr.w	r2, r3, #1
 80063b6:	440b      	add	r3, r1
 80063b8:	f8c8 5004 	str.w	r5, [r8, #4]
 80063bc:	604a      	str	r2, [r1, #4]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	f042 0201 	orr.w	r2, r2, #1
 80063c4:	3108      	adds	r1, #8
 80063c6:	605a      	str	r2, [r3, #4]
 80063c8:	4648      	mov	r0, r9
 80063ca:	f7fe fd9f 	bl	8004f0c <_free_r>
 80063ce:	e7d7      	b.n	8006380 <_realloc_r+0x140>
 80063d0:	4611      	mov	r1, r2
 80063d2:	b003      	add	sp, #12
 80063d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d8:	f7ff b8ae 	b.w	8005538 <_malloc_r>
 80063dc:	f01e 0f01 	tst.w	lr, #1
 80063e0:	f47f af5a 	bne.w	8006298 <_realloc_r+0x58>
 80063e4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80063e8:	ebc3 0a08 	rsb	sl, r3, r8
 80063ec:	f8da 3004 	ldr.w	r3, [sl, #4]
 80063f0:	f023 0c03 	bic.w	ip, r3, #3
 80063f4:	eb01 0e0c 	add.w	lr, r1, ip
 80063f8:	4596      	cmp	lr, r2
 80063fa:	db8b      	blt.n	8006314 <_realloc_r+0xd4>
 80063fc:	68c3      	ldr	r3, [r0, #12]
 80063fe:	6882      	ldr	r2, [r0, #8]
 8006400:	4657      	mov	r7, sl
 8006402:	60d3      	str	r3, [r2, #12]
 8006404:	609a      	str	r2, [r3, #8]
 8006406:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800640a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800640e:	60cb      	str	r3, [r1, #12]
 8006410:	1f22      	subs	r2, r4, #4
 8006412:	2a24      	cmp	r2, #36	; 0x24
 8006414:	6099      	str	r1, [r3, #8]
 8006416:	f200 8099 	bhi.w	800654c <_realloc_r+0x30c>
 800641a:	2a13      	cmp	r2, #19
 800641c:	d962      	bls.n	80064e4 <_realloc_r+0x2a4>
 800641e:	6833      	ldr	r3, [r6, #0]
 8006420:	f8ca 3008 	str.w	r3, [sl, #8]
 8006424:	6873      	ldr	r3, [r6, #4]
 8006426:	f8ca 300c 	str.w	r3, [sl, #12]
 800642a:	2a1b      	cmp	r2, #27
 800642c:	f200 80a0 	bhi.w	8006570 <_realloc_r+0x330>
 8006430:	3608      	adds	r6, #8
 8006432:	f10a 0310 	add.w	r3, sl, #16
 8006436:	e056      	b.n	80064e6 <_realloc_r+0x2a6>
 8006438:	f021 0b03 	bic.w	fp, r1, #3
 800643c:	44a3      	add	fp, r4
 800643e:	f105 0010 	add.w	r0, r5, #16
 8006442:	4583      	cmp	fp, r0
 8006444:	da59      	bge.n	80064fa <_realloc_r+0x2ba>
 8006446:	f01e 0f01 	tst.w	lr, #1
 800644a:	f47f af25 	bne.w	8006298 <_realloc_r+0x58>
 800644e:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8006452:	ebc1 0a08 	rsb	sl, r1, r8
 8006456:	f8da 1004 	ldr.w	r1, [sl, #4]
 800645a:	f021 0c03 	bic.w	ip, r1, #3
 800645e:	44e3      	add	fp, ip
 8006460:	4558      	cmp	r0, fp
 8006462:	f73f af57 	bgt.w	8006314 <_realloc_r+0xd4>
 8006466:	4657      	mov	r7, sl
 8006468:	f8da 100c 	ldr.w	r1, [sl, #12]
 800646c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8006470:	1f22      	subs	r2, r4, #4
 8006472:	2a24      	cmp	r2, #36	; 0x24
 8006474:	60c1      	str	r1, [r0, #12]
 8006476:	6088      	str	r0, [r1, #8]
 8006478:	f200 80b4 	bhi.w	80065e4 <_realloc_r+0x3a4>
 800647c:	2a13      	cmp	r2, #19
 800647e:	f240 80a5 	bls.w	80065cc <_realloc_r+0x38c>
 8006482:	6831      	ldr	r1, [r6, #0]
 8006484:	f8ca 1008 	str.w	r1, [sl, #8]
 8006488:	6871      	ldr	r1, [r6, #4]
 800648a:	f8ca 100c 	str.w	r1, [sl, #12]
 800648e:	2a1b      	cmp	r2, #27
 8006490:	f200 80af 	bhi.w	80065f2 <_realloc_r+0x3b2>
 8006494:	3608      	adds	r6, #8
 8006496:	f10a 0210 	add.w	r2, sl, #16
 800649a:	6831      	ldr	r1, [r6, #0]
 800649c:	6011      	str	r1, [r2, #0]
 800649e:	6871      	ldr	r1, [r6, #4]
 80064a0:	6051      	str	r1, [r2, #4]
 80064a2:	68b1      	ldr	r1, [r6, #8]
 80064a4:	6091      	str	r1, [r2, #8]
 80064a6:	eb0a 0105 	add.w	r1, sl, r5
 80064aa:	ebc5 020b 	rsb	r2, r5, fp
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	6099      	str	r1, [r3, #8]
 80064b4:	604a      	str	r2, [r1, #4]
 80064b6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	431d      	orrs	r5, r3
 80064c0:	4648      	mov	r0, r9
 80064c2:	f8ca 5004 	str.w	r5, [sl, #4]
 80064c6:	f7ff fba9 	bl	8005c1c <__malloc_unlock>
 80064ca:	4638      	mov	r0, r7
 80064cc:	e75c      	b.n	8006388 <_realloc_r+0x148>
 80064ce:	6833      	ldr	r3, [r6, #0]
 80064d0:	6003      	str	r3, [r0, #0]
 80064d2:	6873      	ldr	r3, [r6, #4]
 80064d4:	6043      	str	r3, [r0, #4]
 80064d6:	2a1b      	cmp	r2, #27
 80064d8:	d827      	bhi.n	800652a <_realloc_r+0x2ea>
 80064da:	f100 0308 	add.w	r3, r0, #8
 80064de:	f106 0208 	add.w	r2, r6, #8
 80064e2:	e6f2      	b.n	80062ca <_realloc_r+0x8a>
 80064e4:	463b      	mov	r3, r7
 80064e6:	6832      	ldr	r2, [r6, #0]
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	6872      	ldr	r2, [r6, #4]
 80064ec:	605a      	str	r2, [r3, #4]
 80064ee:	68b2      	ldr	r2, [r6, #8]
 80064f0:	609a      	str	r2, [r3, #8]
 80064f2:	463e      	mov	r6, r7
 80064f4:	4674      	mov	r4, lr
 80064f6:	46d0      	mov	r8, sl
 80064f8:	e733      	b.n	8006362 <_realloc_r+0x122>
 80064fa:	eb08 0105 	add.w	r1, r8, r5
 80064fe:	ebc5 0b0b 	rsb	fp, r5, fp
 8006502:	f04b 0201 	orr.w	r2, fp, #1
 8006506:	6099      	str	r1, [r3, #8]
 8006508:	604a      	str	r2, [r1, #4]
 800650a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	431d      	orrs	r5, r3
 8006514:	4648      	mov	r0, r9
 8006516:	f846 5c04 	str.w	r5, [r6, #-4]
 800651a:	f7ff fb7f 	bl	8005c1c <__malloc_unlock>
 800651e:	4630      	mov	r0, r6
 8006520:	e732      	b.n	8006388 <_realloc_r+0x148>
 8006522:	4631      	mov	r1, r6
 8006524:	f7ff fb14 	bl	8005b50 <memmove>
 8006528:	e6d5      	b.n	80062d6 <_realloc_r+0x96>
 800652a:	68b3      	ldr	r3, [r6, #8]
 800652c:	6083      	str	r3, [r0, #8]
 800652e:	68f3      	ldr	r3, [r6, #12]
 8006530:	60c3      	str	r3, [r0, #12]
 8006532:	2a24      	cmp	r2, #36	; 0x24
 8006534:	d028      	beq.n	8006588 <_realloc_r+0x348>
 8006536:	f100 0310 	add.w	r3, r0, #16
 800653a:	f106 0210 	add.w	r2, r6, #16
 800653e:	e6c4      	b.n	80062ca <_realloc_r+0x8a>
 8006540:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006544:	f023 0303 	bic.w	r3, r3, #3
 8006548:	441c      	add	r4, r3
 800654a:	e70a      	b.n	8006362 <_realloc_r+0x122>
 800654c:	4631      	mov	r1, r6
 800654e:	4638      	mov	r0, r7
 8006550:	4674      	mov	r4, lr
 8006552:	46d0      	mov	r8, sl
 8006554:	f7ff fafc 	bl	8005b50 <memmove>
 8006558:	463e      	mov	r6, r7
 800655a:	e702      	b.n	8006362 <_realloc_r+0x122>
 800655c:	463a      	mov	r2, r7
 800655e:	e6f7      	b.n	8006350 <_realloc_r+0x110>
 8006560:	4631      	mov	r1, r6
 8006562:	4638      	mov	r0, r7
 8006564:	461c      	mov	r4, r3
 8006566:	46d0      	mov	r8, sl
 8006568:	f7ff faf2 	bl	8005b50 <memmove>
 800656c:	463e      	mov	r6, r7
 800656e:	e6f8      	b.n	8006362 <_realloc_r+0x122>
 8006570:	68b3      	ldr	r3, [r6, #8]
 8006572:	f8ca 3010 	str.w	r3, [sl, #16]
 8006576:	68f3      	ldr	r3, [r6, #12]
 8006578:	f8ca 3014 	str.w	r3, [sl, #20]
 800657c:	2a24      	cmp	r2, #36	; 0x24
 800657e:	d01b      	beq.n	80065b8 <_realloc_r+0x378>
 8006580:	3610      	adds	r6, #16
 8006582:	f10a 0318 	add.w	r3, sl, #24
 8006586:	e7ae      	b.n	80064e6 <_realloc_r+0x2a6>
 8006588:	6933      	ldr	r3, [r6, #16]
 800658a:	6103      	str	r3, [r0, #16]
 800658c:	6973      	ldr	r3, [r6, #20]
 800658e:	6143      	str	r3, [r0, #20]
 8006590:	f106 0218 	add.w	r2, r6, #24
 8006594:	f100 0318 	add.w	r3, r0, #24
 8006598:	e697      	b.n	80062ca <_realloc_r+0x8a>
 800659a:	bf00      	nop
 800659c:	20000464 	.word	0x20000464
 80065a0:	68b1      	ldr	r1, [r6, #8]
 80065a2:	f8ca 1010 	str.w	r1, [sl, #16]
 80065a6:	68f1      	ldr	r1, [r6, #12]
 80065a8:	f8ca 1014 	str.w	r1, [sl, #20]
 80065ac:	2a24      	cmp	r2, #36	; 0x24
 80065ae:	d00f      	beq.n	80065d0 <_realloc_r+0x390>
 80065b0:	3610      	adds	r6, #16
 80065b2:	f10a 0218 	add.w	r2, sl, #24
 80065b6:	e6cb      	b.n	8006350 <_realloc_r+0x110>
 80065b8:	6933      	ldr	r3, [r6, #16]
 80065ba:	f8ca 3018 	str.w	r3, [sl, #24]
 80065be:	6973      	ldr	r3, [r6, #20]
 80065c0:	f8ca 301c 	str.w	r3, [sl, #28]
 80065c4:	3618      	adds	r6, #24
 80065c6:	f10a 0320 	add.w	r3, sl, #32
 80065ca:	e78c      	b.n	80064e6 <_realloc_r+0x2a6>
 80065cc:	463a      	mov	r2, r7
 80065ce:	e764      	b.n	800649a <_realloc_r+0x25a>
 80065d0:	6932      	ldr	r2, [r6, #16]
 80065d2:	f8ca 2018 	str.w	r2, [sl, #24]
 80065d6:	6972      	ldr	r2, [r6, #20]
 80065d8:	f8ca 201c 	str.w	r2, [sl, #28]
 80065dc:	3618      	adds	r6, #24
 80065de:	f10a 0220 	add.w	r2, sl, #32
 80065e2:	e6b5      	b.n	8006350 <_realloc_r+0x110>
 80065e4:	4631      	mov	r1, r6
 80065e6:	4638      	mov	r0, r7
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	f7ff fab1 	bl	8005b50 <memmove>
 80065ee:	9b01      	ldr	r3, [sp, #4]
 80065f0:	e759      	b.n	80064a6 <_realloc_r+0x266>
 80065f2:	68b1      	ldr	r1, [r6, #8]
 80065f4:	f8ca 1010 	str.w	r1, [sl, #16]
 80065f8:	68f1      	ldr	r1, [r6, #12]
 80065fa:	f8ca 1014 	str.w	r1, [sl, #20]
 80065fe:	2a24      	cmp	r2, #36	; 0x24
 8006600:	d003      	beq.n	800660a <_realloc_r+0x3ca>
 8006602:	3610      	adds	r6, #16
 8006604:	f10a 0218 	add.w	r2, sl, #24
 8006608:	e747      	b.n	800649a <_realloc_r+0x25a>
 800660a:	6932      	ldr	r2, [r6, #16]
 800660c:	f8ca 2018 	str.w	r2, [sl, #24]
 8006610:	6972      	ldr	r2, [r6, #20]
 8006612:	f8ca 201c 	str.w	r2, [sl, #28]
 8006616:	3618      	adds	r6, #24
 8006618:	f10a 0220 	add.w	r2, sl, #32
 800661c:	e73d      	b.n	800649a <_realloc_r+0x25a>
 800661e:	bf00      	nop

08006620 <_sbrk_r>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4c07      	ldr	r4, [pc, #28]	; (8006640 <_sbrk_r+0x20>)
 8006624:	2300      	movs	r3, #0
 8006626:	4605      	mov	r5, r0
 8006628:	4608      	mov	r0, r1
 800662a:	6023      	str	r3, [r4, #0]
 800662c:	f7fa fe44 	bl	80012b8 <_sbrk>
 8006630:	1c43      	adds	r3, r0, #1
 8006632:	d000      	beq.n	8006636 <_sbrk_r+0x16>
 8006634:	bd38      	pop	{r3, r4, r5, pc}
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0fb      	beq.n	8006634 <_sbrk_r+0x14>
 800663c:	602b      	str	r3, [r5, #0]
 800663e:	bd38      	pop	{r3, r4, r5, pc}
 8006640:	20000a7c 	.word	0x20000a7c

08006644 <__sread>:
 8006644:	b510      	push	{r4, lr}
 8006646:	460c      	mov	r4, r1
 8006648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664c:	f001 fd5a 	bl	8008104 <_read_r>
 8006650:	2800      	cmp	r0, #0
 8006652:	db03      	blt.n	800665c <__sread+0x18>
 8006654:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006656:	4403      	add	r3, r0
 8006658:	6523      	str	r3, [r4, #80]	; 0x50
 800665a:	bd10      	pop	{r4, pc}
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006662:	81a3      	strh	r3, [r4, #12]
 8006664:	bd10      	pop	{r4, pc}
 8006666:	bf00      	nop

08006668 <__swrite>:
 8006668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800666c:	4616      	mov	r6, r2
 800666e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006672:	461f      	mov	r7, r3
 8006674:	05d3      	lsls	r3, r2, #23
 8006676:	460c      	mov	r4, r1
 8006678:	4605      	mov	r5, r0
 800667a:	d507      	bpl.n	800668c <__swrite+0x24>
 800667c:	2200      	movs	r2, #0
 800667e:	2302      	movs	r3, #2
 8006680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006684:	f001 fd12 	bl	80080ac <_lseek_r>
 8006688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800668c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006690:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006694:	81a2      	strh	r2, [r4, #12]
 8006696:	463b      	mov	r3, r7
 8006698:	4632      	mov	r2, r6
 800669a:	4628      	mov	r0, r5
 800669c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066a0:	f001 bbd6 	b.w	8007e50 <_write_r>

080066a4 <__sseek>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	460c      	mov	r4, r1
 80066a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ac:	f001 fcfe 	bl	80080ac <_lseek_r>
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	1c42      	adds	r2, r0, #1
 80066b4:	bf0e      	itee	eq
 80066b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066be:	6520      	strne	r0, [r4, #80]	; 0x50
 80066c0:	81a3      	strh	r3, [r4, #12]
 80066c2:	bd10      	pop	{r4, pc}

080066c4 <__sclose>:
 80066c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c8:	f001 bc08 	b.w	8007edc <_close_r>
 80066cc:	0000      	movs	r0, r0
	...

080066d0 <_svfprintf_r>:
 80066d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d4:	b0c5      	sub	sp, #276	; 0x114
 80066d6:	460c      	mov	r4, r1
 80066d8:	9109      	str	r1, [sp, #36]	; 0x24
 80066da:	4615      	mov	r5, r2
 80066dc:	930e      	str	r3, [sp, #56]	; 0x38
 80066de:	900a      	str	r0, [sp, #40]	; 0x28
 80066e0:	f7fe fea8 	bl	8005434 <_localeconv_r>
 80066e4:	6803      	ldr	r3, [r0, #0]
 80066e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fb fe09 	bl	8002300 <strlen>
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	9016      	str	r0, [sp, #88]	; 0x58
 80066f2:	061e      	lsls	r6, r3, #24
 80066f4:	d503      	bpl.n	80066fe <_svfprintf_r+0x2e>
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f001 8133 	beq.w	8007964 <_svfprintf_r+0x1294>
 80066fe:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006998 <_svfprintf_r+0x2c8>
 8006702:	2300      	movs	r3, #0
 8006704:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006708:	9312      	str	r3, [sp, #72]	; 0x48
 800670a:	9329      	str	r3, [sp, #164]	; 0xa4
 800670c:	9328      	str	r3, [sp, #160]	; 0xa0
 800670e:	9319      	str	r3, [sp, #100]	; 0x64
 8006710:	930b      	str	r3, [sp, #44]	; 0x2c
 8006712:	f8df a290 	ldr.w	sl, [pc, #656]	; 80069a4 <_svfprintf_r+0x2d4>
 8006716:	ab34      	add	r3, sp, #208	; 0xd0
 8006718:	9327      	str	r3, [sp, #156]	; 0x9c
 800671a:	4699      	mov	r9, r3
 800671c:	46a8      	mov	r8, r5
 800671e:	f898 3000 	ldrb.w	r3, [r8]
 8006722:	4644      	mov	r4, r8
 8006724:	b1eb      	cbz	r3, 8006762 <_svfprintf_r+0x92>
 8006726:	2b25      	cmp	r3, #37	; 0x25
 8006728:	d102      	bne.n	8006730 <_svfprintf_r+0x60>
 800672a:	e01a      	b.n	8006762 <_svfprintf_r+0x92>
 800672c:	2b25      	cmp	r3, #37	; 0x25
 800672e:	d003      	beq.n	8006738 <_svfprintf_r+0x68>
 8006730:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1f9      	bne.n	800672c <_svfprintf_r+0x5c>
 8006738:	ebc8 0504 	rsb	r5, r8, r4
 800673c:	b18d      	cbz	r5, 8006762 <_svfprintf_r+0x92>
 800673e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006740:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006742:	f8c9 8000 	str.w	r8, [r9]
 8006746:	3301      	adds	r3, #1
 8006748:	442a      	add	r2, r5
 800674a:	2b07      	cmp	r3, #7
 800674c:	f8c9 5004 	str.w	r5, [r9, #4]
 8006750:	9229      	str	r2, [sp, #164]	; 0xa4
 8006752:	9328      	str	r3, [sp, #160]	; 0xa0
 8006754:	f300 80a6 	bgt.w	80068a4 <_svfprintf_r+0x1d4>
 8006758:	f109 0908 	add.w	r9, r9, #8
 800675c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800675e:	442b      	add	r3, r5
 8006760:	930b      	str	r3, [sp, #44]	; 0x2c
 8006762:	7823      	ldrb	r3, [r4, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 80a6 	beq.w	80068b6 <_svfprintf_r+0x1e6>
 800676a:	2300      	movs	r3, #0
 800676c:	461a      	mov	r2, r3
 800676e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006772:	4619      	mov	r1, r3
 8006774:	930c      	str	r3, [sp, #48]	; 0x30
 8006776:	9307      	str	r3, [sp, #28]
 8006778:	f04f 3bff 	mov.w	fp, #4294967295
 800677c:	7863      	ldrb	r3, [r4, #1]
 800677e:	f104 0801 	add.w	r8, r4, #1
 8006782:	465d      	mov	r5, fp
 8006784:	f108 0801 	add.w	r8, r8, #1
 8006788:	f1a3 0020 	sub.w	r0, r3, #32
 800678c:	2858      	cmp	r0, #88	; 0x58
 800678e:	f200 8434 	bhi.w	8006ffa <_svfprintf_r+0x92a>
 8006792:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006796:	03a0      	.short	0x03a0
 8006798:	04320432 	.word	0x04320432
 800679c:	043203a8 	.word	0x043203a8
 80067a0:	04320432 	.word	0x04320432
 80067a4:	04320432 	.word	0x04320432
 80067a8:	03af0432 	.word	0x03af0432
 80067ac:	043203bd 	.word	0x043203bd
 80067b0:	00e2005d 	.word	0x00e2005d
 80067b4:	01090432 	.word	0x01090432
 80067b8:	01100110 	.word	0x01100110
 80067bc:	01100110 	.word	0x01100110
 80067c0:	01100110 	.word	0x01100110
 80067c4:	01100110 	.word	0x01100110
 80067c8:	04320110 	.word	0x04320110
 80067cc:	04320432 	.word	0x04320432
 80067d0:	04320432 	.word	0x04320432
 80067d4:	04320432 	.word	0x04320432
 80067d8:	04320432 	.word	0x04320432
 80067dc:	01200432 	.word	0x01200432
 80067e0:	04320286 	.word	0x04320286
 80067e4:	04320286 	.word	0x04320286
 80067e8:	04320432 	.word	0x04320432
 80067ec:	02d40432 	.word	0x02d40432
 80067f0:	04320432 	.word	0x04320432
 80067f4:	043202e5 	.word	0x043202e5
 80067f8:	04320432 	.word	0x04320432
 80067fc:	04320432 	.word	0x04320432
 8006800:	0432030f 	.word	0x0432030f
 8006804:	033d0432 	.word	0x033d0432
 8006808:	04320432 	.word	0x04320432
 800680c:	04320432 	.word	0x04320432
 8006810:	04320432 	.word	0x04320432
 8006814:	04320432 	.word	0x04320432
 8006818:	04320432 	.word	0x04320432
 800681c:	0391037e 	.word	0x0391037e
 8006820:	02860286 	.word	0x02860286
 8006824:	03990286 	.word	0x03990286
 8006828:	04320391 	.word	0x04320391
 800682c:	04070432 	.word	0x04070432
 8006830:	04120432 	.word	0x04120432
 8006834:	006400a3 	.word	0x006400a3
 8006838:	043203c2 	.word	0x043203c2
 800683c:	043203c9 	.word	0x043203c9
 8006840:	043203ea 	.word	0x043203ea
 8006844:	03f20432 	.word	0x03f20432
 8006848:	980c      	ldr	r0, [sp, #48]	; 0x30
 800684a:	930e      	str	r3, [sp, #56]	; 0x38
 800684c:	4240      	negs	r0, r0
 800684e:	900c      	str	r0, [sp, #48]	; 0x30
 8006850:	9b07      	ldr	r3, [sp, #28]
 8006852:	f043 0304 	orr.w	r3, r3, #4
 8006856:	9307      	str	r3, [sp, #28]
 8006858:	f898 3000 	ldrb.w	r3, [r8]
 800685c:	e792      	b.n	8006784 <_svfprintf_r+0xb4>
 800685e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006860:	46ab      	mov	fp, r5
 8006862:	2100      	movs	r1, #0
 8006864:	6804      	ldr	r4, [r0, #0]
 8006866:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800686a:	1d07      	adds	r7, r0, #4
 800686c:	9807      	ldr	r0, [sp, #28]
 800686e:	2330      	movs	r3, #48	; 0x30
 8006870:	2278      	movs	r2, #120	; 0x78
 8006872:	458b      	cmp	fp, r1
 8006874:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8006878:	f04f 0500 	mov.w	r5, #0
 800687c:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8006880:	f040 0302 	orr.w	r3, r0, #2
 8006884:	f2c0 83d6 	blt.w	8007034 <_svfprintf_r+0x964>
 8006888:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 800688c:	f043 0302 	orr.w	r3, r3, #2
 8006890:	9307      	str	r3, [sp, #28]
 8006892:	ea54 0305 	orrs.w	r3, r4, r5
 8006896:	970e      	str	r7, [sp, #56]	; 0x38
 8006898:	f000 83a2 	beq.w	8006fe0 <_svfprintf_r+0x910>
 800689c:	460f      	mov	r7, r1
 800689e:	9211      	str	r2, [sp, #68]	; 0x44
 80068a0:	483f      	ldr	r0, [pc, #252]	; (80069a0 <_svfprintf_r+0x2d0>)
 80068a2:	e2e6      	b.n	8006e72 <_svfprintf_r+0x7a2>
 80068a4:	aa27      	add	r2, sp, #156	; 0x9c
 80068a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80068aa:	f001 fc41 	bl	8008130 <__ssprint_r>
 80068ae:	b948      	cbnz	r0, 80068c4 <_svfprintf_r+0x1f4>
 80068b0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80068b4:	e752      	b.n	800675c <_svfprintf_r+0x8c>
 80068b6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80068b8:	b123      	cbz	r3, 80068c4 <_svfprintf_r+0x1f4>
 80068ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80068bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068be:	aa27      	add	r2, sp, #156	; 0x9c
 80068c0:	f001 fc36 	bl	8008130 <__ssprint_r>
 80068c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c6:	899b      	ldrh	r3, [r3, #12]
 80068c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80068cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ce:	bf18      	it	ne
 80068d0:	f04f 33ff 	movne.w	r3, #4294967295
 80068d4:	4618      	mov	r0, r3
 80068d6:	b045      	add	sp, #276	; 0x114
 80068d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068dc:	9311      	str	r3, [sp, #68]	; 0x44
 80068de:	46ab      	mov	fp, r5
 80068e0:	2a00      	cmp	r2, #0
 80068e2:	f041 823b 	bne.w	8007d5c <_svfprintf_r+0x168c>
 80068e6:	9a07      	ldr	r2, [sp, #28]
 80068e8:	f012 0320 	ands.w	r3, r2, #32
 80068ec:	f000 8246 	beq.w	8006d7c <_svfprintf_r+0x6ac>
 80068f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80068f2:	3707      	adds	r7, #7
 80068f4:	f027 0307 	bic.w	r3, r7, #7
 80068f8:	2700      	movs	r7, #0
 80068fa:	f103 0108 	add.w	r1, r3, #8
 80068fe:	45bb      	cmp	fp, r7
 8006900:	910e      	str	r1, [sp, #56]	; 0x38
 8006902:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006906:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800690a:	f2c0 8764 	blt.w	80077d6 <_svfprintf_r+0x1106>
 800690e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006912:	9307      	str	r3, [sp, #28]
 8006914:	ea54 0305 	orrs.w	r3, r4, r5
 8006918:	f000 8384 	beq.w	8007024 <_svfprintf_r+0x954>
 800691c:	ae34      	add	r6, sp, #208	; 0xd0
 800691e:	08e2      	lsrs	r2, r4, #3
 8006920:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8006924:	08e9      	lsrs	r1, r5, #3
 8006926:	f004 0307 	and.w	r3, r4, #7
 800692a:	460d      	mov	r5, r1
 800692c:	4614      	mov	r4, r2
 800692e:	3330      	adds	r3, #48	; 0x30
 8006930:	ea54 0205 	orrs.w	r2, r4, r5
 8006934:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8006938:	d1f1      	bne.n	800691e <_svfprintf_r+0x24e>
 800693a:	9a07      	ldr	r2, [sp, #28]
 800693c:	07d1      	lsls	r1, r2, #31
 800693e:	f140 808f 	bpl.w	8006a60 <_svfprintf_r+0x390>
 8006942:	2b30      	cmp	r3, #48	; 0x30
 8006944:	f000 808c 	beq.w	8006a60 <_svfprintf_r+0x390>
 8006948:	2230      	movs	r2, #48	; 0x30
 800694a:	1e73      	subs	r3, r6, #1
 800694c:	f806 2c01 	strb.w	r2, [r6, #-1]
 8006950:	aa34      	add	r2, sp, #208	; 0xd0
 8006952:	1ad2      	subs	r2, r2, r3
 8006954:	920d      	str	r2, [sp, #52]	; 0x34
 8006956:	461e      	mov	r6, r3
 8006958:	e085      	b.n	8006a66 <_svfprintf_r+0x396>
 800695a:	f898 3000 	ldrb.w	r3, [r8]
 800695e:	2b2a      	cmp	r3, #42	; 0x2a
 8006960:	f108 0401 	add.w	r4, r8, #1
 8006964:	f001 81ec 	beq.w	8007d40 <_svfprintf_r+0x1670>
 8006968:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800696c:	2809      	cmp	r0, #9
 800696e:	bf98      	it	ls
 8006970:	2500      	movls	r5, #0
 8006972:	f201 818e 	bhi.w	8007c92 <_svfprintf_r+0x15c2>
 8006976:	f814 3b01 	ldrb.w	r3, [r4], #1
 800697a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800697e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8006982:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006986:	2809      	cmp	r0, #9
 8006988:	d9f5      	bls.n	8006976 <_svfprintf_r+0x2a6>
 800698a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800698e:	46a0      	mov	r8, r4
 8006990:	e6fa      	b.n	8006788 <_svfprintf_r+0xb8>
 8006992:	bf00      	nop
 8006994:	f3af 8000 	nop.w
	...
 80069a0:	0800917c 	.word	0x0800917c
 80069a4:	080092bc 	.word	0x080092bc
 80069a8:	9b07      	ldr	r3, [sp, #28]
 80069aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ae:	9307      	str	r3, [sp, #28]
 80069b0:	f898 3000 	ldrb.w	r3, [r8]
 80069b4:	e6e6      	b.n	8006784 <_svfprintf_r+0xb4>
 80069b6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80069ba:	2300      	movs	r3, #0
 80069bc:	461c      	mov	r4, r3
 80069be:	f818 3b01 	ldrb.w	r3, [r8], #1
 80069c2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80069c6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80069ca:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80069ce:	2809      	cmp	r0, #9
 80069d0:	d9f5      	bls.n	80069be <_svfprintf_r+0x2ee>
 80069d2:	940c      	str	r4, [sp, #48]	; 0x30
 80069d4:	e6d8      	b.n	8006788 <_svfprintf_r+0xb8>
 80069d6:	9311      	str	r3, [sp, #68]	; 0x44
 80069d8:	46ab      	mov	fp, r5
 80069da:	2a00      	cmp	r2, #0
 80069dc:	f041 81cc 	bne.w	8007d78 <_svfprintf_r+0x16a8>
 80069e0:	9b07      	ldr	r3, [sp, #28]
 80069e2:	f043 0310 	orr.w	r3, r3, #16
 80069e6:	9307      	str	r3, [sp, #28]
 80069e8:	9b07      	ldr	r3, [sp, #28]
 80069ea:	069c      	lsls	r4, r3, #26
 80069ec:	f140 8537 	bpl.w	800745e <_svfprintf_r+0xd8e>
 80069f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80069f2:	3707      	adds	r7, #7
 80069f4:	f027 0707 	bic.w	r7, r7, #7
 80069f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069fc:	f107 0108 	add.w	r1, r7, #8
 8006a00:	910e      	str	r1, [sp, #56]	; 0x38
 8006a02:	4614      	mov	r4, r2
 8006a04:	461d      	mov	r5, r3
 8006a06:	2a00      	cmp	r2, #0
 8006a08:	f173 0300 	sbcs.w	r3, r3, #0
 8006a0c:	f2c0 8562 	blt.w	80074d4 <_svfprintf_r+0xe04>
 8006a10:	f1bb 0f00 	cmp.w	fp, #0
 8006a14:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006a18:	f2c0 853f 	blt.w	800749a <_svfprintf_r+0xdca>
 8006a1c:	9b07      	ldr	r3, [sp, #28]
 8006a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a22:	9307      	str	r3, [sp, #28]
 8006a24:	ea54 0305 	orrs.w	r3, r4, r5
 8006a28:	f000 81e8 	beq.w	8006dfc <_svfprintf_r+0x72c>
 8006a2c:	2d00      	cmp	r5, #0
 8006a2e:	bf08      	it	eq
 8006a30:	2c0a      	cmpeq	r4, #10
 8006a32:	f0c0 81e8 	bcc.w	8006e06 <_svfprintf_r+0x736>
 8006a36:	ae34      	add	r6, sp, #208	; 0xd0
 8006a38:	4620      	mov	r0, r4
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	220a      	movs	r2, #10
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f002 f914 	bl	8008c6c <__aeabi_uldivmod>
 8006a44:	3230      	adds	r2, #48	; 0x30
 8006a46:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	2300      	movs	r3, #0
 8006a50:	220a      	movs	r2, #10
 8006a52:	f002 f90b 	bl	8008c6c <__aeabi_uldivmod>
 8006a56:	4604      	mov	r4, r0
 8006a58:	460d      	mov	r5, r1
 8006a5a:	ea54 0305 	orrs.w	r3, r4, r5
 8006a5e:	d1eb      	bne.n	8006a38 <_svfprintf_r+0x368>
 8006a60:	ab34      	add	r3, sp, #208	; 0xd0
 8006a62:	1b9b      	subs	r3, r3, r6
 8006a64:	930d      	str	r3, [sp, #52]	; 0x34
 8006a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a68:	455b      	cmp	r3, fp
 8006a6a:	bfb8      	it	lt
 8006a6c:	465b      	movlt	r3, fp
 8006a6e:	9308      	str	r3, [sp, #32]
 8006a70:	2300      	movs	r3, #0
 8006a72:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a74:	b117      	cbz	r7, 8006a7c <_svfprintf_r+0x3ac>
 8006a76:	9b08      	ldr	r3, [sp, #32]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	9308      	str	r3, [sp, #32]
 8006a7c:	9b07      	ldr	r3, [sp, #28]
 8006a7e:	f013 0302 	ands.w	r3, r3, #2
 8006a82:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a84:	d002      	beq.n	8006a8c <_svfprintf_r+0x3bc>
 8006a86:	9b08      	ldr	r3, [sp, #32]
 8006a88:	3302      	adds	r3, #2
 8006a8a:	9308      	str	r3, [sp, #32]
 8006a8c:	9b07      	ldr	r3, [sp, #28]
 8006a8e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8006a92:	9310      	str	r3, [sp, #64]	; 0x40
 8006a94:	f040 82db 	bne.w	800704e <_svfprintf_r+0x97e>
 8006a98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a9a:	9a08      	ldr	r2, [sp, #32]
 8006a9c:	1a9d      	subs	r5, r3, r2
 8006a9e:	2d00      	cmp	r5, #0
 8006aa0:	f340 82d5 	ble.w	800704e <_svfprintf_r+0x97e>
 8006aa4:	2d10      	cmp	r5, #16
 8006aa6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8006aa8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8006aaa:	4fa8      	ldr	r7, [pc, #672]	; (8006d4c <_svfprintf_r+0x67c>)
 8006aac:	dd27      	ble.n	8006afe <_svfprintf_r+0x42e>
 8006aae:	9618      	str	r6, [sp, #96]	; 0x60
 8006ab0:	4648      	mov	r0, r9
 8006ab2:	2410      	movs	r4, #16
 8006ab4:	46b9      	mov	r9, r7
 8006ab6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006ab8:	462f      	mov	r7, r5
 8006aba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006abc:	e004      	b.n	8006ac8 <_svfprintf_r+0x3f8>
 8006abe:	3f10      	subs	r7, #16
 8006ac0:	2f10      	cmp	r7, #16
 8006ac2:	f100 0008 	add.w	r0, r0, #8
 8006ac6:	dd16      	ble.n	8006af6 <_svfprintf_r+0x426>
 8006ac8:	3201      	adds	r2, #1
 8006aca:	4ba0      	ldr	r3, [pc, #640]	; (8006d4c <_svfprintf_r+0x67c>)
 8006acc:	9228      	str	r2, [sp, #160]	; 0xa0
 8006ace:	3110      	adds	r1, #16
 8006ad0:	2a07      	cmp	r2, #7
 8006ad2:	9129      	str	r1, [sp, #164]	; 0xa4
 8006ad4:	e880 0018 	stmia.w	r0, {r3, r4}
 8006ad8:	ddf1      	ble.n	8006abe <_svfprintf_r+0x3ee>
 8006ada:	aa27      	add	r2, sp, #156	; 0x9c
 8006adc:	4631      	mov	r1, r6
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f001 fb26 	bl	8008130 <__ssprint_r>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	f47f aeed 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8006aea:	3f10      	subs	r7, #16
 8006aec:	2f10      	cmp	r7, #16
 8006aee:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8006af0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8006af2:	a834      	add	r0, sp, #208	; 0xd0
 8006af4:	dce8      	bgt.n	8006ac8 <_svfprintf_r+0x3f8>
 8006af6:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8006af8:	463d      	mov	r5, r7
 8006afa:	464f      	mov	r7, r9
 8006afc:	4681      	mov	r9, r0
 8006afe:	3201      	adds	r2, #1
 8006b00:	186c      	adds	r4, r5, r1
 8006b02:	2a07      	cmp	r2, #7
 8006b04:	9429      	str	r4, [sp, #164]	; 0xa4
 8006b06:	9228      	str	r2, [sp, #160]	; 0xa0
 8006b08:	f8c9 7000 	str.w	r7, [r9]
 8006b0c:	f8c9 5004 	str.w	r5, [r9, #4]
 8006b10:	f300 842d 	bgt.w	800736e <_svfprintf_r+0xc9e>
 8006b14:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006b18:	f109 0908 	add.w	r9, r9, #8
 8006b1c:	b177      	cbz	r7, 8006b3c <_svfprintf_r+0x46c>
 8006b1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006b20:	3301      	adds	r3, #1
 8006b22:	3401      	adds	r4, #1
 8006b24:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8006b28:	2201      	movs	r2, #1
 8006b2a:	2b07      	cmp	r3, #7
 8006b2c:	9429      	str	r4, [sp, #164]	; 0xa4
 8006b2e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006b30:	e889 0006 	stmia.w	r9, {r1, r2}
 8006b34:	f300 83a5 	bgt.w	8007282 <_svfprintf_r+0xbb2>
 8006b38:	f109 0908 	add.w	r9, r9, #8
 8006b3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b3e:	b16b      	cbz	r3, 8006b5c <_svfprintf_r+0x48c>
 8006b40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006b42:	3301      	adds	r3, #1
 8006b44:	3402      	adds	r4, #2
 8006b46:	a920      	add	r1, sp, #128	; 0x80
 8006b48:	2202      	movs	r2, #2
 8006b4a:	2b07      	cmp	r3, #7
 8006b4c:	9429      	str	r4, [sp, #164]	; 0xa4
 8006b4e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006b50:	e889 0006 	stmia.w	r9, {r1, r2}
 8006b54:	f300 83a1 	bgt.w	800729a <_svfprintf_r+0xbca>
 8006b58:	f109 0908 	add.w	r9, r9, #8
 8006b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b5e:	2b80      	cmp	r3, #128	; 0x80
 8006b60:	f000 82e1 	beq.w	8007126 <_svfprintf_r+0xa56>
 8006b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b66:	ebc3 070b 	rsb	r7, r3, fp
 8006b6a:	2f00      	cmp	r7, #0
 8006b6c:	dd33      	ble.n	8006bd6 <_svfprintf_r+0x506>
 8006b6e:	4a78      	ldr	r2, [pc, #480]	; (8006d50 <_svfprintf_r+0x680>)
 8006b70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006b72:	920f      	str	r2, [sp, #60]	; 0x3c
 8006b74:	2f10      	cmp	r7, #16
 8006b76:	dd22      	ble.n	8006bbe <_svfprintf_r+0x4ee>
 8006b78:	4622      	mov	r2, r4
 8006b7a:	f04f 0b10 	mov.w	fp, #16
 8006b7e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006b80:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006b82:	e004      	b.n	8006b8e <_svfprintf_r+0x4be>
 8006b84:	3f10      	subs	r7, #16
 8006b86:	2f10      	cmp	r7, #16
 8006b88:	f109 0908 	add.w	r9, r9, #8
 8006b8c:	dd16      	ble.n	8006bbc <_svfprintf_r+0x4ec>
 8006b8e:	3301      	adds	r3, #1
 8006b90:	3210      	adds	r2, #16
 8006b92:	2b07      	cmp	r3, #7
 8006b94:	9229      	str	r2, [sp, #164]	; 0xa4
 8006b96:	9328      	str	r3, [sp, #160]	; 0xa0
 8006b98:	e889 0c00 	stmia.w	r9, {sl, fp}
 8006b9c:	ddf2      	ble.n	8006b84 <_svfprintf_r+0x4b4>
 8006b9e:	aa27      	add	r2, sp, #156	; 0x9c
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f001 fac4 	bl	8008130 <__ssprint_r>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	f47f ae8b 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8006bae:	3f10      	subs	r7, #16
 8006bb0:	2f10      	cmp	r7, #16
 8006bb2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006bb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006bb6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006bba:	dce8      	bgt.n	8006b8e <_svfprintf_r+0x4be>
 8006bbc:	4614      	mov	r4, r2
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bc2:	9328      	str	r3, [sp, #160]	; 0xa0
 8006bc4:	443c      	add	r4, r7
 8006bc6:	2b07      	cmp	r3, #7
 8006bc8:	9429      	str	r4, [sp, #164]	; 0xa4
 8006bca:	e889 0084 	stmia.w	r9, {r2, r7}
 8006bce:	f300 834c 	bgt.w	800726a <_svfprintf_r+0xb9a>
 8006bd2:	f109 0908 	add.w	r9, r9, #8
 8006bd6:	9b07      	ldr	r3, [sp, #28]
 8006bd8:	05da      	lsls	r2, r3, #23
 8006bda:	f100 823a 	bmi.w	8007052 <_svfprintf_r+0x982>
 8006bde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006be0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006be2:	f8c9 6000 	str.w	r6, [r9]
 8006be6:	3301      	adds	r3, #1
 8006be8:	440c      	add	r4, r1
 8006bea:	2b07      	cmp	r3, #7
 8006bec:	9429      	str	r4, [sp, #164]	; 0xa4
 8006bee:	f8c9 1004 	str.w	r1, [r9, #4]
 8006bf2:	9328      	str	r3, [sp, #160]	; 0xa0
 8006bf4:	f300 8323 	bgt.w	800723e <_svfprintf_r+0xb6e>
 8006bf8:	f109 0908 	add.w	r9, r9, #8
 8006bfc:	9b07      	ldr	r3, [sp, #28]
 8006bfe:	0759      	lsls	r1, r3, #29
 8006c00:	d53f      	bpl.n	8006c82 <_svfprintf_r+0x5b2>
 8006c02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c04:	9a08      	ldr	r2, [sp, #32]
 8006c06:	1a9d      	subs	r5, r3, r2
 8006c08:	2d00      	cmp	r5, #0
 8006c0a:	dd3a      	ble.n	8006c82 <_svfprintf_r+0x5b2>
 8006c0c:	2d10      	cmp	r5, #16
 8006c0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006c10:	4f4e      	ldr	r7, [pc, #312]	; (8006d4c <_svfprintf_r+0x67c>)
 8006c12:	dd23      	ble.n	8006c5c <_svfprintf_r+0x58c>
 8006c14:	4622      	mov	r2, r4
 8006c16:	2610      	movs	r6, #16
 8006c18:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006c1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006c1e:	e004      	b.n	8006c2a <_svfprintf_r+0x55a>
 8006c20:	3d10      	subs	r5, #16
 8006c22:	2d10      	cmp	r5, #16
 8006c24:	f109 0908 	add.w	r9, r9, #8
 8006c28:	dd17      	ble.n	8006c5a <_svfprintf_r+0x58a>
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	4947      	ldr	r1, [pc, #284]	; (8006d4c <_svfprintf_r+0x67c>)
 8006c2e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006c30:	3210      	adds	r2, #16
 8006c32:	2b07      	cmp	r3, #7
 8006c34:	9229      	str	r2, [sp, #164]	; 0xa4
 8006c36:	e889 0042 	stmia.w	r9, {r1, r6}
 8006c3a:	ddf1      	ble.n	8006c20 <_svfprintf_r+0x550>
 8006c3c:	aa27      	add	r2, sp, #156	; 0x9c
 8006c3e:	4621      	mov	r1, r4
 8006c40:	4658      	mov	r0, fp
 8006c42:	f001 fa75 	bl	8008130 <__ssprint_r>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	f47f ae3c 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8006c4c:	3d10      	subs	r5, #16
 8006c4e:	2d10      	cmp	r5, #16
 8006c50:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006c52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006c54:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006c58:	dce7      	bgt.n	8006c2a <_svfprintf_r+0x55a>
 8006c5a:	4614      	mov	r4, r2
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	442c      	add	r4, r5
 8006c60:	2b07      	cmp	r3, #7
 8006c62:	9429      	str	r4, [sp, #164]	; 0xa4
 8006c64:	9328      	str	r3, [sp, #160]	; 0xa0
 8006c66:	f8c9 7000 	str.w	r7, [r9]
 8006c6a:	f8c9 5004 	str.w	r5, [r9, #4]
 8006c6e:	dd08      	ble.n	8006c82 <_svfprintf_r+0x5b2>
 8006c70:	aa27      	add	r2, sp, #156	; 0x9c
 8006c72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006c76:	f001 fa5b 	bl	8008130 <__ssprint_r>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	f47f ae22 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8006c80:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c86:	9908      	ldr	r1, [sp, #32]
 8006c88:	428a      	cmp	r2, r1
 8006c8a:	bfac      	ite	ge
 8006c8c:	189b      	addge	r3, r3, r2
 8006c8e:	185b      	addlt	r3, r3, r1
 8006c90:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c92:	2c00      	cmp	r4, #0
 8006c94:	f040 82df 	bne.w	8007256 <_svfprintf_r+0xb86>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	9328      	str	r3, [sp, #160]	; 0xa0
 8006c9c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006ca0:	e53d      	b.n	800671e <_svfprintf_r+0x4e>
 8006ca2:	9311      	str	r3, [sp, #68]	; 0x44
 8006ca4:	46ab      	mov	fp, r5
 8006ca6:	2a00      	cmp	r2, #0
 8006ca8:	f041 806a 	bne.w	8007d80 <_svfprintf_r+0x16b0>
 8006cac:	9b07      	ldr	r3, [sp, #28]
 8006cae:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006cb0:	071a      	lsls	r2, r3, #28
 8006cb2:	f107 0707 	add.w	r7, r7, #7
 8006cb6:	f140 8576 	bpl.w	80077a6 <_svfprintf_r+0x10d6>
 8006cba:	f027 0307 	bic.w	r3, r7, #7
 8006cbe:	ed93 7b00 	vldr	d7, [r3]
 8006cc2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006cc6:	f103 0208 	add.w	r2, r3, #8
 8006cca:	920e      	str	r2, [sp, #56]	; 0x38
 8006ccc:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8006cd0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8006cd4:	911a      	str	r1, [sp, #104]	; 0x68
 8006cd6:	931b      	str	r3, [sp, #108]	; 0x6c
 8006cd8:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8006cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	4b1b      	ldr	r3, [pc, #108]	; (8006d54 <_svfprintf_r+0x684>)
 8006ce6:	f001 ff83 	bl	8008bf0 <__aeabi_dcmpun>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	f040 84da 	bne.w	80076a4 <_svfprintf_r+0xfd4>
 8006cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf4:	4b17      	ldr	r3, [pc, #92]	; (8006d54 <_svfprintf_r+0x684>)
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	f001 ff5b 	bl	8008bb4 <__aeabi_dcmple>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	f040 84d0 	bne.w	80076a4 <_svfprintf_r+0xfd4>
 8006d04:	2200      	movs	r2, #0
 8006d06:	2300      	movs	r3, #0
 8006d08:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006d0c:	f001 ff48 	bl	8008ba0 <__aeabi_dcmplt>
 8006d10:	2800      	cmp	r0, #0
 8006d12:	f040 875a 	bne.w	8007bca <_svfprintf_r+0x14fa>
 8006d16:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006d1a:	4e0f      	ldr	r6, [pc, #60]	; (8006d58 <_svfprintf_r+0x688>)
 8006d1c:	4b0f      	ldr	r3, [pc, #60]	; (8006d5c <_svfprintf_r+0x68c>)
 8006d1e:	9907      	ldr	r1, [sp, #28]
 8006d20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006d24:	9107      	str	r1, [sp, #28]
 8006d26:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006d28:	2203      	movs	r2, #3
 8006d2a:	f04f 0b00 	mov.w	fp, #0
 8006d2e:	9208      	str	r2, [sp, #32]
 8006d30:	2947      	cmp	r1, #71	; 0x47
 8006d32:	bfd8      	it	le
 8006d34:	461e      	movle	r6, r3
 8006d36:	920d      	str	r2, [sp, #52]	; 0x34
 8006d38:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8006d3c:	e69a      	b.n	8006a74 <_svfprintf_r+0x3a4>
 8006d3e:	9b07      	ldr	r3, [sp, #28]
 8006d40:	f043 0308 	orr.w	r3, r3, #8
 8006d44:	9307      	str	r3, [sp, #28]
 8006d46:	f898 3000 	ldrb.w	r3, [r8]
 8006d4a:	e51b      	b.n	8006784 <_svfprintf_r+0xb4>
 8006d4c:	080092cc 	.word	0x080092cc
 8006d50:	080092bc 	.word	0x080092bc
 8006d54:	7fefffff 	.word	0x7fefffff
 8006d58:	0800915c 	.word	0x0800915c
 8006d5c:	08009158 	.word	0x08009158
 8006d60:	9311      	str	r3, [sp, #68]	; 0x44
 8006d62:	46ab      	mov	fp, r5
 8006d64:	2a00      	cmp	r2, #0
 8006d66:	f041 8017 	bne.w	8007d98 <_svfprintf_r+0x16c8>
 8006d6a:	9b07      	ldr	r3, [sp, #28]
 8006d6c:	f043 0310 	orr.w	r3, r3, #16
 8006d70:	9307      	str	r3, [sp, #28]
 8006d72:	9a07      	ldr	r2, [sp, #28]
 8006d74:	f012 0320 	ands.w	r3, r2, #32
 8006d78:	f47f adba 	bne.w	80068f0 <_svfprintf_r+0x220>
 8006d7c:	9907      	ldr	r1, [sp, #28]
 8006d7e:	f011 0210 	ands.w	r2, r1, #16
 8006d82:	f000 845b 	beq.w	800763c <_svfprintf_r+0xf6c>
 8006d86:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006d88:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006d8c:	f1bb 0f00 	cmp.w	fp, #0
 8006d90:	6804      	ldr	r4, [r0, #0]
 8006d92:	f100 0704 	add.w	r7, r0, #4
 8006d96:	f04f 0500 	mov.w	r5, #0
 8006d9a:	f2c0 851b 	blt.w	80077d4 <_svfprintf_r+0x1104>
 8006d9e:	460a      	mov	r2, r1
 8006da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006da4:	9207      	str	r2, [sp, #28]
 8006da6:	ea54 0205 	orrs.w	r2, r4, r5
 8006daa:	970e      	str	r7, [sp, #56]	; 0x38
 8006dac:	f000 813a 	beq.w	8007024 <_svfprintf_r+0x954>
 8006db0:	461f      	mov	r7, r3
 8006db2:	e5b3      	b.n	800691c <_svfprintf_r+0x24c>
 8006db4:	9311      	str	r3, [sp, #68]	; 0x44
 8006db6:	46ab      	mov	fp, r5
 8006db8:	2a00      	cmp	r2, #0
 8006dba:	f040 87e9 	bne.w	8007d90 <_svfprintf_r+0x16c0>
 8006dbe:	9b07      	ldr	r3, [sp, #28]
 8006dc0:	f043 0310 	orr.w	r3, r3, #16
 8006dc4:	9307      	str	r3, [sp, #28]
 8006dc6:	9a07      	ldr	r2, [sp, #28]
 8006dc8:	f012 0320 	ands.w	r3, r2, #32
 8006dcc:	f000 832c 	beq.w	8007428 <_svfprintf_r+0xd58>
 8006dd0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006dd2:	3707      	adds	r7, #7
 8006dd4:	f027 0307 	bic.w	r3, r7, #7
 8006dd8:	2700      	movs	r7, #0
 8006dda:	f103 0108 	add.w	r1, r3, #8
 8006dde:	45bb      	cmp	fp, r7
 8006de0:	910e      	str	r1, [sp, #56]	; 0x38
 8006de2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006de6:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006dea:	f2c0 8356 	blt.w	800749a <_svfprintf_r+0xdca>
 8006dee:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006df2:	9307      	str	r3, [sp, #28]
 8006df4:	ea54 0305 	orrs.w	r3, r4, r5
 8006df8:	f47f ae18 	bne.w	8006a2c <_svfprintf_r+0x35c>
 8006dfc:	f1bb 0f00 	cmp.w	fp, #0
 8006e00:	f000 80f5 	beq.w	8006fee <_svfprintf_r+0x91e>
 8006e04:	2400      	movs	r4, #0
 8006e06:	ae44      	add	r6, sp, #272	; 0x110
 8006e08:	3430      	adds	r4, #48	; 0x30
 8006e0a:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8006e0e:	e627      	b.n	8006a60 <_svfprintf_r+0x390>
 8006e10:	9311      	str	r3, [sp, #68]	; 0x44
 8006e12:	46ab      	mov	fp, r5
 8006e14:	2a00      	cmp	r2, #0
 8006e16:	f040 87b7 	bne.w	8007d88 <_svfprintf_r+0x16b8>
 8006e1a:	9b07      	ldr	r3, [sp, #28]
 8006e1c:	48af      	ldr	r0, [pc, #700]	; (80070dc <_svfprintf_r+0xa0c>)
 8006e1e:	069d      	lsls	r5, r3, #26
 8006e20:	f140 80b5 	bpl.w	8006f8e <_svfprintf_r+0x8be>
 8006e24:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006e26:	3707      	adds	r7, #7
 8006e28:	f027 0307 	bic.w	r3, r7, #7
 8006e2c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006e30:	f103 0208 	add.w	r2, r3, #8
 8006e34:	920e      	str	r2, [sp, #56]	; 0x38
 8006e36:	9a07      	ldr	r2, [sp, #28]
 8006e38:	f012 0701 	ands.w	r7, r2, #1
 8006e3c:	f000 8239 	beq.w	80072b2 <_svfprintf_r+0xbe2>
 8006e40:	ea54 0305 	orrs.w	r3, r4, r5
 8006e44:	f000 8504 	beq.w	8007850 <_svfprintf_r+0x1180>
 8006e48:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8006e4c:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8006e50:	2700      	movs	r7, #0
 8006e52:	9a07      	ldr	r2, [sp, #28]
 8006e54:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006e58:	2330      	movs	r3, #48	; 0x30
 8006e5a:	45bb      	cmp	fp, r7
 8006e5c:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8006e60:	f042 0302 	orr.w	r3, r2, #2
 8006e64:	f2c0 86b6 	blt.w	8007bd4 <_svfprintf_r+0x1504>
 8006e68:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006e6c:	f043 0302 	orr.w	r3, r3, #2
 8006e70:	9307      	str	r3, [sp, #28]
 8006e72:	ae34      	add	r6, sp, #208	; 0xd0
 8006e74:	0923      	lsrs	r3, r4, #4
 8006e76:	f004 010f 	and.w	r1, r4, #15
 8006e7a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006e7e:	092a      	lsrs	r2, r5, #4
 8006e80:	461c      	mov	r4, r3
 8006e82:	4615      	mov	r5, r2
 8006e84:	5c43      	ldrb	r3, [r0, r1]
 8006e86:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8006e8a:	ea54 0305 	orrs.w	r3, r4, r5
 8006e8e:	d1f1      	bne.n	8006e74 <_svfprintf_r+0x7a4>
 8006e90:	e5e6      	b.n	8006a60 <_svfprintf_r+0x390>
 8006e92:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006e94:	9311      	str	r3, [sp, #68]	; 0x44
 8006e96:	680a      	ldr	r2, [r1, #0]
 8006e98:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	460a      	mov	r2, r1
 8006ea0:	461f      	mov	r7, r3
 8006ea2:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006ea6:	3204      	adds	r2, #4
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	9308      	str	r3, [sp, #32]
 8006eac:	46bb      	mov	fp, r7
 8006eae:	9713      	str	r7, [sp, #76]	; 0x4c
 8006eb0:	920e      	str	r2, [sp, #56]	; 0x38
 8006eb2:	930d      	str	r3, [sp, #52]	; 0x34
 8006eb4:	ae2a      	add	r6, sp, #168	; 0xa8
 8006eb6:	e5e1      	b.n	8006a7c <_svfprintf_r+0x3ac>
 8006eb8:	9311      	str	r3, [sp, #68]	; 0x44
 8006eba:	46ab      	mov	fp, r5
 8006ebc:	2a00      	cmp	r2, #0
 8006ebe:	f43f ad93 	beq.w	80069e8 <_svfprintf_r+0x318>
 8006ec2:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006ec6:	e58f      	b.n	80069e8 <_svfprintf_r+0x318>
 8006ec8:	9b07      	ldr	r3, [sp, #28]
 8006eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ece:	9307      	str	r3, [sp, #28]
 8006ed0:	f898 3000 	ldrb.w	r3, [r8]
 8006ed4:	e456      	b.n	8006784 <_svfprintf_r+0xb4>
 8006ed6:	f898 3000 	ldrb.w	r3, [r8]
 8006eda:	2900      	cmp	r1, #0
 8006edc:	f47f ac52 	bne.w	8006784 <_svfprintf_r+0xb4>
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	2120      	movs	r1, #32
 8006ee4:	e44e      	b.n	8006784 <_svfprintf_r+0xb4>
 8006ee6:	9b07      	ldr	r3, [sp, #28]
 8006ee8:	f043 0301 	orr.w	r3, r3, #1
 8006eec:	9307      	str	r3, [sp, #28]
 8006eee:	f898 3000 	ldrb.w	r3, [r8]
 8006ef2:	e447      	b.n	8006784 <_svfprintf_r+0xb4>
 8006ef4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	930c      	str	r3, [sp, #48]	; 0x30
 8006efa:	4618      	mov	r0, r3
 8006efc:	2800      	cmp	r0, #0
 8006efe:	4623      	mov	r3, r4
 8006f00:	f103 0304 	add.w	r3, r3, #4
 8006f04:	f6ff aca0 	blt.w	8006848 <_svfprintf_r+0x178>
 8006f08:	930e      	str	r3, [sp, #56]	; 0x38
 8006f0a:	f898 3000 	ldrb.w	r3, [r8]
 8006f0e:	e439      	b.n	8006784 <_svfprintf_r+0xb4>
 8006f10:	f898 3000 	ldrb.w	r3, [r8]
 8006f14:	2201      	movs	r2, #1
 8006f16:	212b      	movs	r1, #43	; 0x2b
 8006f18:	e434      	b.n	8006784 <_svfprintf_r+0xb4>
 8006f1a:	9b07      	ldr	r3, [sp, #28]
 8006f1c:	f043 0320 	orr.w	r3, r3, #32
 8006f20:	9307      	str	r3, [sp, #28]
 8006f22:	f898 3000 	ldrb.w	r3, [r8]
 8006f26:	e42d      	b.n	8006784 <_svfprintf_r+0xb4>
 8006f28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f2a:	9311      	str	r3, [sp, #68]	; 0x44
 8006f2c:	6816      	ldr	r6, [r2, #0]
 8006f2e:	2400      	movs	r4, #0
 8006f30:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 8006f34:	1d17      	adds	r7, r2, #4
 8006f36:	2e00      	cmp	r6, #0
 8006f38:	f000 8621 	beq.w	8007b7e <_svfprintf_r+0x14ae>
 8006f3c:	2d00      	cmp	r5, #0
 8006f3e:	f2c0 8566 	blt.w	8007a0e <_svfprintf_r+0x133e>
 8006f42:	462a      	mov	r2, r5
 8006f44:	4621      	mov	r1, r4
 8006f46:	4630      	mov	r0, r6
 8006f48:	f7fe fdb2 	bl	8005ab0 <memchr>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	f000 866b 	beq.w	8007c28 <_svfprintf_r+0x1558>
 8006f52:	1b83      	subs	r3, r0, r6
 8006f54:	930d      	str	r3, [sp, #52]	; 0x34
 8006f56:	46a3      	mov	fp, r4
 8006f58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006f5c:	970e      	str	r7, [sp, #56]	; 0x38
 8006f5e:	9308      	str	r3, [sp, #32]
 8006f60:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8006f64:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006f68:	e584      	b.n	8006a74 <_svfprintf_r+0x3a4>
 8006f6a:	9311      	str	r3, [sp, #68]	; 0x44
 8006f6c:	46ab      	mov	fp, r5
 8006f6e:	2a00      	cmp	r2, #0
 8006f70:	f43f af29 	beq.w	8006dc6 <_svfprintf_r+0x6f6>
 8006f74:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006f78:	e725      	b.n	8006dc6 <_svfprintf_r+0x6f6>
 8006f7a:	9311      	str	r3, [sp, #68]	; 0x44
 8006f7c:	46ab      	mov	fp, r5
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	f040 8716 	bne.w	8007db0 <_svfprintf_r+0x16e0>
 8006f84:	9b07      	ldr	r3, [sp, #28]
 8006f86:	4856      	ldr	r0, [pc, #344]	; (80070e0 <_svfprintf_r+0xa10>)
 8006f88:	069d      	lsls	r5, r3, #26
 8006f8a:	f53f af4b 	bmi.w	8006e24 <_svfprintf_r+0x754>
 8006f8e:	9b07      	ldr	r3, [sp, #28]
 8006f90:	06dc      	lsls	r4, r3, #27
 8006f92:	f140 8440 	bpl.w	8007816 <_svfprintf_r+0x1146>
 8006f96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f98:	4613      	mov	r3, r2
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	6814      	ldr	r4, [r2, #0]
 8006f9e:	930e      	str	r3, [sp, #56]	; 0x38
 8006fa0:	2500      	movs	r5, #0
 8006fa2:	e748      	b.n	8006e36 <_svfprintf_r+0x766>
 8006fa4:	f898 3000 	ldrb.w	r3, [r8]
 8006fa8:	2b6c      	cmp	r3, #108	; 0x6c
 8006faa:	f000 84c4 	beq.w	8007936 <_svfprintf_r+0x1266>
 8006fae:	9807      	ldr	r0, [sp, #28]
 8006fb0:	f040 0010 	orr.w	r0, r0, #16
 8006fb4:	9007      	str	r0, [sp, #28]
 8006fb6:	f7ff bbe5 	b.w	8006784 <_svfprintf_r+0xb4>
 8006fba:	2a00      	cmp	r2, #0
 8006fbc:	f040 86f4 	bne.w	8007da8 <_svfprintf_r+0x16d8>
 8006fc0:	9b07      	ldr	r3, [sp, #28]
 8006fc2:	069b      	lsls	r3, r3, #26
 8006fc4:	f140 8357 	bpl.w	8007676 <_svfprintf_r+0xfa6>
 8006fc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fcc:	6813      	ldr	r3, [r2, #0]
 8006fce:	17cd      	asrs	r5, r1, #31
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	3204      	adds	r2, #4
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	920e      	str	r2, [sp, #56]	; 0x38
 8006fd8:	e9c3 0100 	strd	r0, r1, [r3]
 8006fdc:	f7ff bb9f 	b.w	800671e <_svfprintf_r+0x4e>
 8006fe0:	483f      	ldr	r0, [pc, #252]	; (80070e0 <_svfprintf_r+0xa10>)
 8006fe2:	9211      	str	r2, [sp, #68]	; 0x44
 8006fe4:	f1bb 0f00 	cmp.w	fp, #0
 8006fe8:	f040 8174 	bne.w	80072d4 <_svfprintf_r+0xc04>
 8006fec:	465f      	mov	r7, fp
 8006fee:	f04f 0b00 	mov.w	fp, #0
 8006ff2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8006ff6:	ae34      	add	r6, sp, #208	; 0xd0
 8006ff8:	e535      	b.n	8006a66 <_svfprintf_r+0x396>
 8006ffa:	9311      	str	r3, [sp, #68]	; 0x44
 8006ffc:	2a00      	cmp	r2, #0
 8006ffe:	f040 86cf 	bne.w	8007da0 <_svfprintf_r+0x16d0>
 8007002:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007004:	2a00      	cmp	r2, #0
 8007006:	f43f ac56 	beq.w	80068b6 <_svfprintf_r+0x1e6>
 800700a:	2300      	movs	r3, #0
 800700c:	2101      	movs	r1, #1
 800700e:	461f      	mov	r7, r3
 8007010:	9108      	str	r1, [sp, #32]
 8007012:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8007016:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800701a:	469b      	mov	fp, r3
 800701c:	9313      	str	r3, [sp, #76]	; 0x4c
 800701e:	910d      	str	r1, [sp, #52]	; 0x34
 8007020:	ae2a      	add	r6, sp, #168	; 0xa8
 8007022:	e52b      	b.n	8006a7c <_svfprintf_r+0x3ac>
 8007024:	f1bb 0f00 	cmp.w	fp, #0
 8007028:	f000 8616 	beq.w	8007c58 <_svfprintf_r+0x1588>
 800702c:	2700      	movs	r7, #0
 800702e:	2400      	movs	r4, #0
 8007030:	2500      	movs	r5, #0
 8007032:	e473      	b.n	800691c <_svfprintf_r+0x24c>
 8007034:	482a      	ldr	r0, [pc, #168]	; (80070e0 <_svfprintf_r+0xa10>)
 8007036:	9307      	str	r3, [sp, #28]
 8007038:	9211      	str	r2, [sp, #68]	; 0x44
 800703a:	ea54 0305 	orrs.w	r3, r4, r5
 800703e:	970e      	str	r7, [sp, #56]	; 0x38
 8007040:	f04f 0700 	mov.w	r7, #0
 8007044:	f47f af15 	bne.w	8006e72 <_svfprintf_r+0x7a2>
 8007048:	2400      	movs	r4, #0
 800704a:	2500      	movs	r5, #0
 800704c:	e711      	b.n	8006e72 <_svfprintf_r+0x7a2>
 800704e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007050:	e564      	b.n	8006b1c <_svfprintf_r+0x44c>
 8007052:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007054:	2b65      	cmp	r3, #101	; 0x65
 8007056:	f340 80aa 	ble.w	80071ae <_svfprintf_r+0xade>
 800705a:	2200      	movs	r2, #0
 800705c:	2300      	movs	r3, #0
 800705e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007062:	f001 fd93 	bl	8008b8c <__aeabi_dcmpeq>
 8007066:	2800      	cmp	r0, #0
 8007068:	f000 8136 	beq.w	80072d8 <_svfprintf_r+0xc08>
 800706c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800706e:	4a1d      	ldr	r2, [pc, #116]	; (80070e4 <_svfprintf_r+0xa14>)
 8007070:	f8c9 2000 	str.w	r2, [r9]
 8007074:	3301      	adds	r3, #1
 8007076:	3401      	adds	r4, #1
 8007078:	2201      	movs	r2, #1
 800707a:	2b07      	cmp	r3, #7
 800707c:	9429      	str	r4, [sp, #164]	; 0xa4
 800707e:	9328      	str	r3, [sp, #160]	; 0xa0
 8007080:	f8c9 2004 	str.w	r2, [r9, #4]
 8007084:	f300 83f0 	bgt.w	8007868 <_svfprintf_r+0x1198>
 8007088:	f109 0908 	add.w	r9, r9, #8
 800708c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800708e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007090:	4293      	cmp	r3, r2
 8007092:	db03      	blt.n	800709c <_svfprintf_r+0x9cc>
 8007094:	9b07      	ldr	r3, [sp, #28]
 8007096:	07db      	lsls	r3, r3, #31
 8007098:	f57f adb0 	bpl.w	8006bfc <_svfprintf_r+0x52c>
 800709c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800709e:	9916      	ldr	r1, [sp, #88]	; 0x58
 80070a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070a2:	f8c9 2000 	str.w	r2, [r9]
 80070a6:	3301      	adds	r3, #1
 80070a8:	440c      	add	r4, r1
 80070aa:	2b07      	cmp	r3, #7
 80070ac:	9429      	str	r4, [sp, #164]	; 0xa4
 80070ae:	f8c9 1004 	str.w	r1, [r9, #4]
 80070b2:	9328      	str	r3, [sp, #160]	; 0xa0
 80070b4:	f300 8449 	bgt.w	800794a <_svfprintf_r+0x127a>
 80070b8:	f109 0908 	add.w	r9, r9, #8
 80070bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80070be:	1e5d      	subs	r5, r3, #1
 80070c0:	2d00      	cmp	r5, #0
 80070c2:	f77f ad9b 	ble.w	8006bfc <_svfprintf_r+0x52c>
 80070c6:	4a08      	ldr	r2, [pc, #32]	; (80070e8 <_svfprintf_r+0xa18>)
 80070c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80070ca:	920f      	str	r2, [sp, #60]	; 0x3c
 80070cc:	2d10      	cmp	r5, #16
 80070ce:	f340 81e9 	ble.w	80074a4 <_svfprintf_r+0xdd4>
 80070d2:	2610      	movs	r6, #16
 80070d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80070d6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80070da:	e00d      	b.n	80070f8 <_svfprintf_r+0xa28>
 80070dc:	08009168 	.word	0x08009168
 80070e0:	0800917c 	.word	0x0800917c
 80070e4:	08009198 	.word	0x08009198
 80070e8:	080092bc 	.word	0x080092bc
 80070ec:	f109 0908 	add.w	r9, r9, #8
 80070f0:	3d10      	subs	r5, #16
 80070f2:	2d10      	cmp	r5, #16
 80070f4:	f340 81d6 	ble.w	80074a4 <_svfprintf_r+0xdd4>
 80070f8:	3301      	adds	r3, #1
 80070fa:	3410      	adds	r4, #16
 80070fc:	2b07      	cmp	r3, #7
 80070fe:	9429      	str	r4, [sp, #164]	; 0xa4
 8007100:	9328      	str	r3, [sp, #160]	; 0xa0
 8007102:	f8c9 a000 	str.w	sl, [r9]
 8007106:	f8c9 6004 	str.w	r6, [r9, #4]
 800710a:	ddef      	ble.n	80070ec <_svfprintf_r+0xa1c>
 800710c:	aa27      	add	r2, sp, #156	; 0x9c
 800710e:	4659      	mov	r1, fp
 8007110:	4638      	mov	r0, r7
 8007112:	f001 f80d 	bl	8008130 <__ssprint_r>
 8007116:	2800      	cmp	r0, #0
 8007118:	f47f abd4 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 800711c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800711e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007120:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007124:	e7e4      	b.n	80070f0 <_svfprintf_r+0xa20>
 8007126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007128:	9a08      	ldr	r2, [sp, #32]
 800712a:	1a9f      	subs	r7, r3, r2
 800712c:	2f00      	cmp	r7, #0
 800712e:	f77f ad19 	ble.w	8006b64 <_svfprintf_r+0x494>
 8007132:	4abc      	ldr	r2, [pc, #752]	; (8007424 <_svfprintf_r+0xd54>)
 8007134:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007136:	920f      	str	r2, [sp, #60]	; 0x3c
 8007138:	2f10      	cmp	r7, #16
 800713a:	dd2b      	ble.n	8007194 <_svfprintf_r+0xac4>
 800713c:	464a      	mov	r2, r9
 800713e:	4621      	mov	r1, r4
 8007140:	46b9      	mov	r9, r7
 8007142:	2510      	movs	r5, #16
 8007144:	4637      	mov	r7, r6
 8007146:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007148:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800714a:	e006      	b.n	800715a <_svfprintf_r+0xa8a>
 800714c:	f1a9 0910 	sub.w	r9, r9, #16
 8007150:	f1b9 0f10 	cmp.w	r9, #16
 8007154:	f102 0208 	add.w	r2, r2, #8
 8007158:	dd18      	ble.n	800718c <_svfprintf_r+0xabc>
 800715a:	3301      	adds	r3, #1
 800715c:	3110      	adds	r1, #16
 800715e:	2b07      	cmp	r3, #7
 8007160:	9129      	str	r1, [sp, #164]	; 0xa4
 8007162:	9328      	str	r3, [sp, #160]	; 0xa0
 8007164:	f8c2 a000 	str.w	sl, [r2]
 8007168:	6055      	str	r5, [r2, #4]
 800716a:	ddef      	ble.n	800714c <_svfprintf_r+0xa7c>
 800716c:	aa27      	add	r2, sp, #156	; 0x9c
 800716e:	4631      	mov	r1, r6
 8007170:	4620      	mov	r0, r4
 8007172:	f000 ffdd 	bl	8008130 <__ssprint_r>
 8007176:	2800      	cmp	r0, #0
 8007178:	f47f aba4 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 800717c:	f1a9 0910 	sub.w	r9, r9, #16
 8007180:	f1b9 0f10 	cmp.w	r9, #16
 8007184:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8007186:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007188:	aa34      	add	r2, sp, #208	; 0xd0
 800718a:	dce6      	bgt.n	800715a <_svfprintf_r+0xa8a>
 800718c:	463e      	mov	r6, r7
 800718e:	460c      	mov	r4, r1
 8007190:	464f      	mov	r7, r9
 8007192:	4691      	mov	r9, r2
 8007194:	3301      	adds	r3, #1
 8007196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007198:	9328      	str	r3, [sp, #160]	; 0xa0
 800719a:	443c      	add	r4, r7
 800719c:	2b07      	cmp	r3, #7
 800719e:	9429      	str	r4, [sp, #164]	; 0xa4
 80071a0:	e889 0084 	stmia.w	r9, {r2, r7}
 80071a4:	f300 823d 	bgt.w	8007622 <_svfprintf_r+0xf52>
 80071a8:	f109 0908 	add.w	r9, r9, #8
 80071ac:	e4da      	b.n	8006b64 <_svfprintf_r+0x494>
 80071ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071b0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	f340 820a 	ble.w	80075cc <_svfprintf_r+0xefc>
 80071b8:	3501      	adds	r5, #1
 80071ba:	3401      	adds	r4, #1
 80071bc:	2301      	movs	r3, #1
 80071be:	2d07      	cmp	r5, #7
 80071c0:	9429      	str	r4, [sp, #164]	; 0xa4
 80071c2:	9528      	str	r5, [sp, #160]	; 0xa0
 80071c4:	f8c9 6000 	str.w	r6, [r9]
 80071c8:	f8c9 3004 	str.w	r3, [r9, #4]
 80071cc:	f300 820f 	bgt.w	80075ee <_svfprintf_r+0xf1e>
 80071d0:	f109 0908 	add.w	r9, r9, #8
 80071d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80071d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071d8:	f8c9 3000 	str.w	r3, [r9]
 80071dc:	3501      	adds	r5, #1
 80071de:	4414      	add	r4, r2
 80071e0:	2d07      	cmp	r5, #7
 80071e2:	9429      	str	r4, [sp, #164]	; 0xa4
 80071e4:	9528      	str	r5, [sp, #160]	; 0xa0
 80071e6:	f8c9 2004 	str.w	r2, [r9, #4]
 80071ea:	f300 820d 	bgt.w	8007608 <_svfprintf_r+0xf38>
 80071ee:	f109 0908 	add.w	r9, r9, #8
 80071f2:	2300      	movs	r3, #0
 80071f4:	2200      	movs	r2, #0
 80071f6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80071fa:	f001 fcc7 	bl	8008b8c <__aeabi_dcmpeq>
 80071fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007200:	2800      	cmp	r0, #0
 8007202:	f040 80c3 	bne.w	800738c <_svfprintf_r+0xcbc>
 8007206:	3b01      	subs	r3, #1
 8007208:	3501      	adds	r5, #1
 800720a:	3601      	adds	r6, #1
 800720c:	441c      	add	r4, r3
 800720e:	2d07      	cmp	r5, #7
 8007210:	9528      	str	r5, [sp, #160]	; 0xa0
 8007212:	9429      	str	r4, [sp, #164]	; 0xa4
 8007214:	f8c9 6000 	str.w	r6, [r9]
 8007218:	f8c9 3004 	str.w	r3, [r9, #4]
 800721c:	f300 80f5 	bgt.w	800740a <_svfprintf_r+0xd3a>
 8007220:	f109 0908 	add.w	r9, r9, #8
 8007224:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007226:	f8c9 2004 	str.w	r2, [r9, #4]
 800722a:	3501      	adds	r5, #1
 800722c:	4414      	add	r4, r2
 800722e:	ab23      	add	r3, sp, #140	; 0x8c
 8007230:	2d07      	cmp	r5, #7
 8007232:	9429      	str	r4, [sp, #164]	; 0xa4
 8007234:	9528      	str	r5, [sp, #160]	; 0xa0
 8007236:	f8c9 3000 	str.w	r3, [r9]
 800723a:	f77f acdd 	ble.w	8006bf8 <_svfprintf_r+0x528>
 800723e:	aa27      	add	r2, sp, #156	; 0x9c
 8007240:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007242:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007244:	f000 ff74 	bl	8008130 <__ssprint_r>
 8007248:	2800      	cmp	r0, #0
 800724a:	f47f ab3b 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 800724e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007250:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007254:	e4d2      	b.n	8006bfc <_svfprintf_r+0x52c>
 8007256:	aa27      	add	r2, sp, #156	; 0x9c
 8007258:	9909      	ldr	r1, [sp, #36]	; 0x24
 800725a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800725c:	f000 ff68 	bl	8008130 <__ssprint_r>
 8007260:	2800      	cmp	r0, #0
 8007262:	f43f ad19 	beq.w	8006c98 <_svfprintf_r+0x5c8>
 8007266:	f7ff bb2d 	b.w	80068c4 <_svfprintf_r+0x1f4>
 800726a:	aa27      	add	r2, sp, #156	; 0x9c
 800726c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800726e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007270:	f000 ff5e 	bl	8008130 <__ssprint_r>
 8007274:	2800      	cmp	r0, #0
 8007276:	f47f ab25 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 800727a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800727c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007280:	e4a9      	b.n	8006bd6 <_svfprintf_r+0x506>
 8007282:	aa27      	add	r2, sp, #156	; 0x9c
 8007284:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007286:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007288:	f000 ff52 	bl	8008130 <__ssprint_r>
 800728c:	2800      	cmp	r0, #0
 800728e:	f47f ab19 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8007292:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007294:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007298:	e450      	b.n	8006b3c <_svfprintf_r+0x46c>
 800729a:	aa27      	add	r2, sp, #156	; 0x9c
 800729c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800729e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80072a0:	f000 ff46 	bl	8008130 <__ssprint_r>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f47f ab0d 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 80072aa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80072ac:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80072b0:	e454      	b.n	8006b5c <_svfprintf_r+0x48c>
 80072b2:	f1bb 0f00 	cmp.w	fp, #0
 80072b6:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80072ba:	f2c0 82e1 	blt.w	8007880 <_svfprintf_r+0x11b0>
 80072be:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80072c2:	9307      	str	r3, [sp, #28]
 80072c4:	ea54 0305 	orrs.w	r3, r4, r5
 80072c8:	f47f add3 	bne.w	8006e72 <_svfprintf_r+0x7a2>
 80072cc:	f1bb 0f00 	cmp.w	fp, #0
 80072d0:	f43f ae8c 	beq.w	8006fec <_svfprintf_r+0x91c>
 80072d4:	2700      	movs	r7, #0
 80072d6:	e6b7      	b.n	8007048 <_svfprintf_r+0x978>
 80072d8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80072da:	2d00      	cmp	r5, #0
 80072dc:	f340 82d3 	ble.w	8007886 <_svfprintf_r+0x11b6>
 80072e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072e4:	4293      	cmp	r3, r2
 80072e6:	bfa8      	it	ge
 80072e8:	4613      	movge	r3, r2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	461d      	mov	r5, r3
 80072ee:	dd0d      	ble.n	800730c <_svfprintf_r+0xc3c>
 80072f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80072f2:	f8c9 6000 	str.w	r6, [r9]
 80072f6:	3301      	adds	r3, #1
 80072f8:	442c      	add	r4, r5
 80072fa:	2b07      	cmp	r3, #7
 80072fc:	9429      	str	r4, [sp, #164]	; 0xa4
 80072fe:	f8c9 5004 	str.w	r5, [r9, #4]
 8007302:	9328      	str	r3, [sp, #160]	; 0xa0
 8007304:	f300 83ae 	bgt.w	8007a64 <_svfprintf_r+0x1394>
 8007308:	f109 0908 	add.w	r9, r9, #8
 800730c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800730e:	2d00      	cmp	r5, #0
 8007310:	bfa8      	it	ge
 8007312:	1b5b      	subge	r3, r3, r5
 8007314:	2b00      	cmp	r3, #0
 8007316:	461d      	mov	r5, r3
 8007318:	f340 80f8 	ble.w	800750c <_svfprintf_r+0xe3c>
 800731c:	4a41      	ldr	r2, [pc, #260]	; (8007424 <_svfprintf_r+0xd54>)
 800731e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007320:	920f      	str	r2, [sp, #60]	; 0x3c
 8007322:	2d10      	cmp	r5, #16
 8007324:	f340 8285 	ble.w	8007832 <_svfprintf_r+0x1162>
 8007328:	4622      	mov	r2, r4
 800732a:	2710      	movs	r7, #16
 800732c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8007330:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007332:	e005      	b.n	8007340 <_svfprintf_r+0xc70>
 8007334:	f109 0908 	add.w	r9, r9, #8
 8007338:	3d10      	subs	r5, #16
 800733a:	2d10      	cmp	r5, #16
 800733c:	f340 8278 	ble.w	8007830 <_svfprintf_r+0x1160>
 8007340:	3301      	adds	r3, #1
 8007342:	3210      	adds	r2, #16
 8007344:	2b07      	cmp	r3, #7
 8007346:	9229      	str	r2, [sp, #164]	; 0xa4
 8007348:	9328      	str	r3, [sp, #160]	; 0xa0
 800734a:	f8c9 a000 	str.w	sl, [r9]
 800734e:	f8c9 7004 	str.w	r7, [r9, #4]
 8007352:	ddef      	ble.n	8007334 <_svfprintf_r+0xc64>
 8007354:	aa27      	add	r2, sp, #156	; 0x9c
 8007356:	4621      	mov	r1, r4
 8007358:	4658      	mov	r0, fp
 800735a:	f000 fee9 	bl	8008130 <__ssprint_r>
 800735e:	2800      	cmp	r0, #0
 8007360:	f47f aab0 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8007364:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8007366:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007368:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800736c:	e7e4      	b.n	8007338 <_svfprintf_r+0xc68>
 800736e:	aa27      	add	r2, sp, #156	; 0x9c
 8007370:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007372:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007374:	f000 fedc 	bl	8008130 <__ssprint_r>
 8007378:	2800      	cmp	r0, #0
 800737a:	f47f aaa3 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 800737e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8007382:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007384:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007388:	f7ff bbc8 	b.w	8006b1c <_svfprintf_r+0x44c>
 800738c:	1e5e      	subs	r6, r3, #1
 800738e:	2e00      	cmp	r6, #0
 8007390:	f77f af48 	ble.w	8007224 <_svfprintf_r+0xb54>
 8007394:	4b23      	ldr	r3, [pc, #140]	; (8007424 <_svfprintf_r+0xd54>)
 8007396:	930f      	str	r3, [sp, #60]	; 0x3c
 8007398:	2e10      	cmp	r6, #16
 800739a:	dd2c      	ble.n	80073f6 <_svfprintf_r+0xd26>
 800739c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80073a0:	2710      	movs	r7, #16
 80073a2:	46b0      	mov	r8, r6
 80073a4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80073a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80073aa:	e006      	b.n	80073ba <_svfprintf_r+0xcea>
 80073ac:	f1a8 0810 	sub.w	r8, r8, #16
 80073b0:	f1b8 0f10 	cmp.w	r8, #16
 80073b4:	f109 0908 	add.w	r9, r9, #8
 80073b8:	dd1a      	ble.n	80073f0 <_svfprintf_r+0xd20>
 80073ba:	3501      	adds	r5, #1
 80073bc:	3410      	adds	r4, #16
 80073be:	2d07      	cmp	r5, #7
 80073c0:	9429      	str	r4, [sp, #164]	; 0xa4
 80073c2:	9528      	str	r5, [sp, #160]	; 0xa0
 80073c4:	f8c9 a000 	str.w	sl, [r9]
 80073c8:	f8c9 7004 	str.w	r7, [r9, #4]
 80073cc:	ddee      	ble.n	80073ac <_svfprintf_r+0xcdc>
 80073ce:	aa27      	add	r2, sp, #156	; 0x9c
 80073d0:	4631      	mov	r1, r6
 80073d2:	4658      	mov	r0, fp
 80073d4:	f000 feac 	bl	8008130 <__ssprint_r>
 80073d8:	2800      	cmp	r0, #0
 80073da:	f47f aa73 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 80073de:	f1a8 0810 	sub.w	r8, r8, #16
 80073e2:	f1b8 0f10 	cmp.w	r8, #16
 80073e6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80073e8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80073ea:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80073ee:	dce4      	bgt.n	80073ba <_svfprintf_r+0xcea>
 80073f0:	4646      	mov	r6, r8
 80073f2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80073f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073f8:	3501      	adds	r5, #1
 80073fa:	4434      	add	r4, r6
 80073fc:	2d07      	cmp	r5, #7
 80073fe:	9429      	str	r4, [sp, #164]	; 0xa4
 8007400:	9528      	str	r5, [sp, #160]	; 0xa0
 8007402:	e889 0048 	stmia.w	r9, {r3, r6}
 8007406:	f77f af0b 	ble.w	8007220 <_svfprintf_r+0xb50>
 800740a:	aa27      	add	r2, sp, #156	; 0x9c
 800740c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800740e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007410:	f000 fe8e 	bl	8008130 <__ssprint_r>
 8007414:	2800      	cmp	r0, #0
 8007416:	f47f aa55 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 800741a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800741c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800741e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007422:	e6ff      	b.n	8007224 <_svfprintf_r+0xb54>
 8007424:	080092bc 	.word	0x080092bc
 8007428:	9907      	ldr	r1, [sp, #28]
 800742a:	f011 0210 	ands.w	r2, r1, #16
 800742e:	f000 81d5 	beq.w	80077dc <_svfprintf_r+0x110c>
 8007432:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007434:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8007438:	f1bb 0f00 	cmp.w	fp, #0
 800743c:	6804      	ldr	r4, [r0, #0]
 800743e:	f100 0704 	add.w	r7, r0, #4
 8007442:	f04f 0500 	mov.w	r5, #0
 8007446:	db26      	blt.n	8007496 <_svfprintf_r+0xdc6>
 8007448:	460a      	mov	r2, r1
 800744a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800744e:	9207      	str	r2, [sp, #28]
 8007450:	ea54 0205 	orrs.w	r2, r4, r5
 8007454:	970e      	str	r7, [sp, #56]	; 0x38
 8007456:	461f      	mov	r7, r3
 8007458:	f47f aae8 	bne.w	8006a2c <_svfprintf_r+0x35c>
 800745c:	e4ce      	b.n	8006dfc <_svfprintf_r+0x72c>
 800745e:	9b07      	ldr	r3, [sp, #28]
 8007460:	06d8      	lsls	r0, r3, #27
 8007462:	d42a      	bmi.n	80074ba <_svfprintf_r+0xdea>
 8007464:	9b07      	ldr	r3, [sp, #28]
 8007466:	0659      	lsls	r1, r3, #25
 8007468:	d527      	bpl.n	80074ba <_svfprintf_r+0xdea>
 800746a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800746c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8007470:	3104      	adds	r1, #4
 8007472:	17e5      	asrs	r5, r4, #31
 8007474:	4622      	mov	r2, r4
 8007476:	462b      	mov	r3, r5
 8007478:	910e      	str	r1, [sp, #56]	; 0x38
 800747a:	f7ff bac4 	b.w	8006a06 <_svfprintf_r+0x336>
 800747e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007480:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8007484:	f1bb 0f00 	cmp.w	fp, #0
 8007488:	680c      	ldr	r4, [r1, #0]
 800748a:	f101 0704 	add.w	r7, r1, #4
 800748e:	f04f 0500 	mov.w	r5, #0
 8007492:	f280 824e 	bge.w	8007932 <_svfprintf_r+0x1262>
 8007496:	970e      	str	r7, [sp, #56]	; 0x38
 8007498:	461f      	mov	r7, r3
 800749a:	ea54 0305 	orrs.w	r3, r4, r5
 800749e:	f47f aac5 	bne.w	8006a2c <_svfprintf_r+0x35c>
 80074a2:	e4b0      	b.n	8006e06 <_svfprintf_r+0x736>
 80074a4:	3301      	adds	r3, #1
 80074a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074a8:	9328      	str	r3, [sp, #160]	; 0xa0
 80074aa:	442c      	add	r4, r5
 80074ac:	2b07      	cmp	r3, #7
 80074ae:	9429      	str	r4, [sp, #164]	; 0xa4
 80074b0:	e889 0024 	stmia.w	r9, {r2, r5}
 80074b4:	f77f aba0 	ble.w	8006bf8 <_svfprintf_r+0x528>
 80074b8:	e6c1      	b.n	800723e <_svfprintf_r+0xb6e>
 80074ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074bc:	6814      	ldr	r4, [r2, #0]
 80074be:	4613      	mov	r3, r2
 80074c0:	3304      	adds	r3, #4
 80074c2:	17e5      	asrs	r5, r4, #31
 80074c4:	4622      	mov	r2, r4
 80074c6:	930e      	str	r3, [sp, #56]	; 0x38
 80074c8:	2a00      	cmp	r2, #0
 80074ca:	462b      	mov	r3, r5
 80074cc:	f173 0300 	sbcs.w	r3, r3, #0
 80074d0:	f6bf aa9e 	bge.w	8006a10 <_svfprintf_r+0x340>
 80074d4:	4264      	negs	r4, r4
 80074d6:	f04f 072d 	mov.w	r7, #45	; 0x2d
 80074da:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80074de:	f1bb 0f00 	cmp.w	fp, #0
 80074e2:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80074e6:	f6ff aaa1 	blt.w	8006a2c <_svfprintf_r+0x35c>
 80074ea:	9b07      	ldr	r3, [sp, #28]
 80074ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074f0:	9307      	str	r3, [sp, #28]
 80074f2:	f7ff ba9b 	b.w	8006a2c <_svfprintf_r+0x35c>
 80074f6:	aa27      	add	r2, sp, #156	; 0x9c
 80074f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074fc:	f000 fe18 	bl	8008130 <__ssprint_r>
 8007500:	2800      	cmp	r0, #0
 8007502:	f47f a9df 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8007506:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007508:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800750c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800750e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007510:	4432      	add	r2, r6
 8007512:	4617      	mov	r7, r2
 8007514:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007516:	4293      	cmp	r3, r2
 8007518:	db47      	blt.n	80075aa <_svfprintf_r+0xeda>
 800751a:	9a07      	ldr	r2, [sp, #28]
 800751c:	07d5      	lsls	r5, r2, #31
 800751e:	d444      	bmi.n	80075aa <_svfprintf_r+0xeda>
 8007520:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007522:	440e      	add	r6, r1
 8007524:	1bf5      	subs	r5, r6, r7
 8007526:	1acb      	subs	r3, r1, r3
 8007528:	429d      	cmp	r5, r3
 800752a:	bfa8      	it	ge
 800752c:	461d      	movge	r5, r3
 800752e:	2d00      	cmp	r5, #0
 8007530:	462e      	mov	r6, r5
 8007532:	dd0d      	ble.n	8007550 <_svfprintf_r+0xe80>
 8007534:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8007536:	f8c9 7000 	str.w	r7, [r9]
 800753a:	3201      	adds	r2, #1
 800753c:	442c      	add	r4, r5
 800753e:	2a07      	cmp	r2, #7
 8007540:	9429      	str	r4, [sp, #164]	; 0xa4
 8007542:	f8c9 5004 	str.w	r5, [r9, #4]
 8007546:	9228      	str	r2, [sp, #160]	; 0xa0
 8007548:	f300 830a 	bgt.w	8007b60 <_svfprintf_r+0x1490>
 800754c:	f109 0908 	add.w	r9, r9, #8
 8007550:	2e00      	cmp	r6, #0
 8007552:	bfac      	ite	ge
 8007554:	1b9d      	subge	r5, r3, r6
 8007556:	461d      	movlt	r5, r3
 8007558:	2d00      	cmp	r5, #0
 800755a:	f77f ab4f 	ble.w	8006bfc <_svfprintf_r+0x52c>
 800755e:	4abb      	ldr	r2, [pc, #748]	; (800784c <_svfprintf_r+0x117c>)
 8007560:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007562:	920f      	str	r2, [sp, #60]	; 0x3c
 8007564:	2d10      	cmp	r5, #16
 8007566:	dd9d      	ble.n	80074a4 <_svfprintf_r+0xdd4>
 8007568:	2610      	movs	r6, #16
 800756a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800756c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8007570:	e004      	b.n	800757c <_svfprintf_r+0xeac>
 8007572:	f109 0908 	add.w	r9, r9, #8
 8007576:	3d10      	subs	r5, #16
 8007578:	2d10      	cmp	r5, #16
 800757a:	dd93      	ble.n	80074a4 <_svfprintf_r+0xdd4>
 800757c:	3301      	adds	r3, #1
 800757e:	3410      	adds	r4, #16
 8007580:	2b07      	cmp	r3, #7
 8007582:	9429      	str	r4, [sp, #164]	; 0xa4
 8007584:	9328      	str	r3, [sp, #160]	; 0xa0
 8007586:	f8c9 a000 	str.w	sl, [r9]
 800758a:	f8c9 6004 	str.w	r6, [r9, #4]
 800758e:	ddf0      	ble.n	8007572 <_svfprintf_r+0xea2>
 8007590:	aa27      	add	r2, sp, #156	; 0x9c
 8007592:	4659      	mov	r1, fp
 8007594:	4638      	mov	r0, r7
 8007596:	f000 fdcb 	bl	8008130 <__ssprint_r>
 800759a:	2800      	cmp	r0, #0
 800759c:	f47f a992 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 80075a0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80075a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80075a4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80075a8:	e7e5      	b.n	8007576 <_svfprintf_r+0xea6>
 80075aa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80075ac:	9816      	ldr	r0, [sp, #88]	; 0x58
 80075ae:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80075b0:	f8c9 1000 	str.w	r1, [r9]
 80075b4:	3201      	adds	r2, #1
 80075b6:	4404      	add	r4, r0
 80075b8:	2a07      	cmp	r2, #7
 80075ba:	9429      	str	r4, [sp, #164]	; 0xa4
 80075bc:	f8c9 0004 	str.w	r0, [r9, #4]
 80075c0:	9228      	str	r2, [sp, #160]	; 0xa0
 80075c2:	f300 82b9 	bgt.w	8007b38 <_svfprintf_r+0x1468>
 80075c6:	f109 0908 	add.w	r9, r9, #8
 80075ca:	e7a9      	b.n	8007520 <_svfprintf_r+0xe50>
 80075cc:	9b07      	ldr	r3, [sp, #28]
 80075ce:	07d8      	lsls	r0, r3, #31
 80075d0:	f53f adf2 	bmi.w	80071b8 <_svfprintf_r+0xae8>
 80075d4:	3501      	adds	r5, #1
 80075d6:	3401      	adds	r4, #1
 80075d8:	2301      	movs	r3, #1
 80075da:	2d07      	cmp	r5, #7
 80075dc:	9429      	str	r4, [sp, #164]	; 0xa4
 80075de:	9528      	str	r5, [sp, #160]	; 0xa0
 80075e0:	f8c9 6000 	str.w	r6, [r9]
 80075e4:	f8c9 3004 	str.w	r3, [r9, #4]
 80075e8:	f77f ae1a 	ble.w	8007220 <_svfprintf_r+0xb50>
 80075ec:	e70d      	b.n	800740a <_svfprintf_r+0xd3a>
 80075ee:	aa27      	add	r2, sp, #156	; 0x9c
 80075f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80075f4:	f000 fd9c 	bl	8008130 <__ssprint_r>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	f47f a963 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 80075fe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007600:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8007602:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007606:	e5e5      	b.n	80071d4 <_svfprintf_r+0xb04>
 8007608:	aa27      	add	r2, sp, #156	; 0x9c
 800760a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800760c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800760e:	f000 fd8f 	bl	8008130 <__ssprint_r>
 8007612:	2800      	cmp	r0, #0
 8007614:	f47f a956 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8007618:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800761a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800761c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007620:	e5e7      	b.n	80071f2 <_svfprintf_r+0xb22>
 8007622:	aa27      	add	r2, sp, #156	; 0x9c
 8007624:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007626:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007628:	f000 fd82 	bl	8008130 <__ssprint_r>
 800762c:	2800      	cmp	r0, #0
 800762e:	f47f a949 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8007632:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007634:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007638:	f7ff ba94 	b.w	8006b64 <_svfprintf_r+0x494>
 800763c:	9907      	ldr	r1, [sp, #28]
 800763e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8007642:	f000 80bb 	beq.w	80077bc <_svfprintf_r+0x10ec>
 8007646:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007648:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800764c:	4603      	mov	r3, r0
 800764e:	f1bb 0f00 	cmp.w	fp, #0
 8007652:	f103 0304 	add.w	r3, r3, #4
 8007656:	8804      	ldrh	r4, [r0, #0]
 8007658:	f04f 0500 	mov.w	r5, #0
 800765c:	f2c0 81c5 	blt.w	80079ea <_svfprintf_r+0x131a>
 8007660:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007664:	9107      	str	r1, [sp, #28]
 8007666:	ea54 0105 	orrs.w	r1, r4, r5
 800766a:	930e      	str	r3, [sp, #56]	; 0x38
 800766c:	f43f acda 	beq.w	8007024 <_svfprintf_r+0x954>
 8007670:	4617      	mov	r7, r2
 8007672:	f7ff b953 	b.w	800691c <_svfprintf_r+0x24c>
 8007676:	9b07      	ldr	r3, [sp, #28]
 8007678:	06df      	lsls	r7, r3, #27
 800767a:	d40b      	bmi.n	8007694 <_svfprintf_r+0xfc4>
 800767c:	9b07      	ldr	r3, [sp, #28]
 800767e:	065e      	lsls	r6, r3, #25
 8007680:	d508      	bpl.n	8007694 <_svfprintf_r+0xfc4>
 8007682:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007684:	6813      	ldr	r3, [r2, #0]
 8007686:	3204      	adds	r2, #4
 8007688:	920e      	str	r2, [sp, #56]	; 0x38
 800768a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800768e:	801a      	strh	r2, [r3, #0]
 8007690:	f7ff b845 	b.w	800671e <_svfprintf_r+0x4e>
 8007694:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007696:	6813      	ldr	r3, [r2, #0]
 8007698:	3204      	adds	r2, #4
 800769a:	920e      	str	r2, [sp, #56]	; 0x38
 800769c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	f7ff b83d 	b.w	800671e <_svfprintf_r+0x4e>
 80076a4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	f001 faa0 	bl	8008bf0 <__aeabi_dcmpun>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	f040 8305 	bne.w	8007cc0 <_svfprintf_r+0x15f0>
 80076b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076b8:	f1bb 3fff 	cmp.w	fp, #4294967295
 80076bc:	f023 0720 	bic.w	r7, r3, #32
 80076c0:	f000 826c 	beq.w	8007b9c <_svfprintf_r+0x14cc>
 80076c4:	2f47      	cmp	r7, #71	; 0x47
 80076c6:	f000 8187 	beq.w	80079d8 <_svfprintf_r+0x1308>
 80076ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076cc:	9a07      	ldr	r2, [sp, #28]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076d4:	920f      	str	r2, [sp, #60]	; 0x3c
 80076d6:	f2c0 8280 	blt.w	8007bda <_svfprintf_r+0x150a>
 80076da:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 80076de:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 80076e2:	2300      	movs	r3, #0
 80076e4:	9308      	str	r3, [sp, #32]
 80076e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076e8:	2b66      	cmp	r3, #102	; 0x66
 80076ea:	f000 825a 	beq.w	8007ba2 <_svfprintf_r+0x14d2>
 80076ee:	2b46      	cmp	r3, #70	; 0x46
 80076f0:	f000 8147 	beq.w	8007982 <_svfprintf_r+0x12b2>
 80076f4:	2f45      	cmp	r7, #69	; 0x45
 80076f6:	bf0c      	ite	eq
 80076f8:	f10b 0501 	addeq.w	r5, fp, #1
 80076fc:	465d      	movne	r5, fp
 80076fe:	a825      	add	r0, sp, #148	; 0x94
 8007700:	a922      	add	r1, sp, #136	; 0x88
 8007702:	aa21      	add	r2, sp, #132	; 0x84
 8007704:	2302      	movs	r3, #2
 8007706:	9004      	str	r0, [sp, #16]
 8007708:	9202      	str	r2, [sp, #8]
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	9501      	str	r5, [sp, #4]
 800770e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8007712:	9103      	str	r1, [sp, #12]
 8007714:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007716:	f7fc fb53 	bl	8003dc0 <_dtoa_r>
 800771a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800771c:	2b67      	cmp	r3, #103	; 0x67
 800771e:	4606      	mov	r6, r0
 8007720:	f040 8271 	bne.w	8007c06 <_svfprintf_r+0x1536>
 8007724:	9b07      	ldr	r3, [sp, #28]
 8007726:	07da      	lsls	r2, r3, #31
 8007728:	f140 82bf 	bpl.w	8007caa <_svfprintf_r+0x15da>
 800772c:	1974      	adds	r4, r6, r5
 800772e:	2200      	movs	r2, #0
 8007730:	2300      	movs	r3, #0
 8007732:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8007736:	f001 fa29 	bl	8008b8c <__aeabi_dcmpeq>
 800773a:	2800      	cmp	r0, #0
 800773c:	f040 8190 	bne.w	8007a60 <_svfprintf_r+0x1390>
 8007740:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007742:	429c      	cmp	r4, r3
 8007744:	d906      	bls.n	8007754 <_svfprintf_r+0x1084>
 8007746:	2130      	movs	r1, #48	; 0x30
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	9225      	str	r2, [sp, #148]	; 0x94
 800774c:	7019      	strb	r1, [r3, #0]
 800774e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007750:	429c      	cmp	r4, r3
 8007752:	d8f9      	bhi.n	8007748 <_svfprintf_r+0x1078>
 8007754:	1b9b      	subs	r3, r3, r6
 8007756:	2f47      	cmp	r7, #71	; 0x47
 8007758:	9312      	str	r3, [sp, #72]	; 0x48
 800775a:	f000 817a 	beq.w	8007a52 <_svfprintf_r+0x1382>
 800775e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007760:	2b65      	cmp	r3, #101	; 0x65
 8007762:	f340 825f 	ble.w	8007c24 <_svfprintf_r+0x1554>
 8007766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007768:	2b66      	cmp	r3, #102	; 0x66
 800776a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800776c:	9313      	str	r3, [sp, #76]	; 0x4c
 800776e:	f000 8266 	beq.w	8007c3e <_svfprintf_r+0x156e>
 8007772:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007774:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007776:	428a      	cmp	r2, r1
 8007778:	f2c0 8238 	blt.w	8007bec <_svfprintf_r+0x151c>
 800777c:	9b07      	ldr	r3, [sp, #28]
 800777e:	07d9      	lsls	r1, r3, #31
 8007780:	f100 8295 	bmi.w	8007cae <_svfprintf_r+0x15de>
 8007784:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007788:	920d      	str	r2, [sp, #52]	; 0x34
 800778a:	2267      	movs	r2, #103	; 0x67
 800778c:	9211      	str	r2, [sp, #68]	; 0x44
 800778e:	9a08      	ldr	r2, [sp, #32]
 8007790:	2a00      	cmp	r2, #0
 8007792:	f040 8132 	bne.w	80079fa <_svfprintf_r+0x132a>
 8007796:	9308      	str	r3, [sp, #32]
 8007798:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800779a:	9307      	str	r3, [sp, #28]
 800779c:	4693      	mov	fp, r2
 800779e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80077a2:	f7ff b967 	b.w	8006a74 <_svfprintf_r+0x3a4>
 80077a6:	f027 0707 	bic.w	r7, r7, #7
 80077aa:	ed97 7b00 	vldr	d7, [r7]
 80077ae:	f107 0308 	add.w	r3, r7, #8
 80077b2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80077b6:	930e      	str	r3, [sp, #56]	; 0x38
 80077b8:	f7ff ba88 	b.w	8006ccc <_svfprintf_r+0x5fc>
 80077bc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80077be:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80077c2:	f1bb 0f00 	cmp.w	fp, #0
 80077c6:	680c      	ldr	r4, [r1, #0]
 80077c8:	f101 0704 	add.w	r7, r1, #4
 80077cc:	f04f 0500 	mov.w	r5, #0
 80077d0:	f280 80ac 	bge.w	800792c <_svfprintf_r+0x125c>
 80077d4:	970e      	str	r7, [sp, #56]	; 0x38
 80077d6:	2700      	movs	r7, #0
 80077d8:	f7ff b8a0 	b.w	800691c <_svfprintf_r+0x24c>
 80077dc:	9907      	ldr	r1, [sp, #28]
 80077de:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80077e2:	f43f ae4c 	beq.w	800747e <_svfprintf_r+0xdae>
 80077e6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80077e8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80077ec:	4603      	mov	r3, r0
 80077ee:	f1bb 0f00 	cmp.w	fp, #0
 80077f2:	f103 0304 	add.w	r3, r3, #4
 80077f6:	8804      	ldrh	r4, [r0, #0]
 80077f8:	f04f 0500 	mov.w	r5, #0
 80077fc:	f2c0 80f2 	blt.w	80079e4 <_svfprintf_r+0x1314>
 8007800:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007804:	9107      	str	r1, [sp, #28]
 8007806:	ea54 0105 	orrs.w	r1, r4, r5
 800780a:	930e      	str	r3, [sp, #56]	; 0x38
 800780c:	4617      	mov	r7, r2
 800780e:	f47f a90d 	bne.w	8006a2c <_svfprintf_r+0x35c>
 8007812:	f7ff baf3 	b.w	8006dfc <_svfprintf_r+0x72c>
 8007816:	9b07      	ldr	r3, [sp, #28]
 8007818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800781a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800781e:	4613      	mov	r3, r2
 8007820:	f000 80e5 	beq.w	80079ee <_svfprintf_r+0x131e>
 8007824:	3304      	adds	r3, #4
 8007826:	8814      	ldrh	r4, [r2, #0]
 8007828:	930e      	str	r3, [sp, #56]	; 0x38
 800782a:	2500      	movs	r5, #0
 800782c:	f7ff bb03 	b.w	8006e36 <_svfprintf_r+0x766>
 8007830:	4614      	mov	r4, r2
 8007832:	3301      	adds	r3, #1
 8007834:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007836:	9328      	str	r3, [sp, #160]	; 0xa0
 8007838:	442c      	add	r4, r5
 800783a:	2b07      	cmp	r3, #7
 800783c:	9429      	str	r4, [sp, #164]	; 0xa4
 800783e:	e889 0024 	stmia.w	r9, {r2, r5}
 8007842:	f73f ae58 	bgt.w	80074f6 <_svfprintf_r+0xe26>
 8007846:	f109 0908 	add.w	r9, r9, #8
 800784a:	e65f      	b.n	800750c <_svfprintf_r+0xe3c>
 800784c:	080092bc 	.word	0x080092bc
 8007850:	2700      	movs	r7, #0
 8007852:	45bb      	cmp	fp, r7
 8007854:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8007858:	f6ff abf6 	blt.w	8007048 <_svfprintf_r+0x978>
 800785c:	9b07      	ldr	r3, [sp, #28]
 800785e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007862:	9307      	str	r3, [sp, #28]
 8007864:	f7ff bbbe 	b.w	8006fe4 <_svfprintf_r+0x914>
 8007868:	aa27      	add	r2, sp, #156	; 0x9c
 800786a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800786c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800786e:	f000 fc5f 	bl	8008130 <__ssprint_r>
 8007872:	2800      	cmp	r0, #0
 8007874:	f47f a826 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8007878:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800787a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800787e:	e405      	b.n	800708c <_svfprintf_r+0x9bc>
 8007880:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8007882:	f7ff bbda 	b.w	800703a <_svfprintf_r+0x96a>
 8007886:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007888:	4ab2      	ldr	r2, [pc, #712]	; (8007b54 <_svfprintf_r+0x1484>)
 800788a:	f8c9 2000 	str.w	r2, [r9]
 800788e:	3301      	adds	r3, #1
 8007890:	3401      	adds	r4, #1
 8007892:	2201      	movs	r2, #1
 8007894:	2b07      	cmp	r3, #7
 8007896:	9429      	str	r4, [sp, #164]	; 0xa4
 8007898:	9328      	str	r3, [sp, #160]	; 0xa0
 800789a:	f8c9 2004 	str.w	r2, [r9, #4]
 800789e:	f300 808e 	bgt.w	80079be <_svfprintf_r+0x12ee>
 80078a2:	f109 0908 	add.w	r9, r9, #8
 80078a6:	b92d      	cbnz	r5, 80078b4 <_svfprintf_r+0x11e4>
 80078a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078aa:	b91b      	cbnz	r3, 80078b4 <_svfprintf_r+0x11e4>
 80078ac:	9b07      	ldr	r3, [sp, #28]
 80078ae:	07df      	lsls	r7, r3, #31
 80078b0:	f57f a9a4 	bpl.w	8006bfc <_svfprintf_r+0x52c>
 80078b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80078b6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80078b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80078ba:	f8c9 2000 	str.w	r2, [r9]
 80078be:	3301      	adds	r3, #1
 80078c0:	440c      	add	r4, r1
 80078c2:	2b07      	cmp	r3, #7
 80078c4:	9429      	str	r4, [sp, #164]	; 0xa4
 80078c6:	f8c9 1004 	str.w	r1, [r9, #4]
 80078ca:	9328      	str	r3, [sp, #160]	; 0xa0
 80078cc:	f300 81d3 	bgt.w	8007c76 <_svfprintf_r+0x15a6>
 80078d0:	f109 0908 	add.w	r9, r9, #8
 80078d4:	426d      	negs	r5, r5
 80078d6:	2d00      	cmp	r5, #0
 80078d8:	f340 80ad 	ble.w	8007a36 <_svfprintf_r+0x1366>
 80078dc:	4a9e      	ldr	r2, [pc, #632]	; (8007b58 <_svfprintf_r+0x1488>)
 80078de:	920f      	str	r2, [sp, #60]	; 0x3c
 80078e0:	2d10      	cmp	r5, #16
 80078e2:	f340 80cc 	ble.w	8007a7e <_svfprintf_r+0x13ae>
 80078e6:	4622      	mov	r2, r4
 80078e8:	2710      	movs	r7, #16
 80078ea:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80078ee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80078f0:	e005      	b.n	80078fe <_svfprintf_r+0x122e>
 80078f2:	f109 0908 	add.w	r9, r9, #8
 80078f6:	3d10      	subs	r5, #16
 80078f8:	2d10      	cmp	r5, #16
 80078fa:	f340 80bf 	ble.w	8007a7c <_svfprintf_r+0x13ac>
 80078fe:	3301      	adds	r3, #1
 8007900:	3210      	adds	r2, #16
 8007902:	2b07      	cmp	r3, #7
 8007904:	9229      	str	r2, [sp, #164]	; 0xa4
 8007906:	9328      	str	r3, [sp, #160]	; 0xa0
 8007908:	f8c9 a000 	str.w	sl, [r9]
 800790c:	f8c9 7004 	str.w	r7, [r9, #4]
 8007910:	ddef      	ble.n	80078f2 <_svfprintf_r+0x1222>
 8007912:	aa27      	add	r2, sp, #156	; 0x9c
 8007914:	4621      	mov	r1, r4
 8007916:	4658      	mov	r0, fp
 8007918:	f000 fc0a 	bl	8008130 <__ssprint_r>
 800791c:	2800      	cmp	r0, #0
 800791e:	f47e afd1 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8007922:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8007924:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007926:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800792a:	e7e4      	b.n	80078f6 <_svfprintf_r+0x1226>
 800792c:	9a07      	ldr	r2, [sp, #28]
 800792e:	f7ff ba37 	b.w	8006da0 <_svfprintf_r+0x6d0>
 8007932:	9a07      	ldr	r2, [sp, #28]
 8007934:	e589      	b.n	800744a <_svfprintf_r+0xd7a>
 8007936:	9b07      	ldr	r3, [sp, #28]
 8007938:	f043 0320 	orr.w	r3, r3, #32
 800793c:	9307      	str	r3, [sp, #28]
 800793e:	f108 0801 	add.w	r8, r8, #1
 8007942:	f898 3000 	ldrb.w	r3, [r8]
 8007946:	f7fe bf1d 	b.w	8006784 <_svfprintf_r+0xb4>
 800794a:	aa27      	add	r2, sp, #156	; 0x9c
 800794c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800794e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007950:	f000 fbee 	bl	8008130 <__ssprint_r>
 8007954:	2800      	cmp	r0, #0
 8007956:	f47e afb5 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 800795a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800795c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007960:	f7ff bbac 	b.w	80070bc <_svfprintf_r+0x9ec>
 8007964:	2140      	movs	r1, #64	; 0x40
 8007966:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007968:	f7fd fde6 	bl	8005538 <_malloc_r>
 800796c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800796e:	6010      	str	r0, [r2, #0]
 8007970:	6110      	str	r0, [r2, #16]
 8007972:	2800      	cmp	r0, #0
 8007974:	f000 81f9 	beq.w	8007d6a <_svfprintf_r+0x169a>
 8007978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800797a:	2340      	movs	r3, #64	; 0x40
 800797c:	6153      	str	r3, [r2, #20]
 800797e:	f7fe bebe 	b.w	80066fe <_svfprintf_r+0x2e>
 8007982:	a825      	add	r0, sp, #148	; 0x94
 8007984:	a922      	add	r1, sp, #136	; 0x88
 8007986:	aa21      	add	r2, sp, #132	; 0x84
 8007988:	2303      	movs	r3, #3
 800798a:	9004      	str	r0, [sp, #16]
 800798c:	9202      	str	r2, [sp, #8]
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	f8cd b004 	str.w	fp, [sp, #4]
 8007994:	9103      	str	r1, [sp, #12]
 8007996:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800799a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800799c:	f7fc fa10 	bl	8003dc0 <_dtoa_r>
 80079a0:	465d      	mov	r5, fp
 80079a2:	4606      	mov	r6, r0
 80079a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079a6:	2b46      	cmp	r3, #70	; 0x46
 80079a8:	eb06 0405 	add.w	r4, r6, r5
 80079ac:	f47f aebf 	bne.w	800772e <_svfprintf_r+0x105e>
 80079b0:	7833      	ldrb	r3, [r6, #0]
 80079b2:	2b30      	cmp	r3, #48	; 0x30
 80079b4:	f000 818a 	beq.w	8007ccc <_svfprintf_r+0x15fc>
 80079b8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80079ba:	442c      	add	r4, r5
 80079bc:	e6b7      	b.n	800772e <_svfprintf_r+0x105e>
 80079be:	aa27      	add	r2, sp, #156	; 0x9c
 80079c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80079c4:	f000 fbb4 	bl	8008130 <__ssprint_r>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	f47e af7b 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 80079ce:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80079d0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80079d2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80079d6:	e766      	b.n	80078a6 <_svfprintf_r+0x11d6>
 80079d8:	f1bb 0f00 	cmp.w	fp, #0
 80079dc:	bf08      	it	eq
 80079de:	f04f 0b01 	moveq.w	fp, #1
 80079e2:	e672      	b.n	80076ca <_svfprintf_r+0xffa>
 80079e4:	930e      	str	r3, [sp, #56]	; 0x38
 80079e6:	4617      	mov	r7, r2
 80079e8:	e557      	b.n	800749a <_svfprintf_r+0xdca>
 80079ea:	930e      	str	r3, [sp, #56]	; 0x38
 80079ec:	e6f3      	b.n	80077d6 <_svfprintf_r+0x1106>
 80079ee:	3304      	adds	r3, #4
 80079f0:	6814      	ldr	r4, [r2, #0]
 80079f2:	930e      	str	r3, [sp, #56]	; 0x38
 80079f4:	2500      	movs	r5, #0
 80079f6:	f7ff ba1e 	b.w	8006e36 <_svfprintf_r+0x766>
 80079fa:	272d      	movs	r7, #45	; 0x2d
 80079fc:	9308      	str	r3, [sp, #32]
 80079fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a00:	9307      	str	r3, [sp, #28]
 8007a02:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8007a06:	f04f 0b00 	mov.w	fp, #0
 8007a0a:	f7ff b834 	b.w	8006a76 <_svfprintf_r+0x3a6>
 8007a0e:	4630      	mov	r0, r6
 8007a10:	f7fa fc76 	bl	8002300 <strlen>
 8007a14:	46a3      	mov	fp, r4
 8007a16:	4603      	mov	r3, r0
 8007a18:	900d      	str	r0, [sp, #52]	; 0x34
 8007a1a:	f7ff ba9d 	b.w	8006f58 <_svfprintf_r+0x888>
 8007a1e:	aa27      	add	r2, sp, #156	; 0x9c
 8007a20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a24:	f000 fb84 	bl	8008130 <__ssprint_r>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	f47e af4b 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8007a2e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007a30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007a32:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007a36:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007a38:	f8c9 6000 	str.w	r6, [r9]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	440c      	add	r4, r1
 8007a40:	2b07      	cmp	r3, #7
 8007a42:	9429      	str	r4, [sp, #164]	; 0xa4
 8007a44:	9328      	str	r3, [sp, #160]	; 0xa0
 8007a46:	f8c9 1004 	str.w	r1, [r9, #4]
 8007a4a:	f77f a8d5 	ble.w	8006bf8 <_svfprintf_r+0x528>
 8007a4e:	f7ff bbf6 	b.w	800723e <_svfprintf_r+0xb6e>
 8007a52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a54:	1cdd      	adds	r5, r3, #3
 8007a56:	db1e      	blt.n	8007a96 <_svfprintf_r+0x13c6>
 8007a58:	459b      	cmp	fp, r3
 8007a5a:	db1c      	blt.n	8007a96 <_svfprintf_r+0x13c6>
 8007a5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a5e:	e688      	b.n	8007772 <_svfprintf_r+0x10a2>
 8007a60:	4623      	mov	r3, r4
 8007a62:	e677      	b.n	8007754 <_svfprintf_r+0x1084>
 8007a64:	aa27      	add	r2, sp, #156	; 0x9c
 8007a66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a68:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a6a:	f000 fb61 	bl	8008130 <__ssprint_r>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	f47e af28 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8007a74:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007a76:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007a7a:	e447      	b.n	800730c <_svfprintf_r+0xc3c>
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	3301      	adds	r3, #1
 8007a80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a82:	9328      	str	r3, [sp, #160]	; 0xa0
 8007a84:	442c      	add	r4, r5
 8007a86:	2b07      	cmp	r3, #7
 8007a88:	9429      	str	r4, [sp, #164]	; 0xa4
 8007a8a:	e889 0024 	stmia.w	r9, {r2, r5}
 8007a8e:	dcc6      	bgt.n	8007a1e <_svfprintf_r+0x134e>
 8007a90:	f109 0908 	add.w	r9, r9, #8
 8007a94:	e7cf      	b.n	8007a36 <_svfprintf_r+0x1366>
 8007a96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007a98:	3a02      	subs	r2, #2
 8007a9a:	9211      	str	r2, [sp, #68]	; 0x44
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8007aa4:	9321      	str	r3, [sp, #132]	; 0x84
 8007aa6:	bfb8      	it	lt
 8007aa8:	425b      	neglt	r3, r3
 8007aaa:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8007aae:	bfb4      	ite	lt
 8007ab0:	222d      	movlt	r2, #45	; 0x2d
 8007ab2:	222b      	movge	r2, #43	; 0x2b
 8007ab4:	2b09      	cmp	r3, #9
 8007ab6:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8007aba:	f340 80ee 	ble.w	8007c9a <_svfprintf_r+0x15ca>
 8007abe:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	4a25      	ldr	r2, [pc, #148]	; (8007b5c <_svfprintf_r+0x148c>)
 8007ac6:	fb82 2103 	smull	r2, r1, r2, r3
 8007aca:	17da      	asrs	r2, r3, #31
 8007acc:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8007ad0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007ad4:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8007ad8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007adc:	2a09      	cmp	r2, #9
 8007ade:	4613      	mov	r3, r2
 8007ae0:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8007ae4:	dcee      	bgt.n	8007ac4 <_svfprintf_r+0x13f4>
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	3330      	adds	r3, #48	; 0x30
 8007aea:	b2da      	uxtb	r2, r3
 8007aec:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8007af0:	4288      	cmp	r0, r1
 8007af2:	f240 8137 	bls.w	8007d64 <_svfprintf_r+0x1694>
 8007af6:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8007afa:	4623      	mov	r3, r4
 8007afc:	e001      	b.n	8007b02 <_svfprintf_r+0x1432>
 8007afe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b02:	f801 2b01 	strb.w	r2, [r1], #1
 8007b06:	4298      	cmp	r0, r3
 8007b08:	d1f9      	bne.n	8007afe <_svfprintf_r+0x142e>
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	1b1b      	subs	r3, r3, r4
 8007b0e:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 8007b12:	4413      	add	r3, r2
 8007b14:	aa23      	add	r2, sp, #140	; 0x8c
 8007b16:	1a9b      	subs	r3, r3, r2
 8007b18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b1a:	9319      	str	r3, [sp, #100]	; 0x64
 8007b1c:	2a01      	cmp	r2, #1
 8007b1e:	4413      	add	r3, r2
 8007b20:	930d      	str	r3, [sp, #52]	; 0x34
 8007b22:	f340 80ea 	ble.w	8007cfa <_svfprintf_r+0x162a>
 8007b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b28:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007b2a:	4413      	add	r3, r2
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	930d      	str	r3, [sp, #52]	; 0x34
 8007b30:	9213      	str	r2, [sp, #76]	; 0x4c
 8007b32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007b36:	e62a      	b.n	800778e <_svfprintf_r+0x10be>
 8007b38:	aa27      	add	r2, sp, #156	; 0x9c
 8007b3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b3e:	f000 faf7 	bl	8008130 <__ssprint_r>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	f47e aebe 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8007b48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b4a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007b4c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007b50:	e4e6      	b.n	8007520 <_svfprintf_r+0xe50>
 8007b52:	bf00      	nop
 8007b54:	08009198 	.word	0x08009198
 8007b58:	080092bc 	.word	0x080092bc
 8007b5c:	66666667 	.word	0x66666667
 8007b60:	aa27      	add	r2, sp, #156	; 0x9c
 8007b62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007b66:	f000 fae3 	bl	8008130 <__ssprint_r>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	f47e aeaa 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8007b70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b74:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007b7c:	e4e8      	b.n	8007550 <_svfprintf_r+0xe80>
 8007b7e:	2d06      	cmp	r5, #6
 8007b80:	462b      	mov	r3, r5
 8007b82:	bf28      	it	cs
 8007b84:	2306      	movcs	r3, #6
 8007b86:	930d      	str	r3, [sp, #52]	; 0x34
 8007b88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007b8c:	46b3      	mov	fp, r6
 8007b8e:	970e      	str	r7, [sp, #56]	; 0x38
 8007b90:	9613      	str	r6, [sp, #76]	; 0x4c
 8007b92:	4637      	mov	r7, r6
 8007b94:	9308      	str	r3, [sp, #32]
 8007b96:	4e88      	ldr	r6, [pc, #544]	; (8007db8 <_svfprintf_r+0x16e8>)
 8007b98:	f7fe bf6c 	b.w	8006a74 <_svfprintf_r+0x3a4>
 8007b9c:	f04f 0b06 	mov.w	fp, #6
 8007ba0:	e593      	b.n	80076ca <_svfprintf_r+0xffa>
 8007ba2:	a825      	add	r0, sp, #148	; 0x94
 8007ba4:	a922      	add	r1, sp, #136	; 0x88
 8007ba6:	aa21      	add	r2, sp, #132	; 0x84
 8007ba8:	2303      	movs	r3, #3
 8007baa:	9004      	str	r0, [sp, #16]
 8007bac:	9202      	str	r2, [sp, #8]
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	f8cd b004 	str.w	fp, [sp, #4]
 8007bb4:	9103      	str	r1, [sp, #12]
 8007bb6:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8007bba:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007bbc:	f7fc f900 	bl	8003dc0 <_dtoa_r>
 8007bc0:	465d      	mov	r5, fp
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	eb00 040b 	add.w	r4, r0, fp
 8007bc8:	e6f2      	b.n	80079b0 <_svfprintf_r+0x12e0>
 8007bca:	272d      	movs	r7, #45	; 0x2d
 8007bcc:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8007bd0:	f7ff b8a3 	b.w	8006d1a <_svfprintf_r+0x64a>
 8007bd4:	9307      	str	r3, [sp, #28]
 8007bd6:	f7ff b94c 	b.w	8006e72 <_svfprintf_r+0x7a2>
 8007bda:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8007bde:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8007be2:	931d      	str	r3, [sp, #116]	; 0x74
 8007be4:	232d      	movs	r3, #45	; 0x2d
 8007be6:	911c      	str	r1, [sp, #112]	; 0x70
 8007be8:	9308      	str	r3, [sp, #32]
 8007bea:	e57c      	b.n	80076e6 <_svfprintf_r+0x1016>
 8007bec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007bee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bf0:	4413      	add	r3, r2
 8007bf2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bf4:	930d      	str	r3, [sp, #52]	; 0x34
 8007bf6:	2a00      	cmp	r2, #0
 8007bf8:	f340 8089 	ble.w	8007d0e <_svfprintf_r+0x163e>
 8007bfc:	2267      	movs	r2, #103	; 0x67
 8007bfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007c02:	9211      	str	r2, [sp, #68]	; 0x44
 8007c04:	e5c3      	b.n	800778e <_svfprintf_r+0x10be>
 8007c06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c08:	2b47      	cmp	r3, #71	; 0x47
 8007c0a:	f47f ad8f 	bne.w	800772c <_svfprintf_r+0x105c>
 8007c0e:	9b07      	ldr	r3, [sp, #28]
 8007c10:	07db      	lsls	r3, r3, #31
 8007c12:	f53f aec7 	bmi.w	80079a4 <_svfprintf_r+0x12d4>
 8007c16:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007c18:	2f47      	cmp	r7, #71	; 0x47
 8007c1a:	eba3 0306 	sub.w	r3, r3, r6
 8007c1e:	9312      	str	r3, [sp, #72]	; 0x48
 8007c20:	f43f af17 	beq.w	8007a52 <_svfprintf_r+0x1382>
 8007c24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c26:	e739      	b.n	8007a9c <_svfprintf_r+0x13cc>
 8007c28:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007c2c:	970e      	str	r7, [sp, #56]	; 0x38
 8007c2e:	9308      	str	r3, [sp, #32]
 8007c30:	950d      	str	r5, [sp, #52]	; 0x34
 8007c32:	4683      	mov	fp, r0
 8007c34:	9013      	str	r0, [sp, #76]	; 0x4c
 8007c36:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8007c3a:	f7fe bf1b 	b.w	8006a74 <_svfprintf_r+0x3a4>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	dd6d      	ble.n	8007d1e <_svfprintf_r+0x164e>
 8007c42:	f1bb 0f00 	cmp.w	fp, #0
 8007c46:	d14f      	bne.n	8007ce8 <_svfprintf_r+0x1618>
 8007c48:	9a07      	ldr	r2, [sp, #28]
 8007c4a:	07d4      	lsls	r4, r2, #31
 8007c4c:	d44c      	bmi.n	8007ce8 <_svfprintf_r+0x1618>
 8007c4e:	461a      	mov	r2, r3
 8007c50:	920d      	str	r2, [sp, #52]	; 0x34
 8007c52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007c56:	e59a      	b.n	800778e <_svfprintf_r+0x10be>
 8007c58:	9b07      	ldr	r3, [sp, #28]
 8007c5a:	07db      	lsls	r3, r3, #31
 8007c5c:	465f      	mov	r7, fp
 8007c5e:	d505      	bpl.n	8007c6c <_svfprintf_r+0x159c>
 8007c60:	ae44      	add	r6, sp, #272	; 0x110
 8007c62:	2330      	movs	r3, #48	; 0x30
 8007c64:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8007c68:	f7fe befa 	b.w	8006a60 <_svfprintf_r+0x390>
 8007c6c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8007c70:	ae34      	add	r6, sp, #208	; 0xd0
 8007c72:	f7fe bef8 	b.w	8006a66 <_svfprintf_r+0x396>
 8007c76:	aa27      	add	r2, sp, #156	; 0x9c
 8007c78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c7c:	f000 fa58 	bl	8008130 <__ssprint_r>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	f47e ae1f 	bne.w	80068c4 <_svfprintf_r+0x1f4>
 8007c86:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8007c88:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007c8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007c8c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007c90:	e620      	b.n	80078d4 <_svfprintf_r+0x1204>
 8007c92:	46a0      	mov	r8, r4
 8007c94:	2500      	movs	r5, #0
 8007c96:	f7fe bd77 	b.w	8006788 <_svfprintf_r+0xb8>
 8007c9a:	3330      	adds	r3, #48	; 0x30
 8007c9c:	2230      	movs	r2, #48	; 0x30
 8007c9e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8007ca2:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8007ca6:	ab24      	add	r3, sp, #144	; 0x90
 8007ca8:	e734      	b.n	8007b14 <_svfprintf_r+0x1444>
 8007caa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007cac:	e552      	b.n	8007754 <_svfprintf_r+0x1084>
 8007cae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007cb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cb2:	4413      	add	r3, r2
 8007cb4:	2267      	movs	r2, #103	; 0x67
 8007cb6:	930d      	str	r3, [sp, #52]	; 0x34
 8007cb8:	9211      	str	r2, [sp, #68]	; 0x44
 8007cba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007cbe:	e566      	b.n	800778e <_svfprintf_r+0x10be>
 8007cc0:	4e3e      	ldr	r6, [pc, #248]	; (8007dbc <_svfprintf_r+0x16ec>)
 8007cc2:	4b3f      	ldr	r3, [pc, #252]	; (8007dc0 <_svfprintf_r+0x16f0>)
 8007cc4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8007cc8:	f7ff b829 	b.w	8006d1e <_svfprintf_r+0x64e>
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2300      	movs	r3, #0
 8007cd0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8007cd4:	f000 ff5a 	bl	8008b8c <__aeabi_dcmpeq>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	f47f ae6d 	bne.w	80079b8 <_svfprintf_r+0x12e8>
 8007cde:	f1c5 0501 	rsb	r5, r5, #1
 8007ce2:	9521      	str	r5, [sp, #132]	; 0x84
 8007ce4:	442c      	add	r4, r5
 8007ce6:	e522      	b.n	800772e <_svfprintf_r+0x105e>
 8007ce8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007cec:	189d      	adds	r5, r3, r2
 8007cee:	eb05 030b 	add.w	r3, r5, fp
 8007cf2:	930d      	str	r3, [sp, #52]	; 0x34
 8007cf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007cf8:	e549      	b.n	800778e <_svfprintf_r+0x10be>
 8007cfa:	9b07      	ldr	r3, [sp, #28]
 8007cfc:	f013 0301 	ands.w	r3, r3, #1
 8007d00:	f47f af11 	bne.w	8007b26 <_svfprintf_r+0x1456>
 8007d04:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007d0c:	e53f      	b.n	800778e <_svfprintf_r+0x10be>
 8007d0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d12:	f1c3 0301 	rsb	r3, r3, #1
 8007d16:	441a      	add	r2, r3
 8007d18:	4613      	mov	r3, r2
 8007d1a:	920d      	str	r2, [sp, #52]	; 0x34
 8007d1c:	e76e      	b.n	8007bfc <_svfprintf_r+0x152c>
 8007d1e:	f1bb 0f00 	cmp.w	fp, #0
 8007d22:	d102      	bne.n	8007d2a <_svfprintf_r+0x165a>
 8007d24:	9b07      	ldr	r3, [sp, #28]
 8007d26:	07d8      	lsls	r0, r3, #31
 8007d28:	d507      	bpl.n	8007d3a <_svfprintf_r+0x166a>
 8007d2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007d2c:	1c5d      	adds	r5, r3, #1
 8007d2e:	eb05 030b 	add.w	r3, r5, fp
 8007d32:	930d      	str	r3, [sp, #52]	; 0x34
 8007d34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007d38:	e529      	b.n	800778e <_svfprintf_r+0x10be>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	930d      	str	r3, [sp, #52]	; 0x34
 8007d3e:	e526      	b.n	800778e <_svfprintf_r+0x10be>
 8007d40:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007d42:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007d46:	6805      	ldr	r5, [r0, #0]
 8007d48:	3004      	adds	r0, #4
 8007d4a:	2d00      	cmp	r5, #0
 8007d4c:	900e      	str	r0, [sp, #56]	; 0x38
 8007d4e:	46a0      	mov	r8, r4
 8007d50:	f6be ad18 	bge.w	8006784 <_svfprintf_r+0xb4>
 8007d54:	f04f 35ff 	mov.w	r5, #4294967295
 8007d58:	f7fe bd14 	b.w	8006784 <_svfprintf_r+0xb4>
 8007d5c:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007d60:	f7fe bdc1 	b.w	80068e6 <_svfprintf_r+0x216>
 8007d64:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8007d68:	e6d4      	b.n	8007b14 <_svfprintf_r+0x1444>
 8007d6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d6c:	230c      	movs	r3, #12
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	f04f 30ff 	mov.w	r0, #4294967295
 8007d74:	f7fe bdaf 	b.w	80068d6 <_svfprintf_r+0x206>
 8007d78:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007d7c:	f7fe be30 	b.w	80069e0 <_svfprintf_r+0x310>
 8007d80:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007d84:	f7fe bf92 	b.w	8006cac <_svfprintf_r+0x5dc>
 8007d88:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007d8c:	f7ff b845 	b.w	8006e1a <_svfprintf_r+0x74a>
 8007d90:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007d94:	f7ff b813 	b.w	8006dbe <_svfprintf_r+0x6ee>
 8007d98:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007d9c:	f7fe bfe5 	b.w	8006d6a <_svfprintf_r+0x69a>
 8007da0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007da4:	f7ff b92d 	b.w	8007002 <_svfprintf_r+0x932>
 8007da8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007dac:	f7ff b908 	b.w	8006fc0 <_svfprintf_r+0x8f0>
 8007db0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007db4:	f7ff b8e6 	b.w	8006f84 <_svfprintf_r+0x8b4>
 8007db8:	08009190 	.word	0x08009190
 8007dbc:	08009164 	.word	0x08009164
 8007dc0:	08009160 	.word	0x08009160

08007dc4 <__sprint_r.part.0>:
 8007dc4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8007dc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dca:	049c      	lsls	r4, r3, #18
 8007dcc:	4692      	mov	sl, r2
 8007dce:	d52c      	bpl.n	8007e2a <__sprint_r.part.0+0x66>
 8007dd0:	6893      	ldr	r3, [r2, #8]
 8007dd2:	6812      	ldr	r2, [r2, #0]
 8007dd4:	b33b      	cbz	r3, 8007e26 <__sprint_r.part.0+0x62>
 8007dd6:	460f      	mov	r7, r1
 8007dd8:	4680      	mov	r8, r0
 8007dda:	f102 0908 	add.w	r9, r2, #8
 8007dde:	e919 0060 	ldmdb	r9, {r5, r6}
 8007de2:	08b6      	lsrs	r6, r6, #2
 8007de4:	d017      	beq.n	8007e16 <__sprint_r.part.0+0x52>
 8007de6:	3d04      	subs	r5, #4
 8007de8:	2400      	movs	r4, #0
 8007dea:	e001      	b.n	8007df0 <__sprint_r.part.0+0x2c>
 8007dec:	42a6      	cmp	r6, r4
 8007dee:	d010      	beq.n	8007e12 <__sprint_r.part.0+0x4e>
 8007df0:	463a      	mov	r2, r7
 8007df2:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8007df6:	4640      	mov	r0, r8
 8007df8:	f000 f910 	bl	800801c <_fputwc_r>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	f104 0401 	add.w	r4, r4, #1
 8007e02:	d1f3      	bne.n	8007dec <__sprint_r.part.0+0x28>
 8007e04:	2300      	movs	r3, #0
 8007e06:	f8ca 3008 	str.w	r3, [sl, #8]
 8007e0a:	f8ca 3004 	str.w	r3, [sl, #4]
 8007e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e12:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007e16:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 8007e1a:	f8ca 3008 	str.w	r3, [sl, #8]
 8007e1e:	f109 0908 	add.w	r9, r9, #8
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1db      	bne.n	8007dde <__sprint_r.part.0+0x1a>
 8007e26:	2000      	movs	r0, #0
 8007e28:	e7ec      	b.n	8007e04 <__sprint_r.part.0+0x40>
 8007e2a:	f7fd f957 	bl	80050dc <__sfvwrite_r>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f8ca 3008 	str.w	r3, [sl, #8]
 8007e34:	f8ca 3004 	str.w	r3, [sl, #4]
 8007e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007e3c <__sprint_r>:
 8007e3c:	6893      	ldr	r3, [r2, #8]
 8007e3e:	b10b      	cbz	r3, 8007e44 <__sprint_r+0x8>
 8007e40:	f7ff bfc0 	b.w	8007dc4 <__sprint_r.part.0>
 8007e44:	b410      	push	{r4}
 8007e46:	4618      	mov	r0, r3
 8007e48:	6053      	str	r3, [r2, #4]
 8007e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <_write_r>:
 8007e50:	b570      	push	{r4, r5, r6, lr}
 8007e52:	460d      	mov	r5, r1
 8007e54:	4c08      	ldr	r4, [pc, #32]	; (8007e78 <_write_r+0x28>)
 8007e56:	4611      	mov	r1, r2
 8007e58:	4606      	mov	r6, r0
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	2300      	movs	r3, #0
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	f7f8 fea7 	bl	8000bb4 <_write>
 8007e66:	1c43      	adds	r3, r0, #1
 8007e68:	d000      	beq.n	8007e6c <_write_r+0x1c>
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0fb      	beq.n	8007e6a <_write_r+0x1a>
 8007e72:	6033      	str	r3, [r6, #0]
 8007e74:	bd70      	pop	{r4, r5, r6, pc}
 8007e76:	bf00      	nop
 8007e78:	20000a7c 	.word	0x20000a7c

08007e7c <_calloc_r>:
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	fb02 f101 	mul.w	r1, r2, r1
 8007e82:	f7fd fb59 	bl	8005538 <_malloc_r>
 8007e86:	4604      	mov	r4, r0
 8007e88:	b1d8      	cbz	r0, 8007ec2 <_calloc_r+0x46>
 8007e8a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007e8e:	f022 0203 	bic.w	r2, r2, #3
 8007e92:	3a04      	subs	r2, #4
 8007e94:	2a24      	cmp	r2, #36	; 0x24
 8007e96:	d818      	bhi.n	8007eca <_calloc_r+0x4e>
 8007e98:	2a13      	cmp	r2, #19
 8007e9a:	d914      	bls.n	8007ec6 <_calloc_r+0x4a>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	2a1b      	cmp	r2, #27
 8007ea0:	6003      	str	r3, [r0, #0]
 8007ea2:	6043      	str	r3, [r0, #4]
 8007ea4:	d916      	bls.n	8007ed4 <_calloc_r+0x58>
 8007ea6:	2a24      	cmp	r2, #36	; 0x24
 8007ea8:	6083      	str	r3, [r0, #8]
 8007eaa:	60c3      	str	r3, [r0, #12]
 8007eac:	bf11      	iteee	ne
 8007eae:	f100 0210 	addne.w	r2, r0, #16
 8007eb2:	6103      	streq	r3, [r0, #16]
 8007eb4:	6143      	streq	r3, [r0, #20]
 8007eb6:	f100 0218 	addeq.w	r2, r0, #24
 8007eba:	2300      	movs	r3, #0
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	6053      	str	r3, [r2, #4]
 8007ec0:	6093      	str	r3, [r2, #8]
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	bd10      	pop	{r4, pc}
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	e7f7      	b.n	8007eba <_calloc_r+0x3e>
 8007eca:	2100      	movs	r1, #0
 8007ecc:	f7fa f95e 	bl	800218c <memset>
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	bd10      	pop	{r4, pc}
 8007ed4:	f100 0208 	add.w	r2, r0, #8
 8007ed8:	e7ef      	b.n	8007eba <_calloc_r+0x3e>
 8007eda:	bf00      	nop

08007edc <_close_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4c07      	ldr	r4, [pc, #28]	; (8007efc <_close_r+0x20>)
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	6023      	str	r3, [r4, #0]
 8007ee8:	f7f9 f9c8 	bl	800127c <_close>
 8007eec:	1c43      	adds	r3, r0, #1
 8007eee:	d000      	beq.n	8007ef2 <_close_r+0x16>
 8007ef0:	bd38      	pop	{r3, r4, r5, pc}
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d0fb      	beq.n	8007ef0 <_close_r+0x14>
 8007ef8:	602b      	str	r3, [r5, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	20000a7c 	.word	0x20000a7c

08007f00 <_fclose_r>:
 8007f00:	2900      	cmp	r1, #0
 8007f02:	d03d      	beq.n	8007f80 <_fclose_r+0x80>
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	4605      	mov	r5, r0
 8007f08:	460c      	mov	r4, r1
 8007f0a:	b108      	cbz	r0, 8007f10 <_fclose_r+0x10>
 8007f0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007f0e:	b37b      	cbz	r3, 8007f70 <_fclose_r+0x70>
 8007f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f14:	b90b      	cbnz	r3, 8007f1a <_fclose_r+0x1a>
 8007f16:	2000      	movs	r0, #0
 8007f18:	bd70      	pop	{r4, r5, r6, pc}
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f7fc fe65 	bl	8004bec <__sflush_r>
 8007f22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007f24:	4606      	mov	r6, r0
 8007f26:	b133      	cbz	r3, 8007f36 <_fclose_r+0x36>
 8007f28:	69e1      	ldr	r1, [r4, #28]
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	4798      	blx	r3
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	bfb8      	it	lt
 8007f32:	f04f 36ff 	movlt.w	r6, #4294967295
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	061b      	lsls	r3, r3, #24
 8007f3a:	d41c      	bmi.n	8007f76 <_fclose_r+0x76>
 8007f3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007f3e:	b141      	cbz	r1, 8007f52 <_fclose_r+0x52>
 8007f40:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8007f44:	4299      	cmp	r1, r3
 8007f46:	d002      	beq.n	8007f4e <_fclose_r+0x4e>
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f7fc ffdf 	bl	8004f0c <_free_r>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	6323      	str	r3, [r4, #48]	; 0x30
 8007f52:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007f54:	b121      	cbz	r1, 8007f60 <_fclose_r+0x60>
 8007f56:	4628      	mov	r0, r5
 8007f58:	f7fc ffd8 	bl	8004f0c <_free_r>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	6463      	str	r3, [r4, #68]	; 0x44
 8007f60:	f7fc ff82 	bl	8004e68 <__sfp_lock_acquire>
 8007f64:	2300      	movs	r3, #0
 8007f66:	81a3      	strh	r3, [r4, #12]
 8007f68:	f7fc ff80 	bl	8004e6c <__sfp_lock_release>
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	bd70      	pop	{r4, r5, r6, pc}
 8007f70:	f7fc ff74 	bl	8004e5c <__sinit>
 8007f74:	e7cc      	b.n	8007f10 <_fclose_r+0x10>
 8007f76:	6921      	ldr	r1, [r4, #16]
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f7fc ffc7 	bl	8004f0c <_free_r>
 8007f7e:	e7dd      	b.n	8007f3c <_fclose_r+0x3c>
 8007f80:	2000      	movs	r0, #0
 8007f82:	4770      	bx	lr

08007f84 <__fputwc>:
 8007f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f88:	b082      	sub	sp, #8
 8007f8a:	4680      	mov	r8, r0
 8007f8c:	4689      	mov	r9, r1
 8007f8e:	4614      	mov	r4, r2
 8007f90:	f000 f87e 	bl	8008090 <__locale_mb_cur_max>
 8007f94:	2801      	cmp	r0, #1
 8007f96:	d033      	beq.n	8008000 <__fputwc+0x7c>
 8007f98:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8007f9c:	464a      	mov	r2, r9
 8007f9e:	a901      	add	r1, sp, #4
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	f000 f99b 	bl	80082dc <_wcrtomb_r>
 8007fa6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007faa:	4682      	mov	sl, r0
 8007fac:	d021      	beq.n	8007ff2 <__fputwc+0x6e>
 8007fae:	b388      	cbz	r0, 8008014 <__fputwc+0x90>
 8007fb0:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8007fb4:	2500      	movs	r5, #0
 8007fb6:	e008      	b.n	8007fca <__fputwc+0x46>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	6022      	str	r2, [r4, #0]
 8007fbe:	701e      	strb	r6, [r3, #0]
 8007fc0:	3501      	adds	r5, #1
 8007fc2:	4555      	cmp	r5, sl
 8007fc4:	d226      	bcs.n	8008014 <__fputwc+0x90>
 8007fc6:	ab01      	add	r3, sp, #4
 8007fc8:	5d5e      	ldrb	r6, [r3, r5]
 8007fca:	68a3      	ldr	r3, [r4, #8]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	60a3      	str	r3, [r4, #8]
 8007fd2:	daf1      	bge.n	8007fb8 <__fputwc+0x34>
 8007fd4:	69a7      	ldr	r7, [r4, #24]
 8007fd6:	42bb      	cmp	r3, r7
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4622      	mov	r2, r4
 8007fdc:	4640      	mov	r0, r8
 8007fde:	db01      	blt.n	8007fe4 <__fputwc+0x60>
 8007fe0:	2e0a      	cmp	r6, #10
 8007fe2:	d1e9      	bne.n	8007fb8 <__fputwc+0x34>
 8007fe4:	f000 f924 	bl	8008230 <__swbuf_r>
 8007fe8:	1c43      	adds	r3, r0, #1
 8007fea:	d1e9      	bne.n	8007fc0 <__fputwc+0x3c>
 8007fec:	b002      	add	sp, #8
 8007fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff2:	89a3      	ldrh	r3, [r4, #12]
 8007ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ff8:	81a3      	strh	r3, [r4, #12]
 8007ffa:	b002      	add	sp, #8
 8007ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008000:	f109 33ff 	add.w	r3, r9, #4294967295
 8008004:	2bfe      	cmp	r3, #254	; 0xfe
 8008006:	d8c7      	bhi.n	8007f98 <__fputwc+0x14>
 8008008:	fa5f f689 	uxtb.w	r6, r9
 800800c:	4682      	mov	sl, r0
 800800e:	f88d 6004 	strb.w	r6, [sp, #4]
 8008012:	e7cf      	b.n	8007fb4 <__fputwc+0x30>
 8008014:	4648      	mov	r0, r9
 8008016:	b002      	add	sp, #8
 8008018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800801c <_fputwc_r>:
 800801c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8008020:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008024:	d10b      	bne.n	800803e <_fputwc_r+0x22>
 8008026:	b410      	push	{r4}
 8008028:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800802a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800802e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8008032:	6654      	str	r4, [r2, #100]	; 0x64
 8008034:	8193      	strh	r3, [r2, #12]
 8008036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800803a:	f7ff bfa3 	b.w	8007f84 <__fputwc>
 800803e:	f7ff bfa1 	b.w	8007f84 <__fputwc>
 8008042:	bf00      	nop

08008044 <_fstat_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	460b      	mov	r3, r1
 8008048:	4c07      	ldr	r4, [pc, #28]	; (8008068 <_fstat_r+0x24>)
 800804a:	4605      	mov	r5, r0
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	2300      	movs	r3, #0
 8008052:	6023      	str	r3, [r4, #0]
 8008054:	f7f9 f91c 	bl	8001290 <_fstat>
 8008058:	1c43      	adds	r3, r0, #1
 800805a:	d000      	beq.n	800805e <_fstat_r+0x1a>
 800805c:	bd38      	pop	{r3, r4, r5, pc}
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0fb      	beq.n	800805c <_fstat_r+0x18>
 8008064:	602b      	str	r3, [r5, #0]
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	20000a7c 	.word	0x20000a7c

0800806c <_isatty_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4c07      	ldr	r4, [pc, #28]	; (800808c <_isatty_r+0x20>)
 8008070:	2300      	movs	r3, #0
 8008072:	4605      	mov	r5, r0
 8008074:	4608      	mov	r0, r1
 8008076:	6023      	str	r3, [r4, #0]
 8008078:	f7f9 f95e 	bl	8001338 <_isatty>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	d000      	beq.n	8008082 <_isatty_r+0x16>
 8008080:	bd38      	pop	{r3, r4, r5, pc}
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0fb      	beq.n	8008080 <_isatty_r+0x14>
 8008088:	602b      	str	r3, [r5, #0]
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	20000a7c 	.word	0x20000a7c

08008090 <__locale_mb_cur_max>:
 8008090:	4b04      	ldr	r3, [pc, #16]	; (80080a4 <__locale_mb_cur_max+0x14>)
 8008092:	4a05      	ldr	r2, [pc, #20]	; (80080a8 <__locale_mb_cur_max+0x18>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008098:	2b00      	cmp	r3, #0
 800809a:	bf08      	it	eq
 800809c:	4613      	moveq	r3, r2
 800809e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80080a2:	4770      	bx	lr
 80080a4:	20000460 	.word	0x20000460
 80080a8:	20000874 	.word	0x20000874

080080ac <_lseek_r>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	460d      	mov	r5, r1
 80080b0:	4c08      	ldr	r4, [pc, #32]	; (80080d4 <_lseek_r+0x28>)
 80080b2:	4611      	mov	r1, r2
 80080b4:	4606      	mov	r6, r0
 80080b6:	461a      	mov	r2, r3
 80080b8:	4628      	mov	r0, r5
 80080ba:	2300      	movs	r3, #0
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	f7f9 f8c1 	bl	8001244 <_lseek>
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	d000      	beq.n	80080c8 <_lseek_r+0x1c>
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0fb      	beq.n	80080c6 <_lseek_r+0x1a>
 80080ce:	6033      	str	r3, [r6, #0]
 80080d0:	bd70      	pop	{r4, r5, r6, pc}
 80080d2:	bf00      	nop
 80080d4:	20000a7c 	.word	0x20000a7c

080080d8 <__ascii_mbtowc>:
 80080d8:	b082      	sub	sp, #8
 80080da:	b149      	cbz	r1, 80080f0 <__ascii_mbtowc+0x18>
 80080dc:	b15a      	cbz	r2, 80080f6 <__ascii_mbtowc+0x1e>
 80080de:	b16b      	cbz	r3, 80080fc <__ascii_mbtowc+0x24>
 80080e0:	7813      	ldrb	r3, [r2, #0]
 80080e2:	600b      	str	r3, [r1, #0]
 80080e4:	7812      	ldrb	r2, [r2, #0]
 80080e6:	1c10      	adds	r0, r2, #0
 80080e8:	bf18      	it	ne
 80080ea:	2001      	movne	r0, #1
 80080ec:	b002      	add	sp, #8
 80080ee:	4770      	bx	lr
 80080f0:	a901      	add	r1, sp, #4
 80080f2:	2a00      	cmp	r2, #0
 80080f4:	d1f3      	bne.n	80080de <__ascii_mbtowc+0x6>
 80080f6:	4610      	mov	r0, r2
 80080f8:	b002      	add	sp, #8
 80080fa:	4770      	bx	lr
 80080fc:	f06f 0001 	mvn.w	r0, #1
 8008100:	e7f4      	b.n	80080ec <__ascii_mbtowc+0x14>
 8008102:	bf00      	nop

08008104 <_read_r>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	460d      	mov	r5, r1
 8008108:	4c08      	ldr	r4, [pc, #32]	; (800812c <_read_r+0x28>)
 800810a:	4611      	mov	r1, r2
 800810c:	4606      	mov	r6, r0
 800810e:	461a      	mov	r2, r3
 8008110:	4628      	mov	r0, r5
 8008112:	2300      	movs	r3, #0
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	f7f9 f8a3 	bl	8001260 <_read>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	d000      	beq.n	8008120 <_read_r+0x1c>
 800811e:	bd70      	pop	{r4, r5, r6, pc}
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d0fb      	beq.n	800811e <_read_r+0x1a>
 8008126:	6033      	str	r3, [r6, #0]
 8008128:	bd70      	pop	{r4, r5, r6, pc}
 800812a:	bf00      	nop
 800812c:	20000a7c 	.word	0x20000a7c

08008130 <__ssprint_r>:
 8008130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008134:	6893      	ldr	r3, [r2, #8]
 8008136:	b083      	sub	sp, #12
 8008138:	4690      	mov	r8, r2
 800813a:	2b00      	cmp	r3, #0
 800813c:	d072      	beq.n	8008224 <__ssprint_r+0xf4>
 800813e:	4683      	mov	fp, r0
 8008140:	f04f 0900 	mov.w	r9, #0
 8008144:	6816      	ldr	r6, [r2, #0]
 8008146:	6808      	ldr	r0, [r1, #0]
 8008148:	688b      	ldr	r3, [r1, #8]
 800814a:	460d      	mov	r5, r1
 800814c:	464c      	mov	r4, r9
 800814e:	2c00      	cmp	r4, #0
 8008150:	d045      	beq.n	80081de <__ssprint_r+0xae>
 8008152:	429c      	cmp	r4, r3
 8008154:	461f      	mov	r7, r3
 8008156:	469a      	mov	sl, r3
 8008158:	d346      	bcc.n	80081e8 <__ssprint_r+0xb8>
 800815a:	89ab      	ldrh	r3, [r5, #12]
 800815c:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8008160:	d02d      	beq.n	80081be <__ssprint_r+0x8e>
 8008162:	696f      	ldr	r7, [r5, #20]
 8008164:	6929      	ldr	r1, [r5, #16]
 8008166:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800816a:	ebc1 0a00 	rsb	sl, r1, r0
 800816e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8008172:	1c60      	adds	r0, r4, #1
 8008174:	107f      	asrs	r7, r7, #1
 8008176:	4450      	add	r0, sl
 8008178:	42b8      	cmp	r0, r7
 800817a:	463a      	mov	r2, r7
 800817c:	bf84      	itt	hi
 800817e:	4607      	movhi	r7, r0
 8008180:	463a      	movhi	r2, r7
 8008182:	055b      	lsls	r3, r3, #21
 8008184:	d533      	bpl.n	80081ee <__ssprint_r+0xbe>
 8008186:	4611      	mov	r1, r2
 8008188:	4658      	mov	r0, fp
 800818a:	f7fd f9d5 	bl	8005538 <_malloc_r>
 800818e:	2800      	cmp	r0, #0
 8008190:	d037      	beq.n	8008202 <__ssprint_r+0xd2>
 8008192:	4652      	mov	r2, sl
 8008194:	6929      	ldr	r1, [r5, #16]
 8008196:	9001      	str	r0, [sp, #4]
 8008198:	f7f9 ff5e 	bl	8002058 <memcpy>
 800819c:	89aa      	ldrh	r2, [r5, #12]
 800819e:	9b01      	ldr	r3, [sp, #4]
 80081a0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80081a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081a8:	81aa      	strh	r2, [r5, #12]
 80081aa:	ebca 0207 	rsb	r2, sl, r7
 80081ae:	eb03 000a 	add.w	r0, r3, sl
 80081b2:	616f      	str	r7, [r5, #20]
 80081b4:	612b      	str	r3, [r5, #16]
 80081b6:	6028      	str	r0, [r5, #0]
 80081b8:	60aa      	str	r2, [r5, #8]
 80081ba:	4627      	mov	r7, r4
 80081bc:	46a2      	mov	sl, r4
 80081be:	4652      	mov	r2, sl
 80081c0:	4649      	mov	r1, r9
 80081c2:	f7fd fcc5 	bl	8005b50 <memmove>
 80081c6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80081ca:	68ab      	ldr	r3, [r5, #8]
 80081cc:	6828      	ldr	r0, [r5, #0]
 80081ce:	1bdb      	subs	r3, r3, r7
 80081d0:	4450      	add	r0, sl
 80081d2:	1b14      	subs	r4, r2, r4
 80081d4:	60ab      	str	r3, [r5, #8]
 80081d6:	6028      	str	r0, [r5, #0]
 80081d8:	f8c8 4008 	str.w	r4, [r8, #8]
 80081dc:	b314      	cbz	r4, 8008224 <__ssprint_r+0xf4>
 80081de:	f8d6 9000 	ldr.w	r9, [r6]
 80081e2:	6874      	ldr	r4, [r6, #4]
 80081e4:	3608      	adds	r6, #8
 80081e6:	e7b2      	b.n	800814e <__ssprint_r+0x1e>
 80081e8:	4627      	mov	r7, r4
 80081ea:	46a2      	mov	sl, r4
 80081ec:	e7e7      	b.n	80081be <__ssprint_r+0x8e>
 80081ee:	4658      	mov	r0, fp
 80081f0:	f7fe f826 	bl	8006240 <_realloc_r>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d1d7      	bne.n	80081aa <__ssprint_r+0x7a>
 80081fa:	6929      	ldr	r1, [r5, #16]
 80081fc:	4658      	mov	r0, fp
 80081fe:	f7fc fe85 	bl	8004f0c <_free_r>
 8008202:	230c      	movs	r3, #12
 8008204:	f8cb 3000 	str.w	r3, [fp]
 8008208:	89ab      	ldrh	r3, [r5, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008210:	f04f 30ff 	mov.w	r0, #4294967295
 8008214:	81ab      	strh	r3, [r5, #12]
 8008216:	f8c8 2008 	str.w	r2, [r8, #8]
 800821a:	f8c8 2004 	str.w	r2, [r8, #4]
 800821e:	b003      	add	sp, #12
 8008220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008224:	2000      	movs	r0, #0
 8008226:	f8c8 0004 	str.w	r0, [r8, #4]
 800822a:	b003      	add	sp, #12
 800822c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008230 <__swbuf_r>:
 8008230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008232:	460d      	mov	r5, r1
 8008234:	4614      	mov	r4, r2
 8008236:	4606      	mov	r6, r0
 8008238:	b110      	cbz	r0, 8008240 <__swbuf_r+0x10>
 800823a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800823c:	2b00      	cmp	r3, #0
 800823e:	d04a      	beq.n	80082d6 <__swbuf_r+0xa6>
 8008240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008244:	69a3      	ldr	r3, [r4, #24]
 8008246:	60a3      	str	r3, [r4, #8]
 8008248:	b291      	uxth	r1, r2
 800824a:	0708      	lsls	r0, r1, #28
 800824c:	d538      	bpl.n	80082c0 <__swbuf_r+0x90>
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d035      	beq.n	80082c0 <__swbuf_r+0x90>
 8008254:	0489      	lsls	r1, r1, #18
 8008256:	b2ef      	uxtb	r7, r5
 8008258:	d515      	bpl.n	8008286 <__swbuf_r+0x56>
 800825a:	6822      	ldr	r2, [r4, #0]
 800825c:	6961      	ldr	r1, [r4, #20]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	428b      	cmp	r3, r1
 8008262:	da1c      	bge.n	800829e <__swbuf_r+0x6e>
 8008264:	3301      	adds	r3, #1
 8008266:	68a1      	ldr	r1, [r4, #8]
 8008268:	1c50      	adds	r0, r2, #1
 800826a:	3901      	subs	r1, #1
 800826c:	60a1      	str	r1, [r4, #8]
 800826e:	6020      	str	r0, [r4, #0]
 8008270:	7015      	strb	r5, [r2, #0]
 8008272:	6962      	ldr	r2, [r4, #20]
 8008274:	429a      	cmp	r2, r3
 8008276:	d01a      	beq.n	80082ae <__swbuf_r+0x7e>
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	07db      	lsls	r3, r3, #31
 800827c:	d501      	bpl.n	8008282 <__swbuf_r+0x52>
 800827e:	2f0a      	cmp	r7, #10
 8008280:	d015      	beq.n	80082ae <__swbuf_r+0x7e>
 8008282:	4638      	mov	r0, r7
 8008284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008286:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800828c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8008290:	81a2      	strh	r2, [r4, #12]
 8008292:	6822      	ldr	r2, [r4, #0]
 8008294:	6661      	str	r1, [r4, #100]	; 0x64
 8008296:	6961      	ldr	r1, [r4, #20]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	428b      	cmp	r3, r1
 800829c:	dbe2      	blt.n	8008264 <__swbuf_r+0x34>
 800829e:	4621      	mov	r1, r4
 80082a0:	4630      	mov	r0, r6
 80082a2:	f7fc fd47 	bl	8004d34 <_fflush_r>
 80082a6:	b940      	cbnz	r0, 80082ba <__swbuf_r+0x8a>
 80082a8:	6822      	ldr	r2, [r4, #0]
 80082aa:	2301      	movs	r3, #1
 80082ac:	e7db      	b.n	8008266 <__swbuf_r+0x36>
 80082ae:	4621      	mov	r1, r4
 80082b0:	4630      	mov	r0, r6
 80082b2:	f7fc fd3f 	bl	8004d34 <_fflush_r>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d0e3      	beq.n	8008282 <__swbuf_r+0x52>
 80082ba:	f04f 37ff 	mov.w	r7, #4294967295
 80082be:	e7e0      	b.n	8008282 <__swbuf_r+0x52>
 80082c0:	4621      	mov	r1, r4
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7fb fc84 	bl	8003bd0 <__swsetup_r>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	d1f6      	bne.n	80082ba <__swbuf_r+0x8a>
 80082cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082d0:	6923      	ldr	r3, [r4, #16]
 80082d2:	b291      	uxth	r1, r2
 80082d4:	e7be      	b.n	8008254 <__swbuf_r+0x24>
 80082d6:	f7fc fdc1 	bl	8004e5c <__sinit>
 80082da:	e7b1      	b.n	8008240 <__swbuf_r+0x10>

080082dc <_wcrtomb_r>:
 80082dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082de:	4606      	mov	r6, r0
 80082e0:	b085      	sub	sp, #20
 80082e2:	461f      	mov	r7, r3
 80082e4:	b189      	cbz	r1, 800830a <_wcrtomb_r+0x2e>
 80082e6:	4c10      	ldr	r4, [pc, #64]	; (8008328 <_wcrtomb_r+0x4c>)
 80082e8:	4d10      	ldr	r5, [pc, #64]	; (800832c <_wcrtomb_r+0x50>)
 80082ea:	6824      	ldr	r4, [r4, #0]
 80082ec:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80082ee:	2c00      	cmp	r4, #0
 80082f0:	bf08      	it	eq
 80082f2:	462c      	moveq	r4, r5
 80082f4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80082f8:	47a0      	blx	r4
 80082fa:	1c43      	adds	r3, r0, #1
 80082fc:	d103      	bne.n	8008306 <_wcrtomb_r+0x2a>
 80082fe:	2200      	movs	r2, #0
 8008300:	238a      	movs	r3, #138	; 0x8a
 8008302:	603a      	str	r2, [r7, #0]
 8008304:	6033      	str	r3, [r6, #0]
 8008306:	b005      	add	sp, #20
 8008308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800830a:	460c      	mov	r4, r1
 800830c:	4906      	ldr	r1, [pc, #24]	; (8008328 <_wcrtomb_r+0x4c>)
 800830e:	4a07      	ldr	r2, [pc, #28]	; (800832c <_wcrtomb_r+0x50>)
 8008310:	6809      	ldr	r1, [r1, #0]
 8008312:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008314:	2900      	cmp	r1, #0
 8008316:	bf08      	it	eq
 8008318:	4611      	moveq	r1, r2
 800831a:	4622      	mov	r2, r4
 800831c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 8008320:	a901      	add	r1, sp, #4
 8008322:	47a0      	blx	r4
 8008324:	e7e9      	b.n	80082fa <_wcrtomb_r+0x1e>
 8008326:	bf00      	nop
 8008328:	20000460 	.word	0x20000460
 800832c:	20000874 	.word	0x20000874

08008330 <__ascii_wctomb>:
 8008330:	b121      	cbz	r1, 800833c <__ascii_wctomb+0xc>
 8008332:	2aff      	cmp	r2, #255	; 0xff
 8008334:	d804      	bhi.n	8008340 <__ascii_wctomb+0x10>
 8008336:	700a      	strb	r2, [r1, #0]
 8008338:	2001      	movs	r0, #1
 800833a:	4770      	bx	lr
 800833c:	4608      	mov	r0, r1
 800833e:	4770      	bx	lr
 8008340:	238a      	movs	r3, #138	; 0x8a
 8008342:	6003      	str	r3, [r0, #0]
 8008344:	f04f 30ff 	mov.w	r0, #4294967295
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop

0800834c <__aeabi_drsub>:
 800834c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008350:	e002      	b.n	8008358 <__adddf3>
 8008352:	bf00      	nop

08008354 <__aeabi_dsub>:
 8008354:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008358 <__adddf3>:
 8008358:	b530      	push	{r4, r5, lr}
 800835a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800835e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008362:	ea94 0f05 	teq	r4, r5
 8008366:	bf08      	it	eq
 8008368:	ea90 0f02 	teqeq	r0, r2
 800836c:	bf1f      	itttt	ne
 800836e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008372:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008376:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800837a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800837e:	f000 80e2 	beq.w	8008546 <__adddf3+0x1ee>
 8008382:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008386:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800838a:	bfb8      	it	lt
 800838c:	426d      	neglt	r5, r5
 800838e:	dd0c      	ble.n	80083aa <__adddf3+0x52>
 8008390:	442c      	add	r4, r5
 8008392:	ea80 0202 	eor.w	r2, r0, r2
 8008396:	ea81 0303 	eor.w	r3, r1, r3
 800839a:	ea82 0000 	eor.w	r0, r2, r0
 800839e:	ea83 0101 	eor.w	r1, r3, r1
 80083a2:	ea80 0202 	eor.w	r2, r0, r2
 80083a6:	ea81 0303 	eor.w	r3, r1, r3
 80083aa:	2d36      	cmp	r5, #54	; 0x36
 80083ac:	bf88      	it	hi
 80083ae:	bd30      	pophi	{r4, r5, pc}
 80083b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80083b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80083b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80083bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80083c0:	d002      	beq.n	80083c8 <__adddf3+0x70>
 80083c2:	4240      	negs	r0, r0
 80083c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80083c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80083cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80083d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80083d4:	d002      	beq.n	80083dc <__adddf3+0x84>
 80083d6:	4252      	negs	r2, r2
 80083d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80083dc:	ea94 0f05 	teq	r4, r5
 80083e0:	f000 80a7 	beq.w	8008532 <__adddf3+0x1da>
 80083e4:	f1a4 0401 	sub.w	r4, r4, #1
 80083e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80083ec:	db0d      	blt.n	800840a <__adddf3+0xb2>
 80083ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80083f2:	fa22 f205 	lsr.w	r2, r2, r5
 80083f6:	1880      	adds	r0, r0, r2
 80083f8:	f141 0100 	adc.w	r1, r1, #0
 80083fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8008400:	1880      	adds	r0, r0, r2
 8008402:	fa43 f305 	asr.w	r3, r3, r5
 8008406:	4159      	adcs	r1, r3
 8008408:	e00e      	b.n	8008428 <__adddf3+0xd0>
 800840a:	f1a5 0520 	sub.w	r5, r5, #32
 800840e:	f10e 0e20 	add.w	lr, lr, #32
 8008412:	2a01      	cmp	r2, #1
 8008414:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008418:	bf28      	it	cs
 800841a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800841e:	fa43 f305 	asr.w	r3, r3, r5
 8008422:	18c0      	adds	r0, r0, r3
 8008424:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800842c:	d507      	bpl.n	800843e <__adddf3+0xe6>
 800842e:	f04f 0e00 	mov.w	lr, #0
 8008432:	f1dc 0c00 	rsbs	ip, ip, #0
 8008436:	eb7e 0000 	sbcs.w	r0, lr, r0
 800843a:	eb6e 0101 	sbc.w	r1, lr, r1
 800843e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008442:	d31b      	bcc.n	800847c <__adddf3+0x124>
 8008444:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008448:	d30c      	bcc.n	8008464 <__adddf3+0x10c>
 800844a:	0849      	lsrs	r1, r1, #1
 800844c:	ea5f 0030 	movs.w	r0, r0, rrx
 8008450:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008454:	f104 0401 	add.w	r4, r4, #1
 8008458:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800845c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008460:	f080 809a 	bcs.w	8008598 <__adddf3+0x240>
 8008464:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008468:	bf08      	it	eq
 800846a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800846e:	f150 0000 	adcs.w	r0, r0, #0
 8008472:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008476:	ea41 0105 	orr.w	r1, r1, r5
 800847a:	bd30      	pop	{r4, r5, pc}
 800847c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008480:	4140      	adcs	r0, r0
 8008482:	eb41 0101 	adc.w	r1, r1, r1
 8008486:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800848a:	f1a4 0401 	sub.w	r4, r4, #1
 800848e:	d1e9      	bne.n	8008464 <__adddf3+0x10c>
 8008490:	f091 0f00 	teq	r1, #0
 8008494:	bf04      	itt	eq
 8008496:	4601      	moveq	r1, r0
 8008498:	2000      	moveq	r0, #0
 800849a:	fab1 f381 	clz	r3, r1
 800849e:	bf08      	it	eq
 80084a0:	3320      	addeq	r3, #32
 80084a2:	f1a3 030b 	sub.w	r3, r3, #11
 80084a6:	f1b3 0220 	subs.w	r2, r3, #32
 80084aa:	da0c      	bge.n	80084c6 <__adddf3+0x16e>
 80084ac:	320c      	adds	r2, #12
 80084ae:	dd08      	ble.n	80084c2 <__adddf3+0x16a>
 80084b0:	f102 0c14 	add.w	ip, r2, #20
 80084b4:	f1c2 020c 	rsb	r2, r2, #12
 80084b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80084bc:	fa21 f102 	lsr.w	r1, r1, r2
 80084c0:	e00c      	b.n	80084dc <__adddf3+0x184>
 80084c2:	f102 0214 	add.w	r2, r2, #20
 80084c6:	bfd8      	it	le
 80084c8:	f1c2 0c20 	rsble	ip, r2, #32
 80084cc:	fa01 f102 	lsl.w	r1, r1, r2
 80084d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80084d4:	bfdc      	itt	le
 80084d6:	ea41 010c 	orrle.w	r1, r1, ip
 80084da:	4090      	lslle	r0, r2
 80084dc:	1ae4      	subs	r4, r4, r3
 80084de:	bfa2      	ittt	ge
 80084e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80084e4:	4329      	orrge	r1, r5
 80084e6:	bd30      	popge	{r4, r5, pc}
 80084e8:	ea6f 0404 	mvn.w	r4, r4
 80084ec:	3c1f      	subs	r4, #31
 80084ee:	da1c      	bge.n	800852a <__adddf3+0x1d2>
 80084f0:	340c      	adds	r4, #12
 80084f2:	dc0e      	bgt.n	8008512 <__adddf3+0x1ba>
 80084f4:	f104 0414 	add.w	r4, r4, #20
 80084f8:	f1c4 0220 	rsb	r2, r4, #32
 80084fc:	fa20 f004 	lsr.w	r0, r0, r4
 8008500:	fa01 f302 	lsl.w	r3, r1, r2
 8008504:	ea40 0003 	orr.w	r0, r0, r3
 8008508:	fa21 f304 	lsr.w	r3, r1, r4
 800850c:	ea45 0103 	orr.w	r1, r5, r3
 8008510:	bd30      	pop	{r4, r5, pc}
 8008512:	f1c4 040c 	rsb	r4, r4, #12
 8008516:	f1c4 0220 	rsb	r2, r4, #32
 800851a:	fa20 f002 	lsr.w	r0, r0, r2
 800851e:	fa01 f304 	lsl.w	r3, r1, r4
 8008522:	ea40 0003 	orr.w	r0, r0, r3
 8008526:	4629      	mov	r1, r5
 8008528:	bd30      	pop	{r4, r5, pc}
 800852a:	fa21 f004 	lsr.w	r0, r1, r4
 800852e:	4629      	mov	r1, r5
 8008530:	bd30      	pop	{r4, r5, pc}
 8008532:	f094 0f00 	teq	r4, #0
 8008536:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800853a:	bf06      	itte	eq
 800853c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008540:	3401      	addeq	r4, #1
 8008542:	3d01      	subne	r5, #1
 8008544:	e74e      	b.n	80083e4 <__adddf3+0x8c>
 8008546:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800854a:	bf18      	it	ne
 800854c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008550:	d029      	beq.n	80085a6 <__adddf3+0x24e>
 8008552:	ea94 0f05 	teq	r4, r5
 8008556:	bf08      	it	eq
 8008558:	ea90 0f02 	teqeq	r0, r2
 800855c:	d005      	beq.n	800856a <__adddf3+0x212>
 800855e:	ea54 0c00 	orrs.w	ip, r4, r0
 8008562:	bf04      	itt	eq
 8008564:	4619      	moveq	r1, r3
 8008566:	4610      	moveq	r0, r2
 8008568:	bd30      	pop	{r4, r5, pc}
 800856a:	ea91 0f03 	teq	r1, r3
 800856e:	bf1e      	ittt	ne
 8008570:	2100      	movne	r1, #0
 8008572:	2000      	movne	r0, #0
 8008574:	bd30      	popne	{r4, r5, pc}
 8008576:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800857a:	d105      	bne.n	8008588 <__adddf3+0x230>
 800857c:	0040      	lsls	r0, r0, #1
 800857e:	4149      	adcs	r1, r1
 8008580:	bf28      	it	cs
 8008582:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008586:	bd30      	pop	{r4, r5, pc}
 8008588:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800858c:	bf3c      	itt	cc
 800858e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008592:	bd30      	popcc	{r4, r5, pc}
 8008594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008598:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800859c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80085a0:	f04f 0000 	mov.w	r0, #0
 80085a4:	bd30      	pop	{r4, r5, pc}
 80085a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80085aa:	bf1a      	itte	ne
 80085ac:	4619      	movne	r1, r3
 80085ae:	4610      	movne	r0, r2
 80085b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80085b4:	bf1c      	itt	ne
 80085b6:	460b      	movne	r3, r1
 80085b8:	4602      	movne	r2, r0
 80085ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80085be:	bf06      	itte	eq
 80085c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80085c4:	ea91 0f03 	teqeq	r1, r3
 80085c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80085cc:	bd30      	pop	{r4, r5, pc}
 80085ce:	bf00      	nop

080085d0 <__aeabi_ui2d>:
 80085d0:	f090 0f00 	teq	r0, #0
 80085d4:	bf04      	itt	eq
 80085d6:	2100      	moveq	r1, #0
 80085d8:	4770      	bxeq	lr
 80085da:	b530      	push	{r4, r5, lr}
 80085dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80085e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80085e4:	f04f 0500 	mov.w	r5, #0
 80085e8:	f04f 0100 	mov.w	r1, #0
 80085ec:	e750      	b.n	8008490 <__adddf3+0x138>
 80085ee:	bf00      	nop

080085f0 <__aeabi_i2d>:
 80085f0:	f090 0f00 	teq	r0, #0
 80085f4:	bf04      	itt	eq
 80085f6:	2100      	moveq	r1, #0
 80085f8:	4770      	bxeq	lr
 80085fa:	b530      	push	{r4, r5, lr}
 80085fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008600:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008604:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008608:	bf48      	it	mi
 800860a:	4240      	negmi	r0, r0
 800860c:	f04f 0100 	mov.w	r1, #0
 8008610:	e73e      	b.n	8008490 <__adddf3+0x138>
 8008612:	bf00      	nop

08008614 <__aeabi_f2d>:
 8008614:	0042      	lsls	r2, r0, #1
 8008616:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800861a:	ea4f 0131 	mov.w	r1, r1, rrx
 800861e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008622:	bf1f      	itttt	ne
 8008624:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008628:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800862c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008630:	4770      	bxne	lr
 8008632:	f092 0f00 	teq	r2, #0
 8008636:	bf14      	ite	ne
 8008638:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800863c:	4770      	bxeq	lr
 800863e:	b530      	push	{r4, r5, lr}
 8008640:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008644:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008648:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800864c:	e720      	b.n	8008490 <__adddf3+0x138>
 800864e:	bf00      	nop

08008650 <__aeabi_ul2d>:
 8008650:	ea50 0201 	orrs.w	r2, r0, r1
 8008654:	bf08      	it	eq
 8008656:	4770      	bxeq	lr
 8008658:	b530      	push	{r4, r5, lr}
 800865a:	f04f 0500 	mov.w	r5, #0
 800865e:	e00a      	b.n	8008676 <__aeabi_l2d+0x16>

08008660 <__aeabi_l2d>:
 8008660:	ea50 0201 	orrs.w	r2, r0, r1
 8008664:	bf08      	it	eq
 8008666:	4770      	bxeq	lr
 8008668:	b530      	push	{r4, r5, lr}
 800866a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800866e:	d502      	bpl.n	8008676 <__aeabi_l2d+0x16>
 8008670:	4240      	negs	r0, r0
 8008672:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008676:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800867a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800867e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8008682:	f43f aedc 	beq.w	800843e <__adddf3+0xe6>
 8008686:	f04f 0203 	mov.w	r2, #3
 800868a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800868e:	bf18      	it	ne
 8008690:	3203      	addne	r2, #3
 8008692:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008696:	bf18      	it	ne
 8008698:	3203      	addne	r2, #3
 800869a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800869e:	f1c2 0320 	rsb	r3, r2, #32
 80086a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80086a6:	fa20 f002 	lsr.w	r0, r0, r2
 80086aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80086ae:	ea40 000e 	orr.w	r0, r0, lr
 80086b2:	fa21 f102 	lsr.w	r1, r1, r2
 80086b6:	4414      	add	r4, r2
 80086b8:	e6c1      	b.n	800843e <__adddf3+0xe6>
 80086ba:	bf00      	nop

080086bc <__aeabi_dmul>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8de 	bleq	8008898 <__aeabi_dmul+0x1dc>
 80086dc:	442c      	add	r4, r5
 80086de:	ea81 0603 	eor.w	r6, r1, r3
 80086e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80086e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80086ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80086ee:	bf18      	it	ne
 80086f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80086f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80086f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086fc:	d038      	beq.n	8008770 <__aeabi_dmul+0xb4>
 80086fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8008702:	f04f 0500 	mov.w	r5, #0
 8008706:	fbe1 e502 	umlal	lr, r5, r1, r2
 800870a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800870e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008712:	f04f 0600 	mov.w	r6, #0
 8008716:	fbe1 5603 	umlal	r5, r6, r1, r3
 800871a:	f09c 0f00 	teq	ip, #0
 800871e:	bf18      	it	ne
 8008720:	f04e 0e01 	orrne.w	lr, lr, #1
 8008724:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008728:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800872c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008730:	d204      	bcs.n	800873c <__aeabi_dmul+0x80>
 8008732:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008736:	416d      	adcs	r5, r5
 8008738:	eb46 0606 	adc.w	r6, r6, r6
 800873c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008740:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008744:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008748:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800874c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008750:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008754:	bf88      	it	hi
 8008756:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800875a:	d81e      	bhi.n	800879a <__aeabi_dmul+0xde>
 800875c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008760:	bf08      	it	eq
 8008762:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008766:	f150 0000 	adcs.w	r0, r0, #0
 800876a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800876e:	bd70      	pop	{r4, r5, r6, pc}
 8008770:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008774:	ea46 0101 	orr.w	r1, r6, r1
 8008778:	ea40 0002 	orr.w	r0, r0, r2
 800877c:	ea81 0103 	eor.w	r1, r1, r3
 8008780:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008784:	bfc2      	ittt	gt
 8008786:	ebd4 050c 	rsbsgt	r5, r4, ip
 800878a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800878e:	bd70      	popgt	{r4, r5, r6, pc}
 8008790:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008794:	f04f 0e00 	mov.w	lr, #0
 8008798:	3c01      	subs	r4, #1
 800879a:	f300 80ab 	bgt.w	80088f4 <__aeabi_dmul+0x238>
 800879e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80087a2:	bfde      	ittt	le
 80087a4:	2000      	movle	r0, #0
 80087a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80087aa:	bd70      	pople	{r4, r5, r6, pc}
 80087ac:	f1c4 0400 	rsb	r4, r4, #0
 80087b0:	3c20      	subs	r4, #32
 80087b2:	da35      	bge.n	8008820 <__aeabi_dmul+0x164>
 80087b4:	340c      	adds	r4, #12
 80087b6:	dc1b      	bgt.n	80087f0 <__aeabi_dmul+0x134>
 80087b8:	f104 0414 	add.w	r4, r4, #20
 80087bc:	f1c4 0520 	rsb	r5, r4, #32
 80087c0:	fa00 f305 	lsl.w	r3, r0, r5
 80087c4:	fa20 f004 	lsr.w	r0, r0, r4
 80087c8:	fa01 f205 	lsl.w	r2, r1, r5
 80087cc:	ea40 0002 	orr.w	r0, r0, r2
 80087d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80087d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80087d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80087dc:	fa21 f604 	lsr.w	r6, r1, r4
 80087e0:	eb42 0106 	adc.w	r1, r2, r6
 80087e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80087e8:	bf08      	it	eq
 80087ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	f1c4 040c 	rsb	r4, r4, #12
 80087f4:	f1c4 0520 	rsb	r5, r4, #32
 80087f8:	fa00 f304 	lsl.w	r3, r0, r4
 80087fc:	fa20 f005 	lsr.w	r0, r0, r5
 8008800:	fa01 f204 	lsl.w	r2, r1, r4
 8008804:	ea40 0002 	orr.w	r0, r0, r2
 8008808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800880c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008810:	f141 0100 	adc.w	r1, r1, #0
 8008814:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008818:	bf08      	it	eq
 800881a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	f1c4 0520 	rsb	r5, r4, #32
 8008824:	fa00 f205 	lsl.w	r2, r0, r5
 8008828:	ea4e 0e02 	orr.w	lr, lr, r2
 800882c:	fa20 f304 	lsr.w	r3, r0, r4
 8008830:	fa01 f205 	lsl.w	r2, r1, r5
 8008834:	ea43 0302 	orr.w	r3, r3, r2
 8008838:	fa21 f004 	lsr.w	r0, r1, r4
 800883c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008840:	fa21 f204 	lsr.w	r2, r1, r4
 8008844:	ea20 0002 	bic.w	r0, r0, r2
 8008848:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800884c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008850:	bf08      	it	eq
 8008852:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	f094 0f00 	teq	r4, #0
 800885c:	d10f      	bne.n	800887e <__aeabi_dmul+0x1c2>
 800885e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008862:	0040      	lsls	r0, r0, #1
 8008864:	eb41 0101 	adc.w	r1, r1, r1
 8008868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800886c:	bf08      	it	eq
 800886e:	3c01      	subeq	r4, #1
 8008870:	d0f7      	beq.n	8008862 <__aeabi_dmul+0x1a6>
 8008872:	ea41 0106 	orr.w	r1, r1, r6
 8008876:	f095 0f00 	teq	r5, #0
 800887a:	bf18      	it	ne
 800887c:	4770      	bxne	lr
 800887e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008882:	0052      	lsls	r2, r2, #1
 8008884:	eb43 0303 	adc.w	r3, r3, r3
 8008888:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800888c:	bf08      	it	eq
 800888e:	3d01      	subeq	r5, #1
 8008890:	d0f7      	beq.n	8008882 <__aeabi_dmul+0x1c6>
 8008892:	ea43 0306 	orr.w	r3, r3, r6
 8008896:	4770      	bx	lr
 8008898:	ea94 0f0c 	teq	r4, ip
 800889c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80088a0:	bf18      	it	ne
 80088a2:	ea95 0f0c 	teqne	r5, ip
 80088a6:	d00c      	beq.n	80088c2 <__aeabi_dmul+0x206>
 80088a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80088ac:	bf18      	it	ne
 80088ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80088b2:	d1d1      	bne.n	8008858 <__aeabi_dmul+0x19c>
 80088b4:	ea81 0103 	eor.w	r1, r1, r3
 80088b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80088bc:	f04f 0000 	mov.w	r0, #0
 80088c0:	bd70      	pop	{r4, r5, r6, pc}
 80088c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80088c6:	bf06      	itte	eq
 80088c8:	4610      	moveq	r0, r2
 80088ca:	4619      	moveq	r1, r3
 80088cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80088d0:	d019      	beq.n	8008906 <__aeabi_dmul+0x24a>
 80088d2:	ea94 0f0c 	teq	r4, ip
 80088d6:	d102      	bne.n	80088de <__aeabi_dmul+0x222>
 80088d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80088dc:	d113      	bne.n	8008906 <__aeabi_dmul+0x24a>
 80088de:	ea95 0f0c 	teq	r5, ip
 80088e2:	d105      	bne.n	80088f0 <__aeabi_dmul+0x234>
 80088e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80088e8:	bf1c      	itt	ne
 80088ea:	4610      	movne	r0, r2
 80088ec:	4619      	movne	r1, r3
 80088ee:	d10a      	bne.n	8008906 <__aeabi_dmul+0x24a>
 80088f0:	ea81 0103 	eor.w	r1, r1, r3
 80088f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80088f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80088fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008900:	f04f 0000 	mov.w	r0, #0
 8008904:	bd70      	pop	{r4, r5, r6, pc}
 8008906:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800890a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800890e:	bd70      	pop	{r4, r5, r6, pc}

08008910 <__aeabi_ddiv>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008916:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800891a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800891e:	bf1d      	ittte	ne
 8008920:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008924:	ea94 0f0c 	teqne	r4, ip
 8008928:	ea95 0f0c 	teqne	r5, ip
 800892c:	f000 f8a7 	bleq	8008a7e <__aeabi_ddiv+0x16e>
 8008930:	eba4 0405 	sub.w	r4, r4, r5
 8008934:	ea81 0e03 	eor.w	lr, r1, r3
 8008938:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800893c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008940:	f000 8088 	beq.w	8008a54 <__aeabi_ddiv+0x144>
 8008944:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008948:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800894c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008950:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008954:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008958:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800895c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008960:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008964:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008968:	429d      	cmp	r5, r3
 800896a:	bf08      	it	eq
 800896c:	4296      	cmpeq	r6, r2
 800896e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008972:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008976:	d202      	bcs.n	800897e <__aeabi_ddiv+0x6e>
 8008978:	085b      	lsrs	r3, r3, #1
 800897a:	ea4f 0232 	mov.w	r2, r2, rrx
 800897e:	1ab6      	subs	r6, r6, r2
 8008980:	eb65 0503 	sbc.w	r5, r5, r3
 8008984:	085b      	lsrs	r3, r3, #1
 8008986:	ea4f 0232 	mov.w	r2, r2, rrx
 800898a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800898e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8008992:	ebb6 0e02 	subs.w	lr, r6, r2
 8008996:	eb75 0e03 	sbcs.w	lr, r5, r3
 800899a:	bf22      	ittt	cs
 800899c:	1ab6      	subcs	r6, r6, r2
 800899e:	4675      	movcs	r5, lr
 80089a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80089a4:	085b      	lsrs	r3, r3, #1
 80089a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80089aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80089ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80089b2:	bf22      	ittt	cs
 80089b4:	1ab6      	subcs	r6, r6, r2
 80089b6:	4675      	movcs	r5, lr
 80089b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80089bc:	085b      	lsrs	r3, r3, #1
 80089be:	ea4f 0232 	mov.w	r2, r2, rrx
 80089c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80089c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80089ca:	bf22      	ittt	cs
 80089cc:	1ab6      	subcs	r6, r6, r2
 80089ce:	4675      	movcs	r5, lr
 80089d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80089d4:	085b      	lsrs	r3, r3, #1
 80089d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80089da:	ebb6 0e02 	subs.w	lr, r6, r2
 80089de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80089e2:	bf22      	ittt	cs
 80089e4:	1ab6      	subcs	r6, r6, r2
 80089e6:	4675      	movcs	r5, lr
 80089e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80089ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80089f0:	d018      	beq.n	8008a24 <__aeabi_ddiv+0x114>
 80089f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80089f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80089fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80089fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008a02:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008a06:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008a0a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008a0e:	d1c0      	bne.n	8008992 <__aeabi_ddiv+0x82>
 8008a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008a14:	d10b      	bne.n	8008a2e <__aeabi_ddiv+0x11e>
 8008a16:	ea41 0100 	orr.w	r1, r1, r0
 8008a1a:	f04f 0000 	mov.w	r0, #0
 8008a1e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008a22:	e7b6      	b.n	8008992 <__aeabi_ddiv+0x82>
 8008a24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008a28:	bf04      	itt	eq
 8008a2a:	4301      	orreq	r1, r0
 8008a2c:	2000      	moveq	r0, #0
 8008a2e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008a32:	bf88      	it	hi
 8008a34:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008a38:	f63f aeaf 	bhi.w	800879a <__aeabi_dmul+0xde>
 8008a3c:	ebb5 0c03 	subs.w	ip, r5, r3
 8008a40:	bf04      	itt	eq
 8008a42:	ebb6 0c02 	subseq.w	ip, r6, r2
 8008a46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008a4a:	f150 0000 	adcs.w	r0, r0, #0
 8008a4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008a52:	bd70      	pop	{r4, r5, r6, pc}
 8008a54:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008a58:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008a5c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008a60:	bfc2      	ittt	gt
 8008a62:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008a66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008a6a:	bd70      	popgt	{r4, r5, r6, pc}
 8008a6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a70:	f04f 0e00 	mov.w	lr, #0
 8008a74:	3c01      	subs	r4, #1
 8008a76:	e690      	b.n	800879a <__aeabi_dmul+0xde>
 8008a78:	ea45 0e06 	orr.w	lr, r5, r6
 8008a7c:	e68d      	b.n	800879a <__aeabi_dmul+0xde>
 8008a7e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008a82:	ea94 0f0c 	teq	r4, ip
 8008a86:	bf08      	it	eq
 8008a88:	ea95 0f0c 	teqeq	r5, ip
 8008a8c:	f43f af3b 	beq.w	8008906 <__aeabi_dmul+0x24a>
 8008a90:	ea94 0f0c 	teq	r4, ip
 8008a94:	d10a      	bne.n	8008aac <__aeabi_ddiv+0x19c>
 8008a96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008a9a:	f47f af34 	bne.w	8008906 <__aeabi_dmul+0x24a>
 8008a9e:	ea95 0f0c 	teq	r5, ip
 8008aa2:	f47f af25 	bne.w	80088f0 <__aeabi_dmul+0x234>
 8008aa6:	4610      	mov	r0, r2
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	e72c      	b.n	8008906 <__aeabi_dmul+0x24a>
 8008aac:	ea95 0f0c 	teq	r5, ip
 8008ab0:	d106      	bne.n	8008ac0 <__aeabi_ddiv+0x1b0>
 8008ab2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008ab6:	f43f aefd 	beq.w	80088b4 <__aeabi_dmul+0x1f8>
 8008aba:	4610      	mov	r0, r2
 8008abc:	4619      	mov	r1, r3
 8008abe:	e722      	b.n	8008906 <__aeabi_dmul+0x24a>
 8008ac0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008ac4:	bf18      	it	ne
 8008ac6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008aca:	f47f aec5 	bne.w	8008858 <__aeabi_dmul+0x19c>
 8008ace:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008ad2:	f47f af0d 	bne.w	80088f0 <__aeabi_dmul+0x234>
 8008ad6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008ada:	f47f aeeb 	bne.w	80088b4 <__aeabi_dmul+0x1f8>
 8008ade:	e712      	b.n	8008906 <__aeabi_dmul+0x24a>

08008ae0 <__gedf2>:
 8008ae0:	f04f 3cff 	mov.w	ip, #4294967295
 8008ae4:	e006      	b.n	8008af4 <__cmpdf2+0x4>
 8008ae6:	bf00      	nop

08008ae8 <__ledf2>:
 8008ae8:	f04f 0c01 	mov.w	ip, #1
 8008aec:	e002      	b.n	8008af4 <__cmpdf2+0x4>
 8008aee:	bf00      	nop

08008af0 <__cmpdf2>:
 8008af0:	f04f 0c01 	mov.w	ip, #1
 8008af4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008b04:	bf18      	it	ne
 8008b06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008b0a:	d01b      	beq.n	8008b44 <__cmpdf2+0x54>
 8008b0c:	b001      	add	sp, #4
 8008b0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008b12:	bf0c      	ite	eq
 8008b14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008b18:	ea91 0f03 	teqne	r1, r3
 8008b1c:	bf02      	ittt	eq
 8008b1e:	ea90 0f02 	teqeq	r0, r2
 8008b22:	2000      	moveq	r0, #0
 8008b24:	4770      	bxeq	lr
 8008b26:	f110 0f00 	cmn.w	r0, #0
 8008b2a:	ea91 0f03 	teq	r1, r3
 8008b2e:	bf58      	it	pl
 8008b30:	4299      	cmppl	r1, r3
 8008b32:	bf08      	it	eq
 8008b34:	4290      	cmpeq	r0, r2
 8008b36:	bf2c      	ite	cs
 8008b38:	17d8      	asrcs	r0, r3, #31
 8008b3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008b3e:	f040 0001 	orr.w	r0, r0, #1
 8008b42:	4770      	bx	lr
 8008b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b4c:	d102      	bne.n	8008b54 <__cmpdf2+0x64>
 8008b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008b52:	d107      	bne.n	8008b64 <__cmpdf2+0x74>
 8008b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008b5c:	d1d6      	bne.n	8008b0c <__cmpdf2+0x1c>
 8008b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008b62:	d0d3      	beq.n	8008b0c <__cmpdf2+0x1c>
 8008b64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop

08008b6c <__aeabi_cdrcmple>:
 8008b6c:	4684      	mov	ip, r0
 8008b6e:	4610      	mov	r0, r2
 8008b70:	4662      	mov	r2, ip
 8008b72:	468c      	mov	ip, r1
 8008b74:	4619      	mov	r1, r3
 8008b76:	4663      	mov	r3, ip
 8008b78:	e000      	b.n	8008b7c <__aeabi_cdcmpeq>
 8008b7a:	bf00      	nop

08008b7c <__aeabi_cdcmpeq>:
 8008b7c:	b501      	push	{r0, lr}
 8008b7e:	f7ff ffb7 	bl	8008af0 <__cmpdf2>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	bf48      	it	mi
 8008b86:	f110 0f00 	cmnmi.w	r0, #0
 8008b8a:	bd01      	pop	{r0, pc}

08008b8c <__aeabi_dcmpeq>:
 8008b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008b90:	f7ff fff4 	bl	8008b7c <__aeabi_cdcmpeq>
 8008b94:	bf0c      	ite	eq
 8008b96:	2001      	moveq	r0, #1
 8008b98:	2000      	movne	r0, #0
 8008b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008b9e:	bf00      	nop

08008ba0 <__aeabi_dcmplt>:
 8008ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ba4:	f7ff ffea 	bl	8008b7c <__aeabi_cdcmpeq>
 8008ba8:	bf34      	ite	cc
 8008baa:	2001      	movcc	r0, #1
 8008bac:	2000      	movcs	r0, #0
 8008bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8008bb2:	bf00      	nop

08008bb4 <__aeabi_dcmple>:
 8008bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008bb8:	f7ff ffe0 	bl	8008b7c <__aeabi_cdcmpeq>
 8008bbc:	bf94      	ite	ls
 8008bbe:	2001      	movls	r0, #1
 8008bc0:	2000      	movhi	r0, #0
 8008bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8008bc6:	bf00      	nop

08008bc8 <__aeabi_dcmpge>:
 8008bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008bcc:	f7ff ffce 	bl	8008b6c <__aeabi_cdrcmple>
 8008bd0:	bf94      	ite	ls
 8008bd2:	2001      	movls	r0, #1
 8008bd4:	2000      	movhi	r0, #0
 8008bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8008bda:	bf00      	nop

08008bdc <__aeabi_dcmpgt>:
 8008bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008be0:	f7ff ffc4 	bl	8008b6c <__aeabi_cdrcmple>
 8008be4:	bf34      	ite	cc
 8008be6:	2001      	movcc	r0, #1
 8008be8:	2000      	movcs	r0, #0
 8008bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8008bee:	bf00      	nop

08008bf0 <__aeabi_dcmpun>:
 8008bf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008bf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008bf8:	d102      	bne.n	8008c00 <__aeabi_dcmpun+0x10>
 8008bfa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008bfe:	d10a      	bne.n	8008c16 <__aeabi_dcmpun+0x26>
 8008c00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008c04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008c08:	d102      	bne.n	8008c10 <__aeabi_dcmpun+0x20>
 8008c0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008c0e:	d102      	bne.n	8008c16 <__aeabi_dcmpun+0x26>
 8008c10:	f04f 0000 	mov.w	r0, #0
 8008c14:	4770      	bx	lr
 8008c16:	f04f 0001 	mov.w	r0, #1
 8008c1a:	4770      	bx	lr

08008c1c <__aeabi_d2iz>:
 8008c1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008c20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008c24:	d215      	bcs.n	8008c52 <__aeabi_d2iz+0x36>
 8008c26:	d511      	bpl.n	8008c4c <__aeabi_d2iz+0x30>
 8008c28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008c2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008c30:	d912      	bls.n	8008c58 <__aeabi_d2iz+0x3c>
 8008c32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008c36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008c42:	fa23 f002 	lsr.w	r0, r3, r2
 8008c46:	bf18      	it	ne
 8008c48:	4240      	negne	r0, r0
 8008c4a:	4770      	bx	lr
 8008c4c:	f04f 0000 	mov.w	r0, #0
 8008c50:	4770      	bx	lr
 8008c52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008c56:	d105      	bne.n	8008c64 <__aeabi_d2iz+0x48>
 8008c58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008c5c:	bf08      	it	eq
 8008c5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008c62:	4770      	bx	lr
 8008c64:	f04f 0000 	mov.w	r0, #0
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop

08008c6c <__aeabi_uldivmod>:
 8008c6c:	b953      	cbnz	r3, 8008c84 <__aeabi_uldivmod+0x18>
 8008c6e:	b94a      	cbnz	r2, 8008c84 <__aeabi_uldivmod+0x18>
 8008c70:	2900      	cmp	r1, #0
 8008c72:	bf08      	it	eq
 8008c74:	2800      	cmpeq	r0, #0
 8008c76:	bf1c      	itt	ne
 8008c78:	f04f 31ff 	movne.w	r1, #4294967295
 8008c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8008c80:	f000 b97e 	b.w	8008f80 <__aeabi_idiv0>
 8008c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8008c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008c8c:	f000 f806 	bl	8008c9c <__udivmoddi4>
 8008c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c98:	b004      	add	sp, #16
 8008c9a:	4770      	bx	lr

08008c9c <__udivmoddi4>:
 8008c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca0:	468c      	mov	ip, r1
 8008ca2:	460e      	mov	r6, r1
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	9d08      	ldr	r5, [sp, #32]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d150      	bne.n	8008d4e <__udivmoddi4+0xb2>
 8008cac:	428a      	cmp	r2, r1
 8008cae:	4617      	mov	r7, r2
 8008cb0:	d96c      	bls.n	8008d8c <__udivmoddi4+0xf0>
 8008cb2:	fab2 fe82 	clz	lr, r2
 8008cb6:	f1be 0f00 	cmp.w	lr, #0
 8008cba:	d00b      	beq.n	8008cd4 <__udivmoddi4+0x38>
 8008cbc:	f1ce 0420 	rsb	r4, lr, #32
 8008cc0:	fa20 f404 	lsr.w	r4, r0, r4
 8008cc4:	fa01 f60e 	lsl.w	r6, r1, lr
 8008cc8:	ea44 0c06 	orr.w	ip, r4, r6
 8008ccc:	fa02 f70e 	lsl.w	r7, r2, lr
 8008cd0:	fa00 f40e 	lsl.w	r4, r0, lr
 8008cd4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008cd8:	0c22      	lsrs	r2, r4, #16
 8008cda:	fbbc f0f9 	udiv	r0, ip, r9
 8008cde:	fa1f f887 	uxth.w	r8, r7
 8008ce2:	fb09 c610 	mls	r6, r9, r0, ip
 8008ce6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8008cea:	fb00 f308 	mul.w	r3, r0, r8
 8008cee:	42b3      	cmp	r3, r6
 8008cf0:	d909      	bls.n	8008d06 <__udivmoddi4+0x6a>
 8008cf2:	19f6      	adds	r6, r6, r7
 8008cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8008cf8:	f080 8122 	bcs.w	8008f40 <__udivmoddi4+0x2a4>
 8008cfc:	42b3      	cmp	r3, r6
 8008cfe:	f240 811f 	bls.w	8008f40 <__udivmoddi4+0x2a4>
 8008d02:	3802      	subs	r0, #2
 8008d04:	443e      	add	r6, r7
 8008d06:	1af6      	subs	r6, r6, r3
 8008d08:	b2a2      	uxth	r2, r4
 8008d0a:	fbb6 f3f9 	udiv	r3, r6, r9
 8008d0e:	fb09 6613 	mls	r6, r9, r3, r6
 8008d12:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8008d16:	fb03 f808 	mul.w	r8, r3, r8
 8008d1a:	45a0      	cmp	r8, r4
 8008d1c:	d909      	bls.n	8008d32 <__udivmoddi4+0x96>
 8008d1e:	19e4      	adds	r4, r4, r7
 8008d20:	f103 32ff 	add.w	r2, r3, #4294967295
 8008d24:	f080 810a 	bcs.w	8008f3c <__udivmoddi4+0x2a0>
 8008d28:	45a0      	cmp	r8, r4
 8008d2a:	f240 8107 	bls.w	8008f3c <__udivmoddi4+0x2a0>
 8008d2e:	3b02      	subs	r3, #2
 8008d30:	443c      	add	r4, r7
 8008d32:	ebc8 0404 	rsb	r4, r8, r4
 8008d36:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	2d00      	cmp	r5, #0
 8008d3e:	d062      	beq.n	8008e06 <__udivmoddi4+0x16a>
 8008d40:	fa24 f40e 	lsr.w	r4, r4, lr
 8008d44:	2300      	movs	r3, #0
 8008d46:	602c      	str	r4, [r5, #0]
 8008d48:	606b      	str	r3, [r5, #4]
 8008d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4e:	428b      	cmp	r3, r1
 8008d50:	d907      	bls.n	8008d62 <__udivmoddi4+0xc6>
 8008d52:	2d00      	cmp	r5, #0
 8008d54:	d055      	beq.n	8008e02 <__udivmoddi4+0x166>
 8008d56:	2100      	movs	r1, #0
 8008d58:	e885 0041 	stmia.w	r5, {r0, r6}
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d62:	fab3 f183 	clz	r1, r3
 8008d66:	2900      	cmp	r1, #0
 8008d68:	f040 8090 	bne.w	8008e8c <__udivmoddi4+0x1f0>
 8008d6c:	42b3      	cmp	r3, r6
 8008d6e:	d302      	bcc.n	8008d76 <__udivmoddi4+0xda>
 8008d70:	4282      	cmp	r2, r0
 8008d72:	f200 80f8 	bhi.w	8008f66 <__udivmoddi4+0x2ca>
 8008d76:	1a84      	subs	r4, r0, r2
 8008d78:	eb66 0603 	sbc.w	r6, r6, r3
 8008d7c:	2001      	movs	r0, #1
 8008d7e:	46b4      	mov	ip, r6
 8008d80:	2d00      	cmp	r5, #0
 8008d82:	d040      	beq.n	8008e06 <__udivmoddi4+0x16a>
 8008d84:	e885 1010 	stmia.w	r5, {r4, ip}
 8008d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8c:	b912      	cbnz	r2, 8008d94 <__udivmoddi4+0xf8>
 8008d8e:	2701      	movs	r7, #1
 8008d90:	fbb7 f7f2 	udiv	r7, r7, r2
 8008d94:	fab7 fe87 	clz	lr, r7
 8008d98:	f1be 0f00 	cmp.w	lr, #0
 8008d9c:	d135      	bne.n	8008e0a <__udivmoddi4+0x16e>
 8008d9e:	1bf3      	subs	r3, r6, r7
 8008da0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8008da4:	fa1f fc87 	uxth.w	ip, r7
 8008da8:	2101      	movs	r1, #1
 8008daa:	fbb3 f0f8 	udiv	r0, r3, r8
 8008dae:	0c22      	lsrs	r2, r4, #16
 8008db0:	fb08 3610 	mls	r6, r8, r0, r3
 8008db4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8008db8:	fb0c f300 	mul.w	r3, ip, r0
 8008dbc:	42b3      	cmp	r3, r6
 8008dbe:	d907      	bls.n	8008dd0 <__udivmoddi4+0x134>
 8008dc0:	19f6      	adds	r6, r6, r7
 8008dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8008dc6:	d202      	bcs.n	8008dce <__udivmoddi4+0x132>
 8008dc8:	42b3      	cmp	r3, r6
 8008dca:	f200 80ce 	bhi.w	8008f6a <__udivmoddi4+0x2ce>
 8008dce:	4610      	mov	r0, r2
 8008dd0:	1af6      	subs	r6, r6, r3
 8008dd2:	b2a2      	uxth	r2, r4
 8008dd4:	fbb6 f3f8 	udiv	r3, r6, r8
 8008dd8:	fb08 6613 	mls	r6, r8, r3, r6
 8008ddc:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8008de0:	fb0c fc03 	mul.w	ip, ip, r3
 8008de4:	45a4      	cmp	ip, r4
 8008de6:	d907      	bls.n	8008df8 <__udivmoddi4+0x15c>
 8008de8:	19e4      	adds	r4, r4, r7
 8008dea:	f103 32ff 	add.w	r2, r3, #4294967295
 8008dee:	d202      	bcs.n	8008df6 <__udivmoddi4+0x15a>
 8008df0:	45a4      	cmp	ip, r4
 8008df2:	f200 80b5 	bhi.w	8008f60 <__udivmoddi4+0x2c4>
 8008df6:	4613      	mov	r3, r2
 8008df8:	ebcc 0404 	rsb	r4, ip, r4
 8008dfc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008e00:	e79c      	b.n	8008d3c <__udivmoddi4+0xa0>
 8008e02:	4629      	mov	r1, r5
 8008e04:	4628      	mov	r0, r5
 8008e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0a:	f1ce 0120 	rsb	r1, lr, #32
 8008e0e:	fa06 f30e 	lsl.w	r3, r6, lr
 8008e12:	fa07 f70e 	lsl.w	r7, r7, lr
 8008e16:	fa20 f901 	lsr.w	r9, r0, r1
 8008e1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8008e1e:	40ce      	lsrs	r6, r1
 8008e20:	ea49 0903 	orr.w	r9, r9, r3
 8008e24:	fbb6 faf8 	udiv	sl, r6, r8
 8008e28:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8008e2c:	fb08 661a 	mls	r6, r8, sl, r6
 8008e30:	fa1f fc87 	uxth.w	ip, r7
 8008e34:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8008e38:	fb0a f20c 	mul.w	r2, sl, ip
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	fa00 f40e 	lsl.w	r4, r0, lr
 8008e42:	d90a      	bls.n	8008e5a <__udivmoddi4+0x1be>
 8008e44:	19db      	adds	r3, r3, r7
 8008e46:	f10a 31ff 	add.w	r1, sl, #4294967295
 8008e4a:	f080 8087 	bcs.w	8008f5c <__udivmoddi4+0x2c0>
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	f240 8084 	bls.w	8008f5c <__udivmoddi4+0x2c0>
 8008e54:	f1aa 0a02 	sub.w	sl, sl, #2
 8008e58:	443b      	add	r3, r7
 8008e5a:	1a9b      	subs	r3, r3, r2
 8008e5c:	fa1f f989 	uxth.w	r9, r9
 8008e60:	fbb3 f1f8 	udiv	r1, r3, r8
 8008e64:	fb08 3311 	mls	r3, r8, r1, r3
 8008e68:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8008e6c:	fb01 f60c 	mul.w	r6, r1, ip
 8008e70:	429e      	cmp	r6, r3
 8008e72:	d907      	bls.n	8008e84 <__udivmoddi4+0x1e8>
 8008e74:	19db      	adds	r3, r3, r7
 8008e76:	f101 32ff 	add.w	r2, r1, #4294967295
 8008e7a:	d26b      	bcs.n	8008f54 <__udivmoddi4+0x2b8>
 8008e7c:	429e      	cmp	r6, r3
 8008e7e:	d969      	bls.n	8008f54 <__udivmoddi4+0x2b8>
 8008e80:	3902      	subs	r1, #2
 8008e82:	443b      	add	r3, r7
 8008e84:	1b9b      	subs	r3, r3, r6
 8008e86:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008e8a:	e78e      	b.n	8008daa <__udivmoddi4+0x10e>
 8008e8c:	f1c1 0e20 	rsb	lr, r1, #32
 8008e90:	fa22 f40e 	lsr.w	r4, r2, lr
 8008e94:	408b      	lsls	r3, r1
 8008e96:	4323      	orrs	r3, r4
 8008e98:	fa20 f70e 	lsr.w	r7, r0, lr
 8008e9c:	fa06 f401 	lsl.w	r4, r6, r1
 8008ea0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8008ea4:	fa26 f60e 	lsr.w	r6, r6, lr
 8008ea8:	433c      	orrs	r4, r7
 8008eaa:	fbb6 f9fc 	udiv	r9, r6, ip
 8008eae:	0c27      	lsrs	r7, r4, #16
 8008eb0:	fb0c 6619 	mls	r6, ip, r9, r6
 8008eb4:	fa1f f883 	uxth.w	r8, r3
 8008eb8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8008ebc:	fb09 f708 	mul.w	r7, r9, r8
 8008ec0:	42b7      	cmp	r7, r6
 8008ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8008ec6:	fa00 fa01 	lsl.w	sl, r0, r1
 8008eca:	d908      	bls.n	8008ede <__udivmoddi4+0x242>
 8008ecc:	18f6      	adds	r6, r6, r3
 8008ece:	f109 30ff 	add.w	r0, r9, #4294967295
 8008ed2:	d241      	bcs.n	8008f58 <__udivmoddi4+0x2bc>
 8008ed4:	42b7      	cmp	r7, r6
 8008ed6:	d93f      	bls.n	8008f58 <__udivmoddi4+0x2bc>
 8008ed8:	f1a9 0902 	sub.w	r9, r9, #2
 8008edc:	441e      	add	r6, r3
 8008ede:	1bf6      	subs	r6, r6, r7
 8008ee0:	b2a0      	uxth	r0, r4
 8008ee2:	fbb6 f4fc 	udiv	r4, r6, ip
 8008ee6:	fb0c 6614 	mls	r6, ip, r4, r6
 8008eea:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8008eee:	fb04 f808 	mul.w	r8, r4, r8
 8008ef2:	45b8      	cmp	r8, r7
 8008ef4:	d907      	bls.n	8008f06 <__udivmoddi4+0x26a>
 8008ef6:	18ff      	adds	r7, r7, r3
 8008ef8:	f104 30ff 	add.w	r0, r4, #4294967295
 8008efc:	d228      	bcs.n	8008f50 <__udivmoddi4+0x2b4>
 8008efe:	45b8      	cmp	r8, r7
 8008f00:	d926      	bls.n	8008f50 <__udivmoddi4+0x2b4>
 8008f02:	3c02      	subs	r4, #2
 8008f04:	441f      	add	r7, r3
 8008f06:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8008f0a:	ebc8 0707 	rsb	r7, r8, r7
 8008f0e:	fba0 8902 	umull	r8, r9, r0, r2
 8008f12:	454f      	cmp	r7, r9
 8008f14:	4644      	mov	r4, r8
 8008f16:	464e      	mov	r6, r9
 8008f18:	d314      	bcc.n	8008f44 <__udivmoddi4+0x2a8>
 8008f1a:	d029      	beq.n	8008f70 <__udivmoddi4+0x2d4>
 8008f1c:	b365      	cbz	r5, 8008f78 <__udivmoddi4+0x2dc>
 8008f1e:	ebba 0304 	subs.w	r3, sl, r4
 8008f22:	eb67 0706 	sbc.w	r7, r7, r6
 8008f26:	fa07 fe0e 	lsl.w	lr, r7, lr
 8008f2a:	40cb      	lsrs	r3, r1
 8008f2c:	40cf      	lsrs	r7, r1
 8008f2e:	ea4e 0303 	orr.w	r3, lr, r3
 8008f32:	e885 0088 	stmia.w	r5, {r3, r7}
 8008f36:	2100      	movs	r1, #0
 8008f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	e6f8      	b.n	8008d32 <__udivmoddi4+0x96>
 8008f40:	4610      	mov	r0, r2
 8008f42:	e6e0      	b.n	8008d06 <__udivmoddi4+0x6a>
 8008f44:	ebb8 0402 	subs.w	r4, r8, r2
 8008f48:	eb69 0603 	sbc.w	r6, r9, r3
 8008f4c:	3801      	subs	r0, #1
 8008f4e:	e7e5      	b.n	8008f1c <__udivmoddi4+0x280>
 8008f50:	4604      	mov	r4, r0
 8008f52:	e7d8      	b.n	8008f06 <__udivmoddi4+0x26a>
 8008f54:	4611      	mov	r1, r2
 8008f56:	e795      	b.n	8008e84 <__udivmoddi4+0x1e8>
 8008f58:	4681      	mov	r9, r0
 8008f5a:	e7c0      	b.n	8008ede <__udivmoddi4+0x242>
 8008f5c:	468a      	mov	sl, r1
 8008f5e:	e77c      	b.n	8008e5a <__udivmoddi4+0x1be>
 8008f60:	3b02      	subs	r3, #2
 8008f62:	443c      	add	r4, r7
 8008f64:	e748      	b.n	8008df8 <__udivmoddi4+0x15c>
 8008f66:	4608      	mov	r0, r1
 8008f68:	e70a      	b.n	8008d80 <__udivmoddi4+0xe4>
 8008f6a:	3802      	subs	r0, #2
 8008f6c:	443e      	add	r6, r7
 8008f6e:	e72f      	b.n	8008dd0 <__udivmoddi4+0x134>
 8008f70:	45c2      	cmp	sl, r8
 8008f72:	d3e7      	bcc.n	8008f44 <__udivmoddi4+0x2a8>
 8008f74:	463e      	mov	r6, r7
 8008f76:	e7d1      	b.n	8008f1c <__udivmoddi4+0x280>
 8008f78:	4629      	mov	r1, r5
 8008f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f7e:	bf00      	nop

08008f80 <__aeabi_idiv0>:
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	7272650a 	.word	0x7272650a
 8008f88:	6f63726f 	.word	0x6f63726f
 8008f8c:	36746e75 	.word	0x36746e75
 8008f90:	203d2044 	.word	0x203d2044
 8008f94:	7c206425 	.word	0x7c206425
 8008f98:	72726520 	.word	0x72726520
 8008f9c:	6f63726f 	.word	0x6f63726f
 8008fa0:	20746e75 	.word	0x20746e75
 8008fa4:	6425203d 	.word	0x6425203d
 8008fa8:	74207c20 	.word	0x74207c20
 8008fac:	6c61746f 	.word	0x6c61746f
 8008fb0:	6e756f63 	.word	0x6e756f63
 8008fb4:	203d2074 	.word	0x203d2074
 8008fb8:	0a646c25 	.word	0x0a646c25
 8008fbc:	00000000 	.word	0x00000000
 8008fc0:	74696e69 	.word	0x74696e69
 8008fc4:	6e6f6420 	.word	0x6e6f6420
 8008fc8:	2e2e2e65 	.word	0x2e2e2e65
 8008fcc:	00000000 	.word	0x00000000
 8008fd0:	3353494c 	.word	0x3353494c
 8008fd4:	535f4844 	.word	0x535f4844
 8008fd8:	444f7465 	.word	0x444f7465
 8008fdc:	6f642052 	.word	0x6f642052
 8008fe0:	2e2e656e 	.word	0x2e2e656e
 8008fe4:	0000002e 	.word	0x0000002e
 8008fe8:	3353494c 	.word	0x3353494c
 8008fec:	535f4844 	.word	0x535f4844
 8008ff0:	6f4d7465 	.word	0x6f4d7465
 8008ff4:	64206564 	.word	0x64206564
 8008ff8:	2e656e6f 	.word	0x2e656e6f
 8008ffc:	00002e2e 	.word	0x00002e2e
 8009000:	3353494c 	.word	0x3353494c
 8009004:	535f4844 	.word	0x535f4844
 8009008:	75467465 	.word	0x75467465
 800900c:	63536c6c 	.word	0x63536c6c
 8009010:	20656c61 	.word	0x20656c61
 8009014:	656e6f64 	.word	0x656e6f64
 8009018:	002e2e2e 	.word	0x002e2e2e
 800901c:	3353494c 	.word	0x3353494c
 8009020:	535f4844 	.word	0x535f4844
 8009024:	78417465 	.word	0x78417465
 8009028:	64207369 	.word	0x64207369
 800902c:	2e656e6f 	.word	0x2e656e6f
 8009030:	00002e2e 	.word	0x00002e2e
 8009034:	3353494c 	.word	0x3353494c
 8009038:	535f4844 	.word	0x535f4844
 800903c:	6e497465 	.word	0x6e497465
 8009040:	68543174 	.word	0x68543174
 8009044:	68737265 	.word	0x68737265
 8009048:	20646c6f 	.word	0x20646c6f
 800904c:	656e6f64 	.word	0x656e6f64
 8009050:	002e2e2e 	.word	0x002e2e2e
 8009054:	3353494c 	.word	0x3353494c
 8009058:	535f4844 	.word	0x535f4844
 800905c:	6e497465 	.word	0x6e497465
 8009060:	6e6f4374 	.word	0x6e6f4374
 8009064:	75676966 	.word	0x75676966
 8009068:	69746172 	.word	0x69746172
 800906c:	64206e6f 	.word	0x64206e6f
 8009070:	2e656e6f 	.word	0x2e656e6f
 8009074:	00002e2e 	.word	0x00002e2e
 8009078:	3353494c 	.word	0x3353494c
 800907c:	535f4844 	.word	0x535f4844
 8009080:	6e497465 	.word	0x6e497465
 8009084:	646f4d74 	.word	0x646f4d74
 8009088:	6f642065 	.word	0x6f642065
 800908c:	2e2e656e 	.word	0x2e2e656e
 8009090:	0000002e 	.word	0x0000002e
 8009094:	36253d58 	.word	0x36253d58
 8009098:	3d592064 	.word	0x3d592064
 800909c:	20643625 	.word	0x20643625
 80090a0:	36253d5a 	.word	0x36253d5a
 80090a4:	00000d64 	.word	0x00000d64
 80090a8:	0a0d6425 	.word	0x0a0d6425
 80090ac:	0a0d6425 	.word	0x0a0d6425
 80090b0:	0a0d6425 	.word	0x0a0d6425
 80090b4:	00000000 	.word	0x00000000
 80090b8:	736f700a 	.word	0x736f700a
 80090bc:	6f697469 	.word	0x6f697469
 80090c0:	203d206e 	.word	0x203d206e
 80090c4:	535f5055 	.word	0x535f5055
 80090c8:	00202058 	.word	0x00202058
 80090cc:	736f700a 	.word	0x736f700a
 80090d0:	6f697469 	.word	0x6f697469
 80090d4:	203d206e 	.word	0x203d206e
 80090d8:	445f5055 	.word	0x445f5055
 80090dc:	00202058 	.word	0x00202058
 80090e0:	736f700a 	.word	0x736f700a
 80090e4:	6f697469 	.word	0x6f697469
 80090e8:	203d206e 	.word	0x203d206e
 80090ec:	535f5744 	.word	0x535f5744
 80090f0:	00202058 	.word	0x00202058
 80090f4:	736f700a 	.word	0x736f700a
 80090f8:	6f697469 	.word	0x6f697469
 80090fc:	203d206e 	.word	0x203d206e
 8009100:	445f5744 	.word	0x445f5744
 8009104:	00202058 	.word	0x00202058
 8009108:	736f700a 	.word	0x736f700a
 800910c:	6f697469 	.word	0x6f697469
 8009110:	203d206e 	.word	0x203d206e
 8009114:	20504f54 	.word	0x20504f54
 8009118:	00202020 	.word	0x00202020
 800911c:	736f700a 	.word	0x736f700a
 8009120:	6f697469 	.word	0x6f697469
 8009124:	203d206e 	.word	0x203d206e
 8009128:	54544f42 	.word	0x54544f42
 800912c:	00204d4f 	.word	0x00204d4f
 8009130:	736f700a 	.word	0x736f700a
 8009134:	6f697469 	.word	0x6f697469
 8009138:	203d206e 	.word	0x203d206e
 800913c:	6e6b6e75 	.word	0x6e6b6e75
 8009140:	006e776f 	.word	0x006e776f
 8009144:	0000000a 	.word	0x0000000a

08009148 <zeroes.7273>:
 8009148:	30303030 30303030 30303030 30303030     0000000000000000
 8009158:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8009168:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8009178:	00000000 33323130 37363534 62613938     ....0123456789ab
 8009188:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8009198:	00000030                                0...

0800919c <blanks.7272>:
 800919c:	20202020 20202020 20202020 20202020                     
 80091ac:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 80091bc:	00000000                                ....

080091c0 <__mprec_tens>:
 80091c0:	00000000 3ff00000 00000000 40240000     .......?......$@
 80091d0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 80091e0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 80091f0:	00000000 412e8480 00000000 416312d0     .......A......cA
 8009200:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8009210:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8009220:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8009230:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8009240:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8009250:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8009260:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8009270:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8009280:	79d99db4 44ea7843                       ...yCx.D

08009288 <__mprec_bigtens>:
 8009288:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8009298:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 80092a8:	7f73bf3c 75154fdd                       <.s..O.u

080092b0 <p05.6087>:
 80092b0:	00000005 00000019 0000007d              ........}...

080092bc <zeroes.7258>:
 80092bc:	30303030 30303030 30303030 30303030     0000000000000000

080092cc <blanks.7257>:
 80092cc:	20202020 20202020 20202020 20202020                     
 80092dc:	00000043 49534f50 00000058 0000002e     C...POSIX.......

080092ec <_ctype_>:
 80092ec:	20202000 20202020 28282020 20282828     .         ((((( 
 80092fc:	20202020 20202020 20202020 20202020                     
 800930c:	10108820 10101010 10101010 10101010      ...............
 800931c:	04040410 04040404 10040404 10101010     ................
 800932c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800933c:	01010101 01010101 01010101 10101010     ................
 800934c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800935c:	02020202 02020202 02020202 10101010     ................
 800936c:	00000020 00000000 00000000 00000000      ...............
	...
