
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	a9 07 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 e1 04 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c009350 	.word	0x0c009350
 800024c:	20000000 	.word	0x20000000
 8000250:	000009e8 	.word	0x000009e8
 8000254:	0c009d38 	.word	0x0c009d38
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c009350 	.word	0x0c009350
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c009350 	.word	0x0c009350
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200009e8 	.word	0x200009e8
 800027c:	00000108 	.word	0x00000108
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000294:	08002611 	.word	0x08002611
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	08004195 	.word	0x08004195
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08002265 	.word	0x08002265

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	db0b      	blt.n	80002de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c6:	4909      	ldr	r1, [pc, #36]	; (80002ec <__NVIC_EnableIRQ+0x38>)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	095b      	lsrs	r3, r3, #5
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	f002 021f 	and.w	r2, r2, #31
 80002d4:	2001      	movs	r0, #1
 80002d6:	fa00 f202 	lsl.w	r2, r0, r2
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	490d      	ldr	r1, [pc, #52]	; (800033c <__NVIC_SetPriority+0x4c>)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	0092      	lsls	r2, r2, #2
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	4909      	ldr	r1, [pc, #36]	; (8000340 <__NVIC_SetPriority+0x50>)
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f003 030f 	and.w	r3, r3, #15
 8000322:	3b04      	subs	r3, #4
 8000324:	683a      	ldr	r2, [r7, #0]
 8000326:	b2d2      	uxtb	r2, r2
 8000328:	0092      	lsls	r2, r2, #2
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
  }
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
 8000350:	4613      	mov	r3, r2
 8000352:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000354:	78f8      	ldrb	r0, [r7, #3]
 8000356:	78fb      	ldrb	r3, [r7, #3]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	3306      	adds	r3, #6
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	4413      	add	r3, r2
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000366:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000368:	431a      	orrs	r2, r3
 800036a:	6879      	ldr	r1, [r7, #4]
 800036c:	1d83      	adds	r3, r0, #6
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	440b      	add	r3, r1
 8000372:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800038c:	b2db      	uxtb	r3, r3
 800038e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000392:	b2db      	uxtb	r3, r3
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	431a      	orrs	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop

080003c8 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80003d6:	f003 0308 	and.w	r3, r3, #8
 80003da:	2b00      	cmp	r3, #0
 80003dc:	bf14      	ite	ne
 80003de:	2301      	movne	r3, #1
 80003e0:	2300      	moveq	r3, #0
 80003e2:	b2db      	uxtb	r3, r3
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003fc:	f023 030f 	bic.w	r3, r3, #15
 8000400:	f043 0202 	orr.w	r2, r3, #2
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	460b      	mov	r3, r1
 800041e:	70fb      	strb	r3, [r7, #3]
 8000420:	4613      	mov	r3, r2
 8000422:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
 8000424:	78f8      	ldrb	r0, [r7, #3]
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	3306      	adds	r3, #6
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	4413      	add	r3, r2
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	f023 0250 	bic.w	r2, r3, #80	; 0x50
 8000436:	6879      	ldr	r1, [r7, #4]
 8000438:	1d83      	adds	r3, r0, #6
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	440b      	add	r3, r1
 800043e:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000440:	78ba      	ldrb	r2, [r7, #2]
 8000442:	78fb      	ldrb	r3, [r7, #3]
 8000444:	4619      	mov	r1, r3
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f7ff ff7c 	bl	8000344 <XMC_USIC_CH_SetInputSource>
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <_init_uart0_ch0>:
    .stop_bits = 1U,
    .baudrate = 115200U
};
/****************************************************************** FUNCTIONS */
void _init_uart0_ch0()
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
    /* USIC channels initialization */
    XMC_UART_CH_Init (XMC_UART0_CH0, &uart_config);
 8000458:	491c      	ldr	r1, [pc, #112]	; (80004cc <_init_uart0_ch0+0x78>)
 800045a:	481d      	ldr	r0, [pc, #116]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800045c:	f002 fb5a 	bl	8002b14 <XMC_UART_CH_Init>

    XMC_UART_CH_SetInputSource (XMC_UART0_CH0, XMC_UART_CH_INPUT_RXD,
 8000460:	2201      	movs	r2, #1
 8000462:	2100      	movs	r1, #0
 8000464:	481a      	ldr	r0, [pc, #104]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000466:	f7ff ffd5 	bl	8000414 <XMC_UART_CH_SetInputSource>
    /* FIFOs initialization for both channels:
     *  8 entries for TxFIFO from point 0, LIMIT=1
     *  8 entries for RxFIFO from point 8, LIMIT=7 (SRBI is set if all 8*data have
     *                                              been received)
     *  */
    XMC_USIC_CH_TXFIFO_Configure (XMC_UART0_CH0, 0, XMC_USIC_CH_FIFO_SIZE_8WORDS, TX_FIFO_INITIAL_LIMIT);
 800046a:	2300      	movs	r3, #0
 800046c:	2203      	movs	r2, #3
 800046e:	2100      	movs	r1, #0
 8000470:	4817      	ldr	r0, [pc, #92]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000472:	f002 fe79 	bl	8003168 <XMC_USIC_CH_TXFIFO_Configure>
    XMC_USIC_CH_RXFIFO_Configure (XMC_UART0_CH0, 8, XMC_USIC_CH_FIFO_SIZE_8WORDS, RX_FIFO_INITIAL_LIMIT);
 8000476:	2300      	movs	r3, #0
 8000478:	2203      	movs	r2, #3
 800047a:	2108      	movs	r1, #8
 800047c:	4814      	ldr	r0, [pc, #80]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800047e:	f002 fe9b 	bl	80031b8 <XMC_USIC_CH_RXFIFO_Configure>

    /* Enabling events for TX FIFO and RX FIFO */
    XMC_USIC_CH_RXFIFO_EnableEvent (XMC_UART0_CH0,
 8000482:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8000486:	4812      	ldr	r0, [pc, #72]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000488:	f7ff ff8a 	bl	80003a0 <XMC_USIC_CH_RXFIFO_EnableEvent>
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE);

    /* Connecting the previously enabled events to a Service Request line number */
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD, 0);
 800048c:	2200      	movs	r2, #0
 800048e:	2110      	movs	r1, #16
 8000490:	480f      	ldr	r0, [pc, #60]	; (80004d0 <_init_uart0_ch0+0x7c>)
 8000492:	f002 febb 	bl	800320c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2113      	movs	r1, #19
 800049a:	480d      	ldr	r0, [pc, #52]	; (80004d0 <_init_uart0_ch0+0x7c>)
 800049c:	f002 feb6 	bl	800320c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>

    /* Start USIC operation as UART */
    XMC_UART_CH_Start (XMC_UART0_CH0);
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <_init_uart0_ch0+0x7c>)
 80004a2:	f7ff ffa5 	bl	80003f0 <XMC_UART_CH_Start>

    /*Initialization of the necessary ports*/
    XMC_GPIO_Init (UART_TX, &uart_tx);
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <_init_uart0_ch0+0x80>)
 80004a8:	2105      	movs	r1, #5
 80004aa:	480b      	ldr	r0, [pc, #44]	; (80004d8 <_init_uart0_ch0+0x84>)
 80004ac:	f002 fa72 	bl	8002994 <XMC_GPIO_Init>
    XMC_GPIO_Init (UART_RX, &uart_rx);
 80004b0:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <_init_uart0_ch0+0x88>)
 80004b2:	2104      	movs	r1, #4
 80004b4:	4808      	ldr	r0, [pc, #32]	; (80004d8 <_init_uart0_ch0+0x84>)
 80004b6:	f002 fa6d 	bl	8002994 <XMC_GPIO_Init>

    /* Configuring priority and enabling NVIC IRQ for the defined service request
    line number */
    NVIC_SetPriority (USIC0_0_IRQn, 63U);
 80004ba:	213f      	movs	r1, #63	; 0x3f
 80004bc:	2054      	movs	r0, #84	; 0x54
 80004be:	f7ff ff17 	bl	80002f0 <__NVIC_SetPriority>
    NVIC_EnableIRQ (USIC0_0_IRQn);
 80004c2:	2054      	movs	r0, #84	; 0x54
 80004c4:	f7ff fef6 	bl	80002b4 <__NVIC_EnableIRQ>

    return;
 80004c8:	bf00      	nop
}
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	2000000c 	.word	0x2000000c
 80004d0:	40030000 	.word	0x40030000
 80004d4:	20000000 	.word	0x20000000
 80004d8:	48028100 	.word	0x48028100
 80004dc:	20000a2c 	.word	0x20000a2c

080004e0 <USIC0_0_IRQHandler>:

void USIC0_0_IRQHandler (void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	71fb      	strb	r3, [r7, #7]

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 80004ea:	e01f      	b.n	800052c <USIC0_0_IRQHandler+0x4c>
        rx_tmp = XMC_UART_CH_GetReceivedData (XMC_UART0_CH0);
 80004ec:	4816      	ldr	r0, [pc, #88]	; (8000548 <USIC0_0_IRQHandler+0x68>)
 80004ee:	f002 fb8f 	bl	8002c10 <XMC_UART_CH_GetReceivedData>
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]

        if ( (rx_tmp != STRING_CR) && (!str_available)) {
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b0d      	cmp	r3, #13
 80004fa:	d011      	beq.n	8000520 <USIC0_0_IRQHandler+0x40>
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <USIC0_0_IRQHandler+0x6c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	f083 0301 	eor.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d00a      	beq.n	8000520 <USIC0_0_IRQHandler+0x40>
            rx_buffer[rx_ctr++] = rx_tmp;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	b2d1      	uxtb	r1, r2
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 8000514:	7011      	strb	r1, [r2, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <USIC0_0_IRQHandler+0x74>)
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	5453      	strb	r3, [r2, r1]
 800051e:	e005      	b.n	800052c <USIC0_0_IRQHandler+0x4c>
        } else {
            rx_ctr = 0;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <USIC0_0_IRQHandler+0x70>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
            str_available = true;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <USIC0_0_IRQHandler+0x6c>)
 8000528:	2201      	movs	r2, #1
 800052a:	701a      	strb	r2, [r3, #0]
{
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 800052c:	4806      	ldr	r0, [pc, #24]	; (8000548 <USIC0_0_IRQHandler+0x68>)
 800052e:	f7ff ff4b 	bl	80003c8 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8000532:	4603      	mov	r3, r0
 8000534:	f083 0301 	eor.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1d6      	bne.n	80004ec <USIC0_0_IRQHandler+0xc>
        } else {
            rx_ctr = 0;
            str_available = true;
        }
    }
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40030000 	.word	0x40030000
 800054c:	200009e8 	.word	0x200009e8
 8000550:	20000a38 	.word	0x20000a38
 8000554:	200009ec 	.word	0x200009ec

08000558 <_uart_printf>:

    return 0;
}

uint8_t _uart_printf (char *fmt, ...)
{
 8000558:	b40f      	push	{r0, r1, r2, r3}
 800055a:	b580      	push	{r7, lr}
 800055c:	b0c2      	sub	sp, #264	; 0x108
 800055e:	af00      	add	r7, sp, #0
    va_list arg_ptr;
    char buffer[BUFFER_SIZE_PRINTF];

    if (fmt == NULL)  {
 8000560:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000564:	2b00      	cmp	r3, #0
 8000566:	d101      	bne.n	800056c <_uart_printf+0x14>
        return ERR_OUT_OF_MEMORY;
 8000568:	2364      	movs	r3, #100	; 0x64
 800056a:	e010      	b.n	800058e <_uart_printf+0x36>
    }

    va_start (arg_ptr, fmt);
 800056c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    vsprintf (buffer, fmt, arg_ptr);
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800057a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800057e:	4618      	mov	r0, r3
 8000580:	f005 fc12 	bl	8005da8 <vsprintf>
    va_end (arg_ptr);

    _uart_send_string (buffer);
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f80a 	bl	80005a0 <_uart_send_string>
    return 0;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000594:	46bd      	mov	sp, r7
 8000596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800059a:	b004      	add	sp, #16
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <_uart_send_string>:

uint8_t _uart_send_string (char *str)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <_uart_send_string+0x12>
        return ERR_OUT_OF_MEMORY;
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	e01d      	b.n	80005ee <_uart_send_string+0x4e>
    }

    for (int i = 0; i < strlen (str); i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e012      	b.n	80005de <_uart_send_string+0x3e>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 80005b8:	bf00      	nop
 80005ba:	480f      	ldr	r0, [pc, #60]	; (80005f8 <_uart_send_string+0x58>)
 80005bc:	f7ff fee0 	bl	8000380 <XMC_USIC_CH_GetTransmitBufferStatus>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b80      	cmp	r3, #128	; 0x80
 80005c4:	d0f9      	beq.n	80005ba <_uart_send_string+0x1a>
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	4619      	mov	r1, r3
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <_uart_send_string+0x58>)
 80005d4:	f002 faf6 	bl	8002bc4 <XMC_UART_CH_Transmit>
{
    if (str == NULL) {
        return ERR_OUT_OF_MEMORY;
    }

    for (int i = 0; i < strlen (str); i++) {
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f003 ff8e 	bl	8004500 <strlen>
 80005e4:	4602      	mov	r2, r0
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8e5      	bhi.n	80005b8 <_uart_send_string+0x18>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
    }
    return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40030000 	.word	0x40030000

080005fc <_uart_get_string>:

uint8_t _uart_get_string (char *str)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d101      	bne.n	800060e <_uart_get_string+0x12>
        return ERR_OUT_OF_MEMORY;
 800060a:	2364      	movs	r3, #100	; 0x64
 800060c:	e019      	b.n	8000642 <_uart_get_string+0x46>
    }

    while (!str_available);
 800060e:	bf00      	nop
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <_uart_get_string+0x50>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f083 0301 	eor.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f8      	bne.n	8000610 <_uart_get_string+0x14>
    memcpy (str, &rx_buffer, strlen (rx_buffer));
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <_uart_get_string+0x54>)
 8000620:	f003 ff6e 	bl	8004500 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4909      	ldr	r1, [pc, #36]	; (8000650 <_uart_get_string+0x54>)
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f003 fdda 	bl	80041e4 <memcpy>
    memset (&rx_buffer, 0x00, BUFFER_SIZE_RX);
 8000630:	2240      	movs	r2, #64	; 0x40
 8000632:	2100      	movs	r1, #0
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <_uart_get_string+0x54>)
 8000636:	f003 fe6f 	bl	8004318 <memset>

    str_available = false;
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <_uart_get_string+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
    return 0;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200009e8 	.word	0x200009e8
 8000650:	200009ec 	.word	0x200009ec

08000654 <initServoPWM>:
 * @param	none
 * @return	none
 *
 */
void initServoPWM()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	// init servos

    initServoPWMXMC();
 8000658:	f000 fe02 	bl	8001260 <initServoPWMXMC>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}

08000660 <pwm>:
 *			1 for lower servo <br>
 * @return	none
 *
 */
uint8_t pwm(double dutycycle, uint8_t out)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800066a:	4613      	mov	r3, r2
 800066c:	71fb      	strb	r3, [r7, #7]
	// call pwm driver

    if (out == 0)
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d10b      	bne.n	800068c <pwm+0x2c>
    {
        if(pwmXMC(dutycycle, 0) == 0)
 8000674:	2200      	movs	r2, #0
 8000676:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800067a:	f000 fe6d 	bl	8001358 <pwmXMC>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d101      	bne.n	8000688 <pwm+0x28>
        {
            return 0;
 8000684:	2300      	movs	r3, #0
 8000686:	e00c      	b.n	80006a2 <pwm+0x42>
        }
        else
        {
            return 1;
 8000688:	2301      	movs	r3, #1
 800068a:	e00a      	b.n	80006a2 <pwm+0x42>
        }

    }
    else
    {
        if(pwmXMC(dutycycle, 1) == 0)
 800068c:	2201      	movs	r2, #1
 800068e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000692:	f000 fe61 	bl	8001358 <pwmXMC>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d101      	bne.n	80006a0 <pwm+0x40>
        {
            return 0;
 800069c:	2300      	movs	r3, #0
 800069e:	e000      	b.n	80006a2 <pwm+0x42>
        }
        else
        {
            return 1;
 80006a0:	2301      	movs	r3, #1
        }
    }
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop

080006ac <initGlobals>:
 * @param	none
 * @return	none
 *
 */
void initGlobals()
{
 80006ac:	b490      	push	{r4, r7}
 80006ae:	af00      	add	r7, sp, #0
    readAxes.axisX = 0;
 80006b0:	4b26      	ldr	r3, [pc, #152]	; (800074c <initGlobals+0xa0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	801a      	strh	r2, [r3, #0]
    readAxes.axisY = 0;
 80006b6:	4b25      	ldr	r3, [pc, #148]	; (800074c <initGlobals+0xa0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	805a      	strh	r2, [r3, #2]
    readAxes.axisZ = 0;
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <initGlobals+0xa0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	809a      	strh	r2, [r3, #4]
    direction = 6;
 80006c2:	4b23      	ldr	r3, [pc, #140]	; (8000750 <initGlobals+0xa4>)
 80006c4:	2206      	movs	r2, #6
 80006c6:	701a      	strb	r2, [r3, #0]
    errorcount = 0;
 80006c8:	4b22      	ldr	r3, [pc, #136]	; (8000754 <initGlobals+0xa8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
    packagesSent = 0;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <initGlobals+0xac>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
    position = 0;
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <initGlobals+0xb0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
    old_position = 0;
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <initGlobals+0xb4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
    signal1 = 0.00;
 80006e0:	4a20      	ldr	r2, [pc, #128]	; (8000764 <initGlobals+0xb8>)
 80006e2:	f04f 0300 	mov.w	r3, #0
 80006e6:	f04f 0400 	mov.w	r4, #0
 80006ea:	e9c2 3400 	strd	r3, r4, [r2]
    signal2 = 0.00;
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <initGlobals+0xbc>)
 80006f0:	f04f 0300 	mov.w	r3, #0
 80006f4:	f04f 0400 	mov.w	r4, #0
 80006f8:	e9c2 3400 	strd	r3, r4, [r2]
    button1pressed = 0;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <initGlobals+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
    button2pressed = 0;
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <initGlobals+0xc4>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
    statisticSend = 0;
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <initGlobals+0xc8>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
    servoEnable = 0;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <initGlobals+0xcc>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
    buttonSend = 0;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <initGlobals+0xd0>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
    inix = 0;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <initGlobals+0xd4>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
    outix = 0;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <initGlobals+0xd8>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
    full = 0;
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <initGlobals+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
    empty = 1;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <initGlobals+0xe0>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
    startup = 0;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <initGlobals+0xe4>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
    connection = 0;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <initGlobals+0xe8>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
    averageChoice = 0;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <initGlobals+0xec>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc90      	pop	{r4, r7}
 800074a:	4770      	bx	lr
 800074c:	20000ad8 	.word	0x20000ad8
 8000750:	20000ad1 	.word	0x20000ad1
 8000754:	20000aaa 	.word	0x20000aaa
 8000758:	20000ac0 	.word	0x20000ac0
 800075c:	20000abe 	.word	0x20000abe
 8000760:	20000ad4 	.word	0x20000ad4
 8000764:	20000ae0 	.word	0x20000ae0
 8000768:	20000ac8 	.word	0x20000ac8
 800076c:	20000ad0 	.word	0x20000ad0
 8000770:	20000ac4 	.word	0x20000ac4
 8000774:	20000aa8 	.word	0x20000aa8
 8000778:	20000ad3 	.word	0x20000ad3
 800077c:	20000ad5 	.word	0x20000ad5
 8000780:	20000ad2 	.word	0x20000ad2
 8000784:	20000aa9 	.word	0x20000aa9
 8000788:	20000ab0 	.word	0x20000ab0
 800078c:	20000ae8 	.word	0x20000ae8
 8000790:	20000aac 	.word	0x20000aac
 8000794:	20000ade 	.word	0x20000ade
 8000798:	20000ad6 	.word	0x20000ad6

0800079c <outputInit>:
 * @param	none
 * @return	none
 *
 */
void outputInit(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    outputInitXMC();
 80007a0:	f000 fe9c 	bl	80014dc <outputInitXMC>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <SysTick_Handler>:
 * @param	none
 * @return	none
 *
 */
void SysTick_Handler (void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
    static uint8_t i = 0;
    static double smoothSignal1 = 0.0, smoothSignal2 = 0.0;

    // read buttons and fill circular buffer

    readButtonDebounce();
 80007ae:	f000 fc43 	bl	8001038 <readButtonDebounce>

    if (circularGet(&buttonIDpressed))
 80007b2:	4888      	ldr	r0, [pc, #544]	; (80009d4 <SysTick_Handler+0x22c>)
 80007b4:	f000 fc8e 	bl	80010d4 <circularGet>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d012      	beq.n	80007e4 <SysTick_Handler+0x3c>
    {
        switch (buttonIDpressed)
 80007be:	4b85      	ldr	r3, [pc, #532]	; (80009d4 <SysTick_Handler+0x22c>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b0e      	cmp	r3, #14
 80007c4:	d002      	beq.n	80007cc <SysTick_Handler+0x24>
 80007c6:	2b0f      	cmp	r3, #15
 80007c8:	d004      	beq.n	80007d4 <SysTick_Handler+0x2c>
 80007ca:	e007      	b.n	80007dc <SysTick_Handler+0x34>
        case BUTTON1INT:
        {
#if DEBUG
            printf("button 1 pressed\n");
#endif
            buttonSend = 1;
 80007cc:	4b82      	ldr	r3, [pc, #520]	; (80009d8 <SysTick_Handler+0x230>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	701a      	strb	r2, [r3, #0]
            break;
 80007d2:	e007      	b.n	80007e4 <SysTick_Handler+0x3c>
        case BUTTON2INT:
        {
#if DEBUG
            printf("button 2 pressed\n");
#endif
            buttonSend = 2;
 80007d4:	4b80      	ldr	r3, [pc, #512]	; (80009d8 <SysTick_Handler+0x230>)
 80007d6:	2202      	movs	r2, #2
 80007d8:	701a      	strb	r2, [r3, #0]
            break;
 80007da:	e003      	b.n	80007e4 <SysTick_Handler+0x3c>
        }
        default:
        {
            buttonSend = 0;
 80007dc:	4b7e      	ldr	r3, [pc, #504]	; (80009d8 <SysTick_Handler+0x230>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
            break;
 80007e2:	bf00      	nop
        }
        }
    }

	// ticks acction only when connected
    if (connection == 1)
 80007e4:	4b7d      	ldr	r3, [pc, #500]	; (80009dc <SysTick_Handler+0x234>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	f040 80ee 	bne.w	80009ca <SysTick_Handler+0x222>
    {
        ticks++;
 80007ee:	4b7c      	ldr	r3, [pc, #496]	; (80009e0 <SysTick_Handler+0x238>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	4a7a      	ldr	r2, [pc, #488]	; (80009e0 <SysTick_Handler+0x238>)
 80007f6:	6013      	str	r3, [r2, #0]
        if(ticks == SENSORTICKS)
 80007f8:	4b79      	ldr	r3, [pc, #484]	; (80009e0 <SysTick_Handler+0x238>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b0a      	cmp	r3, #10
 80007fe:	d11f      	bne.n	8000840 <SysTick_Handler+0x98>
        {
            // get 6D Position
            direction = get6Dposition();
 8000800:	f001 f9a8 	bl	8001b54 <get6Dposition>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	4b76      	ldr	r3, [pc, #472]	; (80009e4 <SysTick_Handler+0x23c>)
 800080a:	701a      	strb	r2, [r3, #0]
            // get raw data
            readAxes = getAxesRawData();
 800080c:	4c76      	ldr	r4, [pc, #472]	; (80009e8 <SysTick_Handler+0x240>)
 800080e:	463b      	mov	r3, r7
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fa39 	bl	8001c88 <getAxesRawData>
 8000816:	4622      	mov	r2, r4
 8000818:	463b      	mov	r3, r7
 800081a:	6819      	ldr	r1, [r3, #0]
 800081c:	6011      	str	r1, [r2, #0]
 800081e:	889b      	ldrh	r3, [r3, #4]
 8000820:	8093      	strh	r3, [r2, #4]
            // calculate servo output
            pwmAngleCalc(readAxes.axisX, readAxes.axisY, readAxes.axisZ);
 8000822:	4b71      	ldr	r3, [pc, #452]	; (80009e8 <SysTick_Handler+0x240>)
 8000824:	f9b3 0000 	ldrsh.w	r0, [r3]
 8000828:	4b6f      	ldr	r3, [pc, #444]	; (80009e8 <SysTick_Handler+0x240>)
 800082a:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800082e:	4b6e      	ldr	r3, [pc, #440]	; (80009e8 <SysTick_Handler+0x240>)
 8000830:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000834:	461a      	mov	r2, r3
 8000836:	f000 fa0b 	bl	8000c50 <pwmAngleCalc>

            ticks = 0;
 800083a:	4b69      	ldr	r3, [pc, #420]	; (80009e0 <SysTick_Handler+0x238>)
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
        }

		// servo action only when connected
        if (servoEnable == 1)
 8000840:	4b6a      	ldr	r3, [pc, #424]	; (80009ec <SysTick_Handler+0x244>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	f040 80a2 	bne.w	800098e <SysTick_Handler+0x1e6>
        {
            if (averageChoice == 0)
 800084a:	4b69      	ldr	r3, [pc, #420]	; (80009f0 <SysTick_Handler+0x248>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d176      	bne.n	8000940 <SysTick_Handler+0x198>
            {
				// PWM averaging
                smoothSignal1 += signal1;
 8000852:	4b68      	ldr	r3, [pc, #416]	; (80009f4 <SysTick_Handler+0x24c>)
 8000854:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000858:	4b67      	ldr	r3, [pc, #412]	; (80009f8 <SysTick_Handler+0x250>)
 800085a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800085e:	461a      	mov	r2, r3
 8000860:	4623      	mov	r3, r4
 8000862:	f002 ffe7 	bl	8003834 <__adddf3>
 8000866:	4603      	mov	r3, r0
 8000868:	460c      	mov	r4, r1
 800086a:	4a62      	ldr	r2, [pc, #392]	; (80009f4 <SysTick_Handler+0x24c>)
 800086c:	e9c2 3400 	strd	r3, r4, [r2]
                smoothSignal2 += signal2;
 8000870:	4b62      	ldr	r3, [pc, #392]	; (80009fc <SysTick_Handler+0x254>)
 8000872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000876:	4b62      	ldr	r3, [pc, #392]	; (8000a00 <SysTick_Handler+0x258>)
 8000878:	e9d3 3400 	ldrd	r3, r4, [r3]
 800087c:	461a      	mov	r2, r3
 800087e:	4623      	mov	r3, r4
 8000880:	f002 ffd8 	bl	8003834 <__adddf3>
 8000884:	4603      	mov	r3, r0
 8000886:	460c      	mov	r4, r1
 8000888:	4a5c      	ldr	r2, [pc, #368]	; (80009fc <SysTick_Handler+0x254>)
 800088a:	e9c2 3400 	strd	r3, r4, [r2]
                i++;
 800088e:	4b5d      	ldr	r3, [pc, #372]	; (8000a04 <SysTick_Handler+0x25c>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b5b      	ldr	r3, [pc, #364]	; (8000a04 <SysTick_Handler+0x25c>)
 8000898:	701a      	strb	r2, [r3, #0]
                if (i == PWMAVERAGE)
 800089a:	4b5a      	ldr	r3, [pc, #360]	; (8000a04 <SysTick_Handler+0x25c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b05      	cmp	r3, #5
 80008a0:	f040 8093 	bne.w	80009ca <SysTick_Handler+0x222>
                {
                    // set servo
                    smoothSignal1 /= PWMAVERAGE;
 80008a4:	4b53      	ldr	r3, [pc, #332]	; (80009f4 <SysTick_Handler+0x24c>)
 80008a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008aa:	f04f 0200 	mov.w	r2, #0
 80008ae:	4b56      	ldr	r3, [pc, #344]	; (8000a08 <SysTick_Handler+0x260>)
 80008b0:	f003 fa9c 	bl	8003dec <__aeabi_ddiv>
 80008b4:	4603      	mov	r3, r0
 80008b6:	460c      	mov	r4, r1
 80008b8:	4a4e      	ldr	r2, [pc, #312]	; (80009f4 <SysTick_Handler+0x24c>)
 80008ba:	e9c2 3400 	strd	r3, r4, [r2]
                    smoothSignal2 /= PWMAVERAGE;
 80008be:	4b4f      	ldr	r3, [pc, #316]	; (80009fc <SysTick_Handler+0x254>)
 80008c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008c4:	f04f 0200 	mov.w	r2, #0
 80008c8:	4b4f      	ldr	r3, [pc, #316]	; (8000a08 <SysTick_Handler+0x260>)
 80008ca:	f003 fa8f 	bl	8003dec <__aeabi_ddiv>
 80008ce:	4603      	mov	r3, r0
 80008d0:	460c      	mov	r4, r1
 80008d2:	4a4a      	ldr	r2, [pc, #296]	; (80009fc <SysTick_Handler+0x254>)
 80008d4:	e9c2 3400 	strd	r3, r4, [r2]
                    if (pwm(smoothSignal1, 0) != 0)
 80008d8:	4b46      	ldr	r3, [pc, #280]	; (80009f4 <SysTick_Handler+0x24c>)
 80008da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008de:	2200      	movs	r2, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	4621      	mov	r1, r4
 80008e4:	f7ff febc 	bl	8000660 <pwm>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d005      	beq.n	80008fa <SysTick_Handler+0x152>
                    {
                        errorcount++;
 80008ee:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <SysTick_Handler+0x264>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b45      	ldr	r3, [pc, #276]	; (8000a0c <SysTick_Handler+0x264>)
 80008f8:	701a      	strb	r2, [r3, #0]
                    }
                    if (pwm(smoothSignal2, 1) != 0)
 80008fa:	4b40      	ldr	r3, [pc, #256]	; (80009fc <SysTick_Handler+0x254>)
 80008fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000900:	2201      	movs	r2, #1
 8000902:	4618      	mov	r0, r3
 8000904:	4621      	mov	r1, r4
 8000906:	f7ff feab 	bl	8000660 <pwm>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d005      	beq.n	800091c <SysTick_Handler+0x174>
                    {
                        errorcount++;
 8000910:	4b3e      	ldr	r3, [pc, #248]	; (8000a0c <SysTick_Handler+0x264>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	3301      	adds	r3, #1
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b3c      	ldr	r3, [pc, #240]	; (8000a0c <SysTick_Handler+0x264>)
 800091a:	701a      	strb	r2, [r3, #0]
                    }
                    smoothSignal1 = 0.0;
 800091c:	4a35      	ldr	r2, [pc, #212]	; (80009f4 <SysTick_Handler+0x24c>)
 800091e:	f04f 0300 	mov.w	r3, #0
 8000922:	f04f 0400 	mov.w	r4, #0
 8000926:	e9c2 3400 	strd	r3, r4, [r2]
                    smoothSignal2 = 0.0;
 800092a:	4a34      	ldr	r2, [pc, #208]	; (80009fc <SysTick_Handler+0x254>)
 800092c:	f04f 0300 	mov.w	r3, #0
 8000930:	f04f 0400 	mov.w	r4, #0
 8000934:	e9c2 3400 	strd	r3, r4, [r2]
                    i = 0;
 8000938:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <SysTick_Handler+0x25c>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
            {
                errorcount++;
            }
        }
    }
}
 800093e:	e044      	b.n	80009ca <SysTick_Handler+0x222>
                    smoothSignal1 = 0.0;
                    smoothSignal2 = 0.0;
                    i = 0;
                }
            }
            else if (averageChoice == 1)
 8000940:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <SysTick_Handler+0x248>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d140      	bne.n	80009ca <SysTick_Handler+0x222>
            {
				// angle thresholding
                if (pwm(signal1, 0) != 0)
 8000948:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <SysTick_Handler+0x250>)
 800094a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800094e:	2200      	movs	r2, #0
 8000950:	4618      	mov	r0, r3
 8000952:	4621      	mov	r1, r4
 8000954:	f7ff fe84 	bl	8000660 <pwm>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d005      	beq.n	800096a <SysTick_Handler+0x1c2>
                {
                    errorcount++;
 800095e:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <SysTick_Handler+0x264>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <SysTick_Handler+0x264>)
 8000968:	701a      	strb	r2, [r3, #0]
                }
                if (pwm(signal2, 1) != 0)
 800096a:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <SysTick_Handler+0x258>)
 800096c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000970:	2201      	movs	r2, #1
 8000972:	4618      	mov	r0, r3
 8000974:	4621      	mov	r1, r4
 8000976:	f7ff fe73 	bl	8000660 <pwm>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d024      	beq.n	80009ca <SysTick_Handler+0x222>
                {
                    errorcount++;
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <SysTick_Handler+0x264>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <SysTick_Handler+0x264>)
 800098a:	701a      	strb	r2, [r3, #0]
            {
                errorcount++;
            }
        }
    }
}
 800098c:	e01d      	b.n	80009ca <SysTick_Handler+0x222>
            }
        }
        else
        {
            // reset servo
            if (pwm(SERVOUPCENTER, 0) != 0)
 800098e:	2200      	movs	r2, #0
 8000990:	f04f 0000 	mov.w	r0, #0
 8000994:	491e      	ldr	r1, [pc, #120]	; (8000a10 <SysTick_Handler+0x268>)
 8000996:	f7ff fe63 	bl	8000660 <pwm>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d005      	beq.n	80009ac <SysTick_Handler+0x204>
            {
                errorcount++;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <SysTick_Handler+0x264>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <SysTick_Handler+0x264>)
 80009aa:	701a      	strb	r2, [r3, #0]
            }
            if (pwm(SERVOLOCENTER, 1) != 0)
 80009ac:	2201      	movs	r2, #1
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4917      	ldr	r1, [pc, #92]	; (8000a10 <SysTick_Handler+0x268>)
 80009b4:	f7ff fe54 	bl	8000660 <pwm>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d005      	beq.n	80009ca <SysTick_Handler+0x222>
            {
                errorcount++;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <SysTick_Handler+0x264>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	3301      	adds	r3, #1
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <SysTick_Handler+0x264>)
 80009c8:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd90      	pop	{r4, r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000a39 	.word	0x20000a39
 80009d8:	20000ad5 	.word	0x20000ad5
 80009dc:	20000ade 	.word	0x20000ade
 80009e0:	20000a3c 	.word	0x20000a3c
 80009e4:	20000ad1 	.word	0x20000ad1
 80009e8:	20000ad8 	.word	0x20000ad8
 80009ec:	20000ad3 	.word	0x20000ad3
 80009f0:	20000ad6 	.word	0x20000ad6
 80009f4:	20000a40 	.word	0x20000a40
 80009f8:	20000ae0 	.word	0x20000ae0
 80009fc:	20000a48 	.word	0x20000a48
 8000a00:	20000ac8 	.word	0x20000ac8
 8000a04:	20000a50 	.word	0x20000a50
 8000a08:	40140000 	.word	0x40140000
 8000a0c:	20000aaa 	.word	0x20000aaa
 8000a10:	401e0000 	.word	0x401e0000

08000a14 <protocolComplete>:
 *			temperature value <br>
 * @return	none
 *
 */
void protocolComplete(uint16_t position6D, int16_t positionX, int16_t positionY, int16_t positionZ)
{
 8000a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a16:	b0a5      	sub	sp, #148	; 0x94
 8000a18:	af06      	add	r7, sp, #24
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	4608      	mov	r0, r1
 8000a1e:	4611      	mov	r1, r2
 8000a20:	461a      	mov	r2, r3
 8000a22:	4623      	mov	r3, r4
 8000a24:	80fb      	strh	r3, [r7, #6]
 8000a26:	4603      	mov	r3, r0
 8000a28:	80bb      	strh	r3, [r7, #4]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	807b      	strh	r3, [r7, #2]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	803b      	strh	r3, [r7, #0]
    char string6D[8][6] = {"#USX,", "#UDX,", "#DSX,", "#DDX,", "#TOP,", "#BOT,", "#XXX,", "#FAL,"};
 8000a32:	4b74      	ldr	r3, [pc, #464]	; (8000c04 <protocolComplete+0x1f0>)
 8000a34:	461c      	mov	r4, r3
 8000a36:	f107 0648 	add.w	r6, r7, #72	; 0x48
 8000a3a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000a3e:	4635      	mov	r5, r6
 8000a40:	4623      	mov	r3, r4
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	6859      	ldr	r1, [r3, #4]
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a4c:	3410      	adds	r4, #16
 8000a4e:	3610      	adds	r6, #16
 8000a50:	4574      	cmp	r4, lr
 8000a52:	d1f4      	bne.n	8000a3e <protocolComplete+0x2a>
    char send[RXBUFFERSIZE];

    memset (&send, 0, sizeof (send));
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	2240      	movs	r2, #64	; 0x40
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 fc5b 	bl	8004318 <memset>

    if (statisticSend == 1)
 8000a62:	4b69      	ldr	r3, [pc, #420]	; (8000c08 <protocolComplete+0x1f4>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d131      	bne.n	8000ace <protocolComplete+0xba>
    {
        // send statistic package if requested
        if (snprintf(send, 31, "#STA,%10lu,%3d,%10lu$\n", packagesSent, errorcount, startup) < 0)
 8000a6a:	4b68      	ldr	r3, [pc, #416]	; (8000c0c <protocolComplete+0x1f8>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4b68      	ldr	r3, [pc, #416]	; (8000c10 <protocolComplete+0x1fc>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	4619      	mov	r1, r3
 8000a74:	4b67      	ldr	r3, [pc, #412]	; (8000c14 <protocolComplete+0x200>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f107 0008 	add.w	r0, r7, #8
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	9100      	str	r1, [sp, #0]
 8000a80:	4613      	mov	r3, r2
 8000a82:	4a65      	ldr	r2, [pc, #404]	; (8000c18 <protocolComplete+0x204>)
 8000a84:	211f      	movs	r1, #31
 8000a86:	f003 fcd1 	bl	800442c <snprintf>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	da06      	bge.n	8000a9e <protocolComplete+0x8a>
        {
            errorcount++;
 8000a90:	4b5f      	ldr	r3, [pc, #380]	; (8000c10 <protocolComplete+0x1fc>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b5d      	ldr	r3, [pc, #372]	; (8000c10 <protocolComplete+0x1fc>)
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	e013      	b.n	8000ac6 <protocolComplete+0xb2>
        else
        {
#if DEBUG
            printf("send %s", send);
#endif
            if (_uart_printf("%s", send) != 0)
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	485d      	ldr	r0, [pc, #372]	; (8000c1c <protocolComplete+0x208>)
 8000aa6:	f7ff fd57 	bl	8000558 <_uart_printf>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d005      	beq.n	8000abc <protocolComplete+0xa8>
            {
                errorcount++;
 8000ab0:	4b57      	ldr	r3, [pc, #348]	; (8000c10 <protocolComplete+0x1fc>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b55      	ldr	r3, [pc, #340]	; (8000c10 <protocolComplete+0x1fc>)
 8000aba:	701a      	strb	r2, [r3, #0]
            }
            packagesSent++;
 8000abc:	4b53      	ldr	r3, [pc, #332]	; (8000c0c <protocolComplete+0x1f8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	4a52      	ldr	r2, [pc, #328]	; (8000c0c <protocolComplete+0x1f8>)
 8000ac4:	6013      	str	r3, [r2, #0]
        }
        statisticSend = 0;
 8000ac6:	4b50      	ldr	r3, [pc, #320]	; (8000c08 <protocolComplete+0x1f4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
        return;
 8000acc:	e096      	b.n	8000bfc <protocolComplete+0x1e8>
    }
    else if (buttonSend == 1)
 8000ace:	4b54      	ldr	r3, [pc, #336]	; (8000c20 <protocolComplete+0x20c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d128      	bne.n	8000b28 <protocolComplete+0x114>
    {
        // send button 1 pressed
        if (snprintf(send, 7, "#BUT,1$\n") < 0)
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	4a52      	ldr	r2, [pc, #328]	; (8000c24 <protocolComplete+0x210>)
 8000adc:	2107      	movs	r1, #7
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f003 fca4 	bl	800442c <snprintf>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	da06      	bge.n	8000af8 <protocolComplete+0xe4>
        {
            errorcount++;
 8000aea:	4b49      	ldr	r3, [pc, #292]	; (8000c10 <protocolComplete+0x1fc>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b47      	ldr	r3, [pc, #284]	; (8000c10 <protocolComplete+0x1fc>)
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e013      	b.n	8000b20 <protocolComplete+0x10c>
        else
        {
#if DEBUG
            printf("send %s", send);
#endif
            if(_uart_printf("%s", send) != 0)
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	4619      	mov	r1, r3
 8000afe:	4847      	ldr	r0, [pc, #284]	; (8000c1c <protocolComplete+0x208>)
 8000b00:	f7ff fd2a 	bl	8000558 <_uart_printf>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d005      	beq.n	8000b16 <protocolComplete+0x102>
            {
                errorcount++;
 8000b0a:	4b41      	ldr	r3, [pc, #260]	; (8000c10 <protocolComplete+0x1fc>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4b3f      	ldr	r3, [pc, #252]	; (8000c10 <protocolComplete+0x1fc>)
 8000b14:	701a      	strb	r2, [r3, #0]
            }
            packagesSent++;
 8000b16:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <protocolComplete+0x1f8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	4a3b      	ldr	r2, [pc, #236]	; (8000c0c <protocolComplete+0x1f8>)
 8000b1e:	6013      	str	r3, [r2, #0]
        }
        buttonSend = 0;
 8000b20:	4b3f      	ldr	r3, [pc, #252]	; (8000c20 <protocolComplete+0x20c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
        return;
 8000b26:	e069      	b.n	8000bfc <protocolComplete+0x1e8>
    }
    else if (buttonSend == 2)
 8000b28:	4b3d      	ldr	r3, [pc, #244]	; (8000c20 <protocolComplete+0x20c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d128      	bne.n	8000b82 <protocolComplete+0x16e>
    {
        // send button 2 pressed
        if (snprintf(send, 7, "#BUT,2$\n") < 0)
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	4a3c      	ldr	r2, [pc, #240]	; (8000c28 <protocolComplete+0x214>)
 8000b36:	2107      	movs	r1, #7
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 fc77 	bl	800442c <snprintf>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	da06      	bge.n	8000b52 <protocolComplete+0x13e>
        {
            errorcount++;
 8000b44:	4b32      	ldr	r3, [pc, #200]	; (8000c10 <protocolComplete+0x1fc>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <protocolComplete+0x1fc>)
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e013      	b.n	8000b7a <protocolComplete+0x166>
        else
        {
#if DEBUG
            printf("send %s", send);
#endif
            if(_uart_printf("%s", send) != 0)
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	4619      	mov	r1, r3
 8000b58:	4830      	ldr	r0, [pc, #192]	; (8000c1c <protocolComplete+0x208>)
 8000b5a:	f7ff fcfd 	bl	8000558 <_uart_printf>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d005      	beq.n	8000b70 <protocolComplete+0x15c>
            {
                errorcount++;
 8000b64:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <protocolComplete+0x1fc>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <protocolComplete+0x1fc>)
 8000b6e:	701a      	strb	r2, [r3, #0]
            }
            packagesSent++;
 8000b70:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <protocolComplete+0x1f8>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	4a25      	ldr	r2, [pc, #148]	; (8000c0c <protocolComplete+0x1f8>)
 8000b78:	6013      	str	r3, [r2, #0]
        }
        buttonSend = 0;
 8000b7a:	4b29      	ldr	r3, [pc, #164]	; (8000c20 <protocolComplete+0x20c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
        return;
 8000b80:	e03c      	b.n	8000bfc <protocolComplete+0x1e8>
    }
    else
    {
        // send acceleration data
        if (snprintf(send, 29,"%s%7d%s%7d%s%7d$\n", string6D[position6D], positionX, ",", positionY, ",", positionZ) < 0)
 8000b82:	88fa      	ldrh	r2, [r7, #6]
 8000b84:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	18cc      	adds	r4, r1, r3
 8000b92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b96:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b9a:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000b9e:	f107 0008 	add.w	r0, r7, #8
 8000ba2:	9104      	str	r1, [sp, #16]
 8000ba4:	4921      	ldr	r1, [pc, #132]	; (8000c2c <protocolComplete+0x218>)
 8000ba6:	9103      	str	r1, [sp, #12]
 8000ba8:	9202      	str	r2, [sp, #8]
 8000baa:	4a20      	ldr	r2, [pc, #128]	; (8000c2c <protocolComplete+0x218>)
 8000bac:	9201      	str	r2, [sp, #4]
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	4623      	mov	r3, r4
 8000bb2:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <protocolComplete+0x21c>)
 8000bb4:	211d      	movs	r1, #29
 8000bb6:	f003 fc39 	bl	800442c <snprintf>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	da06      	bge.n	8000bce <protocolComplete+0x1ba>
        {
            errorcount++;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <protocolComplete+0x1fc>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <protocolComplete+0x1fc>)
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	e016      	b.n	8000bfc <protocolComplete+0x1e8>
        else
        {
#if DEBUG
            printf("send %s", send);
#endif
            if(_uart_printf("%s", send) != 0)
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4811      	ldr	r0, [pc, #68]	; (8000c1c <protocolComplete+0x208>)
 8000bd6:	f7ff fcbf 	bl	8000558 <_uart_printf>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d005      	beq.n	8000bec <protocolComplete+0x1d8>
            {
                errorcount++;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <protocolComplete+0x1fc>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <protocolComplete+0x1fc>)
 8000bea:	701a      	strb	r2, [r3, #0]
            }
            ledSetting(3);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f821 	bl	8000c34 <ledSetting>
            packagesSent++;
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <protocolComplete+0x1f8>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <protocolComplete+0x1f8>)
 8000bfa:	6013      	str	r3, [r2, #0]
        }
    }
}
 8000bfc:	377c      	adds	r7, #124	; 0x7c
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c02:	bf00      	nop
 8000c04:	08008f44 	.word	0x08008f44
 8000c08:	20000aa8 	.word	0x20000aa8
 8000c0c:	20000ac0 	.word	0x20000ac0
 8000c10:	20000aaa 	.word	0x20000aaa
 8000c14:	20000aac 	.word	0x20000aac
 8000c18:	08008ef8 	.word	0x08008ef8
 8000c1c:	08008f10 	.word	0x08008f10
 8000c20:	20000ad5 	.word	0x20000ad5
 8000c24:	08008f14 	.word	0x08008f14
 8000c28:	08008f20 	.word	0x08008f20
 8000c2c:	08008f40 	.word	0x08008f40
 8000c30:	08008f2c 	.word	0x08008f2c

08000c34 <ledSetting>:
 *			other for LED toggle <br>
 * @return	none
 *
 */
void ledSetting(uint8_t ledState)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
    ledSettingXMC(ledState);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fccb 	bl	80015dc <ledSettingXMC>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop

08000c50 <pwmAngleCalc>:
 *			raw Z acceleration value <br>
 * @return	none
 *
 */
void pwmAngleCalc(int16_t positionX, int16_t positionY, int16_t positionZ)
{
 8000c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c54:	b08d      	sub	sp, #52	; 0x34
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	80fb      	strh	r3, [r7, #6]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	80bb      	strh	r3, [r7, #4]
 8000c60:	4613      	mov	r3, r2
 8000c62:	807b      	strh	r3, [r7, #2]
    double roll, pitch;
    double gX = 0, gY = 0, gZ = 0;
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	f04f 0400 	mov.w	r4, #0
 8000c6c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	f04f 0400 	mov.w	r4, #0
 8000c78:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	f04f 0400 	mov.w	r4, #0
 8000c84:	e9c7 3402 	strd	r3, r4, [r7, #8]
    static double rollStored = 0.0;
    static double pitchStored = 0.0;

	// calculate acceleration values from raw values
    gX = positionX / GDIVIDER;
 8000c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 ff1d 	bl	8003acc <__aeabi_i2d>
 8000c92:	a3e7      	add	r3, pc, #924	; (adr r3, 8001030 <pwmAngleCalc+0x3e0>)
 8000c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c98:	f003 f8a8 	bl	8003dec <__aeabi_ddiv>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	e9c7 3406 	strd	r3, r4, [r7, #24]
    gY = positionY / GDIVIDER;
 8000ca4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 ff0f 	bl	8003acc <__aeabi_i2d>
 8000cae:	a3e0      	add	r3, pc, #896	; (adr r3, 8001030 <pwmAngleCalc+0x3e0>)
 8000cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb4:	f003 f89a 	bl	8003dec <__aeabi_ddiv>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	460c      	mov	r4, r1
 8000cbc:	e9c7 3404 	strd	r3, r4, [r7, #16]
    gZ = positionZ / GDIVIDER;
 8000cc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 ff01 	bl	8003acc <__aeabi_i2d>
 8000cca:	a3d9      	add	r3, pc, #868	; (adr r3, 8001030 <pwmAngleCalc+0x3e0>)
 8000ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd0:	f003 f88c 	bl	8003dec <__aeabi_ddiv>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	460c      	mov	r4, r1
 8000cd8:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// calculate angles for servos
    roll = atan(gY/(sqrt((gX*gX)+(gZ*gZ)))) * 180 / PI;
 8000cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ce0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ce4:	f002 ff58 	bl	8003b98 <__aeabi_dmul>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	460c      	mov	r4, r1
 8000cec:	469a      	mov	sl, r3
 8000cee:	46a3      	mov	fp, r4
 8000cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cf4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cf8:	f002 ff4e 	bl	8003b98 <__aeabi_dmul>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	460c      	mov	r4, r1
 8000d00:	461a      	mov	r2, r3
 8000d02:	4623      	mov	r3, r4
 8000d04:	4650      	mov	r0, sl
 8000d06:	4659      	mov	r1, fp
 8000d08:	f002 fd94 	bl	8003834 <__adddf3>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	460c      	mov	r4, r1
 8000d10:	4618      	mov	r0, r3
 8000d12:	4621      	mov	r1, r4
 8000d14:	f002 fc68 	bl	80035e8 <sqrt>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	460c      	mov	r4, r1
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4623      	mov	r3, r4
 8000d20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d24:	f003 f862 	bl	8003dec <__aeabi_ddiv>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	4621      	mov	r1, r4
 8000d30:	f002 fab6 	bl	80032a0 <atan>
 8000d34:	f04f 0200 	mov.w	r2, #0
 8000d38:	4bb1      	ldr	r3, [pc, #708]	; (8001000 <pwmAngleCalc+0x3b0>)
 8000d3a:	f002 ff2d 	bl	8003b98 <__aeabi_dmul>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	460c      	mov	r4, r1
 8000d42:	4618      	mov	r0, r3
 8000d44:	4621      	mov	r1, r4
 8000d46:	a3a8      	add	r3, pc, #672	; (adr r3, 8000fe8 <pwmAngleCalc+0x398>)
 8000d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4c:	f003 f84e 	bl	8003dec <__aeabi_ddiv>
 8000d50:	4603      	mov	r3, r0
 8000d52:	460c      	mov	r4, r1
 8000d54:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    pitch = atan(gX/(sqrt((gY*gY)+(gZ*gZ)))) * 180 / PI;
 8000d58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d60:	f002 ff1a 	bl	8003b98 <__aeabi_dmul>
 8000d64:	4603      	mov	r3, r0
 8000d66:	460c      	mov	r4, r1
 8000d68:	469a      	mov	sl, r3
 8000d6a:	46a3      	mov	fp, r4
 8000d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d74:	f002 ff10 	bl	8003b98 <__aeabi_dmul>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4623      	mov	r3, r4
 8000d80:	4650      	mov	r0, sl
 8000d82:	4659      	mov	r1, fp
 8000d84:	f002 fd56 	bl	8003834 <__adddf3>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	460c      	mov	r4, r1
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	4621      	mov	r1, r4
 8000d90:	f002 fc2a 	bl	80035e8 <sqrt>
 8000d94:	4603      	mov	r3, r0
 8000d96:	460c      	mov	r4, r1
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000da0:	f003 f824 	bl	8003dec <__aeabi_ddiv>
 8000da4:	4603      	mov	r3, r0
 8000da6:	460c      	mov	r4, r1
 8000da8:	4618      	mov	r0, r3
 8000daa:	4621      	mov	r1, r4
 8000dac:	f002 fa78 	bl	80032a0 <atan>
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	4b92      	ldr	r3, [pc, #584]	; (8001000 <pwmAngleCalc+0x3b0>)
 8000db6:	f002 feef 	bl	8003b98 <__aeabi_dmul>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460c      	mov	r4, r1
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	4621      	mov	r1, r4
 8000dc2:	a389      	add	r3, pc, #548	; (adr r3, 8000fe8 <pwmAngleCalc+0x398>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f003 f810 	bl	8003dec <__aeabi_ddiv>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	460c      	mov	r4, r1
 8000dd0:	e9c7 3408 	strd	r3, r4, [r7, #32]

	// angle correction as documented
    if (pitch >= 0.0)
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000de0:	f003 f960 	bl	80040a4 <__aeabi_dcmpge>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d012      	beq.n	8000e10 <pwmAngleCalc+0x1c0>
    {
        pitch += pitch * PITCHCORRECTPOS;
 8000dea:	a381      	add	r3, pc, #516	; (adr r3, 8000ff0 <pwmAngleCalc+0x3a0>)
 8000dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000df4:	f002 fed0 	bl	8003b98 <__aeabi_dmul>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4623      	mov	r3, r4
 8000e00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e04:	f002 fd16 	bl	8003834 <__adddf3>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	e9c7 3408 	strd	r3, r4, [r7, #32]
    }

	// angle thresholding
    if (startup == 0)
 8000e10:	4b7c      	ldr	r3, [pc, #496]	; (8001004 <pwmAngleCalc+0x3b4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10a      	bne.n	8000e2e <pwmAngleCalc+0x1de>
    {
        pitchStored = pitch;
 8000e18:	4a7b      	ldr	r2, [pc, #492]	; (8001008 <pwmAngleCalc+0x3b8>)
 8000e1a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000e1e:	e9c2 3400 	strd	r3, r4, [r2]
        rollStored = roll;
 8000e22:	4a7a      	ldr	r2, [pc, #488]	; (800100c <pwmAngleCalc+0x3bc>)
 8000e24:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000e28:	e9c2 3400 	strd	r3, r4, [r2]
 8000e2c:	e049      	b.n	8000ec2 <pwmAngleCalc+0x272>
    }
    else
    {
        if (averageChoice == 1)
 8000e2e:	4b78      	ldr	r3, [pc, #480]	; (8001010 <pwmAngleCalc+0x3c0>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d145      	bne.n	8000ec2 <pwmAngleCalc+0x272>
        {
            if (fabs(pitch - pitchStored) < ANGAVERAGE)
 8000e36:	4b74      	ldr	r3, [pc, #464]	; (8001008 <pwmAngleCalc+0x3b8>)
 8000e38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4623      	mov	r3, r4
 8000e40:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e44:	f002 fcf4 	bl	8003830 <__aeabi_dsub>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	460c      	mov	r4, r1
 8000e4c:	4698      	mov	r8, r3
 8000e4e:	f024 4900 	bic.w	r9, r4, #2147483648	; 0x80000000
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	4b6f      	ldr	r3, [pc, #444]	; (8001014 <pwmAngleCalc+0x3c4>)
 8000e58:	4640      	mov	r0, r8
 8000e5a:	4649      	mov	r1, r9
 8000e5c:	f003 f90e 	bl	800407c <__aeabi_dcmplt>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d005      	beq.n	8000e72 <pwmAngleCalc+0x222>
            {
                pitch = pitchStored;
 8000e66:	4b68      	ldr	r3, [pc, #416]	; (8001008 <pwmAngleCalc+0x3b8>)
 8000e68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e6c:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8000e70:	e004      	b.n	8000e7c <pwmAngleCalc+0x22c>
            }
            else
            {
                pitchStored = pitch;
 8000e72:	4a65      	ldr	r2, [pc, #404]	; (8001008 <pwmAngleCalc+0x3b8>)
 8000e74:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000e78:	e9c2 3400 	strd	r3, r4, [r2]
            }

            if (fabs(roll - rollStored) < ANGAVERAGE)
 8000e7c:	4b63      	ldr	r3, [pc, #396]	; (800100c <pwmAngleCalc+0x3bc>)
 8000e7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e82:	461a      	mov	r2, r3
 8000e84:	4623      	mov	r3, r4
 8000e86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000e8a:	f002 fcd1 	bl	8003830 <__aeabi_dsub>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	460c      	mov	r4, r1
 8000e92:	461d      	mov	r5, r3
 8000e94:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	4b5d      	ldr	r3, [pc, #372]	; (8001014 <pwmAngleCalc+0x3c4>)
 8000e9e:	4628      	mov	r0, r5
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	f003 f8eb 	bl	800407c <__aeabi_dcmplt>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d005      	beq.n	8000eb8 <pwmAngleCalc+0x268>
            {
                roll = rollStored;
 8000eac:	4b57      	ldr	r3, [pc, #348]	; (800100c <pwmAngleCalc+0x3bc>)
 8000eae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000eb2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8000eb6:	e004      	b.n	8000ec2 <pwmAngleCalc+0x272>
            }
            else
            {
                pitchStored = pitch;
 8000eb8:	4a53      	ldr	r2, [pc, #332]	; (8001008 <pwmAngleCalc+0x3b8>)
 8000eba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000ebe:	e9c2 3400 	strd	r3, r4, [r2]
            }
        }
    }

    startup++;
 8000ec2:	4b50      	ldr	r3, [pc, #320]	; (8001004 <pwmAngleCalc+0x3b4>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	4a4e      	ldr	r2, [pc, #312]	; (8001004 <pwmAngleCalc+0x3b4>)
 8000eca:	6013      	str	r3, [r2, #0]

	// final signal values 

    signal1 = (90.00+roll) * SERVOUOLINEAR + SERUPLO0;
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	4b51      	ldr	r3, [pc, #324]	; (8001018 <pwmAngleCalc+0x3c8>)
 8000ed2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000ed6:	f002 fcad 	bl	8003834 <__adddf3>
 8000eda:	4603      	mov	r3, r0
 8000edc:	460c      	mov	r4, r1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	4621      	mov	r1, r4
 8000ee2:	a345      	add	r3, pc, #276	; (adr r3, 8000ff8 <pwmAngleCalc+0x3a8>)
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f002 fe56 	bl	8003b98 <__aeabi_dmul>
 8000eec:	4603      	mov	r3, r0
 8000eee:	460c      	mov	r4, r1
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	4b48      	ldr	r3, [pc, #288]	; (800101c <pwmAngleCalc+0x3cc>)
 8000efa:	f002 fc9b 	bl	8003834 <__adddf3>
 8000efe:	4603      	mov	r3, r0
 8000f00:	460c      	mov	r4, r1
 8000f02:	4a47      	ldr	r2, [pc, #284]	; (8001020 <pwmAngleCalc+0x3d0>)
 8000f04:	e9c2 3400 	strd	r3, r4, [r2]
    signal2 = (90.00+pitch) * SERVOLOLINEAR + SERVOLO0;
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	4b42      	ldr	r3, [pc, #264]	; (8001018 <pwmAngleCalc+0x3c8>)
 8000f0e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f12:	f002 fc8f 	bl	8003834 <__adddf3>
 8000f16:	4603      	mov	r3, r0
 8000f18:	460c      	mov	r4, r1
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	a336      	add	r3, pc, #216	; (adr r3, 8000ff8 <pwmAngleCalc+0x3a8>)
 8000f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f24:	f002 fe38 	bl	8003b98 <__aeabi_dmul>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	460c      	mov	r4, r1
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	4621      	mov	r1, r4
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	4b39      	ldr	r3, [pc, #228]	; (800101c <pwmAngleCalc+0x3cc>)
 8000f36:	f002 fc7d 	bl	8003834 <__adddf3>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	460c      	mov	r4, r1
 8000f3e:	4a39      	ldr	r2, [pc, #228]	; (8001024 <pwmAngleCalc+0x3d4>)
 8000f40:	e9c2 3400 	strd	r3, r4, [r2]

    signal1 = (int)(signal1 * RNDFACTOR + 0.5) / RNDFACTOR;
 8000f44:	4b36      	ldr	r3, [pc, #216]	; (8001020 <pwmAngleCalc+0x3d0>)
 8000f46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	4b36      	ldr	r3, [pc, #216]	; (8001028 <pwmAngleCalc+0x3d8>)
 8000f50:	f002 fe22 	bl	8003b98 <__aeabi_dmul>
 8000f54:	4603      	mov	r3, r0
 8000f56:	460c      	mov	r4, r1
 8000f58:	4618      	mov	r0, r3
 8000f5a:	4621      	mov	r1, r4
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	4b32      	ldr	r3, [pc, #200]	; (800102c <pwmAngleCalc+0x3dc>)
 8000f62:	f002 fc67 	bl	8003834 <__adddf3>
 8000f66:	4603      	mov	r3, r0
 8000f68:	460c      	mov	r4, r1
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	f003 f8c3 	bl	80040f8 <__aeabi_d2iz>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 fda9 	bl	8003acc <__aeabi_i2d>
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <pwmAngleCalc+0x3d8>)
 8000f80:	f002 ff34 	bl	8003dec <__aeabi_ddiv>
 8000f84:	4603      	mov	r3, r0
 8000f86:	460c      	mov	r4, r1
 8000f88:	4a25      	ldr	r2, [pc, #148]	; (8001020 <pwmAngleCalc+0x3d0>)
 8000f8a:	e9c2 3400 	strd	r3, r4, [r2]
    signal2 = (int)(signal2 * RNDFACTOR + 0.5) / RNDFACTOR;
 8000f8e:	4b25      	ldr	r3, [pc, #148]	; (8001024 <pwmAngleCalc+0x3d4>)
 8000f90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f94:	f04f 0200 	mov.w	r2, #0
 8000f98:	4b23      	ldr	r3, [pc, #140]	; (8001028 <pwmAngleCalc+0x3d8>)
 8000f9a:	f002 fdfd 	bl	8003b98 <__aeabi_dmul>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460c      	mov	r4, r1
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	4621      	mov	r1, r4
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	4b20      	ldr	r3, [pc, #128]	; (800102c <pwmAngleCalc+0x3dc>)
 8000fac:	f002 fc42 	bl	8003834 <__adddf3>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	460c      	mov	r4, r1
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	4621      	mov	r1, r4
 8000fb8:	f003 f89e 	bl	80040f8 <__aeabi_d2iz>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 fd84 	bl	8003acc <__aeabi_i2d>
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <pwmAngleCalc+0x3d8>)
 8000fca:	f002 ff0f 	bl	8003dec <__aeabi_ddiv>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460c      	mov	r4, r1
 8000fd2:	4a14      	ldr	r2, [pc, #80]	; (8001024 <pwmAngleCalc+0x3d4>)
 8000fd4:	e9c2 3400 	strd	r3, r4, [r2]
}
 8000fd8:	bf00      	nop
 8000fda:	3734      	adds	r7, #52	; 0x34
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fe2:	bf00      	nop
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	54524550 	.word	0x54524550
 8000fec:	400921fb 	.word	0x400921fb
 8000ff0:	a14cec42 	.word	0xa14cec42
 8000ff4:	3fab1af3 	.word	0x3fab1af3
 8000ff8:	9999999a 	.word	0x9999999a
 8000ffc:	3fa99999 	.word	0x3fa99999
 8001000:	40668000 	.word	0x40668000
 8001004:	20000aac 	.word	0x20000aac
 8001008:	20000a58 	.word	0x20000a58
 800100c:	20000a60 	.word	0x20000a60
 8001010:	20000ad6 	.word	0x20000ad6
 8001014:	400c0000 	.word	0x400c0000
 8001018:	40568000 	.word	0x40568000
 800101c:	40080000 	.word	0x40080000
 8001020:	20000ae0 	.word	0x20000ae0
 8001024:	20000ac8 	.word	0x20000ac8
 8001028:	40590000 	.word	0x40590000
 800102c:	3fe00000 	.word	0x3fe00000
 8001030:	00000000 	.word	0x00000000
 8001034:	40bffe00 	.word	0x40bffe00

08001038 <readButtonDebounce>:
 * @param	none
 * @return	none
 *
 */
void readButtonDebounce()
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
    readButtonDebounceXMC();
 800103c:	f000 fa64 	bl	8001508 <readButtonDebounceXMC>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <inputInit>:
 * @param	none
 * @return	none
 *
 */
void inputInit()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
    inputInitXMC();
 8001048:	f000 fae8 	bl	800161c <inputInitXMC>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <circularAdd>:
 * @brief  	add element to circular buffer
 * @param  	8 bit value for buffer
 * @return 	1 if OK, 0 if KO
 */
uint8_t circularAdd (uint8_t item)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
    if (full)
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <circularAdd+0x6c>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <circularAdd+0x16>
    {
        return 0;
 8001062:	2300      	movs	r3, #0
 8001064:	e023      	b.n	80010ae <circularAdd+0x5e>
    }
    inix = (inix + 1) % CBSIZE;
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <circularAdd+0x70>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <circularAdd+0x74>)
 800106e:	fb83 1302 	smull	r1, r3, r3, r2
 8001072:	1099      	asrs	r1, r3, #2
 8001074:	17d3      	asrs	r3, r2, #31
 8001076:	1ac9      	subs	r1, r1, r3
 8001078:	460b      	mov	r3, r1
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	1ad1      	subs	r1, r2, r3
 8001082:	b2ca      	uxtb	r2, r1
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <circularAdd+0x70>)
 8001086:	701a      	strb	r2, [r3, #0]
    cb[inix] = item;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <circularAdd+0x70>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <circularAdd+0x78>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	5453      	strb	r3, [r2, r1]
    if (inix == outix)
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <circularAdd+0x70>)
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <circularAdd+0x7c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d102      	bne.n	80010a6 <circularAdd+0x56>
    {
        full = 1;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <circularAdd+0x6c>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
    }
    empty = 0;
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <circularAdd+0x80>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
    return 1;
 80010ac:	2301      	movs	r3, #1
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000ab0 	.word	0x20000ab0
 80010c0:	20000ad2 	.word	0x20000ad2
 80010c4:	66666667 	.word	0x66666667
 80010c8:	20000ab4 	.word	0x20000ab4
 80010cc:	20000aa9 	.word	0x20000aa9
 80010d0:	20000ae8 	.word	0x20000ae8

080010d4 <circularGet>:
 * @brief 	read element from circular buffer
 * @param 	pointer to the 8-bit value
 * @return 	1 if OK, 0 if KO
 */
uint8_t circularGet (uint8_t *pItem)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    if (empty)
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <circularGet+0x6c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <circularGet+0x14>
    {
        return 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	e024      	b.n	8001132 <circularGet+0x5e>
    }
    outix = (outix + 1) % CBSIZE;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <circularGet+0x70>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <circularGet+0x74>)
 80010f0:	fb83 1302 	smull	r1, r3, r3, r2
 80010f4:	1099      	asrs	r1, r3, #2
 80010f6:	17d3      	asrs	r3, r2, #31
 80010f8:	1ac9      	subs	r1, r1, r3
 80010fa:	460b      	mov	r3, r1
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	1ad1      	subs	r1, r2, r3
 8001104:	b2ca      	uxtb	r2, r1
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <circularGet+0x70>)
 8001108:	701a      	strb	r2, [r3, #0]
    *pItem = cb[outix];
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <circularGet+0x70>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <circularGet+0x78>)
 8001112:	5c9a      	ldrb	r2, [r3, r2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	701a      	strb	r2, [r3, #0]
    if (outix == inix)
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <circularGet+0x70>)
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <circularGet+0x7c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d102      	bne.n	800112a <circularGet+0x56>
    {
        empty = 1;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <circularGet+0x6c>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
    }
    full = 0;
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <circularGet+0x80>)
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
    return 1;
 8001130:	2301      	movs	r3, #1
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000ae8 	.word	0x20000ae8
 8001144:	20000aa9 	.word	0x20000aa9
 8001148:	66666667 	.word	0x66666667
 800114c:	20000ab4 	.word	0x20000ab4
 8001150:	20000ad2 	.word	0x20000ad2
 8001154:	20000ab0 	.word	0x20000ab0

08001158 <P1_1_set_mode>:

__STATIC_INLINE uint32_t P1_0_read(void){
    return(PORT1->IN & 0x00000001UL);
}

__STATIC_INLINE void P1_1_set_mode(uint8_t mode){
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
    PORT1->IOCR0 &= ~0x0000f800UL;
 8001162:	4a09      	ldr	r2, [pc, #36]	; (8001188 <P1_1_set_mode+0x30>)
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <P1_1_set_mode+0x30>)
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 800116c:	6113      	str	r3, [r2, #16]
    PORT1->IOCR0 |= mode << 8;
 800116e:	4906      	ldr	r1, [pc, #24]	; (8001188 <P1_1_set_mode+0x30>)
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <P1_1_set_mode+0x30>)
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	79fa      	ldrb	r2, [r7, #7]
 8001176:	0212      	lsls	r2, r2, #8
 8001178:	4313      	orrs	r3, r2
 800117a:	610b      	str	r3, [r1, #16]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	48028100 	.word	0x48028100

0800118c <P1_1_set_driver_strength>:

__STATIC_INLINE void P1_1_set_driver_strength(uint8_t strength){
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
    PORT1->PDR0 &= ~0x00000070UL;
 8001196:	4a09      	ldr	r2, [pc, #36]	; (80011bc <P1_1_set_driver_strength+0x30>)
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <P1_1_set_driver_strength+0x30>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
    PORT1->PDR0 |= strength << 4;
 80011a2:	4906      	ldr	r1, [pc, #24]	; (80011bc <P1_1_set_driver_strength+0x30>)
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <P1_1_set_driver_strength+0x30>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	79fa      	ldrb	r2, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	4313      	orrs	r3, r2
 80011ae:	640b      	str	r3, [r1, #64]	; 0x40
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	48028100 	.word	0x48028100

080011c0 <P1_1_reset>:

__STATIC_INLINE void P1_1_set(void){
    PORT1->OMR = 0x00000002UL;
}

__STATIC_INLINE void P1_1_reset(void){
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
    PORT1->OMR = 0x00020000UL;
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <P1_1_reset+0x18>)
 80011c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011ca:	605a      	str	r2, [r3, #4]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	48028100 	.word	0x48028100

080011dc <P1_2_set_mode>:

__STATIC_INLINE uint32_t P1_1_read(void){
    return(PORT1->IN & 0x00000002UL);
}

__STATIC_INLINE void P1_2_set_mode(uint8_t mode){
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
    PORT1->IOCR0 &= ~0x00f80000UL;
 80011e6:	4a09      	ldr	r2, [pc, #36]	; (800120c <P1_2_set_mode+0x30>)
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <P1_2_set_mode+0x30>)
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	f423 0378 	bic.w	r3, r3, #16252928	; 0xf80000
 80011f0:	6113      	str	r3, [r2, #16]
    PORT1->IOCR0 |= mode << 16;
 80011f2:	4906      	ldr	r1, [pc, #24]	; (800120c <P1_2_set_mode+0x30>)
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <P1_2_set_mode+0x30>)
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	79fa      	ldrb	r2, [r7, #7]
 80011fa:	0412      	lsls	r2, r2, #16
 80011fc:	4313      	orrs	r3, r2
 80011fe:	610b      	str	r3, [r1, #16]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	48028100 	.word	0x48028100

08001210 <P1_2_set_driver_strength>:

__STATIC_INLINE void P1_2_set_driver_strength(uint8_t strength){
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
    PORT1->PDR0 &= ~0x00000700UL;
 800121a:	4a09      	ldr	r2, [pc, #36]	; (8001240 <P1_2_set_driver_strength+0x30>)
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <P1_2_set_driver_strength+0x30>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
    PORT1->PDR0 |= strength << 8;
 8001226:	4906      	ldr	r1, [pc, #24]	; (8001240 <P1_2_set_driver_strength+0x30>)
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <P1_2_set_driver_strength+0x30>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	79fa      	ldrb	r2, [r7, #7]
 800122e:	0212      	lsls	r2, r2, #8
 8001230:	4313      	orrs	r3, r2
 8001232:	640b      	str	r3, [r1, #64]	; 0x40
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	48028100 	.word	0x48028100

08001244 <P1_2_reset>:

__STATIC_INLINE void P1_2_set(void){
    PORT1->OMR = 0x00000004UL;
}

__STATIC_INLINE void P1_2_reset(void){
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
    PORT1->OMR = 0x00040000UL;
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <P1_2_reset+0x18>)
 800124a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800124e:	605a      	str	r2, [r3, #4]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	48028100 	.word	0x48028100

08001260 <initServoPWMXMC>:
 * @param	none
 * @return	none
 *
 */
void initServoPWMXMC()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    // onboard alternate function 3 at CCU40 slice 1 = CCU40.OUT1 = CCU40.CC41
    // onboard alternate function 3 at CCU40 slice 2 = CCU40.OUT2 = CCU40.CC42

    P1_1_set_mode(OUTPUT_PP_AF3);
 8001264:	2098      	movs	r0, #152	; 0x98
 8001266:	f7ff ff77 	bl	8001158 <P1_1_set_mode>
    P1_1_set_driver_strength(STRONG);
 800126a:	2002      	movs	r0, #2
 800126c:	f7ff ff8e 	bl	800118c <P1_1_set_driver_strength>
    P1_1_reset();
 8001270:	f7ff ffa6 	bl	80011c0 <P1_1_reset>

    P1_2_set_mode(OUTPUT_PP_AF3);
 8001274:	2098      	movs	r0, #152	; 0x98
 8001276:	f7ff ffb1 	bl	80011dc <P1_2_set_mode>
    P1_2_set_driver_strength(STRONG);
 800127a:	2002      	movs	r0, #2
 800127c:	f7ff ffc8 	bl	8001210 <P1_2_set_driver_strength>
    P1_2_reset();
 8001280:	f7ff ffe0 	bl	8001244 <P1_2_reset>

    // setup CC40 unit with shadow transfer

    SCU_RESET->PRSET0 |= (1 << SCU_RESET_PRSET0_CCU40RS_Pos);		// peripheral 0 reset set - CCU40RS - CCU40 timer
 8001284:	4a2e      	ldr	r2, [pc, #184]	; (8001340 <initServoPWMXMC+0xe0>)
 8001286:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <initServoPWMXMC+0xe0>)
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	6113      	str	r3, [r2, #16]
    SCU_RESET->PRCLR0 |= (1 << SCU_RESET_PRCLR0_CCU40RS_Pos);		// peripheral 0 reset clear - CCU40RS - CCU40 timer
 8001290:	4a2b      	ldr	r2, [pc, #172]	; (8001340 <initServoPWMXMC+0xe0>)
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <initServoPWMXMC+0xe0>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6153      	str	r3, [r2, #20]
    SCU_CLK->CLKSET = (1 << SCU_CLK_CLKSET_CCUCEN_Pos); 			// clock enable register CCUCEN - CCU clock enabled
 800129c:	4b29      	ldr	r3, [pc, #164]	; (8001344 <initServoPWMXMC+0xe4>)
 800129e:	2210      	movs	r2, #16
 80012a0:	605a      	str	r2, [r3, #4]
    CCU40->GIDLC |= (1 << CCU4_GIDLC_SPRB_Pos); 					// global idle clear - SPRB - prescaler run bit set
 80012a2:	4a29      	ldr	r2, [pc, #164]	; (8001348 <initServoPWMXMC+0xe8>)
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <initServoPWMXMC+0xe8>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ac:	60d3      	str	r3, [r2, #12]

    CCU40_CC41->PSC = PRESCALER;
 80012ae:	4b27      	ldr	r3, [pc, #156]	; (800134c <initServoPWMXMC+0xec>)
 80012b0:	2208      	movs	r2, #8
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24
    CCU40_CC42->PSC = PRESCALER; 									// prescaler control - 0 - CCU40.OUT2
 80012b4:	4b26      	ldr	r3, [pc, #152]	; (8001350 <initServoPWMXMC+0xf0>)
 80012b6:	2208      	movs	r2, #8
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24

    CCU40_CC41->TC |= (1 << CCU4_CC4_TC_CLST_Pos);
 80012ba:	4a24      	ldr	r2, [pc, #144]	; (800134c <initServoPWMXMC+0xec>)
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <initServoPWMXMC+0xec>)
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6153      	str	r3, [r2, #20]
    CCU40_CC42->TC |= (1 << CCU4_CC4_TC_CLST_Pos); 					// slice timer control - CLST - shadow transfer on clear - CCU40.OUT2
 80012c6:	4a22      	ldr	r2, [pc, #136]	; (8001350 <initServoPWMXMC+0xf0>)
 80012c8:	4b21      	ldr	r3, [pc, #132]	; (8001350 <initServoPWMXMC+0xf0>)
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6153      	str	r3, [r2, #20]

    CCU40->GIDLC |= (1 << CCU4_GIDLC_CS1I_Pos);
 80012d2:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <initServoPWMXMC+0xe8>)
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <initServoPWMXMC+0xe8>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	60d3      	str	r3, [r2, #12]
    CCU40->GIDLC |= (1 << CCU4_GIDLC_CS2I_Pos); 					// global idle clear - C2SI - CC43 idle mode clear - CCU40.OUT2
 80012de:	4a1a      	ldr	r2, [pc, #104]	; (8001348 <initServoPWMXMC+0xe8>)
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <initServoPWMXMC+0xe8>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	60d3      	str	r3, [r2, #12]

    SCU_GENERAL->CCUCON |= (1 << SCU_GENERAL_CCUCON_GSC40_Pos);		// CCU control register - GSC40 - global start control CCU40
 80012ea:	4a1a      	ldr	r2, [pc, #104]	; (8001354 <initServoPWMXMC+0xf4>)
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <initServoPWMXMC+0xf4>)
 80012ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c

    CCU40_CC41->PRS = COUNTER;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <initServoPWMXMC+0xec>)
 80012f8:	f242 429f 	movw	r2, #9375	; 0x249f
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34
    CCU40_CC42->PRS = COUNTER; 										// period register - timer shadow period value - CCU40.OUT2
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <initServoPWMXMC+0xf0>)
 8001300:	f242 429f 	movw	r2, #9375	; 0x249f
 8001304:	635a      	str	r2, [r3, #52]	; 0x34

    CCU40_CC41->TCSET = 1;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <initServoPWMXMC+0xec>)
 8001308:	2201      	movs	r2, #1
 800130a:	60da      	str	r2, [r3, #12]
    CCU40_CC42->TCSET = 1;											// slice timer run set - CCU40.OUT2
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <initServoPWMXMC+0xf0>)
 800130e:	2201      	movs	r2, #1
 8001310:	60da      	str	r2, [r3, #12]

    CCU40_CC41->CRS = COUNTER;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <initServoPWMXMC+0xec>)
 8001314:	f242 429f 	movw	r2, #9375	; 0x249f
 8001318:	63da      	str	r2, [r3, #60]	; 0x3c
    CCU40_CC42->CRS = COUNTER;										// compare register - timer shadow compare value - CCU40.OUT2
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <initServoPWMXMC+0xf0>)
 800131c:	f242 429f 	movw	r2, #9375	; 0x249f
 8001320:	63da      	str	r2, [r3, #60]	; 0x3c

    CCU40->GCSS |= (1 << CCU4_GCSS_S1SE_Pos);
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <initServoPWMXMC+0xe8>)
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <initServoPWMXMC+0xe8>)
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	f043 0310 	orr.w	r3, r3, #16
 800132c:	6113      	str	r3, [r2, #16]
    CCU40->GCSS |= (1 << CCU4_GCSS_S2SE_Pos); 						// global channel set - S3SE slice 2 shadow transfer set enable
 800132e:	4a06      	ldr	r2, [pc, #24]	; (8001348 <initServoPWMXMC+0xe8>)
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <initServoPWMXMC+0xe8>)
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001338:	6113      	str	r3, [r2, #16]
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	50004400 	.word	0x50004400
 8001344:	50004600 	.word	0x50004600
 8001348:	4000c000 	.word	0x4000c000
 800134c:	4000c200 	.word	0x4000c200
 8001350:	4000c300 	.word	0x4000c300
 8001354:	50004000 	.word	0x50004000

08001358 <pwmXMC>:
 * @return	1 if wrong PWM dutycycle given <br>
			0 if correct PWM dutycycle given <br>
 *
 */
uint8_t pwmXMC(double dutycycle, uint8_t out)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001362:	4613      	mov	r3, r2
 8001364:	71fb      	strb	r3, [r7, #7]
    double dcCalc = 0;
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	f04f 0400 	mov.w	r4, #0
 800136e:	e9c7 3406 	strd	r3, r4, [r7, #24]
    uint32_t intdcCalc = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]

	// calculate and set PWM dutycycle

    if (dutycycle < 0 || dutycycle > 100)
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001382:	f002 fe7b 	bl	800407c <__aeabi_dcmplt>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d109      	bne.n	80013a0 <pwmXMC+0x48>
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4b29      	ldr	r3, [pc, #164]	; (8001438 <pwmXMC+0xe0>)
 8001392:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001396:	f002 fe8f 	bl	80040b8 <__aeabi_dcmpgt>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <pwmXMC+0x4c>
    {
        return 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e03a      	b.n	800141a <pwmXMC+0xc2>
    }

    dcCalc = COUNTER - (COUNTER * dutycycle * 0.01);
 80013a4:	a320      	add	r3, pc, #128	; (adr r3, 8001428 <pwmXMC+0xd0>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ae:	f002 fbf3 	bl	8003b98 <__aeabi_dmul>
 80013b2:	4603      	mov	r3, r0
 80013b4:	460c      	mov	r4, r1
 80013b6:	4618      	mov	r0, r3
 80013b8:	4621      	mov	r1, r4
 80013ba:	a31d      	add	r3, pc, #116	; (adr r3, 8001430 <pwmXMC+0xd8>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f002 fbea 	bl	8003b98 <__aeabi_dmul>
 80013c4:	4603      	mov	r3, r0
 80013c6:	460c      	mov	r4, r1
 80013c8:	461a      	mov	r2, r3
 80013ca:	4623      	mov	r3, r4
 80013cc:	a116      	add	r1, pc, #88	; (adr r1, 8001428 <pwmXMC+0xd0>)
 80013ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013d2:	f002 fa2d 	bl	8003830 <__aeabi_dsub>
 80013d6:	4603      	mov	r3, r0
 80013d8:	460c      	mov	r4, r1
 80013da:	e9c7 3406 	strd	r3, r4, [r7, #24]
    intdcCalc = (uint32_t)dcCalc;
 80013de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013e2:	f002 feb1 	bl	8004148 <__aeabi_d2uiz>
 80013e6:	4603      	mov	r3, r0
 80013e8:	617b      	str	r3, [r7, #20]

    if (out == 0)
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10a      	bne.n	8001406 <pwmXMC+0xae>
    {
        CCU40_CC42->CRS = intdcCalc;									// compare register - timer shadow compare value - CCU40.OUT2
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <pwmXMC+0xe4>)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	63d3      	str	r3, [r2, #60]	; 0x3c
        CCU40->GCSS |= (1<<CCU4_GCSS_S2SE_Pos); 						// global channel set - S2SE slice 2 shadow transfer set enable
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <pwmXMC+0xe8>)
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <pwmXMC+0xe8>)
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6113      	str	r3, [r2, #16]
        return 0;
 8001402:	2300      	movs	r3, #0
 8001404:	e009      	b.n	800141a <pwmXMC+0xc2>
    }
    else
    {
        CCU40_CC41->CRS = intdcCalc;									// compare register - timer shadow compare value - CCU40.OUT1
 8001406:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <pwmXMC+0xec>)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	63d3      	str	r3, [r2, #60]	; 0x3c
        CCU40->GCSS |= (1<<CCU4_GCSS_S1SE_Pos);							// global channel set - S1SE slice 1 shadow transfer set enable
 800140c:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <pwmXMC+0xe8>)
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <pwmXMC+0xe8>)
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	f043 0310 	orr.w	r3, r3, #16
 8001416:	6113      	str	r3, [r2, #16]
        return 0;
 8001418:	2300      	movs	r3, #0
    }
}
 800141a:	4618      	mov	r0, r3
 800141c:	3724      	adds	r7, #36	; 0x24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd90      	pop	{r4, r7, pc}
 8001422:	bf00      	nop
 8001424:	f3af 8000 	nop.w
 8001428:	00000000 	.word	0x00000000
 800142c:	40c24f80 	.word	0x40c24f80
 8001430:	47ae147b 	.word	0x47ae147b
 8001434:	3f847ae1 	.word	0x3f847ae1
 8001438:	40590000 	.word	0x40590000
 800143c:	4000c300 	.word	0x4000c300
 8001440:	4000c000 	.word	0x4000c000
 8001444:	4000c200 	.word	0x4000c200

08001448 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	2201      	movs	r2, #1
 8001458:	409a      	lsls	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	605a      	str	r2, [r3, #4]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop

0800146c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800147e:	409a      	lsls	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	605a      	str	r2, [r3, #4]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80014a2:	409a      	lsls	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	605a      	str	r2, [r3, #4]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	f003 0301 	and.w	r3, r3, #1
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop

080014dc <outputInitXMC>:
 * @param	none
 * @return	none
 *
 */
void outputInitXMC(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
	// config LED output

    XMC_GPIO_CONFIG_t config_out;
    config_out.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	713b      	strb	r3, [r7, #4]
    config_out.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 80014e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ea:	60bb      	str	r3, [r7, #8]
    config_out.output_strength = XMC_GPIO_OUTPUT_STRENGTH_WEAK;
 80014ec:	2307      	movs	r3, #7
 80014ee:	733b      	strb	r3, [r7, #12]
    XMC_GPIO_Init(LED1, &config_out);
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	461a      	mov	r2, r3
 80014f4:	2100      	movs	r1, #0
 80014f6:	4803      	ldr	r0, [pc, #12]	; (8001504 <outputInitXMC+0x28>)
 80014f8:	f001 fa4c 	bl	8002994 <XMC_GPIO_Init>
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	48028100 	.word	0x48028100

08001508 <readButtonDebounceXMC>:
 * @param	none
 * @return	none
 *
 */
void readButtonDebounceXMC()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	// read both onboard buttons with debounce

    if ((XMC_GPIO_GetInput(BUTTON1) == 0) && (button1pressed == 0))
 800150c:	210e      	movs	r1, #14
 800150e:	4830      	ldr	r0, [pc, #192]	; (80015d0 <readButtonDebounceXMC+0xc8>)
 8001510:	f7ff ffd0 	bl	80014b4 <XMC_GPIO_GetInput>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d106      	bne.n	8001528 <readButtonDebounceXMC+0x20>
 800151a:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <readButtonDebounceXMC+0xcc>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d102      	bne.n	8001528 <readButtonDebounceXMC+0x20>
    {
        button1pressed = 1;
 8001522:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <readButtonDebounceXMC+0xcc>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON1) == 0) && (button1pressed == 1))
 8001528:	210e      	movs	r1, #14
 800152a:	4829      	ldr	r0, [pc, #164]	; (80015d0 <readButtonDebounceXMC+0xc8>)
 800152c:	f7ff ffc2 	bl	80014b4 <XMC_GPIO_GetInput>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d106      	bne.n	8001544 <readButtonDebounceXMC+0x3c>
 8001536:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <readButtonDebounceXMC+0xcc>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d102      	bne.n	8001544 <readButtonDebounceXMC+0x3c>
    {
        button1pressed = 2;
 800153e:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <readButtonDebounceXMC+0xcc>)
 8001540:	2202      	movs	r2, #2
 8001542:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON1) == 1) && (button1pressed == 2))
 8001544:	210e      	movs	r1, #14
 8001546:	4822      	ldr	r0, [pc, #136]	; (80015d0 <readButtonDebounceXMC+0xc8>)
 8001548:	f7ff ffb4 	bl	80014b4 <XMC_GPIO_GetInput>
 800154c:	4603      	mov	r3, r0
 800154e:	2b01      	cmp	r3, #1
 8001550:	d10c      	bne.n	800156c <readButtonDebounceXMC+0x64>
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <readButtonDebounceXMC+0xcc>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d108      	bne.n	800156c <readButtonDebounceXMC+0x64>
    {
        if (circularAdd(BUTTON1INT) == 1)
 800155a:	200e      	movs	r0, #14
 800155c:	f7ff fd78 	bl	8001050 <circularAdd>
 8001560:	4603      	mov	r3, r0
 8001562:	2b01      	cmp	r3, #1
 8001564:	d102      	bne.n	800156c <readButtonDebounceXMC+0x64>
        {
            button1pressed = 0;
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <readButtonDebounceXMC+0xcc>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
        }
    }

    if ((XMC_GPIO_GetInput(BUTTON2) == 0) && (button2pressed == 0))
 800156c:	210f      	movs	r1, #15
 800156e:	4818      	ldr	r0, [pc, #96]	; (80015d0 <readButtonDebounceXMC+0xc8>)
 8001570:	f7ff ffa0 	bl	80014b4 <XMC_GPIO_GetInput>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <readButtonDebounceXMC+0x80>
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <readButtonDebounceXMC+0xd0>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <readButtonDebounceXMC+0x80>
    {
        button2pressed = 1;
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <readButtonDebounceXMC+0xd0>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON2) == 0) && (button2pressed == 1))
 8001588:	210f      	movs	r1, #15
 800158a:	4811      	ldr	r0, [pc, #68]	; (80015d0 <readButtonDebounceXMC+0xc8>)
 800158c:	f7ff ff92 	bl	80014b4 <XMC_GPIO_GetInput>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d106      	bne.n	80015a4 <readButtonDebounceXMC+0x9c>
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <readButtonDebounceXMC+0xd0>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d102      	bne.n	80015a4 <readButtonDebounceXMC+0x9c>
    {
        button2pressed = 2;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <readButtonDebounceXMC+0xd0>)
 80015a0:	2202      	movs	r2, #2
 80015a2:	701a      	strb	r2, [r3, #0]
    }
    if ((XMC_GPIO_GetInput(BUTTON2) == 1) && (button2pressed == 2))
 80015a4:	210f      	movs	r1, #15
 80015a6:	480a      	ldr	r0, [pc, #40]	; (80015d0 <readButtonDebounceXMC+0xc8>)
 80015a8:	f7ff ff84 	bl	80014b4 <XMC_GPIO_GetInput>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d10c      	bne.n	80015cc <readButtonDebounceXMC+0xc4>
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <readButtonDebounceXMC+0xd0>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d108      	bne.n	80015cc <readButtonDebounceXMC+0xc4>
    {
        if (circularAdd(BUTTON2INT) == 1)
 80015ba:	200f      	movs	r0, #15
 80015bc:	f7ff fd48 	bl	8001050 <circularAdd>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d102      	bne.n	80015cc <readButtonDebounceXMC+0xc4>
        {
            button2pressed = 0;
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <readButtonDebounceXMC+0xd0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	48028100 	.word	0x48028100
 80015d4:	20000ad0 	.word	0x20000ad0
 80015d8:	20000ac4 	.word	0x20000ac4

080015dc <ledSettingXMC>:
 *			other for LED toggle <br>
 * @return	none
 *
 */
void ledSettingXMC(uint8_t ledState)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
	// LED settings

    if (ledState == 0)
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d104      	bne.n	80015f6 <ledSettingXMC+0x1a>
    {
        XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
 80015ec:	2100      	movs	r1, #0
 80015ee:	480a      	ldr	r0, [pc, #40]	; (8001618 <ledSettingXMC+0x3c>)
 80015f0:	f7ff ff3c 	bl	800146c <XMC_GPIO_SetOutputLow>
    }
    else
    {
        XMC_GPIO_ToggleOutput(LED1);
    }
}
 80015f4:	e00b      	b.n	800160e <ledSettingXMC+0x32>

    if (ledState == 0)
    {
        XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
    }
    else if (ledState == 1)
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d104      	bne.n	8001606 <ledSettingXMC+0x2a>
    {
        XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
 80015fc:	2100      	movs	r1, #0
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <ledSettingXMC+0x3c>)
 8001600:	f7ff ff22 	bl	8001448 <XMC_GPIO_SetOutputHigh>
    }
    else
    {
        XMC_GPIO_ToggleOutput(LED1);
    }
}
 8001604:	e003      	b.n	800160e <ledSettingXMC+0x32>
    {
        XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
    }
    else
    {
        XMC_GPIO_ToggleOutput(LED1);
 8001606:	2100      	movs	r1, #0
 8001608:	4803      	ldr	r0, [pc, #12]	; (8001618 <ledSettingXMC+0x3c>)
 800160a:	f7ff ff41 	bl	8001490 <XMC_GPIO_ToggleOutput>
    }
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	48028100 	.word	0x48028100

0800161c <inputInitXMC>:
 * @param	none
 * @return	none
 *
 */
void inputInitXMC()
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
	// init onboard buttons

    XMC_GPIO_CONFIG_t config_in;
    config_in.mode = XMC_GPIO_MODE_INPUT_INVERTED_PULL_UP;
 8001622:	2330      	movs	r3, #48	; 0x30
 8001624:	713b      	strb	r3, [r7, #4]
    XMC_GPIO_Init(BUTTON1, &config_in);
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	461a      	mov	r2, r3
 800162a:	210e      	movs	r1, #14
 800162c:	4806      	ldr	r0, [pc, #24]	; (8001648 <inputInitXMC+0x2c>)
 800162e:	f001 f9b1 	bl	8002994 <XMC_GPIO_Init>
    XMC_GPIO_Init(BUTTON2, &config_in);
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	461a      	mov	r2, r3
 8001636:	210f      	movs	r1, #15
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <inputInitXMC+0x2c>)
 800163a:	f001 f9ab 	bl	8002994 <XMC_GPIO_Init>
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	48028100 	.word	0x48028100

0800164c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001654:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001658:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001664:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001668:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800166c:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00b      	beq.n	800168c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001674:	e000      	b.n	8001678 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001676:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001678:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f9      	beq.n	8001676 <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001682:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800168c:	687b      	ldr	r3, [r7, #4]
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop

0800169c <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
    // P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
    // PORT2->HWSEL ... clear bits [3:2]
    PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 80016a0:	4a1d      	ldr	r2, [pc, #116]	; (8001718 <initRetargetSwo+0x7c>)
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <initRetargetSwo+0x7c>)
 80016a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a6:	f023 030c 	bic.w	r3, r3, #12
 80016aa:	6753      	str	r3, [r2, #116]	; 0x74
    // PORT2->HWSEL ... set bit [2] -> HWO0
    PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 80016ac:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <initRetargetSwo+0x7c>)
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <initRetargetSwo+0x7c>)
 80016b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	6753      	str	r3, [r2, #116]	; 0x74

    // Enable trace systems
    // Source: ARMv7-M Architecture Reference Manual
    // DEMCR = Debug Exception and Monitor Control Register
    //         TRCENA ... global enable for DWT and ITM blocks
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016b8:	4a18      	ldr	r2, [pc, #96]	; (800171c <initRetargetSwo+0x80>)
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <initRetargetSwo+0x80>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c2:	60d3      	str	r3, [r2, #12]
    // SWO baud rate prescaler value
    // ACPR = Asynchronous Clock Prescaler Register
    //        fSWO = fCPU / (SWOSCALAR + 1)
    //        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
    //        fCPU = 120MHz
    TPI->ACPR = 119UL;
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <initRetargetSwo+0x84>)
 80016c6:	2277      	movs	r2, #119	; 0x77
 80016c8:	611a      	str	r2, [r3, #16]
    // Source: ARMv7-M Architecture Reference Manual
    // SPPR = Selected Pin Control Register
    //        0x0 ... Synchronous Trace Port Mode
    //        0x1 ... Asynchronous Serial Wire Output (Manchester)
    //        0x2 ... Asynchronous Serial Wire Output (NRZ)
    TPI->SPPR = 0x2UL;
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <initRetargetSwo+0x84>)
 80016cc:	2202      	movs	r2, #2
 80016ce:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    // Source: ARM Cortex-M4 Processor Technical Reference Manual
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    // FFCR = Formatter and Flash Control Register
    //        0x0 ... continuous formatting disabled
    //        0x1 ... continuous formatting enabled
    TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 80016d2:	4a13      	ldr	r2, [pc, #76]	; (8001720 <initRetargetSwo+0x84>)
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <initRetargetSwo+0x84>)
 80016d6:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 80016da:	f023 0302 	bic.w	r3, r3, #2
 80016de:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

    // Unlock ITM
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    ITM->LAR = 0xC5ACCE55;
 80016e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016e6:	4a0f      	ldr	r2, [pc, #60]	; (8001724 <initRetargetSwo+0x88>)
 80016e8:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TCR = Trace Control Register
    //       ITMENA ... enable ITM
    ITM->TCR |= ITM_TCR_ITMENA_Msk;
 80016ec:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80016f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016f4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TER = Trace Enable Register
    //       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
    ITM->TER = 0xFFFFFFFF;
 8001700:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	48028200 	.word	0x48028200
 800171c:	e000edf0 	.word	0xe000edf0
 8001720:	e0040000 	.word	0xe0040000
 8001724:	c5acce55 	.word	0xc5acce55

08001728 <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
    int i;

    for (i = 0; i < nbytes; i++) {
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	e009      	b.n	800174e <_write+0x26>
        ITM_SendChar ( (*buf++));
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	60ba      	str	r2, [r7, #8]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff82 	bl	800164c <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
    int i;

    for (i = 0; i < nbytes; i++) {
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3301      	adds	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	429a      	cmp	r2, r3
 8001754:	dbf1      	blt.n	800173a <_write+0x12>
        ITM_SendChar ( (*buf++));
    }
    return nbytes;
 8001756:	687b      	ldr	r3, [r7, #4]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
 800176c:	4613      	mov	r3, r2
 800176e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001770:	78f8      	ldrb	r0, [r7, #3]
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	3306      	adds	r3, #6
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8001782:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001784:	431a      	orrs	r2, r3
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	1d83      	adds	r3, r0, #6
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f023 020f 	bic.w	r2, r3, #15
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 80017e8:	2104      	movs	r1, #4
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffe4 	bl	80017b8 <XMC_USIC_CH_SetMode>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <XMC_I2C_CH_SetInputSource>:
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 *
 */
__STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT_t input, const uint8_t source)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	70fb      	strb	r3, [r7, #3]
 8001804:	4613      	mov	r3, r2
 8001806:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX0CR_DSEN_Msk;
 8001808:	78f8      	ldrb	r0, [r7, #3]
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	3306      	adds	r3, #6
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800181a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	1d83      	adds	r3, r0, #6
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8001828:	78ba      	ldrb	r2, [r7, #2]
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff96 	bl	8001760 <XMC_USIC_CH_SetInputSource>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop

08001878 <_init_i2c1_ch0>:
 *         P0_5 & P0_11
 *  @param none
 *  @return on success this function returns 0
 */
uint8_t _init_i2c1_ch0 (void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
    XMC_I2C_CH_Init (XMC_I2C1_CH0, &i2c_cfg);
 800187c:	490e      	ldr	r1, [pc, #56]	; (80018b8 <_init_i2c1_ch0+0x40>)
 800187e:	480f      	ldr	r0, [pc, #60]	; (80018bc <_init_i2c1_ch0+0x44>)
 8001880:	f001 fa02 	bl	8002c88 <XMC_I2C_CH_Init>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SDA, USIC1_C0_DX0_P0_5);
 8001884:	2201      	movs	r2, #1
 8001886:	2100      	movs	r1, #0
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <_init_i2c1_ch0+0x44>)
 800188a:	f7ff ffb5 	bl	80017f8 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SCL, USIC1_C0_DX1_SCLKOUT);
 800188e:	2206      	movs	r2, #6
 8001890:	2101      	movs	r1, #1
 8001892:	480a      	ldr	r0, [pc, #40]	; (80018bc <_init_i2c1_ch0+0x44>)
 8001894:	f7ff ffb0 	bl	80017f8 <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_Start (XMC_I2C1_CH0);
 8001898:	4808      	ldr	r0, [pc, #32]	; (80018bc <_init_i2c1_ch0+0x44>)
 800189a:	f7ff ffa1 	bl	80017e0 <XMC_I2C_CH_Start>

    XMC_GPIO_Init (P0_11, &i2c_scl);
 800189e:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <_init_i2c1_ch0+0x48>)
 80018a0:	210b      	movs	r1, #11
 80018a2:	4808      	ldr	r0, [pc, #32]	; (80018c4 <_init_i2c1_ch0+0x4c>)
 80018a4:	f001 f876 	bl	8002994 <XMC_GPIO_Init>
    XMC_GPIO_Init (P0_5, &i2c_sda);
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <_init_i2c1_ch0+0x50>)
 80018aa:	2105      	movs	r1, #5
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <_init_i2c1_ch0+0x4c>)
 80018ae:	f001 f871 	bl	8002994 <XMC_GPIO_Init>

    return 0;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000030 	.word	0x20000030
 80018bc:	48020000 	.word	0x48020000
 80018c0:	20000024 	.word	0x20000024
 80018c4:	48028000 	.word	0x48028000
 80018c8:	20000018 	.word	0x20000018

080018cc <_i2c_xfer>:
 *         rd_wr    ... I2C Read/Write direction
 *  @return read-value on a I2C read request or return write-value on I2C write
 *          request
 */
uint8_t _i2c_xfer (uint8_t id, uint8_t reg_addr, uint8_t i2c_data, _Bool rd_wr)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4604      	mov	r4, r0
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	71fb      	strb	r3, [r7, #7]
 80018de:	4603      	mov	r3, r0
 80018e0:	71bb      	strb	r3, [r7, #6]
 80018e2:	460b      	mov	r3, r1
 80018e4:	717b      	strb	r3, [r7, #5]
 80018e6:	4613      	mov	r3, r2
 80018e8:	713b      	strb	r3, [r7, #4]
    XMC_USIC_CH_t *channel;
    char _tmp_i2c_recv_ = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]
    uint8_t id_tmp = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	73bb      	strb	r3, [r7, #14]

    channel = XMC_I2C1_CH0;
 80018f2:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <_i2c_xfer+0x11c>)
 80018f4:	60bb      	str	r3, [r7, #8]

    id_tmp = LIS3DH_RD_ADR;
 80018f6:	2330      	movs	r3, #48	; 0x30
 80018f8:	73bb      	strb	r3, [r7, #14]

    XMC_I2C_CH_MasterStart (channel, id_tmp, XMC_I2C_CH_CMD_WRITE);
 80018fa:	7bbb      	ldrb	r3, [r7, #14]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	2200      	movs	r2, #0
 8001900:	4619      	mov	r1, r3
 8001902:	68b8      	ldr	r0, [r7, #8]
 8001904:	f001 fa44 	bl	8002d90 <XMC_I2C_CH_MasterStart>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8001908:	bf00      	nop
 800190a:	68b8      	ldr	r0, [r7, #8]
 800190c:	f7ff ff96 	bl	800183c <XMC_I2C_CH_GetStatusFlag>
 8001910:	4603      	mov	r3, r0
 8001912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f7      	beq.n	800190a <_i2c_xfer+0x3e>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 800191a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800191e:	68b8      	ldr	r0, [r7, #8]
 8001920:	f7ff ff98 	bl	8001854 <XMC_I2C_CH_ClearStatusFlag>

    XMC_I2C_CH_MasterTransmit (channel, reg_addr);
 8001924:	79bb      	ldrb	r3, [r7, #6]
 8001926:	4619      	mov	r1, r3
 8001928:	68b8      	ldr	r0, [r7, #8]
 800192a:	f001 fabf 	bl	8002eac <XMC_I2C_CH_MasterTransmit>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 800192e:	bf00      	nop
 8001930:	68b8      	ldr	r0, [r7, #8]
 8001932:	f7ff ff83 	bl	800183c <XMC_I2C_CH_GetStatusFlag>
 8001936:	4603      	mov	r3, r0
 8001938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f7      	beq.n	8001930 <_i2c_xfer+0x64>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8001940:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001944:	68b8      	ldr	r0, [r7, #8]
 8001946:	f7ff ff85 	bl	8001854 <XMC_I2C_CH_ClearStatusFlag>

    if (rd_wr) {
 800194a:	793b      	ldrb	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d030      	beq.n	80019b2 <_i2c_xfer+0xe6>
        /* Read from REG */
        XMC_I2C_CH_MasterRepeatedStart (channel, id_tmp, XMC_I2C_CH_CMD_READ);
 8001950:	7bbb      	ldrb	r3, [r7, #14]
 8001952:	b29b      	uxth	r3, r3
 8001954:	2201      	movs	r2, #1
 8001956:	4619      	mov	r1, r3
 8001958:	68b8      	ldr	r0, [r7, #8]
 800195a:	f001 fa4d 	bl	8002df8 <XMC_I2C_CH_MasterRepeatedStart>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 800195e:	bf00      	nop
 8001960:	68b8      	ldr	r0, [r7, #8]
 8001962:	f7ff ff6b 	bl	800183c <XMC_I2C_CH_GetStatusFlag>
 8001966:	4603      	mov	r3, r0
 8001968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f7      	beq.n	8001960 <_i2c_xfer+0x94>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8001970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001974:	68b8      	ldr	r0, [r7, #8]
 8001976:	f7ff ff6d 	bl	8001854 <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterReceiveNack (channel);
 800197a:	68b8      	ldr	r0, [r7, #8]
 800197c:	f001 fabc 	bl	8002ef8 <XMC_I2C_CH_MasterReceiveNack>

        while ( (XMC_USIC_CH_GetReceiveBufferStatus (channel) !=
 8001980:	bf00      	nop
 8001982:	68b8      	ldr	r0, [r7, #8]
 8001984:	f7ff ff0a 	bl	800179c <XMC_USIC_CH_GetReceiveBufferStatus>
 8001988:	4603      	mov	r3, r0
 800198a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800198e:	d006      	beq.n	800199e <_i2c_xfer+0xd2>
                 (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) && ( (uint32_t) XMC_USIC_CH_GetReceiveBufferStatus (channel)
 8001990:	68b8      	ldr	r0, [r7, #8]
 8001992:	f7ff ff03 	bl	800179c <XMC_USIC_CH_GetReceiveBufferStatus>
 8001996:	4603      	mov	r3, r0
 8001998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800199c:	d1f1      	bne.n	8001982 <_i2c_xfer+0xb6>
                         != (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID0));

        _tmp_i2c_recv_ = XMC_I2C_CH_GetReceivedData (channel);
 800199e:	68b8      	ldr	r0, [r7, #8]
 80019a0:	f001 fad0 	bl	8002f44 <XMC_I2C_CH_GetReceivedData>
 80019a4:	4603      	mov	r3, r0
 80019a6:	73fb      	strb	r3, [r7, #15]

        XMC_I2C_CH_MasterStop (channel);
 80019a8:	68b8      	ldr	r0, [r7, #8]
 80019aa:	f001 fa59 	bl	8002e60 <XMC_I2C_CH_MasterStop>

        return _tmp_i2c_recv_;
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	e016      	b.n	80019e0 <_i2c_xfer+0x114>
    } else {
        /* Write to REG */
        XMC_I2C_CH_MasterTransmit (channel, i2c_data);
 80019b2:	797b      	ldrb	r3, [r7, #5]
 80019b4:	4619      	mov	r1, r3
 80019b6:	68b8      	ldr	r0, [r7, #8]
 80019b8:	f001 fa78 	bl	8002eac <XMC_I2C_CH_MasterTransmit>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 80019bc:	bf00      	nop
 80019be:	68b8      	ldr	r0, [r7, #8]
 80019c0:	f7ff ff3c 	bl	800183c <XMC_I2C_CH_GetStatusFlag>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f7      	beq.n	80019be <_i2c_xfer+0xf2>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80019ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019d2:	68b8      	ldr	r0, [r7, #8]
 80019d4:	f7ff ff3e 	bl	8001854 <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterStop (channel);
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f001 fa41 	bl	8002e60 <XMC_I2C_CH_MasterStop>

        return i2c_data;
 80019de:	797b      	ldrb	r3, [r7, #5]
    }
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd90      	pop	{r4, r7, pc}
 80019e8:	48020000 	.word	0x48020000

080019ec <initMEMSsensor>:
 * @param	none
 * @return	amount of errors if some occurred
 *
 */
uint8_t initMEMSsensor()
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
    uint8_t error = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	71fb      	strb	r3, [r7, #7]
    uint8_t response = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	71bb      	strb	r3, [r7, #6]

    //set ODR (turn ON device)
    if(LIS3DH_SetODR(LIS3DH_ODR_100Hz) == 1)
 80019fa:	2005      	movs	r0, #5
 80019fc:	f000 f9a2 	bl	8001d44 <LIS3DH_SetODR>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d103      	bne.n	8001a0e <initMEMSsensor+0x22>
    {
        printf("LIS3DH_SetODR done...\n");
 8001a06:	4826      	ldr	r0, [pc, #152]	; (8001aa0 <initMEMSsensor+0xb4>)
 8001a08:	f002 fd08 	bl	800441c <puts>
 8001a0c:	e008      	b.n	8001a20 <initMEMSsensor+0x34>
    }
    else
    {
        error++;
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	3301      	adds	r3, #1
 8001a12:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <initMEMSsensor+0xb8>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <initMEMSsensor+0xb8>)
 8001a1e:	701a      	strb	r2, [r3, #0]
    }

    //set PowerMode
    if(LIS3DH_SetMode(LIS3DH_NORMAL) == 1)
 8001a20:	2002      	movs	r0, #2
 8001a22:	f000 f9bd 	bl	8001da0 <LIS3DH_SetMode>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d103      	bne.n	8001a34 <initMEMSsensor+0x48>
    {

        printf("LIS3DH_SetMode done...\n");
 8001a2c:	481e      	ldr	r0, [pc, #120]	; (8001aa8 <initMEMSsensor+0xbc>)
 8001a2e:	f002 fcf5 	bl	800441c <puts>
 8001a32:	e008      	b.n	8001a46 <initMEMSsensor+0x5a>
    }
    else
    {
        error++;
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	3301      	adds	r3, #1
 8001a38:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <initMEMSsensor+0xb8>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <initMEMSsensor+0xb8>)
 8001a44:	701a      	strb	r2, [r3, #0]
    }

    //set Fullscale
    if(LIS3DH_SetFullScale(LIS3DH_FULLSCALE_4) == 1)
 8001a46:	2001      	movs	r0, #1
 8001a48:	f000 fa54 	bl	8001ef4 <LIS3DH_SetFullScale>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d103      	bne.n	8001a5a <initMEMSsensor+0x6e>
    {

        printf("LIS3DH_SetFullScale done...\n");
 8001a52:	4816      	ldr	r0, [pc, #88]	; (8001aac <initMEMSsensor+0xc0>)
 8001a54:	f002 fce2 	bl	800441c <puts>
 8001a58:	e008      	b.n	8001a6c <initMEMSsensor+0x80>
    }
    else
    {
        error++;
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <initMEMSsensor+0xb8>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	3301      	adds	r3, #1
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <initMEMSsensor+0xb8>)
 8001a6a:	701a      	strb	r2, [r3, #0]
    }

    //set axis Enable
    response = LIS3DH_SetAxis(LIS3DH_X_ENABLE | LIS3DH_Y_ENABLE | LIS3DH_Z_ENABLE);
 8001a6c:	2007      	movs	r0, #7
 8001a6e:	f000 fa15 	bl	8001e9c <LIS3DH_SetAxis>
 8001a72:	4603      	mov	r3, r0
 8001a74:	71bb      	strb	r3, [r7, #6]
    if(response == 1)
 8001a76:	79bb      	ldrb	r3, [r7, #6]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d103      	bne.n	8001a84 <initMEMSsensor+0x98>
    {
        printf("LIS3DH_SetAxis done...\n");
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <initMEMSsensor+0xc4>)
 8001a7e:	f002 fccd 	bl	800441c <puts>
 8001a82:	e008      	b.n	8001a96 <initMEMSsensor+0xaa>
    }
    else
    {
        error++;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	3301      	adds	r3, #1
 8001a88:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <initMEMSsensor+0xb8>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <initMEMSsensor+0xb8>)
 8001a94:	701a      	strb	r2, [r3, #0]
    }

    return error;
 8001a96:	79fb      	ldrb	r3, [r7, #7]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	08008f74 	.word	0x08008f74
 8001aa4:	20000aaa 	.word	0x20000aaa
 8001aa8:	08008f8c 	.word	0x08008f8c
 8001aac:	08008fa4 	.word	0x08008fa4
 8001ab0:	08008fc0 	.word	0x08008fc0

08001ab4 <configMEMSsensor>:
 * @param	none
 * @return	amount of errors if some occurred
 *
 */
uint8_t configMEMSsensor()
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
    uint8_t error = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	71fb      	strb	r3, [r7, #7]
    uint8_t response = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	71bb      	strb	r3, [r7, #6]

    //set Interrupt Threshold
    if(LIS3DH_SetInt1Threshold(20) == 1)
 8001ac2:	2014      	movs	r0, #20
 8001ac4:	f000 fb16 	bl	80020f4 <LIS3DH_SetInt1Threshold>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d103      	bne.n	8001ad6 <configMEMSsensor+0x22>
    {
        printf("LIS3DH_SetInt1Thershold done...\n");
 8001ace:	481d      	ldr	r0, [pc, #116]	; (8001b44 <configMEMSsensor+0x90>)
 8001ad0:	f002 fca4 	bl	800441c <puts>
 8001ad4:	e008      	b.n	8001ae8 <configMEMSsensor+0x34>
    }
    else
    {
        error++;
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <configMEMSsensor+0x94>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <configMEMSsensor+0x94>)
 8001ae6:	701a      	strb	r2, [r3, #0]
    }

    //set Interrupt configuration (all enabled)
    response = LIS3DH_SetIntConfiguration(LIS3DH_INT1_ZHIE_ENABLE | LIS3DH_INT1_ZLIE_ENABLE |
 8001ae8:	203f      	movs	r0, #63	; 0x3f
 8001aea:	f000 fa31 	bl	8001f50 <LIS3DH_SetIntConfiguration>
 8001aee:	4603      	mov	r3, r0
 8001af0:	71bb      	strb	r3, [r7, #6]
                                          LIS3DH_INT1_YHIE_ENABLE | LIS3DH_INT1_YLIE_ENABLE |
                                          LIS3DH_INT1_XHIE_ENABLE | LIS3DH_INT1_XLIE_ENABLE );
    if(response == 1)
 8001af2:	79bb      	ldrb	r3, [r7, #6]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d103      	bne.n	8001b00 <configMEMSsensor+0x4c>
    {
        printf("LIS3DH_SetIntConfiguration done...\n");
 8001af8:	4814      	ldr	r0, [pc, #80]	; (8001b4c <configMEMSsensor+0x98>)
 8001afa:	f002 fc8f 	bl	800441c <puts>
 8001afe:	e008      	b.n	8001b12 <configMEMSsensor+0x5e>
    }
    else
    {
        error++;
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	3301      	adds	r3, #1
 8001b04:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <configMEMSsensor+0x94>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <configMEMSsensor+0x94>)
 8001b10:	701a      	strb	r2, [r3, #0]
    }

    //set Interrupt Mode
    if(LIS3DH_SetIntMode(LIS3DH_INT_MODE_6D_POSITION) == 1)
 8001b12:	2003      	movs	r0, #3
 8001b14:	f000 fa46 	bl	8001fa4 <LIS3DH_SetIntMode>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d103      	bne.n	8001b26 <configMEMSsensor+0x72>
    {
        printf("LIS3DH_SetIntMode done...\n");
 8001b1e:	480c      	ldr	r0, [pc, #48]	; (8001b50 <configMEMSsensor+0x9c>)
 8001b20:	f002 fc7c 	bl	800441c <puts>
 8001b24:	e008      	b.n	8001b38 <configMEMSsensor+0x84>
    }
    else
    {
        error++;
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	71fb      	strb	r3, [r7, #7]
        errorcount++;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <configMEMSsensor+0x94>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	3301      	adds	r3, #1
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <configMEMSsensor+0x94>)
 8001b36:	701a      	strb	r2, [r3, #0]
    }

    return error;
 8001b38:	79fb      	ldrb	r3, [r7, #7]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	08008fd8 	.word	0x08008fd8
 8001b48:	20000aaa 	.word	0x20000aaa
 8001b4c:	08008ff8 	.word	0x08008ff8
 8001b50:	0800901c 	.word	0x0800901c

08001b54 <get6Dposition>:
 * @param	none
 * @return	6D direction as integer 0 - 6
 *
 */
uint8_t get6Dposition()
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
    uint8_t response = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	71fb      	strb	r3, [r7, #7]

	// request 6D position and set global variable

    response = LIS3DH_Get6DPosition(&position);
 8001b5e:	4846      	ldr	r0, [pc, #280]	; (8001c78 <get6Dposition+0x124>)
 8001b60:	f000 fa4e 	bl	8002000 <LIS3DH_Get6DPosition>
 8001b64:	4603      	mov	r3, r0
 8001b66:	71fb      	strb	r3, [r7, #7]

    if((response == 1) && (old_position != position))
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d171      	bne.n	8001c52 <get6Dposition+0xfe>
 8001b6e:	4b43      	ldr	r3, [pc, #268]	; (8001c7c <get6Dposition+0x128>)
 8001b70:	781a      	ldrb	r2, [r3, #0]
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <get6Dposition+0x124>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d06b      	beq.n	8001c52 <get6Dposition+0xfe>
    {
        switch (position)
 8001b7a:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <get6Dposition+0x124>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	3b41      	subs	r3, #65	; 0x41
 8001b80:	2b1f      	cmp	r3, #31
 8001b82:	d85b      	bhi.n	8001c3c <get6Dposition+0xe8>
 8001b84:	a201      	add	r2, pc, #4	; (adr r2, 8001b8c <get6Dposition+0x38>)
 8001b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8a:	bf00      	nop
 8001b8c:	08001c1d 	.word	0x08001c1d
 8001b90:	08001c15 	.word	0x08001c15
 8001b94:	08001c3d 	.word	0x08001c3d
 8001b98:	08001c0d 	.word	0x08001c0d
 8001b9c:	08001c3d 	.word	0x08001c3d
 8001ba0:	08001c3d 	.word	0x08001c3d
 8001ba4:	08001c3d 	.word	0x08001c3d
 8001ba8:	08001c25 	.word	0x08001c25
 8001bac:	08001c3d 	.word	0x08001c3d
 8001bb0:	08001c3d 	.word	0x08001c3d
 8001bb4:	08001c3d 	.word	0x08001c3d
 8001bb8:	08001c3d 	.word	0x08001c3d
 8001bbc:	08001c3d 	.word	0x08001c3d
 8001bc0:	08001c3d 	.word	0x08001c3d
 8001bc4:	08001c3d 	.word	0x08001c3d
 8001bc8:	08001c35 	.word	0x08001c35
 8001bcc:	08001c3d 	.word	0x08001c3d
 8001bd0:	08001c3d 	.word	0x08001c3d
 8001bd4:	08001c3d 	.word	0x08001c3d
 8001bd8:	08001c3d 	.word	0x08001c3d
 8001bdc:	08001c3d 	.word	0x08001c3d
 8001be0:	08001c3d 	.word	0x08001c3d
 8001be4:	08001c3d 	.word	0x08001c3d
 8001be8:	08001c3d 	.word	0x08001c3d
 8001bec:	08001c3d 	.word	0x08001c3d
 8001bf0:	08001c3d 	.word	0x08001c3d
 8001bf4:	08001c3d 	.word	0x08001c3d
 8001bf8:	08001c3d 	.word	0x08001c3d
 8001bfc:	08001c3d 	.word	0x08001c3d
 8001c00:	08001c3d 	.word	0x08001c3d
 8001c04:	08001c3d 	.word	0x08001c3d
 8001c08:	08001c2d 	.word	0x08001c2d
        {
        case LIS3DH_UP_SX:
        {
            direction = 0;
 8001c0c:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <get6Dposition+0x12c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
            break;
 8001c12:	e01d      	b.n	8001c50 <get6Dposition+0xfc>
        }
        case LIS3DH_UP_DX:
        {
            direction = 1;
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <get6Dposition+0x12c>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
            break;
 8001c1a:	e019      	b.n	8001c50 <get6Dposition+0xfc>
        }
        case LIS3DH_DW_SX:
        {
            direction = 2;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <get6Dposition+0x12c>)
 8001c1e:	2202      	movs	r2, #2
 8001c20:	701a      	strb	r2, [r3, #0]
            break;
 8001c22:	e015      	b.n	8001c50 <get6Dposition+0xfc>
        }
        case LIS3DH_DW_DX:
        {
            direction = 3;
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <get6Dposition+0x12c>)
 8001c26:	2203      	movs	r2, #3
 8001c28:	701a      	strb	r2, [r3, #0]
            break;
 8001c2a:	e011      	b.n	8001c50 <get6Dposition+0xfc>
        }
        case LIS3DH_TOP:
        {
            direction = 4;
 8001c2c:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <get6Dposition+0x12c>)
 8001c2e:	2204      	movs	r2, #4
 8001c30:	701a      	strb	r2, [r3, #0]
            break;
 8001c32:	e00d      	b.n	8001c50 <get6Dposition+0xfc>
        }
        case LIS3DH_BOTTOM:
        {
            direction = 5;
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <get6Dposition+0x12c>)
 8001c36:	2205      	movs	r2, #5
 8001c38:	701a      	strb	r2, [r3, #0]
            break;
 8001c3a:	e009      	b.n	8001c50 <get6Dposition+0xfc>
        }
        default:
        {
            direction = 6;
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <get6Dposition+0x12c>)
 8001c3e:	2206      	movs	r2, #6
 8001c40:	701a      	strb	r2, [r3, #0]
            errorcount++;
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <get6Dposition+0x130>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <get6Dposition+0x130>)
 8001c4c:	701a      	strb	r2, [r3, #0]
            break;
 8001c4e:	bf00      	nop
        }
        }
    }
 8001c50:	e008      	b.n	8001c64 <get6Dposition+0x110>
    else if(response != 1)
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d005      	beq.n	8001c64 <get6Dposition+0x110>
    {
        errorcount++;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <get6Dposition+0x130>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <get6Dposition+0x130>)
 8001c62:	701a      	strb	r2, [r3, #0]
    }
    old_position = position;
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <get6Dposition+0x124>)
 8001c66:	781a      	ldrb	r2, [r3, #0]
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <get6Dposition+0x128>)
 8001c6a:	701a      	strb	r2, [r3, #0]

    return direction;
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <get6Dposition+0x12c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000abe 	.word	0x20000abe
 8001c7c:	20000ad4 	.word	0x20000ad4
 8001c80:	20000ad1 	.word	0x20000ad1
 8001c84:	20000aaa 	.word	0x20000aaa

08001c88 <getAxesRawData>:
 * @param	none
 * @return	acceleration data in structure
 *
 */
AXESRAWDATA getAxesRawData()
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
    uint8_t response = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	75fb      	strb	r3, [r7, #23]
    AxesRaw_t data;
    AXESRAWDATA dataOut;
    dataOut.axisX = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	813b      	strh	r3, [r7, #8]
    dataOut.axisY = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	817b      	strh	r3, [r7, #10]
    dataOut.axisZ = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	81bb      	strh	r3, [r7, #12]

	// request sensor data and add to struct

    response = LIS3DH_GetAccAxesRaw(&data);
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fa3f 	bl	8002128 <LIS3DH_GetAccAxesRaw>
 8001caa:	4603      	mov	r3, r0
 8001cac:	75fb      	strb	r3, [r7, #23]
    if(response != 1)
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d005      	beq.n	8001cc0 <getAxesRawData+0x38>
    {
        errorcount++;
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <getAxesRawData+0x64>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <getAxesRawData+0x64>)
 8001cbe:	701a      	strb	r2, [r3, #0]
    }

    dataOut.axisX = data.AXIS_X;
 8001cc0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cc4:	813b      	strh	r3, [r7, #8]
    dataOut.axisY = data.AXIS_Y;
 8001cc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001cca:	817b      	strh	r3, [r7, #10]
    dataOut.axisZ = data.AXIS_Z;
 8001ccc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cd0:	81bb      	strh	r3, [r7, #12]

    return dataOut;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f107 0308 	add.w	r3, r7, #8
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	6010      	str	r0, [r2, #0]
 8001cde:	889b      	ldrh	r3, [r3, #4]
 8001ce0:	8093      	strh	r3, [r2, #4]
}
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000aaa 	.word	0x20000aaa

08001cf0 <LIS3DH_ReadReg>:
*			: I2C or SPI reading functions
* Input			: Register Address
* Output		: Data REad
* Return		: None
*******************************************************************************/
u8_t LIS3DH_ReadReg(u8_t Reg, u8_t* Data) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
    //To be completed with either I2c or SPI reading function
    //i.e. *Data = SPI_Mems_Read_Reg( Reg );

	// added i2c xfer function FHTW

    *Data = _i2c_xfer (0, Reg, 0, 1);
 8001cfc:	79f9      	ldrb	r1, [r7, #7]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	2200      	movs	r2, #0
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7ff fde2 	bl	80018cc <_i2c_xfer>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	701a      	strb	r2, [r3, #0]

    return 1;
 8001d10:	2301      	movs	r3, #1
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop

08001d1c <LIS3DH_WriteReg>:
*			: I2C or SPI writing function
* Input			: Register Address, Data to be written
* Output		: None
* Return		: None
*******************************************************************************/
u8_t LIS3DH_WriteReg(u8_t WriteAddr, u8_t Data) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	460a      	mov	r2, r1
 8001d26:	71fb      	strb	r3, [r7, #7]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	71bb      	strb	r3, [r7, #6]
    //To be completed with either I2c or SPI writing function
    //i.e. SPI_Mems_Write_Reg(WriteAddr, Data);

	// added i2c xfer function FHTW

    _i2c_xfer (0, WriteAddr, Data, 0);
 8001d2c:	79ba      	ldrb	r2, [r7, #6]
 8001d2e:	79f9      	ldrb	r1, [r7, #7]
 8001d30:	2300      	movs	r3, #0
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff fdca 	bl	80018cc <_i2c_xfer>

    return 1;
 8001d38:	2301      	movs	r3, #1
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop

08001d44 <LIS3DH_SetODR>:
* Description    : Sets LIS3DH Output Data Rate
* Input          : Output Data Rate
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetODR(LIS3DH_ODR_t ov) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001d4e:	f107 030f 	add.w	r3, r7, #15
 8001d52:	4619      	mov	r1, r3
 8001d54:	2020      	movs	r0, #32
 8001d56:	f7ff ffcb 	bl	8001cf0 <LIS3DH_ReadReg>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <LIS3DH_SetODR+0x20>
        return MEMS_ERROR;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e018      	b.n	8001d96 <LIS3DH_SetODR+0x52>

    value &= 0x0f;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	73fb      	strb	r3, [r7, #15]
    value |= ov<<LIS3DH_ODR_BIT;
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	b25a      	sxtb	r2, r3
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	b25b      	sxtb	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b25b      	sxtb	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	4619      	mov	r1, r3
 8001d84:	2020      	movs	r0, #32
 8001d86:	f7ff ffc9 	bl	8001d1c <LIS3DH_WriteReg>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <LIS3DH_SetODR+0x50>
        return MEMS_ERROR;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e000      	b.n	8001d96 <LIS3DH_SetODR+0x52>

    return MEMS_SUCCESS;
 8001d94:	2301      	movs	r3, #1
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop

08001da0 <LIS3DH_SetMode>:
* Description    : Sets LIS3DH Operating Mode
* Input          : Modality (LIS3DH_NORMAL, LIS3DH_LOW_POWER, LIS3DH_POWER_DOWN)
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetMode(LIS3DH_Mode_t md) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
    u8_t value;
    u8_t value2;
    static   u8_t ODR_old_value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001daa:	f107 030f 	add.w	r3, r7, #15
 8001dae:	4619      	mov	r1, r3
 8001db0:	2020      	movs	r0, #32
 8001db2:	f7ff ff9d 	bl	8001cf0 <LIS3DH_ReadReg>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <LIS3DH_SetMode+0x20>
        return MEMS_ERROR;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e066      	b.n	8001e8e <LIS3DH_SetMode+0xee>

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value2) )
 8001dc0:	f107 030e 	add.w	r3, r7, #14
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	2023      	movs	r0, #35	; 0x23
 8001dc8:	f7ff ff92 	bl	8001cf0 <LIS3DH_ReadReg>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <LIS3DH_SetMode+0x36>
        return MEMS_ERROR;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e05b      	b.n	8001e8e <LIS3DH_SetMode+0xee>

    if((value & 0xF0)==0)
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10b      	bne.n	8001df8 <LIS3DH_SetMode+0x58>
        value = value | (ODR_old_value & 0xF0); //if it comes from POWERDOWN
 8001de0:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <LIS3DH_SetMode+0xf8>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	f023 030f 	bic.w	r3, r3, #15
 8001dea:	b25a      	sxtb	r2, r3
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	b25b      	sxtb	r3, r3
 8001df0:	4313      	orrs	r3, r2
 8001df2:	b25b      	sxtb	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	73fb      	strb	r3, [r7, #15]

    switch(md) {
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d01e      	beq.n	8001e3c <LIS3DH_SetMode+0x9c>
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d00a      	beq.n	8001e18 <LIS3DH_SetMode+0x78>
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d12c      	bne.n	8001e60 <LIS3DH_SetMode+0xc0>

    case LIS3DH_POWER_DOWN:
        ODR_old_value = value;
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <LIS3DH_SetMode+0xf8>)
 8001e0a:	701a      	strb	r2, [r3, #0]
        value &= 0x0F;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	73fb      	strb	r3, [r7, #15]
        break;
 8001e16:	e025      	b.n	8001e64 <LIS3DH_SetMode+0xc4>

    case LIS3DH_NORMAL:
        value &= 0xF7;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	f023 0308 	bic.w	r3, r3, #8
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	73fb      	strb	r3, [r7, #15]
        value |= (MEMS_RESET<<LIS3DH_LPEN);
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 8001e26:	7bbb      	ldrb	r3, [r7, #14]
 8001e28:	f023 0308 	bic.w	r3, r3, #8
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_SET<<LIS3DH_HR);   //set HighResolution_BIT
 8001e30:	7bbb      	ldrb	r3, [r7, #14]
 8001e32:	f043 0308 	orr.w	r3, r3, #8
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	73bb      	strb	r3, [r7, #14]
        break;
 8001e3a:	e013      	b.n	8001e64 <LIS3DH_SetMode+0xc4>

    case LIS3DH_LOW_POWER:
        value &= 0xF7;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	f023 0308 	bic.w	r3, r3, #8
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	73fb      	strb	r3, [r7, #15]
        value |=  (MEMS_SET<<LIS3DH_LPEN);
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 8001e50:	7bbb      	ldrb	r3, [r7, #14]
 8001e52:	f023 0308 	bic.w	r3, r3, #8
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_RESET<<LIS3DH_HR); //reset HighResolution_BIT
 8001e5a:	7bbb      	ldrb	r3, [r7, #14]
 8001e5c:	73bb      	strb	r3, [r7, #14]
        break;
 8001e5e:	e001      	b.n	8001e64 <LIS3DH_SetMode+0xc4>

    default:
        return MEMS_ERROR;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e014      	b.n	8001e8e <LIS3DH_SetMode+0xee>
    }

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	4619      	mov	r1, r3
 8001e68:	2020      	movs	r0, #32
 8001e6a:	f7ff ff57 	bl	8001d1c <LIS3DH_WriteReg>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <LIS3DH_SetMode+0xd8>
        return MEMS_ERROR;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e00a      	b.n	8001e8e <LIS3DH_SetMode+0xee>

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value2) )
 8001e78:	7bbb      	ldrb	r3, [r7, #14]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	2023      	movs	r0, #35	; 0x23
 8001e7e:	f7ff ff4d 	bl	8001d1c <LIS3DH_WriteReg>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <LIS3DH_SetMode+0xec>
        return MEMS_ERROR;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e000      	b.n	8001e8e <LIS3DH_SetMode+0xee>

    return MEMS_SUCCESS;
 8001e8c:	2301      	movs	r3, #1
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000a68 	.word	0x20000a68

08001e9c <LIS3DH_SetAxis>:
* Input          : LIS3DH_X_ENABLE/DISABLE | LIS3DH_Y_ENABLE/DISABLE | LIS3DH_Z_ENABLE/DISABLE
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetAxis(LIS3DH_Axis_t axis) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001ea6:	f107 030f 	add.w	r3, r7, #15
 8001eaa:	4619      	mov	r1, r3
 8001eac:	2020      	movs	r0, #32
 8001eae:	f7ff ff1f 	bl	8001cf0 <LIS3DH_ReadReg>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <LIS3DH_SetAxis+0x20>
        return MEMS_ERROR;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e017      	b.n	8001eec <LIS3DH_SetAxis+0x50>
    value &= 0xF8;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	f023 0307 	bic.w	r3, r3, #7
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	73fb      	strb	r3, [r7, #15]
    value |= (0x07 & axis);
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	2020      	movs	r0, #32
 8001edc:	f7ff ff1e 	bl	8001d1c <LIS3DH_WriteReg>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <LIS3DH_SetAxis+0x4e>
        return MEMS_ERROR;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <LIS3DH_SetAxis+0x50>

    return MEMS_SUCCESS;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <LIS3DH_SetFullScale>:
* Description    : Sets the LIS3DH FullScale
* Input          : LIS3DH_FULLSCALE_2/LIS3DH_FULLSCALE_4/LIS3DH_FULLSCALE_8/LIS3DH_FULLSCALE_16
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetFullScale(LIS3DH_Fullscale_t fs) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 8001efe:	f107 030f 	add.w	r3, r7, #15
 8001f02:	4619      	mov	r1, r3
 8001f04:	2023      	movs	r0, #35	; 0x23
 8001f06:	f7ff fef3 	bl	8001cf0 <LIS3DH_ReadReg>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <LIS3DH_SetFullScale+0x20>
        return MEMS_ERROR;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e018      	b.n	8001f46 <LIS3DH_SetFullScale+0x52>

    value &= 0xCF;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	73fb      	strb	r3, [r7, #15]
    value |= (fs<<LIS3DH_FS);
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	b25a      	sxtb	r2, r3
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	b25b      	sxtb	r3, r3
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	b25b      	sxtb	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	4619      	mov	r1, r3
 8001f34:	2023      	movs	r0, #35	; 0x23
 8001f36:	f7ff fef1 	bl	8001d1c <LIS3DH_WriteReg>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <LIS3DH_SetFullScale+0x50>
        return MEMS_ERROR;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e000      	b.n	8001f46 <LIS3DH_SetFullScale+0x52>

    return MEMS_SUCCESS;
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop

08001f50 <LIS3DH_SetIntConfiguration>:
* Input          : LIS3DH_INT1_AND/OR | LIS3DH_INT1_ZHIE_ENABLE/DISABLE | LIS3DH_INT1_ZLIE_ENABLE/DISABLE...
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntConfiguration(LIS3DH_Int1Conf_t ic) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 8001f5a:	f107 030f 	add.w	r3, r7, #15
 8001f5e:	4619      	mov	r1, r3
 8001f60:	2030      	movs	r0, #48	; 0x30
 8001f62:	f7ff fec5 	bl	8001cf0 <LIS3DH_ReadReg>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <LIS3DH_SetIntConfiguration+0x20>
        return MEMS_ERROR;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e014      	b.n	8001f9a <LIS3DH_SetIntConfiguration+0x4a>

    value &= 0x40;
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	73fb      	strb	r3, [r7, #15]
    value |= ic;
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	4619      	mov	r1, r3
 8001f88:	2030      	movs	r0, #48	; 0x30
 8001f8a:	f7ff fec7 	bl	8001d1c <LIS3DH_WriteReg>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <LIS3DH_SetIntConfiguration+0x48>
        return MEMS_ERROR;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e000      	b.n	8001f9a <LIS3DH_SetIntConfiguration+0x4a>

    return MEMS_SUCCESS;
 8001f98:	2301      	movs	r3, #1
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop

08001fa4 <LIS3DH_SetIntMode>:
* Input          : LIS3DH_INT_MODE_OR, LIS3DH_INT_MODE_6D_MOVEMENT, LIS3DH_INT_MODE_AND,
				   LIS3DH_INT_MODE_6D_POSITION
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntMode(LIS3DH_Int1Mode_t int_mode) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 8001fae:	f107 030f 	add.w	r3, r7, #15
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	2030      	movs	r0, #48	; 0x30
 8001fb6:	f7ff fe9b 	bl	8001cf0 <LIS3DH_ReadReg>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <LIS3DH_SetIntMode+0x20>
        return MEMS_ERROR;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e018      	b.n	8001ff6 <LIS3DH_SetIntMode+0x52>

    value &= 0x3F;
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	73fb      	strb	r3, [r7, #15]
    value |= (int_mode<<LIS3DH_INT_6D);
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	019b      	lsls	r3, r3, #6
 8001fd2:	b25a      	sxtb	r2, r3
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	b25b      	sxtb	r3, r3
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	b25b      	sxtb	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	2030      	movs	r0, #48	; 0x30
 8001fe6:	f7ff fe99 	bl	8001d1c <LIS3DH_WriteReg>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <LIS3DH_SetIntMode+0x50>
        return MEMS_ERROR;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e000      	b.n	8001ff6 <LIS3DH_SetIntMode+0x52>

    return MEMS_SUCCESS;
 8001ff4:	2301      	movs	r3, #1
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop

08002000 <LIS3DH_Get6DPosition>:
* Description    : 6D, 4D Interrupt Position Detect
* Input          : Byte to empty by POSITION_6D_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_Get6DPosition(u8_t* val) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_SRC, &value) )
 8002008:	f107 030f 	add.w	r3, r7, #15
 800200c:	4619      	mov	r1, r3
 800200e:	2031      	movs	r0, #49	; 0x31
 8002010:	f7ff fe6e 	bl	8001cf0 <LIS3DH_ReadReg>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <LIS3DH_Get6DPosition+0x1e>
        return MEMS_ERROR;
 800201a:	2300      	movs	r3, #0
 800201c:	e065      	b.n	80020ea <LIS3DH_Get6DPosition+0xea>

    value &= 0x7F;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002024:	b2db      	uxtb	r3, r3
 8002026:	73fb      	strb	r3, [r7, #15]

    switch (value) {
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	3b41      	subs	r3, #65	; 0x41
 800202c:	2b1f      	cmp	r3, #31
 800202e:	d85b      	bhi.n	80020e8 <LIS3DH_Get6DPosition+0xe8>
 8002030:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <LIS3DH_Get6DPosition+0x38>)
 8002032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002036:	bf00      	nop
 8002038:	080020c9 	.word	0x080020c9
 800203c:	080020c1 	.word	0x080020c1
 8002040:	080020e9 	.word	0x080020e9
 8002044:	080020b9 	.word	0x080020b9
 8002048:	080020e9 	.word	0x080020e9
 800204c:	080020e9 	.word	0x080020e9
 8002050:	080020e9 	.word	0x080020e9
 8002054:	080020d1 	.word	0x080020d1
 8002058:	080020e9 	.word	0x080020e9
 800205c:	080020e9 	.word	0x080020e9
 8002060:	080020e9 	.word	0x080020e9
 8002064:	080020e9 	.word	0x080020e9
 8002068:	080020e9 	.word	0x080020e9
 800206c:	080020e9 	.word	0x080020e9
 8002070:	080020e9 	.word	0x080020e9
 8002074:	080020e1 	.word	0x080020e1
 8002078:	080020e9 	.word	0x080020e9
 800207c:	080020e9 	.word	0x080020e9
 8002080:	080020e9 	.word	0x080020e9
 8002084:	080020e9 	.word	0x080020e9
 8002088:	080020e9 	.word	0x080020e9
 800208c:	080020e9 	.word	0x080020e9
 8002090:	080020e9 	.word	0x080020e9
 8002094:	080020e9 	.word	0x080020e9
 8002098:	080020e9 	.word	0x080020e9
 800209c:	080020e9 	.word	0x080020e9
 80020a0:	080020e9 	.word	0x080020e9
 80020a4:	080020e9 	.word	0x080020e9
 80020a8:	080020e9 	.word	0x080020e9
 80020ac:	080020e9 	.word	0x080020e9
 80020b0:	080020e9 	.word	0x080020e9
 80020b4:	080020d9 	.word	0x080020d9
    case LIS3DH_UP_SX:
        *val = LIS3DH_UP_SX;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2244      	movs	r2, #68	; 0x44
 80020bc:	701a      	strb	r2, [r3, #0]
        break;
 80020be:	e013      	b.n	80020e8 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_UP_DX:
        *val = LIS3DH_UP_DX;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2242      	movs	r2, #66	; 0x42
 80020c4:	701a      	strb	r2, [r3, #0]
        break;
 80020c6:	e00f      	b.n	80020e8 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_SX:
        *val = LIS3DH_DW_SX;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2241      	movs	r2, #65	; 0x41
 80020cc:	701a      	strb	r2, [r3, #0]
        break;
 80020ce:	e00b      	b.n	80020e8 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_DX:
        *val = LIS3DH_DW_DX;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2248      	movs	r2, #72	; 0x48
 80020d4:	701a      	strb	r2, [r3, #0]
        break;
 80020d6:	e007      	b.n	80020e8 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_TOP:
        *val = LIS3DH_TOP;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2260      	movs	r2, #96	; 0x60
 80020dc:	701a      	strb	r2, [r3, #0]
        break;
 80020de:	e003      	b.n	80020e8 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_BOTTOM:
        *val = LIS3DH_BOTTOM;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2250      	movs	r2, #80	; 0x50
 80020e4:	701a      	strb	r2, [r3, #0]
        break;
 80020e6:	bf00      	nop
    }

    return MEMS_SUCCESS;
 80020e8:	2301      	movs	r3, #1
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop

080020f4 <LIS3DH_SetInt1Threshold>:
* Description    : Sets Interrupt 1 Threshold
* Input          : Threshold = [0,31]
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetInt1Threshold(u8_t ths) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
    if (ths > 127)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	da01      	bge.n	800210a <LIS3DH_SetInt1Threshold+0x16>
        return MEMS_ERROR;
 8002106:	2300      	movs	r3, #0
 8002108:	e00a      	b.n	8002120 <LIS3DH_SetInt1Threshold+0x2c>

    if( !LIS3DH_WriteReg(LIS3DH_INT1_THS, ths) )
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	4619      	mov	r1, r3
 800210e:	2032      	movs	r0, #50	; 0x32
 8002110:	f7ff fe04 	bl	8001d1c <LIS3DH_WriteReg>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <LIS3DH_SetInt1Threshold+0x2a>
        return MEMS_ERROR;
 800211a:	2300      	movs	r3, #0
 800211c:	e000      	b.n	8002120 <LIS3DH_SetInt1Threshold+0x2c>

    return MEMS_SUCCESS;
 800211e:	2301      	movs	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <LIS3DH_GetAccAxesRaw>:
* Description    : Read the Acceleration Values Output Registers
* Input          : buffer to empity by AxesRaw_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_GetAccAxesRaw(AxesRaw_t* buff) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
    i16_t value;
    u8_t *valueL = (u8_t *)(&value);
 8002130:	f107 030e 	add.w	r3, r7, #14
 8002134:	617b      	str	r3, [r7, #20]
    u8_t *valueH = ((u8_t *)(&value)+1);
 8002136:	f107 030e 	add.w	r3, r7, #14
 800213a:	3301      	adds	r3, #1
 800213c:	613b      	str	r3, [r7, #16]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_L, valueL) )
 800213e:	6979      	ldr	r1, [r7, #20]
 8002140:	2028      	movs	r0, #40	; 0x28
 8002142:	f7ff fdd5 	bl	8001cf0 <LIS3DH_ReadReg>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <LIS3DH_GetAccAxesRaw+0x28>
        return MEMS_ERROR;
 800214c:	2300      	movs	r3, #0
 800214e:	e039      	b.n	80021c4 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_H, valueH) )
 8002150:	6939      	ldr	r1, [r7, #16]
 8002152:	2029      	movs	r0, #41	; 0x29
 8002154:	f7ff fdcc 	bl	8001cf0 <LIS3DH_ReadReg>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <LIS3DH_GetAccAxesRaw+0x3a>
        return MEMS_ERROR;
 800215e:	2300      	movs	r3, #0
 8002160:	e030      	b.n	80021c4 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_X = value;
 8002162:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	801a      	strh	r2, [r3, #0]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_L, valueL) )
 800216a:	6979      	ldr	r1, [r7, #20]
 800216c:	202a      	movs	r0, #42	; 0x2a
 800216e:	f7ff fdbf 	bl	8001cf0 <LIS3DH_ReadReg>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <LIS3DH_GetAccAxesRaw+0x54>
        return MEMS_ERROR;
 8002178:	2300      	movs	r3, #0
 800217a:	e023      	b.n	80021c4 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_H, valueH) )
 800217c:	6939      	ldr	r1, [r7, #16]
 800217e:	202b      	movs	r0, #43	; 0x2b
 8002180:	f7ff fdb6 	bl	8001cf0 <LIS3DH_ReadReg>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <LIS3DH_GetAccAxesRaw+0x66>
        return MEMS_ERROR;
 800218a:	2300      	movs	r3, #0
 800218c:	e01a      	b.n	80021c4 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Y = value;
 800218e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	805a      	strh	r2, [r3, #2]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_L, valueL) )
 8002196:	6979      	ldr	r1, [r7, #20]
 8002198:	202c      	movs	r0, #44	; 0x2c
 800219a:	f7ff fda9 	bl	8001cf0 <LIS3DH_ReadReg>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <LIS3DH_GetAccAxesRaw+0x80>
        return MEMS_ERROR;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e00d      	b.n	80021c4 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_H, valueH) )
 80021a8:	6939      	ldr	r1, [r7, #16]
 80021aa:	202d      	movs	r0, #45	; 0x2d
 80021ac:	f7ff fda0 	bl	8001cf0 <LIS3DH_ReadReg>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <LIS3DH_GetAccAxesRaw+0x92>
        return MEMS_ERROR;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e004      	b.n	80021c4 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Z = value;
 80021ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	809a      	strh	r2, [r3, #4]

    return MEMS_SUCCESS;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	db0a      	blt.n	80021f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e0:	490d      	ldr	r1, [pc, #52]	; (8002218 <__NVIC_SetPriority+0x4c>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	0092      	lsls	r2, r2, #2
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	440b      	add	r3, r1
 80021f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f4:	e00a      	b.n	800220c <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f6:	4909      	ldr	r1, [pc, #36]	; (800221c <__NVIC_SetPriority+0x50>)
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	3b04      	subs	r3, #4
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	0092      	lsls	r2, r2, #2
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	440b      	add	r3, r1
 800220a:	761a      	strb	r2, [r3, #24]
  }
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000e100 	.word	0xe000e100
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002230:	d301      	bcc.n	8002236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002232:	2301      	movs	r3, #1
 8002234:	e00f      	b.n	8002256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002236:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <SysTick_Config+0x40>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223e:	213f      	movs	r1, #63	; 0x3f
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	f7ff ffc2 	bl	80021cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <SysTick_Config+0x40>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224e:	4b04      	ldr	r3, [pc, #16]	; (8002260 <SysTick_Config+0x40>)
 8002250:	2207      	movs	r2, #7
 8002252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	e000e010 	.word	0xe000e010

08002264 <main>:
/**
 * @brief	main routine
 *
 */
int main (void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b090      	sub	sp, #64	; 0x40
 8002268:	af00      	add	r7, sp, #0
    char rxBuff[RXBUFFERSIZE];

    // init receive buffer and ring buffer
    memset (&rxBuff, 0, sizeof (rxBuff));
 800226a:	463b      	mov	r3, r7
 800226c:	2240      	movs	r2, #64	; 0x40
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f002 f851 	bl	8004318 <memset>
    memset (&cb[inix], 0, sizeof (cb[inix]));
 8002276:	4b84      	ldr	r3, [pc, #528]	; (8002488 <main+0x224>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	4b83      	ldr	r3, [pc, #524]	; (800248c <main+0x228>)
 800227e:	4413      	add	r3, r2
 8002280:	2201      	movs	r2, #1
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f002 f847 	bl	8004318 <memset>

    // init values for globals
    initGlobals();
 800228a:	f7fe fa0f 	bl	80006ac <initGlobals>

    // init DEBUG, UART, I2C, PWM
    initRetargetSwo();
 800228e:	f7ff fa05 	bl	800169c <initRetargetSwo>
    _init_uart0_ch0();
 8002292:	f7fe f8df 	bl	8000454 <_init_uart0_ch0>

    while (1)
    {
        if (_init_i2c1_ch0() == 0)
 8002296:	f7ff faef 	bl	8001878 <_init_i2c1_ch0>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d000      	beq.n	80022a2 <main+0x3e>
        {
#if DEBUG
            printf("Error I2C init, retry...\n");
#endif
        }
    }
 80022a0:	e7f9      	b.n	8002296 <main+0x32>
        if (_init_i2c1_ch0() == 0)
        {
#if DEBUG
            printf("I2C init done...\n");
#endif
            break;
 80022a2:	bf00      	nop
            printf("Error I2C init, retry...\n");
#endif
        }
    }

    initServoPWM();
 80022a4:	f7fe f9d6 	bl	8000654 <initServoPWM>

    // center both servo
    if (pwm(SERVOUPCENTER, 0) != 0)
 80022a8:	2200      	movs	r2, #0
 80022aa:	f04f 0000 	mov.w	r0, #0
 80022ae:	4978      	ldr	r1, [pc, #480]	; (8002490 <main+0x22c>)
 80022b0:	f7fe f9d6 	bl	8000660 <pwm>
    {
#if DEBUG
        printf("error centering servo...\n");
#endif
    }
    if (pwm(SERVOLOCENTER, 1) != 0)
 80022b4:	2201      	movs	r2, #1
 80022b6:	f04f 0000 	mov.w	r0, #0
 80022ba:	4975      	ldr	r1, [pc, #468]	; (8002490 <main+0x22c>)
 80022bc:	f7fe f9d0 	bl	8000660 <pwm>
        printf("error centering servo...\n");
#endif
    }

    // init LED output
    outputInit();
 80022c0:	f7fe fa6c 	bl	800079c <outputInit>
    ledSetting(0);
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7fe fcb5 	bl	8000c34 <ledSetting>

    // init BUTTONS
    inputInit();
 80022ca:	f7fe febb 	bl	8001044 <inputInit>
#endif

    // init MEMS
    while (1)
    {
        if (initMEMSsensor() == 0)
 80022ce:	f7ff fb8d 	bl	80019ec <initMEMSsensor>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1fa      	bne.n	80022ce <main+0x6a>
    }

    // config MEMS
    while (1)
    {
        if (configMEMSsensor() == 0)
 80022d8:	f7ff fbec 	bl	8001ab4 <configMEMSsensor>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d000      	beq.n	80022e4 <main+0x80>
        {
#if DEBUG
            printf("Error MEMS config, retry...\n");
#endif
        }
    }
 80022e2:	e7f9      	b.n	80022d8 <main+0x74>
        if (configMEMSsensor() == 0)
        {
#if DEBUG
            printf("MEMS config done...\n");
#endif
            break;
 80022e4:	bf00      	nop
#endif
        }
    }

    // set up SysTick
    SysTick_Config (SystemCoreClock / SYSTEMTICKDIVIDER);
 80022e6:	4b6b      	ldr	r3, [pc, #428]	; (8002494 <main+0x230>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a6b      	ldr	r2, [pc, #428]	; (8002498 <main+0x234>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	099b      	lsrs	r3, r3, #6
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff94 	bl	8002220 <SysTick_Config>

    // main loop
    while(1)
    {
        // clear buffer and receive incoming data
        memset (&rxBuff, 0, sizeof (rxBuff));
 80022f8:	463b      	mov	r3, r7
 80022fa:	2240      	movs	r2, #64	; 0x40
 80022fc:	2100      	movs	r1, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 f80a 	bl	8004318 <memset>
        if (_uart_get_string (rxBuff) != 0)
 8002304:	463b      	mov	r3, r7
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe f978 	bl	80005fc <_uart_get_string>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 80b6 	bne.w	8002480 <main+0x21c>
#if DEBUG
        printf("received %s\n", rxBuff);
#endif

        // check received command and react accodingly
        if (strncmp(rxBuff, "#REQ,", strlen(rxBuff)) == 0)
 8002314:	463b      	mov	r3, r7
 8002316:	4618      	mov	r0, r3
 8002318:	f002 f8f2 	bl	8004500 <strlen>
 800231c:	4602      	mov	r2, r0
 800231e:	463b      	mov	r3, r7
 8002320:	495e      	ldr	r1, [pc, #376]	; (800249c <main+0x238>)
 8002322:	4618      	mov	r0, r3
 8002324:	f002 f95a 	bl	80045dc <strncmp>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10e      	bne.n	800234c <main+0xe8>
        {
            // send data to PC GUI
            protocolComplete(direction, readAxes.axisX, readAxes.axisY, readAxes.axisZ);
 800232e:	4b5c      	ldr	r3, [pc, #368]	; (80024a0 <main+0x23c>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	b298      	uxth	r0, r3
 8002334:	4b5b      	ldr	r3, [pc, #364]	; (80024a4 <main+0x240>)
 8002336:	f9b3 1000 	ldrsh.w	r1, [r3]
 800233a:	4b5a      	ldr	r3, [pc, #360]	; (80024a4 <main+0x240>)
 800233c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002340:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <main+0x240>)
 8002342:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002346:	f7fe fb65 	bl	8000a14 <protocolComplete>
 800234a:	e7d5      	b.n	80022f8 <main+0x94>
        }
        else if (strncmp(rxBuff, "#END,", strlen(rxBuff)) == 0)
 800234c:	463b      	mov	r3, r7
 800234e:	4618      	mov	r0, r3
 8002350:	f002 f8d6 	bl	8004500 <strlen>
 8002354:	4602      	mov	r2, r0
 8002356:	463b      	mov	r3, r7
 8002358:	4953      	ldr	r1, [pc, #332]	; (80024a8 <main+0x244>)
 800235a:	4618      	mov	r0, r3
 800235c:	f002 f93e 	bl	80045dc <strncmp>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d113      	bne.n	800238e <main+0x12a>
        {
            // connection END
            ledSetting(0);
 8002366:	2000      	movs	r0, #0
 8002368:	f7fe fc64 	bl	8000c34 <ledSetting>
            startup = 0;
 800236c:	4b4f      	ldr	r3, [pc, #316]	; (80024ac <main+0x248>)
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
            connection = 0;
 8002372:	4b4f      	ldr	r3, [pc, #316]	; (80024b0 <main+0x24c>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
            memset (&cb[inix], 0, sizeof (cb[inix]));
 8002378:	4b43      	ldr	r3, [pc, #268]	; (8002488 <main+0x224>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4b43      	ldr	r3, [pc, #268]	; (800248c <main+0x228>)
 8002380:	4413      	add	r3, r2
 8002382:	2201      	movs	r2, #1
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f001 ffc6 	bl	8004318 <memset>
 800238c:	e7b4      	b.n	80022f8 <main+0x94>
        }
        else if (strncmp(rxBuff, "#CON,", strlen(rxBuff)) == 0)
 800238e:	463b      	mov	r3, r7
 8002390:	4618      	mov	r0, r3
 8002392:	f002 f8b5 	bl	8004500 <strlen>
 8002396:	4602      	mov	r2, r0
 8002398:	463b      	mov	r3, r7
 800239a:	4946      	ldr	r1, [pc, #280]	; (80024b4 <main+0x250>)
 800239c:	4618      	mov	r0, r3
 800239e:	f002 f91d 	bl	80045dc <strncmp>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d113      	bne.n	80023d0 <main+0x16c>
        {
            // connection established
            ledSetting(1);
 80023a8:	2001      	movs	r0, #1
 80023aa:	f7fe fc43 	bl	8000c34 <ledSetting>
            startup = 0;
 80023ae:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <main+0x248>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
            connection = 1;
 80023b4:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <main+0x24c>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
            memset (&cb[inix], 0, sizeof (cb[inix]));
 80023ba:	4b33      	ldr	r3, [pc, #204]	; (8002488 <main+0x224>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	4b32      	ldr	r3, [pc, #200]	; (800248c <main+0x228>)
 80023c2:	4413      	add	r3, r2
 80023c4:	2201      	movs	r2, #1
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f001 ffa5 	bl	8004318 <memset>
 80023ce:	e793      	b.n	80022f8 <main+0x94>
        }
        else if (strncmp(rxBuff, "#SER,f", strlen(rxBuff)) == 0)
 80023d0:	463b      	mov	r3, r7
 80023d2:	4618      	mov	r0, r3
 80023d4:	f002 f894 	bl	8004500 <strlen>
 80023d8:	4602      	mov	r2, r0
 80023da:	463b      	mov	r3, r7
 80023dc:	4936      	ldr	r1, [pc, #216]	; (80024b8 <main+0x254>)
 80023de:	4618      	mov	r0, r3
 80023e0:	f002 f8fc 	bl	80045dc <strncmp>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d103      	bne.n	80023f2 <main+0x18e>
        {
            // Servos off
            servoEnable = 0;
 80023ea:	4b34      	ldr	r3, [pc, #208]	; (80024bc <main+0x258>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e782      	b.n	80022f8 <main+0x94>
        }
        else if (strncmp(rxBuff, "#SER,n", strlen(rxBuff)) == 0)
 80023f2:	463b      	mov	r3, r7
 80023f4:	4618      	mov	r0, r3
 80023f6:	f002 f883 	bl	8004500 <strlen>
 80023fa:	4602      	mov	r2, r0
 80023fc:	463b      	mov	r3, r7
 80023fe:	4930      	ldr	r1, [pc, #192]	; (80024c0 <main+0x25c>)
 8002400:	4618      	mov	r0, r3
 8002402:	f002 f8eb 	bl	80045dc <strncmp>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d106      	bne.n	800241a <main+0x1b6>
        {
            // Servos on
            servoEnable = 1;
 800240c:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <main+0x258>)
 800240e:	2201      	movs	r2, #1
 8002410:	701a      	strb	r2, [r3, #0]
            startup = 0;
 8002412:	4b26      	ldr	r3, [pc, #152]	; (80024ac <main+0x248>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e76e      	b.n	80022f8 <main+0x94>
        }
        else if (strncmp(rxBuff, "#STA,", strlen(rxBuff)) == 0)
 800241a:	463b      	mov	r3, r7
 800241c:	4618      	mov	r0, r3
 800241e:	f002 f86f 	bl	8004500 <strlen>
 8002422:	4602      	mov	r2, r0
 8002424:	463b      	mov	r3, r7
 8002426:	4927      	ldr	r1, [pc, #156]	; (80024c4 <main+0x260>)
 8002428:	4618      	mov	r0, r3
 800242a:	f002 f8d7 	bl	80045dc <strncmp>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d103      	bne.n	800243c <main+0x1d8>
        {
            // send statistic package
            statisticSend = 1;
 8002434:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <main+0x264>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	e75d      	b.n	80022f8 <main+0x94>
        }
        else if (strncmp(rxBuff, "#AVG,a", strlen(rxBuff)) == 0)
 800243c:	463b      	mov	r3, r7
 800243e:	4618      	mov	r0, r3
 8002440:	f002 f85e 	bl	8004500 <strlen>
 8002444:	4602      	mov	r2, r0
 8002446:	463b      	mov	r3, r7
 8002448:	4920      	ldr	r1, [pc, #128]	; (80024cc <main+0x268>)
 800244a:	4618      	mov	r0, r3
 800244c:	f002 f8c6 	bl	80045dc <strncmp>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d103      	bne.n	800245e <main+0x1fa>
        {
            // average angle
            averageChoice = 0;
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <main+0x26c>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	e74c      	b.n	80022f8 <main+0x94>
        }
        else if (strncmp(rxBuff, "#AVG,p", strlen(rxBuff)) == 0)
 800245e:	463b      	mov	r3, r7
 8002460:	4618      	mov	r0, r3
 8002462:	f002 f84d 	bl	8004500 <strlen>
 8002466:	4602      	mov	r2, r0
 8002468:	463b      	mov	r3, r7
 800246a:	491a      	ldr	r1, [pc, #104]	; (80024d4 <main+0x270>)
 800246c:	4618      	mov	r0, r3
 800246e:	f002 f8b5 	bl	80045dc <strncmp>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d105      	bne.n	8002484 <main+0x220>
        {
            // average PWM
            averageChoice = 1;
 8002478:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <main+0x26c>)
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	e73b      	b.n	80022f8 <main+0x94>
        if (_uart_get_string (rxBuff) != 0)
        {
#if DEBUG
            printf("error receiving from UART...\n");
#endif
            continue;
 8002480:	bf00      	nop
 8002482:	e739      	b.n	80022f8 <main+0x94>
            // average PWM
            averageChoice = 1;
        }
        else
        {
            continue;
 8002484:	bf00      	nop
        }
    }
 8002486:	e737      	b.n	80022f8 <main+0x94>
 8002488:	20000ad2 	.word	0x20000ad2
 800248c:	20000ab4 	.word	0x20000ab4
 8002490:	401e0000 	.word	0x401e0000
 8002494:	2000ffc0 	.word	0x2000ffc0
 8002498:	10624dd3 	.word	0x10624dd3
 800249c:	08009038 	.word	0x08009038
 80024a0:	20000ad1 	.word	0x20000ad1
 80024a4:	20000ad8 	.word	0x20000ad8
 80024a8:	08009040 	.word	0x08009040
 80024ac:	20000aac 	.word	0x20000aac
 80024b0:	20000ade 	.word	0x20000ade
 80024b4:	08009048 	.word	0x08009048
 80024b8:	08009050 	.word	0x08009050
 80024bc:	20000ad3 	.word	0x20000ad3
 80024c0:	08009058 	.word	0x08009058
 80024c4:	08009060 	.word	0x08009060
 80024c8:	20000aa8 	.word	0x20000aa8
 80024cc:	08009068 	.word	0x08009068
 80024d0:	20000ad6 	.word	0x20000ad6
 80024d4:	08009070 	.word	0x08009070

080024d8 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 80024e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop

08002510 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
 return -1;
 8002514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop

08002524 <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <_fstat+0x16>
  return -1;
 8002534:	f04f 33ff 	mov.w	r3, #4294967295
 8002538:	e001      	b.n	800253e <_fstat+0x1a>
 else
  return -2;
 800253a:	f06f 0301 	mvn.w	r3, #1
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop

0800254c <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <_sbrk+0x60>)
 8002556:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 8002558:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <_sbrk+0x64>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d108      	bne.n	8002572 <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <_sbrk+0x64>)
 8002562:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <_sbrk+0x68>)
 8002564:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 8002566:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <_sbrk+0x64>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	4413      	add	r3, r2
 800256e:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <_sbrk+0x6c>)
 8002570:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 8002572:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <_sbrk+0x64>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8002578:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <_sbrk+0x64>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 8002584:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8002588:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <_sbrk+0x6c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	429a      	cmp	r2, r3
 8002592:	d301      	bcc.n	8002598 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 8002594:	2300      	movs	r3, #0
 8002596:	e003      	b.n	80025a0 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 8002598:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <_sbrk+0x64>)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 800259e:	693b      	ldr	r3, [r7, #16]
 }
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	0000f4d0 	.word	0x0000f4d0
 80025b0:	20000a6c 	.word	0x20000a6c
 80025b4:	20000af0 	.word	0x20000af0
 80025b8:	20000a70 	.word	0x20000a70

080025bc <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop

080025cc <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e003      	b.n	80025fa <delay+0x16>
  {
    __NOP();
 80025f2:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3301      	adds	r3, #1
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d3f7      	bcc.n	80025f2 <delay+0xe>
  {
    __NOP();
  }
}
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop

08002610 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8002610:	b598      	push	{r3, r4, r7, lr}
 8002612:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8002614:	4a06      	ldr	r2, [pc, #24]	; (8002630 <SystemInit+0x20>)
 8002616:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800261a:	4614      	mov	r4, r2
 800261c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800261e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8002622:	f000 f807 	bl	8002634 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8002626:	f000 f83d 	bl	80026a4 <SystemCoreClockSetup>
}
 800262a:	bf00      	nop
 800262c:	bd98      	pop	{r3, r4, r7, pc}
 800262e:	bf00      	nop
 8002630:	2000ffc4 	.word	0x2000ffc4

08002634 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800263a:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 800263c:	4b16      	ldr	r3, [pc, #88]	; (8002698 <SystemCoreSetup+0x64>)
 800263e:	4a17      	ldr	r2, [pc, #92]	; (800269c <SystemCoreSetup+0x68>)
 8002640:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002642:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002646:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8002648:	4a13      	ldr	r2, [pc, #76]	; (8002698 <SystemCoreSetup+0x64>)
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <SystemCoreSetup+0x64>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8002658:	4a0f      	ldr	r2, [pc, #60]	; (8002698 <SystemCoreSetup+0x64>)
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <SystemCoreSetup+0x64>)
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f023 0308 	bic.w	r3, r3, #8
 8002662:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8002664:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <SystemCoreSetup+0x6c>)
 8002666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800266a:	3314      	adds	r3, #20
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f023 030f 	bic.w	r3, r3, #15
 8002676:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f043 0303 	orr.w	r3, r3, #3
 800267e:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <SystemCoreSetup+0x6c>)
 8002682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002686:	3314      	adds	r3, #20
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	601a      	str	r2, [r3, #0]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00
 800269c:	08000000 	.word	0x08000000
 80026a0:	58001000 	.word	0x58001000

080026a4 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80026a8:	4b75      	ldr	r3, [pc, #468]	; (8002880 <SystemCoreClockSetup+0x1dc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10c      	bne.n	80026ce <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 80026b4:	4a72      	ldr	r2, [pc, #456]	; (8002880 <SystemCoreClockSetup+0x1dc>)
 80026b6:	4b72      	ldr	r3, [pc, #456]	; (8002880 <SystemCoreClockSetup+0x1dc>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80026c0:	bf00      	nop
 80026c2:	4b6f      	ldr	r3, [pc, #444]	; (8002880 <SystemCoreClockSetup+0x1dc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f9      	beq.n	80026c2 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80026ce:	4b6d      	ldr	r3, [pc, #436]	; (8002884 <SystemCoreClockSetup+0x1e0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80026da:	4a6a      	ldr	r2, [pc, #424]	; (8002884 <SystemCoreClockSetup+0x1e0>)
 80026dc:	4b69      	ldr	r3, [pc, #420]	; (8002884 <SystemCoreClockSetup+0x1e0>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e4:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80026e6:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80026ea:	f7ff ff7b 	bl	80025e4 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80026ee:	4a66      	ldr	r2, [pc, #408]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 80026f0:	4b65      	ldr	r3, [pc, #404]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026f8:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80026fa:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80026fe:	f7ff ff71 	bl	80025e4 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002702:	4a61      	ldr	r2, [pc, #388]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 8002704:	4b60      	ldr	r3, [pc, #384]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270c:	f023 0302 	bic.w	r3, r3, #2
 8002710:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8002712:	4b5e      	ldr	r3, [pc, #376]	; (800288c <SystemCoreClockSetup+0x1e8>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800271a:	2b00      	cmp	r3, #0
 800271c:	d029      	beq.n	8002772 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800271e:	4a5b      	ldr	r2, [pc, #364]	; (800288c <SystemCoreClockSetup+0x1e8>)
 8002720:	4b5a      	ldr	r3, [pc, #360]	; (800288c <SystemCoreClockSetup+0x1e8>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002728:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800272c:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800272e:	f000 f927 	bl	8002980 <OSCHP_GetFrequency>
 8002732:	4602      	mov	r2, r0
 8002734:	4b56      	ldr	r3, [pc, #344]	; (8002890 <SystemCoreClockSetup+0x1ec>)
 8002736:	fba3 2302 	umull	r2, r3, r3, r2
 800273a:	0d1b      	lsrs	r3, r3, #20
 800273c:	3b01      	subs	r3, #1
 800273e:	041b      	lsls	r3, r3, #16
 8002740:	4952      	ldr	r1, [pc, #328]	; (800288c <SystemCoreClockSetup+0x1e8>)
 8002742:	4a52      	ldr	r2, [pc, #328]	; (800288c <SystemCoreClockSetup+0x1e8>)
 8002744:	6852      	ldr	r2, [r2, #4]
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 800274a:	4a4f      	ldr	r2, [pc, #316]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 800274c:	4b4e      	ldr	r3, [pc, #312]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002756:	4a4c      	ldr	r2, [pc, #304]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 8002758:	4b4b      	ldr	r3, [pc, #300]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002760:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8002762:	bf00      	nop
 8002764:	4b48      	ldr	r3, [pc, #288]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800276c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002770:	d1f8      	bne.n	8002764 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002772:	4a45      	ldr	r2, [pc, #276]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 8002774:	4b44      	ldr	r3, [pc, #272]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800277e:	4a42      	ldr	r2, [pc, #264]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 8002780:	4b41      	ldr	r3, [pc, #260]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f043 0310 	orr.w	r3, r3, #16
 8002788:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800278a:	4b3f      	ldr	r3, [pc, #252]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 800278c:	4a41      	ldr	r2, [pc, #260]	; (8002894 <SystemCoreClockSetup+0x1f0>)
 800278e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002790:	4a3d      	ldr	r2, [pc, #244]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 8002792:	4b3d      	ldr	r3, [pc, #244]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800279a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 800279c:	4a3a      	ldr	r2, [pc, #232]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 800279e:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f023 0310 	bic.w	r3, r3, #16
 80027a6:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 80027a8:	4a37      	ldr	r2, [pc, #220]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 80027aa:	4b37      	ldr	r3, [pc, #220]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b2:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80027b4:	bf00      	nop
 80027b6:	4b34      	ldr	r3, [pc, #208]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f9      	beq.n	80027b6 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80027c2:	4a31      	ldr	r2, [pc, #196]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80027ce:	bf00      	nop
 80027d0:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f9      	bne.n	80027d0 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80027dc:	4a2e      	ldr	r2, [pc, #184]	; (8002898 <SystemCoreClockSetup+0x1f4>)
 80027de:	4b2e      	ldr	r3, [pc, #184]	; (8002898 <SystemCoreClockSetup+0x1f4>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e6:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80027e8:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <SystemCoreClockSetup+0x1f4>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <SystemCoreClockSetup+0x1f4>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80027f4:	4b28      	ldr	r3, [pc, #160]	; (8002898 <SystemCoreClockSetup+0x1f4>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80027fa:	4b27      	ldr	r3, [pc, #156]	; (8002898 <SystemCoreClockSetup+0x1f4>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8002800:	4b25      	ldr	r3, [pc, #148]	; (8002898 <SystemCoreClockSetup+0x1f4>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8002806:	4b24      	ldr	r3, [pc, #144]	; (8002898 <SystemCoreClockSetup+0x1f4>)
 8002808:	2203      	movs	r2, #3
 800280a:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 800280c:	4a1e      	ldr	r2, [pc, #120]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 800280e:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002816:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 800281a:	4a20      	ldr	r2, [pc, #128]	; (800289c <SystemCoreClockSetup+0x1f8>)
 800281c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 800281e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002822:	f7ff fedf 	bl	80025e4 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002826:	bf00      	nop
 8002828:	4b17      	ldr	r3, [pc, #92]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f9      	beq.n	8002828 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 8002836:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <SystemCoreClockSetup+0x1fc>)
 8002838:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 800283a:	f241 1094 	movw	r0, #4500	; 0x1194
 800283e:	f7ff fed1 	bl	80025e4 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002842:	bf00      	nop
 8002844:	4b10      	ldr	r3, [pc, #64]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f9      	beq.n	8002844 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 8002852:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <SystemCoreClockSetup+0x200>)
 8002854:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8002856:	f241 7070 	movw	r0, #6000	; 0x1770
 800285a:	f7ff fec3 	bl	80025e4 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800285e:	bf00      	nop
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <SystemCoreClockSetup+0x1e4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f9      	beq.n	8002860 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 800286c:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <SystemCoreClockSetup+0x204>)
 800286e:	2205      	movs	r2, #5
 8002870:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <SystemCoreClockSetup+0x1f4>)
 8002874:	2200      	movs	r2, #0
 8002876:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8002878:	f000 f818 	bl	80028ac <SystemCoreClockUpdate>
}
 800287c:	bf00      	nop
 800287e:	bd80      	pop	{r7, pc}
 8002880:	50004200 	.word	0x50004200
 8002884:	50004400 	.word	0x50004400
 8002888:	50004710 	.word	0x50004710
 800288c:	50004700 	.word	0x50004700
 8002890:	6b5fca6b 	.word	0x6b5fca6b
 8002894:	01134f00 	.word	0x01134f00
 8002898:	50004600 	.word	0x50004600
 800289c:	01074f00 	.word	0x01074f00
 80028a0:	01044f00 	.word	0x01044f00
 80028a4:	01034f00 	.word	0x01034f00
 80028a8:	50004160 	.word	0x50004160

080028ac <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80028b2:	4b2f      	ldr	r3, [pc, #188]	; (8002970 <SystemCoreClockUpdate+0xc4>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d03e      	beq.n	800293c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80028be:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <SystemCoreClockUpdate+0xc8>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80028ca:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <SystemCoreClockUpdate+0xcc>)
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	e002      	b.n	80028d6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80028d0:	f000 f856 	bl	8002980 <OSCHP_GetFrequency>
 80028d4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80028d6:	4b27      	ldr	r3, [pc, #156]	; (8002974 <SystemCoreClockUpdate+0xc8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d020      	beq.n	8002924 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80028e2:	4b24      	ldr	r3, [pc, #144]	; (8002974 <SystemCoreClockUpdate+0xc8>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80028ea:	0e1b      	lsrs	r3, r3, #24
 80028ec:	3301      	adds	r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80028f0:	4b20      	ldr	r3, [pc, #128]	; (8002974 <SystemCoreClockUpdate+0xc8>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	3301      	adds	r3, #1
 80028fc:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80028fe:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <SystemCoreClockUpdate+0xc8>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002906:	0c1b      	lsrs	r3, r3, #16
 8002908:	3301      	adds	r3, #1
 800290a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	fb02 f303 	mul.w	r3, r2, r3
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	e00d      	b.n	8002940 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <SystemCoreClockUpdate+0xc8>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800292c:	3301      	adds	r3, #1
 800292e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	fbb2 f3f3 	udiv	r3, r2, r3
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	e001      	b.n	8002940 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800293c:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <SystemCoreClockUpdate+0xcc>)
 800293e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <SystemCoreClockUpdate+0xc4>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	b2db      	uxtb	r3, r3
 8002946:	3301      	adds	r3, #1
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <SystemCoreClockUpdate+0xc4>)
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	3301      	adds	r3, #1
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002960:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8002962:	4a06      	ldr	r2, [pc, #24]	; (800297c <SystemCoreClockUpdate+0xd0>)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	50004600 	.word	0x50004600
 8002974:	50004710 	.word	0x50004710
 8002978:	016e3600 	.word	0x016e3600
 800297c:	2000ffc0 	.word	0x2000ffc0

08002980 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8002984:	4b02      	ldr	r3, [pc, #8]	; (8002990 <OSCHP_GetFrequency+0x10>)
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	00b71b00 	.word	0x00b71b00

08002994 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	460b      	mov	r3, r1
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80029a2:	7afb      	ldrb	r3, [r7, #11]
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	4618      	mov	r0, r3
 80029aa:	7afb      	ldrb	r3, [r7, #11]
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3204      	adds	r2, #4
 80029b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80029ba:	7afb      	ldrb	r3, [r7, #11]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	21f8      	movs	r1, #248	; 0xf8
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	ea02 0103 	and.w	r1, r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1d02      	adds	r2, r0, #4
 80029d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80029da:	7afb      	ldrb	r3, [r7, #11]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	2103      	movs	r1, #3
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	401a      	ands	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a38      	ldr	r2, [pc, #224]	; (8002ad0 <XMC_GPIO_Init+0x13c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d003      	beq.n	80029fc <XMC_GPIO_Init+0x68>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a37      	ldr	r2, [pc, #220]	; (8002ad4 <XMC_GPIO_Init+0x140>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d10a      	bne.n	8002a12 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a00:	7afb      	ldrb	r3, [r7, #11]
 8002a02:	2101      	movs	r1, #1
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	661a      	str	r2, [r3, #96]	; 0x60
 8002a10:	e03c      	b.n	8002a8c <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	7afb      	ldrb	r3, [r7, #11]
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8002a1e:	7afb      	ldrb	r3, [r7, #11]
 8002a20:	08db      	lsrs	r3, r3, #3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	4618      	mov	r0, r3
 8002a26:	7afb      	ldrb	r3, [r7, #11]
 8002a28:	08db      	lsrs	r3, r3, #3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3210      	adds	r2, #16
 8002a32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a36:	7afb      	ldrb	r3, [r7, #11]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	2107      	movs	r1, #7
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	ea02 0103 	and.w	r1, r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f100 0210 	add.w	r2, r0, #16
 8002a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8002a54:	7afb      	ldrb	r3, [r7, #11]
 8002a56:	08db      	lsrs	r3, r3, #3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	7afb      	ldrb	r3, [r7, #11]
 8002a5e:	08db      	lsrs	r3, r3, #3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3210      	adds	r2, #16
 8002a68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	7a1b      	ldrb	r3, [r3, #8]
 8002a70:	4619      	mov	r1, r3
 8002a72:	7afb      	ldrb	r3, [r7, #11]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	ea42 0103 	orr.w	r1, r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f100 0210 	add.w	r2, r0, #16
 8002a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8002a8c:	7afb      	ldrb	r3, [r7, #11]
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	7afb      	ldrb	r3, [r7, #11]
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3204      	adds	r2, #4
 8002aa0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	ea42 0103 	orr.w	r1, r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1d02      	adds	r2, r0, #4
 8002abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	48028e00 	.word	0x48028e00
 8002ad4:	48028f00 	.word	0x48028f00

08002ad8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002aea:	b2db      	uxtb	r3, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8002b1e:	2310      	movs	r3, #16
 8002b20:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fa62 	bl	8002fec <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	79db      	ldrb	r3, [r3, #7]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	79db      	ldrb	r3, [r3, #7]
 8002b34:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 faa2 	bl	8003088 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	799b      	ldrb	r3, [r3, #6]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	3301      	adds	r3, #1
 8002b52:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	791b      	ldrb	r3, [r3, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	795b      	ldrb	r3, [r3, #5]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	795b      	ldrb	r3, [r3, #5]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	635a      	str	r2, [r3, #52]	; 0x34
 8002b8c:	e008      	b.n	8002ba0 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	791b      	ldrb	r3, [r3, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f04f 32ff 	mov.w	r2, #4294967295
 8002bae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	891b      	ldrh	r3, [r3, #8]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop

08002bc4 <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002bd6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d110      	bne.n	8002c00 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002bde:	bf00      	nop
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ff79 	bl	8002ad8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b80      	cmp	r3, #128	; 0x80
 8002bea:	d0f9      	beq.n	8002be0 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002bec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff81 	bl	8002af8 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 8002bfe:	e003      	b.n	8002c08 <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 8002c00:	887a      	ldrh	r2, [r7, #2]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002c1e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	81fb      	strh	r3, [r7, #14]
 8002c2c:	e003      	b.n	8002c36 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002c34:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8002c36:	89fb      	ldrh	r3, [r7, #14]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c56:	b2db      	uxtb	r3, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop

08002c88 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f9aa 	bl	8002fec <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <XMC_I2C_CH_Init+0x4c>)
 8002c9c:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	889b      	ldrh	r3, [r3, #4]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f817 	bl	8002cd8 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f831 	bl	8002d18 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	073f0303 	.word	0x073f0303

08002cd8 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 8002ce4:	887b      	ldrh	r3, [r7, #2]
 8002ce6:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8002cea:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8002cee:	d109      	bne.n	8002d04 <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 8002cf0:	887b      	ldrh	r3, [r7, #2]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	887b      	ldrh	r3, [r7, #2]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8002d02:	e003      	b.n	8002d0c <XMC_I2C_CH_SetSlaveAddress+0x34>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8002d04:	887b      	ldrh	r3, [r7, #2]
 8002d06:	021a      	lsls	r2, r3, #8
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	4a17      	ldr	r2, [pc, #92]	; (8002d88 <XMC_I2C_CH_SetBaudrate+0x70>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d810      	bhi.n	8002d50 <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 8002d3a:	220a      	movs	r2, #10
 8002d3c:	6839      	ldr	r1, [r7, #0]
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f9a2 	bl	8003088 <XMC_USIC_CH_SetBaudrate>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d119      	bne.n	8002d7e <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
 8002d4e:	e016      	b.n	8002d7e <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4a0e      	ldr	r2, [pc, #56]	; (8002d8c <XMC_I2C_CH_SetBaudrate+0x74>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d810      	bhi.n	8002d7a <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 8002d64:	2219      	movs	r2, #25
 8002d66:	6839      	ldr	r1, [r7, #0]
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f98d 	bl	8003088 <XMC_USIC_CH_SetBaudrate>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d104      	bne.n	8002d7e <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	e001      	b.n	8002d7e <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	000186a0 	.word	0x000186a0
 8002d8c:	00061a80 	.word	0x00061a80

08002d90 <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8002daa:	787b      	ldrb	r3, [r7, #1]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d103      	bne.n	8002db8 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002dbe:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d110      	bne.n	8002de8 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002dc6:	bf00      	nop
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ff3b 	bl	8002c44 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b80      	cmp	r3, #128	; 0x80
 8002dd2:	d0f9      	beq.n	8002dc8 <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002dd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff ff43 	bl	8002c64 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = temp;
  }
}
 8002de6:	e003      	b.n	8002df0 <XMC_I2C_CH_MasterStart+0x60>

    channel->TBUF[0] = temp;
  }
  else
  {
    channel->IN[0U] = temp;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002df0:	bf00      	nop
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]
 8002e04:	4613      	mov	r3, r2
 8002e06:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8002e08:	887b      	ldrh	r3, [r7, #2]
 8002e0a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8002e12:	787b      	ldrb	r3, [r7, #1]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d103      	bne.n	8002e20 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e26:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d110      	bne.n	8002e50 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002e2e:	bf00      	nop
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff ff07 	bl	8002c44 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b80      	cmp	r3, #128	; 0x80
 8002e3a:	d0f9      	beq.n	8002e30 <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff ff0f 	bl	8002c64 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = tmp;
  }
}
 8002e4e:	e003      	b.n	8002e58 <XMC_I2C_CH_MasterRepeatedStart+0x60>

    channel->TBUF[0] = tmp;
  }
  else
  {
    channel->IN[0U] = tmp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e6e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d111      	bne.n	8002e9a <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002e76:	bf00      	nop
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff fee3 	bl	8002c44 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b80      	cmp	r3, #128	; 0x80
 8002e82:	d0f9      	beq.n	8002e78 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002e84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff feeb 	bl	8002c64 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
}
 8002e98:	e004      	b.n	8002ea4 <XMC_I2C_CH_MasterStop+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002ea0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ebe:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d110      	bne.n	8002ee8 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002ec6:	bf00      	nop
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff febb 	bl	8002c44 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b80      	cmp	r3, #128	; 0x80
 8002ed2:	d0f9      	beq.n	8002ec8 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002ed4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff fec3 	bl	8002c64 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
}
 8002ee6:	e003      	b.n	8002ef0 <XMC_I2C_CH_MasterTransmit+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <XMC_I2C_CH_MasterReceiveNack>:
  }
}

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f06:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d111      	bne.n	8002f32 <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002f0e:	bf00      	nop
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff fe97 	bl	8002c44 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b80      	cmp	r3, #128	; 0x80
 8002f1a:	d0f9      	beq.n	8002f10 <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002f1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff fe9f 	bl	8002c64 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
}
 8002f30:	e004      	b.n	8002f3c <XMC_I2C_CH_MasterReceiveNack+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002f38:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002f52:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	73fb      	strb	r3, [r7, #15]
 8002f60:	e003      	b.n	8002f6a <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002f68:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	2000ffc0 	.word	0x2000ffc0

08002f90 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0f1b      	lsrs	r3, r3, #28
 8002f9c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002fa4:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8002fb4:	4413      	add	r3, r2
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	601a      	str	r2, [r3, #0]
}
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	50004414 	.word	0x50004414

08002fcc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8002fd0:	f7ff ffd2 	bl	8002f78 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8002fd4:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8002fde:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	50004600 	.word	0x50004600

08002fec <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a1b      	ldr	r2, [pc, #108]	; (8003064 <XMC_USIC_CH_Enable+0x78>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d003      	beq.n	8003004 <XMC_USIC_CH_Enable+0x18>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a1a      	ldr	r2, [pc, #104]	; (8003068 <XMC_USIC_CH_Enable+0x7c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d103      	bne.n	800300c <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8003004:	4819      	ldr	r0, [pc, #100]	; (800306c <XMC_USIC_CH_Enable+0x80>)
 8003006:	f000 f91f 	bl	8003248 <XMC_USIC_Enable>
 800300a:	e016      	b.n	800303a <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a18      	ldr	r2, [pc, #96]	; (8003070 <XMC_USIC_CH_Enable+0x84>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d003      	beq.n	800301c <XMC_USIC_CH_Enable+0x30>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a17      	ldr	r2, [pc, #92]	; (8003074 <XMC_USIC_CH_Enable+0x88>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d103      	bne.n	8003024 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 800301c:	4816      	ldr	r0, [pc, #88]	; (8003078 <XMC_USIC_CH_Enable+0x8c>)
 800301e:	f000 f913 	bl	8003248 <XMC_USIC_Enable>
 8003022:	e00a      	b.n	800303a <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a15      	ldr	r2, [pc, #84]	; (800307c <XMC_USIC_CH_Enable+0x90>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d003      	beq.n	8003034 <XMC_USIC_CH_Enable+0x48>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a14      	ldr	r2, [pc, #80]	; (8003080 <XMC_USIC_CH_Enable+0x94>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d102      	bne.n	800303a <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8003034:	4813      	ldr	r0, [pc, #76]	; (8003084 <XMC_USIC_CH_Enable+0x98>)
 8003036:	f000 f907 	bl	8003248 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2203      	movs	r2, #3
 800303e:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8003040:	bf00      	nop
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f9      	beq.n	8003042 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f023 020f 	bic.w	r2, r3, #15
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40030000 	.word	0x40030000
 8003068:	40030200 	.word	0x40030200
 800306c:	40030008 	.word	0x40030008
 8003070:	48020000 	.word	0x48020000
 8003074:	48020200 	.word	0x48020200
 8003078:	48020008 	.word	0x48020008
 800307c:	48024000 	.word	0x48024000
 8003080:	48024200 	.word	0x48024200
 8003084:	48024008 	.word	0x48024008

08003088 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08e      	sub	sp, #56	; 0x38
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b63      	cmp	r3, #99	; 0x63
 8003098:	d958      	bls.n	800314c <XMC_USIC_CH_SetBaudrate+0xc4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d055      	beq.n	800314c <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80030a0:	f7ff ff94 	bl	8002fcc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80030a8:	fba3 2302 	umull	r2, r3, r3, r2
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	4a2b      	ldr	r2, [pc, #172]	; (8003160 <XMC_USIC_CH_SetBaudrate+0xd8>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 80030bc:	2301      	movs	r3, #1
 80030be:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80030c0:	2301      	movs	r3, #1
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80030c4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 80030ca:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80030ce:	633b      	str	r3, [r7, #48]	; 0x30
 80030d0:	e022      	b.n	8003118 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d6:	fb02 f203 	mul.w	r2, r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e6:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	0a9b      	lsrs	r3, r3, #10
 80030ec:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030f4:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fc:	d209      	bcs.n	8003112 <XMC_USIC_CH_SetBaudrate+0x8a>
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	429a      	cmp	r2, r3
 8003104:	d205      	bcs.n	8003112 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 800310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	3b01      	subs	r3, #1
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1d9      	bne.n	80030d2 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	695a      	ldr	r2, [r3, #20]
 800312c:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <XMC_USIC_CH_SetBaudrate+0xdc>)
 800312e:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	3a01      	subs	r2, #1
 8003134:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8003136:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313a:	3b01      	subs	r3, #1
 800313c:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800313e:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800314a:	e002      	b.n	8003152 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8003152:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8003156:	4618      	mov	r0, r3
 8003158:	3738      	adds	r7, #56	; 0x38
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	51eb851f 	.word	0x51eb851f
 8003164:	fc0080ef 	.word	0xfc0080ef

08003168 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800317e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8003190:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	0211      	lsls	r1, r2, #8
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 800319a:	79fa      	ldrb	r2, [r7, #7]
 800319c:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 800319e:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 80031a0:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	f8ffc0c0 	.word	0xf8ffc0c0

080031b8 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80031ce:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 80031e0:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	0211      	lsls	r1, r2, #8
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 80031ea:	79fa      	ldrb	r2, [r7, #7]
 80031ec:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 80031ee:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	efffc0c0 	.word	0xefffc0c0

0800320c <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	460b      	mov	r3, r1
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8003220:	7afb      	ldrb	r3, [r7, #11]
 8003222:	2107      	movs	r1, #7
 8003224:	fa01 f303 	lsl.w	r3, r1, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 800322c:	7afb      	ldrb	r3, [r7, #11]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8003234:	431a      	orrs	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a0d      	ldr	r2, [pc, #52]	; (8003288 <XMC_USIC_Enable+0x40>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d104      	bne.n	8003262 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8003258:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800325c:	f7ff fe98 	bl	8002f90 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8003260:	e00e      	b.n	8003280 <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a09      	ldr	r2, [pc, #36]	; (800328c <XMC_USIC_Enable+0x44>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d103      	bne.n	8003272 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 800326a:	4809      	ldr	r0, [pc, #36]	; (8003290 <XMC_USIC_Enable+0x48>)
 800326c:	f7ff fe90 	bl	8002f90 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8003270:	e006      	b.n	8003280 <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a07      	ldr	r2, [pc, #28]	; (8003294 <XMC_USIC_Enable+0x4c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d102      	bne.n	8003280 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 800327a:	4807      	ldr	r0, [pc, #28]	; (8003298 <XMC_USIC_Enable+0x50>)
 800327c:	f7ff fe88 	bl	8002f90 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40030008 	.word	0x40030008
 800328c:	48020008 	.word	0x48020008
 8003290:	10000080 	.word	0x10000080
 8003294:	48024008 	.word	0x48024008
 8003298:	10000100 	.word	0x10000100
 800329c:	00000000 	.word	0x00000000

080032a0 <atan>:
 80032a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a4:	4bc4      	ldr	r3, [pc, #784]	; (80035b8 <atan+0x318>)
 80032a6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80032aa:	429e      	cmp	r6, r3
 80032ac:	4604      	mov	r4, r0
 80032ae:	460d      	mov	r5, r1
 80032b0:	468b      	mov	fp, r1
 80032b2:	dd0e      	ble.n	80032d2 <atan+0x32>
 80032b4:	4bc1      	ldr	r3, [pc, #772]	; (80035bc <atan+0x31c>)
 80032b6:	429e      	cmp	r6, r3
 80032b8:	f300 80ac 	bgt.w	8003414 <atan+0x174>
 80032bc:	f000 80a7 	beq.w	800340e <atan+0x16e>
 80032c0:	f1bb 0f00 	cmp.w	fp, #0
 80032c4:	f340 80e9 	ble.w	800349a <atan+0x1fa>
 80032c8:	a19f      	add	r1, pc, #636	; (adr r1, 8003548 <atan+0x2a8>)
 80032ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d2:	4bbb      	ldr	r3, [pc, #748]	; (80035c0 <atan+0x320>)
 80032d4:	429e      	cmp	r6, r3
 80032d6:	f300 80b5 	bgt.w	8003444 <atan+0x1a4>
 80032da:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80032de:	429e      	cmp	r6, r3
 80032e0:	f340 80a0 	ble.w	8003424 <atan+0x184>
 80032e4:	f04f 3aff 	mov.w	sl, #4294967295
 80032e8:	4622      	mov	r2, r4
 80032ea:	462b      	mov	r3, r5
 80032ec:	4620      	mov	r0, r4
 80032ee:	4629      	mov	r1, r5
 80032f0:	f000 fc52 	bl	8003b98 <__aeabi_dmul>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4680      	mov	r8, r0
 80032fa:	4689      	mov	r9, r1
 80032fc:	f000 fc4c 	bl	8003b98 <__aeabi_dmul>
 8003300:	a393      	add	r3, pc, #588	; (adr r3, 8003550 <atan+0x2b0>)
 8003302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003306:	4606      	mov	r6, r0
 8003308:	460f      	mov	r7, r1
 800330a:	f000 fc45 	bl	8003b98 <__aeabi_dmul>
 800330e:	a392      	add	r3, pc, #584	; (adr r3, 8003558 <atan+0x2b8>)
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	f000 fa8e 	bl	8003834 <__adddf3>
 8003318:	4632      	mov	r2, r6
 800331a:	463b      	mov	r3, r7
 800331c:	f000 fc3c 	bl	8003b98 <__aeabi_dmul>
 8003320:	a38f      	add	r3, pc, #572	; (adr r3, 8003560 <atan+0x2c0>)
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f000 fa85 	bl	8003834 <__adddf3>
 800332a:	4632      	mov	r2, r6
 800332c:	463b      	mov	r3, r7
 800332e:	f000 fc33 	bl	8003b98 <__aeabi_dmul>
 8003332:	a38d      	add	r3, pc, #564	; (adr r3, 8003568 <atan+0x2c8>)
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f000 fa7c 	bl	8003834 <__adddf3>
 800333c:	4632      	mov	r2, r6
 800333e:	463b      	mov	r3, r7
 8003340:	f000 fc2a 	bl	8003b98 <__aeabi_dmul>
 8003344:	a38a      	add	r3, pc, #552	; (adr r3, 8003570 <atan+0x2d0>)
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f000 fa73 	bl	8003834 <__adddf3>
 800334e:	4632      	mov	r2, r6
 8003350:	463b      	mov	r3, r7
 8003352:	f000 fc21 	bl	8003b98 <__aeabi_dmul>
 8003356:	a388      	add	r3, pc, #544	; (adr r3, 8003578 <atan+0x2d8>)
 8003358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335c:	f000 fa6a 	bl	8003834 <__adddf3>
 8003360:	4642      	mov	r2, r8
 8003362:	464b      	mov	r3, r9
 8003364:	f000 fc18 	bl	8003b98 <__aeabi_dmul>
 8003368:	a385      	add	r3, pc, #532	; (adr r3, 8003580 <atan+0x2e0>)
 800336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336e:	4680      	mov	r8, r0
 8003370:	4689      	mov	r9, r1
 8003372:	4630      	mov	r0, r6
 8003374:	4639      	mov	r1, r7
 8003376:	f000 fc0f 	bl	8003b98 <__aeabi_dmul>
 800337a:	a383      	add	r3, pc, #524	; (adr r3, 8003588 <atan+0x2e8>)
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	f000 fa56 	bl	8003830 <__aeabi_dsub>
 8003384:	4632      	mov	r2, r6
 8003386:	463b      	mov	r3, r7
 8003388:	f000 fc06 	bl	8003b98 <__aeabi_dmul>
 800338c:	a380      	add	r3, pc, #512	; (adr r3, 8003590 <atan+0x2f0>)
 800338e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003392:	f000 fa4d 	bl	8003830 <__aeabi_dsub>
 8003396:	4632      	mov	r2, r6
 8003398:	463b      	mov	r3, r7
 800339a:	f000 fbfd 	bl	8003b98 <__aeabi_dmul>
 800339e:	a37e      	add	r3, pc, #504	; (adr r3, 8003598 <atan+0x2f8>)
 80033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a4:	f000 fa44 	bl	8003830 <__aeabi_dsub>
 80033a8:	4632      	mov	r2, r6
 80033aa:	463b      	mov	r3, r7
 80033ac:	f000 fbf4 	bl	8003b98 <__aeabi_dmul>
 80033b0:	a37b      	add	r3, pc, #492	; (adr r3, 80035a0 <atan+0x300>)
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	f000 fa3b 	bl	8003830 <__aeabi_dsub>
 80033ba:	4632      	mov	r2, r6
 80033bc:	463b      	mov	r3, r7
 80033be:	f000 fbeb 	bl	8003b98 <__aeabi_dmul>
 80033c2:	f1ba 3fff 	cmp.w	sl, #4294967295
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	d06b      	beq.n	80034a4 <atan+0x204>
 80033cc:	4640      	mov	r0, r8
 80033ce:	4649      	mov	r1, r9
 80033d0:	f000 fa30 	bl	8003834 <__adddf3>
 80033d4:	4622      	mov	r2, r4
 80033d6:	462b      	mov	r3, r5
 80033d8:	f000 fbde 	bl	8003b98 <__aeabi_dmul>
 80033dc:	4e79      	ldr	r6, [pc, #484]	; (80035c4 <atan+0x324>)
 80033de:	4b7a      	ldr	r3, [pc, #488]	; (80035c8 <atan+0x328>)
 80033e0:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80033e4:	4456      	add	r6, sl
 80033e6:	449a      	add	sl, r3
 80033e8:	e9da 2300 	ldrd	r2, r3, [sl]
 80033ec:	f000 fa20 	bl	8003830 <__aeabi_dsub>
 80033f0:	4622      	mov	r2, r4
 80033f2:	462b      	mov	r3, r5
 80033f4:	f000 fa1c 	bl	8003830 <__aeabi_dsub>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003400:	f000 fa16 	bl	8003830 <__aeabi_dsub>
 8003404:	f1bb 0f00 	cmp.w	fp, #0
 8003408:	db43      	blt.n	8003492 <atan+0x1f2>
 800340a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800340e:	2800      	cmp	r0, #0
 8003410:	f43f af56 	beq.w	80032c0 <atan+0x20>
 8003414:	4622      	mov	r2, r4
 8003416:	462b      	mov	r3, r5
 8003418:	4620      	mov	r0, r4
 800341a:	4629      	mov	r1, r5
 800341c:	f000 fa0a 	bl	8003834 <__adddf3>
 8003420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003424:	a360      	add	r3, pc, #384	; (adr r3, 80035a8 <atan+0x308>)
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	f000 fa03 	bl	8003834 <__adddf3>
 800342e:	2200      	movs	r2, #0
 8003430:	4b66      	ldr	r3, [pc, #408]	; (80035cc <atan+0x32c>)
 8003432:	f000 fe41 	bl	80040b8 <__aeabi_dcmpgt>
 8003436:	2800      	cmp	r0, #0
 8003438:	f43f af54 	beq.w	80032e4 <atan+0x44>
 800343c:	4620      	mov	r0, r4
 800343e:	4629      	mov	r1, r5
 8003440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003444:	f000 f8cc 	bl	80035e0 <fabs>
 8003448:	4b61      	ldr	r3, [pc, #388]	; (80035d0 <atan+0x330>)
 800344a:	429e      	cmp	r6, r3
 800344c:	4604      	mov	r4, r0
 800344e:	460d      	mov	r5, r1
 8003450:	dc38      	bgt.n	80034c4 <atan+0x224>
 8003452:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8003456:	429e      	cmp	r6, r3
 8003458:	dc5d      	bgt.n	8003516 <atan+0x276>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	f000 f9e9 	bl	8003834 <__adddf3>
 8003462:	2200      	movs	r2, #0
 8003464:	4b59      	ldr	r3, [pc, #356]	; (80035cc <atan+0x32c>)
 8003466:	f000 f9e3 	bl	8003830 <__aeabi_dsub>
 800346a:	2200      	movs	r2, #0
 800346c:	4606      	mov	r6, r0
 800346e:	460f      	mov	r7, r1
 8003470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003474:	4620      	mov	r0, r4
 8003476:	4629      	mov	r1, r5
 8003478:	f000 f9dc 	bl	8003834 <__adddf3>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4630      	mov	r0, r6
 8003482:	4639      	mov	r1, r7
 8003484:	f000 fcb2 	bl	8003dec <__aeabi_ddiv>
 8003488:	f04f 0a00 	mov.w	sl, #0
 800348c:	4604      	mov	r4, r0
 800348e:	460d      	mov	r5, r1
 8003490:	e72a      	b.n	80032e8 <atan+0x48>
 8003492:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800349a:	a145      	add	r1, pc, #276	; (adr r1, 80035b0 <atan+0x310>)
 800349c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034a4:	4640      	mov	r0, r8
 80034a6:	4649      	mov	r1, r9
 80034a8:	f000 f9c4 	bl	8003834 <__adddf3>
 80034ac:	4622      	mov	r2, r4
 80034ae:	462b      	mov	r3, r5
 80034b0:	f000 fb72 	bl	8003b98 <__aeabi_dmul>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4620      	mov	r0, r4
 80034ba:	4629      	mov	r1, r5
 80034bc:	f000 f9b8 	bl	8003830 <__aeabi_dsub>
 80034c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034c4:	4b43      	ldr	r3, [pc, #268]	; (80035d4 <atan+0x334>)
 80034c6:	429e      	cmp	r6, r3
 80034c8:	dc1a      	bgt.n	8003500 <atan+0x260>
 80034ca:	2200      	movs	r2, #0
 80034cc:	4b42      	ldr	r3, [pc, #264]	; (80035d8 <atan+0x338>)
 80034ce:	f000 f9af 	bl	8003830 <__aeabi_dsub>
 80034d2:	2200      	movs	r2, #0
 80034d4:	4606      	mov	r6, r0
 80034d6:	460f      	mov	r7, r1
 80034d8:	4b3f      	ldr	r3, [pc, #252]	; (80035d8 <atan+0x338>)
 80034da:	4620      	mov	r0, r4
 80034dc:	4629      	mov	r1, r5
 80034de:	f000 fb5b 	bl	8003b98 <__aeabi_dmul>
 80034e2:	2200      	movs	r2, #0
 80034e4:	4b39      	ldr	r3, [pc, #228]	; (80035cc <atan+0x32c>)
 80034e6:	f000 f9a5 	bl	8003834 <__adddf3>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4630      	mov	r0, r6
 80034f0:	4639      	mov	r1, r7
 80034f2:	f000 fc7b 	bl	8003dec <__aeabi_ddiv>
 80034f6:	f04f 0a02 	mov.w	sl, #2
 80034fa:	4604      	mov	r4, r0
 80034fc:	460d      	mov	r5, r1
 80034fe:	e6f3      	b.n	80032e8 <atan+0x48>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	2000      	movs	r0, #0
 8003506:	4935      	ldr	r1, [pc, #212]	; (80035dc <atan+0x33c>)
 8003508:	f000 fc70 	bl	8003dec <__aeabi_ddiv>
 800350c:	f04f 0a03 	mov.w	sl, #3
 8003510:	4604      	mov	r4, r0
 8003512:	460d      	mov	r5, r1
 8003514:	e6e8      	b.n	80032e8 <atan+0x48>
 8003516:	2200      	movs	r2, #0
 8003518:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <atan+0x32c>)
 800351a:	f000 f989 	bl	8003830 <__aeabi_dsub>
 800351e:	2200      	movs	r2, #0
 8003520:	4606      	mov	r6, r0
 8003522:	460f      	mov	r7, r1
 8003524:	4b29      	ldr	r3, [pc, #164]	; (80035cc <atan+0x32c>)
 8003526:	4620      	mov	r0, r4
 8003528:	4629      	mov	r1, r5
 800352a:	f000 f983 	bl	8003834 <__adddf3>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4630      	mov	r0, r6
 8003534:	4639      	mov	r1, r7
 8003536:	f000 fc59 	bl	8003dec <__aeabi_ddiv>
 800353a:	f04f 0a01 	mov.w	sl, #1
 800353e:	4604      	mov	r4, r0
 8003540:	460d      	mov	r5, r1
 8003542:	e6d1      	b.n	80032e8 <atan+0x48>
 8003544:	f3af 8000 	nop.w
 8003548:	54442d18 	.word	0x54442d18
 800354c:	3ff921fb 	.word	0x3ff921fb
 8003550:	e322da11 	.word	0xe322da11
 8003554:	3f90ad3a 	.word	0x3f90ad3a
 8003558:	24760deb 	.word	0x24760deb
 800355c:	3fa97b4b 	.word	0x3fa97b4b
 8003560:	a0d03d51 	.word	0xa0d03d51
 8003564:	3fb10d66 	.word	0x3fb10d66
 8003568:	c54c206e 	.word	0xc54c206e
 800356c:	3fb745cd 	.word	0x3fb745cd
 8003570:	920083ff 	.word	0x920083ff
 8003574:	3fc24924 	.word	0x3fc24924
 8003578:	5555550d 	.word	0x5555550d
 800357c:	3fd55555 	.word	0x3fd55555
 8003580:	2c6a6c2f 	.word	0x2c6a6c2f
 8003584:	bfa2b444 	.word	0xbfa2b444
 8003588:	52defd9a 	.word	0x52defd9a
 800358c:	3fadde2d 	.word	0x3fadde2d
 8003590:	af749a6d 	.word	0xaf749a6d
 8003594:	3fb3b0f2 	.word	0x3fb3b0f2
 8003598:	fe231671 	.word	0xfe231671
 800359c:	3fbc71c6 	.word	0x3fbc71c6
 80035a0:	9998ebc4 	.word	0x9998ebc4
 80035a4:	3fc99999 	.word	0x3fc99999
 80035a8:	8800759c 	.word	0x8800759c
 80035ac:	7e37e43c 	.word	0x7e37e43c
 80035b0:	54442d18 	.word	0x54442d18
 80035b4:	bff921fb 	.word	0xbff921fb
 80035b8:	440fffff 	.word	0x440fffff
 80035bc:	7ff00000 	.word	0x7ff00000
 80035c0:	3fdbffff 	.word	0x3fdbffff
 80035c4:	08009098 	.word	0x08009098
 80035c8:	08009078 	.word	0x08009078
 80035cc:	3ff00000 	.word	0x3ff00000
 80035d0:	3ff2ffff 	.word	0x3ff2ffff
 80035d4:	40037fff 	.word	0x40037fff
 80035d8:	3ff80000 	.word	0x3ff80000
 80035dc:	bff00000 	.word	0xbff00000

080035e0 <fabs>:
 80035e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop

080035e8 <sqrt>:
 80035e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ec:	b08b      	sub	sp, #44	; 0x2c
 80035ee:	4604      	mov	r4, r0
 80035f0:	460d      	mov	r5, r1
 80035f2:	f000 f855 	bl	80036a0 <__ieee754_sqrt>
 80035f6:	4b28      	ldr	r3, [pc, #160]	; (8003698 <sqrt+0xb0>)
 80035f8:	f993 a000 	ldrsb.w	sl, [r3]
 80035fc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003600:	4606      	mov	r6, r0
 8003602:	460f      	mov	r7, r1
 8003604:	d012      	beq.n	800362c <sqrt+0x44>
 8003606:	4622      	mov	r2, r4
 8003608:	462b      	mov	r3, r5
 800360a:	4620      	mov	r0, r4
 800360c:	4629      	mov	r1, r5
 800360e:	f000 fd5d 	bl	80040cc <__aeabi_dcmpun>
 8003612:	4683      	mov	fp, r0
 8003614:	b950      	cbnz	r0, 800362c <sqrt+0x44>
 8003616:	f04f 0800 	mov.w	r8, #0
 800361a:	f04f 0900 	mov.w	r9, #0
 800361e:	4620      	mov	r0, r4
 8003620:	4629      	mov	r1, r5
 8003622:	4642      	mov	r2, r8
 8003624:	464b      	mov	r3, r9
 8003626:	f000 fd29 	bl	800407c <__aeabi_dcmplt>
 800362a:	b920      	cbnz	r0, 8003636 <sqrt+0x4e>
 800362c:	4630      	mov	r0, r6
 800362e:	4639      	mov	r1, r7
 8003630:	b00b      	add	sp, #44	; 0x2c
 8003632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003636:	4b19      	ldr	r3, [pc, #100]	; (800369c <sqrt+0xb4>)
 8003638:	f8cd b020 	str.w	fp, [sp, #32]
 800363c:	2201      	movs	r2, #1
 800363e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003642:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003646:	e88d 000c 	stmia.w	sp, {r2, r3}
 800364a:	f1ba 0f00 	cmp.w	sl, #0
 800364e:	d015      	beq.n	800367c <sqrt+0x94>
 8003650:	4642      	mov	r2, r8
 8003652:	464b      	mov	r3, r9
 8003654:	4640      	mov	r0, r8
 8003656:	4649      	mov	r1, r9
 8003658:	f000 fbc8 	bl	8003dec <__aeabi_ddiv>
 800365c:	f1ba 0f02 	cmp.w	sl, #2
 8003660:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003664:	d10c      	bne.n	8003680 <sqrt+0x98>
 8003666:	f000 fd8f 	bl	8004188 <__errno>
 800366a:	2321      	movs	r3, #33	; 0x21
 800366c:	6003      	str	r3, [r0, #0]
 800366e:	9b08      	ldr	r3, [sp, #32]
 8003670:	b963      	cbnz	r3, 800368c <sqrt+0xa4>
 8003672:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003676:	b00b      	add	sp, #44	; 0x2c
 8003678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800367c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003680:	4668      	mov	r0, sp
 8003682:	f000 f8cf 	bl	8003824 <matherr>
 8003686:	2800      	cmp	r0, #0
 8003688:	d1f1      	bne.n	800366e <sqrt+0x86>
 800368a:	e7ec      	b.n	8003666 <sqrt+0x7e>
 800368c:	f000 fd7c 	bl	8004188 <__errno>
 8003690:	9b08      	ldr	r3, [sp, #32]
 8003692:	6003      	str	r3, [r0, #0]
 8003694:	e7ed      	b.n	8003672 <sqrt+0x8a>
 8003696:	bf00      	nop
 8003698:	20000038 	.word	0x20000038
 800369c:	080090b8 	.word	0x080090b8

080036a0 <__ieee754_sqrt>:
 80036a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a4:	4e5e      	ldr	r6, [pc, #376]	; (8003820 <__ieee754_sqrt+0x180>)
 80036a6:	46b6      	mov	lr, r6
 80036a8:	400e      	ands	r6, r1
 80036aa:	4576      	cmp	r6, lr
 80036ac:	4604      	mov	r4, r0
 80036ae:	460d      	mov	r5, r1
 80036b0:	f000 8094 	beq.w	80037dc <__ieee754_sqrt+0x13c>
 80036b4:	2900      	cmp	r1, #0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4602      	mov	r2, r0
 80036ba:	dd72      	ble.n	80037a2 <__ieee754_sqrt+0x102>
 80036bc:	150f      	asrs	r7, r1, #20
 80036be:	d07d      	beq.n	80037bc <__ieee754_sqrt+0x11c>
 80036c0:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 80036c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036c8:	07f8      	lsls	r0, r7, #31
 80036ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ce:	d463      	bmi.n	8003798 <__ieee754_sqrt+0xf8>
 80036d0:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80036d4:	2600      	movs	r6, #0
 80036d6:	440b      	add	r3, r1
 80036d8:	107f      	asrs	r7, r7, #1
 80036da:	0052      	lsls	r2, r2, #1
 80036dc:	46b6      	mov	lr, r6
 80036de:	2016      	movs	r0, #22
 80036e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036e4:	eb0e 0401 	add.w	r4, lr, r1
 80036e8:	429c      	cmp	r4, r3
 80036ea:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80036ee:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80036f2:	dc03      	bgt.n	80036fc <__ieee754_sqrt+0x5c>
 80036f4:	1b1b      	subs	r3, r3, r4
 80036f6:	eb04 0e01 	add.w	lr, r4, r1
 80036fa:	440e      	add	r6, r1
 80036fc:	3801      	subs	r0, #1
 80036fe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8003702:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003706:	d1ed      	bne.n	80036e4 <__ieee754_sqrt+0x44>
 8003708:	4684      	mov	ip, r0
 800370a:	2420      	movs	r4, #32
 800370c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003710:	e009      	b.n	8003726 <__ieee754_sqrt+0x86>
 8003712:	d020      	beq.n	8003756 <__ieee754_sqrt+0xb6>
 8003714:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 8003718:	3c01      	subs	r4, #1
 800371a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800371e:	442b      	add	r3, r5
 8003720:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003724:	d020      	beq.n	8003768 <__ieee754_sqrt+0xc8>
 8003726:	459e      	cmp	lr, r3
 8003728:	eb01 050c 	add.w	r5, r1, ip
 800372c:	daf1      	bge.n	8003712 <__ieee754_sqrt+0x72>
 800372e:	2d00      	cmp	r5, #0
 8003730:	eb05 0c01 	add.w	ip, r5, r1
 8003734:	db09      	blt.n	800374a <__ieee754_sqrt+0xaa>
 8003736:	46f0      	mov	r8, lr
 8003738:	4295      	cmp	r5, r2
 800373a:	ebce 0303 	rsb	r3, lr, r3
 800373e:	d900      	bls.n	8003742 <__ieee754_sqrt+0xa2>
 8003740:	3b01      	subs	r3, #1
 8003742:	1b52      	subs	r2, r2, r5
 8003744:	4408      	add	r0, r1
 8003746:	46c6      	mov	lr, r8
 8003748:	e7e4      	b.n	8003714 <__ieee754_sqrt+0x74>
 800374a:	f1bc 0f00 	cmp.w	ip, #0
 800374e:	dbf2      	blt.n	8003736 <__ieee754_sqrt+0x96>
 8003750:	f10e 0801 	add.w	r8, lr, #1
 8003754:	e7f0      	b.n	8003738 <__ieee754_sqrt+0x98>
 8003756:	4295      	cmp	r5, r2
 8003758:	d81c      	bhi.n	8003794 <__ieee754_sqrt+0xf4>
 800375a:	2d00      	cmp	r5, #0
 800375c:	eb05 0c01 	add.w	ip, r5, r1
 8003760:	db48      	blt.n	80037f4 <__ieee754_sqrt+0x154>
 8003762:	4698      	mov	r8, r3
 8003764:	2300      	movs	r3, #0
 8003766:	e7ec      	b.n	8003742 <__ieee754_sqrt+0xa2>
 8003768:	4313      	orrs	r3, r2
 800376a:	d004      	beq.n	8003776 <__ieee754_sqrt+0xd6>
 800376c:	1c41      	adds	r1, r0, #1
 800376e:	d045      	beq.n	80037fc <__ieee754_sqrt+0x15c>
 8003770:	f000 0401 	and.w	r4, r0, #1
 8003774:	4420      	add	r0, r4
 8003776:	0844      	lsrs	r4, r0, #1
 8003778:	1073      	asrs	r3, r6, #1
 800377a:	07f2      	lsls	r2, r6, #31
 800377c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003780:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003784:	bf48      	it	mi
 8003786:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800378a:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800378e:	4620      	mov	r0, r4
 8003790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003794:	4673      	mov	r3, lr
 8003796:	e7bd      	b.n	8003714 <__ieee754_sqrt+0x74>
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800379e:	0052      	lsls	r2, r2, #1
 80037a0:	e796      	b.n	80036d0 <__ieee754_sqrt+0x30>
 80037a2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80037a6:	4306      	orrs	r6, r0
 80037a8:	d022      	beq.n	80037f0 <__ieee754_sqrt+0x150>
 80037aa:	bb71      	cbnz	r1, 800380a <__ieee754_sqrt+0x16a>
 80037ac:	460f      	mov	r7, r1
 80037ae:	0ad3      	lsrs	r3, r2, #11
 80037b0:	3f15      	subs	r7, #21
 80037b2:	0552      	lsls	r2, r2, #21
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0fa      	beq.n	80037ae <__ieee754_sqrt+0x10e>
 80037b8:	02dd      	lsls	r5, r3, #11
 80037ba:	d421      	bmi.n	8003800 <__ieee754_sqrt+0x160>
 80037bc:	2100      	movs	r1, #0
 80037be:	e000      	b.n	80037c2 <__ieee754_sqrt+0x122>
 80037c0:	4601      	mov	r1, r0
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	02dc      	lsls	r4, r3, #11
 80037c6:	f101 0001 	add.w	r0, r1, #1
 80037ca:	d5f9      	bpl.n	80037c0 <__ieee754_sqrt+0x120>
 80037cc:	f1c0 0420 	rsb	r4, r0, #32
 80037d0:	fa22 f404 	lsr.w	r4, r2, r4
 80037d4:	4323      	orrs	r3, r4
 80037d6:	1a7f      	subs	r7, r7, r1
 80037d8:	4082      	lsls	r2, r0
 80037da:	e771      	b.n	80036c0 <__ieee754_sqrt+0x20>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	f000 f9da 	bl	8003b98 <__aeabi_dmul>
 80037e4:	4622      	mov	r2, r4
 80037e6:	462b      	mov	r3, r5
 80037e8:	f000 f824 	bl	8003834 <__adddf3>
 80037ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037f4:	f1bc 0f00 	cmp.w	ip, #0
 80037f8:	daaa      	bge.n	8003750 <__ieee754_sqrt+0xb0>
 80037fa:	e7b2      	b.n	8003762 <__ieee754_sqrt+0xc2>
 80037fc:	3601      	adds	r6, #1
 80037fe:	e7bb      	b.n	8003778 <__ieee754_sqrt+0xd8>
 8003800:	2420      	movs	r4, #32
 8003802:	f04f 31ff 	mov.w	r1, #4294967295
 8003806:	2000      	movs	r0, #0
 8003808:	e7e2      	b.n	80037d0 <__ieee754_sqrt+0x130>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	f000 f80f 	bl	8003830 <__aeabi_dsub>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	f000 fae9 	bl	8003dec <__aeabi_ddiv>
 800381a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800381e:	bf00      	nop
 8003820:	7ff00000 	.word	0x7ff00000

08003824 <matherr>:
 8003824:	2000      	movs	r0, #0
 8003826:	4770      	bx	lr

08003828 <__aeabi_drsub>:
 8003828:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800382c:	e002      	b.n	8003834 <__adddf3>
 800382e:	bf00      	nop

08003830 <__aeabi_dsub>:
 8003830:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08003834 <__adddf3>:
 8003834:	b530      	push	{r4, r5, lr}
 8003836:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800383a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800383e:	ea94 0f05 	teq	r4, r5
 8003842:	bf08      	it	eq
 8003844:	ea90 0f02 	teqeq	r0, r2
 8003848:	bf1f      	itttt	ne
 800384a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800384e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003852:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003856:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800385a:	f000 80e2 	beq.w	8003a22 <__adddf3+0x1ee>
 800385e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003862:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8003866:	bfb8      	it	lt
 8003868:	426d      	neglt	r5, r5
 800386a:	dd0c      	ble.n	8003886 <__adddf3+0x52>
 800386c:	442c      	add	r4, r5
 800386e:	ea80 0202 	eor.w	r2, r0, r2
 8003872:	ea81 0303 	eor.w	r3, r1, r3
 8003876:	ea82 0000 	eor.w	r0, r2, r0
 800387a:	ea83 0101 	eor.w	r1, r3, r1
 800387e:	ea80 0202 	eor.w	r2, r0, r2
 8003882:	ea81 0303 	eor.w	r3, r1, r3
 8003886:	2d36      	cmp	r5, #54	; 0x36
 8003888:	bf88      	it	hi
 800388a:	bd30      	pophi	{r4, r5, pc}
 800388c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003894:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003898:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800389c:	d002      	beq.n	80038a4 <__adddf3+0x70>
 800389e:	4240      	negs	r0, r0
 80038a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80038a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80038a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80038ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80038b0:	d002      	beq.n	80038b8 <__adddf3+0x84>
 80038b2:	4252      	negs	r2, r2
 80038b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80038b8:	ea94 0f05 	teq	r4, r5
 80038bc:	f000 80a7 	beq.w	8003a0e <__adddf3+0x1da>
 80038c0:	f1a4 0401 	sub.w	r4, r4, #1
 80038c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80038c8:	db0d      	blt.n	80038e6 <__adddf3+0xb2>
 80038ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80038ce:	fa22 f205 	lsr.w	r2, r2, r5
 80038d2:	1880      	adds	r0, r0, r2
 80038d4:	f141 0100 	adc.w	r1, r1, #0
 80038d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80038dc:	1880      	adds	r0, r0, r2
 80038de:	fa43 f305 	asr.w	r3, r3, r5
 80038e2:	4159      	adcs	r1, r3
 80038e4:	e00e      	b.n	8003904 <__adddf3+0xd0>
 80038e6:	f1a5 0520 	sub.w	r5, r5, #32
 80038ea:	f10e 0e20 	add.w	lr, lr, #32
 80038ee:	2a01      	cmp	r2, #1
 80038f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80038f4:	bf28      	it	cs
 80038f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80038fa:	fa43 f305 	asr.w	r3, r3, r5
 80038fe:	18c0      	adds	r0, r0, r3
 8003900:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003904:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003908:	d507      	bpl.n	800391a <__adddf3+0xe6>
 800390a:	f04f 0e00 	mov.w	lr, #0
 800390e:	f1dc 0c00 	rsbs	ip, ip, #0
 8003912:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003916:	eb6e 0101 	sbc.w	r1, lr, r1
 800391a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800391e:	d31b      	bcc.n	8003958 <__adddf3+0x124>
 8003920:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003924:	d30c      	bcc.n	8003940 <__adddf3+0x10c>
 8003926:	0849      	lsrs	r1, r1, #1
 8003928:	ea5f 0030 	movs.w	r0, r0, rrx
 800392c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003930:	f104 0401 	add.w	r4, r4, #1
 8003934:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003938:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800393c:	f080 809a 	bcs.w	8003a74 <__adddf3+0x240>
 8003940:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003944:	bf08      	it	eq
 8003946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800394a:	f150 0000 	adcs.w	r0, r0, #0
 800394e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003952:	ea41 0105 	orr.w	r1, r1, r5
 8003956:	bd30      	pop	{r4, r5, pc}
 8003958:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800395c:	4140      	adcs	r0, r0
 800395e:	eb41 0101 	adc.w	r1, r1, r1
 8003962:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003966:	f1a4 0401 	sub.w	r4, r4, #1
 800396a:	d1e9      	bne.n	8003940 <__adddf3+0x10c>
 800396c:	f091 0f00 	teq	r1, #0
 8003970:	bf04      	itt	eq
 8003972:	4601      	moveq	r1, r0
 8003974:	2000      	moveq	r0, #0
 8003976:	fab1 f381 	clz	r3, r1
 800397a:	bf08      	it	eq
 800397c:	3320      	addeq	r3, #32
 800397e:	f1a3 030b 	sub.w	r3, r3, #11
 8003982:	f1b3 0220 	subs.w	r2, r3, #32
 8003986:	da0c      	bge.n	80039a2 <__adddf3+0x16e>
 8003988:	320c      	adds	r2, #12
 800398a:	dd08      	ble.n	800399e <__adddf3+0x16a>
 800398c:	f102 0c14 	add.w	ip, r2, #20
 8003990:	f1c2 020c 	rsb	r2, r2, #12
 8003994:	fa01 f00c 	lsl.w	r0, r1, ip
 8003998:	fa21 f102 	lsr.w	r1, r1, r2
 800399c:	e00c      	b.n	80039b8 <__adddf3+0x184>
 800399e:	f102 0214 	add.w	r2, r2, #20
 80039a2:	bfd8      	it	le
 80039a4:	f1c2 0c20 	rsble	ip, r2, #32
 80039a8:	fa01 f102 	lsl.w	r1, r1, r2
 80039ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80039b0:	bfdc      	itt	le
 80039b2:	ea41 010c 	orrle.w	r1, r1, ip
 80039b6:	4090      	lslle	r0, r2
 80039b8:	1ae4      	subs	r4, r4, r3
 80039ba:	bfa2      	ittt	ge
 80039bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80039c0:	4329      	orrge	r1, r5
 80039c2:	bd30      	popge	{r4, r5, pc}
 80039c4:	ea6f 0404 	mvn.w	r4, r4
 80039c8:	3c1f      	subs	r4, #31
 80039ca:	da1c      	bge.n	8003a06 <__adddf3+0x1d2>
 80039cc:	340c      	adds	r4, #12
 80039ce:	dc0e      	bgt.n	80039ee <__adddf3+0x1ba>
 80039d0:	f104 0414 	add.w	r4, r4, #20
 80039d4:	f1c4 0220 	rsb	r2, r4, #32
 80039d8:	fa20 f004 	lsr.w	r0, r0, r4
 80039dc:	fa01 f302 	lsl.w	r3, r1, r2
 80039e0:	ea40 0003 	orr.w	r0, r0, r3
 80039e4:	fa21 f304 	lsr.w	r3, r1, r4
 80039e8:	ea45 0103 	orr.w	r1, r5, r3
 80039ec:	bd30      	pop	{r4, r5, pc}
 80039ee:	f1c4 040c 	rsb	r4, r4, #12
 80039f2:	f1c4 0220 	rsb	r2, r4, #32
 80039f6:	fa20 f002 	lsr.w	r0, r0, r2
 80039fa:	fa01 f304 	lsl.w	r3, r1, r4
 80039fe:	ea40 0003 	orr.w	r0, r0, r3
 8003a02:	4629      	mov	r1, r5
 8003a04:	bd30      	pop	{r4, r5, pc}
 8003a06:	fa21 f004 	lsr.w	r0, r1, r4
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	bd30      	pop	{r4, r5, pc}
 8003a0e:	f094 0f00 	teq	r4, #0
 8003a12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003a16:	bf06      	itte	eq
 8003a18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003a1c:	3401      	addeq	r4, #1
 8003a1e:	3d01      	subne	r5, #1
 8003a20:	e74e      	b.n	80038c0 <__adddf3+0x8c>
 8003a22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003a26:	bf18      	it	ne
 8003a28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003a2c:	d029      	beq.n	8003a82 <__adddf3+0x24e>
 8003a2e:	ea94 0f05 	teq	r4, r5
 8003a32:	bf08      	it	eq
 8003a34:	ea90 0f02 	teqeq	r0, r2
 8003a38:	d005      	beq.n	8003a46 <__adddf3+0x212>
 8003a3a:	ea54 0c00 	orrs.w	ip, r4, r0
 8003a3e:	bf04      	itt	eq
 8003a40:	4619      	moveq	r1, r3
 8003a42:	4610      	moveq	r0, r2
 8003a44:	bd30      	pop	{r4, r5, pc}
 8003a46:	ea91 0f03 	teq	r1, r3
 8003a4a:	bf1e      	ittt	ne
 8003a4c:	2100      	movne	r1, #0
 8003a4e:	2000      	movne	r0, #0
 8003a50:	bd30      	popne	{r4, r5, pc}
 8003a52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003a56:	d105      	bne.n	8003a64 <__adddf3+0x230>
 8003a58:	0040      	lsls	r0, r0, #1
 8003a5a:	4149      	adcs	r1, r1
 8003a5c:	bf28      	it	cs
 8003a5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003a62:	bd30      	pop	{r4, r5, pc}
 8003a64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003a68:	bf3c      	itt	cc
 8003a6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003a6e:	bd30      	popcc	{r4, r5, pc}
 8003a70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003a74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003a78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a7c:	f04f 0000 	mov.w	r0, #0
 8003a80:	bd30      	pop	{r4, r5, pc}
 8003a82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003a86:	bf1a      	itte	ne
 8003a88:	4619      	movne	r1, r3
 8003a8a:	4610      	movne	r0, r2
 8003a8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003a90:	bf1c      	itt	ne
 8003a92:	460b      	movne	r3, r1
 8003a94:	4602      	movne	r2, r0
 8003a96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003a9a:	bf06      	itte	eq
 8003a9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003aa0:	ea91 0f03 	teqeq	r1, r3
 8003aa4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003aa8:	bd30      	pop	{r4, r5, pc}
 8003aaa:	bf00      	nop

08003aac <__aeabi_ui2d>:
 8003aac:	f090 0f00 	teq	r0, #0
 8003ab0:	bf04      	itt	eq
 8003ab2:	2100      	moveq	r1, #0
 8003ab4:	4770      	bxeq	lr
 8003ab6:	b530      	push	{r4, r5, lr}
 8003ab8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003abc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003ac0:	f04f 0500 	mov.w	r5, #0
 8003ac4:	f04f 0100 	mov.w	r1, #0
 8003ac8:	e750      	b.n	800396c <__adddf3+0x138>
 8003aca:	bf00      	nop

08003acc <__aeabi_i2d>:
 8003acc:	f090 0f00 	teq	r0, #0
 8003ad0:	bf04      	itt	eq
 8003ad2:	2100      	moveq	r1, #0
 8003ad4:	4770      	bxeq	lr
 8003ad6:	b530      	push	{r4, r5, lr}
 8003ad8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003adc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003ae0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003ae4:	bf48      	it	mi
 8003ae6:	4240      	negmi	r0, r0
 8003ae8:	f04f 0100 	mov.w	r1, #0
 8003aec:	e73e      	b.n	800396c <__adddf3+0x138>
 8003aee:	bf00      	nop

08003af0 <__aeabi_f2d>:
 8003af0:	0042      	lsls	r2, r0, #1
 8003af2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003af6:	ea4f 0131 	mov.w	r1, r1, rrx
 8003afa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003afe:	bf1f      	itttt	ne
 8003b00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003b04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003b08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003b0c:	4770      	bxne	lr
 8003b0e:	f092 0f00 	teq	r2, #0
 8003b12:	bf14      	ite	ne
 8003b14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003b18:	4770      	bxeq	lr
 8003b1a:	b530      	push	{r4, r5, lr}
 8003b1c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003b20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003b24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003b28:	e720      	b.n	800396c <__adddf3+0x138>
 8003b2a:	bf00      	nop

08003b2c <__aeabi_ul2d>:
 8003b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8003b30:	bf08      	it	eq
 8003b32:	4770      	bxeq	lr
 8003b34:	b530      	push	{r4, r5, lr}
 8003b36:	f04f 0500 	mov.w	r5, #0
 8003b3a:	e00a      	b.n	8003b52 <__aeabi_l2d+0x16>

08003b3c <__aeabi_l2d>:
 8003b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8003b40:	bf08      	it	eq
 8003b42:	4770      	bxeq	lr
 8003b44:	b530      	push	{r4, r5, lr}
 8003b46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003b4a:	d502      	bpl.n	8003b52 <__aeabi_l2d+0x16>
 8003b4c:	4240      	negs	r0, r0
 8003b4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003b52:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003b56:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003b5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003b5e:	f43f aedc 	beq.w	800391a <__adddf3+0xe6>
 8003b62:	f04f 0203 	mov.w	r2, #3
 8003b66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003b6a:	bf18      	it	ne
 8003b6c:	3203      	addne	r2, #3
 8003b6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003b72:	bf18      	it	ne
 8003b74:	3203      	addne	r2, #3
 8003b76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003b7a:	f1c2 0320 	rsb	r3, r2, #32
 8003b7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8003b82:	fa20 f002 	lsr.w	r0, r0, r2
 8003b86:	fa01 fe03 	lsl.w	lr, r1, r3
 8003b8a:	ea40 000e 	orr.w	r0, r0, lr
 8003b8e:	fa21 f102 	lsr.w	r1, r1, r2
 8003b92:	4414      	add	r4, r2
 8003b94:	e6c1      	b.n	800391a <__adddf3+0xe6>
 8003b96:	bf00      	nop

08003b98 <__aeabi_dmul>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003b9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003ba2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003ba6:	bf1d      	ittte	ne
 8003ba8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003bac:	ea94 0f0c 	teqne	r4, ip
 8003bb0:	ea95 0f0c 	teqne	r5, ip
 8003bb4:	f000 f8de 	bleq	8003d74 <__aeabi_dmul+0x1dc>
 8003bb8:	442c      	add	r4, r5
 8003bba:	ea81 0603 	eor.w	r6, r1, r3
 8003bbe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003bc2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003bc6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003bca:	bf18      	it	ne
 8003bcc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003bd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003bd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd8:	d038      	beq.n	8003c4c <__aeabi_dmul+0xb4>
 8003bda:	fba0 ce02 	umull	ip, lr, r0, r2
 8003bde:	f04f 0500 	mov.w	r5, #0
 8003be2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003be6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003bea:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003bee:	f04f 0600 	mov.w	r6, #0
 8003bf2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003bf6:	f09c 0f00 	teq	ip, #0
 8003bfa:	bf18      	it	ne
 8003bfc:	f04e 0e01 	orrne.w	lr, lr, #1
 8003c00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003c04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003c08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003c0c:	d204      	bcs.n	8003c18 <__aeabi_dmul+0x80>
 8003c0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003c12:	416d      	adcs	r5, r5
 8003c14:	eb46 0606 	adc.w	r6, r6, r6
 8003c18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003c1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003c20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003c24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003c28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003c2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003c30:	bf88      	it	hi
 8003c32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003c36:	d81e      	bhi.n	8003c76 <__aeabi_dmul+0xde>
 8003c38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003c3c:	bf08      	it	eq
 8003c3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003c42:	f150 0000 	adcs.w	r0, r0, #0
 8003c46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
 8003c4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003c50:	ea46 0101 	orr.w	r1, r6, r1
 8003c54:	ea40 0002 	orr.w	r0, r0, r2
 8003c58:	ea81 0103 	eor.w	r1, r1, r3
 8003c5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003c60:	bfc2      	ittt	gt
 8003c62:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003c66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003c6a:	bd70      	popgt	{r4, r5, r6, pc}
 8003c6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003c70:	f04f 0e00 	mov.w	lr, #0
 8003c74:	3c01      	subs	r4, #1
 8003c76:	f300 80ab 	bgt.w	8003dd0 <__aeabi_dmul+0x238>
 8003c7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003c7e:	bfde      	ittt	le
 8003c80:	2000      	movle	r0, #0
 8003c82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003c86:	bd70      	pople	{r4, r5, r6, pc}
 8003c88:	f1c4 0400 	rsb	r4, r4, #0
 8003c8c:	3c20      	subs	r4, #32
 8003c8e:	da35      	bge.n	8003cfc <__aeabi_dmul+0x164>
 8003c90:	340c      	adds	r4, #12
 8003c92:	dc1b      	bgt.n	8003ccc <__aeabi_dmul+0x134>
 8003c94:	f104 0414 	add.w	r4, r4, #20
 8003c98:	f1c4 0520 	rsb	r5, r4, #32
 8003c9c:	fa00 f305 	lsl.w	r3, r0, r5
 8003ca0:	fa20 f004 	lsr.w	r0, r0, r4
 8003ca4:	fa01 f205 	lsl.w	r2, r1, r5
 8003ca8:	ea40 0002 	orr.w	r0, r0, r2
 8003cac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8003cb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003cb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003cb8:	fa21 f604 	lsr.w	r6, r1, r4
 8003cbc:	eb42 0106 	adc.w	r1, r2, r6
 8003cc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003cc4:	bf08      	it	eq
 8003cc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003cca:	bd70      	pop	{r4, r5, r6, pc}
 8003ccc:	f1c4 040c 	rsb	r4, r4, #12
 8003cd0:	f1c4 0520 	rsb	r5, r4, #32
 8003cd4:	fa00 f304 	lsl.w	r3, r0, r4
 8003cd8:	fa20 f005 	lsr.w	r0, r0, r5
 8003cdc:	fa01 f204 	lsl.w	r2, r1, r4
 8003ce0:	ea40 0002 	orr.w	r0, r0, r2
 8003ce4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003ce8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003cec:	f141 0100 	adc.w	r1, r1, #0
 8003cf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003cf4:	bf08      	it	eq
 8003cf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}
 8003cfc:	f1c4 0520 	rsb	r5, r4, #32
 8003d00:	fa00 f205 	lsl.w	r2, r0, r5
 8003d04:	ea4e 0e02 	orr.w	lr, lr, r2
 8003d08:	fa20 f304 	lsr.w	r3, r0, r4
 8003d0c:	fa01 f205 	lsl.w	r2, r1, r5
 8003d10:	ea43 0302 	orr.w	r3, r3, r2
 8003d14:	fa21 f004 	lsr.w	r0, r1, r4
 8003d18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003d1c:	fa21 f204 	lsr.w	r2, r1, r4
 8003d20:	ea20 0002 	bic.w	r0, r0, r2
 8003d24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003d28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003d2c:	bf08      	it	eq
 8003d2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	f094 0f00 	teq	r4, #0
 8003d38:	d10f      	bne.n	8003d5a <__aeabi_dmul+0x1c2>
 8003d3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003d3e:	0040      	lsls	r0, r0, #1
 8003d40:	eb41 0101 	adc.w	r1, r1, r1
 8003d44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003d48:	bf08      	it	eq
 8003d4a:	3c01      	subeq	r4, #1
 8003d4c:	d0f7      	beq.n	8003d3e <__aeabi_dmul+0x1a6>
 8003d4e:	ea41 0106 	orr.w	r1, r1, r6
 8003d52:	f095 0f00 	teq	r5, #0
 8003d56:	bf18      	it	ne
 8003d58:	4770      	bxne	lr
 8003d5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003d5e:	0052      	lsls	r2, r2, #1
 8003d60:	eb43 0303 	adc.w	r3, r3, r3
 8003d64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003d68:	bf08      	it	eq
 8003d6a:	3d01      	subeq	r5, #1
 8003d6c:	d0f7      	beq.n	8003d5e <__aeabi_dmul+0x1c6>
 8003d6e:	ea43 0306 	orr.w	r3, r3, r6
 8003d72:	4770      	bx	lr
 8003d74:	ea94 0f0c 	teq	r4, ip
 8003d78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003d7c:	bf18      	it	ne
 8003d7e:	ea95 0f0c 	teqne	r5, ip
 8003d82:	d00c      	beq.n	8003d9e <__aeabi_dmul+0x206>
 8003d84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003d88:	bf18      	it	ne
 8003d8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003d8e:	d1d1      	bne.n	8003d34 <__aeabi_dmul+0x19c>
 8003d90:	ea81 0103 	eor.w	r1, r1, r3
 8003d94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003d98:	f04f 0000 	mov.w	r0, #0
 8003d9c:	bd70      	pop	{r4, r5, r6, pc}
 8003d9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003da2:	bf06      	itte	eq
 8003da4:	4610      	moveq	r0, r2
 8003da6:	4619      	moveq	r1, r3
 8003da8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003dac:	d019      	beq.n	8003de2 <__aeabi_dmul+0x24a>
 8003dae:	ea94 0f0c 	teq	r4, ip
 8003db2:	d102      	bne.n	8003dba <__aeabi_dmul+0x222>
 8003db4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003db8:	d113      	bne.n	8003de2 <__aeabi_dmul+0x24a>
 8003dba:	ea95 0f0c 	teq	r5, ip
 8003dbe:	d105      	bne.n	8003dcc <__aeabi_dmul+0x234>
 8003dc0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8003dc4:	bf1c      	itt	ne
 8003dc6:	4610      	movne	r0, r2
 8003dc8:	4619      	movne	r1, r3
 8003dca:	d10a      	bne.n	8003de2 <__aeabi_dmul+0x24a>
 8003dcc:	ea81 0103 	eor.w	r1, r1, r3
 8003dd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003dd4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003dd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003ddc:	f04f 0000 	mov.w	r0, #0
 8003de0:	bd70      	pop	{r4, r5, r6, pc}
 8003de2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003de6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003dea:	bd70      	pop	{r4, r5, r6, pc}

08003dec <__aeabi_ddiv>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003df2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003df6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003dfa:	bf1d      	ittte	ne
 8003dfc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003e00:	ea94 0f0c 	teqne	r4, ip
 8003e04:	ea95 0f0c 	teqne	r5, ip
 8003e08:	f000 f8a7 	bleq	8003f5a <__aeabi_ddiv+0x16e>
 8003e0c:	eba4 0405 	sub.w	r4, r4, r5
 8003e10:	ea81 0e03 	eor.w	lr, r1, r3
 8003e14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003e18:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003e1c:	f000 8088 	beq.w	8003f30 <__aeabi_ddiv+0x144>
 8003e20:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003e24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003e28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003e2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003e30:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003e34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003e38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003e3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003e40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003e44:	429d      	cmp	r5, r3
 8003e46:	bf08      	it	eq
 8003e48:	4296      	cmpeq	r6, r2
 8003e4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8003e4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003e52:	d202      	bcs.n	8003e5a <__aeabi_ddiv+0x6e>
 8003e54:	085b      	lsrs	r3, r3, #1
 8003e56:	ea4f 0232 	mov.w	r2, r2, rrx
 8003e5a:	1ab6      	subs	r6, r6, r2
 8003e5c:	eb65 0503 	sbc.w	r5, r5, r3
 8003e60:	085b      	lsrs	r3, r3, #1
 8003e62:	ea4f 0232 	mov.w	r2, r2, rrx
 8003e66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003e6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8003e6e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003e72:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003e76:	bf22      	ittt	cs
 8003e78:	1ab6      	subcs	r6, r6, r2
 8003e7a:	4675      	movcs	r5, lr
 8003e7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8003e80:	085b      	lsrs	r3, r3, #1
 8003e82:	ea4f 0232 	mov.w	r2, r2, rrx
 8003e86:	ebb6 0e02 	subs.w	lr, r6, r2
 8003e8a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003e8e:	bf22      	ittt	cs
 8003e90:	1ab6      	subcs	r6, r6, r2
 8003e92:	4675      	movcs	r5, lr
 8003e94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	ea4f 0232 	mov.w	r2, r2, rrx
 8003e9e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003ea2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003ea6:	bf22      	ittt	cs
 8003ea8:	1ab6      	subcs	r6, r6, r2
 8003eaa:	4675      	movcs	r5, lr
 8003eac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	ea4f 0232 	mov.w	r2, r2, rrx
 8003eb6:	ebb6 0e02 	subs.w	lr, r6, r2
 8003eba:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003ebe:	bf22      	ittt	cs
 8003ec0:	1ab6      	subcs	r6, r6, r2
 8003ec2:	4675      	movcs	r5, lr
 8003ec4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003ec8:	ea55 0e06 	orrs.w	lr, r5, r6
 8003ecc:	d018      	beq.n	8003f00 <__aeabi_ddiv+0x114>
 8003ece:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8003ed2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003ed6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003eda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003ede:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8003ee2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003ee6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003eea:	d1c0      	bne.n	8003e6e <__aeabi_ddiv+0x82>
 8003eec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003ef0:	d10b      	bne.n	8003f0a <__aeabi_ddiv+0x11e>
 8003ef2:	ea41 0100 	orr.w	r1, r1, r0
 8003ef6:	f04f 0000 	mov.w	r0, #0
 8003efa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003efe:	e7b6      	b.n	8003e6e <__aeabi_ddiv+0x82>
 8003f00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003f04:	bf04      	itt	eq
 8003f06:	4301      	orreq	r1, r0
 8003f08:	2000      	moveq	r0, #0
 8003f0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003f0e:	bf88      	it	hi
 8003f10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003f14:	f63f aeaf 	bhi.w	8003c76 <__aeabi_dmul+0xde>
 8003f18:	ebb5 0c03 	subs.w	ip, r5, r3
 8003f1c:	bf04      	itt	eq
 8003f1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8003f22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003f26:	f150 0000 	adcs.w	r0, r0, #0
 8003f2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
 8003f30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003f34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003f38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003f3c:	bfc2      	ittt	gt
 8003f3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003f42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003f46:	bd70      	popgt	{r4, r5, r6, pc}
 8003f48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003f4c:	f04f 0e00 	mov.w	lr, #0
 8003f50:	3c01      	subs	r4, #1
 8003f52:	e690      	b.n	8003c76 <__aeabi_dmul+0xde>
 8003f54:	ea45 0e06 	orr.w	lr, r5, r6
 8003f58:	e68d      	b.n	8003c76 <__aeabi_dmul+0xde>
 8003f5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003f5e:	ea94 0f0c 	teq	r4, ip
 8003f62:	bf08      	it	eq
 8003f64:	ea95 0f0c 	teqeq	r5, ip
 8003f68:	f43f af3b 	beq.w	8003de2 <__aeabi_dmul+0x24a>
 8003f6c:	ea94 0f0c 	teq	r4, ip
 8003f70:	d10a      	bne.n	8003f88 <__aeabi_ddiv+0x19c>
 8003f72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003f76:	f47f af34 	bne.w	8003de2 <__aeabi_dmul+0x24a>
 8003f7a:	ea95 0f0c 	teq	r5, ip
 8003f7e:	f47f af25 	bne.w	8003dcc <__aeabi_dmul+0x234>
 8003f82:	4610      	mov	r0, r2
 8003f84:	4619      	mov	r1, r3
 8003f86:	e72c      	b.n	8003de2 <__aeabi_dmul+0x24a>
 8003f88:	ea95 0f0c 	teq	r5, ip
 8003f8c:	d106      	bne.n	8003f9c <__aeabi_ddiv+0x1b0>
 8003f8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003f92:	f43f aefd 	beq.w	8003d90 <__aeabi_dmul+0x1f8>
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	e722      	b.n	8003de2 <__aeabi_dmul+0x24a>
 8003f9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003fa0:	bf18      	it	ne
 8003fa2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003fa6:	f47f aec5 	bne.w	8003d34 <__aeabi_dmul+0x19c>
 8003faa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8003fae:	f47f af0d 	bne.w	8003dcc <__aeabi_dmul+0x234>
 8003fb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8003fb6:	f47f aeeb 	bne.w	8003d90 <__aeabi_dmul+0x1f8>
 8003fba:	e712      	b.n	8003de2 <__aeabi_dmul+0x24a>

08003fbc <__gedf2>:
 8003fbc:	f04f 3cff 	mov.w	ip, #4294967295
 8003fc0:	e006      	b.n	8003fd0 <__cmpdf2+0x4>
 8003fc2:	bf00      	nop

08003fc4 <__ledf2>:
 8003fc4:	f04f 0c01 	mov.w	ip, #1
 8003fc8:	e002      	b.n	8003fd0 <__cmpdf2+0x4>
 8003fca:	bf00      	nop

08003fcc <__cmpdf2>:
 8003fcc:	f04f 0c01 	mov.w	ip, #1
 8003fd0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8003fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003fdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003fe0:	bf18      	it	ne
 8003fe2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8003fe6:	d01b      	beq.n	8004020 <__cmpdf2+0x54>
 8003fe8:	b001      	add	sp, #4
 8003fea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8003fee:	bf0c      	ite	eq
 8003ff0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8003ff4:	ea91 0f03 	teqne	r1, r3
 8003ff8:	bf02      	ittt	eq
 8003ffa:	ea90 0f02 	teqeq	r0, r2
 8003ffe:	2000      	moveq	r0, #0
 8004000:	4770      	bxeq	lr
 8004002:	f110 0f00 	cmn.w	r0, #0
 8004006:	ea91 0f03 	teq	r1, r3
 800400a:	bf58      	it	pl
 800400c:	4299      	cmppl	r1, r3
 800400e:	bf08      	it	eq
 8004010:	4290      	cmpeq	r0, r2
 8004012:	bf2c      	ite	cs
 8004014:	17d8      	asrcs	r0, r3, #31
 8004016:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800401a:	f040 0001 	orr.w	r0, r0, #1
 800401e:	4770      	bx	lr
 8004020:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004024:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004028:	d102      	bne.n	8004030 <__cmpdf2+0x64>
 800402a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800402e:	d107      	bne.n	8004040 <__cmpdf2+0x74>
 8004030:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004034:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004038:	d1d6      	bne.n	8003fe8 <__cmpdf2+0x1c>
 800403a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800403e:	d0d3      	beq.n	8003fe8 <__cmpdf2+0x1c>
 8004040:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop

08004048 <__aeabi_cdrcmple>:
 8004048:	4684      	mov	ip, r0
 800404a:	4610      	mov	r0, r2
 800404c:	4662      	mov	r2, ip
 800404e:	468c      	mov	ip, r1
 8004050:	4619      	mov	r1, r3
 8004052:	4663      	mov	r3, ip
 8004054:	e000      	b.n	8004058 <__aeabi_cdcmpeq>
 8004056:	bf00      	nop

08004058 <__aeabi_cdcmpeq>:
 8004058:	b501      	push	{r0, lr}
 800405a:	f7ff ffb7 	bl	8003fcc <__cmpdf2>
 800405e:	2800      	cmp	r0, #0
 8004060:	bf48      	it	mi
 8004062:	f110 0f00 	cmnmi.w	r0, #0
 8004066:	bd01      	pop	{r0, pc}

08004068 <__aeabi_dcmpeq>:
 8004068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800406c:	f7ff fff4 	bl	8004058 <__aeabi_cdcmpeq>
 8004070:	bf0c      	ite	eq
 8004072:	2001      	moveq	r0, #1
 8004074:	2000      	movne	r0, #0
 8004076:	f85d fb08 	ldr.w	pc, [sp], #8
 800407a:	bf00      	nop

0800407c <__aeabi_dcmplt>:
 800407c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004080:	f7ff ffea 	bl	8004058 <__aeabi_cdcmpeq>
 8004084:	bf34      	ite	cc
 8004086:	2001      	movcc	r0, #1
 8004088:	2000      	movcs	r0, #0
 800408a:	f85d fb08 	ldr.w	pc, [sp], #8
 800408e:	bf00      	nop

08004090 <__aeabi_dcmple>:
 8004090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004094:	f7ff ffe0 	bl	8004058 <__aeabi_cdcmpeq>
 8004098:	bf94      	ite	ls
 800409a:	2001      	movls	r0, #1
 800409c:	2000      	movhi	r0, #0
 800409e:	f85d fb08 	ldr.w	pc, [sp], #8
 80040a2:	bf00      	nop

080040a4 <__aeabi_dcmpge>:
 80040a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80040a8:	f7ff ffce 	bl	8004048 <__aeabi_cdrcmple>
 80040ac:	bf94      	ite	ls
 80040ae:	2001      	movls	r0, #1
 80040b0:	2000      	movhi	r0, #0
 80040b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80040b6:	bf00      	nop

080040b8 <__aeabi_dcmpgt>:
 80040b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80040bc:	f7ff ffc4 	bl	8004048 <__aeabi_cdrcmple>
 80040c0:	bf34      	ite	cc
 80040c2:	2001      	movcc	r0, #1
 80040c4:	2000      	movcs	r0, #0
 80040c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80040ca:	bf00      	nop

080040cc <__aeabi_dcmpun>:
 80040cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80040d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80040d4:	d102      	bne.n	80040dc <__aeabi_dcmpun+0x10>
 80040d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80040da:	d10a      	bne.n	80040f2 <__aeabi_dcmpun+0x26>
 80040dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80040e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80040e4:	d102      	bne.n	80040ec <__aeabi_dcmpun+0x20>
 80040e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80040ea:	d102      	bne.n	80040f2 <__aeabi_dcmpun+0x26>
 80040ec:	f04f 0000 	mov.w	r0, #0
 80040f0:	4770      	bx	lr
 80040f2:	f04f 0001 	mov.w	r0, #1
 80040f6:	4770      	bx	lr

080040f8 <__aeabi_d2iz>:
 80040f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80040fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004100:	d215      	bcs.n	800412e <__aeabi_d2iz+0x36>
 8004102:	d511      	bpl.n	8004128 <__aeabi_d2iz+0x30>
 8004104:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004108:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800410c:	d912      	bls.n	8004134 <__aeabi_d2iz+0x3c>
 800410e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004112:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004116:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800411a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800411e:	fa23 f002 	lsr.w	r0, r3, r2
 8004122:	bf18      	it	ne
 8004124:	4240      	negne	r0, r0
 8004126:	4770      	bx	lr
 8004128:	f04f 0000 	mov.w	r0, #0
 800412c:	4770      	bx	lr
 800412e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004132:	d105      	bne.n	8004140 <__aeabi_d2iz+0x48>
 8004134:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004138:	bf08      	it	eq
 800413a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800413e:	4770      	bx	lr
 8004140:	f04f 0000 	mov.w	r0, #0
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop

08004148 <__aeabi_d2uiz>:
 8004148:	004a      	lsls	r2, r1, #1
 800414a:	d211      	bcs.n	8004170 <__aeabi_d2uiz+0x28>
 800414c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004150:	d211      	bcs.n	8004176 <__aeabi_d2uiz+0x2e>
 8004152:	d50d      	bpl.n	8004170 <__aeabi_d2uiz+0x28>
 8004154:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004158:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800415c:	d40e      	bmi.n	800417c <__aeabi_d2uiz+0x34>
 800415e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004166:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800416a:	fa23 f002 	lsr.w	r0, r3, r2
 800416e:	4770      	bx	lr
 8004170:	f04f 0000 	mov.w	r0, #0
 8004174:	4770      	bx	lr
 8004176:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800417a:	d102      	bne.n	8004182 <__aeabi_d2uiz+0x3a>
 800417c:	f04f 30ff 	mov.w	r0, #4294967295
 8004180:	4770      	bx	lr
 8004182:	f04f 0000 	mov.w	r0, #0
 8004186:	4770      	bx	lr

08004188 <__errno>:
 8004188:	4b01      	ldr	r3, [pc, #4]	; (8004190 <__errno+0x8>)
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	20000468 	.word	0x20000468

08004194 <__libc_init_array>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	4e0f      	ldr	r6, [pc, #60]	; (80041d4 <__libc_init_array+0x40>)
 8004198:	4d0f      	ldr	r5, [pc, #60]	; (80041d8 <__libc_init_array+0x44>)
 800419a:	1b76      	subs	r6, r6, r5
 800419c:	10b6      	asrs	r6, r6, #2
 800419e:	bf18      	it	ne
 80041a0:	2400      	movne	r4, #0
 80041a2:	d005      	beq.n	80041b0 <__libc_init_array+0x1c>
 80041a4:	3401      	adds	r4, #1
 80041a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041aa:	4798      	blx	r3
 80041ac:	42a6      	cmp	r6, r4
 80041ae:	d1f9      	bne.n	80041a4 <__libc_init_array+0x10>
 80041b0:	4e0a      	ldr	r6, [pc, #40]	; (80041dc <__libc_init_array+0x48>)
 80041b2:	4d0b      	ldr	r5, [pc, #44]	; (80041e0 <__libc_init_array+0x4c>)
 80041b4:	1b76      	subs	r6, r6, r5
 80041b6:	f7fe fa01 	bl	80025bc <_init>
 80041ba:	10b6      	asrs	r6, r6, #2
 80041bc:	bf18      	it	ne
 80041be:	2400      	movne	r4, #0
 80041c0:	d006      	beq.n	80041d0 <__libc_init_array+0x3c>
 80041c2:	3401      	adds	r4, #1
 80041c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c8:	4798      	blx	r3
 80041ca:	42a6      	cmp	r6, r4
 80041cc:	d1f9      	bne.n	80041c2 <__libc_init_array+0x2e>
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
 80041d0:	bd70      	pop	{r4, r5, r6, pc}
 80041d2:	bf00      	nop
 80041d4:	200009e8 	.word	0x200009e8
 80041d8:	200009e8 	.word	0x200009e8
 80041dc:	200009e8 	.word	0x200009e8
 80041e0:	200009e8 	.word	0x200009e8

080041e4 <memcpy>:
 80041e4:	4684      	mov	ip, r0
 80041e6:	ea41 0300 	orr.w	r3, r1, r0
 80041ea:	f013 0303 	ands.w	r3, r3, #3
 80041ee:	d16d      	bne.n	80042cc <memcpy+0xe8>
 80041f0:	3a40      	subs	r2, #64	; 0x40
 80041f2:	d341      	bcc.n	8004278 <memcpy+0x94>
 80041f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80041f8:	f840 3b04 	str.w	r3, [r0], #4
 80041fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8004200:	f840 3b04 	str.w	r3, [r0], #4
 8004204:	f851 3b04 	ldr.w	r3, [r1], #4
 8004208:	f840 3b04 	str.w	r3, [r0], #4
 800420c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004210:	f840 3b04 	str.w	r3, [r0], #4
 8004214:	f851 3b04 	ldr.w	r3, [r1], #4
 8004218:	f840 3b04 	str.w	r3, [r0], #4
 800421c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004220:	f840 3b04 	str.w	r3, [r0], #4
 8004224:	f851 3b04 	ldr.w	r3, [r1], #4
 8004228:	f840 3b04 	str.w	r3, [r0], #4
 800422c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004230:	f840 3b04 	str.w	r3, [r0], #4
 8004234:	f851 3b04 	ldr.w	r3, [r1], #4
 8004238:	f840 3b04 	str.w	r3, [r0], #4
 800423c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004240:	f840 3b04 	str.w	r3, [r0], #4
 8004244:	f851 3b04 	ldr.w	r3, [r1], #4
 8004248:	f840 3b04 	str.w	r3, [r0], #4
 800424c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004250:	f840 3b04 	str.w	r3, [r0], #4
 8004254:	f851 3b04 	ldr.w	r3, [r1], #4
 8004258:	f840 3b04 	str.w	r3, [r0], #4
 800425c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004260:	f840 3b04 	str.w	r3, [r0], #4
 8004264:	f851 3b04 	ldr.w	r3, [r1], #4
 8004268:	f840 3b04 	str.w	r3, [r0], #4
 800426c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004270:	f840 3b04 	str.w	r3, [r0], #4
 8004274:	3a40      	subs	r2, #64	; 0x40
 8004276:	d2bd      	bcs.n	80041f4 <memcpy+0x10>
 8004278:	3230      	adds	r2, #48	; 0x30
 800427a:	d311      	bcc.n	80042a0 <memcpy+0xbc>
 800427c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004280:	f840 3b04 	str.w	r3, [r0], #4
 8004284:	f851 3b04 	ldr.w	r3, [r1], #4
 8004288:	f840 3b04 	str.w	r3, [r0], #4
 800428c:	f851 3b04 	ldr.w	r3, [r1], #4
 8004290:	f840 3b04 	str.w	r3, [r0], #4
 8004294:	f851 3b04 	ldr.w	r3, [r1], #4
 8004298:	f840 3b04 	str.w	r3, [r0], #4
 800429c:	3a10      	subs	r2, #16
 800429e:	d2ed      	bcs.n	800427c <memcpy+0x98>
 80042a0:	320c      	adds	r2, #12
 80042a2:	d305      	bcc.n	80042b0 <memcpy+0xcc>
 80042a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80042a8:	f840 3b04 	str.w	r3, [r0], #4
 80042ac:	3a04      	subs	r2, #4
 80042ae:	d2f9      	bcs.n	80042a4 <memcpy+0xc0>
 80042b0:	3204      	adds	r2, #4
 80042b2:	d008      	beq.n	80042c6 <memcpy+0xe2>
 80042b4:	07d2      	lsls	r2, r2, #31
 80042b6:	bf1c      	itt	ne
 80042b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80042bc:	f800 3b01 	strbne.w	r3, [r0], #1
 80042c0:	d301      	bcc.n	80042c6 <memcpy+0xe2>
 80042c2:	880b      	ldrh	r3, [r1, #0]
 80042c4:	8003      	strh	r3, [r0, #0]
 80042c6:	4660      	mov	r0, ip
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	2a08      	cmp	r2, #8
 80042ce:	d313      	bcc.n	80042f8 <memcpy+0x114>
 80042d0:	078b      	lsls	r3, r1, #30
 80042d2:	d08d      	beq.n	80041f0 <memcpy+0xc>
 80042d4:	f010 0303 	ands.w	r3, r0, #3
 80042d8:	d08a      	beq.n	80041f0 <memcpy+0xc>
 80042da:	f1c3 0304 	rsb	r3, r3, #4
 80042de:	1ad2      	subs	r2, r2, r3
 80042e0:	07db      	lsls	r3, r3, #31
 80042e2:	bf1c      	itt	ne
 80042e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80042e8:	f800 3b01 	strbne.w	r3, [r0], #1
 80042ec:	d380      	bcc.n	80041f0 <memcpy+0xc>
 80042ee:	f831 3b02 	ldrh.w	r3, [r1], #2
 80042f2:	f820 3b02 	strh.w	r3, [r0], #2
 80042f6:	e77b      	b.n	80041f0 <memcpy+0xc>
 80042f8:	3a04      	subs	r2, #4
 80042fa:	d3d9      	bcc.n	80042b0 <memcpy+0xcc>
 80042fc:	3a01      	subs	r2, #1
 80042fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004302:	f800 3b01 	strb.w	r3, [r0], #1
 8004306:	d2f9      	bcs.n	80042fc <memcpy+0x118>
 8004308:	780b      	ldrb	r3, [r1, #0]
 800430a:	7003      	strb	r3, [r0, #0]
 800430c:	784b      	ldrb	r3, [r1, #1]
 800430e:	7043      	strb	r3, [r0, #1]
 8004310:	788b      	ldrb	r3, [r1, #2]
 8004312:	7083      	strb	r3, [r0, #2]
 8004314:	4660      	mov	r0, ip
 8004316:	4770      	bx	lr

08004318 <memset>:
 8004318:	b470      	push	{r4, r5, r6}
 800431a:	0784      	lsls	r4, r0, #30
 800431c:	d046      	beq.n	80043ac <memset+0x94>
 800431e:	1e54      	subs	r4, r2, #1
 8004320:	2a00      	cmp	r2, #0
 8004322:	d041      	beq.n	80043a8 <memset+0x90>
 8004324:	b2cd      	uxtb	r5, r1
 8004326:	4603      	mov	r3, r0
 8004328:	e002      	b.n	8004330 <memset+0x18>
 800432a:	1e62      	subs	r2, r4, #1
 800432c:	b3e4      	cbz	r4, 80043a8 <memset+0x90>
 800432e:	4614      	mov	r4, r2
 8004330:	f803 5b01 	strb.w	r5, [r3], #1
 8004334:	079a      	lsls	r2, r3, #30
 8004336:	d1f8      	bne.n	800432a <memset+0x12>
 8004338:	2c03      	cmp	r4, #3
 800433a:	d92e      	bls.n	800439a <memset+0x82>
 800433c:	b2cd      	uxtb	r5, r1
 800433e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004342:	2c0f      	cmp	r4, #15
 8004344:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004348:	d919      	bls.n	800437e <memset+0x66>
 800434a:	f103 0210 	add.w	r2, r3, #16
 800434e:	4626      	mov	r6, r4
 8004350:	3e10      	subs	r6, #16
 8004352:	2e0f      	cmp	r6, #15
 8004354:	f842 5c10 	str.w	r5, [r2, #-16]
 8004358:	f842 5c0c 	str.w	r5, [r2, #-12]
 800435c:	f842 5c08 	str.w	r5, [r2, #-8]
 8004360:	f842 5c04 	str.w	r5, [r2, #-4]
 8004364:	f102 0210 	add.w	r2, r2, #16
 8004368:	d8f2      	bhi.n	8004350 <memset+0x38>
 800436a:	f1a4 0210 	sub.w	r2, r4, #16
 800436e:	f022 020f 	bic.w	r2, r2, #15
 8004372:	f004 040f 	and.w	r4, r4, #15
 8004376:	3210      	adds	r2, #16
 8004378:	2c03      	cmp	r4, #3
 800437a:	4413      	add	r3, r2
 800437c:	d90d      	bls.n	800439a <memset+0x82>
 800437e:	461e      	mov	r6, r3
 8004380:	4622      	mov	r2, r4
 8004382:	3a04      	subs	r2, #4
 8004384:	2a03      	cmp	r2, #3
 8004386:	f846 5b04 	str.w	r5, [r6], #4
 800438a:	d8fa      	bhi.n	8004382 <memset+0x6a>
 800438c:	1f22      	subs	r2, r4, #4
 800438e:	f022 0203 	bic.w	r2, r2, #3
 8004392:	3204      	adds	r2, #4
 8004394:	4413      	add	r3, r2
 8004396:	f004 0403 	and.w	r4, r4, #3
 800439a:	b12c      	cbz	r4, 80043a8 <memset+0x90>
 800439c:	b2c9      	uxtb	r1, r1
 800439e:	441c      	add	r4, r3
 80043a0:	f803 1b01 	strb.w	r1, [r3], #1
 80043a4:	42a3      	cmp	r3, r4
 80043a6:	d1fb      	bne.n	80043a0 <memset+0x88>
 80043a8:	bc70      	pop	{r4, r5, r6}
 80043aa:	4770      	bx	lr
 80043ac:	4614      	mov	r4, r2
 80043ae:	4603      	mov	r3, r0
 80043b0:	e7c2      	b.n	8004338 <memset+0x20>
 80043b2:	bf00      	nop

080043b4 <_puts_r>:
 80043b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b6:	4605      	mov	r5, r0
 80043b8:	b089      	sub	sp, #36	; 0x24
 80043ba:	4608      	mov	r0, r1
 80043bc:	460c      	mov	r4, r1
 80043be:	f000 f89f 	bl	8004500 <strlen>
 80043c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80043c4:	4f14      	ldr	r7, [pc, #80]	; (8004418 <_puts_r+0x64>)
 80043c6:	9404      	str	r4, [sp, #16]
 80043c8:	2601      	movs	r6, #1
 80043ca:	1c44      	adds	r4, r0, #1
 80043cc:	a904      	add	r1, sp, #16
 80043ce:	2202      	movs	r2, #2
 80043d0:	9403      	str	r4, [sp, #12]
 80043d2:	9005      	str	r0, [sp, #20]
 80043d4:	68ac      	ldr	r4, [r5, #8]
 80043d6:	9706      	str	r7, [sp, #24]
 80043d8:	9607      	str	r6, [sp, #28]
 80043da:	9101      	str	r1, [sp, #4]
 80043dc:	9202      	str	r2, [sp, #8]
 80043de:	b1b3      	cbz	r3, 800440e <_puts_r+0x5a>
 80043e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043e4:	049a      	lsls	r2, r3, #18
 80043e6:	d406      	bmi.n	80043f6 <_puts_r+0x42>
 80043e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043f2:	81a3      	strh	r3, [r4, #12]
 80043f4:	6662      	str	r2, [r4, #100]	; 0x64
 80043f6:	4621      	mov	r1, r4
 80043f8:	4628      	mov	r0, r5
 80043fa:	aa01      	add	r2, sp, #4
 80043fc:	f002 fd12 	bl	8006e24 <__sfvwrite_r>
 8004400:	2800      	cmp	r0, #0
 8004402:	bf14      	ite	ne
 8004404:	f04f 30ff 	movne.w	r0, #4294967295
 8004408:	200a      	moveq	r0, #10
 800440a:	b009      	add	sp, #36	; 0x24
 800440c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800440e:	4628      	mov	r0, r5
 8004410:	f002 fcfe 	bl	8006e10 <__sinit>
 8004414:	e7e4      	b.n	80043e0 <_puts_r+0x2c>
 8004416:	bf00      	nop
 8004418:	080090c0 	.word	0x080090c0

0800441c <puts>:
 800441c:	4b02      	ldr	r3, [pc, #8]	; (8004428 <puts+0xc>)
 800441e:	4601      	mov	r1, r0
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	f7ff bfc7 	b.w	80043b4 <_puts_r>
 8004426:	bf00      	nop
 8004428:	20000468 	.word	0x20000468

0800442c <snprintf>:
 800442c:	b40c      	push	{r2, r3}
 800442e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004430:	4b24      	ldr	r3, [pc, #144]	; (80044c4 <snprintf+0x98>)
 8004432:	2900      	cmp	r1, #0
 8004434:	b09d      	sub	sp, #116	; 0x74
 8004436:	681d      	ldr	r5, [r3, #0]
 8004438:	db3e      	blt.n	80044b8 <snprintf+0x8c>
 800443a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800443e:	460c      	mov	r4, r1
 8004440:	9002      	str	r0, [sp, #8]
 8004442:	9006      	str	r0, [sp, #24]
 8004444:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004448:	ae23      	add	r6, sp, #140	; 0x8c
 800444a:	d017      	beq.n	800447c <snprintf+0x50>
 800444c:	1e4c      	subs	r4, r1, #1
 800444e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004450:	9404      	str	r4, [sp, #16]
 8004452:	4633      	mov	r3, r6
 8004454:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8004458:	a902      	add	r1, sp, #8
 800445a:	4628      	mov	r0, r5
 800445c:	9407      	str	r4, [sp, #28]
 800445e:	9601      	str	r6, [sp, #4]
 8004460:	f8ad 7016 	strh.w	r7, [sp, #22]
 8004464:	f000 f90c 	bl	8004680 <_svfprintf_r>
 8004468:	1c42      	adds	r2, r0, #1
 800446a:	db1b      	blt.n	80044a4 <snprintf+0x78>
 800446c:	9b02      	ldr	r3, [sp, #8]
 800446e:	2200      	movs	r2, #0
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	b01d      	add	sp, #116	; 0x74
 8004474:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8004478:	b002      	add	sp, #8
 800447a:	4770      	bx	lr
 800447c:	4633      	mov	r3, r6
 800447e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8004482:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004484:	9404      	str	r4, [sp, #16]
 8004486:	a902      	add	r1, sp, #8
 8004488:	4628      	mov	r0, r5
 800448a:	9407      	str	r4, [sp, #28]
 800448c:	9601      	str	r6, [sp, #4]
 800448e:	f8ad 7016 	strh.w	r7, [sp, #22]
 8004492:	f000 f8f5 	bl	8004680 <_svfprintf_r>
 8004496:	1c43      	adds	r3, r0, #1
 8004498:	db07      	blt.n	80044aa <snprintf+0x7e>
 800449a:	b01d      	add	sp, #116	; 0x74
 800449c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80044a0:	b002      	add	sp, #8
 80044a2:	4770      	bx	lr
 80044a4:	238b      	movs	r3, #139	; 0x8b
 80044a6:	602b      	str	r3, [r5, #0]
 80044a8:	e7e0      	b.n	800446c <snprintf+0x40>
 80044aa:	238b      	movs	r3, #139	; 0x8b
 80044ac:	602b      	str	r3, [r5, #0]
 80044ae:	b01d      	add	sp, #116	; 0x74
 80044b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80044b4:	b002      	add	sp, #8
 80044b6:	4770      	bx	lr
 80044b8:	238b      	movs	r3, #139	; 0x8b
 80044ba:	602b      	str	r3, [r5, #0]
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295
 80044c0:	e7eb      	b.n	800449a <snprintf+0x6e>
 80044c2:	bf00      	nop
 80044c4:	20000468 	.word	0x20000468
	...

08004500 <strlen>:
 8004500:	f890 f000 	pld	[r0]
 8004504:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8004508:	f020 0107 	bic.w	r1, r0, #7
 800450c:	f06f 0c00 	mvn.w	ip, #0
 8004510:	f010 0407 	ands.w	r4, r0, #7
 8004514:	f891 f020 	pld	[r1, #32]
 8004518:	f040 8049 	bne.w	80045ae <strlen+0xae>
 800451c:	f04f 0400 	mov.w	r4, #0
 8004520:	f06f 0007 	mvn.w	r0, #7
 8004524:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004528:	f891 f040 	pld	[r1, #64]	; 0x40
 800452c:	f100 0008 	add.w	r0, r0, #8
 8004530:	fa82 f24c 	uadd8	r2, r2, ip
 8004534:	faa4 f28c 	sel	r2, r4, ip
 8004538:	fa83 f34c 	uadd8	r3, r3, ip
 800453c:	faa2 f38c 	sel	r3, r2, ip
 8004540:	bb4b      	cbnz	r3, 8004596 <strlen+0x96>
 8004542:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8004546:	fa82 f24c 	uadd8	r2, r2, ip
 800454a:	f100 0008 	add.w	r0, r0, #8
 800454e:	faa4 f28c 	sel	r2, r4, ip
 8004552:	fa83 f34c 	uadd8	r3, r3, ip
 8004556:	faa2 f38c 	sel	r3, r2, ip
 800455a:	b9e3      	cbnz	r3, 8004596 <strlen+0x96>
 800455c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8004560:	fa82 f24c 	uadd8	r2, r2, ip
 8004564:	f100 0008 	add.w	r0, r0, #8
 8004568:	faa4 f28c 	sel	r2, r4, ip
 800456c:	fa83 f34c 	uadd8	r3, r3, ip
 8004570:	faa2 f38c 	sel	r3, r2, ip
 8004574:	b97b      	cbnz	r3, 8004596 <strlen+0x96>
 8004576:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800457a:	f101 0120 	add.w	r1, r1, #32
 800457e:	fa82 f24c 	uadd8	r2, r2, ip
 8004582:	f100 0008 	add.w	r0, r0, #8
 8004586:	faa4 f28c 	sel	r2, r4, ip
 800458a:	fa83 f34c 	uadd8	r3, r3, ip
 800458e:	faa2 f38c 	sel	r3, r2, ip
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0c6      	beq.n	8004524 <strlen+0x24>
 8004596:	2a00      	cmp	r2, #0
 8004598:	bf04      	itt	eq
 800459a:	3004      	addeq	r0, #4
 800459c:	461a      	moveq	r2, r3
 800459e:	ba12      	rev	r2, r2
 80045a0:	fab2 f282 	clz	r2, r2
 80045a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80045a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80045ac:	4770      	bx	lr
 80045ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 80045b2:	f004 0503 	and.w	r5, r4, #3
 80045b6:	f1c4 0000 	rsb	r0, r4, #0
 80045ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80045be:	f014 0f04 	tst.w	r4, #4
 80045c2:	f891 f040 	pld	[r1, #64]	; 0x40
 80045c6:	fa0c f505 	lsl.w	r5, ip, r5
 80045ca:	ea62 0205 	orn	r2, r2, r5
 80045ce:	bf1c      	itt	ne
 80045d0:	ea63 0305 	ornne	r3, r3, r5
 80045d4:	4662      	movne	r2, ip
 80045d6:	f04f 0400 	mov.w	r4, #0
 80045da:	e7a9      	b.n	8004530 <strlen+0x30>

080045dc <strncmp>:
 80045dc:	2a00      	cmp	r2, #0
 80045de:	d041      	beq.n	8004664 <strncmp+0x88>
 80045e0:	ea40 0301 	orr.w	r3, r0, r1
 80045e4:	f013 0303 	ands.w	r3, r3, #3
 80045e8:	b4f0      	push	{r4, r5, r6, r7}
 80045ea:	d125      	bne.n	8004638 <strncmp+0x5c>
 80045ec:	2a03      	cmp	r2, #3
 80045ee:	d923      	bls.n	8004638 <strncmp+0x5c>
 80045f0:	6804      	ldr	r4, [r0, #0]
 80045f2:	680d      	ldr	r5, [r1, #0]
 80045f4:	42ac      	cmp	r4, r5
 80045f6:	d11f      	bne.n	8004638 <strncmp+0x5c>
 80045f8:	3a04      	subs	r2, #4
 80045fa:	d035      	beq.n	8004668 <strncmp+0x8c>
 80045fc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8004600:	ea25 0404 	bic.w	r4, r5, r4
 8004604:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8004608:	d131      	bne.n	800466e <strncmp+0x92>
 800460a:	1d07      	adds	r7, r0, #4
 800460c:	1d0d      	adds	r5, r1, #4
 800460e:	e00d      	b.n	800462c <strncmp+0x50>
 8004610:	f857 3b04 	ldr.w	r3, [r7], #4
 8004614:	680e      	ldr	r6, [r1, #0]
 8004616:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 800461a:	42b3      	cmp	r3, r6
 800461c:	ea24 0403 	bic.w	r4, r4, r3
 8004620:	d10a      	bne.n	8004638 <strncmp+0x5c>
 8004622:	3a04      	subs	r2, #4
 8004624:	d020      	beq.n	8004668 <strncmp+0x8c>
 8004626:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 800462a:	d123      	bne.n	8004674 <strncmp+0x98>
 800462c:	2a03      	cmp	r2, #3
 800462e:	4629      	mov	r1, r5
 8004630:	4638      	mov	r0, r7
 8004632:	f105 0504 	add.w	r5, r5, #4
 8004636:	d8eb      	bhi.n	8004610 <strncmp+0x34>
 8004638:	7803      	ldrb	r3, [r0, #0]
 800463a:	780c      	ldrb	r4, [r1, #0]
 800463c:	429c      	cmp	r4, r3
 800463e:	f102 32ff 	add.w	r2, r2, #4294967295
 8004642:	d10c      	bne.n	800465e <strncmp+0x82>
 8004644:	b182      	cbz	r2, 8004668 <strncmp+0x8c>
 8004646:	b914      	cbnz	r4, 800464e <strncmp+0x72>
 8004648:	e016      	b.n	8004678 <strncmp+0x9c>
 800464a:	b16a      	cbz	r2, 8004668 <strncmp+0x8c>
 800464c:	b17b      	cbz	r3, 800466e <strncmp+0x92>
 800464e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004652:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004656:	42a3      	cmp	r3, r4
 8004658:	f102 32ff 	add.w	r2, r2, #4294967295
 800465c:	d0f5      	beq.n	800464a <strncmp+0x6e>
 800465e:	1b18      	subs	r0, r3, r4
 8004660:	bcf0      	pop	{r4, r5, r6, r7}
 8004662:	4770      	bx	lr
 8004664:	4610      	mov	r0, r2
 8004666:	4770      	bx	lr
 8004668:	4610      	mov	r0, r2
 800466a:	bcf0      	pop	{r4, r5, r6, r7}
 800466c:	4770      	bx	lr
 800466e:	4618      	mov	r0, r3
 8004670:	bcf0      	pop	{r4, r5, r6, r7}
 8004672:	4770      	bx	lr
 8004674:	2000      	movs	r0, #0
 8004676:	e7f3      	b.n	8004660 <strncmp+0x84>
 8004678:	4620      	mov	r0, r4
 800467a:	e7f1      	b.n	8004660 <strncmp+0x84>
 800467c:	0000      	movs	r0, r0
	...

08004680 <_svfprintf_r>:
 8004680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004684:	b0c5      	sub	sp, #276	; 0x114
 8004686:	460c      	mov	r4, r1
 8004688:	9109      	str	r1, [sp, #36]	; 0x24
 800468a:	4615      	mov	r5, r2
 800468c:	930e      	str	r3, [sp, #56]	; 0x38
 800468e:	900a      	str	r0, [sp, #40]	; 0x28
 8004690:	f002 fd74 	bl	800717c <_localeconv_r>
 8004694:	6803      	ldr	r3, [r0, #0]
 8004696:	9317      	str	r3, [sp, #92]	; 0x5c
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff31 	bl	8004500 <strlen>
 800469e:	89a3      	ldrh	r3, [r4, #12]
 80046a0:	9016      	str	r0, [sp, #88]	; 0x58
 80046a2:	061e      	lsls	r6, r3, #24
 80046a4:	d503      	bpl.n	80046ae <_svfprintf_r+0x2e>
 80046a6:	6923      	ldr	r3, [r4, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f001 8133 	beq.w	8005914 <_svfprintf_r+0x1294>
 80046ae:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004948 <_svfprintf_r+0x2c8>
 80046b2:	2300      	movs	r3, #0
 80046b4:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80046b8:	9312      	str	r3, [sp, #72]	; 0x48
 80046ba:	9329      	str	r3, [sp, #164]	; 0xa4
 80046bc:	9328      	str	r3, [sp, #160]	; 0xa0
 80046be:	9319      	str	r3, [sp, #100]	; 0x64
 80046c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80046c2:	f8df a290 	ldr.w	sl, [pc, #656]	; 8004954 <_svfprintf_r+0x2d4>
 80046c6:	ab34      	add	r3, sp, #208	; 0xd0
 80046c8:	9327      	str	r3, [sp, #156]	; 0x9c
 80046ca:	4699      	mov	r9, r3
 80046cc:	46a8      	mov	r8, r5
 80046ce:	f898 3000 	ldrb.w	r3, [r8]
 80046d2:	4644      	mov	r4, r8
 80046d4:	b1eb      	cbz	r3, 8004712 <_svfprintf_r+0x92>
 80046d6:	2b25      	cmp	r3, #37	; 0x25
 80046d8:	d102      	bne.n	80046e0 <_svfprintf_r+0x60>
 80046da:	e01a      	b.n	8004712 <_svfprintf_r+0x92>
 80046dc:	2b25      	cmp	r3, #37	; 0x25
 80046de:	d003      	beq.n	80046e8 <_svfprintf_r+0x68>
 80046e0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f9      	bne.n	80046dc <_svfprintf_r+0x5c>
 80046e8:	ebc8 0504 	rsb	r5, r8, r4
 80046ec:	b18d      	cbz	r5, 8004712 <_svfprintf_r+0x92>
 80046ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80046f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80046f2:	f8c9 8000 	str.w	r8, [r9]
 80046f6:	3301      	adds	r3, #1
 80046f8:	442a      	add	r2, r5
 80046fa:	2b07      	cmp	r3, #7
 80046fc:	f8c9 5004 	str.w	r5, [r9, #4]
 8004700:	9229      	str	r2, [sp, #164]	; 0xa4
 8004702:	9328      	str	r3, [sp, #160]	; 0xa0
 8004704:	f300 80a6 	bgt.w	8004854 <_svfprintf_r+0x1d4>
 8004708:	f109 0908 	add.w	r9, r9, #8
 800470c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800470e:	442b      	add	r3, r5
 8004710:	930b      	str	r3, [sp, #44]	; 0x2c
 8004712:	7823      	ldrb	r3, [r4, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80a6 	beq.w	8004866 <_svfprintf_r+0x1e6>
 800471a:	2300      	movs	r3, #0
 800471c:	461a      	mov	r2, r3
 800471e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004722:	4619      	mov	r1, r3
 8004724:	930c      	str	r3, [sp, #48]	; 0x30
 8004726:	9307      	str	r3, [sp, #28]
 8004728:	f04f 3bff 	mov.w	fp, #4294967295
 800472c:	7863      	ldrb	r3, [r4, #1]
 800472e:	f104 0801 	add.w	r8, r4, #1
 8004732:	465d      	mov	r5, fp
 8004734:	f108 0801 	add.w	r8, r8, #1
 8004738:	f1a3 0020 	sub.w	r0, r3, #32
 800473c:	2858      	cmp	r0, #88	; 0x58
 800473e:	f200 8434 	bhi.w	8004faa <_svfprintf_r+0x92a>
 8004742:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004746:	03a0      	.short	0x03a0
 8004748:	04320432 	.word	0x04320432
 800474c:	043203a8 	.word	0x043203a8
 8004750:	04320432 	.word	0x04320432
 8004754:	04320432 	.word	0x04320432
 8004758:	03af0432 	.word	0x03af0432
 800475c:	043203bd 	.word	0x043203bd
 8004760:	00e2005d 	.word	0x00e2005d
 8004764:	01090432 	.word	0x01090432
 8004768:	01100110 	.word	0x01100110
 800476c:	01100110 	.word	0x01100110
 8004770:	01100110 	.word	0x01100110
 8004774:	01100110 	.word	0x01100110
 8004778:	04320110 	.word	0x04320110
 800477c:	04320432 	.word	0x04320432
 8004780:	04320432 	.word	0x04320432
 8004784:	04320432 	.word	0x04320432
 8004788:	04320432 	.word	0x04320432
 800478c:	01200432 	.word	0x01200432
 8004790:	04320286 	.word	0x04320286
 8004794:	04320286 	.word	0x04320286
 8004798:	04320432 	.word	0x04320432
 800479c:	02d40432 	.word	0x02d40432
 80047a0:	04320432 	.word	0x04320432
 80047a4:	043202e5 	.word	0x043202e5
 80047a8:	04320432 	.word	0x04320432
 80047ac:	04320432 	.word	0x04320432
 80047b0:	0432030f 	.word	0x0432030f
 80047b4:	033d0432 	.word	0x033d0432
 80047b8:	04320432 	.word	0x04320432
 80047bc:	04320432 	.word	0x04320432
 80047c0:	04320432 	.word	0x04320432
 80047c4:	04320432 	.word	0x04320432
 80047c8:	04320432 	.word	0x04320432
 80047cc:	0391037e 	.word	0x0391037e
 80047d0:	02860286 	.word	0x02860286
 80047d4:	03990286 	.word	0x03990286
 80047d8:	04320391 	.word	0x04320391
 80047dc:	04070432 	.word	0x04070432
 80047e0:	04120432 	.word	0x04120432
 80047e4:	006400a3 	.word	0x006400a3
 80047e8:	043203c2 	.word	0x043203c2
 80047ec:	043203c9 	.word	0x043203c9
 80047f0:	043203ea 	.word	0x043203ea
 80047f4:	03f20432 	.word	0x03f20432
 80047f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80047fa:	930e      	str	r3, [sp, #56]	; 0x38
 80047fc:	4240      	negs	r0, r0
 80047fe:	900c      	str	r0, [sp, #48]	; 0x30
 8004800:	9b07      	ldr	r3, [sp, #28]
 8004802:	f043 0304 	orr.w	r3, r3, #4
 8004806:	9307      	str	r3, [sp, #28]
 8004808:	f898 3000 	ldrb.w	r3, [r8]
 800480c:	e792      	b.n	8004734 <_svfprintf_r+0xb4>
 800480e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004810:	46ab      	mov	fp, r5
 8004812:	2100      	movs	r1, #0
 8004814:	6804      	ldr	r4, [r0, #0]
 8004816:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800481a:	1d07      	adds	r7, r0, #4
 800481c:	9807      	ldr	r0, [sp, #28]
 800481e:	2330      	movs	r3, #48	; 0x30
 8004820:	2278      	movs	r2, #120	; 0x78
 8004822:	458b      	cmp	fp, r1
 8004824:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8004828:	f04f 0500 	mov.w	r5, #0
 800482c:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8004830:	f040 0302 	orr.w	r3, r0, #2
 8004834:	f2c0 83d6 	blt.w	8004fe4 <_svfprintf_r+0x964>
 8004838:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 800483c:	f043 0302 	orr.w	r3, r3, #2
 8004840:	9307      	str	r3, [sp, #28]
 8004842:	ea54 0305 	orrs.w	r3, r4, r5
 8004846:	970e      	str	r7, [sp, #56]	; 0x38
 8004848:	f000 83a2 	beq.w	8004f90 <_svfprintf_r+0x910>
 800484c:	460f      	mov	r7, r1
 800484e:	9211      	str	r2, [sp, #68]	; 0x44
 8004850:	483f      	ldr	r0, [pc, #252]	; (8004950 <_svfprintf_r+0x2d0>)
 8004852:	e2e6      	b.n	8004e22 <_svfprintf_r+0x7a2>
 8004854:	aa27      	add	r2, sp, #156	; 0x9c
 8004856:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004858:	980a      	ldr	r0, [sp, #40]	; 0x28
 800485a:	f003 fd7f 	bl	800835c <__ssprint_r>
 800485e:	b948      	cbnz	r0, 8004874 <_svfprintf_r+0x1f4>
 8004860:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004864:	e752      	b.n	800470c <_svfprintf_r+0x8c>
 8004866:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004868:	b123      	cbz	r3, 8004874 <_svfprintf_r+0x1f4>
 800486a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800486c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800486e:	aa27      	add	r2, sp, #156	; 0x9c
 8004870:	f003 fd74 	bl	800835c <__ssprint_r>
 8004874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004876:	899b      	ldrh	r3, [r3, #12]
 8004878:	f013 0f40 	tst.w	r3, #64	; 0x40
 800487c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800487e:	bf18      	it	ne
 8004880:	f04f 33ff 	movne.w	r3, #4294967295
 8004884:	4618      	mov	r0, r3
 8004886:	b045      	add	sp, #276	; 0x114
 8004888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800488c:	9311      	str	r3, [sp, #68]	; 0x44
 800488e:	46ab      	mov	fp, r5
 8004890:	2a00      	cmp	r2, #0
 8004892:	f041 823b 	bne.w	8005d0c <_svfprintf_r+0x168c>
 8004896:	9a07      	ldr	r2, [sp, #28]
 8004898:	f012 0320 	ands.w	r3, r2, #32
 800489c:	f000 8246 	beq.w	8004d2c <_svfprintf_r+0x6ac>
 80048a0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80048a2:	3707      	adds	r7, #7
 80048a4:	f027 0307 	bic.w	r3, r7, #7
 80048a8:	2700      	movs	r7, #0
 80048aa:	f103 0108 	add.w	r1, r3, #8
 80048ae:	45bb      	cmp	fp, r7
 80048b0:	910e      	str	r1, [sp, #56]	; 0x38
 80048b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80048b6:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80048ba:	f2c0 8764 	blt.w	8005786 <_svfprintf_r+0x1106>
 80048be:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80048c2:	9307      	str	r3, [sp, #28]
 80048c4:	ea54 0305 	orrs.w	r3, r4, r5
 80048c8:	f000 8384 	beq.w	8004fd4 <_svfprintf_r+0x954>
 80048cc:	ae34      	add	r6, sp, #208	; 0xd0
 80048ce:	08e2      	lsrs	r2, r4, #3
 80048d0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 80048d4:	08e9      	lsrs	r1, r5, #3
 80048d6:	f004 0307 	and.w	r3, r4, #7
 80048da:	460d      	mov	r5, r1
 80048dc:	4614      	mov	r4, r2
 80048de:	3330      	adds	r3, #48	; 0x30
 80048e0:	ea54 0205 	orrs.w	r2, r4, r5
 80048e4:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80048e8:	d1f1      	bne.n	80048ce <_svfprintf_r+0x24e>
 80048ea:	9a07      	ldr	r2, [sp, #28]
 80048ec:	07d1      	lsls	r1, r2, #31
 80048ee:	f140 808f 	bpl.w	8004a10 <_svfprintf_r+0x390>
 80048f2:	2b30      	cmp	r3, #48	; 0x30
 80048f4:	f000 808c 	beq.w	8004a10 <_svfprintf_r+0x390>
 80048f8:	2230      	movs	r2, #48	; 0x30
 80048fa:	1e73      	subs	r3, r6, #1
 80048fc:	f806 2c01 	strb.w	r2, [r6, #-1]
 8004900:	aa34      	add	r2, sp, #208	; 0xd0
 8004902:	1ad2      	subs	r2, r2, r3
 8004904:	920d      	str	r2, [sp, #52]	; 0x34
 8004906:	461e      	mov	r6, r3
 8004908:	e085      	b.n	8004a16 <_svfprintf_r+0x396>
 800490a:	f898 3000 	ldrb.w	r3, [r8]
 800490e:	2b2a      	cmp	r3, #42	; 0x2a
 8004910:	f108 0401 	add.w	r4, r8, #1
 8004914:	f001 81ec 	beq.w	8005cf0 <_svfprintf_r+0x1670>
 8004918:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800491c:	2809      	cmp	r0, #9
 800491e:	bf98      	it	ls
 8004920:	2500      	movls	r5, #0
 8004922:	f201 818e 	bhi.w	8005c42 <_svfprintf_r+0x15c2>
 8004926:	f814 3b01 	ldrb.w	r3, [r4], #1
 800492a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800492e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8004932:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8004936:	2809      	cmp	r0, #9
 8004938:	d9f5      	bls.n	8004926 <_svfprintf_r+0x2a6>
 800493a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800493e:	46a0      	mov	r8, r4
 8004940:	e6fa      	b.n	8004738 <_svfprintf_r+0xb8>
 8004942:	bf00      	nop
 8004944:	f3af 8000 	nop.w
	...
 8004950:	080090f8 	.word	0x080090f8
 8004954:	080090c4 	.word	0x080090c4
 8004958:	9b07      	ldr	r3, [sp, #28]
 800495a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495e:	9307      	str	r3, [sp, #28]
 8004960:	f898 3000 	ldrb.w	r3, [r8]
 8004964:	e6e6      	b.n	8004734 <_svfprintf_r+0xb4>
 8004966:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800496a:	2300      	movs	r3, #0
 800496c:	461c      	mov	r4, r3
 800496e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004972:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004976:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800497a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800497e:	2809      	cmp	r0, #9
 8004980:	d9f5      	bls.n	800496e <_svfprintf_r+0x2ee>
 8004982:	940c      	str	r4, [sp, #48]	; 0x30
 8004984:	e6d8      	b.n	8004738 <_svfprintf_r+0xb8>
 8004986:	9311      	str	r3, [sp, #68]	; 0x44
 8004988:	46ab      	mov	fp, r5
 800498a:	2a00      	cmp	r2, #0
 800498c:	f041 81cc 	bne.w	8005d28 <_svfprintf_r+0x16a8>
 8004990:	9b07      	ldr	r3, [sp, #28]
 8004992:	f043 0310 	orr.w	r3, r3, #16
 8004996:	9307      	str	r3, [sp, #28]
 8004998:	9b07      	ldr	r3, [sp, #28]
 800499a:	069c      	lsls	r4, r3, #26
 800499c:	f140 8537 	bpl.w	800540e <_svfprintf_r+0xd8e>
 80049a0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80049a2:	3707      	adds	r7, #7
 80049a4:	f027 0707 	bic.w	r7, r7, #7
 80049a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049ac:	f107 0108 	add.w	r1, r7, #8
 80049b0:	910e      	str	r1, [sp, #56]	; 0x38
 80049b2:	4614      	mov	r4, r2
 80049b4:	461d      	mov	r5, r3
 80049b6:	2a00      	cmp	r2, #0
 80049b8:	f173 0300 	sbcs.w	r3, r3, #0
 80049bc:	f2c0 8562 	blt.w	8005484 <_svfprintf_r+0xe04>
 80049c0:	f1bb 0f00 	cmp.w	fp, #0
 80049c4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80049c8:	f2c0 853f 	blt.w	800544a <_svfprintf_r+0xdca>
 80049cc:	9b07      	ldr	r3, [sp, #28]
 80049ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d2:	9307      	str	r3, [sp, #28]
 80049d4:	ea54 0305 	orrs.w	r3, r4, r5
 80049d8:	f000 81e8 	beq.w	8004dac <_svfprintf_r+0x72c>
 80049dc:	2d00      	cmp	r5, #0
 80049de:	bf08      	it	eq
 80049e0:	2c0a      	cmpeq	r4, #10
 80049e2:	f0c0 81e8 	bcc.w	8004db6 <_svfprintf_r+0x736>
 80049e6:	ae34      	add	r6, sp, #208	; 0xd0
 80049e8:	4620      	mov	r0, r4
 80049ea:	4629      	mov	r1, r5
 80049ec:	220a      	movs	r2, #10
 80049ee:	2300      	movs	r3, #0
 80049f0:	f004 f8f6 	bl	8008be0 <__aeabi_uldivmod>
 80049f4:	3230      	adds	r2, #48	; 0x30
 80049f6:	f806 2d01 	strb.w	r2, [r6, #-1]!
 80049fa:	4620      	mov	r0, r4
 80049fc:	4629      	mov	r1, r5
 80049fe:	2300      	movs	r3, #0
 8004a00:	220a      	movs	r2, #10
 8004a02:	f004 f8ed 	bl	8008be0 <__aeabi_uldivmod>
 8004a06:	4604      	mov	r4, r0
 8004a08:	460d      	mov	r5, r1
 8004a0a:	ea54 0305 	orrs.w	r3, r4, r5
 8004a0e:	d1eb      	bne.n	80049e8 <_svfprintf_r+0x368>
 8004a10:	ab34      	add	r3, sp, #208	; 0xd0
 8004a12:	1b9b      	subs	r3, r3, r6
 8004a14:	930d      	str	r3, [sp, #52]	; 0x34
 8004a16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a18:	455b      	cmp	r3, fp
 8004a1a:	bfb8      	it	lt
 8004a1c:	465b      	movlt	r3, fp
 8004a1e:	9308      	str	r3, [sp, #32]
 8004a20:	2300      	movs	r3, #0
 8004a22:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a24:	b117      	cbz	r7, 8004a2c <_svfprintf_r+0x3ac>
 8004a26:	9b08      	ldr	r3, [sp, #32]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	9308      	str	r3, [sp, #32]
 8004a2c:	9b07      	ldr	r3, [sp, #28]
 8004a2e:	f013 0302 	ands.w	r3, r3, #2
 8004a32:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a34:	d002      	beq.n	8004a3c <_svfprintf_r+0x3bc>
 8004a36:	9b08      	ldr	r3, [sp, #32]
 8004a38:	3302      	adds	r3, #2
 8004a3a:	9308      	str	r3, [sp, #32]
 8004a3c:	9b07      	ldr	r3, [sp, #28]
 8004a3e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8004a42:	9310      	str	r3, [sp, #64]	; 0x40
 8004a44:	f040 82db 	bne.w	8004ffe <_svfprintf_r+0x97e>
 8004a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a4a:	9a08      	ldr	r2, [sp, #32]
 8004a4c:	1a9d      	subs	r5, r3, r2
 8004a4e:	2d00      	cmp	r5, #0
 8004a50:	f340 82d5 	ble.w	8004ffe <_svfprintf_r+0x97e>
 8004a54:	2d10      	cmp	r5, #16
 8004a56:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004a58:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004a5a:	4fa8      	ldr	r7, [pc, #672]	; (8004cfc <_svfprintf_r+0x67c>)
 8004a5c:	dd27      	ble.n	8004aae <_svfprintf_r+0x42e>
 8004a5e:	9618      	str	r6, [sp, #96]	; 0x60
 8004a60:	4648      	mov	r0, r9
 8004a62:	2410      	movs	r4, #16
 8004a64:	46b9      	mov	r9, r7
 8004a66:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004a68:	462f      	mov	r7, r5
 8004a6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004a6c:	e004      	b.n	8004a78 <_svfprintf_r+0x3f8>
 8004a6e:	3f10      	subs	r7, #16
 8004a70:	2f10      	cmp	r7, #16
 8004a72:	f100 0008 	add.w	r0, r0, #8
 8004a76:	dd16      	ble.n	8004aa6 <_svfprintf_r+0x426>
 8004a78:	3201      	adds	r2, #1
 8004a7a:	4ba0      	ldr	r3, [pc, #640]	; (8004cfc <_svfprintf_r+0x67c>)
 8004a7c:	9228      	str	r2, [sp, #160]	; 0xa0
 8004a7e:	3110      	adds	r1, #16
 8004a80:	2a07      	cmp	r2, #7
 8004a82:	9129      	str	r1, [sp, #164]	; 0xa4
 8004a84:	e880 0018 	stmia.w	r0, {r3, r4}
 8004a88:	ddf1      	ble.n	8004a6e <_svfprintf_r+0x3ee>
 8004a8a:	aa27      	add	r2, sp, #156	; 0x9c
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f003 fc64 	bl	800835c <__ssprint_r>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	f47f aeed 	bne.w	8004874 <_svfprintf_r+0x1f4>
 8004a9a:	3f10      	subs	r7, #16
 8004a9c:	2f10      	cmp	r7, #16
 8004a9e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8004aa0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8004aa2:	a834      	add	r0, sp, #208	; 0xd0
 8004aa4:	dce8      	bgt.n	8004a78 <_svfprintf_r+0x3f8>
 8004aa6:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8004aa8:	463d      	mov	r5, r7
 8004aaa:	464f      	mov	r7, r9
 8004aac:	4681      	mov	r9, r0
 8004aae:	3201      	adds	r2, #1
 8004ab0:	186c      	adds	r4, r5, r1
 8004ab2:	2a07      	cmp	r2, #7
 8004ab4:	9429      	str	r4, [sp, #164]	; 0xa4
 8004ab6:	9228      	str	r2, [sp, #160]	; 0xa0
 8004ab8:	f8c9 7000 	str.w	r7, [r9]
 8004abc:	f8c9 5004 	str.w	r5, [r9, #4]
 8004ac0:	f300 842d 	bgt.w	800531e <_svfprintf_r+0xc9e>
 8004ac4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004ac8:	f109 0908 	add.w	r9, r9, #8
 8004acc:	b177      	cbz	r7, 8004aec <_svfprintf_r+0x46c>
 8004ace:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	3401      	adds	r4, #1
 8004ad4:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8004ad8:	2201      	movs	r2, #1
 8004ada:	2b07      	cmp	r3, #7
 8004adc:	9429      	str	r4, [sp, #164]	; 0xa4
 8004ade:	9328      	str	r3, [sp, #160]	; 0xa0
 8004ae0:	e889 0006 	stmia.w	r9, {r1, r2}
 8004ae4:	f300 83a5 	bgt.w	8005232 <_svfprintf_r+0xbb2>
 8004ae8:	f109 0908 	add.w	r9, r9, #8
 8004aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004aee:	b16b      	cbz	r3, 8004b0c <_svfprintf_r+0x48c>
 8004af0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004af2:	3301      	adds	r3, #1
 8004af4:	3402      	adds	r4, #2
 8004af6:	a920      	add	r1, sp, #128	; 0x80
 8004af8:	2202      	movs	r2, #2
 8004afa:	2b07      	cmp	r3, #7
 8004afc:	9429      	str	r4, [sp, #164]	; 0xa4
 8004afe:	9328      	str	r3, [sp, #160]	; 0xa0
 8004b00:	e889 0006 	stmia.w	r9, {r1, r2}
 8004b04:	f300 83a1 	bgt.w	800524a <_svfprintf_r+0xbca>
 8004b08:	f109 0908 	add.w	r9, r9, #8
 8004b0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b0e:	2b80      	cmp	r3, #128	; 0x80
 8004b10:	f000 82e1 	beq.w	80050d6 <_svfprintf_r+0xa56>
 8004b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b16:	ebc3 070b 	rsb	r7, r3, fp
 8004b1a:	2f00      	cmp	r7, #0
 8004b1c:	dd33      	ble.n	8004b86 <_svfprintf_r+0x506>
 8004b1e:	4a78      	ldr	r2, [pc, #480]	; (8004d00 <_svfprintf_r+0x680>)
 8004b20:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004b22:	920f      	str	r2, [sp, #60]	; 0x3c
 8004b24:	2f10      	cmp	r7, #16
 8004b26:	dd22      	ble.n	8004b6e <_svfprintf_r+0x4ee>
 8004b28:	4622      	mov	r2, r4
 8004b2a:	f04f 0b10 	mov.w	fp, #16
 8004b2e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004b30:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004b32:	e004      	b.n	8004b3e <_svfprintf_r+0x4be>
 8004b34:	3f10      	subs	r7, #16
 8004b36:	2f10      	cmp	r7, #16
 8004b38:	f109 0908 	add.w	r9, r9, #8
 8004b3c:	dd16      	ble.n	8004b6c <_svfprintf_r+0x4ec>
 8004b3e:	3301      	adds	r3, #1
 8004b40:	3210      	adds	r2, #16
 8004b42:	2b07      	cmp	r3, #7
 8004b44:	9229      	str	r2, [sp, #164]	; 0xa4
 8004b46:	9328      	str	r3, [sp, #160]	; 0xa0
 8004b48:	e889 0c00 	stmia.w	r9, {sl, fp}
 8004b4c:	ddf2      	ble.n	8004b34 <_svfprintf_r+0x4b4>
 8004b4e:	aa27      	add	r2, sp, #156	; 0x9c
 8004b50:	4621      	mov	r1, r4
 8004b52:	4628      	mov	r0, r5
 8004b54:	f003 fc02 	bl	800835c <__ssprint_r>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	f47f ae8b 	bne.w	8004874 <_svfprintf_r+0x1f4>
 8004b5e:	3f10      	subs	r7, #16
 8004b60:	2f10      	cmp	r7, #16
 8004b62:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004b64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004b66:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004b6a:	dce8      	bgt.n	8004b3e <_svfprintf_r+0x4be>
 8004b6c:	4614      	mov	r4, r2
 8004b6e:	3301      	adds	r3, #1
 8004b70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b72:	9328      	str	r3, [sp, #160]	; 0xa0
 8004b74:	443c      	add	r4, r7
 8004b76:	2b07      	cmp	r3, #7
 8004b78:	9429      	str	r4, [sp, #164]	; 0xa4
 8004b7a:	e889 0084 	stmia.w	r9, {r2, r7}
 8004b7e:	f300 834c 	bgt.w	800521a <_svfprintf_r+0xb9a>
 8004b82:	f109 0908 	add.w	r9, r9, #8
 8004b86:	9b07      	ldr	r3, [sp, #28]
 8004b88:	05da      	lsls	r2, r3, #23
 8004b8a:	f100 823a 	bmi.w	8005002 <_svfprintf_r+0x982>
 8004b8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004b90:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b92:	f8c9 6000 	str.w	r6, [r9]
 8004b96:	3301      	adds	r3, #1
 8004b98:	440c      	add	r4, r1
 8004b9a:	2b07      	cmp	r3, #7
 8004b9c:	9429      	str	r4, [sp, #164]	; 0xa4
 8004b9e:	f8c9 1004 	str.w	r1, [r9, #4]
 8004ba2:	9328      	str	r3, [sp, #160]	; 0xa0
 8004ba4:	f300 8323 	bgt.w	80051ee <_svfprintf_r+0xb6e>
 8004ba8:	f109 0908 	add.w	r9, r9, #8
 8004bac:	9b07      	ldr	r3, [sp, #28]
 8004bae:	0759      	lsls	r1, r3, #29
 8004bb0:	d53f      	bpl.n	8004c32 <_svfprintf_r+0x5b2>
 8004bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bb4:	9a08      	ldr	r2, [sp, #32]
 8004bb6:	1a9d      	subs	r5, r3, r2
 8004bb8:	2d00      	cmp	r5, #0
 8004bba:	dd3a      	ble.n	8004c32 <_svfprintf_r+0x5b2>
 8004bbc:	2d10      	cmp	r5, #16
 8004bbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004bc0:	4f4e      	ldr	r7, [pc, #312]	; (8004cfc <_svfprintf_r+0x67c>)
 8004bc2:	dd23      	ble.n	8004c0c <_svfprintf_r+0x58c>
 8004bc4:	4622      	mov	r2, r4
 8004bc6:	2610      	movs	r6, #16
 8004bc8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004bcc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004bce:	e004      	b.n	8004bda <_svfprintf_r+0x55a>
 8004bd0:	3d10      	subs	r5, #16
 8004bd2:	2d10      	cmp	r5, #16
 8004bd4:	f109 0908 	add.w	r9, r9, #8
 8004bd8:	dd17      	ble.n	8004c0a <_svfprintf_r+0x58a>
 8004bda:	3301      	adds	r3, #1
 8004bdc:	4947      	ldr	r1, [pc, #284]	; (8004cfc <_svfprintf_r+0x67c>)
 8004bde:	9328      	str	r3, [sp, #160]	; 0xa0
 8004be0:	3210      	adds	r2, #16
 8004be2:	2b07      	cmp	r3, #7
 8004be4:	9229      	str	r2, [sp, #164]	; 0xa4
 8004be6:	e889 0042 	stmia.w	r9, {r1, r6}
 8004bea:	ddf1      	ble.n	8004bd0 <_svfprintf_r+0x550>
 8004bec:	aa27      	add	r2, sp, #156	; 0x9c
 8004bee:	4621      	mov	r1, r4
 8004bf0:	4658      	mov	r0, fp
 8004bf2:	f003 fbb3 	bl	800835c <__ssprint_r>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	f47f ae3c 	bne.w	8004874 <_svfprintf_r+0x1f4>
 8004bfc:	3d10      	subs	r5, #16
 8004bfe:	2d10      	cmp	r5, #16
 8004c00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004c02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004c04:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004c08:	dce7      	bgt.n	8004bda <_svfprintf_r+0x55a>
 8004c0a:	4614      	mov	r4, r2
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	442c      	add	r4, r5
 8004c10:	2b07      	cmp	r3, #7
 8004c12:	9429      	str	r4, [sp, #164]	; 0xa4
 8004c14:	9328      	str	r3, [sp, #160]	; 0xa0
 8004c16:	f8c9 7000 	str.w	r7, [r9]
 8004c1a:	f8c9 5004 	str.w	r5, [r9, #4]
 8004c1e:	dd08      	ble.n	8004c32 <_svfprintf_r+0x5b2>
 8004c20:	aa27      	add	r2, sp, #156	; 0x9c
 8004c22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c24:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004c26:	f003 fb99 	bl	800835c <__ssprint_r>
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	f47f ae22 	bne.w	8004874 <_svfprintf_r+0x1f4>
 8004c30:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c36:	9908      	ldr	r1, [sp, #32]
 8004c38:	428a      	cmp	r2, r1
 8004c3a:	bfac      	ite	ge
 8004c3c:	189b      	addge	r3, r3, r2
 8004c3e:	185b      	addlt	r3, r3, r1
 8004c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c42:	2c00      	cmp	r4, #0
 8004c44:	f040 82df 	bne.w	8005206 <_svfprintf_r+0xb86>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	9328      	str	r3, [sp, #160]	; 0xa0
 8004c4c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004c50:	e53d      	b.n	80046ce <_svfprintf_r+0x4e>
 8004c52:	9311      	str	r3, [sp, #68]	; 0x44
 8004c54:	46ab      	mov	fp, r5
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	f041 806a 	bne.w	8005d30 <_svfprintf_r+0x16b0>
 8004c5c:	9b07      	ldr	r3, [sp, #28]
 8004c5e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004c60:	071a      	lsls	r2, r3, #28
 8004c62:	f107 0707 	add.w	r7, r7, #7
 8004c66:	f140 8576 	bpl.w	8005756 <_svfprintf_r+0x10d6>
 8004c6a:	f027 0307 	bic.w	r3, r7, #7
 8004c6e:	ed93 7b00 	vldr	d7, [r3]
 8004c72:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004c76:	f103 0208 	add.w	r2, r3, #8
 8004c7a:	920e      	str	r2, [sp, #56]	; 0x38
 8004c7c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8004c80:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8004c84:	911a      	str	r1, [sp, #104]	; 0x68
 8004c86:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c88:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8004c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c90:	4620      	mov	r0, r4
 8004c92:	4629      	mov	r1, r5
 8004c94:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <_svfprintf_r+0x684>)
 8004c96:	f7ff fa19 	bl	80040cc <__aeabi_dcmpun>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	f040 84da 	bne.w	8005654 <_svfprintf_r+0xfd4>
 8004ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca4:	4b17      	ldr	r3, [pc, #92]	; (8004d04 <_svfprintf_r+0x684>)
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	4629      	mov	r1, r5
 8004caa:	f7ff f9f1 	bl	8004090 <__aeabi_dcmple>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	f040 84d0 	bne.w	8005654 <_svfprintf_r+0xfd4>
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004cbc:	f7ff f9de 	bl	800407c <__aeabi_dcmplt>
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	f040 875a 	bne.w	8005b7a <_svfprintf_r+0x14fa>
 8004cc6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004cca:	4e0f      	ldr	r6, [pc, #60]	; (8004d08 <_svfprintf_r+0x688>)
 8004ccc:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <_svfprintf_r+0x68c>)
 8004cce:	9907      	ldr	r1, [sp, #28]
 8004cd0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004cd4:	9107      	str	r1, [sp, #28]
 8004cd6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004cd8:	2203      	movs	r2, #3
 8004cda:	f04f 0b00 	mov.w	fp, #0
 8004cde:	9208      	str	r2, [sp, #32]
 8004ce0:	2947      	cmp	r1, #71	; 0x47
 8004ce2:	bfd8      	it	le
 8004ce4:	461e      	movle	r6, r3
 8004ce6:	920d      	str	r2, [sp, #52]	; 0x34
 8004ce8:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8004cec:	e69a      	b.n	8004a24 <_svfprintf_r+0x3a4>
 8004cee:	9b07      	ldr	r3, [sp, #28]
 8004cf0:	f043 0308 	orr.w	r3, r3, #8
 8004cf4:	9307      	str	r3, [sp, #28]
 8004cf6:	f898 3000 	ldrb.w	r3, [r8]
 8004cfa:	e51b      	b.n	8004734 <_svfprintf_r+0xb4>
 8004cfc:	08009118 	.word	0x08009118
 8004d00:	080090c4 	.word	0x080090c4
 8004d04:	7fefffff 	.word	0x7fefffff
 8004d08:	080090d8 	.word	0x080090d8
 8004d0c:	080090d4 	.word	0x080090d4
 8004d10:	9311      	str	r3, [sp, #68]	; 0x44
 8004d12:	46ab      	mov	fp, r5
 8004d14:	2a00      	cmp	r2, #0
 8004d16:	f041 8017 	bne.w	8005d48 <_svfprintf_r+0x16c8>
 8004d1a:	9b07      	ldr	r3, [sp, #28]
 8004d1c:	f043 0310 	orr.w	r3, r3, #16
 8004d20:	9307      	str	r3, [sp, #28]
 8004d22:	9a07      	ldr	r2, [sp, #28]
 8004d24:	f012 0320 	ands.w	r3, r2, #32
 8004d28:	f47f adba 	bne.w	80048a0 <_svfprintf_r+0x220>
 8004d2c:	9907      	ldr	r1, [sp, #28]
 8004d2e:	f011 0210 	ands.w	r2, r1, #16
 8004d32:	f000 845b 	beq.w	80055ec <_svfprintf_r+0xf6c>
 8004d36:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004d38:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004d3c:	f1bb 0f00 	cmp.w	fp, #0
 8004d40:	6804      	ldr	r4, [r0, #0]
 8004d42:	f100 0704 	add.w	r7, r0, #4
 8004d46:	f04f 0500 	mov.w	r5, #0
 8004d4a:	f2c0 851b 	blt.w	8005784 <_svfprintf_r+0x1104>
 8004d4e:	460a      	mov	r2, r1
 8004d50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d54:	9207      	str	r2, [sp, #28]
 8004d56:	ea54 0205 	orrs.w	r2, r4, r5
 8004d5a:	970e      	str	r7, [sp, #56]	; 0x38
 8004d5c:	f000 813a 	beq.w	8004fd4 <_svfprintf_r+0x954>
 8004d60:	461f      	mov	r7, r3
 8004d62:	e5b3      	b.n	80048cc <_svfprintf_r+0x24c>
 8004d64:	9311      	str	r3, [sp, #68]	; 0x44
 8004d66:	46ab      	mov	fp, r5
 8004d68:	2a00      	cmp	r2, #0
 8004d6a:	f040 87e9 	bne.w	8005d40 <_svfprintf_r+0x16c0>
 8004d6e:	9b07      	ldr	r3, [sp, #28]
 8004d70:	f043 0310 	orr.w	r3, r3, #16
 8004d74:	9307      	str	r3, [sp, #28]
 8004d76:	9a07      	ldr	r2, [sp, #28]
 8004d78:	f012 0320 	ands.w	r3, r2, #32
 8004d7c:	f000 832c 	beq.w	80053d8 <_svfprintf_r+0xd58>
 8004d80:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004d82:	3707      	adds	r7, #7
 8004d84:	f027 0307 	bic.w	r3, r7, #7
 8004d88:	2700      	movs	r7, #0
 8004d8a:	f103 0108 	add.w	r1, r3, #8
 8004d8e:	45bb      	cmp	fp, r7
 8004d90:	910e      	str	r1, [sp, #56]	; 0x38
 8004d92:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004d96:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004d9a:	f2c0 8356 	blt.w	800544a <_svfprintf_r+0xdca>
 8004d9e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004da2:	9307      	str	r3, [sp, #28]
 8004da4:	ea54 0305 	orrs.w	r3, r4, r5
 8004da8:	f47f ae18 	bne.w	80049dc <_svfprintf_r+0x35c>
 8004dac:	f1bb 0f00 	cmp.w	fp, #0
 8004db0:	f000 80f5 	beq.w	8004f9e <_svfprintf_r+0x91e>
 8004db4:	2400      	movs	r4, #0
 8004db6:	ae44      	add	r6, sp, #272	; 0x110
 8004db8:	3430      	adds	r4, #48	; 0x30
 8004dba:	f806 4d41 	strb.w	r4, [r6, #-65]!
 8004dbe:	e627      	b.n	8004a10 <_svfprintf_r+0x390>
 8004dc0:	9311      	str	r3, [sp, #68]	; 0x44
 8004dc2:	46ab      	mov	fp, r5
 8004dc4:	2a00      	cmp	r2, #0
 8004dc6:	f040 87b7 	bne.w	8005d38 <_svfprintf_r+0x16b8>
 8004dca:	9b07      	ldr	r3, [sp, #28]
 8004dcc:	48af      	ldr	r0, [pc, #700]	; (800508c <_svfprintf_r+0xa0c>)
 8004dce:	069d      	lsls	r5, r3, #26
 8004dd0:	f140 80b5 	bpl.w	8004f3e <_svfprintf_r+0x8be>
 8004dd4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004dd6:	3707      	adds	r7, #7
 8004dd8:	f027 0307 	bic.w	r3, r7, #7
 8004ddc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004de0:	f103 0208 	add.w	r2, r3, #8
 8004de4:	920e      	str	r2, [sp, #56]	; 0x38
 8004de6:	9a07      	ldr	r2, [sp, #28]
 8004de8:	f012 0701 	ands.w	r7, r2, #1
 8004dec:	f000 8239 	beq.w	8005262 <_svfprintf_r+0xbe2>
 8004df0:	ea54 0305 	orrs.w	r3, r4, r5
 8004df4:	f000 8504 	beq.w	8005800 <_svfprintf_r+0x1180>
 8004df8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8004dfc:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8004e00:	2700      	movs	r7, #0
 8004e02:	9a07      	ldr	r2, [sp, #28]
 8004e04:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8004e08:	2330      	movs	r3, #48	; 0x30
 8004e0a:	45bb      	cmp	fp, r7
 8004e0c:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8004e10:	f042 0302 	orr.w	r3, r2, #2
 8004e14:	f2c0 86b6 	blt.w	8005b84 <_svfprintf_r+0x1504>
 8004e18:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8004e1c:	f043 0302 	orr.w	r3, r3, #2
 8004e20:	9307      	str	r3, [sp, #28]
 8004e22:	ae34      	add	r6, sp, #208	; 0xd0
 8004e24:	0923      	lsrs	r3, r4, #4
 8004e26:	f004 010f 	and.w	r1, r4, #15
 8004e2a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8004e2e:	092a      	lsrs	r2, r5, #4
 8004e30:	461c      	mov	r4, r3
 8004e32:	4615      	mov	r5, r2
 8004e34:	5c43      	ldrb	r3, [r0, r1]
 8004e36:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8004e3a:	ea54 0305 	orrs.w	r3, r4, r5
 8004e3e:	d1f1      	bne.n	8004e24 <_svfprintf_r+0x7a4>
 8004e40:	e5e6      	b.n	8004a10 <_svfprintf_r+0x390>
 8004e42:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004e44:	9311      	str	r3, [sp, #68]	; 0x44
 8004e46:	680a      	ldr	r2, [r1, #0]
 8004e48:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	460a      	mov	r2, r1
 8004e50:	461f      	mov	r7, r3
 8004e52:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004e56:	3204      	adds	r2, #4
 8004e58:	2301      	movs	r3, #1
 8004e5a:	9308      	str	r3, [sp, #32]
 8004e5c:	46bb      	mov	fp, r7
 8004e5e:	9713      	str	r7, [sp, #76]	; 0x4c
 8004e60:	920e      	str	r2, [sp, #56]	; 0x38
 8004e62:	930d      	str	r3, [sp, #52]	; 0x34
 8004e64:	ae2a      	add	r6, sp, #168	; 0xa8
 8004e66:	e5e1      	b.n	8004a2c <_svfprintf_r+0x3ac>
 8004e68:	9311      	str	r3, [sp, #68]	; 0x44
 8004e6a:	46ab      	mov	fp, r5
 8004e6c:	2a00      	cmp	r2, #0
 8004e6e:	f43f ad93 	beq.w	8004998 <_svfprintf_r+0x318>
 8004e72:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004e76:	e58f      	b.n	8004998 <_svfprintf_r+0x318>
 8004e78:	9b07      	ldr	r3, [sp, #28]
 8004e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e7e:	9307      	str	r3, [sp, #28]
 8004e80:	f898 3000 	ldrb.w	r3, [r8]
 8004e84:	e456      	b.n	8004734 <_svfprintf_r+0xb4>
 8004e86:	f898 3000 	ldrb.w	r3, [r8]
 8004e8a:	2900      	cmp	r1, #0
 8004e8c:	f47f ac52 	bne.w	8004734 <_svfprintf_r+0xb4>
 8004e90:	2201      	movs	r2, #1
 8004e92:	2120      	movs	r1, #32
 8004e94:	e44e      	b.n	8004734 <_svfprintf_r+0xb4>
 8004e96:	9b07      	ldr	r3, [sp, #28]
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	9307      	str	r3, [sp, #28]
 8004e9e:	f898 3000 	ldrb.w	r3, [r8]
 8004ea2:	e447      	b.n	8004734 <_svfprintf_r+0xb4>
 8004ea4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	930c      	str	r3, [sp, #48]	; 0x30
 8004eaa:	4618      	mov	r0, r3
 8004eac:	2800      	cmp	r0, #0
 8004eae:	4623      	mov	r3, r4
 8004eb0:	f103 0304 	add.w	r3, r3, #4
 8004eb4:	f6ff aca0 	blt.w	80047f8 <_svfprintf_r+0x178>
 8004eb8:	930e      	str	r3, [sp, #56]	; 0x38
 8004eba:	f898 3000 	ldrb.w	r3, [r8]
 8004ebe:	e439      	b.n	8004734 <_svfprintf_r+0xb4>
 8004ec0:	f898 3000 	ldrb.w	r3, [r8]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	212b      	movs	r1, #43	; 0x2b
 8004ec8:	e434      	b.n	8004734 <_svfprintf_r+0xb4>
 8004eca:	9b07      	ldr	r3, [sp, #28]
 8004ecc:	f043 0320 	orr.w	r3, r3, #32
 8004ed0:	9307      	str	r3, [sp, #28]
 8004ed2:	f898 3000 	ldrb.w	r3, [r8]
 8004ed6:	e42d      	b.n	8004734 <_svfprintf_r+0xb4>
 8004ed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eda:	9311      	str	r3, [sp, #68]	; 0x44
 8004edc:	6816      	ldr	r6, [r2, #0]
 8004ede:	2400      	movs	r4, #0
 8004ee0:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 8004ee4:	1d17      	adds	r7, r2, #4
 8004ee6:	2e00      	cmp	r6, #0
 8004ee8:	f000 8621 	beq.w	8005b2e <_svfprintf_r+0x14ae>
 8004eec:	2d00      	cmp	r5, #0
 8004eee:	f2c0 8566 	blt.w	80059be <_svfprintf_r+0x133e>
 8004ef2:	462a      	mov	r2, r5
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f002 fc22 	bl	8007740 <memchr>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	f000 866b 	beq.w	8005bd8 <_svfprintf_r+0x1558>
 8004f02:	1b83      	subs	r3, r0, r6
 8004f04:	930d      	str	r3, [sp, #52]	; 0x34
 8004f06:	46a3      	mov	fp, r4
 8004f08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004f0c:	970e      	str	r7, [sp, #56]	; 0x38
 8004f0e:	9308      	str	r3, [sp, #32]
 8004f10:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8004f14:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8004f18:	e584      	b.n	8004a24 <_svfprintf_r+0x3a4>
 8004f1a:	9311      	str	r3, [sp, #68]	; 0x44
 8004f1c:	46ab      	mov	fp, r5
 8004f1e:	2a00      	cmp	r2, #0
 8004f20:	f43f af29 	beq.w	8004d76 <_svfprintf_r+0x6f6>
 8004f24:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004f28:	e725      	b.n	8004d76 <_svfprintf_r+0x6f6>
 8004f2a:	9311      	str	r3, [sp, #68]	; 0x44
 8004f2c:	46ab      	mov	fp, r5
 8004f2e:	2a00      	cmp	r2, #0
 8004f30:	f040 8716 	bne.w	8005d60 <_svfprintf_r+0x16e0>
 8004f34:	9b07      	ldr	r3, [sp, #28]
 8004f36:	4856      	ldr	r0, [pc, #344]	; (8005090 <_svfprintf_r+0xa10>)
 8004f38:	069d      	lsls	r5, r3, #26
 8004f3a:	f53f af4b 	bmi.w	8004dd4 <_svfprintf_r+0x754>
 8004f3e:	9b07      	ldr	r3, [sp, #28]
 8004f40:	06dc      	lsls	r4, r3, #27
 8004f42:	f140 8440 	bpl.w	80057c6 <_svfprintf_r+0x1146>
 8004f46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f48:	4613      	mov	r3, r2
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	6814      	ldr	r4, [r2, #0]
 8004f4e:	930e      	str	r3, [sp, #56]	; 0x38
 8004f50:	2500      	movs	r5, #0
 8004f52:	e748      	b.n	8004de6 <_svfprintf_r+0x766>
 8004f54:	f898 3000 	ldrb.w	r3, [r8]
 8004f58:	2b6c      	cmp	r3, #108	; 0x6c
 8004f5a:	f000 84c4 	beq.w	80058e6 <_svfprintf_r+0x1266>
 8004f5e:	9807      	ldr	r0, [sp, #28]
 8004f60:	f040 0010 	orr.w	r0, r0, #16
 8004f64:	9007      	str	r0, [sp, #28]
 8004f66:	f7ff bbe5 	b.w	8004734 <_svfprintf_r+0xb4>
 8004f6a:	2a00      	cmp	r2, #0
 8004f6c:	f040 86f4 	bne.w	8005d58 <_svfprintf_r+0x16d8>
 8004f70:	9b07      	ldr	r3, [sp, #28]
 8004f72:	069b      	lsls	r3, r3, #26
 8004f74:	f140 8357 	bpl.w	8005626 <_svfprintf_r+0xfa6>
 8004f78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f7c:	6813      	ldr	r3, [r2, #0]
 8004f7e:	17cd      	asrs	r5, r1, #31
 8004f80:	4608      	mov	r0, r1
 8004f82:	3204      	adds	r2, #4
 8004f84:	4629      	mov	r1, r5
 8004f86:	920e      	str	r2, [sp, #56]	; 0x38
 8004f88:	e9c3 0100 	strd	r0, r1, [r3]
 8004f8c:	f7ff bb9f 	b.w	80046ce <_svfprintf_r+0x4e>
 8004f90:	483f      	ldr	r0, [pc, #252]	; (8005090 <_svfprintf_r+0xa10>)
 8004f92:	9211      	str	r2, [sp, #68]	; 0x44
 8004f94:	f1bb 0f00 	cmp.w	fp, #0
 8004f98:	f040 8174 	bne.w	8005284 <_svfprintf_r+0xc04>
 8004f9c:	465f      	mov	r7, fp
 8004f9e:	f04f 0b00 	mov.w	fp, #0
 8004fa2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8004fa6:	ae34      	add	r6, sp, #208	; 0xd0
 8004fa8:	e535      	b.n	8004a16 <_svfprintf_r+0x396>
 8004faa:	9311      	str	r3, [sp, #68]	; 0x44
 8004fac:	2a00      	cmp	r2, #0
 8004fae:	f040 86cf 	bne.w	8005d50 <_svfprintf_r+0x16d0>
 8004fb2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004fb4:	2a00      	cmp	r2, #0
 8004fb6:	f43f ac56 	beq.w	8004866 <_svfprintf_r+0x1e6>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	461f      	mov	r7, r3
 8004fc0:	9108      	str	r1, [sp, #32]
 8004fc2:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8004fc6:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004fca:	469b      	mov	fp, r3
 8004fcc:	9313      	str	r3, [sp, #76]	; 0x4c
 8004fce:	910d      	str	r1, [sp, #52]	; 0x34
 8004fd0:	ae2a      	add	r6, sp, #168	; 0xa8
 8004fd2:	e52b      	b.n	8004a2c <_svfprintf_r+0x3ac>
 8004fd4:	f1bb 0f00 	cmp.w	fp, #0
 8004fd8:	f000 8616 	beq.w	8005c08 <_svfprintf_r+0x1588>
 8004fdc:	2700      	movs	r7, #0
 8004fde:	2400      	movs	r4, #0
 8004fe0:	2500      	movs	r5, #0
 8004fe2:	e473      	b.n	80048cc <_svfprintf_r+0x24c>
 8004fe4:	482a      	ldr	r0, [pc, #168]	; (8005090 <_svfprintf_r+0xa10>)
 8004fe6:	9307      	str	r3, [sp, #28]
 8004fe8:	9211      	str	r2, [sp, #68]	; 0x44
 8004fea:	ea54 0305 	orrs.w	r3, r4, r5
 8004fee:	970e      	str	r7, [sp, #56]	; 0x38
 8004ff0:	f04f 0700 	mov.w	r7, #0
 8004ff4:	f47f af15 	bne.w	8004e22 <_svfprintf_r+0x7a2>
 8004ff8:	2400      	movs	r4, #0
 8004ffa:	2500      	movs	r5, #0
 8004ffc:	e711      	b.n	8004e22 <_svfprintf_r+0x7a2>
 8004ffe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005000:	e564      	b.n	8004acc <_svfprintf_r+0x44c>
 8005002:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005004:	2b65      	cmp	r3, #101	; 0x65
 8005006:	f340 80aa 	ble.w	800515e <_svfprintf_r+0xade>
 800500a:	2200      	movs	r2, #0
 800500c:	2300      	movs	r3, #0
 800500e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005012:	f7ff f829 	bl	8004068 <__aeabi_dcmpeq>
 8005016:	2800      	cmp	r0, #0
 8005018:	f000 8136 	beq.w	8005288 <_svfprintf_r+0xc08>
 800501c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800501e:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <_svfprintf_r+0xa14>)
 8005020:	f8c9 2000 	str.w	r2, [r9]
 8005024:	3301      	adds	r3, #1
 8005026:	3401      	adds	r4, #1
 8005028:	2201      	movs	r2, #1
 800502a:	2b07      	cmp	r3, #7
 800502c:	9429      	str	r4, [sp, #164]	; 0xa4
 800502e:	9328      	str	r3, [sp, #160]	; 0xa0
 8005030:	f8c9 2004 	str.w	r2, [r9, #4]
 8005034:	f300 83f0 	bgt.w	8005818 <_svfprintf_r+0x1198>
 8005038:	f109 0908 	add.w	r9, r9, #8
 800503c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800503e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005040:	4293      	cmp	r3, r2
 8005042:	db03      	blt.n	800504c <_svfprintf_r+0x9cc>
 8005044:	9b07      	ldr	r3, [sp, #28]
 8005046:	07db      	lsls	r3, r3, #31
 8005048:	f57f adb0 	bpl.w	8004bac <_svfprintf_r+0x52c>
 800504c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800504e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005050:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005052:	f8c9 2000 	str.w	r2, [r9]
 8005056:	3301      	adds	r3, #1
 8005058:	440c      	add	r4, r1
 800505a:	2b07      	cmp	r3, #7
 800505c:	9429      	str	r4, [sp, #164]	; 0xa4
 800505e:	f8c9 1004 	str.w	r1, [r9, #4]
 8005062:	9328      	str	r3, [sp, #160]	; 0xa0
 8005064:	f300 8449 	bgt.w	80058fa <_svfprintf_r+0x127a>
 8005068:	f109 0908 	add.w	r9, r9, #8
 800506c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800506e:	1e5d      	subs	r5, r3, #1
 8005070:	2d00      	cmp	r5, #0
 8005072:	f77f ad9b 	ble.w	8004bac <_svfprintf_r+0x52c>
 8005076:	4a08      	ldr	r2, [pc, #32]	; (8005098 <_svfprintf_r+0xa18>)
 8005078:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800507a:	920f      	str	r2, [sp, #60]	; 0x3c
 800507c:	2d10      	cmp	r5, #16
 800507e:	f340 81e9 	ble.w	8005454 <_svfprintf_r+0xdd4>
 8005082:	2610      	movs	r6, #16
 8005084:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005086:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800508a:	e00d      	b.n	80050a8 <_svfprintf_r+0xa28>
 800508c:	080090e4 	.word	0x080090e4
 8005090:	080090f8 	.word	0x080090f8
 8005094:	08009114 	.word	0x08009114
 8005098:	080090c4 	.word	0x080090c4
 800509c:	f109 0908 	add.w	r9, r9, #8
 80050a0:	3d10      	subs	r5, #16
 80050a2:	2d10      	cmp	r5, #16
 80050a4:	f340 81d6 	ble.w	8005454 <_svfprintf_r+0xdd4>
 80050a8:	3301      	adds	r3, #1
 80050aa:	3410      	adds	r4, #16
 80050ac:	2b07      	cmp	r3, #7
 80050ae:	9429      	str	r4, [sp, #164]	; 0xa4
 80050b0:	9328      	str	r3, [sp, #160]	; 0xa0
 80050b2:	f8c9 a000 	str.w	sl, [r9]
 80050b6:	f8c9 6004 	str.w	r6, [r9, #4]
 80050ba:	ddef      	ble.n	800509c <_svfprintf_r+0xa1c>
 80050bc:	aa27      	add	r2, sp, #156	; 0x9c
 80050be:	4659      	mov	r1, fp
 80050c0:	4638      	mov	r0, r7
 80050c2:	f003 f94b 	bl	800835c <__ssprint_r>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	f47f abd4 	bne.w	8004874 <_svfprintf_r+0x1f4>
 80050cc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80050ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80050d0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80050d4:	e7e4      	b.n	80050a0 <_svfprintf_r+0xa20>
 80050d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050d8:	9a08      	ldr	r2, [sp, #32]
 80050da:	1a9f      	subs	r7, r3, r2
 80050dc:	2f00      	cmp	r7, #0
 80050de:	f77f ad19 	ble.w	8004b14 <_svfprintf_r+0x494>
 80050e2:	4abc      	ldr	r2, [pc, #752]	; (80053d4 <_svfprintf_r+0xd54>)
 80050e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80050e6:	920f      	str	r2, [sp, #60]	; 0x3c
 80050e8:	2f10      	cmp	r7, #16
 80050ea:	dd2b      	ble.n	8005144 <_svfprintf_r+0xac4>
 80050ec:	464a      	mov	r2, r9
 80050ee:	4621      	mov	r1, r4
 80050f0:	46b9      	mov	r9, r7
 80050f2:	2510      	movs	r5, #16
 80050f4:	4637      	mov	r7, r6
 80050f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80050f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80050fa:	e006      	b.n	800510a <_svfprintf_r+0xa8a>
 80050fc:	f1a9 0910 	sub.w	r9, r9, #16
 8005100:	f1b9 0f10 	cmp.w	r9, #16
 8005104:	f102 0208 	add.w	r2, r2, #8
 8005108:	dd18      	ble.n	800513c <_svfprintf_r+0xabc>
 800510a:	3301      	adds	r3, #1
 800510c:	3110      	adds	r1, #16
 800510e:	2b07      	cmp	r3, #7
 8005110:	9129      	str	r1, [sp, #164]	; 0xa4
 8005112:	9328      	str	r3, [sp, #160]	; 0xa0
 8005114:	f8c2 a000 	str.w	sl, [r2]
 8005118:	6055      	str	r5, [r2, #4]
 800511a:	ddef      	ble.n	80050fc <_svfprintf_r+0xa7c>
 800511c:	aa27      	add	r2, sp, #156	; 0x9c
 800511e:	4631      	mov	r1, r6
 8005120:	4620      	mov	r0, r4
 8005122:	f003 f91b 	bl	800835c <__ssprint_r>
 8005126:	2800      	cmp	r0, #0
 8005128:	f47f aba4 	bne.w	8004874 <_svfprintf_r+0x1f4>
 800512c:	f1a9 0910 	sub.w	r9, r9, #16
 8005130:	f1b9 0f10 	cmp.w	r9, #16
 8005134:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8005136:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005138:	aa34      	add	r2, sp, #208	; 0xd0
 800513a:	dce6      	bgt.n	800510a <_svfprintf_r+0xa8a>
 800513c:	463e      	mov	r6, r7
 800513e:	460c      	mov	r4, r1
 8005140:	464f      	mov	r7, r9
 8005142:	4691      	mov	r9, r2
 8005144:	3301      	adds	r3, #1
 8005146:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005148:	9328      	str	r3, [sp, #160]	; 0xa0
 800514a:	443c      	add	r4, r7
 800514c:	2b07      	cmp	r3, #7
 800514e:	9429      	str	r4, [sp, #164]	; 0xa4
 8005150:	e889 0084 	stmia.w	r9, {r2, r7}
 8005154:	f300 823d 	bgt.w	80055d2 <_svfprintf_r+0xf52>
 8005158:	f109 0908 	add.w	r9, r9, #8
 800515c:	e4da      	b.n	8004b14 <_svfprintf_r+0x494>
 800515e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005160:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8005162:	2b01      	cmp	r3, #1
 8005164:	f340 820a 	ble.w	800557c <_svfprintf_r+0xefc>
 8005168:	3501      	adds	r5, #1
 800516a:	3401      	adds	r4, #1
 800516c:	2301      	movs	r3, #1
 800516e:	2d07      	cmp	r5, #7
 8005170:	9429      	str	r4, [sp, #164]	; 0xa4
 8005172:	9528      	str	r5, [sp, #160]	; 0xa0
 8005174:	f8c9 6000 	str.w	r6, [r9]
 8005178:	f8c9 3004 	str.w	r3, [r9, #4]
 800517c:	f300 820f 	bgt.w	800559e <_svfprintf_r+0xf1e>
 8005180:	f109 0908 	add.w	r9, r9, #8
 8005184:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005186:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005188:	f8c9 3000 	str.w	r3, [r9]
 800518c:	3501      	adds	r5, #1
 800518e:	4414      	add	r4, r2
 8005190:	2d07      	cmp	r5, #7
 8005192:	9429      	str	r4, [sp, #164]	; 0xa4
 8005194:	9528      	str	r5, [sp, #160]	; 0xa0
 8005196:	f8c9 2004 	str.w	r2, [r9, #4]
 800519a:	f300 820d 	bgt.w	80055b8 <_svfprintf_r+0xf38>
 800519e:	f109 0908 	add.w	r9, r9, #8
 80051a2:	2300      	movs	r3, #0
 80051a4:	2200      	movs	r2, #0
 80051a6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80051aa:	f7fe ff5d 	bl	8004068 <__aeabi_dcmpeq>
 80051ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051b0:	2800      	cmp	r0, #0
 80051b2:	f040 80c3 	bne.w	800533c <_svfprintf_r+0xcbc>
 80051b6:	3b01      	subs	r3, #1
 80051b8:	3501      	adds	r5, #1
 80051ba:	3601      	adds	r6, #1
 80051bc:	441c      	add	r4, r3
 80051be:	2d07      	cmp	r5, #7
 80051c0:	9528      	str	r5, [sp, #160]	; 0xa0
 80051c2:	9429      	str	r4, [sp, #164]	; 0xa4
 80051c4:	f8c9 6000 	str.w	r6, [r9]
 80051c8:	f8c9 3004 	str.w	r3, [r9, #4]
 80051cc:	f300 80f5 	bgt.w	80053ba <_svfprintf_r+0xd3a>
 80051d0:	f109 0908 	add.w	r9, r9, #8
 80051d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80051d6:	f8c9 2004 	str.w	r2, [r9, #4]
 80051da:	3501      	adds	r5, #1
 80051dc:	4414      	add	r4, r2
 80051de:	ab23      	add	r3, sp, #140	; 0x8c
 80051e0:	2d07      	cmp	r5, #7
 80051e2:	9429      	str	r4, [sp, #164]	; 0xa4
 80051e4:	9528      	str	r5, [sp, #160]	; 0xa0
 80051e6:	f8c9 3000 	str.w	r3, [r9]
 80051ea:	f77f acdd 	ble.w	8004ba8 <_svfprintf_r+0x528>
 80051ee:	aa27      	add	r2, sp, #156	; 0x9c
 80051f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051f4:	f003 f8b2 	bl	800835c <__ssprint_r>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	f47f ab3b 	bne.w	8004874 <_svfprintf_r+0x1f4>
 80051fe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005200:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005204:	e4d2      	b.n	8004bac <_svfprintf_r+0x52c>
 8005206:	aa27      	add	r2, sp, #156	; 0x9c
 8005208:	9909      	ldr	r1, [sp, #36]	; 0x24
 800520a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800520c:	f003 f8a6 	bl	800835c <__ssprint_r>
 8005210:	2800      	cmp	r0, #0
 8005212:	f43f ad19 	beq.w	8004c48 <_svfprintf_r+0x5c8>
 8005216:	f7ff bb2d 	b.w	8004874 <_svfprintf_r+0x1f4>
 800521a:	aa27      	add	r2, sp, #156	; 0x9c
 800521c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800521e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005220:	f003 f89c 	bl	800835c <__ssprint_r>
 8005224:	2800      	cmp	r0, #0
 8005226:	f47f ab25 	bne.w	8004874 <_svfprintf_r+0x1f4>
 800522a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800522c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005230:	e4a9      	b.n	8004b86 <_svfprintf_r+0x506>
 8005232:	aa27      	add	r2, sp, #156	; 0x9c
 8005234:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005236:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005238:	f003 f890 	bl	800835c <__ssprint_r>
 800523c:	2800      	cmp	r0, #0
 800523e:	f47f ab19 	bne.w	8004874 <_svfprintf_r+0x1f4>
 8005242:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005244:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005248:	e450      	b.n	8004aec <_svfprintf_r+0x46c>
 800524a:	aa27      	add	r2, sp, #156	; 0x9c
 800524c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800524e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005250:	f003 f884 	bl	800835c <__ssprint_r>
 8005254:	2800      	cmp	r0, #0
 8005256:	f47f ab0d 	bne.w	8004874 <_svfprintf_r+0x1f4>
 800525a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800525c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005260:	e454      	b.n	8004b0c <_svfprintf_r+0x48c>
 8005262:	f1bb 0f00 	cmp.w	fp, #0
 8005266:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800526a:	f2c0 82e1 	blt.w	8005830 <_svfprintf_r+0x11b0>
 800526e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8005272:	9307      	str	r3, [sp, #28]
 8005274:	ea54 0305 	orrs.w	r3, r4, r5
 8005278:	f47f add3 	bne.w	8004e22 <_svfprintf_r+0x7a2>
 800527c:	f1bb 0f00 	cmp.w	fp, #0
 8005280:	f43f ae8c 	beq.w	8004f9c <_svfprintf_r+0x91c>
 8005284:	2700      	movs	r7, #0
 8005286:	e6b7      	b.n	8004ff8 <_svfprintf_r+0x978>
 8005288:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800528a:	2d00      	cmp	r5, #0
 800528c:	f340 82d3 	ble.w	8005836 <_svfprintf_r+0x11b6>
 8005290:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005292:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005294:	4293      	cmp	r3, r2
 8005296:	bfa8      	it	ge
 8005298:	4613      	movge	r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	461d      	mov	r5, r3
 800529e:	dd0d      	ble.n	80052bc <_svfprintf_r+0xc3c>
 80052a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80052a2:	f8c9 6000 	str.w	r6, [r9]
 80052a6:	3301      	adds	r3, #1
 80052a8:	442c      	add	r4, r5
 80052aa:	2b07      	cmp	r3, #7
 80052ac:	9429      	str	r4, [sp, #164]	; 0xa4
 80052ae:	f8c9 5004 	str.w	r5, [r9, #4]
 80052b2:	9328      	str	r3, [sp, #160]	; 0xa0
 80052b4:	f300 83ae 	bgt.w	8005a14 <_svfprintf_r+0x1394>
 80052b8:	f109 0908 	add.w	r9, r9, #8
 80052bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80052be:	2d00      	cmp	r5, #0
 80052c0:	bfa8      	it	ge
 80052c2:	1b5b      	subge	r3, r3, r5
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	461d      	mov	r5, r3
 80052c8:	f340 80f8 	ble.w	80054bc <_svfprintf_r+0xe3c>
 80052cc:	4a41      	ldr	r2, [pc, #260]	; (80053d4 <_svfprintf_r+0xd54>)
 80052ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80052d0:	920f      	str	r2, [sp, #60]	; 0x3c
 80052d2:	2d10      	cmp	r5, #16
 80052d4:	f340 8285 	ble.w	80057e2 <_svfprintf_r+0x1162>
 80052d8:	4622      	mov	r2, r4
 80052da:	2710      	movs	r7, #16
 80052dc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80052e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80052e2:	e005      	b.n	80052f0 <_svfprintf_r+0xc70>
 80052e4:	f109 0908 	add.w	r9, r9, #8
 80052e8:	3d10      	subs	r5, #16
 80052ea:	2d10      	cmp	r5, #16
 80052ec:	f340 8278 	ble.w	80057e0 <_svfprintf_r+0x1160>
 80052f0:	3301      	adds	r3, #1
 80052f2:	3210      	adds	r2, #16
 80052f4:	2b07      	cmp	r3, #7
 80052f6:	9229      	str	r2, [sp, #164]	; 0xa4
 80052f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80052fa:	f8c9 a000 	str.w	sl, [r9]
 80052fe:	f8c9 7004 	str.w	r7, [r9, #4]
 8005302:	ddef      	ble.n	80052e4 <_svfprintf_r+0xc64>
 8005304:	aa27      	add	r2, sp, #156	; 0x9c
 8005306:	4621      	mov	r1, r4
 8005308:	4658      	mov	r0, fp
 800530a:	f003 f827 	bl	800835c <__ssprint_r>
 800530e:	2800      	cmp	r0, #0
 8005310:	f47f aab0 	bne.w	8004874 <_svfprintf_r+0x1f4>
 8005314:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005316:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005318:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800531c:	e7e4      	b.n	80052e8 <_svfprintf_r+0xc68>
 800531e:	aa27      	add	r2, sp, #156	; 0x9c
 8005320:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005322:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005324:	f003 f81a 	bl	800835c <__ssprint_r>
 8005328:	2800      	cmp	r0, #0
 800532a:	f47f aaa3 	bne.w	8004874 <_svfprintf_r+0x1f4>
 800532e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005332:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005334:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005338:	f7ff bbc8 	b.w	8004acc <_svfprintf_r+0x44c>
 800533c:	1e5e      	subs	r6, r3, #1
 800533e:	2e00      	cmp	r6, #0
 8005340:	f77f af48 	ble.w	80051d4 <_svfprintf_r+0xb54>
 8005344:	4b23      	ldr	r3, [pc, #140]	; (80053d4 <_svfprintf_r+0xd54>)
 8005346:	930f      	str	r3, [sp, #60]	; 0x3c
 8005348:	2e10      	cmp	r6, #16
 800534a:	dd2c      	ble.n	80053a6 <_svfprintf_r+0xd26>
 800534c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8005350:	2710      	movs	r7, #16
 8005352:	46b0      	mov	r8, r6
 8005354:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005358:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800535a:	e006      	b.n	800536a <_svfprintf_r+0xcea>
 800535c:	f1a8 0810 	sub.w	r8, r8, #16
 8005360:	f1b8 0f10 	cmp.w	r8, #16
 8005364:	f109 0908 	add.w	r9, r9, #8
 8005368:	dd1a      	ble.n	80053a0 <_svfprintf_r+0xd20>
 800536a:	3501      	adds	r5, #1
 800536c:	3410      	adds	r4, #16
 800536e:	2d07      	cmp	r5, #7
 8005370:	9429      	str	r4, [sp, #164]	; 0xa4
 8005372:	9528      	str	r5, [sp, #160]	; 0xa0
 8005374:	f8c9 a000 	str.w	sl, [r9]
 8005378:	f8c9 7004 	str.w	r7, [r9, #4]
 800537c:	ddee      	ble.n	800535c <_svfprintf_r+0xcdc>
 800537e:	aa27      	add	r2, sp, #156	; 0x9c
 8005380:	4631      	mov	r1, r6
 8005382:	4658      	mov	r0, fp
 8005384:	f002 ffea 	bl	800835c <__ssprint_r>
 8005388:	2800      	cmp	r0, #0
 800538a:	f47f aa73 	bne.w	8004874 <_svfprintf_r+0x1f4>
 800538e:	f1a8 0810 	sub.w	r8, r8, #16
 8005392:	f1b8 0f10 	cmp.w	r8, #16
 8005396:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005398:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800539a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800539e:	dce4      	bgt.n	800536a <_svfprintf_r+0xcea>
 80053a0:	4646      	mov	r6, r8
 80053a2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80053a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053a8:	3501      	adds	r5, #1
 80053aa:	4434      	add	r4, r6
 80053ac:	2d07      	cmp	r5, #7
 80053ae:	9429      	str	r4, [sp, #164]	; 0xa4
 80053b0:	9528      	str	r5, [sp, #160]	; 0xa0
 80053b2:	e889 0048 	stmia.w	r9, {r3, r6}
 80053b6:	f77f af0b 	ble.w	80051d0 <_svfprintf_r+0xb50>
 80053ba:	aa27      	add	r2, sp, #156	; 0x9c
 80053bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80053c0:	f002 ffcc 	bl	800835c <__ssprint_r>
 80053c4:	2800      	cmp	r0, #0
 80053c6:	f47f aa55 	bne.w	8004874 <_svfprintf_r+0x1f4>
 80053ca:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80053cc:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80053ce:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80053d2:	e6ff      	b.n	80051d4 <_svfprintf_r+0xb54>
 80053d4:	080090c4 	.word	0x080090c4
 80053d8:	9907      	ldr	r1, [sp, #28]
 80053da:	f011 0210 	ands.w	r2, r1, #16
 80053de:	f000 81d5 	beq.w	800578c <_svfprintf_r+0x110c>
 80053e2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80053e4:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80053e8:	f1bb 0f00 	cmp.w	fp, #0
 80053ec:	6804      	ldr	r4, [r0, #0]
 80053ee:	f100 0704 	add.w	r7, r0, #4
 80053f2:	f04f 0500 	mov.w	r5, #0
 80053f6:	db26      	blt.n	8005446 <_svfprintf_r+0xdc6>
 80053f8:	460a      	mov	r2, r1
 80053fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053fe:	9207      	str	r2, [sp, #28]
 8005400:	ea54 0205 	orrs.w	r2, r4, r5
 8005404:	970e      	str	r7, [sp, #56]	; 0x38
 8005406:	461f      	mov	r7, r3
 8005408:	f47f aae8 	bne.w	80049dc <_svfprintf_r+0x35c>
 800540c:	e4ce      	b.n	8004dac <_svfprintf_r+0x72c>
 800540e:	9b07      	ldr	r3, [sp, #28]
 8005410:	06d8      	lsls	r0, r3, #27
 8005412:	d42a      	bmi.n	800546a <_svfprintf_r+0xdea>
 8005414:	9b07      	ldr	r3, [sp, #28]
 8005416:	0659      	lsls	r1, r3, #25
 8005418:	d527      	bpl.n	800546a <_svfprintf_r+0xdea>
 800541a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800541c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8005420:	3104      	adds	r1, #4
 8005422:	17e5      	asrs	r5, r4, #31
 8005424:	4622      	mov	r2, r4
 8005426:	462b      	mov	r3, r5
 8005428:	910e      	str	r1, [sp, #56]	; 0x38
 800542a:	f7ff bac4 	b.w	80049b6 <_svfprintf_r+0x336>
 800542e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005430:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005434:	f1bb 0f00 	cmp.w	fp, #0
 8005438:	680c      	ldr	r4, [r1, #0]
 800543a:	f101 0704 	add.w	r7, r1, #4
 800543e:	f04f 0500 	mov.w	r5, #0
 8005442:	f280 824e 	bge.w	80058e2 <_svfprintf_r+0x1262>
 8005446:	970e      	str	r7, [sp, #56]	; 0x38
 8005448:	461f      	mov	r7, r3
 800544a:	ea54 0305 	orrs.w	r3, r4, r5
 800544e:	f47f aac5 	bne.w	80049dc <_svfprintf_r+0x35c>
 8005452:	e4b0      	b.n	8004db6 <_svfprintf_r+0x736>
 8005454:	3301      	adds	r3, #1
 8005456:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005458:	9328      	str	r3, [sp, #160]	; 0xa0
 800545a:	442c      	add	r4, r5
 800545c:	2b07      	cmp	r3, #7
 800545e:	9429      	str	r4, [sp, #164]	; 0xa4
 8005460:	e889 0024 	stmia.w	r9, {r2, r5}
 8005464:	f77f aba0 	ble.w	8004ba8 <_svfprintf_r+0x528>
 8005468:	e6c1      	b.n	80051ee <_svfprintf_r+0xb6e>
 800546a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800546c:	6814      	ldr	r4, [r2, #0]
 800546e:	4613      	mov	r3, r2
 8005470:	3304      	adds	r3, #4
 8005472:	17e5      	asrs	r5, r4, #31
 8005474:	4622      	mov	r2, r4
 8005476:	930e      	str	r3, [sp, #56]	; 0x38
 8005478:	2a00      	cmp	r2, #0
 800547a:	462b      	mov	r3, r5
 800547c:	f173 0300 	sbcs.w	r3, r3, #0
 8005480:	f6bf aa9e 	bge.w	80049c0 <_svfprintf_r+0x340>
 8005484:	4264      	negs	r4, r4
 8005486:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800548a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800548e:	f1bb 0f00 	cmp.w	fp, #0
 8005492:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005496:	f6ff aaa1 	blt.w	80049dc <_svfprintf_r+0x35c>
 800549a:	9b07      	ldr	r3, [sp, #28]
 800549c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a0:	9307      	str	r3, [sp, #28]
 80054a2:	f7ff ba9b 	b.w	80049dc <_svfprintf_r+0x35c>
 80054a6:	aa27      	add	r2, sp, #156	; 0x9c
 80054a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80054ac:	f002 ff56 	bl	800835c <__ssprint_r>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	f47f a9df 	bne.w	8004874 <_svfprintf_r+0x1f4>
 80054b6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80054b8:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80054bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80054be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054c0:	4432      	add	r2, r6
 80054c2:	4617      	mov	r7, r2
 80054c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054c6:	4293      	cmp	r3, r2
 80054c8:	db47      	blt.n	800555a <_svfprintf_r+0xeda>
 80054ca:	9a07      	ldr	r2, [sp, #28]
 80054cc:	07d5      	lsls	r5, r2, #31
 80054ce:	d444      	bmi.n	800555a <_svfprintf_r+0xeda>
 80054d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80054d2:	440e      	add	r6, r1
 80054d4:	1bf5      	subs	r5, r6, r7
 80054d6:	1acb      	subs	r3, r1, r3
 80054d8:	429d      	cmp	r5, r3
 80054da:	bfa8      	it	ge
 80054dc:	461d      	movge	r5, r3
 80054de:	2d00      	cmp	r5, #0
 80054e0:	462e      	mov	r6, r5
 80054e2:	dd0d      	ble.n	8005500 <_svfprintf_r+0xe80>
 80054e4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80054e6:	f8c9 7000 	str.w	r7, [r9]
 80054ea:	3201      	adds	r2, #1
 80054ec:	442c      	add	r4, r5
 80054ee:	2a07      	cmp	r2, #7
 80054f0:	9429      	str	r4, [sp, #164]	; 0xa4
 80054f2:	f8c9 5004 	str.w	r5, [r9, #4]
 80054f6:	9228      	str	r2, [sp, #160]	; 0xa0
 80054f8:	f300 830a 	bgt.w	8005b10 <_svfprintf_r+0x1490>
 80054fc:	f109 0908 	add.w	r9, r9, #8
 8005500:	2e00      	cmp	r6, #0
 8005502:	bfac      	ite	ge
 8005504:	1b9d      	subge	r5, r3, r6
 8005506:	461d      	movlt	r5, r3
 8005508:	2d00      	cmp	r5, #0
 800550a:	f77f ab4f 	ble.w	8004bac <_svfprintf_r+0x52c>
 800550e:	4abb      	ldr	r2, [pc, #748]	; (80057fc <_svfprintf_r+0x117c>)
 8005510:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005512:	920f      	str	r2, [sp, #60]	; 0x3c
 8005514:	2d10      	cmp	r5, #16
 8005516:	dd9d      	ble.n	8005454 <_svfprintf_r+0xdd4>
 8005518:	2610      	movs	r6, #16
 800551a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800551c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8005520:	e004      	b.n	800552c <_svfprintf_r+0xeac>
 8005522:	f109 0908 	add.w	r9, r9, #8
 8005526:	3d10      	subs	r5, #16
 8005528:	2d10      	cmp	r5, #16
 800552a:	dd93      	ble.n	8005454 <_svfprintf_r+0xdd4>
 800552c:	3301      	adds	r3, #1
 800552e:	3410      	adds	r4, #16
 8005530:	2b07      	cmp	r3, #7
 8005532:	9429      	str	r4, [sp, #164]	; 0xa4
 8005534:	9328      	str	r3, [sp, #160]	; 0xa0
 8005536:	f8c9 a000 	str.w	sl, [r9]
 800553a:	f8c9 6004 	str.w	r6, [r9, #4]
 800553e:	ddf0      	ble.n	8005522 <_svfprintf_r+0xea2>
 8005540:	aa27      	add	r2, sp, #156	; 0x9c
 8005542:	4659      	mov	r1, fp
 8005544:	4638      	mov	r0, r7
 8005546:	f002 ff09 	bl	800835c <__ssprint_r>
 800554a:	2800      	cmp	r0, #0
 800554c:	f47f a992 	bne.w	8004874 <_svfprintf_r+0x1f4>
 8005550:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005552:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005554:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005558:	e7e5      	b.n	8005526 <_svfprintf_r+0xea6>
 800555a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800555c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800555e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005560:	f8c9 1000 	str.w	r1, [r9]
 8005564:	3201      	adds	r2, #1
 8005566:	4404      	add	r4, r0
 8005568:	2a07      	cmp	r2, #7
 800556a:	9429      	str	r4, [sp, #164]	; 0xa4
 800556c:	f8c9 0004 	str.w	r0, [r9, #4]
 8005570:	9228      	str	r2, [sp, #160]	; 0xa0
 8005572:	f300 82b9 	bgt.w	8005ae8 <_svfprintf_r+0x1468>
 8005576:	f109 0908 	add.w	r9, r9, #8
 800557a:	e7a9      	b.n	80054d0 <_svfprintf_r+0xe50>
 800557c:	9b07      	ldr	r3, [sp, #28]
 800557e:	07d8      	lsls	r0, r3, #31
 8005580:	f53f adf2 	bmi.w	8005168 <_svfprintf_r+0xae8>
 8005584:	3501      	adds	r5, #1
 8005586:	3401      	adds	r4, #1
 8005588:	2301      	movs	r3, #1
 800558a:	2d07      	cmp	r5, #7
 800558c:	9429      	str	r4, [sp, #164]	; 0xa4
 800558e:	9528      	str	r5, [sp, #160]	; 0xa0
 8005590:	f8c9 6000 	str.w	r6, [r9]
 8005594:	f8c9 3004 	str.w	r3, [r9, #4]
 8005598:	f77f ae1a 	ble.w	80051d0 <_svfprintf_r+0xb50>
 800559c:	e70d      	b.n	80053ba <_svfprintf_r+0xd3a>
 800559e:	aa27      	add	r2, sp, #156	; 0x9c
 80055a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80055a4:	f002 feda 	bl	800835c <__ssprint_r>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	f47f a963 	bne.w	8004874 <_svfprintf_r+0x1f4>
 80055ae:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80055b0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80055b2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80055b6:	e5e5      	b.n	8005184 <_svfprintf_r+0xb04>
 80055b8:	aa27      	add	r2, sp, #156	; 0x9c
 80055ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80055be:	f002 fecd 	bl	800835c <__ssprint_r>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	f47f a956 	bne.w	8004874 <_svfprintf_r+0x1f4>
 80055c8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80055ca:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80055cc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80055d0:	e5e7      	b.n	80051a2 <_svfprintf_r+0xb22>
 80055d2:	aa27      	add	r2, sp, #156	; 0x9c
 80055d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80055d8:	f002 fec0 	bl	800835c <__ssprint_r>
 80055dc:	2800      	cmp	r0, #0
 80055de:	f47f a949 	bne.w	8004874 <_svfprintf_r+0x1f4>
 80055e2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80055e4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80055e8:	f7ff ba94 	b.w	8004b14 <_svfprintf_r+0x494>
 80055ec:	9907      	ldr	r1, [sp, #28]
 80055ee:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80055f2:	f000 80bb 	beq.w	800576c <_svfprintf_r+0x10ec>
 80055f6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80055f8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80055fc:	4603      	mov	r3, r0
 80055fe:	f1bb 0f00 	cmp.w	fp, #0
 8005602:	f103 0304 	add.w	r3, r3, #4
 8005606:	8804      	ldrh	r4, [r0, #0]
 8005608:	f04f 0500 	mov.w	r5, #0
 800560c:	f2c0 81c5 	blt.w	800599a <_svfprintf_r+0x131a>
 8005610:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005614:	9107      	str	r1, [sp, #28]
 8005616:	ea54 0105 	orrs.w	r1, r4, r5
 800561a:	930e      	str	r3, [sp, #56]	; 0x38
 800561c:	f43f acda 	beq.w	8004fd4 <_svfprintf_r+0x954>
 8005620:	4617      	mov	r7, r2
 8005622:	f7ff b953 	b.w	80048cc <_svfprintf_r+0x24c>
 8005626:	9b07      	ldr	r3, [sp, #28]
 8005628:	06df      	lsls	r7, r3, #27
 800562a:	d40b      	bmi.n	8005644 <_svfprintf_r+0xfc4>
 800562c:	9b07      	ldr	r3, [sp, #28]
 800562e:	065e      	lsls	r6, r3, #25
 8005630:	d508      	bpl.n	8005644 <_svfprintf_r+0xfc4>
 8005632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005634:	6813      	ldr	r3, [r2, #0]
 8005636:	3204      	adds	r2, #4
 8005638:	920e      	str	r2, [sp, #56]	; 0x38
 800563a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800563e:	801a      	strh	r2, [r3, #0]
 8005640:	f7ff b845 	b.w	80046ce <_svfprintf_r+0x4e>
 8005644:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005646:	6813      	ldr	r3, [r2, #0]
 8005648:	3204      	adds	r2, #4
 800564a:	920e      	str	r2, [sp, #56]	; 0x38
 800564c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	f7ff b83d 	b.w	80046ce <_svfprintf_r+0x4e>
 8005654:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	f7fe fd36 	bl	80040cc <__aeabi_dcmpun>
 8005660:	2800      	cmp	r0, #0
 8005662:	f040 8305 	bne.w	8005c70 <_svfprintf_r+0x15f0>
 8005666:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005668:	f1bb 3fff 	cmp.w	fp, #4294967295
 800566c:	f023 0720 	bic.w	r7, r3, #32
 8005670:	f000 826c 	beq.w	8005b4c <_svfprintf_r+0x14cc>
 8005674:	2f47      	cmp	r7, #71	; 0x47
 8005676:	f000 8187 	beq.w	8005988 <_svfprintf_r+0x1308>
 800567a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800567c:	9a07      	ldr	r2, [sp, #28]
 800567e:	2b00      	cmp	r3, #0
 8005680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005684:	920f      	str	r2, [sp, #60]	; 0x3c
 8005686:	f2c0 8280 	blt.w	8005b8a <_svfprintf_r+0x150a>
 800568a:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 800568e:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8005692:	2300      	movs	r3, #0
 8005694:	9308      	str	r3, [sp, #32]
 8005696:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005698:	2b66      	cmp	r3, #102	; 0x66
 800569a:	f000 825a 	beq.w	8005b52 <_svfprintf_r+0x14d2>
 800569e:	2b46      	cmp	r3, #70	; 0x46
 80056a0:	f000 8147 	beq.w	8005932 <_svfprintf_r+0x12b2>
 80056a4:	2f45      	cmp	r7, #69	; 0x45
 80056a6:	bf0c      	ite	eq
 80056a8:	f10b 0501 	addeq.w	r5, fp, #1
 80056ac:	465d      	movne	r5, fp
 80056ae:	a825      	add	r0, sp, #148	; 0x94
 80056b0:	a922      	add	r1, sp, #136	; 0x88
 80056b2:	aa21      	add	r2, sp, #132	; 0x84
 80056b4:	2302      	movs	r3, #2
 80056b6:	9004      	str	r0, [sp, #16]
 80056b8:	9202      	str	r2, [sp, #8]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	9501      	str	r5, [sp, #4]
 80056be:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80056c2:	9103      	str	r1, [sp, #12]
 80056c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80056c6:	f000 fc0f 	bl	8005ee8 <_dtoa_r>
 80056ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056cc:	2b67      	cmp	r3, #103	; 0x67
 80056ce:	4606      	mov	r6, r0
 80056d0:	f040 8271 	bne.w	8005bb6 <_svfprintf_r+0x1536>
 80056d4:	9b07      	ldr	r3, [sp, #28]
 80056d6:	07da      	lsls	r2, r3, #31
 80056d8:	f140 82bf 	bpl.w	8005c5a <_svfprintf_r+0x15da>
 80056dc:	1974      	adds	r4, r6, r5
 80056de:	2200      	movs	r2, #0
 80056e0:	2300      	movs	r3, #0
 80056e2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80056e6:	f7fe fcbf 	bl	8004068 <__aeabi_dcmpeq>
 80056ea:	2800      	cmp	r0, #0
 80056ec:	f040 8190 	bne.w	8005a10 <_svfprintf_r+0x1390>
 80056f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80056f2:	429c      	cmp	r4, r3
 80056f4:	d906      	bls.n	8005704 <_svfprintf_r+0x1084>
 80056f6:	2130      	movs	r1, #48	; 0x30
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	9225      	str	r2, [sp, #148]	; 0x94
 80056fc:	7019      	strb	r1, [r3, #0]
 80056fe:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005700:	429c      	cmp	r4, r3
 8005702:	d8f9      	bhi.n	80056f8 <_svfprintf_r+0x1078>
 8005704:	1b9b      	subs	r3, r3, r6
 8005706:	2f47      	cmp	r7, #71	; 0x47
 8005708:	9312      	str	r3, [sp, #72]	; 0x48
 800570a:	f000 817a 	beq.w	8005a02 <_svfprintf_r+0x1382>
 800570e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005710:	2b65      	cmp	r3, #101	; 0x65
 8005712:	f340 825f 	ble.w	8005bd4 <_svfprintf_r+0x1554>
 8005716:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005718:	2b66      	cmp	r3, #102	; 0x66
 800571a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800571c:	9313      	str	r3, [sp, #76]	; 0x4c
 800571e:	f000 8266 	beq.w	8005bee <_svfprintf_r+0x156e>
 8005722:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005724:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005726:	428a      	cmp	r2, r1
 8005728:	f2c0 8238 	blt.w	8005b9c <_svfprintf_r+0x151c>
 800572c:	9b07      	ldr	r3, [sp, #28]
 800572e:	07d9      	lsls	r1, r3, #31
 8005730:	f100 8295 	bmi.w	8005c5e <_svfprintf_r+0x15de>
 8005734:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005738:	920d      	str	r2, [sp, #52]	; 0x34
 800573a:	2267      	movs	r2, #103	; 0x67
 800573c:	9211      	str	r2, [sp, #68]	; 0x44
 800573e:	9a08      	ldr	r2, [sp, #32]
 8005740:	2a00      	cmp	r2, #0
 8005742:	f040 8132 	bne.w	80059aa <_svfprintf_r+0x132a>
 8005746:	9308      	str	r3, [sp, #32]
 8005748:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800574a:	9307      	str	r3, [sp, #28]
 800574c:	4693      	mov	fp, r2
 800574e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005752:	f7ff b967 	b.w	8004a24 <_svfprintf_r+0x3a4>
 8005756:	f027 0707 	bic.w	r7, r7, #7
 800575a:	ed97 7b00 	vldr	d7, [r7]
 800575e:	f107 0308 	add.w	r3, r7, #8
 8005762:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005766:	930e      	str	r3, [sp, #56]	; 0x38
 8005768:	f7ff ba88 	b.w	8004c7c <_svfprintf_r+0x5fc>
 800576c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800576e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005772:	f1bb 0f00 	cmp.w	fp, #0
 8005776:	680c      	ldr	r4, [r1, #0]
 8005778:	f101 0704 	add.w	r7, r1, #4
 800577c:	f04f 0500 	mov.w	r5, #0
 8005780:	f280 80ac 	bge.w	80058dc <_svfprintf_r+0x125c>
 8005784:	970e      	str	r7, [sp, #56]	; 0x38
 8005786:	2700      	movs	r7, #0
 8005788:	f7ff b8a0 	b.w	80048cc <_svfprintf_r+0x24c>
 800578c:	9907      	ldr	r1, [sp, #28]
 800578e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8005792:	f43f ae4c 	beq.w	800542e <_svfprintf_r+0xdae>
 8005796:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005798:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800579c:	4603      	mov	r3, r0
 800579e:	f1bb 0f00 	cmp.w	fp, #0
 80057a2:	f103 0304 	add.w	r3, r3, #4
 80057a6:	8804      	ldrh	r4, [r0, #0]
 80057a8:	f04f 0500 	mov.w	r5, #0
 80057ac:	f2c0 80f2 	blt.w	8005994 <_svfprintf_r+0x1314>
 80057b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80057b4:	9107      	str	r1, [sp, #28]
 80057b6:	ea54 0105 	orrs.w	r1, r4, r5
 80057ba:	930e      	str	r3, [sp, #56]	; 0x38
 80057bc:	4617      	mov	r7, r2
 80057be:	f47f a90d 	bne.w	80049dc <_svfprintf_r+0x35c>
 80057c2:	f7ff baf3 	b.w	8004dac <_svfprintf_r+0x72c>
 80057c6:	9b07      	ldr	r3, [sp, #28]
 80057c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80057ce:	4613      	mov	r3, r2
 80057d0:	f000 80e5 	beq.w	800599e <_svfprintf_r+0x131e>
 80057d4:	3304      	adds	r3, #4
 80057d6:	8814      	ldrh	r4, [r2, #0]
 80057d8:	930e      	str	r3, [sp, #56]	; 0x38
 80057da:	2500      	movs	r5, #0
 80057dc:	f7ff bb03 	b.w	8004de6 <_svfprintf_r+0x766>
 80057e0:	4614      	mov	r4, r2
 80057e2:	3301      	adds	r3, #1
 80057e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057e6:	9328      	str	r3, [sp, #160]	; 0xa0
 80057e8:	442c      	add	r4, r5
 80057ea:	2b07      	cmp	r3, #7
 80057ec:	9429      	str	r4, [sp, #164]	; 0xa4
 80057ee:	e889 0024 	stmia.w	r9, {r2, r5}
 80057f2:	f73f ae58 	bgt.w	80054a6 <_svfprintf_r+0xe26>
 80057f6:	f109 0908 	add.w	r9, r9, #8
 80057fa:	e65f      	b.n	80054bc <_svfprintf_r+0xe3c>
 80057fc:	080090c4 	.word	0x080090c4
 8005800:	2700      	movs	r7, #0
 8005802:	45bb      	cmp	fp, r7
 8005804:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005808:	f6ff abf6 	blt.w	8004ff8 <_svfprintf_r+0x978>
 800580c:	9b07      	ldr	r3, [sp, #28]
 800580e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005812:	9307      	str	r3, [sp, #28]
 8005814:	f7ff bbbe 	b.w	8004f94 <_svfprintf_r+0x914>
 8005818:	aa27      	add	r2, sp, #156	; 0x9c
 800581a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800581c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800581e:	f002 fd9d 	bl	800835c <__ssprint_r>
 8005822:	2800      	cmp	r0, #0
 8005824:	f47f a826 	bne.w	8004874 <_svfprintf_r+0x1f4>
 8005828:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800582a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800582e:	e405      	b.n	800503c <_svfprintf_r+0x9bc>
 8005830:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005832:	f7ff bbda 	b.w	8004fea <_svfprintf_r+0x96a>
 8005836:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005838:	4ab2      	ldr	r2, [pc, #712]	; (8005b04 <_svfprintf_r+0x1484>)
 800583a:	f8c9 2000 	str.w	r2, [r9]
 800583e:	3301      	adds	r3, #1
 8005840:	3401      	adds	r4, #1
 8005842:	2201      	movs	r2, #1
 8005844:	2b07      	cmp	r3, #7
 8005846:	9429      	str	r4, [sp, #164]	; 0xa4
 8005848:	9328      	str	r3, [sp, #160]	; 0xa0
 800584a:	f8c9 2004 	str.w	r2, [r9, #4]
 800584e:	f300 808e 	bgt.w	800596e <_svfprintf_r+0x12ee>
 8005852:	f109 0908 	add.w	r9, r9, #8
 8005856:	b92d      	cbnz	r5, 8005864 <_svfprintf_r+0x11e4>
 8005858:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800585a:	b91b      	cbnz	r3, 8005864 <_svfprintf_r+0x11e4>
 800585c:	9b07      	ldr	r3, [sp, #28]
 800585e:	07df      	lsls	r7, r3, #31
 8005860:	f57f a9a4 	bpl.w	8004bac <_svfprintf_r+0x52c>
 8005864:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005866:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005868:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800586a:	f8c9 2000 	str.w	r2, [r9]
 800586e:	3301      	adds	r3, #1
 8005870:	440c      	add	r4, r1
 8005872:	2b07      	cmp	r3, #7
 8005874:	9429      	str	r4, [sp, #164]	; 0xa4
 8005876:	f8c9 1004 	str.w	r1, [r9, #4]
 800587a:	9328      	str	r3, [sp, #160]	; 0xa0
 800587c:	f300 81d3 	bgt.w	8005c26 <_svfprintf_r+0x15a6>
 8005880:	f109 0908 	add.w	r9, r9, #8
 8005884:	426d      	negs	r5, r5
 8005886:	2d00      	cmp	r5, #0
 8005888:	f340 80ad 	ble.w	80059e6 <_svfprintf_r+0x1366>
 800588c:	4a9e      	ldr	r2, [pc, #632]	; (8005b08 <_svfprintf_r+0x1488>)
 800588e:	920f      	str	r2, [sp, #60]	; 0x3c
 8005890:	2d10      	cmp	r5, #16
 8005892:	f340 80cc 	ble.w	8005a2e <_svfprintf_r+0x13ae>
 8005896:	4622      	mov	r2, r4
 8005898:	2710      	movs	r7, #16
 800589a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800589e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80058a0:	e005      	b.n	80058ae <_svfprintf_r+0x122e>
 80058a2:	f109 0908 	add.w	r9, r9, #8
 80058a6:	3d10      	subs	r5, #16
 80058a8:	2d10      	cmp	r5, #16
 80058aa:	f340 80bf 	ble.w	8005a2c <_svfprintf_r+0x13ac>
 80058ae:	3301      	adds	r3, #1
 80058b0:	3210      	adds	r2, #16
 80058b2:	2b07      	cmp	r3, #7
 80058b4:	9229      	str	r2, [sp, #164]	; 0xa4
 80058b6:	9328      	str	r3, [sp, #160]	; 0xa0
 80058b8:	f8c9 a000 	str.w	sl, [r9]
 80058bc:	f8c9 7004 	str.w	r7, [r9, #4]
 80058c0:	ddef      	ble.n	80058a2 <_svfprintf_r+0x1222>
 80058c2:	aa27      	add	r2, sp, #156	; 0x9c
 80058c4:	4621      	mov	r1, r4
 80058c6:	4658      	mov	r0, fp
 80058c8:	f002 fd48 	bl	800835c <__ssprint_r>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	f47e afd1 	bne.w	8004874 <_svfprintf_r+0x1f4>
 80058d2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80058d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80058d6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80058da:	e7e4      	b.n	80058a6 <_svfprintf_r+0x1226>
 80058dc:	9a07      	ldr	r2, [sp, #28]
 80058de:	f7ff ba37 	b.w	8004d50 <_svfprintf_r+0x6d0>
 80058e2:	9a07      	ldr	r2, [sp, #28]
 80058e4:	e589      	b.n	80053fa <_svfprintf_r+0xd7a>
 80058e6:	9b07      	ldr	r3, [sp, #28]
 80058e8:	f043 0320 	orr.w	r3, r3, #32
 80058ec:	9307      	str	r3, [sp, #28]
 80058ee:	f108 0801 	add.w	r8, r8, #1
 80058f2:	f898 3000 	ldrb.w	r3, [r8]
 80058f6:	f7fe bf1d 	b.w	8004734 <_svfprintf_r+0xb4>
 80058fa:	aa27      	add	r2, sp, #156	; 0x9c
 80058fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005900:	f002 fd2c 	bl	800835c <__ssprint_r>
 8005904:	2800      	cmp	r0, #0
 8005906:	f47e afb5 	bne.w	8004874 <_svfprintf_r+0x1f4>
 800590a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800590c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005910:	f7ff bbac 	b.w	800506c <_svfprintf_r+0x9ec>
 8005914:	2140      	movs	r1, #64	; 0x40
 8005916:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005918:	f001 fc3e 	bl	8007198 <_malloc_r>
 800591c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800591e:	6010      	str	r0, [r2, #0]
 8005920:	6110      	str	r0, [r2, #16]
 8005922:	2800      	cmp	r0, #0
 8005924:	f000 81f9 	beq.w	8005d1a <_svfprintf_r+0x169a>
 8005928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800592a:	2340      	movs	r3, #64	; 0x40
 800592c:	6153      	str	r3, [r2, #20]
 800592e:	f7fe bebe 	b.w	80046ae <_svfprintf_r+0x2e>
 8005932:	a825      	add	r0, sp, #148	; 0x94
 8005934:	a922      	add	r1, sp, #136	; 0x88
 8005936:	aa21      	add	r2, sp, #132	; 0x84
 8005938:	2303      	movs	r3, #3
 800593a:	9004      	str	r0, [sp, #16]
 800593c:	9202      	str	r2, [sp, #8]
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	f8cd b004 	str.w	fp, [sp, #4]
 8005944:	9103      	str	r1, [sp, #12]
 8005946:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800594a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800594c:	f000 facc 	bl	8005ee8 <_dtoa_r>
 8005950:	465d      	mov	r5, fp
 8005952:	4606      	mov	r6, r0
 8005954:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005956:	2b46      	cmp	r3, #70	; 0x46
 8005958:	eb06 0405 	add.w	r4, r6, r5
 800595c:	f47f aebf 	bne.w	80056de <_svfprintf_r+0x105e>
 8005960:	7833      	ldrb	r3, [r6, #0]
 8005962:	2b30      	cmp	r3, #48	; 0x30
 8005964:	f000 818a 	beq.w	8005c7c <_svfprintf_r+0x15fc>
 8005968:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800596a:	442c      	add	r4, r5
 800596c:	e6b7      	b.n	80056de <_svfprintf_r+0x105e>
 800596e:	aa27      	add	r2, sp, #156	; 0x9c
 8005970:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005972:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005974:	f002 fcf2 	bl	800835c <__ssprint_r>
 8005978:	2800      	cmp	r0, #0
 800597a:	f47e af7b 	bne.w	8004874 <_svfprintf_r+0x1f4>
 800597e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005980:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005982:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005986:	e766      	b.n	8005856 <_svfprintf_r+0x11d6>
 8005988:	f1bb 0f00 	cmp.w	fp, #0
 800598c:	bf08      	it	eq
 800598e:	f04f 0b01 	moveq.w	fp, #1
 8005992:	e672      	b.n	800567a <_svfprintf_r+0xffa>
 8005994:	930e      	str	r3, [sp, #56]	; 0x38
 8005996:	4617      	mov	r7, r2
 8005998:	e557      	b.n	800544a <_svfprintf_r+0xdca>
 800599a:	930e      	str	r3, [sp, #56]	; 0x38
 800599c:	e6f3      	b.n	8005786 <_svfprintf_r+0x1106>
 800599e:	3304      	adds	r3, #4
 80059a0:	6814      	ldr	r4, [r2, #0]
 80059a2:	930e      	str	r3, [sp, #56]	; 0x38
 80059a4:	2500      	movs	r5, #0
 80059a6:	f7ff ba1e 	b.w	8004de6 <_svfprintf_r+0x766>
 80059aa:	272d      	movs	r7, #45	; 0x2d
 80059ac:	9308      	str	r3, [sp, #32]
 80059ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059b0:	9307      	str	r3, [sp, #28]
 80059b2:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80059b6:	f04f 0b00 	mov.w	fp, #0
 80059ba:	f7ff b834 	b.w	8004a26 <_svfprintf_r+0x3a6>
 80059be:	4630      	mov	r0, r6
 80059c0:	f7fe fd9e 	bl	8004500 <strlen>
 80059c4:	46a3      	mov	fp, r4
 80059c6:	4603      	mov	r3, r0
 80059c8:	900d      	str	r0, [sp, #52]	; 0x34
 80059ca:	f7ff ba9d 	b.w	8004f08 <_svfprintf_r+0x888>
 80059ce:	aa27      	add	r2, sp, #156	; 0x9c
 80059d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80059d4:	f002 fcc2 	bl	800835c <__ssprint_r>
 80059d8:	2800      	cmp	r0, #0
 80059da:	f47e af4b 	bne.w	8004874 <_svfprintf_r+0x1f4>
 80059de:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80059e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80059e2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80059e6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80059e8:	f8c9 6000 	str.w	r6, [r9]
 80059ec:	3301      	adds	r3, #1
 80059ee:	440c      	add	r4, r1
 80059f0:	2b07      	cmp	r3, #7
 80059f2:	9429      	str	r4, [sp, #164]	; 0xa4
 80059f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80059f6:	f8c9 1004 	str.w	r1, [r9, #4]
 80059fa:	f77f a8d5 	ble.w	8004ba8 <_svfprintf_r+0x528>
 80059fe:	f7ff bbf6 	b.w	80051ee <_svfprintf_r+0xb6e>
 8005a02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a04:	1cdd      	adds	r5, r3, #3
 8005a06:	db1e      	blt.n	8005a46 <_svfprintf_r+0x13c6>
 8005a08:	459b      	cmp	fp, r3
 8005a0a:	db1c      	blt.n	8005a46 <_svfprintf_r+0x13c6>
 8005a0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005a0e:	e688      	b.n	8005722 <_svfprintf_r+0x10a2>
 8005a10:	4623      	mov	r3, r4
 8005a12:	e677      	b.n	8005704 <_svfprintf_r+0x1084>
 8005a14:	aa27      	add	r2, sp, #156	; 0x9c
 8005a16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a1a:	f002 fc9f 	bl	800835c <__ssprint_r>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	f47e af28 	bne.w	8004874 <_svfprintf_r+0x1f4>
 8005a24:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005a26:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005a2a:	e447      	b.n	80052bc <_svfprintf_r+0xc3c>
 8005a2c:	4614      	mov	r4, r2
 8005a2e:	3301      	adds	r3, #1
 8005a30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a32:	9328      	str	r3, [sp, #160]	; 0xa0
 8005a34:	442c      	add	r4, r5
 8005a36:	2b07      	cmp	r3, #7
 8005a38:	9429      	str	r4, [sp, #164]	; 0xa4
 8005a3a:	e889 0024 	stmia.w	r9, {r2, r5}
 8005a3e:	dcc6      	bgt.n	80059ce <_svfprintf_r+0x134e>
 8005a40:	f109 0908 	add.w	r9, r9, #8
 8005a44:	e7cf      	b.n	80059e6 <_svfprintf_r+0x1366>
 8005a46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005a48:	3a02      	subs	r2, #2
 8005a4a:	9211      	str	r2, [sp, #68]	; 0x44
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8005a54:	9321      	str	r3, [sp, #132]	; 0x84
 8005a56:	bfb8      	it	lt
 8005a58:	425b      	neglt	r3, r3
 8005a5a:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 8005a5e:	bfb4      	ite	lt
 8005a60:	222d      	movlt	r2, #45	; 0x2d
 8005a62:	222b      	movge	r2, #43	; 0x2b
 8005a64:	2b09      	cmp	r3, #9
 8005a66:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 8005a6a:	f340 80ee 	ble.w	8005c4a <_svfprintf_r+0x15ca>
 8005a6e:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 8005a72:	4604      	mov	r4, r0
 8005a74:	4a25      	ldr	r2, [pc, #148]	; (8005b0c <_svfprintf_r+0x148c>)
 8005a76:	fb82 2103 	smull	r2, r1, r2, r3
 8005a7a:	17da      	asrs	r2, r3, #31
 8005a7c:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8005a80:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005a84:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8005a88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a8c:	2a09      	cmp	r2, #9
 8005a8e:	4613      	mov	r3, r2
 8005a90:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8005a94:	dcee      	bgt.n	8005a74 <_svfprintf_r+0x13f4>
 8005a96:	4621      	mov	r1, r4
 8005a98:	3330      	adds	r3, #48	; 0x30
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	f801 2d01 	strb.w	r2, [r1, #-1]!
 8005aa0:	4288      	cmp	r0, r1
 8005aa2:	f240 8137 	bls.w	8005d14 <_svfprintf_r+0x1694>
 8005aa6:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8005aaa:	4623      	mov	r3, r4
 8005aac:	e001      	b.n	8005ab2 <_svfprintf_r+0x1432>
 8005aae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ab2:	f801 2b01 	strb.w	r2, [r1], #1
 8005ab6:	4298      	cmp	r0, r3
 8005ab8:	d1f9      	bne.n	8005aae <_svfprintf_r+0x142e>
 8005aba:	1c43      	adds	r3, r0, #1
 8005abc:	1b1b      	subs	r3, r3, r4
 8005abe:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 8005ac2:	4413      	add	r3, r2
 8005ac4:	aa23      	add	r2, sp, #140	; 0x8c
 8005ac6:	1a9b      	subs	r3, r3, r2
 8005ac8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005aca:	9319      	str	r3, [sp, #100]	; 0x64
 8005acc:	2a01      	cmp	r2, #1
 8005ace:	4413      	add	r3, r2
 8005ad0:	930d      	str	r3, [sp, #52]	; 0x34
 8005ad2:	f340 80ea 	ble.w	8005caa <_svfprintf_r+0x162a>
 8005ad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ad8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005ada:	4413      	add	r3, r2
 8005adc:	2200      	movs	r2, #0
 8005ade:	930d      	str	r3, [sp, #52]	; 0x34
 8005ae0:	9213      	str	r2, [sp, #76]	; 0x4c
 8005ae2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005ae6:	e62a      	b.n	800573e <_svfprintf_r+0x10be>
 8005ae8:	aa27      	add	r2, sp, #156	; 0x9c
 8005aea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005aec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005aee:	f002 fc35 	bl	800835c <__ssprint_r>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	f47e aebe 	bne.w	8004874 <_svfprintf_r+0x1f4>
 8005af8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005afa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005afc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005b00:	e4e6      	b.n	80054d0 <_svfprintf_r+0xe50>
 8005b02:	bf00      	nop
 8005b04:	08009114 	.word	0x08009114
 8005b08:	080090c4 	.word	0x080090c4
 8005b0c:	66666667 	.word	0x66666667
 8005b10:	aa27      	add	r2, sp, #156	; 0x9c
 8005b12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005b16:	f002 fc21 	bl	800835c <__ssprint_r>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	f47e aeaa 	bne.w	8004874 <_svfprintf_r+0x1f4>
 8005b20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b24:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005b2c:	e4e8      	b.n	8005500 <_svfprintf_r+0xe80>
 8005b2e:	2d06      	cmp	r5, #6
 8005b30:	462b      	mov	r3, r5
 8005b32:	bf28      	it	cs
 8005b34:	2306      	movcs	r3, #6
 8005b36:	930d      	str	r3, [sp, #52]	; 0x34
 8005b38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005b3c:	46b3      	mov	fp, r6
 8005b3e:	970e      	str	r7, [sp, #56]	; 0x38
 8005b40:	9613      	str	r6, [sp, #76]	; 0x4c
 8005b42:	4637      	mov	r7, r6
 8005b44:	9308      	str	r3, [sp, #32]
 8005b46:	4e88      	ldr	r6, [pc, #544]	; (8005d68 <_svfprintf_r+0x16e8>)
 8005b48:	f7fe bf6c 	b.w	8004a24 <_svfprintf_r+0x3a4>
 8005b4c:	f04f 0b06 	mov.w	fp, #6
 8005b50:	e593      	b.n	800567a <_svfprintf_r+0xffa>
 8005b52:	a825      	add	r0, sp, #148	; 0x94
 8005b54:	a922      	add	r1, sp, #136	; 0x88
 8005b56:	aa21      	add	r2, sp, #132	; 0x84
 8005b58:	2303      	movs	r3, #3
 8005b5a:	9004      	str	r0, [sp, #16]
 8005b5c:	9202      	str	r2, [sp, #8]
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	f8cd b004 	str.w	fp, [sp, #4]
 8005b64:	9103      	str	r1, [sp, #12]
 8005b66:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005b6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005b6c:	f000 f9bc 	bl	8005ee8 <_dtoa_r>
 8005b70:	465d      	mov	r5, fp
 8005b72:	4606      	mov	r6, r0
 8005b74:	eb00 040b 	add.w	r4, r0, fp
 8005b78:	e6f2      	b.n	8005960 <_svfprintf_r+0x12e0>
 8005b7a:	272d      	movs	r7, #45	; 0x2d
 8005b7c:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005b80:	f7ff b8a3 	b.w	8004cca <_svfprintf_r+0x64a>
 8005b84:	9307      	str	r3, [sp, #28]
 8005b86:	f7ff b94c 	b.w	8004e22 <_svfprintf_r+0x7a2>
 8005b8a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8005b8e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8005b92:	931d      	str	r3, [sp, #116]	; 0x74
 8005b94:	232d      	movs	r3, #45	; 0x2d
 8005b96:	911c      	str	r1, [sp, #112]	; 0x70
 8005b98:	9308      	str	r3, [sp, #32]
 8005b9a:	e57c      	b.n	8005696 <_svfprintf_r+0x1016>
 8005b9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005b9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ba0:	4413      	add	r3, r2
 8005ba2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ba4:	930d      	str	r3, [sp, #52]	; 0x34
 8005ba6:	2a00      	cmp	r2, #0
 8005ba8:	f340 8089 	ble.w	8005cbe <_svfprintf_r+0x163e>
 8005bac:	2267      	movs	r2, #103	; 0x67
 8005bae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005bb2:	9211      	str	r2, [sp, #68]	; 0x44
 8005bb4:	e5c3      	b.n	800573e <_svfprintf_r+0x10be>
 8005bb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005bb8:	2b47      	cmp	r3, #71	; 0x47
 8005bba:	f47f ad8f 	bne.w	80056dc <_svfprintf_r+0x105c>
 8005bbe:	9b07      	ldr	r3, [sp, #28]
 8005bc0:	07db      	lsls	r3, r3, #31
 8005bc2:	f53f aec7 	bmi.w	8005954 <_svfprintf_r+0x12d4>
 8005bc6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005bc8:	2f47      	cmp	r7, #71	; 0x47
 8005bca:	eba3 0306 	sub.w	r3, r3, r6
 8005bce:	9312      	str	r3, [sp, #72]	; 0x48
 8005bd0:	f43f af17 	beq.w	8005a02 <_svfprintf_r+0x1382>
 8005bd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bd6:	e739      	b.n	8005a4c <_svfprintf_r+0x13cc>
 8005bd8:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8005bdc:	970e      	str	r7, [sp, #56]	; 0x38
 8005bde:	9308      	str	r3, [sp, #32]
 8005be0:	950d      	str	r5, [sp, #52]	; 0x34
 8005be2:	4683      	mov	fp, r0
 8005be4:	9013      	str	r0, [sp, #76]	; 0x4c
 8005be6:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005bea:	f7fe bf1b 	b.w	8004a24 <_svfprintf_r+0x3a4>
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	dd6d      	ble.n	8005cce <_svfprintf_r+0x164e>
 8005bf2:	f1bb 0f00 	cmp.w	fp, #0
 8005bf6:	d14f      	bne.n	8005c98 <_svfprintf_r+0x1618>
 8005bf8:	9a07      	ldr	r2, [sp, #28]
 8005bfa:	07d4      	lsls	r4, r2, #31
 8005bfc:	d44c      	bmi.n	8005c98 <_svfprintf_r+0x1618>
 8005bfe:	461a      	mov	r2, r3
 8005c00:	920d      	str	r2, [sp, #52]	; 0x34
 8005c02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c06:	e59a      	b.n	800573e <_svfprintf_r+0x10be>
 8005c08:	9b07      	ldr	r3, [sp, #28]
 8005c0a:	07db      	lsls	r3, r3, #31
 8005c0c:	465f      	mov	r7, fp
 8005c0e:	d505      	bpl.n	8005c1c <_svfprintf_r+0x159c>
 8005c10:	ae44      	add	r6, sp, #272	; 0x110
 8005c12:	2330      	movs	r3, #48	; 0x30
 8005c14:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8005c18:	f7fe befa 	b.w	8004a10 <_svfprintf_r+0x390>
 8005c1c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8005c20:	ae34      	add	r6, sp, #208	; 0xd0
 8005c22:	f7fe bef8 	b.w	8004a16 <_svfprintf_r+0x396>
 8005c26:	aa27      	add	r2, sp, #156	; 0x9c
 8005c28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005c2c:	f002 fb96 	bl	800835c <__ssprint_r>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	f47e ae1f 	bne.w	8004874 <_svfprintf_r+0x1f4>
 8005c36:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005c38:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005c3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005c3c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005c40:	e620      	b.n	8005884 <_svfprintf_r+0x1204>
 8005c42:	46a0      	mov	r8, r4
 8005c44:	2500      	movs	r5, #0
 8005c46:	f7fe bd77 	b.w	8004738 <_svfprintf_r+0xb8>
 8005c4a:	3330      	adds	r3, #48	; 0x30
 8005c4c:	2230      	movs	r2, #48	; 0x30
 8005c4e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8005c52:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8005c56:	ab24      	add	r3, sp, #144	; 0x90
 8005c58:	e734      	b.n	8005ac4 <_svfprintf_r+0x1444>
 8005c5a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005c5c:	e552      	b.n	8005704 <_svfprintf_r+0x1084>
 8005c5e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005c60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c62:	4413      	add	r3, r2
 8005c64:	2267      	movs	r2, #103	; 0x67
 8005c66:	930d      	str	r3, [sp, #52]	; 0x34
 8005c68:	9211      	str	r2, [sp, #68]	; 0x44
 8005c6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c6e:	e566      	b.n	800573e <_svfprintf_r+0x10be>
 8005c70:	4e3e      	ldr	r6, [pc, #248]	; (8005d6c <_svfprintf_r+0x16ec>)
 8005c72:	4b3f      	ldr	r3, [pc, #252]	; (8005d70 <_svfprintf_r+0x16f0>)
 8005c74:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005c78:	f7ff b829 	b.w	8004cce <_svfprintf_r+0x64e>
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8005c84:	f7fe f9f0 	bl	8004068 <__aeabi_dcmpeq>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	f47f ae6d 	bne.w	8005968 <_svfprintf_r+0x12e8>
 8005c8e:	f1c5 0501 	rsb	r5, r5, #1
 8005c92:	9521      	str	r5, [sp, #132]	; 0x84
 8005c94:	442c      	add	r4, r5
 8005c96:	e522      	b.n	80056de <_svfprintf_r+0x105e>
 8005c98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005c9c:	189d      	adds	r5, r3, r2
 8005c9e:	eb05 030b 	add.w	r3, r5, fp
 8005ca2:	930d      	str	r3, [sp, #52]	; 0x34
 8005ca4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005ca8:	e549      	b.n	800573e <_svfprintf_r+0x10be>
 8005caa:	9b07      	ldr	r3, [sp, #28]
 8005cac:	f013 0301 	ands.w	r3, r3, #1
 8005cb0:	f47f af11 	bne.w	8005ad6 <_svfprintf_r+0x1456>
 8005cb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8005cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005cbc:	e53f      	b.n	800573e <_svfprintf_r+0x10be>
 8005cbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005cc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005cc2:	f1c3 0301 	rsb	r3, r3, #1
 8005cc6:	441a      	add	r2, r3
 8005cc8:	4613      	mov	r3, r2
 8005cca:	920d      	str	r2, [sp, #52]	; 0x34
 8005ccc:	e76e      	b.n	8005bac <_svfprintf_r+0x152c>
 8005cce:	f1bb 0f00 	cmp.w	fp, #0
 8005cd2:	d102      	bne.n	8005cda <_svfprintf_r+0x165a>
 8005cd4:	9b07      	ldr	r3, [sp, #28]
 8005cd6:	07d8      	lsls	r0, r3, #31
 8005cd8:	d507      	bpl.n	8005cea <_svfprintf_r+0x166a>
 8005cda:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005cdc:	1c5d      	adds	r5, r3, #1
 8005cde:	eb05 030b 	add.w	r3, r5, fp
 8005ce2:	930d      	str	r3, [sp, #52]	; 0x34
 8005ce4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005ce8:	e529      	b.n	800573e <_svfprintf_r+0x10be>
 8005cea:	2301      	movs	r3, #1
 8005cec:	930d      	str	r3, [sp, #52]	; 0x34
 8005cee:	e526      	b.n	800573e <_svfprintf_r+0x10be>
 8005cf0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005cf2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005cf6:	6805      	ldr	r5, [r0, #0]
 8005cf8:	3004      	adds	r0, #4
 8005cfa:	2d00      	cmp	r5, #0
 8005cfc:	900e      	str	r0, [sp, #56]	; 0x38
 8005cfe:	46a0      	mov	r8, r4
 8005d00:	f6be ad18 	bge.w	8004734 <_svfprintf_r+0xb4>
 8005d04:	f04f 35ff 	mov.w	r5, #4294967295
 8005d08:	f7fe bd14 	b.w	8004734 <_svfprintf_r+0xb4>
 8005d0c:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005d10:	f7fe bdc1 	b.w	8004896 <_svfprintf_r+0x216>
 8005d14:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8005d18:	e6d4      	b.n	8005ac4 <_svfprintf_r+0x1444>
 8005d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d1c:	230c      	movs	r3, #12
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	f7fe bdaf 	b.w	8004886 <_svfprintf_r+0x206>
 8005d28:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005d2c:	f7fe be30 	b.w	8004990 <_svfprintf_r+0x310>
 8005d30:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005d34:	f7fe bf92 	b.w	8004c5c <_svfprintf_r+0x5dc>
 8005d38:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005d3c:	f7ff b845 	b.w	8004dca <_svfprintf_r+0x74a>
 8005d40:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005d44:	f7ff b813 	b.w	8004d6e <_svfprintf_r+0x6ee>
 8005d48:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005d4c:	f7fe bfe5 	b.w	8004d1a <_svfprintf_r+0x69a>
 8005d50:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005d54:	f7ff b92d 	b.w	8004fb2 <_svfprintf_r+0x932>
 8005d58:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005d5c:	f7ff b908 	b.w	8004f70 <_svfprintf_r+0x8f0>
 8005d60:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005d64:	f7ff b8e6 	b.w	8004f34 <_svfprintf_r+0x8b4>
 8005d68:	0800910c 	.word	0x0800910c
 8005d6c:	080090e0 	.word	0x080090e0
 8005d70:	080090dc 	.word	0x080090dc

08005d74 <_vsprintf_r>:
 8005d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d76:	b09b      	sub	sp, #108	; 0x6c
 8005d78:	460d      	mov	r5, r1
 8005d7a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8005d7e:	f44f 7702 	mov.w	r7, #520	; 0x208
 8005d82:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8005d86:	4669      	mov	r1, sp
 8005d88:	9500      	str	r5, [sp, #0]
 8005d8a:	9504      	str	r5, [sp, #16]
 8005d8c:	f8ad 700c 	strh.w	r7, [sp, #12]
 8005d90:	9402      	str	r4, [sp, #8]
 8005d92:	9405      	str	r4, [sp, #20]
 8005d94:	f8ad 600e 	strh.w	r6, [sp, #14]
 8005d98:	f7fe fc72 	bl	8004680 <_svfprintf_r>
 8005d9c:	9b00      	ldr	r3, [sp, #0]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	b01b      	add	sp, #108	; 0x6c
 8005da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005da6:	bf00      	nop

08005da8 <vsprintf>:
 8005da8:	b410      	push	{r4}
 8005daa:	4c04      	ldr	r4, [pc, #16]	; (8005dbc <vsprintf+0x14>)
 8005dac:	4613      	mov	r3, r2
 8005dae:	460a      	mov	r2, r1
 8005db0:	4601      	mov	r1, r0
 8005db2:	6820      	ldr	r0, [r4, #0]
 8005db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005db8:	f7ff bfdc 	b.w	8005d74 <_vsprintf_r>
 8005dbc:	20000468 	.word	0x20000468

08005dc0 <quorem>:
 8005dc0:	6902      	ldr	r2, [r0, #16]
 8005dc2:	690b      	ldr	r3, [r1, #16]
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	f300 808d 	bgt.w	8005ee4 <quorem+0x124>
 8005dca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dce:	f103 38ff 	add.w	r8, r3, #4294967295
 8005dd2:	f101 0714 	add.w	r7, r1, #20
 8005dd6:	f100 0b14 	add.w	fp, r0, #20
 8005dda:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8005dde:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8005de2:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8005de6:	b083      	sub	sp, #12
 8005de8:	3201      	adds	r2, #1
 8005dea:	fbb3 f9f2 	udiv	r9, r3, r2
 8005dee:	eb0b 0304 	add.w	r3, fp, r4
 8005df2:	9400      	str	r4, [sp, #0]
 8005df4:	eb07 0a04 	add.w	sl, r7, r4
 8005df8:	9301      	str	r3, [sp, #4]
 8005dfa:	f1b9 0f00 	cmp.w	r9, #0
 8005dfe:	d039      	beq.n	8005e74 <quorem+0xb4>
 8005e00:	2500      	movs	r5, #0
 8005e02:	46bc      	mov	ip, r7
 8005e04:	46de      	mov	lr, fp
 8005e06:	462b      	mov	r3, r5
 8005e08:	f85c 6b04 	ldr.w	r6, [ip], #4
 8005e0c:	f8de 2000 	ldr.w	r2, [lr]
 8005e10:	b2b4      	uxth	r4, r6
 8005e12:	fb09 5504 	mla	r5, r9, r4, r5
 8005e16:	0c36      	lsrs	r6, r6, #16
 8005e18:	0c2c      	lsrs	r4, r5, #16
 8005e1a:	fb09 4406 	mla	r4, r9, r6, r4
 8005e1e:	b2ad      	uxth	r5, r5
 8005e20:	1b5b      	subs	r3, r3, r5
 8005e22:	b2a6      	uxth	r6, r4
 8005e24:	fa13 f382 	uxtah	r3, r3, r2
 8005e28:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 8005e2c:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005e36:	45e2      	cmp	sl, ip
 8005e38:	f84e 3b04 	str.w	r3, [lr], #4
 8005e3c:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8005e40:	ea4f 4326 	mov.w	r3, r6, asr #16
 8005e44:	d2e0      	bcs.n	8005e08 <quorem+0x48>
 8005e46:	9b00      	ldr	r3, [sp, #0]
 8005e48:	f85b 3003 	ldr.w	r3, [fp, r3]
 8005e4c:	b993      	cbnz	r3, 8005e74 <quorem+0xb4>
 8005e4e:	9c01      	ldr	r4, [sp, #4]
 8005e50:	1f23      	subs	r3, r4, #4
 8005e52:	459b      	cmp	fp, r3
 8005e54:	d20c      	bcs.n	8005e70 <quorem+0xb0>
 8005e56:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005e5a:	b94b      	cbnz	r3, 8005e70 <quorem+0xb0>
 8005e5c:	f1a4 0308 	sub.w	r3, r4, #8
 8005e60:	e002      	b.n	8005e68 <quorem+0xa8>
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	3b04      	subs	r3, #4
 8005e66:	b91a      	cbnz	r2, 8005e70 <quorem+0xb0>
 8005e68:	459b      	cmp	fp, r3
 8005e6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e6e:	d3f8      	bcc.n	8005e62 <quorem+0xa2>
 8005e70:	f8c0 8010 	str.w	r8, [r0, #16]
 8005e74:	4604      	mov	r4, r0
 8005e76:	f001 ff23 	bl	8007cc0 <__mcmp>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	db2e      	blt.n	8005edc <quorem+0x11c>
 8005e7e:	f109 0901 	add.w	r9, r9, #1
 8005e82:	465d      	mov	r5, fp
 8005e84:	2300      	movs	r3, #0
 8005e86:	f857 1b04 	ldr.w	r1, [r7], #4
 8005e8a:	6828      	ldr	r0, [r5, #0]
 8005e8c:	b28a      	uxth	r2, r1
 8005e8e:	1a9a      	subs	r2, r3, r2
 8005e90:	0c09      	lsrs	r1, r1, #16
 8005e92:	fa12 f280 	uxtah	r2, r2, r0
 8005e96:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8005e9a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8005e9e:	b291      	uxth	r1, r2
 8005ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005ea4:	45ba      	cmp	sl, r7
 8005ea6:	f845 1b04 	str.w	r1, [r5], #4
 8005eaa:	ea4f 4323 	mov.w	r3, r3, asr #16
 8005eae:	d2ea      	bcs.n	8005e86 <quorem+0xc6>
 8005eb0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8005eb4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8005eb8:	b982      	cbnz	r2, 8005edc <quorem+0x11c>
 8005eba:	1f1a      	subs	r2, r3, #4
 8005ebc:	4593      	cmp	fp, r2
 8005ebe:	d20b      	bcs.n	8005ed8 <quorem+0x118>
 8005ec0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8005ec4:	b942      	cbnz	r2, 8005ed8 <quorem+0x118>
 8005ec6:	3b08      	subs	r3, #8
 8005ec8:	e002      	b.n	8005ed0 <quorem+0x110>
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	3b04      	subs	r3, #4
 8005ece:	b91a      	cbnz	r2, 8005ed8 <quorem+0x118>
 8005ed0:	459b      	cmp	fp, r3
 8005ed2:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ed6:	d3f8      	bcc.n	8005eca <quorem+0x10a>
 8005ed8:	f8c4 8010 	str.w	r8, [r4, #16]
 8005edc:	4648      	mov	r0, r9
 8005ede:	b003      	add	sp, #12
 8005ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	4770      	bx	lr

08005ee8 <_dtoa_r>:
 8005ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eec:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005eee:	b099      	sub	sp, #100	; 0x64
 8005ef0:	4681      	mov	r9, r0
 8005ef2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8005ef4:	4692      	mov	sl, r2
 8005ef6:	469b      	mov	fp, r3
 8005ef8:	b149      	cbz	r1, 8005f0e <_dtoa_r+0x26>
 8005efa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005efc:	604a      	str	r2, [r1, #4]
 8005efe:	2301      	movs	r3, #1
 8005f00:	4093      	lsls	r3, r2
 8005f02:	608b      	str	r3, [r1, #8]
 8005f04:	f001 fcfa 	bl	80078fc <_Bfree>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8005f0e:	f1bb 0f00 	cmp.w	fp, #0
 8005f12:	46d8      	mov	r8, fp
 8005f14:	db33      	blt.n	8005f7e <_dtoa_r+0x96>
 8005f16:	2300      	movs	r3, #0
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	4ba3      	ldr	r3, [pc, #652]	; (80061a8 <_dtoa_r+0x2c0>)
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	ea08 0303 	and.w	r3, r8, r3
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d014      	beq.n	8005f50 <_dtoa_r+0x68>
 8005f26:	2200      	movs	r2, #0
 8005f28:	2300      	movs	r3, #0
 8005f2a:	4650      	mov	r0, sl
 8005f2c:	4659      	mov	r1, fp
 8005f2e:	f7fe f89b 	bl	8004068 <__aeabi_dcmpeq>
 8005f32:	4605      	mov	r5, r0
 8005f34:	b348      	cbz	r0, 8005f8a <_dtoa_r+0xa2>
 8005f36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f38:	2301      	movs	r3, #1
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 80c2 	beq.w	80060c8 <_dtoa_r+0x1e0>
 8005f44:	4899      	ldr	r0, [pc, #612]	; (80061ac <_dtoa_r+0x2c4>)
 8005f46:	6018      	str	r0, [r3, #0]
 8005f48:	3801      	subs	r0, #1
 8005f4a:	b019      	add	sp, #100	; 0x64
 8005f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f50:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f52:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	f1ba 0f00 	cmp.w	sl, #0
 8005f5c:	f000 809f 	beq.w	800609e <_dtoa_r+0x1b6>
 8005f60:	4893      	ldr	r0, [pc, #588]	; (80061b0 <_dtoa_r+0x2c8>)
 8005f62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0f0      	beq.n	8005f4a <_dtoa_r+0x62>
 8005f68:	78c3      	ldrb	r3, [r0, #3]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 80ae 	beq.w	80060cc <_dtoa_r+0x1e4>
 8005f70:	f100 0308 	add.w	r3, r0, #8
 8005f74:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	b019      	add	sp, #100	; 0x64
 8005f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	46c3      	mov	fp, r8
 8005f88:	e7c7      	b.n	8005f1a <_dtoa_r+0x32>
 8005f8a:	aa16      	add	r2, sp, #88	; 0x58
 8005f8c:	ab17      	add	r3, sp, #92	; 0x5c
 8005f8e:	9201      	str	r2, [sp, #4]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	4652      	mov	r2, sl
 8005f94:	465b      	mov	r3, fp
 8005f96:	4648      	mov	r0, r9
 8005f98:	f001 ff3e 	bl	8007e18 <__d2b>
 8005f9c:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8005fa0:	9008      	str	r0, [sp, #32]
 8005fa2:	f040 8085 	bne.w	80060b0 <_dtoa_r+0x1c8>
 8005fa6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8005fa8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005faa:	442c      	add	r4, r5
 8005fac:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	f340 8289 	ble.w	80064c8 <_dtoa_r+0x5e0>
 8005fb6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005fba:	f204 4012 	addw	r0, r4, #1042	; 0x412
 8005fbe:	fa08 f803 	lsl.w	r8, r8, r3
 8005fc2:	fa2a f000 	lsr.w	r0, sl, r0
 8005fc6:	ea40 0008 	orr.w	r0, r0, r8
 8005fca:	f7fd fd6f 	bl	8003aac <__aeabi_ui2d>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	3c01      	subs	r4, #1
 8005fd2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005fd6:	930d      	str	r3, [sp, #52]	; 0x34
 8005fd8:	2200      	movs	r2, #0
 8005fda:	4b76      	ldr	r3, [pc, #472]	; (80061b4 <_dtoa_r+0x2cc>)
 8005fdc:	f7fd fc28 	bl	8003830 <__aeabi_dsub>
 8005fe0:	a36b      	add	r3, pc, #428	; (adr r3, 8006190 <_dtoa_r+0x2a8>)
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	f7fd fdd7 	bl	8003b98 <__aeabi_dmul>
 8005fea:	a36b      	add	r3, pc, #428	; (adr r3, 8006198 <_dtoa_r+0x2b0>)
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	f7fd fc20 	bl	8003834 <__adddf3>
 8005ff4:	4606      	mov	r6, r0
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	460f      	mov	r7, r1
 8005ffa:	f7fd fd67 	bl	8003acc <__aeabi_i2d>
 8005ffe:	a368      	add	r3, pc, #416	; (adr r3, 80061a0 <_dtoa_r+0x2b8>)
 8006000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006004:	f7fd fdc8 	bl	8003b98 <__aeabi_dmul>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4630      	mov	r0, r6
 800600e:	4639      	mov	r1, r7
 8006010:	f7fd fc10 	bl	8003834 <__adddf3>
 8006014:	4606      	mov	r6, r0
 8006016:	460f      	mov	r7, r1
 8006018:	f7fe f86e 	bl	80040f8 <__aeabi_d2iz>
 800601c:	2200      	movs	r2, #0
 800601e:	9004      	str	r0, [sp, #16]
 8006020:	2300      	movs	r3, #0
 8006022:	4630      	mov	r0, r6
 8006024:	4639      	mov	r1, r7
 8006026:	f7fe f829 	bl	800407c <__aeabi_dcmplt>
 800602a:	2800      	cmp	r0, #0
 800602c:	f040 8227 	bne.w	800647e <_dtoa_r+0x596>
 8006030:	9e04      	ldr	r6, [sp, #16]
 8006032:	2e16      	cmp	r6, #22
 8006034:	f200 8220 	bhi.w	8006478 <_dtoa_r+0x590>
 8006038:	4b5f      	ldr	r3, [pc, #380]	; (80061b8 <_dtoa_r+0x2d0>)
 800603a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800603e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006042:	4652      	mov	r2, sl
 8006044:	465b      	mov	r3, fp
 8006046:	f7fe f837 	bl	80040b8 <__aeabi_dcmpgt>
 800604a:	2800      	cmp	r0, #0
 800604c:	f000 8241 	beq.w	80064d2 <_dtoa_r+0x5ea>
 8006050:	1e73      	subs	r3, r6, #1
 8006052:	9304      	str	r3, [sp, #16]
 8006054:	2300      	movs	r3, #0
 8006056:	930b      	str	r3, [sp, #44]	; 0x2c
 8006058:	1b2c      	subs	r4, r5, r4
 800605a:	f1b4 0801 	subs.w	r8, r4, #1
 800605e:	f100 8229 	bmi.w	80064b4 <_dtoa_r+0x5cc>
 8006062:	2300      	movs	r3, #0
 8006064:	9305      	str	r3, [sp, #20]
 8006066:	9b04      	ldr	r3, [sp, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	f2c0 821a 	blt.w	80064a2 <_dtoa_r+0x5ba>
 800606e:	4498      	add	r8, r3
 8006070:	930a      	str	r3, [sp, #40]	; 0x28
 8006072:	2300      	movs	r3, #0
 8006074:	9302      	str	r3, [sp, #8]
 8006076:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006078:	2b09      	cmp	r3, #9
 800607a:	d829      	bhi.n	80060d0 <_dtoa_r+0x1e8>
 800607c:	2b05      	cmp	r3, #5
 800607e:	f340 8643 	ble.w	8006d08 <_dtoa_r+0xe20>
 8006082:	3b04      	subs	r3, #4
 8006084:	9322      	str	r3, [sp, #136]	; 0x88
 8006086:	2500      	movs	r5, #0
 8006088:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800608a:	3b02      	subs	r3, #2
 800608c:	2b03      	cmp	r3, #3
 800608e:	f200 8622 	bhi.w	8006cd6 <_dtoa_r+0xdee>
 8006092:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006096:	032a      	.short	0x032a
 8006098:	03350223 	.word	0x03350223
 800609c:	044f      	.short	0x044f
 800609e:	4b44      	ldr	r3, [pc, #272]	; (80061b0 <_dtoa_r+0x2c8>)
 80060a0:	4a46      	ldr	r2, [pc, #280]	; (80061bc <_dtoa_r+0x2d4>)
 80060a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80060a6:	2800      	cmp	r0, #0
 80060a8:	bf14      	ite	ne
 80060aa:	4618      	movne	r0, r3
 80060ac:	4610      	moveq	r0, r2
 80060ae:	e758      	b.n	8005f62 <_dtoa_r+0x7a>
 80060b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060b4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80060b8:	950d      	str	r5, [sp, #52]	; 0x34
 80060ba:	4650      	mov	r0, sl
 80060bc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80060c0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80060c4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80060c6:	e787      	b.n	8005fd8 <_dtoa_r+0xf0>
 80060c8:	483d      	ldr	r0, [pc, #244]	; (80061c0 <_dtoa_r+0x2d8>)
 80060ca:	e73e      	b.n	8005f4a <_dtoa_r+0x62>
 80060cc:	1cc3      	adds	r3, r0, #3
 80060ce:	e751      	b.n	8005f74 <_dtoa_r+0x8c>
 80060d0:	2100      	movs	r1, #0
 80060d2:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80060d6:	4648      	mov	r0, r9
 80060d8:	9122      	str	r1, [sp, #136]	; 0x88
 80060da:	f001 fbe9 	bl	80078b0 <_Balloc>
 80060de:	f04f 33ff 	mov.w	r3, #4294967295
 80060e2:	9306      	str	r3, [sp, #24]
 80060e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80060e6:	930c      	str	r3, [sp, #48]	; 0x30
 80060e8:	2301      	movs	r3, #1
 80060ea:	9007      	str	r0, [sp, #28]
 80060ec:	9223      	str	r2, [sp, #140]	; 0x8c
 80060ee:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 80060f2:	9309      	str	r3, [sp, #36]	; 0x24
 80060f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f2c0 80d0 	blt.w	800629c <_dtoa_r+0x3b4>
 80060fc:	9a04      	ldr	r2, [sp, #16]
 80060fe:	2a0e      	cmp	r2, #14
 8006100:	f300 80cc 	bgt.w	800629c <_dtoa_r+0x3b4>
 8006104:	4b2c      	ldr	r3, [pc, #176]	; (80061b8 <_dtoa_r+0x2d0>)
 8006106:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800610a:	ed93 7b00 	vldr	d7, [r3]
 800610e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006110:	2b00      	cmp	r3, #0
 8006112:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006116:	f2c0 82fe 	blt.w	8006716 <_dtoa_r+0x82e>
 800611a:	4656      	mov	r6, sl
 800611c:	465f      	mov	r7, fp
 800611e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8006122:	4630      	mov	r0, r6
 8006124:	4652      	mov	r2, sl
 8006126:	465b      	mov	r3, fp
 8006128:	4639      	mov	r1, r7
 800612a:	f7fd fe5f 	bl	8003dec <__aeabi_ddiv>
 800612e:	f7fd ffe3 	bl	80040f8 <__aeabi_d2iz>
 8006132:	4604      	mov	r4, r0
 8006134:	f7fd fcca 	bl	8003acc <__aeabi_i2d>
 8006138:	4652      	mov	r2, sl
 800613a:	465b      	mov	r3, fp
 800613c:	f7fd fd2c 	bl	8003b98 <__aeabi_dmul>
 8006140:	460b      	mov	r3, r1
 8006142:	4602      	mov	r2, r0
 8006144:	4639      	mov	r1, r7
 8006146:	4630      	mov	r0, r6
 8006148:	f7fd fb72 	bl	8003830 <__aeabi_dsub>
 800614c:	9d07      	ldr	r5, [sp, #28]
 800614e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8006152:	702b      	strb	r3, [r5, #0]
 8006154:	9b06      	ldr	r3, [sp, #24]
 8006156:	2b01      	cmp	r3, #1
 8006158:	4606      	mov	r6, r0
 800615a:	460f      	mov	r7, r1
 800615c:	f105 0501 	add.w	r5, r5, #1
 8006160:	d061      	beq.n	8006226 <_dtoa_r+0x33e>
 8006162:	2200      	movs	r2, #0
 8006164:	4b17      	ldr	r3, [pc, #92]	; (80061c4 <_dtoa_r+0x2dc>)
 8006166:	f7fd fd17 	bl	8003b98 <__aeabi_dmul>
 800616a:	2200      	movs	r2, #0
 800616c:	2300      	movs	r3, #0
 800616e:	4606      	mov	r6, r0
 8006170:	460f      	mov	r7, r1
 8006172:	f7fd ff79 	bl	8004068 <__aeabi_dcmpeq>
 8006176:	2800      	cmp	r0, #0
 8006178:	d17d      	bne.n	8006276 <_dtoa_r+0x38e>
 800617a:	f8cd 9014 	str.w	r9, [sp, #20]
 800617e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8006182:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8006186:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800618a:	e028      	b.n	80061de <_dtoa_r+0x2f6>
 800618c:	f3af 8000 	nop.w
 8006190:	636f4361 	.word	0x636f4361
 8006194:	3fd287a7 	.word	0x3fd287a7
 8006198:	8b60c8b3 	.word	0x8b60c8b3
 800619c:	3fc68a28 	.word	0x3fc68a28
 80061a0:	509f79fb 	.word	0x509f79fb
 80061a4:	3fd34413 	.word	0x3fd34413
 80061a8:	7ff00000 	.word	0x7ff00000
 80061ac:	08009115 	.word	0x08009115
 80061b0:	08009134 	.word	0x08009134
 80061b4:	3ff80000 	.word	0x3ff80000
 80061b8:	08009148 	.word	0x08009148
 80061bc:	08009128 	.word	0x08009128
 80061c0:	08009114 	.word	0x08009114
 80061c4:	40240000 	.word	0x40240000
 80061c8:	f7fd fce6 	bl	8003b98 <__aeabi_dmul>
 80061cc:	2200      	movs	r2, #0
 80061ce:	2300      	movs	r3, #0
 80061d0:	4606      	mov	r6, r0
 80061d2:	460f      	mov	r7, r1
 80061d4:	f7fd ff48 	bl	8004068 <__aeabi_dcmpeq>
 80061d8:	2800      	cmp	r0, #0
 80061da:	f040 83ae 	bne.w	800693a <_dtoa_r+0xa52>
 80061de:	4642      	mov	r2, r8
 80061e0:	464b      	mov	r3, r9
 80061e2:	4630      	mov	r0, r6
 80061e4:	4639      	mov	r1, r7
 80061e6:	f7fd fe01 	bl	8003dec <__aeabi_ddiv>
 80061ea:	f7fd ff85 	bl	80040f8 <__aeabi_d2iz>
 80061ee:	4604      	mov	r4, r0
 80061f0:	f7fd fc6c 	bl	8003acc <__aeabi_i2d>
 80061f4:	4642      	mov	r2, r8
 80061f6:	464b      	mov	r3, r9
 80061f8:	f7fd fcce 	bl	8003b98 <__aeabi_dmul>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4630      	mov	r0, r6
 8006202:	4639      	mov	r1, r7
 8006204:	f7fd fb14 	bl	8003830 <__aeabi_dsub>
 8006208:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800620c:	f805 eb01 	strb.w	lr, [r5], #1
 8006210:	ebcb 0e05 	rsb	lr, fp, r5
 8006214:	45d6      	cmp	lr, sl
 8006216:	4606      	mov	r6, r0
 8006218:	460f      	mov	r7, r1
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	4bae      	ldr	r3, [pc, #696]	; (80064d8 <_dtoa_r+0x5f0>)
 8006220:	d1d2      	bne.n	80061c8 <_dtoa_r+0x2e0>
 8006222:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006226:	4632      	mov	r2, r6
 8006228:	463b      	mov	r3, r7
 800622a:	4630      	mov	r0, r6
 800622c:	4639      	mov	r1, r7
 800622e:	f7fd fb01 	bl	8003834 <__adddf3>
 8006232:	4606      	mov	r6, r0
 8006234:	460f      	mov	r7, r1
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800623e:	f7fd ff1d 	bl	800407c <__aeabi_dcmplt>
 8006242:	b940      	cbnz	r0, 8006256 <_dtoa_r+0x36e>
 8006244:	4632      	mov	r2, r6
 8006246:	463b      	mov	r3, r7
 8006248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800624c:	f7fd ff0c 	bl	8004068 <__aeabi_dcmpeq>
 8006250:	b188      	cbz	r0, 8006276 <_dtoa_r+0x38e>
 8006252:	07e3      	lsls	r3, r4, #31
 8006254:	d50f      	bpl.n	8006276 <_dtoa_r+0x38e>
 8006256:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800625a:	9a07      	ldr	r2, [sp, #28]
 800625c:	1e6b      	subs	r3, r5, #1
 800625e:	e004      	b.n	800626a <_dtoa_r+0x382>
 8006260:	429a      	cmp	r2, r3
 8006262:	f000 83fc 	beq.w	8006a5e <_dtoa_r+0xb76>
 8006266:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800626a:	2c39      	cmp	r4, #57	; 0x39
 800626c:	f103 0501 	add.w	r5, r3, #1
 8006270:	d0f6      	beq.n	8006260 <_dtoa_r+0x378>
 8006272:	3401      	adds	r4, #1
 8006274:	701c      	strb	r4, [r3, #0]
 8006276:	9908      	ldr	r1, [sp, #32]
 8006278:	4648      	mov	r0, r9
 800627a:	f001 fb3f 	bl	80078fc <_Bfree>
 800627e:	2200      	movs	r2, #0
 8006280:	9b04      	ldr	r3, [sp, #16]
 8006282:	702a      	strb	r2, [r5, #0]
 8006284:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006286:	3301      	adds	r3, #1
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 839b 	beq.w	80069c8 <_dtoa_r+0xae0>
 8006292:	9807      	ldr	r0, [sp, #28]
 8006294:	601d      	str	r5, [r3, #0]
 8006296:	b019      	add	sp, #100	; 0x64
 8006298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800629e:	2a00      	cmp	r2, #0
 80062a0:	f000 810e 	beq.w	80064c0 <_dtoa_r+0x5d8>
 80062a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80062a6:	2a01      	cmp	r2, #1
 80062a8:	f340 8257 	ble.w	800675a <_dtoa_r+0x872>
 80062ac:	9b06      	ldr	r3, [sp, #24]
 80062ae:	9a02      	ldr	r2, [sp, #8]
 80062b0:	1e5f      	subs	r7, r3, #1
 80062b2:	42ba      	cmp	r2, r7
 80062b4:	f2c0 838b 	blt.w	80069ce <_dtoa_r+0xae6>
 80062b8:	1bd7      	subs	r7, r2, r7
 80062ba:	9b06      	ldr	r3, [sp, #24]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f2c0 8480 	blt.w	8006bc2 <_dtoa_r+0xcda>
 80062c2:	9d05      	ldr	r5, [sp, #20]
 80062c4:	9b06      	ldr	r3, [sp, #24]
 80062c6:	9a05      	ldr	r2, [sp, #20]
 80062c8:	2101      	movs	r1, #1
 80062ca:	441a      	add	r2, r3
 80062cc:	4648      	mov	r0, r9
 80062ce:	9205      	str	r2, [sp, #20]
 80062d0:	4498      	add	r8, r3
 80062d2:	f001 fbab 	bl	8007a2c <__i2b>
 80062d6:	4606      	mov	r6, r0
 80062d8:	b165      	cbz	r5, 80062f4 <_dtoa_r+0x40c>
 80062da:	f1b8 0f00 	cmp.w	r8, #0
 80062de:	dd09      	ble.n	80062f4 <_dtoa_r+0x40c>
 80062e0:	4545      	cmp	r5, r8
 80062e2:	9a05      	ldr	r2, [sp, #20]
 80062e4:	462b      	mov	r3, r5
 80062e6:	bfa8      	it	ge
 80062e8:	4643      	movge	r3, r8
 80062ea:	1ad2      	subs	r2, r2, r3
 80062ec:	9205      	str	r2, [sp, #20]
 80062ee:	1aed      	subs	r5, r5, r3
 80062f0:	ebc3 0808 	rsb	r8, r3, r8
 80062f4:	9b02      	ldr	r3, [sp, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f340 82f5 	ble.w	80068e6 <_dtoa_r+0x9fe>
 80062fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062fe:	2a00      	cmp	r2, #0
 8006300:	f000 8202 	beq.w	8006708 <_dtoa_r+0x820>
 8006304:	2f00      	cmp	r7, #0
 8006306:	f000 81ff 	beq.w	8006708 <_dtoa_r+0x820>
 800630a:	4631      	mov	r1, r6
 800630c:	463a      	mov	r2, r7
 800630e:	4648      	mov	r0, r9
 8006310:	f001 fc2e 	bl	8007b70 <__pow5mult>
 8006314:	9a08      	ldr	r2, [sp, #32]
 8006316:	4601      	mov	r1, r0
 8006318:	4606      	mov	r6, r0
 800631a:	4648      	mov	r0, r9
 800631c:	f001 fb90 	bl	8007a40 <__multiply>
 8006320:	9908      	ldr	r1, [sp, #32]
 8006322:	4604      	mov	r4, r0
 8006324:	4648      	mov	r0, r9
 8006326:	f001 fae9 	bl	80078fc <_Bfree>
 800632a:	9b02      	ldr	r3, [sp, #8]
 800632c:	1bdb      	subs	r3, r3, r7
 800632e:	9302      	str	r3, [sp, #8]
 8006330:	f040 81e9 	bne.w	8006706 <_dtoa_r+0x81e>
 8006334:	2101      	movs	r1, #1
 8006336:	4648      	mov	r0, r9
 8006338:	f001 fb78 	bl	8007a2c <__i2b>
 800633c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633e:	9002      	str	r0, [sp, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 8215 	beq.w	8006770 <_dtoa_r+0x888>
 8006346:	4601      	mov	r1, r0
 8006348:	461a      	mov	r2, r3
 800634a:	4648      	mov	r0, r9
 800634c:	f001 fc10 	bl	8007b70 <__pow5mult>
 8006350:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006352:	9002      	str	r0, [sp, #8]
 8006354:	2b01      	cmp	r3, #1
 8006356:	f340 82f3 	ble.w	8006940 <_dtoa_r+0xa58>
 800635a:	2700      	movs	r7, #0
 800635c:	9a02      	ldr	r2, [sp, #8]
 800635e:	6913      	ldr	r3, [r2, #16]
 8006360:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006364:	6918      	ldr	r0, [r3, #16]
 8006366:	f001 fb13 	bl	8007990 <__hi0bits>
 800636a:	f1c0 0020 	rsb	r0, r0, #32
 800636e:	4440      	add	r0, r8
 8006370:	f010 001f 	ands.w	r0, r0, #31
 8006374:	f000 81fa 	beq.w	800676c <_dtoa_r+0x884>
 8006378:	f1c0 0320 	rsb	r3, r0, #32
 800637c:	2b04      	cmp	r3, #4
 800637e:	f340 84bd 	ble.w	8006cfc <_dtoa_r+0xe14>
 8006382:	f1c0 001c 	rsb	r0, r0, #28
 8006386:	9b05      	ldr	r3, [sp, #20]
 8006388:	4403      	add	r3, r0
 800638a:	9305      	str	r3, [sp, #20]
 800638c:	4405      	add	r5, r0
 800638e:	4480      	add	r8, r0
 8006390:	9b05      	ldr	r3, [sp, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	dd05      	ble.n	80063a2 <_dtoa_r+0x4ba>
 8006396:	4621      	mov	r1, r4
 8006398:	461a      	mov	r2, r3
 800639a:	4648      	mov	r0, r9
 800639c:	f001 fc38 	bl	8007c10 <__lshift>
 80063a0:	4604      	mov	r4, r0
 80063a2:	f1b8 0f00 	cmp.w	r8, #0
 80063a6:	dd05      	ble.n	80063b4 <_dtoa_r+0x4cc>
 80063a8:	4642      	mov	r2, r8
 80063aa:	9902      	ldr	r1, [sp, #8]
 80063ac:	4648      	mov	r0, r9
 80063ae:	f001 fc2f 	bl	8007c10 <__lshift>
 80063b2:	9002      	str	r0, [sp, #8]
 80063b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 827a 	bne.w	80068b0 <_dtoa_r+0x9c8>
 80063bc:	9b06      	ldr	r3, [sp, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f340 8293 	ble.w	80068ea <_dtoa_r+0xa02>
 80063c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f040 81f4 	bne.w	80067b4 <_dtoa_r+0x8cc>
 80063cc:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80063d0:	9f06      	ldr	r7, [sp, #24]
 80063d2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80063d6:	465d      	mov	r5, fp
 80063d8:	e002      	b.n	80063e0 <_dtoa_r+0x4f8>
 80063da:	f001 fa99 	bl	8007910 <__multadd>
 80063de:	4604      	mov	r4, r0
 80063e0:	4641      	mov	r1, r8
 80063e2:	4620      	mov	r0, r4
 80063e4:	f7ff fcec 	bl	8005dc0 <quorem>
 80063e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80063ec:	f805 ab01 	strb.w	sl, [r5], #1
 80063f0:	ebcb 0305 	rsb	r3, fp, r5
 80063f4:	42bb      	cmp	r3, r7
 80063f6:	f04f 020a 	mov.w	r2, #10
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	4621      	mov	r1, r4
 8006400:	4648      	mov	r0, r9
 8006402:	dbea      	blt.n	80063da <_dtoa_r+0x4f2>
 8006404:	9b07      	ldr	r3, [sp, #28]
 8006406:	9a06      	ldr	r2, [sp, #24]
 8006408:	2a01      	cmp	r2, #1
 800640a:	bfac      	ite	ge
 800640c:	189b      	addge	r3, r3, r2
 800640e:	3301      	addlt	r3, #1
 8006410:	461d      	mov	r5, r3
 8006412:	f04f 0b00 	mov.w	fp, #0
 8006416:	4621      	mov	r1, r4
 8006418:	2201      	movs	r2, #1
 800641a:	4648      	mov	r0, r9
 800641c:	f001 fbf8 	bl	8007c10 <__lshift>
 8006420:	9902      	ldr	r1, [sp, #8]
 8006422:	9008      	str	r0, [sp, #32]
 8006424:	f001 fc4c 	bl	8007cc0 <__mcmp>
 8006428:	2800      	cmp	r0, #0
 800642a:	f340 8305 	ble.w	8006a38 <_dtoa_r+0xb50>
 800642e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006432:	9907      	ldr	r1, [sp, #28]
 8006434:	1e6b      	subs	r3, r5, #1
 8006436:	e004      	b.n	8006442 <_dtoa_r+0x55a>
 8006438:	428b      	cmp	r3, r1
 800643a:	f000 8274 	beq.w	8006926 <_dtoa_r+0xa3e>
 800643e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006442:	2a39      	cmp	r2, #57	; 0x39
 8006444:	f103 0501 	add.w	r5, r3, #1
 8006448:	d0f6      	beq.n	8006438 <_dtoa_r+0x550>
 800644a:	3201      	adds	r2, #1
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	9902      	ldr	r1, [sp, #8]
 8006450:	4648      	mov	r0, r9
 8006452:	f001 fa53 	bl	80078fc <_Bfree>
 8006456:	2e00      	cmp	r6, #0
 8006458:	f43f af0d 	beq.w	8006276 <_dtoa_r+0x38e>
 800645c:	f1bb 0f00 	cmp.w	fp, #0
 8006460:	d005      	beq.n	800646e <_dtoa_r+0x586>
 8006462:	45b3      	cmp	fp, r6
 8006464:	d003      	beq.n	800646e <_dtoa_r+0x586>
 8006466:	4659      	mov	r1, fp
 8006468:	4648      	mov	r0, r9
 800646a:	f001 fa47 	bl	80078fc <_Bfree>
 800646e:	4631      	mov	r1, r6
 8006470:	4648      	mov	r0, r9
 8006472:	f001 fa43 	bl	80078fc <_Bfree>
 8006476:	e6fe      	b.n	8006276 <_dtoa_r+0x38e>
 8006478:	2301      	movs	r3, #1
 800647a:	930b      	str	r3, [sp, #44]	; 0x2c
 800647c:	e5ec      	b.n	8006058 <_dtoa_r+0x170>
 800647e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006482:	4640      	mov	r0, r8
 8006484:	f7fd fb22 	bl	8003acc <__aeabi_i2d>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4630      	mov	r0, r6
 800648e:	4639      	mov	r1, r7
 8006490:	f7fd fdea 	bl	8004068 <__aeabi_dcmpeq>
 8006494:	2800      	cmp	r0, #0
 8006496:	f47f adcb 	bne.w	8006030 <_dtoa_r+0x148>
 800649a:	f108 33ff 	add.w	r3, r8, #4294967295
 800649e:	9304      	str	r3, [sp, #16]
 80064a0:	e5c6      	b.n	8006030 <_dtoa_r+0x148>
 80064a2:	9a05      	ldr	r2, [sp, #20]
 80064a4:	9b04      	ldr	r3, [sp, #16]
 80064a6:	1ad2      	subs	r2, r2, r3
 80064a8:	425b      	negs	r3, r3
 80064aa:	9302      	str	r3, [sp, #8]
 80064ac:	2300      	movs	r3, #0
 80064ae:	9205      	str	r2, [sp, #20]
 80064b0:	930a      	str	r3, [sp, #40]	; 0x28
 80064b2:	e5e0      	b.n	8006076 <_dtoa_r+0x18e>
 80064b4:	f1c8 0300 	rsb	r3, r8, #0
 80064b8:	9305      	str	r3, [sp, #20]
 80064ba:	f04f 0800 	mov.w	r8, #0
 80064be:	e5d2      	b.n	8006066 <_dtoa_r+0x17e>
 80064c0:	9f02      	ldr	r7, [sp, #8]
 80064c2:	9d05      	ldr	r5, [sp, #20]
 80064c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80064c6:	e707      	b.n	80062d8 <_dtoa_r+0x3f0>
 80064c8:	f1c3 0820 	rsb	r8, r3, #32
 80064cc:	fa0a f008 	lsl.w	r0, sl, r8
 80064d0:	e57b      	b.n	8005fca <_dtoa_r+0xe2>
 80064d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80064d4:	e5c0      	b.n	8006058 <_dtoa_r+0x170>
 80064d6:	bf00      	nop
 80064d8:	40240000 	.word	0x40240000
 80064dc:	2300      	movs	r3, #0
 80064de:	9309      	str	r3, [sp, #36]	; 0x24
 80064e0:	9b04      	ldr	r3, [sp, #16]
 80064e2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80064e4:	4413      	add	r3, r2
 80064e6:	930c      	str	r3, [sp, #48]	; 0x30
 80064e8:	3301      	adds	r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	9306      	str	r3, [sp, #24]
 80064ee:	f340 827d 	ble.w	80069ec <_dtoa_r+0xb04>
 80064f2:	9c06      	ldr	r4, [sp, #24]
 80064f4:	4626      	mov	r6, r4
 80064f6:	2100      	movs	r1, #0
 80064f8:	2e17      	cmp	r6, #23
 80064fa:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80064fe:	d90b      	bls.n	8006518 <_dtoa_r+0x630>
 8006500:	2201      	movs	r2, #1
 8006502:	2304      	movs	r3, #4
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	f103 0014 	add.w	r0, r3, #20
 800650a:	42b0      	cmp	r0, r6
 800650c:	4611      	mov	r1, r2
 800650e:	f102 0201 	add.w	r2, r2, #1
 8006512:	d9f7      	bls.n	8006504 <_dtoa_r+0x61c>
 8006514:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8006518:	4648      	mov	r0, r9
 800651a:	f001 f9c9 	bl	80078b0 <_Balloc>
 800651e:	2c0e      	cmp	r4, #14
 8006520:	9007      	str	r0, [sp, #28]
 8006522:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8006526:	f63f ade5 	bhi.w	80060f4 <_dtoa_r+0x20c>
 800652a:	2d00      	cmp	r5, #0
 800652c:	f43f ade2 	beq.w	80060f4 <_dtoa_r+0x20c>
 8006530:	9904      	ldr	r1, [sp, #16]
 8006532:	2900      	cmp	r1, #0
 8006534:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8006538:	f340 829a 	ble.w	8006a70 <_dtoa_r+0xb88>
 800653c:	4b90      	ldr	r3, [pc, #576]	; (8006780 <_dtoa_r+0x898>)
 800653e:	f001 020f 	and.w	r2, r1, #15
 8006542:	110e      	asrs	r6, r1, #4
 8006544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006548:	06f0      	lsls	r0, r6, #27
 800654a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800654e:	f140 8246 	bpl.w	80069de <_dtoa_r+0xaf6>
 8006552:	4b8c      	ldr	r3, [pc, #560]	; (8006784 <_dtoa_r+0x89c>)
 8006554:	4650      	mov	r0, sl
 8006556:	4659      	mov	r1, fp
 8006558:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800655c:	f7fd fc46 	bl	8003dec <__aeabi_ddiv>
 8006560:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006564:	f006 060f 	and.w	r6, r6, #15
 8006568:	f04f 0a03 	mov.w	sl, #3
 800656c:	b186      	cbz	r6, 8006590 <_dtoa_r+0x6a8>
 800656e:	4f85      	ldr	r7, [pc, #532]	; (8006784 <_dtoa_r+0x89c>)
 8006570:	07f1      	lsls	r1, r6, #31
 8006572:	d509      	bpl.n	8006588 <_dtoa_r+0x6a0>
 8006574:	4620      	mov	r0, r4
 8006576:	4629      	mov	r1, r5
 8006578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800657c:	f7fd fb0c 	bl	8003b98 <__aeabi_dmul>
 8006580:	f10a 0a01 	add.w	sl, sl, #1
 8006584:	4604      	mov	r4, r0
 8006586:	460d      	mov	r5, r1
 8006588:	1076      	asrs	r6, r6, #1
 800658a:	f107 0708 	add.w	r7, r7, #8
 800658e:	d1ef      	bne.n	8006570 <_dtoa_r+0x688>
 8006590:	4622      	mov	r2, r4
 8006592:	462b      	mov	r3, r5
 8006594:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006598:	f7fd fc28 	bl	8003dec <__aeabi_ddiv>
 800659c:	4606      	mov	r6, r0
 800659e:	460f      	mov	r7, r1
 80065a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065a2:	b143      	cbz	r3, 80065b6 <_dtoa_r+0x6ce>
 80065a4:	2200      	movs	r2, #0
 80065a6:	4b78      	ldr	r3, [pc, #480]	; (8006788 <_dtoa_r+0x8a0>)
 80065a8:	4630      	mov	r0, r6
 80065aa:	4639      	mov	r1, r7
 80065ac:	f7fd fd66 	bl	800407c <__aeabi_dcmplt>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	f040 831a 	bne.w	8006bea <_dtoa_r+0xd02>
 80065b6:	4650      	mov	r0, sl
 80065b8:	f7fd fa88 	bl	8003acc <__aeabi_i2d>
 80065bc:	4632      	mov	r2, r6
 80065be:	463b      	mov	r3, r7
 80065c0:	f7fd faea 	bl	8003b98 <__aeabi_dmul>
 80065c4:	4b71      	ldr	r3, [pc, #452]	; (800678c <_dtoa_r+0x8a4>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	f7fd f934 	bl	8003834 <__adddf3>
 80065cc:	9b06      	ldr	r3, [sp, #24]
 80065ce:	4604      	mov	r4, r0
 80065d0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 81db 	beq.w	8006990 <_dtoa_r+0xaa8>
 80065da:	9b04      	ldr	r3, [sp, #16]
 80065dc:	9314      	str	r3, [sp, #80]	; 0x50
 80065de:	9b06      	ldr	r3, [sp, #24]
 80065e0:	9310      	str	r3, [sp, #64]	; 0x40
 80065e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 8294 	beq.w	8006b12 <_dtoa_r+0xc2a>
 80065ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80065ec:	4b64      	ldr	r3, [pc, #400]	; (8006780 <_dtoa_r+0x898>)
 80065ee:	4968      	ldr	r1, [pc, #416]	; (8006790 <_dtoa_r+0x8a8>)
 80065f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065f8:	2000      	movs	r0, #0
 80065fa:	f7fd fbf7 	bl	8003dec <__aeabi_ddiv>
 80065fe:	4622      	mov	r2, r4
 8006600:	462b      	mov	r3, r5
 8006602:	f7fd f915 	bl	8003830 <__aeabi_dsub>
 8006606:	4682      	mov	sl, r0
 8006608:	468b      	mov	fp, r1
 800660a:	4630      	mov	r0, r6
 800660c:	4639      	mov	r1, r7
 800660e:	f7fd fd73 	bl	80040f8 <__aeabi_d2iz>
 8006612:	4604      	mov	r4, r0
 8006614:	f7fd fa5a 	bl	8003acc <__aeabi_i2d>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4630      	mov	r0, r6
 800661e:	4639      	mov	r1, r7
 8006620:	f7fd f906 	bl	8003830 <__aeabi_dsub>
 8006624:	3430      	adds	r4, #48	; 0x30
 8006626:	9d07      	ldr	r5, [sp, #28]
 8006628:	b2e4      	uxtb	r4, r4
 800662a:	4606      	mov	r6, r0
 800662c:	460f      	mov	r7, r1
 800662e:	702c      	strb	r4, [r5, #0]
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4650      	mov	r0, sl
 8006636:	4659      	mov	r1, fp
 8006638:	3501      	adds	r5, #1
 800663a:	f7fd fd3d 	bl	80040b8 <__aeabi_dcmpgt>
 800663e:	2800      	cmp	r0, #0
 8006640:	d150      	bne.n	80066e4 <_dtoa_r+0x7fc>
 8006642:	4632      	mov	r2, r6
 8006644:	463b      	mov	r3, r7
 8006646:	2000      	movs	r0, #0
 8006648:	494f      	ldr	r1, [pc, #316]	; (8006788 <_dtoa_r+0x8a0>)
 800664a:	f7fd f8f1 	bl	8003830 <__aeabi_dsub>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	4650      	mov	r0, sl
 8006654:	4659      	mov	r1, fp
 8006656:	f7fd fd2f 	bl	80040b8 <__aeabi_dcmpgt>
 800665a:	2800      	cmp	r0, #0
 800665c:	f040 8308 	bne.w	8006c70 <_dtoa_r+0xd88>
 8006660:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006662:	2a01      	cmp	r2, #1
 8006664:	f340 81f7 	ble.w	8006a56 <_dtoa_r+0xb6e>
 8006668:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800666a:	9a07      	ldr	r2, [sp, #28]
 800666c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006670:	4413      	add	r3, r2
 8006672:	4698      	mov	r8, r3
 8006674:	e00d      	b.n	8006692 <_dtoa_r+0x7aa>
 8006676:	2000      	movs	r0, #0
 8006678:	4943      	ldr	r1, [pc, #268]	; (8006788 <_dtoa_r+0x8a0>)
 800667a:	f7fd f8d9 	bl	8003830 <__aeabi_dsub>
 800667e:	4652      	mov	r2, sl
 8006680:	465b      	mov	r3, fp
 8006682:	f7fd fcfb 	bl	800407c <__aeabi_dcmplt>
 8006686:	2800      	cmp	r0, #0
 8006688:	f040 82f2 	bne.w	8006c70 <_dtoa_r+0xd88>
 800668c:	4545      	cmp	r5, r8
 800668e:	f000 81e0 	beq.w	8006a52 <_dtoa_r+0xb6a>
 8006692:	4650      	mov	r0, sl
 8006694:	4659      	mov	r1, fp
 8006696:	2200      	movs	r2, #0
 8006698:	4b3e      	ldr	r3, [pc, #248]	; (8006794 <_dtoa_r+0x8ac>)
 800669a:	f7fd fa7d 	bl	8003b98 <__aeabi_dmul>
 800669e:	2200      	movs	r2, #0
 80066a0:	4b3c      	ldr	r3, [pc, #240]	; (8006794 <_dtoa_r+0x8ac>)
 80066a2:	4682      	mov	sl, r0
 80066a4:	468b      	mov	fp, r1
 80066a6:	4630      	mov	r0, r6
 80066a8:	4639      	mov	r1, r7
 80066aa:	f7fd fa75 	bl	8003b98 <__aeabi_dmul>
 80066ae:	460f      	mov	r7, r1
 80066b0:	4606      	mov	r6, r0
 80066b2:	f7fd fd21 	bl	80040f8 <__aeabi_d2iz>
 80066b6:	4604      	mov	r4, r0
 80066b8:	f7fd fa08 	bl	8003acc <__aeabi_i2d>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	4630      	mov	r0, r6
 80066c2:	4639      	mov	r1, r7
 80066c4:	f7fd f8b4 	bl	8003830 <__aeabi_dsub>
 80066c8:	3430      	adds	r4, #48	; 0x30
 80066ca:	b2e4      	uxtb	r4, r4
 80066cc:	4652      	mov	r2, sl
 80066ce:	465b      	mov	r3, fp
 80066d0:	f805 4b01 	strb.w	r4, [r5], #1
 80066d4:	4606      	mov	r6, r0
 80066d6:	460f      	mov	r7, r1
 80066d8:	f7fd fcd0 	bl	800407c <__aeabi_dcmplt>
 80066dc:	4632      	mov	r2, r6
 80066de:	463b      	mov	r3, r7
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d0c8      	beq.n	8006676 <_dtoa_r+0x78e>
 80066e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066e6:	9304      	str	r3, [sp, #16]
 80066e8:	e5c5      	b.n	8006276 <_dtoa_r+0x38e>
 80066ea:	2300      	movs	r3, #0
 80066ec:	9309      	str	r3, [sp, #36]	; 0x24
 80066ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f340 8180 	ble.w	80069f6 <_dtoa_r+0xb0e>
 80066f6:	461e      	mov	r6, r3
 80066f8:	461c      	mov	r4, r3
 80066fa:	930c      	str	r3, [sp, #48]	; 0x30
 80066fc:	9306      	str	r3, [sp, #24]
 80066fe:	e6fa      	b.n	80064f6 <_dtoa_r+0x60e>
 8006700:	2301      	movs	r3, #1
 8006702:	9309      	str	r3, [sp, #36]	; 0x24
 8006704:	e7f3      	b.n	80066ee <_dtoa_r+0x806>
 8006706:	9408      	str	r4, [sp, #32]
 8006708:	9a02      	ldr	r2, [sp, #8]
 800670a:	9908      	ldr	r1, [sp, #32]
 800670c:	4648      	mov	r0, r9
 800670e:	f001 fa2f 	bl	8007b70 <__pow5mult>
 8006712:	4604      	mov	r4, r0
 8006714:	e60e      	b.n	8006334 <_dtoa_r+0x44c>
 8006716:	9b06      	ldr	r3, [sp, #24]
 8006718:	2b00      	cmp	r3, #0
 800671a:	f73f acfe 	bgt.w	800611a <_dtoa_r+0x232>
 800671e:	f040 814f 	bne.w	80069c0 <_dtoa_r+0xad8>
 8006722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006726:	2200      	movs	r2, #0
 8006728:	4b1b      	ldr	r3, [pc, #108]	; (8006798 <_dtoa_r+0x8b0>)
 800672a:	f7fd fa35 	bl	8003b98 <__aeabi_dmul>
 800672e:	465b      	mov	r3, fp
 8006730:	4652      	mov	r2, sl
 8006732:	f7fd fcb7 	bl	80040a4 <__aeabi_dcmpge>
 8006736:	9b06      	ldr	r3, [sp, #24]
 8006738:	9302      	str	r3, [sp, #8]
 800673a:	461e      	mov	r6, r3
 800673c:	2800      	cmp	r0, #0
 800673e:	f000 80ea 	beq.w	8006916 <_dtoa_r+0xa2e>
 8006742:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006744:	9d07      	ldr	r5, [sp, #28]
 8006746:	43db      	mvns	r3, r3
 8006748:	9304      	str	r3, [sp, #16]
 800674a:	9902      	ldr	r1, [sp, #8]
 800674c:	4648      	mov	r0, r9
 800674e:	f001 f8d5 	bl	80078fc <_Bfree>
 8006752:	2e00      	cmp	r6, #0
 8006754:	f43f ad8f 	beq.w	8006276 <_dtoa_r+0x38e>
 8006758:	e689      	b.n	800646e <_dtoa_r+0x586>
 800675a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800675c:	2a00      	cmp	r2, #0
 800675e:	f000 8238 	beq.w	8006bd2 <_dtoa_r+0xcea>
 8006762:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006766:	9f02      	ldr	r7, [sp, #8]
 8006768:	9d05      	ldr	r5, [sp, #20]
 800676a:	e5ac      	b.n	80062c6 <_dtoa_r+0x3de>
 800676c:	201c      	movs	r0, #28
 800676e:	e60a      	b.n	8006386 <_dtoa_r+0x49e>
 8006770:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006772:	2b01      	cmp	r3, #1
 8006774:	f340 8280 	ble.w	8006c78 <_dtoa_r+0xd90>
 8006778:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800677a:	2001      	movs	r0, #1
 800677c:	e5f7      	b.n	800636e <_dtoa_r+0x486>
 800677e:	bf00      	nop
 8006780:	08009148 	.word	0x08009148
 8006784:	08009210 	.word	0x08009210
 8006788:	3ff00000 	.word	0x3ff00000
 800678c:	401c0000 	.word	0x401c0000
 8006790:	3fe00000 	.word	0x3fe00000
 8006794:	40240000 	.word	0x40240000
 8006798:	40140000 	.word	0x40140000
 800679c:	4631      	mov	r1, r6
 800679e:	2300      	movs	r3, #0
 80067a0:	220a      	movs	r2, #10
 80067a2:	4648      	mov	r0, r9
 80067a4:	f001 f8b4 	bl	8007910 <__multadd>
 80067a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	4606      	mov	r6, r0
 80067ae:	f340 828d 	ble.w	8006ccc <_dtoa_r+0xde4>
 80067b2:	9306      	str	r3, [sp, #24]
 80067b4:	2d00      	cmp	r5, #0
 80067b6:	dd05      	ble.n	80067c4 <_dtoa_r+0x8dc>
 80067b8:	4631      	mov	r1, r6
 80067ba:	462a      	mov	r2, r5
 80067bc:	4648      	mov	r0, r9
 80067be:	f001 fa27 	bl	8007c10 <__lshift>
 80067c2:	4606      	mov	r6, r0
 80067c4:	2f00      	cmp	r7, #0
 80067c6:	f040 817c 	bne.w	8006ac2 <_dtoa_r+0xbda>
 80067ca:	46b0      	mov	r8, r6
 80067cc:	9b06      	ldr	r3, [sp, #24]
 80067ce:	9a07      	ldr	r2, [sp, #28]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	18d3      	adds	r3, r2, r3
 80067d4:	9308      	str	r3, [sp, #32]
 80067d6:	f00a 0301 	and.w	r3, sl, #1
 80067da:	9309      	str	r3, [sp, #36]	; 0x24
 80067dc:	4617      	mov	r7, r2
 80067de:	f8dd b008 	ldr.w	fp, [sp, #8]
 80067e2:	4620      	mov	r0, r4
 80067e4:	4659      	mov	r1, fp
 80067e6:	f7ff faeb 	bl	8005dc0 <quorem>
 80067ea:	4631      	mov	r1, r6
 80067ec:	4605      	mov	r5, r0
 80067ee:	4620      	mov	r0, r4
 80067f0:	f001 fa66 	bl	8007cc0 <__mcmp>
 80067f4:	4642      	mov	r2, r8
 80067f6:	4659      	mov	r1, fp
 80067f8:	4682      	mov	sl, r0
 80067fa:	4648      	mov	r0, r9
 80067fc:	f001 fa82 	bl	8007d04 <__mdiff>
 8006800:	68c2      	ldr	r2, [r0, #12]
 8006802:	4683      	mov	fp, r0
 8006804:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8006808:	2a00      	cmp	r2, #0
 800680a:	d149      	bne.n	80068a0 <_dtoa_r+0x9b8>
 800680c:	4601      	mov	r1, r0
 800680e:	4620      	mov	r0, r4
 8006810:	9306      	str	r3, [sp, #24]
 8006812:	f001 fa55 	bl	8007cc0 <__mcmp>
 8006816:	4659      	mov	r1, fp
 8006818:	9005      	str	r0, [sp, #20]
 800681a:	4648      	mov	r0, r9
 800681c:	f001 f86e 	bl	80078fc <_Bfree>
 8006820:	9a05      	ldr	r2, [sp, #20]
 8006822:	9b06      	ldr	r3, [sp, #24]
 8006824:	b92a      	cbnz	r2, 8006832 <_dtoa_r+0x94a>
 8006826:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006828:	b919      	cbnz	r1, 8006832 <_dtoa_r+0x94a>
 800682a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800682c:	2900      	cmp	r1, #0
 800682e:	f000 8235 	beq.w	8006c9c <_dtoa_r+0xdb4>
 8006832:	f1ba 0f00 	cmp.w	sl, #0
 8006836:	f2c0 80e3 	blt.w	8006a00 <_dtoa_r+0xb18>
 800683a:	d105      	bne.n	8006848 <_dtoa_r+0x960>
 800683c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800683e:	b919      	cbnz	r1, 8006848 <_dtoa_r+0x960>
 8006840:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006842:	2900      	cmp	r1, #0
 8006844:	f000 80dc 	beq.w	8006a00 <_dtoa_r+0xb18>
 8006848:	2a00      	cmp	r2, #0
 800684a:	f300 814e 	bgt.w	8006aea <_dtoa_r+0xc02>
 800684e:	9a08      	ldr	r2, [sp, #32]
 8006850:	703b      	strb	r3, [r7, #0]
 8006852:	f107 0a01 	add.w	sl, r7, #1
 8006856:	4297      	cmp	r7, r2
 8006858:	4655      	mov	r5, sl
 800685a:	f000 8152 	beq.w	8006b02 <_dtoa_r+0xc1a>
 800685e:	4621      	mov	r1, r4
 8006860:	2300      	movs	r3, #0
 8006862:	220a      	movs	r2, #10
 8006864:	4648      	mov	r0, r9
 8006866:	f001 f853 	bl	8007910 <__multadd>
 800686a:	4546      	cmp	r6, r8
 800686c:	4604      	mov	r4, r0
 800686e:	4631      	mov	r1, r6
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	f04f 020a 	mov.w	r2, #10
 8006878:	4648      	mov	r0, r9
 800687a:	d00b      	beq.n	8006894 <_dtoa_r+0x9ac>
 800687c:	f001 f848 	bl	8007910 <__multadd>
 8006880:	4641      	mov	r1, r8
 8006882:	4606      	mov	r6, r0
 8006884:	2300      	movs	r3, #0
 8006886:	220a      	movs	r2, #10
 8006888:	4648      	mov	r0, r9
 800688a:	f001 f841 	bl	8007910 <__multadd>
 800688e:	4657      	mov	r7, sl
 8006890:	4680      	mov	r8, r0
 8006892:	e7a4      	b.n	80067de <_dtoa_r+0x8f6>
 8006894:	f001 f83c 	bl	8007910 <__multadd>
 8006898:	4657      	mov	r7, sl
 800689a:	4606      	mov	r6, r0
 800689c:	4680      	mov	r8, r0
 800689e:	e79e      	b.n	80067de <_dtoa_r+0x8f6>
 80068a0:	4601      	mov	r1, r0
 80068a2:	4648      	mov	r0, r9
 80068a4:	9305      	str	r3, [sp, #20]
 80068a6:	f001 f829 	bl	80078fc <_Bfree>
 80068aa:	2201      	movs	r2, #1
 80068ac:	9b05      	ldr	r3, [sp, #20]
 80068ae:	e7c0      	b.n	8006832 <_dtoa_r+0x94a>
 80068b0:	9902      	ldr	r1, [sp, #8]
 80068b2:	4620      	mov	r0, r4
 80068b4:	f001 fa04 	bl	8007cc0 <__mcmp>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	f6bf ad7f 	bge.w	80063bc <_dtoa_r+0x4d4>
 80068be:	4621      	mov	r1, r4
 80068c0:	9c04      	ldr	r4, [sp, #16]
 80068c2:	2300      	movs	r3, #0
 80068c4:	3c01      	subs	r4, #1
 80068c6:	220a      	movs	r2, #10
 80068c8:	4648      	mov	r0, r9
 80068ca:	9404      	str	r4, [sp, #16]
 80068cc:	f001 f820 	bl	8007910 <__multadd>
 80068d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d2:	4604      	mov	r4, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f47f af61 	bne.w	800679c <_dtoa_r+0x8b4>
 80068da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f340 81ed 	ble.w	8006cbc <_dtoa_r+0xdd4>
 80068e2:	9306      	str	r3, [sp, #24]
 80068e4:	e572      	b.n	80063cc <_dtoa_r+0x4e4>
 80068e6:	9c08      	ldr	r4, [sp, #32]
 80068e8:	e524      	b.n	8006334 <_dtoa_r+0x44c>
 80068ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	f77f ad69 	ble.w	80063c4 <_dtoa_r+0x4dc>
 80068f2:	9b06      	ldr	r3, [sp, #24]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f040 819d 	bne.w	8006c34 <_dtoa_r+0xd4c>
 80068fa:	9902      	ldr	r1, [sp, #8]
 80068fc:	2205      	movs	r2, #5
 80068fe:	4648      	mov	r0, r9
 8006900:	f001 f806 	bl	8007910 <__multadd>
 8006904:	4601      	mov	r1, r0
 8006906:	9002      	str	r0, [sp, #8]
 8006908:	4620      	mov	r0, r4
 800690a:	f001 f9d9 	bl	8007cc0 <__mcmp>
 800690e:	2800      	cmp	r0, #0
 8006910:	9408      	str	r4, [sp, #32]
 8006912:	f77f af16 	ble.w	8006742 <_dtoa_r+0x85a>
 8006916:	9a04      	ldr	r2, [sp, #16]
 8006918:	9907      	ldr	r1, [sp, #28]
 800691a:	2331      	movs	r3, #49	; 0x31
 800691c:	3201      	adds	r2, #1
 800691e:	9204      	str	r2, [sp, #16]
 8006920:	700b      	strb	r3, [r1, #0]
 8006922:	1c4d      	adds	r5, r1, #1
 8006924:	e711      	b.n	800674a <_dtoa_r+0x862>
 8006926:	9a04      	ldr	r2, [sp, #16]
 8006928:	3201      	adds	r2, #1
 800692a:	9204      	str	r2, [sp, #16]
 800692c:	9a07      	ldr	r2, [sp, #28]
 800692e:	2331      	movs	r3, #49	; 0x31
 8006930:	7013      	strb	r3, [r2, #0]
 8006932:	e58c      	b.n	800644e <_dtoa_r+0x566>
 8006934:	2301      	movs	r3, #1
 8006936:	9309      	str	r3, [sp, #36]	; 0x24
 8006938:	e5d2      	b.n	80064e0 <_dtoa_r+0x5f8>
 800693a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800693e:	e49a      	b.n	8006276 <_dtoa_r+0x38e>
 8006940:	f1ba 0f00 	cmp.w	sl, #0
 8006944:	f47f ad09 	bne.w	800635a <_dtoa_r+0x472>
 8006948:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800694c:	2b00      	cmp	r3, #0
 800694e:	f040 813e 	bne.w	8006bce <_dtoa_r+0xce6>
 8006952:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8006956:	0d3f      	lsrs	r7, r7, #20
 8006958:	053f      	lsls	r7, r7, #20
 800695a:	b12f      	cbz	r7, 8006968 <_dtoa_r+0xa80>
 800695c:	9b05      	ldr	r3, [sp, #20]
 800695e:	3301      	adds	r3, #1
 8006960:	9305      	str	r3, [sp, #20]
 8006962:	f108 0801 	add.w	r8, r8, #1
 8006966:	2701      	movs	r7, #1
 8006968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800696a:	2001      	movs	r0, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	f43f acfe 	beq.w	800636e <_dtoa_r+0x486>
 8006972:	e4f3      	b.n	800635c <_dtoa_r+0x474>
 8006974:	4650      	mov	r0, sl
 8006976:	f7fd f8a9 	bl	8003acc <__aeabi_i2d>
 800697a:	4632      	mov	r2, r6
 800697c:	463b      	mov	r3, r7
 800697e:	f7fd f90b 	bl	8003b98 <__aeabi_dmul>
 8006982:	2200      	movs	r2, #0
 8006984:	4bbf      	ldr	r3, [pc, #764]	; (8006c84 <_dtoa_r+0xd9c>)
 8006986:	f7fc ff55 	bl	8003834 <__adddf3>
 800698a:	4604      	mov	r4, r0
 800698c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006990:	4630      	mov	r0, r6
 8006992:	4639      	mov	r1, r7
 8006994:	2200      	movs	r2, #0
 8006996:	4bbc      	ldr	r3, [pc, #752]	; (8006c88 <_dtoa_r+0xda0>)
 8006998:	f7fc ff4a 	bl	8003830 <__aeabi_dsub>
 800699c:	4622      	mov	r2, r4
 800699e:	462b      	mov	r3, r5
 80069a0:	4606      	mov	r6, r0
 80069a2:	460f      	mov	r7, r1
 80069a4:	f7fd fb88 	bl	80040b8 <__aeabi_dcmpgt>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	f040 80ae 	bne.w	8006b0a <_dtoa_r+0xc22>
 80069ae:	4622      	mov	r2, r4
 80069b0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80069b4:	4630      	mov	r0, r6
 80069b6:	4639      	mov	r1, r7
 80069b8:	f7fd fb60 	bl	800407c <__aeabi_dcmplt>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d04a      	beq.n	8006a56 <_dtoa_r+0xb6e>
 80069c0:	2300      	movs	r3, #0
 80069c2:	9302      	str	r3, [sp, #8]
 80069c4:	461e      	mov	r6, r3
 80069c6:	e6bc      	b.n	8006742 <_dtoa_r+0x85a>
 80069c8:	9807      	ldr	r0, [sp, #28]
 80069ca:	f7ff babe 	b.w	8005f4a <_dtoa_r+0x62>
 80069ce:	9b02      	ldr	r3, [sp, #8]
 80069d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069d2:	9702      	str	r7, [sp, #8]
 80069d4:	1afb      	subs	r3, r7, r3
 80069d6:	441a      	add	r2, r3
 80069d8:	920a      	str	r2, [sp, #40]	; 0x28
 80069da:	2700      	movs	r7, #0
 80069dc:	e46d      	b.n	80062ba <_dtoa_r+0x3d2>
 80069de:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 80069e2:	f04f 0a02 	mov.w	sl, #2
 80069e6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80069ea:	e5bf      	b.n	800656c <_dtoa_r+0x684>
 80069ec:	461c      	mov	r4, r3
 80069ee:	2100      	movs	r1, #0
 80069f0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80069f4:	e590      	b.n	8006518 <_dtoa_r+0x630>
 80069f6:	2401      	movs	r4, #1
 80069f8:	9423      	str	r4, [sp, #140]	; 0x8c
 80069fa:	940c      	str	r4, [sp, #48]	; 0x30
 80069fc:	9406      	str	r4, [sp, #24]
 80069fe:	e7f6      	b.n	80069ee <_dtoa_r+0xb06>
 8006a00:	2a00      	cmp	r2, #0
 8006a02:	469a      	mov	sl, r3
 8006a04:	dd11      	ble.n	8006a2a <_dtoa_r+0xb42>
 8006a06:	4621      	mov	r1, r4
 8006a08:	2201      	movs	r2, #1
 8006a0a:	4648      	mov	r0, r9
 8006a0c:	f001 f900 	bl	8007c10 <__lshift>
 8006a10:	9902      	ldr	r1, [sp, #8]
 8006a12:	4604      	mov	r4, r0
 8006a14:	f001 f954 	bl	8007cc0 <__mcmp>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	f340 8148 	ble.w	8006cae <_dtoa_r+0xdc6>
 8006a1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a22:	f000 8109 	beq.w	8006c38 <_dtoa_r+0xd50>
 8006a26:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 8006a2a:	46b3      	mov	fp, r6
 8006a2c:	f887 a000 	strb.w	sl, [r7]
 8006a30:	1c7d      	adds	r5, r7, #1
 8006a32:	4646      	mov	r6, r8
 8006a34:	9408      	str	r4, [sp, #32]
 8006a36:	e50a      	b.n	800644e <_dtoa_r+0x566>
 8006a38:	d104      	bne.n	8006a44 <_dtoa_r+0xb5c>
 8006a3a:	f01a 0f01 	tst.w	sl, #1
 8006a3e:	d001      	beq.n	8006a44 <_dtoa_r+0xb5c>
 8006a40:	e4f5      	b.n	800642e <_dtoa_r+0x546>
 8006a42:	4615      	mov	r5, r2
 8006a44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a48:	2b30      	cmp	r3, #48	; 0x30
 8006a4a:	f105 32ff 	add.w	r2, r5, #4294967295
 8006a4e:	d0f8      	beq.n	8006a42 <_dtoa_r+0xb5a>
 8006a50:	e4fd      	b.n	800644e <_dtoa_r+0x566>
 8006a52:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8006a56:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8006a5a:	f7ff bb4b 	b.w	80060f4 <_dtoa_r+0x20c>
 8006a5e:	9907      	ldr	r1, [sp, #28]
 8006a60:	2230      	movs	r2, #48	; 0x30
 8006a62:	700a      	strb	r2, [r1, #0]
 8006a64:	9a04      	ldr	r2, [sp, #16]
 8006a66:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8006a6a:	3201      	adds	r2, #1
 8006a6c:	9204      	str	r2, [sp, #16]
 8006a6e:	e400      	b.n	8006272 <_dtoa_r+0x38a>
 8006a70:	9b04      	ldr	r3, [sp, #16]
 8006a72:	425c      	negs	r4, r3
 8006a74:	2c00      	cmp	r4, #0
 8006a76:	f000 80b3 	beq.w	8006be0 <_dtoa_r+0xcf8>
 8006a7a:	4b84      	ldr	r3, [pc, #528]	; (8006c8c <_dtoa_r+0xda4>)
 8006a7c:	f004 020f 	and.w	r2, r4, #15
 8006a80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006a8c:	f7fd f884 	bl	8003b98 <__aeabi_dmul>
 8006a90:	1124      	asrs	r4, r4, #4
 8006a92:	4606      	mov	r6, r0
 8006a94:	460f      	mov	r7, r1
 8006a96:	f000 8116 	beq.w	8006cc6 <_dtoa_r+0xdde>
 8006a9a:	4d7d      	ldr	r5, [pc, #500]	; (8006c90 <_dtoa_r+0xda8>)
 8006a9c:	f04f 0a02 	mov.w	sl, #2
 8006aa0:	07e2      	lsls	r2, r4, #31
 8006aa2:	d509      	bpl.n	8006ab8 <_dtoa_r+0xbd0>
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006aac:	f7fd f874 	bl	8003b98 <__aeabi_dmul>
 8006ab0:	f10a 0a01 	add.w	sl, sl, #1
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	460f      	mov	r7, r1
 8006ab8:	1064      	asrs	r4, r4, #1
 8006aba:	f105 0508 	add.w	r5, r5, #8
 8006abe:	d1ef      	bne.n	8006aa0 <_dtoa_r+0xbb8>
 8006ac0:	e56e      	b.n	80065a0 <_dtoa_r+0x6b8>
 8006ac2:	6871      	ldr	r1, [r6, #4]
 8006ac4:	4648      	mov	r0, r9
 8006ac6:	f000 fef3 	bl	80078b0 <_Balloc>
 8006aca:	6933      	ldr	r3, [r6, #16]
 8006acc:	1c9a      	adds	r2, r3, #2
 8006ace:	4605      	mov	r5, r0
 8006ad0:	0092      	lsls	r2, r2, #2
 8006ad2:	f106 010c 	add.w	r1, r6, #12
 8006ad6:	300c      	adds	r0, #12
 8006ad8:	f7fd fb84 	bl	80041e4 <memcpy>
 8006adc:	4629      	mov	r1, r5
 8006ade:	2201      	movs	r2, #1
 8006ae0:	4648      	mov	r0, r9
 8006ae2:	f001 f895 	bl	8007c10 <__lshift>
 8006ae6:	4680      	mov	r8, r0
 8006ae8:	e670      	b.n	80067cc <_dtoa_r+0x8e4>
 8006aea:	2b39      	cmp	r3, #57	; 0x39
 8006aec:	f000 80a4 	beq.w	8006c38 <_dtoa_r+0xd50>
 8006af0:	f103 0a01 	add.w	sl, r3, #1
 8006af4:	46b3      	mov	fp, r6
 8006af6:	f887 a000 	strb.w	sl, [r7]
 8006afa:	1c7d      	adds	r5, r7, #1
 8006afc:	4646      	mov	r6, r8
 8006afe:	9408      	str	r4, [sp, #32]
 8006b00:	e4a5      	b.n	800644e <_dtoa_r+0x566>
 8006b02:	46b3      	mov	fp, r6
 8006b04:	469a      	mov	sl, r3
 8006b06:	4646      	mov	r6, r8
 8006b08:	e485      	b.n	8006416 <_dtoa_r+0x52e>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	9302      	str	r3, [sp, #8]
 8006b0e:	461e      	mov	r6, r3
 8006b10:	e701      	b.n	8006916 <_dtoa_r+0xa2e>
 8006b12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b14:	495d      	ldr	r1, [pc, #372]	; (8006c8c <_dtoa_r+0xda4>)
 8006b16:	1e5a      	subs	r2, r3, #1
 8006b18:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006b1c:	462b      	mov	r3, r5
 8006b1e:	9215      	str	r2, [sp, #84]	; 0x54
 8006b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b24:	4622      	mov	r2, r4
 8006b26:	f7fd f837 	bl	8003b98 <__aeabi_dmul>
 8006b2a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8006b2e:	4639      	mov	r1, r7
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7fd fae1 	bl	80040f8 <__aeabi_d2iz>
 8006b36:	4604      	mov	r4, r0
 8006b38:	f7fc ffc8 	bl	8003acc <__aeabi_i2d>
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4602      	mov	r2, r0
 8006b40:	4639      	mov	r1, r7
 8006b42:	4630      	mov	r0, r6
 8006b44:	f7fc fe74 	bl	8003830 <__aeabi_dsub>
 8006b48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b4a:	460f      	mov	r7, r1
 8006b4c:	9907      	ldr	r1, [sp, #28]
 8006b4e:	3430      	adds	r4, #48	; 0x30
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	4606      	mov	r6, r0
 8006b54:	700c      	strb	r4, [r1, #0]
 8006b56:	f101 0501 	add.w	r5, r1, #1
 8006b5a:	d020      	beq.n	8006b9e <_dtoa_r+0xcb6>
 8006b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b5e:	9a07      	ldr	r2, [sp, #28]
 8006b60:	4413      	add	r3, r2
 8006b62:	469a      	mov	sl, r3
 8006b64:	46ab      	mov	fp, r5
 8006b66:	2200      	movs	r2, #0
 8006b68:	4b4a      	ldr	r3, [pc, #296]	; (8006c94 <_dtoa_r+0xdac>)
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	f7fd f813 	bl	8003b98 <__aeabi_dmul>
 8006b72:	460f      	mov	r7, r1
 8006b74:	4606      	mov	r6, r0
 8006b76:	f7fd fabf 	bl	80040f8 <__aeabi_d2iz>
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	f7fc ffa6 	bl	8003acc <__aeabi_i2d>
 8006b80:	3430      	adds	r4, #48	; 0x30
 8006b82:	4602      	mov	r2, r0
 8006b84:	460b      	mov	r3, r1
 8006b86:	4630      	mov	r0, r6
 8006b88:	4639      	mov	r1, r7
 8006b8a:	f7fc fe51 	bl	8003830 <__aeabi_dsub>
 8006b8e:	f80b 4b01 	strb.w	r4, [fp], #1
 8006b92:	45da      	cmp	sl, fp
 8006b94:	4606      	mov	r6, r0
 8006b96:	460f      	mov	r7, r1
 8006b98:	d1e5      	bne.n	8006b66 <_dtoa_r+0xc7e>
 8006b9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b9c:	441d      	add	r5, r3
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	4b3d      	ldr	r3, [pc, #244]	; (8006c98 <_dtoa_r+0xdb0>)
 8006ba2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8006ba6:	f7fc fe45 	bl	8003834 <__adddf3>
 8006baa:	4632      	mov	r2, r6
 8006bac:	463b      	mov	r3, r7
 8006bae:	f7fd fa65 	bl	800407c <__aeabi_dcmplt>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d048      	beq.n	8006c48 <_dtoa_r+0xd60>
 8006bb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8006bbe:	f7ff bb4c 	b.w	800625a <_dtoa_r+0x372>
 8006bc2:	9b05      	ldr	r3, [sp, #20]
 8006bc4:	9a06      	ldr	r2, [sp, #24]
 8006bc6:	1a9d      	subs	r5, r3, r2
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f7ff bb7c 	b.w	80062c6 <_dtoa_r+0x3de>
 8006bce:	2700      	movs	r7, #0
 8006bd0:	e6ca      	b.n	8006968 <_dtoa_r+0xa80>
 8006bd2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006bd4:	9f02      	ldr	r7, [sp, #8]
 8006bd6:	9d05      	ldr	r5, [sp, #20]
 8006bd8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006bdc:	f7ff bb73 	b.w	80062c6 <_dtoa_r+0x3de>
 8006be0:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8006be4:	f04f 0a02 	mov.w	sl, #2
 8006be8:	e4da      	b.n	80065a0 <_dtoa_r+0x6b8>
 8006bea:	9b06      	ldr	r3, [sp, #24]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f43f aec1 	beq.w	8006974 <_dtoa_r+0xa8c>
 8006bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f77f af2e 	ble.w	8006a56 <_dtoa_r+0xb6e>
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	4b25      	ldr	r3, [pc, #148]	; (8006c94 <_dtoa_r+0xdac>)
 8006bfe:	4630      	mov	r0, r6
 8006c00:	4639      	mov	r1, r7
 8006c02:	f7fc ffc9 	bl	8003b98 <__aeabi_dmul>
 8006c06:	4606      	mov	r6, r0
 8006c08:	460f      	mov	r7, r1
 8006c0a:	f10a 0001 	add.w	r0, sl, #1
 8006c0e:	f7fc ff5d 	bl	8003acc <__aeabi_i2d>
 8006c12:	4632      	mov	r2, r6
 8006c14:	463b      	mov	r3, r7
 8006c16:	f7fc ffbf 	bl	8003b98 <__aeabi_dmul>
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	4b19      	ldr	r3, [pc, #100]	; (8006c84 <_dtoa_r+0xd9c>)
 8006c1e:	f7fc fe09 	bl	8003834 <__adddf3>
 8006c22:	9a04      	ldr	r2, [sp, #16]
 8006c24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c26:	9310      	str	r3, [sp, #64]	; 0x40
 8006c28:	3a01      	subs	r2, #1
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006c30:	9214      	str	r2, [sp, #80]	; 0x50
 8006c32:	e4d6      	b.n	80065e2 <_dtoa_r+0x6fa>
 8006c34:	9408      	str	r4, [sp, #32]
 8006c36:	e584      	b.n	8006742 <_dtoa_r+0x85a>
 8006c38:	2239      	movs	r2, #57	; 0x39
 8006c3a:	46b3      	mov	fp, r6
 8006c3c:	9408      	str	r4, [sp, #32]
 8006c3e:	4646      	mov	r6, r8
 8006c40:	703a      	strb	r2, [r7, #0]
 8006c42:	1c7d      	adds	r5, r7, #1
 8006c44:	f7ff bbf5 	b.w	8006432 <_dtoa_r+0x54a>
 8006c48:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	4912      	ldr	r1, [pc, #72]	; (8006c98 <_dtoa_r+0xdb0>)
 8006c50:	f7fc fdee 	bl	8003830 <__aeabi_dsub>
 8006c54:	4632      	mov	r2, r6
 8006c56:	463b      	mov	r3, r7
 8006c58:	f7fd fa2e 	bl	80040b8 <__aeabi_dcmpgt>
 8006c5c:	b908      	cbnz	r0, 8006c62 <_dtoa_r+0xd7a>
 8006c5e:	e6fa      	b.n	8006a56 <_dtoa_r+0xb6e>
 8006c60:	4615      	mov	r5, r2
 8006c62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c66:	2b30      	cmp	r3, #48	; 0x30
 8006c68:	f105 32ff 	add.w	r2, r5, #4294967295
 8006c6c:	d0f8      	beq.n	8006c60 <_dtoa_r+0xd78>
 8006c6e:	e539      	b.n	80066e4 <_dtoa_r+0x7fc>
 8006c70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c72:	9304      	str	r3, [sp, #16]
 8006c74:	f7ff baf1 	b.w	800625a <_dtoa_r+0x372>
 8006c78:	f1ba 0f00 	cmp.w	sl, #0
 8006c7c:	f47f ad7c 	bne.w	8006778 <_dtoa_r+0x890>
 8006c80:	e662      	b.n	8006948 <_dtoa_r+0xa60>
 8006c82:	bf00      	nop
 8006c84:	401c0000 	.word	0x401c0000
 8006c88:	40140000 	.word	0x40140000
 8006c8c:	08009148 	.word	0x08009148
 8006c90:	08009210 	.word	0x08009210
 8006c94:	40240000 	.word	0x40240000
 8006c98:	3fe00000 	.word	0x3fe00000
 8006c9c:	2b39      	cmp	r3, #57	; 0x39
 8006c9e:	46d3      	mov	fp, sl
 8006ca0:	469a      	mov	sl, r3
 8006ca2:	d0c9      	beq.n	8006c38 <_dtoa_r+0xd50>
 8006ca4:	f1bb 0f00 	cmp.w	fp, #0
 8006ca8:	f73f aebd 	bgt.w	8006a26 <_dtoa_r+0xb3e>
 8006cac:	e6bd      	b.n	8006a2a <_dtoa_r+0xb42>
 8006cae:	f47f aebc 	bne.w	8006a2a <_dtoa_r+0xb42>
 8006cb2:	f01a 0f01 	tst.w	sl, #1
 8006cb6:	f43f aeb8 	beq.w	8006a2a <_dtoa_r+0xb42>
 8006cba:	e6b0      	b.n	8006a1e <_dtoa_r+0xb36>
 8006cbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	dc25      	bgt.n	8006d0e <_dtoa_r+0xe26>
 8006cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cc4:	e60d      	b.n	80068e2 <_dtoa_r+0x9fa>
 8006cc6:	f04f 0a02 	mov.w	sl, #2
 8006cca:	e469      	b.n	80065a0 <_dtoa_r+0x6b8>
 8006ccc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	dc1d      	bgt.n	8006d0e <_dtoa_r+0xe26>
 8006cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cd4:	e56d      	b.n	80067b2 <_dtoa_r+0x8ca>
 8006cd6:	2400      	movs	r4, #0
 8006cd8:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8006cdc:	4621      	mov	r1, r4
 8006cde:	4648      	mov	r0, r9
 8006ce0:	f000 fde6 	bl	80078b0 <_Balloc>
 8006ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce8:	9306      	str	r3, [sp, #24]
 8006cea:	930c      	str	r3, [sp, #48]	; 0x30
 8006cec:	2301      	movs	r3, #1
 8006cee:	9007      	str	r0, [sp, #28]
 8006cf0:	9423      	str	r4, [sp, #140]	; 0x8c
 8006cf2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8006cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf8:	f7ff b9fc 	b.w	80060f4 <_dtoa_r+0x20c>
 8006cfc:	f43f ab48 	beq.w	8006390 <_dtoa_r+0x4a8>
 8006d00:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8006d04:	f7ff bb3f 	b.w	8006386 <_dtoa_r+0x49e>
 8006d08:	2501      	movs	r5, #1
 8006d0a:	f7ff b9bd 	b.w	8006088 <_dtoa_r+0x1a0>
 8006d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d10:	9306      	str	r3, [sp, #24]
 8006d12:	e5ee      	b.n	80068f2 <_dtoa_r+0xa0a>

08006d14 <_cleanup_r>:
 8006d14:	4901      	ldr	r1, [pc, #4]	; (8006d1c <_cleanup_r+0x8>)
 8006d16:	f000 ba07 	b.w	8007128 <_fwalk_reent>
 8006d1a:	bf00      	nop
 8006d1c:	080085f1 	.word	0x080085f1

08006d20 <__sinit.part.1>:
 8006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	4b35      	ldr	r3, [pc, #212]	; (8006dfc <__sinit.part.1+0xdc>)
 8006d26:	6845      	ldr	r5, [r0, #4]
 8006d28:	63c3      	str	r3, [r0, #60]	; 0x3c
 8006d2a:	2400      	movs	r4, #0
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8006d32:	2304      	movs	r3, #4
 8006d34:	2103      	movs	r1, #3
 8006d36:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8006d3a:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8006d3e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8006d42:	b083      	sub	sp, #12
 8006d44:	602c      	str	r4, [r5, #0]
 8006d46:	606c      	str	r4, [r5, #4]
 8006d48:	60ac      	str	r4, [r5, #8]
 8006d4a:	666c      	str	r4, [r5, #100]	; 0x64
 8006d4c:	81ec      	strh	r4, [r5, #14]
 8006d4e:	612c      	str	r4, [r5, #16]
 8006d50:	616c      	str	r4, [r5, #20]
 8006d52:	61ac      	str	r4, [r5, #24]
 8006d54:	81ab      	strh	r3, [r5, #12]
 8006d56:	4621      	mov	r1, r4
 8006d58:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	f7fd fadb 	bl	8004318 <memset>
 8006d62:	68be      	ldr	r6, [r7, #8]
 8006d64:	f8df b098 	ldr.w	fp, [pc, #152]	; 8006e00 <__sinit.part.1+0xe0>
 8006d68:	f8df a098 	ldr.w	sl, [pc, #152]	; 8006e04 <__sinit.part.1+0xe4>
 8006d6c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8006e08 <__sinit.part.1+0xe8>
 8006d70:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006e0c <__sinit.part.1+0xec>
 8006d74:	f8c5 b020 	str.w	fp, [r5, #32]
 8006d78:	2301      	movs	r3, #1
 8006d7a:	2209      	movs	r2, #9
 8006d7c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8006d80:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8006d84:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8006d88:	61ed      	str	r5, [r5, #28]
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	81f3      	strh	r3, [r6, #14]
 8006d8e:	81b2      	strh	r2, [r6, #12]
 8006d90:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8006d94:	6034      	str	r4, [r6, #0]
 8006d96:	6074      	str	r4, [r6, #4]
 8006d98:	60b4      	str	r4, [r6, #8]
 8006d9a:	6674      	str	r4, [r6, #100]	; 0x64
 8006d9c:	6134      	str	r4, [r6, #16]
 8006d9e:	6174      	str	r4, [r6, #20]
 8006da0:	61b4      	str	r4, [r6, #24]
 8006da2:	2208      	movs	r2, #8
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	f7fd fab7 	bl	8004318 <memset>
 8006daa:	68fd      	ldr	r5, [r7, #12]
 8006dac:	61f6      	str	r6, [r6, #28]
 8006dae:	2012      	movs	r0, #18
 8006db0:	2202      	movs	r2, #2
 8006db2:	f8c6 b020 	str.w	fp, [r6, #32]
 8006db6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8006dba:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8006dbe:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	81a8      	strh	r0, [r5, #12]
 8006dc6:	81ea      	strh	r2, [r5, #14]
 8006dc8:	602c      	str	r4, [r5, #0]
 8006dca:	606c      	str	r4, [r5, #4]
 8006dcc:	60ac      	str	r4, [r5, #8]
 8006dce:	666c      	str	r4, [r5, #100]	; 0x64
 8006dd0:	612c      	str	r4, [r5, #16]
 8006dd2:	616c      	str	r4, [r5, #20]
 8006dd4:	61ac      	str	r4, [r5, #24]
 8006dd6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8006dda:	2208      	movs	r2, #8
 8006ddc:	f7fd fa9c 	bl	8004318 <memset>
 8006de0:	9b01      	ldr	r3, [sp, #4]
 8006de2:	61ed      	str	r5, [r5, #28]
 8006de4:	f8c5 b020 	str.w	fp, [r5, #32]
 8006de8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8006dec:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8006df0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8006df4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006df6:	b003      	add	sp, #12
 8006df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfc:	08006d15 	.word	0x08006d15
 8006e00:	080082d5 	.word	0x080082d5
 8006e04:	080082f9 	.word	0x080082f9
 8006e08:	08008335 	.word	0x08008335
 8006e0c:	08008355 	.word	0x08008355

08006e10 <__sinit>:
 8006e10:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006e12:	b103      	cbz	r3, 8006e16 <__sinit+0x6>
 8006e14:	4770      	bx	lr
 8006e16:	f7ff bf83 	b.w	8006d20 <__sinit.part.1>
 8006e1a:	bf00      	nop

08006e1c <__sfp_lock_acquire>:
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop

08006e20 <__sfp_lock_release>:
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop

08006e24 <__sfvwrite_r>:
 8006e24:	6893      	ldr	r3, [r2, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d076      	beq.n	8006f18 <__sfvwrite_r+0xf4>
 8006e2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2e:	898b      	ldrh	r3, [r1, #12]
 8006e30:	b085      	sub	sp, #20
 8006e32:	460c      	mov	r4, r1
 8006e34:	0719      	lsls	r1, r3, #28
 8006e36:	9001      	str	r0, [sp, #4]
 8006e38:	4616      	mov	r6, r2
 8006e3a:	d529      	bpl.n	8006e90 <__sfvwrite_r+0x6c>
 8006e3c:	6922      	ldr	r2, [r4, #16]
 8006e3e:	b33a      	cbz	r2, 8006e90 <__sfvwrite_r+0x6c>
 8006e40:	f003 0802 	and.w	r8, r3, #2
 8006e44:	fa1f f088 	uxth.w	r0, r8
 8006e48:	6835      	ldr	r5, [r6, #0]
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d02f      	beq.n	8006eae <__sfvwrite_r+0x8a>
 8006e4e:	f04f 0900 	mov.w	r9, #0
 8006e52:	4fb4      	ldr	r7, [pc, #720]	; (8007124 <__sfvwrite_r+0x300>)
 8006e54:	46c8      	mov	r8, r9
 8006e56:	46b2      	mov	sl, r6
 8006e58:	45b8      	cmp	r8, r7
 8006e5a:	4643      	mov	r3, r8
 8006e5c:	464a      	mov	r2, r9
 8006e5e:	bf28      	it	cs
 8006e60:	463b      	movcs	r3, r7
 8006e62:	9801      	ldr	r0, [sp, #4]
 8006e64:	f1b8 0f00 	cmp.w	r8, #0
 8006e68:	d050      	beq.n	8006f0c <__sfvwrite_r+0xe8>
 8006e6a:	69e1      	ldr	r1, [r4, #28]
 8006e6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e6e:	47b0      	blx	r6
 8006e70:	2800      	cmp	r0, #0
 8006e72:	dd71      	ble.n	8006f58 <__sfvwrite_r+0x134>
 8006e74:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006e78:	1a1b      	subs	r3, r3, r0
 8006e7a:	4481      	add	r9, r0
 8006e7c:	ebc0 0808 	rsb	r8, r0, r8
 8006e80:	f8ca 3008 	str.w	r3, [sl, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e7      	bne.n	8006e58 <__sfvwrite_r+0x34>
 8006e88:	2000      	movs	r0, #0
 8006e8a:	b005      	add	sp, #20
 8006e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e90:	4621      	mov	r1, r4
 8006e92:	9801      	ldr	r0, [sp, #4]
 8006e94:	f001 fb06 	bl	80084a4 <__swsetup_r>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	f040 813a 	bne.w	8007112 <__sfvwrite_r+0x2ee>
 8006e9e:	89a3      	ldrh	r3, [r4, #12]
 8006ea0:	6835      	ldr	r5, [r6, #0]
 8006ea2:	f003 0802 	and.w	r8, r3, #2
 8006ea6:	fa1f f088 	uxth.w	r0, r8
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d1cf      	bne.n	8006e4e <__sfvwrite_r+0x2a>
 8006eae:	f013 0901 	ands.w	r9, r3, #1
 8006eb2:	d15b      	bne.n	8006f6c <__sfvwrite_r+0x148>
 8006eb4:	464f      	mov	r7, r9
 8006eb6:	9602      	str	r6, [sp, #8]
 8006eb8:	b31f      	cbz	r7, 8006f02 <__sfvwrite_r+0xde>
 8006eba:	059a      	lsls	r2, r3, #22
 8006ebc:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8006ec0:	d52c      	bpl.n	8006f1c <__sfvwrite_r+0xf8>
 8006ec2:	4547      	cmp	r7, r8
 8006ec4:	46c2      	mov	sl, r8
 8006ec6:	f0c0 80a4 	bcc.w	8007012 <__sfvwrite_r+0x1ee>
 8006eca:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006ece:	f040 80b1 	bne.w	8007034 <__sfvwrite_r+0x210>
 8006ed2:	6820      	ldr	r0, [r4, #0]
 8006ed4:	4652      	mov	r2, sl
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	f000 fc82 	bl	80077e0 <memmove>
 8006edc:	68a0      	ldr	r0, [r4, #8]
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	ebc8 0000 	rsb	r0, r8, r0
 8006ee4:	4453      	add	r3, sl
 8006ee6:	60a0      	str	r0, [r4, #8]
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	4638      	mov	r0, r7
 8006eec:	9a02      	ldr	r2, [sp, #8]
 8006eee:	6893      	ldr	r3, [r2, #8]
 8006ef0:	1a1b      	subs	r3, r3, r0
 8006ef2:	4481      	add	r9, r0
 8006ef4:	1a3f      	subs	r7, r7, r0
 8006ef6:	6093      	str	r3, [r2, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0c5      	beq.n	8006e88 <__sfvwrite_r+0x64>
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	2f00      	cmp	r7, #0
 8006f00:	d1db      	bne.n	8006eba <__sfvwrite_r+0x96>
 8006f02:	f8d5 9000 	ldr.w	r9, [r5]
 8006f06:	686f      	ldr	r7, [r5, #4]
 8006f08:	3508      	adds	r5, #8
 8006f0a:	e7d5      	b.n	8006eb8 <__sfvwrite_r+0x94>
 8006f0c:	f8d5 9000 	ldr.w	r9, [r5]
 8006f10:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006f14:	3508      	adds	r5, #8
 8006f16:	e79f      	b.n	8006e58 <__sfvwrite_r+0x34>
 8006f18:	2000      	movs	r0, #0
 8006f1a:	4770      	bx	lr
 8006f1c:	6820      	ldr	r0, [r4, #0]
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	4298      	cmp	r0, r3
 8006f22:	d803      	bhi.n	8006f2c <__sfvwrite_r+0x108>
 8006f24:	6961      	ldr	r1, [r4, #20]
 8006f26:	428f      	cmp	r7, r1
 8006f28:	f080 80b7 	bcs.w	800709a <__sfvwrite_r+0x276>
 8006f2c:	45b8      	cmp	r8, r7
 8006f2e:	bf28      	it	cs
 8006f30:	46b8      	movcs	r8, r7
 8006f32:	4642      	mov	r2, r8
 8006f34:	4649      	mov	r1, r9
 8006f36:	f000 fc53 	bl	80077e0 <memmove>
 8006f3a:	68a3      	ldr	r3, [r4, #8]
 8006f3c:	6822      	ldr	r2, [r4, #0]
 8006f3e:	ebc8 0303 	rsb	r3, r8, r3
 8006f42:	4442      	add	r2, r8
 8006f44:	60a3      	str	r3, [r4, #8]
 8006f46:	6022      	str	r2, [r4, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d149      	bne.n	8006fe0 <__sfvwrite_r+0x1bc>
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	9801      	ldr	r0, [sp, #4]
 8006f50:	f001 fc34 	bl	80087bc <_fflush_r>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d043      	beq.n	8006fe0 <__sfvwrite_r+0x1bc>
 8006f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f60:	f04f 30ff 	mov.w	r0, #4294967295
 8006f64:	81a3      	strh	r3, [r4, #12]
 8006f66:	b005      	add	sp, #20
 8006f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6c:	4680      	mov	r8, r0
 8006f6e:	9002      	str	r0, [sp, #8]
 8006f70:	4682      	mov	sl, r0
 8006f72:	4681      	mov	r9, r0
 8006f74:	f1b9 0f00 	cmp.w	r9, #0
 8006f78:	d02a      	beq.n	8006fd0 <__sfvwrite_r+0x1ac>
 8006f7a:	9b02      	ldr	r3, [sp, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d04c      	beq.n	800701a <__sfvwrite_r+0x1f6>
 8006f80:	6820      	ldr	r0, [r4, #0]
 8006f82:	6923      	ldr	r3, [r4, #16]
 8006f84:	6962      	ldr	r2, [r4, #20]
 8006f86:	45c8      	cmp	r8, r9
 8006f88:	46c3      	mov	fp, r8
 8006f8a:	bf28      	it	cs
 8006f8c:	46cb      	movcs	fp, r9
 8006f8e:	4298      	cmp	r0, r3
 8006f90:	465f      	mov	r7, fp
 8006f92:	d904      	bls.n	8006f9e <__sfvwrite_r+0x17a>
 8006f94:	68a3      	ldr	r3, [r4, #8]
 8006f96:	4413      	add	r3, r2
 8006f98:	459b      	cmp	fp, r3
 8006f9a:	f300 8090 	bgt.w	80070be <__sfvwrite_r+0x29a>
 8006f9e:	4593      	cmp	fp, r2
 8006fa0:	db20      	blt.n	8006fe4 <__sfvwrite_r+0x1c0>
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006fa6:	69e1      	ldr	r1, [r4, #28]
 8006fa8:	9801      	ldr	r0, [sp, #4]
 8006faa:	4652      	mov	r2, sl
 8006fac:	47b8      	blx	r7
 8006fae:	1e07      	subs	r7, r0, #0
 8006fb0:	ddd2      	ble.n	8006f58 <__sfvwrite_r+0x134>
 8006fb2:	ebb8 0807 	subs.w	r8, r8, r7
 8006fb6:	d023      	beq.n	8007000 <__sfvwrite_r+0x1dc>
 8006fb8:	68b3      	ldr	r3, [r6, #8]
 8006fba:	1bdb      	subs	r3, r3, r7
 8006fbc:	44ba      	add	sl, r7
 8006fbe:	ebc7 0909 	rsb	r9, r7, r9
 8006fc2:	60b3      	str	r3, [r6, #8]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f43f af5f 	beq.w	8006e88 <__sfvwrite_r+0x64>
 8006fca:	f1b9 0f00 	cmp.w	r9, #0
 8006fce:	d1d4      	bne.n	8006f7a <__sfvwrite_r+0x156>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f8d5 a000 	ldr.w	sl, [r5]
 8006fd6:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8006fda:	9302      	str	r3, [sp, #8]
 8006fdc:	3508      	adds	r5, #8
 8006fde:	e7c9      	b.n	8006f74 <__sfvwrite_r+0x150>
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	e783      	b.n	8006eec <__sfvwrite_r+0xc8>
 8006fe4:	465a      	mov	r2, fp
 8006fe6:	4651      	mov	r1, sl
 8006fe8:	f000 fbfa 	bl	80077e0 <memmove>
 8006fec:	68a2      	ldr	r2, [r4, #8]
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	ebcb 0202 	rsb	r2, fp, r2
 8006ff4:	445b      	add	r3, fp
 8006ff6:	ebb8 0807 	subs.w	r8, r8, r7
 8006ffa:	60a2      	str	r2, [r4, #8]
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	d1db      	bne.n	8006fb8 <__sfvwrite_r+0x194>
 8007000:	4621      	mov	r1, r4
 8007002:	9801      	ldr	r0, [sp, #4]
 8007004:	f001 fbda 	bl	80087bc <_fflush_r>
 8007008:	2800      	cmp	r0, #0
 800700a:	d1a5      	bne.n	8006f58 <__sfvwrite_r+0x134>
 800700c:	f8cd 8008 	str.w	r8, [sp, #8]
 8007010:	e7d2      	b.n	8006fb8 <__sfvwrite_r+0x194>
 8007012:	6820      	ldr	r0, [r4, #0]
 8007014:	46b8      	mov	r8, r7
 8007016:	46ba      	mov	sl, r7
 8007018:	e75c      	b.n	8006ed4 <__sfvwrite_r+0xb0>
 800701a:	464a      	mov	r2, r9
 800701c:	210a      	movs	r1, #10
 800701e:	4650      	mov	r0, sl
 8007020:	f000 fb8e 	bl	8007740 <memchr>
 8007024:	2800      	cmp	r0, #0
 8007026:	d06f      	beq.n	8007108 <__sfvwrite_r+0x2e4>
 8007028:	3001      	adds	r0, #1
 800702a:	2301      	movs	r3, #1
 800702c:	ebca 0800 	rsb	r8, sl, r0
 8007030:	9302      	str	r3, [sp, #8]
 8007032:	e7a5      	b.n	8006f80 <__sfvwrite_r+0x15c>
 8007034:	6962      	ldr	r2, [r4, #20]
 8007036:	6820      	ldr	r0, [r4, #0]
 8007038:	6921      	ldr	r1, [r4, #16]
 800703a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 800703e:	ebc1 0a00 	rsb	sl, r1, r0
 8007042:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 8007046:	f10a 0001 	add.w	r0, sl, #1
 800704a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800704e:	4438      	add	r0, r7
 8007050:	4540      	cmp	r0, r8
 8007052:	4642      	mov	r2, r8
 8007054:	bf84      	itt	hi
 8007056:	4680      	movhi	r8, r0
 8007058:	4642      	movhi	r2, r8
 800705a:	055b      	lsls	r3, r3, #21
 800705c:	d542      	bpl.n	80070e4 <__sfvwrite_r+0x2c0>
 800705e:	4611      	mov	r1, r2
 8007060:	9801      	ldr	r0, [sp, #4]
 8007062:	f000 f899 	bl	8007198 <_malloc_r>
 8007066:	4683      	mov	fp, r0
 8007068:	2800      	cmp	r0, #0
 800706a:	d055      	beq.n	8007118 <__sfvwrite_r+0x2f4>
 800706c:	4652      	mov	r2, sl
 800706e:	6921      	ldr	r1, [r4, #16]
 8007070:	f7fd f8b8 	bl	80041e4 <memcpy>
 8007074:	89a3      	ldrh	r3, [r4, #12]
 8007076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800707a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707e:	81a3      	strh	r3, [r4, #12]
 8007080:	ebca 0308 	rsb	r3, sl, r8
 8007084:	eb0b 000a 	add.w	r0, fp, sl
 8007088:	f8c4 8014 	str.w	r8, [r4, #20]
 800708c:	f8c4 b010 	str.w	fp, [r4, #16]
 8007090:	6020      	str	r0, [r4, #0]
 8007092:	60a3      	str	r3, [r4, #8]
 8007094:	46b8      	mov	r8, r7
 8007096:	46ba      	mov	sl, r7
 8007098:	e71c      	b.n	8006ed4 <__sfvwrite_r+0xb0>
 800709a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800709e:	42bb      	cmp	r3, r7
 80070a0:	bf28      	it	cs
 80070a2:	463b      	movcs	r3, r7
 80070a4:	464a      	mov	r2, r9
 80070a6:	fb93 f3f1 	sdiv	r3, r3, r1
 80070aa:	9801      	ldr	r0, [sp, #4]
 80070ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070ae:	fb01 f303 	mul.w	r3, r1, r3
 80070b2:	69e1      	ldr	r1, [r4, #28]
 80070b4:	47b0      	blx	r6
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f73f af18 	bgt.w	8006eec <__sfvwrite_r+0xc8>
 80070bc:	e74c      	b.n	8006f58 <__sfvwrite_r+0x134>
 80070be:	461a      	mov	r2, r3
 80070c0:	4651      	mov	r1, sl
 80070c2:	9303      	str	r3, [sp, #12]
 80070c4:	f000 fb8c 	bl	80077e0 <memmove>
 80070c8:	6822      	ldr	r2, [r4, #0]
 80070ca:	9b03      	ldr	r3, [sp, #12]
 80070cc:	9801      	ldr	r0, [sp, #4]
 80070ce:	441a      	add	r2, r3
 80070d0:	6022      	str	r2, [r4, #0]
 80070d2:	4621      	mov	r1, r4
 80070d4:	f001 fb72 	bl	80087bc <_fflush_r>
 80070d8:	9b03      	ldr	r3, [sp, #12]
 80070da:	2800      	cmp	r0, #0
 80070dc:	f47f af3c 	bne.w	8006f58 <__sfvwrite_r+0x134>
 80070e0:	461f      	mov	r7, r3
 80070e2:	e766      	b.n	8006fb2 <__sfvwrite_r+0x18e>
 80070e4:	9801      	ldr	r0, [sp, #4]
 80070e6:	f000 fef3 	bl	8007ed0 <_realloc_r>
 80070ea:	4683      	mov	fp, r0
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d1c7      	bne.n	8007080 <__sfvwrite_r+0x25c>
 80070f0:	9d01      	ldr	r5, [sp, #4]
 80070f2:	6921      	ldr	r1, [r4, #16]
 80070f4:	4628      	mov	r0, r5
 80070f6:	f001 fbc5 	bl	8008884 <_free_r>
 80070fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fe:	220c      	movs	r2, #12
 8007100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007104:	602a      	str	r2, [r5, #0]
 8007106:	e729      	b.n	8006f5c <__sfvwrite_r+0x138>
 8007108:	2301      	movs	r3, #1
 800710a:	f109 0801 	add.w	r8, r9, #1
 800710e:	9302      	str	r3, [sp, #8]
 8007110:	e736      	b.n	8006f80 <__sfvwrite_r+0x15c>
 8007112:	f04f 30ff 	mov.w	r0, #4294967295
 8007116:	e6b8      	b.n	8006e8a <__sfvwrite_r+0x66>
 8007118:	9a01      	ldr	r2, [sp, #4]
 800711a:	230c      	movs	r3, #12
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007122:	e71b      	b.n	8006f5c <__sfvwrite_r+0x138>
 8007124:	7ffffc00 	.word	0x7ffffc00

08007128 <_fwalk_reent>:
 8007128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800712c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8007130:	d01f      	beq.n	8007172 <_fwalk_reent+0x4a>
 8007132:	4688      	mov	r8, r1
 8007134:	4606      	mov	r6, r0
 8007136:	f04f 0900 	mov.w	r9, #0
 800713a:	687d      	ldr	r5, [r7, #4]
 800713c:	68bc      	ldr	r4, [r7, #8]
 800713e:	3d01      	subs	r5, #1
 8007140:	d411      	bmi.n	8007166 <_fwalk_reent+0x3e>
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	2b01      	cmp	r3, #1
 8007146:	f105 35ff 	add.w	r5, r5, #4294967295
 800714a:	d908      	bls.n	800715e <_fwalk_reent+0x36>
 800714c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8007150:	3301      	adds	r3, #1
 8007152:	4621      	mov	r1, r4
 8007154:	4630      	mov	r0, r6
 8007156:	d002      	beq.n	800715e <_fwalk_reent+0x36>
 8007158:	47c0      	blx	r8
 800715a:	ea49 0900 	orr.w	r9, r9, r0
 800715e:	1c6b      	adds	r3, r5, #1
 8007160:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8007164:	d1ed      	bne.n	8007142 <_fwalk_reent+0x1a>
 8007166:	683f      	ldr	r7, [r7, #0]
 8007168:	2f00      	cmp	r7, #0
 800716a:	d1e6      	bne.n	800713a <_fwalk_reent+0x12>
 800716c:	4648      	mov	r0, r9
 800716e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007172:	46b9      	mov	r9, r7
 8007174:	4648      	mov	r0, r9
 8007176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800717a:	bf00      	nop

0800717c <_localeconv_r>:
 800717c:	4a04      	ldr	r2, [pc, #16]	; (8007190 <_localeconv_r+0x14>)
 800717e:	4b05      	ldr	r3, [pc, #20]	; (8007194 <_localeconv_r+0x18>)
 8007180:	6812      	ldr	r2, [r2, #0]
 8007182:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8007184:	2800      	cmp	r0, #0
 8007186:	bf08      	it	eq
 8007188:	4618      	moveq	r0, r3
 800718a:	30f0      	adds	r0, #240	; 0xf0
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	20000468 	.word	0x20000468
 8007194:	2000046c 	.word	0x2000046c

08007198 <_malloc_r>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	f101 050b 	add.w	r5, r1, #11
 80071a0:	2d16      	cmp	r5, #22
 80071a2:	b083      	sub	sp, #12
 80071a4:	4606      	mov	r6, r0
 80071a6:	f240 809f 	bls.w	80072e8 <_malloc_r+0x150>
 80071aa:	f035 0507 	bics.w	r5, r5, #7
 80071ae:	f100 80bf 	bmi.w	8007330 <_malloc_r+0x198>
 80071b2:	42a9      	cmp	r1, r5
 80071b4:	f200 80bc 	bhi.w	8007330 <_malloc_r+0x198>
 80071b8:	f000 fb76 	bl	80078a8 <__malloc_lock>
 80071bc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80071c0:	f0c0 829c 	bcc.w	80076fc <_malloc_r+0x564>
 80071c4:	0a6b      	lsrs	r3, r5, #9
 80071c6:	f000 80ba 	beq.w	800733e <_malloc_r+0x1a6>
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	f200 8183 	bhi.w	80074d6 <_malloc_r+0x33e>
 80071d0:	09a8      	lsrs	r0, r5, #6
 80071d2:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 80071d6:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80071da:	3038      	adds	r0, #56	; 0x38
 80071dc:	4fc4      	ldr	r7, [pc, #784]	; (80074f0 <_malloc_r+0x358>)
 80071de:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80071e2:	f1a3 0108 	sub.w	r1, r3, #8
 80071e6:	685c      	ldr	r4, [r3, #4]
 80071e8:	42a1      	cmp	r1, r4
 80071ea:	d107      	bne.n	80071fc <_malloc_r+0x64>
 80071ec:	e0ac      	b.n	8007348 <_malloc_r+0x1b0>
 80071ee:	2a00      	cmp	r2, #0
 80071f0:	f280 80ac 	bge.w	800734c <_malloc_r+0x1b4>
 80071f4:	68e4      	ldr	r4, [r4, #12]
 80071f6:	42a1      	cmp	r1, r4
 80071f8:	f000 80a6 	beq.w	8007348 <_malloc_r+0x1b0>
 80071fc:	6863      	ldr	r3, [r4, #4]
 80071fe:	f023 0303 	bic.w	r3, r3, #3
 8007202:	1b5a      	subs	r2, r3, r5
 8007204:	2a0f      	cmp	r2, #15
 8007206:	ddf2      	ble.n	80071ee <_malloc_r+0x56>
 8007208:	49b9      	ldr	r1, [pc, #740]	; (80074f0 <_malloc_r+0x358>)
 800720a:	693c      	ldr	r4, [r7, #16]
 800720c:	f101 0e08 	add.w	lr, r1, #8
 8007210:	4574      	cmp	r4, lr
 8007212:	f000 81b3 	beq.w	800757c <_malloc_r+0x3e4>
 8007216:	6863      	ldr	r3, [r4, #4]
 8007218:	f023 0303 	bic.w	r3, r3, #3
 800721c:	1b5a      	subs	r2, r3, r5
 800721e:	2a0f      	cmp	r2, #15
 8007220:	f300 8199 	bgt.w	8007556 <_malloc_r+0x3be>
 8007224:	2a00      	cmp	r2, #0
 8007226:	f8c1 e014 	str.w	lr, [r1, #20]
 800722a:	f8c1 e010 	str.w	lr, [r1, #16]
 800722e:	f280 809e 	bge.w	800736e <_malloc_r+0x1d6>
 8007232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007236:	f080 8167 	bcs.w	8007508 <_malloc_r+0x370>
 800723a:	08db      	lsrs	r3, r3, #3
 800723c:	f103 0c01 	add.w	ip, r3, #1
 8007240:	2201      	movs	r2, #1
 8007242:	109b      	asrs	r3, r3, #2
 8007244:	fa02 f303 	lsl.w	r3, r2, r3
 8007248:	684a      	ldr	r2, [r1, #4]
 800724a:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 800724e:	f8c4 8008 	str.w	r8, [r4, #8]
 8007252:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 8007256:	431a      	orrs	r2, r3
 8007258:	f1a9 0308 	sub.w	r3, r9, #8
 800725c:	60e3      	str	r3, [r4, #12]
 800725e:	604a      	str	r2, [r1, #4]
 8007260:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8007264:	f8c8 400c 	str.w	r4, [r8, #12]
 8007268:	1083      	asrs	r3, r0, #2
 800726a:	2401      	movs	r4, #1
 800726c:	409c      	lsls	r4, r3
 800726e:	4294      	cmp	r4, r2
 8007270:	f200 808a 	bhi.w	8007388 <_malloc_r+0x1f0>
 8007274:	4214      	tst	r4, r2
 8007276:	d106      	bne.n	8007286 <_malloc_r+0xee>
 8007278:	f020 0003 	bic.w	r0, r0, #3
 800727c:	0064      	lsls	r4, r4, #1
 800727e:	4214      	tst	r4, r2
 8007280:	f100 0004 	add.w	r0, r0, #4
 8007284:	d0fa      	beq.n	800727c <_malloc_r+0xe4>
 8007286:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800728a:	46cc      	mov	ip, r9
 800728c:	4680      	mov	r8, r0
 800728e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8007292:	458c      	cmp	ip, r1
 8007294:	d107      	bne.n	80072a6 <_malloc_r+0x10e>
 8007296:	e173      	b.n	8007580 <_malloc_r+0x3e8>
 8007298:	2a00      	cmp	r2, #0
 800729a:	f280 8181 	bge.w	80075a0 <_malloc_r+0x408>
 800729e:	68c9      	ldr	r1, [r1, #12]
 80072a0:	458c      	cmp	ip, r1
 80072a2:	f000 816d 	beq.w	8007580 <_malloc_r+0x3e8>
 80072a6:	684b      	ldr	r3, [r1, #4]
 80072a8:	f023 0303 	bic.w	r3, r3, #3
 80072ac:	1b5a      	subs	r2, r3, r5
 80072ae:	2a0f      	cmp	r2, #15
 80072b0:	ddf2      	ble.n	8007298 <_malloc_r+0x100>
 80072b2:	460c      	mov	r4, r1
 80072b4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80072b8:	f854 8f08 	ldr.w	r8, [r4, #8]!
 80072bc:	194b      	adds	r3, r1, r5
 80072be:	f045 0501 	orr.w	r5, r5, #1
 80072c2:	604d      	str	r5, [r1, #4]
 80072c4:	f042 0101 	orr.w	r1, r2, #1
 80072c8:	f8c8 c00c 	str.w	ip, [r8, #12]
 80072cc:	4630      	mov	r0, r6
 80072ce:	f8cc 8008 	str.w	r8, [ip, #8]
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	613b      	str	r3, [r7, #16]
 80072d6:	f8c3 e00c 	str.w	lr, [r3, #12]
 80072da:	f8c3 e008 	str.w	lr, [r3, #8]
 80072de:	6059      	str	r1, [r3, #4]
 80072e0:	509a      	str	r2, [r3, r2]
 80072e2:	f000 fae3 	bl	80078ac <__malloc_unlock>
 80072e6:	e01f      	b.n	8007328 <_malloc_r+0x190>
 80072e8:	2910      	cmp	r1, #16
 80072ea:	d821      	bhi.n	8007330 <_malloc_r+0x198>
 80072ec:	f000 fadc 	bl	80078a8 <__malloc_lock>
 80072f0:	2510      	movs	r5, #16
 80072f2:	2306      	movs	r3, #6
 80072f4:	2002      	movs	r0, #2
 80072f6:	4f7e      	ldr	r7, [pc, #504]	; (80074f0 <_malloc_r+0x358>)
 80072f8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80072fc:	f1a3 0208 	sub.w	r2, r3, #8
 8007300:	685c      	ldr	r4, [r3, #4]
 8007302:	4294      	cmp	r4, r2
 8007304:	f000 8145 	beq.w	8007592 <_malloc_r+0x3fa>
 8007308:	6863      	ldr	r3, [r4, #4]
 800730a:	68e1      	ldr	r1, [r4, #12]
 800730c:	68a5      	ldr	r5, [r4, #8]
 800730e:	f023 0303 	bic.w	r3, r3, #3
 8007312:	4423      	add	r3, r4
 8007314:	4630      	mov	r0, r6
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	60e9      	str	r1, [r5, #12]
 800731a:	f042 0201 	orr.w	r2, r2, #1
 800731e:	608d      	str	r5, [r1, #8]
 8007320:	605a      	str	r2, [r3, #4]
 8007322:	f000 fac3 	bl	80078ac <__malloc_unlock>
 8007326:	3408      	adds	r4, #8
 8007328:	4620      	mov	r0, r4
 800732a:	b003      	add	sp, #12
 800732c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007330:	2400      	movs	r4, #0
 8007332:	230c      	movs	r3, #12
 8007334:	4620      	mov	r0, r4
 8007336:	6033      	str	r3, [r6, #0]
 8007338:	b003      	add	sp, #12
 800733a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733e:	2380      	movs	r3, #128	; 0x80
 8007340:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8007344:	203f      	movs	r0, #63	; 0x3f
 8007346:	e749      	b.n	80071dc <_malloc_r+0x44>
 8007348:	4670      	mov	r0, lr
 800734a:	e75d      	b.n	8007208 <_malloc_r+0x70>
 800734c:	4423      	add	r3, r4
 800734e:	68e1      	ldr	r1, [r4, #12]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	68a5      	ldr	r5, [r4, #8]
 8007354:	f042 0201 	orr.w	r2, r2, #1
 8007358:	60e9      	str	r1, [r5, #12]
 800735a:	4630      	mov	r0, r6
 800735c:	608d      	str	r5, [r1, #8]
 800735e:	605a      	str	r2, [r3, #4]
 8007360:	f000 faa4 	bl	80078ac <__malloc_unlock>
 8007364:	3408      	adds	r4, #8
 8007366:	4620      	mov	r0, r4
 8007368:	b003      	add	sp, #12
 800736a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736e:	4423      	add	r3, r4
 8007370:	4630      	mov	r0, r6
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	f042 0201 	orr.w	r2, r2, #1
 8007378:	605a      	str	r2, [r3, #4]
 800737a:	f000 fa97 	bl	80078ac <__malloc_unlock>
 800737e:	3408      	adds	r4, #8
 8007380:	4620      	mov	r0, r4
 8007382:	b003      	add	sp, #12
 8007384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007388:	68bc      	ldr	r4, [r7, #8]
 800738a:	6863      	ldr	r3, [r4, #4]
 800738c:	f023 0803 	bic.w	r8, r3, #3
 8007390:	45a8      	cmp	r8, r5
 8007392:	d304      	bcc.n	800739e <_malloc_r+0x206>
 8007394:	ebc5 0308 	rsb	r3, r5, r8
 8007398:	2b0f      	cmp	r3, #15
 800739a:	f300 808c 	bgt.w	80074b6 <_malloc_r+0x31e>
 800739e:	4b55      	ldr	r3, [pc, #340]	; (80074f4 <_malloc_r+0x35c>)
 80073a0:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8007504 <_malloc_r+0x36c>
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	f8d9 3000 	ldr.w	r3, [r9]
 80073aa:	3301      	adds	r3, #1
 80073ac:	442a      	add	r2, r5
 80073ae:	eb04 0a08 	add.w	sl, r4, r8
 80073b2:	f000 8160 	beq.w	8007676 <_malloc_r+0x4de>
 80073b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80073ba:	320f      	adds	r2, #15
 80073bc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80073c0:	f022 020f 	bic.w	r2, r2, #15
 80073c4:	4611      	mov	r1, r2
 80073c6:	4630      	mov	r0, r6
 80073c8:	9201      	str	r2, [sp, #4]
 80073ca:	f000 ff71 	bl	80082b0 <_sbrk_r>
 80073ce:	f1b0 3fff 	cmp.w	r0, #4294967295
 80073d2:	4683      	mov	fp, r0
 80073d4:	9a01      	ldr	r2, [sp, #4]
 80073d6:	f000 8158 	beq.w	800768a <_malloc_r+0x4f2>
 80073da:	4582      	cmp	sl, r0
 80073dc:	f200 80fc 	bhi.w	80075d8 <_malloc_r+0x440>
 80073e0:	4b45      	ldr	r3, [pc, #276]	; (80074f8 <_malloc_r+0x360>)
 80073e2:	6819      	ldr	r1, [r3, #0]
 80073e4:	45da      	cmp	sl, fp
 80073e6:	4411      	add	r1, r2
 80073e8:	6019      	str	r1, [r3, #0]
 80073ea:	f000 8153 	beq.w	8007694 <_malloc_r+0x4fc>
 80073ee:	f8d9 0000 	ldr.w	r0, [r9]
 80073f2:	f8df e110 	ldr.w	lr, [pc, #272]	; 8007504 <_malloc_r+0x36c>
 80073f6:	3001      	adds	r0, #1
 80073f8:	bf1b      	ittet	ne
 80073fa:	ebca 0a0b 	rsbne	sl, sl, fp
 80073fe:	4451      	addne	r1, sl
 8007400:	f8ce b000 	streq.w	fp, [lr]
 8007404:	6019      	strne	r1, [r3, #0]
 8007406:	f01b 0107 	ands.w	r1, fp, #7
 800740a:	f000 8117 	beq.w	800763c <_malloc_r+0x4a4>
 800740e:	f1c1 0008 	rsb	r0, r1, #8
 8007412:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8007416:	4483      	add	fp, r0
 8007418:	3108      	adds	r1, #8
 800741a:	445a      	add	r2, fp
 800741c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007420:	ebc2 0901 	rsb	r9, r2, r1
 8007424:	4649      	mov	r1, r9
 8007426:	4630      	mov	r0, r6
 8007428:	9301      	str	r3, [sp, #4]
 800742a:	f000 ff41 	bl	80082b0 <_sbrk_r>
 800742e:	1c43      	adds	r3, r0, #1
 8007430:	9b01      	ldr	r3, [sp, #4]
 8007432:	f000 813f 	beq.w	80076b4 <_malloc_r+0x51c>
 8007436:	ebcb 0200 	rsb	r2, fp, r0
 800743a:	444a      	add	r2, r9
 800743c:	f042 0201 	orr.w	r2, r2, #1
 8007440:	6819      	ldr	r1, [r3, #0]
 8007442:	f8c7 b008 	str.w	fp, [r7, #8]
 8007446:	4449      	add	r1, r9
 8007448:	42bc      	cmp	r4, r7
 800744a:	f8cb 2004 	str.w	r2, [fp, #4]
 800744e:	6019      	str	r1, [r3, #0]
 8007450:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80074f8 <_malloc_r+0x360>
 8007454:	d016      	beq.n	8007484 <_malloc_r+0x2ec>
 8007456:	f1b8 0f0f 	cmp.w	r8, #15
 800745a:	f240 80fd 	bls.w	8007658 <_malloc_r+0x4c0>
 800745e:	6862      	ldr	r2, [r4, #4]
 8007460:	f1a8 030c 	sub.w	r3, r8, #12
 8007464:	f023 0307 	bic.w	r3, r3, #7
 8007468:	18e0      	adds	r0, r4, r3
 800746a:	f002 0201 	and.w	r2, r2, #1
 800746e:	f04f 0e05 	mov.w	lr, #5
 8007472:	431a      	orrs	r2, r3
 8007474:	2b0f      	cmp	r3, #15
 8007476:	6062      	str	r2, [r4, #4]
 8007478:	f8c0 e004 	str.w	lr, [r0, #4]
 800747c:	f8c0 e008 	str.w	lr, [r0, #8]
 8007480:	f200 811c 	bhi.w	80076bc <_malloc_r+0x524>
 8007484:	4b1d      	ldr	r3, [pc, #116]	; (80074fc <_malloc_r+0x364>)
 8007486:	68bc      	ldr	r4, [r7, #8]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	4291      	cmp	r1, r2
 800748c:	bf88      	it	hi
 800748e:	6019      	strhi	r1, [r3, #0]
 8007490:	4b1b      	ldr	r3, [pc, #108]	; (8007500 <_malloc_r+0x368>)
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	4291      	cmp	r1, r2
 8007496:	6862      	ldr	r2, [r4, #4]
 8007498:	bf88      	it	hi
 800749a:	6019      	strhi	r1, [r3, #0]
 800749c:	f022 0203 	bic.w	r2, r2, #3
 80074a0:	4295      	cmp	r5, r2
 80074a2:	eba2 0305 	sub.w	r3, r2, r5
 80074a6:	d801      	bhi.n	80074ac <_malloc_r+0x314>
 80074a8:	2b0f      	cmp	r3, #15
 80074aa:	dc04      	bgt.n	80074b6 <_malloc_r+0x31e>
 80074ac:	4630      	mov	r0, r6
 80074ae:	f000 f9fd 	bl	80078ac <__malloc_unlock>
 80074b2:	2400      	movs	r4, #0
 80074b4:	e738      	b.n	8007328 <_malloc_r+0x190>
 80074b6:	1962      	adds	r2, r4, r5
 80074b8:	f043 0301 	orr.w	r3, r3, #1
 80074bc:	f045 0501 	orr.w	r5, r5, #1
 80074c0:	6065      	str	r5, [r4, #4]
 80074c2:	4630      	mov	r0, r6
 80074c4:	60ba      	str	r2, [r7, #8]
 80074c6:	6053      	str	r3, [r2, #4]
 80074c8:	f000 f9f0 	bl	80078ac <__malloc_unlock>
 80074cc:	3408      	adds	r4, #8
 80074ce:	4620      	mov	r0, r4
 80074d0:	b003      	add	sp, #12
 80074d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d6:	2b14      	cmp	r3, #20
 80074d8:	d971      	bls.n	80075be <_malloc_r+0x426>
 80074da:	2b54      	cmp	r3, #84	; 0x54
 80074dc:	f200 80a4 	bhi.w	8007628 <_malloc_r+0x490>
 80074e0:	0b28      	lsrs	r0, r5, #12
 80074e2:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 80074e6:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80074ea:	306e      	adds	r0, #110	; 0x6e
 80074ec:	e676      	b.n	80071dc <_malloc_r+0x44>
 80074ee:	bf00      	nop
 80074f0:	200005d8 	.word	0x200005d8
 80074f4:	20000a7c 	.word	0x20000a7c
 80074f8:	20000a80 	.word	0x20000a80
 80074fc:	20000a78 	.word	0x20000a78
 8007500:	20000a74 	.word	0x20000a74
 8007504:	200009e4 	.word	0x200009e4
 8007508:	0a5a      	lsrs	r2, r3, #9
 800750a:	2a04      	cmp	r2, #4
 800750c:	d95e      	bls.n	80075cc <_malloc_r+0x434>
 800750e:	2a14      	cmp	r2, #20
 8007510:	f200 80b3 	bhi.w	800767a <_malloc_r+0x4e2>
 8007514:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8007518:	0049      	lsls	r1, r1, #1
 800751a:	325b      	adds	r2, #91	; 0x5b
 800751c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 8007520:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8007524:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8007704 <_malloc_r+0x56c>
 8007528:	f1ac 0c08 	sub.w	ip, ip, #8
 800752c:	458c      	cmp	ip, r1
 800752e:	f000 8088 	beq.w	8007642 <_malloc_r+0x4aa>
 8007532:	684a      	ldr	r2, [r1, #4]
 8007534:	f022 0203 	bic.w	r2, r2, #3
 8007538:	4293      	cmp	r3, r2
 800753a:	d202      	bcs.n	8007542 <_malloc_r+0x3aa>
 800753c:	6889      	ldr	r1, [r1, #8]
 800753e:	458c      	cmp	ip, r1
 8007540:	d1f7      	bne.n	8007532 <_malloc_r+0x39a>
 8007542:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	f8c4 c00c 	str.w	ip, [r4, #12]
 800754c:	60a1      	str	r1, [r4, #8]
 800754e:	f8cc 4008 	str.w	r4, [ip, #8]
 8007552:	60cc      	str	r4, [r1, #12]
 8007554:	e688      	b.n	8007268 <_malloc_r+0xd0>
 8007556:	1963      	adds	r3, r4, r5
 8007558:	f042 0701 	orr.w	r7, r2, #1
 800755c:	f045 0501 	orr.w	r5, r5, #1
 8007560:	6065      	str	r5, [r4, #4]
 8007562:	4630      	mov	r0, r6
 8007564:	614b      	str	r3, [r1, #20]
 8007566:	610b      	str	r3, [r1, #16]
 8007568:	f8c3 e00c 	str.w	lr, [r3, #12]
 800756c:	f8c3 e008 	str.w	lr, [r3, #8]
 8007570:	605f      	str	r7, [r3, #4]
 8007572:	509a      	str	r2, [r3, r2]
 8007574:	3408      	adds	r4, #8
 8007576:	f000 f999 	bl	80078ac <__malloc_unlock>
 800757a:	e6d5      	b.n	8007328 <_malloc_r+0x190>
 800757c:	684a      	ldr	r2, [r1, #4]
 800757e:	e673      	b.n	8007268 <_malloc_r+0xd0>
 8007580:	f108 0801 	add.w	r8, r8, #1
 8007584:	f018 0f03 	tst.w	r8, #3
 8007588:	f10c 0c08 	add.w	ip, ip, #8
 800758c:	f47f ae7f 	bne.w	800728e <_malloc_r+0xf6>
 8007590:	e030      	b.n	80075f4 <_malloc_r+0x45c>
 8007592:	68dc      	ldr	r4, [r3, #12]
 8007594:	42a3      	cmp	r3, r4
 8007596:	bf08      	it	eq
 8007598:	3002      	addeq	r0, #2
 800759a:	f43f ae35 	beq.w	8007208 <_malloc_r+0x70>
 800759e:	e6b3      	b.n	8007308 <_malloc_r+0x170>
 80075a0:	440b      	add	r3, r1
 80075a2:	460c      	mov	r4, r1
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	68c9      	ldr	r1, [r1, #12]
 80075a8:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80075ac:	f042 0201 	orr.w	r2, r2, #1
 80075b0:	605a      	str	r2, [r3, #4]
 80075b2:	4630      	mov	r0, r6
 80075b4:	60e9      	str	r1, [r5, #12]
 80075b6:	608d      	str	r5, [r1, #8]
 80075b8:	f000 f978 	bl	80078ac <__malloc_unlock>
 80075bc:	e6b4      	b.n	8007328 <_malloc_r+0x190>
 80075be:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 80075c2:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 80075c6:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80075ca:	e607      	b.n	80071dc <_malloc_r+0x44>
 80075cc:	099a      	lsrs	r2, r3, #6
 80075ce:	f102 0139 	add.w	r1, r2, #57	; 0x39
 80075d2:	0049      	lsls	r1, r1, #1
 80075d4:	3238      	adds	r2, #56	; 0x38
 80075d6:	e7a1      	b.n	800751c <_malloc_r+0x384>
 80075d8:	42bc      	cmp	r4, r7
 80075da:	4b4a      	ldr	r3, [pc, #296]	; (8007704 <_malloc_r+0x56c>)
 80075dc:	f43f af00 	beq.w	80073e0 <_malloc_r+0x248>
 80075e0:	689c      	ldr	r4, [r3, #8]
 80075e2:	6862      	ldr	r2, [r4, #4]
 80075e4:	f022 0203 	bic.w	r2, r2, #3
 80075e8:	e75a      	b.n	80074a0 <_malloc_r+0x308>
 80075ea:	f859 3908 	ldr.w	r3, [r9], #-8
 80075ee:	4599      	cmp	r9, r3
 80075f0:	f040 8082 	bne.w	80076f8 <_malloc_r+0x560>
 80075f4:	f010 0f03 	tst.w	r0, #3
 80075f8:	f100 30ff 	add.w	r0, r0, #4294967295
 80075fc:	d1f5      	bne.n	80075ea <_malloc_r+0x452>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	ea23 0304 	bic.w	r3, r3, r4
 8007604:	607b      	str	r3, [r7, #4]
 8007606:	0064      	lsls	r4, r4, #1
 8007608:	429c      	cmp	r4, r3
 800760a:	f63f aebd 	bhi.w	8007388 <_malloc_r+0x1f0>
 800760e:	2c00      	cmp	r4, #0
 8007610:	f43f aeba 	beq.w	8007388 <_malloc_r+0x1f0>
 8007614:	421c      	tst	r4, r3
 8007616:	4640      	mov	r0, r8
 8007618:	f47f ae35 	bne.w	8007286 <_malloc_r+0xee>
 800761c:	0064      	lsls	r4, r4, #1
 800761e:	421c      	tst	r4, r3
 8007620:	f100 0004 	add.w	r0, r0, #4
 8007624:	d0fa      	beq.n	800761c <_malloc_r+0x484>
 8007626:	e62e      	b.n	8007286 <_malloc_r+0xee>
 8007628:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800762c:	d818      	bhi.n	8007660 <_malloc_r+0x4c8>
 800762e:	0be8      	lsrs	r0, r5, #15
 8007630:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 8007634:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8007638:	3077      	adds	r0, #119	; 0x77
 800763a:	e5cf      	b.n	80071dc <_malloc_r+0x44>
 800763c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007640:	e6eb      	b.n	800741a <_malloc_r+0x282>
 8007642:	2101      	movs	r1, #1
 8007644:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007648:	1092      	asrs	r2, r2, #2
 800764a:	fa01 f202 	lsl.w	r2, r1, r2
 800764e:	431a      	orrs	r2, r3
 8007650:	f8c8 2004 	str.w	r2, [r8, #4]
 8007654:	4661      	mov	r1, ip
 8007656:	e777      	b.n	8007548 <_malloc_r+0x3b0>
 8007658:	2301      	movs	r3, #1
 800765a:	f8cb 3004 	str.w	r3, [fp, #4]
 800765e:	e725      	b.n	80074ac <_malloc_r+0x314>
 8007660:	f240 5254 	movw	r2, #1364	; 0x554
 8007664:	4293      	cmp	r3, r2
 8007666:	d820      	bhi.n	80076aa <_malloc_r+0x512>
 8007668:	0ca8      	lsrs	r0, r5, #18
 800766a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 800766e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8007672:	307c      	adds	r0, #124	; 0x7c
 8007674:	e5b2      	b.n	80071dc <_malloc_r+0x44>
 8007676:	3210      	adds	r2, #16
 8007678:	e6a4      	b.n	80073c4 <_malloc_r+0x22c>
 800767a:	2a54      	cmp	r2, #84	; 0x54
 800767c:	d826      	bhi.n	80076cc <_malloc_r+0x534>
 800767e:	0b1a      	lsrs	r2, r3, #12
 8007680:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8007684:	0049      	lsls	r1, r1, #1
 8007686:	326e      	adds	r2, #110	; 0x6e
 8007688:	e748      	b.n	800751c <_malloc_r+0x384>
 800768a:	68bc      	ldr	r4, [r7, #8]
 800768c:	6862      	ldr	r2, [r4, #4]
 800768e:	f022 0203 	bic.w	r2, r2, #3
 8007692:	e705      	b.n	80074a0 <_malloc_r+0x308>
 8007694:	f3ca 000b 	ubfx	r0, sl, #0, #12
 8007698:	2800      	cmp	r0, #0
 800769a:	f47f aea8 	bne.w	80073ee <_malloc_r+0x256>
 800769e:	4442      	add	r2, r8
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f042 0201 	orr.w	r2, r2, #1
 80076a6:	605a      	str	r2, [r3, #4]
 80076a8:	e6ec      	b.n	8007484 <_malloc_r+0x2ec>
 80076aa:	23fe      	movs	r3, #254	; 0xfe
 80076ac:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 80076b0:	207e      	movs	r0, #126	; 0x7e
 80076b2:	e593      	b.n	80071dc <_malloc_r+0x44>
 80076b4:	2201      	movs	r2, #1
 80076b6:	f04f 0900 	mov.w	r9, #0
 80076ba:	e6c1      	b.n	8007440 <_malloc_r+0x2a8>
 80076bc:	f104 0108 	add.w	r1, r4, #8
 80076c0:	4630      	mov	r0, r6
 80076c2:	f001 f8df 	bl	8008884 <_free_r>
 80076c6:	f8d9 1000 	ldr.w	r1, [r9]
 80076ca:	e6db      	b.n	8007484 <_malloc_r+0x2ec>
 80076cc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80076d0:	d805      	bhi.n	80076de <_malloc_r+0x546>
 80076d2:	0bda      	lsrs	r2, r3, #15
 80076d4:	f102 0178 	add.w	r1, r2, #120	; 0x78
 80076d8:	0049      	lsls	r1, r1, #1
 80076da:	3277      	adds	r2, #119	; 0x77
 80076dc:	e71e      	b.n	800751c <_malloc_r+0x384>
 80076de:	f240 5154 	movw	r1, #1364	; 0x554
 80076e2:	428a      	cmp	r2, r1
 80076e4:	d805      	bhi.n	80076f2 <_malloc_r+0x55a>
 80076e6:	0c9a      	lsrs	r2, r3, #18
 80076e8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 80076ec:	0049      	lsls	r1, r1, #1
 80076ee:	327c      	adds	r2, #124	; 0x7c
 80076f0:	e714      	b.n	800751c <_malloc_r+0x384>
 80076f2:	21fe      	movs	r1, #254	; 0xfe
 80076f4:	227e      	movs	r2, #126	; 0x7e
 80076f6:	e711      	b.n	800751c <_malloc_r+0x384>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	e784      	b.n	8007606 <_malloc_r+0x46e>
 80076fc:	08e8      	lsrs	r0, r5, #3
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	e5f8      	b.n	80072f6 <_malloc_r+0x15e>
 8007704:	200005d8 	.word	0x200005d8

08007708 <__ascii_mbtowc>:
 8007708:	b082      	sub	sp, #8
 800770a:	b149      	cbz	r1, 8007720 <__ascii_mbtowc+0x18>
 800770c:	b15a      	cbz	r2, 8007726 <__ascii_mbtowc+0x1e>
 800770e:	b16b      	cbz	r3, 800772c <__ascii_mbtowc+0x24>
 8007710:	7813      	ldrb	r3, [r2, #0]
 8007712:	600b      	str	r3, [r1, #0]
 8007714:	7812      	ldrb	r2, [r2, #0]
 8007716:	1c10      	adds	r0, r2, #0
 8007718:	bf18      	it	ne
 800771a:	2001      	movne	r0, #1
 800771c:	b002      	add	sp, #8
 800771e:	4770      	bx	lr
 8007720:	a901      	add	r1, sp, #4
 8007722:	2a00      	cmp	r2, #0
 8007724:	d1f3      	bne.n	800770e <__ascii_mbtowc+0x6>
 8007726:	4610      	mov	r0, r2
 8007728:	b002      	add	sp, #8
 800772a:	4770      	bx	lr
 800772c:	f06f 0001 	mvn.w	r0, #1
 8007730:	e7f4      	b.n	800771c <__ascii_mbtowc+0x14>
 8007732:	bf00      	nop
	...

08007740 <memchr>:
 8007740:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8007744:	2a10      	cmp	r2, #16
 8007746:	db2b      	blt.n	80077a0 <memchr+0x60>
 8007748:	f010 0f07 	tst.w	r0, #7
 800774c:	d008      	beq.n	8007760 <memchr+0x20>
 800774e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007752:	3a01      	subs	r2, #1
 8007754:	428b      	cmp	r3, r1
 8007756:	d02d      	beq.n	80077b4 <memchr+0x74>
 8007758:	f010 0f07 	tst.w	r0, #7
 800775c:	b342      	cbz	r2, 80077b0 <memchr+0x70>
 800775e:	d1f6      	bne.n	800774e <memchr+0xe>
 8007760:	b4f0      	push	{r4, r5, r6, r7}
 8007762:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8007766:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800776a:	f022 0407 	bic.w	r4, r2, #7
 800776e:	f07f 0700 	mvns.w	r7, #0
 8007772:	2300      	movs	r3, #0
 8007774:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8007778:	3c08      	subs	r4, #8
 800777a:	ea85 0501 	eor.w	r5, r5, r1
 800777e:	ea86 0601 	eor.w	r6, r6, r1
 8007782:	fa85 f547 	uadd8	r5, r5, r7
 8007786:	faa3 f587 	sel	r5, r3, r7
 800778a:	fa86 f647 	uadd8	r6, r6, r7
 800778e:	faa5 f687 	sel	r6, r5, r7
 8007792:	b98e      	cbnz	r6, 80077b8 <memchr+0x78>
 8007794:	d1ee      	bne.n	8007774 <memchr+0x34>
 8007796:	bcf0      	pop	{r4, r5, r6, r7}
 8007798:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800779c:	f002 0207 	and.w	r2, r2, #7
 80077a0:	b132      	cbz	r2, 80077b0 <memchr+0x70>
 80077a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80077a6:	3a01      	subs	r2, #1
 80077a8:	ea83 0301 	eor.w	r3, r3, r1
 80077ac:	b113      	cbz	r3, 80077b4 <memchr+0x74>
 80077ae:	d1f8      	bne.n	80077a2 <memchr+0x62>
 80077b0:	2000      	movs	r0, #0
 80077b2:	4770      	bx	lr
 80077b4:	3801      	subs	r0, #1
 80077b6:	4770      	bx	lr
 80077b8:	2d00      	cmp	r5, #0
 80077ba:	bf06      	itte	eq
 80077bc:	4635      	moveq	r5, r6
 80077be:	3803      	subeq	r0, #3
 80077c0:	3807      	subne	r0, #7
 80077c2:	f015 0f01 	tst.w	r5, #1
 80077c6:	d107      	bne.n	80077d8 <memchr+0x98>
 80077c8:	3001      	adds	r0, #1
 80077ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80077ce:	bf02      	ittt	eq
 80077d0:	3001      	addeq	r0, #1
 80077d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80077d6:	3001      	addeq	r0, #1
 80077d8:	bcf0      	pop	{r4, r5, r6, r7}
 80077da:	3801      	subs	r0, #1
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop

080077e0 <memmove>:
 80077e0:	4288      	cmp	r0, r1
 80077e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077e4:	d90d      	bls.n	8007802 <memmove+0x22>
 80077e6:	188b      	adds	r3, r1, r2
 80077e8:	4298      	cmp	r0, r3
 80077ea:	d20a      	bcs.n	8007802 <memmove+0x22>
 80077ec:	1881      	adds	r1, r0, r2
 80077ee:	2a00      	cmp	r2, #0
 80077f0:	d051      	beq.n	8007896 <memmove+0xb6>
 80077f2:	1a9a      	subs	r2, r3, r2
 80077f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d1f9      	bne.n	80077f4 <memmove+0x14>
 8007800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007802:	2a0f      	cmp	r2, #15
 8007804:	d948      	bls.n	8007898 <memmove+0xb8>
 8007806:	ea41 0300 	orr.w	r3, r1, r0
 800780a:	079b      	lsls	r3, r3, #30
 800780c:	d146      	bne.n	800789c <memmove+0xbc>
 800780e:	f100 0410 	add.w	r4, r0, #16
 8007812:	f101 0310 	add.w	r3, r1, #16
 8007816:	4615      	mov	r5, r2
 8007818:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800781c:	f844 6c10 	str.w	r6, [r4, #-16]
 8007820:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8007824:	f844 6c0c 	str.w	r6, [r4, #-12]
 8007828:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800782c:	f844 6c08 	str.w	r6, [r4, #-8]
 8007830:	3d10      	subs	r5, #16
 8007832:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8007836:	f844 6c04 	str.w	r6, [r4, #-4]
 800783a:	2d0f      	cmp	r5, #15
 800783c:	f103 0310 	add.w	r3, r3, #16
 8007840:	f104 0410 	add.w	r4, r4, #16
 8007844:	d8e8      	bhi.n	8007818 <memmove+0x38>
 8007846:	f1a2 0310 	sub.w	r3, r2, #16
 800784a:	f023 030f 	bic.w	r3, r3, #15
 800784e:	f002 0e0f 	and.w	lr, r2, #15
 8007852:	3310      	adds	r3, #16
 8007854:	f1be 0f03 	cmp.w	lr, #3
 8007858:	4419      	add	r1, r3
 800785a:	4403      	add	r3, r0
 800785c:	d921      	bls.n	80078a2 <memmove+0xc2>
 800785e:	1f1e      	subs	r6, r3, #4
 8007860:	460d      	mov	r5, r1
 8007862:	4674      	mov	r4, lr
 8007864:	3c04      	subs	r4, #4
 8007866:	f855 7b04 	ldr.w	r7, [r5], #4
 800786a:	f846 7f04 	str.w	r7, [r6, #4]!
 800786e:	2c03      	cmp	r4, #3
 8007870:	d8f8      	bhi.n	8007864 <memmove+0x84>
 8007872:	f1ae 0404 	sub.w	r4, lr, #4
 8007876:	f024 0403 	bic.w	r4, r4, #3
 800787a:	3404      	adds	r4, #4
 800787c:	4423      	add	r3, r4
 800787e:	4421      	add	r1, r4
 8007880:	f002 0203 	and.w	r2, r2, #3
 8007884:	b162      	cbz	r2, 80078a0 <memmove+0xc0>
 8007886:	3b01      	subs	r3, #1
 8007888:	440a      	add	r2, r1
 800788a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800788e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007892:	428a      	cmp	r2, r1
 8007894:	d1f9      	bne.n	800788a <memmove+0xaa>
 8007896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007898:	4603      	mov	r3, r0
 800789a:	e7f3      	b.n	8007884 <memmove+0xa4>
 800789c:	4603      	mov	r3, r0
 800789e:	e7f2      	b.n	8007886 <memmove+0xa6>
 80078a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078a2:	4672      	mov	r2, lr
 80078a4:	e7ee      	b.n	8007884 <memmove+0xa4>
 80078a6:	bf00      	nop

080078a8 <__malloc_lock>:
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop

080078ac <__malloc_unlock>:
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop

080078b0 <_Balloc>:
 80078b0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80078b2:	b570      	push	{r4, r5, r6, lr}
 80078b4:	4605      	mov	r5, r0
 80078b6:	460c      	mov	r4, r1
 80078b8:	b14b      	cbz	r3, 80078ce <_Balloc+0x1e>
 80078ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80078be:	b180      	cbz	r0, 80078e2 <_Balloc+0x32>
 80078c0:	6802      	ldr	r2, [r0, #0]
 80078c2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80078c6:	2300      	movs	r3, #0
 80078c8:	6103      	str	r3, [r0, #16]
 80078ca:	60c3      	str	r3, [r0, #12]
 80078cc:	bd70      	pop	{r4, r5, r6, pc}
 80078ce:	2221      	movs	r2, #33	; 0x21
 80078d0:	2104      	movs	r1, #4
 80078d2:	f000 fe4b 	bl	800856c <_calloc_r>
 80078d6:	64e8      	str	r0, [r5, #76]	; 0x4c
 80078d8:	4603      	mov	r3, r0
 80078da:	2800      	cmp	r0, #0
 80078dc:	d1ed      	bne.n	80078ba <_Balloc+0xa>
 80078de:	2000      	movs	r0, #0
 80078e0:	bd70      	pop	{r4, r5, r6, pc}
 80078e2:	2101      	movs	r1, #1
 80078e4:	fa01 f604 	lsl.w	r6, r1, r4
 80078e8:	1d72      	adds	r2, r6, #5
 80078ea:	4628      	mov	r0, r5
 80078ec:	0092      	lsls	r2, r2, #2
 80078ee:	f000 fe3d 	bl	800856c <_calloc_r>
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d0f3      	beq.n	80078de <_Balloc+0x2e>
 80078f6:	6044      	str	r4, [r0, #4]
 80078f8:	6086      	str	r6, [r0, #8]
 80078fa:	e7e4      	b.n	80078c6 <_Balloc+0x16>

080078fc <_Bfree>:
 80078fc:	b131      	cbz	r1, 800790c <_Bfree+0x10>
 80078fe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007900:	684a      	ldr	r2, [r1, #4]
 8007902:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007906:	6008      	str	r0, [r1, #0]
 8007908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop

08007910 <__multadd>:
 8007910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007912:	690c      	ldr	r4, [r1, #16]
 8007914:	b083      	sub	sp, #12
 8007916:	460d      	mov	r5, r1
 8007918:	4606      	mov	r6, r0
 800791a:	f101 0e14 	add.w	lr, r1, #20
 800791e:	2700      	movs	r7, #0
 8007920:	f8de 0000 	ldr.w	r0, [lr]
 8007924:	b281      	uxth	r1, r0
 8007926:	fb02 3101 	mla	r1, r2, r1, r3
 800792a:	0c0b      	lsrs	r3, r1, #16
 800792c:	0c00      	lsrs	r0, r0, #16
 800792e:	fb02 3300 	mla	r3, r2, r0, r3
 8007932:	b289      	uxth	r1, r1
 8007934:	3701      	adds	r7, #1
 8007936:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800793a:	42bc      	cmp	r4, r7
 800793c:	f84e 1b04 	str.w	r1, [lr], #4
 8007940:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8007944:	dcec      	bgt.n	8007920 <__multadd+0x10>
 8007946:	b13b      	cbz	r3, 8007958 <__multadd+0x48>
 8007948:	68aa      	ldr	r2, [r5, #8]
 800794a:	4294      	cmp	r4, r2
 800794c:	da07      	bge.n	800795e <__multadd+0x4e>
 800794e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8007952:	3401      	adds	r4, #1
 8007954:	6153      	str	r3, [r2, #20]
 8007956:	612c      	str	r4, [r5, #16]
 8007958:	4628      	mov	r0, r5
 800795a:	b003      	add	sp, #12
 800795c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800795e:	6869      	ldr	r1, [r5, #4]
 8007960:	9301      	str	r3, [sp, #4]
 8007962:	3101      	adds	r1, #1
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff ffa3 	bl	80078b0 <_Balloc>
 800796a:	692a      	ldr	r2, [r5, #16]
 800796c:	3202      	adds	r2, #2
 800796e:	f105 010c 	add.w	r1, r5, #12
 8007972:	4607      	mov	r7, r0
 8007974:	0092      	lsls	r2, r2, #2
 8007976:	300c      	adds	r0, #12
 8007978:	f7fc fc34 	bl	80041e4 <memcpy>
 800797c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800797e:	6869      	ldr	r1, [r5, #4]
 8007980:	9b01      	ldr	r3, [sp, #4]
 8007982:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8007986:	6028      	str	r0, [r5, #0]
 8007988:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800798c:	463d      	mov	r5, r7
 800798e:	e7de      	b.n	800794e <__multadd+0x3e>

08007990 <__hi0bits>:
 8007990:	0c03      	lsrs	r3, r0, #16
 8007992:	041b      	lsls	r3, r3, #16
 8007994:	b9b3      	cbnz	r3, 80079c4 <__hi0bits+0x34>
 8007996:	0400      	lsls	r0, r0, #16
 8007998:	2310      	movs	r3, #16
 800799a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800799e:	bf04      	itt	eq
 80079a0:	0200      	lsleq	r0, r0, #8
 80079a2:	3308      	addeq	r3, #8
 80079a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80079a8:	bf04      	itt	eq
 80079aa:	0100      	lsleq	r0, r0, #4
 80079ac:	3304      	addeq	r3, #4
 80079ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80079b2:	bf04      	itt	eq
 80079b4:	0080      	lsleq	r0, r0, #2
 80079b6:	3302      	addeq	r3, #2
 80079b8:	2800      	cmp	r0, #0
 80079ba:	db07      	blt.n	80079cc <__hi0bits+0x3c>
 80079bc:	0042      	lsls	r2, r0, #1
 80079be:	d403      	bmi.n	80079c8 <__hi0bits+0x38>
 80079c0:	2020      	movs	r0, #32
 80079c2:	4770      	bx	lr
 80079c4:	2300      	movs	r3, #0
 80079c6:	e7e8      	b.n	800799a <__hi0bits+0xa>
 80079c8:	1c58      	adds	r0, r3, #1
 80079ca:	4770      	bx	lr
 80079cc:	4618      	mov	r0, r3
 80079ce:	4770      	bx	lr

080079d0 <__lo0bits>:
 80079d0:	6803      	ldr	r3, [r0, #0]
 80079d2:	f013 0207 	ands.w	r2, r3, #7
 80079d6:	d007      	beq.n	80079e8 <__lo0bits+0x18>
 80079d8:	07d9      	lsls	r1, r3, #31
 80079da:	d420      	bmi.n	8007a1e <__lo0bits+0x4e>
 80079dc:	079a      	lsls	r2, r3, #30
 80079de:	d420      	bmi.n	8007a22 <__lo0bits+0x52>
 80079e0:	089b      	lsrs	r3, r3, #2
 80079e2:	6003      	str	r3, [r0, #0]
 80079e4:	2002      	movs	r0, #2
 80079e6:	4770      	bx	lr
 80079e8:	b299      	uxth	r1, r3
 80079ea:	b909      	cbnz	r1, 80079f0 <__lo0bits+0x20>
 80079ec:	0c1b      	lsrs	r3, r3, #16
 80079ee:	2210      	movs	r2, #16
 80079f0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80079f4:	bf04      	itt	eq
 80079f6:	0a1b      	lsreq	r3, r3, #8
 80079f8:	3208      	addeq	r2, #8
 80079fa:	0719      	lsls	r1, r3, #28
 80079fc:	bf04      	itt	eq
 80079fe:	091b      	lsreq	r3, r3, #4
 8007a00:	3204      	addeq	r2, #4
 8007a02:	0799      	lsls	r1, r3, #30
 8007a04:	bf04      	itt	eq
 8007a06:	089b      	lsreq	r3, r3, #2
 8007a08:	3202      	addeq	r2, #2
 8007a0a:	07d9      	lsls	r1, r3, #31
 8007a0c:	d404      	bmi.n	8007a18 <__lo0bits+0x48>
 8007a0e:	085b      	lsrs	r3, r3, #1
 8007a10:	d101      	bne.n	8007a16 <__lo0bits+0x46>
 8007a12:	2020      	movs	r0, #32
 8007a14:	4770      	bx	lr
 8007a16:	3201      	adds	r2, #1
 8007a18:	6003      	str	r3, [r0, #0]
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	4770      	bx	lr
 8007a1e:	2000      	movs	r0, #0
 8007a20:	4770      	bx	lr
 8007a22:	085b      	lsrs	r3, r3, #1
 8007a24:	6003      	str	r3, [r0, #0]
 8007a26:	2001      	movs	r0, #1
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop

08007a2c <__i2b>:
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	460c      	mov	r4, r1
 8007a30:	2101      	movs	r1, #1
 8007a32:	f7ff ff3d 	bl	80078b0 <_Balloc>
 8007a36:	2201      	movs	r2, #1
 8007a38:	6144      	str	r4, [r0, #20]
 8007a3a:	6102      	str	r2, [r0, #16]
 8007a3c:	bd10      	pop	{r4, pc}
 8007a3e:	bf00      	nop

08007a40 <__multiply>:
 8007a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a44:	690d      	ldr	r5, [r1, #16]
 8007a46:	6917      	ldr	r7, [r2, #16]
 8007a48:	42bd      	cmp	r5, r7
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	4616      	mov	r6, r2
 8007a50:	da04      	bge.n	8007a5c <__multiply+0x1c>
 8007a52:	462a      	mov	r2, r5
 8007a54:	4634      	mov	r4, r6
 8007a56:	463d      	mov	r5, r7
 8007a58:	460e      	mov	r6, r1
 8007a5a:	4617      	mov	r7, r2
 8007a5c:	68a3      	ldr	r3, [r4, #8]
 8007a5e:	6861      	ldr	r1, [r4, #4]
 8007a60:	eb05 0807 	add.w	r8, r5, r7
 8007a64:	4598      	cmp	r8, r3
 8007a66:	bfc8      	it	gt
 8007a68:	3101      	addgt	r1, #1
 8007a6a:	f7ff ff21 	bl	80078b0 <_Balloc>
 8007a6e:	f100 0c14 	add.w	ip, r0, #20
 8007a72:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8007a76:	45cc      	cmp	ip, r9
 8007a78:	9000      	str	r0, [sp, #0]
 8007a7a:	d205      	bcs.n	8007a88 <__multiply+0x48>
 8007a7c:	4663      	mov	r3, ip
 8007a7e:	2100      	movs	r1, #0
 8007a80:	f843 1b04 	str.w	r1, [r3], #4
 8007a84:	4599      	cmp	r9, r3
 8007a86:	d8fb      	bhi.n	8007a80 <__multiply+0x40>
 8007a88:	f106 0214 	add.w	r2, r6, #20
 8007a8c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 8007a90:	f104 0314 	add.w	r3, r4, #20
 8007a94:	4552      	cmp	r2, sl
 8007a96:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 8007a9a:	d254      	bcs.n	8007b46 <__multiply+0x106>
 8007a9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007aa0:	4699      	mov	r9, r3
 8007aa2:	f852 3b04 	ldr.w	r3, [r2], #4
 8007aa6:	fa1f fb83 	uxth.w	fp, r3
 8007aaa:	f1bb 0f00 	cmp.w	fp, #0
 8007aae:	d020      	beq.n	8007af2 <__multiply+0xb2>
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	464f      	mov	r7, r9
 8007ab4:	4666      	mov	r6, ip
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	e000      	b.n	8007abc <__multiply+0x7c>
 8007aba:	461e      	mov	r6, r3
 8007abc:	f857 4b04 	ldr.w	r4, [r7], #4
 8007ac0:	6830      	ldr	r0, [r6, #0]
 8007ac2:	b2a1      	uxth	r1, r4
 8007ac4:	b283      	uxth	r3, r0
 8007ac6:	fb0b 3101 	mla	r1, fp, r1, r3
 8007aca:	0c24      	lsrs	r4, r4, #16
 8007acc:	0c00      	lsrs	r0, r0, #16
 8007ace:	194b      	adds	r3, r1, r5
 8007ad0:	fb0b 0004 	mla	r0, fp, r4, r0
 8007ad4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8007ad8:	b299      	uxth	r1, r3
 8007ada:	4633      	mov	r3, r6
 8007adc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ae0:	45be      	cmp	lr, r7
 8007ae2:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8007ae6:	f843 1b04 	str.w	r1, [r3], #4
 8007aea:	d8e6      	bhi.n	8007aba <__multiply+0x7a>
 8007aec:	6075      	str	r5, [r6, #4]
 8007aee:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8007af2:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8007af6:	d020      	beq.n	8007b3a <__multiply+0xfa>
 8007af8:	f8dc 3000 	ldr.w	r3, [ip]
 8007afc:	4667      	mov	r7, ip
 8007afe:	4618      	mov	r0, r3
 8007b00:	464d      	mov	r5, r9
 8007b02:	2100      	movs	r1, #0
 8007b04:	e000      	b.n	8007b08 <__multiply+0xc8>
 8007b06:	4637      	mov	r7, r6
 8007b08:	882c      	ldrh	r4, [r5, #0]
 8007b0a:	0c00      	lsrs	r0, r0, #16
 8007b0c:	fb0b 0004 	mla	r0, fp, r4, r0
 8007b10:	4401      	add	r1, r0
 8007b12:	b29c      	uxth	r4, r3
 8007b14:	463e      	mov	r6, r7
 8007b16:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 8007b1a:	f846 3b04 	str.w	r3, [r6], #4
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f855 4b04 	ldr.w	r4, [r5], #4
 8007b24:	b283      	uxth	r3, r0
 8007b26:	0c24      	lsrs	r4, r4, #16
 8007b28:	fb0b 3404 	mla	r4, fp, r4, r3
 8007b2c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8007b30:	45ae      	cmp	lr, r5
 8007b32:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8007b36:	d8e6      	bhi.n	8007b06 <__multiply+0xc6>
 8007b38:	607b      	str	r3, [r7, #4]
 8007b3a:	4592      	cmp	sl, r2
 8007b3c:	f10c 0c04 	add.w	ip, ip, #4
 8007b40:	d8af      	bhi.n	8007aa2 <__multiply+0x62>
 8007b42:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b46:	f1b8 0f00 	cmp.w	r8, #0
 8007b4a:	dd0b      	ble.n	8007b64 <__multiply+0x124>
 8007b4c:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8007b50:	f1a9 0904 	sub.w	r9, r9, #4
 8007b54:	b11b      	cbz	r3, 8007b5e <__multiply+0x11e>
 8007b56:	e005      	b.n	8007b64 <__multiply+0x124>
 8007b58:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8007b5c:	b913      	cbnz	r3, 8007b64 <__multiply+0x124>
 8007b5e:	f1b8 0801 	subs.w	r8, r8, #1
 8007b62:	d1f9      	bne.n	8007b58 <__multiply+0x118>
 8007b64:	9800      	ldr	r0, [sp, #0]
 8007b66:	f8c0 8010 	str.w	r8, [r0, #16]
 8007b6a:	b003      	add	sp, #12
 8007b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b70 <__pow5mult>:
 8007b70:	f012 0303 	ands.w	r3, r2, #3
 8007b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b78:	4614      	mov	r4, r2
 8007b7a:	4607      	mov	r7, r0
 8007b7c:	d12e      	bne.n	8007bdc <__pow5mult+0x6c>
 8007b7e:	460e      	mov	r6, r1
 8007b80:	10a4      	asrs	r4, r4, #2
 8007b82:	d01c      	beq.n	8007bbe <__pow5mult+0x4e>
 8007b84:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8007b86:	b395      	cbz	r5, 8007bee <__pow5mult+0x7e>
 8007b88:	07e3      	lsls	r3, r4, #31
 8007b8a:	f04f 0800 	mov.w	r8, #0
 8007b8e:	d406      	bmi.n	8007b9e <__pow5mult+0x2e>
 8007b90:	1064      	asrs	r4, r4, #1
 8007b92:	d014      	beq.n	8007bbe <__pow5mult+0x4e>
 8007b94:	6828      	ldr	r0, [r5, #0]
 8007b96:	b1a8      	cbz	r0, 8007bc4 <__pow5mult+0x54>
 8007b98:	4605      	mov	r5, r0
 8007b9a:	07e3      	lsls	r3, r4, #31
 8007b9c:	d5f8      	bpl.n	8007b90 <__pow5mult+0x20>
 8007b9e:	462a      	mov	r2, r5
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	f7ff ff4c 	bl	8007a40 <__multiply>
 8007ba8:	b1b6      	cbz	r6, 8007bd8 <__pow5mult+0x68>
 8007baa:	6872      	ldr	r2, [r6, #4]
 8007bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bae:	1064      	asrs	r4, r4, #1
 8007bb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bb4:	6031      	str	r1, [r6, #0]
 8007bb6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8007bba:	4606      	mov	r6, r0
 8007bbc:	d1ea      	bne.n	8007b94 <__pow5mult+0x24>
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc4:	462a      	mov	r2, r5
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	4638      	mov	r0, r7
 8007bca:	f7ff ff39 	bl	8007a40 <__multiply>
 8007bce:	6028      	str	r0, [r5, #0]
 8007bd0:	f8c0 8000 	str.w	r8, [r0]
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	e7e0      	b.n	8007b9a <__pow5mult+0x2a>
 8007bd8:	4606      	mov	r6, r0
 8007bda:	e7d9      	b.n	8007b90 <__pow5mult+0x20>
 8007bdc:	1e5a      	subs	r2, r3, #1
 8007bde:	4d0b      	ldr	r5, [pc, #44]	; (8007c0c <__pow5mult+0x9c>)
 8007be0:	2300      	movs	r3, #0
 8007be2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8007be6:	f7ff fe93 	bl	8007910 <__multadd>
 8007bea:	4606      	mov	r6, r0
 8007bec:	e7c8      	b.n	8007b80 <__pow5mult+0x10>
 8007bee:	2101      	movs	r1, #1
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f7ff fe5d 	bl	80078b0 <_Balloc>
 8007bf6:	f240 2171 	movw	r1, #625	; 0x271
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	6141      	str	r1, [r0, #20]
 8007c00:	6102      	str	r2, [r0, #16]
 8007c02:	4605      	mov	r5, r0
 8007c04:	64b8      	str	r0, [r7, #72]	; 0x48
 8007c06:	6003      	str	r3, [r0, #0]
 8007c08:	e7be      	b.n	8007b88 <__pow5mult+0x18>
 8007c0a:	bf00      	nop
 8007c0c:	08009238 	.word	0x08009238

08007c10 <__lshift>:
 8007c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c14:	4691      	mov	r9, r2
 8007c16:	690a      	ldr	r2, [r1, #16]
 8007c18:	688b      	ldr	r3, [r1, #8]
 8007c1a:	ea4f 1469 	mov.w	r4, r9, asr #5
 8007c1e:	eb04 0802 	add.w	r8, r4, r2
 8007c22:	f108 0501 	add.w	r5, r8, #1
 8007c26:	429d      	cmp	r5, r3
 8007c28:	460e      	mov	r6, r1
 8007c2a:	4682      	mov	sl, r0
 8007c2c:	6849      	ldr	r1, [r1, #4]
 8007c2e:	dd04      	ble.n	8007c3a <__lshift+0x2a>
 8007c30:	005b      	lsls	r3, r3, #1
 8007c32:	429d      	cmp	r5, r3
 8007c34:	f101 0101 	add.w	r1, r1, #1
 8007c38:	dcfa      	bgt.n	8007c30 <__lshift+0x20>
 8007c3a:	4650      	mov	r0, sl
 8007c3c:	f7ff fe38 	bl	80078b0 <_Balloc>
 8007c40:	2c00      	cmp	r4, #0
 8007c42:	f100 0214 	add.w	r2, r0, #20
 8007c46:	dd38      	ble.n	8007cba <__lshift+0xaa>
 8007c48:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	f842 1b04 	str.w	r1, [r2], #4
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d1fb      	bne.n	8007c4e <__lshift+0x3e>
 8007c56:	6934      	ldr	r4, [r6, #16]
 8007c58:	f106 0114 	add.w	r1, r6, #20
 8007c5c:	f019 091f 	ands.w	r9, r9, #31
 8007c60:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 8007c64:	d021      	beq.n	8007caa <__lshift+0x9a>
 8007c66:	f1c9 0220 	rsb	r2, r9, #32
 8007c6a:	2400      	movs	r4, #0
 8007c6c:	680f      	ldr	r7, [r1, #0]
 8007c6e:	fa07 fc09 	lsl.w	ip, r7, r9
 8007c72:	ea4c 0404 	orr.w	r4, ip, r4
 8007c76:	469c      	mov	ip, r3
 8007c78:	f843 4b04 	str.w	r4, [r3], #4
 8007c7c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007c80:	458e      	cmp	lr, r1
 8007c82:	fa24 f402 	lsr.w	r4, r4, r2
 8007c86:	d8f1      	bhi.n	8007c6c <__lshift+0x5c>
 8007c88:	f8cc 4004 	str.w	r4, [ip, #4]
 8007c8c:	b10c      	cbz	r4, 8007c92 <__lshift+0x82>
 8007c8e:	f108 0502 	add.w	r5, r8, #2
 8007c92:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8007c96:	6872      	ldr	r2, [r6, #4]
 8007c98:	3d01      	subs	r5, #1
 8007c9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c9e:	6105      	str	r5, [r0, #16]
 8007ca0:	6031      	str	r1, [r6, #0]
 8007ca2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8007ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007caa:	3b04      	subs	r3, #4
 8007cac:	f851 2b04 	ldr.w	r2, [r1], #4
 8007cb0:	f843 2f04 	str.w	r2, [r3, #4]!
 8007cb4:	458e      	cmp	lr, r1
 8007cb6:	d8f9      	bhi.n	8007cac <__lshift+0x9c>
 8007cb8:	e7eb      	b.n	8007c92 <__lshift+0x82>
 8007cba:	4613      	mov	r3, r2
 8007cbc:	e7cb      	b.n	8007c56 <__lshift+0x46>
 8007cbe:	bf00      	nop

08007cc0 <__mcmp>:
 8007cc0:	6902      	ldr	r2, [r0, #16]
 8007cc2:	690b      	ldr	r3, [r1, #16]
 8007cc4:	1ad2      	subs	r2, r2, r3
 8007cc6:	d113      	bne.n	8007cf0 <__mcmp+0x30>
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	3014      	adds	r0, #20
 8007ccc:	3114      	adds	r1, #20
 8007cce:	4419      	add	r1, r3
 8007cd0:	b410      	push	{r4}
 8007cd2:	4403      	add	r3, r0
 8007cd4:	e001      	b.n	8007cda <__mcmp+0x1a>
 8007cd6:	4298      	cmp	r0, r3
 8007cd8:	d20c      	bcs.n	8007cf4 <__mcmp+0x34>
 8007cda:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007cde:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ce2:	4294      	cmp	r4, r2
 8007ce4:	d0f7      	beq.n	8007cd6 <__mcmp+0x16>
 8007ce6:	d309      	bcc.n	8007cfc <__mcmp+0x3c>
 8007ce8:	2001      	movs	r0, #1
 8007cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4770      	bx	lr
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007d00:	e7f3      	b.n	8007cea <__mcmp+0x2a>
 8007d02:	bf00      	nop

08007d04 <__mdiff>:
 8007d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d08:	690b      	ldr	r3, [r1, #16]
 8007d0a:	460f      	mov	r7, r1
 8007d0c:	6911      	ldr	r1, [r2, #16]
 8007d0e:	1a5b      	subs	r3, r3, r1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	4690      	mov	r8, r2
 8007d14:	d117      	bne.n	8007d46 <__mdiff+0x42>
 8007d16:	0089      	lsls	r1, r1, #2
 8007d18:	f107 0214 	add.w	r2, r7, #20
 8007d1c:	f108 0514 	add.w	r5, r8, #20
 8007d20:	1853      	adds	r3, r2, r1
 8007d22:	4429      	add	r1, r5
 8007d24:	e001      	b.n	8007d2a <__mdiff+0x26>
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d25e      	bcs.n	8007de8 <__mdiff+0xe4>
 8007d2a:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 8007d2e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d32:	42a6      	cmp	r6, r4
 8007d34:	d0f7      	beq.n	8007d26 <__mdiff+0x22>
 8007d36:	d260      	bcs.n	8007dfa <__mdiff+0xf6>
 8007d38:	463b      	mov	r3, r7
 8007d3a:	4614      	mov	r4, r2
 8007d3c:	4647      	mov	r7, r8
 8007d3e:	f04f 0901 	mov.w	r9, #1
 8007d42:	4698      	mov	r8, r3
 8007d44:	e006      	b.n	8007d54 <__mdiff+0x50>
 8007d46:	db5d      	blt.n	8007e04 <__mdiff+0x100>
 8007d48:	f107 0514 	add.w	r5, r7, #20
 8007d4c:	f102 0414 	add.w	r4, r2, #20
 8007d50:	f04f 0900 	mov.w	r9, #0
 8007d54:	6879      	ldr	r1, [r7, #4]
 8007d56:	f7ff fdab 	bl	80078b0 <_Balloc>
 8007d5a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007d5e:	693e      	ldr	r6, [r7, #16]
 8007d60:	f8c0 900c 	str.w	r9, [r0, #12]
 8007d64:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 8007d68:	46a6      	mov	lr, r4
 8007d6a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8007d6e:	f100 0414 	add.w	r4, r0, #20
 8007d72:	2300      	movs	r3, #0
 8007d74:	f85e 1b04 	ldr.w	r1, [lr], #4
 8007d78:	f855 8b04 	ldr.w	r8, [r5], #4
 8007d7c:	b28a      	uxth	r2, r1
 8007d7e:	fa13 f388 	uxtah	r3, r3, r8
 8007d82:	0c09      	lsrs	r1, r1, #16
 8007d84:	1a9a      	subs	r2, r3, r2
 8007d86:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 8007d8a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8007d8e:	b292      	uxth	r2, r2
 8007d90:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d94:	45f4      	cmp	ip, lr
 8007d96:	f844 2b04 	str.w	r2, [r4], #4
 8007d9a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8007d9e:	d8e9      	bhi.n	8007d74 <__mdiff+0x70>
 8007da0:	42af      	cmp	r7, r5
 8007da2:	d917      	bls.n	8007dd4 <__mdiff+0xd0>
 8007da4:	46a4      	mov	ip, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	f851 eb04 	ldr.w	lr, [r1], #4
 8007dac:	fa13 f28e 	uxtah	r2, r3, lr
 8007db0:	1413      	asrs	r3, r2, #16
 8007db2:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 8007db6:	b292      	uxth	r2, r2
 8007db8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007dbc:	428f      	cmp	r7, r1
 8007dbe:	f84c 2b04 	str.w	r2, [ip], #4
 8007dc2:	ea4f 4323 	mov.w	r3, r3, asr #16
 8007dc6:	d8ef      	bhi.n	8007da8 <__mdiff+0xa4>
 8007dc8:	43ed      	mvns	r5, r5
 8007dca:	443d      	add	r5, r7
 8007dcc:	f025 0503 	bic.w	r5, r5, #3
 8007dd0:	3504      	adds	r5, #4
 8007dd2:	442c      	add	r4, r5
 8007dd4:	3c04      	subs	r4, #4
 8007dd6:	b922      	cbnz	r2, 8007de2 <__mdiff+0xde>
 8007dd8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 8007ddc:	3e01      	subs	r6, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0fa      	beq.n	8007dd8 <__mdiff+0xd4>
 8007de2:	6106      	str	r6, [r0, #16]
 8007de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007de8:	2100      	movs	r1, #0
 8007dea:	f7ff fd61 	bl	80078b0 <_Balloc>
 8007dee:	2201      	movs	r2, #1
 8007df0:	2300      	movs	r3, #0
 8007df2:	6102      	str	r2, [r0, #16]
 8007df4:	6143      	str	r3, [r0, #20]
 8007df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dfa:	462c      	mov	r4, r5
 8007dfc:	f04f 0900 	mov.w	r9, #0
 8007e00:	4615      	mov	r5, r2
 8007e02:	e7a7      	b.n	8007d54 <__mdiff+0x50>
 8007e04:	463b      	mov	r3, r7
 8007e06:	f107 0414 	add.w	r4, r7, #20
 8007e0a:	f108 0514 	add.w	r5, r8, #20
 8007e0e:	4647      	mov	r7, r8
 8007e10:	f04f 0901 	mov.w	r9, #1
 8007e14:	4698      	mov	r8, r3
 8007e16:	e79d      	b.n	8007d54 <__mdiff+0x50>

08007e18 <__d2b>:
 8007e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	2101      	movs	r1, #1
 8007e20:	461c      	mov	r4, r3
 8007e22:	f3c3 550a 	ubfx	r5, r3, #20, #11
 8007e26:	4617      	mov	r7, r2
 8007e28:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007e2a:	f7ff fd41 	bl	80078b0 <_Balloc>
 8007e2e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007e32:	4681      	mov	r9, r0
 8007e34:	b10d      	cbz	r5, 8007e3a <__d2b+0x22>
 8007e36:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8007e3a:	9401      	str	r4, [sp, #4]
 8007e3c:	b31f      	cbz	r7, 8007e86 <__d2b+0x6e>
 8007e3e:	a802      	add	r0, sp, #8
 8007e40:	f840 7d08 	str.w	r7, [r0, #-8]!
 8007e44:	f7ff fdc4 	bl	80079d0 <__lo0bits>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d135      	bne.n	8007eb8 <__d2b+0xa0>
 8007e4c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007e50:	f8c9 2014 	str.w	r2, [r9, #20]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	bf0c      	ite	eq
 8007e58:	2101      	moveq	r1, #1
 8007e5a:	2102      	movne	r1, #2
 8007e5c:	f8c9 3018 	str.w	r3, [r9, #24]
 8007e60:	f8c9 1010 	str.w	r1, [r9, #16]
 8007e64:	b9dd      	cbnz	r5, 8007e9e <__d2b+0x86>
 8007e66:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 8007e6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e6e:	6030      	str	r0, [r6, #0]
 8007e70:	6918      	ldr	r0, [r3, #16]
 8007e72:	f7ff fd8d 	bl	8007990 <__hi0bits>
 8007e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e78:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007e7c:	6018      	str	r0, [r3, #0]
 8007e7e:	4648      	mov	r0, r9
 8007e80:	b003      	add	sp, #12
 8007e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e86:	a801      	add	r0, sp, #4
 8007e88:	f7ff fda2 	bl	80079d0 <__lo0bits>
 8007e8c:	9b01      	ldr	r3, [sp, #4]
 8007e8e:	f8c9 3014 	str.w	r3, [r9, #20]
 8007e92:	2101      	movs	r1, #1
 8007e94:	3020      	adds	r0, #32
 8007e96:	f8c9 1010 	str.w	r1, [r9, #16]
 8007e9a:	2d00      	cmp	r5, #0
 8007e9c:	d0e3      	beq.n	8007e66 <__d2b+0x4e>
 8007e9e:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 8007ea2:	eb08 0300 	add.w	r3, r8, r0
 8007ea6:	6033      	str	r3, [r6, #0]
 8007ea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eaa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007eae:	6018      	str	r0, [r3, #0]
 8007eb0:	4648      	mov	r0, r9
 8007eb2:	b003      	add	sp, #12
 8007eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eb8:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007ebc:	f1c0 0120 	rsb	r1, r0, #32
 8007ec0:	fa03 f101 	lsl.w	r1, r3, r1
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	40c3      	lsrs	r3, r0
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	f8c9 2014 	str.w	r2, [r9, #20]
 8007ece:	e7c1      	b.n	8007e54 <__d2b+0x3c>

08007ed0 <_realloc_r>:
 8007ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed4:	4617      	mov	r7, r2
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	2900      	cmp	r1, #0
 8007eda:	f000 80c1 	beq.w	8008060 <_realloc_r+0x190>
 8007ede:	460e      	mov	r6, r1
 8007ee0:	4681      	mov	r9, r0
 8007ee2:	f107 050b 	add.w	r5, r7, #11
 8007ee6:	f7ff fcdf 	bl	80078a8 <__malloc_lock>
 8007eea:	f856 ec04 	ldr.w	lr, [r6, #-4]
 8007eee:	2d16      	cmp	r5, #22
 8007ef0:	f02e 0403 	bic.w	r4, lr, #3
 8007ef4:	f1a6 0808 	sub.w	r8, r6, #8
 8007ef8:	d840      	bhi.n	8007f7c <_realloc_r+0xac>
 8007efa:	2210      	movs	r2, #16
 8007efc:	4615      	mov	r5, r2
 8007efe:	42af      	cmp	r7, r5
 8007f00:	d841      	bhi.n	8007f86 <_realloc_r+0xb6>
 8007f02:	4294      	cmp	r4, r2
 8007f04:	da75      	bge.n	8007ff2 <_realloc_r+0x122>
 8007f06:	4bc9      	ldr	r3, [pc, #804]	; (800822c <_realloc_r+0x35c>)
 8007f08:	6899      	ldr	r1, [r3, #8]
 8007f0a:	eb08 0004 	add.w	r0, r8, r4
 8007f0e:	4288      	cmp	r0, r1
 8007f10:	6841      	ldr	r1, [r0, #4]
 8007f12:	f000 80d9 	beq.w	80080c8 <_realloc_r+0x1f8>
 8007f16:	f021 0301 	bic.w	r3, r1, #1
 8007f1a:	4403      	add	r3, r0
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	07db      	lsls	r3, r3, #31
 8007f20:	d57d      	bpl.n	800801e <_realloc_r+0x14e>
 8007f22:	f01e 0f01 	tst.w	lr, #1
 8007f26:	d035      	beq.n	8007f94 <_realloc_r+0xc4>
 8007f28:	4639      	mov	r1, r7
 8007f2a:	4648      	mov	r0, r9
 8007f2c:	f7ff f934 	bl	8007198 <_malloc_r>
 8007f30:	4607      	mov	r7, r0
 8007f32:	b1e0      	cbz	r0, 8007f6e <_realloc_r+0x9e>
 8007f34:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007f38:	f023 0301 	bic.w	r3, r3, #1
 8007f3c:	4443      	add	r3, r8
 8007f3e:	f1a0 0208 	sub.w	r2, r0, #8
 8007f42:	429a      	cmp	r2, r3
 8007f44:	f000 8144 	beq.w	80081d0 <_realloc_r+0x300>
 8007f48:	1f22      	subs	r2, r4, #4
 8007f4a:	2a24      	cmp	r2, #36	; 0x24
 8007f4c:	f200 8131 	bhi.w	80081b2 <_realloc_r+0x2e2>
 8007f50:	2a13      	cmp	r2, #19
 8007f52:	f200 8104 	bhi.w	800815e <_realloc_r+0x28e>
 8007f56:	4603      	mov	r3, r0
 8007f58:	4632      	mov	r2, r6
 8007f5a:	6811      	ldr	r1, [r2, #0]
 8007f5c:	6019      	str	r1, [r3, #0]
 8007f5e:	6851      	ldr	r1, [r2, #4]
 8007f60:	6059      	str	r1, [r3, #4]
 8007f62:	6892      	ldr	r2, [r2, #8]
 8007f64:	609a      	str	r2, [r3, #8]
 8007f66:	4631      	mov	r1, r6
 8007f68:	4648      	mov	r0, r9
 8007f6a:	f000 fc8b 	bl	8008884 <_free_r>
 8007f6e:	4648      	mov	r0, r9
 8007f70:	f7ff fc9c 	bl	80078ac <__malloc_unlock>
 8007f74:	4638      	mov	r0, r7
 8007f76:	b003      	add	sp, #12
 8007f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7c:	f025 0507 	bic.w	r5, r5, #7
 8007f80:	2d00      	cmp	r5, #0
 8007f82:	462a      	mov	r2, r5
 8007f84:	dabb      	bge.n	8007efe <_realloc_r+0x2e>
 8007f86:	230c      	movs	r3, #12
 8007f88:	2000      	movs	r0, #0
 8007f8a:	f8c9 3000 	str.w	r3, [r9]
 8007f8e:	b003      	add	sp, #12
 8007f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f94:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007f98:	ebc3 0a08 	rsb	sl, r3, r8
 8007f9c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007fa0:	f023 0c03 	bic.w	ip, r3, #3
 8007fa4:	eb04 030c 	add.w	r3, r4, ip
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	dbbd      	blt.n	8007f28 <_realloc_r+0x58>
 8007fac:	4657      	mov	r7, sl
 8007fae:	f8da 100c 	ldr.w	r1, [sl, #12]
 8007fb2:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8007fb6:	1f22      	subs	r2, r4, #4
 8007fb8:	2a24      	cmp	r2, #36	; 0x24
 8007fba:	60c1      	str	r1, [r0, #12]
 8007fbc:	6088      	str	r0, [r1, #8]
 8007fbe:	f200 8117 	bhi.w	80081f0 <_realloc_r+0x320>
 8007fc2:	2a13      	cmp	r2, #19
 8007fc4:	f240 8112 	bls.w	80081ec <_realloc_r+0x31c>
 8007fc8:	6831      	ldr	r1, [r6, #0]
 8007fca:	f8ca 1008 	str.w	r1, [sl, #8]
 8007fce:	6871      	ldr	r1, [r6, #4]
 8007fd0:	f8ca 100c 	str.w	r1, [sl, #12]
 8007fd4:	2a1b      	cmp	r2, #27
 8007fd6:	f200 812b 	bhi.w	8008230 <_realloc_r+0x360>
 8007fda:	3608      	adds	r6, #8
 8007fdc:	f10a 0210 	add.w	r2, sl, #16
 8007fe0:	6831      	ldr	r1, [r6, #0]
 8007fe2:	6011      	str	r1, [r2, #0]
 8007fe4:	6871      	ldr	r1, [r6, #4]
 8007fe6:	6051      	str	r1, [r2, #4]
 8007fe8:	68b1      	ldr	r1, [r6, #8]
 8007fea:	6091      	str	r1, [r2, #8]
 8007fec:	463e      	mov	r6, r7
 8007fee:	461c      	mov	r4, r3
 8007ff0:	46d0      	mov	r8, sl
 8007ff2:	1b63      	subs	r3, r4, r5
 8007ff4:	2b0f      	cmp	r3, #15
 8007ff6:	d81d      	bhi.n	8008034 <_realloc_r+0x164>
 8007ff8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	4323      	orrs	r3, r4
 8008002:	4444      	add	r4, r8
 8008004:	f8c8 3004 	str.w	r3, [r8, #4]
 8008008:	6863      	ldr	r3, [r4, #4]
 800800a:	f043 0301 	orr.w	r3, r3, #1
 800800e:	6063      	str	r3, [r4, #4]
 8008010:	4648      	mov	r0, r9
 8008012:	f7ff fc4b 	bl	80078ac <__malloc_unlock>
 8008016:	4630      	mov	r0, r6
 8008018:	b003      	add	sp, #12
 800801a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801e:	f021 0103 	bic.w	r1, r1, #3
 8008022:	4421      	add	r1, r4
 8008024:	4291      	cmp	r1, r2
 8008026:	db21      	blt.n	800806c <_realloc_r+0x19c>
 8008028:	68c3      	ldr	r3, [r0, #12]
 800802a:	6882      	ldr	r2, [r0, #8]
 800802c:	460c      	mov	r4, r1
 800802e:	60d3      	str	r3, [r2, #12]
 8008030:	609a      	str	r2, [r3, #8]
 8008032:	e7de      	b.n	8007ff2 <_realloc_r+0x122>
 8008034:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8008038:	eb08 0105 	add.w	r1, r8, r5
 800803c:	f002 0201 	and.w	r2, r2, #1
 8008040:	4315      	orrs	r5, r2
 8008042:	f043 0201 	orr.w	r2, r3, #1
 8008046:	440b      	add	r3, r1
 8008048:	f8c8 5004 	str.w	r5, [r8, #4]
 800804c:	604a      	str	r2, [r1, #4]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	f042 0201 	orr.w	r2, r2, #1
 8008054:	3108      	adds	r1, #8
 8008056:	605a      	str	r2, [r3, #4]
 8008058:	4648      	mov	r0, r9
 800805a:	f000 fc13 	bl	8008884 <_free_r>
 800805e:	e7d7      	b.n	8008010 <_realloc_r+0x140>
 8008060:	4611      	mov	r1, r2
 8008062:	b003      	add	sp, #12
 8008064:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008068:	f7ff b896 	b.w	8007198 <_malloc_r>
 800806c:	f01e 0f01 	tst.w	lr, #1
 8008070:	f47f af5a 	bne.w	8007f28 <_realloc_r+0x58>
 8008074:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8008078:	ebc3 0a08 	rsb	sl, r3, r8
 800807c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008080:	f023 0c03 	bic.w	ip, r3, #3
 8008084:	eb01 0e0c 	add.w	lr, r1, ip
 8008088:	4596      	cmp	lr, r2
 800808a:	db8b      	blt.n	8007fa4 <_realloc_r+0xd4>
 800808c:	68c3      	ldr	r3, [r0, #12]
 800808e:	6882      	ldr	r2, [r0, #8]
 8008090:	4657      	mov	r7, sl
 8008092:	60d3      	str	r3, [r2, #12]
 8008094:	609a      	str	r2, [r3, #8]
 8008096:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800809a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800809e:	60cb      	str	r3, [r1, #12]
 80080a0:	1f22      	subs	r2, r4, #4
 80080a2:	2a24      	cmp	r2, #36	; 0x24
 80080a4:	6099      	str	r1, [r3, #8]
 80080a6:	f200 8099 	bhi.w	80081dc <_realloc_r+0x30c>
 80080aa:	2a13      	cmp	r2, #19
 80080ac:	d962      	bls.n	8008174 <_realloc_r+0x2a4>
 80080ae:	6833      	ldr	r3, [r6, #0]
 80080b0:	f8ca 3008 	str.w	r3, [sl, #8]
 80080b4:	6873      	ldr	r3, [r6, #4]
 80080b6:	f8ca 300c 	str.w	r3, [sl, #12]
 80080ba:	2a1b      	cmp	r2, #27
 80080bc:	f200 80a0 	bhi.w	8008200 <_realloc_r+0x330>
 80080c0:	3608      	adds	r6, #8
 80080c2:	f10a 0310 	add.w	r3, sl, #16
 80080c6:	e056      	b.n	8008176 <_realloc_r+0x2a6>
 80080c8:	f021 0b03 	bic.w	fp, r1, #3
 80080cc:	44a3      	add	fp, r4
 80080ce:	f105 0010 	add.w	r0, r5, #16
 80080d2:	4583      	cmp	fp, r0
 80080d4:	da59      	bge.n	800818a <_realloc_r+0x2ba>
 80080d6:	f01e 0f01 	tst.w	lr, #1
 80080da:	f47f af25 	bne.w	8007f28 <_realloc_r+0x58>
 80080de:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80080e2:	ebc1 0a08 	rsb	sl, r1, r8
 80080e6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80080ea:	f021 0c03 	bic.w	ip, r1, #3
 80080ee:	44e3      	add	fp, ip
 80080f0:	4558      	cmp	r0, fp
 80080f2:	f73f af57 	bgt.w	8007fa4 <_realloc_r+0xd4>
 80080f6:	4657      	mov	r7, sl
 80080f8:	f8da 100c 	ldr.w	r1, [sl, #12]
 80080fc:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8008100:	1f22      	subs	r2, r4, #4
 8008102:	2a24      	cmp	r2, #36	; 0x24
 8008104:	60c1      	str	r1, [r0, #12]
 8008106:	6088      	str	r0, [r1, #8]
 8008108:	f200 80b4 	bhi.w	8008274 <_realloc_r+0x3a4>
 800810c:	2a13      	cmp	r2, #19
 800810e:	f240 80a5 	bls.w	800825c <_realloc_r+0x38c>
 8008112:	6831      	ldr	r1, [r6, #0]
 8008114:	f8ca 1008 	str.w	r1, [sl, #8]
 8008118:	6871      	ldr	r1, [r6, #4]
 800811a:	f8ca 100c 	str.w	r1, [sl, #12]
 800811e:	2a1b      	cmp	r2, #27
 8008120:	f200 80af 	bhi.w	8008282 <_realloc_r+0x3b2>
 8008124:	3608      	adds	r6, #8
 8008126:	f10a 0210 	add.w	r2, sl, #16
 800812a:	6831      	ldr	r1, [r6, #0]
 800812c:	6011      	str	r1, [r2, #0]
 800812e:	6871      	ldr	r1, [r6, #4]
 8008130:	6051      	str	r1, [r2, #4]
 8008132:	68b1      	ldr	r1, [r6, #8]
 8008134:	6091      	str	r1, [r2, #8]
 8008136:	eb0a 0105 	add.w	r1, sl, r5
 800813a:	ebc5 020b 	rsb	r2, r5, fp
 800813e:	f042 0201 	orr.w	r2, r2, #1
 8008142:	6099      	str	r1, [r3, #8]
 8008144:	604a      	str	r2, [r1, #4]
 8008146:	f8da 3004 	ldr.w	r3, [sl, #4]
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	431d      	orrs	r5, r3
 8008150:	4648      	mov	r0, r9
 8008152:	f8ca 5004 	str.w	r5, [sl, #4]
 8008156:	f7ff fba9 	bl	80078ac <__malloc_unlock>
 800815a:	4638      	mov	r0, r7
 800815c:	e75c      	b.n	8008018 <_realloc_r+0x148>
 800815e:	6833      	ldr	r3, [r6, #0]
 8008160:	6003      	str	r3, [r0, #0]
 8008162:	6873      	ldr	r3, [r6, #4]
 8008164:	6043      	str	r3, [r0, #4]
 8008166:	2a1b      	cmp	r2, #27
 8008168:	d827      	bhi.n	80081ba <_realloc_r+0x2ea>
 800816a:	f100 0308 	add.w	r3, r0, #8
 800816e:	f106 0208 	add.w	r2, r6, #8
 8008172:	e6f2      	b.n	8007f5a <_realloc_r+0x8a>
 8008174:	463b      	mov	r3, r7
 8008176:	6832      	ldr	r2, [r6, #0]
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	6872      	ldr	r2, [r6, #4]
 800817c:	605a      	str	r2, [r3, #4]
 800817e:	68b2      	ldr	r2, [r6, #8]
 8008180:	609a      	str	r2, [r3, #8]
 8008182:	463e      	mov	r6, r7
 8008184:	4674      	mov	r4, lr
 8008186:	46d0      	mov	r8, sl
 8008188:	e733      	b.n	8007ff2 <_realloc_r+0x122>
 800818a:	eb08 0105 	add.w	r1, r8, r5
 800818e:	ebc5 0b0b 	rsb	fp, r5, fp
 8008192:	f04b 0201 	orr.w	r2, fp, #1
 8008196:	6099      	str	r1, [r3, #8]
 8008198:	604a      	str	r2, [r1, #4]
 800819a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800819e:	f003 0301 	and.w	r3, r3, #1
 80081a2:	431d      	orrs	r5, r3
 80081a4:	4648      	mov	r0, r9
 80081a6:	f846 5c04 	str.w	r5, [r6, #-4]
 80081aa:	f7ff fb7f 	bl	80078ac <__malloc_unlock>
 80081ae:	4630      	mov	r0, r6
 80081b0:	e732      	b.n	8008018 <_realloc_r+0x148>
 80081b2:	4631      	mov	r1, r6
 80081b4:	f7ff fb14 	bl	80077e0 <memmove>
 80081b8:	e6d5      	b.n	8007f66 <_realloc_r+0x96>
 80081ba:	68b3      	ldr	r3, [r6, #8]
 80081bc:	6083      	str	r3, [r0, #8]
 80081be:	68f3      	ldr	r3, [r6, #12]
 80081c0:	60c3      	str	r3, [r0, #12]
 80081c2:	2a24      	cmp	r2, #36	; 0x24
 80081c4:	d028      	beq.n	8008218 <_realloc_r+0x348>
 80081c6:	f100 0310 	add.w	r3, r0, #16
 80081ca:	f106 0210 	add.w	r2, r6, #16
 80081ce:	e6c4      	b.n	8007f5a <_realloc_r+0x8a>
 80081d0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80081d4:	f023 0303 	bic.w	r3, r3, #3
 80081d8:	441c      	add	r4, r3
 80081da:	e70a      	b.n	8007ff2 <_realloc_r+0x122>
 80081dc:	4631      	mov	r1, r6
 80081de:	4638      	mov	r0, r7
 80081e0:	4674      	mov	r4, lr
 80081e2:	46d0      	mov	r8, sl
 80081e4:	f7ff fafc 	bl	80077e0 <memmove>
 80081e8:	463e      	mov	r6, r7
 80081ea:	e702      	b.n	8007ff2 <_realloc_r+0x122>
 80081ec:	463a      	mov	r2, r7
 80081ee:	e6f7      	b.n	8007fe0 <_realloc_r+0x110>
 80081f0:	4631      	mov	r1, r6
 80081f2:	4638      	mov	r0, r7
 80081f4:	461c      	mov	r4, r3
 80081f6:	46d0      	mov	r8, sl
 80081f8:	f7ff faf2 	bl	80077e0 <memmove>
 80081fc:	463e      	mov	r6, r7
 80081fe:	e6f8      	b.n	8007ff2 <_realloc_r+0x122>
 8008200:	68b3      	ldr	r3, [r6, #8]
 8008202:	f8ca 3010 	str.w	r3, [sl, #16]
 8008206:	68f3      	ldr	r3, [r6, #12]
 8008208:	f8ca 3014 	str.w	r3, [sl, #20]
 800820c:	2a24      	cmp	r2, #36	; 0x24
 800820e:	d01b      	beq.n	8008248 <_realloc_r+0x378>
 8008210:	3610      	adds	r6, #16
 8008212:	f10a 0318 	add.w	r3, sl, #24
 8008216:	e7ae      	b.n	8008176 <_realloc_r+0x2a6>
 8008218:	6933      	ldr	r3, [r6, #16]
 800821a:	6103      	str	r3, [r0, #16]
 800821c:	6973      	ldr	r3, [r6, #20]
 800821e:	6143      	str	r3, [r0, #20]
 8008220:	f106 0218 	add.w	r2, r6, #24
 8008224:	f100 0318 	add.w	r3, r0, #24
 8008228:	e697      	b.n	8007f5a <_realloc_r+0x8a>
 800822a:	bf00      	nop
 800822c:	200005d8 	.word	0x200005d8
 8008230:	68b1      	ldr	r1, [r6, #8]
 8008232:	f8ca 1010 	str.w	r1, [sl, #16]
 8008236:	68f1      	ldr	r1, [r6, #12]
 8008238:	f8ca 1014 	str.w	r1, [sl, #20]
 800823c:	2a24      	cmp	r2, #36	; 0x24
 800823e:	d00f      	beq.n	8008260 <_realloc_r+0x390>
 8008240:	3610      	adds	r6, #16
 8008242:	f10a 0218 	add.w	r2, sl, #24
 8008246:	e6cb      	b.n	8007fe0 <_realloc_r+0x110>
 8008248:	6933      	ldr	r3, [r6, #16]
 800824a:	f8ca 3018 	str.w	r3, [sl, #24]
 800824e:	6973      	ldr	r3, [r6, #20]
 8008250:	f8ca 301c 	str.w	r3, [sl, #28]
 8008254:	3618      	adds	r6, #24
 8008256:	f10a 0320 	add.w	r3, sl, #32
 800825a:	e78c      	b.n	8008176 <_realloc_r+0x2a6>
 800825c:	463a      	mov	r2, r7
 800825e:	e764      	b.n	800812a <_realloc_r+0x25a>
 8008260:	6932      	ldr	r2, [r6, #16]
 8008262:	f8ca 2018 	str.w	r2, [sl, #24]
 8008266:	6972      	ldr	r2, [r6, #20]
 8008268:	f8ca 201c 	str.w	r2, [sl, #28]
 800826c:	3618      	adds	r6, #24
 800826e:	f10a 0220 	add.w	r2, sl, #32
 8008272:	e6b5      	b.n	8007fe0 <_realloc_r+0x110>
 8008274:	4631      	mov	r1, r6
 8008276:	4638      	mov	r0, r7
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	f7ff fab1 	bl	80077e0 <memmove>
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	e759      	b.n	8008136 <_realloc_r+0x266>
 8008282:	68b1      	ldr	r1, [r6, #8]
 8008284:	f8ca 1010 	str.w	r1, [sl, #16]
 8008288:	68f1      	ldr	r1, [r6, #12]
 800828a:	f8ca 1014 	str.w	r1, [sl, #20]
 800828e:	2a24      	cmp	r2, #36	; 0x24
 8008290:	d003      	beq.n	800829a <_realloc_r+0x3ca>
 8008292:	3610      	adds	r6, #16
 8008294:	f10a 0218 	add.w	r2, sl, #24
 8008298:	e747      	b.n	800812a <_realloc_r+0x25a>
 800829a:	6932      	ldr	r2, [r6, #16]
 800829c:	f8ca 2018 	str.w	r2, [sl, #24]
 80082a0:	6972      	ldr	r2, [r6, #20]
 80082a2:	f8ca 201c 	str.w	r2, [sl, #28]
 80082a6:	3618      	adds	r6, #24
 80082a8:	f10a 0220 	add.w	r2, sl, #32
 80082ac:	e73d      	b.n	800812a <_realloc_r+0x25a>
 80082ae:	bf00      	nop

080082b0 <_sbrk_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4c07      	ldr	r4, [pc, #28]	; (80082d0 <_sbrk_r+0x20>)
 80082b4:	2300      	movs	r3, #0
 80082b6:	4605      	mov	r5, r0
 80082b8:	4608      	mov	r0, r1
 80082ba:	6023      	str	r3, [r4, #0]
 80082bc:	f7fa f946 	bl	800254c <_sbrk>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d000      	beq.n	80082c6 <_sbrk_r+0x16>
 80082c4:	bd38      	pop	{r3, r4, r5, pc}
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0fb      	beq.n	80082c4 <_sbrk_r+0x14>
 80082cc:	602b      	str	r3, [r5, #0]
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	20000aec 	.word	0x20000aec

080082d4 <__sread>:
 80082d4:	b510      	push	{r4, lr}
 80082d6:	460c      	mov	r4, r1
 80082d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082dc:	f000 fc44 	bl	8008b68 <_read_r>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	db03      	blt.n	80082ec <__sread+0x18>
 80082e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80082e6:	4403      	add	r3, r0
 80082e8:	6523      	str	r3, [r4, #80]	; 0x50
 80082ea:	bd10      	pop	{r4, pc}
 80082ec:	89a3      	ldrh	r3, [r4, #12]
 80082ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082f2:	81a3      	strh	r3, [r4, #12]
 80082f4:	bd10      	pop	{r4, pc}
 80082f6:	bf00      	nop

080082f8 <__swrite>:
 80082f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082fc:	4616      	mov	r6, r2
 80082fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008302:	461f      	mov	r7, r3
 8008304:	05d3      	lsls	r3, r2, #23
 8008306:	460c      	mov	r4, r1
 8008308:	4605      	mov	r5, r0
 800830a:	d507      	bpl.n	800831c <__swrite+0x24>
 800830c:	2200      	movs	r2, #0
 800830e:	2302      	movs	r3, #2
 8008310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008314:	f000 fb9e 	bl	8008a54 <_lseek_r>
 8008318:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800831c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008320:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008324:	81a2      	strh	r2, [r4, #12]
 8008326:	463b      	mov	r3, r7
 8008328:	4632      	mov	r2, r6
 800832a:	4628      	mov	r0, r5
 800832c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008330:	f000 b8a2 	b.w	8008478 <_write_r>

08008334 <__sseek>:
 8008334:	b510      	push	{r4, lr}
 8008336:	460c      	mov	r4, r1
 8008338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800833c:	f000 fb8a 	bl	8008a54 <_lseek_r>
 8008340:	89a3      	ldrh	r3, [r4, #12]
 8008342:	1c42      	adds	r2, r0, #1
 8008344:	bf0e      	itee	eq
 8008346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800834a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800834e:	6520      	strne	r0, [r4, #80]	; 0x50
 8008350:	81a3      	strh	r3, [r4, #12]
 8008352:	bd10      	pop	{r4, pc}

08008354 <__sclose>:
 8008354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008358:	f000 b938 	b.w	80085cc <_close_r>

0800835c <__ssprint_r>:
 800835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008360:	6893      	ldr	r3, [r2, #8]
 8008362:	b083      	sub	sp, #12
 8008364:	4690      	mov	r8, r2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d072      	beq.n	8008450 <__ssprint_r+0xf4>
 800836a:	4683      	mov	fp, r0
 800836c:	f04f 0900 	mov.w	r9, #0
 8008370:	6816      	ldr	r6, [r2, #0]
 8008372:	6808      	ldr	r0, [r1, #0]
 8008374:	688b      	ldr	r3, [r1, #8]
 8008376:	460d      	mov	r5, r1
 8008378:	464c      	mov	r4, r9
 800837a:	2c00      	cmp	r4, #0
 800837c:	d045      	beq.n	800840a <__ssprint_r+0xae>
 800837e:	429c      	cmp	r4, r3
 8008380:	461f      	mov	r7, r3
 8008382:	469a      	mov	sl, r3
 8008384:	d346      	bcc.n	8008414 <__ssprint_r+0xb8>
 8008386:	89ab      	ldrh	r3, [r5, #12]
 8008388:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800838c:	d02d      	beq.n	80083ea <__ssprint_r+0x8e>
 800838e:	696f      	ldr	r7, [r5, #20]
 8008390:	6929      	ldr	r1, [r5, #16]
 8008392:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8008396:	ebc1 0a00 	rsb	sl, r1, r0
 800839a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800839e:	1c60      	adds	r0, r4, #1
 80083a0:	107f      	asrs	r7, r7, #1
 80083a2:	4450      	add	r0, sl
 80083a4:	42b8      	cmp	r0, r7
 80083a6:	463a      	mov	r2, r7
 80083a8:	bf84      	itt	hi
 80083aa:	4607      	movhi	r7, r0
 80083ac:	463a      	movhi	r2, r7
 80083ae:	055b      	lsls	r3, r3, #21
 80083b0:	d533      	bpl.n	800841a <__ssprint_r+0xbe>
 80083b2:	4611      	mov	r1, r2
 80083b4:	4658      	mov	r0, fp
 80083b6:	f7fe feef 	bl	8007198 <_malloc_r>
 80083ba:	2800      	cmp	r0, #0
 80083bc:	d037      	beq.n	800842e <__ssprint_r+0xd2>
 80083be:	4652      	mov	r2, sl
 80083c0:	6929      	ldr	r1, [r5, #16]
 80083c2:	9001      	str	r0, [sp, #4]
 80083c4:	f7fb ff0e 	bl	80041e4 <memcpy>
 80083c8:	89aa      	ldrh	r2, [r5, #12]
 80083ca:	9b01      	ldr	r3, [sp, #4]
 80083cc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80083d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083d4:	81aa      	strh	r2, [r5, #12]
 80083d6:	ebca 0207 	rsb	r2, sl, r7
 80083da:	eb03 000a 	add.w	r0, r3, sl
 80083de:	616f      	str	r7, [r5, #20]
 80083e0:	612b      	str	r3, [r5, #16]
 80083e2:	6028      	str	r0, [r5, #0]
 80083e4:	60aa      	str	r2, [r5, #8]
 80083e6:	4627      	mov	r7, r4
 80083e8:	46a2      	mov	sl, r4
 80083ea:	4652      	mov	r2, sl
 80083ec:	4649      	mov	r1, r9
 80083ee:	f7ff f9f7 	bl	80077e0 <memmove>
 80083f2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80083f6:	68ab      	ldr	r3, [r5, #8]
 80083f8:	6828      	ldr	r0, [r5, #0]
 80083fa:	1bdb      	subs	r3, r3, r7
 80083fc:	4450      	add	r0, sl
 80083fe:	1b14      	subs	r4, r2, r4
 8008400:	60ab      	str	r3, [r5, #8]
 8008402:	6028      	str	r0, [r5, #0]
 8008404:	f8c8 4008 	str.w	r4, [r8, #8]
 8008408:	b314      	cbz	r4, 8008450 <__ssprint_r+0xf4>
 800840a:	f8d6 9000 	ldr.w	r9, [r6]
 800840e:	6874      	ldr	r4, [r6, #4]
 8008410:	3608      	adds	r6, #8
 8008412:	e7b2      	b.n	800837a <__ssprint_r+0x1e>
 8008414:	4627      	mov	r7, r4
 8008416:	46a2      	mov	sl, r4
 8008418:	e7e7      	b.n	80083ea <__ssprint_r+0x8e>
 800841a:	4658      	mov	r0, fp
 800841c:	f7ff fd58 	bl	8007ed0 <_realloc_r>
 8008420:	4603      	mov	r3, r0
 8008422:	2800      	cmp	r0, #0
 8008424:	d1d7      	bne.n	80083d6 <__ssprint_r+0x7a>
 8008426:	6929      	ldr	r1, [r5, #16]
 8008428:	4658      	mov	r0, fp
 800842a:	f000 fa2b 	bl	8008884 <_free_r>
 800842e:	230c      	movs	r3, #12
 8008430:	f8cb 3000 	str.w	r3, [fp]
 8008434:	89ab      	ldrh	r3, [r5, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	81ab      	strh	r3, [r5, #12]
 8008442:	f8c8 2008 	str.w	r2, [r8, #8]
 8008446:	f8c8 2004 	str.w	r2, [r8, #4]
 800844a:	b003      	add	sp, #12
 800844c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008450:	2000      	movs	r0, #0
 8008452:	f8c8 0004 	str.w	r0, [r8, #4]
 8008456:	b003      	add	sp, #12
 8008458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800845c <__ascii_wctomb>:
 800845c:	b121      	cbz	r1, 8008468 <__ascii_wctomb+0xc>
 800845e:	2aff      	cmp	r2, #255	; 0xff
 8008460:	d804      	bhi.n	800846c <__ascii_wctomb+0x10>
 8008462:	700a      	strb	r2, [r1, #0]
 8008464:	2001      	movs	r0, #1
 8008466:	4770      	bx	lr
 8008468:	4608      	mov	r0, r1
 800846a:	4770      	bx	lr
 800846c:	238a      	movs	r3, #138	; 0x8a
 800846e:	6003      	str	r3, [r0, #0]
 8008470:	f04f 30ff 	mov.w	r0, #4294967295
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop

08008478 <_write_r>:
 8008478:	b570      	push	{r4, r5, r6, lr}
 800847a:	460d      	mov	r5, r1
 800847c:	4c08      	ldr	r4, [pc, #32]	; (80084a0 <_write_r+0x28>)
 800847e:	4611      	mov	r1, r2
 8008480:	4606      	mov	r6, r0
 8008482:	461a      	mov	r2, r3
 8008484:	4628      	mov	r0, r5
 8008486:	2300      	movs	r3, #0
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	f7f9 f94d 	bl	8001728 <_write>
 800848e:	1c43      	adds	r3, r0, #1
 8008490:	d000      	beq.n	8008494 <_write_r+0x1c>
 8008492:	bd70      	pop	{r4, r5, r6, pc}
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d0fb      	beq.n	8008492 <_write_r+0x1a>
 800849a:	6033      	str	r3, [r6, #0]
 800849c:	bd70      	pop	{r4, r5, r6, pc}
 800849e:	bf00      	nop
 80084a0:	20000aec 	.word	0x20000aec

080084a4 <__swsetup_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	4b30      	ldr	r3, [pc, #192]	; (8008568 <__swsetup_r+0xc4>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4605      	mov	r5, r0
 80084ac:	460c      	mov	r4, r1
 80084ae:	b113      	cbz	r3, 80084b6 <__swsetup_r+0x12>
 80084b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084b2:	2a00      	cmp	r2, #0
 80084b4:	d038      	beq.n	8008528 <__swsetup_r+0x84>
 80084b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084ba:	b293      	uxth	r3, r2
 80084bc:	0718      	lsls	r0, r3, #28
 80084be:	d50c      	bpl.n	80084da <__swsetup_r+0x36>
 80084c0:	6920      	ldr	r0, [r4, #16]
 80084c2:	b1a8      	cbz	r0, 80084f0 <__swsetup_r+0x4c>
 80084c4:	f013 0201 	ands.w	r2, r3, #1
 80084c8:	d01e      	beq.n	8008508 <__swsetup_r+0x64>
 80084ca:	6963      	ldr	r3, [r4, #20]
 80084cc:	2200      	movs	r2, #0
 80084ce:	425b      	negs	r3, r3
 80084d0:	61a3      	str	r3, [r4, #24]
 80084d2:	60a2      	str	r2, [r4, #8]
 80084d4:	b1f0      	cbz	r0, 8008514 <__swsetup_r+0x70>
 80084d6:	2000      	movs	r0, #0
 80084d8:	bd38      	pop	{r3, r4, r5, pc}
 80084da:	06d9      	lsls	r1, r3, #27
 80084dc:	d53c      	bpl.n	8008558 <__swsetup_r+0xb4>
 80084de:	0758      	lsls	r0, r3, #29
 80084e0:	d426      	bmi.n	8008530 <__swsetup_r+0x8c>
 80084e2:	6920      	ldr	r0, [r4, #16]
 80084e4:	f042 0308 	orr.w	r3, r2, #8
 80084e8:	81a3      	strh	r3, [r4, #12]
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d1e9      	bne.n	80084c4 <__swsetup_r+0x20>
 80084f0:	f403 7220 	and.w	r2, r3, #640	; 0x280
 80084f4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80084f8:	d0e4      	beq.n	80084c4 <__swsetup_r+0x20>
 80084fa:	4628      	mov	r0, r5
 80084fc:	4621      	mov	r1, r4
 80084fe:	f000 faef 	bl	8008ae0 <__smakebuf_r>
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	6920      	ldr	r0, [r4, #16]
 8008506:	e7dd      	b.n	80084c4 <__swsetup_r+0x20>
 8008508:	0799      	lsls	r1, r3, #30
 800850a:	bf58      	it	pl
 800850c:	6962      	ldrpl	r2, [r4, #20]
 800850e:	60a2      	str	r2, [r4, #8]
 8008510:	2800      	cmp	r0, #0
 8008512:	d1e0      	bne.n	80084d6 <__swsetup_r+0x32>
 8008514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008518:	061a      	lsls	r2, r3, #24
 800851a:	d5dd      	bpl.n	80084d8 <__swsetup_r+0x34>
 800851c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008520:	81a3      	strh	r3, [r4, #12]
 8008522:	f04f 30ff 	mov.w	r0, #4294967295
 8008526:	bd38      	pop	{r3, r4, r5, pc}
 8008528:	4618      	mov	r0, r3
 800852a:	f7fe fc71 	bl	8006e10 <__sinit>
 800852e:	e7c2      	b.n	80084b6 <__swsetup_r+0x12>
 8008530:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008532:	b151      	cbz	r1, 800854a <__swsetup_r+0xa6>
 8008534:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008538:	4299      	cmp	r1, r3
 800853a:	d004      	beq.n	8008546 <__swsetup_r+0xa2>
 800853c:	4628      	mov	r0, r5
 800853e:	f000 f9a1 	bl	8008884 <_free_r>
 8008542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008546:	2300      	movs	r3, #0
 8008548:	6323      	str	r3, [r4, #48]	; 0x30
 800854a:	2300      	movs	r3, #0
 800854c:	6920      	ldr	r0, [r4, #16]
 800854e:	6063      	str	r3, [r4, #4]
 8008550:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8008554:	6020      	str	r0, [r4, #0]
 8008556:	e7c5      	b.n	80084e4 <__swsetup_r+0x40>
 8008558:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800855c:	2309      	movs	r3, #9
 800855e:	602b      	str	r3, [r5, #0]
 8008560:	f04f 30ff 	mov.w	r0, #4294967295
 8008564:	81a2      	strh	r2, [r4, #12]
 8008566:	bd38      	pop	{r3, r4, r5, pc}
 8008568:	20000468 	.word	0x20000468

0800856c <_calloc_r>:
 800856c:	b510      	push	{r4, lr}
 800856e:	fb02 f101 	mul.w	r1, r2, r1
 8008572:	f7fe fe11 	bl	8007198 <_malloc_r>
 8008576:	4604      	mov	r4, r0
 8008578:	b1d8      	cbz	r0, 80085b2 <_calloc_r+0x46>
 800857a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800857e:	f022 0203 	bic.w	r2, r2, #3
 8008582:	3a04      	subs	r2, #4
 8008584:	2a24      	cmp	r2, #36	; 0x24
 8008586:	d818      	bhi.n	80085ba <_calloc_r+0x4e>
 8008588:	2a13      	cmp	r2, #19
 800858a:	d914      	bls.n	80085b6 <_calloc_r+0x4a>
 800858c:	2300      	movs	r3, #0
 800858e:	2a1b      	cmp	r2, #27
 8008590:	6003      	str	r3, [r0, #0]
 8008592:	6043      	str	r3, [r0, #4]
 8008594:	d916      	bls.n	80085c4 <_calloc_r+0x58>
 8008596:	2a24      	cmp	r2, #36	; 0x24
 8008598:	6083      	str	r3, [r0, #8]
 800859a:	60c3      	str	r3, [r0, #12]
 800859c:	bf11      	iteee	ne
 800859e:	f100 0210 	addne.w	r2, r0, #16
 80085a2:	6103      	streq	r3, [r0, #16]
 80085a4:	6143      	streq	r3, [r0, #20]
 80085a6:	f100 0218 	addeq.w	r2, r0, #24
 80085aa:	2300      	movs	r3, #0
 80085ac:	6013      	str	r3, [r2, #0]
 80085ae:	6053      	str	r3, [r2, #4]
 80085b0:	6093      	str	r3, [r2, #8]
 80085b2:	4620      	mov	r0, r4
 80085b4:	bd10      	pop	{r4, pc}
 80085b6:	4602      	mov	r2, r0
 80085b8:	e7f7      	b.n	80085aa <_calloc_r+0x3e>
 80085ba:	2100      	movs	r1, #0
 80085bc:	f7fb feac 	bl	8004318 <memset>
 80085c0:	4620      	mov	r0, r4
 80085c2:	bd10      	pop	{r4, pc}
 80085c4:	f100 0208 	add.w	r2, r0, #8
 80085c8:	e7ef      	b.n	80085aa <_calloc_r+0x3e>
 80085ca:	bf00      	nop

080085cc <_close_r>:
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	4c07      	ldr	r4, [pc, #28]	; (80085ec <_close_r+0x20>)
 80085d0:	2300      	movs	r3, #0
 80085d2:	4605      	mov	r5, r0
 80085d4:	4608      	mov	r0, r1
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	f7f9 ff9a 	bl	8002510 <_close>
 80085dc:	1c43      	adds	r3, r0, #1
 80085de:	d000      	beq.n	80085e2 <_close_r+0x16>
 80085e0:	bd38      	pop	{r3, r4, r5, pc}
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d0fb      	beq.n	80085e0 <_close_r+0x14>
 80085e8:	602b      	str	r3, [r5, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	20000aec 	.word	0x20000aec

080085f0 <_fclose_r>:
 80085f0:	2900      	cmp	r1, #0
 80085f2:	d03d      	beq.n	8008670 <_fclose_r+0x80>
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	4605      	mov	r5, r0
 80085f8:	460c      	mov	r4, r1
 80085fa:	b108      	cbz	r0, 8008600 <_fclose_r+0x10>
 80085fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80085fe:	b37b      	cbz	r3, 8008660 <_fclose_r+0x70>
 8008600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008604:	b90b      	cbnz	r3, 800860a <_fclose_r+0x1a>
 8008606:	2000      	movs	r0, #0
 8008608:	bd70      	pop	{r4, r5, r6, pc}
 800860a:	4621      	mov	r1, r4
 800860c:	4628      	mov	r0, r5
 800860e:	f000 f831 	bl	8008674 <__sflush_r>
 8008612:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008614:	4606      	mov	r6, r0
 8008616:	b133      	cbz	r3, 8008626 <_fclose_r+0x36>
 8008618:	69e1      	ldr	r1, [r4, #28]
 800861a:	4628      	mov	r0, r5
 800861c:	4798      	blx	r3
 800861e:	2800      	cmp	r0, #0
 8008620:	bfb8      	it	lt
 8008622:	f04f 36ff 	movlt.w	r6, #4294967295
 8008626:	89a3      	ldrh	r3, [r4, #12]
 8008628:	061b      	lsls	r3, r3, #24
 800862a:	d41c      	bmi.n	8008666 <_fclose_r+0x76>
 800862c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800862e:	b141      	cbz	r1, 8008642 <_fclose_r+0x52>
 8008630:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008634:	4299      	cmp	r1, r3
 8008636:	d002      	beq.n	800863e <_fclose_r+0x4e>
 8008638:	4628      	mov	r0, r5
 800863a:	f000 f923 	bl	8008884 <_free_r>
 800863e:	2300      	movs	r3, #0
 8008640:	6323      	str	r3, [r4, #48]	; 0x30
 8008642:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008644:	b121      	cbz	r1, 8008650 <_fclose_r+0x60>
 8008646:	4628      	mov	r0, r5
 8008648:	f000 f91c 	bl	8008884 <_free_r>
 800864c:	2300      	movs	r3, #0
 800864e:	6463      	str	r3, [r4, #68]	; 0x44
 8008650:	f7fe fbe4 	bl	8006e1c <__sfp_lock_acquire>
 8008654:	2300      	movs	r3, #0
 8008656:	81a3      	strh	r3, [r4, #12]
 8008658:	f7fe fbe2 	bl	8006e20 <__sfp_lock_release>
 800865c:	4630      	mov	r0, r6
 800865e:	bd70      	pop	{r4, r5, r6, pc}
 8008660:	f7fe fbd6 	bl	8006e10 <__sinit>
 8008664:	e7cc      	b.n	8008600 <_fclose_r+0x10>
 8008666:	6921      	ldr	r1, [r4, #16]
 8008668:	4628      	mov	r0, r5
 800866a:	f000 f90b 	bl	8008884 <_free_r>
 800866e:	e7dd      	b.n	800862c <_fclose_r+0x3c>
 8008670:	2000      	movs	r0, #0
 8008672:	4770      	bx	lr

08008674 <__sflush_r>:
 8008674:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8008678:	b29a      	uxth	r2, r3
 800867a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800867e:	460d      	mov	r5, r1
 8008680:	0711      	lsls	r1, r2, #28
 8008682:	4680      	mov	r8, r0
 8008684:	d43c      	bmi.n	8008700 <__sflush_r+0x8c>
 8008686:	686a      	ldr	r2, [r5, #4]
 8008688:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800868c:	2a00      	cmp	r2, #0
 800868e:	81ab      	strh	r3, [r5, #12]
 8008690:	dd73      	ble.n	800877a <__sflush_r+0x106>
 8008692:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8008694:	2c00      	cmp	r4, #0
 8008696:	d04b      	beq.n	8008730 <__sflush_r+0xbc>
 8008698:	b29b      	uxth	r3, r3
 800869a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800869e:	2100      	movs	r1, #0
 80086a0:	b292      	uxth	r2, r2
 80086a2:	f8d8 6000 	ldr.w	r6, [r8]
 80086a6:	f8c8 1000 	str.w	r1, [r8]
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	d069      	beq.n	8008782 <__sflush_r+0x10e>
 80086ae:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80086b0:	075f      	lsls	r7, r3, #29
 80086b2:	d505      	bpl.n	80086c0 <__sflush_r+0x4c>
 80086b4:	6869      	ldr	r1, [r5, #4]
 80086b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80086b8:	1a52      	subs	r2, r2, r1
 80086ba:	b10b      	cbz	r3, 80086c0 <__sflush_r+0x4c>
 80086bc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80086be:	1ad2      	subs	r2, r2, r3
 80086c0:	2300      	movs	r3, #0
 80086c2:	69e9      	ldr	r1, [r5, #28]
 80086c4:	4640      	mov	r0, r8
 80086c6:	47a0      	blx	r4
 80086c8:	1c44      	adds	r4, r0, #1
 80086ca:	d03c      	beq.n	8008746 <__sflush_r+0xd2>
 80086cc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80086d0:	692a      	ldr	r2, [r5, #16]
 80086d2:	602a      	str	r2, [r5, #0]
 80086d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086d8:	2200      	movs	r2, #0
 80086da:	81ab      	strh	r3, [r5, #12]
 80086dc:	04db      	lsls	r3, r3, #19
 80086de:	606a      	str	r2, [r5, #4]
 80086e0:	d449      	bmi.n	8008776 <__sflush_r+0x102>
 80086e2:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80086e4:	f8c8 6000 	str.w	r6, [r8]
 80086e8:	b311      	cbz	r1, 8008730 <__sflush_r+0xbc>
 80086ea:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80086ee:	4299      	cmp	r1, r3
 80086f0:	d002      	beq.n	80086f8 <__sflush_r+0x84>
 80086f2:	4640      	mov	r0, r8
 80086f4:	f000 f8c6 	bl	8008884 <_free_r>
 80086f8:	2000      	movs	r0, #0
 80086fa:	6328      	str	r0, [r5, #48]	; 0x30
 80086fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008700:	692e      	ldr	r6, [r5, #16]
 8008702:	b1ae      	cbz	r6, 8008730 <__sflush_r+0xbc>
 8008704:	682c      	ldr	r4, [r5, #0]
 8008706:	602e      	str	r6, [r5, #0]
 8008708:	0790      	lsls	r0, r2, #30
 800870a:	bf0c      	ite	eq
 800870c:	696b      	ldreq	r3, [r5, #20]
 800870e:	2300      	movne	r3, #0
 8008710:	1ba4      	subs	r4, r4, r6
 8008712:	60ab      	str	r3, [r5, #8]
 8008714:	e00a      	b.n	800872c <__sflush_r+0xb8>
 8008716:	4623      	mov	r3, r4
 8008718:	4632      	mov	r2, r6
 800871a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800871c:	69e9      	ldr	r1, [r5, #28]
 800871e:	4640      	mov	r0, r8
 8008720:	47b8      	blx	r7
 8008722:	2800      	cmp	r0, #0
 8008724:	eba4 0400 	sub.w	r4, r4, r0
 8008728:	4406      	add	r6, r0
 800872a:	dd04      	ble.n	8008736 <__sflush_r+0xc2>
 800872c:	2c00      	cmp	r4, #0
 800872e:	dcf2      	bgt.n	8008716 <__sflush_r+0xa2>
 8008730:	2000      	movs	r0, #0
 8008732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008736:	89ab      	ldrh	r3, [r5, #12]
 8008738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800873c:	81ab      	strh	r3, [r5, #12]
 800873e:	f04f 30ff 	mov.w	r0, #4294967295
 8008742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008746:	f8d8 2000 	ldr.w	r2, [r8]
 800874a:	2a1d      	cmp	r2, #29
 800874c:	d8f3      	bhi.n	8008736 <__sflush_r+0xc2>
 800874e:	4b1a      	ldr	r3, [pc, #104]	; (80087b8 <__sflush_r+0x144>)
 8008750:	40d3      	lsrs	r3, r2
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	f083 0401 	eor.w	r4, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0eb      	beq.n	8008736 <__sflush_r+0xc2>
 800875e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8008762:	6929      	ldr	r1, [r5, #16]
 8008764:	6029      	str	r1, [r5, #0]
 8008766:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800876a:	04d9      	lsls	r1, r3, #19
 800876c:	606c      	str	r4, [r5, #4]
 800876e:	81ab      	strh	r3, [r5, #12]
 8008770:	d5b7      	bpl.n	80086e2 <__sflush_r+0x6e>
 8008772:	2a00      	cmp	r2, #0
 8008774:	d1b5      	bne.n	80086e2 <__sflush_r+0x6e>
 8008776:	6528      	str	r0, [r5, #80]	; 0x50
 8008778:	e7b3      	b.n	80086e2 <__sflush_r+0x6e>
 800877a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800877c:	2a00      	cmp	r2, #0
 800877e:	dc88      	bgt.n	8008692 <__sflush_r+0x1e>
 8008780:	e7d6      	b.n	8008730 <__sflush_r+0xbc>
 8008782:	2301      	movs	r3, #1
 8008784:	69e9      	ldr	r1, [r5, #28]
 8008786:	4640      	mov	r0, r8
 8008788:	47a0      	blx	r4
 800878a:	1c43      	adds	r3, r0, #1
 800878c:	4602      	mov	r2, r0
 800878e:	d002      	beq.n	8008796 <__sflush_r+0x122>
 8008790:	89ab      	ldrh	r3, [r5, #12]
 8008792:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8008794:	e78c      	b.n	80086b0 <__sflush_r+0x3c>
 8008796:	f8d8 3000 	ldr.w	r3, [r8]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0f8      	beq.n	8008790 <__sflush_r+0x11c>
 800879e:	2b1d      	cmp	r3, #29
 80087a0:	d001      	beq.n	80087a6 <__sflush_r+0x132>
 80087a2:	2b16      	cmp	r3, #22
 80087a4:	d102      	bne.n	80087ac <__sflush_r+0x138>
 80087a6:	f8c8 6000 	str.w	r6, [r8]
 80087aa:	e7c1      	b.n	8008730 <__sflush_r+0xbc>
 80087ac:	89ab      	ldrh	r3, [r5, #12]
 80087ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b2:	81ab      	strh	r3, [r5, #12]
 80087b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b8:	20400001 	.word	0x20400001

080087bc <_fflush_r>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	4604      	mov	r4, r0
 80087c0:	b082      	sub	sp, #8
 80087c2:	b108      	cbz	r0, 80087c8 <_fflush_r+0xc>
 80087c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80087c6:	b153      	cbz	r3, 80087de <_fflush_r+0x22>
 80087c8:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80087cc:	b908      	cbnz	r0, 80087d2 <_fflush_r+0x16>
 80087ce:	b002      	add	sp, #8
 80087d0:	bd10      	pop	{r4, pc}
 80087d2:	4620      	mov	r0, r4
 80087d4:	b002      	add	sp, #8
 80087d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087da:	f7ff bf4b 	b.w	8008674 <__sflush_r>
 80087de:	9101      	str	r1, [sp, #4]
 80087e0:	f7fe fb16 	bl	8006e10 <__sinit>
 80087e4:	9901      	ldr	r1, [sp, #4]
 80087e6:	e7ef      	b.n	80087c8 <_fflush_r+0xc>

080087e8 <_malloc_trim_r>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	4f23      	ldr	r7, [pc, #140]	; (8008878 <_malloc_trim_r+0x90>)
 80087ec:	460c      	mov	r4, r1
 80087ee:	4606      	mov	r6, r0
 80087f0:	f7ff f85a 	bl	80078a8 <__malloc_lock>
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	685d      	ldr	r5, [r3, #4]
 80087f8:	f025 0503 	bic.w	r5, r5, #3
 80087fc:	1b29      	subs	r1, r5, r4
 80087fe:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8008802:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8008806:	f021 010f 	bic.w	r1, r1, #15
 800880a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800880e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8008812:	db07      	blt.n	8008824 <_malloc_trim_r+0x3c>
 8008814:	2100      	movs	r1, #0
 8008816:	4630      	mov	r0, r6
 8008818:	f7ff fd4a 	bl	80082b0 <_sbrk_r>
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	442b      	add	r3, r5
 8008820:	4298      	cmp	r0, r3
 8008822:	d004      	beq.n	800882e <_malloc_trim_r+0x46>
 8008824:	4630      	mov	r0, r6
 8008826:	f7ff f841 	bl	80078ac <__malloc_unlock>
 800882a:	2000      	movs	r0, #0
 800882c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800882e:	4261      	negs	r1, r4
 8008830:	4630      	mov	r0, r6
 8008832:	f7ff fd3d 	bl	80082b0 <_sbrk_r>
 8008836:	3001      	adds	r0, #1
 8008838:	d00d      	beq.n	8008856 <_malloc_trim_r+0x6e>
 800883a:	4b10      	ldr	r3, [pc, #64]	; (800887c <_malloc_trim_r+0x94>)
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	6819      	ldr	r1, [r3, #0]
 8008840:	1b2d      	subs	r5, r5, r4
 8008842:	f045 0501 	orr.w	r5, r5, #1
 8008846:	4630      	mov	r0, r6
 8008848:	1b09      	subs	r1, r1, r4
 800884a:	6055      	str	r5, [r2, #4]
 800884c:	6019      	str	r1, [r3, #0]
 800884e:	f7ff f82d 	bl	80078ac <__malloc_unlock>
 8008852:	2001      	movs	r0, #1
 8008854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008856:	2100      	movs	r1, #0
 8008858:	4630      	mov	r0, r6
 800885a:	f7ff fd29 	bl	80082b0 <_sbrk_r>
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	1a83      	subs	r3, r0, r2
 8008862:	2b0f      	cmp	r3, #15
 8008864:	ddde      	ble.n	8008824 <_malloc_trim_r+0x3c>
 8008866:	4c06      	ldr	r4, [pc, #24]	; (8008880 <_malloc_trim_r+0x98>)
 8008868:	4904      	ldr	r1, [pc, #16]	; (800887c <_malloc_trim_r+0x94>)
 800886a:	6824      	ldr	r4, [r4, #0]
 800886c:	f043 0301 	orr.w	r3, r3, #1
 8008870:	1b00      	subs	r0, r0, r4
 8008872:	6053      	str	r3, [r2, #4]
 8008874:	6008      	str	r0, [r1, #0]
 8008876:	e7d5      	b.n	8008824 <_malloc_trim_r+0x3c>
 8008878:	200005d8 	.word	0x200005d8
 800887c:	20000a80 	.word	0x20000a80
 8008880:	200009e4 	.word	0x200009e4

08008884 <_free_r>:
 8008884:	2900      	cmp	r1, #0
 8008886:	d045      	beq.n	8008914 <_free_r+0x90>
 8008888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888c:	460d      	mov	r5, r1
 800888e:	4680      	mov	r8, r0
 8008890:	f7ff f80a 	bl	80078a8 <__malloc_lock>
 8008894:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8008898:	496a      	ldr	r1, [pc, #424]	; (8008a44 <_free_r+0x1c0>)
 800889a:	f027 0301 	bic.w	r3, r7, #1
 800889e:	f1a5 0408 	sub.w	r4, r5, #8
 80088a2:	18e2      	adds	r2, r4, r3
 80088a4:	688e      	ldr	r6, [r1, #8]
 80088a6:	6850      	ldr	r0, [r2, #4]
 80088a8:	42b2      	cmp	r2, r6
 80088aa:	f020 0003 	bic.w	r0, r0, #3
 80088ae:	d062      	beq.n	8008976 <_free_r+0xf2>
 80088b0:	07fe      	lsls	r6, r7, #31
 80088b2:	6050      	str	r0, [r2, #4]
 80088b4:	d40b      	bmi.n	80088ce <_free_r+0x4a>
 80088b6:	f855 7c08 	ldr.w	r7, [r5, #-8]
 80088ba:	1be4      	subs	r4, r4, r7
 80088bc:	f101 0e08 	add.w	lr, r1, #8
 80088c0:	68a5      	ldr	r5, [r4, #8]
 80088c2:	4575      	cmp	r5, lr
 80088c4:	443b      	add	r3, r7
 80088c6:	d06f      	beq.n	80089a8 <_free_r+0x124>
 80088c8:	68e7      	ldr	r7, [r4, #12]
 80088ca:	60ef      	str	r7, [r5, #12]
 80088cc:	60bd      	str	r5, [r7, #8]
 80088ce:	1815      	adds	r5, r2, r0
 80088d0:	686d      	ldr	r5, [r5, #4]
 80088d2:	07ed      	lsls	r5, r5, #31
 80088d4:	d542      	bpl.n	800895c <_free_r+0xd8>
 80088d6:	f043 0201 	orr.w	r2, r3, #1
 80088da:	6062      	str	r2, [r4, #4]
 80088dc:	50e3      	str	r3, [r4, r3]
 80088de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088e2:	d218      	bcs.n	8008916 <_free_r+0x92>
 80088e4:	08db      	lsrs	r3, r3, #3
 80088e6:	1c5a      	adds	r2, r3, #1
 80088e8:	684d      	ldr	r5, [r1, #4]
 80088ea:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 80088ee:	60a7      	str	r7, [r4, #8]
 80088f0:	2001      	movs	r0, #1
 80088f2:	109b      	asrs	r3, r3, #2
 80088f4:	fa00 f303 	lsl.w	r3, r0, r3
 80088f8:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 80088fc:	431d      	orrs	r5, r3
 80088fe:	3808      	subs	r0, #8
 8008900:	60e0      	str	r0, [r4, #12]
 8008902:	604d      	str	r5, [r1, #4]
 8008904:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 8008908:	60fc      	str	r4, [r7, #12]
 800890a:	4640      	mov	r0, r8
 800890c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008910:	f7fe bfcc 	b.w	80078ac <__malloc_unlock>
 8008914:	4770      	bx	lr
 8008916:	0a5a      	lsrs	r2, r3, #9
 8008918:	2a04      	cmp	r2, #4
 800891a:	d853      	bhi.n	80089c4 <_free_r+0x140>
 800891c:	099a      	lsrs	r2, r3, #6
 800891e:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8008922:	007f      	lsls	r7, r7, #1
 8008924:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8008928:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 800892c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 8008930:	4944      	ldr	r1, [pc, #272]	; (8008a44 <_free_r+0x1c0>)
 8008932:	3808      	subs	r0, #8
 8008934:	4290      	cmp	r0, r2
 8008936:	d04d      	beq.n	80089d4 <_free_r+0x150>
 8008938:	6851      	ldr	r1, [r2, #4]
 800893a:	f021 0103 	bic.w	r1, r1, #3
 800893e:	428b      	cmp	r3, r1
 8008940:	d202      	bcs.n	8008948 <_free_r+0xc4>
 8008942:	6892      	ldr	r2, [r2, #8]
 8008944:	4290      	cmp	r0, r2
 8008946:	d1f7      	bne.n	8008938 <_free_r+0xb4>
 8008948:	68d0      	ldr	r0, [r2, #12]
 800894a:	60e0      	str	r0, [r4, #12]
 800894c:	60a2      	str	r2, [r4, #8]
 800894e:	6084      	str	r4, [r0, #8]
 8008950:	60d4      	str	r4, [r2, #12]
 8008952:	4640      	mov	r0, r8
 8008954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008958:	f7fe bfa8 	b.w	80078ac <__malloc_unlock>
 800895c:	6895      	ldr	r5, [r2, #8]
 800895e:	4f3a      	ldr	r7, [pc, #232]	; (8008a48 <_free_r+0x1c4>)
 8008960:	42bd      	cmp	r5, r7
 8008962:	4403      	add	r3, r0
 8008964:	d03f      	beq.n	80089e6 <_free_r+0x162>
 8008966:	68d0      	ldr	r0, [r2, #12]
 8008968:	60e8      	str	r0, [r5, #12]
 800896a:	f043 0201 	orr.w	r2, r3, #1
 800896e:	6085      	str	r5, [r0, #8]
 8008970:	6062      	str	r2, [r4, #4]
 8008972:	50e3      	str	r3, [r4, r3]
 8008974:	e7b3      	b.n	80088de <_free_r+0x5a>
 8008976:	07ff      	lsls	r7, r7, #31
 8008978:	4403      	add	r3, r0
 800897a:	d407      	bmi.n	800898c <_free_r+0x108>
 800897c:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8008980:	1aa4      	subs	r4, r4, r2
 8008982:	4413      	add	r3, r2
 8008984:	68a0      	ldr	r0, [r4, #8]
 8008986:	68e2      	ldr	r2, [r4, #12]
 8008988:	60c2      	str	r2, [r0, #12]
 800898a:	6090      	str	r0, [r2, #8]
 800898c:	4a2f      	ldr	r2, [pc, #188]	; (8008a4c <_free_r+0x1c8>)
 800898e:	6812      	ldr	r2, [r2, #0]
 8008990:	f043 0001 	orr.w	r0, r3, #1
 8008994:	4293      	cmp	r3, r2
 8008996:	6060      	str	r0, [r4, #4]
 8008998:	608c      	str	r4, [r1, #8]
 800899a:	d3b6      	bcc.n	800890a <_free_r+0x86>
 800899c:	4b2c      	ldr	r3, [pc, #176]	; (8008a50 <_free_r+0x1cc>)
 800899e:	4640      	mov	r0, r8
 80089a0:	6819      	ldr	r1, [r3, #0]
 80089a2:	f7ff ff21 	bl	80087e8 <_malloc_trim_r>
 80089a6:	e7b0      	b.n	800890a <_free_r+0x86>
 80089a8:	1811      	adds	r1, r2, r0
 80089aa:	6849      	ldr	r1, [r1, #4]
 80089ac:	07c9      	lsls	r1, r1, #31
 80089ae:	d444      	bmi.n	8008a3a <_free_r+0x1b6>
 80089b0:	6891      	ldr	r1, [r2, #8]
 80089b2:	68d2      	ldr	r2, [r2, #12]
 80089b4:	60ca      	str	r2, [r1, #12]
 80089b6:	4403      	add	r3, r0
 80089b8:	f043 0001 	orr.w	r0, r3, #1
 80089bc:	6091      	str	r1, [r2, #8]
 80089be:	6060      	str	r0, [r4, #4]
 80089c0:	50e3      	str	r3, [r4, r3]
 80089c2:	e7a2      	b.n	800890a <_free_r+0x86>
 80089c4:	2a14      	cmp	r2, #20
 80089c6:	d817      	bhi.n	80089f8 <_free_r+0x174>
 80089c8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 80089cc:	007f      	lsls	r7, r7, #1
 80089ce:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 80089d2:	e7a9      	b.n	8008928 <_free_r+0xa4>
 80089d4:	10aa      	asrs	r2, r5, #2
 80089d6:	684b      	ldr	r3, [r1, #4]
 80089d8:	2501      	movs	r5, #1
 80089da:	fa05 f202 	lsl.w	r2, r5, r2
 80089de:	4313      	orrs	r3, r2
 80089e0:	604b      	str	r3, [r1, #4]
 80089e2:	4602      	mov	r2, r0
 80089e4:	e7b1      	b.n	800894a <_free_r+0xc6>
 80089e6:	f043 0201 	orr.w	r2, r3, #1
 80089ea:	614c      	str	r4, [r1, #20]
 80089ec:	610c      	str	r4, [r1, #16]
 80089ee:	60e5      	str	r5, [r4, #12]
 80089f0:	60a5      	str	r5, [r4, #8]
 80089f2:	6062      	str	r2, [r4, #4]
 80089f4:	50e3      	str	r3, [r4, r3]
 80089f6:	e788      	b.n	800890a <_free_r+0x86>
 80089f8:	2a54      	cmp	r2, #84	; 0x54
 80089fa:	d806      	bhi.n	8008a0a <_free_r+0x186>
 80089fc:	0b1a      	lsrs	r2, r3, #12
 80089fe:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8008a02:	007f      	lsls	r7, r7, #1
 8008a04:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 8008a08:	e78e      	b.n	8008928 <_free_r+0xa4>
 8008a0a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008a0e:	d806      	bhi.n	8008a1e <_free_r+0x19a>
 8008a10:	0bda      	lsrs	r2, r3, #15
 8008a12:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8008a16:	007f      	lsls	r7, r7, #1
 8008a18:	f102 0577 	add.w	r5, r2, #119	; 0x77
 8008a1c:	e784      	b.n	8008928 <_free_r+0xa4>
 8008a1e:	f240 5054 	movw	r0, #1364	; 0x554
 8008a22:	4282      	cmp	r2, r0
 8008a24:	d806      	bhi.n	8008a34 <_free_r+0x1b0>
 8008a26:	0c9a      	lsrs	r2, r3, #18
 8008a28:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8008a2c:	007f      	lsls	r7, r7, #1
 8008a2e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 8008a32:	e779      	b.n	8008928 <_free_r+0xa4>
 8008a34:	27fe      	movs	r7, #254	; 0xfe
 8008a36:	257e      	movs	r5, #126	; 0x7e
 8008a38:	e776      	b.n	8008928 <_free_r+0xa4>
 8008a3a:	f043 0201 	orr.w	r2, r3, #1
 8008a3e:	6062      	str	r2, [r4, #4]
 8008a40:	50e3      	str	r3, [r4, r3]
 8008a42:	e762      	b.n	800890a <_free_r+0x86>
 8008a44:	200005d8 	.word	0x200005d8
 8008a48:	200005e0 	.word	0x200005e0
 8008a4c:	200009e0 	.word	0x200009e0
 8008a50:	20000a7c 	.word	0x20000a7c

08008a54 <_lseek_r>:
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	460d      	mov	r5, r1
 8008a58:	4c08      	ldr	r4, [pc, #32]	; (8008a7c <_lseek_r+0x28>)
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	461a      	mov	r2, r3
 8008a60:	4628      	mov	r0, r5
 8008a62:	2300      	movs	r3, #0
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	f7f9 fd37 	bl	80024d8 <_lseek>
 8008a6a:	1c43      	adds	r3, r0, #1
 8008a6c:	d000      	beq.n	8008a70 <_lseek_r+0x1c>
 8008a6e:	bd70      	pop	{r4, r5, r6, pc}
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0fb      	beq.n	8008a6e <_lseek_r+0x1a>
 8008a76:	6033      	str	r3, [r6, #0]
 8008a78:	bd70      	pop	{r4, r5, r6, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000aec 	.word	0x20000aec

08008a80 <__swhatbuf_r>:
 8008a80:	b570      	push	{r4, r5, r6, lr}
 8008a82:	460d      	mov	r5, r1
 8008a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a88:	2900      	cmp	r1, #0
 8008a8a:	b090      	sub	sp, #64	; 0x40
 8008a8c:	4614      	mov	r4, r2
 8008a8e:	461e      	mov	r6, r3
 8008a90:	db14      	blt.n	8008abc <__swhatbuf_r+0x3c>
 8008a92:	aa01      	add	r2, sp, #4
 8008a94:	f000 f87e 	bl	8008b94 <_fstat_r>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	db0f      	blt.n	8008abc <__swhatbuf_r+0x3c>
 8008a9c:	9a02      	ldr	r2, [sp, #8]
 8008a9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008aa2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8008aa6:	fab2 f282 	clz	r2, r2
 8008aaa:	0952      	lsrs	r2, r2, #5
 8008aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ab0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008ab4:	6032      	str	r2, [r6, #0]
 8008ab6:	6023      	str	r3, [r4, #0]
 8008ab8:	b010      	add	sp, #64	; 0x40
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	89a8      	ldrh	r0, [r5, #12]
 8008abe:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8008ac2:	b282      	uxth	r2, r0
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	6030      	str	r0, [r6, #0]
 8008ac8:	b11a      	cbz	r2, 8008ad2 <__swhatbuf_r+0x52>
 8008aca:	2340      	movs	r3, #64	; 0x40
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	b010      	add	sp, #64	; 0x40
 8008ad0:	bd70      	pop	{r4, r5, r6, pc}
 8008ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	b010      	add	sp, #64	; 0x40
 8008adc:	bd70      	pop	{r4, r5, r6, pc}
 8008ade:	bf00      	nop

08008ae0 <__smakebuf_r>:
 8008ae0:	898a      	ldrh	r2, [r1, #12]
 8008ae2:	0792      	lsls	r2, r2, #30
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	d506      	bpl.n	8008af6 <__smakebuf_r+0x16>
 8008ae8:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008aec:	2101      	movs	r1, #1
 8008aee:	601a      	str	r2, [r3, #0]
 8008af0:	611a      	str	r2, [r3, #16]
 8008af2:	6159      	str	r1, [r3, #20]
 8008af4:	4770      	bx	lr
 8008af6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008af8:	b083      	sub	sp, #12
 8008afa:	ab01      	add	r3, sp, #4
 8008afc:	466a      	mov	r2, sp
 8008afe:	460c      	mov	r4, r1
 8008b00:	4605      	mov	r5, r0
 8008b02:	f7ff ffbd 	bl	8008a80 <__swhatbuf_r>
 8008b06:	9900      	ldr	r1, [sp, #0]
 8008b08:	4606      	mov	r6, r0
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	f7fe fb44 	bl	8007198 <_malloc_r>
 8008b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b14:	b1d0      	cbz	r0, 8008b4c <__smakebuf_r+0x6c>
 8008b16:	9a01      	ldr	r2, [sp, #4]
 8008b18:	4f12      	ldr	r7, [pc, #72]	; (8008b64 <__smakebuf_r+0x84>)
 8008b1a:	9900      	ldr	r1, [sp, #0]
 8008b1c:	63ef      	str	r7, [r5, #60]	; 0x3c
 8008b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b22:	81a3      	strh	r3, [r4, #12]
 8008b24:	6020      	str	r0, [r4, #0]
 8008b26:	6120      	str	r0, [r4, #16]
 8008b28:	6161      	str	r1, [r4, #20]
 8008b2a:	b91a      	cbnz	r2, 8008b34 <__smakebuf_r+0x54>
 8008b2c:	4333      	orrs	r3, r6
 8008b2e:	81a3      	strh	r3, [r4, #12]
 8008b30:	b003      	add	sp, #12
 8008b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b34:	4628      	mov	r0, r5
 8008b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b3a:	f000 f83f 	bl	8008bbc <_isatty_r>
 8008b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d0f2      	beq.n	8008b2c <__smakebuf_r+0x4c>
 8008b46:	f043 0301 	orr.w	r3, r3, #1
 8008b4a:	e7ef      	b.n	8008b2c <__smakebuf_r+0x4c>
 8008b4c:	059a      	lsls	r2, r3, #22
 8008b4e:	d4ef      	bmi.n	8008b30 <__smakebuf_r+0x50>
 8008b50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b54:	f043 0302 	orr.w	r3, r3, #2
 8008b58:	2101      	movs	r1, #1
 8008b5a:	81a3      	strh	r3, [r4, #12]
 8008b5c:	6022      	str	r2, [r4, #0]
 8008b5e:	6122      	str	r2, [r4, #16]
 8008b60:	6161      	str	r1, [r4, #20]
 8008b62:	e7e5      	b.n	8008b30 <__smakebuf_r+0x50>
 8008b64:	08006d15 	.word	0x08006d15

08008b68 <_read_r>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	460d      	mov	r5, r1
 8008b6c:	4c08      	ldr	r4, [pc, #32]	; (8008b90 <_read_r+0x28>)
 8008b6e:	4611      	mov	r1, r2
 8008b70:	4606      	mov	r6, r0
 8008b72:	461a      	mov	r2, r3
 8008b74:	4628      	mov	r0, r5
 8008b76:	2300      	movs	r3, #0
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	f7f9 fcbb 	bl	80024f4 <_read>
 8008b7e:	1c43      	adds	r3, r0, #1
 8008b80:	d000      	beq.n	8008b84 <_read_r+0x1c>
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0fb      	beq.n	8008b82 <_read_r+0x1a>
 8008b8a:	6033      	str	r3, [r6, #0]
 8008b8c:	bd70      	pop	{r4, r5, r6, pc}
 8008b8e:	bf00      	nop
 8008b90:	20000aec 	.word	0x20000aec

08008b94 <_fstat_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	460b      	mov	r3, r1
 8008b98:	4c07      	ldr	r4, [pc, #28]	; (8008bb8 <_fstat_r+0x24>)
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	6023      	str	r3, [r4, #0]
 8008ba4:	f7f9 fcbe 	bl	8002524 <_fstat>
 8008ba8:	1c43      	adds	r3, r0, #1
 8008baa:	d000      	beq.n	8008bae <_fstat_r+0x1a>
 8008bac:	bd38      	pop	{r3, r4, r5, pc}
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d0fb      	beq.n	8008bac <_fstat_r+0x18>
 8008bb4:	602b      	str	r3, [r5, #0]
 8008bb6:	bd38      	pop	{r3, r4, r5, pc}
 8008bb8:	20000aec 	.word	0x20000aec

08008bbc <_isatty_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	4c07      	ldr	r4, [pc, #28]	; (8008bdc <_isatty_r+0x20>)
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	4605      	mov	r5, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	6023      	str	r3, [r4, #0]
 8008bc8:	f7f9 fd00 	bl	80025cc <_isatty>
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	d000      	beq.n	8008bd2 <_isatty_r+0x16>
 8008bd0:	bd38      	pop	{r3, r4, r5, pc}
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d0fb      	beq.n	8008bd0 <_isatty_r+0x14>
 8008bd8:	602b      	str	r3, [r5, #0]
 8008bda:	bd38      	pop	{r3, r4, r5, pc}
 8008bdc:	20000aec 	.word	0x20000aec

08008be0 <__aeabi_uldivmod>:
 8008be0:	b953      	cbnz	r3, 8008bf8 <__aeabi_uldivmod+0x18>
 8008be2:	b94a      	cbnz	r2, 8008bf8 <__aeabi_uldivmod+0x18>
 8008be4:	2900      	cmp	r1, #0
 8008be6:	bf08      	it	eq
 8008be8:	2800      	cmpeq	r0, #0
 8008bea:	bf1c      	itt	ne
 8008bec:	f04f 31ff 	movne.w	r1, #4294967295
 8008bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8008bf4:	f000 b97e 	b.w	8008ef4 <__aeabi_idiv0>
 8008bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8008bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008c00:	f000 f806 	bl	8008c10 <__udivmoddi4>
 8008c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c0c:	b004      	add	sp, #16
 8008c0e:	4770      	bx	lr

08008c10 <__udivmoddi4>:
 8008c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c14:	468c      	mov	ip, r1
 8008c16:	460e      	mov	r6, r1
 8008c18:	4604      	mov	r4, r0
 8008c1a:	9d08      	ldr	r5, [sp, #32]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d150      	bne.n	8008cc2 <__udivmoddi4+0xb2>
 8008c20:	428a      	cmp	r2, r1
 8008c22:	4617      	mov	r7, r2
 8008c24:	d96c      	bls.n	8008d00 <__udivmoddi4+0xf0>
 8008c26:	fab2 fe82 	clz	lr, r2
 8008c2a:	f1be 0f00 	cmp.w	lr, #0
 8008c2e:	d00b      	beq.n	8008c48 <__udivmoddi4+0x38>
 8008c30:	f1ce 0420 	rsb	r4, lr, #32
 8008c34:	fa20 f404 	lsr.w	r4, r0, r4
 8008c38:	fa01 f60e 	lsl.w	r6, r1, lr
 8008c3c:	ea44 0c06 	orr.w	ip, r4, r6
 8008c40:	fa02 f70e 	lsl.w	r7, r2, lr
 8008c44:	fa00 f40e 	lsl.w	r4, r0, lr
 8008c48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8008c4c:	0c22      	lsrs	r2, r4, #16
 8008c4e:	fbbc f0f9 	udiv	r0, ip, r9
 8008c52:	fa1f f887 	uxth.w	r8, r7
 8008c56:	fb09 c610 	mls	r6, r9, r0, ip
 8008c5a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8008c5e:	fb00 f308 	mul.w	r3, r0, r8
 8008c62:	42b3      	cmp	r3, r6
 8008c64:	d909      	bls.n	8008c7a <__udivmoddi4+0x6a>
 8008c66:	19f6      	adds	r6, r6, r7
 8008c68:	f100 32ff 	add.w	r2, r0, #4294967295
 8008c6c:	f080 8122 	bcs.w	8008eb4 <__udivmoddi4+0x2a4>
 8008c70:	42b3      	cmp	r3, r6
 8008c72:	f240 811f 	bls.w	8008eb4 <__udivmoddi4+0x2a4>
 8008c76:	3802      	subs	r0, #2
 8008c78:	443e      	add	r6, r7
 8008c7a:	1af6      	subs	r6, r6, r3
 8008c7c:	b2a2      	uxth	r2, r4
 8008c7e:	fbb6 f3f9 	udiv	r3, r6, r9
 8008c82:	fb09 6613 	mls	r6, r9, r3, r6
 8008c86:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8008c8a:	fb03 f808 	mul.w	r8, r3, r8
 8008c8e:	45a0      	cmp	r8, r4
 8008c90:	d909      	bls.n	8008ca6 <__udivmoddi4+0x96>
 8008c92:	19e4      	adds	r4, r4, r7
 8008c94:	f103 32ff 	add.w	r2, r3, #4294967295
 8008c98:	f080 810a 	bcs.w	8008eb0 <__udivmoddi4+0x2a0>
 8008c9c:	45a0      	cmp	r8, r4
 8008c9e:	f240 8107 	bls.w	8008eb0 <__udivmoddi4+0x2a0>
 8008ca2:	3b02      	subs	r3, #2
 8008ca4:	443c      	add	r4, r7
 8008ca6:	ebc8 0404 	rsb	r4, r8, r4
 8008caa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008cae:	2100      	movs	r1, #0
 8008cb0:	2d00      	cmp	r5, #0
 8008cb2:	d062      	beq.n	8008d7a <__udivmoddi4+0x16a>
 8008cb4:	fa24 f40e 	lsr.w	r4, r4, lr
 8008cb8:	2300      	movs	r3, #0
 8008cba:	602c      	str	r4, [r5, #0]
 8008cbc:	606b      	str	r3, [r5, #4]
 8008cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc2:	428b      	cmp	r3, r1
 8008cc4:	d907      	bls.n	8008cd6 <__udivmoddi4+0xc6>
 8008cc6:	2d00      	cmp	r5, #0
 8008cc8:	d055      	beq.n	8008d76 <__udivmoddi4+0x166>
 8008cca:	2100      	movs	r1, #0
 8008ccc:	e885 0041 	stmia.w	r5, {r0, r6}
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd6:	fab3 f183 	clz	r1, r3
 8008cda:	2900      	cmp	r1, #0
 8008cdc:	f040 8090 	bne.w	8008e00 <__udivmoddi4+0x1f0>
 8008ce0:	42b3      	cmp	r3, r6
 8008ce2:	d302      	bcc.n	8008cea <__udivmoddi4+0xda>
 8008ce4:	4282      	cmp	r2, r0
 8008ce6:	f200 80f8 	bhi.w	8008eda <__udivmoddi4+0x2ca>
 8008cea:	1a84      	subs	r4, r0, r2
 8008cec:	eb66 0603 	sbc.w	r6, r6, r3
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	46b4      	mov	ip, r6
 8008cf4:	2d00      	cmp	r5, #0
 8008cf6:	d040      	beq.n	8008d7a <__udivmoddi4+0x16a>
 8008cf8:	e885 1010 	stmia.w	r5, {r4, ip}
 8008cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d00:	b912      	cbnz	r2, 8008d08 <__udivmoddi4+0xf8>
 8008d02:	2701      	movs	r7, #1
 8008d04:	fbb7 f7f2 	udiv	r7, r7, r2
 8008d08:	fab7 fe87 	clz	lr, r7
 8008d0c:	f1be 0f00 	cmp.w	lr, #0
 8008d10:	d135      	bne.n	8008d7e <__udivmoddi4+0x16e>
 8008d12:	1bf3      	subs	r3, r6, r7
 8008d14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8008d18:	fa1f fc87 	uxth.w	ip, r7
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	fbb3 f0f8 	udiv	r0, r3, r8
 8008d22:	0c22      	lsrs	r2, r4, #16
 8008d24:	fb08 3610 	mls	r6, r8, r0, r3
 8008d28:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8008d2c:	fb0c f300 	mul.w	r3, ip, r0
 8008d30:	42b3      	cmp	r3, r6
 8008d32:	d907      	bls.n	8008d44 <__udivmoddi4+0x134>
 8008d34:	19f6      	adds	r6, r6, r7
 8008d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8008d3a:	d202      	bcs.n	8008d42 <__udivmoddi4+0x132>
 8008d3c:	42b3      	cmp	r3, r6
 8008d3e:	f200 80ce 	bhi.w	8008ede <__udivmoddi4+0x2ce>
 8008d42:	4610      	mov	r0, r2
 8008d44:	1af6      	subs	r6, r6, r3
 8008d46:	b2a2      	uxth	r2, r4
 8008d48:	fbb6 f3f8 	udiv	r3, r6, r8
 8008d4c:	fb08 6613 	mls	r6, r8, r3, r6
 8008d50:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8008d54:	fb0c fc03 	mul.w	ip, ip, r3
 8008d58:	45a4      	cmp	ip, r4
 8008d5a:	d907      	bls.n	8008d6c <__udivmoddi4+0x15c>
 8008d5c:	19e4      	adds	r4, r4, r7
 8008d5e:	f103 32ff 	add.w	r2, r3, #4294967295
 8008d62:	d202      	bcs.n	8008d6a <__udivmoddi4+0x15a>
 8008d64:	45a4      	cmp	ip, r4
 8008d66:	f200 80b5 	bhi.w	8008ed4 <__udivmoddi4+0x2c4>
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	ebcc 0404 	rsb	r4, ip, r4
 8008d70:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8008d74:	e79c      	b.n	8008cb0 <__udivmoddi4+0xa0>
 8008d76:	4629      	mov	r1, r5
 8008d78:	4628      	mov	r0, r5
 8008d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7e:	f1ce 0120 	rsb	r1, lr, #32
 8008d82:	fa06 f30e 	lsl.w	r3, r6, lr
 8008d86:	fa07 f70e 	lsl.w	r7, r7, lr
 8008d8a:	fa20 f901 	lsr.w	r9, r0, r1
 8008d8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8008d92:	40ce      	lsrs	r6, r1
 8008d94:	ea49 0903 	orr.w	r9, r9, r3
 8008d98:	fbb6 faf8 	udiv	sl, r6, r8
 8008d9c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8008da0:	fb08 661a 	mls	r6, r8, sl, r6
 8008da4:	fa1f fc87 	uxth.w	ip, r7
 8008da8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8008dac:	fb0a f20c 	mul.w	r2, sl, ip
 8008db0:	429a      	cmp	r2, r3
 8008db2:	fa00 f40e 	lsl.w	r4, r0, lr
 8008db6:	d90a      	bls.n	8008dce <__udivmoddi4+0x1be>
 8008db8:	19db      	adds	r3, r3, r7
 8008dba:	f10a 31ff 	add.w	r1, sl, #4294967295
 8008dbe:	f080 8087 	bcs.w	8008ed0 <__udivmoddi4+0x2c0>
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	f240 8084 	bls.w	8008ed0 <__udivmoddi4+0x2c0>
 8008dc8:	f1aa 0a02 	sub.w	sl, sl, #2
 8008dcc:	443b      	add	r3, r7
 8008dce:	1a9b      	subs	r3, r3, r2
 8008dd0:	fa1f f989 	uxth.w	r9, r9
 8008dd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8008dd8:	fb08 3311 	mls	r3, r8, r1, r3
 8008ddc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8008de0:	fb01 f60c 	mul.w	r6, r1, ip
 8008de4:	429e      	cmp	r6, r3
 8008de6:	d907      	bls.n	8008df8 <__udivmoddi4+0x1e8>
 8008de8:	19db      	adds	r3, r3, r7
 8008dea:	f101 32ff 	add.w	r2, r1, #4294967295
 8008dee:	d26b      	bcs.n	8008ec8 <__udivmoddi4+0x2b8>
 8008df0:	429e      	cmp	r6, r3
 8008df2:	d969      	bls.n	8008ec8 <__udivmoddi4+0x2b8>
 8008df4:	3902      	subs	r1, #2
 8008df6:	443b      	add	r3, r7
 8008df8:	1b9b      	subs	r3, r3, r6
 8008dfa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008dfe:	e78e      	b.n	8008d1e <__udivmoddi4+0x10e>
 8008e00:	f1c1 0e20 	rsb	lr, r1, #32
 8008e04:	fa22 f40e 	lsr.w	r4, r2, lr
 8008e08:	408b      	lsls	r3, r1
 8008e0a:	4323      	orrs	r3, r4
 8008e0c:	fa20 f70e 	lsr.w	r7, r0, lr
 8008e10:	fa06 f401 	lsl.w	r4, r6, r1
 8008e14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8008e18:	fa26 f60e 	lsr.w	r6, r6, lr
 8008e1c:	433c      	orrs	r4, r7
 8008e1e:	fbb6 f9fc 	udiv	r9, r6, ip
 8008e22:	0c27      	lsrs	r7, r4, #16
 8008e24:	fb0c 6619 	mls	r6, ip, r9, r6
 8008e28:	fa1f f883 	uxth.w	r8, r3
 8008e2c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8008e30:	fb09 f708 	mul.w	r7, r9, r8
 8008e34:	42b7      	cmp	r7, r6
 8008e36:	fa02 f201 	lsl.w	r2, r2, r1
 8008e3a:	fa00 fa01 	lsl.w	sl, r0, r1
 8008e3e:	d908      	bls.n	8008e52 <__udivmoddi4+0x242>
 8008e40:	18f6      	adds	r6, r6, r3
 8008e42:	f109 30ff 	add.w	r0, r9, #4294967295
 8008e46:	d241      	bcs.n	8008ecc <__udivmoddi4+0x2bc>
 8008e48:	42b7      	cmp	r7, r6
 8008e4a:	d93f      	bls.n	8008ecc <__udivmoddi4+0x2bc>
 8008e4c:	f1a9 0902 	sub.w	r9, r9, #2
 8008e50:	441e      	add	r6, r3
 8008e52:	1bf6      	subs	r6, r6, r7
 8008e54:	b2a0      	uxth	r0, r4
 8008e56:	fbb6 f4fc 	udiv	r4, r6, ip
 8008e5a:	fb0c 6614 	mls	r6, ip, r4, r6
 8008e5e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8008e62:	fb04 f808 	mul.w	r8, r4, r8
 8008e66:	45b8      	cmp	r8, r7
 8008e68:	d907      	bls.n	8008e7a <__udivmoddi4+0x26a>
 8008e6a:	18ff      	adds	r7, r7, r3
 8008e6c:	f104 30ff 	add.w	r0, r4, #4294967295
 8008e70:	d228      	bcs.n	8008ec4 <__udivmoddi4+0x2b4>
 8008e72:	45b8      	cmp	r8, r7
 8008e74:	d926      	bls.n	8008ec4 <__udivmoddi4+0x2b4>
 8008e76:	3c02      	subs	r4, #2
 8008e78:	441f      	add	r7, r3
 8008e7a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8008e7e:	ebc8 0707 	rsb	r7, r8, r7
 8008e82:	fba0 8902 	umull	r8, r9, r0, r2
 8008e86:	454f      	cmp	r7, r9
 8008e88:	4644      	mov	r4, r8
 8008e8a:	464e      	mov	r6, r9
 8008e8c:	d314      	bcc.n	8008eb8 <__udivmoddi4+0x2a8>
 8008e8e:	d029      	beq.n	8008ee4 <__udivmoddi4+0x2d4>
 8008e90:	b365      	cbz	r5, 8008eec <__udivmoddi4+0x2dc>
 8008e92:	ebba 0304 	subs.w	r3, sl, r4
 8008e96:	eb67 0706 	sbc.w	r7, r7, r6
 8008e9a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8008e9e:	40cb      	lsrs	r3, r1
 8008ea0:	40cf      	lsrs	r7, r1
 8008ea2:	ea4e 0303 	orr.w	r3, lr, r3
 8008ea6:	e885 0088 	stmia.w	r5, {r3, r7}
 8008eaa:	2100      	movs	r1, #0
 8008eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	e6f8      	b.n	8008ca6 <__udivmoddi4+0x96>
 8008eb4:	4610      	mov	r0, r2
 8008eb6:	e6e0      	b.n	8008c7a <__udivmoddi4+0x6a>
 8008eb8:	ebb8 0402 	subs.w	r4, r8, r2
 8008ebc:	eb69 0603 	sbc.w	r6, r9, r3
 8008ec0:	3801      	subs	r0, #1
 8008ec2:	e7e5      	b.n	8008e90 <__udivmoddi4+0x280>
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	e7d8      	b.n	8008e7a <__udivmoddi4+0x26a>
 8008ec8:	4611      	mov	r1, r2
 8008eca:	e795      	b.n	8008df8 <__udivmoddi4+0x1e8>
 8008ecc:	4681      	mov	r9, r0
 8008ece:	e7c0      	b.n	8008e52 <__udivmoddi4+0x242>
 8008ed0:	468a      	mov	sl, r1
 8008ed2:	e77c      	b.n	8008dce <__udivmoddi4+0x1be>
 8008ed4:	3b02      	subs	r3, #2
 8008ed6:	443c      	add	r4, r7
 8008ed8:	e748      	b.n	8008d6c <__udivmoddi4+0x15c>
 8008eda:	4608      	mov	r0, r1
 8008edc:	e70a      	b.n	8008cf4 <__udivmoddi4+0xe4>
 8008ede:	3802      	subs	r0, #2
 8008ee0:	443e      	add	r6, r7
 8008ee2:	e72f      	b.n	8008d44 <__udivmoddi4+0x134>
 8008ee4:	45c2      	cmp	sl, r8
 8008ee6:	d3e7      	bcc.n	8008eb8 <__udivmoddi4+0x2a8>
 8008ee8:	463e      	mov	r6, r7
 8008eea:	e7d1      	b.n	8008e90 <__udivmoddi4+0x280>
 8008eec:	4629      	mov	r1, r5
 8008eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef2:	bf00      	nop

08008ef4 <__aeabi_idiv0>:
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	41545323 	.word	0x41545323
 8008efc:	3031252c 	.word	0x3031252c
 8008f00:	252c756c 	.word	0x252c756c
 8008f04:	252c6433 	.word	0x252c6433
 8008f08:	756c3031 	.word	0x756c3031
 8008f0c:	00000a24 	.word	0x00000a24
 8008f10:	00007325 	.word	0x00007325
 8008f14:	54554223 	.word	0x54554223
 8008f18:	0a24312c 	.word	0x0a24312c
 8008f1c:	00000000 	.word	0x00000000
 8008f20:	54554223 	.word	0x54554223
 8008f24:	0a24322c 	.word	0x0a24322c
 8008f28:	00000000 	.word	0x00000000
 8008f2c:	37257325 	.word	0x37257325
 8008f30:	25732564 	.word	0x25732564
 8008f34:	73256437 	.word	0x73256437
 8008f38:	24643725 	.word	0x24643725
 8008f3c:	0000000a 	.word	0x0000000a
 8008f40:	0000002c 	.word	0x0000002c
 8008f44:	58535523 	.word	0x58535523
 8008f48:	5523002c 	.word	0x5523002c
 8008f4c:	002c5844 	.word	0x002c5844
 8008f50:	58534423 	.word	0x58534423
 8008f54:	4423002c 	.word	0x4423002c
 8008f58:	002c5844 	.word	0x002c5844
 8008f5c:	504f5423 	.word	0x504f5423
 8008f60:	4223002c 	.word	0x4223002c
 8008f64:	002c544f 	.word	0x002c544f
 8008f68:	58585823 	.word	0x58585823
 8008f6c:	4623002c 	.word	0x4623002c
 8008f70:	002c4c41 	.word	0x002c4c41
 8008f74:	3353494c 	.word	0x3353494c
 8008f78:	535f4844 	.word	0x535f4844
 8008f7c:	444f7465 	.word	0x444f7465
 8008f80:	6f642052 	.word	0x6f642052
 8008f84:	2e2e656e 	.word	0x2e2e656e
 8008f88:	0000002e 	.word	0x0000002e
 8008f8c:	3353494c 	.word	0x3353494c
 8008f90:	535f4844 	.word	0x535f4844
 8008f94:	6f4d7465 	.word	0x6f4d7465
 8008f98:	64206564 	.word	0x64206564
 8008f9c:	2e656e6f 	.word	0x2e656e6f
 8008fa0:	00002e2e 	.word	0x00002e2e
 8008fa4:	3353494c 	.word	0x3353494c
 8008fa8:	535f4844 	.word	0x535f4844
 8008fac:	75467465 	.word	0x75467465
 8008fb0:	63536c6c 	.word	0x63536c6c
 8008fb4:	20656c61 	.word	0x20656c61
 8008fb8:	656e6f64 	.word	0x656e6f64
 8008fbc:	002e2e2e 	.word	0x002e2e2e
 8008fc0:	3353494c 	.word	0x3353494c
 8008fc4:	535f4844 	.word	0x535f4844
 8008fc8:	78417465 	.word	0x78417465
 8008fcc:	64207369 	.word	0x64207369
 8008fd0:	2e656e6f 	.word	0x2e656e6f
 8008fd4:	00002e2e 	.word	0x00002e2e
 8008fd8:	3353494c 	.word	0x3353494c
 8008fdc:	535f4844 	.word	0x535f4844
 8008fe0:	6e497465 	.word	0x6e497465
 8008fe4:	68543174 	.word	0x68543174
 8008fe8:	68737265 	.word	0x68737265
 8008fec:	20646c6f 	.word	0x20646c6f
 8008ff0:	656e6f64 	.word	0x656e6f64
 8008ff4:	002e2e2e 	.word	0x002e2e2e
 8008ff8:	3353494c 	.word	0x3353494c
 8008ffc:	535f4844 	.word	0x535f4844
 8009000:	6e497465 	.word	0x6e497465
 8009004:	6e6f4374 	.word	0x6e6f4374
 8009008:	75676966 	.word	0x75676966
 800900c:	69746172 	.word	0x69746172
 8009010:	64206e6f 	.word	0x64206e6f
 8009014:	2e656e6f 	.word	0x2e656e6f
 8009018:	00002e2e 	.word	0x00002e2e
 800901c:	3353494c 	.word	0x3353494c
 8009020:	535f4844 	.word	0x535f4844
 8009024:	6e497465 	.word	0x6e497465
 8009028:	646f4d74 	.word	0x646f4d74
 800902c:	6f642065 	.word	0x6f642065
 8009030:	2e2e656e 	.word	0x2e2e656e
 8009034:	0000002e 	.word	0x0000002e
 8009038:	51455223 	.word	0x51455223
 800903c:	0000002c 	.word	0x0000002c
 8009040:	444e4523 	.word	0x444e4523
 8009044:	0000002c 	.word	0x0000002c
 8009048:	4e4f4323 	.word	0x4e4f4323
 800904c:	0000002c 	.word	0x0000002c
 8009050:	52455323 	.word	0x52455323
 8009054:	0000662c 	.word	0x0000662c
 8009058:	52455323 	.word	0x52455323
 800905c:	00006e2c 	.word	0x00006e2c
 8009060:	41545323 	.word	0x41545323
 8009064:	0000002c 	.word	0x0000002c
 8009068:	47564123 	.word	0x47564123
 800906c:	0000612c 	.word	0x0000612c
 8009070:	47564123 	.word	0x47564123
 8009074:	0000702c 	.word	0x0000702c

08009078 <atanlo>:
 8009078:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 8009088:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

08009098 <atanhi>:
 8009098:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 80090a8:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
 80090b8:	74727173 00000000 0000000a              sqrt........

080090c4 <zeroes.7258>:
 80090c4:	30303030 30303030 30303030 30303030     0000000000000000
 80090d4:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 80090e4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 80090f4:	00000000 33323130 37363534 62613938     ....0123456789ab
 8009104:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8009114:	00000030                                0...

08009118 <blanks.7257>:
 8009118:	20202020 20202020 20202020 20202020                     
 8009128:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 8009138:	00000043 49534f50 00000058 0000002e     C...POSIX.......

08009148 <__mprec_tens>:
 8009148:	00000000 3ff00000 00000000 40240000     .......?......$@
 8009158:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8009168:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8009178:	00000000 412e8480 00000000 416312d0     .......A......cA
 8009188:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8009198:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 80091a8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 80091b8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 80091c8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 80091d8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 80091e8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 80091f8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8009208:	79d99db4 44ea7843                       ...yCx.D

08009210 <__mprec_bigtens>:
 8009210:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8009220:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8009230:	7f73bf3c 75154fdd                       <.s..O.u

08009238 <p05.6087>:
 8009238:	00000005 00000019 0000007d              ........}...

08009244 <_ctype_>:
 8009244:	20202000 20202020 28282020 20282828     .         ((((( 
 8009254:	20202020 20202020 20202020 20202020                     
 8009264:	10108820 10101010 10101010 10101010      ...............
 8009274:	04040410 04040404 10040404 10101010     ................
 8009284:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8009294:	01010101 01010101 01010101 10101010     ................
 80092a4:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80092b4:	02020202 02020202 02020202 10101010     ................
 80092c4:	00000020 00000000 00000000 00000000      ...............
	...
