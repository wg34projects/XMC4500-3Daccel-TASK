
./bin/main.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	d1 0f 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 a1 08 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00c140 	.word	0x0c00c140
 800024c:	20000000 	.word	0x20000000
 8000250:	000009e8 	.word	0x000009e8
 8000254:	0c00cb28 	.word	0x0c00cb28
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00c140 	.word	0x0c00c140
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00c140 	.word	0x0c00c140
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200009e8 	.word	0x200009e8
 800027c:	000000b8 	.word	0x000000b8
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000294:	08001e69 	.word	0x08001e69
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800399d 	.word	0x0800399d
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08001a99 	.word	0x08001a99

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <initMEMSsensor>:
#include "lis3dh_library.h"

uint8_t initMEMSsensor()
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
	uint8_t error = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	71fb      	strb	r3, [r7, #7]

    //set ODR (turn ON device)
    if(LIS3DH_SetODR(LIS3DH_ODR_100Hz) == 1)
 80002be:	2005      	movs	r0, #5
 80002c0:	f001 f8f8 	bl	80014b4 <LIS3DH_SetODR>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d103      	bne.n	80002d2 <initMEMSsensor+0x1e>
    {
        printf("LIS3DH_SetODR done...\n");
 80002ca:	4828      	ldr	r0, [pc, #160]	; (800036c <initMEMSsensor+0xb8>)
 80002cc:	f003 fcbe 	bl	8003c4c <puts>
 80002d0:	e008      	b.n	80002e4 <initMEMSsensor+0x30>
    }
	else
	{
		error++;
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	3301      	adds	r3, #1
 80002d6:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80002d8:	4b25      	ldr	r3, [pc, #148]	; (8000370 <initMEMSsensor+0xbc>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	3301      	adds	r3, #1
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	4b23      	ldr	r3, [pc, #140]	; (8000370 <initMEMSsensor+0xbc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	}

    //set PowerMode
    if(LIS3DH_SetMode(LIS3DH_NORMAL) == 1)
 80002e4:	2002      	movs	r0, #2
 80002e6:	f001 f993 	bl	8001610 <LIS3DH_SetMode>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d103      	bne.n	80002f8 <initMEMSsensor+0x44>
    {

        printf("LIS3DH_SetMode done...\n");
 80002f0:	4820      	ldr	r0, [pc, #128]	; (8000374 <initMEMSsensor+0xc0>)
 80002f2:	f003 fcab 	bl	8003c4c <puts>
 80002f6:	e008      	b.n	800030a <initMEMSsensor+0x56>
    }
	else
	{
		error++;
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	3301      	adds	r3, #1
 80002fc:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80002fe:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <initMEMSsensor+0xbc>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	3301      	adds	r3, #1
 8000304:	b2da      	uxtb	r2, r3
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <initMEMSsensor+0xbc>)
 8000308:	701a      	strb	r2, [r3, #0]
	}

    //set Fullscale
    if(LIS3DH_SetFullScale(LIS3DH_FULLSCALE_4) == 1)
 800030a:	2001      	movs	r0, #1
 800030c:	f001 fa2a 	bl	8001764 <LIS3DH_SetFullScale>
 8000310:	4603      	mov	r3, r0
 8000312:	2b01      	cmp	r3, #1
 8000314:	d103      	bne.n	800031e <initMEMSsensor+0x6a>
    {

        printf("LIS3DH_SetFullScale done...\n");
 8000316:	4818      	ldr	r0, [pc, #96]	; (8000378 <initMEMSsensor+0xc4>)
 8000318:	f003 fc98 	bl	8003c4c <puts>
 800031c:	e008      	b.n	8000330 <initMEMSsensor+0x7c>
    }
	else
	{
		error++;
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	3301      	adds	r3, #1
 8000322:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <initMEMSsensor+0xbc>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	3301      	adds	r3, #1
 800032a:	b2da      	uxtb	r2, r3
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <initMEMSsensor+0xbc>)
 800032e:	701a      	strb	r2, [r3, #0]
	}

    //set axis Enable
    response = LIS3DH_SetAxis(LIS3DH_X_ENABLE | LIS3DH_Y_ENABLE | LIS3DH_Z_ENABLE);
 8000330:	2007      	movs	r0, #7
 8000332:	f001 f9eb 	bl	800170c <LIS3DH_SetAxis>
 8000336:	4603      	mov	r3, r0
 8000338:	461a      	mov	r2, r3
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <initMEMSsensor+0xc8>)
 800033c:	701a      	strb	r2, [r3, #0]
    if(response == 1)
 800033e:	4b0f      	ldr	r3, [pc, #60]	; (800037c <initMEMSsensor+0xc8>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d103      	bne.n	800034e <initMEMSsensor+0x9a>
    {
        printf("LIS3DH_SetAxis done...\n");
 8000346:	480e      	ldr	r0, [pc, #56]	; (8000380 <initMEMSsensor+0xcc>)
 8000348:	f003 fc80 	bl	8003c4c <puts>
 800034c:	e008      	b.n	8000360 <initMEMSsensor+0xac>
    }
	else
	{
		error++;
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	3301      	adds	r3, #1
 8000352:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <initMEMSsensor+0xbc>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b04      	ldr	r3, [pc, #16]	; (8000370 <initMEMSsensor+0xbc>)
 800035e:	701a      	strb	r2, [r3, #0]
	}

	return error;
 8000360:	79fb      	ldrb	r3, [r7, #7]
}
 8000362:	4618      	mov	r0, r3
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	0800bac0 	.word	0x0800bac0
 8000370:	20000a82 	.word	0x20000a82
 8000374:	0800bad8 	.word	0x0800bad8
 8000378:	0800baf0 	.word	0x0800baf0
 800037c:	20000a81 	.word	0x20000a81
 8000380:	0800bb0c 	.word	0x0800bb0c

08000384 <configMEMSsensor>:

uint8_t configMEMSsensor()
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
	uint8_t error = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	71fb      	strb	r3, [r7, #7]

	//set Interrupt Threshold 
	if(LIS3DH_SetInt1Threshold(20) == 1)
 800038e:	2014      	movs	r0, #20
 8000390:	f001 fb16 	bl	80019c0 <LIS3DH_SetInt1Threshold>
 8000394:	4603      	mov	r3, r0
 8000396:	2b01      	cmp	r3, #1
 8000398:	d103      	bne.n	80003a2 <configMEMSsensor+0x1e>
	{
    	printf("LIS3DH_SetInt1Thershold done...\n");
 800039a:	483b      	ldr	r0, [pc, #236]	; (8000488 <configMEMSsensor+0x104>)
 800039c:	f003 fc56 	bl	8003c4c <puts>
 80003a0:	e008      	b.n	80003b4 <configMEMSsensor+0x30>
	}
	else
	{
		error++;
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	3301      	adds	r3, #1
 80003a6:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80003a8:	4b38      	ldr	r3, [pc, #224]	; (800048c <configMEMSsensor+0x108>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	3301      	adds	r3, #1
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	4b36      	ldr	r3, [pc, #216]	; (800048c <configMEMSsensor+0x108>)
 80003b2:	701a      	strb	r2, [r3, #0]
	}
	
	//set Interrupt configuration (all enabled)
	response = LIS3DH_SetIntConfiguration(LIS3DH_INT1_ZHIE_ENABLE | LIS3DH_INT1_ZLIE_ENABLE |
 80003b4:	203f      	movs	r0, #63	; 0x3f
 80003b6:	f001 fa31 	bl	800181c <LIS3DH_SetIntConfiguration>
 80003ba:	4603      	mov	r3, r0
 80003bc:	461a      	mov	r2, r3
 80003be:	4b34      	ldr	r3, [pc, #208]	; (8000490 <configMEMSsensor+0x10c>)
 80003c0:	701a      	strb	r2, [r3, #0]
			   LIS3DH_INT1_YHIE_ENABLE | LIS3DH_INT1_YLIE_ENABLE |
			   LIS3DH_INT1_XHIE_ENABLE | LIS3DH_INT1_XLIE_ENABLE ); 
	if(response == 1)
 80003c2:	4b33      	ldr	r3, [pc, #204]	; (8000490 <configMEMSsensor+0x10c>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d103      	bne.n	80003d2 <configMEMSsensor+0x4e>
	{
		printf("LIS3DH_SetIntConfiguration done...\n");
 80003ca:	4832      	ldr	r0, [pc, #200]	; (8000494 <configMEMSsensor+0x110>)
 80003cc:	f003 fc3e 	bl	8003c4c <puts>
 80003d0:	e008      	b.n	80003e4 <configMEMSsensor+0x60>
  	}
	else
	{
		error++;
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	3301      	adds	r3, #1
 80003d6:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80003d8:	4b2c      	ldr	r3, [pc, #176]	; (800048c <configMEMSsensor+0x108>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	3301      	adds	r3, #1
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b2a      	ldr	r3, [pc, #168]	; (800048c <configMEMSsensor+0x108>)
 80003e2:	701a      	strb	r2, [r3, #0]
	}

	 //set Interrupt Mode
	if(LIS3DH_SetIntMode(LIS3DH_INT_MODE_6D_POSITION) == 1)
 80003e4:	2003      	movs	r0, #3
 80003e6:	f001 fa43 	bl	8001870 <LIS3DH_SetIntMode>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d103      	bne.n	80003f8 <configMEMSsensor+0x74>
	{
		printf("LIS3DH_SetIntMode done...\n");
 80003f0:	4829      	ldr	r0, [pc, #164]	; (8000498 <configMEMSsensor+0x114>)
 80003f2:	f003 fc2b 	bl	8003c4c <puts>
 80003f6:	e008      	b.n	800040a <configMEMSsensor+0x86>
    }
	else
	{
		error++;
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	3301      	adds	r3, #1
 80003fc:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 80003fe:	4b23      	ldr	r3, [pc, #140]	; (800048c <configMEMSsensor+0x108>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	3301      	adds	r3, #1
 8000404:	b2da      	uxtb	r2, r3
 8000406:	4b21      	ldr	r3, [pc, #132]	; (800048c <configMEMSsensor+0x108>)
 8000408:	701a      	strb	r2, [r3, #0]
	}

	// internal temperature sensor
	if (LIS3DH_SetADCAux(MEMS_ENABLE) == 1)
 800040a:	2001      	movs	r0, #1
 800040c:	f001 f8ae 	bl	800156c <LIS3DH_SetADCAux>
 8000410:	4603      	mov	r3, r0
 8000412:	2b01      	cmp	r3, #1
 8000414:	d103      	bne.n	800041e <configMEMSsensor+0x9a>
	{
		printf("LIS3DH_SetADCAux done...");
 8000416:	4821      	ldr	r0, [pc, #132]	; (800049c <configMEMSsensor+0x118>)
 8000418:	f003 fbd0 	bl	8003bbc <printf>
 800041c:	e008      	b.n	8000430 <configMEMSsensor+0xac>
	}
	else
	{
		error++;
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	3301      	adds	r3, #1
 8000422:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 8000424:	4b19      	ldr	r3, [pc, #100]	; (800048c <configMEMSsensor+0x108>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	3301      	adds	r3, #1
 800042a:	b2da      	uxtb	r2, r3
 800042c:	4b17      	ldr	r3, [pc, #92]	; (800048c <configMEMSsensor+0x108>)
 800042e:	701a      	strb	r2, [r3, #0]
	}

	if (LIS3DH_SetBDU(MEMS_ENABLE) == 1)
 8000430:	2001      	movs	r0, #1
 8000432:	f001 f9c5 	bl	80017c0 <LIS3DH_SetBDU>
 8000436:	4603      	mov	r3, r0
 8000438:	2b01      	cmp	r3, #1
 800043a:	d103      	bne.n	8000444 <configMEMSsensor+0xc0>
	{
		printf("LIS3DH_SetBDU done...\n");
 800043c:	4818      	ldr	r0, [pc, #96]	; (80004a0 <configMEMSsensor+0x11c>)
 800043e:	f003 fc05 	bl	8003c4c <puts>
 8000442:	e008      	b.n	8000456 <configMEMSsensor+0xd2>
	}
	else
	{
		error++;
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	3301      	adds	r3, #1
 8000448:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <configMEMSsensor+0x108>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	3301      	adds	r3, #1
 8000450:	b2da      	uxtb	r2, r3
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <configMEMSsensor+0x108>)
 8000454:	701a      	strb	r2, [r3, #0]
	}

	if (LIS3DH_SetTemperature(MEMS_ENABLE) == 1)
 8000456:	2001      	movs	r0, #1
 8000458:	f001 f85a 	bl	8001510 <LIS3DH_SetTemperature>
 800045c:	4603      	mov	r3, r0
 800045e:	2b01      	cmp	r3, #1
 8000460:	d103      	bne.n	800046a <configMEMSsensor+0xe6>
	{
		printf("LIS3DH_SetTemperature done...\n");
 8000462:	4810      	ldr	r0, [pc, #64]	; (80004a4 <configMEMSsensor+0x120>)
 8000464:	f003 fbf2 	bl	8003c4c <puts>
 8000468:	e008      	b.n	800047c <configMEMSsensor+0xf8>
	}
	else
	{
		error++;
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	3301      	adds	r3, #1
 800046e:	71fb      	strb	r3, [r7, #7]
		errorcount++;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <configMEMSsensor+0x108>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	3301      	adds	r3, #1
 8000476:	b2da      	uxtb	r2, r3
 8000478:	4b04      	ldr	r3, [pc, #16]	; (800048c <configMEMSsensor+0x108>)
 800047a:	701a      	strb	r2, [r3, #0]
	}
	
	return error;
 800047c:	79fb      	ldrb	r3, [r7, #7]
}
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	0800bb24 	.word	0x0800bb24
 800048c:	20000a82 	.word	0x20000a82
 8000490:	20000a81 	.word	0x20000a81
 8000494:	0800bb44 	.word	0x0800bb44
 8000498:	0800bb68 	.word	0x0800bb68
 800049c:	0800bb84 	.word	0x0800bb84
 80004a0:	0800bba0 	.word	0x0800bba0
 80004a4:	0800bbb8 	.word	0x0800bbb8

080004a8 <getTemperature>:

uint8_t getTemperature()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
	int8_t temperature = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	71fb      	strb	r3, [r7, #7]

	if (LIS3DH_GetTempRaw(&temperature) != 1)
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	4618      	mov	r0, r3
 80004b6:	f001 f887 	bl	80015c8 <LIS3DH_GetTempRaw>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d005      	beq.n	80004cc <getTemperature+0x24>
	{
		errorcount++;
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <getTemperature+0x34>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	3301      	adds	r3, #1
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <getTemperature+0x34>)
 80004ca:	701a      	strb	r2, [r3, #0]
	}

	return temperature;
 80004cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d0:	b2db      	uxtb	r3, r3
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000a82 	.word	0x20000a82

080004e0 <get6Dposition>:

uint8_t get6Dposition()
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
	uint8_t response = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	71fb      	strb	r3, [r7, #7]

	response = LIS3DH_Get6DPosition(&position);
 80004ea:	4846      	ldr	r0, [pc, #280]	; (8000604 <get6Dposition+0x124>)
 80004ec:	f001 f9ee 	bl	80018cc <LIS3DH_Get6DPosition>
 80004f0:	4603      	mov	r3, r0
 80004f2:	71fb      	strb	r3, [r7, #7]

	if((response == 1) && (old_position != position))
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d171      	bne.n	80005de <get6Dposition+0xfe>
 80004fa:	4b43      	ldr	r3, [pc, #268]	; (8000608 <get6Dposition+0x128>)
 80004fc:	781a      	ldrb	r2, [r3, #0]
 80004fe:	4b41      	ldr	r3, [pc, #260]	; (8000604 <get6Dposition+0x124>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	429a      	cmp	r2, r3
 8000504:	d06b      	beq.n	80005de <get6Dposition+0xfe>
	{
		switch (position)
 8000506:	4b3f      	ldr	r3, [pc, #252]	; (8000604 <get6Dposition+0x124>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	3b41      	subs	r3, #65	; 0x41
 800050c:	2b1f      	cmp	r3, #31
 800050e:	d85b      	bhi.n	80005c8 <get6Dposition+0xe8>
 8000510:	a201      	add	r2, pc, #4	; (adr r2, 8000518 <get6Dposition+0x38>)
 8000512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000516:	bf00      	nop
 8000518:	080005a9 	.word	0x080005a9
 800051c:	080005a1 	.word	0x080005a1
 8000520:	080005c9 	.word	0x080005c9
 8000524:	08000599 	.word	0x08000599
 8000528:	080005c9 	.word	0x080005c9
 800052c:	080005c9 	.word	0x080005c9
 8000530:	080005c9 	.word	0x080005c9
 8000534:	080005b1 	.word	0x080005b1
 8000538:	080005c9 	.word	0x080005c9
 800053c:	080005c9 	.word	0x080005c9
 8000540:	080005c9 	.word	0x080005c9
 8000544:	080005c9 	.word	0x080005c9
 8000548:	080005c9 	.word	0x080005c9
 800054c:	080005c9 	.word	0x080005c9
 8000550:	080005c9 	.word	0x080005c9
 8000554:	080005c1 	.word	0x080005c1
 8000558:	080005c9 	.word	0x080005c9
 800055c:	080005c9 	.word	0x080005c9
 8000560:	080005c9 	.word	0x080005c9
 8000564:	080005c9 	.word	0x080005c9
 8000568:	080005c9 	.word	0x080005c9
 800056c:	080005c9 	.word	0x080005c9
 8000570:	080005c9 	.word	0x080005c9
 8000574:	080005c9 	.word	0x080005c9
 8000578:	080005c9 	.word	0x080005c9
 800057c:	080005c9 	.word	0x080005c9
 8000580:	080005c9 	.word	0x080005c9
 8000584:	080005c9 	.word	0x080005c9
 8000588:	080005c9 	.word	0x080005c9
 800058c:	080005c9 	.word	0x080005c9
 8000590:	080005c9 	.word	0x080005c9
 8000594:	080005b9 	.word	0x080005b9
		{
			case LIS3DH_UP_SX:
			{
				direction = 0;
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <get6Dposition+0x12c>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
				break;
 800059e:	e01d      	b.n	80005dc <get6Dposition+0xfc>
			}
			case LIS3DH_UP_DX:
			{
				direction = 1;
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <get6Dposition+0x12c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	701a      	strb	r2, [r3, #0]
				break;
 80005a6:	e019      	b.n	80005dc <get6Dposition+0xfc>
			}
			case LIS3DH_DW_SX:
			{
				direction = 2;
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <get6Dposition+0x12c>)
 80005aa:	2202      	movs	r2, #2
 80005ac:	701a      	strb	r2, [r3, #0]
				break;
 80005ae:	e015      	b.n	80005dc <get6Dposition+0xfc>
			}
			case LIS3DH_DW_DX:
			{
				direction = 3;
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <get6Dposition+0x12c>)
 80005b2:	2203      	movs	r2, #3
 80005b4:	701a      	strb	r2, [r3, #0]
				break; 
 80005b6:	e011      	b.n	80005dc <get6Dposition+0xfc>
			}
			case LIS3DH_TOP:    
			{
				direction = 4;
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <get6Dposition+0x12c>)
 80005ba:	2204      	movs	r2, #4
 80005bc:	701a      	strb	r2, [r3, #0]
				break; 
 80005be:	e00d      	b.n	80005dc <get6Dposition+0xfc>
			}
			case LIS3DH_BOTTOM: 
			{
				direction = 5;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <get6Dposition+0x12c>)
 80005c2:	2205      	movs	r2, #5
 80005c4:	701a      	strb	r2, [r3, #0]
				break; 
 80005c6:	e009      	b.n	80005dc <get6Dposition+0xfc>
			}
			default:
			{
				direction = 6;
 80005c8:	4b10      	ldr	r3, [pc, #64]	; (800060c <get6Dposition+0x12c>)
 80005ca:	2206      	movs	r2, #6
 80005cc:	701a      	strb	r2, [r3, #0]
				errorcount++;
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <get6Dposition+0x130>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <get6Dposition+0x130>)
 80005d8:	701a      	strb	r2, [r3, #0]
				break;
 80005da:	bf00      	nop
			}
		}
	}
 80005dc:	e008      	b.n	80005f0 <get6Dposition+0x110>
	else if(response != 1)
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d005      	beq.n	80005f0 <get6Dposition+0x110>
	{
		errorcount++;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <get6Dposition+0x130>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <get6Dposition+0x130>)
 80005ee:	701a      	strb	r2, [r3, #0]
	}
	old_position = position;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <get6Dposition+0x124>)
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <get6Dposition+0x128>)
 80005f6:	701a      	strb	r2, [r3, #0]

	return direction;
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <get6Dposition+0x12c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000a83 	.word	0x20000a83
 8000608:	20000a98 	.word	0x20000a98
 800060c:	20000a88 	.word	0x20000a88
 8000610:	20000a82 	.word	0x20000a82

08000614 <getAxesRawData>:

AXESRAWDATA getAxesRawData()
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint8_t response = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	75fb      	strb	r3, [r7, #23]
	AxesRaw_t data;
	AXESRAWDATA dataOut;

	response = LIS3DH_GetAccAxesRaw(&data);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4618      	mov	r0, r3
 8000626:	f001 f9e5 	bl	80019f4 <LIS3DH_GetAccAxesRaw>
 800062a:	4603      	mov	r3, r0
 800062c:	75fb      	strb	r3, [r7, #23]

	if(response != 1)
 800062e:	7dfb      	ldrb	r3, [r7, #23]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d005      	beq.n	8000640 <getAxesRawData+0x2c>
	{
		errorcount++;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <getAxesRawData+0x5c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <getAxesRawData+0x5c>)
 800063e:	701a      	strb	r2, [r3, #0]
	}

	dataOut.axisX = data.AXIS_X;
 8000640:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000644:	b29b      	uxth	r3, r3
 8000646:	813b      	strh	r3, [r7, #8]
	dataOut.axisY = data.AXIS_Y;
 8000648:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800064c:	b29b      	uxth	r3, r3
 800064e:	817b      	strh	r3, [r7, #10]
	dataOut.axisZ = data.AXIS_Z;
 8000650:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000654:	b29b      	uxth	r3, r3
 8000656:	81bb      	strh	r3, [r7, #12]

	return dataOut;	
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	461a      	mov	r2, r3
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	6010      	str	r0, [r2, #0]
 8000664:	889b      	ldrh	r3, [r3, #4]
 8000666:	8093      	strh	r3, [r2, #4]
}
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000a82 	.word	0x20000a82

08000674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	2b00      	cmp	r3, #0
 8000684:	db0b      	blt.n	800069e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000686:	4909      	ldr	r1, [pc, #36]	; (80006ac <__NVIC_EnableIRQ+0x38>)
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	095b      	lsrs	r3, r3, #5
 800068e:	79fa      	ldrb	r2, [r7, #7]
 8000690:	f002 021f 	and.w	r2, r2, #31
 8000694:	2001      	movs	r0, #1
 8000696:	fa00 f202 	lsl.w	r2, r0, r2
 800069a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000e100 	.word	0xe000e100

080006b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	6039      	str	r1, [r7, #0]
 80006ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	db0a      	blt.n	80006da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c4:	490d      	ldr	r1, [pc, #52]	; (80006fc <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	0092      	lsls	r2, r2, #2
 80006d0:	b2d2      	uxtb	r2, r2
 80006d2:	440b      	add	r3, r1
 80006d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d8:	e00a      	b.n	80006f0 <__NVIC_SetPriority+0x40>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006da:	4909      	ldr	r1, [pc, #36]	; (8000700 <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	683a      	ldr	r2, [r7, #0]
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	0092      	lsls	r2, r2, #2
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	440b      	add	r3, r1
 80006ee:	761a      	strb	r2, [r3, #24]
  }
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
 8000710:	4613      	mov	r3, r2
 8000712:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000714:	78f8      	ldrb	r0, [r7, #3]
 8000716:	78fb      	ldrb	r3, [r7, #3]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	3306      	adds	r3, #6
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4413      	add	r3, r2
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000726:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000728:	431a      	orrs	r2, r3
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	1d83      	adds	r3, r0, #6
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	440b      	add	r3, r1
 8000732:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800074c:	b2db      	uxtb	r3, r3
 800074e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000752:	b2db      	uxtb	r3, r3
}
 8000754:	4618      	mov	r0, r3
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <XMC_USIC_CH_RXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  channel->RBCTR |= event;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	431a      	orrs	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop

08000788 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	2b00      	cmp	r3, #0
 800079c:	bf14      	ite	ne
 800079e:	2301      	movne	r3, #1
 80007a0:	2300      	moveq	r3, #0
 80007a2:	b2db      	uxtb	r3, r3
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	f023 030f 	bic.w	r3, r3, #15
 80007c0:	f043 0202 	orr.w	r2, r3, #2
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <XMC_UART_CH_SetInputSource>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
 80007e0:	4613      	mov	r3, r2
 80007e2:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk|USIC_CH_DX0CR_DSEN_Msk)));
 80007e4:	78f8      	ldrb	r0, [r7, #3]
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	3306      	adds	r3, #6
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f023 0250 	bic.w	r2, r3, #80	; 0x50
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	1d83      	adds	r3, r0, #6
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	440b      	add	r3, r1
 80007fe:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000800:	78ba      	ldrb	r2, [r7, #2]
 8000802:	78fb      	ldrb	r3, [r7, #3]
 8000804:	4619      	mov	r1, r3
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ff7c 	bl	8000704 <XMC_USIC_CH_SetInputSource>
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <_init_uart0_ch0>:
    .stop_bits = 1U,
    .baudrate = 115200U
};
/****************************************************************** FUNCTIONS */
void _init_uart0_ch0()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    /* USIC channels initialization */
    XMC_UART_CH_Init (XMC_UART0_CH0, &uart_config);
 8000818:	491c      	ldr	r1, [pc, #112]	; (800088c <_init_uart0_ch0+0x78>)
 800081a:	481d      	ldr	r0, [pc, #116]	; (8000890 <_init_uart0_ch0+0x7c>)
 800081c:	f001 fda6 	bl	800236c <XMC_UART_CH_Init>

    XMC_UART_CH_SetInputSource (XMC_UART0_CH0, XMC_UART_CH_INPUT_RXD,
 8000820:	2201      	movs	r2, #1
 8000822:	2100      	movs	r1, #0
 8000824:	481a      	ldr	r0, [pc, #104]	; (8000890 <_init_uart0_ch0+0x7c>)
 8000826:	f7ff ffd5 	bl	80007d4 <XMC_UART_CH_SetInputSource>
    /* FIFOs initialization for both channels:
     *  8 entries for TxFIFO from point 0, LIMIT=1
     *  8 entries for RxFIFO from point 8, LIMIT=7 (SRBI is set if all 8*data have
     *                                              been received)
     *  */
    XMC_USIC_CH_TXFIFO_Configure (XMC_UART0_CH0, 0, XMC_USIC_CH_FIFO_SIZE_8WORDS, TX_FIFO_INITIAL_LIMIT);
 800082a:	2301      	movs	r3, #1
 800082c:	2203      	movs	r2, #3
 800082e:	2100      	movs	r1, #0
 8000830:	4817      	ldr	r0, [pc, #92]	; (8000890 <_init_uart0_ch0+0x7c>)
 8000832:	f002 f8c5 	bl	80029c0 <XMC_USIC_CH_TXFIFO_Configure>
    XMC_USIC_CH_RXFIFO_Configure (XMC_UART0_CH0, 8, XMC_USIC_CH_FIFO_SIZE_8WORDS, RX_FIFO_INITIAL_LIMIT);
 8000836:	2301      	movs	r3, #1
 8000838:	2203      	movs	r2, #3
 800083a:	2108      	movs	r1, #8
 800083c:	4814      	ldr	r0, [pc, #80]	; (8000890 <_init_uart0_ch0+0x7c>)
 800083e:	f002 f8e7 	bl	8002a10 <XMC_USIC_CH_RXFIFO_Configure>

    /* Enabling events for TX FIFO and RX FIFO */
    XMC_USIC_CH_RXFIFO_EnableEvent (XMC_UART0_CH0,
 8000842:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8000846:	4812      	ldr	r0, [pc, #72]	; (8000890 <_init_uart0_ch0+0x7c>)
 8000848:	f7ff ff8a 	bl	8000760 <XMC_USIC_CH_RXFIFO_EnableEvent>
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD |
                                    XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE);

    /* Connecting the previously enabled events to a Service Request line number */
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2110      	movs	r1, #16
 8000850:	480f      	ldr	r0, [pc, #60]	; (8000890 <_init_uart0_ch0+0x7c>)
 8000852:	f002 f907 	bl	8002a64 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>
    XMC_USIC_CH_RXFIFO_SetInterruptNodePointer (XMC_UART0_CH0, XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2113      	movs	r1, #19
 800085a:	480d      	ldr	r0, [pc, #52]	; (8000890 <_init_uart0_ch0+0x7c>)
 800085c:	f002 f902 	bl	8002a64 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>

    /* Start USIC operation as UART */
    XMC_UART_CH_Start (XMC_UART0_CH0);
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <_init_uart0_ch0+0x7c>)
 8000862:	f7ff ffa5 	bl	80007b0 <XMC_UART_CH_Start>

    /*Initialization of the necessary ports*/
    XMC_GPIO_Init (UART_TX, &uart_tx);
 8000866:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <_init_uart0_ch0+0x80>)
 8000868:	2105      	movs	r1, #5
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <_init_uart0_ch0+0x84>)
 800086c:	f001 fcbe 	bl	80021ec <XMC_GPIO_Init>
    XMC_GPIO_Init (UART_RX, &uart_rx);
 8000870:	4a0a      	ldr	r2, [pc, #40]	; (800089c <_init_uart0_ch0+0x88>)
 8000872:	2104      	movs	r1, #4
 8000874:	4808      	ldr	r0, [pc, #32]	; (8000898 <_init_uart0_ch0+0x84>)
 8000876:	f001 fcb9 	bl	80021ec <XMC_GPIO_Init>

    /* Configuring priority and enabling NVIC IRQ for the defined service request
    line number */
    NVIC_SetPriority (USIC0_0_IRQn, 63U);
 800087a:	213f      	movs	r1, #63	; 0x3f
 800087c:	2054      	movs	r0, #84	; 0x54
 800087e:	f7ff ff17 	bl	80006b0 <__NVIC_SetPriority>
    NVIC_EnableIRQ (USIC0_0_IRQn);
 8000882:	2054      	movs	r0, #84	; 0x54
 8000884:	f7ff fef6 	bl	8000674 <__NVIC_EnableIRQ>

    return;
 8000888:	bf00      	nop
}
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000000c 	.word	0x2000000c
 8000890:	40030000 	.word	0x40030000
 8000894:	20000000 	.word	0x20000000
 8000898:	48028100 	.word	0x48028100
 800089c:	20000a2c 	.word	0x20000a2c

080008a0 <USIC0_0_IRQHandler>:

void USIC0_0_IRQHandler (void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	71fb      	strb	r3, [r7, #7]

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 80008aa:	e01f      	b.n	80008ec <USIC0_0_IRQHandler+0x4c>
        rx_tmp = XMC_UART_CH_GetReceivedData (XMC_UART0_CH0);
 80008ac:	4816      	ldr	r0, [pc, #88]	; (8000908 <USIC0_0_IRQHandler+0x68>)
 80008ae:	f001 fddb 	bl	8002468 <XMC_UART_CH_GetReceivedData>
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]

        if ( (rx_tmp != STRING_CR) && (!str_available)) {
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b0d      	cmp	r3, #13
 80008ba:	d011      	beq.n	80008e0 <USIC0_0_IRQHandler+0x40>
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <USIC0_0_IRQHandler+0x6c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	f083 0301 	eor.w	r3, r3, #1
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00a      	beq.n	80008e0 <USIC0_0_IRQHandler+0x40>
            rx_buffer[rx_ctr++] = rx_tmp;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <USIC0_0_IRQHandler+0x70>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	1c5a      	adds	r2, r3, #1
 80008d0:	b2d1      	uxtb	r1, r2
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <USIC0_0_IRQHandler+0x70>)
 80008d4:	7011      	strb	r1, [r2, #0]
 80008d6:	4619      	mov	r1, r3
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <USIC0_0_IRQHandler+0x74>)
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	5453      	strb	r3, [r2, r1]
 80008de:	e005      	b.n	80008ec <USIC0_0_IRQHandler+0x4c>
        } else {
            rx_ctr = 0;
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <USIC0_0_IRQHandler+0x70>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
            str_available = true;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <USIC0_0_IRQHandler+0x6c>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
{
    static uint8_t rx_ctr = 0;
    uint8_t rx_tmp = 0;

    /* Read the RX FIFO till it is empty */
    while (!XMC_USIC_CH_RXFIFO_IsEmpty (XMC_UART0_CH0)) {
 80008ec:	4806      	ldr	r0, [pc, #24]	; (8000908 <USIC0_0_IRQHandler+0x68>)
 80008ee:	f7ff ff4b 	bl	8000788 <XMC_USIC_CH_RXFIFO_IsEmpty>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f083 0301 	eor.w	r3, r3, #1
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1d6      	bne.n	80008ac <USIC0_0_IRQHandler+0xc>
        } else {
            rx_ctr = 0;
            str_available = true;
        }
    }
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40030000 	.word	0x40030000
 800090c:	200009e8 	.word	0x200009e8
 8000910:	20000a38 	.word	0x20000a38
 8000914:	200009ec 	.word	0x200009ec

08000918 <_uart_printf>:

    return 0;
}

uint8_t _uart_printf (char *fmt, ...)
{
 8000918:	b40f      	push	{r0, r1, r2, r3}
 800091a:	b580      	push	{r7, lr}
 800091c:	b0c2      	sub	sp, #264	; 0x108
 800091e:	af00      	add	r7, sp, #0
    va_list arg_ptr;
    char buffer[BUFFER_SIZE_PRINTF];

    if (fmt == NULL)  {
 8000920:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000924:	2b00      	cmp	r3, #0
 8000926:	d101      	bne.n	800092c <_uart_printf+0x14>
        return ERR_OUT_OF_MEMORY;
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	e010      	b.n	800094e <_uart_printf+0x36>
    }

    va_start (arg_ptr, fmt);
 800092c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000930:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    vsprintf (buffer, fmt, arg_ptr);
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800093a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800093e:	4618      	mov	r0, r3
 8000940:	f007 f9ae 	bl	8007ca0 <vsprintf>
    va_end (arg_ptr);

    _uart_send_string (buffer);
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f80a 	bl	8000960 <_uart_send_string>
    return 0;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000954:	46bd      	mov	sp, r7
 8000956:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800095a:	b004      	add	sp, #16
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <_uart_send_string>:

uint8_t _uart_send_string (char *str)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <_uart_send_string+0x12>
        return ERR_OUT_OF_MEMORY;
 800096e:	2364      	movs	r3, #100	; 0x64
 8000970:	e01d      	b.n	80009ae <_uart_send_string+0x4e>
    }

    for (int i = 0; i < strlen (str); i++) {
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	e012      	b.n	800099e <_uart_send_string+0x3e>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 8000978:	bf00      	nop
 800097a:	480f      	ldr	r0, [pc, #60]	; (80009b8 <_uart_send_string+0x58>)
 800097c:	f7ff fee0 	bl	8000740 <XMC_USIC_CH_GetTransmitBufferStatus>
 8000980:	4603      	mov	r3, r0
 8000982:	2b80      	cmp	r3, #128	; 0x80
 8000984:	d0f9      	beq.n	800097a <_uart_send_string+0x1a>
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b29b      	uxth	r3, r3
 8000990:	4619      	mov	r1, r3
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <_uart_send_string+0x58>)
 8000994:	f001 fd42 	bl	800241c <XMC_UART_CH_Transmit>
{
    if (str == NULL) {
        return ERR_OUT_OF_MEMORY;
    }

    for (int i = 0; i < strlen (str); i++) {
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3301      	adds	r3, #1
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f003 f98e 	bl	8003cc0 <strlen>
 80009a4:	4602      	mov	r2, r0
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8e5      	bhi.n	8000978 <_uart_send_string+0x18>
        while (XMC_USIC_CH_GetTransmitBufferStatus (XMC_UART0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
        XMC_UART_CH_Transmit (XMC_UART0_CH0, str[i]);
    }
    return 0;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40030000 	.word	0x40030000

080009bc <_uart_get_string>:

uint8_t _uart_get_string (char *str)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    if (str == NULL) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d101      	bne.n	80009ce <_uart_get_string+0x12>
        return ERR_OUT_OF_MEMORY;
 80009ca:	2364      	movs	r3, #100	; 0x64
 80009cc:	e019      	b.n	8000a02 <_uart_get_string+0x46>
    }

    while (!str_available);
 80009ce:	bf00      	nop
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <_uart_get_string+0x50>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	f083 0301 	eor.w	r3, r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d1f8      	bne.n	80009d0 <_uart_get_string+0x14>
    memcpy (str, &rx_buffer, strlen (rx_buffer));
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <_uart_get_string+0x54>)
 80009e0:	f003 f96e 	bl	8003cc0 <strlen>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	4909      	ldr	r1, [pc, #36]	; (8000a10 <_uart_get_string+0x54>)
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f002 fffe 	bl	80039ec <memcpy>
    memset (&rx_buffer, 0x00, BUFFER_SIZE_RX);
 80009f0:	2240      	movs	r2, #64	; 0x40
 80009f2:	2100      	movs	r1, #0
 80009f4:	4806      	ldr	r0, [pc, #24]	; (8000a10 <_uart_get_string+0x54>)
 80009f6:	f003 f893 	bl	8003b20 <memset>

    str_available = false;
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <_uart_get_string+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
    return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200009e8 	.word	0x200009e8
 8000a10:	200009ec 	.word	0x200009ec

08000a14 <P1_1_set_mode>:

__STATIC_INLINE uint32_t P1_0_read(void){
    return(PORT1->IN & 0x00000001UL);
}

__STATIC_INLINE void P1_1_set_mode(uint8_t mode){
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
    PORT1->IOCR0 &= ~0x0000f800UL;
 8000a1e:	4a09      	ldr	r2, [pc, #36]	; (8000a44 <P1_1_set_mode+0x30>)
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <P1_1_set_mode+0x30>)
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8000a28:	6113      	str	r3, [r2, #16]
    PORT1->IOCR0 |= mode << 8;
 8000a2a:	4906      	ldr	r1, [pc, #24]	; (8000a44 <P1_1_set_mode+0x30>)
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <P1_1_set_mode+0x30>)
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	0212      	lsls	r2, r2, #8
 8000a34:	4313      	orrs	r3, r2
 8000a36:	610b      	str	r3, [r1, #16]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	48028100 	.word	0x48028100

08000a48 <P1_1_set_driver_strength>:

__STATIC_INLINE void P1_1_set_driver_strength(uint8_t strength){
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
    PORT1->PDR0 &= ~0x00000070UL;
 8000a52:	4a09      	ldr	r2, [pc, #36]	; (8000a78 <P1_1_set_driver_strength+0x30>)
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <P1_1_set_driver_strength+0x30>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
    PORT1->PDR0 |= strength << 4;
 8000a5e:	4906      	ldr	r1, [pc, #24]	; (8000a78 <P1_1_set_driver_strength+0x30>)
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <P1_1_set_driver_strength+0x30>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	79fa      	ldrb	r2, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	48028100 	.word	0x48028100

08000a7c <P1_1_reset>:

__STATIC_INLINE void P1_1_set(void){
    PORT1->OMR = 0x00000002UL;
}

__STATIC_INLINE void P1_1_reset(void){
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
    PORT1->OMR = 0x00020000UL;
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <P1_1_reset+0x18>)
 8000a82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a86:	605a      	str	r2, [r3, #4]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	48028100 	.word	0x48028100

08000a98 <initServoPWM>:
#include "servo_driver.h"

void initServoPWM()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
    // onboard LED 2 supports alternate function 3 at CCU40 slice 2 = CCU40.OUT2 = CCU40.CC42
    P1_1_set_mode(OUTPUT_PP_AF3);
 8000a9c:	2098      	movs	r0, #152	; 0x98
 8000a9e:	f7ff ffb9 	bl	8000a14 <P1_1_set_mode>
    P1_1_set_driver_strength(STRONG);	// push pull necessary for onboard LED
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f7ff ffd0 	bl	8000a48 <P1_1_set_driver_strength>
    P1_1_reset();
 8000aa8:	f7ff ffe8 	bl	8000a7c <P1_1_reset>

    // setup CC40 unit with shadow transfer

    SCU_RESET->PRSET0 |= (1 << SCU_RESET_PRSET0_CCU40RS_Pos);		// peripheral 0 reset set - CCU40RS - CCU40 timer
 8000aac:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <initServoPWM+0x90>)
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <initServoPWM+0x90>)
 8000ab0:	691b      	ldr	r3, [r3, #16]
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6113      	str	r3, [r2, #16]
    SCU_RESET->PRCLR0 |= (1 << SCU_RESET_PRCLR0_CCU40RS_Pos);		// peripheral 0 reset clear - CCU40RS - CCU40 timer
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <initServoPWM+0x90>)
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <initServoPWM+0x90>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6153      	str	r3, [r2, #20]
    SCU_CLK->CLKSET = (1 << SCU_CLK_CLKSET_CCUCEN_Pos); 			// clock enable register CCUCEN - CCU clock enabled
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <initServoPWM+0x94>)
 8000ac6:	2210      	movs	r2, #16
 8000ac8:	605a      	str	r2, [r3, #4]
    CCU40->GIDLC |= (1 << CCU4_GIDLC_SPRB_Pos); 					// global idle clear - SPRB - prescaler run bit set
 8000aca:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <initServoPWM+0x98>)
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <initServoPWM+0x98>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad4:	60d3      	str	r3, [r2, #12]

    CCU40_CC42->PSC = 6; 											// prescaler control - 0 - CCU40.OUT2
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <initServoPWM+0x9c>)
 8000ad8:	2206      	movs	r2, #6
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24

    CCU40_CC42->TC |= (1 << CCU4_CC4_TC_CLST_Pos); 					// slice timer control - CLST - shadow transfer on clear - CCU40.OUT2
 8000adc:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <initServoPWM+0x9c>)
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <initServoPWM+0x9c>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f043 0304 	orr.w	r3, r3, #4
 8000ae6:	6153      	str	r3, [r2, #20]

    CCU40->GIDLC |= (1 << CCU4_GIDLC_CS2I_Pos); 					// global idle clear - C2SI - CC43 idle mode clear - CCU40.OUT2
 8000ae8:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <initServoPWM+0x98>)
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <initServoPWM+0x98>)
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	60d3      	str	r3, [r2, #12]

    SCU_GENERAL->CCUCON |= (1 << SCU_GENERAL_CCUCON_GSC40_Pos);		// CCU control register - GSC40 - global start control CCU40
 8000af4:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <initServoPWM+0xa0>)
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <initServoPWM+0xa0>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	64d3      	str	r3, [r2, #76]	; 0x4c

    CCU40_CC42->PRS = 37500; 										// period register - timer shadow period value - CCU40.OUT2
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <initServoPWM+0x9c>)
 8000b02:	f249 227c 	movw	r2, #37500	; 0x927c
 8000b06:	635a      	str	r2, [r3, #52]	; 0x34

    CCU40_CC42->TCSET = 1;											// slice timer run set - CCU40.OUT2
 8000b08:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <initServoPWM+0x9c>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	60da      	str	r2, [r3, #12]

    // initial output values

    CCU40_CC42->CRS = 37500;										// compare register - timer shadow compare value - CCU40.OUT2
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <initServoPWM+0x9c>)
 8000b10:	f249 227c 	movw	r2, #37500	; 0x927c
 8000b14:	63da      	str	r2, [r3, #60]	; 0x3c

    CCU40->GCSS |= (1 << CCU4_GCSS_S2SE_Pos); 						// global channel set - S3SE slice 2 shadow transfer set enable
 8000b16:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <initServoPWM+0x98>)
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <initServoPWM+0x98>)
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b20:	6113      	str	r3, [r2, #16]
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	50004400 	.word	0x50004400
 8000b2c:	50004600 	.word	0x50004600
 8000b30:	4000c000 	.word	0x4000c000
 8000b34:	4000c300 	.word	0x4000c300
 8000b38:	50004000 	.word	0x50004000
 8000b3c:	00000000 	.word	0x00000000

08000b40 <pwmXMC>:

uint8_t pwmXMC(double dutycycle)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	e9c7 0100 	strd	r0, r1, [r7]
    double dcCalc = 0;
 8000b4a:	f04f 0300 	mov.w	r3, #0
 8000b4e:	f04f 0400 	mov.w	r4, #0
 8000b52:	e9c7 3404 	strd	r3, r4, [r7, #16]
    uint32_t intdcCalc = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]

    if (dutycycle < 0 || dutycycle > 100)
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b66:	f002 feb5 	bl	80038d4 <__aeabi_dcmplt>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d109      	bne.n	8000b84 <pwmXMC+0x44>
 8000b70:	f04f 0200 	mov.w	r2, #0
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <pwmXMC+0xc0>)
 8000b76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b7a:	f002 fec9 	bl	8003910 <__aeabi_dcmpgt>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <pwmXMC+0x48>
    {
        return 1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	e02c      	b.n	8000be2 <pwmXMC+0xa2>
    }

    dcCalc = 37500 - (37500 * dutycycle * 0.01);
 8000b88:	a319      	add	r3, pc, #100	; (adr r3, 8000bf0 <pwmXMC+0xb0>)
 8000b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b92:	f002 fc2d 	bl	80033f0 <__aeabi_dmul>
 8000b96:	4603      	mov	r3, r0
 8000b98:	460c      	mov	r4, r1
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	4621      	mov	r1, r4
 8000b9e:	a316      	add	r3, pc, #88	; (adr r3, 8000bf8 <pwmXMC+0xb8>)
 8000ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba4:	f002 fc24 	bl	80033f0 <__aeabi_dmul>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	460c      	mov	r4, r1
 8000bac:	461a      	mov	r2, r3
 8000bae:	4623      	mov	r3, r4
 8000bb0:	a10f      	add	r1, pc, #60	; (adr r1, 8000bf0 <pwmXMC+0xb0>)
 8000bb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bb6:	f002 fa67 	bl	8003088 <__aeabi_dsub>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	460c      	mov	r4, r1
 8000bbe:	e9c7 3404 	strd	r3, r4, [r7, #16]

    intdcCalc = (uint32_t)dcCalc;
 8000bc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000bc6:	f002 fec3 	bl	8003950 <__aeabi_d2uiz>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	60fb      	str	r3, [r7, #12]

    CCU40_CC42->CRS = intdcCalc;									// compare register . timer shadow compare value - CCU40.OUT2
 8000bce:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <pwmXMC+0xc4>)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	63d3      	str	r3, [r2, #60]	; 0x3c

    CCU40->GCSS |= (1<<CCU4_GCSS_S2SE_Pos); 						// global channel set - S2SE slice 2 shadow transfer set enable
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	; (8000c08 <pwmXMC+0xc8>)
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <pwmXMC+0xc8>)
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bde:	6113      	str	r3, [r2, #16]

    return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	371c      	adds	r7, #28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd90      	pop	{r4, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	f3af 8000 	nop.w
 8000bf0:	00000000 	.word	0x00000000
 8000bf4:	40e24f80 	.word	0x40e24f80
 8000bf8:	47ae147b 	.word	0x47ae147b
 8000bfc:	3f847ae1 	.word	0x3f847ae1
 8000c00:	40590000 	.word	0x40590000
 8000c04:	4000c300 	.word	0x4000c300
 8000c08:	4000c000 	.word	0x4000c000

08000c0c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	409a      	lsls	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	605a      	str	r2, [r3, #4]
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c42:	409a      	lsls	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	605a      	str	r2, [r3, #4]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8000c60:	78fb      	ldrb	r3, [r7, #3]
 8000c62:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000c66:	409a      	lsls	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	605a      	str	r2, [r3, #4]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <protocolComplete>:
#include "3Daccel_out_library.h"

void protocolComplete(int16_t position6D, int16_t positionX, int16_t positionY, int16_t positionZ, uint8_t temperature)
{
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7a:	b0a5      	sub	sp, #148	; 0x94
 8000c7c:	af06      	add	r7, sp, #24
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4608      	mov	r0, r1
 8000c82:	4611      	mov	r1, r2
 8000c84:	461a      	mov	r2, r3
 8000c86:	4623      	mov	r3, r4
 8000c88:	80fb      	strh	r3, [r7, #6]
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	80bb      	strh	r3, [r7, #4]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	807b      	strh	r3, [r7, #2]
 8000c92:	4613      	mov	r3, r2
 8000c94:	803b      	strh	r3, [r7, #0]
	char string6D[8][6] = {"#USX,", "#UDX,", "#DSX,", "#DDX,", "#TOP,", "#BOT,", "#XXX,", "#FAL,"};
 8000c96:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <protocolComplete+0xd0>)
 8000c98:	461c      	mov	r4, r3
 8000c9a:	f107 0648 	add.w	r6, r7, #72	; 0x48
 8000c9e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000ca2:	4635      	mov	r5, r6
 8000ca4:	4623      	mov	r3, r4
 8000ca6:	6818      	ldr	r0, [r3, #0]
 8000ca8:	6859      	ldr	r1, [r3, #4]
 8000caa:	689a      	ldr	r2, [r3, #8]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb0:	3410      	adds	r4, #16
 8000cb2:	3610      	adds	r6, #16
 8000cb4:	4574      	cmp	r4, lr
 8000cb6:	d1f4      	bne.n	8000ca2 <protocolComplete+0x2a>
	char send[RX_BUFFER_SIZE];

	memset (&send, 0, sizeof (send));
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	2240      	movs	r2, #64	; 0x40
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 ff2d 	bl	8003b20 <memset>
/*			statisticSend = 0;*/
/*		}*/
/*	}*/
/*	else*/
	{
		if (sprintf(send, "%s%7d%s%7d%s%7d%s%02d$\n", string6D[position6D], positionX, ",", positionY, ",", positionZ, ",", temperature* 2 + 6) < 0)
 8000cc6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000cca:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000cce:	4613      	mov	r3, r2
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	4413      	add	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	18cc      	adds	r4, r1, r3
 8000cd8:	f9b7 5004 	ldrsh.w	r5, [r7, #4]
 8000cdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ce0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000ce4:	f897 1090 	ldrb.w	r1, [r7, #144]	; 0x90
 8000ce8:	3103      	adds	r1, #3
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	f107 0008 	add.w	r0, r7, #8
 8000cf0:	9105      	str	r1, [sp, #20]
 8000cf2:	4916      	ldr	r1, [pc, #88]	; (8000d4c <protocolComplete+0xd4>)
 8000cf4:	9104      	str	r1, [sp, #16]
 8000cf6:	9203      	str	r2, [sp, #12]
 8000cf8:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <protocolComplete+0xd4>)
 8000cfa:	9202      	str	r2, [sp, #8]
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <protocolComplete+0xd4>)
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	462b      	mov	r3, r5
 8000d04:	4622      	mov	r2, r4
 8000d06:	4912      	ldr	r1, [pc, #72]	; (8000d50 <protocolComplete+0xd8>)
 8000d08:	f002 ffa8 	bl	8003c5c <sprintf>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	da06      	bge.n	8000d20 <protocolComplete+0xa8>
		{
			errorcount++;
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <protocolComplete+0xdc>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <protocolComplete+0xdc>)
 8000d1c:	701a      	strb	r2, [r3, #0]
			_uart_printf("%s", send);
			ledSetting(0, 3);
			packagesSent++;
		}
	}
}
 8000d1e:	e00e      	b.n	8000d3e <protocolComplete+0xc6>
		{
			errorcount++;
		}
		else
		{
			_uart_printf("%s", send);
 8000d20:	f107 0308 	add.w	r3, r7, #8
 8000d24:	4619      	mov	r1, r3
 8000d26:	480c      	ldr	r0, [pc, #48]	; (8000d58 <protocolComplete+0xe0>)
 8000d28:	f7ff fdf6 	bl	8000918 <_uart_printf>
			ledSetting(0, 3);
 8000d2c:	2103      	movs	r1, #3
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f000 f850 	bl	8000dd4 <ledSetting>
			packagesSent++;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <protocolComplete+0xe4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <protocolComplete+0xe4>)
 8000d3c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000d3e:	bf00      	nop
 8000d40:	377c      	adds	r7, #124	; 0x7c
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	0800bbf8 	.word	0x0800bbf8
 8000d4c:	0800bbf0 	.word	0x0800bbf0
 8000d50:	0800bbd8 	.word	0x0800bbd8
 8000d54:	20000a82 	.word	0x20000a82
 8000d58:	0800bbf4 	.word	0x0800bbf4
 8000d5c:	20000a84 	.word	0x20000a84

08000d60 <getDouble>:

void getDouble(char *input, double *numDouble)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
    long double number = 0;
 8000d6a:	f04f 0300 	mov.w	r3, #0
 8000d6e:	f04f 0400 	mov.w	r4, #0
 8000d72:	e9c7 3404 	strd	r3, r4, [r7, #16]
    char *pointToEnd = NULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]

    number = strtod(input, &pointToEnd);
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	4619      	mov	r1, r3
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f004 f813 	bl	8004dac <strtod>
 8000d86:	e9c7 0104 	strd	r0, r1, [r7, #16]
    if(*pointToEnd != '\0')
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d105      	bne.n	8000d9e <getDouble+0x3e>
    {
        return;
    }
    else
    {
        *numDouble = (double)number;
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000d98:	e9c2 3400 	strd	r3, r4, [r2]
 8000d9c:	e000      	b.n	8000da0 <getDouble+0x40>
    char *pointToEnd = NULL;

    number = strtod(input, &pointToEnd);
    if(*pointToEnd != '\0')
    {
        return;
 8000d9e:	bf00      	nop
    }
    else
    {
        *numDouble = (double)number;
    }
}
 8000da0:	371c      	adds	r7, #28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd90      	pop	{r4, r7, pc}
 8000da6:	bf00      	nop

08000da8 <outputInit>:

void outputInit(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
    XMC_GPIO_CONFIG_t config_out;
    config_out.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	713b      	strb	r3, [r7, #4]
    config_out.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 8000db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db6:	60bb      	str	r3, [r7, #8]
    config_out.output_strength = XMC_GPIO_OUTPUT_STRENGTH_WEAK;
 8000db8:	2307      	movs	r3, #7
 8000dba:	733b      	strb	r3, [r7, #12]
    XMC_GPIO_Init(LED1, &config_out);
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <outputInit+0x28>)
 8000dc4:	f001 fa12 	bl	80021ec <XMC_GPIO_Init>
/*    XMC_GPIO_Init(LED2, &config_out);*/
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	48028100 	.word	0x48028100

08000dd4 <ledSetting>:

void ledSetting(uint8_t ledID, uint8_t ledState)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	460a      	mov	r2, r1
 8000dde:	71fb      	strb	r3, [r7, #7]
 8000de0:	4613      	mov	r3, r2
 8000de2:	71bb      	strb	r3, [r7, #6]
	switch (ledID)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <ledSetting+0x1c>
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d015      	beq.n	8000e1a <ledSetting+0x46>
			}
			break;
		}
		default:
		{
			break;
 8000dee:	e029      	b.n	8000e44 <ledSetting+0x70>
{
	switch (ledID)
	{
		case 0:
		{
			if (ledState == 0)
 8000df0:	79bb      	ldrb	r3, [r7, #6]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d104      	bne.n	8000e00 <ledSetting+0x2c>
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
 8000df6:	2100      	movs	r1, #0
 8000df8:	4814      	ldr	r0, [pc, #80]	; (8000e4c <ledSetting+0x78>)
 8000dfa:	f7ff ff19 	bl	8000c30 <XMC_GPIO_SetOutputLow>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED1);
			}
			break;
 8000dfe:	e021      	b.n	8000e44 <ledSetting+0x70>
		{
			if (ledState == 0)
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 0);
			}
			else if (ledState == 1)
 8000e00:	79bb      	ldrb	r3, [r7, #6]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d104      	bne.n	8000e10 <ledSetting+0x3c>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
 8000e06:	2100      	movs	r1, #0
 8000e08:	4810      	ldr	r0, [pc, #64]	; (8000e4c <ledSetting+0x78>)
 8000e0a:	f7ff feff 	bl	8000c0c <XMC_GPIO_SetOutputHigh>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED1);
			}
			break;
 8000e0e:	e019      	b.n	8000e44 <ledSetting+0x70>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 0);
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED1);
 8000e10:	2100      	movs	r1, #0
 8000e12:	480e      	ldr	r0, [pc, #56]	; (8000e4c <ledSetting+0x78>)
 8000e14:	f7ff ff1e 	bl	8000c54 <XMC_GPIO_ToggleOutput>
			}
			break;
 8000e18:	e014      	b.n	8000e44 <ledSetting+0x70>
		}
		case 1:
		{
			if (ledState == 0)
 8000e1a:	79bb      	ldrb	r3, [r7, #6]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d104      	bne.n	8000e2a <ledSetting+0x56>
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 1);
 8000e20:	2101      	movs	r1, #1
 8000e22:	480a      	ldr	r0, [pc, #40]	; (8000e4c <ledSetting+0x78>)
 8000e24:	f7ff ff04 	bl	8000c30 <XMC_GPIO_SetOutputLow>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED2);
			}
			break;
 8000e28:	e00b      	b.n	8000e42 <ledSetting+0x6e>
		{
			if (ledState == 0)
			{
				XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, 1);
			}
			else if (ledState == 1)
 8000e2a:	79bb      	ldrb	r3, [r7, #6]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d104      	bne.n	8000e3a <ledSetting+0x66>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 1);
 8000e30:	2101      	movs	r1, #1
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <ledSetting+0x78>)
 8000e34:	f7ff feea 	bl	8000c0c <XMC_GPIO_SetOutputHigh>
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED2);
			}
			break;
 8000e38:	e003      	b.n	8000e42 <ledSetting+0x6e>
			{
				XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, 1);
			}
			else
			{
				XMC_GPIO_ToggleOutput(LED2);
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <ledSetting+0x78>)
 8000e3e:	f7ff ff09 	bl	8000c54 <XMC_GPIO_ToggleOutput>
			}
			break;
 8000e42:	bf00      	nop
		default:
		{
			break;
		}
	}
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	48028100 	.word	0x48028100

08000e50 <pwm>:

void pwm(double dutycycle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	e9c7 0100 	strd	r0, r1, [r7]
	pwmXMC(dutycycle);
 8000e5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e5e:	f7ff fe6f 	bl	8000b40 <pwmXMC>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	0000      	movs	r0, r0
	...

08000e70 <pwmAngleCalc>:

double pwmAngleCalc(int16_t positionX, int16_t positionY, int16_t positionZ)
{
 8000e70:	b5b0      	push	{r4, r5, r7, lr}
 8000e72:	b090      	sub	sp, #64	; 0x40
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	80bb      	strh	r3, [r7, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	807b      	strh	r3, [r7, #2]
	double pitch, pitchOut;
//	double roll;
	double pi = 3.141592654;
 8000e82:	a44e      	add	r4, pc, #312	; (adr r4, 8000fbc <pwmAngleCalc+0x14c>)
 8000e84:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000e88:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	double divider = 8190.0;
 8000e8c:	a44d      	add	r4, pc, #308	; (adr r4, 8000fc4 <pwmAngleCalc+0x154>)
 8000e8e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000e92:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	double gX, gY, gZ;

	gX = positionX/divider;
 8000e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 fa42 	bl	8003324 <__aeabi_i2d>
 8000ea0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ea4:	f002 fbce 	bl	8003644 <__aeabi_ddiv>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	460c      	mov	r4, r1
 8000eac:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	gY = positionY/divider;
 8000eb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 fa35 	bl	8003324 <__aeabi_i2d>
 8000eba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ebe:	f002 fbc1 	bl	8003644 <__aeabi_ddiv>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460c      	mov	r4, r1
 8000ec6:	e9c7 3408 	strd	r3, r4, [r7, #32]
	gZ = positionZ/divider;
 8000eca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 fa28 	bl	8003324 <__aeabi_i2d>
 8000ed4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000ed8:	f002 fbb4 	bl	8003644 <__aeabi_ddiv>
 8000edc:	4603      	mov	r3, r0
 8000ede:	460c      	mov	r4, r1
 8000ee0:	e9c7 3406 	strd	r3, r4, [r7, #24]

	pitch = atan(gX/(sqrt((gY*gY)+(gZ*gZ)))) * 180 / pi;
 8000ee4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ee8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000eec:	f002 fa80 	bl	80033f0 <__aeabi_dmul>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	460c      	mov	r4, r1
 8000ef4:	4625      	mov	r5, r4
 8000ef6:	461c      	mov	r4, r3
 8000ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000efc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f00:	f002 fa76 	bl	80033f0 <__aeabi_dmul>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4620      	mov	r0, r4
 8000f0a:	4629      	mov	r1, r5
 8000f0c:	f002 f8be 	bl	800308c <__adddf3>
 8000f10:	4603      	mov	r3, r0
 8000f12:	460c      	mov	r4, r1
 8000f14:	4618      	mov	r0, r3
 8000f16:	4621      	mov	r1, r4
 8000f18:	f001 ff92 	bl	8002e40 <sqrt>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	460c      	mov	r4, r1
 8000f20:	461a      	mov	r2, r3
 8000f22:	4623      	mov	r3, r4
 8000f24:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000f28:	f002 fb8c 	bl	8003644 <__aeabi_ddiv>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	460c      	mov	r4, r1
 8000f30:	4618      	mov	r0, r3
 8000f32:	4621      	mov	r1, r4
 8000f34:	f001 fde0 	bl	8002af8 <atan>
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <pwmAngleCalc+0x140>)
 8000f3e:	f002 fa57 	bl	80033f0 <__aeabi_dmul>
 8000f42:	4603      	mov	r3, r0
 8000f44:	460c      	mov	r4, r1
 8000f46:	4618      	mov	r0, r3
 8000f48:	4621      	mov	r1, r4
 8000f4a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000f4e:	f002 fb79 	bl	8003644 <__aeabi_ddiv>
 8000f52:	4603      	mov	r3, r0
 8000f54:	460c      	mov	r4, r1
 8000f56:	e9c7 3404 	strd	r3, r4, [r7, #16]
//	roll = atan(gY/(sqrt((gX*gX)+(gZ*gZ)))) * 180 / pi;

	pitchOut = (90.00+pitch) * 0.05 + 3.00;
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <pwmAngleCalc+0x144>)
 8000f60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f64:	f002 f892 	bl	800308c <__adddf3>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	460c      	mov	r4, r1
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	4621      	mov	r1, r4
 8000f70:	a30d      	add	r3, pc, #52	; (adr r3, 8000fa8 <pwmAngleCalc+0x138>)
 8000f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f76:	f002 fa3b 	bl	80033f0 <__aeabi_dmul>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	460c      	mov	r4, r1
 8000f7e:	4618      	mov	r0, r3
 8000f80:	4621      	mov	r1, r4
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <pwmAngleCalc+0x148>)
 8000f88:	f002 f880 	bl	800308c <__adddf3>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	460c      	mov	r4, r1
 8000f90:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return pitchOut;
 8000f94:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	3740      	adds	r7, #64	; 0x40
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	9999999a 	.word	0x9999999a
 8000fac:	3fa99999 	.word	0x3fa99999
 8000fb0:	40668000 	.word	0x40668000
 8000fb4:	40568000 	.word	0x40568000
 8000fb8:	40080000 	.word	0x40080000
 8000fbc:	54524550 	.word	0x54524550
 8000fc0:	400921fb 	.word	0x400921fb
 8000fc4:	00000000 	.word	0x00000000
 8000fc8:	40bffe00 	.word	0x40bffe00
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <SysTick_Handler>:

void SysTick_Handler (void)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
    static uint32_t ticks = 0, howMuchTicks = 1000;
	double steps = 0.266666, up = 11.00, lo = 3.00;
 8000fd6:	a438      	add	r4, pc, #224	; (adr r4, 80010b8 <SysTick_Handler+0xe8>)
 8000fd8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000fdc:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	4c2e      	ldr	r4, [pc, #184]	; (80010a0 <SysTick_Handler+0xd0>)
 8000fe6:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	4c2d      	ldr	r4, [pc, #180]	; (80010a4 <SysTick_Handler+0xd4>)
 8000ff0:	e9c7 3400 	strd	r3, r4, [r7]

    ticks++;
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <SysTick_Handler+0xd8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a2b      	ldr	r2, [pc, #172]	; (80010a8 <SysTick_Handler+0xd8>)
 8000ffc:	6013      	str	r3, [r2, #0]

    if (ticks == howMuchTicks)
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <SysTick_Handler+0xd8>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <SysTick_Handler+0xdc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d143      	bne.n	8001092 <SysTick_Handler+0xc2>
    {
		if (dir == 0)
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <SysTick_Handler+0xe0>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d11e      	bne.n	8001050 <SysTick_Handler+0x80>
		{
			signal = signal + steps;
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <SysTick_Handler+0xe4>)
 8001014:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001018:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800101c:	f002 f836 	bl	800308c <__adddf3>
 8001020:	4603      	mov	r3, r0
 8001022:	460c      	mov	r4, r1
 8001024:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <SysTick_Handler+0xe4>)
 8001026:	e9c2 3400 	strd	r3, r4, [r2]
			if (signal >= up)
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <SysTick_Handler+0xe4>)
 800102c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001030:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001034:	f002 fc62 	bl	80038fc <__aeabi_dcmpge>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d026      	beq.n	800108c <SysTick_Handler+0xbc>
			{
				signal = up;
 800103e:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <SysTick_Handler+0xe4>)
 8001040:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001044:	e9c2 3400 	strd	r3, r4, [r2]
				dir = 1;
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <SysTick_Handler+0xe0>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	e01d      	b.n	800108c <SysTick_Handler+0xbc>
			}
		}
		else
		{
			signal = signal - steps;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <SysTick_Handler+0xe4>)
 8001052:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001056:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800105a:	f002 f815 	bl	8003088 <__aeabi_dsub>
 800105e:	4603      	mov	r3, r0
 8001060:	460c      	mov	r4, r1
 8001062:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <SysTick_Handler+0xe4>)
 8001064:	e9c2 3400 	strd	r3, r4, [r2]
			if (signal <= lo)
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <SysTick_Handler+0xe4>)
 800106a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800106e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001072:	f002 fc39 	bl	80038e8 <__aeabi_dcmple>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d007      	beq.n	800108c <SysTick_Handler+0xbc>
			{
				signal = lo;
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <SysTick_Handler+0xe4>)
 800107e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001082:	e9c2 3400 	strd	r3, r4, [r2]
				dir = 0;
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <SysTick_Handler+0xe0>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
			}
		}
		ticks = 0;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <SysTick_Handler+0xd8>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
    }
}
 8001092:	bf00      	nop
 8001094:	371c      	adds	r7, #28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd90      	pop	{r4, r7, pc}
 800109a:	bf00      	nop
 800109c:	f3af 8000 	nop.w
 80010a0:	40260000 	.word	0x40260000
 80010a4:	40080000 	.word	0x40080000
 80010a8:	20000a3c 	.word	0x20000a3c
 80010ac:	20000018 	.word	0x20000018
 80010b0:	20000a99 	.word	0x20000a99
 80010b4:	20000a90 	.word	0x20000a90
 80010b8:	453d20f3 	.word	0x453d20f3
 80010bc:	3fd1110e 	.word	0x3fd1110e

080010c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d013      	beq.n	8001100 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010e0:	f003 0301 	and.w	r3, r3, #1
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010e8:	e000      	b.n	80010ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80010ea:	bf00      	nop
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f9      	beq.n	80010ea <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010f6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <initRetargetSwo>:
 *            CMSIS-Core > Reference > Debug Access
 *        (2) ARM Cortex-M4 Processor Technical Reference Manual
 *        (3) ARMv7-M Architecture Reference Manual
 */
void initRetargetSwo (void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
    // P2.1: After a system reset, this pin selects HWO0 (DB.TDO/DB.TRACESWO)
    // PORT2->HWSEL ... clear bits [3:2]
    PORT2->HWSEL &= ~PORT2_HWSEL_HW1_Msk;
 8001114:	4a1d      	ldr	r2, [pc, #116]	; (800118c <initRetargetSwo+0x7c>)
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <initRetargetSwo+0x7c>)
 8001118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800111a:	f023 030c 	bic.w	r3, r3, #12
 800111e:	6753      	str	r3, [r2, #116]	; 0x74
    // PORT2->HWSEL ... set bit [2] -> HWO0
    PORT2->HWSEL |= 0x01UL << PORT2_HWSEL_HW1_Pos;
 8001120:	4a1a      	ldr	r2, [pc, #104]	; (800118c <initRetargetSwo+0x7c>)
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <initRetargetSwo+0x7c>)
 8001124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6753      	str	r3, [r2, #116]	; 0x74

    // Enable trace systems
    // Source: ARMv7-M Architecture Reference Manual
    // DEMCR = Debug Exception and Monitor Control Register
    //         TRCENA ... global enable for DWT and ITM blocks
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800112c:	4a18      	ldr	r2, [pc, #96]	; (8001190 <initRetargetSwo+0x80>)
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <initRetargetSwo+0x80>)
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001136:	60d3      	str	r3, [r2, #12]
    // SWO baud rate prescaler value
    // ACPR = Asynchronous Clock Prescaler Register
    //        fSWO = fCPU / (SWOSCALAR + 1)
    //        fSWO = 1MHz (maximum speed JLINK Lite CortexM)
    //        fCPU = 120MHz
    TPI->ACPR = 119UL;
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <initRetargetSwo+0x84>)
 800113a:	2277      	movs	r2, #119	; 0x77
 800113c:	611a      	str	r2, [r3, #16]
    // Source: ARMv7-M Architecture Reference Manual
    // SPPR = Selected Pin Control Register
    //        0x0 ... Synchronous Trace Port Mode
    //        0x1 ... Asynchronous Serial Wire Output (Manchester)
    //        0x2 ... Asynchronous Serial Wire Output (NRZ)
    TPI->SPPR = 0x2UL;
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <initRetargetSwo+0x84>)
 8001140:	2202      	movs	r2, #2
 8001142:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    // Source: ARM Cortex-M4 Processor Technical Reference Manual
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    // FFCR = Formatter and Flash Control Register
    //        0x0 ... continuous formatting disabled
    //        0x1 ... continuous formatting enabled
    TPI->FFCR &= ~TPI_FFCR_EnFCont_Msk;
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <initRetargetSwo+0x84>)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <initRetargetSwo+0x84>)
 800114a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800114e:	f023 0302 	bic.w	r3, r3, #2
 8001152:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

    // Unlock ITM
    // Source: infineonforums -> 358-ITM-printf-style-debugging-not-working
    ITM->LAR = 0xC5ACCE55;
 8001156:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800115a:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <initRetargetSwo+0x88>)
 800115c:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TCR = Trace Control Register
    //       ITMENA ... enable ITM
    ITM->TCR |= ITM_TCR_ITMENA_Msk;
 8001160:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    // Source: ARMv7-M Architecture Reference Manual, Sec. C1-7
    // TER = Trace Enable Register
    //       STIMENA ... Stimulus Port #N is enabled when bit STIMENA[N]
    ITM->TER = 0xFFFFFFFF;
 8001174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	48028200 	.word	0x48028200
 8001190:	e000edf0 	.word	0xe000edf0
 8001194:	e0040000 	.word	0xe0040000
 8001198:	c5acce55 	.word	0xc5acce55

0800119c <_write>:
 * @brief Retarget the printf() function to output via the ITM Debug module.
 *        This function relies on ITM_SendChar() defined in core_cm4.h of the
 *        CMSIS library.
 */
int _write (int file, char *buf, int nbytes)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
    int i;

    for (i = 0; i < nbytes; i++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	e009      	b.n	80011c2 <_write+0x26>
        ITM_SendChar ( (*buf++));
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	60ba      	str	r2, [r7, #8]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff82 	bl	80010c0 <ITM_SendChar>
 */
int _write (int file, char *buf, int nbytes)
{
    int i;

    for (i = 0; i < nbytes; i++) {
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3301      	adds	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	dbf1      	blt.n	80011ae <_write+0x12>
        ITM_SendChar ( (*buf++));
    }
    return nbytes;
 80011ca:	687b      	ldr	r3, [r7, #4]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
 80011e0:	4613      	mov	r3, r2
 80011e2:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80011e4:	78f8      	ldrb	r0, [r7, #3]
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	3306      	adds	r3, #6
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80011f6:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80011f8:	431a      	orrs	r2, r3
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	1d83      	adds	r3, r0, #6
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800121c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f023 020f 	bic.w	r2, r3, #15
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 800125c:	2104      	movs	r1, #4
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffe4 	bl	800122c <XMC_USIC_CH_SetMode>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <XMC_I2C_CH_SetInputSource>:
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetInptSource(), XMC_USIC_CH_SetInterruptNodePointer()
 *
 */
__STATIC_INLINE void XMC_I2C_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_INPUT_t input, const uint8_t source)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
 8001278:	4613      	mov	r3, r2
 800127a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] =  (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_INSW_Msk)) | USIC_CH_DX0CR_DSEN_Msk;
 800127c:	78f8      	ldrb	r0, [r7, #3]
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	3306      	adds	r3, #6
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800128e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	1d83      	adds	r3, r0, #6
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 800129c:	78ba      	ldrb	r2, [r7, #2]
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	4619      	mov	r1, r3
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ff96 	bl	80011d4 <XMC_USIC_CH_SetInputSource>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop

080012ec <_init_i2c1_ch0>:
 *         P0_5 & P0_11
 *  @param none
 *  @return on success this function returns 0
 */
uint8_t _init_i2c1_ch0 (void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
    XMC_I2C_CH_Init (XMC_I2C1_CH0, &i2c_cfg);
 80012f0:	490e      	ldr	r1, [pc, #56]	; (800132c <_init_i2c1_ch0+0x40>)
 80012f2:	480f      	ldr	r0, [pc, #60]	; (8001330 <_init_i2c1_ch0+0x44>)
 80012f4:	f001 f8f4 	bl	80024e0 <XMC_I2C_CH_Init>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SDA, USIC1_C0_DX0_P0_5);
 80012f8:	2201      	movs	r2, #1
 80012fa:	2100      	movs	r1, #0
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <_init_i2c1_ch0+0x44>)
 80012fe:	f7ff ffb5 	bl	800126c <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_SetInputSource (XMC_I2C1_CH0, XMC_I2C_CH_INPUT_SCL, USIC1_C0_DX1_SCLKOUT);
 8001302:	2206      	movs	r2, #6
 8001304:	2101      	movs	r1, #1
 8001306:	480a      	ldr	r0, [pc, #40]	; (8001330 <_init_i2c1_ch0+0x44>)
 8001308:	f7ff ffb0 	bl	800126c <XMC_I2C_CH_SetInputSource>
    XMC_I2C_CH_Start (XMC_I2C1_CH0);
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <_init_i2c1_ch0+0x44>)
 800130e:	f7ff ffa1 	bl	8001254 <XMC_I2C_CH_Start>

    XMC_GPIO_Init (P0_11, &i2c_scl);
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <_init_i2c1_ch0+0x48>)
 8001314:	210b      	movs	r1, #11
 8001316:	4808      	ldr	r0, [pc, #32]	; (8001338 <_init_i2c1_ch0+0x4c>)
 8001318:	f000 ff68 	bl	80021ec <XMC_GPIO_Init>
    XMC_GPIO_Init (P0_5, &i2c_sda);
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <_init_i2c1_ch0+0x50>)
 800131e:	2105      	movs	r1, #5
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <_init_i2c1_ch0+0x4c>)
 8001322:	f000 ff63 	bl	80021ec <XMC_GPIO_Init>

    return 0;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000034 	.word	0x20000034
 8001330:	48020000 	.word	0x48020000
 8001334:	20000028 	.word	0x20000028
 8001338:	48028000 	.word	0x48028000
 800133c:	2000001c 	.word	0x2000001c

08001340 <_i2c_xfer>:
 *         rd_wr    ... I2C Read/Write direction
 *  @return read-value on a I2C read request or return write-value on I2C write
 *          request
 */
uint8_t _i2c_xfer (uint8_t id, uint8_t reg_addr, uint8_t i2c_data, _Bool rd_wr)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	4604      	mov	r4, r0
 8001348:	4608      	mov	r0, r1
 800134a:	4611      	mov	r1, r2
 800134c:	461a      	mov	r2, r3
 800134e:	4623      	mov	r3, r4
 8001350:	71fb      	strb	r3, [r7, #7]
 8001352:	4603      	mov	r3, r0
 8001354:	71bb      	strb	r3, [r7, #6]
 8001356:	460b      	mov	r3, r1
 8001358:	717b      	strb	r3, [r7, #5]
 800135a:	4613      	mov	r3, r2
 800135c:	713b      	strb	r3, [r7, #4]
    XMC_USIC_CH_t *channel;
    char _tmp_i2c_recv_ = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	73fb      	strb	r3, [r7, #15]
    uint8_t id_tmp = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	73bb      	strb	r3, [r7, #14]

    channel = XMC_I2C1_CH0;
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <_i2c_xfer+0x11c>)
 8001368:	60bb      	str	r3, [r7, #8]

    id_tmp = LIS3DH_RD_ADR;
 800136a:	2330      	movs	r3, #48	; 0x30
 800136c:	73bb      	strb	r3, [r7, #14]

    XMC_I2C_CH_MasterStart (channel, id_tmp, XMC_I2C_CH_CMD_WRITE);
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	b29b      	uxth	r3, r3
 8001372:	2200      	movs	r2, #0
 8001374:	4619      	mov	r1, r3
 8001376:	68b8      	ldr	r0, [r7, #8]
 8001378:	f001 f936 	bl	80025e8 <XMC_I2C_CH_MasterStart>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 800137c:	bf00      	nop
 800137e:	68b8      	ldr	r0, [r7, #8]
 8001380:	f7ff ff96 	bl	80012b0 <XMC_I2C_CH_GetStatusFlag>
 8001384:	4603      	mov	r3, r0
 8001386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f7      	beq.n	800137e <_i2c_xfer+0x3e>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 800138e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001392:	68b8      	ldr	r0, [r7, #8]
 8001394:	f7ff ff98 	bl	80012c8 <XMC_I2C_CH_ClearStatusFlag>

    XMC_I2C_CH_MasterTransmit (channel, reg_addr);
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	4619      	mov	r1, r3
 800139c:	68b8      	ldr	r0, [r7, #8]
 800139e:	f001 f9b1 	bl	8002704 <XMC_I2C_CH_MasterTransmit>
    while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 80013a2:	bf00      	nop
 80013a4:	68b8      	ldr	r0, [r7, #8]
 80013a6:	f7ff ff83 	bl	80012b0 <XMC_I2C_CH_GetStatusFlag>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f7      	beq.n	80013a4 <_i2c_xfer+0x64>
        /* wait for ACK */
    }
    XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80013b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b8:	68b8      	ldr	r0, [r7, #8]
 80013ba:	f7ff ff85 	bl	80012c8 <XMC_I2C_CH_ClearStatusFlag>

    if (rd_wr) {
 80013be:	793b      	ldrb	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d030      	beq.n	8001426 <_i2c_xfer+0xe6>
        /* Read from REG */
        XMC_I2C_CH_MasterRepeatedStart (channel, id_tmp, XMC_I2C_CH_CMD_READ);
 80013c4:	7bbb      	ldrb	r3, [r7, #14]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	2201      	movs	r2, #1
 80013ca:	4619      	mov	r1, r3
 80013cc:	68b8      	ldr	r0, [r7, #8]
 80013ce:	f001 f93f 	bl	8002650 <XMC_I2C_CH_MasterRepeatedStart>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 80013d2:	bf00      	nop
 80013d4:	68b8      	ldr	r0, [r7, #8]
 80013d6:	f7ff ff6b 	bl	80012b0 <XMC_I2C_CH_GetStatusFlag>
 80013da:	4603      	mov	r3, r0
 80013dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f7      	beq.n	80013d4 <_i2c_xfer+0x94>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80013e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e8:	68b8      	ldr	r0, [r7, #8]
 80013ea:	f7ff ff6d 	bl	80012c8 <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterReceiveNack (channel);
 80013ee:	68b8      	ldr	r0, [r7, #8]
 80013f0:	f001 f9ae 	bl	8002750 <XMC_I2C_CH_MasterReceiveNack>

        while ( (XMC_USIC_CH_GetReceiveBufferStatus (channel) !=
 80013f4:	bf00      	nop
 80013f6:	68b8      	ldr	r0, [r7, #8]
 80013f8:	f7ff ff0a 	bl	8001210 <XMC_USIC_CH_GetReceiveBufferStatus>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001402:	d006      	beq.n	8001412 <_i2c_xfer+0xd2>
                 (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) && ( (uint32_t) XMC_USIC_CH_GetReceiveBufferStatus (channel)
 8001404:	68b8      	ldr	r0, [r7, #8]
 8001406:	f7ff ff03 	bl	8001210 <XMC_USIC_CH_GetReceiveBufferStatus>
 800140a:	4603      	mov	r3, r0
 800140c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001410:	d1f1      	bne.n	80013f6 <_i2c_xfer+0xb6>
                         != (uint32_t) XMC_USIC_CH_RBUF_STATUS_DATA_VALID0));

        _tmp_i2c_recv_ = XMC_I2C_CH_GetReceivedData (channel);
 8001412:	68b8      	ldr	r0, [r7, #8]
 8001414:	f001 f9c2 	bl	800279c <XMC_I2C_CH_GetReceivedData>
 8001418:	4603      	mov	r3, r0
 800141a:	73fb      	strb	r3, [r7, #15]

        XMC_I2C_CH_MasterStop (channel);
 800141c:	68b8      	ldr	r0, [r7, #8]
 800141e:	f001 f94b 	bl	80026b8 <XMC_I2C_CH_MasterStop>

        return _tmp_i2c_recv_;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	e016      	b.n	8001454 <_i2c_xfer+0x114>
    } else {
        /* Write to REG */
        XMC_I2C_CH_MasterTransmit (channel, i2c_data);
 8001426:	797b      	ldrb	r3, [r7, #5]
 8001428:	4619      	mov	r1, r3
 800142a:	68b8      	ldr	r0, [r7, #8]
 800142c:	f001 f96a 	bl	8002704 <XMC_I2C_CH_MasterTransmit>
        while ( (XMC_I2C_CH_GetStatusFlag (channel) & XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED) == 0U) {
 8001430:	bf00      	nop
 8001432:	68b8      	ldr	r0, [r7, #8]
 8001434:	f7ff ff3c 	bl	80012b0 <XMC_I2C_CH_GetStatusFlag>
 8001438:	4603      	mov	r3, r0
 800143a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f7      	beq.n	8001432 <_i2c_xfer+0xf2>
            /* wait for ACK */
        }
        XMC_I2C_CH_ClearStatusFlag (channel, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8001442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001446:	68b8      	ldr	r0, [r7, #8]
 8001448:	f7ff ff3e 	bl	80012c8 <XMC_I2C_CH_ClearStatusFlag>

        XMC_I2C_CH_MasterStop (channel);
 800144c:	68b8      	ldr	r0, [r7, #8]
 800144e:	f001 f933 	bl	80026b8 <XMC_I2C_CH_MasterStop>

        return i2c_data;
 8001452:	797b      	ldrb	r3, [r7, #5]
    }
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	48020000 	.word	0x48020000

08001460 <LIS3DH_ReadReg>:
*			: I2C or SPI reading functions
* Input			: Register Address
* Output		: Data REad
* Return		: None
*******************************************************************************/
u8_t LIS3DH_ReadReg(u8_t Reg, u8_t* Data) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]

    //To be completed with either I2c or SPI reading function
    //i.e. *Data = SPI_Mems_Read_Reg( Reg );

    *Data = _i2c_xfer (0, Reg, 0, 1);
 800146c:	79f9      	ldrb	r1, [r7, #7]
 800146e:	2301      	movs	r3, #1
 8001470:	2200      	movs	r2, #0
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff ff64 	bl	8001340 <_i2c_xfer>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	701a      	strb	r2, [r3, #0]

    return 1;
 8001480:	2301      	movs	r3, #1
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop

0800148c <LIS3DH_WriteReg>:
*			: I2C or SPI writing function
* Input			: Register Address, Data to be written
* Output		: None
* Return		: None
*******************************************************************************/
u8_t LIS3DH_WriteReg(u8_t WriteAddr, u8_t Data) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	460a      	mov	r2, r1
 8001496:	71fb      	strb	r3, [r7, #7]
 8001498:	4613      	mov	r3, r2
 800149a:	71bb      	strb	r3, [r7, #6]

    //To be completed with either I2c or SPI writing function
    //i.e. SPI_Mems_Write_Reg(WriteAddr, Data);

    _i2c_xfer (0, WriteAddr, Data, 0);
 800149c:	79ba      	ldrb	r2, [r7, #6]
 800149e:	79f9      	ldrb	r1, [r7, #7]
 80014a0:	2300      	movs	r3, #0
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff ff4c 	bl	8001340 <_i2c_xfer>

    return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop

080014b4 <LIS3DH_SetODR>:
* Description    : Sets LIS3DH Output Data Rate
* Input          : Output Data Rate
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetODR(LIS3DH_ODR_t ov) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 80014be:	f107 030f 	add.w	r3, r7, #15
 80014c2:	4619      	mov	r1, r3
 80014c4:	2020      	movs	r0, #32
 80014c6:	f7ff ffcb 	bl	8001460 <LIS3DH_ReadReg>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <LIS3DH_SetODR+0x20>
        return MEMS_ERROR;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e018      	b.n	8001506 <LIS3DH_SetODR+0x52>

    value &= 0x0f;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	73fb      	strb	r3, [r7, #15]
    value |= ov<<LIS3DH_ODR_BIT;
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	b25a      	sxtb	r2, r3
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	4619      	mov	r1, r3
 80014f4:	2020      	movs	r0, #32
 80014f6:	f7ff ffc9 	bl	800148c <LIS3DH_WriteReg>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <LIS3DH_SetODR+0x50>
        return MEMS_ERROR;
 8001500:	2300      	movs	r3, #0
 8001502:	e000      	b.n	8001506 <LIS3DH_SetODR+0x52>

    return MEMS_SUCCESS;
 8001504:	2301      	movs	r3, #1
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop

08001510 <LIS3DH_SetTemperature>:
* Output         : None
* Note           : For Read Temperature by LIS3DH_OUT_AUX_3, LIS3DH_SetADCAux and LIS3DH_SetBDU
				   functions must be ENABLE
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetTemperature(State_t state) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
 800151a:	f107 030f 	add.w	r3, r7, #15
 800151e:	4619      	mov	r1, r3
 8001520:	201f      	movs	r0, #31
 8001522:	f7ff ff9d 	bl	8001460 <LIS3DH_ReadReg>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <LIS3DH_SetTemperature+0x20>
        return MEMS_ERROR;
 800152c:	2300      	movs	r3, #0
 800152e:	e018      	b.n	8001562 <LIS3DH_SetTemperature+0x52>

    value &= 0xBF;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001536:	b2db      	uxtb	r3, r3
 8001538:	73fb      	strb	r3, [r7, #15]
    value |= state<<LIS3DH_TEMP_EN;
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	019b      	lsls	r3, r3, #6
 800153e:	b25a      	sxtb	r2, r3
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	b25b      	sxtb	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b25b      	sxtb	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	4619      	mov	r1, r3
 8001550:	201f      	movs	r0, #31
 8001552:	f7ff ff9b 	bl	800148c <LIS3DH_WriteReg>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <LIS3DH_SetTemperature+0x50>
        return MEMS_ERROR;
 800155c:	2300      	movs	r3, #0
 800155e:	e000      	b.n	8001562 <LIS3DH_SetTemperature+0x52>

    return MEMS_SUCCESS;
 8001560:	2301      	movs	r3, #1
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop

0800156c <LIS3DH_SetADCAux>:
* Description    : Sets LIS3DH Output ADC
* Input          : MEMS_ENABLE, MEMS_DISABLE
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetADCAux(State_t state) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_TEMP_CFG_REG, &value) )
 8001576:	f107 030f 	add.w	r3, r7, #15
 800157a:	4619      	mov	r1, r3
 800157c:	201f      	movs	r0, #31
 800157e:	f7ff ff6f 	bl	8001460 <LIS3DH_ReadReg>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <LIS3DH_SetADCAux+0x20>
        return MEMS_ERROR;
 8001588:	2300      	movs	r3, #0
 800158a:	e018      	b.n	80015be <LIS3DH_SetADCAux+0x52>

    value &= 0x7F;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001592:	b2db      	uxtb	r3, r3
 8001594:	73fb      	strb	r3, [r7, #15]
    value |= state<<LIS3DH_ADC_PD;
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	01db      	lsls	r3, r3, #7
 800159a:	b25a      	sxtb	r2, r3
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	b25b      	sxtb	r3, r3
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b25b      	sxtb	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_TEMP_CFG_REG, value) )
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	4619      	mov	r1, r3
 80015ac:	201f      	movs	r0, #31
 80015ae:	f7ff ff6d 	bl	800148c <LIS3DH_WriteReg>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <LIS3DH_SetADCAux+0x50>
        return MEMS_ERROR;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e000      	b.n	80015be <LIS3DH_SetADCAux+0x52>

    return MEMS_SUCCESS;
 80015bc:	2301      	movs	r3, #1
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop

080015c8 <LIS3DH_GetTempRaw>:
* Description    : Read the Temperature Values by AUX Output Registers OUT_3_H
* Input          : Buffer to empty
* Output         : Temperature Values Registers buffer
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_GetTempRaw(i8_t* buff) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
    u8_t valueL;
    u8_t valueH;

    if( !LIS3DH_ReadReg(LIS3DH_OUT_3_L, &valueL) )
 80015d0:	f107 030f 	add.w	r3, r7, #15
 80015d4:	4619      	mov	r1, r3
 80015d6:	200c      	movs	r0, #12
 80015d8:	f7ff ff42 	bl	8001460 <LIS3DH_ReadReg>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <LIS3DH_GetTempRaw+0x1e>
        return MEMS_ERROR;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e00f      	b.n	8001606 <LIS3DH_GetTempRaw+0x3e>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_3_H, &valueH) )
 80015e6:	f107 030e 	add.w	r3, r7, #14
 80015ea:	4619      	mov	r1, r3
 80015ec:	200d      	movs	r0, #13
 80015ee:	f7ff ff37 	bl	8001460 <LIS3DH_ReadReg>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <LIS3DH_GetTempRaw+0x34>
        return MEMS_ERROR;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e004      	b.n	8001606 <LIS3DH_GetTempRaw+0x3e>

    *buff = (i8_t)( valueH );
 80015fc:	7bbb      	ldrb	r3, [r7, #14]
 80015fe:	b25a      	sxtb	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	701a      	strb	r2, [r3, #0]

    return MEMS_SUCCESS;
 8001604:	2301      	movs	r3, #1
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop

08001610 <LIS3DH_SetMode>:
* Description    : Sets LIS3DH Operating Mode
* Input          : Modality (LIS3DH_NORMAL, LIS3DH_LOW_POWER, LIS3DH_POWER_DOWN)
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetMode(LIS3DH_Mode_t md) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
    u8_t value;
    u8_t value2;
    static   u8_t ODR_old_value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 800161a:	f107 030f 	add.w	r3, r7, #15
 800161e:	4619      	mov	r1, r3
 8001620:	2020      	movs	r0, #32
 8001622:	f7ff ff1d 	bl	8001460 <LIS3DH_ReadReg>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <LIS3DH_SetMode+0x20>
        return MEMS_ERROR;
 800162c:	2300      	movs	r3, #0
 800162e:	e066      	b.n	80016fe <LIS3DH_SetMode+0xee>

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value2) )
 8001630:	f107 030e 	add.w	r3, r7, #14
 8001634:	4619      	mov	r1, r3
 8001636:	2023      	movs	r0, #35	; 0x23
 8001638:	f7ff ff12 	bl	8001460 <LIS3DH_ReadReg>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <LIS3DH_SetMode+0x36>
        return MEMS_ERROR;
 8001642:	2300      	movs	r3, #0
 8001644:	e05b      	b.n	80016fe <LIS3DH_SetMode+0xee>

    if((value & 0xF0)==0)
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10b      	bne.n	8001668 <LIS3DH_SetMode+0x58>
        value = value | (ODR_old_value & 0xF0); //if it comes from POWERDOWN
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <LIS3DH_SetMode+0xf8>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b25b      	sxtb	r3, r3
 8001656:	f023 030f 	bic.w	r3, r3, #15
 800165a:	b25a      	sxtb	r2, r3
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	b25b      	sxtb	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b25b      	sxtb	r3, r3
 8001664:	b2db      	uxtb	r3, r3
 8001666:	73fb      	strb	r3, [r7, #15]

    switch(md) {
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d01e      	beq.n	80016ac <LIS3DH_SetMode+0x9c>
 800166e:	2b02      	cmp	r3, #2
 8001670:	d00a      	beq.n	8001688 <LIS3DH_SetMode+0x78>
 8001672:	2b00      	cmp	r3, #0
 8001674:	d12c      	bne.n	80016d0 <LIS3DH_SetMode+0xc0>

    case LIS3DH_POWER_DOWN:
        ODR_old_value = value;
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	4b23      	ldr	r3, [pc, #140]	; (8001708 <LIS3DH_SetMode+0xf8>)
 800167a:	701a      	strb	r2, [r3, #0]
        value &= 0x0F;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	b2db      	uxtb	r3, r3
 8001684:	73fb      	strb	r3, [r7, #15]
        break;
 8001686:	e025      	b.n	80016d4 <LIS3DH_SetMode+0xc4>

    case LIS3DH_NORMAL:
        value &= 0xF7;
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	f023 0308 	bic.w	r3, r3, #8
 800168e:	b2db      	uxtb	r3, r3
 8001690:	73fb      	strb	r3, [r7, #15]
        value |= (MEMS_RESET<<LIS3DH_LPEN);
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 8001696:	7bbb      	ldrb	r3, [r7, #14]
 8001698:	f023 0308 	bic.w	r3, r3, #8
 800169c:	b2db      	uxtb	r3, r3
 800169e:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_SET<<LIS3DH_HR);   //set HighResolution_BIT
 80016a0:	7bbb      	ldrb	r3, [r7, #14]
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	73bb      	strb	r3, [r7, #14]
        break;
 80016aa:	e013      	b.n	80016d4 <LIS3DH_SetMode+0xc4>

    case LIS3DH_LOW_POWER:
        value &= 0xF7;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	f023 0308 	bic.w	r3, r3, #8
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	73fb      	strb	r3, [r7, #15]
        value |=  (MEMS_SET<<LIS3DH_LPEN);
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	73fb      	strb	r3, [r7, #15]
        value2 &= 0xF7;
 80016c0:	7bbb      	ldrb	r3, [r7, #14]
 80016c2:	f023 0308 	bic.w	r3, r3, #8
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	73bb      	strb	r3, [r7, #14]
        value2 |= (MEMS_RESET<<LIS3DH_HR); //reset HighResolution_BIT
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	73bb      	strb	r3, [r7, #14]
        break;
 80016ce:	e001      	b.n	80016d4 <LIS3DH_SetMode+0xc4>

    default:
        return MEMS_ERROR;
 80016d0:	2300      	movs	r3, #0
 80016d2:	e014      	b.n	80016fe <LIS3DH_SetMode+0xee>
    }

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	4619      	mov	r1, r3
 80016d8:	2020      	movs	r0, #32
 80016da:	f7ff fed7 	bl	800148c <LIS3DH_WriteReg>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <LIS3DH_SetMode+0xd8>
        return MEMS_ERROR;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e00a      	b.n	80016fe <LIS3DH_SetMode+0xee>

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value2) )
 80016e8:	7bbb      	ldrb	r3, [r7, #14]
 80016ea:	4619      	mov	r1, r3
 80016ec:	2023      	movs	r0, #35	; 0x23
 80016ee:	f7ff fecd 	bl	800148c <LIS3DH_WriteReg>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <LIS3DH_SetMode+0xec>
        return MEMS_ERROR;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e000      	b.n	80016fe <LIS3DH_SetMode+0xee>

    return MEMS_SUCCESS;
 80016fc:	2301      	movs	r3, #1
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000a40 	.word	0x20000a40

0800170c <LIS3DH_SetAxis>:
* Input          : LIS3DH_X_ENABLE/DISABLE | LIS3DH_Y_ENABLE/DISABLE | LIS3DH_Z_ENABLE/DISABLE
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetAxis(LIS3DH_Axis_t axis) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG1, &value) )
 8001716:	f107 030f 	add.w	r3, r7, #15
 800171a:	4619      	mov	r1, r3
 800171c:	2020      	movs	r0, #32
 800171e:	f7ff fe9f 	bl	8001460 <LIS3DH_ReadReg>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <LIS3DH_SetAxis+0x20>
        return MEMS_ERROR;
 8001728:	2300      	movs	r3, #0
 800172a:	e017      	b.n	800175c <LIS3DH_SetAxis+0x50>
    value &= 0xF8;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	f023 0307 	bic.w	r3, r3, #7
 8001732:	b2db      	uxtb	r3, r3
 8001734:	73fb      	strb	r3, [r7, #15]
    value |= (0x07 & axis);
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	b2da      	uxtb	r2, r3
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	4313      	orrs	r3, r2
 8001742:	b2db      	uxtb	r3, r3
 8001744:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG1, value) )
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	4619      	mov	r1, r3
 800174a:	2020      	movs	r0, #32
 800174c:	f7ff fe9e 	bl	800148c <LIS3DH_WriteReg>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <LIS3DH_SetAxis+0x4e>
        return MEMS_ERROR;
 8001756:	2300      	movs	r3, #0
 8001758:	e000      	b.n	800175c <LIS3DH_SetAxis+0x50>

    return MEMS_SUCCESS;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <LIS3DH_SetFullScale>:
* Description    : Sets the LIS3DH FullScale
* Input          : LIS3DH_FULLSCALE_2/LIS3DH_FULLSCALE_4/LIS3DH_FULLSCALE_8/LIS3DH_FULLSCALE_16
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetFullScale(LIS3DH_Fullscale_t fs) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 800176e:	f107 030f 	add.w	r3, r7, #15
 8001772:	4619      	mov	r1, r3
 8001774:	2023      	movs	r0, #35	; 0x23
 8001776:	f7ff fe73 	bl	8001460 <LIS3DH_ReadReg>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <LIS3DH_SetFullScale+0x20>
        return MEMS_ERROR;
 8001780:	2300      	movs	r3, #0
 8001782:	e018      	b.n	80017b6 <LIS3DH_SetFullScale+0x52>

    value &= 0xCF;
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800178a:	b2db      	uxtb	r3, r3
 800178c:	73fb      	strb	r3, [r7, #15]
    value |= (fs<<LIS3DH_FS);
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	b25a      	sxtb	r2, r3
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	b25b      	sxtb	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b25b      	sxtb	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	4619      	mov	r1, r3
 80017a4:	2023      	movs	r0, #35	; 0x23
 80017a6:	f7ff fe71 	bl	800148c <LIS3DH_WriteReg>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <LIS3DH_SetFullScale+0x50>
        return MEMS_ERROR;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e000      	b.n	80017b6 <LIS3DH_SetFullScale+0x52>

    return MEMS_SUCCESS;
 80017b4:	2301      	movs	r3, #1
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop

080017c0 <LIS3DH_SetBDU>:
* Description    : Enable/Disable Block Data Update Functionality
* Input          : ENABLE/DISABLE
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetBDU(State_t bdu) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_CTRL_REG4, &value) )
 80017ca:	f107 030f 	add.w	r3, r7, #15
 80017ce:	4619      	mov	r1, r3
 80017d0:	2023      	movs	r0, #35	; 0x23
 80017d2:	f7ff fe45 	bl	8001460 <LIS3DH_ReadReg>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <LIS3DH_SetBDU+0x20>
        return MEMS_ERROR;
 80017dc:	2300      	movs	r3, #0
 80017de:	e018      	b.n	8001812 <LIS3DH_SetBDU+0x52>

    value &= 0x7F;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	73fb      	strb	r3, [r7, #15]
    value |= (bdu<<LIS3DH_BDU);
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	01db      	lsls	r3, r3, #7
 80017ee:	b25a      	sxtb	r2, r3
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_CTRL_REG4, value) )
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	4619      	mov	r1, r3
 8001800:	2023      	movs	r0, #35	; 0x23
 8001802:	f7ff fe43 	bl	800148c <LIS3DH_WriteReg>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <LIS3DH_SetBDU+0x50>
        return MEMS_ERROR;
 800180c:	2300      	movs	r3, #0
 800180e:	e000      	b.n	8001812 <LIS3DH_SetBDU+0x52>

    return MEMS_SUCCESS;
 8001810:	2301      	movs	r3, #1
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop

0800181c <LIS3DH_SetIntConfiguration>:
* Input          : LIS3DH_INT1_AND/OR | LIS3DH_INT1_ZHIE_ENABLE/DISABLE | LIS3DH_INT1_ZLIE_ENABLE/DISABLE...
* Output         : None
* Note           : You MUST use all input variable in the argument, as example
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntConfiguration(LIS3DH_Int1Conf_t ic) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 8001826:	f107 030f 	add.w	r3, r7, #15
 800182a:	4619      	mov	r1, r3
 800182c:	2030      	movs	r0, #48	; 0x30
 800182e:	f7ff fe17 	bl	8001460 <LIS3DH_ReadReg>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <LIS3DH_SetIntConfiguration+0x20>
        return MEMS_ERROR;
 8001838:	2300      	movs	r3, #0
 800183a:	e014      	b.n	8001866 <LIS3DH_SetIntConfiguration+0x4a>

    value &= 0x40;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001842:	b2db      	uxtb	r3, r3
 8001844:	73fb      	strb	r3, [r7, #15]
    value |= ic;
 8001846:	7bfa      	ldrb	r2, [r7, #15]
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	4313      	orrs	r3, r2
 800184c:	b2db      	uxtb	r3, r3
 800184e:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	4619      	mov	r1, r3
 8001854:	2030      	movs	r0, #48	; 0x30
 8001856:	f7ff fe19 	bl	800148c <LIS3DH_WriteReg>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <LIS3DH_SetIntConfiguration+0x48>
        return MEMS_ERROR;
 8001860:	2300      	movs	r3, #0
 8001862:	e000      	b.n	8001866 <LIS3DH_SetIntConfiguration+0x4a>

    return MEMS_SUCCESS;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop

08001870 <LIS3DH_SetIntMode>:
* Input          : LIS3DH_INT_MODE_OR, LIS3DH_INT_MODE_6D_MOVEMENT, LIS3DH_INT_MODE_AND,
				   LIS3DH_INT_MODE_6D_POSITION
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetIntMode(LIS3DH_Int1Mode_t int_mode) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_CFG, &value) )
 800187a:	f107 030f 	add.w	r3, r7, #15
 800187e:	4619      	mov	r1, r3
 8001880:	2030      	movs	r0, #48	; 0x30
 8001882:	f7ff fded 	bl	8001460 <LIS3DH_ReadReg>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <LIS3DH_SetIntMode+0x20>
        return MEMS_ERROR;
 800188c:	2300      	movs	r3, #0
 800188e:	e018      	b.n	80018c2 <LIS3DH_SetIntMode+0x52>

    value &= 0x3F;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001896:	b2db      	uxtb	r3, r3
 8001898:	73fb      	strb	r3, [r7, #15]
    value |= (int_mode<<LIS3DH_INT_6D);
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	019b      	lsls	r3, r3, #6
 800189e:	b25a      	sxtb	r2, r3
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	b25b      	sxtb	r3, r3
 80018a4:	4313      	orrs	r3, r2
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	73fb      	strb	r3, [r7, #15]

    if( !LIS3DH_WriteReg(LIS3DH_INT1_CFG, value) )
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	4619      	mov	r1, r3
 80018b0:	2030      	movs	r0, #48	; 0x30
 80018b2:	f7ff fdeb 	bl	800148c <LIS3DH_WriteReg>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <LIS3DH_SetIntMode+0x50>
        return MEMS_ERROR;
 80018bc:	2300      	movs	r3, #0
 80018be:	e000      	b.n	80018c2 <LIS3DH_SetIntMode+0x52>

    return MEMS_SUCCESS;
 80018c0:	2301      	movs	r3, #1
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop

080018cc <LIS3DH_Get6DPosition>:
* Description    : 6D, 4D Interrupt Position Detect
* Input          : Byte to empty by POSITION_6D_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_Get6DPosition(u8_t* val) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
    u8_t value;

    if( !LIS3DH_ReadReg(LIS3DH_INT1_SRC, &value) )
 80018d4:	f107 030f 	add.w	r3, r7, #15
 80018d8:	4619      	mov	r1, r3
 80018da:	2031      	movs	r0, #49	; 0x31
 80018dc:	f7ff fdc0 	bl	8001460 <LIS3DH_ReadReg>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <LIS3DH_Get6DPosition+0x1e>
        return MEMS_ERROR;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e065      	b.n	80019b6 <LIS3DH_Get6DPosition+0xea>

    value &= 0x7F;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	73fb      	strb	r3, [r7, #15]

    switch (value) {
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	3b41      	subs	r3, #65	; 0x41
 80018f8:	2b1f      	cmp	r3, #31
 80018fa:	d85b      	bhi.n	80019b4 <LIS3DH_Get6DPosition+0xe8>
 80018fc:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <LIS3DH_Get6DPosition+0x38>)
 80018fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001902:	bf00      	nop
 8001904:	08001995 	.word	0x08001995
 8001908:	0800198d 	.word	0x0800198d
 800190c:	080019b5 	.word	0x080019b5
 8001910:	08001985 	.word	0x08001985
 8001914:	080019b5 	.word	0x080019b5
 8001918:	080019b5 	.word	0x080019b5
 800191c:	080019b5 	.word	0x080019b5
 8001920:	0800199d 	.word	0x0800199d
 8001924:	080019b5 	.word	0x080019b5
 8001928:	080019b5 	.word	0x080019b5
 800192c:	080019b5 	.word	0x080019b5
 8001930:	080019b5 	.word	0x080019b5
 8001934:	080019b5 	.word	0x080019b5
 8001938:	080019b5 	.word	0x080019b5
 800193c:	080019b5 	.word	0x080019b5
 8001940:	080019ad 	.word	0x080019ad
 8001944:	080019b5 	.word	0x080019b5
 8001948:	080019b5 	.word	0x080019b5
 800194c:	080019b5 	.word	0x080019b5
 8001950:	080019b5 	.word	0x080019b5
 8001954:	080019b5 	.word	0x080019b5
 8001958:	080019b5 	.word	0x080019b5
 800195c:	080019b5 	.word	0x080019b5
 8001960:	080019b5 	.word	0x080019b5
 8001964:	080019b5 	.word	0x080019b5
 8001968:	080019b5 	.word	0x080019b5
 800196c:	080019b5 	.word	0x080019b5
 8001970:	080019b5 	.word	0x080019b5
 8001974:	080019b5 	.word	0x080019b5
 8001978:	080019b5 	.word	0x080019b5
 800197c:	080019b5 	.word	0x080019b5
 8001980:	080019a5 	.word	0x080019a5
    case LIS3DH_UP_SX:
        *val = LIS3DH_UP_SX;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2244      	movs	r2, #68	; 0x44
 8001988:	701a      	strb	r2, [r3, #0]
        break;
 800198a:	e013      	b.n	80019b4 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_UP_DX:
        *val = LIS3DH_UP_DX;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2242      	movs	r2, #66	; 0x42
 8001990:	701a      	strb	r2, [r3, #0]
        break;
 8001992:	e00f      	b.n	80019b4 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_SX:
        *val = LIS3DH_DW_SX;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2241      	movs	r2, #65	; 0x41
 8001998:	701a      	strb	r2, [r3, #0]
        break;
 800199a:	e00b      	b.n	80019b4 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_DW_DX:
        *val = LIS3DH_DW_DX;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2248      	movs	r2, #72	; 0x48
 80019a0:	701a      	strb	r2, [r3, #0]
        break;
 80019a2:	e007      	b.n	80019b4 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_TOP:
        *val = LIS3DH_TOP;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2260      	movs	r2, #96	; 0x60
 80019a8:	701a      	strb	r2, [r3, #0]
        break;
 80019aa:	e003      	b.n	80019b4 <LIS3DH_Get6DPosition+0xe8>
    case LIS3DH_BOTTOM:
        *val = LIS3DH_BOTTOM;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2250      	movs	r2, #80	; 0x50
 80019b0:	701a      	strb	r2, [r3, #0]
        break;
 80019b2:	bf00      	nop
    }

    return MEMS_SUCCESS;
 80019b4:	2301      	movs	r3, #1
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop

080019c0 <LIS3DH_SetInt1Threshold>:
* Description    : Sets Interrupt 1 Threshold
* Input          : Threshold = [0,31]
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_SetInt1Threshold(u8_t ths) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
    if (ths > 127)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	da01      	bge.n	80019d6 <LIS3DH_SetInt1Threshold+0x16>
        return MEMS_ERROR;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e00a      	b.n	80019ec <LIS3DH_SetInt1Threshold+0x2c>

    if( !LIS3DH_WriteReg(LIS3DH_INT1_THS, ths) )
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	4619      	mov	r1, r3
 80019da:	2032      	movs	r0, #50	; 0x32
 80019dc:	f7ff fd56 	bl	800148c <LIS3DH_WriteReg>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <LIS3DH_SetInt1Threshold+0x2a>
        return MEMS_ERROR;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <LIS3DH_SetInt1Threshold+0x2c>

    return MEMS_SUCCESS;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <LIS3DH_GetAccAxesRaw>:
* Description    : Read the Acceleration Values Output Registers
* Input          : buffer to empity by AxesRaw_t Typedef
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LIS3DH_GetAccAxesRaw(AxesRaw_t* buff) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
    i16_t value;
    u8_t *valueL = (u8_t *)(&value);
 80019fc:	f107 030e 	add.w	r3, r7, #14
 8001a00:	617b      	str	r3, [r7, #20]
    u8_t *valueH = ((u8_t *)(&value)+1);
 8001a02:	f107 030e 	add.w	r3, r7, #14
 8001a06:	3301      	adds	r3, #1
 8001a08:	613b      	str	r3, [r7, #16]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_L, valueL) )
 8001a0a:	6979      	ldr	r1, [r7, #20]
 8001a0c:	2028      	movs	r0, #40	; 0x28
 8001a0e:	f7ff fd27 	bl	8001460 <LIS3DH_ReadReg>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <LIS3DH_GetAccAxesRaw+0x28>
        return MEMS_ERROR;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	e039      	b.n	8001a90 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_X_H, valueH) )
 8001a1c:	6939      	ldr	r1, [r7, #16]
 8001a1e:	2029      	movs	r0, #41	; 0x29
 8001a20:	f7ff fd1e 	bl	8001460 <LIS3DH_ReadReg>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <LIS3DH_GetAccAxesRaw+0x3a>
        return MEMS_ERROR;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e030      	b.n	8001a90 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_X = value;
 8001a2e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	801a      	strh	r2, [r3, #0]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_L, valueL) )
 8001a36:	6979      	ldr	r1, [r7, #20]
 8001a38:	202a      	movs	r0, #42	; 0x2a
 8001a3a:	f7ff fd11 	bl	8001460 <LIS3DH_ReadReg>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <LIS3DH_GetAccAxesRaw+0x54>
        return MEMS_ERROR;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e023      	b.n	8001a90 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Y_H, valueH) )
 8001a48:	6939      	ldr	r1, [r7, #16]
 8001a4a:	202b      	movs	r0, #43	; 0x2b
 8001a4c:	f7ff fd08 	bl	8001460 <LIS3DH_ReadReg>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <LIS3DH_GetAccAxesRaw+0x66>
        return MEMS_ERROR;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e01a      	b.n	8001a90 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Y = value;
 8001a5a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	805a      	strh	r2, [r3, #2]

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_L, valueL) )
 8001a62:	6979      	ldr	r1, [r7, #20]
 8001a64:	202c      	movs	r0, #44	; 0x2c
 8001a66:	f7ff fcfb 	bl	8001460 <LIS3DH_ReadReg>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <LIS3DH_GetAccAxesRaw+0x80>
        return MEMS_ERROR;
 8001a70:	2300      	movs	r3, #0
 8001a72:	e00d      	b.n	8001a90 <LIS3DH_GetAccAxesRaw+0x9c>

    if( !LIS3DH_ReadReg(LIS3DH_OUT_Z_H, valueH) )
 8001a74:	6939      	ldr	r1, [r7, #16]
 8001a76:	202d      	movs	r0, #45	; 0x2d
 8001a78:	f7ff fcf2 	bl	8001460 <LIS3DH_ReadReg>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <LIS3DH_GetAccAxesRaw+0x92>
        return MEMS_ERROR;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e004      	b.n	8001a90 <LIS3DH_GetAccAxesRaw+0x9c>

    buff->AXIS_Z = value;
 8001a86:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	809a      	strh	r2, [r3, #4]

    return MEMS_SUCCESS;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <main>:
#include "3Daccel_app.h"
#include "3Daccel_out_library.h"
#include "lis3dh_library.h"

int main (void)
{
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b0a7      	sub	sp, #156	; 0x9c
 8001a9c:	af02      	add	r7, sp, #8
	uint8_t direction = 6;
 8001a9e:	2306      	movs	r3, #6
 8001aa0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	int8_t temperature = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	char rx_buff[RX_BUFFER_SIZE] = {0};
 8001aaa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aae:	2240      	movs	r2, #64	; 0x40
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 f834 	bl	8003b20 <memset>
	char an_buff[RX_BUFFER_SIZE] = {0};
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	2240      	movs	r2, #64	; 0x40
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 f82d 	bl	8003b20 <memset>
	AXESRAWDATA readAxes;
	
	errorcount = 0, packagesSent = 0, position = 0, old_position = 0;
 8001ac6:	4b87      	ldr	r3, [pc, #540]	; (8001ce4 <main+0x24c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	4b86      	ldr	r3, [pc, #536]	; (8001ce8 <main+0x250>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	4b86      	ldr	r3, [pc, #536]	; (8001cec <main+0x254>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	4b85      	ldr	r3, [pc, #532]	; (8001cf0 <main+0x258>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
	readAxes.axisX = 0, readAxes.axisY = 0, readAxes.axisZ = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	80bb      	strh	r3, [r7, #4]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	80fb      	strh	r3, [r7, #6]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	813b      	strh	r3, [r7, #8]
	statisticSend = 0;
 8001aea:	4b82      	ldr	r3, [pc, #520]	; (8001cf4 <main+0x25c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
	signal = 3.00;
 8001af0:	4a81      	ldr	r2, [pc, #516]	; (8001cf8 <main+0x260>)
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	4c81      	ldr	r4, [pc, #516]	; (8001cfc <main+0x264>)
 8001af8:	e9c2 3400 	strd	r3, r4, [r2]
	dir = 0;
 8001afc:	4b80      	ldr	r3, [pc, #512]	; (8001d00 <main+0x268>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]

	// init DEBUG, UART, I2C
    initRetargetSwo();
 8001b02:	f7ff fb05 	bl	8001110 <initRetargetSwo>
    _init_uart0_ch0();
 8001b06:	f7fe fe85 	bl	8000814 <_init_uart0_ch0>
    _init_i2c1_ch0();
 8001b0a:	f7ff fbef 	bl	80012ec <_init_i2c1_ch0>
	initServoPWM();
 8001b0e:	f7fe ffc3 	bl	8000a98 <initServoPWM>
	

#if DEBUG
    printf("DEBUG+I2C+UART init done...\n");
 8001b12:	487c      	ldr	r0, [pc, #496]	; (8001d04 <main+0x26c>)
 8001b14:	f002 f89a 	bl	8003c4c <puts>
#endif

	// init LED output
	outputInit();
 8001b18:	f7ff f946 	bl	8000da8 <outputInit>
//    SysTick_Config (SystemCoreClock / 1000);

    // init MEMS
	while (1)
	{
		if (initMEMSsensor() == 0)
 8001b1c:	f7fe fbca 	bl	80002b4 <initMEMSsensor>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d103      	bne.n	8001b2e <main+0x96>
		{
#if DEBUG
			printf("MEMS init done...\n");
 8001b26:	4878      	ldr	r0, [pc, #480]	; (8001d08 <main+0x270>)
 8001b28:	f002 f890 	bl	8003c4c <puts>
#endif
			break;
 8001b2c:	e007      	b.n	8001b3e <main+0xa6>
		}
		else
		{
#if DEBUG
			printf("Error MEMS init, retry...\n");
 8001b2e:	4877      	ldr	r0, [pc, #476]	; (8001d0c <main+0x274>)
 8001b30:	f002 f88c 	bl	8003c4c <puts>
#endif
			ledSetting(0, 1);
 8001b34:	2101      	movs	r1, #1
 8001b36:	2000      	movs	r0, #0
 8001b38:	f7ff f94c 	bl	8000dd4 <ledSetting>
		}
	}
 8001b3c:	e7ee      	b.n	8001b1c <main+0x84>

	// config MEMS
	while (1)
	{
		if (configMEMSsensor() == 0)
 8001b3e:	f7fe fc21 	bl	8000384 <configMEMSsensor>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10b      	bne.n	8001b60 <main+0xc8>
		{
#if DEBUG
			printf("MEMS config done...\n");
 8001b48:	4871      	ldr	r0, [pc, #452]	; (8001d10 <main+0x278>)
 8001b4a:	f002 f87f 	bl	8003c4c <puts>
#endif
			break;
 8001b4e:	bf00      	nop
#endif
			ledSetting(0, 1);
		}
	}

	pwm(signal);
 8001b50:	4b69      	ldr	r3, [pc, #420]	; (8001cf8 <main+0x260>)
 8001b52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b56:	4618      	mov	r0, r3
 8001b58:	4621      	mov	r1, r4
 8001b5a:	f7ff f979 	bl	8000e50 <pwm>
 8001b5e:	e007      	b.n	8001b70 <main+0xd8>
			break;
		}
		else
		{
#if DEBUG
			printf("Error MEMS config, retry...\n");
 8001b60:	486c      	ldr	r0, [pc, #432]	; (8001d14 <main+0x27c>)
 8001b62:	f002 f873 	bl	8003c4c <puts>
#endif
			ledSetting(0, 1);
 8001b66:	2101      	movs	r1, #1
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f7ff f933 	bl	8000dd4 <ledSetting>
		}
	}
 8001b6e:	e7e6      	b.n	8001b3e <main+0xa6>

	pwm(signal);
	// main loop
	while(1)
	{
		pwm(signal);
 8001b70:	4b61      	ldr	r3, [pc, #388]	; (8001cf8 <main+0x260>)
 8001b72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b76:	4618      	mov	r0, r3
 8001b78:	4621      	mov	r1, r4
 8001b7a:	f7ff f969 	bl	8000e50 <pwm>

		// clear buffer and receie incoming data
		memset (&rx_buff, 0, sizeof (rx_buff));
 8001b7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b82:	2240      	movs	r2, #64	; 0x40
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 ffca 	bl	8003b20 <memset>
		memset (&an_buff, 0, sizeof (rx_buff));
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2240      	movs	r2, #64	; 0x40
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f001 ffc3 	bl	8003b20 <memset>
		_uart_get_string (rx_buff);
 8001b9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe ff0c 	bl	80009bc <_uart_get_string>
#if DEBUG
		printf("received %s\n", rx_buff);
 8001ba4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ba8:	4619      	mov	r1, r3
 8001baa:	485b      	ldr	r0, [pc, #364]	; (8001d18 <main+0x280>)
 8001bac:	f002 f806 	bl	8003bbc <printf>
#endif

        if (strncmp(rx_buff, "#REQ,", strlen(rx_buff)) == 0)
 8001bb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 f883 	bl	8003cc0 <strlen>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bc0:	4956      	ldr	r1, [pc, #344]	; (8001d1c <main+0x284>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f002 f8ea 	bl	8003d9c <strncmp>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d130      	bne.n	8001c30 <main+0x198>
        {
			// get temperature
			temperature = getTemperature(&temperature);
 8001bce:	f107 038e 	add.w	r3, r7, #142	; 0x8e
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fc68 	bl	80004a8 <getTemperature>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b25b      	sxtb	r3, r3
 8001bdc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

			// get 6D Position
	  		direction = get6Dposition();
 8001be0:	f7fe fc7e 	bl	80004e0 <get6Dposition>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

			// get raw data
			readAxes = getAxesRawData();
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fd11 	bl	8000614 <getAxesRawData>

			signal = pwmAngleCalc(readAxes.axisX, readAxes.axisY, readAxes.axisZ);
 8001bf2:	88bb      	ldrh	r3, [r7, #4]
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	88fa      	ldrh	r2, [r7, #6]
 8001bf8:	b211      	sxth	r1, r2
 8001bfa:	893a      	ldrh	r2, [r7, #8]
 8001bfc:	b212      	sxth	r2, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f936 	bl	8000e70 <pwmAngleCalc>
 8001c04:	4603      	mov	r3, r0
 8001c06:	460c      	mov	r4, r1
 8001c08:	4a3b      	ldr	r2, [pc, #236]	; (8001cf8 <main+0x260>)
 8001c0a:	e9c2 3400 	strd	r3, r4, [r2]

			protocolComplete(direction, readAxes.axisX, readAxes.axisY, readAxes.axisZ, temperature);
 8001c0e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001c12:	b218      	sxth	r0, r3
 8001c14:	88bb      	ldrh	r3, [r7, #4]
 8001c16:	b219      	sxth	r1, r3
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	b21a      	sxth	r2, r3
 8001c1c:	893b      	ldrh	r3, [r7, #8]
 8001c1e:	b21c      	sxth	r4, r3
 8001c20:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	4623      	mov	r3, r4
 8001c2a:	f7ff f825 	bl	8000c78 <protocolComplete>
 8001c2e:	e79f      	b.n	8001b70 <main+0xd8>
		}
		else if (strncmp(rx_buff, "#END,", strlen(rx_buff)) == 0)
 8001c30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c34:	4618      	mov	r0, r3
 8001c36:	f002 f843 	bl	8003cc0 <strlen>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c40:	4937      	ldr	r1, [pc, #220]	; (8001d20 <main+0x288>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 f8aa 	bl	8003d9c <strncmp>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d104      	bne.n	8001c58 <main+0x1c0>
		{
			ledSetting(0, 0);
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2000      	movs	r0, #0
 8001c52:	f7ff f8bf 	bl	8000dd4 <ledSetting>
 8001c56:	e78b      	b.n	8001b70 <main+0xd8>
/*			ledSetting(1, 0);*/
		}
		else if (strncmp(rx_buff, "#CON,", strlen(rx_buff)) == 0)
 8001c58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 f82f 	bl	8003cc0 <strlen>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c68:	492e      	ldr	r1, [pc, #184]	; (8001d24 <main+0x28c>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 f896 	bl	8003d9c <strncmp>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d104      	bne.n	8001c80 <main+0x1e8>
		{
			ledSetting(0, 1);
 8001c76:	2101      	movs	r1, #1
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f7ff f8ab 	bl	8000dd4 <ledSetting>
 8001c7e:	e777      	b.n	8001b70 <main+0xd8>
		}
		else if (strncmp(rx_buff, "#ANG,", strlen(rx_buff)) == 0)
 8001c80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c84:	4618      	mov	r0, r3
 8001c86:	f002 f81b 	bl	8003cc0 <strlen>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c90:	4925      	ldr	r1, [pc, #148]	; (8001d28 <main+0x290>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f002 f882 	bl	8003d9c <strncmp>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d11f      	bne.n	8001cde <main+0x246>
		{
			strncpy(an_buff, rx_buff+5, strlen(an_buff));
 8001c9e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001ca2:	3405      	adds	r4, #5
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 f809 	bl	8003cc0 <strlen>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4621      	mov	r1, r4
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f002 f8c0 	bl	8003e3c <strncpy>
			getDouble(an_buff, &signal);
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	490d      	ldr	r1, [pc, #52]	; (8001cf8 <main+0x260>)
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff f84c 	bl	8000d60 <getDouble>
			printf("%s %f", an_buff, signal);
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <main+0x260>)
 8001cca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001cce:	f107 010c 	add.w	r1, r7, #12
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4623      	mov	r3, r4
 8001cd6:	4815      	ldr	r0, [pc, #84]	; (8001d2c <main+0x294>)
 8001cd8:	f001 ff70 	bl	8003bbc <printf>
 8001cdc:	e748      	b.n	8001b70 <main+0xd8>
		}
		else
		{
			continue;
 8001cde:	bf00      	nop
		}
/*		statisticSend++;*/
	}
 8001ce0:	e746      	b.n	8001b70 <main+0xd8>
 8001ce2:	bf00      	nop
 8001ce4:	20000a82 	.word	0x20000a82
 8001ce8:	20000a84 	.word	0x20000a84
 8001cec:	20000a83 	.word	0x20000a83
 8001cf0:	20000a98 	.word	0x20000a98
 8001cf4:	20000a80 	.word	0x20000a80
 8001cf8:	20000a90 	.word	0x20000a90
 8001cfc:	40080000 	.word	0x40080000
 8001d00:	20000a99 	.word	0x20000a99
 8001d04:	0800bc28 	.word	0x0800bc28
 8001d08:	0800bc44 	.word	0x0800bc44
 8001d0c:	0800bc58 	.word	0x0800bc58
 8001d10:	0800bc74 	.word	0x0800bc74
 8001d14:	0800bc88 	.word	0x0800bc88
 8001d18:	0800bca4 	.word	0x0800bca4
 8001d1c:	0800bcb4 	.word	0x0800bcb4
 8001d20:	0800bcbc 	.word	0x0800bcbc
 8001d24:	0800bcc4 	.word	0x0800bcc4
 8001d28:	0800bccc 	.word	0x0800bccc
 8001d2c:	0800bcd4 	.word	0x0800bcd4

08001d30 <_lseek>:

/*
 * File position seek
 */
__attribute__((weak)) int _lseek(int file, int offset, int whence)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 file = file;
 offset = offset;
 whence = whence;
 return -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_read>:

/*
 * File read
 */
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 file = file;
 len  = len;
 return 0;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop

08001d68 <_close>:

/*
 * File close
 */
__attribute__((weak)) int _close(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
 return -1;
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop

08001d7c <_fstat>:

/*
 * File status
 */
__attribute__((weak)) int _fstat(int file, struct stat *st)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
 file = file;
 if(st)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <_fstat+0x16>
  return -1;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d90:	e001      	b.n	8001d96 <_fstat+0x1a>
 else
  return -2;
 8001d92:	f06f 0301 	mvn.w	r3, #1
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop

08001da4 <_sbrk>:
/* ========================================================================= */
/*
 * Heap break (position)
 */
__attribute__((weak)) void *_sbrk(int RequestedSize)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 unsigned int  HeapSize;
 static unsigned char *HeapBound;
 static unsigned char * heap= (unsigned char *)NULL;


 HeapSize   = (unsigned int)(&Heap_Bank1_Size);
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <_sbrk+0x60>)
 8001dae:	617b      	str	r3, [r7, #20]

 /*
  * If this is the first time malloc() was invoked, we start with the
  * begining of the heap.
  */
 if(heap == (unsigned char *)NULL)
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d108      	bne.n	8001dca <_sbrk+0x26>
  {
   heap = (unsigned char *)&Heap_Bank1_Start;
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <_sbrk+0x64>)
 8001dba:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <_sbrk+0x68>)
 8001dbc:	601a      	str	r2, [r3, #0]
   HeapBound  = (unsigned char *) (heap + HeapSize);
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <_sbrk+0x6c>)
 8001dc8:	6013      	str	r3, [r2, #0]
  }

 /* Super duper algo to find out if we have memory for the latest request */
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <_sbrk+0x64>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	613b      	str	r3, [r7, #16]

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	3307      	adds	r3, #7
                                          & 0xFFFFFFF8);
 8001ddc:	f023 0307 	bic.w	r3, r3, #7
 /* Given conditions are: */
 /* 1. Latest break */
 CurrBreak = heap;

 /* And 2. Potential break based on requested size */
 NextBreak = (unsigned char *)( (((unsigned int)(heap)) + RequestedSize + 7)
 8001de0:	60fb      	str	r3, [r7, #12]
                                          & 0xFFFFFFF8);

 /* Return no memory condition if we sense we are crossing the limit */
 if (NextBreak >=  HeapBound )
 8001de2:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <_sbrk+0x6c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d301      	bcc.n	8001df0 <_sbrk+0x4c>
  return ((unsigned char *)NULL);
 8001dec:	2300      	movs	r3, #0
 8001dee:	e003      	b.n	8001df8 <_sbrk+0x54>
 else
 {
  heap = NextBreak;
 8001df0:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <_sbrk+0x64>)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6013      	str	r3, [r2, #0]
  return CurrBreak;
 8001df6:	693b      	ldr	r3, [r7, #16]
 }
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	0000f520 	.word	0x0000f520
 8001e08:	20000a44 	.word	0x20000a44
 8001e0c:	20000aa0 	.word	0x20000aa0
 8001e10:	20000a48 	.word	0x20000a48

08001e14 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop

08001e24 <_isatty>:

/*
 * Terminal type evaluation
 */
__attribute__((weak)) int _isatty(int file)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 file = file;
 return -1;
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	e003      	b.n	8001e52 <delay+0x16>
  {
    __NOP();
 8001e4a:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d3f7      	bcc.n	8001e4a <delay+0xe>
  {
    __NOP();
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop

08001e68 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8001e68:	b598      	push	{r3, r4, r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8001e6c:	4a06      	ldr	r2, [pc, #24]	; (8001e88 <SystemInit+0x20>)
 8001e6e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e72:	4614      	mov	r4, r2
 8001e74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8001e7a:	f000 f807 	bl	8001e8c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8001e7e:	f000 f83d 	bl	8001efc <SystemCoreClockSetup>
}
 8001e82:	bf00      	nop
 8001e84:	bd98      	pop	{r3, r4, r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000ffc4 	.word	0x2000ffc4

08001e8c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e92:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8001e94:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <SystemCoreSetup+0x64>)
 8001e96:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <SystemCoreSetup+0x68>)
 8001e98:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e9a:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001e9e:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001ea0:	4a13      	ldr	r2, [pc, #76]	; (8001ef0 <SystemCoreSetup+0x64>)
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <SystemCoreSetup+0x64>)
 8001ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8001eb0:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <SystemCoreSetup+0x64>)
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <SystemCoreSetup+0x64>)
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	f023 0308 	bic.w	r3, r3, #8
 8001eba:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <SystemCoreSetup+0x6c>)
 8001ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec2:	3314      	adds	r3, #20
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f023 030f 	bic.w	r3, r3, #15
 8001ece:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f043 0303 	orr.w	r3, r3, #3
 8001ed6:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <SystemCoreSetup+0x6c>)
 8001eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ede:	3314      	adds	r3, #20
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	601a      	str	r2, [r3, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00
 8001ef4:	08000000 	.word	0x08000000
 8001ef8:	58001000 	.word	0x58001000

08001efc <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8001f00:	4b75      	ldr	r3, [pc, #468]	; (80020d8 <SystemCoreClockSetup+0x1dc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10c      	bne.n	8001f26 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8001f0c:	4a72      	ldr	r2, [pc, #456]	; (80020d8 <SystemCoreClockSetup+0x1dc>)
 8001f0e:	4b72      	ldr	r3, [pc, #456]	; (80020d8 <SystemCoreClockSetup+0x1dc>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8001f18:	bf00      	nop
 8001f1a:	4b6f      	ldr	r3, [pc, #444]	; (80020d8 <SystemCoreClockSetup+0x1dc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f9      	beq.n	8001f1a <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8001f26:	4b6d      	ldr	r3, [pc, #436]	; (80020dc <SystemCoreClockSetup+0x1e0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8001f32:	4a6a      	ldr	r2, [pc, #424]	; (80020dc <SystemCoreClockSetup+0x1e0>)
 8001f34:	4b69      	ldr	r3, [pc, #420]	; (80020dc <SystemCoreClockSetup+0x1e0>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3c:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8001f3e:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8001f42:	f7ff ff7b 	bl	8001e3c <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8001f46:	4a66      	ldr	r2, [pc, #408]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001f48:	4b65      	ldr	r3, [pc, #404]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f50:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8001f52:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001f56:	f7ff ff71 	bl	8001e3c <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8001f5a:	4a61      	ldr	r2, [pc, #388]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001f5c:	4b60      	ldr	r3, [pc, #384]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f64:	f023 0302 	bic.w	r3, r3, #2
 8001f68:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8001f6a:	4b5e      	ldr	r3, [pc, #376]	; (80020e4 <SystemCoreClockSetup+0x1e8>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d029      	beq.n	8001fca <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8001f76:	4a5b      	ldr	r2, [pc, #364]	; (80020e4 <SystemCoreClockSetup+0x1e8>)
 8001f78:	4b5a      	ldr	r3, [pc, #360]	; (80020e4 <SystemCoreClockSetup+0x1e8>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001f80:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f84:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8001f86:	f000 f927 	bl	80021d8 <OSCHP_GetFrequency>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b56      	ldr	r3, [pc, #344]	; (80020e8 <SystemCoreClockSetup+0x1ec>)
 8001f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f92:	0d1b      	lsrs	r3, r3, #20
 8001f94:	3b01      	subs	r3, #1
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	4952      	ldr	r1, [pc, #328]	; (80020e4 <SystemCoreClockSetup+0x1e8>)
 8001f9a:	4a52      	ldr	r2, [pc, #328]	; (80020e4 <SystemCoreClockSetup+0x1e8>)
 8001f9c:	6852      	ldr	r2, [r2, #4]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8001fa2:	4a4f      	ldr	r2, [pc, #316]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001fa4:	4b4e      	ldr	r3, [pc, #312]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f023 0301 	bic.w	r3, r3, #1
 8001fac:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8001fae:	4a4c      	ldr	r2, [pc, #304]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001fb8:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8001fba:	bf00      	nop
 8001fbc:	4b48      	ldr	r3, [pc, #288]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001fc4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8001fc8:	d1f8      	bne.n	8001fbc <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001fca:	4a45      	ldr	r2, [pc, #276]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001fcc:	4b44      	ldr	r3, [pc, #272]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8001fd6:	4a42      	ldr	r2, [pc, #264]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001fd8:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f043 0310 	orr.w	r3, r3, #16
 8001fe0:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001fe2:	4b3f      	ldr	r3, [pc, #252]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001fe4:	4a41      	ldr	r2, [pc, #260]	; (80020ec <SystemCoreClockSetup+0x1f0>)
 8001fe6:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001fe8:	4a3d      	ldr	r2, [pc, #244]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001fea:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff2:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8001ff4:	4a3a      	ldr	r2, [pc, #232]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f023 0310 	bic.w	r3, r3, #16
 8001ffe:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8002000:	4a37      	ldr	r2, [pc, #220]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8002002:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200a:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800200c:	bf00      	nop
 800200e:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f9      	beq.n	800200e <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800201a:	4a31      	ldr	r2, [pc, #196]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 800201c:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8002026:	bf00      	nop
 8002028:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f9      	bne.n	8002028 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8002034:	4a2e      	ldr	r2, [pc, #184]	; (80020f0 <SystemCoreClockSetup+0x1f4>)
 8002036:	4b2e      	ldr	r3, [pc, #184]	; (80020f0 <SystemCoreClockSetup+0x1f4>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203e:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8002040:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <SystemCoreClockSetup+0x1f4>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8002046:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <SystemCoreClockSetup+0x1f4>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 800204c:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <SystemCoreClockSetup+0x1f4>)
 800204e:	2200      	movs	r2, #0
 8002050:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8002052:	4b27      	ldr	r3, [pc, #156]	; (80020f0 <SystemCoreClockSetup+0x1f4>)
 8002054:	2200      	movs	r2, #0
 8002056:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <SystemCoreClockSetup+0x1f4>)
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 800205e:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <SystemCoreClockSetup+0x1f4>)
 8002060:	2203      	movs	r2, #3
 8002062:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002064:	4a1e      	ldr	r2, [pc, #120]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8002066:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800206e:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8002072:	4a20      	ldr	r2, [pc, #128]	; (80020f4 <SystemCoreClockSetup+0x1f8>)
 8002074:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8002076:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800207a:	f7ff fedf 	bl	8001e3c <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800207e:	bf00      	nop
 8002080:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0f9      	beq.n	8002080 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 800208e:	4a1a      	ldr	r2, [pc, #104]	; (80020f8 <SystemCoreClockSetup+0x1fc>)
 8002090:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8002092:	f241 1094 	movw	r0, #4500	; 0x1194
 8002096:	f7ff fed1 	bl	8001e3c <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800209a:	bf00      	nop
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f9      	beq.n	800209c <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 80020aa:	4a14      	ldr	r2, [pc, #80]	; (80020fc <SystemCoreClockSetup+0x200>)
 80020ac:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 80020ae:	f241 7070 	movw	r0, #6000	; 0x1770
 80020b2:	f7ff fec3 	bl	8001e3c <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80020b6:	bf00      	nop
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <SystemCoreClockSetup+0x1e4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f9      	beq.n	80020b8 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <SystemCoreClockSetup+0x204>)
 80020c6:	2205      	movs	r2, #5
 80020c8:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <SystemCoreClockSetup+0x1f4>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 80020d0:	f000 f818 	bl	8002104 <SystemCoreClockUpdate>
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	50004200 	.word	0x50004200
 80020dc:	50004400 	.word	0x50004400
 80020e0:	50004710 	.word	0x50004710
 80020e4:	50004700 	.word	0x50004700
 80020e8:	6b5fca6b 	.word	0x6b5fca6b
 80020ec:	01134f00 	.word	0x01134f00
 80020f0:	50004600 	.word	0x50004600
 80020f4:	01074f00 	.word	0x01074f00
 80020f8:	01044f00 	.word	0x01044f00
 80020fc:	01034f00 	.word	0x01034f00
 8002100:	50004160 	.word	0x50004160

08002104 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800210a:	4b2f      	ldr	r3, [pc, #188]	; (80021c8 <SystemCoreClockUpdate+0xc4>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d03e      	beq.n	8002194 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8002116:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <SystemCoreClockUpdate+0xc8>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8002122:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <SystemCoreClockUpdate+0xcc>)
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	e002      	b.n	800212e <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8002128:	f000 f856 	bl	80021d8 <OSCHP_GetFrequency>
 800212c:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 800212e:	4b27      	ldr	r3, [pc, #156]	; (80021cc <SystemCoreClockUpdate+0xc8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d020      	beq.n	800217c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <SystemCoreClockUpdate+0xc8>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002142:	0e1b      	lsrs	r3, r3, #24
 8002144:	3301      	adds	r3, #1
 8002146:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8002148:	4b20      	ldr	r3, [pc, #128]	; (80021cc <SystemCoreClockUpdate+0xc8>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	3301      	adds	r3, #1
 8002154:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <SystemCoreClockUpdate+0xc8>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800215e:	0c1b      	lsrs	r3, r3, #16
 8002160:	3301      	adds	r3, #1
 8002162:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	fb02 f303 	mul.w	r3, r2, r3
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	fb02 f303 	mul.w	r3, r2, r3
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	e00d      	b.n	8002198 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <SystemCoreClockUpdate+0xc8>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002184:	3301      	adds	r3, #1
 8002186:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	e001      	b.n	8002198 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8002194:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <SystemCoreClockUpdate+0xcc>)
 8002196:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <SystemCoreClockUpdate+0xc4>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3301      	adds	r3, #1
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <SystemCoreClockUpdate+0xc4>)
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	3301      	adds	r3, #1
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b8:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80021ba:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <SystemCoreClockUpdate+0xd0>)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6013      	str	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	50004600 	.word	0x50004600
 80021cc:	50004710 	.word	0x50004710
 80021d0:	016e3600 	.word	0x016e3600
 80021d4:	2000ffc0 	.word	0x2000ffc0

080021d8 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 80021dc:	4b02      	ldr	r3, [pc, #8]	; (80021e8 <OSCHP_GetFrequency+0x10>)
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	00b71b00 	.word	0x00b71b00

080021ec <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	460b      	mov	r3, r1
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80021fa:	7afb      	ldrb	r3, [r7, #11]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4618      	mov	r0, r3
 8002202:	7afb      	ldrb	r3, [r7, #11]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3204      	adds	r2, #4
 800220e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002212:	7afb      	ldrb	r3, [r7, #11]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	21f8      	movs	r1, #248	; 0xf8
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	ea02 0103 	and.w	r1, r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1d02      	adds	r2, r0, #4
 800222a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002232:	7afb      	ldrb	r3, [r7, #11]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2103      	movs	r1, #3
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	401a      	ands	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4a38      	ldr	r2, [pc, #224]	; (8002328 <XMC_GPIO_Init+0x13c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d003      	beq.n	8002254 <XMC_GPIO_Init+0x68>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4a37      	ldr	r2, [pc, #220]	; (800232c <XMC_GPIO_Init+0x140>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d10a      	bne.n	800226a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002258:	7afb      	ldrb	r3, [r7, #11]
 800225a:	2101      	movs	r1, #1
 800225c:	fa01 f303 	lsl.w	r3, r1, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	401a      	ands	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	661a      	str	r2, [r3, #96]	; 0x60
 8002268:	e03c      	b.n	80022e4 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	7afb      	ldrb	r3, [r7, #11]
 8002270:	409a      	lsls	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8002276:	7afb      	ldrb	r3, [r7, #11]
 8002278:	08db      	lsrs	r3, r3, #3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	4618      	mov	r0, r3
 800227e:	7afb      	ldrb	r3, [r7, #11]
 8002280:	08db      	lsrs	r3, r3, #3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3210      	adds	r2, #16
 800228a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800228e:	7afb      	ldrb	r3, [r7, #11]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	2107      	movs	r1, #7
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	ea02 0103 	and.w	r1, r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f100 0210 	add.w	r2, r0, #16
 80022a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80022ac:	7afb      	ldrb	r3, [r7, #11]
 80022ae:	08db      	lsrs	r3, r3, #3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	7afb      	ldrb	r3, [r7, #11]
 80022b6:	08db      	lsrs	r3, r3, #3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3210      	adds	r2, #16
 80022c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7a1b      	ldrb	r3, [r3, #8]
 80022c8:	4619      	mov	r1, r3
 80022ca:	7afb      	ldrb	r3, [r7, #11]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	ea42 0103 	orr.w	r1, r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f100 0210 	add.w	r2, r0, #16
 80022e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80022e4:	7afb      	ldrb	r3, [r7, #11]
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	7afb      	ldrb	r3, [r7, #11]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3204      	adds	r2, #4
 80022f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	7afb      	ldrb	r3, [r7, #11]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	ea42 0103 	orr.w	r1, r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1d02      	adds	r2, r0, #4
 8002316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	48028e00 	.word	0x48028e00
 800232c:	48028f00 	.word	0x48028f00

08002330 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002342:	b2db      	uxtb	r3, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <XMC_UART_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_Init(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8002376:	2310      	movs	r3, #16
 8002378:	60fb      	str	r3, [r7, #12]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fa62 	bl	8002844 <XMC_USIC_CH_Enable>
  
  if(config->oversampling != 0U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	79db      	ldrb	r3, [r3, #7]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <XMC_UART_CH_Init+0x22>
  {
    oversampling = (uint32_t)config->oversampling;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	79db      	ldrb	r3, [r3, #7]
 800238c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure baud rate */
  (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4619      	mov	r1, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 faa2 	bl	80028e0 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	799b      	ldrb	r3, [r3, #6]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	085b      	lsrs	r3, r3, #1
 80023a8:	3301      	adds	r3, #1
 80023aa:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision 
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	791b      	ldrb	r3, [r3, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	061b      	lsls	r3, r3, #24
 80023c2:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	795b      	ldrb	r3, [r3, #5]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <XMC_UART_CH_Init+0x7a>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	795b      	ldrb	r3, [r3, #5]
 80023da:	3b01      	subs	r3, #1
 80023dc:	041b      	lsls	r3, r3, #16
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	635a      	str	r2, [r3, #52]	; 0x34
 80023e4:	e008      	b.n	80023f8 <XMC_UART_CH_Init+0x8c>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	791b      	ldrb	r3, [r3, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	041b      	lsls	r3, r3, #16
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80023fe:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f04f 32ff 	mov.w	r2, #4294967295
 8002406:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	891b      	ldrh	r3, [r3, #8]
 800240c:	461a      	mov	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop

0800241c <XMC_UART_CH_Transmit>:
  } 
  return status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800242e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d110      	bne.n	8002458 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002436:	bf00      	nop
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff79 	bl	8002330 <XMC_USIC_CH_GetTransmitBufferStatus>
 800243e:	4603      	mov	r3, r0
 8002440:	2b80      	cmp	r3, #128	; 0x80
 8002442:	d0f9      	beq.n	8002438 <XMC_UART_CH_Transmit+0x1c>
    {
    }
  
    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff81 	bl	8002350 <XMC_UART_CH_ClearStatusFlag>
  
    /*Transmit data */
    channel->TBUF[0U] = data;
 800244e:	887a      	ldrh	r2, [r7, #2]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = data;
  }
}
 8002456:	e003      	b.n	8002460 <XMC_UART_CH_Transmit+0x44>
    /*Transmit data */
    channel->TBUF[0U] = data;
  }
  else
  {
    channel->IN[0U] = data;
 8002458:	887a      	ldrh	r2, [r7, #2]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002476:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	81fb      	strh	r3, [r7, #14]
 8002484:	e003      	b.n	800248e <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800248c:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800248e:	89fb      	ldrh	r3, [r7, #14]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80024ae:	b2db      	uxtb	r3, r3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop

080024e0 <XMC_I2C_CH_Init>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f9aa 	bl	8002844 <XMC_USIC_CH_Enable>
  
  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a0e      	ldr	r2, [pc, #56]	; (800252c <XMC_I2C_CH_Init+0x4c>)
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	889b      	ldrh	r3, [r3, #4]
 80024fa:	4619      	mov	r1, r3
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f817 	bl	8002530 <XMC_I2C_CH_SetSlaveAddress>
  (void)XMC_I2C_CH_SetBaudrate(channel, config->baudrate);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f831 	bl	8002570 <XMC_I2C_CH_SetBaudrate>
    
  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002514:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f04f 32ff 	mov.w	r2, #4294967295
 800251c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	073f0303 	.word	0x073f0303

08002530 <XMC_I2C_CH_SetSlaveAddress>:
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8002542:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8002546:	d109      	bne.n	800255c <XMC_I2C_CH_SetSlaveAddress+0x2c>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	887b      	ldrh	r3, [r7, #2]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 800255a:	e003      	b.n	8002564 <XMC_I2C_CH_SetSlaveAddress+0x34>
  {
    channel->PCR_IICMode = (address & 0xffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 800255c:	887b      	ldrh	r3, [r7, #2]
 800255e:	021a      	lsls	r2, r3, #8
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <XMC_I2C_CH_SetBaudrate>:
  
  return (uint16_t)address;
}
/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_STATUS_t status;
  
  status = XMC_I2C_CH_STATUS_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
  
  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	4a17      	ldr	r2, [pc, #92]	; (80025e0 <XMC_I2C_CH_SetBaudrate+0x70>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d810      	bhi.n	80025a8 <XMC_I2C_CH_SetBaudrate+0x38>
  {
		channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD) == XMC_USIC_CH_STATUS_OK)
 8002592:	220a      	movs	r2, #10
 8002594:	6839      	ldr	r1, [r7, #0]
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f9a2 	bl	80028e0 <XMC_USIC_CH_SetBaudrate>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d119      	bne.n	80025d6 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	e016      	b.n	80025d6 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <XMC_I2C_CH_SetBaudrate+0x74>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d810      	bhi.n	80025d2 <XMC_I2C_CH_SetBaudrate+0x62>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	63da      	str	r2, [r3, #60]	; 0x3c
    if (XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST) == XMC_USIC_CH_STATUS_OK)
 80025bc:	2219      	movs	r2, #25
 80025be:	6839      	ldr	r1, [r7, #0]
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f98d 	bl	80028e0 <XMC_USIC_CH_SetBaudrate>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d104      	bne.n	80025d6 <XMC_I2C_CH_SetBaudrate+0x66>
    {
      status = XMC_I2C_CH_STATUS_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]
 80025d0:	e001      	b.n	80025d6 <XMC_I2C_CH_SetBaudrate+0x66>
    }
  }
  else 
  {
    status = XMC_I2C_CH_STATUS_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	000186a0 	.word	0x000186a0
 80025e4:	00061a80 	.word	0x00061a80

080025e8 <XMC_I2C_CH_MasterStart>:
/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  uint32_t temp;
  
  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 80025f8:	887b      	ldrh	r3, [r7, #2]
 80025fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025fe:	b29b      	uxth	r3, r3
 8002600:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8002602:	787b      	ldrb	r3, [r7, #1]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d103      	bne.n	8002610 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002616:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d110      	bne.n	8002640 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800261e:	bf00      	nop
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff3b 	bl	800249c <XMC_USIC_CH_GetTransmitBufferStatus>
 8002626:	4603      	mov	r3, r0
 8002628:	2b80      	cmp	r3, #128	; 0x80
 800262a:	d0f9      	beq.n	8002620 <XMC_I2C_CH_MasterStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800262c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff43 	bl	80024bc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = temp;
  }
}
 800263e:	e003      	b.n	8002648 <XMC_I2C_CH_MasterStart+0x60>

    channel->TBUF[0] = temp;
  }
  else
  {
    channel->IN[0U] = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8002666:	b29b      	uxth	r3, r3
 8002668:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 800266a:	787b      	ldrb	r3, [r7, #1]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d103      	bne.n	8002678 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800267e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d110      	bne.n	80026a8 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {  
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002686:	bf00      	nop
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ff07 	bl	800249c <XMC_USIC_CH_GetTransmitBufferStatus>
 800268e:	4603      	mov	r3, r0
 8002690:	2b80      	cmp	r3, #128	; 0x80
 8002692:	d0f9      	beq.n	8002688 <XMC_I2C_CH_MasterRepeatedStart+0x38>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002694:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ff0f 	bl	80024bc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = tmp;
  }
}
 80026a6:	e003      	b.n	80026b0 <XMC_I2C_CH_MasterRepeatedStart+0x60>

    channel->TBUF[0] = tmp;
  }
  else
  {
    channel->IN[0U] = tmp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026c6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d111      	bne.n	80026f2 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80026ce:	bf00      	nop
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff fee3 	bl	800249c <XMC_USIC_CH_GetTransmitBufferStatus>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b80      	cmp	r3, #128	; 0x80
 80026da:	d0f9      	beq.n	80026d0 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80026dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff feeb 	bl	80024bc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80026ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
}
 80026f0:	e004      	b.n	80026fc <XMC_I2C_CH_MasterStop+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80026f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002716:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d110      	bne.n	8002740 <XMC_I2C_CH_MasterTransmit+0x3c>
  {    
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800271e:	bf00      	nop
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff febb 	bl	800249c <XMC_USIC_CH_GetTransmitBufferStatus>
 8002726:	4603      	mov	r3, r0
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d0f9      	beq.n	8002720 <XMC_I2C_CH_MasterTransmit+0x1c>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800272c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff fec3 	bl	80024bc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
}
 800273e:	e003      	b.n	8002748 <XMC_I2C_CH_MasterTransmit+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <XMC_I2C_CH_MasterReceiveNack>:
  }
}

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800275e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d111      	bne.n	800278a <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {    
    while(XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002766:	bf00      	nop
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff fe97 	bl	800249c <XMC_USIC_CH_GetTransmitBufferStatus>
 800276e:	4603      	mov	r3, r0
 8002770:	2b80      	cmp	r3, #128	; 0x80
 8002772:	d0f9      	beq.n	8002768 <XMC_I2C_CH_MasterReceiveNack+0x18>
	{
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff fe9f 	bl	80024bc <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
}
 8002788:	e004      	b.n	8002794 <XMC_I2C_CH_MasterReceiveNack+0x44>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
  }
  else 
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002790:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80027aa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d103      	bne.n	80027ba <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e003      	b.n	80027c2 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80027c0:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	2000ffc0 	.word	0x2000ffc0

080027e8 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	0f1b      	lsrs	r3, r3, #28
 80027f4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80027fc:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	461a      	mov	r2, r3
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 800280c:	4413      	add	r3, r2
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	601a      	str	r2, [r3, #0]
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	50004414 	.word	0x50004414

08002824 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8002828:	f7ff ffd2 	bl	80027d0 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 800282c:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f003 0301 	and.w	r3, r3, #1
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8002836:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 800283a:	4618      	mov	r0, r3
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	50004600 	.word	0x50004600

08002844 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <XMC_USIC_CH_Enable+0x78>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d003      	beq.n	800285c <XMC_USIC_CH_Enable+0x18>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a1a      	ldr	r2, [pc, #104]	; (80028c0 <XMC_USIC_CH_Enable+0x7c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d103      	bne.n	8002864 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 800285c:	4819      	ldr	r0, [pc, #100]	; (80028c4 <XMC_USIC_CH_Enable+0x80>)
 800285e:	f000 f91f 	bl	8002aa0 <XMC_USIC_Enable>
 8002862:	e016      	b.n	8002892 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a18      	ldr	r2, [pc, #96]	; (80028c8 <XMC_USIC_CH_Enable+0x84>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d003      	beq.n	8002874 <XMC_USIC_CH_Enable+0x30>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a17      	ldr	r2, [pc, #92]	; (80028cc <XMC_USIC_CH_Enable+0x88>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d103      	bne.n	800287c <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8002874:	4816      	ldr	r0, [pc, #88]	; (80028d0 <XMC_USIC_CH_Enable+0x8c>)
 8002876:	f000 f913 	bl	8002aa0 <XMC_USIC_Enable>
 800287a:	e00a      	b.n	8002892 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <XMC_USIC_CH_Enable+0x90>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d003      	beq.n	800288c <XMC_USIC_CH_Enable+0x48>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <XMC_USIC_CH_Enable+0x94>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d102      	bne.n	8002892 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 800288c:	4813      	ldr	r0, [pc, #76]	; (80028dc <XMC_USIC_CH_Enable+0x98>)
 800288e:	f000 f907 	bl	8002aa0 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2203      	movs	r2, #3
 8002896:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8002898:	bf00      	nop
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f9      	beq.n	800289a <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f023 020f 	bic.w	r2, r3, #15
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40030000 	.word	0x40030000
 80028c0:	40030200 	.word	0x40030200
 80028c4:	40030008 	.word	0x40030008
 80028c8:	48020000 	.word	0x48020000
 80028cc:	48020200 	.word	0x48020200
 80028d0:	48020008 	.word	0x48020008
 80028d4:	48024000 	.word	0x48024000
 80028d8:	48024200 	.word	0x48024200
 80028dc:	48024008 	.word	0x48024008

080028e0 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08e      	sub	sp, #56	; 0x38
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b63      	cmp	r3, #99	; 0x63
 80028f0:	d958      	bls.n	80029a4 <XMC_USIC_CH_SetBaudrate+0xc4>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d055      	beq.n	80029a4 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80028f8:	f7ff ff94 	bl	8002824 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80028fc:	4602      	mov	r2, r0
 80028fe:	4b2e      	ldr	r3, [pc, #184]	; (80029b8 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8002900:	fba3 2302 	umull	r2, r3, r3, r2
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4a2b      	ldr	r2, [pc, #172]	; (80029b8 <XMC_USIC_CH_SetBaudrate+0xd8>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8002914:	2301      	movs	r3, #1
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8002918:	2301      	movs	r3, #1
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 800291c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002920:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8002922:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
 8002928:	e022      	b.n	8002970 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800292e:	fb02 f203 	mul.w	r2, r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	fbb2 f3f3 	udiv	r3, r2, r3
 800293e:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	0a9b      	lsrs	r3, r3, #10
 8002944:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294c:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002954:	d209      	bcs.n	800296a <XMC_USIC_CH_SetBaudrate+0x8a>
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	429a      	cmp	r2, r3
 800295c:	d205      	bcs.n	800296a <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	3b01      	subs	r3, #1
 800296e:	633b      	str	r3, [r7, #48]	; 0x30
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1d9      	bne.n	800292a <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8002976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002978:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <XMC_USIC_CH_SetBaudrate+0xdc>)
 8002986:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	3a01      	subs	r2, #1
 800298c:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800298e:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	3b01      	subs	r3, #1
 8002994:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8002996:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80029a2:	e002      	b.n	80029aa <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 80029aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3738      	adds	r7, #56	; 0x38
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	51eb851f 	.word	0x51eb851f
 80029bc:	fc0080ef 	.word	0xfc0080ef

080029c0 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	4613      	mov	r3, r2
 80029ce:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029d6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 80029e8:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	0211      	lsls	r1, r2, #8
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 80029f2:	79fa      	ldrb	r2, [r7, #7]
 80029f4:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80029f6:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 80029f8:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	f8ffc0c0 	.word	0xf8ffc0c0

08002a10 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002a26:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8002a38:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	0211      	lsls	r1, r2, #8
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8002a42:	79fa      	ldrb	r2, [r7, #7]
 8002a44:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8002a46:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	efffc0c0 	.word	0xefffc0c0

08002a64 <XMC_USIC_CH_RXFIFO_SetInterruptNodePointer>:
}

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	72fb      	strb	r3, [r7, #11]
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002a78:	7afb      	ldrb	r3, [r7, #11]
 8002a7a:	2107      	movs	r1, #7
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8002a84:	7afb      	ldrb	r3, [r7, #11]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (service_request << (uint32_t)interrupt_node));
}
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <XMC_USIC_Enable>:

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a0d      	ldr	r2, [pc, #52]	; (8002ae0 <XMC_USIC_Enable+0x40>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d104      	bne.n	8002aba <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8002ab0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002ab4:	f7ff fe98 	bl	80027e8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8002ab8:	e00e      	b.n	8002ad8 <XMC_USIC_Enable+0x38>
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <XMC_USIC_Enable+0x44>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d103      	bne.n	8002aca <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8002ac2:	4809      	ldr	r0, [pc, #36]	; (8002ae8 <XMC_USIC_Enable+0x48>)
 8002ac4:	f7ff fe90 	bl	80027e8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8002ac8:	e006      	b.n	8002ad8 <XMC_USIC_Enable+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a07      	ldr	r2, [pc, #28]	; (8002aec <XMC_USIC_Enable+0x4c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d102      	bne.n	8002ad8 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8002ad2:	4807      	ldr	r0, [pc, #28]	; (8002af0 <XMC_USIC_Enable+0x50>)
 8002ad4:	f7ff fe88 	bl	80027e8 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40030008 	.word	0x40030008
 8002ae4:	48020008 	.word	0x48020008
 8002ae8:	10000080 	.word	0x10000080
 8002aec:	48024008 	.word	0x48024008
 8002af0:	10000100 	.word	0x10000100
 8002af4:	00000000 	.word	0x00000000

08002af8 <atan>:
 8002af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002afc:	4bc4      	ldr	r3, [pc, #784]	; (8002e10 <atan+0x318>)
 8002afe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8002b02:	429e      	cmp	r6, r3
 8002b04:	4604      	mov	r4, r0
 8002b06:	460d      	mov	r5, r1
 8002b08:	468b      	mov	fp, r1
 8002b0a:	dd0e      	ble.n	8002b2a <atan+0x32>
 8002b0c:	4bc1      	ldr	r3, [pc, #772]	; (8002e14 <atan+0x31c>)
 8002b0e:	429e      	cmp	r6, r3
 8002b10:	f300 80ac 	bgt.w	8002c6c <atan+0x174>
 8002b14:	f000 80a7 	beq.w	8002c66 <atan+0x16e>
 8002b18:	f1bb 0f00 	cmp.w	fp, #0
 8002b1c:	f340 80e9 	ble.w	8002cf2 <atan+0x1fa>
 8002b20:	a19f      	add	r1, pc, #636	; (adr r1, 8002da0 <atan+0x2a8>)
 8002b22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b2a:	4bbb      	ldr	r3, [pc, #748]	; (8002e18 <atan+0x320>)
 8002b2c:	429e      	cmp	r6, r3
 8002b2e:	f300 80b5 	bgt.w	8002c9c <atan+0x1a4>
 8002b32:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8002b36:	429e      	cmp	r6, r3
 8002b38:	f340 80a0 	ble.w	8002c7c <atan+0x184>
 8002b3c:	f04f 3aff 	mov.w	sl, #4294967295
 8002b40:	4622      	mov	r2, r4
 8002b42:	462b      	mov	r3, r5
 8002b44:	4620      	mov	r0, r4
 8002b46:	4629      	mov	r1, r5
 8002b48:	f000 fc52 	bl	80033f0 <__aeabi_dmul>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4680      	mov	r8, r0
 8002b52:	4689      	mov	r9, r1
 8002b54:	f000 fc4c 	bl	80033f0 <__aeabi_dmul>
 8002b58:	a393      	add	r3, pc, #588	; (adr r3, 8002da8 <atan+0x2b0>)
 8002b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5e:	4606      	mov	r6, r0
 8002b60:	460f      	mov	r7, r1
 8002b62:	f000 fc45 	bl	80033f0 <__aeabi_dmul>
 8002b66:	a392      	add	r3, pc, #584	; (adr r3, 8002db0 <atan+0x2b8>)
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	f000 fa8e 	bl	800308c <__adddf3>
 8002b70:	4632      	mov	r2, r6
 8002b72:	463b      	mov	r3, r7
 8002b74:	f000 fc3c 	bl	80033f0 <__aeabi_dmul>
 8002b78:	a38f      	add	r3, pc, #572	; (adr r3, 8002db8 <atan+0x2c0>)
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	f000 fa85 	bl	800308c <__adddf3>
 8002b82:	4632      	mov	r2, r6
 8002b84:	463b      	mov	r3, r7
 8002b86:	f000 fc33 	bl	80033f0 <__aeabi_dmul>
 8002b8a:	a38d      	add	r3, pc, #564	; (adr r3, 8002dc0 <atan+0x2c8>)
 8002b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b90:	f000 fa7c 	bl	800308c <__adddf3>
 8002b94:	4632      	mov	r2, r6
 8002b96:	463b      	mov	r3, r7
 8002b98:	f000 fc2a 	bl	80033f0 <__aeabi_dmul>
 8002b9c:	a38a      	add	r3, pc, #552	; (adr r3, 8002dc8 <atan+0x2d0>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f000 fa73 	bl	800308c <__adddf3>
 8002ba6:	4632      	mov	r2, r6
 8002ba8:	463b      	mov	r3, r7
 8002baa:	f000 fc21 	bl	80033f0 <__aeabi_dmul>
 8002bae:	a388      	add	r3, pc, #544	; (adr r3, 8002dd0 <atan+0x2d8>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f000 fa6a 	bl	800308c <__adddf3>
 8002bb8:	4642      	mov	r2, r8
 8002bba:	464b      	mov	r3, r9
 8002bbc:	f000 fc18 	bl	80033f0 <__aeabi_dmul>
 8002bc0:	a385      	add	r3, pc, #532	; (adr r3, 8002dd8 <atan+0x2e0>)
 8002bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc6:	4680      	mov	r8, r0
 8002bc8:	4689      	mov	r9, r1
 8002bca:	4630      	mov	r0, r6
 8002bcc:	4639      	mov	r1, r7
 8002bce:	f000 fc0f 	bl	80033f0 <__aeabi_dmul>
 8002bd2:	a383      	add	r3, pc, #524	; (adr r3, 8002de0 <atan+0x2e8>)
 8002bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd8:	f000 fa56 	bl	8003088 <__aeabi_dsub>
 8002bdc:	4632      	mov	r2, r6
 8002bde:	463b      	mov	r3, r7
 8002be0:	f000 fc06 	bl	80033f0 <__aeabi_dmul>
 8002be4:	a380      	add	r3, pc, #512	; (adr r3, 8002de8 <atan+0x2f0>)
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f000 fa4d 	bl	8003088 <__aeabi_dsub>
 8002bee:	4632      	mov	r2, r6
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	f000 fbfd 	bl	80033f0 <__aeabi_dmul>
 8002bf6:	a37e      	add	r3, pc, #504	; (adr r3, 8002df0 <atan+0x2f8>)
 8002bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfc:	f000 fa44 	bl	8003088 <__aeabi_dsub>
 8002c00:	4632      	mov	r2, r6
 8002c02:	463b      	mov	r3, r7
 8002c04:	f000 fbf4 	bl	80033f0 <__aeabi_dmul>
 8002c08:	a37b      	add	r3, pc, #492	; (adr r3, 8002df8 <atan+0x300>)
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	f000 fa3b 	bl	8003088 <__aeabi_dsub>
 8002c12:	4632      	mov	r2, r6
 8002c14:	463b      	mov	r3, r7
 8002c16:	f000 fbeb 	bl	80033f0 <__aeabi_dmul>
 8002c1a:	f1ba 3fff 	cmp.w	sl, #4294967295
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	d06b      	beq.n	8002cfc <atan+0x204>
 8002c24:	4640      	mov	r0, r8
 8002c26:	4649      	mov	r1, r9
 8002c28:	f000 fa30 	bl	800308c <__adddf3>
 8002c2c:	4622      	mov	r2, r4
 8002c2e:	462b      	mov	r3, r5
 8002c30:	f000 fbde 	bl	80033f0 <__aeabi_dmul>
 8002c34:	4e79      	ldr	r6, [pc, #484]	; (8002e1c <atan+0x324>)
 8002c36:	4b7a      	ldr	r3, [pc, #488]	; (8002e20 <atan+0x328>)
 8002c38:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8002c3c:	4456      	add	r6, sl
 8002c3e:	449a      	add	sl, r3
 8002c40:	e9da 2300 	ldrd	r2, r3, [sl]
 8002c44:	f000 fa20 	bl	8003088 <__aeabi_dsub>
 8002c48:	4622      	mov	r2, r4
 8002c4a:	462b      	mov	r3, r5
 8002c4c:	f000 fa1c 	bl	8003088 <__aeabi_dsub>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	e9d6 0100 	ldrd	r0, r1, [r6]
 8002c58:	f000 fa16 	bl	8003088 <__aeabi_dsub>
 8002c5c:	f1bb 0f00 	cmp.w	fp, #0
 8002c60:	db43      	blt.n	8002cea <atan+0x1f2>
 8002c62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c66:	2800      	cmp	r0, #0
 8002c68:	f43f af56 	beq.w	8002b18 <atan+0x20>
 8002c6c:	4622      	mov	r2, r4
 8002c6e:	462b      	mov	r3, r5
 8002c70:	4620      	mov	r0, r4
 8002c72:	4629      	mov	r1, r5
 8002c74:	f000 fa0a 	bl	800308c <__adddf3>
 8002c78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c7c:	a360      	add	r3, pc, #384	; (adr r3, 8002e00 <atan+0x308>)
 8002c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c82:	f000 fa03 	bl	800308c <__adddf3>
 8002c86:	2200      	movs	r2, #0
 8002c88:	4b66      	ldr	r3, [pc, #408]	; (8002e24 <atan+0x32c>)
 8002c8a:	f000 fe41 	bl	8003910 <__aeabi_dcmpgt>
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	f43f af54 	beq.w	8002b3c <atan+0x44>
 8002c94:	4620      	mov	r0, r4
 8002c96:	4629      	mov	r1, r5
 8002c98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c9c:	f000 f8cc 	bl	8002e38 <fabs>
 8002ca0:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <atan+0x330>)
 8002ca2:	429e      	cmp	r6, r3
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	460d      	mov	r5, r1
 8002ca8:	dc38      	bgt.n	8002d1c <atan+0x224>
 8002caa:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8002cae:	429e      	cmp	r6, r3
 8002cb0:	dc5d      	bgt.n	8002d6e <atan+0x276>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	f000 f9e9 	bl	800308c <__adddf3>
 8002cba:	2200      	movs	r2, #0
 8002cbc:	4b59      	ldr	r3, [pc, #356]	; (8002e24 <atan+0x32c>)
 8002cbe:	f000 f9e3 	bl	8003088 <__aeabi_dsub>
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4606      	mov	r6, r0
 8002cc6:	460f      	mov	r7, r1
 8002cc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ccc:	4620      	mov	r0, r4
 8002cce:	4629      	mov	r1, r5
 8002cd0:	f000 f9dc 	bl	800308c <__adddf3>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4630      	mov	r0, r6
 8002cda:	4639      	mov	r1, r7
 8002cdc:	f000 fcb2 	bl	8003644 <__aeabi_ddiv>
 8002ce0:	f04f 0a00 	mov.w	sl, #0
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	460d      	mov	r5, r1
 8002ce8:	e72a      	b.n	8002b40 <atan+0x48>
 8002cea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002cee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cf2:	a145      	add	r1, pc, #276	; (adr r1, 8002e08 <atan+0x310>)
 8002cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cfc:	4640      	mov	r0, r8
 8002cfe:	4649      	mov	r1, r9
 8002d00:	f000 f9c4 	bl	800308c <__adddf3>
 8002d04:	4622      	mov	r2, r4
 8002d06:	462b      	mov	r3, r5
 8002d08:	f000 fb72 	bl	80033f0 <__aeabi_dmul>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4620      	mov	r0, r4
 8002d12:	4629      	mov	r1, r5
 8002d14:	f000 f9b8 	bl	8003088 <__aeabi_dsub>
 8002d18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d1c:	4b43      	ldr	r3, [pc, #268]	; (8002e2c <atan+0x334>)
 8002d1e:	429e      	cmp	r6, r3
 8002d20:	dc1a      	bgt.n	8002d58 <atan+0x260>
 8002d22:	2200      	movs	r2, #0
 8002d24:	4b42      	ldr	r3, [pc, #264]	; (8002e30 <atan+0x338>)
 8002d26:	f000 f9af 	bl	8003088 <__aeabi_dsub>
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4606      	mov	r6, r0
 8002d2e:	460f      	mov	r7, r1
 8002d30:	4b3f      	ldr	r3, [pc, #252]	; (8002e30 <atan+0x338>)
 8002d32:	4620      	mov	r0, r4
 8002d34:	4629      	mov	r1, r5
 8002d36:	f000 fb5b 	bl	80033f0 <__aeabi_dmul>
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	4b39      	ldr	r3, [pc, #228]	; (8002e24 <atan+0x32c>)
 8002d3e:	f000 f9a5 	bl	800308c <__adddf3>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4630      	mov	r0, r6
 8002d48:	4639      	mov	r1, r7
 8002d4a:	f000 fc7b 	bl	8003644 <__aeabi_ddiv>
 8002d4e:	f04f 0a02 	mov.w	sl, #2
 8002d52:	4604      	mov	r4, r0
 8002d54:	460d      	mov	r5, r1
 8002d56:	e6f3      	b.n	8002b40 <atan+0x48>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	4935      	ldr	r1, [pc, #212]	; (8002e34 <atan+0x33c>)
 8002d60:	f000 fc70 	bl	8003644 <__aeabi_ddiv>
 8002d64:	f04f 0a03 	mov.w	sl, #3
 8002d68:	4604      	mov	r4, r0
 8002d6a:	460d      	mov	r5, r1
 8002d6c:	e6e8      	b.n	8002b40 <atan+0x48>
 8002d6e:	2200      	movs	r2, #0
 8002d70:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <atan+0x32c>)
 8002d72:	f000 f989 	bl	8003088 <__aeabi_dsub>
 8002d76:	2200      	movs	r2, #0
 8002d78:	4606      	mov	r6, r0
 8002d7a:	460f      	mov	r7, r1
 8002d7c:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <atan+0x32c>)
 8002d7e:	4620      	mov	r0, r4
 8002d80:	4629      	mov	r1, r5
 8002d82:	f000 f983 	bl	800308c <__adddf3>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4630      	mov	r0, r6
 8002d8c:	4639      	mov	r1, r7
 8002d8e:	f000 fc59 	bl	8003644 <__aeabi_ddiv>
 8002d92:	f04f 0a01 	mov.w	sl, #1
 8002d96:	4604      	mov	r4, r0
 8002d98:	460d      	mov	r5, r1
 8002d9a:	e6d1      	b.n	8002b40 <atan+0x48>
 8002d9c:	f3af 8000 	nop.w
 8002da0:	54442d18 	.word	0x54442d18
 8002da4:	3ff921fb 	.word	0x3ff921fb
 8002da8:	e322da11 	.word	0xe322da11
 8002dac:	3f90ad3a 	.word	0x3f90ad3a
 8002db0:	24760deb 	.word	0x24760deb
 8002db4:	3fa97b4b 	.word	0x3fa97b4b
 8002db8:	a0d03d51 	.word	0xa0d03d51
 8002dbc:	3fb10d66 	.word	0x3fb10d66
 8002dc0:	c54c206e 	.word	0xc54c206e
 8002dc4:	3fb745cd 	.word	0x3fb745cd
 8002dc8:	920083ff 	.word	0x920083ff
 8002dcc:	3fc24924 	.word	0x3fc24924
 8002dd0:	5555550d 	.word	0x5555550d
 8002dd4:	3fd55555 	.word	0x3fd55555
 8002dd8:	2c6a6c2f 	.word	0x2c6a6c2f
 8002ddc:	bfa2b444 	.word	0xbfa2b444
 8002de0:	52defd9a 	.word	0x52defd9a
 8002de4:	3fadde2d 	.word	0x3fadde2d
 8002de8:	af749a6d 	.word	0xaf749a6d
 8002dec:	3fb3b0f2 	.word	0x3fb3b0f2
 8002df0:	fe231671 	.word	0xfe231671
 8002df4:	3fbc71c6 	.word	0x3fbc71c6
 8002df8:	9998ebc4 	.word	0x9998ebc4
 8002dfc:	3fc99999 	.word	0x3fc99999
 8002e00:	8800759c 	.word	0x8800759c
 8002e04:	7e37e43c 	.word	0x7e37e43c
 8002e08:	54442d18 	.word	0x54442d18
 8002e0c:	bff921fb 	.word	0xbff921fb
 8002e10:	440fffff 	.word	0x440fffff
 8002e14:	7ff00000 	.word	0x7ff00000
 8002e18:	3fdbffff 	.word	0x3fdbffff
 8002e1c:	0800bd00 	.word	0x0800bd00
 8002e20:	0800bce0 	.word	0x0800bce0
 8002e24:	3ff00000 	.word	0x3ff00000
 8002e28:	3ff2ffff 	.word	0x3ff2ffff
 8002e2c:	40037fff 	.word	0x40037fff
 8002e30:	3ff80000 	.word	0x3ff80000
 8002e34:	bff00000 	.word	0xbff00000

08002e38 <fabs>:
 8002e38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop

08002e40 <sqrt>:
 8002e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e44:	b08b      	sub	sp, #44	; 0x2c
 8002e46:	4604      	mov	r4, r0
 8002e48:	460d      	mov	r5, r1
 8002e4a:	f000 f855 	bl	8002ef8 <__ieee754_sqrt>
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <sqrt+0xb0>)
 8002e50:	f993 a000 	ldrsb.w	sl, [r3]
 8002e54:	f1ba 3fff 	cmp.w	sl, #4294967295
 8002e58:	4606      	mov	r6, r0
 8002e5a:	460f      	mov	r7, r1
 8002e5c:	d012      	beq.n	8002e84 <sqrt+0x44>
 8002e5e:	4622      	mov	r2, r4
 8002e60:	462b      	mov	r3, r5
 8002e62:	4620      	mov	r0, r4
 8002e64:	4629      	mov	r1, r5
 8002e66:	f000 fd5d 	bl	8003924 <__aeabi_dcmpun>
 8002e6a:	4683      	mov	fp, r0
 8002e6c:	b950      	cbnz	r0, 8002e84 <sqrt+0x44>
 8002e6e:	f04f 0800 	mov.w	r8, #0
 8002e72:	f04f 0900 	mov.w	r9, #0
 8002e76:	4620      	mov	r0, r4
 8002e78:	4629      	mov	r1, r5
 8002e7a:	4642      	mov	r2, r8
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	f000 fd29 	bl	80038d4 <__aeabi_dcmplt>
 8002e82:	b920      	cbnz	r0, 8002e8e <sqrt+0x4e>
 8002e84:	4630      	mov	r0, r6
 8002e86:	4639      	mov	r1, r7
 8002e88:	b00b      	add	sp, #44	; 0x2c
 8002e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e8e:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <sqrt+0xb4>)
 8002e90:	f8cd b020 	str.w	fp, [sp, #32]
 8002e94:	2201      	movs	r2, #1
 8002e96:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002e9a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002e9e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002ea2:	f1ba 0f00 	cmp.w	sl, #0
 8002ea6:	d015      	beq.n	8002ed4 <sqrt+0x94>
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	464b      	mov	r3, r9
 8002eac:	4640      	mov	r0, r8
 8002eae:	4649      	mov	r1, r9
 8002eb0:	f000 fbc8 	bl	8003644 <__aeabi_ddiv>
 8002eb4:	f1ba 0f02 	cmp.w	sl, #2
 8002eb8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002ebc:	d10c      	bne.n	8002ed8 <sqrt+0x98>
 8002ebe:	f000 fd67 	bl	8003990 <__errno>
 8002ec2:	2321      	movs	r3, #33	; 0x21
 8002ec4:	6003      	str	r3, [r0, #0]
 8002ec6:	9b08      	ldr	r3, [sp, #32]
 8002ec8:	b963      	cbnz	r3, 8002ee4 <sqrt+0xa4>
 8002eca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002ece:	b00b      	add	sp, #44	; 0x2c
 8002ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ed4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8002ed8:	4668      	mov	r0, sp
 8002eda:	f000 f8cf 	bl	800307c <matherr>
 8002ede:	2800      	cmp	r0, #0
 8002ee0:	d1f1      	bne.n	8002ec6 <sqrt+0x86>
 8002ee2:	e7ec      	b.n	8002ebe <sqrt+0x7e>
 8002ee4:	f000 fd54 	bl	8003990 <__errno>
 8002ee8:	9b08      	ldr	r3, [sp, #32]
 8002eea:	6003      	str	r3, [r0, #0]
 8002eec:	e7ed      	b.n	8002eca <sqrt+0x8a>
 8002eee:	bf00      	nop
 8002ef0:	2000003c 	.word	0x2000003c
 8002ef4:	0800bd20 	.word	0x0800bd20

08002ef8 <__ieee754_sqrt>:
 8002ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002efc:	4e5e      	ldr	r6, [pc, #376]	; (8003078 <__ieee754_sqrt+0x180>)
 8002efe:	46b6      	mov	lr, r6
 8002f00:	400e      	ands	r6, r1
 8002f02:	4576      	cmp	r6, lr
 8002f04:	4604      	mov	r4, r0
 8002f06:	460d      	mov	r5, r1
 8002f08:	f000 8094 	beq.w	8003034 <__ieee754_sqrt+0x13c>
 8002f0c:	2900      	cmp	r1, #0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4602      	mov	r2, r0
 8002f12:	dd72      	ble.n	8002ffa <__ieee754_sqrt+0x102>
 8002f14:	150f      	asrs	r7, r1, #20
 8002f16:	d07d      	beq.n	8003014 <__ieee754_sqrt+0x11c>
 8002f18:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 8002f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f20:	07f8      	lsls	r0, r7, #31
 8002f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f26:	d463      	bmi.n	8002ff0 <__ieee754_sqrt+0xf8>
 8002f28:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 8002f2c:	2600      	movs	r6, #0
 8002f2e:	440b      	add	r3, r1
 8002f30:	107f      	asrs	r7, r7, #1
 8002f32:	0052      	lsls	r2, r2, #1
 8002f34:	46b6      	mov	lr, r6
 8002f36:	2016      	movs	r0, #22
 8002f38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f3c:	eb0e 0401 	add.w	r4, lr, r1
 8002f40:	429c      	cmp	r4, r3
 8002f42:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 8002f46:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8002f4a:	dc03      	bgt.n	8002f54 <__ieee754_sqrt+0x5c>
 8002f4c:	1b1b      	subs	r3, r3, r4
 8002f4e:	eb04 0e01 	add.w	lr, r4, r1
 8002f52:	440e      	add	r6, r1
 8002f54:	3801      	subs	r0, #1
 8002f56:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002f5a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002f5e:	d1ed      	bne.n	8002f3c <__ieee754_sqrt+0x44>
 8002f60:	4684      	mov	ip, r0
 8002f62:	2420      	movs	r4, #32
 8002f64:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f68:	e009      	b.n	8002f7e <__ieee754_sqrt+0x86>
 8002f6a:	d020      	beq.n	8002fae <__ieee754_sqrt+0xb6>
 8002f6c:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 8002f70:	3c01      	subs	r4, #1
 8002f72:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002f76:	442b      	add	r3, r5
 8002f78:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8002f7c:	d020      	beq.n	8002fc0 <__ieee754_sqrt+0xc8>
 8002f7e:	459e      	cmp	lr, r3
 8002f80:	eb01 050c 	add.w	r5, r1, ip
 8002f84:	daf1      	bge.n	8002f6a <__ieee754_sqrt+0x72>
 8002f86:	2d00      	cmp	r5, #0
 8002f88:	eb05 0c01 	add.w	ip, r5, r1
 8002f8c:	db09      	blt.n	8002fa2 <__ieee754_sqrt+0xaa>
 8002f8e:	46f0      	mov	r8, lr
 8002f90:	4295      	cmp	r5, r2
 8002f92:	ebce 0303 	rsb	r3, lr, r3
 8002f96:	d900      	bls.n	8002f9a <__ieee754_sqrt+0xa2>
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	1b52      	subs	r2, r2, r5
 8002f9c:	4408      	add	r0, r1
 8002f9e:	46c6      	mov	lr, r8
 8002fa0:	e7e4      	b.n	8002f6c <__ieee754_sqrt+0x74>
 8002fa2:	f1bc 0f00 	cmp.w	ip, #0
 8002fa6:	dbf2      	blt.n	8002f8e <__ieee754_sqrt+0x96>
 8002fa8:	f10e 0801 	add.w	r8, lr, #1
 8002fac:	e7f0      	b.n	8002f90 <__ieee754_sqrt+0x98>
 8002fae:	4295      	cmp	r5, r2
 8002fb0:	d81c      	bhi.n	8002fec <__ieee754_sqrt+0xf4>
 8002fb2:	2d00      	cmp	r5, #0
 8002fb4:	eb05 0c01 	add.w	ip, r5, r1
 8002fb8:	db48      	blt.n	800304c <__ieee754_sqrt+0x154>
 8002fba:	4698      	mov	r8, r3
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	e7ec      	b.n	8002f9a <__ieee754_sqrt+0xa2>
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	d004      	beq.n	8002fce <__ieee754_sqrt+0xd6>
 8002fc4:	1c41      	adds	r1, r0, #1
 8002fc6:	d045      	beq.n	8003054 <__ieee754_sqrt+0x15c>
 8002fc8:	f000 0401 	and.w	r4, r0, #1
 8002fcc:	4420      	add	r0, r4
 8002fce:	0844      	lsrs	r4, r0, #1
 8002fd0:	1073      	asrs	r3, r6, #1
 8002fd2:	07f2      	lsls	r2, r6, #31
 8002fd4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8002fd8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8002fdc:	bf48      	it	mi
 8002fde:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8002fe2:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fec:	4673      	mov	r3, lr
 8002fee:	e7bd      	b.n	8002f6c <__ieee754_sqrt+0x74>
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8002ff6:	0052      	lsls	r2, r2, #1
 8002ff8:	e796      	b.n	8002f28 <__ieee754_sqrt+0x30>
 8002ffa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8002ffe:	4306      	orrs	r6, r0
 8003000:	d022      	beq.n	8003048 <__ieee754_sqrt+0x150>
 8003002:	bb71      	cbnz	r1, 8003062 <__ieee754_sqrt+0x16a>
 8003004:	460f      	mov	r7, r1
 8003006:	0ad3      	lsrs	r3, r2, #11
 8003008:	3f15      	subs	r7, #21
 800300a:	0552      	lsls	r2, r2, #21
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0fa      	beq.n	8003006 <__ieee754_sqrt+0x10e>
 8003010:	02dd      	lsls	r5, r3, #11
 8003012:	d421      	bmi.n	8003058 <__ieee754_sqrt+0x160>
 8003014:	2100      	movs	r1, #0
 8003016:	e000      	b.n	800301a <__ieee754_sqrt+0x122>
 8003018:	4601      	mov	r1, r0
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	02dc      	lsls	r4, r3, #11
 800301e:	f101 0001 	add.w	r0, r1, #1
 8003022:	d5f9      	bpl.n	8003018 <__ieee754_sqrt+0x120>
 8003024:	f1c0 0420 	rsb	r4, r0, #32
 8003028:	fa22 f404 	lsr.w	r4, r2, r4
 800302c:	4323      	orrs	r3, r4
 800302e:	1a7f      	subs	r7, r7, r1
 8003030:	4082      	lsls	r2, r0
 8003032:	e771      	b.n	8002f18 <__ieee754_sqrt+0x20>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	f000 f9da 	bl	80033f0 <__aeabi_dmul>
 800303c:	4622      	mov	r2, r4
 800303e:	462b      	mov	r3, r5
 8003040:	f000 f824 	bl	800308c <__adddf3>
 8003044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800304c:	f1bc 0f00 	cmp.w	ip, #0
 8003050:	daaa      	bge.n	8002fa8 <__ieee754_sqrt+0xb0>
 8003052:	e7b2      	b.n	8002fba <__ieee754_sqrt+0xc2>
 8003054:	3601      	adds	r6, #1
 8003056:	e7bb      	b.n	8002fd0 <__ieee754_sqrt+0xd8>
 8003058:	2420      	movs	r4, #32
 800305a:	f04f 31ff 	mov.w	r1, #4294967295
 800305e:	2000      	movs	r0, #0
 8003060:	e7e2      	b.n	8003028 <__ieee754_sqrt+0x130>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	f000 f80f 	bl	8003088 <__aeabi_dsub>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	f000 fae9 	bl	8003644 <__aeabi_ddiv>
 8003072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003076:	bf00      	nop
 8003078:	7ff00000 	.word	0x7ff00000

0800307c <matherr>:
 800307c:	2000      	movs	r0, #0
 800307e:	4770      	bx	lr

08003080 <__aeabi_drsub>:
 8003080:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003084:	e002      	b.n	800308c <__adddf3>
 8003086:	bf00      	nop

08003088 <__aeabi_dsub>:
 8003088:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800308c <__adddf3>:
 800308c:	b530      	push	{r4, r5, lr}
 800308e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003092:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003096:	ea94 0f05 	teq	r4, r5
 800309a:	bf08      	it	eq
 800309c:	ea90 0f02 	teqeq	r0, r2
 80030a0:	bf1f      	itttt	ne
 80030a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80030a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80030aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80030ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80030b2:	f000 80e2 	beq.w	800327a <__adddf3+0x1ee>
 80030b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80030ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80030be:	bfb8      	it	lt
 80030c0:	426d      	neglt	r5, r5
 80030c2:	dd0c      	ble.n	80030de <__adddf3+0x52>
 80030c4:	442c      	add	r4, r5
 80030c6:	ea80 0202 	eor.w	r2, r0, r2
 80030ca:	ea81 0303 	eor.w	r3, r1, r3
 80030ce:	ea82 0000 	eor.w	r0, r2, r0
 80030d2:	ea83 0101 	eor.w	r1, r3, r1
 80030d6:	ea80 0202 	eor.w	r2, r0, r2
 80030da:	ea81 0303 	eor.w	r3, r1, r3
 80030de:	2d36      	cmp	r5, #54	; 0x36
 80030e0:	bf88      	it	hi
 80030e2:	bd30      	pophi	{r4, r5, pc}
 80030e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80030e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80030ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80030f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80030f4:	d002      	beq.n	80030fc <__adddf3+0x70>
 80030f6:	4240      	negs	r0, r0
 80030f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80030fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8003100:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003104:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003108:	d002      	beq.n	8003110 <__adddf3+0x84>
 800310a:	4252      	negs	r2, r2
 800310c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003110:	ea94 0f05 	teq	r4, r5
 8003114:	f000 80a7 	beq.w	8003266 <__adddf3+0x1da>
 8003118:	f1a4 0401 	sub.w	r4, r4, #1
 800311c:	f1d5 0e20 	rsbs	lr, r5, #32
 8003120:	db0d      	blt.n	800313e <__adddf3+0xb2>
 8003122:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003126:	fa22 f205 	lsr.w	r2, r2, r5
 800312a:	1880      	adds	r0, r0, r2
 800312c:	f141 0100 	adc.w	r1, r1, #0
 8003130:	fa03 f20e 	lsl.w	r2, r3, lr
 8003134:	1880      	adds	r0, r0, r2
 8003136:	fa43 f305 	asr.w	r3, r3, r5
 800313a:	4159      	adcs	r1, r3
 800313c:	e00e      	b.n	800315c <__adddf3+0xd0>
 800313e:	f1a5 0520 	sub.w	r5, r5, #32
 8003142:	f10e 0e20 	add.w	lr, lr, #32
 8003146:	2a01      	cmp	r2, #1
 8003148:	fa03 fc0e 	lsl.w	ip, r3, lr
 800314c:	bf28      	it	cs
 800314e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003152:	fa43 f305 	asr.w	r3, r3, r5
 8003156:	18c0      	adds	r0, r0, r3
 8003158:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800315c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003160:	d507      	bpl.n	8003172 <__adddf3+0xe6>
 8003162:	f04f 0e00 	mov.w	lr, #0
 8003166:	f1dc 0c00 	rsbs	ip, ip, #0
 800316a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800316e:	eb6e 0101 	sbc.w	r1, lr, r1
 8003172:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003176:	d31b      	bcc.n	80031b0 <__adddf3+0x124>
 8003178:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800317c:	d30c      	bcc.n	8003198 <__adddf3+0x10c>
 800317e:	0849      	lsrs	r1, r1, #1
 8003180:	ea5f 0030 	movs.w	r0, r0, rrx
 8003184:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003188:	f104 0401 	add.w	r4, r4, #1
 800318c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003190:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003194:	f080 809a 	bcs.w	80032cc <__adddf3+0x240>
 8003198:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800319c:	bf08      	it	eq
 800319e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80031a2:	f150 0000 	adcs.w	r0, r0, #0
 80031a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80031aa:	ea41 0105 	orr.w	r1, r1, r5
 80031ae:	bd30      	pop	{r4, r5, pc}
 80031b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80031b4:	4140      	adcs	r0, r0
 80031b6:	eb41 0101 	adc.w	r1, r1, r1
 80031ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80031be:	f1a4 0401 	sub.w	r4, r4, #1
 80031c2:	d1e9      	bne.n	8003198 <__adddf3+0x10c>
 80031c4:	f091 0f00 	teq	r1, #0
 80031c8:	bf04      	itt	eq
 80031ca:	4601      	moveq	r1, r0
 80031cc:	2000      	moveq	r0, #0
 80031ce:	fab1 f381 	clz	r3, r1
 80031d2:	bf08      	it	eq
 80031d4:	3320      	addeq	r3, #32
 80031d6:	f1a3 030b 	sub.w	r3, r3, #11
 80031da:	f1b3 0220 	subs.w	r2, r3, #32
 80031de:	da0c      	bge.n	80031fa <__adddf3+0x16e>
 80031e0:	320c      	adds	r2, #12
 80031e2:	dd08      	ble.n	80031f6 <__adddf3+0x16a>
 80031e4:	f102 0c14 	add.w	ip, r2, #20
 80031e8:	f1c2 020c 	rsb	r2, r2, #12
 80031ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80031f0:	fa21 f102 	lsr.w	r1, r1, r2
 80031f4:	e00c      	b.n	8003210 <__adddf3+0x184>
 80031f6:	f102 0214 	add.w	r2, r2, #20
 80031fa:	bfd8      	it	le
 80031fc:	f1c2 0c20 	rsble	ip, r2, #32
 8003200:	fa01 f102 	lsl.w	r1, r1, r2
 8003204:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003208:	bfdc      	itt	le
 800320a:	ea41 010c 	orrle.w	r1, r1, ip
 800320e:	4090      	lslle	r0, r2
 8003210:	1ae4      	subs	r4, r4, r3
 8003212:	bfa2      	ittt	ge
 8003214:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003218:	4329      	orrge	r1, r5
 800321a:	bd30      	popge	{r4, r5, pc}
 800321c:	ea6f 0404 	mvn.w	r4, r4
 8003220:	3c1f      	subs	r4, #31
 8003222:	da1c      	bge.n	800325e <__adddf3+0x1d2>
 8003224:	340c      	adds	r4, #12
 8003226:	dc0e      	bgt.n	8003246 <__adddf3+0x1ba>
 8003228:	f104 0414 	add.w	r4, r4, #20
 800322c:	f1c4 0220 	rsb	r2, r4, #32
 8003230:	fa20 f004 	lsr.w	r0, r0, r4
 8003234:	fa01 f302 	lsl.w	r3, r1, r2
 8003238:	ea40 0003 	orr.w	r0, r0, r3
 800323c:	fa21 f304 	lsr.w	r3, r1, r4
 8003240:	ea45 0103 	orr.w	r1, r5, r3
 8003244:	bd30      	pop	{r4, r5, pc}
 8003246:	f1c4 040c 	rsb	r4, r4, #12
 800324a:	f1c4 0220 	rsb	r2, r4, #32
 800324e:	fa20 f002 	lsr.w	r0, r0, r2
 8003252:	fa01 f304 	lsl.w	r3, r1, r4
 8003256:	ea40 0003 	orr.w	r0, r0, r3
 800325a:	4629      	mov	r1, r5
 800325c:	bd30      	pop	{r4, r5, pc}
 800325e:	fa21 f004 	lsr.w	r0, r1, r4
 8003262:	4629      	mov	r1, r5
 8003264:	bd30      	pop	{r4, r5, pc}
 8003266:	f094 0f00 	teq	r4, #0
 800326a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800326e:	bf06      	itte	eq
 8003270:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003274:	3401      	addeq	r4, #1
 8003276:	3d01      	subne	r5, #1
 8003278:	e74e      	b.n	8003118 <__adddf3+0x8c>
 800327a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800327e:	bf18      	it	ne
 8003280:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003284:	d029      	beq.n	80032da <__adddf3+0x24e>
 8003286:	ea94 0f05 	teq	r4, r5
 800328a:	bf08      	it	eq
 800328c:	ea90 0f02 	teqeq	r0, r2
 8003290:	d005      	beq.n	800329e <__adddf3+0x212>
 8003292:	ea54 0c00 	orrs.w	ip, r4, r0
 8003296:	bf04      	itt	eq
 8003298:	4619      	moveq	r1, r3
 800329a:	4610      	moveq	r0, r2
 800329c:	bd30      	pop	{r4, r5, pc}
 800329e:	ea91 0f03 	teq	r1, r3
 80032a2:	bf1e      	ittt	ne
 80032a4:	2100      	movne	r1, #0
 80032a6:	2000      	movne	r0, #0
 80032a8:	bd30      	popne	{r4, r5, pc}
 80032aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80032ae:	d105      	bne.n	80032bc <__adddf3+0x230>
 80032b0:	0040      	lsls	r0, r0, #1
 80032b2:	4149      	adcs	r1, r1
 80032b4:	bf28      	it	cs
 80032b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80032ba:	bd30      	pop	{r4, r5, pc}
 80032bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80032c0:	bf3c      	itt	cc
 80032c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80032c6:	bd30      	popcc	{r4, r5, pc}
 80032c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80032cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80032d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80032d4:	f04f 0000 	mov.w	r0, #0
 80032d8:	bd30      	pop	{r4, r5, pc}
 80032da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80032de:	bf1a      	itte	ne
 80032e0:	4619      	movne	r1, r3
 80032e2:	4610      	movne	r0, r2
 80032e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80032e8:	bf1c      	itt	ne
 80032ea:	460b      	movne	r3, r1
 80032ec:	4602      	movne	r2, r0
 80032ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80032f2:	bf06      	itte	eq
 80032f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80032f8:	ea91 0f03 	teqeq	r1, r3
 80032fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003300:	bd30      	pop	{r4, r5, pc}
 8003302:	bf00      	nop

08003304 <__aeabi_ui2d>:
 8003304:	f090 0f00 	teq	r0, #0
 8003308:	bf04      	itt	eq
 800330a:	2100      	moveq	r1, #0
 800330c:	4770      	bxeq	lr
 800330e:	b530      	push	{r4, r5, lr}
 8003310:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003314:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003318:	f04f 0500 	mov.w	r5, #0
 800331c:	f04f 0100 	mov.w	r1, #0
 8003320:	e750      	b.n	80031c4 <__adddf3+0x138>
 8003322:	bf00      	nop

08003324 <__aeabi_i2d>:
 8003324:	f090 0f00 	teq	r0, #0
 8003328:	bf04      	itt	eq
 800332a:	2100      	moveq	r1, #0
 800332c:	4770      	bxeq	lr
 800332e:	b530      	push	{r4, r5, lr}
 8003330:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003334:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003338:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800333c:	bf48      	it	mi
 800333e:	4240      	negmi	r0, r0
 8003340:	f04f 0100 	mov.w	r1, #0
 8003344:	e73e      	b.n	80031c4 <__adddf3+0x138>
 8003346:	bf00      	nop

08003348 <__aeabi_f2d>:
 8003348:	0042      	lsls	r2, r0, #1
 800334a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800334e:	ea4f 0131 	mov.w	r1, r1, rrx
 8003352:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003356:	bf1f      	itttt	ne
 8003358:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800335c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003360:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003364:	4770      	bxne	lr
 8003366:	f092 0f00 	teq	r2, #0
 800336a:	bf14      	ite	ne
 800336c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003370:	4770      	bxeq	lr
 8003372:	b530      	push	{r4, r5, lr}
 8003374:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003378:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800337c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003380:	e720      	b.n	80031c4 <__adddf3+0x138>
 8003382:	bf00      	nop

08003384 <__aeabi_ul2d>:
 8003384:	ea50 0201 	orrs.w	r2, r0, r1
 8003388:	bf08      	it	eq
 800338a:	4770      	bxeq	lr
 800338c:	b530      	push	{r4, r5, lr}
 800338e:	f04f 0500 	mov.w	r5, #0
 8003392:	e00a      	b.n	80033aa <__aeabi_l2d+0x16>

08003394 <__aeabi_l2d>:
 8003394:	ea50 0201 	orrs.w	r2, r0, r1
 8003398:	bf08      	it	eq
 800339a:	4770      	bxeq	lr
 800339c:	b530      	push	{r4, r5, lr}
 800339e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80033a2:	d502      	bpl.n	80033aa <__aeabi_l2d+0x16>
 80033a4:	4240      	negs	r0, r0
 80033a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80033aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80033ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80033b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80033b6:	f43f aedc 	beq.w	8003172 <__adddf3+0xe6>
 80033ba:	f04f 0203 	mov.w	r2, #3
 80033be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80033c2:	bf18      	it	ne
 80033c4:	3203      	addne	r2, #3
 80033c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80033ca:	bf18      	it	ne
 80033cc:	3203      	addne	r2, #3
 80033ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80033d2:	f1c2 0320 	rsb	r3, r2, #32
 80033d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80033da:	fa20 f002 	lsr.w	r0, r0, r2
 80033de:	fa01 fe03 	lsl.w	lr, r1, r3
 80033e2:	ea40 000e 	orr.w	r0, r0, lr
 80033e6:	fa21 f102 	lsr.w	r1, r1, r2
 80033ea:	4414      	add	r4, r2
 80033ec:	e6c1      	b.n	8003172 <__adddf3+0xe6>
 80033ee:	bf00      	nop

080033f0 <__aeabi_dmul>:
 80033f0:	b570      	push	{r4, r5, r6, lr}
 80033f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80033f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80033fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80033fe:	bf1d      	ittte	ne
 8003400:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003404:	ea94 0f0c 	teqne	r4, ip
 8003408:	ea95 0f0c 	teqne	r5, ip
 800340c:	f000 f8de 	bleq	80035cc <__aeabi_dmul+0x1dc>
 8003410:	442c      	add	r4, r5
 8003412:	ea81 0603 	eor.w	r6, r1, r3
 8003416:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800341a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800341e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003422:	bf18      	it	ne
 8003424:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003428:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800342c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003430:	d038      	beq.n	80034a4 <__aeabi_dmul+0xb4>
 8003432:	fba0 ce02 	umull	ip, lr, r0, r2
 8003436:	f04f 0500 	mov.w	r5, #0
 800343a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800343e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003442:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003446:	f04f 0600 	mov.w	r6, #0
 800344a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800344e:	f09c 0f00 	teq	ip, #0
 8003452:	bf18      	it	ne
 8003454:	f04e 0e01 	orrne.w	lr, lr, #1
 8003458:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800345c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003460:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003464:	d204      	bcs.n	8003470 <__aeabi_dmul+0x80>
 8003466:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800346a:	416d      	adcs	r5, r5
 800346c:	eb46 0606 	adc.w	r6, r6, r6
 8003470:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003474:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003478:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800347c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003480:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003484:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003488:	bf88      	it	hi
 800348a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800348e:	d81e      	bhi.n	80034ce <__aeabi_dmul+0xde>
 8003490:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003494:	bf08      	it	eq
 8003496:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800349a:	f150 0000 	adcs.w	r0, r0, #0
 800349e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
 80034a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80034a8:	ea46 0101 	orr.w	r1, r6, r1
 80034ac:	ea40 0002 	orr.w	r0, r0, r2
 80034b0:	ea81 0103 	eor.w	r1, r1, r3
 80034b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80034b8:	bfc2      	ittt	gt
 80034ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80034be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80034c2:	bd70      	popgt	{r4, r5, r6, pc}
 80034c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80034c8:	f04f 0e00 	mov.w	lr, #0
 80034cc:	3c01      	subs	r4, #1
 80034ce:	f300 80ab 	bgt.w	8003628 <__aeabi_dmul+0x238>
 80034d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80034d6:	bfde      	ittt	le
 80034d8:	2000      	movle	r0, #0
 80034da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80034de:	bd70      	pople	{r4, r5, r6, pc}
 80034e0:	f1c4 0400 	rsb	r4, r4, #0
 80034e4:	3c20      	subs	r4, #32
 80034e6:	da35      	bge.n	8003554 <__aeabi_dmul+0x164>
 80034e8:	340c      	adds	r4, #12
 80034ea:	dc1b      	bgt.n	8003524 <__aeabi_dmul+0x134>
 80034ec:	f104 0414 	add.w	r4, r4, #20
 80034f0:	f1c4 0520 	rsb	r5, r4, #32
 80034f4:	fa00 f305 	lsl.w	r3, r0, r5
 80034f8:	fa20 f004 	lsr.w	r0, r0, r4
 80034fc:	fa01 f205 	lsl.w	r2, r1, r5
 8003500:	ea40 0002 	orr.w	r0, r0, r2
 8003504:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8003508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800350c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003510:	fa21 f604 	lsr.w	r6, r1, r4
 8003514:	eb42 0106 	adc.w	r1, r2, r6
 8003518:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800351c:	bf08      	it	eq
 800351e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003522:	bd70      	pop	{r4, r5, r6, pc}
 8003524:	f1c4 040c 	rsb	r4, r4, #12
 8003528:	f1c4 0520 	rsb	r5, r4, #32
 800352c:	fa00 f304 	lsl.w	r3, r0, r4
 8003530:	fa20 f005 	lsr.w	r0, r0, r5
 8003534:	fa01 f204 	lsl.w	r2, r1, r4
 8003538:	ea40 0002 	orr.w	r0, r0, r2
 800353c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003540:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003544:	f141 0100 	adc.w	r1, r1, #0
 8003548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800354c:	bf08      	it	eq
 800354e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003552:	bd70      	pop	{r4, r5, r6, pc}
 8003554:	f1c4 0520 	rsb	r5, r4, #32
 8003558:	fa00 f205 	lsl.w	r2, r0, r5
 800355c:	ea4e 0e02 	orr.w	lr, lr, r2
 8003560:	fa20 f304 	lsr.w	r3, r0, r4
 8003564:	fa01 f205 	lsl.w	r2, r1, r5
 8003568:	ea43 0302 	orr.w	r3, r3, r2
 800356c:	fa21 f004 	lsr.w	r0, r1, r4
 8003570:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003574:	fa21 f204 	lsr.w	r2, r1, r4
 8003578:	ea20 0002 	bic.w	r0, r0, r2
 800357c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003584:	bf08      	it	eq
 8003586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800358a:	bd70      	pop	{r4, r5, r6, pc}
 800358c:	f094 0f00 	teq	r4, #0
 8003590:	d10f      	bne.n	80035b2 <__aeabi_dmul+0x1c2>
 8003592:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003596:	0040      	lsls	r0, r0, #1
 8003598:	eb41 0101 	adc.w	r1, r1, r1
 800359c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80035a0:	bf08      	it	eq
 80035a2:	3c01      	subeq	r4, #1
 80035a4:	d0f7      	beq.n	8003596 <__aeabi_dmul+0x1a6>
 80035a6:	ea41 0106 	orr.w	r1, r1, r6
 80035aa:	f095 0f00 	teq	r5, #0
 80035ae:	bf18      	it	ne
 80035b0:	4770      	bxne	lr
 80035b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80035b6:	0052      	lsls	r2, r2, #1
 80035b8:	eb43 0303 	adc.w	r3, r3, r3
 80035bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80035c0:	bf08      	it	eq
 80035c2:	3d01      	subeq	r5, #1
 80035c4:	d0f7      	beq.n	80035b6 <__aeabi_dmul+0x1c6>
 80035c6:	ea43 0306 	orr.w	r3, r3, r6
 80035ca:	4770      	bx	lr
 80035cc:	ea94 0f0c 	teq	r4, ip
 80035d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80035d4:	bf18      	it	ne
 80035d6:	ea95 0f0c 	teqne	r5, ip
 80035da:	d00c      	beq.n	80035f6 <__aeabi_dmul+0x206>
 80035dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80035e0:	bf18      	it	ne
 80035e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80035e6:	d1d1      	bne.n	800358c <__aeabi_dmul+0x19c>
 80035e8:	ea81 0103 	eor.w	r1, r1, r3
 80035ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80035f0:	f04f 0000 	mov.w	r0, #0
 80035f4:	bd70      	pop	{r4, r5, r6, pc}
 80035f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80035fa:	bf06      	itte	eq
 80035fc:	4610      	moveq	r0, r2
 80035fe:	4619      	moveq	r1, r3
 8003600:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003604:	d019      	beq.n	800363a <__aeabi_dmul+0x24a>
 8003606:	ea94 0f0c 	teq	r4, ip
 800360a:	d102      	bne.n	8003612 <__aeabi_dmul+0x222>
 800360c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003610:	d113      	bne.n	800363a <__aeabi_dmul+0x24a>
 8003612:	ea95 0f0c 	teq	r5, ip
 8003616:	d105      	bne.n	8003624 <__aeabi_dmul+0x234>
 8003618:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800361c:	bf1c      	itt	ne
 800361e:	4610      	movne	r0, r2
 8003620:	4619      	movne	r1, r3
 8003622:	d10a      	bne.n	800363a <__aeabi_dmul+0x24a>
 8003624:	ea81 0103 	eor.w	r1, r1, r3
 8003628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800362c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003634:	f04f 0000 	mov.w	r0, #0
 8003638:	bd70      	pop	{r4, r5, r6, pc}
 800363a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800363e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003642:	bd70      	pop	{r4, r5, r6, pc}

08003644 <__aeabi_ddiv>:
 8003644:	b570      	push	{r4, r5, r6, lr}
 8003646:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800364a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800364e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003652:	bf1d      	ittte	ne
 8003654:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003658:	ea94 0f0c 	teqne	r4, ip
 800365c:	ea95 0f0c 	teqne	r5, ip
 8003660:	f000 f8a7 	bleq	80037b2 <__aeabi_ddiv+0x16e>
 8003664:	eba4 0405 	sub.w	r4, r4, r5
 8003668:	ea81 0e03 	eor.w	lr, r1, r3
 800366c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003670:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003674:	f000 8088 	beq.w	8003788 <__aeabi_ddiv+0x144>
 8003678:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800367c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003680:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003684:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003688:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800368c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003690:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003694:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003698:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800369c:	429d      	cmp	r5, r3
 800369e:	bf08      	it	eq
 80036a0:	4296      	cmpeq	r6, r2
 80036a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80036a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80036aa:	d202      	bcs.n	80036b2 <__aeabi_ddiv+0x6e>
 80036ac:	085b      	lsrs	r3, r3, #1
 80036ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80036b2:	1ab6      	subs	r6, r6, r2
 80036b4:	eb65 0503 	sbc.w	r5, r5, r3
 80036b8:	085b      	lsrs	r3, r3, #1
 80036ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80036be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80036c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80036c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80036ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80036ce:	bf22      	ittt	cs
 80036d0:	1ab6      	subcs	r6, r6, r2
 80036d2:	4675      	movcs	r5, lr
 80036d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	ea4f 0232 	mov.w	r2, r2, rrx
 80036de:	ebb6 0e02 	subs.w	lr, r6, r2
 80036e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80036e6:	bf22      	ittt	cs
 80036e8:	1ab6      	subcs	r6, r6, r2
 80036ea:	4675      	movcs	r5, lr
 80036ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80036f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80036fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80036fe:	bf22      	ittt	cs
 8003700:	1ab6      	subcs	r6, r6, r2
 8003702:	4675      	movcs	r5, lr
 8003704:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003708:	085b      	lsrs	r3, r3, #1
 800370a:	ea4f 0232 	mov.w	r2, r2, rrx
 800370e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003712:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003716:	bf22      	ittt	cs
 8003718:	1ab6      	subcs	r6, r6, r2
 800371a:	4675      	movcs	r5, lr
 800371c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003720:	ea55 0e06 	orrs.w	lr, r5, r6
 8003724:	d018      	beq.n	8003758 <__aeabi_ddiv+0x114>
 8003726:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800372a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800372e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003732:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003736:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800373a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800373e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003742:	d1c0      	bne.n	80036c6 <__aeabi_ddiv+0x82>
 8003744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003748:	d10b      	bne.n	8003762 <__aeabi_ddiv+0x11e>
 800374a:	ea41 0100 	orr.w	r1, r1, r0
 800374e:	f04f 0000 	mov.w	r0, #0
 8003752:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003756:	e7b6      	b.n	80036c6 <__aeabi_ddiv+0x82>
 8003758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800375c:	bf04      	itt	eq
 800375e:	4301      	orreq	r1, r0
 8003760:	2000      	moveq	r0, #0
 8003762:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003766:	bf88      	it	hi
 8003768:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800376c:	f63f aeaf 	bhi.w	80034ce <__aeabi_dmul+0xde>
 8003770:	ebb5 0c03 	subs.w	ip, r5, r3
 8003774:	bf04      	itt	eq
 8003776:	ebb6 0c02 	subseq.w	ip, r6, r2
 800377a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800377e:	f150 0000 	adcs.w	r0, r0, #0
 8003782:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003786:	bd70      	pop	{r4, r5, r6, pc}
 8003788:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800378c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003790:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003794:	bfc2      	ittt	gt
 8003796:	ebd4 050c 	rsbsgt	r5, r4, ip
 800379a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800379e:	bd70      	popgt	{r4, r5, r6, pc}
 80037a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80037a4:	f04f 0e00 	mov.w	lr, #0
 80037a8:	3c01      	subs	r4, #1
 80037aa:	e690      	b.n	80034ce <__aeabi_dmul+0xde>
 80037ac:	ea45 0e06 	orr.w	lr, r5, r6
 80037b0:	e68d      	b.n	80034ce <__aeabi_dmul+0xde>
 80037b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80037b6:	ea94 0f0c 	teq	r4, ip
 80037ba:	bf08      	it	eq
 80037bc:	ea95 0f0c 	teqeq	r5, ip
 80037c0:	f43f af3b 	beq.w	800363a <__aeabi_dmul+0x24a>
 80037c4:	ea94 0f0c 	teq	r4, ip
 80037c8:	d10a      	bne.n	80037e0 <__aeabi_ddiv+0x19c>
 80037ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80037ce:	f47f af34 	bne.w	800363a <__aeabi_dmul+0x24a>
 80037d2:	ea95 0f0c 	teq	r5, ip
 80037d6:	f47f af25 	bne.w	8003624 <__aeabi_dmul+0x234>
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	e72c      	b.n	800363a <__aeabi_dmul+0x24a>
 80037e0:	ea95 0f0c 	teq	r5, ip
 80037e4:	d106      	bne.n	80037f4 <__aeabi_ddiv+0x1b0>
 80037e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80037ea:	f43f aefd 	beq.w	80035e8 <__aeabi_dmul+0x1f8>
 80037ee:	4610      	mov	r0, r2
 80037f0:	4619      	mov	r1, r3
 80037f2:	e722      	b.n	800363a <__aeabi_dmul+0x24a>
 80037f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80037f8:	bf18      	it	ne
 80037fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80037fe:	f47f aec5 	bne.w	800358c <__aeabi_dmul+0x19c>
 8003802:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8003806:	f47f af0d 	bne.w	8003624 <__aeabi_dmul+0x234>
 800380a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800380e:	f47f aeeb 	bne.w	80035e8 <__aeabi_dmul+0x1f8>
 8003812:	e712      	b.n	800363a <__aeabi_dmul+0x24a>

08003814 <__gedf2>:
 8003814:	f04f 3cff 	mov.w	ip, #4294967295
 8003818:	e006      	b.n	8003828 <__cmpdf2+0x4>
 800381a:	bf00      	nop

0800381c <__ledf2>:
 800381c:	f04f 0c01 	mov.w	ip, #1
 8003820:	e002      	b.n	8003828 <__cmpdf2+0x4>
 8003822:	bf00      	nop

08003824 <__cmpdf2>:
 8003824:	f04f 0c01 	mov.w	ip, #1
 8003828:	f84d cd04 	str.w	ip, [sp, #-4]!
 800382c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003834:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003838:	bf18      	it	ne
 800383a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800383e:	d01b      	beq.n	8003878 <__cmpdf2+0x54>
 8003840:	b001      	add	sp, #4
 8003842:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8003846:	bf0c      	ite	eq
 8003848:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800384c:	ea91 0f03 	teqne	r1, r3
 8003850:	bf02      	ittt	eq
 8003852:	ea90 0f02 	teqeq	r0, r2
 8003856:	2000      	moveq	r0, #0
 8003858:	4770      	bxeq	lr
 800385a:	f110 0f00 	cmn.w	r0, #0
 800385e:	ea91 0f03 	teq	r1, r3
 8003862:	bf58      	it	pl
 8003864:	4299      	cmppl	r1, r3
 8003866:	bf08      	it	eq
 8003868:	4290      	cmpeq	r0, r2
 800386a:	bf2c      	ite	cs
 800386c:	17d8      	asrcs	r0, r3, #31
 800386e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8003872:	f040 0001 	orr.w	r0, r0, #1
 8003876:	4770      	bx	lr
 8003878:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800387c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003880:	d102      	bne.n	8003888 <__cmpdf2+0x64>
 8003882:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8003886:	d107      	bne.n	8003898 <__cmpdf2+0x74>
 8003888:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800388c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003890:	d1d6      	bne.n	8003840 <__cmpdf2+0x1c>
 8003892:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8003896:	d0d3      	beq.n	8003840 <__cmpdf2+0x1c>
 8003898:	f85d 0b04 	ldr.w	r0, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop

080038a0 <__aeabi_cdrcmple>:
 80038a0:	4684      	mov	ip, r0
 80038a2:	4610      	mov	r0, r2
 80038a4:	4662      	mov	r2, ip
 80038a6:	468c      	mov	ip, r1
 80038a8:	4619      	mov	r1, r3
 80038aa:	4663      	mov	r3, ip
 80038ac:	e000      	b.n	80038b0 <__aeabi_cdcmpeq>
 80038ae:	bf00      	nop

080038b0 <__aeabi_cdcmpeq>:
 80038b0:	b501      	push	{r0, lr}
 80038b2:	f7ff ffb7 	bl	8003824 <__cmpdf2>
 80038b6:	2800      	cmp	r0, #0
 80038b8:	bf48      	it	mi
 80038ba:	f110 0f00 	cmnmi.w	r0, #0
 80038be:	bd01      	pop	{r0, pc}

080038c0 <__aeabi_dcmpeq>:
 80038c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80038c4:	f7ff fff4 	bl	80038b0 <__aeabi_cdcmpeq>
 80038c8:	bf0c      	ite	eq
 80038ca:	2001      	moveq	r0, #1
 80038cc:	2000      	movne	r0, #0
 80038ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80038d2:	bf00      	nop

080038d4 <__aeabi_dcmplt>:
 80038d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80038d8:	f7ff ffea 	bl	80038b0 <__aeabi_cdcmpeq>
 80038dc:	bf34      	ite	cc
 80038de:	2001      	movcc	r0, #1
 80038e0:	2000      	movcs	r0, #0
 80038e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80038e6:	bf00      	nop

080038e8 <__aeabi_dcmple>:
 80038e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80038ec:	f7ff ffe0 	bl	80038b0 <__aeabi_cdcmpeq>
 80038f0:	bf94      	ite	ls
 80038f2:	2001      	movls	r0, #1
 80038f4:	2000      	movhi	r0, #0
 80038f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80038fa:	bf00      	nop

080038fc <__aeabi_dcmpge>:
 80038fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003900:	f7ff ffce 	bl	80038a0 <__aeabi_cdrcmple>
 8003904:	bf94      	ite	ls
 8003906:	2001      	movls	r0, #1
 8003908:	2000      	movhi	r0, #0
 800390a:	f85d fb08 	ldr.w	pc, [sp], #8
 800390e:	bf00      	nop

08003910 <__aeabi_dcmpgt>:
 8003910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003914:	f7ff ffc4 	bl	80038a0 <__aeabi_cdrcmple>
 8003918:	bf34      	ite	cc
 800391a:	2001      	movcc	r0, #1
 800391c:	2000      	movcs	r0, #0
 800391e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003922:	bf00      	nop

08003924 <__aeabi_dcmpun>:
 8003924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800392c:	d102      	bne.n	8003934 <__aeabi_dcmpun+0x10>
 800392e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8003932:	d10a      	bne.n	800394a <__aeabi_dcmpun+0x26>
 8003934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800393c:	d102      	bne.n	8003944 <__aeabi_dcmpun+0x20>
 800393e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8003942:	d102      	bne.n	800394a <__aeabi_dcmpun+0x26>
 8003944:	f04f 0000 	mov.w	r0, #0
 8003948:	4770      	bx	lr
 800394a:	f04f 0001 	mov.w	r0, #1
 800394e:	4770      	bx	lr

08003950 <__aeabi_d2uiz>:
 8003950:	004a      	lsls	r2, r1, #1
 8003952:	d211      	bcs.n	8003978 <__aeabi_d2uiz+0x28>
 8003954:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8003958:	d211      	bcs.n	800397e <__aeabi_d2uiz+0x2e>
 800395a:	d50d      	bpl.n	8003978 <__aeabi_d2uiz+0x28>
 800395c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003960:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8003964:	d40e      	bmi.n	8003984 <__aeabi_d2uiz+0x34>
 8003966:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800396a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800396e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8003972:	fa23 f002 	lsr.w	r0, r3, r2
 8003976:	4770      	bx	lr
 8003978:	f04f 0000 	mov.w	r0, #0
 800397c:	4770      	bx	lr
 800397e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003982:	d102      	bne.n	800398a <__aeabi_d2uiz+0x3a>
 8003984:	f04f 30ff 	mov.w	r0, #4294967295
 8003988:	4770      	bx	lr
 800398a:	f04f 0000 	mov.w	r0, #0
 800398e:	4770      	bx	lr

08003990 <__errno>:
 8003990:	4b01      	ldr	r3, [pc, #4]	; (8003998 <__errno+0x8>)
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000468 	.word	0x20000468

0800399c <__libc_init_array>:
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	4e0f      	ldr	r6, [pc, #60]	; (80039dc <__libc_init_array+0x40>)
 80039a0:	4d0f      	ldr	r5, [pc, #60]	; (80039e0 <__libc_init_array+0x44>)
 80039a2:	1b76      	subs	r6, r6, r5
 80039a4:	10b6      	asrs	r6, r6, #2
 80039a6:	bf18      	it	ne
 80039a8:	2400      	movne	r4, #0
 80039aa:	d005      	beq.n	80039b8 <__libc_init_array+0x1c>
 80039ac:	3401      	adds	r4, #1
 80039ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b2:	4798      	blx	r3
 80039b4:	42a6      	cmp	r6, r4
 80039b6:	d1f9      	bne.n	80039ac <__libc_init_array+0x10>
 80039b8:	4e0a      	ldr	r6, [pc, #40]	; (80039e4 <__libc_init_array+0x48>)
 80039ba:	4d0b      	ldr	r5, [pc, #44]	; (80039e8 <__libc_init_array+0x4c>)
 80039bc:	1b76      	subs	r6, r6, r5
 80039be:	f7fe fa29 	bl	8001e14 <_init>
 80039c2:	10b6      	asrs	r6, r6, #2
 80039c4:	bf18      	it	ne
 80039c6:	2400      	movne	r4, #0
 80039c8:	d006      	beq.n	80039d8 <__libc_init_array+0x3c>
 80039ca:	3401      	adds	r4, #1
 80039cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d0:	4798      	blx	r3
 80039d2:	42a6      	cmp	r6, r4
 80039d4:	d1f9      	bne.n	80039ca <__libc_init_array+0x2e>
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
 80039d8:	bd70      	pop	{r4, r5, r6, pc}
 80039da:	bf00      	nop
 80039dc:	200009e8 	.word	0x200009e8
 80039e0:	200009e8 	.word	0x200009e8
 80039e4:	200009e8 	.word	0x200009e8
 80039e8:	200009e8 	.word	0x200009e8

080039ec <memcpy>:
 80039ec:	4684      	mov	ip, r0
 80039ee:	ea41 0300 	orr.w	r3, r1, r0
 80039f2:	f013 0303 	ands.w	r3, r3, #3
 80039f6:	d16d      	bne.n	8003ad4 <memcpy+0xe8>
 80039f8:	3a40      	subs	r2, #64	; 0x40
 80039fa:	d341      	bcc.n	8003a80 <memcpy+0x94>
 80039fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a00:	f840 3b04 	str.w	r3, [r0], #4
 8003a04:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a08:	f840 3b04 	str.w	r3, [r0], #4
 8003a0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a10:	f840 3b04 	str.w	r3, [r0], #4
 8003a14:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a18:	f840 3b04 	str.w	r3, [r0], #4
 8003a1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a20:	f840 3b04 	str.w	r3, [r0], #4
 8003a24:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a28:	f840 3b04 	str.w	r3, [r0], #4
 8003a2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a30:	f840 3b04 	str.w	r3, [r0], #4
 8003a34:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a38:	f840 3b04 	str.w	r3, [r0], #4
 8003a3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a40:	f840 3b04 	str.w	r3, [r0], #4
 8003a44:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a48:	f840 3b04 	str.w	r3, [r0], #4
 8003a4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a50:	f840 3b04 	str.w	r3, [r0], #4
 8003a54:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a58:	f840 3b04 	str.w	r3, [r0], #4
 8003a5c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a60:	f840 3b04 	str.w	r3, [r0], #4
 8003a64:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a68:	f840 3b04 	str.w	r3, [r0], #4
 8003a6c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a70:	f840 3b04 	str.w	r3, [r0], #4
 8003a74:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a78:	f840 3b04 	str.w	r3, [r0], #4
 8003a7c:	3a40      	subs	r2, #64	; 0x40
 8003a7e:	d2bd      	bcs.n	80039fc <memcpy+0x10>
 8003a80:	3230      	adds	r2, #48	; 0x30
 8003a82:	d311      	bcc.n	8003aa8 <memcpy+0xbc>
 8003a84:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a88:	f840 3b04 	str.w	r3, [r0], #4
 8003a8c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a90:	f840 3b04 	str.w	r3, [r0], #4
 8003a94:	f851 3b04 	ldr.w	r3, [r1], #4
 8003a98:	f840 3b04 	str.w	r3, [r0], #4
 8003a9c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003aa0:	f840 3b04 	str.w	r3, [r0], #4
 8003aa4:	3a10      	subs	r2, #16
 8003aa6:	d2ed      	bcs.n	8003a84 <memcpy+0x98>
 8003aa8:	320c      	adds	r2, #12
 8003aaa:	d305      	bcc.n	8003ab8 <memcpy+0xcc>
 8003aac:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ab0:	f840 3b04 	str.w	r3, [r0], #4
 8003ab4:	3a04      	subs	r2, #4
 8003ab6:	d2f9      	bcs.n	8003aac <memcpy+0xc0>
 8003ab8:	3204      	adds	r2, #4
 8003aba:	d008      	beq.n	8003ace <memcpy+0xe2>
 8003abc:	07d2      	lsls	r2, r2, #31
 8003abe:	bf1c      	itt	ne
 8003ac0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003ac4:	f800 3b01 	strbne.w	r3, [r0], #1
 8003ac8:	d301      	bcc.n	8003ace <memcpy+0xe2>
 8003aca:	880b      	ldrh	r3, [r1, #0]
 8003acc:	8003      	strh	r3, [r0, #0]
 8003ace:	4660      	mov	r0, ip
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	2a08      	cmp	r2, #8
 8003ad6:	d313      	bcc.n	8003b00 <memcpy+0x114>
 8003ad8:	078b      	lsls	r3, r1, #30
 8003ada:	d08d      	beq.n	80039f8 <memcpy+0xc>
 8003adc:	f010 0303 	ands.w	r3, r0, #3
 8003ae0:	d08a      	beq.n	80039f8 <memcpy+0xc>
 8003ae2:	f1c3 0304 	rsb	r3, r3, #4
 8003ae6:	1ad2      	subs	r2, r2, r3
 8003ae8:	07db      	lsls	r3, r3, #31
 8003aea:	bf1c      	itt	ne
 8003aec:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003af0:	f800 3b01 	strbne.w	r3, [r0], #1
 8003af4:	d380      	bcc.n	80039f8 <memcpy+0xc>
 8003af6:	f831 3b02 	ldrh.w	r3, [r1], #2
 8003afa:	f820 3b02 	strh.w	r3, [r0], #2
 8003afe:	e77b      	b.n	80039f8 <memcpy+0xc>
 8003b00:	3a04      	subs	r2, #4
 8003b02:	d3d9      	bcc.n	8003ab8 <memcpy+0xcc>
 8003b04:	3a01      	subs	r2, #1
 8003b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b0a:	f800 3b01 	strb.w	r3, [r0], #1
 8003b0e:	d2f9      	bcs.n	8003b04 <memcpy+0x118>
 8003b10:	780b      	ldrb	r3, [r1, #0]
 8003b12:	7003      	strb	r3, [r0, #0]
 8003b14:	784b      	ldrb	r3, [r1, #1]
 8003b16:	7043      	strb	r3, [r0, #1]
 8003b18:	788b      	ldrb	r3, [r1, #2]
 8003b1a:	7083      	strb	r3, [r0, #2]
 8003b1c:	4660      	mov	r0, ip
 8003b1e:	4770      	bx	lr

08003b20 <memset>:
 8003b20:	b470      	push	{r4, r5, r6}
 8003b22:	0784      	lsls	r4, r0, #30
 8003b24:	d046      	beq.n	8003bb4 <memset+0x94>
 8003b26:	1e54      	subs	r4, r2, #1
 8003b28:	2a00      	cmp	r2, #0
 8003b2a:	d041      	beq.n	8003bb0 <memset+0x90>
 8003b2c:	b2cd      	uxtb	r5, r1
 8003b2e:	4603      	mov	r3, r0
 8003b30:	e002      	b.n	8003b38 <memset+0x18>
 8003b32:	1e62      	subs	r2, r4, #1
 8003b34:	b3e4      	cbz	r4, 8003bb0 <memset+0x90>
 8003b36:	4614      	mov	r4, r2
 8003b38:	f803 5b01 	strb.w	r5, [r3], #1
 8003b3c:	079a      	lsls	r2, r3, #30
 8003b3e:	d1f8      	bne.n	8003b32 <memset+0x12>
 8003b40:	2c03      	cmp	r4, #3
 8003b42:	d92e      	bls.n	8003ba2 <memset+0x82>
 8003b44:	b2cd      	uxtb	r5, r1
 8003b46:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003b4a:	2c0f      	cmp	r4, #15
 8003b4c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003b50:	d919      	bls.n	8003b86 <memset+0x66>
 8003b52:	f103 0210 	add.w	r2, r3, #16
 8003b56:	4626      	mov	r6, r4
 8003b58:	3e10      	subs	r6, #16
 8003b5a:	2e0f      	cmp	r6, #15
 8003b5c:	f842 5c10 	str.w	r5, [r2, #-16]
 8003b60:	f842 5c0c 	str.w	r5, [r2, #-12]
 8003b64:	f842 5c08 	str.w	r5, [r2, #-8]
 8003b68:	f842 5c04 	str.w	r5, [r2, #-4]
 8003b6c:	f102 0210 	add.w	r2, r2, #16
 8003b70:	d8f2      	bhi.n	8003b58 <memset+0x38>
 8003b72:	f1a4 0210 	sub.w	r2, r4, #16
 8003b76:	f022 020f 	bic.w	r2, r2, #15
 8003b7a:	f004 040f 	and.w	r4, r4, #15
 8003b7e:	3210      	adds	r2, #16
 8003b80:	2c03      	cmp	r4, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	d90d      	bls.n	8003ba2 <memset+0x82>
 8003b86:	461e      	mov	r6, r3
 8003b88:	4622      	mov	r2, r4
 8003b8a:	3a04      	subs	r2, #4
 8003b8c:	2a03      	cmp	r2, #3
 8003b8e:	f846 5b04 	str.w	r5, [r6], #4
 8003b92:	d8fa      	bhi.n	8003b8a <memset+0x6a>
 8003b94:	1f22      	subs	r2, r4, #4
 8003b96:	f022 0203 	bic.w	r2, r2, #3
 8003b9a:	3204      	adds	r2, #4
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f004 0403 	and.w	r4, r4, #3
 8003ba2:	b12c      	cbz	r4, 8003bb0 <memset+0x90>
 8003ba4:	b2c9      	uxtb	r1, r1
 8003ba6:	441c      	add	r4, r3
 8003ba8:	f803 1b01 	strb.w	r1, [r3], #1
 8003bac:	42a3      	cmp	r3, r4
 8003bae:	d1fb      	bne.n	8003ba8 <memset+0x88>
 8003bb0:	bc70      	pop	{r4, r5, r6}
 8003bb2:	4770      	bx	lr
 8003bb4:	4614      	mov	r4, r2
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	e7c2      	b.n	8003b40 <memset+0x20>
 8003bba:	bf00      	nop

08003bbc <printf>:
 8003bbc:	b40f      	push	{r0, r1, r2, r3}
 8003bbe:	b500      	push	{lr}
 8003bc0:	4907      	ldr	r1, [pc, #28]	; (8003be0 <printf+0x24>)
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	ab04      	add	r3, sp, #16
 8003bc6:	6808      	ldr	r0, [r1, #0]
 8003bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bcc:	6881      	ldr	r1, [r0, #8]
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	f002 fc7a 	bl	80064c8 <_vfprintf_r>
 8003bd4:	b003      	add	sp, #12
 8003bd6:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bda:	b004      	add	sp, #16
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000468 	.word	0x20000468

08003be4 <_puts_r>:
 8003be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be6:	4605      	mov	r5, r0
 8003be8:	b089      	sub	sp, #36	; 0x24
 8003bea:	4608      	mov	r0, r1
 8003bec:	460c      	mov	r4, r1
 8003bee:	f000 f867 	bl	8003cc0 <strlen>
 8003bf2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003bf4:	4f14      	ldr	r7, [pc, #80]	; (8003c48 <_puts_r+0x64>)
 8003bf6:	9404      	str	r4, [sp, #16]
 8003bf8:	2601      	movs	r6, #1
 8003bfa:	1c44      	adds	r4, r0, #1
 8003bfc:	a904      	add	r1, sp, #16
 8003bfe:	2202      	movs	r2, #2
 8003c00:	9403      	str	r4, [sp, #12]
 8003c02:	9005      	str	r0, [sp, #20]
 8003c04:	68ac      	ldr	r4, [r5, #8]
 8003c06:	9706      	str	r7, [sp, #24]
 8003c08:	9607      	str	r6, [sp, #28]
 8003c0a:	9101      	str	r1, [sp, #4]
 8003c0c:	9202      	str	r2, [sp, #8]
 8003c0e:	b1b3      	cbz	r3, 8003c3e <_puts_r+0x5a>
 8003c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c14:	049a      	lsls	r2, r3, #18
 8003c16:	d406      	bmi.n	8003c26 <_puts_r+0x42>
 8003c18:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c22:	81a3      	strh	r3, [r4, #12]
 8003c24:	6662      	str	r2, [r4, #100]	; 0x64
 8003c26:	4621      	mov	r1, r4
 8003c28:	4628      	mov	r0, r5
 8003c2a:	aa01      	add	r2, sp, #4
 8003c2c:	f005 faca 	bl	80091c4 <__sfvwrite_r>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	bf14      	ite	ne
 8003c34:	f04f 30ff 	movne.w	r0, #4294967295
 8003c38:	200a      	moveq	r0, #10
 8003c3a:	b009      	add	sp, #36	; 0x24
 8003c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f005 f980 	bl	8008f44 <__sinit>
 8003c44:	e7e4      	b.n	8003c10 <_puts_r+0x2c>
 8003c46:	bf00      	nop
 8003c48:	0800bd28 	.word	0x0800bd28

08003c4c <puts>:
 8003c4c:	4b02      	ldr	r3, [pc, #8]	; (8003c58 <puts+0xc>)
 8003c4e:	4601      	mov	r1, r0
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	f7ff bfc7 	b.w	8003be4 <_puts_r>
 8003c56:	bf00      	nop
 8003c58:	20000468 	.word	0x20000468

08003c5c <sprintf>:
 8003c5c:	b40e      	push	{r1, r2, r3}
 8003c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c60:	b09c      	sub	sp, #112	; 0x70
 8003c62:	ab21      	add	r3, sp, #132	; 0x84
 8003c64:	490f      	ldr	r1, [pc, #60]	; (8003ca4 <sprintf+0x48>)
 8003c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	4605      	mov	r5, r0
 8003c6e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8003c72:	6808      	ldr	r0, [r1, #0]
 8003c74:	9502      	str	r5, [sp, #8]
 8003c76:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003c7a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8003c7e:	a902      	add	r1, sp, #8
 8003c80:	9506      	str	r5, [sp, #24]
 8003c82:	f8ad 7014 	strh.w	r7, [sp, #20]
 8003c86:	9404      	str	r4, [sp, #16]
 8003c88:	9407      	str	r4, [sp, #28]
 8003c8a:	f8ad 6016 	strh.w	r6, [sp, #22]
 8003c8e:	f001 f89f 	bl	8004dd0 <_svfprintf_r>
 8003c92:	9b02      	ldr	r3, [sp, #8]
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	b01c      	add	sp, #112	; 0x70
 8003c9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003c9e:	b003      	add	sp, #12
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	20000468 	.word	0x20000468
	...

08003cc0 <strlen>:
 8003cc0:	f890 f000 	pld	[r0]
 8003cc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8003cc8:	f020 0107 	bic.w	r1, r0, #7
 8003ccc:	f06f 0c00 	mvn.w	ip, #0
 8003cd0:	f010 0407 	ands.w	r4, r0, #7
 8003cd4:	f891 f020 	pld	[r1, #32]
 8003cd8:	f040 8049 	bne.w	8003d6e <strlen+0xae>
 8003cdc:	f04f 0400 	mov.w	r4, #0
 8003ce0:	f06f 0007 	mvn.w	r0, #7
 8003ce4:	e9d1 2300 	ldrd	r2, r3, [r1]
 8003ce8:	f891 f040 	pld	[r1, #64]	; 0x40
 8003cec:	f100 0008 	add.w	r0, r0, #8
 8003cf0:	fa82 f24c 	uadd8	r2, r2, ip
 8003cf4:	faa4 f28c 	sel	r2, r4, ip
 8003cf8:	fa83 f34c 	uadd8	r3, r3, ip
 8003cfc:	faa2 f38c 	sel	r3, r2, ip
 8003d00:	bb4b      	cbnz	r3, 8003d56 <strlen+0x96>
 8003d02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8003d06:	fa82 f24c 	uadd8	r2, r2, ip
 8003d0a:	f100 0008 	add.w	r0, r0, #8
 8003d0e:	faa4 f28c 	sel	r2, r4, ip
 8003d12:	fa83 f34c 	uadd8	r3, r3, ip
 8003d16:	faa2 f38c 	sel	r3, r2, ip
 8003d1a:	b9e3      	cbnz	r3, 8003d56 <strlen+0x96>
 8003d1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8003d20:	fa82 f24c 	uadd8	r2, r2, ip
 8003d24:	f100 0008 	add.w	r0, r0, #8
 8003d28:	faa4 f28c 	sel	r2, r4, ip
 8003d2c:	fa83 f34c 	uadd8	r3, r3, ip
 8003d30:	faa2 f38c 	sel	r3, r2, ip
 8003d34:	b97b      	cbnz	r3, 8003d56 <strlen+0x96>
 8003d36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8003d3a:	f101 0120 	add.w	r1, r1, #32
 8003d3e:	fa82 f24c 	uadd8	r2, r2, ip
 8003d42:	f100 0008 	add.w	r0, r0, #8
 8003d46:	faa4 f28c 	sel	r2, r4, ip
 8003d4a:	fa83 f34c 	uadd8	r3, r3, ip
 8003d4e:	faa2 f38c 	sel	r3, r2, ip
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0c6      	beq.n	8003ce4 <strlen+0x24>
 8003d56:	2a00      	cmp	r2, #0
 8003d58:	bf04      	itt	eq
 8003d5a:	3004      	addeq	r0, #4
 8003d5c:	461a      	moveq	r2, r3
 8003d5e:	ba12      	rev	r2, r2
 8003d60:	fab2 f282 	clz	r2, r2
 8003d64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8003d68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8003d6c:	4770      	bx	lr
 8003d6e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8003d72:	f004 0503 	and.w	r5, r4, #3
 8003d76:	f1c4 0000 	rsb	r0, r4, #0
 8003d7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8003d7e:	f014 0f04 	tst.w	r4, #4
 8003d82:	f891 f040 	pld	[r1, #64]	; 0x40
 8003d86:	fa0c f505 	lsl.w	r5, ip, r5
 8003d8a:	ea62 0205 	orn	r2, r2, r5
 8003d8e:	bf1c      	itt	ne
 8003d90:	ea63 0305 	ornne	r3, r3, r5
 8003d94:	4662      	movne	r2, ip
 8003d96:	f04f 0400 	mov.w	r4, #0
 8003d9a:	e7a9      	b.n	8003cf0 <strlen+0x30>

08003d9c <strncmp>:
 8003d9c:	2a00      	cmp	r2, #0
 8003d9e:	d041      	beq.n	8003e24 <strncmp+0x88>
 8003da0:	ea40 0301 	orr.w	r3, r0, r1
 8003da4:	f013 0303 	ands.w	r3, r3, #3
 8003da8:	b4f0      	push	{r4, r5, r6, r7}
 8003daa:	d125      	bne.n	8003df8 <strncmp+0x5c>
 8003dac:	2a03      	cmp	r2, #3
 8003dae:	d923      	bls.n	8003df8 <strncmp+0x5c>
 8003db0:	6804      	ldr	r4, [r0, #0]
 8003db2:	680d      	ldr	r5, [r1, #0]
 8003db4:	42ac      	cmp	r4, r5
 8003db6:	d11f      	bne.n	8003df8 <strncmp+0x5c>
 8003db8:	3a04      	subs	r2, #4
 8003dba:	d035      	beq.n	8003e28 <strncmp+0x8c>
 8003dbc:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
 8003dc0:	ea25 0404 	bic.w	r4, r5, r4
 8003dc4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8003dc8:	d131      	bne.n	8003e2e <strncmp+0x92>
 8003dca:	1d07      	adds	r7, r0, #4
 8003dcc:	1d0d      	adds	r5, r1, #4
 8003dce:	e00d      	b.n	8003dec <strncmp+0x50>
 8003dd0:	f857 3b04 	ldr.w	r3, [r7], #4
 8003dd4:	680e      	ldr	r6, [r1, #0]
 8003dd6:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
 8003dda:	42b3      	cmp	r3, r6
 8003ddc:	ea24 0403 	bic.w	r4, r4, r3
 8003de0:	d10a      	bne.n	8003df8 <strncmp+0x5c>
 8003de2:	3a04      	subs	r2, #4
 8003de4:	d020      	beq.n	8003e28 <strncmp+0x8c>
 8003de6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 8003dea:	d123      	bne.n	8003e34 <strncmp+0x98>
 8003dec:	2a03      	cmp	r2, #3
 8003dee:	4629      	mov	r1, r5
 8003df0:	4638      	mov	r0, r7
 8003df2:	f105 0504 	add.w	r5, r5, #4
 8003df6:	d8eb      	bhi.n	8003dd0 <strncmp+0x34>
 8003df8:	7803      	ldrb	r3, [r0, #0]
 8003dfa:	780c      	ldrb	r4, [r1, #0]
 8003dfc:	429c      	cmp	r4, r3
 8003dfe:	f102 32ff 	add.w	r2, r2, #4294967295
 8003e02:	d10c      	bne.n	8003e1e <strncmp+0x82>
 8003e04:	b182      	cbz	r2, 8003e28 <strncmp+0x8c>
 8003e06:	b914      	cbnz	r4, 8003e0e <strncmp+0x72>
 8003e08:	e016      	b.n	8003e38 <strncmp+0x9c>
 8003e0a:	b16a      	cbz	r2, 8003e28 <strncmp+0x8c>
 8003e0c:	b17b      	cbz	r3, 8003e2e <strncmp+0x92>
 8003e0e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003e12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003e16:	42a3      	cmp	r3, r4
 8003e18:	f102 32ff 	add.w	r2, r2, #4294967295
 8003e1c:	d0f5      	beq.n	8003e0a <strncmp+0x6e>
 8003e1e:	1b18      	subs	r0, r3, r4
 8003e20:	bcf0      	pop	{r4, r5, r6, r7}
 8003e22:	4770      	bx	lr
 8003e24:	4610      	mov	r0, r2
 8003e26:	4770      	bx	lr
 8003e28:	4610      	mov	r0, r2
 8003e2a:	bcf0      	pop	{r4, r5, r6, r7}
 8003e2c:	4770      	bx	lr
 8003e2e:	4618      	mov	r0, r3
 8003e30:	bcf0      	pop	{r4, r5, r6, r7}
 8003e32:	4770      	bx	lr
 8003e34:	2000      	movs	r0, #0
 8003e36:	e7f3      	b.n	8003e20 <strncmp+0x84>
 8003e38:	4620      	mov	r0, r4
 8003e3a:	e7f1      	b.n	8003e20 <strncmp+0x84>

08003e3c <strncpy>:
 8003e3c:	ea40 0301 	orr.w	r3, r0, r1
 8003e40:	079b      	lsls	r3, r3, #30
 8003e42:	b470      	push	{r4, r5, r6}
 8003e44:	d12b      	bne.n	8003e9e <strncpy+0x62>
 8003e46:	2a03      	cmp	r2, #3
 8003e48:	d929      	bls.n	8003e9e <strncpy+0x62>
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4621      	mov	r1, r4
 8003e50:	f854 6b04 	ldr.w	r6, [r4], #4
 8003e54:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 8003e58:	ea25 0506 	bic.w	r5, r5, r6
 8003e5c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 8003e60:	d106      	bne.n	8003e70 <strncpy+0x34>
 8003e62:	3a04      	subs	r2, #4
 8003e64:	2a03      	cmp	r2, #3
 8003e66:	f843 6b04 	str.w	r6, [r3], #4
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	d8ef      	bhi.n	8003e4e <strncpy+0x12>
 8003e6e:	b1a2      	cbz	r2, 8003e9a <strncpy+0x5e>
 8003e70:	780c      	ldrb	r4, [r1, #0]
 8003e72:	701c      	strb	r4, [r3, #0]
 8003e74:	3a01      	subs	r2, #1
 8003e76:	3301      	adds	r3, #1
 8003e78:	3101      	adds	r1, #1
 8003e7a:	b13c      	cbz	r4, 8003e8c <strncpy+0x50>
 8003e7c:	b16a      	cbz	r2, 8003e9a <strncpy+0x5e>
 8003e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e82:	f803 4b01 	strb.w	r4, [r3], #1
 8003e86:	3a01      	subs	r2, #1
 8003e88:	2c00      	cmp	r4, #0
 8003e8a:	d1f7      	bne.n	8003e7c <strncpy+0x40>
 8003e8c:	b12a      	cbz	r2, 8003e9a <strncpy+0x5e>
 8003e8e:	441a      	add	r2, r3
 8003e90:	2100      	movs	r1, #0
 8003e92:	f803 1b01 	strb.w	r1, [r3], #1
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d1fb      	bne.n	8003e92 <strncpy+0x56>
 8003e9a:	bc70      	pop	{r4, r5, r6}
 8003e9c:	4770      	bx	lr
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	e7e5      	b.n	8003e6e <strncpy+0x32>
 8003ea2:	bf00      	nop

08003ea4 <sulp>:
 8003ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea8:	460f      	mov	r7, r1
 8003eaa:	4690      	mov	r8, r2
 8003eac:	f006 fe08 	bl	800aac0 <__ulp>
 8003eb0:	4604      	mov	r4, r0
 8003eb2:	460d      	mov	r5, r1
 8003eb4:	f1b8 0f00 	cmp.w	r8, #0
 8003eb8:	d011      	beq.n	8003ede <sulp+0x3a>
 8003eba:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003ebe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	dd0b      	ble.n	8003ede <sulp+0x3a>
 8003ec6:	051b      	lsls	r3, r3, #20
 8003ec8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003ecc:	2400      	movs	r4, #0
 8003ece:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003ed2:	4622      	mov	r2, r4
 8003ed4:	462b      	mov	r3, r5
 8003ed6:	f7ff fa8b 	bl	80033f0 <__aeabi_dmul>
 8003eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ede:	4620      	mov	r0, r4
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ee6:	bf00      	nop

08003ee8 <_strtod_l>:
 8003ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eec:	461d      	mov	r5, r3
 8003eee:	b0a1      	sub	sp, #132	; 0x84
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	4683      	mov	fp, r0
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	460e      	mov	r6, r1
 8003ef8:	9206      	str	r2, [sp, #24]
 8003efa:	931c      	str	r3, [sp, #112]	; 0x70
 8003efc:	f005 fed0 	bl	8009ca0 <__localeconv_l>
 8003f00:	2400      	movs	r4, #0
 8003f02:	2300      	movs	r3, #0
 8003f04:	4682      	mov	sl, r0
 8003f06:	6800      	ldr	r0, [r0, #0]
 8003f08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003f0c:	f7ff fed8 	bl	8003cc0 <strlen>
 8003f10:	961b      	str	r6, [sp, #108]	; 0x6c
 8003f12:	4681      	mov	r9, r0
 8003f14:	4632      	mov	r2, r6
 8003f16:	4614      	mov	r4, r2
 8003f18:	f812 7b01 	ldrb.w	r7, [r2], #1
 8003f1c:	2f2d      	cmp	r7, #45	; 0x2d
 8003f1e:	f200 80af 	bhi.w	8004080 <_strtod_l+0x198>
 8003f22:	e8df f007 	tbb	[pc, r7]
 8003f26:	ad17      	.short	0xad17
 8003f28:	adadadad 	.word	0xadadadad
 8003f2c:	81adadad 	.word	0x81adadad
 8003f30:	81818181 	.word	0x81818181
 8003f34:	adadadad 	.word	0xadadadad
 8003f38:	adadadad 	.word	0xadadadad
 8003f3c:	adadadad 	.word	0xadadadad
 8003f40:	adadadad 	.word	0xadadadad
 8003f44:	ad81adad 	.word	0xad81adad
 8003f48:	adadadad 	.word	0xadadadad
 8003f4c:	adadadad 	.word	0xadadadad
 8003f50:	7ead2bad 	.word	0x7ead2bad
 8003f54:	9b06      	ldr	r3, [sp, #24]
 8003f56:	f04f 0900 	mov.w	r9, #0
 8003f5a:	f04f 0a00 	mov.w	sl, #0
 8003f5e:	b143      	cbz	r3, 8003f72 <_strtod_l+0x8a>
 8003f60:	2300      	movs	r3, #0
 8003f62:	9307      	str	r3, [sp, #28]
 8003f64:	9b06      	ldr	r3, [sp, #24]
 8003f66:	601e      	str	r6, [r3, #0]
 8003f68:	9b07      	ldr	r3, [sp, #28]
 8003f6a:	b113      	cbz	r3, 8003f72 <_strtod_l+0x8a>
 8003f6c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8003f70:	469a      	mov	sl, r3
 8003f72:	4648      	mov	r0, r9
 8003f74:	4651      	mov	r1, sl
 8003f76:	b021      	add	sp, #132	; 0x84
 8003f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	9307      	str	r3, [sp, #28]
 8003f80:	1c62      	adds	r2, r4, #1
 8003f82:	921b      	str	r2, [sp, #108]	; 0x6c
 8003f84:	7867      	ldrb	r7, [r4, #1]
 8003f86:	2f00      	cmp	r7, #0
 8003f88:	d0e4      	beq.n	8003f54 <_strtod_l+0x6c>
 8003f8a:	2f30      	cmp	r7, #48	; 0x30
 8003f8c:	4614      	mov	r4, r2
 8003f8e:	d07b      	beq.n	8004088 <_strtod_l+0x1a0>
 8003f90:	2300      	movs	r3, #0
 8003f92:	9408      	str	r4, [sp, #32]
 8003f94:	930a      	str	r3, [sp, #40]	; 0x28
 8003f96:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8003f9a:	2b09      	cmp	r3, #9
 8003f9c:	f200 83e7 	bhi.w	800476e <_strtod_l+0x886>
 8003fa0:	f04f 0800 	mov.w	r8, #0
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	4645      	mov	r5, r8
 8003fa8:	4644      	mov	r4, r8
 8003faa:	2c08      	cmp	r4, #8
 8003fac:	bfc8      	it	gt
 8003fae:	eb08 0888 	addgt.w	r8, r8, r8, lsl #2
 8003fb2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8003fb6:	f100 0001 	add.w	r0, r0, #1
 8003fba:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8003fbe:	901b      	str	r0, [sp, #108]	; 0x6c
 8003fc0:	bfc4      	itt	gt
 8003fc2:	eb07 0748 	addgt.w	r7, r7, r8, lsl #1
 8003fc6:	f1a7 0830 	subgt.w	r8, r7, #48	; 0x30
 8003fca:	7807      	ldrb	r7, [r0, #0]
 8003fcc:	bfd8      	it	le
 8003fce:	f1a3 0530 	suble.w	r5, r3, #48	; 0x30
 8003fd2:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8003fd6:	2b09      	cmp	r3, #9
 8003fd8:	f104 0401 	add.w	r4, r4, #1
 8003fdc:	d9e5      	bls.n	8003faa <_strtod_l+0xc2>
 8003fde:	f8da 1000 	ldr.w	r1, [sl]
 8003fe2:	464a      	mov	r2, r9
 8003fe4:	f7ff feda 	bl	8003d9c <strncmp>
 8003fe8:	b300      	cbz	r0, 800402c <_strtod_l+0x144>
 8003fea:	2000      	movs	r0, #0
 8003fec:	463b      	mov	r3, r7
 8003fee:	4681      	mov	r9, r0
 8003ff0:	4607      	mov	r7, r0
 8003ff2:	46a2      	mov	sl, r4
 8003ff4:	2b65      	cmp	r3, #101	; 0x65
 8003ff6:	f000 80b2 	beq.w	800415e <_strtod_l+0x276>
 8003ffa:	2b45      	cmp	r3, #69	; 0x45
 8003ffc:	f000 80af 	beq.w	800415e <_strtod_l+0x276>
 8004000:	2200      	movs	r2, #0
 8004002:	2c00      	cmp	r4, #0
 8004004:	d152      	bne.n	80040ac <_strtod_l+0x1c4>
 8004006:	b918      	cbnz	r0, 8004010 <_strtod_l+0x128>
 8004008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800400a:	2a00      	cmp	r2, #0
 800400c:	f000 82d3 	beq.w	80045b6 <_strtod_l+0x6ce>
 8004010:	f04f 0900 	mov.w	r9, #0
 8004014:	f04f 0a00 	mov.w	sl, #0
 8004018:	9b06      	ldr	r3, [sp, #24]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0a4      	beq.n	8003f68 <_strtod_l+0x80>
 800401e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004020:	e7a0      	b.n	8003f64 <_strtod_l+0x7c>
 8004022:	2301      	movs	r3, #1
 8004024:	9307      	str	r3, [sp, #28]
 8004026:	e7ab      	b.n	8003f80 <_strtod_l+0x98>
 8004028:	921b      	str	r2, [sp, #108]	; 0x6c
 800402a:	e774      	b.n	8003f16 <_strtod_l+0x2e>
 800402c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800402e:	eb03 0209 	add.w	r2, r3, r9
 8004032:	921b      	str	r2, [sp, #108]	; 0x6c
 8004034:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004038:	4607      	mov	r7, r0
 800403a:	46a2      	mov	sl, r4
 800403c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004040:	2a09      	cmp	r2, #9
 8004042:	f200 827b 	bhi.w	800453c <_strtod_l+0x654>
 8004046:	1c41      	adds	r1, r0, #1
 8004048:	4613      	mov	r3, r2
 800404a:	2a00      	cmp	r2, #0
 800404c:	f000 8687 	beq.w	8004d5e <_strtod_l+0xe76>
 8004050:	2901      	cmp	r1, #1
 8004052:	440f      	add	r7, r1
 8004054:	bf18      	it	ne
 8004056:	1900      	addne	r0, r0, r4
 8004058:	d105      	bne.n	8004066 <_strtod_l+0x17e>
 800405a:	f000 be7c 	b.w	8004d56 <_strtod_l+0xe6e>
 800405e:	004d      	lsls	r5, r1, #1
 8004060:	4284      	cmp	r4, r0
 8004062:	f000 84c0 	beq.w	80049e6 <_strtod_l+0xafe>
 8004066:	3401      	adds	r4, #1
 8004068:	1e61      	subs	r1, r4, #1
 800406a:	2908      	cmp	r1, #8
 800406c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8004070:	ddf5      	ble.n	800405e <_strtod_l+0x176>
 8004072:	2c10      	cmp	r4, #16
 8004074:	bfdc      	itt	le
 8004076:	eb08 0888 	addle.w	r8, r8, r8, lsl #2
 800407a:	ea4f 0848 	movle.w	r8, r8, lsl #1
 800407e:	e7ef      	b.n	8004060 <_strtod_l+0x178>
 8004080:	2300      	movs	r3, #0
 8004082:	2f30      	cmp	r7, #48	; 0x30
 8004084:	9307      	str	r3, [sp, #28]
 8004086:	d183      	bne.n	8003f90 <_strtod_l+0xa8>
 8004088:	7863      	ldrb	r3, [r4, #1]
 800408a:	2b58      	cmp	r3, #88	; 0x58
 800408c:	f000 8353 	beq.w	8004736 <_strtod_l+0x84e>
 8004090:	2b78      	cmp	r3, #120	; 0x78
 8004092:	f000 8350 	beq.w	8004736 <_strtod_l+0x84e>
 8004096:	3401      	adds	r4, #1
 8004098:	941b      	str	r4, [sp, #108]	; 0x6c
 800409a:	7827      	ldrb	r7, [r4, #0]
 800409c:	2f30      	cmp	r7, #48	; 0x30
 800409e:	d0fa      	beq.n	8004096 <_strtod_l+0x1ae>
 80040a0:	2f00      	cmp	r7, #0
 80040a2:	d0b5      	beq.n	8004010 <_strtod_l+0x128>
 80040a4:	2301      	movs	r3, #1
 80040a6:	9408      	str	r4, [sp, #32]
 80040a8:	930a      	str	r3, [sp, #40]	; 0x28
 80040aa:	e774      	b.n	8003f96 <_strtod_l+0xae>
 80040ac:	2c10      	cmp	r4, #16
 80040ae:	eba2 0307 	sub.w	r3, r2, r7
 80040b2:	4628      	mov	r0, r5
 80040b4:	46a1      	mov	r9, r4
 80040b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80040b8:	bfa8      	it	ge
 80040ba:	f04f 0910 	movge.w	r9, #16
 80040be:	f7ff f921 	bl	8003304 <__aeabi_ui2d>
 80040c2:	f1ba 0f00 	cmp.w	sl, #0
 80040c6:	bf08      	it	eq
 80040c8:	46a2      	moveq	sl, r4
 80040ca:	f1b9 0f09 	cmp.w	r9, #9
 80040ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040d2:	dd13      	ble.n	80040fc <_strtod_l+0x214>
 80040d4:	4b49      	ldr	r3, [pc, #292]	; (80041fc <_strtod_l+0x314>)
 80040d6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80040da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80040de:	f7ff f987 	bl	80033f0 <__aeabi_dmul>
 80040e2:	4606      	mov	r6, r0
 80040e4:	4640      	mov	r0, r8
 80040e6:	460f      	mov	r7, r1
 80040e8:	f7ff f90c 	bl	8003304 <__aeabi_ui2d>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4630      	mov	r0, r6
 80040f2:	4639      	mov	r1, r7
 80040f4:	f7fe ffca 	bl	800308c <__adddf3>
 80040f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80040fc:	2c0f      	cmp	r4, #15
 80040fe:	f300 8085 	bgt.w	800420c <_strtod_l+0x324>
 8004102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d027      	beq.n	8004158 <_strtod_l+0x270>
 8004108:	f340 8507 	ble.w	8004b1a <_strtod_l+0xc32>
 800410c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800410e:	2b16      	cmp	r3, #22
 8004110:	f300 8483 	bgt.w	8004a1a <_strtod_l+0xb32>
 8004114:	4f39      	ldr	r7, [pc, #228]	; (80041fc <_strtod_l+0x314>)
 8004116:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 800411a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800411e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004122:	f7ff f965 	bl	80033f0 <__aeabi_dmul>
 8004126:	4681      	mov	r9, r0
 8004128:	468a      	mov	sl, r1
 800412a:	e775      	b.n	8004018 <_strtod_l+0x130>
 800412c:	a81b      	add	r0, sp, #108	; 0x6c
 800412e:	4934      	ldr	r1, [pc, #208]	; (8004200 <_strtod_l+0x318>)
 8004130:	f005 fcd0 	bl	8009ad4 <__match>
 8004134:	2800      	cmp	r0, #0
 8004136:	f43f af0d 	beq.w	8003f54 <_strtod_l+0x6c>
 800413a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800413c:	4931      	ldr	r1, [pc, #196]	; (8004204 <_strtod_l+0x31c>)
 800413e:	3b01      	subs	r3, #1
 8004140:	a81b      	add	r0, sp, #108	; 0x6c
 8004142:	931b      	str	r3, [sp, #108]	; 0x6c
 8004144:	f005 fcc6 	bl	8009ad4 <__match>
 8004148:	b910      	cbnz	r0, 8004150 <_strtod_l+0x268>
 800414a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800414c:	3301      	adds	r3, #1
 800414e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004150:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <_strtod_l+0x320>)
 8004152:	9305      	str	r3, [sp, #20]
 8004154:	2300      	movs	r3, #0
 8004156:	9304      	str	r3, [sp, #16]
 8004158:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
 800415c:	e75c      	b.n	8004018 <_strtod_l+0x130>
 800415e:	2c00      	cmp	r4, #0
 8004160:	f000 81e0 	beq.w	8004524 <_strtod_l+0x63c>
 8004164:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004166:	1c73      	adds	r3, r6, #1
 8004168:	931b      	str	r3, [sp, #108]	; 0x6c
 800416a:	7873      	ldrb	r3, [r6, #1]
 800416c:	2b2b      	cmp	r3, #43	; 0x2b
 800416e:	f000 82df 	beq.w	8004730 <_strtod_l+0x848>
 8004172:	2b2d      	cmp	r3, #45	; 0x2d
 8004174:	f000 8217 	beq.w	80045a6 <_strtod_l+0x6be>
 8004178:	f04f 0c00 	mov.w	ip, #0
 800417c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004180:	2a09      	cmp	r2, #9
 8004182:	f200 82d2 	bhi.w	800472a <_strtod_l+0x842>
 8004186:	2b30      	cmp	r3, #48	; 0x30
 8004188:	d105      	bne.n	8004196 <_strtod_l+0x2ae>
 800418a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800418c:	3201      	adds	r2, #1
 800418e:	921b      	str	r2, [sp, #108]	; 0x6c
 8004190:	7813      	ldrb	r3, [r2, #0]
 8004192:	2b30      	cmp	r3, #48	; 0x30
 8004194:	d0fa      	beq.n	800418c <_strtod_l+0x2a4>
 8004196:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800419a:	2a08      	cmp	r2, #8
 800419c:	f63f af30 	bhi.w	8004000 <_strtod_l+0x118>
 80041a0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80041a2:	920c      	str	r2, [sp, #48]	; 0x30
 80041a4:	1c51      	adds	r1, r2, #1
 80041a6:	3b30      	subs	r3, #48	; 0x30
 80041a8:	911b      	str	r1, [sp, #108]	; 0x6c
 80041aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80041ac:	7853      	ldrb	r3, [r2, #1]
 80041ae:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80041b2:	f1be 0f09 	cmp.w	lr, #9
 80041b6:	d80f      	bhi.n	80041d8 <_strtod_l+0x2f0>
 80041b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80041ba:	3101      	adds	r1, #1
 80041bc:	911b      	str	r1, [sp, #108]	; 0x6c
 80041be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80041c2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80041c6:	780b      	ldrb	r3, [r1, #0]
 80041c8:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80041cc:	f1be 0f09 	cmp.w	lr, #9
 80041d0:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
 80041d4:	d9f1      	bls.n	80041ba <_strtod_l+0x2d2>
 80041d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80041d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041da:	1a89      	subs	r1, r1, r2
 80041dc:	2908      	cmp	r1, #8
 80041de:	f300 8413 	bgt.w	8004a08 <_strtod_l+0xb20>
 80041e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80041e4:	f644 611f 	movw	r1, #19999	; 0x4e1f
 80041e8:	428a      	cmp	r2, r1
 80041ea:	bfa8      	it	ge
 80041ec:	460a      	movge	r2, r1
 80041ee:	f1bc 0f00 	cmp.w	ip, #0
 80041f2:	f43f af06 	beq.w	8004002 <_strtod_l+0x11a>
 80041f6:	4252      	negs	r2, r2
 80041f8:	e703      	b.n	8004002 <_strtod_l+0x11a>
 80041fa:	bf00      	nop
 80041fc:	0800bf38 	.word	0x0800bf38
 8004200:	0800bd40 	.word	0x0800bd40
 8004204:	0800bd44 	.word	0x0800bd44
 8004208:	7ff00000 	.word	0x7ff00000
 800420c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800420e:	ebc9 0904 	rsb	r9, r9, r4
 8004212:	4499      	add	r9, r3
 8004214:	f1b9 0f00 	cmp.w	r9, #0
 8004218:	f340 838c 	ble.w	8004934 <_strtod_l+0xa4c>
 800421c:	f019 010f 	ands.w	r1, r9, #15
 8004220:	d00a      	beq.n	8004238 <_strtod_l+0x350>
 8004222:	4bb9      	ldr	r3, [pc, #740]	; (8004508 <_strtod_l+0x620>)
 8004224:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800422c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004230:	f7ff f8de 	bl	80033f0 <__aeabi_dmul>
 8004234:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004238:	f039 060f 	bics.w	r6, r9, #15
 800423c:	f040 8212 	bne.w	8004664 <_strtod_l+0x77c>
 8004240:	2300      	movs	r3, #0
 8004242:	930a      	str	r3, [sp, #40]	; 0x28
 8004244:	9500      	str	r5, [sp, #0]
 8004246:	4623      	mov	r3, r4
 8004248:	4652      	mov	r2, sl
 800424a:	9908      	ldr	r1, [sp, #32]
 800424c:	4658      	mov	r0, fp
 800424e:	f006 f9a7 	bl	800a5a0 <__s2b>
 8004252:	9012      	str	r0, [sp, #72]	; 0x48
 8004254:	2800      	cmp	r0, #0
 8004256:	f000 82e5 	beq.w	8004824 <_strtod_l+0x93c>
 800425a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800425c:	2100      	movs	r1, #0
 800425e:	2a00      	cmp	r2, #0
 8004260:	f1c2 0300 	rsb	r3, r2, #0
 8004264:	bfa8      	it	ge
 8004266:	460b      	movge	r3, r1
 8004268:	930c      	str	r3, [sp, #48]	; 0x30
 800426a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800426e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004270:	460f      	mov	r7, r1
 8004272:	468a      	mov	sl, r1
 8004274:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004276:	4658      	mov	r0, fp
 8004278:	6861      	ldr	r1, [r4, #4]
 800427a:	f006 f921 	bl	800a4c0 <_Balloc>
 800427e:	4606      	mov	r6, r0
 8004280:	2800      	cmp	r0, #0
 8004282:	f000 8337 	beq.w	80048f4 <_strtod_l+0xa0c>
 8004286:	6922      	ldr	r2, [r4, #16]
 8004288:	ed9d 7b04 	vldr	d7, [sp, #16]
 800428c:	3202      	adds	r2, #2
 800428e:	0092      	lsls	r2, r2, #2
 8004290:	f104 010c 	add.w	r1, r4, #12
 8004294:	300c      	adds	r0, #12
 8004296:	ed8d 7b08 	vstr	d7, [sp, #32]
 800429a:	f7ff fba7 	bl	80039ec <memcpy>
 800429e:	a81e      	add	r0, sp, #120	; 0x78
 80042a0:	a91d      	add	r1, sp, #116	; 0x74
 80042a2:	9001      	str	r0, [sp, #4]
 80042a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042a8:	9100      	str	r1, [sp, #0]
 80042aa:	4658      	mov	r0, fp
 80042ac:	f006 fc94 	bl	800abd8 <__d2b>
 80042b0:	901c      	str	r0, [sp, #112]	; 0x70
 80042b2:	2800      	cmp	r0, #0
 80042b4:	f000 8443 	beq.w	8004b3e <_strtod_l+0xc56>
 80042b8:	2101      	movs	r1, #1
 80042ba:	4658      	mov	r0, fp
 80042bc:	f006 fa0a 	bl	800a6d4 <__i2b>
 80042c0:	4607      	mov	r7, r0
 80042c2:	2800      	cmp	r0, #0
 80042c4:	f000 8316 	beq.w	80048f4 <_strtod_l+0xa0c>
 80042c8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80042ca:	2a00      	cmp	r2, #0
 80042cc:	f2c0 8132 	blt.w	8004534 <_strtod_l+0x64c>
 80042d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80042d4:	189d      	adds	r5, r3, r2
 80042d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80042d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80042da:	498c      	ldr	r1, [pc, #560]	; (800450c <_strtod_l+0x624>)
 80042dc:	1a12      	subs	r2, r2, r0
 80042de:	441a      	add	r2, r3
 80042e0:	3a01      	subs	r2, #1
 80042e2:	428a      	cmp	r2, r1
 80042e4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80042e8:	f280 80eb 	bge.w	80044c2 <_strtod_l+0x5da>
 80042ec:	1a89      	subs	r1, r1, r2
 80042ee:	291f      	cmp	r1, #31
 80042f0:	eba3 0301 	sub.w	r3, r3, r1
 80042f4:	f300 8125 	bgt.w	8004542 <_strtod_l+0x65a>
 80042f8:	2201      	movs	r2, #1
 80042fa:	408a      	lsls	r2, r1
 80042fc:	920e      	str	r2, [sp, #56]	; 0x38
 80042fe:	2200      	movs	r2, #0
 8004300:	9213      	str	r2, [sp, #76]	; 0x4c
 8004302:	eb05 0803 	add.w	r8, r5, r3
 8004306:	441c      	add	r4, r3
 8004308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800430a:	4545      	cmp	r5, r8
 800430c:	462a      	mov	r2, r5
 800430e:	441c      	add	r4, r3
 8004310:	bfa8      	it	ge
 8004312:	4642      	movge	r2, r8
 8004314:	42a2      	cmp	r2, r4
 8004316:	bfa8      	it	ge
 8004318:	4622      	movge	r2, r4
 800431a:	2a00      	cmp	r2, #0
 800431c:	dd03      	ble.n	8004326 <_strtod_l+0x43e>
 800431e:	ebc2 0808 	rsb	r8, r2, r8
 8004322:	1aa4      	subs	r4, r4, r2
 8004324:	1aad      	subs	r5, r5, r2
 8004326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004328:	b1bb      	cbz	r3, 800435a <_strtod_l+0x472>
 800432a:	4639      	mov	r1, r7
 800432c:	461a      	mov	r2, r3
 800432e:	4658      	mov	r0, fp
 8004330:	f006 fa72 	bl	800a818 <__pow5mult>
 8004334:	4607      	mov	r7, r0
 8004336:	2800      	cmp	r0, #0
 8004338:	f000 82dc 	beq.w	80048f4 <_strtod_l+0xa0c>
 800433c:	4601      	mov	r1, r0
 800433e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004340:	4658      	mov	r0, fp
 8004342:	f006 f9d1 	bl	800a6e8 <__multiply>
 8004346:	2800      	cmp	r0, #0
 8004348:	f000 82d4 	beq.w	80048f4 <_strtod_l+0xa0c>
 800434c:	900d      	str	r0, [sp, #52]	; 0x34
 800434e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004350:	4658      	mov	r0, fp
 8004352:	f006 f8db 	bl	800a50c <_Bfree>
 8004356:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004358:	921c      	str	r2, [sp, #112]	; 0x70
 800435a:	f1b8 0f00 	cmp.w	r8, #0
 800435e:	dd08      	ble.n	8004372 <_strtod_l+0x48a>
 8004360:	4642      	mov	r2, r8
 8004362:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004364:	4658      	mov	r0, fp
 8004366:	f006 faa7 	bl	800a8b8 <__lshift>
 800436a:	901c      	str	r0, [sp, #112]	; 0x70
 800436c:	2800      	cmp	r0, #0
 800436e:	f000 83e6 	beq.w	8004b3e <_strtod_l+0xc56>
 8004372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004374:	b143      	cbz	r3, 8004388 <_strtod_l+0x4a0>
 8004376:	4631      	mov	r1, r6
 8004378:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800437a:	4658      	mov	r0, fp
 800437c:	f006 fa4c 	bl	800a818 <__pow5mult>
 8004380:	4606      	mov	r6, r0
 8004382:	2800      	cmp	r0, #0
 8004384:	f000 82b6 	beq.w	80048f4 <_strtod_l+0xa0c>
 8004388:	2c00      	cmp	r4, #0
 800438a:	dd08      	ble.n	800439e <_strtod_l+0x4b6>
 800438c:	4631      	mov	r1, r6
 800438e:	4622      	mov	r2, r4
 8004390:	4658      	mov	r0, fp
 8004392:	f006 fa91 	bl	800a8b8 <__lshift>
 8004396:	4606      	mov	r6, r0
 8004398:	2800      	cmp	r0, #0
 800439a:	f000 82ab 	beq.w	80048f4 <_strtod_l+0xa0c>
 800439e:	2d00      	cmp	r5, #0
 80043a0:	dd08      	ble.n	80043b4 <_strtod_l+0x4cc>
 80043a2:	4639      	mov	r1, r7
 80043a4:	462a      	mov	r2, r5
 80043a6:	4658      	mov	r0, fp
 80043a8:	f006 fa86 	bl	800a8b8 <__lshift>
 80043ac:	4607      	mov	r7, r0
 80043ae:	2800      	cmp	r0, #0
 80043b0:	f000 82a0 	beq.w	80048f4 <_strtod_l+0xa0c>
 80043b4:	4632      	mov	r2, r6
 80043b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80043b8:	4658      	mov	r0, fp
 80043ba:	f006 faf7 	bl	800a9ac <__mdiff>
 80043be:	4682      	mov	sl, r0
 80043c0:	2800      	cmp	r0, #0
 80043c2:	f000 8297 	beq.w	80048f4 <_strtod_l+0xa0c>
 80043c6:	2300      	movs	r3, #0
 80043c8:	68c2      	ldr	r2, [r0, #12]
 80043ca:	60c3      	str	r3, [r0, #12]
 80043cc:	4639      	mov	r1, r7
 80043ce:	920d      	str	r2, [sp, #52]	; 0x34
 80043d0:	f006 faca 	bl	800a968 <__mcmp>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	f2c0 83cd 	blt.w	8004b74 <_strtod_l+0xc8c>
 80043da:	f000 841d 	beq.w	8004c18 <_strtod_l+0xd30>
 80043de:	4639      	mov	r1, r7
 80043e0:	4650      	mov	r0, sl
 80043e2:	f006 fc55 	bl	800ac90 <__ratio>
 80043e6:	2200      	movs	r2, #0
 80043e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043ec:	4604      	mov	r4, r0
 80043ee:	460d      	mov	r5, r1
 80043f0:	f7ff fa7a 	bl	80038e8 <__aeabi_dcmple>
 80043f4:	2800      	cmp	r0, #0
 80043f6:	d069      	beq.n	80044cc <_strtod_l+0x5e4>
 80043f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80a9 	beq.w	8004552 <_strtod_l+0x66a>
 8004400:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 80044f8 <_strtod_l+0x610>
 8004404:	9b05      	ldr	r3, [sp, #20]
 8004406:	4d42      	ldr	r5, [pc, #264]	; (8004510 <_strtod_l+0x628>)
 8004408:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800440c:	2400      	movs	r4, #0
 800440e:	4699      	mov	r9, r3
 8004410:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8004518 <_strtod_l+0x630>
 8004414:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <_strtod_l+0x62c>)
 8004416:	ea09 0808 	and.w	r8, r9, r8
 800441a:	4598      	cmp	r8, r3
 800441c:	f000 81d8 	beq.w	80047d0 <_strtod_l+0x8e8>
 8004420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004422:	b32b      	cbz	r3, 8004470 <_strtod_l+0x588>
 8004424:	f1b8 6fd4 	cmp.w	r8, #111149056	; 0x6a00000
 8004428:	d822      	bhi.n	8004470 <_strtod_l+0x588>
 800442a:	a335      	add	r3, pc, #212	; (adr r3, 8004500 <_strtod_l+0x618>)
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004434:	f7ff fa58 	bl	80038e8 <__aeabi_dcmple>
 8004438:	b1b0      	cbz	r0, 8004468 <_strtod_l+0x580>
 800443a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800443e:	f7ff fa87 	bl	8003950 <__aeabi_d2uiz>
 8004442:	2800      	cmp	r0, #0
 8004444:	f000 8345 	beq.w	8004ad2 <_strtod_l+0xbea>
 8004448:	f7fe ff5c 	bl	8003304 <__aeabi_ui2d>
 800444c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004452:	2b00      	cmp	r3, #0
 8004454:	f040 8338 	bne.w	8004ac8 <_strtod_l+0xbe0>
 8004458:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800445c:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8004460:	9114      	str	r1, [sp, #80]	; 0x50
 8004462:	9315      	str	r3, [sp, #84]	; 0x54
 8004464:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8004468:	f105 63d6 	add.w	r3, r5, #112197632	; 0x6b00000
 800446c:	ebc8 0503 	rsb	r5, r8, r3
 8004470:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004474:	f006 fb24 	bl	800aac0 <__ulp>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4620      	mov	r0, r4
 800447e:	4629      	mov	r1, r5
 8004480:	f7fe ffb6 	bl	80033f0 <__aeabi_dmul>
 8004484:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004488:	f7fe fe00 	bl	800308c <__adddf3>
 800448c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004490:	460c      	mov	r4, r1
 8004492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004494:	b923      	cbnz	r3, 80044a0 <_strtod_l+0x5b8>
 8004496:	4b20      	ldr	r3, [pc, #128]	; (8004518 <_strtod_l+0x630>)
 8004498:	4023      	ands	r3, r4
 800449a:	4598      	cmp	r8, r3
 800449c:	f000 81ec 	beq.w	8004878 <_strtod_l+0x990>
 80044a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80044a2:	4658      	mov	r0, fp
 80044a4:	f006 f832 	bl	800a50c <_Bfree>
 80044a8:	4631      	mov	r1, r6
 80044aa:	4658      	mov	r0, fp
 80044ac:	f006 f82e 	bl	800a50c <_Bfree>
 80044b0:	4639      	mov	r1, r7
 80044b2:	4658      	mov	r0, fp
 80044b4:	f006 f82a 	bl	800a50c <_Bfree>
 80044b8:	4651      	mov	r1, sl
 80044ba:	4658      	mov	r0, fp
 80044bc:	f006 f826 	bl	800a50c <_Bfree>
 80044c0:	e6d8      	b.n	8004274 <_strtod_l+0x38c>
 80044c2:	2200      	movs	r2, #0
 80044c4:	9213      	str	r2, [sp, #76]	; 0x4c
 80044c6:	2201      	movs	r2, #1
 80044c8:	920e      	str	r2, [sp, #56]	; 0x38
 80044ca:	e71a      	b.n	8004302 <_strtod_l+0x41a>
 80044cc:	4b13      	ldr	r3, [pc, #76]	; (800451c <_strtod_l+0x634>)
 80044ce:	4620      	mov	r0, r4
 80044d0:	4629      	mov	r1, r5
 80044d2:	2200      	movs	r2, #0
 80044d4:	f7fe ff8c 	bl	80033f0 <__aeabi_dmul>
 80044d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044da:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d15c      	bne.n	800459c <_strtod_l+0x6b4>
 80044e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044e6:	9010      	str	r0, [sp, #64]	; 0x40
 80044e8:	9311      	str	r3, [sp, #68]	; 0x44
 80044ea:	9b05      	ldr	r3, [sp, #20]
 80044ec:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 80044f0:	4699      	mov	r9, r3
 80044f2:	e78d      	b.n	8004410 <_strtod_l+0x528>
 80044f4:	f3af 8000 	nop.w
 80044f8:	00000000 	.word	0x00000000
 80044fc:	3ff00000 	.word	0x3ff00000
 8004500:	ffc00000 	.word	0xffc00000
 8004504:	41dfffff 	.word	0x41dfffff
 8004508:	0800bf38 	.word	0x0800bf38
 800450c:	fffffc02 	.word	0xfffffc02
 8004510:	3ff00000 	.word	0x3ff00000
 8004514:	7fe00000 	.word	0x7fe00000
 8004518:	7ff00000 	.word	0x7ff00000
 800451c:	3fe00000 	.word	0x3fe00000
 8004520:	f04f 0901 	mov.w	r9, #1
 8004524:	2800      	cmp	r0, #0
 8004526:	d144      	bne.n	80045b2 <_strtod_l+0x6ca>
 8004528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800452a:	2b00      	cmp	r3, #0
 800452c:	f43f ad12 	beq.w	8003f54 <_strtod_l+0x6c>
 8004530:	4604      	mov	r4, r0
 8004532:	e617      	b.n	8004164 <_strtod_l+0x27c>
 8004534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004536:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004538:	1a9c      	subs	r4, r3, r2
 800453a:	e6cc      	b.n	80042d6 <_strtod_l+0x3ee>
 800453c:	f04f 0901 	mov.w	r9, #1
 8004540:	e558      	b.n	8003ff4 <_strtod_l+0x10c>
 8004542:	49c1      	ldr	r1, [pc, #772]	; (8004848 <_strtod_l+0x960>)
 8004544:	1a89      	subs	r1, r1, r2
 8004546:	2201      	movs	r2, #1
 8004548:	fa02 f101 	lsl.w	r1, r2, r1
 800454c:	9113      	str	r1, [sp, #76]	; 0x4c
 800454e:	920e      	str	r2, [sp, #56]	; 0x38
 8004550:	e6d7      	b.n	8004302 <_strtod_l+0x41a>
 8004552:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8004556:	2900      	cmp	r1, #0
 8004558:	f040 80c9 	bne.w	80046ee <_strtod_l+0x806>
 800455c:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8004560:	4691      	mov	r9, r2
 8004562:	2b00      	cmp	r3, #0
 8004564:	f040 80c9 	bne.w	80046fa <_strtod_l+0x812>
 8004568:	2200      	movs	r2, #0
 800456a:	4bb8      	ldr	r3, [pc, #736]	; (800484c <_strtod_l+0x964>)
 800456c:	4620      	mov	r0, r4
 800456e:	4629      	mov	r1, r5
 8004570:	f7ff f9b0 	bl	80038d4 <__aeabi_dcmplt>
 8004574:	2800      	cmp	r0, #0
 8004576:	f040 8371 	bne.w	8004c5c <_strtod_l+0xd74>
 800457a:	2200      	movs	r2, #0
 800457c:	4bb4      	ldr	r3, [pc, #720]	; (8004850 <_strtod_l+0x968>)
 800457e:	4620      	mov	r0, r4
 8004580:	4629      	mov	r1, r5
 8004582:	f7fe ff35 	bl	80033f0 <__aeabi_dmul>
 8004586:	460a      	mov	r2, r1
 8004588:	4601      	mov	r1, r0
 800458a:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 800458e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8004592:	9018      	str	r0, [sp, #96]	; 0x60
 8004594:	9319      	str	r3, [sp, #100]	; 0x64
 8004596:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 800459a:	e739      	b.n	8004410 <_strtod_l+0x528>
 800459c:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 80045a0:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80045a4:	e7a1      	b.n	80044ea <_strtod_l+0x602>
 80045a6:	f04f 0c01 	mov.w	ip, #1
 80045aa:	1cb3      	adds	r3, r6, #2
 80045ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80045ae:	78b3      	ldrb	r3, [r6, #2]
 80045b0:	e5e4      	b.n	800417c <_strtod_l+0x294>
 80045b2:	2400      	movs	r4, #0
 80045b4:	e5d6      	b.n	8004164 <_strtod_l+0x27c>
 80045b6:	f1b9 0f00 	cmp.w	r9, #0
 80045ba:	f47f accb 	bne.w	8003f54 <_strtod_l+0x6c>
 80045be:	3b49      	subs	r3, #73	; 0x49
 80045c0:	2b25      	cmp	r3, #37	; 0x25
 80045c2:	f63f acc7 	bhi.w	8003f54 <_strtod_l+0x6c>
 80045c6:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <_strtod_l+0x6e4>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	0800412d 	.word	0x0800412d
 80045d0:	08003f55 	.word	0x08003f55
 80045d4:	08003f55 	.word	0x08003f55
 80045d8:	08003f55 	.word	0x08003f55
 80045dc:	08003f55 	.word	0x08003f55
 80045e0:	08004709 	.word	0x08004709
 80045e4:	08003f55 	.word	0x08003f55
 80045e8:	08003f55 	.word	0x08003f55
 80045ec:	08003f55 	.word	0x08003f55
 80045f0:	08003f55 	.word	0x08003f55
 80045f4:	08003f55 	.word	0x08003f55
 80045f8:	08003f55 	.word	0x08003f55
 80045fc:	08003f55 	.word	0x08003f55
 8004600:	08003f55 	.word	0x08003f55
 8004604:	08003f55 	.word	0x08003f55
 8004608:	08003f55 	.word	0x08003f55
 800460c:	08003f55 	.word	0x08003f55
 8004610:	08003f55 	.word	0x08003f55
 8004614:	08003f55 	.word	0x08003f55
 8004618:	08003f55 	.word	0x08003f55
 800461c:	08003f55 	.word	0x08003f55
 8004620:	08003f55 	.word	0x08003f55
 8004624:	08003f55 	.word	0x08003f55
 8004628:	08003f55 	.word	0x08003f55
 800462c:	08003f55 	.word	0x08003f55
 8004630:	08003f55 	.word	0x08003f55
 8004634:	08003f55 	.word	0x08003f55
 8004638:	08003f55 	.word	0x08003f55
 800463c:	08003f55 	.word	0x08003f55
 8004640:	08003f55 	.word	0x08003f55
 8004644:	08003f55 	.word	0x08003f55
 8004648:	08003f55 	.word	0x08003f55
 800464c:	0800412d 	.word	0x0800412d
 8004650:	08003f55 	.word	0x08003f55
 8004654:	08003f55 	.word	0x08003f55
 8004658:	08003f55 	.word	0x08003f55
 800465c:	08003f55 	.word	0x08003f55
 8004660:	08004709 	.word	0x08004709
 8004664:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004668:	f300 80dc 	bgt.w	8004824 <_strtod_l+0x93c>
 800466c:	1136      	asrs	r6, r6, #4
 800466e:	2e01      	cmp	r6, #1
 8004670:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8004874 <_strtod_l+0x98c>
 8004674:	f340 830f 	ble.w	8004c96 <_strtod_l+0xdae>
 8004678:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800467c:	2300      	movs	r3, #0
 800467e:	464f      	mov	r7, r9
 8004680:	4698      	mov	r8, r3
 8004682:	f016 0f01 	tst.w	r6, #1
 8004686:	f108 0801 	add.w	r8, r8, #1
 800468a:	ea4f 0666 	mov.w	r6, r6, asr #1
 800468e:	d004      	beq.n	800469a <_strtod_l+0x7b2>
 8004690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004694:	f7fe feac 	bl	80033f0 <__aeabi_dmul>
 8004698:	2301      	movs	r3, #1
 800469a:	2e01      	cmp	r6, #1
 800469c:	f107 0708 	add.w	r7, r7, #8
 80046a0:	d1ef      	bne.n	8004682 <_strtod_l+0x79a>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f040 8369 	bne.w	8004d7a <_strtod_l+0xe92>
 80046a8:	9b05      	ldr	r3, [sp, #20]
 80046aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80046ae:	9305      	str	r3, [sp, #20]
 80046b0:	eb09 08c8 	add.w	r8, r9, r8, lsl #3
 80046b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046b8:	e9d8 0100 	ldrd	r0, r1, [r8]
 80046bc:	f7fe fe98 	bl	80033f0 <__aeabi_dmul>
 80046c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80046c4:	0d1b      	lsrs	r3, r3, #20
 80046c6:	4a63      	ldr	r2, [pc, #396]	; (8004854 <_strtod_l+0x96c>)
 80046c8:	051b      	lsls	r3, r3, #20
 80046ca:	4293      	cmp	r3, r2
 80046cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046d0:	f200 80a8 	bhi.w	8004824 <_strtod_l+0x93c>
 80046d4:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 80046d8:	4293      	cmp	r3, r2
 80046da:	f240 82c8 	bls.w	8004c6e <_strtod_l+0xd86>
 80046de:	4b5e      	ldr	r3, [pc, #376]	; (8004858 <_strtod_l+0x970>)
 80046e0:	9305      	str	r3, [sp, #20]
 80046e2:	2300      	movs	r3, #0
 80046e4:	930a      	str	r3, [sp, #40]	; 0x28
 80046e6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ea:	9304      	str	r3, [sp, #16]
 80046ec:	e5aa      	b.n	8004244 <_strtod_l+0x35c>
 80046ee:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80046f2:	2901      	cmp	r1, #1
 80046f4:	f000 81f2 	beq.w	8004adc <_strtod_l+0xbf4>
 80046f8:	4691      	mov	r9, r2
 80046fa:	ed9f 7b51 	vldr	d7, [pc, #324]	; 8004840 <_strtod_l+0x958>
 80046fe:	2400      	movs	r4, #0
 8004700:	4d56      	ldr	r5, [pc, #344]	; (800485c <_strtod_l+0x974>)
 8004702:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004706:	e683      	b.n	8004410 <_strtod_l+0x528>
 8004708:	a81b      	add	r0, sp, #108	; 0x6c
 800470a:	4955      	ldr	r1, [pc, #340]	; (8004860 <_strtod_l+0x978>)
 800470c:	f005 f9e2 	bl	8009ad4 <__match>
 8004710:	2800      	cmp	r0, #0
 8004712:	f43f ac1f 	beq.w	8003f54 <_strtod_l+0x6c>
 8004716:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b28      	cmp	r3, #40	; 0x28
 800471c:	f000 8309 	beq.w	8004d32 <_strtod_l+0xe4a>
 8004720:	4b50      	ldr	r3, [pc, #320]	; (8004864 <_strtod_l+0x97c>)
 8004722:	9305      	str	r3, [sp, #20]
 8004724:	2300      	movs	r3, #0
 8004726:	9304      	str	r3, [sp, #16]
 8004728:	e516      	b.n	8004158 <_strtod_l+0x270>
 800472a:	961b      	str	r6, [sp, #108]	; 0x6c
 800472c:	2200      	movs	r2, #0
 800472e:	e468      	b.n	8004002 <_strtod_l+0x11a>
 8004730:	f04f 0c00 	mov.w	ip, #0
 8004734:	e739      	b.n	80045aa <_strtod_l+0x6c2>
 8004736:	9a07      	ldr	r2, [sp, #28]
 8004738:	9502      	str	r5, [sp, #8]
 800473a:	ab1c      	add	r3, sp, #112	; 0x70
 800473c:	9201      	str	r2, [sp, #4]
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	4a49      	ldr	r2, [pc, #292]	; (8004868 <_strtod_l+0x980>)
 8004742:	ab1d      	add	r3, sp, #116	; 0x74
 8004744:	a91b      	add	r1, sp, #108	; 0x6c
 8004746:	4658      	mov	r0, fp
 8004748:	f004 ff3c 	bl	80095c4 <__gethex>
 800474c:	f010 0607 	ands.w	r6, r0, #7
 8004750:	4605      	mov	r5, r0
 8004752:	f43f ac5d 	beq.w	8004010 <_strtod_l+0x128>
 8004756:	2e06      	cmp	r6, #6
 8004758:	f040 817b 	bne.w	8004a52 <_strtod_l+0xb6a>
 800475c:	3401      	adds	r4, #1
 800475e:	2300      	movs	r3, #0
 8004760:	941b      	str	r4, [sp, #108]	; 0x6c
 8004762:	f04f 0900 	mov.w	r9, #0
 8004766:	f04f 0a00 	mov.w	sl, #0
 800476a:	9307      	str	r3, [sp, #28]
 800476c:	e454      	b.n	8004018 <_strtod_l+0x130>
 800476e:	f8da 1000 	ldr.w	r1, [sl]
 8004772:	4620      	mov	r0, r4
 8004774:	464a      	mov	r2, r9
 8004776:	f7ff fb11 	bl	8003d9c <strncmp>
 800477a:	b148      	cbz	r0, 8004790 <_strtod_l+0x8a8>
 800477c:	f04f 0a00 	mov.w	sl, #0
 8004780:	463b      	mov	r3, r7
 8004782:	46d0      	mov	r8, sl
 8004784:	4655      	mov	r5, sl
 8004786:	4650      	mov	r0, sl
 8004788:	4657      	mov	r7, sl
 800478a:	4654      	mov	r4, sl
 800478c:	46d1      	mov	r9, sl
 800478e:	e431      	b.n	8003ff4 <_strtod_l+0x10c>
 8004790:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004792:	eb03 0209 	add.w	r2, r3, r9
 8004796:	921b      	str	r2, [sp, #108]	; 0x6c
 8004798:	f813 3009 	ldrb.w	r3, [r3, r9]
 800479c:	2b30      	cmp	r3, #48	; 0x30
 800479e:	d106      	bne.n	80047ae <_strtod_l+0x8c6>
 80047a0:	3201      	adds	r2, #1
 80047a2:	921b      	str	r2, [sp, #108]	; 0x6c
 80047a4:	7813      	ldrb	r3, [r2, #0]
 80047a6:	2b30      	cmp	r3, #48	; 0x30
 80047a8:	f100 0001 	add.w	r0, r0, #1
 80047ac:	d0f8      	beq.n	80047a0 <_strtod_l+0x8b8>
 80047ae:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80047b2:	2a08      	cmp	r2, #8
 80047b4:	f240 81a2 	bls.w	8004afc <_strtod_l+0xc14>
 80047b8:	f04f 0a00 	mov.w	sl, #0
 80047bc:	2b65      	cmp	r3, #101	; 0x65
 80047be:	46d0      	mov	r8, sl
 80047c0:	4655      	mov	r5, sl
 80047c2:	4657      	mov	r7, sl
 80047c4:	f43f aeac 	beq.w	8004520 <_strtod_l+0x638>
 80047c8:	4654      	mov	r4, sl
 80047ca:	f04f 0901 	mov.w	r9, #1
 80047ce:	e414      	b.n	8003ffa <_strtod_l+0x112>
 80047d0:	f1a9 7354 	sub.w	r3, r9, #55574528	; 0x3500000
 80047d4:	9305      	str	r3, [sp, #20]
 80047d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80047da:	ec51 0b17 	vmov	r0, r1, d7
 80047de:	f006 f96f 	bl	800aac0 <__ulp>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4620      	mov	r0, r4
 80047e8:	4629      	mov	r1, r5
 80047ea:	f7fe fe01 	bl	80033f0 <__aeabi_dmul>
 80047ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047f2:	f7fe fc4b 	bl	800308c <__adddf3>
 80047f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80047fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047fe:	0d1b      	lsrs	r3, r3, #20
 8004800:	4a1a      	ldr	r2, [pc, #104]	; (800486c <_strtod_l+0x984>)
 8004802:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004806:	051b      	lsls	r3, r3, #20
 8004808:	4293      	cmp	r3, r2
 800480a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 800480e:	f240 80ff 	bls.w	8004a10 <_strtod_l+0xb28>
 8004812:	4b11      	ldr	r3, [pc, #68]	; (8004858 <_strtod_l+0x970>)
 8004814:	4299      	cmp	r1, r3
 8004816:	d06a      	beq.n	80048ee <_strtod_l+0xa06>
 8004818:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <_strtod_l+0x970>)
 800481a:	9305      	str	r3, [sp, #20]
 800481c:	f04f 33ff 	mov.w	r3, #4294967295
 8004820:	9304      	str	r3, [sp, #16]
 8004822:	e63d      	b.n	80044a0 <_strtod_l+0x5b8>
 8004824:	4b12      	ldr	r3, [pc, #72]	; (8004870 <_strtod_l+0x988>)
 8004826:	9305      	str	r3, [sp, #20]
 8004828:	2200      	movs	r2, #0
 800482a:	2322      	movs	r3, #34	; 0x22
 800482c:	9204      	str	r2, [sp, #16]
 800482e:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
 8004832:	f8cb 3000 	str.w	r3, [fp]
 8004836:	f7ff bbef 	b.w	8004018 <_strtod_l+0x130>
 800483a:	bf00      	nop
 800483c:	f3af 8000 	nop.w
 8004840:	00000000 	.word	0x00000000
 8004844:	3ff00000 	.word	0x3ff00000
 8004848:	fffffbe2 	.word	0xfffffbe2
 800484c:	3ff00000 	.word	0x3ff00000
 8004850:	3fe00000 	.word	0x3fe00000
 8004854:	7ca00000 	.word	0x7ca00000
 8004858:	7fefffff 	.word	0x7fefffff
 800485c:	bff00000 	.word	0xbff00000
 8004860:	0800bd4c 	.word	0x0800bd4c
 8004864:	fff80000 	.word	0xfff80000
 8004868:	0800bd2c 	.word	0x0800bd2c
 800486c:	7c9fffff 	.word	0x7c9fffff
 8004870:	7ff00000 	.word	0x7ff00000
 8004874:	0800c000 	.word	0x0800c000
 8004878:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 800487c:	4649      	mov	r1, r9
 800487e:	4640      	mov	r0, r8
 8004880:	f006 ff6a 	bl	800b758 <__aeabi_d2iz>
 8004884:	f7fe fd4e 	bl	8003324 <__aeabi_i2d>
 8004888:	460b      	mov	r3, r1
 800488a:	4602      	mov	r2, r0
 800488c:	4649      	mov	r1, r9
 800488e:	4640      	mov	r0, r8
 8004890:	f7fe fbfa 	bl	8003088 <__aeabi_dsub>
 8004894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004896:	4680      	mov	r8, r0
 8004898:	4689      	mov	r9, r1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d136      	bne.n	800490c <_strtod_l+0xa24>
 800489e:	9b04      	ldr	r3, [sp, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d133      	bne.n	800490c <_strtod_l+0xa24>
 80048a4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80048a8:	bb84      	cbnz	r4, 800490c <_strtod_l+0xa24>
 80048aa:	a3b0      	add	r3, pc, #704	; (adr r3, 8004b6c <_strtod_l+0xc84>)
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f7ff f810 	bl	80038d4 <__aeabi_dcmplt>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	f43f adf3 	beq.w	80044a0 <_strtod_l+0x5b8>
 80048ba:	46d0      	mov	r8, sl
 80048bc:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
 80048c0:	981c      	ldr	r0, [sp, #112]	; 0x70
 80048c2:	4601      	mov	r1, r0
 80048c4:	4658      	mov	r0, fp
 80048c6:	f005 fe21 	bl	800a50c <_Bfree>
 80048ca:	4631      	mov	r1, r6
 80048cc:	4658      	mov	r0, fp
 80048ce:	f005 fe1d 	bl	800a50c <_Bfree>
 80048d2:	4639      	mov	r1, r7
 80048d4:	4658      	mov	r0, fp
 80048d6:	f005 fe19 	bl	800a50c <_Bfree>
 80048da:	9912      	ldr	r1, [sp, #72]	; 0x48
 80048dc:	4658      	mov	r0, fp
 80048de:	f005 fe15 	bl	800a50c <_Bfree>
 80048e2:	4641      	mov	r1, r8
 80048e4:	4658      	mov	r0, fp
 80048e6:	f005 fe11 	bl	800a50c <_Bfree>
 80048ea:	f7ff bb95 	b.w	8004018 <_strtod_l+0x130>
 80048ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80048f0:	3301      	adds	r3, #1
 80048f2:	d191      	bne.n	8004818 <_strtod_l+0x930>
 80048f4:	46d0      	mov	r8, sl
 80048f6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80048f8:	4b99      	ldr	r3, [pc, #612]	; (8004b60 <_strtod_l+0xc78>)
 80048fa:	9305      	str	r3, [sp, #20]
 80048fc:	2200      	movs	r2, #0
 80048fe:	2322      	movs	r3, #34	; 0x22
 8004900:	9204      	str	r2, [sp, #16]
 8004902:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
 8004906:	f8cb 3000 	str.w	r3, [fp]
 800490a:	e7da      	b.n	80048c2 <_strtod_l+0x9da>
 800490c:	a38e      	add	r3, pc, #568	; (adr r3, 8004b48 <_strtod_l+0xc60>)
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	4640      	mov	r0, r8
 8004914:	4649      	mov	r1, r9
 8004916:	f7fe ffdd 	bl	80038d4 <__aeabi_dcmplt>
 800491a:	2800      	cmp	r0, #0
 800491c:	d1cd      	bne.n	80048ba <_strtod_l+0x9d2>
 800491e:	4640      	mov	r0, r8
 8004920:	4649      	mov	r1, r9
 8004922:	a38b      	add	r3, pc, #556	; (adr r3, 8004b50 <_strtod_l+0xc68>)
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f7fe fff2 	bl	8003910 <__aeabi_dcmpgt>
 800492c:	2800      	cmp	r0, #0
 800492e:	f43f adb7 	beq.w	80044a0 <_strtod_l+0x5b8>
 8004932:	e7c2      	b.n	80048ba <_strtod_l+0x9d2>
 8004934:	f43f ac84 	beq.w	8004240 <_strtod_l+0x358>
 8004938:	f1c9 0600 	rsb	r6, r9, #0
 800493c:	f016 020f 	ands.w	r2, r6, #15
 8004940:	d00a      	beq.n	8004958 <_strtod_l+0xa70>
 8004942:	4b88      	ldr	r3, [pc, #544]	; (8004b64 <_strtod_l+0xc7c>)
 8004944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004948:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004950:	f7fe fe78 	bl	8003644 <__aeabi_ddiv>
 8004954:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004958:	1136      	asrs	r6, r6, #4
 800495a:	f43f ac71 	beq.w	8004240 <_strtod_l+0x358>
 800495e:	2e1f      	cmp	r6, #31
 8004960:	dc38      	bgt.n	80049d4 <_strtod_l+0xaec>
 8004962:	f016 0310 	ands.w	r3, r6, #16
 8004966:	f000 81c9 	beq.w	8004cfc <_strtod_l+0xe14>
 800496a:	236a      	movs	r3, #106	; 0x6a
 800496c:	2e00      	cmp	r6, #0
 800496e:	930a      	str	r3, [sp, #40]	; 0x28
 8004970:	dd13      	ble.n	800499a <_strtod_l+0xab2>
 8004972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004976:	4f7c      	ldr	r7, [pc, #496]	; (8004b68 <_strtod_l+0xc80>)
 8004978:	2300      	movs	r3, #0
 800497a:	07f2      	lsls	r2, r6, #31
 800497c:	d504      	bpl.n	8004988 <_strtod_l+0xaa0>
 800497e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004982:	f7fe fd35 	bl	80033f0 <__aeabi_dmul>
 8004986:	2301      	movs	r3, #1
 8004988:	1076      	asrs	r6, r6, #1
 800498a:	f107 0708 	add.w	r7, r7, #8
 800498e:	d1f4      	bne.n	800497a <_strtod_l+0xa92>
 8004990:	2b00      	cmp	r3, #0
 8004992:	f040 81f5 	bne.w	8004d80 <_strtod_l+0xe98>
 8004996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004998:	b19b      	cbz	r3, 80049c2 <_strtod_l+0xada>
 800499a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800499e:	f3c2 530a 	ubfx	r3, r2, #20, #11
 80049a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	4611      	mov	r1, r2
 80049aa:	dd0a      	ble.n	80049c2 <_strtod_l+0xada>
 80049ac:	2b1f      	cmp	r3, #31
 80049ae:	f340 81ad 	ble.w	8004d0c <_strtod_l+0xe24>
 80049b2:	2200      	movs	r2, #0
 80049b4:	2b34      	cmp	r3, #52	; 0x34
 80049b6:	9204      	str	r2, [sp, #16]
 80049b8:	f340 81d7 	ble.w	8004d6a <_strtod_l+0xe82>
 80049bc:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 80049c0:	9305      	str	r3, [sp, #20]
 80049c2:	2200      	movs	r2, #0
 80049c4:	2300      	movs	r3, #0
 80049c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049ca:	f7fe ff79 	bl	80038c0 <__aeabi_dcmpeq>
 80049ce:	2800      	cmp	r0, #0
 80049d0:	f43f ac38 	beq.w	8004244 <_strtod_l+0x35c>
 80049d4:	2322      	movs	r3, #34	; 0x22
 80049d6:	f8cb 3000 	str.w	r3, [fp]
 80049da:	f04f 0900 	mov.w	r9, #0
 80049de:	f04f 0a00 	mov.w	sl, #0
 80049e2:	f7ff bb19 	b.w	8004018 <_strtod_l+0x130>
 80049e6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80049e8:	3401      	adds	r4, #1
 80049ea:	2808      	cmp	r0, #8
 80049ec:	f340 808f 	ble.w	8004b0e <_strtod_l+0xc26>
 80049f0:	2c10      	cmp	r4, #16
 80049f2:	bfdc      	itt	le
 80049f4:	eb08 0888 	addle.w	r8, r8, r8, lsl #2
 80049f8:	eb02 0848 	addle.w	r8, r2, r8, lsl #1
 80049fc:	2000      	movs	r0, #0
 80049fe:	1c4b      	adds	r3, r1, #1
 8004a00:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a02:	784b      	ldrb	r3, [r1, #1]
 8004a04:	f7ff bb1a 	b.w	800403c <_strtod_l+0x154>
 8004a08:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004a0c:	f7ff bbef 	b.w	80041ee <_strtod_l+0x306>
 8004a10:	9b05      	ldr	r3, [sp, #20]
 8004a12:	f103 7454 	add.w	r4, r3, #55574528	; 0x3500000
 8004a16:	9405      	str	r4, [sp, #20]
 8004a18:	e53b      	b.n	8004492 <_strtod_l+0x5aa>
 8004a1a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004a1c:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004a20:	429e      	cmp	r6, r3
 8004a22:	f73f abf3 	bgt.w	800420c <_strtod_l+0x324>
 8004a26:	4d4f      	ldr	r5, [pc, #316]	; (8004b64 <_strtod_l+0xc7c>)
 8004a28:	f1c4 040f 	rsb	r4, r4, #15
 8004a2c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004a30:	1b34      	subs	r4, r6, r4
 8004a32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a3a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004a3e:	f7fe fcd7 	bl	80033f0 <__aeabi_dmul>
 8004a42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a46:	f7fe fcd3 	bl	80033f0 <__aeabi_dmul>
 8004a4a:	4681      	mov	r9, r0
 8004a4c:	468a      	mov	sl, r1
 8004a4e:	f7ff bae3 	b.w	8004018 <_strtod_l+0x130>
 8004a52:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004a54:	b13a      	cbz	r2, 8004a66 <_strtod_l+0xb7e>
 8004a56:	2135      	movs	r1, #53	; 0x35
 8004a58:	a81e      	add	r0, sp, #120	; 0x78
 8004a5a:	f006 f943 	bl	800ace4 <__copybits>
 8004a5e:	4658      	mov	r0, fp
 8004a60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004a62:	f005 fd53 	bl	800a50c <_Bfree>
 8004a66:	2e06      	cmp	r6, #6
 8004a68:	d80b      	bhi.n	8004a82 <_strtod_l+0xb9a>
 8004a6a:	e8df f006 	tbb	[pc, r6]
 8004a6e:	1d29      	.short	0x1d29
 8004a70:	1d041318 	.word	0x1d041318
 8004a74:	29          	.byte	0x29
 8004a75:	00          	.byte	0x00
 8004a76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004a7a:	9305      	str	r3, [sp, #20]
 8004a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a80:	9304      	str	r3, [sp, #16]
 8004a82:	0729      	lsls	r1, r5, #28
 8004a84:	f57f ab68 	bpl.w	8004158 <_strtod_l+0x270>
 8004a88:	9b05      	ldr	r3, [sp, #20]
 8004a8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a8e:	9305      	str	r3, [sp, #20]
 8004a90:	f7ff bb62 	b.w	8004158 <_strtod_l+0x270>
 8004a94:	4b32      	ldr	r3, [pc, #200]	; (8004b60 <_strtod_l+0xc78>)
 8004a96:	9305      	str	r3, [sp, #20]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	9304      	str	r3, [sp, #16]
 8004a9c:	e7f1      	b.n	8004a82 <_strtod_l+0xb9a>
 8004a9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004aa0:	9304      	str	r3, [sp, #16]
 8004aa2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004aa4:	9305      	str	r3, [sp, #20]
 8004aa6:	e7ec      	b.n	8004a82 <_strtod_l+0xb9a>
 8004aa8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004aaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004aac:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004aae:	9104      	str	r1, [sp, #16]
 8004ab0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004ab4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ab8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8004abc:	9305      	str	r3, [sp, #20]
 8004abe:	e7e0      	b.n	8004a82 <_strtod_l+0xb9a>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	9305      	str	r3, [sp, #20]
 8004ac4:	9304      	str	r3, [sp, #16]
 8004ac6:	e7dc      	b.n	8004a82 <_strtod_l+0xb9a>
 8004ac8:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 8004acc:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004ad0:	e4c8      	b.n	8004464 <_strtod_l+0x57c>
 8004ad2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8004b58 <_strtod_l+0xc70>
 8004ad6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004ada:	e4b9      	b.n	8004450 <_strtod_l+0x568>
 8004adc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8004ae0:	4691      	mov	r9, r2
 8004ae2:	2a00      	cmp	r2, #0
 8004ae4:	f47f ae09 	bne.w	80046fa <_strtod_l+0x812>
 8004ae8:	46d0      	mov	r8, sl
 8004aea:	2322      	movs	r3, #34	; 0x22
 8004aec:	f8cb 3000 	str.w	r3, [fp]
 8004af0:	981c      	ldr	r0, [sp, #112]	; 0x70
 8004af2:	f04f 0900 	mov.w	r9, #0
 8004af6:	f04f 0a00 	mov.w	sl, #0
 8004afa:	e6e2      	b.n	80048c2 <_strtod_l+0x9da>
 8004afc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004afe:	9208      	str	r2, [sp, #32]
 8004b00:	2500      	movs	r5, #0
 8004b02:	3b30      	subs	r3, #48	; 0x30
 8004b04:	1c47      	adds	r7, r0, #1
 8004b06:	4611      	mov	r1, r2
 8004b08:	46aa      	mov	sl, r5
 8004b0a:	46a8      	mov	r8, r5
 8004b0c:	2401      	movs	r4, #1
 8004b0e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004b12:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004b16:	2000      	movs	r0, #0
 8004b18:	e771      	b.n	80049fe <_strtod_l+0xb16>
 8004b1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b1c:	f111 0f16 	cmn.w	r1, #22
 8004b20:	f6ff ab74 	blt.w	800420c <_strtod_l+0x324>
 8004b24:	4a0f      	ldr	r2, [pc, #60]	; (8004b64 <_strtod_l+0xc7c>)
 8004b26:	eba2 02c1 	sub.w	r2, r2, r1, lsl #3
 8004b2a:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004b2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b32:	f7fe fd87 	bl	8003644 <__aeabi_ddiv>
 8004b36:	4681      	mov	r9, r0
 8004b38:	468a      	mov	sl, r1
 8004b3a:	f7ff ba6d 	b.w	8004018 <_strtod_l+0x130>
 8004b3e:	46d0      	mov	r8, sl
 8004b40:	e6da      	b.n	80048f8 <_strtod_l+0xa10>
 8004b42:	bf00      	nop
 8004b44:	f3af 8000 	nop.w
 8004b48:	94a03595 	.word	0x94a03595
 8004b4c:	3fdfffff 	.word	0x3fdfffff
 8004b50:	35afe535 	.word	0x35afe535
 8004b54:	3fe00000 	.word	0x3fe00000
 8004b58:	00000000 	.word	0x00000000
 8004b5c:	3ff00000 	.word	0x3ff00000
 8004b60:	7ff00000 	.word	0x7ff00000
 8004b64:	0800bf38 	.word	0x0800bf38
 8004b68:	0800bd68 	.word	0x0800bd68
 8004b6c:	94a03595 	.word	0x94a03595
 8004b70:	3fcfffff 	.word	0x3fcfffff
 8004b74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b76:	4655      	mov	r5, sl
 8004b78:	46d0      	mov	r8, sl
 8004b7a:	e9dd 9a08 	ldrd	r9, sl, [sp, #32]
 8004b7e:	bb7a      	cbnz	r2, 8004be0 <_strtod_l+0xcf8>
 8004b80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b84:	bb60      	cbnz	r0, 8004be0 <_strtod_l+0xcf8>
 8004b86:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	bb43      	cbnz	r3, 8004be0 <_strtod_l+0xcf8>
 8004b8e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b92:	0d1b      	lsrs	r3, r3, #20
 8004b94:	051b      	lsls	r3, r3, #20
 8004b96:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004b9a:	d921      	bls.n	8004be0 <_strtod_l+0xcf8>
 8004b9c:	696b      	ldr	r3, [r5, #20]
 8004b9e:	b913      	cbnz	r3, 8004ba6 <_strtod_l+0xcbe>
 8004ba0:	692b      	ldr	r3, [r5, #16]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	dd1c      	ble.n	8004be0 <_strtod_l+0xcf8>
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	2201      	movs	r2, #1
 8004baa:	4658      	mov	r0, fp
 8004bac:	f005 fe84 	bl	800a8b8 <__lshift>
 8004bb0:	4639      	mov	r1, r7
 8004bb2:	4680      	mov	r8, r0
 8004bb4:	f005 fed8 	bl	800a968 <__mcmp>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	dd11      	ble.n	8004be0 <_strtod_l+0xcf8>
 8004bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f040 80ac 	bne.w	8004d1c <_strtod_l+0xe34>
 8004bc4:	4b74      	ldr	r3, [pc, #464]	; (8004d98 <_strtod_l+0xeb0>)
 8004bc6:	4023      	ands	r3, r4
 8004bc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004bcc:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8004bd0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8004bd4:	9305      	str	r3, [sp, #20]
 8004bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bda:	9304      	str	r3, [sp, #16]
 8004bdc:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
 8004be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004be2:	b1bb      	cbz	r3, 8004c14 <_strtod_l+0xd2c>
 8004be4:	4b6d      	ldr	r3, [pc, #436]	; (8004d9c <_strtod_l+0xeb4>)
 8004be6:	9317      	str	r3, [sp, #92]	; 0x5c
 8004be8:	2300      	movs	r3, #0
 8004bea:	9316      	str	r3, [sp, #88]	; 0x58
 8004bec:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8004bf0:	4648      	mov	r0, r9
 8004bf2:	4651      	mov	r1, sl
 8004bf4:	f7fe fbfc 	bl	80033f0 <__aeabi_dmul>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	4681      	mov	r9, r0
 8004bfe:	468a      	mov	sl, r1
 8004c00:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c04:	b931      	cbnz	r1, 8004c14 <_strtod_l+0xd2c>
 8004c06:	9b04      	ldr	r3, [sp, #16]
 8004c08:	b923      	cbnz	r3, 8004c14 <_strtod_l+0xd2c>
 8004c0a:	2322      	movs	r3, #34	; 0x22
 8004c0c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8004c0e:	f8cb 3000 	str.w	r3, [fp]
 8004c12:	e656      	b.n	80048c2 <_strtod_l+0x9da>
 8004c14:	981c      	ldr	r0, [sp, #112]	; 0x70
 8004c16:	e654      	b.n	80048c2 <_strtod_l+0x9da>
 8004c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c1a:	46d0      	mov	r8, sl
 8004c1c:	e9dd 9a08 	ldrd	r9, sl, [sp, #32]
 8004c20:	b353      	cbz	r3, 8004c78 <_strtod_l+0xd90>
 8004c22:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004c26:	4b5e      	ldr	r3, [pc, #376]	; (8004da0 <_strtod_l+0xeb8>)
 8004c28:	f3c5 0113 	ubfx	r1, r5, #0, #20
 8004c2c:	4299      	cmp	r1, r3
 8004c2e:	462a      	mov	r2, r5
 8004c30:	d046      	beq.n	8004cc0 <_strtod_l+0xdd8>
 8004c32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004c34:	b353      	cbz	r3, 8004c8c <_strtod_l+0xda4>
 8004c36:	9a05      	ldr	r2, [sp, #20]
 8004c38:	4213      	tst	r3, r2
 8004c3a:	d0d1      	beq.n	8004be0 <_strtod_l+0xcf8>
 8004c3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c44:	b353      	cbz	r3, 8004c9c <_strtod_l+0xdb4>
 8004c46:	f7ff f92d 	bl	8003ea4 <sulp>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4648      	mov	r0, r9
 8004c50:	4651      	mov	r1, sl
 8004c52:	f7fe fa1b 	bl	800308c <__adddf3>
 8004c56:	4681      	mov	r9, r0
 8004c58:	468a      	mov	sl, r1
 8004c5a:	e7c1      	b.n	8004be0 <_strtod_l+0xcf8>
 8004c5c:	ed9f 7b4a 	vldr	d7, [pc, #296]	; 8004d88 <_strtod_l+0xea0>
 8004c60:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8004c64:	ed9f 7b4a 	vldr	d7, [pc, #296]	; 8004d90 <_strtod_l+0xea8>
 8004c68:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004c6c:	e493      	b.n	8004596 <_strtod_l+0x6ae>
 8004c6e:	f101 7354 	add.w	r3, r1, #55574528	; 0x3500000
 8004c72:	9305      	str	r3, [sp, #20]
 8004c74:	f7ff bae4 	b.w	8004240 <_strtod_l+0x358>
 8004c78:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8004c7c:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8004c80:	4614      	mov	r4, r2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1d5      	bne.n	8004c32 <_strtod_l+0xd4a>
 8004c86:	2900      	cmp	r1, #0
 8004c88:	d1d3      	bne.n	8004c32 <_strtod_l+0xd4a>
 8004c8a:	e797      	b.n	8004bbc <_strtod_l+0xcd4>
 8004c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c8e:	9a04      	ldr	r2, [sp, #16]
 8004c90:	4213      	tst	r3, r2
 8004c92:	d0a5      	beq.n	8004be0 <_strtod_l+0xcf8>
 8004c94:	e7d2      	b.n	8004c3c <_strtod_l+0xd54>
 8004c96:	f04f 0800 	mov.w	r8, #0
 8004c9a:	e505      	b.n	80046a8 <_strtod_l+0x7c0>
 8004c9c:	f7ff f902 	bl	8003ea4 <sulp>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4648      	mov	r0, r9
 8004ca6:	4651      	mov	r1, sl
 8004ca8:	f7fe f9ee 	bl	8003088 <__aeabi_dsub>
 8004cac:	2200      	movs	r2, #0
 8004cae:	2300      	movs	r3, #0
 8004cb0:	4681      	mov	r9, r0
 8004cb2:	468a      	mov	sl, r1
 8004cb4:	f7fe fe04 	bl	80038c0 <__aeabi_dcmpeq>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	f47f af16 	bne.w	8004aea <_strtod_l+0xc02>
 8004cbe:	e78f      	b.n	8004be0 <_strtod_l+0xcf8>
 8004cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cc2:	9904      	ldr	r1, [sp, #16]
 8004cc4:	b1fb      	cbz	r3, 8004d06 <_strtod_l+0xe1e>
 8004cc6:	4b34      	ldr	r3, [pc, #208]	; (8004d98 <_strtod_l+0xeb0>)
 8004cc8:	402b      	ands	r3, r5
 8004cca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004cce:	d81a      	bhi.n	8004d06 <_strtod_l+0xe1e>
 8004cd0:	0d1b      	lsrs	r3, r3, #20
 8004cd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cda:	fa00 f303 	lsl.w	r3, r0, r3
 8004cde:	428b      	cmp	r3, r1
 8004ce0:	d1a7      	bne.n	8004c32 <_strtod_l+0xd4a>
 8004ce2:	4930      	ldr	r1, [pc, #192]	; (8004da4 <_strtod_l+0xebc>)
 8004ce4:	428a      	cmp	r2, r1
 8004ce6:	d03d      	beq.n	8004d64 <_strtod_l+0xe7c>
 8004ce8:	4b2b      	ldr	r3, [pc, #172]	; (8004d98 <_strtod_l+0xeb0>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004cf0:	9305      	str	r3, [sp, #20]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9304      	str	r3, [sp, #16]
 8004cf6:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
 8004cfa:	e771      	b.n	8004be0 <_strtod_l+0xcf8>
 8004cfc:	2e00      	cmp	r6, #0
 8004cfe:	930a      	str	r3, [sp, #40]	; 0x28
 8004d00:	f73f ae37 	bgt.w	8004972 <_strtod_l+0xa8a>
 8004d04:	e65d      	b.n	80049c2 <_strtod_l+0xada>
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0a:	e7e8      	b.n	8004cde <_strtod_l+0xdf6>
 8004d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	9a04      	ldr	r2, [sp, #16]
 8004d16:	401a      	ands	r2, r3
 8004d18:	9204      	str	r2, [sp, #16]
 8004d1a:	e652      	b.n	80049c2 <_strtod_l+0xada>
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	; (8004d98 <_strtod_l+0xeb0>)
 8004d1e:	4023      	ands	r3, r4
 8004d20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004d24:	f73f af50 	bgt.w	8004bc8 <_strtod_l+0xce0>
 8004d28:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8004d2c:	f73f af5a 	bgt.w	8004be4 <_strtod_l+0xcfc>
 8004d30:	e6db      	b.n	8004aea <_strtod_l+0xc02>
 8004d32:	a81b      	add	r0, sp, #108	; 0x6c
 8004d34:	aa1e      	add	r2, sp, #120	; 0x78
 8004d36:	491c      	ldr	r1, [pc, #112]	; (8004da8 <_strtod_l+0xec0>)
 8004d38:	f004 fee4 	bl	8009b04 <__hexnan>
 8004d3c:	2805      	cmp	r0, #5
 8004d3e:	f47f acef 	bne.w	8004720 <_strtod_l+0x838>
 8004d42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d44:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 8004d48:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8004d4c:	9305      	str	r3, [sp, #20]
 8004d4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d50:	9304      	str	r3, [sp, #16]
 8004d52:	f7ff ba01 	b.w	8004158 <_strtod_l+0x270>
 8004d56:	4620      	mov	r0, r4
 8004d58:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004d5a:	3401      	adds	r4, #1
 8004d5c:	e645      	b.n	80049ea <_strtod_l+0xb02>
 8004d5e:	4608      	mov	r0, r1
 8004d60:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004d62:	e64c      	b.n	80049fe <_strtod_l+0xb16>
 8004d64:	3301      	adds	r3, #1
 8004d66:	d1bf      	bne.n	8004ce8 <_strtod_l+0xe00>
 8004d68:	e5c5      	b.n	80048f6 <_strtod_l+0xa0e>
 8004d6a:	3b20      	subs	r3, #32
 8004d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	400b      	ands	r3, r1
 8004d76:	9305      	str	r3, [sp, #20]
 8004d78:	e623      	b.n	80049c2 <_strtod_l+0xada>
 8004d7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d7e:	e493      	b.n	80046a8 <_strtod_l+0x7c0>
 8004d80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d84:	e607      	b.n	8004996 <_strtod_l+0xaae>
 8004d86:	bf00      	nop
 8004d88:	00000000 	.word	0x00000000
 8004d8c:	bfe00000 	.word	0xbfe00000
 8004d90:	00000000 	.word	0x00000000
 8004d94:	3fe00000 	.word	0x3fe00000
 8004d98:	7ff00000 	.word	0x7ff00000
 8004d9c:	39500000 	.word	0x39500000
 8004da0:	000fffff 	.word	0x000fffff
 8004da4:	7fefffff 	.word	0x7fefffff
 8004da8:	0800bd50 	.word	0x0800bd50

08004dac <strtod>:
 8004dac:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <strtod+0x1c>)
 8004dae:	b430      	push	{r4, r5}
 8004db0:	681c      	ldr	r4, [r3, #0]
 8004db2:	4d06      	ldr	r5, [pc, #24]	; (8004dcc <strtod+0x20>)
 8004db4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004db6:	460a      	mov	r2, r1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf08      	it	eq
 8004dbc:	462b      	moveq	r3, r5
 8004dbe:	4601      	mov	r1, r0
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	bc30      	pop	{r4, r5}
 8004dc4:	f7ff b890 	b.w	8003ee8 <_strtod_l>
 8004dc8:	20000468 	.word	0x20000468
 8004dcc:	2000046c 	.word	0x2000046c

08004dd0 <_svfprintf_r>:
 8004dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd4:	b0c5      	sub	sp, #276	; 0x114
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	9109      	str	r1, [sp, #36]	; 0x24
 8004dda:	4615      	mov	r5, r2
 8004ddc:	930e      	str	r3, [sp, #56]	; 0x38
 8004dde:	900a      	str	r0, [sp, #40]	; 0x28
 8004de0:	f004 ff60 	bl	8009ca4 <_localeconv_r>
 8004de4:	6803      	ldr	r3, [r0, #0]
 8004de6:	9317      	str	r3, [sp, #92]	; 0x5c
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fe ff69 	bl	8003cc0 <strlen>
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	9016      	str	r0, [sp, #88]	; 0x58
 8004df2:	061e      	lsls	r6, r3, #24
 8004df4:	d503      	bpl.n	8004dfe <_svfprintf_r+0x2e>
 8004df6:	6923      	ldr	r3, [r4, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f001 8133 	beq.w	8006064 <_svfprintf_r+0x1294>
 8004dfe:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8005098 <_svfprintf_r+0x2c8>
 8004e02:	2300      	movs	r3, #0
 8004e04:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004e08:	9312      	str	r3, [sp, #72]	; 0x48
 8004e0a:	9329      	str	r3, [sp, #164]	; 0xa4
 8004e0c:	9328      	str	r3, [sp, #160]	; 0xa0
 8004e0e:	9319      	str	r3, [sp, #100]	; 0x64
 8004e10:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e12:	f8df a290 	ldr.w	sl, [pc, #656]	; 80050a4 <_svfprintf_r+0x2d4>
 8004e16:	ab34      	add	r3, sp, #208	; 0xd0
 8004e18:	9327      	str	r3, [sp, #156]	; 0x9c
 8004e1a:	4699      	mov	r9, r3
 8004e1c:	46a8      	mov	r8, r5
 8004e1e:	f898 3000 	ldrb.w	r3, [r8]
 8004e22:	4644      	mov	r4, r8
 8004e24:	b1eb      	cbz	r3, 8004e62 <_svfprintf_r+0x92>
 8004e26:	2b25      	cmp	r3, #37	; 0x25
 8004e28:	d102      	bne.n	8004e30 <_svfprintf_r+0x60>
 8004e2a:	e01a      	b.n	8004e62 <_svfprintf_r+0x92>
 8004e2c:	2b25      	cmp	r3, #37	; 0x25
 8004e2e:	d003      	beq.n	8004e38 <_svfprintf_r+0x68>
 8004e30:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1f9      	bne.n	8004e2c <_svfprintf_r+0x5c>
 8004e38:	ebc8 0504 	rsb	r5, r8, r4
 8004e3c:	b18d      	cbz	r5, 8004e62 <_svfprintf_r+0x92>
 8004e3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004e40:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004e42:	f8c9 8000 	str.w	r8, [r9]
 8004e46:	3301      	adds	r3, #1
 8004e48:	442a      	add	r2, r5
 8004e4a:	2b07      	cmp	r3, #7
 8004e4c:	f8c9 5004 	str.w	r5, [r9, #4]
 8004e50:	9229      	str	r2, [sp, #164]	; 0xa4
 8004e52:	9328      	str	r3, [sp, #160]	; 0xa0
 8004e54:	f300 80a6 	bgt.w	8004fa4 <_svfprintf_r+0x1d4>
 8004e58:	f109 0908 	add.w	r9, r9, #8
 8004e5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e5e:	442b      	add	r3, r5
 8004e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e62:	7823      	ldrb	r3, [r4, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80a6 	beq.w	8004fb6 <_svfprintf_r+0x1e6>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8004e72:	4619      	mov	r1, r3
 8004e74:	930c      	str	r3, [sp, #48]	; 0x30
 8004e76:	9307      	str	r3, [sp, #28]
 8004e78:	f04f 3bff 	mov.w	fp, #4294967295
 8004e7c:	7863      	ldrb	r3, [r4, #1]
 8004e7e:	f104 0801 	add.w	r8, r4, #1
 8004e82:	465d      	mov	r5, fp
 8004e84:	f108 0801 	add.w	r8, r8, #1
 8004e88:	f1a3 0020 	sub.w	r0, r3, #32
 8004e8c:	2858      	cmp	r0, #88	; 0x58
 8004e8e:	f200 8434 	bhi.w	80056fa <_svfprintf_r+0x92a>
 8004e92:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004e96:	03a0      	.short	0x03a0
 8004e98:	04320432 	.word	0x04320432
 8004e9c:	043203a8 	.word	0x043203a8
 8004ea0:	04320432 	.word	0x04320432
 8004ea4:	04320432 	.word	0x04320432
 8004ea8:	03af0432 	.word	0x03af0432
 8004eac:	043203bd 	.word	0x043203bd
 8004eb0:	00e2005d 	.word	0x00e2005d
 8004eb4:	01090432 	.word	0x01090432
 8004eb8:	01100110 	.word	0x01100110
 8004ebc:	01100110 	.word	0x01100110
 8004ec0:	01100110 	.word	0x01100110
 8004ec4:	01100110 	.word	0x01100110
 8004ec8:	04320110 	.word	0x04320110
 8004ecc:	04320432 	.word	0x04320432
 8004ed0:	04320432 	.word	0x04320432
 8004ed4:	04320432 	.word	0x04320432
 8004ed8:	04320432 	.word	0x04320432
 8004edc:	01200432 	.word	0x01200432
 8004ee0:	04320286 	.word	0x04320286
 8004ee4:	04320286 	.word	0x04320286
 8004ee8:	04320432 	.word	0x04320432
 8004eec:	02d40432 	.word	0x02d40432
 8004ef0:	04320432 	.word	0x04320432
 8004ef4:	043202e5 	.word	0x043202e5
 8004ef8:	04320432 	.word	0x04320432
 8004efc:	04320432 	.word	0x04320432
 8004f00:	0432030f 	.word	0x0432030f
 8004f04:	033d0432 	.word	0x033d0432
 8004f08:	04320432 	.word	0x04320432
 8004f0c:	04320432 	.word	0x04320432
 8004f10:	04320432 	.word	0x04320432
 8004f14:	04320432 	.word	0x04320432
 8004f18:	04320432 	.word	0x04320432
 8004f1c:	0391037e 	.word	0x0391037e
 8004f20:	02860286 	.word	0x02860286
 8004f24:	03990286 	.word	0x03990286
 8004f28:	04320391 	.word	0x04320391
 8004f2c:	04070432 	.word	0x04070432
 8004f30:	04120432 	.word	0x04120432
 8004f34:	006400a3 	.word	0x006400a3
 8004f38:	043203c2 	.word	0x043203c2
 8004f3c:	043203c9 	.word	0x043203c9
 8004f40:	043203ea 	.word	0x043203ea
 8004f44:	03f20432 	.word	0x03f20432
 8004f48:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004f4a:	930e      	str	r3, [sp, #56]	; 0x38
 8004f4c:	4240      	negs	r0, r0
 8004f4e:	900c      	str	r0, [sp, #48]	; 0x30
 8004f50:	9b07      	ldr	r3, [sp, #28]
 8004f52:	f043 0304 	orr.w	r3, r3, #4
 8004f56:	9307      	str	r3, [sp, #28]
 8004f58:	f898 3000 	ldrb.w	r3, [r8]
 8004f5c:	e792      	b.n	8004e84 <_svfprintf_r+0xb4>
 8004f5e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004f60:	46ab      	mov	fp, r5
 8004f62:	2100      	movs	r1, #0
 8004f64:	6804      	ldr	r4, [r0, #0]
 8004f66:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8004f6a:	1d07      	adds	r7, r0, #4
 8004f6c:	9807      	ldr	r0, [sp, #28]
 8004f6e:	2330      	movs	r3, #48	; 0x30
 8004f70:	2278      	movs	r2, #120	; 0x78
 8004f72:	458b      	cmp	fp, r1
 8004f74:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8004f78:	f04f 0500 	mov.w	r5, #0
 8004f7c:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8004f80:	f040 0302 	orr.w	r3, r0, #2
 8004f84:	f2c0 83d6 	blt.w	8005734 <_svfprintf_r+0x964>
 8004f88:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 8004f8c:	f043 0302 	orr.w	r3, r3, #2
 8004f90:	9307      	str	r3, [sp, #28]
 8004f92:	ea54 0305 	orrs.w	r3, r4, r5
 8004f96:	970e      	str	r7, [sp, #56]	; 0x38
 8004f98:	f000 83a2 	beq.w	80056e0 <_svfprintf_r+0x910>
 8004f9c:	460f      	mov	r7, r1
 8004f9e:	9211      	str	r2, [sp, #68]	; 0x44
 8004fa0:	483f      	ldr	r0, [pc, #252]	; (80050a0 <_svfprintf_r+0x2d0>)
 8004fa2:	e2e6      	b.n	8005572 <_svfprintf_r+0x7a2>
 8004fa4:	aa27      	add	r2, sp, #156	; 0x9c
 8004fa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fa8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004faa:	f006 f935 	bl	800b218 <__ssprint_r>
 8004fae:	b948      	cbnz	r0, 8004fc4 <_svfprintf_r+0x1f4>
 8004fb0:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8004fb4:	e752      	b.n	8004e5c <_svfprintf_r+0x8c>
 8004fb6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004fb8:	b123      	cbz	r3, 8004fc4 <_svfprintf_r+0x1f4>
 8004fba:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004fbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fbe:	aa27      	add	r2, sp, #156	; 0x9c
 8004fc0:	f006 f92a 	bl	800b218 <__ssprint_r>
 8004fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc6:	899b      	ldrh	r3, [r3, #12]
 8004fc8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004fcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fce:	bf18      	it	ne
 8004fd0:	f04f 33ff 	movne.w	r3, #4294967295
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	b045      	add	sp, #276	; 0x114
 8004fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fdc:	9311      	str	r3, [sp, #68]	; 0x44
 8004fde:	46ab      	mov	fp, r5
 8004fe0:	2a00      	cmp	r2, #0
 8004fe2:	f041 823b 	bne.w	800645c <_svfprintf_r+0x168c>
 8004fe6:	9a07      	ldr	r2, [sp, #28]
 8004fe8:	f012 0320 	ands.w	r3, r2, #32
 8004fec:	f000 8246 	beq.w	800547c <_svfprintf_r+0x6ac>
 8004ff0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004ff2:	3707      	adds	r7, #7
 8004ff4:	f027 0307 	bic.w	r3, r7, #7
 8004ff8:	2700      	movs	r7, #0
 8004ffa:	f103 0108 	add.w	r1, r3, #8
 8004ffe:	45bb      	cmp	fp, r7
 8005000:	910e      	str	r1, [sp, #56]	; 0x38
 8005002:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005006:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800500a:	f2c0 8764 	blt.w	8005ed6 <_svfprintf_r+0x1106>
 800500e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8005012:	9307      	str	r3, [sp, #28]
 8005014:	ea54 0305 	orrs.w	r3, r4, r5
 8005018:	f000 8384 	beq.w	8005724 <_svfprintf_r+0x954>
 800501c:	ae34      	add	r6, sp, #208	; 0xd0
 800501e:	08e2      	lsrs	r2, r4, #3
 8005020:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8005024:	08e9      	lsrs	r1, r5, #3
 8005026:	f004 0307 	and.w	r3, r4, #7
 800502a:	460d      	mov	r5, r1
 800502c:	4614      	mov	r4, r2
 800502e:	3330      	adds	r3, #48	; 0x30
 8005030:	ea54 0205 	orrs.w	r2, r4, r5
 8005034:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8005038:	d1f1      	bne.n	800501e <_svfprintf_r+0x24e>
 800503a:	9a07      	ldr	r2, [sp, #28]
 800503c:	07d1      	lsls	r1, r2, #31
 800503e:	f140 808f 	bpl.w	8005160 <_svfprintf_r+0x390>
 8005042:	2b30      	cmp	r3, #48	; 0x30
 8005044:	f000 808c 	beq.w	8005160 <_svfprintf_r+0x390>
 8005048:	2230      	movs	r2, #48	; 0x30
 800504a:	1e73      	subs	r3, r6, #1
 800504c:	f806 2c01 	strb.w	r2, [r6, #-1]
 8005050:	aa34      	add	r2, sp, #208	; 0xd0
 8005052:	1ad2      	subs	r2, r2, r3
 8005054:	920d      	str	r2, [sp, #52]	; 0x34
 8005056:	461e      	mov	r6, r3
 8005058:	e085      	b.n	8005166 <_svfprintf_r+0x396>
 800505a:	f898 3000 	ldrb.w	r3, [r8]
 800505e:	2b2a      	cmp	r3, #42	; 0x2a
 8005060:	f108 0401 	add.w	r4, r8, #1
 8005064:	f001 81ec 	beq.w	8006440 <_svfprintf_r+0x1670>
 8005068:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800506c:	2809      	cmp	r0, #9
 800506e:	bf98      	it	ls
 8005070:	2500      	movls	r5, #0
 8005072:	f201 818e 	bhi.w	8006392 <_svfprintf_r+0x15c2>
 8005076:	f814 3b01 	ldrb.w	r3, [r4], #1
 800507a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800507e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8005082:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8005086:	2809      	cmp	r0, #9
 8005088:	d9f5      	bls.n	8005076 <_svfprintf_r+0x2a6>
 800508a:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800508e:	46a0      	mov	r8, r4
 8005090:	e6fa      	b.n	8004e88 <_svfprintf_r+0xb8>
 8005092:	bf00      	nop
 8005094:	f3af 8000 	nop.w
	...
 80050a0:	0800bdc4 	.word	0x0800bdc4
 80050a4:	0800bd90 	.word	0x0800bd90
 80050a8:	9b07      	ldr	r3, [sp, #28]
 80050aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ae:	9307      	str	r3, [sp, #28]
 80050b0:	f898 3000 	ldrb.w	r3, [r8]
 80050b4:	e6e6      	b.n	8004e84 <_svfprintf_r+0xb4>
 80050b6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80050ba:	2300      	movs	r3, #0
 80050bc:	461c      	mov	r4, r3
 80050be:	f818 3b01 	ldrb.w	r3, [r8], #1
 80050c2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80050c6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80050ca:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80050ce:	2809      	cmp	r0, #9
 80050d0:	d9f5      	bls.n	80050be <_svfprintf_r+0x2ee>
 80050d2:	940c      	str	r4, [sp, #48]	; 0x30
 80050d4:	e6d8      	b.n	8004e88 <_svfprintf_r+0xb8>
 80050d6:	9311      	str	r3, [sp, #68]	; 0x44
 80050d8:	46ab      	mov	fp, r5
 80050da:	2a00      	cmp	r2, #0
 80050dc:	f041 81cc 	bne.w	8006478 <_svfprintf_r+0x16a8>
 80050e0:	9b07      	ldr	r3, [sp, #28]
 80050e2:	f043 0310 	orr.w	r3, r3, #16
 80050e6:	9307      	str	r3, [sp, #28]
 80050e8:	9b07      	ldr	r3, [sp, #28]
 80050ea:	069c      	lsls	r4, r3, #26
 80050ec:	f140 8537 	bpl.w	8005b5e <_svfprintf_r+0xd8e>
 80050f0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80050f2:	3707      	adds	r7, #7
 80050f4:	f027 0707 	bic.w	r7, r7, #7
 80050f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050fc:	f107 0108 	add.w	r1, r7, #8
 8005100:	910e      	str	r1, [sp, #56]	; 0x38
 8005102:	4614      	mov	r4, r2
 8005104:	461d      	mov	r5, r3
 8005106:	2a00      	cmp	r2, #0
 8005108:	f173 0300 	sbcs.w	r3, r3, #0
 800510c:	f2c0 8562 	blt.w	8005bd4 <_svfprintf_r+0xe04>
 8005110:	f1bb 0f00 	cmp.w	fp, #0
 8005114:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005118:	f2c0 853f 	blt.w	8005b9a <_svfprintf_r+0xdca>
 800511c:	9b07      	ldr	r3, [sp, #28]
 800511e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005122:	9307      	str	r3, [sp, #28]
 8005124:	ea54 0305 	orrs.w	r3, r4, r5
 8005128:	f000 81e8 	beq.w	80054fc <_svfprintf_r+0x72c>
 800512c:	2d00      	cmp	r5, #0
 800512e:	bf08      	it	eq
 8005130:	2c0a      	cmpeq	r4, #10
 8005132:	f0c0 81e8 	bcc.w	8005506 <_svfprintf_r+0x736>
 8005136:	ae34      	add	r6, sp, #208	; 0xd0
 8005138:	4620      	mov	r0, r4
 800513a:	4629      	mov	r1, r5
 800513c:	220a      	movs	r2, #10
 800513e:	2300      	movs	r3, #0
 8005140:	f006 fb32 	bl	800b7a8 <__aeabi_uldivmod>
 8005144:	3230      	adds	r2, #48	; 0x30
 8005146:	f806 2d01 	strb.w	r2, [r6, #-1]!
 800514a:	4620      	mov	r0, r4
 800514c:	4629      	mov	r1, r5
 800514e:	2300      	movs	r3, #0
 8005150:	220a      	movs	r2, #10
 8005152:	f006 fb29 	bl	800b7a8 <__aeabi_uldivmod>
 8005156:	4604      	mov	r4, r0
 8005158:	460d      	mov	r5, r1
 800515a:	ea54 0305 	orrs.w	r3, r4, r5
 800515e:	d1eb      	bne.n	8005138 <_svfprintf_r+0x368>
 8005160:	ab34      	add	r3, sp, #208	; 0xd0
 8005162:	1b9b      	subs	r3, r3, r6
 8005164:	930d      	str	r3, [sp, #52]	; 0x34
 8005166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005168:	455b      	cmp	r3, fp
 800516a:	bfb8      	it	lt
 800516c:	465b      	movlt	r3, fp
 800516e:	9308      	str	r3, [sp, #32]
 8005170:	2300      	movs	r3, #0
 8005172:	9313      	str	r3, [sp, #76]	; 0x4c
 8005174:	b117      	cbz	r7, 800517c <_svfprintf_r+0x3ac>
 8005176:	9b08      	ldr	r3, [sp, #32]
 8005178:	3301      	adds	r3, #1
 800517a:	9308      	str	r3, [sp, #32]
 800517c:	9b07      	ldr	r3, [sp, #28]
 800517e:	f013 0302 	ands.w	r3, r3, #2
 8005182:	930f      	str	r3, [sp, #60]	; 0x3c
 8005184:	d002      	beq.n	800518c <_svfprintf_r+0x3bc>
 8005186:	9b08      	ldr	r3, [sp, #32]
 8005188:	3302      	adds	r3, #2
 800518a:	9308      	str	r3, [sp, #32]
 800518c:	9b07      	ldr	r3, [sp, #28]
 800518e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8005192:	9310      	str	r3, [sp, #64]	; 0x40
 8005194:	f040 82db 	bne.w	800574e <_svfprintf_r+0x97e>
 8005198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800519a:	9a08      	ldr	r2, [sp, #32]
 800519c:	1a9d      	subs	r5, r3, r2
 800519e:	2d00      	cmp	r5, #0
 80051a0:	f340 82d5 	ble.w	800574e <_svfprintf_r+0x97e>
 80051a4:	2d10      	cmp	r5, #16
 80051a6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80051a8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80051aa:	4fa8      	ldr	r7, [pc, #672]	; (800544c <_svfprintf_r+0x67c>)
 80051ac:	dd27      	ble.n	80051fe <_svfprintf_r+0x42e>
 80051ae:	9618      	str	r6, [sp, #96]	; 0x60
 80051b0:	4648      	mov	r0, r9
 80051b2:	2410      	movs	r4, #16
 80051b4:	46b9      	mov	r9, r7
 80051b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80051b8:	462f      	mov	r7, r5
 80051ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80051bc:	e004      	b.n	80051c8 <_svfprintf_r+0x3f8>
 80051be:	3f10      	subs	r7, #16
 80051c0:	2f10      	cmp	r7, #16
 80051c2:	f100 0008 	add.w	r0, r0, #8
 80051c6:	dd16      	ble.n	80051f6 <_svfprintf_r+0x426>
 80051c8:	3201      	adds	r2, #1
 80051ca:	4ba0      	ldr	r3, [pc, #640]	; (800544c <_svfprintf_r+0x67c>)
 80051cc:	9228      	str	r2, [sp, #160]	; 0xa0
 80051ce:	3110      	adds	r1, #16
 80051d0:	2a07      	cmp	r2, #7
 80051d2:	9129      	str	r1, [sp, #164]	; 0xa4
 80051d4:	e880 0018 	stmia.w	r0, {r3, r4}
 80051d8:	ddf1      	ble.n	80051be <_svfprintf_r+0x3ee>
 80051da:	aa27      	add	r2, sp, #156	; 0x9c
 80051dc:	4631      	mov	r1, r6
 80051de:	4628      	mov	r0, r5
 80051e0:	f006 f81a 	bl	800b218 <__ssprint_r>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	f47f aeed 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 80051ea:	3f10      	subs	r7, #16
 80051ec:	2f10      	cmp	r7, #16
 80051ee:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80051f0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80051f2:	a834      	add	r0, sp, #208	; 0xd0
 80051f4:	dce8      	bgt.n	80051c8 <_svfprintf_r+0x3f8>
 80051f6:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80051f8:	463d      	mov	r5, r7
 80051fa:	464f      	mov	r7, r9
 80051fc:	4681      	mov	r9, r0
 80051fe:	3201      	adds	r2, #1
 8005200:	186c      	adds	r4, r5, r1
 8005202:	2a07      	cmp	r2, #7
 8005204:	9429      	str	r4, [sp, #164]	; 0xa4
 8005206:	9228      	str	r2, [sp, #160]	; 0xa0
 8005208:	f8c9 7000 	str.w	r7, [r9]
 800520c:	f8c9 5004 	str.w	r5, [r9, #4]
 8005210:	f300 842d 	bgt.w	8005a6e <_svfprintf_r+0xc9e>
 8005214:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005218:	f109 0908 	add.w	r9, r9, #8
 800521c:	b177      	cbz	r7, 800523c <_svfprintf_r+0x46c>
 800521e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005220:	3301      	adds	r3, #1
 8005222:	3401      	adds	r4, #1
 8005224:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 8005228:	2201      	movs	r2, #1
 800522a:	2b07      	cmp	r3, #7
 800522c:	9429      	str	r4, [sp, #164]	; 0xa4
 800522e:	9328      	str	r3, [sp, #160]	; 0xa0
 8005230:	e889 0006 	stmia.w	r9, {r1, r2}
 8005234:	f300 83a5 	bgt.w	8005982 <_svfprintf_r+0xbb2>
 8005238:	f109 0908 	add.w	r9, r9, #8
 800523c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800523e:	b16b      	cbz	r3, 800525c <_svfprintf_r+0x48c>
 8005240:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005242:	3301      	adds	r3, #1
 8005244:	3402      	adds	r4, #2
 8005246:	a920      	add	r1, sp, #128	; 0x80
 8005248:	2202      	movs	r2, #2
 800524a:	2b07      	cmp	r3, #7
 800524c:	9429      	str	r4, [sp, #164]	; 0xa4
 800524e:	9328      	str	r3, [sp, #160]	; 0xa0
 8005250:	e889 0006 	stmia.w	r9, {r1, r2}
 8005254:	f300 83a1 	bgt.w	800599a <_svfprintf_r+0xbca>
 8005258:	f109 0908 	add.w	r9, r9, #8
 800525c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800525e:	2b80      	cmp	r3, #128	; 0x80
 8005260:	f000 82e1 	beq.w	8005826 <_svfprintf_r+0xa56>
 8005264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005266:	ebc3 070b 	rsb	r7, r3, fp
 800526a:	2f00      	cmp	r7, #0
 800526c:	dd33      	ble.n	80052d6 <_svfprintf_r+0x506>
 800526e:	4a78      	ldr	r2, [pc, #480]	; (8005450 <_svfprintf_r+0x680>)
 8005270:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005272:	920f      	str	r2, [sp, #60]	; 0x3c
 8005274:	2f10      	cmp	r7, #16
 8005276:	dd22      	ble.n	80052be <_svfprintf_r+0x4ee>
 8005278:	4622      	mov	r2, r4
 800527a:	f04f 0b10 	mov.w	fp, #16
 800527e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005280:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005282:	e004      	b.n	800528e <_svfprintf_r+0x4be>
 8005284:	3f10      	subs	r7, #16
 8005286:	2f10      	cmp	r7, #16
 8005288:	f109 0908 	add.w	r9, r9, #8
 800528c:	dd16      	ble.n	80052bc <_svfprintf_r+0x4ec>
 800528e:	3301      	adds	r3, #1
 8005290:	3210      	adds	r2, #16
 8005292:	2b07      	cmp	r3, #7
 8005294:	9229      	str	r2, [sp, #164]	; 0xa4
 8005296:	9328      	str	r3, [sp, #160]	; 0xa0
 8005298:	e889 0c00 	stmia.w	r9, {sl, fp}
 800529c:	ddf2      	ble.n	8005284 <_svfprintf_r+0x4b4>
 800529e:	aa27      	add	r2, sp, #156	; 0x9c
 80052a0:	4621      	mov	r1, r4
 80052a2:	4628      	mov	r0, r5
 80052a4:	f005 ffb8 	bl	800b218 <__ssprint_r>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	f47f ae8b 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 80052ae:	3f10      	subs	r7, #16
 80052b0:	2f10      	cmp	r7, #16
 80052b2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80052b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80052b6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80052ba:	dce8      	bgt.n	800528e <_svfprintf_r+0x4be>
 80052bc:	4614      	mov	r4, r2
 80052be:	3301      	adds	r3, #1
 80052c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80052c2:	9328      	str	r3, [sp, #160]	; 0xa0
 80052c4:	443c      	add	r4, r7
 80052c6:	2b07      	cmp	r3, #7
 80052c8:	9429      	str	r4, [sp, #164]	; 0xa4
 80052ca:	e889 0084 	stmia.w	r9, {r2, r7}
 80052ce:	f300 834c 	bgt.w	800596a <_svfprintf_r+0xb9a>
 80052d2:	f109 0908 	add.w	r9, r9, #8
 80052d6:	9b07      	ldr	r3, [sp, #28]
 80052d8:	05da      	lsls	r2, r3, #23
 80052da:	f100 823a 	bmi.w	8005752 <_svfprintf_r+0x982>
 80052de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80052e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80052e2:	f8c9 6000 	str.w	r6, [r9]
 80052e6:	3301      	adds	r3, #1
 80052e8:	440c      	add	r4, r1
 80052ea:	2b07      	cmp	r3, #7
 80052ec:	9429      	str	r4, [sp, #164]	; 0xa4
 80052ee:	f8c9 1004 	str.w	r1, [r9, #4]
 80052f2:	9328      	str	r3, [sp, #160]	; 0xa0
 80052f4:	f300 8323 	bgt.w	800593e <_svfprintf_r+0xb6e>
 80052f8:	f109 0908 	add.w	r9, r9, #8
 80052fc:	9b07      	ldr	r3, [sp, #28]
 80052fe:	0759      	lsls	r1, r3, #29
 8005300:	d53f      	bpl.n	8005382 <_svfprintf_r+0x5b2>
 8005302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005304:	9a08      	ldr	r2, [sp, #32]
 8005306:	1a9d      	subs	r5, r3, r2
 8005308:	2d00      	cmp	r5, #0
 800530a:	dd3a      	ble.n	8005382 <_svfprintf_r+0x5b2>
 800530c:	2d10      	cmp	r5, #16
 800530e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005310:	4f4e      	ldr	r7, [pc, #312]	; (800544c <_svfprintf_r+0x67c>)
 8005312:	dd23      	ble.n	800535c <_svfprintf_r+0x58c>
 8005314:	4622      	mov	r2, r4
 8005316:	2610      	movs	r6, #16
 8005318:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800531c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800531e:	e004      	b.n	800532a <_svfprintf_r+0x55a>
 8005320:	3d10      	subs	r5, #16
 8005322:	2d10      	cmp	r5, #16
 8005324:	f109 0908 	add.w	r9, r9, #8
 8005328:	dd17      	ble.n	800535a <_svfprintf_r+0x58a>
 800532a:	3301      	adds	r3, #1
 800532c:	4947      	ldr	r1, [pc, #284]	; (800544c <_svfprintf_r+0x67c>)
 800532e:	9328      	str	r3, [sp, #160]	; 0xa0
 8005330:	3210      	adds	r2, #16
 8005332:	2b07      	cmp	r3, #7
 8005334:	9229      	str	r2, [sp, #164]	; 0xa4
 8005336:	e889 0042 	stmia.w	r9, {r1, r6}
 800533a:	ddf1      	ble.n	8005320 <_svfprintf_r+0x550>
 800533c:	aa27      	add	r2, sp, #156	; 0x9c
 800533e:	4621      	mov	r1, r4
 8005340:	4658      	mov	r0, fp
 8005342:	f005 ff69 	bl	800b218 <__ssprint_r>
 8005346:	2800      	cmp	r0, #0
 8005348:	f47f ae3c 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 800534c:	3d10      	subs	r5, #16
 800534e:	2d10      	cmp	r5, #16
 8005350:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005352:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005354:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005358:	dce7      	bgt.n	800532a <_svfprintf_r+0x55a>
 800535a:	4614      	mov	r4, r2
 800535c:	3301      	adds	r3, #1
 800535e:	442c      	add	r4, r5
 8005360:	2b07      	cmp	r3, #7
 8005362:	9429      	str	r4, [sp, #164]	; 0xa4
 8005364:	9328      	str	r3, [sp, #160]	; 0xa0
 8005366:	f8c9 7000 	str.w	r7, [r9]
 800536a:	f8c9 5004 	str.w	r5, [r9, #4]
 800536e:	dd08      	ble.n	8005382 <_svfprintf_r+0x5b2>
 8005370:	aa27      	add	r2, sp, #156	; 0x9c
 8005372:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005374:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005376:	f005 ff4f 	bl	800b218 <__ssprint_r>
 800537a:	2800      	cmp	r0, #0
 800537c:	f47f ae22 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8005380:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005384:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005386:	9908      	ldr	r1, [sp, #32]
 8005388:	428a      	cmp	r2, r1
 800538a:	bfac      	ite	ge
 800538c:	189b      	addge	r3, r3, r2
 800538e:	185b      	addlt	r3, r3, r1
 8005390:	930b      	str	r3, [sp, #44]	; 0x2c
 8005392:	2c00      	cmp	r4, #0
 8005394:	f040 82df 	bne.w	8005956 <_svfprintf_r+0xb86>
 8005398:	2300      	movs	r3, #0
 800539a:	9328      	str	r3, [sp, #160]	; 0xa0
 800539c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80053a0:	e53d      	b.n	8004e1e <_svfprintf_r+0x4e>
 80053a2:	9311      	str	r3, [sp, #68]	; 0x44
 80053a4:	46ab      	mov	fp, r5
 80053a6:	2a00      	cmp	r2, #0
 80053a8:	f041 806a 	bne.w	8006480 <_svfprintf_r+0x16b0>
 80053ac:	9b07      	ldr	r3, [sp, #28]
 80053ae:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80053b0:	071a      	lsls	r2, r3, #28
 80053b2:	f107 0707 	add.w	r7, r7, #7
 80053b6:	f140 8576 	bpl.w	8005ea6 <_svfprintf_r+0x10d6>
 80053ba:	f027 0307 	bic.w	r3, r7, #7
 80053be:	ed93 7b00 	vldr	d7, [r3]
 80053c2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80053c6:	f103 0208 	add.w	r2, r3, #8
 80053ca:	920e      	str	r2, [sp, #56]	; 0x38
 80053cc:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 80053d0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80053d4:	911a      	str	r1, [sp, #104]	; 0x68
 80053d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80053d8:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 80053dc:	f04f 32ff 	mov.w	r2, #4294967295
 80053e0:	4620      	mov	r0, r4
 80053e2:	4629      	mov	r1, r5
 80053e4:	4b1b      	ldr	r3, [pc, #108]	; (8005454 <_svfprintf_r+0x684>)
 80053e6:	f7fe fa9d 	bl	8003924 <__aeabi_dcmpun>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	f040 84da 	bne.w	8005da4 <_svfprintf_r+0xfd4>
 80053f0:	f04f 32ff 	mov.w	r2, #4294967295
 80053f4:	4b17      	ldr	r3, [pc, #92]	; (8005454 <_svfprintf_r+0x684>)
 80053f6:	4620      	mov	r0, r4
 80053f8:	4629      	mov	r1, r5
 80053fa:	f7fe fa75 	bl	80038e8 <__aeabi_dcmple>
 80053fe:	2800      	cmp	r0, #0
 8005400:	f040 84d0 	bne.w	8005da4 <_svfprintf_r+0xfd4>
 8005404:	2200      	movs	r2, #0
 8005406:	2300      	movs	r3, #0
 8005408:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800540c:	f7fe fa62 	bl	80038d4 <__aeabi_dcmplt>
 8005410:	2800      	cmp	r0, #0
 8005412:	f040 875a 	bne.w	80062ca <_svfprintf_r+0x14fa>
 8005416:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800541a:	4e0f      	ldr	r6, [pc, #60]	; (8005458 <_svfprintf_r+0x688>)
 800541c:	4b0f      	ldr	r3, [pc, #60]	; (800545c <_svfprintf_r+0x68c>)
 800541e:	9907      	ldr	r1, [sp, #28]
 8005420:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005424:	9107      	str	r1, [sp, #28]
 8005426:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005428:	2203      	movs	r2, #3
 800542a:	f04f 0b00 	mov.w	fp, #0
 800542e:	9208      	str	r2, [sp, #32]
 8005430:	2947      	cmp	r1, #71	; 0x47
 8005432:	bfd8      	it	le
 8005434:	461e      	movle	r6, r3
 8005436:	920d      	str	r2, [sp, #52]	; 0x34
 8005438:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 800543c:	e69a      	b.n	8005174 <_svfprintf_r+0x3a4>
 800543e:	9b07      	ldr	r3, [sp, #28]
 8005440:	f043 0308 	orr.w	r3, r3, #8
 8005444:	9307      	str	r3, [sp, #28]
 8005446:	f898 3000 	ldrb.w	r3, [r8]
 800544a:	e51b      	b.n	8004e84 <_svfprintf_r+0xb4>
 800544c:	0800bde4 	.word	0x0800bde4
 8005450:	0800bd90 	.word	0x0800bd90
 8005454:	7fefffff 	.word	0x7fefffff
 8005458:	0800bda4 	.word	0x0800bda4
 800545c:	0800bda0 	.word	0x0800bda0
 8005460:	9311      	str	r3, [sp, #68]	; 0x44
 8005462:	46ab      	mov	fp, r5
 8005464:	2a00      	cmp	r2, #0
 8005466:	f041 8017 	bne.w	8006498 <_svfprintf_r+0x16c8>
 800546a:	9b07      	ldr	r3, [sp, #28]
 800546c:	f043 0310 	orr.w	r3, r3, #16
 8005470:	9307      	str	r3, [sp, #28]
 8005472:	9a07      	ldr	r2, [sp, #28]
 8005474:	f012 0320 	ands.w	r3, r2, #32
 8005478:	f47f adba 	bne.w	8004ff0 <_svfprintf_r+0x220>
 800547c:	9907      	ldr	r1, [sp, #28]
 800547e:	f011 0210 	ands.w	r2, r1, #16
 8005482:	f000 845b 	beq.w	8005d3c <_svfprintf_r+0xf6c>
 8005486:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005488:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800548c:	f1bb 0f00 	cmp.w	fp, #0
 8005490:	6804      	ldr	r4, [r0, #0]
 8005492:	f100 0704 	add.w	r7, r0, #4
 8005496:	f04f 0500 	mov.w	r5, #0
 800549a:	f2c0 851b 	blt.w	8005ed4 <_svfprintf_r+0x1104>
 800549e:	460a      	mov	r2, r1
 80054a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054a4:	9207      	str	r2, [sp, #28]
 80054a6:	ea54 0205 	orrs.w	r2, r4, r5
 80054aa:	970e      	str	r7, [sp, #56]	; 0x38
 80054ac:	f000 813a 	beq.w	8005724 <_svfprintf_r+0x954>
 80054b0:	461f      	mov	r7, r3
 80054b2:	e5b3      	b.n	800501c <_svfprintf_r+0x24c>
 80054b4:	9311      	str	r3, [sp, #68]	; 0x44
 80054b6:	46ab      	mov	fp, r5
 80054b8:	2a00      	cmp	r2, #0
 80054ba:	f040 87e9 	bne.w	8006490 <_svfprintf_r+0x16c0>
 80054be:	9b07      	ldr	r3, [sp, #28]
 80054c0:	f043 0310 	orr.w	r3, r3, #16
 80054c4:	9307      	str	r3, [sp, #28]
 80054c6:	9a07      	ldr	r2, [sp, #28]
 80054c8:	f012 0320 	ands.w	r3, r2, #32
 80054cc:	f000 832c 	beq.w	8005b28 <_svfprintf_r+0xd58>
 80054d0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80054d2:	3707      	adds	r7, #7
 80054d4:	f027 0307 	bic.w	r3, r7, #7
 80054d8:	2700      	movs	r7, #0
 80054da:	f103 0108 	add.w	r1, r3, #8
 80054de:	45bb      	cmp	fp, r7
 80054e0:	910e      	str	r1, [sp, #56]	; 0x38
 80054e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80054e6:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80054ea:	f2c0 8356 	blt.w	8005b9a <_svfprintf_r+0xdca>
 80054ee:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80054f2:	9307      	str	r3, [sp, #28]
 80054f4:	ea54 0305 	orrs.w	r3, r4, r5
 80054f8:	f47f ae18 	bne.w	800512c <_svfprintf_r+0x35c>
 80054fc:	f1bb 0f00 	cmp.w	fp, #0
 8005500:	f000 80f5 	beq.w	80056ee <_svfprintf_r+0x91e>
 8005504:	2400      	movs	r4, #0
 8005506:	ae44      	add	r6, sp, #272	; 0x110
 8005508:	3430      	adds	r4, #48	; 0x30
 800550a:	f806 4d41 	strb.w	r4, [r6, #-65]!
 800550e:	e627      	b.n	8005160 <_svfprintf_r+0x390>
 8005510:	9311      	str	r3, [sp, #68]	; 0x44
 8005512:	46ab      	mov	fp, r5
 8005514:	2a00      	cmp	r2, #0
 8005516:	f040 87b7 	bne.w	8006488 <_svfprintf_r+0x16b8>
 800551a:	9b07      	ldr	r3, [sp, #28]
 800551c:	48af      	ldr	r0, [pc, #700]	; (80057dc <_svfprintf_r+0xa0c>)
 800551e:	069d      	lsls	r5, r3, #26
 8005520:	f140 80b5 	bpl.w	800568e <_svfprintf_r+0x8be>
 8005524:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005526:	3707      	adds	r7, #7
 8005528:	f027 0307 	bic.w	r3, r7, #7
 800552c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005530:	f103 0208 	add.w	r2, r3, #8
 8005534:	920e      	str	r2, [sp, #56]	; 0x38
 8005536:	9a07      	ldr	r2, [sp, #28]
 8005538:	f012 0701 	ands.w	r7, r2, #1
 800553c:	f000 8239 	beq.w	80059b2 <_svfprintf_r+0xbe2>
 8005540:	ea54 0305 	orrs.w	r3, r4, r5
 8005544:	f000 8504 	beq.w	8005f50 <_svfprintf_r+0x1180>
 8005548:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800554c:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8005550:	2700      	movs	r7, #0
 8005552:	9a07      	ldr	r2, [sp, #28]
 8005554:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005558:	2330      	movs	r3, #48	; 0x30
 800555a:	45bb      	cmp	fp, r7
 800555c:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8005560:	f042 0302 	orr.w	r3, r2, #2
 8005564:	f2c0 86b6 	blt.w	80062d4 <_svfprintf_r+0x1504>
 8005568:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800556c:	f043 0302 	orr.w	r3, r3, #2
 8005570:	9307      	str	r3, [sp, #28]
 8005572:	ae34      	add	r6, sp, #208	; 0xd0
 8005574:	0923      	lsrs	r3, r4, #4
 8005576:	f004 010f 	and.w	r1, r4, #15
 800557a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800557e:	092a      	lsrs	r2, r5, #4
 8005580:	461c      	mov	r4, r3
 8005582:	4615      	mov	r5, r2
 8005584:	5c43      	ldrb	r3, [r0, r1]
 8005586:	f806 3d01 	strb.w	r3, [r6, #-1]!
 800558a:	ea54 0305 	orrs.w	r3, r4, r5
 800558e:	d1f1      	bne.n	8005574 <_svfprintf_r+0x7a4>
 8005590:	e5e6      	b.n	8005160 <_svfprintf_r+0x390>
 8005592:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005594:	9311      	str	r3, [sp, #68]	; 0x44
 8005596:	680a      	ldr	r2, [r1, #0]
 8005598:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800559c:	2300      	movs	r3, #0
 800559e:	460a      	mov	r2, r1
 80055a0:	461f      	mov	r7, r3
 80055a2:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80055a6:	3204      	adds	r2, #4
 80055a8:	2301      	movs	r3, #1
 80055aa:	9308      	str	r3, [sp, #32]
 80055ac:	46bb      	mov	fp, r7
 80055ae:	9713      	str	r7, [sp, #76]	; 0x4c
 80055b0:	920e      	str	r2, [sp, #56]	; 0x38
 80055b2:	930d      	str	r3, [sp, #52]	; 0x34
 80055b4:	ae2a      	add	r6, sp, #168	; 0xa8
 80055b6:	e5e1      	b.n	800517c <_svfprintf_r+0x3ac>
 80055b8:	9311      	str	r3, [sp, #68]	; 0x44
 80055ba:	46ab      	mov	fp, r5
 80055bc:	2a00      	cmp	r2, #0
 80055be:	f43f ad93 	beq.w	80050e8 <_svfprintf_r+0x318>
 80055c2:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80055c6:	e58f      	b.n	80050e8 <_svfprintf_r+0x318>
 80055c8:	9b07      	ldr	r3, [sp, #28]
 80055ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ce:	9307      	str	r3, [sp, #28]
 80055d0:	f898 3000 	ldrb.w	r3, [r8]
 80055d4:	e456      	b.n	8004e84 <_svfprintf_r+0xb4>
 80055d6:	f898 3000 	ldrb.w	r3, [r8]
 80055da:	2900      	cmp	r1, #0
 80055dc:	f47f ac52 	bne.w	8004e84 <_svfprintf_r+0xb4>
 80055e0:	2201      	movs	r2, #1
 80055e2:	2120      	movs	r1, #32
 80055e4:	e44e      	b.n	8004e84 <_svfprintf_r+0xb4>
 80055e6:	9b07      	ldr	r3, [sp, #28]
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	9307      	str	r3, [sp, #28]
 80055ee:	f898 3000 	ldrb.w	r3, [r8]
 80055f2:	e447      	b.n	8004e84 <_svfprintf_r+0xb4>
 80055f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	930c      	str	r3, [sp, #48]	; 0x30
 80055fa:	4618      	mov	r0, r3
 80055fc:	2800      	cmp	r0, #0
 80055fe:	4623      	mov	r3, r4
 8005600:	f103 0304 	add.w	r3, r3, #4
 8005604:	f6ff aca0 	blt.w	8004f48 <_svfprintf_r+0x178>
 8005608:	930e      	str	r3, [sp, #56]	; 0x38
 800560a:	f898 3000 	ldrb.w	r3, [r8]
 800560e:	e439      	b.n	8004e84 <_svfprintf_r+0xb4>
 8005610:	f898 3000 	ldrb.w	r3, [r8]
 8005614:	2201      	movs	r2, #1
 8005616:	212b      	movs	r1, #43	; 0x2b
 8005618:	e434      	b.n	8004e84 <_svfprintf_r+0xb4>
 800561a:	9b07      	ldr	r3, [sp, #28]
 800561c:	f043 0320 	orr.w	r3, r3, #32
 8005620:	9307      	str	r3, [sp, #28]
 8005622:	f898 3000 	ldrb.w	r3, [r8]
 8005626:	e42d      	b.n	8004e84 <_svfprintf_r+0xb4>
 8005628:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800562a:	9311      	str	r3, [sp, #68]	; 0x44
 800562c:	6816      	ldr	r6, [r2, #0]
 800562e:	2400      	movs	r4, #0
 8005630:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 8005634:	1d17      	adds	r7, r2, #4
 8005636:	2e00      	cmp	r6, #0
 8005638:	f000 8621 	beq.w	800627e <_svfprintf_r+0x14ae>
 800563c:	2d00      	cmp	r5, #0
 800563e:	f2c0 8566 	blt.w	800610e <_svfprintf_r+0x133e>
 8005642:	462a      	mov	r2, r5
 8005644:	4621      	mov	r1, r4
 8005646:	4630      	mov	r0, r6
 8005648:	f004 fe82 	bl	800a350 <memchr>
 800564c:	2800      	cmp	r0, #0
 800564e:	f000 866b 	beq.w	8006328 <_svfprintf_r+0x1558>
 8005652:	1b83      	subs	r3, r0, r6
 8005654:	930d      	str	r3, [sp, #52]	; 0x34
 8005656:	46a3      	mov	fp, r4
 8005658:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800565c:	970e      	str	r7, [sp, #56]	; 0x38
 800565e:	9308      	str	r3, [sp, #32]
 8005660:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8005664:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005668:	e584      	b.n	8005174 <_svfprintf_r+0x3a4>
 800566a:	9311      	str	r3, [sp, #68]	; 0x44
 800566c:	46ab      	mov	fp, r5
 800566e:	2a00      	cmp	r2, #0
 8005670:	f43f af29 	beq.w	80054c6 <_svfprintf_r+0x6f6>
 8005674:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8005678:	e725      	b.n	80054c6 <_svfprintf_r+0x6f6>
 800567a:	9311      	str	r3, [sp, #68]	; 0x44
 800567c:	46ab      	mov	fp, r5
 800567e:	2a00      	cmp	r2, #0
 8005680:	f040 8716 	bne.w	80064b0 <_svfprintf_r+0x16e0>
 8005684:	9b07      	ldr	r3, [sp, #28]
 8005686:	4856      	ldr	r0, [pc, #344]	; (80057e0 <_svfprintf_r+0xa10>)
 8005688:	069d      	lsls	r5, r3, #26
 800568a:	f53f af4b 	bmi.w	8005524 <_svfprintf_r+0x754>
 800568e:	9b07      	ldr	r3, [sp, #28]
 8005690:	06dc      	lsls	r4, r3, #27
 8005692:	f140 8440 	bpl.w	8005f16 <_svfprintf_r+0x1146>
 8005696:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005698:	4613      	mov	r3, r2
 800569a:	3304      	adds	r3, #4
 800569c:	6814      	ldr	r4, [r2, #0]
 800569e:	930e      	str	r3, [sp, #56]	; 0x38
 80056a0:	2500      	movs	r5, #0
 80056a2:	e748      	b.n	8005536 <_svfprintf_r+0x766>
 80056a4:	f898 3000 	ldrb.w	r3, [r8]
 80056a8:	2b6c      	cmp	r3, #108	; 0x6c
 80056aa:	f000 84c4 	beq.w	8006036 <_svfprintf_r+0x1266>
 80056ae:	9807      	ldr	r0, [sp, #28]
 80056b0:	f040 0010 	orr.w	r0, r0, #16
 80056b4:	9007      	str	r0, [sp, #28]
 80056b6:	f7ff bbe5 	b.w	8004e84 <_svfprintf_r+0xb4>
 80056ba:	2a00      	cmp	r2, #0
 80056bc:	f040 86f4 	bne.w	80064a8 <_svfprintf_r+0x16d8>
 80056c0:	9b07      	ldr	r3, [sp, #28]
 80056c2:	069b      	lsls	r3, r3, #26
 80056c4:	f140 8357 	bpl.w	8005d76 <_svfprintf_r+0xfa6>
 80056c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056cc:	6813      	ldr	r3, [r2, #0]
 80056ce:	17cd      	asrs	r5, r1, #31
 80056d0:	4608      	mov	r0, r1
 80056d2:	3204      	adds	r2, #4
 80056d4:	4629      	mov	r1, r5
 80056d6:	920e      	str	r2, [sp, #56]	; 0x38
 80056d8:	e9c3 0100 	strd	r0, r1, [r3]
 80056dc:	f7ff bb9f 	b.w	8004e1e <_svfprintf_r+0x4e>
 80056e0:	483f      	ldr	r0, [pc, #252]	; (80057e0 <_svfprintf_r+0xa10>)
 80056e2:	9211      	str	r2, [sp, #68]	; 0x44
 80056e4:	f1bb 0f00 	cmp.w	fp, #0
 80056e8:	f040 8174 	bne.w	80059d4 <_svfprintf_r+0xc04>
 80056ec:	465f      	mov	r7, fp
 80056ee:	f04f 0b00 	mov.w	fp, #0
 80056f2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80056f6:	ae34      	add	r6, sp, #208	; 0xd0
 80056f8:	e535      	b.n	8005166 <_svfprintf_r+0x396>
 80056fa:	9311      	str	r3, [sp, #68]	; 0x44
 80056fc:	2a00      	cmp	r2, #0
 80056fe:	f040 86cf 	bne.w	80064a0 <_svfprintf_r+0x16d0>
 8005702:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005704:	2a00      	cmp	r2, #0
 8005706:	f43f ac56 	beq.w	8004fb6 <_svfprintf_r+0x1e6>
 800570a:	2300      	movs	r3, #0
 800570c:	2101      	movs	r1, #1
 800570e:	461f      	mov	r7, r3
 8005710:	9108      	str	r1, [sp, #32]
 8005712:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8005716:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800571a:	469b      	mov	fp, r3
 800571c:	9313      	str	r3, [sp, #76]	; 0x4c
 800571e:	910d      	str	r1, [sp, #52]	; 0x34
 8005720:	ae2a      	add	r6, sp, #168	; 0xa8
 8005722:	e52b      	b.n	800517c <_svfprintf_r+0x3ac>
 8005724:	f1bb 0f00 	cmp.w	fp, #0
 8005728:	f000 8616 	beq.w	8006358 <_svfprintf_r+0x1588>
 800572c:	2700      	movs	r7, #0
 800572e:	2400      	movs	r4, #0
 8005730:	2500      	movs	r5, #0
 8005732:	e473      	b.n	800501c <_svfprintf_r+0x24c>
 8005734:	482a      	ldr	r0, [pc, #168]	; (80057e0 <_svfprintf_r+0xa10>)
 8005736:	9307      	str	r3, [sp, #28]
 8005738:	9211      	str	r2, [sp, #68]	; 0x44
 800573a:	ea54 0305 	orrs.w	r3, r4, r5
 800573e:	970e      	str	r7, [sp, #56]	; 0x38
 8005740:	f04f 0700 	mov.w	r7, #0
 8005744:	f47f af15 	bne.w	8005572 <_svfprintf_r+0x7a2>
 8005748:	2400      	movs	r4, #0
 800574a:	2500      	movs	r5, #0
 800574c:	e711      	b.n	8005572 <_svfprintf_r+0x7a2>
 800574e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005750:	e564      	b.n	800521c <_svfprintf_r+0x44c>
 8005752:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005754:	2b65      	cmp	r3, #101	; 0x65
 8005756:	f340 80aa 	ble.w	80058ae <_svfprintf_r+0xade>
 800575a:	2200      	movs	r2, #0
 800575c:	2300      	movs	r3, #0
 800575e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005762:	f7fe f8ad 	bl	80038c0 <__aeabi_dcmpeq>
 8005766:	2800      	cmp	r0, #0
 8005768:	f000 8136 	beq.w	80059d8 <_svfprintf_r+0xc08>
 800576c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800576e:	4a1d      	ldr	r2, [pc, #116]	; (80057e4 <_svfprintf_r+0xa14>)
 8005770:	f8c9 2000 	str.w	r2, [r9]
 8005774:	3301      	adds	r3, #1
 8005776:	3401      	adds	r4, #1
 8005778:	2201      	movs	r2, #1
 800577a:	2b07      	cmp	r3, #7
 800577c:	9429      	str	r4, [sp, #164]	; 0xa4
 800577e:	9328      	str	r3, [sp, #160]	; 0xa0
 8005780:	f8c9 2004 	str.w	r2, [r9, #4]
 8005784:	f300 83f0 	bgt.w	8005f68 <_svfprintf_r+0x1198>
 8005788:	f109 0908 	add.w	r9, r9, #8
 800578c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800578e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005790:	4293      	cmp	r3, r2
 8005792:	db03      	blt.n	800579c <_svfprintf_r+0x9cc>
 8005794:	9b07      	ldr	r3, [sp, #28]
 8005796:	07db      	lsls	r3, r3, #31
 8005798:	f57f adb0 	bpl.w	80052fc <_svfprintf_r+0x52c>
 800579c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800579e:	9916      	ldr	r1, [sp, #88]	; 0x58
 80057a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80057a2:	f8c9 2000 	str.w	r2, [r9]
 80057a6:	3301      	adds	r3, #1
 80057a8:	440c      	add	r4, r1
 80057aa:	2b07      	cmp	r3, #7
 80057ac:	9429      	str	r4, [sp, #164]	; 0xa4
 80057ae:	f8c9 1004 	str.w	r1, [r9, #4]
 80057b2:	9328      	str	r3, [sp, #160]	; 0xa0
 80057b4:	f300 8449 	bgt.w	800604a <_svfprintf_r+0x127a>
 80057b8:	f109 0908 	add.w	r9, r9, #8
 80057bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057be:	1e5d      	subs	r5, r3, #1
 80057c0:	2d00      	cmp	r5, #0
 80057c2:	f77f ad9b 	ble.w	80052fc <_svfprintf_r+0x52c>
 80057c6:	4a08      	ldr	r2, [pc, #32]	; (80057e8 <_svfprintf_r+0xa18>)
 80057c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80057ca:	920f      	str	r2, [sp, #60]	; 0x3c
 80057cc:	2d10      	cmp	r5, #16
 80057ce:	f340 81e9 	ble.w	8005ba4 <_svfprintf_r+0xdd4>
 80057d2:	2610      	movs	r6, #16
 80057d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80057d6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80057da:	e00d      	b.n	80057f8 <_svfprintf_r+0xa28>
 80057dc:	0800bdb0 	.word	0x0800bdb0
 80057e0:	0800bdc4 	.word	0x0800bdc4
 80057e4:	0800bde0 	.word	0x0800bde0
 80057e8:	0800bd90 	.word	0x0800bd90
 80057ec:	f109 0908 	add.w	r9, r9, #8
 80057f0:	3d10      	subs	r5, #16
 80057f2:	2d10      	cmp	r5, #16
 80057f4:	f340 81d6 	ble.w	8005ba4 <_svfprintf_r+0xdd4>
 80057f8:	3301      	adds	r3, #1
 80057fa:	3410      	adds	r4, #16
 80057fc:	2b07      	cmp	r3, #7
 80057fe:	9429      	str	r4, [sp, #164]	; 0xa4
 8005800:	9328      	str	r3, [sp, #160]	; 0xa0
 8005802:	f8c9 a000 	str.w	sl, [r9]
 8005806:	f8c9 6004 	str.w	r6, [r9, #4]
 800580a:	ddef      	ble.n	80057ec <_svfprintf_r+0xa1c>
 800580c:	aa27      	add	r2, sp, #156	; 0x9c
 800580e:	4659      	mov	r1, fp
 8005810:	4638      	mov	r0, r7
 8005812:	f005 fd01 	bl	800b218 <__ssprint_r>
 8005816:	2800      	cmp	r0, #0
 8005818:	f47f abd4 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 800581c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800581e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005820:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005824:	e7e4      	b.n	80057f0 <_svfprintf_r+0xa20>
 8005826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005828:	9a08      	ldr	r2, [sp, #32]
 800582a:	1a9f      	subs	r7, r3, r2
 800582c:	2f00      	cmp	r7, #0
 800582e:	f77f ad19 	ble.w	8005264 <_svfprintf_r+0x494>
 8005832:	4abc      	ldr	r2, [pc, #752]	; (8005b24 <_svfprintf_r+0xd54>)
 8005834:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005836:	920f      	str	r2, [sp, #60]	; 0x3c
 8005838:	2f10      	cmp	r7, #16
 800583a:	dd2b      	ble.n	8005894 <_svfprintf_r+0xac4>
 800583c:	464a      	mov	r2, r9
 800583e:	4621      	mov	r1, r4
 8005840:	46b9      	mov	r9, r7
 8005842:	2510      	movs	r5, #16
 8005844:	4637      	mov	r7, r6
 8005846:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005848:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800584a:	e006      	b.n	800585a <_svfprintf_r+0xa8a>
 800584c:	f1a9 0910 	sub.w	r9, r9, #16
 8005850:	f1b9 0f10 	cmp.w	r9, #16
 8005854:	f102 0208 	add.w	r2, r2, #8
 8005858:	dd18      	ble.n	800588c <_svfprintf_r+0xabc>
 800585a:	3301      	adds	r3, #1
 800585c:	3110      	adds	r1, #16
 800585e:	2b07      	cmp	r3, #7
 8005860:	9129      	str	r1, [sp, #164]	; 0xa4
 8005862:	9328      	str	r3, [sp, #160]	; 0xa0
 8005864:	f8c2 a000 	str.w	sl, [r2]
 8005868:	6055      	str	r5, [r2, #4]
 800586a:	ddef      	ble.n	800584c <_svfprintf_r+0xa7c>
 800586c:	aa27      	add	r2, sp, #156	; 0x9c
 800586e:	4631      	mov	r1, r6
 8005870:	4620      	mov	r0, r4
 8005872:	f005 fcd1 	bl	800b218 <__ssprint_r>
 8005876:	2800      	cmp	r0, #0
 8005878:	f47f aba4 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 800587c:	f1a9 0910 	sub.w	r9, r9, #16
 8005880:	f1b9 0f10 	cmp.w	r9, #16
 8005884:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8005886:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005888:	aa34      	add	r2, sp, #208	; 0xd0
 800588a:	dce6      	bgt.n	800585a <_svfprintf_r+0xa8a>
 800588c:	463e      	mov	r6, r7
 800588e:	460c      	mov	r4, r1
 8005890:	464f      	mov	r7, r9
 8005892:	4691      	mov	r9, r2
 8005894:	3301      	adds	r3, #1
 8005896:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005898:	9328      	str	r3, [sp, #160]	; 0xa0
 800589a:	443c      	add	r4, r7
 800589c:	2b07      	cmp	r3, #7
 800589e:	9429      	str	r4, [sp, #164]	; 0xa4
 80058a0:	e889 0084 	stmia.w	r9, {r2, r7}
 80058a4:	f300 823d 	bgt.w	8005d22 <_svfprintf_r+0xf52>
 80058a8:	f109 0908 	add.w	r9, r9, #8
 80058ac:	e4da      	b.n	8005264 <_svfprintf_r+0x494>
 80058ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058b0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	f340 820a 	ble.w	8005ccc <_svfprintf_r+0xefc>
 80058b8:	3501      	adds	r5, #1
 80058ba:	3401      	adds	r4, #1
 80058bc:	2301      	movs	r3, #1
 80058be:	2d07      	cmp	r5, #7
 80058c0:	9429      	str	r4, [sp, #164]	; 0xa4
 80058c2:	9528      	str	r5, [sp, #160]	; 0xa0
 80058c4:	f8c9 6000 	str.w	r6, [r9]
 80058c8:	f8c9 3004 	str.w	r3, [r9, #4]
 80058cc:	f300 820f 	bgt.w	8005cee <_svfprintf_r+0xf1e>
 80058d0:	f109 0908 	add.w	r9, r9, #8
 80058d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80058d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058d8:	f8c9 3000 	str.w	r3, [r9]
 80058dc:	3501      	adds	r5, #1
 80058de:	4414      	add	r4, r2
 80058e0:	2d07      	cmp	r5, #7
 80058e2:	9429      	str	r4, [sp, #164]	; 0xa4
 80058e4:	9528      	str	r5, [sp, #160]	; 0xa0
 80058e6:	f8c9 2004 	str.w	r2, [r9, #4]
 80058ea:	f300 820d 	bgt.w	8005d08 <_svfprintf_r+0xf38>
 80058ee:	f109 0908 	add.w	r9, r9, #8
 80058f2:	2300      	movs	r3, #0
 80058f4:	2200      	movs	r2, #0
 80058f6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80058fa:	f7fd ffe1 	bl	80038c0 <__aeabi_dcmpeq>
 80058fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005900:	2800      	cmp	r0, #0
 8005902:	f040 80c3 	bne.w	8005a8c <_svfprintf_r+0xcbc>
 8005906:	3b01      	subs	r3, #1
 8005908:	3501      	adds	r5, #1
 800590a:	3601      	adds	r6, #1
 800590c:	441c      	add	r4, r3
 800590e:	2d07      	cmp	r5, #7
 8005910:	9528      	str	r5, [sp, #160]	; 0xa0
 8005912:	9429      	str	r4, [sp, #164]	; 0xa4
 8005914:	f8c9 6000 	str.w	r6, [r9]
 8005918:	f8c9 3004 	str.w	r3, [r9, #4]
 800591c:	f300 80f5 	bgt.w	8005b0a <_svfprintf_r+0xd3a>
 8005920:	f109 0908 	add.w	r9, r9, #8
 8005924:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005926:	f8c9 2004 	str.w	r2, [r9, #4]
 800592a:	3501      	adds	r5, #1
 800592c:	4414      	add	r4, r2
 800592e:	ab23      	add	r3, sp, #140	; 0x8c
 8005930:	2d07      	cmp	r5, #7
 8005932:	9429      	str	r4, [sp, #164]	; 0xa4
 8005934:	9528      	str	r5, [sp, #160]	; 0xa0
 8005936:	f8c9 3000 	str.w	r3, [r9]
 800593a:	f77f acdd 	ble.w	80052f8 <_svfprintf_r+0x528>
 800593e:	aa27      	add	r2, sp, #156	; 0x9c
 8005940:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005942:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005944:	f005 fc68 	bl	800b218 <__ssprint_r>
 8005948:	2800      	cmp	r0, #0
 800594a:	f47f ab3b 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 800594e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005950:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005954:	e4d2      	b.n	80052fc <_svfprintf_r+0x52c>
 8005956:	aa27      	add	r2, sp, #156	; 0x9c
 8005958:	9909      	ldr	r1, [sp, #36]	; 0x24
 800595a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800595c:	f005 fc5c 	bl	800b218 <__ssprint_r>
 8005960:	2800      	cmp	r0, #0
 8005962:	f43f ad19 	beq.w	8005398 <_svfprintf_r+0x5c8>
 8005966:	f7ff bb2d 	b.w	8004fc4 <_svfprintf_r+0x1f4>
 800596a:	aa27      	add	r2, sp, #156	; 0x9c
 800596c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800596e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005970:	f005 fc52 	bl	800b218 <__ssprint_r>
 8005974:	2800      	cmp	r0, #0
 8005976:	f47f ab25 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 800597a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800597c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005980:	e4a9      	b.n	80052d6 <_svfprintf_r+0x506>
 8005982:	aa27      	add	r2, sp, #156	; 0x9c
 8005984:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005986:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005988:	f005 fc46 	bl	800b218 <__ssprint_r>
 800598c:	2800      	cmp	r0, #0
 800598e:	f47f ab19 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8005992:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005994:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005998:	e450      	b.n	800523c <_svfprintf_r+0x46c>
 800599a:	aa27      	add	r2, sp, #156	; 0x9c
 800599c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800599e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80059a0:	f005 fc3a 	bl	800b218 <__ssprint_r>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	f47f ab0d 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 80059aa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80059ac:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80059b0:	e454      	b.n	800525c <_svfprintf_r+0x48c>
 80059b2:	f1bb 0f00 	cmp.w	fp, #0
 80059b6:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80059ba:	f2c0 82e1 	blt.w	8005f80 <_svfprintf_r+0x11b0>
 80059be:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80059c2:	9307      	str	r3, [sp, #28]
 80059c4:	ea54 0305 	orrs.w	r3, r4, r5
 80059c8:	f47f add3 	bne.w	8005572 <_svfprintf_r+0x7a2>
 80059cc:	f1bb 0f00 	cmp.w	fp, #0
 80059d0:	f43f ae8c 	beq.w	80056ec <_svfprintf_r+0x91c>
 80059d4:	2700      	movs	r7, #0
 80059d6:	e6b7      	b.n	8005748 <_svfprintf_r+0x978>
 80059d8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80059da:	2d00      	cmp	r5, #0
 80059dc:	f340 82d3 	ble.w	8005f86 <_svfprintf_r+0x11b6>
 80059e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80059e4:	4293      	cmp	r3, r2
 80059e6:	bfa8      	it	ge
 80059e8:	4613      	movge	r3, r2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	461d      	mov	r5, r3
 80059ee:	dd0d      	ble.n	8005a0c <_svfprintf_r+0xc3c>
 80059f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80059f2:	f8c9 6000 	str.w	r6, [r9]
 80059f6:	3301      	adds	r3, #1
 80059f8:	442c      	add	r4, r5
 80059fa:	2b07      	cmp	r3, #7
 80059fc:	9429      	str	r4, [sp, #164]	; 0xa4
 80059fe:	f8c9 5004 	str.w	r5, [r9, #4]
 8005a02:	9328      	str	r3, [sp, #160]	; 0xa0
 8005a04:	f300 83ae 	bgt.w	8006164 <_svfprintf_r+0x1394>
 8005a08:	f109 0908 	add.w	r9, r9, #8
 8005a0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a0e:	2d00      	cmp	r5, #0
 8005a10:	bfa8      	it	ge
 8005a12:	1b5b      	subge	r3, r3, r5
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	461d      	mov	r5, r3
 8005a18:	f340 80f8 	ble.w	8005c0c <_svfprintf_r+0xe3c>
 8005a1c:	4a41      	ldr	r2, [pc, #260]	; (8005b24 <_svfprintf_r+0xd54>)
 8005a1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005a20:	920f      	str	r2, [sp, #60]	; 0x3c
 8005a22:	2d10      	cmp	r5, #16
 8005a24:	f340 8285 	ble.w	8005f32 <_svfprintf_r+0x1162>
 8005a28:	4622      	mov	r2, r4
 8005a2a:	2710      	movs	r7, #16
 8005a2c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005a30:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005a32:	e005      	b.n	8005a40 <_svfprintf_r+0xc70>
 8005a34:	f109 0908 	add.w	r9, r9, #8
 8005a38:	3d10      	subs	r5, #16
 8005a3a:	2d10      	cmp	r5, #16
 8005a3c:	f340 8278 	ble.w	8005f30 <_svfprintf_r+0x1160>
 8005a40:	3301      	adds	r3, #1
 8005a42:	3210      	adds	r2, #16
 8005a44:	2b07      	cmp	r3, #7
 8005a46:	9229      	str	r2, [sp, #164]	; 0xa4
 8005a48:	9328      	str	r3, [sp, #160]	; 0xa0
 8005a4a:	f8c9 a000 	str.w	sl, [r9]
 8005a4e:	f8c9 7004 	str.w	r7, [r9, #4]
 8005a52:	ddef      	ble.n	8005a34 <_svfprintf_r+0xc64>
 8005a54:	aa27      	add	r2, sp, #156	; 0x9c
 8005a56:	4621      	mov	r1, r4
 8005a58:	4658      	mov	r0, fp
 8005a5a:	f005 fbdd 	bl	800b218 <__ssprint_r>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	f47f aab0 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8005a64:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8005a66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005a68:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005a6c:	e7e4      	b.n	8005a38 <_svfprintf_r+0xc68>
 8005a6e:	aa27      	add	r2, sp, #156	; 0x9c
 8005a70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005a74:	f005 fbd0 	bl	800b218 <__ssprint_r>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	f47f aaa3 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8005a7e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005a82:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005a84:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005a88:	f7ff bbc8 	b.w	800521c <_svfprintf_r+0x44c>
 8005a8c:	1e5e      	subs	r6, r3, #1
 8005a8e:	2e00      	cmp	r6, #0
 8005a90:	f77f af48 	ble.w	8005924 <_svfprintf_r+0xb54>
 8005a94:	4b23      	ldr	r3, [pc, #140]	; (8005b24 <_svfprintf_r+0xd54>)
 8005a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a98:	2e10      	cmp	r6, #16
 8005a9a:	dd2c      	ble.n	8005af6 <_svfprintf_r+0xd26>
 8005a9c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8005aa0:	2710      	movs	r7, #16
 8005aa2:	46b0      	mov	r8, r6
 8005aa4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005aa8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005aaa:	e006      	b.n	8005aba <_svfprintf_r+0xcea>
 8005aac:	f1a8 0810 	sub.w	r8, r8, #16
 8005ab0:	f1b8 0f10 	cmp.w	r8, #16
 8005ab4:	f109 0908 	add.w	r9, r9, #8
 8005ab8:	dd1a      	ble.n	8005af0 <_svfprintf_r+0xd20>
 8005aba:	3501      	adds	r5, #1
 8005abc:	3410      	adds	r4, #16
 8005abe:	2d07      	cmp	r5, #7
 8005ac0:	9429      	str	r4, [sp, #164]	; 0xa4
 8005ac2:	9528      	str	r5, [sp, #160]	; 0xa0
 8005ac4:	f8c9 a000 	str.w	sl, [r9]
 8005ac8:	f8c9 7004 	str.w	r7, [r9, #4]
 8005acc:	ddee      	ble.n	8005aac <_svfprintf_r+0xcdc>
 8005ace:	aa27      	add	r2, sp, #156	; 0x9c
 8005ad0:	4631      	mov	r1, r6
 8005ad2:	4658      	mov	r0, fp
 8005ad4:	f005 fba0 	bl	800b218 <__ssprint_r>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	f47f aa73 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8005ade:	f1a8 0810 	sub.w	r8, r8, #16
 8005ae2:	f1b8 0f10 	cmp.w	r8, #16
 8005ae6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005ae8:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8005aea:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005aee:	dce4      	bgt.n	8005aba <_svfprintf_r+0xcea>
 8005af0:	4646      	mov	r6, r8
 8005af2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8005af6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005af8:	3501      	adds	r5, #1
 8005afa:	4434      	add	r4, r6
 8005afc:	2d07      	cmp	r5, #7
 8005afe:	9429      	str	r4, [sp, #164]	; 0xa4
 8005b00:	9528      	str	r5, [sp, #160]	; 0xa0
 8005b02:	e889 0048 	stmia.w	r9, {r3, r6}
 8005b06:	f77f af0b 	ble.w	8005920 <_svfprintf_r+0xb50>
 8005b0a:	aa27      	add	r2, sp, #156	; 0x9c
 8005b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b0e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005b10:	f005 fb82 	bl	800b218 <__ssprint_r>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	f47f aa55 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8005b1a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005b1c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8005b1e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005b22:	e6ff      	b.n	8005924 <_svfprintf_r+0xb54>
 8005b24:	0800bd90 	.word	0x0800bd90
 8005b28:	9907      	ldr	r1, [sp, #28]
 8005b2a:	f011 0210 	ands.w	r2, r1, #16
 8005b2e:	f000 81d5 	beq.w	8005edc <_svfprintf_r+0x110c>
 8005b32:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005b34:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005b38:	f1bb 0f00 	cmp.w	fp, #0
 8005b3c:	6804      	ldr	r4, [r0, #0]
 8005b3e:	f100 0704 	add.w	r7, r0, #4
 8005b42:	f04f 0500 	mov.w	r5, #0
 8005b46:	db26      	blt.n	8005b96 <_svfprintf_r+0xdc6>
 8005b48:	460a      	mov	r2, r1
 8005b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b4e:	9207      	str	r2, [sp, #28]
 8005b50:	ea54 0205 	orrs.w	r2, r4, r5
 8005b54:	970e      	str	r7, [sp, #56]	; 0x38
 8005b56:	461f      	mov	r7, r3
 8005b58:	f47f aae8 	bne.w	800512c <_svfprintf_r+0x35c>
 8005b5c:	e4ce      	b.n	80054fc <_svfprintf_r+0x72c>
 8005b5e:	9b07      	ldr	r3, [sp, #28]
 8005b60:	06d8      	lsls	r0, r3, #27
 8005b62:	d42a      	bmi.n	8005bba <_svfprintf_r+0xdea>
 8005b64:	9b07      	ldr	r3, [sp, #28]
 8005b66:	0659      	lsls	r1, r3, #25
 8005b68:	d527      	bpl.n	8005bba <_svfprintf_r+0xdea>
 8005b6a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005b6c:	f9b1 4000 	ldrsh.w	r4, [r1]
 8005b70:	3104      	adds	r1, #4
 8005b72:	17e5      	asrs	r5, r4, #31
 8005b74:	4622      	mov	r2, r4
 8005b76:	462b      	mov	r3, r5
 8005b78:	910e      	str	r1, [sp, #56]	; 0x38
 8005b7a:	f7ff bac4 	b.w	8005106 <_svfprintf_r+0x336>
 8005b7e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005b80:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005b84:	f1bb 0f00 	cmp.w	fp, #0
 8005b88:	680c      	ldr	r4, [r1, #0]
 8005b8a:	f101 0704 	add.w	r7, r1, #4
 8005b8e:	f04f 0500 	mov.w	r5, #0
 8005b92:	f280 824e 	bge.w	8006032 <_svfprintf_r+0x1262>
 8005b96:	970e      	str	r7, [sp, #56]	; 0x38
 8005b98:	461f      	mov	r7, r3
 8005b9a:	ea54 0305 	orrs.w	r3, r4, r5
 8005b9e:	f47f aac5 	bne.w	800512c <_svfprintf_r+0x35c>
 8005ba2:	e4b0      	b.n	8005506 <_svfprintf_r+0x736>
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ba8:	9328      	str	r3, [sp, #160]	; 0xa0
 8005baa:	442c      	add	r4, r5
 8005bac:	2b07      	cmp	r3, #7
 8005bae:	9429      	str	r4, [sp, #164]	; 0xa4
 8005bb0:	e889 0024 	stmia.w	r9, {r2, r5}
 8005bb4:	f77f aba0 	ble.w	80052f8 <_svfprintf_r+0x528>
 8005bb8:	e6c1      	b.n	800593e <_svfprintf_r+0xb6e>
 8005bba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bbc:	6814      	ldr	r4, [r2, #0]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	17e5      	asrs	r5, r4, #31
 8005bc4:	4622      	mov	r2, r4
 8005bc6:	930e      	str	r3, [sp, #56]	; 0x38
 8005bc8:	2a00      	cmp	r2, #0
 8005bca:	462b      	mov	r3, r5
 8005bcc:	f173 0300 	sbcs.w	r3, r3, #0
 8005bd0:	f6bf aa9e 	bge.w	8005110 <_svfprintf_r+0x340>
 8005bd4:	4264      	negs	r4, r4
 8005bd6:	f04f 072d 	mov.w	r7, #45	; 0x2d
 8005bda:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8005bde:	f1bb 0f00 	cmp.w	fp, #0
 8005be2:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005be6:	f6ff aaa1 	blt.w	800512c <_svfprintf_r+0x35c>
 8005bea:	9b07      	ldr	r3, [sp, #28]
 8005bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bf0:	9307      	str	r3, [sp, #28]
 8005bf2:	f7ff ba9b 	b.w	800512c <_svfprintf_r+0x35c>
 8005bf6:	aa27      	add	r2, sp, #156	; 0x9c
 8005bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bfa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005bfc:	f005 fb0c 	bl	800b218 <__ssprint_r>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	f47f a9df 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8005c06:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005c08:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005c0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c10:	4432      	add	r2, r6
 8005c12:	4617      	mov	r7, r2
 8005c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c16:	4293      	cmp	r3, r2
 8005c18:	db47      	blt.n	8005caa <_svfprintf_r+0xeda>
 8005c1a:	9a07      	ldr	r2, [sp, #28]
 8005c1c:	07d5      	lsls	r5, r2, #31
 8005c1e:	d444      	bmi.n	8005caa <_svfprintf_r+0xeda>
 8005c20:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005c22:	440e      	add	r6, r1
 8005c24:	1bf5      	subs	r5, r6, r7
 8005c26:	1acb      	subs	r3, r1, r3
 8005c28:	429d      	cmp	r5, r3
 8005c2a:	bfa8      	it	ge
 8005c2c:	461d      	movge	r5, r3
 8005c2e:	2d00      	cmp	r5, #0
 8005c30:	462e      	mov	r6, r5
 8005c32:	dd0d      	ble.n	8005c50 <_svfprintf_r+0xe80>
 8005c34:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8005c36:	f8c9 7000 	str.w	r7, [r9]
 8005c3a:	3201      	adds	r2, #1
 8005c3c:	442c      	add	r4, r5
 8005c3e:	2a07      	cmp	r2, #7
 8005c40:	9429      	str	r4, [sp, #164]	; 0xa4
 8005c42:	f8c9 5004 	str.w	r5, [r9, #4]
 8005c46:	9228      	str	r2, [sp, #160]	; 0xa0
 8005c48:	f300 830a 	bgt.w	8006260 <_svfprintf_r+0x1490>
 8005c4c:	f109 0908 	add.w	r9, r9, #8
 8005c50:	2e00      	cmp	r6, #0
 8005c52:	bfac      	ite	ge
 8005c54:	1b9d      	subge	r5, r3, r6
 8005c56:	461d      	movlt	r5, r3
 8005c58:	2d00      	cmp	r5, #0
 8005c5a:	f77f ab4f 	ble.w	80052fc <_svfprintf_r+0x52c>
 8005c5e:	4abb      	ldr	r2, [pc, #748]	; (8005f4c <_svfprintf_r+0x117c>)
 8005c60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005c62:	920f      	str	r2, [sp, #60]	; 0x3c
 8005c64:	2d10      	cmp	r5, #16
 8005c66:	dd9d      	ble.n	8005ba4 <_svfprintf_r+0xdd4>
 8005c68:	2610      	movs	r6, #16
 8005c6a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005c6c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8005c70:	e004      	b.n	8005c7c <_svfprintf_r+0xeac>
 8005c72:	f109 0908 	add.w	r9, r9, #8
 8005c76:	3d10      	subs	r5, #16
 8005c78:	2d10      	cmp	r5, #16
 8005c7a:	dd93      	ble.n	8005ba4 <_svfprintf_r+0xdd4>
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	3410      	adds	r4, #16
 8005c80:	2b07      	cmp	r3, #7
 8005c82:	9429      	str	r4, [sp, #164]	; 0xa4
 8005c84:	9328      	str	r3, [sp, #160]	; 0xa0
 8005c86:	f8c9 a000 	str.w	sl, [r9]
 8005c8a:	f8c9 6004 	str.w	r6, [r9, #4]
 8005c8e:	ddf0      	ble.n	8005c72 <_svfprintf_r+0xea2>
 8005c90:	aa27      	add	r2, sp, #156	; 0x9c
 8005c92:	4659      	mov	r1, fp
 8005c94:	4638      	mov	r0, r7
 8005c96:	f005 fabf 	bl	800b218 <__ssprint_r>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	f47f a992 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8005ca0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005ca2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005ca4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005ca8:	e7e5      	b.n	8005c76 <_svfprintf_r+0xea6>
 8005caa:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8005cac:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005cae:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8005cb0:	f8c9 1000 	str.w	r1, [r9]
 8005cb4:	3201      	adds	r2, #1
 8005cb6:	4404      	add	r4, r0
 8005cb8:	2a07      	cmp	r2, #7
 8005cba:	9429      	str	r4, [sp, #164]	; 0xa4
 8005cbc:	f8c9 0004 	str.w	r0, [r9, #4]
 8005cc0:	9228      	str	r2, [sp, #160]	; 0xa0
 8005cc2:	f300 82b9 	bgt.w	8006238 <_svfprintf_r+0x1468>
 8005cc6:	f109 0908 	add.w	r9, r9, #8
 8005cca:	e7a9      	b.n	8005c20 <_svfprintf_r+0xe50>
 8005ccc:	9b07      	ldr	r3, [sp, #28]
 8005cce:	07d8      	lsls	r0, r3, #31
 8005cd0:	f53f adf2 	bmi.w	80058b8 <_svfprintf_r+0xae8>
 8005cd4:	3501      	adds	r5, #1
 8005cd6:	3401      	adds	r4, #1
 8005cd8:	2301      	movs	r3, #1
 8005cda:	2d07      	cmp	r5, #7
 8005cdc:	9429      	str	r4, [sp, #164]	; 0xa4
 8005cde:	9528      	str	r5, [sp, #160]	; 0xa0
 8005ce0:	f8c9 6000 	str.w	r6, [r9]
 8005ce4:	f8c9 3004 	str.w	r3, [r9, #4]
 8005ce8:	f77f ae1a 	ble.w	8005920 <_svfprintf_r+0xb50>
 8005cec:	e70d      	b.n	8005b0a <_svfprintf_r+0xd3a>
 8005cee:	aa27      	add	r2, sp, #156	; 0x9c
 8005cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cf2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005cf4:	f005 fa90 	bl	800b218 <__ssprint_r>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	f47f a963 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8005cfe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005d00:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8005d02:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005d06:	e5e5      	b.n	80058d4 <_svfprintf_r+0xb04>
 8005d08:	aa27      	add	r2, sp, #156	; 0x9c
 8005d0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d0c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d0e:	f005 fa83 	bl	800b218 <__ssprint_r>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	f47f a956 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8005d18:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005d1a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8005d1c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005d20:	e5e7      	b.n	80058f2 <_svfprintf_r+0xb22>
 8005d22:	aa27      	add	r2, sp, #156	; 0x9c
 8005d24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d26:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d28:	f005 fa76 	bl	800b218 <__ssprint_r>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	f47f a949 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8005d32:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005d34:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005d38:	f7ff ba94 	b.w	8005264 <_svfprintf_r+0x494>
 8005d3c:	9907      	ldr	r1, [sp, #28]
 8005d3e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8005d42:	f000 80bb 	beq.w	8005ebc <_svfprintf_r+0x10ec>
 8005d46:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005d48:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f1bb 0f00 	cmp.w	fp, #0
 8005d52:	f103 0304 	add.w	r3, r3, #4
 8005d56:	8804      	ldrh	r4, [r0, #0]
 8005d58:	f04f 0500 	mov.w	r5, #0
 8005d5c:	f2c0 81c5 	blt.w	80060ea <_svfprintf_r+0x131a>
 8005d60:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005d64:	9107      	str	r1, [sp, #28]
 8005d66:	ea54 0105 	orrs.w	r1, r4, r5
 8005d6a:	930e      	str	r3, [sp, #56]	; 0x38
 8005d6c:	f43f acda 	beq.w	8005724 <_svfprintf_r+0x954>
 8005d70:	4617      	mov	r7, r2
 8005d72:	f7ff b953 	b.w	800501c <_svfprintf_r+0x24c>
 8005d76:	9b07      	ldr	r3, [sp, #28]
 8005d78:	06df      	lsls	r7, r3, #27
 8005d7a:	d40b      	bmi.n	8005d94 <_svfprintf_r+0xfc4>
 8005d7c:	9b07      	ldr	r3, [sp, #28]
 8005d7e:	065e      	lsls	r6, r3, #25
 8005d80:	d508      	bpl.n	8005d94 <_svfprintf_r+0xfc4>
 8005d82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d84:	6813      	ldr	r3, [r2, #0]
 8005d86:	3204      	adds	r2, #4
 8005d88:	920e      	str	r2, [sp, #56]	; 0x38
 8005d8a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	f7ff b845 	b.w	8004e1e <_svfprintf_r+0x4e>
 8005d94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d96:	6813      	ldr	r3, [r2, #0]
 8005d98:	3204      	adds	r2, #4
 8005d9a:	920e      	str	r2, [sp, #56]	; 0x38
 8005d9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f7ff b83d 	b.w	8004e1e <_svfprintf_r+0x4e>
 8005da4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	f7fd fdba 	bl	8003924 <__aeabi_dcmpun>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	f040 8305 	bne.w	80063c0 <_svfprintf_r+0x15f0>
 8005db6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005db8:	f1bb 3fff 	cmp.w	fp, #4294967295
 8005dbc:	f023 0720 	bic.w	r7, r3, #32
 8005dc0:	f000 826c 	beq.w	800629c <_svfprintf_r+0x14cc>
 8005dc4:	2f47      	cmp	r7, #71	; 0x47
 8005dc6:	f000 8187 	beq.w	80060d8 <_svfprintf_r+0x1308>
 8005dca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005dcc:	9a07      	ldr	r2, [sp, #28]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dd4:	920f      	str	r2, [sp, #60]	; 0x3c
 8005dd6:	f2c0 8280 	blt.w	80062da <_svfprintf_r+0x150a>
 8005dda:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 8005dde:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8005de2:	2300      	movs	r3, #0
 8005de4:	9308      	str	r3, [sp, #32]
 8005de6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005de8:	2b66      	cmp	r3, #102	; 0x66
 8005dea:	f000 825a 	beq.w	80062a2 <_svfprintf_r+0x14d2>
 8005dee:	2b46      	cmp	r3, #70	; 0x46
 8005df0:	f000 8147 	beq.w	8006082 <_svfprintf_r+0x12b2>
 8005df4:	2f45      	cmp	r7, #69	; 0x45
 8005df6:	bf0c      	ite	eq
 8005df8:	f10b 0501 	addeq.w	r5, fp, #1
 8005dfc:	465d      	movne	r5, fp
 8005dfe:	a825      	add	r0, sp, #148	; 0x94
 8005e00:	a922      	add	r1, sp, #136	; 0x88
 8005e02:	aa21      	add	r2, sp, #132	; 0x84
 8005e04:	2302      	movs	r3, #2
 8005e06:	9004      	str	r0, [sp, #16]
 8005e08:	9202      	str	r2, [sp, #8]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	9501      	str	r5, [sp, #4]
 8005e0e:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8005e12:	9103      	str	r1, [sp, #12]
 8005e14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005e16:	f002 f847 	bl	8007ea8 <_dtoa_r>
 8005e1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e1c:	2b67      	cmp	r3, #103	; 0x67
 8005e1e:	4606      	mov	r6, r0
 8005e20:	f040 8271 	bne.w	8006306 <_svfprintf_r+0x1536>
 8005e24:	9b07      	ldr	r3, [sp, #28]
 8005e26:	07da      	lsls	r2, r3, #31
 8005e28:	f140 82bf 	bpl.w	80063aa <_svfprintf_r+0x15da>
 8005e2c:	1974      	adds	r4, r6, r5
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2300      	movs	r3, #0
 8005e32:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8005e36:	f7fd fd43 	bl	80038c0 <__aeabi_dcmpeq>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	f040 8190 	bne.w	8006160 <_svfprintf_r+0x1390>
 8005e40:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005e42:	429c      	cmp	r4, r3
 8005e44:	d906      	bls.n	8005e54 <_svfprintf_r+0x1084>
 8005e46:	2130      	movs	r1, #48	; 0x30
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	9225      	str	r2, [sp, #148]	; 0x94
 8005e4c:	7019      	strb	r1, [r3, #0]
 8005e4e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005e50:	429c      	cmp	r4, r3
 8005e52:	d8f9      	bhi.n	8005e48 <_svfprintf_r+0x1078>
 8005e54:	1b9b      	subs	r3, r3, r6
 8005e56:	2f47      	cmp	r7, #71	; 0x47
 8005e58:	9312      	str	r3, [sp, #72]	; 0x48
 8005e5a:	f000 817a 	beq.w	8006152 <_svfprintf_r+0x1382>
 8005e5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e60:	2b65      	cmp	r3, #101	; 0x65
 8005e62:	f340 825f 	ble.w	8006324 <_svfprintf_r+0x1554>
 8005e66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e68:	2b66      	cmp	r3, #102	; 0x66
 8005e6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e6e:	f000 8266 	beq.w	800633e <_svfprintf_r+0x156e>
 8005e72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e74:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005e76:	428a      	cmp	r2, r1
 8005e78:	f2c0 8238 	blt.w	80062ec <_svfprintf_r+0x151c>
 8005e7c:	9b07      	ldr	r3, [sp, #28]
 8005e7e:	07d9      	lsls	r1, r3, #31
 8005e80:	f100 8295 	bmi.w	80063ae <_svfprintf_r+0x15de>
 8005e84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005e88:	920d      	str	r2, [sp, #52]	; 0x34
 8005e8a:	2267      	movs	r2, #103	; 0x67
 8005e8c:	9211      	str	r2, [sp, #68]	; 0x44
 8005e8e:	9a08      	ldr	r2, [sp, #32]
 8005e90:	2a00      	cmp	r2, #0
 8005e92:	f040 8132 	bne.w	80060fa <_svfprintf_r+0x132a>
 8005e96:	9308      	str	r3, [sp, #32]
 8005e98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e9a:	9307      	str	r3, [sp, #28]
 8005e9c:	4693      	mov	fp, r2
 8005e9e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8005ea2:	f7ff b967 	b.w	8005174 <_svfprintf_r+0x3a4>
 8005ea6:	f027 0707 	bic.w	r7, r7, #7
 8005eaa:	ed97 7b00 	vldr	d7, [r7]
 8005eae:	f107 0308 	add.w	r3, r7, #8
 8005eb2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8005eb6:	930e      	str	r3, [sp, #56]	; 0x38
 8005eb8:	f7ff ba88 	b.w	80053cc <_svfprintf_r+0x5fc>
 8005ebc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005ebe:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8005ec2:	f1bb 0f00 	cmp.w	fp, #0
 8005ec6:	680c      	ldr	r4, [r1, #0]
 8005ec8:	f101 0704 	add.w	r7, r1, #4
 8005ecc:	f04f 0500 	mov.w	r5, #0
 8005ed0:	f280 80ac 	bge.w	800602c <_svfprintf_r+0x125c>
 8005ed4:	970e      	str	r7, [sp, #56]	; 0x38
 8005ed6:	2700      	movs	r7, #0
 8005ed8:	f7ff b8a0 	b.w	800501c <_svfprintf_r+0x24c>
 8005edc:	9907      	ldr	r1, [sp, #28]
 8005ede:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 8005ee2:	f43f ae4c 	beq.w	8005b7e <_svfprintf_r+0xdae>
 8005ee6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005ee8:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 8005eec:	4603      	mov	r3, r0
 8005eee:	f1bb 0f00 	cmp.w	fp, #0
 8005ef2:	f103 0304 	add.w	r3, r3, #4
 8005ef6:	8804      	ldrh	r4, [r0, #0]
 8005ef8:	f04f 0500 	mov.w	r5, #0
 8005efc:	f2c0 80f2 	blt.w	80060e4 <_svfprintf_r+0x1314>
 8005f00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005f04:	9107      	str	r1, [sp, #28]
 8005f06:	ea54 0105 	orrs.w	r1, r4, r5
 8005f0a:	930e      	str	r3, [sp, #56]	; 0x38
 8005f0c:	4617      	mov	r7, r2
 8005f0e:	f47f a90d 	bne.w	800512c <_svfprintf_r+0x35c>
 8005f12:	f7ff baf3 	b.w	80054fc <_svfprintf_r+0x72c>
 8005f16:	9b07      	ldr	r3, [sp, #28]
 8005f18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f1a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f1e:	4613      	mov	r3, r2
 8005f20:	f000 80e5 	beq.w	80060ee <_svfprintf_r+0x131e>
 8005f24:	3304      	adds	r3, #4
 8005f26:	8814      	ldrh	r4, [r2, #0]
 8005f28:	930e      	str	r3, [sp, #56]	; 0x38
 8005f2a:	2500      	movs	r5, #0
 8005f2c:	f7ff bb03 	b.w	8005536 <_svfprintf_r+0x766>
 8005f30:	4614      	mov	r4, r2
 8005f32:	3301      	adds	r3, #1
 8005f34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005f36:	9328      	str	r3, [sp, #160]	; 0xa0
 8005f38:	442c      	add	r4, r5
 8005f3a:	2b07      	cmp	r3, #7
 8005f3c:	9429      	str	r4, [sp, #164]	; 0xa4
 8005f3e:	e889 0024 	stmia.w	r9, {r2, r5}
 8005f42:	f73f ae58 	bgt.w	8005bf6 <_svfprintf_r+0xe26>
 8005f46:	f109 0908 	add.w	r9, r9, #8
 8005f4a:	e65f      	b.n	8005c0c <_svfprintf_r+0xe3c>
 8005f4c:	0800bd90 	.word	0x0800bd90
 8005f50:	2700      	movs	r7, #0
 8005f52:	45bb      	cmp	fp, r7
 8005f54:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8005f58:	f6ff abf6 	blt.w	8005748 <_svfprintf_r+0x978>
 8005f5c:	9b07      	ldr	r3, [sp, #28]
 8005f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f62:	9307      	str	r3, [sp, #28]
 8005f64:	f7ff bbbe 	b.w	80056e4 <_svfprintf_r+0x914>
 8005f68:	aa27      	add	r2, sp, #156	; 0x9c
 8005f6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f6c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005f6e:	f005 f953 	bl	800b218 <__ssprint_r>
 8005f72:	2800      	cmp	r0, #0
 8005f74:	f47f a826 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8005f78:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8005f7a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8005f7e:	e405      	b.n	800578c <_svfprintf_r+0x9bc>
 8005f80:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005f82:	f7ff bbda 	b.w	800573a <_svfprintf_r+0x96a>
 8005f86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005f88:	4ab2      	ldr	r2, [pc, #712]	; (8006254 <_svfprintf_r+0x1484>)
 8005f8a:	f8c9 2000 	str.w	r2, [r9]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	3401      	adds	r4, #1
 8005f92:	2201      	movs	r2, #1
 8005f94:	2b07      	cmp	r3, #7
 8005f96:	9429      	str	r4, [sp, #164]	; 0xa4
 8005f98:	9328      	str	r3, [sp, #160]	; 0xa0
 8005f9a:	f8c9 2004 	str.w	r2, [r9, #4]
 8005f9e:	f300 808e 	bgt.w	80060be <_svfprintf_r+0x12ee>
 8005fa2:	f109 0908 	add.w	r9, r9, #8
 8005fa6:	b92d      	cbnz	r5, 8005fb4 <_svfprintf_r+0x11e4>
 8005fa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005faa:	b91b      	cbnz	r3, 8005fb4 <_svfprintf_r+0x11e4>
 8005fac:	9b07      	ldr	r3, [sp, #28]
 8005fae:	07df      	lsls	r7, r3, #31
 8005fb0:	f57f a9a4 	bpl.w	80052fc <_svfprintf_r+0x52c>
 8005fb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005fb6:	9916      	ldr	r1, [sp, #88]	; 0x58
 8005fb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005fba:	f8c9 2000 	str.w	r2, [r9]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	440c      	add	r4, r1
 8005fc2:	2b07      	cmp	r3, #7
 8005fc4:	9429      	str	r4, [sp, #164]	; 0xa4
 8005fc6:	f8c9 1004 	str.w	r1, [r9, #4]
 8005fca:	9328      	str	r3, [sp, #160]	; 0xa0
 8005fcc:	f300 81d3 	bgt.w	8006376 <_svfprintf_r+0x15a6>
 8005fd0:	f109 0908 	add.w	r9, r9, #8
 8005fd4:	426d      	negs	r5, r5
 8005fd6:	2d00      	cmp	r5, #0
 8005fd8:	f340 80ad 	ble.w	8006136 <_svfprintf_r+0x1366>
 8005fdc:	4a9e      	ldr	r2, [pc, #632]	; (8006258 <_svfprintf_r+0x1488>)
 8005fde:	920f      	str	r2, [sp, #60]	; 0x3c
 8005fe0:	2d10      	cmp	r5, #16
 8005fe2:	f340 80cc 	ble.w	800617e <_svfprintf_r+0x13ae>
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	2710      	movs	r7, #16
 8005fea:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005fee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005ff0:	e005      	b.n	8005ffe <_svfprintf_r+0x122e>
 8005ff2:	f109 0908 	add.w	r9, r9, #8
 8005ff6:	3d10      	subs	r5, #16
 8005ff8:	2d10      	cmp	r5, #16
 8005ffa:	f340 80bf 	ble.w	800617c <_svfprintf_r+0x13ac>
 8005ffe:	3301      	adds	r3, #1
 8006000:	3210      	adds	r2, #16
 8006002:	2b07      	cmp	r3, #7
 8006004:	9229      	str	r2, [sp, #164]	; 0xa4
 8006006:	9328      	str	r3, [sp, #160]	; 0xa0
 8006008:	f8c9 a000 	str.w	sl, [r9]
 800600c:	f8c9 7004 	str.w	r7, [r9, #4]
 8006010:	ddef      	ble.n	8005ff2 <_svfprintf_r+0x1222>
 8006012:	aa27      	add	r2, sp, #156	; 0x9c
 8006014:	4621      	mov	r1, r4
 8006016:	4658      	mov	r0, fp
 8006018:	f005 f8fe 	bl	800b218 <__ssprint_r>
 800601c:	2800      	cmp	r0, #0
 800601e:	f47e afd1 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8006022:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006024:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006026:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800602a:	e7e4      	b.n	8005ff6 <_svfprintf_r+0x1226>
 800602c:	9a07      	ldr	r2, [sp, #28]
 800602e:	f7ff ba37 	b.w	80054a0 <_svfprintf_r+0x6d0>
 8006032:	9a07      	ldr	r2, [sp, #28]
 8006034:	e589      	b.n	8005b4a <_svfprintf_r+0xd7a>
 8006036:	9b07      	ldr	r3, [sp, #28]
 8006038:	f043 0320 	orr.w	r3, r3, #32
 800603c:	9307      	str	r3, [sp, #28]
 800603e:	f108 0801 	add.w	r8, r8, #1
 8006042:	f898 3000 	ldrb.w	r3, [r8]
 8006046:	f7fe bf1d 	b.w	8004e84 <_svfprintf_r+0xb4>
 800604a:	aa27      	add	r2, sp, #156	; 0x9c
 800604c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800604e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006050:	f005 f8e2 	bl	800b218 <__ssprint_r>
 8006054:	2800      	cmp	r0, #0
 8006056:	f47e afb5 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 800605a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800605c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006060:	f7ff bbac 	b.w	80057bc <_svfprintf_r+0x9ec>
 8006064:	2140      	movs	r1, #64	; 0x40
 8006066:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006068:	f003 fe9e 	bl	8009da8 <_malloc_r>
 800606c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800606e:	6010      	str	r0, [r2, #0]
 8006070:	6110      	str	r0, [r2, #16]
 8006072:	2800      	cmp	r0, #0
 8006074:	f000 81f9 	beq.w	800646a <_svfprintf_r+0x169a>
 8006078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800607a:	2340      	movs	r3, #64	; 0x40
 800607c:	6153      	str	r3, [r2, #20]
 800607e:	f7fe bebe 	b.w	8004dfe <_svfprintf_r+0x2e>
 8006082:	a825      	add	r0, sp, #148	; 0x94
 8006084:	a922      	add	r1, sp, #136	; 0x88
 8006086:	aa21      	add	r2, sp, #132	; 0x84
 8006088:	2303      	movs	r3, #3
 800608a:	9004      	str	r0, [sp, #16]
 800608c:	9202      	str	r2, [sp, #8]
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	f8cd b004 	str.w	fp, [sp, #4]
 8006094:	9103      	str	r1, [sp, #12]
 8006096:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800609a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800609c:	f001 ff04 	bl	8007ea8 <_dtoa_r>
 80060a0:	465d      	mov	r5, fp
 80060a2:	4606      	mov	r6, r0
 80060a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060a6:	2b46      	cmp	r3, #70	; 0x46
 80060a8:	eb06 0405 	add.w	r4, r6, r5
 80060ac:	f47f aebf 	bne.w	8005e2e <_svfprintf_r+0x105e>
 80060b0:	7833      	ldrb	r3, [r6, #0]
 80060b2:	2b30      	cmp	r3, #48	; 0x30
 80060b4:	f000 818a 	beq.w	80063cc <_svfprintf_r+0x15fc>
 80060b8:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80060ba:	442c      	add	r4, r5
 80060bc:	e6b7      	b.n	8005e2e <_svfprintf_r+0x105e>
 80060be:	aa27      	add	r2, sp, #156	; 0x9c
 80060c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80060c4:	f005 f8a8 	bl	800b218 <__ssprint_r>
 80060c8:	2800      	cmp	r0, #0
 80060ca:	f47e af7b 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 80060ce:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80060d0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80060d2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80060d6:	e766      	b.n	8005fa6 <_svfprintf_r+0x11d6>
 80060d8:	f1bb 0f00 	cmp.w	fp, #0
 80060dc:	bf08      	it	eq
 80060de:	f04f 0b01 	moveq.w	fp, #1
 80060e2:	e672      	b.n	8005dca <_svfprintf_r+0xffa>
 80060e4:	930e      	str	r3, [sp, #56]	; 0x38
 80060e6:	4617      	mov	r7, r2
 80060e8:	e557      	b.n	8005b9a <_svfprintf_r+0xdca>
 80060ea:	930e      	str	r3, [sp, #56]	; 0x38
 80060ec:	e6f3      	b.n	8005ed6 <_svfprintf_r+0x1106>
 80060ee:	3304      	adds	r3, #4
 80060f0:	6814      	ldr	r4, [r2, #0]
 80060f2:	930e      	str	r3, [sp, #56]	; 0x38
 80060f4:	2500      	movs	r5, #0
 80060f6:	f7ff ba1e 	b.w	8005536 <_svfprintf_r+0x766>
 80060fa:	272d      	movs	r7, #45	; 0x2d
 80060fc:	9308      	str	r3, [sp, #32]
 80060fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006100:	9307      	str	r3, [sp, #28]
 8006102:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006106:	f04f 0b00 	mov.w	fp, #0
 800610a:	f7ff b834 	b.w	8005176 <_svfprintf_r+0x3a6>
 800610e:	4630      	mov	r0, r6
 8006110:	f7fd fdd6 	bl	8003cc0 <strlen>
 8006114:	46a3      	mov	fp, r4
 8006116:	4603      	mov	r3, r0
 8006118:	900d      	str	r0, [sp, #52]	; 0x34
 800611a:	f7ff ba9d 	b.w	8005658 <_svfprintf_r+0x888>
 800611e:	aa27      	add	r2, sp, #156	; 0x9c
 8006120:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006122:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006124:	f005 f878 	bl	800b218 <__ssprint_r>
 8006128:	2800      	cmp	r0, #0
 800612a:	f47e af4b 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 800612e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006130:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006132:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006136:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006138:	f8c9 6000 	str.w	r6, [r9]
 800613c:	3301      	adds	r3, #1
 800613e:	440c      	add	r4, r1
 8006140:	2b07      	cmp	r3, #7
 8006142:	9429      	str	r4, [sp, #164]	; 0xa4
 8006144:	9328      	str	r3, [sp, #160]	; 0xa0
 8006146:	f8c9 1004 	str.w	r1, [r9, #4]
 800614a:	f77f a8d5 	ble.w	80052f8 <_svfprintf_r+0x528>
 800614e:	f7ff bbf6 	b.w	800593e <_svfprintf_r+0xb6e>
 8006152:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006154:	1cdd      	adds	r5, r3, #3
 8006156:	db1e      	blt.n	8006196 <_svfprintf_r+0x13c6>
 8006158:	459b      	cmp	fp, r3
 800615a:	db1c      	blt.n	8006196 <_svfprintf_r+0x13c6>
 800615c:	9313      	str	r3, [sp, #76]	; 0x4c
 800615e:	e688      	b.n	8005e72 <_svfprintf_r+0x10a2>
 8006160:	4623      	mov	r3, r4
 8006162:	e677      	b.n	8005e54 <_svfprintf_r+0x1084>
 8006164:	aa27      	add	r2, sp, #156	; 0x9c
 8006166:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006168:	980a      	ldr	r0, [sp, #40]	; 0x28
 800616a:	f005 f855 	bl	800b218 <__ssprint_r>
 800616e:	2800      	cmp	r0, #0
 8006170:	f47e af28 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8006174:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006176:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800617a:	e447      	b.n	8005a0c <_svfprintf_r+0xc3c>
 800617c:	4614      	mov	r4, r2
 800617e:	3301      	adds	r3, #1
 8006180:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006182:	9328      	str	r3, [sp, #160]	; 0xa0
 8006184:	442c      	add	r4, r5
 8006186:	2b07      	cmp	r3, #7
 8006188:	9429      	str	r4, [sp, #164]	; 0xa4
 800618a:	e889 0024 	stmia.w	r9, {r2, r5}
 800618e:	dcc6      	bgt.n	800611e <_svfprintf_r+0x134e>
 8006190:	f109 0908 	add.w	r9, r9, #8
 8006194:	e7cf      	b.n	8006136 <_svfprintf_r+0x1366>
 8006196:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006198:	3a02      	subs	r2, #2
 800619a:	9211      	str	r2, [sp, #68]	; 0x44
 800619c:	3b01      	subs	r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80061a4:	9321      	str	r3, [sp, #132]	; 0x84
 80061a6:	bfb8      	it	lt
 80061a8:	425b      	neglt	r3, r3
 80061aa:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 80061ae:	bfb4      	ite	lt
 80061b0:	222d      	movlt	r2, #45	; 0x2d
 80061b2:	222b      	movge	r2, #43	; 0x2b
 80061b4:	2b09      	cmp	r3, #9
 80061b6:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 80061ba:	f340 80ee 	ble.w	800639a <_svfprintf_r+0x15ca>
 80061be:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 80061c2:	4604      	mov	r4, r0
 80061c4:	4a25      	ldr	r2, [pc, #148]	; (800625c <_svfprintf_r+0x148c>)
 80061c6:	fb82 2103 	smull	r2, r1, r2, r3
 80061ca:	17da      	asrs	r2, r3, #31
 80061cc:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80061d0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80061d4:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80061d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80061dc:	2a09      	cmp	r2, #9
 80061de:	4613      	mov	r3, r2
 80061e0:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80061e4:	dcee      	bgt.n	80061c4 <_svfprintf_r+0x13f4>
 80061e6:	4621      	mov	r1, r4
 80061e8:	3330      	adds	r3, #48	; 0x30
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	f801 2d01 	strb.w	r2, [r1, #-1]!
 80061f0:	4288      	cmp	r0, r1
 80061f2:	f240 8137 	bls.w	8006464 <_svfprintf_r+0x1694>
 80061f6:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 80061fa:	4623      	mov	r3, r4
 80061fc:	e001      	b.n	8006202 <_svfprintf_r+0x1432>
 80061fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006202:	f801 2b01 	strb.w	r2, [r1], #1
 8006206:	4298      	cmp	r0, r3
 8006208:	d1f9      	bne.n	80061fe <_svfprintf_r+0x142e>
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	1b1b      	subs	r3, r3, r4
 800620e:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 8006212:	4413      	add	r3, r2
 8006214:	aa23      	add	r2, sp, #140	; 0x8c
 8006216:	1a9b      	subs	r3, r3, r2
 8006218:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800621a:	9319      	str	r3, [sp, #100]	; 0x64
 800621c:	2a01      	cmp	r2, #1
 800621e:	4413      	add	r3, r2
 8006220:	930d      	str	r3, [sp, #52]	; 0x34
 8006222:	f340 80ea 	ble.w	80063fa <_svfprintf_r+0x162a>
 8006226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006228:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800622a:	4413      	add	r3, r2
 800622c:	2200      	movs	r2, #0
 800622e:	930d      	str	r3, [sp, #52]	; 0x34
 8006230:	9213      	str	r2, [sp, #76]	; 0x4c
 8006232:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006236:	e62a      	b.n	8005e8e <_svfprintf_r+0x10be>
 8006238:	aa27      	add	r2, sp, #156	; 0x9c
 800623a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800623c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800623e:	f004 ffeb 	bl	800b218 <__ssprint_r>
 8006242:	2800      	cmp	r0, #0
 8006244:	f47e aebe 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8006248:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800624a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800624c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006250:	e4e6      	b.n	8005c20 <_svfprintf_r+0xe50>
 8006252:	bf00      	nop
 8006254:	0800bde0 	.word	0x0800bde0
 8006258:	0800bd90 	.word	0x0800bd90
 800625c:	66666667 	.word	0x66666667
 8006260:	aa27      	add	r2, sp, #156	; 0x9c
 8006262:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006264:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006266:	f004 ffd7 	bl	800b218 <__ssprint_r>
 800626a:	2800      	cmp	r0, #0
 800626c:	f47e aeaa 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8006270:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006272:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006274:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800627c:	e4e8      	b.n	8005c50 <_svfprintf_r+0xe80>
 800627e:	2d06      	cmp	r5, #6
 8006280:	462b      	mov	r3, r5
 8006282:	bf28      	it	cs
 8006284:	2306      	movcs	r3, #6
 8006286:	930d      	str	r3, [sp, #52]	; 0x34
 8006288:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800628c:	46b3      	mov	fp, r6
 800628e:	970e      	str	r7, [sp, #56]	; 0x38
 8006290:	9613      	str	r6, [sp, #76]	; 0x4c
 8006292:	4637      	mov	r7, r6
 8006294:	9308      	str	r3, [sp, #32]
 8006296:	4e88      	ldr	r6, [pc, #544]	; (80064b8 <_svfprintf_r+0x16e8>)
 8006298:	f7fe bf6c 	b.w	8005174 <_svfprintf_r+0x3a4>
 800629c:	f04f 0b06 	mov.w	fp, #6
 80062a0:	e593      	b.n	8005dca <_svfprintf_r+0xffa>
 80062a2:	a825      	add	r0, sp, #148	; 0x94
 80062a4:	a922      	add	r1, sp, #136	; 0x88
 80062a6:	aa21      	add	r2, sp, #132	; 0x84
 80062a8:	2303      	movs	r3, #3
 80062aa:	9004      	str	r0, [sp, #16]
 80062ac:	9202      	str	r2, [sp, #8]
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	f8cd b004 	str.w	fp, [sp, #4]
 80062b4:	9103      	str	r1, [sp, #12]
 80062b6:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80062ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80062bc:	f001 fdf4 	bl	8007ea8 <_dtoa_r>
 80062c0:	465d      	mov	r5, fp
 80062c2:	4606      	mov	r6, r0
 80062c4:	eb00 040b 	add.w	r4, r0, fp
 80062c8:	e6f2      	b.n	80060b0 <_svfprintf_r+0x12e0>
 80062ca:	272d      	movs	r7, #45	; 0x2d
 80062cc:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80062d0:	f7ff b8a3 	b.w	800541a <_svfprintf_r+0x64a>
 80062d4:	9307      	str	r3, [sp, #28]
 80062d6:	f7ff b94c 	b.w	8005572 <_svfprintf_r+0x7a2>
 80062da:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 80062de:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 80062e2:	931d      	str	r3, [sp, #116]	; 0x74
 80062e4:	232d      	movs	r3, #45	; 0x2d
 80062e6:	911c      	str	r1, [sp, #112]	; 0x70
 80062e8:	9308      	str	r3, [sp, #32]
 80062ea:	e57c      	b.n	8005de6 <_svfprintf_r+0x1016>
 80062ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80062ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062f0:	4413      	add	r3, r2
 80062f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062f4:	930d      	str	r3, [sp, #52]	; 0x34
 80062f6:	2a00      	cmp	r2, #0
 80062f8:	f340 8089 	ble.w	800640e <_svfprintf_r+0x163e>
 80062fc:	2267      	movs	r2, #103	; 0x67
 80062fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006302:	9211      	str	r2, [sp, #68]	; 0x44
 8006304:	e5c3      	b.n	8005e8e <_svfprintf_r+0x10be>
 8006306:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006308:	2b47      	cmp	r3, #71	; 0x47
 800630a:	f47f ad8f 	bne.w	8005e2c <_svfprintf_r+0x105c>
 800630e:	9b07      	ldr	r3, [sp, #28]
 8006310:	07db      	lsls	r3, r3, #31
 8006312:	f53f aec7 	bmi.w	80060a4 <_svfprintf_r+0x12d4>
 8006316:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8006318:	2f47      	cmp	r7, #71	; 0x47
 800631a:	eba3 0306 	sub.w	r3, r3, r6
 800631e:	9312      	str	r3, [sp, #72]	; 0x48
 8006320:	f43f af17 	beq.w	8006152 <_svfprintf_r+0x1382>
 8006324:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006326:	e739      	b.n	800619c <_svfprintf_r+0x13cc>
 8006328:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800632c:	970e      	str	r7, [sp, #56]	; 0x38
 800632e:	9308      	str	r3, [sp, #32]
 8006330:	950d      	str	r5, [sp, #52]	; 0x34
 8006332:	4683      	mov	fp, r0
 8006334:	9013      	str	r0, [sp, #76]	; 0x4c
 8006336:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800633a:	f7fe bf1b 	b.w	8005174 <_svfprintf_r+0x3a4>
 800633e:	2b00      	cmp	r3, #0
 8006340:	dd6d      	ble.n	800641e <_svfprintf_r+0x164e>
 8006342:	f1bb 0f00 	cmp.w	fp, #0
 8006346:	d14f      	bne.n	80063e8 <_svfprintf_r+0x1618>
 8006348:	9a07      	ldr	r2, [sp, #28]
 800634a:	07d4      	lsls	r4, r2, #31
 800634c:	d44c      	bmi.n	80063e8 <_svfprintf_r+0x1618>
 800634e:	461a      	mov	r2, r3
 8006350:	920d      	str	r2, [sp, #52]	; 0x34
 8006352:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006356:	e59a      	b.n	8005e8e <_svfprintf_r+0x10be>
 8006358:	9b07      	ldr	r3, [sp, #28]
 800635a:	07db      	lsls	r3, r3, #31
 800635c:	465f      	mov	r7, fp
 800635e:	d505      	bpl.n	800636c <_svfprintf_r+0x159c>
 8006360:	ae44      	add	r6, sp, #272	; 0x110
 8006362:	2330      	movs	r3, #48	; 0x30
 8006364:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8006368:	f7fe befa 	b.w	8005160 <_svfprintf_r+0x390>
 800636c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8006370:	ae34      	add	r6, sp, #208	; 0xd0
 8006372:	f7fe bef8 	b.w	8005166 <_svfprintf_r+0x396>
 8006376:	aa27      	add	r2, sp, #156	; 0x9c
 8006378:	9909      	ldr	r1, [sp, #36]	; 0x24
 800637a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800637c:	f004 ff4c 	bl	800b218 <__ssprint_r>
 8006380:	2800      	cmp	r0, #0
 8006382:	f47e ae1f 	bne.w	8004fc4 <_svfprintf_r+0x1f4>
 8006386:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006388:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800638a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800638c:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006390:	e620      	b.n	8005fd4 <_svfprintf_r+0x1204>
 8006392:	46a0      	mov	r8, r4
 8006394:	2500      	movs	r5, #0
 8006396:	f7fe bd77 	b.w	8004e88 <_svfprintf_r+0xb8>
 800639a:	3330      	adds	r3, #48	; 0x30
 800639c:	2230      	movs	r2, #48	; 0x30
 800639e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 80063a2:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 80063a6:	ab24      	add	r3, sp, #144	; 0x90
 80063a8:	e734      	b.n	8006214 <_svfprintf_r+0x1444>
 80063aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80063ac:	e552      	b.n	8005e54 <_svfprintf_r+0x1084>
 80063ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80063b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063b2:	4413      	add	r3, r2
 80063b4:	2267      	movs	r2, #103	; 0x67
 80063b6:	930d      	str	r3, [sp, #52]	; 0x34
 80063b8:	9211      	str	r2, [sp, #68]	; 0x44
 80063ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80063be:	e566      	b.n	8005e8e <_svfprintf_r+0x10be>
 80063c0:	4e3e      	ldr	r6, [pc, #248]	; (80064bc <_svfprintf_r+0x16ec>)
 80063c2:	4b3f      	ldr	r3, [pc, #252]	; (80064c0 <_svfprintf_r+0x16f0>)
 80063c4:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80063c8:	f7ff b829 	b.w	800541e <_svfprintf_r+0x64e>
 80063cc:	2200      	movs	r2, #0
 80063ce:	2300      	movs	r3, #0
 80063d0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80063d4:	f7fd fa74 	bl	80038c0 <__aeabi_dcmpeq>
 80063d8:	2800      	cmp	r0, #0
 80063da:	f47f ae6d 	bne.w	80060b8 <_svfprintf_r+0x12e8>
 80063de:	f1c5 0501 	rsb	r5, r5, #1
 80063e2:	9521      	str	r5, [sp, #132]	; 0x84
 80063e4:	442c      	add	r4, r5
 80063e6:	e522      	b.n	8005e2e <_svfprintf_r+0x105e>
 80063e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80063ec:	189d      	adds	r5, r3, r2
 80063ee:	eb05 030b 	add.w	r3, r5, fp
 80063f2:	930d      	str	r3, [sp, #52]	; 0x34
 80063f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80063f8:	e549      	b.n	8005e8e <_svfprintf_r+0x10be>
 80063fa:	9b07      	ldr	r3, [sp, #28]
 80063fc:	f013 0301 	ands.w	r3, r3, #1
 8006400:	f47f af11 	bne.w	8006226 <_svfprintf_r+0x1456>
 8006404:	9313      	str	r3, [sp, #76]	; 0x4c
 8006406:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006408:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800640c:	e53f      	b.n	8005e8e <_svfprintf_r+0x10be>
 800640e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006410:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006412:	f1c3 0301 	rsb	r3, r3, #1
 8006416:	441a      	add	r2, r3
 8006418:	4613      	mov	r3, r2
 800641a:	920d      	str	r2, [sp, #52]	; 0x34
 800641c:	e76e      	b.n	80062fc <_svfprintf_r+0x152c>
 800641e:	f1bb 0f00 	cmp.w	fp, #0
 8006422:	d102      	bne.n	800642a <_svfprintf_r+0x165a>
 8006424:	9b07      	ldr	r3, [sp, #28]
 8006426:	07d8      	lsls	r0, r3, #31
 8006428:	d507      	bpl.n	800643a <_svfprintf_r+0x166a>
 800642a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800642c:	1c5d      	adds	r5, r3, #1
 800642e:	eb05 030b 	add.w	r3, r5, fp
 8006432:	930d      	str	r3, [sp, #52]	; 0x34
 8006434:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006438:	e529      	b.n	8005e8e <_svfprintf_r+0x10be>
 800643a:	2301      	movs	r3, #1
 800643c:	930d      	str	r3, [sp, #52]	; 0x34
 800643e:	e526      	b.n	8005e8e <_svfprintf_r+0x10be>
 8006440:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006442:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006446:	6805      	ldr	r5, [r0, #0]
 8006448:	3004      	adds	r0, #4
 800644a:	2d00      	cmp	r5, #0
 800644c:	900e      	str	r0, [sp, #56]	; 0x38
 800644e:	46a0      	mov	r8, r4
 8006450:	f6be ad18 	bge.w	8004e84 <_svfprintf_r+0xb4>
 8006454:	f04f 35ff 	mov.w	r5, #4294967295
 8006458:	f7fe bd14 	b.w	8004e84 <_svfprintf_r+0xb4>
 800645c:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006460:	f7fe bdc1 	b.w	8004fe6 <_svfprintf_r+0x216>
 8006464:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8006468:	e6d4      	b.n	8006214 <_svfprintf_r+0x1444>
 800646a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800646c:	230c      	movs	r3, #12
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	f04f 30ff 	mov.w	r0, #4294967295
 8006474:	f7fe bdaf 	b.w	8004fd6 <_svfprintf_r+0x206>
 8006478:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800647c:	f7fe be30 	b.w	80050e0 <_svfprintf_r+0x310>
 8006480:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006484:	f7fe bf92 	b.w	80053ac <_svfprintf_r+0x5dc>
 8006488:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800648c:	f7ff b845 	b.w	800551a <_svfprintf_r+0x74a>
 8006490:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006494:	f7ff b813 	b.w	80054be <_svfprintf_r+0x6ee>
 8006498:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 800649c:	f7fe bfe5 	b.w	800546a <_svfprintf_r+0x69a>
 80064a0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80064a4:	f7ff b92d 	b.w	8005702 <_svfprintf_r+0x932>
 80064a8:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80064ac:	f7ff b908 	b.w	80056c0 <_svfprintf_r+0x8f0>
 80064b0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 80064b4:	f7ff b8e6 	b.w	8005684 <_svfprintf_r+0x8b4>
 80064b8:	0800bdd8 	.word	0x0800bdd8
 80064bc:	0800bdac 	.word	0x0800bdac
 80064c0:	0800bda8 	.word	0x0800bda8
 80064c4:	00000000 	.word	0x00000000

080064c8 <_vfprintf_r>:
 80064c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	b0c5      	sub	sp, #276	; 0x114
 80064ce:	461c      	mov	r4, r3
 80064d0:	9108      	str	r1, [sp, #32]
 80064d2:	4616      	mov	r6, r2
 80064d4:	4605      	mov	r5, r0
 80064d6:	900a      	str	r0, [sp, #40]	; 0x28
 80064d8:	f003 fbe4 	bl	8009ca4 <_localeconv_r>
 80064dc:	6803      	ldr	r3, [r0, #0]
 80064de:	9317      	str	r3, [sp, #92]	; 0x5c
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fd fbed 	bl	8003cc0 <strlen>
 80064e6:	940e      	str	r4, [sp, #56]	; 0x38
 80064e8:	9016      	str	r0, [sp, #88]	; 0x58
 80064ea:	b11d      	cbz	r5, 80064f4 <_vfprintf_r+0x2c>
 80064ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 8123 	beq.w	800673a <_vfprintf_r+0x272>
 80064f4:	9808      	ldr	r0, [sp, #32]
 80064f6:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 80064fa:	b293      	uxth	r3, r2
 80064fc:	0499      	lsls	r1, r3, #18
 80064fe:	d407      	bmi.n	8006510 <_vfprintf_r+0x48>
 8006500:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8006502:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8006506:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800650a:	8183      	strh	r3, [r0, #12]
 800650c:	6641      	str	r1, [r0, #100]	; 0x64
 800650e:	b29b      	uxth	r3, r3
 8006510:	071a      	lsls	r2, r3, #28
 8006512:	f140 80dd 	bpl.w	80066d0 <_vfprintf_r+0x208>
 8006516:	9a08      	ldr	r2, [sp, #32]
 8006518:	6912      	ldr	r2, [r2, #16]
 800651a:	2a00      	cmp	r2, #0
 800651c:	f000 80d8 	beq.w	80066d0 <_vfprintf_r+0x208>
 8006520:	f003 031a 	and.w	r3, r3, #26
 8006524:	2b0a      	cmp	r3, #10
 8006526:	f000 80e1 	beq.w	80066ec <_vfprintf_r+0x224>
 800652a:	ed9f 7b87 	vldr	d7, [pc, #540]	; 8006748 <_vfprintf_r+0x280>
 800652e:	2300      	movs	r3, #0
 8006530:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006534:	9312      	str	r3, [sp, #72]	; 0x48
 8006536:	9329      	str	r3, [sp, #164]	; 0xa4
 8006538:	9328      	str	r3, [sp, #160]	; 0xa0
 800653a:	9319      	str	r3, [sp, #100]	; 0x64
 800653c:	930b      	str	r3, [sp, #44]	; 0x2c
 800653e:	f8df a214 	ldr.w	sl, [pc, #532]	; 8006754 <_vfprintf_r+0x28c>
 8006542:	ab34      	add	r3, sp, #208	; 0xd0
 8006544:	9327      	str	r3, [sp, #156]	; 0x9c
 8006546:	4699      	mov	r9, r3
 8006548:	46b0      	mov	r8, r6
 800654a:	f898 3000 	ldrb.w	r3, [r8]
 800654e:	4644      	mov	r4, r8
 8006550:	b1eb      	cbz	r3, 800658e <_vfprintf_r+0xc6>
 8006552:	2b25      	cmp	r3, #37	; 0x25
 8006554:	d102      	bne.n	800655c <_vfprintf_r+0x94>
 8006556:	e01a      	b.n	800658e <_vfprintf_r+0xc6>
 8006558:	2b25      	cmp	r3, #37	; 0x25
 800655a:	d003      	beq.n	8006564 <_vfprintf_r+0x9c>
 800655c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1f9      	bne.n	8006558 <_vfprintf_r+0x90>
 8006564:	ebc8 0504 	rsb	r5, r8, r4
 8006568:	b18d      	cbz	r5, 800658e <_vfprintf_r+0xc6>
 800656a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800656c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800656e:	f8c9 8000 	str.w	r8, [r9]
 8006572:	3301      	adds	r3, #1
 8006574:	442a      	add	r2, r5
 8006576:	2b07      	cmp	r3, #7
 8006578:	f8c9 5004 	str.w	r5, [r9, #4]
 800657c:	9229      	str	r2, [sp, #164]	; 0xa4
 800657e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006580:	f300 80c2 	bgt.w	8006708 <_vfprintf_r+0x240>
 8006584:	f109 0908 	add.w	r9, r9, #8
 8006588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800658a:	442b      	add	r3, r5
 800658c:	930b      	str	r3, [sp, #44]	; 0x2c
 800658e:	7823      	ldrb	r3, [r4, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 80c2 	beq.w	800671a <_vfprintf_r+0x252>
 8006596:	2300      	movs	r3, #0
 8006598:	461a      	mov	r2, r3
 800659a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800659e:	4619      	mov	r1, r3
 80065a0:	930c      	str	r3, [sp, #48]	; 0x30
 80065a2:	9307      	str	r3, [sp, #28]
 80065a4:	f04f 3bff 	mov.w	fp, #4294967295
 80065a8:	7863      	ldrb	r3, [r4, #1]
 80065aa:	f104 0801 	add.w	r8, r4, #1
 80065ae:	465d      	mov	r5, fp
 80065b0:	f108 0801 	add.w	r8, r8, #1
 80065b4:	f1a3 0020 	sub.w	r0, r3, #32
 80065b8:	2858      	cmp	r0, #88	; 0x58
 80065ba:	f200 8459 	bhi.w	8006e70 <_vfprintf_r+0x9a8>
 80065be:	e8df f010 	tbh	[pc, r0, lsl #1]
 80065c2:	040f      	.short	0x040f
 80065c4:	04570457 	.word	0x04570457
 80065c8:	04570418 	.word	0x04570418
 80065cc:	04570457 	.word	0x04570457
 80065d0:	04570457 	.word	0x04570457
 80065d4:	03620457 	.word	0x03620457
 80065d8:	04570449 	.word	0x04570449
 80065dc:	0109005d 	.word	0x0109005d
 80065e0:	01250457 	.word	0x01250457
 80065e4:	03700370 	.word	0x03700370
 80065e8:	03700370 	.word	0x03700370
 80065ec:	03700370 	.word	0x03700370
 80065f0:	03700370 	.word	0x03700370
 80065f4:	04570370 	.word	0x04570370
 80065f8:	04570457 	.word	0x04570457
 80065fc:	04570457 	.word	0x04570457
 8006600:	04570457 	.word	0x04570457
 8006604:	04570457 	.word	0x04570457
 8006608:	03800457 	.word	0x03800457
 800660c:	0457039d 	.word	0x0457039d
 8006610:	0457039d 	.word	0x0457039d
 8006614:	04570457 	.word	0x04570457
 8006618:	03eb0457 	.word	0x03eb0457
 800661c:	04570457 	.word	0x04570457
 8006620:	0457012c 	.word	0x0457012c
 8006624:	04570457 	.word	0x04570457
 8006628:	04570457 	.word	0x04570457
 800662c:	04570155 	.word	0x04570155
 8006630:	02b40457 	.word	0x02b40457
 8006634:	04570457 	.word	0x04570457
 8006638:	04570457 	.word	0x04570457
 800663c:	04570457 	.word	0x04570457
 8006640:	04570457 	.word	0x04570457
 8006644:	04570457 	.word	0x04570457
 8006648:	030f02f5 	.word	0x030f02f5
 800664c:	039d039d 	.word	0x039d039d
 8006650:	033f039d 	.word	0x033f039d
 8006654:	0457030f 	.word	0x0457030f
 8006658:	03460457 	.word	0x03460457
 800665c:	03500457 	.word	0x03500457
 8006660:	006400cb 	.word	0x006400cb
 8006664:	04570420 	.word	0x04570420
 8006668:	04570428 	.word	0x04570428
 800666c:	045703f2 	.word	0x045703f2
 8006670:	03fa0457 	.word	0x03fa0457
 8006674:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006676:	930e      	str	r3, [sp, #56]	; 0x38
 8006678:	4240      	negs	r0, r0
 800667a:	900c      	str	r0, [sp, #48]	; 0x30
 800667c:	9b07      	ldr	r3, [sp, #28]
 800667e:	f043 0304 	orr.w	r3, r3, #4
 8006682:	9307      	str	r3, [sp, #28]
 8006684:	f898 3000 	ldrb.w	r3, [r8]
 8006688:	e792      	b.n	80065b0 <_vfprintf_r+0xe8>
 800668a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800668c:	46ab      	mov	fp, r5
 800668e:	2100      	movs	r1, #0
 8006690:	6804      	ldr	r4, [r0, #0]
 8006692:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006696:	1d07      	adds	r7, r0, #4
 8006698:	9807      	ldr	r0, [sp, #28]
 800669a:	2330      	movs	r3, #48	; 0x30
 800669c:	2278      	movs	r2, #120	; 0x78
 800669e:	458b      	cmp	fp, r1
 80066a0:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 80066a4:	f04f 0500 	mov.w	r5, #0
 80066a8:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 80066ac:	f040 0302 	orr.w	r3, r0, #2
 80066b0:	f2c0 83fb 	blt.w	8006eaa <_vfprintf_r+0x9e2>
 80066b4:	f020 0380 	bic.w	r3, r0, #128	; 0x80
 80066b8:	f043 0302 	orr.w	r3, r3, #2
 80066bc:	9307      	str	r3, [sp, #28]
 80066be:	ea54 0305 	orrs.w	r3, r4, r5
 80066c2:	970e      	str	r7, [sp, #56]	; 0x38
 80066c4:	f000 83cc 	beq.w	8006e60 <_vfprintf_r+0x998>
 80066c8:	460f      	mov	r7, r1
 80066ca:	9211      	str	r2, [sp, #68]	; 0x44
 80066cc:	4820      	ldr	r0, [pc, #128]	; (8006750 <_vfprintf_r+0x288>)
 80066ce:	e25d      	b.n	8006b8c <_vfprintf_r+0x6c4>
 80066d0:	9908      	ldr	r1, [sp, #32]
 80066d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80066d4:	f001 faf0 	bl	8007cb8 <__swsetup_r>
 80066d8:	2800      	cmp	r0, #0
 80066da:	f041 803f 	bne.w	800775c <_vfprintf_r+0x1294>
 80066de:	9b08      	ldr	r3, [sp, #32]
 80066e0:	899b      	ldrh	r3, [r3, #12]
 80066e2:	f003 031a 	and.w	r3, r3, #26
 80066e6:	2b0a      	cmp	r3, #10
 80066e8:	f47f af1f 	bne.w	800652a <_vfprintf_r+0x62>
 80066ec:	9908      	ldr	r1, [sp, #32]
 80066ee:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f6ff af19 	blt.w	800652a <_vfprintf_r+0x62>
 80066f8:	4623      	mov	r3, r4
 80066fa:	4632      	mov	r2, r6
 80066fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80066fe:	f001 fa7f 	bl	8007c00 <__sbprintf>
 8006702:	b045      	add	sp, #276	; 0x114
 8006704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006708:	aa27      	add	r2, sp, #156	; 0x9c
 800670a:	9908      	ldr	r1, [sp, #32]
 800670c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800670e:	f004 fe3f 	bl	800b390 <__sprint_r>
 8006712:	b948      	cbnz	r0, 8006728 <_vfprintf_r+0x260>
 8006714:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006718:	e736      	b.n	8006588 <_vfprintf_r+0xc0>
 800671a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800671c:	b123      	cbz	r3, 8006728 <_vfprintf_r+0x260>
 800671e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006720:	9908      	ldr	r1, [sp, #32]
 8006722:	aa27      	add	r2, sp, #156	; 0x9c
 8006724:	f004 fe34 	bl	800b390 <__sprint_r>
 8006728:	9b08      	ldr	r3, [sp, #32]
 800672a:	899b      	ldrh	r3, [r3, #12]
 800672c:	0659      	lsls	r1, r3, #25
 800672e:	f101 8015 	bmi.w	800775c <_vfprintf_r+0x1294>
 8006732:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006734:	b045      	add	sp, #276	; 0x114
 8006736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800673a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800673c:	f002 fc02 	bl	8008f44 <__sinit>
 8006740:	e6d8      	b.n	80064f4 <_vfprintf_r+0x2c>
 8006742:	bf00      	nop
 8006744:	f3af 8000 	nop.w
	...
 8006750:	0800bdc4 	.word	0x0800bdc4
 8006754:	0800bdf4 	.word	0x0800bdf4
 8006758:	9311      	str	r3, [sp, #68]	; 0x44
 800675a:	46ab      	mov	fp, r5
 800675c:	2a00      	cmp	r2, #0
 800675e:	f041 8232 	bne.w	8007bc6 <_vfprintf_r+0x16fe>
 8006762:	9a07      	ldr	r2, [sp, #28]
 8006764:	f012 0320 	ands.w	r3, r2, #32
 8006768:	d064      	beq.n	8006834 <_vfprintf_r+0x36c>
 800676a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800676c:	3707      	adds	r7, #7
 800676e:	f027 0307 	bic.w	r3, r7, #7
 8006772:	2700      	movs	r7, #0
 8006774:	f103 0108 	add.w	r1, r3, #8
 8006778:	45bb      	cmp	fp, r7
 800677a:	910e      	str	r1, [sp, #56]	; 0x38
 800677c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006780:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006784:	f2c0 86ba 	blt.w	80074fc <_vfprintf_r+0x1034>
 8006788:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 800678c:	9307      	str	r3, [sp, #28]
 800678e:	ea54 0305 	orrs.w	r3, r4, r5
 8006792:	f000 8382 	beq.w	8006e9a <_vfprintf_r+0x9d2>
 8006796:	ae34      	add	r6, sp, #208	; 0xd0
 8006798:	08e2      	lsrs	r2, r4, #3
 800679a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800679e:	08e9      	lsrs	r1, r5, #3
 80067a0:	f004 0307 	and.w	r3, r4, #7
 80067a4:	460d      	mov	r5, r1
 80067a6:	4614      	mov	r4, r2
 80067a8:	3330      	adds	r3, #48	; 0x30
 80067aa:	ea54 0205 	orrs.w	r2, r4, r5
 80067ae:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80067b2:	d1f1      	bne.n	8006798 <_vfprintf_r+0x2d0>
 80067b4:	9a07      	ldr	r2, [sp, #28]
 80067b6:	07d2      	lsls	r2, r2, #31
 80067b8:	f140 8096 	bpl.w	80068e8 <_vfprintf_r+0x420>
 80067bc:	2b30      	cmp	r3, #48	; 0x30
 80067be:	f000 8093 	beq.w	80068e8 <_vfprintf_r+0x420>
 80067c2:	2230      	movs	r2, #48	; 0x30
 80067c4:	1e73      	subs	r3, r6, #1
 80067c6:	f806 2c01 	strb.w	r2, [r6, #-1]
 80067ca:	aa34      	add	r2, sp, #208	; 0xd0
 80067cc:	1ad2      	subs	r2, r2, r3
 80067ce:	920d      	str	r2, [sp, #52]	; 0x34
 80067d0:	461e      	mov	r6, r3
 80067d2:	e08c      	b.n	80068ee <_vfprintf_r+0x426>
 80067d4:	f898 3000 	ldrb.w	r3, [r8]
 80067d8:	2b2a      	cmp	r3, #42	; 0x2a
 80067da:	f108 0401 	add.w	r4, r8, #1
 80067de:	f001 81d0 	beq.w	8007b82 <_vfprintf_r+0x16ba>
 80067e2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80067e6:	2809      	cmp	r0, #9
 80067e8:	bf98      	it	ls
 80067ea:	2500      	movls	r5, #0
 80067ec:	f201 816c 	bhi.w	8007ac8 <_vfprintf_r+0x1600>
 80067f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80067f4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80067f8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80067fc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006800:	2809      	cmp	r0, #9
 8006802:	d9f5      	bls.n	80067f0 <_vfprintf_r+0x328>
 8006804:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8006808:	46a0      	mov	r8, r4
 800680a:	e6d3      	b.n	80065b4 <_vfprintf_r+0xec>
 800680c:	9b07      	ldr	r3, [sp, #28]
 800680e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006812:	9307      	str	r3, [sp, #28]
 8006814:	f898 3000 	ldrb.w	r3, [r8]
 8006818:	e6ca      	b.n	80065b0 <_vfprintf_r+0xe8>
 800681a:	9311      	str	r3, [sp, #68]	; 0x44
 800681c:	46ab      	mov	fp, r5
 800681e:	2a00      	cmp	r2, #0
 8006820:	f041 81d9 	bne.w	8007bd6 <_vfprintf_r+0x170e>
 8006824:	9b07      	ldr	r3, [sp, #28]
 8006826:	f043 0310 	orr.w	r3, r3, #16
 800682a:	9307      	str	r3, [sp, #28]
 800682c:	9a07      	ldr	r2, [sp, #28]
 800682e:	f012 0320 	ands.w	r3, r2, #32
 8006832:	d19a      	bne.n	800676a <_vfprintf_r+0x2a2>
 8006834:	9907      	ldr	r1, [sp, #28]
 8006836:	f011 0210 	ands.w	r2, r1, #16
 800683a:	f000 8634 	beq.w	80074a6 <_vfprintf_r+0xfde>
 800683e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006840:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006844:	f1bb 0f00 	cmp.w	fp, #0
 8006848:	6804      	ldr	r4, [r0, #0]
 800684a:	f100 0704 	add.w	r7, r0, #4
 800684e:	f04f 0500 	mov.w	r5, #0
 8006852:	f2c0 8652 	blt.w	80074fa <_vfprintf_r+0x1032>
 8006856:	460a      	mov	r2, r1
 8006858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800685c:	9207      	str	r2, [sp, #28]
 800685e:	ea54 0205 	orrs.w	r2, r4, r5
 8006862:	970e      	str	r7, [sp, #56]	; 0x38
 8006864:	f000 8319 	beq.w	8006e9a <_vfprintf_r+0x9d2>
 8006868:	461f      	mov	r7, r3
 800686a:	e794      	b.n	8006796 <_vfprintf_r+0x2ce>
 800686c:	9311      	str	r3, [sp, #68]	; 0x44
 800686e:	46ab      	mov	fp, r5
 8006870:	2a00      	cmp	r2, #0
 8006872:	f041 81a0 	bne.w	8007bb6 <_vfprintf_r+0x16ee>
 8006876:	9b07      	ldr	r3, [sp, #28]
 8006878:	f043 0310 	orr.w	r3, r3, #16
 800687c:	9307      	str	r3, [sp, #28]
 800687e:	9a07      	ldr	r2, [sp, #28]
 8006880:	f012 0320 	ands.w	r3, r2, #32
 8006884:	f000 84fa 	beq.w	800727c <_vfprintf_r+0xdb4>
 8006888:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800688a:	3707      	adds	r7, #7
 800688c:	f027 0307 	bic.w	r3, r7, #7
 8006890:	2700      	movs	r7, #0
 8006892:	f103 0108 	add.w	r1, r3, #8
 8006896:	45bb      	cmp	fp, r7
 8006898:	910e      	str	r1, [sp, #56]	; 0x38
 800689a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800689e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 80068a2:	f2c0 8523 	blt.w	80072ec <_vfprintf_r+0xe24>
 80068a6:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 80068aa:	9307      	str	r3, [sp, #28]
 80068ac:	ea54 0305 	orrs.w	r3, r4, r5
 80068b0:	f000 81bc 	beq.w	8006c2c <_vfprintf_r+0x764>
 80068b4:	2d00      	cmp	r5, #0
 80068b6:	bf08      	it	eq
 80068b8:	2c0a      	cmpeq	r4, #10
 80068ba:	f0c0 851b 	bcc.w	80072f4 <_vfprintf_r+0xe2c>
 80068be:	ae34      	add	r6, sp, #208	; 0xd0
 80068c0:	4620      	mov	r0, r4
 80068c2:	4629      	mov	r1, r5
 80068c4:	220a      	movs	r2, #10
 80068c6:	2300      	movs	r3, #0
 80068c8:	f004 ff6e 	bl	800b7a8 <__aeabi_uldivmod>
 80068cc:	3230      	adds	r2, #48	; 0x30
 80068ce:	f806 2d01 	strb.w	r2, [r6, #-1]!
 80068d2:	4620      	mov	r0, r4
 80068d4:	4629      	mov	r1, r5
 80068d6:	2300      	movs	r3, #0
 80068d8:	220a      	movs	r2, #10
 80068da:	f004 ff65 	bl	800b7a8 <__aeabi_uldivmod>
 80068de:	4604      	mov	r4, r0
 80068e0:	460d      	mov	r5, r1
 80068e2:	ea54 0305 	orrs.w	r3, r4, r5
 80068e6:	d1eb      	bne.n	80068c0 <_vfprintf_r+0x3f8>
 80068e8:	ab34      	add	r3, sp, #208	; 0xd0
 80068ea:	1b9b      	subs	r3, r3, r6
 80068ec:	930d      	str	r3, [sp, #52]	; 0x34
 80068ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068f0:	455b      	cmp	r3, fp
 80068f2:	bfb8      	it	lt
 80068f4:	465b      	movlt	r3, fp
 80068f6:	9309      	str	r3, [sp, #36]	; 0x24
 80068f8:	2300      	movs	r3, #0
 80068fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80068fc:	b117      	cbz	r7, 8006904 <_vfprintf_r+0x43c>
 80068fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006900:	3301      	adds	r3, #1
 8006902:	9309      	str	r3, [sp, #36]	; 0x24
 8006904:	9b07      	ldr	r3, [sp, #28]
 8006906:	f013 0302 	ands.w	r3, r3, #2
 800690a:	930f      	str	r3, [sp, #60]	; 0x3c
 800690c:	d002      	beq.n	8006914 <_vfprintf_r+0x44c>
 800690e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006910:	3302      	adds	r3, #2
 8006912:	9309      	str	r3, [sp, #36]	; 0x24
 8006914:	9b07      	ldr	r3, [sp, #28]
 8006916:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800691a:	9310      	str	r3, [sp, #64]	; 0x40
 800691c:	f040 82d2 	bne.w	8006ec4 <_vfprintf_r+0x9fc>
 8006920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006924:	1a9d      	subs	r5, r3, r2
 8006926:	2d00      	cmp	r5, #0
 8006928:	f340 82cc 	ble.w	8006ec4 <_vfprintf_r+0x9fc>
 800692c:	2d10      	cmp	r5, #16
 800692e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8006930:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8006932:	4fa8      	ldr	r7, [pc, #672]	; (8006bd4 <_vfprintf_r+0x70c>)
 8006934:	dd27      	ble.n	8006986 <_vfprintf_r+0x4be>
 8006936:	9618      	str	r6, [sp, #96]	; 0x60
 8006938:	4648      	mov	r0, r9
 800693a:	2410      	movs	r4, #16
 800693c:	46b9      	mov	r9, r7
 800693e:	9e08      	ldr	r6, [sp, #32]
 8006940:	462f      	mov	r7, r5
 8006942:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006944:	e004      	b.n	8006950 <_vfprintf_r+0x488>
 8006946:	3f10      	subs	r7, #16
 8006948:	2f10      	cmp	r7, #16
 800694a:	f100 0008 	add.w	r0, r0, #8
 800694e:	dd16      	ble.n	800697e <_vfprintf_r+0x4b6>
 8006950:	3201      	adds	r2, #1
 8006952:	4ba0      	ldr	r3, [pc, #640]	; (8006bd4 <_vfprintf_r+0x70c>)
 8006954:	9228      	str	r2, [sp, #160]	; 0xa0
 8006956:	3110      	adds	r1, #16
 8006958:	2a07      	cmp	r2, #7
 800695a:	9129      	str	r1, [sp, #164]	; 0xa4
 800695c:	e880 0018 	stmia.w	r0, {r3, r4}
 8006960:	ddf1      	ble.n	8006946 <_vfprintf_r+0x47e>
 8006962:	aa27      	add	r2, sp, #156	; 0x9c
 8006964:	4631      	mov	r1, r6
 8006966:	4628      	mov	r0, r5
 8006968:	f004 fd12 	bl	800b390 <__sprint_r>
 800696c:	2800      	cmp	r0, #0
 800696e:	f47f aedb 	bne.w	8006728 <_vfprintf_r+0x260>
 8006972:	3f10      	subs	r7, #16
 8006974:	2f10      	cmp	r7, #16
 8006976:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8006978:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800697a:	a834      	add	r0, sp, #208	; 0xd0
 800697c:	dce8      	bgt.n	8006950 <_vfprintf_r+0x488>
 800697e:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8006980:	463d      	mov	r5, r7
 8006982:	464f      	mov	r7, r9
 8006984:	4681      	mov	r9, r0
 8006986:	3201      	adds	r2, #1
 8006988:	186c      	adds	r4, r5, r1
 800698a:	2a07      	cmp	r2, #7
 800698c:	9429      	str	r4, [sp, #164]	; 0xa4
 800698e:	9228      	str	r2, [sp, #160]	; 0xa0
 8006990:	f8c9 7000 	str.w	r7, [r9]
 8006994:	f8c9 5004 	str.w	r5, [r9, #4]
 8006998:	f300 8428 	bgt.w	80071ec <_vfprintf_r+0xd24>
 800699c:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 80069a0:	f109 0908 	add.w	r9, r9, #8
 80069a4:	b177      	cbz	r7, 80069c4 <_vfprintf_r+0x4fc>
 80069a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80069a8:	3301      	adds	r3, #1
 80069aa:	3401      	adds	r4, #1
 80069ac:	f10d 017f 	add.w	r1, sp, #127	; 0x7f
 80069b0:	2201      	movs	r2, #1
 80069b2:	2b07      	cmp	r3, #7
 80069b4:	9429      	str	r4, [sp, #164]	; 0xa4
 80069b6:	9328      	str	r3, [sp, #160]	; 0xa0
 80069b8:	e889 0006 	stmia.w	r9, {r1, r2}
 80069bc:	f300 83a0 	bgt.w	8007100 <_vfprintf_r+0xc38>
 80069c0:	f109 0908 	add.w	r9, r9, #8
 80069c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069c6:	b16b      	cbz	r3, 80069e4 <_vfprintf_r+0x51c>
 80069c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80069ca:	3301      	adds	r3, #1
 80069cc:	3402      	adds	r4, #2
 80069ce:	a920      	add	r1, sp, #128	; 0x80
 80069d0:	2202      	movs	r2, #2
 80069d2:	2b07      	cmp	r3, #7
 80069d4:	9429      	str	r4, [sp, #164]	; 0xa4
 80069d6:	9328      	str	r3, [sp, #160]	; 0xa0
 80069d8:	e889 0006 	stmia.w	r9, {r1, r2}
 80069dc:	f300 839c 	bgt.w	8007118 <_vfprintf_r+0xc50>
 80069e0:	f109 0908 	add.w	r9, r9, #8
 80069e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069e6:	2b80      	cmp	r3, #128	; 0x80
 80069e8:	f000 82d0 	beq.w	8006f8c <_vfprintf_r+0xac4>
 80069ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ee:	ebc3 070b 	rsb	r7, r3, fp
 80069f2:	2f00      	cmp	r7, #0
 80069f4:	dd33      	ble.n	8006a5e <_vfprintf_r+0x596>
 80069f6:	4a78      	ldr	r2, [pc, #480]	; (8006bd8 <_vfprintf_r+0x710>)
 80069f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80069fa:	920f      	str	r2, [sp, #60]	; 0x3c
 80069fc:	2f10      	cmp	r7, #16
 80069fe:	dd22      	ble.n	8006a46 <_vfprintf_r+0x57e>
 8006a00:	4622      	mov	r2, r4
 8006a02:	f04f 0b10 	mov.w	fp, #16
 8006a06:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006a08:	9c08      	ldr	r4, [sp, #32]
 8006a0a:	e004      	b.n	8006a16 <_vfprintf_r+0x54e>
 8006a0c:	3f10      	subs	r7, #16
 8006a0e:	2f10      	cmp	r7, #16
 8006a10:	f109 0908 	add.w	r9, r9, #8
 8006a14:	dd16      	ble.n	8006a44 <_vfprintf_r+0x57c>
 8006a16:	3301      	adds	r3, #1
 8006a18:	3210      	adds	r2, #16
 8006a1a:	2b07      	cmp	r3, #7
 8006a1c:	9229      	str	r2, [sp, #164]	; 0xa4
 8006a1e:	9328      	str	r3, [sp, #160]	; 0xa0
 8006a20:	e889 0c00 	stmia.w	r9, {sl, fp}
 8006a24:	ddf2      	ble.n	8006a0c <_vfprintf_r+0x544>
 8006a26:	aa27      	add	r2, sp, #156	; 0x9c
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f004 fcb0 	bl	800b390 <__sprint_r>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	f47f ae79 	bne.w	8006728 <_vfprintf_r+0x260>
 8006a36:	3f10      	subs	r7, #16
 8006a38:	2f10      	cmp	r7, #16
 8006a3a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006a3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006a3e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006a42:	dce8      	bgt.n	8006a16 <_vfprintf_r+0x54e>
 8006a44:	4614      	mov	r4, r2
 8006a46:	3301      	adds	r3, #1
 8006a48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a4a:	9328      	str	r3, [sp, #160]	; 0xa0
 8006a4c:	443c      	add	r4, r7
 8006a4e:	2b07      	cmp	r3, #7
 8006a50:	9429      	str	r4, [sp, #164]	; 0xa4
 8006a52:	e889 0084 	stmia.w	r9, {r2, r7}
 8006a56:	f300 8347 	bgt.w	80070e8 <_vfprintf_r+0xc20>
 8006a5a:	f109 0908 	add.w	r9, r9, #8
 8006a5e:	9b07      	ldr	r3, [sp, #28]
 8006a60:	05dd      	lsls	r5, r3, #23
 8006a62:	f100 8231 	bmi.w	8006ec8 <_vfprintf_r+0xa00>
 8006a66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006a68:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a6a:	f8c9 6000 	str.w	r6, [r9]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	440c      	add	r4, r1
 8006a72:	2b07      	cmp	r3, #7
 8006a74:	9429      	str	r4, [sp, #164]	; 0xa4
 8006a76:	f8c9 1004 	str.w	r1, [r9, #4]
 8006a7a:	9328      	str	r3, [sp, #160]	; 0xa0
 8006a7c:	f300 831e 	bgt.w	80070bc <_vfprintf_r+0xbf4>
 8006a80:	f109 0908 	add.w	r9, r9, #8
 8006a84:	9b07      	ldr	r3, [sp, #28]
 8006a86:	0758      	lsls	r0, r3, #29
 8006a88:	d53f      	bpl.n	8006b0a <_vfprintf_r+0x642>
 8006a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a8e:	1a9d      	subs	r5, r3, r2
 8006a90:	2d00      	cmp	r5, #0
 8006a92:	dd3a      	ble.n	8006b0a <_vfprintf_r+0x642>
 8006a94:	2d10      	cmp	r5, #16
 8006a96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006a98:	4f4e      	ldr	r7, [pc, #312]	; (8006bd4 <_vfprintf_r+0x70c>)
 8006a9a:	dd23      	ble.n	8006ae4 <_vfprintf_r+0x61c>
 8006a9c:	4622      	mov	r2, r4
 8006a9e:	2610      	movs	r6, #16
 8006aa0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006aa4:	9c08      	ldr	r4, [sp, #32]
 8006aa6:	e004      	b.n	8006ab2 <_vfprintf_r+0x5ea>
 8006aa8:	3d10      	subs	r5, #16
 8006aaa:	2d10      	cmp	r5, #16
 8006aac:	f109 0908 	add.w	r9, r9, #8
 8006ab0:	dd17      	ble.n	8006ae2 <_vfprintf_r+0x61a>
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	4947      	ldr	r1, [pc, #284]	; (8006bd4 <_vfprintf_r+0x70c>)
 8006ab6:	9328      	str	r3, [sp, #160]	; 0xa0
 8006ab8:	3210      	adds	r2, #16
 8006aba:	2b07      	cmp	r3, #7
 8006abc:	9229      	str	r2, [sp, #164]	; 0xa4
 8006abe:	e889 0042 	stmia.w	r9, {r1, r6}
 8006ac2:	ddf1      	ble.n	8006aa8 <_vfprintf_r+0x5e0>
 8006ac4:	aa27      	add	r2, sp, #156	; 0x9c
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4658      	mov	r0, fp
 8006aca:	f004 fc61 	bl	800b390 <__sprint_r>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	f47f ae2a 	bne.w	8006728 <_vfprintf_r+0x260>
 8006ad4:	3d10      	subs	r5, #16
 8006ad6:	2d10      	cmp	r5, #16
 8006ad8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8006ada:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006adc:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006ae0:	dce7      	bgt.n	8006ab2 <_vfprintf_r+0x5ea>
 8006ae2:	4614      	mov	r4, r2
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	442c      	add	r4, r5
 8006ae8:	2b07      	cmp	r3, #7
 8006aea:	9429      	str	r4, [sp, #164]	; 0xa4
 8006aec:	9328      	str	r3, [sp, #160]	; 0xa0
 8006aee:	f8c9 7000 	str.w	r7, [r9]
 8006af2:	f8c9 5004 	str.w	r5, [r9, #4]
 8006af6:	dd08      	ble.n	8006b0a <_vfprintf_r+0x642>
 8006af8:	aa27      	add	r2, sp, #156	; 0x9c
 8006afa:	9908      	ldr	r1, [sp, #32]
 8006afc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006afe:	f004 fc47 	bl	800b390 <__sprint_r>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	f47f ae10 	bne.w	8006728 <_vfprintf_r+0x260>
 8006b08:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b10:	428a      	cmp	r2, r1
 8006b12:	bfac      	ite	ge
 8006b14:	189b      	addge	r3, r3, r2
 8006b16:	185b      	addlt	r3, r3, r1
 8006b18:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b1a:	2c00      	cmp	r4, #0
 8006b1c:	f040 82da 	bne.w	80070d4 <_vfprintf_r+0xc0c>
 8006b20:	2300      	movs	r3, #0
 8006b22:	9328      	str	r3, [sp, #160]	; 0xa0
 8006b24:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006b28:	e50f      	b.n	800654a <_vfprintf_r+0x82>
 8006b2a:	9311      	str	r3, [sp, #68]	; 0x44
 8006b2c:	46ab      	mov	fp, r5
 8006b2e:	2a00      	cmp	r2, #0
 8006b30:	f041 803d 	bne.w	8007bae <_vfprintf_r+0x16e6>
 8006b34:	9b07      	ldr	r3, [sp, #28]
 8006b36:	4829      	ldr	r0, [pc, #164]	; (8006bdc <_vfprintf_r+0x714>)
 8006b38:	069c      	lsls	r4, r3, #26
 8006b3a:	f140 8146 	bpl.w	8006dca <_vfprintf_r+0x902>
 8006b3e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006b40:	3707      	adds	r7, #7
 8006b42:	f027 0307 	bic.w	r3, r7, #7
 8006b46:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006b4a:	f103 0208 	add.w	r2, r3, #8
 8006b4e:	920e      	str	r2, [sp, #56]	; 0x38
 8006b50:	9a07      	ldr	r2, [sp, #28]
 8006b52:	f012 0701 	ands.w	r7, r2, #1
 8006b56:	f000 82eb 	beq.w	8007130 <_vfprintf_r+0xc68>
 8006b5a:	ea54 0305 	orrs.w	r3, r4, r5
 8006b5e:	f000 8582 	beq.w	8007666 <_vfprintf_r+0x119e>
 8006b62:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8006b66:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 8006b6a:	2700      	movs	r7, #0
 8006b6c:	9a07      	ldr	r2, [sp, #28]
 8006b6e:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8006b72:	2330      	movs	r3, #48	; 0x30
 8006b74:	45bb      	cmp	fp, r7
 8006b76:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8006b7a:	f042 0302 	orr.w	r3, r2, #2
 8006b7e:	f2c0 873b 	blt.w	80079f8 <_vfprintf_r+0x1530>
 8006b82:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8006b86:	f043 0302 	orr.w	r3, r3, #2
 8006b8a:	9307      	str	r3, [sp, #28]
 8006b8c:	ae34      	add	r6, sp, #208	; 0xd0
 8006b8e:	0923      	lsrs	r3, r4, #4
 8006b90:	f004 010f 	and.w	r1, r4, #15
 8006b94:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006b98:	092a      	lsrs	r2, r5, #4
 8006b9a:	461c      	mov	r4, r3
 8006b9c:	4615      	mov	r5, r2
 8006b9e:	5c43      	ldrb	r3, [r0, r1]
 8006ba0:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8006ba4:	ea54 0305 	orrs.w	r3, r4, r5
 8006ba8:	d1f1      	bne.n	8006b8e <_vfprintf_r+0x6c6>
 8006baa:	e69d      	b.n	80068e8 <_vfprintf_r+0x420>
 8006bac:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006bae:	9311      	str	r3, [sp, #68]	; 0x44
 8006bb0:	680a      	ldr	r2, [r1, #0]
 8006bb2:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	460a      	mov	r2, r1
 8006bba:	461f      	mov	r7, r3
 8006bbc:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006bc0:	3204      	adds	r2, #4
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc6:	46bb      	mov	fp, r7
 8006bc8:	9713      	str	r7, [sp, #76]	; 0x4c
 8006bca:	920e      	str	r2, [sp, #56]	; 0x38
 8006bcc:	930d      	str	r3, [sp, #52]	; 0x34
 8006bce:	ae2a      	add	r6, sp, #168	; 0xa8
 8006bd0:	e698      	b.n	8006904 <_vfprintf_r+0x43c>
 8006bd2:	bf00      	nop
 8006bd4:	0800be04 	.word	0x0800be04
 8006bd8:	0800bdf4 	.word	0x0800bdf4
 8006bdc:	0800bdb0 	.word	0x0800bdb0
 8006be0:	9311      	str	r3, [sp, #68]	; 0x44
 8006be2:	46ab      	mov	fp, r5
 8006be4:	2a00      	cmp	r2, #0
 8006be6:	f040 87ea 	bne.w	8007bbe <_vfprintf_r+0x16f6>
 8006bea:	9b07      	ldr	r3, [sp, #28]
 8006bec:	069b      	lsls	r3, r3, #26
 8006bee:	d574      	bpl.n	8006cda <_vfprintf_r+0x812>
 8006bf0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006bf2:	3707      	adds	r7, #7
 8006bf4:	f027 0707 	bic.w	r7, r7, #7
 8006bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bfc:	f107 0108 	add.w	r1, r7, #8
 8006c00:	910e      	str	r1, [sp, #56]	; 0x38
 8006c02:	4614      	mov	r4, r2
 8006c04:	461d      	mov	r5, r3
 8006c06:	2a00      	cmp	r2, #0
 8006c08:	f173 0300 	sbcs.w	r3, r3, #0
 8006c0c:	f2c0 843a 	blt.w	8007484 <_vfprintf_r+0xfbc>
 8006c10:	f1bb 0f00 	cmp.w	fp, #0
 8006c14:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006c18:	f2c0 8368 	blt.w	80072ec <_vfprintf_r+0xe24>
 8006c1c:	9b07      	ldr	r3, [sp, #28]
 8006c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c22:	9307      	str	r3, [sp, #28]
 8006c24:	ea54 0305 	orrs.w	r3, r4, r5
 8006c28:	f47f ae44 	bne.w	80068b4 <_vfprintf_r+0x3ec>
 8006c2c:	f1bb 0f00 	cmp.w	fp, #0
 8006c30:	f040 8408 	bne.w	8007444 <_vfprintf_r+0xf7c>
 8006c34:	f04f 0b00 	mov.w	fp, #0
 8006c38:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8006c3c:	ae34      	add	r6, sp, #208	; 0xd0
 8006c3e:	e656      	b.n	80068ee <_vfprintf_r+0x426>
 8006c40:	9b07      	ldr	r3, [sp, #28]
 8006c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c46:	9307      	str	r3, [sp, #28]
 8006c48:	f898 3000 	ldrb.w	r3, [r8]
 8006c4c:	e4b0      	b.n	80065b0 <_vfprintf_r+0xe8>
 8006c4e:	f898 3000 	ldrb.w	r3, [r8]
 8006c52:	2b6c      	cmp	r3, #108	; 0x6c
 8006c54:	f000 85d5 	beq.w	8007802 <_vfprintf_r+0x133a>
 8006c58:	9807      	ldr	r0, [sp, #28]
 8006c5a:	f040 0010 	orr.w	r0, r0, #16
 8006c5e:	9007      	str	r0, [sp, #28]
 8006c60:	e4a6      	b.n	80065b0 <_vfprintf_r+0xe8>
 8006c62:	2a00      	cmp	r2, #0
 8006c64:	f040 879f 	bne.w	8007ba6 <_vfprintf_r+0x16de>
 8006c68:	9b07      	ldr	r3, [sp, #28]
 8006c6a:	069f      	lsls	r7, r3, #26
 8006c6c:	f140 84e4 	bpl.w	8007638 <_vfprintf_r+0x1170>
 8006c70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c74:	6813      	ldr	r3, [r2, #0]
 8006c76:	17cd      	asrs	r5, r1, #31
 8006c78:	4608      	mov	r0, r1
 8006c7a:	3204      	adds	r2, #4
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	920e      	str	r2, [sp, #56]	; 0x38
 8006c80:	e9c3 0100 	strd	r0, r1, [r3]
 8006c84:	e461      	b.n	800654a <_vfprintf_r+0x82>
 8006c86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	930c      	str	r3, [sp, #48]	; 0x30
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	4623      	mov	r3, r4
 8006c92:	f103 0304 	add.w	r3, r3, #4
 8006c96:	f6ff aced 	blt.w	8006674 <_vfprintf_r+0x1ac>
 8006c9a:	930e      	str	r3, [sp, #56]	; 0x38
 8006c9c:	f898 3000 	ldrb.w	r3, [r8]
 8006ca0:	e486      	b.n	80065b0 <_vfprintf_r+0xe8>
 8006ca2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	461c      	mov	r4, r3
 8006caa:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006cae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006cb2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8006cb6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8006cba:	2809      	cmp	r0, #9
 8006cbc:	d9f5      	bls.n	8006caa <_vfprintf_r+0x7e2>
 8006cbe:	940c      	str	r4, [sp, #48]	; 0x30
 8006cc0:	e478      	b.n	80065b4 <_vfprintf_r+0xec>
 8006cc2:	9311      	str	r3, [sp, #68]	; 0x44
 8006cc4:	46ab      	mov	fp, r5
 8006cc6:	2a00      	cmp	r2, #0
 8006cc8:	f040 8769 	bne.w	8007b9e <_vfprintf_r+0x16d6>
 8006ccc:	9b07      	ldr	r3, [sp, #28]
 8006cce:	f043 0310 	orr.w	r3, r3, #16
 8006cd2:	9307      	str	r3, [sp, #28]
 8006cd4:	9b07      	ldr	r3, [sp, #28]
 8006cd6:	069b      	lsls	r3, r3, #26
 8006cd8:	d48a      	bmi.n	8006bf0 <_vfprintf_r+0x728>
 8006cda:	9b07      	ldr	r3, [sp, #28]
 8006cdc:	06df      	lsls	r7, r3, #27
 8006cde:	f100 8294 	bmi.w	800720a <_vfprintf_r+0xd42>
 8006ce2:	9b07      	ldr	r3, [sp, #28]
 8006ce4:	065e      	lsls	r6, r3, #25
 8006ce6:	f140 8290 	bpl.w	800720a <_vfprintf_r+0xd42>
 8006cea:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006cec:	f9b1 4000 	ldrsh.w	r4, [r1]
 8006cf0:	3104      	adds	r1, #4
 8006cf2:	17e5      	asrs	r5, r4, #31
 8006cf4:	4622      	mov	r2, r4
 8006cf6:	462b      	mov	r3, r5
 8006cf8:	910e      	str	r1, [sp, #56]	; 0x38
 8006cfa:	e784      	b.n	8006c06 <_vfprintf_r+0x73e>
 8006cfc:	9311      	str	r3, [sp, #68]	; 0x44
 8006cfe:	46ab      	mov	fp, r5
 8006d00:	2a00      	cmp	r2, #0
 8006d02:	f040 8770 	bne.w	8007be6 <_vfprintf_r+0x171e>
 8006d06:	9b07      	ldr	r3, [sp, #28]
 8006d08:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006d0a:	071d      	lsls	r5, r3, #28
 8006d0c:	f107 0707 	add.w	r7, r7, #7
 8006d10:	f140 8487 	bpl.w	8007622 <_vfprintf_r+0x115a>
 8006d14:	f027 0307 	bic.w	r3, r7, #7
 8006d18:	ed93 7b00 	vldr	d7, [r3]
 8006d1c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8006d20:	f103 0208 	add.w	r2, r3, #8
 8006d24:	920e      	str	r2, [sp, #56]	; 0x38
 8006d26:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8006d2a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8006d2e:	911a      	str	r1, [sp, #104]	; 0x68
 8006d30:	931b      	str	r3, [sp, #108]	; 0x6c
 8006d32:	e9dd 451a 	ldrd	r4, r5, [sp, #104]	; 0x68
 8006d36:	f04f 32ff 	mov.w	r2, #4294967295
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	4bb5      	ldr	r3, [pc, #724]	; (8007014 <_vfprintf_r+0xb4c>)
 8006d40:	f7fc fdf0 	bl	8003924 <__aeabi_dcmpun>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	f040 83eb 	bne.w	8007520 <_vfprintf_r+0x1058>
 8006d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4e:	4bb1      	ldr	r3, [pc, #708]	; (8007014 <_vfprintf_r+0xb4c>)
 8006d50:	4620      	mov	r0, r4
 8006d52:	4629      	mov	r1, r5
 8006d54:	f7fc fdc8 	bl	80038e8 <__aeabi_dcmple>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f040 83e1 	bne.w	8007520 <_vfprintf_r+0x1058>
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2300      	movs	r3, #0
 8006d62:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006d66:	f7fc fdb5 	bl	80038d4 <__aeabi_dcmplt>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	f040 864a 	bne.w	8007a04 <_vfprintf_r+0x153c>
 8006d70:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006d74:	4ea8      	ldr	r6, [pc, #672]	; (8007018 <_vfprintf_r+0xb50>)
 8006d76:	4ba9      	ldr	r3, [pc, #676]	; (800701c <_vfprintf_r+0xb54>)
 8006d78:	9907      	ldr	r1, [sp, #28]
 8006d7a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006d7e:	9107      	str	r1, [sp, #28]
 8006d80:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006d82:	2203      	movs	r2, #3
 8006d84:	f04f 0b00 	mov.w	fp, #0
 8006d88:	9209      	str	r2, [sp, #36]	; 0x24
 8006d8a:	2947      	cmp	r1, #71	; 0x47
 8006d8c:	bfd8      	it	le
 8006d8e:	461e      	movle	r6, r3
 8006d90:	920d      	str	r2, [sp, #52]	; 0x34
 8006d92:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8006d96:	e5b1      	b.n	80068fc <_vfprintf_r+0x434>
 8006d98:	9b07      	ldr	r3, [sp, #28]
 8006d9a:	f043 0308 	orr.w	r3, r3, #8
 8006d9e:	9307      	str	r3, [sp, #28]
 8006da0:	f898 3000 	ldrb.w	r3, [r8]
 8006da4:	e404      	b.n	80065b0 <_vfprintf_r+0xe8>
 8006da6:	9311      	str	r3, [sp, #68]	; 0x44
 8006da8:	46ab      	mov	fp, r5
 8006daa:	2a00      	cmp	r2, #0
 8006dac:	f43f ad67 	beq.w	800687e <_vfprintf_r+0x3b6>
 8006db0:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8006db4:	e563      	b.n	800687e <_vfprintf_r+0x3b6>
 8006db6:	9311      	str	r3, [sp, #68]	; 0x44
 8006db8:	46ab      	mov	fp, r5
 8006dba:	2a00      	cmp	r2, #0
 8006dbc:	f040 870f 	bne.w	8007bde <_vfprintf_r+0x1716>
 8006dc0:	9b07      	ldr	r3, [sp, #28]
 8006dc2:	4897      	ldr	r0, [pc, #604]	; (8007020 <_vfprintf_r+0xb58>)
 8006dc4:	069c      	lsls	r4, r3, #26
 8006dc6:	f53f aeba 	bmi.w	8006b3e <_vfprintf_r+0x676>
 8006dca:	9b07      	ldr	r3, [sp, #28]
 8006dcc:	06d9      	lsls	r1, r3, #27
 8006dce:	f140 8398 	bpl.w	8007502 <_vfprintf_r+0x103a>
 8006dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	6814      	ldr	r4, [r2, #0]
 8006dda:	930e      	str	r3, [sp, #56]	; 0x38
 8006ddc:	2500      	movs	r5, #0
 8006dde:	e6b7      	b.n	8006b50 <_vfprintf_r+0x688>
 8006de0:	f898 3000 	ldrb.w	r3, [r8]
 8006de4:	2900      	cmp	r1, #0
 8006de6:	f47f abe3 	bne.w	80065b0 <_vfprintf_r+0xe8>
 8006dea:	2201      	movs	r2, #1
 8006dec:	2120      	movs	r1, #32
 8006dee:	f7ff bbdf 	b.w	80065b0 <_vfprintf_r+0xe8>
 8006df2:	9b07      	ldr	r3, [sp, #28]
 8006df4:	f043 0301 	orr.w	r3, r3, #1
 8006df8:	9307      	str	r3, [sp, #28]
 8006dfa:	f898 3000 	ldrb.w	r3, [r8]
 8006dfe:	f7ff bbd7 	b.w	80065b0 <_vfprintf_r+0xe8>
 8006e02:	9b07      	ldr	r3, [sp, #28]
 8006e04:	f043 0320 	orr.w	r3, r3, #32
 8006e08:	9307      	str	r3, [sp, #28]
 8006e0a:	f898 3000 	ldrb.w	r3, [r8]
 8006e0e:	f7ff bbcf 	b.w	80065b0 <_vfprintf_r+0xe8>
 8006e12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e14:	9311      	str	r3, [sp, #68]	; 0x44
 8006e16:	6816      	ldr	r6, [r2, #0]
 8006e18:	2400      	movs	r4, #0
 8006e1a:	f88d 407f 	strb.w	r4, [sp, #127]	; 0x7f
 8006e1e:	1d17      	adds	r7, r2, #4
 8006e20:	2e00      	cmp	r6, #0
 8006e22:	f000 85b7 	beq.w	8007994 <_vfprintf_r+0x14cc>
 8006e26:	2d00      	cmp	r5, #0
 8006e28:	f2c0 8502 	blt.w	8007830 <_vfprintf_r+0x1368>
 8006e2c:	462a      	mov	r2, r5
 8006e2e:	4621      	mov	r1, r4
 8006e30:	4630      	mov	r0, r6
 8006e32:	f003 fa8d 	bl	800a350 <memchr>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	f000 861c 	beq.w	8007a74 <_vfprintf_r+0x15ac>
 8006e3c:	1b83      	subs	r3, r0, r6
 8006e3e:	930d      	str	r3, [sp, #52]	; 0x34
 8006e40:	46a3      	mov	fp, r4
 8006e42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006e46:	970e      	str	r7, [sp, #56]	; 0x38
 8006e48:	9309      	str	r3, [sp, #36]	; 0x24
 8006e4a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8006e4e:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8006e52:	e553      	b.n	80068fc <_vfprintf_r+0x434>
 8006e54:	f898 3000 	ldrb.w	r3, [r8]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	212b      	movs	r1, #43	; 0x2b
 8006e5c:	f7ff bba8 	b.w	80065b0 <_vfprintf_r+0xe8>
 8006e60:	486f      	ldr	r0, [pc, #444]	; (8007020 <_vfprintf_r+0xb58>)
 8006e62:	9211      	str	r2, [sp, #68]	; 0x44
 8006e64:	f1bb 0f00 	cmp.w	fp, #0
 8006e68:	f040 8173 	bne.w	8007152 <_vfprintf_r+0xc8a>
 8006e6c:	465f      	mov	r7, fp
 8006e6e:	e6e1      	b.n	8006c34 <_vfprintf_r+0x76c>
 8006e70:	9311      	str	r3, [sp, #68]	; 0x44
 8006e72:	2a00      	cmp	r2, #0
 8006e74:	f040 86ab 	bne.w	8007bce <_vfprintf_r+0x1706>
 8006e78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	f43f ac4d 	beq.w	800671a <_vfprintf_r+0x252>
 8006e80:	2300      	movs	r3, #0
 8006e82:	2101      	movs	r1, #1
 8006e84:	461f      	mov	r7, r3
 8006e86:	9109      	str	r1, [sp, #36]	; 0x24
 8006e88:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8006e8c:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 8006e90:	469b      	mov	fp, r3
 8006e92:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e94:	910d      	str	r1, [sp, #52]	; 0x34
 8006e96:	ae2a      	add	r6, sp, #168	; 0xa8
 8006e98:	e534      	b.n	8006904 <_vfprintf_r+0x43c>
 8006e9a:	f1bb 0f00 	cmp.w	fp, #0
 8006e9e:	f000 85da 	beq.w	8007a56 <_vfprintf_r+0x158e>
 8006ea2:	2700      	movs	r7, #0
 8006ea4:	2400      	movs	r4, #0
 8006ea6:	2500      	movs	r5, #0
 8006ea8:	e475      	b.n	8006796 <_vfprintf_r+0x2ce>
 8006eaa:	485d      	ldr	r0, [pc, #372]	; (8007020 <_vfprintf_r+0xb58>)
 8006eac:	9307      	str	r3, [sp, #28]
 8006eae:	9211      	str	r2, [sp, #68]	; 0x44
 8006eb0:	ea54 0305 	orrs.w	r3, r4, r5
 8006eb4:	970e      	str	r7, [sp, #56]	; 0x38
 8006eb6:	f04f 0700 	mov.w	r7, #0
 8006eba:	f47f ae67 	bne.w	8006b8c <_vfprintf_r+0x6c4>
 8006ebe:	2400      	movs	r4, #0
 8006ec0:	2500      	movs	r5, #0
 8006ec2:	e663      	b.n	8006b8c <_vfprintf_r+0x6c4>
 8006ec4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006ec6:	e56d      	b.n	80069a4 <_vfprintf_r+0x4dc>
 8006ec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eca:	2b65      	cmp	r3, #101	; 0x65
 8006ecc:	f340 80ae 	ble.w	800702c <_vfprintf_r+0xb64>
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006ed8:	f7fc fcf2 	bl	80038c0 <__aeabi_dcmpeq>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	f000 813a 	beq.w	8007156 <_vfprintf_r+0xc8e>
 8006ee2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006ee4:	4a4f      	ldr	r2, [pc, #316]	; (8007024 <_vfprintf_r+0xb5c>)
 8006ee6:	f8c9 2000 	str.w	r2, [r9]
 8006eea:	3301      	adds	r3, #1
 8006eec:	3401      	adds	r4, #1
 8006eee:	2201      	movs	r2, #1
 8006ef0:	2b07      	cmp	r3, #7
 8006ef2:	9429      	str	r4, [sp, #164]	; 0xa4
 8006ef4:	9328      	str	r3, [sp, #160]	; 0xa0
 8006ef6:	f8c9 2004 	str.w	r2, [r9, #4]
 8006efa:	f300 83ce 	bgt.w	800769a <_vfprintf_r+0x11d2>
 8006efe:	f109 0908 	add.w	r9, r9, #8
 8006f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f06:	4293      	cmp	r3, r2
 8006f08:	db03      	blt.n	8006f12 <_vfprintf_r+0xa4a>
 8006f0a:	9b07      	ldr	r3, [sp, #28]
 8006f0c:	07d8      	lsls	r0, r3, #31
 8006f0e:	f57f adb9 	bpl.w	8006a84 <_vfprintf_r+0x5bc>
 8006f12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006f14:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006f16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f18:	f8c9 2000 	str.w	r2, [r9]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	440c      	add	r4, r1
 8006f20:	2b07      	cmp	r3, #7
 8006f22:	9429      	str	r4, [sp, #164]	; 0xa4
 8006f24:	f8c9 1004 	str.w	r1, [r9, #4]
 8006f28:	9328      	str	r3, [sp, #160]	; 0xa0
 8006f2a:	f300 8474 	bgt.w	8007816 <_vfprintf_r+0x134e>
 8006f2e:	f109 0908 	add.w	r9, r9, #8
 8006f32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f34:	1e5d      	subs	r5, r3, #1
 8006f36:	2d00      	cmp	r5, #0
 8006f38:	f77f ada4 	ble.w	8006a84 <_vfprintf_r+0x5bc>
 8006f3c:	4a3a      	ldr	r2, [pc, #232]	; (8007028 <_vfprintf_r+0xb60>)
 8006f3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006f40:	920f      	str	r2, [sp, #60]	; 0x3c
 8006f42:	2d10      	cmp	r5, #16
 8006f44:	f340 81b4 	ble.w	80072b0 <_vfprintf_r+0xde8>
 8006f48:	2610      	movs	r6, #16
 8006f4a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006f4c:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006f50:	e005      	b.n	8006f5e <_vfprintf_r+0xa96>
 8006f52:	f109 0908 	add.w	r9, r9, #8
 8006f56:	3d10      	subs	r5, #16
 8006f58:	2d10      	cmp	r5, #16
 8006f5a:	f340 81a9 	ble.w	80072b0 <_vfprintf_r+0xde8>
 8006f5e:	3301      	adds	r3, #1
 8006f60:	3410      	adds	r4, #16
 8006f62:	2b07      	cmp	r3, #7
 8006f64:	9429      	str	r4, [sp, #164]	; 0xa4
 8006f66:	9328      	str	r3, [sp, #160]	; 0xa0
 8006f68:	f8c9 a000 	str.w	sl, [r9]
 8006f6c:	f8c9 6004 	str.w	r6, [r9, #4]
 8006f70:	ddef      	ble.n	8006f52 <_vfprintf_r+0xa8a>
 8006f72:	aa27      	add	r2, sp, #156	; 0x9c
 8006f74:	4659      	mov	r1, fp
 8006f76:	4638      	mov	r0, r7
 8006f78:	f004 fa0a 	bl	800b390 <__sprint_r>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	f47f abd3 	bne.w	8006728 <_vfprintf_r+0x260>
 8006f82:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8006f84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006f86:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8006f8a:	e7e4      	b.n	8006f56 <_vfprintf_r+0xa8e>
 8006f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f90:	1a9f      	subs	r7, r3, r2
 8006f92:	2f00      	cmp	r7, #0
 8006f94:	f77f ad2a 	ble.w	80069ec <_vfprintf_r+0x524>
 8006f98:	4a23      	ldr	r2, [pc, #140]	; (8007028 <_vfprintf_r+0xb60>)
 8006f9a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006f9c:	920f      	str	r2, [sp, #60]	; 0x3c
 8006f9e:	2f10      	cmp	r7, #16
 8006fa0:	dd2b      	ble.n	8006ffa <_vfprintf_r+0xb32>
 8006fa2:	464a      	mov	r2, r9
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	46b9      	mov	r9, r7
 8006fa8:	2510      	movs	r5, #16
 8006faa:	4637      	mov	r7, r6
 8006fac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006fae:	9e08      	ldr	r6, [sp, #32]
 8006fb0:	e006      	b.n	8006fc0 <_vfprintf_r+0xaf8>
 8006fb2:	f1a9 0910 	sub.w	r9, r9, #16
 8006fb6:	f1b9 0f10 	cmp.w	r9, #16
 8006fba:	f102 0208 	add.w	r2, r2, #8
 8006fbe:	dd18      	ble.n	8006ff2 <_vfprintf_r+0xb2a>
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	3110      	adds	r1, #16
 8006fc4:	2b07      	cmp	r3, #7
 8006fc6:	9129      	str	r1, [sp, #164]	; 0xa4
 8006fc8:	9328      	str	r3, [sp, #160]	; 0xa0
 8006fca:	f8c2 a000 	str.w	sl, [r2]
 8006fce:	6055      	str	r5, [r2, #4]
 8006fd0:	ddef      	ble.n	8006fb2 <_vfprintf_r+0xaea>
 8006fd2:	aa27      	add	r2, sp, #156	; 0x9c
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	f004 f9da 	bl	800b390 <__sprint_r>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	f47f aba3 	bne.w	8006728 <_vfprintf_r+0x260>
 8006fe2:	f1a9 0910 	sub.w	r9, r9, #16
 8006fe6:	f1b9 0f10 	cmp.w	r9, #16
 8006fea:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8006fec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006fee:	aa34      	add	r2, sp, #208	; 0xd0
 8006ff0:	dce6      	bgt.n	8006fc0 <_vfprintf_r+0xaf8>
 8006ff2:	463e      	mov	r6, r7
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	464f      	mov	r7, r9
 8006ff8:	4691      	mov	r9, r2
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ffe:	9328      	str	r3, [sp, #160]	; 0xa0
 8007000:	443c      	add	r4, r7
 8007002:	2b07      	cmp	r3, #7
 8007004:	9429      	str	r4, [sp, #164]	; 0xa4
 8007006:	e889 0084 	stmia.w	r9, {r2, r7}
 800700a:	f300 822b 	bgt.w	8007464 <_vfprintf_r+0xf9c>
 800700e:	f109 0908 	add.w	r9, r9, #8
 8007012:	e4eb      	b.n	80069ec <_vfprintf_r+0x524>
 8007014:	7fefffff 	.word	0x7fefffff
 8007018:	0800bda4 	.word	0x0800bda4
 800701c:	0800bda0 	.word	0x0800bda0
 8007020:	0800bdc4 	.word	0x0800bdc4
 8007024:	0800bde0 	.word	0x0800bde0
 8007028:	0800bdf4 	.word	0x0800bdf4
 800702c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800702e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8007030:	2b01      	cmp	r3, #1
 8007032:	f340 81d0 	ble.w	80073d6 <_vfprintf_r+0xf0e>
 8007036:	3501      	adds	r5, #1
 8007038:	3401      	adds	r4, #1
 800703a:	2301      	movs	r3, #1
 800703c:	2d07      	cmp	r5, #7
 800703e:	9429      	str	r4, [sp, #164]	; 0xa4
 8007040:	9528      	str	r5, [sp, #160]	; 0xa0
 8007042:	f8c9 6000 	str.w	r6, [r9]
 8007046:	f8c9 3004 	str.w	r3, [r9, #4]
 800704a:	f300 81e1 	bgt.w	8007410 <_vfprintf_r+0xf48>
 800704e:	f109 0908 	add.w	r9, r9, #8
 8007052:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007056:	f8c9 3000 	str.w	r3, [r9]
 800705a:	3501      	adds	r5, #1
 800705c:	4414      	add	r4, r2
 800705e:	2d07      	cmp	r5, #7
 8007060:	9429      	str	r4, [sp, #164]	; 0xa4
 8007062:	9528      	str	r5, [sp, #160]	; 0xa0
 8007064:	f8c9 2004 	str.w	r2, [r9, #4]
 8007068:	f300 81df 	bgt.w	800742a <_vfprintf_r+0xf62>
 800706c:	f109 0908 	add.w	r9, r9, #8
 8007070:	2300      	movs	r3, #0
 8007072:	2200      	movs	r2, #0
 8007074:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007078:	f7fc fc22 	bl	80038c0 <__aeabi_dcmpeq>
 800707c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800707e:	2800      	cmp	r0, #0
 8007080:	f040 80cc 	bne.w	800721c <_vfprintf_r+0xd54>
 8007084:	3b01      	subs	r3, #1
 8007086:	3501      	adds	r5, #1
 8007088:	3601      	adds	r6, #1
 800708a:	441c      	add	r4, r3
 800708c:	2d07      	cmp	r5, #7
 800708e:	9528      	str	r5, [sp, #160]	; 0xa0
 8007090:	9429      	str	r4, [sp, #164]	; 0xa4
 8007092:	f8c9 6000 	str.w	r6, [r9]
 8007096:	f8c9 3004 	str.w	r3, [r9, #4]
 800709a:	f300 81ac 	bgt.w	80073f6 <_vfprintf_r+0xf2e>
 800709e:	f109 0908 	add.w	r9, r9, #8
 80070a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80070a4:	f8c9 2004 	str.w	r2, [r9, #4]
 80070a8:	3501      	adds	r5, #1
 80070aa:	4414      	add	r4, r2
 80070ac:	ab23      	add	r3, sp, #140	; 0x8c
 80070ae:	2d07      	cmp	r5, #7
 80070b0:	9429      	str	r4, [sp, #164]	; 0xa4
 80070b2:	9528      	str	r5, [sp, #160]	; 0xa0
 80070b4:	f8c9 3000 	str.w	r3, [r9]
 80070b8:	f77f ace2 	ble.w	8006a80 <_vfprintf_r+0x5b8>
 80070bc:	aa27      	add	r2, sp, #156	; 0x9c
 80070be:	9908      	ldr	r1, [sp, #32]
 80070c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070c2:	f004 f965 	bl	800b390 <__sprint_r>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	f47f ab2e 	bne.w	8006728 <_vfprintf_r+0x260>
 80070cc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80070ce:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80070d2:	e4d7      	b.n	8006a84 <_vfprintf_r+0x5bc>
 80070d4:	aa27      	add	r2, sp, #156	; 0x9c
 80070d6:	9908      	ldr	r1, [sp, #32]
 80070d8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070da:	f004 f959 	bl	800b390 <__sprint_r>
 80070de:	2800      	cmp	r0, #0
 80070e0:	f43f ad1e 	beq.w	8006b20 <_vfprintf_r+0x658>
 80070e4:	f7ff bb20 	b.w	8006728 <_vfprintf_r+0x260>
 80070e8:	aa27      	add	r2, sp, #156	; 0x9c
 80070ea:	9908      	ldr	r1, [sp, #32]
 80070ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070ee:	f004 f94f 	bl	800b390 <__sprint_r>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	f47f ab18 	bne.w	8006728 <_vfprintf_r+0x260>
 80070f8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80070fa:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80070fe:	e4ae      	b.n	8006a5e <_vfprintf_r+0x596>
 8007100:	aa27      	add	r2, sp, #156	; 0x9c
 8007102:	9908      	ldr	r1, [sp, #32]
 8007104:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007106:	f004 f943 	bl	800b390 <__sprint_r>
 800710a:	2800      	cmp	r0, #0
 800710c:	f47f ab0c 	bne.w	8006728 <_vfprintf_r+0x260>
 8007110:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007112:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007116:	e455      	b.n	80069c4 <_vfprintf_r+0x4fc>
 8007118:	aa27      	add	r2, sp, #156	; 0x9c
 800711a:	9908      	ldr	r1, [sp, #32]
 800711c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800711e:	f004 f937 	bl	800b390 <__sprint_r>
 8007122:	2800      	cmp	r0, #0
 8007124:	f47f ab00 	bne.w	8006728 <_vfprintf_r+0x260>
 8007128:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800712a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800712e:	e459      	b.n	80069e4 <_vfprintf_r+0x51c>
 8007130:	f1bb 0f00 	cmp.w	fp, #0
 8007134:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8007138:	f2c0 830d 	blt.w	8007756 <_vfprintf_r+0x128e>
 800713c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
 8007140:	9307      	str	r3, [sp, #28]
 8007142:	ea54 0305 	orrs.w	r3, r4, r5
 8007146:	f47f ad21 	bne.w	8006b8c <_vfprintf_r+0x6c4>
 800714a:	f1bb 0f00 	cmp.w	fp, #0
 800714e:	f43f ae8d 	beq.w	8006e6c <_vfprintf_r+0x9a4>
 8007152:	2700      	movs	r7, #0
 8007154:	e6b3      	b.n	8006ebe <_vfprintf_r+0x9f6>
 8007156:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8007158:	2d00      	cmp	r5, #0
 800715a:	f340 82aa 	ble.w	80076b2 <_vfprintf_r+0x11ea>
 800715e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007160:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007162:	4293      	cmp	r3, r2
 8007164:	bfa8      	it	ge
 8007166:	4613      	movge	r3, r2
 8007168:	2b00      	cmp	r3, #0
 800716a:	461d      	mov	r5, r3
 800716c:	dd0d      	ble.n	800718a <_vfprintf_r+0xcc2>
 800716e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007170:	f8c9 6000 	str.w	r6, [r9]
 8007174:	3301      	adds	r3, #1
 8007176:	442c      	add	r4, r5
 8007178:	2b07      	cmp	r3, #7
 800717a:	9429      	str	r4, [sp, #164]	; 0xa4
 800717c:	f8c9 5004 	str.w	r5, [r9, #4]
 8007180:	9328      	str	r3, [sp, #160]	; 0xa0
 8007182:	f300 8387 	bgt.w	8007894 <_vfprintf_r+0x13cc>
 8007186:	f109 0908 	add.w	r9, r9, #8
 800718a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800718c:	2d00      	cmp	r5, #0
 800718e:	bfa8      	it	ge
 8007190:	1b5b      	subge	r3, r3, r5
 8007192:	2b00      	cmp	r3, #0
 8007194:	461d      	mov	r5, r3
 8007196:	f340 80be 	ble.w	8007316 <_vfprintf_r+0xe4e>
 800719a:	4ab9      	ldr	r2, [pc, #740]	; (8007480 <_vfprintf_r+0xfb8>)
 800719c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800719e:	920f      	str	r2, [sp, #60]	; 0x3c
 80071a0:	2d10      	cmp	r5, #16
 80071a2:	f340 826d 	ble.w	8007680 <_vfprintf_r+0x11b8>
 80071a6:	4622      	mov	r2, r4
 80071a8:	2710      	movs	r7, #16
 80071aa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80071ae:	9c08      	ldr	r4, [sp, #32]
 80071b0:	e005      	b.n	80071be <_vfprintf_r+0xcf6>
 80071b2:	f109 0908 	add.w	r9, r9, #8
 80071b6:	3d10      	subs	r5, #16
 80071b8:	2d10      	cmp	r5, #16
 80071ba:	f340 8260 	ble.w	800767e <_vfprintf_r+0x11b6>
 80071be:	3301      	adds	r3, #1
 80071c0:	3210      	adds	r2, #16
 80071c2:	2b07      	cmp	r3, #7
 80071c4:	9229      	str	r2, [sp, #164]	; 0xa4
 80071c6:	9328      	str	r3, [sp, #160]	; 0xa0
 80071c8:	f8c9 a000 	str.w	sl, [r9]
 80071cc:	f8c9 7004 	str.w	r7, [r9, #4]
 80071d0:	ddef      	ble.n	80071b2 <_vfprintf_r+0xcea>
 80071d2:	aa27      	add	r2, sp, #156	; 0x9c
 80071d4:	4621      	mov	r1, r4
 80071d6:	4658      	mov	r0, fp
 80071d8:	f004 f8da 	bl	800b390 <__sprint_r>
 80071dc:	2800      	cmp	r0, #0
 80071de:	f47f aaa3 	bne.w	8006728 <_vfprintf_r+0x260>
 80071e2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80071e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80071e6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80071ea:	e7e4      	b.n	80071b6 <_vfprintf_r+0xcee>
 80071ec:	aa27      	add	r2, sp, #156	; 0x9c
 80071ee:	9908      	ldr	r1, [sp, #32]
 80071f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80071f2:	f004 f8cd 	bl	800b390 <__sprint_r>
 80071f6:	2800      	cmp	r0, #0
 80071f8:	f47f aa96 	bne.w	8006728 <_vfprintf_r+0x260>
 80071fc:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8007200:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007202:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007206:	f7ff bbcd 	b.w	80069a4 <_vfprintf_r+0x4dc>
 800720a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800720c:	6814      	ldr	r4, [r2, #0]
 800720e:	4613      	mov	r3, r2
 8007210:	3304      	adds	r3, #4
 8007212:	17e5      	asrs	r5, r4, #31
 8007214:	930e      	str	r3, [sp, #56]	; 0x38
 8007216:	4622      	mov	r2, r4
 8007218:	462b      	mov	r3, r5
 800721a:	e4f4      	b.n	8006c06 <_vfprintf_r+0x73e>
 800721c:	1e5e      	subs	r6, r3, #1
 800721e:	2e00      	cmp	r6, #0
 8007220:	f77f af3f 	ble.w	80070a2 <_vfprintf_r+0xbda>
 8007224:	4b96      	ldr	r3, [pc, #600]	; (8007480 <_vfprintf_r+0xfb8>)
 8007226:	930f      	str	r3, [sp, #60]	; 0x3c
 8007228:	2e10      	cmp	r6, #16
 800722a:	f340 8110 	ble.w	800744e <_vfprintf_r+0xf86>
 800722e:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8007232:	2710      	movs	r7, #16
 8007234:	46b0      	mov	r8, r6
 8007236:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800723a:	9e08      	ldr	r6, [sp, #32]
 800723c:	e007      	b.n	800724e <_vfprintf_r+0xd86>
 800723e:	f109 0908 	add.w	r9, r9, #8
 8007242:	f1a8 0810 	sub.w	r8, r8, #16
 8007246:	f1b8 0f10 	cmp.w	r8, #16
 800724a:	f340 80fd 	ble.w	8007448 <_vfprintf_r+0xf80>
 800724e:	3501      	adds	r5, #1
 8007250:	3410      	adds	r4, #16
 8007252:	2d07      	cmp	r5, #7
 8007254:	9429      	str	r4, [sp, #164]	; 0xa4
 8007256:	9528      	str	r5, [sp, #160]	; 0xa0
 8007258:	f8c9 a000 	str.w	sl, [r9]
 800725c:	f8c9 7004 	str.w	r7, [r9, #4]
 8007260:	dded      	ble.n	800723e <_vfprintf_r+0xd76>
 8007262:	aa27      	add	r2, sp, #156	; 0x9c
 8007264:	4631      	mov	r1, r6
 8007266:	4658      	mov	r0, fp
 8007268:	f004 f892 	bl	800b390 <__sprint_r>
 800726c:	2800      	cmp	r0, #0
 800726e:	f47f aa5b 	bne.w	8006728 <_vfprintf_r+0x260>
 8007272:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007274:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8007276:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800727a:	e7e2      	b.n	8007242 <_vfprintf_r+0xd7a>
 800727c:	9907      	ldr	r1, [sp, #28]
 800727e:	f011 0210 	ands.w	r2, r1, #16
 8007282:	d020      	beq.n	80072c6 <_vfprintf_r+0xdfe>
 8007284:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007286:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800728a:	f1bb 0f00 	cmp.w	fp, #0
 800728e:	6804      	ldr	r4, [r0, #0]
 8007290:	f100 0704 	add.w	r7, r0, #4
 8007294:	f04f 0500 	mov.w	r5, #0
 8007298:	db26      	blt.n	80072e8 <_vfprintf_r+0xe20>
 800729a:	460a      	mov	r2, r1
 800729c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072a0:	9207      	str	r2, [sp, #28]
 80072a2:	ea54 0205 	orrs.w	r2, r4, r5
 80072a6:	970e      	str	r7, [sp, #56]	; 0x38
 80072a8:	461f      	mov	r7, r3
 80072aa:	f47f ab03 	bne.w	80068b4 <_vfprintf_r+0x3ec>
 80072ae:	e4bd      	b.n	8006c2c <_vfprintf_r+0x764>
 80072b0:	3301      	adds	r3, #1
 80072b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072b4:	9328      	str	r3, [sp, #160]	; 0xa0
 80072b6:	442c      	add	r4, r5
 80072b8:	2b07      	cmp	r3, #7
 80072ba:	9429      	str	r4, [sp, #164]	; 0xa4
 80072bc:	e889 0024 	stmia.w	r9, {r2, r5}
 80072c0:	f77f abde 	ble.w	8006a80 <_vfprintf_r+0x5b8>
 80072c4:	e6fa      	b.n	80070bc <_vfprintf_r+0xbf4>
 80072c6:	9907      	ldr	r1, [sp, #28]
 80072c8:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80072cc:	f040 824a 	bne.w	8007764 <_vfprintf_r+0x129c>
 80072d0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80072d2:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80072d6:	f1bb 0f00 	cmp.w	fp, #0
 80072da:	680c      	ldr	r4, [r1, #0]
 80072dc:	f101 0704 	add.w	r7, r1, #4
 80072e0:	f04f 0500 	mov.w	r5, #0
 80072e4:	f280 811a 	bge.w	800751c <_vfprintf_r+0x1054>
 80072e8:	970e      	str	r7, [sp, #56]	; 0x38
 80072ea:	461f      	mov	r7, r3
 80072ec:	ea54 0305 	orrs.w	r3, r4, r5
 80072f0:	f47f aae0 	bne.w	80068b4 <_vfprintf_r+0x3ec>
 80072f4:	ae44      	add	r6, sp, #272	; 0x110
 80072f6:	3430      	adds	r4, #48	; 0x30
 80072f8:	f806 4d41 	strb.w	r4, [r6, #-65]!
 80072fc:	f7ff baf4 	b.w	80068e8 <_vfprintf_r+0x420>
 8007300:	aa27      	add	r2, sp, #156	; 0x9c
 8007302:	9908      	ldr	r1, [sp, #32]
 8007304:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007306:	f004 f843 	bl	800b390 <__sprint_r>
 800730a:	2800      	cmp	r0, #0
 800730c:	f47f aa0c 	bne.w	8006728 <_vfprintf_r+0x260>
 8007310:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007312:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007316:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007318:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800731a:	4432      	add	r2, r6
 800731c:	4617      	mov	r7, r2
 800731e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007320:	4293      	cmp	r3, r2
 8007322:	db47      	blt.n	80073b4 <_vfprintf_r+0xeec>
 8007324:	9a07      	ldr	r2, [sp, #28]
 8007326:	07d2      	lsls	r2, r2, #31
 8007328:	d444      	bmi.n	80073b4 <_vfprintf_r+0xeec>
 800732a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800732c:	440e      	add	r6, r1
 800732e:	1bf5      	subs	r5, r6, r7
 8007330:	1acb      	subs	r3, r1, r3
 8007332:	429d      	cmp	r5, r3
 8007334:	bfa8      	it	ge
 8007336:	461d      	movge	r5, r3
 8007338:	2d00      	cmp	r5, #0
 800733a:	462e      	mov	r6, r5
 800733c:	dd0d      	ble.n	800735a <_vfprintf_r+0xe92>
 800733e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8007340:	f8c9 7000 	str.w	r7, [r9]
 8007344:	3201      	adds	r2, #1
 8007346:	442c      	add	r4, r5
 8007348:	2a07      	cmp	r2, #7
 800734a:	9429      	str	r4, [sp, #164]	; 0xa4
 800734c:	f8c9 5004 	str.w	r5, [r9, #4]
 8007350:	9228      	str	r2, [sp, #160]	; 0xa0
 8007352:	f300 832e 	bgt.w	80079b2 <_vfprintf_r+0x14ea>
 8007356:	f109 0908 	add.w	r9, r9, #8
 800735a:	2e00      	cmp	r6, #0
 800735c:	bfac      	ite	ge
 800735e:	1b9d      	subge	r5, r3, r6
 8007360:	461d      	movlt	r5, r3
 8007362:	2d00      	cmp	r5, #0
 8007364:	f77f ab8e 	ble.w	8006a84 <_vfprintf_r+0x5bc>
 8007368:	4a45      	ldr	r2, [pc, #276]	; (8007480 <_vfprintf_r+0xfb8>)
 800736a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800736c:	920f      	str	r2, [sp, #60]	; 0x3c
 800736e:	2d10      	cmp	r5, #16
 8007370:	dd9e      	ble.n	80072b0 <_vfprintf_r+0xde8>
 8007372:	2610      	movs	r6, #16
 8007374:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007376:	f8dd b020 	ldr.w	fp, [sp, #32]
 800737a:	e004      	b.n	8007386 <_vfprintf_r+0xebe>
 800737c:	f109 0908 	add.w	r9, r9, #8
 8007380:	3d10      	subs	r5, #16
 8007382:	2d10      	cmp	r5, #16
 8007384:	dd94      	ble.n	80072b0 <_vfprintf_r+0xde8>
 8007386:	3301      	adds	r3, #1
 8007388:	3410      	adds	r4, #16
 800738a:	2b07      	cmp	r3, #7
 800738c:	9429      	str	r4, [sp, #164]	; 0xa4
 800738e:	9328      	str	r3, [sp, #160]	; 0xa0
 8007390:	f8c9 a000 	str.w	sl, [r9]
 8007394:	f8c9 6004 	str.w	r6, [r9, #4]
 8007398:	ddf0      	ble.n	800737c <_vfprintf_r+0xeb4>
 800739a:	aa27      	add	r2, sp, #156	; 0x9c
 800739c:	4659      	mov	r1, fp
 800739e:	4638      	mov	r0, r7
 80073a0:	f003 fff6 	bl	800b390 <__sprint_r>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	f47f a9bf 	bne.w	8006728 <_vfprintf_r+0x260>
 80073aa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80073ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80073ae:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80073b2:	e7e5      	b.n	8007380 <_vfprintf_r+0xeb8>
 80073b4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80073b6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80073b8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80073ba:	f8c9 1000 	str.w	r1, [r9]
 80073be:	3201      	adds	r2, #1
 80073c0:	4404      	add	r4, r0
 80073c2:	2a07      	cmp	r2, #7
 80073c4:	9429      	str	r4, [sp, #164]	; 0xa4
 80073c6:	f8c9 0004 	str.w	r0, [r9, #4]
 80073ca:	9228      	str	r2, [sp, #160]	; 0xa0
 80073cc:	f300 82cf 	bgt.w	800796e <_vfprintf_r+0x14a6>
 80073d0:	f109 0908 	add.w	r9, r9, #8
 80073d4:	e7a9      	b.n	800732a <_vfprintf_r+0xe62>
 80073d6:	9b07      	ldr	r3, [sp, #28]
 80073d8:	07df      	lsls	r7, r3, #31
 80073da:	f53f ae2c 	bmi.w	8007036 <_vfprintf_r+0xb6e>
 80073de:	3501      	adds	r5, #1
 80073e0:	3401      	adds	r4, #1
 80073e2:	2301      	movs	r3, #1
 80073e4:	2d07      	cmp	r5, #7
 80073e6:	9429      	str	r4, [sp, #164]	; 0xa4
 80073e8:	9528      	str	r5, [sp, #160]	; 0xa0
 80073ea:	f8c9 6000 	str.w	r6, [r9]
 80073ee:	f8c9 3004 	str.w	r3, [r9, #4]
 80073f2:	f77f ae54 	ble.w	800709e <_vfprintf_r+0xbd6>
 80073f6:	aa27      	add	r2, sp, #156	; 0x9c
 80073f8:	9908      	ldr	r1, [sp, #32]
 80073fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80073fc:	f003 ffc8 	bl	800b390 <__sprint_r>
 8007400:	2800      	cmp	r0, #0
 8007402:	f47f a991 	bne.w	8006728 <_vfprintf_r+0x260>
 8007406:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007408:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800740a:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800740e:	e648      	b.n	80070a2 <_vfprintf_r+0xbda>
 8007410:	aa27      	add	r2, sp, #156	; 0x9c
 8007412:	9908      	ldr	r1, [sp, #32]
 8007414:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007416:	f003 ffbb 	bl	800b390 <__sprint_r>
 800741a:	2800      	cmp	r0, #0
 800741c:	f47f a984 	bne.w	8006728 <_vfprintf_r+0x260>
 8007420:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007422:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8007424:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007428:	e613      	b.n	8007052 <_vfprintf_r+0xb8a>
 800742a:	aa27      	add	r2, sp, #156	; 0x9c
 800742c:	9908      	ldr	r1, [sp, #32]
 800742e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007430:	f003 ffae 	bl	800b390 <__sprint_r>
 8007434:	2800      	cmp	r0, #0
 8007436:	f47f a977 	bne.w	8006728 <_vfprintf_r+0x260>
 800743a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 800743c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800743e:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007442:	e615      	b.n	8007070 <_vfprintf_r+0xba8>
 8007444:	2400      	movs	r4, #0
 8007446:	e755      	b.n	80072f4 <_vfprintf_r+0xe2c>
 8007448:	4646      	mov	r6, r8
 800744a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800744e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007450:	3501      	adds	r5, #1
 8007452:	4434      	add	r4, r6
 8007454:	2d07      	cmp	r5, #7
 8007456:	9429      	str	r4, [sp, #164]	; 0xa4
 8007458:	9528      	str	r5, [sp, #160]	; 0xa0
 800745a:	e889 0048 	stmia.w	r9, {r3, r6}
 800745e:	f77f ae1e 	ble.w	800709e <_vfprintf_r+0xbd6>
 8007462:	e7c8      	b.n	80073f6 <_vfprintf_r+0xf2e>
 8007464:	aa27      	add	r2, sp, #156	; 0x9c
 8007466:	9908      	ldr	r1, [sp, #32]
 8007468:	980a      	ldr	r0, [sp, #40]	; 0x28
 800746a:	f003 ff91 	bl	800b390 <__sprint_r>
 800746e:	2800      	cmp	r0, #0
 8007470:	f47f a95a 	bne.w	8006728 <_vfprintf_r+0x260>
 8007474:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007476:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800747a:	f7ff bab7 	b.w	80069ec <_vfprintf_r+0x524>
 800747e:	bf00      	nop
 8007480:	0800bdf4 	.word	0x0800bdf4
 8007484:	4264      	negs	r4, r4
 8007486:	f04f 072d 	mov.w	r7, #45	; 0x2d
 800748a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800748e:	f1bb 0f00 	cmp.w	fp, #0
 8007492:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8007496:	f6ff aa0d 	blt.w	80068b4 <_vfprintf_r+0x3ec>
 800749a:	9b07      	ldr	r3, [sp, #28]
 800749c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074a0:	9307      	str	r3, [sp, #28]
 80074a2:	f7ff ba07 	b.w	80068b4 <_vfprintf_r+0x3ec>
 80074a6:	9907      	ldr	r1, [sp, #28]
 80074a8:	f011 0340 	ands.w	r3, r1, #64	; 0x40
 80074ac:	d017      	beq.n	80074de <_vfprintf_r+0x1016>
 80074ae:	980e      	ldr	r0, [sp, #56]	; 0x38
 80074b0:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 80074b4:	4603      	mov	r3, r0
 80074b6:	f1bb 0f00 	cmp.w	fp, #0
 80074ba:	f103 0304 	add.w	r3, r3, #4
 80074be:	8804      	ldrh	r4, [r0, #0]
 80074c0:	f04f 0500 	mov.w	r5, #0
 80074c4:	f2c0 831b 	blt.w	8007afe <_vfprintf_r+0x1636>
 80074c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80074cc:	9107      	str	r1, [sp, #28]
 80074ce:	ea54 0105 	orrs.w	r1, r4, r5
 80074d2:	930e      	str	r3, [sp, #56]	; 0x38
 80074d4:	f43f ace1 	beq.w	8006e9a <_vfprintf_r+0x9d2>
 80074d8:	4617      	mov	r7, r2
 80074da:	f7ff b95c 	b.w	8006796 <_vfprintf_r+0x2ce>
 80074de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80074e0:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 80074e4:	f1bb 0f00 	cmp.w	fp, #0
 80074e8:	680c      	ldr	r4, [r1, #0]
 80074ea:	f101 0704 	add.w	r7, r1, #4
 80074ee:	f04f 0500 	mov.w	r5, #0
 80074f2:	db02      	blt.n	80074fa <_vfprintf_r+0x1032>
 80074f4:	9a07      	ldr	r2, [sp, #28]
 80074f6:	f7ff b9af 	b.w	8006858 <_vfprintf_r+0x390>
 80074fa:	970e      	str	r7, [sp, #56]	; 0x38
 80074fc:	2700      	movs	r7, #0
 80074fe:	f7ff b94a 	b.w	8006796 <_vfprintf_r+0x2ce>
 8007502:	9b07      	ldr	r3, [sp, #28]
 8007504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007506:	f013 0f40 	tst.w	r3, #64	; 0x40
 800750a:	4613      	mov	r3, r2
 800750c:	f000 8142 	beq.w	8007794 <_vfprintf_r+0x12cc>
 8007510:	3304      	adds	r3, #4
 8007512:	8814      	ldrh	r4, [r2, #0]
 8007514:	930e      	str	r3, [sp, #56]	; 0x38
 8007516:	2500      	movs	r5, #0
 8007518:	f7ff bb1a 	b.w	8006b50 <_vfprintf_r+0x688>
 800751c:	9a07      	ldr	r2, [sp, #28]
 800751e:	e6bd      	b.n	800729c <_vfprintf_r+0xdd4>
 8007520:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	f7fc f9fc 	bl	8003924 <__aeabi_dcmpun>
 800752c:	2800      	cmp	r0, #0
 800752e:	f040 82e8 	bne.w	8007b02 <_vfprintf_r+0x163a>
 8007532:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007534:	f1bb 3fff 	cmp.w	fp, #4294967295
 8007538:	f023 0720 	bic.w	r7, r3, #32
 800753c:	f000 825f 	beq.w	80079fe <_vfprintf_r+0x1536>
 8007540:	2f47      	cmp	r7, #71	; 0x47
 8007542:	f000 8158 	beq.w	80077f6 <_vfprintf_r+0x132e>
 8007546:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007548:	9a07      	ldr	r2, [sp, #28]
 800754a:	2b00      	cmp	r3, #0
 800754c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007550:	920f      	str	r2, [sp, #60]	; 0x3c
 8007552:	f2c0 825c 	blt.w	8007a0e <_vfprintf_r+0x1546>
 8007556:	ed9d 7b14 	vldr	d7, [sp, #80]	; 0x50
 800755a:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800755e:	2300      	movs	r3, #0
 8007560:	9309      	str	r3, [sp, #36]	; 0x24
 8007562:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007564:	2b66      	cmp	r3, #102	; 0x66
 8007566:	f000 8233 	beq.w	80079d0 <_vfprintf_r+0x1508>
 800756a:	2b46      	cmp	r3, #70	; 0x46
 800756c:	f000 8125 	beq.w	80077ba <_vfprintf_r+0x12f2>
 8007570:	2f45      	cmp	r7, #69	; 0x45
 8007572:	bf0c      	ite	eq
 8007574:	f10b 0501 	addeq.w	r5, fp, #1
 8007578:	465d      	movne	r5, fp
 800757a:	a825      	add	r0, sp, #148	; 0x94
 800757c:	a922      	add	r1, sp, #136	; 0x88
 800757e:	aa21      	add	r2, sp, #132	; 0x84
 8007580:	2302      	movs	r3, #2
 8007582:	9004      	str	r0, [sp, #16]
 8007584:	9202      	str	r2, [sp, #8]
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	9501      	str	r5, [sp, #4]
 800758a:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800758e:	9103      	str	r1, [sp, #12]
 8007590:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007592:	f000 fc89 	bl	8007ea8 <_dtoa_r>
 8007596:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007598:	2b67      	cmp	r3, #103	; 0x67
 800759a:	4606      	mov	r6, r0
 800759c:	f040 8275 	bne.w	8007a8a <_vfprintf_r+0x15c2>
 80075a0:	9b07      	ldr	r3, [sp, #28]
 80075a2:	07da      	lsls	r2, r3, #31
 80075a4:	f140 8294 	bpl.w	8007ad0 <_vfprintf_r+0x1608>
 80075a8:	1974      	adds	r4, r6, r5
 80075aa:	2200      	movs	r2, #0
 80075ac:	2300      	movs	r3, #0
 80075ae:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80075b2:	f7fc f985 	bl	80038c0 <__aeabi_dcmpeq>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f040 8178 	bne.w	80078ac <_vfprintf_r+0x13e4>
 80075bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80075be:	429c      	cmp	r4, r3
 80075c0:	d906      	bls.n	80075d0 <_vfprintf_r+0x1108>
 80075c2:	2130      	movs	r1, #48	; 0x30
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	9225      	str	r2, [sp, #148]	; 0x94
 80075c8:	7019      	strb	r1, [r3, #0]
 80075ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80075cc:	429c      	cmp	r4, r3
 80075ce:	d8f9      	bhi.n	80075c4 <_vfprintf_r+0x10fc>
 80075d0:	1b9b      	subs	r3, r3, r6
 80075d2:	2f47      	cmp	r7, #71	; 0x47
 80075d4:	9312      	str	r3, [sp, #72]	; 0x48
 80075d6:	f000 8156 	beq.w	8007886 <_vfprintf_r+0x13be>
 80075da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075dc:	2b65      	cmp	r3, #101	; 0x65
 80075de:	f340 8263 	ble.w	8007aa8 <_vfprintf_r+0x15e0>
 80075e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075e4:	2b66      	cmp	r3, #102	; 0x66
 80075e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80075ea:	f000 8226 	beq.w	8007a3a <_vfprintf_r+0x1572>
 80075ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80075f0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80075f2:	428a      	cmp	r2, r1
 80075f4:	f2c0 8214 	blt.w	8007a20 <_vfprintf_r+0x1558>
 80075f8:	9b07      	ldr	r3, [sp, #28]
 80075fa:	07db      	lsls	r3, r3, #31
 80075fc:	f100 826a 	bmi.w	8007ad4 <_vfprintf_r+0x160c>
 8007600:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007604:	920d      	str	r2, [sp, #52]	; 0x34
 8007606:	2267      	movs	r2, #103	; 0x67
 8007608:	9211      	str	r2, [sp, #68]	; 0x44
 800760a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800760c:	2a00      	cmp	r2, #0
 800760e:	f040 8117 	bne.w	8007840 <_vfprintf_r+0x1378>
 8007612:	9309      	str	r3, [sp, #36]	; 0x24
 8007614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007616:	9307      	str	r3, [sp, #28]
 8007618:	4693      	mov	fp, r2
 800761a:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 800761e:	f7ff b96d 	b.w	80068fc <_vfprintf_r+0x434>
 8007622:	f027 0707 	bic.w	r7, r7, #7
 8007626:	ed97 7b00 	vldr	d7, [r7]
 800762a:	f107 0308 	add.w	r3, r7, #8
 800762e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8007632:	930e      	str	r3, [sp, #56]	; 0x38
 8007634:	f7ff bb77 	b.w	8006d26 <_vfprintf_r+0x85e>
 8007638:	9b07      	ldr	r3, [sp, #28]
 800763a:	06de      	lsls	r6, r3, #27
 800763c:	d40b      	bmi.n	8007656 <_vfprintf_r+0x118e>
 800763e:	9b07      	ldr	r3, [sp, #28]
 8007640:	065d      	lsls	r5, r3, #25
 8007642:	d508      	bpl.n	8007656 <_vfprintf_r+0x118e>
 8007644:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007646:	6813      	ldr	r3, [r2, #0]
 8007648:	3204      	adds	r2, #4
 800764a:	920e      	str	r2, [sp, #56]	; 0x38
 800764c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8007650:	801a      	strh	r2, [r3, #0]
 8007652:	f7fe bf7a 	b.w	800654a <_vfprintf_r+0x82>
 8007656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007658:	6813      	ldr	r3, [r2, #0]
 800765a:	3204      	adds	r2, #4
 800765c:	920e      	str	r2, [sp, #56]	; 0x38
 800765e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	f7fe bf72 	b.w	800654a <_vfprintf_r+0x82>
 8007666:	2700      	movs	r7, #0
 8007668:	45bb      	cmp	fp, r7
 800766a:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800766e:	f6ff ac26 	blt.w	8006ebe <_vfprintf_r+0x9f6>
 8007672:	9b07      	ldr	r3, [sp, #28]
 8007674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007678:	9307      	str	r3, [sp, #28]
 800767a:	f7ff bbf3 	b.w	8006e64 <_vfprintf_r+0x99c>
 800767e:	4614      	mov	r4, r2
 8007680:	3301      	adds	r3, #1
 8007682:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007684:	9328      	str	r3, [sp, #160]	; 0xa0
 8007686:	442c      	add	r4, r5
 8007688:	2b07      	cmp	r3, #7
 800768a:	9429      	str	r4, [sp, #164]	; 0xa4
 800768c:	e889 0024 	stmia.w	r9, {r2, r5}
 8007690:	f73f ae36 	bgt.w	8007300 <_vfprintf_r+0xe38>
 8007694:	f109 0908 	add.w	r9, r9, #8
 8007698:	e63d      	b.n	8007316 <_vfprintf_r+0xe4e>
 800769a:	aa27      	add	r2, sp, #156	; 0x9c
 800769c:	9908      	ldr	r1, [sp, #32]
 800769e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80076a0:	f003 fe76 	bl	800b390 <__sprint_r>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	f47f a83f 	bne.w	8006728 <_vfprintf_r+0x260>
 80076aa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80076ac:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80076b0:	e427      	b.n	8006f02 <_vfprintf_r+0xa3a>
 80076b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80076b4:	4ab4      	ldr	r2, [pc, #720]	; (8007988 <_vfprintf_r+0x14c0>)
 80076b6:	f8c9 2000 	str.w	r2, [r9]
 80076ba:	3301      	adds	r3, #1
 80076bc:	3401      	adds	r4, #1
 80076be:	2201      	movs	r2, #1
 80076c0:	2b07      	cmp	r3, #7
 80076c2:	9429      	str	r4, [sp, #164]	; 0xa4
 80076c4:	9328      	str	r3, [sp, #160]	; 0xa0
 80076c6:	f8c9 2004 	str.w	r2, [r9, #4]
 80076ca:	dc69      	bgt.n	80077a0 <_vfprintf_r+0x12d8>
 80076cc:	f109 0908 	add.w	r9, r9, #8
 80076d0:	b92d      	cbnz	r5, 80076de <_vfprintf_r+0x1216>
 80076d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076d4:	b91b      	cbnz	r3, 80076de <_vfprintf_r+0x1216>
 80076d6:	9b07      	ldr	r3, [sp, #28]
 80076d8:	07d9      	lsls	r1, r3, #31
 80076da:	f57f a9d3 	bpl.w	8006a84 <_vfprintf_r+0x5bc>
 80076de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80076e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80076e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076e4:	f8c9 2000 	str.w	r2, [r9]
 80076e8:	3301      	adds	r3, #1
 80076ea:	440c      	add	r4, r1
 80076ec:	2b07      	cmp	r3, #7
 80076ee:	9429      	str	r4, [sp, #164]	; 0xa4
 80076f0:	f8c9 1004 	str.w	r1, [r9, #4]
 80076f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80076f6:	f300 81d9 	bgt.w	8007aac <_vfprintf_r+0x15e4>
 80076fa:	f109 0908 	add.w	r9, r9, #8
 80076fe:	426d      	negs	r5, r5
 8007700:	2d00      	cmp	r5, #0
 8007702:	f340 80b3 	ble.w	800786c <_vfprintf_r+0x13a4>
 8007706:	4aa1      	ldr	r2, [pc, #644]	; (800798c <_vfprintf_r+0x14c4>)
 8007708:	920f      	str	r2, [sp, #60]	; 0x3c
 800770a:	2d10      	cmp	r5, #16
 800770c:	f340 8122 	ble.w	8007954 <_vfprintf_r+0x148c>
 8007710:	4622      	mov	r2, r4
 8007712:	2710      	movs	r7, #16
 8007714:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8007718:	9c08      	ldr	r4, [sp, #32]
 800771a:	e005      	b.n	8007728 <_vfprintf_r+0x1260>
 800771c:	f109 0908 	add.w	r9, r9, #8
 8007720:	3d10      	subs	r5, #16
 8007722:	2d10      	cmp	r5, #16
 8007724:	f340 8115 	ble.w	8007952 <_vfprintf_r+0x148a>
 8007728:	3301      	adds	r3, #1
 800772a:	3210      	adds	r2, #16
 800772c:	2b07      	cmp	r3, #7
 800772e:	9229      	str	r2, [sp, #164]	; 0xa4
 8007730:	9328      	str	r3, [sp, #160]	; 0xa0
 8007732:	f8c9 a000 	str.w	sl, [r9]
 8007736:	f8c9 7004 	str.w	r7, [r9, #4]
 800773a:	ddef      	ble.n	800771c <_vfprintf_r+0x1254>
 800773c:	aa27      	add	r2, sp, #156	; 0x9c
 800773e:	4621      	mov	r1, r4
 8007740:	4658      	mov	r0, fp
 8007742:	f003 fe25 	bl	800b390 <__sprint_r>
 8007746:	2800      	cmp	r0, #0
 8007748:	f47e afee 	bne.w	8006728 <_vfprintf_r+0x260>
 800774c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800774e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007750:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007754:	e7e4      	b.n	8007720 <_vfprintf_r+0x1258>
 8007756:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8007758:	f7ff bbaa 	b.w	8006eb0 <_vfprintf_r+0x9e8>
 800775c:	f04f 30ff 	mov.w	r0, #4294967295
 8007760:	f7fe bfe8 	b.w	8006734 <_vfprintf_r+0x26c>
 8007764:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007766:	f88d 207f 	strb.w	r2, [sp, #127]	; 0x7f
 800776a:	4603      	mov	r3, r0
 800776c:	f1bb 0f00 	cmp.w	fp, #0
 8007770:	f103 0304 	add.w	r3, r3, #4
 8007774:	8804      	ldrh	r4, [r0, #0]
 8007776:	f04f 0500 	mov.w	r5, #0
 800777a:	f2c0 81b4 	blt.w	8007ae6 <_vfprintf_r+0x161e>
 800777e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007782:	9107      	str	r1, [sp, #28]
 8007784:	ea54 0105 	orrs.w	r1, r4, r5
 8007788:	930e      	str	r3, [sp, #56]	; 0x38
 800778a:	4617      	mov	r7, r2
 800778c:	f47f a892 	bne.w	80068b4 <_vfprintf_r+0x3ec>
 8007790:	f7ff ba4c 	b.w	8006c2c <_vfprintf_r+0x764>
 8007794:	3304      	adds	r3, #4
 8007796:	6814      	ldr	r4, [r2, #0]
 8007798:	930e      	str	r3, [sp, #56]	; 0x38
 800779a:	2500      	movs	r5, #0
 800779c:	f7ff b9d8 	b.w	8006b50 <_vfprintf_r+0x688>
 80077a0:	aa27      	add	r2, sp, #156	; 0x9c
 80077a2:	9908      	ldr	r1, [sp, #32]
 80077a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80077a6:	f003 fdf3 	bl	800b390 <__sprint_r>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	f47e afbc 	bne.w	8006728 <_vfprintf_r+0x260>
 80077b0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80077b2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80077b4:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80077b8:	e78a      	b.n	80076d0 <_vfprintf_r+0x1208>
 80077ba:	a825      	add	r0, sp, #148	; 0x94
 80077bc:	a922      	add	r1, sp, #136	; 0x88
 80077be:	aa21      	add	r2, sp, #132	; 0x84
 80077c0:	2303      	movs	r3, #3
 80077c2:	9004      	str	r0, [sp, #16]
 80077c4:	9202      	str	r2, [sp, #8]
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	f8cd b004 	str.w	fp, [sp, #4]
 80077cc:	9103      	str	r1, [sp, #12]
 80077ce:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80077d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80077d4:	f000 fb68 	bl	8007ea8 <_dtoa_r>
 80077d8:	465d      	mov	r5, fp
 80077da:	4606      	mov	r6, r0
 80077dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077de:	2b46      	cmp	r3, #70	; 0x46
 80077e0:	eb06 0405 	add.w	r4, r6, r5
 80077e4:	f47f aee1 	bne.w	80075aa <_vfprintf_r+0x10e2>
 80077e8:	7833      	ldrb	r3, [r6, #0]
 80077ea:	2b30      	cmp	r3, #48	; 0x30
 80077ec:	f000 8198 	beq.w	8007b20 <_vfprintf_r+0x1658>
 80077f0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80077f2:	442c      	add	r4, r5
 80077f4:	e6d9      	b.n	80075aa <_vfprintf_r+0x10e2>
 80077f6:	f1bb 0f00 	cmp.w	fp, #0
 80077fa:	bf08      	it	eq
 80077fc:	f04f 0b01 	moveq.w	fp, #1
 8007800:	e6a1      	b.n	8007546 <_vfprintf_r+0x107e>
 8007802:	9b07      	ldr	r3, [sp, #28]
 8007804:	f043 0320 	orr.w	r3, r3, #32
 8007808:	9307      	str	r3, [sp, #28]
 800780a:	f108 0801 	add.w	r8, r8, #1
 800780e:	f898 3000 	ldrb.w	r3, [r8]
 8007812:	f7fe becd 	b.w	80065b0 <_vfprintf_r+0xe8>
 8007816:	aa27      	add	r2, sp, #156	; 0x9c
 8007818:	9908      	ldr	r1, [sp, #32]
 800781a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800781c:	f003 fdb8 	bl	800b390 <__sprint_r>
 8007820:	2800      	cmp	r0, #0
 8007822:	f47e af81 	bne.w	8006728 <_vfprintf_r+0x260>
 8007826:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007828:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800782c:	f7ff bb81 	b.w	8006f32 <_vfprintf_r+0xa6a>
 8007830:	4630      	mov	r0, r6
 8007832:	f7fc fa45 	bl	8003cc0 <strlen>
 8007836:	46a3      	mov	fp, r4
 8007838:	4603      	mov	r3, r0
 800783a:	900d      	str	r0, [sp, #52]	; 0x34
 800783c:	f7ff bb01 	b.w	8006e42 <_vfprintf_r+0x97a>
 8007840:	272d      	movs	r7, #45	; 0x2d
 8007842:	9309      	str	r3, [sp, #36]	; 0x24
 8007844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007846:	9307      	str	r3, [sp, #28]
 8007848:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 800784c:	f04f 0b00 	mov.w	fp, #0
 8007850:	f7ff b855 	b.w	80068fe <_vfprintf_r+0x436>
 8007854:	aa27      	add	r2, sp, #156	; 0x9c
 8007856:	9908      	ldr	r1, [sp, #32]
 8007858:	980a      	ldr	r0, [sp, #40]	; 0x28
 800785a:	f003 fd99 	bl	800b390 <__sprint_r>
 800785e:	2800      	cmp	r0, #0
 8007860:	f47e af62 	bne.w	8006728 <_vfprintf_r+0x260>
 8007864:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007866:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007868:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 800786c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800786e:	f8c9 6000 	str.w	r6, [r9]
 8007872:	3301      	adds	r3, #1
 8007874:	440c      	add	r4, r1
 8007876:	2b07      	cmp	r3, #7
 8007878:	9429      	str	r4, [sp, #164]	; 0xa4
 800787a:	9328      	str	r3, [sp, #160]	; 0xa0
 800787c:	f8c9 1004 	str.w	r1, [r9, #4]
 8007880:	f77f a8fe 	ble.w	8006a80 <_vfprintf_r+0x5b8>
 8007884:	e41a      	b.n	80070bc <_vfprintf_r+0xbf4>
 8007886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007888:	1cd8      	adds	r0, r3, #3
 800788a:	db11      	blt.n	80078b0 <_vfprintf_r+0x13e8>
 800788c:	459b      	cmp	fp, r3
 800788e:	db0f      	blt.n	80078b0 <_vfprintf_r+0x13e8>
 8007890:	9313      	str	r3, [sp, #76]	; 0x4c
 8007892:	e6ac      	b.n	80075ee <_vfprintf_r+0x1126>
 8007894:	aa27      	add	r2, sp, #156	; 0x9c
 8007896:	9908      	ldr	r1, [sp, #32]
 8007898:	980a      	ldr	r0, [sp, #40]	; 0x28
 800789a:	f003 fd79 	bl	800b390 <__sprint_r>
 800789e:	2800      	cmp	r0, #0
 80078a0:	f47e af42 	bne.w	8006728 <_vfprintf_r+0x260>
 80078a4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80078a6:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80078aa:	e46e      	b.n	800718a <_vfprintf_r+0xcc2>
 80078ac:	4623      	mov	r3, r4
 80078ae:	e68f      	b.n	80075d0 <_vfprintf_r+0x1108>
 80078b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80078b2:	3a02      	subs	r2, #2
 80078b4:	9211      	str	r2, [sp, #68]	; 0x44
 80078b6:	3b01      	subs	r3, #1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80078be:	9321      	str	r3, [sp, #132]	; 0x84
 80078c0:	bfb8      	it	lt
 80078c2:	425b      	neglt	r3, r3
 80078c4:	f88d 208c 	strb.w	r2, [sp, #140]	; 0x8c
 80078c8:	bfb4      	ite	lt
 80078ca:	222d      	movlt	r2, #45	; 0x2d
 80078cc:	222b      	movge	r2, #43	; 0x2b
 80078ce:	2b09      	cmp	r3, #9
 80078d0:	f88d 208d 	strb.w	r2, [sp, #141]	; 0x8d
 80078d4:	f340 810b 	ble.w	8007aee <_vfprintf_r+0x1626>
 80078d8:	f10d 009b 	add.w	r0, sp, #155	; 0x9b
 80078dc:	4604      	mov	r4, r0
 80078de:	4a2c      	ldr	r2, [pc, #176]	; (8007990 <_vfprintf_r+0x14c8>)
 80078e0:	fb82 2103 	smull	r2, r1, r2, r3
 80078e4:	17da      	asrs	r2, r3, #31
 80078e6:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80078ea:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80078ee:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 80078f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078f6:	2a09      	cmp	r2, #9
 80078f8:	4613      	mov	r3, r2
 80078fa:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80078fe:	dcee      	bgt.n	80078de <_vfprintf_r+0x1416>
 8007900:	4621      	mov	r1, r4
 8007902:	3330      	adds	r3, #48	; 0x30
 8007904:	b2da      	uxtb	r2, r3
 8007906:	f801 2d01 	strb.w	r2, [r1, #-1]!
 800790a:	4288      	cmp	r0, r1
 800790c:	f240 816f 	bls.w	8007bee <_vfprintf_r+0x1726>
 8007910:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8007914:	4623      	mov	r3, r4
 8007916:	e001      	b.n	800791c <_vfprintf_r+0x1454>
 8007918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800791c:	f801 2b01 	strb.w	r2, [r1], #1
 8007920:	4298      	cmp	r0, r3
 8007922:	d1f9      	bne.n	8007918 <_vfprintf_r+0x1450>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	1b1b      	subs	r3, r3, r4
 8007928:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 800792c:	4413      	add	r3, r2
 800792e:	aa23      	add	r2, sp, #140	; 0x8c
 8007930:	1a9b      	subs	r3, r3, r2
 8007932:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007934:	9319      	str	r3, [sp, #100]	; 0x64
 8007936:	2a01      	cmp	r2, #1
 8007938:	4413      	add	r3, r2
 800793a:	930d      	str	r3, [sp, #52]	; 0x34
 800793c:	f340 80fe 	ble.w	8007b3c <_vfprintf_r+0x1674>
 8007940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007942:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007944:	4413      	add	r3, r2
 8007946:	2200      	movs	r2, #0
 8007948:	930d      	str	r3, [sp, #52]	; 0x34
 800794a:	9213      	str	r2, [sp, #76]	; 0x4c
 800794c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007950:	e65b      	b.n	800760a <_vfprintf_r+0x1142>
 8007952:	4614      	mov	r4, r2
 8007954:	3301      	adds	r3, #1
 8007956:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007958:	9328      	str	r3, [sp, #160]	; 0xa0
 800795a:	442c      	add	r4, r5
 800795c:	2b07      	cmp	r3, #7
 800795e:	9429      	str	r4, [sp, #164]	; 0xa4
 8007960:	e889 0024 	stmia.w	r9, {r2, r5}
 8007964:	f73f af76 	bgt.w	8007854 <_vfprintf_r+0x138c>
 8007968:	f109 0908 	add.w	r9, r9, #8
 800796c:	e77e      	b.n	800786c <_vfprintf_r+0x13a4>
 800796e:	aa27      	add	r2, sp, #156	; 0x9c
 8007970:	9908      	ldr	r1, [sp, #32]
 8007972:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007974:	f003 fd0c 	bl	800b390 <__sprint_r>
 8007978:	2800      	cmp	r0, #0
 800797a:	f47e aed5 	bne.w	8006728 <_vfprintf_r+0x260>
 800797e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007980:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007982:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007986:	e4d0      	b.n	800732a <_vfprintf_r+0xe62>
 8007988:	0800bde0 	.word	0x0800bde0
 800798c:	0800bdf4 	.word	0x0800bdf4
 8007990:	66666667 	.word	0x66666667
 8007994:	2d06      	cmp	r5, #6
 8007996:	462b      	mov	r3, r5
 8007998:	bf28      	it	cs
 800799a:	2306      	movcs	r3, #6
 800799c:	930d      	str	r3, [sp, #52]	; 0x34
 800799e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80079a2:	46b3      	mov	fp, r6
 80079a4:	970e      	str	r7, [sp, #56]	; 0x38
 80079a6:	9613      	str	r6, [sp, #76]	; 0x4c
 80079a8:	4637      	mov	r7, r6
 80079aa:	9309      	str	r3, [sp, #36]	; 0x24
 80079ac:	4e91      	ldr	r6, [pc, #580]	; (8007bf4 <_vfprintf_r+0x172c>)
 80079ae:	f7fe bfa5 	b.w	80068fc <_vfprintf_r+0x434>
 80079b2:	aa27      	add	r2, sp, #156	; 0x9c
 80079b4:	9908      	ldr	r1, [sp, #32]
 80079b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80079b8:	f003 fcea 	bl	800b390 <__sprint_r>
 80079bc:	2800      	cmp	r0, #0
 80079be:	f47e aeb3 	bne.w	8006728 <_vfprintf_r+0x260>
 80079c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079c6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 80079ce:	e4c4      	b.n	800735a <_vfprintf_r+0xe92>
 80079d0:	a825      	add	r0, sp, #148	; 0x94
 80079d2:	a922      	add	r1, sp, #136	; 0x88
 80079d4:	aa21      	add	r2, sp, #132	; 0x84
 80079d6:	2303      	movs	r3, #3
 80079d8:	9004      	str	r0, [sp, #16]
 80079da:	9202      	str	r2, [sp, #8]
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	f8cd b004 	str.w	fp, [sp, #4]
 80079e2:	9103      	str	r1, [sp, #12]
 80079e4:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 80079e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80079ea:	f000 fa5d 	bl	8007ea8 <_dtoa_r>
 80079ee:	465d      	mov	r5, fp
 80079f0:	4606      	mov	r6, r0
 80079f2:	eb00 040b 	add.w	r4, r0, fp
 80079f6:	e6f7      	b.n	80077e8 <_vfprintf_r+0x1320>
 80079f8:	9307      	str	r3, [sp, #28]
 80079fa:	f7ff b8c7 	b.w	8006b8c <_vfprintf_r+0x6c4>
 80079fe:	f04f 0b06 	mov.w	fp, #6
 8007a02:	e5a0      	b.n	8007546 <_vfprintf_r+0x107e>
 8007a04:	272d      	movs	r7, #45	; 0x2d
 8007a06:	f88d 707f 	strb.w	r7, [sp, #127]	; 0x7f
 8007a0a:	f7ff b9b3 	b.w	8006d74 <_vfprintf_r+0x8ac>
 8007a0e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8007a12:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8007a16:	931d      	str	r3, [sp, #116]	; 0x74
 8007a18:	232d      	movs	r3, #45	; 0x2d
 8007a1a:	911c      	str	r1, [sp, #112]	; 0x70
 8007a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a1e:	e5a0      	b.n	8007562 <_vfprintf_r+0x109a>
 8007a20:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007a22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a24:	4413      	add	r3, r2
 8007a26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a28:	930d      	str	r3, [sp, #52]	; 0x34
 8007a2a:	2a00      	cmp	r2, #0
 8007a2c:	f340 8090 	ble.w	8007b50 <_vfprintf_r+0x1688>
 8007a30:	2267      	movs	r2, #103	; 0x67
 8007a32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007a36:	9211      	str	r2, [sp, #68]	; 0x44
 8007a38:	e5e7      	b.n	800760a <_vfprintf_r+0x1142>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f340 8090 	ble.w	8007b60 <_vfprintf_r+0x1698>
 8007a40:	f1bb 0f00 	cmp.w	fp, #0
 8007a44:	d163      	bne.n	8007b0e <_vfprintf_r+0x1646>
 8007a46:	9a07      	ldr	r2, [sp, #28]
 8007a48:	07d1      	lsls	r1, r2, #31
 8007a4a:	d460      	bmi.n	8007b0e <_vfprintf_r+0x1646>
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	920d      	str	r2, [sp, #52]	; 0x34
 8007a50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007a54:	e5d9      	b.n	800760a <_vfprintf_r+0x1142>
 8007a56:	9b07      	ldr	r3, [sp, #28]
 8007a58:	07db      	lsls	r3, r3, #31
 8007a5a:	465f      	mov	r7, fp
 8007a5c:	d505      	bpl.n	8007a6a <_vfprintf_r+0x15a2>
 8007a5e:	ae44      	add	r6, sp, #272	; 0x110
 8007a60:	2330      	movs	r3, #48	; 0x30
 8007a62:	f806 3d41 	strb.w	r3, [r6, #-65]!
 8007a66:	f7fe bf3f 	b.w	80068e8 <_vfprintf_r+0x420>
 8007a6a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8007a6e:	ae34      	add	r6, sp, #208	; 0xd0
 8007a70:	f7fe bf3d 	b.w	80068ee <_vfprintf_r+0x426>
 8007a74:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007a78:	970e      	str	r7, [sp, #56]	; 0x38
 8007a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a7c:	950d      	str	r5, [sp, #52]	; 0x34
 8007a7e:	4683      	mov	fp, r0
 8007a80:	9013      	str	r0, [sp, #76]	; 0x4c
 8007a82:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8007a86:	f7fe bf39 	b.w	80068fc <_vfprintf_r+0x434>
 8007a8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a8c:	2b47      	cmp	r3, #71	; 0x47
 8007a8e:	f47f ad8b 	bne.w	80075a8 <_vfprintf_r+0x10e0>
 8007a92:	9b07      	ldr	r3, [sp, #28]
 8007a94:	07dc      	lsls	r4, r3, #31
 8007a96:	f53f aea1 	bmi.w	80077dc <_vfprintf_r+0x1314>
 8007a9a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007a9c:	2f47      	cmp	r7, #71	; 0x47
 8007a9e:	eba3 0306 	sub.w	r3, r3, r6
 8007aa2:	9312      	str	r3, [sp, #72]	; 0x48
 8007aa4:	f43f aeef 	beq.w	8007886 <_vfprintf_r+0x13be>
 8007aa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007aaa:	e704      	b.n	80078b6 <_vfprintf_r+0x13ee>
 8007aac:	aa27      	add	r2, sp, #156	; 0x9c
 8007aae:	9908      	ldr	r1, [sp, #32]
 8007ab0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007ab2:	f003 fc6d 	bl	800b390 <__sprint_r>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	f47e ae36 	bne.w	8006728 <_vfprintf_r+0x260>
 8007abc:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8007abe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8007ac0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007ac2:	f10d 09d0 	add.w	r9, sp, #208	; 0xd0
 8007ac6:	e61a      	b.n	80076fe <_vfprintf_r+0x1236>
 8007ac8:	46a0      	mov	r8, r4
 8007aca:	2500      	movs	r5, #0
 8007acc:	f7fe bd72 	b.w	80065b4 <_vfprintf_r+0xec>
 8007ad0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007ad2:	e57d      	b.n	80075d0 <_vfprintf_r+0x1108>
 8007ad4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007ad6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ad8:	4413      	add	r3, r2
 8007ada:	2267      	movs	r2, #103	; 0x67
 8007adc:	930d      	str	r3, [sp, #52]	; 0x34
 8007ade:	9211      	str	r2, [sp, #68]	; 0x44
 8007ae0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007ae4:	e591      	b.n	800760a <_vfprintf_r+0x1142>
 8007ae6:	930e      	str	r3, [sp, #56]	; 0x38
 8007ae8:	4617      	mov	r7, r2
 8007aea:	f7ff bbff 	b.w	80072ec <_vfprintf_r+0xe24>
 8007aee:	3330      	adds	r3, #48	; 0x30
 8007af0:	2230      	movs	r2, #48	; 0x30
 8007af2:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
 8007af6:	f88d 208e 	strb.w	r2, [sp, #142]	; 0x8e
 8007afa:	ab24      	add	r3, sp, #144	; 0x90
 8007afc:	e717      	b.n	800792e <_vfprintf_r+0x1466>
 8007afe:	930e      	str	r3, [sp, #56]	; 0x38
 8007b00:	e4fc      	b.n	80074fc <_vfprintf_r+0x1034>
 8007b02:	4e3d      	ldr	r6, [pc, #244]	; (8007bf8 <_vfprintf_r+0x1730>)
 8007b04:	4b3d      	ldr	r3, [pc, #244]	; (8007bfc <_vfprintf_r+0x1734>)
 8007b06:	f89d 707f 	ldrb.w	r7, [sp, #127]	; 0x7f
 8007b0a:	f7ff b935 	b.w	8006d78 <_vfprintf_r+0x8b0>
 8007b0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b10:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007b12:	189d      	adds	r5, r3, r2
 8007b14:	eb05 030b 	add.w	r3, r5, fp
 8007b18:	930d      	str	r3, [sp, #52]	; 0x34
 8007b1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007b1e:	e574      	b.n	800760a <_vfprintf_r+0x1142>
 8007b20:	2200      	movs	r2, #0
 8007b22:	2300      	movs	r3, #0
 8007b24:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8007b28:	f7fb feca 	bl	80038c0 <__aeabi_dcmpeq>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	f47f ae5f 	bne.w	80077f0 <_vfprintf_r+0x1328>
 8007b32:	f1c5 0501 	rsb	r5, r5, #1
 8007b36:	9521      	str	r5, [sp, #132]	; 0x84
 8007b38:	442c      	add	r4, r5
 8007b3a:	e536      	b.n	80075aa <_vfprintf_r+0x10e2>
 8007b3c:	9b07      	ldr	r3, [sp, #28]
 8007b3e:	f013 0301 	ands.w	r3, r3, #1
 8007b42:	f47f aefd 	bne.w	8007940 <_vfprintf_r+0x1478>
 8007b46:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007b4e:	e55c      	b.n	800760a <_vfprintf_r+0x1142>
 8007b50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b54:	f1c3 0301 	rsb	r3, r3, #1
 8007b58:	441a      	add	r2, r3
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	920d      	str	r2, [sp, #52]	; 0x34
 8007b5e:	e767      	b.n	8007a30 <_vfprintf_r+0x1568>
 8007b60:	f1bb 0f00 	cmp.w	fp, #0
 8007b64:	d102      	bne.n	8007b6c <_vfprintf_r+0x16a4>
 8007b66:	9b07      	ldr	r3, [sp, #28]
 8007b68:	07da      	lsls	r2, r3, #31
 8007b6a:	d507      	bpl.n	8007b7c <_vfprintf_r+0x16b4>
 8007b6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007b6e:	1c5d      	adds	r5, r3, #1
 8007b70:	eb05 030b 	add.w	r3, r5, fp
 8007b74:	930d      	str	r3, [sp, #52]	; 0x34
 8007b76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007b7a:	e546      	b.n	800760a <_vfprintf_r+0x1142>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	930d      	str	r3, [sp, #52]	; 0x34
 8007b80:	e543      	b.n	800760a <_vfprintf_r+0x1142>
 8007b82:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007b84:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007b88:	6805      	ldr	r5, [r0, #0]
 8007b8a:	3004      	adds	r0, #4
 8007b8c:	2d00      	cmp	r5, #0
 8007b8e:	900e      	str	r0, [sp, #56]	; 0x38
 8007b90:	46a0      	mov	r8, r4
 8007b92:	f6be ad0d 	bge.w	80065b0 <_vfprintf_r+0xe8>
 8007b96:	f04f 35ff 	mov.w	r5, #4294967295
 8007b9a:	f7fe bd09 	b.w	80065b0 <_vfprintf_r+0xe8>
 8007b9e:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007ba2:	f7ff b893 	b.w	8006ccc <_vfprintf_r+0x804>
 8007ba6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007baa:	f7ff b85d 	b.w	8006c68 <_vfprintf_r+0x7a0>
 8007bae:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007bb2:	f7fe bfbf 	b.w	8006b34 <_vfprintf_r+0x66c>
 8007bb6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007bba:	f7fe be5c 	b.w	8006876 <_vfprintf_r+0x3ae>
 8007bbe:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007bc2:	f7ff b812 	b.w	8006bea <_vfprintf_r+0x722>
 8007bc6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007bca:	f7fe bdca 	b.w	8006762 <_vfprintf_r+0x29a>
 8007bce:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007bd2:	f7ff b951 	b.w	8006e78 <_vfprintf_r+0x9b0>
 8007bd6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007bda:	f7fe be23 	b.w	8006824 <_vfprintf_r+0x35c>
 8007bde:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007be2:	f7ff b8ed 	b.w	8006dc0 <_vfprintf_r+0x8f8>
 8007be6:	f88d 107f 	strb.w	r1, [sp, #127]	; 0x7f
 8007bea:	f7ff b88c 	b.w	8006d06 <_vfprintf_r+0x83e>
 8007bee:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8007bf2:	e69c      	b.n	800792e <_vfprintf_r+0x1466>
 8007bf4:	0800bdd8 	.word	0x0800bdd8
 8007bf8:	0800bdac 	.word	0x0800bdac
 8007bfc:	0800bda8 	.word	0x0800bda8

08007c00 <__sbprintf>:
 8007c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c02:	460c      	mov	r4, r1
 8007c04:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8007c08:	8989      	ldrh	r1, [r1, #12]
 8007c0a:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8007c0c:	89e5      	ldrh	r5, [r4, #14]
 8007c0e:	9619      	str	r6, [sp, #100]	; 0x64
 8007c10:	f021 0102 	bic.w	r1, r1, #2
 8007c14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c16:	f8ad 500e 	strh.w	r5, [sp, #14]
 8007c1a:	2500      	movs	r5, #0
 8007c1c:	69e7      	ldr	r7, [r4, #28]
 8007c1e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8007c22:	9609      	str	r6, [sp, #36]	; 0x24
 8007c24:	9506      	str	r5, [sp, #24]
 8007c26:	ae1a      	add	r6, sp, #104	; 0x68
 8007c28:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8007c2c:	4669      	mov	r1, sp
 8007c2e:	9600      	str	r6, [sp, #0]
 8007c30:	9604      	str	r6, [sp, #16]
 8007c32:	9502      	str	r5, [sp, #8]
 8007c34:	9505      	str	r5, [sp, #20]
 8007c36:	9707      	str	r7, [sp, #28]
 8007c38:	4606      	mov	r6, r0
 8007c3a:	f7fe fc45 	bl	80064c8 <_vfprintf_r>
 8007c3e:	1e05      	subs	r5, r0, #0
 8007c40:	db07      	blt.n	8007c52 <__sbprintf+0x52>
 8007c42:	4630      	mov	r0, r6
 8007c44:	4669      	mov	r1, sp
 8007c46:	f001 f8e9 	bl	8008e1c <_fflush_r>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	bf18      	it	ne
 8007c4e:	f04f 35ff 	movne.w	r5, #4294967295
 8007c52:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007c56:	065b      	lsls	r3, r3, #25
 8007c58:	d503      	bpl.n	8007c62 <__sbprintf+0x62>
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c60:	81a3      	strh	r3, [r4, #12]
 8007c62:	4628      	mov	r0, r5
 8007c64:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8007c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c6a:	bf00      	nop

08007c6c <_vsprintf_r>:
 8007c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c6e:	b09b      	sub	sp, #108	; 0x6c
 8007c70:	460d      	mov	r5, r1
 8007c72:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8007c76:	f44f 7702 	mov.w	r7, #520	; 0x208
 8007c7a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8007c7e:	4669      	mov	r1, sp
 8007c80:	9500      	str	r5, [sp, #0]
 8007c82:	9504      	str	r5, [sp, #16]
 8007c84:	f8ad 700c 	strh.w	r7, [sp, #12]
 8007c88:	9402      	str	r4, [sp, #8]
 8007c8a:	9405      	str	r4, [sp, #20]
 8007c8c:	f8ad 600e 	strh.w	r6, [sp, #14]
 8007c90:	f7fd f89e 	bl	8004dd0 <_svfprintf_r>
 8007c94:	9b00      	ldr	r3, [sp, #0]
 8007c96:	2200      	movs	r2, #0
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	b01b      	add	sp, #108	; 0x6c
 8007c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c9e:	bf00      	nop

08007ca0 <vsprintf>:
 8007ca0:	b410      	push	{r4}
 8007ca2:	4c04      	ldr	r4, [pc, #16]	; (8007cb4 <vsprintf+0x14>)
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	460a      	mov	r2, r1
 8007ca8:	4601      	mov	r1, r0
 8007caa:	6820      	ldr	r0, [r4, #0]
 8007cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cb0:	f7ff bfdc 	b.w	8007c6c <_vsprintf_r>
 8007cb4:	20000468 	.word	0x20000468

08007cb8 <__swsetup_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4b30      	ldr	r3, [pc, #192]	; (8007d7c <__swsetup_r+0xc4>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	460c      	mov	r4, r1
 8007cc2:	b113      	cbz	r3, 8007cca <__swsetup_r+0x12>
 8007cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cc6:	2a00      	cmp	r2, #0
 8007cc8:	d038      	beq.n	8007d3c <__swsetup_r+0x84>
 8007cca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cce:	b293      	uxth	r3, r2
 8007cd0:	0718      	lsls	r0, r3, #28
 8007cd2:	d50c      	bpl.n	8007cee <__swsetup_r+0x36>
 8007cd4:	6920      	ldr	r0, [r4, #16]
 8007cd6:	b1a8      	cbz	r0, 8007d04 <__swsetup_r+0x4c>
 8007cd8:	f013 0201 	ands.w	r2, r3, #1
 8007cdc:	d01e      	beq.n	8007d1c <__swsetup_r+0x64>
 8007cde:	6963      	ldr	r3, [r4, #20]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	425b      	negs	r3, r3
 8007ce4:	61a3      	str	r3, [r4, #24]
 8007ce6:	60a2      	str	r2, [r4, #8]
 8007ce8:	b1f0      	cbz	r0, 8007d28 <__swsetup_r+0x70>
 8007cea:	2000      	movs	r0, #0
 8007cec:	bd38      	pop	{r3, r4, r5, pc}
 8007cee:	06d9      	lsls	r1, r3, #27
 8007cf0:	d53c      	bpl.n	8007d6c <__swsetup_r+0xb4>
 8007cf2:	0758      	lsls	r0, r3, #29
 8007cf4:	d426      	bmi.n	8007d44 <__swsetup_r+0x8c>
 8007cf6:	6920      	ldr	r0, [r4, #16]
 8007cf8:	f042 0308 	orr.w	r3, r2, #8
 8007cfc:	81a3      	strh	r3, [r4, #12]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d1e9      	bne.n	8007cd8 <__swsetup_r+0x20>
 8007d04:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8007d08:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007d0c:	d0e4      	beq.n	8007cd8 <__swsetup_r+0x20>
 8007d0e:	4628      	mov	r0, r5
 8007d10:	4621      	mov	r1, r4
 8007d12:	f002 f805 	bl	8009d20 <__smakebuf_r>
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	6920      	ldr	r0, [r4, #16]
 8007d1a:	e7dd      	b.n	8007cd8 <__swsetup_r+0x20>
 8007d1c:	0799      	lsls	r1, r3, #30
 8007d1e:	bf58      	it	pl
 8007d20:	6962      	ldrpl	r2, [r4, #20]
 8007d22:	60a2      	str	r2, [r4, #8]
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d1e0      	bne.n	8007cea <__swsetup_r+0x32>
 8007d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d2c:	061a      	lsls	r2, r3, #24
 8007d2e:	d5dd      	bpl.n	8007cec <__swsetup_r+0x34>
 8007d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d34:	81a3      	strh	r3, [r4, #12]
 8007d36:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f001 f901 	bl	8008f44 <__sinit>
 8007d42:	e7c2      	b.n	8007cca <__swsetup_r+0x12>
 8007d44:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007d46:	b151      	cbz	r1, 8007d5e <__swsetup_r+0xa6>
 8007d48:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8007d4c:	4299      	cmp	r1, r3
 8007d4e:	d004      	beq.n	8007d5a <__swsetup_r+0xa2>
 8007d50:	4628      	mov	r0, r5
 8007d52:	f001 f94f 	bl	8008ff4 <_free_r>
 8007d56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	6323      	str	r3, [r4, #48]	; 0x30
 8007d5e:	2300      	movs	r3, #0
 8007d60:	6920      	ldr	r0, [r4, #16]
 8007d62:	6063      	str	r3, [r4, #4]
 8007d64:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8007d68:	6020      	str	r0, [r4, #0]
 8007d6a:	e7c5      	b.n	8007cf8 <__swsetup_r+0x40>
 8007d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d70:	2309      	movs	r3, #9
 8007d72:	602b      	str	r3, [r5, #0]
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295
 8007d78:	81a2      	strh	r2, [r4, #12]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	20000468 	.word	0x20000468

08007d80 <quorem>:
 8007d80:	6902      	ldr	r2, [r0, #16]
 8007d82:	690b      	ldr	r3, [r1, #16]
 8007d84:	4293      	cmp	r3, r2
 8007d86:	f300 808d 	bgt.w	8007ea4 <quorem+0x124>
 8007d8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8e:	f103 38ff 	add.w	r8, r3, #4294967295
 8007d92:	f101 0714 	add.w	r7, r1, #20
 8007d96:	f100 0b14 	add.w	fp, r0, #20
 8007d9a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8007d9e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8007da2:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8007da6:	b083      	sub	sp, #12
 8007da8:	3201      	adds	r2, #1
 8007daa:	fbb3 f9f2 	udiv	r9, r3, r2
 8007dae:	eb0b 0304 	add.w	r3, fp, r4
 8007db2:	9400      	str	r4, [sp, #0]
 8007db4:	eb07 0a04 	add.w	sl, r7, r4
 8007db8:	9301      	str	r3, [sp, #4]
 8007dba:	f1b9 0f00 	cmp.w	r9, #0
 8007dbe:	d039      	beq.n	8007e34 <quorem+0xb4>
 8007dc0:	2500      	movs	r5, #0
 8007dc2:	46bc      	mov	ip, r7
 8007dc4:	46de      	mov	lr, fp
 8007dc6:	462b      	mov	r3, r5
 8007dc8:	f85c 6b04 	ldr.w	r6, [ip], #4
 8007dcc:	f8de 2000 	ldr.w	r2, [lr]
 8007dd0:	b2b4      	uxth	r4, r6
 8007dd2:	fb09 5504 	mla	r5, r9, r4, r5
 8007dd6:	0c36      	lsrs	r6, r6, #16
 8007dd8:	0c2c      	lsrs	r4, r5, #16
 8007dda:	fb09 4406 	mla	r4, r9, r6, r4
 8007dde:	b2ad      	uxth	r5, r5
 8007de0:	1b5b      	subs	r3, r3, r5
 8007de2:	b2a6      	uxth	r6, r4
 8007de4:	fa13 f382 	uxtah	r3, r3, r2
 8007de8:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
 8007dec:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8007df6:	45e2      	cmp	sl, ip
 8007df8:	f84e 3b04 	str.w	r3, [lr], #4
 8007dfc:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8007e00:	ea4f 4326 	mov.w	r3, r6, asr #16
 8007e04:	d2e0      	bcs.n	8007dc8 <quorem+0x48>
 8007e06:	9b00      	ldr	r3, [sp, #0]
 8007e08:	f85b 3003 	ldr.w	r3, [fp, r3]
 8007e0c:	b993      	cbnz	r3, 8007e34 <quorem+0xb4>
 8007e0e:	9c01      	ldr	r4, [sp, #4]
 8007e10:	1f23      	subs	r3, r4, #4
 8007e12:	459b      	cmp	fp, r3
 8007e14:	d20c      	bcs.n	8007e30 <quorem+0xb0>
 8007e16:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007e1a:	b94b      	cbnz	r3, 8007e30 <quorem+0xb0>
 8007e1c:	f1a4 0308 	sub.w	r3, r4, #8
 8007e20:	e002      	b.n	8007e28 <quorem+0xa8>
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	3b04      	subs	r3, #4
 8007e26:	b91a      	cbnz	r2, 8007e30 <quorem+0xb0>
 8007e28:	459b      	cmp	fp, r3
 8007e2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e2e:	d3f8      	bcc.n	8007e22 <quorem+0xa2>
 8007e30:	f8c0 8010 	str.w	r8, [r0, #16]
 8007e34:	4604      	mov	r4, r0
 8007e36:	f002 fd97 	bl	800a968 <__mcmp>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	db2e      	blt.n	8007e9c <quorem+0x11c>
 8007e3e:	f109 0901 	add.w	r9, r9, #1
 8007e42:	465d      	mov	r5, fp
 8007e44:	2300      	movs	r3, #0
 8007e46:	f857 1b04 	ldr.w	r1, [r7], #4
 8007e4a:	6828      	ldr	r0, [r5, #0]
 8007e4c:	b28a      	uxth	r2, r1
 8007e4e:	1a9a      	subs	r2, r3, r2
 8007e50:	0c09      	lsrs	r1, r1, #16
 8007e52:	fa12 f280 	uxtah	r2, r2, r0
 8007e56:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8007e5a:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8007e5e:	b291      	uxth	r1, r2
 8007e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007e64:	45ba      	cmp	sl, r7
 8007e66:	f845 1b04 	str.w	r1, [r5], #4
 8007e6a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8007e6e:	d2ea      	bcs.n	8007e46 <quorem+0xc6>
 8007e70:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8007e74:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8007e78:	b982      	cbnz	r2, 8007e9c <quorem+0x11c>
 8007e7a:	1f1a      	subs	r2, r3, #4
 8007e7c:	4593      	cmp	fp, r2
 8007e7e:	d20b      	bcs.n	8007e98 <quorem+0x118>
 8007e80:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8007e84:	b942      	cbnz	r2, 8007e98 <quorem+0x118>
 8007e86:	3b08      	subs	r3, #8
 8007e88:	e002      	b.n	8007e90 <quorem+0x110>
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	3b04      	subs	r3, #4
 8007e8e:	b91a      	cbnz	r2, 8007e98 <quorem+0x118>
 8007e90:	459b      	cmp	fp, r3
 8007e92:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e96:	d3f8      	bcc.n	8007e8a <quorem+0x10a>
 8007e98:	f8c4 8010 	str.w	r8, [r4, #16]
 8007e9c:	4648      	mov	r0, r9
 8007e9e:	b003      	add	sp, #12
 8007ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	4770      	bx	lr

08007ea8 <_dtoa_r>:
 8007ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eac:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007eae:	b099      	sub	sp, #100	; 0x64
 8007eb0:	4681      	mov	r9, r0
 8007eb2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8007eb4:	4692      	mov	sl, r2
 8007eb6:	469b      	mov	fp, r3
 8007eb8:	b149      	cbz	r1, 8007ece <_dtoa_r+0x26>
 8007eba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ebc:	604a      	str	r2, [r1, #4]
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	4093      	lsls	r3, r2
 8007ec2:	608b      	str	r3, [r1, #8]
 8007ec4:	f002 fb22 	bl	800a50c <_Bfree>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8007ece:	f1bb 0f00 	cmp.w	fp, #0
 8007ed2:	46d8      	mov	r8, fp
 8007ed4:	db33      	blt.n	8007f3e <_dtoa_r+0x96>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	6023      	str	r3, [r4, #0]
 8007eda:	4ba3      	ldr	r3, [pc, #652]	; (8008168 <_dtoa_r+0x2c0>)
 8007edc:	461a      	mov	r2, r3
 8007ede:	ea08 0303 	and.w	r3, r8, r3
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d014      	beq.n	8007f10 <_dtoa_r+0x68>
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2300      	movs	r3, #0
 8007eea:	4650      	mov	r0, sl
 8007eec:	4659      	mov	r1, fp
 8007eee:	f7fb fce7 	bl	80038c0 <__aeabi_dcmpeq>
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	b348      	cbz	r0, 8007f4a <_dtoa_r+0xa2>
 8007ef6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ef8:	2301      	movs	r3, #1
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 80c2 	beq.w	8008088 <_dtoa_r+0x1e0>
 8007f04:	4899      	ldr	r0, [pc, #612]	; (800816c <_dtoa_r+0x2c4>)
 8007f06:	6018      	str	r0, [r3, #0]
 8007f08:	3801      	subs	r0, #1
 8007f0a:	b019      	add	sp, #100	; 0x64
 8007f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f10:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f12:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	f1ba 0f00 	cmp.w	sl, #0
 8007f1c:	f000 809f 	beq.w	800805e <_dtoa_r+0x1b6>
 8007f20:	4893      	ldr	r0, [pc, #588]	; (8008170 <_dtoa_r+0x2c8>)
 8007f22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0f0      	beq.n	8007f0a <_dtoa_r+0x62>
 8007f28:	78c3      	ldrb	r3, [r0, #3]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 80ae 	beq.w	800808c <_dtoa_r+0x1e4>
 8007f30:	f100 0308 	add.w	r3, r0, #8
 8007f34:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	b019      	add	sp, #100	; 0x64
 8007f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3e:	2301      	movs	r3, #1
 8007f40:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	46c3      	mov	fp, r8
 8007f48:	e7c7      	b.n	8007eda <_dtoa_r+0x32>
 8007f4a:	aa16      	add	r2, sp, #88	; 0x58
 8007f4c:	ab17      	add	r3, sp, #92	; 0x5c
 8007f4e:	9201      	str	r2, [sp, #4]
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	4652      	mov	r2, sl
 8007f54:	465b      	mov	r3, fp
 8007f56:	4648      	mov	r0, r9
 8007f58:	f002 fe3e 	bl	800abd8 <__d2b>
 8007f5c:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8007f60:	9008      	str	r0, [sp, #32]
 8007f62:	f040 8085 	bne.w	8008070 <_dtoa_r+0x1c8>
 8007f66:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8007f68:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8007f6a:	442c      	add	r4, r5
 8007f6c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007f70:	2b20      	cmp	r3, #32
 8007f72:	f340 8289 	ble.w	8008488 <_dtoa_r+0x5e0>
 8007f76:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8007f7a:	f204 4012 	addw	r0, r4, #1042	; 0x412
 8007f7e:	fa08 f803 	lsl.w	r8, r8, r3
 8007f82:	fa2a f000 	lsr.w	r0, sl, r0
 8007f86:	ea40 0008 	orr.w	r0, r0, r8
 8007f8a:	f7fb f9bb 	bl	8003304 <__aeabi_ui2d>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	3c01      	subs	r4, #1
 8007f92:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007f96:	930d      	str	r3, [sp, #52]	; 0x34
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4b76      	ldr	r3, [pc, #472]	; (8008174 <_dtoa_r+0x2cc>)
 8007f9c:	f7fb f874 	bl	8003088 <__aeabi_dsub>
 8007fa0:	a36b      	add	r3, pc, #428	; (adr r3, 8008150 <_dtoa_r+0x2a8>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f7fb fa23 	bl	80033f0 <__aeabi_dmul>
 8007faa:	a36b      	add	r3, pc, #428	; (adr r3, 8008158 <_dtoa_r+0x2b0>)
 8007fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb0:	f7fb f86c 	bl	800308c <__adddf3>
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	460f      	mov	r7, r1
 8007fba:	f7fb f9b3 	bl	8003324 <__aeabi_i2d>
 8007fbe:	a368      	add	r3, pc, #416	; (adr r3, 8008160 <_dtoa_r+0x2b8>)
 8007fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc4:	f7fb fa14 	bl	80033f0 <__aeabi_dmul>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4630      	mov	r0, r6
 8007fce:	4639      	mov	r1, r7
 8007fd0:	f7fb f85c 	bl	800308c <__adddf3>
 8007fd4:	4606      	mov	r6, r0
 8007fd6:	460f      	mov	r7, r1
 8007fd8:	f003 fbbe 	bl	800b758 <__aeabi_d2iz>
 8007fdc:	2200      	movs	r2, #0
 8007fde:	9004      	str	r0, [sp, #16]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	4639      	mov	r1, r7
 8007fe6:	f7fb fc75 	bl	80038d4 <__aeabi_dcmplt>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	f040 8227 	bne.w	800843e <_dtoa_r+0x596>
 8007ff0:	9e04      	ldr	r6, [sp, #16]
 8007ff2:	2e16      	cmp	r6, #22
 8007ff4:	f200 8220 	bhi.w	8008438 <_dtoa_r+0x590>
 8007ff8:	4b5f      	ldr	r3, [pc, #380]	; (8008178 <_dtoa_r+0x2d0>)
 8007ffa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007ffe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008002:	4652      	mov	r2, sl
 8008004:	465b      	mov	r3, fp
 8008006:	f7fb fc83 	bl	8003910 <__aeabi_dcmpgt>
 800800a:	2800      	cmp	r0, #0
 800800c:	f000 8241 	beq.w	8008492 <_dtoa_r+0x5ea>
 8008010:	1e73      	subs	r3, r6, #1
 8008012:	9304      	str	r3, [sp, #16]
 8008014:	2300      	movs	r3, #0
 8008016:	930b      	str	r3, [sp, #44]	; 0x2c
 8008018:	1b2c      	subs	r4, r5, r4
 800801a:	f1b4 0801 	subs.w	r8, r4, #1
 800801e:	f100 8229 	bmi.w	8008474 <_dtoa_r+0x5cc>
 8008022:	2300      	movs	r3, #0
 8008024:	9305      	str	r3, [sp, #20]
 8008026:	9b04      	ldr	r3, [sp, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	f2c0 821a 	blt.w	8008462 <_dtoa_r+0x5ba>
 800802e:	4498      	add	r8, r3
 8008030:	930a      	str	r3, [sp, #40]	; 0x28
 8008032:	2300      	movs	r3, #0
 8008034:	9302      	str	r3, [sp, #8]
 8008036:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008038:	2b09      	cmp	r3, #9
 800803a:	d829      	bhi.n	8008090 <_dtoa_r+0x1e8>
 800803c:	2b05      	cmp	r3, #5
 800803e:	f340 8643 	ble.w	8008cc8 <_dtoa_r+0xe20>
 8008042:	3b04      	subs	r3, #4
 8008044:	9322      	str	r3, [sp, #136]	; 0x88
 8008046:	2500      	movs	r5, #0
 8008048:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800804a:	3b02      	subs	r3, #2
 800804c:	2b03      	cmp	r3, #3
 800804e:	f200 8622 	bhi.w	8008c96 <_dtoa_r+0xdee>
 8008052:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008056:	032a      	.short	0x032a
 8008058:	03350223 	.word	0x03350223
 800805c:	044f      	.short	0x044f
 800805e:	4b44      	ldr	r3, [pc, #272]	; (8008170 <_dtoa_r+0x2c8>)
 8008060:	4a46      	ldr	r2, [pc, #280]	; (800817c <_dtoa_r+0x2d4>)
 8008062:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008066:	2800      	cmp	r0, #0
 8008068:	bf14      	ite	ne
 800806a:	4618      	movne	r0, r3
 800806c:	4610      	moveq	r0, r2
 800806e:	e758      	b.n	8007f22 <_dtoa_r+0x7a>
 8008070:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008074:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008078:	950d      	str	r5, [sp, #52]	; 0x34
 800807a:	4650      	mov	r0, sl
 800807c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008080:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008084:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8008086:	e787      	b.n	8007f98 <_dtoa_r+0xf0>
 8008088:	483d      	ldr	r0, [pc, #244]	; (8008180 <_dtoa_r+0x2d8>)
 800808a:	e73e      	b.n	8007f0a <_dtoa_r+0x62>
 800808c:	1cc3      	adds	r3, r0, #3
 800808e:	e751      	b.n	8007f34 <_dtoa_r+0x8c>
 8008090:	2100      	movs	r1, #0
 8008092:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8008096:	4648      	mov	r0, r9
 8008098:	9122      	str	r1, [sp, #136]	; 0x88
 800809a:	f002 fa11 	bl	800a4c0 <_Balloc>
 800809e:	f04f 33ff 	mov.w	r3, #4294967295
 80080a2:	9306      	str	r3, [sp, #24]
 80080a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80080a6:	930c      	str	r3, [sp, #48]	; 0x30
 80080a8:	2301      	movs	r3, #1
 80080aa:	9007      	str	r0, [sp, #28]
 80080ac:	9223      	str	r2, [sp, #140]	; 0x8c
 80080ae:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 80080b2:	9309      	str	r3, [sp, #36]	; 0x24
 80080b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f2c0 80d0 	blt.w	800825c <_dtoa_r+0x3b4>
 80080bc:	9a04      	ldr	r2, [sp, #16]
 80080be:	2a0e      	cmp	r2, #14
 80080c0:	f300 80cc 	bgt.w	800825c <_dtoa_r+0x3b4>
 80080c4:	4b2c      	ldr	r3, [pc, #176]	; (8008178 <_dtoa_r+0x2d0>)
 80080c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080ca:	ed93 7b00 	vldr	d7, [r3]
 80080ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080d6:	f2c0 82fe 	blt.w	80086d6 <_dtoa_r+0x82e>
 80080da:	4656      	mov	r6, sl
 80080dc:	465f      	mov	r7, fp
 80080de:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80080e2:	4630      	mov	r0, r6
 80080e4:	4652      	mov	r2, sl
 80080e6:	465b      	mov	r3, fp
 80080e8:	4639      	mov	r1, r7
 80080ea:	f7fb faab 	bl	8003644 <__aeabi_ddiv>
 80080ee:	f003 fb33 	bl	800b758 <__aeabi_d2iz>
 80080f2:	4604      	mov	r4, r0
 80080f4:	f7fb f916 	bl	8003324 <__aeabi_i2d>
 80080f8:	4652      	mov	r2, sl
 80080fa:	465b      	mov	r3, fp
 80080fc:	f7fb f978 	bl	80033f0 <__aeabi_dmul>
 8008100:	460b      	mov	r3, r1
 8008102:	4602      	mov	r2, r0
 8008104:	4639      	mov	r1, r7
 8008106:	4630      	mov	r0, r6
 8008108:	f7fa ffbe 	bl	8003088 <__aeabi_dsub>
 800810c:	9d07      	ldr	r5, [sp, #28]
 800810e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8008112:	702b      	strb	r3, [r5, #0]
 8008114:	9b06      	ldr	r3, [sp, #24]
 8008116:	2b01      	cmp	r3, #1
 8008118:	4606      	mov	r6, r0
 800811a:	460f      	mov	r7, r1
 800811c:	f105 0501 	add.w	r5, r5, #1
 8008120:	d061      	beq.n	80081e6 <_dtoa_r+0x33e>
 8008122:	2200      	movs	r2, #0
 8008124:	4b17      	ldr	r3, [pc, #92]	; (8008184 <_dtoa_r+0x2dc>)
 8008126:	f7fb f963 	bl	80033f0 <__aeabi_dmul>
 800812a:	2200      	movs	r2, #0
 800812c:	2300      	movs	r3, #0
 800812e:	4606      	mov	r6, r0
 8008130:	460f      	mov	r7, r1
 8008132:	f7fb fbc5 	bl	80038c0 <__aeabi_dcmpeq>
 8008136:	2800      	cmp	r0, #0
 8008138:	d17d      	bne.n	8008236 <_dtoa_r+0x38e>
 800813a:	f8cd 9014 	str.w	r9, [sp, #20]
 800813e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8008142:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008146:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800814a:	e028      	b.n	800819e <_dtoa_r+0x2f6>
 800814c:	f3af 8000 	nop.w
 8008150:	636f4361 	.word	0x636f4361
 8008154:	3fd287a7 	.word	0x3fd287a7
 8008158:	8b60c8b3 	.word	0x8b60c8b3
 800815c:	3fc68a28 	.word	0x3fc68a28
 8008160:	509f79fb 	.word	0x509f79fb
 8008164:	3fd34413 	.word	0x3fd34413
 8008168:	7ff00000 	.word	0x7ff00000
 800816c:	0800bde1 	.word	0x0800bde1
 8008170:	0800be20 	.word	0x0800be20
 8008174:	3ff80000 	.word	0x3ff80000
 8008178:	0800bf38 	.word	0x0800bf38
 800817c:	0800be14 	.word	0x0800be14
 8008180:	0800bde0 	.word	0x0800bde0
 8008184:	40240000 	.word	0x40240000
 8008188:	f7fb f932 	bl	80033f0 <__aeabi_dmul>
 800818c:	2200      	movs	r2, #0
 800818e:	2300      	movs	r3, #0
 8008190:	4606      	mov	r6, r0
 8008192:	460f      	mov	r7, r1
 8008194:	f7fb fb94 	bl	80038c0 <__aeabi_dcmpeq>
 8008198:	2800      	cmp	r0, #0
 800819a:	f040 83ae 	bne.w	80088fa <_dtoa_r+0xa52>
 800819e:	4642      	mov	r2, r8
 80081a0:	464b      	mov	r3, r9
 80081a2:	4630      	mov	r0, r6
 80081a4:	4639      	mov	r1, r7
 80081a6:	f7fb fa4d 	bl	8003644 <__aeabi_ddiv>
 80081aa:	f003 fad5 	bl	800b758 <__aeabi_d2iz>
 80081ae:	4604      	mov	r4, r0
 80081b0:	f7fb f8b8 	bl	8003324 <__aeabi_i2d>
 80081b4:	4642      	mov	r2, r8
 80081b6:	464b      	mov	r3, r9
 80081b8:	f7fb f91a 	bl	80033f0 <__aeabi_dmul>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4630      	mov	r0, r6
 80081c2:	4639      	mov	r1, r7
 80081c4:	f7fa ff60 	bl	8003088 <__aeabi_dsub>
 80081c8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80081cc:	f805 eb01 	strb.w	lr, [r5], #1
 80081d0:	ebcb 0e05 	rsb	lr, fp, r5
 80081d4:	45d6      	cmp	lr, sl
 80081d6:	4606      	mov	r6, r0
 80081d8:	460f      	mov	r7, r1
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	4bae      	ldr	r3, [pc, #696]	; (8008498 <_dtoa_r+0x5f0>)
 80081e0:	d1d2      	bne.n	8008188 <_dtoa_r+0x2e0>
 80081e2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80081e6:	4632      	mov	r2, r6
 80081e8:	463b      	mov	r3, r7
 80081ea:	4630      	mov	r0, r6
 80081ec:	4639      	mov	r1, r7
 80081ee:	f7fa ff4d 	bl	800308c <__adddf3>
 80081f2:	4606      	mov	r6, r0
 80081f4:	460f      	mov	r7, r1
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081fe:	f7fb fb69 	bl	80038d4 <__aeabi_dcmplt>
 8008202:	b940      	cbnz	r0, 8008216 <_dtoa_r+0x36e>
 8008204:	4632      	mov	r2, r6
 8008206:	463b      	mov	r3, r7
 8008208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800820c:	f7fb fb58 	bl	80038c0 <__aeabi_dcmpeq>
 8008210:	b188      	cbz	r0, 8008236 <_dtoa_r+0x38e>
 8008212:	07e3      	lsls	r3, r4, #31
 8008214:	d50f      	bpl.n	8008236 <_dtoa_r+0x38e>
 8008216:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 800821a:	9a07      	ldr	r2, [sp, #28]
 800821c:	1e6b      	subs	r3, r5, #1
 800821e:	e004      	b.n	800822a <_dtoa_r+0x382>
 8008220:	429a      	cmp	r2, r3
 8008222:	f000 83fc 	beq.w	8008a1e <_dtoa_r+0xb76>
 8008226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800822a:	2c39      	cmp	r4, #57	; 0x39
 800822c:	f103 0501 	add.w	r5, r3, #1
 8008230:	d0f6      	beq.n	8008220 <_dtoa_r+0x378>
 8008232:	3401      	adds	r4, #1
 8008234:	701c      	strb	r4, [r3, #0]
 8008236:	9908      	ldr	r1, [sp, #32]
 8008238:	4648      	mov	r0, r9
 800823a:	f002 f967 	bl	800a50c <_Bfree>
 800823e:	2200      	movs	r2, #0
 8008240:	9b04      	ldr	r3, [sp, #16]
 8008242:	702a      	strb	r2, [r5, #0]
 8008244:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008246:	3301      	adds	r3, #1
 8008248:	6013      	str	r3, [r2, #0]
 800824a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 839b 	beq.w	8008988 <_dtoa_r+0xae0>
 8008252:	9807      	ldr	r0, [sp, #28]
 8008254:	601d      	str	r5, [r3, #0]
 8008256:	b019      	add	sp, #100	; 0x64
 8008258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800825e:	2a00      	cmp	r2, #0
 8008260:	f000 810e 	beq.w	8008480 <_dtoa_r+0x5d8>
 8008264:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008266:	2a01      	cmp	r2, #1
 8008268:	f340 8257 	ble.w	800871a <_dtoa_r+0x872>
 800826c:	9b06      	ldr	r3, [sp, #24]
 800826e:	9a02      	ldr	r2, [sp, #8]
 8008270:	1e5f      	subs	r7, r3, #1
 8008272:	42ba      	cmp	r2, r7
 8008274:	f2c0 838b 	blt.w	800898e <_dtoa_r+0xae6>
 8008278:	1bd7      	subs	r7, r2, r7
 800827a:	9b06      	ldr	r3, [sp, #24]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f2c0 8480 	blt.w	8008b82 <_dtoa_r+0xcda>
 8008282:	9d05      	ldr	r5, [sp, #20]
 8008284:	9b06      	ldr	r3, [sp, #24]
 8008286:	9a05      	ldr	r2, [sp, #20]
 8008288:	2101      	movs	r1, #1
 800828a:	441a      	add	r2, r3
 800828c:	4648      	mov	r0, r9
 800828e:	9205      	str	r2, [sp, #20]
 8008290:	4498      	add	r8, r3
 8008292:	f002 fa1f 	bl	800a6d4 <__i2b>
 8008296:	4606      	mov	r6, r0
 8008298:	b165      	cbz	r5, 80082b4 <_dtoa_r+0x40c>
 800829a:	f1b8 0f00 	cmp.w	r8, #0
 800829e:	dd09      	ble.n	80082b4 <_dtoa_r+0x40c>
 80082a0:	4545      	cmp	r5, r8
 80082a2:	9a05      	ldr	r2, [sp, #20]
 80082a4:	462b      	mov	r3, r5
 80082a6:	bfa8      	it	ge
 80082a8:	4643      	movge	r3, r8
 80082aa:	1ad2      	subs	r2, r2, r3
 80082ac:	9205      	str	r2, [sp, #20]
 80082ae:	1aed      	subs	r5, r5, r3
 80082b0:	ebc3 0808 	rsb	r8, r3, r8
 80082b4:	9b02      	ldr	r3, [sp, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f340 82f5 	ble.w	80088a6 <_dtoa_r+0x9fe>
 80082bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082be:	2a00      	cmp	r2, #0
 80082c0:	f000 8202 	beq.w	80086c8 <_dtoa_r+0x820>
 80082c4:	2f00      	cmp	r7, #0
 80082c6:	f000 81ff 	beq.w	80086c8 <_dtoa_r+0x820>
 80082ca:	4631      	mov	r1, r6
 80082cc:	463a      	mov	r2, r7
 80082ce:	4648      	mov	r0, r9
 80082d0:	f002 faa2 	bl	800a818 <__pow5mult>
 80082d4:	9a08      	ldr	r2, [sp, #32]
 80082d6:	4601      	mov	r1, r0
 80082d8:	4606      	mov	r6, r0
 80082da:	4648      	mov	r0, r9
 80082dc:	f002 fa04 	bl	800a6e8 <__multiply>
 80082e0:	9908      	ldr	r1, [sp, #32]
 80082e2:	4604      	mov	r4, r0
 80082e4:	4648      	mov	r0, r9
 80082e6:	f002 f911 	bl	800a50c <_Bfree>
 80082ea:	9b02      	ldr	r3, [sp, #8]
 80082ec:	1bdb      	subs	r3, r3, r7
 80082ee:	9302      	str	r3, [sp, #8]
 80082f0:	f040 81e9 	bne.w	80086c6 <_dtoa_r+0x81e>
 80082f4:	2101      	movs	r1, #1
 80082f6:	4648      	mov	r0, r9
 80082f8:	f002 f9ec 	bl	800a6d4 <__i2b>
 80082fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082fe:	9002      	str	r0, [sp, #8]
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 8215 	beq.w	8008730 <_dtoa_r+0x888>
 8008306:	4601      	mov	r1, r0
 8008308:	461a      	mov	r2, r3
 800830a:	4648      	mov	r0, r9
 800830c:	f002 fa84 	bl	800a818 <__pow5mult>
 8008310:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008312:	9002      	str	r0, [sp, #8]
 8008314:	2b01      	cmp	r3, #1
 8008316:	f340 82f3 	ble.w	8008900 <_dtoa_r+0xa58>
 800831a:	2700      	movs	r7, #0
 800831c:	9a02      	ldr	r2, [sp, #8]
 800831e:	6913      	ldr	r3, [r2, #16]
 8008320:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008324:	6918      	ldr	r0, [r3, #16]
 8008326:	f002 f987 	bl	800a638 <__hi0bits>
 800832a:	f1c0 0020 	rsb	r0, r0, #32
 800832e:	4440      	add	r0, r8
 8008330:	f010 001f 	ands.w	r0, r0, #31
 8008334:	f000 81fa 	beq.w	800872c <_dtoa_r+0x884>
 8008338:	f1c0 0320 	rsb	r3, r0, #32
 800833c:	2b04      	cmp	r3, #4
 800833e:	f340 84bd 	ble.w	8008cbc <_dtoa_r+0xe14>
 8008342:	f1c0 001c 	rsb	r0, r0, #28
 8008346:	9b05      	ldr	r3, [sp, #20]
 8008348:	4403      	add	r3, r0
 800834a:	9305      	str	r3, [sp, #20]
 800834c:	4405      	add	r5, r0
 800834e:	4480      	add	r8, r0
 8008350:	9b05      	ldr	r3, [sp, #20]
 8008352:	2b00      	cmp	r3, #0
 8008354:	dd05      	ble.n	8008362 <_dtoa_r+0x4ba>
 8008356:	4621      	mov	r1, r4
 8008358:	461a      	mov	r2, r3
 800835a:	4648      	mov	r0, r9
 800835c:	f002 faac 	bl	800a8b8 <__lshift>
 8008360:	4604      	mov	r4, r0
 8008362:	f1b8 0f00 	cmp.w	r8, #0
 8008366:	dd05      	ble.n	8008374 <_dtoa_r+0x4cc>
 8008368:	4642      	mov	r2, r8
 800836a:	9902      	ldr	r1, [sp, #8]
 800836c:	4648      	mov	r0, r9
 800836e:	f002 faa3 	bl	800a8b8 <__lshift>
 8008372:	9002      	str	r0, [sp, #8]
 8008374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008376:	2b00      	cmp	r3, #0
 8008378:	f040 827a 	bne.w	8008870 <_dtoa_r+0x9c8>
 800837c:	9b06      	ldr	r3, [sp, #24]
 800837e:	2b00      	cmp	r3, #0
 8008380:	f340 8293 	ble.w	80088aa <_dtoa_r+0xa02>
 8008384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008386:	2b00      	cmp	r3, #0
 8008388:	f040 81f4 	bne.w	8008774 <_dtoa_r+0x8cc>
 800838c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8008390:	9f06      	ldr	r7, [sp, #24]
 8008392:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008396:	465d      	mov	r5, fp
 8008398:	e002      	b.n	80083a0 <_dtoa_r+0x4f8>
 800839a:	f002 f8c1 	bl	800a520 <__multadd>
 800839e:	4604      	mov	r4, r0
 80083a0:	4641      	mov	r1, r8
 80083a2:	4620      	mov	r0, r4
 80083a4:	f7ff fcec 	bl	8007d80 <quorem>
 80083a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80083ac:	f805 ab01 	strb.w	sl, [r5], #1
 80083b0:	ebcb 0305 	rsb	r3, fp, r5
 80083b4:	42bb      	cmp	r3, r7
 80083b6:	f04f 020a 	mov.w	r2, #10
 80083ba:	f04f 0300 	mov.w	r3, #0
 80083be:	4621      	mov	r1, r4
 80083c0:	4648      	mov	r0, r9
 80083c2:	dbea      	blt.n	800839a <_dtoa_r+0x4f2>
 80083c4:	9b07      	ldr	r3, [sp, #28]
 80083c6:	9a06      	ldr	r2, [sp, #24]
 80083c8:	2a01      	cmp	r2, #1
 80083ca:	bfac      	ite	ge
 80083cc:	189b      	addge	r3, r3, r2
 80083ce:	3301      	addlt	r3, #1
 80083d0:	461d      	mov	r5, r3
 80083d2:	f04f 0b00 	mov.w	fp, #0
 80083d6:	4621      	mov	r1, r4
 80083d8:	2201      	movs	r2, #1
 80083da:	4648      	mov	r0, r9
 80083dc:	f002 fa6c 	bl	800a8b8 <__lshift>
 80083e0:	9902      	ldr	r1, [sp, #8]
 80083e2:	9008      	str	r0, [sp, #32]
 80083e4:	f002 fac0 	bl	800a968 <__mcmp>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	f340 8305 	ble.w	80089f8 <_dtoa_r+0xb50>
 80083ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80083f2:	9907      	ldr	r1, [sp, #28]
 80083f4:	1e6b      	subs	r3, r5, #1
 80083f6:	e004      	b.n	8008402 <_dtoa_r+0x55a>
 80083f8:	428b      	cmp	r3, r1
 80083fa:	f000 8274 	beq.w	80088e6 <_dtoa_r+0xa3e>
 80083fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008402:	2a39      	cmp	r2, #57	; 0x39
 8008404:	f103 0501 	add.w	r5, r3, #1
 8008408:	d0f6      	beq.n	80083f8 <_dtoa_r+0x550>
 800840a:	3201      	adds	r2, #1
 800840c:	701a      	strb	r2, [r3, #0]
 800840e:	9902      	ldr	r1, [sp, #8]
 8008410:	4648      	mov	r0, r9
 8008412:	f002 f87b 	bl	800a50c <_Bfree>
 8008416:	2e00      	cmp	r6, #0
 8008418:	f43f af0d 	beq.w	8008236 <_dtoa_r+0x38e>
 800841c:	f1bb 0f00 	cmp.w	fp, #0
 8008420:	d005      	beq.n	800842e <_dtoa_r+0x586>
 8008422:	45b3      	cmp	fp, r6
 8008424:	d003      	beq.n	800842e <_dtoa_r+0x586>
 8008426:	4659      	mov	r1, fp
 8008428:	4648      	mov	r0, r9
 800842a:	f002 f86f 	bl	800a50c <_Bfree>
 800842e:	4631      	mov	r1, r6
 8008430:	4648      	mov	r0, r9
 8008432:	f002 f86b 	bl	800a50c <_Bfree>
 8008436:	e6fe      	b.n	8008236 <_dtoa_r+0x38e>
 8008438:	2301      	movs	r3, #1
 800843a:	930b      	str	r3, [sp, #44]	; 0x2c
 800843c:	e5ec      	b.n	8008018 <_dtoa_r+0x170>
 800843e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008442:	4640      	mov	r0, r8
 8008444:	f7fa ff6e 	bl	8003324 <__aeabi_i2d>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	4630      	mov	r0, r6
 800844e:	4639      	mov	r1, r7
 8008450:	f7fb fa36 	bl	80038c0 <__aeabi_dcmpeq>
 8008454:	2800      	cmp	r0, #0
 8008456:	f47f adcb 	bne.w	8007ff0 <_dtoa_r+0x148>
 800845a:	f108 33ff 	add.w	r3, r8, #4294967295
 800845e:	9304      	str	r3, [sp, #16]
 8008460:	e5c6      	b.n	8007ff0 <_dtoa_r+0x148>
 8008462:	9a05      	ldr	r2, [sp, #20]
 8008464:	9b04      	ldr	r3, [sp, #16]
 8008466:	1ad2      	subs	r2, r2, r3
 8008468:	425b      	negs	r3, r3
 800846a:	9302      	str	r3, [sp, #8]
 800846c:	2300      	movs	r3, #0
 800846e:	9205      	str	r2, [sp, #20]
 8008470:	930a      	str	r3, [sp, #40]	; 0x28
 8008472:	e5e0      	b.n	8008036 <_dtoa_r+0x18e>
 8008474:	f1c8 0300 	rsb	r3, r8, #0
 8008478:	9305      	str	r3, [sp, #20]
 800847a:	f04f 0800 	mov.w	r8, #0
 800847e:	e5d2      	b.n	8008026 <_dtoa_r+0x17e>
 8008480:	9f02      	ldr	r7, [sp, #8]
 8008482:	9d05      	ldr	r5, [sp, #20]
 8008484:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008486:	e707      	b.n	8008298 <_dtoa_r+0x3f0>
 8008488:	f1c3 0820 	rsb	r8, r3, #32
 800848c:	fa0a f008 	lsl.w	r0, sl, r8
 8008490:	e57b      	b.n	8007f8a <_dtoa_r+0xe2>
 8008492:	900b      	str	r0, [sp, #44]	; 0x2c
 8008494:	e5c0      	b.n	8008018 <_dtoa_r+0x170>
 8008496:	bf00      	nop
 8008498:	40240000 	.word	0x40240000
 800849c:	2300      	movs	r3, #0
 800849e:	9309      	str	r3, [sp, #36]	; 0x24
 80084a0:	9b04      	ldr	r3, [sp, #16]
 80084a2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80084a4:	4413      	add	r3, r2
 80084a6:	930c      	str	r3, [sp, #48]	; 0x30
 80084a8:	3301      	adds	r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	9306      	str	r3, [sp, #24]
 80084ae:	f340 827d 	ble.w	80089ac <_dtoa_r+0xb04>
 80084b2:	9c06      	ldr	r4, [sp, #24]
 80084b4:	4626      	mov	r6, r4
 80084b6:	2100      	movs	r1, #0
 80084b8:	2e17      	cmp	r6, #23
 80084ba:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80084be:	d90b      	bls.n	80084d8 <_dtoa_r+0x630>
 80084c0:	2201      	movs	r2, #1
 80084c2:	2304      	movs	r3, #4
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	f103 0014 	add.w	r0, r3, #20
 80084ca:	42b0      	cmp	r0, r6
 80084cc:	4611      	mov	r1, r2
 80084ce:	f102 0201 	add.w	r2, r2, #1
 80084d2:	d9f7      	bls.n	80084c4 <_dtoa_r+0x61c>
 80084d4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80084d8:	4648      	mov	r0, r9
 80084da:	f001 fff1 	bl	800a4c0 <_Balloc>
 80084de:	2c0e      	cmp	r4, #14
 80084e0:	9007      	str	r0, [sp, #28]
 80084e2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 80084e6:	f63f ade5 	bhi.w	80080b4 <_dtoa_r+0x20c>
 80084ea:	2d00      	cmp	r5, #0
 80084ec:	f43f ade2 	beq.w	80080b4 <_dtoa_r+0x20c>
 80084f0:	9904      	ldr	r1, [sp, #16]
 80084f2:	2900      	cmp	r1, #0
 80084f4:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 80084f8:	f340 829a 	ble.w	8008a30 <_dtoa_r+0xb88>
 80084fc:	4b90      	ldr	r3, [pc, #576]	; (8008740 <_dtoa_r+0x898>)
 80084fe:	f001 020f 	and.w	r2, r1, #15
 8008502:	110e      	asrs	r6, r1, #4
 8008504:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008508:	06f0      	lsls	r0, r6, #27
 800850a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800850e:	f140 8246 	bpl.w	800899e <_dtoa_r+0xaf6>
 8008512:	4b8c      	ldr	r3, [pc, #560]	; (8008744 <_dtoa_r+0x89c>)
 8008514:	4650      	mov	r0, sl
 8008516:	4659      	mov	r1, fp
 8008518:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800851c:	f7fb f892 	bl	8003644 <__aeabi_ddiv>
 8008520:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008524:	f006 060f 	and.w	r6, r6, #15
 8008528:	f04f 0a03 	mov.w	sl, #3
 800852c:	b186      	cbz	r6, 8008550 <_dtoa_r+0x6a8>
 800852e:	4f85      	ldr	r7, [pc, #532]	; (8008744 <_dtoa_r+0x89c>)
 8008530:	07f1      	lsls	r1, r6, #31
 8008532:	d509      	bpl.n	8008548 <_dtoa_r+0x6a0>
 8008534:	4620      	mov	r0, r4
 8008536:	4629      	mov	r1, r5
 8008538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800853c:	f7fa ff58 	bl	80033f0 <__aeabi_dmul>
 8008540:	f10a 0a01 	add.w	sl, sl, #1
 8008544:	4604      	mov	r4, r0
 8008546:	460d      	mov	r5, r1
 8008548:	1076      	asrs	r6, r6, #1
 800854a:	f107 0708 	add.w	r7, r7, #8
 800854e:	d1ef      	bne.n	8008530 <_dtoa_r+0x688>
 8008550:	4622      	mov	r2, r4
 8008552:	462b      	mov	r3, r5
 8008554:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008558:	f7fb f874 	bl	8003644 <__aeabi_ddiv>
 800855c:	4606      	mov	r6, r0
 800855e:	460f      	mov	r7, r1
 8008560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008562:	b143      	cbz	r3, 8008576 <_dtoa_r+0x6ce>
 8008564:	2200      	movs	r2, #0
 8008566:	4b78      	ldr	r3, [pc, #480]	; (8008748 <_dtoa_r+0x8a0>)
 8008568:	4630      	mov	r0, r6
 800856a:	4639      	mov	r1, r7
 800856c:	f7fb f9b2 	bl	80038d4 <__aeabi_dcmplt>
 8008570:	2800      	cmp	r0, #0
 8008572:	f040 831a 	bne.w	8008baa <_dtoa_r+0xd02>
 8008576:	4650      	mov	r0, sl
 8008578:	f7fa fed4 	bl	8003324 <__aeabi_i2d>
 800857c:	4632      	mov	r2, r6
 800857e:	463b      	mov	r3, r7
 8008580:	f7fa ff36 	bl	80033f0 <__aeabi_dmul>
 8008584:	4b71      	ldr	r3, [pc, #452]	; (800874c <_dtoa_r+0x8a4>)
 8008586:	2200      	movs	r2, #0
 8008588:	f7fa fd80 	bl	800308c <__adddf3>
 800858c:	9b06      	ldr	r3, [sp, #24]
 800858e:	4604      	mov	r4, r0
 8008590:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 81db 	beq.w	8008950 <_dtoa_r+0xaa8>
 800859a:	9b04      	ldr	r3, [sp, #16]
 800859c:	9314      	str	r3, [sp, #80]	; 0x50
 800859e:	9b06      	ldr	r3, [sp, #24]
 80085a0:	9310      	str	r3, [sp, #64]	; 0x40
 80085a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 8294 	beq.w	8008ad2 <_dtoa_r+0xc2a>
 80085aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80085ac:	4b64      	ldr	r3, [pc, #400]	; (8008740 <_dtoa_r+0x898>)
 80085ae:	4968      	ldr	r1, [pc, #416]	; (8008750 <_dtoa_r+0x8a8>)
 80085b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085b8:	2000      	movs	r0, #0
 80085ba:	f7fb f843 	bl	8003644 <__aeabi_ddiv>
 80085be:	4622      	mov	r2, r4
 80085c0:	462b      	mov	r3, r5
 80085c2:	f7fa fd61 	bl	8003088 <__aeabi_dsub>
 80085c6:	4682      	mov	sl, r0
 80085c8:	468b      	mov	fp, r1
 80085ca:	4630      	mov	r0, r6
 80085cc:	4639      	mov	r1, r7
 80085ce:	f003 f8c3 	bl	800b758 <__aeabi_d2iz>
 80085d2:	4604      	mov	r4, r0
 80085d4:	f7fa fea6 	bl	8003324 <__aeabi_i2d>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4630      	mov	r0, r6
 80085de:	4639      	mov	r1, r7
 80085e0:	f7fa fd52 	bl	8003088 <__aeabi_dsub>
 80085e4:	3430      	adds	r4, #48	; 0x30
 80085e6:	9d07      	ldr	r5, [sp, #28]
 80085e8:	b2e4      	uxtb	r4, r4
 80085ea:	4606      	mov	r6, r0
 80085ec:	460f      	mov	r7, r1
 80085ee:	702c      	strb	r4, [r5, #0]
 80085f0:	4602      	mov	r2, r0
 80085f2:	460b      	mov	r3, r1
 80085f4:	4650      	mov	r0, sl
 80085f6:	4659      	mov	r1, fp
 80085f8:	3501      	adds	r5, #1
 80085fa:	f7fb f989 	bl	8003910 <__aeabi_dcmpgt>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d150      	bne.n	80086a4 <_dtoa_r+0x7fc>
 8008602:	4632      	mov	r2, r6
 8008604:	463b      	mov	r3, r7
 8008606:	2000      	movs	r0, #0
 8008608:	494f      	ldr	r1, [pc, #316]	; (8008748 <_dtoa_r+0x8a0>)
 800860a:	f7fa fd3d 	bl	8003088 <__aeabi_dsub>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	4650      	mov	r0, sl
 8008614:	4659      	mov	r1, fp
 8008616:	f7fb f97b 	bl	8003910 <__aeabi_dcmpgt>
 800861a:	2800      	cmp	r0, #0
 800861c:	f040 8308 	bne.w	8008c30 <_dtoa_r+0xd88>
 8008620:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008622:	2a01      	cmp	r2, #1
 8008624:	f340 81f7 	ble.w	8008a16 <_dtoa_r+0xb6e>
 8008628:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800862a:	9a07      	ldr	r2, [sp, #28]
 800862c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008630:	4413      	add	r3, r2
 8008632:	4698      	mov	r8, r3
 8008634:	e00d      	b.n	8008652 <_dtoa_r+0x7aa>
 8008636:	2000      	movs	r0, #0
 8008638:	4943      	ldr	r1, [pc, #268]	; (8008748 <_dtoa_r+0x8a0>)
 800863a:	f7fa fd25 	bl	8003088 <__aeabi_dsub>
 800863e:	4652      	mov	r2, sl
 8008640:	465b      	mov	r3, fp
 8008642:	f7fb f947 	bl	80038d4 <__aeabi_dcmplt>
 8008646:	2800      	cmp	r0, #0
 8008648:	f040 82f2 	bne.w	8008c30 <_dtoa_r+0xd88>
 800864c:	4545      	cmp	r5, r8
 800864e:	f000 81e0 	beq.w	8008a12 <_dtoa_r+0xb6a>
 8008652:	4650      	mov	r0, sl
 8008654:	4659      	mov	r1, fp
 8008656:	2200      	movs	r2, #0
 8008658:	4b3e      	ldr	r3, [pc, #248]	; (8008754 <_dtoa_r+0x8ac>)
 800865a:	f7fa fec9 	bl	80033f0 <__aeabi_dmul>
 800865e:	2200      	movs	r2, #0
 8008660:	4b3c      	ldr	r3, [pc, #240]	; (8008754 <_dtoa_r+0x8ac>)
 8008662:	4682      	mov	sl, r0
 8008664:	468b      	mov	fp, r1
 8008666:	4630      	mov	r0, r6
 8008668:	4639      	mov	r1, r7
 800866a:	f7fa fec1 	bl	80033f0 <__aeabi_dmul>
 800866e:	460f      	mov	r7, r1
 8008670:	4606      	mov	r6, r0
 8008672:	f003 f871 	bl	800b758 <__aeabi_d2iz>
 8008676:	4604      	mov	r4, r0
 8008678:	f7fa fe54 	bl	8003324 <__aeabi_i2d>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4630      	mov	r0, r6
 8008682:	4639      	mov	r1, r7
 8008684:	f7fa fd00 	bl	8003088 <__aeabi_dsub>
 8008688:	3430      	adds	r4, #48	; 0x30
 800868a:	b2e4      	uxtb	r4, r4
 800868c:	4652      	mov	r2, sl
 800868e:	465b      	mov	r3, fp
 8008690:	f805 4b01 	strb.w	r4, [r5], #1
 8008694:	4606      	mov	r6, r0
 8008696:	460f      	mov	r7, r1
 8008698:	f7fb f91c 	bl	80038d4 <__aeabi_dcmplt>
 800869c:	4632      	mov	r2, r6
 800869e:	463b      	mov	r3, r7
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d0c8      	beq.n	8008636 <_dtoa_r+0x78e>
 80086a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086a6:	9304      	str	r3, [sp, #16]
 80086a8:	e5c5      	b.n	8008236 <_dtoa_r+0x38e>
 80086aa:	2300      	movs	r3, #0
 80086ac:	9309      	str	r3, [sp, #36]	; 0x24
 80086ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f340 8180 	ble.w	80089b6 <_dtoa_r+0xb0e>
 80086b6:	461e      	mov	r6, r3
 80086b8:	461c      	mov	r4, r3
 80086ba:	930c      	str	r3, [sp, #48]	; 0x30
 80086bc:	9306      	str	r3, [sp, #24]
 80086be:	e6fa      	b.n	80084b6 <_dtoa_r+0x60e>
 80086c0:	2301      	movs	r3, #1
 80086c2:	9309      	str	r3, [sp, #36]	; 0x24
 80086c4:	e7f3      	b.n	80086ae <_dtoa_r+0x806>
 80086c6:	9408      	str	r4, [sp, #32]
 80086c8:	9a02      	ldr	r2, [sp, #8]
 80086ca:	9908      	ldr	r1, [sp, #32]
 80086cc:	4648      	mov	r0, r9
 80086ce:	f002 f8a3 	bl	800a818 <__pow5mult>
 80086d2:	4604      	mov	r4, r0
 80086d4:	e60e      	b.n	80082f4 <_dtoa_r+0x44c>
 80086d6:	9b06      	ldr	r3, [sp, #24]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f73f acfe 	bgt.w	80080da <_dtoa_r+0x232>
 80086de:	f040 814f 	bne.w	8008980 <_dtoa_r+0xad8>
 80086e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086e6:	2200      	movs	r2, #0
 80086e8:	4b1b      	ldr	r3, [pc, #108]	; (8008758 <_dtoa_r+0x8b0>)
 80086ea:	f7fa fe81 	bl	80033f0 <__aeabi_dmul>
 80086ee:	465b      	mov	r3, fp
 80086f0:	4652      	mov	r2, sl
 80086f2:	f7fb f903 	bl	80038fc <__aeabi_dcmpge>
 80086f6:	9b06      	ldr	r3, [sp, #24]
 80086f8:	9302      	str	r3, [sp, #8]
 80086fa:	461e      	mov	r6, r3
 80086fc:	2800      	cmp	r0, #0
 80086fe:	f000 80ea 	beq.w	80088d6 <_dtoa_r+0xa2e>
 8008702:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008704:	9d07      	ldr	r5, [sp, #28]
 8008706:	43db      	mvns	r3, r3
 8008708:	9304      	str	r3, [sp, #16]
 800870a:	9902      	ldr	r1, [sp, #8]
 800870c:	4648      	mov	r0, r9
 800870e:	f001 fefd 	bl	800a50c <_Bfree>
 8008712:	2e00      	cmp	r6, #0
 8008714:	f43f ad8f 	beq.w	8008236 <_dtoa_r+0x38e>
 8008718:	e689      	b.n	800842e <_dtoa_r+0x586>
 800871a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800871c:	2a00      	cmp	r2, #0
 800871e:	f000 8238 	beq.w	8008b92 <_dtoa_r+0xcea>
 8008722:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008726:	9f02      	ldr	r7, [sp, #8]
 8008728:	9d05      	ldr	r5, [sp, #20]
 800872a:	e5ac      	b.n	8008286 <_dtoa_r+0x3de>
 800872c:	201c      	movs	r0, #28
 800872e:	e60a      	b.n	8008346 <_dtoa_r+0x49e>
 8008730:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008732:	2b01      	cmp	r3, #1
 8008734:	f340 8280 	ble.w	8008c38 <_dtoa_r+0xd90>
 8008738:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800873a:	2001      	movs	r0, #1
 800873c:	e5f7      	b.n	800832e <_dtoa_r+0x486>
 800873e:	bf00      	nop
 8008740:	0800bf38 	.word	0x0800bf38
 8008744:	0800c000 	.word	0x0800c000
 8008748:	3ff00000 	.word	0x3ff00000
 800874c:	401c0000 	.word	0x401c0000
 8008750:	3fe00000 	.word	0x3fe00000
 8008754:	40240000 	.word	0x40240000
 8008758:	40140000 	.word	0x40140000
 800875c:	4631      	mov	r1, r6
 800875e:	2300      	movs	r3, #0
 8008760:	220a      	movs	r2, #10
 8008762:	4648      	mov	r0, r9
 8008764:	f001 fedc 	bl	800a520 <__multadd>
 8008768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800876a:	2b00      	cmp	r3, #0
 800876c:	4606      	mov	r6, r0
 800876e:	f340 828d 	ble.w	8008c8c <_dtoa_r+0xde4>
 8008772:	9306      	str	r3, [sp, #24]
 8008774:	2d00      	cmp	r5, #0
 8008776:	dd05      	ble.n	8008784 <_dtoa_r+0x8dc>
 8008778:	4631      	mov	r1, r6
 800877a:	462a      	mov	r2, r5
 800877c:	4648      	mov	r0, r9
 800877e:	f002 f89b 	bl	800a8b8 <__lshift>
 8008782:	4606      	mov	r6, r0
 8008784:	2f00      	cmp	r7, #0
 8008786:	f040 817c 	bne.w	8008a82 <_dtoa_r+0xbda>
 800878a:	46b0      	mov	r8, r6
 800878c:	9b06      	ldr	r3, [sp, #24]
 800878e:	9a07      	ldr	r2, [sp, #28]
 8008790:	3b01      	subs	r3, #1
 8008792:	18d3      	adds	r3, r2, r3
 8008794:	9308      	str	r3, [sp, #32]
 8008796:	f00a 0301 	and.w	r3, sl, #1
 800879a:	9309      	str	r3, [sp, #36]	; 0x24
 800879c:	4617      	mov	r7, r2
 800879e:	f8dd b008 	ldr.w	fp, [sp, #8]
 80087a2:	4620      	mov	r0, r4
 80087a4:	4659      	mov	r1, fp
 80087a6:	f7ff faeb 	bl	8007d80 <quorem>
 80087aa:	4631      	mov	r1, r6
 80087ac:	4605      	mov	r5, r0
 80087ae:	4620      	mov	r0, r4
 80087b0:	f002 f8da 	bl	800a968 <__mcmp>
 80087b4:	4642      	mov	r2, r8
 80087b6:	4659      	mov	r1, fp
 80087b8:	4682      	mov	sl, r0
 80087ba:	4648      	mov	r0, r9
 80087bc:	f002 f8f6 	bl	800a9ac <__mdiff>
 80087c0:	68c2      	ldr	r2, [r0, #12]
 80087c2:	4683      	mov	fp, r0
 80087c4:	f105 0330 	add.w	r3, r5, #48	; 0x30
 80087c8:	2a00      	cmp	r2, #0
 80087ca:	d149      	bne.n	8008860 <_dtoa_r+0x9b8>
 80087cc:	4601      	mov	r1, r0
 80087ce:	4620      	mov	r0, r4
 80087d0:	9306      	str	r3, [sp, #24]
 80087d2:	f002 f8c9 	bl	800a968 <__mcmp>
 80087d6:	4659      	mov	r1, fp
 80087d8:	9005      	str	r0, [sp, #20]
 80087da:	4648      	mov	r0, r9
 80087dc:	f001 fe96 	bl	800a50c <_Bfree>
 80087e0:	9a05      	ldr	r2, [sp, #20]
 80087e2:	9b06      	ldr	r3, [sp, #24]
 80087e4:	b92a      	cbnz	r2, 80087f2 <_dtoa_r+0x94a>
 80087e6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80087e8:	b919      	cbnz	r1, 80087f2 <_dtoa_r+0x94a>
 80087ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ec:	2900      	cmp	r1, #0
 80087ee:	f000 8235 	beq.w	8008c5c <_dtoa_r+0xdb4>
 80087f2:	f1ba 0f00 	cmp.w	sl, #0
 80087f6:	f2c0 80e3 	blt.w	80089c0 <_dtoa_r+0xb18>
 80087fa:	d105      	bne.n	8008808 <_dtoa_r+0x960>
 80087fc:	9922      	ldr	r1, [sp, #136]	; 0x88
 80087fe:	b919      	cbnz	r1, 8008808 <_dtoa_r+0x960>
 8008800:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008802:	2900      	cmp	r1, #0
 8008804:	f000 80dc 	beq.w	80089c0 <_dtoa_r+0xb18>
 8008808:	2a00      	cmp	r2, #0
 800880a:	f300 814e 	bgt.w	8008aaa <_dtoa_r+0xc02>
 800880e:	9a08      	ldr	r2, [sp, #32]
 8008810:	703b      	strb	r3, [r7, #0]
 8008812:	f107 0a01 	add.w	sl, r7, #1
 8008816:	4297      	cmp	r7, r2
 8008818:	4655      	mov	r5, sl
 800881a:	f000 8152 	beq.w	8008ac2 <_dtoa_r+0xc1a>
 800881e:	4621      	mov	r1, r4
 8008820:	2300      	movs	r3, #0
 8008822:	220a      	movs	r2, #10
 8008824:	4648      	mov	r0, r9
 8008826:	f001 fe7b 	bl	800a520 <__multadd>
 800882a:	4546      	cmp	r6, r8
 800882c:	4604      	mov	r4, r0
 800882e:	4631      	mov	r1, r6
 8008830:	f04f 0300 	mov.w	r3, #0
 8008834:	f04f 020a 	mov.w	r2, #10
 8008838:	4648      	mov	r0, r9
 800883a:	d00b      	beq.n	8008854 <_dtoa_r+0x9ac>
 800883c:	f001 fe70 	bl	800a520 <__multadd>
 8008840:	4641      	mov	r1, r8
 8008842:	4606      	mov	r6, r0
 8008844:	2300      	movs	r3, #0
 8008846:	220a      	movs	r2, #10
 8008848:	4648      	mov	r0, r9
 800884a:	f001 fe69 	bl	800a520 <__multadd>
 800884e:	4657      	mov	r7, sl
 8008850:	4680      	mov	r8, r0
 8008852:	e7a4      	b.n	800879e <_dtoa_r+0x8f6>
 8008854:	f001 fe64 	bl	800a520 <__multadd>
 8008858:	4657      	mov	r7, sl
 800885a:	4606      	mov	r6, r0
 800885c:	4680      	mov	r8, r0
 800885e:	e79e      	b.n	800879e <_dtoa_r+0x8f6>
 8008860:	4601      	mov	r1, r0
 8008862:	4648      	mov	r0, r9
 8008864:	9305      	str	r3, [sp, #20]
 8008866:	f001 fe51 	bl	800a50c <_Bfree>
 800886a:	2201      	movs	r2, #1
 800886c:	9b05      	ldr	r3, [sp, #20]
 800886e:	e7c0      	b.n	80087f2 <_dtoa_r+0x94a>
 8008870:	9902      	ldr	r1, [sp, #8]
 8008872:	4620      	mov	r0, r4
 8008874:	f002 f878 	bl	800a968 <__mcmp>
 8008878:	2800      	cmp	r0, #0
 800887a:	f6bf ad7f 	bge.w	800837c <_dtoa_r+0x4d4>
 800887e:	4621      	mov	r1, r4
 8008880:	9c04      	ldr	r4, [sp, #16]
 8008882:	2300      	movs	r3, #0
 8008884:	3c01      	subs	r4, #1
 8008886:	220a      	movs	r2, #10
 8008888:	4648      	mov	r0, r9
 800888a:	9404      	str	r4, [sp, #16]
 800888c:	f001 fe48 	bl	800a520 <__multadd>
 8008890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008892:	4604      	mov	r4, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	f47f af61 	bne.w	800875c <_dtoa_r+0x8b4>
 800889a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800889c:	2b00      	cmp	r3, #0
 800889e:	f340 81ed 	ble.w	8008c7c <_dtoa_r+0xdd4>
 80088a2:	9306      	str	r3, [sp, #24]
 80088a4:	e572      	b.n	800838c <_dtoa_r+0x4e4>
 80088a6:	9c08      	ldr	r4, [sp, #32]
 80088a8:	e524      	b.n	80082f4 <_dtoa_r+0x44c>
 80088aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	f77f ad69 	ble.w	8008384 <_dtoa_r+0x4dc>
 80088b2:	9b06      	ldr	r3, [sp, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f040 819d 	bne.w	8008bf4 <_dtoa_r+0xd4c>
 80088ba:	9902      	ldr	r1, [sp, #8]
 80088bc:	2205      	movs	r2, #5
 80088be:	4648      	mov	r0, r9
 80088c0:	f001 fe2e 	bl	800a520 <__multadd>
 80088c4:	4601      	mov	r1, r0
 80088c6:	9002      	str	r0, [sp, #8]
 80088c8:	4620      	mov	r0, r4
 80088ca:	f002 f84d 	bl	800a968 <__mcmp>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	9408      	str	r4, [sp, #32]
 80088d2:	f77f af16 	ble.w	8008702 <_dtoa_r+0x85a>
 80088d6:	9a04      	ldr	r2, [sp, #16]
 80088d8:	9907      	ldr	r1, [sp, #28]
 80088da:	2331      	movs	r3, #49	; 0x31
 80088dc:	3201      	adds	r2, #1
 80088de:	9204      	str	r2, [sp, #16]
 80088e0:	700b      	strb	r3, [r1, #0]
 80088e2:	1c4d      	adds	r5, r1, #1
 80088e4:	e711      	b.n	800870a <_dtoa_r+0x862>
 80088e6:	9a04      	ldr	r2, [sp, #16]
 80088e8:	3201      	adds	r2, #1
 80088ea:	9204      	str	r2, [sp, #16]
 80088ec:	9a07      	ldr	r2, [sp, #28]
 80088ee:	2331      	movs	r3, #49	; 0x31
 80088f0:	7013      	strb	r3, [r2, #0]
 80088f2:	e58c      	b.n	800840e <_dtoa_r+0x566>
 80088f4:	2301      	movs	r3, #1
 80088f6:	9309      	str	r3, [sp, #36]	; 0x24
 80088f8:	e5d2      	b.n	80084a0 <_dtoa_r+0x5f8>
 80088fa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80088fe:	e49a      	b.n	8008236 <_dtoa_r+0x38e>
 8008900:	f1ba 0f00 	cmp.w	sl, #0
 8008904:	f47f ad09 	bne.w	800831a <_dtoa_r+0x472>
 8008908:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800890c:	2b00      	cmp	r3, #0
 800890e:	f040 813e 	bne.w	8008b8e <_dtoa_r+0xce6>
 8008912:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8008916:	0d3f      	lsrs	r7, r7, #20
 8008918:	053f      	lsls	r7, r7, #20
 800891a:	b12f      	cbz	r7, 8008928 <_dtoa_r+0xa80>
 800891c:	9b05      	ldr	r3, [sp, #20]
 800891e:	3301      	adds	r3, #1
 8008920:	9305      	str	r3, [sp, #20]
 8008922:	f108 0801 	add.w	r8, r8, #1
 8008926:	2701      	movs	r7, #1
 8008928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800892a:	2001      	movs	r0, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	f43f acfe 	beq.w	800832e <_dtoa_r+0x486>
 8008932:	e4f3      	b.n	800831c <_dtoa_r+0x474>
 8008934:	4650      	mov	r0, sl
 8008936:	f7fa fcf5 	bl	8003324 <__aeabi_i2d>
 800893a:	4632      	mov	r2, r6
 800893c:	463b      	mov	r3, r7
 800893e:	f7fa fd57 	bl	80033f0 <__aeabi_dmul>
 8008942:	2200      	movs	r2, #0
 8008944:	4bbf      	ldr	r3, [pc, #764]	; (8008c44 <_dtoa_r+0xd9c>)
 8008946:	f7fa fba1 	bl	800308c <__adddf3>
 800894a:	4604      	mov	r4, r0
 800894c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008950:	4630      	mov	r0, r6
 8008952:	4639      	mov	r1, r7
 8008954:	2200      	movs	r2, #0
 8008956:	4bbc      	ldr	r3, [pc, #752]	; (8008c48 <_dtoa_r+0xda0>)
 8008958:	f7fa fb96 	bl	8003088 <__aeabi_dsub>
 800895c:	4622      	mov	r2, r4
 800895e:	462b      	mov	r3, r5
 8008960:	4606      	mov	r6, r0
 8008962:	460f      	mov	r7, r1
 8008964:	f7fa ffd4 	bl	8003910 <__aeabi_dcmpgt>
 8008968:	2800      	cmp	r0, #0
 800896a:	f040 80ae 	bne.w	8008aca <_dtoa_r+0xc22>
 800896e:	4622      	mov	r2, r4
 8008970:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008974:	4630      	mov	r0, r6
 8008976:	4639      	mov	r1, r7
 8008978:	f7fa ffac 	bl	80038d4 <__aeabi_dcmplt>
 800897c:	2800      	cmp	r0, #0
 800897e:	d04a      	beq.n	8008a16 <_dtoa_r+0xb6e>
 8008980:	2300      	movs	r3, #0
 8008982:	9302      	str	r3, [sp, #8]
 8008984:	461e      	mov	r6, r3
 8008986:	e6bc      	b.n	8008702 <_dtoa_r+0x85a>
 8008988:	9807      	ldr	r0, [sp, #28]
 800898a:	f7ff babe 	b.w	8007f0a <_dtoa_r+0x62>
 800898e:	9b02      	ldr	r3, [sp, #8]
 8008990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008992:	9702      	str	r7, [sp, #8]
 8008994:	1afb      	subs	r3, r7, r3
 8008996:	441a      	add	r2, r3
 8008998:	920a      	str	r2, [sp, #40]	; 0x28
 800899a:	2700      	movs	r7, #0
 800899c:	e46d      	b.n	800827a <_dtoa_r+0x3d2>
 800899e:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
 80089a2:	f04f 0a02 	mov.w	sl, #2
 80089a6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80089aa:	e5bf      	b.n	800852c <_dtoa_r+0x684>
 80089ac:	461c      	mov	r4, r3
 80089ae:	2100      	movs	r1, #0
 80089b0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80089b4:	e590      	b.n	80084d8 <_dtoa_r+0x630>
 80089b6:	2401      	movs	r4, #1
 80089b8:	9423      	str	r4, [sp, #140]	; 0x8c
 80089ba:	940c      	str	r4, [sp, #48]	; 0x30
 80089bc:	9406      	str	r4, [sp, #24]
 80089be:	e7f6      	b.n	80089ae <_dtoa_r+0xb06>
 80089c0:	2a00      	cmp	r2, #0
 80089c2:	469a      	mov	sl, r3
 80089c4:	dd11      	ble.n	80089ea <_dtoa_r+0xb42>
 80089c6:	4621      	mov	r1, r4
 80089c8:	2201      	movs	r2, #1
 80089ca:	4648      	mov	r0, r9
 80089cc:	f001 ff74 	bl	800a8b8 <__lshift>
 80089d0:	9902      	ldr	r1, [sp, #8]
 80089d2:	4604      	mov	r4, r0
 80089d4:	f001 ffc8 	bl	800a968 <__mcmp>
 80089d8:	2800      	cmp	r0, #0
 80089da:	f340 8148 	ble.w	8008c6e <_dtoa_r+0xdc6>
 80089de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089e2:	f000 8109 	beq.w	8008bf8 <_dtoa_r+0xd50>
 80089e6:	f105 0a31 	add.w	sl, r5, #49	; 0x31
 80089ea:	46b3      	mov	fp, r6
 80089ec:	f887 a000 	strb.w	sl, [r7]
 80089f0:	1c7d      	adds	r5, r7, #1
 80089f2:	4646      	mov	r6, r8
 80089f4:	9408      	str	r4, [sp, #32]
 80089f6:	e50a      	b.n	800840e <_dtoa_r+0x566>
 80089f8:	d104      	bne.n	8008a04 <_dtoa_r+0xb5c>
 80089fa:	f01a 0f01 	tst.w	sl, #1
 80089fe:	d001      	beq.n	8008a04 <_dtoa_r+0xb5c>
 8008a00:	e4f5      	b.n	80083ee <_dtoa_r+0x546>
 8008a02:	4615      	mov	r5, r2
 8008a04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a08:	2b30      	cmp	r3, #48	; 0x30
 8008a0a:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a0e:	d0f8      	beq.n	8008a02 <_dtoa_r+0xb5a>
 8008a10:	e4fd      	b.n	800840e <_dtoa_r+0x566>
 8008a12:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008a16:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8008a1a:	f7ff bb4b 	b.w	80080b4 <_dtoa_r+0x20c>
 8008a1e:	9907      	ldr	r1, [sp, #28]
 8008a20:	2230      	movs	r2, #48	; 0x30
 8008a22:	700a      	strb	r2, [r1, #0]
 8008a24:	9a04      	ldr	r2, [sp, #16]
 8008a26:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8008a2a:	3201      	adds	r2, #1
 8008a2c:	9204      	str	r2, [sp, #16]
 8008a2e:	e400      	b.n	8008232 <_dtoa_r+0x38a>
 8008a30:	9b04      	ldr	r3, [sp, #16]
 8008a32:	425c      	negs	r4, r3
 8008a34:	2c00      	cmp	r4, #0
 8008a36:	f000 80b3 	beq.w	8008ba0 <_dtoa_r+0xcf8>
 8008a3a:	4b84      	ldr	r3, [pc, #528]	; (8008c4c <_dtoa_r+0xda4>)
 8008a3c:	f004 020f 	and.w	r2, r4, #15
 8008a40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a48:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008a4c:	f7fa fcd0 	bl	80033f0 <__aeabi_dmul>
 8008a50:	1124      	asrs	r4, r4, #4
 8008a52:	4606      	mov	r6, r0
 8008a54:	460f      	mov	r7, r1
 8008a56:	f000 8116 	beq.w	8008c86 <_dtoa_r+0xdde>
 8008a5a:	4d7d      	ldr	r5, [pc, #500]	; (8008c50 <_dtoa_r+0xda8>)
 8008a5c:	f04f 0a02 	mov.w	sl, #2
 8008a60:	07e2      	lsls	r2, r4, #31
 8008a62:	d509      	bpl.n	8008a78 <_dtoa_r+0xbd0>
 8008a64:	4630      	mov	r0, r6
 8008a66:	4639      	mov	r1, r7
 8008a68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a6c:	f7fa fcc0 	bl	80033f0 <__aeabi_dmul>
 8008a70:	f10a 0a01 	add.w	sl, sl, #1
 8008a74:	4606      	mov	r6, r0
 8008a76:	460f      	mov	r7, r1
 8008a78:	1064      	asrs	r4, r4, #1
 8008a7a:	f105 0508 	add.w	r5, r5, #8
 8008a7e:	d1ef      	bne.n	8008a60 <_dtoa_r+0xbb8>
 8008a80:	e56e      	b.n	8008560 <_dtoa_r+0x6b8>
 8008a82:	6871      	ldr	r1, [r6, #4]
 8008a84:	4648      	mov	r0, r9
 8008a86:	f001 fd1b 	bl	800a4c0 <_Balloc>
 8008a8a:	6933      	ldr	r3, [r6, #16]
 8008a8c:	1c9a      	adds	r2, r3, #2
 8008a8e:	4605      	mov	r5, r0
 8008a90:	0092      	lsls	r2, r2, #2
 8008a92:	f106 010c 	add.w	r1, r6, #12
 8008a96:	300c      	adds	r0, #12
 8008a98:	f7fa ffa8 	bl	80039ec <memcpy>
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	4648      	mov	r0, r9
 8008aa2:	f001 ff09 	bl	800a8b8 <__lshift>
 8008aa6:	4680      	mov	r8, r0
 8008aa8:	e670      	b.n	800878c <_dtoa_r+0x8e4>
 8008aaa:	2b39      	cmp	r3, #57	; 0x39
 8008aac:	f000 80a4 	beq.w	8008bf8 <_dtoa_r+0xd50>
 8008ab0:	f103 0a01 	add.w	sl, r3, #1
 8008ab4:	46b3      	mov	fp, r6
 8008ab6:	f887 a000 	strb.w	sl, [r7]
 8008aba:	1c7d      	adds	r5, r7, #1
 8008abc:	4646      	mov	r6, r8
 8008abe:	9408      	str	r4, [sp, #32]
 8008ac0:	e4a5      	b.n	800840e <_dtoa_r+0x566>
 8008ac2:	46b3      	mov	fp, r6
 8008ac4:	469a      	mov	sl, r3
 8008ac6:	4646      	mov	r6, r8
 8008ac8:	e485      	b.n	80083d6 <_dtoa_r+0x52e>
 8008aca:	2300      	movs	r3, #0
 8008acc:	9302      	str	r3, [sp, #8]
 8008ace:	461e      	mov	r6, r3
 8008ad0:	e701      	b.n	80088d6 <_dtoa_r+0xa2e>
 8008ad2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ad4:	495d      	ldr	r1, [pc, #372]	; (8008c4c <_dtoa_r+0xda4>)
 8008ad6:	1e5a      	subs	r2, r3, #1
 8008ad8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008adc:	462b      	mov	r3, r5
 8008ade:	9215      	str	r2, [sp, #84]	; 0x54
 8008ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ae4:	4622      	mov	r2, r4
 8008ae6:	f7fa fc83 	bl	80033f0 <__aeabi_dmul>
 8008aea:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8008aee:	4639      	mov	r1, r7
 8008af0:	4630      	mov	r0, r6
 8008af2:	f002 fe31 	bl	800b758 <__aeabi_d2iz>
 8008af6:	4604      	mov	r4, r0
 8008af8:	f7fa fc14 	bl	8003324 <__aeabi_i2d>
 8008afc:	460b      	mov	r3, r1
 8008afe:	4602      	mov	r2, r0
 8008b00:	4639      	mov	r1, r7
 8008b02:	4630      	mov	r0, r6
 8008b04:	f7fa fac0 	bl	8003088 <__aeabi_dsub>
 8008b08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b0a:	460f      	mov	r7, r1
 8008b0c:	9907      	ldr	r1, [sp, #28]
 8008b0e:	3430      	adds	r4, #48	; 0x30
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	4606      	mov	r6, r0
 8008b14:	700c      	strb	r4, [r1, #0]
 8008b16:	f101 0501 	add.w	r5, r1, #1
 8008b1a:	d020      	beq.n	8008b5e <_dtoa_r+0xcb6>
 8008b1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b1e:	9a07      	ldr	r2, [sp, #28]
 8008b20:	4413      	add	r3, r2
 8008b22:	469a      	mov	sl, r3
 8008b24:	46ab      	mov	fp, r5
 8008b26:	2200      	movs	r2, #0
 8008b28:	4b4a      	ldr	r3, [pc, #296]	; (8008c54 <_dtoa_r+0xdac>)
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	4639      	mov	r1, r7
 8008b2e:	f7fa fc5f 	bl	80033f0 <__aeabi_dmul>
 8008b32:	460f      	mov	r7, r1
 8008b34:	4606      	mov	r6, r0
 8008b36:	f002 fe0f 	bl	800b758 <__aeabi_d2iz>
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	f7fa fbf2 	bl	8003324 <__aeabi_i2d>
 8008b40:	3430      	adds	r4, #48	; 0x30
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4630      	mov	r0, r6
 8008b48:	4639      	mov	r1, r7
 8008b4a:	f7fa fa9d 	bl	8003088 <__aeabi_dsub>
 8008b4e:	f80b 4b01 	strb.w	r4, [fp], #1
 8008b52:	45da      	cmp	sl, fp
 8008b54:	4606      	mov	r6, r0
 8008b56:	460f      	mov	r7, r1
 8008b58:	d1e5      	bne.n	8008b26 <_dtoa_r+0xc7e>
 8008b5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b5c:	441d      	add	r5, r3
 8008b5e:	2200      	movs	r2, #0
 8008b60:	4b3d      	ldr	r3, [pc, #244]	; (8008c58 <_dtoa_r+0xdb0>)
 8008b62:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008b66:	f7fa fa91 	bl	800308c <__adddf3>
 8008b6a:	4632      	mov	r2, r6
 8008b6c:	463b      	mov	r3, r7
 8008b6e:	f7fa feb1 	bl	80038d4 <__aeabi_dcmplt>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d048      	beq.n	8008c08 <_dtoa_r+0xd60>
 8008b76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b78:	9304      	str	r3, [sp, #16]
 8008b7a:	f815 4c01 	ldrb.w	r4, [r5, #-1]
 8008b7e:	f7ff bb4c 	b.w	800821a <_dtoa_r+0x372>
 8008b82:	9b05      	ldr	r3, [sp, #20]
 8008b84:	9a06      	ldr	r2, [sp, #24]
 8008b86:	1a9d      	subs	r5, r3, r2
 8008b88:	2300      	movs	r3, #0
 8008b8a:	f7ff bb7c 	b.w	8008286 <_dtoa_r+0x3de>
 8008b8e:	2700      	movs	r7, #0
 8008b90:	e6ca      	b.n	8008928 <_dtoa_r+0xa80>
 8008b92:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b94:	9f02      	ldr	r7, [sp, #8]
 8008b96:	9d05      	ldr	r5, [sp, #20]
 8008b98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b9c:	f7ff bb73 	b.w	8008286 <_dtoa_r+0x3de>
 8008ba0:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8008ba4:	f04f 0a02 	mov.w	sl, #2
 8008ba8:	e4da      	b.n	8008560 <_dtoa_r+0x6b8>
 8008baa:	9b06      	ldr	r3, [sp, #24]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f43f aec1 	beq.w	8008934 <_dtoa_r+0xa8c>
 8008bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f77f af2e 	ble.w	8008a16 <_dtoa_r+0xb6e>
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4b25      	ldr	r3, [pc, #148]	; (8008c54 <_dtoa_r+0xdac>)
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	4639      	mov	r1, r7
 8008bc2:	f7fa fc15 	bl	80033f0 <__aeabi_dmul>
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	460f      	mov	r7, r1
 8008bca:	f10a 0001 	add.w	r0, sl, #1
 8008bce:	f7fa fba9 	bl	8003324 <__aeabi_i2d>
 8008bd2:	4632      	mov	r2, r6
 8008bd4:	463b      	mov	r3, r7
 8008bd6:	f7fa fc0b 	bl	80033f0 <__aeabi_dmul>
 8008bda:	2200      	movs	r2, #0
 8008bdc:	4b19      	ldr	r3, [pc, #100]	; (8008c44 <_dtoa_r+0xd9c>)
 8008bde:	f7fa fa55 	bl	800308c <__adddf3>
 8008be2:	9a04      	ldr	r2, [sp, #16]
 8008be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008be6:	9310      	str	r3, [sp, #64]	; 0x40
 8008be8:	3a01      	subs	r2, #1
 8008bea:	4604      	mov	r4, r0
 8008bec:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008bf0:	9214      	str	r2, [sp, #80]	; 0x50
 8008bf2:	e4d6      	b.n	80085a2 <_dtoa_r+0x6fa>
 8008bf4:	9408      	str	r4, [sp, #32]
 8008bf6:	e584      	b.n	8008702 <_dtoa_r+0x85a>
 8008bf8:	2239      	movs	r2, #57	; 0x39
 8008bfa:	46b3      	mov	fp, r6
 8008bfc:	9408      	str	r4, [sp, #32]
 8008bfe:	4646      	mov	r6, r8
 8008c00:	703a      	strb	r2, [r7, #0]
 8008c02:	1c7d      	adds	r5, r7, #1
 8008c04:	f7ff bbf5 	b.w	80083f2 <_dtoa_r+0x54a>
 8008c08:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	4912      	ldr	r1, [pc, #72]	; (8008c58 <_dtoa_r+0xdb0>)
 8008c10:	f7fa fa3a 	bl	8003088 <__aeabi_dsub>
 8008c14:	4632      	mov	r2, r6
 8008c16:	463b      	mov	r3, r7
 8008c18:	f7fa fe7a 	bl	8003910 <__aeabi_dcmpgt>
 8008c1c:	b908      	cbnz	r0, 8008c22 <_dtoa_r+0xd7a>
 8008c1e:	e6fa      	b.n	8008a16 <_dtoa_r+0xb6e>
 8008c20:	4615      	mov	r5, r2
 8008c22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c26:	2b30      	cmp	r3, #48	; 0x30
 8008c28:	f105 32ff 	add.w	r2, r5, #4294967295
 8008c2c:	d0f8      	beq.n	8008c20 <_dtoa_r+0xd78>
 8008c2e:	e539      	b.n	80086a4 <_dtoa_r+0x7fc>
 8008c30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c32:	9304      	str	r3, [sp, #16]
 8008c34:	f7ff baf1 	b.w	800821a <_dtoa_r+0x372>
 8008c38:	f1ba 0f00 	cmp.w	sl, #0
 8008c3c:	f47f ad7c 	bne.w	8008738 <_dtoa_r+0x890>
 8008c40:	e662      	b.n	8008908 <_dtoa_r+0xa60>
 8008c42:	bf00      	nop
 8008c44:	401c0000 	.word	0x401c0000
 8008c48:	40140000 	.word	0x40140000
 8008c4c:	0800bf38 	.word	0x0800bf38
 8008c50:	0800c000 	.word	0x0800c000
 8008c54:	40240000 	.word	0x40240000
 8008c58:	3fe00000 	.word	0x3fe00000
 8008c5c:	2b39      	cmp	r3, #57	; 0x39
 8008c5e:	46d3      	mov	fp, sl
 8008c60:	469a      	mov	sl, r3
 8008c62:	d0c9      	beq.n	8008bf8 <_dtoa_r+0xd50>
 8008c64:	f1bb 0f00 	cmp.w	fp, #0
 8008c68:	f73f aebd 	bgt.w	80089e6 <_dtoa_r+0xb3e>
 8008c6c:	e6bd      	b.n	80089ea <_dtoa_r+0xb42>
 8008c6e:	f47f aebc 	bne.w	80089ea <_dtoa_r+0xb42>
 8008c72:	f01a 0f01 	tst.w	sl, #1
 8008c76:	f43f aeb8 	beq.w	80089ea <_dtoa_r+0xb42>
 8008c7a:	e6b0      	b.n	80089de <_dtoa_r+0xb36>
 8008c7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	dc25      	bgt.n	8008cce <_dtoa_r+0xe26>
 8008c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c84:	e60d      	b.n	80088a2 <_dtoa_r+0x9fa>
 8008c86:	f04f 0a02 	mov.w	sl, #2
 8008c8a:	e469      	b.n	8008560 <_dtoa_r+0x6b8>
 8008c8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	dc1d      	bgt.n	8008cce <_dtoa_r+0xe26>
 8008c92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c94:	e56d      	b.n	8008772 <_dtoa_r+0x8ca>
 8008c96:	2400      	movs	r4, #0
 8008c98:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	4648      	mov	r0, r9
 8008ca0:	f001 fc0e 	bl	800a4c0 <_Balloc>
 8008ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca8:	9306      	str	r3, [sp, #24]
 8008caa:	930c      	str	r3, [sp, #48]	; 0x30
 8008cac:	2301      	movs	r3, #1
 8008cae:	9007      	str	r0, [sp, #28]
 8008cb0:	9423      	str	r4, [sp, #140]	; 0x8c
 8008cb2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8008cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb8:	f7ff b9fc 	b.w	80080b4 <_dtoa_r+0x20c>
 8008cbc:	f43f ab48 	beq.w	8008350 <_dtoa_r+0x4a8>
 8008cc0:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8008cc4:	f7ff bb3f 	b.w	8008346 <_dtoa_r+0x49e>
 8008cc8:	2501      	movs	r5, #1
 8008cca:	f7ff b9bd 	b.w	8008048 <_dtoa_r+0x1a0>
 8008cce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cd0:	9306      	str	r3, [sp, #24]
 8008cd2:	e5ee      	b.n	80088b2 <_dtoa_r+0xa0a>

08008cd4 <__sflush_r>:
 8008cd4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cde:	460d      	mov	r5, r1
 8008ce0:	0711      	lsls	r1, r2, #28
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	d43c      	bmi.n	8008d60 <__sflush_r+0x8c>
 8008ce6:	686a      	ldr	r2, [r5, #4]
 8008ce8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008cec:	2a00      	cmp	r2, #0
 8008cee:	81ab      	strh	r3, [r5, #12]
 8008cf0:	dd73      	ble.n	8008dda <__sflush_r+0x106>
 8008cf2:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8008cf4:	2c00      	cmp	r4, #0
 8008cf6:	d04b      	beq.n	8008d90 <__sflush_r+0xbc>
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008cfe:	2100      	movs	r1, #0
 8008d00:	b292      	uxth	r2, r2
 8008d02:	f8d8 6000 	ldr.w	r6, [r8]
 8008d06:	f8c8 1000 	str.w	r1, [r8]
 8008d0a:	2a00      	cmp	r2, #0
 8008d0c:	d069      	beq.n	8008de2 <__sflush_r+0x10e>
 8008d0e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8008d10:	075f      	lsls	r7, r3, #29
 8008d12:	d505      	bpl.n	8008d20 <__sflush_r+0x4c>
 8008d14:	6869      	ldr	r1, [r5, #4]
 8008d16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008d18:	1a52      	subs	r2, r2, r1
 8008d1a:	b10b      	cbz	r3, 8008d20 <__sflush_r+0x4c>
 8008d1c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008d1e:	1ad2      	subs	r2, r2, r3
 8008d20:	2300      	movs	r3, #0
 8008d22:	69e9      	ldr	r1, [r5, #28]
 8008d24:	4640      	mov	r0, r8
 8008d26:	47a0      	blx	r4
 8008d28:	1c44      	adds	r4, r0, #1
 8008d2a:	d03c      	beq.n	8008da6 <__sflush_r+0xd2>
 8008d2c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8008d30:	692a      	ldr	r2, [r5, #16]
 8008d32:	602a      	str	r2, [r5, #0]
 8008d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d38:	2200      	movs	r2, #0
 8008d3a:	81ab      	strh	r3, [r5, #12]
 8008d3c:	04db      	lsls	r3, r3, #19
 8008d3e:	606a      	str	r2, [r5, #4]
 8008d40:	d449      	bmi.n	8008dd6 <__sflush_r+0x102>
 8008d42:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8008d44:	f8c8 6000 	str.w	r6, [r8]
 8008d48:	b311      	cbz	r1, 8008d90 <__sflush_r+0xbc>
 8008d4a:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8008d4e:	4299      	cmp	r1, r3
 8008d50:	d002      	beq.n	8008d58 <__sflush_r+0x84>
 8008d52:	4640      	mov	r0, r8
 8008d54:	f000 f94e 	bl	8008ff4 <_free_r>
 8008d58:	2000      	movs	r0, #0
 8008d5a:	6328      	str	r0, [r5, #48]	; 0x30
 8008d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d60:	692e      	ldr	r6, [r5, #16]
 8008d62:	b1ae      	cbz	r6, 8008d90 <__sflush_r+0xbc>
 8008d64:	682c      	ldr	r4, [r5, #0]
 8008d66:	602e      	str	r6, [r5, #0]
 8008d68:	0790      	lsls	r0, r2, #30
 8008d6a:	bf0c      	ite	eq
 8008d6c:	696b      	ldreq	r3, [r5, #20]
 8008d6e:	2300      	movne	r3, #0
 8008d70:	1ba4      	subs	r4, r4, r6
 8008d72:	60ab      	str	r3, [r5, #8]
 8008d74:	e00a      	b.n	8008d8c <__sflush_r+0xb8>
 8008d76:	4623      	mov	r3, r4
 8008d78:	4632      	mov	r2, r6
 8008d7a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8008d7c:	69e9      	ldr	r1, [r5, #28]
 8008d7e:	4640      	mov	r0, r8
 8008d80:	47b8      	blx	r7
 8008d82:	2800      	cmp	r0, #0
 8008d84:	eba4 0400 	sub.w	r4, r4, r0
 8008d88:	4406      	add	r6, r0
 8008d8a:	dd04      	ble.n	8008d96 <__sflush_r+0xc2>
 8008d8c:	2c00      	cmp	r4, #0
 8008d8e:	dcf2      	bgt.n	8008d76 <__sflush_r+0xa2>
 8008d90:	2000      	movs	r0, #0
 8008d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d96:	89ab      	ldrh	r3, [r5, #12]
 8008d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d9c:	81ab      	strh	r3, [r5, #12]
 8008d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da6:	f8d8 2000 	ldr.w	r2, [r8]
 8008daa:	2a1d      	cmp	r2, #29
 8008dac:	d8f3      	bhi.n	8008d96 <__sflush_r+0xc2>
 8008dae:	4b1a      	ldr	r3, [pc, #104]	; (8008e18 <__sflush_r+0x144>)
 8008db0:	40d3      	lsrs	r3, r2
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	f083 0401 	eor.w	r4, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d0eb      	beq.n	8008d96 <__sflush_r+0xc2>
 8008dbe:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8008dc2:	6929      	ldr	r1, [r5, #16]
 8008dc4:	6029      	str	r1, [r5, #0]
 8008dc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dca:	04d9      	lsls	r1, r3, #19
 8008dcc:	606c      	str	r4, [r5, #4]
 8008dce:	81ab      	strh	r3, [r5, #12]
 8008dd0:	d5b7      	bpl.n	8008d42 <__sflush_r+0x6e>
 8008dd2:	2a00      	cmp	r2, #0
 8008dd4:	d1b5      	bne.n	8008d42 <__sflush_r+0x6e>
 8008dd6:	6528      	str	r0, [r5, #80]	; 0x50
 8008dd8:	e7b3      	b.n	8008d42 <__sflush_r+0x6e>
 8008dda:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8008ddc:	2a00      	cmp	r2, #0
 8008dde:	dc88      	bgt.n	8008cf2 <__sflush_r+0x1e>
 8008de0:	e7d6      	b.n	8008d90 <__sflush_r+0xbc>
 8008de2:	2301      	movs	r3, #1
 8008de4:	69e9      	ldr	r1, [r5, #28]
 8008de6:	4640      	mov	r0, r8
 8008de8:	47a0      	blx	r4
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	4602      	mov	r2, r0
 8008dee:	d002      	beq.n	8008df6 <__sflush_r+0x122>
 8008df0:	89ab      	ldrh	r3, [r5, #12]
 8008df2:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8008df4:	e78c      	b.n	8008d10 <__sflush_r+0x3c>
 8008df6:	f8d8 3000 	ldr.w	r3, [r8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0f8      	beq.n	8008df0 <__sflush_r+0x11c>
 8008dfe:	2b1d      	cmp	r3, #29
 8008e00:	d001      	beq.n	8008e06 <__sflush_r+0x132>
 8008e02:	2b16      	cmp	r3, #22
 8008e04:	d102      	bne.n	8008e0c <__sflush_r+0x138>
 8008e06:	f8c8 6000 	str.w	r6, [r8]
 8008e0a:	e7c1      	b.n	8008d90 <__sflush_r+0xbc>
 8008e0c:	89ab      	ldrh	r3, [r5, #12]
 8008e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e12:	81ab      	strh	r3, [r5, #12]
 8008e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e18:	20400001 	.word	0x20400001

08008e1c <_fflush_r>:
 8008e1c:	b510      	push	{r4, lr}
 8008e1e:	4604      	mov	r4, r0
 8008e20:	b082      	sub	sp, #8
 8008e22:	b108      	cbz	r0, 8008e28 <_fflush_r+0xc>
 8008e24:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008e26:	b153      	cbz	r3, 8008e3e <_fflush_r+0x22>
 8008e28:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8008e2c:	b908      	cbnz	r0, 8008e32 <_fflush_r+0x16>
 8008e2e:	b002      	add	sp, #8
 8008e30:	bd10      	pop	{r4, pc}
 8008e32:	4620      	mov	r0, r4
 8008e34:	b002      	add	sp, #8
 8008e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e3a:	f7ff bf4b 	b.w	8008cd4 <__sflush_r>
 8008e3e:	9101      	str	r1, [sp, #4]
 8008e40:	f000 f880 	bl	8008f44 <__sinit>
 8008e44:	9901      	ldr	r1, [sp, #4]
 8008e46:	e7ef      	b.n	8008e28 <_fflush_r+0xc>

08008e48 <_cleanup_r>:
 8008e48:	4901      	ldr	r1, [pc, #4]	; (8008e50 <_cleanup_r+0x8>)
 8008e4a:	f000 bb3d 	b.w	80094c8 <_fwalk_reent>
 8008e4e:	bf00      	nop
 8008e50:	0800b471 	.word	0x0800b471

08008e54 <__sinit.part.1>:
 8008e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	4b35      	ldr	r3, [pc, #212]	; (8008f30 <__sinit.part.1+0xdc>)
 8008e5a:	6845      	ldr	r5, [r0, #4]
 8008e5c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8008e5e:	2400      	movs	r4, #0
 8008e60:	4607      	mov	r7, r0
 8008e62:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 8008e66:	2304      	movs	r3, #4
 8008e68:	2103      	movs	r1, #3
 8008e6a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
 8008e6e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
 8008e72:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8008e76:	b083      	sub	sp, #12
 8008e78:	602c      	str	r4, [r5, #0]
 8008e7a:	606c      	str	r4, [r5, #4]
 8008e7c:	60ac      	str	r4, [r5, #8]
 8008e7e:	666c      	str	r4, [r5, #100]	; 0x64
 8008e80:	81ec      	strh	r4, [r5, #14]
 8008e82:	612c      	str	r4, [r5, #16]
 8008e84:	616c      	str	r4, [r5, #20]
 8008e86:	61ac      	str	r4, [r5, #24]
 8008e88:	81ab      	strh	r3, [r5, #12]
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8008e90:	2208      	movs	r2, #8
 8008e92:	f7fa fe45 	bl	8003b20 <memset>
 8008e96:	68be      	ldr	r6, [r7, #8]
 8008e98:	f8df b098 	ldr.w	fp, [pc, #152]	; 8008f34 <__sinit.part.1+0xe0>
 8008e9c:	f8df a098 	ldr.w	sl, [pc, #152]	; 8008f38 <__sinit.part.1+0xe4>
 8008ea0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8008f3c <__sinit.part.1+0xe8>
 8008ea4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008f40 <__sinit.part.1+0xec>
 8008ea8:	f8c5 b020 	str.w	fp, [r5, #32]
 8008eac:	2301      	movs	r3, #1
 8008eae:	2209      	movs	r2, #9
 8008eb0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8008eb4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8008eb8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8008ebc:	61ed      	str	r5, [r5, #28]
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	81f3      	strh	r3, [r6, #14]
 8008ec2:	81b2      	strh	r2, [r6, #12]
 8008ec4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8008ec8:	6034      	str	r4, [r6, #0]
 8008eca:	6074      	str	r4, [r6, #4]
 8008ecc:	60b4      	str	r4, [r6, #8]
 8008ece:	6674      	str	r4, [r6, #100]	; 0x64
 8008ed0:	6134      	str	r4, [r6, #16]
 8008ed2:	6174      	str	r4, [r6, #20]
 8008ed4:	61b4      	str	r4, [r6, #24]
 8008ed6:	2208      	movs	r2, #8
 8008ed8:	9301      	str	r3, [sp, #4]
 8008eda:	f7fa fe21 	bl	8003b20 <memset>
 8008ede:	68fd      	ldr	r5, [r7, #12]
 8008ee0:	61f6      	str	r6, [r6, #28]
 8008ee2:	2012      	movs	r0, #18
 8008ee4:	2202      	movs	r2, #2
 8008ee6:	f8c6 b020 	str.w	fp, [r6, #32]
 8008eea:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8008eee:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8008ef2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	81a8      	strh	r0, [r5, #12]
 8008efa:	81ea      	strh	r2, [r5, #14]
 8008efc:	602c      	str	r4, [r5, #0]
 8008efe:	606c      	str	r4, [r5, #4]
 8008f00:	60ac      	str	r4, [r5, #8]
 8008f02:	666c      	str	r4, [r5, #100]	; 0x64
 8008f04:	612c      	str	r4, [r5, #16]
 8008f06:	616c      	str	r4, [r5, #20]
 8008f08:	61ac      	str	r4, [r5, #24]
 8008f0a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8008f0e:	2208      	movs	r2, #8
 8008f10:	f7fa fe06 	bl	8003b20 <memset>
 8008f14:	9b01      	ldr	r3, [sp, #4]
 8008f16:	61ed      	str	r5, [r5, #28]
 8008f18:	f8c5 b020 	str.w	fp, [r5, #32]
 8008f1c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8008f20:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8008f24:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8008f28:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f2a:	b003      	add	sp, #12
 8008f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f30:	08008e49 	.word	0x08008e49
 8008f34:	0800b191 	.word	0x0800b191
 8008f38:	0800b1b5 	.word	0x0800b1b5
 8008f3c:	0800b1f1 	.word	0x0800b1f1
 8008f40:	0800b211 	.word	0x0800b211

08008f44 <__sinit>:
 8008f44:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008f46:	b103      	cbz	r3, 8008f4a <__sinit+0x6>
 8008f48:	4770      	bx	lr
 8008f4a:	f7ff bf83 	b.w	8008e54 <__sinit.part.1>
 8008f4e:	bf00      	nop

08008f50 <__sfp_lock_acquire>:
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop

08008f54 <__sfp_lock_release>:
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop

08008f58 <_malloc_trim_r>:
 8008f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5a:	4f23      	ldr	r7, [pc, #140]	; (8008fe8 <_malloc_trim_r+0x90>)
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	4606      	mov	r6, r0
 8008f60:	f001 faaa 	bl	800a4b8 <__malloc_lock>
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	685d      	ldr	r5, [r3, #4]
 8008f68:	f025 0503 	bic.w	r5, r5, #3
 8008f6c:	1b29      	subs	r1, r5, r4
 8008f6e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8008f72:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8008f76:	f021 010f 	bic.w	r1, r1, #15
 8008f7a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8008f7e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8008f82:	db07      	blt.n	8008f94 <_malloc_trim_r+0x3c>
 8008f84:	2100      	movs	r1, #0
 8008f86:	4630      	mov	r0, r6
 8008f88:	f002 f8f0 	bl	800b16c <_sbrk_r>
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	442b      	add	r3, r5
 8008f90:	4298      	cmp	r0, r3
 8008f92:	d004      	beq.n	8008f9e <_malloc_trim_r+0x46>
 8008f94:	4630      	mov	r0, r6
 8008f96:	f001 fa91 	bl	800a4bc <__malloc_unlock>
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f9e:	4261      	negs	r1, r4
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f002 f8e3 	bl	800b16c <_sbrk_r>
 8008fa6:	3001      	adds	r0, #1
 8008fa8:	d00d      	beq.n	8008fc6 <_malloc_trim_r+0x6e>
 8008faa:	4b10      	ldr	r3, [pc, #64]	; (8008fec <_malloc_trim_r+0x94>)
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	6819      	ldr	r1, [r3, #0]
 8008fb0:	1b2d      	subs	r5, r5, r4
 8008fb2:	f045 0501 	orr.w	r5, r5, #1
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	1b09      	subs	r1, r1, r4
 8008fba:	6055      	str	r5, [r2, #4]
 8008fbc:	6019      	str	r1, [r3, #0]
 8008fbe:	f001 fa7d 	bl	800a4bc <__malloc_unlock>
 8008fc2:	2001      	movs	r0, #1
 8008fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f002 f8cf 	bl	800b16c <_sbrk_r>
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	1a83      	subs	r3, r0, r2
 8008fd2:	2b0f      	cmp	r3, #15
 8008fd4:	ddde      	ble.n	8008f94 <_malloc_trim_r+0x3c>
 8008fd6:	4c06      	ldr	r4, [pc, #24]	; (8008ff0 <_malloc_trim_r+0x98>)
 8008fd8:	4904      	ldr	r1, [pc, #16]	; (8008fec <_malloc_trim_r+0x94>)
 8008fda:	6824      	ldr	r4, [r4, #0]
 8008fdc:	f043 0301 	orr.w	r3, r3, #1
 8008fe0:	1b00      	subs	r0, r0, r4
 8008fe2:	6053      	str	r3, [r2, #4]
 8008fe4:	6008      	str	r0, [r1, #0]
 8008fe6:	e7d5      	b.n	8008f94 <_malloc_trim_r+0x3c>
 8008fe8:	200005d8 	.word	0x200005d8
 8008fec:	20000a58 	.word	0x20000a58
 8008ff0:	200009e4 	.word	0x200009e4

08008ff4 <_free_r>:
 8008ff4:	2900      	cmp	r1, #0
 8008ff6:	d045      	beq.n	8009084 <_free_r+0x90>
 8008ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffc:	460d      	mov	r5, r1
 8008ffe:	4680      	mov	r8, r0
 8009000:	f001 fa5a 	bl	800a4b8 <__malloc_lock>
 8009004:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8009008:	496a      	ldr	r1, [pc, #424]	; (80091b4 <_free_r+0x1c0>)
 800900a:	f027 0301 	bic.w	r3, r7, #1
 800900e:	f1a5 0408 	sub.w	r4, r5, #8
 8009012:	18e2      	adds	r2, r4, r3
 8009014:	688e      	ldr	r6, [r1, #8]
 8009016:	6850      	ldr	r0, [r2, #4]
 8009018:	42b2      	cmp	r2, r6
 800901a:	f020 0003 	bic.w	r0, r0, #3
 800901e:	d062      	beq.n	80090e6 <_free_r+0xf2>
 8009020:	07fe      	lsls	r6, r7, #31
 8009022:	6050      	str	r0, [r2, #4]
 8009024:	d40b      	bmi.n	800903e <_free_r+0x4a>
 8009026:	f855 7c08 	ldr.w	r7, [r5, #-8]
 800902a:	1be4      	subs	r4, r4, r7
 800902c:	f101 0e08 	add.w	lr, r1, #8
 8009030:	68a5      	ldr	r5, [r4, #8]
 8009032:	4575      	cmp	r5, lr
 8009034:	443b      	add	r3, r7
 8009036:	d06f      	beq.n	8009118 <_free_r+0x124>
 8009038:	68e7      	ldr	r7, [r4, #12]
 800903a:	60ef      	str	r7, [r5, #12]
 800903c:	60bd      	str	r5, [r7, #8]
 800903e:	1815      	adds	r5, r2, r0
 8009040:	686d      	ldr	r5, [r5, #4]
 8009042:	07ed      	lsls	r5, r5, #31
 8009044:	d542      	bpl.n	80090cc <_free_r+0xd8>
 8009046:	f043 0201 	orr.w	r2, r3, #1
 800904a:	6062      	str	r2, [r4, #4]
 800904c:	50e3      	str	r3, [r4, r3]
 800904e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009052:	d218      	bcs.n	8009086 <_free_r+0x92>
 8009054:	08db      	lsrs	r3, r3, #3
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	684d      	ldr	r5, [r1, #4]
 800905a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
 800905e:	60a7      	str	r7, [r4, #8]
 8009060:	2001      	movs	r0, #1
 8009062:	109b      	asrs	r3, r3, #2
 8009064:	fa00 f303 	lsl.w	r3, r0, r3
 8009068:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
 800906c:	431d      	orrs	r5, r3
 800906e:	3808      	subs	r0, #8
 8009070:	60e0      	str	r0, [r4, #12]
 8009072:	604d      	str	r5, [r1, #4]
 8009074:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
 8009078:	60fc      	str	r4, [r7, #12]
 800907a:	4640      	mov	r0, r8
 800907c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009080:	f001 ba1c 	b.w	800a4bc <__malloc_unlock>
 8009084:	4770      	bx	lr
 8009086:	0a5a      	lsrs	r2, r3, #9
 8009088:	2a04      	cmp	r2, #4
 800908a:	d853      	bhi.n	8009134 <_free_r+0x140>
 800908c:	099a      	lsrs	r2, r3, #6
 800908e:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8009092:	007f      	lsls	r7, r7, #1
 8009094:	f102 0538 	add.w	r5, r2, #56	; 0x38
 8009098:	eb01 0087 	add.w	r0, r1, r7, lsl #2
 800909c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
 80090a0:	4944      	ldr	r1, [pc, #272]	; (80091b4 <_free_r+0x1c0>)
 80090a2:	3808      	subs	r0, #8
 80090a4:	4290      	cmp	r0, r2
 80090a6:	d04d      	beq.n	8009144 <_free_r+0x150>
 80090a8:	6851      	ldr	r1, [r2, #4]
 80090aa:	f021 0103 	bic.w	r1, r1, #3
 80090ae:	428b      	cmp	r3, r1
 80090b0:	d202      	bcs.n	80090b8 <_free_r+0xc4>
 80090b2:	6892      	ldr	r2, [r2, #8]
 80090b4:	4290      	cmp	r0, r2
 80090b6:	d1f7      	bne.n	80090a8 <_free_r+0xb4>
 80090b8:	68d0      	ldr	r0, [r2, #12]
 80090ba:	60e0      	str	r0, [r4, #12]
 80090bc:	60a2      	str	r2, [r4, #8]
 80090be:	6084      	str	r4, [r0, #8]
 80090c0:	60d4      	str	r4, [r2, #12]
 80090c2:	4640      	mov	r0, r8
 80090c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090c8:	f001 b9f8 	b.w	800a4bc <__malloc_unlock>
 80090cc:	6895      	ldr	r5, [r2, #8]
 80090ce:	4f3a      	ldr	r7, [pc, #232]	; (80091b8 <_free_r+0x1c4>)
 80090d0:	42bd      	cmp	r5, r7
 80090d2:	4403      	add	r3, r0
 80090d4:	d03f      	beq.n	8009156 <_free_r+0x162>
 80090d6:	68d0      	ldr	r0, [r2, #12]
 80090d8:	60e8      	str	r0, [r5, #12]
 80090da:	f043 0201 	orr.w	r2, r3, #1
 80090de:	6085      	str	r5, [r0, #8]
 80090e0:	6062      	str	r2, [r4, #4]
 80090e2:	50e3      	str	r3, [r4, r3]
 80090e4:	e7b3      	b.n	800904e <_free_r+0x5a>
 80090e6:	07ff      	lsls	r7, r7, #31
 80090e8:	4403      	add	r3, r0
 80090ea:	d407      	bmi.n	80090fc <_free_r+0x108>
 80090ec:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80090f0:	1aa4      	subs	r4, r4, r2
 80090f2:	4413      	add	r3, r2
 80090f4:	68a0      	ldr	r0, [r4, #8]
 80090f6:	68e2      	ldr	r2, [r4, #12]
 80090f8:	60c2      	str	r2, [r0, #12]
 80090fa:	6090      	str	r0, [r2, #8]
 80090fc:	4a2f      	ldr	r2, [pc, #188]	; (80091bc <_free_r+0x1c8>)
 80090fe:	6812      	ldr	r2, [r2, #0]
 8009100:	f043 0001 	orr.w	r0, r3, #1
 8009104:	4293      	cmp	r3, r2
 8009106:	6060      	str	r0, [r4, #4]
 8009108:	608c      	str	r4, [r1, #8]
 800910a:	d3b6      	bcc.n	800907a <_free_r+0x86>
 800910c:	4b2c      	ldr	r3, [pc, #176]	; (80091c0 <_free_r+0x1cc>)
 800910e:	4640      	mov	r0, r8
 8009110:	6819      	ldr	r1, [r3, #0]
 8009112:	f7ff ff21 	bl	8008f58 <_malloc_trim_r>
 8009116:	e7b0      	b.n	800907a <_free_r+0x86>
 8009118:	1811      	adds	r1, r2, r0
 800911a:	6849      	ldr	r1, [r1, #4]
 800911c:	07c9      	lsls	r1, r1, #31
 800911e:	d444      	bmi.n	80091aa <_free_r+0x1b6>
 8009120:	6891      	ldr	r1, [r2, #8]
 8009122:	68d2      	ldr	r2, [r2, #12]
 8009124:	60ca      	str	r2, [r1, #12]
 8009126:	4403      	add	r3, r0
 8009128:	f043 0001 	orr.w	r0, r3, #1
 800912c:	6091      	str	r1, [r2, #8]
 800912e:	6060      	str	r0, [r4, #4]
 8009130:	50e3      	str	r3, [r4, r3]
 8009132:	e7a2      	b.n	800907a <_free_r+0x86>
 8009134:	2a14      	cmp	r2, #20
 8009136:	d817      	bhi.n	8009168 <_free_r+0x174>
 8009138:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800913c:	007f      	lsls	r7, r7, #1
 800913e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8009142:	e7a9      	b.n	8009098 <_free_r+0xa4>
 8009144:	10aa      	asrs	r2, r5, #2
 8009146:	684b      	ldr	r3, [r1, #4]
 8009148:	2501      	movs	r5, #1
 800914a:	fa05 f202 	lsl.w	r2, r5, r2
 800914e:	4313      	orrs	r3, r2
 8009150:	604b      	str	r3, [r1, #4]
 8009152:	4602      	mov	r2, r0
 8009154:	e7b1      	b.n	80090ba <_free_r+0xc6>
 8009156:	f043 0201 	orr.w	r2, r3, #1
 800915a:	614c      	str	r4, [r1, #20]
 800915c:	610c      	str	r4, [r1, #16]
 800915e:	60e5      	str	r5, [r4, #12]
 8009160:	60a5      	str	r5, [r4, #8]
 8009162:	6062      	str	r2, [r4, #4]
 8009164:	50e3      	str	r3, [r4, r3]
 8009166:	e788      	b.n	800907a <_free_r+0x86>
 8009168:	2a54      	cmp	r2, #84	; 0x54
 800916a:	d806      	bhi.n	800917a <_free_r+0x186>
 800916c:	0b1a      	lsrs	r2, r3, #12
 800916e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8009172:	007f      	lsls	r7, r7, #1
 8009174:	f102 056e 	add.w	r5, r2, #110	; 0x6e
 8009178:	e78e      	b.n	8009098 <_free_r+0xa4>
 800917a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800917e:	d806      	bhi.n	800918e <_free_r+0x19a>
 8009180:	0bda      	lsrs	r2, r3, #15
 8009182:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8009186:	007f      	lsls	r7, r7, #1
 8009188:	f102 0577 	add.w	r5, r2, #119	; 0x77
 800918c:	e784      	b.n	8009098 <_free_r+0xa4>
 800918e:	f240 5054 	movw	r0, #1364	; 0x554
 8009192:	4282      	cmp	r2, r0
 8009194:	d806      	bhi.n	80091a4 <_free_r+0x1b0>
 8009196:	0c9a      	lsrs	r2, r3, #18
 8009198:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800919c:	007f      	lsls	r7, r7, #1
 800919e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
 80091a2:	e779      	b.n	8009098 <_free_r+0xa4>
 80091a4:	27fe      	movs	r7, #254	; 0xfe
 80091a6:	257e      	movs	r5, #126	; 0x7e
 80091a8:	e776      	b.n	8009098 <_free_r+0xa4>
 80091aa:	f043 0201 	orr.w	r2, r3, #1
 80091ae:	6062      	str	r2, [r4, #4]
 80091b0:	50e3      	str	r3, [r4, r3]
 80091b2:	e762      	b.n	800907a <_free_r+0x86>
 80091b4:	200005d8 	.word	0x200005d8
 80091b8:	200005e0 	.word	0x200005e0
 80091bc:	200009e0 	.word	0x200009e0
 80091c0:	20000a54 	.word	0x20000a54

080091c4 <__sfvwrite_r>:
 80091c4:	6893      	ldr	r3, [r2, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d076      	beq.n	80092b8 <__sfvwrite_r+0xf4>
 80091ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ce:	898b      	ldrh	r3, [r1, #12]
 80091d0:	b085      	sub	sp, #20
 80091d2:	460c      	mov	r4, r1
 80091d4:	0719      	lsls	r1, r3, #28
 80091d6:	9001      	str	r0, [sp, #4]
 80091d8:	4616      	mov	r6, r2
 80091da:	d529      	bpl.n	8009230 <__sfvwrite_r+0x6c>
 80091dc:	6922      	ldr	r2, [r4, #16]
 80091de:	b33a      	cbz	r2, 8009230 <__sfvwrite_r+0x6c>
 80091e0:	f003 0802 	and.w	r8, r3, #2
 80091e4:	fa1f f088 	uxth.w	r0, r8
 80091e8:	6835      	ldr	r5, [r6, #0]
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d02f      	beq.n	800924e <__sfvwrite_r+0x8a>
 80091ee:	f04f 0900 	mov.w	r9, #0
 80091f2:	4fb4      	ldr	r7, [pc, #720]	; (80094c4 <__sfvwrite_r+0x300>)
 80091f4:	46c8      	mov	r8, r9
 80091f6:	46b2      	mov	sl, r6
 80091f8:	45b8      	cmp	r8, r7
 80091fa:	4643      	mov	r3, r8
 80091fc:	464a      	mov	r2, r9
 80091fe:	bf28      	it	cs
 8009200:	463b      	movcs	r3, r7
 8009202:	9801      	ldr	r0, [sp, #4]
 8009204:	f1b8 0f00 	cmp.w	r8, #0
 8009208:	d050      	beq.n	80092ac <__sfvwrite_r+0xe8>
 800920a:	69e1      	ldr	r1, [r4, #28]
 800920c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800920e:	47b0      	blx	r6
 8009210:	2800      	cmp	r0, #0
 8009212:	dd71      	ble.n	80092f8 <__sfvwrite_r+0x134>
 8009214:	f8da 3008 	ldr.w	r3, [sl, #8]
 8009218:	1a1b      	subs	r3, r3, r0
 800921a:	4481      	add	r9, r0
 800921c:	ebc0 0808 	rsb	r8, r0, r8
 8009220:	f8ca 3008 	str.w	r3, [sl, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e7      	bne.n	80091f8 <__sfvwrite_r+0x34>
 8009228:	2000      	movs	r0, #0
 800922a:	b005      	add	sp, #20
 800922c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009230:	4621      	mov	r1, r4
 8009232:	9801      	ldr	r0, [sp, #4]
 8009234:	f7fe fd40 	bl	8007cb8 <__swsetup_r>
 8009238:	2800      	cmp	r0, #0
 800923a:	f040 813a 	bne.w	80094b2 <__sfvwrite_r+0x2ee>
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	6835      	ldr	r5, [r6, #0]
 8009242:	f003 0802 	and.w	r8, r3, #2
 8009246:	fa1f f088 	uxth.w	r0, r8
 800924a:	2800      	cmp	r0, #0
 800924c:	d1cf      	bne.n	80091ee <__sfvwrite_r+0x2a>
 800924e:	f013 0901 	ands.w	r9, r3, #1
 8009252:	d15b      	bne.n	800930c <__sfvwrite_r+0x148>
 8009254:	464f      	mov	r7, r9
 8009256:	9602      	str	r6, [sp, #8]
 8009258:	b31f      	cbz	r7, 80092a2 <__sfvwrite_r+0xde>
 800925a:	059a      	lsls	r2, r3, #22
 800925c:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8009260:	d52c      	bpl.n	80092bc <__sfvwrite_r+0xf8>
 8009262:	4547      	cmp	r7, r8
 8009264:	46c2      	mov	sl, r8
 8009266:	f0c0 80a4 	bcc.w	80093b2 <__sfvwrite_r+0x1ee>
 800926a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800926e:	f040 80b1 	bne.w	80093d4 <__sfvwrite_r+0x210>
 8009272:	6820      	ldr	r0, [r4, #0]
 8009274:	4652      	mov	r2, sl
 8009276:	4649      	mov	r1, r9
 8009278:	f001 f8ba 	bl	800a3f0 <memmove>
 800927c:	68a0      	ldr	r0, [r4, #8]
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	ebc8 0000 	rsb	r0, r8, r0
 8009284:	4453      	add	r3, sl
 8009286:	60a0      	str	r0, [r4, #8]
 8009288:	6023      	str	r3, [r4, #0]
 800928a:	4638      	mov	r0, r7
 800928c:	9a02      	ldr	r2, [sp, #8]
 800928e:	6893      	ldr	r3, [r2, #8]
 8009290:	1a1b      	subs	r3, r3, r0
 8009292:	4481      	add	r9, r0
 8009294:	1a3f      	subs	r7, r7, r0
 8009296:	6093      	str	r3, [r2, #8]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0c5      	beq.n	8009228 <__sfvwrite_r+0x64>
 800929c:	89a3      	ldrh	r3, [r4, #12]
 800929e:	2f00      	cmp	r7, #0
 80092a0:	d1db      	bne.n	800925a <__sfvwrite_r+0x96>
 80092a2:	f8d5 9000 	ldr.w	r9, [r5]
 80092a6:	686f      	ldr	r7, [r5, #4]
 80092a8:	3508      	adds	r5, #8
 80092aa:	e7d5      	b.n	8009258 <__sfvwrite_r+0x94>
 80092ac:	f8d5 9000 	ldr.w	r9, [r5]
 80092b0:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80092b4:	3508      	adds	r5, #8
 80092b6:	e79f      	b.n	80091f8 <__sfvwrite_r+0x34>
 80092b8:	2000      	movs	r0, #0
 80092ba:	4770      	bx	lr
 80092bc:	6820      	ldr	r0, [r4, #0]
 80092be:	6923      	ldr	r3, [r4, #16]
 80092c0:	4298      	cmp	r0, r3
 80092c2:	d803      	bhi.n	80092cc <__sfvwrite_r+0x108>
 80092c4:	6961      	ldr	r1, [r4, #20]
 80092c6:	428f      	cmp	r7, r1
 80092c8:	f080 80b7 	bcs.w	800943a <__sfvwrite_r+0x276>
 80092cc:	45b8      	cmp	r8, r7
 80092ce:	bf28      	it	cs
 80092d0:	46b8      	movcs	r8, r7
 80092d2:	4642      	mov	r2, r8
 80092d4:	4649      	mov	r1, r9
 80092d6:	f001 f88b 	bl	800a3f0 <memmove>
 80092da:	68a3      	ldr	r3, [r4, #8]
 80092dc:	6822      	ldr	r2, [r4, #0]
 80092de:	ebc8 0303 	rsb	r3, r8, r3
 80092e2:	4442      	add	r2, r8
 80092e4:	60a3      	str	r3, [r4, #8]
 80092e6:	6022      	str	r2, [r4, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d149      	bne.n	8009380 <__sfvwrite_r+0x1bc>
 80092ec:	4621      	mov	r1, r4
 80092ee:	9801      	ldr	r0, [sp, #4]
 80092f0:	f7ff fd94 	bl	8008e1c <_fflush_r>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	d043      	beq.n	8009380 <__sfvwrite_r+0x1bc>
 80092f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009300:	f04f 30ff 	mov.w	r0, #4294967295
 8009304:	81a3      	strh	r3, [r4, #12]
 8009306:	b005      	add	sp, #20
 8009308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930c:	4680      	mov	r8, r0
 800930e:	9002      	str	r0, [sp, #8]
 8009310:	4682      	mov	sl, r0
 8009312:	4681      	mov	r9, r0
 8009314:	f1b9 0f00 	cmp.w	r9, #0
 8009318:	d02a      	beq.n	8009370 <__sfvwrite_r+0x1ac>
 800931a:	9b02      	ldr	r3, [sp, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d04c      	beq.n	80093ba <__sfvwrite_r+0x1f6>
 8009320:	6820      	ldr	r0, [r4, #0]
 8009322:	6923      	ldr	r3, [r4, #16]
 8009324:	6962      	ldr	r2, [r4, #20]
 8009326:	45c8      	cmp	r8, r9
 8009328:	46c3      	mov	fp, r8
 800932a:	bf28      	it	cs
 800932c:	46cb      	movcs	fp, r9
 800932e:	4298      	cmp	r0, r3
 8009330:	465f      	mov	r7, fp
 8009332:	d904      	bls.n	800933e <__sfvwrite_r+0x17a>
 8009334:	68a3      	ldr	r3, [r4, #8]
 8009336:	4413      	add	r3, r2
 8009338:	459b      	cmp	fp, r3
 800933a:	f300 8090 	bgt.w	800945e <__sfvwrite_r+0x29a>
 800933e:	4593      	cmp	fp, r2
 8009340:	db20      	blt.n	8009384 <__sfvwrite_r+0x1c0>
 8009342:	4613      	mov	r3, r2
 8009344:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8009346:	69e1      	ldr	r1, [r4, #28]
 8009348:	9801      	ldr	r0, [sp, #4]
 800934a:	4652      	mov	r2, sl
 800934c:	47b8      	blx	r7
 800934e:	1e07      	subs	r7, r0, #0
 8009350:	ddd2      	ble.n	80092f8 <__sfvwrite_r+0x134>
 8009352:	ebb8 0807 	subs.w	r8, r8, r7
 8009356:	d023      	beq.n	80093a0 <__sfvwrite_r+0x1dc>
 8009358:	68b3      	ldr	r3, [r6, #8]
 800935a:	1bdb      	subs	r3, r3, r7
 800935c:	44ba      	add	sl, r7
 800935e:	ebc7 0909 	rsb	r9, r7, r9
 8009362:	60b3      	str	r3, [r6, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f43f af5f 	beq.w	8009228 <__sfvwrite_r+0x64>
 800936a:	f1b9 0f00 	cmp.w	r9, #0
 800936e:	d1d4      	bne.n	800931a <__sfvwrite_r+0x156>
 8009370:	2300      	movs	r3, #0
 8009372:	f8d5 a000 	ldr.w	sl, [r5]
 8009376:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800937a:	9302      	str	r3, [sp, #8]
 800937c:	3508      	adds	r5, #8
 800937e:	e7c9      	b.n	8009314 <__sfvwrite_r+0x150>
 8009380:	4640      	mov	r0, r8
 8009382:	e783      	b.n	800928c <__sfvwrite_r+0xc8>
 8009384:	465a      	mov	r2, fp
 8009386:	4651      	mov	r1, sl
 8009388:	f001 f832 	bl	800a3f0 <memmove>
 800938c:	68a2      	ldr	r2, [r4, #8]
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	ebcb 0202 	rsb	r2, fp, r2
 8009394:	445b      	add	r3, fp
 8009396:	ebb8 0807 	subs.w	r8, r8, r7
 800939a:	60a2      	str	r2, [r4, #8]
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	d1db      	bne.n	8009358 <__sfvwrite_r+0x194>
 80093a0:	4621      	mov	r1, r4
 80093a2:	9801      	ldr	r0, [sp, #4]
 80093a4:	f7ff fd3a 	bl	8008e1c <_fflush_r>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d1a5      	bne.n	80092f8 <__sfvwrite_r+0x134>
 80093ac:	f8cd 8008 	str.w	r8, [sp, #8]
 80093b0:	e7d2      	b.n	8009358 <__sfvwrite_r+0x194>
 80093b2:	6820      	ldr	r0, [r4, #0]
 80093b4:	46b8      	mov	r8, r7
 80093b6:	46ba      	mov	sl, r7
 80093b8:	e75c      	b.n	8009274 <__sfvwrite_r+0xb0>
 80093ba:	464a      	mov	r2, r9
 80093bc:	210a      	movs	r1, #10
 80093be:	4650      	mov	r0, sl
 80093c0:	f000 ffc6 	bl	800a350 <memchr>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d06f      	beq.n	80094a8 <__sfvwrite_r+0x2e4>
 80093c8:	3001      	adds	r0, #1
 80093ca:	2301      	movs	r3, #1
 80093cc:	ebca 0800 	rsb	r8, sl, r0
 80093d0:	9302      	str	r3, [sp, #8]
 80093d2:	e7a5      	b.n	8009320 <__sfvwrite_r+0x15c>
 80093d4:	6962      	ldr	r2, [r4, #20]
 80093d6:	6820      	ldr	r0, [r4, #0]
 80093d8:	6921      	ldr	r1, [r4, #16]
 80093da:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 80093de:	ebc1 0a00 	rsb	sl, r1, r0
 80093e2:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 80093e6:	f10a 0001 	add.w	r0, sl, #1
 80093ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80093ee:	4438      	add	r0, r7
 80093f0:	4540      	cmp	r0, r8
 80093f2:	4642      	mov	r2, r8
 80093f4:	bf84      	itt	hi
 80093f6:	4680      	movhi	r8, r0
 80093f8:	4642      	movhi	r2, r8
 80093fa:	055b      	lsls	r3, r3, #21
 80093fc:	d542      	bpl.n	8009484 <__sfvwrite_r+0x2c0>
 80093fe:	4611      	mov	r1, r2
 8009400:	9801      	ldr	r0, [sp, #4]
 8009402:	f000 fcd1 	bl	8009da8 <_malloc_r>
 8009406:	4683      	mov	fp, r0
 8009408:	2800      	cmp	r0, #0
 800940a:	d055      	beq.n	80094b8 <__sfvwrite_r+0x2f4>
 800940c:	4652      	mov	r2, sl
 800940e:	6921      	ldr	r1, [r4, #16]
 8009410:	f7fa faec 	bl	80039ec <memcpy>
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800941a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	ebca 0308 	rsb	r3, sl, r8
 8009424:	eb0b 000a 	add.w	r0, fp, sl
 8009428:	f8c4 8014 	str.w	r8, [r4, #20]
 800942c:	f8c4 b010 	str.w	fp, [r4, #16]
 8009430:	6020      	str	r0, [r4, #0]
 8009432:	60a3      	str	r3, [r4, #8]
 8009434:	46b8      	mov	r8, r7
 8009436:	46ba      	mov	sl, r7
 8009438:	e71c      	b.n	8009274 <__sfvwrite_r+0xb0>
 800943a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800943e:	42bb      	cmp	r3, r7
 8009440:	bf28      	it	cs
 8009442:	463b      	movcs	r3, r7
 8009444:	464a      	mov	r2, r9
 8009446:	fb93 f3f1 	sdiv	r3, r3, r1
 800944a:	9801      	ldr	r0, [sp, #4]
 800944c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800944e:	fb01 f303 	mul.w	r3, r1, r3
 8009452:	69e1      	ldr	r1, [r4, #28]
 8009454:	47b0      	blx	r6
 8009456:	2800      	cmp	r0, #0
 8009458:	f73f af18 	bgt.w	800928c <__sfvwrite_r+0xc8>
 800945c:	e74c      	b.n	80092f8 <__sfvwrite_r+0x134>
 800945e:	461a      	mov	r2, r3
 8009460:	4651      	mov	r1, sl
 8009462:	9303      	str	r3, [sp, #12]
 8009464:	f000 ffc4 	bl	800a3f0 <memmove>
 8009468:	6822      	ldr	r2, [r4, #0]
 800946a:	9b03      	ldr	r3, [sp, #12]
 800946c:	9801      	ldr	r0, [sp, #4]
 800946e:	441a      	add	r2, r3
 8009470:	6022      	str	r2, [r4, #0]
 8009472:	4621      	mov	r1, r4
 8009474:	f7ff fcd2 	bl	8008e1c <_fflush_r>
 8009478:	9b03      	ldr	r3, [sp, #12]
 800947a:	2800      	cmp	r0, #0
 800947c:	f47f af3c 	bne.w	80092f8 <__sfvwrite_r+0x134>
 8009480:	461f      	mov	r7, r3
 8009482:	e766      	b.n	8009352 <__sfvwrite_r+0x18e>
 8009484:	9801      	ldr	r0, [sp, #4]
 8009486:	f001 fc81 	bl	800ad8c <_realloc_r>
 800948a:	4683      	mov	fp, r0
 800948c:	2800      	cmp	r0, #0
 800948e:	d1c7      	bne.n	8009420 <__sfvwrite_r+0x25c>
 8009490:	9d01      	ldr	r5, [sp, #4]
 8009492:	6921      	ldr	r1, [r4, #16]
 8009494:	4628      	mov	r0, r5
 8009496:	f7ff fdad 	bl	8008ff4 <_free_r>
 800949a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800949e:	220c      	movs	r2, #12
 80094a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094a4:	602a      	str	r2, [r5, #0]
 80094a6:	e729      	b.n	80092fc <__sfvwrite_r+0x138>
 80094a8:	2301      	movs	r3, #1
 80094aa:	f109 0801 	add.w	r8, r9, #1
 80094ae:	9302      	str	r3, [sp, #8]
 80094b0:	e736      	b.n	8009320 <__sfvwrite_r+0x15c>
 80094b2:	f04f 30ff 	mov.w	r0, #4294967295
 80094b6:	e6b8      	b.n	800922a <__sfvwrite_r+0x66>
 80094b8:	9a01      	ldr	r2, [sp, #4]
 80094ba:	230c      	movs	r3, #12
 80094bc:	6013      	str	r3, [r2, #0]
 80094be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094c2:	e71b      	b.n	80092fc <__sfvwrite_r+0x138>
 80094c4:	7ffffc00 	.word	0x7ffffc00

080094c8 <_fwalk_reent>:
 80094c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094cc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 80094d0:	d01f      	beq.n	8009512 <_fwalk_reent+0x4a>
 80094d2:	4688      	mov	r8, r1
 80094d4:	4606      	mov	r6, r0
 80094d6:	f04f 0900 	mov.w	r9, #0
 80094da:	687d      	ldr	r5, [r7, #4]
 80094dc:	68bc      	ldr	r4, [r7, #8]
 80094de:	3d01      	subs	r5, #1
 80094e0:	d411      	bmi.n	8009506 <_fwalk_reent+0x3e>
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	f105 35ff 	add.w	r5, r5, #4294967295
 80094ea:	d908      	bls.n	80094fe <_fwalk_reent+0x36>
 80094ec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80094f0:	3301      	adds	r3, #1
 80094f2:	4621      	mov	r1, r4
 80094f4:	4630      	mov	r0, r6
 80094f6:	d002      	beq.n	80094fe <_fwalk_reent+0x36>
 80094f8:	47c0      	blx	r8
 80094fa:	ea49 0900 	orr.w	r9, r9, r0
 80094fe:	1c6b      	adds	r3, r5, #1
 8009500:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8009504:	d1ed      	bne.n	80094e2 <_fwalk_reent+0x1a>
 8009506:	683f      	ldr	r7, [r7, #0]
 8009508:	2f00      	cmp	r7, #0
 800950a:	d1e6      	bne.n	80094da <_fwalk_reent+0x12>
 800950c:	4648      	mov	r0, r9
 800950e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009512:	46b9      	mov	r9, r7
 8009514:	4648      	mov	r0, r9
 8009516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800951a:	bf00      	nop

0800951c <rshift>:
 800951c:	6902      	ldr	r2, [r0, #16]
 800951e:	114b      	asrs	r3, r1, #5
 8009520:	4293      	cmp	r3, r2
 8009522:	da2e      	bge.n	8009582 <rshift+0x66>
 8009524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009526:	f011 011f 	ands.w	r1, r1, #31
 800952a:	f100 0614 	add.w	r6, r0, #20
 800952e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009532:	eb06 0e83 	add.w	lr, r6, r3, lsl #2
 8009536:	d029      	beq.n	800958c <rshift+0x70>
 8009538:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800953c:	f10e 0504 	add.w	r5, lr, #4
 8009540:	42aa      	cmp	r2, r5
 8009542:	fa23 f401 	lsr.w	r4, r3, r1
 8009546:	f1c1 0c20 	rsb	ip, r1, #32
 800954a:	d939      	bls.n	80095c0 <rshift+0xa4>
 800954c:	f100 0710 	add.w	r7, r0, #16
 8009550:	682b      	ldr	r3, [r5, #0]
 8009552:	fa03 f30c 	lsl.w	r3, r3, ip
 8009556:	4323      	orrs	r3, r4
 8009558:	f847 3f04 	str.w	r3, [r7, #4]!
 800955c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009560:	42aa      	cmp	r2, r5
 8009562:	fa23 f401 	lsr.w	r4, r3, r1
 8009566:	d8f3      	bhi.n	8009550 <rshift+0x34>
 8009568:	ebce 0202 	rsb	r2, lr, r2
 800956c:	3a05      	subs	r2, #5
 800956e:	f022 0203 	bic.w	r2, r2, #3
 8009572:	3204      	adds	r2, #4
 8009574:	4432      	add	r2, r6
 8009576:	6014      	str	r4, [r2, #0]
 8009578:	b104      	cbz	r4, 800957c <rshift+0x60>
 800957a:	3204      	adds	r2, #4
 800957c:	1b93      	subs	r3, r2, r6
 800957e:	109b      	asrs	r3, r3, #2
 8009580:	e016      	b.n	80095b0 <rshift+0x94>
 8009582:	2300      	movs	r3, #0
 8009584:	6103      	str	r3, [r0, #16]
 8009586:	2300      	movs	r3, #0
 8009588:	6143      	str	r3, [r0, #20]
 800958a:	4770      	bx	lr
 800958c:	4572      	cmp	r2, lr
 800958e:	d912      	bls.n	80095b6 <rshift+0x9a>
 8009590:	f100 0410 	add.w	r4, r0, #16
 8009594:	4671      	mov	r1, lr
 8009596:	f851 5b04 	ldr.w	r5, [r1], #4
 800959a:	f844 5f04 	str.w	r5, [r4, #4]!
 800959e:	428a      	cmp	r2, r1
 80095a0:	d8f9      	bhi.n	8009596 <rshift+0x7a>
 80095a2:	ea6f 030e 	mvn.w	r3, lr
 80095a6:	4413      	add	r3, r2
 80095a8:	f023 0303 	bic.w	r3, r3, #3
 80095ac:	3304      	adds	r3, #4
 80095ae:	109b      	asrs	r3, r3, #2
 80095b0:	6103      	str	r3, [r0, #16]
 80095b2:	b113      	cbz	r3, 80095ba <rshift+0x9e>
 80095b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b6:	2300      	movs	r3, #0
 80095b8:	6103      	str	r3, [r0, #16]
 80095ba:	2300      	movs	r3, #0
 80095bc:	6143      	str	r3, [r0, #20]
 80095be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095c0:	4632      	mov	r2, r6
 80095c2:	e7d8      	b.n	8009576 <rshift+0x5a>

080095c4 <__gethex>:
 80095c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c8:	b08b      	sub	sp, #44	; 0x2c
 80095ca:	4689      	mov	r9, r1
 80095cc:	9005      	str	r0, [sp, #20]
 80095ce:	9816      	ldr	r0, [sp, #88]	; 0x58
 80095d0:	9203      	str	r2, [sp, #12]
 80095d2:	9308      	str	r3, [sp, #32]
 80095d4:	f000 fb64 	bl	8009ca0 <__localeconv_l>
 80095d8:	6803      	ldr	r3, [r0, #0]
 80095da:	9302      	str	r3, [sp, #8]
 80095dc:	4618      	mov	r0, r3
 80095de:	461c      	mov	r4, r3
 80095e0:	f7fa fb6e 	bl	8003cc0 <strlen>
 80095e4:	f8d9 3000 	ldr.w	r3, [r9]
 80095e8:	9000      	str	r0, [sp, #0]
 80095ea:	789a      	ldrb	r2, [r3, #2]
 80095ec:	1821      	adds	r1, r4, r0
 80095ee:	2a30      	cmp	r2, #48	; 0x30
 80095f0:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 80095f4:	f040 81a9 	bne.w	800994a <__gethex+0x386>
 80095f8:	3303      	adds	r3, #3
 80095fa:	f04f 0800 	mov.w	r8, #0
 80095fe:	461c      	mov	r4, r3
 8009600:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009604:	2a30      	cmp	r2, #48	; 0x30
 8009606:	f108 0801 	add.w	r8, r8, #1
 800960a:	d0f8      	beq.n	80095fe <__gethex+0x3a>
 800960c:	4eb2      	ldr	r6, [pc, #712]	; (80098d8 <__gethex+0x314>)
 800960e:	5cb3      	ldrb	r3, [r6, r2]
 8009610:	2b00      	cmp	r3, #0
 8009612:	f000 80f0 	beq.w	80097f6 <__gethex+0x232>
 8009616:	7823      	ldrb	r3, [r4, #0]
 8009618:	f04f 0a00 	mov.w	sl, #0
 800961c:	5cf3      	ldrb	r3, [r6, r3]
 800961e:	4655      	mov	r5, sl
 8009620:	4627      	mov	r7, r4
 8009622:	b123      	cbz	r3, 800962e <__gethex+0x6a>
 8009624:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8009628:	5cf3      	ldrb	r3, [r6, r3]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1fa      	bne.n	8009624 <__gethex+0x60>
 800962e:	9a00      	ldr	r2, [sp, #0]
 8009630:	9902      	ldr	r1, [sp, #8]
 8009632:	4638      	mov	r0, r7
 8009634:	f7fa fbb2 	bl	8003d9c <strncmp>
 8009638:	2800      	cmp	r0, #0
 800963a:	f000 8092 	beq.w	8009762 <__gethex+0x19e>
 800963e:	783b      	ldrb	r3, [r7, #0]
 8009640:	2d00      	cmp	r5, #0
 8009642:	f000 8171 	beq.w	8009928 <__gethex+0x364>
 8009646:	1bed      	subs	r5, r5, r7
 8009648:	00aa      	lsls	r2, r5, #2
 800964a:	9201      	str	r2, [sp, #4]
 800964c:	2b50      	cmp	r3, #80	; 0x50
 800964e:	f000 8091 	beq.w	8009774 <__gethex+0x1b0>
 8009652:	2b70      	cmp	r3, #112	; 0x70
 8009654:	f000 808e 	beq.w	8009774 <__gethex+0x1b0>
 8009658:	463d      	mov	r5, r7
 800965a:	f8c9 7000 	str.w	r7, [r9]
 800965e:	f1ba 0f00 	cmp.w	sl, #0
 8009662:	f040 80b7 	bne.w	80097d4 <__gethex+0x210>
 8009666:	1b2b      	subs	r3, r5, r4
 8009668:	3b01      	subs	r3, #1
 800966a:	2b07      	cmp	r3, #7
 800966c:	4651      	mov	r1, sl
 800966e:	dd04      	ble.n	800967a <__gethex+0xb6>
 8009670:	105b      	asrs	r3, r3, #1
 8009672:	2b07      	cmp	r3, #7
 8009674:	f101 0101 	add.w	r1, r1, #1
 8009678:	dcfa      	bgt.n	8009670 <__gethex+0xac>
 800967a:	9805      	ldr	r0, [sp, #20]
 800967c:	f000 ff20 	bl	800a4c0 <_Balloc>
 8009680:	4603      	mov	r3, r0
 8009682:	3314      	adds	r3, #20
 8009684:	42a5      	cmp	r5, r4
 8009686:	9004      	str	r0, [sp, #16]
 8009688:	9307      	str	r3, [sp, #28]
 800968a:	f240 81d3 	bls.w	8009a34 <__gethex+0x470>
 800968e:	4699      	mov	r9, r3
 8009690:	9b00      	ldr	r3, [sp, #0]
 8009692:	f04f 0800 	mov.w	r8, #0
 8009696:	f1c3 0301 	rsb	r3, r3, #1
 800969a:	4647      	mov	r7, r8
 800969c:	9306      	str	r3, [sp, #24]
 800969e:	e00f      	b.n	80096c0 <__gethex+0xfc>
 80096a0:	2f20      	cmp	r7, #32
 80096a2:	f000 809f 	beq.w	80097e4 <__gethex+0x220>
 80096a6:	463a      	mov	r2, r7
 80096a8:	3704      	adds	r7, #4
 80096aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096ae:	5cf3      	ldrb	r3, [r6, r3]
 80096b0:	4655      	mov	r5, sl
 80096b2:	f003 030f 	and.w	r3, r3, #15
 80096b6:	4093      	lsls	r3, r2
 80096b8:	42a5      	cmp	r5, r4
 80096ba:	ea48 0803 	orr.w	r8, r8, r3
 80096be:	d915      	bls.n	80096ec <__gethex+0x128>
 80096c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096c4:	455b      	cmp	r3, fp
 80096c6:	f105 3aff 	add.w	sl, r5, #4294967295
 80096ca:	d1e9      	bne.n	80096a0 <__gethex+0xdc>
 80096cc:	9b06      	ldr	r3, [sp, #24]
 80096ce:	4453      	add	r3, sl
 80096d0:	42a3      	cmp	r3, r4
 80096d2:	d3e5      	bcc.n	80096a0 <__gethex+0xdc>
 80096d4:	4618      	mov	r0, r3
 80096d6:	9a00      	ldr	r2, [sp, #0]
 80096d8:	9902      	ldr	r1, [sp, #8]
 80096da:	9309      	str	r3, [sp, #36]	; 0x24
 80096dc:	f7fa fb5e 	bl	8003d9c <strncmp>
 80096e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e2:	2800      	cmp	r0, #0
 80096e4:	d1dc      	bne.n	80096a0 <__gethex+0xdc>
 80096e6:	461d      	mov	r5, r3
 80096e8:	42a5      	cmp	r5, r4
 80096ea:	d8e9      	bhi.n	80096c0 <__gethex+0xfc>
 80096ec:	f849 8b04 	str.w	r8, [r9], #4
 80096f0:	9b07      	ldr	r3, [sp, #28]
 80096f2:	9a04      	ldr	r2, [sp, #16]
 80096f4:	ebc3 0909 	rsb	r9, r3, r9
 80096f8:	ea4f 03a9 	mov.w	r3, r9, asr #2
 80096fc:	6113      	str	r3, [r2, #16]
 80096fe:	4640      	mov	r0, r8
 8009700:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8009704:	f000 ff98 	bl	800a638 <__hi0bits>
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	681e      	ldr	r6, [r3, #0]
 800970c:	ebc0 0009 	rsb	r0, r0, r9
 8009710:	42b0      	cmp	r0, r6
 8009712:	f300 80e3 	bgt.w	80098dc <__gethex+0x318>
 8009716:	f2c0 8109 	blt.w	800992c <__gethex+0x368>
 800971a:	2700      	movs	r7, #0
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	9a01      	ldr	r2, [sp, #4]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	429a      	cmp	r2, r3
 8009724:	f300 8097 	bgt.w	8009856 <__gethex+0x292>
 8009728:	9803      	ldr	r0, [sp, #12]
 800972a:	9901      	ldr	r1, [sp, #4]
 800972c:	6843      	ldr	r3, [r0, #4]
 800972e:	4299      	cmp	r1, r3
 8009730:	f280 80b5 	bge.w	800989e <__gethex+0x2da>
 8009734:	1a5d      	subs	r5, r3, r1
 8009736:	42ae      	cmp	r6, r5
 8009738:	f300 810f 	bgt.w	800995a <__gethex+0x396>
 800973c:	68c2      	ldr	r2, [r0, #12]
 800973e:	2a02      	cmp	r2, #2
 8009740:	f000 817f 	beq.w	8009a42 <__gethex+0x47e>
 8009744:	2a03      	cmp	r2, #3
 8009746:	f000 815c 	beq.w	8009a02 <__gethex+0x43e>
 800974a:	2a01      	cmp	r2, #1
 800974c:	f000 817d 	beq.w	8009a4a <__gethex+0x486>
 8009750:	9805      	ldr	r0, [sp, #20]
 8009752:	9904      	ldr	r1, [sp, #16]
 8009754:	f000 feda 	bl	800a50c <_Bfree>
 8009758:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800975a:	2300      	movs	r3, #0
 800975c:	6013      	str	r3, [r2, #0]
 800975e:	2050      	movs	r0, #80	; 0x50
 8009760:	e03d      	b.n	80097de <__gethex+0x21a>
 8009762:	2d00      	cmp	r5, #0
 8009764:	f000 8119 	beq.w	800999a <__gethex+0x3d6>
 8009768:	783b      	ldrb	r3, [r7, #0]
 800976a:	e76c      	b.n	8009646 <__gethex+0x82>
 800976c:	2300      	movs	r3, #0
 800976e:	9301      	str	r3, [sp, #4]
 8009770:	f04f 0a01 	mov.w	sl, #1
 8009774:	787b      	ldrb	r3, [r7, #1]
 8009776:	2b2b      	cmp	r3, #43	; 0x2b
 8009778:	f000 80ac 	beq.w	80098d4 <__gethex+0x310>
 800977c:	2b2d      	cmp	r3, #45	; 0x2d
 800977e:	d075      	beq.n	800986c <__gethex+0x2a8>
 8009780:	1c79      	adds	r1, r7, #1
 8009782:	2500      	movs	r5, #0
 8009784:	5cf3      	ldrb	r3, [r6, r3]
 8009786:	4854      	ldr	r0, [pc, #336]	; (80098d8 <__gethex+0x314>)
 8009788:	1e5a      	subs	r2, r3, #1
 800978a:	2a18      	cmp	r2, #24
 800978c:	f63f af64 	bhi.w	8009658 <__gethex+0x94>
 8009790:	784a      	ldrb	r2, [r1, #1]
 8009792:	5c82      	ldrb	r2, [r0, r2]
 8009794:	1e50      	subs	r0, r2, #1
 8009796:	2818      	cmp	r0, #24
 8009798:	f1a3 0310 	sub.w	r3, r3, #16
 800979c:	f101 0101 	add.w	r1, r1, #1
 80097a0:	d80b      	bhi.n	80097ba <__gethex+0x1f6>
 80097a2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80097a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80097aa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80097ae:	5c32      	ldrb	r2, [r6, r0]
 80097b0:	1e50      	subs	r0, r2, #1
 80097b2:	2818      	cmp	r0, #24
 80097b4:	f1a3 0310 	sub.w	r3, r3, #16
 80097b8:	d9f3      	bls.n	80097a2 <__gethex+0x1de>
 80097ba:	b105      	cbz	r5, 80097be <__gethex+0x1fa>
 80097bc:	425b      	negs	r3, r3
 80097be:	9a01      	ldr	r2, [sp, #4]
 80097c0:	463d      	mov	r5, r7
 80097c2:	441a      	add	r2, r3
 80097c4:	460f      	mov	r7, r1
 80097c6:	9201      	str	r2, [sp, #4]
 80097c8:	f8c9 7000 	str.w	r7, [r9]
 80097cc:	f1ba 0f00 	cmp.w	sl, #0
 80097d0:	f43f af49 	beq.w	8009666 <__gethex+0xa2>
 80097d4:	f1b8 0f00 	cmp.w	r8, #0
 80097d8:	bf0c      	ite	eq
 80097da:	2006      	moveq	r0, #6
 80097dc:	2000      	movne	r0, #0
 80097de:	b00b      	add	sp, #44	; 0x2c
 80097e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e4:	f8c9 8000 	str.w	r8, [r9]
 80097e8:	f04f 0800 	mov.w	r8, #0
 80097ec:	f109 0904 	add.w	r9, r9, #4
 80097f0:	4642      	mov	r2, r8
 80097f2:	2704      	movs	r7, #4
 80097f4:	e759      	b.n	80096aa <__gethex+0xe6>
 80097f6:	9d00      	ldr	r5, [sp, #0]
 80097f8:	9902      	ldr	r1, [sp, #8]
 80097fa:	462a      	mov	r2, r5
 80097fc:	4620      	mov	r0, r4
 80097fe:	f7fa facd 	bl	8003d9c <strncmp>
 8009802:	2800      	cmp	r0, #0
 8009804:	d036      	beq.n	8009874 <__gethex+0x2b0>
 8009806:	7823      	ldrb	r3, [r4, #0]
 8009808:	4627      	mov	r7, r4
 800980a:	2b50      	cmp	r3, #80	; 0x50
 800980c:	d0ae      	beq.n	800976c <__gethex+0x1a8>
 800980e:	2b70      	cmp	r3, #112	; 0x70
 8009810:	d0ac      	beq.n	800976c <__gethex+0x1a8>
 8009812:	f8c9 7000 	str.w	r7, [r9]
 8009816:	e7dd      	b.n	80097d4 <__gethex+0x210>
 8009818:	9b04      	ldr	r3, [sp, #16]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	429f      	cmp	r7, r3
 800981e:	f280 8134 	bge.w	8009a8a <__gethex+0x4c6>
 8009822:	463b      	mov	r3, r7
 8009824:	9804      	ldr	r0, [sp, #16]
 8009826:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 800982a:	2101      	movs	r1, #1
 800982c:	3301      	adds	r3, #1
 800982e:	2c02      	cmp	r4, #2
 8009830:	6103      	str	r3, [r0, #16]
 8009832:	6151      	str	r1, [r2, #20]
 8009834:	f000 8118 	beq.w	8009a68 <__gethex+0x4a4>
 8009838:	429f      	cmp	r7, r3
 800983a:	f280 80db 	bge.w	80099f4 <__gethex+0x430>
 800983e:	2101      	movs	r1, #1
 8009840:	9804      	ldr	r0, [sp, #16]
 8009842:	f7ff fe6b 	bl	800951c <rshift>
 8009846:	9b03      	ldr	r3, [sp, #12]
 8009848:	9a01      	ldr	r2, [sp, #4]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	3201      	adds	r2, #1
 800984e:	429a      	cmp	r2, r3
 8009850:	9201      	str	r2, [sp, #4]
 8009852:	f340 80d2 	ble.w	80099fa <__gethex+0x436>
 8009856:	9805      	ldr	r0, [sp, #20]
 8009858:	9904      	ldr	r1, [sp, #16]
 800985a:	f000 fe57 	bl	800a50c <_Bfree>
 800985e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009860:	2300      	movs	r3, #0
 8009862:	20a3      	movs	r0, #163	; 0xa3
 8009864:	6013      	str	r3, [r2, #0]
 8009866:	b00b      	add	sp, #44	; 0x2c
 8009868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986c:	2501      	movs	r5, #1
 800986e:	78bb      	ldrb	r3, [r7, #2]
 8009870:	1cb9      	adds	r1, r7, #2
 8009872:	e787      	b.n	8009784 <__gethex+0x1c0>
 8009874:	5d62      	ldrb	r2, [r4, r5]
 8009876:	5cb3      	ldrb	r3, [r6, r2]
 8009878:	1967      	adds	r7, r4, r5
 800987a:	2b00      	cmp	r3, #0
 800987c:	d069      	beq.n	8009952 <__gethex+0x38e>
 800987e:	2a30      	cmp	r2, #48	; 0x30
 8009880:	463c      	mov	r4, r7
 8009882:	d104      	bne.n	800988e <__gethex+0x2ca>
 8009884:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009888:	2b30      	cmp	r3, #48	; 0x30
 800988a:	d0fb      	beq.n	8009884 <__gethex+0x2c0>
 800988c:	5cf3      	ldrb	r3, [r6, r3]
 800988e:	fab3 fa83 	clz	sl, r3
 8009892:	463d      	mov	r5, r7
 8009894:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8009898:	f04f 0801 	mov.w	r8, #1
 800989c:	e6c0      	b.n	8009620 <__gethex+0x5c>
 800989e:	2401      	movs	r4, #1
 80098a0:	b167      	cbz	r7, 80098bc <__gethex+0x2f8>
 80098a2:	9b03      	ldr	r3, [sp, #12]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	f000 8085 	beq.w	80099b6 <__gethex+0x3f2>
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	f000 8086 	beq.w	80099be <__gethex+0x3fa>
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	f000 80b5 	beq.w	8009a22 <__gethex+0x45e>
 80098b8:	f044 0410 	orr.w	r4, r4, #16
 80098bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098be:	461a      	mov	r2, r3
 80098c0:	9b04      	ldr	r3, [sp, #16]
 80098c2:	6013      	str	r3, [r2, #0]
 80098c4:	9b08      	ldr	r3, [sp, #32]
 80098c6:	461a      	mov	r2, r3
 80098c8:	9b01      	ldr	r3, [sp, #4]
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	4620      	mov	r0, r4
 80098ce:	b00b      	add	sp, #44	; 0x2c
 80098d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d4:	2500      	movs	r5, #0
 80098d6:	e7ca      	b.n	800986e <__gethex+0x2aa>
 80098d8:	0800be24 	.word	0x0800be24
 80098dc:	1b84      	subs	r4, r0, r6
 80098de:	4621      	mov	r1, r4
 80098e0:	9804      	ldr	r0, [sp, #16]
 80098e2:	f001 fa23 	bl	800ad2c <__any_on>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d035      	beq.n	8009956 <__gethex+0x392>
 80098ea:	1e62      	subs	r2, r4, #1
 80098ec:	1151      	asrs	r1, r2, #5
 80098ee:	9807      	ldr	r0, [sp, #28]
 80098f0:	f002 031f 	and.w	r3, r2, #31
 80098f4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80098f8:	2701      	movs	r7, #1
 80098fa:	fa07 f303 	lsl.w	r3, r7, r3
 80098fe:	420b      	tst	r3, r1
 8009900:	d00a      	beq.n	8009918 <__gethex+0x354>
 8009902:	42ba      	cmp	r2, r7
 8009904:	f340 809b 	ble.w	8009a3e <__gethex+0x47a>
 8009908:	1ea1      	subs	r1, r4, #2
 800990a:	9804      	ldr	r0, [sp, #16]
 800990c:	f001 fa0e 	bl	800ad2c <__any_on>
 8009910:	2800      	cmp	r0, #0
 8009912:	f000 8094 	beq.w	8009a3e <__gethex+0x47a>
 8009916:	2703      	movs	r7, #3
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	9804      	ldr	r0, [sp, #16]
 800991c:	4423      	add	r3, r4
 800991e:	4621      	mov	r1, r4
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	f7ff fdfb 	bl	800951c <rshift>
 8009926:	e6f9      	b.n	800971c <__gethex+0x158>
 8009928:	9501      	str	r5, [sp, #4]
 800992a:	e68f      	b.n	800964c <__gethex+0x88>
 800992c:	1a34      	subs	r4, r6, r0
 800992e:	9904      	ldr	r1, [sp, #16]
 8009930:	9805      	ldr	r0, [sp, #20]
 8009932:	4622      	mov	r2, r4
 8009934:	f000 ffc0 	bl	800a8b8 <__lshift>
 8009938:	9b01      	ldr	r3, [sp, #4]
 800993a:	9004      	str	r0, [sp, #16]
 800993c:	1b1b      	subs	r3, r3, r4
 800993e:	9301      	str	r3, [sp, #4]
 8009940:	4603      	mov	r3, r0
 8009942:	3314      	adds	r3, #20
 8009944:	9307      	str	r3, [sp, #28]
 8009946:	2700      	movs	r7, #0
 8009948:	e6e8      	b.n	800971c <__gethex+0x158>
 800994a:	1c9c      	adds	r4, r3, #2
 800994c:	f04f 0800 	mov.w	r8, #0
 8009950:	e65c      	b.n	800960c <__gethex+0x48>
 8009952:	4613      	mov	r3, r2
 8009954:	e759      	b.n	800980a <__gethex+0x246>
 8009956:	4607      	mov	r7, r0
 8009958:	e7de      	b.n	8009918 <__gethex+0x354>
 800995a:	1e6c      	subs	r4, r5, #1
 800995c:	2f00      	cmp	r7, #0
 800995e:	d14e      	bne.n	80099fe <__gethex+0x43a>
 8009960:	b124      	cbz	r4, 800996c <__gethex+0x3a8>
 8009962:	4621      	mov	r1, r4
 8009964:	9804      	ldr	r0, [sp, #16]
 8009966:	f001 f9e1 	bl	800ad2c <__any_on>
 800996a:	4607      	mov	r7, r0
 800996c:	1163      	asrs	r3, r4, #5
 800996e:	9a07      	ldr	r2, [sp, #28]
 8009970:	9804      	ldr	r0, [sp, #16]
 8009972:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009976:	f004 041f 	and.w	r4, r4, #31
 800997a:	2301      	movs	r3, #1
 800997c:	fa03 f404 	lsl.w	r4, r3, r4
 8009980:	4214      	tst	r4, r2
 8009982:	4629      	mov	r1, r5
 8009984:	bf18      	it	ne
 8009986:	f047 0702 	orrne.w	r7, r7, #2
 800998a:	f7ff fdc7 	bl	800951c <rshift>
 800998e:	9b03      	ldr	r3, [sp, #12]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	9301      	str	r3, [sp, #4]
 8009994:	1b76      	subs	r6, r6, r5
 8009996:	2402      	movs	r4, #2
 8009998:	e782      	b.n	80098a0 <__gethex+0x2dc>
 800999a:	9900      	ldr	r1, [sp, #0]
 800999c:	5c7b      	ldrb	r3, [r7, r1]
 800999e:	5cf2      	ldrb	r2, [r6, r3]
 80099a0:	187d      	adds	r5, r7, r1
 80099a2:	462f      	mov	r7, r5
 80099a4:	2a00      	cmp	r2, #0
 80099a6:	f43f ae4e 	beq.w	8009646 <__gethex+0x82>
 80099aa:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 80099ae:	5cf2      	ldrb	r2, [r6, r3]
 80099b0:	2a00      	cmp	r2, #0
 80099b2:	d1fa      	bne.n	80099aa <__gethex+0x3e6>
 80099b4:	e647      	b.n	8009646 <__gethex+0x82>
 80099b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099b8:	f1c3 0301 	rsb	r3, r3, #1
 80099bc:	9315      	str	r3, [sp, #84]	; 0x54
 80099be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f43f af79 	beq.w	80098b8 <__gethex+0x2f4>
 80099c6:	9b04      	ldr	r3, [sp, #16]
 80099c8:	9d07      	ldr	r5, [sp, #28]
 80099ca:	691f      	ldr	r7, [r3, #16]
 80099cc:	ea4f 0887 	mov.w	r8, r7, lsl #2
 80099d0:	eb05 0008 	add.w	r0, r5, r8
 80099d4:	462b      	mov	r3, r5
 80099d6:	2100      	movs	r1, #0
 80099d8:	e004      	b.n	80099e4 <__gethex+0x420>
 80099da:	f843 1b04 	str.w	r1, [r3], #4
 80099de:	4298      	cmp	r0, r3
 80099e0:	f67f af1a 	bls.w	8009818 <__gethex+0x254>
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80099ea:	d0f6      	beq.n	80099da <__gethex+0x416>
 80099ec:	3201      	adds	r2, #1
 80099ee:	2c02      	cmp	r4, #2
 80099f0:	601a      	str	r2, [r3, #0]
 80099f2:	d039      	beq.n	8009a68 <__gethex+0x4a4>
 80099f4:	f016 061f 	ands.w	r6, r6, #31
 80099f8:	d13d      	bne.n	8009a76 <__gethex+0x4b2>
 80099fa:	2421      	movs	r4, #33	; 0x21
 80099fc:	e75e      	b.n	80098bc <__gethex+0x2f8>
 80099fe:	2701      	movs	r7, #1
 8009a00:	e7b4      	b.n	800996c <__gethex+0x3a8>
 8009a02:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009a04:	2a00      	cmp	r2, #0
 8009a06:	f43f aea3 	beq.w	8009750 <__gethex+0x18c>
 8009a0a:	9908      	ldr	r1, [sp, #32]
 8009a0c:	600b      	str	r3, [r1, #0]
 8009a0e:	9b07      	ldr	r3, [sp, #28]
 8009a10:	9904      	ldr	r1, [sp, #16]
 8009a12:	2201      	movs	r2, #1
 8009a14:	610a      	str	r2, [r1, #16]
 8009a16:	601a      	str	r2, [r3, #0]
 8009a18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	2062      	movs	r0, #98	; 0x62
 8009a1e:	6011      	str	r1, [r2, #0]
 8009a20:	e6dd      	b.n	80097de <__gethex+0x21a>
 8009a22:	07ba      	lsls	r2, r7, #30
 8009a24:	f57f af48 	bpl.w	80098b8 <__gethex+0x2f4>
 8009a28:	9b07      	ldr	r3, [sp, #28]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	433b      	orrs	r3, r7
 8009a2e:	07db      	lsls	r3, r3, #31
 8009a30:	d4c9      	bmi.n	80099c6 <__gethex+0x402>
 8009a32:	e741      	b.n	80098b8 <__gethex+0x2f4>
 8009a34:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8009a38:	f04f 0800 	mov.w	r8, #0
 8009a3c:	e656      	b.n	80096ec <__gethex+0x128>
 8009a3e:	2702      	movs	r7, #2
 8009a40:	e76a      	b.n	8009918 <__gethex+0x354>
 8009a42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009a44:	2a00      	cmp	r2, #0
 8009a46:	d0e0      	beq.n	8009a0a <__gethex+0x446>
 8009a48:	e682      	b.n	8009750 <__gethex+0x18c>
 8009a4a:	42ae      	cmp	r6, r5
 8009a4c:	f47f ae80 	bne.w	8009750 <__gethex+0x18c>
 8009a50:	2e01      	cmp	r6, #1
 8009a52:	ddda      	ble.n	8009a0a <__gethex+0x446>
 8009a54:	1e71      	subs	r1, r6, #1
 8009a56:	9804      	ldr	r0, [sp, #16]
 8009a58:	f001 f968 	bl	800ad2c <__any_on>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	f43f ae77 	beq.w	8009750 <__gethex+0x18c>
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	e7d0      	b.n	8009a0a <__gethex+0x446>
 8009a68:	9b03      	ldr	r3, [sp, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	429e      	cmp	r6, r3
 8009a70:	d024      	beq.n	8009abc <__gethex+0x4f8>
 8009a72:	2422      	movs	r4, #34	; 0x22
 8009a74:	e722      	b.n	80098bc <__gethex+0x2f8>
 8009a76:	4445      	add	r5, r8
 8009a78:	f1c6 0620 	rsb	r6, r6, #32
 8009a7c:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8009a80:	f000 fdda 	bl	800a638 <__hi0bits>
 8009a84:	42b0      	cmp	r0, r6
 8009a86:	dab8      	bge.n	80099fa <__gethex+0x436>
 8009a88:	e6d9      	b.n	800983e <__gethex+0x27a>
 8009a8a:	9b04      	ldr	r3, [sp, #16]
 8009a8c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009a90:	6859      	ldr	r1, [r3, #4]
 8009a92:	4648      	mov	r0, r9
 8009a94:	3101      	adds	r1, #1
 8009a96:	f000 fd13 	bl	800a4c0 <_Balloc>
 8009a9a:	9904      	ldr	r1, [sp, #16]
 8009a9c:	690b      	ldr	r3, [r1, #16]
 8009a9e:	1c9a      	adds	r2, r3, #2
 8009aa0:	4605      	mov	r5, r0
 8009aa2:	0092      	lsls	r2, r2, #2
 8009aa4:	310c      	adds	r1, #12
 8009aa6:	300c      	adds	r0, #12
 8009aa8:	f7f9 ffa0 	bl	80039ec <memcpy>
 8009aac:	9904      	ldr	r1, [sp, #16]
 8009aae:	4648      	mov	r0, r9
 8009ab0:	f000 fd2c 	bl	800a50c <_Bfree>
 8009ab4:	9504      	str	r5, [sp, #16]
 8009ab6:	692b      	ldr	r3, [r5, #16]
 8009ab8:	3514      	adds	r5, #20
 8009aba:	e6b3      	b.n	8009824 <__gethex+0x260>
 8009abc:	1173      	asrs	r3, r6, #5
 8009abe:	f006 061f 	and.w	r6, r6, #31
 8009ac2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	40b3      	lsls	r3, r6
 8009aca:	4213      	tst	r3, r2
 8009acc:	bf14      	ite	ne
 8009ace:	2421      	movne	r4, #33	; 0x21
 8009ad0:	2422      	moveq	r4, #34	; 0x22
 8009ad2:	e6f3      	b.n	80098bc <__gethex+0x2f8>

08009ad4 <__match>:
 8009ad4:	b430      	push	{r4, r5}
 8009ad6:	6804      	ldr	r4, [r0, #0]
 8009ad8:	e008      	b.n	8009aec <__match+0x18>
 8009ada:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009ade:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 8009ae2:	2d19      	cmp	r5, #25
 8009ae4:	bf98      	it	ls
 8009ae6:	3320      	addls	r3, #32
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d108      	bne.n	8009afe <__match+0x2a>
 8009aec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009af0:	2a00      	cmp	r2, #0
 8009af2:	d1f2      	bne.n	8009ada <__match+0x6>
 8009af4:	3401      	adds	r4, #1
 8009af6:	6004      	str	r4, [r0, #0]
 8009af8:	2001      	movs	r0, #1
 8009afa:	bc30      	pop	{r4, r5}
 8009afc:	4770      	bx	lr
 8009afe:	2000      	movs	r0, #0
 8009b00:	bc30      	pop	{r4, r5}
 8009b02:	4770      	bx	lr

08009b04 <__hexnan>:
 8009b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b08:	680b      	ldr	r3, [r1, #0]
 8009b0a:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009c80 <__hexnan+0x17c>
 8009b0e:	b085      	sub	sp, #20
 8009b10:	1159      	asrs	r1, r3, #5
 8009b12:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8009b16:	f013 031f 	ands.w	r3, r3, #31
 8009b1a:	9101      	str	r1, [sp, #4]
 8009b1c:	bf1c      	itt	ne
 8009b1e:	3104      	addne	r1, #4
 8009b20:	9101      	strne	r1, [sp, #4]
 8009b22:	9c01      	ldr	r4, [sp, #4]
 8009b24:	9002      	str	r0, [sp, #8]
 8009b26:	9303      	str	r3, [sp, #12]
 8009b28:	2300      	movs	r3, #0
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b30:	469a      	mov	sl, r3
 8009b32:	469e      	mov	lr, r3
 8009b34:	9b02      	ldr	r3, [sp, #8]
 8009b36:	f1a4 0c04 	sub.w	ip, r4, #4
 8009b3a:	681d      	ldr	r5, [r3, #0]
 8009b3c:	46e0      	mov	r8, ip
 8009b3e:	4660      	mov	r0, ip
 8009b40:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8009b44:	b323      	cbz	r3, 8009b90 <__hexnan+0x8c>
 8009b46:	f819 4003 	ldrb.w	r4, [r9, r3]
 8009b4a:	2c00      	cmp	r4, #0
 8009b4c:	d143      	bne.n	8009bd6 <__hexnan+0xd2>
 8009b4e:	2b20      	cmp	r3, #32
 8009b50:	d85d      	bhi.n	8009c0e <__hexnan+0x10a>
 8009b52:	45d6      	cmp	lr, sl
 8009b54:	ddf4      	ble.n	8009b40 <__hexnan+0x3c>
 8009b56:	4540      	cmp	r0, r8
 8009b58:	d213      	bcs.n	8009b82 <__hexnan+0x7e>
 8009b5a:	2907      	cmp	r1, #7
 8009b5c:	dc11      	bgt.n	8009b82 <__hexnan+0x7e>
 8009b5e:	f1c1 0108 	rsb	r1, r1, #8
 8009b62:	0089      	lsls	r1, r1, #2
 8009b64:	6806      	ldr	r6, [r0, #0]
 8009b66:	f1c1 0b20 	rsb	fp, r1, #32
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	685f      	ldr	r7, [r3, #4]
 8009b6e:	fa07 f40b 	lsl.w	r4, r7, fp
 8009b72:	4334      	orrs	r4, r6
 8009b74:	fa27 f601 	lsr.w	r6, r7, r1
 8009b78:	601c      	str	r4, [r3, #0]
 8009b7a:	f843 6f04 	str.w	r6, [r3, #4]!
 8009b7e:	4598      	cmp	r8, r3
 8009b80:	d8f4      	bhi.n	8009b6c <__hexnan+0x68>
 8009b82:	4290      	cmp	r0, r2
 8009b84:	d83a      	bhi.n	8009bfc <__hexnan+0xf8>
 8009b86:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8009b8a:	2108      	movs	r1, #8
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1da      	bne.n	8009b46 <__hexnan+0x42>
 8009b90:	f1be 0f00 	cmp.w	lr, #0
 8009b94:	d03d      	beq.n	8009c12 <__hexnan+0x10e>
 8009b96:	4540      	cmp	r0, r8
 8009b98:	d201      	bcs.n	8009b9e <__hexnan+0x9a>
 8009b9a:	2907      	cmp	r1, #7
 8009b9c:	dd5c      	ble.n	8009c58 <__hexnan+0x154>
 8009b9e:	4290      	cmp	r0, r2
 8009ba0:	d93b      	bls.n	8009c1a <__hexnan+0x116>
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	f850 1b04 	ldr.w	r1, [r0], #4
 8009ba8:	f843 1b04 	str.w	r1, [r3], #4
 8009bac:	4584      	cmp	ip, r0
 8009bae:	d2f9      	bcs.n	8009ba4 <__hexnan+0xa0>
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	f843 1b04 	str.w	r1, [r3], #4
 8009bb6:	459c      	cmp	ip, r3
 8009bb8:	d2fb      	bcs.n	8009bb2 <__hexnan+0xae>
 8009bba:	9b01      	ldr	r3, [sp, #4]
 8009bbc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8009bc0:	b92b      	cbnz	r3, 8009bce <__hexnan+0xca>
 8009bc2:	4562      	cmp	r2, ip
 8009bc4:	d03a      	beq.n	8009c3c <__hexnan+0x138>
 8009bc6:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d0f9      	beq.n	8009bc2 <__hexnan+0xbe>
 8009bce:	2005      	movs	r0, #5
 8009bd0:	b005      	add	sp, #20
 8009bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd6:	3101      	adds	r1, #1
 8009bd8:	2908      	cmp	r1, #8
 8009bda:	f10e 0e01 	add.w	lr, lr, #1
 8009bde:	dd06      	ble.n	8009bee <__hexnan+0xea>
 8009be0:	4290      	cmp	r0, r2
 8009be2:	d9ad      	bls.n	8009b40 <__hexnan+0x3c>
 8009be4:	2300      	movs	r3, #0
 8009be6:	f840 3c04 	str.w	r3, [r0, #-4]
 8009bea:	2101      	movs	r1, #1
 8009bec:	3804      	subs	r0, #4
 8009bee:	6803      	ldr	r3, [r0, #0]
 8009bf0:	f004 040f 	and.w	r4, r4, #15
 8009bf4:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
 8009bf8:	6004      	str	r4, [r0, #0]
 8009bfa:	e7a1      	b.n	8009b40 <__hexnan+0x3c>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f1a0 0804 	sub.w	r8, r0, #4
 8009c02:	f840 3c04 	str.w	r3, [r0, #-4]
 8009c06:	46f2      	mov	sl, lr
 8009c08:	4640      	mov	r0, r8
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	e798      	b.n	8009b40 <__hexnan+0x3c>
 8009c0e:	2b29      	cmp	r3, #41	; 0x29
 8009c10:	d01b      	beq.n	8009c4a <__hexnan+0x146>
 8009c12:	2004      	movs	r0, #4
 8009c14:	b005      	add	sp, #20
 8009c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1a:	9b03      	ldr	r3, [sp, #12]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d0cc      	beq.n	8009bba <__hexnan+0xb6>
 8009c20:	9c01      	ldr	r4, [sp, #4]
 8009c22:	9b03      	ldr	r3, [sp, #12]
 8009c24:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8009c28:	f1c3 0320 	rsb	r3, r3, #32
 8009c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c30:	fa20 f303 	lsr.w	r3, r0, r3
 8009c34:	400b      	ands	r3, r1
 8009c36:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c3a:	e7c1      	b.n	8009bc0 <__hexnan+0xbc>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	2005      	movs	r0, #5
 8009c40:	f8cc 3000 	str.w	r3, [ip]
 8009c44:	b005      	add	sp, #20
 8009c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4a:	9b02      	ldr	r3, [sp, #8]
 8009c4c:	3501      	adds	r5, #1
 8009c4e:	601d      	str	r5, [r3, #0]
 8009c50:	f1be 0f00 	cmp.w	lr, #0
 8009c54:	d19f      	bne.n	8009b96 <__hexnan+0x92>
 8009c56:	e7dc      	b.n	8009c12 <__hexnan+0x10e>
 8009c58:	f1c1 0308 	rsb	r3, r1, #8
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	6805      	ldr	r5, [r0, #0]
 8009c60:	f1c3 0720 	rsb	r7, r3, #32
 8009c64:	4601      	mov	r1, r0
 8009c66:	684e      	ldr	r6, [r1, #4]
 8009c68:	fa06 f407 	lsl.w	r4, r6, r7
 8009c6c:	432c      	orrs	r4, r5
 8009c6e:	fa26 f503 	lsr.w	r5, r6, r3
 8009c72:	600c      	str	r4, [r1, #0]
 8009c74:	f841 5f04 	str.w	r5, [r1, #4]!
 8009c78:	4588      	cmp	r8, r1
 8009c7a:	d8f4      	bhi.n	8009c66 <__hexnan+0x162>
 8009c7c:	e78f      	b.n	8009b9e <__hexnan+0x9a>
 8009c7e:	bf00      	nop
 8009c80:	0800be24 	.word	0x0800be24

08009c84 <__locale_mb_cur_max>:
 8009c84:	4b04      	ldr	r3, [pc, #16]	; (8009c98 <__locale_mb_cur_max+0x14>)
 8009c86:	4a05      	ldr	r2, [pc, #20]	; (8009c9c <__locale_mb_cur_max+0x18>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	bf08      	it	eq
 8009c90:	4613      	moveq	r3, r2
 8009c92:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8009c96:	4770      	bx	lr
 8009c98:	20000468 	.word	0x20000468
 8009c9c:	2000046c 	.word	0x2000046c

08009ca0 <__localeconv_l>:
 8009ca0:	30f0      	adds	r0, #240	; 0xf0
 8009ca2:	4770      	bx	lr

08009ca4 <_localeconv_r>:
 8009ca4:	4a04      	ldr	r2, [pc, #16]	; (8009cb8 <_localeconv_r+0x14>)
 8009ca6:	4b05      	ldr	r3, [pc, #20]	; (8009cbc <_localeconv_r+0x18>)
 8009ca8:	6812      	ldr	r2, [r2, #0]
 8009caa:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8009cac:	2800      	cmp	r0, #0
 8009cae:	bf08      	it	eq
 8009cb0:	4618      	moveq	r0, r3
 8009cb2:	30f0      	adds	r0, #240	; 0xf0
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	20000468 	.word	0x20000468
 8009cbc:	2000046c 	.word	0x2000046c

08009cc0 <__swhatbuf_r>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	460d      	mov	r5, r1
 8009cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc8:	2900      	cmp	r1, #0
 8009cca:	b090      	sub	sp, #64	; 0x40
 8009ccc:	4614      	mov	r4, r2
 8009cce:	461e      	mov	r6, r3
 8009cd0:	db14      	blt.n	8009cfc <__swhatbuf_r+0x3c>
 8009cd2:	aa01      	add	r2, sp, #4
 8009cd4:	f001 fc6e 	bl	800b5b4 <_fstat_r>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	db0f      	blt.n	8009cfc <__swhatbuf_r+0x3c>
 8009cdc:	9a02      	ldr	r2, [sp, #8]
 8009cde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ce2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8009ce6:	fab2 f282 	clz	r2, r2
 8009cea:	0952      	lsrs	r2, r2, #5
 8009cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cf0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009cf4:	6032      	str	r2, [r6, #0]
 8009cf6:	6023      	str	r3, [r4, #0]
 8009cf8:	b010      	add	sp, #64	; 0x40
 8009cfa:	bd70      	pop	{r4, r5, r6, pc}
 8009cfc:	89a8      	ldrh	r0, [r5, #12]
 8009cfe:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8009d02:	b282      	uxth	r2, r0
 8009d04:	2000      	movs	r0, #0
 8009d06:	6030      	str	r0, [r6, #0]
 8009d08:	b11a      	cbz	r2, 8009d12 <__swhatbuf_r+0x52>
 8009d0a:	2340      	movs	r3, #64	; 0x40
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	b010      	add	sp, #64	; 0x40
 8009d10:	bd70      	pop	{r4, r5, r6, pc}
 8009d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d16:	4610      	mov	r0, r2
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	b010      	add	sp, #64	; 0x40
 8009d1c:	bd70      	pop	{r4, r5, r6, pc}
 8009d1e:	bf00      	nop

08009d20 <__smakebuf_r>:
 8009d20:	898a      	ldrh	r2, [r1, #12]
 8009d22:	0792      	lsls	r2, r2, #30
 8009d24:	460b      	mov	r3, r1
 8009d26:	d506      	bpl.n	8009d36 <__smakebuf_r+0x16>
 8009d28:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d2c:	2101      	movs	r1, #1
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	611a      	str	r2, [r3, #16]
 8009d32:	6159      	str	r1, [r3, #20]
 8009d34:	4770      	bx	lr
 8009d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d38:	b083      	sub	sp, #12
 8009d3a:	ab01      	add	r3, sp, #4
 8009d3c:	466a      	mov	r2, sp
 8009d3e:	460c      	mov	r4, r1
 8009d40:	4605      	mov	r5, r0
 8009d42:	f7ff ffbd 	bl	8009cc0 <__swhatbuf_r>
 8009d46:	9900      	ldr	r1, [sp, #0]
 8009d48:	4606      	mov	r6, r0
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f000 f82c 	bl	8009da8 <_malloc_r>
 8009d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d54:	b1d0      	cbz	r0, 8009d8c <__smakebuf_r+0x6c>
 8009d56:	9a01      	ldr	r2, [sp, #4]
 8009d58:	4f12      	ldr	r7, [pc, #72]	; (8009da4 <__smakebuf_r+0x84>)
 8009d5a:	9900      	ldr	r1, [sp, #0]
 8009d5c:	63ef      	str	r7, [r5, #60]	; 0x3c
 8009d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d62:	81a3      	strh	r3, [r4, #12]
 8009d64:	6020      	str	r0, [r4, #0]
 8009d66:	6120      	str	r0, [r4, #16]
 8009d68:	6161      	str	r1, [r4, #20]
 8009d6a:	b91a      	cbnz	r2, 8009d74 <__smakebuf_r+0x54>
 8009d6c:	4333      	orrs	r3, r6
 8009d6e:	81a3      	strh	r3, [r4, #12]
 8009d70:	b003      	add	sp, #12
 8009d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d74:	4628      	mov	r0, r5
 8009d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d7a:	f001 fc2f 	bl	800b5dc <_isatty_r>
 8009d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d82:	2800      	cmp	r0, #0
 8009d84:	d0f2      	beq.n	8009d6c <__smakebuf_r+0x4c>
 8009d86:	f043 0301 	orr.w	r3, r3, #1
 8009d8a:	e7ef      	b.n	8009d6c <__smakebuf_r+0x4c>
 8009d8c:	059a      	lsls	r2, r3, #22
 8009d8e:	d4ef      	bmi.n	8009d70 <__smakebuf_r+0x50>
 8009d90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d94:	f043 0302 	orr.w	r3, r3, #2
 8009d98:	2101      	movs	r1, #1
 8009d9a:	81a3      	strh	r3, [r4, #12]
 8009d9c:	6022      	str	r2, [r4, #0]
 8009d9e:	6122      	str	r2, [r4, #16]
 8009da0:	6161      	str	r1, [r4, #20]
 8009da2:	e7e5      	b.n	8009d70 <__smakebuf_r+0x50>
 8009da4:	08008e49 	.word	0x08008e49

08009da8 <_malloc_r>:
 8009da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dac:	f101 050b 	add.w	r5, r1, #11
 8009db0:	2d16      	cmp	r5, #22
 8009db2:	b083      	sub	sp, #12
 8009db4:	4606      	mov	r6, r0
 8009db6:	f240 809f 	bls.w	8009ef8 <_malloc_r+0x150>
 8009dba:	f035 0507 	bics.w	r5, r5, #7
 8009dbe:	f100 80bf 	bmi.w	8009f40 <_malloc_r+0x198>
 8009dc2:	42a9      	cmp	r1, r5
 8009dc4:	f200 80bc 	bhi.w	8009f40 <_malloc_r+0x198>
 8009dc8:	f000 fb76 	bl	800a4b8 <__malloc_lock>
 8009dcc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8009dd0:	f0c0 829c 	bcc.w	800a30c <_malloc_r+0x564>
 8009dd4:	0a6b      	lsrs	r3, r5, #9
 8009dd6:	f000 80ba 	beq.w	8009f4e <_malloc_r+0x1a6>
 8009dda:	2b04      	cmp	r3, #4
 8009ddc:	f200 8183 	bhi.w	800a0e6 <_malloc_r+0x33e>
 8009de0:	09a8      	lsrs	r0, r5, #6
 8009de2:	f100 0e39 	add.w	lr, r0, #57	; 0x39
 8009de6:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8009dea:	3038      	adds	r0, #56	; 0x38
 8009dec:	4fc4      	ldr	r7, [pc, #784]	; (800a100 <_malloc_r+0x358>)
 8009dee:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009df2:	f1a3 0108 	sub.w	r1, r3, #8
 8009df6:	685c      	ldr	r4, [r3, #4]
 8009df8:	42a1      	cmp	r1, r4
 8009dfa:	d107      	bne.n	8009e0c <_malloc_r+0x64>
 8009dfc:	e0ac      	b.n	8009f58 <_malloc_r+0x1b0>
 8009dfe:	2a00      	cmp	r2, #0
 8009e00:	f280 80ac 	bge.w	8009f5c <_malloc_r+0x1b4>
 8009e04:	68e4      	ldr	r4, [r4, #12]
 8009e06:	42a1      	cmp	r1, r4
 8009e08:	f000 80a6 	beq.w	8009f58 <_malloc_r+0x1b0>
 8009e0c:	6863      	ldr	r3, [r4, #4]
 8009e0e:	f023 0303 	bic.w	r3, r3, #3
 8009e12:	1b5a      	subs	r2, r3, r5
 8009e14:	2a0f      	cmp	r2, #15
 8009e16:	ddf2      	ble.n	8009dfe <_malloc_r+0x56>
 8009e18:	49b9      	ldr	r1, [pc, #740]	; (800a100 <_malloc_r+0x358>)
 8009e1a:	693c      	ldr	r4, [r7, #16]
 8009e1c:	f101 0e08 	add.w	lr, r1, #8
 8009e20:	4574      	cmp	r4, lr
 8009e22:	f000 81b3 	beq.w	800a18c <_malloc_r+0x3e4>
 8009e26:	6863      	ldr	r3, [r4, #4]
 8009e28:	f023 0303 	bic.w	r3, r3, #3
 8009e2c:	1b5a      	subs	r2, r3, r5
 8009e2e:	2a0f      	cmp	r2, #15
 8009e30:	f300 8199 	bgt.w	800a166 <_malloc_r+0x3be>
 8009e34:	2a00      	cmp	r2, #0
 8009e36:	f8c1 e014 	str.w	lr, [r1, #20]
 8009e3a:	f8c1 e010 	str.w	lr, [r1, #16]
 8009e3e:	f280 809e 	bge.w	8009f7e <_malloc_r+0x1d6>
 8009e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e46:	f080 8167 	bcs.w	800a118 <_malloc_r+0x370>
 8009e4a:	08db      	lsrs	r3, r3, #3
 8009e4c:	f103 0c01 	add.w	ip, r3, #1
 8009e50:	2201      	movs	r2, #1
 8009e52:	109b      	asrs	r3, r3, #2
 8009e54:	fa02 f303 	lsl.w	r3, r2, r3
 8009e58:	684a      	ldr	r2, [r1, #4]
 8009e5a:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
 8009e5e:	f8c4 8008 	str.w	r8, [r4, #8]
 8009e62:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
 8009e66:	431a      	orrs	r2, r3
 8009e68:	f1a9 0308 	sub.w	r3, r9, #8
 8009e6c:	60e3      	str	r3, [r4, #12]
 8009e6e:	604a      	str	r2, [r1, #4]
 8009e70:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
 8009e74:	f8c8 400c 	str.w	r4, [r8, #12]
 8009e78:	1083      	asrs	r3, r0, #2
 8009e7a:	2401      	movs	r4, #1
 8009e7c:	409c      	lsls	r4, r3
 8009e7e:	4294      	cmp	r4, r2
 8009e80:	f200 808a 	bhi.w	8009f98 <_malloc_r+0x1f0>
 8009e84:	4214      	tst	r4, r2
 8009e86:	d106      	bne.n	8009e96 <_malloc_r+0xee>
 8009e88:	f020 0003 	bic.w	r0, r0, #3
 8009e8c:	0064      	lsls	r4, r4, #1
 8009e8e:	4214      	tst	r4, r2
 8009e90:	f100 0004 	add.w	r0, r0, #4
 8009e94:	d0fa      	beq.n	8009e8c <_malloc_r+0xe4>
 8009e96:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8009e9a:	46cc      	mov	ip, r9
 8009e9c:	4680      	mov	r8, r0
 8009e9e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8009ea2:	458c      	cmp	ip, r1
 8009ea4:	d107      	bne.n	8009eb6 <_malloc_r+0x10e>
 8009ea6:	e173      	b.n	800a190 <_malloc_r+0x3e8>
 8009ea8:	2a00      	cmp	r2, #0
 8009eaa:	f280 8181 	bge.w	800a1b0 <_malloc_r+0x408>
 8009eae:	68c9      	ldr	r1, [r1, #12]
 8009eb0:	458c      	cmp	ip, r1
 8009eb2:	f000 816d 	beq.w	800a190 <_malloc_r+0x3e8>
 8009eb6:	684b      	ldr	r3, [r1, #4]
 8009eb8:	f023 0303 	bic.w	r3, r3, #3
 8009ebc:	1b5a      	subs	r2, r3, r5
 8009ebe:	2a0f      	cmp	r2, #15
 8009ec0:	ddf2      	ble.n	8009ea8 <_malloc_r+0x100>
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8009ec8:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8009ecc:	194b      	adds	r3, r1, r5
 8009ece:	f045 0501 	orr.w	r5, r5, #1
 8009ed2:	604d      	str	r5, [r1, #4]
 8009ed4:	f042 0101 	orr.w	r1, r2, #1
 8009ed8:	f8c8 c00c 	str.w	ip, [r8, #12]
 8009edc:	4630      	mov	r0, r6
 8009ede:	f8cc 8008 	str.w	r8, [ip, #8]
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	613b      	str	r3, [r7, #16]
 8009ee6:	f8c3 e00c 	str.w	lr, [r3, #12]
 8009eea:	f8c3 e008 	str.w	lr, [r3, #8]
 8009eee:	6059      	str	r1, [r3, #4]
 8009ef0:	509a      	str	r2, [r3, r2]
 8009ef2:	f000 fae3 	bl	800a4bc <__malloc_unlock>
 8009ef6:	e01f      	b.n	8009f38 <_malloc_r+0x190>
 8009ef8:	2910      	cmp	r1, #16
 8009efa:	d821      	bhi.n	8009f40 <_malloc_r+0x198>
 8009efc:	f000 fadc 	bl	800a4b8 <__malloc_lock>
 8009f00:	2510      	movs	r5, #16
 8009f02:	2306      	movs	r3, #6
 8009f04:	2002      	movs	r0, #2
 8009f06:	4f7e      	ldr	r7, [pc, #504]	; (800a100 <_malloc_r+0x358>)
 8009f08:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009f0c:	f1a3 0208 	sub.w	r2, r3, #8
 8009f10:	685c      	ldr	r4, [r3, #4]
 8009f12:	4294      	cmp	r4, r2
 8009f14:	f000 8145 	beq.w	800a1a2 <_malloc_r+0x3fa>
 8009f18:	6863      	ldr	r3, [r4, #4]
 8009f1a:	68e1      	ldr	r1, [r4, #12]
 8009f1c:	68a5      	ldr	r5, [r4, #8]
 8009f1e:	f023 0303 	bic.w	r3, r3, #3
 8009f22:	4423      	add	r3, r4
 8009f24:	4630      	mov	r0, r6
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	60e9      	str	r1, [r5, #12]
 8009f2a:	f042 0201 	orr.w	r2, r2, #1
 8009f2e:	608d      	str	r5, [r1, #8]
 8009f30:	605a      	str	r2, [r3, #4]
 8009f32:	f000 fac3 	bl	800a4bc <__malloc_unlock>
 8009f36:	3408      	adds	r4, #8
 8009f38:	4620      	mov	r0, r4
 8009f3a:	b003      	add	sp, #12
 8009f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f40:	2400      	movs	r4, #0
 8009f42:	230c      	movs	r3, #12
 8009f44:	4620      	mov	r0, r4
 8009f46:	6033      	str	r3, [r6, #0]
 8009f48:	b003      	add	sp, #12
 8009f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4e:	2380      	movs	r3, #128	; 0x80
 8009f50:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8009f54:	203f      	movs	r0, #63	; 0x3f
 8009f56:	e749      	b.n	8009dec <_malloc_r+0x44>
 8009f58:	4670      	mov	r0, lr
 8009f5a:	e75d      	b.n	8009e18 <_malloc_r+0x70>
 8009f5c:	4423      	add	r3, r4
 8009f5e:	68e1      	ldr	r1, [r4, #12]
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	68a5      	ldr	r5, [r4, #8]
 8009f64:	f042 0201 	orr.w	r2, r2, #1
 8009f68:	60e9      	str	r1, [r5, #12]
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	608d      	str	r5, [r1, #8]
 8009f6e:	605a      	str	r2, [r3, #4]
 8009f70:	f000 faa4 	bl	800a4bc <__malloc_unlock>
 8009f74:	3408      	adds	r4, #8
 8009f76:	4620      	mov	r0, r4
 8009f78:	b003      	add	sp, #12
 8009f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7e:	4423      	add	r3, r4
 8009f80:	4630      	mov	r0, r6
 8009f82:	685a      	ldr	r2, [r3, #4]
 8009f84:	f042 0201 	orr.w	r2, r2, #1
 8009f88:	605a      	str	r2, [r3, #4]
 8009f8a:	f000 fa97 	bl	800a4bc <__malloc_unlock>
 8009f8e:	3408      	adds	r4, #8
 8009f90:	4620      	mov	r0, r4
 8009f92:	b003      	add	sp, #12
 8009f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f98:	68bc      	ldr	r4, [r7, #8]
 8009f9a:	6863      	ldr	r3, [r4, #4]
 8009f9c:	f023 0803 	bic.w	r8, r3, #3
 8009fa0:	45a8      	cmp	r8, r5
 8009fa2:	d304      	bcc.n	8009fae <_malloc_r+0x206>
 8009fa4:	ebc5 0308 	rsb	r3, r5, r8
 8009fa8:	2b0f      	cmp	r3, #15
 8009faa:	f300 808c 	bgt.w	800a0c6 <_malloc_r+0x31e>
 8009fae:	4b55      	ldr	r3, [pc, #340]	; (800a104 <_malloc_r+0x35c>)
 8009fb0:	f8df 9160 	ldr.w	r9, [pc, #352]	; 800a114 <_malloc_r+0x36c>
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	f8d9 3000 	ldr.w	r3, [r9]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	442a      	add	r2, r5
 8009fbe:	eb04 0a08 	add.w	sl, r4, r8
 8009fc2:	f000 8160 	beq.w	800a286 <_malloc_r+0x4de>
 8009fc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009fca:	320f      	adds	r2, #15
 8009fcc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8009fd0:	f022 020f 	bic.w	r2, r2, #15
 8009fd4:	4611      	mov	r1, r2
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	9201      	str	r2, [sp, #4]
 8009fda:	f001 f8c7 	bl	800b16c <_sbrk_r>
 8009fde:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009fe2:	4683      	mov	fp, r0
 8009fe4:	9a01      	ldr	r2, [sp, #4]
 8009fe6:	f000 8158 	beq.w	800a29a <_malloc_r+0x4f2>
 8009fea:	4582      	cmp	sl, r0
 8009fec:	f200 80fc 	bhi.w	800a1e8 <_malloc_r+0x440>
 8009ff0:	4b45      	ldr	r3, [pc, #276]	; (800a108 <_malloc_r+0x360>)
 8009ff2:	6819      	ldr	r1, [r3, #0]
 8009ff4:	45da      	cmp	sl, fp
 8009ff6:	4411      	add	r1, r2
 8009ff8:	6019      	str	r1, [r3, #0]
 8009ffa:	f000 8153 	beq.w	800a2a4 <_malloc_r+0x4fc>
 8009ffe:	f8d9 0000 	ldr.w	r0, [r9]
 800a002:	f8df e110 	ldr.w	lr, [pc, #272]	; 800a114 <_malloc_r+0x36c>
 800a006:	3001      	adds	r0, #1
 800a008:	bf1b      	ittet	ne
 800a00a:	ebca 0a0b 	rsbne	sl, sl, fp
 800a00e:	4451      	addne	r1, sl
 800a010:	f8ce b000 	streq.w	fp, [lr]
 800a014:	6019      	strne	r1, [r3, #0]
 800a016:	f01b 0107 	ands.w	r1, fp, #7
 800a01a:	f000 8117 	beq.w	800a24c <_malloc_r+0x4a4>
 800a01e:	f1c1 0008 	rsb	r0, r1, #8
 800a022:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 800a026:	4483      	add	fp, r0
 800a028:	3108      	adds	r1, #8
 800a02a:	445a      	add	r2, fp
 800a02c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800a030:	ebc2 0901 	rsb	r9, r2, r1
 800a034:	4649      	mov	r1, r9
 800a036:	4630      	mov	r0, r6
 800a038:	9301      	str	r3, [sp, #4]
 800a03a:	f001 f897 	bl	800b16c <_sbrk_r>
 800a03e:	1c43      	adds	r3, r0, #1
 800a040:	9b01      	ldr	r3, [sp, #4]
 800a042:	f000 813f 	beq.w	800a2c4 <_malloc_r+0x51c>
 800a046:	ebcb 0200 	rsb	r2, fp, r0
 800a04a:	444a      	add	r2, r9
 800a04c:	f042 0201 	orr.w	r2, r2, #1
 800a050:	6819      	ldr	r1, [r3, #0]
 800a052:	f8c7 b008 	str.w	fp, [r7, #8]
 800a056:	4449      	add	r1, r9
 800a058:	42bc      	cmp	r4, r7
 800a05a:	f8cb 2004 	str.w	r2, [fp, #4]
 800a05e:	6019      	str	r1, [r3, #0]
 800a060:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800a108 <_malloc_r+0x360>
 800a064:	d016      	beq.n	800a094 <_malloc_r+0x2ec>
 800a066:	f1b8 0f0f 	cmp.w	r8, #15
 800a06a:	f240 80fd 	bls.w	800a268 <_malloc_r+0x4c0>
 800a06e:	6862      	ldr	r2, [r4, #4]
 800a070:	f1a8 030c 	sub.w	r3, r8, #12
 800a074:	f023 0307 	bic.w	r3, r3, #7
 800a078:	18e0      	adds	r0, r4, r3
 800a07a:	f002 0201 	and.w	r2, r2, #1
 800a07e:	f04f 0e05 	mov.w	lr, #5
 800a082:	431a      	orrs	r2, r3
 800a084:	2b0f      	cmp	r3, #15
 800a086:	6062      	str	r2, [r4, #4]
 800a088:	f8c0 e004 	str.w	lr, [r0, #4]
 800a08c:	f8c0 e008 	str.w	lr, [r0, #8]
 800a090:	f200 811c 	bhi.w	800a2cc <_malloc_r+0x524>
 800a094:	4b1d      	ldr	r3, [pc, #116]	; (800a10c <_malloc_r+0x364>)
 800a096:	68bc      	ldr	r4, [r7, #8]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	4291      	cmp	r1, r2
 800a09c:	bf88      	it	hi
 800a09e:	6019      	strhi	r1, [r3, #0]
 800a0a0:	4b1b      	ldr	r3, [pc, #108]	; (800a110 <_malloc_r+0x368>)
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	4291      	cmp	r1, r2
 800a0a6:	6862      	ldr	r2, [r4, #4]
 800a0a8:	bf88      	it	hi
 800a0aa:	6019      	strhi	r1, [r3, #0]
 800a0ac:	f022 0203 	bic.w	r2, r2, #3
 800a0b0:	4295      	cmp	r5, r2
 800a0b2:	eba2 0305 	sub.w	r3, r2, r5
 800a0b6:	d801      	bhi.n	800a0bc <_malloc_r+0x314>
 800a0b8:	2b0f      	cmp	r3, #15
 800a0ba:	dc04      	bgt.n	800a0c6 <_malloc_r+0x31e>
 800a0bc:	4630      	mov	r0, r6
 800a0be:	f000 f9fd 	bl	800a4bc <__malloc_unlock>
 800a0c2:	2400      	movs	r4, #0
 800a0c4:	e738      	b.n	8009f38 <_malloc_r+0x190>
 800a0c6:	1962      	adds	r2, r4, r5
 800a0c8:	f043 0301 	orr.w	r3, r3, #1
 800a0cc:	f045 0501 	orr.w	r5, r5, #1
 800a0d0:	6065      	str	r5, [r4, #4]
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	60ba      	str	r2, [r7, #8]
 800a0d6:	6053      	str	r3, [r2, #4]
 800a0d8:	f000 f9f0 	bl	800a4bc <__malloc_unlock>
 800a0dc:	3408      	adds	r4, #8
 800a0de:	4620      	mov	r0, r4
 800a0e0:	b003      	add	sp, #12
 800a0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e6:	2b14      	cmp	r3, #20
 800a0e8:	d971      	bls.n	800a1ce <_malloc_r+0x426>
 800a0ea:	2b54      	cmp	r3, #84	; 0x54
 800a0ec:	f200 80a4 	bhi.w	800a238 <_malloc_r+0x490>
 800a0f0:	0b28      	lsrs	r0, r5, #12
 800a0f2:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
 800a0f6:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800a0fa:	306e      	adds	r0, #110	; 0x6e
 800a0fc:	e676      	b.n	8009dec <_malloc_r+0x44>
 800a0fe:	bf00      	nop
 800a100:	200005d8 	.word	0x200005d8
 800a104:	20000a54 	.word	0x20000a54
 800a108:	20000a58 	.word	0x20000a58
 800a10c:	20000a50 	.word	0x20000a50
 800a110:	20000a4c 	.word	0x20000a4c
 800a114:	200009e4 	.word	0x200009e4
 800a118:	0a5a      	lsrs	r2, r3, #9
 800a11a:	2a04      	cmp	r2, #4
 800a11c:	d95e      	bls.n	800a1dc <_malloc_r+0x434>
 800a11e:	2a14      	cmp	r2, #20
 800a120:	f200 80b3 	bhi.w	800a28a <_malloc_r+0x4e2>
 800a124:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 800a128:	0049      	lsls	r1, r1, #1
 800a12a:	325b      	adds	r2, #91	; 0x5b
 800a12c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
 800a130:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a134:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800a314 <_malloc_r+0x56c>
 800a138:	f1ac 0c08 	sub.w	ip, ip, #8
 800a13c:	458c      	cmp	ip, r1
 800a13e:	f000 8088 	beq.w	800a252 <_malloc_r+0x4aa>
 800a142:	684a      	ldr	r2, [r1, #4]
 800a144:	f022 0203 	bic.w	r2, r2, #3
 800a148:	4293      	cmp	r3, r2
 800a14a:	d202      	bcs.n	800a152 <_malloc_r+0x3aa>
 800a14c:	6889      	ldr	r1, [r1, #8]
 800a14e:	458c      	cmp	ip, r1
 800a150:	d1f7      	bne.n	800a142 <_malloc_r+0x39a>
 800a152:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	f8c4 c00c 	str.w	ip, [r4, #12]
 800a15c:	60a1      	str	r1, [r4, #8]
 800a15e:	f8cc 4008 	str.w	r4, [ip, #8]
 800a162:	60cc      	str	r4, [r1, #12]
 800a164:	e688      	b.n	8009e78 <_malloc_r+0xd0>
 800a166:	1963      	adds	r3, r4, r5
 800a168:	f042 0701 	orr.w	r7, r2, #1
 800a16c:	f045 0501 	orr.w	r5, r5, #1
 800a170:	6065      	str	r5, [r4, #4]
 800a172:	4630      	mov	r0, r6
 800a174:	614b      	str	r3, [r1, #20]
 800a176:	610b      	str	r3, [r1, #16]
 800a178:	f8c3 e00c 	str.w	lr, [r3, #12]
 800a17c:	f8c3 e008 	str.w	lr, [r3, #8]
 800a180:	605f      	str	r7, [r3, #4]
 800a182:	509a      	str	r2, [r3, r2]
 800a184:	3408      	adds	r4, #8
 800a186:	f000 f999 	bl	800a4bc <__malloc_unlock>
 800a18a:	e6d5      	b.n	8009f38 <_malloc_r+0x190>
 800a18c:	684a      	ldr	r2, [r1, #4]
 800a18e:	e673      	b.n	8009e78 <_malloc_r+0xd0>
 800a190:	f108 0801 	add.w	r8, r8, #1
 800a194:	f018 0f03 	tst.w	r8, #3
 800a198:	f10c 0c08 	add.w	ip, ip, #8
 800a19c:	f47f ae7f 	bne.w	8009e9e <_malloc_r+0xf6>
 800a1a0:	e030      	b.n	800a204 <_malloc_r+0x45c>
 800a1a2:	68dc      	ldr	r4, [r3, #12]
 800a1a4:	42a3      	cmp	r3, r4
 800a1a6:	bf08      	it	eq
 800a1a8:	3002      	addeq	r0, #2
 800a1aa:	f43f ae35 	beq.w	8009e18 <_malloc_r+0x70>
 800a1ae:	e6b3      	b.n	8009f18 <_malloc_r+0x170>
 800a1b0:	440b      	add	r3, r1
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	68c9      	ldr	r1, [r1, #12]
 800a1b8:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800a1bc:	f042 0201 	orr.w	r2, r2, #1
 800a1c0:	605a      	str	r2, [r3, #4]
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	60e9      	str	r1, [r5, #12]
 800a1c6:	608d      	str	r5, [r1, #8]
 800a1c8:	f000 f978 	bl	800a4bc <__malloc_unlock>
 800a1cc:	e6b4      	b.n	8009f38 <_malloc_r+0x190>
 800a1ce:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
 800a1d2:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 800a1d6:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800a1da:	e607      	b.n	8009dec <_malloc_r+0x44>
 800a1dc:	099a      	lsrs	r2, r3, #6
 800a1de:	f102 0139 	add.w	r1, r2, #57	; 0x39
 800a1e2:	0049      	lsls	r1, r1, #1
 800a1e4:	3238      	adds	r2, #56	; 0x38
 800a1e6:	e7a1      	b.n	800a12c <_malloc_r+0x384>
 800a1e8:	42bc      	cmp	r4, r7
 800a1ea:	4b4a      	ldr	r3, [pc, #296]	; (800a314 <_malloc_r+0x56c>)
 800a1ec:	f43f af00 	beq.w	8009ff0 <_malloc_r+0x248>
 800a1f0:	689c      	ldr	r4, [r3, #8]
 800a1f2:	6862      	ldr	r2, [r4, #4]
 800a1f4:	f022 0203 	bic.w	r2, r2, #3
 800a1f8:	e75a      	b.n	800a0b0 <_malloc_r+0x308>
 800a1fa:	f859 3908 	ldr.w	r3, [r9], #-8
 800a1fe:	4599      	cmp	r9, r3
 800a200:	f040 8082 	bne.w	800a308 <_malloc_r+0x560>
 800a204:	f010 0f03 	tst.w	r0, #3
 800a208:	f100 30ff 	add.w	r0, r0, #4294967295
 800a20c:	d1f5      	bne.n	800a1fa <_malloc_r+0x452>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	ea23 0304 	bic.w	r3, r3, r4
 800a214:	607b      	str	r3, [r7, #4]
 800a216:	0064      	lsls	r4, r4, #1
 800a218:	429c      	cmp	r4, r3
 800a21a:	f63f aebd 	bhi.w	8009f98 <_malloc_r+0x1f0>
 800a21e:	2c00      	cmp	r4, #0
 800a220:	f43f aeba 	beq.w	8009f98 <_malloc_r+0x1f0>
 800a224:	421c      	tst	r4, r3
 800a226:	4640      	mov	r0, r8
 800a228:	f47f ae35 	bne.w	8009e96 <_malloc_r+0xee>
 800a22c:	0064      	lsls	r4, r4, #1
 800a22e:	421c      	tst	r4, r3
 800a230:	f100 0004 	add.w	r0, r0, #4
 800a234:	d0fa      	beq.n	800a22c <_malloc_r+0x484>
 800a236:	e62e      	b.n	8009e96 <_malloc_r+0xee>
 800a238:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a23c:	d818      	bhi.n	800a270 <_malloc_r+0x4c8>
 800a23e:	0be8      	lsrs	r0, r5, #15
 800a240:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 800a244:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800a248:	3077      	adds	r0, #119	; 0x77
 800a24a:	e5cf      	b.n	8009dec <_malloc_r+0x44>
 800a24c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a250:	e6eb      	b.n	800a02a <_malloc_r+0x282>
 800a252:	2101      	movs	r1, #1
 800a254:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a258:	1092      	asrs	r2, r2, #2
 800a25a:	fa01 f202 	lsl.w	r2, r1, r2
 800a25e:	431a      	orrs	r2, r3
 800a260:	f8c8 2004 	str.w	r2, [r8, #4]
 800a264:	4661      	mov	r1, ip
 800a266:	e777      	b.n	800a158 <_malloc_r+0x3b0>
 800a268:	2301      	movs	r3, #1
 800a26a:	f8cb 3004 	str.w	r3, [fp, #4]
 800a26e:	e725      	b.n	800a0bc <_malloc_r+0x314>
 800a270:	f240 5254 	movw	r2, #1364	; 0x554
 800a274:	4293      	cmp	r3, r2
 800a276:	d820      	bhi.n	800a2ba <_malloc_r+0x512>
 800a278:	0ca8      	lsrs	r0, r5, #18
 800a27a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
 800a27e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 800a282:	307c      	adds	r0, #124	; 0x7c
 800a284:	e5b2      	b.n	8009dec <_malloc_r+0x44>
 800a286:	3210      	adds	r2, #16
 800a288:	e6a4      	b.n	8009fd4 <_malloc_r+0x22c>
 800a28a:	2a54      	cmp	r2, #84	; 0x54
 800a28c:	d826      	bhi.n	800a2dc <_malloc_r+0x534>
 800a28e:	0b1a      	lsrs	r2, r3, #12
 800a290:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 800a294:	0049      	lsls	r1, r1, #1
 800a296:	326e      	adds	r2, #110	; 0x6e
 800a298:	e748      	b.n	800a12c <_malloc_r+0x384>
 800a29a:	68bc      	ldr	r4, [r7, #8]
 800a29c:	6862      	ldr	r2, [r4, #4]
 800a29e:	f022 0203 	bic.w	r2, r2, #3
 800a2a2:	e705      	b.n	800a0b0 <_malloc_r+0x308>
 800a2a4:	f3ca 000b 	ubfx	r0, sl, #0, #12
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	f47f aea8 	bne.w	8009ffe <_malloc_r+0x256>
 800a2ae:	4442      	add	r2, r8
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	f042 0201 	orr.w	r2, r2, #1
 800a2b6:	605a      	str	r2, [r3, #4]
 800a2b8:	e6ec      	b.n	800a094 <_malloc_r+0x2ec>
 800a2ba:	23fe      	movs	r3, #254	; 0xfe
 800a2bc:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 800a2c0:	207e      	movs	r0, #126	; 0x7e
 800a2c2:	e593      	b.n	8009dec <_malloc_r+0x44>
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f04f 0900 	mov.w	r9, #0
 800a2ca:	e6c1      	b.n	800a050 <_malloc_r+0x2a8>
 800a2cc:	f104 0108 	add.w	r1, r4, #8
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	f7fe fe8f 	bl	8008ff4 <_free_r>
 800a2d6:	f8d9 1000 	ldr.w	r1, [r9]
 800a2da:	e6db      	b.n	800a094 <_malloc_r+0x2ec>
 800a2dc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a2e0:	d805      	bhi.n	800a2ee <_malloc_r+0x546>
 800a2e2:	0bda      	lsrs	r2, r3, #15
 800a2e4:	f102 0178 	add.w	r1, r2, #120	; 0x78
 800a2e8:	0049      	lsls	r1, r1, #1
 800a2ea:	3277      	adds	r2, #119	; 0x77
 800a2ec:	e71e      	b.n	800a12c <_malloc_r+0x384>
 800a2ee:	f240 5154 	movw	r1, #1364	; 0x554
 800a2f2:	428a      	cmp	r2, r1
 800a2f4:	d805      	bhi.n	800a302 <_malloc_r+0x55a>
 800a2f6:	0c9a      	lsrs	r2, r3, #18
 800a2f8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 800a2fc:	0049      	lsls	r1, r1, #1
 800a2fe:	327c      	adds	r2, #124	; 0x7c
 800a300:	e714      	b.n	800a12c <_malloc_r+0x384>
 800a302:	21fe      	movs	r1, #254	; 0xfe
 800a304:	227e      	movs	r2, #126	; 0x7e
 800a306:	e711      	b.n	800a12c <_malloc_r+0x384>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	e784      	b.n	800a216 <_malloc_r+0x46e>
 800a30c:	08e8      	lsrs	r0, r5, #3
 800a30e:	1c43      	adds	r3, r0, #1
 800a310:	005b      	lsls	r3, r3, #1
 800a312:	e5f8      	b.n	8009f06 <_malloc_r+0x15e>
 800a314:	200005d8 	.word	0x200005d8

0800a318 <__ascii_mbtowc>:
 800a318:	b082      	sub	sp, #8
 800a31a:	b149      	cbz	r1, 800a330 <__ascii_mbtowc+0x18>
 800a31c:	b15a      	cbz	r2, 800a336 <__ascii_mbtowc+0x1e>
 800a31e:	b16b      	cbz	r3, 800a33c <__ascii_mbtowc+0x24>
 800a320:	7813      	ldrb	r3, [r2, #0]
 800a322:	600b      	str	r3, [r1, #0]
 800a324:	7812      	ldrb	r2, [r2, #0]
 800a326:	1c10      	adds	r0, r2, #0
 800a328:	bf18      	it	ne
 800a32a:	2001      	movne	r0, #1
 800a32c:	b002      	add	sp, #8
 800a32e:	4770      	bx	lr
 800a330:	a901      	add	r1, sp, #4
 800a332:	2a00      	cmp	r2, #0
 800a334:	d1f3      	bne.n	800a31e <__ascii_mbtowc+0x6>
 800a336:	4610      	mov	r0, r2
 800a338:	b002      	add	sp, #8
 800a33a:	4770      	bx	lr
 800a33c:	f06f 0001 	mvn.w	r0, #1
 800a340:	e7f4      	b.n	800a32c <__ascii_mbtowc+0x14>
 800a342:	bf00      	nop
	...

0800a350 <memchr>:
 800a350:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800a354:	2a10      	cmp	r2, #16
 800a356:	db2b      	blt.n	800a3b0 <memchr+0x60>
 800a358:	f010 0f07 	tst.w	r0, #7
 800a35c:	d008      	beq.n	800a370 <memchr+0x20>
 800a35e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a362:	3a01      	subs	r2, #1
 800a364:	428b      	cmp	r3, r1
 800a366:	d02d      	beq.n	800a3c4 <memchr+0x74>
 800a368:	f010 0f07 	tst.w	r0, #7
 800a36c:	b342      	cbz	r2, 800a3c0 <memchr+0x70>
 800a36e:	d1f6      	bne.n	800a35e <memchr+0xe>
 800a370:	b4f0      	push	{r4, r5, r6, r7}
 800a372:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800a376:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800a37a:	f022 0407 	bic.w	r4, r2, #7
 800a37e:	f07f 0700 	mvns.w	r7, #0
 800a382:	2300      	movs	r3, #0
 800a384:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800a388:	3c08      	subs	r4, #8
 800a38a:	ea85 0501 	eor.w	r5, r5, r1
 800a38e:	ea86 0601 	eor.w	r6, r6, r1
 800a392:	fa85 f547 	uadd8	r5, r5, r7
 800a396:	faa3 f587 	sel	r5, r3, r7
 800a39a:	fa86 f647 	uadd8	r6, r6, r7
 800a39e:	faa5 f687 	sel	r6, r5, r7
 800a3a2:	b98e      	cbnz	r6, 800a3c8 <memchr+0x78>
 800a3a4:	d1ee      	bne.n	800a384 <memchr+0x34>
 800a3a6:	bcf0      	pop	{r4, r5, r6, r7}
 800a3a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800a3ac:	f002 0207 	and.w	r2, r2, #7
 800a3b0:	b132      	cbz	r2, 800a3c0 <memchr+0x70>
 800a3b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a3b6:	3a01      	subs	r2, #1
 800a3b8:	ea83 0301 	eor.w	r3, r3, r1
 800a3bc:	b113      	cbz	r3, 800a3c4 <memchr+0x74>
 800a3be:	d1f8      	bne.n	800a3b2 <memchr+0x62>
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	4770      	bx	lr
 800a3c4:	3801      	subs	r0, #1
 800a3c6:	4770      	bx	lr
 800a3c8:	2d00      	cmp	r5, #0
 800a3ca:	bf06      	itte	eq
 800a3cc:	4635      	moveq	r5, r6
 800a3ce:	3803      	subeq	r0, #3
 800a3d0:	3807      	subne	r0, #7
 800a3d2:	f015 0f01 	tst.w	r5, #1
 800a3d6:	d107      	bne.n	800a3e8 <memchr+0x98>
 800a3d8:	3001      	adds	r0, #1
 800a3da:	f415 7f80 	tst.w	r5, #256	; 0x100
 800a3de:	bf02      	ittt	eq
 800a3e0:	3001      	addeq	r0, #1
 800a3e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800a3e6:	3001      	addeq	r0, #1
 800a3e8:	bcf0      	pop	{r4, r5, r6, r7}
 800a3ea:	3801      	subs	r0, #1
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop

0800a3f0 <memmove>:
 800a3f0:	4288      	cmp	r0, r1
 800a3f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3f4:	d90d      	bls.n	800a412 <memmove+0x22>
 800a3f6:	188b      	adds	r3, r1, r2
 800a3f8:	4298      	cmp	r0, r3
 800a3fa:	d20a      	bcs.n	800a412 <memmove+0x22>
 800a3fc:	1881      	adds	r1, r0, r2
 800a3fe:	2a00      	cmp	r2, #0
 800a400:	d051      	beq.n	800a4a6 <memmove+0xb6>
 800a402:	1a9a      	subs	r2, r3, r2
 800a404:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a408:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d1f9      	bne.n	800a404 <memmove+0x14>
 800a410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a412:	2a0f      	cmp	r2, #15
 800a414:	d948      	bls.n	800a4a8 <memmove+0xb8>
 800a416:	ea41 0300 	orr.w	r3, r1, r0
 800a41a:	079b      	lsls	r3, r3, #30
 800a41c:	d146      	bne.n	800a4ac <memmove+0xbc>
 800a41e:	f100 0410 	add.w	r4, r0, #16
 800a422:	f101 0310 	add.w	r3, r1, #16
 800a426:	4615      	mov	r5, r2
 800a428:	f853 6c10 	ldr.w	r6, [r3, #-16]
 800a42c:	f844 6c10 	str.w	r6, [r4, #-16]
 800a430:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 800a434:	f844 6c0c 	str.w	r6, [r4, #-12]
 800a438:	f853 6c08 	ldr.w	r6, [r3, #-8]
 800a43c:	f844 6c08 	str.w	r6, [r4, #-8]
 800a440:	3d10      	subs	r5, #16
 800a442:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800a446:	f844 6c04 	str.w	r6, [r4, #-4]
 800a44a:	2d0f      	cmp	r5, #15
 800a44c:	f103 0310 	add.w	r3, r3, #16
 800a450:	f104 0410 	add.w	r4, r4, #16
 800a454:	d8e8      	bhi.n	800a428 <memmove+0x38>
 800a456:	f1a2 0310 	sub.w	r3, r2, #16
 800a45a:	f023 030f 	bic.w	r3, r3, #15
 800a45e:	f002 0e0f 	and.w	lr, r2, #15
 800a462:	3310      	adds	r3, #16
 800a464:	f1be 0f03 	cmp.w	lr, #3
 800a468:	4419      	add	r1, r3
 800a46a:	4403      	add	r3, r0
 800a46c:	d921      	bls.n	800a4b2 <memmove+0xc2>
 800a46e:	1f1e      	subs	r6, r3, #4
 800a470:	460d      	mov	r5, r1
 800a472:	4674      	mov	r4, lr
 800a474:	3c04      	subs	r4, #4
 800a476:	f855 7b04 	ldr.w	r7, [r5], #4
 800a47a:	f846 7f04 	str.w	r7, [r6, #4]!
 800a47e:	2c03      	cmp	r4, #3
 800a480:	d8f8      	bhi.n	800a474 <memmove+0x84>
 800a482:	f1ae 0404 	sub.w	r4, lr, #4
 800a486:	f024 0403 	bic.w	r4, r4, #3
 800a48a:	3404      	adds	r4, #4
 800a48c:	4423      	add	r3, r4
 800a48e:	4421      	add	r1, r4
 800a490:	f002 0203 	and.w	r2, r2, #3
 800a494:	b162      	cbz	r2, 800a4b0 <memmove+0xc0>
 800a496:	3b01      	subs	r3, #1
 800a498:	440a      	add	r2, r1
 800a49a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a49e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4a2:	428a      	cmp	r2, r1
 800a4a4:	d1f9      	bne.n	800a49a <memmove+0xaa>
 800a4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	e7f3      	b.n	800a494 <memmove+0xa4>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	e7f2      	b.n	800a496 <memmove+0xa6>
 800a4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4b2:	4672      	mov	r2, lr
 800a4b4:	e7ee      	b.n	800a494 <memmove+0xa4>
 800a4b6:	bf00      	nop

0800a4b8 <__malloc_lock>:
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop

0800a4bc <__malloc_unlock>:
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop

0800a4c0 <_Balloc>:
 800a4c0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a4c2:	b570      	push	{r4, r5, r6, lr}
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	b14b      	cbz	r3, 800a4de <_Balloc+0x1e>
 800a4ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a4ce:	b180      	cbz	r0, 800a4f2 <_Balloc+0x32>
 800a4d0:	6802      	ldr	r2, [r0, #0]
 800a4d2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	6103      	str	r3, [r0, #16]
 800a4da:	60c3      	str	r3, [r0, #12]
 800a4dc:	bd70      	pop	{r4, r5, r6, pc}
 800a4de:	2221      	movs	r2, #33	; 0x21
 800a4e0:	2104      	movs	r1, #4
 800a4e2:	f000 ff83 	bl	800b3ec <_calloc_r>
 800a4e6:	64e8      	str	r0, [r5, #76]	; 0x4c
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	d1ed      	bne.n	800a4ca <_Balloc+0xa>
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	bd70      	pop	{r4, r5, r6, pc}
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	fa01 f604 	lsl.w	r6, r1, r4
 800a4f8:	1d72      	adds	r2, r6, #5
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	0092      	lsls	r2, r2, #2
 800a4fe:	f000 ff75 	bl	800b3ec <_calloc_r>
 800a502:	2800      	cmp	r0, #0
 800a504:	d0f3      	beq.n	800a4ee <_Balloc+0x2e>
 800a506:	6044      	str	r4, [r0, #4]
 800a508:	6086      	str	r6, [r0, #8]
 800a50a:	e7e4      	b.n	800a4d6 <_Balloc+0x16>

0800a50c <_Bfree>:
 800a50c:	b131      	cbz	r1, 800a51c <_Bfree+0x10>
 800a50e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a510:	684a      	ldr	r2, [r1, #4]
 800a512:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a516:	6008      	str	r0, [r1, #0]
 800a518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop

0800a520 <__multadd>:
 800a520:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a522:	690c      	ldr	r4, [r1, #16]
 800a524:	b083      	sub	sp, #12
 800a526:	460d      	mov	r5, r1
 800a528:	4606      	mov	r6, r0
 800a52a:	f101 0e14 	add.w	lr, r1, #20
 800a52e:	2700      	movs	r7, #0
 800a530:	f8de 0000 	ldr.w	r0, [lr]
 800a534:	b281      	uxth	r1, r0
 800a536:	fb02 3101 	mla	r1, r2, r1, r3
 800a53a:	0c0b      	lsrs	r3, r1, #16
 800a53c:	0c00      	lsrs	r0, r0, #16
 800a53e:	fb02 3300 	mla	r3, r2, r0, r3
 800a542:	b289      	uxth	r1, r1
 800a544:	3701      	adds	r7, #1
 800a546:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a54a:	42bc      	cmp	r4, r7
 800a54c:	f84e 1b04 	str.w	r1, [lr], #4
 800a550:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a554:	dcec      	bgt.n	800a530 <__multadd+0x10>
 800a556:	b13b      	cbz	r3, 800a568 <__multadd+0x48>
 800a558:	68aa      	ldr	r2, [r5, #8]
 800a55a:	4294      	cmp	r4, r2
 800a55c:	da07      	bge.n	800a56e <__multadd+0x4e>
 800a55e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800a562:	3401      	adds	r4, #1
 800a564:	6153      	str	r3, [r2, #20]
 800a566:	612c      	str	r4, [r5, #16]
 800a568:	4628      	mov	r0, r5
 800a56a:	b003      	add	sp, #12
 800a56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a56e:	6869      	ldr	r1, [r5, #4]
 800a570:	9301      	str	r3, [sp, #4]
 800a572:	3101      	adds	r1, #1
 800a574:	4630      	mov	r0, r6
 800a576:	f7ff ffa3 	bl	800a4c0 <_Balloc>
 800a57a:	692a      	ldr	r2, [r5, #16]
 800a57c:	3202      	adds	r2, #2
 800a57e:	f105 010c 	add.w	r1, r5, #12
 800a582:	4607      	mov	r7, r0
 800a584:	0092      	lsls	r2, r2, #2
 800a586:	300c      	adds	r0, #12
 800a588:	f7f9 fa30 	bl	80039ec <memcpy>
 800a58c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800a58e:	6869      	ldr	r1, [r5, #4]
 800a590:	9b01      	ldr	r3, [sp, #4]
 800a592:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800a596:	6028      	str	r0, [r5, #0]
 800a598:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800a59c:	463d      	mov	r5, r7
 800a59e:	e7de      	b.n	800a55e <__multadd+0x3e>

0800a5a0 <__s2b>:
 800a5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5a4:	4c23      	ldr	r4, [pc, #140]	; (800a634 <__s2b+0x94>)
 800a5a6:	9d08      	ldr	r5, [sp, #32]
 800a5a8:	461f      	mov	r7, r3
 800a5aa:	3308      	adds	r3, #8
 800a5ac:	fb84 4e03 	smull	r4, lr, r4, r3
 800a5b0:	17db      	asrs	r3, r3, #31
 800a5b2:	ebc3 0e6e 	rsb	lr, r3, lr, asr #1
 800a5b6:	f1be 0f01 	cmp.w	lr, #1
 800a5ba:	4606      	mov	r6, r0
 800a5bc:	460c      	mov	r4, r1
 800a5be:	4690      	mov	r8, r2
 800a5c0:	dd35      	ble.n	800a62e <__s2b+0x8e>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	005b      	lsls	r3, r3, #1
 800a5c8:	459e      	cmp	lr, r3
 800a5ca:	f101 0101 	add.w	r1, r1, #1
 800a5ce:	dcfa      	bgt.n	800a5c6 <__s2b+0x26>
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7ff ff75 	bl	800a4c0 <_Balloc>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	f1b8 0f09 	cmp.w	r8, #9
 800a5dc:	6145      	str	r5, [r0, #20]
 800a5de:	6103      	str	r3, [r0, #16]
 800a5e0:	dd21      	ble.n	800a626 <__s2b+0x86>
 800a5e2:	f104 0909 	add.w	r9, r4, #9
 800a5e6:	464d      	mov	r5, r9
 800a5e8:	4444      	add	r4, r8
 800a5ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a5ee:	4601      	mov	r1, r0
 800a5f0:	3b30      	subs	r3, #48	; 0x30
 800a5f2:	220a      	movs	r2, #10
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f7ff ff93 	bl	800a520 <__multadd>
 800a5fa:	42a5      	cmp	r5, r4
 800a5fc:	d1f5      	bne.n	800a5ea <__s2b+0x4a>
 800a5fe:	eb09 0408 	add.w	r4, r9, r8
 800a602:	3c08      	subs	r4, #8
 800a604:	4547      	cmp	r7, r8
 800a606:	dd0c      	ble.n	800a622 <__s2b+0x82>
 800a608:	ebc8 0707 	rsb	r7, r8, r7
 800a60c:	4427      	add	r7, r4
 800a60e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a612:	4601      	mov	r1, r0
 800a614:	3b30      	subs	r3, #48	; 0x30
 800a616:	220a      	movs	r2, #10
 800a618:	4630      	mov	r0, r6
 800a61a:	f7ff ff81 	bl	800a520 <__multadd>
 800a61e:	42a7      	cmp	r7, r4
 800a620:	d1f5      	bne.n	800a60e <__s2b+0x6e>
 800a622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a626:	340a      	adds	r4, #10
 800a628:	f04f 0809 	mov.w	r8, #9
 800a62c:	e7ea      	b.n	800a604 <__s2b+0x64>
 800a62e:	2100      	movs	r1, #0
 800a630:	e7ce      	b.n	800a5d0 <__s2b+0x30>
 800a632:	bf00      	nop
 800a634:	38e38e39 	.word	0x38e38e39

0800a638 <__hi0bits>:
 800a638:	0c03      	lsrs	r3, r0, #16
 800a63a:	041b      	lsls	r3, r3, #16
 800a63c:	b9b3      	cbnz	r3, 800a66c <__hi0bits+0x34>
 800a63e:	0400      	lsls	r0, r0, #16
 800a640:	2310      	movs	r3, #16
 800a642:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a646:	bf04      	itt	eq
 800a648:	0200      	lsleq	r0, r0, #8
 800a64a:	3308      	addeq	r3, #8
 800a64c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a650:	bf04      	itt	eq
 800a652:	0100      	lsleq	r0, r0, #4
 800a654:	3304      	addeq	r3, #4
 800a656:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a65a:	bf04      	itt	eq
 800a65c:	0080      	lsleq	r0, r0, #2
 800a65e:	3302      	addeq	r3, #2
 800a660:	2800      	cmp	r0, #0
 800a662:	db07      	blt.n	800a674 <__hi0bits+0x3c>
 800a664:	0042      	lsls	r2, r0, #1
 800a666:	d403      	bmi.n	800a670 <__hi0bits+0x38>
 800a668:	2020      	movs	r0, #32
 800a66a:	4770      	bx	lr
 800a66c:	2300      	movs	r3, #0
 800a66e:	e7e8      	b.n	800a642 <__hi0bits+0xa>
 800a670:	1c58      	adds	r0, r3, #1
 800a672:	4770      	bx	lr
 800a674:	4618      	mov	r0, r3
 800a676:	4770      	bx	lr

0800a678 <__lo0bits>:
 800a678:	6803      	ldr	r3, [r0, #0]
 800a67a:	f013 0207 	ands.w	r2, r3, #7
 800a67e:	d007      	beq.n	800a690 <__lo0bits+0x18>
 800a680:	07d9      	lsls	r1, r3, #31
 800a682:	d420      	bmi.n	800a6c6 <__lo0bits+0x4e>
 800a684:	079a      	lsls	r2, r3, #30
 800a686:	d420      	bmi.n	800a6ca <__lo0bits+0x52>
 800a688:	089b      	lsrs	r3, r3, #2
 800a68a:	6003      	str	r3, [r0, #0]
 800a68c:	2002      	movs	r0, #2
 800a68e:	4770      	bx	lr
 800a690:	b299      	uxth	r1, r3
 800a692:	b909      	cbnz	r1, 800a698 <__lo0bits+0x20>
 800a694:	0c1b      	lsrs	r3, r3, #16
 800a696:	2210      	movs	r2, #16
 800a698:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a69c:	bf04      	itt	eq
 800a69e:	0a1b      	lsreq	r3, r3, #8
 800a6a0:	3208      	addeq	r2, #8
 800a6a2:	0719      	lsls	r1, r3, #28
 800a6a4:	bf04      	itt	eq
 800a6a6:	091b      	lsreq	r3, r3, #4
 800a6a8:	3204      	addeq	r2, #4
 800a6aa:	0799      	lsls	r1, r3, #30
 800a6ac:	bf04      	itt	eq
 800a6ae:	089b      	lsreq	r3, r3, #2
 800a6b0:	3202      	addeq	r2, #2
 800a6b2:	07d9      	lsls	r1, r3, #31
 800a6b4:	d404      	bmi.n	800a6c0 <__lo0bits+0x48>
 800a6b6:	085b      	lsrs	r3, r3, #1
 800a6b8:	d101      	bne.n	800a6be <__lo0bits+0x46>
 800a6ba:	2020      	movs	r0, #32
 800a6bc:	4770      	bx	lr
 800a6be:	3201      	adds	r2, #1
 800a6c0:	6003      	str	r3, [r0, #0]
 800a6c2:	4610      	mov	r0, r2
 800a6c4:	4770      	bx	lr
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	4770      	bx	lr
 800a6ca:	085b      	lsrs	r3, r3, #1
 800a6cc:	6003      	str	r3, [r0, #0]
 800a6ce:	2001      	movs	r0, #1
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop

0800a6d4 <__i2b>:
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	2101      	movs	r1, #1
 800a6da:	f7ff fef1 	bl	800a4c0 <_Balloc>
 800a6de:	2201      	movs	r2, #1
 800a6e0:	6144      	str	r4, [r0, #20]
 800a6e2:	6102      	str	r2, [r0, #16]
 800a6e4:	bd10      	pop	{r4, pc}
 800a6e6:	bf00      	nop

0800a6e8 <__multiply>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	690d      	ldr	r5, [r1, #16]
 800a6ee:	6917      	ldr	r7, [r2, #16]
 800a6f0:	42bd      	cmp	r5, r7
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	460c      	mov	r4, r1
 800a6f6:	4616      	mov	r6, r2
 800a6f8:	da04      	bge.n	800a704 <__multiply+0x1c>
 800a6fa:	462a      	mov	r2, r5
 800a6fc:	4634      	mov	r4, r6
 800a6fe:	463d      	mov	r5, r7
 800a700:	460e      	mov	r6, r1
 800a702:	4617      	mov	r7, r2
 800a704:	68a3      	ldr	r3, [r4, #8]
 800a706:	6861      	ldr	r1, [r4, #4]
 800a708:	eb05 0807 	add.w	r8, r5, r7
 800a70c:	4598      	cmp	r8, r3
 800a70e:	bfc8      	it	gt
 800a710:	3101      	addgt	r1, #1
 800a712:	f7ff fed5 	bl	800a4c0 <_Balloc>
 800a716:	f100 0c14 	add.w	ip, r0, #20
 800a71a:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 800a71e:	45cc      	cmp	ip, r9
 800a720:	9000      	str	r0, [sp, #0]
 800a722:	d205      	bcs.n	800a730 <__multiply+0x48>
 800a724:	4663      	mov	r3, ip
 800a726:	2100      	movs	r1, #0
 800a728:	f843 1b04 	str.w	r1, [r3], #4
 800a72c:	4599      	cmp	r9, r3
 800a72e:	d8fb      	bhi.n	800a728 <__multiply+0x40>
 800a730:	f106 0214 	add.w	r2, r6, #20
 800a734:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 800a738:	f104 0314 	add.w	r3, r4, #20
 800a73c:	4552      	cmp	r2, sl
 800a73e:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
 800a742:	d254      	bcs.n	800a7ee <__multiply+0x106>
 800a744:	f8cd 9004 	str.w	r9, [sp, #4]
 800a748:	4699      	mov	r9, r3
 800a74a:	f852 3b04 	ldr.w	r3, [r2], #4
 800a74e:	fa1f fb83 	uxth.w	fp, r3
 800a752:	f1bb 0f00 	cmp.w	fp, #0
 800a756:	d020      	beq.n	800a79a <__multiply+0xb2>
 800a758:	2000      	movs	r0, #0
 800a75a:	464f      	mov	r7, r9
 800a75c:	4666      	mov	r6, ip
 800a75e:	4605      	mov	r5, r0
 800a760:	e000      	b.n	800a764 <__multiply+0x7c>
 800a762:	461e      	mov	r6, r3
 800a764:	f857 4b04 	ldr.w	r4, [r7], #4
 800a768:	6830      	ldr	r0, [r6, #0]
 800a76a:	b2a1      	uxth	r1, r4
 800a76c:	b283      	uxth	r3, r0
 800a76e:	fb0b 3101 	mla	r1, fp, r1, r3
 800a772:	0c24      	lsrs	r4, r4, #16
 800a774:	0c00      	lsrs	r0, r0, #16
 800a776:	194b      	adds	r3, r1, r5
 800a778:	fb0b 0004 	mla	r0, fp, r4, r0
 800a77c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800a780:	b299      	uxth	r1, r3
 800a782:	4633      	mov	r3, r6
 800a784:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a788:	45be      	cmp	lr, r7
 800a78a:	ea4f 4510 	mov.w	r5, r0, lsr #16
 800a78e:	f843 1b04 	str.w	r1, [r3], #4
 800a792:	d8e6      	bhi.n	800a762 <__multiply+0x7a>
 800a794:	6075      	str	r5, [r6, #4]
 800a796:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800a79a:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 800a79e:	d020      	beq.n	800a7e2 <__multiply+0xfa>
 800a7a0:	f8dc 3000 	ldr.w	r3, [ip]
 800a7a4:	4667      	mov	r7, ip
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	464d      	mov	r5, r9
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	e000      	b.n	800a7b0 <__multiply+0xc8>
 800a7ae:	4637      	mov	r7, r6
 800a7b0:	882c      	ldrh	r4, [r5, #0]
 800a7b2:	0c00      	lsrs	r0, r0, #16
 800a7b4:	fb0b 0004 	mla	r0, fp, r4, r0
 800a7b8:	4401      	add	r1, r0
 800a7ba:	b29c      	uxth	r4, r3
 800a7bc:	463e      	mov	r6, r7
 800a7be:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800a7c2:	f846 3b04 	str.w	r3, [r6], #4
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f855 4b04 	ldr.w	r4, [r5], #4
 800a7cc:	b283      	uxth	r3, r0
 800a7ce:	0c24      	lsrs	r4, r4, #16
 800a7d0:	fb0b 3404 	mla	r4, fp, r4, r3
 800a7d4:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 800a7d8:	45ae      	cmp	lr, r5
 800a7da:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800a7de:	d8e6      	bhi.n	800a7ae <__multiply+0xc6>
 800a7e0:	607b      	str	r3, [r7, #4]
 800a7e2:	4592      	cmp	sl, r2
 800a7e4:	f10c 0c04 	add.w	ip, ip, #4
 800a7e8:	d8af      	bhi.n	800a74a <__multiply+0x62>
 800a7ea:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a7ee:	f1b8 0f00 	cmp.w	r8, #0
 800a7f2:	dd0b      	ble.n	800a80c <__multiply+0x124>
 800a7f4:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800a7f8:	f1a9 0904 	sub.w	r9, r9, #4
 800a7fc:	b11b      	cbz	r3, 800a806 <__multiply+0x11e>
 800a7fe:	e005      	b.n	800a80c <__multiply+0x124>
 800a800:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 800a804:	b913      	cbnz	r3, 800a80c <__multiply+0x124>
 800a806:	f1b8 0801 	subs.w	r8, r8, #1
 800a80a:	d1f9      	bne.n	800a800 <__multiply+0x118>
 800a80c:	9800      	ldr	r0, [sp, #0]
 800a80e:	f8c0 8010 	str.w	r8, [r0, #16]
 800a812:	b003      	add	sp, #12
 800a814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a818 <__pow5mult>:
 800a818:	f012 0303 	ands.w	r3, r2, #3
 800a81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a820:	4614      	mov	r4, r2
 800a822:	4607      	mov	r7, r0
 800a824:	d12e      	bne.n	800a884 <__pow5mult+0x6c>
 800a826:	460e      	mov	r6, r1
 800a828:	10a4      	asrs	r4, r4, #2
 800a82a:	d01c      	beq.n	800a866 <__pow5mult+0x4e>
 800a82c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800a82e:	b395      	cbz	r5, 800a896 <__pow5mult+0x7e>
 800a830:	07e3      	lsls	r3, r4, #31
 800a832:	f04f 0800 	mov.w	r8, #0
 800a836:	d406      	bmi.n	800a846 <__pow5mult+0x2e>
 800a838:	1064      	asrs	r4, r4, #1
 800a83a:	d014      	beq.n	800a866 <__pow5mult+0x4e>
 800a83c:	6828      	ldr	r0, [r5, #0]
 800a83e:	b1a8      	cbz	r0, 800a86c <__pow5mult+0x54>
 800a840:	4605      	mov	r5, r0
 800a842:	07e3      	lsls	r3, r4, #31
 800a844:	d5f8      	bpl.n	800a838 <__pow5mult+0x20>
 800a846:	462a      	mov	r2, r5
 800a848:	4631      	mov	r1, r6
 800a84a:	4638      	mov	r0, r7
 800a84c:	f7ff ff4c 	bl	800a6e8 <__multiply>
 800a850:	b1b6      	cbz	r6, 800a880 <__pow5mult+0x68>
 800a852:	6872      	ldr	r2, [r6, #4]
 800a854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a856:	1064      	asrs	r4, r4, #1
 800a858:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a85c:	6031      	str	r1, [r6, #0]
 800a85e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800a862:	4606      	mov	r6, r0
 800a864:	d1ea      	bne.n	800a83c <__pow5mult+0x24>
 800a866:	4630      	mov	r0, r6
 800a868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a86c:	462a      	mov	r2, r5
 800a86e:	4629      	mov	r1, r5
 800a870:	4638      	mov	r0, r7
 800a872:	f7ff ff39 	bl	800a6e8 <__multiply>
 800a876:	6028      	str	r0, [r5, #0]
 800a878:	f8c0 8000 	str.w	r8, [r0]
 800a87c:	4605      	mov	r5, r0
 800a87e:	e7e0      	b.n	800a842 <__pow5mult+0x2a>
 800a880:	4606      	mov	r6, r0
 800a882:	e7d9      	b.n	800a838 <__pow5mult+0x20>
 800a884:	1e5a      	subs	r2, r3, #1
 800a886:	4d0b      	ldr	r5, [pc, #44]	; (800a8b4 <__pow5mult+0x9c>)
 800a888:	2300      	movs	r3, #0
 800a88a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a88e:	f7ff fe47 	bl	800a520 <__multadd>
 800a892:	4606      	mov	r6, r0
 800a894:	e7c8      	b.n	800a828 <__pow5mult+0x10>
 800a896:	2101      	movs	r1, #1
 800a898:	4638      	mov	r0, r7
 800a89a:	f7ff fe11 	bl	800a4c0 <_Balloc>
 800a89e:	f240 2171 	movw	r1, #625	; 0x271
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	6141      	str	r1, [r0, #20]
 800a8a8:	6102      	str	r2, [r0, #16]
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	64b8      	str	r0, [r7, #72]	; 0x48
 800a8ae:	6003      	str	r3, [r0, #0]
 800a8b0:	e7be      	b.n	800a830 <__pow5mult+0x18>
 800a8b2:	bf00      	nop
 800a8b4:	0800c028 	.word	0x0800c028

0800a8b8 <__lshift>:
 800a8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8bc:	4691      	mov	r9, r2
 800a8be:	690a      	ldr	r2, [r1, #16]
 800a8c0:	688b      	ldr	r3, [r1, #8]
 800a8c2:	ea4f 1469 	mov.w	r4, r9, asr #5
 800a8c6:	eb04 0802 	add.w	r8, r4, r2
 800a8ca:	f108 0501 	add.w	r5, r8, #1
 800a8ce:	429d      	cmp	r5, r3
 800a8d0:	460e      	mov	r6, r1
 800a8d2:	4682      	mov	sl, r0
 800a8d4:	6849      	ldr	r1, [r1, #4]
 800a8d6:	dd04      	ble.n	800a8e2 <__lshift+0x2a>
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	429d      	cmp	r5, r3
 800a8dc:	f101 0101 	add.w	r1, r1, #1
 800a8e0:	dcfa      	bgt.n	800a8d8 <__lshift+0x20>
 800a8e2:	4650      	mov	r0, sl
 800a8e4:	f7ff fdec 	bl	800a4c0 <_Balloc>
 800a8e8:	2c00      	cmp	r4, #0
 800a8ea:	f100 0214 	add.w	r2, r0, #20
 800a8ee:	dd38      	ble.n	800a962 <__lshift+0xaa>
 800a8f0:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	f842 1b04 	str.w	r1, [r2], #4
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d1fb      	bne.n	800a8f6 <__lshift+0x3e>
 800a8fe:	6934      	ldr	r4, [r6, #16]
 800a900:	f106 0114 	add.w	r1, r6, #20
 800a904:	f019 091f 	ands.w	r9, r9, #31
 800a908:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 800a90c:	d021      	beq.n	800a952 <__lshift+0x9a>
 800a90e:	f1c9 0220 	rsb	r2, r9, #32
 800a912:	2400      	movs	r4, #0
 800a914:	680f      	ldr	r7, [r1, #0]
 800a916:	fa07 fc09 	lsl.w	ip, r7, r9
 800a91a:	ea4c 0404 	orr.w	r4, ip, r4
 800a91e:	469c      	mov	ip, r3
 800a920:	f843 4b04 	str.w	r4, [r3], #4
 800a924:	f851 4b04 	ldr.w	r4, [r1], #4
 800a928:	458e      	cmp	lr, r1
 800a92a:	fa24 f402 	lsr.w	r4, r4, r2
 800a92e:	d8f1      	bhi.n	800a914 <__lshift+0x5c>
 800a930:	f8cc 4004 	str.w	r4, [ip, #4]
 800a934:	b10c      	cbz	r4, 800a93a <__lshift+0x82>
 800a936:	f108 0502 	add.w	r5, r8, #2
 800a93a:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800a93e:	6872      	ldr	r2, [r6, #4]
 800a940:	3d01      	subs	r5, #1
 800a942:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a946:	6105      	str	r5, [r0, #16]
 800a948:	6031      	str	r1, [r6, #0]
 800a94a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800a94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a952:	3b04      	subs	r3, #4
 800a954:	f851 2b04 	ldr.w	r2, [r1], #4
 800a958:	f843 2f04 	str.w	r2, [r3, #4]!
 800a95c:	458e      	cmp	lr, r1
 800a95e:	d8f9      	bhi.n	800a954 <__lshift+0x9c>
 800a960:	e7eb      	b.n	800a93a <__lshift+0x82>
 800a962:	4613      	mov	r3, r2
 800a964:	e7cb      	b.n	800a8fe <__lshift+0x46>
 800a966:	bf00      	nop

0800a968 <__mcmp>:
 800a968:	6902      	ldr	r2, [r0, #16]
 800a96a:	690b      	ldr	r3, [r1, #16]
 800a96c:	1ad2      	subs	r2, r2, r3
 800a96e:	d113      	bne.n	800a998 <__mcmp+0x30>
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	3014      	adds	r0, #20
 800a974:	3114      	adds	r1, #20
 800a976:	4419      	add	r1, r3
 800a978:	b410      	push	{r4}
 800a97a:	4403      	add	r3, r0
 800a97c:	e001      	b.n	800a982 <__mcmp+0x1a>
 800a97e:	4298      	cmp	r0, r3
 800a980:	d20c      	bcs.n	800a99c <__mcmp+0x34>
 800a982:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800a986:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a98a:	4294      	cmp	r4, r2
 800a98c:	d0f7      	beq.n	800a97e <__mcmp+0x16>
 800a98e:	d309      	bcc.n	800a9a4 <__mcmp+0x3c>
 800a990:	2001      	movs	r0, #1
 800a992:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a996:	4770      	bx	lr
 800a998:	4610      	mov	r0, r2
 800a99a:	4770      	bx	lr
 800a99c:	2000      	movs	r0, #0
 800a99e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a8:	e7f3      	b.n	800a992 <__mcmp+0x2a>
 800a9aa:	bf00      	nop

0800a9ac <__mdiff>:
 800a9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b0:	690b      	ldr	r3, [r1, #16]
 800a9b2:	460f      	mov	r7, r1
 800a9b4:	6911      	ldr	r1, [r2, #16]
 800a9b6:	1a5b      	subs	r3, r3, r1
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	4690      	mov	r8, r2
 800a9bc:	d117      	bne.n	800a9ee <__mdiff+0x42>
 800a9be:	0089      	lsls	r1, r1, #2
 800a9c0:	f107 0214 	add.w	r2, r7, #20
 800a9c4:	f108 0514 	add.w	r5, r8, #20
 800a9c8:	1853      	adds	r3, r2, r1
 800a9ca:	4429      	add	r1, r5
 800a9cc:	e001      	b.n	800a9d2 <__mdiff+0x26>
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d25e      	bcs.n	800aa90 <__mdiff+0xe4>
 800a9d2:	f853 6d04 	ldr.w	r6, [r3, #-4]!
 800a9d6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a9da:	42a6      	cmp	r6, r4
 800a9dc:	d0f7      	beq.n	800a9ce <__mdiff+0x22>
 800a9de:	d260      	bcs.n	800aaa2 <__mdiff+0xf6>
 800a9e0:	463b      	mov	r3, r7
 800a9e2:	4614      	mov	r4, r2
 800a9e4:	4647      	mov	r7, r8
 800a9e6:	f04f 0901 	mov.w	r9, #1
 800a9ea:	4698      	mov	r8, r3
 800a9ec:	e006      	b.n	800a9fc <__mdiff+0x50>
 800a9ee:	db5d      	blt.n	800aaac <__mdiff+0x100>
 800a9f0:	f107 0514 	add.w	r5, r7, #20
 800a9f4:	f102 0414 	add.w	r4, r2, #20
 800a9f8:	f04f 0900 	mov.w	r9, #0
 800a9fc:	6879      	ldr	r1, [r7, #4]
 800a9fe:	f7ff fd5f 	bl	800a4c0 <_Balloc>
 800aa02:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800aa06:	693e      	ldr	r6, [r7, #16]
 800aa08:	f8c0 900c 	str.w	r9, [r0, #12]
 800aa0c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 800aa10:	46a6      	mov	lr, r4
 800aa12:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800aa16:	f100 0414 	add.w	r4, r0, #20
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	f85e 1b04 	ldr.w	r1, [lr], #4
 800aa20:	f855 8b04 	ldr.w	r8, [r5], #4
 800aa24:	b28a      	uxth	r2, r1
 800aa26:	fa13 f388 	uxtah	r3, r3, r8
 800aa2a:	0c09      	lsrs	r1, r1, #16
 800aa2c:	1a9a      	subs	r2, r3, r2
 800aa2e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 800aa32:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800aa36:	b292      	uxth	r2, r2
 800aa38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa3c:	45f4      	cmp	ip, lr
 800aa3e:	f844 2b04 	str.w	r2, [r4], #4
 800aa42:	ea4f 4323 	mov.w	r3, r3, asr #16
 800aa46:	d8e9      	bhi.n	800aa1c <__mdiff+0x70>
 800aa48:	42af      	cmp	r7, r5
 800aa4a:	d917      	bls.n	800aa7c <__mdiff+0xd0>
 800aa4c:	46a4      	mov	ip, r4
 800aa4e:	4629      	mov	r1, r5
 800aa50:	f851 eb04 	ldr.w	lr, [r1], #4
 800aa54:	fa13 f28e 	uxtah	r2, r3, lr
 800aa58:	1413      	asrs	r3, r2, #16
 800aa5a:	eb03 431e 	add.w	r3, r3, lr, lsr #16
 800aa5e:	b292      	uxth	r2, r2
 800aa60:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa64:	428f      	cmp	r7, r1
 800aa66:	f84c 2b04 	str.w	r2, [ip], #4
 800aa6a:	ea4f 4323 	mov.w	r3, r3, asr #16
 800aa6e:	d8ef      	bhi.n	800aa50 <__mdiff+0xa4>
 800aa70:	43ed      	mvns	r5, r5
 800aa72:	443d      	add	r5, r7
 800aa74:	f025 0503 	bic.w	r5, r5, #3
 800aa78:	3504      	adds	r5, #4
 800aa7a:	442c      	add	r4, r5
 800aa7c:	3c04      	subs	r4, #4
 800aa7e:	b922      	cbnz	r2, 800aa8a <__mdiff+0xde>
 800aa80:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800aa84:	3e01      	subs	r6, #1
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d0fa      	beq.n	800aa80 <__mdiff+0xd4>
 800aa8a:	6106      	str	r6, [r0, #16]
 800aa8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa90:	2100      	movs	r1, #0
 800aa92:	f7ff fd15 	bl	800a4c0 <_Balloc>
 800aa96:	2201      	movs	r2, #1
 800aa98:	2300      	movs	r3, #0
 800aa9a:	6102      	str	r2, [r0, #16]
 800aa9c:	6143      	str	r3, [r0, #20]
 800aa9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaa2:	462c      	mov	r4, r5
 800aaa4:	f04f 0900 	mov.w	r9, #0
 800aaa8:	4615      	mov	r5, r2
 800aaaa:	e7a7      	b.n	800a9fc <__mdiff+0x50>
 800aaac:	463b      	mov	r3, r7
 800aaae:	f107 0414 	add.w	r4, r7, #20
 800aab2:	f108 0514 	add.w	r5, r8, #20
 800aab6:	4647      	mov	r7, r8
 800aab8:	f04f 0901 	mov.w	r9, #1
 800aabc:	4698      	mov	r8, r3
 800aabe:	e79d      	b.n	800a9fc <__mdiff+0x50>

0800aac0 <__ulp>:
 800aac0:	4b0f      	ldr	r3, [pc, #60]	; (800ab00 <__ulp+0x40>)
 800aac2:	400b      	ands	r3, r1
 800aac4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	dd02      	ble.n	800aad2 <__ulp+0x12>
 800aacc:	2000      	movs	r0, #0
 800aace:	4619      	mov	r1, r3
 800aad0:	4770      	bx	lr
 800aad2:	425b      	negs	r3, r3
 800aad4:	151b      	asrs	r3, r3, #20
 800aad6:	2b13      	cmp	r3, #19
 800aad8:	dd0b      	ble.n	800aaf2 <__ulp+0x32>
 800aada:	3b14      	subs	r3, #20
 800aadc:	2b1e      	cmp	r3, #30
 800aade:	bfdd      	ittte	le
 800aae0:	f1c3 031f 	rsble	r3, r3, #31
 800aae4:	2201      	movle	r2, #1
 800aae6:	fa02 f303 	lslle.w	r3, r2, r3
 800aaea:	2301      	movgt	r3, #1
 800aaec:	2100      	movs	r1, #0
 800aaee:	4618      	mov	r0, r3
 800aaf0:	4770      	bx	lr
 800aaf2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	fa42 f103 	asr.w	r1, r2, r3
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	7ff00000 	.word	0x7ff00000

0800ab04 <__b2d>:
 800ab04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab08:	6906      	ldr	r6, [r0, #16]
 800ab0a:	f100 0814 	add.w	r8, r0, #20
 800ab0e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ab12:	f856 7c04 	ldr.w	r7, [r6, #-4]
 800ab16:	4638      	mov	r0, r7
 800ab18:	f7ff fd8e 	bl	800a638 <__hi0bits>
 800ab1c:	f1c0 0320 	rsb	r3, r0, #32
 800ab20:	280a      	cmp	r0, #10
 800ab22:	600b      	str	r3, [r1, #0]
 800ab24:	f1a6 0304 	sub.w	r3, r6, #4
 800ab28:	dc1a      	bgt.n	800ab60 <__b2d+0x5c>
 800ab2a:	4598      	cmp	r8, r3
 800ab2c:	bf38      	it	cc
 800ab2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab32:	f1c0 020b 	rsb	r2, r0, #11
 800ab36:	fa27 f102 	lsr.w	r1, r7, r2
 800ab3a:	bf38      	it	cc
 800ab3c:	fa23 f202 	lsrcc.w	r2, r3, r2
 800ab40:	f100 0315 	add.w	r3, r0, #21
 800ab44:	f041 557f 	orr.w	r5, r1, #1069547520	; 0x3fc00000
 800ab48:	bf28      	it	cs
 800ab4a:	2200      	movcs	r2, #0
 800ab4c:	fa07 f303 	lsl.w	r3, r7, r3
 800ab50:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ab54:	ea43 0402 	orr.w	r4, r3, r2
 800ab58:	4620      	mov	r0, r4
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab60:	4598      	cmp	r8, r3
 800ab62:	d220      	bcs.n	800aba6 <__b2d+0xa2>
 800ab64:	f1b0 020b 	subs.w	r2, r0, #11
 800ab68:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800ab6c:	d01e      	beq.n	800abac <__b2d+0xa8>
 800ab6e:	fa07 f002 	lsl.w	r0, r7, r2
 800ab72:	f040 507f 	orr.w	r0, r0, #1069547520	; 0x3fc00000
 800ab76:	f1c2 0720 	rsb	r7, r2, #32
 800ab7a:	f1a6 0308 	sub.w	r3, r6, #8
 800ab7e:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800ab82:	fa21 fe07 	lsr.w	lr, r1, r7
 800ab86:	4598      	cmp	r8, r3
 800ab88:	ea40 050e 	orr.w	r5, r0, lr
 800ab8c:	d220      	bcs.n	800abd0 <__b2d+0xcc>
 800ab8e:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 800ab92:	fa01 f002 	lsl.w	r0, r1, r2
 800ab96:	fa23 f207 	lsr.w	r2, r3, r7
 800ab9a:	4302      	orrs	r2, r0
 800ab9c:	4614      	mov	r4, r2
 800ab9e:	4620      	mov	r0, r4
 800aba0:	4629      	mov	r1, r5
 800aba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba6:	380b      	subs	r0, #11
 800aba8:	d109      	bne.n	800abbe <__b2d+0xba>
 800abaa:	4601      	mov	r1, r0
 800abac:	f047 557f 	orr.w	r5, r7, #1069547520	; 0x3fc00000
 800abb0:	460c      	mov	r4, r1
 800abb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800abb6:	4620      	mov	r0, r4
 800abb8:	4629      	mov	r1, r5
 800abba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abbe:	fa07 f000 	lsl.w	r0, r7, r0
 800abc2:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
 800abc6:	2200      	movs	r2, #0
 800abc8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800abcc:	4614      	mov	r4, r2
 800abce:	e7e6      	b.n	800ab9e <__b2d+0x9a>
 800abd0:	fa01 f202 	lsl.w	r2, r1, r2
 800abd4:	4614      	mov	r4, r2
 800abd6:	e7e2      	b.n	800ab9e <__b2d+0x9a>

0800abd8 <__d2b>:
 800abd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abdc:	b083      	sub	sp, #12
 800abde:	2101      	movs	r1, #1
 800abe0:	461c      	mov	r4, r3
 800abe2:	f3c3 550a 	ubfx	r5, r3, #20, #11
 800abe6:	4617      	mov	r7, r2
 800abe8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800abea:	f7ff fc69 	bl	800a4c0 <_Balloc>
 800abee:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800abf2:	4681      	mov	r9, r0
 800abf4:	b10d      	cbz	r5, 800abfa <__d2b+0x22>
 800abf6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800abfa:	9401      	str	r4, [sp, #4]
 800abfc:	b31f      	cbz	r7, 800ac46 <__d2b+0x6e>
 800abfe:	a802      	add	r0, sp, #8
 800ac00:	f840 7d08 	str.w	r7, [r0, #-8]!
 800ac04:	f7ff fd38 	bl	800a678 <__lo0bits>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	d135      	bne.n	800ac78 <__d2b+0xa0>
 800ac0c:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800ac10:	f8c9 2014 	str.w	r2, [r9, #20]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	bf0c      	ite	eq
 800ac18:	2101      	moveq	r1, #1
 800ac1a:	2102      	movne	r1, #2
 800ac1c:	f8c9 3018 	str.w	r3, [r9, #24]
 800ac20:	f8c9 1010 	str.w	r1, [r9, #16]
 800ac24:	b9dd      	cbnz	r5, 800ac5e <__d2b+0x86>
 800ac26:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 800ac2a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac2e:	6030      	str	r0, [r6, #0]
 800ac30:	6918      	ldr	r0, [r3, #16]
 800ac32:	f7ff fd01 	bl	800a638 <__hi0bits>
 800ac36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac38:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ac3c:	6018      	str	r0, [r3, #0]
 800ac3e:	4648      	mov	r0, r9
 800ac40:	b003      	add	sp, #12
 800ac42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac46:	a801      	add	r0, sp, #4
 800ac48:	f7ff fd16 	bl	800a678 <__lo0bits>
 800ac4c:	9b01      	ldr	r3, [sp, #4]
 800ac4e:	f8c9 3014 	str.w	r3, [r9, #20]
 800ac52:	2101      	movs	r1, #1
 800ac54:	3020      	adds	r0, #32
 800ac56:	f8c9 1010 	str.w	r1, [r9, #16]
 800ac5a:	2d00      	cmp	r5, #0
 800ac5c:	d0e3      	beq.n	800ac26 <__d2b+0x4e>
 800ac5e:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
 800ac62:	eb08 0300 	add.w	r3, r8, r0
 800ac66:	6033      	str	r3, [r6, #0]
 800ac68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac6a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac6e:	6018      	str	r0, [r3, #0]
 800ac70:	4648      	mov	r0, r9
 800ac72:	b003      	add	sp, #12
 800ac74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac78:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800ac7c:	f1c0 0120 	rsb	r1, r0, #32
 800ac80:	fa03 f101 	lsl.w	r1, r3, r1
 800ac84:	430a      	orrs	r2, r1
 800ac86:	40c3      	lsrs	r3, r0
 800ac88:	9301      	str	r3, [sp, #4]
 800ac8a:	f8c9 2014 	str.w	r2, [r9, #20]
 800ac8e:	e7c1      	b.n	800ac14 <__d2b+0x3c>

0800ac90 <__ratio>:
 800ac90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac94:	b083      	sub	sp, #12
 800ac96:	460e      	mov	r6, r1
 800ac98:	4669      	mov	r1, sp
 800ac9a:	4607      	mov	r7, r0
 800ac9c:	f7ff ff32 	bl	800ab04 <__b2d>
 800aca0:	4604      	mov	r4, r0
 800aca2:	460d      	mov	r5, r1
 800aca4:	4630      	mov	r0, r6
 800aca6:	a901      	add	r1, sp, #4
 800aca8:	f7ff ff2c 	bl	800ab04 <__b2d>
 800acac:	4689      	mov	r9, r1
 800acae:	e89d 000a 	ldmia.w	sp, {r1, r3}
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	6936      	ldr	r6, [r6, #16]
 800acb6:	1ac9      	subs	r1, r1, r3
 800acb8:	1b96      	subs	r6, r2, r6
 800acba:	eb01 1346 	add.w	r3, r1, r6, lsl #5
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	4680      	mov	r8, r0
 800acc2:	dd0b      	ble.n	800acdc <__ratio+0x4c>
 800acc4:	eb05 5103 	add.w	r1, r5, r3, lsl #20
 800acc8:	460d      	mov	r5, r1
 800acca:	4642      	mov	r2, r8
 800accc:	464b      	mov	r3, r9
 800acce:	4620      	mov	r0, r4
 800acd0:	4629      	mov	r1, r5
 800acd2:	f7f8 fcb7 	bl	8003644 <__aeabi_ddiv>
 800acd6:	b003      	add	sp, #12
 800acd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acdc:	eba9 5703 	sub.w	r7, r9, r3, lsl #20
 800ace0:	46b9      	mov	r9, r7
 800ace2:	e7f2      	b.n	800acca <__ratio+0x3a>

0800ace4 <__copybits>:
 800ace4:	b470      	push	{r4, r5, r6}
 800ace6:	6914      	ldr	r4, [r2, #16]
 800ace8:	f102 0314 	add.w	r3, r2, #20
 800acec:	3901      	subs	r1, #1
 800acee:	114e      	asrs	r6, r1, #5
 800acf0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800acf4:	3601      	adds	r6, #1
 800acf6:	42a3      	cmp	r3, r4
 800acf8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800acfc:	d20c      	bcs.n	800ad18 <__copybits+0x34>
 800acfe:	1f01      	subs	r1, r0, #4
 800ad00:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad04:	f841 5f04 	str.w	r5, [r1, #4]!
 800ad08:	429c      	cmp	r4, r3
 800ad0a:	d8f9      	bhi.n	800ad00 <__copybits+0x1c>
 800ad0c:	1aa3      	subs	r3, r4, r2
 800ad0e:	3b15      	subs	r3, #21
 800ad10:	f023 0303 	bic.w	r3, r3, #3
 800ad14:	3304      	adds	r3, #4
 800ad16:	4418      	add	r0, r3
 800ad18:	4286      	cmp	r6, r0
 800ad1a:	d904      	bls.n	800ad26 <__copybits+0x42>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f840 3b04 	str.w	r3, [r0], #4
 800ad22:	4286      	cmp	r6, r0
 800ad24:	d8fb      	bhi.n	800ad1e <__copybits+0x3a>
 800ad26:	bc70      	pop	{r4, r5, r6}
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop

0800ad2c <__any_on>:
 800ad2c:	6903      	ldr	r3, [r0, #16]
 800ad2e:	114a      	asrs	r2, r1, #5
 800ad30:	4293      	cmp	r3, r2
 800ad32:	b410      	push	{r4}
 800ad34:	f100 0414 	add.w	r4, r0, #20
 800ad38:	da10      	bge.n	800ad5c <__any_on+0x30>
 800ad3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad3e:	429c      	cmp	r4, r3
 800ad40:	d221      	bcs.n	800ad86 <__any_on+0x5a>
 800ad42:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ad46:	3b04      	subs	r3, #4
 800ad48:	b118      	cbz	r0, 800ad52 <__any_on+0x26>
 800ad4a:	e015      	b.n	800ad78 <__any_on+0x4c>
 800ad4c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ad50:	b992      	cbnz	r2, 800ad78 <__any_on+0x4c>
 800ad52:	429c      	cmp	r4, r3
 800ad54:	d3fa      	bcc.n	800ad4c <__any_on+0x20>
 800ad56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	dd10      	ble.n	800ad80 <__any_on+0x54>
 800ad5e:	f011 011f 	ands.w	r1, r1, #31
 800ad62:	d00d      	beq.n	800ad80 <__any_on+0x54>
 800ad64:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 800ad68:	fa20 f301 	lsr.w	r3, r0, r1
 800ad6c:	fa03 f101 	lsl.w	r1, r3, r1
 800ad70:	4288      	cmp	r0, r1
 800ad72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad76:	d0e2      	beq.n	800ad3e <__any_on+0x12>
 800ad78:	2001      	movs	r0, #1
 800ad7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad84:	e7db      	b.n	800ad3e <__any_on+0x12>
 800ad86:	2000      	movs	r0, #0
 800ad88:	e7e5      	b.n	800ad56 <__any_on+0x2a>
 800ad8a:	bf00      	nop

0800ad8c <_realloc_r>:
 800ad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad90:	4617      	mov	r7, r2
 800ad92:	b083      	sub	sp, #12
 800ad94:	2900      	cmp	r1, #0
 800ad96:	f000 80c1 	beq.w	800af1c <_realloc_r+0x190>
 800ad9a:	460e      	mov	r6, r1
 800ad9c:	4681      	mov	r9, r0
 800ad9e:	f107 050b 	add.w	r5, r7, #11
 800ada2:	f7ff fb89 	bl	800a4b8 <__malloc_lock>
 800ada6:	f856 ec04 	ldr.w	lr, [r6, #-4]
 800adaa:	2d16      	cmp	r5, #22
 800adac:	f02e 0403 	bic.w	r4, lr, #3
 800adb0:	f1a6 0808 	sub.w	r8, r6, #8
 800adb4:	d840      	bhi.n	800ae38 <_realloc_r+0xac>
 800adb6:	2210      	movs	r2, #16
 800adb8:	4615      	mov	r5, r2
 800adba:	42af      	cmp	r7, r5
 800adbc:	d841      	bhi.n	800ae42 <_realloc_r+0xb6>
 800adbe:	4294      	cmp	r4, r2
 800adc0:	da75      	bge.n	800aeae <_realloc_r+0x122>
 800adc2:	4bc9      	ldr	r3, [pc, #804]	; (800b0e8 <_realloc_r+0x35c>)
 800adc4:	6899      	ldr	r1, [r3, #8]
 800adc6:	eb08 0004 	add.w	r0, r8, r4
 800adca:	4288      	cmp	r0, r1
 800adcc:	6841      	ldr	r1, [r0, #4]
 800adce:	f000 80d9 	beq.w	800af84 <_realloc_r+0x1f8>
 800add2:	f021 0301 	bic.w	r3, r1, #1
 800add6:	4403      	add	r3, r0
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	07db      	lsls	r3, r3, #31
 800addc:	d57d      	bpl.n	800aeda <_realloc_r+0x14e>
 800adde:	f01e 0f01 	tst.w	lr, #1
 800ade2:	d035      	beq.n	800ae50 <_realloc_r+0xc4>
 800ade4:	4639      	mov	r1, r7
 800ade6:	4648      	mov	r0, r9
 800ade8:	f7fe ffde 	bl	8009da8 <_malloc_r>
 800adec:	4607      	mov	r7, r0
 800adee:	b1e0      	cbz	r0, 800ae2a <_realloc_r+0x9e>
 800adf0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800adf4:	f023 0301 	bic.w	r3, r3, #1
 800adf8:	4443      	add	r3, r8
 800adfa:	f1a0 0208 	sub.w	r2, r0, #8
 800adfe:	429a      	cmp	r2, r3
 800ae00:	f000 8144 	beq.w	800b08c <_realloc_r+0x300>
 800ae04:	1f22      	subs	r2, r4, #4
 800ae06:	2a24      	cmp	r2, #36	; 0x24
 800ae08:	f200 8131 	bhi.w	800b06e <_realloc_r+0x2e2>
 800ae0c:	2a13      	cmp	r2, #19
 800ae0e:	f200 8104 	bhi.w	800b01a <_realloc_r+0x28e>
 800ae12:	4603      	mov	r3, r0
 800ae14:	4632      	mov	r2, r6
 800ae16:	6811      	ldr	r1, [r2, #0]
 800ae18:	6019      	str	r1, [r3, #0]
 800ae1a:	6851      	ldr	r1, [r2, #4]
 800ae1c:	6059      	str	r1, [r3, #4]
 800ae1e:	6892      	ldr	r2, [r2, #8]
 800ae20:	609a      	str	r2, [r3, #8]
 800ae22:	4631      	mov	r1, r6
 800ae24:	4648      	mov	r0, r9
 800ae26:	f7fe f8e5 	bl	8008ff4 <_free_r>
 800ae2a:	4648      	mov	r0, r9
 800ae2c:	f7ff fb46 	bl	800a4bc <__malloc_unlock>
 800ae30:	4638      	mov	r0, r7
 800ae32:	b003      	add	sp, #12
 800ae34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae38:	f025 0507 	bic.w	r5, r5, #7
 800ae3c:	2d00      	cmp	r5, #0
 800ae3e:	462a      	mov	r2, r5
 800ae40:	dabb      	bge.n	800adba <_realloc_r+0x2e>
 800ae42:	230c      	movs	r3, #12
 800ae44:	2000      	movs	r0, #0
 800ae46:	f8c9 3000 	str.w	r3, [r9]
 800ae4a:	b003      	add	sp, #12
 800ae4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae50:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800ae54:	ebc3 0a08 	rsb	sl, r3, r8
 800ae58:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ae5c:	f023 0c03 	bic.w	ip, r3, #3
 800ae60:	eb04 030c 	add.w	r3, r4, ip
 800ae64:	4293      	cmp	r3, r2
 800ae66:	dbbd      	blt.n	800ade4 <_realloc_r+0x58>
 800ae68:	4657      	mov	r7, sl
 800ae6a:	f8da 100c 	ldr.w	r1, [sl, #12]
 800ae6e:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800ae72:	1f22      	subs	r2, r4, #4
 800ae74:	2a24      	cmp	r2, #36	; 0x24
 800ae76:	60c1      	str	r1, [r0, #12]
 800ae78:	6088      	str	r0, [r1, #8]
 800ae7a:	f200 8117 	bhi.w	800b0ac <_realloc_r+0x320>
 800ae7e:	2a13      	cmp	r2, #19
 800ae80:	f240 8112 	bls.w	800b0a8 <_realloc_r+0x31c>
 800ae84:	6831      	ldr	r1, [r6, #0]
 800ae86:	f8ca 1008 	str.w	r1, [sl, #8]
 800ae8a:	6871      	ldr	r1, [r6, #4]
 800ae8c:	f8ca 100c 	str.w	r1, [sl, #12]
 800ae90:	2a1b      	cmp	r2, #27
 800ae92:	f200 812b 	bhi.w	800b0ec <_realloc_r+0x360>
 800ae96:	3608      	adds	r6, #8
 800ae98:	f10a 0210 	add.w	r2, sl, #16
 800ae9c:	6831      	ldr	r1, [r6, #0]
 800ae9e:	6011      	str	r1, [r2, #0]
 800aea0:	6871      	ldr	r1, [r6, #4]
 800aea2:	6051      	str	r1, [r2, #4]
 800aea4:	68b1      	ldr	r1, [r6, #8]
 800aea6:	6091      	str	r1, [r2, #8]
 800aea8:	463e      	mov	r6, r7
 800aeaa:	461c      	mov	r4, r3
 800aeac:	46d0      	mov	r8, sl
 800aeae:	1b63      	subs	r3, r4, r5
 800aeb0:	2b0f      	cmp	r3, #15
 800aeb2:	d81d      	bhi.n	800aef0 <_realloc_r+0x164>
 800aeb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aeb8:	f003 0301 	and.w	r3, r3, #1
 800aebc:	4323      	orrs	r3, r4
 800aebe:	4444      	add	r4, r8
 800aec0:	f8c8 3004 	str.w	r3, [r8, #4]
 800aec4:	6863      	ldr	r3, [r4, #4]
 800aec6:	f043 0301 	orr.w	r3, r3, #1
 800aeca:	6063      	str	r3, [r4, #4]
 800aecc:	4648      	mov	r0, r9
 800aece:	f7ff faf5 	bl	800a4bc <__malloc_unlock>
 800aed2:	4630      	mov	r0, r6
 800aed4:	b003      	add	sp, #12
 800aed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeda:	f021 0103 	bic.w	r1, r1, #3
 800aede:	4421      	add	r1, r4
 800aee0:	4291      	cmp	r1, r2
 800aee2:	db21      	blt.n	800af28 <_realloc_r+0x19c>
 800aee4:	68c3      	ldr	r3, [r0, #12]
 800aee6:	6882      	ldr	r2, [r0, #8]
 800aee8:	460c      	mov	r4, r1
 800aeea:	60d3      	str	r3, [r2, #12]
 800aeec:	609a      	str	r2, [r3, #8]
 800aeee:	e7de      	b.n	800aeae <_realloc_r+0x122>
 800aef0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800aef4:	eb08 0105 	add.w	r1, r8, r5
 800aef8:	f002 0201 	and.w	r2, r2, #1
 800aefc:	4315      	orrs	r5, r2
 800aefe:	f043 0201 	orr.w	r2, r3, #1
 800af02:	440b      	add	r3, r1
 800af04:	f8c8 5004 	str.w	r5, [r8, #4]
 800af08:	604a      	str	r2, [r1, #4]
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	f042 0201 	orr.w	r2, r2, #1
 800af10:	3108      	adds	r1, #8
 800af12:	605a      	str	r2, [r3, #4]
 800af14:	4648      	mov	r0, r9
 800af16:	f7fe f86d 	bl	8008ff4 <_free_r>
 800af1a:	e7d7      	b.n	800aecc <_realloc_r+0x140>
 800af1c:	4611      	mov	r1, r2
 800af1e:	b003      	add	sp, #12
 800af20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af24:	f7fe bf40 	b.w	8009da8 <_malloc_r>
 800af28:	f01e 0f01 	tst.w	lr, #1
 800af2c:	f47f af5a 	bne.w	800ade4 <_realloc_r+0x58>
 800af30:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800af34:	ebc3 0a08 	rsb	sl, r3, r8
 800af38:	f8da 3004 	ldr.w	r3, [sl, #4]
 800af3c:	f023 0c03 	bic.w	ip, r3, #3
 800af40:	eb01 0e0c 	add.w	lr, r1, ip
 800af44:	4596      	cmp	lr, r2
 800af46:	db8b      	blt.n	800ae60 <_realloc_r+0xd4>
 800af48:	68c3      	ldr	r3, [r0, #12]
 800af4a:	6882      	ldr	r2, [r0, #8]
 800af4c:	4657      	mov	r7, sl
 800af4e:	60d3      	str	r3, [r2, #12]
 800af50:	609a      	str	r2, [r3, #8]
 800af52:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800af56:	f8da 300c 	ldr.w	r3, [sl, #12]
 800af5a:	60cb      	str	r3, [r1, #12]
 800af5c:	1f22      	subs	r2, r4, #4
 800af5e:	2a24      	cmp	r2, #36	; 0x24
 800af60:	6099      	str	r1, [r3, #8]
 800af62:	f200 8099 	bhi.w	800b098 <_realloc_r+0x30c>
 800af66:	2a13      	cmp	r2, #19
 800af68:	d962      	bls.n	800b030 <_realloc_r+0x2a4>
 800af6a:	6833      	ldr	r3, [r6, #0]
 800af6c:	f8ca 3008 	str.w	r3, [sl, #8]
 800af70:	6873      	ldr	r3, [r6, #4]
 800af72:	f8ca 300c 	str.w	r3, [sl, #12]
 800af76:	2a1b      	cmp	r2, #27
 800af78:	f200 80a0 	bhi.w	800b0bc <_realloc_r+0x330>
 800af7c:	3608      	adds	r6, #8
 800af7e:	f10a 0310 	add.w	r3, sl, #16
 800af82:	e056      	b.n	800b032 <_realloc_r+0x2a6>
 800af84:	f021 0b03 	bic.w	fp, r1, #3
 800af88:	44a3      	add	fp, r4
 800af8a:	f105 0010 	add.w	r0, r5, #16
 800af8e:	4583      	cmp	fp, r0
 800af90:	da59      	bge.n	800b046 <_realloc_r+0x2ba>
 800af92:	f01e 0f01 	tst.w	lr, #1
 800af96:	f47f af25 	bne.w	800ade4 <_realloc_r+0x58>
 800af9a:	f856 1c08 	ldr.w	r1, [r6, #-8]
 800af9e:	ebc1 0a08 	rsb	sl, r1, r8
 800afa2:	f8da 1004 	ldr.w	r1, [sl, #4]
 800afa6:	f021 0c03 	bic.w	ip, r1, #3
 800afaa:	44e3      	add	fp, ip
 800afac:	4558      	cmp	r0, fp
 800afae:	f73f af57 	bgt.w	800ae60 <_realloc_r+0xd4>
 800afb2:	4657      	mov	r7, sl
 800afb4:	f8da 100c 	ldr.w	r1, [sl, #12]
 800afb8:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800afbc:	1f22      	subs	r2, r4, #4
 800afbe:	2a24      	cmp	r2, #36	; 0x24
 800afc0:	60c1      	str	r1, [r0, #12]
 800afc2:	6088      	str	r0, [r1, #8]
 800afc4:	f200 80b4 	bhi.w	800b130 <_realloc_r+0x3a4>
 800afc8:	2a13      	cmp	r2, #19
 800afca:	f240 80a5 	bls.w	800b118 <_realloc_r+0x38c>
 800afce:	6831      	ldr	r1, [r6, #0]
 800afd0:	f8ca 1008 	str.w	r1, [sl, #8]
 800afd4:	6871      	ldr	r1, [r6, #4]
 800afd6:	f8ca 100c 	str.w	r1, [sl, #12]
 800afda:	2a1b      	cmp	r2, #27
 800afdc:	f200 80af 	bhi.w	800b13e <_realloc_r+0x3b2>
 800afe0:	3608      	adds	r6, #8
 800afe2:	f10a 0210 	add.w	r2, sl, #16
 800afe6:	6831      	ldr	r1, [r6, #0]
 800afe8:	6011      	str	r1, [r2, #0]
 800afea:	6871      	ldr	r1, [r6, #4]
 800afec:	6051      	str	r1, [r2, #4]
 800afee:	68b1      	ldr	r1, [r6, #8]
 800aff0:	6091      	str	r1, [r2, #8]
 800aff2:	eb0a 0105 	add.w	r1, sl, r5
 800aff6:	ebc5 020b 	rsb	r2, r5, fp
 800affa:	f042 0201 	orr.w	r2, r2, #1
 800affe:	6099      	str	r1, [r3, #8]
 800b000:	604a      	str	r2, [r1, #4]
 800b002:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b006:	f003 0301 	and.w	r3, r3, #1
 800b00a:	431d      	orrs	r5, r3
 800b00c:	4648      	mov	r0, r9
 800b00e:	f8ca 5004 	str.w	r5, [sl, #4]
 800b012:	f7ff fa53 	bl	800a4bc <__malloc_unlock>
 800b016:	4638      	mov	r0, r7
 800b018:	e75c      	b.n	800aed4 <_realloc_r+0x148>
 800b01a:	6833      	ldr	r3, [r6, #0]
 800b01c:	6003      	str	r3, [r0, #0]
 800b01e:	6873      	ldr	r3, [r6, #4]
 800b020:	6043      	str	r3, [r0, #4]
 800b022:	2a1b      	cmp	r2, #27
 800b024:	d827      	bhi.n	800b076 <_realloc_r+0x2ea>
 800b026:	f100 0308 	add.w	r3, r0, #8
 800b02a:	f106 0208 	add.w	r2, r6, #8
 800b02e:	e6f2      	b.n	800ae16 <_realloc_r+0x8a>
 800b030:	463b      	mov	r3, r7
 800b032:	6832      	ldr	r2, [r6, #0]
 800b034:	601a      	str	r2, [r3, #0]
 800b036:	6872      	ldr	r2, [r6, #4]
 800b038:	605a      	str	r2, [r3, #4]
 800b03a:	68b2      	ldr	r2, [r6, #8]
 800b03c:	609a      	str	r2, [r3, #8]
 800b03e:	463e      	mov	r6, r7
 800b040:	4674      	mov	r4, lr
 800b042:	46d0      	mov	r8, sl
 800b044:	e733      	b.n	800aeae <_realloc_r+0x122>
 800b046:	eb08 0105 	add.w	r1, r8, r5
 800b04a:	ebc5 0b0b 	rsb	fp, r5, fp
 800b04e:	f04b 0201 	orr.w	r2, fp, #1
 800b052:	6099      	str	r1, [r3, #8]
 800b054:	604a      	str	r2, [r1, #4]
 800b056:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	431d      	orrs	r5, r3
 800b060:	4648      	mov	r0, r9
 800b062:	f846 5c04 	str.w	r5, [r6, #-4]
 800b066:	f7ff fa29 	bl	800a4bc <__malloc_unlock>
 800b06a:	4630      	mov	r0, r6
 800b06c:	e732      	b.n	800aed4 <_realloc_r+0x148>
 800b06e:	4631      	mov	r1, r6
 800b070:	f7ff f9be 	bl	800a3f0 <memmove>
 800b074:	e6d5      	b.n	800ae22 <_realloc_r+0x96>
 800b076:	68b3      	ldr	r3, [r6, #8]
 800b078:	6083      	str	r3, [r0, #8]
 800b07a:	68f3      	ldr	r3, [r6, #12]
 800b07c:	60c3      	str	r3, [r0, #12]
 800b07e:	2a24      	cmp	r2, #36	; 0x24
 800b080:	d028      	beq.n	800b0d4 <_realloc_r+0x348>
 800b082:	f100 0310 	add.w	r3, r0, #16
 800b086:	f106 0210 	add.w	r2, r6, #16
 800b08a:	e6c4      	b.n	800ae16 <_realloc_r+0x8a>
 800b08c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b090:	f023 0303 	bic.w	r3, r3, #3
 800b094:	441c      	add	r4, r3
 800b096:	e70a      	b.n	800aeae <_realloc_r+0x122>
 800b098:	4631      	mov	r1, r6
 800b09a:	4638      	mov	r0, r7
 800b09c:	4674      	mov	r4, lr
 800b09e:	46d0      	mov	r8, sl
 800b0a0:	f7ff f9a6 	bl	800a3f0 <memmove>
 800b0a4:	463e      	mov	r6, r7
 800b0a6:	e702      	b.n	800aeae <_realloc_r+0x122>
 800b0a8:	463a      	mov	r2, r7
 800b0aa:	e6f7      	b.n	800ae9c <_realloc_r+0x110>
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	4638      	mov	r0, r7
 800b0b0:	461c      	mov	r4, r3
 800b0b2:	46d0      	mov	r8, sl
 800b0b4:	f7ff f99c 	bl	800a3f0 <memmove>
 800b0b8:	463e      	mov	r6, r7
 800b0ba:	e6f8      	b.n	800aeae <_realloc_r+0x122>
 800b0bc:	68b3      	ldr	r3, [r6, #8]
 800b0be:	f8ca 3010 	str.w	r3, [sl, #16]
 800b0c2:	68f3      	ldr	r3, [r6, #12]
 800b0c4:	f8ca 3014 	str.w	r3, [sl, #20]
 800b0c8:	2a24      	cmp	r2, #36	; 0x24
 800b0ca:	d01b      	beq.n	800b104 <_realloc_r+0x378>
 800b0cc:	3610      	adds	r6, #16
 800b0ce:	f10a 0318 	add.w	r3, sl, #24
 800b0d2:	e7ae      	b.n	800b032 <_realloc_r+0x2a6>
 800b0d4:	6933      	ldr	r3, [r6, #16]
 800b0d6:	6103      	str	r3, [r0, #16]
 800b0d8:	6973      	ldr	r3, [r6, #20]
 800b0da:	6143      	str	r3, [r0, #20]
 800b0dc:	f106 0218 	add.w	r2, r6, #24
 800b0e0:	f100 0318 	add.w	r3, r0, #24
 800b0e4:	e697      	b.n	800ae16 <_realloc_r+0x8a>
 800b0e6:	bf00      	nop
 800b0e8:	200005d8 	.word	0x200005d8
 800b0ec:	68b1      	ldr	r1, [r6, #8]
 800b0ee:	f8ca 1010 	str.w	r1, [sl, #16]
 800b0f2:	68f1      	ldr	r1, [r6, #12]
 800b0f4:	f8ca 1014 	str.w	r1, [sl, #20]
 800b0f8:	2a24      	cmp	r2, #36	; 0x24
 800b0fa:	d00f      	beq.n	800b11c <_realloc_r+0x390>
 800b0fc:	3610      	adds	r6, #16
 800b0fe:	f10a 0218 	add.w	r2, sl, #24
 800b102:	e6cb      	b.n	800ae9c <_realloc_r+0x110>
 800b104:	6933      	ldr	r3, [r6, #16]
 800b106:	f8ca 3018 	str.w	r3, [sl, #24]
 800b10a:	6973      	ldr	r3, [r6, #20]
 800b10c:	f8ca 301c 	str.w	r3, [sl, #28]
 800b110:	3618      	adds	r6, #24
 800b112:	f10a 0320 	add.w	r3, sl, #32
 800b116:	e78c      	b.n	800b032 <_realloc_r+0x2a6>
 800b118:	463a      	mov	r2, r7
 800b11a:	e764      	b.n	800afe6 <_realloc_r+0x25a>
 800b11c:	6932      	ldr	r2, [r6, #16]
 800b11e:	f8ca 2018 	str.w	r2, [sl, #24]
 800b122:	6972      	ldr	r2, [r6, #20]
 800b124:	f8ca 201c 	str.w	r2, [sl, #28]
 800b128:	3618      	adds	r6, #24
 800b12a:	f10a 0220 	add.w	r2, sl, #32
 800b12e:	e6b5      	b.n	800ae9c <_realloc_r+0x110>
 800b130:	4631      	mov	r1, r6
 800b132:	4638      	mov	r0, r7
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	f7ff f95b 	bl	800a3f0 <memmove>
 800b13a:	9b01      	ldr	r3, [sp, #4]
 800b13c:	e759      	b.n	800aff2 <_realloc_r+0x266>
 800b13e:	68b1      	ldr	r1, [r6, #8]
 800b140:	f8ca 1010 	str.w	r1, [sl, #16]
 800b144:	68f1      	ldr	r1, [r6, #12]
 800b146:	f8ca 1014 	str.w	r1, [sl, #20]
 800b14a:	2a24      	cmp	r2, #36	; 0x24
 800b14c:	d003      	beq.n	800b156 <_realloc_r+0x3ca>
 800b14e:	3610      	adds	r6, #16
 800b150:	f10a 0218 	add.w	r2, sl, #24
 800b154:	e747      	b.n	800afe6 <_realloc_r+0x25a>
 800b156:	6932      	ldr	r2, [r6, #16]
 800b158:	f8ca 2018 	str.w	r2, [sl, #24]
 800b15c:	6972      	ldr	r2, [r6, #20]
 800b15e:	f8ca 201c 	str.w	r2, [sl, #28]
 800b162:	3618      	adds	r6, #24
 800b164:	f10a 0220 	add.w	r2, sl, #32
 800b168:	e73d      	b.n	800afe6 <_realloc_r+0x25a>
 800b16a:	bf00      	nop

0800b16c <_sbrk_r>:
 800b16c:	b538      	push	{r3, r4, r5, lr}
 800b16e:	4c07      	ldr	r4, [pc, #28]	; (800b18c <_sbrk_r+0x20>)
 800b170:	2300      	movs	r3, #0
 800b172:	4605      	mov	r5, r0
 800b174:	4608      	mov	r0, r1
 800b176:	6023      	str	r3, [r4, #0]
 800b178:	f7f6 fe14 	bl	8001da4 <_sbrk>
 800b17c:	1c43      	adds	r3, r0, #1
 800b17e:	d000      	beq.n	800b182 <_sbrk_r+0x16>
 800b180:	bd38      	pop	{r3, r4, r5, pc}
 800b182:	6823      	ldr	r3, [r4, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d0fb      	beq.n	800b180 <_sbrk_r+0x14>
 800b188:	602b      	str	r3, [r5, #0]
 800b18a:	bd38      	pop	{r3, r4, r5, pc}
 800b18c:	20000a9c 	.word	0x20000a9c

0800b190 <__sread>:
 800b190:	b510      	push	{r4, lr}
 800b192:	460c      	mov	r4, r1
 800b194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b198:	f000 fa48 	bl	800b62c <_read_r>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	db03      	blt.n	800b1a8 <__sread+0x18>
 800b1a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b1a2:	4403      	add	r3, r0
 800b1a4:	6523      	str	r3, [r4, #80]	; 0x50
 800b1a6:	bd10      	pop	{r4, pc}
 800b1a8:	89a3      	ldrh	r3, [r4, #12]
 800b1aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1ae:	81a3      	strh	r3, [r4, #12]
 800b1b0:	bd10      	pop	{r4, pc}
 800b1b2:	bf00      	nop

0800b1b4 <__swrite>:
 800b1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1b8:	4616      	mov	r6, r2
 800b1ba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1be:	461f      	mov	r7, r3
 800b1c0:	05d3      	lsls	r3, r2, #23
 800b1c2:	460c      	mov	r4, r1
 800b1c4:	4605      	mov	r5, r0
 800b1c6:	d507      	bpl.n	800b1d8 <__swrite+0x24>
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	2302      	movs	r3, #2
 800b1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1d0:	f000 fa16 	bl	800b600 <_lseek_r>
 800b1d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b1e0:	81a2      	strh	r2, [r4, #12]
 800b1e2:	463b      	mov	r3, r7
 800b1e4:	4632      	mov	r2, r6
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ec:	f000 b8e8 	b.w	800b3c0 <_write_r>

0800b1f0 <__sseek>:
 800b1f0:	b510      	push	{r4, lr}
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1f8:	f000 fa02 	bl	800b600 <_lseek_r>
 800b1fc:	89a3      	ldrh	r3, [r4, #12]
 800b1fe:	1c42      	adds	r2, r0, #1
 800b200:	bf0e      	itee	eq
 800b202:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b206:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b20a:	6520      	strne	r0, [r4, #80]	; 0x50
 800b20c:	81a3      	strh	r3, [r4, #12]
 800b20e:	bd10      	pop	{r4, pc}

0800b210 <__sclose>:
 800b210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b214:	f000 b91a 	b.w	800b44c <_close_r>

0800b218 <__ssprint_r>:
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	6893      	ldr	r3, [r2, #8]
 800b21e:	b083      	sub	sp, #12
 800b220:	4690      	mov	r8, r2
 800b222:	2b00      	cmp	r3, #0
 800b224:	d072      	beq.n	800b30c <__ssprint_r+0xf4>
 800b226:	4683      	mov	fp, r0
 800b228:	f04f 0900 	mov.w	r9, #0
 800b22c:	6816      	ldr	r6, [r2, #0]
 800b22e:	6808      	ldr	r0, [r1, #0]
 800b230:	688b      	ldr	r3, [r1, #8]
 800b232:	460d      	mov	r5, r1
 800b234:	464c      	mov	r4, r9
 800b236:	2c00      	cmp	r4, #0
 800b238:	d045      	beq.n	800b2c6 <__ssprint_r+0xae>
 800b23a:	429c      	cmp	r4, r3
 800b23c:	461f      	mov	r7, r3
 800b23e:	469a      	mov	sl, r3
 800b240:	d346      	bcc.n	800b2d0 <__ssprint_r+0xb8>
 800b242:	89ab      	ldrh	r3, [r5, #12]
 800b244:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800b248:	d02d      	beq.n	800b2a6 <__ssprint_r+0x8e>
 800b24a:	696f      	ldr	r7, [r5, #20]
 800b24c:	6929      	ldr	r1, [r5, #16]
 800b24e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800b252:	ebc1 0a00 	rsb	sl, r1, r0
 800b256:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 800b25a:	1c60      	adds	r0, r4, #1
 800b25c:	107f      	asrs	r7, r7, #1
 800b25e:	4450      	add	r0, sl
 800b260:	42b8      	cmp	r0, r7
 800b262:	463a      	mov	r2, r7
 800b264:	bf84      	itt	hi
 800b266:	4607      	movhi	r7, r0
 800b268:	463a      	movhi	r2, r7
 800b26a:	055b      	lsls	r3, r3, #21
 800b26c:	d533      	bpl.n	800b2d6 <__ssprint_r+0xbe>
 800b26e:	4611      	mov	r1, r2
 800b270:	4658      	mov	r0, fp
 800b272:	f7fe fd99 	bl	8009da8 <_malloc_r>
 800b276:	2800      	cmp	r0, #0
 800b278:	d037      	beq.n	800b2ea <__ssprint_r+0xd2>
 800b27a:	4652      	mov	r2, sl
 800b27c:	6929      	ldr	r1, [r5, #16]
 800b27e:	9001      	str	r0, [sp, #4]
 800b280:	f7f8 fbb4 	bl	80039ec <memcpy>
 800b284:	89aa      	ldrh	r2, [r5, #12]
 800b286:	9b01      	ldr	r3, [sp, #4]
 800b288:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800b28c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b290:	81aa      	strh	r2, [r5, #12]
 800b292:	ebca 0207 	rsb	r2, sl, r7
 800b296:	eb03 000a 	add.w	r0, r3, sl
 800b29a:	616f      	str	r7, [r5, #20]
 800b29c:	612b      	str	r3, [r5, #16]
 800b29e:	6028      	str	r0, [r5, #0]
 800b2a0:	60aa      	str	r2, [r5, #8]
 800b2a2:	4627      	mov	r7, r4
 800b2a4:	46a2      	mov	sl, r4
 800b2a6:	4652      	mov	r2, sl
 800b2a8:	4649      	mov	r1, r9
 800b2aa:	f7ff f8a1 	bl	800a3f0 <memmove>
 800b2ae:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800b2b2:	68ab      	ldr	r3, [r5, #8]
 800b2b4:	6828      	ldr	r0, [r5, #0]
 800b2b6:	1bdb      	subs	r3, r3, r7
 800b2b8:	4450      	add	r0, sl
 800b2ba:	1b14      	subs	r4, r2, r4
 800b2bc:	60ab      	str	r3, [r5, #8]
 800b2be:	6028      	str	r0, [r5, #0]
 800b2c0:	f8c8 4008 	str.w	r4, [r8, #8]
 800b2c4:	b314      	cbz	r4, 800b30c <__ssprint_r+0xf4>
 800b2c6:	f8d6 9000 	ldr.w	r9, [r6]
 800b2ca:	6874      	ldr	r4, [r6, #4]
 800b2cc:	3608      	adds	r6, #8
 800b2ce:	e7b2      	b.n	800b236 <__ssprint_r+0x1e>
 800b2d0:	4627      	mov	r7, r4
 800b2d2:	46a2      	mov	sl, r4
 800b2d4:	e7e7      	b.n	800b2a6 <__ssprint_r+0x8e>
 800b2d6:	4658      	mov	r0, fp
 800b2d8:	f7ff fd58 	bl	800ad8c <_realloc_r>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d1d7      	bne.n	800b292 <__ssprint_r+0x7a>
 800b2e2:	6929      	ldr	r1, [r5, #16]
 800b2e4:	4658      	mov	r0, fp
 800b2e6:	f7fd fe85 	bl	8008ff4 <_free_r>
 800b2ea:	230c      	movs	r3, #12
 800b2ec:	f8cb 3000 	str.w	r3, [fp]
 800b2f0:	89ab      	ldrh	r3, [r5, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fc:	81ab      	strh	r3, [r5, #12]
 800b2fe:	f8c8 2008 	str.w	r2, [r8, #8]
 800b302:	f8c8 2004 	str.w	r2, [r8, #4]
 800b306:	b003      	add	sp, #12
 800b308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30c:	2000      	movs	r0, #0
 800b30e:	f8c8 0004 	str.w	r0, [r8, #4]
 800b312:	b003      	add	sp, #12
 800b314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b318 <__sprint_r.part.0>:
 800b318:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b31a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b31e:	049c      	lsls	r4, r3, #18
 800b320:	4692      	mov	sl, r2
 800b322:	d52c      	bpl.n	800b37e <__sprint_r.part.0+0x66>
 800b324:	6893      	ldr	r3, [r2, #8]
 800b326:	6812      	ldr	r2, [r2, #0]
 800b328:	b33b      	cbz	r3, 800b37a <__sprint_r.part.0+0x62>
 800b32a:	460f      	mov	r7, r1
 800b32c:	4680      	mov	r8, r0
 800b32e:	f102 0908 	add.w	r9, r2, #8
 800b332:	e919 0060 	ldmdb	r9, {r5, r6}
 800b336:	08b6      	lsrs	r6, r6, #2
 800b338:	d017      	beq.n	800b36a <__sprint_r.part.0+0x52>
 800b33a:	3d04      	subs	r5, #4
 800b33c:	2400      	movs	r4, #0
 800b33e:	e001      	b.n	800b344 <__sprint_r.part.0+0x2c>
 800b340:	42a6      	cmp	r6, r4
 800b342:	d010      	beq.n	800b366 <__sprint_r.part.0+0x4e>
 800b344:	463a      	mov	r2, r7
 800b346:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800b34a:	4640      	mov	r0, r8
 800b34c:	f000 f91e 	bl	800b58c <_fputwc_r>
 800b350:	1c43      	adds	r3, r0, #1
 800b352:	f104 0401 	add.w	r4, r4, #1
 800b356:	d1f3      	bne.n	800b340 <__sprint_r.part.0+0x28>
 800b358:	2300      	movs	r3, #0
 800b35a:	f8ca 3008 	str.w	r3, [sl, #8]
 800b35e:	f8ca 3004 	str.w	r3, [sl, #4]
 800b362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b366:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b36a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
 800b36e:	f8ca 3008 	str.w	r3, [sl, #8]
 800b372:	f109 0908 	add.w	r9, r9, #8
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1db      	bne.n	800b332 <__sprint_r.part.0+0x1a>
 800b37a:	2000      	movs	r0, #0
 800b37c:	e7ec      	b.n	800b358 <__sprint_r.part.0+0x40>
 800b37e:	f7fd ff21 	bl	80091c4 <__sfvwrite_r>
 800b382:	2300      	movs	r3, #0
 800b384:	f8ca 3008 	str.w	r3, [sl, #8]
 800b388:	f8ca 3004 	str.w	r3, [sl, #4]
 800b38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b390 <__sprint_r>:
 800b390:	6893      	ldr	r3, [r2, #8]
 800b392:	b10b      	cbz	r3, 800b398 <__sprint_r+0x8>
 800b394:	f7ff bfc0 	b.w	800b318 <__sprint_r.part.0>
 800b398:	b410      	push	{r4}
 800b39a:	4618      	mov	r0, r3
 800b39c:	6053      	str	r3, [r2, #4]
 800b39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <__ascii_wctomb>:
 800b3a4:	b121      	cbz	r1, 800b3b0 <__ascii_wctomb+0xc>
 800b3a6:	2aff      	cmp	r2, #255	; 0xff
 800b3a8:	d804      	bhi.n	800b3b4 <__ascii_wctomb+0x10>
 800b3aa:	700a      	strb	r2, [r1, #0]
 800b3ac:	2001      	movs	r0, #1
 800b3ae:	4770      	bx	lr
 800b3b0:	4608      	mov	r0, r1
 800b3b2:	4770      	bx	lr
 800b3b4:	238a      	movs	r3, #138	; 0x8a
 800b3b6:	6003      	str	r3, [r0, #0]
 800b3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop

0800b3c0 <_write_r>:
 800b3c0:	b570      	push	{r4, r5, r6, lr}
 800b3c2:	460d      	mov	r5, r1
 800b3c4:	4c08      	ldr	r4, [pc, #32]	; (800b3e8 <_write_r+0x28>)
 800b3c6:	4611      	mov	r1, r2
 800b3c8:	4606      	mov	r6, r0
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	6023      	str	r3, [r4, #0]
 800b3d2:	f7f5 fee3 	bl	800119c <_write>
 800b3d6:	1c43      	adds	r3, r0, #1
 800b3d8:	d000      	beq.n	800b3dc <_write_r+0x1c>
 800b3da:	bd70      	pop	{r4, r5, r6, pc}
 800b3dc:	6823      	ldr	r3, [r4, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d0fb      	beq.n	800b3da <_write_r+0x1a>
 800b3e2:	6033      	str	r3, [r6, #0]
 800b3e4:	bd70      	pop	{r4, r5, r6, pc}
 800b3e6:	bf00      	nop
 800b3e8:	20000a9c 	.word	0x20000a9c

0800b3ec <_calloc_r>:
 800b3ec:	b510      	push	{r4, lr}
 800b3ee:	fb02 f101 	mul.w	r1, r2, r1
 800b3f2:	f7fe fcd9 	bl	8009da8 <_malloc_r>
 800b3f6:	4604      	mov	r4, r0
 800b3f8:	b1d8      	cbz	r0, 800b432 <_calloc_r+0x46>
 800b3fa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b3fe:	f022 0203 	bic.w	r2, r2, #3
 800b402:	3a04      	subs	r2, #4
 800b404:	2a24      	cmp	r2, #36	; 0x24
 800b406:	d818      	bhi.n	800b43a <_calloc_r+0x4e>
 800b408:	2a13      	cmp	r2, #19
 800b40a:	d914      	bls.n	800b436 <_calloc_r+0x4a>
 800b40c:	2300      	movs	r3, #0
 800b40e:	2a1b      	cmp	r2, #27
 800b410:	6003      	str	r3, [r0, #0]
 800b412:	6043      	str	r3, [r0, #4]
 800b414:	d916      	bls.n	800b444 <_calloc_r+0x58>
 800b416:	2a24      	cmp	r2, #36	; 0x24
 800b418:	6083      	str	r3, [r0, #8]
 800b41a:	60c3      	str	r3, [r0, #12]
 800b41c:	bf11      	iteee	ne
 800b41e:	f100 0210 	addne.w	r2, r0, #16
 800b422:	6103      	streq	r3, [r0, #16]
 800b424:	6143      	streq	r3, [r0, #20]
 800b426:	f100 0218 	addeq.w	r2, r0, #24
 800b42a:	2300      	movs	r3, #0
 800b42c:	6013      	str	r3, [r2, #0]
 800b42e:	6053      	str	r3, [r2, #4]
 800b430:	6093      	str	r3, [r2, #8]
 800b432:	4620      	mov	r0, r4
 800b434:	bd10      	pop	{r4, pc}
 800b436:	4602      	mov	r2, r0
 800b438:	e7f7      	b.n	800b42a <_calloc_r+0x3e>
 800b43a:	2100      	movs	r1, #0
 800b43c:	f7f8 fb70 	bl	8003b20 <memset>
 800b440:	4620      	mov	r0, r4
 800b442:	bd10      	pop	{r4, pc}
 800b444:	f100 0208 	add.w	r2, r0, #8
 800b448:	e7ef      	b.n	800b42a <_calloc_r+0x3e>
 800b44a:	bf00      	nop

0800b44c <_close_r>:
 800b44c:	b538      	push	{r3, r4, r5, lr}
 800b44e:	4c07      	ldr	r4, [pc, #28]	; (800b46c <_close_r+0x20>)
 800b450:	2300      	movs	r3, #0
 800b452:	4605      	mov	r5, r0
 800b454:	4608      	mov	r0, r1
 800b456:	6023      	str	r3, [r4, #0]
 800b458:	f7f6 fc86 	bl	8001d68 <_close>
 800b45c:	1c43      	adds	r3, r0, #1
 800b45e:	d000      	beq.n	800b462 <_close_r+0x16>
 800b460:	bd38      	pop	{r3, r4, r5, pc}
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d0fb      	beq.n	800b460 <_close_r+0x14>
 800b468:	602b      	str	r3, [r5, #0]
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	20000a9c 	.word	0x20000a9c

0800b470 <_fclose_r>:
 800b470:	2900      	cmp	r1, #0
 800b472:	d03d      	beq.n	800b4f0 <_fclose_r+0x80>
 800b474:	b570      	push	{r4, r5, r6, lr}
 800b476:	4605      	mov	r5, r0
 800b478:	460c      	mov	r4, r1
 800b47a:	b108      	cbz	r0, 800b480 <_fclose_r+0x10>
 800b47c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b47e:	b37b      	cbz	r3, 800b4e0 <_fclose_r+0x70>
 800b480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b484:	b90b      	cbnz	r3, 800b48a <_fclose_r+0x1a>
 800b486:	2000      	movs	r0, #0
 800b488:	bd70      	pop	{r4, r5, r6, pc}
 800b48a:	4621      	mov	r1, r4
 800b48c:	4628      	mov	r0, r5
 800b48e:	f7fd fc21 	bl	8008cd4 <__sflush_r>
 800b492:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b494:	4606      	mov	r6, r0
 800b496:	b133      	cbz	r3, 800b4a6 <_fclose_r+0x36>
 800b498:	69e1      	ldr	r1, [r4, #28]
 800b49a:	4628      	mov	r0, r5
 800b49c:	4798      	blx	r3
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	bfb8      	it	lt
 800b4a2:	f04f 36ff 	movlt.w	r6, #4294967295
 800b4a6:	89a3      	ldrh	r3, [r4, #12]
 800b4a8:	061b      	lsls	r3, r3, #24
 800b4aa:	d41c      	bmi.n	800b4e6 <_fclose_r+0x76>
 800b4ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b4ae:	b141      	cbz	r1, 800b4c2 <_fclose_r+0x52>
 800b4b0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b4b4:	4299      	cmp	r1, r3
 800b4b6:	d002      	beq.n	800b4be <_fclose_r+0x4e>
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	f7fd fd9b 	bl	8008ff4 <_free_r>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	6323      	str	r3, [r4, #48]	; 0x30
 800b4c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b4c4:	b121      	cbz	r1, 800b4d0 <_fclose_r+0x60>
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	f7fd fd94 	bl	8008ff4 <_free_r>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	6463      	str	r3, [r4, #68]	; 0x44
 800b4d0:	f7fd fd3e 	bl	8008f50 <__sfp_lock_acquire>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	81a3      	strh	r3, [r4, #12]
 800b4d8:	f7fd fd3c 	bl	8008f54 <__sfp_lock_release>
 800b4dc:	4630      	mov	r0, r6
 800b4de:	bd70      	pop	{r4, r5, r6, pc}
 800b4e0:	f7fd fd30 	bl	8008f44 <__sinit>
 800b4e4:	e7cc      	b.n	800b480 <_fclose_r+0x10>
 800b4e6:	6921      	ldr	r1, [r4, #16]
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	f7fd fd83 	bl	8008ff4 <_free_r>
 800b4ee:	e7dd      	b.n	800b4ac <_fclose_r+0x3c>
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	4770      	bx	lr

0800b4f4 <__fputwc>:
 800b4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f8:	b082      	sub	sp, #8
 800b4fa:	4680      	mov	r8, r0
 800b4fc:	4689      	mov	r9, r1
 800b4fe:	4614      	mov	r4, r2
 800b500:	f7fe fbc0 	bl	8009c84 <__locale_mb_cur_max>
 800b504:	2801      	cmp	r0, #1
 800b506:	d033      	beq.n	800b570 <__fputwc+0x7c>
 800b508:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800b50c:	464a      	mov	r2, r9
 800b50e:	a901      	add	r1, sp, #4
 800b510:	4640      	mov	r0, r8
 800b512:	f000 f8f7 	bl	800b704 <_wcrtomb_r>
 800b516:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b51a:	4682      	mov	sl, r0
 800b51c:	d021      	beq.n	800b562 <__fputwc+0x6e>
 800b51e:	b388      	cbz	r0, 800b584 <__fputwc+0x90>
 800b520:	f89d 6004 	ldrb.w	r6, [sp, #4]
 800b524:	2500      	movs	r5, #0
 800b526:	e008      	b.n	800b53a <__fputwc+0x46>
 800b528:	6823      	ldr	r3, [r4, #0]
 800b52a:	1c5a      	adds	r2, r3, #1
 800b52c:	6022      	str	r2, [r4, #0]
 800b52e:	701e      	strb	r6, [r3, #0]
 800b530:	3501      	adds	r5, #1
 800b532:	4555      	cmp	r5, sl
 800b534:	d226      	bcs.n	800b584 <__fputwc+0x90>
 800b536:	ab01      	add	r3, sp, #4
 800b538:	5d5e      	ldrb	r6, [r3, r5]
 800b53a:	68a3      	ldr	r3, [r4, #8]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	2b00      	cmp	r3, #0
 800b540:	60a3      	str	r3, [r4, #8]
 800b542:	daf1      	bge.n	800b528 <__fputwc+0x34>
 800b544:	69a7      	ldr	r7, [r4, #24]
 800b546:	42bb      	cmp	r3, r7
 800b548:	4631      	mov	r1, r6
 800b54a:	4622      	mov	r2, r4
 800b54c:	4640      	mov	r0, r8
 800b54e:	db01      	blt.n	800b554 <__fputwc+0x60>
 800b550:	2e0a      	cmp	r6, #10
 800b552:	d1e9      	bne.n	800b528 <__fputwc+0x34>
 800b554:	f000 f880 	bl	800b658 <__swbuf_r>
 800b558:	1c43      	adds	r3, r0, #1
 800b55a:	d1e9      	bne.n	800b530 <__fputwc+0x3c>
 800b55c:	b002      	add	sp, #8
 800b55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b562:	89a3      	ldrh	r3, [r4, #12]
 800b564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b568:	81a3      	strh	r3, [r4, #12]
 800b56a:	b002      	add	sp, #8
 800b56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b570:	f109 33ff 	add.w	r3, r9, #4294967295
 800b574:	2bfe      	cmp	r3, #254	; 0xfe
 800b576:	d8c7      	bhi.n	800b508 <__fputwc+0x14>
 800b578:	fa5f f689 	uxtb.w	r6, r9
 800b57c:	4682      	mov	sl, r0
 800b57e:	f88d 6004 	strb.w	r6, [sp, #4]
 800b582:	e7cf      	b.n	800b524 <__fputwc+0x30>
 800b584:	4648      	mov	r0, r9
 800b586:	b002      	add	sp, #8
 800b588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b58c <_fputwc_r>:
 800b58c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800b590:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b594:	d10b      	bne.n	800b5ae <_fputwc_r+0x22>
 800b596:	b410      	push	{r4}
 800b598:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800b59a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b59e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800b5a2:	6654      	str	r4, [r2, #100]	; 0x64
 800b5a4:	8193      	strh	r3, [r2, #12]
 800b5a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5aa:	f7ff bfa3 	b.w	800b4f4 <__fputwc>
 800b5ae:	f7ff bfa1 	b.w	800b4f4 <__fputwc>
 800b5b2:	bf00      	nop

0800b5b4 <_fstat_r>:
 800b5b4:	b538      	push	{r3, r4, r5, lr}
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	4c07      	ldr	r4, [pc, #28]	; (800b5d8 <_fstat_r+0x24>)
 800b5ba:	4605      	mov	r5, r0
 800b5bc:	4611      	mov	r1, r2
 800b5be:	4618      	mov	r0, r3
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	6023      	str	r3, [r4, #0]
 800b5c4:	f7f6 fbda 	bl	8001d7c <_fstat>
 800b5c8:	1c43      	adds	r3, r0, #1
 800b5ca:	d000      	beq.n	800b5ce <_fstat_r+0x1a>
 800b5cc:	bd38      	pop	{r3, r4, r5, pc}
 800b5ce:	6823      	ldr	r3, [r4, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d0fb      	beq.n	800b5cc <_fstat_r+0x18>
 800b5d4:	602b      	str	r3, [r5, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	20000a9c 	.word	0x20000a9c

0800b5dc <_isatty_r>:
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	4c07      	ldr	r4, [pc, #28]	; (800b5fc <_isatty_r+0x20>)
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	4605      	mov	r5, r0
 800b5e4:	4608      	mov	r0, r1
 800b5e6:	6023      	str	r3, [r4, #0]
 800b5e8:	f7f6 fc1c 	bl	8001e24 <_isatty>
 800b5ec:	1c43      	adds	r3, r0, #1
 800b5ee:	d000      	beq.n	800b5f2 <_isatty_r+0x16>
 800b5f0:	bd38      	pop	{r3, r4, r5, pc}
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d0fb      	beq.n	800b5f0 <_isatty_r+0x14>
 800b5f8:	602b      	str	r3, [r5, #0]
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	20000a9c 	.word	0x20000a9c

0800b600 <_lseek_r>:
 800b600:	b570      	push	{r4, r5, r6, lr}
 800b602:	460d      	mov	r5, r1
 800b604:	4c08      	ldr	r4, [pc, #32]	; (800b628 <_lseek_r+0x28>)
 800b606:	4611      	mov	r1, r2
 800b608:	4606      	mov	r6, r0
 800b60a:	461a      	mov	r2, r3
 800b60c:	4628      	mov	r0, r5
 800b60e:	2300      	movs	r3, #0
 800b610:	6023      	str	r3, [r4, #0]
 800b612:	f7f6 fb8d 	bl	8001d30 <_lseek>
 800b616:	1c43      	adds	r3, r0, #1
 800b618:	d000      	beq.n	800b61c <_lseek_r+0x1c>
 800b61a:	bd70      	pop	{r4, r5, r6, pc}
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d0fb      	beq.n	800b61a <_lseek_r+0x1a>
 800b622:	6033      	str	r3, [r6, #0]
 800b624:	bd70      	pop	{r4, r5, r6, pc}
 800b626:	bf00      	nop
 800b628:	20000a9c 	.word	0x20000a9c

0800b62c <_read_r>:
 800b62c:	b570      	push	{r4, r5, r6, lr}
 800b62e:	460d      	mov	r5, r1
 800b630:	4c08      	ldr	r4, [pc, #32]	; (800b654 <_read_r+0x28>)
 800b632:	4611      	mov	r1, r2
 800b634:	4606      	mov	r6, r0
 800b636:	461a      	mov	r2, r3
 800b638:	4628      	mov	r0, r5
 800b63a:	2300      	movs	r3, #0
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	f7f6 fb85 	bl	8001d4c <_read>
 800b642:	1c43      	adds	r3, r0, #1
 800b644:	d000      	beq.n	800b648 <_read_r+0x1c>
 800b646:	bd70      	pop	{r4, r5, r6, pc}
 800b648:	6823      	ldr	r3, [r4, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d0fb      	beq.n	800b646 <_read_r+0x1a>
 800b64e:	6033      	str	r3, [r6, #0]
 800b650:	bd70      	pop	{r4, r5, r6, pc}
 800b652:	bf00      	nop
 800b654:	20000a9c 	.word	0x20000a9c

0800b658 <__swbuf_r>:
 800b658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65a:	460d      	mov	r5, r1
 800b65c:	4614      	mov	r4, r2
 800b65e:	4606      	mov	r6, r0
 800b660:	b110      	cbz	r0, 800b668 <__swbuf_r+0x10>
 800b662:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b664:	2b00      	cmp	r3, #0
 800b666:	d04a      	beq.n	800b6fe <__swbuf_r+0xa6>
 800b668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b66c:	69a3      	ldr	r3, [r4, #24]
 800b66e:	60a3      	str	r3, [r4, #8]
 800b670:	b291      	uxth	r1, r2
 800b672:	0708      	lsls	r0, r1, #28
 800b674:	d538      	bpl.n	800b6e8 <__swbuf_r+0x90>
 800b676:	6923      	ldr	r3, [r4, #16]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d035      	beq.n	800b6e8 <__swbuf_r+0x90>
 800b67c:	0489      	lsls	r1, r1, #18
 800b67e:	b2ef      	uxtb	r7, r5
 800b680:	d515      	bpl.n	800b6ae <__swbuf_r+0x56>
 800b682:	6822      	ldr	r2, [r4, #0]
 800b684:	6961      	ldr	r1, [r4, #20]
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	428b      	cmp	r3, r1
 800b68a:	da1c      	bge.n	800b6c6 <__swbuf_r+0x6e>
 800b68c:	3301      	adds	r3, #1
 800b68e:	68a1      	ldr	r1, [r4, #8]
 800b690:	1c50      	adds	r0, r2, #1
 800b692:	3901      	subs	r1, #1
 800b694:	60a1      	str	r1, [r4, #8]
 800b696:	6020      	str	r0, [r4, #0]
 800b698:	7015      	strb	r5, [r2, #0]
 800b69a:	6962      	ldr	r2, [r4, #20]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d01a      	beq.n	800b6d6 <__swbuf_r+0x7e>
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	07db      	lsls	r3, r3, #31
 800b6a4:	d501      	bpl.n	800b6aa <__swbuf_r+0x52>
 800b6a6:	2f0a      	cmp	r7, #10
 800b6a8:	d015      	beq.n	800b6d6 <__swbuf_r+0x7e>
 800b6aa:	4638      	mov	r0, r7
 800b6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6ae:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b6b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b6b4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800b6b8:	81a2      	strh	r2, [r4, #12]
 800b6ba:	6822      	ldr	r2, [r4, #0]
 800b6bc:	6661      	str	r1, [r4, #100]	; 0x64
 800b6be:	6961      	ldr	r1, [r4, #20]
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	428b      	cmp	r3, r1
 800b6c4:	dbe2      	blt.n	800b68c <__swbuf_r+0x34>
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f7fd fba7 	bl	8008e1c <_fflush_r>
 800b6ce:	b940      	cbnz	r0, 800b6e2 <__swbuf_r+0x8a>
 800b6d0:	6822      	ldr	r2, [r4, #0]
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e7db      	b.n	800b68e <__swbuf_r+0x36>
 800b6d6:	4621      	mov	r1, r4
 800b6d8:	4630      	mov	r0, r6
 800b6da:	f7fd fb9f 	bl	8008e1c <_fflush_r>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d0e3      	beq.n	800b6aa <__swbuf_r+0x52>
 800b6e2:	f04f 37ff 	mov.w	r7, #4294967295
 800b6e6:	e7e0      	b.n	800b6aa <__swbuf_r+0x52>
 800b6e8:	4621      	mov	r1, r4
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	f7fc fae4 	bl	8007cb8 <__swsetup_r>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d1f6      	bne.n	800b6e2 <__swbuf_r+0x8a>
 800b6f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6f8:	6923      	ldr	r3, [r4, #16]
 800b6fa:	b291      	uxth	r1, r2
 800b6fc:	e7be      	b.n	800b67c <__swbuf_r+0x24>
 800b6fe:	f7fd fc21 	bl	8008f44 <__sinit>
 800b702:	e7b1      	b.n	800b668 <__swbuf_r+0x10>

0800b704 <_wcrtomb_r>:
 800b704:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b706:	4606      	mov	r6, r0
 800b708:	b085      	sub	sp, #20
 800b70a:	461f      	mov	r7, r3
 800b70c:	b189      	cbz	r1, 800b732 <_wcrtomb_r+0x2e>
 800b70e:	4c10      	ldr	r4, [pc, #64]	; (800b750 <_wcrtomb_r+0x4c>)
 800b710:	4d10      	ldr	r5, [pc, #64]	; (800b754 <_wcrtomb_r+0x50>)
 800b712:	6824      	ldr	r4, [r4, #0]
 800b714:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800b716:	2c00      	cmp	r4, #0
 800b718:	bf08      	it	eq
 800b71a:	462c      	moveq	r4, r5
 800b71c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800b720:	47a0      	blx	r4
 800b722:	1c43      	adds	r3, r0, #1
 800b724:	d103      	bne.n	800b72e <_wcrtomb_r+0x2a>
 800b726:	2200      	movs	r2, #0
 800b728:	238a      	movs	r3, #138	; 0x8a
 800b72a:	603a      	str	r2, [r7, #0]
 800b72c:	6033      	str	r3, [r6, #0]
 800b72e:	b005      	add	sp, #20
 800b730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b732:	460c      	mov	r4, r1
 800b734:	4906      	ldr	r1, [pc, #24]	; (800b750 <_wcrtomb_r+0x4c>)
 800b736:	4a07      	ldr	r2, [pc, #28]	; (800b754 <_wcrtomb_r+0x50>)
 800b738:	6809      	ldr	r1, [r1, #0]
 800b73a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b73c:	2900      	cmp	r1, #0
 800b73e:	bf08      	it	eq
 800b740:	4611      	moveq	r1, r2
 800b742:	4622      	mov	r2, r4
 800b744:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 800b748:	a901      	add	r1, sp, #4
 800b74a:	47a0      	blx	r4
 800b74c:	e7e9      	b.n	800b722 <_wcrtomb_r+0x1e>
 800b74e:	bf00      	nop
 800b750:	20000468 	.word	0x20000468
 800b754:	2000046c 	.word	0x2000046c

0800b758 <__aeabi_d2iz>:
 800b758:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800b75c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800b760:	d215      	bcs.n	800b78e <__aeabi_d2iz+0x36>
 800b762:	d511      	bpl.n	800b788 <__aeabi_d2iz+0x30>
 800b764:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800b768:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800b76c:	d912      	bls.n	800b794 <__aeabi_d2iz+0x3c>
 800b76e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800b772:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b776:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b77a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800b77e:	fa23 f002 	lsr.w	r0, r3, r2
 800b782:	bf18      	it	ne
 800b784:	4240      	negne	r0, r0
 800b786:	4770      	bx	lr
 800b788:	f04f 0000 	mov.w	r0, #0
 800b78c:	4770      	bx	lr
 800b78e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800b792:	d105      	bne.n	800b7a0 <__aeabi_d2iz+0x48>
 800b794:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800b798:	bf08      	it	eq
 800b79a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800b79e:	4770      	bx	lr
 800b7a0:	f04f 0000 	mov.w	r0, #0
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop

0800b7a8 <__aeabi_uldivmod>:
 800b7a8:	b953      	cbnz	r3, 800b7c0 <__aeabi_uldivmod+0x18>
 800b7aa:	b94a      	cbnz	r2, 800b7c0 <__aeabi_uldivmod+0x18>
 800b7ac:	2900      	cmp	r1, #0
 800b7ae:	bf08      	it	eq
 800b7b0:	2800      	cmpeq	r0, #0
 800b7b2:	bf1c      	itt	ne
 800b7b4:	f04f 31ff 	movne.w	r1, #4294967295
 800b7b8:	f04f 30ff 	movne.w	r0, #4294967295
 800b7bc:	f000 b97e 	b.w	800babc <__aeabi_idiv0>
 800b7c0:	f1ad 0c08 	sub.w	ip, sp, #8
 800b7c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800b7c8:	f000 f806 	bl	800b7d8 <__udivmoddi4>
 800b7cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b7d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7d4:	b004      	add	sp, #16
 800b7d6:	4770      	bx	lr

0800b7d8 <__udivmoddi4>:
 800b7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7dc:	468c      	mov	ip, r1
 800b7de:	460e      	mov	r6, r1
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	9d08      	ldr	r5, [sp, #32]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d150      	bne.n	800b88a <__udivmoddi4+0xb2>
 800b7e8:	428a      	cmp	r2, r1
 800b7ea:	4617      	mov	r7, r2
 800b7ec:	d96c      	bls.n	800b8c8 <__udivmoddi4+0xf0>
 800b7ee:	fab2 fe82 	clz	lr, r2
 800b7f2:	f1be 0f00 	cmp.w	lr, #0
 800b7f6:	d00b      	beq.n	800b810 <__udivmoddi4+0x38>
 800b7f8:	f1ce 0420 	rsb	r4, lr, #32
 800b7fc:	fa20 f404 	lsr.w	r4, r0, r4
 800b800:	fa01 f60e 	lsl.w	r6, r1, lr
 800b804:	ea44 0c06 	orr.w	ip, r4, r6
 800b808:	fa02 f70e 	lsl.w	r7, r2, lr
 800b80c:	fa00 f40e 	lsl.w	r4, r0, lr
 800b810:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800b814:	0c22      	lsrs	r2, r4, #16
 800b816:	fbbc f0f9 	udiv	r0, ip, r9
 800b81a:	fa1f f887 	uxth.w	r8, r7
 800b81e:	fb09 c610 	mls	r6, r9, r0, ip
 800b822:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800b826:	fb00 f308 	mul.w	r3, r0, r8
 800b82a:	42b3      	cmp	r3, r6
 800b82c:	d909      	bls.n	800b842 <__udivmoddi4+0x6a>
 800b82e:	19f6      	adds	r6, r6, r7
 800b830:	f100 32ff 	add.w	r2, r0, #4294967295
 800b834:	f080 8122 	bcs.w	800ba7c <__udivmoddi4+0x2a4>
 800b838:	42b3      	cmp	r3, r6
 800b83a:	f240 811f 	bls.w	800ba7c <__udivmoddi4+0x2a4>
 800b83e:	3802      	subs	r0, #2
 800b840:	443e      	add	r6, r7
 800b842:	1af6      	subs	r6, r6, r3
 800b844:	b2a2      	uxth	r2, r4
 800b846:	fbb6 f3f9 	udiv	r3, r6, r9
 800b84a:	fb09 6613 	mls	r6, r9, r3, r6
 800b84e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800b852:	fb03 f808 	mul.w	r8, r3, r8
 800b856:	45a0      	cmp	r8, r4
 800b858:	d909      	bls.n	800b86e <__udivmoddi4+0x96>
 800b85a:	19e4      	adds	r4, r4, r7
 800b85c:	f103 32ff 	add.w	r2, r3, #4294967295
 800b860:	f080 810a 	bcs.w	800ba78 <__udivmoddi4+0x2a0>
 800b864:	45a0      	cmp	r8, r4
 800b866:	f240 8107 	bls.w	800ba78 <__udivmoddi4+0x2a0>
 800b86a:	3b02      	subs	r3, #2
 800b86c:	443c      	add	r4, r7
 800b86e:	ebc8 0404 	rsb	r4, r8, r4
 800b872:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800b876:	2100      	movs	r1, #0
 800b878:	2d00      	cmp	r5, #0
 800b87a:	d062      	beq.n	800b942 <__udivmoddi4+0x16a>
 800b87c:	fa24 f40e 	lsr.w	r4, r4, lr
 800b880:	2300      	movs	r3, #0
 800b882:	602c      	str	r4, [r5, #0]
 800b884:	606b      	str	r3, [r5, #4]
 800b886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b88a:	428b      	cmp	r3, r1
 800b88c:	d907      	bls.n	800b89e <__udivmoddi4+0xc6>
 800b88e:	2d00      	cmp	r5, #0
 800b890:	d055      	beq.n	800b93e <__udivmoddi4+0x166>
 800b892:	2100      	movs	r1, #0
 800b894:	e885 0041 	stmia.w	r5, {r0, r6}
 800b898:	4608      	mov	r0, r1
 800b89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b89e:	fab3 f183 	clz	r1, r3
 800b8a2:	2900      	cmp	r1, #0
 800b8a4:	f040 8090 	bne.w	800b9c8 <__udivmoddi4+0x1f0>
 800b8a8:	42b3      	cmp	r3, r6
 800b8aa:	d302      	bcc.n	800b8b2 <__udivmoddi4+0xda>
 800b8ac:	4282      	cmp	r2, r0
 800b8ae:	f200 80f8 	bhi.w	800baa2 <__udivmoddi4+0x2ca>
 800b8b2:	1a84      	subs	r4, r0, r2
 800b8b4:	eb66 0603 	sbc.w	r6, r6, r3
 800b8b8:	2001      	movs	r0, #1
 800b8ba:	46b4      	mov	ip, r6
 800b8bc:	2d00      	cmp	r5, #0
 800b8be:	d040      	beq.n	800b942 <__udivmoddi4+0x16a>
 800b8c0:	e885 1010 	stmia.w	r5, {r4, ip}
 800b8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8c8:	b912      	cbnz	r2, 800b8d0 <__udivmoddi4+0xf8>
 800b8ca:	2701      	movs	r7, #1
 800b8cc:	fbb7 f7f2 	udiv	r7, r7, r2
 800b8d0:	fab7 fe87 	clz	lr, r7
 800b8d4:	f1be 0f00 	cmp.w	lr, #0
 800b8d8:	d135      	bne.n	800b946 <__udivmoddi4+0x16e>
 800b8da:	1bf3      	subs	r3, r6, r7
 800b8dc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800b8e0:	fa1f fc87 	uxth.w	ip, r7
 800b8e4:	2101      	movs	r1, #1
 800b8e6:	fbb3 f0f8 	udiv	r0, r3, r8
 800b8ea:	0c22      	lsrs	r2, r4, #16
 800b8ec:	fb08 3610 	mls	r6, r8, r0, r3
 800b8f0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800b8f4:	fb0c f300 	mul.w	r3, ip, r0
 800b8f8:	42b3      	cmp	r3, r6
 800b8fa:	d907      	bls.n	800b90c <__udivmoddi4+0x134>
 800b8fc:	19f6      	adds	r6, r6, r7
 800b8fe:	f100 32ff 	add.w	r2, r0, #4294967295
 800b902:	d202      	bcs.n	800b90a <__udivmoddi4+0x132>
 800b904:	42b3      	cmp	r3, r6
 800b906:	f200 80ce 	bhi.w	800baa6 <__udivmoddi4+0x2ce>
 800b90a:	4610      	mov	r0, r2
 800b90c:	1af6      	subs	r6, r6, r3
 800b90e:	b2a2      	uxth	r2, r4
 800b910:	fbb6 f3f8 	udiv	r3, r6, r8
 800b914:	fb08 6613 	mls	r6, r8, r3, r6
 800b918:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800b91c:	fb0c fc03 	mul.w	ip, ip, r3
 800b920:	45a4      	cmp	ip, r4
 800b922:	d907      	bls.n	800b934 <__udivmoddi4+0x15c>
 800b924:	19e4      	adds	r4, r4, r7
 800b926:	f103 32ff 	add.w	r2, r3, #4294967295
 800b92a:	d202      	bcs.n	800b932 <__udivmoddi4+0x15a>
 800b92c:	45a4      	cmp	ip, r4
 800b92e:	f200 80b5 	bhi.w	800ba9c <__udivmoddi4+0x2c4>
 800b932:	4613      	mov	r3, r2
 800b934:	ebcc 0404 	rsb	r4, ip, r4
 800b938:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800b93c:	e79c      	b.n	800b878 <__udivmoddi4+0xa0>
 800b93e:	4629      	mov	r1, r5
 800b940:	4628      	mov	r0, r5
 800b942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b946:	f1ce 0120 	rsb	r1, lr, #32
 800b94a:	fa06 f30e 	lsl.w	r3, r6, lr
 800b94e:	fa07 f70e 	lsl.w	r7, r7, lr
 800b952:	fa20 f901 	lsr.w	r9, r0, r1
 800b956:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800b95a:	40ce      	lsrs	r6, r1
 800b95c:	ea49 0903 	orr.w	r9, r9, r3
 800b960:	fbb6 faf8 	udiv	sl, r6, r8
 800b964:	ea4f 4419 	mov.w	r4, r9, lsr #16
 800b968:	fb08 661a 	mls	r6, r8, sl, r6
 800b96c:	fa1f fc87 	uxth.w	ip, r7
 800b970:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 800b974:	fb0a f20c 	mul.w	r2, sl, ip
 800b978:	429a      	cmp	r2, r3
 800b97a:	fa00 f40e 	lsl.w	r4, r0, lr
 800b97e:	d90a      	bls.n	800b996 <__udivmoddi4+0x1be>
 800b980:	19db      	adds	r3, r3, r7
 800b982:	f10a 31ff 	add.w	r1, sl, #4294967295
 800b986:	f080 8087 	bcs.w	800ba98 <__udivmoddi4+0x2c0>
 800b98a:	429a      	cmp	r2, r3
 800b98c:	f240 8084 	bls.w	800ba98 <__udivmoddi4+0x2c0>
 800b990:	f1aa 0a02 	sub.w	sl, sl, #2
 800b994:	443b      	add	r3, r7
 800b996:	1a9b      	subs	r3, r3, r2
 800b998:	fa1f f989 	uxth.w	r9, r9
 800b99c:	fbb3 f1f8 	udiv	r1, r3, r8
 800b9a0:	fb08 3311 	mls	r3, r8, r1, r3
 800b9a4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800b9a8:	fb01 f60c 	mul.w	r6, r1, ip
 800b9ac:	429e      	cmp	r6, r3
 800b9ae:	d907      	bls.n	800b9c0 <__udivmoddi4+0x1e8>
 800b9b0:	19db      	adds	r3, r3, r7
 800b9b2:	f101 32ff 	add.w	r2, r1, #4294967295
 800b9b6:	d26b      	bcs.n	800ba90 <__udivmoddi4+0x2b8>
 800b9b8:	429e      	cmp	r6, r3
 800b9ba:	d969      	bls.n	800ba90 <__udivmoddi4+0x2b8>
 800b9bc:	3902      	subs	r1, #2
 800b9be:	443b      	add	r3, r7
 800b9c0:	1b9b      	subs	r3, r3, r6
 800b9c2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b9c6:	e78e      	b.n	800b8e6 <__udivmoddi4+0x10e>
 800b9c8:	f1c1 0e20 	rsb	lr, r1, #32
 800b9cc:	fa22 f40e 	lsr.w	r4, r2, lr
 800b9d0:	408b      	lsls	r3, r1
 800b9d2:	4323      	orrs	r3, r4
 800b9d4:	fa20 f70e 	lsr.w	r7, r0, lr
 800b9d8:	fa06 f401 	lsl.w	r4, r6, r1
 800b9dc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800b9e0:	fa26 f60e 	lsr.w	r6, r6, lr
 800b9e4:	433c      	orrs	r4, r7
 800b9e6:	fbb6 f9fc 	udiv	r9, r6, ip
 800b9ea:	0c27      	lsrs	r7, r4, #16
 800b9ec:	fb0c 6619 	mls	r6, ip, r9, r6
 800b9f0:	fa1f f883 	uxth.w	r8, r3
 800b9f4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800b9f8:	fb09 f708 	mul.w	r7, r9, r8
 800b9fc:	42b7      	cmp	r7, r6
 800b9fe:	fa02 f201 	lsl.w	r2, r2, r1
 800ba02:	fa00 fa01 	lsl.w	sl, r0, r1
 800ba06:	d908      	bls.n	800ba1a <__udivmoddi4+0x242>
 800ba08:	18f6      	adds	r6, r6, r3
 800ba0a:	f109 30ff 	add.w	r0, r9, #4294967295
 800ba0e:	d241      	bcs.n	800ba94 <__udivmoddi4+0x2bc>
 800ba10:	42b7      	cmp	r7, r6
 800ba12:	d93f      	bls.n	800ba94 <__udivmoddi4+0x2bc>
 800ba14:	f1a9 0902 	sub.w	r9, r9, #2
 800ba18:	441e      	add	r6, r3
 800ba1a:	1bf6      	subs	r6, r6, r7
 800ba1c:	b2a0      	uxth	r0, r4
 800ba1e:	fbb6 f4fc 	udiv	r4, r6, ip
 800ba22:	fb0c 6614 	mls	r6, ip, r4, r6
 800ba26:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 800ba2a:	fb04 f808 	mul.w	r8, r4, r8
 800ba2e:	45b8      	cmp	r8, r7
 800ba30:	d907      	bls.n	800ba42 <__udivmoddi4+0x26a>
 800ba32:	18ff      	adds	r7, r7, r3
 800ba34:	f104 30ff 	add.w	r0, r4, #4294967295
 800ba38:	d228      	bcs.n	800ba8c <__udivmoddi4+0x2b4>
 800ba3a:	45b8      	cmp	r8, r7
 800ba3c:	d926      	bls.n	800ba8c <__udivmoddi4+0x2b4>
 800ba3e:	3c02      	subs	r4, #2
 800ba40:	441f      	add	r7, r3
 800ba42:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800ba46:	ebc8 0707 	rsb	r7, r8, r7
 800ba4a:	fba0 8902 	umull	r8, r9, r0, r2
 800ba4e:	454f      	cmp	r7, r9
 800ba50:	4644      	mov	r4, r8
 800ba52:	464e      	mov	r6, r9
 800ba54:	d314      	bcc.n	800ba80 <__udivmoddi4+0x2a8>
 800ba56:	d029      	beq.n	800baac <__udivmoddi4+0x2d4>
 800ba58:	b365      	cbz	r5, 800bab4 <__udivmoddi4+0x2dc>
 800ba5a:	ebba 0304 	subs.w	r3, sl, r4
 800ba5e:	eb67 0706 	sbc.w	r7, r7, r6
 800ba62:	fa07 fe0e 	lsl.w	lr, r7, lr
 800ba66:	40cb      	lsrs	r3, r1
 800ba68:	40cf      	lsrs	r7, r1
 800ba6a:	ea4e 0303 	orr.w	r3, lr, r3
 800ba6e:	e885 0088 	stmia.w	r5, {r3, r7}
 800ba72:	2100      	movs	r1, #0
 800ba74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba78:	4613      	mov	r3, r2
 800ba7a:	e6f8      	b.n	800b86e <__udivmoddi4+0x96>
 800ba7c:	4610      	mov	r0, r2
 800ba7e:	e6e0      	b.n	800b842 <__udivmoddi4+0x6a>
 800ba80:	ebb8 0402 	subs.w	r4, r8, r2
 800ba84:	eb69 0603 	sbc.w	r6, r9, r3
 800ba88:	3801      	subs	r0, #1
 800ba8a:	e7e5      	b.n	800ba58 <__udivmoddi4+0x280>
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	e7d8      	b.n	800ba42 <__udivmoddi4+0x26a>
 800ba90:	4611      	mov	r1, r2
 800ba92:	e795      	b.n	800b9c0 <__udivmoddi4+0x1e8>
 800ba94:	4681      	mov	r9, r0
 800ba96:	e7c0      	b.n	800ba1a <__udivmoddi4+0x242>
 800ba98:	468a      	mov	sl, r1
 800ba9a:	e77c      	b.n	800b996 <__udivmoddi4+0x1be>
 800ba9c:	3b02      	subs	r3, #2
 800ba9e:	443c      	add	r4, r7
 800baa0:	e748      	b.n	800b934 <__udivmoddi4+0x15c>
 800baa2:	4608      	mov	r0, r1
 800baa4:	e70a      	b.n	800b8bc <__udivmoddi4+0xe4>
 800baa6:	3802      	subs	r0, #2
 800baa8:	443e      	add	r6, r7
 800baaa:	e72f      	b.n	800b90c <__udivmoddi4+0x134>
 800baac:	45c2      	cmp	sl, r8
 800baae:	d3e7      	bcc.n	800ba80 <__udivmoddi4+0x2a8>
 800bab0:	463e      	mov	r6, r7
 800bab2:	e7d1      	b.n	800ba58 <__udivmoddi4+0x280>
 800bab4:	4629      	mov	r1, r5
 800bab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baba:	bf00      	nop

0800babc <__aeabi_idiv0>:
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	3353494c 	.word	0x3353494c
 800bac4:	535f4844 	.word	0x535f4844
 800bac8:	444f7465 	.word	0x444f7465
 800bacc:	6f642052 	.word	0x6f642052
 800bad0:	2e2e656e 	.word	0x2e2e656e
 800bad4:	0000002e 	.word	0x0000002e
 800bad8:	3353494c 	.word	0x3353494c
 800badc:	535f4844 	.word	0x535f4844
 800bae0:	6f4d7465 	.word	0x6f4d7465
 800bae4:	64206564 	.word	0x64206564
 800bae8:	2e656e6f 	.word	0x2e656e6f
 800baec:	00002e2e 	.word	0x00002e2e
 800baf0:	3353494c 	.word	0x3353494c
 800baf4:	535f4844 	.word	0x535f4844
 800baf8:	75467465 	.word	0x75467465
 800bafc:	63536c6c 	.word	0x63536c6c
 800bb00:	20656c61 	.word	0x20656c61
 800bb04:	656e6f64 	.word	0x656e6f64
 800bb08:	002e2e2e 	.word	0x002e2e2e
 800bb0c:	3353494c 	.word	0x3353494c
 800bb10:	535f4844 	.word	0x535f4844
 800bb14:	78417465 	.word	0x78417465
 800bb18:	64207369 	.word	0x64207369
 800bb1c:	2e656e6f 	.word	0x2e656e6f
 800bb20:	00002e2e 	.word	0x00002e2e
 800bb24:	3353494c 	.word	0x3353494c
 800bb28:	535f4844 	.word	0x535f4844
 800bb2c:	6e497465 	.word	0x6e497465
 800bb30:	68543174 	.word	0x68543174
 800bb34:	68737265 	.word	0x68737265
 800bb38:	20646c6f 	.word	0x20646c6f
 800bb3c:	656e6f64 	.word	0x656e6f64
 800bb40:	002e2e2e 	.word	0x002e2e2e
 800bb44:	3353494c 	.word	0x3353494c
 800bb48:	535f4844 	.word	0x535f4844
 800bb4c:	6e497465 	.word	0x6e497465
 800bb50:	6e6f4374 	.word	0x6e6f4374
 800bb54:	75676966 	.word	0x75676966
 800bb58:	69746172 	.word	0x69746172
 800bb5c:	64206e6f 	.word	0x64206e6f
 800bb60:	2e656e6f 	.word	0x2e656e6f
 800bb64:	00002e2e 	.word	0x00002e2e
 800bb68:	3353494c 	.word	0x3353494c
 800bb6c:	535f4844 	.word	0x535f4844
 800bb70:	6e497465 	.word	0x6e497465
 800bb74:	646f4d74 	.word	0x646f4d74
 800bb78:	6f642065 	.word	0x6f642065
 800bb7c:	2e2e656e 	.word	0x2e2e656e
 800bb80:	0000002e 	.word	0x0000002e
 800bb84:	3353494c 	.word	0x3353494c
 800bb88:	535f4844 	.word	0x535f4844
 800bb8c:	44417465 	.word	0x44417465
 800bb90:	78754143 	.word	0x78754143
 800bb94:	6e6f6420 	.word	0x6e6f6420
 800bb98:	2e2e2e65 	.word	0x2e2e2e65
 800bb9c:	00000000 	.word	0x00000000
 800bba0:	3353494c 	.word	0x3353494c
 800bba4:	535f4844 	.word	0x535f4844
 800bba8:	44427465 	.word	0x44427465
 800bbac:	6f642055 	.word	0x6f642055
 800bbb0:	2e2e656e 	.word	0x2e2e656e
 800bbb4:	0000002e 	.word	0x0000002e
 800bbb8:	3353494c 	.word	0x3353494c
 800bbbc:	535f4844 	.word	0x535f4844
 800bbc0:	65547465 	.word	0x65547465
 800bbc4:	7265706d 	.word	0x7265706d
 800bbc8:	72757461 	.word	0x72757461
 800bbcc:	6f642065 	.word	0x6f642065
 800bbd0:	2e2e656e 	.word	0x2e2e656e
 800bbd4:	0000002e 	.word	0x0000002e
 800bbd8:	37257325 	.word	0x37257325
 800bbdc:	25732564 	.word	0x25732564
 800bbe0:	73256437 	.word	0x73256437
 800bbe4:	25643725 	.word	0x25643725
 800bbe8:	32302573 	.word	0x32302573
 800bbec:	000a2464 	.word	0x000a2464
 800bbf0:	0000002c 	.word	0x0000002c
 800bbf4:	00007325 	.word	0x00007325
 800bbf8:	58535523 	.word	0x58535523
 800bbfc:	5523002c 	.word	0x5523002c
 800bc00:	002c5844 	.word	0x002c5844
 800bc04:	58534423 	.word	0x58534423
 800bc08:	4423002c 	.word	0x4423002c
 800bc0c:	002c5844 	.word	0x002c5844
 800bc10:	504f5423 	.word	0x504f5423
 800bc14:	4223002c 	.word	0x4223002c
 800bc18:	002c544f 	.word	0x002c544f
 800bc1c:	58585823 	.word	0x58585823
 800bc20:	4623002c 	.word	0x4623002c
 800bc24:	002c4c41 	.word	0x002c4c41
 800bc28:	55424544 	.word	0x55424544
 800bc2c:	32492b47 	.word	0x32492b47
 800bc30:	41552b43 	.word	0x41552b43
 800bc34:	69205452 	.word	0x69205452
 800bc38:	2074696e 	.word	0x2074696e
 800bc3c:	656e6f64 	.word	0x656e6f64
 800bc40:	002e2e2e 	.word	0x002e2e2e
 800bc44:	534d454d 	.word	0x534d454d
 800bc48:	696e6920 	.word	0x696e6920
 800bc4c:	6f642074 	.word	0x6f642074
 800bc50:	2e2e656e 	.word	0x2e2e656e
 800bc54:	0000002e 	.word	0x0000002e
 800bc58:	6f727245 	.word	0x6f727245
 800bc5c:	454d2072 	.word	0x454d2072
 800bc60:	6920534d 	.word	0x6920534d
 800bc64:	2c74696e 	.word	0x2c74696e
 800bc68:	74657220 	.word	0x74657220
 800bc6c:	2e2e7972 	.word	0x2e2e7972
 800bc70:	0000002e 	.word	0x0000002e
 800bc74:	534d454d 	.word	0x534d454d
 800bc78:	6e6f6320 	.word	0x6e6f6320
 800bc7c:	20676966 	.word	0x20676966
 800bc80:	656e6f64 	.word	0x656e6f64
 800bc84:	002e2e2e 	.word	0x002e2e2e
 800bc88:	6f727245 	.word	0x6f727245
 800bc8c:	454d2072 	.word	0x454d2072
 800bc90:	6320534d 	.word	0x6320534d
 800bc94:	69666e6f 	.word	0x69666e6f
 800bc98:	72202c67 	.word	0x72202c67
 800bc9c:	79727465 	.word	0x79727465
 800bca0:	002e2e2e 	.word	0x002e2e2e
 800bca4:	65636572 	.word	0x65636572
 800bca8:	64657669 	.word	0x64657669
 800bcac:	0a732520 	.word	0x0a732520
 800bcb0:	00000000 	.word	0x00000000
 800bcb4:	51455223 	.word	0x51455223
 800bcb8:	0000002c 	.word	0x0000002c
 800bcbc:	444e4523 	.word	0x444e4523
 800bcc0:	0000002c 	.word	0x0000002c
 800bcc4:	4e4f4323 	.word	0x4e4f4323
 800bcc8:	0000002c 	.word	0x0000002c
 800bccc:	474e4123 	.word	0x474e4123
 800bcd0:	0000002c 	.word	0x0000002c
 800bcd4:	25207325 	.word	0x25207325
 800bcd8:	00000066 	.word	0x00000066
 800bcdc:	00000000 	.word	0x00000000

0800bce0 <atanlo>:
 800bce0:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
 800bcf0:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

0800bd00 <atanhi>:
 800bd00:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
 800bd10:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
 800bd20:	74727173 00000000 0000000a              sqrt........

0800bd2c <fpi.6173>:
 800bd2c:	00000035 fffffbce 000003cb 00000001     5...............
 800bd3c:	00000000 0000666e 74696e69 00000079     ....nf..inity...
 800bd4c:	00006e61                                an..

0800bd50 <fpinan.6209>:
 800bd50:	00000034 fffffbce 000003cb 00000001     4...............
	...

0800bd68 <tinytens>:
 800bd68:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800bd78:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800bd88:	64ac6f43 11680628                       Co.d(.h.

0800bd90 <zeroes.7258>:
 800bd90:	30303030 30303030 30303030 30303030     0000000000000000
 800bda0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 800bdb0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 800bdc0:	00000000 33323130 37363534 62613938     ....0123456789ab
 800bdd0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 800bde0:	00000030                                0...

0800bde4 <blanks.7257>:
 800bde4:	20202020 20202020 20202020 20202020                     

0800bdf4 <zeroes.7273>:
 800bdf4:	30303030 30303030 30303030 30303030     0000000000000000

0800be04 <blanks.7272>:
 800be04:	20202020 20202020 20202020 20202020                     
 800be14:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0800be24 <__hexdig>:
	...
 800be54:	13121110 17161514 00001918 00000000     ................
 800be64:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
 800be84:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
 800bf24:	00000043 49534f50 00000058 0000002e     C...POSIX.......
 800bf34:	00000000                                ....

0800bf38 <__mprec_tens>:
 800bf38:	00000000 3ff00000 00000000 40240000     .......?......$@
 800bf48:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800bf58:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800bf68:	00000000 412e8480 00000000 416312d0     .......A......cA
 800bf78:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800bf88:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800bf98:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800bfa8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800bfb8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800bfc8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800bfd8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800bfe8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800bff8:	79d99db4 44ea7843                       ...yCx.D

0800c000 <__mprec_bigtens>:
 800c000:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800c010:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800c020:	7f73bf3c 75154fdd                       <.s..O.u

0800c028 <p05.6087>:
 800c028:	00000005 00000019 0000007d              ........}...

0800c034 <_ctype_>:
 800c034:	20202000 20202020 28282020 20282828     .         ((((( 
 800c044:	20202020 20202020 20202020 20202020                     
 800c054:	10108820 10101010 10101010 10101010      ...............
 800c064:	04040410 04040404 10040404 10101010     ................
 800c074:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800c084:	01010101 01010101 01010101 10101010     ................
 800c094:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800c0a4:	02020202 02020202 02020202 10101010     ................
 800c0b4:	00000020 00000000 00000000 00000000      ...............
	...
